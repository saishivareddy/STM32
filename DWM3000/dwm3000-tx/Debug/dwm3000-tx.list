
dwm3000-tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00020de8  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000055c  08020f24  08020f24  00030f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021480  08021480  00031480  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  08021480  08021480  00031480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021488  08021488  00040610  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08021488  08021488  00031488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802148c  0802148c  0003148c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000610  20000000  08021490  00040000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          000001c0  20000610  08021aa0  00040610  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007d0  08021aa0  000407d0  2**0
                  ALLOC
 11 .ARM.attributes 0000002f  00000000  00000000  00040610  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013c0c  00000000  00000000  0004063f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e9c  00000000  00000000  0005424b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001298  00000000  00000000  000580e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00019950  00000000  00000000  00059380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00019f99  00000000  00000000  00072cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008dc6f  00000000  00000000  0008cc69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      000000cf  00000000  00000000  0011a8d8  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001088  00000000  00000000  0011a9a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004b14  00000000  00000000  0011ba30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000610 	.word	0x20000610
 8000158:	00000000 	.word	0x00000000
 800015c:	08020eb4 	.word	0x08020eb4

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000614 	.word	0x20000614
 8000178:	08020eb4 	.word	0x08020eb4

0800017c <_stack_init>:
 800017c:	f5a3 3a80 	sub.w	sl, r3, #65536	; 0x10000
 8000180:	4770      	bx	lr
 8000182:	bf00      	nop

08000184 <_mainCRTStartup>:
 8000184:	4b17      	ldr	r3, [pc, #92]	; (80001e4 <_mainCRTStartup+0x60>)
 8000186:	2b00      	cmp	r3, #0
 8000188:	bf08      	it	eq
 800018a:	4b13      	ldreq	r3, [pc, #76]	; (80001d8 <_mainCRTStartup+0x54>)
 800018c:	469d      	mov	sp, r3
 800018e:	f7ff fff5 	bl	800017c <_stack_init>
 8000192:	2100      	movs	r1, #0
 8000194:	468b      	mov	fp, r1
 8000196:	460f      	mov	r7, r1
 8000198:	4813      	ldr	r0, [pc, #76]	; (80001e8 <_mainCRTStartup+0x64>)
 800019a:	4a14      	ldr	r2, [pc, #80]	; (80001ec <_mainCRTStartup+0x68>)
 800019c:	1a12      	subs	r2, r2, r0
 800019e:	f020 fd13 	bl	8020bc8 <memset>
 80001a2:	4b0e      	ldr	r3, [pc, #56]	; (80001dc <_mainCRTStartup+0x58>)
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	d000      	beq.n	80001aa <_mainCRTStartup+0x26>
 80001a8:	4798      	blx	r3
 80001aa:	4b0d      	ldr	r3, [pc, #52]	; (80001e0 <_mainCRTStartup+0x5c>)
 80001ac:	2b00      	cmp	r3, #0
 80001ae:	d000      	beq.n	80001b2 <_mainCRTStartup+0x2e>
 80001b0:	4798      	blx	r3
 80001b2:	2000      	movs	r0, #0
 80001b4:	2100      	movs	r1, #0
 80001b6:	0004      	movs	r4, r0
 80001b8:	000d      	movs	r5, r1
 80001ba:	480d      	ldr	r0, [pc, #52]	; (80001f0 <_mainCRTStartup+0x6c>)
 80001bc:	2800      	cmp	r0, #0
 80001be:	d002      	beq.n	80001c6 <_mainCRTStartup+0x42>
 80001c0:	480c      	ldr	r0, [pc, #48]	; (80001f4 <_mainCRTStartup+0x70>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	f020 fccb 	bl	8020b60 <__libc_init_array>
 80001ca:	0020      	movs	r0, r4
 80001cc:	0029      	movs	r1, r5
 80001ce:	f001 fd35 	bl	8001c3c <main>
 80001d2:	f020 fcb1 	bl	8020b38 <exit>
 80001d6:	bf00      	nop
 80001d8:	00080000 	.word	0x00080000
	...
 80001e8:	20000610 	.word	0x20000610
 80001ec:	200007d0 	.word	0x200007d0
	...
 80001f8:	08021490 	.word	0x08021490
 80001fc:	20000000 	.word	0x20000000
 8000200:	20000610 	.word	0x20000610
 8000204:	20000610 	.word	0x20000610
 8000208:	200007d0 	.word	0x200007d0
 800020c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000210:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000214:	bf1e      	ittt	ne
 8000216:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800021a:	ea92 0f0c 	teqne	r2, ip
 800021e:	ea93 0f0c 	teqne	r3, ip
 8000222:	d06f      	beq.n	8000304 <_mainCRTStartup+0x180>
 8000224:	441a      	add	r2, r3
 8000226:	ea80 0c01 	eor.w	ip, r0, r1
 800022a:	0240      	lsls	r0, r0, #9
 800022c:	bf18      	it	ne
 800022e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000232:	d01e      	beq.n	8000272 <_mainCRTStartup+0xee>
 8000234:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000238:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800023c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000240:	fba0 3101 	umull	r3, r1, r0, r1
 8000244:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000248:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800024c:	bf3e      	ittt	cc
 800024e:	0049      	lslcc	r1, r1, #1
 8000250:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000254:	005b      	lslcc	r3, r3, #1
 8000256:	ea40 0001 	orr.w	r0, r0, r1
 800025a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800025e:	2afd      	cmp	r2, #253	; 0xfd
 8000260:	d81d      	bhi.n	800029e <_mainCRTStartup+0x11a>
 8000262:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000266:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800026a:	bf08      	it	eq
 800026c:	f020 0001 	biceq.w	r0, r0, #1
 8000270:	4770      	bx	lr
 8000272:	f090 0f00 	teq	r0, #0
 8000276:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800027a:	bf08      	it	eq
 800027c:	0249      	lsleq	r1, r1, #9
 800027e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000282:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000286:	3a7f      	subs	r2, #127	; 0x7f
 8000288:	bfc2      	ittt	gt
 800028a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800028e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000292:	4770      	bxgt	lr
 8000294:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000298:	f04f 0300 	mov.w	r3, #0
 800029c:	3a01      	subs	r2, #1
 800029e:	dc5d      	bgt.n	800035c <_mainCRTStartup+0x1d8>
 80002a0:	f112 0f19 	cmn.w	r2, #25
 80002a4:	bfdc      	itt	le
 80002a6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80002aa:	4770      	bxle	lr
 80002ac:	f1c2 0200 	rsb	r2, r2, #0
 80002b0:	0041      	lsls	r1, r0, #1
 80002b2:	fa21 f102 	lsr.w	r1, r1, r2
 80002b6:	f1c2 0220 	rsb	r2, r2, #32
 80002ba:	fa00 fc02 	lsl.w	ip, r0, r2
 80002be:	ea5f 0031 	movs.w	r0, r1, rrx
 80002c2:	f140 0000 	adc.w	r0, r0, #0
 80002c6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80002ca:	bf08      	it	eq
 80002cc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80002d0:	4770      	bx	lr
 80002d2:	f092 0f00 	teq	r2, #0
 80002d6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80002da:	bf02      	ittt	eq
 80002dc:	0040      	lsleq	r0, r0, #1
 80002de:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80002e2:	3a01      	subeq	r2, #1
 80002e4:	d0f9      	beq.n	80002da <_mainCRTStartup+0x156>
 80002e6:	ea40 000c 	orr.w	r0, r0, ip
 80002ea:	f093 0f00 	teq	r3, #0
 80002ee:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80002f2:	bf02      	ittt	eq
 80002f4:	0049      	lsleq	r1, r1, #1
 80002f6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80002fa:	3b01      	subeq	r3, #1
 80002fc:	d0f9      	beq.n	80002f2 <_mainCRTStartup+0x16e>
 80002fe:	ea41 010c 	orr.w	r1, r1, ip
 8000302:	e78f      	b.n	8000224 <_mainCRTStartup+0xa0>
 8000304:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000308:	ea92 0f0c 	teq	r2, ip
 800030c:	bf18      	it	ne
 800030e:	ea93 0f0c 	teqne	r3, ip
 8000312:	d00a      	beq.n	800032a <_mainCRTStartup+0x1a6>
 8000314:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000318:	bf18      	it	ne
 800031a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800031e:	d1d8      	bne.n	80002d2 <_mainCRTStartup+0x14e>
 8000320:	ea80 0001 	eor.w	r0, r0, r1
 8000324:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000328:	4770      	bx	lr
 800032a:	f090 0f00 	teq	r0, #0
 800032e:	bf17      	itett	ne
 8000330:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000334:	4608      	moveq	r0, r1
 8000336:	f091 0f00 	teqne	r1, #0
 800033a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800033e:	d014      	beq.n	800036a <_mainCRTStartup+0x1e6>
 8000340:	ea92 0f0c 	teq	r2, ip
 8000344:	d101      	bne.n	800034a <_mainCRTStartup+0x1c6>
 8000346:	0242      	lsls	r2, r0, #9
 8000348:	d10f      	bne.n	800036a <_mainCRTStartup+0x1e6>
 800034a:	ea93 0f0c 	teq	r3, ip
 800034e:	d103      	bne.n	8000358 <_mainCRTStartup+0x1d4>
 8000350:	024b      	lsls	r3, r1, #9
 8000352:	bf18      	it	ne
 8000354:	4608      	movne	r0, r1
 8000356:	d108      	bne.n	800036a <_mainCRTStartup+0x1e6>
 8000358:	ea80 0001 	eor.w	r0, r0, r1
 800035c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000360:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000364:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000368:	4770      	bx	lr
 800036a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800036e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000372:	4770      	bx	lr

08000374 <__aeabi_frsub>:
 8000374:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000378:	e002      	b.n	8000380 <__addsf3>
 800037a:	bf00      	nop

0800037c <__aeabi_fsub>:
 800037c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000380 <__addsf3>:
 8000380:	0042      	lsls	r2, r0, #1
 8000382:	bf1f      	itttt	ne
 8000384:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000388:	ea92 0f03 	teqne	r2, r3
 800038c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000390:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000394:	d06a      	beq.n	800046c <__addsf3+0xec>
 8000396:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800039a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800039e:	bfc1      	itttt	gt
 80003a0:	18d2      	addgt	r2, r2, r3
 80003a2:	4041      	eorgt	r1, r0
 80003a4:	4048      	eorgt	r0, r1
 80003a6:	4041      	eorgt	r1, r0
 80003a8:	bfb8      	it	lt
 80003aa:	425b      	neglt	r3, r3
 80003ac:	2b19      	cmp	r3, #25
 80003ae:	bf88      	it	hi
 80003b0:	4770      	bxhi	lr
 80003b2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80003b6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003ba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80003be:	bf18      	it	ne
 80003c0:	4240      	negne	r0, r0
 80003c2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003c6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80003ca:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80003ce:	bf18      	it	ne
 80003d0:	4249      	negne	r1, r1
 80003d2:	ea92 0f03 	teq	r2, r3
 80003d6:	d03f      	beq.n	8000458 <__addsf3+0xd8>
 80003d8:	f1a2 0201 	sub.w	r2, r2, #1
 80003dc:	fa41 fc03 	asr.w	ip, r1, r3
 80003e0:	eb10 000c 	adds.w	r0, r0, ip
 80003e4:	f1c3 0320 	rsb	r3, r3, #32
 80003e8:	fa01 f103 	lsl.w	r1, r1, r3
 80003ec:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80003f0:	d502      	bpl.n	80003f8 <__addsf3+0x78>
 80003f2:	4249      	negs	r1, r1
 80003f4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80003f8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80003fc:	d313      	bcc.n	8000426 <__addsf3+0xa6>
 80003fe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000402:	d306      	bcc.n	8000412 <__addsf3+0x92>
 8000404:	0840      	lsrs	r0, r0, #1
 8000406:	ea4f 0131 	mov.w	r1, r1, rrx
 800040a:	f102 0201 	add.w	r2, r2, #1
 800040e:	2afe      	cmp	r2, #254	; 0xfe
 8000410:	d251      	bcs.n	80004b6 <__addsf3+0x136>
 8000412:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000416:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800041a:	bf08      	it	eq
 800041c:	f020 0001 	biceq.w	r0, r0, #1
 8000420:	ea40 0003 	orr.w	r0, r0, r3
 8000424:	4770      	bx	lr
 8000426:	0049      	lsls	r1, r1, #1
 8000428:	eb40 0000 	adc.w	r0, r0, r0
 800042c:	3a01      	subs	r2, #1
 800042e:	bf28      	it	cs
 8000430:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000434:	d2ed      	bcs.n	8000412 <__addsf3+0x92>
 8000436:	fab0 fc80 	clz	ip, r0
 800043a:	f1ac 0c08 	sub.w	ip, ip, #8
 800043e:	ebb2 020c 	subs.w	r2, r2, ip
 8000442:	fa00 f00c 	lsl.w	r0, r0, ip
 8000446:	bfaa      	itet	ge
 8000448:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800044c:	4252      	neglt	r2, r2
 800044e:	4318      	orrge	r0, r3
 8000450:	bfbc      	itt	lt
 8000452:	40d0      	lsrlt	r0, r2
 8000454:	4318      	orrlt	r0, r3
 8000456:	4770      	bx	lr
 8000458:	f092 0f00 	teq	r2, #0
 800045c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000460:	bf06      	itte	eq
 8000462:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000466:	3201      	addeq	r2, #1
 8000468:	3b01      	subne	r3, #1
 800046a:	e7b5      	b.n	80003d8 <__addsf3+0x58>
 800046c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000470:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000474:	bf18      	it	ne
 8000476:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800047a:	d021      	beq.n	80004c0 <__addsf3+0x140>
 800047c:	ea92 0f03 	teq	r2, r3
 8000480:	d004      	beq.n	800048c <__addsf3+0x10c>
 8000482:	f092 0f00 	teq	r2, #0
 8000486:	bf08      	it	eq
 8000488:	4608      	moveq	r0, r1
 800048a:	4770      	bx	lr
 800048c:	ea90 0f01 	teq	r0, r1
 8000490:	bf1c      	itt	ne
 8000492:	2000      	movne	r0, #0
 8000494:	4770      	bxne	lr
 8000496:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800049a:	d104      	bne.n	80004a6 <__addsf3+0x126>
 800049c:	0040      	lsls	r0, r0, #1
 800049e:	bf28      	it	cs
 80004a0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80004a4:	4770      	bx	lr
 80004a6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80004aa:	bf3c      	itt	cc
 80004ac:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80004b0:	4770      	bxcc	lr
 80004b2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80004b6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80004ba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004be:	4770      	bx	lr
 80004c0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80004c4:	bf16      	itet	ne
 80004c6:	4608      	movne	r0, r1
 80004c8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80004cc:	4601      	movne	r1, r0
 80004ce:	0242      	lsls	r2, r0, #9
 80004d0:	bf06      	itte	eq
 80004d2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80004d6:	ea90 0f01 	teqeq	r0, r1
 80004da:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80004de:	4770      	bx	lr

080004e0 <__aeabi_ui2f>:
 80004e0:	f04f 0300 	mov.w	r3, #0
 80004e4:	e004      	b.n	80004f0 <__aeabi_i2f+0x8>
 80004e6:	bf00      	nop

080004e8 <__aeabi_i2f>:
 80004e8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	ea5f 0c00 	movs.w	ip, r0
 80004f4:	bf08      	it	eq
 80004f6:	4770      	bxeq	lr
 80004f8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80004fc:	4601      	mov	r1, r0
 80004fe:	f04f 0000 	mov.w	r0, #0
 8000502:	e01c      	b.n	800053e <__aeabi_l2f+0x2a>

08000504 <__aeabi_ul2f>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	f04f 0300 	mov.w	r3, #0
 8000510:	e00a      	b.n	8000528 <__aeabi_l2f+0x14>
 8000512:	bf00      	nop

08000514 <__aeabi_l2f>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000520:	d502      	bpl.n	8000528 <__aeabi_l2f+0x14>
 8000522:	4240      	negs	r0, r0
 8000524:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000528:	ea5f 0c01 	movs.w	ip, r1
 800052c:	bf02      	ittt	eq
 800052e:	4684      	moveq	ip, r0
 8000530:	4601      	moveq	r1, r0
 8000532:	2000      	moveq	r0, #0
 8000534:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000538:	bf08      	it	eq
 800053a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800053e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000542:	fabc f28c 	clz	r2, ip
 8000546:	3a08      	subs	r2, #8
 8000548:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800054c:	db10      	blt.n	8000570 <__aeabi_l2f+0x5c>
 800054e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000552:	4463      	add	r3, ip
 8000554:	fa00 fc02 	lsl.w	ip, r0, r2
 8000558:	f1c2 0220 	rsb	r2, r2, #32
 800055c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000560:	fa20 f202 	lsr.w	r2, r0, r2
 8000564:	eb43 0002 	adc.w	r0, r3, r2
 8000568:	bf08      	it	eq
 800056a:	f020 0001 	biceq.w	r0, r0, #1
 800056e:	4770      	bx	lr
 8000570:	f102 0220 	add.w	r2, r2, #32
 8000574:	fa01 fc02 	lsl.w	ip, r1, r2
 8000578:	f1c2 0220 	rsb	r2, r2, #32
 800057c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000580:	fa21 f202 	lsr.w	r2, r1, r2
 8000584:	eb43 0002 	adc.w	r0, r3, r2
 8000588:	bf08      	it	eq
 800058a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800058e:	4770      	bx	lr

08000590 <__aeabi_fmul>:
 8000590:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000594:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000598:	bf1e      	ittt	ne
 800059a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800059e:	ea92 0f0c 	teqne	r2, ip
 80005a2:	ea93 0f0c 	teqne	r3, ip
 80005a6:	d06f      	beq.n	8000688 <__aeabi_fmul+0xf8>
 80005a8:	441a      	add	r2, r3
 80005aa:	ea80 0c01 	eor.w	ip, r0, r1
 80005ae:	0240      	lsls	r0, r0, #9
 80005b0:	bf18      	it	ne
 80005b2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80005b6:	d01e      	beq.n	80005f6 <__aeabi_fmul+0x66>
 80005b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80005bc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80005c0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80005c4:	fba0 3101 	umull	r3, r1, r0, r1
 80005c8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80005cc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80005d0:	bf3e      	ittt	cc
 80005d2:	0049      	lslcc	r1, r1, #1
 80005d4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80005d8:	005b      	lslcc	r3, r3, #1
 80005da:	ea40 0001 	orr.w	r0, r0, r1
 80005de:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80005e2:	2afd      	cmp	r2, #253	; 0xfd
 80005e4:	d81d      	bhi.n	8000622 <__aeabi_fmul+0x92>
 80005e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80005ea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80005ee:	bf08      	it	eq
 80005f0:	f020 0001 	biceq.w	r0, r0, #1
 80005f4:	4770      	bx	lr
 80005f6:	f090 0f00 	teq	r0, #0
 80005fa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80005fe:	bf08      	it	eq
 8000600:	0249      	lsleq	r1, r1, #9
 8000602:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000606:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800060a:	3a7f      	subs	r2, #127	; 0x7f
 800060c:	bfc2      	ittt	gt
 800060e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000612:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000616:	4770      	bxgt	lr
 8000618:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800061c:	f04f 0300 	mov.w	r3, #0
 8000620:	3a01      	subs	r2, #1
 8000622:	dc5d      	bgt.n	80006e0 <__aeabi_fmul+0x150>
 8000624:	f112 0f19 	cmn.w	r2, #25
 8000628:	bfdc      	itt	le
 800062a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800062e:	4770      	bxle	lr
 8000630:	f1c2 0200 	rsb	r2, r2, #0
 8000634:	0041      	lsls	r1, r0, #1
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	f1c2 0220 	rsb	r2, r2, #32
 800063e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000642:	ea5f 0031 	movs.w	r0, r1, rrx
 8000646:	f140 0000 	adc.w	r0, r0, #0
 800064a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800064e:	bf08      	it	eq
 8000650:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000654:	4770      	bx	lr
 8000656:	f092 0f00 	teq	r2, #0
 800065a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800065e:	bf02      	ittt	eq
 8000660:	0040      	lsleq	r0, r0, #1
 8000662:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000666:	3a01      	subeq	r2, #1
 8000668:	d0f9      	beq.n	800065e <__aeabi_fmul+0xce>
 800066a:	ea40 000c 	orr.w	r0, r0, ip
 800066e:	f093 0f00 	teq	r3, #0
 8000672:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000676:	bf02      	ittt	eq
 8000678:	0049      	lsleq	r1, r1, #1
 800067a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800067e:	3b01      	subeq	r3, #1
 8000680:	d0f9      	beq.n	8000676 <__aeabi_fmul+0xe6>
 8000682:	ea41 010c 	orr.w	r1, r1, ip
 8000686:	e78f      	b.n	80005a8 <__aeabi_fmul+0x18>
 8000688:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800068c:	ea92 0f0c 	teq	r2, ip
 8000690:	bf18      	it	ne
 8000692:	ea93 0f0c 	teqne	r3, ip
 8000696:	d00a      	beq.n	80006ae <__aeabi_fmul+0x11e>
 8000698:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800069c:	bf18      	it	ne
 800069e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80006a2:	d1d8      	bne.n	8000656 <__aeabi_fmul+0xc6>
 80006a4:	ea80 0001 	eor.w	r0, r0, r1
 80006a8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80006ac:	4770      	bx	lr
 80006ae:	f090 0f00 	teq	r0, #0
 80006b2:	bf17      	itett	ne
 80006b4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80006b8:	4608      	moveq	r0, r1
 80006ba:	f091 0f00 	teqne	r1, #0
 80006be:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80006c2:	d014      	beq.n	80006ee <__aeabi_fmul+0x15e>
 80006c4:	ea92 0f0c 	teq	r2, ip
 80006c8:	d101      	bne.n	80006ce <__aeabi_fmul+0x13e>
 80006ca:	0242      	lsls	r2, r0, #9
 80006cc:	d10f      	bne.n	80006ee <__aeabi_fmul+0x15e>
 80006ce:	ea93 0f0c 	teq	r3, ip
 80006d2:	d103      	bne.n	80006dc <__aeabi_fmul+0x14c>
 80006d4:	024b      	lsls	r3, r1, #9
 80006d6:	bf18      	it	ne
 80006d8:	4608      	movne	r0, r1
 80006da:	d108      	bne.n	80006ee <__aeabi_fmul+0x15e>
 80006dc:	ea80 0001 	eor.w	r0, r0, r1
 80006e0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80006e4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80006e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006ec:	4770      	bx	lr
 80006ee:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80006f2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80006f6:	4770      	bx	lr

080006f8 <__aeabi_fdiv>:
 80006f8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006fc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000700:	bf1e      	ittt	ne
 8000702:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000706:	ea92 0f0c 	teqne	r2, ip
 800070a:	ea93 0f0c 	teqne	r3, ip
 800070e:	d069      	beq.n	80007e4 <__aeabi_fdiv+0xec>
 8000710:	eba2 0203 	sub.w	r2, r2, r3
 8000714:	ea80 0c01 	eor.w	ip, r0, r1
 8000718:	0249      	lsls	r1, r1, #9
 800071a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800071e:	d037      	beq.n	8000790 <__aeabi_fdiv+0x98>
 8000720:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000724:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000728:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800072c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000730:	428b      	cmp	r3, r1
 8000732:	bf38      	it	cc
 8000734:	005b      	lslcc	r3, r3, #1
 8000736:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800073a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800073e:	428b      	cmp	r3, r1
 8000740:	bf24      	itt	cs
 8000742:	1a5b      	subcs	r3, r3, r1
 8000744:	ea40 000c 	orrcs.w	r0, r0, ip
 8000748:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800074c:	bf24      	itt	cs
 800074e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000752:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000756:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800075a:	bf24      	itt	cs
 800075c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000760:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000764:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000768:	bf24      	itt	cs
 800076a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800076e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000772:	011b      	lsls	r3, r3, #4
 8000774:	bf18      	it	ne
 8000776:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800077a:	d1e0      	bne.n	800073e <__aeabi_fdiv+0x46>
 800077c:	2afd      	cmp	r2, #253	; 0xfd
 800077e:	f63f af50 	bhi.w	8000622 <__aeabi_fmul+0x92>
 8000782:	428b      	cmp	r3, r1
 8000784:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000788:	bf08      	it	eq
 800078a:	f020 0001 	biceq.w	r0, r0, #1
 800078e:	4770      	bx	lr
 8000790:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000794:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000798:	327f      	adds	r2, #127	; 0x7f
 800079a:	bfc2      	ittt	gt
 800079c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80007a0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80007a4:	4770      	bxgt	lr
 80007a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007aa:	f04f 0300 	mov.w	r3, #0
 80007ae:	3a01      	subs	r2, #1
 80007b0:	e737      	b.n	8000622 <__aeabi_fmul+0x92>
 80007b2:	f092 0f00 	teq	r2, #0
 80007b6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80007ba:	bf02      	ittt	eq
 80007bc:	0040      	lsleq	r0, r0, #1
 80007be:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80007c2:	3a01      	subeq	r2, #1
 80007c4:	d0f9      	beq.n	80007ba <__aeabi_fdiv+0xc2>
 80007c6:	ea40 000c 	orr.w	r0, r0, ip
 80007ca:	f093 0f00 	teq	r3, #0
 80007ce:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007d2:	bf02      	ittt	eq
 80007d4:	0049      	lsleq	r1, r1, #1
 80007d6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80007da:	3b01      	subeq	r3, #1
 80007dc:	d0f9      	beq.n	80007d2 <__aeabi_fdiv+0xda>
 80007de:	ea41 010c 	orr.w	r1, r1, ip
 80007e2:	e795      	b.n	8000710 <__aeabi_fdiv+0x18>
 80007e4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80007e8:	ea92 0f0c 	teq	r2, ip
 80007ec:	d108      	bne.n	8000800 <__aeabi_fdiv+0x108>
 80007ee:	0242      	lsls	r2, r0, #9
 80007f0:	f47f af7d 	bne.w	80006ee <__aeabi_fmul+0x15e>
 80007f4:	ea93 0f0c 	teq	r3, ip
 80007f8:	f47f af70 	bne.w	80006dc <__aeabi_fmul+0x14c>
 80007fc:	4608      	mov	r0, r1
 80007fe:	e776      	b.n	80006ee <__aeabi_fmul+0x15e>
 8000800:	ea93 0f0c 	teq	r3, ip
 8000804:	d104      	bne.n	8000810 <__aeabi_fdiv+0x118>
 8000806:	024b      	lsls	r3, r1, #9
 8000808:	f43f af4c 	beq.w	80006a4 <__aeabi_fmul+0x114>
 800080c:	4608      	mov	r0, r1
 800080e:	e76e      	b.n	80006ee <__aeabi_fmul+0x15e>
 8000810:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000814:	bf18      	it	ne
 8000816:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800081a:	d1ca      	bne.n	80007b2 <__aeabi_fdiv+0xba>
 800081c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000820:	f47f af5c 	bne.w	80006dc <__aeabi_fmul+0x14c>
 8000824:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000828:	f47f af3c 	bne.w	80006a4 <__aeabi_fmul+0x114>
 800082c:	e75f      	b.n	80006ee <__aeabi_fmul+0x15e>
 800082e:	bf00      	nop

08000830 <__aeabi_uldivmod>:
 8000830:	b953      	cbnz	r3, 8000848 <__aeabi_uldivmod+0x18>
 8000832:	b94a      	cbnz	r2, 8000848 <__aeabi_uldivmod+0x18>
 8000834:	2900      	cmp	r1, #0
 8000836:	bf08      	it	eq
 8000838:	2800      	cmpeq	r0, #0
 800083a:	bf1c      	itt	ne
 800083c:	f04f 31ff 	movne.w	r1, #4294967295
 8000840:	f04f 30ff 	movne.w	r0, #4294967295
 8000844:	f000 b976 	b.w	8000b34 <__aeabi_idiv0>
 8000848:	f1ad 0c08 	sub.w	ip, sp, #8
 800084c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000850:	f000 f806 	bl	8000860 <__udivmoddi4>
 8000854:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000858:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800085c:	b004      	add	sp, #16
 800085e:	4770      	bx	lr

08000860 <__udivmoddi4>:
 8000860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000864:	9e08      	ldr	r6, [sp, #32]
 8000866:	460d      	mov	r5, r1
 8000868:	4604      	mov	r4, r0
 800086a:	4688      	mov	r8, r1
 800086c:	2b00      	cmp	r3, #0
 800086e:	d14d      	bne.n	800090c <__udivmoddi4+0xac>
 8000870:	428a      	cmp	r2, r1
 8000872:	4694      	mov	ip, r2
 8000874:	d968      	bls.n	8000948 <__udivmoddi4+0xe8>
 8000876:	fab2 f282 	clz	r2, r2
 800087a:	b152      	cbz	r2, 8000892 <__udivmoddi4+0x32>
 800087c:	fa01 f302 	lsl.w	r3, r1, r2
 8000880:	f1c2 0120 	rsb	r1, r2, #32
 8000884:	fa20 f101 	lsr.w	r1, r0, r1
 8000888:	fa0c fc02 	lsl.w	ip, ip, r2
 800088c:	ea41 0803 	orr.w	r8, r1, r3
 8000890:	4094      	lsls	r4, r2
 8000892:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000896:	fbb8 f7f1 	udiv	r7, r8, r1
 800089a:	fa1f fe8c 	uxth.w	lr, ip
 800089e:	fb01 8817 	mls	r8, r1, r7, r8
 80008a2:	fb07 f00e 	mul.w	r0, r7, lr
 80008a6:	0c23      	lsrs	r3, r4, #16
 80008a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80008ac:	4298      	cmp	r0, r3
 80008ae:	d90a      	bls.n	80008c6 <__udivmoddi4+0x66>
 80008b0:	eb1c 0303 	adds.w	r3, ip, r3
 80008b4:	f107 35ff 	add.w	r5, r7, #4294967295
 80008b8:	f080 811e 	bcs.w	8000af8 <__udivmoddi4+0x298>
 80008bc:	4298      	cmp	r0, r3
 80008be:	f240 811b 	bls.w	8000af8 <__udivmoddi4+0x298>
 80008c2:	3f02      	subs	r7, #2
 80008c4:	4463      	add	r3, ip
 80008c6:	1a1b      	subs	r3, r3, r0
 80008c8:	fbb3 f0f1 	udiv	r0, r3, r1
 80008cc:	fb01 3310 	mls	r3, r1, r0, r3
 80008d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80008d4:	b2a4      	uxth	r4, r4
 80008d6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008da:	45a6      	cmp	lr, r4
 80008dc:	d90a      	bls.n	80008f4 <__udivmoddi4+0x94>
 80008de:	eb1c 0404 	adds.w	r4, ip, r4
 80008e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80008e6:	f080 8109 	bcs.w	8000afc <__udivmoddi4+0x29c>
 80008ea:	45a6      	cmp	lr, r4
 80008ec:	f240 8106 	bls.w	8000afc <__udivmoddi4+0x29c>
 80008f0:	4464      	add	r4, ip
 80008f2:	3802      	subs	r0, #2
 80008f4:	2100      	movs	r1, #0
 80008f6:	eba4 040e 	sub.w	r4, r4, lr
 80008fa:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80008fe:	b11e      	cbz	r6, 8000908 <__udivmoddi4+0xa8>
 8000900:	2300      	movs	r3, #0
 8000902:	40d4      	lsrs	r4, r2
 8000904:	e9c6 4300 	strd	r4, r3, [r6]
 8000908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800090c:	428b      	cmp	r3, r1
 800090e:	d908      	bls.n	8000922 <__udivmoddi4+0xc2>
 8000910:	2e00      	cmp	r6, #0
 8000912:	f000 80ee 	beq.w	8000af2 <__udivmoddi4+0x292>
 8000916:	2100      	movs	r1, #0
 8000918:	e9c6 0500 	strd	r0, r5, [r6]
 800091c:	4608      	mov	r0, r1
 800091e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000922:	fab3 f183 	clz	r1, r3
 8000926:	2900      	cmp	r1, #0
 8000928:	d14a      	bne.n	80009c0 <__udivmoddi4+0x160>
 800092a:	42ab      	cmp	r3, r5
 800092c:	d302      	bcc.n	8000934 <__udivmoddi4+0xd4>
 800092e:	4282      	cmp	r2, r0
 8000930:	f200 80fc 	bhi.w	8000b2c <__udivmoddi4+0x2cc>
 8000934:	1a84      	subs	r4, r0, r2
 8000936:	eb65 0303 	sbc.w	r3, r5, r3
 800093a:	2001      	movs	r0, #1
 800093c:	4698      	mov	r8, r3
 800093e:	2e00      	cmp	r6, #0
 8000940:	d0e2      	beq.n	8000908 <__udivmoddi4+0xa8>
 8000942:	e9c6 4800 	strd	r4, r8, [r6]
 8000946:	e7df      	b.n	8000908 <__udivmoddi4+0xa8>
 8000948:	b902      	cbnz	r2, 800094c <__udivmoddi4+0xec>
 800094a:	deff      	udf	#255	; 0xff
 800094c:	fab2 f282 	clz	r2, r2
 8000950:	2a00      	cmp	r2, #0
 8000952:	f040 8091 	bne.w	8000a78 <__udivmoddi4+0x218>
 8000956:	eba1 000c 	sub.w	r0, r1, ip
 800095a:	2101      	movs	r1, #1
 800095c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000960:	fa1f fe8c 	uxth.w	lr, ip
 8000964:	fbb0 f3f7 	udiv	r3, r0, r7
 8000968:	fb07 0013 	mls	r0, r7, r3, r0
 800096c:	0c25      	lsrs	r5, r4, #16
 800096e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000972:	fb0e f003 	mul.w	r0, lr, r3
 8000976:	42a8      	cmp	r0, r5
 8000978:	d908      	bls.n	800098c <__udivmoddi4+0x12c>
 800097a:	eb1c 0505 	adds.w	r5, ip, r5
 800097e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000982:	d202      	bcs.n	800098a <__udivmoddi4+0x12a>
 8000984:	42a8      	cmp	r0, r5
 8000986:	f200 80ce 	bhi.w	8000b26 <__udivmoddi4+0x2c6>
 800098a:	4643      	mov	r3, r8
 800098c:	1a2d      	subs	r5, r5, r0
 800098e:	fbb5 f0f7 	udiv	r0, r5, r7
 8000992:	fb07 5510 	mls	r5, r7, r0, r5
 8000996:	fb0e fe00 	mul.w	lr, lr, r0
 800099a:	b2a4      	uxth	r4, r4
 800099c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80009a0:	45a6      	cmp	lr, r4
 80009a2:	d908      	bls.n	80009b6 <__udivmoddi4+0x156>
 80009a4:	eb1c 0404 	adds.w	r4, ip, r4
 80009a8:	f100 35ff 	add.w	r5, r0, #4294967295
 80009ac:	d202      	bcs.n	80009b4 <__udivmoddi4+0x154>
 80009ae:	45a6      	cmp	lr, r4
 80009b0:	f200 80b6 	bhi.w	8000b20 <__udivmoddi4+0x2c0>
 80009b4:	4628      	mov	r0, r5
 80009b6:	eba4 040e 	sub.w	r4, r4, lr
 80009ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80009be:	e79e      	b.n	80008fe <__udivmoddi4+0x9e>
 80009c0:	f1c1 0720 	rsb	r7, r1, #32
 80009c4:	408b      	lsls	r3, r1
 80009c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80009ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80009ce:	fa25 fa07 	lsr.w	sl, r5, r7
 80009d2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009d6:	fbba f8f9 	udiv	r8, sl, r9
 80009da:	fa20 f307 	lsr.w	r3, r0, r7
 80009de:	fb09 aa18 	mls	sl, r9, r8, sl
 80009e2:	408d      	lsls	r5, r1
 80009e4:	fa1f fe8c 	uxth.w	lr, ip
 80009e8:	431d      	orrs	r5, r3
 80009ea:	fa00 f301 	lsl.w	r3, r0, r1
 80009ee:	fb08 f00e 	mul.w	r0, r8, lr
 80009f2:	0c2c      	lsrs	r4, r5, #16
 80009f4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80009f8:	42a0      	cmp	r0, r4
 80009fa:	fa02 f201 	lsl.w	r2, r2, r1
 80009fe:	d90b      	bls.n	8000a18 <__udivmoddi4+0x1b8>
 8000a00:	eb1c 0404 	adds.w	r4, ip, r4
 8000a04:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a08:	f080 8088 	bcs.w	8000b1c <__udivmoddi4+0x2bc>
 8000a0c:	42a0      	cmp	r0, r4
 8000a0e:	f240 8085 	bls.w	8000b1c <__udivmoddi4+0x2bc>
 8000a12:	f1a8 0802 	sub.w	r8, r8, #2
 8000a16:	4464      	add	r4, ip
 8000a18:	1a24      	subs	r4, r4, r0
 8000a1a:	fbb4 f0f9 	udiv	r0, r4, r9
 8000a1e:	fb09 4410 	mls	r4, r9, r0, r4
 8000a22:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a26:	b2ad      	uxth	r5, r5
 8000a28:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a2c:	45a6      	cmp	lr, r4
 8000a2e:	d908      	bls.n	8000a42 <__udivmoddi4+0x1e2>
 8000a30:	eb1c 0404 	adds.w	r4, ip, r4
 8000a34:	f100 35ff 	add.w	r5, r0, #4294967295
 8000a38:	d26c      	bcs.n	8000b14 <__udivmoddi4+0x2b4>
 8000a3a:	45a6      	cmp	lr, r4
 8000a3c:	d96a      	bls.n	8000b14 <__udivmoddi4+0x2b4>
 8000a3e:	3802      	subs	r0, #2
 8000a40:	4464      	add	r4, ip
 8000a42:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a46:	fba0 9502 	umull	r9, r5, r0, r2
 8000a4a:	eba4 040e 	sub.w	r4, r4, lr
 8000a4e:	42ac      	cmp	r4, r5
 8000a50:	46c8      	mov	r8, r9
 8000a52:	46ae      	mov	lr, r5
 8000a54:	d356      	bcc.n	8000b04 <__udivmoddi4+0x2a4>
 8000a56:	d053      	beq.n	8000b00 <__udivmoddi4+0x2a0>
 8000a58:	2e00      	cmp	r6, #0
 8000a5a:	d069      	beq.n	8000b30 <__udivmoddi4+0x2d0>
 8000a5c:	ebb3 0208 	subs.w	r2, r3, r8
 8000a60:	eb64 040e 	sbc.w	r4, r4, lr
 8000a64:	fa22 f301 	lsr.w	r3, r2, r1
 8000a68:	fa04 f707 	lsl.w	r7, r4, r7
 8000a6c:	431f      	orrs	r7, r3
 8000a6e:	40cc      	lsrs	r4, r1
 8000a70:	e9c6 7400 	strd	r7, r4, [r6]
 8000a74:	2100      	movs	r1, #0
 8000a76:	e747      	b.n	8000908 <__udivmoddi4+0xa8>
 8000a78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a7c:	f1c2 0120 	rsb	r1, r2, #32
 8000a80:	fa25 f301 	lsr.w	r3, r5, r1
 8000a84:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a88:	fa20 f101 	lsr.w	r1, r0, r1
 8000a8c:	4095      	lsls	r5, r2
 8000a8e:	430d      	orrs	r5, r1
 8000a90:	fbb3 f1f7 	udiv	r1, r3, r7
 8000a94:	fb07 3311 	mls	r3, r7, r1, r3
 8000a98:	fa1f fe8c 	uxth.w	lr, ip
 8000a9c:	0c28      	lsrs	r0, r5, #16
 8000a9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000aa2:	fb01 f30e 	mul.w	r3, r1, lr
 8000aa6:	4283      	cmp	r3, r0
 8000aa8:	fa04 f402 	lsl.w	r4, r4, r2
 8000aac:	d908      	bls.n	8000ac0 <__udivmoddi4+0x260>
 8000aae:	eb1c 0000 	adds.w	r0, ip, r0
 8000ab2:	f101 38ff 	add.w	r8, r1, #4294967295
 8000ab6:	d22f      	bcs.n	8000b18 <__udivmoddi4+0x2b8>
 8000ab8:	4283      	cmp	r3, r0
 8000aba:	d92d      	bls.n	8000b18 <__udivmoddi4+0x2b8>
 8000abc:	3902      	subs	r1, #2
 8000abe:	4460      	add	r0, ip
 8000ac0:	1ac0      	subs	r0, r0, r3
 8000ac2:	fbb0 f3f7 	udiv	r3, r0, r7
 8000ac6:	fb07 0013 	mls	r0, r7, r3, r0
 8000aca:	b2ad      	uxth	r5, r5
 8000acc:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000ad0:	fb03 f00e 	mul.w	r0, r3, lr
 8000ad4:	42a8      	cmp	r0, r5
 8000ad6:	d908      	bls.n	8000aea <__udivmoddi4+0x28a>
 8000ad8:	eb1c 0505 	adds.w	r5, ip, r5
 8000adc:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ae0:	d216      	bcs.n	8000b10 <__udivmoddi4+0x2b0>
 8000ae2:	42a8      	cmp	r0, r5
 8000ae4:	d914      	bls.n	8000b10 <__udivmoddi4+0x2b0>
 8000ae6:	3b02      	subs	r3, #2
 8000ae8:	4465      	add	r5, ip
 8000aea:	1a28      	subs	r0, r5, r0
 8000aec:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000af0:	e738      	b.n	8000964 <__udivmoddi4+0x104>
 8000af2:	4631      	mov	r1, r6
 8000af4:	4630      	mov	r0, r6
 8000af6:	e707      	b.n	8000908 <__udivmoddi4+0xa8>
 8000af8:	462f      	mov	r7, r5
 8000afa:	e6e4      	b.n	80008c6 <__udivmoddi4+0x66>
 8000afc:	4618      	mov	r0, r3
 8000afe:	e6f9      	b.n	80008f4 <__udivmoddi4+0x94>
 8000b00:	454b      	cmp	r3, r9
 8000b02:	d2a9      	bcs.n	8000a58 <__udivmoddi4+0x1f8>
 8000b04:	ebb9 0802 	subs.w	r8, r9, r2
 8000b08:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b0c:	3801      	subs	r0, #1
 8000b0e:	e7a3      	b.n	8000a58 <__udivmoddi4+0x1f8>
 8000b10:	4643      	mov	r3, r8
 8000b12:	e7ea      	b.n	8000aea <__udivmoddi4+0x28a>
 8000b14:	4628      	mov	r0, r5
 8000b16:	e794      	b.n	8000a42 <__udivmoddi4+0x1e2>
 8000b18:	4641      	mov	r1, r8
 8000b1a:	e7d1      	b.n	8000ac0 <__udivmoddi4+0x260>
 8000b1c:	46d0      	mov	r8, sl
 8000b1e:	e77b      	b.n	8000a18 <__udivmoddi4+0x1b8>
 8000b20:	4464      	add	r4, ip
 8000b22:	3802      	subs	r0, #2
 8000b24:	e747      	b.n	80009b6 <__udivmoddi4+0x156>
 8000b26:	3b02      	subs	r3, #2
 8000b28:	4465      	add	r5, ip
 8000b2a:	e72f      	b.n	800098c <__udivmoddi4+0x12c>
 8000b2c:	4608      	mov	r0, r1
 8000b2e:	e706      	b.n	800093e <__udivmoddi4+0xde>
 8000b30:	4631      	mov	r1, r6
 8000b32:	e6e9      	b.n	8000908 <__udivmoddi4+0xa8>

08000b34 <__aeabi_idiv0>:
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop

08000b38 <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
    decaIrqStatus_t s = port_GetEXT_IRQStatus();
 8000b3e:	f000 fba1 	bl	8001284 <port_GetEXT_IRQStatus>
 8000b42:	4603      	mov	r3, r0
 8000b44:	607b      	str	r3, [r7, #4]

    if (s)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <decamutexon+0x18>
    {
        port_DisableEXT_IRQ(); // disable the external interrupt line
 8000b4c:	f000 fb76 	bl	800123c <port_DisableEXT_IRQ>
    }
    return s; // return state before disable, value is used to re-enable in decamutexoff call
 8000b50:	687b      	ldr	r3, [r7, #4]
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s) // put a function here that re-enables the interrupt at the end of the critical section
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b082      	sub	sp, #8
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
    if (s)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <decamutexoff+0x12>
    { // need to check the port state as we can't use level sensitive interrupt on the STM ARM
        port_EnableEXT_IRQ();
 8000b68:	f000 fb7a 	bl	8001260 <port_EnableEXT_IRQ>
    }
}
 8000b6c:	bf00      	nop
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <deca_sleep>:
#include <deca_device_api.h>
#include <port.h>

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
void deca_sleep(unsigned int time_ms)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
    Sleep(time_ms);
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f000 f9b4 	bl	8000eea <Sleep>
}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <deca_usleep>:

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
void deca_usleep(unsigned long time_us)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b082      	sub	sp, #8
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
    Sleep(time_us);
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f000 f9a9 	bl	8000eea <Sleep>
}
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <openspi>:
 *
 * Low level abstract function to open and initialise access to the SPI device.
 * returns 0 for success, or -1 for error
 */
int openspi(/*SPI_TypeDef* SPIx*/)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
    return 0;
 8000ba4:	2300      	movs	r3, #0
} // end openspi()
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bc80      	pop	{r7}
 8000bac:	4770      	bx	lr

08000bae <closespi>:
 *
 * Low level abstract function to close the the SPI device.
 * returns 0 for success, or -1 for error
 */
int closespi(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0
    return 0;
 8000bb2:	2300      	movs	r3, #0
} // end closespi()
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr

08000bbc <writetospiwithcrc>:
 * Low level abstract function to write to the SPI when SPI CRC mode is used
 * Takes two separate byte buffers for write header and write data, and a CRC8 byte which is written last
 * returns 0 for success, or -1 for error
 */
int writetospiwithcrc(uint16_t headerLength, const uint8_t *headerBuffer, uint16_t bodyLength, const uint8_t *bodyBuffer, uint8_t crc8)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b086      	sub	sp, #24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60b9      	str	r1, [r7, #8]
 8000bc4:	607b      	str	r3, [r7, #4]
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	81fb      	strh	r3, [r7, #14]
 8000bca:	4613      	mov	r3, r2
 8000bcc:	81bb      	strh	r3, [r7, #12]
#ifdef DWT_ENABLE_CRC
    decaIrqStatus_t stat;
    stat = decamutexon();
 8000bce:	f7ff ffb3 	bl	8000b38 <decamutexon>
 8000bd2:	6178      	str	r0, [r7, #20]
    while (HAL_SPI_GetState(hcurrent_active_spi) != HAL_SPI_STATE_READY);
 8000bd4:	bf00      	nop
 8000bd6:	4b1d      	ldr	r3, [pc, #116]	; (8000c4c <writetospiwithcrc+0x90>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f00d fe4e 	bl	800e87c <HAL_SPI_GetState>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d1f7      	bne.n	8000bd6 <writetospiwithcrc+0x1a>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, pin_io_active_spi, SPI_CS_state); /**< Put chip select line low */
 8000be6:	4b1a      	ldr	r3, [pc, #104]	; (8000c50 <writetospiwithcrc+0x94>)
 8000be8:	881b      	ldrh	r3, [r3, #0]
 8000bea:	4a1a      	ldr	r2, [pc, #104]	; (8000c54 <writetospiwithcrc+0x98>)
 8000bec:	7812      	ldrb	r2, [r2, #0]
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4819      	ldr	r0, [pc, #100]	; (8000c58 <writetospiwithcrc+0x9c>)
 8000bf2:	f004 fb64 	bl	80052be <HAL_GPIO_WritePin>


    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)headerBuffer, headerLength, 10);    /* Send header in polling mode */
 8000bf6:	4b15      	ldr	r3, [pc, #84]	; (8000c4c <writetospiwithcrc+0x90>)
 8000bf8:	6818      	ldr	r0, [r3, #0]
 8000bfa:	89fa      	ldrh	r2, [r7, #14]
 8000bfc:	230a      	movs	r3, #10
 8000bfe:	68b9      	ldr	r1, [r7, #8]
 8000c00:	f00c fa55 	bl	800d0ae <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)bodyBuffer, bodyLength, 10);        /* Send data in polling mode */
 8000c04:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <writetospiwithcrc+0x90>)
 8000c06:	6818      	ldr	r0, [r3, #0]
 8000c08:	89ba      	ldrh	r2, [r7, #12]
 8000c0a:	230a      	movs	r3, #10
 8000c0c:	6879      	ldr	r1, [r7, #4]
 8000c0e:	f00c fa4e 	bl	800d0ae <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)&crc8, 1, 10);      /* Send data in polling mode */
 8000c12:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <writetospiwithcrc+0x90>)
 8000c14:	6818      	ldr	r0, [r3, #0]
 8000c16:	230a      	movs	r3, #10
 8000c18:	2201      	movs	r2, #1
 8000c1a:	f107 0120 	add.w	r1, r7, #32
 8000c1e:	f00c fa46 	bl	800d0ae <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, pin_io_active_spi,(GPIO_PinState)(!((uint8_t)SPI_CS_state))); /**< Put chip select line high */
 8000c22:	4b0b      	ldr	r3, [pc, #44]	; (8000c50 <writetospiwithcrc+0x94>)
 8000c24:	8819      	ldrh	r1, [r3, #0]
 8000c26:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <writetospiwithcrc+0x98>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	bf0c      	ite	eq
 8000c2e:	2301      	moveq	r3, #1
 8000c30:	2300      	movne	r3, #0
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	461a      	mov	r2, r3
 8000c36:	4808      	ldr	r0, [pc, #32]	; (8000c58 <writetospiwithcrc+0x9c>)
 8000c38:	f004 fb41 	bl	80052be <HAL_GPIO_WritePin>

    decamutexoff(stat);
 8000c3c:	6978      	ldr	r0, [r7, #20]
 8000c3e:	f7ff ff8c 	bl	8000b5a <decamutexoff>
#endif //DWT_ENABLE_CRC
    return 0;
 8000c42:	2300      	movs	r3, #0
} // end writetospiwithcrc()
 8000c44:	4618      	mov	r0, r3
 8000c46:	3718      	adds	r7, #24
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000044 	.word	0x20000044
 8000c50:	20000048 	.word	0x20000048
 8000c54:	20000698 	.word	0x20000698
 8000c58:	40020800 	.word	0x40020800

08000c5c <writetospi>:
 * Low level abstract function to write to the SPI
 * Takes two separate byte buffers for write header and write data
 * returns 0 for success, or -1 for error
 */
int writetospi(uint16_t headerLength, const uint8_t *headerBuffer, uint16_t bodyLength, const uint8_t *bodyBuffer)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60b9      	str	r1, [r7, #8]
 8000c64:	607b      	str	r3, [r7, #4]
 8000c66:	4603      	mov	r3, r0
 8000c68:	81fb      	strh	r3, [r7, #14]
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	81bb      	strh	r3, [r7, #12]
    decaIrqStatus_t stat;
    stat = decamutexon();
 8000c6e:	f7ff ff63 	bl	8000b38 <decamutexon>
 8000c72:	6178      	str	r0, [r7, #20]

    while (HAL_SPI_GetState(hcurrent_active_spi) != HAL_SPI_STATE_READY);
 8000c74:	bf00      	nop
 8000c76:	4b1c      	ldr	r3, [pc, #112]	; (8000ce8 <writetospi+0x8c>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f00d fdfe 	bl	800e87c <HAL_SPI_GetState>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d1f7      	bne.n	8000c76 <writetospi+0x1a>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, pin_io_active_spi, SPI_CS_state); /**< Put chip select line low */
 8000c86:	4b19      	ldr	r3, [pc, #100]	; (8000cec <writetospi+0x90>)
 8000c88:	881b      	ldrh	r3, [r3, #0]
 8000c8a:	4a19      	ldr	r2, [pc, #100]	; (8000cf0 <writetospi+0x94>)
 8000c8c:	7812      	ldrb	r2, [r2, #0]
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4818      	ldr	r0, [pc, #96]	; (8000cf4 <writetospi+0x98>)
 8000c92:	f004 fb14 	bl	80052be <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)headerBuffer, headerLength, HAL_MAX_DELAY); /* Send header in polling mode */
 8000c96:	4b14      	ldr	r3, [pc, #80]	; (8000ce8 <writetospi+0x8c>)
 8000c98:	6818      	ldr	r0, [r3, #0]
 8000c9a:	89fa      	ldrh	r2, [r7, #14]
 8000c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca0:	68b9      	ldr	r1, [r7, #8]
 8000ca2:	f00c fa04 	bl	800d0ae <HAL_SPI_Transmit>

    if(bodyLength != 0)
 8000ca6:	89bb      	ldrh	r3, [r7, #12]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d007      	beq.n	8000cbc <writetospi+0x60>
    {
        HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)bodyBuffer,   bodyLength, HAL_MAX_DELAY);     /* Send data in polling mode */
 8000cac:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <writetospi+0x8c>)
 8000cae:	6818      	ldr	r0, [r3, #0]
 8000cb0:	89ba      	ldrh	r2, [r7, #12]
 8000cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb6:	6879      	ldr	r1, [r7, #4]
 8000cb8:	f00c f9f9 	bl	800d0ae <HAL_SPI_Transmit>
    }

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, pin_io_active_spi, (GPIO_PinState)(!((uint8_t)SPI_CS_state))); /**< Put chip select line high */
 8000cbc:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <writetospi+0x90>)
 8000cbe:	8819      	ldrh	r1, [r3, #0]
 8000cc0:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <writetospi+0x94>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	bf0c      	ite	eq
 8000cc8:	2301      	moveq	r3, #1
 8000cca:	2300      	movne	r3, #0
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	461a      	mov	r2, r3
 8000cd0:	4808      	ldr	r0, [pc, #32]	; (8000cf4 <writetospi+0x98>)
 8000cd2:	f004 faf4 	bl	80052be <HAL_GPIO_WritePin>

    decamutexoff(stat);
 8000cd6:	6978      	ldr	r0, [r7, #20]
 8000cd8:	f7ff ff3f 	bl	8000b5a <decamutexoff>

    return 0;
 8000cdc:	2300      	movs	r3, #0
} // end writetospi()
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3718      	adds	r7, #24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000044 	.word	0x20000044
 8000cec:	20000048 	.word	0x20000048
 8000cf0:	20000698 	.word	0x20000698
 8000cf4:	40020800 	.word	0x40020800

08000cf8 <spi_cs_low_delay>:
 * @param ms_delay - The delay for CS to be in '0' state
 *
 * no return value
 */
uint16_t spi_cs_low_delay(uint16_t delay_ms)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	80fb      	strh	r3, [r7, #6]
    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(hcurrent_active_spi) != HAL_SPI_STATE_READY);
 8000d02:	bf00      	nop
 8000d04:	4b1a      	ldr	r3, [pc, #104]	; (8000d70 <spi_cs_low_delay+0x78>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f00d fdb7 	bl	800e87c <HAL_SPI_GetState>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d1f7      	bne.n	8000d04 <spi_cs_low_delay+0xc>
    /* Process Locked */
    __HAL_LOCK(hcurrent_active_spi);
 8000d14:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <spi_cs_low_delay+0x78>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d101      	bne.n	8000d24 <spi_cs_low_delay+0x2c>
 8000d20:	2302      	movs	r3, #2
 8000d22:	e021      	b.n	8000d68 <spi_cs_low_delay+0x70>
 8000d24:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <spi_cs_low_delay+0x78>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2201      	movs	r2, #1
 8000d2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, SPI_CS_state); /**< Put chip select line low */
 8000d2e:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <spi_cs_low_delay+0x7c>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	461a      	mov	r2, r3
 8000d34:	2110      	movs	r1, #16
 8000d36:	4810      	ldr	r0, [pc, #64]	; (8000d78 <spi_cs_low_delay+0x80>)
 8000d38:	f004 fac1 	bl	80052be <HAL_GPIO_WritePin>
    Sleep(delay_ms);
 8000d3c:	88fb      	ldrh	r3, [r7, #6]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f000 f8d3 	bl	8000eea <Sleep>
    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, (GPIO_PinState)(!((uint8_t)SPI_CS_state))); /**< Put chip select line high */
 8000d44:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <spi_cs_low_delay+0x7c>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	bf0c      	ite	eq
 8000d4c:	2301      	moveq	r3, #1
 8000d4e:	2300      	movne	r3, #0
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	461a      	mov	r2, r3
 8000d54:	2110      	movs	r1, #16
 8000d56:	4808      	ldr	r0, [pc, #32]	; (8000d78 <spi_cs_low_delay+0x80>)
 8000d58:	f004 fab1 	bl	80052be <HAL_GPIO_WritePin>
    /* Process Unlocked */
    __HAL_UNLOCK(hcurrent_active_spi);
 8000d5c:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <spi_cs_low_delay+0x78>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2200      	movs	r2, #0
 8000d62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return 0;
 8000d66:	2300      	movs	r3, #0
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20000044 	.word	0x20000044
 8000d74:	20000698 	.word	0x20000698
 8000d78:	40020800 	.word	0x40020800

08000d7c <readfromspi>:
 * returns the offset into read buffer where first byte of read data may be found,
 * or returns -1 if there was an error
 */
//#pragma GCC optimize ("O3")
int readfromspi(uint16_t headerLength, uint8_t *headerBuffer, uint16_t readlength, uint8_t *readBuffer)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60b9      	str	r1, [r7, #8]
 8000d84:	607b      	str	r3, [r7, #4]
 8000d86:	4603      	mov	r3, r0
 8000d88:	81fb      	strh	r3, [r7, #14]
 8000d8a:	4613      	mov	r3, r2
 8000d8c:	81bb      	strh	r3, [r7, #12]

    decaIrqStatus_t stat;
    stat = decamutexon();
 8000d8e:	f7ff fed3 	bl	8000b38 <decamutexon>
 8000d92:	6178      	str	r0, [r7, #20]

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(hcurrent_active_spi) != HAL_SPI_STATE_READY);
 8000d94:	bf00      	nop
 8000d96:	4b2d      	ldr	r3, [pc, #180]	; (8000e4c <readfromspi+0xd0>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f00d fd6e 	bl	800e87c <HAL_SPI_GetState>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d1f7      	bne.n	8000d96 <readfromspi+0x1a>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, SPI_CS_state); /**< Put chip select line low */
 8000da6:	4b2a      	ldr	r3, [pc, #168]	; (8000e50 <readfromspi+0xd4>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	461a      	mov	r2, r3
 8000dac:	2110      	movs	r1, #16
 8000dae:	4829      	ldr	r0, [pc, #164]	; (8000e54 <readfromspi+0xd8>)
 8000db0:	f004 fa85 	bl	80052be <HAL_GPIO_WritePin>

    /* Send header */
    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t*)headerBuffer, headerLength, HAL_MAX_DELAY); //No timeout
 8000db4:	4b25      	ldr	r3, [pc, #148]	; (8000e4c <readfromspi+0xd0>)
 8000db6:	6818      	ldr	r0, [r3, #0]
 8000db8:	89fa      	ldrh	r2, [r7, #14]
 8000dba:	f04f 33ff 	mov.w	r3, #4294967295
 8000dbe:	68b9      	ldr	r1, [r7, #8]
 8000dc0:	f00c f975 	bl	800d0ae <HAL_SPI_Transmit>

    while(__HAL_SPI_GET_FLAG(hcurrent_active_spi, SPI_FLAG_TXE) == RESET)//Verify that the transmit was ended
 8000dc4:	bf00      	nop
 8000dc6:	4b21      	ldr	r3, [pc, #132]	; (8000e4c <readfromspi+0xd0>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	f003 0302 	and.w	r3, r3, #2
 8000dd2:	2b02      	cmp	r3, #2
 8000dd4:	d1f7      	bne.n	8000dc6 <readfromspi+0x4a>
    {
    }

    /* for the data buffer use LL functions directly as the HAL SPI read function
     * has issue reading single bytes */
    while (readlength-- > 0)
 8000dd6:	e01f      	b.n	8000e18 <readfromspi+0x9c>
    {
        /* Wait until TXE flag is set to send data */
        while(__HAL_SPI_GET_FLAG(hcurrent_active_spi, SPI_FLAG_TXE) == RESET)
 8000dd8:	bf00      	nop
 8000dda:	4b1c      	ldr	r3, [pc, #112]	; (8000e4c <readfromspi+0xd0>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	f003 0302 	and.w	r3, r3, #2
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	d1f7      	bne.n	8000dda <readfromspi+0x5e>
        {
        }

        hcurrent_active_spi->Instance->DR=0;
 8000dea:	4b18      	ldr	r3, [pc, #96]	; (8000e4c <readfromspi+0xd0>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2200      	movs	r2, #0
 8000df2:	60da      	str	r2, [r3, #12]
        /* set output to 0 (MOSI), this is necessary for
        e.g. when waking up DW3000 from DEEPSLEEP via dwt_spicswakeup() function.
        */

        /* Wait until RXNE flag is set to read data */
        while(__HAL_SPI_GET_FLAG(hcurrent_active_spi, SPI_FLAG_RXNE) == RESET)
 8000df4:	bf00      	nop
 8000df6:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <readfromspi+0xd0>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d1f7      	bne.n	8000df6 <readfromspi+0x7a>
        {
        }

        (*readBuffer++) = hcurrent_active_spi->Instance->DR;  //copy data read form (MISO)
 8000e06:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <readfromspi+0xd0>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	68d9      	ldr	r1, [r3, #12]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	1c5a      	adds	r2, r3, #1
 8000e12:	607a      	str	r2, [r7, #4]
 8000e14:	b2ca      	uxtb	r2, r1
 8000e16:	701a      	strb	r2, [r3, #0]
    while (readlength-- > 0)
 8000e18:	89bb      	ldrh	r3, [r7, #12]
 8000e1a:	1e5a      	subs	r2, r3, #1
 8000e1c:	81ba      	strh	r2, [r7, #12]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d1da      	bne.n	8000dd8 <readfromspi+0x5c>
    }


    HAL_GPIO_WritePin(DW_CS_GPIO_Port, pin_io_active_spi, (GPIO_PinState)(!((uint8_t)SPI_CS_state))); /**< Put chip select line high */
 8000e22:	4b0d      	ldr	r3, [pc, #52]	; (8000e58 <readfromspi+0xdc>)
 8000e24:	8819      	ldrh	r1, [r3, #0]
 8000e26:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <readfromspi+0xd4>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	bf0c      	ite	eq
 8000e2e:	2301      	moveq	r3, #1
 8000e30:	2300      	movne	r3, #0
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	461a      	mov	r2, r3
 8000e36:	4807      	ldr	r0, [pc, #28]	; (8000e54 <readfromspi+0xd8>)
 8000e38:	f004 fa41 	bl	80052be <HAL_GPIO_WritePin>

    decamutexoff(stat);
 8000e3c:	6978      	ldr	r0, [r7, #20]
 8000e3e:	f7ff fe8c 	bl	8000b5a <decamutexoff>

    return 0;
 8000e42:	2300      	movs	r3, #0
} // end readfromspi()
 8000e44:	4618      	mov	r0, r3
 8000e46:	3718      	adds	r7, #24
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20000044 	.word	0x20000044
 8000e50:	20000698 	.word	0x20000698
 8000e54:	40020800 	.word	0x40020800
 8000e58:	20000048 	.word	0x20000048

08000e5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	db0b      	blt.n	8000e86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	f003 021f 	and.w	r2, r3, #31
 8000e74:	4906      	ldr	r1, [pc, #24]	; (8000e90 <__NVIC_EnableIRQ+0x34>)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	095b      	lsrs	r3, r3, #5
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e86:	bf00      	nop
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr
 8000e90:	e000e100 	.word	0xe000e100

08000e94 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	db12      	blt.n	8000ecc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	f003 021f 	and.w	r2, r3, #31
 8000eac:	490a      	ldr	r1, [pc, #40]	; (8000ed8 <__NVIC_DisableIRQ+0x44>)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	095b      	lsrs	r3, r3, #5
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eba:	3320      	adds	r3, #32
 8000ebc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ec0:	f3bf 8f4f 	dsb	sy
}
 8000ec4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ec6:	f3bf 8f6f 	isb	sy
}
 8000eca:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000ecc:	bf00      	nop
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bc80      	pop	{r7}
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	e000e100 	.word	0xe000e100

08000edc <portGetTickCnt>:
 * @brief wrapper for to read a SysTickTimer, which is incremented with
 *        CLOCKS_PER_SEC frequency.
 *        The resolution of time32_incr is usually 1/1000 sec.
 * */
__INLINE uint32_t portGetTickCnt(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 8000ee0:	f001 fbb8 	bl	8002654 <HAL_GetTick>
 8000ee4:	4603      	mov	r3, r0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <Sleep>:

/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void Sleep(uint32_t x)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f001 fbf4 	bl	80026e0 <HAL_Delay>
}
 8000ef8:	bf00      	nop
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <peripherals_init>:
 *******************************************************************************/

/* @fn    peripherals_init
 * */
int peripherals_init(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
    /* All has been initialized in the CubeMx code, see main.c */
    return 0;
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bc80      	pop	{r7}
 8000f0c:	4770      	bx	lr

08000f0e <spi_peripheral_init>:

/* @fn    spi_peripheral_init
 * */
void spi_peripheral_init()
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	af00      	add	r7, sp, #0

    /* SPI's has been initialized in the CubeMx code, see main.c */

    port_LCD_RS_clear();
 8000f12:	f000 f955 	bl	80011c0 <port_LCD_RS_clear>

    port_LCD_RW_clear();
 8000f16:	f000 f95f 	bl	80011d8 <port_LCD_RW_clear>
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
	...

08000f20 <EXTI_GetITEnStatus>:
 * @brief  Checks whether the specified IRQn line is enabled or not.
 * @param  IRQn: specifies the IRQn line to check.
 * @return "0" when IRQn is "not enabled" and !0 otherwise
 */
ITStatus EXTI_GetITEnStatus(IRQn_Type IRQn)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	71fb      	strb	r3, [r7, #7]
    return ((NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) == (uint32_t)RESET) ? (RESET) : (SET);
 8000f2a:	4a0b      	ldr	r2, [pc, #44]	; (8000f58 <EXTI_GetITEnStatus+0x38>)
 8000f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f30:	095b      	lsrs	r3, r3, #5
 8000f32:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	f003 031f 	and.w	r3, r3, #31
 8000f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f40:	f003 0301 	and.w	r3, r3, #1
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	bf14      	ite	ne
 8000f48:	2301      	movne	r3, #1
 8000f4a:	2300      	moveq	r3, #0
 8000f4c:	b2db      	uxtb	r3, r3
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr
 8000f58:	e000e100 	.word	0xe000e100

08000f5c <reset_DWIC>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW IC by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DWIC(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;

    // Enable GPIO used for DW1000 reset as open collector output
    GPIO_InitStruct.Pin = DW_RST_Pin;
 8000f62:	2301      	movs	r3, #1
 8000f64:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000f66:	2311      	movs	r3, #17
 8000f68:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 8000f6e:	1d3b      	adds	r3, r7, #4
 8000f70:	4619      	mov	r1, r3
 8000f72:	480a      	ldr	r0, [pc, #40]	; (8000f9c <reset_DWIC+0x40>)
 8000f74:	f003 ff0c 	bl	8004d90 <HAL_GPIO_Init>

    // drive the RSTn pin low
    HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_RESET);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	4807      	ldr	r0, [pc, #28]	; (8000f9c <reset_DWIC+0x40>)
 8000f7e:	f004 f99e 	bl	80052be <HAL_GPIO_WritePin>

    Sleep(1);
 8000f82:	2001      	movs	r0, #1
 8000f84:	f7ff ffb1 	bl	8000eea <Sleep>

    // put the pin back to output open-drain (not active)
    setup_DWICRSTnIRQ(0);
 8000f88:	2000      	movs	r0, #0
 8000f8a:	f000 f809 	bl	8000fa0 <setup_DWICRSTnIRQ>
    Sleep(2);
 8000f8e:	2002      	movs	r0, #2
 8000f90:	f7ff ffab 	bl	8000eea <Sleep>
}
 8000f94:	bf00      	nop
 8000f96:	3718      	adds	r7, #24
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40020000 	.word	0x40020000

08000fa0 <setup_DWICRSTnIRQ>:
 * @brief   setup the DW_RESET pin mode
 *          0 - output Open collector mode
 *          !0 - input mode with connected EXTI0 IRQ
 * */
void setup_DWICRSTnIRQ(int enable)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b088      	sub	sp, #32
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    if (enable)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d015      	beq.n	8000fda <setup_DWICRSTnIRQ+0x3a>
    {
        // Enable GPIO used as DECA RESET for interrupt
        GPIO_InitStruct.Pin = DW_RST_Pin;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fb2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fb6:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 8000fbc:	f107 030c 	add.w	r3, r7, #12
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4813      	ldr	r0, [pc, #76]	; (8001010 <setup_DWICRSTnIRQ+0x70>)
 8000fc4:	f003 fee4 	bl	8004d90 <HAL_GPIO_Init>

        HAL_NVIC_EnableIRQ(EXTI0_IRQn); // pin #0 -> EXTI #0
 8000fc8:	2006      	movs	r0, #6
 8000fca:	f001 fe60 	bl	8002c8e <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2105      	movs	r1, #5
 8000fd2:	2006      	movs	r0, #6
 8000fd4:	f001 fe3f 	bl	8002c56 <HAL_NVIC_SetPriority>
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
        HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_SET);
    }
}
 8000fd8:	e015      	b.n	8001006 <setup_DWICRSTnIRQ+0x66>
        HAL_NVIC_DisableIRQ(EXTI0_IRQn); // pin #0 -> EXTI #0
 8000fda:	2006      	movs	r0, #6
 8000fdc:	f001 fe65 	bl	8002caa <HAL_NVIC_DisableIRQ>
        GPIO_InitStruct.Pin = DW_RST_Pin;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000fe4:	2311      	movs	r3, #17
 8000fe6:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fec:	2302      	movs	r3, #2
 8000fee:	61bb      	str	r3, [r7, #24]
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 8000ff0:	f107 030c 	add.w	r3, r7, #12
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4806      	ldr	r0, [pc, #24]	; (8001010 <setup_DWICRSTnIRQ+0x70>)
 8000ff8:	f003 feca 	bl	8004d90 <HAL_GPIO_Init>
        HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_SET);
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	2101      	movs	r1, #1
 8001000:	4803      	ldr	r0, [pc, #12]	; (8001010 <setup_DWICRSTnIRQ+0x70>)
 8001002:	f004 f95c 	bl	80052be <HAL_GPIO_WritePin>
}
 8001006:	bf00      	nop
 8001008:	3720      	adds	r7, #32
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40020000 	.word	0x40020000

08001014 <wakeup_device_with_io>:
 *
 * output -None
 *
 */
void wakeup_device_with_io(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
    SET_WAKEUP_PIN_IO_HIGH;
 8001018:	2201      	movs	r2, #1
 800101a:	2110      	movs	r1, #16
 800101c:	4806      	ldr	r0, [pc, #24]	; (8001038 <wakeup_device_with_io+0x24>)
 800101e:	f004 f94e 	bl	80052be <HAL_GPIO_WritePin>
    WAIT_200uSEC;
 8001022:	2001      	movs	r0, #1
 8001024:	f7ff ff61 	bl	8000eea <Sleep>
    SET_WAKEUP_PIN_IO_LOW;
 8001028:	2200      	movs	r2, #0
 800102a:	2110      	movs	r1, #16
 800102c:	4802      	ldr	r0, [pc, #8]	; (8001038 <wakeup_device_with_io+0x24>)
 800102e:	f004 f946 	bl	80052be <HAL_GPIO_WritePin>
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40020800 	.word	0x40020800

0800103c <make_very_short_wakeup_io>:
 *
 * output -None
 *
 */
void make_very_short_wakeup_io(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
    uint8_t cnt;

    SET_WAKEUP_PIN_IO_HIGH;
 8001042:	2201      	movs	r2, #1
 8001044:	2110      	movs	r1, #16
 8001046:	480b      	ldr	r0, [pc, #44]	; (8001074 <make_very_short_wakeup_io+0x38>)
 8001048:	f004 f939 	bl	80052be <HAL_GPIO_WritePin>
    for (cnt = 0; cnt < 10; cnt++)
 800104c:	2300      	movs	r3, #0
 800104e:	71fb      	strb	r3, [r7, #7]
 8001050:	e003      	b.n	800105a <make_very_short_wakeup_io+0x1e>
        __NOP();
 8001052:	bf00      	nop
    for (cnt = 0; cnt < 10; cnt++)
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	3301      	adds	r3, #1
 8001058:	71fb      	strb	r3, [r7, #7]
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	2b09      	cmp	r3, #9
 800105e:	d9f8      	bls.n	8001052 <make_very_short_wakeup_io+0x16>
    SET_WAKEUP_PIN_IO_LOW;
 8001060:	2200      	movs	r2, #0
 8001062:	2110      	movs	r1, #16
 8001064:	4803      	ldr	r0, [pc, #12]	; (8001074 <make_very_short_wakeup_io+0x38>)
 8001066:	f004 f92a 	bl	80052be <HAL_GPIO_WritePin>
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40020800 	.word	0x40020800

08001078 <port_is_boot1_low>:
/* @fn      port_is_boot1_low
 * @brief   check the BOOT1 pin status.
 * @return  1 if ON and 0 for OFF
 * */
int port_is_boot1_low(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
    return ((GPIO_ReadInputDataBit(TA_BOOT1_GPIO, TA_BOOT1)) ? (0) : (1));
 800107c:	2104      	movs	r1, #4
 800107e:	4805      	ldr	r0, [pc, #20]	; (8001094 <port_is_boot1_low+0x1c>)
 8001080:	f004 f906 	bl	8005290 <HAL_GPIO_ReadPin>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	bf0c      	ite	eq
 800108a:	2301      	moveq	r3, #1
 800108c:	2300      	movne	r3, #0
 800108e:	b2db      	uxtb	r3, r3
}
 8001090:	4618      	mov	r0, r3
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40020400 	.word	0x40020400

08001098 <port_is_boot1_on>:
/* @fn      port_is_boot1_on
 * @brief   check the BOOT1 pin is on.
 * @return  1 if ON and 0 for OFF
 * */
int port_is_boot1_on(uint16_t x)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	80fb      	strh	r3, [r7, #6]
    UNUSED(x);
    return ((GPIO_ReadInputDataBit(TA_BOOT1_GPIO, TA_BOOT1)) ? (0) : (1));
 80010a2:	2104      	movs	r1, #4
 80010a4:	4806      	ldr	r0, [pc, #24]	; (80010c0 <port_is_boot1_on+0x28>)
 80010a6:	f004 f8f3 	bl	8005290 <HAL_GPIO_ReadPin>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	bf0c      	ite	eq
 80010b0:	2301      	moveq	r3, #1
 80010b2:	2300      	movne	r3, #0
 80010b4:	b2db      	uxtb	r3, r3
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40020400 	.word	0x40020400

080010c4 <port_is_switch_on>:
 * @brief   check the switch status.
 *          when switch (S1) is 'on' the pin is low
 * @return  1 if ON and 0 for OFF
 * */
int port_is_switch_on(uint16_t GPIOpin)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	80fb      	strh	r3, [r7, #6]
    return ((GPIO_ReadInputDataBit(TA_SW1_GPIO, GPIOpin)) ? (0) : (1));
 80010ce:	88fb      	ldrh	r3, [r7, #6]
 80010d0:	4619      	mov	r1, r3
 80010d2:	4806      	ldr	r0, [pc, #24]	; (80010ec <port_is_switch_on+0x28>)
 80010d4:	f004 f8dc 	bl	8005290 <HAL_GPIO_ReadPin>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	bf0c      	ite	eq
 80010de:	2301      	moveq	r3, #1
 80010e0:	2300      	movne	r3, #0
 80010e2:	b2db      	uxtb	r3, r3
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40020800 	.word	0x40020800

080010f0 <led_off>:

/* @fn      led_off
 * @brief   switch off the led from led_t enumeration
 * */
void led_off(led_t led)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
        break;
    }
#else
    UNUSED(led);
#endif
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr

08001104 <led_on>:

/* @fn      led_on
 * @brief   switch on the led from led_t enumeration
 * */
void led_on(led_t led)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	71fb      	strb	r3, [r7, #7]
        break;
    }
#else
    UNUSED(led);
#endif
}
 800110e:	bf00      	nop
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	bc80      	pop	{r7}
 8001116:	4770      	bx	lr

08001118 <change_SPI>:
 * @brief   Select Host to work with (SPI1 or SPI4)
 *
 * @param   spi - HOST enum to work with
 * */
void change_SPI(host_using_spi_e    spi)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	71fb      	strb	r3, [r7, #7]
    if (spi==SPI_1)
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d109      	bne.n	800113c <change_SPI+0x24>
    {
        hcurrent_active_spi=&hspi1;
 8001128:	4b0d      	ldr	r3, [pc, #52]	; (8001160 <change_SPI+0x48>)
 800112a:	4a0e      	ldr	r2, [pc, #56]	; (8001164 <change_SPI+0x4c>)
 800112c:	601a      	str	r2, [r3, #0]
        pin_io_active_spi=DW_CS_Pin;
 800112e:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <change_SPI+0x50>)
 8001130:	2210      	movs	r2, #16
 8001132:	801a      	strh	r2, [r3, #0]
        SPI_CS_state=GPIO_PIN_RESET;
 8001134:	4b0d      	ldr	r3, [pc, #52]	; (800116c <change_SPI+0x54>)
 8001136:	2200      	movs	r2, #0
 8001138:	701a      	strb	r2, [r3, #0]
 800113a:	e008      	b.n	800114e <change_SPI+0x36>
    }
    else
    {//SPI 2
        hcurrent_active_spi=&hspi1;
 800113c:	4b08      	ldr	r3, [pc, #32]	; (8001160 <change_SPI+0x48>)
 800113e:	4a09      	ldr	r2, [pc, #36]	; (8001164 <change_SPI+0x4c>)
 8001140:	601a      	str	r2, [r3, #0]
       // pin_io_active_spi=DW_NSS1_WAKEUP_Pin;
        pin_io_active_spi=DW_CS_Pin;
 8001142:	4b09      	ldr	r3, [pc, #36]	; (8001168 <change_SPI+0x50>)
 8001144:	2210      	movs	r2, #16
 8001146:	801a      	strh	r2, [r3, #0]
        SPI_CS_state=GPIO_PIN_SET;
 8001148:	4b08      	ldr	r3, [pc, #32]	; (800116c <change_SPI+0x54>)
 800114a:	2201      	movs	r2, #1
 800114c:	701a      	strb	r2, [r3, #0]
    }

    host_spi = spi;
 800114e:	4a08      	ldr	r2, [pc, #32]	; (8001170 <change_SPI+0x58>)
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	7013      	strb	r3, [r2, #0]
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	bc80      	pop	{r7}
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	20000044 	.word	0x20000044
 8001164:	2000069c 	.word	0x2000069c
 8001168:	20000048 	.word	0x20000048
 800116c:	20000698 	.word	0x20000698
 8001170:	20000699 	.word	0x20000699

08001174 <port_set_dw_ic_spi_slowrate>:
/* @fn      port_set_dw_ic_spi_slowrate
 * @brief   set 4.5MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw_ic_spi_slowrate(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
    hcurrent_active_spi->Init.BaudRatePrescaler=SPI_BAUDRATEPRESCALER_16;
 8001178:	4b05      	ldr	r3, [pc, #20]	; (8001190 <port_set_dw_ic_spi_slowrate+0x1c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2218      	movs	r2, #24
 800117e:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(hcurrent_active_spi);
 8001180:	4b03      	ldr	r3, [pc, #12]	; (8001190 <port_set_dw_ic_spi_slowrate+0x1c>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4618      	mov	r0, r3
 8001186:	f00b fecf 	bl	800cf28 <HAL_SPI_Init>
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000044 	.word	0x20000044

08001194 <port_set_dw_ic_spi_fastrate>:
/* @fn      port_set_dw_ic_spi_fastrate
 * @brief   set 18MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw_ic_spi_fastrate(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
    hcurrent_active_spi->Init.BaudRatePrescaler=SPI_BAUDRATEPRESCALER_2;
 8001198:	4b05      	ldr	r3, [pc, #20]	; (80011b0 <port_set_dw_ic_spi_fastrate+0x1c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2200      	movs	r2, #0
 800119e:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(hcurrent_active_spi);
 80011a0:	4b03      	ldr	r3, [pc, #12]	; (80011b0 <port_set_dw_ic_spi_fastrate+0x1c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f00b febf 	bl	800cf28 <HAL_SPI_Init>
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000044 	.word	0x20000044

080011b4 <port_LCD_RS_set>:

/* @fn      port_LCD_RS_set
 * @brief   wrapper to set LCD_RS pin
 * */
void port_LCD_RS_set(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
#if (EVB1000_LCD_SUPPORT == 1)
    HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
#endif
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr

080011c0 <port_LCD_RS_clear>:

/* @fn      port_LCD_RS_clear
 * @brief   wrapper to clear LCD_RS pin
 * */
void port_LCD_RS_clear(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
#if (EVB1000_LCD_SUPPORT == 1)
    HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
#endif
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr

080011cc <port_LCD_RW_set>:

/* @fn      port_LCD_RW_clear
 * @brief   wrapper to set LCD_RW pin
 * */
void port_LCD_RW_set(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
#if (EVB1000_LCD_SUPPORT == 1)
    HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_SET);
#endif
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bc80      	pop	{r7}
 80011d6:	4770      	bx	lr

080011d8 <port_LCD_RW_clear>:

/* @fn      port_LCD_RW_clear
 * @brief   wrapper to clear LCD_RW pin
 * */
void port_LCD_RW_clear(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
#if (EVB1000_LCD_SUPPORT == 1)
    HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
#endif
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr

080011e4 <HAL_GPIO_EXTI_Callback>:
 * @brief      EXTI line detection callback from HAL layer
 * @param      GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
 *             i.e. DW_RESET_Pin and DW_IRQn_Pin
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	80fb      	strh	r3, [r7, #6]
    switch (GPIO_Pin)
 80011ee:	88fb      	ldrh	r3, [r7, #6]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d002      	beq.n	80011fa <HAL_GPIO_EXTI_Callback+0x16>
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d004      	beq.n	8001202 <HAL_GPIO_EXTI_Callback+0x1e>

        break;
    }

    default:
        break;
 80011f8:	e006      	b.n	8001208 <HAL_GPIO_EXTI_Callback+0x24>
        signalResetDone = 1;
 80011fa:	4b05      	ldr	r3, [pc, #20]	; (8001210 <HAL_GPIO_EXTI_Callback+0x2c>)
 80011fc:	2201      	movs	r2, #1
 80011fe:	601a      	str	r2, [r3, #0]
        break;
 8001200:	e002      	b.n	8001208 <HAL_GPIO_EXTI_Callback+0x24>
                process_deca_irq();
 8001202:	f000 f807 	bl	8001214 <process_deca_irq>
        break;
 8001206:	bf00      	nop
    }
}
 8001208:	bf00      	nop
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	2000063c 	.word	0x2000063c

08001214 <process_deca_irq>:
 * @brief   main call-back for processing of DW3000 IRQ
 *          it re-enters the IRQ routing and processes all events.
 *          After processing of all events, DW3000 will clear the IRQ line.
 * */
__INLINE void process_deca_irq(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
    while (port_CheckEXT_IRQ() != 0)
 8001218:	e006      	b.n	8001228 <process_deca_irq+0x14>
    {
        if (port_dwic_isr)
 800121a:	4b07      	ldr	r3, [pc, #28]	; (8001238 <process_deca_irq+0x24>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d002      	beq.n	8001228 <process_deca_irq+0x14>
        {
            port_dwic_isr();
 8001222:	4b05      	ldr	r3, [pc, #20]	; (8001238 <process_deca_irq+0x24>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4798      	blx	r3
    while (port_CheckEXT_IRQ() != 0)
 8001228:	f000 f846 	bl	80012b8 <port_CheckEXT_IRQ>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d1f3      	bne.n	800121a <process_deca_irq+0x6>
        }
    } // while DW3000 IRQ line active
}
 8001232:	bf00      	nop
 8001234:	bf00      	nop
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000640 	.word	0x20000640

0800123c <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
    if(SPI_1 == host_spi)
 8001240:	4b06      	ldr	r3, [pc, #24]	; (800125c <port_DisableEXT_IRQ+0x20>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d103      	bne.n	8001250 <port_DisableEXT_IRQ+0x14>
    {
        NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 8001248:	2028      	movs	r0, #40	; 0x28
 800124a:	f7ff fe23 	bl	8000e94 <__NVIC_DisableIRQ>
    else
    {
        NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn2);
    }

}
 800124e:	e002      	b.n	8001256 <port_DisableEXT_IRQ+0x1a>
        NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn2);
 8001250:	2017      	movs	r0, #23
 8001252:	f7ff fe1f 	bl	8000e94 <__NVIC_DisableIRQ>
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20000699 	.word	0x20000699

08001260 <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
    if(SPI_1 == host_spi)
 8001264:	4b06      	ldr	r3, [pc, #24]	; (8001280 <port_EnableEXT_IRQ+0x20>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d103      	bne.n	8001274 <port_EnableEXT_IRQ+0x14>
    {
        NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 800126c:	2028      	movs	r0, #40	; 0x28
 800126e:	f7ff fdf5 	bl	8000e5c <__NVIC_EnableIRQ>
    }
    else
    {
        NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn2);
    }
}
 8001272:	e002      	b.n	800127a <port_EnableEXT_IRQ+0x1a>
        NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn2);
 8001274:	2017      	movs	r0, #23
 8001276:	f7ff fdf1 	bl	8000e5c <__NVIC_EnableIRQ>
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20000699 	.word	0x20000699

08001284 <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
    uint32_t status;

    if(SPI_1 == host_spi)
 800128a:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <port_GetEXT_IRQStatus+0x30>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d105      	bne.n	800129e <port_GetEXT_IRQStatus+0x1a>
    {
        status = EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 8001292:	2028      	movs	r0, #40	; 0x28
 8001294:	f7ff fe44 	bl	8000f20 <EXTI_GetITEnStatus>
 8001298:	4603      	mov	r3, r0
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	e004      	b.n	80012a8 <port_GetEXT_IRQStatus+0x24>
    }
    else
    {
        status = EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn2);
 800129e:	2017      	movs	r0, #23
 80012a0:	f7ff fe3e 	bl	8000f20 <EXTI_GetITEnStatus>
 80012a4:	4603      	mov	r3, r0
 80012a6:	607b      	str	r3, [r7, #4]
    }
    return status;
 80012a8:	687b      	ldr	r3, [r7, #4]
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20000699 	.word	0x20000699

080012b8 <port_CheckEXT_IRQ>:

/* @fn      port_CheckEXT_IRQ
 * @brief   wrapper to read DW_IRQ input pin state
 * */
__INLINE uint32_t port_CheckEXT_IRQ(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
    uint32_t status;

    if(SPI_1 == host_spi)
 80012be:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <port_CheckEXT_IRQ+0x34>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d106      	bne.n	80012d4 <port_CheckEXT_IRQ+0x1c>
    {
        status = HAL_GPIO_ReadPin(DW_IRQ_GPIO_Port, DW_IRQ_Pin);;
 80012c6:	2102      	movs	r1, #2
 80012c8:	4809      	ldr	r0, [pc, #36]	; (80012f0 <port_CheckEXT_IRQ+0x38>)
 80012ca:	f003 ffe1 	bl	8005290 <HAL_GPIO_ReadPin>
 80012ce:	4603      	mov	r3, r0
 80012d0:	607b      	str	r3, [r7, #4]
 80012d2:	e005      	b.n	80012e0 <port_CheckEXT_IRQ+0x28>
    }
    else
    {
        status = HAL_GPIO_ReadPin(DW_IRQ_GPIO_Port, DW_IRQ_Pin);
 80012d4:	2102      	movs	r1, #2
 80012d6:	4806      	ldr	r0, [pc, #24]	; (80012f0 <port_CheckEXT_IRQ+0x38>)
 80012d8:	f003 ffda 	bl	8005290 <HAL_GPIO_ReadPin>
 80012dc:	4603      	mov	r3, r0
 80012de:	607b      	str	r3, [r7, #4]
    }
    return status;
 80012e0:	687b      	ldr	r3, [r7, #4]
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000699 	.word	0x20000699
 80012f0:	40020000 	.word	0x40020000

080012f4 <calculate_power_boost>:
 * @return boost: the amount of boost in 0.1dB steps which is allowed when transmitting the frame_dur_us frame
 *                relatively to a 1ms frame. For example, if the frame duration is 500us, then relatively to 1ms,
 *                a 3dB boost is allowed, and the function will return 30.
 */
uint8_t calculate_power_boost(uint16_t frame_duration_us)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b087      	sub	sp, #28
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	80fb      	strh	r3, [r7, #6]

    const uint8_t *lut = NULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]
    uint16_t lut_min;
    uint16_t lut_step;
    uint16_t limit;

    // If the frame is longer than the reference duration, then no boost to apply
    if (frame_duration_us >= FRAME_DURATION_REF)
 8001302:	88fb      	ldrh	r3, [r7, #6]
 8001304:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001308:	d301      	bcc.n	800130e <calculate_power_boost+0x1a>
    {
        return LUT_1000_200_US_MIN_BST;
 800130a:	2300      	movs	r3, #0
 800130c:	e040      	b.n	8001390 <calculate_power_boost+0x9c>
    }
    else if (frame_duration_us < LUT_200_70_US_MIN) // If frame shorter than 70us apply the maximum boost
 800130e:	88fb      	ldrh	r3, [r7, #6]
 8001310:	2b45      	cmp	r3, #69	; 0x45
 8001312:	d801      	bhi.n	8001318 <calculate_power_boost+0x24>
    {
        return LUT_200_70_US_MAX_BST;
 8001314:	2371      	movs	r3, #113	; 0x71
 8001316:	e03b      	b.n	8001390 <calculate_power_boost+0x9c>
    }
    else if (frame_duration_us > LUT_1000_200_US_MIN) // Select LUT table for frame 1000us > duration > 200us
 8001318:	88fb      	ldrh	r3, [r7, #6]
 800131a:	2bc8      	cmp	r3, #200	; 0xc8
 800131c:	d908      	bls.n	8001330 <calculate_power_boost+0x3c>
    {
        lut_num = LUT_1000_200_US_NUM;
 800131e:	2321      	movs	r3, #33	; 0x21
 8001320:	823b      	strh	r3, [r7, #16]
        lut_min = LUT_1000_200_US_MIN;
 8001322:	23c8      	movs	r3, #200	; 0xc8
 8001324:	81fb      	strh	r3, [r7, #14]
        lut_step = LUT_1000_200_US_STEP;
 8001326:	2319      	movs	r3, #25
 8001328:	81bb      	strh	r3, [r7, #12]
        lut = txpower_boost_per_frame_duration_1000_200_us;
 800132a:	4b1c      	ldr	r3, [pc, #112]	; (800139c <calculate_power_boost+0xa8>)
 800132c:	617b      	str	r3, [r7, #20]
 800132e:	e007      	b.n	8001340 <calculate_power_boost+0x4c>
    }
    else // Select LUT table for frame 200us > duration > 70us
    {
        lut_num = LUT_200_70_US_NUM;
 8001330:	230e      	movs	r3, #14
 8001332:	823b      	strh	r3, [r7, #16]
        lut_min = LUT_200_70_US_MIN;
 8001334:	2346      	movs	r3, #70	; 0x46
 8001336:	81fb      	strh	r3, [r7, #14]
        lut_step = LUT_200_70_US_STEP;
 8001338:	230a      	movs	r3, #10
 800133a:	81bb      	strh	r3, [r7, #12]
        lut = txpower_boost_per_frame_duration_200_70_us;
 800133c:	4b18      	ldr	r3, [pc, #96]	; (80013a0 <calculate_power_boost+0xac>)
 800133e:	617b      	str	r3, [r7, #20]
    }

    // Calculating the LUT index corresponding to the frame duration
    lut_i = (lut_num - (frame_duration_us - lut_min) / lut_step);
 8001340:	88fa      	ldrh	r2, [r7, #6]
 8001342:	89fb      	ldrh	r3, [r7, #14]
 8001344:	1ad2      	subs	r2, r2, r3
 8001346:	89bb      	ldrh	r3, [r7, #12]
 8001348:	fb92 f3f3 	sdiv	r3, r2, r3
 800134c:	b29b      	uxth	r3, r3
 800134e:	8a3a      	ldrh	r2, [r7, #16]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	827b      	strh	r3, [r7, #18]
    limit = (lut_num - lut_i) * lut_step + lut_min;
 8001354:	8a3a      	ldrh	r2, [r7, #16]
 8001356:	8a7b      	ldrh	r3, [r7, #18]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	b29b      	uxth	r3, r3
 800135c:	89ba      	ldrh	r2, [r7, #12]
 800135e:	fb02 f303 	mul.w	r3, r2, r3
 8001362:	b29a      	uxth	r2, r3
 8001364:	89fb      	ldrh	r3, [r7, #14]
 8001366:	4413      	add	r3, r2
 8001368:	817b      	strh	r3, [r7, #10]

    // Selecting the index that gives the closest LUT duration to the one passed as argument.
    if (abs(frame_duration_us - limit) > lut_step / 2)
 800136a:	88fa      	ldrh	r2, [r7, #6]
 800136c:	897b      	ldrh	r3, [r7, #10]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	2b00      	cmp	r3, #0
 8001372:	bfb8      	it	lt
 8001374:	425b      	neglt	r3, r3
 8001376:	89ba      	ldrh	r2, [r7, #12]
 8001378:	0852      	lsrs	r2, r2, #1
 800137a:	b292      	uxth	r2, r2
 800137c:	4293      	cmp	r3, r2
 800137e:	dd02      	ble.n	8001386 <calculate_power_boost+0x92>
    {
        lut_i--;
 8001380:	8a7b      	ldrh	r3, [r7, #18]
 8001382:	3b01      	subs	r3, #1
 8001384:	827b      	strh	r3, [r7, #18]
    }

    // Boost is stored in the LUT at the calculated index - 1.
    // -1 to account for index 0
    // lut_i cannot be == 0 or > lut_num here
    return lut[lut_i - 1];
 8001386:	8a7b      	ldrh	r3, [r7, #18]
 8001388:	3b01      	subs	r3, #1
 800138a:	697a      	ldr	r2, [r7, #20]
 800138c:	4413      	add	r3, r2
 800138e:	781b      	ldrb	r3, [r3, #0]
}
 8001390:	4618      	mov	r0, r3
 8001392:	371c      	adds	r7, #28
 8001394:	46bd      	mov	sp, r7
 8001396:	bc80      	pop	{r7}
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	08020fc4 	.word	0x08020fc4
 80013a0:	08020fe8 	.word	0x08020fe8

080013a4 <check_for_status_errors>:
 * @param errors: pointer to a uint32_t buffer that contains the sum of different errors logged during program operation.
 *
 * @return none
 */
void check_for_status_errors(uint32_t reg, uint32_t *errors)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
    uint16_t stsStatus = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	81fb      	strh	r3, [r7, #14]

    if (!(reg & DWT_INT_RXFCG_BIT_MASK))
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d106      	bne.n	80013ca <check_for_status_errors+0x26>
    {
        errors[BAD_FRAME_ERR_IDX] += 1;
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	3328      	adds	r3, #40	; 0x28
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	3328      	adds	r3, #40	; 0x28
 80013c6:	3201      	adds	r2, #1
 80013c8:	601a      	str	r2, [r3, #0]
    }

    if (reg & DWT_INT_RXFSL_BIT_MASK)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d006      	beq.n	80013e2 <check_for_status_errors+0x3e>
    {
        errors[RSE_ERR_IDX] += 1;
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	3304      	adds	r3, #4
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	3304      	adds	r3, #4
 80013de:	3201      	adds	r2, #1
 80013e0:	601a      	str	r2, [r3, #0]
    }

    if (reg & DWT_INT_RXPHE_BIT_MASK)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d006      	beq.n	80013fa <check_for_status_errors+0x56>
    {
        errors[PHE_ERR_IDX] += 1;
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	3308      	adds	r3, #8
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	3308      	adds	r3, #8
 80013f6:	3201      	adds	r2, #1
 80013f8:	601a      	str	r2, [r3, #0]
    }

    if (reg & DWT_INT_RXPTO_BIT_MASK)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d006      	beq.n	8001412 <check_for_status_errors+0x6e>
    {
        errors[PTO_ERR_IDX] += 1;
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	3310      	adds	r3, #16
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	3310      	adds	r3, #16
 800140e:	3201      	adds	r2, #1
 8001410:	601a      	str	r2, [r3, #0]
    }

    if (reg & DWT_INT_ARFE_BIT_MASK)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d006      	beq.n	800142a <check_for_status_errors+0x86>
    {
        errors[ARFE_ERR_IDX] += 1;
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	3320      	adds	r3, #32
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	3320      	adds	r3, #32
 8001426:	3201      	adds	r2, #1
 8001428:	601a      	str	r2, [r3, #0]
    }

    if ((reg & DWT_INT_RXFR_BIT_MASK) && !(reg & DWT_INT_RXFCG_BIT_MASK))
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d009      	beq.n	8001448 <check_for_status_errors+0xa4>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d104      	bne.n	8001448 <check_for_status_errors+0xa4>
    {
        errors[CRC_ERR_IDX] += 1;
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	1c5a      	adds	r2, r3, #1
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	601a      	str	r2, [r3, #0]
    }

    if ((reg & DWT_INT_RXFTO_BIT_MASK) || (reg & SYS_STATUS_ALL_RX_TO))
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d104      	bne.n	800145c <check_for_status_errors+0xb8>
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	4b4c      	ldr	r3, [pc, #304]	; (8001588 <check_for_status_errors+0x1e4>)
 8001456:	4013      	ands	r3, r2
 8001458:	2b00      	cmp	r3, #0
 800145a:	d006      	beq.n	800146a <check_for_status_errors+0xc6>
    {
        errors[RTO_ERR_IDX] += 1;
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	3314      	adds	r3, #20
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	3314      	adds	r3, #20
 8001466:	3201      	adds	r2, #1
 8001468:	601a      	str	r2, [r3, #0]
    }

    if (reg & DWT_INT_RXSTO_BIT_MASK)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d006      	beq.n	8001482 <check_for_status_errors+0xde>
    {
        errors[SFDTO_ERR_IDX] += 1;
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	330c      	adds	r3, #12
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	330c      	adds	r3, #12
 800147e:	3201      	adds	r2, #1
 8001480:	601a      	str	r2, [r3, #0]
    }

    if (reg & DWT_INT_CPERR_BIT_MASK)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d078      	beq.n	800157e <check_for_status_errors+0x1da>
    {
        // There is a general STS error
        errors[STS_PREAMBLE_ERR] += 1;
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	3334      	adds	r3, #52	; 0x34
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	3334      	adds	r3, #52	; 0x34
 8001496:	3201      	adds	r2, #1
 8001498:	601a      	str	r2, [r3, #0]

        // Get the status for a more detailed error reading of what went wrong with the STS
        dwt_readstsstatus(&stsStatus, 0);
 800149a:	f107 030e 	add.w	r3, r7, #14
 800149e:	2100      	movs	r1, #0
 80014a0:	4618      	mov	r0, r3
 80014a2:	f011 fcab 	bl	8012dfc <dwt_readstsstatus>
        if (stsStatus & 0x100)
 80014a6:	89fb      	ldrh	r3, [r7, #14]
 80014a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d006      	beq.n	80014be <check_for_status_errors+0x11a>
        {
            // Peak growth rate warning
            errors[STS_PEAK_GROWTH_RATE_ERR] += 1;
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	3338      	adds	r3, #56	; 0x38
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	3338      	adds	r3, #56	; 0x38
 80014ba:	3201      	adds	r2, #1
 80014bc:	601a      	str	r2, [r3, #0]
        }
        if (stsStatus & 0x080)
 80014be:	89fb      	ldrh	r3, [r7, #14]
 80014c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d006      	beq.n	80014d6 <check_for_status_errors+0x132>
        {
            // ADC count warning
            errors[STS_ADC_COUNT_ERR] += 1;
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	333c      	adds	r3, #60	; 0x3c
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	333c      	adds	r3, #60	; 0x3c
 80014d2:	3201      	adds	r2, #1
 80014d4:	601a      	str	r2, [r3, #0]
        }
        if (stsStatus & 0x040)
 80014d6:	89fb      	ldrh	r3, [r7, #14]
 80014d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d006      	beq.n	80014ee <check_for_status_errors+0x14a>
        {
            // SFD count warning
            errors[STS_SFD_COUNT_ERR] += 1;
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	3340      	adds	r3, #64	; 0x40
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	3340      	adds	r3, #64	; 0x40
 80014ea:	3201      	adds	r2, #1
 80014ec:	601a      	str	r2, [r3, #0]
        }
        if (stsStatus & 0x020)
 80014ee:	89fb      	ldrh	r3, [r7, #14]
 80014f0:	f003 0320 	and.w	r3, r3, #32
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d006      	beq.n	8001506 <check_for_status_errors+0x162>
        {
            // Late first path estimation
            errors[STS_LATE_FIRST_PATH_ERR] += 1;
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	3344      	adds	r3, #68	; 0x44
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	3344      	adds	r3, #68	; 0x44
 8001502:	3201      	adds	r2, #1
 8001504:	601a      	str	r2, [r3, #0]
        }
        if (stsStatus & 0x010)
 8001506:	89fb      	ldrh	r3, [r7, #14]
 8001508:	f003 0310 	and.w	r3, r3, #16
 800150c:	2b00      	cmp	r3, #0
 800150e:	d006      	beq.n	800151e <check_for_status_errors+0x17a>
        {
            // Late coarse estimation
            errors[STS_LATE_COARSE_EST_ERR] += 1;
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	3348      	adds	r3, #72	; 0x48
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	3348      	adds	r3, #72	; 0x48
 800151a:	3201      	adds	r2, #1
 800151c:	601a      	str	r2, [r3, #0]
        }
        if (stsStatus & 0x008)
 800151e:	89fb      	ldrh	r3, [r7, #14]
 8001520:	f003 0308 	and.w	r3, r3, #8
 8001524:	2b00      	cmp	r3, #0
 8001526:	d006      	beq.n	8001536 <check_for_status_errors+0x192>
        {
            // Coarse estimation empty
            errors[STS_COARSE_EST_EMPTY_ERR] += 1;
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	334c      	adds	r3, #76	; 0x4c
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	334c      	adds	r3, #76	; 0x4c
 8001532:	3201      	adds	r2, #1
 8001534:	601a      	str	r2, [r3, #0]
        }
        if (stsStatus & 0x004)
 8001536:	89fb      	ldrh	r3, [r7, #14]
 8001538:	f003 0304 	and.w	r3, r3, #4
 800153c:	2b00      	cmp	r3, #0
 800153e:	d006      	beq.n	800154e <check_for_status_errors+0x1aa>
        {
            // High noise threshold
            errors[STS_HIGH_NOISE_THREASH_ERR] += 1;
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	3350      	adds	r3, #80	; 0x50
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	3350      	adds	r3, #80	; 0x50
 800154a:	3201      	adds	r2, #1
 800154c:	601a      	str	r2, [r3, #0]
        }
        if (stsStatus & 0x002)
 800154e:	89fb      	ldrh	r3, [r7, #14]
 8001550:	f003 0302 	and.w	r3, r3, #2
 8001554:	2b00      	cmp	r3, #0
 8001556:	d006      	beq.n	8001566 <check_for_status_errors+0x1c2>
        {
            // Non-triangle
            errors[STS_NON_TRIANGLE_ERR] += 1;
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	3354      	adds	r3, #84	; 0x54
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	3354      	adds	r3, #84	; 0x54
 8001562:	3201      	adds	r2, #1
 8001564:	601a      	str	r2, [r3, #0]
        }
        if (stsStatus & 0x001)
 8001566:	89fb      	ldrh	r3, [r7, #14]
 8001568:	f003 0301 	and.w	r3, r3, #1
 800156c:	2b00      	cmp	r3, #0
 800156e:	d006      	beq.n	800157e <check_for_status_errors+0x1da>
        {
            // Logistic regression failed
            errors[STS_LOG_REG_FAILED_ERR] += 1;
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	3358      	adds	r3, #88	; 0x58
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	3358      	adds	r3, #88	; 0x58
 800157a:	3201      	adds	r2, #1
 800157c:	601a      	str	r2, [r3, #0]
        }
    }
}
 800157e:	bf00      	nop
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	10220000 	.word	0x10220000

0800158c <get_rx_delay_time_txpreamble>:
 * @param None
 *
 * @return delay_time - a uint32_t value indicating the required increase needed to delay the time by.
 */
uint32_t get_rx_delay_time_txpreamble(void)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
    uint32_t delay_time = 0;
 8001592:	2300      	movs	r3, #0
 8001594:	607b      	str	r3, [r7, #4]
    /* Standard delay values for preamble lengths of 32, 64, 72 & 128 should be adequate.
     * Additional time delay will be needed for larger preamble lengths.
     * Delay required is dependent on the preamble length as it increases the frame length. */
    switch (config_options.txPreambLength)
 8001596:	4b22      	ldr	r3, [pc, #136]	; (8001620 <get_rx_delay_time_txpreamble+0x94>)
 8001598:	785b      	ldrb	r3, [r3, #1]
 800159a:	3b02      	subs	r3, #2
 800159c:	2b0b      	cmp	r3, #11
 800159e:	d838      	bhi.n	8001612 <get_rx_delay_time_txpreamble+0x86>
 80015a0:	a201      	add	r2, pc, #4	; (adr r2, 80015a8 <get_rx_delay_time_txpreamble+0x1c>)
 80015a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015a6:	bf00      	nop
 80015a8:	080015eb 	.word	0x080015eb
 80015ac:	08001609 	.word	0x08001609
 80015b0:	08001613 	.word	0x08001613
 80015b4:	08001613 	.word	0x08001613
 80015b8:	080015f5 	.word	0x080015f5
 80015bc:	08001613 	.word	0x08001613
 80015c0:	08001613 	.word	0x08001613
 80015c4:	080015d9 	.word	0x080015d9
 80015c8:	080015ff 	.word	0x080015ff
 80015cc:	08001613 	.word	0x08001613
 80015d0:	08001613 	.word	0x08001613
 80015d4:	080015e1 	.word	0x080015e1
    {
    case DWT_PLEN_256:
        delay_time += 128; /* 256 - 128 */
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3380      	adds	r3, #128	; 0x80
 80015dc:	607b      	str	r3, [r7, #4]
        break;
 80015de:	e019      	b.n	8001614 <get_rx_delay_time_txpreamble+0x88>
    case DWT_PLEN_512:
        delay_time += 384; /* 512 - 128 */
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80015e6:	607b      	str	r3, [r7, #4]
        break;
 80015e8:	e014      	b.n	8001614 <get_rx_delay_time_txpreamble+0x88>
    case DWT_PLEN_1024:
        delay_time += 896; /* 1024 - 128 */
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f503 7360 	add.w	r3, r3, #896	; 0x380
 80015f0:	607b      	str	r3, [r7, #4]
        break;
 80015f2:	e00f      	b.n	8001614 <get_rx_delay_time_txpreamble+0x88>
    case DWT_PLEN_1536:
        delay_time += 1408; /* 1536 - 128 */
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 80015fa:	607b      	str	r3, [r7, #4]
        break;
 80015fc:	e00a      	b.n	8001614 <get_rx_delay_time_txpreamble+0x88>
    case DWT_PLEN_2048:
        delay_time += 1920; /* 2048 - 128 */
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f503 63f0 	add.w	r3, r3, #1920	; 0x780
 8001604:	607b      	str	r3, [r7, #4]
        break;
 8001606:	e005      	b.n	8001614 <get_rx_delay_time_txpreamble+0x88>
    case DWT_PLEN_4096:
        delay_time += 3968; /* 4096 - 128 */
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f503 6378 	add.w	r3, r3, #3968	; 0xf80
 800160e:	607b      	str	r3, [r7, #4]
        break;
 8001610:	e000      	b.n	8001614 <get_rx_delay_time_txpreamble+0x88>
    case DWT_PLEN_32:
    case DWT_PLEN_64:
    case DWT_PLEN_72:
    case DWT_PLEN_128:
    default:
        break;
 8001612:	bf00      	nop
    }

    return delay_time;
 8001614:	687b      	ldr	r3, [r7, #4]
}
 8001616:	4618      	mov	r0, r3
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr
 8001620:	20000014 	.word	0x20000014

08001624 <get_rx_delay_time_data_rate>:
 * @param None
 *
 * @return delay_time - a uint32_t value indicating the required increase needed to delay the time by.
 */
uint32_t get_rx_delay_time_data_rate(void)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
    uint32_t delay_time = 0;
 800162a:	2300      	movs	r3, #0
 800162c:	607b      	str	r3, [r7, #4]
    /*
     * If data rate is set to 850k (slower rate),
     * increase the delay time
     */
    switch (config_options.dataRate)
 800162e:	4b07      	ldr	r3, [pc, #28]	; (800164c <get_rx_delay_time_data_rate+0x28>)
 8001630:	799b      	ldrb	r3, [r3, #6]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d103      	bne.n	800163e <get_rx_delay_time_data_rate+0x1a>
    {
    case DWT_BR_850K:
        delay_time += 200;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	33c8      	adds	r3, #200	; 0xc8
 800163a:	607b      	str	r3, [r7, #4]
        break;
 800163c:	e000      	b.n	8001640 <get_rx_delay_time_data_rate+0x1c>
    case DWT_BR_6M8:
    default:
        break;
 800163e:	bf00      	nop
    }

    return delay_time;
 8001640:	687b      	ldr	r3, [r7, #4]
}
 8001642:	4618      	mov	r0, r3
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	bc80      	pop	{r7}
 800164a:	4770      	bx	lr
 800164c:	20000014 	.word	0x20000014

08001650 <set_delayed_rx_time>:
 *                         is called.
 *
 * @return None
 */
void set_delayed_rx_time(uint32_t delay, dwt_config_t *config_options)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
    uint32_t delay_time = delay;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	60fb      	str	r3, [r7, #12]

    switch (config_options->txPreambLength)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	785b      	ldrb	r3, [r3, #1]
 8001662:	3b01      	subs	r3, #1
 8001664:	2b0c      	cmp	r3, #12
 8001666:	d846      	bhi.n	80016f6 <set_delayed_rx_time+0xa6>
 8001668:	a201      	add	r2, pc, #4	; (adr r2, 8001670 <set_delayed_rx_time+0x20>)
 800166a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800166e:	bf00      	nop
 8001670:	080016ad 	.word	0x080016ad
 8001674:	080016d9 	.word	0x080016d9
 8001678:	080016ed 	.word	0x080016ed
 800167c:	080016a5 	.word	0x080016a5
 8001680:	080016bd 	.word	0x080016bd
 8001684:	080016e3 	.word	0x080016e3
 8001688:	080016b5 	.word	0x080016b5
 800168c:	080016f7 	.word	0x080016f7
 8001690:	080016c5 	.word	0x080016c5
 8001694:	080016ed 	.word	0x080016ed
 8001698:	080016f7 	.word	0x080016f7
 800169c:	080016f7 	.word	0x080016f7
 80016a0:	080016cf 	.word	0x080016cf
    {
    case DWT_PLEN_32:
        delay_time -= 32;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	3b20      	subs	r3, #32
 80016a8:	60fb      	str	r3, [r7, #12]
        break;
 80016aa:	e025      	b.n	80016f8 <set_delayed_rx_time+0xa8>
    case DWT_PLEN_64:
        delay_time -= 64;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	3b40      	subs	r3, #64	; 0x40
 80016b0:	60fb      	str	r3, [r7, #12]
        break;
 80016b2:	e021      	b.n	80016f8 <set_delayed_rx_time+0xa8>
    case DWT_PLEN_72:
        delay_time -= 72;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	3b48      	subs	r3, #72	; 0x48
 80016b8:	60fb      	str	r3, [r7, #12]
        break;
 80016ba:	e01d      	b.n	80016f8 <set_delayed_rx_time+0xa8>
    case DWT_PLEN_128:
        delay_time -= 128;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	3b80      	subs	r3, #128	; 0x80
 80016c0:	60fb      	str	r3, [r7, #12]
        break;
 80016c2:	e019      	b.n	80016f8 <set_delayed_rx_time+0xa8>
    case DWT_PLEN_256:
        delay_time -= 256;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80016ca:	60fb      	str	r3, [r7, #12]
        break;
 80016cc:	e014      	b.n	80016f8 <set_delayed_rx_time+0xa8>
    case DWT_PLEN_512:
        delay_time -= 512;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80016d4:	60fb      	str	r3, [r7, #12]
        break;
 80016d6:	e00f      	b.n	80016f8 <set_delayed_rx_time+0xa8>
    case DWT_PLEN_1024:
        delay_time -= 1024;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80016de:	60fb      	str	r3, [r7, #12]
        break;
 80016e0:	e00a      	b.n	80016f8 <set_delayed_rx_time+0xa8>
    case DWT_PLEN_1536:
        delay_time -= 1536;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
 80016e8:	60fb      	str	r3, [r7, #12]
        break;
 80016ea:	e005      	b.n	80016f8 <set_delayed_rx_time+0xa8>
    case DWT_PLEN_2048:
    case DWT_PLEN_4096:
        delay_time -= 2048;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80016f2:	60fb      	str	r3, [r7, #12]
        break;
 80016f4:	e000      	b.n	80016f8 <set_delayed_rx_time+0xa8>
    default:
        break;
 80016f6:	bf00      	nop
    }

    /* Length of the STS effects the size of the frame also.
     * This means the delay required is greater for larger STS lengths. */
    delay_time += ((1 << (config_options->stsLength + 2)) * 8);
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	7b1b      	ldrb	r3, [r3, #12]
 80016fc:	3302      	adds	r3, #2
 80016fe:	2208      	movs	r2, #8
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	461a      	mov	r2, r3
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	4413      	add	r3, r2
 800170a:	60fb      	str	r3, [r7, #12]

    dwt_setdelayedtrxtime((uint32_t)((delay_time * UUS_TO_DWT_TIME) >> 8));
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f64f 129a 	movw	r2, #63898	; 0xf99a
 8001712:	fb02 f303 	mul.w	r3, r2, r3
 8001716:	0a1b      	lsrs	r3, r3, #8
 8001718:	4618      	mov	r0, r3
 800171a:	f010 ffdf 	bl	80126dc <dwt_setdelayedtrxtime>
}
 800171e:	bf00      	nop
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop

08001728 <set_resp_rx_timeout>:
 *                         is called.
 *
 * @return None
 */
void set_resp_rx_timeout(uint32_t delay, dwt_config_t *config_options)
{
 8001728:	b590      	push	{r4, r7, lr}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
    /*
     * The program will need to adjust the timeout value depending on the size of the frame
     * Different sized frames require different time delays.
     */
    uint32_t delay_time = delay + get_rx_delay_time_data_rate() + get_rx_delay_time_txpreamble() + 500;
 8001732:	f7ff ff77 	bl	8001624 <get_rx_delay_time_data_rate>
 8001736:	4602      	mov	r2, r0
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	18d4      	adds	r4, r2, r3
 800173c:	f7ff ff26 	bl	800158c <get_rx_delay_time_txpreamble>
 8001740:	4603      	mov	r3, r0
 8001742:	4423      	add	r3, r4
 8001744:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001748:	60fb      	str	r3, [r7, #12]

    /* Length of the STS effects the size of the frame also.
     * This means the delay required is greater for larger STS lengths. */
    switch (config_options->stsLength)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	7b1b      	ldrb	r3, [r3, #12]
 800174e:	3b03      	subs	r3, #3
 8001750:	2b03      	cmp	r3, #3
 8001752:	d80a      	bhi.n	800176a <set_resp_rx_timeout+0x42>
    {
    case DWT_STS_LEN_256:
    case DWT_STS_LEN_512:
    case DWT_STS_LEN_1024:
    case DWT_STS_LEN_2048:
        delay_time += ((1 << (config_options->stsLength + 2)) * 8);
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	7b1b      	ldrb	r3, [r3, #12]
 8001758:	3302      	adds	r3, #2
 800175a:	2208      	movs	r2, #8
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	461a      	mov	r2, r3
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	4413      	add	r3, r2
 8001766:	60fb      	str	r3, [r7, #12]
        break;
 8001768:	e000      	b.n	800176c <set_resp_rx_timeout+0x44>
    case DWT_STS_LEN_32:
    case DWT_STS_LEN_64:
    case DWT_STS_LEN_128:
    default:
        break;
 800176a:	bf00      	nop
    }

    dwt_setrxtimeout(delay_time);
 800176c:	68f8      	ldr	r0, [r7, #12]
 800176e:	f011 f8f9 	bl	8012964 <dwt_setrxtimeout>
}
 8001772:	bf00      	nop
 8001774:	3714      	adds	r7, #20
 8001776:	46bd      	mov	sp, r7
 8001778:	bd90      	pop	{r4, r7, pc}

0800177a <resp_msg_get_ts>:
 *         ts  timestamp value
 *
 * @return none
 */
void resp_msg_get_ts(uint8_t *ts_field, uint32_t *ts)
{
 800177a:	b480      	push	{r7}
 800177c:	b085      	sub	sp, #20
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
 8001782:	6039      	str	r1, [r7, #0]
    int i;
    *ts = 0;
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
    for (i = 0; i < RESP_MSG_TS_LEN; i++)
 800178a:	2300      	movs	r3, #0
 800178c:	60fb      	str	r3, [r7, #12]
 800178e:	e010      	b.n	80017b2 <resp_msg_get_ts+0x38>
    {
        *ts += (uint32_t)ts_field[i] << (i * 8);
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	6879      	ldr	r1, [r7, #4]
 8001798:	440b      	add	r3, r1
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	4619      	mov	r1, r3
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	00db      	lsls	r3, r3, #3
 80017a2:	fa01 f303 	lsl.w	r3, r1, r3
 80017a6:	441a      	add	r2, r3
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	601a      	str	r2, [r3, #0]
    for (i = 0; i < RESP_MSG_TS_LEN; i++)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	3301      	adds	r3, #1
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2b03      	cmp	r3, #3
 80017b6:	ddeb      	ble.n	8001790 <resp_msg_get_ts+0x16>
    }
}
 80017b8:	bf00      	nop
 80017ba:	bf00      	nop
 80017bc:	3714      	adds	r7, #20
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr

080017c4 <get_tx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
uint64_t get_tx_timestamp_u64(void)
{
 80017c4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80017c8:	b084      	sub	sp, #16
 80017ca:	af00      	add	r7, sp, #0
    uint8_t ts_tab[5];
    uint64_t ts = 0;
 80017cc:	f04f 0200 	mov.w	r2, #0
 80017d0:	f04f 0300 	mov.w	r3, #0
 80017d4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    int8_t i;
    dwt_readtxtimestamp(ts_tab);
 80017d8:	463b      	mov	r3, r7
 80017da:	4618      	mov	r0, r3
 80017dc:	f010 ffa4 	bl	8012728 <dwt_readtxtimestamp>
    for (i = 4; i >= 0; i--)
 80017e0:	2304      	movs	r3, #4
 80017e2:	71fb      	strb	r3, [r7, #7]
 80017e4:	e023      	b.n	800182e <get_tx_timestamp_u64+0x6a>
    {
        ts <<= 8;
 80017e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80017ea:	f04f 0200 	mov.w	r2, #0
 80017ee:	f04f 0300 	mov.w	r3, #0
 80017f2:	020b      	lsls	r3, r1, #8
 80017f4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80017f8:	0202      	lsls	r2, r0, #8
 80017fa:	e9c7 2302 	strd	r2, r3, [r7, #8]
        ts |= ts_tab[i];
 80017fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001802:	3310      	adds	r3, #16
 8001804:	443b      	add	r3, r7
 8001806:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800180a:	b2db      	uxtb	r3, r3
 800180c:	2200      	movs	r2, #0
 800180e:	461c      	mov	r4, r3
 8001810:	4615      	mov	r5, r2
 8001812:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001816:	ea42 0804 	orr.w	r8, r2, r4
 800181a:	ea43 0905 	orr.w	r9, r3, r5
 800181e:	e9c7 8902 	strd	r8, r9, [r7, #8]
    for (i = 4; i >= 0; i--)
 8001822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001826:	b2db      	uxtb	r3, r3
 8001828:	3b01      	subs	r3, #1
 800182a:	b2db      	uxtb	r3, r3
 800182c:	71fb      	strb	r3, [r7, #7]
 800182e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001832:	2b00      	cmp	r3, #0
 8001834:	dad7      	bge.n	80017e6 <get_tx_timestamp_u64+0x22>
    }
    return ts;
 8001836:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 800183a:	4610      	mov	r0, r2
 800183c:	4619      	mov	r1, r3
 800183e:	3710      	adds	r7, #16
 8001840:	46bd      	mov	sp, r7
 8001842:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001846 <get_rx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
uint64_t get_rx_timestamp_u64(void)
{
 8001846:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
    uint8_t ts_tab[5];
    uint64_t ts = 0;
 800184e:	f04f 0200 	mov.w	r2, #0
 8001852:	f04f 0300 	mov.w	r3, #0
 8001856:	e9c7 2302 	strd	r2, r3, [r7, #8]
    int8_t i;
    dwt_readrxtimestamp(ts_tab);
 800185a:	463b      	mov	r3, r7
 800185c:	4618      	mov	r0, r3
 800185e:	f010 ffb7 	bl	80127d0 <dwt_readrxtimestamp>
    for (i = 4; i >= 0; i--)
 8001862:	2304      	movs	r3, #4
 8001864:	71fb      	strb	r3, [r7, #7]
 8001866:	e023      	b.n	80018b0 <get_rx_timestamp_u64+0x6a>
    {
        ts <<= 8;
 8001868:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800186c:	f04f 0200 	mov.w	r2, #0
 8001870:	f04f 0300 	mov.w	r3, #0
 8001874:	020b      	lsls	r3, r1, #8
 8001876:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800187a:	0202      	lsls	r2, r0, #8
 800187c:	e9c7 2302 	strd	r2, r3, [r7, #8]
        ts |= ts_tab[i];
 8001880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001884:	3310      	adds	r3, #16
 8001886:	443b      	add	r3, r7
 8001888:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800188c:	b2db      	uxtb	r3, r3
 800188e:	2200      	movs	r2, #0
 8001890:	461c      	mov	r4, r3
 8001892:	4615      	mov	r5, r2
 8001894:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001898:	ea42 0804 	orr.w	r8, r2, r4
 800189c:	ea43 0905 	orr.w	r9, r3, r5
 80018a0:	e9c7 8902 	strd	r8, r9, [r7, #8]
    for (i = 4; i >= 0; i--)
 80018a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	3b01      	subs	r3, #1
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	71fb      	strb	r3, [r7, #7]
 80018b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	dad7      	bge.n	8001868 <get_rx_timestamp_u64+0x22>
    }
    return ts;
 80018b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 80018bc:	4610      	mov	r0, r2
 80018be:	4619      	mov	r1, r3
 80018c0:	3710      	adds	r7, #16
 80018c2:	46bd      	mov	sp, r7
 80018c4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080018c8 <final_msg_get_ts>:
 *         ts  timestamp value
 *
 * @return none
 */
void final_msg_get_ts(const uint8_t *ts_field, uint32_t *ts)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
    uint8_t i;
    *ts = 0;
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 80018d8:	2300      	movs	r3, #0
 80018da:	73fb      	strb	r3, [r7, #15]
 80018dc:	e010      	b.n	8001900 <final_msg_get_ts+0x38>
    {
        *ts += ((uint32_t)ts_field[i] << (i * 8));
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	7bfb      	ldrb	r3, [r7, #15]
 80018e4:	6879      	ldr	r1, [r7, #4]
 80018e6:	440b      	add	r3, r1
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	4619      	mov	r1, r3
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	fa01 f303 	lsl.w	r3, r1, r3
 80018f4:	441a      	add	r2, r3
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	601a      	str	r2, [r3, #0]
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 80018fa:	7bfb      	ldrb	r3, [r7, #15]
 80018fc:	3301      	adds	r3, #1
 80018fe:	73fb      	strb	r3, [r7, #15]
 8001900:	7bfb      	ldrb	r3, [r7, #15]
 8001902:	2b03      	cmp	r3, #3
 8001904:	d9eb      	bls.n	80018de <final_msg_get_ts+0x16>
    }
}
 8001906:	bf00      	nop
 8001908:	bf00      	nop
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	bc80      	pop	{r7}
 8001910:	4770      	bx	lr

08001912 <final_msg_set_ts>:
 *         ts  timestamp value
 *
 * @return none
 */
void final_msg_set_ts(uint8_t *ts_field, uint64_t ts)
{
 8001912:	b480      	push	{r7}
 8001914:	b087      	sub	sp, #28
 8001916:	af00      	add	r7, sp, #0
 8001918:	60f8      	str	r0, [r7, #12]
 800191a:	e9c7 2300 	strd	r2, r3, [r7]
    uint8_t i;
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 800191e:	2300      	movs	r3, #0
 8001920:	75fb      	strb	r3, [r7, #23]
 8001922:	e013      	b.n	800194c <final_msg_set_ts+0x3a>
    {
        ts_field[i] = (uint8_t)ts;
 8001924:	7dfb      	ldrb	r3, [r7, #23]
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	4413      	add	r3, r2
 800192a:	783a      	ldrb	r2, [r7, #0]
 800192c:	701a      	strb	r2, [r3, #0]
        ts >>= 8;
 800192e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001932:	f04f 0200 	mov.w	r2, #0
 8001936:	f04f 0300 	mov.w	r3, #0
 800193a:	0a02      	lsrs	r2, r0, #8
 800193c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001940:	0a0b      	lsrs	r3, r1, #8
 8001942:	e9c7 2300 	strd	r2, r3, [r7]
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 8001946:	7dfb      	ldrb	r3, [r7, #23]
 8001948:	3301      	adds	r3, #1
 800194a:	75fb      	strb	r3, [r7, #23]
 800194c:	7dfb      	ldrb	r3, [r7, #23]
 800194e:	2b03      	cmp	r3, #3
 8001950:	d9e8      	bls.n	8001924 <final_msg_set_ts+0x12>
    }
}
 8001952:	bf00      	nop
 8001954:	bf00      	nop
 8001956:	371c      	adds	r7, #28
 8001958:	46bd      	mov	sp, r7
 800195a:	bc80      	pop	{r7}
 800195c:	4770      	bx	lr

0800195e <resp_msg_set_ts>:
 *         ts  timestamp value
 *
 * @return none
 */
void resp_msg_set_ts(uint8_t *ts_field, const uint64_t ts)
{
 800195e:	b4f0      	push	{r4, r5, r6, r7}
 8001960:	b086      	sub	sp, #24
 8001962:	af00      	add	r7, sp, #0
 8001964:	60f8      	str	r0, [r7, #12]
 8001966:	e9c7 2300 	strd	r2, r3, [r7]
    uint8_t i;
    for (i = 0; i < RESP_MSG_TS_LEN; i++)
 800196a:	2300      	movs	r3, #0
 800196c:	75fb      	strb	r3, [r7, #23]
 800196e:	e019      	b.n	80019a4 <resp_msg_set_ts+0x46>
    {
        ts_field[i] = (uint8_t)(ts >> (i * 8));
 8001970:	7dfb      	ldrb	r3, [r7, #23]
 8001972:	00d9      	lsls	r1, r3, #3
 8001974:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001978:	f1c1 0620 	rsb	r6, r1, #32
 800197c:	f1a1 0020 	sub.w	r0, r1, #32
 8001980:	fa22 f401 	lsr.w	r4, r2, r1
 8001984:	fa03 f606 	lsl.w	r6, r3, r6
 8001988:	4334      	orrs	r4, r6
 800198a:	fa23 f000 	lsr.w	r0, r3, r0
 800198e:	4304      	orrs	r4, r0
 8001990:	fa23 f501 	lsr.w	r5, r3, r1
 8001994:	7dfb      	ldrb	r3, [r7, #23]
 8001996:	68fa      	ldr	r2, [r7, #12]
 8001998:	4413      	add	r3, r2
 800199a:	b2e2      	uxtb	r2, r4
 800199c:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < RESP_MSG_TS_LEN; i++)
 800199e:	7dfb      	ldrb	r3, [r7, #23]
 80019a0:	3301      	adds	r3, #1
 80019a2:	75fb      	strb	r3, [r7, #23]
 80019a4:	7dfb      	ldrb	r3, [r7, #23]
 80019a6:	2b03      	cmp	r3, #3
 80019a8:	d9e2      	bls.n	8001970 <resp_msg_set_ts+0x12>
    }
}
 80019aa:	bf00      	nop
 80019ac:	bf00      	nop
 80019ae:	3718      	adds	r7, #24
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bcf0      	pop	{r4, r5, r6, r7}
 80019b4:	4770      	bx	lr

080019b6 <waitforsysstatus>:
 *               0 - The function will not wait for any bits in the system status register (lower 32 bits).
 *
 * return None
 */
void waitforsysstatus(uint32_t *lo_result, uint32_t *hi_result, uint32_t lo_mask, uint32_t hi_mask)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b086      	sub	sp, #24
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	60f8      	str	r0, [r7, #12]
 80019be:	60b9      	str	r1, [r7, #8]
 80019c0:	607a      	str	r2, [r7, #4]
 80019c2:	603b      	str	r3, [r7, #0]
    uint32_t lo_result_tmp = 0;
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]
    uint32_t hi_result_tmp = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	613b      	str	r3, [r7, #16]

    // If a mask has been passed into the function for the system status register (lower 32-bits)
    if (lo_mask)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d014      	beq.n	80019fc <waitforsysstatus+0x46>
    {
        while (!((lo_result_tmp = dwt_readsysstatuslo()) & (lo_mask)))
 80019d2:	e00a      	b.n	80019ea <waitforsysstatus+0x34>
        {
            // If a mask value is set for the system status register (higher 32-bits)
            if (hi_mask)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d007      	beq.n	80019ea <waitforsysstatus+0x34>
            {
                // If mask value for the system status register (higher 32-bits) is found
                if ((hi_result_tmp = dwt_readsysstatushi()) & hi_mask)
 80019da:	f011 fd01 	bl	80133e0 <dwt_readsysstatushi>
 80019de:	6138      	str	r0, [r7, #16]
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	4013      	ands	r3, r2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d115      	bne.n	8001a16 <waitforsysstatus+0x60>
        while (!((lo_result_tmp = dwt_readsysstatuslo()) & (lo_mask)))
 80019ea:	f011 fce7 	bl	80133bc <dwt_readsysstatuslo>
 80019ee:	6178      	str	r0, [r7, #20]
 80019f0:	697a      	ldr	r2, [r7, #20]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4013      	ands	r3, r2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d0ec      	beq.n	80019d4 <waitforsysstatus+0x1e>
 80019fa:	e00d      	b.n	8001a18 <waitforsysstatus+0x62>
                }
            }
        }
    }
    // if only a mask value for the system status register (higher 32-bits) is set
    else if (hi_mask)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d00a      	beq.n	8001a18 <waitforsysstatus+0x62>
    {
        while (!((hi_result_tmp = dwt_readsysstatushi()) & (hi_mask))) { };
 8001a02:	bf00      	nop
 8001a04:	f011 fcec 	bl	80133e0 <dwt_readsysstatushi>
 8001a08:	6138      	str	r0, [r7, #16]
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d0f7      	beq.n	8001a04 <waitforsysstatus+0x4e>
 8001a14:	e000      	b.n	8001a18 <waitforsysstatus+0x62>
                    break;
 8001a16:	bf00      	nop
    }

    if (lo_result != NULL)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d002      	beq.n	8001a24 <waitforsysstatus+0x6e>
    {
        *lo_result = lo_result_tmp;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	697a      	ldr	r2, [r7, #20]
 8001a22:	601a      	str	r2, [r3, #0]
    }

    if (hi_result != NULL)
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d002      	beq.n	8001a30 <waitforsysstatus+0x7a>
    {
        *hi_result = hi_result_tmp;
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	601a      	str	r2, [r3, #0]
    }
}
 8001a30:	bf00      	nop
 8001a32:	3718      	adds	r7, #24
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08a      	sub	sp, #40	; 0x28
 8001a3c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3e:	f107 0314 	add.w	r3, r7, #20
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	605a      	str	r2, [r3, #4]
 8001a48:	609a      	str	r2, [r3, #8]
 8001a4a:	60da      	str	r2, [r3, #12]
 8001a4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a4e:	4b2d      	ldr	r3, [pc, #180]	; (8001b04 <MX_GPIO_Init+0xcc>)
 8001a50:	69db      	ldr	r3, [r3, #28]
 8001a52:	4a2c      	ldr	r2, [pc, #176]	; (8001b04 <MX_GPIO_Init+0xcc>)
 8001a54:	f043 0304 	orr.w	r3, r3, #4
 8001a58:	61d3      	str	r3, [r2, #28]
 8001a5a:	4b2a      	ldr	r3, [pc, #168]	; (8001b04 <MX_GPIO_Init+0xcc>)
 8001a5c:	69db      	ldr	r3, [r3, #28]
 8001a5e:	f003 0304 	and.w	r3, r3, #4
 8001a62:	613b      	str	r3, [r7, #16]
 8001a64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a66:	4b27      	ldr	r3, [pc, #156]	; (8001b04 <MX_GPIO_Init+0xcc>)
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	4a26      	ldr	r2, [pc, #152]	; (8001b04 <MX_GPIO_Init+0xcc>)
 8001a6c:	f043 0320 	orr.w	r3, r3, #32
 8001a70:	61d3      	str	r3, [r2, #28]
 8001a72:	4b24      	ldr	r3, [pc, #144]	; (8001b04 <MX_GPIO_Init+0xcc>)
 8001a74:	69db      	ldr	r3, [r3, #28]
 8001a76:	f003 0320 	and.w	r3, r3, #32
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7e:	4b21      	ldr	r3, [pc, #132]	; (8001b04 <MX_GPIO_Init+0xcc>)
 8001a80:	69db      	ldr	r3, [r3, #28]
 8001a82:	4a20      	ldr	r2, [pc, #128]	; (8001b04 <MX_GPIO_Init+0xcc>)
 8001a84:	f043 0301 	orr.w	r3, r3, #1
 8001a88:	61d3      	str	r3, [r2, #28]
 8001a8a:	4b1e      	ldr	r3, [pc, #120]	; (8001b04 <MX_GPIO_Init+0xcc>)
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	60bb      	str	r3, [r7, #8]
 8001a94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a96:	4b1b      	ldr	r3, [pc, #108]	; (8001b04 <MX_GPIO_Init+0xcc>)
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	4a1a      	ldr	r2, [pc, #104]	; (8001b04 <MX_GPIO_Init+0xcc>)
 8001a9c:	f043 0302 	orr.w	r3, r3, #2
 8001aa0:	61d3      	str	r3, [r2, #28]
 8001aa2:	4b18      	ldr	r3, [pc, #96]	; (8001b04 <MX_GPIO_Init+0xcc>)
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	607b      	str	r3, [r7, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DW_RST_Pin|DW_IRQ_Pin, GPIO_PIN_RESET);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2103      	movs	r1, #3
 8001ab2:	4815      	ldr	r0, [pc, #84]	; (8001b08 <MX_GPIO_Init+0xd0>)
 8001ab4:	f003 fc03 	bl	80052be <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET);
 8001ab8:	2200      	movs	r2, #0
 8001aba:	2110      	movs	r1, #16
 8001abc:	4813      	ldr	r0, [pc, #76]	; (8001b0c <MX_GPIO_Init+0xd4>)
 8001abe:	f003 fbfe 	bl	80052be <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DW_RST_Pin|DW_IRQ_Pin;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad2:	f107 0314 	add.w	r3, r7, #20
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	480b      	ldr	r0, [pc, #44]	; (8001b08 <MX_GPIO_Init+0xd0>)
 8001ada:	f003 f959 	bl	8004d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DW_CS_Pin;
 8001ade:	2310      	movs	r3, #16
 8001ae0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aea:	2300      	movs	r3, #0
 8001aec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DW_CS_GPIO_Port, &GPIO_InitStruct);
 8001aee:	f107 0314 	add.w	r3, r7, #20
 8001af2:	4619      	mov	r1, r3
 8001af4:	4805      	ldr	r0, [pc, #20]	; (8001b0c <MX_GPIO_Init+0xd4>)
 8001af6:	f003 f94b 	bl	8004d90 <HAL_GPIO_Init>

}
 8001afa:	bf00      	nop
 8001afc:	3728      	adds	r7, #40	; 0x28
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40023800 	.word	0x40023800
 8001b08:	40020000 	.word	0x40020000
 8001b0c:	40020800 	.word	0x40020800

08001b10 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b14:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <MX_I2C1_Init+0x50>)
 8001b16:	4a13      	ldr	r2, [pc, #76]	; (8001b64 <MX_I2C1_Init+0x54>)
 8001b18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001b1a:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <MX_I2C1_Init+0x50>)
 8001b1c:	4a12      	ldr	r2, [pc, #72]	; (8001b68 <MX_I2C1_Init+0x58>)
 8001b1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b20:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <MX_I2C1_Init+0x50>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b26:	4b0e      	ldr	r3, [pc, #56]	; (8001b60 <MX_I2C1_Init+0x50>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b2c:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <MX_I2C1_Init+0x50>)
 8001b2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b32:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b34:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <MX_I2C1_Init+0x50>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b3a:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <MX_I2C1_Init+0x50>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b40:	4b07      	ldr	r3, [pc, #28]	; (8001b60 <MX_I2C1_Init+0x50>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b46:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <MX_I2C1_Init+0x50>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b4c:	4804      	ldr	r0, [pc, #16]	; (8001b60 <MX_I2C1_Init+0x50>)
 8001b4e:	f003 fc31 	bl	80053b4 <HAL_I2C_Init>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b58:	f000 f8d8 	bl	8001d0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b5c:	bf00      	nop
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	20000644 	.word	0x20000644
 8001b64:	40005400 	.word	0x40005400
 8001b68:	00061a80 	.word	0x00061a80

08001b6c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b08a      	sub	sp, #40	; 0x28
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b74:	f107 0314 	add.w	r3, r7, #20
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
 8001b80:	60da      	str	r2, [r3, #12]
 8001b82:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a17      	ldr	r2, [pc, #92]	; (8001be8 <HAL_I2C_MspInit+0x7c>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d128      	bne.n	8001be0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b8e:	4b17      	ldr	r3, [pc, #92]	; (8001bec <HAL_I2C_MspInit+0x80>)
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	4a16      	ldr	r2, [pc, #88]	; (8001bec <HAL_I2C_MspInit+0x80>)
 8001b94:	f043 0302 	orr.w	r3, r3, #2
 8001b98:	61d3      	str	r3, [r2, #28]
 8001b9a:	4b14      	ldr	r3, [pc, #80]	; (8001bec <HAL_I2C_MspInit+0x80>)
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	613b      	str	r3, [r7, #16]
 8001ba4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ba6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001baa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bac:	2312      	movs	r3, #18
 8001bae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bb8:	2304      	movs	r3, #4
 8001bba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bbc:	f107 0314 	add.w	r3, r7, #20
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	480b      	ldr	r0, [pc, #44]	; (8001bf0 <HAL_I2C_MspInit+0x84>)
 8001bc4:	f003 f8e4 	bl	8004d90 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bc8:	4b08      	ldr	r3, [pc, #32]	; (8001bec <HAL_I2C_MspInit+0x80>)
 8001bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bcc:	4a07      	ldr	r2, [pc, #28]	; (8001bec <HAL_I2C_MspInit+0x80>)
 8001bce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bd2:	6253      	str	r3, [r2, #36]	; 0x24
 8001bd4:	4b05      	ldr	r3, [pc, #20]	; (8001bec <HAL_I2C_MspInit+0x80>)
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001be0:	bf00      	nop
 8001be2:	3728      	adds	r7, #40	; 0x28
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40005400 	.word	0x40005400
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	40020400 	.word	0x40020400

08001bf4 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a0b      	ldr	r2, [pc, #44]	; (8001c30 <HAL_I2C_MspDeInit+0x3c>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d10f      	bne.n	8001c26 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001c06:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <HAL_I2C_MspDeInit+0x40>)
 8001c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0a:	4a0a      	ldr	r2, [pc, #40]	; (8001c34 <HAL_I2C_MspDeInit+0x40>)
 8001c0c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c10:	6253      	str	r3, [r2, #36]	; 0x24

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8001c12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c16:	4808      	ldr	r0, [pc, #32]	; (8001c38 <HAL_I2C_MspDeInit+0x44>)
 8001c18:	f003 fa4a 	bl	80050b0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8001c1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c20:	4805      	ldr	r0, [pc, #20]	; (8001c38 <HAL_I2C_MspDeInit+0x44>)
 8001c22:	f003 fa45 	bl	80050b0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40005400 	.word	0x40005400
 8001c34:	40023800 	.word	0x40023800
 8001c38:	40020400 	.word	0x40020400

08001c3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c40:	f000 fc79 	bl	8002536 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c44:	f000 f814 	bl	8001c70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c48:	f7ff fef6 	bl	8001a38 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001c4c:	f000 fbb8 	bl	80023c0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001c50:	f7ff ff5e 	bl	8001b10 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001c54:	f000 f8d2 	bl	8001dfc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  port_DisableEXT_IRQ();
 8001c58:	f7ff faf0 	bl	800123c <port_DisableEXT_IRQ>
  Sleep(5000);
 8001c5c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001c60:	f7ff f943 	bl	8000eea <Sleep>
  setup_DWICRSTnIRQ(0);
 8001c64:	2000      	movs	r0, #0
 8001c66:	f7ff f99b 	bl	8000fa0 <setup_DWICRSTnIRQ>
  simple_tx();
 8001c6a:	f000 f855 	bl	8001d18 <simple_tx>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001c6e:	e7fe      	b.n	8001c6e <main+0x32>

08001c70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b092      	sub	sp, #72	; 0x48
 8001c74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c76:	f107 0314 	add.w	r3, r7, #20
 8001c7a:	2234      	movs	r2, #52	; 0x34
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f01e ffa2 	bl	8020bc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c84:	463b      	mov	r3, r7
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	605a      	str	r2, [r3, #4]
 8001c8c:	609a      	str	r2, [r3, #8]
 8001c8e:	60da      	str	r2, [r3, #12]
 8001c90:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c92:	4b1d      	ldr	r3, [pc, #116]	; (8001d08 <SystemClock_Config+0x98>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8001c9a:	4a1b      	ldr	r2, [pc, #108]	; (8001d08 <SystemClock_Config+0x98>)
 8001c9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ca0:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001caa:	2310      	movs	r3, #16
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001cb6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001cba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001cbc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001cc0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cc2:	f107 0314 	add.w	r3, r7, #20
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f00a f844 	bl	800bd54 <HAL_RCC_OscConfig>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001cd2:	f000 f81b 	bl	8001d0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cd6:	230f      	movs	r3, #15
 8001cd8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001cea:	463b      	mov	r3, r7
 8001cec:	2101      	movs	r1, #1
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f00a fb60 	bl	800c3b4 <HAL_RCC_ClockConfig>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001cfa:	f000 f807 	bl	8001d0c <Error_Handler>
  }
}
 8001cfe:	bf00      	nop
 8001d00:	3748      	adds	r7, #72	; 0x48
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40007000 	.word	0x40007000

08001d0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001d10:	b672      	cpsid	i
}
 8001d12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d14:	e7fe      	b.n	8001d14 <Error_Handler+0x8>
	...

08001d18 <simple_tx>:

/**
 * Application entry point.
 */
int simple_tx(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0

    /* Display application name on LCD. */
//    test_run_info((unsigned char *)APP_NAME);

    /* Configure SPI rate, DW3000 supports up to 36 MHz */
    port_set_dw_ic_spi_fastrate();
 8001d1e:	f7ff fa39 	bl	8001194 <port_set_dw_ic_spi_fastrate>

    /* Reset DW IC */
    reset_DWIC(); /* Target specific drive of RSTn line into DW IC low for a period. */
 8001d22:	f7ff f91b 	bl	8000f5c <reset_DWIC>

    Sleep(2); // Time needed for DW3000 to start up (transition from INIT_RC to IDLE_RC, or could wait for SPIRDY event)
 8001d26:	2002      	movs	r0, #2
 8001d28:	f7ff f8df 	bl	8000eea <Sleep>

    /* Probe for the correct device driver. */
    dwt_probe((struct dwt_probe_s *)&dw3000_probe_interf);
 8001d2c:	482b      	ldr	r0, [pc, #172]	; (8001ddc <simple_tx+0xc4>)
 8001d2e:	f010 fa5f 	bl	80121f0 <dwt_probe>

    dev_id = dwt_readdevid();
 8001d32:	f010 fb11 	bl	8012358 <dwt_readdevid>
 8001d36:	6078      	str	r0, [r7, #4]

    while (!dwt_checkidlerc()) /* Need to make sure DW IC is in IDLE_RC before proceeding */ { };
 8001d38:	bf00      	nop
 8001d3a:	f010 fecf 	bl	8012adc <dwt_checkidlerc>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d0fa      	beq.n	8001d3a <simple_tx+0x22>

    if (dwt_initialise(DWT_DW_INIT) == DWT_ERROR)
 8001d44:	2000      	movs	r0, #0
 8001d46:	f010 fb93 	bl	8012470 <dwt_initialise>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d50:	d107      	bne.n	8001d62 <simple_tx+0x4a>
    {
//        test_run_info((unsigned char *)"INIT FAILED     ");
    	HAL_UART_Transmit(&huart2, "Init Failed!!!", 15, HAL_MAX_DELAY);
 8001d52:	f04f 33ff 	mov.w	r3, #4294967295
 8001d56:	220f      	movs	r2, #15
 8001d58:	4921      	ldr	r1, [pc, #132]	; (8001de0 <simple_tx+0xc8>)
 8001d5a:	4822      	ldr	r0, [pc, #136]	; (8001de4 <simple_tx+0xcc>)
 8001d5c:	f00d fd7b 	bl	800f856 <HAL_UART_Transmit>
        while (1) { };
 8001d60:	e7fe      	b.n	8001d60 <simple_tx+0x48>
    }

    /* Enabling LEDs here for debug so that for each TX the D1 LED will flash on DW3000 red eval-shield boards. */
    dwt_setleds(DWT_LEDS_ENABLE | DWT_LEDS_INIT_BLINK);
 8001d62:	2003      	movs	r0, #3
 8001d64:	f011 f8ba 	bl	8012edc <dwt_setleds>

    /* Configure DW IC. See NOTE 5 below. */
    /* if the dwt_configure returns DWT_ERROR either the PLL or RX calibration has failed the host should reset the device */
    if (dwt_configure(&config))
 8001d68:	481f      	ldr	r0, [pc, #124]	; (8001de8 <simple_tx+0xd0>)
 8001d6a:	f010 fbc9 	bl	8012500 <dwt_configure>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d007      	beq.n	8001d84 <simple_tx+0x6c>
    {
//        test_run_info((unsigned char *)"CONFIG FAILED     ");
        HAL_UART_Transmit(&huart2, "Config Failed!!!", 16, HAL_MAX_DELAY);
 8001d74:	f04f 33ff 	mov.w	r3, #4294967295
 8001d78:	2210      	movs	r2, #16
 8001d7a:	491c      	ldr	r1, [pc, #112]	; (8001dec <simple_tx+0xd4>)
 8001d7c:	4819      	ldr	r0, [pc, #100]	; (8001de4 <simple_tx+0xcc>)
 8001d7e:	f00d fd6a 	bl	800f856 <HAL_UART_Transmit>
        while (1) { };
 8001d82:	e7fe      	b.n	8001d82 <simple_tx+0x6a>
    }

    /* Configure the TX spectrum parameters (power PG delay and PG Count) */
    dwt_configuretxrf(&txconfig_options);
 8001d84:	481a      	ldr	r0, [pc, #104]	; (8001df0 <simple_tx+0xd8>)
 8001d86:	f010 fbc7 	bl	8012518 <dwt_configuretxrf>

    /* Loop forever sending frames periodically. */
    while (1)
    {
        /* Write frame data to DW IC and prepare transmission. See NOTE 3 below.*/
        dwt_writetxdata(FRAME_LENGTH - FCS_LEN, tx_msg, 0); /* Zero offset in TX buffer. */
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	4919      	ldr	r1, [pc, #100]	; (8001df4 <simple_tx+0xdc>)
 8001d8e:	200a      	movs	r0, #10
 8001d90:	f010 fc52 	bl	8012638 <dwt_writetxdata>

        /* In this example since the length of the transmitted frame does not change,
         * nor the other parameters of the dwt_writetxfctrl function, the
         * dwt_writetxfctrl call could be outside the main while(1) loop.
         */
        dwt_writetxfctrl(FRAME_LENGTH, 0, 0); /* Zero offset in TX buffer, no ranging. */
 8001d94:	2200      	movs	r2, #0
 8001d96:	2100      	movs	r1, #0
 8001d98:	200c      	movs	r0, #12
 8001d9a:	f010 fc5b 	bl	8012654 <dwt_writetxfctrl>

        /* Start transmission. */
        dwt_starttx(DWT_START_TX_IMMEDIATE);
 8001d9e:	2000      	movs	r0, #0
 8001da0:	f010 fc78 	bl	8012694 <dwt_starttx>
        /* Poll DW IC until TX frame sent event set. See NOTE 4 below.
         * STATUS register is 4 bytes long but, as the event we are looking
         * at is in the first byte of the register, we can use this simplest
         * API function to access it.*/
        waitforsysstatus(NULL, NULL, DWT_INT_TXFRS_BIT_MASK, 0);
 8001da4:	2300      	movs	r3, #0
 8001da6:	2280      	movs	r2, #128	; 0x80
 8001da8:	2100      	movs	r1, #0
 8001daa:	2000      	movs	r0, #0
 8001dac:	f7ff fe03 	bl	80019b6 <waitforsysstatus>

        /* Clear TX frame sent event. */
        dwt_writesysstatuslo(DWT_INT_TXFRS_BIT_MASK);
 8001db0:	2080      	movs	r0, #128	; 0x80
 8001db2:	f011 fadf 	bl	8013374 <dwt_writesysstatuslo>

//        test_run_info((unsigned char *)"TX Frame Sent");
        HAL_UART_Transmit(&huart2, "TX Frame Sent😊", 15, HAL_MAX_DELAY);
 8001db6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dba:	220f      	movs	r2, #15
 8001dbc:	490e      	ldr	r1, [pc, #56]	; (8001df8 <simple_tx+0xe0>)
 8001dbe:	4809      	ldr	r0, [pc, #36]	; (8001de4 <simple_tx+0xcc>)
 8001dc0:	f00d fd49 	bl	800f856 <HAL_UART_Transmit>

        /* Execute a delay between transmissions. */
        Sleep(TX_DELAY_MS);
 8001dc4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001dc8:	f7ff f88f 	bl	8000eea <Sleep>

        /* Increment the blink frame sequence number (modulo 256). */
        tx_msg[BLINK_FRAME_SN_IDX]++;
 8001dcc:	4b09      	ldr	r3, [pc, #36]	; (8001df4 <simple_tx+0xdc>)
 8001dce:	785b      	ldrb	r3, [r3, #1]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	b2da      	uxtb	r2, r3
 8001dd4:	4b07      	ldr	r3, [pc, #28]	; (8001df4 <simple_tx+0xdc>)
 8001dd6:	705a      	strb	r2, [r3, #1]
        dwt_writetxdata(FRAME_LENGTH - FCS_LEN, tx_msg, 0); /* Zero offset in TX buffer. */
 8001dd8:	e7d7      	b.n	8001d8a <simple_tx+0x72>
 8001dda:	bf00      	nop
 8001ddc:	08020fb8 	.word	0x08020fb8
 8001de0:	08020f48 	.word	0x08020f48
 8001de4:	200006fc 	.word	0x200006fc
 8001de8:	2000004c 	.word	0x2000004c
 8001dec:	08020f58 	.word	0x08020f58
 8001df0:	20000004 	.word	0x20000004
 8001df4:	2000005c 	.word	0x2000005c
 8001df8:	08020f6c 	.word	0x08020f6c

08001dfc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001e00:	4b17      	ldr	r3, [pc, #92]	; (8001e60 <MX_SPI1_Init+0x64>)
 8001e02:	4a18      	ldr	r2, [pc, #96]	; (8001e64 <MX_SPI1_Init+0x68>)
 8001e04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e06:	4b16      	ldr	r3, [pc, #88]	; (8001e60 <MX_SPI1_Init+0x64>)
 8001e08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e0c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e0e:	4b14      	ldr	r3, [pc, #80]	; (8001e60 <MX_SPI1_Init+0x64>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e14:	4b12      	ldr	r3, [pc, #72]	; (8001e60 <MX_SPI1_Init+0x64>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e1a:	4b11      	ldr	r3, [pc, #68]	; (8001e60 <MX_SPI1_Init+0x64>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e20:	4b0f      	ldr	r3, [pc, #60]	; (8001e60 <MX_SPI1_Init+0x64>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e26:	4b0e      	ldr	r3, [pc, #56]	; (8001e60 <MX_SPI1_Init+0x64>)
 8001e28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e2c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e2e:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <MX_SPI1_Init+0x64>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e34:	4b0a      	ldr	r3, [pc, #40]	; (8001e60 <MX_SPI1_Init+0x64>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e3a:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <MX_SPI1_Init+0x64>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e40:	4b07      	ldr	r3, [pc, #28]	; (8001e60 <MX_SPI1_Init+0x64>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001e46:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <MX_SPI1_Init+0x64>)
 8001e48:	220a      	movs	r2, #10
 8001e4a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e4c:	4804      	ldr	r0, [pc, #16]	; (8001e60 <MX_SPI1_Init+0x64>)
 8001e4e:	f00b f86b 	bl	800cf28 <HAL_SPI_Init>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001e58:	f7ff ff58 	bl	8001d0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e5c:	bf00      	nop
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	2000069c 	.word	0x2000069c
 8001e64:	40013000 	.word	0x40013000

08001e68 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b08a      	sub	sp, #40	; 0x28
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e70:	f107 0314 	add.w	r3, r7, #20
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	609a      	str	r2, [r3, #8]
 8001e7c:	60da      	str	r2, [r3, #12]
 8001e7e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a17      	ldr	r2, [pc, #92]	; (8001ee4 <HAL_SPI_MspInit+0x7c>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d127      	bne.n	8001eda <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e8a:	4b17      	ldr	r3, [pc, #92]	; (8001ee8 <HAL_SPI_MspInit+0x80>)
 8001e8c:	6a1b      	ldr	r3, [r3, #32]
 8001e8e:	4a16      	ldr	r2, [pc, #88]	; (8001ee8 <HAL_SPI_MspInit+0x80>)
 8001e90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e94:	6213      	str	r3, [r2, #32]
 8001e96:	4b14      	ldr	r3, [pc, #80]	; (8001ee8 <HAL_SPI_MspInit+0x80>)
 8001e98:	6a1b      	ldr	r3, [r3, #32]
 8001e9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e9e:	613b      	str	r3, [r7, #16]
 8001ea0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea2:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <HAL_SPI_MspInit+0x80>)
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	4a10      	ldr	r2, [pc, #64]	; (8001ee8 <HAL_SPI_MspInit+0x80>)
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	61d3      	str	r3, [r2, #28]
 8001eae:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <HAL_SPI_MspInit+0x80>)
 8001eb0:	69db      	ldr	r3, [r3, #28]
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001eba:	23e0      	movs	r3, #224	; 0xe0
 8001ebc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001eca:	2305      	movs	r3, #5
 8001ecc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ece:	f107 0314 	add.w	r3, r7, #20
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4805      	ldr	r0, [pc, #20]	; (8001eec <HAL_SPI_MspInit+0x84>)
 8001ed6:	f002 ff5b 	bl	8004d90 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001eda:	bf00      	nop
 8001edc:	3728      	adds	r7, #40	; 0x28
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	40013000 	.word	0x40013000
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	40020000 	.word	0x40020000

08001ef0 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI1)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a08      	ldr	r2, [pc, #32]	; (8001f20 <HAL_SPI_MspDeInit+0x30>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d109      	bne.n	8001f16 <HAL_SPI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8001f02:	4b08      	ldr	r3, [pc, #32]	; (8001f24 <HAL_SPI_MspDeInit+0x34>)
 8001f04:	6a1b      	ldr	r3, [r3, #32]
 8001f06:	4a07      	ldr	r2, [pc, #28]	; (8001f24 <HAL_SPI_MspDeInit+0x34>)
 8001f08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f0c:	6213      	str	r3, [r2, #32]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 8001f0e:	21e0      	movs	r1, #224	; 0xe0
 8001f10:	4805      	ldr	r0, [pc, #20]	; (8001f28 <HAL_SPI_MspDeInit+0x38>)
 8001f12:	f003 f8cd 	bl	80050b0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }
}
 8001f16:	bf00      	nop
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40013000 	.word	0x40013000
 8001f24:	40023800 	.word	0x40023800
 8001f28:	40020000 	.word	0x40020000

08001f2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001f32:	4b15      	ldr	r3, [pc, #84]	; (8001f88 <HAL_MspInit+0x5c>)
 8001f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f36:	4a14      	ldr	r2, [pc, #80]	; (8001f88 <HAL_MspInit+0x5c>)
 8001f38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001f3c:	6253      	str	r3, [r2, #36]	; 0x24
 8001f3e:	4b12      	ldr	r3, [pc, #72]	; (8001f88 <HAL_MspInit+0x5c>)
 8001f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f4a:	4b0f      	ldr	r3, [pc, #60]	; (8001f88 <HAL_MspInit+0x5c>)
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
 8001f4e:	4a0e      	ldr	r2, [pc, #56]	; (8001f88 <HAL_MspInit+0x5c>)
 8001f50:	f043 0301 	orr.w	r3, r3, #1
 8001f54:	6213      	str	r3, [r2, #32]
 8001f56:	4b0c      	ldr	r3, [pc, #48]	; (8001f88 <HAL_MspInit+0x5c>)
 8001f58:	6a1b      	ldr	r3, [r3, #32]
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	60bb      	str	r3, [r7, #8]
 8001f60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f62:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <HAL_MspInit+0x5c>)
 8001f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f66:	4a08      	ldr	r2, [pc, #32]	; (8001f88 <HAL_MspInit+0x5c>)
 8001f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f6c:	6253      	str	r3, [r2, #36]	; 0x24
 8001f6e:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <HAL_MspInit+0x5c>)
 8001f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f76:	607b      	str	r3, [r7, #4]
 8001f78:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f7a:	2007      	movs	r0, #7
 8001f7c:	f000 fe60 	bl	8002c40 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f80:	bf00      	nop
 8001f82:	3710      	adds	r7, #16
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40023800 	.word	0x40023800

08001f8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f90:	e7fe      	b.n	8001f90 <NMI_Handler+0x4>

08001f92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f92:	b480      	push	{r7}
 8001f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f96:	e7fe      	b.n	8001f96 <HardFault_Handler+0x4>

08001f98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f9c:	e7fe      	b.n	8001f9c <MemManage_Handler+0x4>

08001f9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fa2:	e7fe      	b.n	8001fa2 <BusFault_Handler+0x4>

08001fa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fa8:	e7fe      	b.n	8001fa8 <UsageFault_Handler+0x4>

08001faa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001faa:	b480      	push	{r7}
 8001fac:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bc80      	pop	{r7}
 8001fb4:	4770      	bx	lr

08001fb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bc80      	pop	{r7}
 8001fc0:	4770      	bx	lr

08001fc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bc80      	pop	{r7}
 8001fcc:	4770      	bx	lr

08001fce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fd2:	f000 fb2d 	bl	8002630 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	bd80      	pop	{r7, pc}
	...

08001fdc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001fe0:	4802      	ldr	r0, [pc, #8]	; (8001fec <USART2_IRQHandler+0x10>)
 8001fe2:	f00e fdad 	bl	8010b40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	200006fc 	.word	0x200006fc

08001ff0 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bc80      	pop	{r7}
 8001ffa:	4770      	bx	lr

08001ffc <_getpid>:

int _getpid(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  return 1;
 8002000:	2301      	movs	r3, #1
}
 8002002:	4618      	mov	r0, r3
 8002004:	46bd      	mov	sp, r7
 8002006:	bc80      	pop	{r7}
 8002008:	4770      	bx	lr

0800200a <_kill>:

int _kill(int pid, int sig)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b082      	sub	sp, #8
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
 8002012:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002014:	f01e fd8a 	bl	8020b2c <__errno>
 8002018:	4603      	mov	r3, r0
 800201a:	2216      	movs	r2, #22
 800201c:	601a      	str	r2, [r3, #0]
  return -1;
 800201e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002022:	4618      	mov	r0, r3
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <_exit>:

void _exit (int status)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b082      	sub	sp, #8
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002032:	f04f 31ff 	mov.w	r1, #4294967295
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f7ff ffe7 	bl	800200a <_kill>
  while (1) {}    /* Make sure we hang here */
 800203c:	e7fe      	b.n	800203c <_exit+0x12>

0800203e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b086      	sub	sp, #24
 8002042:	af00      	add	r7, sp, #0
 8002044:	60f8      	str	r0, [r7, #12]
 8002046:	60b9      	str	r1, [r7, #8]
 8002048:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800204a:	2300      	movs	r3, #0
 800204c:	617b      	str	r3, [r7, #20]
 800204e:	e00a      	b.n	8002066 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002050:	f3af 8000 	nop.w
 8002054:	4601      	mov	r1, r0
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	1c5a      	adds	r2, r3, #1
 800205a:	60ba      	str	r2, [r7, #8]
 800205c:	b2ca      	uxtb	r2, r1
 800205e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	3301      	adds	r3, #1
 8002064:	617b      	str	r3, [r7, #20]
 8002066:	697a      	ldr	r2, [r7, #20]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	429a      	cmp	r2, r3
 800206c:	dbf0      	blt.n	8002050 <_read+0x12>
  }

  return len;
 800206e:	687b      	ldr	r3, [r7, #4]
}
 8002070:	4618      	mov	r0, r3
 8002072:	3718      	adds	r7, #24
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002084:	2300      	movs	r3, #0
 8002086:	617b      	str	r3, [r7, #20]
 8002088:	e009      	b.n	800209e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	1c5a      	adds	r2, r3, #1
 800208e:	60ba      	str	r2, [r7, #8]
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	3301      	adds	r3, #1
 800209c:	617b      	str	r3, [r7, #20]
 800209e:	697a      	ldr	r2, [r7, #20]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	dbf1      	blt.n	800208a <_write+0x12>
  }
  return len;
 80020a6:	687b      	ldr	r3, [r7, #4]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3718      	adds	r7, #24
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <_close>:

int _close(int file)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020bc:	4618      	mov	r0, r3
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bc80      	pop	{r7}
 80020c4:	4770      	bx	lr

080020c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020c6:	b480      	push	{r7}
 80020c8:	b083      	sub	sp, #12
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
 80020ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020d6:	605a      	str	r2, [r3, #4]
  return 0;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	bc80      	pop	{r7}
 80020e2:	4770      	bx	lr

080020e4 <_isatty>:

int _isatty(int file)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020ec:	2301      	movs	r3, #1
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bc80      	pop	{r7}
 80020f6:	4770      	bx	lr

080020f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3714      	adds	r7, #20
 800210a:	46bd      	mov	sp, r7
 800210c:	bc80      	pop	{r7}
 800210e:	4770      	bx	lr

08002110 <_open>:

int _open(char *path, int flags, ...)
{
 8002110:	b40e      	push	{r1, r2, r3}
 8002112:	b480      	push	{r7}
 8002114:	b082      	sub	sp, #8
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
  (void)path;
  (void)flags;
  /* Pretend like we always fail */
  return -1;
 800211a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800211e:	4618      	mov	r0, r3
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bc80      	pop	{r7}
 8002126:	b003      	add	sp, #12
 8002128:	4770      	bx	lr

0800212a <_wait>:

int _wait(int *status)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b082      	sub	sp, #8
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
  (void)status;
  errno = ECHILD;
 8002132:	f01e fcfb 	bl	8020b2c <__errno>
 8002136:	4603      	mov	r3, r0
 8002138:	220a      	movs	r2, #10
 800213a:	601a      	str	r2, [r3, #0]
  return -1;
 800213c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002140:	4618      	mov	r0, r3
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <_unlink>:

int _unlink(char *name)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  (void)name;
  errno = ENOENT;
 8002150:	f01e fcec 	bl	8020b2c <__errno>
 8002154:	4603      	mov	r3, r0
 8002156:	2202      	movs	r2, #2
 8002158:	601a      	str	r2, [r3, #0]
  return -1;
 800215a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800215e:	4618      	mov	r0, r3
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <_times>:

int _times(struct tms *buf)
{
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
  (void)buf;
  return -1;
 800216e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002172:	4618      	mov	r0, r3
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	bc80      	pop	{r7}
 800217a:	4770      	bx	lr

0800217c <_stat>:

int _stat(char *file, struct stat *st)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800218c:	605a      	str	r2, [r3, #4]
  return 0;
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	bc80      	pop	{r7}
 8002198:	4770      	bx	lr

0800219a <_link>:

int _link(char *old, char *new)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b082      	sub	sp, #8
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
 80021a2:	6039      	str	r1, [r7, #0]
  (void)old;
  (void)new;
  errno = EMLINK;
 80021a4:	f01e fcc2 	bl	8020b2c <__errno>
 80021a8:	4603      	mov	r3, r0
 80021aa:	221f      	movs	r2, #31
 80021ac:	601a      	str	r2, [r3, #0]
  return -1;
 80021ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <_fork>:

int _fork(void)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	af00      	add	r7, sp, #0
  errno = EAGAIN;
 80021be:	f01e fcb5 	bl	8020b2c <__errno>
 80021c2:	4603      	mov	r3, r0
 80021c4:	220b      	movs	r2, #11
 80021c6:	601a      	str	r2, [r3, #0]
  return -1;
 80021c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <_execve>:

int _execve(char *name, char **argv, char **env)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
  (void)name;
  (void)argv;
  (void)env;
  errno = ENOMEM;
 80021dc:	f01e fca6 	bl	8020b2c <__errno>
 80021e0:	4603      	mov	r3, r0
 80021e2:	220c      	movs	r2, #12
 80021e4:	601a      	str	r2, [r3, #0]
  return -1;
 80021e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3710      	adds	r7, #16
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
	...

080021f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021fc:	4a14      	ldr	r2, [pc, #80]	; (8002250 <_sbrk+0x5c>)
 80021fe:	4b15      	ldr	r3, [pc, #84]	; (8002254 <_sbrk+0x60>)
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002208:	4b13      	ldr	r3, [pc, #76]	; (8002258 <_sbrk+0x64>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d102      	bne.n	8002216 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002210:	4b11      	ldr	r3, [pc, #68]	; (8002258 <_sbrk+0x64>)
 8002212:	4a12      	ldr	r2, [pc, #72]	; (800225c <_sbrk+0x68>)
 8002214:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002216:	4b10      	ldr	r3, [pc, #64]	; (8002258 <_sbrk+0x64>)
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4413      	add	r3, r2
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	429a      	cmp	r2, r3
 8002222:	d207      	bcs.n	8002234 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002224:	f01e fc82 	bl	8020b2c <__errno>
 8002228:	4603      	mov	r3, r0
 800222a:	220c      	movs	r2, #12
 800222c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800222e:	f04f 33ff 	mov.w	r3, #4294967295
 8002232:	e009      	b.n	8002248 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002234:	4b08      	ldr	r3, [pc, #32]	; (8002258 <_sbrk+0x64>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800223a:	4b07      	ldr	r3, [pc, #28]	; (8002258 <_sbrk+0x64>)
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4413      	add	r3, r2
 8002242:	4a05      	ldr	r2, [pc, #20]	; (8002258 <_sbrk+0x64>)
 8002244:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002246:	68fb      	ldr	r3, [r7, #12]
}
 8002248:	4618      	mov	r0, r3
 800224a:	3718      	adds	r7, #24
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	20014000 	.word	0x20014000
 8002254:	00000400 	.word	0x00000400
 8002258:	200006f8 	.word	0x200006f8
 800225c:	200007d0 	.word	0x200007d0

08002260 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002264:	bf00      	nop
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr

0800226c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 800226c:	b480      	push	{r7}
 800226e:	b087      	sub	sp, #28
 8002270:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmul = 0, plldiv = 0, pllsource = 0, msirange = 0;
 8002272:	2300      	movs	r3, #0
 8002274:	617b      	str	r3, [r7, #20]
 8002276:	2300      	movs	r3, #0
 8002278:	613b      	str	r3, [r7, #16]
 800227a:	2300      	movs	r3, #0
 800227c:	60fb      	str	r3, [r7, #12]
 800227e:	2300      	movs	r3, #0
 8002280:	60bb      	str	r3, [r7, #8]
 8002282:	2300      	movs	r3, #0
 8002284:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8002286:	4b48      	ldr	r3, [pc, #288]	; (80023a8 <SystemCoreClockUpdate+0x13c>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f003 030c 	and.w	r3, r3, #12
 800228e:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	2b0c      	cmp	r3, #12
 8002294:	d863      	bhi.n	800235e <SystemCoreClockUpdate+0xf2>
 8002296:	a201      	add	r2, pc, #4	; (adr r2, 800229c <SystemCoreClockUpdate+0x30>)
 8002298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800229c:	080022d1 	.word	0x080022d1
 80022a0:	0800235f 	.word	0x0800235f
 80022a4:	0800235f 	.word	0x0800235f
 80022a8:	0800235f 	.word	0x0800235f
 80022ac:	080022f1 	.word	0x080022f1
 80022b0:	0800235f 	.word	0x0800235f
 80022b4:	0800235f 	.word	0x0800235f
 80022b8:	0800235f 	.word	0x0800235f
 80022bc:	080022f9 	.word	0x080022f9
 80022c0:	0800235f 	.word	0x0800235f
 80022c4:	0800235f 	.word	0x0800235f
 80022c8:	0800235f 	.word	0x0800235f
 80022cc:	08002301 	.word	0x08002301
  {
    case 0x00:  /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13;
 80022d0:	4b35      	ldr	r3, [pc, #212]	; (80023a8 <SystemCoreClockUpdate+0x13c>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	0b5b      	lsrs	r3, r3, #13
 80022d6:	f003 0307 	and.w	r3, r3, #7
 80022da:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (32768 * (1 << (msirange + 1)));
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3301      	adds	r3, #1
 80022e0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	461a      	mov	r2, r3
 80022ea:	4b30      	ldr	r3, [pc, #192]	; (80023ac <SystemCoreClockUpdate+0x140>)
 80022ec:	601a      	str	r2, [r3, #0]
      break;
 80022ee:	e046      	b.n	800237e <SystemCoreClockUpdate+0x112>
    case 0x04:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80022f0:	4b2e      	ldr	r3, [pc, #184]	; (80023ac <SystemCoreClockUpdate+0x140>)
 80022f2:	4a2f      	ldr	r2, [pc, #188]	; (80023b0 <SystemCoreClockUpdate+0x144>)
 80022f4:	601a      	str	r2, [r3, #0]
      break;
 80022f6:	e042      	b.n	800237e <SystemCoreClockUpdate+0x112>
    case 0x08:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 80022f8:	4b2c      	ldr	r3, [pc, #176]	; (80023ac <SystemCoreClockUpdate+0x140>)
 80022fa:	4a2e      	ldr	r2, [pc, #184]	; (80023b4 <SystemCoreClockUpdate+0x148>)
 80022fc:	601a      	str	r2, [r3, #0]
      break;
 80022fe:	e03e      	b.n	800237e <SystemCoreClockUpdate+0x112>
    case 0x0C:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8002300:	4b29      	ldr	r3, [pc, #164]	; (80023a8 <SystemCoreClockUpdate+0x13c>)
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002308:	613b      	str	r3, [r7, #16]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 800230a:	4b27      	ldr	r3, [pc, #156]	; (80023a8 <SystemCoreClockUpdate+0x13c>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002312:	60fb      	str	r3, [r7, #12]
      pllmul = PLLMulTable[(pllmul >> 18)];
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	0c9b      	lsrs	r3, r3, #18
 8002318:	4a27      	ldr	r2, [pc, #156]	; (80023b8 <SystemCoreClockUpdate+0x14c>)
 800231a:	5cd3      	ldrb	r3, [r2, r3]
 800231c:	613b      	str	r3, [r7, #16]
      plldiv = (plldiv >> 22) + 1;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	0d9b      	lsrs	r3, r3, #22
 8002322:	3301      	adds	r3, #1
 8002324:	60fb      	str	r3, [r7, #12]
      
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8002326:	4b20      	ldr	r3, [pc, #128]	; (80023a8 <SystemCoreClockUpdate+0x13c>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800232e:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d109      	bne.n	800234a <SystemCoreClockUpdate+0xde>
      {
        /* HSI oscillator clock selected as PLL clock entry */
        SystemCoreClock = (((HSI_VALUE) * pllmul) / plldiv);
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	4a1d      	ldr	r2, [pc, #116]	; (80023b0 <SystemCoreClockUpdate+0x144>)
 800233a:	fb03 f202 	mul.w	r2, r3, r2
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	fbb2 f3f3 	udiv	r3, r2, r3
 8002344:	4a19      	ldr	r2, [pc, #100]	; (80023ac <SystemCoreClockUpdate+0x140>)
 8002346:	6013      	str	r3, [r2, #0]
      else
      {
        /* HSE selected as PLL clock entry */
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 8002348:	e019      	b.n	800237e <SystemCoreClockUpdate+0x112>
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	4a19      	ldr	r2, [pc, #100]	; (80023b4 <SystemCoreClockUpdate+0x148>)
 800234e:	fb03 f202 	mul.w	r2, r3, r2
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	fbb2 f3f3 	udiv	r3, r2, r3
 8002358:	4a14      	ldr	r2, [pc, #80]	; (80023ac <SystemCoreClockUpdate+0x140>)
 800235a:	6013      	str	r3, [r2, #0]
      break;
 800235c:	e00f      	b.n	800237e <SystemCoreClockUpdate+0x112>
    default: /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13;
 800235e:	4b12      	ldr	r3, [pc, #72]	; (80023a8 <SystemCoreClockUpdate+0x13c>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	0b5b      	lsrs	r3, r3, #13
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (32768 * (1 << (msirange + 1)));
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	3301      	adds	r3, #1
 800236e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	461a      	mov	r2, r3
 8002378:	4b0c      	ldr	r3, [pc, #48]	; (80023ac <SystemCoreClockUpdate+0x140>)
 800237a:	601a      	str	r2, [r3, #0]
      break;
 800237c:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800237e:	4b0a      	ldr	r3, [pc, #40]	; (80023a8 <SystemCoreClockUpdate+0x13c>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	091b      	lsrs	r3, r3, #4
 8002384:	f003 030f 	and.w	r3, r3, #15
 8002388:	4a0c      	ldr	r2, [pc, #48]	; (80023bc <SystemCoreClockUpdate+0x150>)
 800238a:	5cd3      	ldrb	r3, [r2, r3]
 800238c:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800238e:	4b07      	ldr	r3, [pc, #28]	; (80023ac <SystemCoreClockUpdate+0x140>)
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	fa22 f303 	lsr.w	r3, r2, r3
 8002398:	4a04      	ldr	r2, [pc, #16]	; (80023ac <SystemCoreClockUpdate+0x140>)
 800239a:	6013      	str	r3, [r2, #0]
}
 800239c:	bf00      	nop
 800239e:	371c      	adds	r7, #28
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bc80      	pop	{r7}
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	40023800 	.word	0x40023800
 80023ac:	2000006c 	.word	0x2000006c
 80023b0:	00f42400 	.word	0x00f42400
 80023b4:	016e3600 	.word	0x016e3600
 80023b8:	08020ff8 	.word	0x08020ff8
 80023bc:	08021004 	.word	0x08021004

080023c0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80023c4:	4b11      	ldr	r3, [pc, #68]	; (800240c <MX_USART2_UART_Init+0x4c>)
 80023c6:	4a12      	ldr	r2, [pc, #72]	; (8002410 <MX_USART2_UART_Init+0x50>)
 80023c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80023ca:	4b10      	ldr	r3, [pc, #64]	; (800240c <MX_USART2_UART_Init+0x4c>)
 80023cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80023d2:	4b0e      	ldr	r3, [pc, #56]	; (800240c <MX_USART2_UART_Init+0x4c>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023d8:	4b0c      	ldr	r3, [pc, #48]	; (800240c <MX_USART2_UART_Init+0x4c>)
 80023da:	2200      	movs	r2, #0
 80023dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80023de:	4b0b      	ldr	r3, [pc, #44]	; (800240c <MX_USART2_UART_Init+0x4c>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80023e4:	4b09      	ldr	r3, [pc, #36]	; (800240c <MX_USART2_UART_Init+0x4c>)
 80023e6:	220c      	movs	r2, #12
 80023e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023ea:	4b08      	ldr	r3, [pc, #32]	; (800240c <MX_USART2_UART_Init+0x4c>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80023f0:	4b06      	ldr	r3, [pc, #24]	; (800240c <MX_USART2_UART_Init+0x4c>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023f6:	4805      	ldr	r0, [pc, #20]	; (800240c <MX_USART2_UART_Init+0x4c>)
 80023f8:	f00d f865 	bl	800f4c6 <HAL_UART_Init>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002402:	f7ff fc83 	bl	8001d0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002406:	bf00      	nop
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	200006fc 	.word	0x200006fc
 8002410:	40004400 	.word	0x40004400

08002414 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b08a      	sub	sp, #40	; 0x28
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800241c:	f107 0314 	add.w	r3, r7, #20
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	605a      	str	r2, [r3, #4]
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	60da      	str	r2, [r3, #12]
 800242a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a1b      	ldr	r2, [pc, #108]	; (80024a0 <HAL_UART_MspInit+0x8c>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d12f      	bne.n	8002496 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002436:	4b1b      	ldr	r3, [pc, #108]	; (80024a4 <HAL_UART_MspInit+0x90>)
 8002438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243a:	4a1a      	ldr	r2, [pc, #104]	; (80024a4 <HAL_UART_MspInit+0x90>)
 800243c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002440:	6253      	str	r3, [r2, #36]	; 0x24
 8002442:	4b18      	ldr	r3, [pc, #96]	; (80024a4 <HAL_UART_MspInit+0x90>)
 8002444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244a:	613b      	str	r3, [r7, #16]
 800244c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800244e:	4b15      	ldr	r3, [pc, #84]	; (80024a4 <HAL_UART_MspInit+0x90>)
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	4a14      	ldr	r2, [pc, #80]	; (80024a4 <HAL_UART_MspInit+0x90>)
 8002454:	f043 0301 	orr.w	r3, r3, #1
 8002458:	61d3      	str	r3, [r2, #28]
 800245a:	4b12      	ldr	r3, [pc, #72]	; (80024a4 <HAL_UART_MspInit+0x90>)
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002466:	230c      	movs	r3, #12
 8002468:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800246a:	2302      	movs	r3, #2
 800246c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246e:	2300      	movs	r3, #0
 8002470:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002472:	2303      	movs	r3, #3
 8002474:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002476:	2307      	movs	r3, #7
 8002478:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800247a:	f107 0314 	add.w	r3, r7, #20
 800247e:	4619      	mov	r1, r3
 8002480:	4809      	ldr	r0, [pc, #36]	; (80024a8 <HAL_UART_MspInit+0x94>)
 8002482:	f002 fc85 	bl	8004d90 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002486:	2200      	movs	r2, #0
 8002488:	2100      	movs	r1, #0
 800248a:	2026      	movs	r0, #38	; 0x26
 800248c:	f000 fbe3 	bl	8002c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002490:	2026      	movs	r0, #38	; 0x26
 8002492:	f000 fbfc 	bl	8002c8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002496:	bf00      	nop
 8002498:	3728      	adds	r7, #40	; 0x28
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40004400 	.word	0x40004400
 80024a4:	40023800 	.word	0x40023800
 80024a8:	40020000 	.word	0x40020000

080024ac <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART2)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a09      	ldr	r2, [pc, #36]	; (80024e0 <HAL_UART_MspDeInit+0x34>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d10c      	bne.n	80024d8 <HAL_UART_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 80024be:	4b09      	ldr	r3, [pc, #36]	; (80024e4 <HAL_UART_MspDeInit+0x38>)
 80024c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c2:	4a08      	ldr	r2, [pc, #32]	; (80024e4 <HAL_UART_MspDeInit+0x38>)
 80024c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80024c8:	6253      	str	r3, [r2, #36]	; 0x24

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 80024ca:	210c      	movs	r1, #12
 80024cc:	4806      	ldr	r0, [pc, #24]	; (80024e8 <HAL_UART_MspDeInit+0x3c>)
 80024ce:	f002 fdef 	bl	80050b0 <HAL_GPIO_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80024d2:	2026      	movs	r0, #38	; 0x26
 80024d4:	f000 fbe9 	bl	8002caa <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 80024d8:	bf00      	nop
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	40004400 	.word	0x40004400
 80024e4:	40023800 	.word	0x40023800
 80024e8:	40020000 	.word	0x40020000

080024ec <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 80024ec:	f7ff feb8 	bl	8002260 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024f0:	480b      	ldr	r0, [pc, #44]	; (8002520 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80024f2:	490c      	ldr	r1, [pc, #48]	; (8002524 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80024f4:	4a0c      	ldr	r2, [pc, #48]	; (8002528 <LoopFillZerobss+0x16>)
  movs r3, #0
 80024f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024f8:	e002      	b.n	8002500 <LoopCopyDataInit>

080024fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024fe:	3304      	adds	r3, #4

08002500 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002500:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002502:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002504:	d3f9      	bcc.n	80024fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002506:	4a09      	ldr	r2, [pc, #36]	; (800252c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002508:	4c09      	ldr	r4, [pc, #36]	; (8002530 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800250a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800250c:	e001      	b.n	8002512 <LoopFillZerobss>

0800250e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800250e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002510:	3204      	adds	r2, #4

08002512 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002512:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002514:	d3fb      	bcc.n	800250e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002516:	f01e fb23 	bl	8020b60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800251a:	f7ff fb8f 	bl	8001c3c <main>
  bx lr
 800251e:	4770      	bx	lr
  ldr r0, =_sdata
 8002520:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002524:	20000610 	.word	0x20000610
  ldr r2, =_sidata
 8002528:	08021490 	.word	0x08021490
  ldr r2, =_sbss
 800252c:	20000610 	.word	0x20000610
  ldr r4, =_ebss
 8002530:	200007d0 	.word	0x200007d0

08002534 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002534:	e7fe      	b.n	8002534 <ADC1_IRQHandler>

08002536 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b082      	sub	sp, #8
 800253a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800253c:	2300      	movs	r3, #0
 800253e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002540:	2003      	movs	r0, #3
 8002542:	f000 fb7d 	bl	8002c40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002546:	2000      	movs	r0, #0
 8002548:	f000 f838 	bl	80025bc <HAL_InitTick>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d002      	beq.n	8002558 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	71fb      	strb	r3, [r7, #7]
 8002556:	e001      	b.n	800255c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002558:	f7ff fce8 	bl	8001f2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800255c:	79fb      	ldrb	r3, [r7, #7]
}
 800255e:	4618      	mov	r0, r3
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
	...

08002568 <HAL_DeInit>:
  *        of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 800256c:	4b0c      	ldr	r3, [pc, #48]	; (80025a0 <HAL_DeInit+0x38>)
 800256e:	f04f 32ff 	mov.w	r2, #4294967295
 8002572:	619a      	str	r2, [r3, #24]
  __HAL_RCC_APB1_RELEASE_RESET();
 8002574:	4b0a      	ldr	r3, [pc, #40]	; (80025a0 <HAL_DeInit+0x38>)
 8002576:	2200      	movs	r2, #0
 8002578:	619a      	str	r2, [r3, #24]

  __HAL_RCC_APB2_FORCE_RESET();
 800257a:	4b09      	ldr	r3, [pc, #36]	; (80025a0 <HAL_DeInit+0x38>)
 800257c:	f04f 32ff 	mov.w	r2, #4294967295
 8002580:	615a      	str	r2, [r3, #20]
  __HAL_RCC_APB2_RELEASE_RESET();
 8002582:	4b07      	ldr	r3, [pc, #28]	; (80025a0 <HAL_DeInit+0x38>)
 8002584:	2200      	movs	r2, #0
 8002586:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB_FORCE_RESET();
 8002588:	4b05      	ldr	r3, [pc, #20]	; (80025a0 <HAL_DeInit+0x38>)
 800258a:	f04f 32ff 	mov.w	r2, #4294967295
 800258e:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB_RELEASE_RESET();
 8002590:	4b03      	ldr	r3, [pc, #12]	; (80025a0 <HAL_DeInit+0x38>)
 8002592:	2200      	movs	r2, #0
 8002594:	611a      	str	r2, [r3, #16]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8002596:	f000 f80b 	bl	80025b0 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40023800 	.word	0x40023800
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80025a8:	bf00      	nop
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bc80      	pop	{r7}
 80025ae:	4770      	bx	lr

080025b0 <HAL_MspDeInit>:
/**
  * @brief  DeInitialize the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 80025b4:	bf00      	nop
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bc80      	pop	{r7}
 80025ba:	4770      	bx	lr

080025bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80025c4:	2300      	movs	r3, #0
 80025c6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80025c8:	4b16      	ldr	r3, [pc, #88]	; (8002624 <HAL_InitTick+0x68>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d022      	beq.n	8002616 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80025d0:	4b15      	ldr	r3, [pc, #84]	; (8002628 <HAL_InitTick+0x6c>)
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	4b13      	ldr	r3, [pc, #76]	; (8002624 <HAL_InitTick+0x68>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80025dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80025e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e4:	4618      	mov	r0, r3
 80025e6:	f000 fb72 	bl	8002cce <HAL_SYSTICK_Config>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d10f      	bne.n	8002610 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b0f      	cmp	r3, #15
 80025f4:	d809      	bhi.n	800260a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025f6:	2200      	movs	r2, #0
 80025f8:	6879      	ldr	r1, [r7, #4]
 80025fa:	f04f 30ff 	mov.w	r0, #4294967295
 80025fe:	f000 fb2a 	bl	8002c56 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002602:	4a0a      	ldr	r2, [pc, #40]	; (800262c <HAL_InitTick+0x70>)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6013      	str	r3, [r2, #0]
 8002608:	e007      	b.n	800261a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	73fb      	strb	r3, [r7, #15]
 800260e:	e004      	b.n	800261a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	73fb      	strb	r3, [r7, #15]
 8002614:	e001      	b.n	800261a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800261a:	7bfb      	ldrb	r3, [r7, #15]
}
 800261c:	4618      	mov	r0, r3
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	20000074 	.word	0x20000074
 8002628:	2000006c 	.word	0x2000006c
 800262c:	20000070 	.word	0x20000070

08002630 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002634:	4b05      	ldr	r3, [pc, #20]	; (800264c <HAL_IncTick+0x1c>)
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	4b05      	ldr	r3, [pc, #20]	; (8002650 <HAL_IncTick+0x20>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4413      	add	r3, r2
 800263e:	4a03      	ldr	r2, [pc, #12]	; (800264c <HAL_IncTick+0x1c>)
 8002640:	6013      	str	r3, [r2, #0]
}
 8002642:	bf00      	nop
 8002644:	46bd      	mov	sp, r7
 8002646:	bc80      	pop	{r7}
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	20000744 	.word	0x20000744
 8002650:	20000074 	.word	0x20000074

08002654 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  return uwTick;
 8002658:	4b02      	ldr	r3, [pc, #8]	; (8002664 <HAL_GetTick+0x10>)
 800265a:	681b      	ldr	r3, [r3, #0]
}
 800265c:	4618      	mov	r0, r3
 800265e:	46bd      	mov	sp, r7
 8002660:	bc80      	pop	{r7}
 8002662:	4770      	bx	lr
 8002664:	20000744 	.word	0x20000744

08002668 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800266c:	4b02      	ldr	r3, [pc, #8]	; (8002678 <HAL_GetTickPrio+0x10>)
 800266e:	681b      	ldr	r3, [r3, #0]
}
 8002670:	4618      	mov	r0, r3
 8002672:	46bd      	mov	sp, r7
 8002674:	bc80      	pop	{r7}
 8002676:	4770      	bx	lr
 8002678:	20000070 	.word	0x20000070

0800267c <HAL_SetTickFreq>:
  * @brief Set new tick Freq.
  * @param Freq tick frequency
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SetTickFreq(uint32_t Freq)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status  = HAL_OK;
 8002684:	2300      	movs	r3, #0
 8002686:	73fb      	strb	r3, [r7, #15]
  uint32_t prevTickFreq;

  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
 8002688:	4b0e      	ldr	r3, [pc, #56]	; (80026c4 <HAL_SetTickFreq+0x48>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	429a      	cmp	r2, r3
 8002690:	d012      	beq.n	80026b8 <HAL_SetTickFreq+0x3c>
  {
    /* Back up uwTickFreq frequency */
    prevTickFreq = uwTickFreq;
 8002692:	4b0c      	ldr	r3, [pc, #48]	; (80026c4 <HAL_SetTickFreq+0x48>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	60bb      	str	r3, [r7, #8]

    /* Update uwTickFreq global variable used by HAL_InitTick() */
    uwTickFreq = Freq;
 8002698:	4a0a      	ldr	r2, [pc, #40]	; (80026c4 <HAL_SetTickFreq+0x48>)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6013      	str	r3, [r2, #0]

   /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
 800269e:	4b0a      	ldr	r3, [pc, #40]	; (80026c8 <HAL_SetTickFreq+0x4c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7ff ff8a 	bl	80025bc <HAL_InitTick>
 80026a8:	4603      	mov	r3, r0
 80026aa:	73fb      	strb	r3, [r7, #15]

    if (status != HAL_OK)
 80026ac:	7bfb      	ldrb	r3, [r7, #15]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d002      	beq.n	80026b8 <HAL_SetTickFreq+0x3c>
    {
      /* Restore previous tick frequency */
      uwTickFreq = prevTickFreq;
 80026b2:	4a04      	ldr	r2, [pc, #16]	; (80026c4 <HAL_SetTickFreq+0x48>)
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	6013      	str	r3, [r2, #0]
    }
  }

  return status;
 80026b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	20000074 	.word	0x20000074
 80026c8:	20000070 	.word	0x20000070

080026cc <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
uint32_t HAL_GetTickFreq(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80026d0:	4b02      	ldr	r3, [pc, #8]	; (80026dc <HAL_GetTickFreq+0x10>)
 80026d2:	681b      	ldr	r3, [r3, #0]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bc80      	pop	{r7}
 80026da:	4770      	bx	lr
 80026dc:	20000074 	.word	0x20000074

080026e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026e8:	f7ff ffb4 	bl	8002654 <HAL_GetTick>
 80026ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f8:	d004      	beq.n	8002704 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80026fa:	4b09      	ldr	r3, [pc, #36]	; (8002720 <HAL_Delay+0x40>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	4413      	add	r3, r2
 8002702:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002704:	bf00      	nop
 8002706:	f7ff ffa5 	bl	8002654 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	429a      	cmp	r2, r3
 8002714:	d8f7      	bhi.n	8002706 <HAL_Delay+0x26>
  {
  }
}
 8002716:	bf00      	nop
 8002718:	bf00      	nop
 800271a:	3710      	adds	r7, #16
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	20000074 	.word	0x20000074

08002724 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8002728:	4b04      	ldr	r3, [pc, #16]	; (800273c <HAL_SuspendTick+0x18>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a03      	ldr	r2, [pc, #12]	; (800273c <HAL_SuspendTick+0x18>)
 800272e:	f023 0302 	bic.w	r3, r3, #2
 8002732:	6013      	str	r3, [r2, #0]
}
 8002734:	bf00      	nop
 8002736:	46bd      	mov	sp, r7
 8002738:	bc80      	pop	{r7}
 800273a:	4770      	bx	lr
 800273c:	e000e010 	.word	0xe000e010

08002740 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8002744:	4b04      	ldr	r3, [pc, #16]	; (8002758 <HAL_ResumeTick+0x18>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a03      	ldr	r2, [pc, #12]	; (8002758 <HAL_ResumeTick+0x18>)
 800274a:	f043 0302 	orr.w	r3, r3, #2
 800274e:	6013      	str	r3, [r2, #0]
}
 8002750:	bf00      	nop
 8002752:	46bd      	mov	sp, r7
 8002754:	bc80      	pop	{r7}
 8002756:	4770      	bx	lr
 8002758:	e000e010 	.word	0xe000e010

0800275c <HAL_GetHalVersion>:
/**
  * @brief Return the HAL revision
  * @retval version: 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  return __STM32L1xx_HAL_VERSION;
 8002760:	4b02      	ldr	r3, [pc, #8]	; (800276c <HAL_GetHalVersion+0x10>)
}
 8002762:	4618      	mov	r0, r3
 8002764:	46bd      	mov	sp, r7
 8002766:	bc80      	pop	{r7}
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	01040500 	.word	0x01040500

08002770 <HAL_GetREVID>:
/**
  * @brief Return the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) >> 16U);
 8002774:	4b03      	ldr	r3, [pc, #12]	; (8002784 <HAL_GetREVID+0x14>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	0c1b      	lsrs	r3, r3, #16
}
 800277a:	4618      	mov	r0, r3
 800277c:	46bd      	mov	sp, r7
 800277e:	bc80      	pop	{r7}
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	e0042000 	.word	0xe0042000

08002788 <HAL_GetDEVID>:
/**
  * @brief  Return the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 800278c:	4b03      	ldr	r3, [pc, #12]	; (800279c <HAL_GetDEVID+0x14>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8002794:	4618      	mov	r0, r3
 8002796:	46bd      	mov	sp, r7
 8002798:	bc80      	pop	{r7}
 800279a:	4770      	bx	lr
 800279c:	e0042000 	.word	0xe0042000

080027a0 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier 31:0 bits
  */
uint32_t HAL_GetUIDw0(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 80027a4:	4b02      	ldr	r3, [pc, #8]	; (80027b0 <HAL_GetUIDw0+0x10>)
 80027a6:	681b      	ldr	r3, [r3, #0]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr
 80027b0:	1ff800d0 	.word	0x1ff800d0

080027b4 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier 63:32 bits
  */
uint32_t HAL_GetUIDw1(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x4U))));
 80027b8:	4b02      	ldr	r3, [pc, #8]	; (80027c4 <HAL_GetUIDw1+0x10>)
 80027ba:	681b      	ldr	r3, [r3, #0]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr
 80027c4:	1ff800d4 	.word	0x1ff800d4

080027c8 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier 95:64 bits
  */
uint32_t HAL_GetUIDw2(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 80027cc:	4b02      	ldr	r3, [pc, #8]	; (80027d8 <HAL_GetUIDw2+0x10>)
 80027ce:	681b      	ldr	r3, [r3, #0]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bc80      	pop	{r7}
 80027d6:	4770      	bx	lr
 80027d8:	1ff800e4 	.word	0x1ff800e4

080027dc <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80027e0:	4b04      	ldr	r3, [pc, #16]	; (80027f4 <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	4a03      	ldr	r2, [pc, #12]	; (80027f4 <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 80027e6:	f043 0301 	orr.w	r3, r3, #1
 80027ea:	6053      	str	r3, [r2, #4]
}
 80027ec:	bf00      	nop
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bc80      	pop	{r7}
 80027f2:	4770      	bx	lr
 80027f4:	e0042000 	.word	0xe0042000

080027f8 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80027fc:	4b04      	ldr	r3, [pc, #16]	; (8002810 <HAL_DBGMCU_DisableDBGSleepMode+0x18>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	4a03      	ldr	r2, [pc, #12]	; (8002810 <HAL_DBGMCU_DisableDBGSleepMode+0x18>)
 8002802:	f023 0301 	bic.w	r3, r3, #1
 8002806:	6053      	str	r3, [r2, #4]
}
 8002808:	bf00      	nop
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr
 8002810:	e0042000 	.word	0xe0042000

08002814 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002818:	4b04      	ldr	r3, [pc, #16]	; (800282c <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	4a03      	ldr	r2, [pc, #12]	; (800282c <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 800281e:	f043 0302 	orr.w	r3, r3, #2
 8002822:	6053      	str	r3, [r2, #4]
}
 8002824:	bf00      	nop
 8002826:	46bd      	mov	sp, r7
 8002828:	bc80      	pop	{r7}
 800282a:	4770      	bx	lr
 800282c:	e0042000 	.word	0xe0042000

08002830 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002834:	4b04      	ldr	r3, [pc, #16]	; (8002848 <HAL_DBGMCU_DisableDBGStopMode+0x18>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	4a03      	ldr	r2, [pc, #12]	; (8002848 <HAL_DBGMCU_DisableDBGStopMode+0x18>)
 800283a:	f023 0302 	bic.w	r3, r3, #2
 800283e:	6053      	str	r3, [r2, #4]
}
 8002840:	bf00      	nop
 8002842:	46bd      	mov	sp, r7
 8002844:	bc80      	pop	{r7}
 8002846:	4770      	bx	lr
 8002848:	e0042000 	.word	0xe0042000

0800284c <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002850:	4b04      	ldr	r3, [pc, #16]	; (8002864 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	4a03      	ldr	r2, [pc, #12]	; (8002864 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8002856:	f043 0304 	orr.w	r3, r3, #4
 800285a:	6053      	str	r3, [r2, #4]
}
 800285c:	bf00      	nop
 800285e:	46bd      	mov	sp, r7
 8002860:	bc80      	pop	{r7}
 8002862:	4770      	bx	lr
 8002864:	e0042000 	.word	0xe0042000

08002868 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 800286c:	4b04      	ldr	r3, [pc, #16]	; (8002880 <HAL_DBGMCU_DisableDBGStandbyMode+0x18>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	4a03      	ldr	r2, [pc, #12]	; (8002880 <HAL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002872:	f023 0304 	bic.w	r3, r3, #4
 8002876:	6053      	str	r3, [r2, #4]
}
 8002878:	bf00      	nop
 800287a:	46bd      	mov	sp, r7
 800287c:	bc80      	pop	{r7}
 800287e:	4770      	bx	lr
 8002880:	e0042000 	.word	0xe0042000

08002884 <__NVIC_SetPriorityGrouping>:
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f003 0307 	and.w	r3, r3, #7
 8002892:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002894:	4b0c      	ldr	r3, [pc, #48]	; (80028c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800289a:	68ba      	ldr	r2, [r7, #8]
 800289c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028a0:	4013      	ands	r3, r2
 80028a2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028b6:	4a04      	ldr	r2, [pc, #16]	; (80028c8 <__NVIC_SetPriorityGrouping+0x44>)
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	60d3      	str	r3, [r2, #12]
}
 80028bc:	bf00      	nop
 80028be:	3714      	adds	r7, #20
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bc80      	pop	{r7}
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	e000ed00 	.word	0xe000ed00

080028cc <__NVIC_GetPriorityGrouping>:
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028d0:	4b04      	ldr	r3, [pc, #16]	; (80028e4 <__NVIC_GetPriorityGrouping+0x18>)
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	0a1b      	lsrs	r3, r3, #8
 80028d6:	f003 0307 	and.w	r3, r3, #7
}
 80028da:	4618      	mov	r0, r3
 80028dc:	46bd      	mov	sp, r7
 80028de:	bc80      	pop	{r7}
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	e000ed00 	.word	0xe000ed00

080028e8 <__NVIC_EnableIRQ>:
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	4603      	mov	r3, r0
 80028f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	db0b      	blt.n	8002912 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028fa:	79fb      	ldrb	r3, [r7, #7]
 80028fc:	f003 021f 	and.w	r2, r3, #31
 8002900:	4906      	ldr	r1, [pc, #24]	; (800291c <__NVIC_EnableIRQ+0x34>)
 8002902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002906:	095b      	lsrs	r3, r3, #5
 8002908:	2001      	movs	r0, #1
 800290a:	fa00 f202 	lsl.w	r2, r0, r2
 800290e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr
 800291c:	e000e100 	.word	0xe000e100

08002920 <__NVIC_DisableIRQ>:
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	4603      	mov	r3, r0
 8002928:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800292a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292e:	2b00      	cmp	r3, #0
 8002930:	db12      	blt.n	8002958 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002932:	79fb      	ldrb	r3, [r7, #7]
 8002934:	f003 021f 	and.w	r2, r3, #31
 8002938:	490a      	ldr	r1, [pc, #40]	; (8002964 <__NVIC_DisableIRQ+0x44>)
 800293a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293e:	095b      	lsrs	r3, r3, #5
 8002940:	2001      	movs	r0, #1
 8002942:	fa00 f202 	lsl.w	r2, r0, r2
 8002946:	3320      	adds	r3, #32
 8002948:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800294c:	f3bf 8f4f 	dsb	sy
}
 8002950:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002952:	f3bf 8f6f 	isb	sy
}
 8002956:	bf00      	nop
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	bc80      	pop	{r7}
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	e000e100 	.word	0xe000e100

08002968 <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	4603      	mov	r3, r0
 8002970:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002976:	2b00      	cmp	r3, #0
 8002978:	db0e      	blt.n	8002998 <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 800297a:	4a0a      	ldr	r2, [pc, #40]	; (80029a4 <__NVIC_GetPendingIRQ+0x3c>)
 800297c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002980:	095b      	lsrs	r3, r3, #5
 8002982:	3340      	adds	r3, #64	; 0x40
 8002984:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002988:	79fb      	ldrb	r3, [r7, #7]
 800298a:	f003 031f 	and.w	r3, r3, #31
 800298e:	fa22 f303 	lsr.w	r3, r2, r3
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	e000      	b.n	800299a <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
 8002998:	2300      	movs	r3, #0
  }
}
 800299a:	4618      	mov	r0, r3
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	bc80      	pop	{r7}
 80029a2:	4770      	bx	lr
 80029a4:	e000e100 	.word	0xe000e100

080029a8 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	4603      	mov	r3, r0
 80029b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	db0c      	blt.n	80029d4 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029ba:	79fb      	ldrb	r3, [r7, #7]
 80029bc:	f003 021f 	and.w	r2, r3, #31
 80029c0:	4907      	ldr	r1, [pc, #28]	; (80029e0 <__NVIC_SetPendingIRQ+0x38>)
 80029c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c6:	095b      	lsrs	r3, r3, #5
 80029c8:	2001      	movs	r0, #1
 80029ca:	fa00 f202 	lsl.w	r2, r0, r2
 80029ce:	3340      	adds	r3, #64	; 0x40
 80029d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	bc80      	pop	{r7}
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	e000e100 	.word	0xe000e100

080029e4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	4603      	mov	r3, r0
 80029ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	db0c      	blt.n	8002a10 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029f6:	79fb      	ldrb	r3, [r7, #7]
 80029f8:	f003 021f 	and.w	r2, r3, #31
 80029fc:	4907      	ldr	r1, [pc, #28]	; (8002a1c <__NVIC_ClearPendingIRQ+0x38>)
 80029fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a02:	095b      	lsrs	r3, r3, #5
 8002a04:	2001      	movs	r0, #1
 8002a06:	fa00 f202 	lsl.w	r2, r0, r2
 8002a0a:	3360      	adds	r3, #96	; 0x60
 8002a0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bc80      	pop	{r7}
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	e000e100 	.word	0xe000e100

08002a20 <__NVIC_GetActive>:
  \return             0  Interrupt status is not active.
  \return             1  Interrupt status is active.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetActive(IRQn_Type IRQn)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	db0e      	blt.n	8002a50 <__NVIC_GetActive+0x30>
  {
    return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8002a32:	4a0a      	ldr	r2, [pc, #40]	; (8002a5c <__NVIC_GetActive+0x3c>)
 8002a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a38:	095b      	lsrs	r3, r3, #5
 8002a3a:	3380      	adds	r3, #128	; 0x80
 8002a3c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002a40:	79fb      	ldrb	r3, [r7, #7]
 8002a42:	f003 031f 	and.w	r3, r3, #31
 8002a46:	fa22 f303 	lsr.w	r3, r2, r3
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	e000      	b.n	8002a52 <__NVIC_GetActive+0x32>
  }
  else
  {
    return(0U);
 8002a50:	2300      	movs	r3, #0
  }
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bc80      	pop	{r7}
 8002a5a:	4770      	bx	lr
 8002a5c:	e000e100 	.word	0xe000e100

08002a60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	4603      	mov	r3, r0
 8002a68:	6039      	str	r1, [r7, #0]
 8002a6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	db0a      	blt.n	8002a8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	b2da      	uxtb	r2, r3
 8002a78:	490c      	ldr	r1, [pc, #48]	; (8002aac <__NVIC_SetPriority+0x4c>)
 8002a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a7e:	0112      	lsls	r2, r2, #4
 8002a80:	b2d2      	uxtb	r2, r2
 8002a82:	440b      	add	r3, r1
 8002a84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a88:	e00a      	b.n	8002aa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	b2da      	uxtb	r2, r3
 8002a8e:	4908      	ldr	r1, [pc, #32]	; (8002ab0 <__NVIC_SetPriority+0x50>)
 8002a90:	79fb      	ldrb	r3, [r7, #7]
 8002a92:	f003 030f 	and.w	r3, r3, #15
 8002a96:	3b04      	subs	r3, #4
 8002a98:	0112      	lsls	r2, r2, #4
 8002a9a:	b2d2      	uxtb	r2, r2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	761a      	strb	r2, [r3, #24]
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bc80      	pop	{r7}
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	e000e100 	.word	0xe000e100
 8002ab0:	e000ed00 	.word	0xe000ed00

08002ab4 <__NVIC_GetPriority>:
  \param [in]   IRQn  Interrupt number.
  \return             Interrupt Priority.
                      Value is aligned automatically to the implemented priority bits of the microcontroller.
 */
__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	4603      	mov	r3, r0
 8002abc:	71fb      	strb	r3, [r7, #7]

  if ((int32_t)(IRQn) >= 0)
 8002abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	db09      	blt.n	8002ada <__NVIC_GetPriority+0x26>
  {
    return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
 8002ac6:	4a0c      	ldr	r2, [pc, #48]	; (8002af8 <__NVIC_GetPriority+0x44>)
 8002ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002acc:	4413      	add	r3, r2
 8002ace:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	091b      	lsrs	r3, r3, #4
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	e009      	b.n	8002aee <__NVIC_GetPriority+0x3a>
  }
  else
  {
    return(((uint32_t)SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
 8002ada:	4a08      	ldr	r2, [pc, #32]	; (8002afc <__NVIC_GetPriority+0x48>)
 8002adc:	79fb      	ldrb	r3, [r7, #7]
 8002ade:	f003 030f 	and.w	r3, r3, #15
 8002ae2:	3b04      	subs	r3, #4
 8002ae4:	4413      	add	r3, r2
 8002ae6:	7e1b      	ldrb	r3, [r3, #24]
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	091b      	lsrs	r3, r3, #4
 8002aec:	b2db      	uxtb	r3, r3
  }
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bc80      	pop	{r7}
 8002af6:	4770      	bx	lr
 8002af8:	e000e100 	.word	0xe000e100
 8002afc:	e000ed00 	.word	0xe000ed00

08002b00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b089      	sub	sp, #36	; 0x24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	f1c3 0307 	rsb	r3, r3, #7
 8002b1a:	2b04      	cmp	r3, #4
 8002b1c:	bf28      	it	cs
 8002b1e:	2304      	movcs	r3, #4
 8002b20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	3304      	adds	r3, #4
 8002b26:	2b06      	cmp	r3, #6
 8002b28:	d902      	bls.n	8002b30 <NVIC_EncodePriority+0x30>
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	3b03      	subs	r3, #3
 8002b2e:	e000      	b.n	8002b32 <NVIC_EncodePriority+0x32>
 8002b30:	2300      	movs	r3, #0
 8002b32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b34:	f04f 32ff 	mov.w	r2, #4294967295
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	43da      	mvns	r2, r3
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	401a      	ands	r2, r3
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b48:	f04f 31ff 	mov.w	r1, #4294967295
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b52:	43d9      	mvns	r1, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b58:	4313      	orrs	r3, r2
         );
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3724      	adds	r7, #36	; 0x24
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bc80      	pop	{r7}
 8002b62:	4770      	bx	lr

08002b64 <NVIC_DecodePriority>:
  \param [in]     PriorityGroup  Used priority group.
  \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
  \param [out]     pSubPriority  Subpriority value (starting from 0).
 */
__STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b089      	sub	sp, #36	; 0x24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
 8002b70:	603b      	str	r3, [r7, #0]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	f003 0307 	and.w	r3, r3, #7
 8002b78:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	f1c3 0307 	rsb	r3, r3, #7
 8002b80:	2b04      	cmp	r3, #4
 8002b82:	bf28      	it	cs
 8002b84:	2304      	movcs	r3, #4
 8002b86:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	3304      	adds	r3, #4
 8002b8c:	2b06      	cmp	r3, #6
 8002b8e:	d902      	bls.n	8002b96 <NVIC_DecodePriority+0x32>
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	3b03      	subs	r3, #3
 8002b94:	e000      	b.n	8002b98 <NVIC_DecodePriority+0x34>
 8002b96:	2300      	movs	r3, #0
 8002b98:	617b      	str	r3, [r7, #20]

  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	40da      	lsrs	r2, r3
 8002ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8002baa:	43db      	mvns	r3, r3
 8002bac:	401a      	ands	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	601a      	str	r2, [r3, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
 8002bb2:	f04f 32ff 	mov.w	r2, #4294967295
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	43da      	mvns	r2, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	401a      	ands	r2, r3
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	601a      	str	r2, [r3, #0]
}
 8002bc6:	bf00      	nop
 8002bc8:	3724      	adds	r7, #36	; 0x24
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bc80      	pop	{r7}
 8002bce:	4770      	bx	lr

08002bd0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8002bd4:	f3bf 8f4f 	dsb	sy
}
 8002bd8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002bda:	4b06      	ldr	r3, [pc, #24]	; (8002bf4 <__NVIC_SystemReset+0x24>)
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002be2:	4904      	ldr	r1, [pc, #16]	; (8002bf4 <__NVIC_SystemReset+0x24>)
 8002be4:	4b04      	ldr	r3, [pc, #16]	; (8002bf8 <__NVIC_SystemReset+0x28>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002bea:	f3bf 8f4f 	dsb	sy
}
 8002bee:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002bf0:	bf00      	nop
 8002bf2:	e7fd      	b.n	8002bf0 <__NVIC_SystemReset+0x20>
 8002bf4:	e000ed00 	.word	0xe000ed00
 8002bf8:	05fa0004 	.word	0x05fa0004

08002bfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	3b01      	subs	r3, #1
 8002c08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c0c:	d301      	bcc.n	8002c12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e00f      	b.n	8002c32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c12:	4a0a      	ldr	r2, [pc, #40]	; (8002c3c <SysTick_Config+0x40>)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	3b01      	subs	r3, #1
 8002c18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c1a:	210f      	movs	r1, #15
 8002c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c20:	f7ff ff1e 	bl	8002a60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c24:	4b05      	ldr	r3, [pc, #20]	; (8002c3c <SysTick_Config+0x40>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c2a:	4b04      	ldr	r3, [pc, #16]	; (8002c3c <SysTick_Config+0x40>)
 8002c2c:	2207      	movs	r2, #7
 8002c2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	e000e010 	.word	0xe000e010

08002c40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f7ff fe1b 	bl	8002884 <__NVIC_SetPriorityGrouping>
}
 8002c4e:	bf00      	nop
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b086      	sub	sp, #24
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	60b9      	str	r1, [r7, #8]
 8002c60:	607a      	str	r2, [r7, #4]
 8002c62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c64:	2300      	movs	r3, #0
 8002c66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c68:	f7ff fe30 	bl	80028cc <__NVIC_GetPriorityGrouping>
 8002c6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	68b9      	ldr	r1, [r7, #8]
 8002c72:	6978      	ldr	r0, [r7, #20]
 8002c74:	f7ff ff44 	bl	8002b00 <NVIC_EncodePriority>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c7e:	4611      	mov	r1, r2
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff feed 	bl	8002a60 <__NVIC_SetPriority>
}
 8002c86:	bf00      	nop
 8002c88:	3718      	adds	r7, #24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b082      	sub	sp, #8
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	4603      	mov	r3, r0
 8002c96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7ff fe23 	bl	80028e8 <__NVIC_EnableIRQ>
}
 8002ca2:	bf00      	nop
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xxxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b082      	sub	sp, #8
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff fe31 	bl	8002920 <__NVIC_DisableIRQ>
}
 8002cbe:	bf00      	nop
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8002cca:	f7ff ff81 	bl	8002bd0 <__NVIC_SystemReset>

08002cce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b082      	sub	sp, #8
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f7ff ff90 	bl	8002bfc <SysTick_Config>
 8002cdc:	4603      	mov	r3, r0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
	...

08002ce8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = (MPU_Control | MPU_CTRL_ENABLE_Msk);
 8002cf0:	4a07      	ldr	r2, [pc, #28]	; (8002d10 <HAL_MPU_Enable+0x28>)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f043 0301 	orr.w	r3, r3, #1
 8002cf8:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8002cfa:	f3bf 8f4f 	dsb	sy
}
 8002cfe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002d00:	f3bf 8f6f 	isb	sy
}
 8002d04:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002d06:	bf00      	nop
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bc80      	pop	{r7}
 8002d0e:	4770      	bx	lr
 8002d10:	e000ed90 	.word	0xe000ed90

08002d14 <HAL_MPU_Disable>:
/**
  * @brief  Disable the MPU.
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002d18:	f3bf 8f5f 	dmb	sy
}
 8002d1c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable the MPU and clear the control register*/
  MPU->CTRL  = 0;
 8002d1e:	4b03      	ldr	r3, [pc, #12]	; (8002d2c <HAL_MPU_Disable+0x18>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	605a      	str	r2, [r3, #4]
}
 8002d24:	bf00      	nop
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bc80      	pop	{r7}
 8002d2a:	4770      	bx	lr
 8002d2c:	e000ed90 	.word	0xe000ed90

08002d30 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	785a      	ldrb	r2, [r3, #1]
 8002d3c:	4b1d      	ldr	r3, [pc, #116]	; (8002db4 <HAL_MPU_ConfigRegion+0x84>)
 8002d3e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d029      	beq.n	8002d9c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8002d48:	4a1a      	ldr	r2, [pc, #104]	; (8002db4 <HAL_MPU_ConfigRegion+0x84>)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	7b1b      	ldrb	r3, [r3, #12]
 8002d54:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	7adb      	ldrb	r3, [r3, #11]
 8002d5a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002d5c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	7a9b      	ldrb	r3, [r3, #10]
 8002d62:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002d64:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	7b5b      	ldrb	r3, [r3, #13]
 8002d6a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002d6c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	7b9b      	ldrb	r3, [r3, #14]
 8002d72:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002d74:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	7bdb      	ldrb	r3, [r3, #15]
 8002d7a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002d7c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	7a5b      	ldrb	r3, [r3, #9]
 8002d82:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002d84:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	7a1b      	ldrb	r3, [r3, #8]
 8002d8a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002d8c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	7812      	ldrb	r2, [r2, #0]
 8002d92:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002d94:	4a07      	ldr	r2, [pc, #28]	; (8002db4 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002d96:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002d98:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8002d9a:	e005      	b.n	8002da8 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8002d9c:	4b05      	ldr	r3, [pc, #20]	; (8002db4 <HAL_MPU_ConfigRegion+0x84>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8002da2:	4b04      	ldr	r3, [pc, #16]	; (8002db4 <HAL_MPU_ConfigRegion+0x84>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	611a      	str	r2, [r3, #16]
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bc80      	pop	{r7}
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	e000ed90 	.word	0xe000ed90

08002db8 <HAL_NVIC_GetPriorityGrouping>:
/**
  * @brief  Gets the priority grouping field from the NVIC Interrupt Controller.
  * @retval Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field)
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
 8002dbc:	f7ff fd86 	bl	80028cc <__NVIC_GetPriorityGrouping>
 8002dc0:	4603      	mov	r3, r0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <HAL_NVIC_GetPriority>:
  * @param  pPreemptPriority Pointer on the Preemptive priority value (starting from 0).
  * @param  pSubPriority Pointer on the Subpriority value (starting from 0).
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t* pPreemptPriority, uint32_t* pSubPriority)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b084      	sub	sp, #16
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
 8002dd0:	603b      	str	r3, [r7, #0]
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
 8002dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff fe6a 	bl	8002ab4 <__NVIC_GetPriority>
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	68b9      	ldr	r1, [r7, #8]
 8002de6:	f7ff febd 	bl	8002b64 <NVIC_DecodePriority>
}
 8002dea:	bf00      	nop
 8002dec:	3710      	adds	r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xxxx.h))  
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{ 
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b082      	sub	sp, #8
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	4603      	mov	r3, r0
 8002dfa:	71fb      	strb	r3, [r7, #7]
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8002dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff fdd1 	bl	80029a8 <__NVIC_SetPendingIRQ>
}
 8002e06:	bf00      	nop
 8002e08:	3708      	adds	r7, #8
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xxxx.h))  
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{ 
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b082      	sub	sp, #8
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	4603      	mov	r3, r0
 8002e16:	71fb      	strb	r3, [r7, #7]
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 8002e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff fda3 	bl	8002968 <__NVIC_GetPendingIRQ>
 8002e22:	4603      	mov	r3, r0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3708      	adds	r7, #8
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xxxx.h))  
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{ 
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	4603      	mov	r3, r0
 8002e34:	71fb      	strb	r3, [r7, #7]
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7ff fdd2 	bl	80029e4 <__NVIC_ClearPendingIRQ>
}
 8002e40:	bf00      	nop
 8002e42:	3708      	adds	r7, #8
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <HAL_NVIC_GetActive>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xxxx.h))  
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
{ 
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	4603      	mov	r3, r0
 8002e50:	71fb      	strb	r3, [r7, #7]
  /* Return 1 if active else 0 */
  return NVIC_GetActive(IRQn);
 8002e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff fde2 	bl	8002a20 <__NVIC_GetActive>
 8002e5c:	4603      	mov	r3, r0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
	...

08002e68 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b04      	cmp	r3, #4
 8002e74:	d106      	bne.n	8002e84 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8002e76:	4b09      	ldr	r3, [pc, #36]	; (8002e9c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a08      	ldr	r2, [pc, #32]	; (8002e9c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002e7c:	f043 0304 	orr.w	r3, r3, #4
 8002e80:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8002e82:	e005      	b.n	8002e90 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8002e84:	4b05      	ldr	r3, [pc, #20]	; (8002e9c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a04      	ldr	r2, [pc, #16]	; (8002e9c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002e8a:	f023 0304 	bic.w	r3, r3, #4
 8002e8e:	6013      	str	r3, [r2, #0]
}
 8002e90:	bf00      	nop
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bc80      	pop	{r7}
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	e000e010 	.word	0xe000e010

08002ea0 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8002ea4:	f000 f802 	bl	8002eac <HAL_SYSTICK_Callback>
}
 8002ea8:	bf00      	nop
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8002eb0:	bf00      	nop
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bc80      	pop	{r7}
 8002eb6:	4770      	bx	lr

08002eb8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e059      	b.n	8002f7e <HAL_DMA_Init+0xc6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	461a      	mov	r2, r3
 8002ed0:	4b2d      	ldr	r3, [pc, #180]	; (8002f88 <HAL_DMA_Init+0xd0>)
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d80f      	bhi.n	8002ef6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	461a      	mov	r2, r3
 8002edc:	4b2b      	ldr	r3, [pc, #172]	; (8002f8c <HAL_DMA_Init+0xd4>)
 8002ede:	4413      	add	r3, r2
 8002ee0:	4a2b      	ldr	r2, [pc, #172]	; (8002f90 <HAL_DMA_Init+0xd8>)
 8002ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee6:	091b      	lsrs	r3, r3, #4
 8002ee8:	009a      	lsls	r2, r3, #2
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a28      	ldr	r2, [pc, #160]	; (8002f94 <HAL_DMA_Init+0xdc>)
 8002ef2:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ef4:	e00e      	b.n	8002f14 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	461a      	mov	r2, r3
 8002efc:	4b26      	ldr	r3, [pc, #152]	; (8002f98 <HAL_DMA_Init+0xe0>)
 8002efe:	4413      	add	r3, r2
 8002f00:	4a23      	ldr	r2, [pc, #140]	; (8002f90 <HAL_DMA_Init+0xd8>)
 8002f02:	fba2 2303 	umull	r2, r3, r2, r3
 8002f06:	091b      	lsrs	r3, r3, #4
 8002f08:	009a      	lsls	r2, r3, #2
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a22      	ldr	r2, [pc, #136]	; (8002f9c <HAL_DMA_Init+0xe4>)
 8002f12:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2202      	movs	r2, #2
 8002f18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f2e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002f38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3714      	adds	r7, #20
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bc80      	pop	{r7}
 8002f86:	4770      	bx	lr
 8002f88:	40026407 	.word	0x40026407
 8002f8c:	bffd9ff8 	.word	0xbffd9ff8
 8002f90:	cccccccd 	.word	0xcccccccd
 8002f94:	40026000 	.word	0x40026000
 8002f98:	bffd9bf8 	.word	0xbffd9bf8
 8002f9c:	40026400 	.word	0x40026400

08002fa0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e052      	b.n	8003058 <HAL_DMA_DeInit+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f022 0201 	bic.w	r2, r2, #1
 8002fc0:	601a      	str	r2, [r3, #0]

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	4b26      	ldr	r3, [pc, #152]	; (8003064 <HAL_DMA_DeInit+0xc4>)
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d80f      	bhi.n	8002fee <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	4b24      	ldr	r3, [pc, #144]	; (8003068 <HAL_DMA_DeInit+0xc8>)
 8002fd6:	4413      	add	r3, r2
 8002fd8:	4a24      	ldr	r2, [pc, #144]	; (800306c <HAL_DMA_DeInit+0xcc>)
 8002fda:	fba2 2303 	umull	r2, r3, r2, r3
 8002fde:	091b      	lsrs	r3, r3, #4
 8002fe0:	009a      	lsls	r2, r3, #2
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a21      	ldr	r2, [pc, #132]	; (8003070 <HAL_DMA_DeInit+0xd0>)
 8002fea:	63da      	str	r2, [r3, #60]	; 0x3c
 8002fec:	e00e      	b.n	800300c <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	4b1f      	ldr	r3, [pc, #124]	; (8003074 <HAL_DMA_DeInit+0xd4>)
 8002ff6:	4413      	add	r3, r2
 8002ff8:	4a1c      	ldr	r2, [pc, #112]	; (800306c <HAL_DMA_DeInit+0xcc>)
 8002ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffe:	091b      	lsrs	r3, r3, #4
 8003000:	009a      	lsls	r2, r3, #2
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a1b      	ldr	r2, [pc, #108]	; (8003078 <HAL_DMA_DeInit+0xd8>)
 800300a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Reset DMA Channel CR register */
  hdma->Instance->CCR = 0U;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003018:	f003 021c 	and.w	r2, r3, #28
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003020:	2101      	movs	r1, #1
 8003022:	fa01 f202 	lsl.w	r2, r1, r2
 8003026:	605a      	str	r2, [r3, #4]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	bc80      	pop	{r7}
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	40026407 	.word	0x40026407
 8003068:	bffd9ff8 	.word	0xbffd9ff8
 800306c:	cccccccd 	.word	0xcccccccd
 8003070:	40026000 	.word	0x40026000
 8003074:	bffd9bf8 	.word	0xbffd9bf8
 8003078:	40026400 	.word	0x40026400

0800307c <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
 8003088:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800308a:	2300      	movs	r3, #0
 800308c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d101      	bne.n	800309c <HAL_DMA_Start+0x20>
 8003098:	2302      	movs	r3, #2
 800309a:	e02e      	b.n	80030fa <HAL_DMA_Start+0x7e>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d11d      	bne.n	80030ec <HAL_DMA_Start+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2202      	movs	r2, #2
 80030b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 0201 	bic.w	r2, r2, #1
 80030cc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	68b9      	ldr	r1, [r7, #8]
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f000 faff 	bl	80036d8 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f042 0201 	orr.w	r2, r2, #1
 80030e8:	601a      	str	r2, [r3, #0]
 80030ea:	e005      	b.n	80030f8 <HAL_DMA_Start+0x7c>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 2020 	strb.w	r2, [r3, #32]
    status = HAL_BUSY;
 80030f4:	2302      	movs	r3, #2
 80030f6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80030f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3718      	adds	r7, #24
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b086      	sub	sp, #24
 8003106:	af00      	add	r7, sp, #0
 8003108:	60f8      	str	r0, [r7, #12]
 800310a:	60b9      	str	r1, [r7, #8]
 800310c:	607a      	str	r2, [r7, #4]
 800310e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003110:	2300      	movs	r3, #0
 8003112:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f893 3020 	ldrb.w	r3, [r3, #32]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d101      	bne.n	8003122 <HAL_DMA_Start_IT+0x20>
 800311e:	2302      	movs	r3, #2
 8003120:	e04b      	b.n	80031ba <HAL_DMA_Start_IT+0xb8>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2201      	movs	r2, #1
 8003126:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b01      	cmp	r3, #1
 8003134:	d13a      	bne.n	80031ac <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2202      	movs	r2, #2
 800313a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f022 0201 	bic.w	r2, r2, #1
 8003152:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	68b9      	ldr	r1, [r7, #8]
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f000 fabc 	bl	80036d8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003164:	2b00      	cmp	r3, #0
 8003166:	d008      	beq.n	800317a <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f042 020e 	orr.w	r2, r2, #14
 8003176:	601a      	str	r2, [r3, #0]
 8003178:	e00f      	b.n	800319a <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f022 0204 	bic.w	r2, r2, #4
 8003188:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f042 020a 	orr.w	r2, r2, #10
 8003198:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f042 0201 	orr.w	r2, r2, #1
 80031a8:	601a      	str	r2, [r3, #0]
 80031aa:	e005      	b.n	80031b8 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80031b4:	2302      	movs	r3, #2
 80031b6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80031b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3718      	adds	r7, #24
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80031c2:	b480      	push	{r7}
 80031c4:	b085      	sub	sp, #20
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031ca:	2300      	movs	r3, #0
 80031cc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d008      	beq.n	80031ec <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2204      	movs	r2, #4
 80031de:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e022      	b.n	8003232 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f022 020e 	bic.w	r2, r2, #14
 80031fa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f022 0201 	bic.w	r2, r2, #1
 800320a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003210:	f003 021c 	and.w	r2, r3, #28
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003218:	2101      	movs	r1, #1
 800321a:	fa01 f202 	lsl.w	r2, r1, r2
 800321e:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8003230:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003232:	4618      	mov	r0, r3
 8003234:	3714      	adds	r7, #20
 8003236:	46bd      	mov	sp, r7
 8003238:	bc80      	pop	{r7}
 800323a:	4770      	bx	lr

0800323c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003244:	2300      	movs	r3, #0
 8003246:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800324e:	b2db      	uxtb	r3, r3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d005      	beq.n	8003260 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2204      	movs	r2, #4
 8003258:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	73fb      	strb	r3, [r7, #15]
 800325e:	e029      	b.n	80032b4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f022 020e 	bic.w	r2, r2, #14
 800326e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f022 0201 	bic.w	r2, r2, #1
 800327e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003284:	f003 021c 	and.w	r2, r3, #28
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800328c:	2101      	movs	r1, #1
 800328e:	fa01 f202 	lsl.w	r2, r1, r2
 8003292:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d003      	beq.n	80032b4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	4798      	blx	r3
    }
  }
  return status;
 80032b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <HAL_DMA_PollForTransfer>:
  * @param  CompleteLevel Specifies the DMA level complete.
  * @param  Timeout       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b086      	sub	sp, #24
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	60f8      	str	r0, [r7, #12]
 80032c6:	460b      	mov	r3, r1
 80032c8:	607a      	str	r2, [r7, #4]
 80032ca:	72fb      	strb	r3, [r7, #11]
  uint32_t temp;
  uint32_t tickstart;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d008      	beq.n	80032ea <HAL_DMA_PollForTransfer+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2204      	movs	r2, #4
 80032dc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 2020 	strb.w	r2, [r3, #32]
    return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e08c      	b.n	8003404 <HAL_DMA_PollForTransfer+0x146>
  }

  /* Polling mode not supported in circular mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != 0U)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0320 	and.w	r3, r3, #32
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d005      	beq.n	8003304 <HAL_DMA_PollForTransfer+0x46>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032fe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e07f      	b.n	8003404 <HAL_DMA_PollForTransfer+0x146>
  }

  /* Get the level transfer complete flag */
  if (HAL_DMA_FULL_TRANSFER == CompleteLevel)
 8003304:	7afb      	ldrb	r3, [r7, #11]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d108      	bne.n	800331c <HAL_DMA_PollForTransfer+0x5e>
  {
    /* Transfer Complete flag */
    temp = DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	f003 031c 	and.w	r3, r3, #28
 8003312:	2202      	movs	r2, #2
 8003314:	fa02 f303 	lsl.w	r3, r2, r3
 8003318:	617b      	str	r3, [r7, #20]
 800331a:	e007      	b.n	800332c <HAL_DMA_PollForTransfer+0x6e>
  }
  else
  {
    /* Half Transfer Complete flag */
    temp = DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003320:	f003 031c 	and.w	r3, r3, #28
 8003324:	2204      	movs	r2, #4
 8003326:	fa02 f303 	lsl.w	r3, r2, r3
 800332a:	617b      	str	r3, [r7, #20]
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800332c:	f7ff f992 	bl	8002654 <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

  while((hdma->DmaBaseAddress->ISR & temp) == 0U)
 8003332:	e03f      	b.n	80033b4 <HAL_DMA_PollForTransfer+0xf6>
  {
    if((hdma->DmaBaseAddress->ISR & (DMA_FLAG_TE1 << (hdma->ChannelIndex& 0x1CU))) != 0U)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	f003 031c 	and.w	r3, r3, #28
 8003342:	2108      	movs	r1, #8
 8003344:	fa01 f303 	lsl.w	r3, r1, r3
 8003348:	4013      	ands	r3, r2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d016      	beq.n	800337c <HAL_DMA_PollForTransfer+0xbe>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Clear all flags */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003352:	f003 021c 	and.w	r2, r3, #28
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800335a:	2101      	movs	r1, #1
 800335c:	fa01 f202 	lsl.w	r2, r1, r2
 8003360:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2201      	movs	r2, #1
 8003366:	639a      	str	r2, [r3, #56]	; 0x38

      /* Change the DMA state */
      hdma->State= HAL_DMA_STATE_READY;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e043      	b.n	8003404 <HAL_DMA_PollForTransfer+0x146>
    }
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003382:	d017      	beq.n	80033b4 <HAL_DMA_PollForTransfer+0xf6>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) ||  (Timeout == 0U))
 8003384:	f7ff f966 	bl	8002654 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	429a      	cmp	r2, r3
 8003392:	d302      	bcc.n	800339a <HAL_DMA_PollForTransfer+0xdc>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10c      	bne.n	80033b4 <HAL_DMA_PollForTransfer+0xf6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2220      	movs	r2, #32
 800339e:	639a      	str	r2, [r3, #56]	; 0x38

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e027      	b.n	8003404 <HAL_DMA_PollForTransfer+0x146>
  while((hdma->DmaBaseAddress->ISR & temp) == 0U)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	4013      	ands	r3, r2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d0b8      	beq.n	8003334 <HAL_DMA_PollForTransfer+0x76>
      }
    }
  }

  if(HAL_DMA_FULL_TRANSFER == CompleteLevel)
 80033c2:	7afb      	ldrb	r3, [r7, #11]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d10e      	bne.n	80033e6 <HAL_DMA_PollForTransfer+0x128>
  {
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_TC1 << (hdma->ChannelIndex& 0x1CU));
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033cc:	f003 021c 	and.w	r2, r3, #28
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d4:	2102      	movs	r1, #2
 80033d6:	fa01 f202 	lsl.w	r2, r1, r2
 80033da:	605a      	str	r2, [r3, #4]

    /* The selected Channelx EN bit is cleared (DMA is disabled and
    all transfers are complete) */
    hdma->State = HAL_DMA_STATE_READY;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80033e4:	e009      	b.n	80033fa <HAL_DMA_PollForTransfer+0x13c>
  }
  else
  {
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU));
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ea:	f003 021c 	and.w	r2, r3, #28
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f2:	2104      	movs	r1, #4
 80033f4:	fa01 f202 	lsl.w	r2, r1, r2
 80033f8:	605a      	str	r2, [r3, #4]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003402:	2300      	movs	r3, #0
}
 8003404:	4618      	mov	r0, r3
 8003406:	3718      	adds	r7, #24
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003428:	f003 031c 	and.w	r3, r3, #28
 800342c:	2204      	movs	r2, #4
 800342e:	409a      	lsls	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	4013      	ands	r3, r2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d026      	beq.n	8003486 <HAL_DMA_IRQHandler+0x7a>
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	f003 0304 	and.w	r3, r3, #4
 800343e:	2b00      	cmp	r3, #0
 8003440:	d021      	beq.n	8003486 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0320 	and.w	r3, r3, #32
 800344c:	2b00      	cmp	r3, #0
 800344e:	d107      	bne.n	8003460 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f022 0204 	bic.w	r2, r2, #4
 800345e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003464:	f003 021c 	and.w	r2, r3, #28
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800346c:	2104      	movs	r1, #4
 800346e:	fa01 f202 	lsl.w	r2, r1, r2
 8003472:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003478:	2b00      	cmp	r3, #0
 800347a:	d071      	beq.n	8003560 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003484:	e06c      	b.n	8003560 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	f003 031c 	and.w	r3, r3, #28
 800348e:	2202      	movs	r2, #2
 8003490:	409a      	lsls	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	4013      	ands	r3, r2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d02e      	beq.n	80034f8 <HAL_DMA_IRQHandler+0xec>
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d029      	beq.n	80034f8 <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0320 	and.w	r3, r3, #32
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d10b      	bne.n	80034ca <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f022 020a 	bic.w	r2, r2, #10
 80034c0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	f003 021c 	and.w	r2, r3, #28
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d6:	2102      	movs	r1, #2
 80034d8:	fa01 f202 	lsl.w	r2, r1, r2
 80034dc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d038      	beq.n	8003560 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80034f6:	e033      	b.n	8003560 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fc:	f003 031c 	and.w	r3, r3, #28
 8003500:	2208      	movs	r2, #8
 8003502:	409a      	lsls	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	4013      	ands	r3, r2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d02a      	beq.n	8003562 <HAL_DMA_IRQHandler+0x156>
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	f003 0308 	and.w	r3, r3, #8
 8003512:	2b00      	cmp	r3, #0
 8003514:	d025      	beq.n	8003562 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f022 020e 	bic.w	r2, r2, #14
 8003524:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	f003 021c 	and.w	r2, r3, #28
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003532:	2101      	movs	r1, #1
 8003534:	fa01 f202 	lsl.w	r2, r1, r2
 8003538:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2201      	movs	r2, #1
 800353e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003554:	2b00      	cmp	r3, #0
 8003556:	d004      	beq.n	8003562 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003560:	bf00      	nop
 8003562:	bf00      	nop
}
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
	...

0800356c <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callback function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
{
 800356c:	b480      	push	{r7}
 800356e:	b087      	sub	sp, #28
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	460b      	mov	r3, r1
 8003576:	607a      	str	r2, [r7, #4]
 8003578:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800357a:	2300      	movs	r3, #0
 800357c:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d101      	bne.n	800358c <HAL_DMA_RegisterCallback+0x20>
 8003588:	2302      	movs	r3, #2
 800358a:	e031      	b.n	80035f0 <HAL_DMA_RegisterCallback+0x84>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800359a:	b2db      	uxtb	r3, r3
 800359c:	2b01      	cmp	r3, #1
 800359e:	d120      	bne.n	80035e2 <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 80035a0:	7afb      	ldrb	r3, [r7, #11]
 80035a2:	2b03      	cmp	r3, #3
 80035a4:	d81a      	bhi.n	80035dc <HAL_DMA_RegisterCallback+0x70>
 80035a6:	a201      	add	r2, pc, #4	; (adr r2, 80035ac <HAL_DMA_RegisterCallback+0x40>)
 80035a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ac:	080035bd 	.word	0x080035bd
 80035b0:	080035c5 	.word	0x080035c5
 80035b4:	080035cd 	.word	0x080035cd
 80035b8:	080035d5 	.word	0x080035d5
    {
     case  HAL_DMA_XFER_CPLT_CB_ID:
           hdma->XferCpltCallback = pCallback;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	629a      	str	r2, [r3, #40]	; 0x28
           break;
 80035c2:	e010      	b.n	80035e6 <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_HALFCPLT_CB_ID:
           hdma->XferHalfCpltCallback = pCallback;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	62da      	str	r2, [r3, #44]	; 0x2c
           break;
 80035ca:	e00c      	b.n	80035e6 <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_ERROR_CB_ID:
           hdma->XferErrorCallback = pCallback;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	631a      	str	r2, [r3, #48]	; 0x30
           break;
 80035d2:	e008      	b.n	80035e6 <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_ABORT_CB_ID:
           hdma->XferAbortCallback = pCallback;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	635a      	str	r2, [r3, #52]	; 0x34
           break;
 80035da:	e004      	b.n	80035e6 <HAL_DMA_RegisterCallback+0x7a>

     default:
           status = HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	75fb      	strb	r3, [r7, #23]
           break;
 80035e0:	e001      	b.n	80035e6 <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80035ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	371c      	adds	r7, #28
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bc80      	pop	{r7}
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop

080035fc <HAL_DMA_UnRegisterCallback>:
  * @param  CallbackID           User Callback identifier
  *                               a HAL_DMA_CallbackIDTypeDef ENUM as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b085      	sub	sp, #20
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	460b      	mov	r3, r1
 8003606:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003608:	2300      	movs	r3, #0
 800360a:	73fb      	strb	r3, [r7, #15]

    /* Process locked */
  __HAL_LOCK(hdma);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d101      	bne.n	800361a <HAL_DMA_UnRegisterCallback+0x1e>
 8003616:	2302      	movs	r3, #2
 8003618:	e041      	b.n	800369e <HAL_DMA_UnRegisterCallback+0xa2>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b01      	cmp	r3, #1
 800362c:	d130      	bne.n	8003690 <HAL_DMA_UnRegisterCallback+0x94>
  {
    switch (CallbackID)
 800362e:	78fb      	ldrb	r3, [r7, #3]
 8003630:	2b04      	cmp	r3, #4
 8003632:	d82a      	bhi.n	800368a <HAL_DMA_UnRegisterCallback+0x8e>
 8003634:	a201      	add	r2, pc, #4	; (adr r2, 800363c <HAL_DMA_UnRegisterCallback+0x40>)
 8003636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800363a:	bf00      	nop
 800363c:	08003651 	.word	0x08003651
 8003640:	08003659 	.word	0x08003659
 8003644:	08003661 	.word	0x08003661
 8003648:	08003669 	.word	0x08003669
 800364c:	08003671 	.word	0x08003671
    {
     case  HAL_DMA_XFER_CPLT_CB_ID:
           hdma->XferCpltCallback = NULL;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	629a      	str	r2, [r3, #40]	; 0x28
           break;
 8003656:	e01d      	b.n	8003694 <HAL_DMA_UnRegisterCallback+0x98>

     case  HAL_DMA_XFER_HALFCPLT_CB_ID:
           hdma->XferHalfCpltCallback = NULL;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	62da      	str	r2, [r3, #44]	; 0x2c
           break;
 800365e:	e019      	b.n	8003694 <HAL_DMA_UnRegisterCallback+0x98>

     case  HAL_DMA_XFER_ERROR_CB_ID:
           hdma->XferErrorCallback = NULL;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	631a      	str	r2, [r3, #48]	; 0x30
           break;
 8003666:	e015      	b.n	8003694 <HAL_DMA_UnRegisterCallback+0x98>

     case  HAL_DMA_XFER_ABORT_CB_ID:
           hdma->XferAbortCallback = NULL;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	635a      	str	r2, [r3, #52]	; 0x34
           break;
 800366e:	e011      	b.n	8003694 <HAL_DMA_UnRegisterCallback+0x98>

    case   HAL_DMA_XFER_ALL_CB_ID:
           hdma->XferCpltCallback = NULL;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	629a      	str	r2, [r3, #40]	; 0x28
           hdma->XferHalfCpltCallback = NULL;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	62da      	str	r2, [r3, #44]	; 0x2c
           hdma->XferErrorCallback = NULL;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	631a      	str	r2, [r3, #48]	; 0x30
           hdma->XferAbortCallback = NULL;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	635a      	str	r2, [r3, #52]	; 0x34
           break;
 8003688:	e004      	b.n	8003694 <HAL_DMA_UnRegisterCallback+0x98>

    default:
           status = HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	73fb      	strb	r3, [r7, #15]
           break;
 800368e:	e001      	b.n	8003694 <HAL_DMA_UnRegisterCallback+0x98>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800369c:	7bfb      	ldrb	r3, [r7, #15]
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3714      	adds	r7, #20
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bc80      	pop	{r7}
 80036a6:	4770      	bx	lr

080036a8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80036b6:	b2db      	uxtb	r3, r3
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	bc80      	pop	{r7}
 80036c0:	4770      	bx	lr

080036c2 <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80036c2:	b480      	push	{r7}
 80036c4:	b083      	sub	sp, #12
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bc80      	pop	{r7}
 80036d6:	4770      	bx	lr

080036d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036d8:	b480      	push	{r7}
 80036da:	b085      	sub	sp, #20
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
 80036e4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ea:	f003 021c 	and.w	r2, r3, #28
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f2:	2101      	movs	r1, #1
 80036f4:	fa01 f202 	lsl.w	r2, r1, r2
 80036f8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	683a      	ldr	r2, [r7, #0]
 8003700:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	2b10      	cmp	r3, #16
 8003708:	d108      	bne.n	800371c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68ba      	ldr	r2, [r7, #8]
 8003718:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800371a:	e007      	b.n	800372c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	60da      	str	r2, [r3, #12]
}
 800372c:	bf00      	nop
 800372e:	3714      	adds	r7, #20
 8003730:	46bd      	mov	sp, r7
 8003732:	bc80      	pop	{r7}
 8003734:	4770      	bx	lr
	...

08003738 <HAL_EXTI_SetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on EXTI configuration to be set.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_SetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
 8003738:	b480      	push	{r7}
 800373a:	b087      	sub	sp, #28
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d002      	beq.n	800374e <HAL_EXTI_SetConfigLine+0x16>
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_EXTI_SetConfigLine+0x1a>
  {
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e08f      	b.n	8003872 <HAL_EXTI_SetConfigLine+0x13a>
  /* Check parameters */
  assert_param(IS_EXTI_LINE(pExtiConfig->Line));
  assert_param(IS_EXTI_MODE(pExtiConfig->Mode));

  /* Assign line number to handle */
  hexti->Line = pExtiConfig->Line;
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	601a      	str	r2, [r3, #0]

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 031f 	and.w	r3, r3, #31
 8003762:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 8003764:	2201      	movs	r2, #1
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	fa02 f303 	lsl.w	r3, r2, r3
 800376c:	613b      	str	r3, [r7, #16]

  /* Configure triggers for configurable lines */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d052      	beq.n	8003820 <HAL_EXTI_SetConfigLine+0xe8>
  {
    assert_param(IS_EXTI_TRIGGER(pExtiConfig->Trigger));

    /* Configure rising trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b00      	cmp	r3, #0
 8003784:	d006      	beq.n	8003794 <HAL_EXTI_SetConfigLine+0x5c>
    {
      EXTI->RTSR |= maskline;
 8003786:	4b3d      	ldr	r3, [pc, #244]	; (800387c <HAL_EXTI_SetConfigLine+0x144>)
 8003788:	689a      	ldr	r2, [r3, #8]
 800378a:	493c      	ldr	r1, [pc, #240]	; (800387c <HAL_EXTI_SetConfigLine+0x144>)
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	4313      	orrs	r3, r2
 8003790:	608b      	str	r3, [r1, #8]
 8003792:	e006      	b.n	80037a2 <HAL_EXTI_SetConfigLine+0x6a>
    }
    else
    {
      EXTI->RTSR &= ~maskline;
 8003794:	4b39      	ldr	r3, [pc, #228]	; (800387c <HAL_EXTI_SetConfigLine+0x144>)
 8003796:	689a      	ldr	r2, [r3, #8]
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	43db      	mvns	r3, r3
 800379c:	4937      	ldr	r1, [pc, #220]	; (800387c <HAL_EXTI_SetConfigLine+0x144>)
 800379e:	4013      	ands	r3, r2
 80037a0:	608b      	str	r3, [r1, #8]
    }

    /* Configure falling trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d006      	beq.n	80037bc <HAL_EXTI_SetConfigLine+0x84>
    {
      EXTI->FTSR |= maskline;
 80037ae:	4b33      	ldr	r3, [pc, #204]	; (800387c <HAL_EXTI_SetConfigLine+0x144>)
 80037b0:	68da      	ldr	r2, [r3, #12]
 80037b2:	4932      	ldr	r1, [pc, #200]	; (800387c <HAL_EXTI_SetConfigLine+0x144>)
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	60cb      	str	r3, [r1, #12]
 80037ba:	e006      	b.n	80037ca <HAL_EXTI_SetConfigLine+0x92>
    }
    else
    {
      EXTI->FTSR &= ~maskline;
 80037bc:	4b2f      	ldr	r3, [pc, #188]	; (800387c <HAL_EXTI_SetConfigLine+0x144>)
 80037be:	68da      	ldr	r2, [r3, #12]
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	43db      	mvns	r3, r3
 80037c4:	492d      	ldr	r1, [pc, #180]	; (800387c <HAL_EXTI_SetConfigLine+0x144>)
 80037c6:	4013      	ands	r3, r2
 80037c8:	60cb      	str	r3, [r1, #12]
    }


    /* Configure gpio port selection in case of gpio exti line */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80037d2:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80037d6:	d123      	bne.n	8003820 <HAL_EXTI_SetConfigLine+0xe8>
    {
      assert_param(IS_EXTI_GPIO_PORT(pExtiConfig->GPIOSel));
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
 80037d8:	4a29      	ldr	r2, [pc, #164]	; (8003880 <HAL_EXTI_SetConfigLine+0x148>)
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	089b      	lsrs	r3, r3, #2
 80037de:	3302      	adds	r3, #2
 80037e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037e4:	60fb      	str	r3, [r7, #12]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	f003 0303 	and.w	r3, r3, #3
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	220f      	movs	r2, #15
 80037f0:	fa02 f303 	lsl.w	r3, r2, r3
 80037f4:	43db      	mvns	r3, r3
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	4013      	ands	r3, r2
 80037fa:	60fb      	str	r3, [r7, #12]
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	68da      	ldr	r2, [r3, #12]
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	f003 0303 	and.w	r3, r3, #3
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	fa02 f303 	lsl.w	r3, r2, r3
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	4313      	orrs	r3, r2
 8003810:	60fb      	str	r3, [r7, #12]
      SYSCFG->EXTICR[linepos >> 2u] = regval;
 8003812:	491b      	ldr	r1, [pc, #108]	; (8003880 <HAL_EXTI_SetConfigLine+0x148>)
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	089b      	lsrs	r3, r3, #2
 8003818:	3302      	adds	r3, #2
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }

  /* Configure interrupt mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f003 0301 	and.w	r3, r3, #1
 8003828:	2b00      	cmp	r3, #0
 800382a:	d006      	beq.n	800383a <HAL_EXTI_SetConfigLine+0x102>
  {
    EXTI->IMR |= maskline;
 800382c:	4b13      	ldr	r3, [pc, #76]	; (800387c <HAL_EXTI_SetConfigLine+0x144>)
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	4912      	ldr	r1, [pc, #72]	; (800387c <HAL_EXTI_SetConfigLine+0x144>)
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	4313      	orrs	r3, r2
 8003836:	600b      	str	r3, [r1, #0]
 8003838:	e006      	b.n	8003848 <HAL_EXTI_SetConfigLine+0x110>
  }
  else
  {
    EXTI->IMR &= ~maskline;
 800383a:	4b10      	ldr	r3, [pc, #64]	; (800387c <HAL_EXTI_SetConfigLine+0x144>)
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	43db      	mvns	r3, r3
 8003842:	490e      	ldr	r1, [pc, #56]	; (800387c <HAL_EXTI_SetConfigLine+0x144>)
 8003844:	4013      	ands	r3, r2
 8003846:	600b      	str	r3, [r1, #0]
  }

  /* Configure event mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d006      	beq.n	8003862 <HAL_EXTI_SetConfigLine+0x12a>
  {
    EXTI->EMR |= maskline;
 8003854:	4b09      	ldr	r3, [pc, #36]	; (800387c <HAL_EXTI_SetConfigLine+0x144>)
 8003856:	685a      	ldr	r2, [r3, #4]
 8003858:	4908      	ldr	r1, [pc, #32]	; (800387c <HAL_EXTI_SetConfigLine+0x144>)
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	4313      	orrs	r3, r2
 800385e:	604b      	str	r3, [r1, #4]
 8003860:	e006      	b.n	8003870 <HAL_EXTI_SetConfigLine+0x138>
  }
  else
  {
    EXTI->EMR &= ~maskline;
 8003862:	4b06      	ldr	r3, [pc, #24]	; (800387c <HAL_EXTI_SetConfigLine+0x144>)
 8003864:	685a      	ldr	r2, [r3, #4]
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	43db      	mvns	r3, r3
 800386a:	4904      	ldr	r1, [pc, #16]	; (800387c <HAL_EXTI_SetConfigLine+0x144>)
 800386c:	4013      	ands	r3, r2
 800386e:	604b      	str	r3, [r1, #4]
  }

  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	371c      	adds	r7, #28
 8003876:	46bd      	mov	sp, r7
 8003878:	bc80      	pop	{r7}
 800387a:	4770      	bx	lr
 800387c:	40010400 	.word	0x40010400
 8003880:	40010000 	.word	0x40010000

08003884 <HAL_EXTI_GetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on structure to store Exti configuration.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
 8003884:	b480      	push	{r7}
 8003886:	b087      	sub	sp, #28
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d002      	beq.n	800389a <HAL_EXTI_GetConfigLine+0x16>
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d101      	bne.n	800389e <HAL_EXTI_GetConfigLine+0x1a>
  {
    return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e061      	b.n	8003962 <HAL_EXTI_GetConfigLine+0xde>

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* Store handle line number to configuration structure */
  pExtiConfig->Line = hexti->Line;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	601a      	str	r2, [r3, #0]

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 031f 	and.w	r3, r3, #31
 80038ae:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 80038b0:	2201      	movs	r2, #1
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	fa02 f303 	lsl.w	r3, r2, r3
 80038b8:	613b      	str	r3, [r7, #16]

  /* 1] Get core mode : interrupt */

  /* Check if selected line is enable */
  if ((EXTI->IMR & maskline) != 0x00u)
 80038ba:	4b2c      	ldr	r3, [pc, #176]	; (800396c <HAL_EXTI_GetConfigLine+0xe8>)
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	4013      	ands	r3, r2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d003      	beq.n	80038ce <HAL_EXTI_GetConfigLine+0x4a>
  {
    pExtiConfig->Mode = EXTI_MODE_INTERRUPT;
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	2201      	movs	r2, #1
 80038ca:	605a      	str	r2, [r3, #4]
 80038cc:	e002      	b.n	80038d4 <HAL_EXTI_GetConfigLine+0x50>
  }
  else
  {
    pExtiConfig->Mode = EXTI_MODE_NONE;
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	2200      	movs	r2, #0
 80038d2:	605a      	str	r2, [r3, #4]
  }

  /* Get event mode */
  /* Check if selected line is enable */
  if ((EXTI->EMR & maskline) != 0x00u)
 80038d4:	4b25      	ldr	r3, [pc, #148]	; (800396c <HAL_EXTI_GetConfigLine+0xe8>)
 80038d6:	685a      	ldr	r2, [r3, #4]
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	4013      	ands	r3, r2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d005      	beq.n	80038ec <HAL_EXTI_GetConfigLine+0x68>
  {
    pExtiConfig->Mode |= EXTI_MODE_EVENT;
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f043 0202 	orr.w	r2, r3, #2
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	605a      	str	r2, [r3, #4]
  }

  /* Get default Trigger and GPIOSel configuration */
  pExtiConfig->Trigger = EXTI_TRIGGER_NONE;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	2200      	movs	r2, #0
 80038f0:	609a      	str	r2, [r3, #8]
  pExtiConfig->GPIOSel = 0x00u;
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	2200      	movs	r2, #0
 80038f6:	60da      	str	r2, [r3, #12]

  /* 2] Get trigger for configurable lines : rising */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d02d      	beq.n	8003960 <HAL_EXTI_GetConfigLine+0xdc>
  {
    /* Check if configuration of selected line is enable */
    if ((EXTI->RTSR & maskline) != 0x00u)
 8003904:	4b19      	ldr	r3, [pc, #100]	; (800396c <HAL_EXTI_GetConfigLine+0xe8>)
 8003906:	689a      	ldr	r2, [r3, #8]
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	4013      	ands	r3, r2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d002      	beq.n	8003916 <HAL_EXTI_GetConfigLine+0x92>
    {
      pExtiConfig->Trigger = EXTI_TRIGGER_RISING;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	2201      	movs	r2, #1
 8003914:	609a      	str	r2, [r3, #8]
    }

    /* Get falling configuration */
    /* Check if configuration of selected line is enable */
    if ((EXTI->FTSR & maskline) != 0x00u)
 8003916:	4b15      	ldr	r3, [pc, #84]	; (800396c <HAL_EXTI_GetConfigLine+0xe8>)
 8003918:	68da      	ldr	r2, [r3, #12]
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	4013      	ands	r3, r2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d005      	beq.n	800392e <HAL_EXTI_GetConfigLine+0xaa>
    {
      pExtiConfig->Trigger |= EXTI_TRIGGER_FALLING;
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f043 0202 	orr.w	r2, r3, #2
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	609a      	str	r2, [r3, #8]
    }

    /* Get Gpio port selection for gpio lines */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8003936:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800393a:	d111      	bne.n	8003960 <HAL_EXTI_GetConfigLine+0xdc>
    {
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
 800393c:	4a0c      	ldr	r2, [pc, #48]	; (8003970 <HAL_EXTI_GetConfigLine+0xec>)
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	089b      	lsrs	r3, r3, #2
 8003942:	3302      	adds	r3, #2
 8003944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003948:	60fb      	str	r3, [r7, #12]
      pExtiConfig->GPIOSel = (regval >> (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u))) & SYSCFG_EXTICR1_EXTI0;
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f003 0303 	and.w	r3, r3, #3
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	fa22 f303 	lsr.w	r3, r2, r3
 8003958:	f003 020f 	and.w	r2, r3, #15
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	60da      	str	r2, [r3, #12]
    }
  }

  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	371c      	adds	r7, #28
 8003966:	46bd      	mov	sp, r7
 8003968:	bc80      	pop	{r7}
 800396a:	4770      	bx	lr
 800396c:	40010400 	.word	0x40010400
 8003970:	40010000 	.word	0x40010000

08003974 <HAL_EXTI_ClearConfigLine>:
  * @brief  Clear whole configuration of a dedicated Exti line.
  * @param  hexti Exti handle.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_ClearConfigLine(EXTI_HandleTypeDef *hexti)
{
 8003974:	b480      	push	{r7}
 8003976:	b087      	sub	sp, #28
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if (hexti == NULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d101      	bne.n	8003986 <HAL_EXTI_ClearConfigLine+0x12>
  {
    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e04c      	b.n	8003a20 <HAL_EXTI_ClearConfigLine+0xac>

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* compute line mask */
  linepos = (hexti->Line & EXTI_PIN_MASK);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 031f 	and.w	r3, r3, #31
 800398e:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 8003990:	2201      	movs	r2, #1
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	fa02 f303 	lsl.w	r3, r2, r3
 8003998:	613b      	str	r3, [r7, #16]

  /* 1] Clear interrupt mode */
  EXTI->IMR = (EXTI->IMR & ~maskline);
 800399a:	4b24      	ldr	r3, [pc, #144]	; (8003a2c <HAL_EXTI_ClearConfigLine+0xb8>)
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	43db      	mvns	r3, r3
 80039a2:	4922      	ldr	r1, [pc, #136]	; (8003a2c <HAL_EXTI_ClearConfigLine+0xb8>)
 80039a4:	4013      	ands	r3, r2
 80039a6:	600b      	str	r3, [r1, #0]

  /* 2] Clear event mode */
  EXTI->EMR = (EXTI->EMR & ~maskline);
 80039a8:	4b20      	ldr	r3, [pc, #128]	; (8003a2c <HAL_EXTI_ClearConfigLine+0xb8>)
 80039aa:	685a      	ldr	r2, [r3, #4]
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	43db      	mvns	r3, r3
 80039b0:	491e      	ldr	r1, [pc, #120]	; (8003a2c <HAL_EXTI_ClearConfigLine+0xb8>)
 80039b2:	4013      	ands	r3, r2
 80039b4:	604b      	str	r3, [r1, #4]

  /* 3] Clear triggers in case of configurable lines */
  if ((hexti->Line & EXTI_CONFIG) != 0x00u)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d02d      	beq.n	8003a1e <HAL_EXTI_ClearConfigLine+0xaa>
  {
    EXTI->RTSR = (EXTI->RTSR & ~maskline);
 80039c2:	4b1a      	ldr	r3, [pc, #104]	; (8003a2c <HAL_EXTI_ClearConfigLine+0xb8>)
 80039c4:	689a      	ldr	r2, [r3, #8]
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	43db      	mvns	r3, r3
 80039ca:	4918      	ldr	r1, [pc, #96]	; (8003a2c <HAL_EXTI_ClearConfigLine+0xb8>)
 80039cc:	4013      	ands	r3, r2
 80039ce:	608b      	str	r3, [r1, #8]
    EXTI->FTSR = (EXTI->FTSR & ~maskline);
 80039d0:	4b16      	ldr	r3, [pc, #88]	; (8003a2c <HAL_EXTI_ClearConfigLine+0xb8>)
 80039d2:	68da      	ldr	r2, [r3, #12]
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	43db      	mvns	r3, r3
 80039d8:	4914      	ldr	r1, [pc, #80]	; (8003a2c <HAL_EXTI_ClearConfigLine+0xb8>)
 80039da:	4013      	ands	r3, r2
 80039dc:	60cb      	str	r3, [r1, #12]

    /* Get Gpio port selection for gpio lines */
    if ((hexti->Line & EXTI_GPIO) == EXTI_GPIO)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80039e6:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80039ea:	d118      	bne.n	8003a1e <HAL_EXTI_ClearConfigLine+0xaa>
    {
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
 80039ec:	4a10      	ldr	r2, [pc, #64]	; (8003a30 <HAL_EXTI_ClearConfigLine+0xbc>)
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	089b      	lsrs	r3, r3, #2
 80039f2:	3302      	adds	r3, #2
 80039f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039f8:	60fb      	str	r3, [r7, #12]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	f003 0303 	and.w	r3, r3, #3
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	220f      	movs	r2, #15
 8003a04:	fa02 f303 	lsl.w	r3, r2, r3
 8003a08:	43db      	mvns	r3, r3
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	60fb      	str	r3, [r7, #12]
      SYSCFG->EXTICR[linepos >> 2u] = regval;
 8003a10:	4907      	ldr	r1, [pc, #28]	; (8003a30 <HAL_EXTI_ClearConfigLine+0xbc>)
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	089b      	lsrs	r3, r3, #2
 8003a16:	3302      	adds	r3, #2
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }

  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	371c      	adds	r7, #28
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bc80      	pop	{r7}
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	40010400 	.word	0x40010400
 8003a30:	40010000 	.word	0x40010000

08003a34 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8003a34:	b480      	push	{r7}
 8003a36:	b087      	sub	sp, #28
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	607a      	str	r2, [r7, #4]
 8003a40:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003a42:	2300      	movs	r3, #0
 8003a44:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8003a46:	7afb      	ldrb	r3, [r7, #11]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d103      	bne.n	8003a54 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	605a      	str	r2, [r3, #4]
      break;
 8003a52:	e002      	b.n	8003a5a <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	75fb      	strb	r3, [r7, #23]
      break;
 8003a58:	bf00      	nop
  }

  return status;
 8003a5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	371c      	adds	r7, #28
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bc80      	pop	{r7}
 8003a64:	4770      	bx	lr

08003a66 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8003a66:	b480      	push	{r7}
 8003a68:	b083      	sub	sp, #12
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
 8003a6e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d101      	bne.n	8003a7a <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e003      	b.n	8003a82 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	683a      	ldr	r2, [r7, #0]
 8003a7e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003a80:	2300      	movs	r3, #0
  }
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	370c      	adds	r7, #12
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bc80      	pop	{r7}
 8003a8a:	4770      	bx	lr

08003a8c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 031f 	and.w	r3, r3, #31
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa2:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8003aa4:	4b0a      	ldr	r3, [pc, #40]	; (8003ad0 <HAL_EXTI_IRQHandler+0x44>)
 8003aa6:	695b      	ldr	r3, [r3, #20]
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	4013      	ands	r3, r2
 8003aac:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d009      	beq.n	8003ac8 <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8003ab4:	4a06      	ldr	r2, [pc, #24]	; (8003ad0 <HAL_EXTI_IRQHandler+0x44>)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d002      	beq.n	8003ac8 <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	4798      	blx	r3
    }
  }
}
 8003ac8:	bf00      	nop
 8003aca:	3710      	adds	r7, #16
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	40010400 	.word	0x40010400

08003ad4 <HAL_EXTI_GetPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval 1 if interrupt is pending else 0.
  */
uint32_t HAL_EXTI_GetPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b087      	sub	sp, #28
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  linepos = (hexti->Line & EXTI_PIN_MASK);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 031f 	and.w	r3, r3, #31
 8003ae6:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 8003ae8:	2201      	movs	r2, #1
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	fa02 f303 	lsl.w	r3, r2, r3
 8003af0:	613b      	str	r3, [r7, #16]

  /* return 1 if bit is set else 0 */
  regval = ((EXTI->PR & maskline) >> linepos);
 8003af2:	4b07      	ldr	r3, [pc, #28]	; (8003b10 <HAL_EXTI_GetPending+0x3c>)
 8003af4:	695a      	ldr	r2, [r3, #20]
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	401a      	ands	r2, r3
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	fa22 f303 	lsr.w	r3, r2, r3
 8003b00:	60fb      	str	r3, [r7, #12]
  return regval;
 8003b02:	68fb      	ldr	r3, [r7, #12]
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	371c      	adds	r7, #28
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bc80      	pop	{r7}
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	40010400 	.word	0x40010400

08003b14 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 031f 	and.w	r3, r3, #31
 8003b26:	2201      	movs	r2, #1
 8003b28:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2c:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 8003b2e:	4a04      	ldr	r2, [pc, #16]	; (8003b40 <HAL_EXTI_ClearPending+0x2c>)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6153      	str	r3, [r2, #20]
}
 8003b34:	bf00      	nop
 8003b36:	3714      	adds	r7, #20
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bc80      	pop	{r7}
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	40010400 	.word	0x40010400

08003b44 <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 031f 	and.w	r3, r3, #31
 8003b54:	2201      	movs	r2, #1
 8003b56:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5a:	60fb      	str	r3, [r7, #12]

  /* Generate Software interrupt */
  EXTI->SWIER = maskline;
 8003b5c:	4a03      	ldr	r2, [pc, #12]	; (8003b6c <HAL_EXTI_GenerateSWI+0x28>)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6113      	str	r3, [r2, #16]
}
 8003b62:	bf00      	nop
 8003b64:	3714      	adds	r7, #20
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bc80      	pop	{r7}
 8003b6a:	4770      	bx	lr
 8003b6c:	40010400 	.word	0x40010400

08003b70 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003b80:	4b12      	ldr	r3, [pc, #72]	; (8003bcc <HAL_FLASH_Program+0x5c>)
 8003b82:	7c1b      	ldrb	r3, [r3, #16]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d101      	bne.n	8003b8c <HAL_FLASH_Program+0x1c>
 8003b88:	2302      	movs	r3, #2
 8003b8a:	e01b      	b.n	8003bc4 <HAL_FLASH_Program+0x54>
 8003b8c:	4b0f      	ldr	r3, [pc, #60]	; (8003bcc <HAL_FLASH_Program+0x5c>)
 8003b8e:	2201      	movs	r2, #1
 8003b90:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003b92:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b96:	f000 f9bd 	bl	8003f14 <FLASH_WaitForLastOperation>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8003b9e:	7dfb      	ldrb	r3, [r7, #23]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d10b      	bne.n	8003bbc <HAL_FLASH_Program+0x4c>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003ba4:	4b09      	ldr	r3, [pc, #36]	; (8003bcc <HAL_FLASH_Program+0x5c>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	615a      	str	r2, [r3, #20]

    /*Program word (32-bit) at a specified address.*/
    *(__IO uint32_t *)Address = Data;
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	601a      	str	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003bb0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003bb4:	f000 f9ae 	bl	8003f14 <FLASH_WaitForLastOperation>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003bbc:	4b03      	ldr	r3, [pc, #12]	; (8003bcc <HAL_FLASH_Program+0x5c>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	741a      	strb	r2, [r3, #16]

  return status;
 8003bc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3718      	adds	r7, #24
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	20000748 	.word	0x20000748

08003bd0 <HAL_FLASH_Program_IT>:
  * @param  Data         Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b087      	sub	sp, #28
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003be0:	4b11      	ldr	r3, [pc, #68]	; (8003c28 <HAL_FLASH_Program_IT+0x58>)
 8003be2:	7c1b      	ldrb	r3, [r3, #16]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d101      	bne.n	8003bec <HAL_FLASH_Program_IT+0x1c>
 8003be8:	2302      	movs	r3, #2
 8003bea:	e018      	b.n	8003c1e <HAL_FLASH_Program_IT+0x4e>
 8003bec:	4b0e      	ldr	r3, [pc, #56]	; (8003c28 <HAL_FLASH_Program_IT+0x58>)
 8003bee:	2201      	movs	r2, #1
 8003bf0:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Enable End of FLASH Operation and Error source interrupts */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 8003bf2:	4b0e      	ldr	r3, [pc, #56]	; (8003c2c <HAL_FLASH_Program_IT+0x5c>)
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	4a0d      	ldr	r2, [pc, #52]	; (8003c2c <HAL_FLASH_Program_IT+0x5c>)
 8003bf8:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8003bfc:	6053      	str	r3, [r2, #4]
  
  pFlash.Address = Address;
 8003bfe:	4a0a      	ldr	r2, [pc, #40]	; (8003c28 <HAL_FLASH_Program_IT+0x58>)
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	6093      	str	r3, [r2, #8]
  pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAM;
 8003c04:	4b08      	ldr	r3, [pc, #32]	; (8003c28 <HAL_FLASH_Program_IT+0x58>)
 8003c06:	2202      	movs	r2, #2
 8003c08:	701a      	strb	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003c0a:	4b07      	ldr	r3, [pc, #28]	; (8003c28 <HAL_FLASH_Program_IT+0x58>)
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	615a      	str	r2, [r3, #20]

  if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d102      	bne.n	8003c1c <HAL_FLASH_Program_IT+0x4c>
  {
    /* Program word (32-bit) at a specified address. */
    *(__IO uint32_t *)Address = Data;
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	601a      	str	r2, [r3, #0]
  }
  return status;
 8003c1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	371c      	adds	r7, #28
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bc80      	pop	{r7}
 8003c26:	4770      	bx	lr
 8003c28:	20000748 	.word	0x20000748
 8003c2c:	40023c00 	.word	0x40023c00

08003c30 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8003c36:	2300      	movs	r3, #0
 8003c38:	607b      	str	r3, [r7, #4]
  
  /* Check FLASH operation error flags */
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8003c3a:	4b53      	ldr	r3, [pc, #332]	; (8003d88 <HAL_FLASH_IRQHandler+0x158>)
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c46:	d01b      	beq.n	8003c80 <HAL_FLASH_IRQHandler+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8003c48:	4b4f      	ldr	r3, [pc, #316]	; (8003d88 <HAL_FLASH_IRQHandler+0x158>)
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8003c50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c54:	d014      	beq.n	8003c80 <HAL_FLASH_IRQHandler+0x50>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8003c56:	4b4c      	ldr	r3, [pc, #304]	; (8003d88 <HAL_FLASH_IRQHandler+0x158>)
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8003c5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c62:	d00d      	beq.n	8003c80 <HAL_FLASH_IRQHandler+0x50>
#if defined(FLASH_SR_RDERR)
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
#endif /* FLASH_SR_RDERR */
#if defined(FLASH_SR_OPTVERRUSR)
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERRUSR) || 
 8003c64:	4b48      	ldr	r3, [pc, #288]	; (8003d88 <HAL_FLASH_IRQHandler+0x158>)
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8003c6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c70:	d006      	beq.n	8003c80 <HAL_FLASH_IRQHandler+0x50>
#endif /* FLASH_SR_OPTVERRUSR */
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) )
 8003c72:	4b45      	ldr	r3, [pc, #276]	; (8003d88 <HAL_FLASH_IRQHandler+0x158>)
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERRUSR) || 
 8003c7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c7e:	d117      	bne.n	8003cb0 <HAL_FLASH_IRQHandler+0x80>
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 8003c80:	4b42      	ldr	r3, [pc, #264]	; (8003d8c <HAL_FLASH_IRQHandler+0x15c>)
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d107      	bne.n	8003c9a <HAL_FLASH_IRQHandler+0x6a>
    {
      /* Return the faulty sector */
      addresstmp = pFlash.Page;
 8003c8a:	4b40      	ldr	r3, [pc, #256]	; (8003d8c <HAL_FLASH_IRQHandler+0x15c>)
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	607b      	str	r3, [r7, #4]
      pFlash.Page = 0xFFFFFFFFU;
 8003c90:	4b3e      	ldr	r3, [pc, #248]	; (8003d8c <HAL_FLASH_IRQHandler+0x15c>)
 8003c92:	f04f 32ff 	mov.w	r2, #4294967295
 8003c96:	60da      	str	r2, [r3, #12]
 8003c98:	e002      	b.n	8003ca0 <HAL_FLASH_IRQHandler+0x70>
    }
    else
    {
      /* Return the faulty address */
      addresstmp = pFlash.Address;
 8003c9a:	4b3c      	ldr	r3, [pc, #240]	; (8003d8c <HAL_FLASH_IRQHandler+0x15c>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	607b      	str	r3, [r7, #4]
    }
    /* Save the Error code */
    FLASH_SetErrorCode();
 8003ca0:	f000 f98e 	bl	8003fc0 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f000 f87c 	bl	8003da2 <HAL_FLASH_OperationErrorCallback>

    /* Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8003caa:	4b38      	ldr	r3, [pc, #224]	; (8003d8c <HAL_FLASH_IRQHandler+0x15c>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	701a      	strb	r2, [r3, #0]
  }

  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003cb0:	4b35      	ldr	r3, [pc, #212]	; (8003d88 <HAL_FLASH_IRQHandler+0x158>)
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d14c      	bne.n	8003d56 <HAL_FLASH_IRQHandler+0x126>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003cbc:	4b32      	ldr	r3, [pc, #200]	; (8003d88 <HAL_FLASH_IRQHandler+0x158>)
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	619a      	str	r2, [r3, #24]
    
    /* Process can continue only if no error detected */
    if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 8003cc2:	4b32      	ldr	r3, [pc, #200]	; (8003d8c <HAL_FLASH_IRQHandler+0x15c>)
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d044      	beq.n	8003d56 <HAL_FLASH_IRQHandler+0x126>
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 8003ccc:	4b2f      	ldr	r3, [pc, #188]	; (8003d8c <HAL_FLASH_IRQHandler+0x15c>)
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d12d      	bne.n	8003d32 <HAL_FLASH_IRQHandler+0x102>
      {
        /* Nb of pages to erased can be decreased */
        pFlash.NbPagesToErase--;
 8003cd6:	4b2d      	ldr	r3, [pc, #180]	; (8003d8c <HAL_FLASH_IRQHandler+0x15c>)
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	4a2b      	ldr	r2, [pc, #172]	; (8003d8c <HAL_FLASH_IRQHandler+0x15c>)
 8003cde:	6053      	str	r3, [r2, #4]

        /* Check if there are still pages to erase */
        if(pFlash.NbPagesToErase != 0U)
 8003ce0:	4b2a      	ldr	r3, [pc, #168]	; (8003d8c <HAL_FLASH_IRQHandler+0x15c>)
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d017      	beq.n	8003d18 <HAL_FLASH_IRQHandler+0xe8>
        {
          addresstmp = pFlash.Page;
 8003ce8:	4b28      	ldr	r3, [pc, #160]	; (8003d8c <HAL_FLASH_IRQHandler+0x15c>)
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	607b      	str	r3, [r7, #4]
          /*Indicate user which sector has been erased */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 f84e 	bl	8003d90 <HAL_FLASH_EndOfOperationCallback>

          /*Increment sector number*/
          addresstmp = pFlash.Page + FLASH_PAGE_SIZE;
 8003cf4:	4b25      	ldr	r3, [pc, #148]	; (8003d8c <HAL_FLASH_IRQHandler+0x15c>)
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003cfc:	607b      	str	r3, [r7, #4]
          pFlash.Page = addresstmp;
 8003cfe:	4a23      	ldr	r2, [pc, #140]	; (8003d8c <HAL_FLASH_IRQHandler+0x15c>)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	60d3      	str	r3, [r2, #12]

          /* If the erase operation is completed, disable the ERASE Bit */
          CLEAR_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 8003d04:	4b20      	ldr	r3, [pc, #128]	; (8003d88 <HAL_FLASH_IRQHandler+0x158>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	4a1f      	ldr	r2, [pc, #124]	; (8003d88 <HAL_FLASH_IRQHandler+0x158>)
 8003d0a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d0e:	6053      	str	r3, [r2, #4]

          FLASH_PageErase(addresstmp);
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f001 f81b 	bl	8004d4c <FLASH_PageErase>
 8003d16:	e01e      	b.n	8003d56 <HAL_FLASH_IRQHandler+0x126>
        }
        else
        {
          /* No more pages to Erase, user callback can be called. */
          /* Reset Sector and stop Erase pages procedure */
          pFlash.Page = addresstmp = 0xFFFFFFFFU;
 8003d18:	f04f 33ff 	mov.w	r3, #4294967295
 8003d1c:	607b      	str	r3, [r7, #4]
 8003d1e:	4a1b      	ldr	r2, [pc, #108]	; (8003d8c <HAL_FLASH_IRQHandler+0x15c>)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	60d3      	str	r3, [r2, #12]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8003d24:	4b19      	ldr	r3, [pc, #100]	; (8003d8c <HAL_FLASH_IRQHandler+0x15c>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	701a      	strb	r2, [r3, #0]
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 f830 	bl	8003d90 <HAL_FLASH_EndOfOperationCallback>
 8003d30:	e011      	b.n	8003d56 <HAL_FLASH_IRQHandler+0x126>
        }
      }
      else
      {
          /* If the program operation is completed, disable the PROG Bit */
          CLEAR_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8003d32:	4b15      	ldr	r3, [pc, #84]	; (8003d88 <HAL_FLASH_IRQHandler+0x158>)
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	4a14      	ldr	r2, [pc, #80]	; (8003d88 <HAL_FLASH_IRQHandler+0x158>)
 8003d38:	f023 0308 	bic.w	r3, r3, #8
 8003d3c:	6053      	str	r3, [r2, #4]

          /* Program ended. Return the selected address */
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8003d3e:	4b13      	ldr	r3, [pc, #76]	; (8003d8c <HAL_FLASH_IRQHandler+0x15c>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f000 f824 	bl	8003d90 <HAL_FLASH_EndOfOperationCallback>
        
          /* Reset Address and stop Program procedure */
          pFlash.Address = 0xFFFFFFFFU;
 8003d48:	4b10      	ldr	r3, [pc, #64]	; (8003d8c <HAL_FLASH_IRQHandler+0x15c>)
 8003d4a:	f04f 32ff 	mov.w	r2, #4294967295
 8003d4e:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8003d50:	4b0e      	ldr	r3, [pc, #56]	; (8003d8c <HAL_FLASH_IRQHandler+0x15c>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8003d56:	4b0d      	ldr	r3, [pc, #52]	; (8003d8c <HAL_FLASH_IRQHandler+0x15c>)
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d10e      	bne.n	8003d7e <HAL_FLASH_IRQHandler+0x14e>
  {
    /* Operation is completed, disable the PROG and ERASE */
    CLEAR_BIT(FLASH->PECR, (FLASH_PECR_ERASE | FLASH_PECR_PROG));
 8003d60:	4b09      	ldr	r3, [pc, #36]	; (8003d88 <HAL_FLASH_IRQHandler+0x158>)
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	4a08      	ldr	r2, [pc, #32]	; (8003d88 <HAL_FLASH_IRQHandler+0x158>)
 8003d66:	f423 7302 	bic.w	r3, r3, #520	; 0x208
 8003d6a:	6053      	str	r3, [r2, #4]

    /* Disable End of FLASH Operation and Error source interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 8003d6c:	4b06      	ldr	r3, [pc, #24]	; (8003d88 <HAL_FLASH_IRQHandler+0x158>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	4a05      	ldr	r2, [pc, #20]	; (8003d88 <HAL_FLASH_IRQHandler+0x158>)
 8003d72:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003d76:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8003d78:	4b04      	ldr	r3, [pc, #16]	; (8003d8c <HAL_FLASH_IRQHandler+0x15c>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	741a      	strb	r2, [r3, #16]
  }
}
 8003d7e:	bf00      	nop
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	40023c00 	.word	0x40023c00
 8003d8c:	20000748 	.word	0x20000748

08003d90 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bc80      	pop	{r7}
 8003da0:	4770      	bx	lr

08003da2 <HAL_FLASH_OperationErrorCallback>:
  *                 - Pages Erase: Address of the page which returned an error
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8003da2:	b480      	push	{r7}
 8003da4:	b083      	sub	sp, #12
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8003daa:	bf00      	nop
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bc80      	pop	{r7}
 8003db2:	4770      	bx	lr

08003db4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003db4:	b480      	push	{r7}
 8003db6:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 8003db8:	4b16      	ldr	r3, [pc, #88]	; (8003e14 <HAL_FLASH_Unlock+0x60>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f003 0302 	and.w	r3, r3, #2
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d121      	bne.n	8003e08 <HAL_FLASH_Unlock+0x54>
  {
    /* Unlocking FLASH_PECR register access*/
    if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 8003dc4:	4b13      	ldr	r3, [pc, #76]	; (8003e14 <HAL_FLASH_Unlock+0x60>)
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f003 0301 	and.w	r3, r3, #1
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d10d      	bne.n	8003dec <HAL_FLASH_Unlock+0x38>
    {  
      WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY1);
 8003dd0:	4b10      	ldr	r3, [pc, #64]	; (8003e14 <HAL_FLASH_Unlock+0x60>)
 8003dd2:	4a11      	ldr	r2, [pc, #68]	; (8003e18 <HAL_FLASH_Unlock+0x64>)
 8003dd4:	60da      	str	r2, [r3, #12]
      WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY2);
 8003dd6:	4b0f      	ldr	r3, [pc, #60]	; (8003e14 <HAL_FLASH_Unlock+0x60>)
 8003dd8:	4a10      	ldr	r2, [pc, #64]	; (8003e1c <HAL_FLASH_Unlock+0x68>)
 8003dda:	60da      	str	r2, [r3, #12]
      
      /* Verify that PELOCK is unlocked */
      if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 8003ddc:	4b0d      	ldr	r3, [pc, #52]	; (8003e14 <HAL_FLASH_Unlock+0x60>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d101      	bne.n	8003dec <HAL_FLASH_Unlock+0x38>
      {
        return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e00e      	b.n	8003e0a <HAL_FLASH_Unlock+0x56>
      }
    }
    
    /* Unlocking the program memory access */
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY1);
 8003dec:	4b09      	ldr	r3, [pc, #36]	; (8003e14 <HAL_FLASH_Unlock+0x60>)
 8003dee:	4a0c      	ldr	r2, [pc, #48]	; (8003e20 <HAL_FLASH_Unlock+0x6c>)
 8003df0:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY2);  
 8003df2:	4b08      	ldr	r3, [pc, #32]	; (8003e14 <HAL_FLASH_Unlock+0x60>)
 8003df4:	4a0b      	ldr	r2, [pc, #44]	; (8003e24 <HAL_FLASH_Unlock+0x70>)
 8003df6:	611a      	str	r2, [r3, #16]
    
    /* Verify that PRGLOCK is unlocked */
    if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 8003df8:	4b06      	ldr	r3, [pc, #24]	; (8003e14 <HAL_FLASH_Unlock+0x60>)
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f003 0302 	and.w	r3, r3, #2
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d101      	bne.n	8003e08 <HAL_FLASH_Unlock+0x54>
    {
      return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e000      	b.n	8003e0a <HAL_FLASH_Unlock+0x56>
    }
  }
  
  return HAL_OK; 
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bc80      	pop	{r7}
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	40023c00 	.word	0x40023c00
 8003e18:	89abcdef 	.word	0x89abcdef
 8003e1c:	02030405 	.word	0x02030405
 8003e20:	8c9daebf 	.word	0x8c9daebf
 8003e24:	13141516 	.word	0x13141516

08003e28 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	af00      	add	r7, sp, #0
  /* Set the PRGLOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PRGLOCK);
 8003e2c:	4b05      	ldr	r3, [pc, #20]	; (8003e44 <HAL_FLASH_Lock+0x1c>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	4a04      	ldr	r2, [pc, #16]	; (8003e44 <HAL_FLASH_Lock+0x1c>)
 8003e32:	f043 0302 	orr.w	r3, r3, #2
 8003e36:	6053      	str	r3, [r2, #4]
  
  return HAL_OK;  
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bc80      	pop	{r7}
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	40023c00 	.word	0x40023c00

08003e48 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	af00      	add	r7, sp, #0
  if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_OPTLOCK))
 8003e4c:	4b16      	ldr	r3, [pc, #88]	; (8003ea8 <HAL_FLASH_OB_Unlock+0x60>)
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f003 0304 	and.w	r3, r3, #4
 8003e54:	2b04      	cmp	r3, #4
 8003e56:	d121      	bne.n	8003e9c <HAL_FLASH_OB_Unlock+0x54>
  {
    /* Unlocking FLASH_PECR register access*/
    if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 8003e58:	4b13      	ldr	r3, [pc, #76]	; (8003ea8 <HAL_FLASH_OB_Unlock+0x60>)
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f003 0301 	and.w	r3, r3, #1
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d10d      	bne.n	8003e80 <HAL_FLASH_OB_Unlock+0x38>
    {  
      /* Unlocking FLASH_PECR register access*/
      WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY1);
 8003e64:	4b10      	ldr	r3, [pc, #64]	; (8003ea8 <HAL_FLASH_OB_Unlock+0x60>)
 8003e66:	4a11      	ldr	r2, [pc, #68]	; (8003eac <HAL_FLASH_OB_Unlock+0x64>)
 8003e68:	60da      	str	r2, [r3, #12]
      WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY2);
 8003e6a:	4b0f      	ldr	r3, [pc, #60]	; (8003ea8 <HAL_FLASH_OB_Unlock+0x60>)
 8003e6c:	4a10      	ldr	r2, [pc, #64]	; (8003eb0 <HAL_FLASH_OB_Unlock+0x68>)
 8003e6e:	60da      	str	r2, [r3, #12]

      /* Verify that PELOCK is unlocked */
      if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 8003e70:	4b0d      	ldr	r3, [pc, #52]	; (8003ea8 <HAL_FLASH_OB_Unlock+0x60>)
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f003 0301 	and.w	r3, r3, #1
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d101      	bne.n	8003e80 <HAL_FLASH_OB_Unlock+0x38>
      {
        return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e00e      	b.n	8003e9e <HAL_FLASH_OB_Unlock+0x56>
      }
    }

    /* Unlocking the option bytes block access */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8003e80:	4b09      	ldr	r3, [pc, #36]	; (8003ea8 <HAL_FLASH_OB_Unlock+0x60>)
 8003e82:	4a0c      	ldr	r2, [pc, #48]	; (8003eb4 <HAL_FLASH_OB_Unlock+0x6c>)
 8003e84:	615a      	str	r2, [r3, #20]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8003e86:	4b08      	ldr	r3, [pc, #32]	; (8003ea8 <HAL_FLASH_OB_Unlock+0x60>)
 8003e88:	4a0b      	ldr	r2, [pc, #44]	; (8003eb8 <HAL_FLASH_OB_Unlock+0x70>)
 8003e8a:	615a      	str	r2, [r3, #20]

    /* Verify that OPTLOCK is unlocked */
    if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_OPTLOCK))
 8003e8c:	4b06      	ldr	r3, [pc, #24]	; (8003ea8 <HAL_FLASH_OB_Unlock+0x60>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f003 0304 	and.w	r3, r3, #4
 8003e94:	2b04      	cmp	r3, #4
 8003e96:	d101      	bne.n	8003e9c <HAL_FLASH_OB_Unlock+0x54>
    {
      return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e000      	b.n	8003e9e <HAL_FLASH_OB_Unlock+0x56>
    }
  }
  
  return HAL_OK;  
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bc80      	pop	{r7}
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	40023c00 	.word	0x40023c00
 8003eac:	89abcdef 	.word	0x89abcdef
 8003eb0:	02030405 	.word	0x02030405
 8003eb4:	fbead9c8 	.word	0xfbead9c8
 8003eb8:	24252627 	.word	0x24252627

08003ebc <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the option bytes block access */
  SET_BIT(FLASH->PECR, FLASH_PECR_OPTLOCK);
 8003ec0:	4b05      	ldr	r3, [pc, #20]	; (8003ed8 <HAL_FLASH_OB_Lock+0x1c>)
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	4a04      	ldr	r2, [pc, #16]	; (8003ed8 <HAL_FLASH_OB_Lock+0x1c>)
 8003ec6:	f043 0304 	orr.w	r3, r3, #4
 8003eca:	6053      	str	r3, [r2, #4]
  
  return HAL_OK;  
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bc80      	pop	{r7}
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	40023c00 	.word	0x40023c00

08003edc <HAL_FLASH_OB_Launch>:
  * @brief  Launch the option byte loading.
  * @note   This function will reset automatically the MCU.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	af00      	add	r7, sp, #0
  /* Set the OBL_Launch bit to launch the option byte loading */
  SET_BIT(FLASH->PECR, FLASH_PECR_OBL_LAUNCH);
 8003ee0:	4b06      	ldr	r3, [pc, #24]	; (8003efc <HAL_FLASH_OB_Launch+0x20>)
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	4a05      	ldr	r2, [pc, #20]	; (8003efc <HAL_FLASH_OB_Launch+0x20>)
 8003ee6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003eea:	6053      	str	r3, [r2, #4]
  
  /* Wait for last operation to be completed */
  return(FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE));
 8003eec:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003ef0:	f000 f810 	bl	8003f14 <FLASH_WaitForLastOperation>
 8003ef4:	4603      	mov	r3, r0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	40023c00 	.word	0x40023c00

08003f00 <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 8003f00:	b480      	push	{r7}
 8003f02:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8003f04:	4b02      	ldr	r3, [pc, #8]	; (8003f10 <HAL_FLASH_GetError+0x10>)
 8003f06:	695b      	ldr	r3, [r3, #20]
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bc80      	pop	{r7}
 8003f0e:	4770      	bx	lr
 8003f10:	20000748 	.word	0x20000748

08003f14 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003f1c:	f7fe fb9a 	bl	8002654 <HAL_GetTick>
 8003f20:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003f22:	e010      	b.n	8003f46 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f2a:	d00c      	beq.n	8003f46 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d007      	beq.n	8003f42 <FLASH_WaitForLastOperation+0x2e>
 8003f32:	f7fe fb8f 	bl	8002654 <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d201      	bcs.n	8003f46 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e036      	b.n	8003fb4 <FLASH_WaitForLastOperation+0xa0>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003f46:	4b1d      	ldr	r3, [pc, #116]	; (8003fbc <FLASH_WaitForLastOperation+0xa8>)
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d0e8      	beq.n	8003f24 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003f52:	4b1a      	ldr	r3, [pc, #104]	; (8003fbc <FLASH_WaitForLastOperation+0xa8>)
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d102      	bne.n	8003f64 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003f5e:	4b17      	ldr	r3, [pc, #92]	; (8003fbc <FLASH_WaitForLastOperation+0xa8>)
 8003f60:	2202      	movs	r2, #2
 8003f62:	619a      	str	r2, [r3, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003f64:	4b15      	ldr	r3, [pc, #84]	; (8003fbc <FLASH_WaitForLastOperation+0xa8>)
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f70:	d01b      	beq.n	8003faa <FLASH_WaitForLastOperation+0x96>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003f72:	4b12      	ldr	r3, [pc, #72]	; (8003fbc <FLASH_WaitForLastOperation+0xa8>)
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003f7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f7e:	d014      	beq.n	8003faa <FLASH_WaitForLastOperation+0x96>
#if defined(FLASH_SR_RDERR)
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) || 
#endif /* FLASH_SR_RDERR */
#if defined(FLASH_SR_OPTVERRUSR)
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERRUSR) || 
 8003f80:	4b0e      	ldr	r3, [pc, #56]	; (8003fbc <FLASH_WaitForLastOperation+0xa8>)
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003f88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f8c:	d00d      	beq.n	8003faa <FLASH_WaitForLastOperation+0x96>
#endif /* FLASH_SR_OPTVERRUSR */
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR) || 
 8003f8e:	4b0b      	ldr	r3, [pc, #44]	; (8003fbc <FLASH_WaitForLastOperation+0xa8>)
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERRUSR) || 
 8003f96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f9a:	d006      	beq.n	8003faa <FLASH_WaitForLastOperation+0x96>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8003f9c:	4b07      	ldr	r3, [pc, #28]	; (8003fbc <FLASH_WaitForLastOperation+0xa8>)
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR) || 
 8003fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fa8:	d103      	bne.n	8003fb2 <FLASH_WaitForLastOperation+0x9e>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003faa:	f000 f809 	bl	8003fc0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e000      	b.n	8003fb4 <FLASH_WaitForLastOperation+0xa0>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3710      	adds	r7, #16
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	40023c00 	.word	0x40023c00

08003fc0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003fca:	4b2e      	ldr	r3, [pc, #184]	; (8004084 <FLASH_SetErrorCode+0xc4>)
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fd6:	d109      	bne.n	8003fec <FLASH_SetErrorCode+0x2c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003fd8:	4b2b      	ldr	r3, [pc, #172]	; (8004088 <FLASH_SetErrorCode+0xc8>)
 8003fda:	695b      	ldr	r3, [r3, #20]
 8003fdc:	f043 0302 	orr.w	r3, r3, #2
 8003fe0:	4a29      	ldr	r2, [pc, #164]	; (8004088 <FLASH_SetErrorCode+0xc8>)
 8003fe2:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_WRPERR;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fea:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8003fec:	4b25      	ldr	r3, [pc, #148]	; (8004084 <FLASH_SetErrorCode+0xc4>)
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ff4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ff8:	d109      	bne.n	800400e <FLASH_SetErrorCode+0x4e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003ffa:	4b23      	ldr	r3, [pc, #140]	; (8004088 <FLASH_SetErrorCode+0xc8>)
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	f043 0301 	orr.w	r3, r3, #1
 8004002:	4a21      	ldr	r2, [pc, #132]	; (8004088 <FLASH_SetErrorCode+0xc8>)
 8004004:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_PGAERR;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800400c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800400e:	4b1d      	ldr	r3, [pc, #116]	; (8004084 <FLASH_SetErrorCode+0xc4>)
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004016:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800401a:	d109      	bne.n	8004030 <FLASH_SetErrorCode+0x70>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800401c:	4b1a      	ldr	r3, [pc, #104]	; (8004088 <FLASH_SetErrorCode+0xc8>)
 800401e:	695b      	ldr	r3, [r3, #20]
 8004020:	f043 0304 	orr.w	r3, r3, #4
 8004024:	4a18      	ldr	r2, [pc, #96]	; (8004088 <FLASH_SetErrorCode+0xc8>)
 8004026:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_OPTVERR;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800402e:	607b      	str	r3, [r7, #4]
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
    flags |= FLASH_FLAG_RDERR;
  }
#endif /* FLASH_SR_RDERR */
#if defined(FLASH_SR_OPTVERRUSR)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERRUSR))
 8004030:	4b14      	ldr	r3, [pc, #80]	; (8004084 <FLASH_SetErrorCode+0xc4>)
 8004032:	699b      	ldr	r3, [r3, #24]
 8004034:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004038:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800403c:	d109      	bne.n	8004052 <FLASH_SetErrorCode+0x92>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTVUSR;
 800403e:	4b12      	ldr	r3, [pc, #72]	; (8004088 <FLASH_SetErrorCode+0xc8>)
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	f043 0320 	orr.w	r3, r3, #32
 8004046:	4a10      	ldr	r2, [pc, #64]	; (8004088 <FLASH_SetErrorCode+0xc8>)
 8004048:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_OPTVERRUSR;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004050:	607b      	str	r3, [r7, #4]
  }
#endif /* FLASH_SR_OPTVERRUSR */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8004052:	4b0c      	ldr	r3, [pc, #48]	; (8004084 <FLASH_SetErrorCode+0xc4>)
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800405a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800405e:	d109      	bne.n	8004074 <FLASH_SetErrorCode+0xb4>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8004060:	4b09      	ldr	r3, [pc, #36]	; (8004088 <FLASH_SetErrorCode+0xc8>)
 8004062:	695b      	ldr	r3, [r3, #20]
 8004064:	f043 0308 	orr.w	r3, r3, #8
 8004068:	4a07      	ldr	r2, [pc, #28]	; (8004088 <FLASH_SetErrorCode+0xc8>)
 800406a:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_SIZERR;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004072:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004074:	4a03      	ldr	r2, [pc, #12]	; (8004084 <FLASH_SetErrorCode+0xc4>)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6193      	str	r3, [r2, #24]
}
 800407a:	bf00      	nop
 800407c:	370c      	adds	r7, #12
 800407e:	46bd      	mov	sp, r7
 8004080:	bc80      	pop	{r7}
 8004082:	4770      	bx	lr
 8004084:	40023c00 	.word	0x40023c00
 8004088:	20000748 	.word	0x20000748

0800408c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800409a:	2300      	movs	r3, #0
 800409c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800409e:	4b25      	ldr	r3, [pc, #148]	; (8004134 <HAL_FLASHEx_Erase+0xa8>)
 80040a0:	7c1b      	ldrb	r3, [r3, #16]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d101      	bne.n	80040aa <HAL_FLASHEx_Erase+0x1e>
 80040a6:	2302      	movs	r3, #2
 80040a8:	e040      	b.n	800412c <HAL_FLASHEx_Erase+0xa0>
 80040aa:	4b22      	ldr	r3, [pc, #136]	; (8004134 <HAL_FLASHEx_Erase+0xa8>)
 80040ac:	2201      	movs	r2, #1
 80040ae:	741a      	strb	r2, [r3, #16]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80040b0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80040b4:	f7ff ff2e 	bl	8003f14 <FLASH_WaitForLastOperation>
 80040b8:	4603      	mov	r3, r0
 80040ba:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80040bc:	7bfb      	ldrb	r3, [r7, #15]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d130      	bne.n	8004124 <HAL_FLASHEx_Erase+0x98>
  {
    /*Initialization of PageError variable*/
    *PageError = 0xFFFFFFFFU;
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	f04f 32ff 	mov.w	r2, #4294967295
 80040c8:	601a      	str	r2, [r3, #0]
      }
    }
#endif /* STM32L151xDX || STM32L152xDX || STM32L162xDX */

    /* Erase page by page to be done*/
    for(address = pEraseInit->PageAddress;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	60bb      	str	r3, [r7, #8]
 80040d0:	e01f      	b.n	8004112 <HAL_FLASHEx_Erase+0x86>
        address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
        address += FLASH_PAGE_SIZE)
    {
      FLASH_PageErase(address);
 80040d2:	68b8      	ldr	r0, [r7, #8]
 80040d4:	f000 fe3a 	bl	8004d4c <FLASH_PageErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80040d8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80040dc:	f7ff ff1a 	bl	8003f14 <FLASH_WaitForLastOperation>
 80040e0:	4603      	mov	r3, r0
 80040e2:	73fb      	strb	r3, [r7, #15]

      /* If the erase operation is completed, disable the ERASE Bit */
      CLEAR_BIT(FLASH->PECR, FLASH_PECR_PROG);
 80040e4:	4b14      	ldr	r3, [pc, #80]	; (8004138 <HAL_FLASHEx_Erase+0xac>)
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	4a13      	ldr	r2, [pc, #76]	; (8004138 <HAL_FLASHEx_Erase+0xac>)
 80040ea:	f023 0308 	bic.w	r3, r3, #8
 80040ee:	6053      	str	r3, [r2, #4]
      CLEAR_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 80040f0:	4b11      	ldr	r3, [pc, #68]	; (8004138 <HAL_FLASHEx_Erase+0xac>)
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	4a10      	ldr	r2, [pc, #64]	; (8004138 <HAL_FLASHEx_Erase+0xac>)
 80040f6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040fa:	6053      	str	r3, [r2, #4]

      if (status != HAL_OK)
 80040fc:	7bfb      	ldrb	r3, [r7, #15]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d003      	beq.n	800410a <HAL_FLASHEx_Erase+0x7e>
      {
        /* In case of error, stop erase procedure and return the faulty address */
        *PageError = address;
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	68ba      	ldr	r2, [r7, #8]
 8004106:	601a      	str	r2, [r3, #0]
        break;
 8004108:	e00c      	b.n	8004124 <HAL_FLASHEx_Erase+0x98>
        address += FLASH_PAGE_SIZE)
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004110:	60bb      	str	r3, [r7, #8]
        address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	021a      	lsls	r2, r3, #8
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	4413      	add	r3, r2
    for(address = pEraseInit->PageAddress;
 800411e:	68ba      	ldr	r2, [r7, #8]
 8004120:	429a      	cmp	r2, r3
 8004122:	d3d6      	bcc.n	80040d2 <HAL_FLASHEx_Erase+0x46>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004124:	4b03      	ldr	r3, [pc, #12]	; (8004134 <HAL_FLASHEx_Erase+0xa8>)
 8004126:	2200      	movs	r2, #0
 8004128:	741a      	strb	r2, [r3, #16]

  return status;
 800412a:	7bfb      	ldrb	r3, [r7, #15]
}
 800412c:	4618      	mov	r0, r3
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	20000748 	.word	0x20000748
 8004138:	40023c00 	.word	0x40023c00

0800413c <HAL_FLASHEx_Erase_IT>:
  *         contains the configuration information for the erasing.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	73fb      	strb	r3, [r7, #15]

  /* If procedure already ongoing, reject the next one */
  if (pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 8004148:	4b1b      	ldr	r3, [pc, #108]	; (80041b8 <HAL_FLASHEx_Erase_IT+0x7c>)
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	b2db      	uxtb	r3, r3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d001      	beq.n	8004156 <HAL_FLASHEx_Erase_IT+0x1a>
  {
    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e02c      	b.n	80041b0 <HAL_FLASHEx_Erase_IT+0x74>
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
  assert_param(IS_FLASH_PROGRAM_ADDRESS((pEraseInit->PageAddress & ~(FLASH_PAGE_SIZE - 1U)) + pEraseInit->NbPages * FLASH_PAGE_SIZE - 1U));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004156:	4b18      	ldr	r3, [pc, #96]	; (80041b8 <HAL_FLASHEx_Erase_IT+0x7c>)
 8004158:	7c1b      	ldrb	r3, [r3, #16]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d101      	bne.n	8004162 <HAL_FLASHEx_Erase_IT+0x26>
 800415e:	2302      	movs	r3, #2
 8004160:	e026      	b.n	80041b0 <HAL_FLASHEx_Erase_IT+0x74>
 8004162:	4b15      	ldr	r3, [pc, #84]	; (80041b8 <HAL_FLASHEx_Erase_IT+0x7c>)
 8004164:	2201      	movs	r2, #1
 8004166:	741a      	strb	r2, [r3, #16]
      }
    }
#endif /* STM32L151xDX || STM32L152xDX || STM32L162xDX */

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004168:	f24c 3050 	movw	r0, #50000	; 0xc350
 800416c:	f7ff fed2 	bl	8003f14 <FLASH_WaitForLastOperation>
 8004170:	4603      	mov	r3, r0
 8004172:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004174:	7bfb      	ldrb	r3, [r7, #15]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d116      	bne.n	80041a8 <HAL_FLASHEx_Erase_IT+0x6c>
  {
    /* Enable End of FLASH Operation and Error source interrupts */
    __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 800417a:	4b10      	ldr	r3, [pc, #64]	; (80041bc <HAL_FLASHEx_Erase_IT+0x80>)
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	4a0f      	ldr	r2, [pc, #60]	; (80041bc <HAL_FLASHEx_Erase_IT+0x80>)
 8004180:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8004184:	6053      	str	r3, [r2, #4]

    pFlash.ProcedureOnGoing = FLASH_PROC_PAGEERASE;
 8004186:	4b0c      	ldr	r3, [pc, #48]	; (80041b8 <HAL_FLASHEx_Erase_IT+0x7c>)
 8004188:	2201      	movs	r2, #1
 800418a:	701a      	strb	r2, [r3, #0]
    pFlash.NbPagesToErase = pEraseInit->NbPages;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	4a09      	ldr	r2, [pc, #36]	; (80041b8 <HAL_FLASHEx_Erase_IT+0x7c>)
 8004192:	6053      	str	r3, [r2, #4]
    pFlash.Page = pEraseInit->PageAddress;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	4a07      	ldr	r2, [pc, #28]	; (80041b8 <HAL_FLASHEx_Erase_IT+0x7c>)
 800419a:	60d3      	str	r3, [r2, #12]

    /*Erase 1st page and wait for IT*/
    FLASH_PageErase(pEraseInit->PageAddress);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	4618      	mov	r0, r3
 80041a2:	f000 fdd3 	bl	8004d4c <FLASH_PageErase>
 80041a6:	e002      	b.n	80041ae <HAL_FLASHEx_Erase_IT+0x72>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 80041a8:	4b03      	ldr	r3, [pc, #12]	; (80041b8 <HAL_FLASHEx_Erase_IT+0x7c>)
 80041aa:	2200      	movs	r2, #0
 80041ac:	741a      	strb	r2, [r3, #16]
  }

  return status;
 80041ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3710      	adds	r7, #16
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	20000748 	.word	0x20000748
 80041bc:	40023c00 	.word	0x40023c00

080041c0 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80041cc:	4b3d      	ldr	r3, [pc, #244]	; (80042c4 <HAL_FLASHEx_OBProgram+0x104>)
 80041ce:	7c1b      	ldrb	r3, [r3, #16]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d101      	bne.n	80041d8 <HAL_FLASHEx_OBProgram+0x18>
 80041d4:	2302      	movs	r3, #2
 80041d6:	e071      	b.n	80042bc <HAL_FLASHEx_OBProgram+0xfc>
 80041d8:	4b3a      	ldr	r3, [pc, #232]	; (80042c4 <HAL_FLASHEx_OBProgram+0x104>)
 80041da:	2201      	movs	r2, #1
 80041dc:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /*Write protection configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d018      	beq.n	800421c <HAL_FLASHEx_OBProgram+0x5c>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
    if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d106      	bne.n	8004200 <HAL_FLASHEx_OBProgram+0x40>
    {
      /* Enable of Write protection on the selected Sector*/
      status = FLASH_OB_WRPConfig(pOBInit, ENABLE);
 80041f2:	2101      	movs	r1, #1
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 fa6f 	bl	80046d8 <FLASH_OB_WRPConfig>
 80041fa:	4603      	mov	r3, r0
 80041fc:	73fb      	strb	r3, [r7, #15]
 80041fe:	e005      	b.n	800420c <HAL_FLASHEx_OBProgram+0x4c>
    }
    else
    {
      /* Disable of Write protection on the selected Sector*/
      status = FLASH_OB_WRPConfig(pOBInit, DISABLE);
 8004200:	2100      	movs	r1, #0
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 fa68 	bl	80046d8 <FLASH_OB_WRPConfig>
 8004208:	4603      	mov	r3, r0
 800420a:	73fb      	strb	r3, [r7, #15]
    }
    if (status != HAL_OK)
 800420c:	7bfb      	ldrb	r3, [r7, #15]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d004      	beq.n	800421c <HAL_FLASHEx_OBProgram+0x5c>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8004212:	4b2c      	ldr	r3, [pc, #176]	; (80042c4 <HAL_FLASHEx_OBProgram+0x104>)
 8004214:	2200      	movs	r2, #0
 8004216:	741a      	strb	r2, [r3, #16]
      return status;
 8004218:	7bfb      	ldrb	r3, [r7, #15]
 800421a:	e04f      	b.n	80042bc <HAL_FLASHEx_OBProgram+0xfc>
    }
  }

  /* Read protection configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0302 	and.w	r3, r3, #2
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00e      	beq.n	8004246 <HAL_FLASHEx_OBProgram+0x86>
  {
    status = FLASH_OB_RDPConfig(pOBInit->RDPLevel);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	7e1b      	ldrb	r3, [r3, #24]
 800422c:	4618      	mov	r0, r3
 800422e:	f000 f99d 	bl	800456c <FLASH_OB_RDPConfig>
 8004232:	4603      	mov	r3, r0
 8004234:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 8004236:	7bfb      	ldrb	r3, [r7, #15]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d004      	beq.n	8004246 <HAL_FLASHEx_OBProgram+0x86>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 800423c:	4b21      	ldr	r3, [pc, #132]	; (80042c4 <HAL_FLASHEx_OBProgram+0x104>)
 800423e:	2200      	movs	r2, #0
 8004240:	741a      	strb	r2, [r3, #16]
      return status;
 8004242:	7bfb      	ldrb	r3, [r7, #15]
 8004244:	e03a      	b.n	80042bc <HAL_FLASHEx_OBProgram+0xfc>
    }
  }

  /* USER  configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0304 	and.w	r3, r3, #4
 800424e:	2b00      	cmp	r3, #0
 8004250:	d01b      	beq.n	800428a <HAL_FLASHEx_OBProgram+0xca>
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	7e9b      	ldrb	r3, [r3, #26]
 8004256:	f003 0310 	and.w	r3, r3, #16
 800425a:	b2d8      	uxtb	r0, r3
                                 pOBInit->USERConfig & OB_STOP_NORST,
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	7e9b      	ldrb	r3, [r3, #26]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 8004260:	f003 0320 	and.w	r3, r3, #32
 8004264:	b2d9      	uxtb	r1, r3
                                 pOBInit->USERConfig & OB_STDBY_NORST);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	7e9b      	ldrb	r3, [r3, #26]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 800426a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800426e:	b2db      	uxtb	r3, r3
 8004270:	461a      	mov	r2, r3
 8004272:	f000 fc0f 	bl	8004a94 <FLASH_OB_UserConfig>
 8004276:	4603      	mov	r3, r0
 8004278:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 800427a:	7bfb      	ldrb	r3, [r7, #15]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d004      	beq.n	800428a <HAL_FLASHEx_OBProgram+0xca>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8004280:	4b10      	ldr	r3, [pc, #64]	; (80042c4 <HAL_FLASHEx_OBProgram+0x104>)
 8004282:	2200      	movs	r2, #0
 8004284:	741a      	strb	r2, [r3, #16]
      return status;
 8004286:	7bfb      	ldrb	r3, [r7, #15]
 8004288:	e018      	b.n	80042bc <HAL_FLASHEx_OBProgram+0xfc>
    }
  }

  /* BOR Level  configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0308 	and.w	r3, r3, #8
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00e      	beq.n	80042b4 <HAL_FLASHEx_OBProgram+0xf4>
  {
    status = FLASH_OB_BORConfig(pOBInit->BORLevel);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	7e5b      	ldrb	r3, [r3, #25]
 800429a:	4618      	mov	r0, r3
 800429c:	f000 f9aa 	bl	80045f4 <FLASH_OB_BORConfig>
 80042a0:	4603      	mov	r3, r0
 80042a2:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 80042a4:	7bfb      	ldrb	r3, [r7, #15]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d004      	beq.n	80042b4 <HAL_FLASHEx_OBProgram+0xf4>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 80042aa:	4b06      	ldr	r3, [pc, #24]	; (80042c4 <HAL_FLASHEx_OBProgram+0x104>)
 80042ac:	2200      	movs	r2, #0
 80042ae:	741a      	strb	r2, [r3, #16]
      return status;
 80042b0:	7bfb      	ldrb	r3, [r7, #15]
 80042b2:	e003      	b.n	80042bc <HAL_FLASHEx_OBProgram+0xfc>
    }
  }
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80042b4:	4b03      	ldr	r3, [pc, #12]	; (80042c4 <HAL_FLASHEx_OBProgram+0x104>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	741a      	strb	r2, [r3, #16]

  return status;
 80042ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3710      	adds	r7, #16
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	20000748 	.word	0x20000748

080042c8 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	220f      	movs	r2, #15
 80042d4:	601a      	str	r2, [r3, #0]

  /*Get WRP1*/
  pOBInit->WRPSector0To31 = (uint32_t)(FLASH->WRPR1);
 80042d6:	4b14      	ldr	r3, [pc, #80]	; (8004328 <HAL_FLASHEx_OBGetConfig+0x60>)
 80042d8:	6a1a      	ldr	r2, [r3, #32]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	609a      	str	r2, [r3, #8]
 || defined(STM32L151xCA) || defined(STM32L151xD) || defined(STM32L151xDX) || defined(STM32L152xCA) \
 || defined(STM32L152xD) || defined(STM32L152xDX) || defined(STM32L162xCA) || defined(STM32L162xD)  \
 || defined(STM32L162xDX) || defined(STM32L151xE) || defined(STM32L152xE) || defined(STM32L162xE)

  /*Get WRP2*/
  pOBInit->WRPSector32To63 = (uint32_t)(FLASH->WRPR2);
 80042de:	4b12      	ldr	r3, [pc, #72]	; (8004328 <HAL_FLASHEx_OBGetConfig+0x60>)
 80042e0:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	60da      	str	r2, [r3, #12]
#if defined(STM32L151xD) || defined(STM32L151xDX) || defined(STM32L152xD) || defined(STM32L152xDX) \
 || defined(STM32L162xD) || defined(STM32L162xDX) || defined(STM32L151xE) || defined(STM32L152xE)  \
 || defined(STM32L162xE)

  /*Get WRP3*/
  pOBInit->WRPSector64To95 = (uint32_t)(FLASH->WRPR3);
 80042e8:	4b0f      	ldr	r3, [pc, #60]	; (8004328 <HAL_FLASHEx_OBGetConfig+0x60>)
 80042ea:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	611a      	str	r2, [r3, #16]

#if defined(STM32L151xE) || defined(STM32L152xE) || defined(STM32L162xE) || defined(STM32L151xDX) \
 || defined(STM32L152xDX) || defined(STM32L162xDX)

  /*Get WRP4*/
  pOBInit->WRPSector96To127 = (uint32_t)(FLASH->WRPR4);
 80042f2:	4b0d      	ldr	r3, [pc, #52]	; (8004328 <HAL_FLASHEx_OBGetConfig+0x60>)
 80042f4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	615a      	str	r2, [r3, #20]

#endif /* STM32L151xE || STM32L152xE || STM32L162xE || STM32L151xDX || ... */

  /*Get RDP Level*/
  pOBInit->RDPLevel   = FLASH_OB_GetRDP();
 80042fc:	f000 f9c6 	bl	800468c <FLASH_OB_GetRDP>
 8004300:	4603      	mov	r3, r0
 8004302:	461a      	mov	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	761a      	strb	r2, [r3, #24]

  /*Get USER*/
  pOBInit->USERConfig = FLASH_OB_GetUser();
 8004308:	f000 f9b0 	bl	800466c <FLASH_OB_GetUser>
 800430c:	4603      	mov	r3, r0
 800430e:	461a      	mov	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	769a      	strb	r2, [r3, #26]

  /*Get BOR Level*/
  pOBInit->BORLevel   = FLASH_OB_GetBOR();
 8004314:	f000 f9d0 	bl	80046b8 <FLASH_OB_GetBOR>
 8004318:	4603      	mov	r3, r0
 800431a:	461a      	mov	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	765a      	strb	r2, [r3, #25]
}
 8004320:	bf00      	nop
 8004322:	3708      	adds	r7, #8
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	40023c00 	.word	0x40023c00

0800432c <HAL_FLASHEx_AdvOBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_AdvOBProgram (FLASH_AdvOBProgramInitTypeDef *pAdvOBInit)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	73fb      	strb	r3, [r7, #15]
#endif /* FLASH_OBR_SPRMOD */

#if defined(FLASH_OBR_nRST_BFB2)

  /* Program BOOT config option byte */
  if ((pAdvOBInit->OptionType & OPTIONBYTE_BOOTCONFIG) == OPTIONBYTE_BOOTCONFIG)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d007      	beq.n	8004354 <HAL_FLASHEx_AdvOBProgram+0x28>
  {
    status = FLASH_OB_BootConfig(pAdvOBInit->BootConfig);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	889b      	ldrh	r3, [r3, #4]
 8004348:	b2db      	uxtb	r3, r3
 800434a:	4618      	mov	r0, r3
 800434c:	f000 fbf0 	bl	8004b30 <FLASH_OB_BootConfig>
 8004350:	4603      	mov	r3, r0
 8004352:	73fb      	strb	r3, [r7, #15]
  }

#endif /* FLASH_OBR_nRST_BFB2 */

  return status;
 8004354:	7bfb      	ldrb	r3, [r7, #15]
}
 8004356:	4618      	mov	r0, r3
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
	...

08004360 <HAL_FLASHEx_AdvOBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_AdvOBGetConfig(FLASH_AdvOBProgramInitTypeDef *pAdvOBInit)
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  pAdvOBInit->OptionType = 0U;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	601a      	str	r2, [r3, #0]
#endif /* STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC */
#endif /* FLASH_OBR_SPRMOD */

#if defined(FLASH_OBR_nRST_BFB2)

  pAdvOBInit->OptionType |= OPTIONBYTE_BOOTCONFIG;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f043 0202 	orr.w	r2, r3, #2
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	601a      	str	r2, [r3, #0]

  /* Get Boot config OB */
  pAdvOBInit->BootConfig = (FLASH->OBR & FLASH_OBR_nRST_BFB2) >> 16U;
 800437a:	4b07      	ldr	r3, [pc, #28]	; (8004398 <HAL_FLASHEx_AdvOBGetConfig+0x38>)
 800437c:	69db      	ldr	r3, [r3, #28]
 800437e:	0c1b      	lsrs	r3, r3, #16
 8004380:	b29b      	uxth	r3, r3
 8004382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004386:	b29a      	uxth	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	809a      	strh	r2, [r3, #4]

#endif /* FLASH_OBR_nRST_BFB2 */
}
 800438c:	bf00      	nop
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	bc80      	pop	{r7}
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	40023c00 	.word	0x40023c00

0800439c <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 800439c:	b480      	push	{r7}
 800439e:	af00      	add	r7, sp, #0
  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 80043a0:	4b09      	ldr	r3, [pc, #36]	; (80043c8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f003 0301 	and.w	r3, r3, #1
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d007      	beq.n	80043bc <HAL_FLASHEx_DATAEEPROM_Unlock+0x20>
  {
    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 80043ac:	4b06      	ldr	r3, [pc, #24]	; (80043c8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 80043ae:	4a07      	ldr	r2, [pc, #28]	; (80043cc <HAL_FLASHEx_DATAEEPROM_Unlock+0x30>)
 80043b0:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 80043b2:	4b05      	ldr	r3, [pc, #20]	; (80043c8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 80043b4:	4a06      	ldr	r2, [pc, #24]	; (80043d0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x34>)
 80043b6:	60da      	str	r2, [r3, #12]
  }
  else
  {
    return HAL_ERROR;
  }
  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
 80043ba:	e000      	b.n	80043be <HAL_FLASHEx_DATAEEPROM_Unlock+0x22>
    return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
}
 80043be:	4618      	mov	r0, r3
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bc80      	pop	{r7}
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	40023c00 	.word	0x40023c00
 80043cc:	89abcdef 	.word	0x89abcdef
 80043d0:	02030405 	.word	0x02030405

080043d4 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 80043d4:	b480      	push	{r7}
 80043d6:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 80043d8:	4b05      	ldr	r3, [pc, #20]	; (80043f0 <HAL_FLASHEx_DATAEEPROM_Lock+0x1c>)
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	4a04      	ldr	r2, [pc, #16]	; (80043f0 <HAL_FLASHEx_DATAEEPROM_Lock+0x1c>)
 80043de:	f043 0301 	orr.w	r3, r3, #1
 80043e2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bc80      	pop	{r7}
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	40023c00 	.word	0x40023c00

080043f4 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t TypeErase, uint32_t Address)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043fe:	2300      	movs	r3, #0
 8004400:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TYPEERASEDATA(TypeErase));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004402:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004406:	f7ff fd85 	bl	8003f14 <FLASH_WaitForLastOperation>
 800440a:	4603      	mov	r3, r0
 800440c:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800440e:	7bfb      	ldrb	r3, [r7, #15]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d11a      	bne.n	800444a <HAL_FLASHEx_DATAEEPROM_Erase+0x56>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004414:	4b0f      	ldr	r3, [pc, #60]	; (8004454 <HAL_FLASHEx_DATAEEPROM_Erase+0x60>)
 8004416:	2200      	movs	r2, #0
 8004418:	615a      	str	r2, [r3, #20]

    if(TypeErase == FLASH_TYPEERASEDATA_WORD)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2b02      	cmp	r3, #2
 800441e:	d102      	bne.n	8004426 <HAL_FLASHEx_DATAEEPROM_Erase+0x32>
    {
      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	2200      	movs	r2, #0
 8004424:	601a      	str	r2, [r3, #0]
    }

    if(TypeErase == FLASH_TYPEERASEDATA_HALFWORD)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d102      	bne.n	8004432 <HAL_FLASHEx_DATAEEPROM_Erase+0x3e>
    {
      /* Write 0000h to valid address in the data memory */
      *(__IO uint16_t *) Address = (uint16_t)0x0000;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	2200      	movs	r2, #0
 8004430:	801a      	strh	r2, [r3, #0]
    }

    if(TypeErase == FLASH_TYPEERASEDATA_BYTE)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d102      	bne.n	800443e <HAL_FLASHEx_DATAEEPROM_Erase+0x4a>
    {
      /* Write 00h to valid address in the data memory */
      *(__IO uint8_t *) Address = (uint8_t)0x00;
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	2200      	movs	r2, #0
 800443c:	701a      	strb	r2, [r3, #0]
    }

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800443e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004442:	f7ff fd67 	bl	8003f14 <FLASH_WaitForLastOperation>
 8004446:	4603      	mov	r3, r0
 8004448:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the erase status */
  return status;
 800444a:	7bfb      	ldrb	r3, [r7, #15]
}
 800444c:	4618      	mov	r0, r3
 800444e:	3710      	adds	r7, #16
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	20000748 	.word	0x20000748

08004458 <HAL_FLASHEx_DATAEEPROM_Program>:
  *
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b086      	sub	sp, #24
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004468:	4b31      	ldr	r3, [pc, #196]	; (8004530 <HAL_FLASHEx_DATAEEPROM_Program+0xd8>)
 800446a:	7c1b      	ldrb	r3, [r3, #16]
 800446c:	2b01      	cmp	r3, #1
 800446e:	d101      	bne.n	8004474 <HAL_FLASHEx_DATAEEPROM_Program+0x1c>
 8004470:	2302      	movs	r3, #2
 8004472:	e058      	b.n	8004526 <HAL_FLASHEx_DATAEEPROM_Program+0xce>
 8004474:	4b2e      	ldr	r3, [pc, #184]	; (8004530 <HAL_FLASHEx_DATAEEPROM_Program+0xd8>)
 8004476:	2201      	movs	r2, #1
 8004478:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800447a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800447e:	f7ff fd49 	bl	8003f14 <FLASH_WaitForLastOperation>
 8004482:	4603      	mov	r3, r0
 8004484:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8004486:	7dfb      	ldrb	r3, [r7, #23]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d148      	bne.n	800451e <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800448c:	4b28      	ldr	r3, [pc, #160]	; (8004530 <HAL_FLASHEx_DATAEEPROM_Program+0xd8>)
 800448e:	2200      	movs	r2, #0
 8004490:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2b02      	cmp	r3, #2
 8004496:	d106      	bne.n	80044a6 <HAL_FLASHEx_DATAEEPROM_Program+0x4e>
    {
      /* Program word (32-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_ProgramWord(Address, (uint32_t) Data);
 8004498:	6879      	ldr	r1, [r7, #4]
 800449a:	68b8      	ldr	r0, [r7, #8]
 800449c:	f000 fc38 	bl	8004d10 <FLASH_DATAEEPROM_ProgramWord>
 80044a0:	4603      	mov	r3, r0
 80044a2:	75fb      	strb	r3, [r7, #23]
 80044a4:	e03b      	b.n	800451e <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d108      	bne.n	80044be <HAL_FLASHEx_DATAEEPROM_Program+0x66>
    {
      /* Program halfword (16-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_ProgramHalfWord(Address, (uint16_t) Data);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	4619      	mov	r1, r3
 80044b2:	68b8      	ldr	r0, [r7, #8]
 80044b4:	f000 fc0d 	bl	8004cd2 <FLASH_DATAEEPROM_ProgramHalfWord>
 80044b8:	4603      	mov	r3, r0
 80044ba:	75fb      	strb	r3, [r7, #23]
 80044bc:	e02f      	b.n	800451e <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d108      	bne.n	80044d6 <HAL_FLASHEx_DATAEEPROM_Program+0x7e>
    {
      /* Program byte (8-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_ProgramByte(Address, (uint8_t) Data);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	4619      	mov	r1, r3
 80044ca:	68b8      	ldr	r0, [r7, #8]
 80044cc:	f000 fbe2 	bl	8004c94 <FLASH_DATAEEPROM_ProgramByte>
 80044d0:	4603      	mov	r3, r0
 80044d2:	75fb      	strb	r3, [r7, #23]
 80044d4:	e023      	b.n	800451e <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTBYTE)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2b04      	cmp	r3, #4
 80044da:	d108      	bne.n	80044ee <HAL_FLASHEx_DATAEEPROM_Program+0x96>
    {
      /*Program word (8-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_FastProgramByte(Address, (uint8_t) Data);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	4619      	mov	r1, r3
 80044e2:	68b8      	ldr	r0, [r7, #8]
 80044e4:	f000 fb60 	bl	8004ba8 <FLASH_DATAEEPROM_FastProgramByte>
 80044e8:	4603      	mov	r3, r0
 80044ea:	75fb      	strb	r3, [r7, #23]
 80044ec:	e017      	b.n	800451e <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTHALFWORD)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2b08      	cmp	r3, #8
 80044f2:	d108      	bne.n	8004506 <HAL_FLASHEx_DATAEEPROM_Program+0xae>
    {
      /* Program halfword (16-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_FastProgramHalfWord(Address, (uint16_t) Data);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	4619      	mov	r1, r3
 80044fa:	68b8      	ldr	r0, [r7, #8]
 80044fc:	f000 fb7c 	bl	8004bf8 <FLASH_DATAEEPROM_FastProgramHalfWord>
 8004500:	4603      	mov	r3, r0
 8004502:	75fb      	strb	r3, [r7, #23]
 8004504:	e00b      	b.n	800451e <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTWORD)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2b10      	cmp	r3, #16
 800450a:	d106      	bne.n	800451a <HAL_FLASHEx_DATAEEPROM_Program+0xc2>
    {
      /* Program word (32-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_FastProgramWord(Address, (uint32_t) Data);
 800450c:	6879      	ldr	r1, [r7, #4]
 800450e:	68b8      	ldr	r0, [r7, #8]
 8004510:	f000 fb9a 	bl	8004c48 <FLASH_DATAEEPROM_FastProgramWord>
 8004514:	4603      	mov	r3, r0
 8004516:	75fb      	strb	r3, [r7, #23]
 8004518:	e001      	b.n	800451e <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else
    {
      status = HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	75fb      	strb	r3, [r7, #23]
    }

  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800451e:	4b04      	ldr	r3, [pc, #16]	; (8004530 <HAL_FLASHEx_DATAEEPROM_Program+0xd8>)
 8004520:	2200      	movs	r2, #0
 8004522:	741a      	strb	r2, [r3, #16]

  return status;
 8004524:	7dfb      	ldrb	r3, [r7, #23]
}
 8004526:	4618      	mov	r0, r3
 8004528:	3718      	adds	r7, #24
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	20000748 	.word	0x20000748

08004534 <HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram>:
/**
  * @brief  Enable DATA EEPROM fixed Time programming (2*Tprog).
  * @retval None
  */
void HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram(void)
{
 8004534:	b480      	push	{r7}
 8004536:	af00      	add	r7, sp, #0
  SET_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 8004538:	4b04      	ldr	r3, [pc, #16]	; (800454c <HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram+0x18>)
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	4a03      	ldr	r2, [pc, #12]	; (800454c <HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram+0x18>)
 800453e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004542:	6053      	str	r3, [r2, #4]
}
 8004544:	bf00      	nop
 8004546:	46bd      	mov	sp, r7
 8004548:	bc80      	pop	{r7}
 800454a:	4770      	bx	lr
 800454c:	40023c00 	.word	0x40023c00

08004550 <HAL_FLASHEx_DATAEEPROM_DisableFixedTimeProgram>:
/**
  * @brief  Disables DATA EEPROM fixed Time programming (2*Tprog).
  * @retval None
  */
void HAL_FLASHEx_DATAEEPROM_DisableFixedTimeProgram(void)
{
 8004550:	b480      	push	{r7}
 8004552:	af00      	add	r7, sp, #0
  CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 8004554:	4b04      	ldr	r3, [pc, #16]	; (8004568 <HAL_FLASHEx_DATAEEPROM_DisableFixedTimeProgram+0x18>)
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	4a03      	ldr	r2, [pc, #12]	; (8004568 <HAL_FLASHEx_DATAEEPROM_DisableFixedTimeProgram+0x18>)
 800455a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800455e:	6053      	str	r3, [r2, #4]
}
 8004560:	bf00      	nop
 8004562:	46bd      	mov	sp, r7
 8004564:	bc80      	pop	{r7}
 8004566:	4770      	bx	lr
 8004568:	40023c00 	.word	0x40023c00

0800456c <FLASH_OB_RDPConfig>:
  *  !!!Warning!!! When enabling OB_RDP_LEVEL_2 it's no more possible to go back to level 1 or 0
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_RDPConfig(uint8_t OB_RDP)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b086      	sub	sp, #24
 8004570:	af00      	add	r7, sp, #0
 8004572:	4603      	mov	r3, r0
 8004574:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8004576:	2300      	movs	r3, #0
 8004578:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp1 = 0U, tmp2 = 0U, tmp3 = 0U;
 800457a:	2300      	movs	r3, #0
 800457c:	613b      	str	r3, [r7, #16]
 800457e:	2300      	movs	r3, #0
 8004580:	60fb      	str	r3, [r7, #12]
 8004582:	2300      	movs	r3, #0
 8004584:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_OB_RDP(OB_RDP));

  tmp1 = (uint32_t)(OB->RDP & FLASH_OBR_RDPRT);
 8004586:	4b19      	ldr	r3, [pc, #100]	; (80045ec <FLASH_OB_RDPConfig+0x80>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	b2db      	uxtb	r3, r3
 800458c:	613b      	str	r3, [r7, #16]
  /* According to errata sheet, DocID022054 Rev 5, par2.1.5
  Before setting Level0 in the RDP register, check that the current level is not equal to Level0.
  If the current level is not equal to Level0, Level0 can be activated.
  If the current level is Level0 then the RDP register must not be written again with Level0. */

  if ((tmp1 == OB_RDP_LEVEL_0) && (OB_RDP == OB_RDP_LEVEL_0))
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	2baa      	cmp	r3, #170	; 0xaa
 8004592:	d105      	bne.n	80045a0 <FLASH_OB_RDPConfig+0x34>
 8004594:	79fb      	ldrb	r3, [r7, #7]
 8004596:	2baa      	cmp	r3, #170	; 0xaa
 8004598:	d102      	bne.n	80045a0 <FLASH_OB_RDPConfig+0x34>
  {
    /*current level is Level0 then the RDP register must not be written again with Level0. */
    status = HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	75fb      	strb	r3, [r7, #23]
 800459e:	e020      	b.n	80045e2 <FLASH_OB_RDPConfig+0x76>
    /* Mask SPRMOD bit */
    tmp3 = (uint32_t)(OB->RDP & FLASH_OBR_SPRMOD);
#endif

    /* calculate the option byte to write */
    tmp1 = (~((uint32_t)(OB_RDP | tmp3)));
 80045a0:	79fa      	ldrb	r2, [r7, #7]
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	43db      	mvns	r3, r3
 80045a8:	613b      	str	r3, [r7, #16]
    tmp2 = (uint32_t)(((uint32_t)((uint32_t)(tmp1) << 16U)) | ((uint32_t)(OB_RDP | tmp3)));
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	041a      	lsls	r2, r3, #16
 80045ae:	79f9      	ldrb	r1, [r7, #7]
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	430b      	orrs	r3, r1
 80045b4:	4313      	orrs	r3, r2
 80045b6:	60fb      	str	r3, [r7, #12]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80045b8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80045bc:	f7ff fcaa 	bl	8003f14 <FLASH_WaitForLastOperation>
 80045c0:	4603      	mov	r3, r0
 80045c2:	75fb      	strb	r3, [r7, #23]

    if(status == HAL_OK)
 80045c4:	7dfb      	ldrb	r3, [r7, #23]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d10b      	bne.n	80045e2 <FLASH_OB_RDPConfig+0x76>
    {
      /* Clean the error context */
      pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80045ca:	4b09      	ldr	r3, [pc, #36]	; (80045f0 <FLASH_OB_RDPConfig+0x84>)
 80045cc:	2200      	movs	r2, #0
 80045ce:	615a      	str	r2, [r3, #20]

      /* program read protection level */
      OB->RDP = tmp2;
 80045d0:	4a06      	ldr	r2, [pc, #24]	; (80045ec <FLASH_OB_RDPConfig+0x80>)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6013      	str	r3, [r2, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80045d6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80045da:	f7ff fc9b 	bl	8003f14 <FLASH_WaitForLastOperation>
 80045de:	4603      	mov	r3, r0
 80045e0:	75fb      	strb	r3, [r7, #23]
    }
  }

  /* Return the Read protection operation Status */
  return status;
 80045e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3718      	adds	r7, #24
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	1ff80000 	.word	0x1ff80000
 80045f0:	20000748 	.word	0x20000748

080045f4 <FLASH_OB_BORConfig>:
  *     @arg @ref OB_BOR_LEVEL4 BOR Reset threshold levels for 2.55V - 2.65V VDD power supply
  *     @arg @ref OB_BOR_LEVEL5 BOR Reset threshold levels for 2.8V - 2.9V VDD power supply
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_BORConfig(uint8_t OB_BOR)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	4603      	mov	r3, r0
 80045fc:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80045fe:	2300      	movs	r3, #0
 8004600:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp = 0U, tmp1 = 0U;
 8004602:	2300      	movs	r3, #0
 8004604:	613b      	str	r3, [r7, #16]
 8004606:	2300      	movs	r3, #0
 8004608:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_OB_BOR_LEVEL(OB_BOR));

  /* Get the User Option byte register */
  tmp1 = OB->USER & ((~FLASH_OBR_BOR_LEV) >> 16U);
 800460a:	4b16      	ldr	r3, [pc, #88]	; (8004664 <FLASH_OB_BORConfig+0x70>)
 800460c:	685a      	ldr	r2, [r3, #4]
 800460e:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8004612:	4013      	ands	r3, r2
 8004614:	60fb      	str	r3, [r7, #12]

  /* Calculate the option byte to write - [0xFFU | nUSER | 0x00U | USER]*/
  tmp = (uint32_t)~((OB_BOR | tmp1)) << 16U;
 8004616:	79fa      	ldrb	r2, [r7, #7]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	4313      	orrs	r3, r2
 800461c:	43db      	mvns	r3, r3
 800461e:	041b      	lsls	r3, r3, #16
 8004620:	613b      	str	r3, [r7, #16]
  tmp |= (OB_BOR | tmp1);
 8004622:	79fa      	ldrb	r2, [r7, #7]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	4313      	orrs	r3, r2
 8004628:	693a      	ldr	r2, [r7, #16]
 800462a:	4313      	orrs	r3, r2
 800462c:	613b      	str	r3, [r7, #16]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800462e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004632:	f7ff fc6f 	bl	8003f14 <FLASH_WaitForLastOperation>
 8004636:	4603      	mov	r3, r0
 8004638:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 800463a:	7dfb      	ldrb	r3, [r7, #23]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d10b      	bne.n	8004658 <FLASH_OB_BORConfig+0x64>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004640:	4b09      	ldr	r3, [pc, #36]	; (8004668 <FLASH_OB_BORConfig+0x74>)
 8004642:	2200      	movs	r2, #0
 8004644:	615a      	str	r2, [r3, #20]

    /* Write the BOR Option Byte */
    OB->USER = tmp;
 8004646:	4a07      	ldr	r2, [pc, #28]	; (8004664 <FLASH_OB_BORConfig+0x70>)
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	6053      	str	r3, [r2, #4]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800464c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004650:	f7ff fc60 	bl	8003f14 <FLASH_WaitForLastOperation>
 8004654:	4603      	mov	r3, r0
 8004656:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the Option Byte BOR Programming Status */
  return status;
 8004658:	7dfb      	ldrb	r3, [r7, #23]
}
 800465a:	4618      	mov	r0, r3
 800465c:	3718      	adds	r7, #24
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	1ff80000 	.word	0x1ff80000
 8004668:	20000748 	.word	0x20000748

0800466c <FLASH_OB_GetUser>:
/**
  * @brief  Returns the FLASH User Option Bytes values.
  * @retval The FLASH User Option Bytes.
  */
static uint8_t FLASH_OB_GetUser(void)
{
 800466c:	b480      	push	{r7}
 800466e:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return (uint8_t)((FLASH->OBR & (FLASH_OBR_IWDG_SW | FLASH_OBR_nRST_STOP | FLASH_OBR_nRST_STDBY)) >> 16U);
 8004670:	4b05      	ldr	r3, [pc, #20]	; (8004688 <FLASH_OB_GetUser+0x1c>)
 8004672:	69db      	ldr	r3, [r3, #28]
 8004674:	0c1b      	lsrs	r3, r3, #16
 8004676:	b2db      	uxtb	r3, r3
 8004678:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800467c:	b2db      	uxtb	r3, r3
}
 800467e:	4618      	mov	r0, r3
 8004680:	46bd      	mov	sp, r7
 8004682:	bc80      	pop	{r7}
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	40023c00 	.word	0x40023c00

0800468c <FLASH_OB_GetRDP>:
  *            @arg @ref OB_RDP_LEVEL_0 No protection
  *            @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
  *            @arg @ref OB_RDP_LEVEL_2 Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
  uint8_t rdp_level = (uint8_t)(FLASH->OBR & FLASH_OBR_RDPRT);
 8004692:	4b08      	ldr	r3, [pc, #32]	; (80046b4 <FLASH_OB_GetRDP+0x28>)
 8004694:	69db      	ldr	r3, [r3, #28]
 8004696:	71fb      	strb	r3, [r7, #7]

  if ((rdp_level != OB_RDP_LEVEL_0) && (rdp_level != OB_RDP_LEVEL_2))
 8004698:	79fb      	ldrb	r3, [r7, #7]
 800469a:	2baa      	cmp	r3, #170	; 0xaa
 800469c:	d004      	beq.n	80046a8 <FLASH_OB_GetRDP+0x1c>
 800469e:	79fb      	ldrb	r3, [r7, #7]
 80046a0:	2bcc      	cmp	r3, #204	; 0xcc
 80046a2:	d001      	beq.n	80046a8 <FLASH_OB_GetRDP+0x1c>
  {
    return (OB_RDP_LEVEL_1);
 80046a4:	23bb      	movs	r3, #187	; 0xbb
 80046a6:	e000      	b.n	80046aa <FLASH_OB_GetRDP+0x1e>
  }
  else
  {
    return (rdp_level);
 80046a8:	79fb      	ldrb	r3, [r7, #7]
  }
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	370c      	adds	r7, #12
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bc80      	pop	{r7}
 80046b2:	4770      	bx	lr
 80046b4:	40023c00 	.word	0x40023c00

080046b8 <FLASH_OB_GetBOR>:
/**
  * @brief  Returns the FLASH BOR level.
  * @retval The BOR level Option Bytes.
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 80046b8:	b480      	push	{r7}
 80046ba:	af00      	add	r7, sp, #0
  /* Return the BOR level */
  return (uint8_t)((FLASH->OBR & (uint32_t)FLASH_OBR_BOR_LEV) >> 16U);
 80046bc:	4b05      	ldr	r3, [pc, #20]	; (80046d4 <FLASH_OB_GetBOR+0x1c>)
 80046be:	69db      	ldr	r3, [r3, #28]
 80046c0:	0c1b      	lsrs	r3, r3, #16
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	f003 030f 	and.w	r3, r3, #15
 80046c8:	b2db      	uxtb	r3, r3
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bc80      	pop	{r7}
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	40023c00 	.word	0x40023c00

080046d8 <FLASH_OB_WRPConfig>:
  * @param  NewState new state of the specified FLASH Pages Wtite protection.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval HAL_StatusTypeDef
  */
static HAL_StatusTypeDef FLASH_OB_WRPConfig(FLASH_OBProgramInitTypeDef *pOBInit, FunctionalState NewState)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	460b      	mov	r3, r1
 80046e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80046e4:	2300      	movs	r3, #0
 80046e6:	73fb      	strb	r3, [r7, #15]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80046e8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80046ec:	f7ff fc12 	bl	8003f14 <FLASH_WaitForLastOperation>
 80046f0:	4603      	mov	r3, r0
 80046f2:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80046f4:	7bfb      	ldrb	r3, [r7, #15]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d134      	bne.n	8004764 <FLASH_OB_WRPConfig+0x8c>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80046fa:	4b1d      	ldr	r3, [pc, #116]	; (8004770 <FLASH_OB_WRPConfig+0x98>)
 80046fc:	2200      	movs	r2, #0
 80046fe:	615a      	str	r2, [r3, #20]

    /* WRP for sector between 0 to 31 */
    if (pOBInit->WRPSector0To31 != 0U)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d006      	beq.n	8004716 <FLASH_OB_WRPConfig+0x3e>
    {
      FLASH_OB_WRPConfigWRP1OrPCROP1(pOBInit->WRPSector0To31, NewState);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	78fa      	ldrb	r2, [r7, #3]
 800470e:	4611      	mov	r1, r2
 8004710:	4618      	mov	r0, r3
 8004712:	f000 f82f 	bl	8004774 <FLASH_OB_WRPConfigWRP1OrPCROP1>
 || defined(STM32L152xD) || defined(STM32L152xDX) || defined(STM32L162xCA) || defined(STM32L162xD)  \
 || defined(STM32L162xDX) || defined(STM32L151xE) || defined(STM32L152xE) || defined(STM32L162xE)

    /* Pages for Cat3, Cat4 & Cat5 devices*/
    /* WRP for sector between 32 to 63 */
    if (pOBInit->WRPSector32To63 != 0U)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d006      	beq.n	800472c <FLASH_OB_WRPConfig+0x54>
    {
      FLASH_OB_WRPConfigWRP2OrPCROP2(pOBInit->WRPSector32To63, NewState);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	78fa      	ldrb	r2, [r7, #3]
 8004724:	4611      	mov	r1, r2
 8004726:	4618      	mov	r0, r3
 8004728:	f000 f886 	bl	8004838 <FLASH_OB_WRPConfigWRP2OrPCROP2>
 || defined(STM32L162xD) || defined(STM32L162xDX) || defined(STM32L151xE) || defined(STM32L152xE)  \
 || defined(STM32L162xE)

    /* Pages for devices with FLASH >= 256KB*/
    /* WRP for sector between 64 to 95 */
    if (pOBInit->WRPSector64To95 != 0U)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d006      	beq.n	8004742 <FLASH_OB_WRPConfig+0x6a>
    {
      FLASH_OB_WRPConfigWRP3(pOBInit->WRPSector64To95, NewState);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	78fa      	ldrb	r2, [r7, #3]
 800473a:	4611      	mov	r1, r2
 800473c:	4618      	mov	r0, r3
 800473e:	f000 f8dd 	bl	80048fc <FLASH_OB_WRPConfigWRP3>
#if defined(STM32L151xE) || defined(STM32L152xE) || defined(STM32L162xE) || defined(STM32L151xDX) \
 || defined(STM32L152xDX) || defined(STM32L162xDX)

    /* Pages for Cat5 devices*/
    /* WRP for sector between 96 to 127 */
    if (pOBInit->WRPSector96To127 != 0U)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d006      	beq.n	8004758 <FLASH_OB_WRPConfig+0x80>
    {
      FLASH_OB_WRPConfigWRP4(pOBInit->WRPSector96To127, NewState);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	78fa      	ldrb	r2, [r7, #3]
 8004750:	4611      	mov	r1, r2
 8004752:	4618      	mov	r0, r3
 8004754:	f000 f934 	bl	80049c0 <FLASH_OB_WRPConfigWRP4>
    }

#endif /* STM32L151xE || STM32L152xE || STM32L162xE || STM32L151xDX || ... */

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004758:	f24c 3050 	movw	r0, #50000	; 0xc350
 800475c:	f7ff fbda 	bl	8003f14 <FLASH_WaitForLastOperation>
 8004760:	4603      	mov	r3, r0
 8004762:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the write protection operation Status */
  return status;
 8004764:	7bfb      	ldrb	r3, [r7, #15]
}
 8004766:	4618      	mov	r0, r3
 8004768:	3710      	adds	r7, #16
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	20000748 	.word	0x20000748

08004774 <FLASH_OB_WRPConfigWRP1OrPCROP1>:
  * @param  NewState new state of the specified FLASH Pages Write protection.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
static void FLASH_OB_WRPConfigWRP1OrPCROP1(uint32_t WRP1OrPCROP1, FunctionalState NewState)
{
 8004774:	b480      	push	{r7}
 8004776:	b087      	sub	sp, #28
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	460b      	mov	r3, r1
 800477e:	70fb      	strb	r3, [r7, #3]
  uint32_t wrp01data = 0U, wrp23data = 0U;
 8004780:	2300      	movs	r3, #0
 8004782:	617b      	str	r3, [r7, #20]
 8004784:	2300      	movs	r3, #0
 8004786:	613b      	str	r3, [r7, #16]

  uint32_t tmp1 = 0U, tmp2 = 0U;
 8004788:	2300      	movs	r3, #0
 800478a:	60fb      	str	r3, [r7, #12]
 800478c:	2300      	movs	r3, #0
 800478e:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_OB_WRP(WRP1OrPCROP1));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004790:	78fb      	ldrb	r3, [r7, #3]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d023      	beq.n	80047de <FLASH_OB_WRPConfigWRP1OrPCROP1+0x6a>
  {
    wrp01data = (uint16_t)(((WRP1OrPCROP1 & WRP_MASK_LOW) | OB->WRP01));
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	b29a      	uxth	r2, r3
 800479a:	4b26      	ldr	r3, [pc, #152]	; (8004834 <FLASH_OB_WRPConfigWRP1OrPCROP1+0xc0>)
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	b29b      	uxth	r3, r3
 80047a0:	4313      	orrs	r3, r2
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	617b      	str	r3, [r7, #20]
    wrp23data = (uint16_t)((((WRP1OrPCROP1 & WRP_MASK_HIGH)>>16U | OB->WRP23)));
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	0c1b      	lsrs	r3, r3, #16
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	4b21      	ldr	r3, [pc, #132]	; (8004834 <FLASH_OB_WRPConfigWRP1OrPCROP1+0xc0>)
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	4313      	orrs	r3, r2
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	613b      	str	r3, [r7, #16]
    tmp1 = (uint32_t)(~(wrp01data) << 16U)|(wrp01data);
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	43db      	mvns	r3, r3
 80047bc:	041b      	lsls	r3, r3, #16
 80047be:	697a      	ldr	r2, [r7, #20]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	60fb      	str	r3, [r7, #12]
    OB->WRP01 = tmp1;
 80047c4:	4a1b      	ldr	r2, [pc, #108]	; (8004834 <FLASH_OB_WRPConfigWRP1OrPCROP1+0xc0>)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6093      	str	r3, [r2, #8]

    tmp2 = (uint32_t)(~(wrp23data) << 16U)|(wrp23data);
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	43db      	mvns	r3, r3
 80047ce:	041b      	lsls	r3, r3, #16
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	60bb      	str	r3, [r7, #8]
    OB->WRP23 = tmp2;
 80047d6:	4a17      	ldr	r2, [pc, #92]	; (8004834 <FLASH_OB_WRPConfigWRP1OrPCROP1+0xc0>)
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	60d3      	str	r3, [r2, #12]
    OB->WRP01 = tmp1;

    tmp2 = (uint32_t)((~wrp23data) << 16U)|(wrp23data);
    OB->WRP23 = tmp2;
  }
}
 80047dc:	e025      	b.n	800482a <FLASH_OB_WRPConfigWRP1OrPCROP1+0xb6>
    wrp01data = (uint16_t)(~WRP1OrPCROP1 & (WRP_MASK_LOW & OB->WRP01));
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	43db      	mvns	r3, r3
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	4b13      	ldr	r3, [pc, #76]	; (8004834 <FLASH_OB_WRPConfigWRP1OrPCROP1+0xc0>)
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	4013      	ands	r3, r2
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	617b      	str	r3, [r7, #20]
    wrp23data = (uint16_t)((((~WRP1OrPCROP1 & WRP_MASK_HIGH)>>16U & OB->WRP23)));
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	43db      	mvns	r3, r3
 80047f6:	0c1b      	lsrs	r3, r3, #16
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	4b0e      	ldr	r3, [pc, #56]	; (8004834 <FLASH_OB_WRPConfigWRP1OrPCROP1+0xc0>)
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	b29b      	uxth	r3, r3
 8004800:	4013      	ands	r3, r2
 8004802:	b29b      	uxth	r3, r3
 8004804:	613b      	str	r3, [r7, #16]
    tmp1 = (uint32_t)((~wrp01data) << 16U)|(wrp01data);
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	43db      	mvns	r3, r3
 800480a:	041b      	lsls	r3, r3, #16
 800480c:	697a      	ldr	r2, [r7, #20]
 800480e:	4313      	orrs	r3, r2
 8004810:	60fb      	str	r3, [r7, #12]
    OB->WRP01 = tmp1;
 8004812:	4a08      	ldr	r2, [pc, #32]	; (8004834 <FLASH_OB_WRPConfigWRP1OrPCROP1+0xc0>)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6093      	str	r3, [r2, #8]
    tmp2 = (uint32_t)((~wrp23data) << 16U)|(wrp23data);
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	43db      	mvns	r3, r3
 800481c:	041b      	lsls	r3, r3, #16
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	4313      	orrs	r3, r2
 8004822:	60bb      	str	r3, [r7, #8]
    OB->WRP23 = tmp2;
 8004824:	4a03      	ldr	r2, [pc, #12]	; (8004834 <FLASH_OB_WRPConfigWRP1OrPCROP1+0xc0>)
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	60d3      	str	r3, [r2, #12]
}
 800482a:	bf00      	nop
 800482c:	371c      	adds	r7, #28
 800482e:	46bd      	mov	sp, r7
 8004830:	bc80      	pop	{r7}
 8004832:	4770      	bx	lr
 8004834:	1ff80000 	.word	0x1ff80000

08004838 <FLASH_OB_WRPConfigWRP2OrPCROP2>:
  * @param  NewState new state of the specified FLASH Pages Wtite protection.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
static void FLASH_OB_WRPConfigWRP2OrPCROP2(uint32_t WRP2OrPCROP2, FunctionalState NewState)
{
 8004838:	b480      	push	{r7}
 800483a:	b087      	sub	sp, #28
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	460b      	mov	r3, r1
 8004842:	70fb      	strb	r3, [r7, #3]
  uint32_t wrp45data = 0U, wrp67data = 0U;
 8004844:	2300      	movs	r3, #0
 8004846:	617b      	str	r3, [r7, #20]
 8004848:	2300      	movs	r3, #0
 800484a:	613b      	str	r3, [r7, #16]

  uint32_t tmp1 = 0U, tmp2 = 0U;
 800484c:	2300      	movs	r3, #0
 800484e:	60fb      	str	r3, [r7, #12]
 8004850:	2300      	movs	r3, #0
 8004852:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_OB_WRP(WRP2OrPCROP2));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004854:	78fb      	ldrb	r3, [r7, #3]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d023      	beq.n	80048a2 <FLASH_OB_WRPConfigWRP2OrPCROP2+0x6a>
  {
    wrp45data = (uint16_t)(((WRP2OrPCROP2 & WRP_MASK_LOW) | OB->WRP45));
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	b29a      	uxth	r2, r3
 800485e:	4b26      	ldr	r3, [pc, #152]	; (80048f8 <FLASH_OB_WRPConfigWRP2OrPCROP2+0xc0>)
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	b29b      	uxth	r3, r3
 8004864:	4313      	orrs	r3, r2
 8004866:	b29b      	uxth	r3, r3
 8004868:	617b      	str	r3, [r7, #20]
    wrp67data = (uint16_t)((((WRP2OrPCROP2 & WRP_MASK_HIGH)>>16U | OB->WRP67)));
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	0c1b      	lsrs	r3, r3, #16
 800486e:	b29a      	uxth	r2, r3
 8004870:	4b21      	ldr	r3, [pc, #132]	; (80048f8 <FLASH_OB_WRPConfigWRP2OrPCROP2+0xc0>)
 8004872:	695b      	ldr	r3, [r3, #20]
 8004874:	b29b      	uxth	r3, r3
 8004876:	4313      	orrs	r3, r2
 8004878:	b29b      	uxth	r3, r3
 800487a:	613b      	str	r3, [r7, #16]
    tmp1 = (uint32_t)(~(wrp45data) << 16U)|(wrp45data);
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	43db      	mvns	r3, r3
 8004880:	041b      	lsls	r3, r3, #16
 8004882:	697a      	ldr	r2, [r7, #20]
 8004884:	4313      	orrs	r3, r2
 8004886:	60fb      	str	r3, [r7, #12]
    OB->WRP45 = tmp1;
 8004888:	4a1b      	ldr	r2, [pc, #108]	; (80048f8 <FLASH_OB_WRPConfigWRP2OrPCROP2+0xc0>)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6113      	str	r3, [r2, #16]

    tmp2 = (uint32_t)(~(wrp67data) << 16U)|(wrp67data);
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	43db      	mvns	r3, r3
 8004892:	041b      	lsls	r3, r3, #16
 8004894:	693a      	ldr	r2, [r7, #16]
 8004896:	4313      	orrs	r3, r2
 8004898:	60bb      	str	r3, [r7, #8]
    OB->WRP67 = tmp2;
 800489a:	4a17      	ldr	r2, [pc, #92]	; (80048f8 <FLASH_OB_WRPConfigWRP2OrPCROP2+0xc0>)
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	6153      	str	r3, [r2, #20]
    OB->WRP45 = tmp1;

    tmp2 = (uint32_t)((~wrp67data) << 16U)|(wrp67data);
    OB->WRP67 = tmp2;
  }
}
 80048a0:	e025      	b.n	80048ee <FLASH_OB_WRPConfigWRP2OrPCROP2+0xb6>
    wrp45data = (uint16_t)(~WRP2OrPCROP2 & (WRP_MASK_LOW & OB->WRP45));
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	43db      	mvns	r3, r3
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	4b13      	ldr	r3, [pc, #76]	; (80048f8 <FLASH_OB_WRPConfigWRP2OrPCROP2+0xc0>)
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	4013      	ands	r3, r2
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	617b      	str	r3, [r7, #20]
    wrp67data = (uint16_t)((((~WRP2OrPCROP2 & WRP_MASK_HIGH)>>16U & OB->WRP67)));
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	43db      	mvns	r3, r3
 80048ba:	0c1b      	lsrs	r3, r3, #16
 80048bc:	b29a      	uxth	r2, r3
 80048be:	4b0e      	ldr	r3, [pc, #56]	; (80048f8 <FLASH_OB_WRPConfigWRP2OrPCROP2+0xc0>)
 80048c0:	695b      	ldr	r3, [r3, #20]
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	4013      	ands	r3, r2
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	613b      	str	r3, [r7, #16]
    tmp1 = (uint32_t)((~wrp45data) << 16U)|(wrp45data);
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	43db      	mvns	r3, r3
 80048ce:	041b      	lsls	r3, r3, #16
 80048d0:	697a      	ldr	r2, [r7, #20]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	60fb      	str	r3, [r7, #12]
    OB->WRP45 = tmp1;
 80048d6:	4a08      	ldr	r2, [pc, #32]	; (80048f8 <FLASH_OB_WRPConfigWRP2OrPCROP2+0xc0>)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6113      	str	r3, [r2, #16]
    tmp2 = (uint32_t)((~wrp67data) << 16U)|(wrp67data);
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	43db      	mvns	r3, r3
 80048e0:	041b      	lsls	r3, r3, #16
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	60bb      	str	r3, [r7, #8]
    OB->WRP67 = tmp2;
 80048e8:	4a03      	ldr	r2, [pc, #12]	; (80048f8 <FLASH_OB_WRPConfigWRP2OrPCROP2+0xc0>)
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	6153      	str	r3, [r2, #20]
}
 80048ee:	bf00      	nop
 80048f0:	371c      	adds	r7, #28
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bc80      	pop	{r7}
 80048f6:	4770      	bx	lr
 80048f8:	1ff80000 	.word	0x1ff80000

080048fc <FLASH_OB_WRPConfigWRP3>:
  * @param  NewState new state of the specified FLASH Pages Wtite protection.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
static void FLASH_OB_WRPConfigWRP3(uint32_t WRP3, FunctionalState NewState)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b087      	sub	sp, #28
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	460b      	mov	r3, r1
 8004906:	70fb      	strb	r3, [r7, #3]
  uint32_t wrp89data = 0U, wrp1011data = 0U;
 8004908:	2300      	movs	r3, #0
 800490a:	617b      	str	r3, [r7, #20]
 800490c:	2300      	movs	r3, #0
 800490e:	613b      	str	r3, [r7, #16]

  uint32_t tmp1 = 0U, tmp2 = 0U;
 8004910:	2300      	movs	r3, #0
 8004912:	60fb      	str	r3, [r7, #12]
 8004914:	2300      	movs	r3, #0
 8004916:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_OB_WRP(WRP3));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004918:	78fb      	ldrb	r3, [r7, #3]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d023      	beq.n	8004966 <FLASH_OB_WRPConfigWRP3+0x6a>
  {
    wrp89data = (uint16_t)(((WRP3 & WRP_MASK_LOW) | OB->WRP89));
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	b29a      	uxth	r2, r3
 8004922:	4b26      	ldr	r3, [pc, #152]	; (80049bc <FLASH_OB_WRPConfigWRP3+0xc0>)
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	b29b      	uxth	r3, r3
 8004928:	4313      	orrs	r3, r2
 800492a:	b29b      	uxth	r3, r3
 800492c:	617b      	str	r3, [r7, #20]
    wrp1011data = (uint16_t)((((WRP3 & WRP_MASK_HIGH)>>16U | OB->WRP1011)));
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	0c1b      	lsrs	r3, r3, #16
 8004932:	b29a      	uxth	r2, r3
 8004934:	4b21      	ldr	r3, [pc, #132]	; (80049bc <FLASH_OB_WRPConfigWRP3+0xc0>)
 8004936:	69db      	ldr	r3, [r3, #28]
 8004938:	b29b      	uxth	r3, r3
 800493a:	4313      	orrs	r3, r2
 800493c:	b29b      	uxth	r3, r3
 800493e:	613b      	str	r3, [r7, #16]
    tmp1 = (uint32_t)(~(wrp89data) << 16U)|(wrp89data);
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	43db      	mvns	r3, r3
 8004944:	041b      	lsls	r3, r3, #16
 8004946:	697a      	ldr	r2, [r7, #20]
 8004948:	4313      	orrs	r3, r2
 800494a:	60fb      	str	r3, [r7, #12]
    OB->WRP89 = tmp1;
 800494c:	4a1b      	ldr	r2, [pc, #108]	; (80049bc <FLASH_OB_WRPConfigWRP3+0xc0>)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6193      	str	r3, [r2, #24]

    tmp2 = (uint32_t)(~(wrp1011data) << 16U)|(wrp1011data);
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	43db      	mvns	r3, r3
 8004956:	041b      	lsls	r3, r3, #16
 8004958:	693a      	ldr	r2, [r7, #16]
 800495a:	4313      	orrs	r3, r2
 800495c:	60bb      	str	r3, [r7, #8]
    OB->WRP1011 = tmp2;
 800495e:	4a17      	ldr	r2, [pc, #92]	; (80049bc <FLASH_OB_WRPConfigWRP3+0xc0>)
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	61d3      	str	r3, [r2, #28]
    OB->WRP89 = tmp1;

    tmp2 = (uint32_t)((~wrp1011data) << 16U)|(wrp1011data);
    OB->WRP1011 = tmp2;
  }
}
 8004964:	e025      	b.n	80049b2 <FLASH_OB_WRPConfigWRP3+0xb6>
    wrp89data = (uint16_t)(~WRP3 & (WRP_MASK_LOW & OB->WRP89));
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	b29b      	uxth	r3, r3
 800496a:	43db      	mvns	r3, r3
 800496c:	b29a      	uxth	r2, r3
 800496e:	4b13      	ldr	r3, [pc, #76]	; (80049bc <FLASH_OB_WRPConfigWRP3+0xc0>)
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	b29b      	uxth	r3, r3
 8004974:	4013      	ands	r3, r2
 8004976:	b29b      	uxth	r3, r3
 8004978:	617b      	str	r3, [r7, #20]
    wrp1011data = (uint16_t)((((~WRP3 & WRP_MASK_HIGH)>>16U & OB->WRP1011)));
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	43db      	mvns	r3, r3
 800497e:	0c1b      	lsrs	r3, r3, #16
 8004980:	b29a      	uxth	r2, r3
 8004982:	4b0e      	ldr	r3, [pc, #56]	; (80049bc <FLASH_OB_WRPConfigWRP3+0xc0>)
 8004984:	69db      	ldr	r3, [r3, #28]
 8004986:	b29b      	uxth	r3, r3
 8004988:	4013      	ands	r3, r2
 800498a:	b29b      	uxth	r3, r3
 800498c:	613b      	str	r3, [r7, #16]
    tmp1 = (uint32_t)((~wrp89data) << 16U)|(wrp89data);
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	43db      	mvns	r3, r3
 8004992:	041b      	lsls	r3, r3, #16
 8004994:	697a      	ldr	r2, [r7, #20]
 8004996:	4313      	orrs	r3, r2
 8004998:	60fb      	str	r3, [r7, #12]
    OB->WRP89 = tmp1;
 800499a:	4a08      	ldr	r2, [pc, #32]	; (80049bc <FLASH_OB_WRPConfigWRP3+0xc0>)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6193      	str	r3, [r2, #24]
    tmp2 = (uint32_t)((~wrp1011data) << 16U)|(wrp1011data);
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	43db      	mvns	r3, r3
 80049a4:	041b      	lsls	r3, r3, #16
 80049a6:	693a      	ldr	r2, [r7, #16]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	60bb      	str	r3, [r7, #8]
    OB->WRP1011 = tmp2;
 80049ac:	4a03      	ldr	r2, [pc, #12]	; (80049bc <FLASH_OB_WRPConfigWRP3+0xc0>)
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	61d3      	str	r3, [r2, #28]
}
 80049b2:	bf00      	nop
 80049b4:	371c      	adds	r7, #28
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bc80      	pop	{r7}
 80049ba:	4770      	bx	lr
 80049bc:	1ff80000 	.word	0x1ff80000

080049c0 <FLASH_OB_WRPConfigWRP4>:
  * @param  NewState new state of the specified FLASH Pages Wtite protection.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
static void FLASH_OB_WRPConfigWRP4(uint32_t WRP4, FunctionalState NewState)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b087      	sub	sp, #28
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	460b      	mov	r3, r1
 80049ca:	70fb      	strb	r3, [r7, #3]
  uint32_t wrp1213data = 0U, wrp1415data = 0U;
 80049cc:	2300      	movs	r3, #0
 80049ce:	617b      	str	r3, [r7, #20]
 80049d0:	2300      	movs	r3, #0
 80049d2:	613b      	str	r3, [r7, #16]

  uint32_t tmp1 = 0U, tmp2 = 0U;
 80049d4:	2300      	movs	r3, #0
 80049d6:	60fb      	str	r3, [r7, #12]
 80049d8:	2300      	movs	r3, #0
 80049da:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_OB_WRP(WRP4));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80049dc:	78fb      	ldrb	r3, [r7, #3]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d027      	beq.n	8004a32 <FLASH_OB_WRPConfigWRP4+0x72>
  {
    wrp1213data = (uint16_t)(((WRP4 & WRP_MASK_LOW) | OB->WRP1213));
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	4b2a      	ldr	r3, [pc, #168]	; (8004a90 <FLASH_OB_WRPConfigWRP4+0xd0>)
 80049e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	4313      	orrs	r3, r2
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	617b      	str	r3, [r7, #20]
    wrp1415data = (uint16_t)((((WRP4 & WRP_MASK_HIGH)>>16U | OB->WRP1415)));
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	0c1b      	lsrs	r3, r3, #16
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	4b25      	ldr	r3, [pc, #148]	; (8004a90 <FLASH_OB_WRPConfigWRP4+0xd0>)
 80049fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	4313      	orrs	r3, r2
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	613b      	str	r3, [r7, #16]
    tmp1 = (uint32_t)(~(wrp1213data) << 16U)|(wrp1213data);
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	43db      	mvns	r3, r3
 8004a0c:	041b      	lsls	r3, r3, #16
 8004a0e:	697a      	ldr	r2, [r7, #20]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	60fb      	str	r3, [r7, #12]
    OB->WRP1213 = tmp1;
 8004a14:	4a1e      	ldr	r2, [pc, #120]	; (8004a90 <FLASH_OB_WRPConfigWRP4+0xd0>)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

    tmp2 = (uint32_t)(~(wrp1415data) << 16U)|(wrp1415data);
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	43db      	mvns	r3, r3
 8004a20:	041b      	lsls	r3, r3, #16
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	60bb      	str	r3, [r7, #8]
    OB->WRP1415 = tmp2;
 8004a28:	4a19      	ldr	r2, [pc, #100]	; (8004a90 <FLASH_OB_WRPConfigWRP4+0xd0>)
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    OB->WRP1213 = tmp1;

    tmp2 = (uint32_t)((~wrp1415data) << 16U)|(wrp1415data);
    OB->WRP1415 = tmp2;
  }
}
 8004a30:	e029      	b.n	8004a86 <FLASH_OB_WRPConfigWRP4+0xc6>
    wrp1213data = (uint16_t)(~WRP4 & (WRP_MASK_LOW & OB->WRP1213));
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	43db      	mvns	r3, r3
 8004a38:	b29a      	uxth	r2, r3
 8004a3a:	4b15      	ldr	r3, [pc, #84]	; (8004a90 <FLASH_OB_WRPConfigWRP4+0xd0>)
 8004a3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	4013      	ands	r3, r2
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	617b      	str	r3, [r7, #20]
    wrp1415data = (uint16_t)((((~WRP4 & WRP_MASK_HIGH)>>16U & OB->WRP1415)));
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	43db      	mvns	r3, r3
 8004a4c:	0c1b      	lsrs	r3, r3, #16
 8004a4e:	b29a      	uxth	r2, r3
 8004a50:	4b0f      	ldr	r3, [pc, #60]	; (8004a90 <FLASH_OB_WRPConfigWRP4+0xd0>)
 8004a52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	4013      	ands	r3, r2
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	613b      	str	r3, [r7, #16]
    tmp1 = (uint32_t)((~wrp1213data) << 16U)|(wrp1213data);
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	43db      	mvns	r3, r3
 8004a62:	041b      	lsls	r3, r3, #16
 8004a64:	697a      	ldr	r2, [r7, #20]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	60fb      	str	r3, [r7, #12]
    OB->WRP1213 = tmp1;
 8004a6a:	4a09      	ldr	r2, [pc, #36]	; (8004a90 <FLASH_OB_WRPConfigWRP4+0xd0>)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    tmp2 = (uint32_t)((~wrp1415data) << 16U)|(wrp1415data);
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	43db      	mvns	r3, r3
 8004a76:	041b      	lsls	r3, r3, #16
 8004a78:	693a      	ldr	r2, [r7, #16]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	60bb      	str	r3, [r7, #8]
    OB->WRP1415 = tmp2;
 8004a7e:	4a04      	ldr	r2, [pc, #16]	; (8004a90 <FLASH_OB_WRPConfigWRP4+0xd0>)
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
}
 8004a86:	bf00      	nop
 8004a88:	371c      	adds	r7, #28
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bc80      	pop	{r7}
 8004a8e:	4770      	bx	lr
 8004a90:	1ff80000 	.word	0x1ff80000

08004a94 <FLASH_OB_UserConfig>:
  *     @arg @ref OB_STDBY_NORST No reset generated when entering in STANDBY
  *     @arg @ref OB_STDBY_RST Reset generated when entering in STANDBY
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b086      	sub	sp, #24
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	71fb      	strb	r3, [r7, #7]
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	71bb      	strb	r3, [r7, #6]
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp = 0U, tmp1 = 0U;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	613b      	str	r3, [r7, #16]
 8004aae:	2300      	movs	r3, #0
 8004ab0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Get the User Option byte register */
  tmp1 = OB->USER & ((~(FLASH_OBR_IWDG_SW | FLASH_OBR_nRST_STOP | FLASH_OBR_nRST_STDBY)) >> 16U);
 8004ab2:	4b1d      	ldr	r3, [pc, #116]	; (8004b28 <FLASH_OB_UserConfig+0x94>)
 8004ab4:	685a      	ldr	r2, [r3, #4]
 8004ab6:	f64f 738f 	movw	r3, #65423	; 0xff8f
 8004aba:	4013      	ands	r3, r2
 8004abc:	60fb      	str	r3, [r7, #12]

  /* Calculate the user option byte to write */
  tmp = (uint32_t)(((uint32_t)~((uint32_t)((uint32_t)(OB_IWDG) | (uint32_t)(OB_STOP) | (uint32_t)(OB_STDBY) | tmp1))) << 16U);
 8004abe:	79fa      	ldrb	r2, [r7, #7]
 8004ac0:	79bb      	ldrb	r3, [r7, #6]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	b2da      	uxtb	r2, r3
 8004ac6:	797b      	ldrb	r3, [r7, #5]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	461a      	mov	r2, r3
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	43db      	mvns	r3, r3
 8004ad4:	041b      	lsls	r3, r3, #16
 8004ad6:	613b      	str	r3, [r7, #16]
  tmp |= ((uint32_t)(OB_IWDG) | ((uint32_t)OB_STOP) | (uint32_t)(OB_STDBY) | tmp1);
 8004ad8:	79fa      	ldrb	r2, [r7, #7]
 8004ada:	79bb      	ldrb	r3, [r7, #6]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	b2da      	uxtb	r2, r3
 8004ae0:	797b      	ldrb	r3, [r7, #5]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	693a      	ldr	r2, [r7, #16]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	613b      	str	r3, [r7, #16]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004af2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004af6:	f7ff fa0d 	bl	8003f14 <FLASH_WaitForLastOperation>
 8004afa:	4603      	mov	r3, r0
 8004afc:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8004afe:	7dfb      	ldrb	r3, [r7, #23]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d10b      	bne.n	8004b1c <FLASH_OB_UserConfig+0x88>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004b04:	4b09      	ldr	r3, [pc, #36]	; (8004b2c <FLASH_OB_UserConfig+0x98>)
 8004b06:	2200      	movs	r2, #0
 8004b08:	615a      	str	r2, [r3, #20]

    /* Write the User Option Byte */
    OB->USER = tmp;
 8004b0a:	4a07      	ldr	r2, [pc, #28]	; (8004b28 <FLASH_OB_UserConfig+0x94>)
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	6053      	str	r3, [r2, #4]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004b10:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004b14:	f7ff f9fe 	bl	8003f14 <FLASH_WaitForLastOperation>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the Option Byte program Status */
  return status;
 8004b1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3718      	adds	r7, #24
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	1ff80000 	.word	0x1ff80000
 8004b2c:	20000748 	.word	0x20000748

08004b30 <FLASH_OB_BootConfig>:
  *        position and this parameter is selected the device will boot from Bank1(Default).
  *        For more information, please refer to AN2606 from www.st.com.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_BootConfig(uint8_t OB_BOOT)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b086      	sub	sp, #24
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	4603      	mov	r3, r0
 8004b38:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp = 0U, tmp1 = 0U;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	613b      	str	r3, [r7, #16]
 8004b42:	2300      	movs	r3, #0
 8004b44:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_OB_BOOT_BANK(OB_BOOT));

  /* Get the User Option byte register  and BOR Level*/
  tmp1 = OB->USER & ((~FLASH_OBR_nRST_BFB2) >> 16U);
 8004b46:	4b16      	ldr	r3, [pc, #88]	; (8004ba0 <FLASH_OB_BootConfig+0x70>)
 8004b48:	685a      	ldr	r2, [r3, #4]
 8004b4a:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8004b4e:	4013      	ands	r3, r2
 8004b50:	60fb      	str	r3, [r7, #12]

  /* Calculate the option byte to write */
  tmp = (uint32_t)~(OB_BOOT | tmp1) << 16U;
 8004b52:	79fa      	ldrb	r2, [r7, #7]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	43db      	mvns	r3, r3
 8004b5a:	041b      	lsls	r3, r3, #16
 8004b5c:	613b      	str	r3, [r7, #16]
  tmp |= (OB_BOOT | tmp1);
 8004b5e:	79fa      	ldrb	r2, [r7, #7]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	693a      	ldr	r2, [r7, #16]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	613b      	str	r3, [r7, #16]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004b6a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004b6e:	f7ff f9d1 	bl	8003f14 <FLASH_WaitForLastOperation>
 8004b72:	4603      	mov	r3, r0
 8004b74:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8004b76:	7dfb      	ldrb	r3, [r7, #23]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d10b      	bne.n	8004b94 <FLASH_OB_BootConfig+0x64>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004b7c:	4b09      	ldr	r3, [pc, #36]	; (8004ba4 <FLASH_OB_BootConfig+0x74>)
 8004b7e:	2200      	movs	r2, #0
 8004b80:	615a      	str	r2, [r3, #20]

    /* Write the BOOT Option Byte */
    OB->USER = tmp;
 8004b82:	4a07      	ldr	r2, [pc, #28]	; (8004ba0 <FLASH_OB_BootConfig+0x70>)
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	6053      	str	r3, [r2, #4]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004b88:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004b8c:	f7ff f9c2 	bl	8003f14 <FLASH_WaitForLastOperation>
 8004b90:	4603      	mov	r3, r0
 8004b92:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the Option Byte program Status */
  return status;
 8004b94:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3718      	adds	r7, #24
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	1ff80000 	.word	0x1ff80000
 8004ba4:	20000748 	.word	0x20000748

08004ba8 <FLASH_DATAEEPROM_FastProgramByte>:
  * @param  Data specifies the data to be written.
  * @note   This function assumes that the is data word is already erased.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_FastProgramByte(uint32_t Address, uint8_t Data)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004bb8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004bbc:	f7ff f9aa 	bl	8003f14 <FLASH_WaitForLastOperation>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8004bc4:	7bfb      	ldrb	r3, [r7, #15]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10e      	bne.n	8004be8 <FLASH_DATAEEPROM_FastProgramByte+0x40>
  {
    /* Clear the FTDW bit */
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 8004bca:	4b0a      	ldr	r3, [pc, #40]	; (8004bf4 <FLASH_DATAEEPROM_FastProgramByte+0x4c>)
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	4a09      	ldr	r2, [pc, #36]	; (8004bf4 <FLASH_DATAEEPROM_FastProgramByte+0x4c>)
 8004bd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bd4:	6053      	str	r3, [r2, #4]
      /* Process Locked */
      __HAL_LOCK(&pFlash);
    }
#else /*!Cat1*/
    /* If the previous operation is completed, proceed to write the new Data */
    *(__IO uint8_t *)Address = Data;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	78fa      	ldrb	r2, [r7, #3]
 8004bda:	701a      	strb	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004bdc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004be0:	f7ff f998 	bl	8003f14 <FLASH_WaitForLastOperation>
 8004be4:	4603      	mov	r3, r0
 8004be6:	73fb      	strb	r3, [r7, #15]
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 8004be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3710      	adds	r7, #16
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	40023c00 	.word	0x40023c00

08004bf8 <FLASH_DATAEEPROM_FastProgramHalfWord>:
  * @param  Data specifies the data to be written.
  * @note   This function assumes that the is data word is already erased.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_FastProgramHalfWord(uint32_t Address, uint16_t Data)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	460b      	mov	r3, r1
 8004c02:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004c04:	2300      	movs	r3, #0
 8004c06:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004c08:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004c0c:	f7ff f982 	bl	8003f14 <FLASH_WaitForLastOperation>
 8004c10:	4603      	mov	r3, r0
 8004c12:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8004c14:	7bfb      	ldrb	r3, [r7, #15]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d10e      	bne.n	8004c38 <FLASH_DATAEEPROM_FastProgramHalfWord+0x40>
  {
    /* Clear the FTDW bit */
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 8004c1a:	4b0a      	ldr	r3, [pc, #40]	; (8004c44 <FLASH_DATAEEPROM_FastProgramHalfWord+0x4c>)
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	4a09      	ldr	r2, [pc, #36]	; (8004c44 <FLASH_DATAEEPROM_FastProgramHalfWord+0x4c>)
 8004c20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c24:	6053      	str	r3, [r2, #4]
      /* Process Locked */
      __HAL_LOCK(&pFlash);
    }
#else /* !Cat1 */
    /* If the previous operation is completed, proceed to write the new data */
    *(__IO uint16_t *)Address = Data;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	887a      	ldrh	r2, [r7, #2]
 8004c2a:	801a      	strh	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004c2c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004c30:	f7ff f970 	bl	8003f14 <FLASH_WaitForLastOperation>
 8004c34:	4603      	mov	r3, r0
 8004c36:	73fb      	strb	r3, [r7, #15]
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 8004c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3710      	adds	r7, #16
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	40023c00 	.word	0x40023c00

08004c48 <FLASH_DATAEEPROM_FastProgramWord>:
  * @param  Data specifies the data to be written.
  * @note   This function assumes that the is data word is already erased.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_FastProgramWord(uint32_t Address, uint32_t Data)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c52:	2300      	movs	r3, #0
 8004c54:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004c56:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004c5a:	f7ff f95b 	bl	8003f14 <FLASH_WaitForLastOperation>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8004c62:	7bfb      	ldrb	r3, [r7, #15]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d10e      	bne.n	8004c86 <FLASH_DATAEEPROM_FastProgramWord+0x3e>
  {
    /* Clear the FTDW bit */
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 8004c68:	4b09      	ldr	r3, [pc, #36]	; (8004c90 <FLASH_DATAEEPROM_FastProgramWord+0x48>)
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	4a08      	ldr	r2, [pc, #32]	; (8004c90 <FLASH_DATAEEPROM_FastProgramWord+0x48>)
 8004c6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c72:	6053      	str	r3, [r2, #4]

    /* If the previous operation is completed, proceed to program the new data */
    *(__IO uint32_t *)Address = Data;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	683a      	ldr	r2, [r7, #0]
 8004c78:	601a      	str	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004c7a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004c7e:	f7ff f949 	bl	8003f14 <FLASH_WaitForLastOperation>
 8004c82:	4603      	mov	r3, r0
 8004c84:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the Write Status */
  return status;
 8004c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	40023c00 	.word	0x40023c00

08004c94 <FLASH_DATAEEPROM_ProgramByte>:
  * @param  Address specifies the address to be written.
  * @param  Data specifies the data to be written.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_ProgramByte(uint32_t Address, uint8_t Data)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004ca4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004ca8:	f7ff f934 	bl	8003f14 <FLASH_WaitForLastOperation>
 8004cac:	4603      	mov	r3, r0
 8004cae:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8004cb0:	7bfb      	ldrb	r3, [r7, #15]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d108      	bne.n	8004cc8 <FLASH_DATAEEPROM_ProgramByte+0x34>
      status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFFFCU), tmp);
      /* Process Locked */
      __HAL_LOCK(&pFlash);
    }
#else /* Not Cat1*/
    *(__IO uint8_t *)Address = Data;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	78fa      	ldrb	r2, [r7, #3]
 8004cba:	701a      	strb	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004cbc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004cc0:	f7ff f928 	bl	8003f14 <FLASH_WaitForLastOperation>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	73fb      	strb	r3, [r7, #15]
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 8004cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <FLASH_DATAEEPROM_ProgramHalfWord>:
  * @param  Address specifies the address to be written.
  * @param  Data specifies the data to be written.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b084      	sub	sp, #16
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
 8004cda:	460b      	mov	r3, r1
 8004cdc:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004ce2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004ce6:	f7ff f915 	bl	8003f14 <FLASH_WaitForLastOperation>
 8004cea:	4603      	mov	r3, r0
 8004cec:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8004cee:	7bfb      	ldrb	r3, [r7, #15]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d108      	bne.n	8004d06 <FLASH_DATAEEPROM_ProgramHalfWord+0x34>
      }
      /* Process Locked */
      __HAL_LOCK(&pFlash);
    }
#else /* Not Cat1*/
    *(__IO uint16_t *)Address = Data;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	887a      	ldrh	r2, [r7, #2]
 8004cf8:	801a      	strh	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004cfa:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004cfe:	f7ff f909 	bl	8003f14 <FLASH_WaitForLastOperation>
 8004d02:	4603      	mov	r3, r0
 8004d04:	73fb      	strb	r3, [r7, #15]
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 8004d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3710      	adds	r7, #16
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <FLASH_DATAEEPROM_ProgramWord>:
  * @param  Address specifies the address to be written.
  * @param  Data specifies the data to be written.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_ProgramWord(uint32_t Address, uint32_t Data)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004d1e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004d22:	f7ff f8f7 	bl	8003f14 <FLASH_WaitForLastOperation>
 8004d26:	4603      	mov	r3, r0
 8004d28:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8004d2a:	7bfb      	ldrb	r3, [r7, #15]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d108      	bne.n	8004d42 <FLASH_DATAEEPROM_ProgramWord+0x32>
  {
    *(__IO uint32_t *)Address = Data;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	683a      	ldr	r2, [r7, #0]
 8004d34:	601a      	str	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004d36:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004d3a:	f7ff f8eb 	bl	8003f14 <FLASH_WaitForLastOperation>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the Write Status */
  return status;
 8004d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3710      	adds	r7, #16
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <FLASH_PageErase>:
  * @note   A Page is erased in the Program memory only if the address to load
  *         is the start address of a page (multiple of @ref FLASH_PAGE_SIZE bytes).
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004d54:	4b0c      	ldr	r3, [pc, #48]	; (8004d88 <FLASH_PageErase+0x3c>)
 8004d56:	2200      	movs	r2, #0
 8004d58:	615a      	str	r2, [r3, #20]

  /* Set the ERASE bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 8004d5a:	4b0c      	ldr	r3, [pc, #48]	; (8004d8c <FLASH_PageErase+0x40>)
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	4a0b      	ldr	r2, [pc, #44]	; (8004d8c <FLASH_PageErase+0x40>)
 8004d60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d64:	6053      	str	r3, [r2, #4]

  /* Set PROG bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8004d66:	4b09      	ldr	r3, [pc, #36]	; (8004d8c <FLASH_PageErase+0x40>)
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	4a08      	ldr	r2, [pc, #32]	; (8004d8c <FLASH_PageErase+0x40>)
 8004d6c:	f043 0308 	orr.w	r3, r3, #8
 8004d70:	6053      	str	r3, [r2, #4]

  /* Write 00000000h to the first word of the program page to erase */
  *(__IO uint32_t *)(uint32_t)(PageAddress & ~(FLASH_PAGE_SIZE - 1)) = 0x00000000;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004d78:	461a      	mov	r2, r3
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	6013      	str	r3, [r2, #0]
}
 8004d7e:	bf00      	nop
 8004d80:	370c      	adds	r7, #12
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bc80      	pop	{r7}
 8004d86:	4770      	bx	lr
 8004d88:	20000748 	.word	0x20000748
 8004d8c:	40023c00 	.word	0x40023c00

08004d90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b087      	sub	sp, #28
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8004da2:	2300      	movs	r3, #0
 8004da4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8004da6:	e160      	b.n	800506a <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	2101      	movs	r1, #1
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	fa01 f303 	lsl.w	r3, r1, r3
 8004db4:	4013      	ands	r3, r2
 8004db6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	f000 8152 	beq.w	8005064 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f003 0303 	and.w	r3, r3, #3
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d005      	beq.n	8004dd8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d130      	bne.n	8004e3a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	005b      	lsls	r3, r3, #1
 8004de2:	2203      	movs	r2, #3
 8004de4:	fa02 f303 	lsl.w	r3, r2, r3
 8004de8:	43db      	mvns	r3, r3
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	4013      	ands	r3, r2
 8004dee:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	68da      	ldr	r2, [r3, #12]
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	005b      	lsls	r3, r3, #1
 8004df8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8004e0e:	2201      	movs	r2, #1
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	fa02 f303 	lsl.w	r3, r2, r3
 8004e16:	43db      	mvns	r3, r3
 8004e18:	693a      	ldr	r2, [r7, #16]
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	091b      	lsrs	r3, r3, #4
 8004e24:	f003 0201 	and.w	r2, r3, #1
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	f003 0303 	and.w	r3, r3, #3
 8004e42:	2b03      	cmp	r3, #3
 8004e44:	d017      	beq.n	8004e76 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	005b      	lsls	r3, r3, #1
 8004e50:	2203      	movs	r2, #3
 8004e52:	fa02 f303 	lsl.w	r3, r2, r3
 8004e56:	43db      	mvns	r3, r3
 8004e58:	693a      	ldr	r2, [r7, #16]
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	689a      	ldr	r2, [r3, #8]
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	005b      	lsls	r3, r3, #1
 8004e66:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6a:	693a      	ldr	r2, [r7, #16]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	693a      	ldr	r2, [r7, #16]
 8004e74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f003 0303 	and.w	r3, r3, #3
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d123      	bne.n	8004eca <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	08da      	lsrs	r2, r3, #3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	3208      	adds	r2, #8
 8004e8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e8e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	f003 0307 	and.w	r3, r3, #7
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	220f      	movs	r2, #15
 8004e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9e:	43db      	mvns	r3, r3
 8004ea0:	693a      	ldr	r2, [r7, #16]
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	691a      	ldr	r2, [r3, #16]
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	f003 0307 	and.w	r3, r3, #7
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb6:	693a      	ldr	r2, [r7, #16]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	08da      	lsrs	r2, r3, #3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	3208      	adds	r2, #8
 8004ec4:	6939      	ldr	r1, [r7, #16]
 8004ec6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	005b      	lsls	r3, r3, #1
 8004ed4:	2203      	movs	r2, #3
 8004ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eda:	43db      	mvns	r3, r3
 8004edc:	693a      	ldr	r2, [r7, #16]
 8004ede:	4013      	ands	r3, r2
 8004ee0:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f003 0203 	and.w	r2, r3, #3
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	005b      	lsls	r3, r3, #1
 8004eee:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef2:	693a      	ldr	r2, [r7, #16]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	693a      	ldr	r2, [r7, #16]
 8004efc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	f000 80ac 	beq.w	8005064 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f0c:	4b5e      	ldr	r3, [pc, #376]	; (8005088 <HAL_GPIO_Init+0x2f8>)
 8004f0e:	6a1b      	ldr	r3, [r3, #32]
 8004f10:	4a5d      	ldr	r2, [pc, #372]	; (8005088 <HAL_GPIO_Init+0x2f8>)
 8004f12:	f043 0301 	orr.w	r3, r3, #1
 8004f16:	6213      	str	r3, [r2, #32]
 8004f18:	4b5b      	ldr	r3, [pc, #364]	; (8005088 <HAL_GPIO_Init+0x2f8>)
 8004f1a:	6a1b      	ldr	r3, [r3, #32]
 8004f1c:	f003 0301 	and.w	r3, r3, #1
 8004f20:	60bb      	str	r3, [r7, #8]
 8004f22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8004f24:	4a59      	ldr	r2, [pc, #356]	; (800508c <HAL_GPIO_Init+0x2fc>)
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	089b      	lsrs	r3, r3, #2
 8004f2a:	3302      	adds	r3, #2
 8004f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f30:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	f003 0303 	and.w	r3, r3, #3
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	220f      	movs	r2, #15
 8004f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f40:	43db      	mvns	r3, r3
 8004f42:	693a      	ldr	r2, [r7, #16]
 8004f44:	4013      	ands	r3, r2
 8004f46:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a51      	ldr	r2, [pc, #324]	; (8005090 <HAL_GPIO_Init+0x300>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d025      	beq.n	8004f9c <HAL_GPIO_Init+0x20c>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a50      	ldr	r2, [pc, #320]	; (8005094 <HAL_GPIO_Init+0x304>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d01f      	beq.n	8004f98 <HAL_GPIO_Init+0x208>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a4f      	ldr	r2, [pc, #316]	; (8005098 <HAL_GPIO_Init+0x308>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d019      	beq.n	8004f94 <HAL_GPIO_Init+0x204>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a4e      	ldr	r2, [pc, #312]	; (800509c <HAL_GPIO_Init+0x30c>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d013      	beq.n	8004f90 <HAL_GPIO_Init+0x200>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a4d      	ldr	r2, [pc, #308]	; (80050a0 <HAL_GPIO_Init+0x310>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d00d      	beq.n	8004f8c <HAL_GPIO_Init+0x1fc>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a4c      	ldr	r2, [pc, #304]	; (80050a4 <HAL_GPIO_Init+0x314>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d007      	beq.n	8004f88 <HAL_GPIO_Init+0x1f8>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a4b      	ldr	r2, [pc, #300]	; (80050a8 <HAL_GPIO_Init+0x318>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d101      	bne.n	8004f84 <HAL_GPIO_Init+0x1f4>
 8004f80:	2306      	movs	r3, #6
 8004f82:	e00c      	b.n	8004f9e <HAL_GPIO_Init+0x20e>
 8004f84:	2307      	movs	r3, #7
 8004f86:	e00a      	b.n	8004f9e <HAL_GPIO_Init+0x20e>
 8004f88:	2305      	movs	r3, #5
 8004f8a:	e008      	b.n	8004f9e <HAL_GPIO_Init+0x20e>
 8004f8c:	2304      	movs	r3, #4
 8004f8e:	e006      	b.n	8004f9e <HAL_GPIO_Init+0x20e>
 8004f90:	2303      	movs	r3, #3
 8004f92:	e004      	b.n	8004f9e <HAL_GPIO_Init+0x20e>
 8004f94:	2302      	movs	r3, #2
 8004f96:	e002      	b.n	8004f9e <HAL_GPIO_Init+0x20e>
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e000      	b.n	8004f9e <HAL_GPIO_Init+0x20e>
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	697a      	ldr	r2, [r7, #20]
 8004fa0:	f002 0203 	and.w	r2, r2, #3
 8004fa4:	0092      	lsls	r2, r2, #2
 8004fa6:	4093      	lsls	r3, r2
 8004fa8:	693a      	ldr	r2, [r7, #16]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004fae:	4937      	ldr	r1, [pc, #220]	; (800508c <HAL_GPIO_Init+0x2fc>)
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	089b      	lsrs	r3, r3, #2
 8004fb4:	3302      	adds	r3, #2
 8004fb6:	693a      	ldr	r2, [r7, #16]
 8004fb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004fbc:	4b3b      	ldr	r3, [pc, #236]	; (80050ac <HAL_GPIO_Init+0x31c>)
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	43db      	mvns	r3, r3
 8004fc6:	693a      	ldr	r2, [r7, #16]
 8004fc8:	4013      	ands	r3, r2
 8004fca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d003      	beq.n	8004fe0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8004fd8:	693a      	ldr	r2, [r7, #16]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004fe0:	4a32      	ldr	r2, [pc, #200]	; (80050ac <HAL_GPIO_Init+0x31c>)
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004fe6:	4b31      	ldr	r3, [pc, #196]	; (80050ac <HAL_GPIO_Init+0x31c>)
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	43db      	mvns	r3, r3
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d003      	beq.n	800500a <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8005002:	693a      	ldr	r2, [r7, #16]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	4313      	orrs	r3, r2
 8005008:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800500a:	4a28      	ldr	r2, [pc, #160]	; (80050ac <HAL_GPIO_Init+0x31c>)
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005010:	4b26      	ldr	r3, [pc, #152]	; (80050ac <HAL_GPIO_Init+0x31c>)
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	43db      	mvns	r3, r3
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	4013      	ands	r3, r2
 800501e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d003      	beq.n	8005034 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 800502c:	693a      	ldr	r2, [r7, #16]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	4313      	orrs	r3, r2
 8005032:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005034:	4a1d      	ldr	r2, [pc, #116]	; (80050ac <HAL_GPIO_Init+0x31c>)
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800503a:	4b1c      	ldr	r3, [pc, #112]	; (80050ac <HAL_GPIO_Init+0x31c>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	43db      	mvns	r3, r3
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	4013      	ands	r3, r2
 8005048:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d003      	beq.n	800505e <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	4313      	orrs	r3, r2
 800505c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800505e:	4a13      	ldr	r2, [pc, #76]	; (80050ac <HAL_GPIO_Init+0x31c>)
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	3301      	adds	r3, #1
 8005068:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	fa22 f303 	lsr.w	r3, r2, r3
 8005074:	2b00      	cmp	r3, #0
 8005076:	f47f ae97 	bne.w	8004da8 <HAL_GPIO_Init+0x18>
  }
}
 800507a:	bf00      	nop
 800507c:	bf00      	nop
 800507e:	371c      	adds	r7, #28
 8005080:	46bd      	mov	sp, r7
 8005082:	bc80      	pop	{r7}
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	40023800 	.word	0x40023800
 800508c:	40010000 	.word	0x40010000
 8005090:	40020000 	.word	0x40020000
 8005094:	40020400 	.word	0x40020400
 8005098:	40020800 	.word	0x40020800
 800509c:	40020c00 	.word	0x40020c00
 80050a0:	40021000 	.word	0x40021000
 80050a4:	40021400 	.word	0x40021400
 80050a8:	40021800 	.word	0x40021800
 80050ac:	40010400 	.word	0x40010400

080050b0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b087      	sub	sp, #28
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80050ba:	2300      	movs	r3, #0
 80050bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80050be:	2300      	movs	r3, #0
 80050c0:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00;
 80050c2:	2300      	movs	r3, #0
 80050c4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 80050c6:	e0c4      	b.n	8005252 <HAL_GPIO_DeInit+0x1a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1U << position);
 80050c8:	2201      	movs	r2, #1
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	fa02 f303 	lsl.w	r3, r2, r3
 80050d0:	683a      	ldr	r2, [r7, #0]
 80050d2:	4013      	ands	r3, r2
 80050d4:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	f000 80b7 	beq.w	800524c <HAL_GPIO_DeInit+0x19c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2];
 80050de:	4a63      	ldr	r2, [pc, #396]	; (800526c <HAL_GPIO_DeInit+0x1bc>)
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	089b      	lsrs	r3, r3, #2
 80050e4:	3302      	adds	r3, #2
 80050e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050ea:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FU) << (4 * (position & 0x03)));
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	f003 0303 	and.w	r3, r3, #3
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	220f      	movs	r2, #15
 80050f6:	fa02 f303 	lsl.w	r3, r2, r3
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	4013      	ands	r3, r2
 80050fe:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a5b      	ldr	r2, [pc, #364]	; (8005270 <HAL_GPIO_DeInit+0x1c0>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d025      	beq.n	8005154 <HAL_GPIO_DeInit+0xa4>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a5a      	ldr	r2, [pc, #360]	; (8005274 <HAL_GPIO_DeInit+0x1c4>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d01f      	beq.n	8005150 <HAL_GPIO_DeInit+0xa0>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a59      	ldr	r2, [pc, #356]	; (8005278 <HAL_GPIO_DeInit+0x1c8>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d019      	beq.n	800514c <HAL_GPIO_DeInit+0x9c>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a58      	ldr	r2, [pc, #352]	; (800527c <HAL_GPIO_DeInit+0x1cc>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d013      	beq.n	8005148 <HAL_GPIO_DeInit+0x98>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a57      	ldr	r2, [pc, #348]	; (8005280 <HAL_GPIO_DeInit+0x1d0>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d00d      	beq.n	8005144 <HAL_GPIO_DeInit+0x94>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a56      	ldr	r2, [pc, #344]	; (8005284 <HAL_GPIO_DeInit+0x1d4>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d007      	beq.n	8005140 <HAL_GPIO_DeInit+0x90>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a55      	ldr	r2, [pc, #340]	; (8005288 <HAL_GPIO_DeInit+0x1d8>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d101      	bne.n	800513c <HAL_GPIO_DeInit+0x8c>
 8005138:	2306      	movs	r3, #6
 800513a:	e00c      	b.n	8005156 <HAL_GPIO_DeInit+0xa6>
 800513c:	2307      	movs	r3, #7
 800513e:	e00a      	b.n	8005156 <HAL_GPIO_DeInit+0xa6>
 8005140:	2305      	movs	r3, #5
 8005142:	e008      	b.n	8005156 <HAL_GPIO_DeInit+0xa6>
 8005144:	2304      	movs	r3, #4
 8005146:	e006      	b.n	8005156 <HAL_GPIO_DeInit+0xa6>
 8005148:	2303      	movs	r3, #3
 800514a:	e004      	b.n	8005156 <HAL_GPIO_DeInit+0xa6>
 800514c:	2302      	movs	r3, #2
 800514e:	e002      	b.n	8005156 <HAL_GPIO_DeInit+0xa6>
 8005150:	2301      	movs	r3, #1
 8005152:	e000      	b.n	8005156 <HAL_GPIO_DeInit+0xa6>
 8005154:	2300      	movs	r3, #0
 8005156:	697a      	ldr	r2, [r7, #20]
 8005158:	f002 0203 	and.w	r2, r2, #3
 800515c:	0092      	lsls	r2, r2, #2
 800515e:	4093      	lsls	r3, r2
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	429a      	cmp	r2, r3
 8005164:	d132      	bne.n	80051cc <HAL_GPIO_DeInit+0x11c>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8005166:	4b49      	ldr	r3, [pc, #292]	; (800528c <HAL_GPIO_DeInit+0x1dc>)
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	43db      	mvns	r3, r3
 800516e:	4947      	ldr	r1, [pc, #284]	; (800528c <HAL_GPIO_DeInit+0x1dc>)
 8005170:	4013      	ands	r3, r2
 8005172:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8005174:	4b45      	ldr	r3, [pc, #276]	; (800528c <HAL_GPIO_DeInit+0x1dc>)
 8005176:	685a      	ldr	r2, [r3, #4]
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	43db      	mvns	r3, r3
 800517c:	4943      	ldr	r1, [pc, #268]	; (800528c <HAL_GPIO_DeInit+0x1dc>)
 800517e:	4013      	ands	r3, r2
 8005180:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8005182:	4b42      	ldr	r3, [pc, #264]	; (800528c <HAL_GPIO_DeInit+0x1dc>)
 8005184:	68da      	ldr	r2, [r3, #12]
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	43db      	mvns	r3, r3
 800518a:	4940      	ldr	r1, [pc, #256]	; (800528c <HAL_GPIO_DeInit+0x1dc>)
 800518c:	4013      	ands	r3, r2
 800518e:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8005190:	4b3e      	ldr	r3, [pc, #248]	; (800528c <HAL_GPIO_DeInit+0x1dc>)
 8005192:	689a      	ldr	r2, [r3, #8]
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	43db      	mvns	r3, r3
 8005198:	493c      	ldr	r1, [pc, #240]	; (800528c <HAL_GPIO_DeInit+0x1dc>)
 800519a:	4013      	ands	r3, r2
 800519c:	608b      	str	r3, [r1, #8]

        tmp = (0x0FU) << (4 * (position & 0x03));
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	f003 0303 	and.w	r3, r3, #3
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	220f      	movs	r2, #15
 80051a8:	fa02 f303 	lsl.w	r3, r2, r3
 80051ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 80051ae:	4a2f      	ldr	r2, [pc, #188]	; (800526c <HAL_GPIO_DeInit+0x1bc>)
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	089b      	lsrs	r3, r3, #2
 80051b4:	3302      	adds	r3, #2
 80051b6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	43da      	mvns	r2, r3
 80051be:	482b      	ldr	r0, [pc, #172]	; (800526c <HAL_GPIO_DeInit+0x1bc>)
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	089b      	lsrs	r3, r3, #2
 80051c4:	400a      	ands	r2, r1
 80051c6:	3302      	adds	r3, #2
 80051c8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2));
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	005b      	lsls	r3, r3, #1
 80051d4:	2103      	movs	r1, #3
 80051d6:	fa01 f303 	lsl.w	r3, r1, r3
 80051da:	43db      	mvns	r3, r3
 80051dc:	401a      	ands	r2, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      CLEAR_BIT(GPIOx->AFR[position >> 3], 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	08da      	lsrs	r2, r3, #3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	3208      	adds	r2, #8
 80051ea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	f003 0307 	and.w	r3, r3, #7
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	220f      	movs	r2, #15
 80051f8:	fa02 f303 	lsl.w	r3, r2, r3
 80051fc:	43db      	mvns	r3, r3
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	08d2      	lsrs	r2, r2, #3
 8005202:	4019      	ands	r1, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	3208      	adds	r2, #8
 8005208:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	68da      	ldr	r2, [r3, #12]
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	005b      	lsls	r3, r3, #1
 8005214:	2103      	movs	r1, #3
 8005216:	fa01 f303 	lsl.w	r3, r1, r3
 800521a:	43db      	mvns	r3, r3
 800521c:	401a      	ands	r2, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	685a      	ldr	r2, [r3, #4]
 8005226:	2101      	movs	r1, #1
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	fa01 f303 	lsl.w	r3, r1, r3
 800522e:	43db      	mvns	r3, r3
 8005230:	401a      	ands	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	689a      	ldr	r2, [r3, #8]
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	005b      	lsls	r3, r3, #1
 800523e:	2103      	movs	r1, #3
 8005240:	fa01 f303 	lsl.w	r3, r1, r3
 8005244:	43db      	mvns	r3, r3
 8005246:	401a      	ands	r2, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	609a      	str	r2, [r3, #8]
    }

    position++;
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	3301      	adds	r3, #1
 8005250:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 8005252:	683a      	ldr	r2, [r7, #0]
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	fa22 f303 	lsr.w	r3, r2, r3
 800525a:	2b00      	cmp	r3, #0
 800525c:	f47f af34 	bne.w	80050c8 <HAL_GPIO_DeInit+0x18>
  }
}
 8005260:	bf00      	nop
 8005262:	bf00      	nop
 8005264:	371c      	adds	r7, #28
 8005266:	46bd      	mov	sp, r7
 8005268:	bc80      	pop	{r7}
 800526a:	4770      	bx	lr
 800526c:	40010000 	.word	0x40010000
 8005270:	40020000 	.word	0x40020000
 8005274:	40020400 	.word	0x40020400
 8005278:	40020800 	.word	0x40020800
 800527c:	40020c00 	.word	0x40020c00
 8005280:	40021000 	.word	0x40021000
 8005284:	40021400 	.word	0x40021400
 8005288:	40021800 	.word	0x40021800
 800528c:	40010400 	.word	0x40010400

08005290 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	460b      	mov	r3, r1
 800529a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	691a      	ldr	r2, [r3, #16]
 80052a0:	887b      	ldrh	r3, [r7, #2]
 80052a2:	4013      	ands	r3, r2
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d002      	beq.n	80052ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80052a8:	2301      	movs	r3, #1
 80052aa:	73fb      	strb	r3, [r7, #15]
 80052ac:	e001      	b.n	80052b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80052ae:	2300      	movs	r3, #0
 80052b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80052b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3714      	adds	r7, #20
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bc80      	pop	{r7}
 80052bc:	4770      	bx	lr

080052be <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80052be:	b480      	push	{r7}
 80052c0:	b083      	sub	sp, #12
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
 80052c6:	460b      	mov	r3, r1
 80052c8:	807b      	strh	r3, [r7, #2]
 80052ca:	4613      	mov	r3, r2
 80052cc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80052ce:	787b      	ldrb	r3, [r7, #1]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d003      	beq.n	80052dc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80052d4:	887a      	ldrh	r2, [r7, #2]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80052da:	e003      	b.n	80052e4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80052dc:	887b      	ldrh	r3, [r7, #2]
 80052de:	041a      	lsls	r2, r3, #16
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	619a      	str	r2, [r3, #24]
}
 80052e4:	bf00      	nop
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bc80      	pop	{r7}
 80052ec:	4770      	bx	lr

080052ee <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80052ee:	b480      	push	{r7}
 80052f0:	b085      	sub	sp, #20
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
 80052f6:	460b      	mov	r3, r1
 80052f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005300:	887a      	ldrh	r2, [r7, #2]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	4013      	ands	r3, r2
 8005306:	041a      	lsls	r2, r3, #16
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	43d9      	mvns	r1, r3
 800530c:	887b      	ldrh	r3, [r7, #2]
 800530e:	400b      	ands	r3, r1
 8005310:	431a      	orrs	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	619a      	str	r2, [r3, #24]
}
 8005316:	bf00      	nop
 8005318:	3714      	adds	r7, #20
 800531a:	46bd      	mov	sp, r7
 800531c:	bc80      	pop	{r7}
 800531e:	4770      	bx	lr

08005320 <HAL_GPIO_LockPin>:
* @param  GPIO_Pin Specifies the port bit to be locked.
*         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
* @retval None
*/
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005320:	b480      	push	{r7}
 8005322:	b085      	sub	sp, #20
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	460b      	mov	r3, r1
 800532a:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
 800532c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005330:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_LOCK_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  SET_BIT(tmp, GPIO_Pin);
 8005332:	887a      	ldrh	r2, [r7, #2]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	4313      	orrs	r3, r2
 8005338:	60fb      	str	r3, [r7, #12]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	61da      	str	r2, [r3, #28]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
 8005340:	887a      	ldrh	r2, [r7, #2]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	61da      	str	r2, [r3, #28]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	61da      	str	r2, [r3, #28]
  /* Read LCKK register. This read is mandatory to complete key lock sequence */
  tmp = GPIOx->LCKR;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	69db      	ldr	r3, [r3, #28]
 8005350:	60fb      	str	r3, [r7, #12]

  /* Read again in order to confirm lock is active */
  if ((GPIOx->LCKR & GPIO_LCKR_LCKK) != RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	69db      	ldr	r3, [r3, #28]
 8005356:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d001      	beq.n	8005362 <HAL_GPIO_LockPin+0x42>
  {
    return HAL_OK;
 800535e:	2300      	movs	r3, #0
 8005360:	e000      	b.n	8005364 <HAL_GPIO_LockPin+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
  }
}
 8005364:	4618      	mov	r0, r3
 8005366:	3714      	adds	r7, #20
 8005368:	46bd      	mov	sp, r7
 800536a:	bc80      	pop	{r7}
 800536c:	4770      	bx	lr
	...

08005370 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	4603      	mov	r3, r0
 8005378:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800537a:	4b08      	ldr	r3, [pc, #32]	; (800539c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800537c:	695a      	ldr	r2, [r3, #20]
 800537e:	88fb      	ldrh	r3, [r7, #6]
 8005380:	4013      	ands	r3, r2
 8005382:	2b00      	cmp	r3, #0
 8005384:	d006      	beq.n	8005394 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005386:	4a05      	ldr	r2, [pc, #20]	; (800539c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005388:	88fb      	ldrh	r3, [r7, #6]
 800538a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800538c:	88fb      	ldrh	r3, [r7, #6]
 800538e:	4618      	mov	r0, r3
 8005390:	f7fb ff28 	bl	80011e4 <HAL_GPIO_EXTI_Callback>
  }
}
 8005394:	bf00      	nop
 8005396:	3708      	adds	r7, #8
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}
 800539c:	40010400 	.word	0x40010400
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	4603      	mov	r3, r0
 80053a8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80053aa:	bf00      	nop
 80053ac:	370c      	adds	r7, #12
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bc80      	pop	{r7}
 80053b2:	4770      	bx	lr

080053b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d101      	bne.n	80053c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e12b      	b.n	800561e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d106      	bne.n	80053e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f7fc fbc6 	bl	8001b6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2224      	movs	r2, #36	; 0x24
 80053e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f022 0201 	bic.w	r2, r2, #1
 80053f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005406:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005416:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005418:	f007 fa16 	bl	800c848 <HAL_RCC_GetPCLK1Freq>
 800541c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	4a81      	ldr	r2, [pc, #516]	; (8005628 <HAL_I2C_Init+0x274>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d807      	bhi.n	8005438 <HAL_I2C_Init+0x84>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	4a80      	ldr	r2, [pc, #512]	; (800562c <HAL_I2C_Init+0x278>)
 800542c:	4293      	cmp	r3, r2
 800542e:	bf94      	ite	ls
 8005430:	2301      	movls	r3, #1
 8005432:	2300      	movhi	r3, #0
 8005434:	b2db      	uxtb	r3, r3
 8005436:	e006      	b.n	8005446 <HAL_I2C_Init+0x92>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	4a7d      	ldr	r2, [pc, #500]	; (8005630 <HAL_I2C_Init+0x27c>)
 800543c:	4293      	cmp	r3, r2
 800543e:	bf94      	ite	ls
 8005440:	2301      	movls	r3, #1
 8005442:	2300      	movhi	r3, #0
 8005444:	b2db      	uxtb	r3, r3
 8005446:	2b00      	cmp	r3, #0
 8005448:	d001      	beq.n	800544e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e0e7      	b.n	800561e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	4a78      	ldr	r2, [pc, #480]	; (8005634 <HAL_I2C_Init+0x280>)
 8005452:	fba2 2303 	umull	r2, r3, r2, r3
 8005456:	0c9b      	lsrs	r3, r3, #18
 8005458:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68ba      	ldr	r2, [r7, #8]
 800546a:	430a      	orrs	r2, r1
 800546c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	6a1b      	ldr	r3, [r3, #32]
 8005474:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	4a6a      	ldr	r2, [pc, #424]	; (8005628 <HAL_I2C_Init+0x274>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d802      	bhi.n	8005488 <HAL_I2C_Init+0xd4>
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	3301      	adds	r3, #1
 8005486:	e009      	b.n	800549c <HAL_I2C_Init+0xe8>
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800548e:	fb02 f303 	mul.w	r3, r2, r3
 8005492:	4a69      	ldr	r2, [pc, #420]	; (8005638 <HAL_I2C_Init+0x284>)
 8005494:	fba2 2303 	umull	r2, r3, r2, r3
 8005498:	099b      	lsrs	r3, r3, #6
 800549a:	3301      	adds	r3, #1
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	6812      	ldr	r2, [r2, #0]
 80054a0:	430b      	orrs	r3, r1
 80054a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	69db      	ldr	r3, [r3, #28]
 80054aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80054ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	495c      	ldr	r1, [pc, #368]	; (8005628 <HAL_I2C_Init+0x274>)
 80054b8:	428b      	cmp	r3, r1
 80054ba:	d819      	bhi.n	80054f0 <HAL_I2C_Init+0x13c>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	1e59      	subs	r1, r3, #1
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	005b      	lsls	r3, r3, #1
 80054c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80054ca:	1c59      	adds	r1, r3, #1
 80054cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80054d0:	400b      	ands	r3, r1
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d00a      	beq.n	80054ec <HAL_I2C_Init+0x138>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	1e59      	subs	r1, r3, #1
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	005b      	lsls	r3, r3, #1
 80054e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80054e4:	3301      	adds	r3, #1
 80054e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054ea:	e051      	b.n	8005590 <HAL_I2C_Init+0x1dc>
 80054ec:	2304      	movs	r3, #4
 80054ee:	e04f      	b.n	8005590 <HAL_I2C_Init+0x1dc>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d111      	bne.n	800551c <HAL_I2C_Init+0x168>
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	1e58      	subs	r0, r3, #1
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6859      	ldr	r1, [r3, #4]
 8005500:	460b      	mov	r3, r1
 8005502:	005b      	lsls	r3, r3, #1
 8005504:	440b      	add	r3, r1
 8005506:	fbb0 f3f3 	udiv	r3, r0, r3
 800550a:	3301      	adds	r3, #1
 800550c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005510:	2b00      	cmp	r3, #0
 8005512:	bf0c      	ite	eq
 8005514:	2301      	moveq	r3, #1
 8005516:	2300      	movne	r3, #0
 8005518:	b2db      	uxtb	r3, r3
 800551a:	e012      	b.n	8005542 <HAL_I2C_Init+0x18e>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	1e58      	subs	r0, r3, #1
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6859      	ldr	r1, [r3, #4]
 8005524:	460b      	mov	r3, r1
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	440b      	add	r3, r1
 800552a:	0099      	lsls	r1, r3, #2
 800552c:	440b      	add	r3, r1
 800552e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005532:	3301      	adds	r3, #1
 8005534:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005538:	2b00      	cmp	r3, #0
 800553a:	bf0c      	ite	eq
 800553c:	2301      	moveq	r3, #1
 800553e:	2300      	movne	r3, #0
 8005540:	b2db      	uxtb	r3, r3
 8005542:	2b00      	cmp	r3, #0
 8005544:	d001      	beq.n	800554a <HAL_I2C_Init+0x196>
 8005546:	2301      	movs	r3, #1
 8005548:	e022      	b.n	8005590 <HAL_I2C_Init+0x1dc>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d10e      	bne.n	8005570 <HAL_I2C_Init+0x1bc>
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	1e58      	subs	r0, r3, #1
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6859      	ldr	r1, [r3, #4]
 800555a:	460b      	mov	r3, r1
 800555c:	005b      	lsls	r3, r3, #1
 800555e:	440b      	add	r3, r1
 8005560:	fbb0 f3f3 	udiv	r3, r0, r3
 8005564:	3301      	adds	r3, #1
 8005566:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800556a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800556e:	e00f      	b.n	8005590 <HAL_I2C_Init+0x1dc>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	1e58      	subs	r0, r3, #1
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6859      	ldr	r1, [r3, #4]
 8005578:	460b      	mov	r3, r1
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	440b      	add	r3, r1
 800557e:	0099      	lsls	r1, r3, #2
 8005580:	440b      	add	r3, r1
 8005582:	fbb0 f3f3 	udiv	r3, r0, r3
 8005586:	3301      	adds	r3, #1
 8005588:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800558c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005590:	6879      	ldr	r1, [r7, #4]
 8005592:	6809      	ldr	r1, [r1, #0]
 8005594:	4313      	orrs	r3, r2
 8005596:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	69da      	ldr	r2, [r3, #28]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a1b      	ldr	r3, [r3, #32]
 80055aa:	431a      	orrs	r2, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	430a      	orrs	r2, r1
 80055b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80055be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	6911      	ldr	r1, [r2, #16]
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	68d2      	ldr	r2, [r2, #12]
 80055ca:	4311      	orrs	r1, r2
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	6812      	ldr	r2, [r2, #0]
 80055d0:	430b      	orrs	r3, r1
 80055d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	695a      	ldr	r2, [r3, #20]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	431a      	orrs	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	430a      	orrs	r2, r1
 80055ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f042 0201 	orr.w	r2, r2, #1
 80055fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2220      	movs	r2, #32
 800560a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3710      	adds	r7, #16
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	000186a0 	.word	0x000186a0
 800562c:	001e847f 	.word	0x001e847f
 8005630:	003d08ff 	.word	0x003d08ff
 8005634:	431bde83 	.word	0x431bde83
 8005638:	10624dd3 	.word	0x10624dd3

0800563c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d101      	bne.n	800564e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e021      	b.n	8005692 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2224      	movs	r2, #36	; 0x24
 8005652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f022 0201 	bic.w	r2, r2, #1
 8005664:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f7fc fac4 	bl	8001bf4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3708      	adds	r7, #8
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800569a:	b480      	push	{r7}
 800569c:	b083      	sub	sp, #12
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80056a2:	bf00      	nop
 80056a4:	370c      	adds	r7, #12
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bc80      	pop	{r7}
 80056aa:	4770      	bx	lr
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80056b4:	bf00      	nop
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bc80      	pop	{r7}
 80056bc:	4770      	bx	lr

080056be <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80056be:	b480      	push	{r7}
 80056c0:	b083      	sub	sp, #12
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	695b      	ldr	r3, [r3, #20]
 80056cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056d0:	2b80      	cmp	r3, #128	; 0x80
 80056d2:	d103      	bne.n	80056dc <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2200      	movs	r2, #0
 80056da:	611a      	str	r2, [r3, #16]
  }
}
 80056dc:	bf00      	nop
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bc80      	pop	{r7}
 80056e4:	4770      	bx	lr
	...

080056e8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b088      	sub	sp, #32
 80056ec:	af02      	add	r7, sp, #8
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	607a      	str	r2, [r7, #4]
 80056f2:	461a      	mov	r2, r3
 80056f4:	460b      	mov	r3, r1
 80056f6:	817b      	strh	r3, [r7, #10]
 80056f8:	4613      	mov	r3, r2
 80056fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80056fc:	f7fc ffaa 	bl	8002654 <HAL_GetTick>
 8005700:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b20      	cmp	r3, #32
 800570c:	f040 80e0 	bne.w	80058d0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	9300      	str	r3, [sp, #0]
 8005714:	2319      	movs	r3, #25
 8005716:	2201      	movs	r2, #1
 8005718:	4970      	ldr	r1, [pc, #448]	; (80058dc <HAL_I2C_Master_Transmit+0x1f4>)
 800571a:	68f8      	ldr	r0, [r7, #12]
 800571c:	f005 fd28 	bl	800b170 <I2C_WaitOnFlagUntilTimeout>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d001      	beq.n	800572a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005726:	2302      	movs	r3, #2
 8005728:	e0d3      	b.n	80058d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005730:	2b01      	cmp	r3, #1
 8005732:	d101      	bne.n	8005738 <HAL_I2C_Master_Transmit+0x50>
 8005734:	2302      	movs	r3, #2
 8005736:	e0cc      	b.n	80058d2 <HAL_I2C_Master_Transmit+0x1ea>
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 0301 	and.w	r3, r3, #1
 800574a:	2b01      	cmp	r3, #1
 800574c:	d007      	beq.n	800575e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f042 0201 	orr.w	r2, r2, #1
 800575c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800576c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2221      	movs	r2, #33	; 0x21
 8005772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2210      	movs	r2, #16
 800577a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	893a      	ldrh	r2, [r7, #8]
 800578e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005794:	b29a      	uxth	r2, r3
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	4a50      	ldr	r2, [pc, #320]	; (80058e0 <HAL_I2C_Master_Transmit+0x1f8>)
 800579e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80057a0:	8979      	ldrh	r1, [r7, #10]
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	6a3a      	ldr	r2, [r7, #32]
 80057a6:	68f8      	ldr	r0, [r7, #12]
 80057a8:	f005 f860 	bl	800a86c <I2C_MasterRequestWrite>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d001      	beq.n	80057b6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e08d      	b.n	80058d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057b6:	2300      	movs	r3, #0
 80057b8:	613b      	str	r3, [r7, #16]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	695b      	ldr	r3, [r3, #20]
 80057c0:	613b      	str	r3, [r7, #16]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	699b      	ldr	r3, [r3, #24]
 80057c8:	613b      	str	r3, [r7, #16]
 80057ca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80057cc:	e066      	b.n	800589c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057ce:	697a      	ldr	r2, [r7, #20]
 80057d0:	6a39      	ldr	r1, [r7, #32]
 80057d2:	68f8      	ldr	r0, [r7, #12]
 80057d4:	f005 fde6 	bl	800b3a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00d      	beq.n	80057fa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e2:	2b04      	cmp	r3, #4
 80057e4:	d107      	bne.n	80057f6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e06b      	b.n	80058d2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fe:	781a      	ldrb	r2, [r3, #0]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580a:	1c5a      	adds	r2, r3, #1
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005814:	b29b      	uxth	r3, r3
 8005816:	3b01      	subs	r3, #1
 8005818:	b29a      	uxth	r2, r3
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005822:	3b01      	subs	r3, #1
 8005824:	b29a      	uxth	r2, r3
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	695b      	ldr	r3, [r3, #20]
 8005830:	f003 0304 	and.w	r3, r3, #4
 8005834:	2b04      	cmp	r3, #4
 8005836:	d11b      	bne.n	8005870 <HAL_I2C_Master_Transmit+0x188>
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800583c:	2b00      	cmp	r3, #0
 800583e:	d017      	beq.n	8005870 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005844:	781a      	ldrb	r2, [r3, #0]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005850:	1c5a      	adds	r2, r3, #1
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800585a:	b29b      	uxth	r3, r3
 800585c:	3b01      	subs	r3, #1
 800585e:	b29a      	uxth	r2, r3
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005868:	3b01      	subs	r3, #1
 800586a:	b29a      	uxth	r2, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005870:	697a      	ldr	r2, [r7, #20]
 8005872:	6a39      	ldr	r1, [r7, #32]
 8005874:	68f8      	ldr	r0, [r7, #12]
 8005876:	f005 fddd 	bl	800b434 <I2C_WaitOnBTFFlagUntilTimeout>
 800587a:	4603      	mov	r3, r0
 800587c:	2b00      	cmp	r3, #0
 800587e:	d00d      	beq.n	800589c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005884:	2b04      	cmp	r3, #4
 8005886:	d107      	bne.n	8005898 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005896:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e01a      	b.n	80058d2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d194      	bne.n	80057ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2220      	movs	r2, #32
 80058b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80058cc:	2300      	movs	r3, #0
 80058ce:	e000      	b.n	80058d2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80058d0:	2302      	movs	r3, #2
  }
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3718      	adds	r7, #24
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	00100002 	.word	0x00100002
 80058e0:	ffff0000 	.word	0xffff0000

080058e4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b08c      	sub	sp, #48	; 0x30
 80058e8:	af02      	add	r7, sp, #8
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	607a      	str	r2, [r7, #4]
 80058ee:	461a      	mov	r2, r3
 80058f0:	460b      	mov	r3, r1
 80058f2:	817b      	strh	r3, [r7, #10]
 80058f4:	4613      	mov	r3, r2
 80058f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80058f8:	f7fc feac 	bl	8002654 <HAL_GetTick>
 80058fc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005904:	b2db      	uxtb	r3, r3
 8005906:	2b20      	cmp	r3, #32
 8005908:	f040 8217 	bne.w	8005d3a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800590c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590e:	9300      	str	r3, [sp, #0]
 8005910:	2319      	movs	r3, #25
 8005912:	2201      	movs	r2, #1
 8005914:	497c      	ldr	r1, [pc, #496]	; (8005b08 <HAL_I2C_Master_Receive+0x224>)
 8005916:	68f8      	ldr	r0, [r7, #12]
 8005918:	f005 fc2a 	bl	800b170 <I2C_WaitOnFlagUntilTimeout>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d001      	beq.n	8005926 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005922:	2302      	movs	r3, #2
 8005924:	e20a      	b.n	8005d3c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800592c:	2b01      	cmp	r3, #1
 800592e:	d101      	bne.n	8005934 <HAL_I2C_Master_Receive+0x50>
 8005930:	2302      	movs	r3, #2
 8005932:	e203      	b.n	8005d3c <HAL_I2C_Master_Receive+0x458>
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 0301 	and.w	r3, r3, #1
 8005946:	2b01      	cmp	r3, #1
 8005948:	d007      	beq.n	800595a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f042 0201 	orr.w	r2, r2, #1
 8005958:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005968:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2222      	movs	r2, #34	; 0x22
 800596e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2210      	movs	r2, #16
 8005976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2200      	movs	r2, #0
 800597e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	893a      	ldrh	r2, [r7, #8]
 800598a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005990:	b29a      	uxth	r2, r3
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	4a5c      	ldr	r2, [pc, #368]	; (8005b0c <HAL_I2C_Master_Receive+0x228>)
 800599a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800599c:	8979      	ldrh	r1, [r7, #10]
 800599e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059a2:	68f8      	ldr	r0, [r7, #12]
 80059a4:	f004 ffe4 	bl	800a970 <I2C_MasterRequestRead>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d001      	beq.n	80059b2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e1c4      	b.n	8005d3c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d113      	bne.n	80059e2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059ba:	2300      	movs	r3, #0
 80059bc:	623b      	str	r3, [r7, #32]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	695b      	ldr	r3, [r3, #20]
 80059c4:	623b      	str	r3, [r7, #32]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	699b      	ldr	r3, [r3, #24]
 80059cc:	623b      	str	r3, [r7, #32]
 80059ce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059de:	601a      	str	r2, [r3, #0]
 80059e0:	e198      	b.n	8005d14 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d11b      	bne.n	8005a22 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059fa:	2300      	movs	r3, #0
 80059fc:	61fb      	str	r3, [r7, #28]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	695b      	ldr	r3, [r3, #20]
 8005a04:	61fb      	str	r3, [r7, #28]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	699b      	ldr	r3, [r3, #24]
 8005a0c:	61fb      	str	r3, [r7, #28]
 8005a0e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a1e:	601a      	str	r2, [r3, #0]
 8005a20:	e178      	b.n	8005d14 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d11b      	bne.n	8005a62 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a38:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	61bb      	str	r3, [r7, #24]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	695b      	ldr	r3, [r3, #20]
 8005a54:	61bb      	str	r3, [r7, #24]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	699b      	ldr	r3, [r3, #24]
 8005a5c:	61bb      	str	r3, [r7, #24]
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	e158      	b.n	8005d14 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a72:	2300      	movs	r3, #0
 8005a74:	617b      	str	r3, [r7, #20]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	695b      	ldr	r3, [r3, #20]
 8005a7c:	617b      	str	r3, [r7, #20]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	617b      	str	r3, [r7, #20]
 8005a86:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005a88:	e144      	b.n	8005d14 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a8e:	2b03      	cmp	r3, #3
 8005a90:	f200 80f1 	bhi.w	8005c76 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d123      	bne.n	8005ae4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005aa0:	68f8      	ldr	r0, [r7, #12]
 8005aa2:	f005 fd85 	bl	800b5b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d001      	beq.n	8005ab0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e145      	b.n	8005d3c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	691a      	ldr	r2, [r3, #16]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aba:	b2d2      	uxtb	r2, r2
 8005abc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac2:	1c5a      	adds	r2, r3, #1
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005acc:	3b01      	subs	r3, #1
 8005ace:	b29a      	uxth	r2, r3
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	3b01      	subs	r3, #1
 8005adc:	b29a      	uxth	r2, r3
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005ae2:	e117      	b.n	8005d14 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d14e      	bne.n	8005b8a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aee:	9300      	str	r3, [sp, #0]
 8005af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af2:	2200      	movs	r2, #0
 8005af4:	4906      	ldr	r1, [pc, #24]	; (8005b10 <HAL_I2C_Master_Receive+0x22c>)
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	f005 fb3a 	bl	800b170 <I2C_WaitOnFlagUntilTimeout>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d008      	beq.n	8005b14 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e11a      	b.n	8005d3c <HAL_I2C_Master_Receive+0x458>
 8005b06:	bf00      	nop
 8005b08:	00100002 	.word	0x00100002
 8005b0c:	ffff0000 	.word	0xffff0000
 8005b10:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	691a      	ldr	r2, [r3, #16]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2e:	b2d2      	uxtb	r2, r2
 8005b30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b36:	1c5a      	adds	r2, r3, #1
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b40:	3b01      	subs	r3, #1
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	3b01      	subs	r3, #1
 8005b50:	b29a      	uxth	r2, r3
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	691a      	ldr	r2, [r3, #16]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b60:	b2d2      	uxtb	r2, r2
 8005b62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b68:	1c5a      	adds	r2, r3, #1
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b72:	3b01      	subs	r3, #1
 8005b74:	b29a      	uxth	r2, r3
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	3b01      	subs	r3, #1
 8005b82:	b29a      	uxth	r2, r3
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005b88:	e0c4      	b.n	8005d14 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8c:	9300      	str	r3, [sp, #0]
 8005b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b90:	2200      	movs	r2, #0
 8005b92:	496c      	ldr	r1, [pc, #432]	; (8005d44 <HAL_I2C_Master_Receive+0x460>)
 8005b94:	68f8      	ldr	r0, [r7, #12]
 8005b96:	f005 faeb 	bl	800b170 <I2C_WaitOnFlagUntilTimeout>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d001      	beq.n	8005ba4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e0cb      	b.n	8005d3c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	691a      	ldr	r2, [r3, #16]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bbe:	b2d2      	uxtb	r2, r2
 8005bc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc6:	1c5a      	adds	r2, r3, #1
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bd0:	3b01      	subs	r3, #1
 8005bd2:	b29a      	uxth	r2, r3
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	3b01      	subs	r3, #1
 8005be0:	b29a      	uxth	r2, r3
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be8:	9300      	str	r3, [sp, #0]
 8005bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bec:	2200      	movs	r2, #0
 8005bee:	4955      	ldr	r1, [pc, #340]	; (8005d44 <HAL_I2C_Master_Receive+0x460>)
 8005bf0:	68f8      	ldr	r0, [r7, #12]
 8005bf2:	f005 fabd 	bl	800b170 <I2C_WaitOnFlagUntilTimeout>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d001      	beq.n	8005c00 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e09d      	b.n	8005d3c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	691a      	ldr	r2, [r3, #16]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1a:	b2d2      	uxtb	r2, r2
 8005c1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c22:	1c5a      	adds	r2, r3, #1
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c2c:	3b01      	subs	r3, #1
 8005c2e:	b29a      	uxth	r2, r3
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	3b01      	subs	r3, #1
 8005c3c:	b29a      	uxth	r2, r3
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	691a      	ldr	r2, [r3, #16]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4c:	b2d2      	uxtb	r2, r2
 8005c4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c54:	1c5a      	adds	r2, r3, #1
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	b29a      	uxth	r2, r3
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	3b01      	subs	r3, #1
 8005c6e:	b29a      	uxth	r2, r3
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005c74:	e04e      	b.n	8005d14 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c7a:	68f8      	ldr	r0, [r7, #12]
 8005c7c:	f005 fc98 	bl	800b5b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d001      	beq.n	8005c8a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e058      	b.n	8005d3c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	691a      	ldr	r2, [r3, #16]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c94:	b2d2      	uxtb	r2, r2
 8005c96:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9c:	1c5a      	adds	r2, r3, #1
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	b29a      	uxth	r2, r3
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	3b01      	subs	r3, #1
 8005cb6:	b29a      	uxth	r2, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	f003 0304 	and.w	r3, r3, #4
 8005cc6:	2b04      	cmp	r3, #4
 8005cc8:	d124      	bne.n	8005d14 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cce:	2b03      	cmp	r3, #3
 8005cd0:	d107      	bne.n	8005ce2 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ce0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	691a      	ldr	r2, [r3, #16]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cec:	b2d2      	uxtb	r2, r2
 8005cee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf4:	1c5a      	adds	r2, r3, #1
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cfe:	3b01      	subs	r3, #1
 8005d00:	b29a      	uxth	r2, r3
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	3b01      	subs	r3, #1
 8005d0e:	b29a      	uxth	r2, r3
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	f47f aeb6 	bne.w	8005a8a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2220      	movs	r2, #32
 8005d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005d36:	2300      	movs	r3, #0
 8005d38:	e000      	b.n	8005d3c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005d3a:	2302      	movs	r3, #2
  }
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3728      	adds	r7, #40	; 0x28
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	00010004 	.word	0x00010004

08005d48 <HAL_I2C_Slave_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b08a      	sub	sp, #40	; 0x28
 8005d4c:	af02      	add	r7, sp, #8
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	603b      	str	r3, [r7, #0]
 8005d54:	4613      	mov	r3, r2
 8005d56:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d58:	f7fc fc7c 	bl	8002654 <HAL_GetTick>
 8005d5c:	61f8      	str	r0, [r7, #28]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	2b20      	cmp	r3, #32
 8005d68:	f040 80fb 	bne.w	8005f62 <HAL_I2C_Slave_Transmit+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d002      	beq.n	8005d78 <HAL_I2C_Slave_Transmit+0x30>
 8005d72:	88fb      	ldrh	r3, [r7, #6]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d101      	bne.n	8005d7c <HAL_I2C_Slave_Transmit+0x34>
    {
      return  HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e0f3      	b.n	8005f64 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d101      	bne.n	8005d8a <HAL_I2C_Slave_Transmit+0x42>
 8005d86:	2302      	movs	r3, #2
 8005d88:	e0ec      	b.n	8005f64 <HAL_I2C_Slave_Transmit+0x21c>
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f003 0301 	and.w	r3, r3, #1
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d007      	beq.n	8005db0 <HAL_I2C_Slave_Transmit+0x68>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f042 0201 	orr.w	r2, r2, #1
 8005dae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005dbe:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2221      	movs	r2, #33	; 0x21
 8005dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2220      	movs	r2, #32
 8005dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	68ba      	ldr	r2, [r7, #8]
 8005dda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	88fa      	ldrh	r2, [r7, #6]
 8005de0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005de6:	b29a      	uxth	r2, r3
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	4a5f      	ldr	r2, [pc, #380]	; (8005f6c <HAL_I2C_Slave_Transmit+0x224>)
 8005df0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e00:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	9300      	str	r3, [sp, #0]
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	4959      	ldr	r1, [pc, #356]	; (8005f70 <HAL_I2C_Slave_Transmit+0x228>)
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	f005 f9af 	bl	800b170 <I2C_WaitOnFlagUntilTimeout>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d001      	beq.n	8005e1c <HAL_I2C_Slave_Transmit+0xd4>
    {
      return HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e0a3      	b.n	8005f64 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	61bb      	str	r3, [r7, #24]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	695b      	ldr	r3, [r3, #20]
 8005e26:	61bb      	str	r3, [r7, #24]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	699b      	ldr	r3, [r3, #24]
 8005e2e:	61bb      	str	r3, [r7, #24]
 8005e30:	69bb      	ldr	r3, [r7, #24]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005e3a:	d165      	bne.n	8005f08 <HAL_I2C_Slave_Transmit+0x1c0>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	9300      	str	r3, [sp, #0]
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	2200      	movs	r2, #0
 8005e44:	494a      	ldr	r1, [pc, #296]	; (8005f70 <HAL_I2C_Slave_Transmit+0x228>)
 8005e46:	68f8      	ldr	r0, [r7, #12]
 8005e48:	f005 f992 	bl	800b170 <I2C_WaitOnFlagUntilTimeout>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d001      	beq.n	8005e56 <HAL_I2C_Slave_Transmit+0x10e>
      {
        return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e086      	b.n	8005f64 <HAL_I2C_Slave_Transmit+0x21c>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e56:	2300      	movs	r3, #0
 8005e58:	617b      	str	r3, [r7, #20]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	695b      	ldr	r3, [r3, #20]
 8005e60:	617b      	str	r3, [r7, #20]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	699b      	ldr	r3, [r3, #24]
 8005e68:	617b      	str	r3, [r7, #20]
 8005e6a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005e6c:	e04c      	b.n	8005f08 <HAL_I2C_Slave_Transmit+0x1c0>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e6e:	69fa      	ldr	r2, [r7, #28]
 8005e70:	6839      	ldr	r1, [r7, #0]
 8005e72:	68f8      	ldr	r0, [r7, #12]
 8005e74:	f005 fa96 	bl	800b3a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d009      	beq.n	8005e92 <HAL_I2C_Slave_Transmit+0x14a>
      {
        /* Disable Address Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e8c:	601a      	str	r2, [r3, #0]

        return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e068      	b.n	8005f64 <HAL_I2C_Slave_Transmit+0x21c>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e96:	781a      	ldrb	r2, [r3, #0]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea2:	1c5a      	adds	r2, r3, #1
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	3b01      	subs	r3, #1
 8005eb0:	b29a      	uxth	r2, r3
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	b29a      	uxth	r2, r3
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	695b      	ldr	r3, [r3, #20]
 8005ec8:	f003 0304 	and.w	r3, r3, #4
 8005ecc:	2b04      	cmp	r3, #4
 8005ece:	d11b      	bne.n	8005f08 <HAL_I2C_Slave_Transmit+0x1c0>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d017      	beq.n	8005f08 <HAL_I2C_Slave_Transmit+0x1c0>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005edc:	781a      	ldrb	r2, [r3, #0]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee8:	1c5a      	adds	r2, r3, #1
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	3b01      	subs	r3, #1
 8005ef6:	b29a      	uxth	r2, r3
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f00:	3b01      	subs	r3, #1
 8005f02:	b29a      	uxth	r2, r3
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	851a      	strh	r2, [r3, #40]	; 0x28
    while (hi2c->XferSize > 0U)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d1ae      	bne.n	8005e6e <HAL_I2C_Slave_Transmit+0x126>
      }
    }

    /* Wait until AF flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_AF, RESET, Timeout, tickstart) != HAL_OK)
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	9300      	str	r3, [sp, #0]
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f44f 3182 	mov.w	r1, #66560	; 0x10400
 8005f1c:	68f8      	ldr	r0, [r7, #12]
 8005f1e:	f005 f927 	bl	800b170 <I2C_WaitOnFlagUntilTimeout>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d001      	beq.n	8005f2c <HAL_I2C_Slave_Transmit+0x1e4>
    {
      return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e01b      	b.n	8005f64 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f34:	615a      	str	r2, [r3, #20]

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f44:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2220      	movs	r2, #32
 8005f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	e000      	b.n	8005f64 <HAL_I2C_Slave_Transmit+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005f62:	2302      	movs	r3, #2
  }
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3720      	adds	r7, #32
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	ffff0000 	.word	0xffff0000
 8005f70:	00010002 	.word	0x00010002

08005f74 <HAL_I2C_Slave_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b08a      	sub	sp, #40	; 0x28
 8005f78:	af02      	add	r7, sp, #8
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	603b      	str	r3, [r7, #0]
 8005f80:	4613      	mov	r3, r2
 8005f82:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005f84:	f7fc fb66 	bl	8002654 <HAL_GetTick>
 8005f88:	61f8      	str	r0, [r7, #28]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	2b20      	cmp	r3, #32
 8005f94:	f040 80ee 	bne.w	8006174 <HAL_I2C_Slave_Receive+0x200>
  {
    if ((pData == NULL) || (Size == (uint16_t)0))
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d002      	beq.n	8005fa4 <HAL_I2C_Slave_Receive+0x30>
 8005f9e:	88fb      	ldrh	r3, [r7, #6]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d101      	bne.n	8005fa8 <HAL_I2C_Slave_Receive+0x34>
    {
      return HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e0e6      	b.n	8006176 <HAL_I2C_Slave_Receive+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d101      	bne.n	8005fb6 <HAL_I2C_Slave_Receive+0x42>
 8005fb2:	2302      	movs	r3, #2
 8005fb4:	e0df      	b.n	8006176 <HAL_I2C_Slave_Receive+0x202>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2201      	movs	r2, #1
 8005fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 0301 	and.w	r3, r3, #1
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d007      	beq.n	8005fdc <HAL_I2C_Slave_Receive+0x68>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f042 0201 	orr.w	r2, r2, #1
 8005fda:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fea:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2222      	movs	r2, #34	; 0x22
 8005ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2220      	movs	r2, #32
 8005ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2200      	movs	r2, #0
 8006000:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	68ba      	ldr	r2, [r7, #8]
 8006006:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	88fa      	ldrh	r2, [r7, #6]
 800600c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006012:	b29a      	uxth	r2, r3
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	4a59      	ldr	r2, [pc, #356]	; (8006180 <HAL_I2C_Slave_Receive+0x20c>)
 800601c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800602c:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	9300      	str	r3, [sp, #0]
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	2200      	movs	r2, #0
 8006036:	4953      	ldr	r1, [pc, #332]	; (8006184 <HAL_I2C_Slave_Receive+0x210>)
 8006038:	68f8      	ldr	r0, [r7, #12]
 800603a:	f005 f899 	bl	800b170 <I2C_WaitOnFlagUntilTimeout>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d001      	beq.n	8006048 <HAL_I2C_Slave_Receive+0xd4>
    {
      return HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	e096      	b.n	8006176 <HAL_I2C_Slave_Receive+0x202>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006048:	2300      	movs	r3, #0
 800604a:	61bb      	str	r3, [r7, #24]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	695b      	ldr	r3, [r3, #20]
 8006052:	61bb      	str	r3, [r7, #24]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	699b      	ldr	r3, [r3, #24]
 800605a:	61bb      	str	r3, [r7, #24]
 800605c:	69bb      	ldr	r3, [r7, #24]

    while (hi2c->XferSize > 0U)
 800605e:	e04e      	b.n	80060fe <HAL_I2C_Slave_Receive+0x18a>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006060:	69fa      	ldr	r2, [r7, #28]
 8006062:	6839      	ldr	r1, [r7, #0]
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	f005 faa3 	bl	800b5b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800606a:	4603      	mov	r3, r0
 800606c:	2b00      	cmp	r3, #0
 800606e:	d009      	beq.n	8006084 <HAL_I2C_Slave_Receive+0x110>
      {
        /* Disable Address Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800607e:	601a      	str	r2, [r3, #0]

        return HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	e078      	b.n	8006176 <HAL_I2C_Slave_Receive+0x202>
      }

      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	691a      	ldr	r2, [r3, #16]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608e:	b2d2      	uxtb	r2, r2
 8006090:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006096:	1c5a      	adds	r2, r3, #1
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060a0:	3b01      	subs	r3, #1
 80060a2:	b29a      	uxth	r2, r3
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	3b01      	subs	r3, #1
 80060b0:	b29a      	uxth	r2, r3
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	695b      	ldr	r3, [r3, #20]
 80060bc:	f003 0304 	and.w	r3, r3, #4
 80060c0:	2b04      	cmp	r3, #4
 80060c2:	d11c      	bne.n	80060fe <HAL_I2C_Slave_Receive+0x18a>
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d018      	beq.n	80060fe <HAL_I2C_Slave_Receive+0x18a>
      {
        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	691a      	ldr	r2, [r3, #16]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d6:	b2d2      	uxtb	r2, r2
 80060d8:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060de:	1c5a      	adds	r2, r3, #1
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060e8:	3b01      	subs	r3, #1
 80060ea:	b29a      	uxth	r2, r3
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	3b01      	subs	r3, #1
 80060f8:	b29a      	uxth	r2, r3
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1ac      	bne.n	8006060 <HAL_I2C_Slave_Receive+0xec>
      }
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006106:	69fa      	ldr	r2, [r7, #28]
 8006108:	6839      	ldr	r1, [r7, #0]
 800610a:	68f8      	ldr	r0, [r7, #12]
 800610c:	f005 f9da 	bl	800b4c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006110:	4603      	mov	r3, r0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d009      	beq.n	800612a <HAL_I2C_Slave_Receive+0x1b6>
    {
      /* Disable Address Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006124:	601a      	str	r2, [r3, #0]

      return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e025      	b.n	8006176 <HAL_I2C_Slave_Receive+0x202>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800612a:	2300      	movs	r3, #0
 800612c:	617b      	str	r3, [r7, #20]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	695b      	ldr	r3, [r3, #20]
 8006134:	617b      	str	r3, [r7, #20]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f042 0201 	orr.w	r2, r2, #1
 8006144:	601a      	str	r2, [r3, #0]
 8006146:	697b      	ldr	r3, [r7, #20]

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006156:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2220      	movs	r2, #32
 800615c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2200      	movs	r2, #0
 8006164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006170:	2300      	movs	r3, #0
 8006172:	e000      	b.n	8006176 <HAL_I2C_Slave_Receive+0x202>
  }
  else
  {
    return HAL_BUSY;
 8006174:	2302      	movs	r3, #2
  }
}
 8006176:	4618      	mov	r0, r3
 8006178:	3720      	adds	r7, #32
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	ffff0000 	.word	0xffff0000
 8006184:	00010002 	.word	0x00010002

08006188 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8006188:	b480      	push	{r7}
 800618a:	b087      	sub	sp, #28
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	607a      	str	r2, [r7, #4]
 8006192:	461a      	mov	r2, r3
 8006194:	460b      	mov	r3, r1
 8006196:	817b      	strh	r3, [r7, #10]
 8006198:	4613      	mov	r3, r2
 800619a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800619c:	2300      	movs	r3, #0
 800619e:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	2b20      	cmp	r3, #32
 80061aa:	f040 8081 	bne.w	80062b0 <HAL_I2C_Master_Transmit_IT+0x128>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80061ae:	4b43      	ldr	r3, [pc, #268]	; (80062bc <HAL_I2C_Master_Transmit_IT+0x134>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	08db      	lsrs	r3, r3, #3
 80061b4:	4a42      	ldr	r2, [pc, #264]	; (80062c0 <HAL_I2C_Master_Transmit_IT+0x138>)
 80061b6:	fba2 2303 	umull	r2, r3, r2, r3
 80061ba:	0a1a      	lsrs	r2, r3, #8
 80061bc:	4613      	mov	r3, r2
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	4413      	add	r3, r2
 80061c2:	009a      	lsls	r2, r3, #2
 80061c4:	4413      	add	r3, r2
 80061c6:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	3b01      	subs	r3, #1
 80061cc:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d112      	bne.n	80061fa <HAL_I2C_Master_Transmit_IT+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2200      	movs	r2, #0
 80061d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2220      	movs	r2, #32
 80061de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ee:	f043 0220 	orr.w	r2, r3, #32
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	641a      	str	r2, [r3, #64]	; 0x40

        return HAL_BUSY;
 80061f6:	2302      	movs	r3, #2
 80061f8:	e05b      	b.n	80062b2 <HAL_I2C_Master_Transmit_IT+0x12a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	699b      	ldr	r3, [r3, #24]
 8006200:	f003 0302 	and.w	r3, r3, #2
 8006204:	2b02      	cmp	r3, #2
 8006206:	d0df      	beq.n	80061c8 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800620e:	2b01      	cmp	r3, #1
 8006210:	d101      	bne.n	8006216 <HAL_I2C_Master_Transmit_IT+0x8e>
 8006212:	2302      	movs	r3, #2
 8006214:	e04d      	b.n	80062b2 <HAL_I2C_Master_Transmit_IT+0x12a>
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2201      	movs	r2, #1
 800621a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 0301 	and.w	r3, r3, #1
 8006228:	2b01      	cmp	r3, #1
 800622a:	d007      	beq.n	800623c <HAL_I2C_Master_Transmit_IT+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f042 0201 	orr.w	r2, r2, #1
 800623a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800624a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2221      	movs	r2, #33	; 0x21
 8006250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2210      	movs	r2, #16
 8006258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2200      	movs	r2, #0
 8006260:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	893a      	ldrh	r2, [r7, #8]
 800626c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006272:	b29a      	uxth	r2, r3
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	4a12      	ldr	r2, [pc, #72]	; (80062c4 <HAL_I2C_Master_Transmit_IT+0x13c>)
 800627c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800627e:	897a      	ldrh	r2, [r7, #10]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2200      	movs	r2, #0
 8006288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	685a      	ldr	r2, [r3, #4]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800629a:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062aa:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80062ac:	2300      	movs	r3, #0
 80062ae:	e000      	b.n	80062b2 <HAL_I2C_Master_Transmit_IT+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80062b0:	2302      	movs	r3, #2
  }
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	371c      	adds	r7, #28
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bc80      	pop	{r7}
 80062ba:	4770      	bx	lr
 80062bc:	2000006c 	.word	0x2000006c
 80062c0:	14f8b589 	.word	0x14f8b589
 80062c4:	ffff0000 	.word	0xffff0000

080062c8 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b087      	sub	sp, #28
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	607a      	str	r2, [r7, #4]
 80062d2:	461a      	mov	r2, r3
 80062d4:	460b      	mov	r3, r1
 80062d6:	817b      	strh	r3, [r7, #10]
 80062d8:	4613      	mov	r3, r2
 80062da:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80062dc:	2300      	movs	r3, #0
 80062de:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	2b20      	cmp	r3, #32
 80062ea:	f040 8089 	bne.w	8006400 <HAL_I2C_Master_Receive_IT+0x138>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80062ee:	4b47      	ldr	r3, [pc, #284]	; (800640c <HAL_I2C_Master_Receive_IT+0x144>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	08db      	lsrs	r3, r3, #3
 80062f4:	4a46      	ldr	r2, [pc, #280]	; (8006410 <HAL_I2C_Master_Receive_IT+0x148>)
 80062f6:	fba2 2303 	umull	r2, r3, r2, r3
 80062fa:	0a1a      	lsrs	r2, r3, #8
 80062fc:	4613      	mov	r3, r2
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	4413      	add	r3, r2
 8006302:	009a      	lsls	r2, r3, #2
 8006304:	4413      	add	r3, r2
 8006306:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	3b01      	subs	r3, #1
 800630c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d112      	bne.n	800633a <HAL_I2C_Master_Receive_IT+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2200      	movs	r2, #0
 8006318:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2220      	movs	r2, #32
 800631e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2200      	movs	r2, #0
 8006326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800632e:	f043 0220 	orr.w	r2, r3, #32
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	641a      	str	r2, [r3, #64]	; 0x40

        return HAL_BUSY;
 8006336:	2302      	movs	r3, #2
 8006338:	e063      	b.n	8006402 <HAL_I2C_Master_Receive_IT+0x13a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	699b      	ldr	r3, [r3, #24]
 8006340:	f003 0302 	and.w	r3, r3, #2
 8006344:	2b02      	cmp	r3, #2
 8006346:	d0df      	beq.n	8006308 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800634e:	2b01      	cmp	r3, #1
 8006350:	d101      	bne.n	8006356 <HAL_I2C_Master_Receive_IT+0x8e>
 8006352:	2302      	movs	r3, #2
 8006354:	e055      	b.n	8006402 <HAL_I2C_Master_Receive_IT+0x13a>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2201      	movs	r2, #1
 800635a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 0301 	and.w	r3, r3, #1
 8006368:	2b01      	cmp	r3, #1
 800636a:	d007      	beq.n	800637c <HAL_I2C_Master_Receive_IT+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f042 0201 	orr.w	r2, r2, #1
 800637a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800638a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2222      	movs	r2, #34	; 0x22
 8006390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2210      	movs	r2, #16
 8006398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	893a      	ldrh	r2, [r7, #8]
 80063ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063b2:	b29a      	uxth	r2, r3
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	4a16      	ldr	r2, [pc, #88]	; (8006414 <HAL_I2C_Master_Receive_IT+0x14c>)
 80063bc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80063be:	897a      	ldrh	r2, [r7, #10]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	685a      	ldr	r2, [r3, #4]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80063da:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80063ea:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063fa:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80063fc:	2300      	movs	r3, #0
 80063fe:	e000      	b.n	8006402 <HAL_I2C_Master_Receive_IT+0x13a>
  }
  else
  {
    return HAL_BUSY;
 8006400:	2302      	movs	r3, #2
  }
}
 8006402:	4618      	mov	r0, r3
 8006404:	371c      	adds	r7, #28
 8006406:	46bd      	mov	sp, r7
 8006408:	bc80      	pop	{r7}
 800640a:	4770      	bx	lr
 800640c:	2000006c 	.word	0x2000006c
 8006410:	14f8b589 	.word	0x14f8b589
 8006414:	ffff0000 	.word	0xffff0000

08006418 <HAL_I2C_Slave_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8006418:	b480      	push	{r7}
 800641a:	b085      	sub	sp, #20
 800641c:	af00      	add	r7, sp, #0
 800641e:	60f8      	str	r0, [r7, #12]
 8006420:	60b9      	str	r1, [r7, #8]
 8006422:	4613      	mov	r3, r2
 8006424:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800642c:	b2db      	uxtb	r3, r3
 800642e:	2b20      	cmp	r3, #32
 8006430:	d158      	bne.n	80064e4 <HAL_I2C_Slave_Transmit_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d002      	beq.n	800643e <HAL_I2C_Slave_Transmit_IT+0x26>
 8006438:	88fb      	ldrh	r3, [r7, #6]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d101      	bne.n	8006442 <HAL_I2C_Slave_Transmit_IT+0x2a>
    {
      return  HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	e051      	b.n	80064e6 <HAL_I2C_Slave_Transmit_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006448:	2b01      	cmp	r3, #1
 800644a:	d101      	bne.n	8006450 <HAL_I2C_Slave_Transmit_IT+0x38>
 800644c:	2302      	movs	r3, #2
 800644e:	e04a      	b.n	80064e6 <HAL_I2C_Slave_Transmit_IT+0xce>
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f003 0301 	and.w	r3, r3, #1
 8006462:	2b01      	cmp	r3, #1
 8006464:	d007      	beq.n	8006476 <HAL_I2C_Slave_Transmit_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f042 0201 	orr.w	r2, r2, #1
 8006474:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006484:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2221      	movs	r2, #33	; 0x21
 800648a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2220      	movs	r2, #32
 8006492:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2200      	movs	r2, #0
 800649a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	68ba      	ldr	r2, [r7, #8]
 80064a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	88fa      	ldrh	r2, [r7, #6]
 80064a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	4a0e      	ldr	r2, [pc, #56]	; (80064f0 <HAL_I2C_Slave_Transmit_IT+0xd8>)
 80064b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80064c6:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	685a      	ldr	r2, [r3, #4]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80064de:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80064e0:	2300      	movs	r3, #0
 80064e2:	e000      	b.n	80064e6 <HAL_I2C_Slave_Transmit_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 80064e4:	2302      	movs	r3, #2
  }
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3714      	adds	r7, #20
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bc80      	pop	{r7}
 80064ee:	4770      	bx	lr
 80064f0:	ffff0000 	.word	0xffff0000

080064f4 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b085      	sub	sp, #20
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	60b9      	str	r1, [r7, #8]
 80064fe:	4613      	mov	r3, r2
 8006500:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006508:	b2db      	uxtb	r3, r3
 800650a:	2b20      	cmp	r3, #32
 800650c:	d158      	bne.n	80065c0 <HAL_I2C_Slave_Receive_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d002      	beq.n	800651a <HAL_I2C_Slave_Receive_IT+0x26>
 8006514:	88fb      	ldrh	r3, [r7, #6]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d101      	bne.n	800651e <HAL_I2C_Slave_Receive_IT+0x2a>
    {
      return  HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e051      	b.n	80065c2 <HAL_I2C_Slave_Receive_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006524:	2b01      	cmp	r3, #1
 8006526:	d101      	bne.n	800652c <HAL_I2C_Slave_Receive_IT+0x38>
 8006528:	2302      	movs	r3, #2
 800652a:	e04a      	b.n	80065c2 <HAL_I2C_Slave_Receive_IT+0xce>
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f003 0301 	and.w	r3, r3, #1
 800653e:	2b01      	cmp	r3, #1
 8006540:	d007      	beq.n	8006552 <HAL_I2C_Slave_Receive_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f042 0201 	orr.w	r2, r2, #1
 8006550:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006560:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2222      	movs	r2, #34	; 0x22
 8006566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2220      	movs	r2, #32
 800656e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	68ba      	ldr	r2, [r7, #8]
 800657c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	88fa      	ldrh	r2, [r7, #6]
 8006582:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006588:	b29a      	uxth	r2, r3
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	4a0e      	ldr	r2, [pc, #56]	; (80065cc <HAL_I2C_Slave_Receive_IT+0xd8>)
 8006592:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80065a2:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	685a      	ldr	r2, [r3, #4]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80065ba:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80065bc:	2300      	movs	r3, #0
 80065be:	e000      	b.n	80065c2 <HAL_I2C_Slave_Receive_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 80065c0:	2302      	movs	r3, #2
  }
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3714      	adds	r7, #20
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bc80      	pop	{r7}
 80065ca:	4770      	bx	lr
 80065cc:	ffff0000 	.word	0xffff0000

080065d0 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b086      	sub	sp, #24
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	607a      	str	r2, [r7, #4]
 80065da:	461a      	mov	r2, r3
 80065dc:	460b      	mov	r3, r1
 80065de:	817b      	strh	r3, [r7, #10]
 80065e0:	4613      	mov	r3, r2
 80065e2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80065e4:	2300      	movs	r3, #0
 80065e6:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	2b20      	cmp	r3, #32
 80065f2:	f040 8101 	bne.w	80067f8 <HAL_I2C_Master_Transmit_DMA+0x228>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80065f6:	4b83      	ldr	r3, [pc, #524]	; (8006804 <HAL_I2C_Master_Transmit_DMA+0x234>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	08db      	lsrs	r3, r3, #3
 80065fc:	4a82      	ldr	r2, [pc, #520]	; (8006808 <HAL_I2C_Master_Transmit_DMA+0x238>)
 80065fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006602:	0a1a      	lsrs	r2, r3, #8
 8006604:	4613      	mov	r3, r2
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	4413      	add	r3, r2
 800660a:	009a      	lsls	r2, r3, #2
 800660c:	4413      	add	r3, r2
 800660e:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	3b01      	subs	r3, #1
 8006614:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d112      	bne.n	8006642 <HAL_I2C_Master_Transmit_DMA+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2200      	movs	r2, #0
 8006620:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2220      	movs	r2, #32
 8006626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2200      	movs	r2, #0
 800662e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006636:	f043 0220 	orr.w	r2, r3, #32
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	641a      	str	r2, [r3, #64]	; 0x40

        return HAL_BUSY;
 800663e:	2302      	movs	r3, #2
 8006640:	e0db      	b.n	80067fa <HAL_I2C_Master_Transmit_DMA+0x22a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	699b      	ldr	r3, [r3, #24]
 8006648:	f003 0302 	and.w	r3, r3, #2
 800664c:	2b02      	cmp	r3, #2
 800664e:	d0df      	beq.n	8006610 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006656:	2b01      	cmp	r3, #1
 8006658:	d101      	bne.n	800665e <HAL_I2C_Master_Transmit_DMA+0x8e>
 800665a:	2302      	movs	r3, #2
 800665c:	e0cd      	b.n	80067fa <HAL_I2C_Master_Transmit_DMA+0x22a>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2201      	movs	r2, #1
 8006662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 0301 	and.w	r3, r3, #1
 8006670:	2b01      	cmp	r3, #1
 8006672:	d007      	beq.n	8006684 <HAL_I2C_Master_Transmit_DMA+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f042 0201 	orr.w	r2, r2, #1
 8006682:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006692:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2221      	movs	r2, #33	; 0x21
 8006698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2210      	movs	r2, #16
 80066a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2200      	movs	r2, #0
 80066a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	893a      	ldrh	r2, [r7, #8]
 80066b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066ba:	b29a      	uxth	r2, r3
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	4a52      	ldr	r2, [pc, #328]	; (800680c <HAL_I2C_Master_Transmit_DMA+0x23c>)
 80066c4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80066c6:	897a      	ldrh	r2, [r7, #10]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d073      	beq.n	80067bc <HAL_I2C_Master_Transmit_DMA+0x1ec>
    {
      if (hi2c->hdmatx != NULL)
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d022      	beq.n	8006722 <HAL_I2C_Master_Transmit_DMA+0x152>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066e0:	4a4b      	ldr	r2, [pc, #300]	; (8006810 <HAL_I2C_Master_Transmit_DMA+0x240>)
 80066e2:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066e8:	4a4a      	ldr	r2, [pc, #296]	; (8006814 <HAL_I2C_Master_Transmit_DMA+0x244>)
 80066ea:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066f0:	2200      	movs	r2, #0
 80066f2:	62da      	str	r2, [r3, #44]	; 0x2c
        hi2c->hdmatx->XferAbortCallback = NULL;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066f8:	2200      	movs	r2, #0
 80066fa:	635a      	str	r2, [r3, #52]	; 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006704:	4619      	mov	r1, r3
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	3310      	adds	r3, #16
 800670c:	461a      	mov	r2, r3
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006712:	f7fc fcf6 	bl	8003102 <HAL_DMA_Start_IT>
 8006716:	4603      	mov	r3, r0
 8006718:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800671a:	7dfb      	ldrb	r3, [r7, #23]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d139      	bne.n	8006794 <HAL_I2C_Master_Transmit_DMA+0x1c4>
 8006720:	e013      	b.n	800674a <HAL_I2C_Master_Transmit_DMA+0x17a>
        hi2c->State     = HAL_I2C_STATE_READY;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2220      	movs	r2, #32
 8006726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2200      	movs	r2, #0
 800672e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006736:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2200      	movs	r2, #0
 8006742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e057      	b.n	80067fa <HAL_I2C_Master_Transmit_DMA+0x22a>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2200      	movs	r2, #0
 800674e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	685a      	ldr	r2, [r3, #4]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8006760:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	685a      	ldr	r2, [r3, #4]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006770:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006780:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006790:	601a      	str	r2, [r3, #0]
 8006792:	e02f      	b.n	80067f4 <HAL_I2C_Master_Transmit_DMA+0x224>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2220      	movs	r2, #32
 8006798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2200      	movs	r2, #0
 80067a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a8:	f043 0210 	orr.w	r2, r3, #16
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	e01e      	b.n	80067fa <HAL_I2C_Master_Transmit_DMA+0x22a>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80067ca:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067da:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2200      	movs	r2, #0
 80067e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	685a      	ldr	r2, [r3, #4]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80067f2:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 80067f4:	2300      	movs	r3, #0
 80067f6:	e000      	b.n	80067fa <HAL_I2C_Master_Transmit_DMA+0x22a>
  }
  else
  {
    return HAL_BUSY;
 80067f8:	2302      	movs	r3, #2
  }
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3718      	adds	r7, #24
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop
 8006804:	2000006c 	.word	0x2000006c
 8006808:	14f8b589 	.word	0x14f8b589
 800680c:	ffff0000 	.word	0xffff0000
 8006810:	0800ae09 	.word	0x0800ae09
 8006814:	0800afb3 	.word	0x0800afb3

08006818 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b086      	sub	sp, #24
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	607a      	str	r2, [r7, #4]
 8006822:	461a      	mov	r2, r3
 8006824:	460b      	mov	r3, r1
 8006826:	817b      	strh	r3, [r7, #10]
 8006828:	4613      	mov	r3, r2
 800682a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800682c:	2300      	movs	r3, #0
 800682e:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006836:	b2db      	uxtb	r3, r3
 8006838:	2b20      	cmp	r3, #32
 800683a:	f040 8101 	bne.w	8006a40 <HAL_I2C_Master_Receive_DMA+0x228>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800683e:	4b83      	ldr	r3, [pc, #524]	; (8006a4c <HAL_I2C_Master_Receive_DMA+0x234>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	08db      	lsrs	r3, r3, #3
 8006844:	4a82      	ldr	r2, [pc, #520]	; (8006a50 <HAL_I2C_Master_Receive_DMA+0x238>)
 8006846:	fba2 2303 	umull	r2, r3, r2, r3
 800684a:	0a1a      	lsrs	r2, r3, #8
 800684c:	4613      	mov	r3, r2
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	4413      	add	r3, r2
 8006852:	009a      	lsls	r2, r3, #2
 8006854:	4413      	add	r3, r2
 8006856:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	3b01      	subs	r3, #1
 800685c:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d112      	bne.n	800688a <HAL_I2C_Master_Receive_DMA+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2200      	movs	r2, #0
 8006868:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2220      	movs	r2, #32
 800686e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2200      	movs	r2, #0
 8006876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800687e:	f043 0220 	orr.w	r2, r3, #32
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	641a      	str	r2, [r3, #64]	; 0x40

        return HAL_BUSY;
 8006886:	2302      	movs	r3, #2
 8006888:	e0db      	b.n	8006a42 <HAL_I2C_Master_Receive_DMA+0x22a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	699b      	ldr	r3, [r3, #24]
 8006890:	f003 0302 	and.w	r3, r3, #2
 8006894:	2b02      	cmp	r3, #2
 8006896:	d0df      	beq.n	8006858 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d101      	bne.n	80068a6 <HAL_I2C_Master_Receive_DMA+0x8e>
 80068a2:	2302      	movs	r3, #2
 80068a4:	e0cd      	b.n	8006a42 <HAL_I2C_Master_Receive_DMA+0x22a>
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2201      	movs	r2, #1
 80068aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 0301 	and.w	r3, r3, #1
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d007      	beq.n	80068cc <HAL_I2C_Master_Receive_DMA+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f042 0201 	orr.w	r2, r2, #1
 80068ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80068da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2222      	movs	r2, #34	; 0x22
 80068e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2210      	movs	r2, #16
 80068e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2200      	movs	r2, #0
 80068f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	893a      	ldrh	r2, [r7, #8]
 80068fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006902:	b29a      	uxth	r2, r3
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	4a52      	ldr	r2, [pc, #328]	; (8006a54 <HAL_I2C_Master_Receive_DMA+0x23c>)
 800690c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800690e:	897a      	ldrh	r2, [r7, #10]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006918:	2b00      	cmp	r3, #0
 800691a:	d073      	beq.n	8006a04 <HAL_I2C_Master_Receive_DMA+0x1ec>
    {
      if (hi2c->hdmarx != NULL)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006920:	2b00      	cmp	r3, #0
 8006922:	d022      	beq.n	800696a <HAL_I2C_Master_Receive_DMA+0x152>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006928:	4a4b      	ldr	r2, [pc, #300]	; (8006a58 <HAL_I2C_Master_Receive_DMA+0x240>)
 800692a:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006930:	4a4a      	ldr	r2, [pc, #296]	; (8006a5c <HAL_I2C_Master_Receive_DMA+0x244>)
 8006932:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006938:	2200      	movs	r2, #0
 800693a:	62da      	str	r2, [r3, #44]	; 0x2c
        hi2c->hdmarx->XferAbortCallback = NULL;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006940:	2200      	movs	r2, #0
 8006942:	635a      	str	r2, [r3, #52]	; 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	3310      	adds	r3, #16
 800694e:	4619      	mov	r1, r3
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006954:	461a      	mov	r2, r3
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800695a:	f7fc fbd2 	bl	8003102 <HAL_DMA_Start_IT>
 800695e:	4603      	mov	r3, r0
 8006960:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8006962:	7dfb      	ldrb	r3, [r7, #23]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d139      	bne.n	80069dc <HAL_I2C_Master_Receive_DMA+0x1c4>
 8006968:	e013      	b.n	8006992 <HAL_I2C_Master_Receive_DMA+0x17a>
        hi2c->State     = HAL_I2C_STATE_READY;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2220      	movs	r2, #32
 800696e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2200      	movs	r2, #0
 8006976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2200      	movs	r2, #0
 800698a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	e057      	b.n	8006a42 <HAL_I2C_Master_Receive_DMA+0x22a>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80069a0:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069b0:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2200      	movs	r2, #0
 80069b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	685a      	ldr	r2, [r3, #4]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80069c8:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	685a      	ldr	r2, [r3, #4]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069d8:	605a      	str	r2, [r3, #4]
 80069da:	e02f      	b.n	8006a3c <HAL_I2C_Master_Receive_DMA+0x224>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2220      	movs	r2, #32
 80069e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f0:	f043 0210 	orr.w	r2, r3, #16
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	e01e      	b.n	8006a42 <HAL_I2C_Master_Receive_DMA+0x22a>
      }
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	685a      	ldr	r2, [r3, #4]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8006a1a:	605a      	str	r2, [r3, #4]

      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006a2a:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a3a:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	e000      	b.n	8006a42 <HAL_I2C_Master_Receive_DMA+0x22a>
  }
  else
  {
    return HAL_BUSY;
 8006a40:	2302      	movs	r3, #2
  }
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3718      	adds	r7, #24
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	bf00      	nop
 8006a4c:	2000006c 	.word	0x2000006c
 8006a50:	14f8b589 	.word	0x14f8b589
 8006a54:	ffff0000 	.word	0xffff0000
 8006a58:	0800ae09 	.word	0x0800ae09
 8006a5c:	0800afb3 	.word	0x0800afb3

08006a60 <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b086      	sub	sp, #24
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	60b9      	str	r1, [r7, #8]
 8006a6a:	4613      	mov	r3, r2
 8006a6c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	2b20      	cmp	r3, #32
 8006a78:	f040 80b0 	bne.w	8006bdc <HAL_I2C_Slave_Transmit_DMA+0x17c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d002      	beq.n	8006a88 <HAL_I2C_Slave_Transmit_DMA+0x28>
 8006a82:	88fb      	ldrh	r3, [r7, #6]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d101      	bne.n	8006a8c <HAL_I2C_Slave_Transmit_DMA+0x2c>
    {
      return  HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e0a8      	b.n	8006bde <HAL_I2C_Slave_Transmit_DMA+0x17e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d101      	bne.n	8006a9a <HAL_I2C_Slave_Transmit_DMA+0x3a>
 8006a96:	2302      	movs	r3, #2
 8006a98:	e0a1      	b.n	8006bde <HAL_I2C_Slave_Transmit_DMA+0x17e>
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f003 0301 	and.w	r3, r3, #1
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d007      	beq.n	8006ac0 <HAL_I2C_Slave_Transmit_DMA+0x60>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f042 0201 	orr.w	r2, r2, #1
 8006abe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ace:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2221      	movs	r2, #33	; 0x21
 8006ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2220      	movs	r2, #32
 8006adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	68ba      	ldr	r2, [r7, #8]
 8006aea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	88fa      	ldrh	r2, [r7, #6]
 8006af0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006af6:	b29a      	uxth	r2, r3
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	4a3a      	ldr	r2, [pc, #232]	; (8006be8 <HAL_I2C_Slave_Transmit_DMA+0x188>)
 8006b00:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmatx != NULL)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d022      	beq.n	8006b50 <HAL_I2C_Slave_Transmit_DMA+0xf0>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b0e:	4a37      	ldr	r2, [pc, #220]	; (8006bec <HAL_I2C_Slave_Transmit_DMA+0x18c>)
 8006b10:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b16:	4a36      	ldr	r2, [pc, #216]	; (8006bf0 <HAL_I2C_Slave_Transmit_DMA+0x190>)
 8006b18:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b1e:	2200      	movs	r2, #0
 8006b20:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->hdmatx->XferAbortCallback = NULL;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b26:	2200      	movs	r2, #0
 8006b28:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b32:	4619      	mov	r1, r3
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	3310      	adds	r3, #16
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b40:	f7fc fadf 	bl	8003102 <HAL_DMA_Start_IT>
 8006b44:	4603      	mov	r3, r0
 8006b46:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8006b48:	7dfb      	ldrb	r3, [r7, #23]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d132      	bne.n	8006bb4 <HAL_I2C_Slave_Transmit_DMA+0x154>
 8006b4e:	e013      	b.n	8006b78 <HAL_I2C_Slave_Transmit_DMA+0x118>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2228      	movs	r2, #40	; 0x28
 8006b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b64:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	e032      	b.n	8006bde <HAL_I2C_Slave_Transmit_DMA+0x17e>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006b86:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	685a      	ldr	r2, [r3, #4]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8006b9e:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	685a      	ldr	r2, [r3, #4]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bae:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	e014      	b.n	8006bde <HAL_I2C_Slave_Transmit_DMA+0x17e>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2220      	movs	r2, #32
 8006bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc8:	f043 0210 	orr.w	r2, r3, #16
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e000      	b.n	8006bde <HAL_I2C_Slave_Transmit_DMA+0x17e>
    }
  }
  else
  {
    return HAL_BUSY;
 8006bdc:	2302      	movs	r3, #2
  }
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3718      	adds	r7, #24
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	bf00      	nop
 8006be8:	ffff0000 	.word	0xffff0000
 8006bec:	0800ae09 	.word	0x0800ae09
 8006bf0:	0800afb3 	.word	0x0800afb3

08006bf4 <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b086      	sub	sp, #24
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	60b9      	str	r1, [r7, #8]
 8006bfe:	4613      	mov	r3, r2
 8006c00:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	2b20      	cmp	r3, #32
 8006c0c:	f040 80b0 	bne.w	8006d70 <HAL_I2C_Slave_Receive_DMA+0x17c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d002      	beq.n	8006c1c <HAL_I2C_Slave_Receive_DMA+0x28>
 8006c16:	88fb      	ldrh	r3, [r7, #6]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d101      	bne.n	8006c20 <HAL_I2C_Slave_Receive_DMA+0x2c>
    {
      return  HAL_ERROR;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	e0a8      	b.n	8006d72 <HAL_I2C_Slave_Receive_DMA+0x17e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d101      	bne.n	8006c2e <HAL_I2C_Slave_Receive_DMA+0x3a>
 8006c2a:	2302      	movs	r3, #2
 8006c2c:	e0a1      	b.n	8006d72 <HAL_I2C_Slave_Receive_DMA+0x17e>
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2201      	movs	r2, #1
 8006c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 0301 	and.w	r3, r3, #1
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d007      	beq.n	8006c54 <HAL_I2C_Slave_Receive_DMA+0x60>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f042 0201 	orr.w	r2, r2, #1
 8006c52:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c62:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2222      	movs	r2, #34	; 0x22
 8006c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2220      	movs	r2, #32
 8006c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2200      	movs	r2, #0
 8006c78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	68ba      	ldr	r2, [r7, #8]
 8006c7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	88fa      	ldrh	r2, [r7, #6]
 8006c84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c8a:	b29a      	uxth	r2, r3
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	4a3a      	ldr	r2, [pc, #232]	; (8006d7c <HAL_I2C_Slave_Receive_DMA+0x188>)
 8006c94:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmarx != NULL)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d022      	beq.n	8006ce4 <HAL_I2C_Slave_Receive_DMA+0xf0>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca2:	4a37      	ldr	r2, [pc, #220]	; (8006d80 <HAL_I2C_Slave_Receive_DMA+0x18c>)
 8006ca4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006caa:	4a36      	ldr	r2, [pc, #216]	; (8006d84 <HAL_I2C_Slave_Receive_DMA+0x190>)
 8006cac:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->hdmarx->XferAbortCallback = NULL;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cba:	2200      	movs	r2, #0
 8006cbc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	3310      	adds	r3, #16
 8006cc8:	4619      	mov	r1, r3
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cce:	461a      	mov	r2, r3
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cd4:	f7fc fa15 	bl	8003102 <HAL_DMA_Start_IT>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8006cdc:	7dfb      	ldrb	r3, [r7, #23]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d132      	bne.n	8006d48 <HAL_I2C_Slave_Receive_DMA+0x154>
 8006ce2:	e013      	b.n	8006d0c <HAL_I2C_Slave_Receive_DMA+0x118>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2228      	movs	r2, #40	; 0x28
 8006ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e032      	b.n	8006d72 <HAL_I2C_Slave_Receive_DMA+0x17e>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006d1a:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	685a      	ldr	r2, [r3, #4]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8006d32:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	685a      	ldr	r2, [r3, #4]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d42:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 8006d44:	2300      	movs	r3, #0
 8006d46:	e014      	b.n	8006d72 <HAL_I2C_Slave_Receive_DMA+0x17e>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2220      	movs	r2, #32
 8006d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2200      	movs	r2, #0
 8006d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d5c:	f043 0210 	orr.w	r2, r3, #16
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2200      	movs	r2, #0
 8006d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e000      	b.n	8006d72 <HAL_I2C_Slave_Receive_DMA+0x17e>
    }
  }
  else
  {
    return HAL_BUSY;
 8006d70:	2302      	movs	r3, #2
  }
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3718      	adds	r7, #24
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	bf00      	nop
 8006d7c:	ffff0000 	.word	0xffff0000
 8006d80:	0800ae09 	.word	0x0800ae09
 8006d84:	0800afb3 	.word	0x0800afb3

08006d88 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b088      	sub	sp, #32
 8006d8c:	af02      	add	r7, sp, #8
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	4608      	mov	r0, r1
 8006d92:	4611      	mov	r1, r2
 8006d94:	461a      	mov	r2, r3
 8006d96:	4603      	mov	r3, r0
 8006d98:	817b      	strh	r3, [r7, #10]
 8006d9a:	460b      	mov	r3, r1
 8006d9c:	813b      	strh	r3, [r7, #8]
 8006d9e:	4613      	mov	r3, r2
 8006da0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006da2:	f7fb fc57 	bl	8002654 <HAL_GetTick>
 8006da6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	2b20      	cmp	r3, #32
 8006db2:	f040 80d9 	bne.w	8006f68 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	9300      	str	r3, [sp, #0]
 8006dba:	2319      	movs	r3, #25
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	496d      	ldr	r1, [pc, #436]	; (8006f74 <HAL_I2C_Mem_Write+0x1ec>)
 8006dc0:	68f8      	ldr	r0, [r7, #12]
 8006dc2:	f004 f9d5 	bl	800b170 <I2C_WaitOnFlagUntilTimeout>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d001      	beq.n	8006dd0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006dcc:	2302      	movs	r3, #2
 8006dce:	e0cc      	b.n	8006f6a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d101      	bne.n	8006dde <HAL_I2C_Mem_Write+0x56>
 8006dda:	2302      	movs	r3, #2
 8006ddc:	e0c5      	b.n	8006f6a <HAL_I2C_Mem_Write+0x1e2>
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2201      	movs	r2, #1
 8006de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f003 0301 	and.w	r3, r3, #1
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d007      	beq.n	8006e04 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f042 0201 	orr.w	r2, r2, #1
 8006e02:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e12:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2221      	movs	r2, #33	; 0x21
 8006e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2240      	movs	r2, #64	; 0x40
 8006e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2200      	movs	r2, #0
 8006e28:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	6a3a      	ldr	r2, [r7, #32]
 8006e2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006e34:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e3a:	b29a      	uxth	r2, r3
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	4a4d      	ldr	r2, [pc, #308]	; (8006f78 <HAL_I2C_Mem_Write+0x1f0>)
 8006e44:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006e46:	88f8      	ldrh	r0, [r7, #6]
 8006e48:	893a      	ldrh	r2, [r7, #8]
 8006e4a:	8979      	ldrh	r1, [r7, #10]
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	9301      	str	r3, [sp, #4]
 8006e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e52:	9300      	str	r3, [sp, #0]
 8006e54:	4603      	mov	r3, r0
 8006e56:	68f8      	ldr	r0, [r7, #12]
 8006e58:	f003 fe58 	bl	800ab0c <I2C_RequestMemoryWrite>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d052      	beq.n	8006f08 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	e081      	b.n	8006f6a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e66:	697a      	ldr	r2, [r7, #20]
 8006e68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e6a:	68f8      	ldr	r0, [r7, #12]
 8006e6c:	f004 fa9a 	bl	800b3a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006e70:	4603      	mov	r3, r0
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d00d      	beq.n	8006e92 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e7a:	2b04      	cmp	r3, #4
 8006e7c:	d107      	bne.n	8006e8e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e8c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e06b      	b.n	8006f6a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e96:	781a      	ldrb	r2, [r3, #0]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea2:	1c5a      	adds	r2, r3, #1
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eac:	3b01      	subs	r3, #1
 8006eae:	b29a      	uxth	r2, r3
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	3b01      	subs	r3, #1
 8006ebc:	b29a      	uxth	r2, r3
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	695b      	ldr	r3, [r3, #20]
 8006ec8:	f003 0304 	and.w	r3, r3, #4
 8006ecc:	2b04      	cmp	r3, #4
 8006ece:	d11b      	bne.n	8006f08 <HAL_I2C_Mem_Write+0x180>
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d017      	beq.n	8006f08 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006edc:	781a      	ldrb	r2, [r3, #0]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee8:	1c5a      	adds	r2, r3, #1
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ef2:	3b01      	subs	r3, #1
 8006ef4:	b29a      	uxth	r2, r3
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	3b01      	subs	r3, #1
 8006f02:	b29a      	uxth	r2, r3
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d1aa      	bne.n	8006e66 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f10:	697a      	ldr	r2, [r7, #20]
 8006f12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	f004 fa8d 	bl	800b434 <I2C_WaitOnBTFFlagUntilTimeout>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d00d      	beq.n	8006f3c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f24:	2b04      	cmp	r3, #4
 8006f26:	d107      	bne.n	8006f38 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f36:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e016      	b.n	8006f6a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2220      	movs	r2, #32
 8006f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006f64:	2300      	movs	r3, #0
 8006f66:	e000      	b.n	8006f6a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006f68:	2302      	movs	r3, #2
  }
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3718      	adds	r7, #24
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
 8006f72:	bf00      	nop
 8006f74:	00100002 	.word	0x00100002
 8006f78:	ffff0000 	.word	0xffff0000

08006f7c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b08c      	sub	sp, #48	; 0x30
 8006f80:	af02      	add	r7, sp, #8
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	4608      	mov	r0, r1
 8006f86:	4611      	mov	r1, r2
 8006f88:	461a      	mov	r2, r3
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	817b      	strh	r3, [r7, #10]
 8006f8e:	460b      	mov	r3, r1
 8006f90:	813b      	strh	r3, [r7, #8]
 8006f92:	4613      	mov	r3, r2
 8006f94:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006f96:	f7fb fb5d 	bl	8002654 <HAL_GetTick>
 8006f9a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	2b20      	cmp	r3, #32
 8006fa6:	f040 8208 	bne.w	80073ba <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fac:	9300      	str	r3, [sp, #0]
 8006fae:	2319      	movs	r3, #25
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	497b      	ldr	r1, [pc, #492]	; (80071a0 <HAL_I2C_Mem_Read+0x224>)
 8006fb4:	68f8      	ldr	r0, [r7, #12]
 8006fb6:	f004 f8db 	bl	800b170 <I2C_WaitOnFlagUntilTimeout>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d001      	beq.n	8006fc4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006fc0:	2302      	movs	r3, #2
 8006fc2:	e1fb      	b.n	80073bc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d101      	bne.n	8006fd2 <HAL_I2C_Mem_Read+0x56>
 8006fce:	2302      	movs	r3, #2
 8006fd0:	e1f4      	b.n	80073bc <HAL_I2C_Mem_Read+0x440>
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f003 0301 	and.w	r3, r3, #1
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d007      	beq.n	8006ff8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f042 0201 	orr.w	r2, r2, #1
 8006ff6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007006:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2222      	movs	r2, #34	; 0x22
 800700c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2240      	movs	r2, #64	; 0x40
 8007014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2200      	movs	r2, #0
 800701c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007022:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007028:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800702e:	b29a      	uxth	r2, r3
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	4a5b      	ldr	r2, [pc, #364]	; (80071a4 <HAL_I2C_Mem_Read+0x228>)
 8007038:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800703a:	88f8      	ldrh	r0, [r7, #6]
 800703c:	893a      	ldrh	r2, [r7, #8]
 800703e:	8979      	ldrh	r1, [r7, #10]
 8007040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007042:	9301      	str	r3, [sp, #4]
 8007044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007046:	9300      	str	r3, [sp, #0]
 8007048:	4603      	mov	r3, r0
 800704a:	68f8      	ldr	r0, [r7, #12]
 800704c:	f003 fdf4 	bl	800ac38 <I2C_RequestMemoryRead>
 8007050:	4603      	mov	r3, r0
 8007052:	2b00      	cmp	r3, #0
 8007054:	d001      	beq.n	800705a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	e1b0      	b.n	80073bc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800705e:	2b00      	cmp	r3, #0
 8007060:	d113      	bne.n	800708a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007062:	2300      	movs	r3, #0
 8007064:	623b      	str	r3, [r7, #32]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	695b      	ldr	r3, [r3, #20]
 800706c:	623b      	str	r3, [r7, #32]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	699b      	ldr	r3, [r3, #24]
 8007074:	623b      	str	r3, [r7, #32]
 8007076:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007086:	601a      	str	r2, [r3, #0]
 8007088:	e184      	b.n	8007394 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800708e:	2b01      	cmp	r3, #1
 8007090:	d11b      	bne.n	80070ca <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070a2:	2300      	movs	r3, #0
 80070a4:	61fb      	str	r3, [r7, #28]
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	695b      	ldr	r3, [r3, #20]
 80070ac:	61fb      	str	r3, [r7, #28]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	699b      	ldr	r3, [r3, #24]
 80070b4:	61fb      	str	r3, [r7, #28]
 80070b6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070c6:	601a      	str	r2, [r3, #0]
 80070c8:	e164      	b.n	8007394 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070ce:	2b02      	cmp	r3, #2
 80070d0:	d11b      	bne.n	800710a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070e0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070f2:	2300      	movs	r3, #0
 80070f4:	61bb      	str	r3, [r7, #24]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	695b      	ldr	r3, [r3, #20]
 80070fc:	61bb      	str	r3, [r7, #24]
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	699b      	ldr	r3, [r3, #24]
 8007104:	61bb      	str	r3, [r7, #24]
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	e144      	b.n	8007394 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800710a:	2300      	movs	r3, #0
 800710c:	617b      	str	r3, [r7, #20]
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	695b      	ldr	r3, [r3, #20]
 8007114:	617b      	str	r3, [r7, #20]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	699b      	ldr	r3, [r3, #24]
 800711c:	617b      	str	r3, [r7, #20]
 800711e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007120:	e138      	b.n	8007394 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007126:	2b03      	cmp	r3, #3
 8007128:	f200 80f1 	bhi.w	800730e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007130:	2b01      	cmp	r3, #1
 8007132:	d123      	bne.n	800717c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007134:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007136:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007138:	68f8      	ldr	r0, [r7, #12]
 800713a:	f004 fa39 	bl	800b5b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800713e:	4603      	mov	r3, r0
 8007140:	2b00      	cmp	r3, #0
 8007142:	d001      	beq.n	8007148 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007144:	2301      	movs	r3, #1
 8007146:	e139      	b.n	80073bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	691a      	ldr	r2, [r3, #16]
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007152:	b2d2      	uxtb	r2, r2
 8007154:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800715a:	1c5a      	adds	r2, r3, #1
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007164:	3b01      	subs	r3, #1
 8007166:	b29a      	uxth	r2, r3
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007170:	b29b      	uxth	r3, r3
 8007172:	3b01      	subs	r3, #1
 8007174:	b29a      	uxth	r2, r3
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	855a      	strh	r2, [r3, #42]	; 0x2a
 800717a:	e10b      	b.n	8007394 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007180:	2b02      	cmp	r3, #2
 8007182:	d14e      	bne.n	8007222 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007186:	9300      	str	r3, [sp, #0]
 8007188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800718a:	2200      	movs	r2, #0
 800718c:	4906      	ldr	r1, [pc, #24]	; (80071a8 <HAL_I2C_Mem_Read+0x22c>)
 800718e:	68f8      	ldr	r0, [r7, #12]
 8007190:	f003 ffee 	bl	800b170 <I2C_WaitOnFlagUntilTimeout>
 8007194:	4603      	mov	r3, r0
 8007196:	2b00      	cmp	r3, #0
 8007198:	d008      	beq.n	80071ac <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800719a:	2301      	movs	r3, #1
 800719c:	e10e      	b.n	80073bc <HAL_I2C_Mem_Read+0x440>
 800719e:	bf00      	nop
 80071a0:	00100002 	.word	0x00100002
 80071a4:	ffff0000 	.word	0xffff0000
 80071a8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	691a      	ldr	r2, [r3, #16]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c6:	b2d2      	uxtb	r2, r2
 80071c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ce:	1c5a      	adds	r2, r3, #1
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071d8:	3b01      	subs	r3, #1
 80071da:	b29a      	uxth	r2, r3
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	3b01      	subs	r3, #1
 80071e8:	b29a      	uxth	r2, r3
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	691a      	ldr	r2, [r3, #16]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f8:	b2d2      	uxtb	r2, r2
 80071fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007200:	1c5a      	adds	r2, r3, #1
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800720a:	3b01      	subs	r3, #1
 800720c:	b29a      	uxth	r2, r3
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007216:	b29b      	uxth	r3, r3
 8007218:	3b01      	subs	r3, #1
 800721a:	b29a      	uxth	r2, r3
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007220:	e0b8      	b.n	8007394 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007224:	9300      	str	r3, [sp, #0]
 8007226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007228:	2200      	movs	r2, #0
 800722a:	4966      	ldr	r1, [pc, #408]	; (80073c4 <HAL_I2C_Mem_Read+0x448>)
 800722c:	68f8      	ldr	r0, [r7, #12]
 800722e:	f003 ff9f 	bl	800b170 <I2C_WaitOnFlagUntilTimeout>
 8007232:	4603      	mov	r3, r0
 8007234:	2b00      	cmp	r3, #0
 8007236:	d001      	beq.n	800723c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007238:	2301      	movs	r3, #1
 800723a:	e0bf      	b.n	80073bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800724a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	691a      	ldr	r2, [r3, #16]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007256:	b2d2      	uxtb	r2, r2
 8007258:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725e:	1c5a      	adds	r2, r3, #1
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007268:	3b01      	subs	r3, #1
 800726a:	b29a      	uxth	r2, r3
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007274:	b29b      	uxth	r3, r3
 8007276:	3b01      	subs	r3, #1
 8007278:	b29a      	uxth	r2, r3
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800727e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007280:	9300      	str	r3, [sp, #0]
 8007282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007284:	2200      	movs	r2, #0
 8007286:	494f      	ldr	r1, [pc, #316]	; (80073c4 <HAL_I2C_Mem_Read+0x448>)
 8007288:	68f8      	ldr	r0, [r7, #12]
 800728a:	f003 ff71 	bl	800b170 <I2C_WaitOnFlagUntilTimeout>
 800728e:	4603      	mov	r3, r0
 8007290:	2b00      	cmp	r3, #0
 8007292:	d001      	beq.n	8007298 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007294:	2301      	movs	r3, #1
 8007296:	e091      	b.n	80073bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	691a      	ldr	r2, [r3, #16]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b2:	b2d2      	uxtb	r2, r2
 80072b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ba:	1c5a      	adds	r2, r3, #1
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072c4:	3b01      	subs	r3, #1
 80072c6:	b29a      	uxth	r2, r3
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	3b01      	subs	r3, #1
 80072d4:	b29a      	uxth	r2, r3
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	691a      	ldr	r2, [r3, #16]
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e4:	b2d2      	uxtb	r2, r2
 80072e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ec:	1c5a      	adds	r2, r3, #1
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072f6:	3b01      	subs	r3, #1
 80072f8:	b29a      	uxth	r2, r3
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007302:	b29b      	uxth	r3, r3
 8007304:	3b01      	subs	r3, #1
 8007306:	b29a      	uxth	r2, r3
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800730c:	e042      	b.n	8007394 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800730e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007310:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007312:	68f8      	ldr	r0, [r7, #12]
 8007314:	f004 f94c 	bl	800b5b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007318:	4603      	mov	r3, r0
 800731a:	2b00      	cmp	r3, #0
 800731c:	d001      	beq.n	8007322 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800731e:	2301      	movs	r3, #1
 8007320:	e04c      	b.n	80073bc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	691a      	ldr	r2, [r3, #16]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732c:	b2d2      	uxtb	r2, r2
 800732e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007334:	1c5a      	adds	r2, r3, #1
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800733e:	3b01      	subs	r3, #1
 8007340:	b29a      	uxth	r2, r3
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800734a:	b29b      	uxth	r3, r3
 800734c:	3b01      	subs	r3, #1
 800734e:	b29a      	uxth	r2, r3
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	695b      	ldr	r3, [r3, #20]
 800735a:	f003 0304 	and.w	r3, r3, #4
 800735e:	2b04      	cmp	r3, #4
 8007360:	d118      	bne.n	8007394 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	691a      	ldr	r2, [r3, #16]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800736c:	b2d2      	uxtb	r2, r2
 800736e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007374:	1c5a      	adds	r2, r3, #1
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800737e:	3b01      	subs	r3, #1
 8007380:	b29a      	uxth	r2, r3
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800738a:	b29b      	uxth	r3, r3
 800738c:	3b01      	subs	r3, #1
 800738e:	b29a      	uxth	r2, r3
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007398:	2b00      	cmp	r3, #0
 800739a:	f47f aec2 	bne.w	8007122 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2220      	movs	r2, #32
 80073a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2200      	movs	r2, #0
 80073aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2200      	movs	r2, #0
 80073b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80073b6:	2300      	movs	r3, #0
 80073b8:	e000      	b.n	80073bc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80073ba:	2302      	movs	r3, #2
  }
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3728      	adds	r7, #40	; 0x28
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}
 80073c4:	00010004 	.word	0x00010004

080073c8 <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b087      	sub	sp, #28
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	4608      	mov	r0, r1
 80073d2:	4611      	mov	r1, r2
 80073d4:	461a      	mov	r2, r3
 80073d6:	4603      	mov	r3, r0
 80073d8:	817b      	strh	r3, [r7, #10]
 80073da:	460b      	mov	r3, r1
 80073dc:	813b      	strh	r3, [r7, #8]
 80073de:	4613      	mov	r3, r2
 80073e0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80073e2:	2300      	movs	r3, #0
 80073e4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	2b20      	cmp	r3, #32
 80073f0:	f040 808a 	bne.w	8007508 <HAL_I2C_Mem_Write_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80073f4:	4b47      	ldr	r3, [pc, #284]	; (8007514 <HAL_I2C_Mem_Write_IT+0x14c>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	08db      	lsrs	r3, r3, #3
 80073fa:	4a47      	ldr	r2, [pc, #284]	; (8007518 <HAL_I2C_Mem_Write_IT+0x150>)
 80073fc:	fba2 2303 	umull	r2, r3, r2, r3
 8007400:	0a1a      	lsrs	r2, r3, #8
 8007402:	4613      	mov	r3, r2
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	4413      	add	r3, r2
 8007408:	009a      	lsls	r2, r3, #2
 800740a:	4413      	add	r3, r2
 800740c:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	3b01      	subs	r3, #1
 8007412:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d112      	bne.n	8007440 <HAL_I2C_Mem_Write_IT+0x78>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2200      	movs	r2, #0
 800741e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2220      	movs	r2, #32
 8007424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2200      	movs	r2, #0
 800742c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007434:	f043 0220 	orr.w	r2, r3, #32
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	641a      	str	r2, [r3, #64]	; 0x40

        return HAL_BUSY;
 800743c:	2302      	movs	r3, #2
 800743e:	e064      	b.n	800750a <HAL_I2C_Mem_Write_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	699b      	ldr	r3, [r3, #24]
 8007446:	f003 0302 	and.w	r3, r3, #2
 800744a:	2b02      	cmp	r3, #2
 800744c:	d0df      	beq.n	800740e <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007454:	2b01      	cmp	r3, #1
 8007456:	d101      	bne.n	800745c <HAL_I2C_Mem_Write_IT+0x94>
 8007458:	2302      	movs	r3, #2
 800745a:	e056      	b.n	800750a <HAL_I2C_Mem_Write_IT+0x142>
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f003 0301 	and.w	r3, r3, #1
 800746e:	2b01      	cmp	r3, #1
 8007470:	d007      	beq.n	8007482 <HAL_I2C_Mem_Write_IT+0xba>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	681a      	ldr	r2, [r3, #0]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f042 0201 	orr.w	r2, r2, #1
 8007480:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007490:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2221      	movs	r2, #33	; 0x21
 8007496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2240      	movs	r2, #64	; 0x40
 800749e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2200      	movs	r2, #0
 80074a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	6a3a      	ldr	r2, [r7, #32]
 80074ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80074b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074b8:	b29a      	uxth	r2, r3
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	4a16      	ldr	r2, [pc, #88]	; (800751c <HAL_I2C_Mem_Write_IT+0x154>)
 80074c2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80074c4:	897a      	ldrh	r2, [r7, #10]
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 80074ca:	893a      	ldrh	r2, [r7, #8]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 80074d0:	88fa      	ldrh	r2, [r7, #6]
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2200      	movs	r2, #0
 80074da:	651a      	str	r2, [r3, #80]	; 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80074ea:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2200      	movs	r2, #0
 80074f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	685a      	ldr	r2, [r3, #4]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8007502:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8007504:	2300      	movs	r3, #0
 8007506:	e000      	b.n	800750a <HAL_I2C_Mem_Write_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 8007508:	2302      	movs	r3, #2
  }
}
 800750a:	4618      	mov	r0, r3
 800750c:	371c      	adds	r7, #28
 800750e:	46bd      	mov	sp, r7
 8007510:	bc80      	pop	{r7}
 8007512:	4770      	bx	lr
 8007514:	2000006c 	.word	0x2000006c
 8007518:	14f8b589 	.word	0x14f8b589
 800751c:	ffff0000 	.word	0xffff0000

08007520 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8007520:	b480      	push	{r7}
 8007522:	b087      	sub	sp, #28
 8007524:	af00      	add	r7, sp, #0
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	4608      	mov	r0, r1
 800752a:	4611      	mov	r1, r2
 800752c:	461a      	mov	r2, r3
 800752e:	4603      	mov	r3, r0
 8007530:	817b      	strh	r3, [r7, #10]
 8007532:	460b      	mov	r3, r1
 8007534:	813b      	strh	r3, [r7, #8]
 8007536:	4613      	mov	r3, r2
 8007538:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800753a:	2300      	movs	r3, #0
 800753c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007544:	b2db      	uxtb	r3, r3
 8007546:	2b20      	cmp	r3, #32
 8007548:	f040 8096 	bne.w	8007678 <HAL_I2C_Mem_Read_IT+0x158>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800754c:	4b4d      	ldr	r3, [pc, #308]	; (8007684 <HAL_I2C_Mem_Read_IT+0x164>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	08db      	lsrs	r3, r3, #3
 8007552:	4a4d      	ldr	r2, [pc, #308]	; (8007688 <HAL_I2C_Mem_Read_IT+0x168>)
 8007554:	fba2 2303 	umull	r2, r3, r2, r3
 8007558:	0a1a      	lsrs	r2, r3, #8
 800755a:	4613      	mov	r3, r2
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	4413      	add	r3, r2
 8007560:	009a      	lsls	r2, r3, #2
 8007562:	4413      	add	r3, r2
 8007564:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	3b01      	subs	r3, #1
 800756a:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d112      	bne.n	8007598 <HAL_I2C_Mem_Read_IT+0x78>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2200      	movs	r2, #0
 8007576:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2220      	movs	r2, #32
 800757c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2200      	movs	r2, #0
 8007584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758c:	f043 0220 	orr.w	r2, r3, #32
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	641a      	str	r2, [r3, #64]	; 0x40

        return HAL_BUSY;
 8007594:	2302      	movs	r3, #2
 8007596:	e070      	b.n	800767a <HAL_I2C_Mem_Read_IT+0x15a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	699b      	ldr	r3, [r3, #24]
 800759e:	f003 0302 	and.w	r3, r3, #2
 80075a2:	2b02      	cmp	r3, #2
 80075a4:	d0df      	beq.n	8007566 <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d101      	bne.n	80075b4 <HAL_I2C_Mem_Read_IT+0x94>
 80075b0:	2302      	movs	r3, #2
 80075b2:	e062      	b.n	800767a <HAL_I2C_Mem_Read_IT+0x15a>
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 0301 	and.w	r3, r3, #1
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d007      	beq.n	80075da <HAL_I2C_Mem_Read_IT+0xba>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f042 0201 	orr.w	r2, r2, #1
 80075d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80075e8:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2222      	movs	r2, #34	; 0x22
 80075ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2240      	movs	r2, #64	; 0x40
 80075f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2200      	movs	r2, #0
 80075fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	6a3a      	ldr	r2, [r7, #32]
 8007604:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800760a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007610:	b29a      	uxth	r2, r3
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	4a1c      	ldr	r2, [pc, #112]	; (800768c <HAL_I2C_Mem_Read_IT+0x16c>)
 800761a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800761c:	897a      	ldrh	r2, [r7, #10]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8007622:	893a      	ldrh	r2, [r7, #8]
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8007628:	88fa      	ldrh	r2, [r7, #6]
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2200      	movs	r2, #0
 8007632:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007642:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007652:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2200      	movs	r2, #0
 8007658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007660:	2b00      	cmp	r3, #0
 8007662:	d007      	beq.n	8007674 <HAL_I2C_Mem_Read_IT+0x154>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	685a      	ldr	r2, [r3, #4]
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8007672:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8007674:	2300      	movs	r3, #0
 8007676:	e000      	b.n	800767a <HAL_I2C_Mem_Read_IT+0x15a>
  }
  else
  {
    return HAL_BUSY;
 8007678:	2302      	movs	r3, #2
  }
}
 800767a:	4618      	mov	r0, r3
 800767c:	371c      	adds	r7, #28
 800767e:	46bd      	mov	sp, r7
 8007680:	bc80      	pop	{r7}
 8007682:	4770      	bx	lr
 8007684:	2000006c 	.word	0x2000006c
 8007688:	14f8b589 	.word	0x14f8b589
 800768c:	ffff0000 	.word	0xffff0000

08007690 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b08a      	sub	sp, #40	; 0x28
 8007694:	af02      	add	r7, sp, #8
 8007696:	60f8      	str	r0, [r7, #12]
 8007698:	4608      	mov	r0, r1
 800769a:	4611      	mov	r1, r2
 800769c:	461a      	mov	r2, r3
 800769e:	4603      	mov	r3, r0
 80076a0:	817b      	strh	r3, [r7, #10]
 80076a2:	460b      	mov	r3, r1
 80076a4:	813b      	strh	r3, [r7, #8]
 80076a6:	4613      	mov	r3, r2
 80076a8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80076aa:	2300      	movs	r3, #0
 80076ac:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80076ae:	f7fa ffd1 	bl	8002654 <HAL_GetTick>
 80076b2:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	2b20      	cmp	r3, #32
 80076be:	f040 812e 	bne.w	800791e <HAL_I2C_Mem_Write_DMA+0x28e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80076c2:	4b99      	ldr	r3, [pc, #612]	; (8007928 <HAL_I2C_Mem_Write_DMA+0x298>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	08db      	lsrs	r3, r3, #3
 80076c8:	4a98      	ldr	r2, [pc, #608]	; (800792c <HAL_I2C_Mem_Write_DMA+0x29c>)
 80076ca:	fba2 2303 	umull	r2, r3, r2, r3
 80076ce:	0a1a      	lsrs	r2, r3, #8
 80076d0:	4613      	mov	r3, r2
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	4413      	add	r3, r2
 80076d6:	009a      	lsls	r2, r3, #2
 80076d8:	4413      	add	r3, r2
 80076da:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	3b01      	subs	r3, #1
 80076e0:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d112      	bne.n	800770e <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2200      	movs	r2, #0
 80076ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2220      	movs	r2, #32
 80076f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2200      	movs	r2, #0
 80076fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007702:	f043 0220 	orr.w	r2, r3, #32
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	641a      	str	r2, [r3, #64]	; 0x40

        return HAL_BUSY;
 800770a:	2302      	movs	r3, #2
 800770c:	e108      	b.n	8007920 <HAL_I2C_Mem_Write_DMA+0x290>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	699b      	ldr	r3, [r3, #24]
 8007714:	f003 0302 	and.w	r3, r3, #2
 8007718:	2b02      	cmp	r3, #2
 800771a:	d0df      	beq.n	80076dc <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007722:	2b01      	cmp	r3, #1
 8007724:	d101      	bne.n	800772a <HAL_I2C_Mem_Write_DMA+0x9a>
 8007726:	2302      	movs	r3, #2
 8007728:	e0fa      	b.n	8007920 <HAL_I2C_Mem_Write_DMA+0x290>
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2201      	movs	r2, #1
 800772e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f003 0301 	and.w	r3, r3, #1
 800773c:	2b01      	cmp	r3, #1
 800773e:	d007      	beq.n	8007750 <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f042 0201 	orr.w	r2, r2, #1
 800774e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800775e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2221      	movs	r2, #33	; 0x21
 8007764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2240      	movs	r2, #64	; 0x40
 800776c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2200      	movs	r2, #0
 8007774:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800777a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8007780:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007786:	b29a      	uxth	r2, r3
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	4a68      	ldr	r2, [pc, #416]	; (8007930 <HAL_I2C_Mem_Write_DMA+0x2a0>)
 8007790:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8007792:	897a      	ldrh	r2, [r7, #10]
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8007798:	893a      	ldrh	r2, [r7, #8]
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800779e:	88fa      	ldrh	r2, [r7, #6]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2200      	movs	r2, #0
 80077a8:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	f000 80a1 	beq.w	80078f6 <HAL_I2C_Mem_Write_DMA+0x266>
    {
      if (hi2c->hdmatx != NULL)
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d022      	beq.n	8007802 <HAL_I2C_Mem_Write_DMA+0x172>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077c0:	4a5c      	ldr	r2, [pc, #368]	; (8007934 <HAL_I2C_Mem_Write_DMA+0x2a4>)
 80077c2:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077c8:	4a5b      	ldr	r2, [pc, #364]	; (8007938 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 80077ca:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077d0:	2200      	movs	r2, #0
 80077d2:	62da      	str	r2, [r3, #44]	; 0x2c
        hi2c->hdmatx->XferAbortCallback = NULL;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077d8:	2200      	movs	r2, #0
 80077da:	635a      	str	r2, [r3, #52]	; 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e4:	4619      	mov	r1, r3
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	3310      	adds	r3, #16
 80077ec:	461a      	mov	r2, r3
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077f2:	f7fb fc86 	bl	8003102 <HAL_DMA_Start_IT>
 80077f6:	4603      	mov	r3, r0
 80077f8:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80077fa:	7efb      	ldrb	r3, [r7, #27]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d166      	bne.n	80078ce <HAL_I2C_Mem_Write_DMA+0x23e>
 8007800:	e013      	b.n	800782a <HAL_I2C_Mem_Write_DMA+0x19a>
        hi2c->State     = HAL_I2C_STATE_READY;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2220      	movs	r2, #32
 8007806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2200      	movs	r2, #0
 800780e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007816:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2200      	movs	r2, #0
 8007822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	e07a      	b.n	8007920 <HAL_I2C_Mem_Write_DMA+0x290>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800782a:	88f8      	ldrh	r0, [r7, #6]
 800782c:	893a      	ldrh	r2, [r7, #8]
 800782e:	8979      	ldrh	r1, [r7, #10]
 8007830:	69fb      	ldr	r3, [r7, #28]
 8007832:	9301      	str	r3, [sp, #4]
 8007834:	2323      	movs	r3, #35	; 0x23
 8007836:	9300      	str	r3, [sp, #0]
 8007838:	4603      	mov	r3, r0
 800783a:	68f8      	ldr	r0, [r7, #12]
 800783c:	f003 f966 	bl	800ab0c <I2C_RequestMemoryWrite>
 8007840:	4603      	mov	r3, r0
 8007842:	2b00      	cmp	r3, #0
 8007844:	d022      	beq.n	800788c <HAL_I2C_Mem_Write_DMA+0x1fc>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800784a:	4618      	mov	r0, r3
 800784c:	f7fb fcf6 	bl	800323c <HAL_DMA_Abort_IT>
 8007850:	4603      	mov	r3, r0
 8007852:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007858:	2200      	movs	r2, #0
 800785a:	629a      	str	r2, [r3, #40]	; 0x28

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	681a      	ldr	r2, [r3, #0]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800786a:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2200      	movs	r2, #0
 8007870:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2200      	movs	r2, #0
 8007876:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	681a      	ldr	r2, [r3, #0]
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f022 0201 	bic.w	r2, r2, #1
 8007886:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	e049      	b.n	8007920 <HAL_I2C_Mem_Write_DMA+0x290>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800788c:	2300      	movs	r3, #0
 800788e:	613b      	str	r3, [r7, #16]
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	695b      	ldr	r3, [r3, #20]
 8007896:	613b      	str	r3, [r7, #16]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	699b      	ldr	r3, [r3, #24]
 800789e:	613b      	str	r3, [r7, #16]
 80078a0:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2200      	movs	r2, #0
 80078a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	685a      	ldr	r2, [r3, #4]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80078b8:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	685a      	ldr	r2, [r3, #4]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078c8:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 80078ca:	2300      	movs	r3, #0
 80078cc:	e028      	b.n	8007920 <HAL_I2C_Mem_Write_DMA+0x290>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2220      	movs	r2, #32
 80078d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2200      	movs	r2, #0
 80078da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e2:	f043 0210 	orr.w	r2, r3, #16
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2200      	movs	r2, #0
 80078ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80078f2:	2301      	movs	r3, #1
 80078f4:	e014      	b.n	8007920 <HAL_I2C_Mem_Write_DMA+0x290>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2220      	movs	r2, #32
 80078fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2200      	movs	r2, #0
 8007902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800790a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2200      	movs	r2, #0
 8007916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	e000      	b.n	8007920 <HAL_I2C_Mem_Write_DMA+0x290>
    }
  }
  else
  {
    return HAL_BUSY;
 800791e:	2302      	movs	r3, #2
  }
}
 8007920:	4618      	mov	r0, r3
 8007922:	3720      	adds	r7, #32
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}
 8007928:	2000006c 	.word	0x2000006c
 800792c:	14f8b589 	.word	0x14f8b589
 8007930:	ffff0000 	.word	0xffff0000
 8007934:	0800ae09 	.word	0x0800ae09
 8007938:	0800afb3 	.word	0x0800afb3

0800793c <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b08c      	sub	sp, #48	; 0x30
 8007940:	af02      	add	r7, sp, #8
 8007942:	60f8      	str	r0, [r7, #12]
 8007944:	4608      	mov	r0, r1
 8007946:	4611      	mov	r1, r2
 8007948:	461a      	mov	r2, r3
 800794a:	4603      	mov	r3, r0
 800794c:	817b      	strh	r3, [r7, #10]
 800794e:	460b      	mov	r3, r1
 8007950:	813b      	strh	r3, [r7, #8]
 8007952:	4613      	mov	r3, r2
 8007954:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007956:	f7fa fe7d 	bl	8002654 <HAL_GetTick>
 800795a:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 800795c:	2300      	movs	r3, #0
 800795e:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007966:	b2db      	uxtb	r3, r3
 8007968:	2b20      	cmp	r3, #32
 800796a:	f040 8168 	bne.w	8007c3e <HAL_I2C_Mem_Read_DMA+0x302>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800796e:	4b98      	ldr	r3, [pc, #608]	; (8007bd0 <HAL_I2C_Mem_Read_DMA+0x294>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	08db      	lsrs	r3, r3, #3
 8007974:	4a97      	ldr	r2, [pc, #604]	; (8007bd4 <HAL_I2C_Mem_Read_DMA+0x298>)
 8007976:	fba2 2303 	umull	r2, r3, r2, r3
 800797a:	0a1a      	lsrs	r2, r3, #8
 800797c:	4613      	mov	r3, r2
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	4413      	add	r3, r2
 8007982:	009a      	lsls	r2, r3, #2
 8007984:	4413      	add	r3, r2
 8007986:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8007988:	69fb      	ldr	r3, [r7, #28]
 800798a:	3b01      	subs	r3, #1
 800798c:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 800798e:	69fb      	ldr	r3, [r7, #28]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d112      	bne.n	80079ba <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2200      	movs	r2, #0
 8007998:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2220      	movs	r2, #32
 800799e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2200      	movs	r2, #0
 80079a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ae:	f043 0220 	orr.w	r2, r3, #32
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	641a      	str	r2, [r3, #64]	; 0x40

        return HAL_BUSY;
 80079b6:	2302      	movs	r3, #2
 80079b8:	e142      	b.n	8007c40 <HAL_I2C_Mem_Read_DMA+0x304>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	699b      	ldr	r3, [r3, #24]
 80079c0:	f003 0302 	and.w	r3, r3, #2
 80079c4:	2b02      	cmp	r3, #2
 80079c6:	d0df      	beq.n	8007988 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	d101      	bne.n	80079d6 <HAL_I2C_Mem_Read_DMA+0x9a>
 80079d2:	2302      	movs	r3, #2
 80079d4:	e134      	b.n	8007c40 <HAL_I2C_Mem_Read_DMA+0x304>
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2201      	movs	r2, #1
 80079da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f003 0301 	and.w	r3, r3, #1
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d007      	beq.n	80079fc <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f042 0201 	orr.w	r2, r2, #1
 80079fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	681a      	ldr	r2, [r3, #0]
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a0a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2222      	movs	r2, #34	; 0x22
 8007a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2240      	movs	r2, #64	; 0x40
 8007a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a26:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007a2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a32:	b29a      	uxth	r2, r3
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	4a67      	ldr	r2, [pc, #412]	; (8007bd8 <HAL_I2C_Mem_Read_DMA+0x29c>)
 8007a3c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8007a3e:	897a      	ldrh	r2, [r7, #10]
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8007a44:	893a      	ldrh	r2, [r7, #8]
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8007a4a:	88fa      	ldrh	r2, [r7, #6]
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2200      	movs	r2, #0
 8007a54:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	f000 80c2 	beq.w	8007be4 <HAL_I2C_Mem_Read_DMA+0x2a8>
    {
      if (hi2c->hdmarx != NULL)
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d024      	beq.n	8007ab2 <HAL_I2C_Mem_Read_DMA+0x176>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a6c:	4a5b      	ldr	r2, [pc, #364]	; (8007bdc <HAL_I2C_Mem_Read_DMA+0x2a0>)
 8007a6e:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a74:	4a5a      	ldr	r2, [pc, #360]	; (8007be0 <HAL_I2C_Mem_Read_DMA+0x2a4>)
 8007a76:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	62da      	str	r2, [r3, #44]	; 0x2c
        hi2c->hdmarx->XferAbortCallback = NULL;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a84:	2200      	movs	r2, #0
 8007a86:	635a      	str	r2, [r3, #52]	; 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	3310      	adds	r3, #16
 8007a92:	4619      	mov	r1, r3
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a98:	461a      	mov	r2, r3
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a9e:	f7fb fb30 	bl	8003102 <HAL_DMA_Start_IT>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8007aa8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d17b      	bne.n	8007ba8 <HAL_I2C_Mem_Read_DMA+0x26c>
 8007ab0:	e013      	b.n	8007ada <HAL_I2C_Mem_Read_DMA+0x19e>
        hi2c->State     = HAL_I2C_STATE_READY;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2220      	movs	r2, #32
 8007ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2200      	movs	r2, #0
 8007abe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	e0b2      	b.n	8007c40 <HAL_I2C_Mem_Read_DMA+0x304>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8007ada:	88f8      	ldrh	r0, [r7, #6]
 8007adc:	893a      	ldrh	r2, [r7, #8]
 8007ade:	8979      	ldrh	r1, [r7, #10]
 8007ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae2:	9301      	str	r3, [sp, #4]
 8007ae4:	2323      	movs	r3, #35	; 0x23
 8007ae6:	9300      	str	r3, [sp, #0]
 8007ae8:	4603      	mov	r3, r0
 8007aea:	68f8      	ldr	r0, [r7, #12]
 8007aec:	f003 f8a4 	bl	800ac38 <I2C_RequestMemoryRead>
 8007af0:	4603      	mov	r3, r0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d023      	beq.n	8007b3e <HAL_I2C_Mem_Read_DMA+0x202>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007afa:	4618      	mov	r0, r3
 8007afc:	f7fb fb9e 	bl	800323c <HAL_DMA_Abort_IT>
 8007b00:	4603      	mov	r3, r0
 8007b02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b1c:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2200      	movs	r2, #0
 8007b22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2200      	movs	r2, #0
 8007b28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f022 0201 	bic.w	r2, r2, #1
 8007b38:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	e080      	b.n	8007c40 <HAL_I2C_Mem_Read_DMA+0x304>
        }

        if (hi2c->XferSize == 1U)
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	d108      	bne.n	8007b58 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b54:	601a      	str	r2, [r3, #0]
 8007b56:	e007      	b.n	8007b68 <HAL_I2C_Mem_Read_DMA+0x22c>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	685a      	ldr	r2, [r3, #4]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007b66:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b68:	2300      	movs	r3, #0
 8007b6a:	61bb      	str	r3, [r7, #24]
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	695b      	ldr	r3, [r3, #20]
 8007b72:	61bb      	str	r3, [r7, #24]
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	699b      	ldr	r3, [r3, #24]
 8007b7a:	61bb      	str	r3, [r7, #24]
 8007b7c:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2200      	movs	r2, #0
 8007b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	685a      	ldr	r2, [r3, #4]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b94:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	685a      	ldr	r2, [r3, #4]
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ba4:	605a      	str	r2, [r3, #4]
 8007ba6:	e048      	b.n	8007c3a <HAL_I2C_Mem_Read_DMA+0x2fe>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2220      	movs	r2, #32
 8007bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bbc:	f043 0210 	orr.w	r2, r3, #16
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007bcc:	2301      	movs	r3, #1
 8007bce:	e037      	b.n	8007c40 <HAL_I2C_Mem_Read_DMA+0x304>
 8007bd0:	2000006c 	.word	0x2000006c
 8007bd4:	14f8b589 	.word	0x14f8b589
 8007bd8:	ffff0000 	.word	0xffff0000
 8007bdc:	0800ae09 	.word	0x0800ae09
 8007be0:	0800afb3 	.word	0x0800afb3
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8007be4:	88f8      	ldrh	r0, [r7, #6]
 8007be6:	893a      	ldrh	r2, [r7, #8]
 8007be8:	8979      	ldrh	r1, [r7, #10]
 8007bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bec:	9301      	str	r3, [sp, #4]
 8007bee:	2323      	movs	r3, #35	; 0x23
 8007bf0:	9300      	str	r3, [sp, #0]
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	68f8      	ldr	r0, [r7, #12]
 8007bf6:	f003 f81f 	bl	800ac38 <I2C_RequestMemoryRead>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d001      	beq.n	8007c04 <HAL_I2C_Mem_Read_DMA+0x2c8>
      {
        return HAL_ERROR;
 8007c00:	2301      	movs	r3, #1
 8007c02:	e01d      	b.n	8007c40 <HAL_I2C_Mem_Read_DMA+0x304>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c04:	2300      	movs	r3, #0
 8007c06:	617b      	str	r3, [r7, #20]
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	695b      	ldr	r3, [r3, #20]
 8007c0e:	617b      	str	r3, [r7, #20]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	699b      	ldr	r3, [r3, #24]
 8007c16:	617b      	str	r3, [r7, #20]
 8007c18:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c28:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2220      	movs	r2, #32
 8007c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2200      	movs	r2, #0
 8007c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	e000      	b.n	8007c40 <HAL_I2C_Mem_Read_DMA+0x304>
  }
  else
  {
    return HAL_BUSY;
 8007c3e:	2302      	movs	r3, #2
  }
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3728      	adds	r7, #40	; 0x28
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b08a      	sub	sp, #40	; 0x28
 8007c4c:	af02      	add	r7, sp, #8
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	607a      	str	r2, [r7, #4]
 8007c52:	603b      	str	r3, [r7, #0]
 8007c54:	460b      	mov	r3, r1
 8007c56:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8007c58:	f7fa fcfc 	bl	8002654 <HAL_GetTick>
 8007c5c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	2b20      	cmp	r3, #32
 8007c6c:	f040 8111 	bne.w	8007e92 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007c70:	69fb      	ldr	r3, [r7, #28]
 8007c72:	9300      	str	r3, [sp, #0]
 8007c74:	2319      	movs	r3, #25
 8007c76:	2201      	movs	r2, #1
 8007c78:	4988      	ldr	r1, [pc, #544]	; (8007e9c <HAL_I2C_IsDeviceReady+0x254>)
 8007c7a:	68f8      	ldr	r0, [r7, #12]
 8007c7c:	f003 fa78 	bl	800b170 <I2C_WaitOnFlagUntilTimeout>
 8007c80:	4603      	mov	r3, r0
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d001      	beq.n	8007c8a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8007c86:	2302      	movs	r3, #2
 8007c88:	e104      	b.n	8007e94 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d101      	bne.n	8007c98 <HAL_I2C_IsDeviceReady+0x50>
 8007c94:	2302      	movs	r3, #2
 8007c96:	e0fd      	b.n	8007e94 <HAL_I2C_IsDeviceReady+0x24c>
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f003 0301 	and.w	r3, r3, #1
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	d007      	beq.n	8007cbe <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f042 0201 	orr.w	r2, r2, #1
 8007cbc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007ccc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2224      	movs	r2, #36	; 0x24
 8007cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	4a70      	ldr	r2, [pc, #448]	; (8007ea0 <HAL_I2C_IsDeviceReady+0x258>)
 8007ce0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007cf0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8007cf2:	69fb      	ldr	r3, [r7, #28]
 8007cf4:	9300      	str	r3, [sp, #0]
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007cfe:	68f8      	ldr	r0, [r7, #12]
 8007d00:	f003 fa36 	bl	800b170 <I2C_WaitOnFlagUntilTimeout>
 8007d04:	4603      	mov	r3, r0
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d00d      	beq.n	8007d26 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d18:	d103      	bne.n	8007d22 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d20:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8007d22:	2303      	movs	r3, #3
 8007d24:	e0b6      	b.n	8007e94 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007d26:	897b      	ldrh	r3, [r7, #10]
 8007d28:	b2db      	uxtb	r3, r3
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007d34:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8007d36:	f7fa fc8d 	bl	8002654 <HAL_GetTick>
 8007d3a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	695b      	ldr	r3, [r3, #20]
 8007d42:	f003 0302 	and.w	r3, r3, #2
 8007d46:	2b02      	cmp	r3, #2
 8007d48:	bf0c      	ite	eq
 8007d4a:	2301      	moveq	r3, #1
 8007d4c:	2300      	movne	r3, #0
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	695b      	ldr	r3, [r3, #20]
 8007d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d60:	bf0c      	ite	eq
 8007d62:	2301      	moveq	r3, #1
 8007d64:	2300      	movne	r3, #0
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007d6a:	e025      	b.n	8007db8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007d6c:	f7fa fc72 	bl	8002654 <HAL_GetTick>
 8007d70:	4602      	mov	r2, r0
 8007d72:	69fb      	ldr	r3, [r7, #28]
 8007d74:	1ad3      	subs	r3, r2, r3
 8007d76:	683a      	ldr	r2, [r7, #0]
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d302      	bcc.n	8007d82 <HAL_I2C_IsDeviceReady+0x13a>
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d103      	bne.n	8007d8a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	22a0      	movs	r2, #160	; 0xa0
 8007d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	695b      	ldr	r3, [r3, #20]
 8007d90:	f003 0302 	and.w	r3, r3, #2
 8007d94:	2b02      	cmp	r3, #2
 8007d96:	bf0c      	ite	eq
 8007d98:	2301      	moveq	r3, #1
 8007d9a:	2300      	movne	r3, #0
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	695b      	ldr	r3, [r3, #20]
 8007da6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007daa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dae:	bf0c      	ite	eq
 8007db0:	2301      	moveq	r3, #1
 8007db2:	2300      	movne	r3, #0
 8007db4:	b2db      	uxtb	r3, r3
 8007db6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	2ba0      	cmp	r3, #160	; 0xa0
 8007dc2:	d005      	beq.n	8007dd0 <HAL_I2C_IsDeviceReady+0x188>
 8007dc4:	7dfb      	ldrb	r3, [r7, #23]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d102      	bne.n	8007dd0 <HAL_I2C_IsDeviceReady+0x188>
 8007dca:	7dbb      	ldrb	r3, [r7, #22]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d0cd      	beq.n	8007d6c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2220      	movs	r2, #32
 8007dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	695b      	ldr	r3, [r3, #20]
 8007dde:	f003 0302 	and.w	r3, r3, #2
 8007de2:	2b02      	cmp	r3, #2
 8007de4:	d129      	bne.n	8007e3a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	681a      	ldr	r2, [r3, #0]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007df4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007df6:	2300      	movs	r3, #0
 8007df8:	613b      	str	r3, [r7, #16]
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	695b      	ldr	r3, [r3, #20]
 8007e00:	613b      	str	r3, [r7, #16]
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	699b      	ldr	r3, [r3, #24]
 8007e08:	613b      	str	r3, [r7, #16]
 8007e0a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007e0c:	69fb      	ldr	r3, [r7, #28]
 8007e0e:	9300      	str	r3, [sp, #0]
 8007e10:	2319      	movs	r3, #25
 8007e12:	2201      	movs	r2, #1
 8007e14:	4921      	ldr	r1, [pc, #132]	; (8007e9c <HAL_I2C_IsDeviceReady+0x254>)
 8007e16:	68f8      	ldr	r0, [r7, #12]
 8007e18:	f003 f9aa 	bl	800b170 <I2C_WaitOnFlagUntilTimeout>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d001      	beq.n	8007e26 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8007e22:	2301      	movs	r3, #1
 8007e24:	e036      	b.n	8007e94 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2220      	movs	r2, #32
 8007e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2200      	movs	r2, #0
 8007e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8007e36:	2300      	movs	r3, #0
 8007e38:	e02c      	b.n	8007e94 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	681a      	ldr	r2, [r3, #0]
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e48:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007e52:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007e54:	69fb      	ldr	r3, [r7, #28]
 8007e56:	9300      	str	r3, [sp, #0]
 8007e58:	2319      	movs	r3, #25
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	490f      	ldr	r1, [pc, #60]	; (8007e9c <HAL_I2C_IsDeviceReady+0x254>)
 8007e5e:	68f8      	ldr	r0, [r7, #12]
 8007e60:	f003 f986 	bl	800b170 <I2C_WaitOnFlagUntilTimeout>
 8007e64:	4603      	mov	r3, r0
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d001      	beq.n	8007e6e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	e012      	b.n	8007e94 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8007e6e:	69bb      	ldr	r3, [r7, #24]
 8007e70:	3301      	adds	r3, #1
 8007e72:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8007e74:	69ba      	ldr	r2, [r7, #24]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	f4ff af32 	bcc.w	8007ce2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2220      	movs	r2, #32
 8007e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007e8e:	2301      	movs	r3, #1
 8007e90:	e000      	b.n	8007e94 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8007e92:	2302      	movs	r3, #2
  }
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3720      	adds	r7, #32
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}
 8007e9c:	00100002 	.word	0x00100002
 8007ea0:	ffff0000 	.word	0xffff0000

08007ea4 <HAL_I2C_Master_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b087      	sub	sp, #28
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	60f8      	str	r0, [r7, #12]
 8007eac:	607a      	str	r2, [r7, #4]
 8007eae:	461a      	mov	r2, r3
 8007eb0:	460b      	mov	r3, r1
 8007eb2:	817b      	strh	r3, [r7, #10]
 8007eb4:	4613      	mov	r3, r2
 8007eb6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	617b      	str	r3, [r7, #20]
  __IO uint32_t count      = 0x00U;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ec6:	b2db      	uxtb	r3, r3
 8007ec8:	2b20      	cmp	r3, #32
 8007eca:	f040 80a2 	bne.w	8008012 <HAL_I2C_Master_Seq_Transmit_IT+0x16e>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ed8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007edc:	d005      	beq.n	8007eea <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 8007ede:	6a3b      	ldr	r3, [r7, #32]
 8007ee0:	2b08      	cmp	r3, #8
 8007ee2:	d002      	beq.n	8007eea <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 8007ee4:	6a3b      	ldr	r3, [r7, #32]
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	d12c      	bne.n	8007f44 <HAL_I2C_Master_Seq_Transmit_IT+0xa0>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8007eea:	4b4d      	ldr	r3, [pc, #308]	; (8008020 <HAL_I2C_Master_Seq_Transmit_IT+0x17c>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	08db      	lsrs	r3, r3, #3
 8007ef0:	4a4c      	ldr	r2, [pc, #304]	; (8008024 <HAL_I2C_Master_Seq_Transmit_IT+0x180>)
 8007ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ef6:	0a1a      	lsrs	r2, r3, #8
 8007ef8:	4613      	mov	r3, r2
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	4413      	add	r3, r2
 8007efe:	009a      	lsls	r2, r3, #2
 8007f00:	4413      	add	r3, r2
 8007f02:	613b      	str	r3, [r7, #16]
      do
      {
        count--;
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	3b01      	subs	r3, #1
 8007f08:	613b      	str	r3, [r7, #16]
        if (count == 0U)
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d112      	bne.n	8007f36 <HAL_I2C_Master_Seq_Transmit_IT+0x92>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	2200      	movs	r2, #0
 8007f14:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2220      	movs	r2, #32
 8007f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2200      	movs	r2, #0
 8007f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f2a:	f043 0220 	orr.w	r2, r3, #32
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_BUSY;
 8007f32:	2302      	movs	r3, #2
 8007f34:	e06e      	b.n	8008014 <HAL_I2C_Master_Seq_Transmit_IT+0x170>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	699b      	ldr	r3, [r3, #24]
 8007f3c:	f003 0302 	and.w	r3, r3, #2
 8007f40:	2b02      	cmp	r3, #2
 8007f42:	d0df      	beq.n	8007f04 <HAL_I2C_Master_Seq_Transmit_IT+0x60>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	d101      	bne.n	8007f52 <HAL_I2C_Master_Seq_Transmit_IT+0xae>
 8007f4e:	2302      	movs	r3, #2
 8007f50:	e060      	b.n	8008014 <HAL_I2C_Master_Seq_Transmit_IT+0x170>
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2201      	movs	r2, #1
 8007f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f003 0301 	and.w	r3, r3, #1
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d007      	beq.n	8007f78 <HAL_I2C_Master_Seq_Transmit_IT+0xd4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f042 0201 	orr.w	r2, r2, #1
 8007f76:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f86:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2221      	movs	r2, #33	; 0x21
 8007f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2210      	movs	r2, #16
 8007f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	893a      	ldrh	r2, [r7, #8]
 8007fa8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fae:	b29a      	uxth	r2, r3
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	6a3a      	ldr	r2, [r7, #32]
 8007fb8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8007fba:	897a      	ldrh	r2, [r7, #10]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fc4:	617b      	str	r3, [r7, #20]

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	2b11      	cmp	r3, #17
 8007fca:	d10c      	bne.n	8007fe6 <HAL_I2C_Master_Seq_Transmit_IT+0x142>
 8007fcc:	6a3b      	ldr	r3, [r7, #32]
 8007fce:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007fd2:	d003      	beq.n	8007fdc <HAL_I2C_Master_Seq_Transmit_IT+0x138>
 8007fd4:	6a3b      	ldr	r3, [r7, #32]
 8007fd6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007fda:	d101      	bne.n	8007fe0 <HAL_I2C_Master_Seq_Transmit_IT+0x13c>
 8007fdc:	2301      	movs	r3, #1
 8007fde:	e000      	b.n	8007fe2 <HAL_I2C_Master_Seq_Transmit_IT+0x13e>
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d107      	bne.n	8007ff6 <HAL_I2C_Master_Seq_Transmit_IT+0x152>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	681a      	ldr	r2, [r3, #0]
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ff4:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	685a      	ldr	r2, [r3, #4]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800800c:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800800e:	2300      	movs	r3, #0
 8008010:	e000      	b.n	8008014 <HAL_I2C_Master_Seq_Transmit_IT+0x170>
  }
  else
  {
    return HAL_BUSY;
 8008012:	2302      	movs	r3, #2
  }
}
 8008014:	4618      	mov	r0, r3
 8008016:	371c      	adds	r7, #28
 8008018:	46bd      	mov	sp, r7
 800801a:	bc80      	pop	{r7}
 800801c:	4770      	bx	lr
 800801e:	bf00      	nop
 8008020:	2000006c 	.word	0x2000006c
 8008024:	14f8b589 	.word	0x14f8b589

08008028 <HAL_I2C_Master_Seq_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b088      	sub	sp, #32
 800802c:	af00      	add	r7, sp, #0
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	607a      	str	r2, [r7, #4]
 8008032:	461a      	mov	r2, r3
 8008034:	460b      	mov	r3, r1
 8008036:	817b      	strh	r3, [r7, #10]
 8008038:	4613      	mov	r3, r2
 800803a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 800803c:	2300      	movs	r3, #0
 800803e:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count      = 0x00U;
 8008040:	2300      	movs	r3, #0
 8008042:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800804a:	b2db      	uxtb	r3, r3
 800804c:	2b20      	cmp	r3, #32
 800804e:	f040 813c 	bne.w	80082ca <HAL_I2C_Master_Seq_Transmit_DMA+0x2a2>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800805c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008060:	d005      	beq.n	800806e <HAL_I2C_Master_Seq_Transmit_DMA+0x46>
 8008062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008064:	2b08      	cmp	r3, #8
 8008066:	d002      	beq.n	800806e <HAL_I2C_Master_Seq_Transmit_DMA+0x46>
 8008068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800806a:	2b01      	cmp	r3, #1
 800806c:	d12c      	bne.n	80080c8 <HAL_I2C_Master_Seq_Transmit_DMA+0xa0>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800806e:	4b99      	ldr	r3, [pc, #612]	; (80082d4 <HAL_I2C_Master_Seq_Transmit_DMA+0x2ac>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	08db      	lsrs	r3, r3, #3
 8008074:	4a98      	ldr	r2, [pc, #608]	; (80082d8 <HAL_I2C_Master_Seq_Transmit_DMA+0x2b0>)
 8008076:	fba2 2303 	umull	r2, r3, r2, r3
 800807a:	0a1a      	lsrs	r2, r3, #8
 800807c:	4613      	mov	r3, r2
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	4413      	add	r3, r2
 8008082:	009a      	lsls	r2, r3, #2
 8008084:	4413      	add	r3, r2
 8008086:	617b      	str	r3, [r7, #20]
      do
      {
        count--;
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	3b01      	subs	r3, #1
 800808c:	617b      	str	r3, [r7, #20]
        if (count == 0U)
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d112      	bne.n	80080ba <HAL_I2C_Master_Seq_Transmit_DMA+0x92>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2200      	movs	r2, #0
 8008098:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2220      	movs	r2, #32
 800809e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2200      	movs	r2, #0
 80080a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ae:	f043 0220 	orr.w	r2, r3, #32
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_BUSY;
 80080b6:	2302      	movs	r3, #2
 80080b8:	e108      	b.n	80082cc <HAL_I2C_Master_Seq_Transmit_DMA+0x2a4>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	699b      	ldr	r3, [r3, #24]
 80080c0:	f003 0302 	and.w	r3, r3, #2
 80080c4:	2b02      	cmp	r3, #2
 80080c6:	d0df      	beq.n	8008088 <HAL_I2C_Master_Seq_Transmit_DMA+0x60>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	d101      	bne.n	80080d6 <HAL_I2C_Master_Seq_Transmit_DMA+0xae>
 80080d2:	2302      	movs	r3, #2
 80080d4:	e0fa      	b.n	80082cc <HAL_I2C_Master_Seq_Transmit_DMA+0x2a4>
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2201      	movs	r2, #1
 80080da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f003 0301 	and.w	r3, r3, #1
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	d007      	beq.n	80080fc <HAL_I2C_Master_Seq_Transmit_DMA+0xd4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	681a      	ldr	r2, [r3, #0]
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f042 0201 	orr.w	r2, r2, #1
 80080fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	681a      	ldr	r2, [r3, #0]
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800810a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2221      	movs	r2, #33	; 0x21
 8008110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2210      	movs	r2, #16
 8008118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2200      	movs	r2, #0
 8008120:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	687a      	ldr	r2, [r7, #4]
 8008126:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	893a      	ldrh	r2, [r7, #8]
 800812c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008132:	b29a      	uxth	r2, r3
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800813c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800813e:	897a      	ldrh	r2, [r7, #10]
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008148:	61bb      	str	r3, [r7, #24]

    if (hi2c->XferSize > 0U)
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800814e:	2b00      	cmp	r3, #0
 8008150:	f000 808d 	beq.w	800826e <HAL_I2C_Master_Seq_Transmit_DMA+0x246>
    {
      if (hi2c->hdmatx != NULL)
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008158:	2b00      	cmp	r3, #0
 800815a:	d022      	beq.n	80081a2 <HAL_I2C_Master_Seq_Transmit_DMA+0x17a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008160:	4a5e      	ldr	r2, [pc, #376]	; (80082dc <HAL_I2C_Master_Seq_Transmit_DMA+0x2b4>)
 8008162:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008168:	4a5d      	ldr	r2, [pc, #372]	; (80082e0 <HAL_I2C_Master_Seq_Transmit_DMA+0x2b8>)
 800816a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008170:	2200      	movs	r2, #0
 8008172:	62da      	str	r2, [r3, #44]	; 0x2c
        hi2c->hdmatx->XferAbortCallback = NULL;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008178:	2200      	movs	r2, #0
 800817a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008184:	4619      	mov	r1, r3
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	3310      	adds	r3, #16
 800818c:	461a      	mov	r2, r3
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008192:	f7fa ffb6 	bl	8003102 <HAL_DMA_Start_IT>
 8008196:	4603      	mov	r3, r0
 8008198:	77fb      	strb	r3, [r7, #31]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800819a:	7ffb      	ldrb	r3, [r7, #31]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d152      	bne.n	8008246 <HAL_I2C_Master_Seq_Transmit_DMA+0x21e>
 80081a0:	e013      	b.n	80081ca <HAL_I2C_Master_Seq_Transmit_DMA+0x1a2>
        hi2c->State     = HAL_I2C_STATE_READY;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2220      	movs	r2, #32
 80081a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2200      	movs	r2, #0
 80081ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2200      	movs	r2, #0
 80081c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 80081c6:	2301      	movs	r3, #1
 80081c8:	e080      	b.n	80082cc <HAL_I2C_Master_Seq_Transmit_DMA+0x2a4>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80081d8:	601a      	str	r2, [r3, #0]

        /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
        /* Mean Previous state is same as current state */
        if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 80081da:	69bb      	ldr	r3, [r7, #24]
 80081dc:	2b11      	cmp	r3, #17
 80081de:	d10c      	bne.n	80081fa <HAL_I2C_Master_Seq_Transmit_DMA+0x1d2>
 80081e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081e2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80081e6:	d003      	beq.n	80081f0 <HAL_I2C_Master_Seq_Transmit_DMA+0x1c8>
 80081e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ea:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80081ee:	d101      	bne.n	80081f4 <HAL_I2C_Master_Seq_Transmit_DMA+0x1cc>
 80081f0:	2301      	movs	r3, #1
 80081f2:	e000      	b.n	80081f6 <HAL_I2C_Master_Seq_Transmit_DMA+0x1ce>
 80081f4:	2300      	movs	r3, #0
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d107      	bne.n	800820a <HAL_I2C_Master_Seq_Transmit_DMA+0x1e2>
        {
          /* Generate Start */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	681a      	ldr	r2, [r3, #0]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008208:	601a      	str	r2, [r3, #0]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2200      	movs	r2, #0
 800820e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* If XferOptions is not associated to a new frame, mean no start bit is request, enable directly the DMA request */
        /* In other cases, DMA request is enabled after Slave address treatment in IRQHandler */
        if ((XferOptions == I2C_NEXT_FRAME) || (XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP))
 8008212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008214:	2b04      	cmp	r3, #4
 8008216:	d005      	beq.n	8008224 <HAL_I2C_Master_Seq_Transmit_DMA+0x1fc>
 8008218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800821a:	2b20      	cmp	r3, #32
 800821c:	d002      	beq.n	8008224 <HAL_I2C_Master_Seq_Transmit_DMA+0x1fc>
 800821e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008220:	2b10      	cmp	r3, #16
 8008222:	d107      	bne.n	8008234 <HAL_I2C_Master_Seq_Transmit_DMA+0x20c>
        {
          /* Enable DMA Request */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	685a      	ldr	r2, [r3, #4]
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008232:	605a      	str	r2, [r3, #4]
        }

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	685a      	ldr	r2, [r3, #4]
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8008242:	605a      	str	r2, [r3, #4]
 8008244:	e03f      	b.n	80082c6 <HAL_I2C_Master_Seq_Transmit_DMA+0x29e>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2220      	movs	r2, #32
 800824a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2200      	movs	r2, #0
 8008252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800825a:	f043 0210 	orr.w	r2, r3, #16
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2200      	movs	r2, #0
 8008266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800826a:	2301      	movs	r3, #1
 800826c:	e02e      	b.n	80082cc <HAL_I2C_Master_Seq_Transmit_DMA+0x2a4>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	681a      	ldr	r2, [r3, #0]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800827c:	601a      	str	r2, [r3, #0]

      /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
      /* Mean Previous state is same as current state */
      if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800827e:	69bb      	ldr	r3, [r7, #24]
 8008280:	2b11      	cmp	r3, #17
 8008282:	d10c      	bne.n	800829e <HAL_I2C_Master_Seq_Transmit_DMA+0x276>
 8008284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008286:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800828a:	d003      	beq.n	8008294 <HAL_I2C_Master_Seq_Transmit_DMA+0x26c>
 800828c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800828e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008292:	d101      	bne.n	8008298 <HAL_I2C_Master_Seq_Transmit_DMA+0x270>
 8008294:	2301      	movs	r3, #1
 8008296:	e000      	b.n	800829a <HAL_I2C_Master_Seq_Transmit_DMA+0x272>
 8008298:	2300      	movs	r3, #0
 800829a:	2b01      	cmp	r3, #1
 800829c:	d107      	bne.n	80082ae <HAL_I2C_Master_Seq_Transmit_DMA+0x286>
      {
        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80082ac:	601a      	str	r2, [r3, #0]
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2200      	movs	r2, #0
 80082b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	685a      	ldr	r2, [r3, #4]
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80082c4:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 80082c6:	2300      	movs	r3, #0
 80082c8:	e000      	b.n	80082cc <HAL_I2C_Master_Seq_Transmit_DMA+0x2a4>
  }
  else
  {
    return HAL_BUSY;
 80082ca:	2302      	movs	r3, #2
  }
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3720      	adds	r7, #32
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}
 80082d4:	2000006c 	.word	0x2000006c
 80082d8:	14f8b589 	.word	0x14f8b589
 80082dc:	0800ae09 	.word	0x0800ae09
 80082e0:	0800afb3 	.word	0x0800afb3

080082e4 <HAL_I2C_Master_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b089      	sub	sp, #36	; 0x24
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	60f8      	str	r0, [r7, #12]
 80082ec:	607a      	str	r2, [r7, #4]
 80082ee:	461a      	mov	r2, r3
 80082f0:	460b      	mov	r3, r1
 80082f2:	817b      	strh	r3, [r7, #10]
 80082f4:	4613      	mov	r3, r2
 80082f6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 80082f8:	2300      	movs	r3, #0
 80082fa:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80082fc:	2300      	movs	r3, #0
 80082fe:	617b      	str	r3, [r7, #20]
  uint32_t enableIT = (I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008300:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8008304:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800830c:	b2db      	uxtb	r3, r3
 800830e:	2b20      	cmp	r3, #32
 8008310:	f040 80d6 	bne.w	80084c0 <HAL_I2C_Master_Seq_Receive_IT+0x1dc>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800831e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008322:	d005      	beq.n	8008330 <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 8008324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008326:	2b08      	cmp	r3, #8
 8008328:	d002      	beq.n	8008330 <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 800832a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800832c:	2b01      	cmp	r3, #1
 800832e:	d12c      	bne.n	800838a <HAL_I2C_Master_Seq_Receive_IT+0xa6>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8008330:	4b66      	ldr	r3, [pc, #408]	; (80084cc <HAL_I2C_Master_Seq_Receive_IT+0x1e8>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	08db      	lsrs	r3, r3, #3
 8008336:	4a66      	ldr	r2, [pc, #408]	; (80084d0 <HAL_I2C_Master_Seq_Receive_IT+0x1ec>)
 8008338:	fba2 2303 	umull	r2, r3, r2, r3
 800833c:	0a1a      	lsrs	r2, r3, #8
 800833e:	4613      	mov	r3, r2
 8008340:	009b      	lsls	r3, r3, #2
 8008342:	4413      	add	r3, r2
 8008344:	009a      	lsls	r2, r3, #2
 8008346:	4413      	add	r3, r2
 8008348:	617b      	str	r3, [r7, #20]
      do
      {
        count--;
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	3b01      	subs	r3, #1
 800834e:	617b      	str	r3, [r7, #20]
        if (count == 0U)
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d112      	bne.n	800837c <HAL_I2C_Master_Seq_Receive_IT+0x98>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2200      	movs	r2, #0
 800835a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2220      	movs	r2, #32
 8008360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2200      	movs	r2, #0
 8008368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008370:	f043 0220 	orr.w	r2, r3, #32
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_BUSY;
 8008378:	2302      	movs	r3, #2
 800837a:	e0a2      	b.n	80084c2 <HAL_I2C_Master_Seq_Receive_IT+0x1de>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	699b      	ldr	r3, [r3, #24]
 8008382:	f003 0302 	and.w	r3, r3, #2
 8008386:	2b02      	cmp	r3, #2
 8008388:	d0df      	beq.n	800834a <HAL_I2C_Master_Seq_Receive_IT+0x66>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008390:	2b01      	cmp	r3, #1
 8008392:	d101      	bne.n	8008398 <HAL_I2C_Master_Seq_Receive_IT+0xb4>
 8008394:	2302      	movs	r3, #2
 8008396:	e094      	b.n	80084c2 <HAL_I2C_Master_Seq_Receive_IT+0x1de>
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2201      	movs	r2, #1
 800839c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f003 0301 	and.w	r3, r3, #1
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	d007      	beq.n	80083be <HAL_I2C_Master_Seq_Receive_IT+0xda>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	681a      	ldr	r2, [r3, #0]
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f042 0201 	orr.w	r2, r2, #1
 80083bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80083cc:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2222      	movs	r2, #34	; 0x22
 80083d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2210      	movs	r2, #16
 80083da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2200      	movs	r2, #0
 80083e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	687a      	ldr	r2, [r7, #4]
 80083e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	893a      	ldrh	r2, [r7, #8]
 80083ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083f4:	b29a      	uxth	r2, r3
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083fe:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8008400:	897a      	ldrh	r2, [r7, #10]
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800840a:	61bb      	str	r3, [r7, #24]

    if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008410:	b29b      	uxth	r3, r3
 8008412:	2b02      	cmp	r3, #2
 8008414:	d126      	bne.n	8008464 <HAL_I2C_Master_Seq_Receive_IT+0x180>
 8008416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008418:	2b20      	cmp	r3, #32
 800841a:	d002      	beq.n	8008422 <HAL_I2C_Master_Seq_Receive_IT+0x13e>
 800841c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800841e:	2b10      	cmp	r3, #16
 8008420:	d120      	bne.n	8008464 <HAL_I2C_Master_Seq_Receive_IT+0x180>
    {
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8008422:	69bb      	ldr	r3, [r7, #24]
 8008424:	2b12      	cmp	r3, #18
 8008426:	d114      	bne.n	8008452 <HAL_I2C_Master_Seq_Receive_IT+0x16e>
      {
        /* Disable Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	681a      	ldr	r2, [r3, #0]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008436:	601a      	str	r2, [r3, #0]

        /* Enable Pos */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008446:	601a      	str	r2, [r3, #0]

        /* Remove Enabling of IT_BUF, mean RXNE treatment, treat the 2 bytes through BTF */
        enableIT &= ~I2C_IT_BUF;
 8008448:	69fb      	ldr	r3, [r7, #28]
 800844a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800844e:	61fb      	str	r3, [r7, #28]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8008450:	e010      	b.n	8008474 <HAL_I2C_Master_Seq_Receive_IT+0x190>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008460:	601a      	str	r2, [r3, #0]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8008462:	e007      	b.n	8008474 <HAL_I2C_Master_Seq_Receive_IT+0x190>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008472:	601a      	str	r2, [r3, #0]
    }

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 8008474:	69bb      	ldr	r3, [r7, #24]
 8008476:	2b12      	cmp	r3, #18
 8008478:	d10c      	bne.n	8008494 <HAL_I2C_Master_Seq_Receive_IT+0x1b0>
 800847a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800847c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008480:	d003      	beq.n	800848a <HAL_I2C_Master_Seq_Receive_IT+0x1a6>
 8008482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008484:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008488:	d101      	bne.n	800848e <HAL_I2C_Master_Seq_Receive_IT+0x1aa>
 800848a:	2301      	movs	r3, #1
 800848c:	e000      	b.n	8008490 <HAL_I2C_Master_Seq_Receive_IT+0x1ac>
 800848e:	2300      	movs	r3, #0
 8008490:	2b01      	cmp	r3, #1
 8008492:	d107      	bne.n	80084a4 <HAL_I2C_Master_Seq_Receive_IT+0x1c0>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	681a      	ldr	r2, [r3, #0]
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084a2:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2200      	movs	r2, #0
 80084a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable interrupts */
    __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	6859      	ldr	r1, [r3, #4]
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	69fa      	ldr	r2, [r7, #28]
 80084b8:	430a      	orrs	r2, r1
 80084ba:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80084bc:	2300      	movs	r3, #0
 80084be:	e000      	b.n	80084c2 <HAL_I2C_Master_Seq_Receive_IT+0x1de>
  }
  else
  {
    return HAL_BUSY;
 80084c0:	2302      	movs	r3, #2
  }
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3724      	adds	r7, #36	; 0x24
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bc80      	pop	{r7}
 80084ca:	4770      	bx	lr
 80084cc:	2000006c 	.word	0x2000006c
 80084d0:	14f8b589 	.word	0x14f8b589

080084d4 <HAL_I2C_Master_Seq_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b088      	sub	sp, #32
 80084d8:	af00      	add	r7, sp, #0
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	607a      	str	r2, [r7, #4]
 80084de:	461a      	mov	r2, r3
 80084e0:	460b      	mov	r3, r1
 80084e2:	817b      	strh	r3, [r7, #10]
 80084e4:	4613      	mov	r3, r2
 80084e6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 80084e8:	2300      	movs	r3, #0
 80084ea:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80084ec:	2300      	movs	r3, #0
 80084ee:	613b      	str	r3, [r7, #16]
  uint32_t enableIT = (I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80084f0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80084f4:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084fc:	b2db      	uxtb	r3, r3
 80084fe:	2b20      	cmp	r3, #32
 8008500:	f040 8195 	bne.w	800882e <HAL_I2C_Master_Seq_Receive_DMA+0x35a>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800850e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008512:	d005      	beq.n	8008520 <HAL_I2C_Master_Seq_Receive_DMA+0x4c>
 8008514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008516:	2b08      	cmp	r3, #8
 8008518:	d002      	beq.n	8008520 <HAL_I2C_Master_Seq_Receive_DMA+0x4c>
 800851a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800851c:	2b01      	cmp	r3, #1
 800851e:	d12c      	bne.n	800857a <HAL_I2C_Master_Seq_Receive_DMA+0xa6>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8008520:	4b8d      	ldr	r3, [pc, #564]	; (8008758 <HAL_I2C_Master_Seq_Receive_DMA+0x284>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	08db      	lsrs	r3, r3, #3
 8008526:	4a8d      	ldr	r2, [pc, #564]	; (800875c <HAL_I2C_Master_Seq_Receive_DMA+0x288>)
 8008528:	fba2 2303 	umull	r2, r3, r2, r3
 800852c:	0a1a      	lsrs	r2, r3, #8
 800852e:	4613      	mov	r3, r2
 8008530:	009b      	lsls	r3, r3, #2
 8008532:	4413      	add	r3, r2
 8008534:	009a      	lsls	r2, r3, #2
 8008536:	4413      	add	r3, r2
 8008538:	613b      	str	r3, [r7, #16]
      do
      {
        count--;
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	3b01      	subs	r3, #1
 800853e:	613b      	str	r3, [r7, #16]
        if (count == 0U)
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d112      	bne.n	800856c <HAL_I2C_Master_Seq_Receive_DMA+0x98>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	2200      	movs	r2, #0
 800854a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2220      	movs	r2, #32
 8008550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	2200      	movs	r2, #0
 8008558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008560:	f043 0220 	orr.w	r2, r3, #32
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_BUSY;
 8008568:	2302      	movs	r3, #2
 800856a:	e161      	b.n	8008830 <HAL_I2C_Master_Seq_Receive_DMA+0x35c>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	699b      	ldr	r3, [r3, #24]
 8008572:	f003 0302 	and.w	r3, r3, #2
 8008576:	2b02      	cmp	r3, #2
 8008578:	d0df      	beq.n	800853a <HAL_I2C_Master_Seq_Receive_DMA+0x66>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008580:	2b01      	cmp	r3, #1
 8008582:	d101      	bne.n	8008588 <HAL_I2C_Master_Seq_Receive_DMA+0xb4>
 8008584:	2302      	movs	r3, #2
 8008586:	e153      	b.n	8008830 <HAL_I2C_Master_Seq_Receive_DMA+0x35c>
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2201      	movs	r2, #1
 800858c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f003 0301 	and.w	r3, r3, #1
 800859a:	2b01      	cmp	r3, #1
 800859c:	d007      	beq.n	80085ae <HAL_I2C_Master_Seq_Receive_DMA+0xda>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	681a      	ldr	r2, [r3, #0]
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f042 0201 	orr.w	r2, r2, #1
 80085ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80085bc:	601a      	str	r2, [r3, #0]

    /* Clear Last DMA bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	685a      	ldr	r2, [r3, #4]
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80085cc:	605a      	str	r2, [r3, #4]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2222      	movs	r2, #34	; 0x22
 80085d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2210      	movs	r2, #16
 80085da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2200      	movs	r2, #0
 80085e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	687a      	ldr	r2, [r7, #4]
 80085e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	893a      	ldrh	r2, [r7, #8]
 80085ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085f4:	b29a      	uxth	r2, r3
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085fe:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8008600:	897a      	ldrh	r2, [r7, #10]
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800860a:	617b      	str	r3, [r7, #20]

    if (hi2c->XferSize > 0U)
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008610:	2b00      	cmp	r3, #0
 8008612:	f000 80de 	beq.w	80087d2 <HAL_I2C_Master_Seq_Receive_DMA+0x2fe>
    {
      if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800861a:	b29b      	uxth	r3, r3
 800861c:	2b02      	cmp	r3, #2
 800861e:	d12a      	bne.n	8008676 <HAL_I2C_Master_Seq_Receive_DMA+0x1a2>
 8008620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008622:	2b20      	cmp	r3, #32
 8008624:	d002      	beq.n	800862c <HAL_I2C_Master_Seq_Receive_DMA+0x158>
 8008626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008628:	2b10      	cmp	r3, #16
 800862a:	d124      	bne.n	8008676 <HAL_I2C_Master_Seq_Receive_DMA+0x1a2>
      {
        if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	2b12      	cmp	r3, #18
 8008630:	d118      	bne.n	8008664 <HAL_I2C_Master_Seq_Receive_DMA+0x190>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	681a      	ldr	r2, [r3, #0]
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008640:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	681a      	ldr	r2, [r3, #0]
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008650:	601a      	str	r2, [r3, #0]

          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	685a      	ldr	r2, [r3, #4]
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008660:	605a      	str	r2, [r3, #4]
        if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8008662:	e022      	b.n	80086aa <HAL_I2C_Master_Seq_Receive_DMA+0x1d6>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008672:	601a      	str	r2, [r3, #0]
        if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8008674:	e019      	b.n	80086aa <HAL_I2C_Master_Seq_Receive_DMA+0x1d6>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008684:	601a      	str	r2, [r3, #0]

        if ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_OTHER_AND_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP))
 8008686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008688:	2b20      	cmp	r3, #32
 800868a:	d006      	beq.n	800869a <HAL_I2C_Master_Seq_Receive_DMA+0x1c6>
 800868c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800868e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008692:	d002      	beq.n	800869a <HAL_I2C_Master_Seq_Receive_DMA+0x1c6>
 8008694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008696:	2b10      	cmp	r3, #16
 8008698:	d107      	bne.n	80086aa <HAL_I2C_Master_Seq_Receive_DMA+0x1d6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	685a      	ldr	r2, [r3, #4]
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80086a8:	605a      	str	r2, [r3, #4]
        }
      }
      if (hi2c->hdmarx != NULL)
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d022      	beq.n	80086f8 <HAL_I2C_Master_Seq_Receive_DMA+0x224>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086b6:	4a2a      	ldr	r2, [pc, #168]	; (8008760 <HAL_I2C_Master_Seq_Receive_DMA+0x28c>)
 80086b8:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086be:	4a29      	ldr	r2, [pc, #164]	; (8008764 <HAL_I2C_Master_Seq_Receive_DMA+0x290>)
 80086c0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086c6:	2200      	movs	r2, #0
 80086c8:	62da      	str	r2, [r3, #44]	; 0x2c
        hi2c->hdmarx->XferAbortCallback = NULL;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ce:	2200      	movs	r2, #0
 80086d0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	3310      	adds	r3, #16
 80086dc:	4619      	mov	r1, r3
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e2:	461a      	mov	r2, r3
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086e8:	f7fa fd0b 	bl	8003102 <HAL_DMA_Start_IT>
 80086ec:	4603      	mov	r3, r0
 80086ee:	76fb      	strb	r3, [r7, #27]
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }
      if (dmaxferstatus == HAL_OK)
 80086f0:	7efb      	ldrb	r3, [r7, #27]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d159      	bne.n	80087aa <HAL_I2C_Master_Seq_Receive_DMA+0x2d6>
 80086f6:	e013      	b.n	8008720 <HAL_I2C_Master_Seq_Receive_DMA+0x24c>
        hi2c->State     = HAL_I2C_STATE_READY;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2220      	movs	r2, #32
 80086fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2200      	movs	r2, #0
 8008704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800870c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2200      	movs	r2, #0
 8008718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800871c:	2301      	movs	r3, #1
 800871e:	e087      	b.n	8008830 <HAL_I2C_Master_Seq_Receive_DMA+0x35c>
      {
        /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
        /* Mean Previous state is same as current state */
        if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	2b12      	cmp	r3, #18
 8008724:	d10c      	bne.n	8008740 <HAL_I2C_Master_Seq_Receive_DMA+0x26c>
 8008726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008728:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800872c:	d003      	beq.n	8008736 <HAL_I2C_Master_Seq_Receive_DMA+0x262>
 800872e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008730:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008734:	d101      	bne.n	800873a <HAL_I2C_Master_Seq_Receive_DMA+0x266>
 8008736:	2301      	movs	r3, #1
 8008738:	e000      	b.n	800873c <HAL_I2C_Master_Seq_Receive_DMA+0x268>
 800873a:	2300      	movs	r3, #0
 800873c:	2b01      	cmp	r3, #1
 800873e:	d113      	bne.n	8008768 <HAL_I2C_Master_Seq_Receive_DMA+0x294>
        {
          /* Generate Start */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800874e:	601a      	str	r2, [r3, #0]

          /* Update interrupt for only EVT and ERR */
          enableIT = (I2C_IT_EVT | I2C_IT_ERR);
 8008750:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008754:	61fb      	str	r3, [r7, #28]
 8008756:	e00a      	b.n	800876e <HAL_I2C_Master_Seq_Receive_DMA+0x29a>
 8008758:	2000006c 	.word	0x2000006c
 800875c:	14f8b589 	.word	0x14f8b589
 8008760:	0800ae09 	.word	0x0800ae09
 8008764:	0800afb3 	.word	0x0800afb3
        }
        else
        {
          /* Update interrupt for only ERR */
          enableIT = I2C_IT_ERR;
 8008768:	f44f 7380 	mov.w	r3, #256	; 0x100
 800876c:	61fb      	str	r3, [r7, #28]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2200      	movs	r2, #0
 8008772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* If XferOptions is not associated to a new frame, mean no start bit is request, enable directly the DMA request */
        /* In other cases, DMA request is enabled after Slave address treatment in IRQHandler */
        if ((XferOptions == I2C_NEXT_FRAME) || (XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP))
 8008776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008778:	2b04      	cmp	r3, #4
 800877a:	d005      	beq.n	8008788 <HAL_I2C_Master_Seq_Receive_DMA+0x2b4>
 800877c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800877e:	2b20      	cmp	r3, #32
 8008780:	d002      	beq.n	8008788 <HAL_I2C_Master_Seq_Receive_DMA+0x2b4>
 8008782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008784:	2b10      	cmp	r3, #16
 8008786:	d107      	bne.n	8008798 <HAL_I2C_Master_Seq_Receive_DMA+0x2c4>
        {
          /* Enable DMA Request */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	685a      	ldr	r2, [r3, #4]
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008796:	605a      	str	r2, [r3, #4]
        }

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	6859      	ldr	r1, [r3, #4]
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	69fa      	ldr	r2, [r7, #28]
 80087a4:	430a      	orrs	r2, r1
 80087a6:	605a      	str	r2, [r3, #4]
 80087a8:	e03f      	b.n	800882a <HAL_I2C_Master_Seq_Receive_DMA+0x356>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2220      	movs	r2, #32
 80087ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2200      	movs	r2, #0
 80087b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087be:	f043 0210 	orr.w	r2, r3, #16
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2200      	movs	r2, #0
 80087ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80087ce:	2301      	movs	r3, #1
 80087d0:	e02e      	b.n	8008830 <HAL_I2C_Master_Seq_Receive_DMA+0x35c>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	681a      	ldr	r2, [r3, #0]
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80087e0:	601a      	str	r2, [r3, #0]

      /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
      /* Mean Previous state is same as current state */
      if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	2b12      	cmp	r3, #18
 80087e6:	d10c      	bne.n	8008802 <HAL_I2C_Master_Seq_Receive_DMA+0x32e>
 80087e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ea:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80087ee:	d003      	beq.n	80087f8 <HAL_I2C_Master_Seq_Receive_DMA+0x324>
 80087f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80087f6:	d101      	bne.n	80087fc <HAL_I2C_Master_Seq_Receive_DMA+0x328>
 80087f8:	2301      	movs	r3, #1
 80087fa:	e000      	b.n	80087fe <HAL_I2C_Master_Seq_Receive_DMA+0x32a>
 80087fc:	2300      	movs	r3, #0
 80087fe:	2b01      	cmp	r3, #1
 8008800:	d107      	bne.n	8008812 <HAL_I2C_Master_Seq_Receive_DMA+0x33e>
      {
        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	681a      	ldr	r2, [r3, #0]
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008810:	601a      	str	r2, [r3, #0]
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2200      	movs	r2, #0
 8008816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable interrupts */
      __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	6859      	ldr	r1, [r3, #4]
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	69fa      	ldr	r2, [r7, #28]
 8008826:	430a      	orrs	r2, r1
 8008828:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 800882a:	2300      	movs	r3, #0
 800882c:	e000      	b.n	8008830 <HAL_I2C_Master_Seq_Receive_DMA+0x35c>
  }
  else
  {
    return HAL_BUSY;
 800882e:	2302      	movs	r3, #2
  }
}
 8008830:	4618      	mov	r0, r3
 8008832:	3720      	adds	r7, #32
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}

08008838 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8008838:	b480      	push	{r7}
 800883a:	b087      	sub	sp, #28
 800883c:	af00      	add	r7, sp, #0
 800883e:	60f8      	str	r0, [r7, #12]
 8008840:	60b9      	str	r1, [r7, #8]
 8008842:	603b      	str	r3, [r7, #0]
 8008844:	4613      	mov	r3, r2
 8008846:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800884e:	b2db      	uxtb	r3, r3
 8008850:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008854:	2b28      	cmp	r3, #40	; 0x28
 8008856:	d15b      	bne.n	8008910 <HAL_I2C_Slave_Seq_Transmit_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d002      	beq.n	8008864 <HAL_I2C_Slave_Seq_Transmit_IT+0x2c>
 800885e:	88fb      	ldrh	r3, [r7, #6]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d101      	bne.n	8008868 <HAL_I2C_Slave_Seq_Transmit_IT+0x30>
    {
      return  HAL_ERROR;
 8008864:	2301      	movs	r3, #1
 8008866:	e054      	b.n	8008912 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800886e:	2b01      	cmp	r3, #1
 8008870:	d101      	bne.n	8008876 <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
 8008872:	2302      	movs	r3, #2
 8008874:	e04d      	b.n	8008912 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2201      	movs	r2, #1
 800887a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f003 0301 	and.w	r3, r3, #1
 8008888:	2b01      	cmp	r3, #1
 800888a:	d007      	beq.n	800889c <HAL_I2C_Slave_Seq_Transmit_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	681a      	ldr	r2, [r3, #0]
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f042 0201 	orr.w	r2, r2, #1
 800889a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	681a      	ldr	r2, [r3, #0]
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80088aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2229      	movs	r2, #41	; 0x29
 80088b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2220      	movs	r2, #32
 80088b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2200      	movs	r2, #0
 80088c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	68ba      	ldr	r2, [r7, #8]
 80088c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	88fa      	ldrh	r2, [r7, #6]
 80088cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088d2:	b29a      	uxth	r2, r3
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	683a      	ldr	r2, [r7, #0]
 80088dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80088de:	2300      	movs	r3, #0
 80088e0:	617b      	str	r3, [r7, #20]
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	695b      	ldr	r3, [r3, #20]
 80088e8:	617b      	str	r3, [r7, #20]
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	699b      	ldr	r3, [r3, #24]
 80088f0:	617b      	str	r3, [r7, #20]
 80088f2:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2200      	movs	r2, #0
 80088f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	685a      	ldr	r2, [r3, #4]
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800890a:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800890c:	2300      	movs	r3, #0
 800890e:	e000      	b.n	8008912 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8008910:	2302      	movs	r3, #2
  }
}
 8008912:	4618      	mov	r0, r3
 8008914:	371c      	adds	r7, #28
 8008916:	46bd      	mov	sp, r7
 8008918:	bc80      	pop	{r7}
 800891a:	4770      	bx	lr

0800891c <HAL_I2C_Slave_Seq_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b086      	sub	sp, #24
 8008920:	af00      	add	r7, sp, #0
 8008922:	60f8      	str	r0, [r7, #12]
 8008924:	60b9      	str	r1, [r7, #8]
 8008926:	603b      	str	r3, [r7, #0]
 8008928:	4613      	mov	r3, r2
 800892a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008932:	b2db      	uxtb	r3, r3
 8008934:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008938:	2b28      	cmp	r3, #40	; 0x28
 800893a:	f040 811e 	bne.w	8008b7a <HAL_I2C_Slave_Seq_Transmit_DMA+0x25e>
  {
    if ((pData == NULL) || (Size == 0U))
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d002      	beq.n	800894a <HAL_I2C_Slave_Seq_Transmit_DMA+0x2e>
 8008944:	88fb      	ldrh	r3, [r7, #6]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d101      	bne.n	800894e <HAL_I2C_Slave_Seq_Transmit_DMA+0x32>
    {
      return  HAL_ERROR;
 800894a:	2301      	movs	r3, #1
 800894c:	e116      	b.n	8008b7c <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008954:	2b01      	cmp	r3, #1
 8008956:	d101      	bne.n	800895c <HAL_I2C_Slave_Seq_Transmit_DMA+0x40>
 8008958:	2302      	movs	r3, #2
 800895a:	e10f      	b.n	8008b7c <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2201      	movs	r2, #1
 8008960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	685a      	ldr	r2, [r3, #4]
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008972:	605a      	str	r2, [r3, #4]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800897a:	b2db      	uxtb	r3, r3
 800897c:	2b2a      	cmp	r3, #42	; 0x2a
 800897e:	d127      	bne.n	80089d0 <HAL_I2C_Slave_Seq_Transmit_DMA+0xb4>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	685b      	ldr	r3, [r3, #4]
 8008986:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800898a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800898e:	d14c      	bne.n	8008a2a <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
      {
        /* Abort DMA Xfer if any */
        if (hi2c->hdmarx != NULL)
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008994:	2b00      	cmp	r3, #0
 8008996:	d048      	beq.n	8008a2a <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
        {
          CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	685a      	ldr	r2, [r3, #4]
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80089a6:	605a      	str	r2, [r3, #4]

          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ac:	4a75      	ldr	r2, [pc, #468]	; (8008b84 <HAL_I2C_Slave_Seq_Transmit_DMA+0x268>)
 80089ae:	635a      	str	r2, [r3, #52]	; 0x34

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089b4:	4618      	mov	r0, r3
 80089b6:	f7fa fc41 	bl	800323c <HAL_DMA_Abort_IT>
 80089ba:	4603      	mov	r3, r0
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d034      	beq.n	8008a2a <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089c6:	68fa      	ldr	r2, [r7, #12]
 80089c8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80089ca:	4610      	mov	r0, r2
 80089cc:	4798      	blx	r3
 80089ce:	e02c      	b.n	8008a2a <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
          }
        }
      }
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	2b29      	cmp	r3, #41	; 0x29
 80089da:	d126      	bne.n	8008a2a <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089ea:	d11e      	bne.n	8008a2a <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
      {
        CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	685a      	ldr	r2, [r3, #4]
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80089fa:	605a      	str	r2, [r3, #4]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d012      	beq.n	8008a2a <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a08:	4a5e      	ldr	r2, [pc, #376]	; (8008b84 <HAL_I2C_Slave_Seq_Transmit_DMA+0x268>)
 8008a0a:	635a      	str	r2, [r3, #52]	; 0x34

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a10:	4618      	mov	r0, r3
 8008a12:	f7fa fc13 	bl	800323c <HAL_DMA_Abort_IT>
 8008a16:	4603      	mov	r3, r0
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d006      	beq.n	8008a2a <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a22:	68fa      	ldr	r2, [r7, #12]
 8008a24:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008a26:	4610      	mov	r0, r2
 8008a28:	4798      	blx	r3
    {
      /* Nothing to do */
    }

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f003 0301 	and.w	r3, r3, #1
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	d007      	beq.n	8008a48 <HAL_I2C_Slave_Seq_Transmit_DMA+0x12c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	681a      	ldr	r2, [r3, #0]
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f042 0201 	orr.w	r2, r2, #1
 8008a46:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	681a      	ldr	r2, [r3, #0]
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008a56:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2229      	movs	r2, #41	; 0x29
 8008a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2220      	movs	r2, #32
 8008a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	68ba      	ldr	r2, [r7, #8]
 8008a72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	88fa      	ldrh	r2, [r7, #6]
 8008a78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a7e:	b29a      	uxth	r2, r3
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	683a      	ldr	r2, [r7, #0]
 8008a88:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmatx != NULL)
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d022      	beq.n	8008ad8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x1bc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a96:	4a3c      	ldr	r2, [pc, #240]	; (8008b88 <HAL_I2C_Slave_Seq_Transmit_DMA+0x26c>)
 8008a98:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a9e:	4a3b      	ldr	r2, [pc, #236]	; (8008b8c <HAL_I2C_Slave_Seq_Transmit_DMA+0x270>)
 8008aa0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->hdmatx->XferAbortCallback = NULL;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aae:	2200      	movs	r2, #0
 8008ab0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aba:	4619      	mov	r1, r3
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	3310      	adds	r3, #16
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ac8:	f7fa fb1b 	bl	8003102 <HAL_DMA_Start_IT>
 8008acc:	4603      	mov	r3, r0
 8008ace:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8008ad0:	7dfb      	ldrb	r3, [r7, #23]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d13d      	bne.n	8008b52 <HAL_I2C_Slave_Seq_Transmit_DMA+0x236>
 8008ad6:	e013      	b.n	8008b00 <HAL_I2C_Slave_Seq_Transmit_DMA+0x1e4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2228      	movs	r2, #40	; 0x28
 8008adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2200      	movs	r2, #0
 8008af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8008afc:	2301      	movs	r3, #1
 8008afe:	e03d      	b.n	8008b7c <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	681a      	ldr	r2, [r3, #0]
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008b0e:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b10:	2300      	movs	r3, #0
 8008b12:	613b      	str	r3, [r7, #16]
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	695b      	ldr	r3, [r3, #20]
 8008b1a:	613b      	str	r3, [r7, #16]
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	699b      	ldr	r3, [r3, #24]
 8008b22:	613b      	str	r3, [r7, #16]
 8008b24:	693b      	ldr	r3, [r7, #16]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	685a      	ldr	r2, [r3, #4]
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8008b3c:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	685a      	ldr	r2, [r3, #4]
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b4c:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	e014      	b.n	8008b7c <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2220      	movs	r2, #32
 8008b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b66:	f043 0210 	orr.w	r2, r3, #16
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2200      	movs	r2, #0
 8008b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008b76:	2301      	movs	r3, #1
 8008b78:	e000      	b.n	8008b7c <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    }
  }
  else
  {
    return HAL_BUSY;
 8008b7a:	2302      	movs	r3, #2
  }
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3718      	adds	r7, #24
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}
 8008b84:	0800b021 	.word	0x0800b021
 8008b88:	0800ae09 	.word	0x0800ae09
 8008b8c:	0800afb3 	.word	0x0800afb3

08008b90 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b087      	sub	sp, #28
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	60f8      	str	r0, [r7, #12]
 8008b98:	60b9      	str	r1, [r7, #8]
 8008b9a:	603b      	str	r3, [r7, #0]
 8008b9c:	4613      	mov	r3, r2
 8008b9e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ba6:	b2db      	uxtb	r3, r3
 8008ba8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008bac:	2b28      	cmp	r3, #40	; 0x28
 8008bae:	d15b      	bne.n	8008c68 <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d002      	beq.n	8008bbc <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 8008bb6:	88fb      	ldrh	r3, [r7, #6]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d101      	bne.n	8008bc0 <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	e054      	b.n	8008c6a <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bc6:	2b01      	cmp	r3, #1
 8008bc8:	d101      	bne.n	8008bce <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 8008bca:	2302      	movs	r3, #2
 8008bcc:	e04d      	b.n	8008c6a <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2201      	movs	r2, #1
 8008bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f003 0301 	and.w	r3, r3, #1
 8008be0:	2b01      	cmp	r3, #1
 8008be2:	d007      	beq.n	8008bf4 <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	681a      	ldr	r2, [r3, #0]
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f042 0201 	orr.w	r2, r2, #1
 8008bf2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	681a      	ldr	r2, [r3, #0]
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008c02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	222a      	movs	r2, #42	; 0x2a
 8008c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2220      	movs	r2, #32
 8008c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2200      	movs	r2, #0
 8008c18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	68ba      	ldr	r2, [r7, #8]
 8008c1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	88fa      	ldrh	r2, [r7, #6]
 8008c24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c2a:	b29a      	uxth	r2, r3
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	683a      	ldr	r2, [r7, #0]
 8008c34:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c36:	2300      	movs	r3, #0
 8008c38:	617b      	str	r3, [r7, #20]
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	695b      	ldr	r3, [r3, #20]
 8008c40:	617b      	str	r3, [r7, #20]
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	699b      	ldr	r3, [r3, #24]
 8008c48:	617b      	str	r3, [r7, #20]
 8008c4a:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	685a      	ldr	r2, [r3, #4]
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8008c62:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8008c64:	2300      	movs	r3, #0
 8008c66:	e000      	b.n	8008c6a <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8008c68:	2302      	movs	r3, #2
  }
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	371c      	adds	r7, #28
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bc80      	pop	{r7}
 8008c72:	4770      	bx	lr

08008c74 <HAL_I2C_Slave_Seq_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b086      	sub	sp, #24
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	60f8      	str	r0, [r7, #12]
 8008c7c:	60b9      	str	r1, [r7, #8]
 8008c7e:	603b      	str	r3, [r7, #0]
 8008c80:	4613      	mov	r3, r2
 8008c82:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c8a:	b2db      	uxtb	r3, r3
 8008c8c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008c90:	2b28      	cmp	r3, #40	; 0x28
 8008c92:	f040 811e 	bne.w	8008ed2 <HAL_I2C_Slave_Seq_Receive_DMA+0x25e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d002      	beq.n	8008ca2 <HAL_I2C_Slave_Seq_Receive_DMA+0x2e>
 8008c9c:	88fb      	ldrh	r3, [r7, #6]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d101      	bne.n	8008ca6 <HAL_I2C_Slave_Seq_Receive_DMA+0x32>
    {
      return  HAL_ERROR;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	e116      	b.n	8008ed4 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	d101      	bne.n	8008cb4 <HAL_I2C_Slave_Seq_Receive_DMA+0x40>
 8008cb0:	2302      	movs	r3, #2
 8008cb2:	e10f      	b.n	8008ed4 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	685a      	ldr	r2, [r3, #4]
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008cca:	605a      	str	r2, [r3, #4]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cd2:	b2db      	uxtb	r3, r3
 8008cd4:	2b2a      	cmp	r3, #42	; 0x2a
 8008cd6:	d127      	bne.n	8008d28 <HAL_I2C_Slave_Seq_Receive_DMA+0xb4>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ce2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ce6:	d14c      	bne.n	8008d82 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
      {
        /* Abort DMA Xfer if any */
        if (hi2c->hdmarx != NULL)
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d048      	beq.n	8008d82 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
        {
          CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	685a      	ldr	r2, [r3, #4]
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008cfe:	605a      	str	r2, [r3, #4]

          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d04:	4a75      	ldr	r2, [pc, #468]	; (8008edc <HAL_I2C_Slave_Seq_Receive_DMA+0x268>)
 8008d06:	635a      	str	r2, [r3, #52]	; 0x34

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f7fa fa95 	bl	800323c <HAL_DMA_Abort_IT>
 8008d12:	4603      	mov	r3, r0
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d034      	beq.n	8008d82 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d1e:	68fa      	ldr	r2, [r7, #12]
 8008d20:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008d22:	4610      	mov	r0, r2
 8008d24:	4798      	blx	r3
 8008d26:	e02c      	b.n	8008d82 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          }
        }
      }
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d2e:	b2db      	uxtb	r3, r3
 8008d30:	2b29      	cmp	r3, #41	; 0x29
 8008d32:	d126      	bne.n	8008d82 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d42:	d11e      	bne.n	8008d82 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
      {
        CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	685a      	ldr	r2, [r3, #4]
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008d52:	605a      	str	r2, [r3, #4]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d012      	beq.n	8008d82 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d60:	4a5e      	ldr	r2, [pc, #376]	; (8008edc <HAL_I2C_Slave_Seq_Receive_DMA+0x268>)
 8008d62:	635a      	str	r2, [r3, #52]	; 0x34

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f7fa fa67 	bl	800323c <HAL_DMA_Abort_IT>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d006      	beq.n	8008d82 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d7a:	68fa      	ldr	r2, [r7, #12]
 8008d7c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008d7e:	4610      	mov	r0, r2
 8008d80:	4798      	blx	r3
    {
      /* Nothing to do */
    }

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f003 0301 	and.w	r3, r3, #1
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d007      	beq.n	8008da0 <HAL_I2C_Slave_Seq_Receive_DMA+0x12c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	681a      	ldr	r2, [r3, #0]
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f042 0201 	orr.w	r2, r2, #1
 8008d9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	681a      	ldr	r2, [r3, #0]
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008dae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	222a      	movs	r2, #42	; 0x2a
 8008db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	2220      	movs	r2, #32
 8008dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	68ba      	ldr	r2, [r7, #8]
 8008dca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	88fa      	ldrh	r2, [r7, #6]
 8008dd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dd6:	b29a      	uxth	r2, r3
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	683a      	ldr	r2, [r7, #0]
 8008de0:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmarx != NULL)
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d022      	beq.n	8008e30 <HAL_I2C_Slave_Seq_Receive_DMA+0x1bc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dee:	4a3c      	ldr	r2, [pc, #240]	; (8008ee0 <HAL_I2C_Slave_Seq_Receive_DMA+0x26c>)
 8008df0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008df6:	4a3b      	ldr	r2, [pc, #236]	; (8008ee4 <HAL_I2C_Slave_Seq_Receive_DMA+0x270>)
 8008df8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dfe:	2200      	movs	r2, #0
 8008e00:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->hdmarx->XferAbortCallback = NULL;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e06:	2200      	movs	r2, #0
 8008e08:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	3310      	adds	r3, #16
 8008e14:	4619      	mov	r1, r3
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e20:	f7fa f96f 	bl	8003102 <HAL_DMA_Start_IT>
 8008e24:	4603      	mov	r3, r0
 8008e26:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8008e28:	7dfb      	ldrb	r3, [r7, #23]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d13d      	bne.n	8008eaa <HAL_I2C_Slave_Seq_Receive_DMA+0x236>
 8008e2e:	e013      	b.n	8008e58 <HAL_I2C_Slave_Seq_Receive_DMA+0x1e4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	2228      	movs	r2, #40	; 0x28
 8008e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e44:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8008e54:	2301      	movs	r3, #1
 8008e56:	e03d      	b.n	8008ed4 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	681a      	ldr	r2, [r3, #0]
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008e66:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e68:	2300      	movs	r3, #0
 8008e6a:	613b      	str	r3, [r7, #16]
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	695b      	ldr	r3, [r3, #20]
 8008e72:	613b      	str	r3, [r7, #16]
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	699b      	ldr	r3, [r3, #24]
 8008e7a:	613b      	str	r3, [r7, #16]
 8008e7c:	693b      	ldr	r3, [r7, #16]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2200      	movs	r2, #0
 8008e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	685a      	ldr	r2, [r3, #4]
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e94:	605a      	str	r2, [r3, #4]

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	685a      	ldr	r2, [r3, #4]
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8008ea4:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	e014      	b.n	8008ed4 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	2220      	movs	r2, #32
 8008eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ebe:	f043 0210 	orr.w	r2, r3, #16
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	e000      	b.n	8008ed4 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }
  }
  else
  {
    return HAL_BUSY;
 8008ed2:	2302      	movs	r3, #2
  }
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3718      	adds	r7, #24
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}
 8008edc:	0800b021 	.word	0x0800b021
 8008ee0:	0800ae09 	.word	0x0800ae09
 8008ee4:	0800afb3 	.word	0x0800afb3

08008ee8 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b083      	sub	sp, #12
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ef6:	b2db      	uxtb	r3, r3
 8008ef8:	2b20      	cmp	r3, #32
 8008efa:	d124      	bne.n	8008f46 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2228      	movs	r2, #40	; 0x28
 8008f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f003 0301 	and.w	r3, r3, #1
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	d007      	beq.n	8008f22 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	681a      	ldr	r2, [r3, #0]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f042 0201 	orr.w	r2, r2, #1
 8008f20:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	681a      	ldr	r2, [r3, #0]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008f30:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	685a      	ldr	r2, [r3, #4]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8008f40:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8008f42:	2300      	movs	r3, #0
 8008f44:	e000      	b.n	8008f48 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8008f46:	2302      	movs	r3, #2
  }
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	370c      	adds	r7, #12
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bc80      	pop	{r7}
 8008f50:	4770      	bx	lr

08008f52 <HAL_I2C_DisableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DisableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8008f52:	b480      	push	{r7}
 8008f54:	b085      	sub	sp, #20
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp;

  /* Disable Address listen mode only if a transfer is not ongoing */
  if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	2b28      	cmp	r3, #40	; 0x28
 8008f64:	d129      	bne.n	8008fba <HAL_I2C_DisableListen_IT+0x68>
  {
    tmp = (uint32_t)(hi2c->State) & I2C_STATE_MSK;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f6c:	b2db      	uxtb	r3, r3
 8008f6e:	f003 0303 	and.w	r3, r3, #3
 8008f72:	60fb      	str	r3, [r7, #12]
    hi2c->PreviousState = tmp | (uint32_t)(hi2c->Mode);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f7a:	b2db      	uxtb	r3, r3
 8008f7c:	461a      	mov	r2, r3
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	431a      	orrs	r2, r3
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2220      	movs	r2, #32
 8008f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2200      	movs	r2, #0
 8008f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	681a      	ldr	r2, [r3, #0]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008fa4:	601a      	str	r2, [r3, #0]

    /* Disable EVT and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	685a      	ldr	r2, [r3, #4]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008fb4:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	e000      	b.n	8008fbc <HAL_I2C_DisableListen_IT+0x6a>
  }
  else
  {
    return HAL_BUSY;
 8008fba:	2302      	movs	r3, #2
  }
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3714      	adds	r7, #20
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bc80      	pop	{r7}
 8008fc4:	4770      	bx	lr

08008fc6 <HAL_I2C_Master_Abort_IT>:
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Abort_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress)
{
 8008fc6:	b580      	push	{r7, lr}
 8008fc8:	b084      	sub	sp, #16
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	6078      	str	r0, [r7, #4]
 8008fce:	460b      	mov	r3, r1
 8008fd0:	807b      	strh	r3, [r7, #2]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008fd8:	73fb      	strb	r3, [r7, #15]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(DevAddress);

  /* Abort Master transfer during Receive or Transmit process    */
  if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && (CurrentMode == HAL_I2C_MODE_MASTER))
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	699b      	ldr	r3, [r3, #24]
 8008fe0:	f003 0302 	and.w	r3, r3, #2
 8008fe4:	2b02      	cmp	r3, #2
 8008fe6:	d138      	bne.n	800905a <HAL_I2C_Master_Abort_IT+0x94>
 8008fe8:	7bfb      	ldrb	r3, [r7, #15]
 8008fea:	2b10      	cmp	r3, #16
 8008fec:	d135      	bne.n	800905a <HAL_I2C_Master_Abort_IT+0x94>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	d101      	bne.n	8008ffc <HAL_I2C_Master_Abort_IT+0x36>
 8008ff8:	2302      	movs	r3, #2
 8008ffa:	e02f      	b.n	800905c <HAL_I2C_Master_Abort_IT+0x96>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2201      	movs	r2, #1
 8009000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    hi2c->PreviousState = I2C_STATE_NONE;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2200      	movs	r2, #0
 8009008:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_ABORT;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2260      	movs	r2, #96	; 0x60
 800900e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	681a      	ldr	r2, [r3, #0]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009020:	601a      	str	r2, [r3, #0]

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	681a      	ldr	r2, [r3, #0]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009030:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2200      	movs	r2, #0
 8009036:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	685a      	ldr	r2, [r3, #4]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009046:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2200      	movs	r2, #0
 800904c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f001 fad9 	bl	800a608 <I2C_ITError>

    return HAL_OK;
 8009056:	2300      	movs	r3, #0
 8009058:	e000      	b.n	800905c <HAL_I2C_Master_Abort_IT+0x96>
  else
  {
    /* Wrong usage of abort function */
    /* This function should be used only in case of abort monitored by master device */
    /* Or periphal is not in busy state, mean there is no active sequence to be abort */
    return HAL_ERROR;
 800905a:	2301      	movs	r3, #1
  }
}
 800905c:	4618      	mov	r0, r3
 800905e:	3710      	adds	r7, #16
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b088      	sub	sp, #32
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800906c:	2300      	movs	r3, #0
 800906e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800907c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009084:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800908c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800908e:	7bfb      	ldrb	r3, [r7, #15]
 8009090:	2b10      	cmp	r3, #16
 8009092:	d003      	beq.n	800909c <HAL_I2C_EV_IRQHandler+0x38>
 8009094:	7bfb      	ldrb	r3, [r7, #15]
 8009096:	2b40      	cmp	r3, #64	; 0x40
 8009098:	f040 80c1 	bne.w	800921e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	699b      	ldr	r3, [r3, #24]
 80090a2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	695b      	ldr	r3, [r3, #20]
 80090aa:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80090ac:	69fb      	ldr	r3, [r7, #28]
 80090ae:	f003 0301 	and.w	r3, r3, #1
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d10d      	bne.n	80090d2 <HAL_I2C_EV_IRQHandler+0x6e>
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80090bc:	d003      	beq.n	80090c6 <HAL_I2C_EV_IRQHandler+0x62>
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80090c4:	d101      	bne.n	80090ca <HAL_I2C_EV_IRQHandler+0x66>
 80090c6:	2301      	movs	r3, #1
 80090c8:	e000      	b.n	80090cc <HAL_I2C_EV_IRQHandler+0x68>
 80090ca:	2300      	movs	r3, #0
 80090cc:	2b01      	cmp	r3, #1
 80090ce:	f000 8132 	beq.w	8009336 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80090d2:	69fb      	ldr	r3, [r7, #28]
 80090d4:	f003 0301 	and.w	r3, r3, #1
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d00c      	beq.n	80090f6 <HAL_I2C_EV_IRQHandler+0x92>
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	0a5b      	lsrs	r3, r3, #9
 80090e0:	f003 0301 	and.w	r3, r3, #1
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d006      	beq.n	80090f6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f002 faec 	bl	800b6c6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 fda2 	bl	8009c38 <I2C_Master_SB>
 80090f4:	e092      	b.n	800921c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80090f6:	69fb      	ldr	r3, [r7, #28]
 80090f8:	08db      	lsrs	r3, r3, #3
 80090fa:	f003 0301 	and.w	r3, r3, #1
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d009      	beq.n	8009116 <HAL_I2C_EV_IRQHandler+0xb2>
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	0a5b      	lsrs	r3, r3, #9
 8009106:	f003 0301 	and.w	r3, r3, #1
 800910a:	2b00      	cmp	r3, #0
 800910c:	d003      	beq.n	8009116 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f000 fe17 	bl	8009d42 <I2C_Master_ADD10>
 8009114:	e082      	b.n	800921c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009116:	69fb      	ldr	r3, [r7, #28]
 8009118:	085b      	lsrs	r3, r3, #1
 800911a:	f003 0301 	and.w	r3, r3, #1
 800911e:	2b00      	cmp	r3, #0
 8009120:	d009      	beq.n	8009136 <HAL_I2C_EV_IRQHandler+0xd2>
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	0a5b      	lsrs	r3, r3, #9
 8009126:	f003 0301 	and.w	r3, r3, #1
 800912a:	2b00      	cmp	r3, #0
 800912c:	d003      	beq.n	8009136 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f000 fe30 	bl	8009d94 <I2C_Master_ADDR>
 8009134:	e072      	b.n	800921c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8009136:	69bb      	ldr	r3, [r7, #24]
 8009138:	089b      	lsrs	r3, r3, #2
 800913a:	f003 0301 	and.w	r3, r3, #1
 800913e:	2b00      	cmp	r3, #0
 8009140:	d03b      	beq.n	80091ba <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800914c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009150:	f000 80f3 	beq.w	800933a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009154:	69fb      	ldr	r3, [r7, #28]
 8009156:	09db      	lsrs	r3, r3, #7
 8009158:	f003 0301 	and.w	r3, r3, #1
 800915c:	2b00      	cmp	r3, #0
 800915e:	d00f      	beq.n	8009180 <HAL_I2C_EV_IRQHandler+0x11c>
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	0a9b      	lsrs	r3, r3, #10
 8009164:	f003 0301 	and.w	r3, r3, #1
 8009168:	2b00      	cmp	r3, #0
 800916a:	d009      	beq.n	8009180 <HAL_I2C_EV_IRQHandler+0x11c>
 800916c:	69fb      	ldr	r3, [r7, #28]
 800916e:	089b      	lsrs	r3, r3, #2
 8009170:	f003 0301 	and.w	r3, r3, #1
 8009174:	2b00      	cmp	r3, #0
 8009176:	d103      	bne.n	8009180 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 fa0e 	bl	800959a <I2C_MasterTransmit_TXE>
 800917e:	e04d      	b.n	800921c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009180:	69fb      	ldr	r3, [r7, #28]
 8009182:	089b      	lsrs	r3, r3, #2
 8009184:	f003 0301 	and.w	r3, r3, #1
 8009188:	2b00      	cmp	r3, #0
 800918a:	f000 80d6 	beq.w	800933a <HAL_I2C_EV_IRQHandler+0x2d6>
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	0a5b      	lsrs	r3, r3, #9
 8009192:	f003 0301 	and.w	r3, r3, #1
 8009196:	2b00      	cmp	r3, #0
 8009198:	f000 80cf 	beq.w	800933a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800919c:	7bbb      	ldrb	r3, [r7, #14]
 800919e:	2b21      	cmp	r3, #33	; 0x21
 80091a0:	d103      	bne.n	80091aa <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f000 fa95 	bl	80096d2 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80091a8:	e0c7      	b.n	800933a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80091aa:	7bfb      	ldrb	r3, [r7, #15]
 80091ac:	2b40      	cmp	r3, #64	; 0x40
 80091ae:	f040 80c4 	bne.w	800933a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 fb03 	bl	80097be <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80091b8:	e0bf      	b.n	800933a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	685b      	ldr	r3, [r3, #4]
 80091c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80091c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091c8:	f000 80b7 	beq.w	800933a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80091cc:	69fb      	ldr	r3, [r7, #28]
 80091ce:	099b      	lsrs	r3, r3, #6
 80091d0:	f003 0301 	and.w	r3, r3, #1
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d00f      	beq.n	80091f8 <HAL_I2C_EV_IRQHandler+0x194>
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	0a9b      	lsrs	r3, r3, #10
 80091dc:	f003 0301 	and.w	r3, r3, #1
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d009      	beq.n	80091f8 <HAL_I2C_EV_IRQHandler+0x194>
 80091e4:	69fb      	ldr	r3, [r7, #28]
 80091e6:	089b      	lsrs	r3, r3, #2
 80091e8:	f003 0301 	and.w	r3, r3, #1
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d103      	bne.n	80091f8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f000 fb7c 	bl	80098ee <I2C_MasterReceive_RXNE>
 80091f6:	e011      	b.n	800921c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80091f8:	69fb      	ldr	r3, [r7, #28]
 80091fa:	089b      	lsrs	r3, r3, #2
 80091fc:	f003 0301 	and.w	r3, r3, #1
 8009200:	2b00      	cmp	r3, #0
 8009202:	f000 809a 	beq.w	800933a <HAL_I2C_EV_IRQHandler+0x2d6>
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	0a5b      	lsrs	r3, r3, #9
 800920a:	f003 0301 	and.w	r3, r3, #1
 800920e:	2b00      	cmp	r3, #0
 8009210:	f000 8093 	beq.w	800933a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f000 fc25 	bl	8009a64 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800921a:	e08e      	b.n	800933a <HAL_I2C_EV_IRQHandler+0x2d6>
 800921c:	e08d      	b.n	800933a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009222:	2b00      	cmp	r3, #0
 8009224:	d004      	beq.n	8009230 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	695b      	ldr	r3, [r3, #20]
 800922c:	61fb      	str	r3, [r7, #28]
 800922e:	e007      	b.n	8009240 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	699b      	ldr	r3, [r3, #24]
 8009236:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	695b      	ldr	r3, [r3, #20]
 800923e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009240:	69fb      	ldr	r3, [r7, #28]
 8009242:	085b      	lsrs	r3, r3, #1
 8009244:	f003 0301 	and.w	r3, r3, #1
 8009248:	2b00      	cmp	r3, #0
 800924a:	d012      	beq.n	8009272 <HAL_I2C_EV_IRQHandler+0x20e>
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	0a5b      	lsrs	r3, r3, #9
 8009250:	f003 0301 	and.w	r3, r3, #1
 8009254:	2b00      	cmp	r3, #0
 8009256:	d00c      	beq.n	8009272 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800925c:	2b00      	cmp	r3, #0
 800925e:	d003      	beq.n	8009268 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	699b      	ldr	r3, [r3, #24]
 8009266:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8009268:	69b9      	ldr	r1, [r7, #24]
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f000 ffde 	bl	800a22c <I2C_Slave_ADDR>
 8009270:	e066      	b.n	8009340 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009272:	69fb      	ldr	r3, [r7, #28]
 8009274:	091b      	lsrs	r3, r3, #4
 8009276:	f003 0301 	and.w	r3, r3, #1
 800927a:	2b00      	cmp	r3, #0
 800927c:	d009      	beq.n	8009292 <HAL_I2C_EV_IRQHandler+0x22e>
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	0a5b      	lsrs	r3, r3, #9
 8009282:	f003 0301 	and.w	r3, r3, #1
 8009286:	2b00      	cmp	r3, #0
 8009288:	d003      	beq.n	8009292 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f001 f818 	bl	800a2c0 <I2C_Slave_STOPF>
 8009290:	e056      	b.n	8009340 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009292:	7bbb      	ldrb	r3, [r7, #14]
 8009294:	2b21      	cmp	r3, #33	; 0x21
 8009296:	d002      	beq.n	800929e <HAL_I2C_EV_IRQHandler+0x23a>
 8009298:	7bbb      	ldrb	r3, [r7, #14]
 800929a:	2b29      	cmp	r3, #41	; 0x29
 800929c:	d125      	bne.n	80092ea <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800929e:	69fb      	ldr	r3, [r7, #28]
 80092a0:	09db      	lsrs	r3, r3, #7
 80092a2:	f003 0301 	and.w	r3, r3, #1
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d00f      	beq.n	80092ca <HAL_I2C_EV_IRQHandler+0x266>
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	0a9b      	lsrs	r3, r3, #10
 80092ae:	f003 0301 	and.w	r3, r3, #1
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d009      	beq.n	80092ca <HAL_I2C_EV_IRQHandler+0x266>
 80092b6:	69fb      	ldr	r3, [r7, #28]
 80092b8:	089b      	lsrs	r3, r3, #2
 80092ba:	f003 0301 	and.w	r3, r3, #1
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d103      	bne.n	80092ca <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f000 fef6 	bl	800a0b4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80092c8:	e039      	b.n	800933e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80092ca:	69fb      	ldr	r3, [r7, #28]
 80092cc:	089b      	lsrs	r3, r3, #2
 80092ce:	f003 0301 	and.w	r3, r3, #1
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d033      	beq.n	800933e <HAL_I2C_EV_IRQHandler+0x2da>
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	0a5b      	lsrs	r3, r3, #9
 80092da:	f003 0301 	and.w	r3, r3, #1
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d02d      	beq.n	800933e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f000 ff23 	bl	800a12e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80092e8:	e029      	b.n	800933e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80092ea:	69fb      	ldr	r3, [r7, #28]
 80092ec:	099b      	lsrs	r3, r3, #6
 80092ee:	f003 0301 	and.w	r3, r3, #1
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d00f      	beq.n	8009316 <HAL_I2C_EV_IRQHandler+0x2b2>
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	0a9b      	lsrs	r3, r3, #10
 80092fa:	f003 0301 	and.w	r3, r3, #1
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d009      	beq.n	8009316 <HAL_I2C_EV_IRQHandler+0x2b2>
 8009302:	69fb      	ldr	r3, [r7, #28]
 8009304:	089b      	lsrs	r3, r3, #2
 8009306:	f003 0301 	and.w	r3, r3, #1
 800930a:	2b00      	cmp	r3, #0
 800930c:	d103      	bne.n	8009316 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f000 ff2d 	bl	800a16e <I2C_SlaveReceive_RXNE>
 8009314:	e014      	b.n	8009340 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009316:	69fb      	ldr	r3, [r7, #28]
 8009318:	089b      	lsrs	r3, r3, #2
 800931a:	f003 0301 	and.w	r3, r3, #1
 800931e:	2b00      	cmp	r3, #0
 8009320:	d00e      	beq.n	8009340 <HAL_I2C_EV_IRQHandler+0x2dc>
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	0a5b      	lsrs	r3, r3, #9
 8009326:	f003 0301 	and.w	r3, r3, #1
 800932a:	2b00      	cmp	r3, #0
 800932c:	d008      	beq.n	8009340 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f000 ff5b 	bl	800a1ea <I2C_SlaveReceive_BTF>
 8009334:	e004      	b.n	8009340 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8009336:	bf00      	nop
 8009338:	e002      	b.n	8009340 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800933a:	bf00      	nop
 800933c:	e000      	b.n	8009340 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800933e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8009340:	3720      	adds	r7, #32
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}

08009346 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8009346:	b580      	push	{r7, lr}
 8009348:	b08a      	sub	sp, #40	; 0x28
 800934a:	af00      	add	r7, sp, #0
 800934c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	695b      	ldr	r3, [r3, #20]
 8009354:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	685b      	ldr	r3, [r3, #4]
 800935c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800935e:	2300      	movs	r3, #0
 8009360:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009368:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800936a:	6a3b      	ldr	r3, [r7, #32]
 800936c:	0a1b      	lsrs	r3, r3, #8
 800936e:	f003 0301 	and.w	r3, r3, #1
 8009372:	2b00      	cmp	r3, #0
 8009374:	d00e      	beq.n	8009394 <HAL_I2C_ER_IRQHandler+0x4e>
 8009376:	69fb      	ldr	r3, [r7, #28]
 8009378:	0a1b      	lsrs	r3, r3, #8
 800937a:	f003 0301 	and.w	r3, r3, #1
 800937e:	2b00      	cmp	r3, #0
 8009380:	d008      	beq.n	8009394 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8009382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009384:	f043 0301 	orr.w	r3, r3, #1
 8009388:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009392:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8009394:	6a3b      	ldr	r3, [r7, #32]
 8009396:	0a5b      	lsrs	r3, r3, #9
 8009398:	f003 0301 	and.w	r3, r3, #1
 800939c:	2b00      	cmp	r3, #0
 800939e:	d00e      	beq.n	80093be <HAL_I2C_ER_IRQHandler+0x78>
 80093a0:	69fb      	ldr	r3, [r7, #28]
 80093a2:	0a1b      	lsrs	r3, r3, #8
 80093a4:	f003 0301 	and.w	r3, r3, #1
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d008      	beq.n	80093be <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80093ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ae:	f043 0302 	orr.w	r3, r3, #2
 80093b2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80093bc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80093be:	6a3b      	ldr	r3, [r7, #32]
 80093c0:	0a9b      	lsrs	r3, r3, #10
 80093c2:	f003 0301 	and.w	r3, r3, #1
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d03f      	beq.n	800944a <HAL_I2C_ER_IRQHandler+0x104>
 80093ca:	69fb      	ldr	r3, [r7, #28]
 80093cc:	0a1b      	lsrs	r3, r3, #8
 80093ce:	f003 0301 	and.w	r3, r3, #1
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d039      	beq.n	800944a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80093d6:	7efb      	ldrb	r3, [r7, #27]
 80093d8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093de:	b29b      	uxth	r3, r3
 80093e0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093e8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093ee:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80093f0:	7ebb      	ldrb	r3, [r7, #26]
 80093f2:	2b20      	cmp	r3, #32
 80093f4:	d112      	bne.n	800941c <HAL_I2C_ER_IRQHandler+0xd6>
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d10f      	bne.n	800941c <HAL_I2C_ER_IRQHandler+0xd6>
 80093fc:	7cfb      	ldrb	r3, [r7, #19]
 80093fe:	2b21      	cmp	r3, #33	; 0x21
 8009400:	d008      	beq.n	8009414 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8009402:	7cfb      	ldrb	r3, [r7, #19]
 8009404:	2b29      	cmp	r3, #41	; 0x29
 8009406:	d005      	beq.n	8009414 <HAL_I2C_ER_IRQHandler+0xce>
 8009408:	7cfb      	ldrb	r3, [r7, #19]
 800940a:	2b28      	cmp	r3, #40	; 0x28
 800940c:	d106      	bne.n	800941c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	2b21      	cmp	r3, #33	; 0x21
 8009412:	d103      	bne.n	800941c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f001 f883 	bl	800a520 <I2C_Slave_AF>
 800941a:	e016      	b.n	800944a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009424:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8009426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009428:	f043 0304 	orr.w	r3, r3, #4
 800942c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800942e:	7efb      	ldrb	r3, [r7, #27]
 8009430:	2b10      	cmp	r3, #16
 8009432:	d002      	beq.n	800943a <HAL_I2C_ER_IRQHandler+0xf4>
 8009434:	7efb      	ldrb	r3, [r7, #27]
 8009436:	2b40      	cmp	r3, #64	; 0x40
 8009438:	d107      	bne.n	800944a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	681a      	ldr	r2, [r3, #0]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009448:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800944a:	6a3b      	ldr	r3, [r7, #32]
 800944c:	0adb      	lsrs	r3, r3, #11
 800944e:	f003 0301 	and.w	r3, r3, #1
 8009452:	2b00      	cmp	r3, #0
 8009454:	d00e      	beq.n	8009474 <HAL_I2C_ER_IRQHandler+0x12e>
 8009456:	69fb      	ldr	r3, [r7, #28]
 8009458:	0a1b      	lsrs	r3, r3, #8
 800945a:	f003 0301 	and.w	r3, r3, #1
 800945e:	2b00      	cmp	r3, #0
 8009460:	d008      	beq.n	8009474 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8009462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009464:	f043 0308 	orr.w	r3, r3, #8
 8009468:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8009472:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8009474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009476:	2b00      	cmp	r3, #0
 8009478:	d008      	beq.n	800948c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800947e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009480:	431a      	orrs	r2, r3
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f001 f8be 	bl	800a608 <I2C_ITError>
  }
}
 800948c:	bf00      	nop
 800948e:	3728      	adds	r7, #40	; 0x28
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009494:	b480      	push	{r7}
 8009496:	b083      	sub	sp, #12
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800949c:	bf00      	nop
 800949e:	370c      	adds	r7, #12
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bc80      	pop	{r7}
 80094a4:	4770      	bx	lr

080094a6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80094a6:	b480      	push	{r7}
 80094a8:	b083      	sub	sp, #12
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80094ae:	bf00      	nop
 80094b0:	370c      	adds	r7, #12
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bc80      	pop	{r7}
 80094b6:	4770      	bx	lr

080094b8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b083      	sub	sp, #12
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80094c0:	bf00      	nop
 80094c2:	370c      	adds	r7, #12
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bc80      	pop	{r7}
 80094c8:	4770      	bx	lr

080094ca <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80094ca:	b480      	push	{r7}
 80094cc:	b083      	sub	sp, #12
 80094ce:	af00      	add	r7, sp, #0
 80094d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80094d2:	bf00      	nop
 80094d4:	370c      	adds	r7, #12
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bc80      	pop	{r7}
 80094da:	4770      	bx	lr

080094dc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80094dc:	b480      	push	{r7}
 80094de:	b083      	sub	sp, #12
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	460b      	mov	r3, r1
 80094e6:	70fb      	strb	r3, [r7, #3]
 80094e8:	4613      	mov	r3, r2
 80094ea:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80094ec:	bf00      	nop
 80094ee:	370c      	adds	r7, #12
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bc80      	pop	{r7}
 80094f4:	4770      	bx	lr

080094f6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80094f6:	b480      	push	{r7}
 80094f8:	b083      	sub	sp, #12
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80094fe:	bf00      	nop
 8009500:	370c      	adds	r7, #12
 8009502:	46bd      	mov	sp, r7
 8009504:	bc80      	pop	{r7}
 8009506:	4770      	bx	lr

08009508 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009508:	b480      	push	{r7}
 800950a:	b083      	sub	sp, #12
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8009510:	bf00      	nop
 8009512:	370c      	adds	r7, #12
 8009514:	46bd      	mov	sp, r7
 8009516:	bc80      	pop	{r7}
 8009518:	4770      	bx	lr

0800951a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800951a:	b480      	push	{r7}
 800951c:	b083      	sub	sp, #12
 800951e:	af00      	add	r7, sp, #0
 8009520:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8009522:	bf00      	nop
 8009524:	370c      	adds	r7, #12
 8009526:	46bd      	mov	sp, r7
 8009528:	bc80      	pop	{r7}
 800952a:	4770      	bx	lr

0800952c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800952c:	b480      	push	{r7}
 800952e:	b083      	sub	sp, #12
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8009534:	bf00      	nop
 8009536:	370c      	adds	r7, #12
 8009538:	46bd      	mov	sp, r7
 800953a:	bc80      	pop	{r7}
 800953c:	4770      	bx	lr

0800953e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800953e:	b480      	push	{r7}
 8009540:	b083      	sub	sp, #12
 8009542:	af00      	add	r7, sp, #0
 8009544:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8009546:	bf00      	nop
 8009548:	370c      	adds	r7, #12
 800954a:	46bd      	mov	sp, r7
 800954c:	bc80      	pop	{r7}
 800954e:	4770      	bx	lr

08009550 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009550:	b480      	push	{r7}
 8009552:	b083      	sub	sp, #12
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800955e:	b2db      	uxtb	r3, r3
}
 8009560:	4618      	mov	r0, r3
 8009562:	370c      	adds	r7, #12
 8009564:	46bd      	mov	sp, r7
 8009566:	bc80      	pop	{r7}
 8009568:	4770      	bx	lr

0800956a <HAL_I2C_GetMode>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL mode
  */
HAL_I2C_ModeTypeDef HAL_I2C_GetMode(I2C_HandleTypeDef *hi2c)
{
 800956a:	b480      	push	{r7}
 800956c:	b083      	sub	sp, #12
 800956e:	af00      	add	r7, sp, #0
 8009570:	6078      	str	r0, [r7, #4]
  return hi2c->Mode;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009578:	b2db      	uxtb	r3, r3
}
 800957a:	4618      	mov	r0, r3
 800957c:	370c      	adds	r7, #12
 800957e:	46bd      	mov	sp, r7
 8009580:	bc80      	pop	{r7}
 8009582:	4770      	bx	lr

08009584 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8009584:	b480      	push	{r7}
 8009586:	b083      	sub	sp, #12
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8009590:	4618      	mov	r0, r3
 8009592:	370c      	adds	r7, #12
 8009594:	46bd      	mov	sp, r7
 8009596:	bc80      	pop	{r7}
 8009598:	4770      	bx	lr

0800959a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800959a:	b580      	push	{r7, lr}
 800959c:	b084      	sub	sp, #16
 800959e:	af00      	add	r7, sp, #0
 80095a0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095a8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80095b0:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095b6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d150      	bne.n	8009662 <I2C_MasterTransmit_TXE+0xc8>
 80095c0:	7bfb      	ldrb	r3, [r7, #15]
 80095c2:	2b21      	cmp	r3, #33	; 0x21
 80095c4:	d14d      	bne.n	8009662 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	2b08      	cmp	r3, #8
 80095ca:	d01d      	beq.n	8009608 <I2C_MasterTransmit_TXE+0x6e>
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	2b20      	cmp	r3, #32
 80095d0:	d01a      	beq.n	8009608 <I2C_MasterTransmit_TXE+0x6e>
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80095d8:	d016      	beq.n	8009608 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	685a      	ldr	r2, [r3, #4]
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80095e8:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2211      	movs	r2, #17
 80095ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2200      	movs	r2, #0
 80095f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2220      	movs	r2, #32
 80095fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f7ff ff47 	bl	8009494 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8009606:	e060      	b.n	80096ca <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	685a      	ldr	r2, [r3, #4]
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009616:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	681a      	ldr	r2, [r3, #0]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009626:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2200      	movs	r2, #0
 800962c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2220      	movs	r2, #32
 8009632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800963c:	b2db      	uxtb	r3, r3
 800963e:	2b40      	cmp	r3, #64	; 0x40
 8009640:	d107      	bne.n	8009652 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2200      	movs	r2, #0
 8009646:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f7ff ff5c 	bl	8009508 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8009650:	e03b      	b.n	80096ca <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2200      	movs	r2, #0
 8009656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f7ff ff1a 	bl	8009494 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8009660:	e033      	b.n	80096ca <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8009662:	7bfb      	ldrb	r3, [r7, #15]
 8009664:	2b21      	cmp	r3, #33	; 0x21
 8009666:	d005      	beq.n	8009674 <I2C_MasterTransmit_TXE+0xda>
 8009668:	7bbb      	ldrb	r3, [r7, #14]
 800966a:	2b40      	cmp	r3, #64	; 0x40
 800966c:	d12d      	bne.n	80096ca <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800966e:	7bfb      	ldrb	r3, [r7, #15]
 8009670:	2b22      	cmp	r3, #34	; 0x22
 8009672:	d12a      	bne.n	80096ca <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009678:	b29b      	uxth	r3, r3
 800967a:	2b00      	cmp	r3, #0
 800967c:	d108      	bne.n	8009690 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	685a      	ldr	r2, [r3, #4]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800968c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800968e:	e01c      	b.n	80096ca <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009696:	b2db      	uxtb	r3, r3
 8009698:	2b40      	cmp	r3, #64	; 0x40
 800969a:	d103      	bne.n	80096a4 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f000 f88e 	bl	80097be <I2C_MemoryTransmit_TXE_BTF>
}
 80096a2:	e012      	b.n	80096ca <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096a8:	781a      	ldrb	r2, [r3, #0]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096b4:	1c5a      	adds	r2, r3, #1
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096be:	b29b      	uxth	r3, r3
 80096c0:	3b01      	subs	r3, #1
 80096c2:	b29a      	uxth	r2, r3
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80096c8:	e7ff      	b.n	80096ca <I2C_MasterTransmit_TXE+0x130>
 80096ca:	bf00      	nop
 80096cc:	3710      	adds	r7, #16
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}

080096d2 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80096d2:	b580      	push	{r7, lr}
 80096d4:	b084      	sub	sp, #16
 80096d6:	af00      	add	r7, sp, #0
 80096d8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096de:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096e6:	b2db      	uxtb	r3, r3
 80096e8:	2b21      	cmp	r3, #33	; 0x21
 80096ea:	d164      	bne.n	80097b6 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096f0:	b29b      	uxth	r3, r3
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d012      	beq.n	800971c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096fa:	781a      	ldrb	r2, [r3, #0]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009706:	1c5a      	adds	r2, r3, #1
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009710:	b29b      	uxth	r3, r3
 8009712:	3b01      	subs	r3, #1
 8009714:	b29a      	uxth	r2, r3
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800971a:	e04c      	b.n	80097b6 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	2b08      	cmp	r3, #8
 8009720:	d01d      	beq.n	800975e <I2C_MasterTransmit_BTF+0x8c>
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	2b20      	cmp	r3, #32
 8009726:	d01a      	beq.n	800975e <I2C_MasterTransmit_BTF+0x8c>
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800972e:	d016      	beq.n	800975e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	685a      	ldr	r2, [r3, #4]
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800973e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2211      	movs	r2, #17
 8009744:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2200      	movs	r2, #0
 800974a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2220      	movs	r2, #32
 8009752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f7ff fe9c 	bl	8009494 <HAL_I2C_MasterTxCpltCallback>
}
 800975c:	e02b      	b.n	80097b6 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	685a      	ldr	r2, [r3, #4]
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800976c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	681a      	ldr	r2, [r3, #0]
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800977c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2200      	movs	r2, #0
 8009782:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2220      	movs	r2, #32
 8009788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009792:	b2db      	uxtb	r3, r3
 8009794:	2b40      	cmp	r3, #64	; 0x40
 8009796:	d107      	bne.n	80097a8 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2200      	movs	r2, #0
 800979c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f7ff feb1 	bl	8009508 <HAL_I2C_MemTxCpltCallback>
}
 80097a6:	e006      	b.n	80097b6 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2200      	movs	r2, #0
 80097ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f7ff fe6f 	bl	8009494 <HAL_I2C_MasterTxCpltCallback>
}
 80097b6:	bf00      	nop
 80097b8:	3710      	adds	r7, #16
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}

080097be <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80097be:	b580      	push	{r7, lr}
 80097c0:	b084      	sub	sp, #16
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097cc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d11d      	bne.n	8009812 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097da:	2b01      	cmp	r3, #1
 80097dc:	d10b      	bne.n	80097f6 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097e2:	b2da      	uxtb	r2, r3
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097ee:	1c9a      	adds	r2, r3, #2
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80097f4:	e077      	b.n	80098e6 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097fa:	b29b      	uxth	r3, r3
 80097fc:	121b      	asrs	r3, r3, #8
 80097fe:	b2da      	uxtb	r2, r3
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800980a:	1c5a      	adds	r2, r3, #1
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8009810:	e069      	b.n	80098e6 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009816:	2b01      	cmp	r3, #1
 8009818:	d10b      	bne.n	8009832 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800981e:	b2da      	uxtb	r2, r3
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800982a:	1c5a      	adds	r2, r3, #1
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8009830:	e059      	b.n	80098e6 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009836:	2b02      	cmp	r3, #2
 8009838:	d152      	bne.n	80098e0 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800983a:	7bfb      	ldrb	r3, [r7, #15]
 800983c:	2b22      	cmp	r3, #34	; 0x22
 800983e:	d10d      	bne.n	800985c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	681a      	ldr	r2, [r3, #0]
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800984e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009854:	1c5a      	adds	r2, r3, #1
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	651a      	str	r2, [r3, #80]	; 0x50
}
 800985a:	e044      	b.n	80098e6 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009860:	b29b      	uxth	r3, r3
 8009862:	2b00      	cmp	r3, #0
 8009864:	d015      	beq.n	8009892 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8009866:	7bfb      	ldrb	r3, [r7, #15]
 8009868:	2b21      	cmp	r3, #33	; 0x21
 800986a:	d112      	bne.n	8009892 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009870:	781a      	ldrb	r2, [r3, #0]
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800987c:	1c5a      	adds	r2, r3, #1
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009886:	b29b      	uxth	r3, r3
 8009888:	3b01      	subs	r3, #1
 800988a:	b29a      	uxth	r2, r3
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8009890:	e029      	b.n	80098e6 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009896:	b29b      	uxth	r3, r3
 8009898:	2b00      	cmp	r3, #0
 800989a:	d124      	bne.n	80098e6 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800989c:	7bfb      	ldrb	r3, [r7, #15]
 800989e:	2b21      	cmp	r3, #33	; 0x21
 80098a0:	d121      	bne.n	80098e6 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	685a      	ldr	r2, [r3, #4]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80098b0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	681a      	ldr	r2, [r3, #0]
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098c0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2200      	movs	r2, #0
 80098c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2220      	movs	r2, #32
 80098cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2200      	movs	r2, #0
 80098d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f7ff fe15 	bl	8009508 <HAL_I2C_MemTxCpltCallback>
}
 80098de:	e002      	b.n	80098e6 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f7fb feec 	bl	80056be <I2C_Flush_DR>
}
 80098e6:	bf00      	nop
 80098e8:	3710      	adds	r7, #16
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}

080098ee <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80098ee:	b580      	push	{r7, lr}
 80098f0:	b084      	sub	sp, #16
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098fc:	b2db      	uxtb	r3, r3
 80098fe:	2b22      	cmp	r3, #34	; 0x22
 8009900:	f040 80ac 	bne.w	8009a5c <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009908:	b29b      	uxth	r3, r3
 800990a:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	2b03      	cmp	r3, #3
 8009910:	d921      	bls.n	8009956 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	691a      	ldr	r2, [r3, #16]
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800991c:	b2d2      	uxtb	r2, r2
 800991e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009924:	1c5a      	adds	r2, r3, #1
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800992e:	b29b      	uxth	r3, r3
 8009930:	3b01      	subs	r3, #1
 8009932:	b29a      	uxth	r2, r3
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800993c:	b29b      	uxth	r3, r3
 800993e:	2b03      	cmp	r3, #3
 8009940:	f040 808c 	bne.w	8009a5c <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	685a      	ldr	r2, [r3, #4]
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009952:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8009954:	e082      	b.n	8009a5c <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800995a:	2b02      	cmp	r3, #2
 800995c:	d075      	beq.n	8009a4a <I2C_MasterReceive_RXNE+0x15c>
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	2b01      	cmp	r3, #1
 8009962:	d002      	beq.n	800996a <I2C_MasterReceive_RXNE+0x7c>
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d16f      	bne.n	8009a4a <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f001 fdee 	bl	800b54c <I2C_WaitOnSTOPRequestThroughIT>
 8009970:	4603      	mov	r3, r0
 8009972:	2b00      	cmp	r3, #0
 8009974:	d142      	bne.n	80099fc <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	681a      	ldr	r2, [r3, #0]
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009984:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	685a      	ldr	r2, [r3, #4]
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009994:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	691a      	ldr	r2, [r3, #16]
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099a0:	b2d2      	uxtb	r2, r2
 80099a2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099a8:	1c5a      	adds	r2, r3, #1
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099b2:	b29b      	uxth	r3, r3
 80099b4:	3b01      	subs	r3, #1
 80099b6:	b29a      	uxth	r2, r3
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2220      	movs	r2, #32
 80099c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	2b40      	cmp	r3, #64	; 0x40
 80099ce:	d10a      	bne.n	80099e6 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2200      	movs	r2, #0
 80099d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2200      	movs	r2, #0
 80099dc:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f7ff fd9b 	bl	800951a <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80099e4:	e03a      	b.n	8009a5c <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2200      	movs	r2, #0
 80099ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2212      	movs	r2, #18
 80099f2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f7ff fd56 	bl	80094a6 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80099fa:	e02f      	b.n	8009a5c <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	685a      	ldr	r2, [r3, #4]
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009a0a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	691a      	ldr	r2, [r3, #16]
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a16:	b2d2      	uxtb	r2, r2
 8009a18:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a1e:	1c5a      	adds	r2, r3, #1
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a28:	b29b      	uxth	r3, r3
 8009a2a:	3b01      	subs	r3, #1
 8009a2c:	b29a      	uxth	r2, r3
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2220      	movs	r2, #32
 8009a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f7ff fd72 	bl	800952c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8009a48:	e008      	b.n	8009a5c <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	685a      	ldr	r2, [r3, #4]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a58:	605a      	str	r2, [r3, #4]
}
 8009a5a:	e7ff      	b.n	8009a5c <I2C_MasterReceive_RXNE+0x16e>
 8009a5c:	bf00      	nop
 8009a5e:	3710      	adds	r7, #16
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}

08009a64 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b084      	sub	sp, #16
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a70:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a76:	b29b      	uxth	r3, r3
 8009a78:	2b04      	cmp	r3, #4
 8009a7a:	d11b      	bne.n	8009ab4 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	685a      	ldr	r2, [r3, #4]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a8a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	691a      	ldr	r2, [r3, #16]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a96:	b2d2      	uxtb	r2, r2
 8009a98:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a9e:	1c5a      	adds	r2, r3, #1
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009aa8:	b29b      	uxth	r3, r3
 8009aaa:	3b01      	subs	r3, #1
 8009aac:	b29a      	uxth	r2, r3
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8009ab2:	e0bd      	b.n	8009c30 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ab8:	b29b      	uxth	r3, r3
 8009aba:	2b03      	cmp	r3, #3
 8009abc:	d129      	bne.n	8009b12 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	685a      	ldr	r2, [r3, #4]
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009acc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	2b04      	cmp	r3, #4
 8009ad2:	d00a      	beq.n	8009aea <I2C_MasterReceive_BTF+0x86>
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2b02      	cmp	r3, #2
 8009ad8:	d007      	beq.n	8009aea <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	681a      	ldr	r2, [r3, #0]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ae8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	691a      	ldr	r2, [r3, #16]
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af4:	b2d2      	uxtb	r2, r2
 8009af6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009afc:	1c5a      	adds	r2, r3, #1
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b06:	b29b      	uxth	r3, r3
 8009b08:	3b01      	subs	r3, #1
 8009b0a:	b29a      	uxth	r2, r3
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8009b10:	e08e      	b.n	8009c30 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b16:	b29b      	uxth	r3, r3
 8009b18:	2b02      	cmp	r3, #2
 8009b1a:	d176      	bne.n	8009c0a <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2b01      	cmp	r3, #1
 8009b20:	d002      	beq.n	8009b28 <I2C_MasterReceive_BTF+0xc4>
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	2b10      	cmp	r3, #16
 8009b26:	d108      	bne.n	8009b3a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	681a      	ldr	r2, [r3, #0]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b36:	601a      	str	r2, [r3, #0]
 8009b38:	e019      	b.n	8009b6e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	2b04      	cmp	r3, #4
 8009b3e:	d002      	beq.n	8009b46 <I2C_MasterReceive_BTF+0xe2>
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	2b02      	cmp	r3, #2
 8009b44:	d108      	bne.n	8009b58 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	681a      	ldr	r2, [r3, #0]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009b54:	601a      	str	r2, [r3, #0]
 8009b56:	e00a      	b.n	8009b6e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	2b10      	cmp	r3, #16
 8009b5c:	d007      	beq.n	8009b6e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	681a      	ldr	r2, [r3, #0]
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b6c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	691a      	ldr	r2, [r3, #16]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b78:	b2d2      	uxtb	r2, r2
 8009b7a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b80:	1c5a      	adds	r2, r3, #1
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b8a:	b29b      	uxth	r3, r3
 8009b8c:	3b01      	subs	r3, #1
 8009b8e:	b29a      	uxth	r2, r3
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	691a      	ldr	r2, [r3, #16]
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b9e:	b2d2      	uxtb	r2, r2
 8009ba0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ba6:	1c5a      	adds	r2, r3, #1
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bb0:	b29b      	uxth	r3, r3
 8009bb2:	3b01      	subs	r3, #1
 8009bb4:	b29a      	uxth	r2, r3
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	685a      	ldr	r2, [r3, #4]
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8009bc8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2220      	movs	r2, #32
 8009bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009bd8:	b2db      	uxtb	r3, r3
 8009bda:	2b40      	cmp	r3, #64	; 0x40
 8009bdc:	d10a      	bne.n	8009bf4 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2200      	movs	r2, #0
 8009be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2200      	movs	r2, #0
 8009bea:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f7ff fc94 	bl	800951a <HAL_I2C_MemRxCpltCallback>
}
 8009bf2:	e01d      	b.n	8009c30 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2212      	movs	r2, #18
 8009c00:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f7ff fc4f 	bl	80094a6 <HAL_I2C_MasterRxCpltCallback>
}
 8009c08:	e012      	b.n	8009c30 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	691a      	ldr	r2, [r3, #16]
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c14:	b2d2      	uxtb	r2, r2
 8009c16:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c1c:	1c5a      	adds	r2, r3, #1
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c26:	b29b      	uxth	r3, r3
 8009c28:	3b01      	subs	r3, #1
 8009c2a:	b29a      	uxth	r2, r3
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8009c30:	bf00      	nop
 8009c32:	3710      	adds	r7, #16
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}

08009c38 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b083      	sub	sp, #12
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009c46:	b2db      	uxtb	r3, r3
 8009c48:	2b40      	cmp	r3, #64	; 0x40
 8009c4a:	d117      	bne.n	8009c7c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d109      	bne.n	8009c68 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c58:	b2db      	uxtb	r3, r3
 8009c5a:	461a      	mov	r2, r3
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009c64:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8009c66:	e067      	b.n	8009d38 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c6c:	b2db      	uxtb	r3, r3
 8009c6e:	f043 0301 	orr.w	r3, r3, #1
 8009c72:	b2da      	uxtb	r2, r3
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	611a      	str	r2, [r3, #16]
}
 8009c7a:	e05d      	b.n	8009d38 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	691b      	ldr	r3, [r3, #16]
 8009c80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c84:	d133      	bne.n	8009cee <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c8c:	b2db      	uxtb	r3, r3
 8009c8e:	2b21      	cmp	r3, #33	; 0x21
 8009c90:	d109      	bne.n	8009ca6 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c96:	b2db      	uxtb	r3, r3
 8009c98:	461a      	mov	r2, r3
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009ca2:	611a      	str	r2, [r3, #16]
 8009ca4:	e008      	b.n	8009cb8 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009caa:	b2db      	uxtb	r3, r3
 8009cac:	f043 0301 	orr.w	r3, r3, #1
 8009cb0:	b2da      	uxtb	r2, r3
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d004      	beq.n	8009cca <I2C_Master_SB+0x92>
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d108      	bne.n	8009cdc <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d032      	beq.n	8009d38 <I2C_Master_SB+0x100>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d02d      	beq.n	8009d38 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	685a      	ldr	r2, [r3, #4]
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009cea:	605a      	str	r2, [r3, #4]
}
 8009cec:	e024      	b.n	8009d38 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d10e      	bne.n	8009d14 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cfa:	b29b      	uxth	r3, r3
 8009cfc:	11db      	asrs	r3, r3, #7
 8009cfe:	b2db      	uxtb	r3, r3
 8009d00:	f003 0306 	and.w	r3, r3, #6
 8009d04:	b2db      	uxtb	r3, r3
 8009d06:	f063 030f 	orn	r3, r3, #15
 8009d0a:	b2da      	uxtb	r2, r3
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	611a      	str	r2, [r3, #16]
}
 8009d12:	e011      	b.n	8009d38 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d18:	2b01      	cmp	r3, #1
 8009d1a:	d10d      	bne.n	8009d38 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d20:	b29b      	uxth	r3, r3
 8009d22:	11db      	asrs	r3, r3, #7
 8009d24:	b2db      	uxtb	r3, r3
 8009d26:	f003 0306 	and.w	r3, r3, #6
 8009d2a:	b2db      	uxtb	r3, r3
 8009d2c:	f063 030e 	orn	r3, r3, #14
 8009d30:	b2da      	uxtb	r2, r3
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	611a      	str	r2, [r3, #16]
}
 8009d38:	bf00      	nop
 8009d3a:	370c      	adds	r7, #12
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bc80      	pop	{r7}
 8009d40:	4770      	bx	lr

08009d42 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8009d42:	b480      	push	{r7}
 8009d44:	b083      	sub	sp, #12
 8009d46:	af00      	add	r7, sp, #0
 8009d48:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d4e:	b2da      	uxtb	r2, r3
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d004      	beq.n	8009d68 <I2C_Master_ADD10+0x26>
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d108      	bne.n	8009d7a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d00c      	beq.n	8009d8a <I2C_Master_ADD10+0x48>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d007      	beq.n	8009d8a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	685a      	ldr	r2, [r3, #4]
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009d88:	605a      	str	r2, [r3, #4]
  }
}
 8009d8a:	bf00      	nop
 8009d8c:	370c      	adds	r7, #12
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bc80      	pop	{r7}
 8009d92:	4770      	bx	lr

08009d94 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8009d94:	b480      	push	{r7}
 8009d96:	b091      	sub	sp, #68	; 0x44
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009da2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009daa:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009db0:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009db8:	b2db      	uxtb	r3, r3
 8009dba:	2b22      	cmp	r3, #34	; 0x22
 8009dbc:	f040 8169 	bne.w	800a092 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d10f      	bne.n	8009de8 <I2C_Master_ADDR+0x54>
 8009dc8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009dcc:	2b40      	cmp	r3, #64	; 0x40
 8009dce:	d10b      	bne.n	8009de8 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	633b      	str	r3, [r7, #48]	; 0x30
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	695b      	ldr	r3, [r3, #20]
 8009dda:	633b      	str	r3, [r7, #48]	; 0x30
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	699b      	ldr	r3, [r3, #24]
 8009de2:	633b      	str	r3, [r7, #48]	; 0x30
 8009de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009de6:	e160      	b.n	800a0aa <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d11d      	bne.n	8009e2c <I2C_Master_ADDR+0x98>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	691b      	ldr	r3, [r3, #16]
 8009df4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009df8:	d118      	bne.n	8009e2c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	695b      	ldr	r3, [r3, #20]
 8009e04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	699b      	ldr	r3, [r3, #24]
 8009e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	681a      	ldr	r2, [r3, #0]
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009e1e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e24:	1c5a      	adds	r2, r3, #1
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	651a      	str	r2, [r3, #80]	; 0x50
 8009e2a:	e13e      	b.n	800a0aa <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e30:	b29b      	uxth	r3, r3
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d113      	bne.n	8009e5e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009e36:	2300      	movs	r3, #0
 8009e38:	62bb      	str	r3, [r7, #40]	; 0x28
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	695b      	ldr	r3, [r3, #20]
 8009e40:	62bb      	str	r3, [r7, #40]	; 0x28
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	699b      	ldr	r3, [r3, #24]
 8009e48:	62bb      	str	r3, [r7, #40]	; 0x28
 8009e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	681a      	ldr	r2, [r3, #0]
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e5a:	601a      	str	r2, [r3, #0]
 8009e5c:	e115      	b.n	800a08a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e62:	b29b      	uxth	r3, r3
 8009e64:	2b01      	cmp	r3, #1
 8009e66:	f040 808a 	bne.w	8009f7e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8009e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009e70:	d137      	bne.n	8009ee2 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	681a      	ldr	r2, [r3, #0]
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e80:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e90:	d113      	bne.n	8009eba <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	681a      	ldr	r2, [r3, #0]
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ea0:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	627b      	str	r3, [r7, #36]	; 0x24
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	695b      	ldr	r3, [r3, #20]
 8009eac:	627b      	str	r3, [r7, #36]	; 0x24
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	699b      	ldr	r3, [r3, #24]
 8009eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8009eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb8:	e0e7      	b.n	800a08a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009eba:	2300      	movs	r3, #0
 8009ebc:	623b      	str	r3, [r7, #32]
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	695b      	ldr	r3, [r3, #20]
 8009ec4:	623b      	str	r3, [r7, #32]
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	699b      	ldr	r3, [r3, #24]
 8009ecc:	623b      	str	r3, [r7, #32]
 8009ece:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	681a      	ldr	r2, [r3, #0]
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ede:	601a      	str	r2, [r3, #0]
 8009ee0:	e0d3      	b.n	800a08a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8009ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ee4:	2b08      	cmp	r3, #8
 8009ee6:	d02e      	beq.n	8009f46 <I2C_Master_ADDR+0x1b2>
 8009ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eea:	2b20      	cmp	r3, #32
 8009eec:	d02b      	beq.n	8009f46 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8009eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ef0:	2b12      	cmp	r3, #18
 8009ef2:	d102      	bne.n	8009efa <I2C_Master_ADDR+0x166>
 8009ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ef6:	2b01      	cmp	r3, #1
 8009ef8:	d125      	bne.n	8009f46 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8009efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009efc:	2b04      	cmp	r3, #4
 8009efe:	d00e      	beq.n	8009f1e <I2C_Master_ADDR+0x18a>
 8009f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f02:	2b02      	cmp	r3, #2
 8009f04:	d00b      	beq.n	8009f1e <I2C_Master_ADDR+0x18a>
 8009f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f08:	2b10      	cmp	r3, #16
 8009f0a:	d008      	beq.n	8009f1e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	681a      	ldr	r2, [r3, #0]
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f1a:	601a      	str	r2, [r3, #0]
 8009f1c:	e007      	b.n	8009f2e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	681a      	ldr	r2, [r3, #0]
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009f2c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009f2e:	2300      	movs	r3, #0
 8009f30:	61fb      	str	r3, [r7, #28]
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	695b      	ldr	r3, [r3, #20]
 8009f38:	61fb      	str	r3, [r7, #28]
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	699b      	ldr	r3, [r3, #24]
 8009f40:	61fb      	str	r3, [r7, #28]
 8009f42:	69fb      	ldr	r3, [r7, #28]
 8009f44:	e0a1      	b.n	800a08a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	681a      	ldr	r2, [r3, #0]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f54:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009f56:	2300      	movs	r3, #0
 8009f58:	61bb      	str	r3, [r7, #24]
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	695b      	ldr	r3, [r3, #20]
 8009f60:	61bb      	str	r3, [r7, #24]
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	699b      	ldr	r3, [r3, #24]
 8009f68:	61bb      	str	r3, [r7, #24]
 8009f6a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	681a      	ldr	r2, [r3, #0]
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f7a:	601a      	str	r2, [r3, #0]
 8009f7c:	e085      	b.n	800a08a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f82:	b29b      	uxth	r3, r3
 8009f84:	2b02      	cmp	r3, #2
 8009f86:	d14d      	bne.n	800a024 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8009f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f8a:	2b04      	cmp	r3, #4
 8009f8c:	d016      	beq.n	8009fbc <I2C_Master_ADDR+0x228>
 8009f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f90:	2b02      	cmp	r3, #2
 8009f92:	d013      	beq.n	8009fbc <I2C_Master_ADDR+0x228>
 8009f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f96:	2b10      	cmp	r3, #16
 8009f98:	d010      	beq.n	8009fbc <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	681a      	ldr	r2, [r3, #0]
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009fa8:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	681a      	ldr	r2, [r3, #0]
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009fb8:	601a      	str	r2, [r3, #0]
 8009fba:	e007      	b.n	8009fcc <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	681a      	ldr	r2, [r3, #0]
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009fca:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	685b      	ldr	r3, [r3, #4]
 8009fd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009fd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009fda:	d117      	bne.n	800a00c <I2C_Master_ADDR+0x278>
 8009fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fde:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009fe2:	d00b      	beq.n	8009ffc <I2C_Master_ADDR+0x268>
 8009fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fe6:	2b01      	cmp	r3, #1
 8009fe8:	d008      	beq.n	8009ffc <I2C_Master_ADDR+0x268>
 8009fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fec:	2b08      	cmp	r3, #8
 8009fee:	d005      	beq.n	8009ffc <I2C_Master_ADDR+0x268>
 8009ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ff2:	2b10      	cmp	r3, #16
 8009ff4:	d002      	beq.n	8009ffc <I2C_Master_ADDR+0x268>
 8009ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ff8:	2b20      	cmp	r3, #32
 8009ffa:	d107      	bne.n	800a00c <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	685a      	ldr	r2, [r3, #4]
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a00a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a00c:	2300      	movs	r3, #0
 800a00e:	617b      	str	r3, [r7, #20]
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	695b      	ldr	r3, [r3, #20]
 800a016:	617b      	str	r3, [r7, #20]
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	699b      	ldr	r3, [r3, #24]
 800a01e:	617b      	str	r3, [r7, #20]
 800a020:	697b      	ldr	r3, [r7, #20]
 800a022:	e032      	b.n	800a08a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	681a      	ldr	r2, [r3, #0]
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a032:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	685b      	ldr	r3, [r3, #4]
 800a03a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a03e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a042:	d117      	bne.n	800a074 <I2C_Master_ADDR+0x2e0>
 800a044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a046:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a04a:	d00b      	beq.n	800a064 <I2C_Master_ADDR+0x2d0>
 800a04c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a04e:	2b01      	cmp	r3, #1
 800a050:	d008      	beq.n	800a064 <I2C_Master_ADDR+0x2d0>
 800a052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a054:	2b08      	cmp	r3, #8
 800a056:	d005      	beq.n	800a064 <I2C_Master_ADDR+0x2d0>
 800a058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a05a:	2b10      	cmp	r3, #16
 800a05c:	d002      	beq.n	800a064 <I2C_Master_ADDR+0x2d0>
 800a05e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a060:	2b20      	cmp	r3, #32
 800a062:	d107      	bne.n	800a074 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	685a      	ldr	r2, [r3, #4]
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a072:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a074:	2300      	movs	r3, #0
 800a076:	613b      	str	r3, [r7, #16]
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	695b      	ldr	r3, [r3, #20]
 800a07e:	613b      	str	r3, [r7, #16]
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	699b      	ldr	r3, [r3, #24]
 800a086:	613b      	str	r3, [r7, #16]
 800a088:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2200      	movs	r2, #0
 800a08e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800a090:	e00b      	b.n	800a0aa <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a092:	2300      	movs	r3, #0
 800a094:	60fb      	str	r3, [r7, #12]
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	695b      	ldr	r3, [r3, #20]
 800a09c:	60fb      	str	r3, [r7, #12]
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	699b      	ldr	r3, [r3, #24]
 800a0a4:	60fb      	str	r3, [r7, #12]
 800a0a6:	68fb      	ldr	r3, [r7, #12]
}
 800a0a8:	e7ff      	b.n	800a0aa <I2C_Master_ADDR+0x316>
 800a0aa:	bf00      	nop
 800a0ac:	3744      	adds	r7, #68	; 0x44
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bc80      	pop	{r7}
 800a0b2:	4770      	bx	lr

0800a0b4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b084      	sub	sp, #16
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0c2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0c8:	b29b      	uxth	r3, r3
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d02b      	beq.n	800a126 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d2:	781a      	ldrb	r2, [r3, #0]
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0de:	1c5a      	adds	r2, r3, #1
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0e8:	b29b      	uxth	r3, r3
 800a0ea:	3b01      	subs	r3, #1
 800a0ec:	b29a      	uxth	r2, r3
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0f6:	b29b      	uxth	r3, r3
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d114      	bne.n	800a126 <I2C_SlaveTransmit_TXE+0x72>
 800a0fc:	7bfb      	ldrb	r3, [r7, #15]
 800a0fe:	2b29      	cmp	r3, #41	; 0x29
 800a100:	d111      	bne.n	800a126 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	685a      	ldr	r2, [r3, #4]
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a110:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2221      	movs	r2, #33	; 0x21
 800a116:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2228      	movs	r2, #40	; 0x28
 800a11c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f7ff f9c9 	bl	80094b8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800a126:	bf00      	nop
 800a128:	3710      	adds	r7, #16
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}

0800a12e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800a12e:	b480      	push	{r7}
 800a130:	b083      	sub	sp, #12
 800a132:	af00      	add	r7, sp, #0
 800a134:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a13a:	b29b      	uxth	r3, r3
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d011      	beq.n	800a164 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a144:	781a      	ldrb	r2, [r3, #0]
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a150:	1c5a      	adds	r2, r3, #1
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a15a:	b29b      	uxth	r3, r3
 800a15c:	3b01      	subs	r3, #1
 800a15e:	b29a      	uxth	r2, r3
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800a164:	bf00      	nop
 800a166:	370c      	adds	r7, #12
 800a168:	46bd      	mov	sp, r7
 800a16a:	bc80      	pop	{r7}
 800a16c:	4770      	bx	lr

0800a16e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800a16e:	b580      	push	{r7, lr}
 800a170:	b084      	sub	sp, #16
 800a172:	af00      	add	r7, sp, #0
 800a174:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a17c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a182:	b29b      	uxth	r3, r3
 800a184:	2b00      	cmp	r3, #0
 800a186:	d02c      	beq.n	800a1e2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	691a      	ldr	r2, [r3, #16]
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a192:	b2d2      	uxtb	r2, r2
 800a194:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a19a:	1c5a      	adds	r2, r3, #1
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1a4:	b29b      	uxth	r3, r3
 800a1a6:	3b01      	subs	r3, #1
 800a1a8:	b29a      	uxth	r2, r3
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1b2:	b29b      	uxth	r3, r3
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d114      	bne.n	800a1e2 <I2C_SlaveReceive_RXNE+0x74>
 800a1b8:	7bfb      	ldrb	r3, [r7, #15]
 800a1ba:	2b2a      	cmp	r3, #42	; 0x2a
 800a1bc:	d111      	bne.n	800a1e2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	685a      	ldr	r2, [r3, #4]
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a1cc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2222      	movs	r2, #34	; 0x22
 800a1d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2228      	movs	r2, #40	; 0x28
 800a1d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f7ff f974 	bl	80094ca <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800a1e2:	bf00      	nop
 800a1e4:	3710      	adds	r7, #16
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}

0800a1ea <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800a1ea:	b480      	push	{r7}
 800a1ec:	b083      	sub	sp, #12
 800a1ee:	af00      	add	r7, sp, #0
 800a1f0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1f6:	b29b      	uxth	r3, r3
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d012      	beq.n	800a222 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	691a      	ldr	r2, [r3, #16]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a206:	b2d2      	uxtb	r2, r2
 800a208:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a20e:	1c5a      	adds	r2, r3, #1
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a218:	b29b      	uxth	r3, r3
 800a21a:	3b01      	subs	r3, #1
 800a21c:	b29a      	uxth	r2, r3
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800a222:	bf00      	nop
 800a224:	370c      	adds	r7, #12
 800a226:	46bd      	mov	sp, r7
 800a228:	bc80      	pop	{r7}
 800a22a:	4770      	bx	lr

0800a22c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b084      	sub	sp, #16
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
 800a234:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800a236:	2300      	movs	r3, #0
 800a238:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a240:	b2db      	uxtb	r3, r3
 800a242:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a246:	2b28      	cmp	r3, #40	; 0x28
 800a248:	d127      	bne.n	800a29a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	685a      	ldr	r2, [r3, #4]
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a258:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	089b      	lsrs	r3, r3, #2
 800a25e:	f003 0301 	and.w	r3, r3, #1
 800a262:	2b00      	cmp	r3, #0
 800a264:	d101      	bne.n	800a26a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800a266:	2301      	movs	r3, #1
 800a268:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	09db      	lsrs	r3, r3, #7
 800a26e:	f003 0301 	and.w	r3, r3, #1
 800a272:	2b00      	cmp	r3, #0
 800a274:	d103      	bne.n	800a27e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	68db      	ldr	r3, [r3, #12]
 800a27a:	81bb      	strh	r3, [r7, #12]
 800a27c:	e002      	b.n	800a284 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	699b      	ldr	r3, [r3, #24]
 800a282:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2200      	movs	r2, #0
 800a288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800a28c:	89ba      	ldrh	r2, [r7, #12]
 800a28e:	7bfb      	ldrb	r3, [r7, #15]
 800a290:	4619      	mov	r1, r3
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f7ff f922 	bl	80094dc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800a298:	e00e      	b.n	800a2b8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a29a:	2300      	movs	r3, #0
 800a29c:	60bb      	str	r3, [r7, #8]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	695b      	ldr	r3, [r3, #20]
 800a2a4:	60bb      	str	r3, [r7, #8]
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	699b      	ldr	r3, [r3, #24]
 800a2ac:	60bb      	str	r3, [r7, #8]
 800a2ae:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800a2b8:	bf00      	nop
 800a2ba:	3710      	adds	r7, #16
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}

0800a2c0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b084      	sub	sp, #16
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2ce:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	685a      	ldr	r2, [r3, #4]
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a2de:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	60bb      	str	r3, [r7, #8]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	695b      	ldr	r3, [r3, #20]
 800a2ea:	60bb      	str	r3, [r7, #8]
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	681a      	ldr	r2, [r3, #0]
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f042 0201 	orr.w	r2, r2, #1
 800a2fa:	601a      	str	r2, [r3, #0]
 800a2fc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	681a      	ldr	r2, [r3, #0]
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a30c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	685b      	ldr	r3, [r3, #4]
 800a314:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a318:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a31c:	d172      	bne.n	800a404 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800a31e:	7bfb      	ldrb	r3, [r7, #15]
 800a320:	2b22      	cmp	r3, #34	; 0x22
 800a322:	d002      	beq.n	800a32a <I2C_Slave_STOPF+0x6a>
 800a324:	7bfb      	ldrb	r3, [r7, #15]
 800a326:	2b2a      	cmp	r3, #42	; 0x2a
 800a328:	d135      	bne.n	800a396 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	685b      	ldr	r3, [r3, #4]
 800a332:	b29a      	uxth	r2, r3
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a33c:	b29b      	uxth	r3, r3
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d005      	beq.n	800a34e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a346:	f043 0204 	orr.w	r2, r3, #4
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	685a      	ldr	r2, [r3, #4]
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a35c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a362:	4618      	mov	r0, r3
 800a364:	f7f9 f9a0 	bl	80036a8 <HAL_DMA_GetState>
 800a368:	4603      	mov	r3, r0
 800a36a:	2b01      	cmp	r3, #1
 800a36c:	d049      	beq.n	800a402 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a372:	4a69      	ldr	r2, [pc, #420]	; (800a518 <I2C_Slave_STOPF+0x258>)
 800a374:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a37a:	4618      	mov	r0, r3
 800a37c:	f7f8 ff5e 	bl	800323c <HAL_DMA_Abort_IT>
 800a380:	4603      	mov	r3, r0
 800a382:	2b00      	cmp	r3, #0
 800a384:	d03d      	beq.n	800a402 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a38a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a38c:	687a      	ldr	r2, [r7, #4]
 800a38e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a390:	4610      	mov	r0, r2
 800a392:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a394:	e035      	b.n	800a402 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	685b      	ldr	r3, [r3, #4]
 800a39e:	b29a      	uxth	r2, r3
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3a8:	b29b      	uxth	r3, r3
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d005      	beq.n	800a3ba <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3b2:	f043 0204 	orr.w	r2, r3, #4
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	685a      	ldr	r2, [r3, #4]
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a3c8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f7f9 f96a 	bl	80036a8 <HAL_DMA_GetState>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	2b01      	cmp	r3, #1
 800a3d8:	d014      	beq.n	800a404 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3de:	4a4e      	ldr	r2, [pc, #312]	; (800a518 <I2C_Slave_STOPF+0x258>)
 800a3e0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f7f8 ff28 	bl	800323c <HAL_DMA_Abort_IT>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d008      	beq.n	800a404 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3f8:	687a      	ldr	r2, [r7, #4]
 800a3fa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a3fc:	4610      	mov	r0, r2
 800a3fe:	4798      	blx	r3
 800a400:	e000      	b.n	800a404 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a402:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a408:	b29b      	uxth	r3, r3
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d03e      	beq.n	800a48c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	695b      	ldr	r3, [r3, #20]
 800a414:	f003 0304 	and.w	r3, r3, #4
 800a418:	2b04      	cmp	r3, #4
 800a41a:	d112      	bne.n	800a442 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	691a      	ldr	r2, [r3, #16]
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a426:	b2d2      	uxtb	r2, r2
 800a428:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a42e:	1c5a      	adds	r2, r3, #1
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a438:	b29b      	uxth	r3, r3
 800a43a:	3b01      	subs	r3, #1
 800a43c:	b29a      	uxth	r2, r3
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	695b      	ldr	r3, [r3, #20]
 800a448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a44c:	2b40      	cmp	r3, #64	; 0x40
 800a44e:	d112      	bne.n	800a476 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	691a      	ldr	r2, [r3, #16]
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a45a:	b2d2      	uxtb	r2, r2
 800a45c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a462:	1c5a      	adds	r2, r3, #1
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a46c:	b29b      	uxth	r3, r3
 800a46e:	3b01      	subs	r3, #1
 800a470:	b29a      	uxth	r2, r3
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a47a:	b29b      	uxth	r3, r3
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d005      	beq.n	800a48c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a484:	f043 0204 	orr.w	r2, r3, #4
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a490:	2b00      	cmp	r3, #0
 800a492:	d003      	beq.n	800a49c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f000 f8b7 	bl	800a608 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800a49a:	e039      	b.n	800a510 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800a49c:	7bfb      	ldrb	r3, [r7, #15]
 800a49e:	2b2a      	cmp	r3, #42	; 0x2a
 800a4a0:	d109      	bne.n	800a4b6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2228      	movs	r2, #40	; 0x28
 800a4ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f7ff f80a 	bl	80094ca <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a4bc:	b2db      	uxtb	r3, r3
 800a4be:	2b28      	cmp	r3, #40	; 0x28
 800a4c0:	d111      	bne.n	800a4e6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	4a15      	ldr	r2, [pc, #84]	; (800a51c <I2C_Slave_STOPF+0x25c>)
 800a4c6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2220      	movs	r2, #32
 800a4d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f7ff f809 	bl	80094f6 <HAL_I2C_ListenCpltCallback>
}
 800a4e4:	e014      	b.n	800a510 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4ea:	2b22      	cmp	r3, #34	; 0x22
 800a4ec:	d002      	beq.n	800a4f4 <I2C_Slave_STOPF+0x234>
 800a4ee:	7bfb      	ldrb	r3, [r7, #15]
 800a4f0:	2b22      	cmp	r3, #34	; 0x22
 800a4f2:	d10d      	bne.n	800a510 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2220      	movs	r2, #32
 800a4fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2200      	movs	r2, #0
 800a506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f7fe ffdd 	bl	80094ca <HAL_I2C_SlaveRxCpltCallback>
}
 800a510:	bf00      	nop
 800a512:	3710      	adds	r7, #16
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}
 800a518:	0800b021 	.word	0x0800b021
 800a51c:	ffff0000 	.word	0xffff0000

0800a520 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b084      	sub	sp, #16
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a52e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a534:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800a536:	68bb      	ldr	r3, [r7, #8]
 800a538:	2b08      	cmp	r3, #8
 800a53a:	d002      	beq.n	800a542 <I2C_Slave_AF+0x22>
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	2b20      	cmp	r3, #32
 800a540:	d129      	bne.n	800a596 <I2C_Slave_AF+0x76>
 800a542:	7bfb      	ldrb	r3, [r7, #15]
 800a544:	2b28      	cmp	r3, #40	; 0x28
 800a546:	d126      	bne.n	800a596 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	4a2e      	ldr	r2, [pc, #184]	; (800a604 <I2C_Slave_AF+0xe4>)
 800a54c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	685a      	ldr	r2, [r3, #4]
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a55c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a566:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	681a      	ldr	r2, [r3, #0]
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a576:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2200      	movs	r2, #0
 800a57c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2220      	movs	r2, #32
 800a582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2200      	movs	r2, #0
 800a58a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f7fe ffb1 	bl	80094f6 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800a594:	e031      	b.n	800a5fa <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800a596:	7bfb      	ldrb	r3, [r7, #15]
 800a598:	2b21      	cmp	r3, #33	; 0x21
 800a59a:	d129      	bne.n	800a5f0 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	4a19      	ldr	r2, [pc, #100]	; (800a604 <I2C_Slave_AF+0xe4>)
 800a5a0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2221      	movs	r2, #33	; 0x21
 800a5a6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2220      	movs	r2, #32
 800a5ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	685a      	ldr	r2, [r3, #4]
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a5c6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a5d0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	681a      	ldr	r2, [r3, #0]
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a5e0:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f7fb f86b 	bl	80056be <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f7fe ff65 	bl	80094b8 <HAL_I2C_SlaveTxCpltCallback>
}
 800a5ee:	e004      	b.n	800a5fa <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a5f8:	615a      	str	r2, [r3, #20]
}
 800a5fa:	bf00      	nop
 800a5fc:	3710      	adds	r7, #16
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}
 800a602:	bf00      	nop
 800a604:	ffff0000 	.word	0xffff0000

0800a608 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b084      	sub	sp, #16
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a616:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a61e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800a620:	7bbb      	ldrb	r3, [r7, #14]
 800a622:	2b10      	cmp	r3, #16
 800a624:	d002      	beq.n	800a62c <I2C_ITError+0x24>
 800a626:	7bbb      	ldrb	r3, [r7, #14]
 800a628:	2b40      	cmp	r3, #64	; 0x40
 800a62a:	d10a      	bne.n	800a642 <I2C_ITError+0x3a>
 800a62c:	7bfb      	ldrb	r3, [r7, #15]
 800a62e:	2b22      	cmp	r3, #34	; 0x22
 800a630:	d107      	bne.n	800a642 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	681a      	ldr	r2, [r3, #0]
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a640:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a642:	7bfb      	ldrb	r3, [r7, #15]
 800a644:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a648:	2b28      	cmp	r3, #40	; 0x28
 800a64a:	d107      	bne.n	800a65c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2200      	movs	r2, #0
 800a650:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2228      	movs	r2, #40	; 0x28
 800a656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a65a:	e015      	b.n	800a688 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	685b      	ldr	r3, [r3, #4]
 800a662:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a666:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a66a:	d00a      	beq.n	800a682 <I2C_ITError+0x7a>
 800a66c:	7bfb      	ldrb	r3, [r7, #15]
 800a66e:	2b60      	cmp	r3, #96	; 0x60
 800a670:	d007      	beq.n	800a682 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2220      	movs	r2, #32
 800a676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2200      	movs	r2, #0
 800a67e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2200      	movs	r2, #0
 800a686:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	685b      	ldr	r3, [r3, #4]
 800a68e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a692:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a696:	d162      	bne.n	800a75e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	685a      	ldr	r2, [r3, #4]
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a6a6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a6b0:	b2db      	uxtb	r3, r3
 800a6b2:	2b01      	cmp	r3, #1
 800a6b4:	d020      	beq.n	800a6f8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6ba:	4a6a      	ldr	r2, [pc, #424]	; (800a864 <I2C_ITError+0x25c>)
 800a6bc:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f7f8 fdba 	bl	800323c <HAL_DMA_Abort_IT>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	f000 8089 	beq.w	800a7e2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	681a      	ldr	r2, [r3, #0]
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f022 0201 	bic.w	r2, r2, #1
 800a6de:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2220      	movs	r2, #32
 800a6e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6ee:	687a      	ldr	r2, [r7, #4]
 800a6f0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a6f2:	4610      	mov	r0, r2
 800a6f4:	4798      	blx	r3
 800a6f6:	e074      	b.n	800a7e2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6fc:	4a59      	ldr	r2, [pc, #356]	; (800a864 <I2C_ITError+0x25c>)
 800a6fe:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a704:	4618      	mov	r0, r3
 800a706:	f7f8 fd99 	bl	800323c <HAL_DMA_Abort_IT>
 800a70a:	4603      	mov	r3, r0
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d068      	beq.n	800a7e2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	695b      	ldr	r3, [r3, #20]
 800a716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a71a:	2b40      	cmp	r3, #64	; 0x40
 800a71c:	d10b      	bne.n	800a736 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	691a      	ldr	r2, [r3, #16]
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a728:	b2d2      	uxtb	r2, r2
 800a72a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a730:	1c5a      	adds	r2, r3, #1
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	681a      	ldr	r2, [r3, #0]
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f022 0201 	bic.w	r2, r2, #1
 800a744:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2220      	movs	r2, #32
 800a74a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a754:	687a      	ldr	r2, [r7, #4]
 800a756:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a758:	4610      	mov	r0, r2
 800a75a:	4798      	blx	r3
 800a75c:	e041      	b.n	800a7e2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a764:	b2db      	uxtb	r3, r3
 800a766:	2b60      	cmp	r3, #96	; 0x60
 800a768:	d125      	bne.n	800a7b6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2220      	movs	r2, #32
 800a76e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2200      	movs	r2, #0
 800a776:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	695b      	ldr	r3, [r3, #20]
 800a77e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a782:	2b40      	cmp	r3, #64	; 0x40
 800a784:	d10b      	bne.n	800a79e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	691a      	ldr	r2, [r3, #16]
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a790:	b2d2      	uxtb	r2, r2
 800a792:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a798:	1c5a      	adds	r2, r3, #1
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	681a      	ldr	r2, [r3, #0]
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f022 0201 	bic.w	r2, r2, #1
 800a7ac:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	f7fe fec5 	bl	800953e <HAL_I2C_AbortCpltCallback>
 800a7b4:	e015      	b.n	800a7e2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	695b      	ldr	r3, [r3, #20]
 800a7bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7c0:	2b40      	cmp	r3, #64	; 0x40
 800a7c2:	d10b      	bne.n	800a7dc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	691a      	ldr	r2, [r3, #16]
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ce:	b2d2      	uxtb	r2, r2
 800a7d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7d6:	1c5a      	adds	r2, r3, #1
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f7fe fea5 	bl	800952c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7e6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	f003 0301 	and.w	r3, r3, #1
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d10e      	bne.n	800a810 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d109      	bne.n	800a810 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800a802:	2b00      	cmp	r3, #0
 800a804:	d104      	bne.n	800a810 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800a806:	68bb      	ldr	r3, [r7, #8]
 800a808:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d007      	beq.n	800a820 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	685a      	ldr	r2, [r3, #4]
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a81e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a826:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a82c:	f003 0304 	and.w	r3, r3, #4
 800a830:	2b04      	cmp	r3, #4
 800a832:	d113      	bne.n	800a85c <I2C_ITError+0x254>
 800a834:	7bfb      	ldrb	r3, [r7, #15]
 800a836:	2b28      	cmp	r3, #40	; 0x28
 800a838:	d110      	bne.n	800a85c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	4a0a      	ldr	r2, [pc, #40]	; (800a868 <I2C_ITError+0x260>)
 800a83e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2200      	movs	r2, #0
 800a844:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2220      	movs	r2, #32
 800a84a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2200      	movs	r2, #0
 800a852:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f7fe fe4d 	bl	80094f6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a85c:	bf00      	nop
 800a85e:	3710      	adds	r7, #16
 800a860:	46bd      	mov	sp, r7
 800a862:	bd80      	pop	{r7, pc}
 800a864:	0800b021 	.word	0x0800b021
 800a868:	ffff0000 	.word	0xffff0000

0800a86c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b088      	sub	sp, #32
 800a870:	af02      	add	r7, sp, #8
 800a872:	60f8      	str	r0, [r7, #12]
 800a874:	607a      	str	r2, [r7, #4]
 800a876:	603b      	str	r3, [r7, #0]
 800a878:	460b      	mov	r3, r1
 800a87a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a880:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a882:	697b      	ldr	r3, [r7, #20]
 800a884:	2b08      	cmp	r3, #8
 800a886:	d006      	beq.n	800a896 <I2C_MasterRequestWrite+0x2a>
 800a888:	697b      	ldr	r3, [r7, #20]
 800a88a:	2b01      	cmp	r3, #1
 800a88c:	d003      	beq.n	800a896 <I2C_MasterRequestWrite+0x2a>
 800a88e:	697b      	ldr	r3, [r7, #20]
 800a890:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a894:	d108      	bne.n	800a8a8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	681a      	ldr	r2, [r3, #0]
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a8a4:	601a      	str	r2, [r3, #0]
 800a8a6:	e00b      	b.n	800a8c0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8ac:	2b12      	cmp	r3, #18
 800a8ae:	d107      	bne.n	800a8c0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	681a      	ldr	r2, [r3, #0]
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a8be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	9300      	str	r3, [sp, #0]
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a8cc:	68f8      	ldr	r0, [r7, #12]
 800a8ce:	f000 fc4f 	bl	800b170 <I2C_WaitOnFlagUntilTimeout>
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d00d      	beq.n	800a8f4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8e6:	d103      	bne.n	800a8f0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a8ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a8f0:	2303      	movs	r3, #3
 800a8f2:	e035      	b.n	800a960 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	691b      	ldr	r3, [r3, #16]
 800a8f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a8fc:	d108      	bne.n	800a910 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a8fe:	897b      	ldrh	r3, [r7, #10]
 800a900:	b2db      	uxtb	r3, r3
 800a902:	461a      	mov	r2, r3
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a90c:	611a      	str	r2, [r3, #16]
 800a90e:	e01b      	b.n	800a948 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a910:	897b      	ldrh	r3, [r7, #10]
 800a912:	11db      	asrs	r3, r3, #7
 800a914:	b2db      	uxtb	r3, r3
 800a916:	f003 0306 	and.w	r3, r3, #6
 800a91a:	b2db      	uxtb	r3, r3
 800a91c:	f063 030f 	orn	r3, r3, #15
 800a920:	b2da      	uxtb	r2, r3
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	687a      	ldr	r2, [r7, #4]
 800a92c:	490e      	ldr	r1, [pc, #56]	; (800a968 <I2C_MasterRequestWrite+0xfc>)
 800a92e:	68f8      	ldr	r0, [r7, #12]
 800a930:	f000 fc98 	bl	800b264 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a934:	4603      	mov	r3, r0
 800a936:	2b00      	cmp	r3, #0
 800a938:	d001      	beq.n	800a93e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a93a:	2301      	movs	r3, #1
 800a93c:	e010      	b.n	800a960 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a93e:	897b      	ldrh	r3, [r7, #10]
 800a940:	b2da      	uxtb	r2, r3
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	687a      	ldr	r2, [r7, #4]
 800a94c:	4907      	ldr	r1, [pc, #28]	; (800a96c <I2C_MasterRequestWrite+0x100>)
 800a94e:	68f8      	ldr	r0, [r7, #12]
 800a950:	f000 fc88 	bl	800b264 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a954:	4603      	mov	r3, r0
 800a956:	2b00      	cmp	r3, #0
 800a958:	d001      	beq.n	800a95e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a95a:	2301      	movs	r3, #1
 800a95c:	e000      	b.n	800a960 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a95e:	2300      	movs	r3, #0
}
 800a960:	4618      	mov	r0, r3
 800a962:	3718      	adds	r7, #24
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}
 800a968:	00010008 	.word	0x00010008
 800a96c:	00010002 	.word	0x00010002

0800a970 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b088      	sub	sp, #32
 800a974:	af02      	add	r7, sp, #8
 800a976:	60f8      	str	r0, [r7, #12]
 800a978:	607a      	str	r2, [r7, #4]
 800a97a:	603b      	str	r3, [r7, #0]
 800a97c:	460b      	mov	r3, r1
 800a97e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a984:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	681a      	ldr	r2, [r3, #0]
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a994:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	2b08      	cmp	r3, #8
 800a99a:	d006      	beq.n	800a9aa <I2C_MasterRequestRead+0x3a>
 800a99c:	697b      	ldr	r3, [r7, #20]
 800a99e:	2b01      	cmp	r3, #1
 800a9a0:	d003      	beq.n	800a9aa <I2C_MasterRequestRead+0x3a>
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a9a8:	d108      	bne.n	800a9bc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	681a      	ldr	r2, [r3, #0]
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a9b8:	601a      	str	r2, [r3, #0]
 800a9ba:	e00b      	b.n	800a9d4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9c0:	2b11      	cmp	r3, #17
 800a9c2:	d107      	bne.n	800a9d4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	681a      	ldr	r2, [r3, #0]
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a9d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	9300      	str	r3, [sp, #0]
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a9e0:	68f8      	ldr	r0, [r7, #12]
 800a9e2:	f000 fbc5 	bl	800b170 <I2C_WaitOnFlagUntilTimeout>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d00d      	beq.n	800aa08 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9fa:	d103      	bne.n	800aa04 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa02:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800aa04:	2303      	movs	r3, #3
 800aa06:	e079      	b.n	800aafc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	691b      	ldr	r3, [r3, #16]
 800aa0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa10:	d108      	bne.n	800aa24 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800aa12:	897b      	ldrh	r3, [r7, #10]
 800aa14:	b2db      	uxtb	r3, r3
 800aa16:	f043 0301 	orr.w	r3, r3, #1
 800aa1a:	b2da      	uxtb	r2, r3
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	611a      	str	r2, [r3, #16]
 800aa22:	e05f      	b.n	800aae4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800aa24:	897b      	ldrh	r3, [r7, #10]
 800aa26:	11db      	asrs	r3, r3, #7
 800aa28:	b2db      	uxtb	r3, r3
 800aa2a:	f003 0306 	and.w	r3, r3, #6
 800aa2e:	b2db      	uxtb	r3, r3
 800aa30:	f063 030f 	orn	r3, r3, #15
 800aa34:	b2da      	uxtb	r2, r3
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	687a      	ldr	r2, [r7, #4]
 800aa40:	4930      	ldr	r1, [pc, #192]	; (800ab04 <I2C_MasterRequestRead+0x194>)
 800aa42:	68f8      	ldr	r0, [r7, #12]
 800aa44:	f000 fc0e 	bl	800b264 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d001      	beq.n	800aa52 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800aa4e:	2301      	movs	r3, #1
 800aa50:	e054      	b.n	800aafc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800aa52:	897b      	ldrh	r3, [r7, #10]
 800aa54:	b2da      	uxtb	r2, r3
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	687a      	ldr	r2, [r7, #4]
 800aa60:	4929      	ldr	r1, [pc, #164]	; (800ab08 <I2C_MasterRequestRead+0x198>)
 800aa62:	68f8      	ldr	r0, [r7, #12]
 800aa64:	f000 fbfe 	bl	800b264 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d001      	beq.n	800aa72 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800aa6e:	2301      	movs	r3, #1
 800aa70:	e044      	b.n	800aafc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aa72:	2300      	movs	r3, #0
 800aa74:	613b      	str	r3, [r7, #16]
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	695b      	ldr	r3, [r3, #20]
 800aa7c:	613b      	str	r3, [r7, #16]
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	699b      	ldr	r3, [r3, #24]
 800aa84:	613b      	str	r3, [r7, #16]
 800aa86:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	681a      	ldr	r2, [r3, #0]
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aa96:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	9300      	str	r3, [sp, #0]
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800aaa4:	68f8      	ldr	r0, [r7, #12]
 800aaa6:	f000 fb63 	bl	800b170 <I2C_WaitOnFlagUntilTimeout>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d00d      	beq.n	800aacc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aaba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aabe:	d103      	bne.n	800aac8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aac6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800aac8:	2303      	movs	r3, #3
 800aaca:	e017      	b.n	800aafc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800aacc:	897b      	ldrh	r3, [r7, #10]
 800aace:	11db      	asrs	r3, r3, #7
 800aad0:	b2db      	uxtb	r3, r3
 800aad2:	f003 0306 	and.w	r3, r3, #6
 800aad6:	b2db      	uxtb	r3, r3
 800aad8:	f063 030e 	orn	r3, r3, #14
 800aadc:	b2da      	uxtb	r2, r3
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	687a      	ldr	r2, [r7, #4]
 800aae8:	4907      	ldr	r1, [pc, #28]	; (800ab08 <I2C_MasterRequestRead+0x198>)
 800aaea:	68f8      	ldr	r0, [r7, #12]
 800aaec:	f000 fbba 	bl	800b264 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d001      	beq.n	800aafa <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	e000      	b.n	800aafc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800aafa:	2300      	movs	r3, #0
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	3718      	adds	r7, #24
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}
 800ab04:	00010008 	.word	0x00010008
 800ab08:	00010002 	.word	0x00010002

0800ab0c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b088      	sub	sp, #32
 800ab10:	af02      	add	r7, sp, #8
 800ab12:	60f8      	str	r0, [r7, #12]
 800ab14:	4608      	mov	r0, r1
 800ab16:	4611      	mov	r1, r2
 800ab18:	461a      	mov	r2, r3
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	817b      	strh	r3, [r7, #10]
 800ab1e:	460b      	mov	r3, r1
 800ab20:	813b      	strh	r3, [r7, #8]
 800ab22:	4613      	mov	r3, r2
 800ab24:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	681a      	ldr	r2, [r3, #0]
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ab34:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ab36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab38:	9300      	str	r3, [sp, #0]
 800ab3a:	6a3b      	ldr	r3, [r7, #32]
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ab42:	68f8      	ldr	r0, [r7, #12]
 800ab44:	f000 fb14 	bl	800b170 <I2C_WaitOnFlagUntilTimeout>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d00d      	beq.n	800ab6a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab5c:	d103      	bne.n	800ab66 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ab64:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ab66:	2303      	movs	r3, #3
 800ab68:	e05f      	b.n	800ac2a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ab6a:	897b      	ldrh	r3, [r7, #10]
 800ab6c:	b2db      	uxtb	r3, r3
 800ab6e:	461a      	mov	r2, r3
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800ab78:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ab7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab7c:	6a3a      	ldr	r2, [r7, #32]
 800ab7e:	492d      	ldr	r1, [pc, #180]	; (800ac34 <I2C_RequestMemoryWrite+0x128>)
 800ab80:	68f8      	ldr	r0, [r7, #12]
 800ab82:	f000 fb6f 	bl	800b264 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ab86:	4603      	mov	r3, r0
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d001      	beq.n	800ab90 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	e04c      	b.n	800ac2a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ab90:	2300      	movs	r3, #0
 800ab92:	617b      	str	r3, [r7, #20]
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	695b      	ldr	r3, [r3, #20]
 800ab9a:	617b      	str	r3, [r7, #20]
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	699b      	ldr	r3, [r3, #24]
 800aba2:	617b      	str	r3, [r7, #20]
 800aba4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aba8:	6a39      	ldr	r1, [r7, #32]
 800abaa:	68f8      	ldr	r0, [r7, #12]
 800abac:	f000 fbfa 	bl	800b3a4 <I2C_WaitOnTXEFlagUntilTimeout>
 800abb0:	4603      	mov	r3, r0
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d00d      	beq.n	800abd2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abba:	2b04      	cmp	r3, #4
 800abbc:	d107      	bne.n	800abce <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	681a      	ldr	r2, [r3, #0]
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800abcc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800abce:	2301      	movs	r3, #1
 800abd0:	e02b      	b.n	800ac2a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800abd2:	88fb      	ldrh	r3, [r7, #6]
 800abd4:	2b01      	cmp	r3, #1
 800abd6:	d105      	bne.n	800abe4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800abd8:	893b      	ldrh	r3, [r7, #8]
 800abda:	b2da      	uxtb	r2, r3
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	611a      	str	r2, [r3, #16]
 800abe2:	e021      	b.n	800ac28 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800abe4:	893b      	ldrh	r3, [r7, #8]
 800abe6:	0a1b      	lsrs	r3, r3, #8
 800abe8:	b29b      	uxth	r3, r3
 800abea:	b2da      	uxtb	r2, r3
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800abf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abf4:	6a39      	ldr	r1, [r7, #32]
 800abf6:	68f8      	ldr	r0, [r7, #12]
 800abf8:	f000 fbd4 	bl	800b3a4 <I2C_WaitOnTXEFlagUntilTimeout>
 800abfc:	4603      	mov	r3, r0
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d00d      	beq.n	800ac1e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac06:	2b04      	cmp	r3, #4
 800ac08:	d107      	bne.n	800ac1a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	681a      	ldr	r2, [r3, #0]
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ac18:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800ac1a:	2301      	movs	r3, #1
 800ac1c:	e005      	b.n	800ac2a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ac1e:	893b      	ldrh	r3, [r7, #8]
 800ac20:	b2da      	uxtb	r2, r3
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800ac28:	2300      	movs	r3, #0
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3718      	adds	r7, #24
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd80      	pop	{r7, pc}
 800ac32:	bf00      	nop
 800ac34:	00010002 	.word	0x00010002

0800ac38 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b088      	sub	sp, #32
 800ac3c:	af02      	add	r7, sp, #8
 800ac3e:	60f8      	str	r0, [r7, #12]
 800ac40:	4608      	mov	r0, r1
 800ac42:	4611      	mov	r1, r2
 800ac44:	461a      	mov	r2, r3
 800ac46:	4603      	mov	r3, r0
 800ac48:	817b      	strh	r3, [r7, #10]
 800ac4a:	460b      	mov	r3, r1
 800ac4c:	813b      	strh	r3, [r7, #8]
 800ac4e:	4613      	mov	r3, r2
 800ac50:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	681a      	ldr	r2, [r3, #0]
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ac60:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	681a      	ldr	r2, [r3, #0]
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ac70:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ac72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac74:	9300      	str	r3, [sp, #0]
 800ac76:	6a3b      	ldr	r3, [r7, #32]
 800ac78:	2200      	movs	r2, #0
 800ac7a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ac7e:	68f8      	ldr	r0, [r7, #12]
 800ac80:	f000 fa76 	bl	800b170 <I2C_WaitOnFlagUntilTimeout>
 800ac84:	4603      	mov	r3, r0
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d00d      	beq.n	800aca6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac98:	d103      	bne.n	800aca2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aca0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800aca2:	2303      	movs	r3, #3
 800aca4:	e0aa      	b.n	800adfc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800aca6:	897b      	ldrh	r3, [r7, #10]
 800aca8:	b2db      	uxtb	r3, r3
 800acaa:	461a      	mov	r2, r3
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800acb4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800acb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb8:	6a3a      	ldr	r2, [r7, #32]
 800acba:	4952      	ldr	r1, [pc, #328]	; (800ae04 <I2C_RequestMemoryRead+0x1cc>)
 800acbc:	68f8      	ldr	r0, [r7, #12]
 800acbe:	f000 fad1 	bl	800b264 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800acc2:	4603      	mov	r3, r0
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d001      	beq.n	800accc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800acc8:	2301      	movs	r3, #1
 800acca:	e097      	b.n	800adfc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800accc:	2300      	movs	r3, #0
 800acce:	617b      	str	r3, [r7, #20]
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	695b      	ldr	r3, [r3, #20]
 800acd6:	617b      	str	r3, [r7, #20]
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	699b      	ldr	r3, [r3, #24]
 800acde:	617b      	str	r3, [r7, #20]
 800ace0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ace2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ace4:	6a39      	ldr	r1, [r7, #32]
 800ace6:	68f8      	ldr	r0, [r7, #12]
 800ace8:	f000 fb5c 	bl	800b3a4 <I2C_WaitOnTXEFlagUntilTimeout>
 800acec:	4603      	mov	r3, r0
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d00d      	beq.n	800ad0e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acf6:	2b04      	cmp	r3, #4
 800acf8:	d107      	bne.n	800ad0a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	681a      	ldr	r2, [r3, #0]
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ad08:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	e076      	b.n	800adfc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ad0e:	88fb      	ldrh	r3, [r7, #6]
 800ad10:	2b01      	cmp	r3, #1
 800ad12:	d105      	bne.n	800ad20 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ad14:	893b      	ldrh	r3, [r7, #8]
 800ad16:	b2da      	uxtb	r2, r3
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	611a      	str	r2, [r3, #16]
 800ad1e:	e021      	b.n	800ad64 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800ad20:	893b      	ldrh	r3, [r7, #8]
 800ad22:	0a1b      	lsrs	r3, r3, #8
 800ad24:	b29b      	uxth	r3, r3
 800ad26:	b2da      	uxtb	r2, r3
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ad2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad30:	6a39      	ldr	r1, [r7, #32]
 800ad32:	68f8      	ldr	r0, [r7, #12]
 800ad34:	f000 fb36 	bl	800b3a4 <I2C_WaitOnTXEFlagUntilTimeout>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d00d      	beq.n	800ad5a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad42:	2b04      	cmp	r3, #4
 800ad44:	d107      	bne.n	800ad56 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	681a      	ldr	r2, [r3, #0]
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ad54:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800ad56:	2301      	movs	r3, #1
 800ad58:	e050      	b.n	800adfc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ad5a:	893b      	ldrh	r3, [r7, #8]
 800ad5c:	b2da      	uxtb	r2, r3
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ad64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad66:	6a39      	ldr	r1, [r7, #32]
 800ad68:	68f8      	ldr	r0, [r7, #12]
 800ad6a:	f000 fb1b 	bl	800b3a4 <I2C_WaitOnTXEFlagUntilTimeout>
 800ad6e:	4603      	mov	r3, r0
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d00d      	beq.n	800ad90 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad78:	2b04      	cmp	r3, #4
 800ad7a:	d107      	bne.n	800ad8c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	681a      	ldr	r2, [r3, #0]
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ad8a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	e035      	b.n	800adfc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	681a      	ldr	r2, [r3, #0]
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ad9e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ada0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada2:	9300      	str	r3, [sp, #0]
 800ada4:	6a3b      	ldr	r3, [r7, #32]
 800ada6:	2200      	movs	r2, #0
 800ada8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800adac:	68f8      	ldr	r0, [r7, #12]
 800adae:	f000 f9df 	bl	800b170 <I2C_WaitOnFlagUntilTimeout>
 800adb2:	4603      	mov	r3, r0
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d00d      	beq.n	800add4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800adc6:	d103      	bne.n	800add0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	f44f 7200 	mov.w	r2, #512	; 0x200
 800adce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800add0:	2303      	movs	r3, #3
 800add2:	e013      	b.n	800adfc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800add4:	897b      	ldrh	r3, [r7, #10]
 800add6:	b2db      	uxtb	r3, r3
 800add8:	f043 0301 	orr.w	r3, r3, #1
 800addc:	b2da      	uxtb	r2, r3
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ade4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade6:	6a3a      	ldr	r2, [r7, #32]
 800ade8:	4906      	ldr	r1, [pc, #24]	; (800ae04 <I2C_RequestMemoryRead+0x1cc>)
 800adea:	68f8      	ldr	r0, [r7, #12]
 800adec:	f000 fa3a 	bl	800b264 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800adf0:	4603      	mov	r3, r0
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d001      	beq.n	800adfa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800adf6:	2301      	movs	r3, #1
 800adf8:	e000      	b.n	800adfc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800adfa:	2300      	movs	r3, #0
}
 800adfc:	4618      	mov	r0, r3
 800adfe:	3718      	adds	r7, #24
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bd80      	pop	{r7, pc}
 800ae04:	00010002 	.word	0x00010002

0800ae08 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b086      	sub	sp, #24
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae14:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ae16:	697b      	ldr	r3, [r7, #20]
 800ae18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae1c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800ae1e:	697b      	ldr	r3, [r7, #20]
 800ae20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ae24:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae2a:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800ae2c:	697b      	ldr	r3, [r7, #20]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	685a      	ldr	r2, [r3, #4]
 800ae32:	697b      	ldr	r3, [r7, #20]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800ae3a:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800ae3c:	697b      	ldr	r3, [r7, #20]
 800ae3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d003      	beq.n	800ae4c <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800ae44:	697b      	ldr	r3, [r7, #20]
 800ae46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae48:	2200      	movs	r2, #0
 800ae4a:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 800ae4c:	697b      	ldr	r3, [r7, #20]
 800ae4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d003      	beq.n	800ae5c <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800ae54:	697b      	ldr	r3, [r7, #20]
 800ae56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae58:	2200      	movs	r2, #0
 800ae5a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800ae5c:	7cfb      	ldrb	r3, [r7, #19]
 800ae5e:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800ae62:	2b21      	cmp	r3, #33	; 0x21
 800ae64:	d007      	beq.n	800ae76 <I2C_DMAXferCplt+0x6e>
 800ae66:	7cfb      	ldrb	r3, [r7, #19]
 800ae68:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800ae6c:	2b22      	cmp	r3, #34	; 0x22
 800ae6e:	d131      	bne.n	800aed4 <I2C_DMAXferCplt+0xcc>
 800ae70:	7cbb      	ldrb	r3, [r7, #18]
 800ae72:	2b20      	cmp	r3, #32
 800ae74:	d12e      	bne.n	800aed4 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	685a      	ldr	r2, [r3, #4]
 800ae7c:	697b      	ldr	r3, [r7, #20]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ae84:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800ae86:	697b      	ldr	r3, [r7, #20]
 800ae88:	2200      	movs	r2, #0
 800ae8a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800ae8c:	7cfb      	ldrb	r3, [r7, #19]
 800ae8e:	2b29      	cmp	r3, #41	; 0x29
 800ae90:	d10a      	bne.n	800aea8 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	2221      	movs	r2, #33	; 0x21
 800ae96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800ae98:	697b      	ldr	r3, [r7, #20]
 800ae9a:	2228      	movs	r2, #40	; 0x28
 800ae9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800aea0:	6978      	ldr	r0, [r7, #20]
 800aea2:	f7fe fb09 	bl	80094b8 <HAL_I2C_SlaveTxCpltCallback>
 800aea6:	e00c      	b.n	800aec2 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800aea8:	7cfb      	ldrb	r3, [r7, #19]
 800aeaa:	2b2a      	cmp	r3, #42	; 0x2a
 800aeac:	d109      	bne.n	800aec2 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	2222      	movs	r2, #34	; 0x22
 800aeb2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800aeb4:	697b      	ldr	r3, [r7, #20]
 800aeb6:	2228      	movs	r2, #40	; 0x28
 800aeb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800aebc:	6978      	ldr	r0, [r7, #20]
 800aebe:	f7fe fb04 	bl	80094ca <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	685a      	ldr	r2, [r3, #4]
 800aec8:	697b      	ldr	r3, [r7, #20]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800aed0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800aed2:	e06a      	b.n	800afaa <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800aed4:	697b      	ldr	r3, [r7, #20]
 800aed6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aeda:	b2db      	uxtb	r3, r3
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d064      	beq.n	800afaa <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 800aee0:	697b      	ldr	r3, [r7, #20]
 800aee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aee4:	b29b      	uxth	r3, r3
 800aee6:	2b01      	cmp	r3, #1
 800aee8:	d107      	bne.n	800aefa <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aeea:	697b      	ldr	r3, [r7, #20]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	681a      	ldr	r2, [r3, #0]
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aef8:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800aefa:	697b      	ldr	r3, [r7, #20]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	685a      	ldr	r2, [r3, #4]
 800af00:	697b      	ldr	r3, [r7, #20]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800af08:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800af10:	d009      	beq.n	800af26 <I2C_DMAXferCplt+0x11e>
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	2b08      	cmp	r3, #8
 800af16:	d006      	beq.n	800af26 <I2C_DMAXferCplt+0x11e>
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800af1e:	d002      	beq.n	800af26 <I2C_DMAXferCplt+0x11e>
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	2b20      	cmp	r3, #32
 800af24:	d107      	bne.n	800af36 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800af26:	697b      	ldr	r3, [r7, #20]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	681a      	ldr	r2, [r3, #0]
 800af2c:	697b      	ldr	r3, [r7, #20]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800af34:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800af36:	697b      	ldr	r3, [r7, #20]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	685a      	ldr	r2, [r3, #4]
 800af3c:	697b      	ldr	r3, [r7, #20]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800af44:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800af46:	697b      	ldr	r3, [r7, #20]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	685a      	ldr	r2, [r3, #4]
 800af4c:	697b      	ldr	r3, [r7, #20]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800af54:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800af56:	697b      	ldr	r3, [r7, #20]
 800af58:	2200      	movs	r2, #0
 800af5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800af5c:	697b      	ldr	r3, [r7, #20]
 800af5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af60:	2b00      	cmp	r3, #0
 800af62:	d003      	beq.n	800af6c <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 800af64:	6978      	ldr	r0, [r7, #20]
 800af66:	f7fe fae1 	bl	800952c <HAL_I2C_ErrorCallback>
}
 800af6a:	e01e      	b.n	800afaa <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 800af6c:	697b      	ldr	r3, [r7, #20]
 800af6e:	2220      	movs	r2, #32
 800af70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800af7a:	b2db      	uxtb	r3, r3
 800af7c:	2b40      	cmp	r3, #64	; 0x40
 800af7e:	d10a      	bne.n	800af96 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	2200      	movs	r2, #0
 800af84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800af88:	697b      	ldr	r3, [r7, #20]
 800af8a:	2200      	movs	r2, #0
 800af8c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800af8e:	6978      	ldr	r0, [r7, #20]
 800af90:	f7fe fac3 	bl	800951a <HAL_I2C_MemRxCpltCallback>
}
 800af94:	e009      	b.n	800afaa <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800af96:	697b      	ldr	r3, [r7, #20]
 800af98:	2200      	movs	r2, #0
 800af9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800af9e:	697b      	ldr	r3, [r7, #20]
 800afa0:	2212      	movs	r2, #18
 800afa2:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800afa4:	6978      	ldr	r0, [r7, #20]
 800afa6:	f7fe fa7e 	bl	80094a6 <HAL_I2C_MasterRxCpltCallback>
}
 800afaa:	bf00      	nop
 800afac:	3718      	adds	r7, #24
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}

0800afb2 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800afb2:	b580      	push	{r7, lr}
 800afb4:	b084      	sub	sp, #16
 800afb6:	af00      	add	r7, sp, #0
 800afb8:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afbe:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d003      	beq.n	800afd0 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afcc:	2200      	movs	r2, #0
 800afce:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d003      	beq.n	800afe0 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afdc:	2200      	movs	r2, #0
 800afde:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	681a      	ldr	r2, [r3, #0]
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800afee:	601a      	str	r2, [r3, #0]

  hi2c->XferCount       = 0U;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	2200      	movs	r2, #0
 800aff4:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	2220      	movs	r2, #32
 800affa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	2200      	movs	r2, #0
 800b002:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b00a:	f043 0210 	orr.w	r2, r3, #16
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ErrorCallback(hi2c);
#else
  HAL_I2C_ErrorCallback(hi2c);
 800b012:	68f8      	ldr	r0, [r7, #12]
 800b014:	f7fe fa8a 	bl	800952c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800b018:	bf00      	nop
 800b01a:	3710      	adds	r7, #16
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b086      	sub	sp, #24
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b028:	2300      	movs	r3, #0
 800b02a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b030:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b038:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800b03a:	4b4b      	ldr	r3, [pc, #300]	; (800b168 <I2C_DMAAbort+0x148>)
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	08db      	lsrs	r3, r3, #3
 800b040:	4a4a      	ldr	r2, [pc, #296]	; (800b16c <I2C_DMAAbort+0x14c>)
 800b042:	fba2 2303 	umull	r2, r3, r2, r3
 800b046:	0a1a      	lsrs	r2, r3, #8
 800b048:	4613      	mov	r3, r2
 800b04a:	009b      	lsls	r3, r3, #2
 800b04c:	4413      	add	r3, r2
 800b04e:	00da      	lsls	r2, r3, #3
 800b050:	1ad3      	subs	r3, r2, r3
 800b052:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d106      	bne.n	800b068 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b05a:	697b      	ldr	r3, [r7, #20]
 800b05c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b05e:	f043 0220 	orr.w	r2, r3, #32
 800b062:	697b      	ldr	r3, [r7, #20]
 800b064:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800b066:	e00a      	b.n	800b07e <I2C_DMAAbort+0x5e>
    }
    count--;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	3b01      	subs	r3, #1
 800b06c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800b06e:	697b      	ldr	r3, [r7, #20]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b078:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b07c:	d0ea      	beq.n	800b054 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b082:	2b00      	cmp	r3, #0
 800b084:	d003      	beq.n	800b08e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800b086:	697b      	ldr	r3, [r7, #20]
 800b088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b08a:	2200      	movs	r2, #0
 800b08c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b092:	2b00      	cmp	r3, #0
 800b094:	d003      	beq.n	800b09e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b09a:	2200      	movs	r2, #0
 800b09c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b09e:	697b      	ldr	r3, [r7, #20]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	681a      	ldr	r2, [r3, #0]
 800b0a4:	697b      	ldr	r3, [r7, #20]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b0ac:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800b0b4:	697b      	ldr	r3, [r7, #20]
 800b0b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d003      	beq.n	800b0c4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800b0bc:	697b      	ldr	r3, [r7, #20]
 800b0be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 800b0c4:	697b      	ldr	r3, [r7, #20]
 800b0c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d003      	beq.n	800b0d4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800b0d4:	697b      	ldr	r3, [r7, #20]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	681a      	ldr	r2, [r3, #0]
 800b0da:	697b      	ldr	r3, [r7, #20]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	f022 0201 	bic.w	r2, r2, #1
 800b0e2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800b0e4:	697b      	ldr	r3, [r7, #20]
 800b0e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b0ea:	b2db      	uxtb	r3, r3
 800b0ec:	2b60      	cmp	r3, #96	; 0x60
 800b0ee:	d10e      	bne.n	800b10e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800b0f0:	697b      	ldr	r3, [r7, #20]
 800b0f2:	2220      	movs	r2, #32
 800b0f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b0f8:	697b      	ldr	r3, [r7, #20]
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800b100:	697b      	ldr	r3, [r7, #20]
 800b102:	2200      	movs	r2, #0
 800b104:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800b106:	6978      	ldr	r0, [r7, #20]
 800b108:	f7fe fa19 	bl	800953e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b10c:	e027      	b.n	800b15e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b10e:	7cfb      	ldrb	r3, [r7, #19]
 800b110:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b114:	2b28      	cmp	r3, #40	; 0x28
 800b116:	d117      	bne.n	800b148 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800b118:	697b      	ldr	r3, [r7, #20]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	681a      	ldr	r2, [r3, #0]
 800b11e:	697b      	ldr	r3, [r7, #20]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f042 0201 	orr.w	r2, r2, #1
 800b126:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b128:	697b      	ldr	r3, [r7, #20]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	681a      	ldr	r2, [r3, #0]
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b136:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800b138:	697b      	ldr	r3, [r7, #20]
 800b13a:	2200      	movs	r2, #0
 800b13c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800b13e:	697b      	ldr	r3, [r7, #20]
 800b140:	2228      	movs	r2, #40	; 0x28
 800b142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800b146:	e007      	b.n	800b158 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800b148:	697b      	ldr	r3, [r7, #20]
 800b14a:	2220      	movs	r2, #32
 800b14c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b150:	697b      	ldr	r3, [r7, #20]
 800b152:	2200      	movs	r2, #0
 800b154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800b158:	6978      	ldr	r0, [r7, #20]
 800b15a:	f7fe f9e7 	bl	800952c <HAL_I2C_ErrorCallback>
}
 800b15e:	bf00      	nop
 800b160:	3718      	adds	r7, #24
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}
 800b166:	bf00      	nop
 800b168:	2000006c 	.word	0x2000006c
 800b16c:	14f8b589 	.word	0x14f8b589

0800b170 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b084      	sub	sp, #16
 800b174:	af00      	add	r7, sp, #0
 800b176:	60f8      	str	r0, [r7, #12]
 800b178:	60b9      	str	r1, [r7, #8]
 800b17a:	603b      	str	r3, [r7, #0]
 800b17c:	4613      	mov	r3, r2
 800b17e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b180:	e048      	b.n	800b214 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b188:	d044      	beq.n	800b214 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b18a:	f7f7 fa63 	bl	8002654 <HAL_GetTick>
 800b18e:	4602      	mov	r2, r0
 800b190:	69bb      	ldr	r3, [r7, #24]
 800b192:	1ad3      	subs	r3, r2, r3
 800b194:	683a      	ldr	r2, [r7, #0]
 800b196:	429a      	cmp	r2, r3
 800b198:	d302      	bcc.n	800b1a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d139      	bne.n	800b214 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	0c1b      	lsrs	r3, r3, #16
 800b1a4:	b2db      	uxtb	r3, r3
 800b1a6:	2b01      	cmp	r3, #1
 800b1a8:	d10d      	bne.n	800b1c6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	695b      	ldr	r3, [r3, #20]
 800b1b0:	43da      	mvns	r2, r3
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	4013      	ands	r3, r2
 800b1b6:	b29b      	uxth	r3, r3
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	bf0c      	ite	eq
 800b1bc:	2301      	moveq	r3, #1
 800b1be:	2300      	movne	r3, #0
 800b1c0:	b2db      	uxtb	r3, r3
 800b1c2:	461a      	mov	r2, r3
 800b1c4:	e00c      	b.n	800b1e0 <I2C_WaitOnFlagUntilTimeout+0x70>
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	699b      	ldr	r3, [r3, #24]
 800b1cc:	43da      	mvns	r2, r3
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	4013      	ands	r3, r2
 800b1d2:	b29b      	uxth	r3, r3
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	bf0c      	ite	eq
 800b1d8:	2301      	moveq	r3, #1
 800b1da:	2300      	movne	r3, #0
 800b1dc:	b2db      	uxtb	r3, r3
 800b1de:	461a      	mov	r2, r3
 800b1e0:	79fb      	ldrb	r3, [r7, #7]
 800b1e2:	429a      	cmp	r2, r3
 800b1e4:	d116      	bne.n	800b214 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	2220      	movs	r2, #32
 800b1f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b200:	f043 0220 	orr.w	r2, r3, #32
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	2200      	movs	r2, #0
 800b20c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800b210:	2301      	movs	r3, #1
 800b212:	e023      	b.n	800b25c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	0c1b      	lsrs	r3, r3, #16
 800b218:	b2db      	uxtb	r3, r3
 800b21a:	2b01      	cmp	r3, #1
 800b21c:	d10d      	bne.n	800b23a <I2C_WaitOnFlagUntilTimeout+0xca>
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	695b      	ldr	r3, [r3, #20]
 800b224:	43da      	mvns	r2, r3
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	4013      	ands	r3, r2
 800b22a:	b29b      	uxth	r3, r3
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	bf0c      	ite	eq
 800b230:	2301      	moveq	r3, #1
 800b232:	2300      	movne	r3, #0
 800b234:	b2db      	uxtb	r3, r3
 800b236:	461a      	mov	r2, r3
 800b238:	e00c      	b.n	800b254 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	699b      	ldr	r3, [r3, #24]
 800b240:	43da      	mvns	r2, r3
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	4013      	ands	r3, r2
 800b246:	b29b      	uxth	r3, r3
 800b248:	2b00      	cmp	r3, #0
 800b24a:	bf0c      	ite	eq
 800b24c:	2301      	moveq	r3, #1
 800b24e:	2300      	movne	r3, #0
 800b250:	b2db      	uxtb	r3, r3
 800b252:	461a      	mov	r2, r3
 800b254:	79fb      	ldrb	r3, [r7, #7]
 800b256:	429a      	cmp	r2, r3
 800b258:	d093      	beq.n	800b182 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b25a:	2300      	movs	r3, #0
}
 800b25c:	4618      	mov	r0, r3
 800b25e:	3710      	adds	r7, #16
 800b260:	46bd      	mov	sp, r7
 800b262:	bd80      	pop	{r7, pc}

0800b264 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b084      	sub	sp, #16
 800b268:	af00      	add	r7, sp, #0
 800b26a:	60f8      	str	r0, [r7, #12]
 800b26c:	60b9      	str	r1, [r7, #8]
 800b26e:	607a      	str	r2, [r7, #4]
 800b270:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b272:	e071      	b.n	800b358 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	695b      	ldr	r3, [r3, #20]
 800b27a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b27e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b282:	d123      	bne.n	800b2cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	681a      	ldr	r2, [r3, #0]
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b292:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b29c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	2220      	movs	r2, #32
 800b2a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2b8:	f043 0204 	orr.w	r2, r3, #4
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	e067      	b.n	800b39c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2d2:	d041      	beq.n	800b358 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b2d4:	f7f7 f9be 	bl	8002654 <HAL_GetTick>
 800b2d8:	4602      	mov	r2, r0
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	1ad3      	subs	r3, r2, r3
 800b2de:	687a      	ldr	r2, [r7, #4]
 800b2e0:	429a      	cmp	r2, r3
 800b2e2:	d302      	bcc.n	800b2ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d136      	bne.n	800b358 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800b2ea:	68bb      	ldr	r3, [r7, #8]
 800b2ec:	0c1b      	lsrs	r3, r3, #16
 800b2ee:	b2db      	uxtb	r3, r3
 800b2f0:	2b01      	cmp	r3, #1
 800b2f2:	d10c      	bne.n	800b30e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	695b      	ldr	r3, [r3, #20]
 800b2fa:	43da      	mvns	r2, r3
 800b2fc:	68bb      	ldr	r3, [r7, #8]
 800b2fe:	4013      	ands	r3, r2
 800b300:	b29b      	uxth	r3, r3
 800b302:	2b00      	cmp	r3, #0
 800b304:	bf14      	ite	ne
 800b306:	2301      	movne	r3, #1
 800b308:	2300      	moveq	r3, #0
 800b30a:	b2db      	uxtb	r3, r3
 800b30c:	e00b      	b.n	800b326 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	699b      	ldr	r3, [r3, #24]
 800b314:	43da      	mvns	r2, r3
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	4013      	ands	r3, r2
 800b31a:	b29b      	uxth	r3, r3
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	bf14      	ite	ne
 800b320:	2301      	movne	r3, #1
 800b322:	2300      	moveq	r3, #0
 800b324:	b2db      	uxtb	r3, r3
 800b326:	2b00      	cmp	r3, #0
 800b328:	d016      	beq.n	800b358 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	2200      	movs	r2, #0
 800b32e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	2220      	movs	r2, #32
 800b334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	2200      	movs	r2, #0
 800b33c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b344:	f043 0220 	orr.w	r2, r3, #32
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	2200      	movs	r2, #0
 800b350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800b354:	2301      	movs	r3, #1
 800b356:	e021      	b.n	800b39c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	0c1b      	lsrs	r3, r3, #16
 800b35c:	b2db      	uxtb	r3, r3
 800b35e:	2b01      	cmp	r3, #1
 800b360:	d10c      	bne.n	800b37c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	695b      	ldr	r3, [r3, #20]
 800b368:	43da      	mvns	r2, r3
 800b36a:	68bb      	ldr	r3, [r7, #8]
 800b36c:	4013      	ands	r3, r2
 800b36e:	b29b      	uxth	r3, r3
 800b370:	2b00      	cmp	r3, #0
 800b372:	bf14      	ite	ne
 800b374:	2301      	movne	r3, #1
 800b376:	2300      	moveq	r3, #0
 800b378:	b2db      	uxtb	r3, r3
 800b37a:	e00b      	b.n	800b394 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	699b      	ldr	r3, [r3, #24]
 800b382:	43da      	mvns	r2, r3
 800b384:	68bb      	ldr	r3, [r7, #8]
 800b386:	4013      	ands	r3, r2
 800b388:	b29b      	uxth	r3, r3
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	bf14      	ite	ne
 800b38e:	2301      	movne	r3, #1
 800b390:	2300      	moveq	r3, #0
 800b392:	b2db      	uxtb	r3, r3
 800b394:	2b00      	cmp	r3, #0
 800b396:	f47f af6d 	bne.w	800b274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800b39a:	2300      	movs	r3, #0
}
 800b39c:	4618      	mov	r0, r3
 800b39e:	3710      	adds	r7, #16
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd80      	pop	{r7, pc}

0800b3a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b084      	sub	sp, #16
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	60f8      	str	r0, [r7, #12]
 800b3ac:	60b9      	str	r1, [r7, #8]
 800b3ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b3b0:	e034      	b.n	800b41c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b3b2:	68f8      	ldr	r0, [r7, #12]
 800b3b4:	f000 f959 	bl	800b66a <I2C_IsAcknowledgeFailed>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d001      	beq.n	800b3c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b3be:	2301      	movs	r3, #1
 800b3c0:	e034      	b.n	800b42c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b3c2:	68bb      	ldr	r3, [r7, #8]
 800b3c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3c8:	d028      	beq.n	800b41c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b3ca:	f7f7 f943 	bl	8002654 <HAL_GetTick>
 800b3ce:	4602      	mov	r2, r0
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	1ad3      	subs	r3, r2, r3
 800b3d4:	68ba      	ldr	r2, [r7, #8]
 800b3d6:	429a      	cmp	r2, r3
 800b3d8:	d302      	bcc.n	800b3e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d11d      	bne.n	800b41c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	695b      	ldr	r3, [r3, #20]
 800b3e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3ea:	2b80      	cmp	r3, #128	; 0x80
 800b3ec:	d016      	beq.n	800b41c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	2220      	movs	r2, #32
 800b3f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	2200      	movs	r2, #0
 800b400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b408:	f043 0220 	orr.w	r2, r3, #32
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	2200      	movs	r2, #0
 800b414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800b418:	2301      	movs	r3, #1
 800b41a:	e007      	b.n	800b42c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	695b      	ldr	r3, [r3, #20]
 800b422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b426:	2b80      	cmp	r3, #128	; 0x80
 800b428:	d1c3      	bne.n	800b3b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b42a:	2300      	movs	r3, #0
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	3710      	adds	r7, #16
 800b430:	46bd      	mov	sp, r7
 800b432:	bd80      	pop	{r7, pc}

0800b434 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b084      	sub	sp, #16
 800b438:	af00      	add	r7, sp, #0
 800b43a:	60f8      	str	r0, [r7, #12]
 800b43c:	60b9      	str	r1, [r7, #8]
 800b43e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b440:	e034      	b.n	800b4ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b442:	68f8      	ldr	r0, [r7, #12]
 800b444:	f000 f911 	bl	800b66a <I2C_IsAcknowledgeFailed>
 800b448:	4603      	mov	r3, r0
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d001      	beq.n	800b452 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b44e:	2301      	movs	r3, #1
 800b450:	e034      	b.n	800b4bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b458:	d028      	beq.n	800b4ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b45a:	f7f7 f8fb 	bl	8002654 <HAL_GetTick>
 800b45e:	4602      	mov	r2, r0
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	1ad3      	subs	r3, r2, r3
 800b464:	68ba      	ldr	r2, [r7, #8]
 800b466:	429a      	cmp	r2, r3
 800b468:	d302      	bcc.n	800b470 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d11d      	bne.n	800b4ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	695b      	ldr	r3, [r3, #20]
 800b476:	f003 0304 	and.w	r3, r3, #4
 800b47a:	2b04      	cmp	r3, #4
 800b47c:	d016      	beq.n	800b4ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	2200      	movs	r2, #0
 800b482:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	2220      	movs	r2, #32
 800b488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	2200      	movs	r2, #0
 800b490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b498:	f043 0220 	orr.w	r2, r3, #32
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800b4a8:	2301      	movs	r3, #1
 800b4aa:	e007      	b.n	800b4bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	695b      	ldr	r3, [r3, #20]
 800b4b2:	f003 0304 	and.w	r3, r3, #4
 800b4b6:	2b04      	cmp	r3, #4
 800b4b8:	d1c3      	bne.n	800b442 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b4ba:	2300      	movs	r3, #0
}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	3710      	adds	r7, #16
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	bd80      	pop	{r7, pc}

0800b4c4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b084      	sub	sp, #16
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	60f8      	str	r0, [r7, #12]
 800b4cc:	60b9      	str	r1, [r7, #8]
 800b4ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b4d0:	e030      	b.n	800b534 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b4d2:	68f8      	ldr	r0, [r7, #12]
 800b4d4:	f000 f8c9 	bl	800b66a <I2C_IsAcknowledgeFailed>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d001      	beq.n	800b4e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b4de:	2301      	movs	r3, #1
 800b4e0:	e030      	b.n	800b544 <I2C_WaitOnSTOPFlagUntilTimeout+0x80>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b4e2:	f7f7 f8b7 	bl	8002654 <HAL_GetTick>
 800b4e6:	4602      	mov	r2, r0
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	1ad3      	subs	r3, r2, r3
 800b4ec:	68ba      	ldr	r2, [r7, #8]
 800b4ee:	429a      	cmp	r2, r3
 800b4f0:	d302      	bcc.n	800b4f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
 800b4f2:	68bb      	ldr	r3, [r7, #8]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d11d      	bne.n	800b534 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	695b      	ldr	r3, [r3, #20]
 800b4fe:	f003 0310 	and.w	r3, r3, #16
 800b502:	2b10      	cmp	r3, #16
 800b504:	d016      	beq.n	800b534 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	2200      	movs	r2, #0
 800b50a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	2220      	movs	r2, #32
 800b510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	2200      	movs	r2, #0
 800b518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b520:	f043 0220 	orr.w	r2, r3, #32
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	2200      	movs	r2, #0
 800b52c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b530:	2301      	movs	r3, #1
 800b532:	e007      	b.n	800b544 <I2C_WaitOnSTOPFlagUntilTimeout+0x80>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	695b      	ldr	r3, [r3, #20]
 800b53a:	f003 0310 	and.w	r3, r3, #16
 800b53e:	2b10      	cmp	r3, #16
 800b540:	d1c7      	bne.n	800b4d2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b542:	2300      	movs	r3, #0
}
 800b544:	4618      	mov	r0, r3
 800b546:	3710      	adds	r7, #16
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}

0800b54c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800b54c:	b480      	push	{r7}
 800b54e:	b085      	sub	sp, #20
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b554:	2300      	movs	r3, #0
 800b556:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800b558:	4b13      	ldr	r3, [pc, #76]	; (800b5a8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	08db      	lsrs	r3, r3, #3
 800b55e:	4a13      	ldr	r2, [pc, #76]	; (800b5ac <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800b560:	fba2 2303 	umull	r2, r3, r2, r3
 800b564:	0a1a      	lsrs	r2, r3, #8
 800b566:	4613      	mov	r3, r2
 800b568:	009b      	lsls	r3, r3, #2
 800b56a:	4413      	add	r3, r2
 800b56c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	3b01      	subs	r3, #1
 800b572:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d107      	bne.n	800b58a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b57e:	f043 0220 	orr.w	r2, r3, #32
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800b586:	2301      	movs	r3, #1
 800b588:	e008      	b.n	800b59c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b594:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b598:	d0e9      	beq.n	800b56e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800b59a:	2300      	movs	r3, #0
}
 800b59c:	4618      	mov	r0, r3
 800b59e:	3714      	adds	r7, #20
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	bc80      	pop	{r7}
 800b5a4:	4770      	bx	lr
 800b5a6:	bf00      	nop
 800b5a8:	2000006c 	.word	0x2000006c
 800b5ac:	14f8b589 	.word	0x14f8b589

0800b5b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b084      	sub	sp, #16
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	60f8      	str	r0, [r7, #12]
 800b5b8:	60b9      	str	r1, [r7, #8]
 800b5ba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b5bc:	e049      	b.n	800b652 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	695b      	ldr	r3, [r3, #20]
 800b5c4:	f003 0310 	and.w	r3, r3, #16
 800b5c8:	2b10      	cmp	r3, #16
 800b5ca:	d119      	bne.n	800b600 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	f06f 0210 	mvn.w	r2, #16
 800b5d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	2200      	movs	r2, #0
 800b5da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	2220      	movs	r2, #32
 800b5e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b5fc:	2301      	movs	r3, #1
 800b5fe:	e030      	b.n	800b662 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b600:	f7f7 f828 	bl	8002654 <HAL_GetTick>
 800b604:	4602      	mov	r2, r0
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	1ad3      	subs	r3, r2, r3
 800b60a:	68ba      	ldr	r2, [r7, #8]
 800b60c:	429a      	cmp	r2, r3
 800b60e:	d302      	bcc.n	800b616 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b610:	68bb      	ldr	r3, [r7, #8]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d11d      	bne.n	800b652 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	695b      	ldr	r3, [r3, #20]
 800b61c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b620:	2b40      	cmp	r3, #64	; 0x40
 800b622:	d016      	beq.n	800b652 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	2200      	movs	r2, #0
 800b628:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	2220      	movs	r2, #32
 800b62e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	2200      	movs	r2, #0
 800b636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b63e:	f043 0220 	orr.w	r2, r3, #32
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	2200      	movs	r2, #0
 800b64a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b64e:	2301      	movs	r3, #1
 800b650:	e007      	b.n	800b662 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	695b      	ldr	r3, [r3, #20]
 800b658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b65c:	2b40      	cmp	r3, #64	; 0x40
 800b65e:	d1ae      	bne.n	800b5be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b660:	2300      	movs	r3, #0
}
 800b662:	4618      	mov	r0, r3
 800b664:	3710      	adds	r7, #16
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}

0800b66a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b66a:	b480      	push	{r7}
 800b66c:	b083      	sub	sp, #12
 800b66e:	af00      	add	r7, sp, #0
 800b670:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	695b      	ldr	r3, [r3, #20]
 800b678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b67c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b680:	d11b      	bne.n	800b6ba <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b68a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2200      	movs	r2, #0
 800b690:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2220      	movs	r2, #32
 800b696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2200      	movs	r2, #0
 800b69e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6a6:	f043 0204 	orr.w	r2, r3, #4
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800b6b6:	2301      	movs	r3, #1
 800b6b8:	e000      	b.n	800b6bc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800b6ba:	2300      	movs	r3, #0
}
 800b6bc:	4618      	mov	r0, r3
 800b6be:	370c      	adds	r7, #12
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bc80      	pop	{r7}
 800b6c4:	4770      	bx	lr

0800b6c6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800b6c6:	b480      	push	{r7}
 800b6c8:	b083      	sub	sp, #12
 800b6ca:	af00      	add	r7, sp, #0
 800b6cc:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6d2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800b6d6:	d103      	bne.n	800b6e0 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2201      	movs	r2, #1
 800b6dc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800b6de:	e007      	b.n	800b6f0 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6e4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800b6e8:	d102      	bne.n	800b6f0 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2208      	movs	r2, #8
 800b6ee:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800b6f0:	bf00      	nop
 800b6f2:	370c      	adds	r7, #12
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bc80      	pop	{r7}
 800b6f8:	4770      	bx	lr
	...

0800b6fc <HAL_PWR_DeInit>:
  *         function.
  * @note   ULP and FWU bits are not reset by this function.
  * @retval None
  */
void HAL_PWR_DeInit(void)
{
 800b6fc:	b480      	push	{r7}
 800b6fe:	af00      	add	r7, sp, #0
  __HAL_RCC_PWR_FORCE_RESET();
 800b700:	4b07      	ldr	r3, [pc, #28]	; (800b720 <HAL_PWR_DeInit+0x24>)
 800b702:	699b      	ldr	r3, [r3, #24]
 800b704:	4a06      	ldr	r2, [pc, #24]	; (800b720 <HAL_PWR_DeInit+0x24>)
 800b706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b70a:	6193      	str	r3, [r2, #24]
  __HAL_RCC_PWR_RELEASE_RESET();
 800b70c:	4b04      	ldr	r3, [pc, #16]	; (800b720 <HAL_PWR_DeInit+0x24>)
 800b70e:	699b      	ldr	r3, [r3, #24]
 800b710:	4a03      	ldr	r2, [pc, #12]	; (800b720 <HAL_PWR_DeInit+0x24>)
 800b712:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b716:	6193      	str	r3, [r2, #24]
}
 800b718:	bf00      	nop
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bc80      	pop	{r7}
 800b71e:	4770      	bx	lr
 800b720:	40023800 	.word	0x40023800

0800b724 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800b724:	b480      	push	{r7}
 800b726:	b083      	sub	sp, #12
 800b728:	af00      	add	r7, sp, #0
 800b72a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b72e:	607b      	str	r3, [r7, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	fa93 f3a3 	rbit	r3, r3
 800b736:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800b738:	683b      	ldr	r3, [r7, #0]
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800b73a:	fab3 f383 	clz	r3, r3
 800b73e:	b2db      	uxtb	r3, r3
 800b740:	009b      	lsls	r3, r3, #2
 800b742:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800b746:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
 800b74a:	461a      	mov	r2, r3
 800b74c:	2301      	movs	r3, #1
 800b74e:	6013      	str	r3, [r2, #0]
}
 800b750:	bf00      	nop
 800b752:	370c      	adds	r7, #12
 800b754:	46bd      	mov	sp, r7
 800b756:	bc80      	pop	{r7}
 800b758:	4770      	bx	lr

0800b75a <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 800b75a:	b480      	push	{r7}
 800b75c:	b083      	sub	sp, #12
 800b75e:	af00      	add	r7, sp, #0
 800b760:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b764:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	fa93 f3a3 	rbit	r3, r3
 800b76c:	603b      	str	r3, [r7, #0]
  return result;
 800b76e:	683b      	ldr	r3, [r7, #0]
  /* Disable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 800b770:	fab3 f383 	clz	r3, r3
 800b774:	b2db      	uxtb	r3, r3
 800b776:	009b      	lsls	r3, r3, #2
 800b778:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800b77c:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
 800b780:	461a      	mov	r2, r3
 800b782:	2300      	movs	r3, #0
 800b784:	6013      	str	r3, [r2, #0]
}
 800b786:	bf00      	nop
 800b788:	370c      	adds	r7, #12
 800b78a:	46bd      	mov	sp, r7
 800b78c:	bc80      	pop	{r7}
 800b78e:	4770      	bx	lr

0800b790 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage threshold corresponding to each
  *         detection level.
  * @retval None
  */
void HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 800b790:	b480      	push	{r7}
 800b792:	b083      	sub	sp, #12
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
 800b798:	4b2a      	ldr	r3, [pc, #168]	; (800b844 <HAL_PWR_ConfigPVD+0xb4>)
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	4927      	ldr	r1, [pc, #156]	; (800b844 <HAL_PWR_ConfigPVD+0xb4>)
 800b7a6:	4313      	orrs	r3, r2
 800b7a8:	600b      	str	r3, [r1, #0]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 800b7aa:	4b27      	ldr	r3, [pc, #156]	; (800b848 <HAL_PWR_ConfigPVD+0xb8>)
 800b7ac:	685b      	ldr	r3, [r3, #4]
 800b7ae:	4a26      	ldr	r2, [pc, #152]	; (800b848 <HAL_PWR_ConfigPVD+0xb8>)
 800b7b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b7b4:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 800b7b6:	4b24      	ldr	r3, [pc, #144]	; (800b848 <HAL_PWR_ConfigPVD+0xb8>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	4a23      	ldr	r2, [pc, #140]	; (800b848 <HAL_PWR_ConfigPVD+0xb8>)
 800b7bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b7c0:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_FALLING_EDGE();
 800b7c2:	4b21      	ldr	r3, [pc, #132]	; (800b848 <HAL_PWR_ConfigPVD+0xb8>)
 800b7c4:	689b      	ldr	r3, [r3, #8]
 800b7c6:	4a20      	ldr	r2, [pc, #128]	; (800b848 <HAL_PWR_ConfigPVD+0xb8>)
 800b7c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b7cc:	6093      	str	r3, [r2, #8]
 800b7ce:	4b1e      	ldr	r3, [pc, #120]	; (800b848 <HAL_PWR_ConfigPVD+0xb8>)
 800b7d0:	68db      	ldr	r3, [r3, #12]
 800b7d2:	4a1d      	ldr	r2, [pc, #116]	; (800b848 <HAL_PWR_ConfigPVD+0xb8>)
 800b7d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b7d8:	60d3      	str	r3, [r2, #12]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	685b      	ldr	r3, [r3, #4]
 800b7de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d005      	beq.n	800b7f2 <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 800b7e6:	4b18      	ldr	r3, [pc, #96]	; (800b848 <HAL_PWR_ConfigPVD+0xb8>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	4a17      	ldr	r2, [pc, #92]	; (800b848 <HAL_PWR_ConfigPVD+0xb8>)
 800b7ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b7f0:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	685b      	ldr	r3, [r3, #4]
 800b7f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d005      	beq.n	800b80a <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 800b7fe:	4b12      	ldr	r3, [pc, #72]	; (800b848 <HAL_PWR_ConfigPVD+0xb8>)
 800b800:	685b      	ldr	r3, [r3, #4]
 800b802:	4a11      	ldr	r2, [pc, #68]	; (800b848 <HAL_PWR_ConfigPVD+0xb8>)
 800b804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b808:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	685b      	ldr	r3, [r3, #4]
 800b80e:	f003 0301 	and.w	r3, r3, #1
 800b812:	2b00      	cmp	r3, #0
 800b814:	d005      	beq.n	800b822 <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 800b816:	4b0c      	ldr	r3, [pc, #48]	; (800b848 <HAL_PWR_ConfigPVD+0xb8>)
 800b818:	689b      	ldr	r3, [r3, #8]
 800b81a:	4a0b      	ldr	r2, [pc, #44]	; (800b848 <HAL_PWR_ConfigPVD+0xb8>)
 800b81c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b820:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	685b      	ldr	r3, [r3, #4]
 800b826:	f003 0302 	and.w	r3, r3, #2
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d005      	beq.n	800b83a <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 800b82e:	4b06      	ldr	r3, [pc, #24]	; (800b848 <HAL_PWR_ConfigPVD+0xb8>)
 800b830:	68db      	ldr	r3, [r3, #12]
 800b832:	4a05      	ldr	r2, [pc, #20]	; (800b848 <HAL_PWR_ConfigPVD+0xb8>)
 800b834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b838:	60d3      	str	r3, [r2, #12]
  }
}
 800b83a:	bf00      	nop
 800b83c:	370c      	adds	r7, #12
 800b83e:	46bd      	mov	sp, r7
 800b840:	bc80      	pop	{r7}
 800b842:	4770      	bx	lr
 800b844:	40007000 	.word	0x40007000
 800b848:	40010400 	.word	0x40010400

0800b84c <HAL_PWR_EnablePVD>:
/**
  * @brief  Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 800b84c:	b480      	push	{r7}
 800b84e:	b083      	sub	sp, #12
 800b850:	af00      	add	r7, sp, #0
 800b852:	2310      	movs	r3, #16
 800b854:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	fa93 f3a3 	rbit	r3, r3
 800b85c:	603b      	str	r3, [r7, #0]
  return result;
 800b85e:	683b      	ldr	r3, [r7, #0]
  /* Enable the power voltage detector */
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)ENABLE;
 800b860:	fab3 f383 	clz	r3, r3
 800b864:	b2db      	uxtb	r3, r3
 800b866:	009b      	lsls	r3, r3, #2
 800b868:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800b86c:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
 800b870:	461a      	mov	r2, r3
 800b872:	2301      	movs	r3, #1
 800b874:	6013      	str	r3, [r2, #0]
}
 800b876:	bf00      	nop
 800b878:	370c      	adds	r7, #12
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bc80      	pop	{r7}
 800b87e:	4770      	bx	lr

0800b880 <HAL_PWR_DisablePVD>:
/**
  * @brief  Disables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
 800b880:	b480      	push	{r7}
 800b882:	b083      	sub	sp, #12
 800b884:	af00      	add	r7, sp, #0
 800b886:	2310      	movs	r3, #16
 800b888:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	fa93 f3a3 	rbit	r3, r3
 800b890:	603b      	str	r3, [r7, #0]
  return result;
 800b892:	683b      	ldr	r3, [r7, #0]
  /* Disable the power voltage detector */
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)DISABLE;
 800b894:	fab3 f383 	clz	r3, r3
 800b898:	b2db      	uxtb	r3, r3
 800b89a:	009b      	lsls	r3, r3, #2
 800b89c:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800b8a0:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
 800b8a4:	461a      	mov	r2, r3
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	6013      	str	r3, [r2, #0]
}
 800b8aa:	bf00      	nop
 800b8ac:	370c      	adds	r7, #12
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bc80      	pop	{r7}
 800b8b2:	4770      	bx	lr

0800b8b4 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2
  *           @arg PWR_WAKEUP_PIN3: Only on product with GPIOE available
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 800b8b4:	b480      	push	{r7}
 800b8b6:	b085      	sub	sp, #20
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	fa93 f3a3 	rbit	r3, r3
 800b8c6:	60bb      	str	r3, [r7, #8]
  return result;
 800b8c8:	68bb      	ldr	r3, [r7, #8]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Enable the EWUPx pin */
  *(__IO uint32_t *) CSR_EWUP_BB(WakeUpPinx) = (uint32_t)ENABLE;
 800b8ca:	fab3 f383 	clz	r3, r3
 800b8ce:	b2db      	uxtb	r3, r3
 800b8d0:	009b      	lsls	r3, r3, #2
 800b8d2:	461a      	mov	r2, r3
 800b8d4:	4b04      	ldr	r3, [pc, #16]	; (800b8e8 <HAL_PWR_EnableWakeUpPin+0x34>)
 800b8d6:	4413      	add	r3, r2
 800b8d8:	461a      	mov	r2, r3
 800b8da:	2301      	movs	r3, #1
 800b8dc:	6013      	str	r3, [r2, #0]
}
 800b8de:	bf00      	nop
 800b8e0:	3714      	adds	r7, #20
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	bc80      	pop	{r7}
 800b8e6:	4770      	bx	lr
 800b8e8:	420e0080 	.word	0x420e0080

0800b8ec <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2
  *           @arg PWR_WAKEUP_PIN3: Only on product with GPIOE available
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 800b8ec:	b480      	push	{r7}
 800b8ee:	b085      	sub	sp, #20
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	fa93 f3a3 	rbit	r3, r3
 800b8fe:	60bb      	str	r3, [r7, #8]
  return result;
 800b900:	68bb      	ldr	r3, [r7, #8]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Disable the EWUPx pin */
  *(__IO uint32_t *) CSR_EWUP_BB(WakeUpPinx) = (uint32_t)DISABLE;
 800b902:	fab3 f383 	clz	r3, r3
 800b906:	b2db      	uxtb	r3, r3
 800b908:	009b      	lsls	r3, r3, #2
 800b90a:	461a      	mov	r2, r3
 800b90c:	4b04      	ldr	r3, [pc, #16]	; (800b920 <HAL_PWR_DisableWakeUpPin+0x34>)
 800b90e:	4413      	add	r3, r2
 800b910:	461a      	mov	r2, r3
 800b912:	2300      	movs	r3, #0
 800b914:	6013      	str	r3, [r2, #0]
}
 800b916:	bf00      	nop
 800b918:	3714      	adds	r7, #20
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bc80      	pop	{r7}
 800b91e:	4770      	bx	lr
 800b920:	420e0080 	.word	0x420e0080

0800b924 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800b924:	b480      	push	{r7}
 800b926:	b083      	sub	sp, #12
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
 800b92c:	460b      	mov	r3, r1
 800b92e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Select the regulator state in Sleep mode: Set PDDS and LPSDSR bit according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPSDSR), Regulator);
 800b930:	4b0d      	ldr	r3, [pc, #52]	; (800b968 <HAL_PWR_EnterSLEEPMode+0x44>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	f023 0203 	bic.w	r2, r3, #3
 800b938:	490b      	ldr	r1, [pc, #44]	; (800b968 <HAL_PWR_EnterSLEEPMode+0x44>)
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	4313      	orrs	r3, r2
 800b93e:	600b      	str	r3, [r1, #0]

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800b940:	4b0a      	ldr	r3, [pc, #40]	; (800b96c <HAL_PWR_EnterSLEEPMode+0x48>)
 800b942:	691b      	ldr	r3, [r3, #16]
 800b944:	4a09      	ldr	r2, [pc, #36]	; (800b96c <HAL_PWR_EnterSLEEPMode+0x48>)
 800b946:	f023 0304 	bic.w	r3, r3, #4
 800b94a:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800b94c:	78fb      	ldrb	r3, [r7, #3]
 800b94e:	2b01      	cmp	r3, #1
 800b950:	d101      	bne.n	800b956 <HAL_PWR_EnterSLEEPMode+0x32>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800b952:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 800b954:	e002      	b.n	800b95c <HAL_PWR_EnterSLEEPMode+0x38>
    __SEV();
 800b956:	bf40      	sev
    __WFE();
 800b958:	bf20      	wfe
    __WFE();
 800b95a:	bf20      	wfe
}
 800b95c:	bf00      	nop
 800b95e:	370c      	adds	r7, #12
 800b960:	46bd      	mov	sp, r7
 800b962:	bc80      	pop	{r7}
 800b964:	4770      	bx	lr
 800b966:	bf00      	nop
 800b968:	40007000 	.word	0x40007000
 800b96c:	e000ed00 	.word	0xe000ed00

0800b970 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 800b970:	b480      	push	{r7}
 800b972:	b083      	sub	sp, #12
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
 800b978:	460b      	mov	r3, r1
 800b97a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in Stop mode: Set PDDS and LPSDSR bit according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPSDSR), Regulator);
 800b97c:	4b10      	ldr	r3, [pc, #64]	; (800b9c0 <HAL_PWR_EnterSTOPMode+0x50>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	f023 0203 	bic.w	r2, r3, #3
 800b984:	490e      	ldr	r1, [pc, #56]	; (800b9c0 <HAL_PWR_EnterSTOPMode+0x50>)
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	4313      	orrs	r3, r2
 800b98a:	600b      	str	r3, [r1, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800b98c:	4b0d      	ldr	r3, [pc, #52]	; (800b9c4 <HAL_PWR_EnterSTOPMode+0x54>)
 800b98e:	691b      	ldr	r3, [r3, #16]
 800b990:	4a0c      	ldr	r2, [pc, #48]	; (800b9c4 <HAL_PWR_EnterSTOPMode+0x54>)
 800b992:	f043 0304 	orr.w	r3, r3, #4
 800b996:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800b998:	78fb      	ldrb	r3, [r7, #3]
 800b99a:	2b01      	cmp	r3, #1
 800b99c:	d101      	bne.n	800b9a2 <HAL_PWR_EnterSTOPMode+0x32>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800b99e:	bf30      	wfi
 800b9a0:	e002      	b.n	800b9a8 <HAL_PWR_EnterSTOPMode+0x38>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800b9a2:	bf40      	sev
    __WFE();
 800b9a4:	bf20      	wfe
    __WFE();
 800b9a6:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800b9a8:	4b06      	ldr	r3, [pc, #24]	; (800b9c4 <HAL_PWR_EnterSTOPMode+0x54>)
 800b9aa:	691b      	ldr	r3, [r3, #16]
 800b9ac:	4a05      	ldr	r2, [pc, #20]	; (800b9c4 <HAL_PWR_EnterSTOPMode+0x54>)
 800b9ae:	f023 0304 	bic.w	r3, r3, #4
 800b9b2:	6113      	str	r3, [r2, #16]
}
 800b9b4:	bf00      	nop
 800b9b6:	370c      	adds	r7, #12
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bc80      	pop	{r7}
 800b9bc:	4770      	bx	lr
 800b9be:	bf00      	nop
 800b9c0:	40007000 	.word	0x40007000
 800b9c4:	e000ed00 	.word	0xe000ed00

0800b9c8 <HAL_PWR_EnterSTANDBYMode>:
  *          - WKUP pin 2 (PC13) if enabled.
  *          - WKUP pin 3 (PE6) if enabled.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 800b9c8:	b480      	push	{r7}
 800b9ca:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 800b9cc:	4b08      	ldr	r3, [pc, #32]	; (800b9f0 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	4a07      	ldr	r2, [pc, #28]	; (800b9f0 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800b9d2:	f043 0302 	orr.w	r3, r3, #2
 800b9d6:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800b9d8:	4b06      	ldr	r3, [pc, #24]	; (800b9f4 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800b9da:	691b      	ldr	r3, [r3, #16]
 800b9dc:	4a05      	ldr	r2, [pc, #20]	; (800b9f4 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800b9de:	f043 0304 	orr.w	r3, r3, #4
 800b9e2:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 800b9e4:	bf30      	wfi
}
 800b9e6:	bf00      	nop
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bc80      	pop	{r7}
 800b9ec:	4770      	bx	lr
 800b9ee:	bf00      	nop
 800b9f0:	40007000 	.word	0x40007000
 800b9f4:	e000ed00 	.word	0xe000ed00

0800b9f8 <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 800b9f8:	b480      	push	{r7}
 800b9fa:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 800b9fc:	4b04      	ldr	r3, [pc, #16]	; (800ba10 <HAL_PWR_EnableSleepOnExit+0x18>)
 800b9fe:	691b      	ldr	r3, [r3, #16]
 800ba00:	4a03      	ldr	r2, [pc, #12]	; (800ba10 <HAL_PWR_EnableSleepOnExit+0x18>)
 800ba02:	f043 0302 	orr.w	r3, r3, #2
 800ba06:	6113      	str	r3, [r2, #16]
}
 800ba08:	bf00      	nop
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bc80      	pop	{r7}
 800ba0e:	4770      	bx	lr
 800ba10:	e000ed00 	.word	0xe000ed00

0800ba14 <HAL_PWR_DisableSleepOnExit>:
  * @note Clears SLEEPONEXIT bit of SCR register. When this bit is set, the processor
  *       re-enters SLEEP mode when an interruption handling is over.
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 800ba14:	b480      	push	{r7}
 800ba16:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 800ba18:	4b04      	ldr	r3, [pc, #16]	; (800ba2c <HAL_PWR_DisableSleepOnExit+0x18>)
 800ba1a:	691b      	ldr	r3, [r3, #16]
 800ba1c:	4a03      	ldr	r2, [pc, #12]	; (800ba2c <HAL_PWR_DisableSleepOnExit+0x18>)
 800ba1e:	f023 0302 	bic.w	r3, r3, #2
 800ba22:	6113      	str	r3, [r2, #16]
}
 800ba24:	bf00      	nop
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bc80      	pop	{r7}
 800ba2a:	4770      	bx	lr
 800ba2c:	e000ed00 	.word	0xe000ed00

0800ba30 <HAL_PWR_EnableSEVOnPend>:
  * @note Sets SEVONPEND bit of SCR register. When this bit is set, this causes
  *       WFE to wake up when an interrupt moves from inactive to pended.
  * @retval None
  */
void HAL_PWR_EnableSEVOnPend(void)
{
 800ba30:	b480      	push	{r7}
 800ba32:	af00      	add	r7, sp, #0
  /* Set SEVONPEND bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 800ba34:	4b04      	ldr	r3, [pc, #16]	; (800ba48 <HAL_PWR_EnableSEVOnPend+0x18>)
 800ba36:	691b      	ldr	r3, [r3, #16]
 800ba38:	4a03      	ldr	r2, [pc, #12]	; (800ba48 <HAL_PWR_EnableSEVOnPend+0x18>)
 800ba3a:	f043 0310 	orr.w	r3, r3, #16
 800ba3e:	6113      	str	r3, [r2, #16]
}
 800ba40:	bf00      	nop
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bc80      	pop	{r7}
 800ba46:	4770      	bx	lr
 800ba48:	e000ed00 	.word	0xe000ed00

0800ba4c <HAL_PWR_DisableSEVOnPend>:
  * @note Clears SEVONPEND bit of SCR register. When this bit is set, this causes
  *       WFE to wake up when an interrupt moves from inactive to pended.
  * @retval None
  */
void HAL_PWR_DisableSEVOnPend(void)
{
 800ba4c:	b480      	push	{r7}
 800ba4e:	af00      	add	r7, sp, #0
  /* Clear SEVONPEND bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 800ba50:	4b04      	ldr	r3, [pc, #16]	; (800ba64 <HAL_PWR_DisableSEVOnPend+0x18>)
 800ba52:	691b      	ldr	r3, [r3, #16]
 800ba54:	4a03      	ldr	r2, [pc, #12]	; (800ba64 <HAL_PWR_DisableSEVOnPend+0x18>)
 800ba56:	f023 0310 	bic.w	r3, r3, #16
 800ba5a:	6113      	str	r3, [r2, #16]
}
 800ba5c:	bf00      	nop
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bc80      	pop	{r7}
 800ba62:	4770      	bx	lr
 800ba64:	e000ed00 	.word	0xe000ed00

0800ba68 <HAL_PWR_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 800ba6c:	4b06      	ldr	r3, [pc, #24]	; (800ba88 <HAL_PWR_PVD_IRQHandler+0x20>)
 800ba6e:	695b      	ldr	r3, [r3, #20]
 800ba70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d005      	beq.n	800ba84 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 800ba78:	f000 f808 	bl	800ba8c <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 800ba7c:	4b02      	ldr	r3, [pc, #8]	; (800ba88 <HAL_PWR_PVD_IRQHandler+0x20>)
 800ba7e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800ba82:	615a      	str	r2, [r3, #20]
  }
}
 800ba84:	bf00      	nop
 800ba86:	bd80      	pop	{r7, pc}
 800ba88:	40010400 	.word	0x40010400

0800ba8c <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 800ba8c:	b480      	push	{r7}
 800ba8e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */
}
 800ba90:	bf00      	nop
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bc80      	pop	{r7}
 800ba96:	4770      	bx	lr

0800ba98 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1, PWR_REGULATOR_VOLTAGE_SCALE2 or PWR_REGULATOR_VOLTAGE_SCALE3)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800ba98:	b480      	push	{r7}
 800ba9a:	af00      	add	r7, sp, #0
  return  (PWR->CR & PWR_CR_VOS);
 800ba9c:	4b03      	ldr	r3, [pc, #12]	; (800baac <HAL_PWREx_GetVoltageRange+0x14>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
}
 800baa4:	4618      	mov	r0, r3
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bc80      	pop	{r7}
 800baaa:	4770      	bx	lr
 800baac:	40007000 	.word	0x40007000

0800bab0 <HAL_PWREx_EnableFastWakeUp>:
  *         Means, when ULP = 1 and FWU = 1 :VREFINT startup time is ignored when
  *         exiting from low power mode.
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
 800bab0:	b480      	push	{r7}
 800bab2:	b083      	sub	sp, #12
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800baba:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	fa93 f3a3 	rbit	r3, r3
 800bac2:	603b      	str	r3, [r7, #0]
  return result;
 800bac4:	683b      	ldr	r3, [r7, #0]
  /* Enable the fast wake up */
  *(__IO uint32_t *) CR_FWU_BB = (uint32_t)ENABLE;
 800bac6:	fab3 f383 	clz	r3, r3
 800baca:	b2db      	uxtb	r3, r3
 800bacc:	009b      	lsls	r3, r3, #2
 800bace:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800bad2:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
 800bad6:	461a      	mov	r2, r3
 800bad8:	2301      	movs	r3, #1
 800bada:	6013      	str	r3, [r2, #0]
}
 800badc:	bf00      	nop
 800bade:	370c      	adds	r7, #12
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bc80      	pop	{r7}
 800bae4:	4770      	bx	lr

0800bae6 <HAL_PWREx_DisableFastWakeUp>:
/**
  * @brief  Disables the Fast WakeUp from Ultra Low Power mode.
  * @retval None
  */
void HAL_PWREx_DisableFastWakeUp(void)
{
 800bae6:	b480      	push	{r7}
 800bae8:	b083      	sub	sp, #12
 800baea:	af00      	add	r7, sp, #0
 800baec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800baf0:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	fa93 f3a3 	rbit	r3, r3
 800baf8:	603b      	str	r3, [r7, #0]
  return result;
 800bafa:	683b      	ldr	r3, [r7, #0]
  /* Disable the fast wake up */
  *(__IO uint32_t *) CR_FWU_BB = (uint32_t)DISABLE;
 800bafc:	fab3 f383 	clz	r3, r3
 800bb00:	b2db      	uxtb	r3, r3
 800bb02:	009b      	lsls	r3, r3, #2
 800bb04:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800bb08:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
 800bb0c:	461a      	mov	r2, r3
 800bb0e:	2300      	movs	r3, #0
 800bb10:	6013      	str	r3, [r2, #0]
}
 800bb12:	bf00      	nop
 800bb14:	370c      	adds	r7, #12
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bc80      	pop	{r7}
 800bb1a:	4770      	bx	lr

0800bb1c <HAL_PWREx_EnableUltraLowPower>:
/**
  * @brief  Enables the Ultra Low Power mode
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
 800bb1c:	b480      	push	{r7}
 800bb1e:	b083      	sub	sp, #12
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bb26:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	fa93 f3a3 	rbit	r3, r3
 800bb2e:	603b      	str	r3, [r7, #0]
  return result;
 800bb30:	683b      	ldr	r3, [r7, #0]
  /* Enable the Ultra Low Power mode */
  *(__IO uint32_t *) CR_ULP_BB = (uint32_t)ENABLE;
 800bb32:	fab3 f383 	clz	r3, r3
 800bb36:	b2db      	uxtb	r3, r3
 800bb38:	009b      	lsls	r3, r3, #2
 800bb3a:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800bb3e:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
 800bb42:	461a      	mov	r2, r3
 800bb44:	2301      	movs	r3, #1
 800bb46:	6013      	str	r3, [r2, #0]
}
 800bb48:	bf00      	nop
 800bb4a:	370c      	adds	r7, #12
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bc80      	pop	{r7}
 800bb50:	4770      	bx	lr

0800bb52 <HAL_PWREx_DisableUltraLowPower>:
/**
  * @brief  Disables the Ultra Low Power mode
  * @retval None
  */
void HAL_PWREx_DisableUltraLowPower(void)
{
 800bb52:	b480      	push	{r7}
 800bb54:	b083      	sub	sp, #12
 800bb56:	af00      	add	r7, sp, #0
 800bb58:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bb5c:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	fa93 f3a3 	rbit	r3, r3
 800bb64:	603b      	str	r3, [r7, #0]
  return result;
 800bb66:	683b      	ldr	r3, [r7, #0]
  /* Disable the Ultra Low Power mode */
  *(__IO uint32_t *) CR_ULP_BB = (uint32_t)DISABLE;
 800bb68:	fab3 f383 	clz	r3, r3
 800bb6c:	b2db      	uxtb	r3, r3
 800bb6e:	009b      	lsls	r3, r3, #2
 800bb70:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800bb74:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
 800bb78:	461a      	mov	r2, r3
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	6013      	str	r3, [r2, #0]
}
 800bb7e:	bf00      	nop
 800bb80:	370c      	adds	r7, #12
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bc80      	pop	{r7}
 800bb86:	4770      	bx	lr

0800bb88 <HAL_PWREx_EnableLowPowerRunMode>:
  *         selected.
  * @note   In Low power run mode, all I/O pins keep the same state as in Run mode.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 800bb88:	b480      	push	{r7}
 800bb8a:	b085      	sub	sp, #20
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	2301      	movs	r3, #1
 800bb90:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	fa93 f3a3 	rbit	r3, r3
 800bb98:	603b      	str	r3, [r7, #0]
  return result;
 800bb9a:	683b      	ldr	r3, [r7, #0]
  /* Enters the Low Power Run mode */
  *(__IO uint32_t *) CR_LPSDSR_BB = (uint32_t)ENABLE;
 800bb9c:	fab3 f383 	clz	r3, r3
 800bba0:	b2db      	uxtb	r3, r3
 800bba2:	009b      	lsls	r3, r3, #2
 800bba4:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800bba8:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
 800bbac:	461a      	mov	r2, r3
 800bbae:	2301      	movs	r3, #1
 800bbb0:	6013      	str	r3, [r2, #0]
 800bbb2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bbb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	fa93 f3a3 	rbit	r3, r3
 800bbbe:	60bb      	str	r3, [r7, #8]
  return result;
 800bbc0:	68bb      	ldr	r3, [r7, #8]
  *(__IO uint32_t *) CR_LPRUN_BB  = (uint32_t)ENABLE;
 800bbc2:	fab3 f383 	clz	r3, r3
 800bbc6:	b2db      	uxtb	r3, r3
 800bbc8:	009b      	lsls	r3, r3, #2
 800bbca:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800bbce:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
 800bbd2:	461a      	mov	r2, r3
 800bbd4:	2301      	movs	r3, #1
 800bbd6:	6013      	str	r3, [r2, #0]
}
 800bbd8:	bf00      	nop
 800bbda:	3714      	adds	r7, #20
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	bc80      	pop	{r7}
 800bbe0:	4770      	bx	lr

0800bbe2 <HAL_PWREx_DisableLowPowerRunMode>:
/**
  * @brief  Exits the Low Power Run mode.
  * @retval None
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 800bbe2:	b480      	push	{r7}
 800bbe4:	b085      	sub	sp, #20
 800bbe6:	af00      	add	r7, sp, #0
 800bbe8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bbec:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	fa93 f3a3 	rbit	r3, r3
 800bbf4:	603b      	str	r3, [r7, #0]
  return result;
 800bbf6:	683b      	ldr	r3, [r7, #0]
  /* Exits the Low Power Run mode */
  *(__IO uint32_t *) CR_LPRUN_BB  = (uint32_t)DISABLE;
 800bbf8:	fab3 f383 	clz	r3, r3
 800bbfc:	b2db      	uxtb	r3, r3
 800bbfe:	009b      	lsls	r3, r3, #2
 800bc00:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800bc04:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
 800bc08:	461a      	mov	r2, r3
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	6013      	str	r3, [r2, #0]
 800bc0e:	2301      	movs	r3, #1
 800bc10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	fa93 f3a3 	rbit	r3, r3
 800bc18:	60bb      	str	r3, [r7, #8]
  return result;
 800bc1a:	68bb      	ldr	r3, [r7, #8]
  *(__IO uint32_t *) CR_LPSDSR_BB = (uint32_t)DISABLE;
 800bc1c:	fab3 f383 	clz	r3, r3
 800bc20:	b2db      	uxtb	r3, r3
 800bc22:	009b      	lsls	r3, r3, #2
 800bc24:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800bc28:	f503 2360 	add.w	r3, r3, #917504	; 0xe0000
 800bc2c:	461a      	mov	r2, r3
 800bc2e:	2300      	movs	r3, #0
 800bc30:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800bc32:	2300      	movs	r3, #0
}
 800bc34:	4618      	mov	r0, r3
 800bc36:	3714      	adds	r7, #20
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bc80      	pop	{r7}
 800bc3c:	4770      	bx	lr
	...

0800bc40 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b082      	sub	sp, #8
 800bc44:	af00      	add	r7, sp, #0
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Set MSIClockRange, HSITRIM and MSITRIM bits to the reset values */
  MODIFY_REG(RCC->ICSCR, (RCC_ICSCR_MSITRIM | RCC_ICSCR_HSITRIM | RCC_ICSCR_MSIRANGE), \
 800bc46:	4b3f      	ldr	r3, [pc, #252]	; (800bd44 <HAL_RCC_DeInit+0x104>)
 800bc48:	685b      	ldr	r3, [r3, #4]
 800bc4a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800bc4e:	4a3d      	ldr	r2, [pc, #244]	; (800bd44 <HAL_RCC_DeInit+0x104>)
 800bc50:	f443 4330 	orr.w	r3, r3, #45056	; 0xb000
 800bc54:	6053      	str	r3, [r2, #4]
            ((RCC_MSICALIBRATION_DEFAULT << RCC_ICSCR_MSITRIM_Pos) | (RCC_HSICALIBRATION_DEFAULT << RCC_ICSCR_HSITRIM_Pos) | RCC_ICSCR_MSIRANGE_5));

  /* Set MSION bit */
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800bc56:	4b3b      	ldr	r3, [pc, #236]	; (800bd44 <HAL_RCC_DeInit+0x104>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	4a3a      	ldr	r2, [pc, #232]	; (800bd44 <HAL_RCC_DeInit+0x104>)
 800bc5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bc60:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bc62:	f7f6 fcf7 	bl	8002654 <HAL_GetTick>
 800bc66:	6078      	str	r0, [r7, #4]

  /* Wait till MSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800bc68:	e008      	b.n	800bc7c <HAL_RCC_DeInit+0x3c>
  {
    if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800bc6a:	f7f6 fcf3 	bl	8002654 <HAL_GetTick>
 800bc6e:	4602      	mov	r2, r0
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	1ad3      	subs	r3, r2, r3
 800bc74:	2b02      	cmp	r3, #2
 800bc76:	d901      	bls.n	800bc7c <HAL_RCC_DeInit+0x3c>
    {
      return HAL_TIMEOUT;
 800bc78:	2303      	movs	r3, #3
 800bc7a:	e05e      	b.n	800bd3a <HAL_RCC_DeInit+0xfa>
  while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800bc7c:	4b31      	ldr	r3, [pc, #196]	; (800bd44 <HAL_RCC_DeInit+0x104>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d0f0      	beq.n	800bc6a <HAL_RCC_DeInit+0x2a>
    }
  }

  /* Switch SYSCLK to MSI*/
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_SW);
 800bc88:	4b2e      	ldr	r3, [pc, #184]	; (800bd44 <HAL_RCC_DeInit+0x104>)
 800bc8a:	689b      	ldr	r3, [r3, #8]
 800bc8c:	4a2d      	ldr	r2, [pc, #180]	; (800bd44 <HAL_RCC_DeInit+0x104>)
 800bc8e:	f023 0303 	bic.w	r3, r3, #3
 800bc92:	6093      	str	r3, [r2, #8]

  /* Wait till MSI as SYSCLK status is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 800bc94:	e00a      	b.n	800bcac <HAL_RCC_DeInit+0x6c>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bc96:	f7f6 fcdd 	bl	8002654 <HAL_GetTick>
 800bc9a:	4602      	mov	r2, r0
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	1ad3      	subs	r3, r2, r3
 800bca0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bca4:	4293      	cmp	r3, r2
 800bca6:	d901      	bls.n	800bcac <HAL_RCC_DeInit+0x6c>
    {
      return HAL_TIMEOUT;
 800bca8:	2303      	movs	r3, #3
 800bcaa:	e046      	b.n	800bd3a <HAL_RCC_DeInit+0xfa>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 800bcac:	4b25      	ldr	r3, [pc, #148]	; (800bd44 <HAL_RCC_DeInit+0x104>)
 800bcae:	689b      	ldr	r3, [r3, #8]
 800bcb0:	f003 030c 	and.w	r3, r3, #12
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d1ee      	bne.n	800bc96 <HAL_RCC_DeInit+0x56>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = MSI_VALUE;
 800bcb8:	4b23      	ldr	r3, [pc, #140]	; (800bd48 <HAL_RCC_DeInit+0x108>)
 800bcba:	4a24      	ldr	r2, [pc, #144]	; (800bd4c <HAL_RCC_DeInit+0x10c>)
 800bcbc:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clock settings  */
  status = HAL_InitTick(uwTickPrio);
 800bcbe:	4b24      	ldr	r3, [pc, #144]	; (800bd50 <HAL_RCC_DeInit+0x110>)
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f7f6 fc7a 	bl	80025bc <HAL_InitTick>
 800bcc8:	4603      	mov	r3, r0
 800bcca:	70fb      	strb	r3, [r7, #3]
  if(status != HAL_OK)
 800bccc:	78fb      	ldrb	r3, [r7, #3]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d001      	beq.n	800bcd6 <HAL_RCC_DeInit+0x96>
  {
    return status;
 800bcd2:	78fb      	ldrb	r3, [r7, #3]
 800bcd4:	e031      	b.n	800bd3a <HAL_RCC_DeInit+0xfa>
  }

  /* Reset HSION, HSEON, CSSON & PLLON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSION | RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLLON);
 800bcd6:	4b1b      	ldr	r3, [pc, #108]	; (800bd44 <HAL_RCC_DeInit+0x104>)
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	4a1a      	ldr	r2, [pc, #104]	; (800bd44 <HAL_RCC_DeInit+0x104>)
 800bcdc:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800bce0:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 800bce4:	6013      	str	r3, [r2, #0]
  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 800bce6:	4b17      	ldr	r3, [pc, #92]	; (800bd44 <HAL_RCC_DeInit+0x104>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	4a16      	ldr	r2, [pc, #88]	; (800bd44 <HAL_RCC_DeInit+0x104>)
 800bcec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bcf0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bcf2:	f7f6 fcaf 	bl	8002654 <HAL_GetTick>
 800bcf6:	6078      	str	r0, [r7, #4]

  /* Wait till PLL is not ready */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bcf8:	e008      	b.n	800bd0c <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bcfa:	f7f6 fcab 	bl	8002654 <HAL_GetTick>
 800bcfe:	4602      	mov	r2, r0
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	1ad3      	subs	r3, r2, r3
 800bd04:	2b02      	cmp	r3, #2
 800bd06:	d901      	bls.n	800bd0c <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 800bd08:	2303      	movs	r3, #3
 800bd0a:	e016      	b.n	800bd3a <HAL_RCC_DeInit+0xfa>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bd0c:	4b0d      	ldr	r3, [pc, #52]	; (800bd44 <HAL_RCC_DeInit+0x104>)
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d1f0      	bne.n	800bcfa <HAL_RCC_DeInit+0xba>
    }
  }

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 800bd18:	4b0a      	ldr	r3, [pc, #40]	; (800bd44 <HAL_RCC_DeInit+0x104>)
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	609a      	str	r2, [r3, #8]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 800bd1e:	4b09      	ldr	r3, [pc, #36]	; (800bd44 <HAL_RCC_DeInit+0x104>)
 800bd20:	2200      	movs	r2, #0
 800bd22:	60da      	str	r2, [r3, #12]

  /* Clear all flags */
#if defined(RCC_LSECSS_SUPPORT)
  WRITE_REG(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_MSIRDYC |  RCC_CIR_LSECSSC | RCC_CIR_CSSC);
 800bd24:	4b07      	ldr	r3, [pc, #28]	; (800bd44 <HAL_RCC_DeInit+0x104>)
 800bd26:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 800bd2a:	60da      	str	r2, [r3, #12]
#else
  WRITE_REG(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_MSIRDYC |  RCC_CIR_CSSC);
#endif

  /* Clear all reset flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 800bd2c:	4b05      	ldr	r3, [pc, #20]	; (800bd44 <HAL_RCC_DeInit+0x104>)
 800bd2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd30:	4a04      	ldr	r2, [pc, #16]	; (800bd44 <HAL_RCC_DeInit+0x104>)
 800bd32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bd36:	6353      	str	r3, [r2, #52]	; 0x34

  return HAL_OK;
 800bd38:	2300      	movs	r3, #0
}
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	3708      	adds	r7, #8
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd80      	pop	{r7, pc}
 800bd42:	bf00      	nop
 800bd44:	40023800 	.word	0x40023800
 800bd48:	2000006c 	.word	0x2000006c
 800bd4c:	001fff68 	.word	0x001fff68
 800bd50:	20000070 	.word	0x20000070

0800bd54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b088      	sub	sp, #32
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d101      	bne.n	800bd66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800bd62:	2301      	movs	r3, #1
 800bd64:	e31d      	b.n	800c3a2 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bd66:	4b94      	ldr	r3, [pc, #592]	; (800bfb8 <HAL_RCC_OscConfig+0x264>)
 800bd68:	689b      	ldr	r3, [r3, #8]
 800bd6a:	f003 030c 	and.w	r3, r3, #12
 800bd6e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bd70:	4b91      	ldr	r3, [pc, #580]	; (800bfb8 <HAL_RCC_OscConfig+0x264>)
 800bd72:	689b      	ldr	r3, [r3, #8]
 800bd74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bd78:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	f003 0301 	and.w	r3, r3, #1
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d07b      	beq.n	800be7e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800bd86:	69bb      	ldr	r3, [r7, #24]
 800bd88:	2b08      	cmp	r3, #8
 800bd8a:	d006      	beq.n	800bd9a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800bd8c:	69bb      	ldr	r3, [r7, #24]
 800bd8e:	2b0c      	cmp	r3, #12
 800bd90:	d10f      	bne.n	800bdb2 <HAL_RCC_OscConfig+0x5e>
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd98:	d10b      	bne.n	800bdb2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bd9a:	4b87      	ldr	r3, [pc, #540]	; (800bfb8 <HAL_RCC_OscConfig+0x264>)
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d06a      	beq.n	800be7c <HAL_RCC_OscConfig+0x128>
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	685b      	ldr	r3, [r3, #4]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d166      	bne.n	800be7c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800bdae:	2301      	movs	r3, #1
 800bdb0:	e2f7      	b.n	800c3a2 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	685b      	ldr	r3, [r3, #4]
 800bdb6:	2b01      	cmp	r3, #1
 800bdb8:	d106      	bne.n	800bdc8 <HAL_RCC_OscConfig+0x74>
 800bdba:	4b7f      	ldr	r3, [pc, #508]	; (800bfb8 <HAL_RCC_OscConfig+0x264>)
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	4a7e      	ldr	r2, [pc, #504]	; (800bfb8 <HAL_RCC_OscConfig+0x264>)
 800bdc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bdc4:	6013      	str	r3, [r2, #0]
 800bdc6:	e02d      	b.n	800be24 <HAL_RCC_OscConfig+0xd0>
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	685b      	ldr	r3, [r3, #4]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d10c      	bne.n	800bdea <HAL_RCC_OscConfig+0x96>
 800bdd0:	4b79      	ldr	r3, [pc, #484]	; (800bfb8 <HAL_RCC_OscConfig+0x264>)
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	4a78      	ldr	r2, [pc, #480]	; (800bfb8 <HAL_RCC_OscConfig+0x264>)
 800bdd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bdda:	6013      	str	r3, [r2, #0]
 800bddc:	4b76      	ldr	r3, [pc, #472]	; (800bfb8 <HAL_RCC_OscConfig+0x264>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	4a75      	ldr	r2, [pc, #468]	; (800bfb8 <HAL_RCC_OscConfig+0x264>)
 800bde2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bde6:	6013      	str	r3, [r2, #0]
 800bde8:	e01c      	b.n	800be24 <HAL_RCC_OscConfig+0xd0>
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	685b      	ldr	r3, [r3, #4]
 800bdee:	2b05      	cmp	r3, #5
 800bdf0:	d10c      	bne.n	800be0c <HAL_RCC_OscConfig+0xb8>
 800bdf2:	4b71      	ldr	r3, [pc, #452]	; (800bfb8 <HAL_RCC_OscConfig+0x264>)
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	4a70      	ldr	r2, [pc, #448]	; (800bfb8 <HAL_RCC_OscConfig+0x264>)
 800bdf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bdfc:	6013      	str	r3, [r2, #0]
 800bdfe:	4b6e      	ldr	r3, [pc, #440]	; (800bfb8 <HAL_RCC_OscConfig+0x264>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	4a6d      	ldr	r2, [pc, #436]	; (800bfb8 <HAL_RCC_OscConfig+0x264>)
 800be04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800be08:	6013      	str	r3, [r2, #0]
 800be0a:	e00b      	b.n	800be24 <HAL_RCC_OscConfig+0xd0>
 800be0c:	4b6a      	ldr	r3, [pc, #424]	; (800bfb8 <HAL_RCC_OscConfig+0x264>)
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	4a69      	ldr	r2, [pc, #420]	; (800bfb8 <HAL_RCC_OscConfig+0x264>)
 800be12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800be16:	6013      	str	r3, [r2, #0]
 800be18:	4b67      	ldr	r3, [pc, #412]	; (800bfb8 <HAL_RCC_OscConfig+0x264>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	4a66      	ldr	r2, [pc, #408]	; (800bfb8 <HAL_RCC_OscConfig+0x264>)
 800be1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800be22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	685b      	ldr	r3, [r3, #4]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d013      	beq.n	800be54 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800be2c:	f7f6 fc12 	bl	8002654 <HAL_GetTick>
 800be30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800be32:	e008      	b.n	800be46 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800be34:	f7f6 fc0e 	bl	8002654 <HAL_GetTick>
 800be38:	4602      	mov	r2, r0
 800be3a:	693b      	ldr	r3, [r7, #16]
 800be3c:	1ad3      	subs	r3, r2, r3
 800be3e:	2b64      	cmp	r3, #100	; 0x64
 800be40:	d901      	bls.n	800be46 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800be42:	2303      	movs	r3, #3
 800be44:	e2ad      	b.n	800c3a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800be46:	4b5c      	ldr	r3, [pc, #368]	; (800bfb8 <HAL_RCC_OscConfig+0x264>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d0f0      	beq.n	800be34 <HAL_RCC_OscConfig+0xe0>
 800be52:	e014      	b.n	800be7e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800be54:	f7f6 fbfe 	bl	8002654 <HAL_GetTick>
 800be58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800be5a:	e008      	b.n	800be6e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800be5c:	f7f6 fbfa 	bl	8002654 <HAL_GetTick>
 800be60:	4602      	mov	r2, r0
 800be62:	693b      	ldr	r3, [r7, #16]
 800be64:	1ad3      	subs	r3, r2, r3
 800be66:	2b64      	cmp	r3, #100	; 0x64
 800be68:	d901      	bls.n	800be6e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800be6a:	2303      	movs	r3, #3
 800be6c:	e299      	b.n	800c3a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800be6e:	4b52      	ldr	r3, [pc, #328]	; (800bfb8 <HAL_RCC_OscConfig+0x264>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be76:	2b00      	cmp	r3, #0
 800be78:	d1f0      	bne.n	800be5c <HAL_RCC_OscConfig+0x108>
 800be7a:	e000      	b.n	800be7e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800be7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	f003 0302 	and.w	r3, r3, #2
 800be86:	2b00      	cmp	r3, #0
 800be88:	d05a      	beq.n	800bf40 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800be8a:	69bb      	ldr	r3, [r7, #24]
 800be8c:	2b04      	cmp	r3, #4
 800be8e:	d005      	beq.n	800be9c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800be90:	69bb      	ldr	r3, [r7, #24]
 800be92:	2b0c      	cmp	r3, #12
 800be94:	d119      	bne.n	800beca <HAL_RCC_OscConfig+0x176>
 800be96:	697b      	ldr	r3, [r7, #20]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d116      	bne.n	800beca <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800be9c:	4b46      	ldr	r3, [pc, #280]	; (800bfb8 <HAL_RCC_OscConfig+0x264>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	f003 0302 	and.w	r3, r3, #2
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d005      	beq.n	800beb4 <HAL_RCC_OscConfig+0x160>
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	68db      	ldr	r3, [r3, #12]
 800beac:	2b01      	cmp	r3, #1
 800beae:	d001      	beq.n	800beb4 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 800beb0:	2301      	movs	r3, #1
 800beb2:	e276      	b.n	800c3a2 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800beb4:	4b40      	ldr	r3, [pc, #256]	; (800bfb8 <HAL_RCC_OscConfig+0x264>)
 800beb6:	685b      	ldr	r3, [r3, #4]
 800beb8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	691b      	ldr	r3, [r3, #16]
 800bec0:	021b      	lsls	r3, r3, #8
 800bec2:	493d      	ldr	r1, [pc, #244]	; (800bfb8 <HAL_RCC_OscConfig+0x264>)
 800bec4:	4313      	orrs	r3, r2
 800bec6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bec8:	e03a      	b.n	800bf40 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	68db      	ldr	r3, [r3, #12]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d020      	beq.n	800bf14 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bed2:	4b3a      	ldr	r3, [pc, #232]	; (800bfbc <HAL_RCC_OscConfig+0x268>)
 800bed4:	2201      	movs	r2, #1
 800bed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bed8:	f7f6 fbbc 	bl	8002654 <HAL_GetTick>
 800bedc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bede:	e008      	b.n	800bef2 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bee0:	f7f6 fbb8 	bl	8002654 <HAL_GetTick>
 800bee4:	4602      	mov	r2, r0
 800bee6:	693b      	ldr	r3, [r7, #16]
 800bee8:	1ad3      	subs	r3, r2, r3
 800beea:	2b02      	cmp	r3, #2
 800beec:	d901      	bls.n	800bef2 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800beee:	2303      	movs	r3, #3
 800bef0:	e257      	b.n	800c3a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bef2:	4b31      	ldr	r3, [pc, #196]	; (800bfb8 <HAL_RCC_OscConfig+0x264>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	f003 0302 	and.w	r3, r3, #2
 800befa:	2b00      	cmp	r3, #0
 800befc:	d0f0      	beq.n	800bee0 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800befe:	4b2e      	ldr	r3, [pc, #184]	; (800bfb8 <HAL_RCC_OscConfig+0x264>)
 800bf00:	685b      	ldr	r3, [r3, #4]
 800bf02:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	691b      	ldr	r3, [r3, #16]
 800bf0a:	021b      	lsls	r3, r3, #8
 800bf0c:	492a      	ldr	r1, [pc, #168]	; (800bfb8 <HAL_RCC_OscConfig+0x264>)
 800bf0e:	4313      	orrs	r3, r2
 800bf10:	604b      	str	r3, [r1, #4]
 800bf12:	e015      	b.n	800bf40 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bf14:	4b29      	ldr	r3, [pc, #164]	; (800bfbc <HAL_RCC_OscConfig+0x268>)
 800bf16:	2200      	movs	r2, #0
 800bf18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bf1a:	f7f6 fb9b 	bl	8002654 <HAL_GetTick>
 800bf1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800bf20:	e008      	b.n	800bf34 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bf22:	f7f6 fb97 	bl	8002654 <HAL_GetTick>
 800bf26:	4602      	mov	r2, r0
 800bf28:	693b      	ldr	r3, [r7, #16]
 800bf2a:	1ad3      	subs	r3, r2, r3
 800bf2c:	2b02      	cmp	r3, #2
 800bf2e:	d901      	bls.n	800bf34 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800bf30:	2303      	movs	r3, #3
 800bf32:	e236      	b.n	800c3a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800bf34:	4b20      	ldr	r3, [pc, #128]	; (800bfb8 <HAL_RCC_OscConfig+0x264>)
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	f003 0302 	and.w	r3, r3, #2
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d1f0      	bne.n	800bf22 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	f003 0310 	and.w	r3, r3, #16
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	f000 80b8 	beq.w	800c0be <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800bf4e:	69bb      	ldr	r3, [r7, #24]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d170      	bne.n	800c036 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800bf54:	4b18      	ldr	r3, [pc, #96]	; (800bfb8 <HAL_RCC_OscConfig+0x264>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d005      	beq.n	800bf6c <HAL_RCC_OscConfig+0x218>
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	699b      	ldr	r3, [r3, #24]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d101      	bne.n	800bf6c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 800bf68:	2301      	movs	r3, #1
 800bf6a:	e21a      	b.n	800c3a2 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	6a1a      	ldr	r2, [r3, #32]
 800bf70:	4b11      	ldr	r3, [pc, #68]	; (800bfb8 <HAL_RCC_OscConfig+0x264>)
 800bf72:	685b      	ldr	r3, [r3, #4]
 800bf74:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800bf78:	429a      	cmp	r2, r3
 800bf7a:	d921      	bls.n	800bfc0 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	6a1b      	ldr	r3, [r3, #32]
 800bf80:	4618      	mov	r0, r3
 800bf82:	f000 fd6f 	bl	800ca64 <RCC_SetFlashLatencyFromMSIRange>
 800bf86:	4603      	mov	r3, r0
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d001      	beq.n	800bf90 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	e208      	b.n	800c3a2 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bf90:	4b09      	ldr	r3, [pc, #36]	; (800bfb8 <HAL_RCC_OscConfig+0x264>)
 800bf92:	685b      	ldr	r3, [r3, #4]
 800bf94:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	6a1b      	ldr	r3, [r3, #32]
 800bf9c:	4906      	ldr	r1, [pc, #24]	; (800bfb8 <HAL_RCC_OscConfig+0x264>)
 800bf9e:	4313      	orrs	r3, r2
 800bfa0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800bfa2:	4b05      	ldr	r3, [pc, #20]	; (800bfb8 <HAL_RCC_OscConfig+0x264>)
 800bfa4:	685b      	ldr	r3, [r3, #4]
 800bfa6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	69db      	ldr	r3, [r3, #28]
 800bfae:	061b      	lsls	r3, r3, #24
 800bfb0:	4901      	ldr	r1, [pc, #4]	; (800bfb8 <HAL_RCC_OscConfig+0x264>)
 800bfb2:	4313      	orrs	r3, r2
 800bfb4:	604b      	str	r3, [r1, #4]
 800bfb6:	e020      	b.n	800bffa <HAL_RCC_OscConfig+0x2a6>
 800bfb8:	40023800 	.word	0x40023800
 800bfbc:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bfc0:	4b99      	ldr	r3, [pc, #612]	; (800c228 <HAL_RCC_OscConfig+0x4d4>)
 800bfc2:	685b      	ldr	r3, [r3, #4]
 800bfc4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	6a1b      	ldr	r3, [r3, #32]
 800bfcc:	4996      	ldr	r1, [pc, #600]	; (800c228 <HAL_RCC_OscConfig+0x4d4>)
 800bfce:	4313      	orrs	r3, r2
 800bfd0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800bfd2:	4b95      	ldr	r3, [pc, #596]	; (800c228 <HAL_RCC_OscConfig+0x4d4>)
 800bfd4:	685b      	ldr	r3, [r3, #4]
 800bfd6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	69db      	ldr	r3, [r3, #28]
 800bfde:	061b      	lsls	r3, r3, #24
 800bfe0:	4991      	ldr	r1, [pc, #580]	; (800c228 <HAL_RCC_OscConfig+0x4d4>)
 800bfe2:	4313      	orrs	r3, r2
 800bfe4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	6a1b      	ldr	r3, [r3, #32]
 800bfea:	4618      	mov	r0, r3
 800bfec:	f000 fd3a 	bl	800ca64 <RCC_SetFlashLatencyFromMSIRange>
 800bff0:	4603      	mov	r3, r0
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d001      	beq.n	800bffa <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800bff6:	2301      	movs	r3, #1
 800bff8:	e1d3      	b.n	800c3a2 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	6a1b      	ldr	r3, [r3, #32]
 800bffe:	0b5b      	lsrs	r3, r3, #13
 800c000:	3301      	adds	r3, #1
 800c002:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800c006:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800c00a:	4a87      	ldr	r2, [pc, #540]	; (800c228 <HAL_RCC_OscConfig+0x4d4>)
 800c00c:	6892      	ldr	r2, [r2, #8]
 800c00e:	0912      	lsrs	r2, r2, #4
 800c010:	f002 020f 	and.w	r2, r2, #15
 800c014:	4985      	ldr	r1, [pc, #532]	; (800c22c <HAL_RCC_OscConfig+0x4d8>)
 800c016:	5c8a      	ldrb	r2, [r1, r2]
 800c018:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800c01a:	4a85      	ldr	r2, [pc, #532]	; (800c230 <HAL_RCC_OscConfig+0x4dc>)
 800c01c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800c01e:	4b85      	ldr	r3, [pc, #532]	; (800c234 <HAL_RCC_OscConfig+0x4e0>)
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	4618      	mov	r0, r3
 800c024:	f7f6 faca 	bl	80025bc <HAL_InitTick>
 800c028:	4603      	mov	r3, r0
 800c02a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800c02c:	7bfb      	ldrb	r3, [r7, #15]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d045      	beq.n	800c0be <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800c032:	7bfb      	ldrb	r3, [r7, #15]
 800c034:	e1b5      	b.n	800c3a2 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	699b      	ldr	r3, [r3, #24]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d029      	beq.n	800c092 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800c03e:	4b7e      	ldr	r3, [pc, #504]	; (800c238 <HAL_RCC_OscConfig+0x4e4>)
 800c040:	2201      	movs	r2, #1
 800c042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c044:	f7f6 fb06 	bl	8002654 <HAL_GetTick>
 800c048:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800c04a:	e008      	b.n	800c05e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c04c:	f7f6 fb02 	bl	8002654 <HAL_GetTick>
 800c050:	4602      	mov	r2, r0
 800c052:	693b      	ldr	r3, [r7, #16]
 800c054:	1ad3      	subs	r3, r2, r3
 800c056:	2b02      	cmp	r3, #2
 800c058:	d901      	bls.n	800c05e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800c05a:	2303      	movs	r3, #3
 800c05c:	e1a1      	b.n	800c3a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800c05e:	4b72      	ldr	r3, [pc, #456]	; (800c228 <HAL_RCC_OscConfig+0x4d4>)
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c066:	2b00      	cmp	r3, #0
 800c068:	d0f0      	beq.n	800c04c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c06a:	4b6f      	ldr	r3, [pc, #444]	; (800c228 <HAL_RCC_OscConfig+0x4d4>)
 800c06c:	685b      	ldr	r3, [r3, #4]
 800c06e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	6a1b      	ldr	r3, [r3, #32]
 800c076:	496c      	ldr	r1, [pc, #432]	; (800c228 <HAL_RCC_OscConfig+0x4d4>)
 800c078:	4313      	orrs	r3, r2
 800c07a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c07c:	4b6a      	ldr	r3, [pc, #424]	; (800c228 <HAL_RCC_OscConfig+0x4d4>)
 800c07e:	685b      	ldr	r3, [r3, #4]
 800c080:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	69db      	ldr	r3, [r3, #28]
 800c088:	061b      	lsls	r3, r3, #24
 800c08a:	4967      	ldr	r1, [pc, #412]	; (800c228 <HAL_RCC_OscConfig+0x4d4>)
 800c08c:	4313      	orrs	r3, r2
 800c08e:	604b      	str	r3, [r1, #4]
 800c090:	e015      	b.n	800c0be <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800c092:	4b69      	ldr	r3, [pc, #420]	; (800c238 <HAL_RCC_OscConfig+0x4e4>)
 800c094:	2200      	movs	r2, #0
 800c096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c098:	f7f6 fadc 	bl	8002654 <HAL_GetTick>
 800c09c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800c09e:	e008      	b.n	800c0b2 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c0a0:	f7f6 fad8 	bl	8002654 <HAL_GetTick>
 800c0a4:	4602      	mov	r2, r0
 800c0a6:	693b      	ldr	r3, [r7, #16]
 800c0a8:	1ad3      	subs	r3, r2, r3
 800c0aa:	2b02      	cmp	r3, #2
 800c0ac:	d901      	bls.n	800c0b2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800c0ae:	2303      	movs	r3, #3
 800c0b0:	e177      	b.n	800c3a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800c0b2:	4b5d      	ldr	r3, [pc, #372]	; (800c228 <HAL_RCC_OscConfig+0x4d4>)
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d1f0      	bne.n	800c0a0 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	f003 0308 	and.w	r3, r3, #8
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d030      	beq.n	800c12c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	695b      	ldr	r3, [r3, #20]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d016      	beq.n	800c100 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c0d2:	4b5a      	ldr	r3, [pc, #360]	; (800c23c <HAL_RCC_OscConfig+0x4e8>)
 800c0d4:	2201      	movs	r2, #1
 800c0d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c0d8:	f7f6 fabc 	bl	8002654 <HAL_GetTick>
 800c0dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800c0de:	e008      	b.n	800c0f2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c0e0:	f7f6 fab8 	bl	8002654 <HAL_GetTick>
 800c0e4:	4602      	mov	r2, r0
 800c0e6:	693b      	ldr	r3, [r7, #16]
 800c0e8:	1ad3      	subs	r3, r2, r3
 800c0ea:	2b02      	cmp	r3, #2
 800c0ec:	d901      	bls.n	800c0f2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800c0ee:	2303      	movs	r3, #3
 800c0f0:	e157      	b.n	800c3a2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800c0f2:	4b4d      	ldr	r3, [pc, #308]	; (800c228 <HAL_RCC_OscConfig+0x4d4>)
 800c0f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0f6:	f003 0302 	and.w	r3, r3, #2
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d0f0      	beq.n	800c0e0 <HAL_RCC_OscConfig+0x38c>
 800c0fe:	e015      	b.n	800c12c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c100:	4b4e      	ldr	r3, [pc, #312]	; (800c23c <HAL_RCC_OscConfig+0x4e8>)
 800c102:	2200      	movs	r2, #0
 800c104:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c106:	f7f6 faa5 	bl	8002654 <HAL_GetTick>
 800c10a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800c10c:	e008      	b.n	800c120 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c10e:	f7f6 faa1 	bl	8002654 <HAL_GetTick>
 800c112:	4602      	mov	r2, r0
 800c114:	693b      	ldr	r3, [r7, #16]
 800c116:	1ad3      	subs	r3, r2, r3
 800c118:	2b02      	cmp	r3, #2
 800c11a:	d901      	bls.n	800c120 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800c11c:	2303      	movs	r3, #3
 800c11e:	e140      	b.n	800c3a2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800c120:	4b41      	ldr	r3, [pc, #260]	; (800c228 <HAL_RCC_OscConfig+0x4d4>)
 800c122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c124:	f003 0302 	and.w	r3, r3, #2
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d1f0      	bne.n	800c10e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	f003 0304 	and.w	r3, r3, #4
 800c134:	2b00      	cmp	r3, #0
 800c136:	f000 80b5 	beq.w	800c2a4 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c13a:	2300      	movs	r3, #0
 800c13c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c13e:	4b3a      	ldr	r3, [pc, #232]	; (800c228 <HAL_RCC_OscConfig+0x4d4>)
 800c140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c146:	2b00      	cmp	r3, #0
 800c148:	d10d      	bne.n	800c166 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c14a:	4b37      	ldr	r3, [pc, #220]	; (800c228 <HAL_RCC_OscConfig+0x4d4>)
 800c14c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c14e:	4a36      	ldr	r2, [pc, #216]	; (800c228 <HAL_RCC_OscConfig+0x4d4>)
 800c150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c154:	6253      	str	r3, [r2, #36]	; 0x24
 800c156:	4b34      	ldr	r3, [pc, #208]	; (800c228 <HAL_RCC_OscConfig+0x4d4>)
 800c158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c15a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c15e:	60bb      	str	r3, [r7, #8]
 800c160:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c162:	2301      	movs	r3, #1
 800c164:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c166:	4b36      	ldr	r3, [pc, #216]	; (800c240 <HAL_RCC_OscConfig+0x4ec>)
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d118      	bne.n	800c1a4 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c172:	4b33      	ldr	r3, [pc, #204]	; (800c240 <HAL_RCC_OscConfig+0x4ec>)
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	4a32      	ldr	r2, [pc, #200]	; (800c240 <HAL_RCC_OscConfig+0x4ec>)
 800c178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c17c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c17e:	f7f6 fa69 	bl	8002654 <HAL_GetTick>
 800c182:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c184:	e008      	b.n	800c198 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c186:	f7f6 fa65 	bl	8002654 <HAL_GetTick>
 800c18a:	4602      	mov	r2, r0
 800c18c:	693b      	ldr	r3, [r7, #16]
 800c18e:	1ad3      	subs	r3, r2, r3
 800c190:	2b64      	cmp	r3, #100	; 0x64
 800c192:	d901      	bls.n	800c198 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800c194:	2303      	movs	r3, #3
 800c196:	e104      	b.n	800c3a2 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c198:	4b29      	ldr	r3, [pc, #164]	; (800c240 <HAL_RCC_OscConfig+0x4ec>)
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d0f0      	beq.n	800c186 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	689b      	ldr	r3, [r3, #8]
 800c1a8:	2b01      	cmp	r3, #1
 800c1aa:	d106      	bne.n	800c1ba <HAL_RCC_OscConfig+0x466>
 800c1ac:	4b1e      	ldr	r3, [pc, #120]	; (800c228 <HAL_RCC_OscConfig+0x4d4>)
 800c1ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1b0:	4a1d      	ldr	r2, [pc, #116]	; (800c228 <HAL_RCC_OscConfig+0x4d4>)
 800c1b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c1b6:	6353      	str	r3, [r2, #52]	; 0x34
 800c1b8:	e02d      	b.n	800c216 <HAL_RCC_OscConfig+0x4c2>
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	689b      	ldr	r3, [r3, #8]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d10c      	bne.n	800c1dc <HAL_RCC_OscConfig+0x488>
 800c1c2:	4b19      	ldr	r3, [pc, #100]	; (800c228 <HAL_RCC_OscConfig+0x4d4>)
 800c1c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1c6:	4a18      	ldr	r2, [pc, #96]	; (800c228 <HAL_RCC_OscConfig+0x4d4>)
 800c1c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c1cc:	6353      	str	r3, [r2, #52]	; 0x34
 800c1ce:	4b16      	ldr	r3, [pc, #88]	; (800c228 <HAL_RCC_OscConfig+0x4d4>)
 800c1d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1d2:	4a15      	ldr	r2, [pc, #84]	; (800c228 <HAL_RCC_OscConfig+0x4d4>)
 800c1d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c1d8:	6353      	str	r3, [r2, #52]	; 0x34
 800c1da:	e01c      	b.n	800c216 <HAL_RCC_OscConfig+0x4c2>
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	689b      	ldr	r3, [r3, #8]
 800c1e0:	2b05      	cmp	r3, #5
 800c1e2:	d10c      	bne.n	800c1fe <HAL_RCC_OscConfig+0x4aa>
 800c1e4:	4b10      	ldr	r3, [pc, #64]	; (800c228 <HAL_RCC_OscConfig+0x4d4>)
 800c1e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1e8:	4a0f      	ldr	r2, [pc, #60]	; (800c228 <HAL_RCC_OscConfig+0x4d4>)
 800c1ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c1ee:	6353      	str	r3, [r2, #52]	; 0x34
 800c1f0:	4b0d      	ldr	r3, [pc, #52]	; (800c228 <HAL_RCC_OscConfig+0x4d4>)
 800c1f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1f4:	4a0c      	ldr	r2, [pc, #48]	; (800c228 <HAL_RCC_OscConfig+0x4d4>)
 800c1f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c1fa:	6353      	str	r3, [r2, #52]	; 0x34
 800c1fc:	e00b      	b.n	800c216 <HAL_RCC_OscConfig+0x4c2>
 800c1fe:	4b0a      	ldr	r3, [pc, #40]	; (800c228 <HAL_RCC_OscConfig+0x4d4>)
 800c200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c202:	4a09      	ldr	r2, [pc, #36]	; (800c228 <HAL_RCC_OscConfig+0x4d4>)
 800c204:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c208:	6353      	str	r3, [r2, #52]	; 0x34
 800c20a:	4b07      	ldr	r3, [pc, #28]	; (800c228 <HAL_RCC_OscConfig+0x4d4>)
 800c20c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c20e:	4a06      	ldr	r2, [pc, #24]	; (800c228 <HAL_RCC_OscConfig+0x4d4>)
 800c210:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c214:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	689b      	ldr	r3, [r3, #8]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d024      	beq.n	800c268 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c21e:	f7f6 fa19 	bl	8002654 <HAL_GetTick>
 800c222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c224:	e019      	b.n	800c25a <HAL_RCC_OscConfig+0x506>
 800c226:	bf00      	nop
 800c228:	40023800 	.word	0x40023800
 800c22c:	08021004 	.word	0x08021004
 800c230:	2000006c 	.word	0x2000006c
 800c234:	20000070 	.word	0x20000070
 800c238:	42470020 	.word	0x42470020
 800c23c:	42470680 	.word	0x42470680
 800c240:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c244:	f7f6 fa06 	bl	8002654 <HAL_GetTick>
 800c248:	4602      	mov	r2, r0
 800c24a:	693b      	ldr	r3, [r7, #16]
 800c24c:	1ad3      	subs	r3, r2, r3
 800c24e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c252:	4293      	cmp	r3, r2
 800c254:	d901      	bls.n	800c25a <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 800c256:	2303      	movs	r3, #3
 800c258:	e0a3      	b.n	800c3a2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c25a:	4b54      	ldr	r3, [pc, #336]	; (800c3ac <HAL_RCC_OscConfig+0x658>)
 800c25c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c25e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c262:	2b00      	cmp	r3, #0
 800c264:	d0ee      	beq.n	800c244 <HAL_RCC_OscConfig+0x4f0>
 800c266:	e014      	b.n	800c292 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c268:	f7f6 f9f4 	bl	8002654 <HAL_GetTick>
 800c26c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800c26e:	e00a      	b.n	800c286 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c270:	f7f6 f9f0 	bl	8002654 <HAL_GetTick>
 800c274:	4602      	mov	r2, r0
 800c276:	693b      	ldr	r3, [r7, #16]
 800c278:	1ad3      	subs	r3, r2, r3
 800c27a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c27e:	4293      	cmp	r3, r2
 800c280:	d901      	bls.n	800c286 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800c282:	2303      	movs	r3, #3
 800c284:	e08d      	b.n	800c3a2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800c286:	4b49      	ldr	r3, [pc, #292]	; (800c3ac <HAL_RCC_OscConfig+0x658>)
 800c288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c28a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d1ee      	bne.n	800c270 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800c292:	7ffb      	ldrb	r3, [r7, #31]
 800c294:	2b01      	cmp	r3, #1
 800c296:	d105      	bne.n	800c2a4 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c298:	4b44      	ldr	r3, [pc, #272]	; (800c3ac <HAL_RCC_OscConfig+0x658>)
 800c29a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c29c:	4a43      	ldr	r2, [pc, #268]	; (800c3ac <HAL_RCC_OscConfig+0x658>)
 800c29e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c2a2:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d079      	beq.n	800c3a0 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c2ac:	69bb      	ldr	r3, [r7, #24]
 800c2ae:	2b0c      	cmp	r3, #12
 800c2b0:	d056      	beq.n	800c360 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2b6:	2b02      	cmp	r3, #2
 800c2b8:	d13b      	bne.n	800c332 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c2ba:	4b3d      	ldr	r3, [pc, #244]	; (800c3b0 <HAL_RCC_OscConfig+0x65c>)
 800c2bc:	2200      	movs	r2, #0
 800c2be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c2c0:	f7f6 f9c8 	bl	8002654 <HAL_GetTick>
 800c2c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c2c6:	e008      	b.n	800c2da <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c2c8:	f7f6 f9c4 	bl	8002654 <HAL_GetTick>
 800c2cc:	4602      	mov	r2, r0
 800c2ce:	693b      	ldr	r3, [r7, #16]
 800c2d0:	1ad3      	subs	r3, r2, r3
 800c2d2:	2b02      	cmp	r3, #2
 800c2d4:	d901      	bls.n	800c2da <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800c2d6:	2303      	movs	r3, #3
 800c2d8:	e063      	b.n	800c3a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c2da:	4b34      	ldr	r3, [pc, #208]	; (800c3ac <HAL_RCC_OscConfig+0x658>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d1f0      	bne.n	800c2c8 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c2e6:	4b31      	ldr	r3, [pc, #196]	; (800c3ac <HAL_RCC_OscConfig+0x658>)
 800c2e8:	689b      	ldr	r3, [r3, #8]
 800c2ea:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2f6:	4319      	orrs	r1, r3
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2fc:	430b      	orrs	r3, r1
 800c2fe:	492b      	ldr	r1, [pc, #172]	; (800c3ac <HAL_RCC_OscConfig+0x658>)
 800c300:	4313      	orrs	r3, r2
 800c302:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c304:	4b2a      	ldr	r3, [pc, #168]	; (800c3b0 <HAL_RCC_OscConfig+0x65c>)
 800c306:	2201      	movs	r2, #1
 800c308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c30a:	f7f6 f9a3 	bl	8002654 <HAL_GetTick>
 800c30e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c310:	e008      	b.n	800c324 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c312:	f7f6 f99f 	bl	8002654 <HAL_GetTick>
 800c316:	4602      	mov	r2, r0
 800c318:	693b      	ldr	r3, [r7, #16]
 800c31a:	1ad3      	subs	r3, r2, r3
 800c31c:	2b02      	cmp	r3, #2
 800c31e:	d901      	bls.n	800c324 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800c320:	2303      	movs	r3, #3
 800c322:	e03e      	b.n	800c3a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c324:	4b21      	ldr	r3, [pc, #132]	; (800c3ac <HAL_RCC_OscConfig+0x658>)
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d0f0      	beq.n	800c312 <HAL_RCC_OscConfig+0x5be>
 800c330:	e036      	b.n	800c3a0 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c332:	4b1f      	ldr	r3, [pc, #124]	; (800c3b0 <HAL_RCC_OscConfig+0x65c>)
 800c334:	2200      	movs	r2, #0
 800c336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c338:	f7f6 f98c 	bl	8002654 <HAL_GetTick>
 800c33c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c33e:	e008      	b.n	800c352 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c340:	f7f6 f988 	bl	8002654 <HAL_GetTick>
 800c344:	4602      	mov	r2, r0
 800c346:	693b      	ldr	r3, [r7, #16]
 800c348:	1ad3      	subs	r3, r2, r3
 800c34a:	2b02      	cmp	r3, #2
 800c34c:	d901      	bls.n	800c352 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800c34e:	2303      	movs	r3, #3
 800c350:	e027      	b.n	800c3a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c352:	4b16      	ldr	r3, [pc, #88]	; (800c3ac <HAL_RCC_OscConfig+0x658>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d1f0      	bne.n	800c340 <HAL_RCC_OscConfig+0x5ec>
 800c35e:	e01f      	b.n	800c3a0 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c364:	2b01      	cmp	r3, #1
 800c366:	d101      	bne.n	800c36c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 800c368:	2301      	movs	r3, #1
 800c36a:	e01a      	b.n	800c3a2 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800c36c:	4b0f      	ldr	r3, [pc, #60]	; (800c3ac <HAL_RCC_OscConfig+0x658>)
 800c36e:	689b      	ldr	r3, [r3, #8]
 800c370:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c372:	697b      	ldr	r3, [r7, #20]
 800c374:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c37c:	429a      	cmp	r2, r3
 800c37e:	d10d      	bne.n	800c39c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800c380:	697b      	ldr	r3, [r7, #20]
 800c382:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c38a:	429a      	cmp	r2, r3
 800c38c:	d106      	bne.n	800c39c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800c38e:	697b      	ldr	r3, [r7, #20]
 800c390:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800c398:	429a      	cmp	r2, r3
 800c39a:	d001      	beq.n	800c3a0 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 800c39c:	2301      	movs	r3, #1
 800c39e:	e000      	b.n	800c3a2 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 800c3a0:	2300      	movs	r3, #0
}
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	3720      	adds	r7, #32
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	bd80      	pop	{r7, pc}
 800c3aa:	bf00      	nop
 800c3ac:	40023800 	.word	0x40023800
 800c3b0:	42470060 	.word	0x42470060

0800c3b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b084      	sub	sp, #16
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
 800c3bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d101      	bne.n	800c3c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c3c4:	2301      	movs	r3, #1
 800c3c6:	e11a      	b.n	800c5fe <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c3c8:	4b8f      	ldr	r3, [pc, #572]	; (800c608 <HAL_RCC_ClockConfig+0x254>)
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	f003 0301 	and.w	r3, r3, #1
 800c3d0:	683a      	ldr	r2, [r7, #0]
 800c3d2:	429a      	cmp	r2, r3
 800c3d4:	d919      	bls.n	800c40a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	2b01      	cmp	r3, #1
 800c3da:	d105      	bne.n	800c3e8 <HAL_RCC_ClockConfig+0x34>
 800c3dc:	4b8a      	ldr	r3, [pc, #552]	; (800c608 <HAL_RCC_ClockConfig+0x254>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	4a89      	ldr	r2, [pc, #548]	; (800c608 <HAL_RCC_ClockConfig+0x254>)
 800c3e2:	f043 0304 	orr.w	r3, r3, #4
 800c3e6:	6013      	str	r3, [r2, #0]
 800c3e8:	4b87      	ldr	r3, [pc, #540]	; (800c608 <HAL_RCC_ClockConfig+0x254>)
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	f023 0201 	bic.w	r2, r3, #1
 800c3f0:	4985      	ldr	r1, [pc, #532]	; (800c608 <HAL_RCC_ClockConfig+0x254>)
 800c3f2:	683b      	ldr	r3, [r7, #0]
 800c3f4:	4313      	orrs	r3, r2
 800c3f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c3f8:	4b83      	ldr	r3, [pc, #524]	; (800c608 <HAL_RCC_ClockConfig+0x254>)
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	f003 0301 	and.w	r3, r3, #1
 800c400:	683a      	ldr	r2, [r7, #0]
 800c402:	429a      	cmp	r2, r3
 800c404:	d001      	beq.n	800c40a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800c406:	2301      	movs	r3, #1
 800c408:	e0f9      	b.n	800c5fe <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	f003 0302 	and.w	r3, r3, #2
 800c412:	2b00      	cmp	r3, #0
 800c414:	d008      	beq.n	800c428 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c416:	4b7d      	ldr	r3, [pc, #500]	; (800c60c <HAL_RCC_ClockConfig+0x258>)
 800c418:	689b      	ldr	r3, [r3, #8]
 800c41a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	689b      	ldr	r3, [r3, #8]
 800c422:	497a      	ldr	r1, [pc, #488]	; (800c60c <HAL_RCC_ClockConfig+0x258>)
 800c424:	4313      	orrs	r3, r2
 800c426:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	f003 0301 	and.w	r3, r3, #1
 800c430:	2b00      	cmp	r3, #0
 800c432:	f000 808e 	beq.w	800c552 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	685b      	ldr	r3, [r3, #4]
 800c43a:	2b02      	cmp	r3, #2
 800c43c:	d107      	bne.n	800c44e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c43e:	4b73      	ldr	r3, [pc, #460]	; (800c60c <HAL_RCC_ClockConfig+0x258>)
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c446:	2b00      	cmp	r3, #0
 800c448:	d121      	bne.n	800c48e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800c44a:	2301      	movs	r3, #1
 800c44c:	e0d7      	b.n	800c5fe <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	685b      	ldr	r3, [r3, #4]
 800c452:	2b03      	cmp	r3, #3
 800c454:	d107      	bne.n	800c466 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c456:	4b6d      	ldr	r3, [pc, #436]	; (800c60c <HAL_RCC_ClockConfig+0x258>)
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d115      	bne.n	800c48e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800c462:	2301      	movs	r3, #1
 800c464:	e0cb      	b.n	800c5fe <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	685b      	ldr	r3, [r3, #4]
 800c46a:	2b01      	cmp	r3, #1
 800c46c:	d107      	bne.n	800c47e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c46e:	4b67      	ldr	r3, [pc, #412]	; (800c60c <HAL_RCC_ClockConfig+0x258>)
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	f003 0302 	and.w	r3, r3, #2
 800c476:	2b00      	cmp	r3, #0
 800c478:	d109      	bne.n	800c48e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800c47a:	2301      	movs	r3, #1
 800c47c:	e0bf      	b.n	800c5fe <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800c47e:	4b63      	ldr	r3, [pc, #396]	; (800c60c <HAL_RCC_ClockConfig+0x258>)
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c486:	2b00      	cmp	r3, #0
 800c488:	d101      	bne.n	800c48e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800c48a:	2301      	movs	r3, #1
 800c48c:	e0b7      	b.n	800c5fe <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c48e:	4b5f      	ldr	r3, [pc, #380]	; (800c60c <HAL_RCC_ClockConfig+0x258>)
 800c490:	689b      	ldr	r3, [r3, #8]
 800c492:	f023 0203 	bic.w	r2, r3, #3
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	685b      	ldr	r3, [r3, #4]
 800c49a:	495c      	ldr	r1, [pc, #368]	; (800c60c <HAL_RCC_ClockConfig+0x258>)
 800c49c:	4313      	orrs	r3, r2
 800c49e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c4a0:	f7f6 f8d8 	bl	8002654 <HAL_GetTick>
 800c4a4:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	685b      	ldr	r3, [r3, #4]
 800c4aa:	2b02      	cmp	r3, #2
 800c4ac:	d112      	bne.n	800c4d4 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800c4ae:	e00a      	b.n	800c4c6 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c4b0:	f7f6 f8d0 	bl	8002654 <HAL_GetTick>
 800c4b4:	4602      	mov	r2, r0
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	1ad3      	subs	r3, r2, r3
 800c4ba:	f241 3288 	movw	r2, #5000	; 0x1388
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	d901      	bls.n	800c4c6 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800c4c2:	2303      	movs	r3, #3
 800c4c4:	e09b      	b.n	800c5fe <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800c4c6:	4b51      	ldr	r3, [pc, #324]	; (800c60c <HAL_RCC_ClockConfig+0x258>)
 800c4c8:	689b      	ldr	r3, [r3, #8]
 800c4ca:	f003 030c 	and.w	r3, r3, #12
 800c4ce:	2b08      	cmp	r3, #8
 800c4d0:	d1ee      	bne.n	800c4b0 <HAL_RCC_ClockConfig+0xfc>
 800c4d2:	e03e      	b.n	800c552 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	685b      	ldr	r3, [r3, #4]
 800c4d8:	2b03      	cmp	r3, #3
 800c4da:	d112      	bne.n	800c502 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c4dc:	e00a      	b.n	800c4f4 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c4de:	f7f6 f8b9 	bl	8002654 <HAL_GetTick>
 800c4e2:	4602      	mov	r2, r0
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	1ad3      	subs	r3, r2, r3
 800c4e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c4ec:	4293      	cmp	r3, r2
 800c4ee:	d901      	bls.n	800c4f4 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 800c4f0:	2303      	movs	r3, #3
 800c4f2:	e084      	b.n	800c5fe <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c4f4:	4b45      	ldr	r3, [pc, #276]	; (800c60c <HAL_RCC_ClockConfig+0x258>)
 800c4f6:	689b      	ldr	r3, [r3, #8]
 800c4f8:	f003 030c 	and.w	r3, r3, #12
 800c4fc:	2b0c      	cmp	r3, #12
 800c4fe:	d1ee      	bne.n	800c4de <HAL_RCC_ClockConfig+0x12a>
 800c500:	e027      	b.n	800c552 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	685b      	ldr	r3, [r3, #4]
 800c506:	2b01      	cmp	r3, #1
 800c508:	d11d      	bne.n	800c546 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800c50a:	e00a      	b.n	800c522 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c50c:	f7f6 f8a2 	bl	8002654 <HAL_GetTick>
 800c510:	4602      	mov	r2, r0
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	1ad3      	subs	r3, r2, r3
 800c516:	f241 3288 	movw	r2, #5000	; 0x1388
 800c51a:	4293      	cmp	r3, r2
 800c51c:	d901      	bls.n	800c522 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800c51e:	2303      	movs	r3, #3
 800c520:	e06d      	b.n	800c5fe <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800c522:	4b3a      	ldr	r3, [pc, #232]	; (800c60c <HAL_RCC_ClockConfig+0x258>)
 800c524:	689b      	ldr	r3, [r3, #8]
 800c526:	f003 030c 	and.w	r3, r3, #12
 800c52a:	2b04      	cmp	r3, #4
 800c52c:	d1ee      	bne.n	800c50c <HAL_RCC_ClockConfig+0x158>
 800c52e:	e010      	b.n	800c552 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c530:	f7f6 f890 	bl	8002654 <HAL_GetTick>
 800c534:	4602      	mov	r2, r0
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	1ad3      	subs	r3, r2, r3
 800c53a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c53e:	4293      	cmp	r3, r2
 800c540:	d901      	bls.n	800c546 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800c542:	2303      	movs	r3, #3
 800c544:	e05b      	b.n	800c5fe <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800c546:	4b31      	ldr	r3, [pc, #196]	; (800c60c <HAL_RCC_ClockConfig+0x258>)
 800c548:	689b      	ldr	r3, [r3, #8]
 800c54a:	f003 030c 	and.w	r3, r3, #12
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d1ee      	bne.n	800c530 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c552:	4b2d      	ldr	r3, [pc, #180]	; (800c608 <HAL_RCC_ClockConfig+0x254>)
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	f003 0301 	and.w	r3, r3, #1
 800c55a:	683a      	ldr	r2, [r7, #0]
 800c55c:	429a      	cmp	r2, r3
 800c55e:	d219      	bcs.n	800c594 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	2b01      	cmp	r3, #1
 800c564:	d105      	bne.n	800c572 <HAL_RCC_ClockConfig+0x1be>
 800c566:	4b28      	ldr	r3, [pc, #160]	; (800c608 <HAL_RCC_ClockConfig+0x254>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	4a27      	ldr	r2, [pc, #156]	; (800c608 <HAL_RCC_ClockConfig+0x254>)
 800c56c:	f043 0304 	orr.w	r3, r3, #4
 800c570:	6013      	str	r3, [r2, #0]
 800c572:	4b25      	ldr	r3, [pc, #148]	; (800c608 <HAL_RCC_ClockConfig+0x254>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	f023 0201 	bic.w	r2, r3, #1
 800c57a:	4923      	ldr	r1, [pc, #140]	; (800c608 <HAL_RCC_ClockConfig+0x254>)
 800c57c:	683b      	ldr	r3, [r7, #0]
 800c57e:	4313      	orrs	r3, r2
 800c580:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c582:	4b21      	ldr	r3, [pc, #132]	; (800c608 <HAL_RCC_ClockConfig+0x254>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	f003 0301 	and.w	r3, r3, #1
 800c58a:	683a      	ldr	r2, [r7, #0]
 800c58c:	429a      	cmp	r2, r3
 800c58e:	d001      	beq.n	800c594 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800c590:	2301      	movs	r3, #1
 800c592:	e034      	b.n	800c5fe <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	f003 0304 	and.w	r3, r3, #4
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d008      	beq.n	800c5b2 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c5a0:	4b1a      	ldr	r3, [pc, #104]	; (800c60c <HAL_RCC_ClockConfig+0x258>)
 800c5a2:	689b      	ldr	r3, [r3, #8]
 800c5a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	68db      	ldr	r3, [r3, #12]
 800c5ac:	4917      	ldr	r1, [pc, #92]	; (800c60c <HAL_RCC_ClockConfig+0x258>)
 800c5ae:	4313      	orrs	r3, r2
 800c5b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	f003 0308 	and.w	r3, r3, #8
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d009      	beq.n	800c5d2 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c5be:	4b13      	ldr	r3, [pc, #76]	; (800c60c <HAL_RCC_ClockConfig+0x258>)
 800c5c0:	689b      	ldr	r3, [r3, #8]
 800c5c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	691b      	ldr	r3, [r3, #16]
 800c5ca:	00db      	lsls	r3, r3, #3
 800c5cc:	490f      	ldr	r1, [pc, #60]	; (800c60c <HAL_RCC_ClockConfig+0x258>)
 800c5ce:	4313      	orrs	r3, r2
 800c5d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c5d2:	f000 f871 	bl	800c6b8 <HAL_RCC_GetSysClockFreq>
 800c5d6:	4602      	mov	r2, r0
 800c5d8:	4b0c      	ldr	r3, [pc, #48]	; (800c60c <HAL_RCC_ClockConfig+0x258>)
 800c5da:	689b      	ldr	r3, [r3, #8]
 800c5dc:	091b      	lsrs	r3, r3, #4
 800c5de:	f003 030f 	and.w	r3, r3, #15
 800c5e2:	490b      	ldr	r1, [pc, #44]	; (800c610 <HAL_RCC_ClockConfig+0x25c>)
 800c5e4:	5ccb      	ldrb	r3, [r1, r3]
 800c5e6:	fa22 f303 	lsr.w	r3, r2, r3
 800c5ea:	4a0a      	ldr	r2, [pc, #40]	; (800c614 <HAL_RCC_ClockConfig+0x260>)
 800c5ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800c5ee:	4b0a      	ldr	r3, [pc, #40]	; (800c618 <HAL_RCC_ClockConfig+0x264>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	f7f5 ffe2 	bl	80025bc <HAL_InitTick>
 800c5f8:	4603      	mov	r3, r0
 800c5fa:	72fb      	strb	r3, [r7, #11]

  return status;
 800c5fc:	7afb      	ldrb	r3, [r7, #11]
}
 800c5fe:	4618      	mov	r0, r3
 800c600:	3710      	adds	r7, #16
 800c602:	46bd      	mov	sp, r7
 800c604:	bd80      	pop	{r7, pc}
 800c606:	bf00      	nop
 800c608:	40023c00 	.word	0x40023c00
 800c60c:	40023800 	.word	0x40023800
 800c610:	08021004 	.word	0x08021004
 800c614:	2000006c 	.word	0x2000006c
 800c618:	20000070 	.word	0x20000070

0800c61c <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16 division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b08a      	sub	sp, #40	; 0x28
 800c620:	af00      	add	r7, sp, #0
 800c622:	60f8      	str	r0, [r7, #12]
 800c624:	60b9      	str	r1, [r7, #8]
 800c626:	607a      	str	r2, [r7, #4]
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 800c628:	2302      	movs	r3, #2
 800c62a:	61bb      	str	r3, [r7, #24]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 800c62c:	2302      	movs	r3, #2
 800c62e:	623b      	str	r3, [r7, #32]
  gpio.Pull      = GPIO_NOPULL;
 800c630:	2300      	movs	r3, #0
 800c632:	61fb      	str	r3, [r7, #28]
  gpio.Pin       = MCO1_PIN;
 800c634:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c638:	617b      	str	r3, [r7, #20]
  gpio.Alternate = GPIO_AF0_MCO;
 800c63a:	2300      	movs	r3, #0
 800c63c:	627b      	str	r3, [r7, #36]	; 0x24

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 800c63e:	4b10      	ldr	r3, [pc, #64]	; (800c680 <HAL_RCC_MCOConfig+0x64>)
 800c640:	69db      	ldr	r3, [r3, #28]
 800c642:	4a0f      	ldr	r2, [pc, #60]	; (800c680 <HAL_RCC_MCOConfig+0x64>)
 800c644:	f043 0301 	orr.w	r3, r3, #1
 800c648:	61d3      	str	r3, [r2, #28]
 800c64a:	4b0d      	ldr	r3, [pc, #52]	; (800c680 <HAL_RCC_MCOConfig+0x64>)
 800c64c:	69db      	ldr	r3, [r3, #28]
 800c64e:	f003 0301 	and.w	r3, r3, #1
 800c652:	613b      	str	r3, [r7, #16]
 800c654:	693b      	ldr	r3, [r7, #16]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 800c656:	f107 0314 	add.w	r3, r7, #20
 800c65a:	4619      	mov	r1, r3
 800c65c:	4809      	ldr	r0, [pc, #36]	; (800c684 <HAL_RCC_MCOConfig+0x68>)
 800c65e:	f7f8 fb97 	bl	8004d90 <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 800c662:	4b07      	ldr	r3, [pc, #28]	; (800c680 <HAL_RCC_MCOConfig+0x64>)
 800c664:	689b      	ldr	r3, [r3, #8]
 800c666:	f023 42ee 	bic.w	r2, r3, #1996488704	; 0x77000000
 800c66a:	68b9      	ldr	r1, [r7, #8]
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	430b      	orrs	r3, r1
 800c670:	4903      	ldr	r1, [pc, #12]	; (800c680 <HAL_RCC_MCOConfig+0x64>)
 800c672:	4313      	orrs	r3, r2
 800c674:	608b      	str	r3, [r1, #8]
}
 800c676:	bf00      	nop
 800c678:	3728      	adds	r7, #40	; 0x28
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd80      	pop	{r7, pc}
 800c67e:	bf00      	nop
 800c680:	40023800 	.word	0x40023800
 800c684:	40020000 	.word	0x40020000

0800c688 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800c688:	b480      	push	{r7}
 800c68a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800c68c:	4b03      	ldr	r3, [pc, #12]	; (800c69c <HAL_RCC_EnableCSS+0x14>)
 800c68e:	2201      	movs	r2, #1
 800c690:	601a      	str	r2, [r3, #0]
}
 800c692:	bf00      	nop
 800c694:	46bd      	mov	sp, r7
 800c696:	bc80      	pop	{r7}
 800c698:	4770      	bx	lr
 800c69a:	bf00      	nop
 800c69c:	42470070 	.word	0x42470070

0800c6a0 <HAL_RCC_DisableCSS>:
/**
  * @brief  Disables the Clock Security System.
  * @retval None
  */
void HAL_RCC_DisableCSS(void)
{
 800c6a0:	b480      	push	{r7}
 800c6a2:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
 800c6a4:	4b03      	ldr	r3, [pc, #12]	; (800c6b4 <HAL_RCC_DisableCSS+0x14>)
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	601a      	str	r2, [r3, #0]
}
 800c6aa:	bf00      	nop
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	bc80      	pop	{r7}
 800c6b0:	4770      	bx	lr
 800c6b2:	bf00      	nop
 800c6b4:	42470070 	.word	0x42470070

0800c6b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c6b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c6bc:	b08e      	sub	sp, #56	; 0x38
 800c6be:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800c6c0:	4b58      	ldr	r3, [pc, #352]	; (800c824 <HAL_RCC_GetSysClockFreq+0x16c>)
 800c6c2:	689b      	ldr	r3, [r3, #8]
 800c6c4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800c6c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6c8:	f003 030c 	and.w	r3, r3, #12
 800c6cc:	2b0c      	cmp	r3, #12
 800c6ce:	d00d      	beq.n	800c6ec <HAL_RCC_GetSysClockFreq+0x34>
 800c6d0:	2b0c      	cmp	r3, #12
 800c6d2:	f200 8092 	bhi.w	800c7fa <HAL_RCC_GetSysClockFreq+0x142>
 800c6d6:	2b04      	cmp	r3, #4
 800c6d8:	d002      	beq.n	800c6e0 <HAL_RCC_GetSysClockFreq+0x28>
 800c6da:	2b08      	cmp	r3, #8
 800c6dc:	d003      	beq.n	800c6e6 <HAL_RCC_GetSysClockFreq+0x2e>
 800c6de:	e08c      	b.n	800c7fa <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c6e0:	4b51      	ldr	r3, [pc, #324]	; (800c828 <HAL_RCC_GetSysClockFreq+0x170>)
 800c6e2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800c6e4:	e097      	b.n	800c816 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800c6e6:	4b51      	ldr	r3, [pc, #324]	; (800c82c <HAL_RCC_GetSysClockFreq+0x174>)
 800c6e8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800c6ea:	e094      	b.n	800c816 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800c6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ee:	0c9b      	lsrs	r3, r3, #18
 800c6f0:	f003 020f 	and.w	r2, r3, #15
 800c6f4:	4b4e      	ldr	r3, [pc, #312]	; (800c830 <HAL_RCC_GetSysClockFreq+0x178>)
 800c6f6:	5c9b      	ldrb	r3, [r3, r2]
 800c6f8:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800c6fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6fc:	0d9b      	lsrs	r3, r3, #22
 800c6fe:	f003 0303 	and.w	r3, r3, #3
 800c702:	3301      	adds	r3, #1
 800c704:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c706:	4b47      	ldr	r3, [pc, #284]	; (800c824 <HAL_RCC_GetSysClockFreq+0x16c>)
 800c708:	689b      	ldr	r3, [r3, #8]
 800c70a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d021      	beq.n	800c756 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800c712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c714:	2200      	movs	r2, #0
 800c716:	61bb      	str	r3, [r7, #24]
 800c718:	61fa      	str	r2, [r7, #28]
 800c71a:	4b44      	ldr	r3, [pc, #272]	; (800c82c <HAL_RCC_GetSysClockFreq+0x174>)
 800c71c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800c720:	464a      	mov	r2, r9
 800c722:	fb03 f202 	mul.w	r2, r3, r2
 800c726:	2300      	movs	r3, #0
 800c728:	4644      	mov	r4, r8
 800c72a:	fb04 f303 	mul.w	r3, r4, r3
 800c72e:	4413      	add	r3, r2
 800c730:	4a3e      	ldr	r2, [pc, #248]	; (800c82c <HAL_RCC_GetSysClockFreq+0x174>)
 800c732:	4644      	mov	r4, r8
 800c734:	fba4 0102 	umull	r0, r1, r4, r2
 800c738:	440b      	add	r3, r1
 800c73a:	4619      	mov	r1, r3
 800c73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c73e:	2200      	movs	r2, #0
 800c740:	613b      	str	r3, [r7, #16]
 800c742:	617a      	str	r2, [r7, #20]
 800c744:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c748:	f7f4 f872 	bl	8000830 <__aeabi_uldivmod>
 800c74c:	4602      	mov	r2, r0
 800c74e:	460b      	mov	r3, r1
 800c750:	4613      	mov	r3, r2
 800c752:	637b      	str	r3, [r7, #52]	; 0x34
 800c754:	e04e      	b.n	800c7f4 <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800c756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c758:	2200      	movs	r2, #0
 800c75a:	469a      	mov	sl, r3
 800c75c:	4693      	mov	fp, r2
 800c75e:	4652      	mov	r2, sl
 800c760:	465b      	mov	r3, fp
 800c762:	f04f 0000 	mov.w	r0, #0
 800c766:	f04f 0100 	mov.w	r1, #0
 800c76a:	0159      	lsls	r1, r3, #5
 800c76c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c770:	0150      	lsls	r0, r2, #5
 800c772:	4602      	mov	r2, r0
 800c774:	460b      	mov	r3, r1
 800c776:	ebb2 080a 	subs.w	r8, r2, sl
 800c77a:	eb63 090b 	sbc.w	r9, r3, fp
 800c77e:	f04f 0200 	mov.w	r2, #0
 800c782:	f04f 0300 	mov.w	r3, #0
 800c786:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800c78a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800c78e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800c792:	ebb2 0408 	subs.w	r4, r2, r8
 800c796:	eb63 0509 	sbc.w	r5, r3, r9
 800c79a:	f04f 0200 	mov.w	r2, #0
 800c79e:	f04f 0300 	mov.w	r3, #0
 800c7a2:	00eb      	lsls	r3, r5, #3
 800c7a4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c7a8:	00e2      	lsls	r2, r4, #3
 800c7aa:	4614      	mov	r4, r2
 800c7ac:	461d      	mov	r5, r3
 800c7ae:	eb14 030a 	adds.w	r3, r4, sl
 800c7b2:	603b      	str	r3, [r7, #0]
 800c7b4:	eb45 030b 	adc.w	r3, r5, fp
 800c7b8:	607b      	str	r3, [r7, #4]
 800c7ba:	f04f 0200 	mov.w	r2, #0
 800c7be:	f04f 0300 	mov.w	r3, #0
 800c7c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 800c7c6:	4629      	mov	r1, r5
 800c7c8:	028b      	lsls	r3, r1, #10
 800c7ca:	4620      	mov	r0, r4
 800c7cc:	4629      	mov	r1, r5
 800c7ce:	4604      	mov	r4, r0
 800c7d0:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800c7d4:	4601      	mov	r1, r0
 800c7d6:	028a      	lsls	r2, r1, #10
 800c7d8:	4610      	mov	r0, r2
 800c7da:	4619      	mov	r1, r3
 800c7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7de:	2200      	movs	r2, #0
 800c7e0:	60bb      	str	r3, [r7, #8]
 800c7e2:	60fa      	str	r2, [r7, #12]
 800c7e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c7e8:	f7f4 f822 	bl	8000830 <__aeabi_uldivmod>
 800c7ec:	4602      	mov	r2, r0
 800c7ee:	460b      	mov	r3, r1
 800c7f0:	4613      	mov	r3, r2
 800c7f2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllvco;
 800c7f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7f6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800c7f8:	e00d      	b.n	800c816 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800c7fa:	4b0a      	ldr	r3, [pc, #40]	; (800c824 <HAL_RCC_GetSysClockFreq+0x16c>)
 800c7fc:	685b      	ldr	r3, [r3, #4]
 800c7fe:	0b5b      	lsrs	r3, r3, #13
 800c800:	f003 0307 	and.w	r3, r3, #7
 800c804:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800c806:	6a3b      	ldr	r3, [r7, #32]
 800c808:	3301      	adds	r3, #1
 800c80a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800c80e:	fa02 f303 	lsl.w	r3, r2, r3
 800c812:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800c814:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800c818:	4618      	mov	r0, r3
 800c81a:	3738      	adds	r7, #56	; 0x38
 800c81c:	46bd      	mov	sp, r7
 800c81e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c822:	bf00      	nop
 800c824:	40023800 	.word	0x40023800
 800c828:	00f42400 	.word	0x00f42400
 800c82c:	016e3600 	.word	0x016e3600
 800c830:	08020ff8 	.word	0x08020ff8

0800c834 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c834:	b480      	push	{r7}
 800c836:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c838:	4b02      	ldr	r3, [pc, #8]	; (800c844 <HAL_RCC_GetHCLKFreq+0x10>)
 800c83a:	681b      	ldr	r3, [r3, #0]
}
 800c83c:	4618      	mov	r0, r3
 800c83e:	46bd      	mov	sp, r7
 800c840:	bc80      	pop	{r7}
 800c842:	4770      	bx	lr
 800c844:	2000006c 	.word	0x2000006c

0800c848 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800c84c:	f7ff fff2 	bl	800c834 <HAL_RCC_GetHCLKFreq>
 800c850:	4602      	mov	r2, r0
 800c852:	4b05      	ldr	r3, [pc, #20]	; (800c868 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c854:	689b      	ldr	r3, [r3, #8]
 800c856:	0a1b      	lsrs	r3, r3, #8
 800c858:	f003 0307 	and.w	r3, r3, #7
 800c85c:	4903      	ldr	r1, [pc, #12]	; (800c86c <HAL_RCC_GetPCLK1Freq+0x24>)
 800c85e:	5ccb      	ldrb	r3, [r1, r3]
 800c860:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c864:	4618      	mov	r0, r3
 800c866:	bd80      	pop	{r7, pc}
 800c868:	40023800 	.word	0x40023800
 800c86c:	08021014 	.word	0x08021014

0800c870 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c870:	b580      	push	{r7, lr}
 800c872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800c874:	f7ff ffde 	bl	800c834 <HAL_RCC_GetHCLKFreq>
 800c878:	4602      	mov	r2, r0
 800c87a:	4b05      	ldr	r3, [pc, #20]	; (800c890 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c87c:	689b      	ldr	r3, [r3, #8]
 800c87e:	0adb      	lsrs	r3, r3, #11
 800c880:	f003 0307 	and.w	r3, r3, #7
 800c884:	4903      	ldr	r1, [pc, #12]	; (800c894 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c886:	5ccb      	ldrb	r3, [r1, r3]
 800c888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c88c:	4618      	mov	r0, r3
 800c88e:	bd80      	pop	{r7, pc}
 800c890:	40023800 	.word	0x40023800
 800c894:	08021014 	.word	0x08021014

0800c898 <HAL_RCC_GetOscConfig>:
  * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c898:	b480      	push	{r7}
 800c89a:	b083      	sub	sp, #12
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != (void *)NULL);

  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI  \
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	221f      	movs	r2, #31
 800c8a4:	601a      	str	r2, [r3, #0]
                  | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_MSI;


  /* Get the HSE configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 800c8a6:	4b49      	ldr	r3, [pc, #292]	; (800c9cc <HAL_RCC_GetOscConfig+0x134>)
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c8ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c8b2:	d103      	bne.n	800c8bc <HAL_RCC_GetOscConfig+0x24>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2205      	movs	r2, #5
 800c8b8:	605a      	str	r2, [r3, #4]
 800c8ba:	e00d      	b.n	800c8d8 <HAL_RCC_GetOscConfig+0x40>
  }
  else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
 800c8bc:	4b43      	ldr	r3, [pc, #268]	; (800c9cc <HAL_RCC_GetOscConfig+0x134>)
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c8c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c8c8:	d103      	bne.n	800c8d2 <HAL_RCC_GetOscConfig+0x3a>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2201      	movs	r2, #1
 800c8ce:	605a      	str	r2, [r3, #4]
 800c8d0:	e002      	b.n	800c8d8 <HAL_RCC_GetOscConfig+0x40>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	605a      	str	r2, [r3, #4]
  }

  /* Get the HSI configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 800c8d8:	4b3c      	ldr	r3, [pc, #240]	; (800c9cc <HAL_RCC_GetOscConfig+0x134>)
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	f003 0301 	and.w	r3, r3, #1
 800c8e0:	2b01      	cmp	r3, #1
 800c8e2:	d103      	bne.n	800c8ec <HAL_RCC_GetOscConfig+0x54>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2201      	movs	r2, #1
 800c8e8:	60da      	str	r2, [r3, #12]
 800c8ea:	e002      	b.n	800c8f2 <HAL_RCC_GetOscConfig+0x5a>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	60da      	str	r2, [r3, #12]
  }

  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->ICSCR & RCC_ICSCR_HSITRIM) >> RCC_ICSCR_HSITRIM_Pos);
 800c8f2:	4b36      	ldr	r3, [pc, #216]	; (800c9cc <HAL_RCC_GetOscConfig+0x134>)
 800c8f4:	685b      	ldr	r3, [r3, #4]
 800c8f6:	0a1b      	lsrs	r3, r3, #8
 800c8f8:	f003 021f 	and.w	r2, r3, #31
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	611a      	str	r2, [r3, #16]

  /* Get the MSI configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_MSION) == RCC_CR_MSION)
 800c900:	4b32      	ldr	r3, [pc, #200]	; (800c9cc <HAL_RCC_GetOscConfig+0x134>)
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c908:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c90c:	d103      	bne.n	800c916 <HAL_RCC_GetOscConfig+0x7e>
  {
    RCC_OscInitStruct->MSIState = RCC_MSI_ON;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	2201      	movs	r2, #1
 800c912:	619a      	str	r2, [r3, #24]
 800c914:	e002      	b.n	800c91c <HAL_RCC_GetOscConfig+0x84>
  }
  else
  {
    RCC_OscInitStruct->MSIState = RCC_MSI_OFF;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	2200      	movs	r2, #0
 800c91a:	619a      	str	r2, [r3, #24]
  }

  RCC_OscInitStruct->MSICalibrationValue = (uint32_t)((RCC->ICSCR & RCC_ICSCR_MSITRIM) >> RCC_ICSCR_MSITRIM_Pos);
 800c91c:	4b2b      	ldr	r3, [pc, #172]	; (800c9cc <HAL_RCC_GetOscConfig+0x134>)
 800c91e:	685b      	ldr	r3, [r3, #4]
 800c920:	0e1b      	lsrs	r3, r3, #24
 800c922:	b2da      	uxtb	r2, r3
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct->MSIClockRange = (uint32_t)((RCC->ICSCR & RCC_ICSCR_MSIRANGE));
 800c928:	4b28      	ldr	r3, [pc, #160]	; (800c9cc <HAL_RCC_GetOscConfig+0x134>)
 800c92a:	685b      	ldr	r3, [r3, #4]
 800c92c:	f403 4260 	and.w	r2, r3, #57344	; 0xe000
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	621a      	str	r2, [r3, #32]

  /* Get the LSE configuration -----------------------------------------------*/
  if((RCC->CSR &RCC_CSR_LSEBYP) == RCC_CSR_LSEBYP)
 800c934:	4b25      	ldr	r3, [pc, #148]	; (800c9cc <HAL_RCC_GetOscConfig+0x134>)
 800c936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c938:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c93c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c940:	d103      	bne.n	800c94a <HAL_RCC_GetOscConfig+0xb2>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	2205      	movs	r2, #5
 800c946:	609a      	str	r2, [r3, #8]
 800c948:	e00d      	b.n	800c966 <HAL_RCC_GetOscConfig+0xce>
  }
  else if((RCC->CSR &RCC_CSR_LSEON) == RCC_CSR_LSEON)
 800c94a:	4b20      	ldr	r3, [pc, #128]	; (800c9cc <HAL_RCC_GetOscConfig+0x134>)
 800c94c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c94e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c952:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c956:	d103      	bne.n	800c960 <HAL_RCC_GetOscConfig+0xc8>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2201      	movs	r2, #1
 800c95c:	609a      	str	r2, [r3, #8]
 800c95e:	e002      	b.n	800c966 <HAL_RCC_GetOscConfig+0xce>
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	2200      	movs	r2, #0
 800c964:	609a      	str	r2, [r3, #8]
  }

  /* Get the LSI configuration -----------------------------------------------*/
  if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 800c966:	4b19      	ldr	r3, [pc, #100]	; (800c9cc <HAL_RCC_GetOscConfig+0x134>)
 800c968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c96a:	f003 0301 	and.w	r3, r3, #1
 800c96e:	2b01      	cmp	r3, #1
 800c970:	d103      	bne.n	800c97a <HAL_RCC_GetOscConfig+0xe2>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	2201      	movs	r2, #1
 800c976:	615a      	str	r2, [r3, #20]
 800c978:	e002      	b.n	800c980 <HAL_RCC_GetOscConfig+0xe8>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	2200      	movs	r2, #0
 800c97e:	615a      	str	r2, [r3, #20]
  }


  /* Get the PLL configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
 800c980:	4b12      	ldr	r3, [pc, #72]	; (800c9cc <HAL_RCC_GetOscConfig+0x134>)
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c988:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c98c:	d103      	bne.n	800c996 <HAL_RCC_GetOscConfig+0xfe>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	2202      	movs	r2, #2
 800c992:	625a      	str	r2, [r3, #36]	; 0x24
 800c994:	e002      	b.n	800c99c <HAL_RCC_GetOscConfig+0x104>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	2201      	movs	r2, #1
 800c99a:	625a      	str	r2, [r3, #36]	; 0x24
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLSRC);
 800c99c:	4b0b      	ldr	r3, [pc, #44]	; (800c9cc <HAL_RCC_GetOscConfig+0x134>)
 800c99e:	689b      	ldr	r3, [r3, #8]
 800c9a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct->PLL.PLLMUL = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLMUL);
 800c9a8:	4b08      	ldr	r3, [pc, #32]	; (800c9cc <HAL_RCC_GetOscConfig+0x134>)
 800c9aa:	689b      	ldr	r3, [r3, #8]
 800c9ac:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct->PLL.PLLDIV = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLDIV);
 800c9b4:	4b05      	ldr	r3, [pc, #20]	; (800c9cc <HAL_RCC_GetOscConfig+0x134>)
 800c9b6:	689b      	ldr	r3, [r3, #8]
 800c9b8:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c9c0:	bf00      	nop
 800c9c2:	370c      	adds	r7, #12
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	bc80      	pop	{r7}
 800c9c8:	4770      	bx	lr
 800c9ca:	bf00      	nop
 800c9cc:	40023800 	.word	0x40023800

0800c9d0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800c9d0:	b480      	push	{r7}
 800c9d2:	b083      	sub	sp, #12
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
 800c9d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	220f      	movs	r2, #15
 800c9de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800c9e0:	4b11      	ldr	r3, [pc, #68]	; (800ca28 <HAL_RCC_GetClockConfig+0x58>)
 800c9e2:	689b      	ldr	r3, [r3, #8]
 800c9e4:	f003 0203 	and.w	r2, r3, #3
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800c9ec:	4b0e      	ldr	r3, [pc, #56]	; (800ca28 <HAL_RCC_GetClockConfig+0x58>)
 800c9ee:	689b      	ldr	r3, [r3, #8]
 800c9f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800c9f8:	4b0b      	ldr	r3, [pc, #44]	; (800ca28 <HAL_RCC_GetClockConfig+0x58>)
 800c9fa:	689b      	ldr	r3, [r3, #8]
 800c9fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800ca04:	4b08      	ldr	r3, [pc, #32]	; (800ca28 <HAL_RCC_GetClockConfig+0x58>)
 800ca06:	689b      	ldr	r3, [r3, #8]
 800ca08:	08db      	lsrs	r3, r3, #3
 800ca0a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800ca12:	4b06      	ldr	r3, [pc, #24]	; (800ca2c <HAL_RCC_GetClockConfig+0x5c>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	f003 0201 	and.w	r2, r3, #1
 800ca1a:	683b      	ldr	r3, [r7, #0]
 800ca1c:	601a      	str	r2, [r3, #0]
}
 800ca1e:	bf00      	nop
 800ca20:	370c      	adds	r7, #12
 800ca22:	46bd      	mov	sp, r7
 800ca24:	bc80      	pop	{r7}
 800ca26:	4770      	bx	lr
 800ca28:	40023800 	.word	0x40023800
 800ca2c:	40023c00 	.word	0x40023c00

0800ca30 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800ca34:	4b06      	ldr	r3, [pc, #24]	; (800ca50 <HAL_RCC_NMI_IRQHandler+0x20>)
 800ca36:	68db      	ldr	r3, [r3, #12]
 800ca38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca3c:	2b80      	cmp	r3, #128	; 0x80
 800ca3e:	d104      	bne.n	800ca4a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800ca40:	f000 f80a 	bl	800ca58 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800ca44:	4b03      	ldr	r3, [pc, #12]	; (800ca54 <HAL_RCC_NMI_IRQHandler+0x24>)
 800ca46:	2280      	movs	r2, #128	; 0x80
 800ca48:	701a      	strb	r2, [r3, #0]
  }
}
 800ca4a:	bf00      	nop
 800ca4c:	bd80      	pop	{r7, pc}
 800ca4e:	bf00      	nop
 800ca50:	40023800 	.word	0x40023800
 800ca54:	4002380e 	.word	0x4002380e

0800ca58 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800ca58:	b480      	push	{r7}
 800ca5a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 800ca5c:	bf00      	nop
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	bc80      	pop	{r7}
 800ca62:	4770      	bx	lr

0800ca64 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 800ca64:	b480      	push	{r7}
 800ca66:	b087      	sub	sp, #28
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800ca70:	4b29      	ldr	r3, [pc, #164]	; (800cb18 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800ca72:	689b      	ldr	r3, [r3, #8]
 800ca74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d12c      	bne.n	800cad6 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800ca7c:	4b26      	ldr	r3, [pc, #152]	; (800cb18 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800ca7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d005      	beq.n	800ca94 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800ca88:	4b24      	ldr	r3, [pc, #144]	; (800cb1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800ca90:	617b      	str	r3, [r7, #20]
 800ca92:	e016      	b.n	800cac2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ca94:	4b20      	ldr	r3, [pc, #128]	; (800cb18 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800ca96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca98:	4a1f      	ldr	r2, [pc, #124]	; (800cb18 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800ca9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ca9e:	6253      	str	r3, [r2, #36]	; 0x24
 800caa0:	4b1d      	ldr	r3, [pc, #116]	; (800cb18 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800caa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800caa8:	60fb      	str	r3, [r7, #12]
 800caaa:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800caac:	4b1b      	ldr	r3, [pc, #108]	; (800cb1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800cab4:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800cab6:	4b18      	ldr	r3, [pc, #96]	; (800cb18 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800cab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caba:	4a17      	ldr	r2, [pc, #92]	; (800cb18 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800cabc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cac0:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800cac2:	697b      	ldr	r3, [r7, #20]
 800cac4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800cac8:	d105      	bne.n	800cad6 <RCC_SetFlashLatencyFromMSIRange+0x72>
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800cad0:	d101      	bne.n	800cad6 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800cad2:	2301      	movs	r3, #1
 800cad4:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800cad6:	693b      	ldr	r3, [r7, #16]
 800cad8:	2b01      	cmp	r3, #1
 800cada:	d105      	bne.n	800cae8 <RCC_SetFlashLatencyFromMSIRange+0x84>
 800cadc:	4b10      	ldr	r3, [pc, #64]	; (800cb20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	4a0f      	ldr	r2, [pc, #60]	; (800cb20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800cae2:	f043 0304 	orr.w	r3, r3, #4
 800cae6:	6013      	str	r3, [r2, #0]
 800cae8:	4b0d      	ldr	r3, [pc, #52]	; (800cb20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	f023 0201 	bic.w	r2, r3, #1
 800caf0:	490b      	ldr	r1, [pc, #44]	; (800cb20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800caf2:	693b      	ldr	r3, [r7, #16]
 800caf4:	4313      	orrs	r3, r2
 800caf6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800caf8:	4b09      	ldr	r3, [pc, #36]	; (800cb20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	f003 0301 	and.w	r3, r3, #1
 800cb00:	693a      	ldr	r2, [r7, #16]
 800cb02:	429a      	cmp	r2, r3
 800cb04:	d001      	beq.n	800cb0a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800cb06:	2301      	movs	r3, #1
 800cb08:	e000      	b.n	800cb0c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800cb0a:	2300      	movs	r3, #0
}
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	371c      	adds	r7, #28
 800cb10:	46bd      	mov	sp, r7
 800cb12:	bc80      	pop	{r7}
 800cb14:	4770      	bx	lr
 800cb16:	bf00      	nop
 800cb18:	40023800 	.word	0x40023800
 800cb1c:	40007000 	.word	0x40007000
 800cb20:	40023c00 	.word	0x40023c00

0800cb24 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b086      	sub	sp, #24
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	f003 0301 	and.w	r3, r3, #1
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d106      	bne.n	800cb46 <HAL_RCCEx_PeriphCLKConfig+0x22>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	f003 0302 	and.w	r3, r3, #2
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	f000 80ed 	beq.w	800cd20 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 800cb46:	2300      	movs	r3, #0
 800cb48:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cb4a:	4b78      	ldr	r3, [pc, #480]	; (800cd2c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800cb4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d10d      	bne.n	800cb72 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cb56:	4b75      	ldr	r3, [pc, #468]	; (800cd2c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800cb58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb5a:	4a74      	ldr	r2, [pc, #464]	; (800cd2c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800cb5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cb60:	6253      	str	r3, [r2, #36]	; 0x24
 800cb62:	4b72      	ldr	r3, [pc, #456]	; (800cd2c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800cb64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cb6a:	60bb      	str	r3, [r7, #8]
 800cb6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800cb6e:	2301      	movs	r3, #1
 800cb70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cb72:	4b6f      	ldr	r3, [pc, #444]	; (800cd30 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d118      	bne.n	800cbb0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800cb7e:	4b6c      	ldr	r3, [pc, #432]	; (800cd30 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	4a6b      	ldr	r2, [pc, #428]	; (800cd30 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800cb84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cb88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cb8a:	f7f5 fd63 	bl	8002654 <HAL_GetTick>
 800cb8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cb90:	e008      	b.n	800cba4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cb92:	f7f5 fd5f 	bl	8002654 <HAL_GetTick>
 800cb96:	4602      	mov	r2, r0
 800cb98:	693b      	ldr	r3, [r7, #16]
 800cb9a:	1ad3      	subs	r3, r2, r3
 800cb9c:	2b64      	cmp	r3, #100	; 0x64
 800cb9e:	d901      	bls.n	800cba4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800cba0:	2303      	movs	r3, #3
 800cba2:	e0be      	b.n	800cd22 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cba4:	4b62      	ldr	r3, [pc, #392]	; (800cd30 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d0f0      	beq.n	800cb92 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800cbb0:	4b5e      	ldr	r3, [pc, #376]	; (800cd2c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 800cbb8:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	685b      	ldr	r3, [r3, #4]
 800cbbe:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 800cbc2:	68fa      	ldr	r2, [r7, #12]
 800cbc4:	429a      	cmp	r2, r3
 800cbc6:	d106      	bne.n	800cbd6 <HAL_RCCEx_PeriphCLKConfig+0xb2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	689b      	ldr	r3, [r3, #8]
 800cbcc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 800cbd0:	68fa      	ldr	r2, [r7, #12]
 800cbd2:	429a      	cmp	r2, r3
 800cbd4:	d00f      	beq.n	800cbf6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	685b      	ldr	r3, [r3, #4]
 800cbda:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cbde:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cbe2:	d108      	bne.n	800cbf6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cbe4:	4b51      	ldr	r3, [pc, #324]	; (800cd2c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cbec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cbf0:	d101      	bne.n	800cbf6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800cbf2:	2301      	movs	r3, #1
 800cbf4:	e095      	b.n	800cd22 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800cbf6:	4b4d      	ldr	r3, [pc, #308]	; (800cd2c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800cbf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbfa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cbfe:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d041      	beq.n	800cc8a <HAL_RCCEx_PeriphCLKConfig+0x166>
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	685b      	ldr	r3, [r3, #4]
 800cc0a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cc0e:	68fa      	ldr	r2, [r7, #12]
 800cc10:	429a      	cmp	r2, r3
 800cc12:	d005      	beq.n	800cc20 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	f003 0301 	and.w	r3, r3, #1
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d10c      	bne.n	800cc3a <HAL_RCCEx_PeriphCLKConfig+0x116>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	689b      	ldr	r3, [r3, #8]
 800cc24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cc28:	68fa      	ldr	r2, [r7, #12]
 800cc2a:	429a      	cmp	r2, r3
 800cc2c:	d02d      	beq.n	800cc8a <HAL_RCCEx_PeriphCLKConfig+0x166>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	f003 0302 	and.w	r3, r3, #2
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d027      	beq.n	800cc8a <HAL_RCCEx_PeriphCLKConfig+0x166>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800cc3a:	4b3c      	ldr	r3, [pc, #240]	; (800cd2c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800cc3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc3e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800cc42:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800cc44:	4b3b      	ldr	r3, [pc, #236]	; (800cd34 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800cc46:	2201      	movs	r2, #1
 800cc48:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800cc4a:	4b3a      	ldr	r3, [pc, #232]	; (800cd34 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	601a      	str	r2, [r3, #0]

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800cc50:	4a36      	ldr	r2, [pc, #216]	; (800cd2c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	6353      	str	r3, [r2, #52]	; 0x34

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d014      	beq.n	800cc8a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cc60:	f7f5 fcf8 	bl	8002654 <HAL_GetTick>
 800cc64:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cc66:	e00a      	b.n	800cc7e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cc68:	f7f5 fcf4 	bl	8002654 <HAL_GetTick>
 800cc6c:	4602      	mov	r2, r0
 800cc6e:	693b      	ldr	r3, [r7, #16]
 800cc70:	1ad3      	subs	r3, r2, r3
 800cc72:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc76:	4293      	cmp	r3, r2
 800cc78:	d901      	bls.n	800cc7e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800cc7a:	2303      	movs	r3, #3
 800cc7c:	e051      	b.n	800cd22 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cc7e:	4b2b      	ldr	r3, [pc, #172]	; (800cd2c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800cc80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d0ee      	beq.n	800cc68 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	f003 0302 	and.w	r3, r3, #2
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d01a      	beq.n	800cccc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	689b      	ldr	r3, [r3, #8]
 800cc9a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cc9e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cca2:	d10a      	bne.n	800ccba <HAL_RCCEx_PeriphCLKConfig+0x196>
 800cca4:	4b21      	ldr	r3, [pc, #132]	; (800cd2c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	689b      	ldr	r3, [r3, #8]
 800ccb0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 800ccb4:	491d      	ldr	r1, [pc, #116]	; (800cd2c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800ccb6:	4313      	orrs	r3, r2
 800ccb8:	600b      	str	r3, [r1, #0]
 800ccba:	4b1c      	ldr	r3, [pc, #112]	; (800cd2c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800ccbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	689b      	ldr	r3, [r3, #8]
 800ccc2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ccc6:	4919      	ldr	r1, [pc, #100]	; (800cd2c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800ccc8:	4313      	orrs	r3, r2
 800ccca:	634b      	str	r3, [r1, #52]	; 0x34
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	f003 0301 	and.w	r3, r3, #1
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d01a      	beq.n	800cd0e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	685b      	ldr	r3, [r3, #4]
 800ccdc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cce0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cce4:	d10a      	bne.n	800ccfc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800cce6:	4b11      	ldr	r3, [pc, #68]	; (800cd2c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	685b      	ldr	r3, [r3, #4]
 800ccf2:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 800ccf6:	490d      	ldr	r1, [pc, #52]	; (800cd2c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800ccf8:	4313      	orrs	r3, r2
 800ccfa:	600b      	str	r3, [r1, #0]
 800ccfc:	4b0b      	ldr	r3, [pc, #44]	; (800cd2c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800ccfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	685b      	ldr	r3, [r3, #4]
 800cd04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cd08:	4908      	ldr	r1, [pc, #32]	; (800cd2c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800cd0a:	4313      	orrs	r3, r2
 800cd0c:	634b      	str	r3, [r1, #52]	; 0x34
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800cd0e:	7dfb      	ldrb	r3, [r7, #23]
 800cd10:	2b01      	cmp	r3, #1
 800cd12:	d105      	bne.n	800cd20 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cd14:	4b05      	ldr	r3, [pc, #20]	; (800cd2c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800cd16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd18:	4a04      	ldr	r2, [pc, #16]	; (800cd2c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800cd1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cd1e:	6253      	str	r3, [r2, #36]	; 0x24
    }
  }

  return HAL_OK;
 800cd20:	2300      	movs	r3, #0
}
 800cd22:	4618      	mov	r0, r3
 800cd24:	3718      	adds	r7, #24
 800cd26:	46bd      	mov	sp, r7
 800cd28:	bd80      	pop	{r7, pc}
 800cd2a:	bf00      	nop
 800cd2c:	40023800 	.word	0x40023800
 800cd30:	40007000 	.word	0x40007000
 800cd34:	424706dc 	.word	0x424706dc

0800cd38 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  *         returns the configuration information for the Extended Peripherals clocks(RTC/LCD clocks).
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cd38:	b480      	push	{r7}
 800cd3a:	b085      	sub	sp, #20
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
  uint32_t srcclk;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2201      	movs	r2, #1
 800cd44:	601a      	str	r2, [r3, #0]
#if defined(LCD)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_LCD;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	f043 0202 	orr.w	r2, r3, #2
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	601a      	str	r2, [r3, #0]
#endif /* LCD */

  /* Get the RTC/LCD configuration -----------------------------------------------*/
  srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800cd52:	4b0f      	ldr	r3, [pc, #60]	; (800cd90 <HAL_RCCEx_GetPeriphCLKConfig+0x58>)
 800cd54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd56:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cd5a:	60fb      	str	r3, [r7, #12]
  if (srcclk != RCC_RTCCLKSOURCE_HSE_DIV2)
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cd62:	d003      	beq.n	800cd6c <HAL_RCCEx_GetPeriphCLKConfig+0x34>
  {
    /* Source clock is LSE or LSI*/
    PeriphClkInit->RTCClockSelection = srcclk;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	68fa      	ldr	r2, [r7, #12]
 800cd68:	605a      	str	r2, [r3, #4]
 800cd6a:	e007      	b.n	800cd7c <HAL_RCCEx_GetPeriphCLKConfig+0x44>
  }
  else
  {
    /* Source clock is HSE. Need to get the prescaler value*/
    PeriphClkInit->RTCClockSelection = srcclk | (READ_BIT(RCC->CR, RCC_CR_RTCPRE));
 800cd6c:	4b08      	ldr	r3, [pc, #32]	; (800cd90 <HAL_RCCEx_GetPeriphCLKConfig+0x58>)
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	f003 42c0 	and.w	r2, r3, #1610612736	; 0x60000000
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	431a      	orrs	r2, r3
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	605a      	str	r2, [r3, #4]
  }
#if defined(LCD)
  PeriphClkInit->LCDClockSelection = PeriphClkInit->RTCClockSelection;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	685a      	ldr	r2, [r3, #4]
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	609a      	str	r2, [r3, #8]
#endif /* LCD */
}
 800cd84:	bf00      	nop
 800cd86:	3714      	adds	r7, #20
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	bc80      	pop	{r7}
 800cd8c:	4770      	bx	lr
 800cd8e:	bf00      	nop
 800cd90:	40023800 	.word	0x40023800

0800cd94 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_LCD      LCD peripheral clock (*)
  * @note   (*) means that this peripheral is not present on all the devices
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800cd94:	b480      	push	{r7}
 800cd96:	b085      	sub	sp, #20
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0;
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	60fb      	str	r3, [r7, #12]
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	3b01      	subs	r3, #1
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800cda4:	2b01      	cmp	r3, #1
 800cda6:	d84b      	bhi.n	800ce40 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
#if defined(LCD)
  case RCC_PERIPHCLK_LCD:
#endif /* LCD */
    {
      /* Get the current RTC source */
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800cda8:	4b2a      	ldr	r3, [pc, #168]	; (800ce54 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 800cdaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cdb0:	60bb      	str	r3, [r7, #8]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (srcclk == RCC_RTCCLKSOURCE_LSE)
 800cdb2:	68bb      	ldr	r3, [r7, #8]
 800cdb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cdb8:	d10a      	bne.n	800cdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      {
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY))
 800cdba:	4b26      	ldr	r3, [pc, #152]	; (800ce54 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 800cdbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cdc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cdc6:	d13d      	bne.n	800ce44 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
        {
          frequency = LSE_VALUE;
 800cdc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cdcc:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        /* No clock source, frequency default init at 0 */
      }
      break;
 800cdce:	e039      	b.n	800ce44 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
      else if (srcclk == RCC_RTCCLKSOURCE_LSI)
 800cdd0:	68bb      	ldr	r3, [r7, #8]
 800cdd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cdd6:	d109      	bne.n	800cdec <HAL_RCCEx_GetPeriphCLKFreq+0x58>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800cdd8:	4b1e      	ldr	r3, [pc, #120]	; (800ce54 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 800cdda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cddc:	f003 0302 	and.w	r3, r3, #2
 800cde0:	2b02      	cmp	r3, #2
 800cde2:	d12f      	bne.n	800ce44 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
          frequency = LSI_VALUE;
 800cde4:	f249 0388 	movw	r3, #37000	; 0x9088
 800cde8:	60fb      	str	r3, [r7, #12]
      break;
 800cdea:	e02b      	b.n	800ce44 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
      else if (srcclk == RCC_RTCCLKSOURCE_HSE_DIVX)
 800cdec:	68bb      	ldr	r3, [r7, #8]
 800cdee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cdf2:	d127      	bne.n	800ce44 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cdf4:	4b17      	ldr	r3, [pc, #92]	; (800ce54 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cdfc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ce00:	d11c      	bne.n	800ce3c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          switch (__HAL_RCC_GET_RTC_HSE_PRESCALER())
 800ce02:	4b14      	ldr	r3, [pc, #80]	; (800ce54 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 800ce0a:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800ce0e:	d009      	beq.n	800ce24 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
 800ce10:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800ce14:	d80f      	bhi.n	800ce36 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 800ce16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce1a:	d009      	beq.n	800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800ce1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce20:	d003      	beq.n	800ce2a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
 800ce22:	e008      	b.n	800ce36 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
              frequency = HSE_VALUE / 16U;
 800ce24:	4b0c      	ldr	r3, [pc, #48]	; (800ce58 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 800ce26:	60fb      	str	r3, [r7, #12]
              break;
 800ce28:	e009      	b.n	800ce3e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
              frequency = HSE_VALUE / 8U;
 800ce2a:	4b0c      	ldr	r3, [pc, #48]	; (800ce5c <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
 800ce2c:	60fb      	str	r3, [r7, #12]
              break;
 800ce2e:	e006      	b.n	800ce3e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
              frequency = HSE_VALUE / 4U;
 800ce30:	4b0b      	ldr	r3, [pc, #44]	; (800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>)
 800ce32:	60fb      	str	r3, [r7, #12]
              break;
 800ce34:	e003      	b.n	800ce3e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
              frequency = HSE_VALUE / 2U;
 800ce36:	4b0b      	ldr	r3, [pc, #44]	; (800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>)
 800ce38:	60fb      	str	r3, [r7, #12]
              break;
 800ce3a:	e000      	b.n	800ce3e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
        }
 800ce3c:	bf00      	nop
      break;
 800ce3e:	e001      	b.n	800ce44 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
    }

  default:
    break;
 800ce40:	bf00      	nop
 800ce42:	e000      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
      break;
 800ce44:	bf00      	nop
  }

  return(frequency);
 800ce46:	68fb      	ldr	r3, [r7, #12]
}
 800ce48:	4618      	mov	r0, r3
 800ce4a:	3714      	adds	r7, #20
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	bc80      	pop	{r7}
 800ce50:	4770      	bx	lr
 800ce52:	bf00      	nop
 800ce54:	40023800 	.word	0x40023800
 800ce58:	0016e360 	.word	0x0016e360
 800ce5c:	002dc6c0 	.word	0x002dc6c0
 800ce60:	005b8d80 	.word	0x005b8d80
 800ce64:	00b71b00 	.word	0x00b71b00

0800ce68 <HAL_RCCEx_EnableLSECSS>:
  *         RTCSEL), or take any required action to secure the application.
  * @note   LSE CSS available only for high density and medium+ devices
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS(void)
{
 800ce68:	b480      	push	{r7}
 800ce6a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CSR_LSECSSON_BB = (uint32_t)ENABLE;
 800ce6c:	4b03      	ldr	r3, [pc, #12]	; (800ce7c <HAL_RCCEx_EnableLSECSS+0x14>)
 800ce6e:	2201      	movs	r2, #1
 800ce70:	601a      	str	r2, [r3, #0]
}
 800ce72:	bf00      	nop
 800ce74:	46bd      	mov	sp, r7
 800ce76:	bc80      	pop	{r7}
 800ce78:	4770      	bx	lr
 800ce7a:	bf00      	nop
 800ce7c:	424706ac 	.word	0x424706ac

0800ce80 <HAL_RCCEx_DisableLSECSS>:
  *         Reset by power on reset and RTC software reset (RTCRST bit).
  * @note   LSE CSS available only for high density and medium+ devices
  * @retval None
  */
void HAL_RCCEx_DisableLSECSS(void)
{
 800ce80:	b480      	push	{r7}
 800ce82:	af00      	add	r7, sp, #0
  /* Disable LSE CSS */
  *(__IO uint32_t *) CSR_LSECSSON_BB = (uint32_t)DISABLE;
 800ce84:	4b07      	ldr	r3, [pc, #28]	; (800cea4 <HAL_RCCEx_DisableLSECSS+0x24>)
 800ce86:	2200      	movs	r2, #0
 800ce88:	601a      	str	r2, [r3, #0]

  /* Disable LSE CSS IT */
  __HAL_RCC_DISABLE_IT(RCC_IT_LSECSS);
 800ce8a:	4b07      	ldr	r3, [pc, #28]	; (800cea8 <HAL_RCCEx_DisableLSECSS+0x28>)
 800ce8c:	781b      	ldrb	r3, [r3, #0]
 800ce8e:	b2db      	uxtb	r3, r3
 800ce90:	4a05      	ldr	r2, [pc, #20]	; (800cea8 <HAL_RCCEx_DisableLSECSS+0x28>)
 800ce92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ce96:	b2db      	uxtb	r3, r3
 800ce98:	7013      	strb	r3, [r2, #0]
}
 800ce9a:	bf00      	nop
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	bc80      	pop	{r7}
 800cea0:	4770      	bx	lr
 800cea2:	bf00      	nop
 800cea4:	424706ac 	.word	0x424706ac
 800cea8:	4002380d 	.word	0x4002380d

0800ceac <HAL_RCCEx_EnableLSECSS_IT>:
  * @brief  Enable the LSE Clock Security System IT & corresponding EXTI line.
  * @note   LSE Clock Security System IT is mapped on RTC EXTI line 19
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS_IT(void)
{
 800ceac:	b480      	push	{r7}
 800ceae:	af00      	add	r7, sp, #0
  /* Enable LSE CSS */
  *(__IO uint32_t *) CSR_LSECSSON_BB = (uint32_t)ENABLE;
 800ceb0:	4b0d      	ldr	r3, [pc, #52]	; (800cee8 <HAL_RCCEx_EnableLSECSS_IT+0x3c>)
 800ceb2:	2201      	movs	r2, #1
 800ceb4:	601a      	str	r2, [r3, #0]

  /* Enable LSE CSS IT */
  __HAL_RCC_ENABLE_IT(RCC_IT_LSECSS);
 800ceb6:	4b0d      	ldr	r3, [pc, #52]	; (800ceec <HAL_RCCEx_EnableLSECSS_IT+0x40>)
 800ceb8:	781b      	ldrb	r3, [r3, #0]
 800ceba:	b2db      	uxtb	r3, r3
 800cebc:	4a0b      	ldr	r2, [pc, #44]	; (800ceec <HAL_RCCEx_EnableLSECSS_IT+0x40>)
 800cebe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cec2:	b2db      	uxtb	r3, r3
 800cec4:	7013      	strb	r3, [r2, #0]

  /* Enable IT on EXTI Line 19 */
  __HAL_RCC_LSECSS_EXTI_ENABLE_IT();
 800cec6:	4b0a      	ldr	r3, [pc, #40]	; (800cef0 <HAL_RCCEx_EnableLSECSS_IT+0x44>)
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	4a09      	ldr	r2, [pc, #36]	; (800cef0 <HAL_RCCEx_EnableLSECSS_IT+0x44>)
 800cecc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ced0:	6013      	str	r3, [r2, #0]
  __HAL_RCC_LSECSS_EXTI_ENABLE_RISING_EDGE();
 800ced2:	4b07      	ldr	r3, [pc, #28]	; (800cef0 <HAL_RCCEx_EnableLSECSS_IT+0x44>)
 800ced4:	689b      	ldr	r3, [r3, #8]
 800ced6:	4a06      	ldr	r2, [pc, #24]	; (800cef0 <HAL_RCCEx_EnableLSECSS_IT+0x44>)
 800ced8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cedc:	6093      	str	r3, [r2, #8]
}
 800cede:	bf00      	nop
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bc80      	pop	{r7}
 800cee4:	4770      	bx	lr
 800cee6:	bf00      	nop
 800cee8:	424706ac 	.word	0x424706ac
 800ceec:	4002380d 	.word	0x4002380d
 800cef0:	40010400 	.word	0x40010400

0800cef4 <HAL_RCCEx_LSECSS_IRQHandler>:
/**
  * @brief Handle the RCC LSE Clock Security System interrupt request.
  * @retval None
  */
void HAL_RCCEx_LSECSS_IRQHandler(void)
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	af00      	add	r7, sp, #0
  /* Check RCC LSE CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_LSECSS))
 800cef8:	4b06      	ldr	r3, [pc, #24]	; (800cf14 <HAL_RCCEx_LSECSS_IRQHandler+0x20>)
 800cefa:	68db      	ldr	r3, [r3, #12]
 800cefc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf00:	2b40      	cmp	r3, #64	; 0x40
 800cf02:	d104      	bne.n	800cf0e <HAL_RCCEx_LSECSS_IRQHandler+0x1a>
  {
    /* RCC LSE Clock Security System interrupt user callback */
    HAL_RCCEx_LSECSS_Callback();
 800cf04:	f000 f80a 	bl	800cf1c <HAL_RCCEx_LSECSS_Callback>

    /* Clear RCC LSE CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_LSECSS);
 800cf08:	4b03      	ldr	r3, [pc, #12]	; (800cf18 <HAL_RCCEx_LSECSS_IRQHandler+0x24>)
 800cf0a:	2240      	movs	r2, #64	; 0x40
 800cf0c:	701a      	strb	r2, [r3, #0]
  }
}
 800cf0e:	bf00      	nop
 800cf10:	bd80      	pop	{r7, pc}
 800cf12:	bf00      	nop
 800cf14:	40023800 	.word	0x40023800
 800cf18:	4002380e 	.word	0x4002380e

0800cf1c <HAL_RCCEx_LSECSS_Callback>:
/**
  * @brief  RCCEx LSE Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCCEx_LSECSS_Callback(void)
{
 800cf1c:	b480      	push	{r7}
 800cf1e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCCEx_LSECSS_Callback should be implemented in the user file
   */
}
 800cf20:	bf00      	nop
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bc80      	pop	{r7}
 800cf26:	4770      	bx	lr

0800cf28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b082      	sub	sp, #8
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d101      	bne.n	800cf3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cf36:	2301      	movs	r3, #1
 800cf38:	e07b      	b.n	800d032 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d108      	bne.n	800cf54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	685b      	ldr	r3, [r3, #4]
 800cf46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cf4a:	d009      	beq.n	800cf60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	2200      	movs	r2, #0
 800cf50:	61da      	str	r2, [r3, #28]
 800cf52:	e005      	b.n	800cf60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2200      	movs	r2, #0
 800cf58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	2200      	movs	r2, #0
 800cf64:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cf6c:	b2db      	uxtb	r3, r3
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d106      	bne.n	800cf80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	2200      	movs	r2, #0
 800cf76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800cf7a:	6878      	ldr	r0, [r7, #4]
 800cf7c:	f7f4 ff74 	bl	8001e68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	2202      	movs	r2, #2
 800cf84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	681a      	ldr	r2, [r3, #0]
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cf96:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	685b      	ldr	r3, [r3, #4]
 800cf9c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	689b      	ldr	r3, [r3, #8]
 800cfa4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800cfa8:	431a      	orrs	r2, r3
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	68db      	ldr	r3, [r3, #12]
 800cfae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cfb2:	431a      	orrs	r2, r3
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	691b      	ldr	r3, [r3, #16]
 800cfb8:	f003 0302 	and.w	r3, r3, #2
 800cfbc:	431a      	orrs	r2, r3
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	695b      	ldr	r3, [r3, #20]
 800cfc2:	f003 0301 	and.w	r3, r3, #1
 800cfc6:	431a      	orrs	r2, r3
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	699b      	ldr	r3, [r3, #24]
 800cfcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cfd0:	431a      	orrs	r2, r3
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	69db      	ldr	r3, [r3, #28]
 800cfd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cfda:	431a      	orrs	r2, r3
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	6a1b      	ldr	r3, [r3, #32]
 800cfe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cfe4:	ea42 0103 	orr.w	r1, r2, r3
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	430a      	orrs	r2, r1
 800cff6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	699b      	ldr	r3, [r3, #24]
 800cffc:	0c1b      	lsrs	r3, r3, #16
 800cffe:	f003 0104 	and.w	r1, r3, #4
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d006:	f003 0210 	and.w	r2, r3, #16
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	430a      	orrs	r2, r1
 800d010:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	69da      	ldr	r2, [r3, #28]
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d020:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	2200      	movs	r2, #0
 800d026:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	2201      	movs	r2, #1
 800d02c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800d030:	2300      	movs	r3, #0
}
 800d032:	4618      	mov	r0, r3
 800d034:	3708      	adds	r7, #8
 800d036:	46bd      	mov	sp, r7
 800d038:	bd80      	pop	{r7, pc}

0800d03a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800d03a:	b580      	push	{r7, lr}
 800d03c:	b082      	sub	sp, #8
 800d03e:	af00      	add	r7, sp, #0
 800d040:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d101      	bne.n	800d04c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800d048:	2301      	movs	r3, #1
 800d04a:	e01a      	b.n	800d082 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	2202      	movs	r2, #2
 800d050:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	681a      	ldr	r2, [r3, #0]
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d062:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800d064:	6878      	ldr	r0, [r7, #4]
 800d066:	f7f4 ff43 	bl	8001ef0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	2200      	movs	r2, #0
 800d06e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2200      	movs	r2, #0
 800d074:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	2200      	movs	r2, #0
 800d07c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800d080:	2300      	movs	r3, #0
}
 800d082:	4618      	mov	r0, r3
 800d084:	3708      	adds	r7, #8
 800d086:	46bd      	mov	sp, r7
 800d088:	bd80      	pop	{r7, pc}
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800d08a:	b480      	push	{r7}
 800d08c:	b083      	sub	sp, #12
 800d08e:	af00      	add	r7, sp, #0
 800d090:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800d092:	bf00      	nop
 800d094:	370c      	adds	r7, #12
 800d096:	46bd      	mov	sp, r7
 800d098:	bc80      	pop	{r7}
 800d09a:	4770      	bx	lr
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 800d09c:	b480      	push	{r7}
 800d09e:	b083      	sub	sp, #12
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 800d0a4:	bf00      	nop
 800d0a6:	370c      	adds	r7, #12
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	bc80      	pop	{r7}
 800d0ac:	4770      	bx	lr

0800d0ae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d0ae:	b580      	push	{r7, lr}
 800d0b0:	b088      	sub	sp, #32
 800d0b2:	af00      	add	r7, sp, #0
 800d0b4:	60f8      	str	r0, [r7, #12]
 800d0b6:	60b9      	str	r1, [r7, #8]
 800d0b8:	603b      	str	r3, [r7, #0]
 800d0ba:	4613      	mov	r3, r2
 800d0bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d0be:	2300      	movs	r3, #0
 800d0c0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d0c8:	2b01      	cmp	r3, #1
 800d0ca:	d101      	bne.n	800d0d0 <HAL_SPI_Transmit+0x22>
 800d0cc:	2302      	movs	r3, #2
 800d0ce:	e12d      	b.n	800d32c <HAL_SPI_Transmit+0x27e>
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	2201      	movs	r2, #1
 800d0d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d0d8:	f7f5 fabc 	bl	8002654 <HAL_GetTick>
 800d0dc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800d0de:	88fb      	ldrh	r3, [r7, #6]
 800d0e0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d0e8:	b2db      	uxtb	r3, r3
 800d0ea:	2b01      	cmp	r3, #1
 800d0ec:	d002      	beq.n	800d0f4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800d0ee:	2302      	movs	r3, #2
 800d0f0:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d0f2:	e116      	b.n	800d322 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800d0f4:	68bb      	ldr	r3, [r7, #8]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d002      	beq.n	800d100 <HAL_SPI_Transmit+0x52>
 800d0fa:	88fb      	ldrh	r3, [r7, #6]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d102      	bne.n	800d106 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800d100:	2301      	movs	r3, #1
 800d102:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d104:	e10d      	b.n	800d322 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	2203      	movs	r2, #3
 800d10a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	2200      	movs	r2, #0
 800d112:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	68ba      	ldr	r2, [r7, #8]
 800d118:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	88fa      	ldrh	r2, [r7, #6]
 800d11e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	88fa      	ldrh	r2, [r7, #6]
 800d124:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	2200      	movs	r2, #0
 800d12a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	2200      	movs	r2, #0
 800d130:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	2200      	movs	r2, #0
 800d136:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	2200      	movs	r2, #0
 800d13c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	2200      	movs	r2, #0
 800d142:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	689b      	ldr	r3, [r3, #8]
 800d148:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d14c:	d10f      	bne.n	800d16e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	681a      	ldr	r2, [r3, #0]
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d15c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	681a      	ldr	r2, [r3, #0]
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d16c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d178:	2b40      	cmp	r3, #64	; 0x40
 800d17a:	d007      	beq.n	800d18c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	681a      	ldr	r2, [r3, #0]
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d18a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	68db      	ldr	r3, [r3, #12]
 800d190:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d194:	d14f      	bne.n	800d236 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	685b      	ldr	r3, [r3, #4]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d002      	beq.n	800d1a4 <HAL_SPI_Transmit+0xf6>
 800d19e:	8afb      	ldrh	r3, [r7, #22]
 800d1a0:	2b01      	cmp	r3, #1
 800d1a2:	d142      	bne.n	800d22a <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1a8:	881a      	ldrh	r2, [r3, #0]
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1b4:	1c9a      	adds	r2, r3, #2
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d1be:	b29b      	uxth	r3, r3
 800d1c0:	3b01      	subs	r3, #1
 800d1c2:	b29a      	uxth	r2, r3
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800d1c8:	e02f      	b.n	800d22a <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	689b      	ldr	r3, [r3, #8]
 800d1d0:	f003 0302 	and.w	r3, r3, #2
 800d1d4:	2b02      	cmp	r3, #2
 800d1d6:	d112      	bne.n	800d1fe <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1dc:	881a      	ldrh	r2, [r3, #0]
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1e8:	1c9a      	adds	r2, r3, #2
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d1f2:	b29b      	uxth	r3, r3
 800d1f4:	3b01      	subs	r3, #1
 800d1f6:	b29a      	uxth	r2, r3
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	86da      	strh	r2, [r3, #54]	; 0x36
 800d1fc:	e015      	b.n	800d22a <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d1fe:	f7f5 fa29 	bl	8002654 <HAL_GetTick>
 800d202:	4602      	mov	r2, r0
 800d204:	69bb      	ldr	r3, [r7, #24]
 800d206:	1ad3      	subs	r3, r2, r3
 800d208:	683a      	ldr	r2, [r7, #0]
 800d20a:	429a      	cmp	r2, r3
 800d20c:	d803      	bhi.n	800d216 <HAL_SPI_Transmit+0x168>
 800d20e:	683b      	ldr	r3, [r7, #0]
 800d210:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d214:	d102      	bne.n	800d21c <HAL_SPI_Transmit+0x16e>
 800d216:	683b      	ldr	r3, [r7, #0]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d106      	bne.n	800d22a <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800d21c:	2303      	movs	r3, #3
 800d21e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	2201      	movs	r2, #1
 800d224:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800d228:	e07b      	b.n	800d322 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d22e:	b29b      	uxth	r3, r3
 800d230:	2b00      	cmp	r3, #0
 800d232:	d1ca      	bne.n	800d1ca <HAL_SPI_Transmit+0x11c>
 800d234:	e050      	b.n	800d2d8 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	685b      	ldr	r3, [r3, #4]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d002      	beq.n	800d244 <HAL_SPI_Transmit+0x196>
 800d23e:	8afb      	ldrh	r3, [r7, #22]
 800d240:	2b01      	cmp	r3, #1
 800d242:	d144      	bne.n	800d2ce <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	330c      	adds	r3, #12
 800d24e:	7812      	ldrb	r2, [r2, #0]
 800d250:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d256:	1c5a      	adds	r2, r3, #1
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d260:	b29b      	uxth	r3, r3
 800d262:	3b01      	subs	r3, #1
 800d264:	b29a      	uxth	r2, r3
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800d26a:	e030      	b.n	800d2ce <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	689b      	ldr	r3, [r3, #8]
 800d272:	f003 0302 	and.w	r3, r3, #2
 800d276:	2b02      	cmp	r3, #2
 800d278:	d113      	bne.n	800d2a2 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	330c      	adds	r3, #12
 800d284:	7812      	ldrb	r2, [r2, #0]
 800d286:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d28c:	1c5a      	adds	r2, r3, #1
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d296:	b29b      	uxth	r3, r3
 800d298:	3b01      	subs	r3, #1
 800d29a:	b29a      	uxth	r2, r3
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	86da      	strh	r2, [r3, #54]	; 0x36
 800d2a0:	e015      	b.n	800d2ce <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d2a2:	f7f5 f9d7 	bl	8002654 <HAL_GetTick>
 800d2a6:	4602      	mov	r2, r0
 800d2a8:	69bb      	ldr	r3, [r7, #24]
 800d2aa:	1ad3      	subs	r3, r2, r3
 800d2ac:	683a      	ldr	r2, [r7, #0]
 800d2ae:	429a      	cmp	r2, r3
 800d2b0:	d803      	bhi.n	800d2ba <HAL_SPI_Transmit+0x20c>
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2b8:	d102      	bne.n	800d2c0 <HAL_SPI_Transmit+0x212>
 800d2ba:	683b      	ldr	r3, [r7, #0]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d106      	bne.n	800d2ce <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800d2c0:	2303      	movs	r3, #3
 800d2c2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	2201      	movs	r2, #1
 800d2c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800d2cc:	e029      	b.n	800d322 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d2d2:	b29b      	uxth	r3, r3
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d1c9      	bne.n	800d26c <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d2d8:	69ba      	ldr	r2, [r7, #24]
 800d2da:	6839      	ldr	r1, [r7, #0]
 800d2dc:	68f8      	ldr	r0, [r7, #12]
 800d2de:	f001 ff37 	bl	800f150 <SPI_EndRxTxTransaction>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d002      	beq.n	800d2ee <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	2220      	movs	r2, #32
 800d2ec:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	689b      	ldr	r3, [r3, #8]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d10a      	bne.n	800d30c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	613b      	str	r3, [r7, #16]
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	68db      	ldr	r3, [r3, #12]
 800d300:	613b      	str	r3, [r7, #16]
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	689b      	ldr	r3, [r3, #8]
 800d308:	613b      	str	r3, [r7, #16]
 800d30a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d310:	2b00      	cmp	r3, #0
 800d312:	d002      	beq.n	800d31a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800d314:	2301      	movs	r3, #1
 800d316:	77fb      	strb	r3, [r7, #31]
 800d318:	e003      	b.n	800d322 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	2201      	movs	r2, #1
 800d31e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	2200      	movs	r2, #0
 800d326:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d32a:	7ffb      	ldrb	r3, [r7, #31]
}
 800d32c:	4618      	mov	r0, r3
 800d32e:	3720      	adds	r7, #32
 800d330:	46bd      	mov	sp, r7
 800d332:	bd80      	pop	{r7, pc}

0800d334 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d334:	b580      	push	{r7, lr}
 800d336:	b088      	sub	sp, #32
 800d338:	af02      	add	r7, sp, #8
 800d33a:	60f8      	str	r0, [r7, #12]
 800d33c:	60b9      	str	r1, [r7, #8]
 800d33e:	603b      	str	r3, [r7, #0]
 800d340:	4613      	mov	r3, r2
 800d342:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d344:	2300      	movs	r3, #0
 800d346:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d34e:	b2db      	uxtb	r3, r3
 800d350:	2b01      	cmp	r3, #1
 800d352:	d002      	beq.n	800d35a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800d354:	2302      	movs	r3, #2
 800d356:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d358:	e0fb      	b.n	800d552 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	685b      	ldr	r3, [r3, #4]
 800d35e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d362:	d112      	bne.n	800d38a <HAL_SPI_Receive+0x56>
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	689b      	ldr	r3, [r3, #8]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d10e      	bne.n	800d38a <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	2204      	movs	r2, #4
 800d370:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800d374:	88fa      	ldrh	r2, [r7, #6]
 800d376:	683b      	ldr	r3, [r7, #0]
 800d378:	9300      	str	r3, [sp, #0]
 800d37a:	4613      	mov	r3, r2
 800d37c:	68ba      	ldr	r2, [r7, #8]
 800d37e:	68b9      	ldr	r1, [r7, #8]
 800d380:	68f8      	ldr	r0, [r7, #12]
 800d382:	f000 f8ef 	bl	800d564 <HAL_SPI_TransmitReceive>
 800d386:	4603      	mov	r3, r0
 800d388:	e0e8      	b.n	800d55c <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d390:	2b01      	cmp	r3, #1
 800d392:	d101      	bne.n	800d398 <HAL_SPI_Receive+0x64>
 800d394:	2302      	movs	r3, #2
 800d396:	e0e1      	b.n	800d55c <HAL_SPI_Receive+0x228>
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	2201      	movs	r2, #1
 800d39c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d3a0:	f7f5 f958 	bl	8002654 <HAL_GetTick>
 800d3a4:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800d3a6:	68bb      	ldr	r3, [r7, #8]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d002      	beq.n	800d3b2 <HAL_SPI_Receive+0x7e>
 800d3ac:	88fb      	ldrh	r3, [r7, #6]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d102      	bne.n	800d3b8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800d3b2:	2301      	movs	r3, #1
 800d3b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d3b6:	e0cc      	b.n	800d552 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	2204      	movs	r2, #4
 800d3bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	68ba      	ldr	r2, [r7, #8]
 800d3ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	88fa      	ldrh	r2, [r7, #6]
 800d3d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	88fa      	ldrh	r2, [r7, #6]
 800d3d6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	2200      	movs	r2, #0
 800d3dc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	689b      	ldr	r3, [r3, #8]
 800d3fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d3fe:	d10f      	bne.n	800d420 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	681a      	ldr	r2, [r3, #0]
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d40e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	681a      	ldr	r2, [r3, #0]
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d41e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d42a:	2b40      	cmp	r3, #64	; 0x40
 800d42c:	d007      	beq.n	800d43e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	681a      	ldr	r2, [r3, #0]
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d43c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	68db      	ldr	r3, [r3, #12]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d16a      	bne.n	800d51c <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800d446:	e032      	b.n	800d4ae <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	689b      	ldr	r3, [r3, #8]
 800d44e:	f003 0301 	and.w	r3, r3, #1
 800d452:	2b01      	cmp	r3, #1
 800d454:	d115      	bne.n	800d482 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	f103 020c 	add.w	r2, r3, #12
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d462:	7812      	ldrb	r2, [r2, #0]
 800d464:	b2d2      	uxtb	r2, r2
 800d466:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d46c:	1c5a      	adds	r2, r3, #1
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d476:	b29b      	uxth	r3, r3
 800d478:	3b01      	subs	r3, #1
 800d47a:	b29a      	uxth	r2, r3
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d480:	e015      	b.n	800d4ae <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d482:	f7f5 f8e7 	bl	8002654 <HAL_GetTick>
 800d486:	4602      	mov	r2, r0
 800d488:	693b      	ldr	r3, [r7, #16]
 800d48a:	1ad3      	subs	r3, r2, r3
 800d48c:	683a      	ldr	r2, [r7, #0]
 800d48e:	429a      	cmp	r2, r3
 800d490:	d803      	bhi.n	800d49a <HAL_SPI_Receive+0x166>
 800d492:	683b      	ldr	r3, [r7, #0]
 800d494:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d498:	d102      	bne.n	800d4a0 <HAL_SPI_Receive+0x16c>
 800d49a:	683b      	ldr	r3, [r7, #0]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d106      	bne.n	800d4ae <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800d4a0:	2303      	movs	r3, #3
 800d4a2:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	2201      	movs	r2, #1
 800d4a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800d4ac:	e051      	b.n	800d552 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d4b2:	b29b      	uxth	r3, r3
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d1c7      	bne.n	800d448 <HAL_SPI_Receive+0x114>
 800d4b8:	e035      	b.n	800d526 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	689b      	ldr	r3, [r3, #8]
 800d4c0:	f003 0301 	and.w	r3, r3, #1
 800d4c4:	2b01      	cmp	r3, #1
 800d4c6:	d113      	bne.n	800d4f0 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	68da      	ldr	r2, [r3, #12]
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4d2:	b292      	uxth	r2, r2
 800d4d4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4da:	1c9a      	adds	r2, r3, #2
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d4e4:	b29b      	uxth	r3, r3
 800d4e6:	3b01      	subs	r3, #1
 800d4e8:	b29a      	uxth	r2, r3
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d4ee:	e015      	b.n	800d51c <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d4f0:	f7f5 f8b0 	bl	8002654 <HAL_GetTick>
 800d4f4:	4602      	mov	r2, r0
 800d4f6:	693b      	ldr	r3, [r7, #16]
 800d4f8:	1ad3      	subs	r3, r2, r3
 800d4fa:	683a      	ldr	r2, [r7, #0]
 800d4fc:	429a      	cmp	r2, r3
 800d4fe:	d803      	bhi.n	800d508 <HAL_SPI_Receive+0x1d4>
 800d500:	683b      	ldr	r3, [r7, #0]
 800d502:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d506:	d102      	bne.n	800d50e <HAL_SPI_Receive+0x1da>
 800d508:	683b      	ldr	r3, [r7, #0]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d106      	bne.n	800d51c <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800d50e:	2303      	movs	r3, #3
 800d510:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	2201      	movs	r2, #1
 800d516:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800d51a:	e01a      	b.n	800d552 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d520:	b29b      	uxth	r3, r3
 800d522:	2b00      	cmp	r3, #0
 800d524:	d1c9      	bne.n	800d4ba <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d526:	693a      	ldr	r2, [r7, #16]
 800d528:	6839      	ldr	r1, [r7, #0]
 800d52a:	68f8      	ldr	r0, [r7, #12]
 800d52c:	f001 fdaa 	bl	800f084 <SPI_EndRxTransaction>
 800d530:	4603      	mov	r3, r0
 800d532:	2b00      	cmp	r3, #0
 800d534:	d002      	beq.n	800d53c <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	2220      	movs	r2, #32
 800d53a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d540:	2b00      	cmp	r3, #0
 800d542:	d002      	beq.n	800d54a <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800d544:	2301      	movs	r3, #1
 800d546:	75fb      	strb	r3, [r7, #23]
 800d548:	e003      	b.n	800d552 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	2201      	movs	r2, #1
 800d54e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	2200      	movs	r2, #0
 800d556:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d55a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d55c:	4618      	mov	r0, r3
 800d55e:	3718      	adds	r7, #24
 800d560:	46bd      	mov	sp, r7
 800d562:	bd80      	pop	{r7, pc}

0800d564 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b08c      	sub	sp, #48	; 0x30
 800d568:	af00      	add	r7, sp, #0
 800d56a:	60f8      	str	r0, [r7, #12]
 800d56c:	60b9      	str	r1, [r7, #8]
 800d56e:	607a      	str	r2, [r7, #4]
 800d570:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800d572:	2301      	movs	r3, #1
 800d574:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800d576:	2300      	movs	r3, #0
 800d578:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d582:	2b01      	cmp	r3, #1
 800d584:	d101      	bne.n	800d58a <HAL_SPI_TransmitReceive+0x26>
 800d586:	2302      	movs	r3, #2
 800d588:	e198      	b.n	800d8bc <HAL_SPI_TransmitReceive+0x358>
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	2201      	movs	r2, #1
 800d58e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d592:	f7f5 f85f 	bl	8002654 <HAL_GetTick>
 800d596:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d59e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	685b      	ldr	r3, [r3, #4]
 800d5a6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800d5a8:	887b      	ldrh	r3, [r7, #2]
 800d5aa:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d5ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d5b0:	2b01      	cmp	r3, #1
 800d5b2:	d00f      	beq.n	800d5d4 <HAL_SPI_TransmitReceive+0x70>
 800d5b4:	69fb      	ldr	r3, [r7, #28]
 800d5b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d5ba:	d107      	bne.n	800d5cc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	689b      	ldr	r3, [r3, #8]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d103      	bne.n	800d5cc <HAL_SPI_TransmitReceive+0x68>
 800d5c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d5c8:	2b04      	cmp	r3, #4
 800d5ca:	d003      	beq.n	800d5d4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800d5cc:	2302      	movs	r3, #2
 800d5ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800d5d2:	e16d      	b.n	800d8b0 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800d5d4:	68bb      	ldr	r3, [r7, #8]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d005      	beq.n	800d5e6 <HAL_SPI_TransmitReceive+0x82>
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d002      	beq.n	800d5e6 <HAL_SPI_TransmitReceive+0x82>
 800d5e0:	887b      	ldrh	r3, [r7, #2]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d103      	bne.n	800d5ee <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800d5e6:	2301      	movs	r3, #1
 800d5e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800d5ec:	e160      	b.n	800d8b0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d5f4:	b2db      	uxtb	r3, r3
 800d5f6:	2b04      	cmp	r3, #4
 800d5f8:	d003      	beq.n	800d602 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	2205      	movs	r2, #5
 800d5fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	2200      	movs	r2, #0
 800d606:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	687a      	ldr	r2, [r7, #4]
 800d60c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	887a      	ldrh	r2, [r7, #2]
 800d612:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	887a      	ldrh	r2, [r7, #2]
 800d618:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	68ba      	ldr	r2, [r7, #8]
 800d61e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	887a      	ldrh	r2, [r7, #2]
 800d624:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	887a      	ldrh	r2, [r7, #2]
 800d62a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	2200      	movs	r2, #0
 800d630:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	2200      	movs	r2, #0
 800d636:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d642:	2b40      	cmp	r3, #64	; 0x40
 800d644:	d007      	beq.n	800d656 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	681a      	ldr	r2, [r3, #0]
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d654:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	68db      	ldr	r3, [r3, #12]
 800d65a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d65e:	d17c      	bne.n	800d75a <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	685b      	ldr	r3, [r3, #4]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d002      	beq.n	800d66e <HAL_SPI_TransmitReceive+0x10a>
 800d668:	8b7b      	ldrh	r3, [r7, #26]
 800d66a:	2b01      	cmp	r3, #1
 800d66c:	d16a      	bne.n	800d744 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d672:	881a      	ldrh	r2, [r3, #0]
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d67e:	1c9a      	adds	r2, r3, #2
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d688:	b29b      	uxth	r3, r3
 800d68a:	3b01      	subs	r3, #1
 800d68c:	b29a      	uxth	r2, r3
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d692:	e057      	b.n	800d744 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	689b      	ldr	r3, [r3, #8]
 800d69a:	f003 0302 	and.w	r3, r3, #2
 800d69e:	2b02      	cmp	r3, #2
 800d6a0:	d11b      	bne.n	800d6da <HAL_SPI_TransmitReceive+0x176>
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d6a6:	b29b      	uxth	r3, r3
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d016      	beq.n	800d6da <HAL_SPI_TransmitReceive+0x176>
 800d6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ae:	2b01      	cmp	r3, #1
 800d6b0:	d113      	bne.n	800d6da <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6b6:	881a      	ldrh	r2, [r3, #0]
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6c2:	1c9a      	adds	r2, r3, #2
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d6cc:	b29b      	uxth	r3, r3
 800d6ce:	3b01      	subs	r3, #1
 800d6d0:	b29a      	uxth	r2, r3
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	689b      	ldr	r3, [r3, #8]
 800d6e0:	f003 0301 	and.w	r3, r3, #1
 800d6e4:	2b01      	cmp	r3, #1
 800d6e6:	d119      	bne.n	800d71c <HAL_SPI_TransmitReceive+0x1b8>
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d6ec:	b29b      	uxth	r3, r3
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d014      	beq.n	800d71c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	68da      	ldr	r2, [r3, #12]
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6fc:	b292      	uxth	r2, r2
 800d6fe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d704:	1c9a      	adds	r2, r3, #2
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d70e:	b29b      	uxth	r3, r3
 800d710:	3b01      	subs	r3, #1
 800d712:	b29a      	uxth	r2, r3
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d718:	2301      	movs	r3, #1
 800d71a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800d71c:	f7f4 ff9a 	bl	8002654 <HAL_GetTick>
 800d720:	4602      	mov	r2, r0
 800d722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d724:	1ad3      	subs	r3, r2, r3
 800d726:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d728:	429a      	cmp	r2, r3
 800d72a:	d80b      	bhi.n	800d744 <HAL_SPI_TransmitReceive+0x1e0>
 800d72c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d72e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d732:	d007      	beq.n	800d744 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800d734:	2303      	movs	r3, #3
 800d736:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	2201      	movs	r2, #1
 800d73e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800d742:	e0b5      	b.n	800d8b0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d748:	b29b      	uxth	r3, r3
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d1a2      	bne.n	800d694 <HAL_SPI_TransmitReceive+0x130>
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d752:	b29b      	uxth	r3, r3
 800d754:	2b00      	cmp	r3, #0
 800d756:	d19d      	bne.n	800d694 <HAL_SPI_TransmitReceive+0x130>
 800d758:	e080      	b.n	800d85c <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	685b      	ldr	r3, [r3, #4]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d002      	beq.n	800d768 <HAL_SPI_TransmitReceive+0x204>
 800d762:	8b7b      	ldrh	r3, [r7, #26]
 800d764:	2b01      	cmp	r3, #1
 800d766:	d16f      	bne.n	800d848 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	330c      	adds	r3, #12
 800d772:	7812      	ldrb	r2, [r2, #0]
 800d774:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d77a:	1c5a      	adds	r2, r3, #1
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d784:	b29b      	uxth	r3, r3
 800d786:	3b01      	subs	r3, #1
 800d788:	b29a      	uxth	r2, r3
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d78e:	e05b      	b.n	800d848 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	689b      	ldr	r3, [r3, #8]
 800d796:	f003 0302 	and.w	r3, r3, #2
 800d79a:	2b02      	cmp	r3, #2
 800d79c:	d11c      	bne.n	800d7d8 <HAL_SPI_TransmitReceive+0x274>
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d7a2:	b29b      	uxth	r3, r3
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d017      	beq.n	800d7d8 <HAL_SPI_TransmitReceive+0x274>
 800d7a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7aa:	2b01      	cmp	r3, #1
 800d7ac:	d114      	bne.n	800d7d8 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	330c      	adds	r3, #12
 800d7b8:	7812      	ldrb	r2, [r2, #0]
 800d7ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7c0:	1c5a      	adds	r2, r3, #1
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d7ca:	b29b      	uxth	r3, r3
 800d7cc:	3b01      	subs	r3, #1
 800d7ce:	b29a      	uxth	r2, r3
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	689b      	ldr	r3, [r3, #8]
 800d7de:	f003 0301 	and.w	r3, r3, #1
 800d7e2:	2b01      	cmp	r3, #1
 800d7e4:	d119      	bne.n	800d81a <HAL_SPI_TransmitReceive+0x2b6>
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d7ea:	b29b      	uxth	r3, r3
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d014      	beq.n	800d81a <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	68da      	ldr	r2, [r3, #12]
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7fa:	b2d2      	uxtb	r2, r2
 800d7fc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d802:	1c5a      	adds	r2, r3, #1
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d80c:	b29b      	uxth	r3, r3
 800d80e:	3b01      	subs	r3, #1
 800d810:	b29a      	uxth	r2, r3
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d816:	2301      	movs	r3, #1
 800d818:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800d81a:	f7f4 ff1b 	bl	8002654 <HAL_GetTick>
 800d81e:	4602      	mov	r2, r0
 800d820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d822:	1ad3      	subs	r3, r2, r3
 800d824:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d826:	429a      	cmp	r2, r3
 800d828:	d803      	bhi.n	800d832 <HAL_SPI_TransmitReceive+0x2ce>
 800d82a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d82c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d830:	d102      	bne.n	800d838 <HAL_SPI_TransmitReceive+0x2d4>
 800d832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d834:	2b00      	cmp	r3, #0
 800d836:	d107      	bne.n	800d848 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800d838:	2303      	movs	r3, #3
 800d83a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	2201      	movs	r2, #1
 800d842:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800d846:	e033      	b.n	800d8b0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d84c:	b29b      	uxth	r3, r3
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d19e      	bne.n	800d790 <HAL_SPI_TransmitReceive+0x22c>
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d856:	b29b      	uxth	r3, r3
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d199      	bne.n	800d790 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d85c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d85e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d860:	68f8      	ldr	r0, [r7, #12]
 800d862:	f001 fc75 	bl	800f150 <SPI_EndRxTxTransaction>
 800d866:	4603      	mov	r3, r0
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d006      	beq.n	800d87a <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800d86c:	2301      	movs	r3, #1
 800d86e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	2220      	movs	r2, #32
 800d876:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800d878:	e01a      	b.n	800d8b0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	689b      	ldr	r3, [r3, #8]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d10a      	bne.n	800d898 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d882:	2300      	movs	r3, #0
 800d884:	617b      	str	r3, [r7, #20]
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	68db      	ldr	r3, [r3, #12]
 800d88c:	617b      	str	r3, [r7, #20]
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	689b      	ldr	r3, [r3, #8]
 800d894:	617b      	str	r3, [r7, #20]
 800d896:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d003      	beq.n	800d8a8 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800d8a0:	2301      	movs	r3, #1
 800d8a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d8a6:	e003      	b.n	800d8b0 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	2201      	movs	r2, #1
 800d8ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d8b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800d8bc:	4618      	mov	r0, r3
 800d8be:	3730      	adds	r7, #48	; 0x30
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	bd80      	pop	{r7, pc}

0800d8c4 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800d8c4:	b480      	push	{r7}
 800d8c6:	b087      	sub	sp, #28
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	60f8      	str	r0, [r7, #12]
 800d8cc:	60b9      	str	r1, [r7, #8]
 800d8ce:	4613      	mov	r3, r2
 800d8d0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d8dc:	2b01      	cmp	r3, #1
 800d8de:	d101      	bne.n	800d8e4 <HAL_SPI_Transmit_IT+0x20>
 800d8e0:	2302      	movs	r3, #2
 800d8e2:	e06f      	b.n	800d9c4 <HAL_SPI_Transmit_IT+0x100>
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	2201      	movs	r2, #1
 800d8e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 800d8ec:	68bb      	ldr	r3, [r7, #8]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d002      	beq.n	800d8f8 <HAL_SPI_Transmit_IT+0x34>
 800d8f2:	88fb      	ldrh	r3, [r7, #6]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d102      	bne.n	800d8fe <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 800d8f8:	2301      	movs	r3, #1
 800d8fa:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d8fc:	e05d      	b.n	800d9ba <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d904:	b2db      	uxtb	r3, r3
 800d906:	2b01      	cmp	r3, #1
 800d908:	d002      	beq.n	800d910 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 800d90a:	2302      	movs	r3, #2
 800d90c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d90e:	e054      	b.n	800d9ba <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	2203      	movs	r2, #3
 800d914:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	2200      	movs	r2, #0
 800d91c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	68ba      	ldr	r2, [r7, #8]
 800d922:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	88fa      	ldrh	r2, [r7, #6]
 800d928:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	88fa      	ldrh	r2, [r7, #6]
 800d92e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	2200      	movs	r2, #0
 800d934:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	2200      	movs	r2, #0
 800d93a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	2200      	movs	r2, #0
 800d940:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	2200      	movs	r2, #0
 800d946:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	68db      	ldr	r3, [r3, #12]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d003      	beq.n	800d958 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	4a1f      	ldr	r2, [pc, #124]	; (800d9d0 <HAL_SPI_Transmit_IT+0x10c>)
 800d954:	645a      	str	r2, [r3, #68]	; 0x44
 800d956:	e002      	b.n	800d95e <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	4a1e      	ldr	r2, [pc, #120]	; (800d9d4 <HAL_SPI_Transmit_IT+0x110>)
 800d95c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	689b      	ldr	r3, [r3, #8]
 800d962:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d966:	d10f      	bne.n	800d988 <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	681a      	ldr	r2, [r3, #0]
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d976:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	681a      	ldr	r2, [r3, #0]
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d986:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	685a      	ldr	r2, [r3, #4]
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 800d996:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9a2:	2b40      	cmp	r3, #64	; 0x40
 800d9a4:	d008      	beq.n	800d9b8 <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	681a      	ldr	r2, [r3, #0]
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d9b4:	601a      	str	r2, [r3, #0]
 800d9b6:	e000      	b.n	800d9ba <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 800d9b8:	bf00      	nop
  __HAL_UNLOCK(hspi);
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	2200      	movs	r2, #0
 800d9be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d9c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	371c      	adds	r7, #28
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	bc80      	pop	{r7}
 800d9cc:	4770      	bx	lr
 800d9ce:	bf00      	nop
 800d9d0:	0800ef31 	.word	0x0800ef31
 800d9d4:	0800eeeb 	.word	0x0800eeeb

0800d9d8 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b086      	sub	sp, #24
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	60f8      	str	r0, [r7, #12]
 800d9e0:	60b9      	str	r1, [r7, #8]
 800d9e2:	4613      	mov	r3, r2
 800d9e4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	75fb      	strb	r3, [r7, #23]


  if (hspi->State != HAL_SPI_STATE_READY)
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d9f0:	b2db      	uxtb	r3, r3
 800d9f2:	2b01      	cmp	r3, #1
 800d9f4:	d002      	beq.n	800d9fc <HAL_SPI_Receive_IT+0x24>
  {
    errorcode = HAL_BUSY;
 800d9f6:	2302      	movs	r3, #2
 800d9f8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d9fa:	e07d      	b.n	800daf8 <HAL_SPI_Receive_IT+0x120>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	689b      	ldr	r3, [r3, #8]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d110      	bne.n	800da26 <HAL_SPI_Receive_IT+0x4e>
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	685b      	ldr	r3, [r3, #4]
 800da08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800da0c:	d10b      	bne.n	800da26 <HAL_SPI_Receive_IT+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	2204      	movs	r2, #4
 800da12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800da16:	88fb      	ldrh	r3, [r7, #6]
 800da18:	68ba      	ldr	r2, [r7, #8]
 800da1a:	68b9      	ldr	r1, [r7, #8]
 800da1c:	68f8      	ldr	r0, [r7, #12]
 800da1e:	f000 f879 	bl	800db14 <HAL_SPI_TransmitReceive_IT>
 800da22:	4603      	mov	r3, r0
 800da24:	e06d      	b.n	800db02 <HAL_SPI_Receive_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800da2c:	2b01      	cmp	r3, #1
 800da2e:	d101      	bne.n	800da34 <HAL_SPI_Receive_IT+0x5c>
 800da30:	2302      	movs	r3, #2
 800da32:	e066      	b.n	800db02 <HAL_SPI_Receive_IT+0x12a>
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	2201      	movs	r2, #1
 800da38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 800da3c:	68bb      	ldr	r3, [r7, #8]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d002      	beq.n	800da48 <HAL_SPI_Receive_IT+0x70>
 800da42:	88fb      	ldrh	r3, [r7, #6]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d102      	bne.n	800da4e <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 800da48:	2301      	movs	r3, #1
 800da4a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800da4c:	e054      	b.n	800daf8 <HAL_SPI_Receive_IT+0x120>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	2204      	movs	r2, #4
 800da52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	2200      	movs	r2, #0
 800da5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	68ba      	ldr	r2, [r7, #8]
 800da60:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	88fa      	ldrh	r2, [r7, #6]
 800da66:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	88fa      	ldrh	r2, [r7, #6]
 800da6c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	2200      	movs	r2, #0
 800da72:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	2200      	movs	r2, #0
 800da78:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	2200      	movs	r2, #0
 800da7e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	2200      	movs	r2, #0
 800da84:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	68db      	ldr	r3, [r3, #12]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d003      	beq.n	800da96 <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	4a1e      	ldr	r2, [pc, #120]	; (800db0c <HAL_SPI_Receive_IT+0x134>)
 800da92:	641a      	str	r2, [r3, #64]	; 0x40
 800da94:	e002      	b.n	800da9c <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	4a1d      	ldr	r2, [pc, #116]	; (800db10 <HAL_SPI_Receive_IT+0x138>)
 800da9a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	689b      	ldr	r3, [r3, #8]
 800daa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800daa4:	d10f      	bne.n	800dac6 <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	681a      	ldr	r2, [r3, #0]
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dab4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	681a      	ldr	r2, [r3, #0]
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800dac4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	685a      	ldr	r2, [r3, #4]
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800dad4:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dae0:	2b40      	cmp	r3, #64	; 0x40
 800dae2:	d008      	beq.n	800daf6 <HAL_SPI_Receive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	681a      	ldr	r2, [r3, #0]
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800daf2:	601a      	str	r2, [r3, #0]
 800daf4:	e000      	b.n	800daf8 <HAL_SPI_Receive_IT+0x120>
  }

error :
 800daf6:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	2200      	movs	r2, #0
 800dafc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800db00:	7dfb      	ldrb	r3, [r7, #23]
}
 800db02:	4618      	mov	r0, r3
 800db04:	3718      	adds	r7, #24
 800db06:	46bd      	mov	sp, r7
 800db08:	bd80      	pop	{r7, pc}
 800db0a:	bf00      	nop
 800db0c:	0800eea5 	.word	0x0800eea5
 800db10:	0800ee5b 	.word	0x0800ee5b

0800db14 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800db14:	b480      	push	{r7}
 800db16:	b087      	sub	sp, #28
 800db18:	af00      	add	r7, sp, #0
 800db1a:	60f8      	str	r0, [r7, #12]
 800db1c:	60b9      	str	r1, [r7, #8]
 800db1e:	607a      	str	r2, [r7, #4]
 800db20:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800db22:	2300      	movs	r3, #0
 800db24:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800db2c:	2b01      	cmp	r3, #1
 800db2e:	d101      	bne.n	800db34 <HAL_SPI_TransmitReceive_IT+0x20>
 800db30:	2302      	movs	r3, #2
 800db32:	e075      	b.n	800dc20 <HAL_SPI_TransmitReceive_IT+0x10c>
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	2201      	movs	r2, #1
 800db38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800db42:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	685b      	ldr	r3, [r3, #4]
 800db48:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800db4a:	7dbb      	ldrb	r3, [r7, #22]
 800db4c:	2b01      	cmp	r3, #1
 800db4e:	d00d      	beq.n	800db6c <HAL_SPI_TransmitReceive_IT+0x58>
 800db50:	693b      	ldr	r3, [r7, #16]
 800db52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800db56:	d106      	bne.n	800db66 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	689b      	ldr	r3, [r3, #8]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d102      	bne.n	800db66 <HAL_SPI_TransmitReceive_IT+0x52>
 800db60:	7dbb      	ldrb	r3, [r7, #22]
 800db62:	2b04      	cmp	r3, #4
 800db64:	d002      	beq.n	800db6c <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800db66:	2302      	movs	r3, #2
 800db68:	75fb      	strb	r3, [r7, #23]
    goto error;
 800db6a:	e054      	b.n	800dc16 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800db6c:	68bb      	ldr	r3, [r7, #8]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d005      	beq.n	800db7e <HAL_SPI_TransmitReceive_IT+0x6a>
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d002      	beq.n	800db7e <HAL_SPI_TransmitReceive_IT+0x6a>
 800db78:	887b      	ldrh	r3, [r7, #2]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d102      	bne.n	800db84 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800db7e:	2301      	movs	r3, #1
 800db80:	75fb      	strb	r3, [r7, #23]
    goto error;
 800db82:	e048      	b.n	800dc16 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800db8a:	b2db      	uxtb	r3, r3
 800db8c:	2b04      	cmp	r3, #4
 800db8e:	d003      	beq.n	800db98 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	2205      	movs	r2, #5
 800db94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	2200      	movs	r2, #0
 800db9c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	68ba      	ldr	r2, [r7, #8]
 800dba2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	887a      	ldrh	r2, [r7, #2]
 800dba8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	887a      	ldrh	r2, [r7, #2]
 800dbae:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	687a      	ldr	r2, [r7, #4]
 800dbb4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	887a      	ldrh	r2, [r7, #2]
 800dbba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	887a      	ldrh	r2, [r7, #2]
 800dbc0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	68db      	ldr	r3, [r3, #12]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d006      	beq.n	800dbd8 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	4a17      	ldr	r2, [pc, #92]	; (800dc2c <HAL_SPI_TransmitReceive_IT+0x118>)
 800dbce:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	4a17      	ldr	r2, [pc, #92]	; (800dc30 <HAL_SPI_TransmitReceive_IT+0x11c>)
 800dbd4:	645a      	str	r2, [r3, #68]	; 0x44
 800dbd6:	e005      	b.n	800dbe4 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	4a16      	ldr	r2, [pc, #88]	; (800dc34 <HAL_SPI_TransmitReceive_IT+0x120>)
 800dbdc:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	4a15      	ldr	r2, [pc, #84]	; (800dc38 <HAL_SPI_TransmitReceive_IT+0x124>)
 800dbe2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	685a      	ldr	r2, [r3, #4]
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800dbf2:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbfe:	2b40      	cmp	r3, #64	; 0x40
 800dc00:	d008      	beq.n	800dc14 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	681a      	ldr	r2, [r3, #0]
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dc10:	601a      	str	r2, [r3, #0]
 800dc12:	e000      	b.n	800dc16 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 800dc14:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	2200      	movs	r2, #0
 800dc1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800dc1e:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc20:	4618      	mov	r0, r3
 800dc22:	371c      	adds	r7, #28
 800dc24:	46bd      	mov	sp, r7
 800dc26:	bc80      	pop	{r7}
 800dc28:	4770      	bx	lr
 800dc2a:	bf00      	nop
 800dc2c:	0800ed9d 	.word	0x0800ed9d
 800dc30:	0800edfd 	.word	0x0800edfd
 800dc34:	0800ecd9 	.word	0x0800ecd9
 800dc38:	0800ed3d 	.word	0x0800ed3d

0800dc3c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b086      	sub	sp, #24
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	60f8      	str	r0, [r7, #12]
 800dc44:	60b9      	str	r1, [r7, #8]
 800dc46:	4613      	mov	r3, r2
 800dc48:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800dc54:	2b01      	cmp	r3, #1
 800dc56:	d101      	bne.n	800dc5c <HAL_SPI_Transmit_DMA+0x20>
 800dc58:	2302      	movs	r3, #2
 800dc5a:	e097      	b.n	800dd8c <HAL_SPI_Transmit_DMA+0x150>
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	2201      	movs	r2, #1
 800dc60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800dc6a:	b2db      	uxtb	r3, r3
 800dc6c:	2b01      	cmp	r3, #1
 800dc6e:	d002      	beq.n	800dc76 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800dc70:	2302      	movs	r3, #2
 800dc72:	75fb      	strb	r3, [r7, #23]
    goto error;
 800dc74:	e085      	b.n	800dd82 <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 800dc76:	68bb      	ldr	r3, [r7, #8]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d002      	beq.n	800dc82 <HAL_SPI_Transmit_DMA+0x46>
 800dc7c:	88fb      	ldrh	r3, [r7, #6]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d102      	bne.n	800dc88 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800dc82:	2301      	movs	r3, #1
 800dc84:	75fb      	strb	r3, [r7, #23]
    goto error;
 800dc86:	e07c      	b.n	800dd82 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	2203      	movs	r2, #3
 800dc8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	2200      	movs	r2, #0
 800dc94:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	68ba      	ldr	r2, [r7, #8]
 800dc9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	88fa      	ldrh	r2, [r7, #6]
 800dca0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	88fa      	ldrh	r2, [r7, #6]
 800dca6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	2200      	movs	r2, #0
 800dcac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	2200      	movs	r2, #0
 800dcb2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	2200      	movs	r2, #0
 800dcbe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	2200      	movs	r2, #0
 800dcc4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	689b      	ldr	r3, [r3, #8]
 800dcca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dcce:	d10f      	bne.n	800dcf0 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	681a      	ldr	r2, [r3, #0]
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dcde:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	681a      	ldr	r2, [r3, #0]
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800dcee:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dcf4:	4a27      	ldr	r2, [pc, #156]	; (800dd94 <HAL_SPI_Transmit_DMA+0x158>)
 800dcf6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dcfc:	4a26      	ldr	r2, [pc, #152]	; (800dd98 <HAL_SPI_Transmit_DMA+0x15c>)
 800dcfe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dd04:	4a25      	ldr	r2, [pc, #148]	; (800dd9c <HAL_SPI_Transmit_DMA+0x160>)
 800dd06:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dd0c:	2200      	movs	r2, #0
 800dd0e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd18:	4619      	mov	r1, r3
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	330c      	adds	r3, #12
 800dd20:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dd26:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800dd28:	f7f5 f9eb 	bl	8003102 <HAL_DMA_Start_IT>
 800dd2c:	4603      	mov	r3, r0
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d008      	beq.n	800dd44 <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd36:	f043 0210 	orr.w	r2, r3, #16
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800dd3e:	2301      	movs	r3, #1
 800dd40:	75fb      	strb	r3, [r7, #23]

    goto error;
 800dd42:	e01e      	b.n	800dd82 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd4e:	2b40      	cmp	r3, #64	; 0x40
 800dd50:	d007      	beq.n	800dd62 <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	681a      	ldr	r2, [r3, #0]
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dd60:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	685a      	ldr	r2, [r3, #4]
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	f042 0220 	orr.w	r2, r2, #32
 800dd70:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	685a      	ldr	r2, [r3, #4]
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	f042 0202 	orr.w	r2, r2, #2
 800dd80:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	2200      	movs	r2, #0
 800dd86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800dd8a:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	3718      	adds	r7, #24
 800dd90:	46bd      	mov	sp, r7
 800dd92:	bd80      	pop	{r7, pc}
 800dd94:	0800ea87 	.word	0x0800ea87
 800dd98:	0800e8ad 	.word	0x0800e8ad
 800dd9c:	0800eadb 	.word	0x0800eadb

0800dda0 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b086      	sub	sp, #24
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	60f8      	str	r0, [r7, #12]
 800dda8:	60b9      	str	r1, [r7, #8]
 800ddaa:	4613      	mov	r3, r2
 800ddac:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ddae:	2300      	movs	r3, #0
 800ddb0:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));
  
  if (hspi->State != HAL_SPI_STATE_READY)
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ddb8:	b2db      	uxtb	r3, r3
 800ddba:	2b01      	cmp	r3, #1
 800ddbc:	d002      	beq.n	800ddc4 <HAL_SPI_Receive_DMA+0x24>
  {
    errorcode = HAL_BUSY;
 800ddbe:	2302      	movs	r3, #2
 800ddc0:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ddc2:	e0a2      	b.n	800df0a <HAL_SPI_Receive_DMA+0x16a>
  }
  
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	689b      	ldr	r3, [r3, #8]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d110      	bne.n	800ddee <HAL_SPI_Receive_DMA+0x4e>
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	685b      	ldr	r3, [r3, #4]
 800ddd0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ddd4:	d10b      	bne.n	800ddee <HAL_SPI_Receive_DMA+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	2204      	movs	r2, #4
 800ddda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800ddde:	88fb      	ldrh	r3, [r7, #6]
 800dde0:	68ba      	ldr	r2, [r7, #8]
 800dde2:	68b9      	ldr	r1, [r7, #8]
 800dde4:	68f8      	ldr	r0, [r7, #12]
 800dde6:	f000 f89f 	bl	800df28 <HAL_SPI_TransmitReceive_DMA>
 800ddea:	4603      	mov	r3, r0
 800ddec:	e092      	b.n	800df14 <HAL_SPI_Receive_DMA+0x174>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ddf4:	2b01      	cmp	r3, #1
 800ddf6:	d101      	bne.n	800ddfc <HAL_SPI_Receive_DMA+0x5c>
 800ddf8:	2302      	movs	r3, #2
 800ddfa:	e08b      	b.n	800df14 <HAL_SPI_Receive_DMA+0x174>
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	2201      	movs	r2, #1
 800de00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 800de04:	68bb      	ldr	r3, [r7, #8]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d002      	beq.n	800de10 <HAL_SPI_Receive_DMA+0x70>
 800de0a:	88fb      	ldrh	r3, [r7, #6]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d102      	bne.n	800de16 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 800de10:	2301      	movs	r3, #1
 800de12:	75fb      	strb	r3, [r7, #23]
    goto error;
 800de14:	e079      	b.n	800df0a <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	2204      	movs	r2, #4
 800de1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	2200      	movs	r2, #0
 800de22:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	68ba      	ldr	r2, [r7, #8]
 800de28:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	88fa      	ldrh	r2, [r7, #6]
 800de2e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	88fa      	ldrh	r2, [r7, #6]
 800de34:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	2200      	movs	r2, #0
 800de3a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	2200      	movs	r2, #0
 800de40:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	2200      	movs	r2, #0
 800de46:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	2200      	movs	r2, #0
 800de4c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	689b      	ldr	r3, [r3, #8]
 800de52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800de56:	d10f      	bne.n	800de78 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	681a      	ldr	r2, [r3, #0]
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800de66:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	681a      	ldr	r2, [r3, #0]
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800de76:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800de7c:	4a27      	ldr	r2, [pc, #156]	; (800df1c <HAL_SPI_Receive_DMA+0x17c>)
 800de7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800de84:	4a26      	ldr	r2, [pc, #152]	; (800df20 <HAL_SPI_Receive_DMA+0x180>)
 800de86:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800de8c:	4a25      	ldr	r2, [pc, #148]	; (800df24 <HAL_SPI_Receive_DMA+0x184>)
 800de8e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800de94:	2200      	movs	r2, #0
 800de96:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	330c      	adds	r3, #12
 800dea2:	4619      	mov	r1, r3
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dea8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800deae:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800deb0:	f7f5 f927 	bl	8003102 <HAL_DMA_Start_IT>
 800deb4:	4603      	mov	r3, r0
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d008      	beq.n	800decc <HAL_SPI_Receive_DMA+0x12c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800debe:	f043 0210 	orr.w	r2, r3, #16
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800dec6:	2301      	movs	r3, #1
 800dec8:	75fb      	strb	r3, [r7, #23]

    goto error;
 800deca:	e01e      	b.n	800df0a <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ded6:	2b40      	cmp	r3, #64	; 0x40
 800ded8:	d007      	beq.n	800deea <HAL_SPI_Receive_DMA+0x14a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	681a      	ldr	r2, [r3, #0]
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dee8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	685a      	ldr	r2, [r3, #4]
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	f042 0220 	orr.w	r2, r2, #32
 800def8:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	685a      	ldr	r2, [r3, #4]
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	f042 0201 	orr.w	r2, r2, #1
 800df08:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	2200      	movs	r2, #0
 800df0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800df12:	7dfb      	ldrb	r3, [r7, #23]
}
 800df14:	4618      	mov	r0, r3
 800df16:	3718      	adds	r7, #24
 800df18:	46bd      	mov	sp, r7
 800df1a:	bd80      	pop	{r7, pc}
 800df1c:	0800eaa3 	.word	0x0800eaa3
 800df20:	0800e953 	.word	0x0800e953
 800df24:	0800eadb 	.word	0x0800eadb

0800df28 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b086      	sub	sp, #24
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	60f8      	str	r0, [r7, #12]
 800df30:	60b9      	str	r1, [r7, #8]
 800df32:	607a      	str	r2, [r7, #4]
 800df34:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800df36:	2300      	movs	r3, #0
 800df38:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800df40:	2b01      	cmp	r3, #1
 800df42:	d101      	bne.n	800df48 <HAL_SPI_TransmitReceive_DMA+0x20>
 800df44:	2302      	movs	r3, #2
 800df46:	e0db      	b.n	800e100 <HAL_SPI_TransmitReceive_DMA+0x1d8>
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	2201      	movs	r2, #1
 800df4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800df56:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	685b      	ldr	r3, [r3, #4]
 800df5c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800df5e:	7dbb      	ldrb	r3, [r7, #22]
 800df60:	2b01      	cmp	r3, #1
 800df62:	d00d      	beq.n	800df80 <HAL_SPI_TransmitReceive_DMA+0x58>
 800df64:	693b      	ldr	r3, [r7, #16]
 800df66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800df6a:	d106      	bne.n	800df7a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	689b      	ldr	r3, [r3, #8]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d102      	bne.n	800df7a <HAL_SPI_TransmitReceive_DMA+0x52>
 800df74:	7dbb      	ldrb	r3, [r7, #22]
 800df76:	2b04      	cmp	r3, #4
 800df78:	d002      	beq.n	800df80 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800df7a:	2302      	movs	r3, #2
 800df7c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800df7e:	e0ba      	b.n	800e0f6 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800df80:	68bb      	ldr	r3, [r7, #8]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d005      	beq.n	800df92 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d002      	beq.n	800df92 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800df8c:	887b      	ldrh	r3, [r7, #2]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d102      	bne.n	800df98 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800df92:	2301      	movs	r3, #1
 800df94:	75fb      	strb	r3, [r7, #23]
    goto error;
 800df96:	e0ae      	b.n	800e0f6 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800df9e:	b2db      	uxtb	r3, r3
 800dfa0:	2b04      	cmp	r3, #4
 800dfa2:	d003      	beq.n	800dfac <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	2205      	movs	r2, #5
 800dfa8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	2200      	movs	r2, #0
 800dfb0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	68ba      	ldr	r2, [r7, #8]
 800dfb6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	887a      	ldrh	r2, [r7, #2]
 800dfbc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	887a      	ldrh	r2, [r7, #2]
 800dfc2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	687a      	ldr	r2, [r7, #4]
 800dfc8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	887a      	ldrh	r2, [r7, #2]
 800dfce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	887a      	ldrh	r2, [r7, #2]
 800dfd4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	2200      	movs	r2, #0
 800dfda:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	2200      	movs	r2, #0
 800dfe0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800dfe8:	b2db      	uxtb	r3, r3
 800dfea:	2b04      	cmp	r3, #4
 800dfec:	d108      	bne.n	800e000 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dff2:	4a45      	ldr	r2, [pc, #276]	; (800e108 <HAL_SPI_TransmitReceive_DMA+0x1e0>)
 800dff4:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dffa:	4a44      	ldr	r2, [pc, #272]	; (800e10c <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 800dffc:	629a      	str	r2, [r3, #40]	; 0x28
 800dffe:	e007      	b.n	800e010 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e004:	4a42      	ldr	r2, [pc, #264]	; (800e110 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 800e006:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e00c:	4a41      	ldr	r2, [pc, #260]	; (800e114 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 800e00e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e014:	4a40      	ldr	r2, [pc, #256]	; (800e118 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 800e016:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e01c:	2200      	movs	r2, #0
 800e01e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	330c      	adds	r3, #12
 800e02a:	4619      	mov	r1, r3
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e030:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e036:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800e038:	f7f5 f863 	bl	8003102 <HAL_DMA_Start_IT>
 800e03c:	4603      	mov	r3, r0
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d008      	beq.n	800e054 <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e046:	f043 0210 	orr.w	r2, r3, #16
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800e04e:	2301      	movs	r3, #1
 800e050:	75fb      	strb	r3, [r7, #23]

    goto error;
 800e052:	e050      	b.n	800e0f6 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	685a      	ldr	r2, [r3, #4]
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	f042 0201 	orr.w	r2, r2, #1
 800e062:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e068:	2200      	movs	r2, #0
 800e06a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e070:	2200      	movs	r2, #0
 800e072:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e078:	2200      	movs	r2, #0
 800e07a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e080:	2200      	movs	r2, #0
 800e082:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e08c:	4619      	mov	r1, r3
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	330c      	adds	r3, #12
 800e094:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e09a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800e09c:	f7f5 f831 	bl	8003102 <HAL_DMA_Start_IT>
 800e0a0:	4603      	mov	r3, r0
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d008      	beq.n	800e0b8 <HAL_SPI_TransmitReceive_DMA+0x190>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0aa:	f043 0210 	orr.w	r2, r3, #16
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800e0b2:	2301      	movs	r3, #1
 800e0b4:	75fb      	strb	r3, [r7, #23]

    goto error;
 800e0b6:	e01e      	b.n	800e0f6 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0c2:	2b40      	cmp	r3, #64	; 0x40
 800e0c4:	d007      	beq.n	800e0d6 <HAL_SPI_TransmitReceive_DMA+0x1ae>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	681a      	ldr	r2, [r3, #0]
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e0d4:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	685a      	ldr	r2, [r3, #4]
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	f042 0220 	orr.w	r2, r2, #32
 800e0e4:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	685a      	ldr	r2, [r3, #4]
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	f042 0202 	orr.w	r2, r2, #2
 800e0f4:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	2200      	movs	r2, #0
 800e0fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e0fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800e100:	4618      	mov	r0, r3
 800e102:	3718      	adds	r7, #24
 800e104:	46bd      	mov	sp, r7
 800e106:	bd80      	pop	{r7, pc}
 800e108:	0800eaa3 	.word	0x0800eaa3
 800e10c:	0800e953 	.word	0x0800e953
 800e110:	0800eabf 	.word	0x0800eabf
 800e114:	0800e9f9 	.word	0x0800e9f9
 800e118:	0800eadb 	.word	0x0800eadb

0800e11c <HAL_SPI_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort(SPI_HandleTypeDef *hspi)
{
 800e11c:	b580      	push	{r7, lr}
 800e11e:	b088      	sub	sp, #32
 800e120:	af00      	add	r7, sp, #0
 800e122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 800e124:	2300      	movs	r3, #0
 800e126:	77fb      	strb	r3, [r7, #31]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800e128:	4b6e      	ldr	r3, [pc, #440]	; (800e2e4 <HAL_SPI_Abort+0x1c8>)
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	4a6e      	ldr	r2, [pc, #440]	; (800e2e8 <HAL_SPI_Abort+0x1cc>)
 800e12e:	fba2 2303 	umull	r2, r3, r2, r3
 800e132:	0a5b      	lsrs	r3, r3, #9
 800e134:	2264      	movs	r2, #100	; 0x64
 800e136:	fb02 f303 	mul.w	r3, r2, r3
 800e13a:	617b      	str	r3, [r7, #20]
  count = resetcount;
 800e13c:	697b      	ldr	r3, [r7, #20]
 800e13e:	61bb      	str	r3, [r7, #24]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	685a      	ldr	r2, [r3, #4]
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	f022 0220 	bic.w	r2, r2, #32
 800e14e:	605a      	str	r2, [r3, #4]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	685b      	ldr	r3, [r3, #4]
 800e156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e15a:	2b80      	cmp	r3, #128	; 0x80
 800e15c:	d117      	bne.n	800e18e <HAL_SPI_Abort+0x72>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	4a62      	ldr	r2, [pc, #392]	; (800e2ec <HAL_SPI_Abort+0x1d0>)
 800e162:	645a      	str	r2, [r3, #68]	; 0x44
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 800e164:	69bb      	ldr	r3, [r7, #24]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d106      	bne.n	800e178 <HAL_SPI_Abort+0x5c>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e16e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800e176:	e008      	b.n	800e18a <HAL_SPI_Abort+0x6e>
      }
      count--;
 800e178:	69bb      	ldr	r3, [r7, #24]
 800e17a:	3b01      	subs	r3, #1
 800e17c:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e184:	b2db      	uxtb	r3, r3
 800e186:	2b07      	cmp	r3, #7
 800e188:	d1ec      	bne.n	800e164 <HAL_SPI_Abort+0x48>
    /* Reset Timeout Counter */
    count = resetcount;
 800e18a:	697b      	ldr	r3, [r7, #20]
 800e18c:	61bb      	str	r3, [r7, #24]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	685b      	ldr	r3, [r3, #4]
 800e194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e198:	2b40      	cmp	r3, #64	; 0x40
 800e19a:	d117      	bne.n	800e1cc <HAL_SPI_Abort+0xb0>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	4a54      	ldr	r2, [pc, #336]	; (800e2f0 <HAL_SPI_Abort+0x1d4>)
 800e1a0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 800e1a2:	69bb      	ldr	r3, [r7, #24]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d106      	bne.n	800e1b6 <HAL_SPI_Abort+0x9a>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1ac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800e1b4:	e008      	b.n	800e1c8 <HAL_SPI_Abort+0xac>
      }
      count--;
 800e1b6:	69bb      	ldr	r3, [r7, #24]
 800e1b8:	3b01      	subs	r3, #1
 800e1ba:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e1c2:	b2db      	uxtb	r3, r3
 800e1c4:	2b07      	cmp	r3, #7
 800e1c6:	d1ec      	bne.n	800e1a2 <HAL_SPI_Abort+0x86>
    /* Reset Timeout Counter */
    count = resetcount;
 800e1c8:	697b      	ldr	r3, [r7, #20]
 800e1ca:	61bb      	str	r3, [r7, #24]
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	685b      	ldr	r3, [r3, #4]
 800e1d2:	f003 0302 	and.w	r3, r3, #2
 800e1d6:	2b02      	cmp	r3, #2
 800e1d8:	d12e      	bne.n	800e238 <HAL_SPI_Abort+0x11c>
  {
    /* Abort the SPI DMA Tx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmatx != NULL)
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d02a      	beq.n	800e238 <HAL_SPI_Abort+0x11c>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmatx->XferAbortCallback = NULL;
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	f7f4 ffe7 	bl	80031c2 <HAL_DMA_Abort>
 800e1f4:	4603      	mov	r3, r0
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d002      	beq.n	800e200 <HAL_SPI_Abort+0xe4>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	2240      	movs	r2, #64	; 0x40
 800e1fe:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Disable Tx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN));
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	685a      	ldr	r2, [r3, #4]
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	f022 0202 	bic.w	r2, r2, #2
 800e20e:	605a      	str	r2, [r3, #4]

      /* Wait until TXE flag is set */
      do
      {
        if (count == 0U)
 800e210:	69bb      	ldr	r3, [r7, #24]
 800e212:	2b00      	cmp	r3, #0
 800e214:	d106      	bne.n	800e224 <HAL_SPI_Abort+0x108>
        {
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e21a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	655a      	str	r2, [r3, #84]	; 0x54
          break;
 800e222:	e009      	b.n	800e238 <HAL_SPI_Abort+0x11c>
        }
        count--;
 800e224:	69bb      	ldr	r3, [r7, #24]
 800e226:	3b01      	subs	r3, #1
 800e228:	61bb      	str	r3, [r7, #24]
      } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	689b      	ldr	r3, [r3, #8]
 800e230:	f003 0302 	and.w	r3, r3, #2
 800e234:	2b00      	cmp	r3, #0
 800e236:	d0eb      	beq.n	800e210 <HAL_SPI_Abort+0xf4>
    }
  }

  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	685b      	ldr	r3, [r3, #4]
 800e23e:	f003 0301 	and.w	r3, r3, #1
 800e242:	2b01      	cmp	r3, #1
 800e244:	d122      	bne.n	800e28c <HAL_SPI_Abort+0x170>
  {
    /* Abort the SPI DMA Rx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmarx != NULL)
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d01e      	beq.n	800e28c <HAL_SPI_Abort+0x170>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmarx->XferAbortCallback = NULL;
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e252:	2200      	movs	r2, #0
 800e254:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e25a:	4618      	mov	r0, r3
 800e25c:	f7f4 ffb1 	bl	80031c2 <HAL_DMA_Abort>
 800e260:	4603      	mov	r3, r0
 800e262:	2b00      	cmp	r3, #0
 800e264:	d002      	beq.n	800e26c <HAL_SPI_Abort+0x150>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	2240      	movs	r2, #64	; 0x40
 800e26a:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Disable peripheral */
      __HAL_SPI_DISABLE(hspi);
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	681a      	ldr	r2, [r3, #0]
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e27a:	601a      	str	r2, [r3, #0]

      /* Disable Rx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXDMAEN));
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	685a      	ldr	r2, [r3, #4]
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	f022 0201 	bic.w	r2, r2, #1
 800e28a:	605a      	str	r2, [r3, #4]
    }
  }
  /* Reset Tx and Rx transfer counters */
  hspi->RxXferCount = 0U;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	2200      	movs	r2, #0
 800e290:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	2200      	movs	r2, #0
 800e296:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check error during Abort procedure */
  if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e29c:	2b40      	cmp	r3, #64	; 0x40
 800e29e:	d102      	bne.n	800e2a6 <HAL_SPI_Abort+0x18a>
  {
    /* return HAL_Error in case of error during Abort procedure */
    errorcode = HAL_ERROR;
 800e2a0:	2301      	movs	r3, #1
 800e2a2:	77fb      	strb	r3, [r7, #31]
 800e2a4:	e002      	b.n	800e2ac <HAL_SPI_Abort+0x190>
  }
  else
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	613b      	str	r3, [r7, #16]
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	68db      	ldr	r3, [r3, #12]
 800e2b6:	613b      	str	r3, [r7, #16]
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	689b      	ldr	r3, [r3, #8]
 800e2be:	613b      	str	r3, [r7, #16]
 800e2c0:	693b      	ldr	r3, [r7, #16]
#if defined(SPI_CR2_FRF)
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	60fb      	str	r3, [r7, #12]
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	689b      	ldr	r3, [r3, #8]
 800e2cc:	60fb      	str	r3, [r7, #12]
 800e2ce:	68fb      	ldr	r3, [r7, #12]
#endif /* SPI_CR2_FRF */

  /* Restore hspi->state to ready */
  hspi->State = HAL_SPI_STATE_READY;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	2201      	movs	r2, #1
 800e2d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return errorcode;
 800e2d8:	7ffb      	ldrb	r3, [r7, #31]
}
 800e2da:	4618      	mov	r0, r3
 800e2dc:	3720      	adds	r7, #32
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	bd80      	pop	{r7, pc}
 800e2e2:	bf00      	nop
 800e2e4:	2000006c 	.word	0x2000006c
 800e2e8:	057619f1 	.word	0x057619f1
 800e2ec:	0800f48d 	.word	0x0800f48d
 800e2f0:	0800f401 	.word	0x0800f401

0800e2f4 <HAL_SPI_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort_IT(SPI_HandleTypeDef *hspi)
{
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b088      	sub	sp, #32
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt ;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	77fb      	strb	r3, [r7, #31]
  abortcplt = 1U;
 800e300:	2301      	movs	r3, #1
 800e302:	61bb      	str	r3, [r7, #24]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800e304:	4b72      	ldr	r3, [pc, #456]	; (800e4d0 <HAL_SPI_Abort_IT+0x1dc>)
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	4a72      	ldr	r2, [pc, #456]	; (800e4d4 <HAL_SPI_Abort_IT+0x1e0>)
 800e30a:	fba2 2303 	umull	r2, r3, r2, r3
 800e30e:	0a5b      	lsrs	r3, r3, #9
 800e310:	2264      	movs	r2, #100	; 0x64
 800e312:	fb02 f303 	mul.w	r3, r2, r3
 800e316:	613b      	str	r3, [r7, #16]
  count = resetcount;
 800e318:	693b      	ldr	r3, [r7, #16]
 800e31a:	617b      	str	r3, [r7, #20]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	685a      	ldr	r2, [r3, #4]
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	f022 0220 	bic.w	r2, r2, #32
 800e32a:	605a      	str	r2, [r3, #4]

  /* Change Rx and Tx Irq Handler to Disable TXEIE, RXNEIE and ERRIE interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	685b      	ldr	r3, [r3, #4]
 800e332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e336:	2b80      	cmp	r3, #128	; 0x80
 800e338:	d117      	bne.n	800e36a <HAL_SPI_Abort_IT+0x76>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	4a66      	ldr	r2, [pc, #408]	; (800e4d8 <HAL_SPI_Abort_IT+0x1e4>)
 800e33e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 800e340:	697b      	ldr	r3, [r7, #20]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d106      	bne.n	800e354 <HAL_SPI_Abort_IT+0x60>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e34a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800e352:	e008      	b.n	800e366 <HAL_SPI_Abort_IT+0x72>
      }
      count--;
 800e354:	697b      	ldr	r3, [r7, #20]
 800e356:	3b01      	subs	r3, #1
 800e358:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e360:	b2db      	uxtb	r3, r3
 800e362:	2b07      	cmp	r3, #7
 800e364:	d1ec      	bne.n	800e340 <HAL_SPI_Abort_IT+0x4c>
    /* Reset Timeout Counter */
    count = resetcount;
 800e366:	693b      	ldr	r3, [r7, #16]
 800e368:	617b      	str	r3, [r7, #20]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	685b      	ldr	r3, [r3, #4]
 800e370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e374:	2b40      	cmp	r3, #64	; 0x40
 800e376:	d117      	bne.n	800e3a8 <HAL_SPI_Abort_IT+0xb4>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	4a58      	ldr	r2, [pc, #352]	; (800e4dc <HAL_SPI_Abort_IT+0x1e8>)
 800e37c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 800e37e:	697b      	ldr	r3, [r7, #20]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d106      	bne.n	800e392 <HAL_SPI_Abort_IT+0x9e>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e388:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800e390:	e008      	b.n	800e3a4 <HAL_SPI_Abort_IT+0xb0>
      }
      count--;
 800e392:	697b      	ldr	r3, [r7, #20]
 800e394:	3b01      	subs	r3, #1
 800e396:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e39e:	b2db      	uxtb	r3, r3
 800e3a0:	2b07      	cmp	r3, #7
 800e3a2:	d1ec      	bne.n	800e37e <HAL_SPI_Abort_IT+0x8a>
    /* Reset Timeout Counter */
    count = resetcount;
 800e3a4:	693b      	ldr	r3, [r7, #16]
 800e3a6:	617b      	str	r3, [r7, #20]
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to SPI Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (hspi->hdmatx != NULL)
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d00f      	beq.n	800e3d0 <HAL_SPI_Abort_IT+0xdc>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	685b      	ldr	r3, [r3, #4]
 800e3b6:	f003 0302 	and.w	r3, r3, #2
 800e3ba:	2b02      	cmp	r3, #2
 800e3bc:	d104      	bne.n	800e3c8 <HAL_SPI_Abort_IT+0xd4>
    {
      hspi->hdmatx->XferAbortCallback = SPI_DMATxAbortCallback;
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e3c2:	4a47      	ldr	r2, [pc, #284]	; (800e4e0 <HAL_SPI_Abort_IT+0x1ec>)
 800e3c4:	635a      	str	r2, [r3, #52]	; 0x34
 800e3c6:	e003      	b.n	800e3d0 <HAL_SPI_Abort_IT+0xdc>
    }
    else
    {
      hspi->hdmatx->XferAbortCallback = NULL;
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	635a      	str	r2, [r3, #52]	; 0x34
    }
  }
  /* DMA Rx Handle is valid */
  if (hspi->hdmarx != NULL)
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d00f      	beq.n	800e3f8 <HAL_SPI_Abort_IT+0x104>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	685b      	ldr	r3, [r3, #4]
 800e3de:	f003 0301 	and.w	r3, r3, #1
 800e3e2:	2b01      	cmp	r3, #1
 800e3e4:	d104      	bne.n	800e3f0 <HAL_SPI_Abort_IT+0xfc>
    {
      hspi->hdmarx->XferAbortCallback = SPI_DMARxAbortCallback;
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e3ea:	4a3e      	ldr	r2, [pc, #248]	; (800e4e4 <HAL_SPI_Abort_IT+0x1f0>)
 800e3ec:	635a      	str	r2, [r3, #52]	; 0x34
 800e3ee:	e003      	b.n	800e3f8 <HAL_SPI_Abort_IT+0x104>
    }
    else
    {
      hspi->hdmarx->XferAbortCallback = NULL;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e3f4:	2200      	movs	r2, #0
 800e3f6:	635a      	str	r2, [r3, #52]	; 0x34
    }
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	685b      	ldr	r3, [r3, #4]
 800e3fe:	f003 0302 	and.w	r3, r3, #2
 800e402:	2b02      	cmp	r3, #2
 800e404:	d115      	bne.n	800e432 <HAL_SPI_Abort_IT+0x13e>
  {
    /* Abort the SPI DMA Tx Stream/Channel */
    if (hspi->hdmatx != NULL)
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d011      	beq.n	800e432 <HAL_SPI_Abort_IT+0x13e>
    {
      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmatx) != HAL_OK)
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e412:	4618      	mov	r0, r3
 800e414:	f7f4 ff12 	bl	800323c <HAL_DMA_Abort_IT>
 800e418:	4603      	mov	r3, r0
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d007      	beq.n	800e42e <HAL_SPI_Abort_IT+0x13a>
      {
        hspi->hdmatx->XferAbortCallback = NULL;
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e422:	2200      	movs	r2, #0
 800e424:	635a      	str	r2, [r3, #52]	; 0x34
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	2240      	movs	r2, #64	; 0x40
 800e42a:	655a      	str	r2, [r3, #84]	; 0x54
 800e42c:	e001      	b.n	800e432 <HAL_SPI_Abort_IT+0x13e>
      }
      else
      {
        abortcplt = 0U;
 800e42e:	2300      	movs	r3, #0
 800e430:	61bb      	str	r3, [r7, #24]
      }
    }
  }
  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	685b      	ldr	r3, [r3, #4]
 800e438:	f003 0301 	and.w	r3, r3, #1
 800e43c:	2b01      	cmp	r3, #1
 800e43e:	d115      	bne.n	800e46c <HAL_SPI_Abort_IT+0x178>
  {
    /* Abort the SPI DMA Rx Stream/Channel */
    if (hspi->hdmarx != NULL)
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e444:	2b00      	cmp	r3, #0
 800e446:	d011      	beq.n	800e46c <HAL_SPI_Abort_IT+0x178>
    {
      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmarx) !=  HAL_OK)
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e44c:	4618      	mov	r0, r3
 800e44e:	f7f4 fef5 	bl	800323c <HAL_DMA_Abort_IT>
 800e452:	4603      	mov	r3, r0
 800e454:	2b00      	cmp	r3, #0
 800e456:	d007      	beq.n	800e468 <HAL_SPI_Abort_IT+0x174>
      {
        hspi->hdmarx->XferAbortCallback = NULL;
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e45c:	2200      	movs	r2, #0
 800e45e:	635a      	str	r2, [r3, #52]	; 0x34
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	2240      	movs	r2, #64	; 0x40
 800e464:	655a      	str	r2, [r3, #84]	; 0x54
 800e466:	e001      	b.n	800e46c <HAL_SPI_Abort_IT+0x178>
      }
      else
      {
        abortcplt = 0U;
 800e468:	2300      	movs	r3, #0
 800e46a:	61bb      	str	r3, [r7, #24]
      }
    }
  }

  if (abortcplt == 1U)
 800e46c:	69bb      	ldr	r3, [r7, #24]
 800e46e:	2b01      	cmp	r3, #1
 800e470:	d128      	bne.n	800e4c4 <HAL_SPI_Abort_IT+0x1d0>
  {
    /* Reset Tx and Rx transfer counters */
    hspi->RxXferCount = 0U;
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	2200      	movs	r2, #0
 800e476:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->TxXferCount = 0U;
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	2200      	movs	r2, #0
 800e47c:	86da      	strh	r2, [r3, #54]	; 0x36

    /* Check error during Abort procedure */
    if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e482:	2b40      	cmp	r3, #64	; 0x40
 800e484:	d102      	bne.n	800e48c <HAL_SPI_Abort_IT+0x198>
    {
      /* return HAL_Error in case of error during Abort procedure */
      errorcode = HAL_ERROR;
 800e486:	2301      	movs	r3, #1
 800e488:	77fb      	strb	r3, [r7, #31]
 800e48a:	e002      	b.n	800e492 <HAL_SPI_Abort_IT+0x19e>
    }
    else
    {
      /* Reset errorCode */
      hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	2200      	movs	r2, #0
 800e490:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear the Error flags in the SR register */
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e492:	2300      	movs	r3, #0
 800e494:	60fb      	str	r3, [r7, #12]
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	68db      	ldr	r3, [r3, #12]
 800e49c:	60fb      	str	r3, [r7, #12]
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	689b      	ldr	r3, [r3, #8]
 800e4a4:	60fb      	str	r3, [r7, #12]
 800e4a6:	68fb      	ldr	r3, [r7, #12]
#if defined(SPI_CR2_FRF)
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	60bb      	str	r3, [r7, #8]
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	689b      	ldr	r3, [r3, #8]
 800e4b2:	60bb      	str	r3, [r7, #8]
 800e4b4:	68bb      	ldr	r3, [r7, #8]
#endif /* SPI_CR2_FRF */

    /* Restore hspi->State to Ready */
    hspi->State = HAL_SPI_STATE_READY;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	2201      	movs	r2, #1
 800e4ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* As no DMA to be aborted, call directly user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->AbortCpltCallback(hspi);
#else
    HAL_SPI_AbortCpltCallback(hspi);
 800e4be:	6878      	ldr	r0, [r7, #4]
 800e4c0:	f000 f9d3 	bl	800e86a <HAL_SPI_AbortCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  return errorcode;
 800e4c4:	7ffb      	ldrb	r3, [r7, #31]
}
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	3720      	adds	r7, #32
 800e4ca:	46bd      	mov	sp, r7
 800e4cc:	bd80      	pop	{r7, pc}
 800e4ce:	bf00      	nop
 800e4d0:	2000006c 	.word	0x2000006c
 800e4d4:	057619f1 	.word	0x057619f1
 800e4d8:	0800f48d 	.word	0x0800f48d
 800e4dc:	0800f401 	.word	0x0800f401
 800e4e0:	0800eb45 	.word	0x0800eb45
 800e4e4:	0800ec19 	.word	0x0800ec19

0800e4e8 <HAL_SPI_DMAPause>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAPause(SPI_HandleTypeDef *hspi)
{
 800e4e8:	b480      	push	{r7}
 800e4ea:	b083      	sub	sp, #12
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hspi);
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e4f6:	2b01      	cmp	r3, #1
 800e4f8:	d101      	bne.n	800e4fe <HAL_SPI_DMAPause+0x16>
 800e4fa:	2302      	movs	r3, #2
 800e4fc:	e010      	b.n	800e520 <HAL_SPI_DMAPause+0x38>
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	2201      	movs	r2, #1
 800e502:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	685a      	ldr	r2, [r3, #4]
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	f022 0203 	bic.w	r2, r2, #3
 800e514:	605a      	str	r2, [r3, #4]

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	2200      	movs	r2, #0
 800e51a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800e51e:	2300      	movs	r3, #0
}
 800e520:	4618      	mov	r0, r3
 800e522:	370c      	adds	r7, #12
 800e524:	46bd      	mov	sp, r7
 800e526:	bc80      	pop	{r7}
 800e528:	4770      	bx	lr

0800e52a <HAL_SPI_DMAResume>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAResume(SPI_HandleTypeDef *hspi)
{
 800e52a:	b480      	push	{r7}
 800e52c:	b083      	sub	sp, #12
 800e52e:	af00      	add	r7, sp, #0
 800e530:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hspi);
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e538:	2b01      	cmp	r3, #1
 800e53a:	d101      	bne.n	800e540 <HAL_SPI_DMAResume+0x16>
 800e53c:	2302      	movs	r3, #2
 800e53e:	e010      	b.n	800e562 <HAL_SPI_DMAResume+0x38>
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	2201      	movs	r2, #1
 800e544:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Enable the SPI DMA Tx & Rx requests */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	685a      	ldr	r2, [r3, #4]
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	f042 0203 	orr.w	r2, r2, #3
 800e556:	605a      	str	r2, [r3, #4]

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	2200      	movs	r2, #0
 800e55c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800e560:	2300      	movs	r3, #0
}
 800e562:	4618      	mov	r0, r3
 800e564:	370c      	adds	r7, #12
 800e566:	46bd      	mov	sp, r7
 800e568:	bc80      	pop	{r7}
 800e56a:	4770      	bx	lr

0800e56c <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b084      	sub	sp, #16
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e574:	2300      	movs	r3, #0
 800e576:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d00f      	beq.n	800e5a0 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e584:	4618      	mov	r0, r3
 800e586:	f7f4 fe1c 	bl	80031c2 <HAL_DMA_Abort>
 800e58a:	4603      	mov	r3, r0
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d007      	beq.n	800e5a0 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e594:	f043 0210 	orr.w	r2, r3, #16
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 800e59c:	2301      	movs	r3, #1
 800e59e:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d00f      	beq.n	800e5c8 <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	f7f4 fe08 	bl	80031c2 <HAL_DMA_Abort>
 800e5b2:	4603      	mov	r3, r0
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d007      	beq.n	800e5c8 <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e5bc:	f043 0210 	orr.w	r2, r3, #16
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 800e5c4:	2301      	movs	r3, #1
 800e5c6:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	685a      	ldr	r2, [r3, #4]
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	f022 0203 	bic.w	r2, r2, #3
 800e5d6:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	2201      	movs	r2, #1
 800e5dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  return errorcode;
 800e5e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	3710      	adds	r7, #16
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	bd80      	pop	{r7, pc}
	...

0800e5ec <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b088      	sub	sp, #32
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	685b      	ldr	r3, [r3, #4]
 800e5fa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	689b      	ldr	r3, [r3, #8]
 800e602:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800e604:	69bb      	ldr	r3, [r7, #24]
 800e606:	099b      	lsrs	r3, r3, #6
 800e608:	f003 0301 	and.w	r3, r3, #1
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d10f      	bne.n	800e630 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800e610:	69bb      	ldr	r3, [r7, #24]
 800e612:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800e616:	2b00      	cmp	r3, #0
 800e618:	d00a      	beq.n	800e630 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800e61a:	69fb      	ldr	r3, [r7, #28]
 800e61c:	099b      	lsrs	r3, r3, #6
 800e61e:	f003 0301 	and.w	r3, r3, #1
 800e622:	2b00      	cmp	r3, #0
 800e624:	d004      	beq.n	800e630 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e62a:	6878      	ldr	r0, [r7, #4]
 800e62c:	4798      	blx	r3
    return;
 800e62e:	e0d7      	b.n	800e7e0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800e630:	69bb      	ldr	r3, [r7, #24]
 800e632:	085b      	lsrs	r3, r3, #1
 800e634:	f003 0301 	and.w	r3, r3, #1
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d00a      	beq.n	800e652 <HAL_SPI_IRQHandler+0x66>
 800e63c:	69fb      	ldr	r3, [r7, #28]
 800e63e:	09db      	lsrs	r3, r3, #7
 800e640:	f003 0301 	and.w	r3, r3, #1
 800e644:	2b00      	cmp	r3, #0
 800e646:	d004      	beq.n	800e652 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e64c:	6878      	ldr	r0, [r7, #4]
 800e64e:	4798      	blx	r3
    return;
 800e650:	e0c6      	b.n	800e7e0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
#if defined(SPI_CR2_FRF)
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800e652:	69bb      	ldr	r3, [r7, #24]
 800e654:	095b      	lsrs	r3, r3, #5
 800e656:	f003 0301 	and.w	r3, r3, #1
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d10c      	bne.n	800e678 <HAL_SPI_IRQHandler+0x8c>
 800e65e:	69bb      	ldr	r3, [r7, #24]
 800e660:	099b      	lsrs	r3, r3, #6
 800e662:	f003 0301 	and.w	r3, r3, #1
 800e666:	2b00      	cmp	r3, #0
 800e668:	d106      	bne.n	800e678 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800e66a:	69bb      	ldr	r3, [r7, #24]
 800e66c:	0a1b      	lsrs	r3, r3, #8
 800e66e:	f003 0301 	and.w	r3, r3, #1
 800e672:	2b00      	cmp	r3, #0
 800e674:	f000 80b4 	beq.w	800e7e0 <HAL_SPI_IRQHandler+0x1f4>
 800e678:	69fb      	ldr	r3, [r7, #28]
 800e67a:	095b      	lsrs	r3, r3, #5
 800e67c:	f003 0301 	and.w	r3, r3, #1
 800e680:	2b00      	cmp	r3, #0
 800e682:	f000 80ad 	beq.w	800e7e0 <HAL_SPI_IRQHandler+0x1f4>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
#endif /* SPI_CR2_FRF */
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800e686:	69bb      	ldr	r3, [r7, #24]
 800e688:	099b      	lsrs	r3, r3, #6
 800e68a:	f003 0301 	and.w	r3, r3, #1
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d023      	beq.n	800e6da <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e698:	b2db      	uxtb	r3, r3
 800e69a:	2b03      	cmp	r3, #3
 800e69c:	d011      	beq.n	800e6c2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e6a2:	f043 0204 	orr.w	r2, r3, #4
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	617b      	str	r3, [r7, #20]
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	68db      	ldr	r3, [r3, #12]
 800e6b4:	617b      	str	r3, [r7, #20]
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	689b      	ldr	r3, [r3, #8]
 800e6bc:	617b      	str	r3, [r7, #20]
 800e6be:	697b      	ldr	r3, [r7, #20]
 800e6c0:	e00b      	b.n	800e6da <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	613b      	str	r3, [r7, #16]
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	68db      	ldr	r3, [r3, #12]
 800e6cc:	613b      	str	r3, [r7, #16]
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	689b      	ldr	r3, [r3, #8]
 800e6d4:	613b      	str	r3, [r7, #16]
 800e6d6:	693b      	ldr	r3, [r7, #16]
        return;
 800e6d8:	e082      	b.n	800e7e0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800e6da:	69bb      	ldr	r3, [r7, #24]
 800e6dc:	095b      	lsrs	r3, r3, #5
 800e6de:	f003 0301 	and.w	r3, r3, #1
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d014      	beq.n	800e710 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e6ea:	f043 0201 	orr.w	r2, r3, #1
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	60fb      	str	r3, [r7, #12]
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	689b      	ldr	r3, [r3, #8]
 800e6fc:	60fb      	str	r3, [r7, #12]
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	681a      	ldr	r2, [r3, #0]
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e70c:	601a      	str	r2, [r3, #0]
 800e70e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
#if defined(SPI_CR2_FRF)
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800e710:	69bb      	ldr	r3, [r7, #24]
 800e712:	0a1b      	lsrs	r3, r3, #8
 800e714:	f003 0301 	and.w	r3, r3, #1
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d00c      	beq.n	800e736 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e720:	f043 0208 	orr.w	r2, r3, #8
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e728:	2300      	movs	r3, #0
 800e72a:	60bb      	str	r3, [r7, #8]
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	689b      	ldr	r3, [r3, #8]
 800e732:	60bb      	str	r3, [r7, #8]
 800e734:	68bb      	ldr	r3, [r7, #8]
    }
#endif /* SPI_CR2_FRF */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d04f      	beq.n	800e7de <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	685a      	ldr	r2, [r3, #4]
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e74c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	2201      	movs	r2, #1
 800e752:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800e756:	69fb      	ldr	r3, [r7, #28]
 800e758:	f003 0302 	and.w	r3, r3, #2
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d104      	bne.n	800e76a <HAL_SPI_IRQHandler+0x17e>
 800e760:	69fb      	ldr	r3, [r7, #28]
 800e762:	f003 0301 	and.w	r3, r3, #1
 800e766:	2b00      	cmp	r3, #0
 800e768:	d034      	beq.n	800e7d4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	685a      	ldr	r2, [r3, #4]
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	f022 0203 	bic.w	r2, r2, #3
 800e778:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d011      	beq.n	800e7a6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e786:	4a18      	ldr	r2, [pc, #96]	; (800e7e8 <HAL_SPI_IRQHandler+0x1fc>)
 800e788:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e78e:	4618      	mov	r0, r3
 800e790:	f7f4 fd54 	bl	800323c <HAL_DMA_Abort_IT>
 800e794:	4603      	mov	r3, r0
 800e796:	2b00      	cmp	r3, #0
 800e798:	d005      	beq.n	800e7a6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e79e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d016      	beq.n	800e7dc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e7b2:	4a0d      	ldr	r2, [pc, #52]	; (800e7e8 <HAL_SPI_IRQHandler+0x1fc>)
 800e7b4:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	f7f4 fd3e 	bl	800323c <HAL_DMA_Abort_IT>
 800e7c0:	4603      	mov	r3, r0
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d00a      	beq.n	800e7dc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e7ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800e7d2:	e003      	b.n	800e7dc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800e7d4:	6878      	ldr	r0, [r7, #4]
 800e7d6:	f000 f83f 	bl	800e858 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800e7da:	e000      	b.n	800e7de <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800e7dc:	bf00      	nop
    return;
 800e7de:	bf00      	nop
  }
}
 800e7e0:	3720      	adds	r7, #32
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	bd80      	pop	{r7, pc}
 800e7e6:	bf00      	nop
 800e7e8:	0800eb1b 	.word	0x0800eb1b

0800e7ec <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e7ec:	b480      	push	{r7}
 800e7ee:	b083      	sub	sp, #12
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800e7f4:	bf00      	nop
 800e7f6:	370c      	adds	r7, #12
 800e7f8:	46bd      	mov	sp, r7
 800e7fa:	bc80      	pop	{r7}
 800e7fc:	4770      	bx	lr

0800e7fe <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e7fe:	b480      	push	{r7}
 800e800:	b083      	sub	sp, #12
 800e802:	af00      	add	r7, sp, #0
 800e804:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800e806:	bf00      	nop
 800e808:	370c      	adds	r7, #12
 800e80a:	46bd      	mov	sp, r7
 800e80c:	bc80      	pop	{r7}
 800e80e:	4770      	bx	lr

0800e810 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e810:	b480      	push	{r7}
 800e812:	b083      	sub	sp, #12
 800e814:	af00      	add	r7, sp, #0
 800e816:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800e818:	bf00      	nop
 800e81a:	370c      	adds	r7, #12
 800e81c:	46bd      	mov	sp, r7
 800e81e:	bc80      	pop	{r7}
 800e820:	4770      	bx	lr

0800e822 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e822:	b480      	push	{r7}
 800e824:	b083      	sub	sp, #12
 800e826:	af00      	add	r7, sp, #0
 800e828:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800e82a:	bf00      	nop
 800e82c:	370c      	adds	r7, #12
 800e82e:	46bd      	mov	sp, r7
 800e830:	bc80      	pop	{r7}
 800e832:	4770      	bx	lr

0800e834 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e834:	b480      	push	{r7}
 800e836:	b083      	sub	sp, #12
 800e838:	af00      	add	r7, sp, #0
 800e83a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800e83c:	bf00      	nop
 800e83e:	370c      	adds	r7, #12
 800e840:	46bd      	mov	sp, r7
 800e842:	bc80      	pop	{r7}
 800e844:	4770      	bx	lr

0800e846 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e846:	b480      	push	{r7}
 800e848:	b083      	sub	sp, #12
 800e84a:	af00      	add	r7, sp, #0
 800e84c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800e84e:	bf00      	nop
 800e850:	370c      	adds	r7, #12
 800e852:	46bd      	mov	sp, r7
 800e854:	bc80      	pop	{r7}
 800e856:	4770      	bx	lr

0800e858 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800e858:	b480      	push	{r7}
 800e85a:	b083      	sub	sp, #12
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800e860:	bf00      	nop
 800e862:	370c      	adds	r7, #12
 800e864:	46bd      	mov	sp, r7
 800e866:	bc80      	pop	{r7}
 800e868:	4770      	bx	lr

0800e86a <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e86a:	b480      	push	{r7}
 800e86c:	b083      	sub	sp, #12
 800e86e:	af00      	add	r7, sp, #0
 800e870:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 800e872:	bf00      	nop
 800e874:	370c      	adds	r7, #12
 800e876:	46bd      	mov	sp, r7
 800e878:	bc80      	pop	{r7}
 800e87a:	4770      	bx	lr

0800e87c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800e87c:	b480      	push	{r7}
 800e87e:	b083      	sub	sp, #12
 800e880:	af00      	add	r7, sp, #0
 800e882:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e88a:	b2db      	uxtb	r3, r3
}
 800e88c:	4618      	mov	r0, r3
 800e88e:	370c      	adds	r7, #12
 800e890:	46bd      	mov	sp, r7
 800e892:	bc80      	pop	{r7}
 800e894:	4770      	bx	lr

0800e896 <HAL_SPI_GetError>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI error code in bitmap format
  */
uint32_t HAL_SPI_GetError(SPI_HandleTypeDef *hspi)
{
 800e896:	b480      	push	{r7}
 800e898:	b083      	sub	sp, #12
 800e89a:	af00      	add	r7, sp, #0
 800e89c:	6078      	str	r0, [r7, #4]
  /* Return SPI ErrorCode */
  return hspi->ErrorCode;
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	370c      	adds	r7, #12
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	bc80      	pop	{r7}
 800e8aa:	4770      	bx	lr

0800e8ac <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e8ac:	b580      	push	{r7, lr}
 800e8ae:	b086      	sub	sp, #24
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8b8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e8ba:	f7f3 fecb 	bl	8002654 <HAL_GetTick>
 800e8be:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	f003 0320 	and.w	r3, r3, #32
 800e8ca:	2b20      	cmp	r3, #32
 800e8cc:	d03b      	beq.n	800e946 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800e8ce:	697b      	ldr	r3, [r7, #20]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	685a      	ldr	r2, [r3, #4]
 800e8d4:	697b      	ldr	r3, [r7, #20]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	f022 0220 	bic.w	r2, r2, #32
 800e8dc:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800e8de:	697b      	ldr	r3, [r7, #20]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	685a      	ldr	r2, [r3, #4]
 800e8e4:	697b      	ldr	r3, [r7, #20]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	f022 0202 	bic.w	r2, r2, #2
 800e8ec:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800e8ee:	693a      	ldr	r2, [r7, #16]
 800e8f0:	2164      	movs	r1, #100	; 0x64
 800e8f2:	6978      	ldr	r0, [r7, #20]
 800e8f4:	f000 fc2c 	bl	800f150 <SPI_EndRxTxTransaction>
 800e8f8:	4603      	mov	r3, r0
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d005      	beq.n	800e90a <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e8fe:	697b      	ldr	r3, [r7, #20]
 800e900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e902:	f043 0220 	orr.w	r2, r3, #32
 800e906:	697b      	ldr	r3, [r7, #20]
 800e908:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e90a:	697b      	ldr	r3, [r7, #20]
 800e90c:	689b      	ldr	r3, [r3, #8]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d10a      	bne.n	800e928 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e912:	2300      	movs	r3, #0
 800e914:	60fb      	str	r3, [r7, #12]
 800e916:	697b      	ldr	r3, [r7, #20]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	68db      	ldr	r3, [r3, #12]
 800e91c:	60fb      	str	r3, [r7, #12]
 800e91e:	697b      	ldr	r3, [r7, #20]
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	689b      	ldr	r3, [r3, #8]
 800e924:	60fb      	str	r3, [r7, #12]
 800e926:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800e928:	697b      	ldr	r3, [r7, #20]
 800e92a:	2200      	movs	r2, #0
 800e92c:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800e92e:	697b      	ldr	r3, [r7, #20]
 800e930:	2201      	movs	r2, #1
 800e932:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e936:	697b      	ldr	r3, [r7, #20]
 800e938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d003      	beq.n	800e946 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800e93e:	6978      	ldr	r0, [r7, #20]
 800e940:	f7ff ff8a 	bl	800e858 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800e944:	e002      	b.n	800e94c <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800e946:	6978      	ldr	r0, [r7, #20]
 800e948:	f7ff ff50 	bl	800e7ec <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e94c:	3718      	adds	r7, #24
 800e94e:	46bd      	mov	sp, r7
 800e950:	bd80      	pop	{r7, pc}

0800e952 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e952:	b580      	push	{r7, lr}
 800e954:	b084      	sub	sp, #16
 800e956:	af00      	add	r7, sp, #0
 800e958:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e95e:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e960:	f7f3 fe78 	bl	8002654 <HAL_GetTick>
 800e964:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	f003 0320 	and.w	r3, r3, #32
 800e970:	2b20      	cmp	r3, #32
 800e972:	d03b      	beq.n	800e9ec <SPI_DMAReceiveCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	685a      	ldr	r2, [r3, #4]
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	f022 0220 	bic.w	r2, r2, #32
 800e982:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	689b      	ldr	r3, [r3, #8]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d10d      	bne.n	800e9a8 <SPI_DMAReceiveCplt+0x56>
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	685b      	ldr	r3, [r3, #4]
 800e990:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e994:	d108      	bne.n	800e9a8 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	685a      	ldr	r2, [r3, #4]
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	f022 0203 	bic.w	r2, r2, #3
 800e9a4:	605a      	str	r2, [r3, #4]
 800e9a6:	e007      	b.n	800e9b8 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	685a      	ldr	r2, [r3, #4]
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	f022 0201 	bic.w	r2, r2, #1
 800e9b6:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800e9b8:	68ba      	ldr	r2, [r7, #8]
 800e9ba:	2164      	movs	r1, #100	; 0x64
 800e9bc:	68f8      	ldr	r0, [r7, #12]
 800e9be:	f000 fb61 	bl	800f084 <SPI_EndRxTransaction>
 800e9c2:	4603      	mov	r3, r0
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d002      	beq.n	800e9ce <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	2220      	movs	r2, #32
 800e9cc:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	2200      	movs	r2, #0
 800e9d2:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	2201      	movs	r2, #1
 800e9d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d003      	beq.n	800e9ec <SPI_DMAReceiveCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800e9e4:	68f8      	ldr	r0, [r7, #12]
 800e9e6:	f7ff ff37 	bl	800e858 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800e9ea:	e002      	b.n	800e9f2 <SPI_DMAReceiveCplt+0xa0>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800e9ec:	68f8      	ldr	r0, [r7, #12]
 800e9ee:	f7ff ff06 	bl	800e7fe <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e9f2:	3710      	adds	r7, #16
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	bd80      	pop	{r7, pc}

0800e9f8 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b084      	sub	sp, #16
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea04:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ea06:	f7f3 fe25 	bl	8002654 <HAL_GetTick>
 800ea0a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	f003 0320 	and.w	r3, r3, #32
 800ea16:	2b20      	cmp	r3, #32
 800ea18:	d02f      	beq.n	800ea7a <SPI_DMATransmitReceiveCplt+0x82>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	685a      	ldr	r2, [r3, #4]
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	f022 0220 	bic.w	r2, r2, #32
 800ea28:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800ea2a:	68ba      	ldr	r2, [r7, #8]
 800ea2c:	2164      	movs	r1, #100	; 0x64
 800ea2e:	68f8      	ldr	r0, [r7, #12]
 800ea30:	f000 fb8e 	bl	800f150 <SPI_EndRxTxTransaction>
 800ea34:	4603      	mov	r3, r0
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d005      	beq.n	800ea46 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea3e:	f043 0220 	orr.w	r2, r3, #32
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	685a      	ldr	r2, [r3, #4]
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	f022 0203 	bic.w	r2, r2, #3
 800ea54:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	2200      	movs	r2, #0
 800ea5a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	2200      	movs	r2, #0
 800ea60:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	2201      	movs	r2, #1
 800ea66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d003      	beq.n	800ea7a <SPI_DMATransmitReceiveCplt+0x82>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800ea72:	68f8      	ldr	r0, [r7, #12]
 800ea74:	f7ff fef0 	bl	800e858 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800ea78:	e002      	b.n	800ea80 <SPI_DMATransmitReceiveCplt+0x88>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800ea7a:	68f8      	ldr	r0, [r7, #12]
 800ea7c:	f7ff fec8 	bl	800e810 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ea80:	3710      	adds	r7, #16
 800ea82:	46bd      	mov	sp, r7
 800ea84:	bd80      	pop	{r7, pc}

0800ea86 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ea86:	b580      	push	{r7, lr}
 800ea88:	b084      	sub	sp, #16
 800ea8a:	af00      	add	r7, sp, #0
 800ea8c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea92:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800ea94:	68f8      	ldr	r0, [r7, #12]
 800ea96:	f7ff fec4 	bl	800e822 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ea9a:	bf00      	nop
 800ea9c:	3710      	adds	r7, #16
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	bd80      	pop	{r7, pc}

0800eaa2 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800eaa2:	b580      	push	{r7, lr}
 800eaa4:	b084      	sub	sp, #16
 800eaa6:	af00      	add	r7, sp, #0
 800eaa8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eaae:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800eab0:	68f8      	ldr	r0, [r7, #12]
 800eab2:	f7ff febf 	bl	800e834 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800eab6:	bf00      	nop
 800eab8:	3710      	adds	r7, #16
 800eaba:	46bd      	mov	sp, r7
 800eabc:	bd80      	pop	{r7, pc}

0800eabe <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800eabe:	b580      	push	{r7, lr}
 800eac0:	b084      	sub	sp, #16
 800eac2:	af00      	add	r7, sp, #0
 800eac4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eaca:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800eacc:	68f8      	ldr	r0, [r7, #12]
 800eace:	f7ff feba 	bl	800e846 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ead2:	bf00      	nop
 800ead4:	3710      	adds	r7, #16
 800ead6:	46bd      	mov	sp, r7
 800ead8:	bd80      	pop	{r7, pc}

0800eada <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800eada:	b580      	push	{r7, lr}
 800eadc:	b084      	sub	sp, #16
 800eade:	af00      	add	r7, sp, #0
 800eae0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eae6:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	685a      	ldr	r2, [r3, #4]
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	f022 0203 	bic.w	r2, r2, #3
 800eaf6:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eafc:	f043 0210 	orr.w	r2, r3, #16
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	2201      	movs	r2, #1
 800eb08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800eb0c:	68f8      	ldr	r0, [r7, #12]
 800eb0e:	f7ff fea3 	bl	800e858 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800eb12:	bf00      	nop
 800eb14:	3710      	adds	r7, #16
 800eb16:	46bd      	mov	sp, r7
 800eb18:	bd80      	pop	{r7, pc}

0800eb1a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800eb1a:	b580      	push	{r7, lr}
 800eb1c:	b084      	sub	sp, #16
 800eb1e:	af00      	add	r7, sp, #0
 800eb20:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb26:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	2200      	movs	r2, #0
 800eb32:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800eb34:	68f8      	ldr	r0, [r7, #12]
 800eb36:	f7ff fe8f 	bl	800e858 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800eb3a:	bf00      	nop
 800eb3c:	3710      	adds	r7, #16
 800eb3e:	46bd      	mov	sp, r7
 800eb40:	bd80      	pop	{r7, pc}
	...

0800eb44 <SPI_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800eb44:	b580      	push	{r7, lr}
 800eb46:	b086      	sub	sp, #24
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb50:	617b      	str	r3, [r7, #20]
  __IO uint32_t count;

  hspi->hdmatx->XferAbortCallback = NULL;
 800eb52:	697b      	ldr	r3, [r7, #20]
 800eb54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eb56:	2200      	movs	r2, #0
 800eb58:	635a      	str	r2, [r3, #52]	; 0x34
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800eb5a:	4b2d      	ldr	r3, [pc, #180]	; (800ec10 <SPI_DMATxAbortCallback+0xcc>)
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	4a2d      	ldr	r2, [pc, #180]	; (800ec14 <SPI_DMATxAbortCallback+0xd0>)
 800eb60:	fba2 2303 	umull	r2, r3, r2, r3
 800eb64:	0a5b      	lsrs	r3, r3, #9
 800eb66:	2264      	movs	r2, #100	; 0x64
 800eb68:	fb02 f303 	mul.w	r3, r2, r3
 800eb6c:	613b      	str	r3, [r7, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800eb6e:	697b      	ldr	r3, [r7, #20]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	685a      	ldr	r2, [r3, #4]
 800eb74:	697b      	ldr	r3, [r7, #20]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	f022 0202 	bic.w	r2, r2, #2
 800eb7c:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800eb7e:	693b      	ldr	r3, [r7, #16]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d106      	bne.n	800eb92 <SPI_DMATxAbortCallback+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800eb84:	697b      	ldr	r3, [r7, #20]
 800eb86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb88:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800eb8c:	697b      	ldr	r3, [r7, #20]
 800eb8e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800eb90:	e009      	b.n	800eba6 <SPI_DMATxAbortCallback+0x62>
    }
    count--;
 800eb92:	693b      	ldr	r3, [r7, #16]
 800eb94:	3b01      	subs	r3, #1
 800eb96:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800eb98:	697b      	ldr	r3, [r7, #20]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	689b      	ldr	r3, [r3, #8]
 800eb9e:	f003 0302 	and.w	r3, r3, #2
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d0eb      	beq.n	800eb7e <SPI_DMATxAbortCallback+0x3a>

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmarx != NULL)
 800eba6:	697b      	ldr	r3, [r7, #20]
 800eba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d004      	beq.n	800ebb8 <SPI_DMATxAbortCallback+0x74>
  {
    if (hspi->hdmarx->XferAbortCallback != NULL)
 800ebae:	697b      	ldr	r3, [r7, #20]
 800ebb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ebb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d126      	bne.n	800ec06 <SPI_DMATxAbortCallback+0xc2>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 800ebb8:	697b      	ldr	r3, [r7, #20]
 800ebba:	2200      	movs	r2, #0
 800ebbc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800ebbe:	697b      	ldr	r3, [r7, #20]
 800ebc0:	2200      	movs	r2, #0
 800ebc2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 800ebc4:	697b      	ldr	r3, [r7, #20]
 800ebc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebc8:	2b40      	cmp	r3, #64	; 0x40
 800ebca:	d002      	beq.n	800ebd2 <SPI_DMATxAbortCallback+0x8e>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ebcc:	697b      	ldr	r3, [r7, #20]
 800ebce:	2200      	movs	r2, #0
 800ebd0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	60fb      	str	r3, [r7, #12]
 800ebd6:	697b      	ldr	r3, [r7, #20]
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	68db      	ldr	r3, [r3, #12]
 800ebdc:	60fb      	str	r3, [r7, #12]
 800ebde:	697b      	ldr	r3, [r7, #20]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	689b      	ldr	r3, [r3, #8]
 800ebe4:	60fb      	str	r3, [r7, #12]
 800ebe6:	68fb      	ldr	r3, [r7, #12]
#if defined(SPI_CR2_FRF)
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ebe8:	2300      	movs	r3, #0
 800ebea:	60bb      	str	r3, [r7, #8]
 800ebec:	697b      	ldr	r3, [r7, #20]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	689b      	ldr	r3, [r3, #8]
 800ebf2:	60bb      	str	r3, [r7, #8]
 800ebf4:	68bb      	ldr	r3, [r7, #8]
#endif /* SPI_CR2_FRF */

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 800ebf6:	697b      	ldr	r3, [r7, #20]
 800ebf8:	2201      	movs	r2, #1
 800ebfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 800ebfe:	6978      	ldr	r0, [r7, #20]
 800ec00:	f7ff fe33 	bl	800e86a <HAL_SPI_AbortCpltCallback>
 800ec04:	e000      	b.n	800ec08 <SPI_DMATxAbortCallback+0xc4>
      return;
 800ec06:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ec08:	3718      	adds	r7, #24
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	bd80      	pop	{r7, pc}
 800ec0e:	bf00      	nop
 800ec10:	2000006c 	.word	0x2000006c
 800ec14:	057619f1 	.word	0x057619f1

0800ec18 <SPI_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b086      	sub	sp, #24
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec24:	617b      	str	r3, [r7, #20]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ec26:	697b      	ldr	r3, [r7, #20]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	681a      	ldr	r2, [r3, #0]
 800ec2c:	697b      	ldr	r3, [r7, #20]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ec34:	601a      	str	r2, [r3, #0]

  hspi->hdmarx->XferAbortCallback = NULL;
 800ec36:	697b      	ldr	r3, [r7, #20]
 800ec38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ec3a:	2200      	movs	r2, #0
 800ec3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable Rx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800ec3e:	697b      	ldr	r3, [r7, #20]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	685a      	ldr	r2, [r3, #4]
 800ec44:	697b      	ldr	r3, [r7, #20]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	f022 0201 	bic.w	r2, r2, #1
 800ec4c:	605a      	str	r2, [r3, #4]

  /* Check Busy flag */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800ec4e:	f7f3 fd01 	bl	8002654 <HAL_GetTick>
 800ec52:	4603      	mov	r3, r0
 800ec54:	461a      	mov	r2, r3
 800ec56:	2164      	movs	r1, #100	; 0x64
 800ec58:	6978      	ldr	r0, [r7, #20]
 800ec5a:	f000 fa79 	bl	800f150 <SPI_EndRxTxTransaction>
 800ec5e:	4603      	mov	r3, r0
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d005      	beq.n	800ec70 <SPI_DMARxAbortCallback+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ec64:	697b      	ldr	r3, [r7, #20]
 800ec66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec68:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ec6c:	697b      	ldr	r3, [r7, #20]
 800ec6e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmatx != NULL)
 800ec70:	697b      	ldr	r3, [r7, #20]
 800ec72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d004      	beq.n	800ec82 <SPI_DMARxAbortCallback+0x6a>
  {
    if (hspi->hdmatx->XferAbortCallback != NULL)
 800ec78:	697b      	ldr	r3, [r7, #20]
 800ec7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ec7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d126      	bne.n	800ecd0 <SPI_DMARxAbortCallback+0xb8>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 800ec82:	697b      	ldr	r3, [r7, #20]
 800ec84:	2200      	movs	r2, #0
 800ec86:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800ec88:	697b      	ldr	r3, [r7, #20]
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 800ec8e:	697b      	ldr	r3, [r7, #20]
 800ec90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec92:	2b40      	cmp	r3, #64	; 0x40
 800ec94:	d002      	beq.n	800ec9c <SPI_DMARxAbortCallback+0x84>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ec96:	697b      	ldr	r3, [r7, #20]
 800ec98:	2200      	movs	r2, #0
 800ec9a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ec9c:	2300      	movs	r3, #0
 800ec9e:	613b      	str	r3, [r7, #16]
 800eca0:	697b      	ldr	r3, [r7, #20]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	68db      	ldr	r3, [r3, #12]
 800eca6:	613b      	str	r3, [r7, #16]
 800eca8:	697b      	ldr	r3, [r7, #20]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	689b      	ldr	r3, [r3, #8]
 800ecae:	613b      	str	r3, [r7, #16]
 800ecb0:	693b      	ldr	r3, [r7, #16]
#if defined(SPI_CR2_FRF)
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	60fb      	str	r3, [r7, #12]
 800ecb6:	697b      	ldr	r3, [r7, #20]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	689b      	ldr	r3, [r3, #8]
 800ecbc:	60fb      	str	r3, [r7, #12]
 800ecbe:	68fb      	ldr	r3, [r7, #12]
#endif /* SPI_CR2_FRF */

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 800ecc0:	697b      	ldr	r3, [r7, #20]
 800ecc2:	2201      	movs	r2, #1
 800ecc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 800ecc8:	6978      	ldr	r0, [r7, #20]
 800ecca:	f7ff fdce 	bl	800e86a <HAL_SPI_AbortCpltCallback>
 800ecce:	e000      	b.n	800ecd2 <SPI_DMARxAbortCallback+0xba>
      return;
 800ecd0:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ecd2:	3718      	adds	r7, #24
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	bd80      	pop	{r7, pc}

0800ecd8 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800ecd8:	b580      	push	{r7, lr}
 800ecda:	b082      	sub	sp, #8
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	f103 020c 	add.w	r2, r3, #12
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecec:	7812      	ldrb	r2, [r2, #0]
 800ecee:	b2d2      	uxtb	r2, r2
 800ecf0:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecf6:	1c5a      	adds	r2, r3, #1
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ed00:	b29b      	uxth	r3, r3
 800ed02:	3b01      	subs	r3, #1
 800ed04:	b29a      	uxth	r2, r3
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ed0e:	b29b      	uxth	r3, r3
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d10f      	bne.n	800ed34 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	685a      	ldr	r2, [r3, #4]
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800ed22:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ed28:	b29b      	uxth	r3, r3
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d102      	bne.n	800ed34 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 800ed2e:	6878      	ldr	r0, [r7, #4]
 800ed30:	f000 fa50 	bl	800f1d4 <SPI_CloseRxTx_ISR>
    }
  }
}
 800ed34:	bf00      	nop
 800ed36:	3708      	adds	r7, #8
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	bd80      	pop	{r7, pc}

0800ed3c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800ed3c:	b580      	push	{r7, lr}
 800ed3e:	b082      	sub	sp, #8
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	330c      	adds	r3, #12
 800ed4e:	7812      	ldrb	r2, [r2, #0]
 800ed50:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed56:	1c5a      	adds	r2, r3, #1
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ed60:	b29b      	uxth	r3, r3
 800ed62:	3b01      	subs	r3, #1
 800ed64:	b29a      	uxth	r2, r3
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ed6e:	b29b      	uxth	r3, r3
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d10f      	bne.n	800ed94 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	685a      	ldr	r2, [r3, #4]
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ed82:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ed88:	b29b      	uxth	r3, r3
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d102      	bne.n	800ed94 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800ed8e:	6878      	ldr	r0, [r7, #4]
 800ed90:	f000 fa20 	bl	800f1d4 <SPI_CloseRxTx_ISR>
    }
  }
}
 800ed94:	bf00      	nop
 800ed96:	3708      	adds	r7, #8
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	bd80      	pop	{r7, pc}

0800ed9c <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	b082      	sub	sp, #8
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	68da      	ldr	r2, [r3, #12]
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edae:	b292      	uxth	r2, r2
 800edb0:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edb6:	1c9a      	adds	r2, r3, #2
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800edc0:	b29b      	uxth	r3, r3
 800edc2:	3b01      	subs	r3, #1
 800edc4:	b29a      	uxth	r2, r3
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800edce:	b29b      	uxth	r3, r3
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d10f      	bne.n	800edf4 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	685a      	ldr	r2, [r3, #4]
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ede2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ede8:	b29b      	uxth	r3, r3
 800edea:	2b00      	cmp	r3, #0
 800edec:	d102      	bne.n	800edf4 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800edee:	6878      	ldr	r0, [r7, #4]
 800edf0:	f000 f9f0 	bl	800f1d4 <SPI_CloseRxTx_ISR>
    }
  }
}
 800edf4:	bf00      	nop
 800edf6:	3708      	adds	r7, #8
 800edf8:	46bd      	mov	sp, r7
 800edfa:	bd80      	pop	{r7, pc}

0800edfc <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b082      	sub	sp, #8
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee08:	881a      	ldrh	r2, [r3, #0]
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee14:	1c9a      	adds	r2, r3, #2
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ee1e:	b29b      	uxth	r3, r3
 800ee20:	3b01      	subs	r3, #1
 800ee22:	b29a      	uxth	r2, r3
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ee2c:	b29b      	uxth	r3, r3
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d10f      	bne.n	800ee52 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	685a      	ldr	r2, [r3, #4]
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ee40:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ee46:	b29b      	uxth	r3, r3
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d102      	bne.n	800ee52 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 800ee4c:	6878      	ldr	r0, [r7, #4]
 800ee4e:	f000 f9c1 	bl	800f1d4 <SPI_CloseRxTx_ISR>
    }
  }
}
 800ee52:	bf00      	nop
 800ee54:	3708      	adds	r7, #8
 800ee56:	46bd      	mov	sp, r7
 800ee58:	bd80      	pop	{r7, pc}

0800ee5a <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800ee5a:	b580      	push	{r7, lr}
 800ee5c:	b082      	sub	sp, #8
 800ee5e:	af00      	add	r7, sp, #0
 800ee60:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	f103 020c 	add.w	r2, r3, #12
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee6e:	7812      	ldrb	r2, [r2, #0]
 800ee70:	b2d2      	uxtb	r2, r2
 800ee72:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee78:	1c5a      	adds	r2, r3, #1
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ee82:	b29b      	uxth	r3, r3
 800ee84:	3b01      	subs	r3, #1
 800ee86:	b29a      	uxth	r2, r3
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ee90:	b29b      	uxth	r3, r3
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d102      	bne.n	800ee9c <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800ee96:	6878      	ldr	r0, [r7, #4]
 800ee98:	f000 fa10 	bl	800f2bc <SPI_CloseRx_ISR>
  }
}
 800ee9c:	bf00      	nop
 800ee9e:	3708      	adds	r7, #8
 800eea0:	46bd      	mov	sp, r7
 800eea2:	bd80      	pop	{r7, pc}

0800eea4 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800eea4:	b580      	push	{r7, lr}
 800eea6:	b082      	sub	sp, #8
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	68da      	ldr	r2, [r3, #12]
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eeb6:	b292      	uxth	r2, r2
 800eeb8:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eebe:	1c9a      	adds	r2, r3, #2
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eec8:	b29b      	uxth	r3, r3
 800eeca:	3b01      	subs	r3, #1
 800eecc:	b29a      	uxth	r2, r3
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eed6:	b29b      	uxth	r3, r3
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d102      	bne.n	800eee2 <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800eedc:	6878      	ldr	r0, [r7, #4]
 800eede:	f000 f9ed 	bl	800f2bc <SPI_CloseRx_ISR>
  }
}
 800eee2:	bf00      	nop
 800eee4:	3708      	adds	r7, #8
 800eee6:	46bd      	mov	sp, r7
 800eee8:	bd80      	pop	{r7, pc}

0800eeea <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800eeea:	b580      	push	{r7, lr}
 800eeec:	b082      	sub	sp, #8
 800eeee:	af00      	add	r7, sp, #0
 800eef0:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	330c      	adds	r3, #12
 800eefc:	7812      	ldrb	r2, [r2, #0]
 800eefe:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef04:	1c5a      	adds	r2, r3, #1
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ef0e:	b29b      	uxth	r3, r3
 800ef10:	3b01      	subs	r3, #1
 800ef12:	b29a      	uxth	r2, r3
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ef1c:	b29b      	uxth	r3, r3
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d102      	bne.n	800ef28 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800ef22:	6878      	ldr	r0, [r7, #4]
 800ef24:	f000 fa0a 	bl	800f33c <SPI_CloseTx_ISR>
  }
}
 800ef28:	bf00      	nop
 800ef2a:	3708      	adds	r7, #8
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	bd80      	pop	{r7, pc}

0800ef30 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800ef30:	b580      	push	{r7, lr}
 800ef32:	b082      	sub	sp, #8
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef3c:	881a      	ldrh	r2, [r3, #0]
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef48:	1c9a      	adds	r2, r3, #2
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ef52:	b29b      	uxth	r3, r3
 800ef54:	3b01      	subs	r3, #1
 800ef56:	b29a      	uxth	r2, r3
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ef60:	b29b      	uxth	r3, r3
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d102      	bne.n	800ef6c <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800ef66:	6878      	ldr	r0, [r7, #4]
 800ef68:	f000 f9e8 	bl	800f33c <SPI_CloseTx_ISR>
  }
}
 800ef6c:	bf00      	nop
 800ef6e:	3708      	adds	r7, #8
 800ef70:	46bd      	mov	sp, r7
 800ef72:	bd80      	pop	{r7, pc}

0800ef74 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b088      	sub	sp, #32
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	60f8      	str	r0, [r7, #12]
 800ef7c:	60b9      	str	r1, [r7, #8]
 800ef7e:	603b      	str	r3, [r7, #0]
 800ef80:	4613      	mov	r3, r2
 800ef82:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ef84:	f7f3 fb66 	bl	8002654 <HAL_GetTick>
 800ef88:	4602      	mov	r2, r0
 800ef8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef8c:	1a9b      	subs	r3, r3, r2
 800ef8e:	683a      	ldr	r2, [r7, #0]
 800ef90:	4413      	add	r3, r2
 800ef92:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ef94:	f7f3 fb5e 	bl	8002654 <HAL_GetTick>
 800ef98:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ef9a:	4b39      	ldr	r3, [pc, #228]	; (800f080 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	015b      	lsls	r3, r3, #5
 800efa0:	0d1b      	lsrs	r3, r3, #20
 800efa2:	69fa      	ldr	r2, [r7, #28]
 800efa4:	fb02 f303 	mul.w	r3, r2, r3
 800efa8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800efaa:	e054      	b.n	800f056 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800efac:	683b      	ldr	r3, [r7, #0]
 800efae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efb2:	d050      	beq.n	800f056 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800efb4:	f7f3 fb4e 	bl	8002654 <HAL_GetTick>
 800efb8:	4602      	mov	r2, r0
 800efba:	69bb      	ldr	r3, [r7, #24]
 800efbc:	1ad3      	subs	r3, r2, r3
 800efbe:	69fa      	ldr	r2, [r7, #28]
 800efc0:	429a      	cmp	r2, r3
 800efc2:	d902      	bls.n	800efca <SPI_WaitFlagStateUntilTimeout+0x56>
 800efc4:	69fb      	ldr	r3, [r7, #28]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d13d      	bne.n	800f046 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	685a      	ldr	r2, [r3, #4]
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800efd8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	685b      	ldr	r3, [r3, #4]
 800efde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800efe2:	d111      	bne.n	800f008 <SPI_WaitFlagStateUntilTimeout+0x94>
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	689b      	ldr	r3, [r3, #8]
 800efe8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800efec:	d004      	beq.n	800eff8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	689b      	ldr	r3, [r3, #8]
 800eff2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eff6:	d107      	bne.n	800f008 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	681a      	ldr	r2, [r3, #0]
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f006:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f00c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f010:	d10f      	bne.n	800f032 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	681a      	ldr	r2, [r3, #0]
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f020:	601a      	str	r2, [r3, #0]
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	681a      	ldr	r2, [r3, #0]
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f030:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	2201      	movs	r2, #1
 800f036:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	2200      	movs	r2, #0
 800f03e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800f042:	2303      	movs	r3, #3
 800f044:	e017      	b.n	800f076 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800f046:	697b      	ldr	r3, [r7, #20]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d101      	bne.n	800f050 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800f04c:	2300      	movs	r3, #0
 800f04e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800f050:	697b      	ldr	r3, [r7, #20]
 800f052:	3b01      	subs	r3, #1
 800f054:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	689a      	ldr	r2, [r3, #8]
 800f05c:	68bb      	ldr	r3, [r7, #8]
 800f05e:	4013      	ands	r3, r2
 800f060:	68ba      	ldr	r2, [r7, #8]
 800f062:	429a      	cmp	r2, r3
 800f064:	bf0c      	ite	eq
 800f066:	2301      	moveq	r3, #1
 800f068:	2300      	movne	r3, #0
 800f06a:	b2db      	uxtb	r3, r3
 800f06c:	461a      	mov	r2, r3
 800f06e:	79fb      	ldrb	r3, [r7, #7]
 800f070:	429a      	cmp	r2, r3
 800f072:	d19b      	bne.n	800efac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800f074:	2300      	movs	r3, #0
}
 800f076:	4618      	mov	r0, r3
 800f078:	3720      	adds	r7, #32
 800f07a:	46bd      	mov	sp, r7
 800f07c:	bd80      	pop	{r7, pc}
 800f07e:	bf00      	nop
 800f080:	2000006c 	.word	0x2000006c

0800f084 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800f084:	b580      	push	{r7, lr}
 800f086:	b086      	sub	sp, #24
 800f088:	af02      	add	r7, sp, #8
 800f08a:	60f8      	str	r0, [r7, #12]
 800f08c:	60b9      	str	r1, [r7, #8]
 800f08e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	685b      	ldr	r3, [r3, #4]
 800f094:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f098:	d111      	bne.n	800f0be <SPI_EndRxTransaction+0x3a>
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	689b      	ldr	r3, [r3, #8]
 800f09e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f0a2:	d004      	beq.n	800f0ae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	689b      	ldr	r3, [r3, #8]
 800f0a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f0ac:	d107      	bne.n	800f0be <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	681a      	ldr	r2, [r3, #0]
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f0bc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	685b      	ldr	r3, [r3, #4]
 800f0c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f0c6:	d12a      	bne.n	800f11e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	689b      	ldr	r3, [r3, #8]
 800f0cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f0d0:	d012      	beq.n	800f0f8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	9300      	str	r3, [sp, #0]
 800f0d6:	68bb      	ldr	r3, [r7, #8]
 800f0d8:	2200      	movs	r2, #0
 800f0da:	2180      	movs	r1, #128	; 0x80
 800f0dc:	68f8      	ldr	r0, [r7, #12]
 800f0de:	f7ff ff49 	bl	800ef74 <SPI_WaitFlagStateUntilTimeout>
 800f0e2:	4603      	mov	r3, r0
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d02d      	beq.n	800f144 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0ec:	f043 0220 	orr.w	r2, r3, #32
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800f0f4:	2303      	movs	r3, #3
 800f0f6:	e026      	b.n	800f146 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	9300      	str	r3, [sp, #0]
 800f0fc:	68bb      	ldr	r3, [r7, #8]
 800f0fe:	2200      	movs	r2, #0
 800f100:	2101      	movs	r1, #1
 800f102:	68f8      	ldr	r0, [r7, #12]
 800f104:	f7ff ff36 	bl	800ef74 <SPI_WaitFlagStateUntilTimeout>
 800f108:	4603      	mov	r3, r0
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d01a      	beq.n	800f144 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f112:	f043 0220 	orr.w	r2, r3, #32
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800f11a:	2303      	movs	r3, #3
 800f11c:	e013      	b.n	800f146 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	9300      	str	r3, [sp, #0]
 800f122:	68bb      	ldr	r3, [r7, #8]
 800f124:	2200      	movs	r2, #0
 800f126:	2101      	movs	r1, #1
 800f128:	68f8      	ldr	r0, [r7, #12]
 800f12a:	f7ff ff23 	bl	800ef74 <SPI_WaitFlagStateUntilTimeout>
 800f12e:	4603      	mov	r3, r0
 800f130:	2b00      	cmp	r3, #0
 800f132:	d007      	beq.n	800f144 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f138:	f043 0220 	orr.w	r2, r3, #32
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800f140:	2303      	movs	r3, #3
 800f142:	e000      	b.n	800f146 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800f144:	2300      	movs	r3, #0
}
 800f146:	4618      	mov	r0, r3
 800f148:	3710      	adds	r7, #16
 800f14a:	46bd      	mov	sp, r7
 800f14c:	bd80      	pop	{r7, pc}
	...

0800f150 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800f150:	b580      	push	{r7, lr}
 800f152:	b088      	sub	sp, #32
 800f154:	af02      	add	r7, sp, #8
 800f156:	60f8      	str	r0, [r7, #12]
 800f158:	60b9      	str	r1, [r7, #8]
 800f15a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800f15c:	4b1b      	ldr	r3, [pc, #108]	; (800f1cc <SPI_EndRxTxTransaction+0x7c>)
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	4a1b      	ldr	r2, [pc, #108]	; (800f1d0 <SPI_EndRxTxTransaction+0x80>)
 800f162:	fba2 2303 	umull	r2, r3, r2, r3
 800f166:	0d5b      	lsrs	r3, r3, #21
 800f168:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f16c:	fb02 f303 	mul.w	r3, r2, r3
 800f170:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	685b      	ldr	r3, [r3, #4]
 800f176:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f17a:	d112      	bne.n	800f1a2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	9300      	str	r3, [sp, #0]
 800f180:	68bb      	ldr	r3, [r7, #8]
 800f182:	2200      	movs	r2, #0
 800f184:	2180      	movs	r1, #128	; 0x80
 800f186:	68f8      	ldr	r0, [r7, #12]
 800f188:	f7ff fef4 	bl	800ef74 <SPI_WaitFlagStateUntilTimeout>
 800f18c:	4603      	mov	r3, r0
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d016      	beq.n	800f1c0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f196:	f043 0220 	orr.w	r2, r3, #32
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800f19e:	2303      	movs	r3, #3
 800f1a0:	e00f      	b.n	800f1c2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800f1a2:	697b      	ldr	r3, [r7, #20]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d00a      	beq.n	800f1be <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800f1a8:	697b      	ldr	r3, [r7, #20]
 800f1aa:	3b01      	subs	r3, #1
 800f1ac:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	689b      	ldr	r3, [r3, #8]
 800f1b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f1b8:	2b80      	cmp	r3, #128	; 0x80
 800f1ba:	d0f2      	beq.n	800f1a2 <SPI_EndRxTxTransaction+0x52>
 800f1bc:	e000      	b.n	800f1c0 <SPI_EndRxTxTransaction+0x70>
        break;
 800f1be:	bf00      	nop
  }

  return HAL_OK;
 800f1c0:	2300      	movs	r3, #0
}
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	3718      	adds	r7, #24
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	bd80      	pop	{r7, pc}
 800f1ca:	bf00      	nop
 800f1cc:	2000006c 	.word	0x2000006c
 800f1d0:	165e9f81 	.word	0x165e9f81

0800f1d4 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800f1d4:	b580      	push	{r7, lr}
 800f1d6:	b086      	sub	sp, #24
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800f1dc:	4b35      	ldr	r3, [pc, #212]	; (800f2b4 <SPI_CloseRxTx_ISR+0xe0>)
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	4a35      	ldr	r2, [pc, #212]	; (800f2b8 <SPI_CloseRxTx_ISR+0xe4>)
 800f1e2:	fba2 2303 	umull	r2, r3, r2, r3
 800f1e6:	0a5b      	lsrs	r3, r3, #9
 800f1e8:	2264      	movs	r2, #100	; 0x64
 800f1ea:	fb02 f303 	mul.w	r3, r2, r3
 800f1ee:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f1f0:	f7f3 fa30 	bl	8002654 <HAL_GetTick>
 800f1f4:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	685a      	ldr	r2, [r3, #4]
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	f022 0220 	bic.w	r2, r2, #32
 800f204:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800f206:	693b      	ldr	r3, [r7, #16]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d106      	bne.n	800f21a <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f210:	f043 0220 	orr.w	r2, r3, #32
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f218:	e009      	b.n	800f22e <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 800f21a:	693b      	ldr	r3, [r7, #16]
 800f21c:	3b01      	subs	r3, #1
 800f21e:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	689b      	ldr	r3, [r3, #8]
 800f226:	f003 0302 	and.w	r3, r3, #2
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d0eb      	beq.n	800f206 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800f22e:	697a      	ldr	r2, [r7, #20]
 800f230:	2164      	movs	r1, #100	; 0x64
 800f232:	6878      	ldr	r0, [r7, #4]
 800f234:	f7ff ff8c 	bl	800f150 <SPI_EndRxTxTransaction>
 800f238:	4603      	mov	r3, r0
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d005      	beq.n	800f24a <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f242:	f043 0220 	orr.w	r2, r3, #32
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	689b      	ldr	r3, [r3, #8]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d10a      	bne.n	800f268 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f252:	2300      	movs	r3, #0
 800f254:	60fb      	str	r3, [r7, #12]
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	68db      	ldr	r3, [r3, #12]
 800f25c:	60fb      	str	r3, [r7, #12]
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	689b      	ldr	r3, [r3, #8]
 800f264:	60fb      	str	r3, [r7, #12]
 800f266:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d115      	bne.n	800f29c <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f276:	b2db      	uxtb	r3, r3
 800f278:	2b04      	cmp	r3, #4
 800f27a:	d107      	bne.n	800f28c <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	2201      	movs	r2, #1
 800f280:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800f284:	6878      	ldr	r0, [r7, #4]
 800f286:	f7ff faba 	bl	800e7fe <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800f28a:	e00e      	b.n	800f2aa <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	2201      	movs	r2, #1
 800f290:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 800f294:	6878      	ldr	r0, [r7, #4]
 800f296:	f7ff fabb 	bl	800e810 <HAL_SPI_TxRxCpltCallback>
}
 800f29a:	e006      	b.n	800f2aa <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	2201      	movs	r2, #1
 800f2a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 800f2a4:	6878      	ldr	r0, [r7, #4]
 800f2a6:	f7ff fad7 	bl	800e858 <HAL_SPI_ErrorCallback>
}
 800f2aa:	bf00      	nop
 800f2ac:	3718      	adds	r7, #24
 800f2ae:	46bd      	mov	sp, r7
 800f2b0:	bd80      	pop	{r7, pc}
 800f2b2:	bf00      	nop
 800f2b4:	2000006c 	.word	0x2000006c
 800f2b8:	057619f1 	.word	0x057619f1

0800f2bc <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b084      	sub	sp, #16
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	685a      	ldr	r2, [r3, #4]
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800f2d2:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800f2d4:	f7f3 f9be 	bl	8002654 <HAL_GetTick>
 800f2d8:	4603      	mov	r3, r0
 800f2da:	461a      	mov	r2, r3
 800f2dc:	2164      	movs	r1, #100	; 0x64
 800f2de:	6878      	ldr	r0, [r7, #4]
 800f2e0:	f7ff fed0 	bl	800f084 <SPI_EndRxTransaction>
 800f2e4:	4603      	mov	r3, r0
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d005      	beq.n	800f2f6 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f2ee:	f043 0220 	orr.w	r2, r3, #32
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	689b      	ldr	r3, [r3, #8]
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d10a      	bne.n	800f314 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f2fe:	2300      	movs	r3, #0
 800f300:	60fb      	str	r3, [r7, #12]
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	68db      	ldr	r3, [r3, #12]
 800f308:	60fb      	str	r3, [r7, #12]
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	689b      	ldr	r3, [r3, #8]
 800f310:	60fb      	str	r3, [r7, #12]
 800f312:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	2201      	movs	r2, #1
 800f318:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f320:	2b00      	cmp	r3, #0
 800f322:	d103      	bne.n	800f32c <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800f324:	6878      	ldr	r0, [r7, #4]
 800f326:	f7ff fa6a 	bl	800e7fe <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800f32a:	e002      	b.n	800f332 <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 800f32c:	6878      	ldr	r0, [r7, #4]
 800f32e:	f7ff fa93 	bl	800e858 <HAL_SPI_ErrorCallback>
}
 800f332:	bf00      	nop
 800f334:	3710      	adds	r7, #16
 800f336:	46bd      	mov	sp, r7
 800f338:	bd80      	pop	{r7, pc}
	...

0800f33c <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 800f33c:	b580      	push	{r7, lr}
 800f33e:	b086      	sub	sp, #24
 800f340:	af00      	add	r7, sp, #0
 800f342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800f344:	4b2c      	ldr	r3, [pc, #176]	; (800f3f8 <SPI_CloseTx_ISR+0xbc>)
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	4a2c      	ldr	r2, [pc, #176]	; (800f3fc <SPI_CloseTx_ISR+0xc0>)
 800f34a:	fba2 2303 	umull	r2, r3, r2, r3
 800f34e:	0a5b      	lsrs	r3, r3, #9
 800f350:	2264      	movs	r2, #100	; 0x64
 800f352:	fb02 f303 	mul.w	r3, r2, r3
 800f356:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f358:	f7f3 f97c 	bl	8002654 <HAL_GetTick>
 800f35c:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800f35e:	693b      	ldr	r3, [r7, #16]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d106      	bne.n	800f372 <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f368:	f043 0220 	orr.w	r2, r3, #32
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f370:	e009      	b.n	800f386 <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 800f372:	693b      	ldr	r3, [r7, #16]
 800f374:	3b01      	subs	r3, #1
 800f376:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	689b      	ldr	r3, [r3, #8]
 800f37e:	f003 0302 	and.w	r3, r3, #2
 800f382:	2b00      	cmp	r3, #0
 800f384:	d0eb      	beq.n	800f35e <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	685a      	ldr	r2, [r3, #4]
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800f394:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800f396:	697a      	ldr	r2, [r7, #20]
 800f398:	2164      	movs	r1, #100	; 0x64
 800f39a:	6878      	ldr	r0, [r7, #4]
 800f39c:	f7ff fed8 	bl	800f150 <SPI_EndRxTxTransaction>
 800f3a0:	4603      	mov	r3, r0
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d005      	beq.n	800f3b2 <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f3aa:	f043 0220 	orr.w	r2, r3, #32
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	689b      	ldr	r3, [r3, #8]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d10a      	bne.n	800f3d0 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f3ba:	2300      	movs	r3, #0
 800f3bc:	60fb      	str	r3, [r7, #12]
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	68db      	ldr	r3, [r3, #12]
 800f3c4:	60fb      	str	r3, [r7, #12]
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	689b      	ldr	r3, [r3, #8]
 800f3cc:	60fb      	str	r3, [r7, #12]
 800f3ce:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	2201      	movs	r2, #1
 800f3d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d003      	beq.n	800f3e8 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800f3e0:	6878      	ldr	r0, [r7, #4]
 800f3e2:	f7ff fa39 	bl	800e858 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800f3e6:	e002      	b.n	800f3ee <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 800f3e8:	6878      	ldr	r0, [r7, #4]
 800f3ea:	f7ff f9ff 	bl	800e7ec <HAL_SPI_TxCpltCallback>
}
 800f3ee:	bf00      	nop
 800f3f0:	3718      	adds	r7, #24
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	bd80      	pop	{r7, pc}
 800f3f6:	bf00      	nop
 800f3f8:	2000006c 	.word	0x2000006c
 800f3fc:	057619f1 	.word	0x057619f1

0800f400 <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
 800f400:	b480      	push	{r7}
 800f402:	b085      	sub	sp, #20
 800f404:	af00      	add	r7, sp, #0
 800f406:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 800f408:	2300      	movs	r3, #0
 800f40a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800f40c:	4b1d      	ldr	r3, [pc, #116]	; (800f484 <SPI_AbortRx_ISR+0x84>)
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	4a1d      	ldr	r2, [pc, #116]	; (800f488 <SPI_AbortRx_ISR+0x88>)
 800f412:	fba2 2303 	umull	r2, r3, r2, r3
 800f416:	0a5b      	lsrs	r3, r3, #9
 800f418:	2264      	movs	r2, #100	; 0x64
 800f41a:	fb02 f303 	mul.w	r3, r2, r3
 800f41e:	60bb      	str	r3, [r7, #8]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800f420:	68bb      	ldr	r3, [r7, #8]
 800f422:	2b00      	cmp	r3, #0
 800f424:	d106      	bne.n	800f434 <SPI_AbortRx_ISR+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f42a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f432:	e009      	b.n	800f448 <SPI_AbortRx_ISR+0x48>
    }
    count--;
 800f434:	68bb      	ldr	r3, [r7, #8]
 800f436:	3b01      	subs	r3, #1
 800f438:	60bb      	str	r3, [r7, #8]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	689b      	ldr	r3, [r3, #8]
 800f440:	f003 0302 	and.w	r3, r3, #2
 800f444:	2b00      	cmp	r3, #0
 800f446:	d0eb      	beq.n	800f420 <SPI_AbortRx_ISR+0x20>

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	681a      	ldr	r2, [r3, #0]
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f456:	601a      	str	r2, [r3, #0]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE));
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	685a      	ldr	r2, [r3, #4]
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f466:	605a      	str	r2, [r3, #4]

  /* Flush Data Register by a blank read */
  tmpreg = READ_REG(hspi->Instance->DR);
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	68db      	ldr	r3, [r3, #12]
 800f46e:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 800f470:	68fb      	ldr	r3, [r7, #12]

  hspi->State = HAL_SPI_STATE_ABORT;
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	2207      	movs	r2, #7
 800f476:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
 800f47a:	bf00      	nop
 800f47c:	3714      	adds	r7, #20
 800f47e:	46bd      	mov	sp, r7
 800f480:	bc80      	pop	{r7}
 800f482:	4770      	bx	lr
 800f484:	2000006c 	.word	0x2000006c
 800f488:	057619f1 	.word	0x057619f1

0800f48c <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
 800f48c:	b480      	push	{r7}
 800f48e:	b083      	sub	sp, #12
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	685a      	ldr	r2, [r3, #4]
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f4a2:	605a      	str	r2, [r3, #4]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	681a      	ldr	r2, [r3, #0]
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f4b2:	601a      	str	r2, [r3, #0]

  hspi->State = HAL_SPI_STATE_ABORT;
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	2207      	movs	r2, #7
 800f4b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
 800f4bc:	bf00      	nop
 800f4be:	370c      	adds	r7, #12
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	bc80      	pop	{r7}
 800f4c4:	4770      	bx	lr

0800f4c6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f4c6:	b580      	push	{r7, lr}
 800f4c8:	b082      	sub	sp, #8
 800f4ca:	af00      	add	r7, sp, #0
 800f4cc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d101      	bne.n	800f4d8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f4d4:	2301      	movs	r3, #1
 800f4d6:	e042      	b.n	800f55e <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f4de:	b2db      	uxtb	r3, r3
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d106      	bne.n	800f4f2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	2200      	movs	r2, #0
 800f4e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f4ec:	6878      	ldr	r0, [r7, #4]
 800f4ee:	f7f2 ff91 	bl	8002414 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	2224      	movs	r2, #36	; 0x24
 800f4f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	68da      	ldr	r2, [r3, #12]
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f508:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800f50a:	6878      	ldr	r0, [r7, #4]
 800f50c:	f002 fc2c 	bl	8011d68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	691a      	ldr	r2, [r3, #16]
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f51e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	695a      	ldr	r2, [r3, #20]
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f52e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	68da      	ldr	r2, [r3, #12]
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f53e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	2200      	movs	r2, #0
 800f544:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	2220      	movs	r2, #32
 800f54a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	2220      	movs	r2, #32
 800f552:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	2200      	movs	r2, #0
 800f55a:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800f55c:	2300      	movs	r3, #0
}
 800f55e:	4618      	mov	r0, r3
 800f560:	3708      	adds	r7, #8
 800f562:	46bd      	mov	sp, r7
 800f564:	bd80      	pop	{r7, pc}

0800f566 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800f566:	b580      	push	{r7, lr}
 800f568:	b082      	sub	sp, #8
 800f56a:	af00      	add	r7, sp, #0
 800f56c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	2b00      	cmp	r3, #0
 800f572:	d101      	bne.n	800f578 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800f574:	2301      	movs	r3, #1
 800f576:	e04a      	b.n	800f60e <HAL_HalfDuplex_Init+0xa8>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f57e:	b2db      	uxtb	r3, r3
 800f580:	2b00      	cmp	r3, #0
 800f582:	d106      	bne.n	800f592 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	2200      	movs	r2, #0
 800f588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f58c:	6878      	ldr	r0, [r7, #4]
 800f58e:	f7f2 ff41 	bl	8002414 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	2224      	movs	r2, #36	; 0x24
 800f596:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	68da      	ldr	r2, [r3, #12]
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f5a8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800f5aa:	6878      	ldr	r0, [r7, #4]
 800f5ac:	f002 fbdc 	bl	8011d68 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	691a      	ldr	r2, [r3, #16]
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f5be:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	695a      	ldr	r2, [r3, #20]
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800f5ce:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	695a      	ldr	r2, [r3, #20]
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	f042 0208 	orr.w	r2, r2, #8
 800f5de:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	68da      	ldr	r2, [r3, #12]
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f5ee:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	2200      	movs	r2, #0
 800f5f4:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	2220      	movs	r2, #32
 800f5fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	2220      	movs	r2, #32
 800f602:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	2200      	movs	r2, #0
 800f60a:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800f60c:	2300      	movs	r3, #0
}
 800f60e:	4618      	mov	r0, r3
 800f610:	3708      	adds	r7, #8
 800f612:	46bd      	mov	sp, r7
 800f614:	bd80      	pop	{r7, pc}

0800f616 <HAL_LIN_Init>:
  *            @arg UART_LINBREAKDETECTLENGTH_10B: 10-bit break detection
  *            @arg UART_LINBREAKDETECTLENGTH_11B: 11-bit break detection
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
{
 800f616:	b580      	push	{r7, lr}
 800f618:	b082      	sub	sp, #8
 800f61a:	af00      	add	r7, sp, #0
 800f61c:	6078      	str	r0, [r7, #4]
 800f61e:	6039      	str	r1, [r7, #0]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	2b00      	cmp	r3, #0
 800f624:	d101      	bne.n	800f62a <HAL_LIN_Init+0x14>
  {
    return HAL_ERROR;
 800f626:	2301      	movs	r3, #1
 800f628:	e05a      	b.n	800f6e0 <HAL_LIN_Init+0xca>
  /* Check the Break detection length parameter */
  assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));
  assert_param(IS_UART_LIN_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_LIN_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f630:	b2db      	uxtb	r3, r3
 800f632:	2b00      	cmp	r3, #0
 800f634:	d106      	bne.n	800f644 <HAL_LIN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	2200      	movs	r2, #0
 800f63a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f63e:	6878      	ldr	r0, [r7, #4]
 800f640:	f7f2 fee8 	bl	8002414 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	2224      	movs	r2, #36	; 0x24
 800f648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	68da      	ldr	r2, [r3, #12]
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f65a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800f65c:	6878      	ldr	r0, [r7, #4]
 800f65e:	f002 fb83 	bl	8011d68 <UART_SetConfig>

  /* In LIN mode, the following bits must be kept cleared:
     - CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_CLKEN));
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	691a      	ldr	r2, [r3, #16]
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f670:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	695a      	ldr	r2, [r3, #20]
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f680:	615a      	str	r2, [r3, #20]

  /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	691a      	ldr	r2, [r3, #16]
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f690:	611a      	str	r2, [r3, #16]

  /* Set the USART LIN Break detection length. */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_LBDL);
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	691a      	ldr	r2, [r3, #16]
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	f022 0220 	bic.w	r2, r2, #32
 800f6a0:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, BreakDetectLength);
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	6919      	ldr	r1, [r3, #16]
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	683a      	ldr	r2, [r7, #0]
 800f6ae:	430a      	orrs	r2, r1
 800f6b0:	611a      	str	r2, [r3, #16]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	68da      	ldr	r2, [r3, #12]
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f6c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	2200      	movs	r2, #0
 800f6c6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	2220      	movs	r2, #32
 800f6cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	2220      	movs	r2, #32
 800f6d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	2200      	movs	r2, #0
 800f6dc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800f6de:	2300      	movs	r3, #0
}
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	3708      	adds	r7, #8
 800f6e4:	46bd      	mov	sp, r7
 800f6e6:	bd80      	pop	{r7, pc}

0800f6e8 <HAL_MultiProcessor_Init>:
  *            @arg UART_WAKEUPMETHOD_IDLELINE: Wake-up by an idle line detection
  *            @arg UART_WAKEUPMETHOD_ADDRESSMARK: Wake-up by an address mark
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 800f6e8:	b580      	push	{r7, lr}
 800f6ea:	b084      	sub	sp, #16
 800f6ec:	af00      	add	r7, sp, #0
 800f6ee:	60f8      	str	r0, [r7, #12]
 800f6f0:	460b      	mov	r3, r1
 800f6f2:	607a      	str	r2, [r7, #4]
 800f6f4:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d101      	bne.n	800f700 <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 800f6fc:	2301      	movs	r3, #1
 800f6fe:	e062      	b.n	800f7c6 <HAL_MultiProcessor_Init+0xde>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
  assert_param(IS_UART_ADDRESS(Address));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f706:	b2db      	uxtb	r3, r3
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d106      	bne.n	800f71a <HAL_MultiProcessor_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	2200      	movs	r2, #0
 800f710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f714:	68f8      	ldr	r0, [r7, #12]
 800f716:	f7f2 fe7d 	bl	8002414 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	2224      	movs	r2, #36	; 0x24
 800f71e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	68da      	ldr	r2, [r3, #12]
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f730:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800f732:	68f8      	ldr	r0, [r7, #12]
 800f734:	f002 fb18 	bl	8011d68 <UART_SetConfig>

  /* In Multi-Processor mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	691a      	ldr	r2, [r3, #16]
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f746:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	695a      	ldr	r2, [r3, #20]
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f756:	615a      	str	r2, [r3, #20]

  /* Set the USART address node */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	691a      	ldr	r2, [r3, #16]
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	f022 020f 	bic.w	r2, r2, #15
 800f766:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, Address);
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	6919      	ldr	r1, [r3, #16]
 800f76e:	7afa      	ldrb	r2, [r7, #11]
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	430a      	orrs	r2, r1
 800f776:	611a      	str	r2, [r3, #16]

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	68da      	ldr	r2, [r3, #12]
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f786:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR1, WakeUpMethod);
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	68d9      	ldr	r1, [r3, #12]
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	687a      	ldr	r2, [r7, #4]
 800f794:	430a      	orrs	r2, r1
 800f796:	60da      	str	r2, [r3, #12]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	68da      	ldr	r2, [r3, #12]
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f7a6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	2200      	movs	r2, #0
 800f7ac:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	2220      	movs	r2, #32
 800f7b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	2220      	movs	r2, #32
 800f7ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	2200      	movs	r2, #0
 800f7c2:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800f7c4:	2300      	movs	r3, #0
}
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	3710      	adds	r7, #16
 800f7ca:	46bd      	mov	sp, r7
 800f7cc:	bd80      	pop	{r7, pc}

0800f7ce <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800f7ce:	b580      	push	{r7, lr}
 800f7d0:	b082      	sub	sp, #8
 800f7d2:	af00      	add	r7, sp, #0
 800f7d4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d101      	bne.n	800f7e0 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800f7dc:	2301      	movs	r3, #1
 800f7de:	e024      	b.n	800f82a <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	2224      	movs	r2, #36	; 0x24
 800f7e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	68da      	ldr	r2, [r3, #12]
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f7f6:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800f7f8:	6878      	ldr	r0, [r7, #4]
 800f7fa:	f7f2 fe57 	bl	80024ac <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	2200      	movs	r2, #0
 800f802:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_RESET;
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	2200      	movs	r2, #0
 800f808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	2200      	movs	r2, #0
 800f810:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	2200      	movs	r2, #0
 800f818:	631a      	str	r2, [r3, #48]	; 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	2200      	movs	r2, #0
 800f81e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	2200      	movs	r2, #0
 800f824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800f828:	2300      	movs	r3, #0
}
 800f82a:	4618      	mov	r0, r3
 800f82c:	3708      	adds	r7, #8
 800f82e:	46bd      	mov	sp, r7
 800f830:	bd80      	pop	{r7, pc}
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800f832:	b480      	push	{r7}
 800f834:	b083      	sub	sp, #12
 800f836:	af00      	add	r7, sp, #0
 800f838:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 800f83a:	bf00      	nop
 800f83c:	370c      	adds	r7, #12
 800f83e:	46bd      	mov	sp, r7
 800f840:	bc80      	pop	{r7}
 800f842:	4770      	bx	lr
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 800f844:	b480      	push	{r7}
 800f846:	b083      	sub	sp, #12
 800f848:	af00      	add	r7, sp, #0
 800f84a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspDeInit could be implemented in the user file
   */
}
 800f84c:	bf00      	nop
 800f84e:	370c      	adds	r7, #12
 800f850:	46bd      	mov	sp, r7
 800f852:	bc80      	pop	{r7}
 800f854:	4770      	bx	lr

0800f856 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f856:	b580      	push	{r7, lr}
 800f858:	b08a      	sub	sp, #40	; 0x28
 800f85a:	af02      	add	r7, sp, #8
 800f85c:	60f8      	str	r0, [r7, #12]
 800f85e:	60b9      	str	r1, [r7, #8]
 800f860:	603b      	str	r3, [r7, #0]
 800f862:	4613      	mov	r3, r2
 800f864:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800f866:	2300      	movs	r3, #0
 800f868:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f870:	b2db      	uxtb	r3, r3
 800f872:	2b20      	cmp	r3, #32
 800f874:	d16d      	bne.n	800f952 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800f876:	68bb      	ldr	r3, [r7, #8]
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d002      	beq.n	800f882 <HAL_UART_Transmit+0x2c>
 800f87c:	88fb      	ldrh	r3, [r7, #6]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d101      	bne.n	800f886 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800f882:	2301      	movs	r3, #1
 800f884:	e066      	b.n	800f954 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	2200      	movs	r2, #0
 800f88a:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	2221      	movs	r2, #33	; 0x21
 800f890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f894:	f7f2 fede 	bl	8002654 <HAL_GetTick>
 800f898:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	88fa      	ldrh	r2, [r7, #6]
 800f89e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	88fa      	ldrh	r2, [r7, #6]
 800f8a4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	689b      	ldr	r3, [r3, #8]
 800f8aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f8ae:	d108      	bne.n	800f8c2 <HAL_UART_Transmit+0x6c>
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	691b      	ldr	r3, [r3, #16]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d104      	bne.n	800f8c2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800f8b8:	2300      	movs	r3, #0
 800f8ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f8bc:	68bb      	ldr	r3, [r7, #8]
 800f8be:	61bb      	str	r3, [r7, #24]
 800f8c0:	e003      	b.n	800f8ca <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800f8c2:	68bb      	ldr	r3, [r7, #8]
 800f8c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f8c6:	2300      	movs	r3, #0
 800f8c8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800f8ca:	e02a      	b.n	800f922 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f8cc:	683b      	ldr	r3, [r7, #0]
 800f8ce:	9300      	str	r3, [sp, #0]
 800f8d0:	697b      	ldr	r3, [r7, #20]
 800f8d2:	2200      	movs	r2, #0
 800f8d4:	2180      	movs	r1, #128	; 0x80
 800f8d6:	68f8      	ldr	r0, [r7, #12]
 800f8d8:	f001 feb5 	bl	8011646 <UART_WaitOnFlagUntilTimeout>
 800f8dc:	4603      	mov	r3, r0
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d001      	beq.n	800f8e6 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800f8e2:	2303      	movs	r3, #3
 800f8e4:	e036      	b.n	800f954 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800f8e6:	69fb      	ldr	r3, [r7, #28]
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d10b      	bne.n	800f904 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f8ec:	69bb      	ldr	r3, [r7, #24]
 800f8ee:	881b      	ldrh	r3, [r3, #0]
 800f8f0:	461a      	mov	r2, r3
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f8fa:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800f8fc:	69bb      	ldr	r3, [r7, #24]
 800f8fe:	3302      	adds	r3, #2
 800f900:	61bb      	str	r3, [r7, #24]
 800f902:	e007      	b.n	800f914 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800f904:	69fb      	ldr	r3, [r7, #28]
 800f906:	781a      	ldrb	r2, [r3, #0]
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800f90e:	69fb      	ldr	r3, [r7, #28]
 800f910:	3301      	adds	r3, #1
 800f912:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f918:	b29b      	uxth	r3, r3
 800f91a:	3b01      	subs	r3, #1
 800f91c:	b29a      	uxth	r2, r3
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f926:	b29b      	uxth	r3, r3
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d1cf      	bne.n	800f8cc <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f92c:	683b      	ldr	r3, [r7, #0]
 800f92e:	9300      	str	r3, [sp, #0]
 800f930:	697b      	ldr	r3, [r7, #20]
 800f932:	2200      	movs	r2, #0
 800f934:	2140      	movs	r1, #64	; 0x40
 800f936:	68f8      	ldr	r0, [r7, #12]
 800f938:	f001 fe85 	bl	8011646 <UART_WaitOnFlagUntilTimeout>
 800f93c:	4603      	mov	r3, r0
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d001      	beq.n	800f946 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800f942:	2303      	movs	r3, #3
 800f944:	e006      	b.n	800f954 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	2220      	movs	r2, #32
 800f94a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800f94e:	2300      	movs	r3, #0
 800f950:	e000      	b.n	800f954 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800f952:	2302      	movs	r3, #2
  }
}
 800f954:	4618      	mov	r0, r3
 800f956:	3720      	adds	r7, #32
 800f958:	46bd      	mov	sp, r7
 800f95a:	bd80      	pop	{r7, pc}

0800f95c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f95c:	b580      	push	{r7, lr}
 800f95e:	b08a      	sub	sp, #40	; 0x28
 800f960:	af02      	add	r7, sp, #8
 800f962:	60f8      	str	r0, [r7, #12]
 800f964:	60b9      	str	r1, [r7, #8]
 800f966:	603b      	str	r3, [r7, #0]
 800f968:	4613      	mov	r3, r2
 800f96a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800f96c:	2300      	movs	r3, #0
 800f96e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f976:	b2db      	uxtb	r3, r3
 800f978:	2b20      	cmp	r3, #32
 800f97a:	d17c      	bne.n	800fa76 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800f97c:	68bb      	ldr	r3, [r7, #8]
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d002      	beq.n	800f988 <HAL_UART_Receive+0x2c>
 800f982:	88fb      	ldrh	r3, [r7, #6]
 800f984:	2b00      	cmp	r3, #0
 800f986:	d101      	bne.n	800f98c <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 800f988:	2301      	movs	r3, #1
 800f98a:	e075      	b.n	800fa78 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	2200      	movs	r2, #0
 800f990:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	2222      	movs	r2, #34	; 0x22
 800f996:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	2200      	movs	r2, #0
 800f99e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f9a0:	f7f2 fe58 	bl	8002654 <HAL_GetTick>
 800f9a4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	88fa      	ldrh	r2, [r7, #6]
 800f9aa:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	88fa      	ldrh	r2, [r7, #6]
 800f9b0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	689b      	ldr	r3, [r3, #8]
 800f9b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f9ba:	d108      	bne.n	800f9ce <HAL_UART_Receive+0x72>
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	691b      	ldr	r3, [r3, #16]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d104      	bne.n	800f9ce <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 800f9c4:	2300      	movs	r3, #0
 800f9c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f9c8:	68bb      	ldr	r3, [r7, #8]
 800f9ca:	61bb      	str	r3, [r7, #24]
 800f9cc:	e003      	b.n	800f9d6 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 800f9ce:	68bb      	ldr	r3, [r7, #8]
 800f9d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f9d2:	2300      	movs	r3, #0
 800f9d4:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800f9d6:	e043      	b.n	800fa60 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800f9d8:	683b      	ldr	r3, [r7, #0]
 800f9da:	9300      	str	r3, [sp, #0]
 800f9dc:	697b      	ldr	r3, [r7, #20]
 800f9de:	2200      	movs	r2, #0
 800f9e0:	2120      	movs	r1, #32
 800f9e2:	68f8      	ldr	r0, [r7, #12]
 800f9e4:	f001 fe2f 	bl	8011646 <UART_WaitOnFlagUntilTimeout>
 800f9e8:	4603      	mov	r3, r0
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d001      	beq.n	800f9f2 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 800f9ee:	2303      	movs	r3, #3
 800f9f0:	e042      	b.n	800fa78 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 800f9f2:	69fb      	ldr	r3, [r7, #28]
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d10c      	bne.n	800fa12 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	685b      	ldr	r3, [r3, #4]
 800f9fe:	b29b      	uxth	r3, r3
 800fa00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fa04:	b29a      	uxth	r2, r3
 800fa06:	69bb      	ldr	r3, [r7, #24]
 800fa08:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800fa0a:	69bb      	ldr	r3, [r7, #24]
 800fa0c:	3302      	adds	r3, #2
 800fa0e:	61bb      	str	r3, [r7, #24]
 800fa10:	e01f      	b.n	800fa52 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	689b      	ldr	r3, [r3, #8]
 800fa16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fa1a:	d007      	beq.n	800fa2c <HAL_UART_Receive+0xd0>
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	689b      	ldr	r3, [r3, #8]
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d10a      	bne.n	800fa3a <HAL_UART_Receive+0xde>
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	691b      	ldr	r3, [r3, #16]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d106      	bne.n	800fa3a <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	685b      	ldr	r3, [r3, #4]
 800fa32:	b2da      	uxtb	r2, r3
 800fa34:	69fb      	ldr	r3, [r7, #28]
 800fa36:	701a      	strb	r2, [r3, #0]
 800fa38:	e008      	b.n	800fa4c <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	685b      	ldr	r3, [r3, #4]
 800fa40:	b2db      	uxtb	r3, r3
 800fa42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fa46:	b2da      	uxtb	r2, r3
 800fa48:	69fb      	ldr	r3, [r7, #28]
 800fa4a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800fa4c:	69fb      	ldr	r3, [r7, #28]
 800fa4e:	3301      	adds	r3, #1
 800fa50:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800fa56:	b29b      	uxth	r3, r3
 800fa58:	3b01      	subs	r3, #1
 800fa5a:	b29a      	uxth	r2, r3
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800fa64:	b29b      	uxth	r3, r3
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d1b6      	bne.n	800f9d8 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	2220      	movs	r2, #32
 800fa6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 800fa72:	2300      	movs	r3, #0
 800fa74:	e000      	b.n	800fa78 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800fa76:	2302      	movs	r3, #2
  }
}
 800fa78:	4618      	mov	r0, r3
 800fa7a:	3720      	adds	r7, #32
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	bd80      	pop	{r7, pc}

0800fa80 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800fa80:	b480      	push	{r7}
 800fa82:	b085      	sub	sp, #20
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	60f8      	str	r0, [r7, #12]
 800fa88:	60b9      	str	r1, [r7, #8]
 800fa8a:	4613      	mov	r3, r2
 800fa8c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fa94:	b2db      	uxtb	r3, r3
 800fa96:	2b20      	cmp	r3, #32
 800fa98:	d121      	bne.n	800fade <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800fa9a:	68bb      	ldr	r3, [r7, #8]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d002      	beq.n	800faa6 <HAL_UART_Transmit_IT+0x26>
 800faa0:	88fb      	ldrh	r3, [r7, #6]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d101      	bne.n	800faaa <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800faa6:	2301      	movs	r3, #1
 800faa8:	e01a      	b.n	800fae0 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	68ba      	ldr	r2, [r7, #8]
 800faae:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	88fa      	ldrh	r2, [r7, #6]
 800fab4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	88fa      	ldrh	r2, [r7, #6]
 800faba:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	2200      	movs	r2, #0
 800fac0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	2221      	movs	r2, #33	; 0x21
 800fac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	68da      	ldr	r2, [r3, #12]
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800fad8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800fada:	2300      	movs	r3, #0
 800fadc:	e000      	b.n	800fae0 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800fade:	2302      	movs	r3, #2
  }
}
 800fae0:	4618      	mov	r0, r3
 800fae2:	3714      	adds	r7, #20
 800fae4:	46bd      	mov	sp, r7
 800fae6:	bc80      	pop	{r7}
 800fae8:	4770      	bx	lr

0800faea <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800faea:	b580      	push	{r7, lr}
 800faec:	b084      	sub	sp, #16
 800faee:	af00      	add	r7, sp, #0
 800faf0:	60f8      	str	r0, [r7, #12]
 800faf2:	60b9      	str	r1, [r7, #8]
 800faf4:	4613      	mov	r3, r2
 800faf6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fafe:	b2db      	uxtb	r3, r3
 800fb00:	2b20      	cmp	r3, #32
 800fb02:	d112      	bne.n	800fb2a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800fb04:	68bb      	ldr	r3, [r7, #8]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d002      	beq.n	800fb10 <HAL_UART_Receive_IT+0x26>
 800fb0a:	88fb      	ldrh	r3, [r7, #6]
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d101      	bne.n	800fb14 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800fb10:	2301      	movs	r3, #1
 800fb12:	e00b      	b.n	800fb2c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	2200      	movs	r2, #0
 800fb18:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800fb1a:	88fb      	ldrh	r3, [r7, #6]
 800fb1c:	461a      	mov	r2, r3
 800fb1e:	68b9      	ldr	r1, [r7, #8]
 800fb20:	68f8      	ldr	r0, [r7, #12]
 800fb22:	f001 fdfe 	bl	8011722 <UART_Start_Receive_IT>
 800fb26:	4603      	mov	r3, r0
 800fb28:	e000      	b.n	800fb2c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800fb2a:	2302      	movs	r3, #2
  }
}
 800fb2c:	4618      	mov	r0, r3
 800fb2e:	3710      	adds	r7, #16
 800fb30:	46bd      	mov	sp, r7
 800fb32:	bd80      	pop	{r7, pc}

0800fb34 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800fb34:	b580      	push	{r7, lr}
 800fb36:	b08c      	sub	sp, #48	; 0x30
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	60f8      	str	r0, [r7, #12]
 800fb3c:	60b9      	str	r1, [r7, #8]
 800fb3e:	4613      	mov	r3, r2
 800fb40:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fb48:	b2db      	uxtb	r3, r3
 800fb4a:	2b20      	cmp	r3, #32
 800fb4c:	d156      	bne.n	800fbfc <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800fb4e:	68bb      	ldr	r3, [r7, #8]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d002      	beq.n	800fb5a <HAL_UART_Transmit_DMA+0x26>
 800fb54:	88fb      	ldrh	r3, [r7, #6]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d101      	bne.n	800fb5e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800fb5a:	2301      	movs	r3, #1
 800fb5c:	e04f      	b.n	800fbfe <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800fb5e:	68ba      	ldr	r2, [r7, #8]
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	88fa      	ldrh	r2, [r7, #6]
 800fb68:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	88fa      	ldrh	r2, [r7, #6]
 800fb6e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	2200      	movs	r2, #0
 800fb74:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	2221      	movs	r2, #33	; 0x21
 800fb7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb82:	4a21      	ldr	r2, [pc, #132]	; (800fc08 <HAL_UART_Transmit_DMA+0xd4>)
 800fb84:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb8a:	4a20      	ldr	r2, [pc, #128]	; (800fc0c <HAL_UART_Transmit_DMA+0xd8>)
 800fb8c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb92:	4a1f      	ldr	r2, [pc, #124]	; (800fc10 <HAL_UART_Transmit_DMA+0xdc>)
 800fb94:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb9a:	2200      	movs	r2, #0
 800fb9c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 800fb9e:	f107 0308 	add.w	r3, r7, #8
 800fba2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800fba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbaa:	6819      	ldr	r1, [r3, #0]
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	3304      	adds	r3, #4
 800fbb2:	461a      	mov	r2, r3
 800fbb4:	88fb      	ldrh	r3, [r7, #6]
 800fbb6:	f7f3 faa4 	bl	8003102 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800fbc2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	3314      	adds	r3, #20
 800fbca:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbcc:	69bb      	ldr	r3, [r7, #24]
 800fbce:	e853 3f00 	ldrex	r3, [r3]
 800fbd2:	617b      	str	r3, [r7, #20]
   return(result);
 800fbd4:	697b      	ldr	r3, [r7, #20]
 800fbd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fbda:	62bb      	str	r3, [r7, #40]	; 0x28
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	3314      	adds	r3, #20
 800fbe2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fbe4:	627a      	str	r2, [r7, #36]	; 0x24
 800fbe6:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbe8:	6a39      	ldr	r1, [r7, #32]
 800fbea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fbec:	e841 2300 	strex	r3, r2, [r1]
 800fbf0:	61fb      	str	r3, [r7, #28]
   return(result);
 800fbf2:	69fb      	ldr	r3, [r7, #28]
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d1e5      	bne.n	800fbc4 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800fbf8:	2300      	movs	r3, #0
 800fbfa:	e000      	b.n	800fbfe <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800fbfc:	2302      	movs	r3, #2
  }
}
 800fbfe:	4618      	mov	r0, r3
 800fc00:	3730      	adds	r7, #48	; 0x30
 800fc02:	46bd      	mov	sp, r7
 800fc04:	bd80      	pop	{r7, pc}
 800fc06:	bf00      	nop
 800fc08:	08011395 	.word	0x08011395
 800fc0c:	0801142f 	.word	0x0801142f
 800fc10:	080115b3 	.word	0x080115b3

0800fc14 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b084      	sub	sp, #16
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	60f8      	str	r0, [r7, #12]
 800fc1c:	60b9      	str	r1, [r7, #8]
 800fc1e:	4613      	mov	r3, r2
 800fc20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fc28:	b2db      	uxtb	r3, r3
 800fc2a:	2b20      	cmp	r3, #32
 800fc2c:	d112      	bne.n	800fc54 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800fc2e:	68bb      	ldr	r3, [r7, #8]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d002      	beq.n	800fc3a <HAL_UART_Receive_DMA+0x26>
 800fc34:	88fb      	ldrh	r3, [r7, #6]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d101      	bne.n	800fc3e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800fc3a:	2301      	movs	r3, #1
 800fc3c:	e00b      	b.n	800fc56 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	2200      	movs	r2, #0
 800fc42:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800fc44:	88fb      	ldrh	r3, [r7, #6]
 800fc46:	461a      	mov	r2, r3
 800fc48:	68b9      	ldr	r1, [r7, #8]
 800fc4a:	68f8      	ldr	r0, [r7, #12]
 800fc4c:	f001 fda2 	bl	8011794 <UART_Start_Receive_DMA>
 800fc50:	4603      	mov	r3, r0
 800fc52:	e000      	b.n	800fc56 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800fc54:	2302      	movs	r3, #2
  }
}
 800fc56:	4618      	mov	r0, r3
 800fc58:	3710      	adds	r7, #16
 800fc5a:	46bd      	mov	sp, r7
 800fc5c:	bd80      	pop	{r7, pc}

0800fc5e <HAL_UART_DMAPause>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 800fc5e:	b480      	push	{r7}
 800fc60:	b09d      	sub	sp, #116	; 0x74
 800fc62:	af00      	add	r7, sp, #0
 800fc64:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800fc66:	2300      	movs	r3, #0
 800fc68:	66fb      	str	r3, [r7, #108]	; 0x6c

  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	695b      	ldr	r3, [r3, #20]
 800fc70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc74:	2b80      	cmp	r3, #128	; 0x80
 800fc76:	bf0c      	ite	eq
 800fc78:	2301      	moveq	r3, #1
 800fc7a:	2300      	movne	r3, #0
 800fc7c:	b2db      	uxtb	r3, r3
 800fc7e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fc86:	b2db      	uxtb	r3, r3
 800fc88:	2b21      	cmp	r3, #33	; 0x21
 800fc8a:	d11c      	bne.n	800fcc6 <HAL_UART_DMAPause+0x68>
 800fc8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d019      	beq.n	800fcc6 <HAL_UART_DMAPause+0x68>
  {
    /* Disable the UART DMA Tx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	3314      	adds	r3, #20
 800fc98:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc9c:	e853 3f00 	ldrex	r3, [r3]
 800fca0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800fca2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fca4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fca8:	66bb      	str	r3, [r7, #104]	; 0x68
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	3314      	adds	r3, #20
 800fcb0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fcb2:	65ba      	str	r2, [r7, #88]	; 0x58
 800fcb4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcb6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fcb8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fcba:	e841 2300 	strex	r3, r2, [r1]
 800fcbe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800fcc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d1e5      	bne.n	800fc92 <HAL_UART_DMAPause+0x34>
  }

  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	695b      	ldr	r3, [r3, #20]
 800fccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fcd0:	2b40      	cmp	r3, #64	; 0x40
 800fcd2:	bf0c      	ite	eq
 800fcd4:	2301      	moveq	r3, #1
 800fcd6:	2300      	movne	r3, #0
 800fcd8:	b2db      	uxtb	r3, r3
 800fcda:	66fb      	str	r3, [r7, #108]	; 0x6c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fce2:	b2db      	uxtb	r3, r3
 800fce4:	2b22      	cmp	r3, #34	; 0x22
 800fce6:	d150      	bne.n	800fd8a <HAL_UART_DMAPause+0x12c>
 800fce8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d04d      	beq.n	800fd8a <HAL_UART_DMAPause+0x12c>
  {
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	330c      	adds	r3, #12
 800fcf4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcf8:	e853 3f00 	ldrex	r3, [r3]
 800fcfc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fcfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fd04:	667b      	str	r3, [r7, #100]	; 0x64
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	330c      	adds	r3, #12
 800fd0c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fd0e:	647a      	str	r2, [r7, #68]	; 0x44
 800fd10:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd12:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fd14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fd16:	e841 2300 	strex	r3, r2, [r1]
 800fd1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fd1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d1e5      	bne.n	800fcee <HAL_UART_DMAPause+0x90>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	3314      	adds	r3, #20
 800fd28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd2c:	e853 3f00 	ldrex	r3, [r3]
 800fd30:	623b      	str	r3, [r7, #32]
   return(result);
 800fd32:	6a3b      	ldr	r3, [r7, #32]
 800fd34:	f023 0301 	bic.w	r3, r3, #1
 800fd38:	663b      	str	r3, [r7, #96]	; 0x60
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	3314      	adds	r3, #20
 800fd40:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fd42:	633a      	str	r2, [r7, #48]	; 0x30
 800fd44:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fd48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd4a:	e841 2300 	strex	r3, r2, [r1]
 800fd4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fd50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d1e5      	bne.n	800fd22 <HAL_UART_DMAPause+0xc4>

    /* Disable the UART DMA Rx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	3314      	adds	r3, #20
 800fd5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd5e:	693b      	ldr	r3, [r7, #16]
 800fd60:	e853 3f00 	ldrex	r3, [r3]
 800fd64:	60fb      	str	r3, [r7, #12]
   return(result);
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fd6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	3314      	adds	r3, #20
 800fd74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fd76:	61fa      	str	r2, [r7, #28]
 800fd78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd7a:	69b9      	ldr	r1, [r7, #24]
 800fd7c:	69fa      	ldr	r2, [r7, #28]
 800fd7e:	e841 2300 	strex	r3, r2, [r1]
 800fd82:	617b      	str	r3, [r7, #20]
   return(result);
 800fd84:	697b      	ldr	r3, [r7, #20]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d1e5      	bne.n	800fd56 <HAL_UART_DMAPause+0xf8>
  }

  return HAL_OK;
 800fd8a:	2300      	movs	r3, #0
}
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	3774      	adds	r7, #116	; 0x74
 800fd90:	46bd      	mov	sp, r7
 800fd92:	bc80      	pop	{r7}
 800fd94:	4770      	bx	lr

0800fd96 <HAL_UART_DMAResume>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 800fd96:	b480      	push	{r7}
 800fd98:	b09d      	sub	sp, #116	; 0x74
 800fd9a:	af00      	add	r7, sp, #0
 800fd9c:	6078      	str	r0, [r7, #4]

  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fda4:	b2db      	uxtb	r3, r3
 800fda6:	2b21      	cmp	r3, #33	; 0x21
 800fda8:	d119      	bne.n	800fdde <HAL_UART_DMAResume+0x48>
  {
    /* Enable the UART DMA Tx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	3314      	adds	r3, #20
 800fdb0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fdb4:	e853 3f00 	ldrex	r3, [r3]
 800fdb8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800fdba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fdbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fdc0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	3314      	adds	r3, #20
 800fdc8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800fdca:	65fa      	str	r2, [r7, #92]	; 0x5c
 800fdcc:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fdd0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fdd2:	e841 2300 	strex	r3, r2, [r1]
 800fdd6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800fdd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d1e5      	bne.n	800fdaa <HAL_UART_DMAResume+0x14>
  }

  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fde4:	b2db      	uxtb	r3, r3
 800fde6:	2b22      	cmp	r3, #34	; 0x22
 800fde8:	d15c      	bne.n	800fea4 <HAL_UART_DMAResume+0x10e>
  {
    /* Clear the Overrun flag before resuming the Rx transfer*/
    __HAL_UART_CLEAR_OREFLAG(huart);
 800fdea:	2300      	movs	r3, #0
 800fdec:	60fb      	str	r3, [r7, #12]
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	60fb      	str	r3, [r7, #12]
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	685b      	ldr	r3, [r3, #4]
 800fdfc:	60fb      	str	r3, [r7, #12]
 800fdfe:	68fb      	ldr	r3, [r7, #12]

    /* Re-enable PE and ERR (Frame error, noise error, overrun error) interrupts */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	691b      	ldr	r3, [r3, #16]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d019      	beq.n	800fe3c <HAL_UART_DMAResume+0xa6>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	330c      	adds	r3, #12
 800fe0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe12:	e853 3f00 	ldrex	r3, [r3]
 800fe16:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fe18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fe1e:	66bb      	str	r3, [r7, #104]	; 0x68
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	330c      	adds	r3, #12
 800fe26:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fe28:	64ba      	str	r2, [r7, #72]	; 0x48
 800fe2a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe2c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fe2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fe30:	e841 2300 	strex	r3, r2, [r1]
 800fe34:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800fe36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d1e5      	bne.n	800fe08 <HAL_UART_DMAResume+0x72>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	3314      	adds	r3, #20
 800fe42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe46:	e853 3f00 	ldrex	r3, [r3]
 800fe4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fe4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe4e:	f043 0301 	orr.w	r3, r3, #1
 800fe52:	667b      	str	r3, [r7, #100]	; 0x64
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	3314      	adds	r3, #20
 800fe5a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fe5c:	637a      	str	r2, [r7, #52]	; 0x34
 800fe5e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fe62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fe64:	e841 2300 	strex	r3, r2, [r1]
 800fe68:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800fe6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d1e5      	bne.n	800fe3c <HAL_UART_DMAResume+0xa6>

    /* Enable the UART DMA Rx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	3314      	adds	r3, #20
 800fe76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe78:	697b      	ldr	r3, [r7, #20]
 800fe7a:	e853 3f00 	ldrex	r3, [r3]
 800fe7e:	613b      	str	r3, [r7, #16]
   return(result);
 800fe80:	693b      	ldr	r3, [r7, #16]
 800fe82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe86:	663b      	str	r3, [r7, #96]	; 0x60
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	3314      	adds	r3, #20
 800fe8e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fe90:	623a      	str	r2, [r7, #32]
 800fe92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe94:	69f9      	ldr	r1, [r7, #28]
 800fe96:	6a3a      	ldr	r2, [r7, #32]
 800fe98:	e841 2300 	strex	r3, r2, [r1]
 800fe9c:	61bb      	str	r3, [r7, #24]
   return(result);
 800fe9e:	69bb      	ldr	r3, [r7, #24]
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d1e5      	bne.n	800fe70 <HAL_UART_DMAResume+0xda>
  }

  return HAL_OK;
 800fea4:	2300      	movs	r3, #0
}
 800fea6:	4618      	mov	r0, r3
 800fea8:	3774      	adds	r7, #116	; 0x74
 800feaa:	46bd      	mov	sp, r7
 800feac:	bc80      	pop	{r7}
 800feae:	4770      	bx	lr

0800feb0 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800feb0:	b580      	push	{r7, lr}
 800feb2:	b090      	sub	sp, #64	; 0x40
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800feb8:	2300      	movs	r3, #0
 800feba:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	695b      	ldr	r3, [r3, #20]
 800fec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fec6:	2b80      	cmp	r3, #128	; 0x80
 800fec8:	bf0c      	ite	eq
 800feca:	2301      	moveq	r3, #1
 800fecc:	2300      	movne	r3, #0
 800fece:	b2db      	uxtb	r3, r3
 800fed0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fed8:	b2db      	uxtb	r3, r3
 800feda:	2b21      	cmp	r3, #33	; 0x21
 800fedc:	d128      	bne.n	800ff30 <HAL_UART_DMAStop+0x80>
 800fede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d025      	beq.n	800ff30 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	3314      	adds	r3, #20
 800feea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800feec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feee:	e853 3f00 	ldrex	r3, [r3]
 800fef2:	623b      	str	r3, [r7, #32]
   return(result);
 800fef4:	6a3b      	ldr	r3, [r7, #32]
 800fef6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fefa:	63bb      	str	r3, [r7, #56]	; 0x38
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	3314      	adds	r3, #20
 800ff02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ff04:	633a      	str	r2, [r7, #48]	; 0x30
 800ff06:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ff0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ff0c:	e841 2300 	strex	r3, r2, [r1]
 800ff10:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ff12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d1e5      	bne.n	800fee4 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d004      	beq.n	800ff2a <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff24:	4618      	mov	r0, r3
 800ff26:	f7f3 f94c 	bl	80031c2 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800ff2a:	6878      	ldr	r0, [r7, #4]
 800ff2c:	f001 fccc 	bl	80118c8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	695b      	ldr	r3, [r3, #20]
 800ff36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff3a:	2b40      	cmp	r3, #64	; 0x40
 800ff3c:	bf0c      	ite	eq
 800ff3e:	2301      	moveq	r3, #1
 800ff40:	2300      	movne	r3, #0
 800ff42:	b2db      	uxtb	r3, r3
 800ff44:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ff4c:	b2db      	uxtb	r3, r3
 800ff4e:	2b22      	cmp	r3, #34	; 0x22
 800ff50:	d128      	bne.n	800ffa4 <HAL_UART_DMAStop+0xf4>
 800ff52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d025      	beq.n	800ffa4 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	3314      	adds	r3, #20
 800ff5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff60:	693b      	ldr	r3, [r7, #16]
 800ff62:	e853 3f00 	ldrex	r3, [r3]
 800ff66:	60fb      	str	r3, [r7, #12]
   return(result);
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ff6e:	637b      	str	r3, [r7, #52]	; 0x34
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	3314      	adds	r3, #20
 800ff76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff78:	61fa      	str	r2, [r7, #28]
 800ff7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff7c:	69b9      	ldr	r1, [r7, #24]
 800ff7e:	69fa      	ldr	r2, [r7, #28]
 800ff80:	e841 2300 	strex	r3, r2, [r1]
 800ff84:	617b      	str	r3, [r7, #20]
   return(result);
 800ff86:	697b      	ldr	r3, [r7, #20]
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d1e5      	bne.n	800ff58 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d004      	beq.n	800ff9e <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ff98:	4618      	mov	r0, r3
 800ff9a:	f7f3 f912 	bl	80031c2 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800ff9e:	6878      	ldr	r0, [r7, #4]
 800ffa0:	f001 fcb9 	bl	8011916 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800ffa4:	2300      	movs	r3, #0
}
 800ffa6:	4618      	mov	r0, r3
 800ffa8:	3740      	adds	r7, #64	; 0x40
 800ffaa:	46bd      	mov	sp, r7
 800ffac:	bd80      	pop	{r7, pc}

0800ffae <HAL_UARTEx_ReceiveToIdle>:
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen,
                                           uint32_t Timeout)
{
 800ffae:	b580      	push	{r7, lr}
 800ffb0:	b088      	sub	sp, #32
 800ffb2:	af00      	add	r7, sp, #0
 800ffb4:	60f8      	str	r0, [r7, #12]
 800ffb6:	60b9      	str	r1, [r7, #8]
 800ffb8:	603b      	str	r3, [r7, #0]
 800ffba:	4613      	mov	r3, r2
 800ffbc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ffc4:	b2db      	uxtb	r3, r3
 800ffc6:	2b20      	cmp	r3, #32
 800ffc8:	f040 80c0 	bne.w	801014c <HAL_UARTEx_ReceiveToIdle+0x19e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ffcc:	68bb      	ldr	r3, [r7, #8]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d002      	beq.n	800ffd8 <HAL_UARTEx_ReceiveToIdle+0x2a>
 800ffd2:	88fb      	ldrh	r3, [r7, #6]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d101      	bne.n	800ffdc <HAL_UARTEx_ReceiveToIdle+0x2e>
    {
      return  HAL_ERROR;
 800ffd8:	2301      	movs	r3, #1
 800ffda:	e0b8      	b.n	801014e <HAL_UARTEx_ReceiveToIdle+0x1a0>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	2200      	movs	r2, #0
 800ffe0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	2222      	movs	r2, #34	; 0x22
 800ffe6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	2201      	movs	r2, #1
 800ffee:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	2200      	movs	r2, #0
 800fff4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800fff6:	f7f2 fb2d 	bl	8002654 <HAL_GetTick>
 800fffa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	88fa      	ldrh	r2, [r7, #6]
 8010000:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	88fa      	ldrh	r2, [r7, #6]
 8010006:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	689b      	ldr	r3, [r3, #8]
 801000c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010010:	d108      	bne.n	8010024 <HAL_UARTEx_ReceiveToIdle+0x76>
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	691b      	ldr	r3, [r3, #16]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d104      	bne.n	8010024 <HAL_UARTEx_ReceiveToIdle+0x76>
    {
      pdata8bits  = NULL;
 801001a:	2300      	movs	r3, #0
 801001c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 801001e:	68bb      	ldr	r3, [r7, #8]
 8010020:	61bb      	str	r3, [r7, #24]
 8010022:	e003      	b.n	801002c <HAL_UARTEx_ReceiveToIdle+0x7e>
    }
    else
    {
      pdata8bits  = pData;
 8010024:	68bb      	ldr	r3, [r7, #8]
 8010026:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010028:	2300      	movs	r3, #0
 801002a:	61bb      	str	r3, [r7, #24]
    }

    /* Initialize output number of received elements */
    *RxLen = 0U;
 801002c:	683b      	ldr	r3, [r7, #0]
 801002e:	2200      	movs	r2, #0
 8010030:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8010032:	e077      	b.n	8010124 <HAL_UARTEx_ReceiveToIdle+0x176>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	f003 0310 	and.w	r3, r3, #16
 801003e:	2b10      	cmp	r3, #16
 8010040:	d117      	bne.n	8010072 <HAL_UARTEx_ReceiveToIdle+0xc4>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8010042:	2300      	movs	r3, #0
 8010044:	613b      	str	r3, [r7, #16]
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	613b      	str	r3, [r7, #16]
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	685b      	ldr	r3, [r3, #4]
 8010054:	613b      	str	r3, [r7, #16]
 8010056:	693b      	ldr	r3, [r7, #16]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 8010058:	683b      	ldr	r3, [r7, #0]
 801005a:	881b      	ldrh	r3, [r3, #0]
 801005c:	2b00      	cmp	r3, #0
 801005e:	d008      	beq.n	8010072 <HAL_UARTEx_ReceiveToIdle+0xc4>
        {
          huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	2202      	movs	r2, #2
 8010064:	635a      	str	r2, [r3, #52]	; 0x34
          huart->RxState = HAL_UART_STATE_READY;
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	2220      	movs	r2, #32
 801006a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          return HAL_OK;
 801006e:	2300      	movs	r3, #0
 8010070:	e06d      	b.n	801014e <HAL_UARTEx_ReceiveToIdle+0x1a0>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	f003 0320 	and.w	r3, r3, #32
 801007c:	2b20      	cmp	r3, #32
 801007e:	d13c      	bne.n	80100fa <HAL_UARTEx_ReceiveToIdle+0x14c>
      {
        if (pdata8bits == NULL)
 8010080:	69fb      	ldr	r3, [r7, #28]
 8010082:	2b00      	cmp	r3, #0
 8010084:	d10c      	bne.n	80100a0 <HAL_UARTEx_ReceiveToIdle+0xf2>
        {
          *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	685b      	ldr	r3, [r3, #4]
 801008c:	b29b      	uxth	r3, r3
 801008e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010092:	b29a      	uxth	r2, r3
 8010094:	69bb      	ldr	r3, [r7, #24]
 8010096:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 8010098:	69bb      	ldr	r3, [r7, #24]
 801009a:	3302      	adds	r3, #2
 801009c:	61bb      	str	r3, [r7, #24]
 801009e:	e01f      	b.n	80100e0 <HAL_UARTEx_ReceiveToIdle+0x132>
        }
        else
        {
          if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	689b      	ldr	r3, [r3, #8]
 80100a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80100a8:	d007      	beq.n	80100ba <HAL_UARTEx_ReceiveToIdle+0x10c>
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	689b      	ldr	r3, [r3, #8]
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d10a      	bne.n	80100c8 <HAL_UARTEx_ReceiveToIdle+0x11a>
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	691b      	ldr	r3, [r3, #16]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d106      	bne.n	80100c8 <HAL_UARTEx_ReceiveToIdle+0x11a>
          {
            *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	685b      	ldr	r3, [r3, #4]
 80100c0:	b2da      	uxtb	r2, r3
 80100c2:	69fb      	ldr	r3, [r7, #28]
 80100c4:	701a      	strb	r2, [r3, #0]
 80100c6:	e008      	b.n	80100da <HAL_UARTEx_ReceiveToIdle+0x12c>
          }
          else
          {
            *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	685b      	ldr	r3, [r3, #4]
 80100ce:	b2db      	uxtb	r3, r3
 80100d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80100d4:	b2da      	uxtb	r2, r3
 80100d6:	69fb      	ldr	r3, [r7, #28]
 80100d8:	701a      	strb	r2, [r3, #0]
          }

          pdata8bits++;
 80100da:	69fb      	ldr	r3, [r7, #28]
 80100dc:	3301      	adds	r3, #1
 80100de:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 80100e0:	683b      	ldr	r3, [r7, #0]
 80100e2:	881b      	ldrh	r3, [r3, #0]
 80100e4:	3301      	adds	r3, #1
 80100e6:	b29a      	uxth	r2, r3
 80100e8:	683b      	ldr	r3, [r7, #0]
 80100ea:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80100f0:	b29b      	uxth	r3, r3
 80100f2:	3b01      	subs	r3, #1
 80100f4:	b29a      	uxth	r2, r3
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	85da      	strh	r2, [r3, #46]	; 0x2e
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80100fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010100:	d010      	beq.n	8010124 <HAL_UARTEx_ReceiveToIdle+0x176>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8010102:	f7f2 faa7 	bl	8002654 <HAL_GetTick>
 8010106:	4602      	mov	r2, r0
 8010108:	697b      	ldr	r3, [r7, #20]
 801010a:	1ad3      	subs	r3, r2, r3
 801010c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801010e:	429a      	cmp	r2, r3
 8010110:	d302      	bcc.n	8010118 <HAL_UARTEx_ReceiveToIdle+0x16a>
 8010112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010114:	2b00      	cmp	r3, #0
 8010116:	d105      	bne.n	8010124 <HAL_UARTEx_ReceiveToIdle+0x176>
        {
          huart->RxState = HAL_UART_STATE_READY;
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	2220      	movs	r2, #32
 801011c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          return HAL_TIMEOUT;
 8010120:	2303      	movs	r3, #3
 8010122:	e014      	b.n	801014e <HAL_UARTEx_ReceiveToIdle+0x1a0>
    while (huart->RxXferCount > 0U)
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010128:	b29b      	uxth	r3, r3
 801012a:	2b00      	cmp	r3, #0
 801012c:	d182      	bne.n	8010034 <HAL_UARTEx_ReceiveToIdle+0x86>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010136:	b29b      	uxth	r3, r3
 8010138:	1ad3      	subs	r3, r2, r3
 801013a:	b29a      	uxth	r2, r3
 801013c:	683b      	ldr	r3, [r7, #0]
 801013e:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	2220      	movs	r2, #32
 8010144:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8010148:	2300      	movs	r3, #0
 801014a:	e000      	b.n	801014e <HAL_UARTEx_ReceiveToIdle+0x1a0>
  }
  else
  {
    return HAL_BUSY;
 801014c:	2302      	movs	r3, #2
  }
}
 801014e:	4618      	mov	r0, r3
 8010150:	3720      	adds	r7, #32
 8010152:	46bd      	mov	sp, r7
 8010154:	bd80      	pop	{r7, pc}

08010156 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010156:	b580      	push	{r7, lr}
 8010158:	b08c      	sub	sp, #48	; 0x30
 801015a:	af00      	add	r7, sp, #0
 801015c:	60f8      	str	r0, [r7, #12]
 801015e:	60b9      	str	r1, [r7, #8]
 8010160:	4613      	mov	r3, r2
 8010162:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801016a:	b2db      	uxtb	r3, r3
 801016c:	2b20      	cmp	r3, #32
 801016e:	d14a      	bne.n	8010206 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8010170:	68bb      	ldr	r3, [r7, #8]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d002      	beq.n	801017c <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8010176:	88fb      	ldrh	r3, [r7, #6]
 8010178:	2b00      	cmp	r3, #0
 801017a:	d101      	bne.n	8010180 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 801017c:	2301      	movs	r3, #1
 801017e:	e043      	b.n	8010208 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	2201      	movs	r2, #1
 8010184:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	2200      	movs	r2, #0
 801018a:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 801018c:	88fb      	ldrh	r3, [r7, #6]
 801018e:	461a      	mov	r2, r3
 8010190:	68b9      	ldr	r1, [r7, #8]
 8010192:	68f8      	ldr	r0, [r7, #12]
 8010194:	f001 fac5 	bl	8011722 <UART_Start_Receive_IT>
 8010198:	4603      	mov	r3, r0
 801019a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 801019e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d12c      	bne.n	8010200 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101aa:	2b01      	cmp	r3, #1
 80101ac:	d125      	bne.n	80101fa <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80101ae:	2300      	movs	r3, #0
 80101b0:	613b      	str	r3, [r7, #16]
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	613b      	str	r3, [r7, #16]
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	685b      	ldr	r3, [r3, #4]
 80101c0:	613b      	str	r3, [r7, #16]
 80101c2:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	330c      	adds	r3, #12
 80101ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101cc:	69bb      	ldr	r3, [r7, #24]
 80101ce:	e853 3f00 	ldrex	r3, [r3]
 80101d2:	617b      	str	r3, [r7, #20]
   return(result);
 80101d4:	697b      	ldr	r3, [r7, #20]
 80101d6:	f043 0310 	orr.w	r3, r3, #16
 80101da:	62bb      	str	r3, [r7, #40]	; 0x28
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	330c      	adds	r3, #12
 80101e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80101e4:	627a      	str	r2, [r7, #36]	; 0x24
 80101e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101e8:	6a39      	ldr	r1, [r7, #32]
 80101ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80101ec:	e841 2300 	strex	r3, r2, [r1]
 80101f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80101f2:	69fb      	ldr	r3, [r7, #28]
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d1e5      	bne.n	80101c4 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 80101f8:	e002      	b.n	8010200 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80101fa:	2301      	movs	r3, #1
 80101fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8010200:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010204:	e000      	b.n	8010208 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8010206:	2302      	movs	r3, #2
  }
}
 8010208:	4618      	mov	r0, r3
 801020a:	3730      	adds	r7, #48	; 0x30
 801020c:	46bd      	mov	sp, r7
 801020e:	bd80      	pop	{r7, pc}

08010210 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010210:	b580      	push	{r7, lr}
 8010212:	b08c      	sub	sp, #48	; 0x30
 8010214:	af00      	add	r7, sp, #0
 8010216:	60f8      	str	r0, [r7, #12]
 8010218:	60b9      	str	r1, [r7, #8]
 801021a:	4613      	mov	r3, r2
 801021c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010224:	b2db      	uxtb	r3, r3
 8010226:	2b20      	cmp	r3, #32
 8010228:	d14a      	bne.n	80102c0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 801022a:	68bb      	ldr	r3, [r7, #8]
 801022c:	2b00      	cmp	r3, #0
 801022e:	d002      	beq.n	8010236 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8010230:	88fb      	ldrh	r3, [r7, #6]
 8010232:	2b00      	cmp	r3, #0
 8010234:	d101      	bne.n	801023a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8010236:	2301      	movs	r3, #1
 8010238:	e043      	b.n	80102c2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	2201      	movs	r2, #1
 801023e:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	2200      	movs	r2, #0
 8010244:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8010246:	88fb      	ldrh	r3, [r7, #6]
 8010248:	461a      	mov	r2, r3
 801024a:	68b9      	ldr	r1, [r7, #8]
 801024c:	68f8      	ldr	r0, [r7, #12]
 801024e:	f001 faa1 	bl	8011794 <UART_Start_Receive_DMA>
 8010252:	4603      	mov	r3, r0
 8010254:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8010258:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801025c:	2b00      	cmp	r3, #0
 801025e:	d12c      	bne.n	80102ba <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010264:	2b01      	cmp	r3, #1
 8010266:	d125      	bne.n	80102b4 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8010268:	2300      	movs	r3, #0
 801026a:	613b      	str	r3, [r7, #16]
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	613b      	str	r3, [r7, #16]
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	685b      	ldr	r3, [r3, #4]
 801027a:	613b      	str	r3, [r7, #16]
 801027c:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	330c      	adds	r3, #12
 8010284:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010286:	69bb      	ldr	r3, [r7, #24]
 8010288:	e853 3f00 	ldrex	r3, [r3]
 801028c:	617b      	str	r3, [r7, #20]
   return(result);
 801028e:	697b      	ldr	r3, [r7, #20]
 8010290:	f043 0310 	orr.w	r3, r3, #16
 8010294:	62bb      	str	r3, [r7, #40]	; 0x28
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	330c      	adds	r3, #12
 801029c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801029e:	627a      	str	r2, [r7, #36]	; 0x24
 80102a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102a2:	6a39      	ldr	r1, [r7, #32]
 80102a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80102a6:	e841 2300 	strex	r3, r2, [r1]
 80102aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80102ac:	69fb      	ldr	r3, [r7, #28]
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d1e5      	bne.n	801027e <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 80102b2:	e002      	b.n	80102ba <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80102b4:	2301      	movs	r3, #1
 80102b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80102ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80102be:	e000      	b.n	80102c2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80102c0:	2302      	movs	r3, #2
  }
}
 80102c2:	4618      	mov	r0, r3
 80102c4:	3730      	adds	r7, #48	; 0x30
 80102c6:	46bd      	mov	sp, r7
 80102c8:	bd80      	pop	{r7, pc}

080102ca <HAL_UARTEx_GetRxEventType>:
  *        When DMA is configured in Circular Mode, HT, TC or IDLE events don't stop Reception process;
  * @param  huart UART handle.
  * @retval Rx Event Type (returned value will be a value of @ref UART_RxEvent_Type_Values)
  */
HAL_UART_RxEventTypeTypeDef HAL_UARTEx_GetRxEventType(UART_HandleTypeDef *huart)
{
 80102ca:	b480      	push	{r7}
 80102cc:	b083      	sub	sp, #12
 80102ce:	af00      	add	r7, sp, #0
 80102d0:	6078      	str	r0, [r7, #4]
  /* Return Rx Event type value, as stored in UART handle */
  return(huart->RxEventType);
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 80102d6:	4618      	mov	r0, r3
 80102d8:	370c      	adds	r7, #12
 80102da:	46bd      	mov	sp, r7
 80102dc:	bc80      	pop	{r7}
 80102de:	4770      	bx	lr

080102e0 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 80102e0:	b580      	push	{r7, lr}
 80102e2:	b0a0      	sub	sp, #128	; 0x80
 80102e4:	af00      	add	r7, sp, #0
 80102e6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	330c      	adds	r3, #12
 80102ee:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80102f2:	e853 3f00 	ldrex	r3, [r3]
 80102f6:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80102f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80102fa:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 80102fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	330c      	adds	r3, #12
 8010306:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010308:	66ba      	str	r2, [r7, #104]	; 0x68
 801030a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801030c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801030e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010310:	e841 2300 	strex	r3, r2, [r1]
 8010314:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8010316:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010318:	2b00      	cmp	r3, #0
 801031a:	d1e5      	bne.n	80102e8 <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	3314      	adds	r3, #20
 8010322:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010324:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010326:	e853 3f00 	ldrex	r3, [r3]
 801032a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801032c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801032e:	f023 0301 	bic.w	r3, r3, #1
 8010332:	67bb      	str	r3, [r7, #120]	; 0x78
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	3314      	adds	r3, #20
 801033a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801033c:	657a      	str	r2, [r7, #84]	; 0x54
 801033e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010340:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010342:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010344:	e841 2300 	strex	r3, r2, [r1]
 8010348:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801034a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801034c:	2b00      	cmp	r3, #0
 801034e:	d1e5      	bne.n	801031c <HAL_UART_Abort+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010354:	2b01      	cmp	r3, #1
 8010356:	d119      	bne.n	801038c <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	330c      	adds	r3, #12
 801035e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010362:	e853 3f00 	ldrex	r3, [r3]
 8010366:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801036a:	f023 0310 	bic.w	r3, r3, #16
 801036e:	677b      	str	r3, [r7, #116]	; 0x74
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	330c      	adds	r3, #12
 8010376:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8010378:	643a      	str	r2, [r7, #64]	; 0x40
 801037a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801037c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801037e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010380:	e841 2300 	strex	r3, r2, [r1]
 8010384:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010388:	2b00      	cmp	r3, #0
 801038a:	d1e5      	bne.n	8010358 <HAL_UART_Abort+0x78>
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	695b      	ldr	r3, [r3, #20]
 8010392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010396:	2b80      	cmp	r3, #128	; 0x80
 8010398:	d136      	bne.n	8010408 <HAL_UART_Abort+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	3314      	adds	r3, #20
 80103a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103a2:	6a3b      	ldr	r3, [r7, #32]
 80103a4:	e853 3f00 	ldrex	r3, [r3]
 80103a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80103aa:	69fb      	ldr	r3, [r7, #28]
 80103ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80103b0:	673b      	str	r3, [r7, #112]	; 0x70
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	3314      	adds	r3, #20
 80103b8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80103ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80103bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80103c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80103c2:	e841 2300 	strex	r3, r2, [r1]
 80103c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80103c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d1e5      	bne.n	801039a <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx channel: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d018      	beq.n	8010408 <HAL_UART_Abort+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103da:	2200      	movs	r2, #0
 80103dc:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103e2:	4618      	mov	r0, r3
 80103e4:	f7f2 feed 	bl	80031c2 <HAL_DMA_Abort>
 80103e8:	4603      	mov	r3, r0
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d00c      	beq.n	8010408 <HAL_UART_Abort+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103f2:	4618      	mov	r0, r3
 80103f4:	f7f3 f965 	bl	80036c2 <HAL_DMA_GetError>
 80103f8:	4603      	mov	r3, r0
 80103fa:	2b20      	cmp	r3, #32
 80103fc:	d104      	bne.n	8010408 <HAL_UART_Abort+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	2210      	movs	r2, #16
 8010402:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_TIMEOUT;
 8010404:	2303      	movs	r3, #3
 8010406:	e052      	b.n	80104ae <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	695b      	ldr	r3, [r3, #20]
 801040e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010412:	2b40      	cmp	r3, #64	; 0x40
 8010414:	d136      	bne.n	8010484 <HAL_UART_Abort+0x1a4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	3314      	adds	r3, #20
 801041c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	e853 3f00 	ldrex	r3, [r3]
 8010424:	60bb      	str	r3, [r7, #8]
   return(result);
 8010426:	68bb      	ldr	r3, [r7, #8]
 8010428:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801042c:	66fb      	str	r3, [r7, #108]	; 0x6c
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	3314      	adds	r3, #20
 8010434:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010436:	61ba      	str	r2, [r7, #24]
 8010438:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801043a:	6979      	ldr	r1, [r7, #20]
 801043c:	69ba      	ldr	r2, [r7, #24]
 801043e:	e841 2300 	strex	r3, r2, [r1]
 8010442:	613b      	str	r3, [r7, #16]
   return(result);
 8010444:	693b      	ldr	r3, [r7, #16]
 8010446:	2b00      	cmp	r3, #0
 8010448:	d1e5      	bne.n	8010416 <HAL_UART_Abort+0x136>

    /* Abort the UART DMA Rx channel: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801044e:	2b00      	cmp	r3, #0
 8010450:	d018      	beq.n	8010484 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010456:	2200      	movs	r2, #0
 8010458:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801045e:	4618      	mov	r0, r3
 8010460:	f7f2 feaf 	bl	80031c2 <HAL_DMA_Abort>
 8010464:	4603      	mov	r3, r0
 8010466:	2b00      	cmp	r3, #0
 8010468:	d00c      	beq.n	8010484 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801046e:	4618      	mov	r0, r3
 8010470:	f7f3 f927 	bl	80036c2 <HAL_DMA_GetError>
 8010474:	4603      	mov	r3, r0
 8010476:	2b20      	cmp	r3, #32
 8010478:	d104      	bne.n	8010484 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	2210      	movs	r2, #16
 801047e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_TIMEOUT;
 8010480:	2303      	movs	r3, #3
 8010482:	e014      	b.n	80104ae <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	2200      	movs	r2, #0
 8010488:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	2200      	movs	r2, #0
 801048e:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	2200      	movs	r2, #0
 8010494:	645a      	str	r2, [r3, #68]	; 0x44

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	2220      	movs	r2, #32
 801049a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->gState = HAL_UART_STATE_READY;
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	2220      	movs	r2, #32
 80104a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	2200      	movs	r2, #0
 80104aa:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80104ac:	2300      	movs	r3, #0
}
 80104ae:	4618      	mov	r0, r3
 80104b0:	3780      	adds	r7, #128	; 0x80
 80104b2:	46bd      	mov	sp, r7
 80104b4:	bd80      	pop	{r7, pc}

080104b6 <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 80104b6:	b580      	push	{r7, lr}
 80104b8:	b08e      	sub	sp, #56	; 0x38
 80104ba:	af00      	add	r7, sp, #0
 80104bc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	330c      	adds	r3, #12
 80104c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104c6:	6a3b      	ldr	r3, [r7, #32]
 80104c8:	e853 3f00 	ldrex	r3, [r3]
 80104cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80104ce:	69fb      	ldr	r3, [r7, #28]
 80104d0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80104d4:	637b      	str	r3, [r7, #52]	; 0x34
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	330c      	adds	r3, #12
 80104dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80104de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80104e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80104e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80104e6:	e841 2300 	strex	r3, r2, [r1]
 80104ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80104ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d1e5      	bne.n	80104be <HAL_UART_AbortTransmit+0x8>

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	695b      	ldr	r3, [r3, #20]
 80104f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80104fc:	2b80      	cmp	r3, #128	; 0x80
 80104fe:	d136      	bne.n	801056e <HAL_UART_AbortTransmit+0xb8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	3314      	adds	r3, #20
 8010506:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	e853 3f00 	ldrex	r3, [r3]
 801050e:	60bb      	str	r3, [r7, #8]
   return(result);
 8010510:	68bb      	ldr	r3, [r7, #8]
 8010512:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010516:	633b      	str	r3, [r7, #48]	; 0x30
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	3314      	adds	r3, #20
 801051e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010520:	61ba      	str	r2, [r7, #24]
 8010522:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010524:	6979      	ldr	r1, [r7, #20]
 8010526:	69ba      	ldr	r2, [r7, #24]
 8010528:	e841 2300 	strex	r3, r2, [r1]
 801052c:	613b      	str	r3, [r7, #16]
   return(result);
 801052e:	693b      	ldr	r3, [r7, #16]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d1e5      	bne.n	8010500 <HAL_UART_AbortTransmit+0x4a>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010538:	2b00      	cmp	r3, #0
 801053a:	d018      	beq.n	801056e <HAL_UART_AbortTransmit+0xb8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010540:	2200      	movs	r2, #0
 8010542:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010548:	4618      	mov	r0, r3
 801054a:	f7f2 fe3a 	bl	80031c2 <HAL_DMA_Abort>
 801054e:	4603      	mov	r3, r0
 8010550:	2b00      	cmp	r3, #0
 8010552:	d00c      	beq.n	801056e <HAL_UART_AbortTransmit+0xb8>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010558:	4618      	mov	r0, r3
 801055a:	f7f3 f8b2 	bl	80036c2 <HAL_DMA_GetError>
 801055e:	4603      	mov	r3, r0
 8010560:	2b20      	cmp	r3, #32
 8010562:	d104      	bne.n	801056e <HAL_UART_AbortTransmit+0xb8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	2210      	movs	r2, #16
 8010568:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_TIMEOUT;
 801056a:	2303      	movs	r3, #3
 801056c:	e007      	b.n	801057e <HAL_UART_AbortTransmit+0xc8>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0x00U;
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	2200      	movs	r2, #0
 8010572:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	2220      	movs	r2, #32
 8010578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 801057c:	2300      	movs	r3, #0
}
 801057e:	4618      	mov	r0, r3
 8010580:	3738      	adds	r7, #56	; 0x38
 8010582:	46bd      	mov	sp, r7
 8010584:	bd80      	pop	{r7, pc}

08010586 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8010586:	b580      	push	{r7, lr}
 8010588:	b09a      	sub	sp, #104	; 0x68
 801058a:	af00      	add	r7, sp, #0
 801058c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	330c      	adds	r3, #12
 8010594:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010596:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010598:	e853 3f00 	ldrex	r3, [r3]
 801059c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801059e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80105a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80105a4:	667b      	str	r3, [r7, #100]	; 0x64
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	330c      	adds	r3, #12
 80105ac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80105ae:	657a      	str	r2, [r7, #84]	; 0x54
 80105b0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80105b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80105b6:	e841 2300 	strex	r3, r2, [r1]
 80105ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80105bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d1e5      	bne.n	801058e <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	3314      	adds	r3, #20
 80105c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105cc:	e853 3f00 	ldrex	r3, [r3]
 80105d0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80105d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105d4:	f023 0301 	bic.w	r3, r3, #1
 80105d8:	663b      	str	r3, [r7, #96]	; 0x60
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	3314      	adds	r3, #20
 80105e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80105e2:	643a      	str	r2, [r7, #64]	; 0x40
 80105e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80105e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80105ea:	e841 2300 	strex	r3, r2, [r1]
 80105ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80105f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d1e5      	bne.n	80105c2 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105fa:	2b01      	cmp	r3, #1
 80105fc:	d119      	bne.n	8010632 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	330c      	adds	r3, #12
 8010604:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010606:	6a3b      	ldr	r3, [r7, #32]
 8010608:	e853 3f00 	ldrex	r3, [r3]
 801060c:	61fb      	str	r3, [r7, #28]
   return(result);
 801060e:	69fb      	ldr	r3, [r7, #28]
 8010610:	f023 0310 	bic.w	r3, r3, #16
 8010614:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	330c      	adds	r3, #12
 801061c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801061e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010620:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010622:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010624:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010626:	e841 2300 	strex	r3, r2, [r1]
 801062a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801062c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801062e:	2b00      	cmp	r3, #0
 8010630:	d1e5      	bne.n	80105fe <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	695b      	ldr	r3, [r3, #20]
 8010638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801063c:	2b40      	cmp	r3, #64	; 0x40
 801063e:	d136      	bne.n	80106ae <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	3314      	adds	r3, #20
 8010646:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	e853 3f00 	ldrex	r3, [r3]
 801064e:	60bb      	str	r3, [r7, #8]
   return(result);
 8010650:	68bb      	ldr	r3, [r7, #8]
 8010652:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010656:	65bb      	str	r3, [r7, #88]	; 0x58
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	3314      	adds	r3, #20
 801065e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010660:	61ba      	str	r2, [r7, #24]
 8010662:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010664:	6979      	ldr	r1, [r7, #20]
 8010666:	69ba      	ldr	r2, [r7, #24]
 8010668:	e841 2300 	strex	r3, r2, [r1]
 801066c:	613b      	str	r3, [r7, #16]
   return(result);
 801066e:	693b      	ldr	r3, [r7, #16]
 8010670:	2b00      	cmp	r3, #0
 8010672:	d1e5      	bne.n	8010640 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010678:	2b00      	cmp	r3, #0
 801067a:	d018      	beq.n	80106ae <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010680:	2200      	movs	r2, #0
 8010682:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010688:	4618      	mov	r0, r3
 801068a:	f7f2 fd9a 	bl	80031c2 <HAL_DMA_Abort>
 801068e:	4603      	mov	r3, r0
 8010690:	2b00      	cmp	r3, #0
 8010692:	d00c      	beq.n	80106ae <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010698:	4618      	mov	r0, r3
 801069a:	f7f3 f812 	bl	80036c2 <HAL_DMA_GetError>
 801069e:	4603      	mov	r3, r0
 80106a0:	2b20      	cmp	r3, #32
 80106a2:	d104      	bne.n	80106ae <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	2210      	movs	r2, #16
 80106a8:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_TIMEOUT;
 80106aa:	2303      	movs	r3, #3
 80106ac:	e00a      	b.n	80106c4 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	2200      	movs	r2, #0
 80106b2:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	2220      	movs	r2, #32
 80106b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	2200      	movs	r2, #0
 80106c0:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80106c2:	2300      	movs	r3, #0
}
 80106c4:	4618      	mov	r0, r3
 80106c6:	3768      	adds	r7, #104	; 0x68
 80106c8:	46bd      	mov	sp, r7
 80106ca:	bd80      	pop	{r7, pc}

080106cc <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 80106cc:	b580      	push	{r7, lr}
 80106ce:	b0a2      	sub	sp, #136	; 0x88
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 80106d4:	2301      	movs	r3, #1
 80106d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	330c      	adds	r3, #12
 80106e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80106e4:	e853 3f00 	ldrex	r3, [r3]
 80106e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80106ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80106ec:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 80106f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	330c      	adds	r3, #12
 80106fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80106fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010700:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010702:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010704:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010706:	e841 2300 	strex	r3, r2, [r1]
 801070a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801070c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801070e:	2b00      	cmp	r3, #0
 8010710:	d1e3      	bne.n	80106da <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	3314      	adds	r3, #20
 8010718:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801071a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801071c:	e853 3f00 	ldrex	r3, [r3]
 8010720:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010722:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010724:	f023 0301 	bic.w	r3, r3, #1
 8010728:	67fb      	str	r3, [r7, #124]	; 0x7c
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	3314      	adds	r3, #20
 8010730:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010732:	65ba      	str	r2, [r7, #88]	; 0x58
 8010734:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010736:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010738:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801073a:	e841 2300 	strex	r3, r2, [r1]
 801073e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010740:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010742:	2b00      	cmp	r3, #0
 8010744:	d1e5      	bne.n	8010712 <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801074a:	2b01      	cmp	r3, #1
 801074c:	d119      	bne.n	8010782 <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	330c      	adds	r3, #12
 8010754:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010758:	e853 3f00 	ldrex	r3, [r3]
 801075c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801075e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010760:	f023 0310 	bic.w	r3, r3, #16
 8010764:	67bb      	str	r3, [r7, #120]	; 0x78
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	330c      	adds	r3, #12
 801076c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801076e:	647a      	str	r2, [r7, #68]	; 0x44
 8010770:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010772:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010774:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010776:	e841 2300 	strex	r3, r2, [r1]
 801077a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801077c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801077e:	2b00      	cmp	r3, #0
 8010780:	d1e5      	bne.n	801074e <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010786:	2b00      	cmp	r3, #0
 8010788:	d00f      	beq.n	80107aa <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	695b      	ldr	r3, [r3, #20]
 8010790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010794:	2b80      	cmp	r3, #128	; 0x80
 8010796:	d104      	bne.n	80107a2 <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801079c:	4a53      	ldr	r2, [pc, #332]	; (80108ec <HAL_UART_Abort_IT+0x220>)
 801079e:	635a      	str	r2, [r3, #52]	; 0x34
 80107a0:	e003      	b.n	80107aa <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107a6:	2200      	movs	r2, #0
 80107a8:	635a      	str	r2, [r3, #52]	; 0x34
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d00f      	beq.n	80107d2 <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	695b      	ldr	r3, [r3, #20]
 80107b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80107bc:	2b40      	cmp	r3, #64	; 0x40
 80107be:	d104      	bne.n	80107ca <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80107c4:	4a4a      	ldr	r2, [pc, #296]	; (80108f0 <HAL_UART_Abort_IT+0x224>)
 80107c6:	635a      	str	r2, [r3, #52]	; 0x34
 80107c8:	e003      	b.n	80107d2 <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80107ce:	2200      	movs	r2, #0
 80107d0:	635a      	str	r2, [r3, #52]	; 0x34
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	695b      	ldr	r3, [r3, #20]
 80107d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80107dc:	2b80      	cmp	r3, #128	; 0x80
 80107de:	d12d      	bne.n	801083c <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	3314      	adds	r3, #20
 80107e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107ea:	e853 3f00 	ldrex	r3, [r3]
 80107ee:	623b      	str	r3, [r7, #32]
   return(result);
 80107f0:	6a3b      	ldr	r3, [r7, #32]
 80107f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80107f6:	677b      	str	r3, [r7, #116]	; 0x74
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	3314      	adds	r3, #20
 80107fe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8010800:	633a      	str	r2, [r7, #48]	; 0x30
 8010802:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010804:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010806:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010808:	e841 2300 	strex	r3, r2, [r1]
 801080c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801080e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010810:	2b00      	cmp	r3, #0
 8010812:	d1e5      	bne.n	80107e0 <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010818:	2b00      	cmp	r3, #0
 801081a:	d00f      	beq.n	801083c <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010820:	4618      	mov	r0, r3
 8010822:	f7f2 fd0b 	bl	800323c <HAL_DMA_Abort_IT>
 8010826:	4603      	mov	r3, r0
 8010828:	2b00      	cmp	r3, #0
 801082a:	d004      	beq.n	8010836 <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010830:	2200      	movs	r2, #0
 8010832:	635a      	str	r2, [r3, #52]	; 0x34
 8010834:	e002      	b.n	801083c <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 8010836:	2300      	movs	r3, #0
 8010838:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	695b      	ldr	r3, [r3, #20]
 8010842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010846:	2b40      	cmp	r3, #64	; 0x40
 8010848:	d130      	bne.n	80108ac <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	3314      	adds	r3, #20
 8010850:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010852:	693b      	ldr	r3, [r7, #16]
 8010854:	e853 3f00 	ldrex	r3, [r3]
 8010858:	60fb      	str	r3, [r7, #12]
   return(result);
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010860:	673b      	str	r3, [r7, #112]	; 0x70
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	3314      	adds	r3, #20
 8010868:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801086a:	61fa      	str	r2, [r7, #28]
 801086c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801086e:	69b9      	ldr	r1, [r7, #24]
 8010870:	69fa      	ldr	r2, [r7, #28]
 8010872:	e841 2300 	strex	r3, r2, [r1]
 8010876:	617b      	str	r3, [r7, #20]
   return(result);
 8010878:	697b      	ldr	r3, [r7, #20]
 801087a:	2b00      	cmp	r3, #0
 801087c:	d1e5      	bne.n	801084a <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010882:	2b00      	cmp	r3, #0
 8010884:	d012      	beq.n	80108ac <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801088a:	4618      	mov	r0, r3
 801088c:	f7f2 fcd6 	bl	800323c <HAL_DMA_Abort_IT>
 8010890:	4603      	mov	r3, r0
 8010892:	2b00      	cmp	r3, #0
 8010894:	d007      	beq.n	80108a6 <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801089a:	2200      	movs	r2, #0
 801089c:	635a      	str	r2, [r3, #52]	; 0x34
        AbortCplt = 0x01U;
 801089e:	2301      	movs	r3, #1
 80108a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80108a4:	e002      	b.n	80108ac <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 80108a6:	2300      	movs	r3, #0
 80108a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 80108ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80108b0:	2b01      	cmp	r3, #1
 80108b2:	d116      	bne.n	80108e2 <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	2200      	movs	r2, #0
 80108b8:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	2200      	movs	r2, #0
 80108be:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	2200      	movs	r2, #0
 80108c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	2220      	movs	r2, #32
 80108ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    huart->RxState = HAL_UART_STATE_READY;
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	2220      	movs	r2, #32
 80108d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	2200      	movs	r2, #0
 80108da:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 80108dc:	6878      	ldr	r0, [r7, #4]
 80108de:	f000 fbee 	bl	80110be <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80108e2:	2300      	movs	r3, #0
}
 80108e4:	4618      	mov	r0, r3
 80108e6:	3788      	adds	r7, #136	; 0x88
 80108e8:	46bd      	mov	sp, r7
 80108ea:	bd80      	pop	{r7, pc}
 80108ec:	08011a03 	.word	0x08011a03
 80108f0:	08011a63 	.word	0x08011a63

080108f4 <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 80108f4:	b580      	push	{r7, lr}
 80108f6:	b08e      	sub	sp, #56	; 0x38
 80108f8:	af00      	add	r7, sp, #0
 80108fa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	330c      	adds	r3, #12
 8010902:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010904:	6a3b      	ldr	r3, [r7, #32]
 8010906:	e853 3f00 	ldrex	r3, [r3]
 801090a:	61fb      	str	r3, [r7, #28]
   return(result);
 801090c:	69fb      	ldr	r3, [r7, #28]
 801090e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8010912:	637b      	str	r3, [r7, #52]	; 0x34
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	330c      	adds	r3, #12
 801091a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801091c:	62fa      	str	r2, [r7, #44]	; 0x2c
 801091e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010920:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010922:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010924:	e841 2300 	strex	r3, r2, [r1]
 8010928:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801092a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801092c:	2b00      	cmp	r3, #0
 801092e:	d1e5      	bne.n	80108fc <HAL_UART_AbortTransmit_IT+0x8>

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	695b      	ldr	r3, [r3, #20]
 8010936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801093a:	2b80      	cmp	r3, #128	; 0x80
 801093c:	d13c      	bne.n	80109b8 <HAL_UART_AbortTransmit_IT+0xc4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	3314      	adds	r3, #20
 8010944:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	e853 3f00 	ldrex	r3, [r3]
 801094c:	60bb      	str	r3, [r7, #8]
   return(result);
 801094e:	68bb      	ldr	r3, [r7, #8]
 8010950:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010954:	633b      	str	r3, [r7, #48]	; 0x30
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	3314      	adds	r3, #20
 801095c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801095e:	61ba      	str	r2, [r7, #24]
 8010960:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010962:	6979      	ldr	r1, [r7, #20]
 8010964:	69ba      	ldr	r2, [r7, #24]
 8010966:	e841 2300 	strex	r3, r2, [r1]
 801096a:	613b      	str	r3, [r7, #16]
   return(result);
 801096c:	693b      	ldr	r3, [r7, #16]
 801096e:	2b00      	cmp	r3, #0
 8010970:	d1e5      	bne.n	801093e <HAL_UART_AbortTransmit_IT+0x4a>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010976:	2b00      	cmp	r3, #0
 8010978:	d013      	beq.n	80109a2 <HAL_UART_AbortTransmit_IT+0xae>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801097e:	4a16      	ldr	r2, [pc, #88]	; (80109d8 <HAL_UART_AbortTransmit_IT+0xe4>)
 8010980:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010986:	4618      	mov	r0, r3
 8010988:	f7f2 fc58 	bl	800323c <HAL_DMA_Abort_IT>
 801098c:	4603      	mov	r3, r0
 801098e:	2b00      	cmp	r3, #0
 8010990:	d01c      	beq.n	80109cc <HAL_UART_AbortTransmit_IT+0xd8>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010998:	687a      	ldr	r2, [r7, #4]
 801099a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801099c:	4610      	mov	r0, r2
 801099e:	4798      	blx	r3
 80109a0:	e014      	b.n	80109cc <HAL_UART_AbortTransmit_IT+0xd8>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0x00U;
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	2200      	movs	r2, #0
 80109a6:	84da      	strh	r2, [r3, #38]	; 0x26

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	2220      	movs	r2, #32
 80109ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 80109b0:	6878      	ldr	r0, [r7, #4]
 80109b2:	f000 fb8d 	bl	80110d0 <HAL_UART_AbortTransmitCpltCallback>
 80109b6:	e009      	b.n	80109cc <HAL_UART_AbortTransmit_IT+0xd8>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0x00U;
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	2200      	movs	r2, #0
 80109bc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	2220      	movs	r2, #32
 80109c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 80109c6:	6878      	ldr	r0, [r7, #4]
 80109c8:	f000 fb82 	bl	80110d0 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80109cc:	2300      	movs	r3, #0
}
 80109ce:	4618      	mov	r0, r3
 80109d0:	3738      	adds	r7, #56	; 0x38
 80109d2:	46bd      	mov	sp, r7
 80109d4:	bd80      	pop	{r7, pc}
 80109d6:	bf00      	nop
 80109d8:	08011ac3 	.word	0x08011ac3

080109dc <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 80109dc:	b580      	push	{r7, lr}
 80109de:	b09a      	sub	sp, #104	; 0x68
 80109e0:	af00      	add	r7, sp, #0
 80109e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	330c      	adds	r3, #12
 80109ea:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80109ee:	e853 3f00 	ldrex	r3, [r3]
 80109f2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80109f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80109f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80109fa:	667b      	str	r3, [r7, #100]	; 0x64
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	330c      	adds	r3, #12
 8010a02:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010a04:	657a      	str	r2, [r7, #84]	; 0x54
 8010a06:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a08:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010a0a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010a0c:	e841 2300 	strex	r3, r2, [r1]
 8010a10:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010a12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d1e5      	bne.n	80109e4 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	3314      	adds	r3, #20
 8010a1e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a22:	e853 3f00 	ldrex	r3, [r3]
 8010a26:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a2a:	f023 0301 	bic.w	r3, r3, #1
 8010a2e:	663b      	str	r3, [r7, #96]	; 0x60
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	3314      	adds	r3, #20
 8010a36:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010a38:	643a      	str	r2, [r7, #64]	; 0x40
 8010a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a3c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010a3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010a40:	e841 2300 	strex	r3, r2, [r1]
 8010a44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d1e5      	bne.n	8010a18 <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a50:	2b01      	cmp	r3, #1
 8010a52:	d119      	bne.n	8010a88 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	330c      	adds	r3, #12
 8010a5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a5c:	6a3b      	ldr	r3, [r7, #32]
 8010a5e:	e853 3f00 	ldrex	r3, [r3]
 8010a62:	61fb      	str	r3, [r7, #28]
   return(result);
 8010a64:	69fb      	ldr	r3, [r7, #28]
 8010a66:	f023 0310 	bic.w	r3, r3, #16
 8010a6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	330c      	adds	r3, #12
 8010a72:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010a74:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010a76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010a7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010a7c:	e841 2300 	strex	r3, r2, [r1]
 8010a80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d1e5      	bne.n	8010a54 <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	695b      	ldr	r3, [r3, #20]
 8010a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a92:	2b40      	cmp	r3, #64	; 0x40
 8010a94:	d13f      	bne.n	8010b16 <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	3314      	adds	r3, #20
 8010a9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	e853 3f00 	ldrex	r3, [r3]
 8010aa4:	60bb      	str	r3, [r7, #8]
   return(result);
 8010aa6:	68bb      	ldr	r3, [r7, #8]
 8010aa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010aac:	65bb      	str	r3, [r7, #88]	; 0x58
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	3314      	adds	r3, #20
 8010ab4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010ab6:	61ba      	str	r2, [r7, #24]
 8010ab8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010aba:	6979      	ldr	r1, [r7, #20]
 8010abc:	69ba      	ldr	r2, [r7, #24]
 8010abe:	e841 2300 	strex	r3, r2, [r1]
 8010ac2:	613b      	str	r3, [r7, #16]
   return(result);
 8010ac4:	693b      	ldr	r3, [r7, #16]
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d1e5      	bne.n	8010a96 <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d013      	beq.n	8010afa <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ad6:	4a19      	ldr	r2, [pc, #100]	; (8010b3c <HAL_UART_AbortReceive_IT+0x160>)
 8010ad8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ade:	4618      	mov	r0, r3
 8010ae0:	f7f2 fbac 	bl	800323c <HAL_DMA_Abort_IT>
 8010ae4:	4603      	mov	r3, r0
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d022      	beq.n	8010b30 <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010af0:	687a      	ldr	r2, [r7, #4]
 8010af2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8010af4:	4610      	mov	r0, r2
 8010af6:	4798      	blx	r3
 8010af8:	e01a      	b.n	8010b30 <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	2200      	movs	r2, #0
 8010afe:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	2220      	movs	r2, #32
 8010b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	2200      	movs	r2, #0
 8010b0c:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8010b0e:	6878      	ldr	r0, [r7, #4]
 8010b10:	f000 fae7 	bl	80110e2 <HAL_UART_AbortReceiveCpltCallback>
 8010b14:	e00c      	b.n	8010b30 <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	2200      	movs	r2, #0
 8010b1a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	2220      	movs	r2, #32
 8010b20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	2200      	movs	r2, #0
 8010b28:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8010b2a:	6878      	ldr	r0, [r7, #4]
 8010b2c:	f000 fad9 	bl	80110e2 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8010b30:	2300      	movs	r3, #0
}
 8010b32:	4618      	mov	r0, r3
 8010b34:	3768      	adds	r7, #104	; 0x68
 8010b36:	46bd      	mov	sp, r7
 8010b38:	bd80      	pop	{r7, pc}
 8010b3a:	bf00      	nop
 8010b3c:	08011aed 	.word	0x08011aed

08010b40 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010b40:	b580      	push	{r7, lr}
 8010b42:	b0ba      	sub	sp, #232	; 0xe8
 8010b44:	af00      	add	r7, sp, #0
 8010b46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	68db      	ldr	r3, [r3, #12]
 8010b58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	695b      	ldr	r3, [r3, #20]
 8010b62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8010b66:	2300      	movs	r3, #0
 8010b68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8010b6c:	2300      	movs	r3, #0
 8010b6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8010b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010b76:	f003 030f 	and.w	r3, r3, #15
 8010b7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8010b7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d10f      	bne.n	8010ba6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010b8a:	f003 0320 	and.w	r3, r3, #32
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d009      	beq.n	8010ba6 <HAL_UART_IRQHandler+0x66>
 8010b92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010b96:	f003 0320 	and.w	r3, r3, #32
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d003      	beq.n	8010ba6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8010b9e:	6878      	ldr	r0, [r7, #4]
 8010ba0:	f001 f823 	bl	8011bea <UART_Receive_IT>
      return;
 8010ba4:	e25b      	b.n	801105e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8010ba6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	f000 80de 	beq.w	8010d6c <HAL_UART_IRQHandler+0x22c>
 8010bb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010bb4:	f003 0301 	and.w	r3, r3, #1
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d106      	bne.n	8010bca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8010bbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010bc0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	f000 80d1 	beq.w	8010d6c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8010bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010bce:	f003 0301 	and.w	r3, r3, #1
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d00b      	beq.n	8010bee <HAL_UART_IRQHandler+0xae>
 8010bd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d005      	beq.n	8010bee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010be6:	f043 0201 	orr.w	r2, r3, #1
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010bf2:	f003 0304 	and.w	r3, r3, #4
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d00b      	beq.n	8010c12 <HAL_UART_IRQHandler+0xd2>
 8010bfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010bfe:	f003 0301 	and.w	r3, r3, #1
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d005      	beq.n	8010c12 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010c0a:	f043 0202 	orr.w	r2, r3, #2
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010c16:	f003 0302 	and.w	r3, r3, #2
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d00b      	beq.n	8010c36 <HAL_UART_IRQHandler+0xf6>
 8010c1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010c22:	f003 0301 	and.w	r3, r3, #1
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d005      	beq.n	8010c36 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010c2e:	f043 0204 	orr.w	r2, r3, #4
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8010c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010c3a:	f003 0308 	and.w	r3, r3, #8
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d011      	beq.n	8010c66 <HAL_UART_IRQHandler+0x126>
 8010c42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010c46:	f003 0320 	and.w	r3, r3, #32
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d105      	bne.n	8010c5a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8010c4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010c52:	f003 0301 	and.w	r3, r3, #1
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d005      	beq.n	8010c66 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010c5e:	f043 0208 	orr.w	r2, r3, #8
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	f000 81f2 	beq.w	8011054 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010c70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010c74:	f003 0320 	and.w	r3, r3, #32
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d008      	beq.n	8010c8e <HAL_UART_IRQHandler+0x14e>
 8010c7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010c80:	f003 0320 	and.w	r3, r3, #32
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d002      	beq.n	8010c8e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8010c88:	6878      	ldr	r0, [r7, #4]
 8010c8a:	f000 ffae 	bl	8011bea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	695b      	ldr	r3, [r3, #20]
 8010c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c98:	2b40      	cmp	r3, #64	; 0x40
 8010c9a:	bf0c      	ite	eq
 8010c9c:	2301      	moveq	r3, #1
 8010c9e:	2300      	movne	r3, #0
 8010ca0:	b2db      	uxtb	r3, r3
 8010ca2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010caa:	f003 0308 	and.w	r3, r3, #8
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d103      	bne.n	8010cba <HAL_UART_IRQHandler+0x17a>
 8010cb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d04f      	beq.n	8010d5a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010cba:	6878      	ldr	r0, [r7, #4]
 8010cbc:	f000 fe2b 	bl	8011916 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	695b      	ldr	r3, [r3, #20]
 8010cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010cca:	2b40      	cmp	r3, #64	; 0x40
 8010ccc:	d141      	bne.n	8010d52 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	3314      	adds	r3, #20
 8010cd4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010cdc:	e853 3f00 	ldrex	r3, [r3]
 8010ce0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8010ce4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010ce8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010cec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	3314      	adds	r3, #20
 8010cf6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8010cfa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8010cfe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8010d06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010d0a:	e841 2300 	strex	r3, r2, [r1]
 8010d0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8010d12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d1d9      	bne.n	8010cce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d013      	beq.n	8010d4a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010d26:	4a7e      	ldr	r2, [pc, #504]	; (8010f20 <HAL_UART_IRQHandler+0x3e0>)
 8010d28:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010d2e:	4618      	mov	r0, r3
 8010d30:	f7f2 fa84 	bl	800323c <HAL_DMA_Abort_IT>
 8010d34:	4603      	mov	r3, r0
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d016      	beq.n	8010d68 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d40:	687a      	ldr	r2, [r7, #4]
 8010d42:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8010d44:	4610      	mov	r0, r2
 8010d46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010d48:	e00e      	b.n	8010d68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010d4a:	6878      	ldr	r0, [r7, #4]
 8010d4c:	f000 f9ae 	bl	80110ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010d50:	e00a      	b.n	8010d68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010d52:	6878      	ldr	r0, [r7, #4]
 8010d54:	f000 f9aa 	bl	80110ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010d58:	e006      	b.n	8010d68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010d5a:	6878      	ldr	r0, [r7, #4]
 8010d5c:	f000 f9a6 	bl	80110ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	2200      	movs	r2, #0
 8010d64:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8010d66:	e175      	b.n	8011054 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010d68:	bf00      	nop
    return;
 8010d6a:	e173      	b.n	8011054 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d70:	2b01      	cmp	r3, #1
 8010d72:	f040 814f 	bne.w	8011014 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8010d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010d7a:	f003 0310 	and.w	r3, r3, #16
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	f000 8148 	beq.w	8011014 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8010d84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010d88:	f003 0310 	and.w	r3, r3, #16
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	f000 8141 	beq.w	8011014 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8010d92:	2300      	movs	r3, #0
 8010d94:	60bb      	str	r3, [r7, #8]
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	60bb      	str	r3, [r7, #8]
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	685b      	ldr	r3, [r3, #4]
 8010da4:	60bb      	str	r3, [r7, #8]
 8010da6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	695b      	ldr	r3, [r3, #20]
 8010dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010db2:	2b40      	cmp	r3, #64	; 0x40
 8010db4:	f040 80b6 	bne.w	8010f24 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	685b      	ldr	r3, [r3, #4]
 8010dc0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010dc4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	f000 8145 	beq.w	8011058 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010dd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010dd6:	429a      	cmp	r2, r3
 8010dd8:	f080 813e 	bcs.w	8011058 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010de2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010de8:	699b      	ldr	r3, [r3, #24]
 8010dea:	2b20      	cmp	r3, #32
 8010dec:	f000 8088 	beq.w	8010f00 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	330c      	adds	r3, #12
 8010df6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010dfa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010dfe:	e853 3f00 	ldrex	r3, [r3]
 8010e02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8010e06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010e0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010e0e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	330c      	adds	r3, #12
 8010e18:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8010e1c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8010e20:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e24:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8010e28:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010e2c:	e841 2300 	strex	r3, r2, [r1]
 8010e30:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8010e34:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d1d9      	bne.n	8010df0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	3314      	adds	r3, #20
 8010e42:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010e46:	e853 3f00 	ldrex	r3, [r3]
 8010e4a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8010e4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010e4e:	f023 0301 	bic.w	r3, r3, #1
 8010e52:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	3314      	adds	r3, #20
 8010e5c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8010e60:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8010e64:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e66:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8010e68:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010e6c:	e841 2300 	strex	r3, r2, [r1]
 8010e70:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010e72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d1e1      	bne.n	8010e3c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	3314      	adds	r3, #20
 8010e7e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010e82:	e853 3f00 	ldrex	r3, [r3]
 8010e86:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010e88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010e8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010e8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	3314      	adds	r3, #20
 8010e98:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8010e9c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010e9e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ea0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010ea2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010ea4:	e841 2300 	strex	r3, r2, [r1]
 8010ea8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010eaa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d1e3      	bne.n	8010e78 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	2220      	movs	r2, #32
 8010eb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	2200      	movs	r2, #0
 8010ebc:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	330c      	adds	r3, #12
 8010ec4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ec8:	e853 3f00 	ldrex	r3, [r3]
 8010ecc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010ece:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ed0:	f023 0310 	bic.w	r3, r3, #16
 8010ed4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	330c      	adds	r3, #12
 8010ede:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8010ee2:	65ba      	str	r2, [r7, #88]	; 0x58
 8010ee4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ee6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010ee8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010eea:	e841 2300 	strex	r3, r2, [r1]
 8010eee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010ef0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d1e3      	bne.n	8010ebe <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010efa:	4618      	mov	r0, r3
 8010efc:	f7f2 f961 	bl	80031c2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	2202      	movs	r2, #2
 8010f04:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010f0e:	b29b      	uxth	r3, r3
 8010f10:	1ad3      	subs	r3, r2, r3
 8010f12:	b29b      	uxth	r3, r3
 8010f14:	4619      	mov	r1, r3
 8010f16:	6878      	ldr	r0, [r7, #4]
 8010f18:	f000 f8ec 	bl	80110f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8010f1c:	e09c      	b.n	8011058 <HAL_UART_IRQHandler+0x518>
 8010f1e:	bf00      	nop
 8010f20:	080119db 	.word	0x080119db
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010f2c:	b29b      	uxth	r3, r3
 8010f2e:	1ad3      	subs	r3, r2, r3
 8010f30:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010f38:	b29b      	uxth	r3, r3
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	f000 808e 	beq.w	801105c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8010f40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	f000 8089 	beq.w	801105c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	330c      	adds	r3, #12
 8010f50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f54:	e853 3f00 	ldrex	r3, [r3]
 8010f58:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010f60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	330c      	adds	r3, #12
 8010f6a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8010f6e:	647a      	str	r2, [r7, #68]	; 0x44
 8010f70:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010f74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010f76:	e841 2300 	strex	r3, r2, [r1]
 8010f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d1e3      	bne.n	8010f4a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	681b      	ldr	r3, [r3, #0]
 8010f86:	3314      	adds	r3, #20
 8010f88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f8c:	e853 3f00 	ldrex	r3, [r3]
 8010f90:	623b      	str	r3, [r7, #32]
   return(result);
 8010f92:	6a3b      	ldr	r3, [r7, #32]
 8010f94:	f023 0301 	bic.w	r3, r3, #1
 8010f98:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	3314      	adds	r3, #20
 8010fa2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010fa6:	633a      	str	r2, [r7, #48]	; 0x30
 8010fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010faa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010fac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010fae:	e841 2300 	strex	r3, r2, [r1]
 8010fb2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d1e3      	bne.n	8010f82 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	2220      	movs	r2, #32
 8010fbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	2200      	movs	r2, #0
 8010fc6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	330c      	adds	r3, #12
 8010fce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fd0:	693b      	ldr	r3, [r7, #16]
 8010fd2:	e853 3f00 	ldrex	r3, [r3]
 8010fd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	f023 0310 	bic.w	r3, r3, #16
 8010fde:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	330c      	adds	r3, #12
 8010fe8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8010fec:	61fa      	str	r2, [r7, #28]
 8010fee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ff0:	69b9      	ldr	r1, [r7, #24]
 8010ff2:	69fa      	ldr	r2, [r7, #28]
 8010ff4:	e841 2300 	strex	r3, r2, [r1]
 8010ff8:	617b      	str	r3, [r7, #20]
   return(result);
 8010ffa:	697b      	ldr	r3, [r7, #20]
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d1e3      	bne.n	8010fc8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	2202      	movs	r2, #2
 8011004:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8011006:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801100a:	4619      	mov	r1, r3
 801100c:	6878      	ldr	r0, [r7, #4]
 801100e:	f000 f871 	bl	80110f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8011012:	e023      	b.n	801105c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8011014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801101c:	2b00      	cmp	r3, #0
 801101e:	d009      	beq.n	8011034 <HAL_UART_IRQHandler+0x4f4>
 8011020:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011028:	2b00      	cmp	r3, #0
 801102a:	d003      	beq.n	8011034 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 801102c:	6878      	ldr	r0, [r7, #4]
 801102e:	f000 fd75 	bl	8011b1c <UART_Transmit_IT>
    return;
 8011032:	e014      	b.n	801105e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8011034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801103c:	2b00      	cmp	r3, #0
 801103e:	d00e      	beq.n	801105e <HAL_UART_IRQHandler+0x51e>
 8011040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011048:	2b00      	cmp	r3, #0
 801104a:	d008      	beq.n	801105e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 801104c:	6878      	ldr	r0, [r7, #4]
 801104e:	f000 fdb4 	bl	8011bba <UART_EndTransmit_IT>
    return;
 8011052:	e004      	b.n	801105e <HAL_UART_IRQHandler+0x51e>
    return;
 8011054:	bf00      	nop
 8011056:	e002      	b.n	801105e <HAL_UART_IRQHandler+0x51e>
      return;
 8011058:	bf00      	nop
 801105a:	e000      	b.n	801105e <HAL_UART_IRQHandler+0x51e>
      return;
 801105c:	bf00      	nop
  }
}
 801105e:	37e8      	adds	r7, #232	; 0xe8
 8011060:	46bd      	mov	sp, r7
 8011062:	bd80      	pop	{r7, pc}

08011064 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8011064:	b480      	push	{r7}
 8011066:	b083      	sub	sp, #12
 8011068:	af00      	add	r7, sp, #0
 801106a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 801106c:	bf00      	nop
 801106e:	370c      	adds	r7, #12
 8011070:	46bd      	mov	sp, r7
 8011072:	bc80      	pop	{r7}
 8011074:	4770      	bx	lr

08011076 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8011076:	b480      	push	{r7}
 8011078:	b083      	sub	sp, #12
 801107a:	af00      	add	r7, sp, #0
 801107c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 801107e:	bf00      	nop
 8011080:	370c      	adds	r7, #12
 8011082:	46bd      	mov	sp, r7
 8011084:	bc80      	pop	{r7}
 8011086:	4770      	bx	lr

08011088 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8011088:	b480      	push	{r7}
 801108a:	b083      	sub	sp, #12
 801108c:	af00      	add	r7, sp, #0
 801108e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8011090:	bf00      	nop
 8011092:	370c      	adds	r7, #12
 8011094:	46bd      	mov	sp, r7
 8011096:	bc80      	pop	{r7}
 8011098:	4770      	bx	lr

0801109a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801109a:	b480      	push	{r7}
 801109c:	b083      	sub	sp, #12
 801109e:	af00      	add	r7, sp, #0
 80110a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80110a2:	bf00      	nop
 80110a4:	370c      	adds	r7, #12
 80110a6:	46bd      	mov	sp, r7
 80110a8:	bc80      	pop	{r7}
 80110aa:	4770      	bx	lr

080110ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80110ac:	b480      	push	{r7}
 80110ae:	b083      	sub	sp, #12
 80110b0:	af00      	add	r7, sp, #0
 80110b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80110b4:	bf00      	nop
 80110b6:	370c      	adds	r7, #12
 80110b8:	46bd      	mov	sp, r7
 80110ba:	bc80      	pop	{r7}
 80110bc:	4770      	bx	lr

080110be <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80110be:	b480      	push	{r7}
 80110c0:	b083      	sub	sp, #12
 80110c2:	af00      	add	r7, sp, #0
 80110c4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80110c6:	bf00      	nop
 80110c8:	370c      	adds	r7, #12
 80110ca:	46bd      	mov	sp, r7
 80110cc:	bc80      	pop	{r7}
 80110ce:	4770      	bx	lr

080110d0 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80110d0:	b480      	push	{r7}
 80110d2:	b083      	sub	sp, #12
 80110d4:	af00      	add	r7, sp, #0
 80110d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80110d8:	bf00      	nop
 80110da:	370c      	adds	r7, #12
 80110dc:	46bd      	mov	sp, r7
 80110de:	bc80      	pop	{r7}
 80110e0:	4770      	bx	lr

080110e2 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80110e2:	b480      	push	{r7}
 80110e4:	b083      	sub	sp, #12
 80110e6:	af00      	add	r7, sp, #0
 80110e8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80110ea:	bf00      	nop
 80110ec:	370c      	adds	r7, #12
 80110ee:	46bd      	mov	sp, r7
 80110f0:	bc80      	pop	{r7}
 80110f2:	4770      	bx	lr

080110f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80110f4:	b480      	push	{r7}
 80110f6:	b083      	sub	sp, #12
 80110f8:	af00      	add	r7, sp, #0
 80110fa:	6078      	str	r0, [r7, #4]
 80110fc:	460b      	mov	r3, r1
 80110fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8011100:	bf00      	nop
 8011102:	370c      	adds	r7, #12
 8011104:	46bd      	mov	sp, r7
 8011106:	bc80      	pop	{r7}
 8011108:	4770      	bx	lr

0801110a <HAL_LIN_SendBreak>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_SendBreak(UART_HandleTypeDef *huart)
{
 801110a:	b480      	push	{r7}
 801110c:	b089      	sub	sp, #36	; 0x24
 801110e:	af00      	add	r7, sp, #0
 8011110:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011118:	2b01      	cmp	r3, #1
 801111a:	d101      	bne.n	8011120 <HAL_LIN_SendBreak+0x16>
 801111c:	2302      	movs	r3, #2
 801111e:	e02a      	b.n	8011176 <HAL_LIN_SendBreak+0x6c>
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	2201      	movs	r2, #1
 8011124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  huart->gState = HAL_UART_STATE_BUSY;
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	2224      	movs	r2, #36	; 0x24
 801112c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Send break characters */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_SBK);
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	330c      	adds	r3, #12
 8011136:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	e853 3f00 	ldrex	r3, [r3]
 801113e:	60bb      	str	r3, [r7, #8]
   return(result);
 8011140:	68bb      	ldr	r3, [r7, #8]
 8011142:	f043 0301 	orr.w	r3, r3, #1
 8011146:	61fb      	str	r3, [r7, #28]
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	330c      	adds	r3, #12
 801114e:	69fa      	ldr	r2, [r7, #28]
 8011150:	61ba      	str	r2, [r7, #24]
 8011152:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011154:	6979      	ldr	r1, [r7, #20]
 8011156:	69ba      	ldr	r2, [r7, #24]
 8011158:	e841 2300 	strex	r3, r2, [r1]
 801115c:	613b      	str	r3, [r7, #16]
   return(result);
 801115e:	693b      	ldr	r3, [r7, #16]
 8011160:	2b00      	cmp	r3, #0
 8011162:	d1e5      	bne.n	8011130 <HAL_LIN_SendBreak+0x26>

  huart->gState = HAL_UART_STATE_READY;
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	2220      	movs	r2, #32
 8011168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	2200      	movs	r2, #0
 8011170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8011174:	2300      	movs	r3, #0
}
 8011176:	4618      	mov	r0, r3
 8011178:	3724      	adds	r7, #36	; 0x24
 801117a:	46bd      	mov	sp, r7
 801117c:	bc80      	pop	{r7}
 801117e:	4770      	bx	lr

08011180 <HAL_MultiProcessor_EnterMuteMode>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_EnterMuteMode(UART_HandleTypeDef *huart)
{
 8011180:	b480      	push	{r7}
 8011182:	b089      	sub	sp, #36	; 0x24
 8011184:	af00      	add	r7, sp, #0
 8011186:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801118e:	2b01      	cmp	r3, #1
 8011190:	d101      	bne.n	8011196 <HAL_MultiProcessor_EnterMuteMode+0x16>
 8011192:	2302      	movs	r3, #2
 8011194:	e02d      	b.n	80111f2 <HAL_MultiProcessor_EnterMuteMode+0x72>
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	2201      	movs	r2, #1
 801119a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  huart->gState = HAL_UART_STATE_BUSY;
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	2224      	movs	r2, #36	; 0x24
 80111a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RWU);
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	330c      	adds	r3, #12
 80111ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	e853 3f00 	ldrex	r3, [r3]
 80111b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80111b6:	68bb      	ldr	r3, [r7, #8]
 80111b8:	f043 0302 	orr.w	r3, r3, #2
 80111bc:	61fb      	str	r3, [r7, #28]
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	330c      	adds	r3, #12
 80111c4:	69fa      	ldr	r2, [r7, #28]
 80111c6:	61ba      	str	r2, [r7, #24]
 80111c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111ca:	6979      	ldr	r1, [r7, #20]
 80111cc:	69ba      	ldr	r2, [r7, #24]
 80111ce:	e841 2300 	strex	r3, r2, [r1]
 80111d2:	613b      	str	r3, [r7, #16]
   return(result);
 80111d4:	693b      	ldr	r3, [r7, #16]
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d1e5      	bne.n	80111a6 <HAL_MultiProcessor_EnterMuteMode+0x26>

  huart->gState = HAL_UART_STATE_READY;
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	2220      	movs	r2, #32
 80111de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	2200      	movs	r2, #0
 80111e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	2200      	movs	r2, #0
 80111ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80111f0:	2300      	movs	r3, #0
}
 80111f2:	4618      	mov	r0, r3
 80111f4:	3724      	adds	r7, #36	; 0x24
 80111f6:	46bd      	mov	sp, r7
 80111f8:	bc80      	pop	{r7}
 80111fa:	4770      	bx	lr

080111fc <HAL_MultiProcessor_ExitMuteMode>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_ExitMuteMode(UART_HandleTypeDef *huart)
{
 80111fc:	b480      	push	{r7}
 80111fe:	b089      	sub	sp, #36	; 0x24
 8011200:	af00      	add	r7, sp, #0
 8011202:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801120a:	2b01      	cmp	r3, #1
 801120c:	d101      	bne.n	8011212 <HAL_MultiProcessor_ExitMuteMode+0x16>
 801120e:	2302      	movs	r3, #2
 8011210:	e02d      	b.n	801126e <HAL_MultiProcessor_ExitMuteMode+0x72>
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	2201      	movs	r2, #1
 8011216:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  huart->gState = HAL_UART_STATE_BUSY;
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	2224      	movs	r2, #36	; 0x24
 801121e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RWU);
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	330c      	adds	r3, #12
 8011228:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	e853 3f00 	ldrex	r3, [r3]
 8011230:	60bb      	str	r3, [r7, #8]
   return(result);
 8011232:	68bb      	ldr	r3, [r7, #8]
 8011234:	f023 0302 	bic.w	r3, r3, #2
 8011238:	61fb      	str	r3, [r7, #28]
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	330c      	adds	r3, #12
 8011240:	69fa      	ldr	r2, [r7, #28]
 8011242:	61ba      	str	r2, [r7, #24]
 8011244:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011246:	6979      	ldr	r1, [r7, #20]
 8011248:	69ba      	ldr	r2, [r7, #24]
 801124a:	e841 2300 	strex	r3, r2, [r1]
 801124e:	613b      	str	r3, [r7, #16]
   return(result);
 8011250:	693b      	ldr	r3, [r7, #16]
 8011252:	2b00      	cmp	r3, #0
 8011254:	d1e5      	bne.n	8011222 <HAL_MultiProcessor_ExitMuteMode+0x26>

  huart->gState = HAL_UART_STATE_READY;
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	2220      	movs	r2, #32
 801125a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	2200      	movs	r2, #0
 8011262:	635a      	str	r2, [r3, #52]	; 0x34

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	2200      	movs	r2, #0
 8011268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 801126c:	2300      	movs	r3, #0
}
 801126e:	4618      	mov	r0, r3
 8011270:	3724      	adds	r7, #36	; 0x24
 8011272:	46bd      	mov	sp, r7
 8011274:	bc80      	pop	{r7}
 8011276:	4770      	bx	lr

08011278 <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8011278:	b480      	push	{r7}
 801127a:	b085      	sub	sp, #20
 801127c:	af00      	add	r7, sp, #0
 801127e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8011280:	2300      	movs	r3, #0
 8011282:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801128a:	2b01      	cmp	r3, #1
 801128c:	d101      	bne.n	8011292 <HAL_HalfDuplex_EnableTransmitter+0x1a>
 801128e:	2302      	movs	r3, #2
 8011290:	e020      	b.n	80112d4 <HAL_HalfDuplex_EnableTransmitter+0x5c>
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	2201      	movs	r2, #1
 8011296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  huart->gState = HAL_UART_STATE_BUSY;
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	2224      	movs	r2, #36	; 0x24
 801129e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	68db      	ldr	r3, [r3, #12]
 80112a8:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	f023 030c 	bic.w	r3, r3, #12
 80112b0:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	f043 0308 	orr.w	r3, r3, #8
 80112b8:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	681b      	ldr	r3, [r3, #0]
 80112be:	68fa      	ldr	r2, [r7, #12]
 80112c0:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	2220      	movs	r2, #32
 80112c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	2200      	movs	r2, #0
 80112ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80112d2:	2300      	movs	r3, #0
}
 80112d4:	4618      	mov	r0, r3
 80112d6:	3714      	adds	r7, #20
 80112d8:	46bd      	mov	sp, r7
 80112da:	bc80      	pop	{r7}
 80112dc:	4770      	bx	lr

080112de <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 80112de:	b480      	push	{r7}
 80112e0:	b085      	sub	sp, #20
 80112e2:	af00      	add	r7, sp, #0
 80112e4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80112e6:	2300      	movs	r3, #0
 80112e8:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80112f0:	2b01      	cmp	r3, #1
 80112f2:	d101      	bne.n	80112f8 <HAL_HalfDuplex_EnableReceiver+0x1a>
 80112f4:	2302      	movs	r3, #2
 80112f6:	e020      	b.n	801133a <HAL_HalfDuplex_EnableReceiver+0x5c>
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	2201      	movs	r2, #1
 80112fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  huart->gState = HAL_UART_STATE_BUSY;
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	2224      	movs	r2, #36	; 0x24
 8011304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	68db      	ldr	r3, [r3, #12]
 801130e:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	f023 030c 	bic.w	r3, r3, #12
 8011316:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	f043 0304 	orr.w	r3, r3, #4
 801131e:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	68fa      	ldr	r2, [r7, #12]
 8011326:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	2220      	movs	r2, #32
 801132c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	2200      	movs	r2, #0
 8011334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8011338:	2300      	movs	r3, #0
}
 801133a:	4618      	mov	r0, r3
 801133c:	3714      	adds	r7, #20
 801133e:	46bd      	mov	sp, r7
 8011340:	bc80      	pop	{r7}
 8011342:	4770      	bx	lr

08011344 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8011344:	b480      	push	{r7}
 8011346:	b085      	sub	sp, #20
 8011348:	af00      	add	r7, sp, #0
 801134a:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 801134c:	2300      	movs	r3, #0
 801134e:	60fb      	str	r3, [r7, #12]
 8011350:	2300      	movs	r3, #0
 8011352:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801135a:	b2db      	uxtb	r3, r3
 801135c:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011364:	b2db      	uxtb	r3, r3
 8011366:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	b2da      	uxtb	r2, r3
 801136c:	68bb      	ldr	r3, [r7, #8]
 801136e:	b2db      	uxtb	r3, r3
 8011370:	4313      	orrs	r3, r2
 8011372:	b2db      	uxtb	r3, r3
}
 8011374:	4618      	mov	r0, r3
 8011376:	3714      	adds	r7, #20
 8011378:	46bd      	mov	sp, r7
 801137a:	bc80      	pop	{r7}
 801137c:	4770      	bx	lr

0801137e <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 801137e:	b480      	push	{r7}
 8011380:	b083      	sub	sp, #12
 8011382:	af00      	add	r7, sp, #0
 8011384:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 801138a:	4618      	mov	r0, r3
 801138c:	370c      	adds	r7, #12
 801138e:	46bd      	mov	sp, r7
 8011390:	bc80      	pop	{r7}
 8011392:	4770      	bx	lr

08011394 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011394:	b580      	push	{r7, lr}
 8011396:	b090      	sub	sp, #64	; 0x40
 8011398:	af00      	add	r7, sp, #0
 801139a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	f003 0320 	and.w	r3, r3, #32
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d137      	bne.n	8011420 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80113b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80113b2:	2200      	movs	r2, #0
 80113b4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80113b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	3314      	adds	r3, #20
 80113bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113c0:	e853 3f00 	ldrex	r3, [r3]
 80113c4:	623b      	str	r3, [r7, #32]
   return(result);
 80113c6:	6a3b      	ldr	r3, [r7, #32]
 80113c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80113cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80113ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	3314      	adds	r3, #20
 80113d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80113d6:	633a      	str	r2, [r7, #48]	; 0x30
 80113d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80113dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80113de:	e841 2300 	strex	r3, r2, [r1]
 80113e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80113e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d1e5      	bne.n	80113b6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80113ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	330c      	adds	r3, #12
 80113f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113f2:	693b      	ldr	r3, [r7, #16]
 80113f4:	e853 3f00 	ldrex	r3, [r3]
 80113f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011400:	637b      	str	r3, [r7, #52]	; 0x34
 8011402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	330c      	adds	r3, #12
 8011408:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801140a:	61fa      	str	r2, [r7, #28]
 801140c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801140e:	69b9      	ldr	r1, [r7, #24]
 8011410:	69fa      	ldr	r2, [r7, #28]
 8011412:	e841 2300 	strex	r3, r2, [r1]
 8011416:	617b      	str	r3, [r7, #20]
   return(result);
 8011418:	697b      	ldr	r3, [r7, #20]
 801141a:	2b00      	cmp	r3, #0
 801141c:	d1e5      	bne.n	80113ea <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801141e:	e002      	b.n	8011426 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8011420:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011422:	f7ff fe1f 	bl	8011064 <HAL_UART_TxCpltCallback>
}
 8011426:	bf00      	nop
 8011428:	3740      	adds	r7, #64	; 0x40
 801142a:	46bd      	mov	sp, r7
 801142c:	bd80      	pop	{r7, pc}

0801142e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801142e:	b580      	push	{r7, lr}
 8011430:	b084      	sub	sp, #16
 8011432:	af00      	add	r7, sp, #0
 8011434:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801143a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 801143c:	68f8      	ldr	r0, [r7, #12]
 801143e:	f7ff fe1a 	bl	8011076 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011442:	bf00      	nop
 8011444:	3710      	adds	r7, #16
 8011446:	46bd      	mov	sp, r7
 8011448:	bd80      	pop	{r7, pc}

0801144a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801144a:	b580      	push	{r7, lr}
 801144c:	b09c      	sub	sp, #112	; 0x70
 801144e:	af00      	add	r7, sp, #0
 8011450:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011456:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	f003 0320 	and.w	r3, r3, #32
 8011462:	2b00      	cmp	r3, #0
 8011464:	d172      	bne.n	801154c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8011466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011468:	2200      	movs	r2, #0
 801146a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801146c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	330c      	adds	r3, #12
 8011472:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011474:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011476:	e853 3f00 	ldrex	r3, [r3]
 801147a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801147c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801147e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011482:	66bb      	str	r3, [r7, #104]	; 0x68
 8011484:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	330c      	adds	r3, #12
 801148a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801148c:	65ba      	str	r2, [r7, #88]	; 0x58
 801148e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011490:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011492:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011494:	e841 2300 	strex	r3, r2, [r1]
 8011498:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801149a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801149c:	2b00      	cmp	r3, #0
 801149e:	d1e5      	bne.n	801146c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80114a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	3314      	adds	r3, #20
 80114a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114aa:	e853 3f00 	ldrex	r3, [r3]
 80114ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80114b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114b2:	f023 0301 	bic.w	r3, r3, #1
 80114b6:	667b      	str	r3, [r7, #100]	; 0x64
 80114b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	3314      	adds	r3, #20
 80114be:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80114c0:	647a      	str	r2, [r7, #68]	; 0x44
 80114c2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80114c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80114c8:	e841 2300 	strex	r3, r2, [r1]
 80114cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80114ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d1e5      	bne.n	80114a0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80114d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	3314      	adds	r3, #20
 80114da:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114de:	e853 3f00 	ldrex	r3, [r3]
 80114e2:	623b      	str	r3, [r7, #32]
   return(result);
 80114e4:	6a3b      	ldr	r3, [r7, #32]
 80114e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80114ea:	663b      	str	r3, [r7, #96]	; 0x60
 80114ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	3314      	adds	r3, #20
 80114f2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80114f4:	633a      	str	r2, [r7, #48]	; 0x30
 80114f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80114fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80114fc:	e841 2300 	strex	r3, r2, [r1]
 8011500:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011504:	2b00      	cmp	r3, #0
 8011506:	d1e5      	bne.n	80114d4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8011508:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801150a:	2220      	movs	r2, #32
 801150c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011510:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011514:	2b01      	cmp	r3, #1
 8011516:	d119      	bne.n	801154c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011518:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	330c      	adds	r3, #12
 801151e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011520:	693b      	ldr	r3, [r7, #16]
 8011522:	e853 3f00 	ldrex	r3, [r3]
 8011526:	60fb      	str	r3, [r7, #12]
   return(result);
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	f023 0310 	bic.w	r3, r3, #16
 801152e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	330c      	adds	r3, #12
 8011536:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011538:	61fa      	str	r2, [r7, #28]
 801153a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801153c:	69b9      	ldr	r1, [r7, #24]
 801153e:	69fa      	ldr	r2, [r7, #28]
 8011540:	e841 2300 	strex	r3, r2, [r1]
 8011544:	617b      	str	r3, [r7, #20]
   return(result);
 8011546:	697b      	ldr	r3, [r7, #20]
 8011548:	2b00      	cmp	r3, #0
 801154a:	d1e5      	bne.n	8011518 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801154c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801154e:	2200      	movs	r2, #0
 8011550:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011552:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011556:	2b01      	cmp	r3, #1
 8011558:	d106      	bne.n	8011568 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801155a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801155c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801155e:	4619      	mov	r1, r3
 8011560:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8011562:	f7ff fdc7 	bl	80110f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011566:	e002      	b.n	801156e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8011568:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801156a:	f7ff fd8d 	bl	8011088 <HAL_UART_RxCpltCallback>
}
 801156e:	bf00      	nop
 8011570:	3770      	adds	r7, #112	; 0x70
 8011572:	46bd      	mov	sp, r7
 8011574:	bd80      	pop	{r7, pc}

08011576 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011576:	b580      	push	{r7, lr}
 8011578:	b084      	sub	sp, #16
 801157a:	af00      	add	r7, sp, #0
 801157c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011582:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	2201      	movs	r2, #1
 8011588:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801158e:	2b01      	cmp	r3, #1
 8011590:	d108      	bne.n	80115a4 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8011596:	085b      	lsrs	r3, r3, #1
 8011598:	b29b      	uxth	r3, r3
 801159a:	4619      	mov	r1, r3
 801159c:	68f8      	ldr	r0, [r7, #12]
 801159e:	f7ff fda9 	bl	80110f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80115a2:	e002      	b.n	80115aa <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80115a4:	68f8      	ldr	r0, [r7, #12]
 80115a6:	f7ff fd78 	bl	801109a <HAL_UART_RxHalfCpltCallback>
}
 80115aa:	bf00      	nop
 80115ac:	3710      	adds	r7, #16
 80115ae:	46bd      	mov	sp, r7
 80115b0:	bd80      	pop	{r7, pc}

080115b2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80115b2:	b580      	push	{r7, lr}
 80115b4:	b084      	sub	sp, #16
 80115b6:	af00      	add	r7, sp, #0
 80115b8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80115ba:	2300      	movs	r3, #0
 80115bc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115c2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80115c4:	68bb      	ldr	r3, [r7, #8]
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	695b      	ldr	r3, [r3, #20]
 80115ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80115ce:	2b80      	cmp	r3, #128	; 0x80
 80115d0:	bf0c      	ite	eq
 80115d2:	2301      	moveq	r3, #1
 80115d4:	2300      	movne	r3, #0
 80115d6:	b2db      	uxtb	r3, r3
 80115d8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80115da:	68bb      	ldr	r3, [r7, #8]
 80115dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80115e0:	b2db      	uxtb	r3, r3
 80115e2:	2b21      	cmp	r3, #33	; 0x21
 80115e4:	d108      	bne.n	80115f8 <UART_DMAError+0x46>
 80115e6:	68fb      	ldr	r3, [r7, #12]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d005      	beq.n	80115f8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80115ec:	68bb      	ldr	r3, [r7, #8]
 80115ee:	2200      	movs	r2, #0
 80115f0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80115f2:	68b8      	ldr	r0, [r7, #8]
 80115f4:	f000 f968 	bl	80118c8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80115f8:	68bb      	ldr	r3, [r7, #8]
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	695b      	ldr	r3, [r3, #20]
 80115fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011602:	2b40      	cmp	r3, #64	; 0x40
 8011604:	bf0c      	ite	eq
 8011606:	2301      	moveq	r3, #1
 8011608:	2300      	movne	r3, #0
 801160a:	b2db      	uxtb	r3, r3
 801160c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 801160e:	68bb      	ldr	r3, [r7, #8]
 8011610:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011614:	b2db      	uxtb	r3, r3
 8011616:	2b22      	cmp	r3, #34	; 0x22
 8011618:	d108      	bne.n	801162c <UART_DMAError+0x7a>
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	2b00      	cmp	r3, #0
 801161e:	d005      	beq.n	801162c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8011620:	68bb      	ldr	r3, [r7, #8]
 8011622:	2200      	movs	r2, #0
 8011624:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8011626:	68b8      	ldr	r0, [r7, #8]
 8011628:	f000 f975 	bl	8011916 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801162c:	68bb      	ldr	r3, [r7, #8]
 801162e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011630:	f043 0210 	orr.w	r2, r3, #16
 8011634:	68bb      	ldr	r3, [r7, #8]
 8011636:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011638:	68b8      	ldr	r0, [r7, #8]
 801163a:	f7ff fd37 	bl	80110ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801163e:	bf00      	nop
 8011640:	3710      	adds	r7, #16
 8011642:	46bd      	mov	sp, r7
 8011644:	bd80      	pop	{r7, pc}

08011646 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8011646:	b580      	push	{r7, lr}
 8011648:	b090      	sub	sp, #64	; 0x40
 801164a:	af00      	add	r7, sp, #0
 801164c:	60f8      	str	r0, [r7, #12]
 801164e:	60b9      	str	r1, [r7, #8]
 8011650:	603b      	str	r3, [r7, #0]
 8011652:	4613      	mov	r3, r2
 8011654:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011656:	e050      	b.n	80116fa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011658:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801165a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801165e:	d04c      	beq.n	80116fa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8011660:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011662:	2b00      	cmp	r3, #0
 8011664:	d007      	beq.n	8011676 <UART_WaitOnFlagUntilTimeout+0x30>
 8011666:	f7f0 fff5 	bl	8002654 <HAL_GetTick>
 801166a:	4602      	mov	r2, r0
 801166c:	683b      	ldr	r3, [r7, #0]
 801166e:	1ad3      	subs	r3, r2, r3
 8011670:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011672:	429a      	cmp	r2, r3
 8011674:	d241      	bcs.n	80116fa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8011676:	68fb      	ldr	r3, [r7, #12]
 8011678:	681b      	ldr	r3, [r3, #0]
 801167a:	330c      	adds	r3, #12
 801167c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801167e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011680:	e853 3f00 	ldrex	r3, [r3]
 8011684:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011688:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801168c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	330c      	adds	r3, #12
 8011694:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011696:	637a      	str	r2, [r7, #52]	; 0x34
 8011698:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801169a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801169c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801169e:	e841 2300 	strex	r3, r2, [r1]
 80116a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80116a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d1e5      	bne.n	8011676 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	3314      	adds	r3, #20
 80116b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116b2:	697b      	ldr	r3, [r7, #20]
 80116b4:	e853 3f00 	ldrex	r3, [r3]
 80116b8:	613b      	str	r3, [r7, #16]
   return(result);
 80116ba:	693b      	ldr	r3, [r7, #16]
 80116bc:	f023 0301 	bic.w	r3, r3, #1
 80116c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	681b      	ldr	r3, [r3, #0]
 80116c6:	3314      	adds	r3, #20
 80116c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80116ca:	623a      	str	r2, [r7, #32]
 80116cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116ce:	69f9      	ldr	r1, [r7, #28]
 80116d0:	6a3a      	ldr	r2, [r7, #32]
 80116d2:	e841 2300 	strex	r3, r2, [r1]
 80116d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80116d8:	69bb      	ldr	r3, [r7, #24]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d1e5      	bne.n	80116aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	2220      	movs	r2, #32
 80116e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	2220      	movs	r2, #32
 80116ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	2200      	movs	r2, #0
 80116f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80116f6:	2303      	movs	r3, #3
 80116f8:	e00f      	b.n	801171a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	681b      	ldr	r3, [r3, #0]
 80116fe:	681a      	ldr	r2, [r3, #0]
 8011700:	68bb      	ldr	r3, [r7, #8]
 8011702:	4013      	ands	r3, r2
 8011704:	68ba      	ldr	r2, [r7, #8]
 8011706:	429a      	cmp	r2, r3
 8011708:	bf0c      	ite	eq
 801170a:	2301      	moveq	r3, #1
 801170c:	2300      	movne	r3, #0
 801170e:	b2db      	uxtb	r3, r3
 8011710:	461a      	mov	r2, r3
 8011712:	79fb      	ldrb	r3, [r7, #7]
 8011714:	429a      	cmp	r2, r3
 8011716:	d09f      	beq.n	8011658 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8011718:	2300      	movs	r3, #0
}
 801171a:	4618      	mov	r0, r3
 801171c:	3740      	adds	r7, #64	; 0x40
 801171e:	46bd      	mov	sp, r7
 8011720:	bd80      	pop	{r7, pc}

08011722 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011722:	b480      	push	{r7}
 8011724:	b085      	sub	sp, #20
 8011726:	af00      	add	r7, sp, #0
 8011728:	60f8      	str	r0, [r7, #12]
 801172a:	60b9      	str	r1, [r7, #8]
 801172c:	4613      	mov	r3, r2
 801172e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	68ba      	ldr	r2, [r7, #8]
 8011734:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	88fa      	ldrh	r2, [r7, #6]
 801173a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	88fa      	ldrh	r2, [r7, #6]
 8011740:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	2200      	movs	r2, #0
 8011746:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	2222      	movs	r2, #34	; 0x22
 801174c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8011750:	68fb      	ldr	r3, [r7, #12]
 8011752:	691b      	ldr	r3, [r3, #16]
 8011754:	2b00      	cmp	r3, #0
 8011756:	d007      	beq.n	8011768 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	68da      	ldr	r2, [r3, #12]
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011766:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	695a      	ldr	r2, [r3, #20]
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	681b      	ldr	r3, [r3, #0]
 8011772:	f042 0201 	orr.w	r2, r2, #1
 8011776:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	68da      	ldr	r2, [r3, #12]
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	f042 0220 	orr.w	r2, r2, #32
 8011786:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011788:	2300      	movs	r3, #0
}
 801178a:	4618      	mov	r0, r3
 801178c:	3714      	adds	r7, #20
 801178e:	46bd      	mov	sp, r7
 8011790:	bc80      	pop	{r7}
 8011792:	4770      	bx	lr

08011794 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011794:	b580      	push	{r7, lr}
 8011796:	b098      	sub	sp, #96	; 0x60
 8011798:	af00      	add	r7, sp, #0
 801179a:	60f8      	str	r0, [r7, #12]
 801179c:	60b9      	str	r1, [r7, #8]
 801179e:	4613      	mov	r3, r2
 80117a0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80117a2:	68ba      	ldr	r2, [r7, #8]
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	88fa      	ldrh	r2, [r7, #6]
 80117ac:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	2200      	movs	r2, #0
 80117b2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	2222      	movs	r2, #34	; 0x22
 80117b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80117c0:	4a3e      	ldr	r2, [pc, #248]	; (80118bc <UART_Start_Receive_DMA+0x128>)
 80117c2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80117c4:	68fb      	ldr	r3, [r7, #12]
 80117c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80117c8:	4a3d      	ldr	r2, [pc, #244]	; (80118c0 <UART_Start_Receive_DMA+0x12c>)
 80117ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80117d0:	4a3c      	ldr	r2, [pc, #240]	; (80118c4 <UART_Start_Receive_DMA+0x130>)
 80117d2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80117d8:	2200      	movs	r2, #0
 80117da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80117dc:	f107 0308 	add.w	r3, r7, #8
 80117e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	3304      	adds	r3, #4
 80117ec:	4619      	mov	r1, r3
 80117ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80117f0:	681a      	ldr	r2, [r3, #0]
 80117f2:	88fb      	ldrh	r3, [r7, #6]
 80117f4:	f7f1 fc85 	bl	8003102 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80117f8:	2300      	movs	r3, #0
 80117fa:	613b      	str	r3, [r7, #16]
 80117fc:	68fb      	ldr	r3, [r7, #12]
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	681b      	ldr	r3, [r3, #0]
 8011802:	613b      	str	r3, [r7, #16]
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	685b      	ldr	r3, [r3, #4]
 801180a:	613b      	str	r3, [r7, #16]
 801180c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	691b      	ldr	r3, [r3, #16]
 8011812:	2b00      	cmp	r3, #0
 8011814:	d019      	beq.n	801184a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	330c      	adds	r3, #12
 801181c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801181e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011820:	e853 3f00 	ldrex	r3, [r3]
 8011824:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801182c:	65bb      	str	r3, [r7, #88]	; 0x58
 801182e:	68fb      	ldr	r3, [r7, #12]
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	330c      	adds	r3, #12
 8011834:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011836:	64fa      	str	r2, [r7, #76]	; 0x4c
 8011838:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801183a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801183c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801183e:	e841 2300 	strex	r3, r2, [r1]
 8011842:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8011844:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011846:	2b00      	cmp	r3, #0
 8011848:	d1e5      	bne.n	8011816 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	3314      	adds	r3, #20
 8011850:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011854:	e853 3f00 	ldrex	r3, [r3]
 8011858:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801185a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801185c:	f043 0301 	orr.w	r3, r3, #1
 8011860:	657b      	str	r3, [r7, #84]	; 0x54
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	3314      	adds	r3, #20
 8011868:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801186a:	63ba      	str	r2, [r7, #56]	; 0x38
 801186c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801186e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011870:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011872:	e841 2300 	strex	r3, r2, [r1]
 8011876:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801187a:	2b00      	cmp	r3, #0
 801187c:	d1e5      	bne.n	801184a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	3314      	adds	r3, #20
 8011884:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011886:	69bb      	ldr	r3, [r7, #24]
 8011888:	e853 3f00 	ldrex	r3, [r3]
 801188c:	617b      	str	r3, [r7, #20]
   return(result);
 801188e:	697b      	ldr	r3, [r7, #20]
 8011890:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011894:	653b      	str	r3, [r7, #80]	; 0x50
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	3314      	adds	r3, #20
 801189c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801189e:	627a      	str	r2, [r7, #36]	; 0x24
 80118a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118a2:	6a39      	ldr	r1, [r7, #32]
 80118a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80118a6:	e841 2300 	strex	r3, r2, [r1]
 80118aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80118ac:	69fb      	ldr	r3, [r7, #28]
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d1e5      	bne.n	801187e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80118b2:	2300      	movs	r3, #0
}
 80118b4:	4618      	mov	r0, r3
 80118b6:	3760      	adds	r7, #96	; 0x60
 80118b8:	46bd      	mov	sp, r7
 80118ba:	bd80      	pop	{r7, pc}
 80118bc:	0801144b 	.word	0x0801144b
 80118c0:	08011577 	.word	0x08011577
 80118c4:	080115b3 	.word	0x080115b3

080118c8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80118c8:	b480      	push	{r7}
 80118ca:	b089      	sub	sp, #36	; 0x24
 80118cc:	af00      	add	r7, sp, #0
 80118ce:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	330c      	adds	r3, #12
 80118d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118d8:	68fb      	ldr	r3, [r7, #12]
 80118da:	e853 3f00 	ldrex	r3, [r3]
 80118de:	60bb      	str	r3, [r7, #8]
   return(result);
 80118e0:	68bb      	ldr	r3, [r7, #8]
 80118e2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80118e6:	61fb      	str	r3, [r7, #28]
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	330c      	adds	r3, #12
 80118ee:	69fa      	ldr	r2, [r7, #28]
 80118f0:	61ba      	str	r2, [r7, #24]
 80118f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118f4:	6979      	ldr	r1, [r7, #20]
 80118f6:	69ba      	ldr	r2, [r7, #24]
 80118f8:	e841 2300 	strex	r3, r2, [r1]
 80118fc:	613b      	str	r3, [r7, #16]
   return(result);
 80118fe:	693b      	ldr	r3, [r7, #16]
 8011900:	2b00      	cmp	r3, #0
 8011902:	d1e5      	bne.n	80118d0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	2220      	movs	r2, #32
 8011908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 801190c:	bf00      	nop
 801190e:	3724      	adds	r7, #36	; 0x24
 8011910:	46bd      	mov	sp, r7
 8011912:	bc80      	pop	{r7}
 8011914:	4770      	bx	lr

08011916 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011916:	b480      	push	{r7}
 8011918:	b095      	sub	sp, #84	; 0x54
 801191a:	af00      	add	r7, sp, #0
 801191c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	330c      	adds	r3, #12
 8011924:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011928:	e853 3f00 	ldrex	r3, [r3]
 801192c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801192e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011930:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011934:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	330c      	adds	r3, #12
 801193c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801193e:	643a      	str	r2, [r7, #64]	; 0x40
 8011940:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011942:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011944:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011946:	e841 2300 	strex	r3, r2, [r1]
 801194a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801194c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801194e:	2b00      	cmp	r3, #0
 8011950:	d1e5      	bne.n	801191e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	3314      	adds	r3, #20
 8011958:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801195a:	6a3b      	ldr	r3, [r7, #32]
 801195c:	e853 3f00 	ldrex	r3, [r3]
 8011960:	61fb      	str	r3, [r7, #28]
   return(result);
 8011962:	69fb      	ldr	r3, [r7, #28]
 8011964:	f023 0301 	bic.w	r3, r3, #1
 8011968:	64bb      	str	r3, [r7, #72]	; 0x48
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	3314      	adds	r3, #20
 8011970:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011972:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011974:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011976:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011978:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801197a:	e841 2300 	strex	r3, r2, [r1]
 801197e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011982:	2b00      	cmp	r3, #0
 8011984:	d1e5      	bne.n	8011952 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801198a:	2b01      	cmp	r3, #1
 801198c:	d119      	bne.n	80119c2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	330c      	adds	r3, #12
 8011994:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	e853 3f00 	ldrex	r3, [r3]
 801199c:	60bb      	str	r3, [r7, #8]
   return(result);
 801199e:	68bb      	ldr	r3, [r7, #8]
 80119a0:	f023 0310 	bic.w	r3, r3, #16
 80119a4:	647b      	str	r3, [r7, #68]	; 0x44
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	330c      	adds	r3, #12
 80119ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80119ae:	61ba      	str	r2, [r7, #24]
 80119b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119b2:	6979      	ldr	r1, [r7, #20]
 80119b4:	69ba      	ldr	r2, [r7, #24]
 80119b6:	e841 2300 	strex	r3, r2, [r1]
 80119ba:	613b      	str	r3, [r7, #16]
   return(result);
 80119bc:	693b      	ldr	r3, [r7, #16]
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d1e5      	bne.n	801198e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	2220      	movs	r2, #32
 80119c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	2200      	movs	r2, #0
 80119ce:	631a      	str	r2, [r3, #48]	; 0x30
}
 80119d0:	bf00      	nop
 80119d2:	3754      	adds	r7, #84	; 0x54
 80119d4:	46bd      	mov	sp, r7
 80119d6:	bc80      	pop	{r7}
 80119d8:	4770      	bx	lr

080119da <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80119da:	b580      	push	{r7, lr}
 80119dc:	b084      	sub	sp, #16
 80119de:	af00      	add	r7, sp, #0
 80119e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	2200      	movs	r2, #0
 80119ec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80119ee:	68fb      	ldr	r3, [r7, #12]
 80119f0:	2200      	movs	r2, #0
 80119f2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80119f4:	68f8      	ldr	r0, [r7, #12]
 80119f6:	f7ff fb59 	bl	80110ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80119fa:	bf00      	nop
 80119fc:	3710      	adds	r7, #16
 80119fe:	46bd      	mov	sp, r7
 8011a00:	bd80      	pop	{r7, pc}

08011a02 <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8011a02:	b580      	push	{r7, lr}
 8011a04:	b084      	sub	sp, #16
 8011a06:	af00      	add	r7, sp, #0
 8011a08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a0e:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a14:	2200      	movs	r2, #0
 8011a16:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8011a18:	68fb      	ldr	r3, [r7, #12]
 8011a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d004      	beq.n	8011a2a <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d117      	bne.n	8011a5a <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8011a2a:	68fb      	ldr	r3, [r7, #12]
 8011a2c:	2200      	movs	r2, #0
 8011a2e:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	2200      	movs	r2, #0
 8011a34:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011a36:	68fb      	ldr	r3, [r7, #12]
 8011a38:	2200      	movs	r2, #0
 8011a3a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8011a3c:	68fb      	ldr	r3, [r7, #12]
 8011a3e:	2220      	movs	r2, #32
 8011a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	2220      	movs	r2, #32
 8011a48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	2200      	movs	r2, #0
 8011a50:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8011a52:	68f8      	ldr	r0, [r7, #12]
 8011a54:	f7ff fb33 	bl	80110be <HAL_UART_AbortCpltCallback>
 8011a58:	e000      	b.n	8011a5c <UART_DMATxAbortCallback+0x5a>
      return;
 8011a5a:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011a5c:	3710      	adds	r7, #16
 8011a5e:	46bd      	mov	sp, r7
 8011a60:	bd80      	pop	{r7, pc}

08011a62 <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8011a62:	b580      	push	{r7, lr}
 8011a64:	b084      	sub	sp, #16
 8011a66:	af00      	add	r7, sp, #0
 8011a68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a6e:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8011a70:	68fb      	ldr	r3, [r7, #12]
 8011a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011a74:	2200      	movs	r2, #0
 8011a76:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8011a78:	68fb      	ldr	r3, [r7, #12]
 8011a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d004      	beq.n	8011a8a <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8011a80:	68fb      	ldr	r3, [r7, #12]
 8011a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d117      	bne.n	8011aba <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	2200      	movs	r2, #0
 8011a8e:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	2200      	movs	r2, #0
 8011a94:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011a96:	68fb      	ldr	r3, [r7, #12]
 8011a98:	2200      	movs	r2, #0
 8011a9a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	2220      	movs	r2, #32
 8011aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	2220      	movs	r2, #32
 8011aa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	2200      	movs	r2, #0
 8011ab0:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8011ab2:	68f8      	ldr	r0, [r7, #12]
 8011ab4:	f7ff fb03 	bl	80110be <HAL_UART_AbortCpltCallback>
 8011ab8:	e000      	b.n	8011abc <UART_DMARxAbortCallback+0x5a>
      return;
 8011aba:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011abc:	3710      	adds	r7, #16
 8011abe:	46bd      	mov	sp, r7
 8011ac0:	bd80      	pop	{r7, pc}

08011ac2 <UART_DMATxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8011ac2:	b580      	push	{r7, lr}
 8011ac4:	b084      	sub	sp, #16
 8011ac6:	af00      	add	r7, sp, #0
 8011ac8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ace:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0x00U;
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	2200      	movs	r2, #0
 8011ad4:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	2220      	movs	r2, #32
 8011ada:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 8011ade:	68f8      	ldr	r0, [r7, #12]
 8011ae0:	f7ff faf6 	bl	80110d0 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011ae4:	bf00      	nop
 8011ae6:	3710      	adds	r7, #16
 8011ae8:	46bd      	mov	sp, r7
 8011aea:	bd80      	pop	{r7, pc}

08011aec <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8011aec:	b580      	push	{r7, lr}
 8011aee:	b084      	sub	sp, #16
 8011af0:	af00      	add	r7, sp, #0
 8011af2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011af8:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 8011afa:	68fb      	ldr	r3, [r7, #12]
 8011afc:	2200      	movs	r2, #0
 8011afe:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011b00:	68fb      	ldr	r3, [r7, #12]
 8011b02:	2220      	movs	r2, #32
 8011b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011b08:	68fb      	ldr	r3, [r7, #12]
 8011b0a:	2200      	movs	r2, #0
 8011b0c:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8011b0e:	68f8      	ldr	r0, [r7, #12]
 8011b10:	f7ff fae7 	bl	80110e2 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011b14:	bf00      	nop
 8011b16:	3710      	adds	r7, #16
 8011b18:	46bd      	mov	sp, r7
 8011b1a:	bd80      	pop	{r7, pc}

08011b1c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8011b1c:	b480      	push	{r7}
 8011b1e:	b085      	sub	sp, #20
 8011b20:	af00      	add	r7, sp, #0
 8011b22:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011b2a:	b2db      	uxtb	r3, r3
 8011b2c:	2b21      	cmp	r3, #33	; 0x21
 8011b2e:	d13e      	bne.n	8011bae <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	689b      	ldr	r3, [r3, #8]
 8011b34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011b38:	d114      	bne.n	8011b64 <UART_Transmit_IT+0x48>
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	691b      	ldr	r3, [r3, #16]
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d110      	bne.n	8011b64 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	6a1b      	ldr	r3, [r3, #32]
 8011b46:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8011b48:	68fb      	ldr	r3, [r7, #12]
 8011b4a:	881b      	ldrh	r3, [r3, #0]
 8011b4c:	461a      	mov	r2, r3
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011b56:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	6a1b      	ldr	r3, [r3, #32]
 8011b5c:	1c9a      	adds	r2, r3, #2
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	621a      	str	r2, [r3, #32]
 8011b62:	e008      	b.n	8011b76 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	6a1b      	ldr	r3, [r3, #32]
 8011b68:	1c59      	adds	r1, r3, #1
 8011b6a:	687a      	ldr	r2, [r7, #4]
 8011b6c:	6211      	str	r1, [r2, #32]
 8011b6e:	781a      	ldrb	r2, [r3, #0]
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8011b7a:	b29b      	uxth	r3, r3
 8011b7c:	3b01      	subs	r3, #1
 8011b7e:	b29b      	uxth	r3, r3
 8011b80:	687a      	ldr	r2, [r7, #4]
 8011b82:	4619      	mov	r1, r3
 8011b84:	84d1      	strh	r1, [r2, #38]	; 0x26
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d10f      	bne.n	8011baa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	68da      	ldr	r2, [r3, #12]
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011b98:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	68da      	ldr	r2, [r3, #12]
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011ba8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8011baa:	2300      	movs	r3, #0
 8011bac:	e000      	b.n	8011bb0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8011bae:	2302      	movs	r3, #2
  }
}
 8011bb0:	4618      	mov	r0, r3
 8011bb2:	3714      	adds	r7, #20
 8011bb4:	46bd      	mov	sp, r7
 8011bb6:	bc80      	pop	{r7}
 8011bb8:	4770      	bx	lr

08011bba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011bba:	b580      	push	{r7, lr}
 8011bbc:	b082      	sub	sp, #8
 8011bbe:	af00      	add	r7, sp, #0
 8011bc0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	681b      	ldr	r3, [r3, #0]
 8011bc6:	68da      	ldr	r2, [r3, #12]
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011bd0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	2220      	movs	r2, #32
 8011bd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011bda:	6878      	ldr	r0, [r7, #4]
 8011bdc:	f7ff fa42 	bl	8011064 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8011be0:	2300      	movs	r3, #0
}
 8011be2:	4618      	mov	r0, r3
 8011be4:	3708      	adds	r7, #8
 8011be6:	46bd      	mov	sp, r7
 8011be8:	bd80      	pop	{r7, pc}

08011bea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8011bea:	b580      	push	{r7, lr}
 8011bec:	b08c      	sub	sp, #48	; 0x30
 8011bee:	af00      	add	r7, sp, #0
 8011bf0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011bf8:	b2db      	uxtb	r3, r3
 8011bfa:	2b22      	cmp	r3, #34	; 0x22
 8011bfc:	f040 80ae 	bne.w	8011d5c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	689b      	ldr	r3, [r3, #8]
 8011c04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011c08:	d117      	bne.n	8011c3a <UART_Receive_IT+0x50>
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	691b      	ldr	r3, [r3, #16]
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d113      	bne.n	8011c3a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8011c12:	2300      	movs	r3, #0
 8011c14:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c1a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	685b      	ldr	r3, [r3, #4]
 8011c22:	b29b      	uxth	r3, r3
 8011c24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011c28:	b29a      	uxth	r2, r3
 8011c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c2c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c32:	1c9a      	adds	r2, r3, #2
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	629a      	str	r2, [r3, #40]	; 0x28
 8011c38:	e026      	b.n	8011c88 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8011c40:	2300      	movs	r3, #0
 8011c42:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	689b      	ldr	r3, [r3, #8]
 8011c48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011c4c:	d007      	beq.n	8011c5e <UART_Receive_IT+0x74>
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	689b      	ldr	r3, [r3, #8]
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d10a      	bne.n	8011c6c <UART_Receive_IT+0x82>
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	691b      	ldr	r3, [r3, #16]
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d106      	bne.n	8011c6c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	685b      	ldr	r3, [r3, #4]
 8011c64:	b2da      	uxtb	r2, r3
 8011c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c68:	701a      	strb	r2, [r3, #0]
 8011c6a:	e008      	b.n	8011c7e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	685b      	ldr	r3, [r3, #4]
 8011c72:	b2db      	uxtb	r3, r3
 8011c74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011c78:	b2da      	uxtb	r2, r3
 8011c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c7c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c82:	1c5a      	adds	r2, r3, #1
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8011c8c:	b29b      	uxth	r3, r3
 8011c8e:	3b01      	subs	r3, #1
 8011c90:	b29b      	uxth	r3, r3
 8011c92:	687a      	ldr	r2, [r7, #4]
 8011c94:	4619      	mov	r1, r3
 8011c96:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d15d      	bne.n	8011d58 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	68da      	ldr	r2, [r3, #12]
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	f022 0220 	bic.w	r2, r2, #32
 8011caa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	68da      	ldr	r2, [r3, #12]
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011cba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	695a      	ldr	r2, [r3, #20]
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	f022 0201 	bic.w	r2, r2, #1
 8011cca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	2220      	movs	r2, #32
 8011cd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	2200      	movs	r2, #0
 8011cd8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011cde:	2b01      	cmp	r3, #1
 8011ce0:	d135      	bne.n	8011d4e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	2200      	movs	r2, #0
 8011ce6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	330c      	adds	r3, #12
 8011cee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011cf0:	697b      	ldr	r3, [r7, #20]
 8011cf2:	e853 3f00 	ldrex	r3, [r3]
 8011cf6:	613b      	str	r3, [r7, #16]
   return(result);
 8011cf8:	693b      	ldr	r3, [r7, #16]
 8011cfa:	f023 0310 	bic.w	r3, r3, #16
 8011cfe:	627b      	str	r3, [r7, #36]	; 0x24
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	330c      	adds	r3, #12
 8011d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d08:	623a      	str	r2, [r7, #32]
 8011d0a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d0c:	69f9      	ldr	r1, [r7, #28]
 8011d0e:	6a3a      	ldr	r2, [r7, #32]
 8011d10:	e841 2300 	strex	r3, r2, [r1]
 8011d14:	61bb      	str	r3, [r7, #24]
   return(result);
 8011d16:	69bb      	ldr	r3, [r7, #24]
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d1e5      	bne.n	8011ce8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	f003 0310 	and.w	r3, r3, #16
 8011d26:	2b10      	cmp	r3, #16
 8011d28:	d10a      	bne.n	8011d40 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8011d2a:	2300      	movs	r3, #0
 8011d2c:	60fb      	str	r3, [r7, #12]
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	60fb      	str	r3, [r7, #12]
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	685b      	ldr	r3, [r3, #4]
 8011d3c:	60fb      	str	r3, [r7, #12]
 8011d3e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8011d44:	4619      	mov	r1, r3
 8011d46:	6878      	ldr	r0, [r7, #4]
 8011d48:	f7ff f9d4 	bl	80110f4 <HAL_UARTEx_RxEventCallback>
 8011d4c:	e002      	b.n	8011d54 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8011d4e:	6878      	ldr	r0, [r7, #4]
 8011d50:	f7ff f99a 	bl	8011088 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8011d54:	2300      	movs	r3, #0
 8011d56:	e002      	b.n	8011d5e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8011d58:	2300      	movs	r3, #0
 8011d5a:	e000      	b.n	8011d5e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8011d5c:	2302      	movs	r3, #2
  }
}
 8011d5e:	4618      	mov	r0, r3
 8011d60:	3730      	adds	r7, #48	; 0x30
 8011d62:	46bd      	mov	sp, r7
 8011d64:	bd80      	pop	{r7, pc}
	...

08011d68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011d68:	b580      	push	{r7, lr}
 8011d6a:	b084      	sub	sp, #16
 8011d6c:	af00      	add	r7, sp, #0
 8011d6e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	691b      	ldr	r3, [r3, #16]
 8011d76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	68da      	ldr	r2, [r3, #12]
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	430a      	orrs	r2, r1
 8011d84:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	689a      	ldr	r2, [r3, #8]
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	691b      	ldr	r3, [r3, #16]
 8011d8e:	431a      	orrs	r2, r3
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	695b      	ldr	r3, [r3, #20]
 8011d94:	431a      	orrs	r2, r3
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	69db      	ldr	r3, [r3, #28]
 8011d9a:	4313      	orrs	r3, r2
 8011d9c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	68db      	ldr	r3, [r3, #12]
 8011da4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8011da8:	f023 030c 	bic.w	r3, r3, #12
 8011dac:	687a      	ldr	r2, [r7, #4]
 8011dae:	6812      	ldr	r2, [r2, #0]
 8011db0:	68b9      	ldr	r1, [r7, #8]
 8011db2:	430b      	orrs	r3, r1
 8011db4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	695b      	ldr	r3, [r3, #20]
 8011dbc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	699a      	ldr	r2, [r3, #24]
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	430a      	orrs	r2, r1
 8011dca:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	4a55      	ldr	r2, [pc, #340]	; (8011f28 <UART_SetConfig+0x1c0>)
 8011dd2:	4293      	cmp	r3, r2
 8011dd4:	d103      	bne.n	8011dde <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8011dd6:	f7fa fd4b 	bl	800c870 <HAL_RCC_GetPCLK2Freq>
 8011dda:	60f8      	str	r0, [r7, #12]
 8011ddc:	e002      	b.n	8011de4 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8011dde:	f7fa fd33 	bl	800c848 <HAL_RCC_GetPCLK1Freq>
 8011de2:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	69db      	ldr	r3, [r3, #28]
 8011de8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011dec:	d14c      	bne.n	8011e88 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8011dee:	68fa      	ldr	r2, [r7, #12]
 8011df0:	4613      	mov	r3, r2
 8011df2:	009b      	lsls	r3, r3, #2
 8011df4:	4413      	add	r3, r2
 8011df6:	009a      	lsls	r2, r3, #2
 8011df8:	441a      	add	r2, r3
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	685b      	ldr	r3, [r3, #4]
 8011dfe:	005b      	lsls	r3, r3, #1
 8011e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8011e04:	4a49      	ldr	r2, [pc, #292]	; (8011f2c <UART_SetConfig+0x1c4>)
 8011e06:	fba2 2303 	umull	r2, r3, r2, r3
 8011e0a:	095b      	lsrs	r3, r3, #5
 8011e0c:	0119      	lsls	r1, r3, #4
 8011e0e:	68fa      	ldr	r2, [r7, #12]
 8011e10:	4613      	mov	r3, r2
 8011e12:	009b      	lsls	r3, r3, #2
 8011e14:	4413      	add	r3, r2
 8011e16:	009a      	lsls	r2, r3, #2
 8011e18:	441a      	add	r2, r3
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	685b      	ldr	r3, [r3, #4]
 8011e1e:	005b      	lsls	r3, r3, #1
 8011e20:	fbb2 f2f3 	udiv	r2, r2, r3
 8011e24:	4b41      	ldr	r3, [pc, #260]	; (8011f2c <UART_SetConfig+0x1c4>)
 8011e26:	fba3 0302 	umull	r0, r3, r3, r2
 8011e2a:	095b      	lsrs	r3, r3, #5
 8011e2c:	2064      	movs	r0, #100	; 0x64
 8011e2e:	fb00 f303 	mul.w	r3, r0, r3
 8011e32:	1ad3      	subs	r3, r2, r3
 8011e34:	00db      	lsls	r3, r3, #3
 8011e36:	3332      	adds	r3, #50	; 0x32
 8011e38:	4a3c      	ldr	r2, [pc, #240]	; (8011f2c <UART_SetConfig+0x1c4>)
 8011e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8011e3e:	095b      	lsrs	r3, r3, #5
 8011e40:	005b      	lsls	r3, r3, #1
 8011e42:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8011e46:	4419      	add	r1, r3
 8011e48:	68fa      	ldr	r2, [r7, #12]
 8011e4a:	4613      	mov	r3, r2
 8011e4c:	009b      	lsls	r3, r3, #2
 8011e4e:	4413      	add	r3, r2
 8011e50:	009a      	lsls	r2, r3, #2
 8011e52:	441a      	add	r2, r3
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	685b      	ldr	r3, [r3, #4]
 8011e58:	005b      	lsls	r3, r3, #1
 8011e5a:	fbb2 f2f3 	udiv	r2, r2, r3
 8011e5e:	4b33      	ldr	r3, [pc, #204]	; (8011f2c <UART_SetConfig+0x1c4>)
 8011e60:	fba3 0302 	umull	r0, r3, r3, r2
 8011e64:	095b      	lsrs	r3, r3, #5
 8011e66:	2064      	movs	r0, #100	; 0x64
 8011e68:	fb00 f303 	mul.w	r3, r0, r3
 8011e6c:	1ad3      	subs	r3, r2, r3
 8011e6e:	00db      	lsls	r3, r3, #3
 8011e70:	3332      	adds	r3, #50	; 0x32
 8011e72:	4a2e      	ldr	r2, [pc, #184]	; (8011f2c <UART_SetConfig+0x1c4>)
 8011e74:	fba2 2303 	umull	r2, r3, r2, r3
 8011e78:	095b      	lsrs	r3, r3, #5
 8011e7a:	f003 0207 	and.w	r2, r3, #7
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	681b      	ldr	r3, [r3, #0]
 8011e82:	440a      	add	r2, r1
 8011e84:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8011e86:	e04a      	b.n	8011f1e <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8011e88:	68fa      	ldr	r2, [r7, #12]
 8011e8a:	4613      	mov	r3, r2
 8011e8c:	009b      	lsls	r3, r3, #2
 8011e8e:	4413      	add	r3, r2
 8011e90:	009a      	lsls	r2, r3, #2
 8011e92:	441a      	add	r2, r3
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	685b      	ldr	r3, [r3, #4]
 8011e98:	009b      	lsls	r3, r3, #2
 8011e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8011e9e:	4a23      	ldr	r2, [pc, #140]	; (8011f2c <UART_SetConfig+0x1c4>)
 8011ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8011ea4:	095b      	lsrs	r3, r3, #5
 8011ea6:	0119      	lsls	r1, r3, #4
 8011ea8:	68fa      	ldr	r2, [r7, #12]
 8011eaa:	4613      	mov	r3, r2
 8011eac:	009b      	lsls	r3, r3, #2
 8011eae:	4413      	add	r3, r2
 8011eb0:	009a      	lsls	r2, r3, #2
 8011eb2:	441a      	add	r2, r3
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	685b      	ldr	r3, [r3, #4]
 8011eb8:	009b      	lsls	r3, r3, #2
 8011eba:	fbb2 f2f3 	udiv	r2, r2, r3
 8011ebe:	4b1b      	ldr	r3, [pc, #108]	; (8011f2c <UART_SetConfig+0x1c4>)
 8011ec0:	fba3 0302 	umull	r0, r3, r3, r2
 8011ec4:	095b      	lsrs	r3, r3, #5
 8011ec6:	2064      	movs	r0, #100	; 0x64
 8011ec8:	fb00 f303 	mul.w	r3, r0, r3
 8011ecc:	1ad3      	subs	r3, r2, r3
 8011ece:	011b      	lsls	r3, r3, #4
 8011ed0:	3332      	adds	r3, #50	; 0x32
 8011ed2:	4a16      	ldr	r2, [pc, #88]	; (8011f2c <UART_SetConfig+0x1c4>)
 8011ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8011ed8:	095b      	lsrs	r3, r3, #5
 8011eda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011ede:	4419      	add	r1, r3
 8011ee0:	68fa      	ldr	r2, [r7, #12]
 8011ee2:	4613      	mov	r3, r2
 8011ee4:	009b      	lsls	r3, r3, #2
 8011ee6:	4413      	add	r3, r2
 8011ee8:	009a      	lsls	r2, r3, #2
 8011eea:	441a      	add	r2, r3
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	685b      	ldr	r3, [r3, #4]
 8011ef0:	009b      	lsls	r3, r3, #2
 8011ef2:	fbb2 f2f3 	udiv	r2, r2, r3
 8011ef6:	4b0d      	ldr	r3, [pc, #52]	; (8011f2c <UART_SetConfig+0x1c4>)
 8011ef8:	fba3 0302 	umull	r0, r3, r3, r2
 8011efc:	095b      	lsrs	r3, r3, #5
 8011efe:	2064      	movs	r0, #100	; 0x64
 8011f00:	fb00 f303 	mul.w	r3, r0, r3
 8011f04:	1ad3      	subs	r3, r2, r3
 8011f06:	011b      	lsls	r3, r3, #4
 8011f08:	3332      	adds	r3, #50	; 0x32
 8011f0a:	4a08      	ldr	r2, [pc, #32]	; (8011f2c <UART_SetConfig+0x1c4>)
 8011f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8011f10:	095b      	lsrs	r3, r3, #5
 8011f12:	f003 020f 	and.w	r2, r3, #15
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	681b      	ldr	r3, [r3, #0]
 8011f1a:	440a      	add	r2, r1
 8011f1c:	609a      	str	r2, [r3, #8]
}
 8011f1e:	bf00      	nop
 8011f20:	3710      	adds	r7, #16
 8011f22:	46bd      	mov	sp, r7
 8011f24:	bd80      	pop	{r7, pc}
 8011f26:	bf00      	nop
 8011f28:	40013800 	.word	0x40013800
 8011f2c:	51eb851f 	.word	0x51eb851f

08011f30 <interface_tx_frame>:
 8011f30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011f34:	b085      	sub	sp, #20
 8011f36:	4605      	mov	r5, r0
 8011f38:	461c      	mov	r4, r3
 8011f3a:	6883      	ldr	r3, [r0, #8]
 8011f3c:	695e      	ldr	r6, [r3, #20]
 8011f3e:	b1e2      	cbz	r2, 8011f7a <interface_tx_frame+0x4a>
 8011f40:	9102      	str	r1, [sp, #8]
 8011f42:	fa1f f882 	uxth.w	r8, r2
 8011f46:	f8ad 800c 	strh.w	r8, [sp, #12]
 8011f4a:	f04f 0900 	mov.w	r9, #0
 8011f4e:	f8ad 900e 	strh.w	r9, [sp, #14]
 8011f52:	6b77      	ldr	r7, [r6, #52]	; 0x34
 8011f54:	ab02      	add	r3, sp, #8
 8011f56:	464a      	mov	r2, r9
 8011f58:	2120      	movs	r1, #32
 8011f5a:	47b8      	blx	r7
 8011f5c:	f8ad 8000 	strh.w	r8, [sp]
 8011f60:	f8ad 9002 	strh.w	r9, [sp, #2]
 8011f64:	68e3      	ldr	r3, [r4, #12]
 8011f66:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8011f6a:	f88d 3004 	strb.w	r3, [sp, #4]
 8011f6e:	6b77      	ldr	r7, [r6, #52]	; 0x34
 8011f70:	466b      	mov	r3, sp
 8011f72:	464a      	mov	r2, r9
 8011f74:	2137      	movs	r1, #55	; 0x37
 8011f76:	4628      	mov	r0, r5
 8011f78:	47b8      	blx	r7
 8011f7a:	68e3      	ldr	r3, [r4, #12]
 8011f7c:	f013 0f1d 	tst.w	r3, #29
 8011f80:	d005      	beq.n	8011f8e <interface_tx_frame+0x5e>
 8011f82:	6b77      	ldr	r7, [r6, #52]	; 0x34
 8011f84:	4623      	mov	r3, r4
 8011f86:	2200      	movs	r2, #0
 8011f88:	2105      	movs	r1, #5
 8011f8a:	4628      	mov	r0, r5
 8011f8c:	47b8      	blx	r7
 8011f8e:	6863      	ldr	r3, [r4, #4]
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	db0c      	blt.n	8011fae <interface_tx_frame+0x7e>
 8011f94:	6b77      	ldr	r7, [r6, #52]	; 0x34
 8011f96:	1d23      	adds	r3, r4, #4
 8011f98:	2200      	movs	r2, #0
 8011f9a:	2110      	movs	r1, #16
 8011f9c:	4628      	mov	r0, r5
 8011f9e:	47b8      	blx	r7
 8011fa0:	6b77      	ldr	r7, [r6, #52]	; 0x34
 8011fa2:	f104 0308 	add.w	r3, r4, #8
 8011fa6:	2200      	movs	r2, #0
 8011fa8:	2151      	movs	r1, #81	; 0x51
 8011faa:	4628      	mov	r0, r5
 8011fac:	47b8      	blx	r7
 8011fae:	6b76      	ldr	r6, [r6, #52]	; 0x34
 8011fb0:	f104 030c 	add.w	r3, r4, #12
 8011fb4:	2200      	movs	r2, #0
 8011fb6:	2104      	movs	r1, #4
 8011fb8:	4628      	mov	r0, r5
 8011fba:	47b0      	blx	r6
 8011fbc:	b005      	add	sp, #20
 8011fbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08011fc2 <interface_get_timestamp>:
 8011fc2:	b530      	push	{r4, r5, lr}
 8011fc4:	b083      	sub	sp, #12
 8011fc6:	ab02      	add	r3, sp, #8
 8011fc8:	2400      	movs	r4, #0
 8011fca:	2500      	movs	r5, #0
 8011fcc:	e963 4502 	strd	r4, r5, [r3, #-8]!
 8011fd0:	6882      	ldr	r2, [r0, #8]
 8011fd2:	6952      	ldr	r2, [r2, #20]
 8011fd4:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8011fd6:	2200      	movs	r2, #0
 8011fd8:	215f      	movs	r1, #95	; 0x5f
 8011fda:	47a0      	blx	r4
 8011fdc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011fe0:	b003      	add	sp, #12
 8011fe2:	bd30      	pop	{r4, r5, pc}

08011fe4 <interface_rx_disable>:
 8011fe4:	b510      	push	{r4, lr}
 8011fe6:	6883      	ldr	r3, [r0, #8]
 8011fe8:	695b      	ldr	r3, [r3, #20]
 8011fea:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8011fec:	2300      	movs	r3, #0
 8011fee:	461a      	mov	r2, r3
 8011ff0:	2103      	movs	r1, #3
 8011ff2:	47a0      	blx	r4
 8011ff4:	bd10      	pop	{r4, pc}
	...

08011ff8 <interface_rx_enable>:
 8011ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ffc:	b084      	sub	sp, #16
 8011ffe:	4604      	mov	r4, r0
 8012000:	6883      	ldr	r3, [r0, #8]
 8012002:	695d      	ldr	r5, [r3, #20]
 8012004:	f8d1 a008 	ldr.w	sl, [r1, #8]
 8012008:	680b      	ldr	r3, [r1, #0]
 801200a:	9303      	str	r3, [sp, #12]
 801200c:	684a      	ldr	r2, [r1, #4]
 801200e:	ab04      	add	r3, sp, #16
 8012010:	f843 2d08 	str.w	r2, [r3, #-8]!
 8012014:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 8012016:	2200      	movs	r2, #0
 8012018:	214f      	movs	r1, #79	; 0x4f
 801201a:	47b8      	blx	r7
 801201c:	4607      	mov	r7, r0
 801201e:	b118      	cbz	r0, 8012028 <interface_rx_enable+0x30>
 8012020:	4638      	mov	r0, r7
 8012022:	b004      	add	sp, #16
 8012024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012028:	68a3      	ldr	r3, [r4, #8]
 801202a:	695a      	ldr	r2, [r3, #20]
 801202c:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 8012030:	2b00      	cmp	r3, #0
 8012032:	db3c      	blt.n	80120ae <interface_rx_enable+0xb6>
 8012034:	6b57      	ldr	r7, [r2, #52]	; 0x34
 8012036:	ab01      	add	r3, sp, #4
 8012038:	2200      	movs	r2, #0
 801203a:	2157      	movs	r1, #87	; 0x57
 801203c:	4620      	mov	r0, r4
 801203e:	47b8      	blx	r7
 8012040:	bba8      	cbnz	r0, 80120ae <interface_rx_enable+0xb6>
 8012042:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012046:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801204a:	041b      	lsls	r3, r3, #16
 801204c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8012050:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012054:	4313      	orrs	r3, r2
 8012056:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801205a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801205e:	f1ba 0f00 	cmp.w	sl, #0
 8012062:	d131      	bne.n	80120c8 <interface_rx_enable+0xd0>
 8012064:	f503 3378 	add.w	r3, r3, #253952	; 0x3e000
 8012068:	f503 7320 	add.w	r3, r3, #640	; 0x280
 801206c:	9303      	str	r3, [sp, #12]
 801206e:	f04f 0a01 	mov.w	sl, #1
 8012072:	68a3      	ldr	r3, [r4, #8]
 8012074:	695f      	ldr	r7, [r3, #20]
 8012076:	f10d 0302 	add.w	r3, sp, #2
 801207a:	2200      	movs	r2, #0
 801207c:	217b      	movs	r1, #123	; 0x7b
 801207e:	4620      	mov	r0, r4
 8012080:	6b7e      	ldr	r6, [r7, #52]	; 0x34
 8012082:	47b0      	blx	r6
 8012084:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 8012088:	2b01      	cmp	r3, #1
 801208a:	d04e      	beq.n	801212a <interface_rx_enable+0x132>
 801208c:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 8012090:	2201      	movs	r2, #1
 8012092:	fa02 f303 	lsl.w	r3, r2, r3
 8012096:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801209a:	ea22 0203 	bic.w	r2, r2, r3
 801209e:	ab04      	add	r3, sp, #16
 80120a0:	f823 2d0e 	strh.w	r2, [r3, #-14]!
 80120a4:	6b7f      	ldr	r7, [r7, #52]	; 0x34
 80120a6:	2200      	movs	r2, #0
 80120a8:	216b      	movs	r1, #107	; 0x6b
 80120aa:	4620      	mov	r0, r4
 80120ac:	47b8      	blx	r7
 80120ae:	f1ba 0f00 	cmp.w	sl, #0
 80120b2:	d14a      	bne.n	801214a <interface_rx_enable+0x152>
 80120b4:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 80120b6:	2300      	movs	r3, #0
 80120b8:	461a      	mov	r2, r3
 80120ba:	211f      	movs	r1, #31
 80120bc:	4620      	mov	r0, r4
 80120be:	47a8      	blx	r5
 80120c0:	4607      	mov	r7, r0
 80120c2:	2800      	cmp	r0, #0
 80120c4:	d150      	bne.n	8012168 <interface_rx_enable+0x170>
 80120c6:	e7ab      	b.n	8012020 <interface_rx_enable+0x28>
 80120c8:	9a03      	ldr	r2, [sp, #12]
 80120ca:	1ad3      	subs	r3, r2, r3
 80120cc:	4698      	mov	r8, r3
 80120ce:	ea4f 79e3 	mov.w	r9, r3, asr #31
 80120d2:	ea4f 1249 	mov.w	r2, r9, lsl #5
 80120d6:	0158      	lsls	r0, r3, #5
 80120d8:	ea42 61d3 	orr.w	r1, r2, r3, lsr #27
 80120dc:	1ac0      	subs	r0, r0, r3
 80120de:	eb61 0109 	sbc.w	r1, r1, r9
 80120e2:	024b      	lsls	r3, r1, #9
 80120e4:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 80120e8:	0242      	lsls	r2, r0, #9
 80120ea:	eb12 0008 	adds.w	r0, r2, r8
 80120ee:	eb43 0109 	adc.w	r1, r3, r9
 80120f2:	018b      	lsls	r3, r1, #6
 80120f4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80120f8:	0182      	lsls	r2, r0, #6
 80120fa:	1a12      	subs	r2, r2, r0
 80120fc:	eb63 0301 	sbc.w	r3, r3, r1
 8012100:	4616      	mov	r6, r2
 8012102:	461f      	mov	r7, r3
 8012104:	4a31      	ldr	r2, [pc, #196]	; (80121cc <interface_rx_enable+0x1d4>)
 8012106:	2300      	movs	r3, #0
 8012108:	eb16 0008 	adds.w	r0, r6, r8
 801210c:	eb47 0109 	adc.w	r1, r7, r9
 8012110:	f7ee fb8e 	bl	8000830 <__aeabi_uldivmod>
 8012114:	f5b0 7f7f 	cmp.w	r0, #1020	; 0x3fc
 8012118:	ddab      	ble.n	8012072 <interface_rx_enable+0x7a>
 801211a:	68a3      	ldr	r3, [r4, #8]
 801211c:	695f      	ldr	r7, [r3, #20]
 801211e:	f5b0 707f 	subs.w	r0, r0, #1020	; 0x3fc
 8012122:	d0a8      	beq.n	8012076 <interface_rx_enable+0x7e>
 8012124:	f7ee fd31 	bl	8000b8a <deca_usleep>
 8012128:	e7a5      	b.n	8012076 <interface_rx_enable+0x7e>
 801212a:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 801212e:	2201      	movs	r2, #1
 8012130:	409a      	lsls	r2, r3
 8012132:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8012136:	431a      	orrs	r2, r3
 8012138:	ab04      	add	r3, sp, #16
 801213a:	f823 2d0e 	strh.w	r2, [r3, #-14]!
 801213e:	6b7f      	ldr	r7, [r7, #52]	; 0x34
 8012140:	2200      	movs	r2, #0
 8012142:	216b      	movs	r1, #107	; 0x6b
 8012144:	4620      	mov	r0, r4
 8012146:	47b8      	blx	r7
 8012148:	e7b1      	b.n	80120ae <interface_rx_enable+0xb6>
 801214a:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 801214c:	ab03      	add	r3, sp, #12
 801214e:	2200      	movs	r2, #0
 8012150:	2105      	movs	r1, #5
 8012152:	4620      	mov	r0, r4
 8012154:	47b0      	blx	r6
 8012156:	4607      	mov	r7, r0
 8012158:	b930      	cbnz	r0, 8012168 <interface_rx_enable+0x170>
 801215a:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 801215c:	2300      	movs	r3, #0
 801215e:	2201      	movs	r2, #1
 8012160:	211f      	movs	r1, #31
 8012162:	4620      	mov	r0, r4
 8012164:	47a8      	blx	r5
 8012166:	4607      	mov	r7, r0
 8012168:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 801216c:	2b00      	cmp	r3, #0
 801216e:	f6ff af57 	blt.w	8012020 <interface_rx_enable+0x28>
 8012172:	68a3      	ldr	r3, [r4, #8]
 8012174:	695d      	ldr	r5, [r3, #20]
 8012176:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 8012178:	ab01      	add	r3, sp, #4
 801217a:	2200      	movs	r2, #0
 801217c:	217b      	movs	r1, #123	; 0x7b
 801217e:	4620      	mov	r0, r4
 8012180:	47b0      	blx	r6
 8012182:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 8012186:	b18b      	cbz	r3, 80121ac <interface_rx_enable+0x1b4>
 8012188:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 801218c:	2201      	movs	r2, #1
 801218e:	fa02 f303 	lsl.w	r3, r2, r3
 8012192:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8012196:	ea22 0203 	bic.w	r2, r2, r3
 801219a:	ab04      	add	r3, sp, #16
 801219c:	f823 2d0c 	strh.w	r2, [r3, #-12]!
 80121a0:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 80121a2:	2200      	movs	r2, #0
 80121a4:	216b      	movs	r1, #107	; 0x6b
 80121a6:	4620      	mov	r0, r4
 80121a8:	47a8      	blx	r5
 80121aa:	e739      	b.n	8012020 <interface_rx_enable+0x28>
 80121ac:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 80121b0:	2201      	movs	r2, #1
 80121b2:	409a      	lsls	r2, r3
 80121b4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80121b8:	431a      	orrs	r2, r3
 80121ba:	ab04      	add	r3, sp, #16
 80121bc:	f823 2d0c 	strh.w	r2, [r3, #-12]!
 80121c0:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 80121c2:	2200      	movs	r2, #0
 80121c4:	216b      	movs	r1, #107	; 0x6b
 80121c6:	4620      	mov	r0, r4
 80121c8:	47a8      	blx	r5
 80121ca:	e729      	b.n	8012020 <interface_rx_enable+0x28>
 80121cc:	0ee09800 	.word	0x0ee09800

080121d0 <interface_read_rx_frame>:
 80121d0:	b510      	push	{r4, lr}
 80121d2:	b082      	sub	sp, #8
 80121d4:	9100      	str	r1, [sp, #0]
 80121d6:	f8ad 2004 	strh.w	r2, [sp, #4]
 80121da:	2200      	movs	r2, #0
 80121dc:	f8ad 2006 	strh.w	r2, [sp, #6]
 80121e0:	6883      	ldr	r3, [r0, #8]
 80121e2:	695b      	ldr	r3, [r3, #20]
 80121e4:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80121e6:	466b      	mov	r3, sp
 80121e8:	2121      	movs	r1, #33	; 0x21
 80121ea:	47a0      	blx	r4
 80121ec:	b002      	add	sp, #8
 80121ee:	bd10      	pop	{r4, pc}

080121f0 <dwt_probe>:
 80121f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80121f2:	b083      	sub	sp, #12
 80121f4:	6803      	ldr	r3, [r0, #0]
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d037      	beq.n	801226a <dwt_probe+0x7a>
 80121fa:	4a1f      	ldr	r2, [pc, #124]	; (8012278 <dwt_probe+0x88>)
 80121fc:	6013      	str	r3, [r2, #0]
 80121fe:	4b1e      	ldr	r3, [pc, #120]	; (8012278 <dwt_probe+0x88>)
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	6842      	ldr	r2, [r0, #4]
 8012204:	601a      	str	r2, [r3, #0]
 8012206:	6882      	ldr	r2, [r0, #8]
 8012208:	605a      	str	r2, [r3, #4]
 801220a:	2200      	movs	r2, #0
 801220c:	f88d 2003 	strb.w	r2, [sp, #3]
 8012210:	681b      	ldr	r3, [r3, #0]
 8012212:	681c      	ldr	r4, [r3, #0]
 8012214:	ab01      	add	r3, sp, #4
 8012216:	2204      	movs	r2, #4
 8012218:	f10d 0103 	add.w	r1, sp, #3
 801221c:	2001      	movs	r0, #1
 801221e:	47a0      	blx	r4
 8012220:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012224:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8012228:	0409      	lsls	r1, r1, #16
 801222a:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
 801222e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012232:	4319      	orrs	r1, r3
 8012234:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012238:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 801223c:	4a0f      	ldr	r2, [pc, #60]	; (801227c <dwt_probe+0x8c>)
 801223e:	4b10      	ldr	r3, [pc, #64]	; (8012280 <dwt_probe+0x90>)
 8012240:	429a      	cmp	r2, r3
 8012242:	d216      	bcs.n	8012272 <dwt_probe+0x82>
 8012244:	4b0c      	ldr	r3, [pc, #48]	; (8012278 <dwt_probe+0x88>)
 8012246:	681f      	ldr	r7, [r3, #0]
 8012248:	4613      	mov	r3, r2
 801224a:	f04f 30ff 	mov.w	r0, #4294967295
 801224e:	2600      	movs	r6, #0
 8012250:	4d0b      	ldr	r5, [pc, #44]	; (8012280 <dwt_probe+0x90>)
 8012252:	681a      	ldr	r2, [r3, #0]
 8012254:	404a      	eors	r2, r1
 8012256:	685c      	ldr	r4, [r3, #4]
 8012258:	4222      	tst	r2, r4
 801225a:	bf04      	itt	eq
 801225c:	60bb      	streq	r3, [r7, #8]
 801225e:	4630      	moveq	r0, r6
 8012260:	331c      	adds	r3, #28
 8012262:	42ab      	cmp	r3, r5
 8012264:	d3f5      	bcc.n	8012252 <dwt_probe+0x62>
 8012266:	b003      	add	sp, #12
 8012268:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801226a:	4b03      	ldr	r3, [pc, #12]	; (8012278 <dwt_probe+0x88>)
 801226c:	4a05      	ldr	r2, [pc, #20]	; (8012284 <dwt_probe+0x94>)
 801226e:	601a      	str	r2, [r3, #0]
 8012270:	e7c5      	b.n	80121fe <dwt_probe+0xe>
 8012272:	f04f 30ff 	mov.w	r0, #4294967295
 8012276:	e7f6      	b.n	8012266 <dwt_probe+0x76>
 8012278:	20000760 	.word	0x20000760
 801227c:	08020ed0 	.word	0x08020ed0
 8012280:	08020f24 	.word	0x08020f24
 8012284:	20000764 	.word	0x20000764

08012288 <dwt_update_dw>:
 8012288:	4b02      	ldr	r3, [pc, #8]	; (8012294 <dwt_update_dw+0xc>)
 801228a:	681a      	ldr	r2, [r3, #0]
 801228c:	6018      	str	r0, [r3, #0]
 801228e:	4610      	mov	r0, r2
 8012290:	4770      	bx	lr
 8012292:	bf00      	nop
 8012294:	20000760 	.word	0x20000760

08012298 <dwt_apiversion>:
 8012298:	4b02      	ldr	r3, [pc, #8]	; (80122a4 <dwt_apiversion+0xc>)
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	689b      	ldr	r3, [r3, #8]
 801229e:	6998      	ldr	r0, [r3, #24]
 80122a0:	4770      	bx	lr
 80122a2:	bf00      	nop
 80122a4:	20000760 	.word	0x20000760

080122a8 <dwt_version_string>:
 80122a8:	4b02      	ldr	r3, [pc, #8]	; (80122b4 <dwt_version_string+0xc>)
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	689b      	ldr	r3, [r3, #8]
 80122ae:	68d8      	ldr	r0, [r3, #12]
 80122b0:	4770      	bx	lr
 80122b2:	bf00      	nop
 80122b4:	20000760 	.word	0x20000760

080122b8 <dwt_setlocaldataptr>:
 80122b8:	f04f 30ff 	mov.w	r0, #4294967295
 80122bc:	4770      	bx	lr
	...

080122c0 <dwt_geticrefvolt>:
 80122c0:	b510      	push	{r4, lr}
 80122c2:	b082      	sub	sp, #8
 80122c4:	2200      	movs	r2, #0
 80122c6:	ab02      	add	r3, sp, #8
 80122c8:	f803 2d01 	strb.w	r2, [r3, #-1]!
 80122cc:	4905      	ldr	r1, [pc, #20]	; (80122e4 <dwt_geticrefvolt+0x24>)
 80122ce:	6808      	ldr	r0, [r1, #0]
 80122d0:	6881      	ldr	r1, [r0, #8]
 80122d2:	6909      	ldr	r1, [r1, #16]
 80122d4:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 80122d6:	210b      	movs	r1, #11
 80122d8:	47a0      	blx	r4
 80122da:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80122de:	b002      	add	sp, #8
 80122e0:	bd10      	pop	{r4, pc}
 80122e2:	bf00      	nop
 80122e4:	20000760 	.word	0x20000760

080122e8 <dwt_geticreftemp>:
 80122e8:	b510      	push	{r4, lr}
 80122ea:	b082      	sub	sp, #8
 80122ec:	2200      	movs	r2, #0
 80122ee:	ab02      	add	r3, sp, #8
 80122f0:	f803 2d01 	strb.w	r2, [r3, #-1]!
 80122f4:	4905      	ldr	r1, [pc, #20]	; (801230c <dwt_geticreftemp+0x24>)
 80122f6:	6808      	ldr	r0, [r1, #0]
 80122f8:	6881      	ldr	r1, [r0, #8]
 80122fa:	6909      	ldr	r1, [r1, #16]
 80122fc:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 80122fe:	210c      	movs	r1, #12
 8012300:	47a0      	blx	r4
 8012302:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8012306:	b002      	add	sp, #8
 8012308:	bd10      	pop	{r4, pc}
 801230a:	bf00      	nop
 801230c:	20000760 	.word	0x20000760

08012310 <dwt_getpartid>:
 8012310:	b510      	push	{r4, lr}
 8012312:	b082      	sub	sp, #8
 8012314:	2200      	movs	r2, #0
 8012316:	ab02      	add	r3, sp, #8
 8012318:	f843 2d04 	str.w	r2, [r3, #-4]!
 801231c:	4904      	ldr	r1, [pc, #16]	; (8012330 <dwt_getpartid+0x20>)
 801231e:	6808      	ldr	r0, [r1, #0]
 8012320:	6881      	ldr	r1, [r0, #8]
 8012322:	6909      	ldr	r1, [r1, #16]
 8012324:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8012326:	210d      	movs	r1, #13
 8012328:	47a0      	blx	r4
 801232a:	9801      	ldr	r0, [sp, #4]
 801232c:	b002      	add	sp, #8
 801232e:	bd10      	pop	{r4, pc}
 8012330:	20000760 	.word	0x20000760

08012334 <dwt_getlotid>:
 8012334:	b510      	push	{r4, lr}
 8012336:	b082      	sub	sp, #8
 8012338:	2200      	movs	r2, #0
 801233a:	ab02      	add	r3, sp, #8
 801233c:	f843 2d04 	str.w	r2, [r3, #-4]!
 8012340:	4904      	ldr	r1, [pc, #16]	; (8012354 <dwt_getlotid+0x20>)
 8012342:	6808      	ldr	r0, [r1, #0]
 8012344:	6881      	ldr	r1, [r0, #8]
 8012346:	6909      	ldr	r1, [r1, #16]
 8012348:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 801234a:	210e      	movs	r1, #14
 801234c:	47a0      	blx	r4
 801234e:	9801      	ldr	r0, [sp, #4]
 8012350:	b002      	add	sp, #8
 8012352:	bd10      	pop	{r4, pc}
 8012354:	20000760 	.word	0x20000760

08012358 <dwt_readdevid>:
 8012358:	b510      	push	{r4, lr}
 801235a:	b082      	sub	sp, #8
 801235c:	2100      	movs	r1, #0
 801235e:	ab02      	add	r3, sp, #8
 8012360:	f843 1d04 	str.w	r1, [r3, #-4]!
 8012364:	4a04      	ldr	r2, [pc, #16]	; (8012378 <dwt_readdevid+0x20>)
 8012366:	6810      	ldr	r0, [r2, #0]
 8012368:	6882      	ldr	r2, [r0, #8]
 801236a:	6912      	ldr	r2, [r2, #16]
 801236c:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 801236e:	460a      	mov	r2, r1
 8012370:	47a0      	blx	r4
 8012372:	9801      	ldr	r0, [sp, #4]
 8012374:	b002      	add	sp, #8
 8012376:	bd10      	pop	{r4, pc}
 8012378:	20000760 	.word	0x20000760

0801237c <dwt_otprevision>:
 801237c:	b510      	push	{r4, lr}
 801237e:	b082      	sub	sp, #8
 8012380:	2200      	movs	r2, #0
 8012382:	ab02      	add	r3, sp, #8
 8012384:	f803 2d01 	strb.w	r2, [r3, #-1]!
 8012388:	4905      	ldr	r1, [pc, #20]	; (80123a0 <dwt_otprevision+0x24>)
 801238a:	6808      	ldr	r0, [r1, #0]
 801238c:	6881      	ldr	r1, [r0, #8]
 801238e:	6909      	ldr	r1, [r1, #16]
 8012390:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8012392:	210a      	movs	r1, #10
 8012394:	47a0      	blx	r4
 8012396:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801239a:	b002      	add	sp, #8
 801239c:	bd10      	pop	{r4, pc}
 801239e:	bf00      	nop
 80123a0:	20000760 	.word	0x20000760

080123a4 <dwt_setfinegraintxseq>:
 80123a4:	b538      	push	{r3, r4, r5, lr}
 80123a6:	4b05      	ldr	r3, [pc, #20]	; (80123bc <dwt_setfinegraintxseq+0x18>)
 80123a8:	681c      	ldr	r4, [r3, #0]
 80123aa:	68a3      	ldr	r3, [r4, #8]
 80123ac:	691b      	ldr	r3, [r3, #16]
 80123ae:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80123b0:	2300      	movs	r3, #0
 80123b2:	4602      	mov	r2, r0
 80123b4:	2112      	movs	r1, #18
 80123b6:	4620      	mov	r0, r4
 80123b8:	47a8      	blx	r5
 80123ba:	bd38      	pop	{r3, r4, r5, pc}
 80123bc:	20000760 	.word	0x20000760

080123c0 <dwt_setlnapamode>:
 80123c0:	b538      	push	{r3, r4, r5, lr}
 80123c2:	4b05      	ldr	r3, [pc, #20]	; (80123d8 <dwt_setlnapamode+0x18>)
 80123c4:	681c      	ldr	r4, [r3, #0]
 80123c6:	68a3      	ldr	r3, [r4, #8]
 80123c8:	691b      	ldr	r3, [r3, #16]
 80123ca:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80123cc:	2300      	movs	r3, #0
 80123ce:	4602      	mov	r2, r0
 80123d0:	2113      	movs	r1, #19
 80123d2:	4620      	mov	r0, r4
 80123d4:	47a8      	blx	r5
 80123d6:	bd38      	pop	{r3, r4, r5, pc}
 80123d8:	20000760 	.word	0x20000760

080123dc <dwt_setgpiomode>:
 80123dc:	b510      	push	{r4, lr}
 80123de:	b082      	sub	sp, #8
 80123e0:	9000      	str	r0, [sp, #0]
 80123e2:	9101      	str	r1, [sp, #4]
 80123e4:	4b05      	ldr	r3, [pc, #20]	; (80123fc <dwt_setgpiomode+0x20>)
 80123e6:	6818      	ldr	r0, [r3, #0]
 80123e8:	6883      	ldr	r3, [r0, #8]
 80123ea:	691b      	ldr	r3, [r3, #16]
 80123ec:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80123ee:	466b      	mov	r3, sp
 80123f0:	2200      	movs	r2, #0
 80123f2:	2169      	movs	r1, #105	; 0x69
 80123f4:	47a0      	blx	r4
 80123f6:	b002      	add	sp, #8
 80123f8:	bd10      	pop	{r4, pc}
 80123fa:	bf00      	nop
 80123fc:	20000760 	.word	0x20000760

08012400 <dwt_setgpiodir>:
 8012400:	b510      	push	{r4, lr}
 8012402:	b082      	sub	sp, #8
 8012404:	ab02      	add	r3, sp, #8
 8012406:	f823 0d02 	strh.w	r0, [r3, #-2]!
 801240a:	4a05      	ldr	r2, [pc, #20]	; (8012420 <dwt_setgpiodir+0x20>)
 801240c:	6810      	ldr	r0, [r2, #0]
 801240e:	6882      	ldr	r2, [r0, #8]
 8012410:	6912      	ldr	r2, [r2, #16]
 8012412:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8012414:	2200      	movs	r2, #0
 8012416:	216a      	movs	r1, #106	; 0x6a
 8012418:	47a0      	blx	r4
 801241a:	b002      	add	sp, #8
 801241c:	bd10      	pop	{r4, pc}
 801241e:	bf00      	nop
 8012420:	20000760 	.word	0x20000760

08012424 <dwt_setgpiovalue>:
 8012424:	b510      	push	{r4, lr}
 8012426:	b082      	sub	sp, #8
 8012428:	f8ad 0000 	strh.w	r0, [sp]
 801242c:	9101      	str	r1, [sp, #4]
 801242e:	4b05      	ldr	r3, [pc, #20]	; (8012444 <dwt_setgpiovalue+0x20>)
 8012430:	6818      	ldr	r0, [r3, #0]
 8012432:	6883      	ldr	r3, [r0, #8]
 8012434:	691b      	ldr	r3, [r3, #16]
 8012436:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8012438:	466b      	mov	r3, sp
 801243a:	2200      	movs	r2, #0
 801243c:	216b      	movs	r1, #107	; 0x6b
 801243e:	47a0      	blx	r4
 8012440:	b002      	add	sp, #8
 8012442:	bd10      	pop	{r4, pc}
 8012444:	20000760 	.word	0x20000760

08012448 <dwt_readgpiovalue>:
 8012448:	b510      	push	{r4, lr}
 801244a:	b082      	sub	sp, #8
 801244c:	2200      	movs	r2, #0
 801244e:	ab02      	add	r3, sp, #8
 8012450:	f823 2d02 	strh.w	r2, [r3, #-2]!
 8012454:	4905      	ldr	r1, [pc, #20]	; (801246c <dwt_readgpiovalue+0x24>)
 8012456:	6808      	ldr	r0, [r1, #0]
 8012458:	6881      	ldr	r1, [r0, #8]
 801245a:	6909      	ldr	r1, [r1, #16]
 801245c:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 801245e:	217b      	movs	r1, #123	; 0x7b
 8012460:	47a0      	blx	r4
 8012462:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8012466:	b002      	add	sp, #8
 8012468:	bd10      	pop	{r4, pc}
 801246a:	bf00      	nop
 801246c:	20000760 	.word	0x20000760

08012470 <dwt_initialise>:
 8012470:	b508      	push	{r3, lr}
 8012472:	4b04      	ldr	r3, [pc, #16]	; (8012484 <dwt_initialise+0x14>)
 8012474:	681b      	ldr	r3, [r3, #0]
 8012476:	689a      	ldr	r2, [r3, #8]
 8012478:	6912      	ldr	r2, [r2, #16]
 801247a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801247c:	4601      	mov	r1, r0
 801247e:	4618      	mov	r0, r3
 8012480:	4790      	blx	r2
 8012482:	bd08      	pop	{r3, pc}
 8012484:	20000760 	.word	0x20000760

08012488 <dwt_setdwstate>:
 8012488:	b538      	push	{r3, r4, r5, lr}
 801248a:	4b05      	ldr	r3, [pc, #20]	; (80124a0 <dwt_setdwstate+0x18>)
 801248c:	681c      	ldr	r4, [r3, #0]
 801248e:	68a3      	ldr	r3, [r4, #8]
 8012490:	691b      	ldr	r3, [r3, #16]
 8012492:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8012494:	2300      	movs	r3, #0
 8012496:	4602      	mov	r2, r0
 8012498:	2156      	movs	r1, #86	; 0x56
 801249a:	4620      	mov	r0, r4
 801249c:	47a8      	blx	r5
 801249e:	bd38      	pop	{r3, r4, r5, pc}
 80124a0:	20000760 	.word	0x20000760

080124a4 <dwt_enablegpioclocks>:
 80124a4:	b510      	push	{r4, lr}
 80124a6:	4b05      	ldr	r3, [pc, #20]	; (80124bc <dwt_enablegpioclocks+0x18>)
 80124a8:	6818      	ldr	r0, [r3, #0]
 80124aa:	6883      	ldr	r3, [r0, #8]
 80124ac:	691b      	ldr	r3, [r3, #16]
 80124ae:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80124b0:	2300      	movs	r3, #0
 80124b2:	461a      	mov	r2, r3
 80124b4:	2109      	movs	r1, #9
 80124b6:	47a0      	blx	r4
 80124b8:	bd10      	pop	{r4, pc}
 80124ba:	bf00      	nop
 80124bc:	20000760 	.word	0x20000760

080124c0 <dwt_restoreconfig>:
 80124c0:	b510      	push	{r4, lr}
 80124c2:	4b05      	ldr	r3, [pc, #20]	; (80124d8 <dwt_restoreconfig+0x18>)
 80124c4:	6818      	ldr	r0, [r3, #0]
 80124c6:	6883      	ldr	r3, [r0, #8]
 80124c8:	691b      	ldr	r3, [r3, #16]
 80124ca:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80124cc:	2300      	movs	r3, #0
 80124ce:	461a      	mov	r2, r3
 80124d0:	2119      	movs	r1, #25
 80124d2:	47a0      	blx	r4
 80124d4:	bd10      	pop	{r4, pc}
 80124d6:	bf00      	nop
 80124d8:	20000760 	.word	0x20000760

080124dc <dwt_configurestsmode>:
 80124dc:	b510      	push	{r4, lr}
 80124de:	b082      	sub	sp, #8
 80124e0:	ab02      	add	r3, sp, #8
 80124e2:	f803 0d01 	strb.w	r0, [r3, #-1]!
 80124e6:	4a05      	ldr	r2, [pc, #20]	; (80124fc <dwt_configurestsmode+0x20>)
 80124e8:	6810      	ldr	r0, [r2, #0]
 80124ea:	6882      	ldr	r2, [r0, #8]
 80124ec:	6912      	ldr	r2, [r2, #16]
 80124ee:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 80124f0:	2200      	movs	r2, #0
 80124f2:	211a      	movs	r1, #26
 80124f4:	47a0      	blx	r4
 80124f6:	b002      	add	sp, #8
 80124f8:	bd10      	pop	{r4, pc}
 80124fa:	bf00      	nop
 80124fc:	20000760 	.word	0x20000760

08012500 <dwt_configure>:
 8012500:	b508      	push	{r3, lr}
 8012502:	4b04      	ldr	r3, [pc, #16]	; (8012514 <dwt_configure+0x14>)
 8012504:	681b      	ldr	r3, [r3, #0]
 8012506:	689a      	ldr	r2, [r3, #8]
 8012508:	6912      	ldr	r2, [r2, #16]
 801250a:	6812      	ldr	r2, [r2, #0]
 801250c:	4601      	mov	r1, r0
 801250e:	4618      	mov	r0, r3
 8012510:	4790      	blx	r2
 8012512:	bd08      	pop	{r3, pc}
 8012514:	20000760 	.word	0x20000760

08012518 <dwt_configuretxrf>:
 8012518:	b508      	push	{r3, lr}
 801251a:	4b04      	ldr	r3, [pc, #16]	; (801252c <dwt_configuretxrf+0x14>)
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	689a      	ldr	r2, [r3, #8]
 8012520:	6912      	ldr	r2, [r2, #16]
 8012522:	6992      	ldr	r2, [r2, #24]
 8012524:	4601      	mov	r1, r0
 8012526:	4618      	mov	r0, r3
 8012528:	4790      	blx	r2
 801252a:	bd08      	pop	{r3, pc}
 801252c:	20000760 	.word	0x20000760

08012530 <dwt_configurestsloadiv>:
 8012530:	b510      	push	{r4, lr}
 8012532:	4b05      	ldr	r3, [pc, #20]	; (8012548 <dwt_configurestsloadiv+0x18>)
 8012534:	6818      	ldr	r0, [r3, #0]
 8012536:	6883      	ldr	r3, [r0, #8]
 8012538:	691b      	ldr	r3, [r3, #16]
 801253a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 801253c:	2300      	movs	r3, #0
 801253e:	461a      	mov	r2, r3
 8012540:	2117      	movs	r1, #23
 8012542:	47a0      	blx	r4
 8012544:	bd10      	pop	{r4, pc}
 8012546:	bf00      	nop
 8012548:	20000760 	.word	0x20000760

0801254c <dwt_configmrxlut>:
 801254c:	b538      	push	{r3, r4, r5, lr}
 801254e:	4b05      	ldr	r3, [pc, #20]	; (8012564 <dwt_configmrxlut+0x18>)
 8012550:	681c      	ldr	r4, [r3, #0]
 8012552:	68a3      	ldr	r3, [r4, #8]
 8012554:	691b      	ldr	r3, [r3, #16]
 8012556:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8012558:	2300      	movs	r3, #0
 801255a:	4602      	mov	r2, r0
 801255c:	2118      	movs	r1, #24
 801255e:	4620      	mov	r0, r4
 8012560:	47a8      	blx	r5
 8012562:	bd38      	pop	{r3, r4, r5, pc}
 8012564:	20000760 	.word	0x20000760

08012568 <dwt_configurestskey>:
 8012568:	b538      	push	{r3, r4, r5, lr}
 801256a:	4b05      	ldr	r3, [pc, #20]	; (8012580 <dwt_configurestskey+0x18>)
 801256c:	681c      	ldr	r4, [r3, #0]
 801256e:	68a3      	ldr	r3, [r4, #8]
 8012570:	691b      	ldr	r3, [r3, #16]
 8012572:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8012574:	4603      	mov	r3, r0
 8012576:	2200      	movs	r2, #0
 8012578:	2115      	movs	r1, #21
 801257a:	4620      	mov	r0, r4
 801257c:	47a8      	blx	r5
 801257e:	bd38      	pop	{r3, r4, r5, pc}
 8012580:	20000760 	.word	0x20000760

08012584 <dwt_configurestsiv>:
 8012584:	b538      	push	{r3, r4, r5, lr}
 8012586:	4b05      	ldr	r3, [pc, #20]	; (801259c <dwt_configurestsiv+0x18>)
 8012588:	681c      	ldr	r4, [r3, #0]
 801258a:	68a3      	ldr	r3, [r4, #8]
 801258c:	691b      	ldr	r3, [r3, #16]
 801258e:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8012590:	4603      	mov	r3, r0
 8012592:	2200      	movs	r2, #0
 8012594:	2116      	movs	r1, #22
 8012596:	4620      	mov	r0, r4
 8012598:	47a8      	blx	r5
 801259a:	bd38      	pop	{r3, r4, r5, pc}
 801259c:	20000760 	.word	0x20000760

080125a0 <dwt_setrxantennadelay>:
 80125a0:	b510      	push	{r4, lr}
 80125a2:	b082      	sub	sp, #8
 80125a4:	ab02      	add	r3, sp, #8
 80125a6:	f823 0d02 	strh.w	r0, [r3, #-2]!
 80125aa:	4a05      	ldr	r2, [pc, #20]	; (80125c0 <dwt_setrxantennadelay+0x20>)
 80125ac:	6810      	ldr	r0, [r2, #0]
 80125ae:	6882      	ldr	r2, [r0, #8]
 80125b0:	6912      	ldr	r2, [r2, #16]
 80125b2:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 80125b4:	2200      	movs	r2, #0
 80125b6:	211b      	movs	r1, #27
 80125b8:	47a0      	blx	r4
 80125ba:	b002      	add	sp, #8
 80125bc:	bd10      	pop	{r4, pc}
 80125be:	bf00      	nop
 80125c0:	20000760 	.word	0x20000760

080125c4 <dwt_getrxantennadelay>:
 80125c4:	b510      	push	{r4, lr}
 80125c6:	b082      	sub	sp, #8
 80125c8:	2200      	movs	r2, #0
 80125ca:	ab02      	add	r3, sp, #8
 80125cc:	f823 2d02 	strh.w	r2, [r3, #-2]!
 80125d0:	4905      	ldr	r1, [pc, #20]	; (80125e8 <dwt_getrxantennadelay+0x24>)
 80125d2:	6808      	ldr	r0, [r1, #0]
 80125d4:	6881      	ldr	r1, [r0, #8]
 80125d6:	6909      	ldr	r1, [r1, #16]
 80125d8:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 80125da:	211c      	movs	r1, #28
 80125dc:	47a0      	blx	r4
 80125de:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80125e2:	b002      	add	sp, #8
 80125e4:	bd10      	pop	{r4, pc}
 80125e6:	bf00      	nop
 80125e8:	20000760 	.word	0x20000760

080125ec <dwt_settxantennadelay>:
 80125ec:	b510      	push	{r4, lr}
 80125ee:	b082      	sub	sp, #8
 80125f0:	ab02      	add	r3, sp, #8
 80125f2:	f823 0d02 	strh.w	r0, [r3, #-2]!
 80125f6:	4a05      	ldr	r2, [pc, #20]	; (801260c <dwt_settxantennadelay+0x20>)
 80125f8:	6810      	ldr	r0, [r2, #0]
 80125fa:	6882      	ldr	r2, [r0, #8]
 80125fc:	6912      	ldr	r2, [r2, #16]
 80125fe:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8012600:	2200      	movs	r2, #0
 8012602:	211d      	movs	r1, #29
 8012604:	47a0      	blx	r4
 8012606:	b002      	add	sp, #8
 8012608:	bd10      	pop	{r4, pc}
 801260a:	bf00      	nop
 801260c:	20000760 	.word	0x20000760

08012610 <dwt_gettxantennadelay>:
 8012610:	b510      	push	{r4, lr}
 8012612:	b082      	sub	sp, #8
 8012614:	2200      	movs	r2, #0
 8012616:	ab02      	add	r3, sp, #8
 8012618:	f823 2d02 	strh.w	r2, [r3, #-2]!
 801261c:	4905      	ldr	r1, [pc, #20]	; (8012634 <dwt_gettxantennadelay+0x24>)
 801261e:	6808      	ldr	r0, [r1, #0]
 8012620:	6881      	ldr	r1, [r0, #8]
 8012622:	6909      	ldr	r1, [r1, #16]
 8012624:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8012626:	211e      	movs	r1, #30
 8012628:	47a0      	blx	r4
 801262a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801262e:	b002      	add	sp, #8
 8012630:	bd10      	pop	{r4, pc}
 8012632:	bf00      	nop
 8012634:	20000760 	.word	0x20000760

08012638 <dwt_writetxdata>:
 8012638:	b538      	push	{r3, r4, r5, lr}
 801263a:	4b05      	ldr	r3, [pc, #20]	; (8012650 <dwt_writetxdata+0x18>)
 801263c:	681c      	ldr	r4, [r3, #0]
 801263e:	68a3      	ldr	r3, [r4, #8]
 8012640:	691b      	ldr	r3, [r3, #16]
 8012642:	685d      	ldr	r5, [r3, #4]
 8012644:	4613      	mov	r3, r2
 8012646:	460a      	mov	r2, r1
 8012648:	4601      	mov	r1, r0
 801264a:	4620      	mov	r0, r4
 801264c:	47a8      	blx	r5
 801264e:	bd38      	pop	{r3, r4, r5, pc}
 8012650:	20000760 	.word	0x20000760

08012654 <dwt_writetxfctrl>:
 8012654:	b538      	push	{r3, r4, r5, lr}
 8012656:	4b05      	ldr	r3, [pc, #20]	; (801266c <dwt_writetxfctrl+0x18>)
 8012658:	681c      	ldr	r4, [r3, #0]
 801265a:	68a3      	ldr	r3, [r4, #8]
 801265c:	691b      	ldr	r3, [r3, #16]
 801265e:	689d      	ldr	r5, [r3, #8]
 8012660:	4613      	mov	r3, r2
 8012662:	460a      	mov	r2, r1
 8012664:	4601      	mov	r1, r0
 8012666:	4620      	mov	r0, r4
 8012668:	47a8      	blx	r5
 801266a:	bd38      	pop	{r3, r4, r5, pc}
 801266c:	20000760 	.word	0x20000760

08012670 <dwt_setplenfine>:
 8012670:	b510      	push	{r4, lr}
 8012672:	b082      	sub	sp, #8
 8012674:	ab02      	add	r3, sp, #8
 8012676:	f803 0d01 	strb.w	r0, [r3, #-1]!
 801267a:	4a05      	ldr	r2, [pc, #20]	; (8012690 <dwt_setplenfine+0x20>)
 801267c:	6810      	ldr	r0, [r2, #0]
 801267e:	6882      	ldr	r2, [r0, #8]
 8012680:	6912      	ldr	r2, [r2, #16]
 8012682:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8012684:	2200      	movs	r2, #0
 8012686:	2167      	movs	r1, #103	; 0x67
 8012688:	47a0      	blx	r4
 801268a:	b002      	add	sp, #8
 801268c:	bd10      	pop	{r4, pc}
 801268e:	bf00      	nop
 8012690:	20000760 	.word	0x20000760

08012694 <dwt_starttx>:
 8012694:	b510      	push	{r4, lr}
 8012696:	b082      	sub	sp, #8
 8012698:	ab02      	add	r3, sp, #8
 801269a:	f803 0d01 	strb.w	r0, [r3, #-1]!
 801269e:	4a05      	ldr	r2, [pc, #20]	; (80126b4 <dwt_starttx+0x20>)
 80126a0:	6810      	ldr	r0, [r2, #0]
 80126a2:	6882      	ldr	r2, [r0, #8]
 80126a4:	6912      	ldr	r2, [r2, #16]
 80126a6:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 80126a8:	2200      	movs	r2, #0
 80126aa:	2104      	movs	r1, #4
 80126ac:	47a0      	blx	r4
 80126ae:	b002      	add	sp, #8
 80126b0:	bd10      	pop	{r4, pc}
 80126b2:	bf00      	nop
 80126b4:	20000760 	.word	0x20000760

080126b8 <dwt_setreferencetrxtime>:
 80126b8:	b510      	push	{r4, lr}
 80126ba:	b082      	sub	sp, #8
 80126bc:	ab02      	add	r3, sp, #8
 80126be:	f843 0d04 	str.w	r0, [r3, #-4]!
 80126c2:	4a05      	ldr	r2, [pc, #20]	; (80126d8 <dwt_setreferencetrxtime+0x20>)
 80126c4:	6810      	ldr	r0, [r2, #0]
 80126c6:	6882      	ldr	r2, [r0, #8]
 80126c8:	6912      	ldr	r2, [r2, #16]
 80126ca:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 80126cc:	2200      	movs	r2, #0
 80126ce:	216e      	movs	r1, #110	; 0x6e
 80126d0:	47a0      	blx	r4
 80126d2:	b002      	add	sp, #8
 80126d4:	bd10      	pop	{r4, pc}
 80126d6:	bf00      	nop
 80126d8:	20000760 	.word	0x20000760

080126dc <dwt_setdelayedtrxtime>:
 80126dc:	b510      	push	{r4, lr}
 80126de:	b082      	sub	sp, #8
 80126e0:	ab02      	add	r3, sp, #8
 80126e2:	f843 0d04 	str.w	r0, [r3, #-4]!
 80126e6:	4a05      	ldr	r2, [pc, #20]	; (80126fc <dwt_setdelayedtrxtime+0x20>)
 80126e8:	6810      	ldr	r0, [r2, #0]
 80126ea:	6882      	ldr	r2, [r0, #8]
 80126ec:	6912      	ldr	r2, [r2, #16]
 80126ee:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 80126f0:	2200      	movs	r2, #0
 80126f2:	2105      	movs	r1, #5
 80126f4:	47a0      	blx	r4
 80126f6:	b002      	add	sp, #8
 80126f8:	bd10      	pop	{r4, pc}
 80126fa:	bf00      	nop
 80126fc:	20000760 	.word	0x20000760

08012700 <dwt_get_dgcdecision>:
 8012700:	b510      	push	{r4, lr}
 8012702:	b082      	sub	sp, #8
 8012704:	2200      	movs	r2, #0
 8012706:	ab02      	add	r3, sp, #8
 8012708:	f803 2d01 	strb.w	r2, [r3, #-1]!
 801270c:	4905      	ldr	r1, [pc, #20]	; (8012724 <dwt_get_dgcdecision+0x24>)
 801270e:	6808      	ldr	r0, [r1, #0]
 8012710:	6881      	ldr	r1, [r0, #8]
 8012712:	6909      	ldr	r1, [r1, #16]
 8012714:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8012716:	216c      	movs	r1, #108	; 0x6c
 8012718:	47a0      	blx	r4
 801271a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801271e:	b002      	add	sp, #8
 8012720:	bd10      	pop	{r4, pc}
 8012722:	bf00      	nop
 8012724:	20000760 	.word	0x20000760

08012728 <dwt_readtxtimestamp>:
 8012728:	b538      	push	{r3, r4, r5, lr}
 801272a:	4b05      	ldr	r3, [pc, #20]	; (8012740 <dwt_readtxtimestamp+0x18>)
 801272c:	681c      	ldr	r4, [r3, #0]
 801272e:	68a3      	ldr	r3, [r4, #8]
 8012730:	691b      	ldr	r3, [r3, #16]
 8012732:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8012734:	4603      	mov	r3, r0
 8012736:	2200      	movs	r2, #0
 8012738:	2132      	movs	r1, #50	; 0x32
 801273a:	4620      	mov	r0, r4
 801273c:	47a8      	blx	r5
 801273e:	bd38      	pop	{r3, r4, r5, pc}
 8012740:	20000760 	.word	0x20000760

08012744 <dwt_readtxtimestamphi32>:
 8012744:	b510      	push	{r4, lr}
 8012746:	b082      	sub	sp, #8
 8012748:	2200      	movs	r2, #0
 801274a:	ab02      	add	r3, sp, #8
 801274c:	f843 2d04 	str.w	r2, [r3, #-4]!
 8012750:	4904      	ldr	r1, [pc, #16]	; (8012764 <dwt_readtxtimestamphi32+0x20>)
 8012752:	6808      	ldr	r0, [r1, #0]
 8012754:	6881      	ldr	r1, [r0, #8]
 8012756:	6909      	ldr	r1, [r1, #16]
 8012758:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 801275a:	2130      	movs	r1, #48	; 0x30
 801275c:	47a0      	blx	r4
 801275e:	9801      	ldr	r0, [sp, #4]
 8012760:	b002      	add	sp, #8
 8012762:	bd10      	pop	{r4, pc}
 8012764:	20000760 	.word	0x20000760

08012768 <dwt_readtxtimestamplo32>:
 8012768:	b510      	push	{r4, lr}
 801276a:	b082      	sub	sp, #8
 801276c:	2200      	movs	r2, #0
 801276e:	ab02      	add	r3, sp, #8
 8012770:	f843 2d04 	str.w	r2, [r3, #-4]!
 8012774:	4904      	ldr	r1, [pc, #16]	; (8012788 <dwt_readtxtimestamplo32+0x20>)
 8012776:	6808      	ldr	r0, [r1, #0]
 8012778:	6881      	ldr	r1, [r0, #8]
 801277a:	6909      	ldr	r1, [r1, #16]
 801277c:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 801277e:	2131      	movs	r1, #49	; 0x31
 8012780:	47a0      	blx	r4
 8012782:	9801      	ldr	r0, [sp, #4]
 8012784:	b002      	add	sp, #8
 8012786:	bd10      	pop	{r4, pc}
 8012788:	20000760 	.word	0x20000760

0801278c <dwt_readpdoa>:
 801278c:	b510      	push	{r4, lr}
 801278e:	b082      	sub	sp, #8
 8012790:	2200      	movs	r2, #0
 8012792:	ab02      	add	r3, sp, #8
 8012794:	f823 2d02 	strh.w	r2, [r3, #-2]!
 8012798:	4905      	ldr	r1, [pc, #20]	; (80127b0 <dwt_readpdoa+0x24>)
 801279a:	6808      	ldr	r0, [r1, #0]
 801279c:	6881      	ldr	r1, [r0, #8]
 801279e:	6909      	ldr	r1, [r1, #16]
 80127a0:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 80127a2:	2133      	movs	r1, #51	; 0x33
 80127a4:	47a0      	blx	r4
 80127a6:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 80127aa:	b002      	add	sp, #8
 80127ac:	bd10      	pop	{r4, pc}
 80127ae:	bf00      	nop
 80127b0:	20000760 	.word	0x20000760

080127b4 <dwt_readtdoa>:
 80127b4:	b538      	push	{r3, r4, r5, lr}
 80127b6:	4b05      	ldr	r3, [pc, #20]	; (80127cc <dwt_readtdoa+0x18>)
 80127b8:	681c      	ldr	r4, [r3, #0]
 80127ba:	68a3      	ldr	r3, [r4, #8]
 80127bc:	691b      	ldr	r3, [r3, #16]
 80127be:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80127c0:	4603      	mov	r3, r0
 80127c2:	2200      	movs	r2, #0
 80127c4:	2134      	movs	r1, #52	; 0x34
 80127c6:	4620      	mov	r0, r4
 80127c8:	47a8      	blx	r5
 80127ca:	bd38      	pop	{r3, r4, r5, pc}
 80127cc:	20000760 	.word	0x20000760

080127d0 <dwt_readrxtimestamp>:
 80127d0:	b508      	push	{r3, lr}
 80127d2:	4b04      	ldr	r3, [pc, #16]	; (80127e4 <dwt_readrxtimestamp+0x14>)
 80127d4:	681b      	ldr	r3, [r3, #0]
 80127d6:	689a      	ldr	r2, [r3, #8]
 80127d8:	6912      	ldr	r2, [r2, #16]
 80127da:	6952      	ldr	r2, [r2, #20]
 80127dc:	4601      	mov	r1, r0
 80127de:	4618      	mov	r0, r3
 80127e0:	4790      	blx	r2
 80127e2:	bd08      	pop	{r3, pc}
 80127e4:	20000760 	.word	0x20000760

080127e8 <dwt_readrxtimestampunadj>:
 80127e8:	b538      	push	{r3, r4, r5, lr}
 80127ea:	4b05      	ldr	r3, [pc, #20]	; (8012800 <dwt_readrxtimestampunadj+0x18>)
 80127ec:	681c      	ldr	r4, [r3, #0]
 80127ee:	68a3      	ldr	r3, [r4, #8]
 80127f0:	691b      	ldr	r3, [r3, #16]
 80127f2:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80127f4:	4603      	mov	r3, r0
 80127f6:	2200      	movs	r2, #0
 80127f8:	2161      	movs	r1, #97	; 0x61
 80127fa:	4620      	mov	r0, r4
 80127fc:	47a8      	blx	r5
 80127fe:	bd38      	pop	{r3, r4, r5, pc}
 8012800:	20000760 	.word	0x20000760

08012804 <dwt_readrxtimestamp_ipatov>:
 8012804:	b538      	push	{r3, r4, r5, lr}
 8012806:	4b05      	ldr	r3, [pc, #20]	; (801281c <dwt_readrxtimestamp_ipatov+0x18>)
 8012808:	681c      	ldr	r4, [r3, #0]
 801280a:	68a3      	ldr	r3, [r4, #8]
 801280c:	691b      	ldr	r3, [r3, #16]
 801280e:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8012810:	4603      	mov	r3, r0
 8012812:	2200      	movs	r2, #0
 8012814:	2160      	movs	r1, #96	; 0x60
 8012816:	4620      	mov	r0, r4
 8012818:	47a8      	blx	r5
 801281a:	bd38      	pop	{r3, r4, r5, pc}
 801281c:	20000760 	.word	0x20000760

08012820 <dwt_readrxtimestamp_sts>:
 8012820:	b538      	push	{r3, r4, r5, lr}
 8012822:	4b05      	ldr	r3, [pc, #20]	; (8012838 <dwt_readrxtimestamp_sts+0x18>)
 8012824:	681c      	ldr	r4, [r3, #0]
 8012826:	68a3      	ldr	r3, [r4, #8]
 8012828:	691b      	ldr	r3, [r3, #16]
 801282a:	6add      	ldr	r5, [r3, #44]	; 0x2c
 801282c:	4603      	mov	r3, r0
 801282e:	2200      	movs	r2, #0
 8012830:	2164      	movs	r1, #100	; 0x64
 8012832:	4620      	mov	r0, r4
 8012834:	47a8      	blx	r5
 8012836:	bd38      	pop	{r3, r4, r5, pc}
 8012838:	20000760 	.word	0x20000760

0801283c <dwt_readrxtimestamphi32>:
 801283c:	b510      	push	{r4, lr}
 801283e:	b082      	sub	sp, #8
 8012840:	2200      	movs	r2, #0
 8012842:	ab02      	add	r3, sp, #8
 8012844:	f843 2d04 	str.w	r2, [r3, #-4]!
 8012848:	4904      	ldr	r1, [pc, #16]	; (801285c <dwt_readrxtimestamphi32+0x20>)
 801284a:	6808      	ldr	r0, [r1, #0]
 801284c:	6881      	ldr	r1, [r0, #8]
 801284e:	6909      	ldr	r1, [r1, #16]
 8012850:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8012852:	2162      	movs	r1, #98	; 0x62
 8012854:	47a0      	blx	r4
 8012856:	9801      	ldr	r0, [sp, #4]
 8012858:	b002      	add	sp, #8
 801285a:	bd10      	pop	{r4, pc}
 801285c:	20000760 	.word	0x20000760

08012860 <dwt_readrxtimestamplo32>:
 8012860:	b510      	push	{r4, lr}
 8012862:	b082      	sub	sp, #8
 8012864:	2200      	movs	r2, #0
 8012866:	ab02      	add	r3, sp, #8
 8012868:	f843 2d04 	str.w	r2, [r3, #-4]!
 801286c:	4904      	ldr	r1, [pc, #16]	; (8012880 <dwt_readrxtimestamplo32+0x20>)
 801286e:	6808      	ldr	r0, [r1, #0]
 8012870:	6881      	ldr	r1, [r0, #8]
 8012872:	6909      	ldr	r1, [r1, #16]
 8012874:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8012876:	2163      	movs	r1, #99	; 0x63
 8012878:	47a0      	blx	r4
 801287a:	9801      	ldr	r0, [sp, #4]
 801287c:	b002      	add	sp, #8
 801287e:	bd10      	pop	{r4, pc}
 8012880:	20000760 	.word	0x20000760

08012884 <dwt_readsystimestamphi32>:
 8012884:	b510      	push	{r4, lr}
 8012886:	b082      	sub	sp, #8
 8012888:	2200      	movs	r2, #0
 801288a:	ab02      	add	r3, sp, #8
 801288c:	f843 2d04 	str.w	r2, [r3, #-4]!
 8012890:	4904      	ldr	r1, [pc, #16]	; (80128a4 <dwt_readsystimestamphi32+0x20>)
 8012892:	6808      	ldr	r0, [r1, #0]
 8012894:	6881      	ldr	r1, [r0, #8]
 8012896:	6909      	ldr	r1, [r1, #16]
 8012898:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 801289a:	2165      	movs	r1, #101	; 0x65
 801289c:	47a0      	blx	r4
 801289e:	9801      	ldr	r0, [sp, #4]
 80128a0:	b002      	add	sp, #8
 80128a2:	bd10      	pop	{r4, pc}
 80128a4:	20000760 	.word	0x20000760

080128a8 <dwt_readsystime>:
 80128a8:	b538      	push	{r3, r4, r5, lr}
 80128aa:	4b05      	ldr	r3, [pc, #20]	; (80128c0 <dwt_readsystime+0x18>)
 80128ac:	681c      	ldr	r4, [r3, #0]
 80128ae:	68a3      	ldr	r3, [r4, #8]
 80128b0:	691b      	ldr	r3, [r3, #16]
 80128b2:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80128b4:	4603      	mov	r3, r0
 80128b6:	2200      	movs	r2, #0
 80128b8:	2157      	movs	r1, #87	; 0x57
 80128ba:	4620      	mov	r0, r4
 80128bc:	47a8      	blx	r5
 80128be:	bd38      	pop	{r3, r4, r5, pc}
 80128c0:	20000760 	.word	0x20000760

080128c4 <dwt_forcetrxoff>:
 80128c4:	b510      	push	{r4, lr}
 80128c6:	4b05      	ldr	r3, [pc, #20]	; (80128dc <dwt_forcetrxoff+0x18>)
 80128c8:	6818      	ldr	r0, [r3, #0]
 80128ca:	6883      	ldr	r3, [r0, #8]
 80128cc:	691b      	ldr	r3, [r3, #16]
 80128ce:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80128d0:	2300      	movs	r3, #0
 80128d2:	461a      	mov	r2, r3
 80128d4:	2103      	movs	r1, #3
 80128d6:	47a0      	blx	r4
 80128d8:	bd10      	pop	{r4, pc}
 80128da:	bf00      	nop
 80128dc:	20000760 	.word	0x20000760

080128e0 <dwt_rxenable>:
 80128e0:	b508      	push	{r3, lr}
 80128e2:	4b04      	ldr	r3, [pc, #16]	; (80128f4 <dwt_rxenable+0x14>)
 80128e4:	681b      	ldr	r3, [r3, #0]
 80128e6:	689a      	ldr	r2, [r3, #8]
 80128e8:	6912      	ldr	r2, [r2, #16]
 80128ea:	6a12      	ldr	r2, [r2, #32]
 80128ec:	4601      	mov	r1, r0
 80128ee:	4618      	mov	r0, r3
 80128f0:	4790      	blx	r2
 80128f2:	bd08      	pop	{r3, pc}
 80128f4:	20000760 	.word	0x20000760

080128f8 <dwt_setsniffmode>:
 80128f8:	b510      	push	{r4, lr}
 80128fa:	b082      	sub	sp, #8
 80128fc:	9000      	str	r0, [sp, #0]
 80128fe:	f88d 1004 	strb.w	r1, [sp, #4]
 8012902:	f88d 2005 	strb.w	r2, [sp, #5]
 8012906:	4b05      	ldr	r3, [pc, #20]	; (801291c <dwt_setsniffmode+0x24>)
 8012908:	6818      	ldr	r0, [r3, #0]
 801290a:	6883      	ldr	r3, [r0, #8]
 801290c:	691b      	ldr	r3, [r3, #16]
 801290e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8012910:	466b      	mov	r3, sp
 8012912:	2200      	movs	r2, #0
 8012914:	2150      	movs	r1, #80	; 0x50
 8012916:	47a0      	blx	r4
 8012918:	b002      	add	sp, #8
 801291a:	bd10      	pop	{r4, pc}
 801291c:	20000760 	.word	0x20000760

08012920 <dwt_setdblrxbuffmode>:
 8012920:	b510      	push	{r4, lr}
 8012922:	b082      	sub	sp, #8
 8012924:	f88d 0004 	strb.w	r0, [sp, #4]
 8012928:	f88d 1005 	strb.w	r1, [sp, #5]
 801292c:	4b05      	ldr	r3, [pc, #20]	; (8012944 <dwt_setdblrxbuffmode+0x24>)
 801292e:	6818      	ldr	r0, [r3, #0]
 8012930:	6883      	ldr	r3, [r0, #8]
 8012932:	691b      	ldr	r3, [r3, #16]
 8012934:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8012936:	ab01      	add	r3, sp, #4
 8012938:	2200      	movs	r2, #0
 801293a:	216d      	movs	r1, #109	; 0x6d
 801293c:	47a0      	blx	r4
 801293e:	b002      	add	sp, #8
 8012940:	bd10      	pop	{r4, pc}
 8012942:	bf00      	nop
 8012944:	20000760 	.word	0x20000760

08012948 <dwt_signal_rx_buff_free>:
 8012948:	b510      	push	{r4, lr}
 801294a:	4b05      	ldr	r3, [pc, #20]	; (8012960 <dwt_signal_rx_buff_free+0x18>)
 801294c:	6818      	ldr	r0, [r3, #0]
 801294e:	6883      	ldr	r3, [r0, #8]
 8012950:	691b      	ldr	r3, [r3, #16]
 8012952:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8012954:	2300      	movs	r3, #0
 8012956:	461a      	mov	r2, r3
 8012958:	210f      	movs	r1, #15
 801295a:	47a0      	blx	r4
 801295c:	bd10      	pop	{r4, pc}
 801295e:	bf00      	nop
 8012960:	20000760 	.word	0x20000760

08012964 <dwt_setrxtimeout>:
 8012964:	b510      	push	{r4, lr}
 8012966:	b082      	sub	sp, #8
 8012968:	ab02      	add	r3, sp, #8
 801296a:	f843 0d04 	str.w	r0, [r3, #-4]!
 801296e:	4a05      	ldr	r2, [pc, #20]	; (8012984 <dwt_setrxtimeout+0x20>)
 8012970:	6810      	ldr	r0, [r2, #0]
 8012972:	6882      	ldr	r2, [r0, #8]
 8012974:	6912      	ldr	r2, [r2, #16]
 8012976:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8012978:	2200      	movs	r2, #0
 801297a:	2151      	movs	r1, #81	; 0x51
 801297c:	47a0      	blx	r4
 801297e:	b002      	add	sp, #8
 8012980:	bd10      	pop	{r4, pc}
 8012982:	bf00      	nop
 8012984:	20000760 	.word	0x20000760

08012988 <dwt_setpreambledetecttimeout>:
 8012988:	b510      	push	{r4, lr}
 801298a:	b082      	sub	sp, #8
 801298c:	ab02      	add	r3, sp, #8
 801298e:	f823 0d02 	strh.w	r0, [r3, #-2]!
 8012992:	4a05      	ldr	r2, [pc, #20]	; (80129a8 <dwt_setpreambledetecttimeout+0x20>)
 8012994:	6810      	ldr	r0, [r2, #0]
 8012996:	6882      	ldr	r2, [r0, #8]
 8012998:	6912      	ldr	r2, [r2, #16]
 801299a:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 801299c:	2200      	movs	r2, #0
 801299e:	214f      	movs	r1, #79	; 0x4f
 80129a0:	47a0      	blx	r4
 80129a2:	b002      	add	sp, #8
 80129a4:	bd10      	pop	{r4, pc}
 80129a6:	bf00      	nop
 80129a8:	20000760 	.word	0x20000760

080129ac <dwt_calibratesleepcnt>:
 80129ac:	b510      	push	{r4, lr}
 80129ae:	b082      	sub	sp, #8
 80129b0:	2200      	movs	r2, #0
 80129b2:	ab02      	add	r3, sp, #8
 80129b4:	f823 2d02 	strh.w	r2, [r3, #-2]!
 80129b8:	4905      	ldr	r1, [pc, #20]	; (80129d0 <dwt_calibratesleepcnt+0x24>)
 80129ba:	6808      	ldr	r0, [r1, #0]
 80129bc:	6881      	ldr	r1, [r0, #8]
 80129be:	6909      	ldr	r1, [r1, #16]
 80129c0:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 80129c2:	213c      	movs	r1, #60	; 0x3c
 80129c4:	47a0      	blx	r4
 80129c6:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80129ca:	b002      	add	sp, #8
 80129cc:	bd10      	pop	{r4, pc}
 80129ce:	bf00      	nop
 80129d0:	20000760 	.word	0x20000760

080129d4 <dwt_configuresleepcnt>:
 80129d4:	b510      	push	{r4, lr}
 80129d6:	b082      	sub	sp, #8
 80129d8:	ab02      	add	r3, sp, #8
 80129da:	f823 0d02 	strh.w	r0, [r3, #-2]!
 80129de:	4a05      	ldr	r2, [pc, #20]	; (80129f4 <dwt_configuresleepcnt+0x20>)
 80129e0:	6810      	ldr	r0, [r2, #0]
 80129e2:	6882      	ldr	r2, [r0, #8]
 80129e4:	6912      	ldr	r2, [r2, #16]
 80129e6:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 80129e8:	2200      	movs	r2, #0
 80129ea:	213b      	movs	r1, #59	; 0x3b
 80129ec:	47a0      	blx	r4
 80129ee:	b002      	add	sp, #8
 80129f0:	bd10      	pop	{r4, pc}
 80129f2:	bf00      	nop
 80129f4:	20000760 	.word	0x20000760

080129f8 <dwt_configuresleep>:
 80129f8:	b510      	push	{r4, lr}
 80129fa:	b082      	sub	sp, #8
 80129fc:	f8ad 0004 	strh.w	r0, [sp, #4]
 8012a00:	f88d 1006 	strb.w	r1, [sp, #6]
 8012a04:	4b05      	ldr	r3, [pc, #20]	; (8012a1c <dwt_configuresleep+0x24>)
 8012a06:	6818      	ldr	r0, [r3, #0]
 8012a08:	6883      	ldr	r3, [r0, #8]
 8012a0a:	691b      	ldr	r3, [r3, #16]
 8012a0c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8012a0e:	ab01      	add	r3, sp, #4
 8012a10:	2200      	movs	r2, #0
 8012a12:	213d      	movs	r1, #61	; 0x3d
 8012a14:	47a0      	blx	r4
 8012a16:	b002      	add	sp, #8
 8012a18:	bd10      	pop	{r4, pc}
 8012a1a:	bf00      	nop
 8012a1c:	20000760 	.word	0x20000760

08012a20 <dwt_clearaonconfig>:
 8012a20:	b510      	push	{r4, lr}
 8012a22:	4b05      	ldr	r3, [pc, #20]	; (8012a38 <dwt_clearaonconfig+0x18>)
 8012a24:	6818      	ldr	r0, [r3, #0]
 8012a26:	6883      	ldr	r3, [r0, #8]
 8012a28:	691b      	ldr	r3, [r3, #16]
 8012a2a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8012a2c:	2300      	movs	r3, #0
 8012a2e:	461a      	mov	r2, r3
 8012a30:	212d      	movs	r1, #45	; 0x2d
 8012a32:	47a0      	blx	r4
 8012a34:	bd10      	pop	{r4, pc}
 8012a36:	bf00      	nop
 8012a38:	20000760 	.word	0x20000760

08012a3c <dwt_entersleep>:
 8012a3c:	b538      	push	{r3, r4, r5, lr}
 8012a3e:	4b05      	ldr	r3, [pc, #20]	; (8012a54 <dwt_entersleep+0x18>)
 8012a40:	681c      	ldr	r4, [r3, #0]
 8012a42:	68a3      	ldr	r3, [r4, #8]
 8012a44:	691b      	ldr	r3, [r3, #16]
 8012a46:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8012a48:	2300      	movs	r3, #0
 8012a4a:	4602      	mov	r2, r0
 8012a4c:	213a      	movs	r1, #58	; 0x3a
 8012a4e:	4620      	mov	r0, r4
 8012a50:	47a8      	blx	r5
 8012a52:	bd38      	pop	{r3, r4, r5, pc}
 8012a54:	20000760 	.word	0x20000760

08012a58 <dwt_entersleepaftertx>:
 8012a58:	b538      	push	{r3, r4, r5, lr}
 8012a5a:	4b05      	ldr	r3, [pc, #20]	; (8012a70 <dwt_entersleepaftertx+0x18>)
 8012a5c:	681c      	ldr	r4, [r3, #0]
 8012a5e:	68a3      	ldr	r3, [r4, #8]
 8012a60:	691b      	ldr	r3, [r3, #16]
 8012a62:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8012a64:	2300      	movs	r3, #0
 8012a66:	4602      	mov	r2, r0
 8012a68:	2128      	movs	r1, #40	; 0x28
 8012a6a:	4620      	mov	r0, r4
 8012a6c:	47a8      	blx	r5
 8012a6e:	bd38      	pop	{r3, r4, r5, pc}
 8012a70:	20000760 	.word	0x20000760

08012a74 <dwt_entersleepafter>:
 8012a74:	b538      	push	{r3, r4, r5, lr}
 8012a76:	4b05      	ldr	r3, [pc, #20]	; (8012a8c <dwt_entersleepafter+0x18>)
 8012a78:	681c      	ldr	r4, [r3, #0]
 8012a7a:	68a3      	ldr	r3, [r4, #8]
 8012a7c:	691b      	ldr	r3, [r3, #16]
 8012a7e:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8012a80:	2300      	movs	r3, #0
 8012a82:	4602      	mov	r2, r0
 8012a84:	2129      	movs	r1, #41	; 0x29
 8012a86:	4620      	mov	r0, r4
 8012a88:	47a8      	blx	r5
 8012a8a:	bd38      	pop	{r3, r4, r5, pc}
 8012a8c:	20000760 	.word	0x20000760

08012a90 <dwt_setcallbacks>:
 8012a90:	b410      	push	{r4}
 8012a92:	4c07      	ldr	r4, [pc, #28]	; (8012ab0 <dwt_setcallbacks+0x20>)
 8012a94:	6824      	ldr	r4, [r4, #0]
 8012a96:	6120      	str	r0, [r4, #16]
 8012a98:	6161      	str	r1, [r4, #20]
 8012a9a:	61a2      	str	r2, [r4, #24]
 8012a9c:	61e3      	str	r3, [r4, #28]
 8012a9e:	9b01      	ldr	r3, [sp, #4]
 8012aa0:	6223      	str	r3, [r4, #32]
 8012aa2:	9b02      	ldr	r3, [sp, #8]
 8012aa4:	6263      	str	r3, [r4, #36]	; 0x24
 8012aa6:	9b03      	ldr	r3, [sp, #12]
 8012aa8:	62a3      	str	r3, [r4, #40]	; 0x28
 8012aaa:	bc10      	pop	{r4}
 8012aac:	4770      	bx	lr
 8012aae:	bf00      	nop
 8012ab0:	20000760 	.word	0x20000760

08012ab4 <dwt_checkirq>:
 8012ab4:	b510      	push	{r4, lr}
 8012ab6:	b082      	sub	sp, #8
 8012ab8:	2200      	movs	r2, #0
 8012aba:	ab02      	add	r3, sp, #8
 8012abc:	f803 2d01 	strb.w	r2, [r3, #-1]!
 8012ac0:	4905      	ldr	r1, [pc, #20]	; (8012ad8 <dwt_checkirq+0x24>)
 8012ac2:	6808      	ldr	r0, [r1, #0]
 8012ac4:	6881      	ldr	r1, [r0, #8]
 8012ac6:	6909      	ldr	r1, [r1, #16]
 8012ac8:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8012aca:	2159      	movs	r1, #89	; 0x59
 8012acc:	47a0      	blx	r4
 8012ace:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8012ad2:	b002      	add	sp, #8
 8012ad4:	bd10      	pop	{r4, pc}
 8012ad6:	bf00      	nop
 8012ad8:	20000760 	.word	0x20000760

08012adc <dwt_checkidlerc>:
 8012adc:	b510      	push	{r4, lr}
 8012ade:	b082      	sub	sp, #8
 8012ae0:	2200      	movs	r2, #0
 8012ae2:	ab02      	add	r3, sp, #8
 8012ae4:	f803 2d01 	strb.w	r2, [r3, #-1]!
 8012ae8:	4905      	ldr	r1, [pc, #20]	; (8012b00 <dwt_checkidlerc+0x24>)
 8012aea:	6808      	ldr	r0, [r1, #0]
 8012aec:	6881      	ldr	r1, [r0, #8]
 8012aee:	6909      	ldr	r1, [r1, #16]
 8012af0:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8012af2:	2158      	movs	r1, #88	; 0x58
 8012af4:	47a0      	blx	r4
 8012af6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8012afa:	b002      	add	sp, #8
 8012afc:	bd10      	pop	{r4, pc}
 8012afe:	bf00      	nop
 8012b00:	20000760 	.word	0x20000760

08012b04 <dwt_isr>:
 8012b04:	b508      	push	{r3, lr}
 8012b06:	4b03      	ldr	r3, [pc, #12]	; (8012b14 <dwt_isr+0x10>)
 8012b08:	6818      	ldr	r0, [r3, #0]
 8012b0a:	6883      	ldr	r3, [r0, #8]
 8012b0c:	691b      	ldr	r3, [r3, #16]
 8012b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b10:	4798      	blx	r3
 8012b12:	bd08      	pop	{r3, pc}
 8012b14:	20000760 	.word	0x20000760

08012b18 <dwt_setinterrupt>:
 8012b18:	b538      	push	{r3, r4, r5, lr}
 8012b1a:	4b05      	ldr	r3, [pc, #20]	; (8012b30 <dwt_setinterrupt+0x18>)
 8012b1c:	681c      	ldr	r4, [r3, #0]
 8012b1e:	68a3      	ldr	r3, [r4, #8]
 8012b20:	691b      	ldr	r3, [r3, #16]
 8012b22:	69dd      	ldr	r5, [r3, #28]
 8012b24:	4613      	mov	r3, r2
 8012b26:	460a      	mov	r2, r1
 8012b28:	4601      	mov	r1, r0
 8012b2a:	4620      	mov	r0, r4
 8012b2c:	47a8      	blx	r5
 8012b2e:	bd38      	pop	{r3, r4, r5, pc}
 8012b30:	20000760 	.word	0x20000760

08012b34 <dwt_setpanid>:
 8012b34:	b510      	push	{r4, lr}
 8012b36:	b082      	sub	sp, #8
 8012b38:	ab02      	add	r3, sp, #8
 8012b3a:	f823 0d02 	strh.w	r0, [r3, #-2]!
 8012b3e:	4a05      	ldr	r2, [pc, #20]	; (8012b54 <dwt_setpanid+0x20>)
 8012b40:	6810      	ldr	r0, [r2, #0]
 8012b42:	6882      	ldr	r2, [r0, #8]
 8012b44:	6912      	ldr	r2, [r2, #16]
 8012b46:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8012b48:	2200      	movs	r2, #0
 8012b4a:	215d      	movs	r1, #93	; 0x5d
 8012b4c:	47a0      	blx	r4
 8012b4e:	b002      	add	sp, #8
 8012b50:	bd10      	pop	{r4, pc}
 8012b52:	bf00      	nop
 8012b54:	20000760 	.word	0x20000760

08012b58 <dwt_setaddress16>:
 8012b58:	b510      	push	{r4, lr}
 8012b5a:	b082      	sub	sp, #8
 8012b5c:	ab02      	add	r3, sp, #8
 8012b5e:	f823 0d02 	strh.w	r0, [r3, #-2]!
 8012b62:	4a05      	ldr	r2, [pc, #20]	; (8012b78 <dwt_setaddress16+0x20>)
 8012b64:	6810      	ldr	r0, [r2, #0]
 8012b66:	6882      	ldr	r2, [r0, #8]
 8012b68:	6912      	ldr	r2, [r2, #16]
 8012b6a:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8012b6c:	2200      	movs	r2, #0
 8012b6e:	215e      	movs	r1, #94	; 0x5e
 8012b70:	47a0      	blx	r4
 8012b72:	b002      	add	sp, #8
 8012b74:	bd10      	pop	{r4, pc}
 8012b76:	bf00      	nop
 8012b78:	20000760 	.word	0x20000760

08012b7c <dwt_seteui>:
 8012b7c:	b538      	push	{r3, r4, r5, lr}
 8012b7e:	4b05      	ldr	r3, [pc, #20]	; (8012b94 <dwt_seteui+0x18>)
 8012b80:	681c      	ldr	r4, [r3, #0]
 8012b82:	68a3      	ldr	r3, [r4, #8]
 8012b84:	691b      	ldr	r3, [r3, #16]
 8012b86:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8012b88:	4603      	mov	r3, r0
 8012b8a:	2200      	movs	r2, #0
 8012b8c:	215b      	movs	r1, #91	; 0x5b
 8012b8e:	4620      	mov	r0, r4
 8012b90:	47a8      	blx	r5
 8012b92:	bd38      	pop	{r3, r4, r5, pc}
 8012b94:	20000760 	.word	0x20000760

08012b98 <dwt_geteui>:
 8012b98:	b538      	push	{r3, r4, r5, lr}
 8012b9a:	4b05      	ldr	r3, [pc, #20]	; (8012bb0 <dwt_geteui+0x18>)
 8012b9c:	681c      	ldr	r4, [r3, #0]
 8012b9e:	68a3      	ldr	r3, [r4, #8]
 8012ba0:	691b      	ldr	r3, [r3, #16]
 8012ba2:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8012ba4:	4603      	mov	r3, r0
 8012ba6:	2200      	movs	r2, #0
 8012ba8:	215c      	movs	r1, #92	; 0x5c
 8012baa:	4620      	mov	r0, r4
 8012bac:	47a8      	blx	r5
 8012bae:	bd38      	pop	{r3, r4, r5, pc}
 8012bb0:	20000760 	.word	0x20000760

08012bb4 <dwt_aon_read>:
 8012bb4:	b510      	push	{r4, lr}
 8012bb6:	b082      	sub	sp, #8
 8012bb8:	2200      	movs	r2, #0
 8012bba:	f88d 2004 	strb.w	r2, [sp, #4]
 8012bbe:	f8ad 0006 	strh.w	r0, [sp, #6]
 8012bc2:	4b06      	ldr	r3, [pc, #24]	; (8012bdc <dwt_aon_read+0x28>)
 8012bc4:	6818      	ldr	r0, [r3, #0]
 8012bc6:	6883      	ldr	r3, [r0, #8]
 8012bc8:	691b      	ldr	r3, [r3, #16]
 8012bca:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8012bcc:	ab01      	add	r3, sp, #4
 8012bce:	2152      	movs	r1, #82	; 0x52
 8012bd0:	47a0      	blx	r4
 8012bd2:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8012bd6:	b002      	add	sp, #8
 8012bd8:	bd10      	pop	{r4, pc}
 8012bda:	bf00      	nop
 8012bdc:	20000760 	.word	0x20000760

08012be0 <dwt_aon_write>:
 8012be0:	b510      	push	{r4, lr}
 8012be2:	b082      	sub	sp, #8
 8012be4:	f8ad 0004 	strh.w	r0, [sp, #4]
 8012be8:	f88d 1006 	strb.w	r1, [sp, #6]
 8012bec:	4b05      	ldr	r3, [pc, #20]	; (8012c04 <dwt_aon_write+0x24>)
 8012bee:	6818      	ldr	r0, [r3, #0]
 8012bf0:	6883      	ldr	r3, [r0, #8]
 8012bf2:	691b      	ldr	r3, [r3, #16]
 8012bf4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8012bf6:	ab01      	add	r3, sp, #4
 8012bf8:	2200      	movs	r2, #0
 8012bfa:	2153      	movs	r1, #83	; 0x53
 8012bfc:	47a0      	blx	r4
 8012bfe:	b002      	add	sp, #8
 8012c00:	bd10      	pop	{r4, pc}
 8012c02:	bf00      	nop
 8012c04:	20000760 	.word	0x20000760

08012c08 <dwt_configureframefilter>:
 8012c08:	b510      	push	{r4, lr}
 8012c0a:	b082      	sub	sp, #8
 8012c0c:	f8ad 0004 	strh.w	r0, [sp, #4]
 8012c10:	f8ad 1006 	strh.w	r1, [sp, #6]
 8012c14:	4b05      	ldr	r3, [pc, #20]	; (8012c2c <dwt_configureframefilter+0x24>)
 8012c16:	6818      	ldr	r0, [r3, #0]
 8012c18:	6883      	ldr	r3, [r0, #8]
 8012c1a:	691b      	ldr	r3, [r3, #16]
 8012c1c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8012c1e:	ab01      	add	r3, sp, #4
 8012c20:	2200      	movs	r2, #0
 8012c22:	215a      	movs	r1, #90	; 0x5a
 8012c24:	47a0      	blx	r4
 8012c26:	b002      	add	sp, #8
 8012c28:	bd10      	pop	{r4, pc}
 8012c2a:	bf00      	nop
 8012c2c:	20000760 	.word	0x20000760

08012c30 <dwt_generatecrc8>:
 8012c30:	2900      	cmp	r1, #0
 8012c32:	dd0c      	ble.n	8012c4e <dwt_generatecrc8+0x1e>
 8012c34:	b410      	push	{r4}
 8012c36:	1e43      	subs	r3, r0, #1
 8012c38:	4419      	add	r1, r3
 8012c3a:	4610      	mov	r0, r2
 8012c3c:	4c05      	ldr	r4, [pc, #20]	; (8012c54 <dwt_generatecrc8+0x24>)
 8012c3e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8012c42:	4050      	eors	r0, r2
 8012c44:	5c20      	ldrb	r0, [r4, r0]
 8012c46:	428b      	cmp	r3, r1
 8012c48:	d1f9      	bne.n	8012c3e <dwt_generatecrc8+0xe>
 8012c4a:	bc10      	pop	{r4}
 8012c4c:	4770      	bx	lr
 8012c4e:	4610      	mov	r0, r2
 8012c50:	4770      	bx	lr
 8012c52:	bf00      	nop
 8012c54:	0802101c 	.word	0x0802101c

08012c58 <dwt_enablespicrccheck>:
 8012c58:	b510      	push	{r4, lr}
 8012c5a:	b082      	sub	sp, #8
 8012c5c:	f88d 0000 	strb.w	r0, [sp]
 8012c60:	9101      	str	r1, [sp, #4]
 8012c62:	4b05      	ldr	r3, [pc, #20]	; (8012c78 <dwt_enablespicrccheck+0x20>)
 8012c64:	6818      	ldr	r0, [r3, #0]
 8012c66:	6883      	ldr	r3, [r0, #8]
 8012c68:	691b      	ldr	r3, [r3, #16]
 8012c6a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8012c6c:	466b      	mov	r3, sp
 8012c6e:	2200      	movs	r2, #0
 8012c70:	2111      	movs	r1, #17
 8012c72:	47a0      	blx	r4
 8012c74:	b002      	add	sp, #8
 8012c76:	bd10      	pop	{r4, pc}
 8012c78:	20000760 	.word	0x20000760

08012c7c <dwt_enableautoack>:
 8012c7c:	b510      	push	{r4, lr}
 8012c7e:	b082      	sub	sp, #8
 8012c80:	f88d 0000 	strb.w	r0, [sp]
 8012c84:	9101      	str	r1, [sp, #4]
 8012c86:	4b05      	ldr	r3, [pc, #20]	; (8012c9c <dwt_enableautoack+0x20>)
 8012c88:	6818      	ldr	r0, [r3, #0]
 8012c8a:	6883      	ldr	r3, [r0, #8]
 8012c8c:	691b      	ldr	r3, [r3, #16]
 8012c8e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8012c90:	466b      	mov	r3, sp
 8012c92:	2200      	movs	r2, #0
 8012c94:	2125      	movs	r1, #37	; 0x25
 8012c96:	47a0      	blx	r4
 8012c98:	b002      	add	sp, #8
 8012c9a:	bd10      	pop	{r4, pc}
 8012c9c:	20000760 	.word	0x20000760

08012ca0 <dwt_setrxaftertxdelay>:
 8012ca0:	b510      	push	{r4, lr}
 8012ca2:	b082      	sub	sp, #8
 8012ca4:	ab02      	add	r3, sp, #8
 8012ca6:	f843 0d04 	str.w	r0, [r3, #-4]!
 8012caa:	4a05      	ldr	r2, [pc, #20]	; (8012cc0 <dwt_setrxaftertxdelay+0x20>)
 8012cac:	6810      	ldr	r0, [r2, #0]
 8012cae:	6882      	ldr	r2, [r0, #8]
 8012cb0:	6912      	ldr	r2, [r2, #16]
 8012cb2:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8012cb4:	2200      	movs	r2, #0
 8012cb6:	2110      	movs	r1, #16
 8012cb8:	47a0      	blx	r4
 8012cba:	b002      	add	sp, #8
 8012cbc:	bd10      	pop	{r4, pc}
 8012cbe:	bf00      	nop
 8012cc0:	20000760 	.word	0x20000760

08012cc4 <dwt_softreset>:
 8012cc4:	b510      	push	{r4, lr}
 8012cc6:	b082      	sub	sp, #8
 8012cc8:	ab02      	add	r3, sp, #8
 8012cca:	f843 0d04 	str.w	r0, [r3, #-4]!
 8012cce:	4a05      	ldr	r2, [pc, #20]	; (8012ce4 <dwt_softreset+0x20>)
 8012cd0:	6810      	ldr	r0, [r2, #0]
 8012cd2:	6882      	ldr	r2, [r0, #8]
 8012cd4:	6912      	ldr	r2, [r2, #16]
 8012cd6:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8012cd8:	2200      	movs	r2, #0
 8012cda:	213e      	movs	r1, #62	; 0x3e
 8012cdc:	47a0      	blx	r4
 8012cde:	b002      	add	sp, #8
 8012ce0:	bd10      	pop	{r4, pc}
 8012ce2:	bf00      	nop
 8012ce4:	20000760 	.word	0x20000760

08012ce8 <dwt_readrxdata>:
 8012ce8:	b538      	push	{r3, r4, r5, lr}
 8012cea:	4b05      	ldr	r3, [pc, #20]	; (8012d00 <dwt_readrxdata+0x18>)
 8012cec:	681c      	ldr	r4, [r3, #0]
 8012cee:	68a3      	ldr	r3, [r4, #8]
 8012cf0:	691b      	ldr	r3, [r3, #16]
 8012cf2:	68dd      	ldr	r5, [r3, #12]
 8012cf4:	4613      	mov	r3, r2
 8012cf6:	460a      	mov	r2, r1
 8012cf8:	4601      	mov	r1, r0
 8012cfa:	4620      	mov	r0, r4
 8012cfc:	47a8      	blx	r5
 8012cfe:	bd38      	pop	{r3, r4, r5, pc}
 8012d00:	20000760 	.word	0x20000760

08012d04 <dwt_write_rx_scratch_data>:
 8012d04:	b510      	push	{r4, lr}
 8012d06:	b082      	sub	sp, #8
 8012d08:	9000      	str	r0, [sp, #0]
 8012d0a:	f8ad 1004 	strh.w	r1, [sp, #4]
 8012d0e:	f8ad 2006 	strh.w	r2, [sp, #6]
 8012d12:	4b05      	ldr	r3, [pc, #20]	; (8012d28 <dwt_write_rx_scratch_data+0x24>)
 8012d14:	6818      	ldr	r0, [r3, #0]
 8012d16:	6883      	ldr	r3, [r0, #8]
 8012d18:	691b      	ldr	r3, [r3, #16]
 8012d1a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8012d1c:	466b      	mov	r3, sp
 8012d1e:	2200      	movs	r2, #0
 8012d20:	2122      	movs	r1, #34	; 0x22
 8012d22:	47a0      	blx	r4
 8012d24:	b002      	add	sp, #8
 8012d26:	bd10      	pop	{r4, pc}
 8012d28:	20000760 	.word	0x20000760

08012d2c <dwt_read_rx_scratch_data>:
 8012d2c:	b510      	push	{r4, lr}
 8012d2e:	b082      	sub	sp, #8
 8012d30:	9000      	str	r0, [sp, #0]
 8012d32:	f8ad 1004 	strh.w	r1, [sp, #4]
 8012d36:	f8ad 2006 	strh.w	r2, [sp, #6]
 8012d3a:	4b05      	ldr	r3, [pc, #20]	; (8012d50 <dwt_read_rx_scratch_data+0x24>)
 8012d3c:	6818      	ldr	r0, [r3, #0]
 8012d3e:	6883      	ldr	r3, [r0, #8]
 8012d40:	691b      	ldr	r3, [r3, #16]
 8012d42:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8012d44:	466b      	mov	r3, sp
 8012d46:	2200      	movs	r2, #0
 8012d48:	2123      	movs	r1, #35	; 0x23
 8012d4a:	47a0      	blx	r4
 8012d4c:	b002      	add	sp, #8
 8012d4e:	bd10      	pop	{r4, pc}
 8012d50:	20000760 	.word	0x20000760

08012d54 <dwt_readaccdata>:
 8012d54:	b538      	push	{r3, r4, r5, lr}
 8012d56:	4b05      	ldr	r3, [pc, #20]	; (8012d6c <dwt_readaccdata+0x18>)
 8012d58:	681c      	ldr	r4, [r3, #0]
 8012d5a:	68a3      	ldr	r3, [r4, #8]
 8012d5c:	691b      	ldr	r3, [r3, #16]
 8012d5e:	691d      	ldr	r5, [r3, #16]
 8012d60:	4613      	mov	r3, r2
 8012d62:	460a      	mov	r2, r1
 8012d64:	4601      	mov	r1, r0
 8012d66:	4620      	mov	r0, r4
 8012d68:	47a8      	blx	r5
 8012d6a:	bd38      	pop	{r3, r4, r5, pc}
 8012d6c:	20000760 	.word	0x20000760

08012d70 <dwt_readclockoffset>:
 8012d70:	b510      	push	{r4, lr}
 8012d72:	b082      	sub	sp, #8
 8012d74:	2200      	movs	r2, #0
 8012d76:	ab02      	add	r3, sp, #8
 8012d78:	f823 2d02 	strh.w	r2, [r3, #-2]!
 8012d7c:	4905      	ldr	r1, [pc, #20]	; (8012d94 <dwt_readclockoffset+0x24>)
 8012d7e:	6808      	ldr	r0, [r1, #0]
 8012d80:	6881      	ldr	r1, [r0, #8]
 8012d82:	6909      	ldr	r1, [r1, #16]
 8012d84:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8012d86:	212c      	movs	r1, #44	; 0x2c
 8012d88:	47a0      	blx	r4
 8012d8a:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 8012d8e:	b002      	add	sp, #8
 8012d90:	bd10      	pop	{r4, pc}
 8012d92:	bf00      	nop
 8012d94:	20000760 	.word	0x20000760

08012d98 <dwt_readcarrierintegrator>:
 8012d98:	b510      	push	{r4, lr}
 8012d9a:	b082      	sub	sp, #8
 8012d9c:	2200      	movs	r2, #0
 8012d9e:	ab02      	add	r3, sp, #8
 8012da0:	f843 2d04 	str.w	r2, [r3, #-4]!
 8012da4:	4904      	ldr	r1, [pc, #16]	; (8012db8 <dwt_readcarrierintegrator+0x20>)
 8012da6:	6808      	ldr	r0, [r1, #0]
 8012da8:	6881      	ldr	r1, [r0, #8]
 8012daa:	6909      	ldr	r1, [r1, #16]
 8012dac:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8012dae:	2124      	movs	r1, #36	; 0x24
 8012db0:	47a0      	blx	r4
 8012db2:	9801      	ldr	r0, [sp, #4]
 8012db4:	b002      	add	sp, #8
 8012db6:	bd10      	pop	{r4, pc}
 8012db8:	20000760 	.word	0x20000760

08012dbc <dwt_configciadiag>:
 8012dbc:	b510      	push	{r4, lr}
 8012dbe:	b082      	sub	sp, #8
 8012dc0:	ab02      	add	r3, sp, #8
 8012dc2:	f803 0d01 	strb.w	r0, [r3, #-1]!
 8012dc6:	4a05      	ldr	r2, [pc, #20]	; (8012ddc <dwt_configciadiag+0x20>)
 8012dc8:	6810      	ldr	r0, [r2, #0]
 8012dca:	6882      	ldr	r2, [r0, #8]
 8012dcc:	6912      	ldr	r2, [r2, #16]
 8012dce:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8012dd0:	2200      	movs	r2, #0
 8012dd2:	2127      	movs	r1, #39	; 0x27
 8012dd4:	47a0      	blx	r4
 8012dd6:	b002      	add	sp, #8
 8012dd8:	bd10      	pop	{r4, pc}
 8012dda:	bf00      	nop
 8012ddc:	20000760 	.word	0x20000760

08012de0 <dwt_readstsquality>:
 8012de0:	b538      	push	{r3, r4, r5, lr}
 8012de2:	4b05      	ldr	r3, [pc, #20]	; (8012df8 <dwt_readstsquality+0x18>)
 8012de4:	681c      	ldr	r4, [r3, #0]
 8012de6:	68a3      	ldr	r3, [r4, #8]
 8012de8:	691b      	ldr	r3, [r3, #16]
 8012dea:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8012dec:	4603      	mov	r3, r0
 8012dee:	2200      	movs	r2, #0
 8012df0:	214b      	movs	r1, #75	; 0x4b
 8012df2:	4620      	mov	r0, r4
 8012df4:	47a8      	blx	r5
 8012df6:	bd38      	pop	{r3, r4, r5, pc}
 8012df8:	20000760 	.word	0x20000760

08012dfc <dwt_readstsstatus>:
 8012dfc:	b538      	push	{r3, r4, r5, lr}
 8012dfe:	4b05      	ldr	r3, [pc, #20]	; (8012e14 <dwt_readstsstatus+0x18>)
 8012e00:	681c      	ldr	r4, [r3, #0]
 8012e02:	68a3      	ldr	r3, [r4, #8]
 8012e04:	691b      	ldr	r3, [r3, #16]
 8012e06:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8012e08:	4603      	mov	r3, r0
 8012e0a:	460a      	mov	r2, r1
 8012e0c:	2154      	movs	r1, #84	; 0x54
 8012e0e:	4620      	mov	r0, r4
 8012e10:	47a8      	blx	r5
 8012e12:	bd38      	pop	{r3, r4, r5, pc}
 8012e14:	20000760 	.word	0x20000760

08012e18 <dwt_readdiagnostics>:
 8012e18:	b538      	push	{r3, r4, r5, lr}
 8012e1a:	4b05      	ldr	r3, [pc, #20]	; (8012e30 <dwt_readdiagnostics+0x18>)
 8012e1c:	681c      	ldr	r4, [r3, #0]
 8012e1e:	68a3      	ldr	r3, [r4, #8]
 8012e20:	691b      	ldr	r3, [r3, #16]
 8012e22:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8012e24:	4603      	mov	r3, r0
 8012e26:	2200      	movs	r2, #0
 8012e28:	212f      	movs	r1, #47	; 0x2f
 8012e2a:	4620      	mov	r0, r4
 8012e2c:	47a8      	blx	r5
 8012e2e:	bd38      	pop	{r3, r4, r5, pc}
 8012e30:	20000760 	.word	0x20000760

08012e34 <dwt_configeventcounters>:
 8012e34:	b538      	push	{r3, r4, r5, lr}
 8012e36:	4b05      	ldr	r3, [pc, #20]	; (8012e4c <dwt_configeventcounters+0x18>)
 8012e38:	681c      	ldr	r4, [r3, #0]
 8012e3a:	68a3      	ldr	r3, [r4, #8]
 8012e3c:	691b      	ldr	r3, [r3, #16]
 8012e3e:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8012e40:	2300      	movs	r3, #0
 8012e42:	4602      	mov	r2, r0
 8012e44:	214e      	movs	r1, #78	; 0x4e
 8012e46:	4620      	mov	r0, r4
 8012e48:	47a8      	blx	r5
 8012e4a:	bd38      	pop	{r3, r4, r5, pc}
 8012e4c:	20000760 	.word	0x20000760

08012e50 <dwt_readeventcounters>:
 8012e50:	b538      	push	{r3, r4, r5, lr}
 8012e52:	4b05      	ldr	r3, [pc, #20]	; (8012e68 <dwt_readeventcounters+0x18>)
 8012e54:	681c      	ldr	r4, [r3, #0]
 8012e56:	68a3      	ldr	r3, [r4, #8]
 8012e58:	691b      	ldr	r3, [r3, #16]
 8012e5a:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8012e5c:	4603      	mov	r3, r0
 8012e5e:	2200      	movs	r2, #0
 8012e60:	214d      	movs	r1, #77	; 0x4d
 8012e62:	4620      	mov	r0, r4
 8012e64:	47a8      	blx	r5
 8012e66:	bd38      	pop	{r3, r4, r5, pc}
 8012e68:	20000760 	.word	0x20000760

08012e6c <dwt_otpread>:
 8012e6c:	b510      	push	{r4, lr}
 8012e6e:	b084      	sub	sp, #16
 8012e70:	f8ad 0004 	strh.w	r0, [sp, #4]
 8012e74:	9102      	str	r1, [sp, #8]
 8012e76:	f88d 200c 	strb.w	r2, [sp, #12]
 8012e7a:	4b05      	ldr	r3, [pc, #20]	; (8012e90 <dwt_otpread+0x24>)
 8012e7c:	6818      	ldr	r0, [r3, #0]
 8012e7e:	6883      	ldr	r3, [r0, #8]
 8012e80:	691b      	ldr	r3, [r3, #16]
 8012e82:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8012e84:	ab01      	add	r3, sp, #4
 8012e86:	2200      	movs	r2, #0
 8012e88:	2166      	movs	r1, #102	; 0x66
 8012e8a:	47a0      	blx	r4
 8012e8c:	b004      	add	sp, #16
 8012e8e:	bd10      	pop	{r4, pc}
 8012e90:	20000760 	.word	0x20000760

08012e94 <dwt_otpwriteandverify>:
 8012e94:	b510      	push	{r4, lr}
 8012e96:	b082      	sub	sp, #8
 8012e98:	9000      	str	r0, [sp, #0]
 8012e9a:	f8ad 1004 	strh.w	r1, [sp, #4]
 8012e9e:	4b05      	ldr	r3, [pc, #20]	; (8012eb4 <dwt_otpwriteandverify+0x20>)
 8012ea0:	6818      	ldr	r0, [r3, #0]
 8012ea2:	6883      	ldr	r3, [r0, #8]
 8012ea4:	691b      	ldr	r3, [r3, #16]
 8012ea6:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8012ea8:	466b      	mov	r3, sp
 8012eaa:	2200      	movs	r2, #0
 8012eac:	2139      	movs	r1, #57	; 0x39
 8012eae:	47a0      	blx	r4
 8012eb0:	b002      	add	sp, #8
 8012eb2:	bd10      	pop	{r4, pc}
 8012eb4:	20000760 	.word	0x20000760

08012eb8 <dwt_otpwrite>:
 8012eb8:	b510      	push	{r4, lr}
 8012eba:	b082      	sub	sp, #8
 8012ebc:	9000      	str	r0, [sp, #0]
 8012ebe:	f8ad 1004 	strh.w	r1, [sp, #4]
 8012ec2:	4b05      	ldr	r3, [pc, #20]	; (8012ed8 <dwt_otpwrite+0x20>)
 8012ec4:	6818      	ldr	r0, [r3, #0]
 8012ec6:	6883      	ldr	r3, [r0, #8]
 8012ec8:	691b      	ldr	r3, [r3, #16]
 8012eca:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8012ecc:	466b      	mov	r3, sp
 8012ece:	2200      	movs	r2, #0
 8012ed0:	2138      	movs	r1, #56	; 0x38
 8012ed2:	47a0      	blx	r4
 8012ed4:	b002      	add	sp, #8
 8012ed6:	bd10      	pop	{r4, pc}
 8012ed8:	20000760 	.word	0x20000760

08012edc <dwt_setleds>:
 8012edc:	b510      	push	{r4, lr}
 8012ede:	b082      	sub	sp, #8
 8012ee0:	ab02      	add	r3, sp, #8
 8012ee2:	f803 0d01 	strb.w	r0, [r3, #-1]!
 8012ee6:	4a05      	ldr	r2, [pc, #20]	; (8012efc <dwt_setleds+0x20>)
 8012ee8:	6810      	ldr	r0, [r2, #0]
 8012eea:	6882      	ldr	r2, [r0, #8]
 8012eec:	6912      	ldr	r2, [r2, #16]
 8012eee:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8012ef0:	2200      	movs	r2, #0
 8012ef2:	2155      	movs	r1, #85	; 0x55
 8012ef4:	47a0      	blx	r4
 8012ef6:	b002      	add	sp, #8
 8012ef8:	bd10      	pop	{r4, pc}
 8012efa:	bf00      	nop
 8012efc:	20000760 	.word	0x20000760

08012f00 <dwt_setxtaltrim>:
 8012f00:	b510      	push	{r4, lr}
 8012f02:	b082      	sub	sp, #8
 8012f04:	ab02      	add	r3, sp, #8
 8012f06:	f803 0d01 	strb.w	r0, [r3, #-1]!
 8012f0a:	4a05      	ldr	r2, [pc, #20]	; (8012f20 <dwt_setxtaltrim+0x20>)
 8012f0c:	6810      	ldr	r0, [r2, #0]
 8012f0e:	6882      	ldr	r2, [r0, #8]
 8012f10:	6912      	ldr	r2, [r2, #16]
 8012f12:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8012f14:	2200      	movs	r2, #0
 8012f16:	213f      	movs	r1, #63	; 0x3f
 8012f18:	47a0      	blx	r4
 8012f1a:	b002      	add	sp, #8
 8012f1c:	bd10      	pop	{r4, pc}
 8012f1e:	bf00      	nop
 8012f20:	20000760 	.word	0x20000760

08012f24 <dwt_getxtaltrim>:
 8012f24:	b510      	push	{r4, lr}
 8012f26:	b082      	sub	sp, #8
 8012f28:	2200      	movs	r2, #0
 8012f2a:	ab02      	add	r3, sp, #8
 8012f2c:	f803 2d01 	strb.w	r2, [r3, #-1]!
 8012f30:	4905      	ldr	r1, [pc, #20]	; (8012f48 <dwt_getxtaltrim+0x24>)
 8012f32:	6808      	ldr	r0, [r1, #0]
 8012f34:	6881      	ldr	r1, [r0, #8]
 8012f36:	6909      	ldr	r1, [r1, #16]
 8012f38:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8012f3a:	2140      	movs	r1, #64	; 0x40
 8012f3c:	47a0      	blx	r4
 8012f3e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8012f42:	b002      	add	sp, #8
 8012f44:	bd10      	pop	{r4, pc}
 8012f46:	bf00      	nop
 8012f48:	20000760 	.word	0x20000760

08012f4c <dwt_stop_repeated_frames>:
 8012f4c:	b510      	push	{r4, lr}
 8012f4e:	4b05      	ldr	r3, [pc, #20]	; (8012f64 <dwt_stop_repeated_frames+0x18>)
 8012f50:	6818      	ldr	r0, [r3, #0]
 8012f52:	6883      	ldr	r3, [r0, #8]
 8012f54:	691b      	ldr	r3, [r3, #16]
 8012f56:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8012f58:	2300      	movs	r3, #0
 8012f5a:	461a      	mov	r2, r3
 8012f5c:	2148      	movs	r1, #72	; 0x48
 8012f5e:	47a0      	blx	r4
 8012f60:	bd10      	pop	{r4, pc}
 8012f62:	bf00      	nop
 8012f64:	20000760 	.word	0x20000760

08012f68 <dwt_repeated_frames>:
 8012f68:	b510      	push	{r4, lr}
 8012f6a:	b082      	sub	sp, #8
 8012f6c:	ab02      	add	r3, sp, #8
 8012f6e:	f843 0d04 	str.w	r0, [r3, #-4]!
 8012f72:	4a05      	ldr	r2, [pc, #20]	; (8012f88 <dwt_repeated_frames+0x20>)
 8012f74:	6810      	ldr	r0, [r2, #0]
 8012f76:	6882      	ldr	r2, [r0, #8]
 8012f78:	6912      	ldr	r2, [r2, #16]
 8012f7a:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8012f7c:	2200      	movs	r2, #0
 8012f7e:	2149      	movs	r1, #73	; 0x49
 8012f80:	47a0      	blx	r4
 8012f82:	b002      	add	sp, #8
 8012f84:	bd10      	pop	{r4, pc}
 8012f86:	bf00      	nop
 8012f88:	20000760 	.word	0x20000760

08012f8c <dwt_repeated_cw>:
 8012f8c:	b510      	push	{r4, lr}
 8012f8e:	b082      	sub	sp, #8
 8012f90:	9000      	str	r0, [sp, #0]
 8012f92:	9101      	str	r1, [sp, #4]
 8012f94:	4b05      	ldr	r3, [pc, #20]	; (8012fac <dwt_repeated_cw+0x20>)
 8012f96:	6818      	ldr	r0, [r3, #0]
 8012f98:	6883      	ldr	r3, [r0, #8]
 8012f9a:	691b      	ldr	r3, [r3, #16]
 8012f9c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8012f9e:	466b      	mov	r3, sp
 8012fa0:	2200      	movs	r2, #0
 8012fa2:	2141      	movs	r1, #65	; 0x41
 8012fa4:	47a0      	blx	r4
 8012fa6:	b002      	add	sp, #8
 8012fa8:	bd10      	pop	{r4, pc}
 8012faa:	bf00      	nop
 8012fac:	20000760 	.word	0x20000760

08012fb0 <dwt_configcwmode>:
 8012fb0:	b510      	push	{r4, lr}
 8012fb2:	4b05      	ldr	r3, [pc, #20]	; (8012fc8 <dwt_configcwmode+0x18>)
 8012fb4:	6818      	ldr	r0, [r3, #0]
 8012fb6:	6883      	ldr	r3, [r0, #8]
 8012fb8:	691b      	ldr	r3, [r3, #16]
 8012fba:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8012fbc:	2300      	movs	r3, #0
 8012fbe:	461a      	mov	r2, r3
 8012fc0:	2142      	movs	r1, #66	; 0x42
 8012fc2:	47a0      	blx	r4
 8012fc4:	bd10      	pop	{r4, pc}
 8012fc6:	bf00      	nop
 8012fc8:	20000760 	.word	0x20000760

08012fcc <dwt_configcontinuousframemode>:
 8012fcc:	b510      	push	{r4, lr}
 8012fce:	b082      	sub	sp, #8
 8012fd0:	ab02      	add	r3, sp, #8
 8012fd2:	f843 0d04 	str.w	r0, [r3, #-4]!
 8012fd6:	4a05      	ldr	r2, [pc, #20]	; (8012fec <dwt_configcontinuousframemode+0x20>)
 8012fd8:	6810      	ldr	r0, [r2, #0]
 8012fda:	6882      	ldr	r2, [r0, #8]
 8012fdc:	6912      	ldr	r2, [r2, #16]
 8012fde:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8012fe0:	2200      	movs	r2, #0
 8012fe2:	2146      	movs	r1, #70	; 0x46
 8012fe4:	47a0      	blx	r4
 8012fe6:	b002      	add	sp, #8
 8012fe8:	bd10      	pop	{r4, pc}
 8012fea:	bf00      	nop
 8012fec:	20000760 	.word	0x20000760

08012ff0 <dwt_disablecontinuousframemode>:
 8012ff0:	b510      	push	{r4, lr}
 8012ff2:	4b05      	ldr	r3, [pc, #20]	; (8013008 <dwt_disablecontinuousframemode+0x18>)
 8012ff4:	6818      	ldr	r0, [r3, #0]
 8012ff6:	6883      	ldr	r3, [r0, #8]
 8012ff8:	691b      	ldr	r3, [r3, #16]
 8012ffa:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8012ffc:	2300      	movs	r3, #0
 8012ffe:	461a      	mov	r2, r3
 8013000:	2147      	movs	r1, #71	; 0x47
 8013002:	47a0      	blx	r4
 8013004:	bd10      	pop	{r4, pc}
 8013006:	bf00      	nop
 8013008:	20000760 	.word	0x20000760

0801300c <dwt_readtempvbat>:
 801300c:	b510      	push	{r4, lr}
 801300e:	b082      	sub	sp, #8
 8013010:	2200      	movs	r2, #0
 8013012:	ab02      	add	r3, sp, #8
 8013014:	f823 2d02 	strh.w	r2, [r3, #-2]!
 8013018:	4905      	ldr	r1, [pc, #20]	; (8013030 <dwt_readtempvbat+0x24>)
 801301a:	6808      	ldr	r0, [r1, #0]
 801301c:	6881      	ldr	r1, [r0, #8]
 801301e:	6909      	ldr	r1, [r1, #16]
 8013020:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8013022:	2143      	movs	r1, #67	; 0x43
 8013024:	47a0      	blx	r4
 8013026:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801302a:	b002      	add	sp, #8
 801302c:	bd10      	pop	{r4, pc}
 801302e:	bf00      	nop
 8013030:	20000760 	.word	0x20000760

08013034 <dwt_convertrawtemperature>:
 8013034:	b510      	push	{r4, lr}
 8013036:	b082      	sub	sp, #8
 8013038:	2300      	movs	r3, #0
 801303a:	9300      	str	r3, [sp, #0]
 801303c:	f88d 0004 	strb.w	r0, [sp, #4]
 8013040:	4b05      	ldr	r3, [pc, #20]	; (8013058 <dwt_convertrawtemperature+0x24>)
 8013042:	6818      	ldr	r0, [r3, #0]
 8013044:	6883      	ldr	r3, [r0, #8]
 8013046:	691b      	ldr	r3, [r3, #16]
 8013048:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 801304a:	466b      	mov	r3, sp
 801304c:	2200      	movs	r2, #0
 801304e:	2144      	movs	r1, #68	; 0x44
 8013050:	47a0      	blx	r4
 8013052:	9800      	ldr	r0, [sp, #0]
 8013054:	b002      	add	sp, #8
 8013056:	bd10      	pop	{r4, pc}
 8013058:	20000760 	.word	0x20000760

0801305c <dwt_convertrawvoltage>:
 801305c:	b510      	push	{r4, lr}
 801305e:	b082      	sub	sp, #8
 8013060:	2300      	movs	r3, #0
 8013062:	9300      	str	r3, [sp, #0]
 8013064:	f88d 0004 	strb.w	r0, [sp, #4]
 8013068:	4b05      	ldr	r3, [pc, #20]	; (8013080 <dwt_convertrawvoltage+0x24>)
 801306a:	6818      	ldr	r0, [r3, #0]
 801306c:	6883      	ldr	r3, [r0, #8]
 801306e:	691b      	ldr	r3, [r3, #16]
 8013070:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8013072:	466b      	mov	r3, sp
 8013074:	2200      	movs	r2, #0
 8013076:	2145      	movs	r1, #69	; 0x45
 8013078:	47a0      	blx	r4
 801307a:	9800      	ldr	r0, [sp, #0]
 801307c:	b002      	add	sp, #8
 801307e:	bd10      	pop	{r4, pc}
 8013080:	20000760 	.word	0x20000760

08013084 <dwt_readwakeuptemp>:
 8013084:	b510      	push	{r4, lr}
 8013086:	b082      	sub	sp, #8
 8013088:	2200      	movs	r2, #0
 801308a:	ab02      	add	r3, sp, #8
 801308c:	f803 2d01 	strb.w	r2, [r3, #-1]!
 8013090:	4905      	ldr	r1, [pc, #20]	; (80130a8 <dwt_readwakeuptemp+0x24>)
 8013092:	6808      	ldr	r0, [r1, #0]
 8013094:	6881      	ldr	r1, [r0, #8]
 8013096:	6909      	ldr	r1, [r1, #16]
 8013098:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 801309a:	2135      	movs	r1, #53	; 0x35
 801309c:	47a0      	blx	r4
 801309e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80130a2:	b002      	add	sp, #8
 80130a4:	bd10      	pop	{r4, pc}
 80130a6:	bf00      	nop
 80130a8:	20000760 	.word	0x20000760

080130ac <dwt_readwakeupvbat>:
 80130ac:	b510      	push	{r4, lr}
 80130ae:	b082      	sub	sp, #8
 80130b0:	2200      	movs	r2, #0
 80130b2:	ab02      	add	r3, sp, #8
 80130b4:	f803 2d01 	strb.w	r2, [r3, #-1]!
 80130b8:	4905      	ldr	r1, [pc, #20]	; (80130d0 <dwt_readwakeupvbat+0x24>)
 80130ba:	6808      	ldr	r0, [r1, #0]
 80130bc:	6881      	ldr	r1, [r0, #8]
 80130be:	6909      	ldr	r1, [r1, #16]
 80130c0:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 80130c2:	2136      	movs	r1, #54	; 0x36
 80130c4:	47a0      	blx	r4
 80130c6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80130ca:	b002      	add	sp, #8
 80130cc:	bd10      	pop	{r4, pc}
 80130ce:	bf00      	nop
 80130d0:	20000760 	.word	0x20000760

080130d4 <dwt_readpgdelay>:
 80130d4:	b510      	push	{r4, lr}
 80130d6:	b082      	sub	sp, #8
 80130d8:	2200      	movs	r2, #0
 80130da:	ab02      	add	r3, sp, #8
 80130dc:	f803 2d01 	strb.w	r2, [r3, #-1]!
 80130e0:	4905      	ldr	r1, [pc, #20]	; (80130f8 <dwt_readpgdelay+0x24>)
 80130e2:	6808      	ldr	r0, [r1, #0]
 80130e4:	6881      	ldr	r1, [r0, #8]
 80130e6:	6909      	ldr	r1, [r1, #16]
 80130e8:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 80130ea:	2114      	movs	r1, #20
 80130ec:	47a0      	blx	r4
 80130ee:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80130f2:	b002      	add	sp, #8
 80130f4:	bd10      	pop	{r4, pc}
 80130f6:	bf00      	nop
 80130f8:	20000760 	.word	0x20000760

080130fc <dwt_calcbandwidthadj>:
 80130fc:	b510      	push	{r4, lr}
 80130fe:	b082      	sub	sp, #8
 8013100:	2200      	movs	r2, #0
 8013102:	f88d 2004 	strb.w	r2, [sp, #4]
 8013106:	f8ad 0006 	strh.w	r0, [sp, #6]
 801310a:	4b06      	ldr	r3, [pc, #24]	; (8013124 <dwt_calcbandwidthadj+0x28>)
 801310c:	6818      	ldr	r0, [r3, #0]
 801310e:	6883      	ldr	r3, [r0, #8]
 8013110:	691b      	ldr	r3, [r3, #16]
 8013112:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8013114:	ab01      	add	r3, sp, #4
 8013116:	212e      	movs	r1, #46	; 0x2e
 8013118:	47a0      	blx	r4
 801311a:	f89d 0004 	ldrb.w	r0, [sp, #4]
 801311e:	b002      	add	sp, #8
 8013120:	bd10      	pop	{r4, pc}
 8013122:	bf00      	nop
 8013124:	20000760 	.word	0x20000760

08013128 <dwt_calcpgcount>:
 8013128:	b510      	push	{r4, lr}
 801312a:	b082      	sub	sp, #8
 801312c:	2200      	movs	r2, #0
 801312e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8013132:	f88d 0006 	strb.w	r0, [sp, #6]
 8013136:	4b06      	ldr	r3, [pc, #24]	; (8013150 <dwt_calcpgcount+0x28>)
 8013138:	6818      	ldr	r0, [r3, #0]
 801313a:	6883      	ldr	r3, [r0, #8]
 801313c:	691b      	ldr	r3, [r3, #16]
 801313e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8013140:	ab01      	add	r3, sp, #4
 8013142:	2168      	movs	r1, #104	; 0x68
 8013144:	47a0      	blx	r4
 8013146:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 801314a:	b002      	add	sp, #8
 801314c:	bd10      	pop	{r4, pc}
 801314e:	bf00      	nop
 8013150:	20000760 	.word	0x20000760

08013154 <dwt_set_keyreg_128>:
 8013154:	b538      	push	{r3, r4, r5, lr}
 8013156:	4b05      	ldr	r3, [pc, #20]	; (801316c <dwt_set_keyreg_128+0x18>)
 8013158:	681c      	ldr	r4, [r3, #0]
 801315a:	68a3      	ldr	r3, [r4, #8]
 801315c:	691b      	ldr	r3, [r3, #16]
 801315e:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8013160:	4603      	mov	r3, r0
 8013162:	2200      	movs	r2, #0
 8013164:	2108      	movs	r1, #8
 8013166:	4620      	mov	r0, r4
 8013168:	47a8      	blx	r5
 801316a:	bd38      	pop	{r3, r4, r5, pc}
 801316c:	20000760 	.word	0x20000760

08013170 <dwt_configure_aes>:
 8013170:	b538      	push	{r3, r4, r5, lr}
 8013172:	4b05      	ldr	r3, [pc, #20]	; (8013188 <dwt_configure_aes+0x18>)
 8013174:	681c      	ldr	r4, [r3, #0]
 8013176:	68a3      	ldr	r3, [r4, #8]
 8013178:	691b      	ldr	r3, [r3, #16]
 801317a:	6add      	ldr	r5, [r3, #44]	; 0x2c
 801317c:	4603      	mov	r3, r0
 801317e:	2200      	movs	r2, #0
 8013180:	214c      	movs	r1, #76	; 0x4c
 8013182:	4620      	mov	r0, r4
 8013184:	47a8      	blx	r5
 8013186:	bd38      	pop	{r3, r4, r5, pc}
 8013188:	20000760 	.word	0x20000760

0801318c <dwt_mic_size_from_bytes>:
 801318c:	b510      	push	{r4, lr}
 801318e:	b082      	sub	sp, #8
 8013190:	2200      	movs	r2, #0
 8013192:	f88d 2004 	strb.w	r2, [sp, #4]
 8013196:	f88d 0005 	strb.w	r0, [sp, #5]
 801319a:	4b06      	ldr	r3, [pc, #24]	; (80131b4 <dwt_mic_size_from_bytes+0x28>)
 801319c:	6818      	ldr	r0, [r3, #0]
 801319e:	6883      	ldr	r3, [r0, #8]
 80131a0:	691b      	ldr	r3, [r3, #16]
 80131a2:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80131a4:	ab01      	add	r3, sp, #4
 80131a6:	216f      	movs	r1, #111	; 0x6f
 80131a8:	47a0      	blx	r4
 80131aa:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80131ae:	b002      	add	sp, #8
 80131b0:	bd10      	pop	{r4, pc}
 80131b2:	bf00      	nop
 80131b4:	20000760 	.word	0x20000760

080131b8 <dwt_do_aes>:
 80131b8:	b510      	push	{r4, lr}
 80131ba:	b084      	sub	sp, #16
 80131bc:	2200      	movs	r2, #0
 80131be:	f88d 2004 	strb.w	r2, [sp, #4]
 80131c2:	9002      	str	r0, [sp, #8]
 80131c4:	f88d 100c 	strb.w	r1, [sp, #12]
 80131c8:	4b05      	ldr	r3, [pc, #20]	; (80131e0 <dwt_do_aes+0x28>)
 80131ca:	6818      	ldr	r0, [r3, #0]
 80131cc:	6883      	ldr	r3, [r0, #8]
 80131ce:	691b      	ldr	r3, [r3, #16]
 80131d0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80131d2:	ab01      	add	r3, sp, #4
 80131d4:	214a      	movs	r1, #74	; 0x4a
 80131d6:	47a0      	blx	r4
 80131d8:	f99d 0004 	ldrsb.w	r0, [sp, #4]
 80131dc:	b004      	add	sp, #16
 80131de:	bd10      	pop	{r4, pc}
 80131e0:	20000760 	.word	0x20000760

080131e4 <dwt_wakeup_ic>:
 80131e4:	b510      	push	{r4, lr}
 80131e6:	4b05      	ldr	r3, [pc, #20]	; (80131fc <dwt_wakeup_ic+0x18>)
 80131e8:	6818      	ldr	r0, [r3, #0]
 80131ea:	6883      	ldr	r3, [r0, #8]
 80131ec:	691b      	ldr	r3, [r3, #16]
 80131ee:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80131f0:	2300      	movs	r3, #0
 80131f2:	461a      	mov	r2, r3
 80131f4:	2102      	movs	r1, #2
 80131f6:	47a0      	blx	r4
 80131f8:	bd10      	pop	{r4, pc}
 80131fa:	bf00      	nop
 80131fc:	20000760 	.word	0x20000760

08013200 <dwt_check_dev_id>:
 8013200:	b510      	push	{r4, lr}
 8013202:	4b05      	ldr	r3, [pc, #20]	; (8013218 <dwt_check_dev_id+0x18>)
 8013204:	6818      	ldr	r0, [r3, #0]
 8013206:	6883      	ldr	r3, [r0, #8]
 8013208:	691b      	ldr	r3, [r3, #16]
 801320a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 801320c:	2300      	movs	r3, #0
 801320e:	461a      	mov	r2, r3
 8013210:	2126      	movs	r1, #38	; 0x26
 8013212:	47a0      	blx	r4
 8013214:	bd10      	pop	{r4, pc}
 8013216:	bf00      	nop
 8013218:	20000760 	.word	0x20000760

0801321c <dwt_run_pgfcal>:
 801321c:	b510      	push	{r4, lr}
 801321e:	4b05      	ldr	r3, [pc, #20]	; (8013234 <dwt_run_pgfcal+0x18>)
 8013220:	6818      	ldr	r0, [r3, #0]
 8013222:	6883      	ldr	r3, [r0, #8]
 8013224:	691b      	ldr	r3, [r3, #16]
 8013226:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8013228:	2300      	movs	r3, #0
 801322a:	461a      	mov	r2, r3
 801322c:	212a      	movs	r1, #42	; 0x2a
 801322e:	47a0      	blx	r4
 8013230:	bd10      	pop	{r4, pc}
 8013232:	bf00      	nop
 8013234:	20000760 	.word	0x20000760

08013238 <dwt_pgf_cal>:
 8013238:	b538      	push	{r3, r4, r5, lr}
 801323a:	4b05      	ldr	r3, [pc, #20]	; (8013250 <dwt_pgf_cal+0x18>)
 801323c:	681c      	ldr	r4, [r3, #0]
 801323e:	68a3      	ldr	r3, [r4, #8]
 8013240:	691b      	ldr	r3, [r3, #16]
 8013242:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8013244:	2300      	movs	r3, #0
 8013246:	4602      	mov	r2, r0
 8013248:	212b      	movs	r1, #43	; 0x2b
 801324a:	4620      	mov	r0, r4
 801324c:	47a8      	blx	r5
 801324e:	bd38      	pop	{r3, r4, r5, pc}
 8013250:	20000760 	.word	0x20000760

08013254 <dwt_pll_cal>:
 8013254:	b510      	push	{r4, lr}
 8013256:	4b05      	ldr	r3, [pc, #20]	; (801326c <dwt_pll_cal+0x18>)
 8013258:	6818      	ldr	r0, [r3, #0]
 801325a:	6883      	ldr	r3, [r0, #8]
 801325c:	691b      	ldr	r3, [r3, #16]
 801325e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8013260:	2300      	movs	r3, #0
 8013262:	461a      	mov	r2, r3
 8013264:	2170      	movs	r1, #112	; 0x70
 8013266:	47a0      	blx	r4
 8013268:	bd10      	pop	{r4, pc}
 801326a:	bf00      	nop
 801326c:	20000760 	.word	0x20000760

08013270 <dwt_configure_rf_port>:
 8013270:	b510      	push	{r4, lr}
 8013272:	b082      	sub	sp, #8
 8013274:	f88d 0004 	strb.w	r0, [sp, #4]
 8013278:	f88d 1005 	strb.w	r1, [sp, #5]
 801327c:	4b05      	ldr	r3, [pc, #20]	; (8013294 <dwt_configure_rf_port+0x24>)
 801327e:	6818      	ldr	r0, [r3, #0]
 8013280:	6883      	ldr	r3, [r0, #8]
 8013282:	691b      	ldr	r3, [r3, #16]
 8013284:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8013286:	ab01      	add	r3, sp, #4
 8013288:	2200      	movs	r2, #0
 801328a:	2171      	movs	r1, #113	; 0x71
 801328c:	47a0      	blx	r4
 801328e:	b002      	add	sp, #8
 8013290:	bd10      	pop	{r4, pc}
 8013292:	bf00      	nop
 8013294:	20000760 	.word	0x20000760

08013298 <dwt_configure_le_address>:
 8013298:	b510      	push	{r4, lr}
 801329a:	b082      	sub	sp, #8
 801329c:	4602      	mov	r2, r0
 801329e:	f8ad 0000 	strh.w	r0, [sp]
 80132a2:	9101      	str	r1, [sp, #4]
 80132a4:	4b04      	ldr	r3, [pc, #16]	; (80132b8 <dwt_configure_le_address+0x20>)
 80132a6:	6818      	ldr	r0, [r3, #0]
 80132a8:	6883      	ldr	r3, [r0, #8]
 80132aa:	691b      	ldr	r3, [r3, #16]
 80132ac:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80132ae:	466b      	mov	r3, sp
 80132b0:	2107      	movs	r1, #7
 80132b2:	47a0      	blx	r4
 80132b4:	b002      	add	sp, #8
 80132b6:	bd10      	pop	{r4, pc}
 80132b8:	20000760 	.word	0x20000760

080132bc <dwt_configuresfdtype>:
 80132bc:	b510      	push	{r4, lr}
 80132be:	b082      	sub	sp, #8
 80132c0:	ab02      	add	r3, sp, #8
 80132c2:	f803 0d01 	strb.w	r0, [r3, #-1]!
 80132c6:	4a05      	ldr	r2, [pc, #20]	; (80132dc <dwt_configuresfdtype+0x20>)
 80132c8:	6810      	ldr	r0, [r2, #0]
 80132ca:	6882      	ldr	r2, [r0, #8]
 80132cc:	6912      	ldr	r2, [r2, #16]
 80132ce:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 80132d0:	2200      	movs	r2, #0
 80132d2:	2106      	movs	r1, #6
 80132d4:	47a0      	blx	r4
 80132d6:	b002      	add	sp, #8
 80132d8:	bd10      	pop	{r4, pc}
 80132da:	bf00      	nop
 80132dc:	20000760 	.word	0x20000760

080132e0 <dwt_read_reg>:
 80132e0:	b530      	push	{r4, r5, lr}
 80132e2:	b083      	sub	sp, #12
 80132e4:	2100      	movs	r1, #0
 80132e6:	ab02      	add	r3, sp, #8
 80132e8:	f843 1d04 	str.w	r1, [r3, #-4]!
 80132ec:	4a05      	ldr	r2, [pc, #20]	; (8013304 <dwt_read_reg+0x24>)
 80132ee:	6814      	ldr	r4, [r2, #0]
 80132f0:	68a2      	ldr	r2, [r4, #8]
 80132f2:	6912      	ldr	r2, [r2, #16]
 80132f4:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 80132f6:	4602      	mov	r2, r0
 80132f8:	4620      	mov	r0, r4
 80132fa:	47a8      	blx	r5
 80132fc:	9801      	ldr	r0, [sp, #4]
 80132fe:	b003      	add	sp, #12
 8013300:	bd30      	pop	{r4, r5, pc}
 8013302:	bf00      	nop
 8013304:	20000760 	.word	0x20000760

08013308 <dwt_write_reg>:
 8013308:	b538      	push	{r3, r4, r5, lr}
 801330a:	4b05      	ldr	r3, [pc, #20]	; (8013320 <dwt_write_reg+0x18>)
 801330c:	681c      	ldr	r4, [r3, #0]
 801330e:	68a3      	ldr	r3, [r4, #8]
 8013310:	691b      	ldr	r3, [r3, #16]
 8013312:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8013314:	460b      	mov	r3, r1
 8013316:	4602      	mov	r2, r0
 8013318:	2101      	movs	r1, #1
 801331a:	4620      	mov	r0, r4
 801331c:	47a8      	blx	r5
 801331e:	bd38      	pop	{r3, r4, r5, pc}
 8013320:	20000760 	.word	0x20000760

08013324 <dwt_writetodevice>:
 8013324:	b570      	push	{r4, r5, r6, lr}
 8013326:	b082      	sub	sp, #8
 8013328:	4c07      	ldr	r4, [pc, #28]	; (8013348 <dwt_writetodevice+0x24>)
 801332a:	6824      	ldr	r4, [r4, #0]
 801332c:	68a5      	ldr	r5, [r4, #8]
 801332e:	692d      	ldr	r5, [r5, #16]
 8013330:	f44f 4600 	mov.w	r6, #32768	; 0x8000
 8013334:	9601      	str	r6, [sp, #4]
 8013336:	9300      	str	r3, [sp, #0]
 8013338:	6aad      	ldr	r5, [r5, #40]	; 0x28
 801333a:	4613      	mov	r3, r2
 801333c:	460a      	mov	r2, r1
 801333e:	4601      	mov	r1, r0
 8013340:	4620      	mov	r0, r4
 8013342:	47a8      	blx	r5
 8013344:	b002      	add	sp, #8
 8013346:	bd70      	pop	{r4, r5, r6, pc}
 8013348:	20000760 	.word	0x20000760

0801334c <dwt_readfromdevice>:
 801334c:	b570      	push	{r4, r5, r6, lr}
 801334e:	b082      	sub	sp, #8
 8013350:	4c07      	ldr	r4, [pc, #28]	; (8013370 <dwt_readfromdevice+0x24>)
 8013352:	6824      	ldr	r4, [r4, #0]
 8013354:	68a5      	ldr	r5, [r4, #8]
 8013356:	692d      	ldr	r5, [r5, #16]
 8013358:	2600      	movs	r6, #0
 801335a:	9601      	str	r6, [sp, #4]
 801335c:	9300      	str	r3, [sp, #0]
 801335e:	6aad      	ldr	r5, [r5, #40]	; 0x28
 8013360:	4613      	mov	r3, r2
 8013362:	460a      	mov	r2, r1
 8013364:	4601      	mov	r1, r0
 8013366:	4620      	mov	r0, r4
 8013368:	47a8      	blx	r5
 801336a:	b002      	add	sp, #8
 801336c:	bd70      	pop	{r4, r5, r6, pc}
 801336e:	bf00      	nop
 8013370:	20000760 	.word	0x20000760

08013374 <dwt_writesysstatuslo>:
 8013374:	b510      	push	{r4, lr}
 8013376:	b082      	sub	sp, #8
 8013378:	ab02      	add	r3, sp, #8
 801337a:	f843 0d04 	str.w	r0, [r3, #-4]!
 801337e:	4a05      	ldr	r2, [pc, #20]	; (8013394 <dwt_writesysstatuslo+0x20>)
 8013380:	6810      	ldr	r0, [r2, #0]
 8013382:	6882      	ldr	r2, [r0, #8]
 8013384:	6912      	ldr	r2, [r2, #16]
 8013386:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8013388:	2200      	movs	r2, #0
 801338a:	2174      	movs	r1, #116	; 0x74
 801338c:	47a0      	blx	r4
 801338e:	b002      	add	sp, #8
 8013390:	bd10      	pop	{r4, pc}
 8013392:	bf00      	nop
 8013394:	20000760 	.word	0x20000760

08013398 <dwt_writesysstatushi>:
 8013398:	b510      	push	{r4, lr}
 801339a:	b082      	sub	sp, #8
 801339c:	ab02      	add	r3, sp, #8
 801339e:	f843 0d04 	str.w	r0, [r3, #-4]!
 80133a2:	4a05      	ldr	r2, [pc, #20]	; (80133b8 <dwt_writesysstatushi+0x20>)
 80133a4:	6810      	ldr	r0, [r2, #0]
 80133a6:	6882      	ldr	r2, [r0, #8]
 80133a8:	6912      	ldr	r2, [r2, #16]
 80133aa:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 80133ac:	2200      	movs	r2, #0
 80133ae:	2175      	movs	r1, #117	; 0x75
 80133b0:	47a0      	blx	r4
 80133b2:	b002      	add	sp, #8
 80133b4:	bd10      	pop	{r4, pc}
 80133b6:	bf00      	nop
 80133b8:	20000760 	.word	0x20000760

080133bc <dwt_readsysstatuslo>:
 80133bc:	b510      	push	{r4, lr}
 80133be:	b082      	sub	sp, #8
 80133c0:	2200      	movs	r2, #0
 80133c2:	ab02      	add	r3, sp, #8
 80133c4:	f843 2d04 	str.w	r2, [r3, #-4]!
 80133c8:	4904      	ldr	r1, [pc, #16]	; (80133dc <dwt_readsysstatuslo+0x20>)
 80133ca:	6808      	ldr	r0, [r1, #0]
 80133cc:	6881      	ldr	r1, [r0, #8]
 80133ce:	6909      	ldr	r1, [r1, #16]
 80133d0:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 80133d2:	2176      	movs	r1, #118	; 0x76
 80133d4:	47a0      	blx	r4
 80133d6:	9801      	ldr	r0, [sp, #4]
 80133d8:	b002      	add	sp, #8
 80133da:	bd10      	pop	{r4, pc}
 80133dc:	20000760 	.word	0x20000760

080133e0 <dwt_readsysstatushi>:
 80133e0:	b510      	push	{r4, lr}
 80133e2:	b082      	sub	sp, #8
 80133e4:	2200      	movs	r2, #0
 80133e6:	ab02      	add	r3, sp, #8
 80133e8:	f843 2d04 	str.w	r2, [r3, #-4]!
 80133ec:	4904      	ldr	r1, [pc, #16]	; (8013400 <dwt_readsysstatushi+0x20>)
 80133ee:	6808      	ldr	r0, [r1, #0]
 80133f0:	6881      	ldr	r1, [r0, #8]
 80133f2:	6909      	ldr	r1, [r1, #16]
 80133f4:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 80133f6:	2177      	movs	r1, #119	; 0x77
 80133f8:	47a0      	blx	r4
 80133fa:	9801      	ldr	r0, [sp, #4]
 80133fc:	b002      	add	sp, #8
 80133fe:	bd10      	pop	{r4, pc}
 8013400:	20000760 	.word	0x20000760

08013404 <dwt_writerdbstatus>:
 8013404:	b510      	push	{r4, lr}
 8013406:	b082      	sub	sp, #8
 8013408:	ab02      	add	r3, sp, #8
 801340a:	f803 0d01 	strb.w	r0, [r3, #-1]!
 801340e:	4a05      	ldr	r2, [pc, #20]	; (8013424 <dwt_writerdbstatus+0x20>)
 8013410:	6810      	ldr	r0, [r2, #0]
 8013412:	6882      	ldr	r2, [r0, #8]
 8013414:	6912      	ldr	r2, [r2, #16]
 8013416:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8013418:	2200      	movs	r2, #0
 801341a:	2178      	movs	r1, #120	; 0x78
 801341c:	47a0      	blx	r4
 801341e:	b002      	add	sp, #8
 8013420:	bd10      	pop	{r4, pc}
 8013422:	bf00      	nop
 8013424:	20000760 	.word	0x20000760

08013428 <dwt_readrdbstatus>:
 8013428:	b510      	push	{r4, lr}
 801342a:	b082      	sub	sp, #8
 801342c:	2200      	movs	r2, #0
 801342e:	ab02      	add	r3, sp, #8
 8013430:	f803 2d01 	strb.w	r2, [r3, #-1]!
 8013434:	4905      	ldr	r1, [pc, #20]	; (801344c <dwt_readrdbstatus+0x24>)
 8013436:	6808      	ldr	r0, [r1, #0]
 8013438:	6881      	ldr	r1, [r0, #8]
 801343a:	6909      	ldr	r1, [r1, #16]
 801343c:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 801343e:	2179      	movs	r1, #121	; 0x79
 8013440:	47a0      	blx	r4
 8013442:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8013446:	b002      	add	sp, #8
 8013448:	bd10      	pop	{r4, pc}
 801344a:	bf00      	nop
 801344c:	20000760 	.word	0x20000760

08013450 <dwt_getframelength>:
 8013450:	b510      	push	{r4, lr}
 8013452:	b082      	sub	sp, #8
 8013454:	2200      	movs	r2, #0
 8013456:	ab02      	add	r3, sp, #8
 8013458:	f823 2d02 	strh.w	r2, [r3, #-2]!
 801345c:	4905      	ldr	r1, [pc, #20]	; (8013474 <dwt_getframelength+0x24>)
 801345e:	6808      	ldr	r0, [r1, #0]
 8013460:	6881      	ldr	r1, [r0, #8]
 8013462:	6909      	ldr	r1, [r1, #16]
 8013464:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8013466:	217a      	movs	r1, #122	; 0x7a
 8013468:	47a0      	blx	r4
 801346a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801346e:	b002      	add	sp, #8
 8013470:	bd10      	pop	{r4, pc}
 8013472:	bf00      	nop
 8013474:	20000760 	.word	0x20000760

08013478 <dwt_readpdoaoffset>:
 8013478:	b510      	push	{r4, lr}
 801347a:	b082      	sub	sp, #8
 801347c:	2200      	movs	r2, #0
 801347e:	ab02      	add	r3, sp, #8
 8013480:	f843 2d04 	str.w	r2, [r3, #-4]!
 8013484:	4904      	ldr	r1, [pc, #16]	; (8013498 <dwt_readpdoaoffset+0x20>)
 8013486:	6808      	ldr	r0, [r1, #0]
 8013488:	6881      	ldr	r1, [r0, #8]
 801348a:	6909      	ldr	r1, [r1, #16]
 801348c:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 801348e:	2173      	movs	r1, #115	; 0x73
 8013490:	47a0      	blx	r4
 8013492:	9801      	ldr	r0, [sp, #4]
 8013494:	b002      	add	sp, #8
 8013496:	bd10      	pop	{r4, pc}
 8013498:	20000760 	.word	0x20000760

0801349c <dwt_setpdoaoffset>:
 801349c:	b510      	push	{r4, lr}
 801349e:	b082      	sub	sp, #8
 80134a0:	ab02      	add	r3, sp, #8
 80134a2:	f823 0d02 	strh.w	r0, [r3, #-2]!
 80134a6:	4a05      	ldr	r2, [pc, #20]	; (80134bc <dwt_setpdoaoffset+0x20>)
 80134a8:	6810      	ldr	r0, [r2, #0]
 80134aa:	6882      	ldr	r2, [r0, #8]
 80134ac:	6912      	ldr	r2, [r2, #16]
 80134ae:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 80134b0:	2200      	movs	r2, #0
 80134b2:	2172      	movs	r1, #114	; 0x72
 80134b4:	47a0      	blx	r4
 80134b6:	b002      	add	sp, #8
 80134b8:	bd10      	pop	{r4, pc}
 80134ba:	bf00      	nop
 80134bc:	20000760 	.word	0x20000760

080134c0 <dwt_setinterrupt_db>:
 80134c0:	b510      	push	{r4, lr}
 80134c2:	b082      	sub	sp, #8
 80134c4:	f88d 0004 	strb.w	r0, [sp, #4]
 80134c8:	f88d 1005 	strb.w	r1, [sp, #5]
 80134cc:	4b05      	ldr	r3, [pc, #20]	; (80134e4 <dwt_setinterrupt_db+0x24>)
 80134ce:	6818      	ldr	r0, [r3, #0]
 80134d0:	6883      	ldr	r3, [r0, #8]
 80134d2:	691b      	ldr	r3, [r3, #16]
 80134d4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80134d6:	ab01      	add	r3, sp, #4
 80134d8:	2200      	movs	r2, #0
 80134da:	2183      	movs	r1, #131	; 0x83
 80134dc:	47a0      	blx	r4
 80134de:	b002      	add	sp, #8
 80134e0:	bd10      	pop	{r4, pc}
 80134e2:	bf00      	nop
 80134e4:	20000760 	.word	0x20000760

080134e8 <dwt_softreset_fcmd>:
 80134e8:	b510      	push	{r4, lr}
 80134ea:	4b05      	ldr	r3, [pc, #20]	; (8013500 <dwt_softreset_fcmd+0x18>)
 80134ec:	6818      	ldr	r0, [r3, #0]
 80134ee:	6883      	ldr	r3, [r0, #8]
 80134f0:	691b      	ldr	r3, [r3, #16]
 80134f2:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80134f4:	2300      	movs	r3, #0
 80134f6:	461a      	mov	r2, r3
 80134f8:	2185      	movs	r1, #133	; 0x85
 80134fa:	47a0      	blx	r4
 80134fc:	bd10      	pop	{r4, pc}
 80134fe:	bf00      	nop
 8013500:	20000760 	.word	0x20000760

08013504 <dwt_softreset_no_sema_fcmd>:
 8013504:	b510      	push	{r4, lr}
 8013506:	4b05      	ldr	r3, [pc, #20]	; (801351c <dwt_softreset_no_sema_fcmd+0x18>)
 8013508:	6818      	ldr	r0, [r3, #0]
 801350a:	6883      	ldr	r3, [r0, #8]
 801350c:	691b      	ldr	r3, [r3, #16]
 801350e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8013510:	2300      	movs	r3, #0
 8013512:	461a      	mov	r2, r3
 8013514:	2186      	movs	r1, #134	; 0x86
 8013516:	47a0      	blx	r4
 8013518:	bd10      	pop	{r4, pc}
 801351a:	bf00      	nop
 801351c:	20000760 	.word	0x20000760

08013520 <dwt_ds_sema_request>:
 8013520:	b510      	push	{r4, lr}
 8013522:	4b05      	ldr	r3, [pc, #20]	; (8013538 <dwt_ds_sema_request+0x18>)
 8013524:	6818      	ldr	r0, [r3, #0]
 8013526:	6883      	ldr	r3, [r0, #8]
 8013528:	691b      	ldr	r3, [r3, #16]
 801352a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 801352c:	2300      	movs	r3, #0
 801352e:	461a      	mov	r2, r3
 8013530:	2187      	movs	r1, #135	; 0x87
 8013532:	47a0      	blx	r4
 8013534:	bd10      	pop	{r4, pc}
 8013536:	bf00      	nop
 8013538:	20000760 	.word	0x20000760

0801353c <dwt_ds_sema_release>:
 801353c:	b510      	push	{r4, lr}
 801353e:	4b05      	ldr	r3, [pc, #20]	; (8013554 <dwt_ds_sema_release+0x18>)
 8013540:	6818      	ldr	r0, [r3, #0]
 8013542:	6883      	ldr	r3, [r0, #8]
 8013544:	691b      	ldr	r3, [r3, #16]
 8013546:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8013548:	2300      	movs	r3, #0
 801354a:	461a      	mov	r2, r3
 801354c:	2188      	movs	r1, #136	; 0x88
 801354e:	47a0      	blx	r4
 8013550:	bd10      	pop	{r4, pc}
 8013552:	bf00      	nop
 8013554:	20000760 	.word	0x20000760

08013558 <dwt_ds_sema_force>:
 8013558:	b510      	push	{r4, lr}
 801355a:	4b05      	ldr	r3, [pc, #20]	; (8013570 <dwt_ds_sema_force+0x18>)
 801355c:	6818      	ldr	r0, [r3, #0]
 801355e:	6883      	ldr	r3, [r0, #8]
 8013560:	691b      	ldr	r3, [r3, #16]
 8013562:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8013564:	2300      	movs	r3, #0
 8013566:	461a      	mov	r2, r3
 8013568:	2189      	movs	r1, #137	; 0x89
 801356a:	47a0      	blx	r4
 801356c:	bd10      	pop	{r4, pc}
 801356e:	bf00      	nop
 8013570:	20000760 	.word	0x20000760

08013574 <dwt_ds_sema_status>:
 8013574:	b510      	push	{r4, lr}
 8013576:	b082      	sub	sp, #8
 8013578:	2200      	movs	r2, #0
 801357a:	ab02      	add	r3, sp, #8
 801357c:	f803 2d01 	strb.w	r2, [r3, #-1]!
 8013580:	4905      	ldr	r1, [pc, #20]	; (8013598 <dwt_ds_sema_status+0x24>)
 8013582:	6808      	ldr	r0, [r1, #0]
 8013584:	6881      	ldr	r1, [r0, #8]
 8013586:	6909      	ldr	r1, [r1, #16]
 8013588:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 801358a:	218a      	movs	r1, #138	; 0x8a
 801358c:	47a0      	blx	r4
 801358e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8013592:	b002      	add	sp, #8
 8013594:	bd10      	pop	{r4, pc}
 8013596:	bf00      	nop
 8013598:	20000760 	.word	0x20000760

0801359c <dwt_ds_sema_status_hi>:
 801359c:	b510      	push	{r4, lr}
 801359e:	b082      	sub	sp, #8
 80135a0:	ab02      	add	r3, sp, #8
 80135a2:	2200      	movs	r2, #0
 80135a4:	f803 2d01 	strb.w	r2, [r3, #-1]!
 80135a8:	4a05      	ldr	r2, [pc, #20]	; (80135c0 <dwt_ds_sema_status_hi+0x24>)
 80135aa:	6810      	ldr	r0, [r2, #0]
 80135ac:	6882      	ldr	r2, [r0, #8]
 80135ae:	6912      	ldr	r2, [r2, #16]
 80135b0:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 80135b2:	2201      	movs	r2, #1
 80135b4:	218a      	movs	r1, #138	; 0x8a
 80135b6:	47a0      	blx	r4
 80135b8:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80135bc:	b002      	add	sp, #8
 80135be:	bd10      	pop	{r4, pc}
 80135c0:	20000760 	.word	0x20000760

080135c4 <dwt_ds_en_sleep>:
 80135c4:	b510      	push	{r4, lr}
 80135c6:	b082      	sub	sp, #8
 80135c8:	ab02      	add	r3, sp, #8
 80135ca:	f803 0d01 	strb.w	r0, [r3, #-1]!
 80135ce:	4a05      	ldr	r2, [pc, #20]	; (80135e4 <dwt_ds_en_sleep+0x20>)
 80135d0:	6810      	ldr	r0, [r2, #0]
 80135d2:	6882      	ldr	r2, [r0, #8]
 80135d4:	6912      	ldr	r2, [r2, #16]
 80135d6:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 80135d8:	2200      	movs	r2, #0
 80135da:	218b      	movs	r1, #139	; 0x8b
 80135dc:	47a0      	blx	r4
 80135de:	b002      	add	sp, #8
 80135e0:	bd10      	pop	{r4, pc}
 80135e2:	bf00      	nop
 80135e4:	20000760 	.word	0x20000760

080135e8 <dwt_ds_setinterrupt_SPIxavailable>:
 80135e8:	b530      	push	{r4, r5, lr}
 80135ea:	b083      	sub	sp, #12
 80135ec:	ab02      	add	r3, sp, #8
 80135ee:	f803 1d01 	strb.w	r1, [r3, #-1]!
 80135f2:	4a05      	ldr	r2, [pc, #20]	; (8013608 <dwt_ds_setinterrupt_SPIxavailable+0x20>)
 80135f4:	6814      	ldr	r4, [r2, #0]
 80135f6:	68a2      	ldr	r2, [r4, #8]
 80135f8:	6912      	ldr	r2, [r2, #16]
 80135fa:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 80135fc:	4602      	mov	r2, r0
 80135fe:	218c      	movs	r1, #140	; 0x8c
 8013600:	4620      	mov	r0, r4
 8013602:	47a8      	blx	r5
 8013604:	b003      	add	sp, #12
 8013606:	bd30      	pop	{r4, r5, pc}
 8013608:	20000760 	.word	0x20000760

0801360c <dwt_enable_disable_eq>:
 801360c:	b510      	push	{r4, lr}
 801360e:	b082      	sub	sp, #8
 8013610:	ab02      	add	r3, sp, #8
 8013612:	f803 0d01 	strb.w	r0, [r3, #-1]!
 8013616:	4a05      	ldr	r2, [pc, #20]	; (801362c <dwt_enable_disable_eq+0x20>)
 8013618:	6810      	ldr	r0, [r2, #0]
 801361a:	6882      	ldr	r2, [r0, #8]
 801361c:	6912      	ldr	r2, [r2, #16]
 801361e:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8013620:	2200      	movs	r2, #0
 8013622:	218d      	movs	r1, #141	; 0x8d
 8013624:	47a0      	blx	r4
 8013626:	b002      	add	sp, #8
 8013628:	bd10      	pop	{r4, pc}
 801362a:	bf00      	nop
 801362c:	20000760 	.word	0x20000760

08013630 <dwt_timers_reset>:
 8013630:	b510      	push	{r4, lr}
 8013632:	4b05      	ldr	r3, [pc, #20]	; (8013648 <dwt_timers_reset+0x18>)
 8013634:	6818      	ldr	r0, [r3, #0]
 8013636:	6883      	ldr	r3, [r0, #8]
 8013638:	691b      	ldr	r3, [r3, #16]
 801363a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 801363c:	2300      	movs	r3, #0
 801363e:	461a      	mov	r2, r3
 8013640:	218e      	movs	r1, #142	; 0x8e
 8013642:	47a0      	blx	r4
 8013644:	bd10      	pop	{r4, pc}
 8013646:	bf00      	nop
 8013648:	20000760 	.word	0x20000760

0801364c <dwt_timers_read_and_clear_events>:
 801364c:	b510      	push	{r4, lr}
 801364e:	b082      	sub	sp, #8
 8013650:	2200      	movs	r2, #0
 8013652:	ab02      	add	r3, sp, #8
 8013654:	f823 2d02 	strh.w	r2, [r3, #-2]!
 8013658:	4905      	ldr	r1, [pc, #20]	; (8013670 <dwt_timers_read_and_clear_events+0x24>)
 801365a:	6808      	ldr	r0, [r1, #0]
 801365c:	6881      	ldr	r1, [r0, #8]
 801365e:	6909      	ldr	r1, [r1, #16]
 8013660:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8013662:	218f      	movs	r1, #143	; 0x8f
 8013664:	47a0      	blx	r4
 8013666:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801366a:	b002      	add	sp, #8
 801366c:	bd10      	pop	{r4, pc}
 801366e:	bf00      	nop
 8013670:	20000760 	.word	0x20000760

08013674 <dwt_configure_timer>:
 8013674:	b538      	push	{r3, r4, r5, lr}
 8013676:	4b05      	ldr	r3, [pc, #20]	; (801368c <dwt_configure_timer+0x18>)
 8013678:	681c      	ldr	r4, [r3, #0]
 801367a:	68a3      	ldr	r3, [r4, #8]
 801367c:	691b      	ldr	r3, [r3, #16]
 801367e:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8013680:	4603      	mov	r3, r0
 8013682:	2200      	movs	r2, #0
 8013684:	2190      	movs	r1, #144	; 0x90
 8013686:	4620      	mov	r0, r4
 8013688:	47a8      	blx	r5
 801368a:	bd38      	pop	{r3, r4, r5, pc}
 801368c:	20000760 	.word	0x20000760

08013690 <dwt_configure_wificoex_gpio>:
 8013690:	b510      	push	{r4, lr}
 8013692:	b082      	sub	sp, #8
 8013694:	f88d 0004 	strb.w	r0, [sp, #4]
 8013698:	f88d 1005 	strb.w	r1, [sp, #5]
 801369c:	4b05      	ldr	r3, [pc, #20]	; (80136b4 <dwt_configure_wificoex_gpio+0x24>)
 801369e:	6818      	ldr	r0, [r3, #0]
 80136a0:	6883      	ldr	r3, [r0, #8]
 80136a2:	691b      	ldr	r3, [r3, #16]
 80136a4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80136a6:	ab01      	add	r3, sp, #4
 80136a8:	2200      	movs	r2, #0
 80136aa:	2193      	movs	r1, #147	; 0x93
 80136ac:	47a0      	blx	r4
 80136ae:	b002      	add	sp, #8
 80136b0:	bd10      	pop	{r4, pc}
 80136b2:	bf00      	nop
 80136b4:	20000760 	.word	0x20000760

080136b8 <dwt_configure_and_set_antenna_selection_gpio>:
 80136b8:	b510      	push	{r4, lr}
 80136ba:	b082      	sub	sp, #8
 80136bc:	ab02      	add	r3, sp, #8
 80136be:	f803 0d01 	strb.w	r0, [r3, #-1]!
 80136c2:	4a05      	ldr	r2, [pc, #20]	; (80136d8 <dwt_configure_and_set_antenna_selection_gpio+0x20>)
 80136c4:	6810      	ldr	r0, [r2, #0]
 80136c6:	6882      	ldr	r2, [r0, #8]
 80136c8:	6912      	ldr	r2, [r2, #16]
 80136ca:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 80136cc:	2200      	movs	r2, #0
 80136ce:	217d      	movs	r1, #125	; 0x7d
 80136d0:	47a0      	blx	r4
 80136d2:	b002      	add	sp, #8
 80136d4:	bd10      	pop	{r4, pc}
 80136d6:	bf00      	nop
 80136d8:	20000760 	.word	0x20000760

080136dc <dwt_set_timer_expiration>:
 80136dc:	b510      	push	{r4, lr}
 80136de:	b082      	sub	sp, #8
 80136e0:	f88d 0000 	strb.w	r0, [sp]
 80136e4:	9101      	str	r1, [sp, #4]
 80136e6:	4b05      	ldr	r3, [pc, #20]	; (80136fc <dwt_set_timer_expiration+0x20>)
 80136e8:	6818      	ldr	r0, [r3, #0]
 80136ea:	6883      	ldr	r3, [r0, #8]
 80136ec:	691b      	ldr	r3, [r3, #16]
 80136ee:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80136f0:	466b      	mov	r3, sp
 80136f2:	2200      	movs	r2, #0
 80136f4:	2191      	movs	r1, #145	; 0x91
 80136f6:	47a0      	blx	r4
 80136f8:	b002      	add	sp, #8
 80136fa:	bd10      	pop	{r4, pc}
 80136fc:	20000760 	.word	0x20000760

08013700 <dwt_timer_enable>:
 8013700:	b510      	push	{r4, lr}
 8013702:	b082      	sub	sp, #8
 8013704:	ab02      	add	r3, sp, #8
 8013706:	f803 0d01 	strb.w	r0, [r3, #-1]!
 801370a:	4a05      	ldr	r2, [pc, #20]	; (8013720 <dwt_timer_enable+0x20>)
 801370c:	6810      	ldr	r0, [r2, #0]
 801370e:	6882      	ldr	r2, [r0, #8]
 8013710:	6912      	ldr	r2, [r2, #16]
 8013712:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8013714:	2200      	movs	r2, #0
 8013716:	2192      	movs	r1, #146	; 0x92
 8013718:	47a0      	blx	r4
 801371a:	b002      	add	sp, #8
 801371c:	bd10      	pop	{r4, pc}
 801371e:	bf00      	nop
 8013720:	20000760 	.word	0x20000760

08013724 <dwt_wifi_coex_set>:
 8013724:	b510      	push	{r4, lr}
 8013726:	b082      	sub	sp, #8
 8013728:	f88d 0000 	strb.w	r0, [sp]
 801372c:	9101      	str	r1, [sp, #4]
 801372e:	4b05      	ldr	r3, [pc, #20]	; (8013744 <dwt_wifi_coex_set+0x20>)
 8013730:	6818      	ldr	r0, [r3, #0]
 8013732:	6883      	ldr	r3, [r0, #8]
 8013734:	691b      	ldr	r3, [r3, #16]
 8013736:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8013738:	466b      	mov	r3, sp
 801373a:	2200      	movs	r2, #0
 801373c:	217c      	movs	r1, #124	; 0x7c
 801373e:	47a0      	blx	r4
 8013740:	b002      	add	sp, #8
 8013742:	bd10      	pop	{r4, pc}
 8013744:	20000760 	.word	0x20000760

08013748 <dwt_reset_system_counter>:
 8013748:	b510      	push	{r4, lr}
 801374a:	4b05      	ldr	r3, [pc, #20]	; (8013760 <dwt_reset_system_counter+0x18>)
 801374c:	6818      	ldr	r0, [r3, #0]
 801374e:	6883      	ldr	r3, [r0, #8]
 8013750:	691b      	ldr	r3, [r3, #16]
 8013752:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8013754:	2300      	movs	r3, #0
 8013756:	461a      	mov	r2, r3
 8013758:	217e      	movs	r1, #126	; 0x7e
 801375a:	47a0      	blx	r4
 801375c:	bd10      	pop	{r4, pc}
 801375e:	bf00      	nop
 8013760:	20000760 	.word	0x20000760

08013764 <dwt_config_ostr_mode>:
 8013764:	b510      	push	{r4, lr}
 8013766:	b082      	sub	sp, #8
 8013768:	f88d 0004 	strb.w	r0, [sp, #4]
 801376c:	f8ad 1006 	strh.w	r1, [sp, #6]
 8013770:	4b05      	ldr	r3, [pc, #20]	; (8013788 <dwt_config_ostr_mode+0x24>)
 8013772:	6818      	ldr	r0, [r3, #0]
 8013774:	6883      	ldr	r3, [r0, #8]
 8013776:	691b      	ldr	r3, [r3, #16]
 8013778:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 801377a:	ab01      	add	r3, sp, #4
 801377c:	2200      	movs	r2, #0
 801377e:	217f      	movs	r1, #127	; 0x7f
 8013780:	47a0      	blx	r4
 8013782:	b002      	add	sp, #8
 8013784:	bd10      	pop	{r4, pc}
 8013786:	bf00      	nop
 8013788:	20000760 	.word	0x20000760

0801378c <dwt_set_fixedsts>:
 801378c:	b510      	push	{r4, lr}
 801378e:	b082      	sub	sp, #8
 8013790:	ab02      	add	r3, sp, #8
 8013792:	f803 0d01 	strb.w	r0, [r3, #-1]!
 8013796:	4a05      	ldr	r2, [pc, #20]	; (80137ac <dwt_set_fixedsts+0x20>)
 8013798:	6810      	ldr	r0, [r2, #0]
 801379a:	6882      	ldr	r2, [r0, #8]
 801379c:	6912      	ldr	r2, [r2, #16]
 801379e:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 80137a0:	2200      	movs	r2, #0
 80137a2:	2194      	movs	r1, #148	; 0x94
 80137a4:	47a0      	blx	r4
 80137a6:	b002      	add	sp, #8
 80137a8:	bd10      	pop	{r4, pc}
 80137aa:	bf00      	nop
 80137ac:	20000760 	.word	0x20000760

080137b0 <dwt_readctrdbg>:
 80137b0:	b510      	push	{r4, lr}
 80137b2:	b082      	sub	sp, #8
 80137b4:	2200      	movs	r2, #0
 80137b6:	ab02      	add	r3, sp, #8
 80137b8:	f843 2d04 	str.w	r2, [r3, #-4]!
 80137bc:	4904      	ldr	r1, [pc, #16]	; (80137d0 <dwt_readctrdbg+0x20>)
 80137be:	6808      	ldr	r0, [r1, #0]
 80137c0:	6881      	ldr	r1, [r0, #8]
 80137c2:	6909      	ldr	r1, [r1, #16]
 80137c4:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 80137c6:	2199      	movs	r1, #153	; 0x99
 80137c8:	47a0      	blx	r4
 80137ca:	9801      	ldr	r0, [sp, #4]
 80137cc:	b002      	add	sp, #8
 80137ce:	bd10      	pop	{r4, pc}
 80137d0:	20000760 	.word	0x20000760

080137d4 <dwt_readdgcdbg>:
 80137d4:	b510      	push	{r4, lr}
 80137d6:	b082      	sub	sp, #8
 80137d8:	2200      	movs	r2, #0
 80137da:	ab02      	add	r3, sp, #8
 80137dc:	f843 2d04 	str.w	r2, [r3, #-4]!
 80137e0:	4904      	ldr	r1, [pc, #16]	; (80137f4 <dwt_readdgcdbg+0x20>)
 80137e2:	6808      	ldr	r0, [r1, #0]
 80137e4:	6881      	ldr	r1, [r0, #8]
 80137e6:	6909      	ldr	r1, [r1, #16]
 80137e8:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 80137ea:	219a      	movs	r1, #154	; 0x9a
 80137ec:	47a0      	blx	r4
 80137ee:	9801      	ldr	r0, [sp, #4]
 80137f0:	b002      	add	sp, #8
 80137f2:	bd10      	pop	{r4, pc}
 80137f4:	20000760 	.word	0x20000760

080137f8 <dwt_readCIAversion>:
 80137f8:	b510      	push	{r4, lr}
 80137fa:	b082      	sub	sp, #8
 80137fc:	2200      	movs	r2, #0
 80137fe:	ab02      	add	r3, sp, #8
 8013800:	f843 2d04 	str.w	r2, [r3, #-4]!
 8013804:	4904      	ldr	r1, [pc, #16]	; (8013818 <dwt_readCIAversion+0x20>)
 8013806:	6808      	ldr	r0, [r1, #0]
 8013808:	6881      	ldr	r1, [r0, #8]
 801380a:	6909      	ldr	r1, [r1, #16]
 801380c:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 801380e:	219b      	movs	r1, #155	; 0x9b
 8013810:	47a0      	blx	r4
 8013812:	9801      	ldr	r0, [sp, #4]
 8013814:	b002      	add	sp, #8
 8013816:	bd10      	pop	{r4, pc}
 8013818:	20000760 	.word	0x20000760

0801381c <dwt_getcirregaddress>:
 801381c:	b510      	push	{r4, lr}
 801381e:	b082      	sub	sp, #8
 8013820:	2200      	movs	r2, #0
 8013822:	ab02      	add	r3, sp, #8
 8013824:	f843 2d04 	str.w	r2, [r3, #-4]!
 8013828:	4904      	ldr	r1, [pc, #16]	; (801383c <dwt_getcirregaddress+0x20>)
 801382a:	6808      	ldr	r0, [r1, #0]
 801382c:	6881      	ldr	r1, [r0, #8]
 801382e:	6909      	ldr	r1, [r1, #16]
 8013830:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8013832:	219c      	movs	r1, #156	; 0x9c
 8013834:	47a0      	blx	r4
 8013836:	9801      	ldr	r0, [sp, #4]
 8013838:	b002      	add	sp, #8
 801383a:	bd10      	pop	{r4, pc}
 801383c:	20000760 	.word	0x20000760

08013840 <dwt_get_reg_names>:
 8013840:	b510      	push	{r4, lr}
 8013842:	4b05      	ldr	r3, [pc, #20]	; (8013858 <dwt_get_reg_names+0x18>)
 8013844:	6818      	ldr	r0, [r3, #0]
 8013846:	6883      	ldr	r3, [r0, #8]
 8013848:	691b      	ldr	r3, [r3, #16]
 801384a:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 801384c:	2300      	movs	r3, #0
 801384e:	461a      	mov	r2, r3
 8013850:	2198      	movs	r1, #152	; 0x98
 8013852:	47a0      	blx	r4
 8013854:	bd10      	pop	{r4, pc}
 8013856:	bf00      	nop
 8013858:	20000760 	.word	0x20000760

0801385c <dwt_set_alternative_pulse_shape>:
 801385c:	b510      	push	{r4, lr}
 801385e:	b082      	sub	sp, #8
 8013860:	ab02      	add	r3, sp, #8
 8013862:	f803 0d01 	strb.w	r0, [r3, #-1]!
 8013866:	4a05      	ldr	r2, [pc, #20]	; (801387c <dwt_set_alternative_pulse_shape+0x20>)
 8013868:	6810      	ldr	r0, [r2, #0]
 801386a:	6882      	ldr	r2, [r0, #8]
 801386c:	6912      	ldr	r2, [r2, #16]
 801386e:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8013870:	2200      	movs	r2, #0
 8013872:	2195      	movs	r1, #149	; 0x95
 8013874:	47a0      	blx	r4
 8013876:	b002      	add	sp, #8
 8013878:	bd10      	pop	{r4, pc}
 801387a:	bf00      	nop
 801387c:	20000760 	.word	0x20000760

08013880 <dwt_nlos_alldiag>:
 8013880:	b538      	push	{r3, r4, r5, lr}
 8013882:	4604      	mov	r4, r0
 8013884:	4b05      	ldr	r3, [pc, #20]	; (801389c <dwt_nlos_alldiag+0x1c>)
 8013886:	6818      	ldr	r0, [r3, #0]
 8013888:	6883      	ldr	r3, [r0, #8]
 801388a:	691b      	ldr	r3, [r3, #16]
 801388c:	6add      	ldr	r5, [r3, #44]	; 0x2c
 801388e:	4623      	mov	r3, r4
 8013890:	2200      	movs	r2, #0
 8013892:	2181      	movs	r1, #129	; 0x81
 8013894:	47a8      	blx	r5
 8013896:	7da0      	ldrb	r0, [r4, #22]
 8013898:	bd38      	pop	{r3, r4, r5, pc}
 801389a:	bf00      	nop
 801389c:	20000760 	.word	0x20000760

080138a0 <dwt_nlos_ipdiag>:
 80138a0:	b538      	push	{r3, r4, r5, lr}
 80138a2:	4b05      	ldr	r3, [pc, #20]	; (80138b8 <dwt_nlos_ipdiag+0x18>)
 80138a4:	681c      	ldr	r4, [r3, #0]
 80138a6:	68a3      	ldr	r3, [r4, #8]
 80138a8:	691b      	ldr	r3, [r3, #16]
 80138aa:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80138ac:	4603      	mov	r3, r0
 80138ae:	2200      	movs	r2, #0
 80138b0:	2180      	movs	r1, #128	; 0x80
 80138b2:	4620      	mov	r0, r4
 80138b4:	47a8      	blx	r5
 80138b6:	bd38      	pop	{r3, r4, r5, pc}
 80138b8:	20000760 	.word	0x20000760

080138bc <dwt_adjust_tx_power>:
 80138bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80138be:	b087      	sub	sp, #28
 80138c0:	461d      	mov	r5, r3
 80138c2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80138c4:	2600      	movs	r6, #0
 80138c6:	9600      	str	r6, [sp, #0]
 80138c8:	f8ad 0004 	strh.w	r0, [sp, #4]
 80138cc:	9102      	str	r1, [sp, #8]
 80138ce:	f88d 200c 	strb.w	r2, [sp, #12]
 80138d2:	9304      	str	r3, [sp, #16]
 80138d4:	9405      	str	r4, [sp, #20]
 80138d6:	4b09      	ldr	r3, [pc, #36]	; (80138fc <dwt_adjust_tx_power+0x40>)
 80138d8:	6818      	ldr	r0, [r3, #0]
 80138da:	6883      	ldr	r3, [r0, #8]
 80138dc:	691b      	ldr	r3, [r3, #16]
 80138de:	6adf      	ldr	r7, [r3, #44]	; 0x2c
 80138e0:	466b      	mov	r3, sp
 80138e2:	4632      	mov	r2, r6
 80138e4:	2182      	movs	r1, #130	; 0x82
 80138e6:	47b8      	blx	r7
 80138e8:	9b04      	ldr	r3, [sp, #16]
 80138ea:	681b      	ldr	r3, [r3, #0]
 80138ec:	602b      	str	r3, [r5, #0]
 80138ee:	9b05      	ldr	r3, [sp, #20]
 80138f0:	881b      	ldrh	r3, [r3, #0]
 80138f2:	8023      	strh	r3, [r4, #0]
 80138f4:	9800      	ldr	r0, [sp, #0]
 80138f6:	b007      	add	sp, #28
 80138f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80138fa:	bf00      	nop
 80138fc:	20000760 	.word	0x20000760

08013900 <dwt_dbg_fn>:
 8013900:	2998      	cmp	r1, #152	; 0x98
 8013902:	4802      	ldr	r0, [pc, #8]	; (801390c <dwt_dbg_fn+0xc>)
 8013904:	bf18      	it	ne
 8013906:	2000      	movne	r0, #0
 8013908:	4770      	bx	lr
 801390a:	bf00      	nop
 801390c:	08021214 	.word	0x08021214

08013910 <_deinit>:
 8013910:	4770      	bx	lr

08013912 <dwt_xfer3xxx>:
 8013912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013916:	b084      	sub	sp, #16
 8013918:	4605      	mov	r5, r0
 801391a:	460e      	mov	r6, r1
 801391c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8013920:	1990      	adds	r0, r2, r6
 8013922:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8013926:	4432      	add	r2, r6
 8013928:	f3c2 4204 	ubfx	r2, r2, #16, #5
 801392c:	0084      	lsls	r4, r0, #2
 801392e:	ea44 2442 	orr.w	r4, r4, r2, lsl #9
 8013932:	ea41 0204 	orr.w	r2, r1, r4
 8013936:	0a12      	lsrs	r2, r2, #8
 8013938:	f88d 200c 	strb.w	r2, [sp, #12]
 801393c:	f001 0703 	and.w	r7, r1, #3
 8013940:	433c      	orrs	r4, r7
 8013942:	f88d 400d 	strb.w	r4, [sp, #13]
 8013946:	461f      	mov	r7, r3
 8013948:	b973      	cbnz	r3, 8013968 <dwt_xfer3xxx+0x56>
 801394a:	2900      	cmp	r1, #0
 801394c:	d05c      	beq.n	8013a08 <dwt_xfer3xxx+0xf6>
 801394e:	0073      	lsls	r3, r6, #1
 8013950:	f063 037e 	orn	r3, r3, #126	; 0x7e
 8013954:	f88d 300c 	strb.w	r3, [sp, #12]
 8013958:	2401      	movs	r4, #1
 801395a:	2900      	cmp	r1, #0
 801395c:	d02f      	beq.n	80139be <dwt_xfer3xxx+0xac>
 801395e:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
 8013962:	2903      	cmp	r1, #3
 8013964:	d90a      	bls.n	801397c <dwt_xfer3xxx+0x6a>
 8013966:	e7fe      	b.n	8013966 <dwt_xfer3xxx+0x54>
 8013968:	2800      	cmp	r0, #0
 801396a:	d14f      	bne.n	8013a0c <dwt_xfer3xxx+0xfa>
 801396c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8013970:	d003      	beq.n	801397a <dwt_xfer3xxx+0x68>
 8013972:	2900      	cmp	r1, #0
 8013974:	d14a      	bne.n	8013a0c <dwt_xfer3xxx+0xfa>
 8013976:	2401      	movs	r4, #1
 8013978:	e021      	b.n	80139be <dwt_xfer3xxx+0xac>
 801397a:	2401      	movs	r4, #1
 801397c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 801397e:	7d9b      	ldrb	r3, [r3, #22]
 8013980:	b94b      	cbnz	r3, 8013996 <dwt_xfer3xxx+0x84>
 8013982:	682b      	ldr	r3, [r5, #0]
 8013984:	685d      	ldr	r5, [r3, #4]
 8013986:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013988:	463a      	mov	r2, r7
 801398a:	a903      	add	r1, sp, #12
 801398c:	4620      	mov	r0, r4
 801398e:	47a8      	blx	r5
 8013990:	b004      	add	sp, #16
 8013992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013996:	2200      	movs	r2, #0
 8013998:	4621      	mov	r1, r4
 801399a:	a803      	add	r0, sp, #12
 801399c:	f7ff f948 	bl	8012c30 <dwt_generatecrc8>
 80139a0:	4602      	mov	r2, r0
 80139a2:	4639      	mov	r1, r7
 80139a4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80139a6:	f7ff f943 	bl	8012c30 <dwt_generatecrc8>
 80139aa:	682b      	ldr	r3, [r5, #0]
 80139ac:	9000      	str	r0, [sp, #0]
 80139ae:	689d      	ldr	r5, [r3, #8]
 80139b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80139b2:	463a      	mov	r2, r7
 80139b4:	a903      	add	r1, sp, #12
 80139b6:	4620      	mov	r0, r4
 80139b8:	47a8      	blx	r5
 80139ba:	e7e9      	b.n	8013990 <dwt_xfer3xxx+0x7e>
 80139bc:	2401      	movs	r4, #1
 80139be:	682b      	ldr	r3, [r5, #0]
 80139c0:	f8d3 8000 	ldr.w	r8, [r3]
 80139c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80139c6:	463a      	mov	r2, r7
 80139c8:	a903      	add	r1, sp, #12
 80139ca:	4620      	mov	r0, r4
 80139cc:	47c0      	blx	r8
 80139ce:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80139d0:	7d9b      	ldrb	r3, [r3, #22]
 80139d2:	2b02      	cmp	r3, #2
 80139d4:	d1dc      	bne.n	8013990 <dwt_xfer3xxx+0x7e>
 80139d6:	2e18      	cmp	r6, #24
 80139d8:	d0da      	beq.n	8013990 <dwt_xfer3xxx+0x7e>
 80139da:	2200      	movs	r2, #0
 80139dc:	4621      	mov	r1, r4
 80139de:	a803      	add	r0, sp, #12
 80139e0:	f7ff f926 	bl	8012c30 <dwt_generatecrc8>
 80139e4:	4602      	mov	r2, r0
 80139e6:	4639      	mov	r1, r7
 80139e8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80139ea:	f7ff f921 	bl	8012c30 <dwt_generatecrc8>
 80139ee:	4604      	mov	r4, r0
 80139f0:	2200      	movs	r2, #0
 80139f2:	2118      	movs	r1, #24
 80139f4:	4628      	mov	r0, r5
 80139f6:	f000 f841 	bl	8013a7c <dwt_read8bitoffsetreg>
 80139fa:	4284      	cmp	r4, r0
 80139fc:	d0c8      	beq.n	8013990 <dwt_xfer3xxx+0x7e>
 80139fe:	68eb      	ldr	r3, [r5, #12]
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d0c5      	beq.n	8013990 <dwt_xfer3xxx+0x7e>
 8013a04:	4798      	blx	r3
 8013a06:	e7c3      	b.n	8013990 <dwt_xfer3xxx+0x7e>
 8013a08:	2800      	cmp	r0, #0
 8013a0a:	d0d7      	beq.n	80139bc <dwt_xfer3xxx+0xaa>
 8013a0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013a10:	f88d 200c 	strb.w	r2, [sp, #12]
 8013a14:	2402      	movs	r4, #2
 8013a16:	e7a0      	b.n	801395a <dwt_xfer3xxx+0x48>

08013a18 <dwt_readfromdevice>:
 8013a18:	b510      	push	{r4, lr}
 8013a1a:	b082      	sub	sp, #8
 8013a1c:	2400      	movs	r4, #0
 8013a1e:	9401      	str	r4, [sp, #4]
 8013a20:	9c04      	ldr	r4, [sp, #16]
 8013a22:	9400      	str	r4, [sp, #0]
 8013a24:	f7ff ff75 	bl	8013912 <dwt_xfer3xxx>
 8013a28:	b002      	add	sp, #8
 8013a2a:	bd10      	pop	{r4, pc}

08013a2c <dwt_read32bitoffsetreg>:
 8013a2c:	b500      	push	{lr}
 8013a2e:	b085      	sub	sp, #20
 8013a30:	ab03      	add	r3, sp, #12
 8013a32:	9300      	str	r3, [sp, #0]
 8013a34:	2304      	movs	r3, #4
 8013a36:	b292      	uxth	r2, r2
 8013a38:	f7ff ffee 	bl	8013a18 <dwt_readfromdevice>
 8013a3c:	f10d 030f 	add.w	r3, sp, #15
 8013a40:	f10d 010b 	add.w	r1, sp, #11
 8013a44:	2000      	movs	r0, #0
 8013a46:	f813 2901 	ldrb.w	r2, [r3], #-1
 8013a4a:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 8013a4e:	428b      	cmp	r3, r1
 8013a50:	d1f9      	bne.n	8013a46 <dwt_read32bitoffsetreg+0x1a>
 8013a52:	b005      	add	sp, #20
 8013a54:	f85d fb04 	ldr.w	pc, [sp], #4

08013a58 <dwt_read16bitoffsetreg>:
 8013a58:	b500      	push	{lr}
 8013a5a:	b085      	sub	sp, #20
 8013a5c:	ab03      	add	r3, sp, #12
 8013a5e:	9300      	str	r3, [sp, #0]
 8013a60:	2302      	movs	r3, #2
 8013a62:	b292      	uxth	r2, r2
 8013a64:	f7ff ffd8 	bl	8013a18 <dwt_readfromdevice>
 8013a68:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8013a6c:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8013a70:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 8013a74:	b280      	uxth	r0, r0
 8013a76:	b005      	add	sp, #20
 8013a78:	f85d fb04 	ldr.w	pc, [sp], #4

08013a7c <dwt_read8bitoffsetreg>:
 8013a7c:	b500      	push	{lr}
 8013a7e:	b085      	sub	sp, #20
 8013a80:	f10d 030f 	add.w	r3, sp, #15
 8013a84:	9300      	str	r3, [sp, #0]
 8013a86:	2301      	movs	r3, #1
 8013a88:	b292      	uxth	r2, r2
 8013a8a:	f7ff ffc5 	bl	8013a18 <dwt_readfromdevice>
 8013a8e:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8013a92:	b005      	add	sp, #20
 8013a94:	f85d fb04 	ldr.w	pc, [sp], #4

08013a98 <ull_readdiagnostics>:
 8013a98:	b530      	push	{r4, r5, lr}
 8013a9a:	b0bd      	sub	sp, #244	; 0xf4
 8013a9c:	4605      	mov	r5, r0
 8013a9e:	460c      	mov	r4, r1
 8013aa0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8013aa2:	7bda      	ldrb	r2, [r3, #15]
 8013aa4:	2a01      	cmp	r2, #1
 8013aa6:	d01c      	beq.n	8013ae2 <ull_readdiagnostics+0x4a>
 8013aa8:	2a03      	cmp	r2, #3
 8013aaa:	f040 81d4 	bne.w	8013e56 <ull_readdiagnostics+0x3be>
 8013aae:	7e1b      	ldrb	r3, [r3, #24]
 8013ab0:	f013 0f08 	tst.w	r3, #8
 8013ab4:	d10c      	bne.n	8013ad0 <ull_readdiagnostics+0x38>
 8013ab6:	f013 0f04 	tst.w	r3, #4
 8013aba:	ab02      	add	r3, sp, #8
 8013abc:	9300      	str	r3, [sp, #0]
 8013abe:	bf14      	ite	ne
 8013ac0:	2338      	movne	r3, #56	; 0x38
 8013ac2:	2320      	moveq	r3, #32
 8013ac4:	2200      	movs	r2, #0
 8013ac6:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8013aca:	f7ff ffa5 	bl	8013a18 <dwt_readfromdevice>
 8013ace:	e019      	b.n	8013b04 <ull_readdiagnostics+0x6c>
 8013ad0:	ab02      	add	r3, sp, #8
 8013ad2:	9300      	str	r3, [sp, #0]
 8013ad4:	23e8      	movs	r3, #232	; 0xe8
 8013ad6:	2200      	movs	r2, #0
 8013ad8:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8013adc:	f7ff ff9c 	bl	8013a18 <dwt_readfromdevice>
 8013ae0:	e010      	b.n	8013b04 <ull_readdiagnostics+0x6c>
 8013ae2:	7e1b      	ldrb	r3, [r3, #24]
 8013ae4:	f013 0f08 	tst.w	r3, #8
 8013ae8:	f040 81ac 	bne.w	8013e44 <ull_readdiagnostics+0x3ac>
 8013aec:	f013 0f04 	tst.w	r3, #4
 8013af0:	ab02      	add	r3, sp, #8
 8013af2:	9300      	str	r3, [sp, #0]
 8013af4:	bf14      	ite	ne
 8013af6:	2338      	movne	r3, #56	; 0x38
 8013af8:	2320      	moveq	r3, #32
 8013afa:	2200      	movs	r2, #0
 8013afc:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 8013b00:	f7ff ff8a 	bl	8013a18 <dwt_readfromdevice>
 8013b04:	f10d 0217 	add.w	r2, sp, #23
 8013b08:	f104 031a 	add.w	r3, r4, #26
 8013b0c:	f104 0020 	add.w	r0, r4, #32
 8013b10:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8013b14:	f803 1b01 	strb.w	r1, [r3], #1
 8013b18:	4283      	cmp	r3, r0
 8013b1a:	d1f9      	bne.n	8013b10 <ull_readdiagnostics+0x78>
 8013b1c:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8013b20:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8013b24:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8013b28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013b2c:	8463      	strh	r3, [r4, #34]	; 0x22
 8013b2e:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8013b32:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8013b36:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8013b3a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013b3e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8013b42:	bf1c      	itt	ne
 8013b44:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 8013b48:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 8013b4c:	8423      	strh	r3, [r4, #32]
 8013b4e:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 8013b52:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8013b56:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8013b5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013b5e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8013b60:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8013b62:	7e1b      	ldrb	r3, [r3, #24]
 8013b64:	f013 0f02 	tst.w	r3, #2
 8013b68:	f040 816a 	bne.w	8013e40 <ull_readdiagnostics+0x3a8>
 8013b6c:	aa0a      	add	r2, sp, #40	; 0x28
 8013b6e:	1e63      	subs	r3, r4, #1
 8013b70:	1d20      	adds	r0, r4, #4
 8013b72:	f812 1b01 	ldrb.w	r1, [r2], #1
 8013b76:	f803 1f01 	strb.w	r1, [r3, #1]!
 8013b7a:	79d1      	ldrb	r1, [r2, #7]
 8013b7c:	7219      	strb	r1, [r3, #8]
 8013b7e:	7bd1      	ldrb	r1, [r2, #15]
 8013b80:	7459      	strb	r1, [r3, #17]
 8013b82:	4283      	cmp	r3, r0
 8013b84:	d1f5      	bne.n	8013b72 <ull_readdiagnostics+0xda>
 8013b86:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8013b8a:	7163      	strb	r3, [r4, #5]
 8013b8c:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 8013b90:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 8013b94:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8013b98:	80e3      	strh	r3, [r4, #6]
 8013b9a:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 8013b9e:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 8013ba2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8013ba6:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 8013baa:	f8a4 300d 	strh.w	r3, [r4, #13]
 8013bae:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 8013bb2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8013bb6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8013bba:	f8a4 300f 	strh.w	r3, [r4, #15]
 8013bbe:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 8013bc2:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 8013bc6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8013bca:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 8013bce:	82e3      	strh	r3, [r4, #22]
 8013bd0:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
 8013bd4:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8013bd8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8013bdc:	8323      	strh	r3, [r4, #24]
 8013bde:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8013be0:	7e1b      	ldrb	r3, [r3, #24]
 8013be2:	f013 0f04 	tst.w	r3, #4
 8013be6:	f040 812b 	bne.w	8013e40 <ull_readdiagnostics+0x3a8>
 8013bea:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 8013bee:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8013bf2:	041b      	lsls	r3, r3, #16
 8013bf4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8013bf8:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8013bfc:	4313      	orrs	r3, r2
 8013bfe:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8013c02:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8013c06:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8013c0a:	6263      	str	r3, [r4, #36]	; 0x24
 8013c0c:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
 8013c10:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
 8013c14:	041b      	lsls	r3, r3, #16
 8013c16:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8013c1a:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8013c1e:	4313      	orrs	r3, r2
 8013c20:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
 8013c24:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8013c28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013c2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8013c2e:	f89d 204b 	ldrb.w	r2, [sp, #75]	; 0x4b
 8013c32:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 8013c36:	041b      	lsls	r3, r3, #16
 8013c38:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8013c3c:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8013c40:	4313      	orrs	r3, r2
 8013c42:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 8013c46:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8013c4a:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8013c4e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013c50:	f89d 204f 	ldrb.w	r2, [sp, #79]	; 0x4f
 8013c54:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
 8013c58:	041b      	lsls	r3, r3, #16
 8013c5a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8013c5e:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 8013c62:	4313      	orrs	r3, r2
 8013c64:	f89d 204d 	ldrb.w	r2, [sp, #77]	; 0x4d
 8013c68:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8013c6c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8013c70:	6323      	str	r3, [r4, #48]	; 0x30
 8013c72:	f89d 2053 	ldrb.w	r2, [sp, #83]	; 0x53
 8013c76:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
 8013c7a:	041b      	lsls	r3, r3, #16
 8013c7c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8013c80:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8013c84:	4313      	orrs	r3, r2
 8013c86:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 8013c8a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8013c8e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8013c92:	6363      	str	r3, [r4, #52]	; 0x34
 8013c94:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
 8013c98:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
 8013c9c:	041b      	lsls	r3, r3, #16
 8013c9e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8013ca2:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 8013ca6:	4313      	orrs	r3, r2
 8013ca8:	f89d 2055 	ldrb.w	r2, [sp, #85]	; 0x55
 8013cac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8013cb0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8013cb4:	63a3      	str	r3, [r4, #56]	; 0x38
 8013cb6:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 8013cba:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8013cbe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8013cc2:	87a3      	strh	r3, [r4, #60]	; 0x3c
 8013cc4:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 8013cc8:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 8013ccc:	041b      	lsls	r3, r3, #16
 8013cce:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8013cd2:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 8013cd6:	4313      	orrs	r3, r2
 8013cd8:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 8013cdc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8013ce0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8013ce4:	6423      	str	r3, [r4, #64]	; 0x40
 8013ce6:	f89d 2079 	ldrb.w	r2, [sp, #121]	; 0x79
 8013cea:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
 8013cee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8013cf2:	6463      	str	r3, [r4, #68]	; 0x44
 8013cf4:	f89d 207f 	ldrb.w	r2, [sp, #127]	; 0x7f
 8013cf8:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
 8013cfc:	041b      	lsls	r3, r3, #16
 8013cfe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8013d02:	f89d 207c 	ldrb.w	r2, [sp, #124]	; 0x7c
 8013d06:	4313      	orrs	r3, r2
 8013d08:	f89d 207d 	ldrb.w	r2, [sp, #125]	; 0x7d
 8013d0c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8013d10:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8013d14:	64a3      	str	r3, [r4, #72]	; 0x48
 8013d16:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
 8013d1a:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
 8013d1e:	041b      	lsls	r3, r3, #16
 8013d20:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8013d24:	f89d 2080 	ldrb.w	r2, [sp, #128]	; 0x80
 8013d28:	4313      	orrs	r3, r2
 8013d2a:	f89d 2081 	ldrb.w	r2, [sp, #129]	; 0x81
 8013d2e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8013d32:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8013d36:	64e3      	str	r3, [r4, #76]	; 0x4c
 8013d38:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
 8013d3c:	f89d 3086 	ldrb.w	r3, [sp, #134]	; 0x86
 8013d40:	041b      	lsls	r3, r3, #16
 8013d42:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8013d46:	f89d 2084 	ldrb.w	r2, [sp, #132]	; 0x84
 8013d4a:	4313      	orrs	r3, r2
 8013d4c:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 8013d50:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8013d54:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8013d58:	6523      	str	r3, [r4, #80]	; 0x50
 8013d5a:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 8013d5e:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 8013d62:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8013d66:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8013d6a:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 8013d6e:	f89d 20a5 	ldrb.w	r2, [sp, #165]	; 0xa5
 8013d72:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8013d76:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8013d7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013d7e:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8013d82:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 8013d86:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 8013d8a:	041b      	lsls	r3, r3, #16
 8013d8c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8013d90:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 8013d94:	4313      	orrs	r3, r2
 8013d96:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 8013d9a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8013d9e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8013da2:	65a3      	str	r3, [r4, #88]	; 0x58
 8013da4:	f89d 20c1 	ldrb.w	r2, [sp, #193]	; 0xc1
 8013da8:	f89d 30c0 	ldrb.w	r3, [sp, #192]	; 0xc0
 8013dac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8013db0:	65e3      	str	r3, [r4, #92]	; 0x5c
 8013db2:	f89d 20c7 	ldrb.w	r2, [sp, #199]	; 0xc7
 8013db6:	f89d 30c6 	ldrb.w	r3, [sp, #198]	; 0xc6
 8013dba:	041b      	lsls	r3, r3, #16
 8013dbc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8013dc0:	f89d 20c4 	ldrb.w	r2, [sp, #196]	; 0xc4
 8013dc4:	4313      	orrs	r3, r2
 8013dc6:	f89d 20c5 	ldrb.w	r2, [sp, #197]	; 0xc5
 8013dca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8013dce:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8013dd2:	6623      	str	r3, [r4, #96]	; 0x60
 8013dd4:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
 8013dd8:	f89d 30ca 	ldrb.w	r3, [sp, #202]	; 0xca
 8013ddc:	041b      	lsls	r3, r3, #16
 8013dde:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8013de2:	f89d 20c8 	ldrb.w	r2, [sp, #200]	; 0xc8
 8013de6:	4313      	orrs	r3, r2
 8013de8:	f89d 20c9 	ldrb.w	r2, [sp, #201]	; 0xc9
 8013dec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8013df0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8013df4:	6663      	str	r3, [r4, #100]	; 0x64
 8013df6:	f89d 20cf 	ldrb.w	r2, [sp, #207]	; 0xcf
 8013dfa:	f89d 30ce 	ldrb.w	r3, [sp, #206]	; 0xce
 8013dfe:	041b      	lsls	r3, r3, #16
 8013e00:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8013e04:	f89d 20cc 	ldrb.w	r2, [sp, #204]	; 0xcc
 8013e08:	4313      	orrs	r3, r2
 8013e0a:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 8013e0e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8013e12:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8013e16:	66a3      	str	r3, [r4, #104]	; 0x68
 8013e18:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 8013e1c:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8013e20:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8013e24:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8013e28:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 8013e2c:	f89d 20ed 	ldrb.w	r2, [sp, #237]	; 0xed
 8013e30:	f89d 30ec 	ldrb.w	r3, [sp, #236]	; 0xec
 8013e34:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8013e38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013e3c:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 8013e40:	b03d      	add	sp, #244	; 0xf4
 8013e42:	bd30      	pop	{r4, r5, pc}
 8013e44:	ab02      	add	r3, sp, #8
 8013e46:	9300      	str	r3, [sp, #0]
 8013e48:	23e8      	movs	r3, #232	; 0xe8
 8013e4a:	2200      	movs	r2, #0
 8013e4c:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 8013e50:	f7ff fde2 	bl	8013a18 <dwt_readfromdevice>
 8013e54:	e656      	b.n	8013b04 <ull_readdiagnostics+0x6c>
 8013e56:	7e1b      	ldrb	r3, [r3, #24]
 8013e58:	f013 0f01 	tst.w	r3, #1
 8013e5c:	f000 819f 	beq.w	801419e <ull_readdiagnostics+0x706>
 8013e60:	ab02      	add	r3, sp, #8
 8013e62:	9300      	str	r3, [sp, #0]
 8013e64:	236c      	movs	r3, #108	; 0x6c
 8013e66:	2200      	movs	r2, #0
 8013e68:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 8013e6c:	f7ff fdd4 	bl	8013a18 <dwt_readfromdevice>
 8013e70:	ab1d      	add	r3, sp, #116	; 0x74
 8013e72:	9300      	str	r3, [sp, #0]
 8013e74:	236c      	movs	r3, #108	; 0x6c
 8013e76:	2200      	movs	r2, #0
 8013e78:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 8013e7c:	4628      	mov	r0, r5
 8013e7e:	f7ff fdcb 	bl	8013a18 <dwt_readfromdevice>
 8013e82:	aa02      	add	r2, sp, #8
 8013e84:	1e63      	subs	r3, r4, #1
 8013e86:	1d20      	adds	r0, r4, #4
 8013e88:	f812 1b01 	ldrb.w	r1, [r2], #1
 8013e8c:	f803 1f01 	strb.w	r1, [r3, #1]!
 8013e90:	79d1      	ldrb	r1, [r2, #7]
 8013e92:	7219      	strb	r1, [r3, #8]
 8013e94:	7bd1      	ldrb	r1, [r2, #15]
 8013e96:	7459      	strb	r1, [r3, #17]
 8013e98:	7dd1      	ldrb	r1, [r2, #23]
 8013e9a:	7699      	strb	r1, [r3, #26]
 8013e9c:	4283      	cmp	r3, r0
 8013e9e:	d1f3      	bne.n	8013e88 <ull_readdiagnostics+0x3f0>
 8013ea0:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8013ea4:	77e3      	strb	r3, [r4, #31]
 8013ea6:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8013eaa:	7163      	strb	r3, [r4, #5]
 8013eac:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8013eb0:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8013eb4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8013eb8:	80e3      	strh	r3, [r4, #6]
 8013eba:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8013ebe:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8013ec2:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 8013ec6:	f3c2 12cf 	ubfx	r2, r2, #7, #16
 8013eca:	f8a4 200d 	strh.w	r2, [r4, #13]
 8013ece:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8013ed2:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8013ed6:	f8a4 200f 	strh.w	r2, [r4, #15]
 8013eda:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8013ede:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8013ee2:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 8013ee6:	82e3      	strh	r3, [r4, #22]
 8013ee8:	f89d 201e 	ldrb.w	r2, [sp, #30]
 8013eec:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8013ef0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8013ef4:	8323      	strh	r3, [r4, #24]
 8013ef6:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 8013efa:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 8013efe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8013f02:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013f06:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8013f0a:	bf1c      	itt	ne
 8013f0c:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 8013f10:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 8013f14:	8423      	strh	r3, [r4, #32]
 8013f16:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 8013f1a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8013f1e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8013f22:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013f26:	8463      	strh	r3, [r4, #34]	; 0x22
 8013f28:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 8013f2c:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 8013f30:	041b      	lsls	r3, r3, #16
 8013f32:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8013f36:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 8013f3a:	4313      	orrs	r3, r2
 8013f3c:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 8013f40:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8013f44:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8013f48:	6263      	str	r3, [r4, #36]	; 0x24
 8013f4a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8013f4c:	7e1b      	ldrb	r3, [r3, #24]
 8013f4e:	f013 0f01 	tst.w	r3, #1
 8013f52:	f43f af75 	beq.w	8013e40 <ull_readdiagnostics+0x3a8>
 8013f56:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 8013f5a:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8013f5e:	041b      	lsls	r3, r3, #16
 8013f60:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8013f64:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8013f68:	4313      	orrs	r3, r2
 8013f6a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 8013f6e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8013f72:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013f76:	62a3      	str	r3, [r4, #40]	; 0x28
 8013f78:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 8013f7c:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 8013f80:	041b      	lsls	r3, r3, #16
 8013f82:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8013f86:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 8013f8a:	4313      	orrs	r3, r2
 8013f8c:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 8013f90:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8013f94:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8013f98:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013f9a:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 8013f9e:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8013fa2:	041b      	lsls	r3, r3, #16
 8013fa4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8013fa8:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8013fac:	4313      	orrs	r3, r2
 8013fae:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8013fb2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8013fb6:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8013fba:	6323      	str	r3, [r4, #48]	; 0x30
 8013fbc:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 8013fc0:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 8013fc4:	041b      	lsls	r3, r3, #16
 8013fc6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8013fca:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 8013fce:	4313      	orrs	r3, r2
 8013fd0:	f89d 203d 	ldrb.w	r2, [sp, #61]	; 0x3d
 8013fd4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8013fd8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8013fdc:	6363      	str	r3, [r4, #52]	; 0x34
 8013fde:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 8013fe2:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8013fe6:	041b      	lsls	r3, r3, #16
 8013fe8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8013fec:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8013ff0:	4313      	orrs	r3, r2
 8013ff2:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8013ff6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8013ffa:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8013ffe:	63a3      	str	r3, [r4, #56]	; 0x38
 8014000:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 8014004:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8014008:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801400c:	87a3      	strh	r3, [r4, #60]	; 0x3c
 801400e:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
 8014012:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8014016:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801401a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801401e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8014020:	f89d 2067 	ldrb.w	r2, [sp, #103]	; 0x67
 8014024:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
 8014028:	041b      	lsls	r3, r3, #16
 801402a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801402e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8014032:	4313      	orrs	r3, r2
 8014034:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 8014038:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801403c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8014040:	6423      	str	r3, [r4, #64]	; 0x40
 8014042:	f89d 2069 	ldrb.w	r2, [sp, #105]	; 0x69
 8014046:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 801404a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801404e:	6463      	str	r3, [r4, #68]	; 0x44
 8014050:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
 8014054:	f89d 306e 	ldrb.w	r3, [sp, #110]	; 0x6e
 8014058:	041b      	lsls	r3, r3, #16
 801405a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801405e:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 8014062:	4313      	orrs	r3, r2
 8014064:	f89d 206d 	ldrb.w	r2, [sp, #109]	; 0x6d
 8014068:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801406c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8014070:	64a3      	str	r3, [r4, #72]	; 0x48
 8014072:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
 8014076:	f89d 3072 	ldrb.w	r3, [sp, #114]	; 0x72
 801407a:	041b      	lsls	r3, r3, #16
 801407c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8014080:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
 8014084:	4313      	orrs	r3, r2
 8014086:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
 801408a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801408e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8014092:	64e3      	str	r3, [r4, #76]	; 0x4c
 8014094:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 8014098:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 801409c:	041b      	lsls	r3, r3, #16
 801409e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80140a2:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 80140a6:	4313      	orrs	r3, r2
 80140a8:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 80140ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80140b0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80140b4:	6523      	str	r3, [r4, #80]	; 0x50
 80140b6:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 80140ba:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 80140be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80140c2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80140c6:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 80140ca:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 80140ce:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 80140d2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80140d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80140da:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 80140de:	f89d 20af 	ldrb.w	r2, [sp, #175]	; 0xaf
 80140e2:	f89d 30ae 	ldrb.w	r3, [sp, #174]	; 0xae
 80140e6:	041b      	lsls	r3, r3, #16
 80140e8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80140ec:	f89d 20ac 	ldrb.w	r2, [sp, #172]	; 0xac
 80140f0:	4313      	orrs	r3, r2
 80140f2:	f89d 20ad 	ldrb.w	r2, [sp, #173]	; 0xad
 80140f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80140fa:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80140fe:	65a3      	str	r3, [r4, #88]	; 0x58
 8014100:	f89d 20b1 	ldrb.w	r2, [sp, #177]	; 0xb1
 8014104:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 8014108:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801410c:	65e3      	str	r3, [r4, #92]	; 0x5c
 801410e:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
 8014112:	f89d 30b6 	ldrb.w	r3, [sp, #182]	; 0xb6
 8014116:	041b      	lsls	r3, r3, #16
 8014118:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801411c:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 8014120:	4313      	orrs	r3, r2
 8014122:	f89d 20b5 	ldrb.w	r2, [sp, #181]	; 0xb5
 8014126:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801412a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801412e:	6623      	str	r3, [r4, #96]	; 0x60
 8014130:	f89d 20bb 	ldrb.w	r2, [sp, #187]	; 0xbb
 8014134:	f89d 30ba 	ldrb.w	r3, [sp, #186]	; 0xba
 8014138:	041b      	lsls	r3, r3, #16
 801413a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801413e:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 8014142:	4313      	orrs	r3, r2
 8014144:	f89d 20b9 	ldrb.w	r2, [sp, #185]	; 0xb9
 8014148:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801414c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8014150:	6663      	str	r3, [r4, #100]	; 0x64
 8014152:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 8014156:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 801415a:	041b      	lsls	r3, r3, #16
 801415c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8014160:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 8014164:	4313      	orrs	r3, r2
 8014166:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 801416a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801416e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8014172:	66a3      	str	r3, [r4, #104]	; 0x68
 8014174:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 8014178:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 801417c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8014180:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8014184:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 8014188:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 801418c:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8014190:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8014194:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8014198:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 801419c:	e650      	b.n	8013e40 <ull_readdiagnostics+0x3a8>
 801419e:	ab02      	add	r3, sp, #8
 80141a0:	9300      	str	r3, [sp, #0]
 80141a2:	2328      	movs	r3, #40	; 0x28
 80141a4:	2200      	movs	r2, #0
 80141a6:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 80141aa:	f7ff fc35 	bl	8013a18 <dwt_readfromdevice>
 80141ae:	e668      	b.n	8013e82 <ull_readdiagnostics+0x3ea>

080141b0 <ull_readrxtimestamp>:
 80141b0:	b500      	push	{lr}
 80141b2:	b083      	sub	sp, #12
 80141b4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80141b6:	7bdb      	ldrb	r3, [r3, #15]
 80141b8:	2b01      	cmp	r3, #1
 80141ba:	d00b      	beq.n	80141d4 <ull_readrxtimestamp+0x24>
 80141bc:	2b03      	cmp	r3, #3
 80141be:	d110      	bne.n	80141e2 <ull_readrxtimestamp+0x32>
 80141c0:	9100      	str	r1, [sp, #0]
 80141c2:	2305      	movs	r3, #5
 80141c4:	2204      	movs	r2, #4
 80141c6:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 80141ca:	f7ff fc25 	bl	8013a18 <dwt_readfromdevice>
 80141ce:	b003      	add	sp, #12
 80141d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80141d4:	9100      	str	r1, [sp, #0]
 80141d6:	2305      	movs	r3, #5
 80141d8:	2200      	movs	r2, #0
 80141da:	4905      	ldr	r1, [pc, #20]	; (80141f0 <ull_readrxtimestamp+0x40>)
 80141dc:	f7ff fc1c 	bl	8013a18 <dwt_readfromdevice>
 80141e0:	e7f5      	b.n	80141ce <ull_readrxtimestamp+0x1e>
 80141e2:	9100      	str	r1, [sp, #0]
 80141e4:	2305      	movs	r3, #5
 80141e6:	2200      	movs	r2, #0
 80141e8:	2164      	movs	r1, #100	; 0x64
 80141ea:	f7ff fc15 	bl	8013a18 <dwt_readfromdevice>
 80141ee:	e7ee      	b.n	80141ce <ull_readrxtimestamp+0x1e>
 80141f0:	00180004 	.word	0x00180004

080141f4 <dwt_writetodevice>:
 80141f4:	b510      	push	{r4, lr}
 80141f6:	b082      	sub	sp, #8
 80141f8:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 80141fc:	9401      	str	r4, [sp, #4]
 80141fe:	9c04      	ldr	r4, [sp, #16]
 8014200:	9400      	str	r4, [sp, #0]
 8014202:	f7ff fb86 	bl	8013912 <dwt_xfer3xxx>
 8014206:	b002      	add	sp, #8
 8014208:	bd10      	pop	{r4, pc}

0801420a <dwt_write8bitoffsetreg>:
 801420a:	b510      	push	{r4, lr}
 801420c:	b084      	sub	sp, #16
 801420e:	ac04      	add	r4, sp, #16
 8014210:	f804 3d01 	strb.w	r3, [r4, #-1]!
 8014214:	9400      	str	r4, [sp, #0]
 8014216:	2301      	movs	r3, #1
 8014218:	b292      	uxth	r2, r2
 801421a:	f7ff ffeb 	bl	80141f4 <dwt_writetodevice>
 801421e:	b004      	add	sp, #16
 8014220:	bd10      	pop	{r4, pc}
	...

08014224 <ull_getframelength>:
 8014224:	b510      	push	{r4, lr}
 8014226:	4604      	mov	r4, r0
 8014228:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801422a:	7bdb      	ldrb	r3, [r3, #15]
 801422c:	2b01      	cmp	r3, #1
 801422e:	d013      	beq.n	8014258 <ull_getframelength+0x34>
 8014230:	2b03      	cmp	r3, #3
 8014232:	d11d      	bne.n	8014270 <ull_getframelength+0x4c>
 8014234:	23f0      	movs	r3, #240	; 0xf0
 8014236:	2200      	movs	r2, #0
 8014238:	4912      	ldr	r1, [pc, #72]	; (8014284 <ull_getframelength+0x60>)
 801423a:	f7ff ffe6 	bl	801420a <dwt_write8bitoffsetreg>
 801423e:	2200      	movs	r2, #0
 8014240:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8014244:	4620      	mov	r0, r4
 8014246:	f7ff fc07 	bl	8013a58 <dwt_read16bitoffsetreg>
 801424a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801424c:	7b1a      	ldrb	r2, [r3, #12]
 801424e:	b1a2      	cbz	r2, 801427a <ull_getframelength+0x56>
 8014250:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8014254:	8458      	strh	r0, [r3, #34]	; 0x22
 8014256:	bd10      	pop	{r4, pc}
 8014258:	230f      	movs	r3, #15
 801425a:	2200      	movs	r2, #0
 801425c:	4909      	ldr	r1, [pc, #36]	; (8014284 <ull_getframelength+0x60>)
 801425e:	f7ff ffd4 	bl	801420a <dwt_write8bitoffsetreg>
 8014262:	2200      	movs	r2, #0
 8014264:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 8014268:	4620      	mov	r0, r4
 801426a:	f7ff fbf5 	bl	8013a58 <dwt_read16bitoffsetreg>
 801426e:	e7ec      	b.n	801424a <ull_getframelength+0x26>
 8014270:	2200      	movs	r2, #0
 8014272:	214c      	movs	r1, #76	; 0x4c
 8014274:	f7ff fbf0 	bl	8013a58 <dwt_read16bitoffsetreg>
 8014278:	e7e7      	b.n	801424a <ull_getframelength+0x26>
 801427a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801427e:	8458      	strh	r0, [r3, #34]	; 0x22
 8014280:	e7e9      	b.n	8014256 <ull_getframelength+0x32>
 8014282:	bf00      	nop
 8014284:	00010024 	.word	0x00010024

08014288 <ull_configeventcounters>:
 8014288:	b538      	push	{r3, r4, r5, lr}
 801428a:	4605      	mov	r5, r0
 801428c:	460c      	mov	r4, r1
 801428e:	2302      	movs	r3, #2
 8014290:	2200      	movs	r2, #0
 8014292:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8014296:	f7ff ffb8 	bl	801420a <dwt_write8bitoffsetreg>
 801429a:	b904      	cbnz	r4, 801429e <ull_configeventcounters+0x16>
 801429c:	bd38      	pop	{r3, r4, r5, pc}
 801429e:	2301      	movs	r3, #1
 80142a0:	2200      	movs	r2, #0
 80142a2:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 80142a6:	4628      	mov	r0, r5
 80142a8:	f7ff ffaf 	bl	801420a <dwt_write8bitoffsetreg>
 80142ac:	e7f6      	b.n	801429c <ull_configeventcounters+0x14>

080142ae <dwt_write16bitoffsetreg>:
 80142ae:	b500      	push	{lr}
 80142b0:	b085      	sub	sp, #20
 80142b2:	f88d 300c 	strb.w	r3, [sp, #12]
 80142b6:	0a1b      	lsrs	r3, r3, #8
 80142b8:	f88d 300d 	strb.w	r3, [sp, #13]
 80142bc:	ab03      	add	r3, sp, #12
 80142be:	9300      	str	r3, [sp, #0]
 80142c0:	2302      	movs	r3, #2
 80142c2:	b292      	uxth	r2, r2
 80142c4:	f7ff ff96 	bl	80141f4 <dwt_writetodevice>
 80142c8:	b005      	add	sp, #20
 80142ca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080142d0 <ull_clearaonconfig>:
 80142d0:	b538      	push	{r3, r4, r5, lr}
 80142d2:	4604      	mov	r4, r0
 80142d4:	2300      	movs	r3, #0
 80142d6:	461a      	mov	r2, r3
 80142d8:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 80142dc:	f7ff ffe7 	bl	80142ae <dwt_write16bitoffsetreg>
 80142e0:	2300      	movs	r3, #0
 80142e2:	461a      	mov	r2, r3
 80142e4:	4908      	ldr	r1, [pc, #32]	; (8014308 <ull_clearaonconfig+0x38>)
 80142e6:	4620      	mov	r0, r4
 80142e8:	f7ff ff8f 	bl	801420a <dwt_write8bitoffsetreg>
 80142ec:	4d07      	ldr	r5, [pc, #28]	; (801430c <ull_clearaonconfig+0x3c>)
 80142ee:	2300      	movs	r3, #0
 80142f0:	461a      	mov	r2, r3
 80142f2:	4629      	mov	r1, r5
 80142f4:	4620      	mov	r0, r4
 80142f6:	f7ff ff88 	bl	801420a <dwt_write8bitoffsetreg>
 80142fa:	2302      	movs	r3, #2
 80142fc:	2200      	movs	r2, #0
 80142fe:	4629      	mov	r1, r5
 8014300:	4620      	mov	r0, r4
 8014302:	f7ff ff82 	bl	801420a <dwt_write8bitoffsetreg>
 8014306:	bd38      	pop	{r3, r4, r5, pc}
 8014308:	000a0014 	.word	0x000a0014
 801430c:	000a0004 	.word	0x000a0004

08014310 <ull_force_clocks>:
 8014310:	b508      	push	{r3, lr}
 8014312:	2901      	cmp	r1, #1
 8014314:	d002      	beq.n	801431c <ull_force_clocks+0xc>
 8014316:	2905      	cmp	r1, #5
 8014318:	d007      	beq.n	801432a <ull_force_clocks+0x1a>
 801431a:	bd08      	pop	{r3, pc}
 801431c:	f641 0322 	movw	r3, #6178	; 0x1822
 8014320:	2200      	movs	r2, #0
 8014322:	4905      	ldr	r1, [pc, #20]	; (8014338 <ull_force_clocks+0x28>)
 8014324:	f7ff ffc3 	bl	80142ae <dwt_write16bitoffsetreg>
 8014328:	e7f7      	b.n	801431a <ull_force_clocks+0xa>
 801432a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801432e:	2200      	movs	r2, #0
 8014330:	4901      	ldr	r1, [pc, #4]	; (8014338 <ull_force_clocks+0x28>)
 8014332:	f7ff ffbc 	bl	80142ae <dwt_write16bitoffsetreg>
 8014336:	e7f0      	b.n	801431a <ull_force_clocks+0xa>
 8014338:	00110004 	.word	0x00110004

0801433c <__dwt_otp_write_wdata_id_reg>:
 801433c:	b538      	push	{r3, r4, r5, lr}
 801433e:	4605      	mov	r5, r0
 8014340:	460c      	mov	r4, r1
 8014342:	f441 7300 	orr.w	r3, r1, #512	; 0x200
 8014346:	b29b      	uxth	r3, r3
 8014348:	2200      	movs	r2, #0
 801434a:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 801434e:	f7ff ffae 	bl	80142ae <dwt_write16bitoffsetreg>
 8014352:	b2a3      	uxth	r3, r4
 8014354:	2200      	movs	r2, #0
 8014356:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 801435a:	4628      	mov	r0, r5
 801435c:	f7ff ffa7 	bl	80142ae <dwt_write16bitoffsetreg>
 8014360:	bd38      	pop	{r3, r4, r5, pc}
	...

08014364 <_dwt_otpread>:
 8014364:	b570      	push	{r4, r5, r6, lr}
 8014366:	4604      	mov	r4, r0
 8014368:	460e      	mov	r6, r1
 801436a:	4d0c      	ldr	r5, [pc, #48]	; (801439c <_dwt_otpread+0x38>)
 801436c:	2301      	movs	r3, #1
 801436e:	2200      	movs	r2, #0
 8014370:	4629      	mov	r1, r5
 8014372:	f7ff ff9c 	bl	80142ae <dwt_write16bitoffsetreg>
 8014376:	4633      	mov	r3, r6
 8014378:	2200      	movs	r2, #0
 801437a:	4909      	ldr	r1, [pc, #36]	; (80143a0 <_dwt_otpread+0x3c>)
 801437c:	4620      	mov	r0, r4
 801437e:	f7ff ff96 	bl	80142ae <dwt_write16bitoffsetreg>
 8014382:	2302      	movs	r3, #2
 8014384:	2200      	movs	r2, #0
 8014386:	4629      	mov	r1, r5
 8014388:	4620      	mov	r0, r4
 801438a:	f7ff ff90 	bl	80142ae <dwt_write16bitoffsetreg>
 801438e:	2200      	movs	r2, #0
 8014390:	4904      	ldr	r1, [pc, #16]	; (80143a4 <_dwt_otpread+0x40>)
 8014392:	4620      	mov	r0, r4
 8014394:	f7ff fb4a 	bl	8013a2c <dwt_read32bitoffsetreg>
 8014398:	bd70      	pop	{r4, r5, r6, pc}
 801439a:	bf00      	nop
 801439c:	000b0008 	.word	0x000b0008
 80143a0:	000b0004 	.word	0x000b0004
 80143a4:	000b0010 	.word	0x000b0010

080143a8 <ull_aon_read>:
 80143a8:	b538      	push	{r3, r4, r5, lr}
 80143aa:	4604      	mov	r4, r0
 80143ac:	460b      	mov	r3, r1
 80143ae:	2200      	movs	r2, #0
 80143b0:	490a      	ldr	r1, [pc, #40]	; (80143dc <ull_aon_read+0x34>)
 80143b2:	f7ff ff7c 	bl	80142ae <dwt_write16bitoffsetreg>
 80143b6:	4d0a      	ldr	r5, [pc, #40]	; (80143e0 <ull_aon_read+0x38>)
 80143b8:	2388      	movs	r3, #136	; 0x88
 80143ba:	2200      	movs	r2, #0
 80143bc:	4629      	mov	r1, r5
 80143be:	4620      	mov	r0, r4
 80143c0:	f7ff ff23 	bl	801420a <dwt_write8bitoffsetreg>
 80143c4:	2300      	movs	r3, #0
 80143c6:	461a      	mov	r2, r3
 80143c8:	4629      	mov	r1, r5
 80143ca:	4620      	mov	r0, r4
 80143cc:	f7ff ff1d 	bl	801420a <dwt_write8bitoffsetreg>
 80143d0:	2200      	movs	r2, #0
 80143d2:	4904      	ldr	r1, [pc, #16]	; (80143e4 <ull_aon_read+0x3c>)
 80143d4:	4620      	mov	r0, r4
 80143d6:	f7ff fb51 	bl	8013a7c <dwt_read8bitoffsetreg>
 80143da:	bd38      	pop	{r3, r4, r5, pc}
 80143dc:	000a000c 	.word	0x000a000c
 80143e0:	000a0004 	.word	0x000a0004
 80143e4:	000a0008 	.word	0x000a0008

080143e8 <ull_aon_write>:
 80143e8:	b570      	push	{r4, r5, r6, lr}
 80143ea:	4604      	mov	r4, r0
 80143ec:	460b      	mov	r3, r1
 80143ee:	4615      	mov	r5, r2
 80143f0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80143f4:	bf34      	ite	cc
 80143f6:	2600      	movcc	r6, #0
 80143f8:	2620      	movcs	r6, #32
 80143fa:	2200      	movs	r2, #0
 80143fc:	490b      	ldr	r1, [pc, #44]	; (801442c <ull_aon_write+0x44>)
 80143fe:	f7ff ff56 	bl	80142ae <dwt_write16bitoffsetreg>
 8014402:	462b      	mov	r3, r5
 8014404:	2200      	movs	r2, #0
 8014406:	490a      	ldr	r1, [pc, #40]	; (8014430 <ull_aon_write+0x48>)
 8014408:	4620      	mov	r0, r4
 801440a:	f7ff fefe 	bl	801420a <dwt_write8bitoffsetreg>
 801440e:	4d09      	ldr	r5, [pc, #36]	; (8014434 <ull_aon_write+0x4c>)
 8014410:	f046 0390 	orr.w	r3, r6, #144	; 0x90
 8014414:	2200      	movs	r2, #0
 8014416:	4629      	mov	r1, r5
 8014418:	4620      	mov	r0, r4
 801441a:	f7ff fef6 	bl	801420a <dwt_write8bitoffsetreg>
 801441e:	2300      	movs	r3, #0
 8014420:	461a      	mov	r2, r3
 8014422:	4629      	mov	r1, r5
 8014424:	4620      	mov	r0, r4
 8014426:	f7ff fef0 	bl	801420a <dwt_write8bitoffsetreg>
 801442a:	bd70      	pop	{r4, r5, r6, pc}
 801442c:	000a000c 	.word	0x000a000c
 8014430:	000a0010 	.word	0x000a0010
 8014434:	000a0004 	.word	0x000a0004

08014438 <ull_configuresleep>:
 8014438:	b570      	push	{r4, r5, r6, lr}
 801443a:	4604      	mov	r4, r0
 801443c:	460d      	mov	r5, r1
 801443e:	4616      	mov	r6, r2
 8014440:	2200      	movs	r2, #0
 8014442:	f240 110b 	movw	r1, #267	; 0x10b
 8014446:	f7ff ffcf 	bl	80143e8 <ull_aon_write>
 801444a:	f44f 7182 	mov.w	r1, #260	; 0x104
 801444e:	4620      	mov	r0, r4
 8014450:	f7ff ffaa 	bl	80143a8 <ull_aon_read>
 8014454:	f000 021f 	and.w	r2, r0, #31
 8014458:	f44f 7182 	mov.w	r1, #260	; 0x104
 801445c:	4620      	mov	r0, r4
 801445e:	f7ff ffc3 	bl	80143e8 <ull_aon_write>
 8014462:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8014464:	8a5a      	ldrh	r2, [r3, #18]
 8014466:	4315      	orrs	r5, r2
 8014468:	825d      	strh	r5, [r3, #18]
 801446a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801446c:	8a5b      	ldrh	r3, [r3, #18]
 801446e:	2200      	movs	r2, #0
 8014470:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 8014474:	4620      	mov	r0, r4
 8014476:	f7ff ff1a 	bl	80142ae <dwt_write16bitoffsetreg>
 801447a:	4633      	mov	r3, r6
 801447c:	2200      	movs	r2, #0
 801447e:	4902      	ldr	r1, [pc, #8]	; (8014488 <ull_configuresleep+0x50>)
 8014480:	4620      	mov	r0, r4
 8014482:	f7ff fec2 	bl	801420a <dwt_write8bitoffsetreg>
 8014486:	bd70      	pop	{r4, r5, r6, pc}
 8014488:	000a0014 	.word	0x000a0014

0801448c <ull_signal_rx_buff_free>:
 801448c:	b510      	push	{r4, lr}
 801448e:	b082      	sub	sp, #8
 8014490:	4604      	mov	r4, r0
 8014492:	2200      	movs	r2, #0
 8014494:	9200      	str	r2, [sp, #0]
 8014496:	4613      	mov	r3, r2
 8014498:	2113      	movs	r1, #19
 801449a:	f7ff feab 	bl	80141f4 <dwt_writetodevice>
 801449e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80144a0:	7bda      	ldrb	r2, [r3, #15]
 80144a2:	2a03      	cmp	r2, #3
 80144a4:	bf0c      	ite	eq
 80144a6:	2201      	moveq	r2, #1
 80144a8:	2203      	movne	r2, #3
 80144aa:	73da      	strb	r2, [r3, #15]
 80144ac:	b002      	add	sp, #8
 80144ae:	bd10      	pop	{r4, pc}

080144b0 <dwt_write32bitoffsetreg>:
 80144b0:	b510      	push	{r4, lr}
 80144b2:	b084      	sub	sp, #16
 80144b4:	f88d 300c 	strb.w	r3, [sp, #12]
 80144b8:	0a1c      	lsrs	r4, r3, #8
 80144ba:	f88d 400d 	strb.w	r4, [sp, #13]
 80144be:	0c1c      	lsrs	r4, r3, #16
 80144c0:	f88d 400e 	strb.w	r4, [sp, #14]
 80144c4:	0e1b      	lsrs	r3, r3, #24
 80144c6:	f88d 300f 	strb.w	r3, [sp, #15]
 80144ca:	ab03      	add	r3, sp, #12
 80144cc:	9300      	str	r3, [sp, #0]
 80144ce:	2304      	movs	r3, #4
 80144d0:	b292      	uxth	r2, r2
 80144d2:	f7ff fe8f 	bl	80141f4 <dwt_writetodevice>
 80144d6:	b004      	add	sp, #16
 80144d8:	bd10      	pop	{r4, pc}
	...

080144dc <ull_isr>:
 80144dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80144de:	4604      	mov	r4, r0
 80144e0:	2200      	movs	r2, #0
 80144e2:	f44f 11f8 	mov.w	r1, #2031616	; 0x1f0000
 80144e6:	f7ff fac9 	bl	8013a7c <dwt_read8bitoffsetreg>
 80144ea:	4605      	mov	r5, r0
 80144ec:	2200      	movs	r2, #0
 80144ee:	2144      	movs	r1, #68	; 0x44
 80144f0:	4620      	mov	r0, r4
 80144f2:	f7ff fa9b 	bl	8013a2c <dwt_read32bitoffsetreg>
 80144f6:	4606      	mov	r6, r0
 80144f8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80144fa:	2200      	movs	r2, #0
 80144fc:	845a      	strh	r2, [r3, #34]	; 0x22
 80144fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8014502:	61da      	str	r2, [r3, #28]
 8014504:	841a      	strh	r2, [r3, #32]
 8014506:	629a      	str	r2, [r3, #40]	; 0x28
 8014508:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801450a:	629c      	str	r4, [r3, #40]	; 0x28
 801450c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801450e:	61d8      	str	r0, [r3, #28]
 8014510:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8014512:	7dd3      	ldrb	r3, [r2, #23]
 8014514:	f003 0303 	and.w	r3, r3, #3
 8014518:	2b03      	cmp	r3, #3
 801451a:	d079      	beq.n	8014610 <ull_isr+0x134>
 801451c:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8014520:	d005      	beq.n	801452e <ull_isr+0x52>
 8014522:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8014526:	f043 0304 	orr.w	r3, r3, #4
 801452a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 801452e:	f015 0f80 	tst.w	r5, #128	; 0x80
 8014532:	d174      	bne.n	801461e <ull_isr+0x142>
 8014534:	f015 0f01 	tst.w	r5, #1
 8014538:	f040 80a3 	bne.w	8014682 <ull_isr+0x1a6>
 801453c:	f015 0f40 	tst.w	r5, #64	; 0x40
 8014540:	d00b      	beq.n	801455a <ull_isr+0x7e>
 8014542:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014544:	b113      	cbz	r3, 801454c <ull_isr+0x70>
 8014546:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8014548:	301c      	adds	r0, #28
 801454a:	4798      	blx	r3
 801454c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8014550:	2202      	movs	r2, #2
 8014552:	2144      	movs	r1, #68	; 0x44
 8014554:	4620      	mov	r0, r4
 8014556:	f7ff feaa 	bl	80142ae <dwt_write16bitoffsetreg>
 801455a:	f015 0f08 	tst.w	r5, #8
 801455e:	f000 80ea 	beq.w	8014736 <ull_isr+0x25a>
 8014562:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8014564:	2200      	movs	r2, #0
 8014566:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 801456a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801456c:	7bdb      	ldrb	r3, [r3, #15]
 801456e:	2b00      	cmp	r3, #0
 8014570:	f040 8095 	bne.w	801469e <ull_isr+0x1c2>
 8014574:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8014576:	61de      	str	r6, [r3, #28]
 8014578:	f416 2f80 	tst.w	r6, #262144	; 0x40000
 801457c:	f000 80a9 	beq.w	80146d2 <ull_isr+0x1f6>
 8014580:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8014582:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8014586:	f043 0308 	orr.w	r3, r3, #8
 801458a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 801458e:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 8014592:	f016 5f80 	tst.w	r6, #268435456	; 0x10000000
 8014596:	d008      	beq.n	80145aa <ull_isr+0xce>
 8014598:	6d22      	ldr	r2, [r4, #80]	; 0x50
 801459a:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 801459e:	f043 0310 	orr.w	r3, r3, #16
 80145a2:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 80145a6:	f047 5780 	orr.w	r7, r7, #268435456	; 0x10000000
 80145aa:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 80145ae:	d006      	beq.n	80145be <ull_isr+0xe2>
 80145b0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80145b2:	7dd3      	ldrb	r3, [r2, #23]
 80145b4:	f003 0303 	and.w	r3, r3, #3
 80145b8:	2b03      	cmp	r3, #3
 80145ba:	f000 8096 	beq.w	80146ea <ull_isr+0x20e>
 80145be:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 80145c2:	f040 809e 	bne.w	8014702 <ull_isr+0x226>
 80145c6:	f447 43de 	orr.w	r3, r7, #28416	; 0x6f00
 80145ca:	2200      	movs	r2, #0
 80145cc:	2144      	movs	r1, #68	; 0x44
 80145ce:	4620      	mov	r0, r4
 80145d0:	f7ff ff6e 	bl	80144b0 <dwt_write32bitoffsetreg>
 80145d4:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80145d6:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80145d8:	2b00      	cmp	r3, #0
 80145da:	f040 80a1 	bne.w	8014720 <ull_isr+0x244>
 80145de:	7dc3      	ldrb	r3, [r0, #23]
 80145e0:	f003 0303 	and.w	r3, r3, #3
 80145e4:	2b03      	cmp	r3, #3
 80145e6:	f000 809b 	beq.w	8014720 <ull_isr+0x244>
 80145ea:	69c3      	ldr	r3, [r0, #28]
 80145ec:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80145f0:	61c3      	str	r3, [r0, #28]
 80145f2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80145f4:	69d3      	ldr	r3, [r2, #28]
 80145f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80145fa:	61d3      	str	r3, [r2, #28]
 80145fc:	69e3      	ldr	r3, [r4, #28]
 80145fe:	b113      	cbz	r3, 8014606 <ull_isr+0x12a>
 8014600:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8014602:	301c      	adds	r0, #28
 8014604:	4798      	blx	r3
 8014606:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8014608:	2200      	movs	r2, #0
 801460a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 801460e:	e08b      	b.n	8014728 <ull_isr+0x24c>
 8014610:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8014614:	bf1c      	itt	ne
 8014616:	f045 0508 	orrne.w	r5, r5, #8
 801461a:	b2ed      	uxtbne	r5, r5
 801461c:	e77e      	b.n	801451c <ull_isr+0x40>
 801461e:	6d27      	ldr	r7, [r4, #80]	; 0x50
 8014620:	2200      	movs	r2, #0
 8014622:	2148      	movs	r1, #72	; 0x48
 8014624:	4620      	mov	r0, r4
 8014626:	f7ff fa17 	bl	8013a58 <dwt_read16bitoffsetreg>
 801462a:	8438      	strh	r0, [r7, #32]
 801462c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801462e:	7d9a      	ldrb	r2, [r3, #22]
 8014630:	b11a      	cbz	r2, 801463a <ull_isr+0x15e>
 8014632:	69da      	ldr	r2, [r3, #28]
 8014634:	f012 0f04 	tst.w	r2, #4
 8014638:	d103      	bne.n	8014642 <ull_isr+0x166>
 801463a:	8c1b      	ldrh	r3, [r3, #32]
 801463c:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8014640:	b18b      	cbz	r3, 8014666 <ull_isr+0x18a>
 8014642:	2304      	movs	r3, #4
 8014644:	2200      	movs	r2, #0
 8014646:	2144      	movs	r1, #68	; 0x44
 8014648:	4620      	mov	r0, r4
 801464a:	f7ff fdde 	bl	801420a <dwt_write8bitoffsetreg>
 801464e:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8014652:	2200      	movs	r2, #0
 8014654:	2148      	movs	r1, #72	; 0x48
 8014656:	4620      	mov	r0, r4
 8014658:	f7ff fe29 	bl	80142ae <dwt_write16bitoffsetreg>
 801465c:	6a23      	ldr	r3, [r4, #32]
 801465e:	b113      	cbz	r3, 8014666 <ull_isr+0x18a>
 8014660:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8014662:	301c      	adds	r0, #28
 8014664:	4798      	blx	r3
 8014666:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8014668:	8c1b      	ldrh	r3, [r3, #32]
 801466a:	f413 7f80 	tst.w	r3, #256	; 0x100
 801466e:	f43f af61 	beq.w	8014534 <ull_isr+0x58>
 8014672:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014676:	2200      	movs	r2, #0
 8014678:	2148      	movs	r1, #72	; 0x48
 801467a:	4620      	mov	r0, r4
 801467c:	f7ff fe17 	bl	80142ae <dwt_write16bitoffsetreg>
 8014680:	e758      	b.n	8014534 <ull_isr+0x58>
 8014682:	23f8      	movs	r3, #248	; 0xf8
 8014684:	2200      	movs	r2, #0
 8014686:	2144      	movs	r1, #68	; 0x44
 8014688:	4620      	mov	r0, r4
 801468a:	f7ff fdbe 	bl	801420a <dwt_write8bitoffsetreg>
 801468e:	6923      	ldr	r3, [r4, #16]
 8014690:	2b00      	cmp	r3, #0
 8014692:	f43f af53 	beq.w	801453c <ull_isr+0x60>
 8014696:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8014698:	301c      	adds	r0, #28
 801469a:	4798      	blx	r3
 801469c:	e74e      	b.n	801453c <ull_isr+0x60>
 801469e:	493b      	ldr	r1, [pc, #236]	; (801478c <ull_isr+0x2b0>)
 80146a0:	4620      	mov	r0, r4
 80146a2:	f7ff f9eb 	bl	8013a7c <dwt_read8bitoffsetreg>
 80146a6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80146a8:	7bdb      	ldrb	r3, [r3, #15]
 80146aa:	2b03      	cmp	r3, #3
 80146ac:	bf08      	it	eq
 80146ae:	f3c0 1007 	ubfxeq	r0, r0, #4, #8
 80146b2:	f010 0f01 	tst.w	r0, #1
 80146b6:	bf18      	it	ne
 80146b8:	f446 4680 	orrne.w	r6, r6, #16384	; 0x4000
 80146bc:	f010 0f02 	tst.w	r0, #2
 80146c0:	bf18      	it	ne
 80146c2:	f446 5600 	orrne.w	r6, r6, #8192	; 0x2000
 80146c6:	f010 0f04 	tst.w	r0, #4
 80146ca:	bf18      	it	ne
 80146cc:	f446 6680 	orrne.w	r6, r6, #1024	; 0x400
 80146d0:	e750      	b.n	8014574 <ull_isr+0x98>
 80146d2:	f416 6f80 	tst.w	r6, #1024	; 0x400
 80146d6:	bf1f      	itttt	ne
 80146d8:	6d22      	ldrne	r2, [r4, #80]	; 0x50
 80146da:	f892 3024 	ldrbne.w	r3, [r2, #36]	; 0x24
 80146de:	f043 0304 	orrne.w	r3, r3, #4
 80146e2:	f882 3024 	strbne.w	r3, [r2, #36]	; 0x24
 80146e6:	2700      	movs	r7, #0
 80146e8:	e753      	b.n	8014592 <ull_isr+0xb6>
 80146ea:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80146ee:	f043 0302 	orr.w	r3, r3, #2
 80146f2:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 80146f6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80146f8:	2200      	movs	r2, #0
 80146fa:	845a      	strh	r2, [r3, #34]	; 0x22
 80146fc:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 8014700:	e761      	b.n	80145c6 <ull_isr+0xea>
 8014702:	4620      	mov	r0, r4
 8014704:	f7ff fd8e 	bl	8014224 <ull_getframelength>
 8014708:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 801470c:	f43f af5b 	beq.w	80145c6 <ull_isr+0xea>
 8014710:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8014712:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8014716:	f043 0301 	orr.w	r3, r3, #1
 801471a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 801471e:	e752      	b.n	80145c6 <ull_isr+0xea>
 8014720:	6963      	ldr	r3, [r4, #20]
 8014722:	b10b      	cbz	r3, 8014728 <ull_isr+0x24c>
 8014724:	301c      	adds	r0, #28
 8014726:	4798      	blx	r3
 8014728:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801472a:	7bdb      	ldrb	r3, [r3, #15]
 801472c:	b953      	cbnz	r3, 8014744 <ull_isr+0x268>
 801472e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8014730:	2200      	movs	r2, #0
 8014732:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8014736:	f015 0f10 	tst.w	r5, #16
 801473a:	d107      	bne.n	801474c <ull_isr+0x270>
 801473c:	f015 0f20 	tst.w	r5, #32
 8014740:	d114      	bne.n	801476c <ull_isr+0x290>
 8014742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014744:	4620      	mov	r0, r4
 8014746:	f7ff fea1 	bl	801448c <ull_signal_rx_buff_free>
 801474a:	e7f0      	b.n	801472e <ull_isr+0x252>
 801474c:	4b10      	ldr	r3, [pc, #64]	; (8014790 <ull_isr+0x2b4>)
 801474e:	2200      	movs	r2, #0
 8014750:	2144      	movs	r1, #68	; 0x44
 8014752:	4620      	mov	r0, r4
 8014754:	f7ff feac 	bl	80144b0 <dwt_write32bitoffsetreg>
 8014758:	69e3      	ldr	r3, [r4, #28]
 801475a:	b113      	cbz	r3, 8014762 <ull_isr+0x286>
 801475c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801475e:	301c      	adds	r0, #28
 8014760:	4798      	blx	r3
 8014762:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8014764:	2200      	movs	r2, #0
 8014766:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 801476a:	e7e7      	b.n	801473c <ull_isr+0x260>
 801476c:	4b09      	ldr	r3, [pc, #36]	; (8014794 <ull_isr+0x2b8>)
 801476e:	2200      	movs	r2, #0
 8014770:	2144      	movs	r1, #68	; 0x44
 8014772:	4620      	mov	r0, r4
 8014774:	f7ff fe9c 	bl	80144b0 <dwt_write32bitoffsetreg>
 8014778:	69a3      	ldr	r3, [r4, #24]
 801477a:	b113      	cbz	r3, 8014782 <ull_isr+0x2a6>
 801477c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801477e:	301c      	adds	r0, #28
 8014780:	4798      	blx	r3
 8014782:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8014784:	2200      	movs	r2, #0
 8014786:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 801478a:	e7da      	b.n	8014742 <ull_isr+0x266>
 801478c:	00010024 	.word	0x00010024
 8014790:	34059400 	.word	0x34059400
 8014794:	10220400 	.word	0x10220400

08014798 <_dwt_adjust_delaytime>:
 8014798:	b538      	push	{r3, r4, r5, lr}
 801479a:	4604      	mov	r4, r0
 801479c:	b989      	cbnz	r1, 80147c2 <_dwt_adjust_delaytime+0x2a>
 801479e:	2200      	movs	r2, #0
 80147a0:	212c      	movs	r1, #44	; 0x2c
 80147a2:	f7ff f943 	bl	8013a2c <dwt_read32bitoffsetreg>
 80147a6:	4605      	mov	r5, r0
 80147a8:	2201      	movs	r2, #1
 80147aa:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 80147ae:	4620      	mov	r0, r4
 80147b0:	f7ff f964 	bl	8013a7c <dwt_read8bitoffsetreg>
 80147b4:	1a2b      	subs	r3, r5, r0
 80147b6:	2200      	movs	r2, #0
 80147b8:	212c      	movs	r1, #44	; 0x2c
 80147ba:	4620      	mov	r0, r4
 80147bc:	f7ff fe78 	bl	80144b0 <dwt_write32bitoffsetreg>
 80147c0:	bd38      	pop	{r3, r4, r5, pc}
 80147c2:	2200      	movs	r2, #0
 80147c4:	212c      	movs	r1, #44	; 0x2c
 80147c6:	f7ff f931 	bl	8013a2c <dwt_read32bitoffsetreg>
 80147ca:	4605      	mov	r5, r0
 80147cc:	2201      	movs	r2, #1
 80147ce:	4905      	ldr	r1, [pc, #20]	; (80147e4 <_dwt_adjust_delaytime+0x4c>)
 80147d0:	4620      	mov	r0, r4
 80147d2:	f7ff f953 	bl	8013a7c <dwt_read8bitoffsetreg>
 80147d6:	1a2b      	subs	r3, r5, r0
 80147d8:	2200      	movs	r2, #0
 80147da:	212c      	movs	r1, #44	; 0x2c
 80147dc:	4620      	mov	r0, r4
 80147de:	f7ff fe67 	bl	80144b0 <dwt_write32bitoffsetreg>
 80147e2:	e7ed      	b.n	80147c0 <_dwt_adjust_delaytime+0x28>
 80147e4:	00010004 	.word	0x00010004

080147e8 <ull_setrxaftertxdelay>:
 80147e8:	b570      	push	{r4, r5, r6, lr}
 80147ea:	4606      	mov	r6, r0
 80147ec:	460c      	mov	r4, r1
 80147ee:	4d08      	ldr	r5, [pc, #32]	; (8014810 <ull_setrxaftertxdelay+0x28>)
 80147f0:	2200      	movs	r2, #0
 80147f2:	4629      	mov	r1, r5
 80147f4:	f7ff f91a 	bl	8013a2c <dwt_read32bitoffsetreg>
 80147f8:	0d00      	lsrs	r0, r0, #20
 80147fa:	0500      	lsls	r0, r0, #20
 80147fc:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8014800:	4303      	orrs	r3, r0
 8014802:	2200      	movs	r2, #0
 8014804:	4629      	mov	r1, r5
 8014806:	4630      	mov	r0, r6
 8014808:	f7ff fe52 	bl	80144b0 <dwt_write32bitoffsetreg>
 801480c:	bd70      	pop	{r4, r5, r6, pc}
 801480e:	bf00      	nop
 8014810:	00010008 	.word	0x00010008

08014814 <ull_setlnapamode>:
 8014814:	b538      	push	{r3, r4, r5, lr}
 8014816:	4605      	mov	r5, r0
 8014818:	460c      	mov	r4, r1
 801481a:	2200      	movs	r2, #0
 801481c:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8014820:	f7ff f904 	bl	8013a2c <dwt_read32bitoffsetreg>
 8014824:	4b0b      	ldr	r3, [pc, #44]	; (8014854 <ull_setlnapamode+0x40>)
 8014826:	4003      	ands	r3, r0
 8014828:	f014 0f01 	tst.w	r4, #1
 801482c:	bf18      	it	ne
 801482e:	f443 2380 	orrne.w	r3, r3, #262144	; 0x40000
 8014832:	f014 0f02 	tst.w	r4, #2
 8014836:	bf18      	it	ne
 8014838:	f443 4310 	orrne.w	r3, r3, #36864	; 0x9000
 801483c:	f014 0f04 	tst.w	r4, #4
 8014840:	bf18      	it	ne
 8014842:	f043 0312 	orrne.w	r3, r3, #18
 8014846:	2200      	movs	r2, #0
 8014848:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801484c:	4628      	mov	r0, r5
 801484e:	f7ff fe2f 	bl	80144b0 <dwt_write32bitoffsetreg>
 8014852:	bd38      	pop	{r3, r4, r5, pc}
 8014854:	ffe00fc0 	.word	0xffe00fc0

08014858 <ull_configurestskey>:
 8014858:	b538      	push	{r3, r4, r5, lr}
 801485a:	4605      	mov	r5, r0
 801485c:	460c      	mov	r4, r1
 801485e:	680b      	ldr	r3, [r1, #0]
 8014860:	2200      	movs	r2, #0
 8014862:	490b      	ldr	r1, [pc, #44]	; (8014890 <ull_configurestskey+0x38>)
 8014864:	f7ff fe24 	bl	80144b0 <dwt_write32bitoffsetreg>
 8014868:	6863      	ldr	r3, [r4, #4]
 801486a:	2200      	movs	r2, #0
 801486c:	4909      	ldr	r1, [pc, #36]	; (8014894 <ull_configurestskey+0x3c>)
 801486e:	4628      	mov	r0, r5
 8014870:	f7ff fe1e 	bl	80144b0 <dwt_write32bitoffsetreg>
 8014874:	68a3      	ldr	r3, [r4, #8]
 8014876:	2200      	movs	r2, #0
 8014878:	4907      	ldr	r1, [pc, #28]	; (8014898 <ull_configurestskey+0x40>)
 801487a:	4628      	mov	r0, r5
 801487c:	f7ff fe18 	bl	80144b0 <dwt_write32bitoffsetreg>
 8014880:	68e3      	ldr	r3, [r4, #12]
 8014882:	2200      	movs	r2, #0
 8014884:	4905      	ldr	r1, [pc, #20]	; (801489c <ull_configurestskey+0x44>)
 8014886:	4628      	mov	r0, r5
 8014888:	f7ff fe12 	bl	80144b0 <dwt_write32bitoffsetreg>
 801488c:	bd38      	pop	{r3, r4, r5, pc}
 801488e:	bf00      	nop
 8014890:	0002000c 	.word	0x0002000c
 8014894:	00020010 	.word	0x00020010
 8014898:	00020014 	.word	0x00020014
 801489c:	00020018 	.word	0x00020018

080148a0 <ull_configurestsiv>:
 80148a0:	b538      	push	{r3, r4, r5, lr}
 80148a2:	4605      	mov	r5, r0
 80148a4:	460c      	mov	r4, r1
 80148a6:	680b      	ldr	r3, [r1, #0]
 80148a8:	2200      	movs	r2, #0
 80148aa:	490b      	ldr	r1, [pc, #44]	; (80148d8 <ull_configurestsiv+0x38>)
 80148ac:	f7ff fe00 	bl	80144b0 <dwt_write32bitoffsetreg>
 80148b0:	6863      	ldr	r3, [r4, #4]
 80148b2:	2200      	movs	r2, #0
 80148b4:	4909      	ldr	r1, [pc, #36]	; (80148dc <ull_configurestsiv+0x3c>)
 80148b6:	4628      	mov	r0, r5
 80148b8:	f7ff fdfa 	bl	80144b0 <dwt_write32bitoffsetreg>
 80148bc:	68a3      	ldr	r3, [r4, #8]
 80148be:	2200      	movs	r2, #0
 80148c0:	4907      	ldr	r1, [pc, #28]	; (80148e0 <ull_configurestsiv+0x40>)
 80148c2:	4628      	mov	r0, r5
 80148c4:	f7ff fdf4 	bl	80144b0 <dwt_write32bitoffsetreg>
 80148c8:	68e3      	ldr	r3, [r4, #12]
 80148ca:	2200      	movs	r2, #0
 80148cc:	4905      	ldr	r1, [pc, #20]	; (80148e4 <ull_configurestsiv+0x44>)
 80148ce:	4628      	mov	r0, r5
 80148d0:	f7ff fdee 	bl	80144b0 <dwt_write32bitoffsetreg>
 80148d4:	bd38      	pop	{r3, r4, r5, pc}
 80148d6:	bf00      	nop
 80148d8:	0002001c 	.word	0x0002001c
 80148dc:	00020020 	.word	0x00020020
 80148e0:	00020024 	.word	0x00020024
 80148e4:	00020028 	.word	0x00020028

080148e8 <ull_configmrxlut>:
 80148e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80148ec:	4604      	mov	r4, r0
 80148ee:	2905      	cmp	r1, #5
 80148f0:	d040      	beq.n	8014974 <ull_configmrxlut+0x8c>
 80148f2:	4d26      	ldr	r5, [pc, #152]	; (801498c <ull_configmrxlut+0xa4>)
 80148f4:	462e      	mov	r6, r5
 80148f6:	4f26      	ldr	r7, [pc, #152]	; (8014990 <ull_configmrxlut+0xa8>)
 80148f8:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 80149d4 <ull_configmrxlut+0xec>
 80148fc:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 80149d8 <ull_configmrxlut+0xf0>
 8014900:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80149dc <ull_configmrxlut+0xf4>
 8014904:	4b23      	ldr	r3, [pc, #140]	; (8014994 <ull_configmrxlut+0xac>)
 8014906:	2200      	movs	r2, #0
 8014908:	4923      	ldr	r1, [pc, #140]	; (8014998 <ull_configmrxlut+0xb0>)
 801490a:	4620      	mov	r0, r4
 801490c:	f7ff fdd0 	bl	80144b0 <dwt_write32bitoffsetreg>
 8014910:	4653      	mov	r3, sl
 8014912:	2200      	movs	r2, #0
 8014914:	4921      	ldr	r1, [pc, #132]	; (801499c <ull_configmrxlut+0xb4>)
 8014916:	4620      	mov	r0, r4
 8014918:	f7ff fdca 	bl	80144b0 <dwt_write32bitoffsetreg>
 801491c:	464b      	mov	r3, r9
 801491e:	2200      	movs	r2, #0
 8014920:	491f      	ldr	r1, [pc, #124]	; (80149a0 <ull_configmrxlut+0xb8>)
 8014922:	4620      	mov	r0, r4
 8014924:	f7ff fdc4 	bl	80144b0 <dwt_write32bitoffsetreg>
 8014928:	4643      	mov	r3, r8
 801492a:	2200      	movs	r2, #0
 801492c:	491d      	ldr	r1, [pc, #116]	; (80149a4 <ull_configmrxlut+0xbc>)
 801492e:	4620      	mov	r0, r4
 8014930:	f7ff fdbe 	bl	80144b0 <dwt_write32bitoffsetreg>
 8014934:	463b      	mov	r3, r7
 8014936:	2200      	movs	r2, #0
 8014938:	491b      	ldr	r1, [pc, #108]	; (80149a8 <ull_configmrxlut+0xc0>)
 801493a:	4620      	mov	r0, r4
 801493c:	f7ff fdb8 	bl	80144b0 <dwt_write32bitoffsetreg>
 8014940:	4633      	mov	r3, r6
 8014942:	2200      	movs	r2, #0
 8014944:	4919      	ldr	r1, [pc, #100]	; (80149ac <ull_configmrxlut+0xc4>)
 8014946:	4620      	mov	r0, r4
 8014948:	f7ff fdb2 	bl	80144b0 <dwt_write32bitoffsetreg>
 801494c:	462b      	mov	r3, r5
 801494e:	2200      	movs	r2, #0
 8014950:	4917      	ldr	r1, [pc, #92]	; (80149b0 <ull_configmrxlut+0xc8>)
 8014952:	4620      	mov	r0, r4
 8014954:	f7ff fdac 	bl	80144b0 <dwt_write32bitoffsetreg>
 8014958:	4b16      	ldr	r3, [pc, #88]	; (80149b4 <ull_configmrxlut+0xcc>)
 801495a:	2200      	movs	r2, #0
 801495c:	4916      	ldr	r1, [pc, #88]	; (80149b8 <ull_configmrxlut+0xd0>)
 801495e:	4620      	mov	r0, r4
 8014960:	f7ff fda6 	bl	80144b0 <dwt_write32bitoffsetreg>
 8014964:	4b15      	ldr	r3, [pc, #84]	; (80149bc <ull_configmrxlut+0xd4>)
 8014966:	2200      	movs	r2, #0
 8014968:	4915      	ldr	r1, [pc, #84]	; (80149c0 <ull_configmrxlut+0xd8>)
 801496a:	4620      	mov	r0, r4
 801496c:	f7ff fda0 	bl	80144b0 <dwt_write32bitoffsetreg>
 8014970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014974:	4d13      	ldr	r5, [pc, #76]	; (80149c4 <ull_configmrxlut+0xdc>)
 8014976:	4e14      	ldr	r6, [pc, #80]	; (80149c8 <ull_configmrxlut+0xe0>)
 8014978:	4f14      	ldr	r7, [pc, #80]	; (80149cc <ull_configmrxlut+0xe4>)
 801497a:	f8df 8064 	ldr.w	r8, [pc, #100]	; 80149e0 <ull_configmrxlut+0xf8>
 801497e:	f8df 9064 	ldr.w	r9, [pc, #100]	; 80149e4 <ull_configmrxlut+0xfc>
 8014982:	f8df a064 	ldr.w	sl, [pc, #100]	; 80149e8 <ull_configmrxlut+0x100>
 8014986:	4b12      	ldr	r3, [pc, #72]	; (80149d0 <ull_configmrxlut+0xe8>)
 8014988:	e7bd      	b.n	8014906 <ull_configmrxlut+0x1e>
 801498a:	bf00      	nop
 801498c:	0002afb5 	.word	0x0002afb5
 8014990:	0002af7d 	.word	0x0002af7d
 8014994:	0002a8fe 	.word	0x0002a8fe
 8014998:	00030038 	.word	0x00030038
 801499c:	0003003c 	.word	0x0003003c
 80149a0:	00030040 	.word	0x00030040
 80149a4:	00030044 	.word	0x00030044
 80149a8:	00030048 	.word	0x00030048
 80149ac:	0003004c 	.word	0x0003004c
 80149b0:	00030050 	.word	0x00030050
 80149b4:	10000240 	.word	0x10000240
 80149b8:	0003001c 	.word	0x0003001c
 80149bc:	1b6da489 	.word	0x1b6da489
 80149c0:	00030020 	.word	0x00030020
 80149c4:	0001cff5 	.word	0x0001cff5
 80149c8:	0001cfb5 	.word	0x0001cfb5
 80149cc:	0001cf36 	.word	0x0001cf36
 80149d0:	0001c0fd 	.word	0x0001c0fd
 80149d4:	0002af3e 	.word	0x0002af3e
 80149d8:	0002a5fe 	.word	0x0002a5fe
 80149dc:	0002ac36 	.word	0x0002ac36
 80149e0:	0001c77e 	.word	0x0001c77e
 80149e4:	0001c6be 	.word	0x0001c6be
 80149e8:	0001c43e 	.word	0x0001c43e

080149ec <ull_disable_rftx_blocks>:
 80149ec:	b508      	push	{r3, lr}
 80149ee:	2300      	movs	r3, #0
 80149f0:	461a      	mov	r2, r3
 80149f2:	4902      	ldr	r1, [pc, #8]	; (80149fc <ull_disable_rftx_blocks+0x10>)
 80149f4:	f7ff fd5c 	bl	80144b0 <dwt_write32bitoffsetreg>
 80149f8:	bd08      	pop	{r3, pc}
 80149fa:	bf00      	nop
 80149fc:	00070004 	.word	0x00070004

08014a00 <ull_disable_rf_tx>:
 8014a00:	b538      	push	{r3, r4, r5, lr}
 8014a02:	4604      	mov	r4, r0
 8014a04:	460d      	mov	r5, r1
 8014a06:	2300      	movs	r3, #0
 8014a08:	461a      	mov	r2, r3
 8014a0a:	490a      	ldr	r1, [pc, #40]	; (8014a34 <ull_disable_rf_tx+0x34>)
 8014a0c:	f7ff fd50 	bl	80144b0 <dwt_write32bitoffsetreg>
 8014a10:	2300      	movs	r3, #0
 8014a12:	461a      	mov	r2, r3
 8014a14:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 8014a18:	4620      	mov	r0, r4
 8014a1a:	f7ff fd49 	bl	80144b0 <dwt_write32bitoffsetreg>
 8014a1e:	b905      	cbnz	r5, 8014a22 <ull_disable_rf_tx+0x22>
 8014a20:	bd38      	pop	{r3, r4, r5, pc}
 8014a22:	f04f 53e0 	mov.w	r3, #469762048	; 0x1c000000
 8014a26:	2200      	movs	r2, #0
 8014a28:	4903      	ldr	r1, [pc, #12]	; (8014a38 <ull_disable_rf_tx+0x38>)
 8014a2a:	4620      	mov	r0, r4
 8014a2c:	f7ff fd40 	bl	80144b0 <dwt_write32bitoffsetreg>
 8014a30:	e7f6      	b.n	8014a20 <ull_disable_rf_tx+0x20>
 8014a32:	bf00      	nop
 8014a34:	00070048 	.word	0x00070048
 8014a38:	00070014 	.word	0x00070014

08014a3c <ull_readrxdata>:
 8014a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014a3e:	b083      	sub	sp, #12
 8014a40:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8014a42:	7be4      	ldrb	r4, [r4, #15]
 8014a44:	2c03      	cmp	r4, #3
 8014a46:	bf0c      	ite	eq
 8014a48:	f44f 1c98 	moveq.w	ip, #1245184	; 0x130000
 8014a4c:	f44f 1c90 	movne.w	ip, #1179648	; 0x120000
 8014a50:	189c      	adds	r4, r3, r2
 8014a52:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8014a56:	da19      	bge.n	8014a8c <ull_readrxdata+0x50>
 8014a58:	461d      	mov	r5, r3
 8014a5a:	4616      	mov	r6, r2
 8014a5c:	460f      	mov	r7, r1
 8014a5e:	4604      	mov	r4, r0
 8014a60:	2b7f      	cmp	r3, #127	; 0x7f
 8014a62:	d915      	bls.n	8014a90 <ull_readrxdata+0x54>
 8014a64:	ea4f 431c 	mov.w	r3, ip, lsr #16
 8014a68:	2200      	movs	r2, #0
 8014a6a:	490d      	ldr	r1, [pc, #52]	; (8014aa0 <ull_readrxdata+0x64>)
 8014a6c:	f7ff fd20 	bl	80144b0 <dwt_write32bitoffsetreg>
 8014a70:	462b      	mov	r3, r5
 8014a72:	2200      	movs	r2, #0
 8014a74:	490b      	ldr	r1, [pc, #44]	; (8014aa4 <ull_readrxdata+0x68>)
 8014a76:	4620      	mov	r0, r4
 8014a78:	f7ff fd1a 	bl	80144b0 <dwt_write32bitoffsetreg>
 8014a7c:	9700      	str	r7, [sp, #0]
 8014a7e:	4633      	mov	r3, r6
 8014a80:	2200      	movs	r2, #0
 8014a82:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 8014a86:	4620      	mov	r0, r4
 8014a88:	f7fe ffc6 	bl	8013a18 <dwt_readfromdevice>
 8014a8c:	b003      	add	sp, #12
 8014a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a90:	9100      	str	r1, [sp, #0]
 8014a92:	4613      	mov	r3, r2
 8014a94:	462a      	mov	r2, r5
 8014a96:	4661      	mov	r1, ip
 8014a98:	f7fe ffbe 	bl	8013a18 <dwt_readfromdevice>
 8014a9c:	e7f6      	b.n	8014a8c <ull_readrxdata+0x50>
 8014a9e:	bf00      	nop
 8014aa0:	001f0004 	.word	0x001f0004
 8014aa4:	001f0008 	.word	0x001f0008

08014aa8 <ull_rxenable>:
 8014aa8:	b530      	push	{r4, r5, lr}
 8014aaa:	b083      	sub	sp, #12
 8014aac:	4605      	mov	r5, r0
 8014aae:	460c      	mov	r4, r1
 8014ab0:	b171      	cbz	r1, 8014ad0 <ull_rxenable+0x28>
 8014ab2:	f021 0302 	bic.w	r3, r1, #2
 8014ab6:	3b01      	subs	r3, #1
 8014ab8:	2b0f      	cmp	r3, #15
 8014aba:	d856      	bhi.n	8014b6a <ull_rxenable+0xc2>
 8014abc:	e8df f003 	tbb	[pc, r3]
 8014ac0:	21555510 	.word	0x21555510
 8014ac4:	28555555 	.word	0x28555555
 8014ac8:	55555555 	.word	0x55555555
 8014acc:	33555555 	.word	0x33555555
 8014ad0:	2200      	movs	r2, #0
 8014ad2:	9200      	str	r2, [sp, #0]
 8014ad4:	4613      	mov	r3, r2
 8014ad6:	2102      	movs	r1, #2
 8014ad8:	f7ff fb8c 	bl	80141f4 <dwt_writetodevice>
 8014adc:	4620      	mov	r0, r4
 8014ade:	e00e      	b.n	8014afe <ull_rxenable+0x56>
 8014ae0:	2200      	movs	r2, #0
 8014ae2:	9200      	str	r2, [sp, #0]
 8014ae4:	4613      	mov	r3, r2
 8014ae6:	2104      	movs	r1, #4
 8014ae8:	f7ff fb84 	bl	80141f4 <dwt_writetodevice>
 8014aec:	2203      	movs	r2, #3
 8014aee:	2144      	movs	r1, #68	; 0x44
 8014af0:	4628      	mov	r0, r5
 8014af2:	f7fe ffc3 	bl	8013a7c <dwt_read8bitoffsetreg>
 8014af6:	f010 0f08 	tst.w	r0, #8
 8014afa:	d11f      	bne.n	8014b3c <ull_rxenable+0x94>
 8014afc:	2000      	movs	r0, #0
 8014afe:	b003      	add	sp, #12
 8014b00:	bd30      	pop	{r4, r5, pc}
 8014b02:	2200      	movs	r2, #0
 8014b04:	9200      	str	r2, [sp, #0]
 8014b06:	4613      	mov	r3, r2
 8014b08:	210a      	movs	r1, #10
 8014b0a:	f7ff fb73 	bl	80141f4 <dwt_writetodevice>
 8014b0e:	e7ed      	b.n	8014aec <ull_rxenable+0x44>
 8014b10:	2100      	movs	r1, #0
 8014b12:	f7ff fe41 	bl	8014798 <_dwt_adjust_delaytime>
 8014b16:	2200      	movs	r2, #0
 8014b18:	9200      	str	r2, [sp, #0]
 8014b1a:	4613      	mov	r3, r2
 8014b1c:	2108      	movs	r1, #8
 8014b1e:	4628      	mov	r0, r5
 8014b20:	f7ff fb68 	bl	80141f4 <dwt_writetodevice>
 8014b24:	e7e2      	b.n	8014aec <ull_rxenable+0x44>
 8014b26:	2101      	movs	r1, #1
 8014b28:	f7ff fe36 	bl	8014798 <_dwt_adjust_delaytime>
 8014b2c:	2200      	movs	r2, #0
 8014b2e:	9200      	str	r2, [sp, #0]
 8014b30:	4613      	mov	r3, r2
 8014b32:	2106      	movs	r1, #6
 8014b34:	4628      	mov	r0, r5
 8014b36:	f7ff fb5d 	bl	80141f4 <dwt_writetodevice>
 8014b3a:	e7d7      	b.n	8014aec <ull_rxenable+0x44>
 8014b3c:	2100      	movs	r1, #0
 8014b3e:	9100      	str	r1, [sp, #0]
 8014b40:	460b      	mov	r3, r1
 8014b42:	460a      	mov	r2, r1
 8014b44:	4628      	mov	r0, r5
 8014b46:	f7ff fb55 	bl	80141f4 <dwt_writetodevice>
 8014b4a:	f014 0f02 	tst.w	r4, #2
 8014b4e:	d002      	beq.n	8014b56 <ull_rxenable+0xae>
 8014b50:	f04f 30ff 	mov.w	r0, #4294967295
 8014b54:	e7d3      	b.n	8014afe <ull_rxenable+0x56>
 8014b56:	2200      	movs	r2, #0
 8014b58:	9200      	str	r2, [sp, #0]
 8014b5a:	4613      	mov	r3, r2
 8014b5c:	2102      	movs	r1, #2
 8014b5e:	4628      	mov	r0, r5
 8014b60:	f7ff fb48 	bl	80141f4 <dwt_writetodevice>
 8014b64:	f04f 30ff 	mov.w	r0, #4294967295
 8014b68:	e7c9      	b.n	8014afe <ull_rxenable+0x56>
 8014b6a:	f04f 30ff 	mov.w	r0, #4294967295
 8014b6e:	e7c6      	b.n	8014afe <ull_rxenable+0x56>

08014b70 <ull_writetxdata>:
 8014b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014b72:	b083      	sub	sp, #12
 8014b74:	185c      	adds	r4, r3, r1
 8014b76:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8014b7a:	da24      	bge.n	8014bc6 <ull_writetxdata+0x56>
 8014b7c:	461c      	mov	r4, r3
 8014b7e:	4617      	mov	r7, r2
 8014b80:	460e      	mov	r6, r1
 8014b82:	4605      	mov	r5, r0
 8014b84:	2b7f      	cmp	r3, #127	; 0x7f
 8014b86:	d915      	bls.n	8014bb4 <ull_writetxdata+0x44>
 8014b88:	2314      	movs	r3, #20
 8014b8a:	2200      	movs	r2, #0
 8014b8c:	490f      	ldr	r1, [pc, #60]	; (8014bcc <ull_writetxdata+0x5c>)
 8014b8e:	f7ff fc8f 	bl	80144b0 <dwt_write32bitoffsetreg>
 8014b92:	4623      	mov	r3, r4
 8014b94:	2200      	movs	r2, #0
 8014b96:	490e      	ldr	r1, [pc, #56]	; (8014bd0 <ull_writetxdata+0x60>)
 8014b98:	4628      	mov	r0, r5
 8014b9a:	f7ff fc89 	bl	80144b0 <dwt_write32bitoffsetreg>
 8014b9e:	9700      	str	r7, [sp, #0]
 8014ba0:	4633      	mov	r3, r6
 8014ba2:	2200      	movs	r2, #0
 8014ba4:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 8014ba8:	4628      	mov	r0, r5
 8014baa:	f7ff fb23 	bl	80141f4 <dwt_writetodevice>
 8014bae:	2000      	movs	r0, #0
 8014bb0:	b003      	add	sp, #12
 8014bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014bb4:	9200      	str	r2, [sp, #0]
 8014bb6:	460b      	mov	r3, r1
 8014bb8:	4622      	mov	r2, r4
 8014bba:	f44f 11a0 	mov.w	r1, #1310720	; 0x140000
 8014bbe:	f7ff fb19 	bl	80141f4 <dwt_writetodevice>
 8014bc2:	2000      	movs	r0, #0
 8014bc4:	e7f4      	b.n	8014bb0 <ull_writetxdata+0x40>
 8014bc6:	f04f 30ff 	mov.w	r0, #4294967295
 8014bca:	e7f1      	b.n	8014bb0 <ull_writetxdata+0x40>
 8014bcc:	001f0004 	.word	0x001f0004
 8014bd0:	001f0008 	.word	0x001f0008

08014bd4 <dwt_modify32bitoffsetreg>:
 8014bd4:	b530      	push	{r4, r5, lr}
 8014bd6:	b085      	sub	sp, #20
 8014bd8:	9c08      	ldr	r4, [sp, #32]
 8014bda:	f88d 3008 	strb.w	r3, [sp, #8]
 8014bde:	0a1d      	lsrs	r5, r3, #8
 8014be0:	f88d 5009 	strb.w	r5, [sp, #9]
 8014be4:	0c1d      	lsrs	r5, r3, #16
 8014be6:	f88d 500a 	strb.w	r5, [sp, #10]
 8014bea:	0e1b      	lsrs	r3, r3, #24
 8014bec:	f88d 300b 	strb.w	r3, [sp, #11]
 8014bf0:	f88d 400c 	strb.w	r4, [sp, #12]
 8014bf4:	0a23      	lsrs	r3, r4, #8
 8014bf6:	f88d 300d 	strb.w	r3, [sp, #13]
 8014bfa:	0c23      	lsrs	r3, r4, #16
 8014bfc:	f88d 300e 	strb.w	r3, [sp, #14]
 8014c00:	0e24      	lsrs	r4, r4, #24
 8014c02:	f88d 400f 	strb.w	r4, [sp, #15]
 8014c06:	f248 0303 	movw	r3, #32771	; 0x8003
 8014c0a:	9301      	str	r3, [sp, #4]
 8014c0c:	ab02      	add	r3, sp, #8
 8014c0e:	9300      	str	r3, [sp, #0]
 8014c10:	2308      	movs	r3, #8
 8014c12:	b292      	uxth	r2, r2
 8014c14:	f7fe fe7d 	bl	8013912 <dwt_xfer3xxx>
 8014c18:	b005      	add	sp, #20
 8014c1a:	bd30      	pop	{r4, r5, pc}

08014c1c <_dwt_kick_dgc_on_wakeup>:
 8014c1c:	b500      	push	{lr}
 8014c1e:	b083      	sub	sp, #12
 8014c20:	2905      	cmp	r1, #5
 8014c22:	d004      	beq.n	8014c2e <_dwt_kick_dgc_on_wakeup+0x12>
 8014c24:	2909      	cmp	r1, #9
 8014c26:	d00b      	beq.n	8014c40 <_dwt_kick_dgc_on_wakeup+0x24>
 8014c28:	b003      	add	sp, #12
 8014c2a:	f85d fb04 	ldr.w	pc, [sp], #4
 8014c2e:	2340      	movs	r3, #64	; 0x40
 8014c30:	9300      	str	r3, [sp, #0]
 8014c32:	f46f 5300 	mvn.w	r3, #8192	; 0x2000
 8014c36:	2200      	movs	r2, #0
 8014c38:	4906      	ldr	r1, [pc, #24]	; (8014c54 <_dwt_kick_dgc_on_wakeup+0x38>)
 8014c3a:	f7ff ffcb 	bl	8014bd4 <dwt_modify32bitoffsetreg>
 8014c3e:	e7f3      	b.n	8014c28 <_dwt_kick_dgc_on_wakeup+0xc>
 8014c40:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8014c44:	9300      	str	r3, [sp, #0]
 8014c46:	f46f 5300 	mvn.w	r3, #8192	; 0x2000
 8014c4a:	2200      	movs	r2, #0
 8014c4c:	4901      	ldr	r1, [pc, #4]	; (8014c54 <_dwt_kick_dgc_on_wakeup+0x38>)
 8014c4e:	f7ff ffc1 	bl	8014bd4 <dwt_modify32bitoffsetreg>
 8014c52:	e7e9      	b.n	8014c28 <_dwt_kick_dgc_on_wakeup+0xc>
 8014c54:	000b0008 	.word	0x000b0008

08014c58 <ull_enable_rf_tx>:
 8014c58:	b570      	push	{r4, r5, r6, lr}
 8014c5a:	b082      	sub	sp, #8
 8014c5c:	4604      	mov	r4, r0
 8014c5e:	460e      	mov	r6, r1
 8014c60:	4d13      	ldr	r5, [pc, #76]	; (8014cb0 <ull_enable_rf_tx+0x58>)
 8014c62:	f04f 2308 	mov.w	r3, #134219776	; 0x8000800
 8014c66:	9300      	str	r3, [sp, #0]
 8014c68:	f04f 33ff 	mov.w	r3, #4294967295
 8014c6c:	2200      	movs	r2, #0
 8014c6e:	4629      	mov	r1, r5
 8014c70:	f7ff ffb0 	bl	8014bd4 <dwt_modify32bitoffsetreg>
 8014c74:	f04f 1360 	mov.w	r3, #6291552	; 0x600060
 8014c78:	9300      	str	r3, [sp, #0]
 8014c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8014c7e:	2200      	movs	r2, #0
 8014c80:	4629      	mov	r1, r5
 8014c82:	4620      	mov	r0, r4
 8014c84:	f7ff ffa6 	bl	8014bd4 <dwt_modify32bitoffsetreg>
 8014c88:	4b0a      	ldr	r3, [pc, #40]	; (8014cb4 <ull_enable_rf_tx+0x5c>)
 8014c8a:	9300      	str	r3, [sp, #0]
 8014c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8014c90:	2200      	movs	r2, #0
 8014c92:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 8014c96:	4620      	mov	r0, r4
 8014c98:	f7ff ff9c 	bl	8014bd4 <dwt_modify32bitoffsetreg>
 8014c9c:	b90e      	cbnz	r6, 8014ca2 <ull_enable_rf_tx+0x4a>
 8014c9e:	b002      	add	sp, #8
 8014ca0:	bd70      	pop	{r4, r5, r6, pc}
 8014ca2:	4b05      	ldr	r3, [pc, #20]	; (8014cb8 <ull_enable_rf_tx+0x60>)
 8014ca4:	2200      	movs	r2, #0
 8014ca6:	4905      	ldr	r1, [pc, #20]	; (8014cbc <ull_enable_rf_tx+0x64>)
 8014ca8:	4620      	mov	r0, r4
 8014caa:	f7ff fc01 	bl	80144b0 <dwt_write32bitoffsetreg>
 8014cae:	e7f6      	b.n	8014c9e <ull_enable_rf_tx+0x46>
 8014cb0:	00070048 	.word	0x00070048
 8014cb4:	02003c00 	.word	0x02003c00
 8014cb8:	01011100 	.word	0x01011100
 8014cbc:	00070014 	.word	0x00070014

08014cc0 <ull_enable_rftx_blocks>:
 8014cc0:	b500      	push	{lr}
 8014cc2:	b083      	sub	sp, #12
 8014cc4:	4b05      	ldr	r3, [pc, #20]	; (8014cdc <ull_enable_rftx_blocks+0x1c>)
 8014cc6:	9300      	str	r3, [sp, #0]
 8014cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8014ccc:	2200      	movs	r2, #0
 8014cce:	4904      	ldr	r1, [pc, #16]	; (8014ce0 <ull_enable_rftx_blocks+0x20>)
 8014cd0:	f7ff ff80 	bl	8014bd4 <dwt_modify32bitoffsetreg>
 8014cd4:	b003      	add	sp, #12
 8014cd6:	f85d fb04 	ldr.w	pc, [sp], #4
 8014cda:	bf00      	nop
 8014cdc:	02003c00 	.word	0x02003c00
 8014ce0:	00070004 	.word	0x00070004

08014ce4 <_dwt_otpprogword32>:
 8014ce4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014ce8:	b083      	sub	sp, #12
 8014cea:	4604      	mov	r4, r0
 8014cec:	460d      	mov	r5, r1
 8014cee:	4617      	mov	r7, r2
 8014cf0:	4e56      	ldr	r6, [pc, #344]	; (8014e4c <_dwt_otpprogword32+0x168>)
 8014cf2:	2200      	movs	r2, #0
 8014cf4:	4631      	mov	r1, r6
 8014cf6:	f7fe fe99 	bl	8013a2c <dwt_read32bitoffsetreg>
 8014cfa:	4681      	mov	r9, r0
 8014cfc:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8014d00:	9300      	str	r3, [sp, #0]
 8014d02:	f04f 33ff 	mov.w	r3, #4294967295
 8014d06:	2200      	movs	r2, #0
 8014d08:	4631      	mov	r1, r6
 8014d0a:	4620      	mov	r0, r4
 8014d0c:	f7ff ff62 	bl	8014bd4 <dwt_modify32bitoffsetreg>
 8014d10:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8014e50 <_dwt_otpprogword32+0x16c>
 8014d14:	2318      	movs	r3, #24
 8014d16:	2200      	movs	r2, #0
 8014d18:	4641      	mov	r1, r8
 8014d1a:	4620      	mov	r0, r4
 8014d1c:	f7ff fac7 	bl	80142ae <dwt_write16bitoffsetreg>
 8014d20:	2125      	movs	r1, #37	; 0x25
 8014d22:	4620      	mov	r0, r4
 8014d24:	f7ff fb0a 	bl	801433c <__dwt_otp_write_wdata_id_reg>
 8014d28:	2102      	movs	r1, #2
 8014d2a:	4620      	mov	r0, r4
 8014d2c:	f7ff fb06 	bl	801433c <__dwt_otp_write_wdata_id_reg>
 8014d30:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
 8014d34:	4620      	mov	r0, r4
 8014d36:	f7ff fb01 	bl	801433c <__dwt_otp_write_wdata_id_reg>
 8014d3a:	b2f9      	uxtb	r1, r7
 8014d3c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8014d40:	4620      	mov	r0, r4
 8014d42:	f7ff fafb 	bl	801433c <__dwt_otp_write_wdata_id_reg>
 8014d46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8014d4a:	4620      	mov	r0, r4
 8014d4c:	f7ff faf6 	bl	801433c <__dwt_otp_write_wdata_id_reg>
 8014d50:	2100      	movs	r1, #0
 8014d52:	4620      	mov	r0, r4
 8014d54:	f7ff faf2 	bl	801433c <__dwt_otp_write_wdata_id_reg>
 8014d58:	2102      	movs	r1, #2
 8014d5a:	4620      	mov	r0, r4
 8014d5c:	f7ff faee 	bl	801433c <__dwt_otp_write_wdata_id_reg>
 8014d60:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8014d64:	4620      	mov	r0, r4
 8014d66:	f7ff fae9 	bl	801433c <__dwt_otp_write_wdata_id_reg>
 8014d6a:	b2e9      	uxtb	r1, r5
 8014d6c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8014d70:	4620      	mov	r0, r4
 8014d72:	f7ff fae3 	bl	801433c <__dwt_otp_write_wdata_id_reg>
 8014d76:	f3c5 2107 	ubfx	r1, r5, #8, #8
 8014d7a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8014d7e:	4620      	mov	r0, r4
 8014d80:	f7ff fadc 	bl	801433c <__dwt_otp_write_wdata_id_reg>
 8014d84:	f3c5 4107 	ubfx	r1, r5, #16, #8
 8014d88:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8014d8c:	4620      	mov	r0, r4
 8014d8e:	f7ff fad5 	bl	801433c <__dwt_otp_write_wdata_id_reg>
 8014d92:	0e29      	lsrs	r1, r5, #24
 8014d94:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8014d98:	4620      	mov	r0, r4
 8014d9a:	f7ff facf 	bl	801433c <__dwt_otp_write_wdata_id_reg>
 8014d9e:	2100      	movs	r1, #0
 8014da0:	4620      	mov	r0, r4
 8014da2:	f7ff facb 	bl	801433c <__dwt_otp_write_wdata_id_reg>
 8014da6:	213a      	movs	r1, #58	; 0x3a
 8014da8:	4620      	mov	r0, r4
 8014daa:	f7ff fac7 	bl	801433c <__dwt_otp_write_wdata_id_reg>
 8014dae:	f240 11ff 	movw	r1, #511	; 0x1ff
 8014db2:	4620      	mov	r0, r4
 8014db4:	f7ff fac2 	bl	801433c <__dwt_otp_write_wdata_id_reg>
 8014db8:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8014dbc:	4620      	mov	r0, r4
 8014dbe:	f7ff fabd 	bl	801433c <__dwt_otp_write_wdata_id_reg>
 8014dc2:	2100      	movs	r1, #0
 8014dc4:	4620      	mov	r0, r4
 8014dc6:	f7ff fab9 	bl	801433c <__dwt_otp_write_wdata_id_reg>
 8014dca:	213a      	movs	r1, #58	; 0x3a
 8014dcc:	4620      	mov	r0, r4
 8014dce:	f7ff fab5 	bl	801433c <__dwt_otp_write_wdata_id_reg>
 8014dd2:	f240 1101 	movw	r1, #257	; 0x101
 8014dd6:	4620      	mov	r0, r4
 8014dd8:	f7ff fab0 	bl	801433c <__dwt_otp_write_wdata_id_reg>
 8014ddc:	2302      	movs	r3, #2
 8014dde:	2200      	movs	r2, #0
 8014de0:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8014de4:	4620      	mov	r0, r4
 8014de6:	f7ff fa62 	bl	80142ae <dwt_write16bitoffsetreg>
 8014dea:	2300      	movs	r3, #0
 8014dec:	461a      	mov	r2, r3
 8014dee:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8014df2:	4620      	mov	r0, r4
 8014df4:	f7ff fa5b 	bl	80142ae <dwt_write16bitoffsetreg>
 8014df8:	2002      	movs	r0, #2
 8014dfa:	f7eb febb 	bl	8000b74 <deca_sleep>
 8014dfe:	213a      	movs	r1, #58	; 0x3a
 8014e00:	4620      	mov	r0, r4
 8014e02:	f7ff fa9b 	bl	801433c <__dwt_otp_write_wdata_id_reg>
 8014e06:	f44f 7181 	mov.w	r1, #258	; 0x102
 8014e0a:	4620      	mov	r0, r4
 8014e0c:	f7ff fa96 	bl	801433c <__dwt_otp_write_wdata_id_reg>
 8014e10:	2302      	movs	r3, #2
 8014e12:	2200      	movs	r2, #0
 8014e14:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8014e18:	4620      	mov	r0, r4
 8014e1a:	f7ff fa48 	bl	80142ae <dwt_write16bitoffsetreg>
 8014e1e:	2300      	movs	r3, #0
 8014e20:	461a      	mov	r2, r3
 8014e22:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8014e26:	4620      	mov	r0, r4
 8014e28:	f7ff fa41 	bl	80142ae <dwt_write16bitoffsetreg>
 8014e2c:	2300      	movs	r3, #0
 8014e2e:	461a      	mov	r2, r3
 8014e30:	4641      	mov	r1, r8
 8014e32:	4620      	mov	r0, r4
 8014e34:	f7ff fa3b 	bl	80142ae <dwt_write16bitoffsetreg>
 8014e38:	464b      	mov	r3, r9
 8014e3a:	2200      	movs	r2, #0
 8014e3c:	4631      	mov	r1, r6
 8014e3e:	4620      	mov	r0, r4
 8014e40:	f7ff fb36 	bl	80144b0 <dwt_write32bitoffsetreg>
 8014e44:	b003      	add	sp, #12
 8014e46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014e4a:	bf00      	nop
 8014e4c:	00070044 	.word	0x00070044
 8014e50:	000b0008 	.word	0x000b0008

08014e54 <ull_setgpiomode>:
 8014e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014e56:	b083      	sub	sp, #12
 8014e58:	2400      	movs	r4, #0
 8014e5a:	4623      	mov	r3, r4
 8014e5c:	2601      	movs	r6, #1
 8014e5e:	2707      	movs	r7, #7
 8014e60:	e002      	b.n	8014e68 <ull_setgpiomode+0x14>
 8014e62:	3401      	adds	r4, #1
 8014e64:	2c09      	cmp	r4, #9
 8014e66:	d009      	beq.n	8014e7c <ull_setgpiomode+0x28>
 8014e68:	fa06 f504 	lsl.w	r5, r6, r4
 8014e6c:	420d      	tst	r5, r1
 8014e6e:	d0f8      	beq.n	8014e62 <ull_setgpiomode+0xe>
 8014e70:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8014e74:	fa07 f505 	lsl.w	r5, r7, r5
 8014e78:	432b      	orrs	r3, r5
 8014e7a:	e7f2      	b.n	8014e62 <ull_setgpiomode+0xe>
 8014e7c:	401a      	ands	r2, r3
 8014e7e:	9200      	str	r2, [sp, #0]
 8014e80:	43db      	mvns	r3, r3
 8014e82:	2200      	movs	r2, #0
 8014e84:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8014e88:	f7ff fea4 	bl	8014bd4 <dwt_modify32bitoffsetreg>
 8014e8c:	b003      	add	sp, #12
 8014e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014e90 <ull_setinterrupt>:
 8014e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e94:	b082      	sub	sp, #8
 8014e96:	4604      	mov	r4, r0
 8014e98:	4688      	mov	r8, r1
 8014e9a:	4617      	mov	r7, r2
 8014e9c:	461d      	mov	r5, r3
 8014e9e:	f7eb fe4b 	bl	8000b38 <decamutexon>
 8014ea2:	4606      	mov	r6, r0
 8014ea4:	2d02      	cmp	r5, #2
 8014ea6:	d02d      	beq.n	8014f04 <ull_setinterrupt+0x74>
 8014ea8:	2d01      	cmp	r5, #1
 8014eaa:	d038      	beq.n	8014f1e <ull_setinterrupt+0x8e>
 8014eac:	2500      	movs	r5, #0
 8014eae:	9500      	str	r5, [sp, #0]
 8014eb0:	ea6f 0308 	mvn.w	r3, r8
 8014eb4:	462a      	mov	r2, r5
 8014eb6:	213c      	movs	r1, #60	; 0x3c
 8014eb8:	4620      	mov	r0, r4
 8014eba:	f7ff fe8b 	bl	8014bd4 <dwt_modify32bitoffsetreg>
 8014ebe:	9500      	str	r5, [sp, #0]
 8014ec0:	43fb      	mvns	r3, r7
 8014ec2:	462a      	mov	r2, r5
 8014ec4:	2140      	movs	r1, #64	; 0x40
 8014ec6:	4620      	mov	r0, r4
 8014ec8:	f7ff fe84 	bl	8014bd4 <dwt_modify32bitoffsetreg>
 8014ecc:	2200      	movs	r2, #0
 8014ece:	213c      	movs	r1, #60	; 0x3c
 8014ed0:	4620      	mov	r0, r4
 8014ed2:	f7fe fdab 	bl	8013a2c <dwt_read32bitoffsetreg>
 8014ed6:	4603      	mov	r3, r0
 8014ed8:	2200      	movs	r2, #0
 8014eda:	2144      	movs	r1, #68	; 0x44
 8014edc:	4620      	mov	r0, r4
 8014ede:	f7ff fae7 	bl	80144b0 <dwt_write32bitoffsetreg>
 8014ee2:	2200      	movs	r2, #0
 8014ee4:	2140      	movs	r1, #64	; 0x40
 8014ee6:	4620      	mov	r0, r4
 8014ee8:	f7fe fda0 	bl	8013a2c <dwt_read32bitoffsetreg>
 8014eec:	4603      	mov	r3, r0
 8014eee:	2200      	movs	r2, #0
 8014ef0:	2148      	movs	r1, #72	; 0x48
 8014ef2:	4620      	mov	r0, r4
 8014ef4:	f7ff fadc 	bl	80144b0 <dwt_write32bitoffsetreg>
 8014ef8:	4630      	mov	r0, r6
 8014efa:	f7eb fe2e 	bl	8000b5a <decamutexoff>
 8014efe:	b002      	add	sp, #8
 8014f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f04:	4643      	mov	r3, r8
 8014f06:	2200      	movs	r2, #0
 8014f08:	213c      	movs	r1, #60	; 0x3c
 8014f0a:	4620      	mov	r0, r4
 8014f0c:	f7ff fad0 	bl	80144b0 <dwt_write32bitoffsetreg>
 8014f10:	463b      	mov	r3, r7
 8014f12:	2200      	movs	r2, #0
 8014f14:	2140      	movs	r1, #64	; 0x40
 8014f16:	4620      	mov	r0, r4
 8014f18:	f7ff faca 	bl	80144b0 <dwt_write32bitoffsetreg>
 8014f1c:	e7d6      	b.n	8014ecc <ull_setinterrupt+0x3c>
 8014f1e:	f8cd 8000 	str.w	r8, [sp]
 8014f22:	f04f 33ff 	mov.w	r3, #4294967295
 8014f26:	2200      	movs	r2, #0
 8014f28:	213c      	movs	r1, #60	; 0x3c
 8014f2a:	4620      	mov	r0, r4
 8014f2c:	f7ff fe52 	bl	8014bd4 <dwt_modify32bitoffsetreg>
 8014f30:	9700      	str	r7, [sp, #0]
 8014f32:	f04f 33ff 	mov.w	r3, #4294967295
 8014f36:	2200      	movs	r2, #0
 8014f38:	2140      	movs	r1, #64	; 0x40
 8014f3a:	4620      	mov	r0, r4
 8014f3c:	f7ff fe4a 	bl	8014bd4 <dwt_modify32bitoffsetreg>
 8014f40:	e7c4      	b.n	8014ecc <ull_setinterrupt+0x3c>
	...

08014f44 <ull_writetxfctrl>:
 8014f44:	b510      	push	{r4, lr}
 8014f46:	b082      	sub	sp, #8
 8014f48:	4604      	mov	r4, r0
 8014f4a:	2a7f      	cmp	r2, #127	; 0x7f
 8014f4c:	d912      	bls.n	8014f74 <ull_writetxfctrl+0x30>
 8014f4e:	3280      	adds	r2, #128	; 0x80
 8014f50:	ea41 21c3 	orr.w	r1, r1, r3, lsl #11
 8014f54:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8014f58:	9100      	str	r1, [sp, #0]
 8014f5a:	4b0c      	ldr	r3, [pc, #48]	; (8014f8c <ull_writetxfctrl+0x48>)
 8014f5c:	2200      	movs	r2, #0
 8014f5e:	2124      	movs	r1, #36	; 0x24
 8014f60:	f7ff fe38 	bl	8014bd4 <dwt_modify32bitoffsetreg>
 8014f64:	2200      	movs	r2, #0
 8014f66:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8014f6a:	4620      	mov	r0, r4
 8014f6c:	f7fe fd86 	bl	8013a7c <dwt_read8bitoffsetreg>
 8014f70:	b002      	add	sp, #8
 8014f72:	bd10      	pop	{r4, pc}
 8014f74:	ea41 21c3 	orr.w	r1, r1, r3, lsl #11
 8014f78:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8014f7c:	9100      	str	r1, [sp, #0]
 8014f7e:	4b03      	ldr	r3, [pc, #12]	; (8014f8c <ull_writetxfctrl+0x48>)
 8014f80:	2200      	movs	r2, #0
 8014f82:	2124      	movs	r1, #36	; 0x24
 8014f84:	f7ff fe26 	bl	8014bd4 <dwt_modify32bitoffsetreg>
 8014f88:	e7f2      	b.n	8014f70 <ull_writetxfctrl+0x2c>
 8014f8a:	bf00      	nop
 8014f8c:	fc00f400 	.word	0xfc00f400

08014f90 <prs_sys_status_and_or>:
 8014f90:	b500      	push	{lr}
 8014f92:	b083      	sub	sp, #12
 8014f94:	9200      	str	r2, [sp, #0]
 8014f96:	460b      	mov	r3, r1
 8014f98:	2200      	movs	r2, #0
 8014f9a:	2144      	movs	r1, #68	; 0x44
 8014f9c:	f7ff fe1a 	bl	8014bd4 <dwt_modify32bitoffsetreg>
 8014fa0:	2000      	movs	r0, #0
 8014fa2:	b003      	add	sp, #12
 8014fa4:	f85d fb04 	ldr.w	pc, [sp], #4

08014fa8 <dwt_modify8bitoffsetreg>:
 8014fa8:	b500      	push	{lr}
 8014faa:	b085      	sub	sp, #20
 8014fac:	f88d 300c 	strb.w	r3, [sp, #12]
 8014fb0:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8014fb4:	f88d 300d 	strb.w	r3, [sp, #13]
 8014fb8:	f248 0301 	movw	r3, #32769	; 0x8001
 8014fbc:	9301      	str	r3, [sp, #4]
 8014fbe:	ab03      	add	r3, sp, #12
 8014fc0:	9300      	str	r3, [sp, #0]
 8014fc2:	2302      	movs	r3, #2
 8014fc4:	b292      	uxth	r2, r2
 8014fc6:	f7fe fca4 	bl	8013912 <dwt_xfer3xxx>
 8014fca:	b005      	add	sp, #20
 8014fcc:	f85d fb04 	ldr.w	pc, [sp], #4

08014fd0 <ull_configciadiag>:
 8014fd0:	b530      	push	{r4, r5, lr}
 8014fd2:	b083      	sub	sp, #12
 8014fd4:	4604      	mov	r4, r0
 8014fd6:	460d      	mov	r5, r1
 8014fd8:	f011 0f01 	tst.w	r1, #1
 8014fdc:	d015      	beq.n	801500a <ull_configciadiag+0x3a>
 8014fde:	2300      	movs	r3, #0
 8014fe0:	9300      	str	r3, [sp, #0]
 8014fe2:	23ef      	movs	r3, #239	; 0xef
 8014fe4:	2202      	movs	r2, #2
 8014fe6:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 8014fea:	f7ff ffdd 	bl	8014fa8 <dwt_modify8bitoffsetreg>
 8014fee:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8014ff0:	761d      	strb	r5, [r3, #24]
 8014ff2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8014ff4:	7e1b      	ldrb	r3, [r3, #24]
 8014ff6:	085b      	lsrs	r3, r3, #1
 8014ff8:	d010      	beq.n	801501c <ull_configciadiag+0x4c>
 8014ffa:	086b      	lsrs	r3, r5, #1
 8014ffc:	2200      	movs	r2, #0
 8014ffe:	490e      	ldr	r1, [pc, #56]	; (8015038 <ull_configciadiag+0x68>)
 8015000:	4620      	mov	r0, r4
 8015002:	f7ff f902 	bl	801420a <dwt_write8bitoffsetreg>
 8015006:	b003      	add	sp, #12
 8015008:	bd30      	pop	{r4, r5, pc}
 801500a:	2310      	movs	r3, #16
 801500c:	9300      	str	r3, [sp, #0]
 801500e:	23ff      	movs	r3, #255	; 0xff
 8015010:	2202      	movs	r2, #2
 8015012:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 8015016:	f7ff ffc7 	bl	8014fa8 <dwt_modify8bitoffsetreg>
 801501a:	e7e8      	b.n	8014fee <ull_configciadiag+0x1e>
 801501c:	2301      	movs	r3, #1
 801501e:	9300      	str	r3, [sp, #0]
 8015020:	23ff      	movs	r3, #255	; 0xff
 8015022:	2200      	movs	r2, #0
 8015024:	4904      	ldr	r1, [pc, #16]	; (8015038 <ull_configciadiag+0x68>)
 8015026:	4620      	mov	r0, r4
 8015028:	f7ff ffbe 	bl	8014fa8 <dwt_modify8bitoffsetreg>
 801502c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 801502e:	7e13      	ldrb	r3, [r2, #24]
 8015030:	f043 0302 	orr.w	r3, r3, #2
 8015034:	7613      	strb	r3, [r2, #24]
 8015036:	e7e6      	b.n	8015006 <ull_configciadiag+0x36>
 8015038:	00010028 	.word	0x00010028

0801503c <ull_calcbandwidthadj>:
 801503c:	b570      	push	{r4, r5, r6, lr}
 801503e:	b082      	sub	sp, #8
 8015040:	4604      	mov	r4, r0
 8015042:	460d      	mov	r5, r1
 8015044:	2101      	movs	r1, #1
 8015046:	f7ff f963 	bl	8014310 <ull_force_clocks>
 801504a:	2100      	movs	r1, #0
 801504c:	4620      	mov	r0, r4
 801504e:	f7ff fe03 	bl	8014c58 <ull_enable_rf_tx>
 8015052:	4620      	mov	r0, r4
 8015054:	f7ff fe34 	bl	8014cc0 <ull_enable_rftx_blocks>
 8015058:	f3c5 030b 	ubfx	r3, r5, #0, #12
 801505c:	2200      	movs	r2, #0
 801505e:	4915      	ldr	r1, [pc, #84]	; (80150b4 <ull_calcbandwidthadj+0x78>)
 8015060:	4620      	mov	r0, r4
 8015062:	f7ff f924 	bl	80142ae <dwt_write16bitoffsetreg>
 8015066:	2303      	movs	r3, #3
 8015068:	9300      	str	r3, [sp, #0]
 801506a:	23ff      	movs	r3, #255	; 0xff
 801506c:	2200      	movs	r2, #0
 801506e:	4912      	ldr	r1, [pc, #72]	; (80150b8 <ull_calcbandwidthadj+0x7c>)
 8015070:	4620      	mov	r0, r4
 8015072:	f7ff ff99 	bl	8014fa8 <dwt_modify8bitoffsetreg>
 8015076:	4e10      	ldr	r6, [pc, #64]	; (80150b8 <ull_calcbandwidthadj+0x7c>)
 8015078:	2500      	movs	r5, #0
 801507a:	462a      	mov	r2, r5
 801507c:	4631      	mov	r1, r6
 801507e:	4620      	mov	r0, r4
 8015080:	f7fe fcfc 	bl	8013a7c <dwt_read8bitoffsetreg>
 8015084:	f010 0f01 	tst.w	r0, #1
 8015088:	d1f7      	bne.n	801507a <ull_calcbandwidthadj+0x3e>
 801508a:	4620      	mov	r0, r4
 801508c:	f7ff fcae 	bl	80149ec <ull_disable_rftx_blocks>
 8015090:	2100      	movs	r1, #0
 8015092:	4620      	mov	r0, r4
 8015094:	f7ff fcb4 	bl	8014a00 <ull_disable_rf_tx>
 8015098:	2105      	movs	r1, #5
 801509a:	4620      	mov	r0, r4
 801509c:	f7ff f938 	bl	8014310 <ull_force_clocks>
 80150a0:	2200      	movs	r2, #0
 80150a2:	4906      	ldr	r1, [pc, #24]	; (80150bc <ull_calcbandwidthadj+0x80>)
 80150a4:	4620      	mov	r0, r4
 80150a6:	f7fe fce9 	bl	8013a7c <dwt_read8bitoffsetreg>
 80150aa:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80150ae:	b002      	add	sp, #8
 80150b0:	bd70      	pop	{r4, r5, r6, pc}
 80150b2:	bf00      	nop
 80150b4:	0008001c 	.word	0x0008001c
 80150b8:	00080010 	.word	0x00080010
 80150bc:	0007001c 	.word	0x0007001c

080150c0 <ull_configuretxrf>:
 80150c0:	b538      	push	{r3, r4, r5, lr}
 80150c2:	4605      	mov	r5, r0
 80150c4:	460c      	mov	r4, r1
 80150c6:	f8b1 1005 	ldrh.w	r1, [r1, #5]
 80150ca:	b149      	cbz	r1, 80150e0 <ull_configuretxrf+0x20>
 80150cc:	f7ff ffb6 	bl	801503c <ull_calcbandwidthadj>
 80150d0:	f8d4 3001 	ldr.w	r3, [r4, #1]
 80150d4:	2200      	movs	r2, #0
 80150d6:	4905      	ldr	r1, [pc, #20]	; (80150ec <ull_configuretxrf+0x2c>)
 80150d8:	4628      	mov	r0, r5
 80150da:	f7ff f9e9 	bl	80144b0 <dwt_write32bitoffsetreg>
 80150de:	bd38      	pop	{r3, r4, r5, pc}
 80150e0:	7823      	ldrb	r3, [r4, #0]
 80150e2:	2200      	movs	r2, #0
 80150e4:	4902      	ldr	r1, [pc, #8]	; (80150f0 <ull_configuretxrf+0x30>)
 80150e6:	f7ff f890 	bl	801420a <dwt_write8bitoffsetreg>
 80150ea:	e7f1      	b.n	80150d0 <ull_configuretxrf+0x10>
 80150ec:	0001000c 	.word	0x0001000c
 80150f0:	0007001c 	.word	0x0007001c

080150f4 <ull_repeated_frames>:
 80150f4:	b530      	push	{r4, r5, lr}
 80150f6:	b083      	sub	sp, #12
 80150f8:	4604      	mov	r4, r0
 80150fa:	460d      	mov	r5, r1
 80150fc:	2310      	movs	r3, #16
 80150fe:	9300      	str	r3, [sp, #0]
 8015100:	23ff      	movs	r3, #255	; 0xff
 8015102:	2200      	movs	r2, #0
 8015104:	4906      	ldr	r1, [pc, #24]	; (8015120 <ull_repeated_frames+0x2c>)
 8015106:	f7ff ff4f 	bl	8014fa8 <dwt_modify8bitoffsetreg>
 801510a:	462b      	mov	r3, r5
 801510c:	2d02      	cmp	r5, #2
 801510e:	bf38      	it	cc
 8015110:	2302      	movcc	r3, #2
 8015112:	2200      	movs	r2, #0
 8015114:	212c      	movs	r1, #44	; 0x2c
 8015116:	4620      	mov	r0, r4
 8015118:	f7ff f9ca 	bl	80144b0 <dwt_write32bitoffsetreg>
 801511c:	b003      	add	sp, #12
 801511e:	bd30      	pop	{r4, r5, pc}
 8015120:	000f0024 	.word	0x000f0024

08015124 <ull_setdwstate>:
 8015124:	b530      	push	{r4, r5, lr}
 8015126:	b083      	sub	sp, #12
 8015128:	4604      	mov	r4, r0
 801512a:	2901      	cmp	r1, #1
 801512c:	d01d      	beq.n	801516a <ull_setdwstate+0x46>
 801512e:	2902      	cmp	r1, #2
 8015130:	d030      	beq.n	8015194 <ull_setdwstate+0x70>
 8015132:	2301      	movs	r3, #1
 8015134:	9300      	str	r3, [sp, #0]
 8015136:	23ff      	movs	r3, #255	; 0xff
 8015138:	2200      	movs	r2, #0
 801513a:	4926      	ldr	r1, [pc, #152]	; (80151d4 <ull_setdwstate+0xb0>)
 801513c:	f7ff ff34 	bl	8014fa8 <dwt_modify8bitoffsetreg>
 8015140:	4d25      	ldr	r5, [pc, #148]	; (80151d8 <ull_setdwstate+0xb4>)
 8015142:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8015146:	9300      	str	r3, [sp, #0]
 8015148:	f46f 7380 	mvn.w	r3, #256	; 0x100
 801514c:	2200      	movs	r2, #0
 801514e:	4629      	mov	r1, r5
 8015150:	4620      	mov	r0, r4
 8015152:	f7ff fd3f 	bl	8014bd4 <dwt_modify32bitoffsetreg>
 8015156:	2300      	movs	r3, #0
 8015158:	9300      	str	r3, [sp, #0]
 801515a:	237f      	movs	r3, #127	; 0x7f
 801515c:	2202      	movs	r2, #2
 801515e:	4629      	mov	r1, r5
 8015160:	4620      	mov	r0, r4
 8015162:	f7ff ff21 	bl	8014fa8 <dwt_modify8bitoffsetreg>
 8015166:	b003      	add	sp, #12
 8015168:	bd30      	pop	{r4, r5, pc}
 801516a:	2105      	movs	r1, #5
 801516c:	f7ff f8d0 	bl	8014310 <ull_force_clocks>
 8015170:	f44f 7381 	mov.w	r3, #258	; 0x102
 8015174:	9300      	str	r3, [sp, #0]
 8015176:	f04f 33ff 	mov.w	r3, #4294967295
 801517a:	2200      	movs	r2, #0
 801517c:	4917      	ldr	r1, [pc, #92]	; (80151dc <ull_setdwstate+0xb8>)
 801517e:	4620      	mov	r0, r4
 8015180:	f7ff fd28 	bl	8014bd4 <dwt_modify32bitoffsetreg>
 8015184:	2201      	movs	r2, #1
 8015186:	9200      	str	r2, [sp, #0]
 8015188:	23ff      	movs	r3, #255	; 0xff
 801518a:	4913      	ldr	r1, [pc, #76]	; (80151d8 <ull_setdwstate+0xb4>)
 801518c:	4620      	mov	r0, r4
 801518e:	f7ff ff0b 	bl	8014fa8 <dwt_modify8bitoffsetreg>
 8015192:	e7e8      	b.n	8015166 <ull_setdwstate+0x42>
 8015194:	2303      	movs	r3, #3
 8015196:	9300      	str	r3, [sp, #0]
 8015198:	23ff      	movs	r3, #255	; 0xff
 801519a:	2200      	movs	r2, #0
 801519c:	490d      	ldr	r1, [pc, #52]	; (80151d4 <ull_setdwstate+0xb0>)
 801519e:	f7ff ff03 	bl	8014fa8 <dwt_modify8bitoffsetreg>
 80151a2:	4d0d      	ldr	r5, [pc, #52]	; (80151d8 <ull_setdwstate+0xb4>)
 80151a4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80151a8:	9300      	str	r3, [sp, #0]
 80151aa:	f46f 7380 	mvn.w	r3, #256	; 0x100
 80151ae:	2200      	movs	r2, #0
 80151b0:	4629      	mov	r1, r5
 80151b2:	4620      	mov	r0, r4
 80151b4:	f7ff fd0e 	bl	8014bd4 <dwt_modify32bitoffsetreg>
 80151b8:	2300      	movs	r3, #0
 80151ba:	9300      	str	r3, [sp, #0]
 80151bc:	237f      	movs	r3, #127	; 0x7f
 80151be:	2202      	movs	r2, #2
 80151c0:	4629      	mov	r1, r5
 80151c2:	4620      	mov	r0, r4
 80151c4:	f7ff fef0 	bl	8014fa8 <dwt_modify8bitoffsetreg>
 80151c8:	2105      	movs	r1, #5
 80151ca:	4620      	mov	r0, r4
 80151cc:	f7ff f8a0 	bl	8014310 <ull_force_clocks>
 80151d0:	e7c9      	b.n	8015166 <ull_setdwstate+0x42>
 80151d2:	bf00      	nop
 80151d4:	00110004 	.word	0x00110004
 80151d8:	00110008 	.word	0x00110008
 80151dc:	00090008 	.word	0x00090008

080151e0 <ull_configureframefilter>:
 80151e0:	b530      	push	{r4, r5, lr}
 80151e2:	b083      	sub	sp, #12
 80151e4:	4605      	mov	r5, r0
 80151e6:	2902      	cmp	r1, #2
 80151e8:	d00e      	beq.n	8015208 <ull_configureframefilter+0x28>
 80151ea:	2400      	movs	r4, #0
 80151ec:	9400      	str	r4, [sp, #0]
 80151ee:	23fe      	movs	r3, #254	; 0xfe
 80151f0:	4622      	mov	r2, r4
 80151f2:	2110      	movs	r1, #16
 80151f4:	f7ff fed8 	bl	8014fa8 <dwt_modify8bitoffsetreg>
 80151f8:	4623      	mov	r3, r4
 80151fa:	4622      	mov	r2, r4
 80151fc:	2114      	movs	r1, #20
 80151fe:	4628      	mov	r0, r5
 8015200:	f7ff f855 	bl	80142ae <dwt_write16bitoffsetreg>
 8015204:	b003      	add	sp, #12
 8015206:	bd30      	pop	{r4, r5, pc}
 8015208:	4614      	mov	r4, r2
 801520a:	2301      	movs	r3, #1
 801520c:	9300      	str	r3, [sp, #0]
 801520e:	23ff      	movs	r3, #255	; 0xff
 8015210:	2200      	movs	r2, #0
 8015212:	2110      	movs	r1, #16
 8015214:	f7ff fec8 	bl	8014fa8 <dwt_modify8bitoffsetreg>
 8015218:	4623      	mov	r3, r4
 801521a:	2200      	movs	r2, #0
 801521c:	2114      	movs	r1, #20
 801521e:	4628      	mov	r0, r5
 8015220:	f7ff f845 	bl	80142ae <dwt_write16bitoffsetreg>
 8015224:	e7ee      	b.n	8015204 <ull_configureframefilter+0x24>
	...

08015228 <ull_run_pgfcal>:
 8015228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801522c:	b082      	sub	sp, #8
 801522e:	4605      	mov	r5, r0
 8015230:	4c29      	ldr	r4, [pc, #164]	; (80152d8 <ull_run_pgfcal+0xb0>)
 8015232:	4b2a      	ldr	r3, [pc, #168]	; (80152dc <ull_run_pgfcal+0xb4>)
 8015234:	2200      	movs	r2, #0
 8015236:	4621      	mov	r1, r4
 8015238:	f7ff f93a 	bl	80144b0 <dwt_write32bitoffsetreg>
 801523c:	2310      	movs	r3, #16
 801523e:	9300      	str	r3, [sp, #0]
 8015240:	23ff      	movs	r3, #255	; 0xff
 8015242:	2200      	movs	r2, #0
 8015244:	4621      	mov	r1, r4
 8015246:	4628      	mov	r0, r5
 8015248:	f7ff feae 	bl	8014fa8 <dwt_modify8bitoffsetreg>
 801524c:	2403      	movs	r4, #3
 801524e:	f04f 0814 	mov.w	r8, #20
 8015252:	4f23      	ldr	r7, [pc, #140]	; (80152e0 <ull_run_pgfcal+0xb8>)
 8015254:	2600      	movs	r6, #0
 8015256:	4640      	mov	r0, r8
 8015258:	f7eb fc97 	bl	8000b8a <deca_usleep>
 801525c:	4632      	mov	r2, r6
 801525e:	4639      	mov	r1, r7
 8015260:	4628      	mov	r0, r5
 8015262:	f7fe fc0b 	bl	8013a7c <dwt_read8bitoffsetreg>
 8015266:	2801      	cmp	r0, #1
 8015268:	d034      	beq.n	80152d4 <ull_run_pgfcal+0xac>
 801526a:	1e63      	subs	r3, r4, #1
 801526c:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8015270:	d1f1      	bne.n	8015256 <ull_run_pgfcal+0x2e>
 8015272:	f06f 0402 	mvn.w	r4, #2
 8015276:	4e18      	ldr	r6, [pc, #96]	; (80152d8 <ull_run_pgfcal+0xb0>)
 8015278:	2300      	movs	r3, #0
 801527a:	461a      	mov	r2, r3
 801527c:	4631      	mov	r1, r6
 801527e:	4628      	mov	r0, r5
 8015280:	f7fe ffc3 	bl	801420a <dwt_write8bitoffsetreg>
 8015284:	2301      	movs	r3, #1
 8015286:	2200      	movs	r2, #0
 8015288:	4915      	ldr	r1, [pc, #84]	; (80152e0 <ull_run_pgfcal+0xb8>)
 801528a:	4628      	mov	r0, r5
 801528c:	f7fe ffbd 	bl	801420a <dwt_write8bitoffsetreg>
 8015290:	2301      	movs	r3, #1
 8015292:	9300      	str	r3, [sp, #0]
 8015294:	23ff      	movs	r3, #255	; 0xff
 8015296:	2202      	movs	r2, #2
 8015298:	4631      	mov	r1, r6
 801529a:	4628      	mov	r0, r5
 801529c:	f7ff fe84 	bl	8014fa8 <dwt_modify8bitoffsetreg>
 80152a0:	2200      	movs	r2, #0
 80152a2:	4910      	ldr	r1, [pc, #64]	; (80152e4 <ull_run_pgfcal+0xbc>)
 80152a4:	4628      	mov	r0, r5
 80152a6:	f7fe fbc1 	bl	8013a2c <dwt_read32bitoffsetreg>
 80152aa:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80152ae:	4298      	cmp	r0, r3
 80152b0:	bf08      	it	eq
 80152b2:	f06f 0403 	mvneq.w	r4, #3
 80152b6:	2200      	movs	r2, #0
 80152b8:	490b      	ldr	r1, [pc, #44]	; (80152e8 <ull_run_pgfcal+0xc0>)
 80152ba:	4628      	mov	r0, r5
 80152bc:	f7fe fbb6 	bl	8013a2c <dwt_read32bitoffsetreg>
 80152c0:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80152c4:	4298      	cmp	r0, r3
 80152c6:	bf14      	ite	ne
 80152c8:	4620      	movne	r0, r4
 80152ca:	f06f 0004 	mvneq.w	r0, #4
 80152ce:	b002      	add	sp, #8
 80152d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152d4:	2400      	movs	r4, #0
 80152d6:	e7ce      	b.n	8015276 <ull_run_pgfcal+0x4e>
 80152d8:	0004000c 	.word	0x0004000c
 80152dc:	00020001 	.word	0x00020001
 80152e0:	00040020 	.word	0x00040020
 80152e4:	00040014 	.word	0x00040014
 80152e8:	0004001c 	.word	0x0004001c

080152ec <prs_ack_enable>:
 80152ec:	b500      	push	{lr}
 80152ee:	b083      	sub	sp, #12
 80152f0:	2900      	cmp	r1, #0
 80152f2:	bf0b      	itete	eq
 80152f4:	23ff      	moveq	r3, #255	; 0xff
 80152f6:	23f7      	movne	r3, #247	; 0xf7
 80152f8:	2200      	moveq	r2, #0
 80152fa:	2208      	movne	r2, #8
 80152fc:	9200      	str	r2, [sp, #0]
 80152fe:	2201      	movs	r2, #1
 8015300:	2110      	movs	r1, #16
 8015302:	f7ff fe51 	bl	8014fa8 <dwt_modify8bitoffsetreg>
 8015306:	b003      	add	sp, #12
 8015308:	f85d fb04 	ldr.w	pc, [sp], #4

0801530c <dwt_modify16bitoffsetreg>:
 801530c:	b510      	push	{r4, lr}
 801530e:	b084      	sub	sp, #16
 8015310:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8015314:	f88d 300c 	strb.w	r3, [sp, #12]
 8015318:	0a1b      	lsrs	r3, r3, #8
 801531a:	f88d 300d 	strb.w	r3, [sp, #13]
 801531e:	f88d 400e 	strb.w	r4, [sp, #14]
 8015322:	0a24      	lsrs	r4, r4, #8
 8015324:	f88d 400f 	strb.w	r4, [sp, #15]
 8015328:	f248 0302 	movw	r3, #32770	; 0x8002
 801532c:	9301      	str	r3, [sp, #4]
 801532e:	ab03      	add	r3, sp, #12
 8015330:	9300      	str	r3, [sp, #0]
 8015332:	2304      	movs	r3, #4
 8015334:	b292      	uxth	r2, r2
 8015336:	f7fe faec 	bl	8013912 <dwt_xfer3xxx>
 801533a:	b004      	add	sp, #16
 801533c:	bd10      	pop	{r4, pc}
	...

08015340 <_dwt_prog_ldo_and_bias_tune>:
 8015340:	b510      	push	{r4, lr}
 8015342:	b082      	sub	sp, #8
 8015344:	4604      	mov	r4, r0
 8015346:	f44f 73c0 	mov.w	r3, #384	; 0x180
 801534a:	9300      	str	r3, [sp, #0]
 801534c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015350:	2200      	movs	r2, #0
 8015352:	4907      	ldr	r1, [pc, #28]	; (8015370 <_dwt_prog_ldo_and_bias_tune+0x30>)
 8015354:	f7ff ffda 	bl	801530c <dwt_modify16bitoffsetreg>
 8015358:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801535a:	7a1b      	ldrb	r3, [r3, #8]
 801535c:	9300      	str	r3, [sp, #0]
 801535e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8015362:	2200      	movs	r2, #0
 8015364:	4903      	ldr	r1, [pc, #12]	; (8015374 <_dwt_prog_ldo_and_bias_tune+0x34>)
 8015366:	4620      	mov	r0, r4
 8015368:	f7ff ffd0 	bl	801530c <dwt_modify16bitoffsetreg>
 801536c:	b002      	add	sp, #8
 801536e:	bd10      	pop	{r4, pc}
 8015370:	000b0008 	.word	0x000b0008
 8015374:	0011001f 	.word	0x0011001f

08015378 <ull_setleds>:
 8015378:	b530      	push	{r4, r5, lr}
 801537a:	b083      	sub	sp, #12
 801537c:	4604      	mov	r4, r0
 801537e:	f011 0f01 	tst.w	r1, #1
 8015382:	d01f      	beq.n	80153c4 <ull_setleds+0x4c>
 8015384:	460d      	mov	r5, r1
 8015386:	f44f 7310 	mov.w	r3, #576	; 0x240
 801538a:	9300      	str	r3, [sp, #0]
 801538c:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 8015390:	2200      	movs	r2, #0
 8015392:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8015396:	f7ff fc1d 	bl	8014bd4 <dwt_modify32bitoffsetreg>
 801539a:	f44f 0304 	mov.w	r3, #8650752	; 0x840000
 801539e:	9300      	str	r3, [sp, #0]
 80153a0:	f04f 33ff 	mov.w	r3, #4294967295
 80153a4:	2200      	movs	r2, #0
 80153a6:	4918      	ldr	r1, [pc, #96]	; (8015408 <ull_setleds+0x90>)
 80153a8:	4620      	mov	r0, r4
 80153aa:	f7ff fc13 	bl	8014bd4 <dwt_modify32bitoffsetreg>
 80153ae:	f015 0f02 	tst.w	r5, #2
 80153b2:	d11a      	bne.n	80153ea <ull_setleds+0x72>
 80153b4:	f44f 7388 	mov.w	r3, #272	; 0x110
 80153b8:	2200      	movs	r2, #0
 80153ba:	4914      	ldr	r1, [pc, #80]	; (801540c <ull_setleds+0x94>)
 80153bc:	4620      	mov	r0, r4
 80153be:	f7ff f877 	bl	80144b0 <dwt_write32bitoffsetreg>
 80153c2:	e010      	b.n	80153e6 <ull_setleds+0x6e>
 80153c4:	2500      	movs	r5, #0
 80153c6:	9500      	str	r5, [sp, #0]
 80153c8:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 80153cc:	462a      	mov	r2, r5
 80153ce:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80153d2:	f7ff fbff 	bl	8014bd4 <dwt_modify32bitoffsetreg>
 80153d6:	9500      	str	r5, [sp, #0]
 80153d8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80153dc:	462a      	mov	r2, r5
 80153de:	490b      	ldr	r1, [pc, #44]	; (801540c <ull_setleds+0x94>)
 80153e0:	4620      	mov	r0, r4
 80153e2:	f7ff ff93 	bl	801530c <dwt_modify16bitoffsetreg>
 80153e6:	b003      	add	sp, #12
 80153e8:	bd30      	pop	{r4, r5, pc}
 80153ea:	4d08      	ldr	r5, [pc, #32]	; (801540c <ull_setleds+0x94>)
 80153ec:	4b08      	ldr	r3, [pc, #32]	; (8015410 <ull_setleds+0x98>)
 80153ee:	2200      	movs	r2, #0
 80153f0:	4629      	mov	r1, r5
 80153f2:	4620      	mov	r0, r4
 80153f4:	f7ff f85c 	bl	80144b0 <dwt_write32bitoffsetreg>
 80153f8:	f44f 7388 	mov.w	r3, #272	; 0x110
 80153fc:	2200      	movs	r2, #0
 80153fe:	4629      	mov	r1, r5
 8015400:	4620      	mov	r0, r4
 8015402:	f7ff f855 	bl	80144b0 <dwt_write32bitoffsetreg>
 8015406:	e7ee      	b.n	80153e6 <ull_setleds+0x6e>
 8015408:	00110004 	.word	0x00110004
 801540c:	00110016 	.word	0x00110016
 8015410:	000f0110 	.word	0x000f0110

08015414 <ull_pgf_cal>:
 8015414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015416:	b083      	sub	sp, #12
 8015418:	4604      	mov	r4, r0
 801541a:	2901      	cmp	r1, #1
 801541c:	d009      	beq.n	8015432 <ull_pgf_cal+0x1e>
 801541e:	2014      	movs	r0, #20
 8015420:	f7eb fbb3 	bl	8000b8a <deca_usleep>
 8015424:	4620      	mov	r0, r4
 8015426:	f7ff feff 	bl	8015228 <ull_run_pgfcal>
 801542a:	4605      	mov	r5, r0
 801542c:	4628      	mov	r0, r5
 801542e:	b003      	add	sp, #12
 8015430:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015432:	4e0f      	ldr	r6, [pc, #60]	; (8015470 <ull_pgf_cal+0x5c>)
 8015434:	2200      	movs	r2, #0
 8015436:	4631      	mov	r1, r6
 8015438:	f7fe fb0e 	bl	8013a58 <dwt_read16bitoffsetreg>
 801543c:	4607      	mov	r7, r0
 801543e:	f240 1305 	movw	r3, #261	; 0x105
 8015442:	9300      	str	r3, [sp, #0]
 8015444:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015448:	2200      	movs	r2, #0
 801544a:	4631      	mov	r1, r6
 801544c:	4620      	mov	r0, r4
 801544e:	f7ff ff5d 	bl	801530c <dwt_modify16bitoffsetreg>
 8015452:	2014      	movs	r0, #20
 8015454:	f7eb fb99 	bl	8000b8a <deca_usleep>
 8015458:	4620      	mov	r0, r4
 801545a:	f7ff fee5 	bl	8015228 <ull_run_pgfcal>
 801545e:	4605      	mov	r5, r0
 8015460:	2200      	movs	r2, #0
 8015462:	9200      	str	r2, [sp, #0]
 8015464:	463b      	mov	r3, r7
 8015466:	4631      	mov	r1, r6
 8015468:	4620      	mov	r0, r4
 801546a:	f7ff ff4f 	bl	801530c <dwt_modify16bitoffsetreg>
 801546e:	e7dd      	b.n	801542c <ull_pgf_cal+0x18>
 8015470:	00070048 	.word	0x00070048

08015474 <ull_setgpiovalue>:
 8015474:	b500      	push	{lr}
 8015476:	b083      	sub	sp, #12
 8015478:	2a01      	cmp	r2, #1
 801547a:	d009      	beq.n	8015490 <ull_setgpiovalue+0x1c>
 801547c:	43cb      	mvns	r3, r1
 801547e:	2200      	movs	r2, #0
 8015480:	9200      	str	r2, [sp, #0]
 8015482:	b29b      	uxth	r3, r3
 8015484:	4906      	ldr	r1, [pc, #24]	; (80154a0 <ull_setgpiovalue+0x2c>)
 8015486:	f7ff ff41 	bl	801530c <dwt_modify16bitoffsetreg>
 801548a:	b003      	add	sp, #12
 801548c:	f85d fb04 	ldr.w	pc, [sp], #4
 8015490:	9100      	str	r1, [sp, #0]
 8015492:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015496:	2200      	movs	r2, #0
 8015498:	4901      	ldr	r1, [pc, #4]	; (80154a0 <ull_setgpiovalue+0x2c>)
 801549a:	f7ff ff37 	bl	801530c <dwt_modify16bitoffsetreg>
 801549e:	e7f4      	b.n	801548a <ull_setgpiovalue+0x16>
 80154a0:	0005000c 	.word	0x0005000c

080154a4 <ull_readaccdata>:
 80154a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80154a6:	b083      	sub	sp, #12
 80154a8:	4604      	mov	r4, r0
 80154aa:	460f      	mov	r7, r1
 80154ac:	4616      	mov	r6, r2
 80154ae:	461d      	mov	r5, r3
 80154b0:	f248 0340 	movw	r3, #32832	; 0x8040
 80154b4:	9300      	str	r3, [sp, #0]
 80154b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80154ba:	2200      	movs	r2, #0
 80154bc:	4918      	ldr	r1, [pc, #96]	; (8015520 <ull_readaccdata+0x7c>)
 80154be:	f7ff ff25 	bl	801530c <dwt_modify16bitoffsetreg>
 80154c2:	19aa      	adds	r2, r5, r6
 80154c4:	f243 0301 	movw	r3, #12289	; 0x3001
 80154c8:	429a      	cmp	r2, r3
 80154ca:	dc15      	bgt.n	80154f8 <ull_readaccdata+0x54>
 80154cc:	2d7f      	cmp	r5, #127	; 0x7f
 80154ce:	d91d      	bls.n	801550c <ull_readaccdata+0x68>
 80154d0:	2315      	movs	r3, #21
 80154d2:	2200      	movs	r2, #0
 80154d4:	4913      	ldr	r1, [pc, #76]	; (8015524 <ull_readaccdata+0x80>)
 80154d6:	4620      	mov	r0, r4
 80154d8:	f7fe ffea 	bl	80144b0 <dwt_write32bitoffsetreg>
 80154dc:	462b      	mov	r3, r5
 80154de:	2200      	movs	r2, #0
 80154e0:	4911      	ldr	r1, [pc, #68]	; (8015528 <ull_readaccdata+0x84>)
 80154e2:	4620      	mov	r0, r4
 80154e4:	f7fe ffe4 	bl	80144b0 <dwt_write32bitoffsetreg>
 80154e8:	9700      	str	r7, [sp, #0]
 80154ea:	4633      	mov	r3, r6
 80154ec:	2200      	movs	r2, #0
 80154ee:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 80154f2:	4620      	mov	r0, r4
 80154f4:	f7fe fa90 	bl	8013a18 <dwt_readfromdevice>
 80154f8:	2200      	movs	r2, #0
 80154fa:	9200      	str	r2, [sp, #0]
 80154fc:	f647 73bf 	movw	r3, #32703	; 0x7fbf
 8015500:	4907      	ldr	r1, [pc, #28]	; (8015520 <ull_readaccdata+0x7c>)
 8015502:	4620      	mov	r0, r4
 8015504:	f7ff ff02 	bl	801530c <dwt_modify16bitoffsetreg>
 8015508:	b003      	add	sp, #12
 801550a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801550c:	9700      	str	r7, [sp, #0]
 801550e:	4633      	mov	r3, r6
 8015510:	462a      	mov	r2, r5
 8015512:	f44f 11a8 	mov.w	r1, #1376256	; 0x150000
 8015516:	4620      	mov	r0, r4
 8015518:	f7fe fa7e 	bl	8013a18 <dwt_readfromdevice>
 801551c:	e7ec      	b.n	80154f8 <ull_readaccdata+0x54>
 801551e:	bf00      	nop
 8015520:	00110004 	.word	0x00110004
 8015524:	001f0004 	.word	0x001f0004
 8015528:	001f0008 	.word	0x001f0008

0801552c <ull_repeated_cw>:
 801552c:	b570      	push	{r4, r5, r6, lr}
 801552e:	4606      	mov	r6, r0
 8015530:	460c      	mov	r4, r1
 8015532:	4615      	mov	r5, r2
 8015534:	4b0e      	ldr	r3, [pc, #56]	; (8015570 <ull_repeated_cw+0x44>)
 8015536:	2202      	movs	r2, #2
 8015538:	490e      	ldr	r1, [pc, #56]	; (8015574 <ull_repeated_cw+0x48>)
 801553a:	f7fe ffb9 	bl	80144b0 <dwt_write32bitoffsetreg>
 801553e:	2d0f      	cmp	r5, #15
 8015540:	bfa8      	it	ge
 8015542:	250f      	movge	r5, #15
 8015544:	1e63      	subs	r3, r4, #1
 8015546:	2b03      	cmp	r3, #3
 8015548:	bf28      	it	cs
 801554a:	2404      	movcs	r4, #4
 801554c:	2310      	movs	r3, #16
 801554e:	4123      	asrs	r3, r4
 8015550:	2200      	movs	r2, #0
 8015552:	4909      	ldr	r1, [pc, #36]	; (8015578 <ull_repeated_cw+0x4c>)
 8015554:	4630      	mov	r0, r6
 8015556:	f7fe ffab 	bl	80144b0 <dwt_write32bitoffsetreg>
 801555a:	1e63      	subs	r3, r4, #1
 801555c:	009b      	lsls	r3, r3, #2
 801555e:	fa05 f303 	lsl.w	r3, r5, r3
 8015562:	2200      	movs	r2, #0
 8015564:	4905      	ldr	r1, [pc, #20]	; (801557c <ull_repeated_cw+0x50>)
 8015566:	4630      	mov	r0, r6
 8015568:	f7fe ffa2 	bl	80144b0 <dwt_write32bitoffsetreg>
 801556c:	bd70      	pop	{r4, r5, r6, pc}
 801556e:	bf00      	nop
 8015570:	00d20874 	.word	0x00d20874
 8015574:	00110010 	.word	0x00110010
 8015578:	00070028 	.word	0x00070028
 801557c:	00080018 	.word	0x00080018

08015580 <ull_configure>:
 8015580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015584:	b083      	sub	sp, #12
 8015586:	4604      	mov	r4, r0
 8015588:	460d      	mov	r5, r1
 801558a:	f891 9000 	ldrb.w	r9, [r1]
 801558e:	790b      	ldrb	r3, [r1, #4]
 8015590:	2b18      	cmp	r3, #24
 8015592:	d814      	bhi.n	80155be <ull_configure+0x3e>
 8015594:	78cf      	ldrb	r7, [r1, #3]
 8015596:	2f18      	cmp	r7, #24
 8015598:	bf94      	ite	ls
 801559a:	2700      	movls	r7, #0
 801559c:	2701      	movhi	r7, #1
 801559e:	b2ff      	uxtb	r7, r7
 80155a0:	79eb      	ldrb	r3, [r5, #7]
 80155a2:	2b01      	cmp	r3, #1
 80155a4:	bf0c      	ite	eq
 80155a6:	2110      	moveq	r1, #16
 80155a8:	2100      	movne	r1, #0
 80155aa:	786b      	ldrb	r3, [r5, #1]
 80155ac:	3b01      	subs	r3, #1
 80155ae:	2b06      	cmp	r3, #6
 80155b0:	d810      	bhi.n	80155d4 <ull_configure+0x54>
 80155b2:	e8df f003 	tbb	[pc, r3]
 80155b6:	0f06      	.short	0x0f06
 80155b8:	0f0c120f 	.word	0x0f0c120f
 80155bc:	09          	.byte	0x09
 80155bd:	00          	.byte	0x00
 80155be:	2701      	movs	r7, #1
 80155c0:	e7ed      	b.n	801559e <ull_configure+0x1e>
 80155c2:	f04f 0a40 	mov.w	sl, #64	; 0x40
 80155c6:	e00a      	b.n	80155de <ull_configure+0x5e>
 80155c8:	f04f 0a48 	mov.w	sl, #72	; 0x48
 80155cc:	e007      	b.n	80155de <ull_configure+0x5e>
 80155ce:	f04f 0a80 	mov.w	sl, #128	; 0x80
 80155d2:	e004      	b.n	80155de <ull_configure+0x5e>
 80155d4:	f44f 7a80 	mov.w	sl, #256	; 0x100
 80155d8:	e001      	b.n	80155de <ull_configure+0x5e>
 80155da:	f04f 0a20 	mov.w	sl, #32
 80155de:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80155e0:	8a53      	ldrh	r3, [r2, #18]
 80155e2:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80155e6:	8253      	strh	r3, [r2, #18]
 80155e8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80155ea:	79ea      	ldrb	r2, [r5, #7]
 80155ec:	731a      	strb	r2, [r3, #12]
 80155ee:	7b2e      	ldrb	r6, [r5, #12]
 80155f0:	1cb3      	adds	r3, r6, #2
 80155f2:	2601      	movs	r6, #1
 80155f4:	409e      	lsls	r6, r3
 80155f6:	fa1f f886 	uxth.w	r8, r6
 80155fa:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80155fc:	4bc7      	ldr	r3, [pc, #796]	; (801591c <ull_configure+0x39c>)
 80155fe:	fb03 f308 	mul.w	r3, r3, r8
 8015602:	0bdb      	lsrs	r3, r3, #15
 8015604:	8293      	strh	r3, [r2, #20]
 8015606:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8015608:	7aea      	ldrb	r2, [r5, #11]
 801560a:	75da      	strb	r2, [r3, #23]
 801560c:	7a2b      	ldrb	r3, [r5, #8]
 801560e:	015b      	lsls	r3, r3, #5
 8015610:	f003 0320 	and.w	r3, r3, #32
 8015614:	7b6a      	ldrb	r2, [r5, #13]
 8015616:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801561a:	7aea      	ldrb	r2, [r5, #11]
 801561c:	0312      	lsls	r2, r2, #12
 801561e:	f402 4230 	and.w	r2, r2, #45056	; 0xb000
 8015622:	4313      	orrs	r3, r2
 8015624:	430b      	orrs	r3, r1
 8015626:	9300      	str	r3, [sp, #0]
 8015628:	4bbd      	ldr	r3, [pc, #756]	; (8015920 <ull_configure+0x3a0>)
 801562a:	2200      	movs	r2, #0
 801562c:	2110      	movs	r1, #16
 801562e:	4620      	mov	r0, r4
 8015630:	f7ff fad0 	bl	8014bd4 <dwt_modify32bitoffsetreg>
 8015634:	2f00      	cmp	r7, #0
 8015636:	f040 80f6 	bne.w	8015826 <ull_configure+0x2a6>
 801563a:	7aeb      	ldrb	r3, [r5, #11]
 801563c:	b1f3      	cbz	r3, 801567c <ull_configure+0xfc>
 801563e:	7b6b      	ldrb	r3, [r5, #13]
 8015640:	2b01      	cmp	r3, #1
 8015642:	f240 811c 	bls.w	801587e <ull_configure+0x2fe>
 8015646:	7b2a      	ldrb	r2, [r5, #12]
 8015648:	4bb6      	ldr	r3, [pc, #728]	; (8015924 <ull_configure+0x3a4>)
 801564a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801564e:	0112      	lsls	r2, r2, #4
 8015650:	0ad3      	lsrs	r3, r2, #11
 8015652:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8015656:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801565a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 801565e:	bf28      	it	cs
 8015660:	3301      	addcs	r3, #1
 8015662:	b29b      	uxth	r3, r3
 8015664:	eb0a 0ac8 	add.w	sl, sl, r8, lsl #3
 8015668:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801566c:	9300      	str	r3, [sp, #0]
 801566e:	f64f 7380 	movw	r3, #65408	; 0xff80
 8015672:	2202      	movs	r2, #2
 8015674:	49ac      	ldr	r1, [pc, #688]	; (8015928 <ull_configure+0x3a8>)
 8015676:	4620      	mov	r0, r4
 8015678:	f7ff fe48 	bl	801530c <dwt_modify16bitoffsetreg>
 801567c:	2394      	movs	r3, #148	; 0x94
 801567e:	9300      	str	r3, [sp, #0]
 8015680:	4baa      	ldr	r3, [pc, #680]	; (801592c <ull_configure+0x3ac>)
 8015682:	2200      	movs	r2, #0
 8015684:	49aa      	ldr	r1, [pc, #680]	; (8015930 <ull_configure+0x3b0>)
 8015686:	4620      	mov	r0, r4
 8015688:	f7ff faa4 	bl	8014bd4 <dwt_modify32bitoffsetreg>
 801568c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8015690:	f340 8108 	ble.w	80158a4 <ull_configure+0x324>
 8015694:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8015696:	8a53      	ldrh	r3, [r2, #18]
 8015698:	f043 0320 	orr.w	r3, r3, #32
 801569c:	8253      	strh	r3, [r2, #18]
 801569e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80156a2:	9300      	str	r3, [sp, #0]
 80156a4:	f24e 73ff 	movw	r3, #59391	; 0xe7ff
 80156a8:	2200      	movs	r2, #0
 80156aa:	49a2      	ldr	r1, [pc, #648]	; (8015934 <ull_configure+0x3b4>)
 80156ac:	4620      	mov	r0, r4
 80156ae:	f7ff fe2d 	bl	801530c <dwt_modify16bitoffsetreg>
 80156b2:	7b6b      	ldrb	r3, [r5, #13]
 80156b4:	2b01      	cmp	r3, #1
 80156b6:	f000 8100 	beq.w	80158ba <ull_configure+0x33a>
 80156ba:	78ab      	ldrb	r3, [r5, #2]
 80156bc:	f043 0310 	orr.w	r3, r3, #16
 80156c0:	9300      	str	r3, [sp, #0]
 80156c2:	23fc      	movs	r3, #252	; 0xfc
 80156c4:	2200      	movs	r2, #0
 80156c6:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 80156ca:	4620      	mov	r0, r4
 80156cc:	f7ff fc6c 	bl	8014fa8 <dwt_modify8bitoffsetreg>
 80156d0:	1e73      	subs	r3, r6, #1
 80156d2:	b2db      	uxtb	r3, r3
 80156d4:	2200      	movs	r2, #0
 80156d6:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80156da:	4620      	mov	r0, r4
 80156dc:	f7fe fd95 	bl	801420a <dwt_write8bitoffsetreg>
 80156e0:	786b      	ldrb	r3, [r5, #1]
 80156e2:	2b07      	cmp	r3, #7
 80156e4:	bf0c      	ite	eq
 80156e6:	2308      	moveq	r3, #8
 80156e8:	2300      	movne	r3, #0
 80156ea:	2201      	movs	r2, #1
 80156ec:	2128      	movs	r1, #40	; 0x28
 80156ee:	4620      	mov	r0, r4
 80156f0:	f7fe fd8b 	bl	801420a <dwt_write8bitoffsetreg>
 80156f4:	4b90      	ldr	r3, [pc, #576]	; (8015938 <ull_configure+0x3b8>)
 80156f6:	2200      	movs	r2, #0
 80156f8:	4990      	ldr	r1, [pc, #576]	; (801593c <ull_configure+0x3bc>)
 80156fa:	4620      	mov	r0, r4
 80156fc:	f7fe fed8 	bl	80144b0 <dwt_write32bitoffsetreg>
 8015700:	2200      	movs	r2, #0
 8015702:	498f      	ldr	r1, [pc, #572]	; (8015940 <ull_configure+0x3c0>)
 8015704:	4620      	mov	r0, r4
 8015706:	f7fe f991 	bl	8013a2c <dwt_read32bitoffsetreg>
 801570a:	f420 50ff 	bic.w	r0, r0, #8160	; 0x1fe0
 801570e:	f020 001f 	bic.w	r0, r0, #31
 8015712:	f1b9 0f09 	cmp.w	r9, #9
 8015716:	bf08      	it	eq
 8015718:	f040 0001 	orreq.w	r0, r0, #1
 801571c:	792a      	ldrb	r2, [r5, #4]
 801571e:	0212      	lsls	r2, r2, #8
 8015720:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
 8015724:	78eb      	ldrb	r3, [r5, #3]
 8015726:	00db      	lsls	r3, r3, #3
 8015728:	b2db      	uxtb	r3, r3
 801572a:	431a      	orrs	r2, r3
 801572c:	796b      	ldrb	r3, [r5, #5]
 801572e:	005b      	lsls	r3, r3, #1
 8015730:	f003 0306 	and.w	r3, r3, #6
 8015734:	4313      	orrs	r3, r2
 8015736:	4303      	orrs	r3, r0
 8015738:	2200      	movs	r2, #0
 801573a:	4981      	ldr	r1, [pc, #516]	; (8015940 <ull_configure+0x3c0>)
 801573c:	4620      	mov	r0, r4
 801573e:	f7fe feb7 	bl	80144b0 <dwt_write32bitoffsetreg>
 8015742:	79aa      	ldrb	r2, [r5, #6]
 8015744:	786b      	ldrb	r3, [r5, #1]
 8015746:	031b      	lsls	r3, r3, #12
 8015748:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 801574c:	9300      	str	r3, [sp, #0]
 801574e:	f46f 4374 	mvn.w	r3, #62464	; 0xf400
 8015752:	2200      	movs	r2, #0
 8015754:	2124      	movs	r1, #36	; 0x24
 8015756:	4620      	mov	r0, r4
 8015758:	f7ff fa3c 	bl	8014bd4 <dwt_modify32bitoffsetreg>
 801575c:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 8015760:	b923      	cbnz	r3, 801576c <ull_configure+0x1ec>
 8015762:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8015766:	726b      	strb	r3, [r5, #9]
 8015768:	2300      	movs	r3, #0
 801576a:	72ab      	strb	r3, [r5, #10]
 801576c:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 8015770:	2202      	movs	r2, #2
 8015772:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 8015776:	4620      	mov	r0, r4
 8015778:	f7fe fd99 	bl	80142ae <dwt_write16bitoffsetreg>
 801577c:	2202      	movs	r2, #2
 801577e:	4971      	ldr	r1, [pc, #452]	; (8015944 <ull_configure+0x3c4>)
 8015780:	4620      	mov	r0, r4
 8015782:	f7fe f97b 	bl	8013a7c <dwt_read8bitoffsetreg>
 8015786:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8015788:	7c1b      	ldrb	r3, [r3, #16]
 801578a:	454b      	cmp	r3, r9
 801578c:	f000 809f 	beq.w	80158ce <ull_configure+0x34e>
 8015790:	2803      	cmp	r0, #3
 8015792:	f000 80a0 	beq.w	80158d6 <ull_configure+0x356>
 8015796:	f1b9 0f09 	cmp.w	r9, #9
 801579a:	f000 80a1 	beq.w	80158e0 <ull_configure+0x360>
 801579e:	4b6a      	ldr	r3, [pc, #424]	; (8015948 <ull_configure+0x3c8>)
 80157a0:	2200      	movs	r2, #0
 80157a2:	496a      	ldr	r1, [pc, #424]	; (801594c <ull_configure+0x3cc>)
 80157a4:	4620      	mov	r0, r4
 80157a6:	f7fe fe83 	bl	80144b0 <dwt_write32bitoffsetreg>
 80157aa:	f641 733c 	movw	r3, #7996	; 0x1f3c
 80157ae:	2200      	movs	r2, #0
 80157b0:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 80157b4:	4620      	mov	r0, r4
 80157b6:	f7fe fd7a 	bl	80142ae <dwt_write16bitoffsetreg>
 80157ba:	2314      	movs	r3, #20
 80157bc:	2201      	movs	r2, #1
 80157be:	4964      	ldr	r1, [pc, #400]	; (8015950 <ull_configure+0x3d0>)
 80157c0:	4620      	mov	r0, r4
 80157c2:	f7fe fd22 	bl	801420a <dwt_write8bitoffsetreg>
 80157c6:	230e      	movs	r3, #14
 80157c8:	2202      	movs	r2, #2
 80157ca:	4962      	ldr	r1, [pc, #392]	; (8015954 <ull_configure+0x3d4>)
 80157cc:	4620      	mov	r0, r4
 80157ce:	f7fe fd1c 	bl	801420a <dwt_write8bitoffsetreg>
 80157d2:	2381      	movs	r3, #129	; 0x81
 80157d4:	2200      	movs	r2, #0
 80157d6:	4960      	ldr	r1, [pc, #384]	; (8015958 <ull_configure+0x3d8>)
 80157d8:	4620      	mov	r0, r4
 80157da:	f7fe fd16 	bl	801420a <dwt_write8bitoffsetreg>
 80157de:	2302      	movs	r3, #2
 80157e0:	2200      	movs	r2, #0
 80157e2:	2144      	movs	r1, #68	; 0x44
 80157e4:	4620      	mov	r0, r4
 80157e6:	f7fe fd10 	bl	801420a <dwt_write8bitoffsetreg>
 80157ea:	2101      	movs	r1, #1
 80157ec:	4620      	mov	r0, r4
 80157ee:	f7ff fc99 	bl	8015124 <ull_setdwstate>
 80157f2:	f04f 0b32 	mov.w	fp, #50	; 0x32
 80157f6:	f04f 0814 	mov.w	r8, #20
 80157fa:	2700      	movs	r7, #0
 80157fc:	2644      	movs	r6, #68	; 0x44
 80157fe:	4640      	mov	r0, r8
 8015800:	f7eb f9c3 	bl	8000b8a <deca_usleep>
 8015804:	463a      	mov	r2, r7
 8015806:	4631      	mov	r1, r6
 8015808:	4620      	mov	r0, r4
 801580a:	f7fe f937 	bl	8013a7c <dwt_read8bitoffsetreg>
 801580e:	f010 0f02 	tst.w	r0, #2
 8015812:	f040 80ab 	bne.w	801596c <ull_configure+0x3ec>
 8015816:	f10b 33ff 	add.w	r3, fp, #4294967295
 801581a:	f013 0bff 	ands.w	fp, r3, #255	; 0xff
 801581e:	d1ee      	bne.n	80157fe <ull_configure+0x27e>
 8015820:	f06f 0001 	mvn.w	r0, #1
 8015824:	e0cf      	b.n	80159c6 <ull_configure+0x446>
 8015826:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8015828:	8a53      	ldrh	r3, [r2, #18]
 801582a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 801582e:	8253      	strh	r3, [r2, #18]
 8015830:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8015834:	9300      	str	r3, [sp, #0]
 8015836:	f46f 53c0 	mvn.w	r3, #6144	; 0x1800
 801583a:	2200      	movs	r2, #0
 801583c:	493d      	ldr	r1, [pc, #244]	; (8015934 <ull_configure+0x3b4>)
 801583e:	4620      	mov	r0, r4
 8015840:	f7ff f9c8 	bl	8014bd4 <dwt_modify32bitoffsetreg>
 8015844:	f240 3306 	movw	r3, #774	; 0x306
 8015848:	2200      	movs	r2, #0
 801584a:	4944      	ldr	r1, [pc, #272]	; (801595c <ull_configure+0x3dc>)
 801584c:	4620      	mov	r0, r4
 801584e:	f7fe fe2f 	bl	80144b0 <dwt_write32bitoffsetreg>
 8015852:	2300      	movs	r3, #0
 8015854:	461a      	mov	r2, r3
 8015856:	f04f 110e 	mov.w	r1, #917518	; 0xe000e
 801585a:	4620      	mov	r0, r4
 801585c:	f7fe fe28 	bl	80144b0 <dwt_write32bitoffsetreg>
 8015860:	4b3f      	ldr	r3, [pc, #252]	; (8015960 <ull_configure+0x3e0>)
 8015862:	2200      	movs	r2, #0
 8015864:	4930      	ldr	r1, [pc, #192]	; (8015928 <ull_configure+0x3a8>)
 8015866:	4620      	mov	r0, r4
 8015868:	f7fe fe22 	bl	80144b0 <dwt_write32bitoffsetreg>
 801586c:	239d      	movs	r3, #157	; 0x9d
 801586e:	9300      	str	r3, [sp, #0]
 8015870:	4b2e      	ldr	r3, [pc, #184]	; (801592c <ull_configure+0x3ac>)
 8015872:	2200      	movs	r2, #0
 8015874:	492e      	ldr	r1, [pc, #184]	; (8015930 <ull_configure+0x3b0>)
 8015876:	4620      	mov	r0, r4
 8015878:	f7ff f9ac 	bl	8014bd4 <dwt_modify32bitoffsetreg>
 801587c:	e719      	b.n	80156b2 <ull_configure+0x132>
 801587e:	7b2a      	ldrb	r2, [r5, #12]
 8015880:	4b28      	ldr	r3, [pc, #160]	; (8015924 <ull_configure+0x3a4>)
 8015882:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8015886:	f44f 6235 	mov.w	r2, #2896	; 0xb50
 801588a:	fb02 f203 	mul.w	r2, r2, r3
 801588e:	0c93      	lsrs	r3, r2, #18
 8015890:	f3c2 12ca 	ubfx	r2, r2, #7, #11
 8015894:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8015898:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 801589c:	bf28      	it	cs
 801589e:	3301      	addcs	r3, #1
 80158a0:	b29b      	uxth	r3, r3
 80158a2:	e6df      	b.n	8015664 <ull_configure+0xe4>
 80158a4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80158a8:	9300      	str	r3, [sp, #0]
 80158aa:	f24e 73ff 	movw	r3, #59391	; 0xe7ff
 80158ae:	2200      	movs	r2, #0
 80158b0:	4920      	ldr	r1, [pc, #128]	; (8015934 <ull_configure+0x3b4>)
 80158b2:	4620      	mov	r0, r4
 80158b4:	f7ff fd2a 	bl	801530c <dwt_modify16bitoffsetreg>
 80158b8:	e6fb      	b.n	80156b2 <ull_configure+0x132>
 80158ba:	78ab      	ldrb	r3, [r5, #2]
 80158bc:	9300      	str	r3, [sp, #0]
 80158be:	23ec      	movs	r3, #236	; 0xec
 80158c0:	2200      	movs	r2, #0
 80158c2:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 80158c6:	4620      	mov	r0, r4
 80158c8:	f7ff fb6e 	bl	8014fa8 <dwt_modify8bitoffsetreg>
 80158cc:	e700      	b.n	80156d0 <ull_configure+0x150>
 80158ce:	2803      	cmp	r0, #3
 80158d0:	f47f af61 	bne.w	8015796 <ull_configure+0x216>
 80158d4:	e04d      	b.n	8015972 <ull_configure+0x3f2>
 80158d6:	2102      	movs	r1, #2
 80158d8:	4620      	mov	r0, r4
 80158da:	f7ff fc23 	bl	8015124 <ull_setdwstate>
 80158de:	e75a      	b.n	8015796 <ull_configure+0x216>
 80158e0:	4b20      	ldr	r3, [pc, #128]	; (8015964 <ull_configure+0x3e4>)
 80158e2:	2200      	movs	r2, #0
 80158e4:	4919      	ldr	r1, [pc, #100]	; (801594c <ull_configure+0x3cc>)
 80158e6:	4620      	mov	r0, r4
 80158e8:	f7fe fde2 	bl	80144b0 <dwt_write32bitoffsetreg>
 80158ec:	f640 733c 	movw	r3, #3900	; 0xf3c
 80158f0:	2200      	movs	r2, #0
 80158f2:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 80158f6:	4620      	mov	r0, r4
 80158f8:	f7fe fcd9 	bl	80142ae <dwt_write16bitoffsetreg>
 80158fc:	e75d      	b.n	80157ba <ull_configure+0x23a>
 80158fe:	fa4f f189 	sxtb.w	r1, r9
 8015902:	4620      	mov	r0, r4
 8015904:	f7ff f98a 	bl	8014c1c <_dwt_kick_dgc_on_wakeup>
 8015908:	e040      	b.n	801598c <ull_configure+0x40c>
 801590a:	2200      	movs	r2, #0
 801590c:	9200      	str	r2, [sp, #0]
 801590e:	23fe      	movs	r3, #254	; 0xfe
 8015910:	4915      	ldr	r1, [pc, #84]	; (8015968 <ull_configure+0x3e8>)
 8015912:	4620      	mov	r0, r4
 8015914:	f7ff fb48 	bl	8014fa8 <dwt_modify8bitoffsetreg>
 8015918:	e042      	b.n	80159a0 <ull_configure+0x420>
 801591a:	bf00      	nop
 801591c:	00026668 	.word	0x00026668
 8015920:	fffc4fcf 	.word	0xfffc4fcf
 8015924:	0802124c 	.word	0x0802124c
 8015928:	000e0012 	.word	0x000e0012
 801592c:	bfffff00 	.word	0xbfffff00
 8015930:	000e0016 	.word	0x000e0016
 8015934:	000b0008 	.word	0x000b0008
 8015938:	af5f35cc 	.word	0xaf5f35cc
 801593c:	0006000c 	.word	0x0006000c
 8015940:	00010014 	.word	0x00010014
 8015944:	000f0030 	.word	0x000f0030
 8015948:	1c071134 	.word	0x1c071134
 801594c:	0007001c 	.word	0x0007001c
 8015950:	00070050 	.word	0x00070050
 8015954:	00070018 	.word	0x00070018
 8015958:	00090008 	.word	0x00090008
 801595c:	000e000c 	.word	0x000e000c
 8015960:	000c5a0a 	.word	0x000c5a0a
 8015964:	1c010034 	.word	0x1c010034
 8015968:	00030018 	.word	0x00030018
 801596c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801596e:	f883 9010 	strb.w	r9, [r3, #16]
 8015972:	792b      	ldrb	r3, [r5, #4]
 8015974:	3b09      	subs	r3, #9
 8015976:	b2db      	uxtb	r3, r3
 8015978:	2b0f      	cmp	r3, #15
 801597a:	d8c6      	bhi.n	801590a <ull_configure+0x38a>
 801597c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801597e:	7a5b      	ldrb	r3, [r3, #9]
 8015980:	2b01      	cmp	r3, #1
 8015982:	d0bc      	beq.n	80158fe <ull_configure+0x37e>
 8015984:	4649      	mov	r1, r9
 8015986:	4620      	mov	r0, r4
 8015988:	f7fe ffae 	bl	80148e8 <ull_configmrxlut>
 801598c:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8015990:	9300      	str	r3, [sp, #0]
 8015992:	f248 13ff 	movw	r3, #33279	; 0x81ff
 8015996:	2200      	movs	r2, #0
 8015998:	490c      	ldr	r1, [pc, #48]	; (80159cc <ull_configure+0x44c>)
 801599a:	4620      	mov	r0, r4
 801599c:	f7ff fcb6 	bl	801530c <dwt_modify16bitoffsetreg>
 80159a0:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 80159a4:	bfcc      	ite	gt
 80159a6:	f04f 5300 	movgt.w	r3, #536870912	; 0x20000000
 80159aa:	f04f 53a0 	movle.w	r3, #335544320	; 0x14000000
 80159ae:	9300      	str	r3, [sp, #0]
 80159b0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80159b4:	2200      	movs	r2, #0
 80159b6:	4906      	ldr	r1, [pc, #24]	; (80159d0 <ull_configure+0x450>)
 80159b8:	4620      	mov	r0, r4
 80159ba:	f7ff f90b 	bl	8014bd4 <dwt_modify32bitoffsetreg>
 80159be:	2101      	movs	r1, #1
 80159c0:	4620      	mov	r0, r4
 80159c2:	f7ff fd27 	bl	8015414 <ull_pgf_cal>
 80159c6:	b003      	add	sp, #12
 80159c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159cc:	00030018 	.word	0x00030018
 80159d0:	00060010 	.word	0x00060010

080159d4 <dwt_ioctl>:
 80159d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159d8:	b091      	sub	sp, #68	; 0x44
 80159da:	4606      	mov	r6, r0
 80159dc:	4615      	mov	r5, r2
 80159de:	461c      	mov	r4, r3
 80159e0:	299c      	cmp	r1, #156	; 0x9c
 80159e2:	f200 809f 	bhi.w	8015b24 <dwt_ioctl+0x150>
 80159e6:	e8df f011 	tbh	[pc, r1, lsl #1]
 80159ea:	0a65      	.short	0x0a65
 80159ec:	00a30a70 	.word	0x00a30a70
 80159f0:	00be00a7 	.word	0x00be00a7
 80159f4:	018e0148 	.word	0x018e0148
 80159f8:	0152016b 	.word	0x0152016b
 80159fc:	01a9019e 	.word	0x01a9019e
 8015a00:	01b901b1 	.word	0x01b901b1
 8015a04:	01c901c1 	.word	0x01c901c1
 8015a08:	01d501d1 	.word	0x01d501d1
 8015a0c:	026e01dd 	.word	0x026e01dd
 8015a10:	0281027c 	.word	0x0281027c
 8015a14:	0290028b 	.word	0x0290028b
 8015a18:	029e0295 	.word	0x029e0295
 8015a1c:	030902a3 	.word	0x030902a3
 8015a20:	0326031b 	.word	0x0326031b
 8015a24:	033b0331 	.word	0x033b0331
 8015a28:	03690373 	.word	0x03690373
 8015a2c:	0345035f 	.word	0x0345035f
 8015a30:	03c10352 	.word	0x03c10352
 8015a34:	022b01f8 	.word	0x022b01f8
 8015a38:	02410239 	.word	0x02410239
 8015a3c:	098e0255 	.word	0x098e0255
 8015a40:	03820993 	.word	0x03820993
 8015a44:	03e303df 	.word	0x03e303df
 8015a48:	03f103ec 	.word	0x03f103ec
 8015a4c:	040503fb 	.word	0x040503fb
 8015a50:	0437040d 	.word	0x0437040d
 8015a54:	044e0443 	.word	0x044e0443
 8015a58:	04590378 	.word	0x04590378
 8015a5c:	04740462 	.word	0x04740462
 8015a60:	049e048d 	.word	0x049e048d
 8015a64:	04ea04e0 	.word	0x04ea04e0
 8015a68:	051a050b 	.word	0x051a050b
 8015a6c:	05230535 	.word	0x05230535
 8015a70:	05970551 	.word	0x05970551
 8015a74:	05c405aa 	.word	0x05c405aa
 8015a78:	05ed05d9 	.word	0x05ed05d9
 8015a7c:	061205f6 	.word	0x061205f6
 8015a80:	076b05ff 	.word	0x076b05ff
 8015a84:	07e50797 	.word	0x07e50797
 8015a88:	07f607eb 	.word	0x07f607eb
 8015a8c:	082f080f 	.word	0x082f080f
 8015a90:	08430839 	.word	0x08430839
 8015a94:	087a0871 	.word	0x087a0871
 8015a98:	08890880 	.word	0x08890880
 8015a9c:	08a30896 	.word	0x08a30896
 8015aa0:	08b608ad 	.word	0x08b608ad
 8015aa4:	08ca08bf 	.word	0x08ca08bf
 8015aa8:	08db08d5 	.word	0x08db08d5
 8015aac:	090908fe 	.word	0x090908fe
 8015ab0:	093d0914 	.word	0x093d0914
 8015ab4:	096a095f 	.word	0x096a095f
 8015ab8:	09990983 	.word	0x09990983
 8015abc:	0a180a0e 	.word	0x0a180a0e
 8015ac0:	0a780a23 	.word	0x0a780a23
 8015ac4:	0a5a0a2d 	.word	0x0a5a0a2d
 8015ac8:	09d70789 	.word	0x09d70789
 8015acc:	0ae609f8 	.word	0x0ae609f8
 8015ad0:	0a850adb 	.word	0x0a850adb
 8015ad4:	0a9b0a90 	.word	0x0a9b0a90
 8015ad8:	0ab10aa6 	.word	0x0ab10aa6
 8015adc:	0ac70abc 	.word	0x0ac70abc
 8015ae0:	0bd00ad0 	.word	0x0bd00ad0
 8015ae4:	0c450c0a 	.word	0x0c450c0a
 8015ae8:	0d210c68 	.word	0x0d210c68
 8015aec:	0b110d36 	.word	0x0b110d36
 8015af0:	009d009d 	.word	0x009d009d
 8015af4:	009d009d 	.word	0x009d009d
 8015af8:	009d009d 	.word	0x009d009d
 8015afc:	009d009d 	.word	0x009d009d
 8015b00:	009d009d 	.word	0x009d009d
 8015b04:	009d009d 	.word	0x009d009d
 8015b08:	009d009d 	.word	0x009d009d
 8015b0c:	009d009d 	.word	0x009d009d
 8015b10:	009d009d 	.word	0x009d009d
 8015b14:	0c7f009d 	.word	0x0c7f009d
 8015b18:	0dc60c9d 	.word	0x0dc60c9d
 8015b1c:	0cdc0ce7 	.word	0x0cdc0ce7
 8015b20:	0cf20cfb 	.word	0x0cf20cfb
 8015b24:	f04f 35ff 	mov.w	r5, #4294967295
 8015b28:	4628      	mov	r0, r5
 8015b2a:	b011      	add	sp, #68	; 0x44
 8015b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b30:	6843      	ldr	r3, [r0, #4]
 8015b32:	4798      	blx	r3
 8015b34:	2500      	movs	r5, #0
 8015b36:	e7f7      	b.n	8015b28 <dwt_ioctl+0x154>
 8015b38:	2202      	movs	r2, #2
 8015b3a:	49b7      	ldr	r1, [pc, #732]	; (8015e18 <dwt_ioctl+0x444>)
 8015b3c:	f7fd ff9e 	bl	8013a7c <dwt_read8bitoffsetreg>
 8015b40:	2803      	cmp	r0, #3
 8015b42:	d801      	bhi.n	8015b48 <dwt_ioctl+0x174>
 8015b44:	2500      	movs	r5, #0
 8015b46:	e7ef      	b.n	8015b28 <dwt_ioctl+0x154>
 8015b48:	f7ea fff6 	bl	8000b38 <decamutexon>
 8015b4c:	4604      	mov	r4, r0
 8015b4e:	2500      	movs	r5, #0
 8015b50:	9500      	str	r5, [sp, #0]
 8015b52:	462b      	mov	r3, r5
 8015b54:	462a      	mov	r2, r5
 8015b56:	4629      	mov	r1, r5
 8015b58:	4630      	mov	r0, r6
 8015b5a:	f7fe fb4b 	bl	80141f4 <dwt_writetodevice>
 8015b5e:	4620      	mov	r0, r4
 8015b60:	f7ea fffb 	bl	8000b5a <decamutexoff>
 8015b64:	e7e0      	b.n	8015b28 <dwt_ioctl+0x154>
 8015b66:	2c00      	cmp	r4, #0
 8015b68:	f001 8508 	beq.w	801757c <dwt_ioctl+0x1ba8>
 8015b6c:	7824      	ldrb	r4, [r4, #0]
 8015b6e:	f014 0f1d 	tst.w	r4, #29
 8015b72:	d065      	beq.n	8015c40 <dwt_ioctl+0x26c>
 8015b74:	f014 0f01 	tst.w	r4, #1
 8015b78:	d026      	beq.n	8015bc8 <dwt_ioctl+0x1f4>
 8015b7a:	f014 0f02 	tst.w	r4, #2
 8015b7e:	f04f 0200 	mov.w	r2, #0
 8015b82:	9200      	str	r2, [sp, #0]
 8015b84:	4613      	mov	r3, r2
 8015b86:	bf14      	ite	ne
 8015b88:	210d      	movne	r1, #13
 8015b8a:	2103      	moveq	r1, #3
 8015b8c:	f7fe fb32 	bl	80141f4 <dwt_writetodevice>
 8015b90:	2203      	movs	r2, #3
 8015b92:	2144      	movs	r1, #68	; 0x44
 8015b94:	4630      	mov	r0, r6
 8015b96:	f7fd ff71 	bl	8013a7c <dwt_read8bitoffsetreg>
 8015b9a:	f010 0f08 	tst.w	r0, #8
 8015b9e:	d145      	bne.n	8015c2c <dwt_ioctl+0x258>
 8015ba0:	2200      	movs	r2, #0
 8015ba2:	499d      	ldr	r1, [pc, #628]	; (8015e18 <dwt_ioctl+0x444>)
 8015ba4:	4630      	mov	r0, r6
 8015ba6:	f7fd ff41 	bl	8013a2c <dwt_read32bitoffsetreg>
 8015baa:	f5b0 2f50 	cmp.w	r0, #851968	; 0xd0000
 8015bae:	bf18      	it	ne
 8015bb0:	2500      	movne	r5, #0
 8015bb2:	d1b9      	bne.n	8015b28 <dwt_ioctl+0x154>
 8015bb4:	2100      	movs	r1, #0
 8015bb6:	9100      	str	r1, [sp, #0]
 8015bb8:	460b      	mov	r3, r1
 8015bba:	460a      	mov	r2, r1
 8015bbc:	4630      	mov	r0, r6
 8015bbe:	f7fe fb19 	bl	80141f4 <dwt_writetodevice>
 8015bc2:	f04f 35ff 	mov.w	r5, #4294967295
 8015bc6:	e7af      	b.n	8015b28 <dwt_ioctl+0x154>
 8015bc8:	f014 0f08 	tst.w	r4, #8
 8015bcc:	d10e      	bne.n	8015bec <dwt_ioctl+0x218>
 8015bce:	f014 0f10 	tst.w	r4, #16
 8015bd2:	d11b      	bne.n	8015c0c <dwt_ioctl+0x238>
 8015bd4:	f014 0f02 	tst.w	r4, #2
 8015bd8:	f04f 0200 	mov.w	r2, #0
 8015bdc:	9200      	str	r2, [sp, #0]
 8015bde:	4613      	mov	r3, r2
 8015be0:	bf14      	ite	ne
 8015be2:	2110      	movne	r1, #16
 8015be4:	2109      	moveq	r1, #9
 8015be6:	f7fe fb05 	bl	80141f4 <dwt_writetodevice>
 8015bea:	e7d1      	b.n	8015b90 <dwt_ioctl+0x1bc>
 8015bec:	2100      	movs	r1, #0
 8015bee:	f7fe fdd3 	bl	8014798 <_dwt_adjust_delaytime>
 8015bf2:	f014 0f02 	tst.w	r4, #2
 8015bf6:	f04f 0200 	mov.w	r2, #0
 8015bfa:	9200      	str	r2, [sp, #0]
 8015bfc:	4613      	mov	r3, r2
 8015bfe:	bf14      	ite	ne
 8015c00:	210f      	movne	r1, #15
 8015c02:	2107      	moveq	r1, #7
 8015c04:	4630      	mov	r0, r6
 8015c06:	f7fe faf5 	bl	80141f4 <dwt_writetodevice>
 8015c0a:	e7c1      	b.n	8015b90 <dwt_ioctl+0x1bc>
 8015c0c:	2101      	movs	r1, #1
 8015c0e:	f7fe fdc3 	bl	8014798 <_dwt_adjust_delaytime>
 8015c12:	f014 0f02 	tst.w	r4, #2
 8015c16:	f04f 0200 	mov.w	r2, #0
 8015c1a:	9200      	str	r2, [sp, #0]
 8015c1c:	4613      	mov	r3, r2
 8015c1e:	bf14      	ite	ne
 8015c20:	210e      	movne	r1, #14
 8015c22:	2105      	moveq	r1, #5
 8015c24:	4630      	mov	r0, r6
 8015c26:	f7fe fae5 	bl	80141f4 <dwt_writetodevice>
 8015c2a:	e7b1      	b.n	8015b90 <dwt_ioctl+0x1bc>
 8015c2c:	2100      	movs	r1, #0
 8015c2e:	9100      	str	r1, [sp, #0]
 8015c30:	460b      	mov	r3, r1
 8015c32:	460a      	mov	r2, r1
 8015c34:	4630      	mov	r0, r6
 8015c36:	f7fe fadd 	bl	80141f4 <dwt_writetodevice>
 8015c3a:	f04f 35ff 	mov.w	r5, #4294967295
 8015c3e:	e773      	b.n	8015b28 <dwt_ioctl+0x154>
 8015c40:	f014 0f20 	tst.w	r4, #32
 8015c44:	d00c      	beq.n	8015c60 <dwt_ioctl+0x28c>
 8015c46:	f014 0f02 	tst.w	r4, #2
 8015c4a:	f04f 0500 	mov.w	r5, #0
 8015c4e:	9500      	str	r5, [sp, #0]
 8015c50:	462b      	mov	r3, r5
 8015c52:	462a      	mov	r2, r5
 8015c54:	bf14      	ite	ne
 8015c56:	2111      	movne	r1, #17
 8015c58:	210b      	moveq	r1, #11
 8015c5a:	f7fe facb 	bl	80141f4 <dwt_writetodevice>
 8015c5e:	e763      	b.n	8015b28 <dwt_ioctl+0x154>
 8015c60:	f014 0f02 	tst.w	r4, #2
 8015c64:	f04f 0500 	mov.w	r5, #0
 8015c68:	9500      	str	r5, [sp, #0]
 8015c6a:	462b      	mov	r3, r5
 8015c6c:	462a      	mov	r2, r5
 8015c6e:	bf14      	ite	ne
 8015c70:	210c      	movne	r1, #12
 8015c72:	2101      	moveq	r1, #1
 8015c74:	f7fe fabe 	bl	80141f4 <dwt_writetodevice>
 8015c78:	e756      	b.n	8015b28 <dwt_ioctl+0x154>
 8015c7a:	2c00      	cmp	r4, #0
 8015c7c:	f001 8481 	beq.w	8017582 <dwt_ioctl+0x1bae>
 8015c80:	6823      	ldr	r3, [r4, #0]
 8015c82:	2200      	movs	r2, #0
 8015c84:	212c      	movs	r1, #44	; 0x2c
 8015c86:	f7fe fc13 	bl	80144b0 <dwt_write32bitoffsetreg>
 8015c8a:	2500      	movs	r5, #0
 8015c8c:	e74c      	b.n	8015b28 <dwt_ioctl+0x154>
 8015c8e:	6823      	ldr	r3, [r4, #0]
 8015c90:	2200      	movs	r2, #0
 8015c92:	4962      	ldr	r1, [pc, #392]	; (8015e1c <dwt_ioctl+0x448>)
 8015c94:	f7fe fc0c 	bl	80144b0 <dwt_write32bitoffsetreg>
 8015c98:	6863      	ldr	r3, [r4, #4]
 8015c9a:	2200      	movs	r2, #0
 8015c9c:	4960      	ldr	r1, [pc, #384]	; (8015e20 <dwt_ioctl+0x44c>)
 8015c9e:	4630      	mov	r0, r6
 8015ca0:	f7fe fc06 	bl	80144b0 <dwt_write32bitoffsetreg>
 8015ca4:	68a3      	ldr	r3, [r4, #8]
 8015ca6:	2200      	movs	r2, #0
 8015ca8:	495e      	ldr	r1, [pc, #376]	; (8015e24 <dwt_ioctl+0x450>)
 8015caa:	4630      	mov	r0, r6
 8015cac:	f7fe fc00 	bl	80144b0 <dwt_write32bitoffsetreg>
 8015cb0:	68e3      	ldr	r3, [r4, #12]
 8015cb2:	2200      	movs	r2, #0
 8015cb4:	495c      	ldr	r1, [pc, #368]	; (8015e28 <dwt_ioctl+0x454>)
 8015cb6:	4630      	mov	r0, r6
 8015cb8:	f7fe fbfa 	bl	80144b0 <dwt_write32bitoffsetreg>
 8015cbc:	2500      	movs	r5, #0
 8015cbe:	e733      	b.n	8015b28 <dwt_ioctl+0x154>
 8015cc0:	2c00      	cmp	r4, #0
 8015cc2:	f001 8461 	beq.w	8017588 <dwt_ioctl+0x1bb4>
 8015cc6:	8823      	ldrh	r3, [r4, #0]
 8015cc8:	6865      	ldr	r5, [r4, #4]
 8015cca:	2d03      	cmp	r5, #3
 8015ccc:	f201 845f 	bhi.w	801758e <dwt_ioctl+0x1bba>
 8015cd0:	e8df f005 	tbb	[pc, r5]
 8015cd4:	130d0702 	.word	0x130d0702
 8015cd8:	2200      	movs	r2, #0
 8015cda:	4954      	ldr	r1, [pc, #336]	; (8015e2c <dwt_ioctl+0x458>)
 8015cdc:	f7fe fae7 	bl	80142ae <dwt_write16bitoffsetreg>
 8015ce0:	e722      	b.n	8015b28 <dwt_ioctl+0x154>
 8015ce2:	2202      	movs	r2, #2
 8015ce4:	4951      	ldr	r1, [pc, #324]	; (8015e2c <dwt_ioctl+0x458>)
 8015ce6:	f7fe fae2 	bl	80142ae <dwt_write16bitoffsetreg>
 8015cea:	2500      	movs	r5, #0
 8015cec:	e71c      	b.n	8015b28 <dwt_ioctl+0x154>
 8015cee:	2200      	movs	r2, #0
 8015cf0:	494f      	ldr	r1, [pc, #316]	; (8015e30 <dwt_ioctl+0x45c>)
 8015cf2:	f7fe fadc 	bl	80142ae <dwt_write16bitoffsetreg>
 8015cf6:	2500      	movs	r5, #0
 8015cf8:	e716      	b.n	8015b28 <dwt_ioctl+0x154>
 8015cfa:	2202      	movs	r2, #2
 8015cfc:	494c      	ldr	r1, [pc, #304]	; (8015e30 <dwt_ioctl+0x45c>)
 8015cfe:	f7fe fad6 	bl	80142ae <dwt_write16bitoffsetreg>
 8015d02:	2500      	movs	r5, #0
 8015d04:	e710      	b.n	8015b28 <dwt_ioctl+0x154>
 8015d06:	2c00      	cmp	r4, #0
 8015d08:	f001 8444 	beq.w	8017594 <dwt_ioctl+0x1bc0>
 8015d0c:	7823      	ldrb	r3, [r4, #0]
 8015d0e:	005b      	lsls	r3, r3, #1
 8015d10:	f003 0306 	and.w	r3, r3, #6
 8015d14:	9300      	str	r3, [sp, #0]
 8015d16:	f06f 0306 	mvn.w	r3, #6
 8015d1a:	2200      	movs	r2, #0
 8015d1c:	4945      	ldr	r1, [pc, #276]	; (8015e34 <dwt_ioctl+0x460>)
 8015d1e:	f7fe ff59 	bl	8014bd4 <dwt_modify32bitoffsetreg>
 8015d22:	2500      	movs	r5, #0
 8015d24:	e700      	b.n	8015b28 <dwt_ioctl+0x154>
 8015d26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8015d2a:	9300      	str	r3, [sp, #0]
 8015d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8015d30:	2200      	movs	r2, #0
 8015d32:	4941      	ldr	r1, [pc, #260]	; (8015e38 <dwt_ioctl+0x464>)
 8015d34:	f7fe ff4e 	bl	8014bd4 <dwt_modify32bitoffsetreg>
 8015d38:	2500      	movs	r5, #0
 8015d3a:	e6f5      	b.n	8015b28 <dwt_ioctl+0x154>
 8015d3c:	2c00      	cmp	r4, #0
 8015d3e:	f001 842c 	beq.w	801759a <dwt_ioctl+0x1bc6>
 8015d42:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8015d44:	7b5b      	ldrb	r3, [r3, #13]
 8015d46:	7023      	strb	r3, [r4, #0]
 8015d48:	2500      	movs	r5, #0
 8015d4a:	e6ed      	b.n	8015b28 <dwt_ioctl+0x154>
 8015d4c:	2c00      	cmp	r4, #0
 8015d4e:	f001 8427 	beq.w	80175a0 <dwt_ioctl+0x1bcc>
 8015d52:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8015d54:	7a9b      	ldrb	r3, [r3, #10]
 8015d56:	7023      	strb	r3, [r4, #0]
 8015d58:	2500      	movs	r5, #0
 8015d5a:	e6e5      	b.n	8015b28 <dwt_ioctl+0x154>
 8015d5c:	2c00      	cmp	r4, #0
 8015d5e:	f001 8422 	beq.w	80175a6 <dwt_ioctl+0x1bd2>
 8015d62:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8015d64:	7adb      	ldrb	r3, [r3, #11]
 8015d66:	7023      	strb	r3, [r4, #0]
 8015d68:	2500      	movs	r5, #0
 8015d6a:	e6dd      	b.n	8015b28 <dwt_ioctl+0x154>
 8015d6c:	2c00      	cmp	r4, #0
 8015d6e:	f001 841d 	beq.w	80175ac <dwt_ioctl+0x1bd8>
 8015d72:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8015d74:	681b      	ldr	r3, [r3, #0]
 8015d76:	6023      	str	r3, [r4, #0]
 8015d78:	2500      	movs	r5, #0
 8015d7a:	e6d5      	b.n	8015b28 <dwt_ioctl+0x154>
 8015d7c:	2c00      	cmp	r4, #0
 8015d7e:	f001 8418 	beq.w	80175b2 <dwt_ioctl+0x1bde>
 8015d82:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8015d84:	685b      	ldr	r3, [r3, #4]
 8015d86:	6023      	str	r3, [r4, #0]
 8015d88:	2500      	movs	r5, #0
 8015d8a:	e6cd      	b.n	8015b28 <dwt_ioctl+0x154>
 8015d8c:	f7fe fb7e 	bl	801448c <ull_signal_rx_buff_free>
 8015d90:	2500      	movs	r5, #0
 8015d92:	e6c9      	b.n	8015b28 <dwt_ioctl+0x154>
 8015d94:	2c00      	cmp	r4, #0
 8015d96:	f001 840f 	beq.w	80175b8 <dwt_ioctl+0x1be4>
 8015d9a:	6821      	ldr	r1, [r4, #0]
 8015d9c:	f7fe fd24 	bl	80147e8 <ull_setrxaftertxdelay>
 8015da0:	2500      	movs	r5, #0
 8015da2:	e6c1      	b.n	8015b28 <dwt_ioctl+0x154>
 8015da4:	2c00      	cmp	r4, #0
 8015da6:	f001 840a 	beq.w	80175be <dwt_ioctl+0x1bea>
 8015daa:	7825      	ldrb	r5, [r4, #0]
 8015dac:	b15d      	cbz	r5, 8015dc6 <dwt_ioctl+0x3f2>
 8015dae:	6864      	ldr	r4, [r4, #4]
 8015db0:	2340      	movs	r3, #64	; 0x40
 8015db2:	9300      	str	r3, [sp, #0]
 8015db4:	23ff      	movs	r3, #255	; 0xff
 8015db6:	2200      	movs	r2, #0
 8015db8:	2110      	movs	r1, #16
 8015dba:	f7ff f8f5 	bl	8014fa8 <dwt_modify8bitoffsetreg>
 8015dbe:	2d02      	cmp	r5, #2
 8015dc0:	d107      	bne.n	8015dd2 <dwt_ioctl+0x3fe>
 8015dc2:	60f4      	str	r4, [r6, #12]
 8015dc4:	e005      	b.n	8015dd2 <dwt_ioctl+0x3fe>
 8015dc6:	2200      	movs	r2, #0
 8015dc8:	9200      	str	r2, [sp, #0]
 8015dca:	23bf      	movs	r3, #191	; 0xbf
 8015dcc:	2110      	movs	r1, #16
 8015dce:	f7ff f8eb 	bl	8014fa8 <dwt_modify8bitoffsetreg>
 8015dd2:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8015dd4:	759d      	strb	r5, [r3, #22]
 8015dd6:	2500      	movs	r5, #0
 8015dd8:	e6a6      	b.n	8015b28 <dwt_ioctl+0x154>
 8015dda:	2c00      	cmp	r4, #0
 8015ddc:	f001 83f2 	beq.w	80175c4 <dwt_ioctl+0x1bf0>
 8015de0:	6865      	ldr	r5, [r4, #4]
 8015de2:	7823      	ldrb	r3, [r4, #0]
 8015de4:	2203      	movs	r2, #3
 8015de6:	4915      	ldr	r1, [pc, #84]	; (8015e3c <dwt_ioctl+0x468>)
 8015de8:	f7fe fa0f 	bl	801420a <dwt_write8bitoffsetreg>
 8015dec:	b945      	cbnz	r5, 8015e00 <dwt_ioctl+0x42c>
 8015dee:	2200      	movs	r2, #0
 8015df0:	9200      	str	r2, [sp, #0]
 8015df2:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8015df6:	2110      	movs	r1, #16
 8015df8:	4630      	mov	r0, r6
 8015dfa:	f7ff fa87 	bl	801530c <dwt_modify16bitoffsetreg>
 8015dfe:	e693      	b.n	8015b28 <dwt_ioctl+0x154>
 8015e00:	f44f 2381 	mov.w	r3, #264192	; 0x40800
 8015e04:	9300      	str	r3, [sp, #0]
 8015e06:	f04f 33ff 	mov.w	r3, #4294967295
 8015e0a:	2200      	movs	r2, #0
 8015e0c:	2110      	movs	r1, #16
 8015e0e:	4630      	mov	r0, r6
 8015e10:	f7fe fee0 	bl	8014bd4 <dwt_modify32bitoffsetreg>
 8015e14:	2500      	movs	r5, #0
 8015e16:	e687      	b.n	8015b28 <dwt_ioctl+0x154>
 8015e18:	000f0030 	.word	0x000f0030
 8015e1c:	00010054 	.word	0x00010054
 8015e20:	00010058 	.word	0x00010058
 8015e24:	0001005c 	.word	0x0001005c
 8015e28:	00010060 	.word	0x00010060
 8015e2c:	00010018 	.word	0x00010018
 8015e30:	0001001c 	.word	0x0001001c
 8015e34:	00010014 	.word	0x00010014
 8015e38:	00110004 	.word	0x00110004
 8015e3c:	00010008 	.word	0x00010008
 8015e40:	2200      	movs	r2, #0
 8015e42:	4611      	mov	r1, r2
 8015e44:	f7fd fdf2 	bl	8013a2c <dwt_read32bitoffsetreg>
 8015e48:	68b2      	ldr	r2, [r6, #8]
 8015e4a:	6813      	ldr	r3, [r2, #0]
 8015e4c:	4043      	eors	r3, r0
 8015e4e:	6852      	ldr	r2, [r2, #4]
 8015e50:	4213      	tst	r3, r2
 8015e52:	bf14      	ite	ne
 8015e54:	f04f 35ff 	movne.w	r5, #4294967295
 8015e58:	2500      	moveq	r5, #0
 8015e5a:	e665      	b.n	8015b28 <dwt_ioctl+0x154>
 8015e5c:	2c00      	cmp	r4, #0
 8015e5e:	f001 83b4 	beq.w	80175ca <dwt_ioctl+0x1bf6>
 8015e62:	7821      	ldrb	r1, [r4, #0]
 8015e64:	f7ff f8b4 	bl	8014fd0 <ull_configciadiag>
 8015e68:	2500      	movs	r5, #0
 8015e6a:	e65d      	b.n	8015b28 <dwt_ioctl+0x154>
 8015e6c:	b93a      	cbnz	r2, 8015e7e <dwt_ioctl+0x4aa>
 8015e6e:	2200      	movs	r2, #0
 8015e70:	9200      	str	r2, [sp, #0]
 8015e72:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8015e76:	49ae      	ldr	r1, [pc, #696]	; (8016130 <dwt_ioctl+0x75c>)
 8015e78:	f7ff fa48 	bl	801530c <dwt_modify16bitoffsetreg>
 8015e7c:	e654      	b.n	8015b28 <dwt_ioctl+0x154>
 8015e7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015e82:	9300      	str	r3, [sp, #0]
 8015e84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015e88:	2200      	movs	r2, #0
 8015e8a:	49a9      	ldr	r1, [pc, #676]	; (8016130 <dwt_ioctl+0x75c>)
 8015e8c:	f7ff fa3e 	bl	801530c <dwt_modify16bitoffsetreg>
 8015e90:	2500      	movs	r5, #0
 8015e92:	e649      	b.n	8015b28 <dwt_ioctl+0x154>
 8015e94:	f002 0201 	and.w	r2, r2, #1
 8015e98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015e9c:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 8015ea0:	2a00      	cmp	r2, #0
 8015ea2:	bf08      	it	eq
 8015ea4:	460b      	moveq	r3, r1
 8015ea6:	02d2      	lsls	r2, r2, #11
 8015ea8:	f015 0f02 	tst.w	r5, #2
 8015eac:	bf12      	itee	ne
 8015eae:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 8015eb2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015eb6:	b29b      	uxtheq	r3, r3
 8015eb8:	9200      	str	r2, [sp, #0]
 8015eba:	2200      	movs	r2, #0
 8015ebc:	499c      	ldr	r1, [pc, #624]	; (8016130 <dwt_ioctl+0x75c>)
 8015ebe:	f7ff fa25 	bl	801530c <dwt_modify16bitoffsetreg>
 8015ec2:	2500      	movs	r5, #0
 8015ec4:	e630      	b.n	8015b28 <dwt_ioctl+0x154>
 8015ec6:	b92a      	cbnz	r2, 8015ed4 <dwt_ioctl+0x500>
 8015ec8:	4b9a      	ldr	r3, [pc, #616]	; (8016134 <dwt_ioctl+0x760>)
 8015eca:	2202      	movs	r2, #2
 8015ecc:	499a      	ldr	r1, [pc, #616]	; (8016138 <dwt_ioctl+0x764>)
 8015ece:	f7fe faef 	bl	80144b0 <dwt_write32bitoffsetreg>
 8015ed2:	e629      	b.n	8015b28 <dwt_ioctl+0x154>
 8015ed4:	4b99      	ldr	r3, [pc, #612]	; (801613c <dwt_ioctl+0x768>)
 8015ed6:	2202      	movs	r2, #2
 8015ed8:	4997      	ldr	r1, [pc, #604]	; (8016138 <dwt_ioctl+0x764>)
 8015eda:	f7fe fae9 	bl	80144b0 <dwt_write32bitoffsetreg>
 8015ede:	2500      	movs	r5, #0
 8015ee0:	e622      	b.n	8015b28 <dwt_ioctl+0x154>
 8015ee2:	4611      	mov	r1, r2
 8015ee4:	f7fe fc96 	bl	8014814 <ull_setlnapamode>
 8015ee8:	2500      	movs	r5, #0
 8015eea:	e61d      	b.n	8015b28 <dwt_ioctl+0x154>
 8015eec:	2c00      	cmp	r4, #0
 8015eee:	f001 836f 	beq.w	80175d0 <dwt_ioctl+0x1bfc>
 8015ef2:	2200      	movs	r2, #0
 8015ef4:	4992      	ldr	r1, [pc, #584]	; (8016140 <dwt_ioctl+0x76c>)
 8015ef6:	f7fd fdc1 	bl	8013a7c <dwt_read8bitoffsetreg>
 8015efa:	7020      	strb	r0, [r4, #0]
 8015efc:	2500      	movs	r5, #0
 8015efe:	e613      	b.n	8015b28 <dwt_ioctl+0x154>
 8015f00:	4621      	mov	r1, r4
 8015f02:	f7fe fca9 	bl	8014858 <ull_configurestskey>
 8015f06:	2500      	movs	r5, #0
 8015f08:	e60e      	b.n	8015b28 <dwt_ioctl+0x154>
 8015f0a:	4621      	mov	r1, r4
 8015f0c:	f7fe fcc8 	bl	80148a0 <ull_configurestsiv>
 8015f10:	2500      	movs	r5, #0
 8015f12:	e609      	b.n	8015b28 <dwt_ioctl+0x154>
 8015f14:	2301      	movs	r3, #1
 8015f16:	9300      	str	r3, [sp, #0]
 8015f18:	23ff      	movs	r3, #255	; 0xff
 8015f1a:	2200      	movs	r2, #0
 8015f1c:	4989      	ldr	r1, [pc, #548]	; (8016144 <dwt_ioctl+0x770>)
 8015f1e:	f7ff f843 	bl	8014fa8 <dwt_modify8bitoffsetreg>
 8015f22:	2500      	movs	r5, #0
 8015f24:	e600      	b.n	8015b28 <dwt_ioctl+0x154>
 8015f26:	4611      	mov	r1, r2
 8015f28:	f7fe fcde 	bl	80148e8 <ull_configmrxlut>
 8015f2c:	2500      	movs	r5, #0
 8015f2e:	e5fb      	b.n	8015b28 <dwt_ioctl+0x154>
 8015f30:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8015f32:	7a1b      	ldrb	r3, [r3, #8]
 8015f34:	2b00      	cmp	r3, #0
 8015f36:	d137      	bne.n	8015fa8 <dwt_ioctl+0x5d4>
 8015f38:	2314      	movs	r3, #20
 8015f3a:	2201      	movs	r2, #1
 8015f3c:	4982      	ldr	r1, [pc, #520]	; (8016148 <dwt_ioctl+0x774>)
 8015f3e:	4630      	mov	r0, r6
 8015f40:	f7fe f963 	bl	801420a <dwt_write8bitoffsetreg>
 8015f44:	2318      	movs	r3, #24
 8015f46:	2200      	movs	r2, #0
 8015f48:	4980      	ldr	r1, [pc, #512]	; (801614c <dwt_ioctl+0x778>)
 8015f4a:	4630      	mov	r0, r6
 8015f4c:	f7fe fab0 	bl	80144b0 <dwt_write32bitoffsetreg>
 8015f50:	23e8      	movs	r3, #232	; 0xe8
 8015f52:	2200      	movs	r2, #0
 8015f54:	497e      	ldr	r1, [pc, #504]	; (8016150 <dwt_ioctl+0x77c>)
 8015f56:	4630      	mov	r0, r6
 8015f58:	f7fe faaa 	bl	80144b0 <dwt_write32bitoffsetreg>
 8015f5c:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8015f5e:	8a5b      	ldrh	r3, [r3, #18]
 8015f60:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8015f64:	2b20      	cmp	r3, #32
 8015f66:	d022      	beq.n	8015fae <dwt_ioctl+0x5da>
 8015f68:	2b60      	cmp	r3, #96	; 0x60
 8015f6a:	d02b      	beq.n	8015fc4 <dwt_ioctl+0x5f0>
 8015f6c:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8015f6e:	7e1b      	ldrb	r3, [r3, #24]
 8015f70:	085b      	lsrs	r3, r3, #1
 8015f72:	d032      	beq.n	8015fda <dwt_ioctl+0x606>
 8015f74:	2200      	movs	r2, #0
 8015f76:	4977      	ldr	r1, [pc, #476]	; (8016154 <dwt_ioctl+0x780>)
 8015f78:	4630      	mov	r0, r6
 8015f7a:	f7fd fd6d 	bl	8013a58 <dwt_read16bitoffsetreg>
 8015f7e:	f3c0 03c4 	ubfx	r3, r0, #3, #5
 8015f82:	3b09      	subs	r3, #9
 8015f84:	2b0f      	cmp	r3, #15
 8015f86:	f201 8326 	bhi.w	80175d6 <dwt_ioctl+0x1c02>
 8015f8a:	f000 0001 	and.w	r0, r0, #1
 8015f8e:	2800      	cmp	r0, #0
 8015f90:	bf0c      	ite	eq
 8015f92:	2105      	moveq	r1, #5
 8015f94:	2109      	movne	r1, #9
 8015f96:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8015f98:	7a5b      	ldrb	r3, [r3, #9]
 8015f9a:	2b01      	cmp	r3, #1
 8015f9c:	d029      	beq.n	8015ff2 <dwt_ioctl+0x61e>
 8015f9e:	4630      	mov	r0, r6
 8015fa0:	f7fe fca2 	bl	80148e8 <ull_configmrxlut>
 8015fa4:	2500      	movs	r5, #0
 8015fa6:	e5bf      	b.n	8015b28 <dwt_ioctl+0x154>
 8015fa8:	f7ff f9ca 	bl	8015340 <_dwt_prog_ldo_and_bias_tune>
 8015fac:	e7c4      	b.n	8015f38 <dwt_ioctl+0x564>
 8015fae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015fb2:	9300      	str	r3, [sp, #0]
 8015fb4:	f46f 53c0 	mvn.w	r3, #6144	; 0x1800
 8015fb8:	2200      	movs	r2, #0
 8015fba:	4967      	ldr	r1, [pc, #412]	; (8016158 <dwt_ioctl+0x784>)
 8015fbc:	4630      	mov	r0, r6
 8015fbe:	f7fe fe09 	bl	8014bd4 <dwt_modify32bitoffsetreg>
 8015fc2:	e7d3      	b.n	8015f6c <dwt_ioctl+0x598>
 8015fc4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8015fc8:	9300      	str	r3, [sp, #0]
 8015fca:	f46f 53c0 	mvn.w	r3, #6144	; 0x1800
 8015fce:	2200      	movs	r2, #0
 8015fd0:	4961      	ldr	r1, [pc, #388]	; (8016158 <dwt_ioctl+0x784>)
 8015fd2:	4630      	mov	r0, r6
 8015fd4:	f7fe fdfe 	bl	8014bd4 <dwt_modify32bitoffsetreg>
 8015fd8:	e7c8      	b.n	8015f6c <dwt_ioctl+0x598>
 8015fda:	2301      	movs	r3, #1
 8015fdc:	2200      	movs	r2, #0
 8015fde:	495f      	ldr	r1, [pc, #380]	; (801615c <dwt_ioctl+0x788>)
 8015fe0:	4630      	mov	r0, r6
 8015fe2:	f7fe f912 	bl	801420a <dwt_write8bitoffsetreg>
 8015fe6:	6d32      	ldr	r2, [r6, #80]	; 0x50
 8015fe8:	7e13      	ldrb	r3, [r2, #24]
 8015fea:	f043 0302 	orr.w	r3, r3, #2
 8015fee:	7613      	strb	r3, [r2, #24]
 8015ff0:	e7c0      	b.n	8015f74 <dwt_ioctl+0x5a0>
 8015ff2:	4630      	mov	r0, r6
 8015ff4:	f7fe fe12 	bl	8014c1c <_dwt_kick_dgc_on_wakeup>
 8015ff8:	2500      	movs	r5, #0
 8015ffa:	e595      	b.n	8015b28 <dwt_ioctl+0x154>
 8015ffc:	2c00      	cmp	r4, #0
 8015ffe:	f001 82ed 	beq.w	80175dc <dwt_ioctl+0x1c08>
 8016002:	7823      	ldrb	r3, [r4, #0]
 8016004:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8016006:	75d3      	strb	r3, [r2, #23]
 8016008:	031b      	lsls	r3, r3, #12
 801600a:	f403 4330 	and.w	r3, r3, #45056	; 0xb000
 801600e:	9300      	str	r3, [sp, #0]
 8016010:	f644 73ff 	movw	r3, #20479	; 0x4fff
 8016014:	2200      	movs	r2, #0
 8016016:	2110      	movs	r1, #16
 8016018:	f7ff f978 	bl	801530c <dwt_modify16bitoffsetreg>
 801601c:	2500      	movs	r5, #0
 801601e:	e583      	b.n	8015b28 <dwt_ioctl+0x154>
 8016020:	2c00      	cmp	r4, #0
 8016022:	f001 82de 	beq.w	80175e2 <dwt_ioctl+0x1c0e>
 8016026:	8823      	ldrh	r3, [r4, #0]
 8016028:	2200      	movs	r2, #0
 801602a:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 801602e:	f7fe f93e 	bl	80142ae <dwt_write16bitoffsetreg>
 8016032:	2500      	movs	r5, #0
 8016034:	e578      	b.n	8015b28 <dwt_ioctl+0x154>
 8016036:	2c00      	cmp	r4, #0
 8016038:	f001 82d6 	beq.w	80175e8 <dwt_ioctl+0x1c14>
 801603c:	2200      	movs	r2, #0
 801603e:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 8016042:	f7fd fd09 	bl	8013a58 <dwt_read16bitoffsetreg>
 8016046:	8020      	strh	r0, [r4, #0]
 8016048:	2500      	movs	r5, #0
 801604a:	e56d      	b.n	8015b28 <dwt_ioctl+0x154>
 801604c:	2c00      	cmp	r4, #0
 801604e:	f001 82ce 	beq.w	80175ee <dwt_ioctl+0x1c1a>
 8016052:	8823      	ldrh	r3, [r4, #0]
 8016054:	2200      	movs	r2, #0
 8016056:	4942      	ldr	r1, [pc, #264]	; (8016160 <dwt_ioctl+0x78c>)
 8016058:	f7fe f929 	bl	80142ae <dwt_write16bitoffsetreg>
 801605c:	2500      	movs	r5, #0
 801605e:	e563      	b.n	8015b28 <dwt_ioctl+0x154>
 8016060:	2c00      	cmp	r4, #0
 8016062:	f001 82c7 	beq.w	80175f4 <dwt_ioctl+0x1c20>
 8016066:	2200      	movs	r2, #0
 8016068:	493d      	ldr	r1, [pc, #244]	; (8016160 <dwt_ioctl+0x78c>)
 801606a:	f7fd fcf5 	bl	8013a58 <dwt_read16bitoffsetreg>
 801606e:	8020      	strh	r0, [r4, #0]
 8016070:	2500      	movs	r5, #0
 8016072:	e559      	b.n	8015b28 <dwt_ioctl+0x154>
 8016074:	2c00      	cmp	r4, #0
 8016076:	f001 82c0 	beq.w	80175fa <dwt_ioctl+0x1c26>
 801607a:	88a3      	ldrh	r3, [r4, #4]
 801607c:	88e2      	ldrh	r2, [r4, #6]
 801607e:	6821      	ldr	r1, [r4, #0]
 8016080:	9100      	str	r1, [sp, #0]
 8016082:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 8016086:	f7fe f8b5 	bl	80141f4 <dwt_writetodevice>
 801608a:	2500      	movs	r5, #0
 801608c:	e54c      	b.n	8015b28 <dwt_ioctl+0x154>
 801608e:	2c00      	cmp	r4, #0
 8016090:	f001 82b6 	beq.w	8017600 <dwt_ioctl+0x1c2c>
 8016094:	88a3      	ldrh	r3, [r4, #4]
 8016096:	88e2      	ldrh	r2, [r4, #6]
 8016098:	6821      	ldr	r1, [r4, #0]
 801609a:	9100      	str	r1, [sp, #0]
 801609c:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 80160a0:	f7fd fcba 	bl	8013a18 <dwt_readfromdevice>
 80160a4:	2500      	movs	r5, #0
 80160a6:	e53f      	b.n	8015b28 <dwt_ioctl+0x154>
 80160a8:	2c00      	cmp	r4, #0
 80160aa:	f001 82ac 	beq.w	8017606 <dwt_ioctl+0x1c32>
 80160ae:	88e3      	ldrh	r3, [r4, #6]
 80160b0:	88a2      	ldrh	r2, [r4, #4]
 80160b2:	6821      	ldr	r1, [r4, #0]
 80160b4:	f7fe fcc2 	bl	8014a3c <ull_readrxdata>
 80160b8:	2500      	movs	r5, #0
 80160ba:	e535      	b.n	8015b28 <dwt_ioctl+0x154>
 80160bc:	2c00      	cmp	r4, #0
 80160be:	f001 82a5 	beq.w	801760c <dwt_ioctl+0x1c38>
 80160c2:	88e3      	ldrh	r3, [r4, #6]
 80160c4:	6822      	ldr	r2, [r4, #0]
 80160c6:	88a1      	ldrh	r1, [r4, #4]
 80160c8:	f7fe fd52 	bl	8014b70 <ull_writetxdata>
 80160cc:	2500      	movs	r5, #0
 80160ce:	e52b      	b.n	8015b28 <dwt_ioctl+0x154>
 80160d0:	4611      	mov	r1, r2
 80160d2:	f7fe fce9 	bl	8014aa8 <ull_rxenable>
 80160d6:	2500      	movs	r5, #0
 80160d8:	e526      	b.n	8015b28 <dwt_ioctl+0x154>
 80160da:	2c00      	cmp	r4, #0
 80160dc:	f001 8299 	beq.w	8017612 <dwt_ioctl+0x1c3e>
 80160e0:	7923      	ldrb	r3, [r4, #4]
 80160e2:	8862      	ldrh	r2, [r4, #2]
 80160e4:	8821      	ldrh	r1, [r4, #0]
 80160e6:	f7fe ff2d 	bl	8014f44 <ull_writetxfctrl>
 80160ea:	2500      	movs	r5, #0
 80160ec:	e51c      	b.n	8015b28 <dwt_ioctl+0x154>
 80160ee:	2c00      	cmp	r4, #0
 80160f0:	f001 8292 	beq.w	8017618 <dwt_ioctl+0x1c44>
 80160f4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80160f6:	7bdb      	ldrb	r3, [r3, #15]
 80160f8:	2b01      	cmp	r3, #1
 80160fa:	d00c      	beq.n	8016116 <dwt_ioctl+0x742>
 80160fc:	2b03      	cmp	r3, #3
 80160fe:	d110      	bne.n	8016122 <dwt_ioctl+0x74e>
 8016100:	220c      	movs	r2, #12
 8016102:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8016106:	f7fd fca7 	bl	8013a58 <dwt_read16bitoffsetreg>
 801610a:	b200      	sxth	r0, r0
 801610c:	f340 030c 	sbfx	r3, r0, #0, #13
 8016110:	8023      	strh	r3, [r4, #0]
 8016112:	2500      	movs	r5, #0
 8016114:	e508      	b.n	8015b28 <dwt_ioctl+0x154>
 8016116:	2200      	movs	r2, #0
 8016118:	4912      	ldr	r1, [pc, #72]	; (8016164 <dwt_ioctl+0x790>)
 801611a:	f7fd fc9d 	bl	8013a58 <dwt_read16bitoffsetreg>
 801611e:	b200      	sxth	r0, r0
 8016120:	e7f4      	b.n	801610c <dwt_ioctl+0x738>
 8016122:	2200      	movs	r2, #0
 8016124:	4910      	ldr	r1, [pc, #64]	; (8016168 <dwt_ioctl+0x794>)
 8016126:	f7fd fc97 	bl	8013a58 <dwt_read16bitoffsetreg>
 801612a:	b200      	sxth	r0, r0
 801612c:	e7ee      	b.n	801610c <dwt_ioctl+0x738>
 801612e:	bf00      	nop
 8016130:	00110008 	.word	0x00110008
 8016134:	00d20874 	.word	0x00d20874
 8016138:	00110010 	.word	0x00110010
 801613c:	04d28874 	.word	0x04d28874
 8016140:	0007001c 	.word	0x0007001c
 8016144:	00020004 	.word	0x00020004
 8016148:	00070050 	.word	0x00070050
 801614c:	001f000c 	.word	0x001f000c
 8016150:	001f0010 	.word	0x001f0010
 8016154:	00010014 	.word	0x00010014
 8016158:	000b0008 	.word	0x000b0008
 801615c:	00010028 	.word	0x00010028
 8016160:	00010004 	.word	0x00010004
 8016164:	0018000c 	.word	0x0018000c
 8016168:	000c0020 	.word	0x000c0020
 801616c:	2c00      	cmp	r4, #0
 801616e:	f001 8256 	beq.w	801761e <dwt_ioctl+0x1c4a>
 8016172:	ab0c      	add	r3, sp, #48	; 0x30
 8016174:	9300      	str	r3, [sp, #0]
 8016176:	2303      	movs	r3, #3
 8016178:	2200      	movs	r2, #0
 801617a:	49bb      	ldr	r1, [pc, #748]	; (8016468 <dwt_ioctl+0xa94>)
 801617c:	f7fd fc4c 	bl	8013a18 <dwt_readfromdevice>
 8016180:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 8016184:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8016188:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 801618c:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8016190:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8016194:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8016198:	bf1c      	itt	ne
 801619a:	ea6f 3303 	mvnne.w	r3, r3, lsl #12
 801619e:	ea6f 3313 	mvnne.w	r3, r3, lsr #12
 80161a2:	6023      	str	r3, [r4, #0]
 80161a4:	2500      	movs	r5, #0
 80161a6:	e4bf      	b.n	8015b28 <dwt_ioctl+0x154>
 80161a8:	f7fe f892 	bl	80142d0 <ull_clearaonconfig>
 80161ac:	2500      	movs	r5, #0
 80161ae:	e4bb      	b.n	8015b28 <dwt_ioctl+0x154>
 80161b0:	2c00      	cmp	r4, #0
 80161b2:	f001 8237 	beq.w	8017624 <dwt_ioctl+0x1c50>
 80161b6:	8861      	ldrh	r1, [r4, #2]
 80161b8:	f7fe ff40 	bl	801503c <ull_calcbandwidthadj>
 80161bc:	7020      	strb	r0, [r4, #0]
 80161be:	2500      	movs	r5, #0
 80161c0:	e4b2      	b.n	8015b28 <dwt_ioctl+0x154>
 80161c2:	4621      	mov	r1, r4
 80161c4:	f7fd fc68 	bl	8013a98 <ull_readdiagnostics>
 80161c8:	2500      	movs	r5, #0
 80161ca:	e4ad      	b.n	8015b28 <dwt_ioctl+0x154>
 80161cc:	2c00      	cmp	r4, #0
 80161ce:	f001 822c 	beq.w	801762a <dwt_ioctl+0x1c56>
 80161d2:	2201      	movs	r2, #1
 80161d4:	2174      	movs	r1, #116	; 0x74
 80161d6:	f7fd fc29 	bl	8013a2c <dwt_read32bitoffsetreg>
 80161da:	6020      	str	r0, [r4, #0]
 80161dc:	2500      	movs	r5, #0
 80161de:	e4a3      	b.n	8015b28 <dwt_ioctl+0x154>
 80161e0:	2c00      	cmp	r4, #0
 80161e2:	f001 8225 	beq.w	8017630 <dwt_ioctl+0x1c5c>
 80161e6:	2200      	movs	r2, #0
 80161e8:	2174      	movs	r1, #116	; 0x74
 80161ea:	f7fd fc1f 	bl	8013a2c <dwt_read32bitoffsetreg>
 80161ee:	6020      	str	r0, [r4, #0]
 80161f0:	2500      	movs	r5, #0
 80161f2:	e499      	b.n	8015b28 <dwt_ioctl+0x154>
 80161f4:	9400      	str	r4, [sp, #0]
 80161f6:	2305      	movs	r3, #5
 80161f8:	2200      	movs	r2, #0
 80161fa:	2174      	movs	r1, #116	; 0x74
 80161fc:	f7fd fc0c 	bl	8013a18 <dwt_readfromdevice>
 8016200:	2500      	movs	r5, #0
 8016202:	e491      	b.n	8015b28 <dwt_ioctl+0x154>
 8016204:	2c00      	cmp	r4, #0
 8016206:	f001 8216 	beq.w	8017636 <dwt_ioctl+0x1c62>
 801620a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801620c:	7bdb      	ldrb	r3, [r3, #15]
 801620e:	2b01      	cmp	r3, #1
 8016210:	d014      	beq.n	801623c <dwt_ioctl+0x868>
 8016212:	2b03      	cmp	r3, #3
 8016214:	d119      	bne.n	801624a <dwt_ioctl+0x876>
 8016216:	2216      	movs	r2, #22
 8016218:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 801621c:	f7fd fc1c 	bl	8013a58 <dwt_read16bitoffsetreg>
 8016220:	f3c0 000d 	ubfx	r0, r0, #0, #14
 8016224:	b283      	uxth	r3, r0
 8016226:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 801622a:	d004      	beq.n	8016236 <dwt_ioctl+0x862>
 801622c:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 8016230:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 8016234:	b218      	sxth	r0, r3
 8016236:	8020      	strh	r0, [r4, #0]
 8016238:	2500      	movs	r5, #0
 801623a:	e475      	b.n	8015b28 <dwt_ioctl+0x154>
 801623c:	2202      	movs	r2, #2
 801623e:	498b      	ldr	r1, [pc, #556]	; (801646c <dwt_ioctl+0xa98>)
 8016240:	f7fd fc0a 	bl	8013a58 <dwt_read16bitoffsetreg>
 8016244:	f3c0 000d 	ubfx	r0, r0, #0, #14
 8016248:	e7ec      	b.n	8016224 <dwt_ioctl+0x850>
 801624a:	2202      	movs	r2, #2
 801624c:	4988      	ldr	r1, [pc, #544]	; (8016470 <dwt_ioctl+0xa9c>)
 801624e:	f7fd fc03 	bl	8013a58 <dwt_read16bitoffsetreg>
 8016252:	f3c0 000d 	ubfx	r0, r0, #0, #14
 8016256:	e7e5      	b.n	8016224 <dwt_ioctl+0x850>
 8016258:	9400      	str	r4, [sp, #0]
 801625a:	2306      	movs	r3, #6
 801625c:	2200      	movs	r2, #0
 801625e:	4985      	ldr	r1, [pc, #532]	; (8016474 <dwt_ioctl+0xaa0>)
 8016260:	f7fd fbda 	bl	8013a18 <dwt_readfromdevice>
 8016264:	7963      	ldrb	r3, [r4, #5]
 8016266:	f003 0301 	and.w	r3, r3, #1
 801626a:	7163      	strb	r3, [r4, #5]
 801626c:	2500      	movs	r5, #0
 801626e:	e45b      	b.n	8015b28 <dwt_ioctl+0x154>
 8016270:	2c00      	cmp	r4, #0
 8016272:	f001 81e3 	beq.w	801763c <dwt_ioctl+0x1c68>
 8016276:	2201      	movs	r2, #1
 8016278:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 801627c:	f7fd fbfe 	bl	8013a7c <dwt_read8bitoffsetreg>
 8016280:	7020      	strb	r0, [r4, #0]
 8016282:	2500      	movs	r5, #0
 8016284:	e450      	b.n	8015b28 <dwt_ioctl+0x154>
 8016286:	2c00      	cmp	r4, #0
 8016288:	f001 81db 	beq.w	8017642 <dwt_ioctl+0x1c6e>
 801628c:	2200      	movs	r2, #0
 801628e:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 8016292:	f7fd fbf3 	bl	8013a7c <dwt_read8bitoffsetreg>
 8016296:	7020      	strb	r0, [r4, #0]
 8016298:	2500      	movs	r5, #0
 801629a:	e445      	b.n	8015b28 <dwt_ioctl+0x154>
 801629c:	2c00      	cmp	r4, #0
 801629e:	f001 81d3 	beq.w	8017648 <dwt_ioctl+0x1c74>
 80162a2:	88a2      	ldrh	r2, [r4, #4]
 80162a4:	6821      	ldr	r1, [r4, #0]
 80162a6:	f7fe fd1d 	bl	8014ce4 <_dwt_otpprogword32>
 80162aa:	2500      	movs	r5, #0
 80162ac:	e43c      	b.n	8015b28 <dwt_ioctl+0x154>
 80162ae:	2c00      	cmp	r4, #0
 80162b0:	f001 81cd 	beq.w	801764e <dwt_ioctl+0x1c7a>
 80162b4:	6825      	ldr	r5, [r4, #0]
 80162b6:	88a4      	ldrh	r4, [r4, #4]
 80162b8:	4622      	mov	r2, r4
 80162ba:	4629      	mov	r1, r5
 80162bc:	f7fe fd12 	bl	8014ce4 <_dwt_otpprogword32>
 80162c0:	4621      	mov	r1, r4
 80162c2:	4630      	mov	r0, r6
 80162c4:	f7fe f84e 	bl	8014364 <_dwt_otpread>
 80162c8:	1a2d      	subs	r5, r5, r0
 80162ca:	bf18      	it	ne
 80162cc:	f04f 35ff 	movne.w	r5, #4294967295
 80162d0:	e42a      	b.n	8015b28 <dwt_ioctl+0x154>
 80162d2:	2a02      	cmp	r2, #2
 80162d4:	d00e      	beq.n	80162f4 <dwt_ioctl+0x920>
 80162d6:	4c68      	ldr	r4, [pc, #416]	; (8016478 <dwt_ioctl+0xaa4>)
 80162d8:	2300      	movs	r3, #0
 80162da:	461a      	mov	r2, r3
 80162dc:	4621      	mov	r1, r4
 80162de:	4630      	mov	r0, r6
 80162e0:	f7fd ff93 	bl	801420a <dwt_write8bitoffsetreg>
 80162e4:	2302      	movs	r3, #2
 80162e6:	2200      	movs	r2, #0
 80162e8:	4621      	mov	r1, r4
 80162ea:	4630      	mov	r0, r6
 80162ec:	f7fd ff8d 	bl	801420a <dwt_write8bitoffsetreg>
 80162f0:	2500      	movs	r5, #0
 80162f2:	e419      	b.n	8015b28 <dwt_ioctl+0x154>
 80162f4:	2300      	movs	r3, #0
 80162f6:	9300      	str	r3, [sp, #0]
 80162f8:	23fe      	movs	r3, #254	; 0xfe
 80162fa:	2201      	movs	r2, #1
 80162fc:	495f      	ldr	r1, [pc, #380]	; (801647c <dwt_ioctl+0xaa8>)
 80162fe:	f7fe fe53 	bl	8014fa8 <dwt_modify8bitoffsetreg>
 8016302:	e7e8      	b.n	80162d6 <dwt_ioctl+0x902>
 8016304:	2c00      	cmp	r4, #0
 8016306:	f001 81a5 	beq.w	8017654 <dwt_ioctl+0x1c80>
 801630a:	8824      	ldrh	r4, [r4, #0]
 801630c:	b2e2      	uxtb	r2, r4
 801630e:	f44f 7181 	mov.w	r1, #258	; 0x102
 8016312:	f7fe f869 	bl	80143e8 <ull_aon_write>
 8016316:	0a22      	lsrs	r2, r4, #8
 8016318:	f240 1103 	movw	r1, #259	; 0x103
 801631c:	4630      	mov	r0, r6
 801631e:	f7fe f863 	bl	80143e8 <ull_aon_write>
 8016322:	2500      	movs	r5, #0
 8016324:	e400      	b.n	8015b28 <dwt_ioctl+0x154>
 8016326:	2c00      	cmp	r4, #0
 8016328:	f001 8197 	beq.w	801765a <dwt_ioctl+0x1c86>
 801632c:	f8df 8158 	ldr.w	r8, [pc, #344]	; 8016488 <dwt_ioctl+0xab4>
 8016330:	2310      	movs	r3, #16
 8016332:	9300      	str	r3, [sp, #0]
 8016334:	23ff      	movs	r3, #255	; 0xff
 8016336:	2200      	movs	r2, #0
 8016338:	4641      	mov	r1, r8
 801633a:	f7fe fe35 	bl	8014fa8 <dwt_modify8bitoffsetreg>
 801633e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8016342:	4630      	mov	r0, r6
 8016344:	f7fe f830 	bl	80143a8 <ull_aon_read>
 8016348:	f000 05e0 	and.w	r5, r0, #224	; 0xe0
 801634c:	462a      	mov	r2, r5
 801634e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8016352:	4630      	mov	r0, r6
 8016354:	f7fe f848 	bl	80143e8 <ull_aon_write>
 8016358:	f045 0204 	orr.w	r2, r5, #4
 801635c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8016360:	4630      	mov	r0, r6
 8016362:	f7fe f841 	bl	80143e8 <ull_aon_write>
 8016366:	2002      	movs	r0, #2
 8016368:	f7ea fc04 	bl	8000b74 <deca_sleep>
 801636c:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8016370:	4630      	mov	r0, r6
 8016372:	f7fe f819 	bl	80143a8 <ull_aon_read>
 8016376:	4607      	mov	r7, r0
 8016378:	f240 110f 	movw	r1, #271	; 0x10f
 801637c:	4630      	mov	r0, r6
 801637e:	f7fe f813 	bl	80143a8 <ull_aon_read>
 8016382:	4681      	mov	r9, r0
 8016384:	462a      	mov	r2, r5
 8016386:	f44f 7182 	mov.w	r1, #260	; 0x104
 801638a:	4630      	mov	r0, r6
 801638c:	f7fe f82c 	bl	80143e8 <ull_aon_write>
 8016390:	2500      	movs	r5, #0
 8016392:	9500      	str	r5, [sp, #0]
 8016394:	23ef      	movs	r3, #239	; 0xef
 8016396:	462a      	mov	r2, r5
 8016398:	4641      	mov	r1, r8
 801639a:	4630      	mov	r0, r6
 801639c:	f7fe fe04 	bl	8014fa8 <dwt_modify8bitoffsetreg>
 80163a0:	ea47 2709 	orr.w	r7, r7, r9, lsl #8
 80163a4:	8027      	strh	r7, [r4, #0]
 80163a6:	f7ff bbbf 	b.w	8015b28 <dwt_ioctl+0x154>
 80163aa:	2c00      	cmp	r4, #0
 80163ac:	f001 8158 	beq.w	8017660 <dwt_ioctl+0x1c8c>
 80163b0:	78a2      	ldrb	r2, [r4, #2]
 80163b2:	8821      	ldrh	r1, [r4, #0]
 80163b4:	f7fe f840 	bl	8014438 <ull_configuresleep>
 80163b8:	2500      	movs	r5, #0
 80163ba:	f7ff bbb5 	b.w	8015b28 <dwt_ioctl+0x154>
 80163be:	f7fd ff87 	bl	80142d0 <ull_clearaonconfig>
 80163c2:	2001      	movs	r0, #1
 80163c4:	f7ea fbd6 	bl	8000b74 <deca_sleep>
 80163c8:	2303      	movs	r3, #3
 80163ca:	9300      	str	r3, [sp, #0]
 80163cc:	23ff      	movs	r3, #255	; 0xff
 80163ce:	2200      	movs	r2, #0
 80163d0:	492b      	ldr	r1, [pc, #172]	; (8016480 <dwt_ioctl+0xaac>)
 80163d2:	4630      	mov	r0, r6
 80163d4:	f7fe fde8 	bl	8014fa8 <dwt_modify8bitoffsetreg>
 80163d8:	2300      	movs	r3, #0
 80163da:	461a      	mov	r2, r3
 80163dc:	f44f 1188 	mov.w	r1, #1114112	; 0x110000
 80163e0:	4630      	mov	r0, r6
 80163e2:	f7fd ff12 	bl	801420a <dwt_write8bitoffsetreg>
 80163e6:	2001      	movs	r0, #1
 80163e8:	f7ea fbc4 	bl	8000b74 <deca_sleep>
 80163ec:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80163ee:	2500      	movs	r5, #0
 80163f0:	73dd      	strb	r5, [r3, #15]
 80163f2:	2202      	movs	r2, #2
 80163f4:	825a      	strh	r2, [r3, #18]
 80163f6:	759d      	strb	r5, [r3, #22]
 80163f8:	75dd      	strb	r5, [r3, #23]
 80163fa:	741d      	strb	r5, [r3, #16]
 80163fc:	f7ff bb94 	b.w	8015b28 <dwt_ioctl+0x154>
 8016400:	2c00      	cmp	r4, #0
 8016402:	f001 8130 	beq.w	8017666 <dwt_ioctl+0x1c92>
 8016406:	7823      	ldrb	r3, [r4, #0]
 8016408:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801640c:	6d02      	ldr	r2, [r0, #80]	; 0x50
 801640e:	7393      	strb	r3, [r2, #14]
 8016410:	2200      	movs	r2, #0
 8016412:	491c      	ldr	r1, [pc, #112]	; (8016484 <dwt_ioctl+0xab0>)
 8016414:	f7fd fef9 	bl	801420a <dwt_write8bitoffsetreg>
 8016418:	2500      	movs	r5, #0
 801641a:	f7ff bb85 	b.w	8015b28 <dwt_ioctl+0x154>
 801641e:	2c00      	cmp	r4, #0
 8016420:	f001 8124 	beq.w	801766c <dwt_ioctl+0x1c98>
 8016424:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8016426:	7b9b      	ldrb	r3, [r3, #14]
 8016428:	7023      	strb	r3, [r4, #0]
 801642a:	2500      	movs	r5, #0
 801642c:	f7ff bb7c 	b.w	8015b28 <dwt_ioctl+0x154>
 8016430:	2101      	movs	r1, #1
 8016432:	f7fe fc11 	bl	8014c58 <ull_enable_rf_tx>
 8016436:	4630      	mov	r0, r6
 8016438:	f7fe fc42 	bl	8014cc0 <ull_enable_rftx_blocks>
 801643c:	2101      	movs	r1, #1
 801643e:	4630      	mov	r0, r6
 8016440:	f7fd ff66 	bl	8014310 <ull_force_clocks>
 8016444:	220f      	movs	r2, #15
 8016446:	2101      	movs	r1, #1
 8016448:	4630      	mov	r0, r6
 801644a:	f7ff f86f 	bl	801552c <ull_repeated_cw>
 801644e:	2500      	movs	r5, #0
 8016450:	f7ff bb6a 	b.w	8015b28 <dwt_ioctl+0x154>
 8016454:	2c00      	cmp	r4, #0
 8016456:	f001 810c 	beq.w	8017672 <dwt_ioctl+0x1c9e>
 801645a:	6862      	ldr	r2, [r4, #4]
 801645c:	6821      	ldr	r1, [r4, #0]
 801645e:	f7ff f865 	bl	801552c <ull_repeated_cw>
 8016462:	2500      	movs	r5, #0
 8016464:	f7ff bb60 	b.w	8015b28 <dwt_ioctl+0x154>
 8016468:	00060029 	.word	0x00060029
 801646c:	00180014 	.word	0x00180014
 8016470:	000c001c 	.word	0x000c001c
 8016474:	000c0018 	.word	0x000c0018
 8016478:	000a0004 	.word	0x000a0004
 801647c:	00110008 	.word	0x00110008
 8016480:	00110004 	.word	0x00110004
 8016484:	00090014 	.word	0x00090014
 8016488:	00070048 	.word	0x00070048
 801648c:	2c00      	cmp	r4, #0
 801648e:	f001 80f3 	beq.w	8017678 <dwt_ioctl+0x1ca4>
 8016492:	4dd0      	ldr	r5, [pc, #832]	; (80167d4 <dwt_ioctl+0xe00>)
 8016494:	2200      	movs	r2, #0
 8016496:	4629      	mov	r1, r5
 8016498:	f7fd faf0 	bl	8013a7c <dwt_read8bitoffsetreg>
 801649c:	4680      	mov	r8, r0
 801649e:	2302      	movs	r3, #2
 80164a0:	9300      	str	r3, [sp, #0]
 80164a2:	23ff      	movs	r3, #255	; 0xff
 80164a4:	2200      	movs	r2, #0
 80164a6:	4629      	mov	r1, r5
 80164a8:	4630      	mov	r0, r6
 80164aa:	f7fe fd7d 	bl	8014fa8 <dwt_modify8bitoffsetreg>
 80164ae:	2304      	movs	r3, #4
 80164b0:	2200      	movs	r2, #0
 80164b2:	49c9      	ldr	r1, [pc, #804]	; (80167d8 <dwt_ioctl+0xe04>)
 80164b4:	4630      	mov	r0, r6
 80164b6:	f7fd fea8 	bl	801420a <dwt_write8bitoffsetreg>
 80164ba:	2301      	movs	r3, #1
 80164bc:	2200      	movs	r2, #0
 80164be:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80164c2:	4630      	mov	r0, r6
 80164c4:	f7fd fea1 	bl	801420a <dwt_write8bitoffsetreg>
 80164c8:	4fc4      	ldr	r7, [pc, #784]	; (80167dc <dwt_ioctl+0xe08>)
 80164ca:	2500      	movs	r5, #0
 80164cc:	462a      	mov	r2, r5
 80164ce:	4639      	mov	r1, r7
 80164d0:	4630      	mov	r0, r6
 80164d2:	f7fd fad3 	bl	8013a7c <dwt_read8bitoffsetreg>
 80164d6:	f010 0f01 	tst.w	r0, #1
 80164da:	d0f7      	beq.n	80164cc <dwt_ioctl+0xaf8>
 80164dc:	2200      	movs	r2, #0
 80164de:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 80164e2:	4630      	mov	r0, r6
 80164e4:	f7fd fab8 	bl	8013a58 <dwt_read16bitoffsetreg>
 80164e8:	4605      	mov	r5, r0
 80164ea:	2300      	movs	r3, #0
 80164ec:	461a      	mov	r2, r3
 80164ee:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80164f2:	4630      	mov	r0, r6
 80164f4:	f7fd fe89 	bl	801420a <dwt_write8bitoffsetreg>
 80164f8:	2300      	movs	r3, #0
 80164fa:	461a      	mov	r2, r3
 80164fc:	49b6      	ldr	r1, [pc, #728]	; (80167d8 <dwt_ioctl+0xe04>)
 80164fe:	4630      	mov	r0, r6
 8016500:	f7fd fe83 	bl	801420a <dwt_write8bitoffsetreg>
 8016504:	4643      	mov	r3, r8
 8016506:	2200      	movs	r2, #0
 8016508:	49b2      	ldr	r1, [pc, #712]	; (80167d4 <dwt_ioctl+0xe00>)
 801650a:	4630      	mov	r0, r6
 801650c:	f7fd fe7d 	bl	801420a <dwt_write8bitoffsetreg>
 8016510:	8025      	strh	r5, [r4, #0]
 8016512:	2500      	movs	r5, #0
 8016514:	f7ff bb08 	b.w	8015b28 <dwt_ioctl+0x154>
 8016518:	2c00      	cmp	r4, #0
 801651a:	f001 80b0 	beq.w	801767e <dwt_ioctl+0x1caa>
 801651e:	7920      	ldrb	r0, [r4, #4]
 8016520:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8016522:	7adb      	ldrb	r3, [r3, #11]
 8016524:	1ac0      	subs	r0, r0, r3
 8016526:	f7e9 ffdf 	bl	80004e8 <__aeabi_i2f>
 801652a:	49ad      	ldr	r1, [pc, #692]	; (80167e0 <dwt_ioctl+0xe0c>)
 801652c:	f7ea f830 	bl	8000590 <__aeabi_fmul>
 8016530:	49ac      	ldr	r1, [pc, #688]	; (80167e4 <dwt_ioctl+0xe10>)
 8016532:	f7e9 ff25 	bl	8000380 <__addsf3>
 8016536:	6020      	str	r0, [r4, #0]
 8016538:	2500      	movs	r5, #0
 801653a:	f7ff baf5 	b.w	8015b28 <dwt_ioctl+0x154>
 801653e:	2c00      	cmp	r4, #0
 8016540:	f001 80a0 	beq.w	8017684 <dwt_ioctl+0x1cb0>
 8016544:	7920      	ldrb	r0, [r4, #4]
 8016546:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8016548:	7a9b      	ldrb	r3, [r3, #10]
 801654a:	1ac0      	subs	r0, r0, r3
 801654c:	f7e9 ffcc 	bl	80004e8 <__aeabi_i2f>
 8016550:	49a5      	ldr	r1, [pc, #660]	; (80167e8 <dwt_ioctl+0xe14>)
 8016552:	f7ea f81d 	bl	8000590 <__aeabi_fmul>
 8016556:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 801655a:	f7ea f819 	bl	8000590 <__aeabi_fmul>
 801655e:	49a3      	ldr	r1, [pc, #652]	; (80167ec <dwt_ioctl+0xe18>)
 8016560:	f7ea f8ca 	bl	80006f8 <__aeabi_fdiv>
 8016564:	49a2      	ldr	r1, [pc, #648]	; (80167f0 <dwt_ioctl+0xe1c>)
 8016566:	f7e9 ff0b 	bl	8000380 <__addsf3>
 801656a:	6020      	str	r0, [r4, #0]
 801656c:	2500      	movs	r5, #0
 801656e:	f7ff badb 	b.w	8015b28 <dwt_ioctl+0x154>
 8016572:	2c00      	cmp	r4, #0
 8016574:	f001 8089 	beq.w	801768a <dwt_ioctl+0x1cb6>
 8016578:	6824      	ldr	r4, [r4, #0]
 801657a:	2101      	movs	r1, #1
 801657c:	f7fe fb6c 	bl	8014c58 <ull_enable_rf_tx>
 8016580:	4630      	mov	r0, r6
 8016582:	f7fe fb9d 	bl	8014cc0 <ull_enable_rftx_blocks>
 8016586:	2101      	movs	r1, #1
 8016588:	4630      	mov	r0, r6
 801658a:	f7fd fec1 	bl	8014310 <ull_force_clocks>
 801658e:	4621      	mov	r1, r4
 8016590:	4630      	mov	r0, r6
 8016592:	f7fe fdaf 	bl	80150f4 <ull_repeated_frames>
 8016596:	2500      	movs	r5, #0
 8016598:	f7ff bac6 	b.w	8015b28 <dwt_ioctl+0x154>
 801659c:	2500      	movs	r5, #0
 801659e:	9500      	str	r5, [sp, #0]
 80165a0:	23ef      	movs	r3, #239	; 0xef
 80165a2:	462a      	mov	r2, r5
 80165a4:	4993      	ldr	r1, [pc, #588]	; (80167f4 <dwt_ioctl+0xe20>)
 80165a6:	f7fe fcff 	bl	8014fa8 <dwt_modify8bitoffsetreg>
 80165aa:	2105      	movs	r1, #5
 80165ac:	4630      	mov	r0, r6
 80165ae:	f7fd feaf 	bl	8014310 <ull_force_clocks>
 80165b2:	2101      	movs	r1, #1
 80165b4:	4630      	mov	r0, r6
 80165b6:	f7fe fa23 	bl	8014a00 <ull_disable_rf_tx>
 80165ba:	4630      	mov	r0, r6
 80165bc:	f7fe fa16 	bl	80149ec <ull_disable_rftx_blocks>
 80165c0:	f7ff bab2 	b.w	8015b28 <dwt_ioctl+0x154>
 80165c4:	2500      	movs	r5, #0
 80165c6:	9500      	str	r5, [sp, #0]
 80165c8:	23ef      	movs	r3, #239	; 0xef
 80165ca:	462a      	mov	r2, r5
 80165cc:	4989      	ldr	r1, [pc, #548]	; (80167f4 <dwt_ioctl+0xe20>)
 80165ce:	f7fe fceb 	bl	8014fa8 <dwt_modify8bitoffsetreg>
 80165d2:	f7ff baa9 	b.w	8015b28 <dwt_ioctl+0x154>
 80165d6:	2c00      	cmp	r4, #0
 80165d8:	f001 805a 	beq.w	8017690 <dwt_ioctl+0x1cbc>
 80165dc:	6821      	ldr	r1, [r4, #0]
 80165de:	f7fe fd89 	bl	80150f4 <ull_repeated_frames>
 80165e2:	2500      	movs	r5, #0
 80165e4:	f7ff baa0 	b.w	8015b28 <dwt_ioctl+0x154>
 80165e8:	2200      	movs	r2, #0
 80165ea:	4983      	ldr	r1, [pc, #524]	; (80167f8 <dwt_ioctl+0xe24>)
 80165ec:	f7fd fa34 	bl	8013a58 <dwt_read16bitoffsetreg>
 80165f0:	f3c0 050b 	ubfx	r5, r0, #0, #12
 80165f4:	f410 6f00 	tst.w	r0, #2048	; 0x800
 80165f8:	bf18      	it	ne
 80165fa:	f445 4570 	orrne.w	r5, r5, #61440	; 0xf000
 80165fe:	b22d      	sxth	r5, r5
 8016600:	8025      	strh	r5, [r4, #0]
 8016602:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8016604:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8016608:	1aed      	subs	r5, r5, r3
 801660a:	f7ff ba8d 	b.w	8015b28 <dwt_ioctl+0x154>
 801660e:	2c00      	cmp	r4, #0
 8016610:	f001 8070 	beq.w	80176f4 <dwt_ioctl+0x1d20>
 8016614:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8016618:	7a23      	ldrb	r3, [r4, #8]
 801661a:	f899 2013 	ldrb.w	r2, [r9, #19]
 801661e:	2aff      	cmp	r2, #255	; 0xff
 8016620:	f000 8142 	beq.w	80168a8 <dwt_ioctl+0xed4>
 8016624:	2b00      	cmp	r3, #0
 8016626:	d136      	bne.n	8016696 <dwt_ioctl+0xcc2>
 8016628:	f8d9 3000 	ldr.w	r3, [r9]
 801662c:	9300      	str	r3, [sp, #0]
 801662e:	230c      	movs	r3, #12
 8016630:	2200      	movs	r2, #0
 8016632:	4972      	ldr	r1, [pc, #456]	; (80167fc <dwt_ioctl+0xe28>)
 8016634:	f7fd fdde 	bl	80141f4 <dwt_writetodevice>
 8016638:	f899 300c 	ldrb.w	r3, [r9, #12]
 801663c:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 8016640:	18d1      	adds	r1, r2, r3
 8016642:	f899 2012 	ldrb.w	r2, [r9, #18]
 8016646:	2a00      	cmp	r2, #0
 8016648:	d15f      	bne.n	801670a <dwt_ioctl+0xd36>
 801664a:	f899 0010 	ldrb.w	r0, [r9, #16]
 801664e:	2800      	cmp	r0, #0
 8016650:	bf0b      	itete	eq
 8016652:	227f      	moveq	r2, #127	; 0x7f
 8016654:	f44f 6280 	movne.w	r2, #1024	; 0x400
 8016658:	f44f 15b0 	moveq.w	r5, #1441792	; 0x160000
 801665c:	f44f 15a0 	movne.w	r5, #1310720	; 0x140000
 8016660:	f899 0013 	ldrb.w	r0, [r9, #19]
 8016664:	1a12      	subs	r2, r2, r0
 8016666:	3a02      	subs	r2, #2
 8016668:	4291      	cmp	r1, r2
 801666a:	f200 8123 	bhi.w	80168b4 <dwt_ioctl+0xee0>
 801666e:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8016672:	9200      	str	r2, [sp, #0]
 8016674:	2200      	movs	r2, #0
 8016676:	4629      	mov	r1, r5
 8016678:	4630      	mov	r0, r6
 801667a:	f7fd fdbb 	bl	80141f4 <dwt_writetodevice>
 801667e:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 8016682:	f899 200c 	ldrb.w	r2, [r9, #12]
 8016686:	f8d9 1008 	ldr.w	r1, [r9, #8]
 801668a:	9100      	str	r1, [sp, #0]
 801668c:	4629      	mov	r1, r5
 801668e:	4630      	mov	r0, r6
 8016690:	f7fd fdb0 	bl	80141f4 <dwt_writetodevice>
 8016694:	e04a      	b.n	801672c <dwt_ioctl+0xd58>
 8016696:	f8d9 3000 	ldr.w	r3, [r9]
 801669a:	f8b9 100e 	ldrh.w	r1, [r9, #14]
 801669e:	7a9a      	ldrb	r2, [r3, #10]
 80166a0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
 80166a4:	7a5a      	ldrb	r2, [r3, #9]
 80166a6:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
 80166aa:	7a1a      	ldrb	r2, [r3, #8]
 80166ac:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
 80166b0:	79da      	ldrb	r2, [r3, #7]
 80166b2:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 80166b6:	799a      	ldrb	r2, [r3, #6]
 80166b8:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 80166bc:	795a      	ldrb	r2, [r3, #5]
 80166be:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
 80166c2:	791a      	ldrb	r2, [r3, #4]
 80166c4:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 80166c8:	78da      	ldrb	r2, [r3, #3]
 80166ca:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
 80166ce:	789a      	ldrb	r2, [r3, #2]
 80166d0:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
 80166d4:	785a      	ldrb	r2, [r3, #1]
 80166d6:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
 80166da:	781a      	ldrb	r2, [r3, #0]
 80166dc:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 80166e0:	2200      	movs	r2, #0
 80166e2:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
 80166e6:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 80166ea:	0a09      	lsrs	r1, r1, #8
 80166ec:	f88d 103d 	strb.w	r1, [sp, #61]	; 0x3d
 80166f0:	7b19      	ldrb	r1, [r3, #12]
 80166f2:	f88d 103e 	strb.w	r1, [sp, #62]	; 0x3e
 80166f6:	7adb      	ldrb	r3, [r3, #11]
 80166f8:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 80166fc:	ab0c      	add	r3, sp, #48	; 0x30
 80166fe:	9300      	str	r3, [sp, #0]
 8016700:	2310      	movs	r3, #16
 8016702:	493e      	ldr	r1, [pc, #248]	; (80167fc <dwt_ioctl+0xe28>)
 8016704:	f7fd fd76 	bl	80141f4 <dwt_writetodevice>
 8016708:	e796      	b.n	8016638 <dwt_ioctl+0xc64>
 801670a:	2a01      	cmp	r2, #1
 801670c:	f040 80cf 	bne.w	80168ae <dwt_ioctl+0xeda>
 8016710:	f899 3011 	ldrb.w	r3, [r9, #17]
 8016714:	2b00      	cmp	r3, #0
 8016716:	f240 33ff 	movw	r3, #1023	; 0x3ff
 801671a:	bf08      	it	eq
 801671c:	237f      	moveq	r3, #127	; 0x7f
 801671e:	f899 2013 	ldrb.w	r2, [r9, #19]
 8016722:	1a9b      	subs	r3, r3, r2
 8016724:	3b02      	subs	r3, #2
 8016726:	4299      	cmp	r1, r3
 8016728:	f200 80c7 	bhi.w	80168ba <dwt_ioctl+0xee6>
 801672c:	f899 2010 	ldrb.w	r2, [r9, #16]
 8016730:	1e53      	subs	r3, r2, #1
 8016732:	b2db      	uxtb	r3, r3
 8016734:	2b01      	cmp	r3, #1
 8016736:	d940      	bls.n	80167ba <dwt_ioctl+0xde6>
 8016738:	f899 3011 	ldrb.w	r3, [r9, #17]
 801673c:	1e59      	subs	r1, r3, #1
 801673e:	b2c9      	uxtb	r1, r1
 8016740:	2901      	cmp	r1, #1
 8016742:	d967      	bls.n	8016814 <dwt_ioctl+0xe40>
 8016744:	2b04      	cmp	r3, #4
 8016746:	d06c      	beq.n	8016822 <dwt_ioctl+0xe4e>
 8016748:	ea42 3343 	orr.w	r3, r2, r3, lsl #13
 801674c:	2200      	movs	r2, #0
 801674e:	492c      	ldr	r1, [pc, #176]	; (8016800 <dwt_ioctl+0xe2c>)
 8016750:	4630      	mov	r0, r6
 8016752:	f7fd fead 	bl	80144b0 <dwt_write32bitoffsetreg>
 8016756:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 801675a:	4a2a      	ldr	r2, [pc, #168]	; (8016804 <dwt_ioctl+0xe30>)
 801675c:	ea02 12c3 	and.w	r2, r2, r3, lsl #7
 8016760:	f899 300c 	ldrb.w	r3, [r9, #12]
 8016764:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016768:	4313      	orrs	r3, r2
 801676a:	2200      	movs	r2, #0
 801676c:	4926      	ldr	r1, [pc, #152]	; (8016808 <dwt_ioctl+0xe34>)
 801676e:	4630      	mov	r0, r6
 8016770:	f7fd fe9e 	bl	80144b0 <dwt_write32bitoffsetreg>
 8016774:	2301      	movs	r3, #1
 8016776:	2200      	movs	r2, #0
 8016778:	4924      	ldr	r1, [pc, #144]	; (801680c <dwt_ioctl+0xe38>)
 801677a:	4630      	mov	r0, r6
 801677c:	f7fd fd45 	bl	801420a <dwt_write8bitoffsetreg>
 8016780:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8016810 <dwt_ioctl+0xe3c>
 8016784:	2700      	movs	r7, #0
 8016786:	463a      	mov	r2, r7
 8016788:	4641      	mov	r1, r8
 801678a:	4630      	mov	r0, r6
 801678c:	f7fd f976 	bl	8013a7c <dwt_read8bitoffsetreg>
 8016790:	f010 0f05 	tst.w	r0, #5
 8016794:	d0f7      	beq.n	8016786 <dwt_ioctl+0xdb2>
 8016796:	4605      	mov	r5, r0
 8016798:	4603      	mov	r3, r0
 801679a:	2200      	movs	r2, #0
 801679c:	491c      	ldr	r1, [pc, #112]	; (8016810 <dwt_ioctl+0xe3c>)
 801679e:	4630      	mov	r0, r6
 80167a0:	f7fd fd33 	bl	801420a <dwt_write8bitoffsetreg>
 80167a4:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 80167a8:	f025 0330 	bic.w	r3, r5, #48	; 0x30
 80167ac:	2b01      	cmp	r3, #1
 80167ae:	d045      	beq.n	801683c <dwt_ioctl+0xe68>
 80167b0:	b26b      	sxtb	r3, r5
 80167b2:	7023      	strb	r3, [r4, #0]
 80167b4:	2500      	movs	r5, #0
 80167b6:	f7ff b9b7 	b.w	8015b28 <dwt_ioctl+0x154>
 80167ba:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80167bc:	7bdb      	ldrb	r3, [r3, #15]
 80167be:	2b03      	cmp	r3, #3
 80167c0:	f001 8031 	beq.w	8017826 <dwt_ioctl+0x1e52>
 80167c4:	f899 3011 	ldrb.w	r3, [r9, #17]
 80167c8:	1e5a      	subs	r2, r3, #1
 80167ca:	b2d2      	uxtb	r2, r2
 80167cc:	2a01      	cmp	r2, #1
 80167ce:	d92f      	bls.n	8016830 <dwt_ioctl+0xe5c>
 80167d0:	2201      	movs	r2, #1
 80167d2:	e7b7      	b.n	8016744 <dwt_ioctl+0xd70>
 80167d4:	00070048 	.word	0x00070048
 80167d8:	00070034 	.word	0x00070034
 80167dc:	00080004 	.word	0x00080004
 80167e0:	3f866666 	.word	0x3f866666
 80167e4:	41b00000 	.word	0x41b00000
 80167e8:	3ecccccd 	.word	0x3ecccccd
 80167ec:	437f0000 	.word	0x437f0000
 80167f0:	40400000 	.word	0x40400000
 80167f4:	000f0024 	.word	0x000f0024
 80167f8:	00020008 	.word	0x00020008
 80167fc:	00010034 	.word	0x00010034
 8016800:	00010044 	.word	0x00010044
 8016804:	0001ff80 	.word	0x0001ff80
 8016808:	00010048 	.word	0x00010048
 801680c:	0001004c 	.word	0x0001004c
 8016810:	00010050 	.word	0x00010050
 8016814:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8016816:	7bdb      	ldrb	r3, [r3, #15]
 8016818:	2b03      	cmp	r3, #3
 801681a:	bf0c      	ite	eq
 801681c:	2302      	moveq	r3, #2
 801681e:	2301      	movne	r3, #1
 8016820:	e792      	b.n	8016748 <dwt_ioctl+0xd74>
 8016822:	f8b9 100e 	ldrh.w	r1, [r9, #14]
 8016826:	2910      	cmp	r1, #16
 8016828:	d98e      	bls.n	8016748 <dwt_ioctl+0xd74>
 801682a:	f06f 0303 	mvn.w	r3, #3
 801682e:	e7c0      	b.n	80167b2 <dwt_ioctl+0xdde>
 8016830:	2201      	movs	r2, #1
 8016832:	4613      	mov	r3, r2
 8016834:	e788      	b.n	8016748 <dwt_ioctl+0xd74>
 8016836:	2202      	movs	r2, #2
 8016838:	4613      	mov	r3, r2
 801683a:	e785      	b.n	8016748 <dwt_ioctl+0xd74>
 801683c:	f899 3012 	ldrb.w	r3, [r9, #18]
 8016840:	2b01      	cmp	r3, #1
 8016842:	d1b5      	bne.n	80167b0 <dwt_ioctl+0xddc>
 8016844:	f899 2011 	ldrb.w	r2, [r9, #17]
 8016848:	1e53      	subs	r3, r2, #1
 801684a:	b2db      	uxtb	r3, r3
 801684c:	2b01      	cmp	r3, #1
 801684e:	d91b      	bls.n	8016888 <dwt_ioctl+0xeb4>
 8016850:	2a03      	cmp	r2, #3
 8016852:	bf0c      	ite	eq
 8016854:	f44f 17a0 	moveq.w	r7, #1310720	; 0x140000
 8016858:	f44f 17b0 	movne.w	r7, #1441792	; 0x160000
 801685c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8016860:	b112      	cbz	r2, 8016868 <dwt_ioctl+0xe94>
 8016862:	f899 300c 	ldrb.w	r3, [r9, #12]
 8016866:	b9c3      	cbnz	r3, 801689a <dwt_ioctl+0xec6>
 8016868:	f8d9 1008 	ldr.w	r1, [r9, #8]
 801686c:	2900      	cmp	r1, #0
 801686e:	d09f      	beq.n	80167b0 <dwt_ioctl+0xddc>
 8016870:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 8016874:	2b00      	cmp	r3, #0
 8016876:	d09b      	beq.n	80167b0 <dwt_ioctl+0xddc>
 8016878:	f899 200c 	ldrb.w	r2, [r9, #12]
 801687c:	9100      	str	r1, [sp, #0]
 801687e:	4639      	mov	r1, r7
 8016880:	4630      	mov	r0, r6
 8016882:	f7fd f8c9 	bl	8013a18 <dwt_readfromdevice>
 8016886:	e793      	b.n	80167b0 <dwt_ioctl+0xddc>
 8016888:	6d33      	ldr	r3, [r6, #80]	; 0x50
 801688a:	7bdb      	ldrb	r3, [r3, #15]
 801688c:	2b03      	cmp	r3, #3
 801688e:	bf0c      	ite	eq
 8016890:	f44f 1798 	moveq.w	r7, #1245184	; 0x130000
 8016894:	f44f 1790 	movne.w	r7, #1179648	; 0x120000
 8016898:	e7e0      	b.n	801685c <dwt_ioctl+0xe88>
 801689a:	9200      	str	r2, [sp, #0]
 801689c:	2200      	movs	r2, #0
 801689e:	4639      	mov	r1, r7
 80168a0:	4630      	mov	r0, r6
 80168a2:	f7fd f8b9 	bl	8013a18 <dwt_readfromdevice>
 80168a6:	e7df      	b.n	8016868 <dwt_ioctl+0xe94>
 80168a8:	f06f 0302 	mvn.w	r3, #2
 80168ac:	e781      	b.n	80167b2 <dwt_ioctl+0xdde>
 80168ae:	f06f 0301 	mvn.w	r3, #1
 80168b2:	e77e      	b.n	80167b2 <dwt_ioctl+0xdde>
 80168b4:	f04f 33ff 	mov.w	r3, #4294967295
 80168b8:	e77b      	b.n	80167b2 <dwt_ioctl+0xdde>
 80168ba:	f04f 33ff 	mov.w	r3, #4294967295
 80168be:	e778      	b.n	80167b2 <dwt_ioctl+0xdde>
 80168c0:	7a23      	ldrb	r3, [r4, #8]
 80168c2:	79e1      	ldrb	r1, [r4, #7]
 80168c4:	79a2      	ldrb	r2, [r4, #6]
 80168c6:	00d2      	lsls	r2, r2, #3
 80168c8:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80168cc:	4313      	orrs	r3, r2
 80168ce:	7962      	ldrb	r2, [r4, #5]
 80168d0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80168d4:	7922      	ldrb	r2, [r4, #4]
 80168d6:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80168da:	78e2      	ldrb	r2, [r4, #3]
 80168dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80168e0:	78a2      	ldrb	r2, [r4, #2]
 80168e2:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 80168e6:	7862      	ldrb	r2, [r4, #1]
 80168e8:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80168ec:	b29b      	uxth	r3, r3
 80168ee:	2200      	movs	r2, #0
 80168f0:	49cd      	ldr	r1, [pc, #820]	; (8016c28 <dwt_ioctl+0x1254>)
 80168f2:	f7fd fcdc 	bl	80142ae <dwt_write16bitoffsetreg>
 80168f6:	2500      	movs	r5, #0
 80168f8:	f7ff b916 	b.w	8015b28 <dwt_ioctl+0x154>
 80168fc:	2c00      	cmp	r4, #0
 80168fe:	f000 86fc 	beq.w	80176fa <dwt_ioctl+0x1d26>
 8016902:	7863      	ldrb	r3, [r4, #1]
 8016904:	b133      	cbz	r3, 8016914 <dwt_ioctl+0xf40>
 8016906:	085b      	lsrs	r3, r3, #1
 8016908:	3b01      	subs	r3, #1
 801690a:	b2db      	uxtb	r3, r3
 801690c:	7023      	strb	r3, [r4, #0]
 801690e:	2500      	movs	r5, #0
 8016910:	f7ff b90a 	b.w	8015b28 <dwt_ioctl+0x154>
 8016914:	2300      	movs	r3, #0
 8016916:	e7f9      	b.n	801690c <dwt_ioctl+0xf38>
 8016918:	2200      	movs	r2, #0
 801691a:	49c4      	ldr	r1, [pc, #784]	; (8016c2c <dwt_ioctl+0x1258>)
 801691c:	f7fd f886 	bl	8013a2c <dwt_read32bitoffsetreg>
 8016920:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8016924:	8023      	strh	r3, [r4, #0]
 8016926:	f3c0 400b 	ubfx	r0, r0, #16, #12
 801692a:	8060      	strh	r0, [r4, #2]
 801692c:	2200      	movs	r2, #0
 801692e:	49c0      	ldr	r1, [pc, #768]	; (8016c30 <dwt_ioctl+0x125c>)
 8016930:	4630      	mov	r0, r6
 8016932:	f7fd f87b 	bl	8013a2c <dwt_read32bitoffsetreg>
 8016936:	f3c0 030b 	ubfx	r3, r0, #0, #12
 801693a:	80a3      	strh	r3, [r4, #4]
 801693c:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8016940:	80e0      	strh	r0, [r4, #6]
 8016942:	2200      	movs	r2, #0
 8016944:	49bb      	ldr	r1, [pc, #748]	; (8016c34 <dwt_ioctl+0x1260>)
 8016946:	4630      	mov	r0, r6
 8016948:	f7fd f870 	bl	8013a2c <dwt_read32bitoffsetreg>
 801694c:	7220      	strb	r0, [r4, #8]
 801694e:	0c00      	lsrs	r0, r0, #16
 8016950:	7260      	strb	r0, [r4, #9]
 8016952:	2200      	movs	r2, #0
 8016954:	49b8      	ldr	r1, [pc, #736]	; (8016c38 <dwt_ioctl+0x1264>)
 8016956:	4630      	mov	r0, r6
 8016958:	f7fd f868 	bl	8013a2c <dwt_read32bitoffsetreg>
 801695c:	f3c0 430b 	ubfx	r3, r0, #16, #12
 8016960:	81a3      	strh	r3, [r4, #12]
 8016962:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8016966:	8160      	strh	r0, [r4, #10]
 8016968:	2200      	movs	r2, #0
 801696a:	49b4      	ldr	r1, [pc, #720]	; (8016c3c <dwt_ioctl+0x1268>)
 801696c:	4630      	mov	r0, r6
 801696e:	f7fd f85d 	bl	8013a2c <dwt_read32bitoffsetreg>
 8016972:	f3c0 430b 	ubfx	r3, r0, #16, #12
 8016976:	f8a4 300f 	strh.w	r3, [r4, #15]
 801697a:	73a0      	strb	r0, [r4, #14]
 801697c:	2200      	movs	r2, #0
 801697e:	49b0      	ldr	r1, [pc, #704]	; (8016c40 <dwt_ioctl+0x126c>)
 8016980:	4630      	mov	r0, r6
 8016982:	f7fd f853 	bl	8013a2c <dwt_read32bitoffsetreg>
 8016986:	7460      	strb	r0, [r4, #17]
 8016988:	0c00      	lsrs	r0, r0, #16
 801698a:	74a0      	strb	r0, [r4, #18]
 801698c:	2200      	movs	r2, #0
 801698e:	49ad      	ldr	r1, [pc, #692]	; (8016c44 <dwt_ioctl+0x1270>)
 8016990:	4630      	mov	r0, r6
 8016992:	f7fd f84b 	bl	8013a2c <dwt_read32bitoffsetreg>
 8016996:	f3c0 000b 	ubfx	r0, r0, #0, #12
 801699a:	f8a4 0013 	strh.w	r0, [r4, #19]
 801699e:	2500      	movs	r5, #0
 80169a0:	7565      	strb	r5, [r4, #21]
 80169a2:	75a5      	strb	r5, [r4, #22]
 80169a4:	462a      	mov	r2, r5
 80169a6:	49a8      	ldr	r1, [pc, #672]	; (8016c48 <dwt_ioctl+0x1274>)
 80169a8:	4630      	mov	r0, r6
 80169aa:	f7fd f867 	bl	8013a7c <dwt_read8bitoffsetreg>
 80169ae:	75e0      	strb	r0, [r4, #23]
 80169b0:	f7ff b8ba 	b.w	8015b28 <dwt_ioctl+0x154>
 80169b4:	4611      	mov	r1, r2
 80169b6:	f7fd fc67 	bl	8014288 <ull_configeventcounters>
 80169ba:	2500      	movs	r5, #0
 80169bc:	f7ff b8b4 	b.w	8015b28 <dwt_ioctl+0x154>
 80169c0:	2c00      	cmp	r4, #0
 80169c2:	f000 869d 	beq.w	8017700 <dwt_ioctl+0x1d2c>
 80169c6:	8823      	ldrh	r3, [r4, #0]
 80169c8:	2200      	movs	r2, #0
 80169ca:	49a0      	ldr	r1, [pc, #640]	; (8016c4c <dwt_ioctl+0x1278>)
 80169cc:	f7fd fc6f 	bl	80142ae <dwt_write16bitoffsetreg>
 80169d0:	2500      	movs	r5, #0
 80169d2:	f7ff b8a9 	b.w	8015b28 <dwt_ioctl+0x154>
 80169d6:	2c00      	cmp	r4, #0
 80169d8:	f000 8695 	beq.w	8017706 <dwt_ioctl+0x1d32>
 80169dc:	6825      	ldr	r5, [r4, #0]
 80169de:	b935      	cbnz	r5, 80169ee <dwt_ioctl+0x101a>
 80169e0:	2300      	movs	r3, #0
 80169e2:	461a      	mov	r2, r3
 80169e4:	499a      	ldr	r1, [pc, #616]	; (8016c50 <dwt_ioctl+0x127c>)
 80169e6:	f7fd fc62 	bl	80142ae <dwt_write16bitoffsetreg>
 80169ea:	f7ff b89d 	b.w	8015b28 <dwt_ioctl+0x154>
 80169ee:	7962      	ldrb	r2, [r4, #5]
 80169f0:	7923      	ldrb	r3, [r4, #4]
 80169f2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80169f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80169fa:	2200      	movs	r2, #0
 80169fc:	4994      	ldr	r1, [pc, #592]	; (8016c50 <dwt_ioctl+0x127c>)
 80169fe:	f7fd fc56 	bl	80142ae <dwt_write16bitoffsetreg>
 8016a02:	2500      	movs	r5, #0
 8016a04:	f7ff b890 	b.w	8015b28 <dwt_ioctl+0x154>
 8016a08:	2c00      	cmp	r4, #0
 8016a0a:	f000 867f 	beq.w	801770c <dwt_ioctl+0x1d38>
 8016a0e:	6823      	ldr	r3, [r4, #0]
 8016a10:	b94b      	cbnz	r3, 8016a26 <dwt_ioctl+0x1052>
 8016a12:	2500      	movs	r5, #0
 8016a14:	9500      	str	r5, [sp, #0]
 8016a16:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 8016a1a:	462a      	mov	r2, r5
 8016a1c:	2110      	movs	r1, #16
 8016a1e:	f7fe fc75 	bl	801530c <dwt_modify16bitoffsetreg>
 8016a22:	f7ff b881 	b.w	8015b28 <dwt_ioctl+0x154>
 8016a26:	2200      	movs	r2, #0
 8016a28:	2134      	movs	r1, #52	; 0x34
 8016a2a:	f7fd fd41 	bl	80144b0 <dwt_write32bitoffsetreg>
 8016a2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016a32:	9300      	str	r3, [sp, #0]
 8016a34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016a38:	2200      	movs	r2, #0
 8016a3a:	2110      	movs	r1, #16
 8016a3c:	4630      	mov	r0, r6
 8016a3e:	f7fe fc65 	bl	801530c <dwt_modify16bitoffsetreg>
 8016a42:	2500      	movs	r5, #0
 8016a44:	f7ff b870 	b.w	8015b28 <dwt_ioctl+0x154>
 8016a48:	2c00      	cmp	r4, #0
 8016a4a:	f000 8662 	beq.w	8017712 <dwt_ioctl+0x1d3e>
 8016a4e:	8861      	ldrh	r1, [r4, #2]
 8016a50:	f7fd fcaa 	bl	80143a8 <ull_aon_read>
 8016a54:	7020      	strb	r0, [r4, #0]
 8016a56:	2500      	movs	r5, #0
 8016a58:	f7ff b866 	b.w	8015b28 <dwt_ioctl+0x154>
 8016a5c:	2c00      	cmp	r4, #0
 8016a5e:	f000 865b 	beq.w	8017718 <dwt_ioctl+0x1d44>
 8016a62:	78a2      	ldrb	r2, [r4, #2]
 8016a64:	8821      	ldrh	r1, [r4, #0]
 8016a66:	f7fd fcbf 	bl	80143e8 <ull_aon_write>
 8016a6a:	2500      	movs	r5, #0
 8016a6c:	f7ff b85c 	b.w	8015b28 <dwt_ioctl+0x154>
 8016a70:	4b78      	ldr	r3, [pc, #480]	; (8016c54 <dwt_ioctl+0x1280>)
 8016a72:	4a79      	ldr	r2, [pc, #484]	; (8016c58 <dwt_ioctl+0x1284>)
 8016a74:	2d01      	cmp	r5, #1
 8016a76:	bf18      	it	ne
 8016a78:	4613      	movne	r3, r2
 8016a7a:	2d01      	cmp	r5, #1
 8016a7c:	4977      	ldr	r1, [pc, #476]	; (8016c5c <dwt_ioctl+0x1288>)
 8016a7e:	bf18      	it	ne
 8016a80:	f04f 110c 	movne.w	r1, #786444	; 0xc000c
 8016a84:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8016a86:	7bd2      	ldrb	r2, [r2, #15]
 8016a88:	2a01      	cmp	r2, #1
 8016a8a:	d012      	beq.n	8016ab2 <dwt_ioctl+0x10de>
 8016a8c:	2a03      	cmp	r2, #3
 8016a8e:	d117      	bne.n	8016ac0 <dwt_ioctl+0x10ec>
 8016a90:	f5a2 12c0 	sub.w	r2, r2, #1572864	; 0x180000
 8016a94:	3a01      	subs	r2, #1
 8016a96:	441a      	add	r2, r3
 8016a98:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8016a9c:	f7fc ffdc 	bl	8013a58 <dwt_read16bitoffsetreg>
 8016aa0:	09c0      	lsrs	r0, r0, #7
 8016aa2:	8020      	strh	r0, [r4, #0]
 8016aa4:	8825      	ldrh	r5, [r4, #0]
 8016aa6:	3500      	adds	r5, #0
 8016aa8:	bf18      	it	ne
 8016aaa:	2501      	movne	r5, #1
 8016aac:	426d      	negs	r5, r5
 8016aae:	f7ff b83b 	b.w	8015b28 <dwt_ioctl+0x154>
 8016ab2:	2202      	movs	r2, #2
 8016ab4:	4619      	mov	r1, r3
 8016ab6:	f7fc ffcf 	bl	8013a58 <dwt_read16bitoffsetreg>
 8016aba:	09c0      	lsrs	r0, r0, #7
 8016abc:	8020      	strh	r0, [r4, #0]
 8016abe:	e7f1      	b.n	8016aa4 <dwt_ioctl+0x10d0>
 8016ac0:	2202      	movs	r2, #2
 8016ac2:	f7fc ffc9 	bl	8013a58 <dwt_read16bitoffsetreg>
 8016ac6:	09c0      	lsrs	r0, r0, #7
 8016ac8:	8020      	strh	r0, [r4, #0]
 8016aca:	e7eb      	b.n	8016aa4 <dwt_ioctl+0x10d0>
 8016acc:	2c00      	cmp	r4, #0
 8016ace:	f000 8626 	beq.w	801771e <dwt_ioctl+0x1d4a>
 8016ad2:	7821      	ldrb	r1, [r4, #0]
 8016ad4:	f7fe fc50 	bl	8015378 <ull_setleds>
 8016ad8:	2500      	movs	r5, #0
 8016ada:	f7ff b825 	b.w	8015b28 <dwt_ioctl+0x154>
 8016ade:	4611      	mov	r1, r2
 8016ae0:	f7fe fb20 	bl	8015124 <ull_setdwstate>
 8016ae4:	2500      	movs	r5, #0
 8016ae6:	f7ff b81f 	b.w	8015b28 <dwt_ioctl+0x154>
 8016aea:	9400      	str	r4, [sp, #0]
 8016aec:	2304      	movs	r3, #4
 8016aee:	2200      	movs	r2, #0
 8016af0:	211c      	movs	r1, #28
 8016af2:	f7fc ff91 	bl	8013a18 <dwt_readfromdevice>
 8016af6:	2500      	movs	r5, #0
 8016af8:	f7ff b816 	b.w	8015b28 <dwt_ioctl+0x154>
 8016afc:	2c00      	cmp	r4, #0
 8016afe:	f000 8611 	beq.w	8017724 <dwt_ioctl+0x1d50>
 8016b02:	2202      	movs	r2, #2
 8016b04:	2144      	movs	r1, #68	; 0x44
 8016b06:	f7fc ffa7 	bl	8013a58 <dwt_read16bitoffsetreg>
 8016b0a:	f3c0 2000 	ubfx	r0, r0, #8, #1
 8016b0e:	7020      	strb	r0, [r4, #0]
 8016b10:	2500      	movs	r5, #0
 8016b12:	f7ff b809 	b.w	8015b28 <dwt_ioctl+0x154>
 8016b16:	2c00      	cmp	r4, #0
 8016b18:	f000 8607 	beq.w	801772a <dwt_ioctl+0x1d56>
 8016b1c:	2200      	movs	r2, #0
 8016b1e:	2144      	movs	r1, #68	; 0x44
 8016b20:	f7fc ffac 	bl	8013a7c <dwt_read8bitoffsetreg>
 8016b24:	f000 0001 	and.w	r0, r0, #1
 8016b28:	7020      	strb	r0, [r4, #0]
 8016b2a:	2500      	movs	r5, #0
 8016b2c:	f7fe bffc 	b.w	8015b28 <dwt_ioctl+0x154>
 8016b30:	2c00      	cmp	r4, #0
 8016b32:	f000 85fd 	beq.w	8017730 <dwt_ioctl+0x1d5c>
 8016b36:	8862      	ldrh	r2, [r4, #2]
 8016b38:	8821      	ldrh	r1, [r4, #0]
 8016b3a:	f7fe fb51 	bl	80151e0 <ull_configureframefilter>
 8016b3e:	2500      	movs	r5, #0
 8016b40:	f7fe bff2 	b.w	8015b28 <dwt_ioctl+0x154>
 8016b44:	9400      	str	r4, [sp, #0]
 8016b46:	2308      	movs	r3, #8
 8016b48:	2200      	movs	r2, #0
 8016b4a:	2104      	movs	r1, #4
 8016b4c:	f7fd fb52 	bl	80141f4 <dwt_writetodevice>
 8016b50:	2500      	movs	r5, #0
 8016b52:	f7fe bfe9 	b.w	8015b28 <dwt_ioctl+0x154>
 8016b56:	9400      	str	r4, [sp, #0]
 8016b58:	2308      	movs	r3, #8
 8016b5a:	2200      	movs	r2, #0
 8016b5c:	2104      	movs	r1, #4
 8016b5e:	f7fc ff5b 	bl	8013a18 <dwt_readfromdevice>
 8016b62:	2500      	movs	r5, #0
 8016b64:	f7fe bfe0 	b.w	8015b28 <dwt_ioctl+0x154>
 8016b68:	2c00      	cmp	r4, #0
 8016b6a:	f000 85e4 	beq.w	8017736 <dwt_ioctl+0x1d62>
 8016b6e:	8823      	ldrh	r3, [r4, #0]
 8016b70:	2202      	movs	r2, #2
 8016b72:	210c      	movs	r1, #12
 8016b74:	f7fd fb9b 	bl	80142ae <dwt_write16bitoffsetreg>
 8016b78:	2500      	movs	r5, #0
 8016b7a:	f7fe bfd5 	b.w	8015b28 <dwt_ioctl+0x154>
 8016b7e:	2c00      	cmp	r4, #0
 8016b80:	f000 85dc 	beq.w	801773c <dwt_ioctl+0x1d68>
 8016b84:	8823      	ldrh	r3, [r4, #0]
 8016b86:	2200      	movs	r2, #0
 8016b88:	210c      	movs	r1, #12
 8016b8a:	f7fd fb90 	bl	80142ae <dwt_write16bitoffsetreg>
 8016b8e:	2500      	movs	r5, #0
 8016b90:	f7fe bfca 	b.w	8015b28 <dwt_ioctl+0x154>
 8016b94:	4621      	mov	r1, r4
 8016b96:	f7fd fb0b 	bl	80141b0 <ull_readrxtimestamp>
 8016b9a:	2500      	movs	r5, #0
 8016b9c:	f7fe bfc4 	b.w	8015b28 <dwt_ioctl+0x154>
 8016ba0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8016ba2:	7bdb      	ldrb	r3, [r3, #15]
 8016ba4:	2b01      	cmp	r3, #1
 8016ba6:	d00b      	beq.n	8016bc0 <dwt_ioctl+0x11ec>
 8016ba8:	2b03      	cmp	r3, #3
 8016baa:	d112      	bne.n	8016bd2 <dwt_ioctl+0x11fe>
 8016bac:	9400      	str	r4, [sp, #0]
 8016bae:	2305      	movs	r3, #5
 8016bb0:	2220      	movs	r2, #32
 8016bb2:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8016bb6:	f7fc ff2f 	bl	8013a18 <dwt_readfromdevice>
 8016bba:	2500      	movs	r5, #0
 8016bbc:	f7fe bfb4 	b.w	8015b28 <dwt_ioctl+0x154>
 8016bc0:	9400      	str	r4, [sp, #0]
 8016bc2:	2305      	movs	r3, #5
 8016bc4:	2200      	movs	r2, #0
 8016bc6:	4926      	ldr	r1, [pc, #152]	; (8016c60 <dwt_ioctl+0x128c>)
 8016bc8:	f7fc ff26 	bl	8013a18 <dwt_readfromdevice>
 8016bcc:	2500      	movs	r5, #0
 8016bce:	f7fe bfab 	b.w	8015b28 <dwt_ioctl+0x154>
 8016bd2:	9400      	str	r4, [sp, #0]
 8016bd4:	2305      	movs	r3, #5
 8016bd6:	2200      	movs	r2, #0
 8016bd8:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 8016bdc:	f7fc ff1c 	bl	8013a18 <dwt_readfromdevice>
 8016be0:	2500      	movs	r5, #0
 8016be2:	f7fe bfa1 	b.w	8015b28 <dwt_ioctl+0x154>
 8016be6:	2500      	movs	r5, #0
 8016be8:	f804 5b01 	strb.w	r5, [r4], #1
 8016bec:	9400      	str	r4, [sp, #0]
 8016bee:	2304      	movs	r3, #4
 8016bf0:	462a      	mov	r2, r5
 8016bf2:	2170      	movs	r1, #112	; 0x70
 8016bf4:	f7fc ff10 	bl	8013a18 <dwt_readfromdevice>
 8016bf8:	f7fe bf96 	b.w	8015b28 <dwt_ioctl+0x154>
 8016bfc:	2c00      	cmp	r4, #0
 8016bfe:	f000 85a0 	beq.w	8017742 <dwt_ioctl+0x1d6e>
 8016c02:	2201      	movs	r2, #1
 8016c04:	2164      	movs	r1, #100	; 0x64
 8016c06:	f7fc ff11 	bl	8013a2c <dwt_read32bitoffsetreg>
 8016c0a:	6020      	str	r0, [r4, #0]
 8016c0c:	2500      	movs	r5, #0
 8016c0e:	f7fe bf8b 	b.w	8015b28 <dwt_ioctl+0x154>
 8016c12:	2c00      	cmp	r4, #0
 8016c14:	f000 8598 	beq.w	8017748 <dwt_ioctl+0x1d74>
 8016c18:	2200      	movs	r2, #0
 8016c1a:	2164      	movs	r1, #100	; 0x64
 8016c1c:	f7fc ff06 	bl	8013a2c <dwt_read32bitoffsetreg>
 8016c20:	6020      	str	r0, [r4, #0]
 8016c22:	2500      	movs	r5, #0
 8016c24:	f7fe bf80 	b.w	8015b28 <dwt_ioctl+0x154>
 8016c28:	00010030 	.word	0x00010030
 8016c2c:	000f0004 	.word	0x000f0004
 8016c30:	000f0008 	.word	0x000f0008
 8016c34:	000f000c 	.word	0x000f000c
 8016c38:	000f0010 	.word	0x000f0010
 8016c3c:	000f0014 	.word	0x000f0014
 8016c40:	000f0018 	.word	0x000f0018
 8016c44:	000f001c 	.word	0x000f001c
 8016c48:	000f0028 	.word	0x000f0028
 8016c4c:	00060004 	.word	0x00060004
 8016c50:	0011001a 	.word	0x0011001a
 8016c54:	00180034 	.word	0x00180034
 8016c58:	0018002c 	.word	0x0018002c
 8016c5c:	000c0014 	.word	0x000c0014
 8016c60:	00180020 	.word	0x00180020
 8016c64:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8016c66:	7bdb      	ldrb	r3, [r3, #15]
 8016c68:	2b01      	cmp	r3, #1
 8016c6a:	d00b      	beq.n	8016c84 <dwt_ioctl+0x12b0>
 8016c6c:	2b03      	cmp	r3, #3
 8016c6e:	d112      	bne.n	8016c96 <dwt_ioctl+0x12c2>
 8016c70:	9400      	str	r4, [sp, #0]
 8016c72:	2305      	movs	r3, #5
 8016c74:	2228      	movs	r2, #40	; 0x28
 8016c76:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8016c7a:	f7fc fecd 	bl	8013a18 <dwt_readfromdevice>
 8016c7e:	2500      	movs	r5, #0
 8016c80:	f7fe bf52 	b.w	8015b28 <dwt_ioctl+0x154>
 8016c84:	9400      	str	r4, [sp, #0]
 8016c86:	2305      	movs	r3, #5
 8016c88:	2200      	movs	r2, #0
 8016c8a:	49d3      	ldr	r1, [pc, #844]	; (8016fd8 <dwt_ioctl+0x1604>)
 8016c8c:	f7fc fec4 	bl	8013a18 <dwt_readfromdevice>
 8016c90:	2500      	movs	r5, #0
 8016c92:	f7fe bf49 	b.w	8015b28 <dwt_ioctl+0x154>
 8016c96:	9400      	str	r4, [sp, #0]
 8016c98:	2305      	movs	r3, #5
 8016c9a:	2200      	movs	r2, #0
 8016c9c:	49cf      	ldr	r1, [pc, #828]	; (8016fdc <dwt_ioctl+0x1608>)
 8016c9e:	f7fc febb 	bl	8013a18 <dwt_readfromdevice>
 8016ca2:	2500      	movs	r5, #0
 8016ca4:	f7fe bf40 	b.w	8015b28 <dwt_ioctl+0x154>
 8016ca8:	2c00      	cmp	r4, #0
 8016caa:	f000 8550 	beq.w	801774e <dwt_ioctl+0x1d7a>
 8016cae:	2200      	movs	r2, #0
 8016cb0:	211c      	movs	r1, #28
 8016cb2:	f7fc febb 	bl	8013a2c <dwt_read32bitoffsetreg>
 8016cb6:	6020      	str	r0, [r4, #0]
 8016cb8:	2500      	movs	r5, #0
 8016cba:	f7fe bf35 	b.w	8015b28 <dwt_ioctl+0x154>
 8016cbe:	2c00      	cmp	r4, #0
 8016cc0:	f000 8548 	beq.w	8017754 <dwt_ioctl+0x1d80>
 8016cc4:	8825      	ldrh	r5, [r4, #0]
 8016cc6:	6867      	ldr	r7, [r4, #4]
 8016cc8:	7a23      	ldrb	r3, [r4, #8]
 8016cca:	2b00      	cmp	r3, #0
 8016ccc:	f000 8545 	beq.w	801775a <dwt_ioctl+0x1d86>
 8016cd0:	463c      	mov	r4, r7
 8016cd2:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 8016cd6:	4629      	mov	r1, r5
 8016cd8:	4630      	mov	r0, r6
 8016cda:	f7fd fb43 	bl	8014364 <_dwt_otpread>
 8016cde:	f844 0b04 	str.w	r0, [r4], #4
 8016ce2:	3501      	adds	r5, #1
 8016ce4:	b2ad      	uxth	r5, r5
 8016ce6:	42bc      	cmp	r4, r7
 8016ce8:	d1f5      	bne.n	8016cd6 <dwt_ioctl+0x1302>
 8016cea:	2500      	movs	r5, #0
 8016cec:	f7fe bf1c 	b.w	8015b28 <dwt_ioctl+0x154>
 8016cf0:	2c00      	cmp	r4, #0
 8016cf2:	f000 8535 	beq.w	8017760 <dwt_ioctl+0x1d8c>
 8016cf6:	7823      	ldrb	r3, [r4, #0]
 8016cf8:	2201      	movs	r2, #1
 8016cfa:	2128      	movs	r1, #40	; 0x28
 8016cfc:	f7fd fa85 	bl	801420a <dwt_write8bitoffsetreg>
 8016d00:	2500      	movs	r5, #0
 8016d02:	f7fe bf11 	b.w	8015b28 <dwt_ioctl+0x154>
 8016d06:	f7fe fa8f 	bl	8015228 <ull_run_pgfcal>
 8016d0a:	4605      	mov	r5, r0
 8016d0c:	f7fe bf0c 	b.w	8015b28 <dwt_ioctl+0x154>
 8016d10:	4611      	mov	r1, r2
 8016d12:	f7fe fb7f 	bl	8015414 <ull_pgf_cal>
 8016d16:	4605      	mov	r5, r0
 8016d18:	f7fe bf06 	b.w	8015b28 <dwt_ioctl+0x154>
 8016d1c:	2c00      	cmp	r4, #0
 8016d1e:	f000 8522 	beq.w	8017766 <dwt_ioctl+0x1d92>
 8016d22:	78a5      	ldrb	r5, [r4, #2]
 8016d24:	2101      	movs	r1, #1
 8016d26:	f7fd faf3 	bl	8014310 <ull_force_clocks>
 8016d2a:	2100      	movs	r1, #0
 8016d2c:	4630      	mov	r0, r6
 8016d2e:	f7fd ff93 	bl	8014c58 <ull_enable_rf_tx>
 8016d32:	4630      	mov	r0, r6
 8016d34:	f7fd ffc4 	bl	8014cc0 <ull_enable_rftx_blocks>
 8016d38:	f005 033f 	and.w	r3, r5, #63	; 0x3f
 8016d3c:	2200      	movs	r2, #0
 8016d3e:	49a8      	ldr	r1, [pc, #672]	; (8016fe0 <dwt_ioctl+0x160c>)
 8016d40:	4630      	mov	r0, r6
 8016d42:	f7fd fa62 	bl	801420a <dwt_write8bitoffsetreg>
 8016d46:	2301      	movs	r3, #1
 8016d48:	9300      	str	r3, [sp, #0]
 8016d4a:	23ff      	movs	r3, #255	; 0xff
 8016d4c:	2200      	movs	r2, #0
 8016d4e:	49a5      	ldr	r1, [pc, #660]	; (8016fe4 <dwt_ioctl+0x1610>)
 8016d50:	4630      	mov	r0, r6
 8016d52:	f7fe f929 	bl	8014fa8 <dwt_modify8bitoffsetreg>
 8016d56:	4fa3      	ldr	r7, [pc, #652]	; (8016fe4 <dwt_ioctl+0x1610>)
 8016d58:	2500      	movs	r5, #0
 8016d5a:	462a      	mov	r2, r5
 8016d5c:	4639      	mov	r1, r7
 8016d5e:	4630      	mov	r0, r6
 8016d60:	f7fc fe8c 	bl	8013a7c <dwt_read8bitoffsetreg>
 8016d64:	f010 0f01 	tst.w	r0, #1
 8016d68:	d1f7      	bne.n	8016d5a <dwt_ioctl+0x1386>
 8016d6a:	2200      	movs	r2, #0
 8016d6c:	499e      	ldr	r1, [pc, #632]	; (8016fe8 <dwt_ioctl+0x1614>)
 8016d6e:	4630      	mov	r0, r6
 8016d70:	f7fc fe72 	bl	8013a58 <dwt_read16bitoffsetreg>
 8016d74:	4605      	mov	r5, r0
 8016d76:	4630      	mov	r0, r6
 8016d78:	f7fd fe38 	bl	80149ec <ull_disable_rftx_blocks>
 8016d7c:	2100      	movs	r1, #0
 8016d7e:	4630      	mov	r0, r6
 8016d80:	f7fd fe3e 	bl	8014a00 <ull_disable_rf_tx>
 8016d84:	2105      	movs	r1, #5
 8016d86:	4630      	mov	r0, r6
 8016d88:	f7fd fac2 	bl	8014310 <ull_force_clocks>
 8016d8c:	f3c5 050b 	ubfx	r5, r5, #0, #12
 8016d90:	8025      	strh	r5, [r4, #0]
 8016d92:	2500      	movs	r5, #0
 8016d94:	f7fe bec8 	b.w	8015b28 <dwt_ioctl+0x154>
 8016d98:	2102      	movs	r1, #2
 8016d9a:	f7fe f9c3 	bl	8015124 <ull_setdwstate>
 8016d9e:	2101      	movs	r1, #1
 8016da0:	4630      	mov	r0, r6
 8016da2:	f7fe f9bf 	bl	8015124 <ull_setdwstate>
 8016da6:	2432      	movs	r4, #50	; 0x32
 8016da8:	f04f 0814 	mov.w	r8, #20
 8016dac:	2700      	movs	r7, #0
 8016dae:	2544      	movs	r5, #68	; 0x44
 8016db0:	4640      	mov	r0, r8
 8016db2:	f7e9 feea 	bl	8000b8a <deca_usleep>
 8016db6:	463a      	mov	r2, r7
 8016db8:	4629      	mov	r1, r5
 8016dba:	4630      	mov	r0, r6
 8016dbc:	f7fc fe5e 	bl	8013a7c <dwt_read8bitoffsetreg>
 8016dc0:	f010 0f02 	tst.w	r0, #2
 8016dc4:	d105      	bne.n	8016dd2 <dwt_ioctl+0x13fe>
 8016dc6:	1e63      	subs	r3, r4, #1
 8016dc8:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8016dcc:	d1f0      	bne.n	8016db0 <dwt_ioctl+0x13dc>
 8016dce:	2501      	movs	r5, #1
 8016dd0:	e000      	b.n	8016dd4 <dwt_ioctl+0x1400>
 8016dd2:	2500      	movs	r5, #0
 8016dd4:	426d      	negs	r5, r5
 8016dd6:	f7fe bea7 	b.w	8015b28 <dwt_ioctl+0x154>
 8016dda:	2c00      	cmp	r4, #0
 8016ddc:	f000 84c6 	beq.w	801776c <dwt_ioctl+0x1d98>
 8016de0:	7823      	ldrb	r3, [r4, #0]
 8016de2:	031b      	lsls	r3, r3, #12
 8016de4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8016de8:	7862      	ldrb	r2, [r4, #1]
 8016dea:	2a01      	cmp	r2, #1
 8016dec:	bf08      	it	eq
 8016dee:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
 8016df2:	9300      	str	r3, [sp, #0]
 8016df4:	f46f 43e2 	mvn.w	r3, #28928	; 0x7100
 8016df8:	2200      	movs	r2, #0
 8016dfa:	497c      	ldr	r1, [pc, #496]	; (8016fec <dwt_ioctl+0x1618>)
 8016dfc:	f7fd feea 	bl	8014bd4 <dwt_modify32bitoffsetreg>
 8016e00:	2500      	movs	r5, #0
 8016e02:	f7fe be91 	b.w	8015b28 <dwt_ioctl+0x154>
 8016e06:	2c00      	cmp	r4, #0
 8016e08:	f000 84b3 	beq.w	8017772 <dwt_ioctl+0x1d9e>
 8016e0c:	6862      	ldr	r2, [r4, #4]
 8016e0e:	6821      	ldr	r1, [r4, #0]
 8016e10:	f7fe f820 	bl	8014e54 <ull_setgpiomode>
 8016e14:	2500      	movs	r5, #0
 8016e16:	f7fe be87 	b.w	8015b28 <dwt_ioctl+0x154>
 8016e1a:	2c00      	cmp	r4, #0
 8016e1c:	f000 84ac 	beq.w	8017778 <dwt_ioctl+0x1da4>
 8016e20:	8823      	ldrh	r3, [r4, #0]
 8016e22:	2200      	movs	r2, #0
 8016e24:	4972      	ldr	r1, [pc, #456]	; (8016ff0 <dwt_ioctl+0x161c>)
 8016e26:	f7fd fa42 	bl	80142ae <dwt_write16bitoffsetreg>
 8016e2a:	2500      	movs	r5, #0
 8016e2c:	f7fe be7c 	b.w	8015b28 <dwt_ioctl+0x154>
 8016e30:	2c00      	cmp	r4, #0
 8016e32:	f000 84a4 	beq.w	801777e <dwt_ioctl+0x1daa>
 8016e36:	6862      	ldr	r2, [r4, #4]
 8016e38:	8821      	ldrh	r1, [r4, #0]
 8016e3a:	f7fe fb1b 	bl	8015474 <ull_setgpiovalue>
 8016e3e:	2500      	movs	r5, #0
 8016e40:	f7fe be72 	b.w	8015b28 <dwt_ioctl+0x154>
 8016e44:	2c00      	cmp	r4, #0
 8016e46:	f000 849d 	beq.w	8017784 <dwt_ioctl+0x1db0>
 8016e4a:	7865      	ldrb	r5, [r4, #1]
 8016e4c:	7823      	ldrb	r3, [r4, #0]
 8016e4e:	b18b      	cbz	r3, 8016e74 <dwt_ioctl+0x14a0>
 8016e50:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8016e52:	2200      	movs	r2, #0
 8016e54:	73da      	strb	r2, [r3, #15]
 8016e56:	f04f 33ff 	mov.w	r3, #4294967295
 8016e5a:	2208      	movs	r2, #8
 8016e5c:	b1e5      	cbz	r5, 8016e98 <dwt_ioctl+0x14c4>
 8016e5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8016e62:	9200      	str	r2, [sp, #0]
 8016e64:	2200      	movs	r2, #0
 8016e66:	2110      	movs	r1, #16
 8016e68:	4630      	mov	r0, r6
 8016e6a:	f7fd feb3 	bl	8014bd4 <dwt_modify32bitoffsetreg>
 8016e6e:	2500      	movs	r5, #0
 8016e70:	f7fe be5a 	b.w	8015b28 <dwt_ioctl+0x154>
 8016e74:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8016e76:	2201      	movs	r2, #1
 8016e78:	73da      	strb	r2, [r3, #15]
 8016e7a:	2318      	movs	r3, #24
 8016e7c:	2200      	movs	r2, #0
 8016e7e:	495d      	ldr	r1, [pc, #372]	; (8016ff4 <dwt_ioctl+0x1620>)
 8016e80:	f7fd fb16 	bl	80144b0 <dwt_write32bitoffsetreg>
 8016e84:	23e8      	movs	r3, #232	; 0xe8
 8016e86:	2200      	movs	r2, #0
 8016e88:	495b      	ldr	r1, [pc, #364]	; (8016ff8 <dwt_ioctl+0x1624>)
 8016e8a:	4630      	mov	r0, r6
 8016e8c:	f7fd fb10 	bl	80144b0 <dwt_write32bitoffsetreg>
 8016e90:	f06f 0308 	mvn.w	r3, #8
 8016e94:	2200      	movs	r2, #0
 8016e96:	e7e1      	b.n	8016e5c <dwt_ioctl+0x1488>
 8016e98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8016e9c:	e7e1      	b.n	8016e62 <dwt_ioctl+0x148e>
 8016e9e:	2c00      	cmp	r4, #0
 8016ea0:	f000 8473 	beq.w	801778a <dwt_ioctl+0x1db6>
 8016ea4:	6823      	ldr	r3, [r4, #0]
 8016ea6:	2200      	movs	r2, #0
 8016ea8:	2130      	movs	r1, #48	; 0x30
 8016eaa:	f7fd fb01 	bl	80144b0 <dwt_write32bitoffsetreg>
 8016eae:	2500      	movs	r5, #0
 8016eb0:	f7fe be3a 	b.w	8015b28 <dwt_ioctl+0x154>
 8016eb4:	2c00      	cmp	r4, #0
 8016eb6:	f000 846b 	beq.w	8017790 <dwt_ioctl+0x1dbc>
 8016eba:	2200      	movs	r2, #0
 8016ebc:	4629      	mov	r1, r5
 8016ebe:	f7fc fdb5 	bl	8013a2c <dwt_read32bitoffsetreg>
 8016ec2:	6020      	str	r0, [r4, #0]
 8016ec4:	2500      	movs	r5, #0
 8016ec6:	f7fe be2f 	b.w	8015b28 <dwt_ioctl+0x154>
 8016eca:	4623      	mov	r3, r4
 8016ecc:	2200      	movs	r2, #0
 8016ece:	4629      	mov	r1, r5
 8016ed0:	f7fd faee 	bl	80144b0 <dwt_write32bitoffsetreg>
 8016ed4:	2500      	movs	r5, #0
 8016ed6:	f7fe be27 	b.w	8015b28 <dwt_ioctl+0x154>
 8016eda:	2c00      	cmp	r4, #0
 8016edc:	f000 845b 	beq.w	8017796 <dwt_ioctl+0x1dc2>
 8016ee0:	2203      	movs	r2, #3
 8016ee2:	4946      	ldr	r1, [pc, #280]	; (8016ffc <dwt_ioctl+0x1628>)
 8016ee4:	f7fc fdca 	bl	8013a7c <dwt_read8bitoffsetreg>
 8016ee8:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8016eec:	7020      	strb	r0, [r4, #0]
 8016eee:	2500      	movs	r5, #0
 8016ef0:	f7fe be1a 	b.w	8015b28 <dwt_ioctl+0x154>
 8016ef4:	2c00      	cmp	r4, #0
 8016ef6:	f000 8451 	beq.w	801779c <dwt_ioctl+0x1dc8>
 8016efa:	6823      	ldr	r3, [r4, #0]
 8016efc:	2200      	movs	r2, #0
 8016efe:	2144      	movs	r1, #68	; 0x44
 8016f00:	f7fd fad6 	bl	80144b0 <dwt_write32bitoffsetreg>
 8016f04:	2500      	movs	r5, #0
 8016f06:	f7fe be0f 	b.w	8015b28 <dwt_ioctl+0x154>
 8016f0a:	2c00      	cmp	r4, #0
 8016f0c:	f000 8449 	beq.w	80177a2 <dwt_ioctl+0x1dce>
 8016f10:	8823      	ldrh	r3, [r4, #0]
 8016f12:	2200      	movs	r2, #0
 8016f14:	2148      	movs	r1, #72	; 0x48
 8016f16:	f7fd f9ca 	bl	80142ae <dwt_write16bitoffsetreg>
 8016f1a:	2500      	movs	r5, #0
 8016f1c:	f7fe be04 	b.w	8015b28 <dwt_ioctl+0x154>
 8016f20:	2c00      	cmp	r4, #0
 8016f22:	f000 8441 	beq.w	80177a8 <dwt_ioctl+0x1dd4>
 8016f26:	2200      	movs	r2, #0
 8016f28:	2144      	movs	r1, #68	; 0x44
 8016f2a:	f7fc fd7f 	bl	8013a2c <dwt_read32bitoffsetreg>
 8016f2e:	6020      	str	r0, [r4, #0]
 8016f30:	2500      	movs	r5, #0
 8016f32:	f7fe bdf9 	b.w	8015b28 <dwt_ioctl+0x154>
 8016f36:	2c00      	cmp	r4, #0
 8016f38:	f000 8439 	beq.w	80177ae <dwt_ioctl+0x1dda>
 8016f3c:	2200      	movs	r2, #0
 8016f3e:	2148      	movs	r1, #72	; 0x48
 8016f40:	f7fc fd8a 	bl	8013a58 <dwt_read16bitoffsetreg>
 8016f44:	6020      	str	r0, [r4, #0]
 8016f46:	2500      	movs	r5, #0
 8016f48:	f7fe bdee 	b.w	8015b28 <dwt_ioctl+0x154>
 8016f4c:	2c00      	cmp	r4, #0
 8016f4e:	f000 8431 	beq.w	80177b4 <dwt_ioctl+0x1de0>
 8016f52:	7823      	ldrb	r3, [r4, #0]
 8016f54:	2200      	movs	r2, #0
 8016f56:	492a      	ldr	r1, [pc, #168]	; (8017000 <dwt_ioctl+0x162c>)
 8016f58:	f7fd f957 	bl	801420a <dwt_write8bitoffsetreg>
 8016f5c:	2500      	movs	r5, #0
 8016f5e:	f7fe bde3 	b.w	8015b28 <dwt_ioctl+0x154>
 8016f62:	2c00      	cmp	r4, #0
 8016f64:	f000 8429 	beq.w	80177ba <dwt_ioctl+0x1de6>
 8016f68:	2200      	movs	r2, #0
 8016f6a:	2144      	movs	r1, #68	; 0x44
 8016f6c:	f7fc fd86 	bl	8013a7c <dwt_read8bitoffsetreg>
 8016f70:	7020      	strb	r0, [r4, #0]
 8016f72:	2500      	movs	r5, #0
 8016f74:	f7fe bdd8 	b.w	8015b28 <dwt_ioctl+0x154>
 8016f78:	2c00      	cmp	r4, #0
 8016f7a:	f000 8421 	beq.w	80177c0 <dwt_ioctl+0x1dec>
 8016f7e:	f7fd f951 	bl	8014224 <ull_getframelength>
 8016f82:	6020      	str	r0, [r4, #0]
 8016f84:	2500      	movs	r5, #0
 8016f86:	f7fe bdcf 	b.w	8015b28 <dwt_ioctl+0x154>
 8016f8a:	2c00      	cmp	r4, #0
 8016f8c:	f000 841b 	beq.w	80177c6 <dwt_ioctl+0x1df2>
 8016f90:	2200      	movs	r2, #0
 8016f92:	491c      	ldr	r1, [pc, #112]	; (8017004 <dwt_ioctl+0x1630>)
 8016f94:	f7fc fd60 	bl	8013a58 <dwt_read16bitoffsetreg>
 8016f98:	8020      	strh	r0, [r4, #0]
 8016f9a:	2500      	movs	r5, #0
 8016f9c:	f7fe bdc4 	b.w	8015b28 <dwt_ioctl+0x154>
 8016fa0:	2c00      	cmp	r4, #0
 8016fa2:	f000 8413 	beq.w	80177cc <dwt_ioctl+0x1df8>
 8016fa6:	2200      	movs	r2, #0
 8016fa8:	4917      	ldr	r1, [pc, #92]	; (8017008 <dwt_ioctl+0x1634>)
 8016faa:	f7fc fd3f 	bl	8013a2c <dwt_read32bitoffsetreg>
 8016fae:	6020      	str	r0, [r4, #0]
 8016fb0:	2500      	movs	r5, #0
 8016fb2:	f7fe bdb9 	b.w	8015b28 <dwt_ioctl+0x154>
 8016fb6:	2c00      	cmp	r4, #0
 8016fb8:	f000 840b 	beq.w	80177d2 <dwt_ioctl+0x1dfe>
 8016fbc:	8823      	ldrh	r3, [r4, #0]
 8016fbe:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8016fc2:	9300      	str	r3, [sp, #0]
 8016fc4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8016fc8:	2200      	movs	r2, #0
 8016fca:	490f      	ldr	r1, [pc, #60]	; (8017008 <dwt_ioctl+0x1634>)
 8016fcc:	f7fe f99e 	bl	801530c <dwt_modify16bitoffsetreg>
 8016fd0:	2500      	movs	r5, #0
 8016fd2:	f7fe bda9 	b.w	8015b28 <dwt_ioctl+0x154>
 8016fd6:	bf00      	nop
 8016fd8:	00180028 	.word	0x00180028
 8016fdc:	000c0008 	.word	0x000c0008
 8016fe0:	0007001c 	.word	0x0007001c
 8016fe4:	00080010 	.word	0x00080010
 8016fe8:	00080014 	.word	0x00080014
 8016fec:	00070014 	.word	0x00070014
 8016ff0:	00050008 	.word	0x00050008
 8016ff4:	001f000c 	.word	0x001f000c
 8016ff8:	001f0010 	.word	0x001f0010
 8016ffc:	00030060 	.word	0x00030060
 8017000:	00010024 	.word	0x00010024
 8017004:	0005002c 	.word	0x0005002c
 8017008:	000e001a 	.word	0x000e001a
 801700c:	2c00      	cmp	r4, #0
 801700e:	f000 83e3 	beq.w	80177d8 <dwt_ioctl+0x1e04>
 8017012:	88a7      	ldrh	r7, [r4, #4]
 8017014:	68a3      	ldr	r3, [r4, #8]
 8017016:	9309      	str	r3, [sp, #36]	; 0x24
 8017018:	7b21      	ldrb	r1, [r4, #12]
 801701a:	9106      	str	r1, [sp, #24]
 801701c:	6922      	ldr	r2, [r4, #16]
 801701e:	9204      	str	r2, [sp, #16]
 8017020:	6962      	ldr	r2, [r4, #20]
 8017022:	9205      	str	r2, [sp, #20]
 8017024:	f003 0203 	and.w	r2, r3, #3
 8017028:	f3c3 0085 	ubfx	r0, r3, #2, #6
 801702c:	2905      	cmp	r1, #5
 801702e:	d142      	bne.n	80170b6 <dwt_ioctl+0x16e2>
 8017030:	f5b7 7fb1 	cmp.w	r7, #354	; 0x162
 8017034:	bf28      	it	cs
 8017036:	f44f 77b1 	movcs.w	r7, #354	; 0x162
 801703a:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 801731c <dwt_ioctl+0x1948>
 801703e:	2f04      	cmp	r7, #4
 8017040:	d805      	bhi.n	801704e <dwt_ioctl+0x167a>
 8017042:	eb09 0300 	add.w	r3, r9, r0
 8017046:	785b      	ldrb	r3, [r3, #1]
 8017048:	3b05      	subs	r3, #5
 801704a:	429f      	cmp	r7, r3
 801704c:	db3b      	blt.n	80170c6 <dwt_ioctl+0x16f2>
 801704e:	2a01      	cmp	r2, #1
 8017050:	d877      	bhi.n	8017142 <dwt_ioctl+0x176e>
 8017052:	4bae      	ldr	r3, [pc, #696]	; (801730c <dwt_ioctl+0x1938>)
 8017054:	5c99      	ldrb	r1, [r3, r2]
 8017056:	463e      	mov	r6, r7
 8017058:	42b9      	cmp	r1, r7
 801705a:	da74      	bge.n	8017146 <dwt_ioctl+0x1772>
 801705c:	1c55      	adds	r5, r2, #1
 801705e:	fa53 f585 	uxtab	r5, r3, r5
 8017062:	2300      	movs	r3, #0
 8017064:	440b      	add	r3, r1
 8017066:	b29b      	uxth	r3, r3
 8017068:	3201      	adds	r2, #1
 801706a:	b2d2      	uxtb	r2, r2
 801706c:	2a02      	cmp	r2, #2
 801706e:	d005      	beq.n	801707c <dwt_ioctl+0x16a8>
 8017070:	f815 1b01 	ldrb.w	r1, [r5], #1
 8017074:	eba6 0c03 	sub.w	ip, r6, r3
 8017078:	4561      	cmp	r1, ip
 801707a:	dbf3      	blt.n	8017064 <dwt_ioctl+0x1690>
 801707c:	429f      	cmp	r7, r3
 801707e:	bf08      	it	eq
 8017080:	9003      	streq	r0, [sp, #12]
 8017082:	d064      	beq.n	801714e <dwt_ioctl+0x177a>
 8017084:	f107 0805 	add.w	r8, r7, #5
 8017088:	fa1f f888 	uxth.w	r8, r8
 801708c:	2580      	movs	r5, #128	; 0x80
 801708e:	2100      	movs	r1, #0
 8017090:	9107      	str	r1, [sp, #28]
 8017092:	9103      	str	r1, [sp, #12]
 8017094:	9108      	str	r1, [sp, #32]
 8017096:	460e      	mov	r6, r1
 8017098:	f04f 0b05 	mov.w	fp, #5
 801709c:	46be      	mov	lr, r7
 801709e:	455f      	cmp	r7, fp
 80170a0:	bf38      	it	cc
 80170a2:	46de      	movcc	lr, fp
 80170a4:	f1ae 0e05 	sub.w	lr, lr, #5
 80170a8:	fa1f fe8e 	uxth.w	lr, lr
 80170ac:	f8df a25c 	ldr.w	sl, [pc, #604]	; 801730c <dwt_ioctl+0x1938>
 80170b0:	46bc      	mov	ip, r7
 80170b2:	460f      	mov	r7, r1
 80170b4:	e3dd      	b.n	8017872 <dwt_ioctl+0x1e9e>
 80170b6:	f240 1331 	movw	r3, #305	; 0x131
 80170ba:	429f      	cmp	r7, r3
 80170bc:	bf28      	it	cs
 80170be:	461f      	movcs	r7, r3
 80170c0:	f8df 925c 	ldr.w	r9, [pc, #604]	; 8017320 <dwt_ioctl+0x194c>
 80170c4:	e7bb      	b.n	801703e <dwt_ioctl+0x166a>
 80170c6:	2300      	movs	r3, #0
 80170c8:	9a05      	ldr	r2, [sp, #20]
 80170ca:	8013      	strh	r3, [r2, #0]
 80170cc:	9a04      	ldr	r2, [sp, #16]
 80170ce:	4611      	mov	r1, r2
 80170d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80170d2:	600a      	str	r2, [r1, #0]
 80170d4:	e04a      	b.n	801716c <dwt_ioctl+0x1798>
 80170d6:	2300      	movs	r3, #0
 80170d8:	9a05      	ldr	r2, [sp, #20]
 80170da:	8013      	strh	r3, [r2, #0]
 80170dc:	9b04      	ldr	r3, [sp, #16]
 80170de:	461a      	mov	r2, r3
 80170e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80170e2:	6013      	str	r3, [r2, #0]
 80170e4:	f04f 33ff 	mov.w	r3, #4294967295
 80170e8:	e040      	b.n	801716c <dwt_ioctl+0x1798>
 80170ea:	fa1f fb81 	uxth.w	fp, r1
 80170ee:	9207      	str	r2, [sp, #28]
 80170f0:	9003      	str	r0, [sp, #12]
 80170f2:	9308      	str	r3, [sp, #32]
 80170f4:	2701      	movs	r7, #1
 80170f6:	e3cd      	b.n	8017894 <dwt_ioctl+0x1ec0>
 80170f8:	2f00      	cmp	r7, #0
 80170fa:	f040 83a1 	bne.w	8017840 <dwt_ioctl+0x1e6c>
 80170fe:	4598      	cmp	r8, r3
 8017100:	f200 83a3 	bhi.w	801784a <dwt_ioctl+0x1e76>
 8017104:	2e00      	cmp	r6, #0
 8017106:	d038      	beq.n	801717a <dwt_ioctl+0x17a6>
 8017108:	283f      	cmp	r0, #63	; 0x3f
 801710a:	f000 83c8 	beq.w	801789e <dwt_ioctl+0x1eca>
 801710e:	2700      	movs	r7, #0
 8017110:	f819 1000 	ldrb.w	r1, [r9, r0]
 8017114:	1a5b      	subs	r3, r3, r1
 8017116:	b29b      	uxth	r3, r3
 8017118:	1e46      	subs	r6, r0, #1
 801711a:	f006 003f 	and.w	r0, r6, #63	; 0x3f
 801711e:	f016 063f 	ands.w	r6, r6, #63	; 0x3f
 8017122:	bf18      	it	ne
 8017124:	2601      	movne	r6, #1
 8017126:	e39c      	b.n	8017862 <dwt_ioctl+0x1e8e>
 8017128:	9906      	ldr	r1, [sp, #24]
 801712a:	2909      	cmp	r1, #9
 801712c:	f040 83bd 	bne.w	80178aa <dwt_ioctl+0x1ed6>
 8017130:	213f      	movs	r1, #63	; 0x3f
 8017132:	9103      	str	r1, [sp, #12]
 8017134:	e00b      	b.n	801714e <dwt_ioctl+0x177a>
 8017136:	b2b3      	uxth	r3, r6
 8017138:	3201      	adds	r2, #1
 801713a:	b2d2      	uxtb	r2, r2
 801713c:	213f      	movs	r1, #63	; 0x3f
 801713e:	9103      	str	r1, [sp, #12]
 8017140:	e005      	b.n	801714e <dwt_ioctl+0x177a>
 8017142:	2300      	movs	r3, #0
 8017144:	e79a      	b.n	801707c <dwt_ioctl+0x16a8>
 8017146:	2300      	movs	r3, #0
 8017148:	e798      	b.n	801707c <dwt_ioctl+0x16a8>
 801714a:	9003      	str	r0, [sp, #12]
 801714c:	4663      	mov	r3, ip
 801714e:	9905      	ldr	r1, [sp, #20]
 8017150:	800b      	strh	r3, [r1, #0]
 8017152:	9b03      	ldr	r3, [sp, #12]
 8017154:	ea42 0283 	orr.w	r2, r2, r3, lsl #2
 8017158:	b2d2      	uxtb	r2, r2
 801715a:	0413      	lsls	r3, r2, #16
 801715c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8017160:	4313      	orrs	r3, r2
 8017162:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8017166:	9a04      	ldr	r2, [sp, #16]
 8017168:	6013      	str	r3, [r2, #0]
 801716a:	2300      	movs	r3, #0
 801716c:	6023      	str	r3, [r4, #0]
 801716e:	2500      	movs	r5, #0
 8017170:	f7fe bcda 	b.w	8015b28 <dwt_ioctl+0x154>
 8017174:	9a07      	ldr	r2, [sp, #28]
 8017176:	9b08      	ldr	r3, [sp, #32]
 8017178:	e7e9      	b.n	801714e <dwt_ioctl+0x177a>
 801717a:	9003      	str	r0, [sp, #12]
 801717c:	e7e7      	b.n	801714e <dwt_ioctl+0x177a>
 801717e:	9a07      	ldr	r2, [sp, #28]
 8017180:	9b08      	ldr	r3, [sp, #32]
 8017182:	e7e4      	b.n	801714e <dwt_ioctl+0x177a>
 8017184:	213f      	movs	r1, #63	; 0x3f
 8017186:	9103      	str	r1, [sp, #12]
 8017188:	e7e1      	b.n	801714e <dwt_ioctl+0x177a>
 801718a:	2c00      	cmp	r4, #0
 801718c:	f000 8327 	beq.w	80177de <dwt_ioctl+0x1e0a>
 8017190:	7825      	ldrb	r5, [r4, #0]
 8017192:	6862      	ldr	r2, [r4, #4]
 8017194:	2a01      	cmp	r2, #1
 8017196:	bf15      	itete	ne
 8017198:	f46f 3360 	mvnne.w	r3, #229376	; 0x38000
 801719c:	f46f 43e0 	mvneq.w	r3, #28672	; 0x7000
 80171a0:	27df      	movne	r7, #223	; 0xdf
 80171a2:	27ef      	moveq	r7, #239	; 0xef
 80171a4:	bf14      	ite	ne
 80171a6:	f04f 0820 	movne.w	r8, #32
 80171aa:	f04f 0810 	moveq.w	r8, #16
 80171ae:	2400      	movs	r4, #0
 80171b0:	9400      	str	r4, [sp, #0]
 80171b2:	4622      	mov	r2, r4
 80171b4:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80171b8:	f7fd fd0c 	bl	8014bd4 <dwt_modify32bitoffsetreg>
 80171bc:	9400      	str	r4, [sp, #0]
 80171be:	463b      	mov	r3, r7
 80171c0:	4622      	mov	r2, r4
 80171c2:	4953      	ldr	r1, [pc, #332]	; (8017310 <dwt_ioctl+0x193c>)
 80171c4:	4630      	mov	r0, r6
 80171c6:	f7fd feef 	bl	8014fa8 <dwt_modify8bitoffsetreg>
 80171ca:	2d01      	cmp	r5, #1
 80171cc:	d003      	beq.n	80171d6 <dwt_ioctl+0x1802>
 80171ce:	b165      	cbz	r5, 80171ea <dwt_ioctl+0x1816>
 80171d0:	2500      	movs	r5, #0
 80171d2:	f7fe bca9 	b.w	8015b28 <dwt_ioctl+0x154>
 80171d6:	4625      	mov	r5, r4
 80171d8:	9400      	str	r4, [sp, #0]
 80171da:	463b      	mov	r3, r7
 80171dc:	4622      	mov	r2, r4
 80171de:	494d      	ldr	r1, [pc, #308]	; (8017314 <dwt_ioctl+0x1940>)
 80171e0:	4630      	mov	r0, r6
 80171e2:	f7fd fee1 	bl	8014fa8 <dwt_modify8bitoffsetreg>
 80171e6:	f7fe bc9f 	b.w	8015b28 <dwt_ioctl+0x154>
 80171ea:	f8cd 8000 	str.w	r8, [sp]
 80171ee:	23ff      	movs	r3, #255	; 0xff
 80171f0:	2200      	movs	r2, #0
 80171f2:	4948      	ldr	r1, [pc, #288]	; (8017314 <dwt_ioctl+0x1940>)
 80171f4:	4630      	mov	r0, r6
 80171f6:	f7fd fed7 	bl	8014fa8 <dwt_modify8bitoffsetreg>
 80171fa:	f7fe bc95 	b.w	8015b28 <dwt_ioctl+0x154>
 80171fe:	2c00      	cmp	r4, #0
 8017200:	f000 82f0 	beq.w	80177e4 <dwt_ioctl+0x1e10>
 8017204:	7822      	ldrb	r2, [r4, #0]
 8017206:	f012 0f01 	tst.w	r2, #1
 801720a:	d02d      	beq.n	8017268 <dwt_ioctl+0x1894>
 801720c:	0157      	lsls	r7, r2, #5
 801720e:	f007 0740 	and.w	r7, r7, #64	; 0x40
 8017212:	2440      	movs	r4, #64	; 0x40
 8017214:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8017218:	f012 0f04 	tst.w	r2, #4
 801721c:	d028      	beq.n	8017270 <dwt_ioctl+0x189c>
 801721e:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
 8017222:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8017226:	0112      	lsls	r2, r2, #4
 8017228:	f002 0280 	and.w	r2, r2, #128	; 0x80
 801722c:	4317      	orrs	r7, r2
 801722e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8017232:	9200      	str	r2, [sp, #0]
 8017234:	43db      	mvns	r3, r3
 8017236:	2200      	movs	r2, #0
 8017238:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801723c:	4630      	mov	r0, r6
 801723e:	f7fd fcc9 	bl	8014bd4 <dwt_modify32bitoffsetreg>
 8017242:	43e4      	mvns	r4, r4
 8017244:	b2a4      	uxth	r4, r4
 8017246:	2500      	movs	r5, #0
 8017248:	9500      	str	r5, [sp, #0]
 801724a:	4623      	mov	r3, r4
 801724c:	462a      	mov	r2, r5
 801724e:	4930      	ldr	r1, [pc, #192]	; (8017310 <dwt_ioctl+0x193c>)
 8017250:	4630      	mov	r0, r6
 8017252:	f7fe f85b 	bl	801530c <dwt_modify16bitoffsetreg>
 8017256:	9700      	str	r7, [sp, #0]
 8017258:	4623      	mov	r3, r4
 801725a:	462a      	mov	r2, r5
 801725c:	492d      	ldr	r1, [pc, #180]	; (8017314 <dwt_ioctl+0x1940>)
 801725e:	4630      	mov	r0, r6
 8017260:	f7fe f854 	bl	801530c <dwt_modify16bitoffsetreg>
 8017264:	f7fe bc60 	b.w	8015b28 <dwt_ioctl+0x154>
 8017268:	2700      	movs	r7, #0
 801726a:	463c      	mov	r4, r7
 801726c:	463b      	mov	r3, r7
 801726e:	e7d3      	b.n	8017218 <dwt_ioctl+0x1844>
 8017270:	2200      	movs	r2, #0
 8017272:	e7de      	b.n	8017232 <dwt_ioctl+0x185e>
 8017274:	2308      	movs	r3, #8
 8017276:	9300      	str	r3, [sp, #0]
 8017278:	23ff      	movs	r3, #255	; 0xff
 801727a:	2201      	movs	r2, #1
 801727c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8017280:	f7fd fe92 	bl	8014fa8 <dwt_modify8bitoffsetreg>
 8017284:	4c24      	ldr	r4, [pc, #144]	; (8017318 <dwt_ioctl+0x1944>)
 8017286:	2302      	movs	r3, #2
 8017288:	9300      	str	r3, [sp, #0]
 801728a:	23ff      	movs	r3, #255	; 0xff
 801728c:	2203      	movs	r2, #3
 801728e:	4621      	mov	r1, r4
 8017290:	4630      	mov	r0, r6
 8017292:	f7fd fe89 	bl	8014fa8 <dwt_modify8bitoffsetreg>
 8017296:	2500      	movs	r5, #0
 8017298:	9500      	str	r5, [sp, #0]
 801729a:	23f7      	movs	r3, #247	; 0xf7
 801729c:	2201      	movs	r2, #1
 801729e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80172a2:	4630      	mov	r0, r6
 80172a4:	f7fd fe80 	bl	8014fa8 <dwt_modify8bitoffsetreg>
 80172a8:	9500      	str	r5, [sp, #0]
 80172aa:	23fd      	movs	r3, #253	; 0xfd
 80172ac:	2203      	movs	r2, #3
 80172ae:	4621      	mov	r1, r4
 80172b0:	4630      	mov	r0, r6
 80172b2:	f7fd fe79 	bl	8014fa8 <dwt_modify8bitoffsetreg>
 80172b6:	f7fe bc37 	b.w	8015b28 <dwt_ioctl+0x154>
 80172ba:	2c00      	cmp	r4, #0
 80172bc:	f000 8295 	beq.w	80177ea <dwt_ioctl+0x1e16>
 80172c0:	8863      	ldrh	r3, [r4, #2]
 80172c2:	00db      	lsls	r3, r3, #3
 80172c4:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 80172c8:	7822      	ldrb	r2, [r4, #0]
 80172ca:	b10a      	cbz	r2, 80172d0 <dwt_ioctl+0x18fc>
 80172cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80172d0:	9300      	str	r3, [sp, #0]
 80172d2:	f24f 0307 	movw	r3, #61447	; 0xf007
 80172d6:	2200      	movs	r2, #0
 80172d8:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80172dc:	4630      	mov	r0, r6
 80172de:	f7fe f815 	bl	801530c <dwt_modify16bitoffsetreg>
 80172e2:	2500      	movs	r5, #0
 80172e4:	f7fe bc20 	b.w	8015b28 <dwt_ioctl+0x154>
 80172e8:	2c00      	cmp	r4, #0
 80172ea:	f000 8281 	beq.w	80177f0 <dwt_ioctl+0x1e1c>
 80172ee:	b2e3      	uxtb	r3, r4
 80172f0:	1c9a      	adds	r2, r3, #2
 80172f2:	2301      	movs	r3, #1
 80172f4:	4093      	lsls	r3, r2
 80172f6:	3b01      	subs	r3, #1
 80172f8:	b2db      	uxtb	r3, r3
 80172fa:	2200      	movs	r2, #0
 80172fc:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8017300:	f7fc ff83 	bl	801420a <dwt_write8bitoffsetreg>
 8017304:	2500      	movs	r5, #0
 8017306:	f7fe bc0f 	b.w	8015b28 <dwt_ioctl+0x154>
 801730a:	bf00      	nop
 801730c:	08021210 	.word	0x08021210
 8017310:	00050008 	.word	0x00050008
 8017314:	0005000c 	.word	0x0005000c
 8017318:	00110008 	.word	0x00110008
 801731c:	08021190 	.word	0x08021190
 8017320:	080211d0 	.word	0x080211d0
 8017324:	2c00      	cmp	r4, #0
 8017326:	f000 8266 	beq.w	80177f6 <dwt_ioctl+0x1e22>
 801732a:	7ae3      	ldrb	r3, [r4, #11]
 801732c:	2b00      	cmp	r3, #0
 801732e:	f000 8265 	beq.w	80177fc <dwt_ioctl+0x1e28>
 8017332:	7b63      	ldrb	r3, [r4, #13]
 8017334:	2b01      	cmp	r3, #1
 8017336:	d921      	bls.n	801737c <dwt_ioctl+0x19a8>
 8017338:	7b22      	ldrb	r2, [r4, #12]
 801733a:	4bd7      	ldr	r3, [pc, #860]	; (8017698 <dwt_ioctl+0x1cc4>)
 801733c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8017340:	0112      	lsls	r2, r2, #4
 8017342:	0ad3      	lsrs	r3, r2, #11
 8017344:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8017348:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801734c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8017350:	bf28      	it	cs
 8017352:	3301      	addcs	r3, #1
 8017354:	b29b      	uxth	r3, r3
 8017356:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801735a:	9300      	str	r3, [sp, #0]
 801735c:	f64f 7380 	movw	r3, #65408	; 0xff80
 8017360:	2202      	movs	r2, #2
 8017362:	49ce      	ldr	r1, [pc, #824]	; (801769c <dwt_ioctl+0x1cc8>)
 8017364:	4630      	mov	r0, r6
 8017366:	f7fd ffd1 	bl	801530c <dwt_modify16bitoffsetreg>
 801736a:	2394      	movs	r3, #148	; 0x94
 801736c:	2200      	movs	r2, #0
 801736e:	49cc      	ldr	r1, [pc, #816]	; (80176a0 <dwt_ioctl+0x1ccc>)
 8017370:	4630      	mov	r0, r6
 8017372:	f7fc ff4a 	bl	801420a <dwt_write8bitoffsetreg>
 8017376:	2500      	movs	r5, #0
 8017378:	f7fe bbd6 	b.w	8015b28 <dwt_ioctl+0x154>
 801737c:	7b22      	ldrb	r2, [r4, #12]
 801737e:	4bc6      	ldr	r3, [pc, #792]	; (8017698 <dwt_ioctl+0x1cc4>)
 8017380:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8017384:	f44f 6235 	mov.w	r2, #2896	; 0xb50
 8017388:	fb02 f203 	mul.w	r2, r2, r3
 801738c:	0c93      	lsrs	r3, r2, #18
 801738e:	f3c2 12ca 	ubfx	r2, r2, #7, #11
 8017392:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8017396:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 801739a:	bf28      	it	cs
 801739c:	3301      	addcs	r3, #1
 801739e:	b29b      	uxth	r3, r3
 80173a0:	e7d9      	b.n	8017356 <dwt_ioctl+0x1982>
 80173a2:	2c00      	cmp	r4, #0
 80173a4:	f000 822d 	beq.w	8017802 <dwt_ioctl+0x1e2e>
 80173a8:	2200      	movs	r2, #0
 80173aa:	49be      	ldr	r1, [pc, #760]	; (80176a4 <dwt_ioctl+0x1cd0>)
 80173ac:	f7fc fb3e 	bl	8013a2c <dwt_read32bitoffsetreg>
 80173b0:	6020      	str	r0, [r4, #0]
 80173b2:	2500      	movs	r5, #0
 80173b4:	f7fe bbb8 	b.w	8015b28 <dwt_ioctl+0x154>
 80173b8:	2c00      	cmp	r4, #0
 80173ba:	f000 8225 	beq.w	8017808 <dwt_ioctl+0x1e34>
 80173be:	2200      	movs	r2, #0
 80173c0:	49b9      	ldr	r1, [pc, #740]	; (80176a8 <dwt_ioctl+0x1cd4>)
 80173c2:	f7fc fb33 	bl	8013a2c <dwt_read32bitoffsetreg>
 80173c6:	6020      	str	r0, [r4, #0]
 80173c8:	2500      	movs	r5, #0
 80173ca:	f7fe bbad 	b.w	8015b28 <dwt_ioctl+0x154>
 80173ce:	2c00      	cmp	r4, #0
 80173d0:	f000 821d 	beq.w	801780e <dwt_ioctl+0x1e3a>
 80173d4:	f44f 13a8 	mov.w	r3, #1376256	; 0x150000
 80173d8:	6023      	str	r3, [r4, #0]
 80173da:	2500      	movs	r5, #0
 80173dc:	f7fe bba4 	b.w	8015b28 <dwt_ioctl+0x154>
 80173e0:	2c00      	cmp	r4, #0
 80173e2:	f000 8217 	beq.w	8017814 <dwt_ioctl+0x1e40>
 80173e6:	2500      	movs	r5, #0
 80173e8:	950b      	str	r5, [sp, #44]	; 0x2c
 80173ea:	af10      	add	r7, sp, #64	; 0x40
 80173ec:	2319      	movs	r3, #25
 80173ee:	f847 3d10 	str.w	r3, [r7, #-16]!
 80173f2:	9700      	str	r7, [sp, #0]
 80173f4:	2304      	movs	r3, #4
 80173f6:	462a      	mov	r2, r5
 80173f8:	49ac      	ldr	r1, [pc, #688]	; (80176ac <dwt_ioctl+0x1cd8>)
 80173fa:	f7fc fefb 	bl	80141f4 <dwt_writetodevice>
 80173fe:	f641 7348 	movw	r3, #8008	; 0x1f48
 8017402:	930c      	str	r3, [sp, #48]	; 0x30
 8017404:	9700      	str	r7, [sp, #0]
 8017406:	2304      	movs	r3, #4
 8017408:	462a      	mov	r2, r5
 801740a:	49a9      	ldr	r1, [pc, #676]	; (80176b0 <dwt_ioctl+0x1cdc>)
 801740c:	4630      	mov	r0, r6
 801740e:	f7fc fef1 	bl	80141f4 <dwt_writetodevice>
 8017412:	ab0b      	add	r3, sp, #44	; 0x2c
 8017414:	9300      	str	r3, [sp, #0]
 8017416:	2304      	movs	r3, #4
 8017418:	462a      	mov	r2, r5
 801741a:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 801741e:	4630      	mov	r0, r6
 8017420:	f7fc fafa 	bl	8013a18 <dwt_readfromdevice>
 8017424:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017426:	6023      	str	r3, [r4, #0]
 8017428:	f7fe bb7e 	b.w	8015b28 <dwt_ioctl+0x154>
 801742c:	2c00      	cmp	r4, #0
 801742e:	f000 81f4 	beq.w	801781a <dwt_ioctl+0x1e46>
 8017432:	2200      	movs	r2, #0
 8017434:	499f      	ldr	r1, [pc, #636]	; (80176b4 <dwt_ioctl+0x1ce0>)
 8017436:	f7fc faf9 	bl	8013a2c <dwt_read32bitoffsetreg>
 801743a:	b280      	uxth	r0, r0
 801743c:	6020      	str	r0, [r4, #0]
 801743e:	2200      	movs	r2, #0
 8017440:	499d      	ldr	r1, [pc, #628]	; (80176b8 <dwt_ioctl+0x1ce4>)
 8017442:	4630      	mov	r0, r6
 8017444:	f7fc faf2 	bl	8013a2c <dwt_read32bitoffsetreg>
 8017448:	0d43      	lsrs	r3, r0, #21
 801744a:	019b      	lsls	r3, r3, #6
 801744c:	b29b      	uxth	r3, r3
 801744e:	6063      	str	r3, [r4, #4]
 8017450:	2500      	movs	r5, #0
 8017452:	f7fe bb69 	b.w	8015b28 <dwt_ioctl+0x154>
 8017456:	2c00      	cmp	r4, #0
 8017458:	f000 81e2 	beq.w	8017820 <dwt_ioctl+0x1e4c>
 801745c:	7d63      	ldrb	r3, [r4, #21]
 801745e:	b12b      	cbz	r3, 801746c <dwt_ioctl+0x1a98>
 8017460:	2b01      	cmp	r3, #1
 8017462:	d037      	beq.n	80174d4 <dwt_ioctl+0x1b00>
 8017464:	2b02      	cmp	r3, #2
 8017466:	d05e      	beq.n	8017526 <dwt_ioctl+0x1b52>
 8017468:	23ff      	movs	r3, #255	; 0xff
 801746a:	e02f      	b.n	80174cc <dwt_ioctl+0x1af8>
 801746c:	2200      	movs	r2, #0
 801746e:	4993      	ldr	r1, [pc, #588]	; (80176bc <dwt_ioctl+0x1ce8>)
 8017470:	f7fc fadc 	bl	8013a2c <dwt_read32bitoffsetreg>
 8017474:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8017478:	6020      	str	r0, [r4, #0]
 801747a:	2200      	movs	r2, #0
 801747c:	4990      	ldr	r1, [pc, #576]	; (80176c0 <dwt_ioctl+0x1cec>)
 801747e:	4630      	mov	r0, r6
 8017480:	f7fc fad4 	bl	8013a2c <dwt_read32bitoffsetreg>
 8017484:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8017488:	6060      	str	r0, [r4, #4]
 801748a:	2200      	movs	r2, #0
 801748c:	498d      	ldr	r1, [pc, #564]	; (80176c4 <dwt_ioctl+0x1cf0>)
 801748e:	4630      	mov	r0, r6
 8017490:	f7fc facc 	bl	8013a2c <dwt_read32bitoffsetreg>
 8017494:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8017498:	60a0      	str	r0, [r4, #8]
 801749a:	2200      	movs	r2, #0
 801749c:	498a      	ldr	r1, [pc, #552]	; (80176c8 <dwt_ioctl+0x1cf4>)
 801749e:	4630      	mov	r0, r6
 80174a0:	f7fc fac4 	bl	8013a2c <dwt_read32bitoffsetreg>
 80174a4:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80174a8:	60e0      	str	r0, [r4, #12]
 80174aa:	2200      	movs	r2, #0
 80174ac:	4987      	ldr	r1, [pc, #540]	; (80176cc <dwt_ioctl+0x1cf8>)
 80174ae:	4630      	mov	r0, r6
 80174b0:	f7fc fabc 	bl	8013a2c <dwt_read32bitoffsetreg>
 80174b4:	f3c0 0010 	ubfx	r0, r0, #0, #17
 80174b8:	6120      	str	r0, [r4, #16]
 80174ba:	2203      	movs	r2, #3
 80174bc:	4979      	ldr	r1, [pc, #484]	; (80176a4 <dwt_ioctl+0x1cd0>)
 80174be:	4630      	mov	r0, r6
 80174c0:	f7fc fadc 	bl	8013a7c <dwt_read8bitoffsetreg>
 80174c4:	f3c0 1002 	ubfx	r0, r0, #4, #3
 80174c8:	7520      	strb	r0, [r4, #20]
 80174ca:	2300      	movs	r3, #0
 80174cc:	75a3      	strb	r3, [r4, #22]
 80174ce:	2500      	movs	r5, #0
 80174d0:	f7fe bb2a 	b.w	8015b28 <dwt_ioctl+0x154>
 80174d4:	2200      	movs	r2, #0
 80174d6:	497e      	ldr	r1, [pc, #504]	; (80176d0 <dwt_ioctl+0x1cfc>)
 80174d8:	f7fc faa8 	bl	8013a2c <dwt_read32bitoffsetreg>
 80174dc:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80174e0:	6020      	str	r0, [r4, #0]
 80174e2:	2200      	movs	r2, #0
 80174e4:	497b      	ldr	r1, [pc, #492]	; (80176d4 <dwt_ioctl+0x1d00>)
 80174e6:	4630      	mov	r0, r6
 80174e8:	f7fc faa0 	bl	8013a2c <dwt_read32bitoffsetreg>
 80174ec:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80174f0:	6060      	str	r0, [r4, #4]
 80174f2:	2200      	movs	r2, #0
 80174f4:	4978      	ldr	r1, [pc, #480]	; (80176d8 <dwt_ioctl+0x1d04>)
 80174f6:	4630      	mov	r0, r6
 80174f8:	f7fc fa98 	bl	8013a2c <dwt_read32bitoffsetreg>
 80174fc:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8017500:	60a0      	str	r0, [r4, #8]
 8017502:	2200      	movs	r2, #0
 8017504:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 8017508:	4630      	mov	r0, r6
 801750a:	f7fc fa8f 	bl	8013a2c <dwt_read32bitoffsetreg>
 801750e:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8017512:	60e0      	str	r0, [r4, #12]
 8017514:	2200      	movs	r2, #0
 8017516:	4971      	ldr	r1, [pc, #452]	; (80176dc <dwt_ioctl+0x1d08>)
 8017518:	4630      	mov	r0, r6
 801751a:	f7fc fa87 	bl	8013a2c <dwt_read32bitoffsetreg>
 801751e:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8017522:	6120      	str	r0, [r4, #16]
 8017524:	e7c9      	b.n	80174ba <dwt_ioctl+0x1ae6>
 8017526:	2200      	movs	r2, #0
 8017528:	496d      	ldr	r1, [pc, #436]	; (80176e0 <dwt_ioctl+0x1d0c>)
 801752a:	f7fc fa7f 	bl	8013a2c <dwt_read32bitoffsetreg>
 801752e:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8017532:	6020      	str	r0, [r4, #0]
 8017534:	2200      	movs	r2, #0
 8017536:	496b      	ldr	r1, [pc, #428]	; (80176e4 <dwt_ioctl+0x1d10>)
 8017538:	4630      	mov	r0, r6
 801753a:	f7fc fa77 	bl	8013a2c <dwt_read32bitoffsetreg>
 801753e:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8017542:	6060      	str	r0, [r4, #4]
 8017544:	2200      	movs	r2, #0
 8017546:	4968      	ldr	r1, [pc, #416]	; (80176e8 <dwt_ioctl+0x1d14>)
 8017548:	4630      	mov	r0, r6
 801754a:	f7fc fa6f 	bl	8013a2c <dwt_read32bitoffsetreg>
 801754e:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8017552:	60a0      	str	r0, [r4, #8]
 8017554:	2200      	movs	r2, #0
 8017556:	4965      	ldr	r1, [pc, #404]	; (80176ec <dwt_ioctl+0x1d18>)
 8017558:	4630      	mov	r0, r6
 801755a:	f7fc fa67 	bl	8013a2c <dwt_read32bitoffsetreg>
 801755e:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8017562:	60e0      	str	r0, [r4, #12]
 8017564:	2200      	movs	r2, #0
 8017566:	4962      	ldr	r1, [pc, #392]	; (80176f0 <dwt_ioctl+0x1d1c>)
 8017568:	4630      	mov	r0, r6
 801756a:	f7fc fa5f 	bl	8013a2c <dwt_read32bitoffsetreg>
 801756e:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8017572:	6120      	str	r0, [r4, #16]
 8017574:	e7a1      	b.n	80174ba <dwt_ioctl+0x1ae6>
 8017576:	2500      	movs	r5, #0
 8017578:	f7fe bad6 	b.w	8015b28 <dwt_ioctl+0x154>
 801757c:	2500      	movs	r5, #0
 801757e:	f7fe bad3 	b.w	8015b28 <dwt_ioctl+0x154>
 8017582:	2500      	movs	r5, #0
 8017584:	f7fe bad0 	b.w	8015b28 <dwt_ioctl+0x154>
 8017588:	2500      	movs	r5, #0
 801758a:	f7fe bacd 	b.w	8015b28 <dwt_ioctl+0x154>
 801758e:	2500      	movs	r5, #0
 8017590:	f7fe baca 	b.w	8015b28 <dwt_ioctl+0x154>
 8017594:	2500      	movs	r5, #0
 8017596:	f7fe bac7 	b.w	8015b28 <dwt_ioctl+0x154>
 801759a:	2500      	movs	r5, #0
 801759c:	f7fe bac4 	b.w	8015b28 <dwt_ioctl+0x154>
 80175a0:	2500      	movs	r5, #0
 80175a2:	f7fe bac1 	b.w	8015b28 <dwt_ioctl+0x154>
 80175a6:	2500      	movs	r5, #0
 80175a8:	f7fe babe 	b.w	8015b28 <dwt_ioctl+0x154>
 80175ac:	2500      	movs	r5, #0
 80175ae:	f7fe babb 	b.w	8015b28 <dwt_ioctl+0x154>
 80175b2:	2500      	movs	r5, #0
 80175b4:	f7fe bab8 	b.w	8015b28 <dwt_ioctl+0x154>
 80175b8:	2500      	movs	r5, #0
 80175ba:	f7fe bab5 	b.w	8015b28 <dwt_ioctl+0x154>
 80175be:	2500      	movs	r5, #0
 80175c0:	f7fe bab2 	b.w	8015b28 <dwt_ioctl+0x154>
 80175c4:	2500      	movs	r5, #0
 80175c6:	f7fe baaf 	b.w	8015b28 <dwt_ioctl+0x154>
 80175ca:	2500      	movs	r5, #0
 80175cc:	f7fe baac 	b.w	8015b28 <dwt_ioctl+0x154>
 80175d0:	2500      	movs	r5, #0
 80175d2:	f7fe baa9 	b.w	8015b28 <dwt_ioctl+0x154>
 80175d6:	2500      	movs	r5, #0
 80175d8:	f7fe baa6 	b.w	8015b28 <dwt_ioctl+0x154>
 80175dc:	2500      	movs	r5, #0
 80175de:	f7fe baa3 	b.w	8015b28 <dwt_ioctl+0x154>
 80175e2:	2500      	movs	r5, #0
 80175e4:	f7fe baa0 	b.w	8015b28 <dwt_ioctl+0x154>
 80175e8:	2500      	movs	r5, #0
 80175ea:	f7fe ba9d 	b.w	8015b28 <dwt_ioctl+0x154>
 80175ee:	2500      	movs	r5, #0
 80175f0:	f7fe ba9a 	b.w	8015b28 <dwt_ioctl+0x154>
 80175f4:	2500      	movs	r5, #0
 80175f6:	f7fe ba97 	b.w	8015b28 <dwt_ioctl+0x154>
 80175fa:	2500      	movs	r5, #0
 80175fc:	f7fe ba94 	b.w	8015b28 <dwt_ioctl+0x154>
 8017600:	2500      	movs	r5, #0
 8017602:	f7fe ba91 	b.w	8015b28 <dwt_ioctl+0x154>
 8017606:	2500      	movs	r5, #0
 8017608:	f7fe ba8e 	b.w	8015b28 <dwt_ioctl+0x154>
 801760c:	2500      	movs	r5, #0
 801760e:	f7fe ba8b 	b.w	8015b28 <dwt_ioctl+0x154>
 8017612:	2500      	movs	r5, #0
 8017614:	f7fe ba88 	b.w	8015b28 <dwt_ioctl+0x154>
 8017618:	2500      	movs	r5, #0
 801761a:	f7fe ba85 	b.w	8015b28 <dwt_ioctl+0x154>
 801761e:	2500      	movs	r5, #0
 8017620:	f7fe ba82 	b.w	8015b28 <dwt_ioctl+0x154>
 8017624:	2500      	movs	r5, #0
 8017626:	f7fe ba7f 	b.w	8015b28 <dwt_ioctl+0x154>
 801762a:	2500      	movs	r5, #0
 801762c:	f7fe ba7c 	b.w	8015b28 <dwt_ioctl+0x154>
 8017630:	2500      	movs	r5, #0
 8017632:	f7fe ba79 	b.w	8015b28 <dwt_ioctl+0x154>
 8017636:	2500      	movs	r5, #0
 8017638:	f7fe ba76 	b.w	8015b28 <dwt_ioctl+0x154>
 801763c:	2500      	movs	r5, #0
 801763e:	f7fe ba73 	b.w	8015b28 <dwt_ioctl+0x154>
 8017642:	2500      	movs	r5, #0
 8017644:	f7fe ba70 	b.w	8015b28 <dwt_ioctl+0x154>
 8017648:	2500      	movs	r5, #0
 801764a:	f7fe ba6d 	b.w	8015b28 <dwt_ioctl+0x154>
 801764e:	2500      	movs	r5, #0
 8017650:	f7fe ba6a 	b.w	8015b28 <dwt_ioctl+0x154>
 8017654:	2500      	movs	r5, #0
 8017656:	f7fe ba67 	b.w	8015b28 <dwt_ioctl+0x154>
 801765a:	2500      	movs	r5, #0
 801765c:	f7fe ba64 	b.w	8015b28 <dwt_ioctl+0x154>
 8017660:	2500      	movs	r5, #0
 8017662:	f7fe ba61 	b.w	8015b28 <dwt_ioctl+0x154>
 8017666:	2500      	movs	r5, #0
 8017668:	f7fe ba5e 	b.w	8015b28 <dwt_ioctl+0x154>
 801766c:	2500      	movs	r5, #0
 801766e:	f7fe ba5b 	b.w	8015b28 <dwt_ioctl+0x154>
 8017672:	2500      	movs	r5, #0
 8017674:	f7fe ba58 	b.w	8015b28 <dwt_ioctl+0x154>
 8017678:	2500      	movs	r5, #0
 801767a:	f7fe ba55 	b.w	8015b28 <dwt_ioctl+0x154>
 801767e:	2500      	movs	r5, #0
 8017680:	f7fe ba52 	b.w	8015b28 <dwt_ioctl+0x154>
 8017684:	2500      	movs	r5, #0
 8017686:	f7fe ba4f 	b.w	8015b28 <dwt_ioctl+0x154>
 801768a:	2500      	movs	r5, #0
 801768c:	f7fe ba4c 	b.w	8015b28 <dwt_ioctl+0x154>
 8017690:	2500      	movs	r5, #0
 8017692:	f7fe ba49 	b.w	8015b28 <dwt_ioctl+0x154>
 8017696:	bf00      	nop
 8017698:	0802124c 	.word	0x0802124c
 801769c:	000e0012 	.word	0x000e0012
 80176a0:	000e0016 	.word	0x000e0016
 80176a4:	00030060 	.word	0x00030060
 80176a8:	000f0048 	.word	0x000f0048
 80176ac:	001f0004 	.word	0x001f0004
 80176b0:	001f0008 	.word	0x001f0008
 80176b4:	000c0048 	.word	0x000c0048
 80176b8:	000c0028 	.word	0x000c0028
 80176bc:	000c0058 	.word	0x000c0058
 80176c0:	000c0030 	.word	0x000c0030
 80176c4:	000c0034 	.word	0x000c0034
 80176c8:	000c0038 	.word	0x000c0038
 80176cc:	000c002c 	.word	0x000c002c
 80176d0:	000d0020 	.word	0x000d0020
 80176d4:	000c0064 	.word	0x000c0064
 80176d8:	000c0068 	.word	0x000c0068
 80176dc:	000c0060 	.word	0x000c0060
 80176e0:	000d0068 	.word	0x000d0068
 80176e4:	000d0040 	.word	0x000d0040
 80176e8:	000d0044 	.word	0x000d0044
 80176ec:	000d0048 	.word	0x000d0048
 80176f0:	000d003c 	.word	0x000d003c
 80176f4:	2500      	movs	r5, #0
 80176f6:	f7fe ba17 	b.w	8015b28 <dwt_ioctl+0x154>
 80176fa:	2500      	movs	r5, #0
 80176fc:	f7fe ba14 	b.w	8015b28 <dwt_ioctl+0x154>
 8017700:	2500      	movs	r5, #0
 8017702:	f7fe ba11 	b.w	8015b28 <dwt_ioctl+0x154>
 8017706:	2500      	movs	r5, #0
 8017708:	f7fe ba0e 	b.w	8015b28 <dwt_ioctl+0x154>
 801770c:	2500      	movs	r5, #0
 801770e:	f7fe ba0b 	b.w	8015b28 <dwt_ioctl+0x154>
 8017712:	2500      	movs	r5, #0
 8017714:	f7fe ba08 	b.w	8015b28 <dwt_ioctl+0x154>
 8017718:	2500      	movs	r5, #0
 801771a:	f7fe ba05 	b.w	8015b28 <dwt_ioctl+0x154>
 801771e:	2500      	movs	r5, #0
 8017720:	f7fe ba02 	b.w	8015b28 <dwt_ioctl+0x154>
 8017724:	2500      	movs	r5, #0
 8017726:	f7fe b9ff 	b.w	8015b28 <dwt_ioctl+0x154>
 801772a:	2500      	movs	r5, #0
 801772c:	f7fe b9fc 	b.w	8015b28 <dwt_ioctl+0x154>
 8017730:	2500      	movs	r5, #0
 8017732:	f7fe b9f9 	b.w	8015b28 <dwt_ioctl+0x154>
 8017736:	2500      	movs	r5, #0
 8017738:	f7fe b9f6 	b.w	8015b28 <dwt_ioctl+0x154>
 801773c:	2500      	movs	r5, #0
 801773e:	f7fe b9f3 	b.w	8015b28 <dwt_ioctl+0x154>
 8017742:	2500      	movs	r5, #0
 8017744:	f7fe b9f0 	b.w	8015b28 <dwt_ioctl+0x154>
 8017748:	2500      	movs	r5, #0
 801774a:	f7fe b9ed 	b.w	8015b28 <dwt_ioctl+0x154>
 801774e:	2500      	movs	r5, #0
 8017750:	f7fe b9ea 	b.w	8015b28 <dwt_ioctl+0x154>
 8017754:	2500      	movs	r5, #0
 8017756:	f7fe b9e7 	b.w	8015b28 <dwt_ioctl+0x154>
 801775a:	2500      	movs	r5, #0
 801775c:	f7fe b9e4 	b.w	8015b28 <dwt_ioctl+0x154>
 8017760:	2500      	movs	r5, #0
 8017762:	f7fe b9e1 	b.w	8015b28 <dwt_ioctl+0x154>
 8017766:	2500      	movs	r5, #0
 8017768:	f7fe b9de 	b.w	8015b28 <dwt_ioctl+0x154>
 801776c:	2500      	movs	r5, #0
 801776e:	f7fe b9db 	b.w	8015b28 <dwt_ioctl+0x154>
 8017772:	2500      	movs	r5, #0
 8017774:	f7fe b9d8 	b.w	8015b28 <dwt_ioctl+0x154>
 8017778:	2500      	movs	r5, #0
 801777a:	f7fe b9d5 	b.w	8015b28 <dwt_ioctl+0x154>
 801777e:	2500      	movs	r5, #0
 8017780:	f7fe b9d2 	b.w	8015b28 <dwt_ioctl+0x154>
 8017784:	2500      	movs	r5, #0
 8017786:	f7fe b9cf 	b.w	8015b28 <dwt_ioctl+0x154>
 801778a:	2500      	movs	r5, #0
 801778c:	f7fe b9cc 	b.w	8015b28 <dwt_ioctl+0x154>
 8017790:	2500      	movs	r5, #0
 8017792:	f7fe b9c9 	b.w	8015b28 <dwt_ioctl+0x154>
 8017796:	2500      	movs	r5, #0
 8017798:	f7fe b9c6 	b.w	8015b28 <dwt_ioctl+0x154>
 801779c:	2500      	movs	r5, #0
 801779e:	f7fe b9c3 	b.w	8015b28 <dwt_ioctl+0x154>
 80177a2:	2500      	movs	r5, #0
 80177a4:	f7fe b9c0 	b.w	8015b28 <dwt_ioctl+0x154>
 80177a8:	2500      	movs	r5, #0
 80177aa:	f7fe b9bd 	b.w	8015b28 <dwt_ioctl+0x154>
 80177ae:	2500      	movs	r5, #0
 80177b0:	f7fe b9ba 	b.w	8015b28 <dwt_ioctl+0x154>
 80177b4:	2500      	movs	r5, #0
 80177b6:	f7fe b9b7 	b.w	8015b28 <dwt_ioctl+0x154>
 80177ba:	2500      	movs	r5, #0
 80177bc:	f7fe b9b4 	b.w	8015b28 <dwt_ioctl+0x154>
 80177c0:	2500      	movs	r5, #0
 80177c2:	f7fe b9b1 	b.w	8015b28 <dwt_ioctl+0x154>
 80177c6:	2500      	movs	r5, #0
 80177c8:	f7fe b9ae 	b.w	8015b28 <dwt_ioctl+0x154>
 80177cc:	2500      	movs	r5, #0
 80177ce:	f7fe b9ab 	b.w	8015b28 <dwt_ioctl+0x154>
 80177d2:	2500      	movs	r5, #0
 80177d4:	f7fe b9a8 	b.w	8015b28 <dwt_ioctl+0x154>
 80177d8:	2500      	movs	r5, #0
 80177da:	f7fe b9a5 	b.w	8015b28 <dwt_ioctl+0x154>
 80177de:	2500      	movs	r5, #0
 80177e0:	f7fe b9a2 	b.w	8015b28 <dwt_ioctl+0x154>
 80177e4:	2500      	movs	r5, #0
 80177e6:	f7fe b99f 	b.w	8015b28 <dwt_ioctl+0x154>
 80177ea:	2500      	movs	r5, #0
 80177ec:	f7fe b99c 	b.w	8015b28 <dwt_ioctl+0x154>
 80177f0:	2500      	movs	r5, #0
 80177f2:	f7fe b999 	b.w	8015b28 <dwt_ioctl+0x154>
 80177f6:	2500      	movs	r5, #0
 80177f8:	f7fe b996 	b.w	8015b28 <dwt_ioctl+0x154>
 80177fc:	2500      	movs	r5, #0
 80177fe:	f7fe b993 	b.w	8015b28 <dwt_ioctl+0x154>
 8017802:	2500      	movs	r5, #0
 8017804:	f7fe b990 	b.w	8015b28 <dwt_ioctl+0x154>
 8017808:	2500      	movs	r5, #0
 801780a:	f7fe b98d 	b.w	8015b28 <dwt_ioctl+0x154>
 801780e:	2500      	movs	r5, #0
 8017810:	f7fe b98a 	b.w	8015b28 <dwt_ioctl+0x154>
 8017814:	2500      	movs	r5, #0
 8017816:	f7fe b987 	b.w	8015b28 <dwt_ioctl+0x154>
 801781a:	2500      	movs	r5, #0
 801781c:	f7fe b984 	b.w	8015b28 <dwt_ioctl+0x154>
 8017820:	2500      	movs	r5, #0
 8017822:	f7fe b981 	b.w	8015b28 <dwt_ioctl+0x154>
 8017826:	f899 3011 	ldrb.w	r3, [r9, #17]
 801782a:	1e5a      	subs	r2, r3, #1
 801782c:	b2d2      	uxtb	r2, r2
 801782e:	2a01      	cmp	r2, #1
 8017830:	f67f a801 	bls.w	8016836 <dwt_ioctl+0xe62>
 8017834:	2202      	movs	r2, #2
 8017836:	f7fe bf85 	b.w	8016744 <dwt_ioctl+0xd70>
 801783a:	2f00      	cmp	r7, #0
 801783c:	f43f ac62 	beq.w	8017104 <dwt_ioctl+0x1730>
 8017840:	f819 1000 	ldrb.w	r1, [r9, r0]
 8017844:	1a5b      	subs	r3, r3, r1
 8017846:	b29b      	uxth	r3, r3
 8017848:	e481      	b.n	801714e <dwt_ioctl+0x177a>
 801784a:	283f      	cmp	r0, #63	; 0x3f
 801784c:	d027      	beq.n	801789e <dwt_ioctl+0x1eca>
 801784e:	2e00      	cmp	r6, #0
 8017850:	f47f ac5e 	bne.w	8017110 <dwt_ioctl+0x173c>
 8017854:	3001      	adds	r0, #1
 8017856:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 801785a:	f819 1000 	ldrb.w	r1, [r9, r0]
 801785e:	440b      	add	r3, r1
 8017860:	b29b      	uxth	r3, r3
 8017862:	459c      	cmp	ip, r3
 8017864:	f43f ac71 	beq.w	801714a <dwt_ioctl+0x1776>
 8017868:	3d01      	subs	r5, #1
 801786a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 801786e:	f43f ac32 	beq.w	80170d6 <dwt_ioctl+0x1702>
 8017872:	459e      	cmp	lr, r3
 8017874:	f4bf ac40 	bcs.w	80170f8 <dwt_ioctl+0x1724>
 8017878:	4598      	cmp	r8, r3
 801787a:	d9de      	bls.n	801783a <dwt_ioctl+0x1e66>
 801787c:	ebac 0103 	sub.w	r1, ip, r3
 8017880:	b209      	sxth	r1, r1
 8017882:	2900      	cmp	r1, #0
 8017884:	bfb8      	it	lt
 8017886:	4249      	neglt	r1, r1
 8017888:	4559      	cmp	r1, fp
 801788a:	f77f ac2e 	ble.w	80170ea <dwt_ioctl+0x1716>
 801788e:	2f00      	cmp	r7, #0
 8017890:	f47f ac70 	bne.w	8017174 <dwt_ioctl+0x17a0>
 8017894:	283f      	cmp	r0, #63	; 0x3f
 8017896:	d1da      	bne.n	801784e <dwt_ioctl+0x1e7a>
 8017898:	2f00      	cmp	r7, #0
 801789a:	f47f ac70 	bne.w	801717e <dwt_ioctl+0x17aa>
 801789e:	2a03      	cmp	r2, #3
 80178a0:	f43f ac70 	beq.w	8017184 <dwt_ioctl+0x17b0>
 80178a4:	2a02      	cmp	r2, #2
 80178a6:	f43f ac3f 	beq.w	8017128 <dwt_ioctl+0x1754>
 80178aa:	f81a 1002 	ldrb.w	r1, [sl, r2]
 80178ae:	185e      	adds	r6, r3, r1
 80178b0:	4566      	cmp	r6, ip
 80178b2:	f77f ac40 	ble.w	8017136 <dwt_ioctl+0x1762>
 80178b6:	440b      	add	r3, r1
 80178b8:	b29b      	uxth	r3, r3
 80178ba:	3201      	adds	r2, #1
 80178bc:	b2d2      	uxtb	r2, r2
 80178be:	2700      	movs	r7, #0
 80178c0:	e426      	b.n	8017110 <dwt_ioctl+0x173c>
 80178c2:	bf00      	nop

080178c4 <ull_initialise>:
 80178c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80178c8:	4605      	mov	r5, r0
 80178ca:	460e      	mov	r6, r1
 80178cc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80178ce:	2b00      	cmp	r3, #0
 80178d0:	d05c      	beq.n	801798c <ull_initialise+0xc8>
 80178d2:	6d2c      	ldr	r4, [r5, #80]	; 0x50
 80178d4:	2300      	movs	r3, #0
 80178d6:	73e3      	strb	r3, [r4, #15]
 80178d8:	2202      	movs	r2, #2
 80178da:	8262      	strh	r2, [r4, #18]
 80178dc:	75a3      	strb	r3, [r4, #22]
 80178de:	75e3      	strb	r3, [r4, #23]
 80178e0:	7423      	strb	r3, [r4, #16]
 80178e2:	72a3      	strb	r3, [r4, #10]
 80178e4:	72e3      	strb	r3, [r4, #11]
 80178e6:	2104      	movs	r1, #4
 80178e8:	4628      	mov	r0, r5
 80178ea:	f7fc fd3b 	bl	8014364 <_dwt_otpread>
 80178ee:	4607      	mov	r7, r0
 80178f0:	2105      	movs	r1, #5
 80178f2:	4628      	mov	r0, r5
 80178f4:	f7fc fd36 	bl	8014364 <_dwt_otpread>
 80178f8:	4680      	mov	r8, r0
 80178fa:	210a      	movs	r1, #10
 80178fc:	4628      	mov	r0, r5
 80178fe:	f7fc fd31 	bl	8014364 <_dwt_otpread>
 8017902:	f3c0 4004 	ubfx	r0, r0, #16, #5
 8017906:	7220      	strb	r0, [r4, #8]
 8017908:	b127      	cbz	r7, 8017914 <ull_initialise+0x50>
 801790a:	f1b8 0f00 	cmp.w	r8, #0
 801790e:	d001      	beq.n	8017914 <ull_initialise+0x50>
 8017910:	2800      	cmp	r0, #0
 8017912:	d140      	bne.n	8017996 <ull_initialise+0xd2>
 8017914:	2120      	movs	r1, #32
 8017916:	4628      	mov	r0, r5
 8017918:	f7fc fd24 	bl	8014364 <_dwt_otpread>
 801791c:	4b2f      	ldr	r3, [pc, #188]	; (80179dc <ull_initialise+0x118>)
 801791e:	4298      	cmp	r0, r3
 8017920:	bf0c      	ite	eq
 8017922:	2301      	moveq	r3, #1
 8017924:	2300      	movne	r3, #0
 8017926:	7263      	strb	r3, [r4, #9]
 8017928:	f016 0f10 	tst.w	r6, #16
 801792c:	d137      	bne.n	801799e <ull_initialise+0xda>
 801792e:	f016 0f20 	tst.w	r6, #32
 8017932:	d13a      	bne.n	80179aa <ull_initialise+0xe6>
 8017934:	f016 0f40 	tst.w	r6, #64	; 0x40
 8017938:	d13d      	bne.n	80179b6 <ull_initialise+0xf2>
 801793a:	f016 0f80 	tst.w	r6, #128	; 0x80
 801793e:	d141      	bne.n	80179c4 <ull_initialise+0x100>
 8017940:	7ae3      	ldrb	r3, [r4, #11]
 8017942:	b90b      	cbnz	r3, 8017948 <ull_initialise+0x84>
 8017944:	2385      	movs	r3, #133	; 0x85
 8017946:	72e3      	strb	r3, [r4, #11]
 8017948:	7aa3      	ldrb	r3, [r4, #10]
 801794a:	b90b      	cbnz	r3, 8017950 <ull_initialise+0x8c>
 801794c:	2374      	movs	r3, #116	; 0x74
 801794e:	72a3      	strb	r3, [r4, #10]
 8017950:	211f      	movs	r1, #31
 8017952:	4628      	mov	r0, r5
 8017954:	f7fc fd06 	bl	8014364 <_dwt_otpread>
 8017958:	7360      	strb	r0, [r4, #13]
 801795a:	211e      	movs	r1, #30
 801795c:	4628      	mov	r0, r5
 801795e:	f7fc fd01 	bl	8014364 <_dwt_otpread>
 8017962:	f010 003f 	ands.w	r0, r0, #63	; 0x3f
 8017966:	bf12      	itee	ne
 8017968:	73a0      	strbne	r0, [r4, #14]
 801796a:	232e      	moveq	r3, #46	; 0x2e
 801796c:	73a3      	strbeq	r3, [r4, #14]
 801796e:	7ba3      	ldrb	r3, [r4, #14]
 8017970:	2200      	movs	r2, #0
 8017972:	491b      	ldr	r1, [pc, #108]	; (80179e0 <ull_initialise+0x11c>)
 8017974:	4628      	mov	r0, r5
 8017976:	f7fc fc48 	bl	801420a <dwt_write8bitoffsetreg>
 801797a:	2135      	movs	r1, #53	; 0x35
 801797c:	4628      	mov	r0, r5
 801797e:	f7fc fcf1 	bl	8014364 <_dwt_otpread>
 8017982:	4603      	mov	r3, r0
 8017984:	bb20      	cbnz	r0, 80179d0 <ull_initialise+0x10c>
 8017986:	2000      	movs	r0, #0
 8017988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801798c:	202c      	movs	r0, #44	; 0x2c
 801798e:	f009 f90b 	bl	8020ba8 <malloc>
 8017992:	6528      	str	r0, [r5, #80]	; 0x50
 8017994:	e79d      	b.n	80178d2 <ull_initialise+0xe>
 8017996:	4628      	mov	r0, r5
 8017998:	f7fd fcd2 	bl	8015340 <_dwt_prog_ldo_and_bias_tune>
 801799c:	e7ba      	b.n	8017914 <ull_initialise+0x50>
 801799e:	2106      	movs	r1, #6
 80179a0:	4628      	mov	r0, r5
 80179a2:	f7fc fcdf 	bl	8014364 <_dwt_otpread>
 80179a6:	6020      	str	r0, [r4, #0]
 80179a8:	e7c1      	b.n	801792e <ull_initialise+0x6a>
 80179aa:	2107      	movs	r1, #7
 80179ac:	4628      	mov	r0, r5
 80179ae:	f7fc fcd9 	bl	8014364 <_dwt_otpread>
 80179b2:	6060      	str	r0, [r4, #4]
 80179b4:	e7be      	b.n	8017934 <ull_initialise+0x70>
 80179b6:	2108      	movs	r1, #8
 80179b8:	4628      	mov	r0, r5
 80179ba:	f7fc fcd3 	bl	8014364 <_dwt_otpread>
 80179be:	0c00      	lsrs	r0, r0, #16
 80179c0:	72a0      	strb	r0, [r4, #10]
 80179c2:	e7ba      	b.n	801793a <ull_initialise+0x76>
 80179c4:	2109      	movs	r1, #9
 80179c6:	4628      	mov	r0, r5
 80179c8:	f7fc fccc 	bl	8014364 <_dwt_otpread>
 80179cc:	72e0      	strb	r0, [r4, #11]
 80179ce:	e7b7      	b.n	8017940 <ull_initialise+0x7c>
 80179d0:	2200      	movs	r2, #0
 80179d2:	4904      	ldr	r1, [pc, #16]	; (80179e4 <ull_initialise+0x120>)
 80179d4:	4628      	mov	r0, r5
 80179d6:	f7fc fd6b 	bl	80144b0 <dwt_write32bitoffsetreg>
 80179da:	e7d4      	b.n	8017986 <ull_initialise+0xc2>
 80179dc:	10000240 	.word	0x10000240
 80179e0:	00090014 	.word	0x00090014
 80179e4:	00090004 	.word	0x00090004

080179e8 <_init>:
 80179e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80179ea:	b085      	sub	sp, #20
 80179ec:	4604      	mov	r4, r0
 80179ee:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80179f0:	6819      	ldr	r1, [r3, #0]
 80179f2:	f7ff ff67 	bl	80178c4 <ull_initialise>
 80179f6:	4606      	mov	r6, r0
 80179f8:	6823      	ldr	r3, [r4, #0]
 80179fa:	691b      	ldr	r3, [r3, #16]
 80179fc:	4798      	blx	r3
 80179fe:	ab03      	add	r3, sp, #12
 8017a00:	2200      	movs	r2, #0
 8017a02:	4611      	mov	r1, r2
 8017a04:	4620      	mov	r0, r4
 8017a06:	f7fd ffe5 	bl	80159d4 <dwt_ioctl>
 8017a0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017a0e:	6819      	ldr	r1, [r3, #0]
 8017a10:	4620      	mov	r0, r4
 8017a12:	f7fd fdb5 	bl	8015580 <ull_configure>
 8017a16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017a1a:	6859      	ldr	r1, [r3, #4]
 8017a1c:	4620      	mov	r0, r4
 8017a1e:	f7fd fb4f 	bl	80150c0 <ull_configuretxrf>
 8017a22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017a26:	89db      	ldrh	r3, [r3, #14]
 8017a28:	2200      	movs	r2, #0
 8017a2a:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 8017a2e:	4620      	mov	r0, r4
 8017a30:	f7fc fc3d 	bl	80142ae <dwt_write16bitoffsetreg>
 8017a34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017a38:	899b      	ldrh	r3, [r3, #12]
 8017a3a:	2200      	movs	r2, #0
 8017a3c:	4952      	ldr	r1, [pc, #328]	; (8017b88 <_init+0x1a0>)
 8017a3e:	4620      	mov	r0, r4
 8017a40:	f7fc fc35 	bl	80142ae <dwt_write16bitoffsetreg>
 8017a44:	2100      	movs	r1, #0
 8017a46:	4620      	mov	r0, r4
 8017a48:	f7fc fece 	bl	80147e8 <ull_setrxaftertxdelay>
 8017a4c:	2500      	movs	r5, #0
 8017a4e:	9500      	str	r5, [sp, #0]
 8017a50:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 8017a54:	462a      	mov	r2, r5
 8017a56:	2110      	movs	r1, #16
 8017a58:	4620      	mov	r0, r4
 8017a5a:	f7fd fc57 	bl	801530c <dwt_modify16bitoffsetreg>
 8017a5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017a62:	895a      	ldrh	r2, [r3, #10]
 8017a64:	8919      	ldrh	r1, [r3, #8]
 8017a66:	4620      	mov	r0, r4
 8017a68:	f7fd fbba 	bl	80151e0 <ull_configureframefilter>
 8017a6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017a70:	8a1b      	ldrh	r3, [r3, #16]
 8017a72:	2202      	movs	r2, #2
 8017a74:	210c      	movs	r1, #12
 8017a76:	4620      	mov	r0, r4
 8017a78:	f7fc fc19 	bl	80142ae <dwt_write16bitoffsetreg>
 8017a7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017a80:	8a5b      	ldrh	r3, [r3, #18]
 8017a82:	462a      	mov	r2, r5
 8017a84:	210c      	movs	r1, #12
 8017a86:	4620      	mov	r0, r4
 8017a88:	f7fc fc11 	bl	80142ae <dwt_write16bitoffsetreg>
 8017a8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017a8e:	7a19      	ldrb	r1, [r3, #8]
 8017a90:	4620      	mov	r0, r4
 8017a92:	f7fd fc71 	bl	8015378 <ull_setleds>
 8017a96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017a98:	68d9      	ldr	r1, [r3, #12]
 8017a9a:	4620      	mov	r0, r4
 8017a9c:	f7fc feba 	bl	8014814 <ull_setlnapamode>
 8017aa0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017aa2:	7e0b      	ldrb	r3, [r1, #24]
 8017aa4:	694a      	ldr	r2, [r1, #20]
 8017aa6:	6909      	ldr	r1, [r1, #16]
 8017aa8:	4620      	mov	r0, r4
 8017aaa:	f7fd f9f1 	bl	8014e90 <ull_setinterrupt>
 8017aae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017ab0:	7f9a      	ldrb	r2, [r3, #30]
 8017ab2:	8b99      	ldrh	r1, [r3, #28]
 8017ab4:	4620      	mov	r0, r4
 8017ab6:	f7fc fcbf 	bl	8014438 <ull_configuresleep>
 8017aba:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8017abc:	7b93      	ldrb	r3, [r2, #14]
 8017abe:	2b2e      	cmp	r3, #46	; 0x2e
 8017ac0:	d005      	beq.n	8017ace <_init+0xe6>
 8017ac2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017ac4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8017ac8:	f033 033f 	bics.w	r3, r3, #63	; 0x3f
 8017acc:	d00a      	beq.n	8017ae4 <_init+0xfc>
 8017ace:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017ad0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8017ad4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017ad8:	7393      	strb	r3, [r2, #14]
 8017ada:	2200      	movs	r2, #0
 8017adc:	492b      	ldr	r1, [pc, #172]	; (8017b8c <_init+0x1a4>)
 8017ade:	4620      	mov	r0, r4
 8017ae0:	f7fc fb93 	bl	801420a <dwt_write8bitoffsetreg>
 8017ae4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017ae6:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 8017aea:	4620      	mov	r0, r4
 8017aec:	f7fd fa70 	bl	8014fd0 <ull_configciadiag>
 8017af0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017af2:	6a19      	ldr	r1, [r3, #32]
 8017af4:	4620      	mov	r0, r4
 8017af6:	f7fc feaf 	bl	8014858 <ull_configurestskey>
 8017afa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017afc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8017afe:	4620      	mov	r0, r4
 8017b00:	f7fc fece 	bl	80148a0 <ull_configurestsiv>
 8017b04:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017b06:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8017b0a:	bba3      	cbnz	r3, 8017b76 <_init+0x18e>
 8017b0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017b0e:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 8017b12:	4620      	mov	r0, r4
 8017b14:	f7fc fbb8 	bl	8014288 <ull_configeventcounters>
 8017b18:	f994 504c 	ldrsb.w	r5, [r4, #76]	; 0x4c
 8017b1c:	2d00      	cmp	r5, #0
 8017b1e:	db27      	blt.n	8017b70 <_init+0x188>
 8017b20:	2301      	movs	r3, #1
 8017b22:	fa03 f505 	lsl.w	r5, r3, r5
 8017b26:	b2af      	uxth	r7, r5
 8017b28:	f04f 7290 	mov.w	r2, #18874368	; 0x1200000
 8017b2c:	4639      	mov	r1, r7
 8017b2e:	4620      	mov	r0, r4
 8017b30:	f7fd f990 	bl	8014e54 <ull_setgpiomode>
 8017b34:	f10d 030a 	add.w	r3, sp, #10
 8017b38:	9300      	str	r3, [sp, #0]
 8017b3a:	2302      	movs	r3, #2
 8017b3c:	2200      	movs	r2, #0
 8017b3e:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8017b42:	4620      	mov	r0, r4
 8017b44:	f7fb ff68 	bl	8013a18 <dwt_readfromdevice>
 8017b48:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8017b4c:	ea23 0305 	bic.w	r3, r3, r5
 8017b50:	f8ad 300a 	strh.w	r3, [sp, #10]
 8017b54:	2200      	movs	r2, #0
 8017b56:	490e      	ldr	r1, [pc, #56]	; (8017b90 <_init+0x1a8>)
 8017b58:	4620      	mov	r0, r4
 8017b5a:	f7fc fba8 	bl	80142ae <dwt_write16bitoffsetreg>
 8017b5e:	f994 204d 	ldrsb.w	r2, [r4, #77]	; 0x4d
 8017b62:	fab2 f282 	clz	r2, r2
 8017b66:	0952      	lsrs	r2, r2, #5
 8017b68:	4639      	mov	r1, r7
 8017b6a:	4620      	mov	r0, r4
 8017b6c:	f7fd fc82 	bl	8015474 <ull_setgpiovalue>
 8017b70:	4630      	mov	r0, r6
 8017b72:	b005      	add	sp, #20
 8017b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017b76:	2301      	movs	r3, #1
 8017b78:	9300      	str	r3, [sp, #0]
 8017b7a:	23ff      	movs	r3, #255	; 0xff
 8017b7c:	2200      	movs	r2, #0
 8017b7e:	4905      	ldr	r1, [pc, #20]	; (8017b94 <_init+0x1ac>)
 8017b80:	4620      	mov	r0, r4
 8017b82:	f7fd fa11 	bl	8014fa8 <dwt_modify8bitoffsetreg>
 8017b86:	e7c1      	b.n	8017b0c <_init+0x124>
 8017b88:	00010004 	.word	0x00010004
 8017b8c:	00090014 	.word	0x00090014
 8017b90:	00050008 	.word	0x00050008
 8017b94:	00020004 	.word	0x00020004

08017b98 <dwt_dbg_fn>:
 8017b98:	2998      	cmp	r1, #152	; 0x98
 8017b9a:	4802      	ldr	r0, [pc, #8]	; (8017ba4 <dwt_dbg_fn+0xc>)
 8017b9c:	bf18      	it	ne
 8017b9e:	2000      	movne	r0, #0
 8017ba0:	4770      	bx	lr
 8017ba2:	bf00      	nop
 8017ba4:	08021354 	.word	0x08021354

08017ba8 <_deinit>:
 8017ba8:	4770      	bx	lr

08017baa <dwt_xfer3xxx>:
 8017baa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017bae:	b084      	sub	sp, #16
 8017bb0:	4605      	mov	r5, r0
 8017bb2:	460f      	mov	r7, r1
 8017bb4:	461e      	mov	r6, r3
 8017bb6:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8017bba:	1e59      	subs	r1, r3, #1
 8017bbc:	b289      	uxth	r1, r1
 8017bbe:	2901      	cmp	r1, #1
 8017bc0:	d91c      	bls.n	8017bfc <dwt_xfer3xxx+0x52>
 8017bc2:	19d0      	adds	r0, r2, r7
 8017bc4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8017bc8:	443a      	add	r2, r7
 8017bca:	f3c2 4104 	ubfx	r1, r2, #16, #5
 8017bce:	0082      	lsls	r2, r0, #2
 8017bd0:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8017bd4:	ea43 0102 	orr.w	r1, r3, r2
 8017bd8:	0a09      	lsrs	r1, r1, #8
 8017bda:	f88d 100c 	strb.w	r1, [sp, #12]
 8017bde:	b920      	cbnz	r0, 8017bea <dwt_xfer3xxx+0x40>
 8017be0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8017be4:	d018      	beq.n	8017c18 <dwt_xfer3xxx+0x6e>
 8017be6:	2b00      	cmp	r3, #0
 8017be8:	d037      	beq.n	8017c5a <dwt_xfer3xxx+0xb0>
 8017bea:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8017bee:	f88d 100c 	strb.w	r1, [sp, #12]
 8017bf2:	431a      	orrs	r2, r3
 8017bf4:	f88d 200d 	strb.w	r2, [sp, #13]
 8017bf8:	2402      	movs	r4, #2
 8017bfa:	e005      	b.n	8017c08 <dwt_xfer3xxx+0x5e>
 8017bfc:	007a      	lsls	r2, r7, #1
 8017bfe:	f062 027e 	orn	r2, r2, #126	; 0x7e
 8017c02:	f88d 200c 	strb.w	r2, [sp, #12]
 8017c06:	2401      	movs	r4, #1
 8017c08:	2b02      	cmp	r3, #2
 8017c0a:	d006      	beq.n	8017c1a <dwt_xfer3xxx+0x70>
 8017c0c:	d326      	bcc.n	8017c5c <dwt_xfer3xxx+0xb2>
 8017c0e:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8017c12:	2b03      	cmp	r3, #3
 8017c14:	d901      	bls.n	8017c1a <dwt_xfer3xxx+0x70>
 8017c16:	e7fe      	b.n	8017c16 <dwt_xfer3xxx+0x6c>
 8017c18:	2401      	movs	r4, #1
 8017c1a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8017c1c:	7d1b      	ldrb	r3, [r3, #20]
 8017c1e:	b94b      	cbnz	r3, 8017c34 <dwt_xfer3xxx+0x8a>
 8017c20:	682b      	ldr	r3, [r5, #0]
 8017c22:	685d      	ldr	r5, [r3, #4]
 8017c24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017c26:	4632      	mov	r2, r6
 8017c28:	a903      	add	r1, sp, #12
 8017c2a:	4620      	mov	r0, r4
 8017c2c:	47a8      	blx	r5
 8017c2e:	b004      	add	sp, #16
 8017c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017c34:	2200      	movs	r2, #0
 8017c36:	4621      	mov	r1, r4
 8017c38:	a803      	add	r0, sp, #12
 8017c3a:	f7fa fff9 	bl	8012c30 <dwt_generatecrc8>
 8017c3e:	4602      	mov	r2, r0
 8017c40:	4631      	mov	r1, r6
 8017c42:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017c44:	f7fa fff4 	bl	8012c30 <dwt_generatecrc8>
 8017c48:	682b      	ldr	r3, [r5, #0]
 8017c4a:	9000      	str	r0, [sp, #0]
 8017c4c:	689d      	ldr	r5, [r3, #8]
 8017c4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017c50:	4632      	mov	r2, r6
 8017c52:	a903      	add	r1, sp, #12
 8017c54:	4620      	mov	r0, r4
 8017c56:	47a8      	blx	r5
 8017c58:	e7e9      	b.n	8017c2e <dwt_xfer3xxx+0x84>
 8017c5a:	2401      	movs	r4, #1
 8017c5c:	682b      	ldr	r3, [r5, #0]
 8017c5e:	f8d3 8000 	ldr.w	r8, [r3]
 8017c62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017c64:	4632      	mov	r2, r6
 8017c66:	a903      	add	r1, sp, #12
 8017c68:	4620      	mov	r0, r4
 8017c6a:	47c0      	blx	r8
 8017c6c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8017c6e:	7d1b      	ldrb	r3, [r3, #20]
 8017c70:	2b02      	cmp	r3, #2
 8017c72:	d1dc      	bne.n	8017c2e <dwt_xfer3xxx+0x84>
 8017c74:	2f18      	cmp	r7, #24
 8017c76:	d0da      	beq.n	8017c2e <dwt_xfer3xxx+0x84>
 8017c78:	2200      	movs	r2, #0
 8017c7a:	4621      	mov	r1, r4
 8017c7c:	a803      	add	r0, sp, #12
 8017c7e:	f7fa ffd7 	bl	8012c30 <dwt_generatecrc8>
 8017c82:	4602      	mov	r2, r0
 8017c84:	4631      	mov	r1, r6
 8017c86:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017c88:	f7fa ffd2 	bl	8012c30 <dwt_generatecrc8>
 8017c8c:	4604      	mov	r4, r0
 8017c8e:	2200      	movs	r2, #0
 8017c90:	2118      	movs	r1, #24
 8017c92:	4628      	mov	r0, r5
 8017c94:	f000 f839 	bl	8017d0a <dwt_read8bitoffsetreg>
 8017c98:	4284      	cmp	r4, r0
 8017c9a:	d0c8      	beq.n	8017c2e <dwt_xfer3xxx+0x84>
 8017c9c:	68eb      	ldr	r3, [r5, #12]
 8017c9e:	2b00      	cmp	r3, #0
 8017ca0:	d0c5      	beq.n	8017c2e <dwt_xfer3xxx+0x84>
 8017ca2:	4798      	blx	r3
 8017ca4:	e7c3      	b.n	8017c2e <dwt_xfer3xxx+0x84>

08017ca6 <dwt_readfromdevice>:
 8017ca6:	b510      	push	{r4, lr}
 8017ca8:	b082      	sub	sp, #8
 8017caa:	2400      	movs	r4, #0
 8017cac:	9401      	str	r4, [sp, #4]
 8017cae:	9c04      	ldr	r4, [sp, #16]
 8017cb0:	9400      	str	r4, [sp, #0]
 8017cb2:	f7ff ff7a 	bl	8017baa <dwt_xfer3xxx>
 8017cb6:	b002      	add	sp, #8
 8017cb8:	bd10      	pop	{r4, pc}

08017cba <dwt_read32bitoffsetreg>:
 8017cba:	b500      	push	{lr}
 8017cbc:	b085      	sub	sp, #20
 8017cbe:	ab03      	add	r3, sp, #12
 8017cc0:	9300      	str	r3, [sp, #0]
 8017cc2:	2304      	movs	r3, #4
 8017cc4:	b292      	uxth	r2, r2
 8017cc6:	f7ff ffee 	bl	8017ca6 <dwt_readfromdevice>
 8017cca:	f10d 030f 	add.w	r3, sp, #15
 8017cce:	f10d 010b 	add.w	r1, sp, #11
 8017cd2:	2000      	movs	r0, #0
 8017cd4:	f813 2901 	ldrb.w	r2, [r3], #-1
 8017cd8:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 8017cdc:	428b      	cmp	r3, r1
 8017cde:	d1f9      	bne.n	8017cd4 <dwt_read32bitoffsetreg+0x1a>
 8017ce0:	b005      	add	sp, #20
 8017ce2:	f85d fb04 	ldr.w	pc, [sp], #4

08017ce6 <dwt_read16bitoffsetreg>:
 8017ce6:	b500      	push	{lr}
 8017ce8:	b085      	sub	sp, #20
 8017cea:	ab03      	add	r3, sp, #12
 8017cec:	9300      	str	r3, [sp, #0]
 8017cee:	2302      	movs	r3, #2
 8017cf0:	b292      	uxth	r2, r2
 8017cf2:	f7ff ffd8 	bl	8017ca6 <dwt_readfromdevice>
 8017cf6:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8017cfa:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8017cfe:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 8017d02:	b280      	uxth	r0, r0
 8017d04:	b005      	add	sp, #20
 8017d06:	f85d fb04 	ldr.w	pc, [sp], #4

08017d0a <dwt_read8bitoffsetreg>:
 8017d0a:	b500      	push	{lr}
 8017d0c:	b085      	sub	sp, #20
 8017d0e:	f10d 030f 	add.w	r3, sp, #15
 8017d12:	9300      	str	r3, [sp, #0]
 8017d14:	2301      	movs	r3, #1
 8017d16:	b292      	uxth	r2, r2
 8017d18:	f7ff ffc5 	bl	8017ca6 <dwt_readfromdevice>
 8017d1c:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8017d20:	b005      	add	sp, #20
 8017d22:	f85d fb04 	ldr.w	pc, [sp], #4

08017d26 <ull_readdiagnostics>:
 8017d26:	b530      	push	{r4, r5, lr}
 8017d28:	b0bd      	sub	sp, #244	; 0xf4
 8017d2a:	4605      	mov	r5, r0
 8017d2c:	460c      	mov	r4, r1
 8017d2e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8017d30:	7b9a      	ldrb	r2, [r3, #14]
 8017d32:	2a01      	cmp	r2, #1
 8017d34:	d01c      	beq.n	8017d70 <ull_readdiagnostics+0x4a>
 8017d36:	2a03      	cmp	r2, #3
 8017d38:	f040 81e8 	bne.w	801810c <ull_readdiagnostics+0x3e6>
 8017d3c:	7d9b      	ldrb	r3, [r3, #22]
 8017d3e:	f013 0f08 	tst.w	r3, #8
 8017d42:	d10c      	bne.n	8017d5e <ull_readdiagnostics+0x38>
 8017d44:	f013 0f04 	tst.w	r3, #4
 8017d48:	ab02      	add	r3, sp, #8
 8017d4a:	9300      	str	r3, [sp, #0]
 8017d4c:	bf14      	ite	ne
 8017d4e:	2338      	movne	r3, #56	; 0x38
 8017d50:	2320      	moveq	r3, #32
 8017d52:	2200      	movs	r2, #0
 8017d54:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8017d58:	f7ff ffa5 	bl	8017ca6 <dwt_readfromdevice>
 8017d5c:	e019      	b.n	8017d92 <ull_readdiagnostics+0x6c>
 8017d5e:	ab02      	add	r3, sp, #8
 8017d60:	9300      	str	r3, [sp, #0]
 8017d62:	23e8      	movs	r3, #232	; 0xe8
 8017d64:	2200      	movs	r2, #0
 8017d66:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8017d6a:	f7ff ff9c 	bl	8017ca6 <dwt_readfromdevice>
 8017d6e:	e010      	b.n	8017d92 <ull_readdiagnostics+0x6c>
 8017d70:	7d9b      	ldrb	r3, [r3, #22]
 8017d72:	f013 0f08 	tst.w	r3, #8
 8017d76:	f040 81c0 	bne.w	80180fa <ull_readdiagnostics+0x3d4>
 8017d7a:	f013 0f04 	tst.w	r3, #4
 8017d7e:	ab02      	add	r3, sp, #8
 8017d80:	9300      	str	r3, [sp, #0]
 8017d82:	bf14      	ite	ne
 8017d84:	2338      	movne	r3, #56	; 0x38
 8017d86:	2320      	moveq	r3, #32
 8017d88:	2200      	movs	r2, #0
 8017d8a:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 8017d8e:	f7ff ff8a 	bl	8017ca6 <dwt_readfromdevice>
 8017d92:	f10d 0217 	add.w	r2, sp, #23
 8017d96:	f104 031a 	add.w	r3, r4, #26
 8017d9a:	f104 0020 	add.w	r0, r4, #32
 8017d9e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8017da2:	f803 1b01 	strb.w	r1, [r3], #1
 8017da6:	4283      	cmp	r3, r0
 8017da8:	d1f9      	bne.n	8017d9e <ull_readdiagnostics+0x78>
 8017daa:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8017dae:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8017db2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8017db6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017dba:	8463      	strh	r3, [r4, #34]	; 0x22
 8017dbc:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8017dc0:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8017dc4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8017dc8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8017dcc:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8017dd0:	bf1c      	itt	ne
 8017dd2:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 8017dd6:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 8017dda:	8423      	strh	r3, [r4, #32]
 8017ddc:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 8017de0:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8017de4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8017de8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017dec:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8017dee:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8017df0:	7d9b      	ldrb	r3, [r3, #22]
 8017df2:	f013 0f02 	tst.w	r3, #2
 8017df6:	f040 817e 	bne.w	80180f6 <ull_readdiagnostics+0x3d0>
 8017dfa:	aa0a      	add	r2, sp, #40	; 0x28
 8017dfc:	1e63      	subs	r3, r4, #1
 8017dfe:	1d20      	adds	r0, r4, #4
 8017e00:	f812 1b01 	ldrb.w	r1, [r2], #1
 8017e04:	f803 1f01 	strb.w	r1, [r3, #1]!
 8017e08:	79d1      	ldrb	r1, [r2, #7]
 8017e0a:	7219      	strb	r1, [r3, #8]
 8017e0c:	7bd1      	ldrb	r1, [r2, #15]
 8017e0e:	7459      	strb	r1, [r3, #17]
 8017e10:	4283      	cmp	r3, r0
 8017e12:	d1f5      	bne.n	8017e00 <ull_readdiagnostics+0xda>
 8017e14:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8017e18:	7163      	strb	r3, [r4, #5]
 8017e1a:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 8017e1e:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 8017e22:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8017e26:	80e3      	strh	r3, [r4, #6]
 8017e28:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 8017e2c:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 8017e30:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8017e34:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 8017e38:	f8a4 300d 	strh.w	r3, [r4, #13]
 8017e3c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 8017e40:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8017e44:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8017e48:	f8a4 300f 	strh.w	r3, [r4, #15]
 8017e4c:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 8017e50:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 8017e54:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8017e58:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 8017e5c:	82e3      	strh	r3, [r4, #22]
 8017e5e:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
 8017e62:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8017e66:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8017e6a:	8323      	strh	r3, [r4, #24]
 8017e6c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8017e6e:	7d9b      	ldrb	r3, [r3, #22]
 8017e70:	f013 0f04 	tst.w	r3, #4
 8017e74:	f040 813f 	bne.w	80180f6 <ull_readdiagnostics+0x3d0>
 8017e78:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 8017e7c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8017e80:	041b      	lsls	r3, r3, #16
 8017e82:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8017e86:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8017e8a:	4313      	orrs	r3, r2
 8017e8c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8017e90:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8017e94:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8017e98:	6263      	str	r3, [r4, #36]	; 0x24
 8017e9a:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
 8017e9e:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
 8017ea2:	041b      	lsls	r3, r3, #16
 8017ea4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8017ea8:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8017eac:	4313      	orrs	r3, r2
 8017eae:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
 8017eb2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8017eb6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017eba:	62a3      	str	r3, [r4, #40]	; 0x28
 8017ebc:	f89d 204b 	ldrb.w	r2, [sp, #75]	; 0x4b
 8017ec0:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 8017ec4:	041b      	lsls	r3, r3, #16
 8017ec6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8017eca:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8017ece:	4313      	orrs	r3, r2
 8017ed0:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 8017ed4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8017ed8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017edc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017ede:	f89d 204f 	ldrb.w	r2, [sp, #79]	; 0x4f
 8017ee2:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
 8017ee6:	041b      	lsls	r3, r3, #16
 8017ee8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8017eec:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 8017ef0:	4313      	orrs	r3, r2
 8017ef2:	f89d 204d 	ldrb.w	r2, [sp, #77]	; 0x4d
 8017ef6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8017efa:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8017efe:	6323      	str	r3, [r4, #48]	; 0x30
 8017f00:	f89d 2053 	ldrb.w	r2, [sp, #83]	; 0x53
 8017f04:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
 8017f08:	041b      	lsls	r3, r3, #16
 8017f0a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8017f0e:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8017f12:	4313      	orrs	r3, r2
 8017f14:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 8017f18:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8017f1c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8017f20:	6363      	str	r3, [r4, #52]	; 0x34
 8017f22:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
 8017f26:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
 8017f2a:	041b      	lsls	r3, r3, #16
 8017f2c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8017f30:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 8017f34:	4313      	orrs	r3, r2
 8017f36:	f89d 2055 	ldrb.w	r2, [sp, #85]	; 0x55
 8017f3a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8017f3e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8017f42:	63a3      	str	r3, [r4, #56]	; 0x38
 8017f44:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 8017f48:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8017f4c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8017f50:	87a3      	strh	r3, [r4, #60]	; 0x3c
 8017f52:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 8017f56:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 8017f5a:	041b      	lsls	r3, r3, #16
 8017f5c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8017f60:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 8017f64:	4313      	orrs	r3, r2
 8017f66:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 8017f6a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8017f6e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8017f72:	6423      	str	r3, [r4, #64]	; 0x40
 8017f74:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
 8017f78:	f89d 307a 	ldrb.w	r3, [sp, #122]	; 0x7a
 8017f7c:	041b      	lsls	r3, r3, #16
 8017f7e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8017f82:	f89d 2078 	ldrb.w	r2, [sp, #120]	; 0x78
 8017f86:	4313      	orrs	r3, r2
 8017f88:	f89d 2079 	ldrb.w	r2, [sp, #121]	; 0x79
 8017f8c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8017f90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017f94:	6463      	str	r3, [r4, #68]	; 0x44
 8017f96:	f89d 207f 	ldrb.w	r2, [sp, #127]	; 0x7f
 8017f9a:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
 8017f9e:	041b      	lsls	r3, r3, #16
 8017fa0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8017fa4:	f89d 207c 	ldrb.w	r2, [sp, #124]	; 0x7c
 8017fa8:	4313      	orrs	r3, r2
 8017faa:	f89d 207d 	ldrb.w	r2, [sp, #125]	; 0x7d
 8017fae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8017fb2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8017fb6:	64a3      	str	r3, [r4, #72]	; 0x48
 8017fb8:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
 8017fbc:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
 8017fc0:	041b      	lsls	r3, r3, #16
 8017fc2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8017fc6:	f89d 2080 	ldrb.w	r2, [sp, #128]	; 0x80
 8017fca:	4313      	orrs	r3, r2
 8017fcc:	f89d 2081 	ldrb.w	r2, [sp, #129]	; 0x81
 8017fd0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8017fd4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8017fd8:	64e3      	str	r3, [r4, #76]	; 0x4c
 8017fda:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
 8017fde:	f89d 3086 	ldrb.w	r3, [sp, #134]	; 0x86
 8017fe2:	041b      	lsls	r3, r3, #16
 8017fe4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8017fe8:	f89d 2084 	ldrb.w	r2, [sp, #132]	; 0x84
 8017fec:	4313      	orrs	r3, r2
 8017fee:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 8017ff2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8017ff6:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8017ffa:	6523      	str	r3, [r4, #80]	; 0x50
 8017ffc:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 8018000:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 8018004:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8018008:	f3c3 030e 	ubfx	r3, r3, #0, #15
 801800c:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 8018010:	f89d 20a5 	ldrb.w	r2, [sp, #165]	; 0xa5
 8018014:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8018018:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801801c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8018020:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8018024:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 8018028:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 801802c:	041b      	lsls	r3, r3, #16
 801802e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8018032:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 8018036:	4313      	orrs	r3, r2
 8018038:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 801803c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8018040:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8018044:	65a3      	str	r3, [r4, #88]	; 0x58
 8018046:	f89d 20c3 	ldrb.w	r2, [sp, #195]	; 0xc3
 801804a:	f89d 30c2 	ldrb.w	r3, [sp, #194]	; 0xc2
 801804e:	041b      	lsls	r3, r3, #16
 8018050:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8018054:	f89d 20c0 	ldrb.w	r2, [sp, #192]	; 0xc0
 8018058:	4313      	orrs	r3, r2
 801805a:	f89d 20c1 	ldrb.w	r2, [sp, #193]	; 0xc1
 801805e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8018062:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018066:	65e3      	str	r3, [r4, #92]	; 0x5c
 8018068:	f89d 20c7 	ldrb.w	r2, [sp, #199]	; 0xc7
 801806c:	f89d 30c6 	ldrb.w	r3, [sp, #198]	; 0xc6
 8018070:	041b      	lsls	r3, r3, #16
 8018072:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8018076:	f89d 20c4 	ldrb.w	r2, [sp, #196]	; 0xc4
 801807a:	4313      	orrs	r3, r2
 801807c:	f89d 20c5 	ldrb.w	r2, [sp, #197]	; 0xc5
 8018080:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8018084:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8018088:	6623      	str	r3, [r4, #96]	; 0x60
 801808a:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
 801808e:	f89d 30ca 	ldrb.w	r3, [sp, #202]	; 0xca
 8018092:	041b      	lsls	r3, r3, #16
 8018094:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8018098:	f89d 20c8 	ldrb.w	r2, [sp, #200]	; 0xc8
 801809c:	4313      	orrs	r3, r2
 801809e:	f89d 20c9 	ldrb.w	r2, [sp, #201]	; 0xc9
 80180a2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80180a6:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80180aa:	6663      	str	r3, [r4, #100]	; 0x64
 80180ac:	f89d 20cf 	ldrb.w	r2, [sp, #207]	; 0xcf
 80180b0:	f89d 30ce 	ldrb.w	r3, [sp, #206]	; 0xce
 80180b4:	041b      	lsls	r3, r3, #16
 80180b6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80180ba:	f89d 20cc 	ldrb.w	r2, [sp, #204]	; 0xcc
 80180be:	4313      	orrs	r3, r2
 80180c0:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 80180c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80180c8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80180cc:	66a3      	str	r3, [r4, #104]	; 0x68
 80180ce:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 80180d2:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 80180d6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80180da:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80180de:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 80180e2:	f89d 20ed 	ldrb.w	r2, [sp, #237]	; 0xed
 80180e6:	f89d 30ec 	ldrb.w	r3, [sp, #236]	; 0xec
 80180ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80180ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80180f2:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 80180f6:	b03d      	add	sp, #244	; 0xf4
 80180f8:	bd30      	pop	{r4, r5, pc}
 80180fa:	ab02      	add	r3, sp, #8
 80180fc:	9300      	str	r3, [sp, #0]
 80180fe:	23e8      	movs	r3, #232	; 0xe8
 8018100:	2200      	movs	r2, #0
 8018102:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 8018106:	f7ff fdce 	bl	8017ca6 <dwt_readfromdevice>
 801810a:	e642      	b.n	8017d92 <ull_readdiagnostics+0x6c>
 801810c:	7d9b      	ldrb	r3, [r3, #22]
 801810e:	f013 0f01 	tst.w	r3, #1
 8018112:	f000 81b3 	beq.w	801847c <ull_readdiagnostics+0x756>
 8018116:	ab02      	add	r3, sp, #8
 8018118:	9300      	str	r3, [sp, #0]
 801811a:	236c      	movs	r3, #108	; 0x6c
 801811c:	2200      	movs	r2, #0
 801811e:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 8018122:	f7ff fdc0 	bl	8017ca6 <dwt_readfromdevice>
 8018126:	ab1d      	add	r3, sp, #116	; 0x74
 8018128:	9300      	str	r3, [sp, #0]
 801812a:	236c      	movs	r3, #108	; 0x6c
 801812c:	2200      	movs	r2, #0
 801812e:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 8018132:	4628      	mov	r0, r5
 8018134:	f7ff fdb7 	bl	8017ca6 <dwt_readfromdevice>
 8018138:	aa02      	add	r2, sp, #8
 801813a:	1e63      	subs	r3, r4, #1
 801813c:	1d20      	adds	r0, r4, #4
 801813e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8018142:	f803 1f01 	strb.w	r1, [r3, #1]!
 8018146:	79d1      	ldrb	r1, [r2, #7]
 8018148:	7219      	strb	r1, [r3, #8]
 801814a:	7bd1      	ldrb	r1, [r2, #15]
 801814c:	7459      	strb	r1, [r3, #17]
 801814e:	7dd1      	ldrb	r1, [r2, #23]
 8018150:	7699      	strb	r1, [r3, #26]
 8018152:	4283      	cmp	r3, r0
 8018154:	d1f3      	bne.n	801813e <ull_readdiagnostics+0x418>
 8018156:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 801815a:	77e3      	strb	r3, [r4, #31]
 801815c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8018160:	7163      	strb	r3, [r4, #5]
 8018162:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8018166:	f89d 300d 	ldrb.w	r3, [sp, #13]
 801816a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801816e:	80e3      	strh	r3, [r4, #6]
 8018170:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8018174:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8018178:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 801817c:	f3c2 12cf 	ubfx	r2, r2, #7, #16
 8018180:	f8a4 200d 	strh.w	r2, [r4, #13]
 8018184:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8018188:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 801818c:	f8a4 200f 	strh.w	r2, [r4, #15]
 8018190:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8018194:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8018198:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 801819c:	82e3      	strh	r3, [r4, #22]
 801819e:	f89d 201e 	ldrb.w	r2, [sp, #30]
 80181a2:	f89d 301d 	ldrb.w	r3, [sp, #29]
 80181a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80181aa:	8323      	strh	r3, [r4, #24]
 80181ac:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 80181b0:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 80181b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80181b8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80181bc:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80181c0:	bf1c      	itt	ne
 80181c2:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 80181c6:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 80181ca:	8423      	strh	r3, [r4, #32]
 80181cc:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 80181d0:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 80181d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80181d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80181dc:	8463      	strh	r3, [r4, #34]	; 0x22
 80181de:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 80181e2:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 80181e6:	041b      	lsls	r3, r3, #16
 80181e8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80181ec:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 80181f0:	4313      	orrs	r3, r2
 80181f2:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 80181f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80181fa:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80181fe:	6263      	str	r3, [r4, #36]	; 0x24
 8018200:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8018202:	7d9b      	ldrb	r3, [r3, #22]
 8018204:	f013 0f01 	tst.w	r3, #1
 8018208:	f43f af75 	beq.w	80180f6 <ull_readdiagnostics+0x3d0>
 801820c:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 8018210:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8018214:	041b      	lsls	r3, r3, #16
 8018216:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801821a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 801821e:	4313      	orrs	r3, r2
 8018220:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 8018224:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8018228:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801822c:	62a3      	str	r3, [r4, #40]	; 0x28
 801822e:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 8018232:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 8018236:	041b      	lsls	r3, r3, #16
 8018238:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801823c:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 8018240:	4313      	orrs	r3, r2
 8018242:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 8018246:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801824a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801824e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018250:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 8018254:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8018258:	041b      	lsls	r3, r3, #16
 801825a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801825e:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8018262:	4313      	orrs	r3, r2
 8018264:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8018268:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801826c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8018270:	6323      	str	r3, [r4, #48]	; 0x30
 8018272:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 8018276:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 801827a:	041b      	lsls	r3, r3, #16
 801827c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8018280:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 8018284:	4313      	orrs	r3, r2
 8018286:	f89d 203d 	ldrb.w	r2, [sp, #61]	; 0x3d
 801828a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801828e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8018292:	6363      	str	r3, [r4, #52]	; 0x34
 8018294:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 8018298:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 801829c:	041b      	lsls	r3, r3, #16
 801829e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80182a2:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 80182a6:	4313      	orrs	r3, r2
 80182a8:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 80182ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80182b0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80182b4:	63a3      	str	r3, [r4, #56]	; 0x38
 80182b6:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 80182ba:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80182be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80182c2:	87a3      	strh	r3, [r4, #60]	; 0x3c
 80182c4:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
 80182c8:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 80182cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80182d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80182d4:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80182d6:	f89d 2067 	ldrb.w	r2, [sp, #103]	; 0x67
 80182da:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
 80182de:	041b      	lsls	r3, r3, #16
 80182e0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80182e4:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80182e8:	4313      	orrs	r3, r2
 80182ea:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 80182ee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80182f2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80182f6:	6423      	str	r3, [r4, #64]	; 0x40
 80182f8:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
 80182fc:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
 8018300:	041b      	lsls	r3, r3, #16
 8018302:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8018306:	f89d 2068 	ldrb.w	r2, [sp, #104]	; 0x68
 801830a:	4313      	orrs	r3, r2
 801830c:	f89d 2069 	ldrb.w	r2, [sp, #105]	; 0x69
 8018310:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8018314:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018318:	6463      	str	r3, [r4, #68]	; 0x44
 801831a:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
 801831e:	f89d 306e 	ldrb.w	r3, [sp, #110]	; 0x6e
 8018322:	041b      	lsls	r3, r3, #16
 8018324:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8018328:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801832c:	4313      	orrs	r3, r2
 801832e:	f89d 206d 	ldrb.w	r2, [sp, #109]	; 0x6d
 8018332:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8018336:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801833a:	64a3      	str	r3, [r4, #72]	; 0x48
 801833c:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
 8018340:	f89d 3072 	ldrb.w	r3, [sp, #114]	; 0x72
 8018344:	041b      	lsls	r3, r3, #16
 8018346:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801834a:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
 801834e:	4313      	orrs	r3, r2
 8018350:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
 8018354:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8018358:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801835c:	64e3      	str	r3, [r4, #76]	; 0x4c
 801835e:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 8018362:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 8018366:	041b      	lsls	r3, r3, #16
 8018368:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801836c:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 8018370:	4313      	orrs	r3, r2
 8018372:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 8018376:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801837a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801837e:	6523      	str	r3, [r4, #80]	; 0x50
 8018380:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 8018384:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 8018388:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801838c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8018390:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 8018394:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 8018398:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 801839c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80183a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80183a4:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 80183a8:	f89d 20af 	ldrb.w	r2, [sp, #175]	; 0xaf
 80183ac:	f89d 30ae 	ldrb.w	r3, [sp, #174]	; 0xae
 80183b0:	041b      	lsls	r3, r3, #16
 80183b2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80183b6:	f89d 20ac 	ldrb.w	r2, [sp, #172]	; 0xac
 80183ba:	4313      	orrs	r3, r2
 80183bc:	f89d 20ad 	ldrb.w	r2, [sp, #173]	; 0xad
 80183c0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80183c4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80183c8:	65a3      	str	r3, [r4, #88]	; 0x58
 80183ca:	f89d 20b3 	ldrb.w	r2, [sp, #179]	; 0xb3
 80183ce:	f89d 30b2 	ldrb.w	r3, [sp, #178]	; 0xb2
 80183d2:	041b      	lsls	r3, r3, #16
 80183d4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80183d8:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
 80183dc:	4313      	orrs	r3, r2
 80183de:	f89d 20b1 	ldrb.w	r2, [sp, #177]	; 0xb1
 80183e2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80183e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80183ea:	65e3      	str	r3, [r4, #92]	; 0x5c
 80183ec:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
 80183f0:	f89d 30b6 	ldrb.w	r3, [sp, #182]	; 0xb6
 80183f4:	041b      	lsls	r3, r3, #16
 80183f6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80183fa:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 80183fe:	4313      	orrs	r3, r2
 8018400:	f89d 20b5 	ldrb.w	r2, [sp, #181]	; 0xb5
 8018404:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8018408:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801840c:	6623      	str	r3, [r4, #96]	; 0x60
 801840e:	f89d 20bb 	ldrb.w	r2, [sp, #187]	; 0xbb
 8018412:	f89d 30ba 	ldrb.w	r3, [sp, #186]	; 0xba
 8018416:	041b      	lsls	r3, r3, #16
 8018418:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801841c:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 8018420:	4313      	orrs	r3, r2
 8018422:	f89d 20b9 	ldrb.w	r2, [sp, #185]	; 0xb9
 8018426:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801842a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801842e:	6663      	str	r3, [r4, #100]	; 0x64
 8018430:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 8018434:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 8018438:	041b      	lsls	r3, r3, #16
 801843a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801843e:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 8018442:	4313      	orrs	r3, r2
 8018444:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 8018448:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801844c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8018450:	66a3      	str	r3, [r4, #104]	; 0x68
 8018452:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 8018456:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 801845a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801845e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8018462:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 8018466:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 801846a:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 801846e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8018472:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8018476:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 801847a:	e63c      	b.n	80180f6 <ull_readdiagnostics+0x3d0>
 801847c:	ab02      	add	r3, sp, #8
 801847e:	9300      	str	r3, [sp, #0]
 8018480:	2328      	movs	r3, #40	; 0x28
 8018482:	2200      	movs	r2, #0
 8018484:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 8018488:	f7ff fc0d 	bl	8017ca6 <dwt_readfromdevice>
 801848c:	e654      	b.n	8018138 <ull_readdiagnostics+0x412>
	...

08018490 <ull_readrxtimestamp>:
 8018490:	b500      	push	{lr}
 8018492:	b083      	sub	sp, #12
 8018494:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8018496:	7b9b      	ldrb	r3, [r3, #14]
 8018498:	2b01      	cmp	r3, #1
 801849a:	d00b      	beq.n	80184b4 <ull_readrxtimestamp+0x24>
 801849c:	2b03      	cmp	r3, #3
 801849e:	d110      	bne.n	80184c2 <ull_readrxtimestamp+0x32>
 80184a0:	9100      	str	r1, [sp, #0]
 80184a2:	2305      	movs	r3, #5
 80184a4:	2204      	movs	r2, #4
 80184a6:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 80184aa:	f7ff fbfc 	bl	8017ca6 <dwt_readfromdevice>
 80184ae:	b003      	add	sp, #12
 80184b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80184b4:	9100      	str	r1, [sp, #0]
 80184b6:	2305      	movs	r3, #5
 80184b8:	2200      	movs	r2, #0
 80184ba:	4905      	ldr	r1, [pc, #20]	; (80184d0 <ull_readrxtimestamp+0x40>)
 80184bc:	f7ff fbf3 	bl	8017ca6 <dwt_readfromdevice>
 80184c0:	e7f5      	b.n	80184ae <ull_readrxtimestamp+0x1e>
 80184c2:	9100      	str	r1, [sp, #0]
 80184c4:	2305      	movs	r3, #5
 80184c6:	2200      	movs	r2, #0
 80184c8:	2160      	movs	r1, #96	; 0x60
 80184ca:	f7ff fbec 	bl	8017ca6 <dwt_readfromdevice>
 80184ce:	e7ee      	b.n	80184ae <ull_readrxtimestamp+0x1e>
 80184d0:	00180004 	.word	0x00180004

080184d4 <dwt_writetodevice>:
 80184d4:	b510      	push	{r4, lr}
 80184d6:	b082      	sub	sp, #8
 80184d8:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 80184dc:	9401      	str	r4, [sp, #4]
 80184de:	9c04      	ldr	r4, [sp, #16]
 80184e0:	9400      	str	r4, [sp, #0]
 80184e2:	f7ff fb62 	bl	8017baa <dwt_xfer3xxx>
 80184e6:	b002      	add	sp, #8
 80184e8:	bd10      	pop	{r4, pc}

080184ea <dwt_write16bitoffsetreg>:
 80184ea:	b500      	push	{lr}
 80184ec:	b085      	sub	sp, #20
 80184ee:	f88d 300c 	strb.w	r3, [sp, #12]
 80184f2:	0a1b      	lsrs	r3, r3, #8
 80184f4:	f88d 300d 	strb.w	r3, [sp, #13]
 80184f8:	ab03      	add	r3, sp, #12
 80184fa:	9300      	str	r3, [sp, #0]
 80184fc:	2302      	movs	r3, #2
 80184fe:	b292      	uxth	r2, r2
 8018500:	f7ff ffe8 	bl	80184d4 <dwt_writetodevice>
 8018504:	b005      	add	sp, #20
 8018506:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801850c <ull_force_clocks>:
 801850c:	b508      	push	{r3, lr}
 801850e:	2901      	cmp	r1, #1
 8018510:	d002      	beq.n	8018518 <ull_force_clocks+0xc>
 8018512:	2905      	cmp	r1, #5
 8018514:	d007      	beq.n	8018526 <ull_force_clocks+0x1a>
 8018516:	bd08      	pop	{r3, pc}
 8018518:	f641 0322 	movw	r3, #6178	; 0x1822
 801851c:	2200      	movs	r2, #0
 801851e:	4905      	ldr	r1, [pc, #20]	; (8018534 <ull_force_clocks+0x28>)
 8018520:	f7ff ffe3 	bl	80184ea <dwt_write16bitoffsetreg>
 8018524:	e7f7      	b.n	8018516 <ull_force_clocks+0xa>
 8018526:	f44f 7300 	mov.w	r3, #512	; 0x200
 801852a:	2200      	movs	r2, #0
 801852c:	4901      	ldr	r1, [pc, #4]	; (8018534 <ull_force_clocks+0x28>)
 801852e:	f7ff ffdc 	bl	80184ea <dwt_write16bitoffsetreg>
 8018532:	e7f0      	b.n	8018516 <ull_force_clocks+0xa>
 8018534:	00110004 	.word	0x00110004

08018538 <__dwt_otp_write_wdata_id_reg>:
 8018538:	b538      	push	{r3, r4, r5, lr}
 801853a:	4605      	mov	r5, r0
 801853c:	460c      	mov	r4, r1
 801853e:	f441 7300 	orr.w	r3, r1, #512	; 0x200
 8018542:	b29b      	uxth	r3, r3
 8018544:	2200      	movs	r2, #0
 8018546:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 801854a:	f7ff ffce 	bl	80184ea <dwt_write16bitoffsetreg>
 801854e:	b2a3      	uxth	r3, r4
 8018550:	2200      	movs	r2, #0
 8018552:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8018556:	4628      	mov	r0, r5
 8018558:	f7ff ffc7 	bl	80184ea <dwt_write16bitoffsetreg>
 801855c:	bd38      	pop	{r3, r4, r5, pc}
	...

08018560 <_dwt_otpread>:
 8018560:	b570      	push	{r4, r5, r6, lr}
 8018562:	4604      	mov	r4, r0
 8018564:	460e      	mov	r6, r1
 8018566:	4d0c      	ldr	r5, [pc, #48]	; (8018598 <_dwt_otpread+0x38>)
 8018568:	2301      	movs	r3, #1
 801856a:	2200      	movs	r2, #0
 801856c:	4629      	mov	r1, r5
 801856e:	f7ff ffbc 	bl	80184ea <dwt_write16bitoffsetreg>
 8018572:	4633      	mov	r3, r6
 8018574:	2200      	movs	r2, #0
 8018576:	4909      	ldr	r1, [pc, #36]	; (801859c <_dwt_otpread+0x3c>)
 8018578:	4620      	mov	r0, r4
 801857a:	f7ff ffb6 	bl	80184ea <dwt_write16bitoffsetreg>
 801857e:	2302      	movs	r3, #2
 8018580:	2200      	movs	r2, #0
 8018582:	4629      	mov	r1, r5
 8018584:	4620      	mov	r0, r4
 8018586:	f7ff ffb0 	bl	80184ea <dwt_write16bitoffsetreg>
 801858a:	2200      	movs	r2, #0
 801858c:	4904      	ldr	r1, [pc, #16]	; (80185a0 <_dwt_otpread+0x40>)
 801858e:	4620      	mov	r0, r4
 8018590:	f7ff fb93 	bl	8017cba <dwt_read32bitoffsetreg>
 8018594:	bd70      	pop	{r4, r5, r6, pc}
 8018596:	bf00      	nop
 8018598:	000b0008 	.word	0x000b0008
 801859c:	000b0004 	.word	0x000b0004
 80185a0:	000b0010 	.word	0x000b0010

080185a4 <dwt_write32bitoffsetreg>:
 80185a4:	b510      	push	{r4, lr}
 80185a6:	b084      	sub	sp, #16
 80185a8:	f88d 300c 	strb.w	r3, [sp, #12]
 80185ac:	0a1c      	lsrs	r4, r3, #8
 80185ae:	f88d 400d 	strb.w	r4, [sp, #13]
 80185b2:	0c1c      	lsrs	r4, r3, #16
 80185b4:	f88d 400e 	strb.w	r4, [sp, #14]
 80185b8:	0e1b      	lsrs	r3, r3, #24
 80185ba:	f88d 300f 	strb.w	r3, [sp, #15]
 80185be:	ab03      	add	r3, sp, #12
 80185c0:	9300      	str	r3, [sp, #0]
 80185c2:	2304      	movs	r3, #4
 80185c4:	b292      	uxth	r2, r2
 80185c6:	f7ff ff85 	bl	80184d4 <dwt_writetodevice>
 80185ca:	b004      	add	sp, #16
 80185cc:	bd10      	pop	{r4, pc}

080185ce <_dwt_adjust_delaytime>:
 80185ce:	b538      	push	{r3, r4, r5, lr}
 80185d0:	4604      	mov	r4, r0
 80185d2:	b989      	cbnz	r1, 80185f8 <_dwt_adjust_delaytime+0x2a>
 80185d4:	2200      	movs	r2, #0
 80185d6:	2128      	movs	r1, #40	; 0x28
 80185d8:	f7ff fb6f 	bl	8017cba <dwt_read32bitoffsetreg>
 80185dc:	4605      	mov	r5, r0
 80185de:	2201      	movs	r2, #1
 80185e0:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 80185e4:	4620      	mov	r0, r4
 80185e6:	f7ff fb90 	bl	8017d0a <dwt_read8bitoffsetreg>
 80185ea:	1a2b      	subs	r3, r5, r0
 80185ec:	2200      	movs	r2, #0
 80185ee:	2128      	movs	r1, #40	; 0x28
 80185f0:	4620      	mov	r0, r4
 80185f2:	f7ff ffd7 	bl	80185a4 <dwt_write32bitoffsetreg>
 80185f6:	bd38      	pop	{r3, r4, r5, pc}
 80185f8:	2200      	movs	r2, #0
 80185fa:	2128      	movs	r1, #40	; 0x28
 80185fc:	f7ff fb5d 	bl	8017cba <dwt_read32bitoffsetreg>
 8018600:	4605      	mov	r5, r0
 8018602:	2201      	movs	r2, #1
 8018604:	217c      	movs	r1, #124	; 0x7c
 8018606:	4620      	mov	r0, r4
 8018608:	f7ff fb7f 	bl	8017d0a <dwt_read8bitoffsetreg>
 801860c:	1a2b      	subs	r3, r5, r0
 801860e:	2200      	movs	r2, #0
 8018610:	2128      	movs	r1, #40	; 0x28
 8018612:	4620      	mov	r0, r4
 8018614:	f7ff ffc6 	bl	80185a4 <dwt_write32bitoffsetreg>
 8018618:	e7ed      	b.n	80185f6 <_dwt_adjust_delaytime+0x28>

0801861a <ull_setrxaftertxdelay>:
 801861a:	b538      	push	{r3, r4, r5, lr}
 801861c:	4605      	mov	r5, r0
 801861e:	460c      	mov	r4, r1
 8018620:	2200      	movs	r2, #0
 8018622:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8018626:	f7ff fb48 	bl	8017cba <dwt_read32bitoffsetreg>
 801862a:	0d00      	lsrs	r0, r0, #20
 801862c:	0500      	lsls	r0, r0, #20
 801862e:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8018632:	4303      	orrs	r3, r0
 8018634:	2200      	movs	r2, #0
 8018636:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 801863a:	4628      	mov	r0, r5
 801863c:	f7ff ffb2 	bl	80185a4 <dwt_write32bitoffsetreg>
 8018640:	bd38      	pop	{r3, r4, r5, pc}

08018642 <ull_setlnapamode>:
 8018642:	b538      	push	{r3, r4, r5, lr}
 8018644:	4605      	mov	r5, r0
 8018646:	460c      	mov	r4, r1
 8018648:	2200      	movs	r2, #0
 801864a:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801864e:	f7ff fb34 	bl	8017cba <dwt_read32bitoffsetreg>
 8018652:	f420 337c 	bic.w	r3, r0, #258048	; 0x3f000
 8018656:	f014 0f01 	tst.w	r4, #1
 801865a:	bf18      	it	ne
 801865c:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
 8018660:	f014 0f02 	tst.w	r4, #2
 8018664:	bf18      	it	ne
 8018666:	f443 5300 	orrne.w	r3, r3, #8192	; 0x2000
 801866a:	f014 0f04 	tst.w	r4, #4
 801866e:	bf18      	it	ne
 8018670:	f443 3390 	orrne.w	r3, r3, #73728	; 0x12000
 8018674:	2200      	movs	r2, #0
 8018676:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801867a:	4628      	mov	r0, r5
 801867c:	f7ff ff92 	bl	80185a4 <dwt_write32bitoffsetreg>
 8018680:	bd38      	pop	{r3, r4, r5, pc}
	...

08018684 <ull_configurestskey>:
 8018684:	b538      	push	{r3, r4, r5, lr}
 8018686:	4605      	mov	r5, r0
 8018688:	460c      	mov	r4, r1
 801868a:	680b      	ldr	r3, [r1, #0]
 801868c:	2200      	movs	r2, #0
 801868e:	490b      	ldr	r1, [pc, #44]	; (80186bc <ull_configurestskey+0x38>)
 8018690:	f7ff ff88 	bl	80185a4 <dwt_write32bitoffsetreg>
 8018694:	6863      	ldr	r3, [r4, #4]
 8018696:	2200      	movs	r2, #0
 8018698:	4909      	ldr	r1, [pc, #36]	; (80186c0 <ull_configurestskey+0x3c>)
 801869a:	4628      	mov	r0, r5
 801869c:	f7ff ff82 	bl	80185a4 <dwt_write32bitoffsetreg>
 80186a0:	68a3      	ldr	r3, [r4, #8]
 80186a2:	2200      	movs	r2, #0
 80186a4:	4907      	ldr	r1, [pc, #28]	; (80186c4 <ull_configurestskey+0x40>)
 80186a6:	4628      	mov	r0, r5
 80186a8:	f7ff ff7c 	bl	80185a4 <dwt_write32bitoffsetreg>
 80186ac:	68e3      	ldr	r3, [r4, #12]
 80186ae:	2200      	movs	r2, #0
 80186b0:	4905      	ldr	r1, [pc, #20]	; (80186c8 <ull_configurestskey+0x44>)
 80186b2:	4628      	mov	r0, r5
 80186b4:	f7ff ff76 	bl	80185a4 <dwt_write32bitoffsetreg>
 80186b8:	bd38      	pop	{r3, r4, r5, pc}
 80186ba:	bf00      	nop
 80186bc:	0002000c 	.word	0x0002000c
 80186c0:	00020010 	.word	0x00020010
 80186c4:	00020014 	.word	0x00020014
 80186c8:	00020018 	.word	0x00020018

080186cc <ull_configurestsiv>:
 80186cc:	b538      	push	{r3, r4, r5, lr}
 80186ce:	4605      	mov	r5, r0
 80186d0:	460c      	mov	r4, r1
 80186d2:	680b      	ldr	r3, [r1, #0]
 80186d4:	2200      	movs	r2, #0
 80186d6:	490b      	ldr	r1, [pc, #44]	; (8018704 <ull_configurestsiv+0x38>)
 80186d8:	f7ff ff64 	bl	80185a4 <dwt_write32bitoffsetreg>
 80186dc:	6863      	ldr	r3, [r4, #4]
 80186de:	2200      	movs	r2, #0
 80186e0:	4909      	ldr	r1, [pc, #36]	; (8018708 <ull_configurestsiv+0x3c>)
 80186e2:	4628      	mov	r0, r5
 80186e4:	f7ff ff5e 	bl	80185a4 <dwt_write32bitoffsetreg>
 80186e8:	68a3      	ldr	r3, [r4, #8]
 80186ea:	2200      	movs	r2, #0
 80186ec:	4907      	ldr	r1, [pc, #28]	; (801870c <ull_configurestsiv+0x40>)
 80186ee:	4628      	mov	r0, r5
 80186f0:	f7ff ff58 	bl	80185a4 <dwt_write32bitoffsetreg>
 80186f4:	68e3      	ldr	r3, [r4, #12]
 80186f6:	2200      	movs	r2, #0
 80186f8:	4905      	ldr	r1, [pc, #20]	; (8018710 <ull_configurestsiv+0x44>)
 80186fa:	4628      	mov	r0, r5
 80186fc:	f7ff ff52 	bl	80185a4 <dwt_write32bitoffsetreg>
 8018700:	bd38      	pop	{r3, r4, r5, pc}
 8018702:	bf00      	nop
 8018704:	0002001c 	.word	0x0002001c
 8018708:	00020020 	.word	0x00020020
 801870c:	00020024 	.word	0x00020024
 8018710:	00020028 	.word	0x00020028

08018714 <ull_configmrxlut>:
 8018714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018718:	4604      	mov	r4, r0
 801871a:	2905      	cmp	r1, #5
 801871c:	d03a      	beq.n	8018794 <ull_configmrxlut+0x80>
 801871e:	4d23      	ldr	r5, [pc, #140]	; (80187ac <ull_configmrxlut+0x98>)
 8018720:	462e      	mov	r6, r5
 8018722:	4f23      	ldr	r7, [pc, #140]	; (80187b0 <ull_configmrxlut+0x9c>)
 8018724:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 80187ec <ull_configmrxlut+0xd8>
 8018728:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 80187f0 <ull_configmrxlut+0xdc>
 801872c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80187f4 <ull_configmrxlut+0xe0>
 8018730:	4b20      	ldr	r3, [pc, #128]	; (80187b4 <ull_configmrxlut+0xa0>)
 8018732:	2200      	movs	r2, #0
 8018734:	4920      	ldr	r1, [pc, #128]	; (80187b8 <ull_configmrxlut+0xa4>)
 8018736:	4620      	mov	r0, r4
 8018738:	f7ff ff34 	bl	80185a4 <dwt_write32bitoffsetreg>
 801873c:	4653      	mov	r3, sl
 801873e:	2200      	movs	r2, #0
 8018740:	491e      	ldr	r1, [pc, #120]	; (80187bc <ull_configmrxlut+0xa8>)
 8018742:	4620      	mov	r0, r4
 8018744:	f7ff ff2e 	bl	80185a4 <dwt_write32bitoffsetreg>
 8018748:	464b      	mov	r3, r9
 801874a:	2200      	movs	r2, #0
 801874c:	491c      	ldr	r1, [pc, #112]	; (80187c0 <ull_configmrxlut+0xac>)
 801874e:	4620      	mov	r0, r4
 8018750:	f7ff ff28 	bl	80185a4 <dwt_write32bitoffsetreg>
 8018754:	4643      	mov	r3, r8
 8018756:	2200      	movs	r2, #0
 8018758:	491a      	ldr	r1, [pc, #104]	; (80187c4 <ull_configmrxlut+0xb0>)
 801875a:	4620      	mov	r0, r4
 801875c:	f7ff ff22 	bl	80185a4 <dwt_write32bitoffsetreg>
 8018760:	463b      	mov	r3, r7
 8018762:	2200      	movs	r2, #0
 8018764:	4918      	ldr	r1, [pc, #96]	; (80187c8 <ull_configmrxlut+0xb4>)
 8018766:	4620      	mov	r0, r4
 8018768:	f7ff ff1c 	bl	80185a4 <dwt_write32bitoffsetreg>
 801876c:	4633      	mov	r3, r6
 801876e:	2200      	movs	r2, #0
 8018770:	4916      	ldr	r1, [pc, #88]	; (80187cc <ull_configmrxlut+0xb8>)
 8018772:	4620      	mov	r0, r4
 8018774:	f7ff ff16 	bl	80185a4 <dwt_write32bitoffsetreg>
 8018778:	462b      	mov	r3, r5
 801877a:	2200      	movs	r2, #0
 801877c:	4914      	ldr	r1, [pc, #80]	; (80187d0 <ull_configmrxlut+0xbc>)
 801877e:	4620      	mov	r0, r4
 8018780:	f7ff ff10 	bl	80185a4 <dwt_write32bitoffsetreg>
 8018784:	4b13      	ldr	r3, [pc, #76]	; (80187d4 <ull_configmrxlut+0xc0>)
 8018786:	2200      	movs	r2, #0
 8018788:	4913      	ldr	r1, [pc, #76]	; (80187d8 <ull_configmrxlut+0xc4>)
 801878a:	4620      	mov	r0, r4
 801878c:	f7ff ff0a 	bl	80185a4 <dwt_write32bitoffsetreg>
 8018790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018794:	4d11      	ldr	r5, [pc, #68]	; (80187dc <ull_configmrxlut+0xc8>)
 8018796:	4e12      	ldr	r6, [pc, #72]	; (80187e0 <ull_configmrxlut+0xcc>)
 8018798:	4f12      	ldr	r7, [pc, #72]	; (80187e4 <ull_configmrxlut+0xd0>)
 801879a:	f8df 805c 	ldr.w	r8, [pc, #92]	; 80187f8 <ull_configmrxlut+0xe4>
 801879e:	f8df 905c 	ldr.w	r9, [pc, #92]	; 80187fc <ull_configmrxlut+0xe8>
 80187a2:	f8df a05c 	ldr.w	sl, [pc, #92]	; 8018800 <ull_configmrxlut+0xec>
 80187a6:	4b10      	ldr	r3, [pc, #64]	; (80187e8 <ull_configmrxlut+0xd4>)
 80187a8:	e7c3      	b.n	8018732 <ull_configmrxlut+0x1e>
 80187aa:	bf00      	nop
 80187ac:	0002afb5 	.word	0x0002afb5
 80187b0:	0002af7d 	.word	0x0002af7d
 80187b4:	0002a8fe 	.word	0x0002a8fe
 80187b8:	00030038 	.word	0x00030038
 80187bc:	0003003c 	.word	0x0003003c
 80187c0:	00030040 	.word	0x00030040
 80187c4:	00030044 	.word	0x00030044
 80187c8:	00030048 	.word	0x00030048
 80187cc:	0003004c 	.word	0x0003004c
 80187d0:	00030050 	.word	0x00030050
 80187d4:	10000240 	.word	0x10000240
 80187d8:	0003001c 	.word	0x0003001c
 80187dc:	0001cff5 	.word	0x0001cff5
 80187e0:	0001cfb5 	.word	0x0001cfb5
 80187e4:	0001cf36 	.word	0x0001cf36
 80187e8:	0001c0fd 	.word	0x0001c0fd
 80187ec:	0002af3e 	.word	0x0002af3e
 80187f0:	0002a5fe 	.word	0x0002a5fe
 80187f4:	0002ac36 	.word	0x0002ac36
 80187f8:	0001c77e 	.word	0x0001c77e
 80187fc:	0001c6be 	.word	0x0001c6be
 8018800:	0001c43e 	.word	0x0001c43e

08018804 <ull_disable_rftx_blocks>:
 8018804:	b508      	push	{r3, lr}
 8018806:	2300      	movs	r3, #0
 8018808:	461a      	mov	r2, r3
 801880a:	4902      	ldr	r1, [pc, #8]	; (8018814 <ull_disable_rftx_blocks+0x10>)
 801880c:	f7ff feca 	bl	80185a4 <dwt_write32bitoffsetreg>
 8018810:	bd08      	pop	{r3, pc}
 8018812:	bf00      	nop
 8018814:	00070004 	.word	0x00070004

08018818 <ull_disable_rf_tx>:
 8018818:	b538      	push	{r3, r4, r5, lr}
 801881a:	4604      	mov	r4, r0
 801881c:	460d      	mov	r5, r1
 801881e:	2300      	movs	r3, #0
 8018820:	461a      	mov	r2, r3
 8018822:	490a      	ldr	r1, [pc, #40]	; (801884c <ull_disable_rf_tx+0x34>)
 8018824:	f7ff febe 	bl	80185a4 <dwt_write32bitoffsetreg>
 8018828:	2300      	movs	r3, #0
 801882a:	461a      	mov	r2, r3
 801882c:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 8018830:	4620      	mov	r0, r4
 8018832:	f7ff feb7 	bl	80185a4 <dwt_write32bitoffsetreg>
 8018836:	b905      	cbnz	r5, 801883a <ull_disable_rf_tx+0x22>
 8018838:	bd38      	pop	{r3, r4, r5, pc}
 801883a:	f04f 53e0 	mov.w	r3, #469762048	; 0x1c000000
 801883e:	2200      	movs	r2, #0
 8018840:	4903      	ldr	r1, [pc, #12]	; (8018850 <ull_disable_rf_tx+0x38>)
 8018842:	4620      	mov	r0, r4
 8018844:	f7ff feae 	bl	80185a4 <dwt_write32bitoffsetreg>
 8018848:	e7f6      	b.n	8018838 <ull_disable_rf_tx+0x20>
 801884a:	bf00      	nop
 801884c:	00070048 	.word	0x00070048
 8018850:	00070014 	.word	0x00070014

08018854 <ull_readrxdata>:
 8018854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018856:	b083      	sub	sp, #12
 8018858:	6d04      	ldr	r4, [r0, #80]	; 0x50
 801885a:	7ba4      	ldrb	r4, [r4, #14]
 801885c:	2c03      	cmp	r4, #3
 801885e:	bf0c      	ite	eq
 8018860:	f44f 1c98 	moveq.w	ip, #1245184	; 0x130000
 8018864:	f44f 1c90 	movne.w	ip, #1179648	; 0x120000
 8018868:	189c      	adds	r4, r3, r2
 801886a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 801886e:	da19      	bge.n	80188a4 <ull_readrxdata+0x50>
 8018870:	461d      	mov	r5, r3
 8018872:	4616      	mov	r6, r2
 8018874:	460f      	mov	r7, r1
 8018876:	4604      	mov	r4, r0
 8018878:	2b7f      	cmp	r3, #127	; 0x7f
 801887a:	d915      	bls.n	80188a8 <ull_readrxdata+0x54>
 801887c:	ea4f 431c 	mov.w	r3, ip, lsr #16
 8018880:	2200      	movs	r2, #0
 8018882:	490d      	ldr	r1, [pc, #52]	; (80188b8 <ull_readrxdata+0x64>)
 8018884:	f7ff fe8e 	bl	80185a4 <dwt_write32bitoffsetreg>
 8018888:	462b      	mov	r3, r5
 801888a:	2200      	movs	r2, #0
 801888c:	490b      	ldr	r1, [pc, #44]	; (80188bc <ull_readrxdata+0x68>)
 801888e:	4620      	mov	r0, r4
 8018890:	f7ff fe88 	bl	80185a4 <dwt_write32bitoffsetreg>
 8018894:	9700      	str	r7, [sp, #0]
 8018896:	4633      	mov	r3, r6
 8018898:	2200      	movs	r2, #0
 801889a:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 801889e:	4620      	mov	r0, r4
 80188a0:	f7ff fa01 	bl	8017ca6 <dwt_readfromdevice>
 80188a4:	b003      	add	sp, #12
 80188a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80188a8:	9100      	str	r1, [sp, #0]
 80188aa:	4613      	mov	r3, r2
 80188ac:	462a      	mov	r2, r5
 80188ae:	4661      	mov	r1, ip
 80188b0:	f7ff f9f9 	bl	8017ca6 <dwt_readfromdevice>
 80188b4:	e7f6      	b.n	80188a4 <ull_readrxdata+0x50>
 80188b6:	bf00      	nop
 80188b8:	001f0004 	.word	0x001f0004
 80188bc:	001f0008 	.word	0x001f0008

080188c0 <dwt_write8bitoffsetreg>:
 80188c0:	b510      	push	{r4, lr}
 80188c2:	b084      	sub	sp, #16
 80188c4:	ac04      	add	r4, sp, #16
 80188c6:	f804 3d01 	strb.w	r3, [r4, #-1]!
 80188ca:	9400      	str	r4, [sp, #0]
 80188cc:	2301      	movs	r3, #1
 80188ce:	b292      	uxth	r2, r2
 80188d0:	f7ff fe00 	bl	80184d4 <dwt_writetodevice>
 80188d4:	b004      	add	sp, #16
 80188d6:	bd10      	pop	{r4, pc}

080188d8 <ull_getframelength>:
 80188d8:	b510      	push	{r4, lr}
 80188da:	4604      	mov	r4, r0
 80188dc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80188de:	7b9b      	ldrb	r3, [r3, #14]
 80188e0:	2b01      	cmp	r3, #1
 80188e2:	d013      	beq.n	801890c <ull_getframelength+0x34>
 80188e4:	2b03      	cmp	r3, #3
 80188e6:	d11d      	bne.n	8018924 <ull_getframelength+0x4c>
 80188e8:	23f0      	movs	r3, #240	; 0xf0
 80188ea:	2200      	movs	r2, #0
 80188ec:	4912      	ldr	r1, [pc, #72]	; (8018938 <ull_getframelength+0x60>)
 80188ee:	f7ff ffe7 	bl	80188c0 <dwt_write8bitoffsetreg>
 80188f2:	2200      	movs	r2, #0
 80188f4:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 80188f8:	4620      	mov	r0, r4
 80188fa:	f7ff f9f4 	bl	8017ce6 <dwt_read16bitoffsetreg>
 80188fe:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8018900:	7ada      	ldrb	r2, [r3, #11]
 8018902:	b1a2      	cbz	r2, 801892e <ull_getframelength+0x56>
 8018904:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8018908:	83d8      	strh	r0, [r3, #30]
 801890a:	bd10      	pop	{r4, pc}
 801890c:	230f      	movs	r3, #15
 801890e:	2200      	movs	r2, #0
 8018910:	4909      	ldr	r1, [pc, #36]	; (8018938 <ull_getframelength+0x60>)
 8018912:	f7ff ffd5 	bl	80188c0 <dwt_write8bitoffsetreg>
 8018916:	2200      	movs	r2, #0
 8018918:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 801891c:	4620      	mov	r0, r4
 801891e:	f7ff f9e2 	bl	8017ce6 <dwt_read16bitoffsetreg>
 8018922:	e7ec      	b.n	80188fe <ull_getframelength+0x26>
 8018924:	2200      	movs	r2, #0
 8018926:	214c      	movs	r1, #76	; 0x4c
 8018928:	f7ff f9dd 	bl	8017ce6 <dwt_read16bitoffsetreg>
 801892c:	e7e7      	b.n	80188fe <ull_getframelength+0x26>
 801892e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8018932:	83d8      	strh	r0, [r3, #30]
 8018934:	e7e9      	b.n	801890a <ull_getframelength+0x32>
 8018936:	bf00      	nop
 8018938:	00010018 	.word	0x00010018

0801893c <_dwt_clear_db_events>:
 801893c:	b510      	push	{r4, lr}
 801893e:	4604      	mov	r4, r0
 8018940:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8018942:	7b9b      	ldrb	r3, [r3, #14]
 8018944:	2b01      	cmp	r3, #1
 8018946:	d004      	beq.n	8018952 <_dwt_clear_db_events+0x16>
 8018948:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801894a:	7b9b      	ldrb	r3, [r3, #14]
 801894c:	2b03      	cmp	r3, #3
 801894e:	d006      	beq.n	801895e <_dwt_clear_db_events+0x22>
 8018950:	bd10      	pop	{r4, pc}
 8018952:	230f      	movs	r3, #15
 8018954:	2200      	movs	r2, #0
 8018956:	4905      	ldr	r1, [pc, #20]	; (801896c <_dwt_clear_db_events+0x30>)
 8018958:	f7ff ffb2 	bl	80188c0 <dwt_write8bitoffsetreg>
 801895c:	e7f4      	b.n	8018948 <_dwt_clear_db_events+0xc>
 801895e:	23f0      	movs	r3, #240	; 0xf0
 8018960:	2200      	movs	r2, #0
 8018962:	4902      	ldr	r1, [pc, #8]	; (801896c <_dwt_clear_db_events+0x30>)
 8018964:	4620      	mov	r0, r4
 8018966:	f7ff ffab 	bl	80188c0 <dwt_write8bitoffsetreg>
 801896a:	e7f1      	b.n	8018950 <_dwt_clear_db_events+0x14>
 801896c:	00010018 	.word	0x00010018

08018970 <ull_clearaonconfig>:
 8018970:	b538      	push	{r3, r4, r5, lr}
 8018972:	4604      	mov	r4, r0
 8018974:	2300      	movs	r3, #0
 8018976:	461a      	mov	r2, r3
 8018978:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 801897c:	f7ff fdb5 	bl	80184ea <dwt_write16bitoffsetreg>
 8018980:	2300      	movs	r3, #0
 8018982:	461a      	mov	r2, r3
 8018984:	4908      	ldr	r1, [pc, #32]	; (80189a8 <ull_clearaonconfig+0x38>)
 8018986:	4620      	mov	r0, r4
 8018988:	f7ff ff9a 	bl	80188c0 <dwt_write8bitoffsetreg>
 801898c:	4d07      	ldr	r5, [pc, #28]	; (80189ac <ull_clearaonconfig+0x3c>)
 801898e:	2300      	movs	r3, #0
 8018990:	461a      	mov	r2, r3
 8018992:	4629      	mov	r1, r5
 8018994:	4620      	mov	r0, r4
 8018996:	f7ff ff93 	bl	80188c0 <dwt_write8bitoffsetreg>
 801899a:	2302      	movs	r3, #2
 801899c:	2200      	movs	r2, #0
 801899e:	4629      	mov	r1, r5
 80189a0:	4620      	mov	r0, r4
 80189a2:	f7ff ff8d 	bl	80188c0 <dwt_write8bitoffsetreg>
 80189a6:	bd38      	pop	{r3, r4, r5, pc}
 80189a8:	000a0014 	.word	0x000a0014
 80189ac:	000a0004 	.word	0x000a0004

080189b0 <ull_configeventcounters>:
 80189b0:	b538      	push	{r3, r4, r5, lr}
 80189b2:	4605      	mov	r5, r0
 80189b4:	460c      	mov	r4, r1
 80189b6:	2302      	movs	r3, #2
 80189b8:	2200      	movs	r2, #0
 80189ba:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 80189be:	f7ff ff7f 	bl	80188c0 <dwt_write8bitoffsetreg>
 80189c2:	b904      	cbnz	r4, 80189c6 <ull_configeventcounters+0x16>
 80189c4:	bd38      	pop	{r3, r4, r5, pc}
 80189c6:	2301      	movs	r3, #1
 80189c8:	2200      	movs	r2, #0
 80189ca:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 80189ce:	4628      	mov	r0, r5
 80189d0:	f7ff ff76 	bl	80188c0 <dwt_write8bitoffsetreg>
 80189d4:	e7f6      	b.n	80189c4 <ull_configeventcounters+0x14>
	...

080189d8 <ull_aon_read>:
 80189d8:	b538      	push	{r3, r4, r5, lr}
 80189da:	4604      	mov	r4, r0
 80189dc:	460b      	mov	r3, r1
 80189de:	2200      	movs	r2, #0
 80189e0:	490a      	ldr	r1, [pc, #40]	; (8018a0c <ull_aon_read+0x34>)
 80189e2:	f7ff fd82 	bl	80184ea <dwt_write16bitoffsetreg>
 80189e6:	4d0a      	ldr	r5, [pc, #40]	; (8018a10 <ull_aon_read+0x38>)
 80189e8:	2388      	movs	r3, #136	; 0x88
 80189ea:	2200      	movs	r2, #0
 80189ec:	4629      	mov	r1, r5
 80189ee:	4620      	mov	r0, r4
 80189f0:	f7ff ff66 	bl	80188c0 <dwt_write8bitoffsetreg>
 80189f4:	2300      	movs	r3, #0
 80189f6:	461a      	mov	r2, r3
 80189f8:	4629      	mov	r1, r5
 80189fa:	4620      	mov	r0, r4
 80189fc:	f7ff ff60 	bl	80188c0 <dwt_write8bitoffsetreg>
 8018a00:	2200      	movs	r2, #0
 8018a02:	4904      	ldr	r1, [pc, #16]	; (8018a14 <ull_aon_read+0x3c>)
 8018a04:	4620      	mov	r0, r4
 8018a06:	f7ff f980 	bl	8017d0a <dwt_read8bitoffsetreg>
 8018a0a:	bd38      	pop	{r3, r4, r5, pc}
 8018a0c:	000a000c 	.word	0x000a000c
 8018a10:	000a0004 	.word	0x000a0004
 8018a14:	000a0008 	.word	0x000a0008

08018a18 <ull_aon_write>:
 8018a18:	b570      	push	{r4, r5, r6, lr}
 8018a1a:	4604      	mov	r4, r0
 8018a1c:	460b      	mov	r3, r1
 8018a1e:	4615      	mov	r5, r2
 8018a20:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8018a24:	bf34      	ite	cc
 8018a26:	2600      	movcc	r6, #0
 8018a28:	2620      	movcs	r6, #32
 8018a2a:	2200      	movs	r2, #0
 8018a2c:	490b      	ldr	r1, [pc, #44]	; (8018a5c <ull_aon_write+0x44>)
 8018a2e:	f7ff fd5c 	bl	80184ea <dwt_write16bitoffsetreg>
 8018a32:	462b      	mov	r3, r5
 8018a34:	2200      	movs	r2, #0
 8018a36:	490a      	ldr	r1, [pc, #40]	; (8018a60 <ull_aon_write+0x48>)
 8018a38:	4620      	mov	r0, r4
 8018a3a:	f7ff ff41 	bl	80188c0 <dwt_write8bitoffsetreg>
 8018a3e:	4d09      	ldr	r5, [pc, #36]	; (8018a64 <ull_aon_write+0x4c>)
 8018a40:	f046 0390 	orr.w	r3, r6, #144	; 0x90
 8018a44:	2200      	movs	r2, #0
 8018a46:	4629      	mov	r1, r5
 8018a48:	4620      	mov	r0, r4
 8018a4a:	f7ff ff39 	bl	80188c0 <dwt_write8bitoffsetreg>
 8018a4e:	2300      	movs	r3, #0
 8018a50:	461a      	mov	r2, r3
 8018a52:	4629      	mov	r1, r5
 8018a54:	4620      	mov	r0, r4
 8018a56:	f7ff ff33 	bl	80188c0 <dwt_write8bitoffsetreg>
 8018a5a:	bd70      	pop	{r4, r5, r6, pc}
 8018a5c:	000a000c 	.word	0x000a000c
 8018a60:	000a0010 	.word	0x000a0010
 8018a64:	000a0004 	.word	0x000a0004

08018a68 <ull_configuresleep>:
 8018a68:	b570      	push	{r4, r5, r6, lr}
 8018a6a:	4604      	mov	r4, r0
 8018a6c:	460d      	mov	r5, r1
 8018a6e:	4616      	mov	r6, r2
 8018a70:	2200      	movs	r2, #0
 8018a72:	f240 110b 	movw	r1, #267	; 0x10b
 8018a76:	f7ff ffcf 	bl	8018a18 <ull_aon_write>
 8018a7a:	f44f 7182 	mov.w	r1, #260	; 0x104
 8018a7e:	4620      	mov	r0, r4
 8018a80:	f7ff ffaa 	bl	80189d8 <ull_aon_read>
 8018a84:	f000 021f 	and.w	r2, r0, #31
 8018a88:	f44f 7182 	mov.w	r1, #260	; 0x104
 8018a8c:	4620      	mov	r0, r4
 8018a8e:	f7ff ffc3 	bl	8018a18 <ull_aon_write>
 8018a92:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8018a94:	8a1a      	ldrh	r2, [r3, #16]
 8018a96:	4315      	orrs	r5, r2
 8018a98:	821d      	strh	r5, [r3, #16]
 8018a9a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8018a9c:	8a1b      	ldrh	r3, [r3, #16]
 8018a9e:	2200      	movs	r2, #0
 8018aa0:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 8018aa4:	4620      	mov	r0, r4
 8018aa6:	f7ff fd20 	bl	80184ea <dwt_write16bitoffsetreg>
 8018aaa:	4633      	mov	r3, r6
 8018aac:	2200      	movs	r2, #0
 8018aae:	4902      	ldr	r1, [pc, #8]	; (8018ab8 <ull_configuresleep+0x50>)
 8018ab0:	4620      	mov	r0, r4
 8018ab2:	f7ff ff05 	bl	80188c0 <dwt_write8bitoffsetreg>
 8018ab6:	bd70      	pop	{r4, r5, r6, pc}
 8018ab8:	000a0014 	.word	0x000a0014

08018abc <ull_writetxdata>:
 8018abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018abe:	b083      	sub	sp, #12
 8018ac0:	185c      	adds	r4, r3, r1
 8018ac2:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8018ac6:	da24      	bge.n	8018b12 <ull_writetxdata+0x56>
 8018ac8:	461c      	mov	r4, r3
 8018aca:	4617      	mov	r7, r2
 8018acc:	460e      	mov	r6, r1
 8018ace:	4605      	mov	r5, r0
 8018ad0:	2b7f      	cmp	r3, #127	; 0x7f
 8018ad2:	d915      	bls.n	8018b00 <ull_writetxdata+0x44>
 8018ad4:	2314      	movs	r3, #20
 8018ad6:	2200      	movs	r2, #0
 8018ad8:	490f      	ldr	r1, [pc, #60]	; (8018b18 <ull_writetxdata+0x5c>)
 8018ada:	f7ff fd63 	bl	80185a4 <dwt_write32bitoffsetreg>
 8018ade:	4623      	mov	r3, r4
 8018ae0:	2200      	movs	r2, #0
 8018ae2:	490e      	ldr	r1, [pc, #56]	; (8018b1c <ull_writetxdata+0x60>)
 8018ae4:	4628      	mov	r0, r5
 8018ae6:	f7ff fd5d 	bl	80185a4 <dwt_write32bitoffsetreg>
 8018aea:	9700      	str	r7, [sp, #0]
 8018aec:	4633      	mov	r3, r6
 8018aee:	2200      	movs	r2, #0
 8018af0:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 8018af4:	4628      	mov	r0, r5
 8018af6:	f7ff fced 	bl	80184d4 <dwt_writetodevice>
 8018afa:	2000      	movs	r0, #0
 8018afc:	b003      	add	sp, #12
 8018afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018b00:	9200      	str	r2, [sp, #0]
 8018b02:	460b      	mov	r3, r1
 8018b04:	4622      	mov	r2, r4
 8018b06:	f44f 11a0 	mov.w	r1, #1310720	; 0x140000
 8018b0a:	f7ff fce3 	bl	80184d4 <dwt_writetodevice>
 8018b0e:	2000      	movs	r0, #0
 8018b10:	e7f4      	b.n	8018afc <ull_writetxdata+0x40>
 8018b12:	f04f 30ff 	mov.w	r0, #4294967295
 8018b16:	e7f1      	b.n	8018afc <ull_writetxdata+0x40>
 8018b18:	001f0004 	.word	0x001f0004
 8018b1c:	001f0008 	.word	0x001f0008

08018b20 <ull_signal_rx_buff_free>:
 8018b20:	b510      	push	{r4, lr}
 8018b22:	b082      	sub	sp, #8
 8018b24:	4604      	mov	r4, r0
 8018b26:	2302      	movs	r3, #2
 8018b28:	9301      	str	r3, [sp, #4]
 8018b2a:	2200      	movs	r2, #0
 8018b2c:	9200      	str	r2, [sp, #0]
 8018b2e:	4613      	mov	r3, r2
 8018b30:	2113      	movs	r1, #19
 8018b32:	f7ff f83a 	bl	8017baa <dwt_xfer3xxx>
 8018b36:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8018b38:	7b9a      	ldrb	r2, [r3, #14]
 8018b3a:	2a03      	cmp	r2, #3
 8018b3c:	bf0c      	ite	eq
 8018b3e:	2201      	moveq	r2, #1
 8018b40:	2203      	movne	r2, #3
 8018b42:	739a      	strb	r2, [r3, #14]
 8018b44:	b002      	add	sp, #8
 8018b46:	bd10      	pop	{r4, pc}

08018b48 <ull_isr>:
 8018b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b4c:	4604      	mov	r4, r0
 8018b4e:	2200      	movs	r2, #0
 8018b50:	f44f 11f8 	mov.w	r1, #2031616	; 0x1f0000
 8018b54:	f7ff f8d9 	bl	8017d0a <dwt_read8bitoffsetreg>
 8018b58:	4605      	mov	r5, r0
 8018b5a:	2200      	movs	r2, #0
 8018b5c:	2144      	movs	r1, #68	; 0x44
 8018b5e:	4620      	mov	r0, r4
 8018b60:	f7ff f8ab 	bl	8017cba <dwt_read32bitoffsetreg>
 8018b64:	4606      	mov	r6, r0
 8018b66:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8018b68:	2200      	movs	r2, #0
 8018b6a:	83da      	strh	r2, [r3, #30]
 8018b6c:	f883 2020 	strb.w	r2, [r3, #32]
 8018b70:	619a      	str	r2, [r3, #24]
 8018b72:	839a      	strh	r2, [r3, #28]
 8018b74:	625a      	str	r2, [r3, #36]	; 0x24
 8018b76:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8018b78:	625c      	str	r4, [r3, #36]	; 0x24
 8018b7a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8018b7c:	7b9f      	ldrb	r7, [r3, #14]
 8018b7e:	2f00      	cmp	r7, #0
 8018b80:	d17f      	bne.n	8018c82 <ull_isr+0x13a>
 8018b82:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8018b84:	619e      	str	r6, [r3, #24]
 8018b86:	f8d4 8050 	ldr.w	r8, [r4, #80]	; 0x50
 8018b8a:	f898 3015 	ldrb.w	r3, [r8, #21]
 8018b8e:	f003 0303 	and.w	r3, r3, #3
 8018b92:	2b03      	cmp	r3, #3
 8018b94:	f000 8090 	beq.w	8018cb8 <ull_isr+0x170>
 8018b98:	f015 0f80 	tst.w	r5, #128	; 0x80
 8018b9c:	f040 8093 	bne.w	8018cc6 <ull_isr+0x17e>
 8018ba0:	f015 0f01 	tst.w	r5, #1
 8018ba4:	f040 80c1 	bne.w	8018d2a <ull_isr+0x1e2>
 8018ba8:	f015 0f40 	tst.w	r5, #64	; 0x40
 8018bac:	d00b      	beq.n	8018bc6 <ull_isr+0x7e>
 8018bae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018bb0:	b113      	cbz	r3, 8018bb8 <ull_isr+0x70>
 8018bb2:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8018bb4:	3018      	adds	r0, #24
 8018bb6:	4798      	blx	r3
 8018bb8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8018bbc:	2202      	movs	r2, #2
 8018bbe:	2144      	movs	r1, #68	; 0x44
 8018bc0:	4620      	mov	r0, r4
 8018bc2:	f7ff fc92 	bl	80184ea <dwt_write16bitoffsetreg>
 8018bc6:	f015 0f08 	tst.w	r5, #8
 8018bca:	d107      	bne.n	8018bdc <ull_isr+0x94>
 8018bcc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8018bce:	7b9b      	ldrb	r3, [r3, #14]
 8018bd0:	2b00      	cmp	r3, #0
 8018bd2:	f000 80ea 	beq.w	8018daa <ull_isr+0x262>
 8018bd6:	2f00      	cmp	r7, #0
 8018bd8:	f000 80e7 	beq.w	8018daa <ull_isr+0x262>
 8018bdc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8018bde:	2200      	movs	r2, #0
 8018be0:	f883 2020 	strb.w	r2, [r3, #32]
 8018be4:	f416 2f80 	tst.w	r6, #262144	; 0x40000
 8018be8:	f000 80ad 	beq.w	8018d46 <ull_isr+0x1fe>
 8018bec:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8018bee:	f892 3020 	ldrb.w	r3, [r2, #32]
 8018bf2:	f043 0308 	orr.w	r3, r3, #8
 8018bf6:	f882 3020 	strb.w	r3, [r2, #32]
 8018bfa:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 8018bfe:	f016 5f80 	tst.w	r6, #268435456	; 0x10000000
 8018c02:	d008      	beq.n	8018c16 <ull_isr+0xce>
 8018c04:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8018c06:	f892 3020 	ldrb.w	r3, [r2, #32]
 8018c0a:	f043 0310 	orr.w	r3, r3, #16
 8018c0e:	f882 3020 	strb.w	r3, [r2, #32]
 8018c12:	f047 5780 	orr.w	r7, r7, #268435456	; 0x10000000
 8018c16:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 8018c1a:	d006      	beq.n	8018c2a <ull_isr+0xe2>
 8018c1c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8018c1e:	7d53      	ldrb	r3, [r2, #21]
 8018c20:	f003 0303 	and.w	r3, r3, #3
 8018c24:	2b03      	cmp	r3, #3
 8018c26:	f000 809a 	beq.w	8018d5e <ull_isr+0x216>
 8018c2a:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8018c2e:	f040 80a2 	bne.w	8018d76 <ull_isr+0x22e>
 8018c32:	f447 43de 	orr.w	r3, r7, #28416	; 0x6f00
 8018c36:	2200      	movs	r2, #0
 8018c38:	2144      	movs	r1, #68	; 0x44
 8018c3a:	4620      	mov	r0, r4
 8018c3c:	f7ff fcb2 	bl	80185a4 <dwt_write32bitoffsetreg>
 8018c40:	4620      	mov	r0, r4
 8018c42:	f7ff fe7b 	bl	801893c <_dwt_clear_db_events>
 8018c46:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8018c48:	8bc3      	ldrh	r3, [r0, #30]
 8018c4a:	2b00      	cmp	r3, #0
 8018c4c:	f040 80a2 	bne.w	8018d94 <ull_isr+0x24c>
 8018c50:	7d43      	ldrb	r3, [r0, #21]
 8018c52:	f003 0303 	and.w	r3, r3, #3
 8018c56:	2b03      	cmp	r3, #3
 8018c58:	f000 809c 	beq.w	8018d94 <ull_isr+0x24c>
 8018c5c:	6983      	ldr	r3, [r0, #24]
 8018c5e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8018c62:	6183      	str	r3, [r0, #24]
 8018c64:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8018c66:	6993      	ldr	r3, [r2, #24]
 8018c68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8018c6c:	6193      	str	r3, [r2, #24]
 8018c6e:	69e3      	ldr	r3, [r4, #28]
 8018c70:	b113      	cbz	r3, 8018c78 <ull_isr+0x130>
 8018c72:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8018c74:	3018      	adds	r0, #24
 8018c76:	4798      	blx	r3
 8018c78:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8018c7a:	2200      	movs	r2, #0
 8018c7c:	f883 2020 	strb.w	r2, [r3, #32]
 8018c80:	e08c      	b.n	8018d9c <ull_isr+0x254>
 8018c82:	496d      	ldr	r1, [pc, #436]	; (8018e38 <ull_isr+0x2f0>)
 8018c84:	4620      	mov	r0, r4
 8018c86:	f7ff f840 	bl	8017d0a <dwt_read8bitoffsetreg>
 8018c8a:	4607      	mov	r7, r0
 8018c8c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8018c8e:	7b9b      	ldrb	r3, [r3, #14]
 8018c90:	2b03      	cmp	r3, #3
 8018c92:	bf08      	it	eq
 8018c94:	f3c0 1707 	ubfxeq	r7, r0, #4, #8
 8018c98:	f017 0f01 	tst.w	r7, #1
 8018c9c:	bf18      	it	ne
 8018c9e:	f446 4680 	orrne.w	r6, r6, #16384	; 0x4000
 8018ca2:	f017 0f02 	tst.w	r7, #2
 8018ca6:	bf18      	it	ne
 8018ca8:	f446 5600 	orrne.w	r6, r6, #8192	; 0x2000
 8018cac:	f017 0f04 	tst.w	r7, #4
 8018cb0:	bf18      	it	ne
 8018cb2:	f446 6680 	orrne.w	r6, r6, #1024	; 0x400
 8018cb6:	e764      	b.n	8018b82 <ull_isr+0x3a>
 8018cb8:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 8018cbc:	bf1c      	itt	ne
 8018cbe:	f045 0508 	orrne.w	r5, r5, #8
 8018cc2:	b2ed      	uxtbne	r5, r5
 8018cc4:	e768      	b.n	8018b98 <ull_isr+0x50>
 8018cc6:	2200      	movs	r2, #0
 8018cc8:	2148      	movs	r1, #72	; 0x48
 8018cca:	4620      	mov	r0, r4
 8018ccc:	f7ff f80b 	bl	8017ce6 <dwt_read16bitoffsetreg>
 8018cd0:	f8a8 001c 	strh.w	r0, [r8, #28]
 8018cd4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8018cd6:	7d1a      	ldrb	r2, [r3, #20]
 8018cd8:	b11a      	cbz	r2, 8018ce2 <ull_isr+0x19a>
 8018cda:	699a      	ldr	r2, [r3, #24]
 8018cdc:	f012 0f04 	tst.w	r2, #4
 8018ce0:	d103      	bne.n	8018cea <ull_isr+0x1a2>
 8018ce2:	8b9b      	ldrh	r3, [r3, #28]
 8018ce4:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8018ce8:	b18b      	cbz	r3, 8018d0e <ull_isr+0x1c6>
 8018cea:	2304      	movs	r3, #4
 8018cec:	2200      	movs	r2, #0
 8018cee:	2144      	movs	r1, #68	; 0x44
 8018cf0:	4620      	mov	r0, r4
 8018cf2:	f7ff fde5 	bl	80188c0 <dwt_write8bitoffsetreg>
 8018cf6:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8018cfa:	2200      	movs	r2, #0
 8018cfc:	2148      	movs	r1, #72	; 0x48
 8018cfe:	4620      	mov	r0, r4
 8018d00:	f7ff fbf3 	bl	80184ea <dwt_write16bitoffsetreg>
 8018d04:	6a23      	ldr	r3, [r4, #32]
 8018d06:	b113      	cbz	r3, 8018d0e <ull_isr+0x1c6>
 8018d08:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8018d0a:	3018      	adds	r0, #24
 8018d0c:	4798      	blx	r3
 8018d0e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8018d10:	8b9b      	ldrh	r3, [r3, #28]
 8018d12:	f413 7f80 	tst.w	r3, #256	; 0x100
 8018d16:	f43f af43 	beq.w	8018ba0 <ull_isr+0x58>
 8018d1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8018d1e:	2200      	movs	r2, #0
 8018d20:	2148      	movs	r1, #72	; 0x48
 8018d22:	4620      	mov	r0, r4
 8018d24:	f7ff fbe1 	bl	80184ea <dwt_write16bitoffsetreg>
 8018d28:	e73a      	b.n	8018ba0 <ull_isr+0x58>
 8018d2a:	23f8      	movs	r3, #248	; 0xf8
 8018d2c:	2200      	movs	r2, #0
 8018d2e:	2144      	movs	r1, #68	; 0x44
 8018d30:	4620      	mov	r0, r4
 8018d32:	f7ff fdc5 	bl	80188c0 <dwt_write8bitoffsetreg>
 8018d36:	6923      	ldr	r3, [r4, #16]
 8018d38:	2b00      	cmp	r3, #0
 8018d3a:	f43f af35 	beq.w	8018ba8 <ull_isr+0x60>
 8018d3e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8018d40:	3018      	adds	r0, #24
 8018d42:	4798      	blx	r3
 8018d44:	e730      	b.n	8018ba8 <ull_isr+0x60>
 8018d46:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8018d4a:	bf1f      	itttt	ne
 8018d4c:	6d22      	ldrne	r2, [r4, #80]	; 0x50
 8018d4e:	f892 3020 	ldrbne.w	r3, [r2, #32]
 8018d52:	f043 0304 	orrne.w	r3, r3, #4
 8018d56:	f882 3020 	strbne.w	r3, [r2, #32]
 8018d5a:	2700      	movs	r7, #0
 8018d5c:	e74f      	b.n	8018bfe <ull_isr+0xb6>
 8018d5e:	f892 3020 	ldrb.w	r3, [r2, #32]
 8018d62:	f043 0302 	orr.w	r3, r3, #2
 8018d66:	f882 3020 	strb.w	r3, [r2, #32]
 8018d6a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8018d6c:	2200      	movs	r2, #0
 8018d6e:	83da      	strh	r2, [r3, #30]
 8018d70:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 8018d74:	e75d      	b.n	8018c32 <ull_isr+0xea>
 8018d76:	4620      	mov	r0, r4
 8018d78:	f7ff fdae 	bl	80188d8 <ull_getframelength>
 8018d7c:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8018d80:	f43f af57 	beq.w	8018c32 <ull_isr+0xea>
 8018d84:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8018d86:	f892 3020 	ldrb.w	r3, [r2, #32]
 8018d8a:	f043 0301 	orr.w	r3, r3, #1
 8018d8e:	f882 3020 	strb.w	r3, [r2, #32]
 8018d92:	e74e      	b.n	8018c32 <ull_isr+0xea>
 8018d94:	6963      	ldr	r3, [r4, #20]
 8018d96:	b10b      	cbz	r3, 8018d9c <ull_isr+0x254>
 8018d98:	3018      	adds	r0, #24
 8018d9a:	4798      	blx	r3
 8018d9c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8018d9e:	7b9b      	ldrb	r3, [r3, #14]
 8018da0:	bb03      	cbnz	r3, 8018de4 <ull_isr+0x29c>
 8018da2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8018da4:	2200      	movs	r2, #0
 8018da6:	f883 2020 	strb.w	r2, [r3, #32]
 8018daa:	f015 0f10 	tst.w	r5, #16
 8018dae:	d11d      	bne.n	8018dec <ull_isr+0x2a4>
 8018db0:	f015 0f20 	tst.w	r5, #32
 8018db4:	d12d      	bne.n	8018e12 <ull_isr+0x2ca>
 8018db6:	2200      	movs	r2, #0
 8018db8:	4920      	ldr	r1, [pc, #128]	; (8018e3c <ull_isr+0x2f4>)
 8018dba:	4620      	mov	r0, r4
 8018dbc:	f7fe ffa5 	bl	8017d0a <dwt_read8bitoffsetreg>
 8018dc0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8018dc2:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21
 8018dc6:	f010 0303 	ands.w	r3, r0, #3
 8018dca:	d009      	beq.n	8018de0 <ull_isr+0x298>
 8018dcc:	2200      	movs	r2, #0
 8018dce:	491b      	ldr	r1, [pc, #108]	; (8018e3c <ull_isr+0x2f4>)
 8018dd0:	4620      	mov	r0, r4
 8018dd2:	f7ff fd75 	bl	80188c0 <dwt_write8bitoffsetreg>
 8018dd6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8018dd8:	b113      	cbz	r3, 8018de0 <ull_isr+0x298>
 8018dda:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8018ddc:	3018      	adds	r0, #24
 8018dde:	4798      	blx	r3
 8018de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018de4:	4620      	mov	r0, r4
 8018de6:	f7ff fe9b 	bl	8018b20 <ull_signal_rx_buff_free>
 8018dea:	e7da      	b.n	8018da2 <ull_isr+0x25a>
 8018dec:	4b14      	ldr	r3, [pc, #80]	; (8018e40 <ull_isr+0x2f8>)
 8018dee:	2200      	movs	r2, #0
 8018df0:	2144      	movs	r1, #68	; 0x44
 8018df2:	4620      	mov	r0, r4
 8018df4:	f7ff fbd6 	bl	80185a4 <dwt_write32bitoffsetreg>
 8018df8:	4620      	mov	r0, r4
 8018dfa:	f7ff fd9f 	bl	801893c <_dwt_clear_db_events>
 8018dfe:	69e3      	ldr	r3, [r4, #28]
 8018e00:	b113      	cbz	r3, 8018e08 <ull_isr+0x2c0>
 8018e02:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8018e04:	3018      	adds	r0, #24
 8018e06:	4798      	blx	r3
 8018e08:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8018e0a:	2200      	movs	r2, #0
 8018e0c:	f883 2020 	strb.w	r2, [r3, #32]
 8018e10:	e7ce      	b.n	8018db0 <ull_isr+0x268>
 8018e12:	4b0c      	ldr	r3, [pc, #48]	; (8018e44 <ull_isr+0x2fc>)
 8018e14:	2200      	movs	r2, #0
 8018e16:	2144      	movs	r1, #68	; 0x44
 8018e18:	4620      	mov	r0, r4
 8018e1a:	f7ff fbc3 	bl	80185a4 <dwt_write32bitoffsetreg>
 8018e1e:	4620      	mov	r0, r4
 8018e20:	f7ff fd8c 	bl	801893c <_dwt_clear_db_events>
 8018e24:	69a3      	ldr	r3, [r4, #24]
 8018e26:	b113      	cbz	r3, 8018e2e <ull_isr+0x2e6>
 8018e28:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8018e2a:	3018      	adds	r0, #24
 8018e2c:	4798      	blx	r3
 8018e2e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8018e30:	2200      	movs	r2, #0
 8018e32:	f883 2020 	strb.w	r2, [r3, #32]
 8018e36:	e7be      	b.n	8018db6 <ull_isr+0x26e>
 8018e38:	00010018 	.word	0x00010018
 8018e3c:	00110038 	.word	0x00110038
 8018e40:	34059400 	.word	0x34059400
 8018e44:	10220400 	.word	0x10220400

08018e48 <dwt_modify32bitoffsetreg>:
 8018e48:	b530      	push	{r4, r5, lr}
 8018e4a:	b085      	sub	sp, #20
 8018e4c:	9c08      	ldr	r4, [sp, #32]
 8018e4e:	f88d 3008 	strb.w	r3, [sp, #8]
 8018e52:	0a1d      	lsrs	r5, r3, #8
 8018e54:	f88d 5009 	strb.w	r5, [sp, #9]
 8018e58:	0c1d      	lsrs	r5, r3, #16
 8018e5a:	f88d 500a 	strb.w	r5, [sp, #10]
 8018e5e:	0e1b      	lsrs	r3, r3, #24
 8018e60:	f88d 300b 	strb.w	r3, [sp, #11]
 8018e64:	f88d 400c 	strb.w	r4, [sp, #12]
 8018e68:	0a23      	lsrs	r3, r4, #8
 8018e6a:	f88d 300d 	strb.w	r3, [sp, #13]
 8018e6e:	0c23      	lsrs	r3, r4, #16
 8018e70:	f88d 300e 	strb.w	r3, [sp, #14]
 8018e74:	0e24      	lsrs	r4, r4, #24
 8018e76:	f88d 400f 	strb.w	r4, [sp, #15]
 8018e7a:	f248 0303 	movw	r3, #32771	; 0x8003
 8018e7e:	9301      	str	r3, [sp, #4]
 8018e80:	ab02      	add	r3, sp, #8
 8018e82:	9300      	str	r3, [sp, #0]
 8018e84:	2308      	movs	r3, #8
 8018e86:	b292      	uxth	r2, r2
 8018e88:	f7fe fe8f 	bl	8017baa <dwt_xfer3xxx>
 8018e8c:	b005      	add	sp, #20
 8018e8e:	bd30      	pop	{r4, r5, pc}

08018e90 <ull_enable_rf_tx>:
 8018e90:	b570      	push	{r4, r5, r6, lr}
 8018e92:	b082      	sub	sp, #8
 8018e94:	4604      	mov	r4, r0
 8018e96:	460e      	mov	r6, r1
 8018e98:	4d13      	ldr	r5, [pc, #76]	; (8018ee8 <ull_enable_rf_tx+0x58>)
 8018e9a:	f04f 2308 	mov.w	r3, #134219776	; 0x8000800
 8018e9e:	9300      	str	r3, [sp, #0]
 8018ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8018ea4:	2200      	movs	r2, #0
 8018ea6:	4629      	mov	r1, r5
 8018ea8:	f7ff ffce 	bl	8018e48 <dwt_modify32bitoffsetreg>
 8018eac:	f04f 1360 	mov.w	r3, #6291552	; 0x600060
 8018eb0:	9300      	str	r3, [sp, #0]
 8018eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8018eb6:	2200      	movs	r2, #0
 8018eb8:	4629      	mov	r1, r5
 8018eba:	4620      	mov	r0, r4
 8018ebc:	f7ff ffc4 	bl	8018e48 <dwt_modify32bitoffsetreg>
 8018ec0:	4b0a      	ldr	r3, [pc, #40]	; (8018eec <ull_enable_rf_tx+0x5c>)
 8018ec2:	9300      	str	r3, [sp, #0]
 8018ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8018ec8:	2200      	movs	r2, #0
 8018eca:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 8018ece:	4620      	mov	r0, r4
 8018ed0:	f7ff ffba 	bl	8018e48 <dwt_modify32bitoffsetreg>
 8018ed4:	b90e      	cbnz	r6, 8018eda <ull_enable_rf_tx+0x4a>
 8018ed6:	b002      	add	sp, #8
 8018ed8:	bd70      	pop	{r4, r5, r6, pc}
 8018eda:	4b05      	ldr	r3, [pc, #20]	; (8018ef0 <ull_enable_rf_tx+0x60>)
 8018edc:	2200      	movs	r2, #0
 8018ede:	4905      	ldr	r1, [pc, #20]	; (8018ef4 <ull_enable_rf_tx+0x64>)
 8018ee0:	4620      	mov	r0, r4
 8018ee2:	f7ff fb5f 	bl	80185a4 <dwt_write32bitoffsetreg>
 8018ee6:	e7f6      	b.n	8018ed6 <ull_enable_rf_tx+0x46>
 8018ee8:	00070048 	.word	0x00070048
 8018eec:	02003c00 	.word	0x02003c00
 8018ef0:	01011100 	.word	0x01011100
 8018ef4:	00070014 	.word	0x00070014

08018ef8 <ull_enable_rftx_blocks>:
 8018ef8:	b500      	push	{lr}
 8018efa:	b083      	sub	sp, #12
 8018efc:	4b05      	ldr	r3, [pc, #20]	; (8018f14 <ull_enable_rftx_blocks+0x1c>)
 8018efe:	9300      	str	r3, [sp, #0]
 8018f00:	f04f 33ff 	mov.w	r3, #4294967295
 8018f04:	2200      	movs	r2, #0
 8018f06:	4904      	ldr	r1, [pc, #16]	; (8018f18 <ull_enable_rftx_blocks+0x20>)
 8018f08:	f7ff ff9e 	bl	8018e48 <dwt_modify32bitoffsetreg>
 8018f0c:	b003      	add	sp, #12
 8018f0e:	f85d fb04 	ldr.w	pc, [sp], #4
 8018f12:	bf00      	nop
 8018f14:	02003c00 	.word	0x02003c00
 8018f18:	00070004 	.word	0x00070004

08018f1c <_dwt_otpprogword32>:
 8018f1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018f20:	b083      	sub	sp, #12
 8018f22:	4604      	mov	r4, r0
 8018f24:	460d      	mov	r5, r1
 8018f26:	4617      	mov	r7, r2
 8018f28:	4e56      	ldr	r6, [pc, #344]	; (8019084 <_dwt_otpprogword32+0x168>)
 8018f2a:	2200      	movs	r2, #0
 8018f2c:	4631      	mov	r1, r6
 8018f2e:	f7fe fec4 	bl	8017cba <dwt_read32bitoffsetreg>
 8018f32:	4681      	mov	r9, r0
 8018f34:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8018f38:	9300      	str	r3, [sp, #0]
 8018f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8018f3e:	2200      	movs	r2, #0
 8018f40:	4631      	mov	r1, r6
 8018f42:	4620      	mov	r0, r4
 8018f44:	f7ff ff80 	bl	8018e48 <dwt_modify32bitoffsetreg>
 8018f48:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8019088 <_dwt_otpprogword32+0x16c>
 8018f4c:	2318      	movs	r3, #24
 8018f4e:	2200      	movs	r2, #0
 8018f50:	4641      	mov	r1, r8
 8018f52:	4620      	mov	r0, r4
 8018f54:	f7ff fac9 	bl	80184ea <dwt_write16bitoffsetreg>
 8018f58:	2125      	movs	r1, #37	; 0x25
 8018f5a:	4620      	mov	r0, r4
 8018f5c:	f7ff faec 	bl	8018538 <__dwt_otp_write_wdata_id_reg>
 8018f60:	2102      	movs	r1, #2
 8018f62:	4620      	mov	r0, r4
 8018f64:	f7ff fae8 	bl	8018538 <__dwt_otp_write_wdata_id_reg>
 8018f68:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
 8018f6c:	4620      	mov	r0, r4
 8018f6e:	f7ff fae3 	bl	8018538 <__dwt_otp_write_wdata_id_reg>
 8018f72:	b2f9      	uxtb	r1, r7
 8018f74:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8018f78:	4620      	mov	r0, r4
 8018f7a:	f7ff fadd 	bl	8018538 <__dwt_otp_write_wdata_id_reg>
 8018f7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8018f82:	4620      	mov	r0, r4
 8018f84:	f7ff fad8 	bl	8018538 <__dwt_otp_write_wdata_id_reg>
 8018f88:	2100      	movs	r1, #0
 8018f8a:	4620      	mov	r0, r4
 8018f8c:	f7ff fad4 	bl	8018538 <__dwt_otp_write_wdata_id_reg>
 8018f90:	2102      	movs	r1, #2
 8018f92:	4620      	mov	r0, r4
 8018f94:	f7ff fad0 	bl	8018538 <__dwt_otp_write_wdata_id_reg>
 8018f98:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8018f9c:	4620      	mov	r0, r4
 8018f9e:	f7ff facb 	bl	8018538 <__dwt_otp_write_wdata_id_reg>
 8018fa2:	b2e9      	uxtb	r1, r5
 8018fa4:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8018fa8:	4620      	mov	r0, r4
 8018faa:	f7ff fac5 	bl	8018538 <__dwt_otp_write_wdata_id_reg>
 8018fae:	f3c5 2107 	ubfx	r1, r5, #8, #8
 8018fb2:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8018fb6:	4620      	mov	r0, r4
 8018fb8:	f7ff fabe 	bl	8018538 <__dwt_otp_write_wdata_id_reg>
 8018fbc:	f3c5 4107 	ubfx	r1, r5, #16, #8
 8018fc0:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8018fc4:	4620      	mov	r0, r4
 8018fc6:	f7ff fab7 	bl	8018538 <__dwt_otp_write_wdata_id_reg>
 8018fca:	0e29      	lsrs	r1, r5, #24
 8018fcc:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8018fd0:	4620      	mov	r0, r4
 8018fd2:	f7ff fab1 	bl	8018538 <__dwt_otp_write_wdata_id_reg>
 8018fd6:	2100      	movs	r1, #0
 8018fd8:	4620      	mov	r0, r4
 8018fda:	f7ff faad 	bl	8018538 <__dwt_otp_write_wdata_id_reg>
 8018fde:	213a      	movs	r1, #58	; 0x3a
 8018fe0:	4620      	mov	r0, r4
 8018fe2:	f7ff faa9 	bl	8018538 <__dwt_otp_write_wdata_id_reg>
 8018fe6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8018fea:	4620      	mov	r0, r4
 8018fec:	f7ff faa4 	bl	8018538 <__dwt_otp_write_wdata_id_reg>
 8018ff0:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8018ff4:	4620      	mov	r0, r4
 8018ff6:	f7ff fa9f 	bl	8018538 <__dwt_otp_write_wdata_id_reg>
 8018ffa:	2100      	movs	r1, #0
 8018ffc:	4620      	mov	r0, r4
 8018ffe:	f7ff fa9b 	bl	8018538 <__dwt_otp_write_wdata_id_reg>
 8019002:	213a      	movs	r1, #58	; 0x3a
 8019004:	4620      	mov	r0, r4
 8019006:	f7ff fa97 	bl	8018538 <__dwt_otp_write_wdata_id_reg>
 801900a:	f240 1101 	movw	r1, #257	; 0x101
 801900e:	4620      	mov	r0, r4
 8019010:	f7ff fa92 	bl	8018538 <__dwt_otp_write_wdata_id_reg>
 8019014:	2302      	movs	r3, #2
 8019016:	2200      	movs	r2, #0
 8019018:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 801901c:	4620      	mov	r0, r4
 801901e:	f7ff fa64 	bl	80184ea <dwt_write16bitoffsetreg>
 8019022:	2300      	movs	r3, #0
 8019024:	461a      	mov	r2, r3
 8019026:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 801902a:	4620      	mov	r0, r4
 801902c:	f7ff fa5d 	bl	80184ea <dwt_write16bitoffsetreg>
 8019030:	2002      	movs	r0, #2
 8019032:	f7e7 fd9f 	bl	8000b74 <deca_sleep>
 8019036:	213a      	movs	r1, #58	; 0x3a
 8019038:	4620      	mov	r0, r4
 801903a:	f7ff fa7d 	bl	8018538 <__dwt_otp_write_wdata_id_reg>
 801903e:	f44f 7181 	mov.w	r1, #258	; 0x102
 8019042:	4620      	mov	r0, r4
 8019044:	f7ff fa78 	bl	8018538 <__dwt_otp_write_wdata_id_reg>
 8019048:	2302      	movs	r3, #2
 801904a:	2200      	movs	r2, #0
 801904c:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8019050:	4620      	mov	r0, r4
 8019052:	f7ff fa4a 	bl	80184ea <dwt_write16bitoffsetreg>
 8019056:	2300      	movs	r3, #0
 8019058:	461a      	mov	r2, r3
 801905a:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 801905e:	4620      	mov	r0, r4
 8019060:	f7ff fa43 	bl	80184ea <dwt_write16bitoffsetreg>
 8019064:	2300      	movs	r3, #0
 8019066:	461a      	mov	r2, r3
 8019068:	4641      	mov	r1, r8
 801906a:	4620      	mov	r0, r4
 801906c:	f7ff fa3d 	bl	80184ea <dwt_write16bitoffsetreg>
 8019070:	464b      	mov	r3, r9
 8019072:	2200      	movs	r2, #0
 8019074:	4631      	mov	r1, r6
 8019076:	4620      	mov	r0, r4
 8019078:	f7ff fa94 	bl	80185a4 <dwt_write32bitoffsetreg>
 801907c:	b003      	add	sp, #12
 801907e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019082:	bf00      	nop
 8019084:	00070044 	.word	0x00070044
 8019088:	000b0008 	.word	0x000b0008

0801908c <ull_setgpiomode>:
 801908c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801908e:	b083      	sub	sp, #12
 8019090:	2400      	movs	r4, #0
 8019092:	4623      	mov	r3, r4
 8019094:	2601      	movs	r6, #1
 8019096:	2707      	movs	r7, #7
 8019098:	e002      	b.n	80190a0 <ull_setgpiomode+0x14>
 801909a:	3401      	adds	r4, #1
 801909c:	2c09      	cmp	r4, #9
 801909e:	d009      	beq.n	80190b4 <ull_setgpiomode+0x28>
 80190a0:	fa06 f504 	lsl.w	r5, r6, r4
 80190a4:	420d      	tst	r5, r1
 80190a6:	d0f8      	beq.n	801909a <ull_setgpiomode+0xe>
 80190a8:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 80190ac:	fa07 f505 	lsl.w	r5, r7, r5
 80190b0:	432b      	orrs	r3, r5
 80190b2:	e7f2      	b.n	801909a <ull_setgpiomode+0xe>
 80190b4:	401a      	ands	r2, r3
 80190b6:	9200      	str	r2, [sp, #0]
 80190b8:	43db      	mvns	r3, r3
 80190ba:	2200      	movs	r2, #0
 80190bc:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80190c0:	f7ff fec2 	bl	8018e48 <dwt_modify32bitoffsetreg>
 80190c4:	b003      	add	sp, #12
 80190c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080190c8 <ull_writetxfctrl>:
 80190c8:	b510      	push	{r4, lr}
 80190ca:	b082      	sub	sp, #8
 80190cc:	4604      	mov	r4, r0
 80190ce:	2a7f      	cmp	r2, #127	; 0x7f
 80190d0:	d912      	bls.n	80190f8 <ull_writetxfctrl+0x30>
 80190d2:	3280      	adds	r2, #128	; 0x80
 80190d4:	ea41 21c3 	orr.w	r1, r1, r3, lsl #11
 80190d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80190dc:	9100      	str	r1, [sp, #0]
 80190de:	4b0c      	ldr	r3, [pc, #48]	; (8019110 <ull_writetxfctrl+0x48>)
 80190e0:	2200      	movs	r2, #0
 80190e2:	2120      	movs	r1, #32
 80190e4:	f7ff feb0 	bl	8018e48 <dwt_modify32bitoffsetreg>
 80190e8:	2200      	movs	r2, #0
 80190ea:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80190ee:	4620      	mov	r0, r4
 80190f0:	f7fe fe0b 	bl	8017d0a <dwt_read8bitoffsetreg>
 80190f4:	b002      	add	sp, #8
 80190f6:	bd10      	pop	{r4, pc}
 80190f8:	ea41 21c3 	orr.w	r1, r1, r3, lsl #11
 80190fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8019100:	9100      	str	r1, [sp, #0]
 8019102:	4b03      	ldr	r3, [pc, #12]	; (8019110 <ull_writetxfctrl+0x48>)
 8019104:	2200      	movs	r2, #0
 8019106:	2120      	movs	r1, #32
 8019108:	f7ff fe9e 	bl	8018e48 <dwt_modify32bitoffsetreg>
 801910c:	e7f2      	b.n	80190f4 <ull_writetxfctrl+0x2c>
 801910e:	bf00      	nop
 8019110:	fc00f400 	.word	0xfc00f400

08019114 <prs_sys_status_and_or>:
 8019114:	b500      	push	{lr}
 8019116:	b083      	sub	sp, #12
 8019118:	9200      	str	r2, [sp, #0]
 801911a:	460b      	mov	r3, r1
 801911c:	2200      	movs	r2, #0
 801911e:	2144      	movs	r1, #68	; 0x44
 8019120:	f7ff fe92 	bl	8018e48 <dwt_modify32bitoffsetreg>
 8019124:	2000      	movs	r0, #0
 8019126:	b003      	add	sp, #12
 8019128:	f85d fb04 	ldr.w	pc, [sp], #4

0801912c <dwt_modify8bitoffsetreg>:
 801912c:	b500      	push	{lr}
 801912e:	b085      	sub	sp, #20
 8019130:	f88d 300c 	strb.w	r3, [sp, #12]
 8019134:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8019138:	f88d 300d 	strb.w	r3, [sp, #13]
 801913c:	f248 0301 	movw	r3, #32769	; 0x8001
 8019140:	9301      	str	r3, [sp, #4]
 8019142:	ab03      	add	r3, sp, #12
 8019144:	9300      	str	r3, [sp, #0]
 8019146:	2302      	movs	r3, #2
 8019148:	b292      	uxth	r2, r2
 801914a:	f7fe fd2e 	bl	8017baa <dwt_xfer3xxx>
 801914e:	b005      	add	sp, #20
 8019150:	f85d fb04 	ldr.w	pc, [sp], #4

08019154 <ull_configciadiag>:
 8019154:	b530      	push	{r4, r5, lr}
 8019156:	b083      	sub	sp, #12
 8019158:	4604      	mov	r4, r0
 801915a:	460d      	mov	r5, r1
 801915c:	f011 0f01 	tst.w	r1, #1
 8019160:	d015      	beq.n	801918e <ull_configciadiag+0x3a>
 8019162:	2300      	movs	r3, #0
 8019164:	9300      	str	r3, [sp, #0]
 8019166:	23ef      	movs	r3, #239	; 0xef
 8019168:	2202      	movs	r2, #2
 801916a:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 801916e:	f7ff ffdd 	bl	801912c <dwt_modify8bitoffsetreg>
 8019172:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8019174:	759d      	strb	r5, [r3, #22]
 8019176:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8019178:	7d9b      	ldrb	r3, [r3, #22]
 801917a:	085b      	lsrs	r3, r3, #1
 801917c:	d010      	beq.n	80191a0 <ull_configciadiag+0x4c>
 801917e:	086b      	lsrs	r3, r5, #1
 8019180:	2200      	movs	r2, #0
 8019182:	490e      	ldr	r1, [pc, #56]	; (80191bc <ull_configciadiag+0x68>)
 8019184:	4620      	mov	r0, r4
 8019186:	f7ff fb9b 	bl	80188c0 <dwt_write8bitoffsetreg>
 801918a:	b003      	add	sp, #12
 801918c:	bd30      	pop	{r4, r5, pc}
 801918e:	2310      	movs	r3, #16
 8019190:	9300      	str	r3, [sp, #0]
 8019192:	23ff      	movs	r3, #255	; 0xff
 8019194:	2202      	movs	r2, #2
 8019196:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 801919a:	f7ff ffc7 	bl	801912c <dwt_modify8bitoffsetreg>
 801919e:	e7e8      	b.n	8019172 <ull_configciadiag+0x1e>
 80191a0:	2301      	movs	r3, #1
 80191a2:	9300      	str	r3, [sp, #0]
 80191a4:	23ff      	movs	r3, #255	; 0xff
 80191a6:	2200      	movs	r2, #0
 80191a8:	4904      	ldr	r1, [pc, #16]	; (80191bc <ull_configciadiag+0x68>)
 80191aa:	4620      	mov	r0, r4
 80191ac:	f7ff ffbe 	bl	801912c <dwt_modify8bitoffsetreg>
 80191b0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80191b2:	7d93      	ldrb	r3, [r2, #22]
 80191b4:	f043 0302 	orr.w	r3, r3, #2
 80191b8:	7593      	strb	r3, [r2, #22]
 80191ba:	e7e6      	b.n	801918a <ull_configciadiag+0x36>
 80191bc:	00010020 	.word	0x00010020

080191c0 <ull_calcbandwidthadj>:
 80191c0:	b570      	push	{r4, r5, r6, lr}
 80191c2:	b082      	sub	sp, #8
 80191c4:	4604      	mov	r4, r0
 80191c6:	460d      	mov	r5, r1
 80191c8:	2101      	movs	r1, #1
 80191ca:	f7ff f99f 	bl	801850c <ull_force_clocks>
 80191ce:	2100      	movs	r1, #0
 80191d0:	4620      	mov	r0, r4
 80191d2:	f7ff fe5d 	bl	8018e90 <ull_enable_rf_tx>
 80191d6:	4620      	mov	r0, r4
 80191d8:	f7ff fe8e 	bl	8018ef8 <ull_enable_rftx_blocks>
 80191dc:	f3c5 030b 	ubfx	r3, r5, #0, #12
 80191e0:	2200      	movs	r2, #0
 80191e2:	4915      	ldr	r1, [pc, #84]	; (8019238 <ull_calcbandwidthadj+0x78>)
 80191e4:	4620      	mov	r0, r4
 80191e6:	f7ff f980 	bl	80184ea <dwt_write16bitoffsetreg>
 80191ea:	2303      	movs	r3, #3
 80191ec:	9300      	str	r3, [sp, #0]
 80191ee:	23ff      	movs	r3, #255	; 0xff
 80191f0:	2200      	movs	r2, #0
 80191f2:	4912      	ldr	r1, [pc, #72]	; (801923c <ull_calcbandwidthadj+0x7c>)
 80191f4:	4620      	mov	r0, r4
 80191f6:	f7ff ff99 	bl	801912c <dwt_modify8bitoffsetreg>
 80191fa:	4e10      	ldr	r6, [pc, #64]	; (801923c <ull_calcbandwidthadj+0x7c>)
 80191fc:	2500      	movs	r5, #0
 80191fe:	462a      	mov	r2, r5
 8019200:	4631      	mov	r1, r6
 8019202:	4620      	mov	r0, r4
 8019204:	f7fe fd81 	bl	8017d0a <dwt_read8bitoffsetreg>
 8019208:	f010 0f01 	tst.w	r0, #1
 801920c:	d1f7      	bne.n	80191fe <ull_calcbandwidthadj+0x3e>
 801920e:	4620      	mov	r0, r4
 8019210:	f7ff faf8 	bl	8018804 <ull_disable_rftx_blocks>
 8019214:	2100      	movs	r1, #0
 8019216:	4620      	mov	r0, r4
 8019218:	f7ff fafe 	bl	8018818 <ull_disable_rf_tx>
 801921c:	2105      	movs	r1, #5
 801921e:	4620      	mov	r0, r4
 8019220:	f7ff f974 	bl	801850c <ull_force_clocks>
 8019224:	2200      	movs	r2, #0
 8019226:	4906      	ldr	r1, [pc, #24]	; (8019240 <ull_calcbandwidthadj+0x80>)
 8019228:	4620      	mov	r0, r4
 801922a:	f7fe fd6e 	bl	8017d0a <dwt_read8bitoffsetreg>
 801922e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8019232:	b002      	add	sp, #8
 8019234:	bd70      	pop	{r4, r5, r6, pc}
 8019236:	bf00      	nop
 8019238:	0008001c 	.word	0x0008001c
 801923c:	00080010 	.word	0x00080010
 8019240:	0007001c 	.word	0x0007001c

08019244 <ull_configuretxrf>:
 8019244:	b538      	push	{r3, r4, r5, lr}
 8019246:	4605      	mov	r5, r0
 8019248:	460c      	mov	r4, r1
 801924a:	f8b1 1005 	ldrh.w	r1, [r1, #5]
 801924e:	b149      	cbz	r1, 8019264 <ull_configuretxrf+0x20>
 8019250:	f7ff ffb6 	bl	80191c0 <ull_calcbandwidthadj>
 8019254:	f8d4 3001 	ldr.w	r3, [r4, #1]
 8019258:	2200      	movs	r2, #0
 801925a:	4905      	ldr	r1, [pc, #20]	; (8019270 <ull_configuretxrf+0x2c>)
 801925c:	4628      	mov	r0, r5
 801925e:	f7ff f9a1 	bl	80185a4 <dwt_write32bitoffsetreg>
 8019262:	bd38      	pop	{r3, r4, r5, pc}
 8019264:	7823      	ldrb	r3, [r4, #0]
 8019266:	2200      	movs	r2, #0
 8019268:	4902      	ldr	r1, [pc, #8]	; (8019274 <ull_configuretxrf+0x30>)
 801926a:	f7ff fb29 	bl	80188c0 <dwt_write8bitoffsetreg>
 801926e:	e7f1      	b.n	8019254 <ull_configuretxrf+0x10>
 8019270:	00010004 	.word	0x00010004
 8019274:	0007001c 	.word	0x0007001c

08019278 <ull_repeated_frames>:
 8019278:	b530      	push	{r4, r5, lr}
 801927a:	b083      	sub	sp, #12
 801927c:	4604      	mov	r4, r0
 801927e:	460d      	mov	r5, r1
 8019280:	2310      	movs	r3, #16
 8019282:	9300      	str	r3, [sp, #0]
 8019284:	23ff      	movs	r3, #255	; 0xff
 8019286:	2200      	movs	r2, #0
 8019288:	4906      	ldr	r1, [pc, #24]	; (80192a4 <ull_repeated_frames+0x2c>)
 801928a:	f7ff ff4f 	bl	801912c <dwt_modify8bitoffsetreg>
 801928e:	462b      	mov	r3, r5
 8019290:	2d02      	cmp	r5, #2
 8019292:	bf38      	it	cc
 8019294:	2302      	movcc	r3, #2
 8019296:	2200      	movs	r2, #0
 8019298:	2128      	movs	r1, #40	; 0x28
 801929a:	4620      	mov	r0, r4
 801929c:	f7ff f982 	bl	80185a4 <dwt_write32bitoffsetreg>
 80192a0:	b003      	add	sp, #12
 80192a2:	bd30      	pop	{r4, r5, pc}
 80192a4:	000f0028 	.word	0x000f0028

080192a8 <ull_setdwstate>:
 80192a8:	b530      	push	{r4, r5, lr}
 80192aa:	b083      	sub	sp, #12
 80192ac:	4604      	mov	r4, r0
 80192ae:	2901      	cmp	r1, #1
 80192b0:	d01d      	beq.n	80192ee <ull_setdwstate+0x46>
 80192b2:	2902      	cmp	r1, #2
 80192b4:	d02f      	beq.n	8019316 <ull_setdwstate+0x6e>
 80192b6:	2301      	movs	r3, #1
 80192b8:	9300      	str	r3, [sp, #0]
 80192ba:	23ff      	movs	r3, #255	; 0xff
 80192bc:	2200      	movs	r2, #0
 80192be:	4925      	ldr	r1, [pc, #148]	; (8019354 <ull_setdwstate+0xac>)
 80192c0:	f7ff ff34 	bl	801912c <dwt_modify8bitoffsetreg>
 80192c4:	4d24      	ldr	r5, [pc, #144]	; (8019358 <ull_setdwstate+0xb0>)
 80192c6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80192ca:	9300      	str	r3, [sp, #0]
 80192cc:	f46f 7380 	mvn.w	r3, #256	; 0x100
 80192d0:	2200      	movs	r2, #0
 80192d2:	4629      	mov	r1, r5
 80192d4:	4620      	mov	r0, r4
 80192d6:	f7ff fdb7 	bl	8018e48 <dwt_modify32bitoffsetreg>
 80192da:	2300      	movs	r3, #0
 80192dc:	9300      	str	r3, [sp, #0]
 80192de:	237f      	movs	r3, #127	; 0x7f
 80192e0:	2202      	movs	r2, #2
 80192e2:	4629      	mov	r1, r5
 80192e4:	4620      	mov	r0, r4
 80192e6:	f7ff ff21 	bl	801912c <dwt_modify8bitoffsetreg>
 80192ea:	b003      	add	sp, #12
 80192ec:	bd30      	pop	{r4, r5, pc}
 80192ee:	2105      	movs	r1, #5
 80192f0:	f7ff f90c 	bl	801850c <ull_force_clocks>
 80192f4:	2302      	movs	r3, #2
 80192f6:	9300      	str	r3, [sp, #0]
 80192f8:	f04f 33ff 	mov.w	r3, #4294967295
 80192fc:	2200      	movs	r2, #0
 80192fe:	4917      	ldr	r1, [pc, #92]	; (801935c <ull_setdwstate+0xb4>)
 8019300:	4620      	mov	r0, r4
 8019302:	f7ff fda1 	bl	8018e48 <dwt_modify32bitoffsetreg>
 8019306:	2201      	movs	r2, #1
 8019308:	9200      	str	r2, [sp, #0]
 801930a:	23ff      	movs	r3, #255	; 0xff
 801930c:	4912      	ldr	r1, [pc, #72]	; (8019358 <ull_setdwstate+0xb0>)
 801930e:	4620      	mov	r0, r4
 8019310:	f7ff ff0c 	bl	801912c <dwt_modify8bitoffsetreg>
 8019314:	e7e9      	b.n	80192ea <ull_setdwstate+0x42>
 8019316:	2303      	movs	r3, #3
 8019318:	9300      	str	r3, [sp, #0]
 801931a:	23ff      	movs	r3, #255	; 0xff
 801931c:	2200      	movs	r2, #0
 801931e:	490d      	ldr	r1, [pc, #52]	; (8019354 <ull_setdwstate+0xac>)
 8019320:	f7ff ff04 	bl	801912c <dwt_modify8bitoffsetreg>
 8019324:	4d0c      	ldr	r5, [pc, #48]	; (8019358 <ull_setdwstate+0xb0>)
 8019326:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801932a:	9300      	str	r3, [sp, #0]
 801932c:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8019330:	2200      	movs	r2, #0
 8019332:	4629      	mov	r1, r5
 8019334:	4620      	mov	r0, r4
 8019336:	f7ff fd87 	bl	8018e48 <dwt_modify32bitoffsetreg>
 801933a:	2300      	movs	r3, #0
 801933c:	9300      	str	r3, [sp, #0]
 801933e:	237f      	movs	r3, #127	; 0x7f
 8019340:	2202      	movs	r2, #2
 8019342:	4629      	mov	r1, r5
 8019344:	4620      	mov	r0, r4
 8019346:	f7ff fef1 	bl	801912c <dwt_modify8bitoffsetreg>
 801934a:	2105      	movs	r1, #5
 801934c:	4620      	mov	r0, r4
 801934e:	f7ff f8dd 	bl	801850c <ull_force_clocks>
 8019352:	e7ca      	b.n	80192ea <ull_setdwstate+0x42>
 8019354:	00110004 	.word	0x00110004
 8019358:	00110008 	.word	0x00110008
 801935c:	00090008 	.word	0x00090008

08019360 <ull_configureframefilter>:
 8019360:	b530      	push	{r4, r5, lr}
 8019362:	b083      	sub	sp, #12
 8019364:	4605      	mov	r5, r0
 8019366:	2902      	cmp	r1, #2
 8019368:	d00e      	beq.n	8019388 <ull_configureframefilter+0x28>
 801936a:	2400      	movs	r4, #0
 801936c:	9400      	str	r4, [sp, #0]
 801936e:	23fe      	movs	r3, #254	; 0xfe
 8019370:	4622      	mov	r2, r4
 8019372:	2110      	movs	r1, #16
 8019374:	f7ff feda 	bl	801912c <dwt_modify8bitoffsetreg>
 8019378:	4623      	mov	r3, r4
 801937a:	4622      	mov	r2, r4
 801937c:	2114      	movs	r1, #20
 801937e:	4628      	mov	r0, r5
 8019380:	f7ff f8b3 	bl	80184ea <dwt_write16bitoffsetreg>
 8019384:	b003      	add	sp, #12
 8019386:	bd30      	pop	{r4, r5, pc}
 8019388:	4614      	mov	r4, r2
 801938a:	2301      	movs	r3, #1
 801938c:	9300      	str	r3, [sp, #0]
 801938e:	23ff      	movs	r3, #255	; 0xff
 8019390:	2200      	movs	r2, #0
 8019392:	2110      	movs	r1, #16
 8019394:	f7ff feca 	bl	801912c <dwt_modify8bitoffsetreg>
 8019398:	4623      	mov	r3, r4
 801939a:	2200      	movs	r2, #0
 801939c:	2114      	movs	r1, #20
 801939e:	4628      	mov	r0, r5
 80193a0:	f7ff f8a3 	bl	80184ea <dwt_write16bitoffsetreg>
 80193a4:	e7ee      	b.n	8019384 <ull_configureframefilter+0x24>
	...

080193a8 <ull_run_pgfcal>:
 80193a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80193ac:	b082      	sub	sp, #8
 80193ae:	4605      	mov	r5, r0
 80193b0:	4c29      	ldr	r4, [pc, #164]	; (8019458 <ull_run_pgfcal+0xb0>)
 80193b2:	4b2a      	ldr	r3, [pc, #168]	; (801945c <ull_run_pgfcal+0xb4>)
 80193b4:	2200      	movs	r2, #0
 80193b6:	4621      	mov	r1, r4
 80193b8:	f7ff f8f4 	bl	80185a4 <dwt_write32bitoffsetreg>
 80193bc:	2310      	movs	r3, #16
 80193be:	9300      	str	r3, [sp, #0]
 80193c0:	23ff      	movs	r3, #255	; 0xff
 80193c2:	2200      	movs	r2, #0
 80193c4:	4621      	mov	r1, r4
 80193c6:	4628      	mov	r0, r5
 80193c8:	f7ff feb0 	bl	801912c <dwt_modify8bitoffsetreg>
 80193cc:	2403      	movs	r4, #3
 80193ce:	f04f 0814 	mov.w	r8, #20
 80193d2:	4f23      	ldr	r7, [pc, #140]	; (8019460 <ull_run_pgfcal+0xb8>)
 80193d4:	2600      	movs	r6, #0
 80193d6:	4640      	mov	r0, r8
 80193d8:	f7e7 fbd7 	bl	8000b8a <deca_usleep>
 80193dc:	4632      	mov	r2, r6
 80193de:	4639      	mov	r1, r7
 80193e0:	4628      	mov	r0, r5
 80193e2:	f7fe fc92 	bl	8017d0a <dwt_read8bitoffsetreg>
 80193e6:	2801      	cmp	r0, #1
 80193e8:	d034      	beq.n	8019454 <ull_run_pgfcal+0xac>
 80193ea:	1e63      	subs	r3, r4, #1
 80193ec:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 80193f0:	d1f1      	bne.n	80193d6 <ull_run_pgfcal+0x2e>
 80193f2:	f06f 0402 	mvn.w	r4, #2
 80193f6:	4e18      	ldr	r6, [pc, #96]	; (8019458 <ull_run_pgfcal+0xb0>)
 80193f8:	2300      	movs	r3, #0
 80193fa:	461a      	mov	r2, r3
 80193fc:	4631      	mov	r1, r6
 80193fe:	4628      	mov	r0, r5
 8019400:	f7ff fa5e 	bl	80188c0 <dwt_write8bitoffsetreg>
 8019404:	2301      	movs	r3, #1
 8019406:	2200      	movs	r2, #0
 8019408:	4915      	ldr	r1, [pc, #84]	; (8019460 <ull_run_pgfcal+0xb8>)
 801940a:	4628      	mov	r0, r5
 801940c:	f7ff fa58 	bl	80188c0 <dwt_write8bitoffsetreg>
 8019410:	2301      	movs	r3, #1
 8019412:	9300      	str	r3, [sp, #0]
 8019414:	23ff      	movs	r3, #255	; 0xff
 8019416:	2202      	movs	r2, #2
 8019418:	4631      	mov	r1, r6
 801941a:	4628      	mov	r0, r5
 801941c:	f7ff fe86 	bl	801912c <dwt_modify8bitoffsetreg>
 8019420:	2200      	movs	r2, #0
 8019422:	4910      	ldr	r1, [pc, #64]	; (8019464 <ull_run_pgfcal+0xbc>)
 8019424:	4628      	mov	r0, r5
 8019426:	f7fe fc48 	bl	8017cba <dwt_read32bitoffsetreg>
 801942a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 801942e:	4298      	cmp	r0, r3
 8019430:	bf08      	it	eq
 8019432:	f06f 0403 	mvneq.w	r4, #3
 8019436:	2200      	movs	r2, #0
 8019438:	490b      	ldr	r1, [pc, #44]	; (8019468 <ull_run_pgfcal+0xc0>)
 801943a:	4628      	mov	r0, r5
 801943c:	f7fe fc3d 	bl	8017cba <dwt_read32bitoffsetreg>
 8019440:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8019444:	4298      	cmp	r0, r3
 8019446:	bf14      	ite	ne
 8019448:	4620      	movne	r0, r4
 801944a:	f06f 0004 	mvneq.w	r0, #4
 801944e:	b002      	add	sp, #8
 8019450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019454:	2400      	movs	r4, #0
 8019456:	e7ce      	b.n	80193f6 <ull_run_pgfcal+0x4e>
 8019458:	0004000c 	.word	0x0004000c
 801945c:	00020001 	.word	0x00020001
 8019460:	00040020 	.word	0x00040020
 8019464:	00040014 	.word	0x00040014
 8019468:	0004001c 	.word	0x0004001c

0801946c <ull_setinterrupt>:
 801946c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019470:	b083      	sub	sp, #12
 8019472:	4605      	mov	r5, r0
 8019474:	4688      	mov	r8, r1
 8019476:	4617      	mov	r7, r2
 8019478:	461c      	mov	r4, r3
 801947a:	f7e7 fb5d 	bl	8000b38 <decamutexon>
 801947e:	4606      	mov	r6, r0
 8019480:	2c02      	cmp	r4, #2
 8019482:	d019      	beq.n	80194b8 <ull_setinterrupt+0x4c>
 8019484:	2c04      	cmp	r4, #4
 8019486:	d017      	beq.n	80194b8 <ull_setinterrupt+0x4c>
 8019488:	f004 03fd 	and.w	r3, r4, #253	; 0xfd
 801948c:	2b01      	cmp	r3, #1
 801948e:	d03f      	beq.n	8019510 <ull_setinterrupt+0xa4>
 8019490:	f04f 0900 	mov.w	r9, #0
 8019494:	f8cd 9000 	str.w	r9, [sp]
 8019498:	ea6f 0308 	mvn.w	r3, r8
 801949c:	464a      	mov	r2, r9
 801949e:	213c      	movs	r1, #60	; 0x3c
 80194a0:	4628      	mov	r0, r5
 80194a2:	f7ff fcd1 	bl	8018e48 <dwt_modify32bitoffsetreg>
 80194a6:	f8cd 9000 	str.w	r9, [sp]
 80194aa:	43fb      	mvns	r3, r7
 80194ac:	464a      	mov	r2, r9
 80194ae:	2140      	movs	r1, #64	; 0x40
 80194b0:	4628      	mov	r0, r5
 80194b2:	f7ff fcc9 	bl	8018e48 <dwt_modify32bitoffsetreg>
 80194b6:	e00b      	b.n	80194d0 <ull_setinterrupt+0x64>
 80194b8:	4643      	mov	r3, r8
 80194ba:	2200      	movs	r2, #0
 80194bc:	213c      	movs	r1, #60	; 0x3c
 80194be:	4628      	mov	r0, r5
 80194c0:	f7ff f870 	bl	80185a4 <dwt_write32bitoffsetreg>
 80194c4:	463b      	mov	r3, r7
 80194c6:	2200      	movs	r2, #0
 80194c8:	2140      	movs	r1, #64	; 0x40
 80194ca:	4628      	mov	r0, r5
 80194cc:	f7ff f86a 	bl	80185a4 <dwt_write32bitoffsetreg>
 80194d0:	3c03      	subs	r4, #3
 80194d2:	b2e4      	uxtb	r4, r4
 80194d4:	2c01      	cmp	r4, #1
 80194d6:	d92d      	bls.n	8019534 <ull_setinterrupt+0xc8>
 80194d8:	2200      	movs	r2, #0
 80194da:	213c      	movs	r1, #60	; 0x3c
 80194dc:	4628      	mov	r0, r5
 80194de:	f7fe fbec 	bl	8017cba <dwt_read32bitoffsetreg>
 80194e2:	4603      	mov	r3, r0
 80194e4:	2200      	movs	r2, #0
 80194e6:	2144      	movs	r1, #68	; 0x44
 80194e8:	4628      	mov	r0, r5
 80194ea:	f7ff f85b 	bl	80185a4 <dwt_write32bitoffsetreg>
 80194ee:	2200      	movs	r2, #0
 80194f0:	2140      	movs	r1, #64	; 0x40
 80194f2:	4628      	mov	r0, r5
 80194f4:	f7fe fbe1 	bl	8017cba <dwt_read32bitoffsetreg>
 80194f8:	4603      	mov	r3, r0
 80194fa:	2200      	movs	r2, #0
 80194fc:	2148      	movs	r1, #72	; 0x48
 80194fe:	4628      	mov	r0, r5
 8019500:	f7ff f850 	bl	80185a4 <dwt_write32bitoffsetreg>
 8019504:	4630      	mov	r0, r6
 8019506:	f7e7 fb28 	bl	8000b5a <decamutexoff>
 801950a:	b003      	add	sp, #12
 801950c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019510:	f8cd 8000 	str.w	r8, [sp]
 8019514:	f04f 33ff 	mov.w	r3, #4294967295
 8019518:	2200      	movs	r2, #0
 801951a:	213c      	movs	r1, #60	; 0x3c
 801951c:	4628      	mov	r0, r5
 801951e:	f7ff fc93 	bl	8018e48 <dwt_modify32bitoffsetreg>
 8019522:	9700      	str	r7, [sp, #0]
 8019524:	f04f 33ff 	mov.w	r3, #4294967295
 8019528:	2200      	movs	r2, #0
 801952a:	2140      	movs	r1, #64	; 0x40
 801952c:	4628      	mov	r0, r5
 801952e:	f7ff fc8b 	bl	8018e48 <dwt_modify32bitoffsetreg>
 8019532:	e7cd      	b.n	80194d0 <ull_setinterrupt+0x64>
 8019534:	2110      	movs	r1, #16
 8019536:	9100      	str	r1, [sp, #0]
 8019538:	23ff      	movs	r3, #255	; 0xff
 801953a:	2202      	movs	r2, #2
 801953c:	4628      	mov	r0, r5
 801953e:	f7ff fdf5 	bl	801912c <dwt_modify8bitoffsetreg>
 8019542:	e7c9      	b.n	80194d8 <ull_setinterrupt+0x6c>

08019544 <prs_ack_enable>:
 8019544:	b500      	push	{lr}
 8019546:	b083      	sub	sp, #12
 8019548:	2900      	cmp	r1, #0
 801954a:	bf0b      	itete	eq
 801954c:	23ff      	moveq	r3, #255	; 0xff
 801954e:	23f7      	movne	r3, #247	; 0xf7
 8019550:	2200      	moveq	r2, #0
 8019552:	2208      	movne	r2, #8
 8019554:	9200      	str	r2, [sp, #0]
 8019556:	2201      	movs	r2, #1
 8019558:	2110      	movs	r1, #16
 801955a:	f7ff fde7 	bl	801912c <dwt_modify8bitoffsetreg>
 801955e:	b003      	add	sp, #12
 8019560:	f85d fb04 	ldr.w	pc, [sp], #4

08019564 <dwt_modify16bitoffsetreg>:
 8019564:	b510      	push	{r4, lr}
 8019566:	b084      	sub	sp, #16
 8019568:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 801956c:	f88d 300c 	strb.w	r3, [sp, #12]
 8019570:	0a1b      	lsrs	r3, r3, #8
 8019572:	f88d 300d 	strb.w	r3, [sp, #13]
 8019576:	f88d 400e 	strb.w	r4, [sp, #14]
 801957a:	0a24      	lsrs	r4, r4, #8
 801957c:	f88d 400f 	strb.w	r4, [sp, #15]
 8019580:	f248 0302 	movw	r3, #32770	; 0x8002
 8019584:	9301      	str	r3, [sp, #4]
 8019586:	ab03      	add	r3, sp, #12
 8019588:	9300      	str	r3, [sp, #0]
 801958a:	2304      	movs	r3, #4
 801958c:	b292      	uxth	r2, r2
 801958e:	f7fe fb0c 	bl	8017baa <dwt_xfer3xxx>
 8019592:	b004      	add	sp, #16
 8019594:	bd10      	pop	{r4, pc}
	...

08019598 <ull_setleds>:
 8019598:	b530      	push	{r4, r5, lr}
 801959a:	b083      	sub	sp, #12
 801959c:	4604      	mov	r4, r0
 801959e:	f011 0f01 	tst.w	r1, #1
 80195a2:	d01f      	beq.n	80195e4 <ull_setleds+0x4c>
 80195a4:	460d      	mov	r5, r1
 80195a6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80195aa:	9300      	str	r3, [sp, #0]
 80195ac:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 80195b0:	2200      	movs	r2, #0
 80195b2:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80195b6:	f7ff fc47 	bl	8018e48 <dwt_modify32bitoffsetreg>
 80195ba:	f44f 0304 	mov.w	r3, #8650752	; 0x840000
 80195be:	9300      	str	r3, [sp, #0]
 80195c0:	f04f 33ff 	mov.w	r3, #4294967295
 80195c4:	2200      	movs	r2, #0
 80195c6:	4918      	ldr	r1, [pc, #96]	; (8019628 <ull_setleds+0x90>)
 80195c8:	4620      	mov	r0, r4
 80195ca:	f7ff fc3d 	bl	8018e48 <dwt_modify32bitoffsetreg>
 80195ce:	f015 0f02 	tst.w	r5, #2
 80195d2:	d11a      	bne.n	801960a <ull_setleds+0x72>
 80195d4:	f44f 7388 	mov.w	r3, #272	; 0x110
 80195d8:	2200      	movs	r2, #0
 80195da:	4914      	ldr	r1, [pc, #80]	; (801962c <ull_setleds+0x94>)
 80195dc:	4620      	mov	r0, r4
 80195de:	f7fe ffe1 	bl	80185a4 <dwt_write32bitoffsetreg>
 80195e2:	e010      	b.n	8019606 <ull_setleds+0x6e>
 80195e4:	2500      	movs	r5, #0
 80195e6:	9500      	str	r5, [sp, #0]
 80195e8:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 80195ec:	462a      	mov	r2, r5
 80195ee:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80195f2:	f7ff fc29 	bl	8018e48 <dwt_modify32bitoffsetreg>
 80195f6:	9500      	str	r5, [sp, #0]
 80195f8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80195fc:	462a      	mov	r2, r5
 80195fe:	490b      	ldr	r1, [pc, #44]	; (801962c <ull_setleds+0x94>)
 8019600:	4620      	mov	r0, r4
 8019602:	f7ff ffaf 	bl	8019564 <dwt_modify16bitoffsetreg>
 8019606:	b003      	add	sp, #12
 8019608:	bd30      	pop	{r4, r5, pc}
 801960a:	4d08      	ldr	r5, [pc, #32]	; (801962c <ull_setleds+0x94>)
 801960c:	4b08      	ldr	r3, [pc, #32]	; (8019630 <ull_setleds+0x98>)
 801960e:	2200      	movs	r2, #0
 8019610:	4629      	mov	r1, r5
 8019612:	4620      	mov	r0, r4
 8019614:	f7fe ffc6 	bl	80185a4 <dwt_write32bitoffsetreg>
 8019618:	f44f 7388 	mov.w	r3, #272	; 0x110
 801961c:	2200      	movs	r2, #0
 801961e:	4629      	mov	r1, r5
 8019620:	4620      	mov	r0, r4
 8019622:	f7fe ffbf 	bl	80185a4 <dwt_write32bitoffsetreg>
 8019626:	e7ee      	b.n	8019606 <ull_setleds+0x6e>
 8019628:	00110004 	.word	0x00110004
 801962c:	00110018 	.word	0x00110018
 8019630:	000f0110 	.word	0x000f0110

08019634 <ull_pgf_cal>:
 8019634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019636:	b083      	sub	sp, #12
 8019638:	4604      	mov	r4, r0
 801963a:	2901      	cmp	r1, #1
 801963c:	d009      	beq.n	8019652 <ull_pgf_cal+0x1e>
 801963e:	2014      	movs	r0, #20
 8019640:	f7e7 faa3 	bl	8000b8a <deca_usleep>
 8019644:	4620      	mov	r0, r4
 8019646:	f7ff feaf 	bl	80193a8 <ull_run_pgfcal>
 801964a:	4605      	mov	r5, r0
 801964c:	4628      	mov	r0, r5
 801964e:	b003      	add	sp, #12
 8019650:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019652:	4e0f      	ldr	r6, [pc, #60]	; (8019690 <ull_pgf_cal+0x5c>)
 8019654:	2200      	movs	r2, #0
 8019656:	4631      	mov	r1, r6
 8019658:	f7fe fb45 	bl	8017ce6 <dwt_read16bitoffsetreg>
 801965c:	4607      	mov	r7, r0
 801965e:	f240 1307 	movw	r3, #263	; 0x107
 8019662:	9300      	str	r3, [sp, #0]
 8019664:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019668:	2200      	movs	r2, #0
 801966a:	4631      	mov	r1, r6
 801966c:	4620      	mov	r0, r4
 801966e:	f7ff ff79 	bl	8019564 <dwt_modify16bitoffsetreg>
 8019672:	2014      	movs	r0, #20
 8019674:	f7e7 fa89 	bl	8000b8a <deca_usleep>
 8019678:	4620      	mov	r0, r4
 801967a:	f7ff fe95 	bl	80193a8 <ull_run_pgfcal>
 801967e:	4605      	mov	r5, r0
 8019680:	2200      	movs	r2, #0
 8019682:	9200      	str	r2, [sp, #0]
 8019684:	463b      	mov	r3, r7
 8019686:	4631      	mov	r1, r6
 8019688:	4620      	mov	r0, r4
 801968a:	f7ff ff6b 	bl	8019564 <dwt_modify16bitoffsetreg>
 801968e:	e7dd      	b.n	801964c <ull_pgf_cal+0x18>
 8019690:	00070048 	.word	0x00070048

08019694 <ull_setgpiovalue>:
 8019694:	b500      	push	{lr}
 8019696:	b083      	sub	sp, #12
 8019698:	2a01      	cmp	r2, #1
 801969a:	d009      	beq.n	80196b0 <ull_setgpiovalue+0x1c>
 801969c:	43cb      	mvns	r3, r1
 801969e:	2200      	movs	r2, #0
 80196a0:	9200      	str	r2, [sp, #0]
 80196a2:	b29b      	uxth	r3, r3
 80196a4:	4906      	ldr	r1, [pc, #24]	; (80196c0 <ull_setgpiovalue+0x2c>)
 80196a6:	f7ff ff5d 	bl	8019564 <dwt_modify16bitoffsetreg>
 80196aa:	b003      	add	sp, #12
 80196ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80196b0:	9100      	str	r1, [sp, #0]
 80196b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80196b6:	2200      	movs	r2, #0
 80196b8:	4901      	ldr	r1, [pc, #4]	; (80196c0 <ull_setgpiovalue+0x2c>)
 80196ba:	f7ff ff53 	bl	8019564 <dwt_modify16bitoffsetreg>
 80196be:	e7f4      	b.n	80196aa <ull_setgpiovalue+0x16>
 80196c0:	0005000c 	.word	0x0005000c

080196c4 <ull_readaccdata>:
 80196c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80196c6:	b083      	sub	sp, #12
 80196c8:	4604      	mov	r4, r0
 80196ca:	460f      	mov	r7, r1
 80196cc:	4616      	mov	r6, r2
 80196ce:	461d      	mov	r5, r3
 80196d0:	f248 0340 	movw	r3, #32832	; 0x8040
 80196d4:	9300      	str	r3, [sp, #0]
 80196d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80196da:	2200      	movs	r2, #0
 80196dc:	4918      	ldr	r1, [pc, #96]	; (8019740 <ull_readaccdata+0x7c>)
 80196de:	f7ff ff41 	bl	8019564 <dwt_modify16bitoffsetreg>
 80196e2:	19aa      	adds	r2, r5, r6
 80196e4:	f243 0301 	movw	r3, #12289	; 0x3001
 80196e8:	429a      	cmp	r2, r3
 80196ea:	dc15      	bgt.n	8019718 <ull_readaccdata+0x54>
 80196ec:	2d7f      	cmp	r5, #127	; 0x7f
 80196ee:	d91d      	bls.n	801972c <ull_readaccdata+0x68>
 80196f0:	2315      	movs	r3, #21
 80196f2:	2200      	movs	r2, #0
 80196f4:	4913      	ldr	r1, [pc, #76]	; (8019744 <ull_readaccdata+0x80>)
 80196f6:	4620      	mov	r0, r4
 80196f8:	f7fe ff54 	bl	80185a4 <dwt_write32bitoffsetreg>
 80196fc:	462b      	mov	r3, r5
 80196fe:	2200      	movs	r2, #0
 8019700:	4911      	ldr	r1, [pc, #68]	; (8019748 <ull_readaccdata+0x84>)
 8019702:	4620      	mov	r0, r4
 8019704:	f7fe ff4e 	bl	80185a4 <dwt_write32bitoffsetreg>
 8019708:	9700      	str	r7, [sp, #0]
 801970a:	4633      	mov	r3, r6
 801970c:	2200      	movs	r2, #0
 801970e:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 8019712:	4620      	mov	r0, r4
 8019714:	f7fe fac7 	bl	8017ca6 <dwt_readfromdevice>
 8019718:	2200      	movs	r2, #0
 801971a:	9200      	str	r2, [sp, #0]
 801971c:	f647 73bf 	movw	r3, #32703	; 0x7fbf
 8019720:	4907      	ldr	r1, [pc, #28]	; (8019740 <ull_readaccdata+0x7c>)
 8019722:	4620      	mov	r0, r4
 8019724:	f7ff ff1e 	bl	8019564 <dwt_modify16bitoffsetreg>
 8019728:	b003      	add	sp, #12
 801972a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801972c:	9700      	str	r7, [sp, #0]
 801972e:	4633      	mov	r3, r6
 8019730:	462a      	mov	r2, r5
 8019732:	f44f 11a8 	mov.w	r1, #1376256	; 0x150000
 8019736:	4620      	mov	r0, r4
 8019738:	f7fe fab5 	bl	8017ca6 <dwt_readfromdevice>
 801973c:	e7ec      	b.n	8019718 <ull_readaccdata+0x54>
 801973e:	bf00      	nop
 8019740:	00110004 	.word	0x00110004
 8019744:	001f0004 	.word	0x001f0004
 8019748:	001f0008 	.word	0x001f0008

0801974c <ull_repeated_cw>:
 801974c:	b570      	push	{r4, r5, r6, lr}
 801974e:	4606      	mov	r6, r0
 8019750:	460c      	mov	r4, r1
 8019752:	4615      	mov	r5, r2
 8019754:	4b0e      	ldr	r3, [pc, #56]	; (8019790 <ull_repeated_cw+0x44>)
 8019756:	2202      	movs	r2, #2
 8019758:	490e      	ldr	r1, [pc, #56]	; (8019794 <ull_repeated_cw+0x48>)
 801975a:	f7fe ff23 	bl	80185a4 <dwt_write32bitoffsetreg>
 801975e:	2d0f      	cmp	r5, #15
 8019760:	bfa8      	it	ge
 8019762:	250f      	movge	r5, #15
 8019764:	1e63      	subs	r3, r4, #1
 8019766:	2b03      	cmp	r3, #3
 8019768:	bf28      	it	cs
 801976a:	2404      	movcs	r4, #4
 801976c:	2310      	movs	r3, #16
 801976e:	4123      	asrs	r3, r4
 8019770:	2200      	movs	r2, #0
 8019772:	4909      	ldr	r1, [pc, #36]	; (8019798 <ull_repeated_cw+0x4c>)
 8019774:	4630      	mov	r0, r6
 8019776:	f7fe ff15 	bl	80185a4 <dwt_write32bitoffsetreg>
 801977a:	1e63      	subs	r3, r4, #1
 801977c:	009b      	lsls	r3, r3, #2
 801977e:	fa05 f303 	lsl.w	r3, r5, r3
 8019782:	2200      	movs	r2, #0
 8019784:	4905      	ldr	r1, [pc, #20]	; (801979c <ull_repeated_cw+0x50>)
 8019786:	4630      	mov	r0, r6
 8019788:	f7fe ff0c 	bl	80185a4 <dwt_write32bitoffsetreg>
 801978c:	bd70      	pop	{r4, r5, r6, pc}
 801978e:	bf00      	nop
 8019790:	00d20874 	.word	0x00d20874
 8019794:	00110010 	.word	0x00110010
 8019798:	00070028 	.word	0x00070028
 801979c:	00080018 	.word	0x00080018

080197a0 <ull_configure>:
 80197a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197a4:	b083      	sub	sp, #12
 80197a6:	4604      	mov	r4, r0
 80197a8:	460d      	mov	r5, r1
 80197aa:	f891 9000 	ldrb.w	r9, [r1]
 80197ae:	790b      	ldrb	r3, [r1, #4]
 80197b0:	2b18      	cmp	r3, #24
 80197b2:	d814      	bhi.n	80197de <ull_configure+0x3e>
 80197b4:	78cf      	ldrb	r7, [r1, #3]
 80197b6:	2f18      	cmp	r7, #24
 80197b8:	bf94      	ite	ls
 80197ba:	2700      	movls	r7, #0
 80197bc:	2701      	movhi	r7, #1
 80197be:	b2ff      	uxtb	r7, r7
 80197c0:	79eb      	ldrb	r3, [r5, #7]
 80197c2:	2b01      	cmp	r3, #1
 80197c4:	bf0c      	ite	eq
 80197c6:	2110      	moveq	r1, #16
 80197c8:	2100      	movne	r1, #0
 80197ca:	786b      	ldrb	r3, [r5, #1]
 80197cc:	3b01      	subs	r3, #1
 80197ce:	2b06      	cmp	r3, #6
 80197d0:	d810      	bhi.n	80197f4 <ull_configure+0x54>
 80197d2:	e8df f003 	tbb	[pc, r3]
 80197d6:	0f06      	.short	0x0f06
 80197d8:	0f0c120f 	.word	0x0f0c120f
 80197dc:	09          	.byte	0x09
 80197dd:	00          	.byte	0x00
 80197de:	2701      	movs	r7, #1
 80197e0:	e7ed      	b.n	80197be <ull_configure+0x1e>
 80197e2:	f04f 0a40 	mov.w	sl, #64	; 0x40
 80197e6:	e00a      	b.n	80197fe <ull_configure+0x5e>
 80197e8:	f04f 0a48 	mov.w	sl, #72	; 0x48
 80197ec:	e007      	b.n	80197fe <ull_configure+0x5e>
 80197ee:	f04f 0a80 	mov.w	sl, #128	; 0x80
 80197f2:	e004      	b.n	80197fe <ull_configure+0x5e>
 80197f4:	f44f 7a80 	mov.w	sl, #256	; 0x100
 80197f8:	e001      	b.n	80197fe <ull_configure+0x5e>
 80197fa:	f04f 0a20 	mov.w	sl, #32
 80197fe:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8019800:	8a13      	ldrh	r3, [r2, #16]
 8019802:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8019806:	8213      	strh	r3, [r2, #16]
 8019808:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801980a:	79ea      	ldrb	r2, [r5, #7]
 801980c:	72da      	strb	r2, [r3, #11]
 801980e:	7b2e      	ldrb	r6, [r5, #12]
 8019810:	1cb3      	adds	r3, r6, #2
 8019812:	2601      	movs	r6, #1
 8019814:	409e      	lsls	r6, r3
 8019816:	fa1f f886 	uxth.w	r8, r6
 801981a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 801981c:	4bca      	ldr	r3, [pc, #808]	; (8019b48 <ull_configure+0x3a8>)
 801981e:	fb03 f308 	mul.w	r3, r3, r8
 8019822:	0bdb      	lsrs	r3, r3, #15
 8019824:	8253      	strh	r3, [r2, #18]
 8019826:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8019828:	7aea      	ldrb	r2, [r5, #11]
 801982a:	755a      	strb	r2, [r3, #21]
 801982c:	7a2b      	ldrb	r3, [r5, #8]
 801982e:	015b      	lsls	r3, r3, #5
 8019830:	f003 0320 	and.w	r3, r3, #32
 8019834:	7b6a      	ldrb	r2, [r5, #13]
 8019836:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801983a:	7aea      	ldrb	r2, [r5, #11]
 801983c:	0312      	lsls	r2, r2, #12
 801983e:	f402 4230 	and.w	r2, r2, #45056	; 0xb000
 8019842:	4313      	orrs	r3, r2
 8019844:	430b      	orrs	r3, r1
 8019846:	9300      	str	r3, [sp, #0]
 8019848:	4bc0      	ldr	r3, [pc, #768]	; (8019b4c <ull_configure+0x3ac>)
 801984a:	2200      	movs	r2, #0
 801984c:	2110      	movs	r1, #16
 801984e:	4620      	mov	r0, r4
 8019850:	f7ff fafa 	bl	8018e48 <dwt_modify32bitoffsetreg>
 8019854:	2f00      	cmp	r7, #0
 8019856:	f040 80fc 	bne.w	8019a52 <ull_configure+0x2b2>
 801985a:	7aeb      	ldrb	r3, [r5, #11]
 801985c:	b1f3      	cbz	r3, 801989c <ull_configure+0xfc>
 801985e:	7b6b      	ldrb	r3, [r5, #13]
 8019860:	2b01      	cmp	r3, #1
 8019862:	f240 8121 	bls.w	8019aa8 <ull_configure+0x308>
 8019866:	7b2a      	ldrb	r2, [r5, #12]
 8019868:	4bb9      	ldr	r3, [pc, #740]	; (8019b50 <ull_configure+0x3b0>)
 801986a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801986e:	0112      	lsls	r2, r2, #4
 8019870:	0ad3      	lsrs	r3, r2, #11
 8019872:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8019876:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801987a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 801987e:	bf28      	it	cs
 8019880:	3301      	addcs	r3, #1
 8019882:	b29b      	uxth	r3, r3
 8019884:	eb0a 0ac8 	add.w	sl, sl, r8, lsl #3
 8019888:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801988c:	9300      	str	r3, [sp, #0]
 801988e:	f64f 7380 	movw	r3, #65408	; 0xff80
 8019892:	2202      	movs	r2, #2
 8019894:	49af      	ldr	r1, [pc, #700]	; (8019b54 <ull_configure+0x3b4>)
 8019896:	4620      	mov	r0, r4
 8019898:	f7ff fe64 	bl	8019564 <dwt_modify16bitoffsetreg>
 801989c:	2394      	movs	r3, #148	; 0x94
 801989e:	9300      	str	r3, [sp, #0]
 80198a0:	4bad      	ldr	r3, [pc, #692]	; (8019b58 <ull_configure+0x3b8>)
 80198a2:	2200      	movs	r2, #0
 80198a4:	49ad      	ldr	r1, [pc, #692]	; (8019b5c <ull_configure+0x3bc>)
 80198a6:	4620      	mov	r0, r4
 80198a8:	f7ff face 	bl	8018e48 <dwt_modify32bitoffsetreg>
 80198ac:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80198b0:	f340 810d 	ble.w	8019ace <ull_configure+0x32e>
 80198b4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80198b6:	8a13      	ldrh	r3, [r2, #16]
 80198b8:	f043 0320 	orr.w	r3, r3, #32
 80198bc:	8213      	strh	r3, [r2, #16]
 80198be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80198c2:	9300      	str	r3, [sp, #0]
 80198c4:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 80198c8:	2200      	movs	r2, #0
 80198ca:	49a5      	ldr	r1, [pc, #660]	; (8019b60 <ull_configure+0x3c0>)
 80198cc:	4620      	mov	r0, r4
 80198ce:	f7ff fe49 	bl	8019564 <dwt_modify16bitoffsetreg>
 80198d2:	7b6b      	ldrb	r3, [r5, #13]
 80198d4:	2b01      	cmp	r3, #1
 80198d6:	f000 8105 	beq.w	8019ae4 <ull_configure+0x344>
 80198da:	78ab      	ldrb	r3, [r5, #2]
 80198dc:	f043 0310 	orr.w	r3, r3, #16
 80198e0:	9300      	str	r3, [sp, #0]
 80198e2:	23fc      	movs	r3, #252	; 0xfc
 80198e4:	2200      	movs	r2, #0
 80198e6:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 80198ea:	4620      	mov	r0, r4
 80198ec:	f7ff fc1e 	bl	801912c <dwt_modify8bitoffsetreg>
 80198f0:	1e73      	subs	r3, r6, #1
 80198f2:	b2db      	uxtb	r3, r3
 80198f4:	2200      	movs	r2, #0
 80198f6:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80198fa:	4620      	mov	r0, r4
 80198fc:	f7fe ffe0 	bl	80188c0 <dwt_write8bitoffsetreg>
 8019900:	786b      	ldrb	r3, [r5, #1]
 8019902:	2b07      	cmp	r3, #7
 8019904:	bf0c      	ite	eq
 8019906:	2308      	moveq	r3, #8
 8019908:	2300      	movne	r3, #0
 801990a:	2201      	movs	r2, #1
 801990c:	2124      	movs	r1, #36	; 0x24
 801990e:	4620      	mov	r0, r4
 8019910:	f7fe ffd6 	bl	80188c0 <dwt_write8bitoffsetreg>
 8019914:	7aeb      	ldrb	r3, [r5, #11]
 8019916:	f003 0303 	and.w	r3, r3, #3
 801991a:	2b03      	cmp	r3, #3
 801991c:	bf0c      	ite	eq
 801991e:	4b91      	ldreq	r3, [pc, #580]	; (8019b64 <ull_configure+0x3c4>)
 8019920:	4b91      	ldrne	r3, [pc, #580]	; (8019b68 <ull_configure+0x3c8>)
 8019922:	2200      	movs	r2, #0
 8019924:	4991      	ldr	r1, [pc, #580]	; (8019b6c <ull_configure+0x3cc>)
 8019926:	4620      	mov	r0, r4
 8019928:	f7fe fe3c 	bl	80185a4 <dwt_write32bitoffsetreg>
 801992c:	2200      	movs	r2, #0
 801992e:	4990      	ldr	r1, [pc, #576]	; (8019b70 <ull_configure+0x3d0>)
 8019930:	4620      	mov	r0, r4
 8019932:	f7fe f9c2 	bl	8017cba <dwt_read32bitoffsetreg>
 8019936:	f420 50ff 	bic.w	r0, r0, #8160	; 0x1fe0
 801993a:	f020 001f 	bic.w	r0, r0, #31
 801993e:	f1b9 0f09 	cmp.w	r9, #9
 8019942:	bf08      	it	eq
 8019944:	f040 0001 	orreq.w	r0, r0, #1
 8019948:	792a      	ldrb	r2, [r5, #4]
 801994a:	0212      	lsls	r2, r2, #8
 801994c:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
 8019950:	78eb      	ldrb	r3, [r5, #3]
 8019952:	00db      	lsls	r3, r3, #3
 8019954:	b2db      	uxtb	r3, r3
 8019956:	431a      	orrs	r2, r3
 8019958:	796b      	ldrb	r3, [r5, #5]
 801995a:	005b      	lsls	r3, r3, #1
 801995c:	f003 0306 	and.w	r3, r3, #6
 8019960:	4313      	orrs	r3, r2
 8019962:	4303      	orrs	r3, r0
 8019964:	2200      	movs	r2, #0
 8019966:	4982      	ldr	r1, [pc, #520]	; (8019b70 <ull_configure+0x3d0>)
 8019968:	4620      	mov	r0, r4
 801996a:	f7fe fe1b 	bl	80185a4 <dwt_write32bitoffsetreg>
 801996e:	79aa      	ldrb	r2, [r5, #6]
 8019970:	786b      	ldrb	r3, [r5, #1]
 8019972:	031b      	lsls	r3, r3, #12
 8019974:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8019978:	9300      	str	r3, [sp, #0]
 801997a:	f46f 4374 	mvn.w	r3, #62464	; 0xf400
 801997e:	2200      	movs	r2, #0
 8019980:	2120      	movs	r1, #32
 8019982:	4620      	mov	r0, r4
 8019984:	f7ff fa60 	bl	8018e48 <dwt_modify32bitoffsetreg>
 8019988:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 801998c:	b923      	cbnz	r3, 8019998 <ull_configure+0x1f8>
 801998e:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8019992:	726b      	strb	r3, [r5, #9]
 8019994:	2300      	movs	r3, #0
 8019996:	72ab      	strb	r3, [r5, #10]
 8019998:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 801999c:	2202      	movs	r2, #2
 801999e:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 80199a2:	4620      	mov	r0, r4
 80199a4:	f7fe fda1 	bl	80184ea <dwt_write16bitoffsetreg>
 80199a8:	2202      	movs	r2, #2
 80199aa:	4972      	ldr	r1, [pc, #456]	; (8019b74 <ull_configure+0x3d4>)
 80199ac:	4620      	mov	r0, r4
 80199ae:	f7fe f9ac 	bl	8017d0a <dwt_read8bitoffsetreg>
 80199b2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80199b4:	7bdb      	ldrb	r3, [r3, #15]
 80199b6:	454b      	cmp	r3, r9
 80199b8:	f000 809e 	beq.w	8019af8 <ull_configure+0x358>
 80199bc:	2803      	cmp	r0, #3
 80199be:	f000 809f 	beq.w	8019b00 <ull_configure+0x360>
 80199c2:	f1b9 0f09 	cmp.w	r9, #9
 80199c6:	f000 80a0 	beq.w	8019b0a <ull_configure+0x36a>
 80199ca:	4b6b      	ldr	r3, [pc, #428]	; (8019b78 <ull_configure+0x3d8>)
 80199cc:	2200      	movs	r2, #0
 80199ce:	496b      	ldr	r1, [pc, #428]	; (8019b7c <ull_configure+0x3dc>)
 80199d0:	4620      	mov	r0, r4
 80199d2:	f7fe fde7 	bl	80185a4 <dwt_write32bitoffsetreg>
 80199d6:	f641 733c 	movw	r3, #7996	; 0x1f3c
 80199da:	2200      	movs	r2, #0
 80199dc:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 80199e0:	4620      	mov	r0, r4
 80199e2:	f7fe fd82 	bl	80184ea <dwt_write16bitoffsetreg>
 80199e6:	2314      	movs	r3, #20
 80199e8:	2201      	movs	r2, #1
 80199ea:	4965      	ldr	r1, [pc, #404]	; (8019b80 <ull_configure+0x3e0>)
 80199ec:	4620      	mov	r0, r4
 80199ee:	f7fe ff67 	bl	80188c0 <dwt_write8bitoffsetreg>
 80199f2:	230e      	movs	r3, #14
 80199f4:	2202      	movs	r2, #2
 80199f6:	4963      	ldr	r1, [pc, #396]	; (8019b84 <ull_configure+0x3e4>)
 80199f8:	4620      	mov	r0, r4
 80199fa:	f7fe ff61 	bl	80188c0 <dwt_write8bitoffsetreg>
 80199fe:	2381      	movs	r3, #129	; 0x81
 8019a00:	2200      	movs	r2, #0
 8019a02:	4961      	ldr	r1, [pc, #388]	; (8019b88 <ull_configure+0x3e8>)
 8019a04:	4620      	mov	r0, r4
 8019a06:	f7fe ff5b 	bl	80188c0 <dwt_write8bitoffsetreg>
 8019a0a:	2302      	movs	r3, #2
 8019a0c:	2200      	movs	r2, #0
 8019a0e:	2144      	movs	r1, #68	; 0x44
 8019a10:	4620      	mov	r0, r4
 8019a12:	f7fe ff55 	bl	80188c0 <dwt_write8bitoffsetreg>
 8019a16:	2101      	movs	r1, #1
 8019a18:	4620      	mov	r0, r4
 8019a1a:	f7ff fc45 	bl	80192a8 <ull_setdwstate>
 8019a1e:	f04f 0b32 	mov.w	fp, #50	; 0x32
 8019a22:	f04f 0814 	mov.w	r8, #20
 8019a26:	2700      	movs	r7, #0
 8019a28:	2644      	movs	r6, #68	; 0x44
 8019a2a:	4640      	mov	r0, r8
 8019a2c:	f7e7 f8ad 	bl	8000b8a <deca_usleep>
 8019a30:	463a      	mov	r2, r7
 8019a32:	4631      	mov	r1, r6
 8019a34:	4620      	mov	r0, r4
 8019a36:	f7fe f968 	bl	8017d0a <dwt_read8bitoffsetreg>
 8019a3a:	f010 0f02 	tst.w	r0, #2
 8019a3e:	f040 80b5 	bne.w	8019bac <ull_configure+0x40c>
 8019a42:	f10b 33ff 	add.w	r3, fp, #4294967295
 8019a46:	f013 0bff 	ands.w	fp, r3, #255	; 0xff
 8019a4a:	d1ee      	bne.n	8019a2a <ull_configure+0x28a>
 8019a4c:	f06f 0001 	mvn.w	r0, #1
 8019a50:	e0de      	b.n	8019c10 <ull_configure+0x470>
 8019a52:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8019a54:	8a13      	ldrh	r3, [r2, #16]
 8019a56:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8019a5a:	8213      	strh	r3, [r2, #16]
 8019a5c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8019a60:	9300      	str	r3, [sp, #0]
 8019a62:	f46f 5340 	mvn.w	r3, #12288	; 0x3000
 8019a66:	2200      	movs	r2, #0
 8019a68:	493d      	ldr	r1, [pc, #244]	; (8019b60 <ull_configure+0x3c0>)
 8019a6a:	4620      	mov	r0, r4
 8019a6c:	f7ff f9ec 	bl	8018e48 <dwt_modify32bitoffsetreg>
 8019a70:	f240 3306 	movw	r3, #774	; 0x306
 8019a74:	2200      	movs	r2, #0
 8019a76:	4945      	ldr	r1, [pc, #276]	; (8019b8c <ull_configure+0x3ec>)
 8019a78:	4620      	mov	r0, r4
 8019a7a:	f7fe fd93 	bl	80185a4 <dwt_write32bitoffsetreg>
 8019a7e:	2300      	movs	r3, #0
 8019a80:	461a      	mov	r2, r3
 8019a82:	4943      	ldr	r1, [pc, #268]	; (8019b90 <ull_configure+0x3f0>)
 8019a84:	4620      	mov	r0, r4
 8019a86:	f7fe fd8d 	bl	80185a4 <dwt_write32bitoffsetreg>
 8019a8a:	4b42      	ldr	r3, [pc, #264]	; (8019b94 <ull_configure+0x3f4>)
 8019a8c:	2200      	movs	r2, #0
 8019a8e:	4931      	ldr	r1, [pc, #196]	; (8019b54 <ull_configure+0x3b4>)
 8019a90:	4620      	mov	r0, r4
 8019a92:	f7fe fd87 	bl	80185a4 <dwt_write32bitoffsetreg>
 8019a96:	239d      	movs	r3, #157	; 0x9d
 8019a98:	9300      	str	r3, [sp, #0]
 8019a9a:	4b2f      	ldr	r3, [pc, #188]	; (8019b58 <ull_configure+0x3b8>)
 8019a9c:	2200      	movs	r2, #0
 8019a9e:	492f      	ldr	r1, [pc, #188]	; (8019b5c <ull_configure+0x3bc>)
 8019aa0:	4620      	mov	r0, r4
 8019aa2:	f7ff f9d1 	bl	8018e48 <dwt_modify32bitoffsetreg>
 8019aa6:	e714      	b.n	80198d2 <ull_configure+0x132>
 8019aa8:	7b2a      	ldrb	r2, [r5, #12]
 8019aaa:	4b29      	ldr	r3, [pc, #164]	; (8019b50 <ull_configure+0x3b0>)
 8019aac:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8019ab0:	f44f 6235 	mov.w	r2, #2896	; 0xb50
 8019ab4:	fb02 f203 	mul.w	r2, r2, r3
 8019ab8:	0c93      	lsrs	r3, r2, #18
 8019aba:	f3c2 12ca 	ubfx	r2, r2, #7, #11
 8019abe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8019ac2:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8019ac6:	bf28      	it	cs
 8019ac8:	3301      	addcs	r3, #1
 8019aca:	b29b      	uxth	r3, r3
 8019acc:	e6da      	b.n	8019884 <ull_configure+0xe4>
 8019ace:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8019ad2:	9300      	str	r3, [sp, #0]
 8019ad4:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 8019ad8:	2200      	movs	r2, #0
 8019ada:	4921      	ldr	r1, [pc, #132]	; (8019b60 <ull_configure+0x3c0>)
 8019adc:	4620      	mov	r0, r4
 8019ade:	f7ff fd41 	bl	8019564 <dwt_modify16bitoffsetreg>
 8019ae2:	e6f6      	b.n	80198d2 <ull_configure+0x132>
 8019ae4:	78ab      	ldrb	r3, [r5, #2]
 8019ae6:	9300      	str	r3, [sp, #0]
 8019ae8:	23ec      	movs	r3, #236	; 0xec
 8019aea:	2200      	movs	r2, #0
 8019aec:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 8019af0:	4620      	mov	r0, r4
 8019af2:	f7ff fb1b 	bl	801912c <dwt_modify8bitoffsetreg>
 8019af6:	e6fb      	b.n	80198f0 <ull_configure+0x150>
 8019af8:	2803      	cmp	r0, #3
 8019afa:	f47f af62 	bne.w	80199c2 <ull_configure+0x222>
 8019afe:	e058      	b.n	8019bb2 <ull_configure+0x412>
 8019b00:	2102      	movs	r1, #2
 8019b02:	4620      	mov	r0, r4
 8019b04:	f7ff fbd0 	bl	80192a8 <ull_setdwstate>
 8019b08:	e75b      	b.n	80199c2 <ull_configure+0x222>
 8019b0a:	4b23      	ldr	r3, [pc, #140]	; (8019b98 <ull_configure+0x3f8>)
 8019b0c:	2200      	movs	r2, #0
 8019b0e:	491b      	ldr	r1, [pc, #108]	; (8019b7c <ull_configure+0x3dc>)
 8019b10:	4620      	mov	r0, r4
 8019b12:	f7fe fd47 	bl	80185a4 <dwt_write32bitoffsetreg>
 8019b16:	f640 733c 	movw	r3, #3900	; 0xf3c
 8019b1a:	2200      	movs	r2, #0
 8019b1c:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 8019b20:	4620      	mov	r0, r4
 8019b22:	f7fe fce2 	bl	80184ea <dwt_write16bitoffsetreg>
 8019b26:	e75e      	b.n	80199e6 <ull_configure+0x246>
 8019b28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019b2c:	9300      	str	r3, [sp, #0]
 8019b2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019b32:	2200      	movs	r2, #0
 8019b34:	490a      	ldr	r1, [pc, #40]	; (8019b60 <ull_configure+0x3c0>)
 8019b36:	4620      	mov	r0, r4
 8019b38:	f7ff fd14 	bl	8019564 <dwt_modify16bitoffsetreg>
 8019b3c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8019b3e:	8a13      	ldrh	r3, [r2, #16]
 8019b40:	f043 0308 	orr.w	r3, r3, #8
 8019b44:	8213      	strh	r3, [r2, #16]
 8019b46:	e046      	b.n	8019bd6 <ull_configure+0x436>
 8019b48:	00026668 	.word	0x00026668
 8019b4c:	fffc4fcf 	.word	0xfffc4fcf
 8019b50:	0802135c 	.word	0x0802135c
 8019b54:	000e0014 	.word	0x000e0014
 8019b58:	bfffff00 	.word	0xbfffff00
 8019b5c:	000e0018 	.word	0x000e0018
 8019b60:	000b0008 	.word	0x000b0008
 8019b64:	af5f35cc 	.word	0xaf5f35cc
 8019b68:	af5f584c 	.word	0xaf5f584c
 8019b6c:	0006000c 	.word	0x0006000c
 8019b70:	00010008 	.word	0x00010008
 8019b74:	000f0030 	.word	0x000f0030
 8019b78:	1c071134 	.word	0x1c071134
 8019b7c:	0007001c 	.word	0x0007001c
 8019b80:	00070050 	.word	0x00070050
 8019b84:	00070018 	.word	0x00070018
 8019b88:	00090008 	.word	0x00090008
 8019b8c:	000e000c 	.word	0x000e000c
 8019b90:	000e0010 	.word	0x000e0010
 8019b94:	000c5a0a 	.word	0x000c5a0a
 8019b98:	1c010034 	.word	0x1c010034
 8019b9c:	2200      	movs	r2, #0
 8019b9e:	9200      	str	r2, [sp, #0]
 8019ba0:	23fe      	movs	r3, #254	; 0xfe
 8019ba2:	491d      	ldr	r1, [pc, #116]	; (8019c18 <ull_configure+0x478>)
 8019ba4:	4620      	mov	r0, r4
 8019ba6:	f7ff fac1 	bl	801912c <dwt_modify8bitoffsetreg>
 8019baa:	e01e      	b.n	8019bea <ull_configure+0x44a>
 8019bac:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8019bae:	f883 900f 	strb.w	r9, [r3, #15]
 8019bb2:	792b      	ldrb	r3, [r5, #4]
 8019bb4:	3b09      	subs	r3, #9
 8019bb6:	b2db      	uxtb	r3, r3
 8019bb8:	2b0f      	cmp	r3, #15
 8019bba:	d8ef      	bhi.n	8019b9c <ull_configure+0x3fc>
 8019bbc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8019bbe:	7a1b      	ldrb	r3, [r3, #8]
 8019bc0:	2b01      	cmp	r3, #1
 8019bc2:	d0b1      	beq.n	8019b28 <ull_configure+0x388>
 8019bc4:	4649      	mov	r1, r9
 8019bc6:	4620      	mov	r0, r4
 8019bc8:	f7fe fda4 	bl	8018714 <ull_configmrxlut>
 8019bcc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8019bce:	8a13      	ldrh	r3, [r2, #16]
 8019bd0:	f023 0308 	bic.w	r3, r3, #8
 8019bd4:	8213      	strh	r3, [r2, #16]
 8019bd6:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8019bda:	9300      	str	r3, [sp, #0]
 8019bdc:	f248 13ff 	movw	r3, #33279	; 0x81ff
 8019be0:	2200      	movs	r2, #0
 8019be2:	490d      	ldr	r1, [pc, #52]	; (8019c18 <ull_configure+0x478>)
 8019be4:	4620      	mov	r0, r4
 8019be6:	f7ff fcbd 	bl	8019564 <dwt_modify16bitoffsetreg>
 8019bea:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 8019bee:	bfcc      	ite	gt
 8019bf0:	f04f 5300 	movgt.w	r3, #536870912	; 0x20000000
 8019bf4:	f04f 53a0 	movle.w	r3, #335544320	; 0x14000000
 8019bf8:	9300      	str	r3, [sp, #0]
 8019bfa:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8019bfe:	2200      	movs	r2, #0
 8019c00:	4906      	ldr	r1, [pc, #24]	; (8019c1c <ull_configure+0x47c>)
 8019c02:	4620      	mov	r0, r4
 8019c04:	f7ff f920 	bl	8018e48 <dwt_modify32bitoffsetreg>
 8019c08:	2101      	movs	r1, #1
 8019c0a:	4620      	mov	r0, r4
 8019c0c:	f7ff fd12 	bl	8019634 <ull_pgf_cal>
 8019c10:	b003      	add	sp, #12
 8019c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c16:	bf00      	nop
 8019c18:	00030018 	.word	0x00030018
 8019c1c:	00060010 	.word	0x00060010

08019c20 <ull_initialise>:
 8019c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019c22:	b083      	sub	sp, #12
 8019c24:	4605      	mov	r5, r0
 8019c26:	460e      	mov	r6, r1
 8019c28:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8019c2a:	2b00      	cmp	r3, #0
 8019c2c:	d051      	beq.n	8019cd2 <ull_initialise+0xb2>
 8019c2e:	6d2c      	ldr	r4, [r5, #80]	; 0x50
 8019c30:	2300      	movs	r3, #0
 8019c32:	73a3      	strb	r3, [r4, #14]
 8019c34:	2202      	movs	r2, #2
 8019c36:	8222      	strh	r2, [r4, #16]
 8019c38:	7523      	strb	r3, [r4, #20]
 8019c3a:	7563      	strb	r3, [r4, #21]
 8019c3c:	73e3      	strb	r3, [r4, #15]
 8019c3e:	7263      	strb	r3, [r4, #9]
 8019c40:	72a3      	strb	r3, [r4, #10]
 8019c42:	2104      	movs	r1, #4
 8019c44:	4628      	mov	r0, r5
 8019c46:	f7fe fc8b 	bl	8018560 <_dwt_otpread>
 8019c4a:	4607      	mov	r7, r0
 8019c4c:	2105      	movs	r1, #5
 8019c4e:	4628      	mov	r0, r5
 8019c50:	f7fe fc86 	bl	8018560 <_dwt_otpread>
 8019c54:	b10f      	cbz	r7, 8019c5a <ull_initialise+0x3a>
 8019c56:	2800      	cmp	r0, #0
 8019c58:	d140      	bne.n	8019cdc <ull_initialise+0xbc>
 8019c5a:	2120      	movs	r1, #32
 8019c5c:	4628      	mov	r0, r5
 8019c5e:	f7fe fc7f 	bl	8018560 <_dwt_otpread>
 8019c62:	4b35      	ldr	r3, [pc, #212]	; (8019d38 <ull_initialise+0x118>)
 8019c64:	4298      	cmp	r0, r3
 8019c66:	bf0c      	ite	eq
 8019c68:	2301      	moveq	r3, #1
 8019c6a:	2300      	movne	r3, #0
 8019c6c:	7223      	strb	r3, [r4, #8]
 8019c6e:	f016 0f10 	tst.w	r6, #16
 8019c72:	d142      	bne.n	8019cfa <ull_initialise+0xda>
 8019c74:	f016 0f20 	tst.w	r6, #32
 8019c78:	d145      	bne.n	8019d06 <ull_initialise+0xe6>
 8019c7a:	f016 0f40 	tst.w	r6, #64	; 0x40
 8019c7e:	d148      	bne.n	8019d12 <ull_initialise+0xf2>
 8019c80:	f016 0f80 	tst.w	r6, #128	; 0x80
 8019c84:	d14c      	bne.n	8019d20 <ull_initialise+0x100>
 8019c86:	7aa3      	ldrb	r3, [r4, #10]
 8019c88:	b90b      	cbnz	r3, 8019c8e <ull_initialise+0x6e>
 8019c8a:	2385      	movs	r3, #133	; 0x85
 8019c8c:	72a3      	strb	r3, [r4, #10]
 8019c8e:	7a63      	ldrb	r3, [r4, #9]
 8019c90:	b90b      	cbnz	r3, 8019c96 <ull_initialise+0x76>
 8019c92:	2374      	movs	r3, #116	; 0x74
 8019c94:	7263      	strb	r3, [r4, #9]
 8019c96:	211f      	movs	r1, #31
 8019c98:	4628      	mov	r0, r5
 8019c9a:	f7fe fc61 	bl	8018560 <_dwt_otpread>
 8019c9e:	7320      	strb	r0, [r4, #12]
 8019ca0:	211e      	movs	r1, #30
 8019ca2:	4628      	mov	r0, r5
 8019ca4:	f7fe fc5c 	bl	8018560 <_dwt_otpread>
 8019ca8:	f010 003f 	ands.w	r0, r0, #63	; 0x3f
 8019cac:	bf12      	itee	ne
 8019cae:	7360      	strbne	r0, [r4, #13]
 8019cb0:	232e      	moveq	r3, #46	; 0x2e
 8019cb2:	7363      	strbeq	r3, [r4, #13]
 8019cb4:	7b63      	ldrb	r3, [r4, #13]
 8019cb6:	2200      	movs	r2, #0
 8019cb8:	4920      	ldr	r1, [pc, #128]	; (8019d3c <ull_initialise+0x11c>)
 8019cba:	4628      	mov	r0, r5
 8019cbc:	f7fe fe00 	bl	80188c0 <dwt_write8bitoffsetreg>
 8019cc0:	2135      	movs	r1, #53	; 0x35
 8019cc2:	4628      	mov	r0, r5
 8019cc4:	f7fe fc4c 	bl	8018560 <_dwt_otpread>
 8019cc8:	4603      	mov	r3, r0
 8019cca:	bb78      	cbnz	r0, 8019d2c <ull_initialise+0x10c>
 8019ccc:	2000      	movs	r0, #0
 8019cce:	b003      	add	sp, #12
 8019cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019cd2:	2028      	movs	r0, #40	; 0x28
 8019cd4:	f006 ff68 	bl	8020ba8 <malloc>
 8019cd8:	6528      	str	r0, [r5, #80]	; 0x50
 8019cda:	e7a8      	b.n	8019c2e <ull_initialise+0xe>
 8019cdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8019ce0:	9300      	str	r3, [sp, #0]
 8019ce2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019ce6:	2200      	movs	r2, #0
 8019ce8:	4915      	ldr	r1, [pc, #84]	; (8019d40 <ull_initialise+0x120>)
 8019cea:	4628      	mov	r0, r5
 8019cec:	f7ff fc3a 	bl	8019564 <dwt_modify16bitoffsetreg>
 8019cf0:	8a23      	ldrh	r3, [r4, #16]
 8019cf2:	f043 0310 	orr.w	r3, r3, #16
 8019cf6:	8223      	strh	r3, [r4, #16]
 8019cf8:	e7af      	b.n	8019c5a <ull_initialise+0x3a>
 8019cfa:	2106      	movs	r1, #6
 8019cfc:	4628      	mov	r0, r5
 8019cfe:	f7fe fc2f 	bl	8018560 <_dwt_otpread>
 8019d02:	6020      	str	r0, [r4, #0]
 8019d04:	e7b6      	b.n	8019c74 <ull_initialise+0x54>
 8019d06:	2107      	movs	r1, #7
 8019d08:	4628      	mov	r0, r5
 8019d0a:	f7fe fc29 	bl	8018560 <_dwt_otpread>
 8019d0e:	6060      	str	r0, [r4, #4]
 8019d10:	e7b3      	b.n	8019c7a <ull_initialise+0x5a>
 8019d12:	2108      	movs	r1, #8
 8019d14:	4628      	mov	r0, r5
 8019d16:	f7fe fc23 	bl	8018560 <_dwt_otpread>
 8019d1a:	0c00      	lsrs	r0, r0, #16
 8019d1c:	7260      	strb	r0, [r4, #9]
 8019d1e:	e7af      	b.n	8019c80 <ull_initialise+0x60>
 8019d20:	2109      	movs	r1, #9
 8019d22:	4628      	mov	r0, r5
 8019d24:	f7fe fc1c 	bl	8018560 <_dwt_otpread>
 8019d28:	72a0      	strb	r0, [r4, #10]
 8019d2a:	e7ac      	b.n	8019c86 <ull_initialise+0x66>
 8019d2c:	2200      	movs	r2, #0
 8019d2e:	4905      	ldr	r1, [pc, #20]	; (8019d44 <ull_initialise+0x124>)
 8019d30:	4628      	mov	r0, r5
 8019d32:	f7fe fc37 	bl	80185a4 <dwt_write32bitoffsetreg>
 8019d36:	e7c9      	b.n	8019ccc <ull_initialise+0xac>
 8019d38:	10000240 	.word	0x10000240
 8019d3c:	00090014 	.word	0x00090014
 8019d40:	000b0008 	.word	0x000b0008
 8019d44:	00090004 	.word	0x00090004

08019d48 <ull_rxenable>:
 8019d48:	b530      	push	{r4, r5, lr}
 8019d4a:	b083      	sub	sp, #12
 8019d4c:	4605      	mov	r5, r0
 8019d4e:	460c      	mov	r4, r1
 8019d50:	b171      	cbz	r1, 8019d70 <ull_rxenable+0x28>
 8019d52:	f021 0302 	bic.w	r3, r1, #2
 8019d56:	3b01      	subs	r3, #1
 8019d58:	2b0f      	cmp	r3, #15
 8019d5a:	d862      	bhi.n	8019e22 <ull_rxenable+0xda>
 8019d5c:	e8df f003 	tbb	[pc, r3]
 8019d60:	24616111 	.word	0x24616111
 8019d64:	2d616161 	.word	0x2d616161
 8019d68:	61616161 	.word	0x61616161
 8019d6c:	3a616161 	.word	0x3a616161
 8019d70:	2102      	movs	r1, #2
 8019d72:	9101      	str	r1, [sp, #4]
 8019d74:	2200      	movs	r2, #0
 8019d76:	9200      	str	r2, [sp, #0]
 8019d78:	4613      	mov	r3, r2
 8019d7a:	f7fd ff16 	bl	8017baa <dwt_xfer3xxx>
 8019d7e:	4620      	mov	r0, r4
 8019d80:	e010      	b.n	8019da4 <ull_rxenable+0x5c>
 8019d82:	2302      	movs	r3, #2
 8019d84:	9301      	str	r3, [sp, #4]
 8019d86:	2200      	movs	r2, #0
 8019d88:	9200      	str	r2, [sp, #0]
 8019d8a:	4613      	mov	r3, r2
 8019d8c:	2104      	movs	r1, #4
 8019d8e:	f7fd ff0c 	bl	8017baa <dwt_xfer3xxx>
 8019d92:	2203      	movs	r2, #3
 8019d94:	2144      	movs	r1, #68	; 0x44
 8019d96:	4628      	mov	r0, r5
 8019d98:	f7fd ffb7 	bl	8017d0a <dwt_read8bitoffsetreg>
 8019d9c:	f010 0f08 	tst.w	r0, #8
 8019da0:	d125      	bne.n	8019dee <ull_rxenable+0xa6>
 8019da2:	2000      	movs	r0, #0
 8019da4:	b003      	add	sp, #12
 8019da6:	bd30      	pop	{r4, r5, pc}
 8019da8:	2302      	movs	r3, #2
 8019daa:	9301      	str	r3, [sp, #4]
 8019dac:	2200      	movs	r2, #0
 8019dae:	9200      	str	r2, [sp, #0]
 8019db0:	4613      	mov	r3, r2
 8019db2:	210a      	movs	r1, #10
 8019db4:	f7fd fef9 	bl	8017baa <dwt_xfer3xxx>
 8019db8:	e7eb      	b.n	8019d92 <ull_rxenable+0x4a>
 8019dba:	2100      	movs	r1, #0
 8019dbc:	f7fe fc07 	bl	80185ce <_dwt_adjust_delaytime>
 8019dc0:	2302      	movs	r3, #2
 8019dc2:	9301      	str	r3, [sp, #4]
 8019dc4:	2200      	movs	r2, #0
 8019dc6:	9200      	str	r2, [sp, #0]
 8019dc8:	4613      	mov	r3, r2
 8019dca:	2108      	movs	r1, #8
 8019dcc:	4628      	mov	r0, r5
 8019dce:	f7fd feec 	bl	8017baa <dwt_xfer3xxx>
 8019dd2:	e7de      	b.n	8019d92 <ull_rxenable+0x4a>
 8019dd4:	2101      	movs	r1, #1
 8019dd6:	f7fe fbfa 	bl	80185ce <_dwt_adjust_delaytime>
 8019dda:	2302      	movs	r3, #2
 8019ddc:	9301      	str	r3, [sp, #4]
 8019dde:	2200      	movs	r2, #0
 8019de0:	9200      	str	r2, [sp, #0]
 8019de2:	4613      	mov	r3, r2
 8019de4:	2106      	movs	r1, #6
 8019de6:	4628      	mov	r0, r5
 8019de8:	f7fd fedf 	bl	8017baa <dwt_xfer3xxx>
 8019dec:	e7d1      	b.n	8019d92 <ull_rxenable+0x4a>
 8019dee:	2302      	movs	r3, #2
 8019df0:	9301      	str	r3, [sp, #4]
 8019df2:	2100      	movs	r1, #0
 8019df4:	9100      	str	r1, [sp, #0]
 8019df6:	460b      	mov	r3, r1
 8019df8:	460a      	mov	r2, r1
 8019dfa:	4628      	mov	r0, r5
 8019dfc:	f7fd fed5 	bl	8017baa <dwt_xfer3xxx>
 8019e00:	f014 0f02 	tst.w	r4, #2
 8019e04:	d002      	beq.n	8019e0c <ull_rxenable+0xc4>
 8019e06:	f04f 30ff 	mov.w	r0, #4294967295
 8019e0a:	e7cb      	b.n	8019da4 <ull_rxenable+0x5c>
 8019e0c:	2102      	movs	r1, #2
 8019e0e:	9101      	str	r1, [sp, #4]
 8019e10:	2200      	movs	r2, #0
 8019e12:	9200      	str	r2, [sp, #0]
 8019e14:	4613      	mov	r3, r2
 8019e16:	4628      	mov	r0, r5
 8019e18:	f7fd fec7 	bl	8017baa <dwt_xfer3xxx>
 8019e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8019e20:	e7c0      	b.n	8019da4 <ull_rxenable+0x5c>
 8019e22:	f04f 30ff 	mov.w	r0, #4294967295
 8019e26:	e7bd      	b.n	8019da4 <ull_rxenable+0x5c>

08019e28 <ull_softreset_no_sema_fcmd>:
 8019e28:	b570      	push	{r4, r5, r6, lr}
 8019e2a:	b082      	sub	sp, #8
 8019e2c:	4606      	mov	r6, r0
 8019e2e:	2502      	movs	r5, #2
 8019e30:	9501      	str	r5, [sp, #4]
 8019e32:	2400      	movs	r4, #0
 8019e34:	9400      	str	r4, [sp, #0]
 8019e36:	4623      	mov	r3, r4
 8019e38:	4622      	mov	r2, r4
 8019e3a:	2119      	movs	r1, #25
 8019e3c:	f7fd feb5 	bl	8017baa <dwt_xfer3xxx>
 8019e40:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8019e42:	739c      	strb	r4, [r3, #14]
 8019e44:	821d      	strh	r5, [r3, #16]
 8019e46:	751c      	strb	r4, [r3, #20]
 8019e48:	755c      	strb	r4, [r3, #21]
 8019e4a:	73dc      	strb	r4, [r3, #15]
 8019e4c:	b002      	add	sp, #8
 8019e4e:	bd70      	pop	{r4, r5, r6, pc}

08019e50 <ull_softreset_fcmd>:
 8019e50:	b570      	push	{r4, r5, r6, lr}
 8019e52:	b082      	sub	sp, #8
 8019e54:	4606      	mov	r6, r0
 8019e56:	2502      	movs	r5, #2
 8019e58:	9501      	str	r5, [sp, #4]
 8019e5a:	2400      	movs	r4, #0
 8019e5c:	9400      	str	r4, [sp, #0]
 8019e5e:	4623      	mov	r3, r4
 8019e60:	4622      	mov	r2, r4
 8019e62:	2118      	movs	r1, #24
 8019e64:	f7fd fea1 	bl	8017baa <dwt_xfer3xxx>
 8019e68:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8019e6a:	739c      	strb	r4, [r3, #14]
 8019e6c:	821d      	strh	r5, [r3, #16]
 8019e6e:	751c      	strb	r4, [r3, #20]
 8019e70:	755c      	strb	r4, [r3, #21]
 8019e72:	73dc      	strb	r4, [r3, #15]
 8019e74:	b002      	add	sp, #8
 8019e76:	bd70      	pop	{r4, r5, r6, pc}

08019e78 <dwt_ioctl>:
 8019e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e7c:	b091      	sub	sp, #68	; 0x44
 8019e7e:	4606      	mov	r6, r0
 8019e80:	4615      	mov	r5, r2
 8019e82:	461c      	mov	r4, r3
 8019e84:	299c      	cmp	r1, #156	; 0x9c
 8019e86:	f200 809f 	bhi.w	8019fc8 <dwt_ioctl+0x150>
 8019e8a:	e8df f011 	tbh	[pc, r1, lsl #1]
 8019e8e:	0a4e      	.short	0x0a4e
 8019e90:	00a30a59 	.word	0x00a30a59
 8019e94:	00c000a7 	.word	0x00c000a7
 8019e98:	0192014c 	.word	0x0192014c
 8019e9c:	0156016f 	.word	0x0156016f
 8019ea0:	01ad01a2 	.word	0x01ad01a2
 8019ea4:	01bd01b5 	.word	0x01bd01b5
 8019ea8:	01cd01c5 	.word	0x01cd01c5
 8019eac:	01d901d5 	.word	0x01d901d5
 8019eb0:	027201e1 	.word	0x027201e1
 8019eb4:	02850280 	.word	0x02850280
 8019eb8:	0294028f 	.word	0x0294028f
 8019ebc:	02a20299 	.word	0x02a20299
 8019ec0:	02dd02a7 	.word	0x02dd02a7
 8019ec4:	030502fa 	.word	0x030502fa
 8019ec8:	031a0310 	.word	0x031a0310
 8019ecc:	03480352 	.word	0x03480352
 8019ed0:	0324033e 	.word	0x0324033e
 8019ed4:	03810331 	.word	0x03810331
 8019ed8:	022f01fc 	.word	0x022f01fc
 8019edc:	0245023d 	.word	0x0245023d
 8019ee0:	09770259 	.word	0x09770259
 8019ee4:	0361097c 	.word	0x0361097c
 8019ee8:	03a3039f 	.word	0x03a3039f
 8019eec:	03b103ac 	.word	0x03b103ac
 8019ef0:	03e503db 	.word	0x03e503db
 8019ef4:	041703ed 	.word	0x041703ed
 8019ef8:	042e0423 	.word	0x042e0423
 8019efc:	04390357 	.word	0x04390357
 8019f00:	04540442 	.word	0x04540442
 8019f04:	047e046d 	.word	0x047e046d
 8019f08:	04ca04c0 	.word	0x04ca04c0
 8019f0c:	04ff04f0 	.word	0x04ff04f0
 8019f10:	0508051a 	.word	0x0508051a
 8019f14:	056a0524 	.word	0x056a0524
 8019f18:	0597057d 	.word	0x0597057d
 8019f1c:	05df05cb 	.word	0x05df05cb
 8019f20:	060405e8 	.word	0x060405e8
 8019f24:	073d05f1 	.word	0x073d05f1
 8019f28:	07cd077f 	.word	0x07cd077f
 8019f2c:	07de07d3 	.word	0x07de07d3
 8019f30:	081707f7 	.word	0x081707f7
 8019f34:	082b0821 	.word	0x082b0821
 8019f38:	08620859 	.word	0x08620859
 8019f3c:	08710868 	.word	0x08710868
 8019f40:	088b087e 	.word	0x088b087e
 8019f44:	089e0895 	.word	0x089e0895
 8019f48:	08b208a7 	.word	0x08b208a7
 8019f4c:	08c308bd 	.word	0x08c308bd
 8019f50:	08f108e6 	.word	0x08f108e6
 8019f54:	090708fc 	.word	0x090708fc
 8019f58:	09530948 	.word	0x09530948
 8019f5c:	0982096c 	.word	0x0982096c
 8019f60:	0a0109f7 	.word	0x0a0109f7
 8019f64:	0a610a0c 	.word	0x0a610a0c
 8019f68:	0a430a16 	.word	0x0a430a16
 8019f6c:	09c00771 	.word	0x09c00771
 8019f70:	0acf09e1 	.word	0x0acf09e1
 8019f74:	0a6e0ac4 	.word	0x0a6e0ac4
 8019f78:	0a840a79 	.word	0x0a840a79
 8019f7c:	0a9a0a8f 	.word	0x0a9a0a8f
 8019f80:	0ab00aa5 	.word	0x0ab00aa5
 8019f84:	0caf0ab9 	.word	0x0caf0ab9
 8019f88:	0d240ce9 	.word	0x0d240ce9
 8019f8c:	0df30d47 	.word	0x0df30d47
 8019f90:	0af70e08 	.word	0x0af70e08
 8019f94:	0bee0bbb 	.word	0x0bee0bbb
 8019f98:	0bfe0bf9 	.word	0x0bfe0bf9
 8019f9c:	0c0e0c03 	.word	0x0c0e0c03
 8019fa0:	0c2c0c21 	.word	0x0c2c0c21
 8019fa4:	0c560c41 	.word	0x0c560c41
 8019fa8:	009d0c92 	.word	0x009d0c92
 8019fac:	009d009d 	.word	0x009d009d
 8019fb0:	009d009d 	.word	0x009d009d
 8019fb4:	009d009d 	.word	0x009d009d
 8019fb8:	0d5e009d 	.word	0x0d5e009d
 8019fbc:	0ebc0d6f 	.word	0x0ebc0d6f
 8019fc0:	0dae0db9 	.word	0x0dae0db9
 8019fc4:	0dc40dcd 	.word	0x0dc40dcd
 8019fc8:	f04f 35ff 	mov.w	r5, #4294967295
 8019fcc:	4628      	mov	r0, r5
 8019fce:	b011      	add	sp, #68	; 0x44
 8019fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019fd4:	6843      	ldr	r3, [r0, #4]
 8019fd6:	4798      	blx	r3
 8019fd8:	2500      	movs	r5, #0
 8019fda:	e7f7      	b.n	8019fcc <dwt_ioctl+0x154>
 8019fdc:	2202      	movs	r2, #2
 8019fde:	49b4      	ldr	r1, [pc, #720]	; (801a2b0 <dwt_ioctl+0x438>)
 8019fe0:	f7fd fe93 	bl	8017d0a <dwt_read8bitoffsetreg>
 8019fe4:	2803      	cmp	r0, #3
 8019fe6:	d801      	bhi.n	8019fec <dwt_ioctl+0x174>
 8019fe8:	2500      	movs	r5, #0
 8019fea:	e7ef      	b.n	8019fcc <dwt_ioctl+0x154>
 8019fec:	f7e6 fda4 	bl	8000b38 <decamutexon>
 8019ff0:	4604      	mov	r4, r0
 8019ff2:	2302      	movs	r3, #2
 8019ff4:	9301      	str	r3, [sp, #4]
 8019ff6:	2500      	movs	r5, #0
 8019ff8:	9500      	str	r5, [sp, #0]
 8019ffa:	462b      	mov	r3, r5
 8019ffc:	462a      	mov	r2, r5
 8019ffe:	4629      	mov	r1, r5
 801a000:	4630      	mov	r0, r6
 801a002:	f7fd fdd2 	bl	8017baa <dwt_xfer3xxx>
 801a006:	4620      	mov	r0, r4
 801a008:	f7e6 fda7 	bl	8000b5a <decamutexoff>
 801a00c:	e7de      	b.n	8019fcc <dwt_ioctl+0x154>
 801a00e:	2c00      	cmp	r4, #0
 801a010:	f001 85fc 	beq.w	801bc0c <dwt_ioctl+0x1d94>
 801a014:	7824      	ldrb	r4, [r4, #0]
 801a016:	f014 0f1d 	tst.w	r4, #29
 801a01a:	d061      	beq.n	801a0e0 <dwt_ioctl+0x268>
 801a01c:	f014 0f01 	tst.w	r4, #1
 801a020:	d023      	beq.n	801a06a <dwt_ioctl+0x1f2>
 801a022:	f014 0f02 	tst.w	r4, #2
 801a026:	f04f 0302 	mov.w	r3, #2
 801a02a:	9301      	str	r3, [sp, #4]
 801a02c:	f04f 0200 	mov.w	r2, #0
 801a030:	9200      	str	r2, [sp, #0]
 801a032:	4613      	mov	r3, r2
 801a034:	bf14      	ite	ne
 801a036:	210d      	movne	r1, #13
 801a038:	2103      	moveq	r1, #3
 801a03a:	f7fd fdb6 	bl	8017baa <dwt_xfer3xxx>
 801a03e:	2203      	movs	r2, #3
 801a040:	2144      	movs	r1, #68	; 0x44
 801a042:	4630      	mov	r0, r6
 801a044:	f7fd fe61 	bl	8017d0a <dwt_read8bitoffsetreg>
 801a048:	f010 0f08 	tst.w	r0, #8
 801a04c:	bf08      	it	eq
 801a04e:	2500      	moveq	r5, #0
 801a050:	d0bc      	beq.n	8019fcc <dwt_ioctl+0x154>
 801a052:	2302      	movs	r3, #2
 801a054:	9301      	str	r3, [sp, #4]
 801a056:	2100      	movs	r1, #0
 801a058:	9100      	str	r1, [sp, #0]
 801a05a:	460b      	mov	r3, r1
 801a05c:	460a      	mov	r2, r1
 801a05e:	4630      	mov	r0, r6
 801a060:	f7fd fda3 	bl	8017baa <dwt_xfer3xxx>
 801a064:	f04f 35ff 	mov.w	r5, #4294967295
 801a068:	e7b0      	b.n	8019fcc <dwt_ioctl+0x154>
 801a06a:	f014 0f08 	tst.w	r4, #8
 801a06e:	d111      	bne.n	801a094 <dwt_ioctl+0x21c>
 801a070:	f014 0f10 	tst.w	r4, #16
 801a074:	d121      	bne.n	801a0ba <dwt_ioctl+0x242>
 801a076:	f014 0f02 	tst.w	r4, #2
 801a07a:	f04f 0302 	mov.w	r3, #2
 801a07e:	9301      	str	r3, [sp, #4]
 801a080:	f04f 0200 	mov.w	r2, #0
 801a084:	9200      	str	r2, [sp, #0]
 801a086:	4613      	mov	r3, r2
 801a088:	bf14      	ite	ne
 801a08a:	2110      	movne	r1, #16
 801a08c:	2109      	moveq	r1, #9
 801a08e:	f7fd fd8c 	bl	8017baa <dwt_xfer3xxx>
 801a092:	e7d4      	b.n	801a03e <dwt_ioctl+0x1c6>
 801a094:	2100      	movs	r1, #0
 801a096:	f7fe fa9a 	bl	80185ce <_dwt_adjust_delaytime>
 801a09a:	f014 0f02 	tst.w	r4, #2
 801a09e:	f04f 0302 	mov.w	r3, #2
 801a0a2:	9301      	str	r3, [sp, #4]
 801a0a4:	f04f 0200 	mov.w	r2, #0
 801a0a8:	9200      	str	r2, [sp, #0]
 801a0aa:	4613      	mov	r3, r2
 801a0ac:	bf14      	ite	ne
 801a0ae:	210f      	movne	r1, #15
 801a0b0:	2107      	moveq	r1, #7
 801a0b2:	4630      	mov	r0, r6
 801a0b4:	f7fd fd79 	bl	8017baa <dwt_xfer3xxx>
 801a0b8:	e7c1      	b.n	801a03e <dwt_ioctl+0x1c6>
 801a0ba:	2101      	movs	r1, #1
 801a0bc:	f7fe fa87 	bl	80185ce <_dwt_adjust_delaytime>
 801a0c0:	f014 0f02 	tst.w	r4, #2
 801a0c4:	f04f 0302 	mov.w	r3, #2
 801a0c8:	9301      	str	r3, [sp, #4]
 801a0ca:	f04f 0200 	mov.w	r2, #0
 801a0ce:	9200      	str	r2, [sp, #0]
 801a0d0:	4613      	mov	r3, r2
 801a0d2:	bf14      	ite	ne
 801a0d4:	210e      	movne	r1, #14
 801a0d6:	2105      	moveq	r1, #5
 801a0d8:	4630      	mov	r0, r6
 801a0da:	f7fd fd66 	bl	8017baa <dwt_xfer3xxx>
 801a0de:	e7ae      	b.n	801a03e <dwt_ioctl+0x1c6>
 801a0e0:	f014 0f20 	tst.w	r4, #32
 801a0e4:	d00f      	beq.n	801a106 <dwt_ioctl+0x28e>
 801a0e6:	f014 0f02 	tst.w	r4, #2
 801a0ea:	f04f 0302 	mov.w	r3, #2
 801a0ee:	9301      	str	r3, [sp, #4]
 801a0f0:	f04f 0500 	mov.w	r5, #0
 801a0f4:	9500      	str	r5, [sp, #0]
 801a0f6:	462b      	mov	r3, r5
 801a0f8:	462a      	mov	r2, r5
 801a0fa:	bf14      	ite	ne
 801a0fc:	2111      	movne	r1, #17
 801a0fe:	210b      	moveq	r1, #11
 801a100:	f7fd fd53 	bl	8017baa <dwt_xfer3xxx>
 801a104:	e762      	b.n	8019fcc <dwt_ioctl+0x154>
 801a106:	f014 0f02 	tst.w	r4, #2
 801a10a:	f04f 0302 	mov.w	r3, #2
 801a10e:	9301      	str	r3, [sp, #4]
 801a110:	f04f 0500 	mov.w	r5, #0
 801a114:	9500      	str	r5, [sp, #0]
 801a116:	462b      	mov	r3, r5
 801a118:	462a      	mov	r2, r5
 801a11a:	bf14      	ite	ne
 801a11c:	210c      	movne	r1, #12
 801a11e:	2101      	moveq	r1, #1
 801a120:	f7fd fd43 	bl	8017baa <dwt_xfer3xxx>
 801a124:	e752      	b.n	8019fcc <dwt_ioctl+0x154>
 801a126:	2c00      	cmp	r4, #0
 801a128:	f001 8573 	beq.w	801bc12 <dwt_ioctl+0x1d9a>
 801a12c:	6823      	ldr	r3, [r4, #0]
 801a12e:	2200      	movs	r2, #0
 801a130:	2128      	movs	r1, #40	; 0x28
 801a132:	f7fe fa37 	bl	80185a4 <dwt_write32bitoffsetreg>
 801a136:	2500      	movs	r5, #0
 801a138:	e748      	b.n	8019fcc <dwt_ioctl+0x154>
 801a13a:	6823      	ldr	r3, [r4, #0]
 801a13c:	2200      	movs	r2, #0
 801a13e:	495d      	ldr	r1, [pc, #372]	; (801a2b4 <dwt_ioctl+0x43c>)
 801a140:	f7fe fa30 	bl	80185a4 <dwt_write32bitoffsetreg>
 801a144:	6863      	ldr	r3, [r4, #4]
 801a146:	2200      	movs	r2, #0
 801a148:	495b      	ldr	r1, [pc, #364]	; (801a2b8 <dwt_ioctl+0x440>)
 801a14a:	4630      	mov	r0, r6
 801a14c:	f7fe fa2a 	bl	80185a4 <dwt_write32bitoffsetreg>
 801a150:	68a3      	ldr	r3, [r4, #8]
 801a152:	2200      	movs	r2, #0
 801a154:	4959      	ldr	r1, [pc, #356]	; (801a2bc <dwt_ioctl+0x444>)
 801a156:	4630      	mov	r0, r6
 801a158:	f7fe fa24 	bl	80185a4 <dwt_write32bitoffsetreg>
 801a15c:	68e3      	ldr	r3, [r4, #12]
 801a15e:	2200      	movs	r2, #0
 801a160:	4957      	ldr	r1, [pc, #348]	; (801a2c0 <dwt_ioctl+0x448>)
 801a162:	4630      	mov	r0, r6
 801a164:	f7fe fa1e 	bl	80185a4 <dwt_write32bitoffsetreg>
 801a168:	2500      	movs	r5, #0
 801a16a:	e72f      	b.n	8019fcc <dwt_ioctl+0x154>
 801a16c:	2c00      	cmp	r4, #0
 801a16e:	f001 8553 	beq.w	801bc18 <dwt_ioctl+0x1da0>
 801a172:	8823      	ldrh	r3, [r4, #0]
 801a174:	6865      	ldr	r5, [r4, #4]
 801a176:	2d03      	cmp	r5, #3
 801a178:	f201 8551 	bhi.w	801bc1e <dwt_ioctl+0x1da6>
 801a17c:	e8df f005 	tbb	[pc, r5]
 801a180:	130d0702 	.word	0x130d0702
 801a184:	2200      	movs	r2, #0
 801a186:	494f      	ldr	r1, [pc, #316]	; (801a2c4 <dwt_ioctl+0x44c>)
 801a188:	f7fe f9af 	bl	80184ea <dwt_write16bitoffsetreg>
 801a18c:	e71e      	b.n	8019fcc <dwt_ioctl+0x154>
 801a18e:	2202      	movs	r2, #2
 801a190:	494c      	ldr	r1, [pc, #304]	; (801a2c4 <dwt_ioctl+0x44c>)
 801a192:	f7fe f9aa 	bl	80184ea <dwt_write16bitoffsetreg>
 801a196:	2500      	movs	r5, #0
 801a198:	e718      	b.n	8019fcc <dwt_ioctl+0x154>
 801a19a:	2200      	movs	r2, #0
 801a19c:	494a      	ldr	r1, [pc, #296]	; (801a2c8 <dwt_ioctl+0x450>)
 801a19e:	f7fe f9a4 	bl	80184ea <dwt_write16bitoffsetreg>
 801a1a2:	2500      	movs	r5, #0
 801a1a4:	e712      	b.n	8019fcc <dwt_ioctl+0x154>
 801a1a6:	2202      	movs	r2, #2
 801a1a8:	4947      	ldr	r1, [pc, #284]	; (801a2c8 <dwt_ioctl+0x450>)
 801a1aa:	f7fe f99e 	bl	80184ea <dwt_write16bitoffsetreg>
 801a1ae:	2500      	movs	r5, #0
 801a1b0:	e70c      	b.n	8019fcc <dwt_ioctl+0x154>
 801a1b2:	2c00      	cmp	r4, #0
 801a1b4:	f001 8536 	beq.w	801bc24 <dwt_ioctl+0x1dac>
 801a1b8:	7823      	ldrb	r3, [r4, #0]
 801a1ba:	005b      	lsls	r3, r3, #1
 801a1bc:	f003 0306 	and.w	r3, r3, #6
 801a1c0:	9300      	str	r3, [sp, #0]
 801a1c2:	f06f 0306 	mvn.w	r3, #6
 801a1c6:	2200      	movs	r2, #0
 801a1c8:	4940      	ldr	r1, [pc, #256]	; (801a2cc <dwt_ioctl+0x454>)
 801a1ca:	f7fe fe3d 	bl	8018e48 <dwt_modify32bitoffsetreg>
 801a1ce:	2500      	movs	r5, #0
 801a1d0:	e6fc      	b.n	8019fcc <dwt_ioctl+0x154>
 801a1d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801a1d6:	9300      	str	r3, [sp, #0]
 801a1d8:	f04f 33ff 	mov.w	r3, #4294967295
 801a1dc:	2200      	movs	r2, #0
 801a1de:	493c      	ldr	r1, [pc, #240]	; (801a2d0 <dwt_ioctl+0x458>)
 801a1e0:	f7fe fe32 	bl	8018e48 <dwt_modify32bitoffsetreg>
 801a1e4:	2500      	movs	r5, #0
 801a1e6:	e6f1      	b.n	8019fcc <dwt_ioctl+0x154>
 801a1e8:	2c00      	cmp	r4, #0
 801a1ea:	f001 851e 	beq.w	801bc2a <dwt_ioctl+0x1db2>
 801a1ee:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801a1f0:	7b1b      	ldrb	r3, [r3, #12]
 801a1f2:	7023      	strb	r3, [r4, #0]
 801a1f4:	2500      	movs	r5, #0
 801a1f6:	e6e9      	b.n	8019fcc <dwt_ioctl+0x154>
 801a1f8:	2c00      	cmp	r4, #0
 801a1fa:	f001 8519 	beq.w	801bc30 <dwt_ioctl+0x1db8>
 801a1fe:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801a200:	7a5b      	ldrb	r3, [r3, #9]
 801a202:	7023      	strb	r3, [r4, #0]
 801a204:	2500      	movs	r5, #0
 801a206:	e6e1      	b.n	8019fcc <dwt_ioctl+0x154>
 801a208:	2c00      	cmp	r4, #0
 801a20a:	f001 8514 	beq.w	801bc36 <dwt_ioctl+0x1dbe>
 801a20e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801a210:	7a9b      	ldrb	r3, [r3, #10]
 801a212:	7023      	strb	r3, [r4, #0]
 801a214:	2500      	movs	r5, #0
 801a216:	e6d9      	b.n	8019fcc <dwt_ioctl+0x154>
 801a218:	2c00      	cmp	r4, #0
 801a21a:	f001 850f 	beq.w	801bc3c <dwt_ioctl+0x1dc4>
 801a21e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801a220:	681b      	ldr	r3, [r3, #0]
 801a222:	6023      	str	r3, [r4, #0]
 801a224:	2500      	movs	r5, #0
 801a226:	e6d1      	b.n	8019fcc <dwt_ioctl+0x154>
 801a228:	2c00      	cmp	r4, #0
 801a22a:	f001 850a 	beq.w	801bc42 <dwt_ioctl+0x1dca>
 801a22e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801a230:	685b      	ldr	r3, [r3, #4]
 801a232:	6023      	str	r3, [r4, #0]
 801a234:	2500      	movs	r5, #0
 801a236:	e6c9      	b.n	8019fcc <dwt_ioctl+0x154>
 801a238:	f7fe fc72 	bl	8018b20 <ull_signal_rx_buff_free>
 801a23c:	2500      	movs	r5, #0
 801a23e:	e6c5      	b.n	8019fcc <dwt_ioctl+0x154>
 801a240:	2c00      	cmp	r4, #0
 801a242:	f001 8501 	beq.w	801bc48 <dwt_ioctl+0x1dd0>
 801a246:	6821      	ldr	r1, [r4, #0]
 801a248:	f7fe f9e7 	bl	801861a <ull_setrxaftertxdelay>
 801a24c:	2500      	movs	r5, #0
 801a24e:	e6bd      	b.n	8019fcc <dwt_ioctl+0x154>
 801a250:	2c00      	cmp	r4, #0
 801a252:	f001 84fc 	beq.w	801bc4e <dwt_ioctl+0x1dd6>
 801a256:	7825      	ldrb	r5, [r4, #0]
 801a258:	b15d      	cbz	r5, 801a272 <dwt_ioctl+0x3fa>
 801a25a:	6864      	ldr	r4, [r4, #4]
 801a25c:	2340      	movs	r3, #64	; 0x40
 801a25e:	9300      	str	r3, [sp, #0]
 801a260:	23ff      	movs	r3, #255	; 0xff
 801a262:	2200      	movs	r2, #0
 801a264:	2110      	movs	r1, #16
 801a266:	f7fe ff61 	bl	801912c <dwt_modify8bitoffsetreg>
 801a26a:	2d02      	cmp	r5, #2
 801a26c:	d107      	bne.n	801a27e <dwt_ioctl+0x406>
 801a26e:	60f4      	str	r4, [r6, #12]
 801a270:	e005      	b.n	801a27e <dwt_ioctl+0x406>
 801a272:	2200      	movs	r2, #0
 801a274:	9200      	str	r2, [sp, #0]
 801a276:	23bf      	movs	r3, #191	; 0xbf
 801a278:	2110      	movs	r1, #16
 801a27a:	f7fe ff57 	bl	801912c <dwt_modify8bitoffsetreg>
 801a27e:	6d33      	ldr	r3, [r6, #80]	; 0x50
 801a280:	751d      	strb	r5, [r3, #20]
 801a282:	2500      	movs	r5, #0
 801a284:	e6a2      	b.n	8019fcc <dwt_ioctl+0x154>
 801a286:	2c00      	cmp	r4, #0
 801a288:	f001 84e4 	beq.w	801bc54 <dwt_ioctl+0x1ddc>
 801a28c:	6865      	ldr	r5, [r4, #4]
 801a28e:	7823      	ldrb	r3, [r4, #0]
 801a290:	2203      	movs	r2, #3
 801a292:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 801a296:	f7fe fb13 	bl	80188c0 <dwt_write8bitoffsetreg>
 801a29a:	b9dd      	cbnz	r5, 801a2d4 <dwt_ioctl+0x45c>
 801a29c:	2200      	movs	r2, #0
 801a29e:	9200      	str	r2, [sp, #0]
 801a2a0:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 801a2a4:	2110      	movs	r1, #16
 801a2a6:	4630      	mov	r0, r6
 801a2a8:	f7ff f95c 	bl	8019564 <dwt_modify16bitoffsetreg>
 801a2ac:	e68e      	b.n	8019fcc <dwt_ioctl+0x154>
 801a2ae:	bf00      	nop
 801a2b0:	000f0030 	.word	0x000f0030
 801a2b4:	00010054 	.word	0x00010054
 801a2b8:	00010058 	.word	0x00010058
 801a2bc:	0001005c 	.word	0x0001005c
 801a2c0:	00010060 	.word	0x00010060
 801a2c4:	0001000c 	.word	0x0001000c
 801a2c8:	00010010 	.word	0x00010010
 801a2cc:	00010008 	.word	0x00010008
 801a2d0:	00110004 	.word	0x00110004
 801a2d4:	f44f 2381 	mov.w	r3, #264192	; 0x40800
 801a2d8:	9300      	str	r3, [sp, #0]
 801a2da:	f04f 33ff 	mov.w	r3, #4294967295
 801a2de:	2200      	movs	r2, #0
 801a2e0:	2110      	movs	r1, #16
 801a2e2:	4630      	mov	r0, r6
 801a2e4:	f7fe fdb0 	bl	8018e48 <dwt_modify32bitoffsetreg>
 801a2e8:	2500      	movs	r5, #0
 801a2ea:	e66f      	b.n	8019fcc <dwt_ioctl+0x154>
 801a2ec:	2200      	movs	r2, #0
 801a2ee:	4611      	mov	r1, r2
 801a2f0:	f7fd fce3 	bl	8017cba <dwt_read32bitoffsetreg>
 801a2f4:	68b2      	ldr	r2, [r6, #8]
 801a2f6:	6813      	ldr	r3, [r2, #0]
 801a2f8:	4043      	eors	r3, r0
 801a2fa:	6852      	ldr	r2, [r2, #4]
 801a2fc:	4213      	tst	r3, r2
 801a2fe:	bf14      	ite	ne
 801a300:	f04f 35ff 	movne.w	r5, #4294967295
 801a304:	2500      	moveq	r5, #0
 801a306:	e661      	b.n	8019fcc <dwt_ioctl+0x154>
 801a308:	2c00      	cmp	r4, #0
 801a30a:	f001 84a6 	beq.w	801bc5a <dwt_ioctl+0x1de2>
 801a30e:	7821      	ldrb	r1, [r4, #0]
 801a310:	f7fe ff20 	bl	8019154 <ull_configciadiag>
 801a314:	2500      	movs	r5, #0
 801a316:	e659      	b.n	8019fcc <dwt_ioctl+0x154>
 801a318:	b93a      	cbnz	r2, 801a32a <dwt_ioctl+0x4b2>
 801a31a:	2200      	movs	r2, #0
 801a31c:	9200      	str	r2, [sp, #0]
 801a31e:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 801a322:	49b8      	ldr	r1, [pc, #736]	; (801a604 <dwt_ioctl+0x78c>)
 801a324:	f7ff f91e 	bl	8019564 <dwt_modify16bitoffsetreg>
 801a328:	e650      	b.n	8019fcc <dwt_ioctl+0x154>
 801a32a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801a32e:	9300      	str	r3, [sp, #0]
 801a330:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a334:	2200      	movs	r2, #0
 801a336:	49b3      	ldr	r1, [pc, #716]	; (801a604 <dwt_ioctl+0x78c>)
 801a338:	f7ff f914 	bl	8019564 <dwt_modify16bitoffsetreg>
 801a33c:	2500      	movs	r5, #0
 801a33e:	e645      	b.n	8019fcc <dwt_ioctl+0x154>
 801a340:	f002 0201 	and.w	r2, r2, #1
 801a344:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a348:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 801a34c:	2a00      	cmp	r2, #0
 801a34e:	bf08      	it	eq
 801a350:	460b      	moveq	r3, r1
 801a352:	02d2      	lsls	r2, r2, #11
 801a354:	f015 0f02 	tst.w	r5, #2
 801a358:	bf12      	itee	ne
 801a35a:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 801a35e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a362:	b29b      	uxtheq	r3, r3
 801a364:	9200      	str	r2, [sp, #0]
 801a366:	2200      	movs	r2, #0
 801a368:	49a6      	ldr	r1, [pc, #664]	; (801a604 <dwt_ioctl+0x78c>)
 801a36a:	f7ff f8fb 	bl	8019564 <dwt_modify16bitoffsetreg>
 801a36e:	2500      	movs	r5, #0
 801a370:	e62c      	b.n	8019fcc <dwt_ioctl+0x154>
 801a372:	b92a      	cbnz	r2, 801a380 <dwt_ioctl+0x508>
 801a374:	4ba4      	ldr	r3, [pc, #656]	; (801a608 <dwt_ioctl+0x790>)
 801a376:	2202      	movs	r2, #2
 801a378:	49a4      	ldr	r1, [pc, #656]	; (801a60c <dwt_ioctl+0x794>)
 801a37a:	f7fe f913 	bl	80185a4 <dwt_write32bitoffsetreg>
 801a37e:	e625      	b.n	8019fcc <dwt_ioctl+0x154>
 801a380:	4ba3      	ldr	r3, [pc, #652]	; (801a610 <dwt_ioctl+0x798>)
 801a382:	2202      	movs	r2, #2
 801a384:	49a1      	ldr	r1, [pc, #644]	; (801a60c <dwt_ioctl+0x794>)
 801a386:	f7fe f90d 	bl	80185a4 <dwt_write32bitoffsetreg>
 801a38a:	2500      	movs	r5, #0
 801a38c:	e61e      	b.n	8019fcc <dwt_ioctl+0x154>
 801a38e:	4611      	mov	r1, r2
 801a390:	f7fe f957 	bl	8018642 <ull_setlnapamode>
 801a394:	2500      	movs	r5, #0
 801a396:	e619      	b.n	8019fcc <dwt_ioctl+0x154>
 801a398:	2c00      	cmp	r4, #0
 801a39a:	f001 8461 	beq.w	801bc60 <dwt_ioctl+0x1de8>
 801a39e:	2200      	movs	r2, #0
 801a3a0:	499c      	ldr	r1, [pc, #624]	; (801a614 <dwt_ioctl+0x79c>)
 801a3a2:	f7fd fcb2 	bl	8017d0a <dwt_read8bitoffsetreg>
 801a3a6:	7020      	strb	r0, [r4, #0]
 801a3a8:	2500      	movs	r5, #0
 801a3aa:	e60f      	b.n	8019fcc <dwt_ioctl+0x154>
 801a3ac:	4621      	mov	r1, r4
 801a3ae:	f7fe f969 	bl	8018684 <ull_configurestskey>
 801a3b2:	2500      	movs	r5, #0
 801a3b4:	e60a      	b.n	8019fcc <dwt_ioctl+0x154>
 801a3b6:	4621      	mov	r1, r4
 801a3b8:	f7fe f988 	bl	80186cc <ull_configurestsiv>
 801a3bc:	2500      	movs	r5, #0
 801a3be:	e605      	b.n	8019fcc <dwt_ioctl+0x154>
 801a3c0:	2301      	movs	r3, #1
 801a3c2:	9300      	str	r3, [sp, #0]
 801a3c4:	23ff      	movs	r3, #255	; 0xff
 801a3c6:	2200      	movs	r2, #0
 801a3c8:	4993      	ldr	r1, [pc, #588]	; (801a618 <dwt_ioctl+0x7a0>)
 801a3ca:	f7fe feaf 	bl	801912c <dwt_modify8bitoffsetreg>
 801a3ce:	2500      	movs	r5, #0
 801a3d0:	e5fc      	b.n	8019fcc <dwt_ioctl+0x154>
 801a3d2:	4611      	mov	r1, r2
 801a3d4:	f7fe f99e 	bl	8018714 <ull_configmrxlut>
 801a3d8:	2500      	movs	r5, #0
 801a3da:	e5f7      	b.n	8019fcc <dwt_ioctl+0x154>
 801a3dc:	2318      	movs	r3, #24
 801a3de:	2200      	movs	r2, #0
 801a3e0:	498e      	ldr	r1, [pc, #568]	; (801a61c <dwt_ioctl+0x7a4>)
 801a3e2:	f7fe f8df 	bl	80185a4 <dwt_write32bitoffsetreg>
 801a3e6:	23e8      	movs	r3, #232	; 0xe8
 801a3e8:	2200      	movs	r2, #0
 801a3ea:	498d      	ldr	r1, [pc, #564]	; (801a620 <dwt_ioctl+0x7a8>)
 801a3ec:	4630      	mov	r0, r6
 801a3ee:	f7fe f8d9 	bl	80185a4 <dwt_write32bitoffsetreg>
 801a3f2:	6d33      	ldr	r3, [r6, #80]	; 0x50
 801a3f4:	7d9b      	ldrb	r3, [r3, #22]
 801a3f6:	085b      	lsrs	r3, r3, #1
 801a3f8:	d01a      	beq.n	801a430 <dwt_ioctl+0x5b8>
 801a3fa:	2200      	movs	r2, #0
 801a3fc:	4989      	ldr	r1, [pc, #548]	; (801a624 <dwt_ioctl+0x7ac>)
 801a3fe:	4630      	mov	r0, r6
 801a400:	f7fd fc71 	bl	8017ce6 <dwt_read16bitoffsetreg>
 801a404:	f3c0 03c4 	ubfx	r3, r0, #3, #5
 801a408:	3b09      	subs	r3, #9
 801a40a:	2b0f      	cmp	r3, #15
 801a40c:	f201 842b 	bhi.w	801bc66 <dwt_ioctl+0x1dee>
 801a410:	f000 0001 	and.w	r0, r0, #1
 801a414:	2800      	cmp	r0, #0
 801a416:	bf0c      	ite	eq
 801a418:	2105      	moveq	r1, #5
 801a41a:	2109      	movne	r1, #9
 801a41c:	6d33      	ldr	r3, [r6, #80]	; 0x50
 801a41e:	7a1b      	ldrb	r3, [r3, #8]
 801a420:	2b01      	cmp	r3, #1
 801a422:	f001 8423 	beq.w	801bc6c <dwt_ioctl+0x1df4>
 801a426:	4630      	mov	r0, r6
 801a428:	f7fe f974 	bl	8018714 <ull_configmrxlut>
 801a42c:	2500      	movs	r5, #0
 801a42e:	e5cd      	b.n	8019fcc <dwt_ioctl+0x154>
 801a430:	2301      	movs	r3, #1
 801a432:	2200      	movs	r2, #0
 801a434:	497c      	ldr	r1, [pc, #496]	; (801a628 <dwt_ioctl+0x7b0>)
 801a436:	4630      	mov	r0, r6
 801a438:	f7fe fa42 	bl	80188c0 <dwt_write8bitoffsetreg>
 801a43c:	6d32      	ldr	r2, [r6, #80]	; 0x50
 801a43e:	7d93      	ldrb	r3, [r2, #22]
 801a440:	f043 0302 	orr.w	r3, r3, #2
 801a444:	7593      	strb	r3, [r2, #22]
 801a446:	e7d8      	b.n	801a3fa <dwt_ioctl+0x582>
 801a448:	2c00      	cmp	r4, #0
 801a44a:	f001 8412 	beq.w	801bc72 <dwt_ioctl+0x1dfa>
 801a44e:	7824      	ldrb	r4, [r4, #0]
 801a450:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801a452:	755c      	strb	r4, [r3, #21]
 801a454:	0323      	lsls	r3, r4, #12
 801a456:	f403 4330 	and.w	r3, r3, #45056	; 0xb000
 801a45a:	9300      	str	r3, [sp, #0]
 801a45c:	f644 73ff 	movw	r3, #20479	; 0x4fff
 801a460:	2200      	movs	r2, #0
 801a462:	2110      	movs	r1, #16
 801a464:	f7ff f87e 	bl	8019564 <dwt_modify16bitoffsetreg>
 801a468:	f004 0403 	and.w	r4, r4, #3
 801a46c:	2c03      	cmp	r4, #3
 801a46e:	bf0c      	ite	eq
 801a470:	4b6e      	ldreq	r3, [pc, #440]	; (801a62c <dwt_ioctl+0x7b4>)
 801a472:	4b6f      	ldrne	r3, [pc, #444]	; (801a630 <dwt_ioctl+0x7b8>)
 801a474:	2200      	movs	r2, #0
 801a476:	496f      	ldr	r1, [pc, #444]	; (801a634 <dwt_ioctl+0x7bc>)
 801a478:	4630      	mov	r0, r6
 801a47a:	f7fe f893 	bl	80185a4 <dwt_write32bitoffsetreg>
 801a47e:	2500      	movs	r5, #0
 801a480:	e5a4      	b.n	8019fcc <dwt_ioctl+0x154>
 801a482:	2c00      	cmp	r4, #0
 801a484:	f001 83f8 	beq.w	801bc78 <dwt_ioctl+0x1e00>
 801a488:	8823      	ldrh	r3, [r4, #0]
 801a48a:	2200      	movs	r2, #0
 801a48c:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 801a490:	f7fe f82b 	bl	80184ea <dwt_write16bitoffsetreg>
 801a494:	2500      	movs	r5, #0
 801a496:	e599      	b.n	8019fcc <dwt_ioctl+0x154>
 801a498:	2c00      	cmp	r4, #0
 801a49a:	f001 83f0 	beq.w	801bc7e <dwt_ioctl+0x1e06>
 801a49e:	2200      	movs	r2, #0
 801a4a0:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 801a4a4:	f7fd fc1f 	bl	8017ce6 <dwt_read16bitoffsetreg>
 801a4a8:	8020      	strh	r0, [r4, #0]
 801a4aa:	2500      	movs	r5, #0
 801a4ac:	e58e      	b.n	8019fcc <dwt_ioctl+0x154>
 801a4ae:	2c00      	cmp	r4, #0
 801a4b0:	f001 83e8 	beq.w	801bc84 <dwt_ioctl+0x1e0c>
 801a4b4:	8823      	ldrh	r3, [r4, #0]
 801a4b6:	2200      	movs	r2, #0
 801a4b8:	217c      	movs	r1, #124	; 0x7c
 801a4ba:	f7fe f816 	bl	80184ea <dwt_write16bitoffsetreg>
 801a4be:	2500      	movs	r5, #0
 801a4c0:	e584      	b.n	8019fcc <dwt_ioctl+0x154>
 801a4c2:	2c00      	cmp	r4, #0
 801a4c4:	f001 83e1 	beq.w	801bc8a <dwt_ioctl+0x1e12>
 801a4c8:	2200      	movs	r2, #0
 801a4ca:	217c      	movs	r1, #124	; 0x7c
 801a4cc:	f7fd fc0b 	bl	8017ce6 <dwt_read16bitoffsetreg>
 801a4d0:	8020      	strh	r0, [r4, #0]
 801a4d2:	2500      	movs	r5, #0
 801a4d4:	e57a      	b.n	8019fcc <dwt_ioctl+0x154>
 801a4d6:	2c00      	cmp	r4, #0
 801a4d8:	f001 83da 	beq.w	801bc90 <dwt_ioctl+0x1e18>
 801a4dc:	88a3      	ldrh	r3, [r4, #4]
 801a4de:	88e2      	ldrh	r2, [r4, #6]
 801a4e0:	6821      	ldr	r1, [r4, #0]
 801a4e2:	9100      	str	r1, [sp, #0]
 801a4e4:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 801a4e8:	f7fd fff4 	bl	80184d4 <dwt_writetodevice>
 801a4ec:	2500      	movs	r5, #0
 801a4ee:	e56d      	b.n	8019fcc <dwt_ioctl+0x154>
 801a4f0:	2c00      	cmp	r4, #0
 801a4f2:	f001 83d0 	beq.w	801bc96 <dwt_ioctl+0x1e1e>
 801a4f6:	88a3      	ldrh	r3, [r4, #4]
 801a4f8:	88e2      	ldrh	r2, [r4, #6]
 801a4fa:	6821      	ldr	r1, [r4, #0]
 801a4fc:	9100      	str	r1, [sp, #0]
 801a4fe:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 801a502:	f7fd fbd0 	bl	8017ca6 <dwt_readfromdevice>
 801a506:	2500      	movs	r5, #0
 801a508:	e560      	b.n	8019fcc <dwt_ioctl+0x154>
 801a50a:	2c00      	cmp	r4, #0
 801a50c:	f001 83c6 	beq.w	801bc9c <dwt_ioctl+0x1e24>
 801a510:	88e3      	ldrh	r3, [r4, #6]
 801a512:	88a2      	ldrh	r2, [r4, #4]
 801a514:	6821      	ldr	r1, [r4, #0]
 801a516:	f7fe f99d 	bl	8018854 <ull_readrxdata>
 801a51a:	2500      	movs	r5, #0
 801a51c:	e556      	b.n	8019fcc <dwt_ioctl+0x154>
 801a51e:	2c00      	cmp	r4, #0
 801a520:	f001 83bf 	beq.w	801bca2 <dwt_ioctl+0x1e2a>
 801a524:	88e3      	ldrh	r3, [r4, #6]
 801a526:	6822      	ldr	r2, [r4, #0]
 801a528:	88a1      	ldrh	r1, [r4, #4]
 801a52a:	f7fe fac7 	bl	8018abc <ull_writetxdata>
 801a52e:	2500      	movs	r5, #0
 801a530:	e54c      	b.n	8019fcc <dwt_ioctl+0x154>
 801a532:	4611      	mov	r1, r2
 801a534:	f7ff fc08 	bl	8019d48 <ull_rxenable>
 801a538:	2500      	movs	r5, #0
 801a53a:	e547      	b.n	8019fcc <dwt_ioctl+0x154>
 801a53c:	2c00      	cmp	r4, #0
 801a53e:	f001 83b3 	beq.w	801bca8 <dwt_ioctl+0x1e30>
 801a542:	7923      	ldrb	r3, [r4, #4]
 801a544:	8862      	ldrh	r2, [r4, #2]
 801a546:	8821      	ldrh	r1, [r4, #0]
 801a548:	f7fe fdbe 	bl	80190c8 <ull_writetxfctrl>
 801a54c:	2500      	movs	r5, #0
 801a54e:	e53d      	b.n	8019fcc <dwt_ioctl+0x154>
 801a550:	2c00      	cmp	r4, #0
 801a552:	f001 83ac 	beq.w	801bcae <dwt_ioctl+0x1e36>
 801a556:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801a558:	7b9b      	ldrb	r3, [r3, #14]
 801a55a:	2b01      	cmp	r3, #1
 801a55c:	d00c      	beq.n	801a578 <dwt_ioctl+0x700>
 801a55e:	2b03      	cmp	r3, #3
 801a560:	d110      	bne.n	801a584 <dwt_ioctl+0x70c>
 801a562:	220c      	movs	r2, #12
 801a564:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 801a568:	f7fd fbbd 	bl	8017ce6 <dwt_read16bitoffsetreg>
 801a56c:	b200      	sxth	r0, r0
 801a56e:	f340 030c 	sbfx	r3, r0, #0, #13
 801a572:	8023      	strh	r3, [r4, #0]
 801a574:	2500      	movs	r5, #0
 801a576:	e529      	b.n	8019fcc <dwt_ioctl+0x154>
 801a578:	2200      	movs	r2, #0
 801a57a:	492f      	ldr	r1, [pc, #188]	; (801a638 <dwt_ioctl+0x7c0>)
 801a57c:	f7fd fbb3 	bl	8017ce6 <dwt_read16bitoffsetreg>
 801a580:	b200      	sxth	r0, r0
 801a582:	e7f4      	b.n	801a56e <dwt_ioctl+0x6f6>
 801a584:	2200      	movs	r2, #0
 801a586:	492d      	ldr	r1, [pc, #180]	; (801a63c <dwt_ioctl+0x7c4>)
 801a588:	f7fd fbad 	bl	8017ce6 <dwt_read16bitoffsetreg>
 801a58c:	b200      	sxth	r0, r0
 801a58e:	e7ee      	b.n	801a56e <dwt_ioctl+0x6f6>
 801a590:	2c00      	cmp	r4, #0
 801a592:	f001 838f 	beq.w	801bcb4 <dwt_ioctl+0x1e3c>
 801a596:	ab0c      	add	r3, sp, #48	; 0x30
 801a598:	9300      	str	r3, [sp, #0]
 801a59a:	2303      	movs	r3, #3
 801a59c:	2200      	movs	r2, #0
 801a59e:	4928      	ldr	r1, [pc, #160]	; (801a640 <dwt_ioctl+0x7c8>)
 801a5a0:	f7fd fb81 	bl	8017ca6 <dwt_readfromdevice>
 801a5a4:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 801a5a8:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801a5ac:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 801a5b0:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 801a5b4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801a5b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 801a5bc:	bf1c      	itt	ne
 801a5be:	ea6f 3303 	mvnne.w	r3, r3, lsl #12
 801a5c2:	ea6f 3313 	mvnne.w	r3, r3, lsr #12
 801a5c6:	6023      	str	r3, [r4, #0]
 801a5c8:	2500      	movs	r5, #0
 801a5ca:	e4ff      	b.n	8019fcc <dwt_ioctl+0x154>
 801a5cc:	f7fe f9d0 	bl	8018970 <ull_clearaonconfig>
 801a5d0:	2500      	movs	r5, #0
 801a5d2:	e4fb      	b.n	8019fcc <dwt_ioctl+0x154>
 801a5d4:	2c00      	cmp	r4, #0
 801a5d6:	f001 8370 	beq.w	801bcba <dwt_ioctl+0x1e42>
 801a5da:	8861      	ldrh	r1, [r4, #2]
 801a5dc:	f7fe fdf0 	bl	80191c0 <ull_calcbandwidthadj>
 801a5e0:	7020      	strb	r0, [r4, #0]
 801a5e2:	2500      	movs	r5, #0
 801a5e4:	e4f2      	b.n	8019fcc <dwt_ioctl+0x154>
 801a5e6:	4621      	mov	r1, r4
 801a5e8:	f7fd fb9d 	bl	8017d26 <ull_readdiagnostics>
 801a5ec:	2500      	movs	r5, #0
 801a5ee:	e4ed      	b.n	8019fcc <dwt_ioctl+0x154>
 801a5f0:	2c00      	cmp	r4, #0
 801a5f2:	f001 8365 	beq.w	801bcc0 <dwt_ioctl+0x1e48>
 801a5f6:	2201      	movs	r2, #1
 801a5f8:	2170      	movs	r1, #112	; 0x70
 801a5fa:	f7fd fb5e 	bl	8017cba <dwt_read32bitoffsetreg>
 801a5fe:	6020      	str	r0, [r4, #0]
 801a600:	2500      	movs	r5, #0
 801a602:	e4e3      	b.n	8019fcc <dwt_ioctl+0x154>
 801a604:	00110008 	.word	0x00110008
 801a608:	00d20874 	.word	0x00d20874
 801a60c:	00110010 	.word	0x00110010
 801a610:	04d28874 	.word	0x04d28874
 801a614:	0007001c 	.word	0x0007001c
 801a618:	00020004 	.word	0x00020004
 801a61c:	001f000c 	.word	0x001f000c
 801a620:	001f0010 	.word	0x001f0010
 801a624:	00010008 	.word	0x00010008
 801a628:	00010020 	.word	0x00010020
 801a62c:	af5f35cc 	.word	0xaf5f35cc
 801a630:	af5f584c 	.word	0xaf5f584c
 801a634:	0006000c 	.word	0x0006000c
 801a638:	0018000c 	.word	0x0018000c
 801a63c:	000c0020 	.word	0x000c0020
 801a640:	00060029 	.word	0x00060029
 801a644:	2c00      	cmp	r4, #0
 801a646:	f001 833e 	beq.w	801bcc6 <dwt_ioctl+0x1e4e>
 801a64a:	2200      	movs	r2, #0
 801a64c:	2170      	movs	r1, #112	; 0x70
 801a64e:	f7fd fb34 	bl	8017cba <dwt_read32bitoffsetreg>
 801a652:	6020      	str	r0, [r4, #0]
 801a654:	2500      	movs	r5, #0
 801a656:	e4b9      	b.n	8019fcc <dwt_ioctl+0x154>
 801a658:	9400      	str	r4, [sp, #0]
 801a65a:	2305      	movs	r3, #5
 801a65c:	2200      	movs	r2, #0
 801a65e:	2170      	movs	r1, #112	; 0x70
 801a660:	f7fd fb21 	bl	8017ca6 <dwt_readfromdevice>
 801a664:	2500      	movs	r5, #0
 801a666:	e4b1      	b.n	8019fcc <dwt_ioctl+0x154>
 801a668:	2c00      	cmp	r4, #0
 801a66a:	f001 832f 	beq.w	801bccc <dwt_ioctl+0x1e54>
 801a66e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801a670:	7b9b      	ldrb	r3, [r3, #14]
 801a672:	2b01      	cmp	r3, #1
 801a674:	d014      	beq.n	801a6a0 <dwt_ioctl+0x828>
 801a676:	2b03      	cmp	r3, #3
 801a678:	d119      	bne.n	801a6ae <dwt_ioctl+0x836>
 801a67a:	2216      	movs	r2, #22
 801a67c:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 801a680:	f7fd fb31 	bl	8017ce6 <dwt_read16bitoffsetreg>
 801a684:	f3c0 000d 	ubfx	r0, r0, #0, #14
 801a688:	b283      	uxth	r3, r0
 801a68a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 801a68e:	d004      	beq.n	801a69a <dwt_ioctl+0x822>
 801a690:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 801a694:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 801a698:	b218      	sxth	r0, r3
 801a69a:	8020      	strh	r0, [r4, #0]
 801a69c:	2500      	movs	r5, #0
 801a69e:	e495      	b.n	8019fcc <dwt_ioctl+0x154>
 801a6a0:	2202      	movs	r2, #2
 801a6a2:	49d1      	ldr	r1, [pc, #836]	; (801a9e8 <dwt_ioctl+0xb70>)
 801a6a4:	f7fd fb1f 	bl	8017ce6 <dwt_read16bitoffsetreg>
 801a6a8:	f3c0 000d 	ubfx	r0, r0, #0, #14
 801a6ac:	e7ec      	b.n	801a688 <dwt_ioctl+0x810>
 801a6ae:	2202      	movs	r2, #2
 801a6b0:	49ce      	ldr	r1, [pc, #824]	; (801a9ec <dwt_ioctl+0xb74>)
 801a6b2:	f7fd fb18 	bl	8017ce6 <dwt_read16bitoffsetreg>
 801a6b6:	f3c0 000d 	ubfx	r0, r0, #0, #14
 801a6ba:	e7e5      	b.n	801a688 <dwt_ioctl+0x810>
 801a6bc:	9400      	str	r4, [sp, #0]
 801a6be:	2306      	movs	r3, #6
 801a6c0:	2200      	movs	r2, #0
 801a6c2:	49cb      	ldr	r1, [pc, #812]	; (801a9f0 <dwt_ioctl+0xb78>)
 801a6c4:	f7fd faef 	bl	8017ca6 <dwt_readfromdevice>
 801a6c8:	7963      	ldrb	r3, [r4, #5]
 801a6ca:	f003 0301 	and.w	r3, r3, #1
 801a6ce:	7163      	strb	r3, [r4, #5]
 801a6d0:	2500      	movs	r5, #0
 801a6d2:	e47b      	b.n	8019fcc <dwt_ioctl+0x154>
 801a6d4:	2c00      	cmp	r4, #0
 801a6d6:	f001 82fc 	beq.w	801bcd2 <dwt_ioctl+0x1e5a>
 801a6da:	2201      	movs	r2, #1
 801a6dc:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 801a6e0:	f7fd fb13 	bl	8017d0a <dwt_read8bitoffsetreg>
 801a6e4:	7020      	strb	r0, [r4, #0]
 801a6e6:	2500      	movs	r5, #0
 801a6e8:	e470      	b.n	8019fcc <dwt_ioctl+0x154>
 801a6ea:	2c00      	cmp	r4, #0
 801a6ec:	f001 82f4 	beq.w	801bcd8 <dwt_ioctl+0x1e60>
 801a6f0:	2200      	movs	r2, #0
 801a6f2:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 801a6f6:	f7fd fb08 	bl	8017d0a <dwt_read8bitoffsetreg>
 801a6fa:	7020      	strb	r0, [r4, #0]
 801a6fc:	2500      	movs	r5, #0
 801a6fe:	e465      	b.n	8019fcc <dwt_ioctl+0x154>
 801a700:	2c00      	cmp	r4, #0
 801a702:	f001 82ec 	beq.w	801bcde <dwt_ioctl+0x1e66>
 801a706:	88a2      	ldrh	r2, [r4, #4]
 801a708:	6821      	ldr	r1, [r4, #0]
 801a70a:	f7fe fc07 	bl	8018f1c <_dwt_otpprogword32>
 801a70e:	2500      	movs	r5, #0
 801a710:	e45c      	b.n	8019fcc <dwt_ioctl+0x154>
 801a712:	2c00      	cmp	r4, #0
 801a714:	f001 82e6 	beq.w	801bce4 <dwt_ioctl+0x1e6c>
 801a718:	6825      	ldr	r5, [r4, #0]
 801a71a:	88a4      	ldrh	r4, [r4, #4]
 801a71c:	4622      	mov	r2, r4
 801a71e:	4629      	mov	r1, r5
 801a720:	f7fe fbfc 	bl	8018f1c <_dwt_otpprogword32>
 801a724:	4621      	mov	r1, r4
 801a726:	4630      	mov	r0, r6
 801a728:	f7fd ff1a 	bl	8018560 <_dwt_otpread>
 801a72c:	1a2d      	subs	r5, r5, r0
 801a72e:	bf18      	it	ne
 801a730:	f04f 35ff 	movne.w	r5, #4294967295
 801a734:	e44a      	b.n	8019fcc <dwt_ioctl+0x154>
 801a736:	2a02      	cmp	r2, #2
 801a738:	d00e      	beq.n	801a758 <dwt_ioctl+0x8e0>
 801a73a:	4cae      	ldr	r4, [pc, #696]	; (801a9f4 <dwt_ioctl+0xb7c>)
 801a73c:	2300      	movs	r3, #0
 801a73e:	461a      	mov	r2, r3
 801a740:	4621      	mov	r1, r4
 801a742:	4630      	mov	r0, r6
 801a744:	f7fe f8bc 	bl	80188c0 <dwt_write8bitoffsetreg>
 801a748:	2302      	movs	r3, #2
 801a74a:	2200      	movs	r2, #0
 801a74c:	4621      	mov	r1, r4
 801a74e:	4630      	mov	r0, r6
 801a750:	f7fe f8b6 	bl	80188c0 <dwt_write8bitoffsetreg>
 801a754:	2500      	movs	r5, #0
 801a756:	e439      	b.n	8019fcc <dwt_ioctl+0x154>
 801a758:	2300      	movs	r3, #0
 801a75a:	9300      	str	r3, [sp, #0]
 801a75c:	23fe      	movs	r3, #254	; 0xfe
 801a75e:	2201      	movs	r2, #1
 801a760:	49a5      	ldr	r1, [pc, #660]	; (801a9f8 <dwt_ioctl+0xb80>)
 801a762:	f7fe fce3 	bl	801912c <dwt_modify8bitoffsetreg>
 801a766:	e7e8      	b.n	801a73a <dwt_ioctl+0x8c2>
 801a768:	2c00      	cmp	r4, #0
 801a76a:	f001 82be 	beq.w	801bcea <dwt_ioctl+0x1e72>
 801a76e:	8824      	ldrh	r4, [r4, #0]
 801a770:	b2e2      	uxtb	r2, r4
 801a772:	f44f 7181 	mov.w	r1, #258	; 0x102
 801a776:	f7fe f94f 	bl	8018a18 <ull_aon_write>
 801a77a:	0a22      	lsrs	r2, r4, #8
 801a77c:	f240 1103 	movw	r1, #259	; 0x103
 801a780:	4630      	mov	r0, r6
 801a782:	f7fe f949 	bl	8018a18 <ull_aon_write>
 801a786:	2500      	movs	r5, #0
 801a788:	e420      	b.n	8019fcc <dwt_ioctl+0x154>
 801a78a:	2c00      	cmp	r4, #0
 801a78c:	f001 82b0 	beq.w	801bcf0 <dwt_ioctl+0x1e78>
 801a790:	f8df 8270 	ldr.w	r8, [pc, #624]	; 801aa04 <dwt_ioctl+0xb8c>
 801a794:	2310      	movs	r3, #16
 801a796:	9300      	str	r3, [sp, #0]
 801a798:	23ff      	movs	r3, #255	; 0xff
 801a79a:	2200      	movs	r2, #0
 801a79c:	4641      	mov	r1, r8
 801a79e:	f7fe fcc5 	bl	801912c <dwt_modify8bitoffsetreg>
 801a7a2:	f44f 7182 	mov.w	r1, #260	; 0x104
 801a7a6:	4630      	mov	r0, r6
 801a7a8:	f7fe f916 	bl	80189d8 <ull_aon_read>
 801a7ac:	f000 05e0 	and.w	r5, r0, #224	; 0xe0
 801a7b0:	462a      	mov	r2, r5
 801a7b2:	f44f 7182 	mov.w	r1, #260	; 0x104
 801a7b6:	4630      	mov	r0, r6
 801a7b8:	f7fe f92e 	bl	8018a18 <ull_aon_write>
 801a7bc:	f045 0204 	orr.w	r2, r5, #4
 801a7c0:	f44f 7182 	mov.w	r1, #260	; 0x104
 801a7c4:	4630      	mov	r0, r6
 801a7c6:	f7fe f927 	bl	8018a18 <ull_aon_write>
 801a7ca:	2002      	movs	r0, #2
 801a7cc:	f7e6 f9d2 	bl	8000b74 <deca_sleep>
 801a7d0:	f44f 7187 	mov.w	r1, #270	; 0x10e
 801a7d4:	4630      	mov	r0, r6
 801a7d6:	f7fe f8ff 	bl	80189d8 <ull_aon_read>
 801a7da:	4607      	mov	r7, r0
 801a7dc:	f240 110f 	movw	r1, #271	; 0x10f
 801a7e0:	4630      	mov	r0, r6
 801a7e2:	f7fe f8f9 	bl	80189d8 <ull_aon_read>
 801a7e6:	4681      	mov	r9, r0
 801a7e8:	462a      	mov	r2, r5
 801a7ea:	f44f 7182 	mov.w	r1, #260	; 0x104
 801a7ee:	4630      	mov	r0, r6
 801a7f0:	f7fe f912 	bl	8018a18 <ull_aon_write>
 801a7f4:	2500      	movs	r5, #0
 801a7f6:	9500      	str	r5, [sp, #0]
 801a7f8:	23ef      	movs	r3, #239	; 0xef
 801a7fa:	462a      	mov	r2, r5
 801a7fc:	4641      	mov	r1, r8
 801a7fe:	4630      	mov	r0, r6
 801a800:	f7fe fc94 	bl	801912c <dwt_modify8bitoffsetreg>
 801a804:	ea47 2709 	orr.w	r7, r7, r9, lsl #8
 801a808:	8027      	strh	r7, [r4, #0]
 801a80a:	f7ff bbdf 	b.w	8019fcc <dwt_ioctl+0x154>
 801a80e:	2c00      	cmp	r4, #0
 801a810:	f001 8271 	beq.w	801bcf6 <dwt_ioctl+0x1e7e>
 801a814:	78a2      	ldrb	r2, [r4, #2]
 801a816:	8821      	ldrh	r1, [r4, #0]
 801a818:	f7fe f926 	bl	8018a68 <ull_configuresleep>
 801a81c:	2500      	movs	r5, #0
 801a81e:	f7ff bbd5 	b.w	8019fcc <dwt_ioctl+0x154>
 801a822:	2c00      	cmp	r4, #0
 801a824:	f001 826a 	beq.w	801bcfc <dwt_ioctl+0x1e84>
 801a828:	6824      	ldr	r4, [r4, #0]
 801a82a:	f7fe f8a1 	bl	8018970 <ull_clearaonconfig>
 801a82e:	2001      	movs	r0, #1
 801a830:	f7e6 f9a0 	bl	8000b74 <deca_sleep>
 801a834:	2303      	movs	r3, #3
 801a836:	9300      	str	r3, [sp, #0]
 801a838:	23ff      	movs	r3, #255	; 0xff
 801a83a:	2200      	movs	r2, #0
 801a83c:	496f      	ldr	r1, [pc, #444]	; (801a9fc <dwt_ioctl+0xb84>)
 801a83e:	4630      	mov	r0, r6
 801a840:	f7fe fc74 	bl	801912c <dwt_modify8bitoffsetreg>
 801a844:	b97c      	cbnz	r4, 801a866 <dwt_ioctl+0x9ee>
 801a846:	4630      	mov	r0, r6
 801a848:	f7ff faee 	bl	8019e28 <ull_softreset_no_sema_fcmd>
 801a84c:	2001      	movs	r0, #1
 801a84e:	f7e6 f991 	bl	8000b74 <deca_sleep>
 801a852:	6d33      	ldr	r3, [r6, #80]	; 0x50
 801a854:	2500      	movs	r5, #0
 801a856:	739d      	strb	r5, [r3, #14]
 801a858:	2202      	movs	r2, #2
 801a85a:	821a      	strh	r2, [r3, #16]
 801a85c:	751d      	strb	r5, [r3, #20]
 801a85e:	755d      	strb	r5, [r3, #21]
 801a860:	73dd      	strb	r5, [r3, #15]
 801a862:	f7ff bbb3 	b.w	8019fcc <dwt_ioctl+0x154>
 801a866:	4630      	mov	r0, r6
 801a868:	f7ff faf2 	bl	8019e50 <ull_softreset_fcmd>
 801a86c:	e7ee      	b.n	801a84c <dwt_ioctl+0x9d4>
 801a86e:	2c00      	cmp	r4, #0
 801a870:	f001 8247 	beq.w	801bd02 <dwt_ioctl+0x1e8a>
 801a874:	7823      	ldrb	r3, [r4, #0]
 801a876:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a87a:	6d02      	ldr	r2, [r0, #80]	; 0x50
 801a87c:	7353      	strb	r3, [r2, #13]
 801a87e:	2200      	movs	r2, #0
 801a880:	495f      	ldr	r1, [pc, #380]	; (801aa00 <dwt_ioctl+0xb88>)
 801a882:	f7fe f81d 	bl	80188c0 <dwt_write8bitoffsetreg>
 801a886:	2500      	movs	r5, #0
 801a888:	f7ff bba0 	b.w	8019fcc <dwt_ioctl+0x154>
 801a88c:	2c00      	cmp	r4, #0
 801a88e:	f001 823b 	beq.w	801bd08 <dwt_ioctl+0x1e90>
 801a892:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801a894:	7b5b      	ldrb	r3, [r3, #13]
 801a896:	7023      	strb	r3, [r4, #0]
 801a898:	2500      	movs	r5, #0
 801a89a:	f7ff bb97 	b.w	8019fcc <dwt_ioctl+0x154>
 801a89e:	2101      	movs	r1, #1
 801a8a0:	f7fe faf6 	bl	8018e90 <ull_enable_rf_tx>
 801a8a4:	4630      	mov	r0, r6
 801a8a6:	f7fe fb27 	bl	8018ef8 <ull_enable_rftx_blocks>
 801a8aa:	2101      	movs	r1, #1
 801a8ac:	4630      	mov	r0, r6
 801a8ae:	f7fd fe2d 	bl	801850c <ull_force_clocks>
 801a8b2:	220f      	movs	r2, #15
 801a8b4:	2101      	movs	r1, #1
 801a8b6:	4630      	mov	r0, r6
 801a8b8:	f7fe ff48 	bl	801974c <ull_repeated_cw>
 801a8bc:	2500      	movs	r5, #0
 801a8be:	f7ff bb85 	b.w	8019fcc <dwt_ioctl+0x154>
 801a8c2:	2c00      	cmp	r4, #0
 801a8c4:	f001 8223 	beq.w	801bd0e <dwt_ioctl+0x1e96>
 801a8c8:	6862      	ldr	r2, [r4, #4]
 801a8ca:	6821      	ldr	r1, [r4, #0]
 801a8cc:	f7fe ff3e 	bl	801974c <ull_repeated_cw>
 801a8d0:	2500      	movs	r5, #0
 801a8d2:	f7ff bb7b 	b.w	8019fcc <dwt_ioctl+0x154>
 801a8d6:	2c00      	cmp	r4, #0
 801a8d8:	f001 821c 	beq.w	801bd14 <dwt_ioctl+0x1e9c>
 801a8dc:	4d49      	ldr	r5, [pc, #292]	; (801aa04 <dwt_ioctl+0xb8c>)
 801a8de:	2200      	movs	r2, #0
 801a8e0:	4629      	mov	r1, r5
 801a8e2:	f7fd fa12 	bl	8017d0a <dwt_read8bitoffsetreg>
 801a8e6:	4680      	mov	r8, r0
 801a8e8:	2302      	movs	r3, #2
 801a8ea:	9300      	str	r3, [sp, #0]
 801a8ec:	23ff      	movs	r3, #255	; 0xff
 801a8ee:	2200      	movs	r2, #0
 801a8f0:	4629      	mov	r1, r5
 801a8f2:	4630      	mov	r0, r6
 801a8f4:	f7fe fc1a 	bl	801912c <dwt_modify8bitoffsetreg>
 801a8f8:	2304      	movs	r3, #4
 801a8fa:	2200      	movs	r2, #0
 801a8fc:	4942      	ldr	r1, [pc, #264]	; (801aa08 <dwt_ioctl+0xb90>)
 801a8fe:	4630      	mov	r0, r6
 801a900:	f7fd ffde 	bl	80188c0 <dwt_write8bitoffsetreg>
 801a904:	2301      	movs	r3, #1
 801a906:	2200      	movs	r2, #0
 801a908:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801a90c:	4630      	mov	r0, r6
 801a90e:	f7fd ffd7 	bl	80188c0 <dwt_write8bitoffsetreg>
 801a912:	4f3e      	ldr	r7, [pc, #248]	; (801aa0c <dwt_ioctl+0xb94>)
 801a914:	2500      	movs	r5, #0
 801a916:	462a      	mov	r2, r5
 801a918:	4639      	mov	r1, r7
 801a91a:	4630      	mov	r0, r6
 801a91c:	f7fd f9f5 	bl	8017d0a <dwt_read8bitoffsetreg>
 801a920:	f010 0f01 	tst.w	r0, #1
 801a924:	d0f7      	beq.n	801a916 <dwt_ioctl+0xa9e>
 801a926:	2200      	movs	r2, #0
 801a928:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 801a92c:	4630      	mov	r0, r6
 801a92e:	f7fd f9da 	bl	8017ce6 <dwt_read16bitoffsetreg>
 801a932:	4605      	mov	r5, r0
 801a934:	2300      	movs	r3, #0
 801a936:	461a      	mov	r2, r3
 801a938:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801a93c:	4630      	mov	r0, r6
 801a93e:	f7fd ffbf 	bl	80188c0 <dwt_write8bitoffsetreg>
 801a942:	2300      	movs	r3, #0
 801a944:	461a      	mov	r2, r3
 801a946:	4930      	ldr	r1, [pc, #192]	; (801aa08 <dwt_ioctl+0xb90>)
 801a948:	4630      	mov	r0, r6
 801a94a:	f7fd ffb9 	bl	80188c0 <dwt_write8bitoffsetreg>
 801a94e:	4643      	mov	r3, r8
 801a950:	2200      	movs	r2, #0
 801a952:	492c      	ldr	r1, [pc, #176]	; (801aa04 <dwt_ioctl+0xb8c>)
 801a954:	4630      	mov	r0, r6
 801a956:	f7fd ffb3 	bl	80188c0 <dwt_write8bitoffsetreg>
 801a95a:	8025      	strh	r5, [r4, #0]
 801a95c:	2500      	movs	r5, #0
 801a95e:	f7ff bb35 	b.w	8019fcc <dwt_ioctl+0x154>
 801a962:	2c00      	cmp	r4, #0
 801a964:	f001 81d9 	beq.w	801bd1a <dwt_ioctl+0x1ea2>
 801a968:	7920      	ldrb	r0, [r4, #4]
 801a96a:	6d33      	ldr	r3, [r6, #80]	; 0x50
 801a96c:	7a9b      	ldrb	r3, [r3, #10]
 801a96e:	1ac0      	subs	r0, r0, r3
 801a970:	f7e5 fdba 	bl	80004e8 <__aeabi_i2f>
 801a974:	4926      	ldr	r1, [pc, #152]	; (801aa10 <dwt_ioctl+0xb98>)
 801a976:	f7e5 fe0b 	bl	8000590 <__aeabi_fmul>
 801a97a:	4926      	ldr	r1, [pc, #152]	; (801aa14 <dwt_ioctl+0xb9c>)
 801a97c:	f7e5 fd00 	bl	8000380 <__addsf3>
 801a980:	6020      	str	r0, [r4, #0]
 801a982:	2500      	movs	r5, #0
 801a984:	f7ff bb22 	b.w	8019fcc <dwt_ioctl+0x154>
 801a988:	2c00      	cmp	r4, #0
 801a98a:	f001 81c9 	beq.w	801bd20 <dwt_ioctl+0x1ea8>
 801a98e:	7920      	ldrb	r0, [r4, #4]
 801a990:	6d33      	ldr	r3, [r6, #80]	; 0x50
 801a992:	7a5b      	ldrb	r3, [r3, #9]
 801a994:	1ac0      	subs	r0, r0, r3
 801a996:	f7e5 fda7 	bl	80004e8 <__aeabi_i2f>
 801a99a:	491f      	ldr	r1, [pc, #124]	; (801aa18 <dwt_ioctl+0xba0>)
 801a99c:	f7e5 fdf8 	bl	8000590 <__aeabi_fmul>
 801a9a0:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 801a9a4:	f7e5 fdf4 	bl	8000590 <__aeabi_fmul>
 801a9a8:	491c      	ldr	r1, [pc, #112]	; (801aa1c <dwt_ioctl+0xba4>)
 801a9aa:	f7e5 fea5 	bl	80006f8 <__aeabi_fdiv>
 801a9ae:	491c      	ldr	r1, [pc, #112]	; (801aa20 <dwt_ioctl+0xba8>)
 801a9b0:	f7e5 fce6 	bl	8000380 <__addsf3>
 801a9b4:	6020      	str	r0, [r4, #0]
 801a9b6:	2500      	movs	r5, #0
 801a9b8:	f7ff bb08 	b.w	8019fcc <dwt_ioctl+0x154>
 801a9bc:	2c00      	cmp	r4, #0
 801a9be:	f001 81b2 	beq.w	801bd26 <dwt_ioctl+0x1eae>
 801a9c2:	6824      	ldr	r4, [r4, #0]
 801a9c4:	2101      	movs	r1, #1
 801a9c6:	f7fe fa63 	bl	8018e90 <ull_enable_rf_tx>
 801a9ca:	4630      	mov	r0, r6
 801a9cc:	f7fe fa94 	bl	8018ef8 <ull_enable_rftx_blocks>
 801a9d0:	2101      	movs	r1, #1
 801a9d2:	4630      	mov	r0, r6
 801a9d4:	f7fd fd9a 	bl	801850c <ull_force_clocks>
 801a9d8:	4621      	mov	r1, r4
 801a9da:	4630      	mov	r0, r6
 801a9dc:	f7fe fc4c 	bl	8019278 <ull_repeated_frames>
 801a9e0:	2500      	movs	r5, #0
 801a9e2:	f7ff baf3 	b.w	8019fcc <dwt_ioctl+0x154>
 801a9e6:	bf00      	nop
 801a9e8:	00180014 	.word	0x00180014
 801a9ec:	000c001c 	.word	0x000c001c
 801a9f0:	000c0018 	.word	0x000c0018
 801a9f4:	000a0004 	.word	0x000a0004
 801a9f8:	00110008 	.word	0x00110008
 801a9fc:	00110004 	.word	0x00110004
 801aa00:	00090014 	.word	0x00090014
 801aa04:	00070048 	.word	0x00070048
 801aa08:	00070034 	.word	0x00070034
 801aa0c:	00080004 	.word	0x00080004
 801aa10:	3f866666 	.word	0x3f866666
 801aa14:	41b00000 	.word	0x41b00000
 801aa18:	3ecccccd 	.word	0x3ecccccd
 801aa1c:	437f0000 	.word	0x437f0000
 801aa20:	40400000 	.word	0x40400000
 801aa24:	2500      	movs	r5, #0
 801aa26:	9500      	str	r5, [sp, #0]
 801aa28:	23ef      	movs	r3, #239	; 0xef
 801aa2a:	462a      	mov	r2, r5
 801aa2c:	49c7      	ldr	r1, [pc, #796]	; (801ad4c <dwt_ioctl+0xed4>)
 801aa2e:	f7fe fb7d 	bl	801912c <dwt_modify8bitoffsetreg>
 801aa32:	2105      	movs	r1, #5
 801aa34:	4630      	mov	r0, r6
 801aa36:	f7fd fd69 	bl	801850c <ull_force_clocks>
 801aa3a:	2101      	movs	r1, #1
 801aa3c:	4630      	mov	r0, r6
 801aa3e:	f7fd feeb 	bl	8018818 <ull_disable_rf_tx>
 801aa42:	4630      	mov	r0, r6
 801aa44:	f7fd fede 	bl	8018804 <ull_disable_rftx_blocks>
 801aa48:	f7ff bac0 	b.w	8019fcc <dwt_ioctl+0x154>
 801aa4c:	2500      	movs	r5, #0
 801aa4e:	9500      	str	r5, [sp, #0]
 801aa50:	23ef      	movs	r3, #239	; 0xef
 801aa52:	462a      	mov	r2, r5
 801aa54:	49bd      	ldr	r1, [pc, #756]	; (801ad4c <dwt_ioctl+0xed4>)
 801aa56:	f7fe fb69 	bl	801912c <dwt_modify8bitoffsetreg>
 801aa5a:	f7ff bab7 	b.w	8019fcc <dwt_ioctl+0x154>
 801aa5e:	2c00      	cmp	r4, #0
 801aa60:	f001 8164 	beq.w	801bd2c <dwt_ioctl+0x1eb4>
 801aa64:	6821      	ldr	r1, [r4, #0]
 801aa66:	f7fe fc07 	bl	8019278 <ull_repeated_frames>
 801aa6a:	2500      	movs	r5, #0
 801aa6c:	f7ff baae 	b.w	8019fcc <dwt_ioctl+0x154>
 801aa70:	2200      	movs	r2, #0
 801aa72:	49b7      	ldr	r1, [pc, #732]	; (801ad50 <dwt_ioctl+0xed8>)
 801aa74:	f7fd f937 	bl	8017ce6 <dwt_read16bitoffsetreg>
 801aa78:	f3c0 050b 	ubfx	r5, r0, #0, #12
 801aa7c:	f410 6f00 	tst.w	r0, #2048	; 0x800
 801aa80:	bf18      	it	ne
 801aa82:	f445 4570 	orrne.w	r5, r5, #61440	; 0xf000
 801aa86:	b22d      	sxth	r5, r5
 801aa88:	8025      	strh	r5, [r4, #0]
 801aa8a:	6d33      	ldr	r3, [r6, #80]	; 0x50
 801aa8c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801aa90:	1aed      	subs	r5, r5, r3
 801aa92:	f7ff ba9b 	b.w	8019fcc <dwt_ioctl+0x154>
 801aa96:	2c00      	cmp	r4, #0
 801aa98:	f001 814b 	beq.w	801bd32 <dwt_ioctl+0x1eba>
 801aa9c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801aaa0:	7a23      	ldrb	r3, [r4, #8]
 801aaa2:	f899 2013 	ldrb.w	r2, [r9, #19]
 801aaa6:	2aff      	cmp	r2, #255	; 0xff
 801aaa8:	f000 8122 	beq.w	801acf0 <dwt_ioctl+0xe78>
 801aaac:	2b00      	cmp	r3, #0
 801aaae:	d136      	bne.n	801ab1e <dwt_ioctl+0xca6>
 801aab0:	f8d9 3000 	ldr.w	r3, [r9]
 801aab4:	9300      	str	r3, [sp, #0]
 801aab6:	230c      	movs	r3, #12
 801aab8:	2200      	movs	r2, #0
 801aaba:	49a6      	ldr	r1, [pc, #664]	; (801ad54 <dwt_ioctl+0xedc>)
 801aabc:	f7fd fd0a 	bl	80184d4 <dwt_writetodevice>
 801aac0:	f899 300c 	ldrb.w	r3, [r9, #12]
 801aac4:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 801aac8:	18d1      	adds	r1, r2, r3
 801aaca:	f899 2012 	ldrb.w	r2, [r9, #18]
 801aace:	2a00      	cmp	r2, #0
 801aad0:	d15f      	bne.n	801ab92 <dwt_ioctl+0xd1a>
 801aad2:	f899 0010 	ldrb.w	r0, [r9, #16]
 801aad6:	2800      	cmp	r0, #0
 801aad8:	bf0b      	itete	eq
 801aada:	227f      	moveq	r2, #127	; 0x7f
 801aadc:	f44f 6280 	movne.w	r2, #1024	; 0x400
 801aae0:	f44f 15b0 	moveq.w	r5, #1441792	; 0x160000
 801aae4:	f44f 15a0 	movne.w	r5, #1310720	; 0x140000
 801aae8:	f899 0013 	ldrb.w	r0, [r9, #19]
 801aaec:	1a12      	subs	r2, r2, r0
 801aaee:	3a02      	subs	r2, #2
 801aaf0:	4291      	cmp	r1, r2
 801aaf2:	f200 8103 	bhi.w	801acfc <dwt_ioctl+0xe84>
 801aaf6:	f8d9 2004 	ldr.w	r2, [r9, #4]
 801aafa:	9200      	str	r2, [sp, #0]
 801aafc:	2200      	movs	r2, #0
 801aafe:	4629      	mov	r1, r5
 801ab00:	4630      	mov	r0, r6
 801ab02:	f7fd fce7 	bl	80184d4 <dwt_writetodevice>
 801ab06:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 801ab0a:	f899 200c 	ldrb.w	r2, [r9, #12]
 801ab0e:	f8d9 1008 	ldr.w	r1, [r9, #8]
 801ab12:	9100      	str	r1, [sp, #0]
 801ab14:	4629      	mov	r1, r5
 801ab16:	4630      	mov	r0, r6
 801ab18:	f7fd fcdc 	bl	80184d4 <dwt_writetodevice>
 801ab1c:	e04a      	b.n	801abb4 <dwt_ioctl+0xd3c>
 801ab1e:	f8d9 3000 	ldr.w	r3, [r9]
 801ab22:	f8b9 100e 	ldrh.w	r1, [r9, #14]
 801ab26:	7a9a      	ldrb	r2, [r3, #10]
 801ab28:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
 801ab2c:	7a5a      	ldrb	r2, [r3, #9]
 801ab2e:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
 801ab32:	7a1a      	ldrb	r2, [r3, #8]
 801ab34:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
 801ab38:	79da      	ldrb	r2, [r3, #7]
 801ab3a:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 801ab3e:	799a      	ldrb	r2, [r3, #6]
 801ab40:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 801ab44:	795a      	ldrb	r2, [r3, #5]
 801ab46:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
 801ab4a:	791a      	ldrb	r2, [r3, #4]
 801ab4c:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 801ab50:	78da      	ldrb	r2, [r3, #3]
 801ab52:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
 801ab56:	789a      	ldrb	r2, [r3, #2]
 801ab58:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
 801ab5c:	785a      	ldrb	r2, [r3, #1]
 801ab5e:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
 801ab62:	781a      	ldrb	r2, [r3, #0]
 801ab64:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 801ab68:	2200      	movs	r2, #0
 801ab6a:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
 801ab6e:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 801ab72:	0a09      	lsrs	r1, r1, #8
 801ab74:	f88d 103d 	strb.w	r1, [sp, #61]	; 0x3d
 801ab78:	7b19      	ldrb	r1, [r3, #12]
 801ab7a:	f88d 103e 	strb.w	r1, [sp, #62]	; 0x3e
 801ab7e:	7adb      	ldrb	r3, [r3, #11]
 801ab80:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 801ab84:	ab0c      	add	r3, sp, #48	; 0x30
 801ab86:	9300      	str	r3, [sp, #0]
 801ab88:	2310      	movs	r3, #16
 801ab8a:	4972      	ldr	r1, [pc, #456]	; (801ad54 <dwt_ioctl+0xedc>)
 801ab8c:	f7fd fca2 	bl	80184d4 <dwt_writetodevice>
 801ab90:	e796      	b.n	801aac0 <dwt_ioctl+0xc48>
 801ab92:	2a01      	cmp	r2, #1
 801ab94:	f040 80af 	bne.w	801acf6 <dwt_ioctl+0xe7e>
 801ab98:	f899 3011 	ldrb.w	r3, [r9, #17]
 801ab9c:	2b00      	cmp	r3, #0
 801ab9e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 801aba2:	bf08      	it	eq
 801aba4:	237f      	moveq	r3, #127	; 0x7f
 801aba6:	f899 2013 	ldrb.w	r2, [r9, #19]
 801abaa:	1a9b      	subs	r3, r3, r2
 801abac:	3b02      	subs	r3, #2
 801abae:	4299      	cmp	r1, r3
 801abb0:	f200 80a7 	bhi.w	801ad02 <dwt_ioctl+0xe8a>
 801abb4:	f899 2010 	ldrb.w	r2, [r9, #16]
 801abb8:	1e53      	subs	r3, r2, #1
 801abba:	b2db      	uxtb	r3, r3
 801abbc:	2b01      	cmp	r3, #1
 801abbe:	d940      	bls.n	801ac42 <dwt_ioctl+0xdca>
 801abc0:	f899 3011 	ldrb.w	r3, [r9, #17]
 801abc4:	1e59      	subs	r1, r3, #1
 801abc6:	b2c9      	uxtb	r1, r1
 801abc8:	2901      	cmp	r1, #1
 801abca:	d947      	bls.n	801ac5c <dwt_ioctl+0xde4>
 801abcc:	2b04      	cmp	r3, #4
 801abce:	d04c      	beq.n	801ac6a <dwt_ioctl+0xdf2>
 801abd0:	ea42 3343 	orr.w	r3, r2, r3, lsl #13
 801abd4:	2200      	movs	r2, #0
 801abd6:	4960      	ldr	r1, [pc, #384]	; (801ad58 <dwt_ioctl+0xee0>)
 801abd8:	4630      	mov	r0, r6
 801abda:	f7fd fce3 	bl	80185a4 <dwt_write32bitoffsetreg>
 801abde:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 801abe2:	4a5e      	ldr	r2, [pc, #376]	; (801ad5c <dwt_ioctl+0xee4>)
 801abe4:	ea02 12c3 	and.w	r2, r2, r3, lsl #7
 801abe8:	f899 300c 	ldrb.w	r3, [r9, #12]
 801abec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801abf0:	4313      	orrs	r3, r2
 801abf2:	2200      	movs	r2, #0
 801abf4:	495a      	ldr	r1, [pc, #360]	; (801ad60 <dwt_ioctl+0xee8>)
 801abf6:	4630      	mov	r0, r6
 801abf8:	f7fd fcd4 	bl	80185a4 <dwt_write32bitoffsetreg>
 801abfc:	2301      	movs	r3, #1
 801abfe:	2200      	movs	r2, #0
 801ac00:	4958      	ldr	r1, [pc, #352]	; (801ad64 <dwt_ioctl+0xeec>)
 801ac02:	4630      	mov	r0, r6
 801ac04:	f7fd fe5c 	bl	80188c0 <dwt_write8bitoffsetreg>
 801ac08:	f8df 815c 	ldr.w	r8, [pc, #348]	; 801ad68 <dwt_ioctl+0xef0>
 801ac0c:	2700      	movs	r7, #0
 801ac0e:	463a      	mov	r2, r7
 801ac10:	4641      	mov	r1, r8
 801ac12:	4630      	mov	r0, r6
 801ac14:	f7fd f879 	bl	8017d0a <dwt_read8bitoffsetreg>
 801ac18:	f010 0f05 	tst.w	r0, #5
 801ac1c:	d0f7      	beq.n	801ac0e <dwt_ioctl+0xd96>
 801ac1e:	4605      	mov	r5, r0
 801ac20:	4603      	mov	r3, r0
 801ac22:	2200      	movs	r2, #0
 801ac24:	4950      	ldr	r1, [pc, #320]	; (801ad68 <dwt_ioctl+0xef0>)
 801ac26:	4630      	mov	r0, r6
 801ac28:	f7fd fe4a 	bl	80188c0 <dwt_write8bitoffsetreg>
 801ac2c:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 801ac30:	f025 0330 	bic.w	r3, r5, #48	; 0x30
 801ac34:	2b01      	cmp	r3, #1
 801ac36:	d025      	beq.n	801ac84 <dwt_ioctl+0xe0c>
 801ac38:	b26b      	sxtb	r3, r5
 801ac3a:	7023      	strb	r3, [r4, #0]
 801ac3c:	2500      	movs	r5, #0
 801ac3e:	f7ff b9c5 	b.w	8019fcc <dwt_ioctl+0x154>
 801ac42:	6d33      	ldr	r3, [r6, #80]	; 0x50
 801ac44:	7b9b      	ldrb	r3, [r3, #14]
 801ac46:	2b03      	cmp	r3, #3
 801ac48:	f001 8123 	beq.w	801be92 <dwt_ioctl+0x201a>
 801ac4c:	f899 3011 	ldrb.w	r3, [r9, #17]
 801ac50:	1e5a      	subs	r2, r3, #1
 801ac52:	b2d2      	uxtb	r2, r2
 801ac54:	2a01      	cmp	r2, #1
 801ac56:	d912      	bls.n	801ac7e <dwt_ioctl+0xe06>
 801ac58:	2201      	movs	r2, #1
 801ac5a:	e7b7      	b.n	801abcc <dwt_ioctl+0xd54>
 801ac5c:	6d33      	ldr	r3, [r6, #80]	; 0x50
 801ac5e:	7b9b      	ldrb	r3, [r3, #14]
 801ac60:	2b03      	cmp	r3, #3
 801ac62:	bf0c      	ite	eq
 801ac64:	2302      	moveq	r3, #2
 801ac66:	2301      	movne	r3, #1
 801ac68:	e7b2      	b.n	801abd0 <dwt_ioctl+0xd58>
 801ac6a:	f8b9 100e 	ldrh.w	r1, [r9, #14]
 801ac6e:	2910      	cmp	r1, #16
 801ac70:	d9ae      	bls.n	801abd0 <dwt_ioctl+0xd58>
 801ac72:	f06f 0303 	mvn.w	r3, #3
 801ac76:	e7e0      	b.n	801ac3a <dwt_ioctl+0xdc2>
 801ac78:	2202      	movs	r2, #2
 801ac7a:	4613      	mov	r3, r2
 801ac7c:	e7a8      	b.n	801abd0 <dwt_ioctl+0xd58>
 801ac7e:	2201      	movs	r2, #1
 801ac80:	4613      	mov	r3, r2
 801ac82:	e7a5      	b.n	801abd0 <dwt_ioctl+0xd58>
 801ac84:	f899 3012 	ldrb.w	r3, [r9, #18]
 801ac88:	2b01      	cmp	r3, #1
 801ac8a:	d1d5      	bne.n	801ac38 <dwt_ioctl+0xdc0>
 801ac8c:	f899 2011 	ldrb.w	r2, [r9, #17]
 801ac90:	1e53      	subs	r3, r2, #1
 801ac92:	b2db      	uxtb	r3, r3
 801ac94:	2b01      	cmp	r3, #1
 801ac96:	d91b      	bls.n	801acd0 <dwt_ioctl+0xe58>
 801ac98:	2a03      	cmp	r2, #3
 801ac9a:	bf0c      	ite	eq
 801ac9c:	f44f 17a0 	moveq.w	r7, #1310720	; 0x140000
 801aca0:	f44f 17b0 	movne.w	r7, #1441792	; 0x160000
 801aca4:	f8d9 2004 	ldr.w	r2, [r9, #4]
 801aca8:	b112      	cbz	r2, 801acb0 <dwt_ioctl+0xe38>
 801acaa:	f899 300c 	ldrb.w	r3, [r9, #12]
 801acae:	b9c3      	cbnz	r3, 801ace2 <dwt_ioctl+0xe6a>
 801acb0:	f8d9 1008 	ldr.w	r1, [r9, #8]
 801acb4:	2900      	cmp	r1, #0
 801acb6:	d0bf      	beq.n	801ac38 <dwt_ioctl+0xdc0>
 801acb8:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 801acbc:	2b00      	cmp	r3, #0
 801acbe:	d0bb      	beq.n	801ac38 <dwt_ioctl+0xdc0>
 801acc0:	f899 200c 	ldrb.w	r2, [r9, #12]
 801acc4:	9100      	str	r1, [sp, #0]
 801acc6:	4639      	mov	r1, r7
 801acc8:	4630      	mov	r0, r6
 801acca:	f7fc ffec 	bl	8017ca6 <dwt_readfromdevice>
 801acce:	e7b3      	b.n	801ac38 <dwt_ioctl+0xdc0>
 801acd0:	6d33      	ldr	r3, [r6, #80]	; 0x50
 801acd2:	7b9b      	ldrb	r3, [r3, #14]
 801acd4:	2b03      	cmp	r3, #3
 801acd6:	bf0c      	ite	eq
 801acd8:	f44f 1798 	moveq.w	r7, #1245184	; 0x130000
 801acdc:	f44f 1790 	movne.w	r7, #1179648	; 0x120000
 801ace0:	e7e0      	b.n	801aca4 <dwt_ioctl+0xe2c>
 801ace2:	9200      	str	r2, [sp, #0]
 801ace4:	2200      	movs	r2, #0
 801ace6:	4639      	mov	r1, r7
 801ace8:	4630      	mov	r0, r6
 801acea:	f7fc ffdc 	bl	8017ca6 <dwt_readfromdevice>
 801acee:	e7df      	b.n	801acb0 <dwt_ioctl+0xe38>
 801acf0:	f06f 0302 	mvn.w	r3, #2
 801acf4:	e7a1      	b.n	801ac3a <dwt_ioctl+0xdc2>
 801acf6:	f06f 0301 	mvn.w	r3, #1
 801acfa:	e79e      	b.n	801ac3a <dwt_ioctl+0xdc2>
 801acfc:	f04f 33ff 	mov.w	r3, #4294967295
 801ad00:	e79b      	b.n	801ac3a <dwt_ioctl+0xdc2>
 801ad02:	f04f 33ff 	mov.w	r3, #4294967295
 801ad06:	e798      	b.n	801ac3a <dwt_ioctl+0xdc2>
 801ad08:	7a23      	ldrb	r3, [r4, #8]
 801ad0a:	79e1      	ldrb	r1, [r4, #7]
 801ad0c:	79a2      	ldrb	r2, [r4, #6]
 801ad0e:	00d2      	lsls	r2, r2, #3
 801ad10:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801ad14:	4313      	orrs	r3, r2
 801ad16:	7962      	ldrb	r2, [r4, #5]
 801ad18:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 801ad1c:	7922      	ldrb	r2, [r4, #4]
 801ad1e:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 801ad22:	78e2      	ldrb	r2, [r4, #3]
 801ad24:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801ad28:	78a2      	ldrb	r2, [r4, #2]
 801ad2a:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 801ad2e:	7862      	ldrb	r2, [r4, #1]
 801ad30:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 801ad34:	7822      	ldrb	r2, [r4, #0]
 801ad36:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 801ad3a:	b29b      	uxth	r3, r3
 801ad3c:	2200      	movs	r2, #0
 801ad3e:	490b      	ldr	r1, [pc, #44]	; (801ad6c <dwt_ioctl+0xef4>)
 801ad40:	f7fd fbd3 	bl	80184ea <dwt_write16bitoffsetreg>
 801ad44:	2500      	movs	r5, #0
 801ad46:	f7ff b941 	b.w	8019fcc <dwt_ioctl+0x154>
 801ad4a:	bf00      	nop
 801ad4c:	000f0028 	.word	0x000f0028
 801ad50:	00020008 	.word	0x00020008
 801ad54:	00010034 	.word	0x00010034
 801ad58:	00010044 	.word	0x00010044
 801ad5c:	0001ff80 	.word	0x0001ff80
 801ad60:	00010048 	.word	0x00010048
 801ad64:	0001004c 	.word	0x0001004c
 801ad68:	00010050 	.word	0x00010050
 801ad6c:	00010030 	.word	0x00010030
 801ad70:	2c00      	cmp	r4, #0
 801ad72:	f000 87e1 	beq.w	801bd38 <dwt_ioctl+0x1ec0>
 801ad76:	7863      	ldrb	r3, [r4, #1]
 801ad78:	b133      	cbz	r3, 801ad88 <dwt_ioctl+0xf10>
 801ad7a:	085b      	lsrs	r3, r3, #1
 801ad7c:	3b01      	subs	r3, #1
 801ad7e:	b2db      	uxtb	r3, r3
 801ad80:	7023      	strb	r3, [r4, #0]
 801ad82:	2500      	movs	r5, #0
 801ad84:	f7ff b922 	b.w	8019fcc <dwt_ioctl+0x154>
 801ad88:	2300      	movs	r3, #0
 801ad8a:	e7f9      	b.n	801ad80 <dwt_ioctl+0xf08>
 801ad8c:	2200      	movs	r2, #0
 801ad8e:	49d0      	ldr	r1, [pc, #832]	; (801b0d0 <dwt_ioctl+0x1258>)
 801ad90:	f7fc ff93 	bl	8017cba <dwt_read32bitoffsetreg>
 801ad94:	f3c0 030b 	ubfx	r3, r0, #0, #12
 801ad98:	8023      	strh	r3, [r4, #0]
 801ad9a:	f3c0 400b 	ubfx	r0, r0, #16, #12
 801ad9e:	8060      	strh	r0, [r4, #2]
 801ada0:	2200      	movs	r2, #0
 801ada2:	49cc      	ldr	r1, [pc, #816]	; (801b0d4 <dwt_ioctl+0x125c>)
 801ada4:	4630      	mov	r0, r6
 801ada6:	f7fc ff88 	bl	8017cba <dwt_read32bitoffsetreg>
 801adaa:	f3c0 030b 	ubfx	r3, r0, #0, #12
 801adae:	80a3      	strh	r3, [r4, #4]
 801adb0:	f3c0 400b 	ubfx	r0, r0, #16, #12
 801adb4:	80e0      	strh	r0, [r4, #6]
 801adb6:	2200      	movs	r2, #0
 801adb8:	49c7      	ldr	r1, [pc, #796]	; (801b0d8 <dwt_ioctl+0x1260>)
 801adba:	4630      	mov	r0, r6
 801adbc:	f7fc ff7d 	bl	8017cba <dwt_read32bitoffsetreg>
 801adc0:	7220      	strb	r0, [r4, #8]
 801adc2:	0c00      	lsrs	r0, r0, #16
 801adc4:	7260      	strb	r0, [r4, #9]
 801adc6:	2200      	movs	r2, #0
 801adc8:	49c4      	ldr	r1, [pc, #784]	; (801b0dc <dwt_ioctl+0x1264>)
 801adca:	4630      	mov	r0, r6
 801adcc:	f7fc ff75 	bl	8017cba <dwt_read32bitoffsetreg>
 801add0:	f3c0 430b 	ubfx	r3, r0, #16, #12
 801add4:	81a3      	strh	r3, [r4, #12]
 801add6:	f3c0 000b 	ubfx	r0, r0, #0, #12
 801adda:	8160      	strh	r0, [r4, #10]
 801addc:	2200      	movs	r2, #0
 801adde:	49c0      	ldr	r1, [pc, #768]	; (801b0e0 <dwt_ioctl+0x1268>)
 801ade0:	4630      	mov	r0, r6
 801ade2:	f7fc ff6a 	bl	8017cba <dwt_read32bitoffsetreg>
 801ade6:	f3c0 430b 	ubfx	r3, r0, #16, #12
 801adea:	f8a4 300f 	strh.w	r3, [r4, #15]
 801adee:	73a0      	strb	r0, [r4, #14]
 801adf0:	2200      	movs	r2, #0
 801adf2:	49bc      	ldr	r1, [pc, #752]	; (801b0e4 <dwt_ioctl+0x126c>)
 801adf4:	4630      	mov	r0, r6
 801adf6:	f7fc ff60 	bl	8017cba <dwt_read32bitoffsetreg>
 801adfa:	7460      	strb	r0, [r4, #17]
 801adfc:	0c00      	lsrs	r0, r0, #16
 801adfe:	74a0      	strb	r0, [r4, #18]
 801ae00:	2200      	movs	r2, #0
 801ae02:	49b9      	ldr	r1, [pc, #740]	; (801b0e8 <dwt_ioctl+0x1270>)
 801ae04:	4630      	mov	r0, r6
 801ae06:	f7fc ff58 	bl	8017cba <dwt_read32bitoffsetreg>
 801ae0a:	f3c0 000b 	ubfx	r0, r0, #0, #12
 801ae0e:	f8a4 0013 	strh.w	r0, [r4, #19]
 801ae12:	2500      	movs	r5, #0
 801ae14:	7565      	strb	r5, [r4, #21]
 801ae16:	75a5      	strb	r5, [r4, #22]
 801ae18:	462a      	mov	r2, r5
 801ae1a:	49b4      	ldr	r1, [pc, #720]	; (801b0ec <dwt_ioctl+0x1274>)
 801ae1c:	4630      	mov	r0, r6
 801ae1e:	f7fc ff74 	bl	8017d0a <dwt_read8bitoffsetreg>
 801ae22:	75e0      	strb	r0, [r4, #23]
 801ae24:	f7ff b8d2 	b.w	8019fcc <dwt_ioctl+0x154>
 801ae28:	4611      	mov	r1, r2
 801ae2a:	f7fd fdc1 	bl	80189b0 <ull_configeventcounters>
 801ae2e:	2500      	movs	r5, #0
 801ae30:	f7ff b8cc 	b.w	8019fcc <dwt_ioctl+0x154>
 801ae34:	2c00      	cmp	r4, #0
 801ae36:	f000 8782 	beq.w	801bd3e <dwt_ioctl+0x1ec6>
 801ae3a:	8823      	ldrh	r3, [r4, #0]
 801ae3c:	2200      	movs	r2, #0
 801ae3e:	49ac      	ldr	r1, [pc, #688]	; (801b0f0 <dwt_ioctl+0x1278>)
 801ae40:	f7fd fb53 	bl	80184ea <dwt_write16bitoffsetreg>
 801ae44:	2500      	movs	r5, #0
 801ae46:	f7ff b8c1 	b.w	8019fcc <dwt_ioctl+0x154>
 801ae4a:	2c00      	cmp	r4, #0
 801ae4c:	f000 877a 	beq.w	801bd44 <dwt_ioctl+0x1ecc>
 801ae50:	6825      	ldr	r5, [r4, #0]
 801ae52:	b935      	cbnz	r5, 801ae62 <dwt_ioctl+0xfea>
 801ae54:	2300      	movs	r3, #0
 801ae56:	461a      	mov	r2, r3
 801ae58:	49a6      	ldr	r1, [pc, #664]	; (801b0f4 <dwt_ioctl+0x127c>)
 801ae5a:	f7fd fb46 	bl	80184ea <dwt_write16bitoffsetreg>
 801ae5e:	f7ff b8b5 	b.w	8019fcc <dwt_ioctl+0x154>
 801ae62:	7962      	ldrb	r2, [r4, #5]
 801ae64:	7923      	ldrb	r3, [r4, #4]
 801ae66:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801ae6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801ae6e:	2200      	movs	r2, #0
 801ae70:	49a0      	ldr	r1, [pc, #640]	; (801b0f4 <dwt_ioctl+0x127c>)
 801ae72:	f7fd fb3a 	bl	80184ea <dwt_write16bitoffsetreg>
 801ae76:	2500      	movs	r5, #0
 801ae78:	f7ff b8a8 	b.w	8019fcc <dwt_ioctl+0x154>
 801ae7c:	2c00      	cmp	r4, #0
 801ae7e:	f000 8764 	beq.w	801bd4a <dwt_ioctl+0x1ed2>
 801ae82:	6823      	ldr	r3, [r4, #0]
 801ae84:	b94b      	cbnz	r3, 801ae9a <dwt_ioctl+0x1022>
 801ae86:	2500      	movs	r5, #0
 801ae88:	9500      	str	r5, [sp, #0]
 801ae8a:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 801ae8e:	462a      	mov	r2, r5
 801ae90:	2110      	movs	r1, #16
 801ae92:	f7fe fb67 	bl	8019564 <dwt_modify16bitoffsetreg>
 801ae96:	f7ff b899 	b.w	8019fcc <dwt_ioctl+0x154>
 801ae9a:	2200      	movs	r2, #0
 801ae9c:	2134      	movs	r1, #52	; 0x34
 801ae9e:	f7fd fb81 	bl	80185a4 <dwt_write32bitoffsetreg>
 801aea2:	f44f 7300 	mov.w	r3, #512	; 0x200
 801aea6:	9300      	str	r3, [sp, #0]
 801aea8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801aeac:	2200      	movs	r2, #0
 801aeae:	2110      	movs	r1, #16
 801aeb0:	4630      	mov	r0, r6
 801aeb2:	f7fe fb57 	bl	8019564 <dwt_modify16bitoffsetreg>
 801aeb6:	2500      	movs	r5, #0
 801aeb8:	f7ff b888 	b.w	8019fcc <dwt_ioctl+0x154>
 801aebc:	2c00      	cmp	r4, #0
 801aebe:	f000 8747 	beq.w	801bd50 <dwt_ioctl+0x1ed8>
 801aec2:	8861      	ldrh	r1, [r4, #2]
 801aec4:	f7fd fd88 	bl	80189d8 <ull_aon_read>
 801aec8:	7020      	strb	r0, [r4, #0]
 801aeca:	2500      	movs	r5, #0
 801aecc:	f7ff b87e 	b.w	8019fcc <dwt_ioctl+0x154>
 801aed0:	2c00      	cmp	r4, #0
 801aed2:	f000 8740 	beq.w	801bd56 <dwt_ioctl+0x1ede>
 801aed6:	78a2      	ldrb	r2, [r4, #2]
 801aed8:	8821      	ldrh	r1, [r4, #0]
 801aeda:	f7fd fd9d 	bl	8018a18 <ull_aon_write>
 801aede:	2500      	movs	r5, #0
 801aee0:	f7ff b874 	b.w	8019fcc <dwt_ioctl+0x154>
 801aee4:	4b84      	ldr	r3, [pc, #528]	; (801b0f8 <dwt_ioctl+0x1280>)
 801aee6:	4a85      	ldr	r2, [pc, #532]	; (801b0fc <dwt_ioctl+0x1284>)
 801aee8:	2d01      	cmp	r5, #1
 801aeea:	bf18      	it	ne
 801aeec:	4613      	movne	r3, r2
 801aeee:	2d01      	cmp	r5, #1
 801aef0:	4983      	ldr	r1, [pc, #524]	; (801b100 <dwt_ioctl+0x1288>)
 801aef2:	bf18      	it	ne
 801aef4:	f04f 110c 	movne.w	r1, #786444	; 0xc000c
 801aef8:	6d02      	ldr	r2, [r0, #80]	; 0x50
 801aefa:	7b92      	ldrb	r2, [r2, #14]
 801aefc:	2a01      	cmp	r2, #1
 801aefe:	d012      	beq.n	801af26 <dwt_ioctl+0x10ae>
 801af00:	2a03      	cmp	r2, #3
 801af02:	d117      	bne.n	801af34 <dwt_ioctl+0x10bc>
 801af04:	f5a2 12c0 	sub.w	r2, r2, #1572864	; 0x180000
 801af08:	3a01      	subs	r2, #1
 801af0a:	441a      	add	r2, r3
 801af0c:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 801af10:	f7fc fee9 	bl	8017ce6 <dwt_read16bitoffsetreg>
 801af14:	09c0      	lsrs	r0, r0, #7
 801af16:	8020      	strh	r0, [r4, #0]
 801af18:	8825      	ldrh	r5, [r4, #0]
 801af1a:	3500      	adds	r5, #0
 801af1c:	bf18      	it	ne
 801af1e:	2501      	movne	r5, #1
 801af20:	426d      	negs	r5, r5
 801af22:	f7ff b853 	b.w	8019fcc <dwt_ioctl+0x154>
 801af26:	2202      	movs	r2, #2
 801af28:	4619      	mov	r1, r3
 801af2a:	f7fc fedc 	bl	8017ce6 <dwt_read16bitoffsetreg>
 801af2e:	09c0      	lsrs	r0, r0, #7
 801af30:	8020      	strh	r0, [r4, #0]
 801af32:	e7f1      	b.n	801af18 <dwt_ioctl+0x10a0>
 801af34:	2202      	movs	r2, #2
 801af36:	f7fc fed6 	bl	8017ce6 <dwt_read16bitoffsetreg>
 801af3a:	09c0      	lsrs	r0, r0, #7
 801af3c:	8020      	strh	r0, [r4, #0]
 801af3e:	e7eb      	b.n	801af18 <dwt_ioctl+0x10a0>
 801af40:	2c00      	cmp	r4, #0
 801af42:	f000 870b 	beq.w	801bd5c <dwt_ioctl+0x1ee4>
 801af46:	7821      	ldrb	r1, [r4, #0]
 801af48:	f7fe fb26 	bl	8019598 <ull_setleds>
 801af4c:	2500      	movs	r5, #0
 801af4e:	f7ff b83d 	b.w	8019fcc <dwt_ioctl+0x154>
 801af52:	4611      	mov	r1, r2
 801af54:	f7fe f9a8 	bl	80192a8 <ull_setdwstate>
 801af58:	2500      	movs	r5, #0
 801af5a:	f7ff b837 	b.w	8019fcc <dwt_ioctl+0x154>
 801af5e:	9400      	str	r4, [sp, #0]
 801af60:	2304      	movs	r3, #4
 801af62:	2200      	movs	r2, #0
 801af64:	211c      	movs	r1, #28
 801af66:	f7fc fe9e 	bl	8017ca6 <dwt_readfromdevice>
 801af6a:	2500      	movs	r5, #0
 801af6c:	f7ff b82e 	b.w	8019fcc <dwt_ioctl+0x154>
 801af70:	2c00      	cmp	r4, #0
 801af72:	f000 86f6 	beq.w	801bd62 <dwt_ioctl+0x1eea>
 801af76:	2202      	movs	r2, #2
 801af78:	2144      	movs	r1, #68	; 0x44
 801af7a:	f7fc feb4 	bl	8017ce6 <dwt_read16bitoffsetreg>
 801af7e:	f3c0 2000 	ubfx	r0, r0, #8, #1
 801af82:	7020      	strb	r0, [r4, #0]
 801af84:	2500      	movs	r5, #0
 801af86:	f7ff b821 	b.w	8019fcc <dwt_ioctl+0x154>
 801af8a:	2c00      	cmp	r4, #0
 801af8c:	f000 86ec 	beq.w	801bd68 <dwt_ioctl+0x1ef0>
 801af90:	2200      	movs	r2, #0
 801af92:	2144      	movs	r1, #68	; 0x44
 801af94:	f7fc feb9 	bl	8017d0a <dwt_read8bitoffsetreg>
 801af98:	f000 0001 	and.w	r0, r0, #1
 801af9c:	7020      	strb	r0, [r4, #0]
 801af9e:	2500      	movs	r5, #0
 801afa0:	f7ff b814 	b.w	8019fcc <dwt_ioctl+0x154>
 801afa4:	2c00      	cmp	r4, #0
 801afa6:	f000 86e2 	beq.w	801bd6e <dwt_ioctl+0x1ef6>
 801afaa:	8862      	ldrh	r2, [r4, #2]
 801afac:	8821      	ldrh	r1, [r4, #0]
 801afae:	f7fe f9d7 	bl	8019360 <ull_configureframefilter>
 801afb2:	2500      	movs	r5, #0
 801afb4:	f7ff b80a 	b.w	8019fcc <dwt_ioctl+0x154>
 801afb8:	9400      	str	r4, [sp, #0]
 801afba:	2308      	movs	r3, #8
 801afbc:	2200      	movs	r2, #0
 801afbe:	2104      	movs	r1, #4
 801afc0:	f7fd fa88 	bl	80184d4 <dwt_writetodevice>
 801afc4:	2500      	movs	r5, #0
 801afc6:	f7ff b801 	b.w	8019fcc <dwt_ioctl+0x154>
 801afca:	9400      	str	r4, [sp, #0]
 801afcc:	2308      	movs	r3, #8
 801afce:	2200      	movs	r2, #0
 801afd0:	2104      	movs	r1, #4
 801afd2:	f7fc fe68 	bl	8017ca6 <dwt_readfromdevice>
 801afd6:	2500      	movs	r5, #0
 801afd8:	f7fe bff8 	b.w	8019fcc <dwt_ioctl+0x154>
 801afdc:	2c00      	cmp	r4, #0
 801afde:	f000 86c9 	beq.w	801bd74 <dwt_ioctl+0x1efc>
 801afe2:	8823      	ldrh	r3, [r4, #0]
 801afe4:	2202      	movs	r2, #2
 801afe6:	210c      	movs	r1, #12
 801afe8:	f7fd fa7f 	bl	80184ea <dwt_write16bitoffsetreg>
 801afec:	2500      	movs	r5, #0
 801afee:	f7fe bfed 	b.w	8019fcc <dwt_ioctl+0x154>
 801aff2:	2c00      	cmp	r4, #0
 801aff4:	f000 86c1 	beq.w	801bd7a <dwt_ioctl+0x1f02>
 801aff8:	8823      	ldrh	r3, [r4, #0]
 801affa:	2200      	movs	r2, #0
 801affc:	210c      	movs	r1, #12
 801affe:	f7fd fa74 	bl	80184ea <dwt_write16bitoffsetreg>
 801b002:	2500      	movs	r5, #0
 801b004:	f7fe bfe2 	b.w	8019fcc <dwt_ioctl+0x154>
 801b008:	4621      	mov	r1, r4
 801b00a:	f7fd fa41 	bl	8018490 <ull_readrxtimestamp>
 801b00e:	2500      	movs	r5, #0
 801b010:	f7fe bfdc 	b.w	8019fcc <dwt_ioctl+0x154>
 801b014:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801b016:	7b9b      	ldrb	r3, [r3, #14]
 801b018:	2b01      	cmp	r3, #1
 801b01a:	d00b      	beq.n	801b034 <dwt_ioctl+0x11bc>
 801b01c:	2b03      	cmp	r3, #3
 801b01e:	d112      	bne.n	801b046 <dwt_ioctl+0x11ce>
 801b020:	9400      	str	r4, [sp, #0]
 801b022:	2305      	movs	r3, #5
 801b024:	2220      	movs	r2, #32
 801b026:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 801b02a:	f7fc fe3c 	bl	8017ca6 <dwt_readfromdevice>
 801b02e:	2500      	movs	r5, #0
 801b030:	f7fe bfcc 	b.w	8019fcc <dwt_ioctl+0x154>
 801b034:	9400      	str	r4, [sp, #0]
 801b036:	2305      	movs	r3, #5
 801b038:	2200      	movs	r2, #0
 801b03a:	4932      	ldr	r1, [pc, #200]	; (801b104 <dwt_ioctl+0x128c>)
 801b03c:	f7fc fe33 	bl	8017ca6 <dwt_readfromdevice>
 801b040:	2500      	movs	r5, #0
 801b042:	f7fe bfc3 	b.w	8019fcc <dwt_ioctl+0x154>
 801b046:	9400      	str	r4, [sp, #0]
 801b048:	2305      	movs	r3, #5
 801b04a:	2200      	movs	r2, #0
 801b04c:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 801b050:	f7fc fe29 	bl	8017ca6 <dwt_readfromdevice>
 801b054:	2500      	movs	r5, #0
 801b056:	f7fe bfb9 	b.w	8019fcc <dwt_ioctl+0x154>
 801b05a:	2500      	movs	r5, #0
 801b05c:	f804 5b01 	strb.w	r5, [r4], #1
 801b060:	9400      	str	r4, [sp, #0]
 801b062:	2304      	movs	r3, #4
 801b064:	462a      	mov	r2, r5
 801b066:	216c      	movs	r1, #108	; 0x6c
 801b068:	f7fc fe1d 	bl	8017ca6 <dwt_readfromdevice>
 801b06c:	f7fe bfae 	b.w	8019fcc <dwt_ioctl+0x154>
 801b070:	2c00      	cmp	r4, #0
 801b072:	f000 8685 	beq.w	801bd80 <dwt_ioctl+0x1f08>
 801b076:	2201      	movs	r2, #1
 801b078:	2160      	movs	r1, #96	; 0x60
 801b07a:	f7fc fe1e 	bl	8017cba <dwt_read32bitoffsetreg>
 801b07e:	6020      	str	r0, [r4, #0]
 801b080:	2500      	movs	r5, #0
 801b082:	f7fe bfa3 	b.w	8019fcc <dwt_ioctl+0x154>
 801b086:	2c00      	cmp	r4, #0
 801b088:	f000 867d 	beq.w	801bd86 <dwt_ioctl+0x1f0e>
 801b08c:	2200      	movs	r2, #0
 801b08e:	2160      	movs	r1, #96	; 0x60
 801b090:	f7fc fe13 	bl	8017cba <dwt_read32bitoffsetreg>
 801b094:	6020      	str	r0, [r4, #0]
 801b096:	2500      	movs	r5, #0
 801b098:	f7fe bf98 	b.w	8019fcc <dwt_ioctl+0x154>
 801b09c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801b09e:	7b9b      	ldrb	r3, [r3, #14]
 801b0a0:	2b01      	cmp	r3, #1
 801b0a2:	d00b      	beq.n	801b0bc <dwt_ioctl+0x1244>
 801b0a4:	2b03      	cmp	r3, #3
 801b0a6:	d131      	bne.n	801b10c <dwt_ioctl+0x1294>
 801b0a8:	9400      	str	r4, [sp, #0]
 801b0aa:	2305      	movs	r3, #5
 801b0ac:	2228      	movs	r2, #40	; 0x28
 801b0ae:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 801b0b2:	f7fc fdf8 	bl	8017ca6 <dwt_readfromdevice>
 801b0b6:	2500      	movs	r5, #0
 801b0b8:	f7fe bf88 	b.w	8019fcc <dwt_ioctl+0x154>
 801b0bc:	9400      	str	r4, [sp, #0]
 801b0be:	2305      	movs	r3, #5
 801b0c0:	2200      	movs	r2, #0
 801b0c2:	4911      	ldr	r1, [pc, #68]	; (801b108 <dwt_ioctl+0x1290>)
 801b0c4:	f7fc fdef 	bl	8017ca6 <dwt_readfromdevice>
 801b0c8:	2500      	movs	r5, #0
 801b0ca:	f7fe bf7f 	b.w	8019fcc <dwt_ioctl+0x154>
 801b0ce:	bf00      	nop
 801b0d0:	000f0004 	.word	0x000f0004
 801b0d4:	000f0008 	.word	0x000f0008
 801b0d8:	000f000c 	.word	0x000f000c
 801b0dc:	000f0010 	.word	0x000f0010
 801b0e0:	000f0014 	.word	0x000f0014
 801b0e4:	000f0018 	.word	0x000f0018
 801b0e8:	000f001c 	.word	0x000f001c
 801b0ec:	000f0020 	.word	0x000f0020
 801b0f0:	00060004 	.word	0x00060004
 801b0f4:	0011001c 	.word	0x0011001c
 801b0f8:	00180034 	.word	0x00180034
 801b0fc:	0018002c 	.word	0x0018002c
 801b100:	000c0014 	.word	0x000c0014
 801b104:	00180020 	.word	0x00180020
 801b108:	00180028 	.word	0x00180028
 801b10c:	9400      	str	r4, [sp, #0]
 801b10e:	2305      	movs	r3, #5
 801b110:	2200      	movs	r2, #0
 801b112:	49ce      	ldr	r1, [pc, #824]	; (801b44c <dwt_ioctl+0x15d4>)
 801b114:	f7fc fdc7 	bl	8017ca6 <dwt_readfromdevice>
 801b118:	2500      	movs	r5, #0
 801b11a:	f7fe bf57 	b.w	8019fcc <dwt_ioctl+0x154>
 801b11e:	2c00      	cmp	r4, #0
 801b120:	f000 8634 	beq.w	801bd8c <dwt_ioctl+0x1f14>
 801b124:	2200      	movs	r2, #0
 801b126:	211c      	movs	r1, #28
 801b128:	f7fc fdc7 	bl	8017cba <dwt_read32bitoffsetreg>
 801b12c:	6020      	str	r0, [r4, #0]
 801b12e:	2500      	movs	r5, #0
 801b130:	f7fe bf4c 	b.w	8019fcc <dwt_ioctl+0x154>
 801b134:	2c00      	cmp	r4, #0
 801b136:	f000 862c 	beq.w	801bd92 <dwt_ioctl+0x1f1a>
 801b13a:	8825      	ldrh	r5, [r4, #0]
 801b13c:	6867      	ldr	r7, [r4, #4]
 801b13e:	7a23      	ldrb	r3, [r4, #8]
 801b140:	2b00      	cmp	r3, #0
 801b142:	f000 8629 	beq.w	801bd98 <dwt_ioctl+0x1f20>
 801b146:	463c      	mov	r4, r7
 801b148:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 801b14c:	4629      	mov	r1, r5
 801b14e:	4630      	mov	r0, r6
 801b150:	f7fd fa06 	bl	8018560 <_dwt_otpread>
 801b154:	f844 0b04 	str.w	r0, [r4], #4
 801b158:	3501      	adds	r5, #1
 801b15a:	b2ad      	uxth	r5, r5
 801b15c:	42bc      	cmp	r4, r7
 801b15e:	d1f5      	bne.n	801b14c <dwt_ioctl+0x12d4>
 801b160:	2500      	movs	r5, #0
 801b162:	f7fe bf33 	b.w	8019fcc <dwt_ioctl+0x154>
 801b166:	2c00      	cmp	r4, #0
 801b168:	f000 8619 	beq.w	801bd9e <dwt_ioctl+0x1f26>
 801b16c:	7823      	ldrb	r3, [r4, #0]
 801b16e:	2201      	movs	r2, #1
 801b170:	2124      	movs	r1, #36	; 0x24
 801b172:	f7fd fba5 	bl	80188c0 <dwt_write8bitoffsetreg>
 801b176:	2500      	movs	r5, #0
 801b178:	f7fe bf28 	b.w	8019fcc <dwt_ioctl+0x154>
 801b17c:	f7fe f914 	bl	80193a8 <ull_run_pgfcal>
 801b180:	4605      	mov	r5, r0
 801b182:	f7fe bf23 	b.w	8019fcc <dwt_ioctl+0x154>
 801b186:	4611      	mov	r1, r2
 801b188:	f7fe fa54 	bl	8019634 <ull_pgf_cal>
 801b18c:	4605      	mov	r5, r0
 801b18e:	f7fe bf1d 	b.w	8019fcc <dwt_ioctl+0x154>
 801b192:	2c00      	cmp	r4, #0
 801b194:	f000 8606 	beq.w	801bda4 <dwt_ioctl+0x1f2c>
 801b198:	78a5      	ldrb	r5, [r4, #2]
 801b19a:	2101      	movs	r1, #1
 801b19c:	f7fd f9b6 	bl	801850c <ull_force_clocks>
 801b1a0:	2100      	movs	r1, #0
 801b1a2:	4630      	mov	r0, r6
 801b1a4:	f7fd fe74 	bl	8018e90 <ull_enable_rf_tx>
 801b1a8:	4630      	mov	r0, r6
 801b1aa:	f7fd fea5 	bl	8018ef8 <ull_enable_rftx_blocks>
 801b1ae:	f005 033f 	and.w	r3, r5, #63	; 0x3f
 801b1b2:	2200      	movs	r2, #0
 801b1b4:	49a6      	ldr	r1, [pc, #664]	; (801b450 <dwt_ioctl+0x15d8>)
 801b1b6:	4630      	mov	r0, r6
 801b1b8:	f7fd fb82 	bl	80188c0 <dwt_write8bitoffsetreg>
 801b1bc:	2301      	movs	r3, #1
 801b1be:	9300      	str	r3, [sp, #0]
 801b1c0:	23ff      	movs	r3, #255	; 0xff
 801b1c2:	2200      	movs	r2, #0
 801b1c4:	49a3      	ldr	r1, [pc, #652]	; (801b454 <dwt_ioctl+0x15dc>)
 801b1c6:	4630      	mov	r0, r6
 801b1c8:	f7fd ffb0 	bl	801912c <dwt_modify8bitoffsetreg>
 801b1cc:	4fa1      	ldr	r7, [pc, #644]	; (801b454 <dwt_ioctl+0x15dc>)
 801b1ce:	2500      	movs	r5, #0
 801b1d0:	462a      	mov	r2, r5
 801b1d2:	4639      	mov	r1, r7
 801b1d4:	4630      	mov	r0, r6
 801b1d6:	f7fc fd98 	bl	8017d0a <dwt_read8bitoffsetreg>
 801b1da:	f010 0f01 	tst.w	r0, #1
 801b1de:	d1f7      	bne.n	801b1d0 <dwt_ioctl+0x1358>
 801b1e0:	2200      	movs	r2, #0
 801b1e2:	499d      	ldr	r1, [pc, #628]	; (801b458 <dwt_ioctl+0x15e0>)
 801b1e4:	4630      	mov	r0, r6
 801b1e6:	f7fc fd7e 	bl	8017ce6 <dwt_read16bitoffsetreg>
 801b1ea:	4605      	mov	r5, r0
 801b1ec:	4630      	mov	r0, r6
 801b1ee:	f7fd fb09 	bl	8018804 <ull_disable_rftx_blocks>
 801b1f2:	2100      	movs	r1, #0
 801b1f4:	4630      	mov	r0, r6
 801b1f6:	f7fd fb0f 	bl	8018818 <ull_disable_rf_tx>
 801b1fa:	2105      	movs	r1, #5
 801b1fc:	4630      	mov	r0, r6
 801b1fe:	f7fd f985 	bl	801850c <ull_force_clocks>
 801b202:	f3c5 050b 	ubfx	r5, r5, #0, #12
 801b206:	8025      	strh	r5, [r4, #0]
 801b208:	2500      	movs	r5, #0
 801b20a:	f7fe bedf 	b.w	8019fcc <dwt_ioctl+0x154>
 801b20e:	2102      	movs	r1, #2
 801b210:	f7fe f84a 	bl	80192a8 <ull_setdwstate>
 801b214:	2101      	movs	r1, #1
 801b216:	4630      	mov	r0, r6
 801b218:	f7fe f846 	bl	80192a8 <ull_setdwstate>
 801b21c:	2432      	movs	r4, #50	; 0x32
 801b21e:	f04f 0814 	mov.w	r8, #20
 801b222:	2700      	movs	r7, #0
 801b224:	2544      	movs	r5, #68	; 0x44
 801b226:	4640      	mov	r0, r8
 801b228:	f7e5 fcaf 	bl	8000b8a <deca_usleep>
 801b22c:	463a      	mov	r2, r7
 801b22e:	4629      	mov	r1, r5
 801b230:	4630      	mov	r0, r6
 801b232:	f7fc fd6a 	bl	8017d0a <dwt_read8bitoffsetreg>
 801b236:	f010 0f02 	tst.w	r0, #2
 801b23a:	d105      	bne.n	801b248 <dwt_ioctl+0x13d0>
 801b23c:	1e63      	subs	r3, r4, #1
 801b23e:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 801b242:	d1f0      	bne.n	801b226 <dwt_ioctl+0x13ae>
 801b244:	2501      	movs	r5, #1
 801b246:	e000      	b.n	801b24a <dwt_ioctl+0x13d2>
 801b248:	2500      	movs	r5, #0
 801b24a:	426d      	negs	r5, r5
 801b24c:	f7fe bebe 	b.w	8019fcc <dwt_ioctl+0x154>
 801b250:	2c00      	cmp	r4, #0
 801b252:	f000 85aa 	beq.w	801bdaa <dwt_ioctl+0x1f32>
 801b256:	7823      	ldrb	r3, [r4, #0]
 801b258:	031b      	lsls	r3, r3, #12
 801b25a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 801b25e:	7862      	ldrb	r2, [r4, #1]
 801b260:	2a01      	cmp	r2, #1
 801b262:	bf08      	it	eq
 801b264:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
 801b268:	9300      	str	r3, [sp, #0]
 801b26a:	f46f 43e2 	mvn.w	r3, #28928	; 0x7100
 801b26e:	2200      	movs	r2, #0
 801b270:	497a      	ldr	r1, [pc, #488]	; (801b45c <dwt_ioctl+0x15e4>)
 801b272:	f7fd fde9 	bl	8018e48 <dwt_modify32bitoffsetreg>
 801b276:	2500      	movs	r5, #0
 801b278:	f7fe bea8 	b.w	8019fcc <dwt_ioctl+0x154>
 801b27c:	2c00      	cmp	r4, #0
 801b27e:	f000 8597 	beq.w	801bdb0 <dwt_ioctl+0x1f38>
 801b282:	6862      	ldr	r2, [r4, #4]
 801b284:	6821      	ldr	r1, [r4, #0]
 801b286:	f7fd ff01 	bl	801908c <ull_setgpiomode>
 801b28a:	2500      	movs	r5, #0
 801b28c:	f7fe be9e 	b.w	8019fcc <dwt_ioctl+0x154>
 801b290:	2c00      	cmp	r4, #0
 801b292:	f000 8590 	beq.w	801bdb6 <dwt_ioctl+0x1f3e>
 801b296:	8823      	ldrh	r3, [r4, #0]
 801b298:	2200      	movs	r2, #0
 801b29a:	4971      	ldr	r1, [pc, #452]	; (801b460 <dwt_ioctl+0x15e8>)
 801b29c:	f7fd f925 	bl	80184ea <dwt_write16bitoffsetreg>
 801b2a0:	2500      	movs	r5, #0
 801b2a2:	f7fe be93 	b.w	8019fcc <dwt_ioctl+0x154>
 801b2a6:	2c00      	cmp	r4, #0
 801b2a8:	f000 8588 	beq.w	801bdbc <dwt_ioctl+0x1f44>
 801b2ac:	6862      	ldr	r2, [r4, #4]
 801b2ae:	8821      	ldrh	r1, [r4, #0]
 801b2b0:	f7fe f9f0 	bl	8019694 <ull_setgpiovalue>
 801b2b4:	2500      	movs	r5, #0
 801b2b6:	f7fe be89 	b.w	8019fcc <dwt_ioctl+0x154>
 801b2ba:	2c00      	cmp	r4, #0
 801b2bc:	f000 8581 	beq.w	801bdc2 <dwt_ioctl+0x1f4a>
 801b2c0:	7865      	ldrb	r5, [r4, #1]
 801b2c2:	7823      	ldrb	r3, [r4, #0]
 801b2c4:	b18b      	cbz	r3, 801b2ea <dwt_ioctl+0x1472>
 801b2c6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801b2c8:	2200      	movs	r2, #0
 801b2ca:	739a      	strb	r2, [r3, #14]
 801b2cc:	f04f 33ff 	mov.w	r3, #4294967295
 801b2d0:	2208      	movs	r2, #8
 801b2d2:	b1e5      	cbz	r5, 801b30e <dwt_ioctl+0x1496>
 801b2d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801b2d8:	9200      	str	r2, [sp, #0]
 801b2da:	2200      	movs	r2, #0
 801b2dc:	2110      	movs	r1, #16
 801b2de:	4630      	mov	r0, r6
 801b2e0:	f7fd fdb2 	bl	8018e48 <dwt_modify32bitoffsetreg>
 801b2e4:	2500      	movs	r5, #0
 801b2e6:	f7fe be71 	b.w	8019fcc <dwt_ioctl+0x154>
 801b2ea:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801b2ec:	2201      	movs	r2, #1
 801b2ee:	739a      	strb	r2, [r3, #14]
 801b2f0:	2318      	movs	r3, #24
 801b2f2:	2200      	movs	r2, #0
 801b2f4:	495b      	ldr	r1, [pc, #364]	; (801b464 <dwt_ioctl+0x15ec>)
 801b2f6:	f7fd f955 	bl	80185a4 <dwt_write32bitoffsetreg>
 801b2fa:	23e8      	movs	r3, #232	; 0xe8
 801b2fc:	2200      	movs	r2, #0
 801b2fe:	495a      	ldr	r1, [pc, #360]	; (801b468 <dwt_ioctl+0x15f0>)
 801b300:	4630      	mov	r0, r6
 801b302:	f7fd f94f 	bl	80185a4 <dwt_write32bitoffsetreg>
 801b306:	f06f 0308 	mvn.w	r3, #8
 801b30a:	2200      	movs	r2, #0
 801b30c:	e7e1      	b.n	801b2d2 <dwt_ioctl+0x145a>
 801b30e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801b312:	e7e1      	b.n	801b2d8 <dwt_ioctl+0x1460>
 801b314:	2c00      	cmp	r4, #0
 801b316:	f000 8557 	beq.w	801bdc8 <dwt_ioctl+0x1f50>
 801b31a:	6823      	ldr	r3, [r4, #0]
 801b31c:	2200      	movs	r2, #0
 801b31e:	2130      	movs	r1, #48	; 0x30
 801b320:	f7fd f940 	bl	80185a4 <dwt_write32bitoffsetreg>
 801b324:	2500      	movs	r5, #0
 801b326:	f7fe be51 	b.w	8019fcc <dwt_ioctl+0x154>
 801b32a:	2c00      	cmp	r4, #0
 801b32c:	f000 854f 	beq.w	801bdce <dwt_ioctl+0x1f56>
 801b330:	2200      	movs	r2, #0
 801b332:	4629      	mov	r1, r5
 801b334:	f7fc fcc1 	bl	8017cba <dwt_read32bitoffsetreg>
 801b338:	6020      	str	r0, [r4, #0]
 801b33a:	2500      	movs	r5, #0
 801b33c:	f7fe be46 	b.w	8019fcc <dwt_ioctl+0x154>
 801b340:	4623      	mov	r3, r4
 801b342:	2200      	movs	r2, #0
 801b344:	4629      	mov	r1, r5
 801b346:	f7fd f92d 	bl	80185a4 <dwt_write32bitoffsetreg>
 801b34a:	2500      	movs	r5, #0
 801b34c:	f7fe be3e 	b.w	8019fcc <dwt_ioctl+0x154>
 801b350:	2c00      	cmp	r4, #0
 801b352:	f000 853f 	beq.w	801bdd4 <dwt_ioctl+0x1f5c>
 801b356:	2203      	movs	r2, #3
 801b358:	4944      	ldr	r1, [pc, #272]	; (801b46c <dwt_ioctl+0x15f4>)
 801b35a:	f7fc fcd6 	bl	8017d0a <dwt_read8bitoffsetreg>
 801b35e:	f3c0 1002 	ubfx	r0, r0, #4, #3
 801b362:	7020      	strb	r0, [r4, #0]
 801b364:	2500      	movs	r5, #0
 801b366:	f7fe be31 	b.w	8019fcc <dwt_ioctl+0x154>
 801b36a:	2c00      	cmp	r4, #0
 801b36c:	f000 8535 	beq.w	801bdda <dwt_ioctl+0x1f62>
 801b370:	6823      	ldr	r3, [r4, #0]
 801b372:	2200      	movs	r2, #0
 801b374:	2144      	movs	r1, #68	; 0x44
 801b376:	f7fd f915 	bl	80185a4 <dwt_write32bitoffsetreg>
 801b37a:	2500      	movs	r5, #0
 801b37c:	f7fe be26 	b.w	8019fcc <dwt_ioctl+0x154>
 801b380:	2c00      	cmp	r4, #0
 801b382:	f000 852d 	beq.w	801bde0 <dwt_ioctl+0x1f68>
 801b386:	8823      	ldrh	r3, [r4, #0]
 801b388:	2200      	movs	r2, #0
 801b38a:	2148      	movs	r1, #72	; 0x48
 801b38c:	f7fd f8ad 	bl	80184ea <dwt_write16bitoffsetreg>
 801b390:	2500      	movs	r5, #0
 801b392:	f7fe be1b 	b.w	8019fcc <dwt_ioctl+0x154>
 801b396:	2c00      	cmp	r4, #0
 801b398:	f000 8525 	beq.w	801bde6 <dwt_ioctl+0x1f6e>
 801b39c:	2200      	movs	r2, #0
 801b39e:	2144      	movs	r1, #68	; 0x44
 801b3a0:	f7fc fc8b 	bl	8017cba <dwt_read32bitoffsetreg>
 801b3a4:	6020      	str	r0, [r4, #0]
 801b3a6:	2500      	movs	r5, #0
 801b3a8:	f7fe be10 	b.w	8019fcc <dwt_ioctl+0x154>
 801b3ac:	2c00      	cmp	r4, #0
 801b3ae:	f000 851d 	beq.w	801bdec <dwt_ioctl+0x1f74>
 801b3b2:	2200      	movs	r2, #0
 801b3b4:	2148      	movs	r1, #72	; 0x48
 801b3b6:	f7fc fc96 	bl	8017ce6 <dwt_read16bitoffsetreg>
 801b3ba:	6020      	str	r0, [r4, #0]
 801b3bc:	2500      	movs	r5, #0
 801b3be:	f7fe be05 	b.w	8019fcc <dwt_ioctl+0x154>
 801b3c2:	2c00      	cmp	r4, #0
 801b3c4:	f000 8515 	beq.w	801bdf2 <dwt_ioctl+0x1f7a>
 801b3c8:	7823      	ldrb	r3, [r4, #0]
 801b3ca:	2200      	movs	r2, #0
 801b3cc:	4928      	ldr	r1, [pc, #160]	; (801b470 <dwt_ioctl+0x15f8>)
 801b3ce:	f7fd fa77 	bl	80188c0 <dwt_write8bitoffsetreg>
 801b3d2:	2500      	movs	r5, #0
 801b3d4:	f7fe bdfa 	b.w	8019fcc <dwt_ioctl+0x154>
 801b3d8:	2c00      	cmp	r4, #0
 801b3da:	f000 850d 	beq.w	801bdf8 <dwt_ioctl+0x1f80>
 801b3de:	2200      	movs	r2, #0
 801b3e0:	2144      	movs	r1, #68	; 0x44
 801b3e2:	f7fc fc92 	bl	8017d0a <dwt_read8bitoffsetreg>
 801b3e6:	7020      	strb	r0, [r4, #0]
 801b3e8:	2500      	movs	r5, #0
 801b3ea:	f7fe bdef 	b.w	8019fcc <dwt_ioctl+0x154>
 801b3ee:	2c00      	cmp	r4, #0
 801b3f0:	f000 8505 	beq.w	801bdfe <dwt_ioctl+0x1f86>
 801b3f4:	f7fd fa70 	bl	80188d8 <ull_getframelength>
 801b3f8:	6020      	str	r0, [r4, #0]
 801b3fa:	2500      	movs	r5, #0
 801b3fc:	f7fe bde6 	b.w	8019fcc <dwt_ioctl+0x154>
 801b400:	2c00      	cmp	r4, #0
 801b402:	f000 84ff 	beq.w	801be04 <dwt_ioctl+0x1f8c>
 801b406:	2200      	movs	r2, #0
 801b408:	491a      	ldr	r1, [pc, #104]	; (801b474 <dwt_ioctl+0x15fc>)
 801b40a:	f7fc fc6c 	bl	8017ce6 <dwt_read16bitoffsetreg>
 801b40e:	8020      	strh	r0, [r4, #0]
 801b410:	2500      	movs	r5, #0
 801b412:	f7fe bddb 	b.w	8019fcc <dwt_ioctl+0x154>
 801b416:	2c00      	cmp	r4, #0
 801b418:	f000 84f7 	beq.w	801be0a <dwt_ioctl+0x1f92>
 801b41c:	2200      	movs	r2, #0
 801b41e:	4916      	ldr	r1, [pc, #88]	; (801b478 <dwt_ioctl+0x1600>)
 801b420:	f7fc fc4b 	bl	8017cba <dwt_read32bitoffsetreg>
 801b424:	6020      	str	r0, [r4, #0]
 801b426:	2500      	movs	r5, #0
 801b428:	f7fe bdd0 	b.w	8019fcc <dwt_ioctl+0x154>
 801b42c:	2c00      	cmp	r4, #0
 801b42e:	f000 84ef 	beq.w	801be10 <dwt_ioctl+0x1f98>
 801b432:	8823      	ldrh	r3, [r4, #0]
 801b434:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801b438:	9300      	str	r3, [sp, #0]
 801b43a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 801b43e:	2200      	movs	r2, #0
 801b440:	490d      	ldr	r1, [pc, #52]	; (801b478 <dwt_ioctl+0x1600>)
 801b442:	f7fe f88f 	bl	8019564 <dwt_modify16bitoffsetreg>
 801b446:	2500      	movs	r5, #0
 801b448:	f7fe bdc0 	b.w	8019fcc <dwt_ioctl+0x154>
 801b44c:	000c0008 	.word	0x000c0008
 801b450:	0007001c 	.word	0x0007001c
 801b454:	00080010 	.word	0x00080010
 801b458:	00080014 	.word	0x00080014
 801b45c:	00070014 	.word	0x00070014
 801b460:	00050008 	.word	0x00050008
 801b464:	001f000c 	.word	0x001f000c
 801b468:	001f0010 	.word	0x001f0010
 801b46c:	00030060 	.word	0x00030060
 801b470:	00010018 	.word	0x00010018
 801b474:	0005002c 	.word	0x0005002c
 801b478:	000e001c 	.word	0x000e001c
 801b47c:	2c00      	cmp	r4, #0
 801b47e:	f000 84ca 	beq.w	801be16 <dwt_ioctl+0x1f9e>
 801b482:	88a7      	ldrh	r7, [r4, #4]
 801b484:	f8d4 b008 	ldr.w	fp, [r4, #8]
 801b488:	7b23      	ldrb	r3, [r4, #12]
 801b48a:	9306      	str	r3, [sp, #24]
 801b48c:	6922      	ldr	r2, [r4, #16]
 801b48e:	9204      	str	r2, [sp, #16]
 801b490:	6962      	ldr	r2, [r4, #20]
 801b492:	9205      	str	r2, [sp, #20]
 801b494:	f00b 0203 	and.w	r2, fp, #3
 801b498:	f3cb 0085 	ubfx	r0, fp, #2, #6
 801b49c:	2b05      	cmp	r3, #5
 801b49e:	d145      	bne.n	801b52c <dwt_ioctl+0x16b4>
 801b4a0:	f5b7 7fb1 	cmp.w	r7, #354	; 0x162
 801b4a4:	bf28      	it	cs
 801b4a6:	f44f 77b1 	movcs.w	r7, #354	; 0x162
 801b4aa:	f8df 9338 	ldr.w	r9, [pc, #824]	; 801b7e4 <dwt_ioctl+0x196c>
 801b4ae:	2f04      	cmp	r7, #4
 801b4b0:	d805      	bhi.n	801b4be <dwt_ioctl+0x1646>
 801b4b2:	eb09 0300 	add.w	r3, r9, r0
 801b4b6:	785b      	ldrb	r3, [r3, #1]
 801b4b8:	3b05      	subs	r3, #5
 801b4ba:	429f      	cmp	r7, r3
 801b4bc:	db3e      	blt.n	801b53c <dwt_ioctl+0x16c4>
 801b4be:	2a01      	cmp	r2, #1
 801b4c0:	d87c      	bhi.n	801b5bc <dwt_ioctl+0x1744>
 801b4c2:	4bc4      	ldr	r3, [pc, #784]	; (801b7d4 <dwt_ioctl+0x195c>)
 801b4c4:	5c99      	ldrb	r1, [r3, r2]
 801b4c6:	463e      	mov	r6, r7
 801b4c8:	42b9      	cmp	r1, r7
 801b4ca:	da79      	bge.n	801b5c0 <dwt_ioctl+0x1748>
 801b4cc:	1c55      	adds	r5, r2, #1
 801b4ce:	fa53 f585 	uxtab	r5, r3, r5
 801b4d2:	2300      	movs	r3, #0
 801b4d4:	440b      	add	r3, r1
 801b4d6:	b29b      	uxth	r3, r3
 801b4d8:	3201      	adds	r2, #1
 801b4da:	b2d2      	uxtb	r2, r2
 801b4dc:	2a02      	cmp	r2, #2
 801b4de:	d005      	beq.n	801b4ec <dwt_ioctl+0x1674>
 801b4e0:	f815 1b01 	ldrb.w	r1, [r5], #1
 801b4e4:	eba6 0c03 	sub.w	ip, r6, r3
 801b4e8:	4561      	cmp	r1, ip
 801b4ea:	dbf3      	blt.n	801b4d4 <dwt_ioctl+0x165c>
 801b4ec:	429f      	cmp	r7, r3
 801b4ee:	bf08      	it	eq
 801b4f0:	9003      	streq	r0, [sp, #12]
 801b4f2:	d069      	beq.n	801b5c8 <dwt_ioctl+0x1750>
 801b4f4:	f107 0805 	add.w	r8, r7, #5
 801b4f8:	fa1f f888 	uxth.w	r8, r8
 801b4fc:	2580      	movs	r5, #128	; 0x80
 801b4fe:	2100      	movs	r1, #0
 801b500:	9107      	str	r1, [sp, #28]
 801b502:	9103      	str	r1, [sp, #12]
 801b504:	9108      	str	r1, [sp, #32]
 801b506:	460e      	mov	r6, r1
 801b508:	2105      	movs	r1, #5
 801b50a:	46be      	mov	lr, r7
 801b50c:	428f      	cmp	r7, r1
 801b50e:	bf38      	it	cc
 801b510:	468e      	movcc	lr, r1
 801b512:	f1ae 0e05 	sub.w	lr, lr, #5
 801b516:	fa1f fe8e 	uxth.w	lr, lr
 801b51a:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 801b7d4 <dwt_ioctl+0x195c>
 801b51e:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801b522:	468b      	mov	fp, r1
 801b524:	46bc      	mov	ip, r7
 801b526:	4637      	mov	r7, r6
 801b528:	f000 bcec 	b.w	801bf04 <dwt_ioctl+0x208c>
 801b52c:	f240 1331 	movw	r3, #305	; 0x131
 801b530:	429f      	cmp	r7, r3
 801b532:	bf28      	it	cs
 801b534:	461f      	movcs	r7, r3
 801b536:	f8df 92b0 	ldr.w	r9, [pc, #688]	; 801b7e8 <dwt_ioctl+0x1970>
 801b53a:	e7b8      	b.n	801b4ae <dwt_ioctl+0x1636>
 801b53c:	2300      	movs	r3, #0
 801b53e:	9a05      	ldr	r2, [sp, #20]
 801b540:	8013      	strh	r3, [r2, #0]
 801b542:	9a04      	ldr	r2, [sp, #16]
 801b544:	f8c2 b000 	str.w	fp, [r2]
 801b548:	e04d      	b.n	801b5e6 <dwt_ioctl+0x176e>
 801b54a:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801b54e:	2300      	movs	r3, #0
 801b550:	9a05      	ldr	r2, [sp, #20]
 801b552:	8013      	strh	r3, [r2, #0]
 801b554:	9b04      	ldr	r3, [sp, #16]
 801b556:	f8c3 b000 	str.w	fp, [r3]
 801b55a:	f04f 33ff 	mov.w	r3, #4294967295
 801b55e:	e042      	b.n	801b5e6 <dwt_ioctl+0x176e>
 801b560:	fa1f fb81 	uxth.w	fp, r1
 801b564:	9207      	str	r2, [sp, #28]
 801b566:	9003      	str	r0, [sp, #12]
 801b568:	9308      	str	r3, [sp, #32]
 801b56a:	2701      	movs	r7, #1
 801b56c:	f000 bcdb 	b.w	801bf26 <dwt_ioctl+0x20ae>
 801b570:	2f00      	cmp	r7, #0
 801b572:	f040 849b 	bne.w	801beac <dwt_ioctl+0x2034>
 801b576:	4598      	cmp	r8, r3
 801b578:	f200 84b0 	bhi.w	801bedc <dwt_ioctl+0x2064>
 801b57c:	2e00      	cmp	r6, #0
 801b57e:	d039      	beq.n	801b5f4 <dwt_ioctl+0x177c>
 801b580:	283f      	cmp	r0, #63	; 0x3f
 801b582:	f000 84d5 	beq.w	801bf30 <dwt_ioctl+0x20b8>
 801b586:	2700      	movs	r7, #0
 801b588:	f819 1000 	ldrb.w	r1, [r9, r0]
 801b58c:	1a5b      	subs	r3, r3, r1
 801b58e:	b29b      	uxth	r3, r3
 801b590:	1e46      	subs	r6, r0, #1
 801b592:	f006 003f 	and.w	r0, r6, #63	; 0x3f
 801b596:	f016 063f 	ands.w	r6, r6, #63	; 0x3f
 801b59a:	bf18      	it	ne
 801b59c:	2601      	movne	r6, #1
 801b59e:	f000 bca9 	b.w	801bef4 <dwt_ioctl+0x207c>
 801b5a2:	9906      	ldr	r1, [sp, #24]
 801b5a4:	2909      	cmp	r1, #9
 801b5a6:	f040 84c9 	bne.w	801bf3c <dwt_ioctl+0x20c4>
 801b5aa:	213f      	movs	r1, #63	; 0x3f
 801b5ac:	9103      	str	r1, [sp, #12]
 801b5ae:	e00b      	b.n	801b5c8 <dwt_ioctl+0x1750>
 801b5b0:	b2b3      	uxth	r3, r6
 801b5b2:	3201      	adds	r2, #1
 801b5b4:	b2d2      	uxtb	r2, r2
 801b5b6:	213f      	movs	r1, #63	; 0x3f
 801b5b8:	9103      	str	r1, [sp, #12]
 801b5ba:	e005      	b.n	801b5c8 <dwt_ioctl+0x1750>
 801b5bc:	2300      	movs	r3, #0
 801b5be:	e795      	b.n	801b4ec <dwt_ioctl+0x1674>
 801b5c0:	2300      	movs	r3, #0
 801b5c2:	e793      	b.n	801b4ec <dwt_ioctl+0x1674>
 801b5c4:	9003      	str	r0, [sp, #12]
 801b5c6:	4663      	mov	r3, ip
 801b5c8:	9905      	ldr	r1, [sp, #20]
 801b5ca:	800b      	strh	r3, [r1, #0]
 801b5cc:	9b03      	ldr	r3, [sp, #12]
 801b5ce:	ea42 0283 	orr.w	r2, r2, r3, lsl #2
 801b5d2:	b2d2      	uxtb	r2, r2
 801b5d4:	0413      	lsls	r3, r2, #16
 801b5d6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801b5da:	4313      	orrs	r3, r2
 801b5dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801b5e0:	9a04      	ldr	r2, [sp, #16]
 801b5e2:	6013      	str	r3, [r2, #0]
 801b5e4:	2300      	movs	r3, #0
 801b5e6:	6023      	str	r3, [r4, #0]
 801b5e8:	2500      	movs	r5, #0
 801b5ea:	f7fe bcef 	b.w	8019fcc <dwt_ioctl+0x154>
 801b5ee:	9a07      	ldr	r2, [sp, #28]
 801b5f0:	9b08      	ldr	r3, [sp, #32]
 801b5f2:	e7e9      	b.n	801b5c8 <dwt_ioctl+0x1750>
 801b5f4:	9003      	str	r0, [sp, #12]
 801b5f6:	e7e7      	b.n	801b5c8 <dwt_ioctl+0x1750>
 801b5f8:	9a07      	ldr	r2, [sp, #28]
 801b5fa:	9b08      	ldr	r3, [sp, #32]
 801b5fc:	e7e4      	b.n	801b5c8 <dwt_ioctl+0x1750>
 801b5fe:	213f      	movs	r1, #63	; 0x3f
 801b600:	9103      	str	r1, [sp, #12]
 801b602:	e7e1      	b.n	801b5c8 <dwt_ioctl+0x1750>
 801b604:	2c00      	cmp	r4, #0
 801b606:	f000 8409 	beq.w	801be1c <dwt_ioctl+0x1fa4>
 801b60a:	7827      	ldrb	r7, [r4, #0]
 801b60c:	7864      	ldrb	r4, [r4, #1]
 801b60e:	f7e5 fa93 	bl	8000b38 <decamutexon>
 801b612:	4605      	mov	r5, r0
 801b614:	2c02      	cmp	r4, #2
 801b616:	d00e      	beq.n	801b636 <dwt_ioctl+0x17be>
 801b618:	2c04      	cmp	r4, #4
 801b61a:	d00c      	beq.n	801b636 <dwt_ioctl+0x17be>
 801b61c:	f004 04fd 	and.w	r4, r4, #253	; 0xfd
 801b620:	2c01      	cmp	r4, #1
 801b622:	d01a      	beq.n	801b65a <dwt_ioctl+0x17e2>
 801b624:	43fb      	mvns	r3, r7
 801b626:	2200      	movs	r2, #0
 801b628:	9200      	str	r2, [sp, #0]
 801b62a:	b2db      	uxtb	r3, r3
 801b62c:	496a      	ldr	r1, [pc, #424]	; (801b7d8 <dwt_ioctl+0x1960>)
 801b62e:	4630      	mov	r0, r6
 801b630:	f7fd fd7c 	bl	801912c <dwt_modify8bitoffsetreg>
 801b634:	e005      	b.n	801b642 <dwt_ioctl+0x17ca>
 801b636:	463b      	mov	r3, r7
 801b638:	2200      	movs	r2, #0
 801b63a:	4967      	ldr	r1, [pc, #412]	; (801b7d8 <dwt_ioctl+0x1960>)
 801b63c:	4630      	mov	r0, r6
 801b63e:	f7fd f93f 	bl	80188c0 <dwt_write8bitoffsetreg>
 801b642:	463b      	mov	r3, r7
 801b644:	2200      	movs	r2, #0
 801b646:	4965      	ldr	r1, [pc, #404]	; (801b7dc <dwt_ioctl+0x1964>)
 801b648:	4630      	mov	r0, r6
 801b64a:	f7fc ffab 	bl	80185a4 <dwt_write32bitoffsetreg>
 801b64e:	4628      	mov	r0, r5
 801b650:	f7e5 fa83 	bl	8000b5a <decamutexoff>
 801b654:	2500      	movs	r5, #0
 801b656:	f7fe bcb9 	b.w	8019fcc <dwt_ioctl+0x154>
 801b65a:	9700      	str	r7, [sp, #0]
 801b65c:	23ff      	movs	r3, #255	; 0xff
 801b65e:	2200      	movs	r2, #0
 801b660:	495d      	ldr	r1, [pc, #372]	; (801b7d8 <dwt_ioctl+0x1960>)
 801b662:	4630      	mov	r0, r6
 801b664:	f7fd fd62 	bl	801912c <dwt_modify8bitoffsetreg>
 801b668:	e7eb      	b.n	801b642 <dwt_ioctl+0x17ca>
 801b66a:	2302      	movs	r3, #2
 801b66c:	9301      	str	r3, [sp, #4]
 801b66e:	2500      	movs	r5, #0
 801b670:	9500      	str	r5, [sp, #0]
 801b672:	462b      	mov	r3, r5
 801b674:	462a      	mov	r2, r5
 801b676:	211a      	movs	r1, #26
 801b678:	f7fc fa97 	bl	8017baa <dwt_xfer3xxx>
 801b67c:	f7fe bca6 	b.w	8019fcc <dwt_ioctl+0x154>
 801b680:	f7fe fbe6 	bl	8019e50 <ull_softreset_fcmd>
 801b684:	2500      	movs	r5, #0
 801b686:	f7fe bca1 	b.w	8019fcc <dwt_ioctl+0x154>
 801b68a:	f7fe fbcd 	bl	8019e28 <ull_softreset_no_sema_fcmd>
 801b68e:	2500      	movs	r5, #0
 801b690:	f7fe bc9c 	b.w	8019fcc <dwt_ioctl+0x154>
 801b694:	2302      	movs	r3, #2
 801b696:	9301      	str	r3, [sp, #4]
 801b698:	2500      	movs	r5, #0
 801b69a:	9500      	str	r5, [sp, #0]
 801b69c:	462b      	mov	r3, r5
 801b69e:	462a      	mov	r2, r5
 801b6a0:	2114      	movs	r1, #20
 801b6a2:	f7fc fa82 	bl	8017baa <dwt_xfer3xxx>
 801b6a6:	f7fe bc91 	b.w	8019fcc <dwt_ioctl+0x154>
 801b6aa:	2402      	movs	r4, #2
 801b6ac:	9401      	str	r4, [sp, #4]
 801b6ae:	2500      	movs	r5, #0
 801b6b0:	9500      	str	r5, [sp, #0]
 801b6b2:	462b      	mov	r3, r5
 801b6b4:	462a      	mov	r2, r5
 801b6b6:	2115      	movs	r1, #21
 801b6b8:	f7fc fa77 	bl	8017baa <dwt_xfer3xxx>
 801b6bc:	9401      	str	r4, [sp, #4]
 801b6be:	9500      	str	r5, [sp, #0]
 801b6c0:	462b      	mov	r3, r5
 801b6c2:	462a      	mov	r2, r5
 801b6c4:	2115      	movs	r1, #21
 801b6c6:	4630      	mov	r0, r6
 801b6c8:	f7fc fa6f 	bl	8017baa <dwt_xfer3xxx>
 801b6cc:	f7fe bc7e 	b.w	8019fcc <dwt_ioctl+0x154>
 801b6d0:	2302      	movs	r3, #2
 801b6d2:	9301      	str	r3, [sp, #4]
 801b6d4:	2500      	movs	r5, #0
 801b6d6:	9500      	str	r5, [sp, #0]
 801b6d8:	462b      	mov	r3, r5
 801b6da:	462a      	mov	r2, r5
 801b6dc:	2116      	movs	r1, #22
 801b6de:	f7fc fa64 	bl	8017baa <dwt_xfer3xxx>
 801b6e2:	f7fe bc73 	b.w	8019fcc <dwt_ioctl+0x154>
 801b6e6:	2c00      	cmp	r4, #0
 801b6e8:	f000 839b 	beq.w	801be22 <dwt_ioctl+0x1faa>
 801b6ec:	b93a      	cbnz	r2, 801b6fe <dwt_ioctl+0x1886>
 801b6ee:	2200      	movs	r2, #0
 801b6f0:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 801b6f4:	f7fc fb09 	bl	8017d0a <dwt_read8bitoffsetreg>
 801b6f8:	7020      	strb	r0, [r4, #0]
 801b6fa:	f7fe bc67 	b.w	8019fcc <dwt_ioctl+0x154>
 801b6fe:	2201      	movs	r2, #1
 801b700:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 801b704:	f7fc fb01 	bl	8017d0a <dwt_read8bitoffsetreg>
 801b708:	7020      	strb	r0, [r4, #0]
 801b70a:	2500      	movs	r5, #0
 801b70c:	f7fe bc5e 	b.w	8019fcc <dwt_ioctl+0x154>
 801b710:	2c00      	cmp	r4, #0
 801b712:	f000 8389 	beq.w	801be28 <dwt_ioctl+0x1fb0>
 801b716:	7824      	ldrb	r4, [r4, #0]
 801b718:	2200      	movs	r2, #0
 801b71a:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 801b71e:	f7fc faf4 	bl	8017d0a <dwt_read8bitoffsetreg>
 801b722:	f000 039f 	and.w	r3, r0, #159	; 0x9f
 801b726:	4323      	orrs	r3, r4
 801b728:	2200      	movs	r2, #0
 801b72a:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 801b72e:	4630      	mov	r0, r6
 801b730:	f7fd f8c6 	bl	80188c0 <dwt_write8bitoffsetreg>
 801b734:	2500      	movs	r5, #0
 801b736:	f7fe bc49 	b.w	8019fcc <dwt_ioctl+0x154>
 801b73a:	2c00      	cmp	r4, #0
 801b73c:	f000 8377 	beq.w	801be2e <dwt_ioctl+0x1fb6>
 801b740:	7824      	ldrb	r4, [r4, #0]
 801b742:	f012 05ff 	ands.w	r5, r2, #255	; 0xff
 801b746:	d01e      	beq.n	801b786 <dwt_ioctl+0x190e>
 801b748:	2d01      	cmp	r5, #1
 801b74a:	f040 8373 	bne.w	801be34 <dwt_ioctl+0x1fbc>
 801b74e:	2502      	movs	r5, #2
 801b750:	2201      	movs	r2, #1
 801b752:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 801b756:	4630      	mov	r0, r6
 801b758:	f7fc fad7 	bl	8017d0a <dwt_read8bitoffsetreg>
 801b75c:	b9ac      	cbnz	r4, 801b78a <dwt_ioctl+0x1912>
 801b75e:	ea20 0305 	bic.w	r3, r0, r5
 801b762:	b2db      	uxtb	r3, r3
 801b764:	2201      	movs	r2, #1
 801b766:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 801b76a:	4630      	mov	r0, r6
 801b76c:	f7fd f8a8 	bl	80188c0 <dwt_write8bitoffsetreg>
 801b770:	2200      	movs	r2, #0
 801b772:	2110      	movs	r1, #16
 801b774:	4630      	mov	r0, r6
 801b776:	f7fc faa0 	bl	8017cba <dwt_read32bitoffsetreg>
 801b77a:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 801b77e:	d00b      	beq.n	801b798 <dwt_ioctl+0x1920>
 801b780:	2500      	movs	r5, #0
 801b782:	f7fe bc23 	b.w	8019fcc <dwt_ioctl+0x154>
 801b786:	2504      	movs	r5, #4
 801b788:	e7e2      	b.n	801b750 <dwt_ioctl+0x18d8>
 801b78a:	2c01      	cmp	r4, #1
 801b78c:	f040 8356 	bne.w	801be3c <dwt_ioctl+0x1fc4>
 801b790:	ea40 0305 	orr.w	r3, r0, r5
 801b794:	b2db      	uxtb	r3, r3
 801b796:	e7e5      	b.n	801b764 <dwt_ioctl+0x18ec>
 801b798:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801b79c:	9300      	str	r3, [sp, #0]
 801b79e:	f04f 33ff 	mov.w	r3, #4294967295
 801b7a2:	2200      	movs	r2, #0
 801b7a4:	2110      	movs	r1, #16
 801b7a6:	4630      	mov	r0, r6
 801b7a8:	f7fd fb4e 	bl	8018e48 <dwt_modify32bitoffsetreg>
 801b7ac:	2500      	movs	r5, #0
 801b7ae:	f7fe bc0d 	b.w	8019fcc <dwt_ioctl+0x154>
 801b7b2:	2c00      	cmp	r4, #0
 801b7b4:	f000 8346 	beq.w	801be44 <dwt_ioctl+0x1fcc>
 801b7b8:	7823      	ldrb	r3, [r4, #0]
 801b7ba:	035b      	lsls	r3, r3, #13
 801b7bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801b7c0:	9300      	str	r3, [sp, #0]
 801b7c2:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 801b7c6:	2200      	movs	r2, #0
 801b7c8:	4905      	ldr	r1, [pc, #20]	; (801b7e0 <dwt_ioctl+0x1968>)
 801b7ca:	f7fd fecb 	bl	8019564 <dwt_modify16bitoffsetreg>
 801b7ce:	2500      	movs	r5, #0
 801b7d0:	f7fe bbfc 	b.w	8019fcc <dwt_ioctl+0x154>
 801b7d4:	08021350 	.word	0x08021350
 801b7d8:	0001001c 	.word	0x0001001c
 801b7dc:	00010018 	.word	0x00010018
 801b7e0:	000e000c 	.word	0x000e000c
 801b7e4:	080212d0 	.word	0x080212d0
 801b7e8:	08021310 	.word	0x08021310
 801b7ec:	2c00      	cmp	r4, #0
 801b7ee:	f000 832c 	beq.w	801be4a <dwt_ioctl+0x1fd2>
 801b7f2:	7825      	ldrb	r5, [r4, #0]
 801b7f4:	6862      	ldr	r2, [r4, #4]
 801b7f6:	2a01      	cmp	r2, #1
 801b7f8:	bf15      	itete	ne
 801b7fa:	f46f 3360 	mvnne.w	r3, #229376	; 0x38000
 801b7fe:	f46f 43e0 	mvneq.w	r3, #28672	; 0x7000
 801b802:	27df      	movne	r7, #223	; 0xdf
 801b804:	27ef      	moveq	r7, #239	; 0xef
 801b806:	bf14      	ite	ne
 801b808:	f04f 0820 	movne.w	r8, #32
 801b80c:	f04f 0810 	moveq.w	r8, #16
 801b810:	2400      	movs	r4, #0
 801b812:	9400      	str	r4, [sp, #0]
 801b814:	4622      	mov	r2, r4
 801b816:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801b81a:	f7fd fb15 	bl	8018e48 <dwt_modify32bitoffsetreg>
 801b81e:	9400      	str	r4, [sp, #0]
 801b820:	463b      	mov	r3, r7
 801b822:	4622      	mov	r2, r4
 801b824:	49be      	ldr	r1, [pc, #760]	; (801bb20 <dwt_ioctl+0x1ca8>)
 801b826:	4630      	mov	r0, r6
 801b828:	f7fd fc80 	bl	801912c <dwt_modify8bitoffsetreg>
 801b82c:	2d01      	cmp	r5, #1
 801b82e:	d003      	beq.n	801b838 <dwt_ioctl+0x19c0>
 801b830:	b165      	cbz	r5, 801b84c <dwt_ioctl+0x19d4>
 801b832:	2500      	movs	r5, #0
 801b834:	f7fe bbca 	b.w	8019fcc <dwt_ioctl+0x154>
 801b838:	4625      	mov	r5, r4
 801b83a:	9400      	str	r4, [sp, #0]
 801b83c:	463b      	mov	r3, r7
 801b83e:	4622      	mov	r2, r4
 801b840:	49b8      	ldr	r1, [pc, #736]	; (801bb24 <dwt_ioctl+0x1cac>)
 801b842:	4630      	mov	r0, r6
 801b844:	f7fd fc72 	bl	801912c <dwt_modify8bitoffsetreg>
 801b848:	f7fe bbc0 	b.w	8019fcc <dwt_ioctl+0x154>
 801b84c:	f8cd 8000 	str.w	r8, [sp]
 801b850:	23ff      	movs	r3, #255	; 0xff
 801b852:	2200      	movs	r2, #0
 801b854:	49b3      	ldr	r1, [pc, #716]	; (801bb24 <dwt_ioctl+0x1cac>)
 801b856:	4630      	mov	r0, r6
 801b858:	f7fd fc68 	bl	801912c <dwt_modify8bitoffsetreg>
 801b85c:	f7fe bbb6 	b.w	8019fcc <dwt_ioctl+0x154>
 801b860:	2c00      	cmp	r4, #0
 801b862:	f000 82f5 	beq.w	801be50 <dwt_ioctl+0x1fd8>
 801b866:	7822      	ldrb	r2, [r4, #0]
 801b868:	f012 0f01 	tst.w	r2, #1
 801b86c:	d02d      	beq.n	801b8ca <dwt_ioctl+0x1a52>
 801b86e:	0157      	lsls	r7, r2, #5
 801b870:	f007 0740 	and.w	r7, r7, #64	; 0x40
 801b874:	2440      	movs	r4, #64	; 0x40
 801b876:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 801b87a:	f012 0f04 	tst.w	r2, #4
 801b87e:	d028      	beq.n	801b8d2 <dwt_ioctl+0x1a5a>
 801b880:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
 801b884:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 801b888:	0112      	lsls	r2, r2, #4
 801b88a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 801b88e:	4317      	orrs	r7, r2
 801b890:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801b894:	9200      	str	r2, [sp, #0]
 801b896:	43db      	mvns	r3, r3
 801b898:	2200      	movs	r2, #0
 801b89a:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801b89e:	4630      	mov	r0, r6
 801b8a0:	f7fd fad2 	bl	8018e48 <dwt_modify32bitoffsetreg>
 801b8a4:	43e4      	mvns	r4, r4
 801b8a6:	b2a4      	uxth	r4, r4
 801b8a8:	2500      	movs	r5, #0
 801b8aa:	9500      	str	r5, [sp, #0]
 801b8ac:	4623      	mov	r3, r4
 801b8ae:	462a      	mov	r2, r5
 801b8b0:	499b      	ldr	r1, [pc, #620]	; (801bb20 <dwt_ioctl+0x1ca8>)
 801b8b2:	4630      	mov	r0, r6
 801b8b4:	f7fd fe56 	bl	8019564 <dwt_modify16bitoffsetreg>
 801b8b8:	9700      	str	r7, [sp, #0]
 801b8ba:	4623      	mov	r3, r4
 801b8bc:	462a      	mov	r2, r5
 801b8be:	4999      	ldr	r1, [pc, #612]	; (801bb24 <dwt_ioctl+0x1cac>)
 801b8c0:	4630      	mov	r0, r6
 801b8c2:	f7fd fe4f 	bl	8019564 <dwt_modify16bitoffsetreg>
 801b8c6:	f7fe bb81 	b.w	8019fcc <dwt_ioctl+0x154>
 801b8ca:	2700      	movs	r7, #0
 801b8cc:	463c      	mov	r4, r7
 801b8ce:	463b      	mov	r3, r7
 801b8d0:	e7d3      	b.n	801b87a <dwt_ioctl+0x1a02>
 801b8d2:	2200      	movs	r2, #0
 801b8d4:	e7de      	b.n	801b894 <dwt_ioctl+0x1a1c>
 801b8d6:	2308      	movs	r3, #8
 801b8d8:	9300      	str	r3, [sp, #0]
 801b8da:	23ff      	movs	r3, #255	; 0xff
 801b8dc:	2201      	movs	r2, #1
 801b8de:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 801b8e2:	f7fd fc23 	bl	801912c <dwt_modify8bitoffsetreg>
 801b8e6:	4c90      	ldr	r4, [pc, #576]	; (801bb28 <dwt_ioctl+0x1cb0>)
 801b8e8:	2302      	movs	r3, #2
 801b8ea:	9300      	str	r3, [sp, #0]
 801b8ec:	23ff      	movs	r3, #255	; 0xff
 801b8ee:	2203      	movs	r2, #3
 801b8f0:	4621      	mov	r1, r4
 801b8f2:	4630      	mov	r0, r6
 801b8f4:	f7fd fc1a 	bl	801912c <dwt_modify8bitoffsetreg>
 801b8f8:	2500      	movs	r5, #0
 801b8fa:	9500      	str	r5, [sp, #0]
 801b8fc:	23f7      	movs	r3, #247	; 0xf7
 801b8fe:	2201      	movs	r2, #1
 801b900:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 801b904:	4630      	mov	r0, r6
 801b906:	f7fd fc11 	bl	801912c <dwt_modify8bitoffsetreg>
 801b90a:	9500      	str	r5, [sp, #0]
 801b90c:	23fd      	movs	r3, #253	; 0xfd
 801b90e:	2203      	movs	r2, #3
 801b910:	4621      	mov	r1, r4
 801b912:	4630      	mov	r0, r6
 801b914:	f7fd fc0a 	bl	801912c <dwt_modify8bitoffsetreg>
 801b918:	f7fe bb58 	b.w	8019fcc <dwt_ioctl+0x154>
 801b91c:	2c00      	cmp	r4, #0
 801b91e:	f000 829a 	beq.w	801be56 <dwt_ioctl+0x1fde>
 801b922:	8863      	ldrh	r3, [r4, #2]
 801b924:	00db      	lsls	r3, r3, #3
 801b926:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 801b92a:	7822      	ldrb	r2, [r4, #0]
 801b92c:	b10a      	cbz	r2, 801b932 <dwt_ioctl+0x1aba>
 801b92e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801b932:	9300      	str	r3, [sp, #0]
 801b934:	f24f 0307 	movw	r3, #61447	; 0xf007
 801b938:	2200      	movs	r2, #0
 801b93a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 801b93e:	4630      	mov	r0, r6
 801b940:	f7fd fe10 	bl	8019564 <dwt_modify16bitoffsetreg>
 801b944:	2500      	movs	r5, #0
 801b946:	f7fe bb41 	b.w	8019fcc <dwt_ioctl+0x154>
 801b94a:	2c00      	cmp	r4, #0
 801b94c:	f000 8286 	beq.w	801be5c <dwt_ioctl+0x1fe4>
 801b950:	b2e3      	uxtb	r3, r4
 801b952:	1c9a      	adds	r2, r3, #2
 801b954:	2301      	movs	r3, #1
 801b956:	4093      	lsls	r3, r2
 801b958:	3b01      	subs	r3, #1
 801b95a:	b2db      	uxtb	r3, r3
 801b95c:	2200      	movs	r2, #0
 801b95e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801b962:	f7fc ffad 	bl	80188c0 <dwt_write8bitoffsetreg>
 801b966:	2500      	movs	r5, #0
 801b968:	f7fe bb30 	b.w	8019fcc <dwt_ioctl+0x154>
 801b96c:	2c00      	cmp	r4, #0
 801b96e:	f000 8278 	beq.w	801be62 <dwt_ioctl+0x1fea>
 801b972:	7ae3      	ldrb	r3, [r4, #11]
 801b974:	2b00      	cmp	r3, #0
 801b976:	f000 8277 	beq.w	801be68 <dwt_ioctl+0x1ff0>
 801b97a:	7b63      	ldrb	r3, [r4, #13]
 801b97c:	2b01      	cmp	r3, #1
 801b97e:	d921      	bls.n	801b9c4 <dwt_ioctl+0x1b4c>
 801b980:	7b22      	ldrb	r2, [r4, #12]
 801b982:	4b6a      	ldr	r3, [pc, #424]	; (801bb2c <dwt_ioctl+0x1cb4>)
 801b984:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801b988:	0112      	lsls	r2, r2, #4
 801b98a:	0ad3      	lsrs	r3, r2, #11
 801b98c:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801b990:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801b994:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 801b998:	bf28      	it	cs
 801b99a:	3301      	addcs	r3, #1
 801b99c:	b29b      	uxth	r3, r3
 801b99e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801b9a2:	9300      	str	r3, [sp, #0]
 801b9a4:	f64f 7380 	movw	r3, #65408	; 0xff80
 801b9a8:	2202      	movs	r2, #2
 801b9aa:	4961      	ldr	r1, [pc, #388]	; (801bb30 <dwt_ioctl+0x1cb8>)
 801b9ac:	4630      	mov	r0, r6
 801b9ae:	f7fd fdd9 	bl	8019564 <dwt_modify16bitoffsetreg>
 801b9b2:	2394      	movs	r3, #148	; 0x94
 801b9b4:	2200      	movs	r2, #0
 801b9b6:	495f      	ldr	r1, [pc, #380]	; (801bb34 <dwt_ioctl+0x1cbc>)
 801b9b8:	4630      	mov	r0, r6
 801b9ba:	f7fc ff81 	bl	80188c0 <dwt_write8bitoffsetreg>
 801b9be:	2500      	movs	r5, #0
 801b9c0:	f7fe bb04 	b.w	8019fcc <dwt_ioctl+0x154>
 801b9c4:	7b22      	ldrb	r2, [r4, #12]
 801b9c6:	4b59      	ldr	r3, [pc, #356]	; (801bb2c <dwt_ioctl+0x1cb4>)
 801b9c8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801b9cc:	f44f 6235 	mov.w	r2, #2896	; 0xb50
 801b9d0:	fb02 f203 	mul.w	r2, r2, r3
 801b9d4:	0c93      	lsrs	r3, r2, #18
 801b9d6:	f3c2 12ca 	ubfx	r2, r2, #7, #11
 801b9da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801b9de:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 801b9e2:	bf28      	it	cs
 801b9e4:	3301      	addcs	r3, #1
 801b9e6:	b29b      	uxth	r3, r3
 801b9e8:	e7d9      	b.n	801b99e <dwt_ioctl+0x1b26>
 801b9ea:	2c00      	cmp	r4, #0
 801b9ec:	f000 823f 	beq.w	801be6e <dwt_ioctl+0x1ff6>
 801b9f0:	2200      	movs	r2, #0
 801b9f2:	4951      	ldr	r1, [pc, #324]	; (801bb38 <dwt_ioctl+0x1cc0>)
 801b9f4:	f7fc f961 	bl	8017cba <dwt_read32bitoffsetreg>
 801b9f8:	6020      	str	r0, [r4, #0]
 801b9fa:	2500      	movs	r5, #0
 801b9fc:	f7fe bae6 	b.w	8019fcc <dwt_ioctl+0x154>
 801ba00:	2c00      	cmp	r4, #0
 801ba02:	f000 8237 	beq.w	801be74 <dwt_ioctl+0x1ffc>
 801ba06:	2200      	movs	r2, #0
 801ba08:	494c      	ldr	r1, [pc, #304]	; (801bb3c <dwt_ioctl+0x1cc4>)
 801ba0a:	f7fc f956 	bl	8017cba <dwt_read32bitoffsetreg>
 801ba0e:	6020      	str	r0, [r4, #0]
 801ba10:	2500      	movs	r5, #0
 801ba12:	f7fe badb 	b.w	8019fcc <dwt_ioctl+0x154>
 801ba16:	2c00      	cmp	r4, #0
 801ba18:	f000 822f 	beq.w	801be7a <dwt_ioctl+0x2002>
 801ba1c:	f44f 13a8 	mov.w	r3, #1376256	; 0x150000
 801ba20:	6023      	str	r3, [r4, #0]
 801ba22:	2500      	movs	r5, #0
 801ba24:	f7fe bad2 	b.w	8019fcc <dwt_ioctl+0x154>
 801ba28:	2c00      	cmp	r4, #0
 801ba2a:	f000 8229 	beq.w	801be80 <dwt_ioctl+0x2008>
 801ba2e:	2500      	movs	r5, #0
 801ba30:	950b      	str	r5, [sp, #44]	; 0x2c
 801ba32:	af10      	add	r7, sp, #64	; 0x40
 801ba34:	2319      	movs	r3, #25
 801ba36:	f847 3d10 	str.w	r3, [r7, #-16]!
 801ba3a:	9700      	str	r7, [sp, #0]
 801ba3c:	2304      	movs	r3, #4
 801ba3e:	462a      	mov	r2, r5
 801ba40:	493f      	ldr	r1, [pc, #252]	; (801bb40 <dwt_ioctl+0x1cc8>)
 801ba42:	f7fc fd47 	bl	80184d4 <dwt_writetodevice>
 801ba46:	f641 7348 	movw	r3, #8008	; 0x1f48
 801ba4a:	930c      	str	r3, [sp, #48]	; 0x30
 801ba4c:	9700      	str	r7, [sp, #0]
 801ba4e:	2304      	movs	r3, #4
 801ba50:	462a      	mov	r2, r5
 801ba52:	493c      	ldr	r1, [pc, #240]	; (801bb44 <dwt_ioctl+0x1ccc>)
 801ba54:	4630      	mov	r0, r6
 801ba56:	f7fc fd3d 	bl	80184d4 <dwt_writetodevice>
 801ba5a:	ab0b      	add	r3, sp, #44	; 0x2c
 801ba5c:	9300      	str	r3, [sp, #0]
 801ba5e:	2304      	movs	r3, #4
 801ba60:	462a      	mov	r2, r5
 801ba62:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 801ba66:	4630      	mov	r0, r6
 801ba68:	f7fc f91d 	bl	8017ca6 <dwt_readfromdevice>
 801ba6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ba6e:	6023      	str	r3, [r4, #0]
 801ba70:	f7fe baac 	b.w	8019fcc <dwt_ioctl+0x154>
 801ba74:	2c00      	cmp	r4, #0
 801ba76:	f000 8206 	beq.w	801be86 <dwt_ioctl+0x200e>
 801ba7a:	2200      	movs	r2, #0
 801ba7c:	4932      	ldr	r1, [pc, #200]	; (801bb48 <dwt_ioctl+0x1cd0>)
 801ba7e:	f7fc f91c 	bl	8017cba <dwt_read32bitoffsetreg>
 801ba82:	b280      	uxth	r0, r0
 801ba84:	6020      	str	r0, [r4, #0]
 801ba86:	2200      	movs	r2, #0
 801ba88:	4930      	ldr	r1, [pc, #192]	; (801bb4c <dwt_ioctl+0x1cd4>)
 801ba8a:	4630      	mov	r0, r6
 801ba8c:	f7fc f915 	bl	8017cba <dwt_read32bitoffsetreg>
 801ba90:	0d43      	lsrs	r3, r0, #21
 801ba92:	019b      	lsls	r3, r3, #6
 801ba94:	b29b      	uxth	r3, r3
 801ba96:	6063      	str	r3, [r4, #4]
 801ba98:	2500      	movs	r5, #0
 801ba9a:	f7fe ba97 	b.w	8019fcc <dwt_ioctl+0x154>
 801ba9e:	2c00      	cmp	r4, #0
 801baa0:	f000 81f4 	beq.w	801be8c <dwt_ioctl+0x2014>
 801baa4:	7d63      	ldrb	r3, [r4, #21]
 801baa6:	b133      	cbz	r3, 801bab6 <dwt_ioctl+0x1c3e>
 801baa8:	2b01      	cmp	r3, #1
 801baaa:	d05b      	beq.n	801bb64 <dwt_ioctl+0x1cec>
 801baac:	2b02      	cmp	r3, #2
 801baae:	f000 8082 	beq.w	801bbb6 <dwt_ioctl+0x1d3e>
 801bab2:	23ff      	movs	r3, #255	; 0xff
 801bab4:	e02f      	b.n	801bb16 <dwt_ioctl+0x1c9e>
 801bab6:	2200      	movs	r2, #0
 801bab8:	4925      	ldr	r1, [pc, #148]	; (801bb50 <dwt_ioctl+0x1cd8>)
 801baba:	f7fc f8fe 	bl	8017cba <dwt_read32bitoffsetreg>
 801babe:	f3c0 000b 	ubfx	r0, r0, #0, #12
 801bac2:	6020      	str	r0, [r4, #0]
 801bac4:	2200      	movs	r2, #0
 801bac6:	4923      	ldr	r1, [pc, #140]	; (801bb54 <dwt_ioctl+0x1cdc>)
 801bac8:	4630      	mov	r0, r6
 801baca:	f7fc f8f6 	bl	8017cba <dwt_read32bitoffsetreg>
 801bace:	f3c0 0015 	ubfx	r0, r0, #0, #22
 801bad2:	6060      	str	r0, [r4, #4]
 801bad4:	2200      	movs	r2, #0
 801bad6:	4920      	ldr	r1, [pc, #128]	; (801bb58 <dwt_ioctl+0x1ce0>)
 801bad8:	4630      	mov	r0, r6
 801bada:	f7fc f8ee 	bl	8017cba <dwt_read32bitoffsetreg>
 801bade:	f3c0 0015 	ubfx	r0, r0, #0, #22
 801bae2:	60a0      	str	r0, [r4, #8]
 801bae4:	2200      	movs	r2, #0
 801bae6:	491d      	ldr	r1, [pc, #116]	; (801bb5c <dwt_ioctl+0x1ce4>)
 801bae8:	4630      	mov	r0, r6
 801baea:	f7fc f8e6 	bl	8017cba <dwt_read32bitoffsetreg>
 801baee:	f3c0 0015 	ubfx	r0, r0, #0, #22
 801baf2:	60e0      	str	r0, [r4, #12]
 801baf4:	2200      	movs	r2, #0
 801baf6:	491a      	ldr	r1, [pc, #104]	; (801bb60 <dwt_ioctl+0x1ce8>)
 801baf8:	4630      	mov	r0, r6
 801bafa:	f7fc f8de 	bl	8017cba <dwt_read32bitoffsetreg>
 801bafe:	f3c0 0013 	ubfx	r0, r0, #0, #20
 801bb02:	6120      	str	r0, [r4, #16]
 801bb04:	2203      	movs	r2, #3
 801bb06:	490c      	ldr	r1, [pc, #48]	; (801bb38 <dwt_ioctl+0x1cc0>)
 801bb08:	4630      	mov	r0, r6
 801bb0a:	f7fc f8fe 	bl	8017d0a <dwt_read8bitoffsetreg>
 801bb0e:	f3c0 1002 	ubfx	r0, r0, #4, #3
 801bb12:	7520      	strb	r0, [r4, #20]
 801bb14:	2300      	movs	r3, #0
 801bb16:	75a3      	strb	r3, [r4, #22]
 801bb18:	2500      	movs	r5, #0
 801bb1a:	f7fe ba57 	b.w	8019fcc <dwt_ioctl+0x154>
 801bb1e:	bf00      	nop
 801bb20:	00050008 	.word	0x00050008
 801bb24:	0005000c 	.word	0x0005000c
 801bb28:	00110008 	.word	0x00110008
 801bb2c:	0802135c 	.word	0x0802135c
 801bb30:	000e0014 	.word	0x000e0014
 801bb34:	000e0018 	.word	0x000e0018
 801bb38:	00030060 	.word	0x00030060
 801bb3c:	000f004c 	.word	0x000f004c
 801bb40:	001f0004 	.word	0x001f0004
 801bb44:	001f0008 	.word	0x001f0008
 801bb48:	000c0048 	.word	0x000c0048
 801bb4c:	000c0028 	.word	0x000c0028
 801bb50:	000c0058 	.word	0x000c0058
 801bb54:	000c0030 	.word	0x000c0030
 801bb58:	000c0034 	.word	0x000c0034
 801bb5c:	000c0038 	.word	0x000c0038
 801bb60:	000c002c 	.word	0x000c002c
 801bb64:	2200      	movs	r2, #0
 801bb66:	49d4      	ldr	r1, [pc, #848]	; (801beb8 <dwt_ioctl+0x2040>)
 801bb68:	f7fc f8a7 	bl	8017cba <dwt_read32bitoffsetreg>
 801bb6c:	f3c0 000b 	ubfx	r0, r0, #0, #12
 801bb70:	6020      	str	r0, [r4, #0]
 801bb72:	2200      	movs	r2, #0
 801bb74:	49d1      	ldr	r1, [pc, #836]	; (801bebc <dwt_ioctl+0x2044>)
 801bb76:	4630      	mov	r0, r6
 801bb78:	f7fc f89f 	bl	8017cba <dwt_read32bitoffsetreg>
 801bb7c:	f3c0 0015 	ubfx	r0, r0, #0, #22
 801bb80:	6060      	str	r0, [r4, #4]
 801bb82:	2200      	movs	r2, #0
 801bb84:	49ce      	ldr	r1, [pc, #824]	; (801bec0 <dwt_ioctl+0x2048>)
 801bb86:	4630      	mov	r0, r6
 801bb88:	f7fc f897 	bl	8017cba <dwt_read32bitoffsetreg>
 801bb8c:	f3c0 0015 	ubfx	r0, r0, #0, #22
 801bb90:	60a0      	str	r0, [r4, #8]
 801bb92:	2200      	movs	r2, #0
 801bb94:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 801bb98:	4630      	mov	r0, r6
 801bb9a:	f7fc f88e 	bl	8017cba <dwt_read32bitoffsetreg>
 801bb9e:	f3c0 0015 	ubfx	r0, r0, #0, #22
 801bba2:	60e0      	str	r0, [r4, #12]
 801bba4:	2200      	movs	r2, #0
 801bba6:	49c7      	ldr	r1, [pc, #796]	; (801bec4 <dwt_ioctl+0x204c>)
 801bba8:	4630      	mov	r0, r6
 801bbaa:	f7fc f886 	bl	8017cba <dwt_read32bitoffsetreg>
 801bbae:	f3c0 0013 	ubfx	r0, r0, #0, #20
 801bbb2:	6120      	str	r0, [r4, #16]
 801bbb4:	e7a6      	b.n	801bb04 <dwt_ioctl+0x1c8c>
 801bbb6:	2200      	movs	r2, #0
 801bbb8:	49c3      	ldr	r1, [pc, #780]	; (801bec8 <dwt_ioctl+0x2050>)
 801bbba:	f7fc f87e 	bl	8017cba <dwt_read32bitoffsetreg>
 801bbbe:	f3c0 000b 	ubfx	r0, r0, #0, #12
 801bbc2:	6020      	str	r0, [r4, #0]
 801bbc4:	2200      	movs	r2, #0
 801bbc6:	49c1      	ldr	r1, [pc, #772]	; (801becc <dwt_ioctl+0x2054>)
 801bbc8:	4630      	mov	r0, r6
 801bbca:	f7fc f876 	bl	8017cba <dwt_read32bitoffsetreg>
 801bbce:	f3c0 0015 	ubfx	r0, r0, #0, #22
 801bbd2:	6060      	str	r0, [r4, #4]
 801bbd4:	2200      	movs	r2, #0
 801bbd6:	49be      	ldr	r1, [pc, #760]	; (801bed0 <dwt_ioctl+0x2058>)
 801bbd8:	4630      	mov	r0, r6
 801bbda:	f7fc f86e 	bl	8017cba <dwt_read32bitoffsetreg>
 801bbde:	f3c0 0015 	ubfx	r0, r0, #0, #22
 801bbe2:	60a0      	str	r0, [r4, #8]
 801bbe4:	2200      	movs	r2, #0
 801bbe6:	49bb      	ldr	r1, [pc, #748]	; (801bed4 <dwt_ioctl+0x205c>)
 801bbe8:	4630      	mov	r0, r6
 801bbea:	f7fc f866 	bl	8017cba <dwt_read32bitoffsetreg>
 801bbee:	f3c0 0015 	ubfx	r0, r0, #0, #22
 801bbf2:	60e0      	str	r0, [r4, #12]
 801bbf4:	2200      	movs	r2, #0
 801bbf6:	49b8      	ldr	r1, [pc, #736]	; (801bed8 <dwt_ioctl+0x2060>)
 801bbf8:	4630      	mov	r0, r6
 801bbfa:	f7fc f85e 	bl	8017cba <dwt_read32bitoffsetreg>
 801bbfe:	f3c0 0013 	ubfx	r0, r0, #0, #20
 801bc02:	6120      	str	r0, [r4, #16]
 801bc04:	e77e      	b.n	801bb04 <dwt_ioctl+0x1c8c>
 801bc06:	2500      	movs	r5, #0
 801bc08:	f7fe b9e0 	b.w	8019fcc <dwt_ioctl+0x154>
 801bc0c:	2500      	movs	r5, #0
 801bc0e:	f7fe b9dd 	b.w	8019fcc <dwt_ioctl+0x154>
 801bc12:	2500      	movs	r5, #0
 801bc14:	f7fe b9da 	b.w	8019fcc <dwt_ioctl+0x154>
 801bc18:	2500      	movs	r5, #0
 801bc1a:	f7fe b9d7 	b.w	8019fcc <dwt_ioctl+0x154>
 801bc1e:	2500      	movs	r5, #0
 801bc20:	f7fe b9d4 	b.w	8019fcc <dwt_ioctl+0x154>
 801bc24:	2500      	movs	r5, #0
 801bc26:	f7fe b9d1 	b.w	8019fcc <dwt_ioctl+0x154>
 801bc2a:	2500      	movs	r5, #0
 801bc2c:	f7fe b9ce 	b.w	8019fcc <dwt_ioctl+0x154>
 801bc30:	2500      	movs	r5, #0
 801bc32:	f7fe b9cb 	b.w	8019fcc <dwt_ioctl+0x154>
 801bc36:	2500      	movs	r5, #0
 801bc38:	f7fe b9c8 	b.w	8019fcc <dwt_ioctl+0x154>
 801bc3c:	2500      	movs	r5, #0
 801bc3e:	f7fe b9c5 	b.w	8019fcc <dwt_ioctl+0x154>
 801bc42:	2500      	movs	r5, #0
 801bc44:	f7fe b9c2 	b.w	8019fcc <dwt_ioctl+0x154>
 801bc48:	2500      	movs	r5, #0
 801bc4a:	f7fe b9bf 	b.w	8019fcc <dwt_ioctl+0x154>
 801bc4e:	2500      	movs	r5, #0
 801bc50:	f7fe b9bc 	b.w	8019fcc <dwt_ioctl+0x154>
 801bc54:	2500      	movs	r5, #0
 801bc56:	f7fe b9b9 	b.w	8019fcc <dwt_ioctl+0x154>
 801bc5a:	2500      	movs	r5, #0
 801bc5c:	f7fe b9b6 	b.w	8019fcc <dwt_ioctl+0x154>
 801bc60:	2500      	movs	r5, #0
 801bc62:	f7fe b9b3 	b.w	8019fcc <dwt_ioctl+0x154>
 801bc66:	2500      	movs	r5, #0
 801bc68:	f7fe b9b0 	b.w	8019fcc <dwt_ioctl+0x154>
 801bc6c:	2500      	movs	r5, #0
 801bc6e:	f7fe b9ad 	b.w	8019fcc <dwt_ioctl+0x154>
 801bc72:	2500      	movs	r5, #0
 801bc74:	f7fe b9aa 	b.w	8019fcc <dwt_ioctl+0x154>
 801bc78:	2500      	movs	r5, #0
 801bc7a:	f7fe b9a7 	b.w	8019fcc <dwt_ioctl+0x154>
 801bc7e:	2500      	movs	r5, #0
 801bc80:	f7fe b9a4 	b.w	8019fcc <dwt_ioctl+0x154>
 801bc84:	2500      	movs	r5, #0
 801bc86:	f7fe b9a1 	b.w	8019fcc <dwt_ioctl+0x154>
 801bc8a:	2500      	movs	r5, #0
 801bc8c:	f7fe b99e 	b.w	8019fcc <dwt_ioctl+0x154>
 801bc90:	2500      	movs	r5, #0
 801bc92:	f7fe b99b 	b.w	8019fcc <dwt_ioctl+0x154>
 801bc96:	2500      	movs	r5, #0
 801bc98:	f7fe b998 	b.w	8019fcc <dwt_ioctl+0x154>
 801bc9c:	2500      	movs	r5, #0
 801bc9e:	f7fe b995 	b.w	8019fcc <dwt_ioctl+0x154>
 801bca2:	2500      	movs	r5, #0
 801bca4:	f7fe b992 	b.w	8019fcc <dwt_ioctl+0x154>
 801bca8:	2500      	movs	r5, #0
 801bcaa:	f7fe b98f 	b.w	8019fcc <dwt_ioctl+0x154>
 801bcae:	2500      	movs	r5, #0
 801bcb0:	f7fe b98c 	b.w	8019fcc <dwt_ioctl+0x154>
 801bcb4:	2500      	movs	r5, #0
 801bcb6:	f7fe b989 	b.w	8019fcc <dwt_ioctl+0x154>
 801bcba:	2500      	movs	r5, #0
 801bcbc:	f7fe b986 	b.w	8019fcc <dwt_ioctl+0x154>
 801bcc0:	2500      	movs	r5, #0
 801bcc2:	f7fe b983 	b.w	8019fcc <dwt_ioctl+0x154>
 801bcc6:	2500      	movs	r5, #0
 801bcc8:	f7fe b980 	b.w	8019fcc <dwt_ioctl+0x154>
 801bccc:	2500      	movs	r5, #0
 801bcce:	f7fe b97d 	b.w	8019fcc <dwt_ioctl+0x154>
 801bcd2:	2500      	movs	r5, #0
 801bcd4:	f7fe b97a 	b.w	8019fcc <dwt_ioctl+0x154>
 801bcd8:	2500      	movs	r5, #0
 801bcda:	f7fe b977 	b.w	8019fcc <dwt_ioctl+0x154>
 801bcde:	2500      	movs	r5, #0
 801bce0:	f7fe b974 	b.w	8019fcc <dwt_ioctl+0x154>
 801bce4:	2500      	movs	r5, #0
 801bce6:	f7fe b971 	b.w	8019fcc <dwt_ioctl+0x154>
 801bcea:	2500      	movs	r5, #0
 801bcec:	f7fe b96e 	b.w	8019fcc <dwt_ioctl+0x154>
 801bcf0:	2500      	movs	r5, #0
 801bcf2:	f7fe b96b 	b.w	8019fcc <dwt_ioctl+0x154>
 801bcf6:	2500      	movs	r5, #0
 801bcf8:	f7fe b968 	b.w	8019fcc <dwt_ioctl+0x154>
 801bcfc:	2500      	movs	r5, #0
 801bcfe:	f7fe b965 	b.w	8019fcc <dwt_ioctl+0x154>
 801bd02:	2500      	movs	r5, #0
 801bd04:	f7fe b962 	b.w	8019fcc <dwt_ioctl+0x154>
 801bd08:	2500      	movs	r5, #0
 801bd0a:	f7fe b95f 	b.w	8019fcc <dwt_ioctl+0x154>
 801bd0e:	2500      	movs	r5, #0
 801bd10:	f7fe b95c 	b.w	8019fcc <dwt_ioctl+0x154>
 801bd14:	2500      	movs	r5, #0
 801bd16:	f7fe b959 	b.w	8019fcc <dwt_ioctl+0x154>
 801bd1a:	2500      	movs	r5, #0
 801bd1c:	f7fe b956 	b.w	8019fcc <dwt_ioctl+0x154>
 801bd20:	2500      	movs	r5, #0
 801bd22:	f7fe b953 	b.w	8019fcc <dwt_ioctl+0x154>
 801bd26:	2500      	movs	r5, #0
 801bd28:	f7fe b950 	b.w	8019fcc <dwt_ioctl+0x154>
 801bd2c:	2500      	movs	r5, #0
 801bd2e:	f7fe b94d 	b.w	8019fcc <dwt_ioctl+0x154>
 801bd32:	2500      	movs	r5, #0
 801bd34:	f7fe b94a 	b.w	8019fcc <dwt_ioctl+0x154>
 801bd38:	2500      	movs	r5, #0
 801bd3a:	f7fe b947 	b.w	8019fcc <dwt_ioctl+0x154>
 801bd3e:	2500      	movs	r5, #0
 801bd40:	f7fe b944 	b.w	8019fcc <dwt_ioctl+0x154>
 801bd44:	2500      	movs	r5, #0
 801bd46:	f7fe b941 	b.w	8019fcc <dwt_ioctl+0x154>
 801bd4a:	2500      	movs	r5, #0
 801bd4c:	f7fe b93e 	b.w	8019fcc <dwt_ioctl+0x154>
 801bd50:	2500      	movs	r5, #0
 801bd52:	f7fe b93b 	b.w	8019fcc <dwt_ioctl+0x154>
 801bd56:	2500      	movs	r5, #0
 801bd58:	f7fe b938 	b.w	8019fcc <dwt_ioctl+0x154>
 801bd5c:	2500      	movs	r5, #0
 801bd5e:	f7fe b935 	b.w	8019fcc <dwt_ioctl+0x154>
 801bd62:	2500      	movs	r5, #0
 801bd64:	f7fe b932 	b.w	8019fcc <dwt_ioctl+0x154>
 801bd68:	2500      	movs	r5, #0
 801bd6a:	f7fe b92f 	b.w	8019fcc <dwt_ioctl+0x154>
 801bd6e:	2500      	movs	r5, #0
 801bd70:	f7fe b92c 	b.w	8019fcc <dwt_ioctl+0x154>
 801bd74:	2500      	movs	r5, #0
 801bd76:	f7fe b929 	b.w	8019fcc <dwt_ioctl+0x154>
 801bd7a:	2500      	movs	r5, #0
 801bd7c:	f7fe b926 	b.w	8019fcc <dwt_ioctl+0x154>
 801bd80:	2500      	movs	r5, #0
 801bd82:	f7fe b923 	b.w	8019fcc <dwt_ioctl+0x154>
 801bd86:	2500      	movs	r5, #0
 801bd88:	f7fe b920 	b.w	8019fcc <dwt_ioctl+0x154>
 801bd8c:	2500      	movs	r5, #0
 801bd8e:	f7fe b91d 	b.w	8019fcc <dwt_ioctl+0x154>
 801bd92:	2500      	movs	r5, #0
 801bd94:	f7fe b91a 	b.w	8019fcc <dwt_ioctl+0x154>
 801bd98:	2500      	movs	r5, #0
 801bd9a:	f7fe b917 	b.w	8019fcc <dwt_ioctl+0x154>
 801bd9e:	2500      	movs	r5, #0
 801bda0:	f7fe b914 	b.w	8019fcc <dwt_ioctl+0x154>
 801bda4:	2500      	movs	r5, #0
 801bda6:	f7fe b911 	b.w	8019fcc <dwt_ioctl+0x154>
 801bdaa:	2500      	movs	r5, #0
 801bdac:	f7fe b90e 	b.w	8019fcc <dwt_ioctl+0x154>
 801bdb0:	2500      	movs	r5, #0
 801bdb2:	f7fe b90b 	b.w	8019fcc <dwt_ioctl+0x154>
 801bdb6:	2500      	movs	r5, #0
 801bdb8:	f7fe b908 	b.w	8019fcc <dwt_ioctl+0x154>
 801bdbc:	2500      	movs	r5, #0
 801bdbe:	f7fe b905 	b.w	8019fcc <dwt_ioctl+0x154>
 801bdc2:	2500      	movs	r5, #0
 801bdc4:	f7fe b902 	b.w	8019fcc <dwt_ioctl+0x154>
 801bdc8:	2500      	movs	r5, #0
 801bdca:	f7fe b8ff 	b.w	8019fcc <dwt_ioctl+0x154>
 801bdce:	2500      	movs	r5, #0
 801bdd0:	f7fe b8fc 	b.w	8019fcc <dwt_ioctl+0x154>
 801bdd4:	2500      	movs	r5, #0
 801bdd6:	f7fe b8f9 	b.w	8019fcc <dwt_ioctl+0x154>
 801bdda:	2500      	movs	r5, #0
 801bddc:	f7fe b8f6 	b.w	8019fcc <dwt_ioctl+0x154>
 801bde0:	2500      	movs	r5, #0
 801bde2:	f7fe b8f3 	b.w	8019fcc <dwt_ioctl+0x154>
 801bde6:	2500      	movs	r5, #0
 801bde8:	f7fe b8f0 	b.w	8019fcc <dwt_ioctl+0x154>
 801bdec:	2500      	movs	r5, #0
 801bdee:	f7fe b8ed 	b.w	8019fcc <dwt_ioctl+0x154>
 801bdf2:	2500      	movs	r5, #0
 801bdf4:	f7fe b8ea 	b.w	8019fcc <dwt_ioctl+0x154>
 801bdf8:	2500      	movs	r5, #0
 801bdfa:	f7fe b8e7 	b.w	8019fcc <dwt_ioctl+0x154>
 801bdfe:	2500      	movs	r5, #0
 801be00:	f7fe b8e4 	b.w	8019fcc <dwt_ioctl+0x154>
 801be04:	2500      	movs	r5, #0
 801be06:	f7fe b8e1 	b.w	8019fcc <dwt_ioctl+0x154>
 801be0a:	2500      	movs	r5, #0
 801be0c:	f7fe b8de 	b.w	8019fcc <dwt_ioctl+0x154>
 801be10:	2500      	movs	r5, #0
 801be12:	f7fe b8db 	b.w	8019fcc <dwt_ioctl+0x154>
 801be16:	2500      	movs	r5, #0
 801be18:	f7fe b8d8 	b.w	8019fcc <dwt_ioctl+0x154>
 801be1c:	2500      	movs	r5, #0
 801be1e:	f7fe b8d5 	b.w	8019fcc <dwt_ioctl+0x154>
 801be22:	2500      	movs	r5, #0
 801be24:	f7fe b8d2 	b.w	8019fcc <dwt_ioctl+0x154>
 801be28:	2500      	movs	r5, #0
 801be2a:	f7fe b8cf 	b.w	8019fcc <dwt_ioctl+0x154>
 801be2e:	2500      	movs	r5, #0
 801be30:	f7fe b8cc 	b.w	8019fcc <dwt_ioctl+0x154>
 801be34:	f04f 35ff 	mov.w	r5, #4294967295
 801be38:	f7fe b8c8 	b.w	8019fcc <dwt_ioctl+0x154>
 801be3c:	f04f 35ff 	mov.w	r5, #4294967295
 801be40:	f7fe b8c4 	b.w	8019fcc <dwt_ioctl+0x154>
 801be44:	2500      	movs	r5, #0
 801be46:	f7fe b8c1 	b.w	8019fcc <dwt_ioctl+0x154>
 801be4a:	2500      	movs	r5, #0
 801be4c:	f7fe b8be 	b.w	8019fcc <dwt_ioctl+0x154>
 801be50:	2500      	movs	r5, #0
 801be52:	f7fe b8bb 	b.w	8019fcc <dwt_ioctl+0x154>
 801be56:	2500      	movs	r5, #0
 801be58:	f7fe b8b8 	b.w	8019fcc <dwt_ioctl+0x154>
 801be5c:	2500      	movs	r5, #0
 801be5e:	f7fe b8b5 	b.w	8019fcc <dwt_ioctl+0x154>
 801be62:	2500      	movs	r5, #0
 801be64:	f7fe b8b2 	b.w	8019fcc <dwt_ioctl+0x154>
 801be68:	2500      	movs	r5, #0
 801be6a:	f7fe b8af 	b.w	8019fcc <dwt_ioctl+0x154>
 801be6e:	2500      	movs	r5, #0
 801be70:	f7fe b8ac 	b.w	8019fcc <dwt_ioctl+0x154>
 801be74:	2500      	movs	r5, #0
 801be76:	f7fe b8a9 	b.w	8019fcc <dwt_ioctl+0x154>
 801be7a:	2500      	movs	r5, #0
 801be7c:	f7fe b8a6 	b.w	8019fcc <dwt_ioctl+0x154>
 801be80:	2500      	movs	r5, #0
 801be82:	f7fe b8a3 	b.w	8019fcc <dwt_ioctl+0x154>
 801be86:	2500      	movs	r5, #0
 801be88:	f7fe b8a0 	b.w	8019fcc <dwt_ioctl+0x154>
 801be8c:	2500      	movs	r5, #0
 801be8e:	f7fe b89d 	b.w	8019fcc <dwt_ioctl+0x154>
 801be92:	f899 3011 	ldrb.w	r3, [r9, #17]
 801be96:	1e5a      	subs	r2, r3, #1
 801be98:	b2d2      	uxtb	r2, r2
 801be9a:	2a01      	cmp	r2, #1
 801be9c:	f67e aeec 	bls.w	801ac78 <dwt_ioctl+0xe00>
 801bea0:	2202      	movs	r2, #2
 801bea2:	f7fe be93 	b.w	801abcc <dwt_ioctl+0xd54>
 801bea6:	2f00      	cmp	r7, #0
 801bea8:	f43f ab68 	beq.w	801b57c <dwt_ioctl+0x1704>
 801beac:	f819 1000 	ldrb.w	r1, [r9, r0]
 801beb0:	1a5b      	subs	r3, r3, r1
 801beb2:	b29b      	uxth	r3, r3
 801beb4:	f7ff bb88 	b.w	801b5c8 <dwt_ioctl+0x1750>
 801beb8:	000d0020 	.word	0x000d0020
 801bebc:	000c0064 	.word	0x000c0064
 801bec0:	000c0068 	.word	0x000c0068
 801bec4:	000c0060 	.word	0x000c0060
 801bec8:	000d0068 	.word	0x000d0068
 801becc:	000d0040 	.word	0x000d0040
 801bed0:	000d0044 	.word	0x000d0044
 801bed4:	000d0048 	.word	0x000d0048
 801bed8:	000d003c 	.word	0x000d003c
 801bedc:	283f      	cmp	r0, #63	; 0x3f
 801bede:	d027      	beq.n	801bf30 <dwt_ioctl+0x20b8>
 801bee0:	2e00      	cmp	r6, #0
 801bee2:	f47f ab51 	bne.w	801b588 <dwt_ioctl+0x1710>
 801bee6:	3001      	adds	r0, #1
 801bee8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 801beec:	f819 1000 	ldrb.w	r1, [r9, r0]
 801bef0:	440b      	add	r3, r1
 801bef2:	b29b      	uxth	r3, r3
 801bef4:	459c      	cmp	ip, r3
 801bef6:	f43f ab65 	beq.w	801b5c4 <dwt_ioctl+0x174c>
 801befa:	3d01      	subs	r5, #1
 801befc:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 801bf00:	f43f ab23 	beq.w	801b54a <dwt_ioctl+0x16d2>
 801bf04:	459e      	cmp	lr, r3
 801bf06:	f4bf ab33 	bcs.w	801b570 <dwt_ioctl+0x16f8>
 801bf0a:	4598      	cmp	r8, r3
 801bf0c:	d9cb      	bls.n	801bea6 <dwt_ioctl+0x202e>
 801bf0e:	ebac 0103 	sub.w	r1, ip, r3
 801bf12:	b209      	sxth	r1, r1
 801bf14:	2900      	cmp	r1, #0
 801bf16:	bfb8      	it	lt
 801bf18:	4249      	neglt	r1, r1
 801bf1a:	4559      	cmp	r1, fp
 801bf1c:	f77f ab20 	ble.w	801b560 <dwt_ioctl+0x16e8>
 801bf20:	2f00      	cmp	r7, #0
 801bf22:	f47f ab64 	bne.w	801b5ee <dwt_ioctl+0x1776>
 801bf26:	283f      	cmp	r0, #63	; 0x3f
 801bf28:	d1da      	bne.n	801bee0 <dwt_ioctl+0x2068>
 801bf2a:	2f00      	cmp	r7, #0
 801bf2c:	f47f ab64 	bne.w	801b5f8 <dwt_ioctl+0x1780>
 801bf30:	2a03      	cmp	r2, #3
 801bf32:	f43f ab64 	beq.w	801b5fe <dwt_ioctl+0x1786>
 801bf36:	2a02      	cmp	r2, #2
 801bf38:	f43f ab33 	beq.w	801b5a2 <dwt_ioctl+0x172a>
 801bf3c:	f81a 1002 	ldrb.w	r1, [sl, r2]
 801bf40:	185e      	adds	r6, r3, r1
 801bf42:	4566      	cmp	r6, ip
 801bf44:	f77f ab34 	ble.w	801b5b0 <dwt_ioctl+0x1738>
 801bf48:	440b      	add	r3, r1
 801bf4a:	b29b      	uxth	r3, r3
 801bf4c:	3201      	adds	r2, #1
 801bf4e:	b2d2      	uxtb	r2, r2
 801bf50:	2700      	movs	r7, #0
 801bf52:	f7ff bb19 	b.w	801b588 <dwt_ioctl+0x1710>
 801bf56:	bf00      	nop

0801bf58 <_init>:
 801bf58:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bf5a:	b085      	sub	sp, #20
 801bf5c:	4604      	mov	r4, r0
 801bf5e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801bf60:	6819      	ldr	r1, [r3, #0]
 801bf62:	f7fd fe5d 	bl	8019c20 <ull_initialise>
 801bf66:	4606      	mov	r6, r0
 801bf68:	6823      	ldr	r3, [r4, #0]
 801bf6a:	691b      	ldr	r3, [r3, #16]
 801bf6c:	4798      	blx	r3
 801bf6e:	ab03      	add	r3, sp, #12
 801bf70:	2200      	movs	r2, #0
 801bf72:	4611      	mov	r1, r2
 801bf74:	4620      	mov	r0, r4
 801bf76:	f7fd ff7f 	bl	8019e78 <dwt_ioctl>
 801bf7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801bf7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bf7e:	6819      	ldr	r1, [r3, #0]
 801bf80:	4620      	mov	r0, r4
 801bf82:	f7fd fc0d 	bl	80197a0 <ull_configure>
 801bf86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801bf88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bf8a:	6859      	ldr	r1, [r3, #4]
 801bf8c:	4620      	mov	r0, r4
 801bf8e:	f7fd f959 	bl	8019244 <ull_configuretxrf>
 801bf92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801bf94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bf96:	89db      	ldrh	r3, [r3, #14]
 801bf98:	2200      	movs	r2, #0
 801bf9a:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 801bf9e:	4620      	mov	r0, r4
 801bfa0:	f7fc faa3 	bl	80184ea <dwt_write16bitoffsetreg>
 801bfa4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801bfa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bfa8:	899b      	ldrh	r3, [r3, #12]
 801bfaa:	2200      	movs	r2, #0
 801bfac:	217c      	movs	r1, #124	; 0x7c
 801bfae:	4620      	mov	r0, r4
 801bfb0:	f7fc fa9b 	bl	80184ea <dwt_write16bitoffsetreg>
 801bfb4:	2100      	movs	r1, #0
 801bfb6:	4620      	mov	r0, r4
 801bfb8:	f7fc fb2f 	bl	801861a <ull_setrxaftertxdelay>
 801bfbc:	2500      	movs	r5, #0
 801bfbe:	9500      	str	r5, [sp, #0]
 801bfc0:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 801bfc4:	462a      	mov	r2, r5
 801bfc6:	2110      	movs	r1, #16
 801bfc8:	4620      	mov	r0, r4
 801bfca:	f7fd facb 	bl	8019564 <dwt_modify16bitoffsetreg>
 801bfce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801bfd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bfd2:	895a      	ldrh	r2, [r3, #10]
 801bfd4:	8919      	ldrh	r1, [r3, #8]
 801bfd6:	4620      	mov	r0, r4
 801bfd8:	f7fd f9c2 	bl	8019360 <ull_configureframefilter>
 801bfdc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801bfde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bfe0:	8a1b      	ldrh	r3, [r3, #16]
 801bfe2:	2202      	movs	r2, #2
 801bfe4:	210c      	movs	r1, #12
 801bfe6:	4620      	mov	r0, r4
 801bfe8:	f7fc fa7f 	bl	80184ea <dwt_write16bitoffsetreg>
 801bfec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801bfee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bff0:	8a5b      	ldrh	r3, [r3, #18]
 801bff2:	462a      	mov	r2, r5
 801bff4:	210c      	movs	r1, #12
 801bff6:	4620      	mov	r0, r4
 801bff8:	f7fc fa77 	bl	80184ea <dwt_write16bitoffsetreg>
 801bffc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801bffe:	7a19      	ldrb	r1, [r3, #8]
 801c000:	4620      	mov	r0, r4
 801c002:	f7fd fac9 	bl	8019598 <ull_setleds>
 801c006:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c008:	68d9      	ldr	r1, [r3, #12]
 801c00a:	4620      	mov	r0, r4
 801c00c:	f7fc fb19 	bl	8018642 <ull_setlnapamode>
 801c010:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c012:	7e0b      	ldrb	r3, [r1, #24]
 801c014:	694a      	ldr	r2, [r1, #20]
 801c016:	6909      	ldr	r1, [r1, #16]
 801c018:	4620      	mov	r0, r4
 801c01a:	f7fd fa27 	bl	801946c <ull_setinterrupt>
 801c01e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c020:	7f9a      	ldrb	r2, [r3, #30]
 801c022:	8b99      	ldrh	r1, [r3, #28]
 801c024:	4620      	mov	r0, r4
 801c026:	f7fc fd1f 	bl	8018a68 <ull_configuresleep>
 801c02a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 801c02c:	7b53      	ldrb	r3, [r2, #13]
 801c02e:	2b2e      	cmp	r3, #46	; 0x2e
 801c030:	d005      	beq.n	801c03e <_init+0xe6>
 801c032:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c034:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801c038:	f033 033f 	bics.w	r3, r3, #63	; 0x3f
 801c03c:	d00a      	beq.n	801c054 <_init+0xfc>
 801c03e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c040:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801c044:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801c048:	7353      	strb	r3, [r2, #13]
 801c04a:	2200      	movs	r2, #0
 801c04c:	492a      	ldr	r1, [pc, #168]	; (801c0f8 <_init+0x1a0>)
 801c04e:	4620      	mov	r0, r4
 801c050:	f7fc fc36 	bl	80188c0 <dwt_write8bitoffsetreg>
 801c054:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c056:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 801c05a:	4620      	mov	r0, r4
 801c05c:	f7fd f87a 	bl	8019154 <ull_configciadiag>
 801c060:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c062:	6a19      	ldr	r1, [r3, #32]
 801c064:	4620      	mov	r0, r4
 801c066:	f7fc fb0d 	bl	8018684 <ull_configurestskey>
 801c06a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c06c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801c06e:	4620      	mov	r0, r4
 801c070:	f7fc fb2c 	bl	80186cc <ull_configurestsiv>
 801c074:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c076:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 801c07a:	bb9b      	cbnz	r3, 801c0e4 <_init+0x18c>
 801c07c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c07e:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 801c082:	4620      	mov	r0, r4
 801c084:	f7fc fc94 	bl	80189b0 <ull_configeventcounters>
 801c088:	f994 504c 	ldrsb.w	r5, [r4, #76]	; 0x4c
 801c08c:	2d00      	cmp	r5, #0
 801c08e:	db26      	blt.n	801c0de <_init+0x186>
 801c090:	2301      	movs	r3, #1
 801c092:	fa03 f505 	lsl.w	r5, r3, r5
 801c096:	b2af      	uxth	r7, r5
 801c098:	4a18      	ldr	r2, [pc, #96]	; (801c0fc <_init+0x1a4>)
 801c09a:	4639      	mov	r1, r7
 801c09c:	4620      	mov	r0, r4
 801c09e:	f7fc fff5 	bl	801908c <ull_setgpiomode>
 801c0a2:	f10d 030a 	add.w	r3, sp, #10
 801c0a6:	9300      	str	r3, [sp, #0]
 801c0a8:	2302      	movs	r3, #2
 801c0aa:	2200      	movs	r2, #0
 801c0ac:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801c0b0:	4620      	mov	r0, r4
 801c0b2:	f7fb fdf8 	bl	8017ca6 <dwt_readfromdevice>
 801c0b6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801c0ba:	ea23 0305 	bic.w	r3, r3, r5
 801c0be:	f8ad 300a 	strh.w	r3, [sp, #10]
 801c0c2:	2200      	movs	r2, #0
 801c0c4:	490e      	ldr	r1, [pc, #56]	; (801c100 <_init+0x1a8>)
 801c0c6:	4620      	mov	r0, r4
 801c0c8:	f7fc fa0f 	bl	80184ea <dwt_write16bitoffsetreg>
 801c0cc:	f994 204d 	ldrsb.w	r2, [r4, #77]	; 0x4d
 801c0d0:	fab2 f282 	clz	r2, r2
 801c0d4:	0952      	lsrs	r2, r2, #5
 801c0d6:	4639      	mov	r1, r7
 801c0d8:	4620      	mov	r0, r4
 801c0da:	f7fd fadb 	bl	8019694 <ull_setgpiovalue>
 801c0de:	4630      	mov	r0, r6
 801c0e0:	b005      	add	sp, #20
 801c0e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c0e4:	2301      	movs	r3, #1
 801c0e6:	9300      	str	r3, [sp, #0]
 801c0e8:	23ff      	movs	r3, #255	; 0xff
 801c0ea:	2200      	movs	r2, #0
 801c0ec:	4905      	ldr	r1, [pc, #20]	; (801c104 <_init+0x1ac>)
 801c0ee:	4620      	mov	r0, r4
 801c0f0:	f7fd f81c 	bl	801912c <dwt_modify8bitoffsetreg>
 801c0f4:	e7c2      	b.n	801c07c <_init+0x124>
 801c0f6:	bf00      	nop
 801c0f8:	00090014 	.word	0x00090014
 801c0fc:	01200492 	.word	0x01200492
 801c100:	00050008 	.word	0x00050008
 801c104:	00020004 	.word	0x00020004

0801c108 <ull_wakeup_ic>:
 801c108:	b508      	push	{r3, lr}
 801c10a:	6843      	ldr	r3, [r0, #4]
 801c10c:	4798      	blx	r3
 801c10e:	bd08      	pop	{r3, pc}

0801c110 <get_sts_mnth>:
 801c110:	fb01 f100 	mul.w	r1, r1, r0
 801c114:	2a03      	cmp	r2, #3
 801c116:	d00a      	beq.n	801c12e <get_sts_mnth+0x1e>
 801c118:	0ac8      	lsrs	r0, r1, #11
 801c11a:	f3c1 010a 	ubfx	r1, r1, #0, #11
 801c11e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801c122:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 801c126:	bf28      	it	cs
 801c128:	3001      	addcs	r0, #1
 801c12a:	b280      	uxth	r0, r0
 801c12c:	4770      	bx	lr
 801c12e:	20b5      	movs	r0, #181	; 0xb5
 801c130:	fb00 f101 	mul.w	r1, r0, r1
 801c134:	09c9      	lsrs	r1, r1, #7
 801c136:	e7ef      	b.n	801c118 <get_sts_mnth+0x8>

0801c138 <dwt_dbg_fn>:
 801c138:	2998      	cmp	r1, #152	; 0x98
 801c13a:	4802      	ldr	r0, [pc, #8]	; (801c144 <dwt_dbg_fn+0xc>)
 801c13c:	bf18      	it	ne
 801c13e:	2000      	movne	r0, #0
 801c140:	4770      	bx	lr
 801c142:	bf00      	nop
 801c144:	08021464 	.word	0x08021464

0801c148 <_deinit>:
 801c148:	4770      	bx	lr

0801c14a <dwt_xfer3xxx>:
 801c14a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c14e:	b084      	sub	sp, #16
 801c150:	4605      	mov	r5, r0
 801c152:	460f      	mov	r7, r1
 801c154:	461e      	mov	r6, r3
 801c156:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 801c15a:	1e59      	subs	r1, r3, #1
 801c15c:	b289      	uxth	r1, r1
 801c15e:	2901      	cmp	r1, #1
 801c160:	d91c      	bls.n	801c19c <dwt_xfer3xxx+0x52>
 801c162:	19d0      	adds	r0, r2, r7
 801c164:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801c168:	443a      	add	r2, r7
 801c16a:	f3c2 4104 	ubfx	r1, r2, #16, #5
 801c16e:	0082      	lsls	r2, r0, #2
 801c170:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 801c174:	ea43 0102 	orr.w	r1, r3, r2
 801c178:	0a09      	lsrs	r1, r1, #8
 801c17a:	f88d 100c 	strb.w	r1, [sp, #12]
 801c17e:	b920      	cbnz	r0, 801c18a <dwt_xfer3xxx+0x40>
 801c180:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c184:	d018      	beq.n	801c1b8 <dwt_xfer3xxx+0x6e>
 801c186:	2b00      	cmp	r3, #0
 801c188:	d037      	beq.n	801c1fa <dwt_xfer3xxx+0xb0>
 801c18a:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 801c18e:	f88d 100c 	strb.w	r1, [sp, #12]
 801c192:	431a      	orrs	r2, r3
 801c194:	f88d 200d 	strb.w	r2, [sp, #13]
 801c198:	2402      	movs	r4, #2
 801c19a:	e005      	b.n	801c1a8 <dwt_xfer3xxx+0x5e>
 801c19c:	007a      	lsls	r2, r7, #1
 801c19e:	f062 027e 	orn	r2, r2, #126	; 0x7e
 801c1a2:	f88d 200c 	strb.w	r2, [sp, #12]
 801c1a6:	2401      	movs	r4, #1
 801c1a8:	2b02      	cmp	r3, #2
 801c1aa:	d006      	beq.n	801c1ba <dwt_xfer3xxx+0x70>
 801c1ac:	d326      	bcc.n	801c1fc <dwt_xfer3xxx+0xb2>
 801c1ae:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 801c1b2:	2b03      	cmp	r3, #3
 801c1b4:	d901      	bls.n	801c1ba <dwt_xfer3xxx+0x70>
 801c1b6:	e7fe      	b.n	801c1b6 <dwt_xfer3xxx+0x6c>
 801c1b8:	2401      	movs	r4, #1
 801c1ba:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 801c1bc:	7d1b      	ldrb	r3, [r3, #20]
 801c1be:	b94b      	cbnz	r3, 801c1d4 <dwt_xfer3xxx+0x8a>
 801c1c0:	682b      	ldr	r3, [r5, #0]
 801c1c2:	685d      	ldr	r5, [r3, #4]
 801c1c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c1c6:	4632      	mov	r2, r6
 801c1c8:	a903      	add	r1, sp, #12
 801c1ca:	4620      	mov	r0, r4
 801c1cc:	47a8      	blx	r5
 801c1ce:	b004      	add	sp, #16
 801c1d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c1d4:	2200      	movs	r2, #0
 801c1d6:	4621      	mov	r1, r4
 801c1d8:	a803      	add	r0, sp, #12
 801c1da:	f7f6 fd29 	bl	8012c30 <dwt_generatecrc8>
 801c1de:	4602      	mov	r2, r0
 801c1e0:	4631      	mov	r1, r6
 801c1e2:	980a      	ldr	r0, [sp, #40]	; 0x28
 801c1e4:	f7f6 fd24 	bl	8012c30 <dwt_generatecrc8>
 801c1e8:	682b      	ldr	r3, [r5, #0]
 801c1ea:	9000      	str	r0, [sp, #0]
 801c1ec:	689d      	ldr	r5, [r3, #8]
 801c1ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c1f0:	4632      	mov	r2, r6
 801c1f2:	a903      	add	r1, sp, #12
 801c1f4:	4620      	mov	r0, r4
 801c1f6:	47a8      	blx	r5
 801c1f8:	e7e9      	b.n	801c1ce <dwt_xfer3xxx+0x84>
 801c1fa:	2401      	movs	r4, #1
 801c1fc:	682b      	ldr	r3, [r5, #0]
 801c1fe:	f8d3 8000 	ldr.w	r8, [r3]
 801c202:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c204:	4632      	mov	r2, r6
 801c206:	a903      	add	r1, sp, #12
 801c208:	4620      	mov	r0, r4
 801c20a:	47c0      	blx	r8
 801c20c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 801c20e:	7d1b      	ldrb	r3, [r3, #20]
 801c210:	2b02      	cmp	r3, #2
 801c212:	d1dc      	bne.n	801c1ce <dwt_xfer3xxx+0x84>
 801c214:	2f18      	cmp	r7, #24
 801c216:	d0da      	beq.n	801c1ce <dwt_xfer3xxx+0x84>
 801c218:	2200      	movs	r2, #0
 801c21a:	4621      	mov	r1, r4
 801c21c:	a803      	add	r0, sp, #12
 801c21e:	f7f6 fd07 	bl	8012c30 <dwt_generatecrc8>
 801c222:	4602      	mov	r2, r0
 801c224:	4631      	mov	r1, r6
 801c226:	980a      	ldr	r0, [sp, #40]	; 0x28
 801c228:	f7f6 fd02 	bl	8012c30 <dwt_generatecrc8>
 801c22c:	4604      	mov	r4, r0
 801c22e:	2200      	movs	r2, #0
 801c230:	2118      	movs	r1, #24
 801c232:	4628      	mov	r0, r5
 801c234:	f000 f866 	bl	801c304 <dwt_read8bitoffsetreg>
 801c238:	4284      	cmp	r4, r0
 801c23a:	d0c8      	beq.n	801c1ce <dwt_xfer3xxx+0x84>
 801c23c:	68eb      	ldr	r3, [r5, #12]
 801c23e:	2b00      	cmp	r3, #0
 801c240:	d0c5      	beq.n	801c1ce <dwt_xfer3xxx+0x84>
 801c242:	4798      	blx	r3
 801c244:	e7c3      	b.n	801c1ce <dwt_xfer3xxx+0x84>

0801c246 <dwt_readfromdevice>:
 801c246:	b510      	push	{r4, lr}
 801c248:	b082      	sub	sp, #8
 801c24a:	2400      	movs	r4, #0
 801c24c:	9401      	str	r4, [sp, #4]
 801c24e:	9c04      	ldr	r4, [sp, #16]
 801c250:	9400      	str	r4, [sp, #0]
 801c252:	f7ff ff7a 	bl	801c14a <dwt_xfer3xxx>
 801c256:	b002      	add	sp, #8
 801c258:	bd10      	pop	{r4, pc}

0801c25a <dwt_read32bitoffsetreg>:
 801c25a:	b500      	push	{lr}
 801c25c:	b085      	sub	sp, #20
 801c25e:	ab03      	add	r3, sp, #12
 801c260:	9300      	str	r3, [sp, #0]
 801c262:	2304      	movs	r3, #4
 801c264:	b292      	uxth	r2, r2
 801c266:	f7ff ffee 	bl	801c246 <dwt_readfromdevice>
 801c26a:	f10d 030f 	add.w	r3, sp, #15
 801c26e:	f10d 010b 	add.w	r1, sp, #11
 801c272:	2000      	movs	r0, #0
 801c274:	f813 2901 	ldrb.w	r2, [r3], #-1
 801c278:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 801c27c:	428b      	cmp	r3, r1
 801c27e:	d1f9      	bne.n	801c274 <dwt_read32bitoffsetreg+0x1a>
 801c280:	b005      	add	sp, #20
 801c282:	f85d fb04 	ldr.w	pc, [sp], #4

0801c286 <dwt_read16bitoffsetreg>:
 801c286:	b500      	push	{lr}
 801c288:	b085      	sub	sp, #20
 801c28a:	ab03      	add	r3, sp, #12
 801c28c:	9300      	str	r3, [sp, #0]
 801c28e:	2302      	movs	r3, #2
 801c290:	b292      	uxth	r2, r2
 801c292:	f7ff ffd8 	bl	801c246 <dwt_readfromdevice>
 801c296:	f89d 300d 	ldrb.w	r3, [sp, #13]
 801c29a:	f89d 000c 	ldrb.w	r0, [sp, #12]
 801c29e:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 801c2a2:	b280      	uxth	r0, r0
 801c2a4:	b005      	add	sp, #20
 801c2a6:	f85d fb04 	ldr.w	pc, [sp], #4

0801c2aa <ull_getrxantennadelay>:
 801c2aa:	b508      	push	{r3, lr}
 801c2ac:	2200      	movs	r2, #0
 801c2ae:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 801c2b2:	f7ff ffe8 	bl	801c286 <dwt_read16bitoffsetreg>
 801c2b6:	bd08      	pop	{r3, pc}

0801c2b8 <ull_gettxantennadelay>:
 801c2b8:	b508      	push	{r3, lr}
 801c2ba:	2200      	movs	r2, #0
 801c2bc:	217c      	movs	r1, #124	; 0x7c
 801c2be:	f7ff ffe2 	bl	801c286 <dwt_read16bitoffsetreg>
 801c2c2:	bd08      	pop	{r3, pc}

0801c2c4 <ull_readclockoffset>:
 801c2c4:	b508      	push	{r3, lr}
 801c2c6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801c2c8:	7b9b      	ldrb	r3, [r3, #14]
 801c2ca:	2b01      	cmp	r3, #1
 801c2cc:	d00a      	beq.n	801c2e4 <ull_readclockoffset+0x20>
 801c2ce:	2b03      	cmp	r3, #3
 801c2d0:	d10e      	bne.n	801c2f0 <ull_readclockoffset+0x2c>
 801c2d2:	220c      	movs	r2, #12
 801c2d4:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 801c2d8:	f7ff ffd5 	bl	801c286 <dwt_read16bitoffsetreg>
 801c2dc:	b200      	sxth	r0, r0
 801c2de:	f340 000c 	sbfx	r0, r0, #0, #13
 801c2e2:	bd08      	pop	{r3, pc}
 801c2e4:	2200      	movs	r2, #0
 801c2e6:	4905      	ldr	r1, [pc, #20]	; (801c2fc <ull_readclockoffset+0x38>)
 801c2e8:	f7ff ffcd 	bl	801c286 <dwt_read16bitoffsetreg>
 801c2ec:	b200      	sxth	r0, r0
 801c2ee:	e7f6      	b.n	801c2de <ull_readclockoffset+0x1a>
 801c2f0:	2200      	movs	r2, #0
 801c2f2:	4903      	ldr	r1, [pc, #12]	; (801c300 <ull_readclockoffset+0x3c>)
 801c2f4:	f7ff ffc7 	bl	801c286 <dwt_read16bitoffsetreg>
 801c2f8:	b200      	sxth	r0, r0
 801c2fa:	e7f0      	b.n	801c2de <ull_readclockoffset+0x1a>
 801c2fc:	0018000c 	.word	0x0018000c
 801c300:	000c0020 	.word	0x000c0020

0801c304 <dwt_read8bitoffsetreg>:
 801c304:	b500      	push	{lr}
 801c306:	b085      	sub	sp, #20
 801c308:	f10d 030f 	add.w	r3, sp, #15
 801c30c:	9300      	str	r3, [sp, #0]
 801c30e:	2301      	movs	r3, #1
 801c310:	b292      	uxth	r2, r2
 801c312:	f7ff ff98 	bl	801c246 <dwt_readfromdevice>
 801c316:	f89d 000f 	ldrb.w	r0, [sp, #15]
 801c31a:	b005      	add	sp, #20
 801c31c:	f85d fb04 	ldr.w	pc, [sp], #4

0801c320 <ull_readcarrierintegrator>:
 801c320:	b500      	push	{lr}
 801c322:	b085      	sub	sp, #20
 801c324:	ab03      	add	r3, sp, #12
 801c326:	9300      	str	r3, [sp, #0]
 801c328:	2303      	movs	r3, #3
 801c32a:	2200      	movs	r2, #0
 801c32c:	490b      	ldr	r1, [pc, #44]	; (801c35c <ull_readcarrierintegrator+0x3c>)
 801c32e:	f7ff ff8a 	bl	801c246 <dwt_readfromdevice>
 801c332:	f89d 300e 	ldrb.w	r3, [sp, #14]
 801c336:	f89d 000d 	ldrb.w	r0, [sp, #13]
 801c33a:	eb00 2303 	add.w	r3, r0, r3, lsl #8
 801c33e:	f89d 000c 	ldrb.w	r0, [sp, #12]
 801c342:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 801c346:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 801c34a:	bf1c      	itt	ne
 801c34c:	ea6f 3000 	mvnne.w	r0, r0, lsl #12
 801c350:	ea6f 3010 	mvnne.w	r0, r0, lsr #12
 801c354:	b005      	add	sp, #20
 801c356:	f85d fb04 	ldr.w	pc, [sp], #4
 801c35a:	bf00      	nop
 801c35c:	00060029 	.word	0x00060029

0801c360 <ull_readdiagnostics>:
 801c360:	b530      	push	{r4, r5, lr}
 801c362:	b0bd      	sub	sp, #244	; 0xf4
 801c364:	4605      	mov	r5, r0
 801c366:	460c      	mov	r4, r1
 801c368:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801c36a:	7b9a      	ldrb	r2, [r3, #14]
 801c36c:	2a01      	cmp	r2, #1
 801c36e:	d01c      	beq.n	801c3aa <ull_readdiagnostics+0x4a>
 801c370:	2a03      	cmp	r2, #3
 801c372:	f040 81f1 	bne.w	801c758 <ull_readdiagnostics+0x3f8>
 801c376:	7d9b      	ldrb	r3, [r3, #22]
 801c378:	f013 0f08 	tst.w	r3, #8
 801c37c:	d10c      	bne.n	801c398 <ull_readdiagnostics+0x38>
 801c37e:	f013 0f04 	tst.w	r3, #4
 801c382:	ab02      	add	r3, sp, #8
 801c384:	9300      	str	r3, [sp, #0]
 801c386:	bf14      	ite	ne
 801c388:	2338      	movne	r3, #56	; 0x38
 801c38a:	2320      	moveq	r3, #32
 801c38c:	2200      	movs	r2, #0
 801c38e:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 801c392:	f7ff ff58 	bl	801c246 <dwt_readfromdevice>
 801c396:	e019      	b.n	801c3cc <ull_readdiagnostics+0x6c>
 801c398:	ab02      	add	r3, sp, #8
 801c39a:	9300      	str	r3, [sp, #0]
 801c39c:	23e8      	movs	r3, #232	; 0xe8
 801c39e:	2200      	movs	r2, #0
 801c3a0:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 801c3a4:	f7ff ff4f 	bl	801c246 <dwt_readfromdevice>
 801c3a8:	e010      	b.n	801c3cc <ull_readdiagnostics+0x6c>
 801c3aa:	7d9b      	ldrb	r3, [r3, #22]
 801c3ac:	f013 0f08 	tst.w	r3, #8
 801c3b0:	f040 81c9 	bne.w	801c746 <ull_readdiagnostics+0x3e6>
 801c3b4:	f013 0f04 	tst.w	r3, #4
 801c3b8:	ab02      	add	r3, sp, #8
 801c3ba:	9300      	str	r3, [sp, #0]
 801c3bc:	bf14      	ite	ne
 801c3be:	2338      	movne	r3, #56	; 0x38
 801c3c0:	2320      	moveq	r3, #32
 801c3c2:	2200      	movs	r2, #0
 801c3c4:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 801c3c8:	f7ff ff3d 	bl	801c246 <dwt_readfromdevice>
 801c3cc:	f10d 0217 	add.w	r2, sp, #23
 801c3d0:	f104 031a 	add.w	r3, r4, #26
 801c3d4:	f104 0020 	add.w	r0, r4, #32
 801c3d8:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 801c3dc:	f803 1b01 	strb.w	r1, [r3], #1
 801c3e0:	4283      	cmp	r3, r0
 801c3e2:	d1f9      	bne.n	801c3d8 <ull_readdiagnostics+0x78>
 801c3e4:	f89d 2015 	ldrb.w	r2, [sp, #21]
 801c3e8:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801c3ec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801c3f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c3f4:	8463      	strh	r3, [r4, #34]	; 0x22
 801c3f6:	f89d 201f 	ldrb.w	r2, [sp, #31]
 801c3fa:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801c3fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801c402:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801c406:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 801c40a:	bf1c      	itt	ne
 801c40c:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 801c410:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 801c414:	8423      	strh	r3, [r4, #32]
 801c416:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 801c41a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 801c41e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801c422:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801c426:	87e3      	strh	r3, [r4, #62]	; 0x3e
 801c428:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 801c42a:	7d9b      	ldrb	r3, [r3, #22]
 801c42c:	f013 0f02 	tst.w	r3, #2
 801c430:	f040 817e 	bne.w	801c730 <ull_readdiagnostics+0x3d0>
 801c434:	aa0a      	add	r2, sp, #40	; 0x28
 801c436:	1e63      	subs	r3, r4, #1
 801c438:	1d20      	adds	r0, r4, #4
 801c43a:	f812 1b01 	ldrb.w	r1, [r2], #1
 801c43e:	f803 1f01 	strb.w	r1, [r3, #1]!
 801c442:	79d1      	ldrb	r1, [r2, #7]
 801c444:	7219      	strb	r1, [r3, #8]
 801c446:	7bd1      	ldrb	r1, [r2, #15]
 801c448:	7459      	strb	r1, [r3, #17]
 801c44a:	4283      	cmp	r3, r0
 801c44c:	d1f5      	bne.n	801c43a <ull_readdiagnostics+0xda>
 801c44e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 801c452:	7163      	strb	r3, [r4, #5]
 801c454:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 801c458:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 801c45c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801c460:	80e3      	strh	r3, [r4, #6]
 801c462:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 801c466:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 801c46a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801c46e:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 801c472:	f8a4 300d 	strh.w	r3, [r4, #13]
 801c476:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 801c47a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801c47e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801c482:	f8a4 300f 	strh.w	r3, [r4, #15]
 801c486:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 801c48a:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 801c48e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801c492:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 801c496:	82e3      	strh	r3, [r4, #22]
 801c498:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
 801c49c:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 801c4a0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801c4a4:	8323      	strh	r3, [r4, #24]
 801c4a6:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 801c4a8:	7d9b      	ldrb	r3, [r3, #22]
 801c4aa:	f013 0f04 	tst.w	r3, #4
 801c4ae:	f040 813f 	bne.w	801c730 <ull_readdiagnostics+0x3d0>
 801c4b2:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 801c4b6:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 801c4ba:	041b      	lsls	r3, r3, #16
 801c4bc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801c4c0:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 801c4c4:	4313      	orrs	r3, r2
 801c4c6:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 801c4ca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801c4ce:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 801c4d2:	6263      	str	r3, [r4, #36]	; 0x24
 801c4d4:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
 801c4d8:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
 801c4dc:	041b      	lsls	r3, r3, #16
 801c4de:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801c4e2:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 801c4e6:	4313      	orrs	r3, r2
 801c4e8:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
 801c4ec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801c4f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801c4f4:	62a3      	str	r3, [r4, #40]	; 0x28
 801c4f6:	f89d 204b 	ldrb.w	r2, [sp, #75]	; 0x4b
 801c4fa:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 801c4fe:	041b      	lsls	r3, r3, #16
 801c500:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801c504:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 801c508:	4313      	orrs	r3, r2
 801c50a:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 801c50e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801c512:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801c516:	62e3      	str	r3, [r4, #44]	; 0x2c
 801c518:	f89d 204f 	ldrb.w	r2, [sp, #79]	; 0x4f
 801c51c:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
 801c520:	041b      	lsls	r3, r3, #16
 801c522:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801c526:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 801c52a:	4313      	orrs	r3, r2
 801c52c:	f89d 204d 	ldrb.w	r2, [sp, #77]	; 0x4d
 801c530:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801c534:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801c538:	6323      	str	r3, [r4, #48]	; 0x30
 801c53a:	f89d 2053 	ldrb.w	r2, [sp, #83]	; 0x53
 801c53e:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
 801c542:	041b      	lsls	r3, r3, #16
 801c544:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801c548:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 801c54c:	4313      	orrs	r3, r2
 801c54e:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 801c552:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801c556:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801c55a:	6363      	str	r3, [r4, #52]	; 0x34
 801c55c:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
 801c560:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
 801c564:	041b      	lsls	r3, r3, #16
 801c566:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801c56a:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 801c56e:	4313      	orrs	r3, r2
 801c570:	f89d 2055 	ldrb.w	r2, [sp, #85]	; 0x55
 801c574:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801c578:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801c57c:	63a3      	str	r3, [r4, #56]	; 0x38
 801c57e:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 801c582:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 801c586:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801c58a:	87a3      	strh	r3, [r4, #60]	; 0x3c
 801c58c:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 801c590:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 801c594:	041b      	lsls	r3, r3, #16
 801c596:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801c59a:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 801c59e:	4313      	orrs	r3, r2
 801c5a0:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 801c5a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801c5a8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 801c5ac:	6423      	str	r3, [r4, #64]	; 0x40
 801c5ae:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
 801c5b2:	f89d 307a 	ldrb.w	r3, [sp, #122]	; 0x7a
 801c5b6:	041b      	lsls	r3, r3, #16
 801c5b8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801c5bc:	f89d 2078 	ldrb.w	r2, [sp, #120]	; 0x78
 801c5c0:	4313      	orrs	r3, r2
 801c5c2:	f89d 2079 	ldrb.w	r2, [sp, #121]	; 0x79
 801c5c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801c5ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801c5ce:	6463      	str	r3, [r4, #68]	; 0x44
 801c5d0:	f89d 207f 	ldrb.w	r2, [sp, #127]	; 0x7f
 801c5d4:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
 801c5d8:	041b      	lsls	r3, r3, #16
 801c5da:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801c5de:	f89d 207c 	ldrb.w	r2, [sp, #124]	; 0x7c
 801c5e2:	4313      	orrs	r3, r2
 801c5e4:	f89d 207d 	ldrb.w	r2, [sp, #125]	; 0x7d
 801c5e8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801c5ec:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801c5f0:	64a3      	str	r3, [r4, #72]	; 0x48
 801c5f2:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
 801c5f6:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
 801c5fa:	041b      	lsls	r3, r3, #16
 801c5fc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801c600:	f89d 2080 	ldrb.w	r2, [sp, #128]	; 0x80
 801c604:	4313      	orrs	r3, r2
 801c606:	f89d 2081 	ldrb.w	r2, [sp, #129]	; 0x81
 801c60a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801c60e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801c612:	64e3      	str	r3, [r4, #76]	; 0x4c
 801c614:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
 801c618:	f89d 3086 	ldrb.w	r3, [sp, #134]	; 0x86
 801c61c:	041b      	lsls	r3, r3, #16
 801c61e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801c622:	f89d 2084 	ldrb.w	r2, [sp, #132]	; 0x84
 801c626:	4313      	orrs	r3, r2
 801c628:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 801c62c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801c630:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801c634:	6523      	str	r3, [r4, #80]	; 0x50
 801c636:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 801c63a:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 801c63e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801c642:	f3c3 030e 	ubfx	r3, r3, #0, #15
 801c646:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 801c64a:	f89d 20a5 	ldrb.w	r2, [sp, #165]	; 0xa5
 801c64e:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 801c652:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801c656:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801c65a:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 801c65e:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 801c662:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 801c666:	041b      	lsls	r3, r3, #16
 801c668:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801c66c:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 801c670:	4313      	orrs	r3, r2
 801c672:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 801c676:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801c67a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 801c67e:	65a3      	str	r3, [r4, #88]	; 0x58
 801c680:	f89d 20c3 	ldrb.w	r2, [sp, #195]	; 0xc3
 801c684:	f89d 30c2 	ldrb.w	r3, [sp, #194]	; 0xc2
 801c688:	041b      	lsls	r3, r3, #16
 801c68a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801c68e:	f89d 20c0 	ldrb.w	r2, [sp, #192]	; 0xc0
 801c692:	4313      	orrs	r3, r2
 801c694:	f89d 20c1 	ldrb.w	r2, [sp, #193]	; 0xc1
 801c698:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801c69c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801c6a0:	65e3      	str	r3, [r4, #92]	; 0x5c
 801c6a2:	f89d 20c7 	ldrb.w	r2, [sp, #199]	; 0xc7
 801c6a6:	f89d 30c6 	ldrb.w	r3, [sp, #198]	; 0xc6
 801c6aa:	041b      	lsls	r3, r3, #16
 801c6ac:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801c6b0:	f89d 20c4 	ldrb.w	r2, [sp, #196]	; 0xc4
 801c6b4:	4313      	orrs	r3, r2
 801c6b6:	f89d 20c5 	ldrb.w	r2, [sp, #197]	; 0xc5
 801c6ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801c6be:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801c6c2:	6623      	str	r3, [r4, #96]	; 0x60
 801c6c4:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
 801c6c8:	f89d 30ca 	ldrb.w	r3, [sp, #202]	; 0xca
 801c6cc:	041b      	lsls	r3, r3, #16
 801c6ce:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801c6d2:	f89d 20c8 	ldrb.w	r2, [sp, #200]	; 0xc8
 801c6d6:	4313      	orrs	r3, r2
 801c6d8:	f89d 20c9 	ldrb.w	r2, [sp, #201]	; 0xc9
 801c6dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801c6e0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801c6e4:	6663      	str	r3, [r4, #100]	; 0x64
 801c6e6:	f89d 20cf 	ldrb.w	r2, [sp, #207]	; 0xcf
 801c6ea:	f89d 30ce 	ldrb.w	r3, [sp, #206]	; 0xce
 801c6ee:	041b      	lsls	r3, r3, #16
 801c6f0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801c6f4:	f89d 20cc 	ldrb.w	r2, [sp, #204]	; 0xcc
 801c6f8:	4313      	orrs	r3, r2
 801c6fa:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 801c6fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801c702:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801c706:	66a3      	str	r3, [r4, #104]	; 0x68
 801c708:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 801c70c:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 801c710:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801c714:	f3c3 030e 	ubfx	r3, r3, #0, #15
 801c718:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 801c71c:	f89d 20ed 	ldrb.w	r2, [sp, #237]	; 0xed
 801c720:	f89d 30ec 	ldrb.w	r3, [sp, #236]	; 0xec
 801c724:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801c728:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801c72c:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 801c730:	f994 301b 	ldrsb.w	r3, [r4, #27]
 801c734:	2b00      	cmp	r3, #0
 801c736:	f2c0 81d0 	blt.w	801cada <ull_readdiagnostics+0x77a>
 801c73a:	7fe3      	ldrb	r3, [r4, #31]
 801c73c:	f003 0301 	and.w	r3, r3, #1
 801c740:	77e3      	strb	r3, [r4, #31]
 801c742:	b03d      	add	sp, #244	; 0xf4
 801c744:	bd30      	pop	{r4, r5, pc}
 801c746:	ab02      	add	r3, sp, #8
 801c748:	9300      	str	r3, [sp, #0]
 801c74a:	23e8      	movs	r3, #232	; 0xe8
 801c74c:	2200      	movs	r2, #0
 801c74e:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 801c752:	f7ff fd78 	bl	801c246 <dwt_readfromdevice>
 801c756:	e639      	b.n	801c3cc <ull_readdiagnostics+0x6c>
 801c758:	7d9b      	ldrb	r3, [r3, #22]
 801c75a:	f013 0f01 	tst.w	r3, #1
 801c75e:	f000 81b3 	beq.w	801cac8 <ull_readdiagnostics+0x768>
 801c762:	ab02      	add	r3, sp, #8
 801c764:	9300      	str	r3, [sp, #0]
 801c766:	236c      	movs	r3, #108	; 0x6c
 801c768:	2200      	movs	r2, #0
 801c76a:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 801c76e:	f7ff fd6a 	bl	801c246 <dwt_readfromdevice>
 801c772:	ab1d      	add	r3, sp, #116	; 0x74
 801c774:	9300      	str	r3, [sp, #0]
 801c776:	236c      	movs	r3, #108	; 0x6c
 801c778:	2200      	movs	r2, #0
 801c77a:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 801c77e:	4628      	mov	r0, r5
 801c780:	f7ff fd61 	bl	801c246 <dwt_readfromdevice>
 801c784:	aa02      	add	r2, sp, #8
 801c786:	1e63      	subs	r3, r4, #1
 801c788:	1d20      	adds	r0, r4, #4
 801c78a:	f812 1b01 	ldrb.w	r1, [r2], #1
 801c78e:	f803 1f01 	strb.w	r1, [r3, #1]!
 801c792:	79d1      	ldrb	r1, [r2, #7]
 801c794:	7219      	strb	r1, [r3, #8]
 801c796:	7bd1      	ldrb	r1, [r2, #15]
 801c798:	7459      	strb	r1, [r3, #17]
 801c79a:	7dd1      	ldrb	r1, [r2, #23]
 801c79c:	7699      	strb	r1, [r3, #26]
 801c79e:	4283      	cmp	r3, r0
 801c7a0:	d1f3      	bne.n	801c78a <ull_readdiagnostics+0x42a>
 801c7a2:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 801c7a6:	77e3      	strb	r3, [r4, #31]
 801c7a8:	f89d 300f 	ldrb.w	r3, [sp, #15]
 801c7ac:	7163      	strb	r3, [r4, #5]
 801c7ae:	f89d 200e 	ldrb.w	r2, [sp, #14]
 801c7b2:	f89d 300d 	ldrb.w	r3, [sp, #13]
 801c7b6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801c7ba:	80e3      	strh	r3, [r4, #6]
 801c7bc:	f89d 3016 	ldrb.w	r3, [sp, #22]
 801c7c0:	f89d 2017 	ldrb.w	r2, [sp, #23]
 801c7c4:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 801c7c8:	f3c2 12cf 	ubfx	r2, r2, #7, #16
 801c7cc:	f8a4 200d 	strh.w	r2, [r4, #13]
 801c7d0:	f89d 2015 	ldrb.w	r2, [sp, #21]
 801c7d4:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 801c7d8:	f8a4 200f 	strh.w	r2, [r4, #15]
 801c7dc:	f89d 201f 	ldrb.w	r2, [sp, #31]
 801c7e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801c7e4:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 801c7e8:	82e3      	strh	r3, [r4, #22]
 801c7ea:	f89d 201e 	ldrb.w	r2, [sp, #30]
 801c7ee:	f89d 301d 	ldrb.w	r3, [sp, #29]
 801c7f2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801c7f6:	8323      	strh	r3, [r4, #24]
 801c7f8:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 801c7fc:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 801c800:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801c804:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801c808:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 801c80c:	bf1c      	itt	ne
 801c80e:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 801c812:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 801c816:	8423      	strh	r3, [r4, #32]
 801c818:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 801c81c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 801c820:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801c824:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c828:	8463      	strh	r3, [r4, #34]	; 0x22
 801c82a:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 801c82e:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 801c832:	041b      	lsls	r3, r3, #16
 801c834:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801c838:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 801c83c:	4313      	orrs	r3, r2
 801c83e:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 801c842:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801c846:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 801c84a:	6263      	str	r3, [r4, #36]	; 0x24
 801c84c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 801c84e:	7d9b      	ldrb	r3, [r3, #22]
 801c850:	f013 0f01 	tst.w	r3, #1
 801c854:	f43f af6c 	beq.w	801c730 <ull_readdiagnostics+0x3d0>
 801c858:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 801c85c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 801c860:	041b      	lsls	r3, r3, #16
 801c862:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801c866:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 801c86a:	4313      	orrs	r3, r2
 801c86c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 801c870:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801c874:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801c878:	62a3      	str	r3, [r4, #40]	; 0x28
 801c87a:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 801c87e:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 801c882:	041b      	lsls	r3, r3, #16
 801c884:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801c888:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 801c88c:	4313      	orrs	r3, r2
 801c88e:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 801c892:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801c896:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801c89a:	62e3      	str	r3, [r4, #44]	; 0x2c
 801c89c:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 801c8a0:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 801c8a4:	041b      	lsls	r3, r3, #16
 801c8a6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801c8aa:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 801c8ae:	4313      	orrs	r3, r2
 801c8b0:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 801c8b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801c8b8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801c8bc:	6323      	str	r3, [r4, #48]	; 0x30
 801c8be:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 801c8c2:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 801c8c6:	041b      	lsls	r3, r3, #16
 801c8c8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801c8cc:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 801c8d0:	4313      	orrs	r3, r2
 801c8d2:	f89d 203d 	ldrb.w	r2, [sp, #61]	; 0x3d
 801c8d6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801c8da:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801c8de:	6363      	str	r3, [r4, #52]	; 0x34
 801c8e0:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 801c8e4:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 801c8e8:	041b      	lsls	r3, r3, #16
 801c8ea:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801c8ee:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 801c8f2:	4313      	orrs	r3, r2
 801c8f4:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 801c8f8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801c8fc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801c900:	63a3      	str	r3, [r4, #56]	; 0x38
 801c902:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 801c906:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801c90a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801c90e:	87a3      	strh	r3, [r4, #60]	; 0x3c
 801c910:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
 801c914:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 801c918:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801c91c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801c920:	87e3      	strh	r3, [r4, #62]	; 0x3e
 801c922:	f89d 2067 	ldrb.w	r2, [sp, #103]	; 0x67
 801c926:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
 801c92a:	041b      	lsls	r3, r3, #16
 801c92c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801c930:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801c934:	4313      	orrs	r3, r2
 801c936:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 801c93a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801c93e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 801c942:	6423      	str	r3, [r4, #64]	; 0x40
 801c944:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
 801c948:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
 801c94c:	041b      	lsls	r3, r3, #16
 801c94e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801c952:	f89d 2068 	ldrb.w	r2, [sp, #104]	; 0x68
 801c956:	4313      	orrs	r3, r2
 801c958:	f89d 2069 	ldrb.w	r2, [sp, #105]	; 0x69
 801c95c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801c960:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801c964:	6463      	str	r3, [r4, #68]	; 0x44
 801c966:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
 801c96a:	f89d 306e 	ldrb.w	r3, [sp, #110]	; 0x6e
 801c96e:	041b      	lsls	r3, r3, #16
 801c970:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801c974:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801c978:	4313      	orrs	r3, r2
 801c97a:	f89d 206d 	ldrb.w	r2, [sp, #109]	; 0x6d
 801c97e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801c982:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801c986:	64a3      	str	r3, [r4, #72]	; 0x48
 801c988:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
 801c98c:	f89d 3072 	ldrb.w	r3, [sp, #114]	; 0x72
 801c990:	041b      	lsls	r3, r3, #16
 801c992:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801c996:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
 801c99a:	4313      	orrs	r3, r2
 801c99c:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
 801c9a0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801c9a4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801c9a8:	64e3      	str	r3, [r4, #76]	; 0x4c
 801c9aa:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 801c9ae:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 801c9b2:	041b      	lsls	r3, r3, #16
 801c9b4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801c9b8:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 801c9bc:	4313      	orrs	r3, r2
 801c9be:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 801c9c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801c9c6:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801c9ca:	6523      	str	r3, [r4, #80]	; 0x50
 801c9cc:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 801c9d0:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 801c9d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801c9d8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 801c9dc:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 801c9e0:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 801c9e4:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 801c9e8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801c9ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801c9f0:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 801c9f4:	f89d 20af 	ldrb.w	r2, [sp, #175]	; 0xaf
 801c9f8:	f89d 30ae 	ldrb.w	r3, [sp, #174]	; 0xae
 801c9fc:	041b      	lsls	r3, r3, #16
 801c9fe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801ca02:	f89d 20ac 	ldrb.w	r2, [sp, #172]	; 0xac
 801ca06:	4313      	orrs	r3, r2
 801ca08:	f89d 20ad 	ldrb.w	r2, [sp, #173]	; 0xad
 801ca0c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801ca10:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 801ca14:	65a3      	str	r3, [r4, #88]	; 0x58
 801ca16:	f89d 20b3 	ldrb.w	r2, [sp, #179]	; 0xb3
 801ca1a:	f89d 30b2 	ldrb.w	r3, [sp, #178]	; 0xb2
 801ca1e:	041b      	lsls	r3, r3, #16
 801ca20:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801ca24:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
 801ca28:	4313      	orrs	r3, r2
 801ca2a:	f89d 20b1 	ldrb.w	r2, [sp, #177]	; 0xb1
 801ca2e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801ca32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ca36:	65e3      	str	r3, [r4, #92]	; 0x5c
 801ca38:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
 801ca3c:	f89d 30b6 	ldrb.w	r3, [sp, #182]	; 0xb6
 801ca40:	041b      	lsls	r3, r3, #16
 801ca42:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801ca46:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 801ca4a:	4313      	orrs	r3, r2
 801ca4c:	f89d 20b5 	ldrb.w	r2, [sp, #181]	; 0xb5
 801ca50:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801ca54:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801ca58:	6623      	str	r3, [r4, #96]	; 0x60
 801ca5a:	f89d 20bb 	ldrb.w	r2, [sp, #187]	; 0xbb
 801ca5e:	f89d 30ba 	ldrb.w	r3, [sp, #186]	; 0xba
 801ca62:	041b      	lsls	r3, r3, #16
 801ca64:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801ca68:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 801ca6c:	4313      	orrs	r3, r2
 801ca6e:	f89d 20b9 	ldrb.w	r2, [sp, #185]	; 0xb9
 801ca72:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801ca76:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801ca7a:	6663      	str	r3, [r4, #100]	; 0x64
 801ca7c:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 801ca80:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 801ca84:	041b      	lsls	r3, r3, #16
 801ca86:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801ca8a:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 801ca8e:	4313      	orrs	r3, r2
 801ca90:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 801ca94:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801ca98:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801ca9c:	66a3      	str	r3, [r4, #104]	; 0x68
 801ca9e:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 801caa2:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 801caa6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801caaa:	f3c3 030e 	ubfx	r3, r3, #0, #15
 801caae:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 801cab2:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 801cab6:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 801caba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801cabe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801cac2:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 801cac6:	e633      	b.n	801c730 <ull_readdiagnostics+0x3d0>
 801cac8:	ab02      	add	r3, sp, #8
 801caca:	9300      	str	r3, [sp, #0]
 801cacc:	2328      	movs	r3, #40	; 0x28
 801cace:	2200      	movs	r2, #0
 801cad0:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 801cad4:	f7ff fbb7 	bl	801c246 <dwt_readfromdevice>
 801cad8:	e654      	b.n	801c784 <ull_readdiagnostics+0x424>
 801cada:	23ff      	movs	r3, #255	; 0xff
 801cadc:	7723      	strb	r3, [r4, #28]
 801cade:	7763      	strb	r3, [r4, #29]
 801cae0:	77a3      	strb	r3, [r4, #30]
 801cae2:	77e3      	strb	r3, [r4, #31]
 801cae4:	e629      	b.n	801c73a <ull_readdiagnostics+0x3da>
	...

0801cae8 <ull_readrxtimestamp>:
 801cae8:	b500      	push	{lr}
 801caea:	b083      	sub	sp, #12
 801caec:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801caee:	7b9b      	ldrb	r3, [r3, #14]
 801caf0:	2b01      	cmp	r3, #1
 801caf2:	d00b      	beq.n	801cb0c <ull_readrxtimestamp+0x24>
 801caf4:	2b03      	cmp	r3, #3
 801caf6:	d110      	bne.n	801cb1a <ull_readrxtimestamp+0x32>
 801caf8:	9100      	str	r1, [sp, #0]
 801cafa:	2305      	movs	r3, #5
 801cafc:	2204      	movs	r2, #4
 801cafe:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 801cb02:	f7ff fba0 	bl	801c246 <dwt_readfromdevice>
 801cb06:	b003      	add	sp, #12
 801cb08:	f85d fb04 	ldr.w	pc, [sp], #4
 801cb0c:	9100      	str	r1, [sp, #0]
 801cb0e:	2305      	movs	r3, #5
 801cb10:	2200      	movs	r2, #0
 801cb12:	4905      	ldr	r1, [pc, #20]	; (801cb28 <ull_readrxtimestamp+0x40>)
 801cb14:	f7ff fb97 	bl	801c246 <dwt_readfromdevice>
 801cb18:	e7f5      	b.n	801cb06 <ull_readrxtimestamp+0x1e>
 801cb1a:	9100      	str	r1, [sp, #0]
 801cb1c:	2305      	movs	r3, #5
 801cb1e:	2200      	movs	r2, #0
 801cb20:	2160      	movs	r1, #96	; 0x60
 801cb22:	f7ff fb90 	bl	801c246 <dwt_readfromdevice>
 801cb26:	e7ee      	b.n	801cb06 <ull_readrxtimestamp+0x1e>
 801cb28:	00180004 	.word	0x00180004

0801cb2c <dwt_writetodevice>:
 801cb2c:	b510      	push	{r4, lr}
 801cb2e:	b082      	sub	sp, #8
 801cb30:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 801cb34:	9401      	str	r4, [sp, #4]
 801cb36:	9c04      	ldr	r4, [sp, #16]
 801cb38:	9400      	str	r4, [sp, #0]
 801cb3a:	f7ff fb06 	bl	801c14a <dwt_xfer3xxx>
 801cb3e:	b002      	add	sp, #8
 801cb40:	bd10      	pop	{r4, pc}

0801cb42 <dwt_write16bitoffsetreg>:
 801cb42:	b500      	push	{lr}
 801cb44:	b085      	sub	sp, #20
 801cb46:	f88d 300c 	strb.w	r3, [sp, #12]
 801cb4a:	0a1b      	lsrs	r3, r3, #8
 801cb4c:	f88d 300d 	strb.w	r3, [sp, #13]
 801cb50:	ab03      	add	r3, sp, #12
 801cb52:	9300      	str	r3, [sp, #0]
 801cb54:	2302      	movs	r3, #2
 801cb56:	b292      	uxth	r2, r2
 801cb58:	f7ff ffe8 	bl	801cb2c <dwt_writetodevice>
 801cb5c:	b005      	add	sp, #20
 801cb5e:	f85d fb04 	ldr.w	pc, [sp], #4

0801cb62 <ull_setrxantennadelay>:
 801cb62:	b508      	push	{r3, lr}
 801cb64:	460b      	mov	r3, r1
 801cb66:	2200      	movs	r2, #0
 801cb68:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 801cb6c:	f7ff ffe9 	bl	801cb42 <dwt_write16bitoffsetreg>
 801cb70:	bd08      	pop	{r3, pc}

0801cb72 <ull_settxantennadelay>:
 801cb72:	b508      	push	{r3, lr}
 801cb74:	460b      	mov	r3, r1
 801cb76:	2200      	movs	r2, #0
 801cb78:	217c      	movs	r1, #124	; 0x7c
 801cb7a:	f7ff ffe2 	bl	801cb42 <dwt_write16bitoffsetreg>
 801cb7e:	bd08      	pop	{r3, pc}

0801cb80 <ull_force_clocks>:
 801cb80:	b508      	push	{r3, lr}
 801cb82:	2901      	cmp	r1, #1
 801cb84:	d002      	beq.n	801cb8c <ull_force_clocks+0xc>
 801cb86:	2905      	cmp	r1, #5
 801cb88:	d007      	beq.n	801cb9a <ull_force_clocks+0x1a>
 801cb8a:	bd08      	pop	{r3, pc}
 801cb8c:	f641 0322 	movw	r3, #6178	; 0x1822
 801cb90:	2200      	movs	r2, #0
 801cb92:	4905      	ldr	r1, [pc, #20]	; (801cba8 <ull_force_clocks+0x28>)
 801cb94:	f7ff ffd5 	bl	801cb42 <dwt_write16bitoffsetreg>
 801cb98:	e7f7      	b.n	801cb8a <ull_force_clocks+0xa>
 801cb9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801cb9e:	2200      	movs	r2, #0
 801cba0:	4901      	ldr	r1, [pc, #4]	; (801cba8 <ull_force_clocks+0x28>)
 801cba2:	f7ff ffce 	bl	801cb42 <dwt_write16bitoffsetreg>
 801cba6:	e7f0      	b.n	801cb8a <ull_force_clocks+0xa>
 801cba8:	00110004 	.word	0x00110004

0801cbac <__dwt_otp_write_wdata_id_reg>:
 801cbac:	b538      	push	{r3, r4, r5, lr}
 801cbae:	4605      	mov	r5, r0
 801cbb0:	460c      	mov	r4, r1
 801cbb2:	f441 7300 	orr.w	r3, r1, #512	; 0x200
 801cbb6:	b29b      	uxth	r3, r3
 801cbb8:	2200      	movs	r2, #0
 801cbba:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 801cbbe:	f7ff ffc0 	bl	801cb42 <dwt_write16bitoffsetreg>
 801cbc2:	b2a3      	uxth	r3, r4
 801cbc4:	2200      	movs	r2, #0
 801cbc6:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 801cbca:	4628      	mov	r0, r5
 801cbcc:	f7ff ffb9 	bl	801cb42 <dwt_write16bitoffsetreg>
 801cbd0:	bd38      	pop	{r3, r4, r5, pc}
	...

0801cbd4 <_dwt_otpread>:
 801cbd4:	b570      	push	{r4, r5, r6, lr}
 801cbd6:	4604      	mov	r4, r0
 801cbd8:	460e      	mov	r6, r1
 801cbda:	4d0c      	ldr	r5, [pc, #48]	; (801cc0c <_dwt_otpread+0x38>)
 801cbdc:	2301      	movs	r3, #1
 801cbde:	2200      	movs	r2, #0
 801cbe0:	4629      	mov	r1, r5
 801cbe2:	f7ff ffae 	bl	801cb42 <dwt_write16bitoffsetreg>
 801cbe6:	4633      	mov	r3, r6
 801cbe8:	2200      	movs	r2, #0
 801cbea:	4909      	ldr	r1, [pc, #36]	; (801cc10 <_dwt_otpread+0x3c>)
 801cbec:	4620      	mov	r0, r4
 801cbee:	f7ff ffa8 	bl	801cb42 <dwt_write16bitoffsetreg>
 801cbf2:	2302      	movs	r3, #2
 801cbf4:	2200      	movs	r2, #0
 801cbf6:	4629      	mov	r1, r5
 801cbf8:	4620      	mov	r0, r4
 801cbfa:	f7ff ffa2 	bl	801cb42 <dwt_write16bitoffsetreg>
 801cbfe:	2200      	movs	r2, #0
 801cc00:	4904      	ldr	r1, [pc, #16]	; (801cc14 <_dwt_otpread+0x40>)
 801cc02:	4620      	mov	r0, r4
 801cc04:	f7ff fb29 	bl	801c25a <dwt_read32bitoffsetreg>
 801cc08:	bd70      	pop	{r4, r5, r6, pc}
 801cc0a:	bf00      	nop
 801cc0c:	000b0008 	.word	0x000b0008
 801cc10:	000b0004 	.word	0x000b0004
 801cc14:	000b0010 	.word	0x000b0010

0801cc18 <dwt_write32bitoffsetreg>:
 801cc18:	b510      	push	{r4, lr}
 801cc1a:	b084      	sub	sp, #16
 801cc1c:	f88d 300c 	strb.w	r3, [sp, #12]
 801cc20:	0a1c      	lsrs	r4, r3, #8
 801cc22:	f88d 400d 	strb.w	r4, [sp, #13]
 801cc26:	0c1c      	lsrs	r4, r3, #16
 801cc28:	f88d 400e 	strb.w	r4, [sp, #14]
 801cc2c:	0e1b      	lsrs	r3, r3, #24
 801cc2e:	f88d 300f 	strb.w	r3, [sp, #15]
 801cc32:	ab03      	add	r3, sp, #12
 801cc34:	9300      	str	r3, [sp, #0]
 801cc36:	2304      	movs	r3, #4
 801cc38:	b292      	uxth	r2, r2
 801cc3a:	f7ff ff77 	bl	801cb2c <dwt_writetodevice>
 801cc3e:	b004      	add	sp, #16
 801cc40:	bd10      	pop	{r4, pc}

0801cc42 <_dwt_adjust_delaytime>:
 801cc42:	b538      	push	{r3, r4, r5, lr}
 801cc44:	4604      	mov	r4, r0
 801cc46:	b989      	cbnz	r1, 801cc6c <_dwt_adjust_delaytime+0x2a>
 801cc48:	2200      	movs	r2, #0
 801cc4a:	2128      	movs	r1, #40	; 0x28
 801cc4c:	f7ff fb05 	bl	801c25a <dwt_read32bitoffsetreg>
 801cc50:	4605      	mov	r5, r0
 801cc52:	2201      	movs	r2, #1
 801cc54:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 801cc58:	4620      	mov	r0, r4
 801cc5a:	f7ff fb53 	bl	801c304 <dwt_read8bitoffsetreg>
 801cc5e:	1a2b      	subs	r3, r5, r0
 801cc60:	2200      	movs	r2, #0
 801cc62:	2128      	movs	r1, #40	; 0x28
 801cc64:	4620      	mov	r0, r4
 801cc66:	f7ff ffd7 	bl	801cc18 <dwt_write32bitoffsetreg>
 801cc6a:	bd38      	pop	{r3, r4, r5, pc}
 801cc6c:	2200      	movs	r2, #0
 801cc6e:	2128      	movs	r1, #40	; 0x28
 801cc70:	f7ff faf3 	bl	801c25a <dwt_read32bitoffsetreg>
 801cc74:	4605      	mov	r5, r0
 801cc76:	2201      	movs	r2, #1
 801cc78:	217c      	movs	r1, #124	; 0x7c
 801cc7a:	4620      	mov	r0, r4
 801cc7c:	f7ff fb42 	bl	801c304 <dwt_read8bitoffsetreg>
 801cc80:	1a2b      	subs	r3, r5, r0
 801cc82:	2200      	movs	r2, #0
 801cc84:	2128      	movs	r1, #40	; 0x28
 801cc86:	4620      	mov	r0, r4
 801cc88:	f7ff ffc6 	bl	801cc18 <dwt_write32bitoffsetreg>
 801cc8c:	e7ed      	b.n	801cc6a <_dwt_adjust_delaytime+0x28>

0801cc8e <ull_setrxaftertxdelay>:
 801cc8e:	b538      	push	{r3, r4, r5, lr}
 801cc90:	4605      	mov	r5, r0
 801cc92:	460c      	mov	r4, r1
 801cc94:	2200      	movs	r2, #0
 801cc96:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 801cc9a:	f7ff fade 	bl	801c25a <dwt_read32bitoffsetreg>
 801cc9e:	0d00      	lsrs	r0, r0, #20
 801cca0:	0500      	lsls	r0, r0, #20
 801cca2:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801cca6:	4303      	orrs	r3, r0
 801cca8:	2200      	movs	r2, #0
 801ccaa:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 801ccae:	4628      	mov	r0, r5
 801ccb0:	f7ff ffb2 	bl	801cc18 <dwt_write32bitoffsetreg>
 801ccb4:	bd38      	pop	{r3, r4, r5, pc}
	...

0801ccb8 <ull_setfinegraintxseq>:
 801ccb8:	b508      	push	{r3, lr}
 801ccba:	b929      	cbnz	r1, 801ccc8 <ull_setfinegraintxseq+0x10>
 801ccbc:	4b05      	ldr	r3, [pc, #20]	; (801ccd4 <ull_setfinegraintxseq+0x1c>)
 801ccbe:	2202      	movs	r2, #2
 801ccc0:	4905      	ldr	r1, [pc, #20]	; (801ccd8 <ull_setfinegraintxseq+0x20>)
 801ccc2:	f7ff ffa9 	bl	801cc18 <dwt_write32bitoffsetreg>
 801ccc6:	bd08      	pop	{r3, pc}
 801ccc8:	4b04      	ldr	r3, [pc, #16]	; (801ccdc <ull_setfinegraintxseq+0x24>)
 801ccca:	2202      	movs	r2, #2
 801cccc:	4902      	ldr	r1, [pc, #8]	; (801ccd8 <ull_setfinegraintxseq+0x20>)
 801ccce:	f7ff ffa3 	bl	801cc18 <dwt_write32bitoffsetreg>
 801ccd2:	e7f8      	b.n	801ccc6 <ull_setfinegraintxseq+0xe>
 801ccd4:	00d20874 	.word	0x00d20874
 801ccd8:	00110010 	.word	0x00110010
 801ccdc:	04d28874 	.word	0x04d28874

0801cce0 <ull_setlnapamode>:
 801cce0:	b538      	push	{r3, r4, r5, lr}
 801cce2:	4605      	mov	r5, r0
 801cce4:	460c      	mov	r4, r1
 801cce6:	2200      	movs	r2, #0
 801cce8:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801ccec:	f7ff fab5 	bl	801c25a <dwt_read32bitoffsetreg>
 801ccf0:	f420 337c 	bic.w	r3, r0, #258048	; 0x3f000
 801ccf4:	f014 0f01 	tst.w	r4, #1
 801ccf8:	bf18      	it	ne
 801ccfa:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
 801ccfe:	f014 0f02 	tst.w	r4, #2
 801cd02:	bf18      	it	ne
 801cd04:	f443 5300 	orrne.w	r3, r3, #8192	; 0x2000
 801cd08:	f014 0f04 	tst.w	r4, #4
 801cd0c:	bf18      	it	ne
 801cd0e:	f443 3390 	orrne.w	r3, r3, #73728	; 0x12000
 801cd12:	2200      	movs	r2, #0
 801cd14:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801cd18:	4628      	mov	r0, r5
 801cd1a:	f7ff ff7d 	bl	801cc18 <dwt_write32bitoffsetreg>
 801cd1e:	bd38      	pop	{r3, r4, r5, pc}

0801cd20 <ull_configurestskey>:
 801cd20:	b538      	push	{r3, r4, r5, lr}
 801cd22:	4605      	mov	r5, r0
 801cd24:	460c      	mov	r4, r1
 801cd26:	680b      	ldr	r3, [r1, #0]
 801cd28:	2200      	movs	r2, #0
 801cd2a:	490b      	ldr	r1, [pc, #44]	; (801cd58 <ull_configurestskey+0x38>)
 801cd2c:	f7ff ff74 	bl	801cc18 <dwt_write32bitoffsetreg>
 801cd30:	6863      	ldr	r3, [r4, #4]
 801cd32:	2200      	movs	r2, #0
 801cd34:	4909      	ldr	r1, [pc, #36]	; (801cd5c <ull_configurestskey+0x3c>)
 801cd36:	4628      	mov	r0, r5
 801cd38:	f7ff ff6e 	bl	801cc18 <dwt_write32bitoffsetreg>
 801cd3c:	68a3      	ldr	r3, [r4, #8]
 801cd3e:	2200      	movs	r2, #0
 801cd40:	4907      	ldr	r1, [pc, #28]	; (801cd60 <ull_configurestskey+0x40>)
 801cd42:	4628      	mov	r0, r5
 801cd44:	f7ff ff68 	bl	801cc18 <dwt_write32bitoffsetreg>
 801cd48:	68e3      	ldr	r3, [r4, #12]
 801cd4a:	2200      	movs	r2, #0
 801cd4c:	4905      	ldr	r1, [pc, #20]	; (801cd64 <ull_configurestskey+0x44>)
 801cd4e:	4628      	mov	r0, r5
 801cd50:	f7ff ff62 	bl	801cc18 <dwt_write32bitoffsetreg>
 801cd54:	bd38      	pop	{r3, r4, r5, pc}
 801cd56:	bf00      	nop
 801cd58:	0002000c 	.word	0x0002000c
 801cd5c:	00020010 	.word	0x00020010
 801cd60:	00020014 	.word	0x00020014
 801cd64:	00020018 	.word	0x00020018

0801cd68 <ull_configurestsiv>:
 801cd68:	b538      	push	{r3, r4, r5, lr}
 801cd6a:	4605      	mov	r5, r0
 801cd6c:	460c      	mov	r4, r1
 801cd6e:	680b      	ldr	r3, [r1, #0]
 801cd70:	2200      	movs	r2, #0
 801cd72:	490b      	ldr	r1, [pc, #44]	; (801cda0 <ull_configurestsiv+0x38>)
 801cd74:	f7ff ff50 	bl	801cc18 <dwt_write32bitoffsetreg>
 801cd78:	6863      	ldr	r3, [r4, #4]
 801cd7a:	2200      	movs	r2, #0
 801cd7c:	4909      	ldr	r1, [pc, #36]	; (801cda4 <ull_configurestsiv+0x3c>)
 801cd7e:	4628      	mov	r0, r5
 801cd80:	f7ff ff4a 	bl	801cc18 <dwt_write32bitoffsetreg>
 801cd84:	68a3      	ldr	r3, [r4, #8]
 801cd86:	2200      	movs	r2, #0
 801cd88:	4907      	ldr	r1, [pc, #28]	; (801cda8 <ull_configurestsiv+0x40>)
 801cd8a:	4628      	mov	r0, r5
 801cd8c:	f7ff ff44 	bl	801cc18 <dwt_write32bitoffsetreg>
 801cd90:	68e3      	ldr	r3, [r4, #12]
 801cd92:	2200      	movs	r2, #0
 801cd94:	4905      	ldr	r1, [pc, #20]	; (801cdac <ull_configurestsiv+0x44>)
 801cd96:	4628      	mov	r0, r5
 801cd98:	f7ff ff3e 	bl	801cc18 <dwt_write32bitoffsetreg>
 801cd9c:	bd38      	pop	{r3, r4, r5, pc}
 801cd9e:	bf00      	nop
 801cda0:	0002001c 	.word	0x0002001c
 801cda4:	00020020 	.word	0x00020020
 801cda8:	00020024 	.word	0x00020024
 801cdac:	00020028 	.word	0x00020028

0801cdb0 <ull_configmrxlut>:
 801cdb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cdb4:	4604      	mov	r4, r0
 801cdb6:	4d35      	ldr	r5, [pc, #212]	; (801ce8c <ull_configmrxlut+0xdc>)
 801cdb8:	4b35      	ldr	r3, [pc, #212]	; (801ce90 <ull_configmrxlut+0xe0>)
 801cdba:	2905      	cmp	r1, #5
 801cdbc:	bf18      	it	ne
 801cdbe:	461d      	movne	r5, r3
 801cdc0:	4e34      	ldr	r6, [pc, #208]	; (801ce94 <ull_configmrxlut+0xe4>)
 801cdc2:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 801cdc6:	2905      	cmp	r1, #5
 801cdc8:	bf18      	it	ne
 801cdca:	461e      	movne	r6, r3
 801cdcc:	4f32      	ldr	r7, [pc, #200]	; (801ce98 <ull_configmrxlut+0xe8>)
 801cdce:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 801cdd2:	2905      	cmp	r1, #5
 801cdd4:	bf18      	it	ne
 801cdd6:	461f      	movne	r7, r3
 801cdd8:	4a30      	ldr	r2, [pc, #192]	; (801ce9c <ull_configmrxlut+0xec>)
 801cdda:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 801cdde:	2905      	cmp	r1, #5
 801cde0:	bf0c      	ite	eq
 801cde2:	4690      	moveq	r8, r2
 801cde4:	4698      	movne	r8, r3
 801cde6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801cdea:	f5a3 5388 	sub.w	r3, r3, #4352	; 0x1100
 801cdee:	2905      	cmp	r1, #5
 801cdf0:	bf0c      	ite	eq
 801cdf2:	4691      	moveq	r9, r2
 801cdf4:	4699      	movne	r9, r3
 801cdf6:	4a2a      	ldr	r2, [pc, #168]	; (801cea0 <ull_configmrxlut+0xf0>)
 801cdf8:	f5a3 63af 	sub.w	r3, r3, #1400	; 0x578
 801cdfc:	2905      	cmp	r1, #5
 801cdfe:	bf0c      	ite	eq
 801ce00:	4692      	moveq	sl, r2
 801ce02:	469a      	movne	sl, r3
 801ce04:	4b27      	ldr	r3, [pc, #156]	; (801cea4 <ull_configmrxlut+0xf4>)
 801ce06:	4a28      	ldr	r2, [pc, #160]	; (801cea8 <ull_configmrxlut+0xf8>)
 801ce08:	2905      	cmp	r1, #5
 801ce0a:	bf0c      	ite	eq
 801ce0c:	469b      	moveq	fp, r3
 801ce0e:	4693      	movne	fp, r2
 801ce10:	f44f 7310 	mov.w	r3, #576	; 0x240
 801ce14:	2200      	movs	r2, #0
 801ce16:	4925      	ldr	r1, [pc, #148]	; (801ceac <ull_configmrxlut+0xfc>)
 801ce18:	f7ff fefe 	bl	801cc18 <dwt_write32bitoffsetreg>
 801ce1c:	4b24      	ldr	r3, [pc, #144]	; (801ceb0 <ull_configmrxlut+0x100>)
 801ce1e:	2200      	movs	r2, #0
 801ce20:	4924      	ldr	r1, [pc, #144]	; (801ceb4 <ull_configmrxlut+0x104>)
 801ce22:	4620      	mov	r0, r4
 801ce24:	f7ff fef8 	bl	801cc18 <dwt_write32bitoffsetreg>
 801ce28:	4b23      	ldr	r3, [pc, #140]	; (801ceb8 <ull_configmrxlut+0x108>)
 801ce2a:	2200      	movs	r2, #0
 801ce2c:	4923      	ldr	r1, [pc, #140]	; (801cebc <ull_configmrxlut+0x10c>)
 801ce2e:	4620      	mov	r0, r4
 801ce30:	f7ff fef2 	bl	801cc18 <dwt_write32bitoffsetreg>
 801ce34:	465b      	mov	r3, fp
 801ce36:	2200      	movs	r2, #0
 801ce38:	4921      	ldr	r1, [pc, #132]	; (801cec0 <ull_configmrxlut+0x110>)
 801ce3a:	4620      	mov	r0, r4
 801ce3c:	f7ff feec 	bl	801cc18 <dwt_write32bitoffsetreg>
 801ce40:	4653      	mov	r3, sl
 801ce42:	2200      	movs	r2, #0
 801ce44:	491f      	ldr	r1, [pc, #124]	; (801cec4 <ull_configmrxlut+0x114>)
 801ce46:	4620      	mov	r0, r4
 801ce48:	f7ff fee6 	bl	801cc18 <dwt_write32bitoffsetreg>
 801ce4c:	464b      	mov	r3, r9
 801ce4e:	2200      	movs	r2, #0
 801ce50:	491d      	ldr	r1, [pc, #116]	; (801cec8 <ull_configmrxlut+0x118>)
 801ce52:	4620      	mov	r0, r4
 801ce54:	f7ff fee0 	bl	801cc18 <dwt_write32bitoffsetreg>
 801ce58:	4643      	mov	r3, r8
 801ce5a:	2200      	movs	r2, #0
 801ce5c:	491b      	ldr	r1, [pc, #108]	; (801cecc <ull_configmrxlut+0x11c>)
 801ce5e:	4620      	mov	r0, r4
 801ce60:	f7ff feda 	bl	801cc18 <dwt_write32bitoffsetreg>
 801ce64:	463b      	mov	r3, r7
 801ce66:	2200      	movs	r2, #0
 801ce68:	4919      	ldr	r1, [pc, #100]	; (801ced0 <ull_configmrxlut+0x120>)
 801ce6a:	4620      	mov	r0, r4
 801ce6c:	f7ff fed4 	bl	801cc18 <dwt_write32bitoffsetreg>
 801ce70:	4633      	mov	r3, r6
 801ce72:	2200      	movs	r2, #0
 801ce74:	4917      	ldr	r1, [pc, #92]	; (801ced4 <ull_configmrxlut+0x124>)
 801ce76:	4620      	mov	r0, r4
 801ce78:	f7ff fece 	bl	801cc18 <dwt_write32bitoffsetreg>
 801ce7c:	462b      	mov	r3, r5
 801ce7e:	2200      	movs	r2, #0
 801ce80:	4915      	ldr	r1, [pc, #84]	; (801ced8 <ull_configmrxlut+0x128>)
 801ce82:	4620      	mov	r0, r4
 801ce84:	f7ff fec8 	bl	801cc18 <dwt_write32bitoffsetreg>
 801ce88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce8c:	00039ff6 	.word	0x00039ff6
 801ce90:	00055ffe 	.word	0x00055ffe
 801ce94:	00039dfe 	.word	0x00039dfe
 801ce98:	00039c7e 	.word	0x00039c7e
 801ce9c:	00038efe 	.word	0x00038efe
 801cea0:	0003876e 	.word	0x0003876e
 801cea4:	0003803e 	.word	0x0003803e
 801cea8:	0005407e 	.word	0x0005407e
 801ceac:	0003001c 	.word	0x0003001c
 801ceb0:	1a491248 	.word	0x1a491248
 801ceb4:	00030020 	.word	0x00030020
 801ceb8:	2db248db 	.word	0x2db248db
 801cebc:	00030024 	.word	0x00030024
 801cec0:	0003002c 	.word	0x0003002c
 801cec4:	00030030 	.word	0x00030030
 801cec8:	00030034 	.word	0x00030034
 801cecc:	00030038 	.word	0x00030038
 801ced0:	0003003c 	.word	0x0003003c
 801ced4:	00030040 	.word	0x00030040
 801ced8:	00030044 	.word	0x00030044

0801cedc <ull_disable_rftx_blocks>:
 801cedc:	b508      	push	{r3, lr}
 801cede:	2300      	movs	r3, #0
 801cee0:	461a      	mov	r2, r3
 801cee2:	4902      	ldr	r1, [pc, #8]	; (801ceec <ull_disable_rftx_blocks+0x10>)
 801cee4:	f7ff fe98 	bl	801cc18 <dwt_write32bitoffsetreg>
 801cee8:	bd08      	pop	{r3, pc}
 801ceea:	bf00      	nop
 801ceec:	00070004 	.word	0x00070004

0801cef0 <ull_disable_rf_tx>:
 801cef0:	b538      	push	{r3, r4, r5, lr}
 801cef2:	4604      	mov	r4, r0
 801cef4:	460d      	mov	r5, r1
 801cef6:	2300      	movs	r3, #0
 801cef8:	461a      	mov	r2, r3
 801cefa:	490a      	ldr	r1, [pc, #40]	; (801cf24 <ull_disable_rf_tx+0x34>)
 801cefc:	f7ff fe8c 	bl	801cc18 <dwt_write32bitoffsetreg>
 801cf00:	2300      	movs	r3, #0
 801cf02:	461a      	mov	r2, r3
 801cf04:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 801cf08:	4620      	mov	r0, r4
 801cf0a:	f7ff fe85 	bl	801cc18 <dwt_write32bitoffsetreg>
 801cf0e:	b905      	cbnz	r5, 801cf12 <ull_disable_rf_tx+0x22>
 801cf10:	bd38      	pop	{r3, r4, r5, pc}
 801cf12:	f04f 53e0 	mov.w	r3, #469762048	; 0x1c000000
 801cf16:	2200      	movs	r2, #0
 801cf18:	4903      	ldr	r1, [pc, #12]	; (801cf28 <ull_disable_rf_tx+0x38>)
 801cf1a:	4620      	mov	r0, r4
 801cf1c:	f7ff fe7c 	bl	801cc18 <dwt_write32bitoffsetreg>
 801cf20:	e7f6      	b.n	801cf10 <ull_disable_rf_tx+0x20>
 801cf22:	bf00      	nop
 801cf24:	00070048 	.word	0x00070048
 801cf28:	00070014 	.word	0x00070014

0801cf2c <ull_repeated_cw>:
 801cf2c:	b570      	push	{r4, r5, r6, lr}
 801cf2e:	4606      	mov	r6, r0
 801cf30:	460c      	mov	r4, r1
 801cf32:	4615      	mov	r5, r2
 801cf34:	2100      	movs	r1, #0
 801cf36:	f7ff febf 	bl	801ccb8 <ull_setfinegraintxseq>
 801cf3a:	2d0f      	cmp	r5, #15
 801cf3c:	bfa8      	it	ge
 801cf3e:	250f      	movge	r5, #15
 801cf40:	1e63      	subs	r3, r4, #1
 801cf42:	2b03      	cmp	r3, #3
 801cf44:	bf28      	it	cs
 801cf46:	2404      	movcs	r4, #4
 801cf48:	2310      	movs	r3, #16
 801cf4a:	4123      	asrs	r3, r4
 801cf4c:	2200      	movs	r2, #0
 801cf4e:	4907      	ldr	r1, [pc, #28]	; (801cf6c <ull_repeated_cw+0x40>)
 801cf50:	4630      	mov	r0, r6
 801cf52:	f7ff fe61 	bl	801cc18 <dwt_write32bitoffsetreg>
 801cf56:	1e63      	subs	r3, r4, #1
 801cf58:	009b      	lsls	r3, r3, #2
 801cf5a:	fa05 f303 	lsl.w	r3, r5, r3
 801cf5e:	2200      	movs	r2, #0
 801cf60:	4903      	ldr	r1, [pc, #12]	; (801cf70 <ull_repeated_cw+0x44>)
 801cf62:	4630      	mov	r0, r6
 801cf64:	f7ff fe58 	bl	801cc18 <dwt_write32bitoffsetreg>
 801cf68:	bd70      	pop	{r4, r5, r6, pc}
 801cf6a:	bf00      	nop
 801cf6c:	00070028 	.word	0x00070028
 801cf70:	00080018 	.word	0x00080018

0801cf74 <ull_readrxdata>:
 801cf74:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cf76:	b083      	sub	sp, #12
 801cf78:	6d04      	ldr	r4, [r0, #80]	; 0x50
 801cf7a:	7ba4      	ldrb	r4, [r4, #14]
 801cf7c:	2c03      	cmp	r4, #3
 801cf7e:	bf0c      	ite	eq
 801cf80:	f44f 1c98 	moveq.w	ip, #1245184	; 0x130000
 801cf84:	f44f 1c90 	movne.w	ip, #1179648	; 0x120000
 801cf88:	189c      	adds	r4, r3, r2
 801cf8a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 801cf8e:	da19      	bge.n	801cfc4 <ull_readrxdata+0x50>
 801cf90:	461d      	mov	r5, r3
 801cf92:	4616      	mov	r6, r2
 801cf94:	460f      	mov	r7, r1
 801cf96:	4604      	mov	r4, r0
 801cf98:	2b7f      	cmp	r3, #127	; 0x7f
 801cf9a:	d915      	bls.n	801cfc8 <ull_readrxdata+0x54>
 801cf9c:	ea4f 431c 	mov.w	r3, ip, lsr #16
 801cfa0:	2200      	movs	r2, #0
 801cfa2:	490d      	ldr	r1, [pc, #52]	; (801cfd8 <ull_readrxdata+0x64>)
 801cfa4:	f7ff fe38 	bl	801cc18 <dwt_write32bitoffsetreg>
 801cfa8:	462b      	mov	r3, r5
 801cfaa:	2200      	movs	r2, #0
 801cfac:	490b      	ldr	r1, [pc, #44]	; (801cfdc <ull_readrxdata+0x68>)
 801cfae:	4620      	mov	r0, r4
 801cfb0:	f7ff fe32 	bl	801cc18 <dwt_write32bitoffsetreg>
 801cfb4:	9700      	str	r7, [sp, #0]
 801cfb6:	4633      	mov	r3, r6
 801cfb8:	2200      	movs	r2, #0
 801cfba:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 801cfbe:	4620      	mov	r0, r4
 801cfc0:	f7ff f941 	bl	801c246 <dwt_readfromdevice>
 801cfc4:	b003      	add	sp, #12
 801cfc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cfc8:	9100      	str	r1, [sp, #0]
 801cfca:	4613      	mov	r3, r2
 801cfcc:	462a      	mov	r2, r5
 801cfce:	4661      	mov	r1, ip
 801cfd0:	f7ff f939 	bl	801c246 <dwt_readfromdevice>
 801cfd4:	e7f6      	b.n	801cfc4 <ull_readrxdata+0x50>
 801cfd6:	bf00      	nop
 801cfd8:	001f0004 	.word	0x001f0004
 801cfdc:	001f0008 	.word	0x001f0008

0801cfe0 <dwt_write8bitoffsetreg>:
 801cfe0:	b510      	push	{r4, lr}
 801cfe2:	b084      	sub	sp, #16
 801cfe4:	ac04      	add	r4, sp, #16
 801cfe6:	f804 3d01 	strb.w	r3, [r4, #-1]!
 801cfea:	9400      	str	r4, [sp, #0]
 801cfec:	2301      	movs	r3, #1
 801cfee:	b292      	uxth	r2, r2
 801cff0:	f7ff fd9c 	bl	801cb2c <dwt_writetodevice>
 801cff4:	b004      	add	sp, #16
 801cff6:	bd10      	pop	{r4, pc}

0801cff8 <ull_getframelength>:
 801cff8:	b510      	push	{r4, lr}
 801cffa:	4604      	mov	r4, r0
 801cffc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801cffe:	7b9b      	ldrb	r3, [r3, #14]
 801d000:	2b01      	cmp	r3, #1
 801d002:	d013      	beq.n	801d02c <ull_getframelength+0x34>
 801d004:	2b03      	cmp	r3, #3
 801d006:	d11d      	bne.n	801d044 <ull_getframelength+0x4c>
 801d008:	23f0      	movs	r3, #240	; 0xf0
 801d00a:	2200      	movs	r2, #0
 801d00c:	4912      	ldr	r1, [pc, #72]	; (801d058 <ull_getframelength+0x60>)
 801d00e:	f7ff ffe7 	bl	801cfe0 <dwt_write8bitoffsetreg>
 801d012:	2200      	movs	r2, #0
 801d014:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 801d018:	4620      	mov	r0, r4
 801d01a:	f7ff f934 	bl	801c286 <dwt_read16bitoffsetreg>
 801d01e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801d020:	7ada      	ldrb	r2, [r3, #11]
 801d022:	b1a2      	cbz	r2, 801d04e <ull_getframelength+0x56>
 801d024:	f3c0 0009 	ubfx	r0, r0, #0, #10
 801d028:	83d8      	strh	r0, [r3, #30]
 801d02a:	bd10      	pop	{r4, pc}
 801d02c:	230f      	movs	r3, #15
 801d02e:	2200      	movs	r2, #0
 801d030:	4909      	ldr	r1, [pc, #36]	; (801d058 <ull_getframelength+0x60>)
 801d032:	f7ff ffd5 	bl	801cfe0 <dwt_write8bitoffsetreg>
 801d036:	2200      	movs	r2, #0
 801d038:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 801d03c:	4620      	mov	r0, r4
 801d03e:	f7ff f922 	bl	801c286 <dwt_read16bitoffsetreg>
 801d042:	e7ec      	b.n	801d01e <ull_getframelength+0x26>
 801d044:	2200      	movs	r2, #0
 801d046:	214c      	movs	r1, #76	; 0x4c
 801d048:	f7ff f91d 	bl	801c286 <dwt_read16bitoffsetreg>
 801d04c:	e7e7      	b.n	801d01e <ull_getframelength+0x26>
 801d04e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801d052:	83d8      	strh	r0, [r3, #30]
 801d054:	e7e9      	b.n	801d02a <ull_getframelength+0x32>
 801d056:	bf00      	nop
 801d058:	00010018 	.word	0x00010018

0801d05c <_dwt_clear_db_events>:
 801d05c:	b510      	push	{r4, lr}
 801d05e:	4604      	mov	r4, r0
 801d060:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801d062:	7b9b      	ldrb	r3, [r3, #14]
 801d064:	2b01      	cmp	r3, #1
 801d066:	d004      	beq.n	801d072 <_dwt_clear_db_events+0x16>
 801d068:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801d06a:	7b9b      	ldrb	r3, [r3, #14]
 801d06c:	2b03      	cmp	r3, #3
 801d06e:	d006      	beq.n	801d07e <_dwt_clear_db_events+0x22>
 801d070:	bd10      	pop	{r4, pc}
 801d072:	230f      	movs	r3, #15
 801d074:	2200      	movs	r2, #0
 801d076:	4905      	ldr	r1, [pc, #20]	; (801d08c <_dwt_clear_db_events+0x30>)
 801d078:	f7ff ffb2 	bl	801cfe0 <dwt_write8bitoffsetreg>
 801d07c:	e7f4      	b.n	801d068 <_dwt_clear_db_events+0xc>
 801d07e:	23f0      	movs	r3, #240	; 0xf0
 801d080:	2200      	movs	r2, #0
 801d082:	4902      	ldr	r1, [pc, #8]	; (801d08c <_dwt_clear_db_events+0x30>)
 801d084:	4620      	mov	r0, r4
 801d086:	f7ff ffab 	bl	801cfe0 <dwt_write8bitoffsetreg>
 801d08a:	e7f1      	b.n	801d070 <_dwt_clear_db_events+0x14>
 801d08c:	00010018 	.word	0x00010018

0801d090 <ull_clearaonconfig>:
 801d090:	b538      	push	{r3, r4, r5, lr}
 801d092:	4604      	mov	r4, r0
 801d094:	2300      	movs	r3, #0
 801d096:	461a      	mov	r2, r3
 801d098:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 801d09c:	f7ff fd51 	bl	801cb42 <dwt_write16bitoffsetreg>
 801d0a0:	2300      	movs	r3, #0
 801d0a2:	461a      	mov	r2, r3
 801d0a4:	4908      	ldr	r1, [pc, #32]	; (801d0c8 <ull_clearaonconfig+0x38>)
 801d0a6:	4620      	mov	r0, r4
 801d0a8:	f7ff ff9a 	bl	801cfe0 <dwt_write8bitoffsetreg>
 801d0ac:	4d07      	ldr	r5, [pc, #28]	; (801d0cc <ull_clearaonconfig+0x3c>)
 801d0ae:	2300      	movs	r3, #0
 801d0b0:	461a      	mov	r2, r3
 801d0b2:	4629      	mov	r1, r5
 801d0b4:	4620      	mov	r0, r4
 801d0b6:	f7ff ff93 	bl	801cfe0 <dwt_write8bitoffsetreg>
 801d0ba:	2302      	movs	r3, #2
 801d0bc:	2200      	movs	r2, #0
 801d0be:	4629      	mov	r1, r5
 801d0c0:	4620      	mov	r0, r4
 801d0c2:	f7ff ff8d 	bl	801cfe0 <dwt_write8bitoffsetreg>
 801d0c6:	bd38      	pop	{r3, r4, r5, pc}
 801d0c8:	000a0014 	.word	0x000a0014
 801d0cc:	000a0004 	.word	0x000a0004

0801d0d0 <ull_configeventcounters>:
 801d0d0:	b538      	push	{r3, r4, r5, lr}
 801d0d2:	4605      	mov	r5, r0
 801d0d4:	460c      	mov	r4, r1
 801d0d6:	2302      	movs	r3, #2
 801d0d8:	2200      	movs	r2, #0
 801d0da:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 801d0de:	f7ff ff7f 	bl	801cfe0 <dwt_write8bitoffsetreg>
 801d0e2:	b904      	cbnz	r4, 801d0e6 <ull_configeventcounters+0x16>
 801d0e4:	bd38      	pop	{r3, r4, r5, pc}
 801d0e6:	2301      	movs	r3, #1
 801d0e8:	2200      	movs	r2, #0
 801d0ea:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 801d0ee:	4628      	mov	r0, r5
 801d0f0:	f7ff ff76 	bl	801cfe0 <dwt_write8bitoffsetreg>
 801d0f4:	e7f6      	b.n	801d0e4 <ull_configeventcounters+0x14>
	...

0801d0f8 <ull_aon_read>:
 801d0f8:	b538      	push	{r3, r4, r5, lr}
 801d0fa:	4604      	mov	r4, r0
 801d0fc:	460b      	mov	r3, r1
 801d0fe:	2200      	movs	r2, #0
 801d100:	490a      	ldr	r1, [pc, #40]	; (801d12c <ull_aon_read+0x34>)
 801d102:	f7ff fd1e 	bl	801cb42 <dwt_write16bitoffsetreg>
 801d106:	4d0a      	ldr	r5, [pc, #40]	; (801d130 <ull_aon_read+0x38>)
 801d108:	2388      	movs	r3, #136	; 0x88
 801d10a:	2200      	movs	r2, #0
 801d10c:	4629      	mov	r1, r5
 801d10e:	4620      	mov	r0, r4
 801d110:	f7ff ff66 	bl	801cfe0 <dwt_write8bitoffsetreg>
 801d114:	2300      	movs	r3, #0
 801d116:	461a      	mov	r2, r3
 801d118:	4629      	mov	r1, r5
 801d11a:	4620      	mov	r0, r4
 801d11c:	f7ff ff60 	bl	801cfe0 <dwt_write8bitoffsetreg>
 801d120:	2200      	movs	r2, #0
 801d122:	4904      	ldr	r1, [pc, #16]	; (801d134 <ull_aon_read+0x3c>)
 801d124:	4620      	mov	r0, r4
 801d126:	f7ff f8ed 	bl	801c304 <dwt_read8bitoffsetreg>
 801d12a:	bd38      	pop	{r3, r4, r5, pc}
 801d12c:	000a000c 	.word	0x000a000c
 801d130:	000a0004 	.word	0x000a0004
 801d134:	000a0008 	.word	0x000a0008

0801d138 <ull_aon_write>:
 801d138:	b570      	push	{r4, r5, r6, lr}
 801d13a:	4604      	mov	r4, r0
 801d13c:	460b      	mov	r3, r1
 801d13e:	4615      	mov	r5, r2
 801d140:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 801d144:	bf34      	ite	cc
 801d146:	2600      	movcc	r6, #0
 801d148:	2620      	movcs	r6, #32
 801d14a:	2200      	movs	r2, #0
 801d14c:	490b      	ldr	r1, [pc, #44]	; (801d17c <ull_aon_write+0x44>)
 801d14e:	f7ff fcf8 	bl	801cb42 <dwt_write16bitoffsetreg>
 801d152:	462b      	mov	r3, r5
 801d154:	2200      	movs	r2, #0
 801d156:	490a      	ldr	r1, [pc, #40]	; (801d180 <ull_aon_write+0x48>)
 801d158:	4620      	mov	r0, r4
 801d15a:	f7ff ff41 	bl	801cfe0 <dwt_write8bitoffsetreg>
 801d15e:	4d09      	ldr	r5, [pc, #36]	; (801d184 <ull_aon_write+0x4c>)
 801d160:	f046 0390 	orr.w	r3, r6, #144	; 0x90
 801d164:	2200      	movs	r2, #0
 801d166:	4629      	mov	r1, r5
 801d168:	4620      	mov	r0, r4
 801d16a:	f7ff ff39 	bl	801cfe0 <dwt_write8bitoffsetreg>
 801d16e:	2300      	movs	r3, #0
 801d170:	461a      	mov	r2, r3
 801d172:	4629      	mov	r1, r5
 801d174:	4620      	mov	r0, r4
 801d176:	f7ff ff33 	bl	801cfe0 <dwt_write8bitoffsetreg>
 801d17a:	bd70      	pop	{r4, r5, r6, pc}
 801d17c:	000a000c 	.word	0x000a000c
 801d180:	000a0010 	.word	0x000a0010
 801d184:	000a0004 	.word	0x000a0004

0801d188 <ull_configuresleep>:
 801d188:	b570      	push	{r4, r5, r6, lr}
 801d18a:	4604      	mov	r4, r0
 801d18c:	460d      	mov	r5, r1
 801d18e:	4616      	mov	r6, r2
 801d190:	2200      	movs	r2, #0
 801d192:	f240 110b 	movw	r1, #267	; 0x10b
 801d196:	f7ff ffcf 	bl	801d138 <ull_aon_write>
 801d19a:	f44f 7182 	mov.w	r1, #260	; 0x104
 801d19e:	4620      	mov	r0, r4
 801d1a0:	f7ff ffaa 	bl	801d0f8 <ull_aon_read>
 801d1a4:	f000 021f 	and.w	r2, r0, #31
 801d1a8:	f44f 7182 	mov.w	r1, #260	; 0x104
 801d1ac:	4620      	mov	r0, r4
 801d1ae:	f7ff ffc3 	bl	801d138 <ull_aon_write>
 801d1b2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801d1b4:	8a1a      	ldrh	r2, [r3, #16]
 801d1b6:	4315      	orrs	r5, r2
 801d1b8:	821d      	strh	r5, [r3, #16]
 801d1ba:	6d22      	ldr	r2, [r4, #80]	; 0x50
 801d1bc:	8a13      	ldrh	r3, [r2, #16]
 801d1be:	f413 6f00 	tst.w	r3, #2048	; 0x800
 801d1c2:	bf1c      	itt	ne
 801d1c4:	f423 6300 	bicne.w	r3, r3, #2048	; 0x800
 801d1c8:	8213      	strhne	r3, [r2, #16]
 801d1ca:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801d1cc:	8a1b      	ldrh	r3, [r3, #16]
 801d1ce:	2200      	movs	r2, #0
 801d1d0:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 801d1d4:	4620      	mov	r0, r4
 801d1d6:	f7ff fcb4 	bl	801cb42 <dwt_write16bitoffsetreg>
 801d1da:	4633      	mov	r3, r6
 801d1dc:	2200      	movs	r2, #0
 801d1de:	4902      	ldr	r1, [pc, #8]	; (801d1e8 <ull_configuresleep+0x60>)
 801d1e0:	4620      	mov	r0, r4
 801d1e2:	f7ff fefd 	bl	801cfe0 <dwt_write8bitoffsetreg>
 801d1e6:	bd70      	pop	{r4, r5, r6, pc}
 801d1e8:	000a0014 	.word	0x000a0014

0801d1ec <ull_setplenfine>:
 801d1ec:	b508      	push	{r3, lr}
 801d1ee:	460b      	mov	r3, r1
 801d1f0:	2201      	movs	r2, #1
 801d1f2:	2124      	movs	r1, #36	; 0x24
 801d1f4:	f7ff fef4 	bl	801cfe0 <dwt_write8bitoffsetreg>
 801d1f8:	bd08      	pop	{r3, pc}
	...

0801d1fc <ull_update_nonce_GCM>:
 801d1fc:	b500      	push	{lr}
 801d1fe:	b083      	sub	sp, #12
 801d200:	9100      	str	r1, [sp, #0]
 801d202:	230c      	movs	r3, #12
 801d204:	2200      	movs	r2, #0
 801d206:	4903      	ldr	r1, [pc, #12]	; (801d214 <ull_update_nonce_GCM+0x18>)
 801d208:	f7ff fc90 	bl	801cb2c <dwt_writetodevice>
 801d20c:	b003      	add	sp, #12
 801d20e:	f85d fb04 	ldr.w	pc, [sp], #4
 801d212:	bf00      	nop
 801d214:	00010034 	.word	0x00010034

0801d218 <ull_update_nonce_CCM>:
 801d218:	b500      	push	{lr}
 801d21a:	b087      	sub	sp, #28
 801d21c:	4613      	mov	r3, r2
 801d21e:	7a8a      	ldrb	r2, [r1, #10]
 801d220:	f88d 2008 	strb.w	r2, [sp, #8]
 801d224:	7a4a      	ldrb	r2, [r1, #9]
 801d226:	f88d 2009 	strb.w	r2, [sp, #9]
 801d22a:	7a0a      	ldrb	r2, [r1, #8]
 801d22c:	f88d 200a 	strb.w	r2, [sp, #10]
 801d230:	79ca      	ldrb	r2, [r1, #7]
 801d232:	f88d 200b 	strb.w	r2, [sp, #11]
 801d236:	798a      	ldrb	r2, [r1, #6]
 801d238:	f88d 200c 	strb.w	r2, [sp, #12]
 801d23c:	794a      	ldrb	r2, [r1, #5]
 801d23e:	f88d 200d 	strb.w	r2, [sp, #13]
 801d242:	790a      	ldrb	r2, [r1, #4]
 801d244:	f88d 200e 	strb.w	r2, [sp, #14]
 801d248:	78ca      	ldrb	r2, [r1, #3]
 801d24a:	f88d 200f 	strb.w	r2, [sp, #15]
 801d24e:	788a      	ldrb	r2, [r1, #2]
 801d250:	f88d 2010 	strb.w	r2, [sp, #16]
 801d254:	784a      	ldrb	r2, [r1, #1]
 801d256:	f88d 2011 	strb.w	r2, [sp, #17]
 801d25a:	780a      	ldrb	r2, [r1, #0]
 801d25c:	f88d 2012 	strb.w	r2, [sp, #18]
 801d260:	2200      	movs	r2, #0
 801d262:	f88d 2013 	strb.w	r2, [sp, #19]
 801d266:	f88d 3014 	strb.w	r3, [sp, #20]
 801d26a:	0a1b      	lsrs	r3, r3, #8
 801d26c:	f88d 3015 	strb.w	r3, [sp, #21]
 801d270:	7b0b      	ldrb	r3, [r1, #12]
 801d272:	f88d 3016 	strb.w	r3, [sp, #22]
 801d276:	7acb      	ldrb	r3, [r1, #11]
 801d278:	f88d 3017 	strb.w	r3, [sp, #23]
 801d27c:	ab02      	add	r3, sp, #8
 801d27e:	9300      	str	r3, [sp, #0]
 801d280:	2310      	movs	r3, #16
 801d282:	4903      	ldr	r1, [pc, #12]	; (801d290 <ull_update_nonce_CCM+0x78>)
 801d284:	f7ff fc52 	bl	801cb2c <dwt_writetodevice>
 801d288:	b007      	add	sp, #28
 801d28a:	f85d fb04 	ldr.w	pc, [sp], #4
 801d28e:	bf00      	nop
 801d290:	00010034 	.word	0x00010034

0801d294 <ull_writetxdata>:
 801d294:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d296:	b083      	sub	sp, #12
 801d298:	185c      	adds	r4, r3, r1
 801d29a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 801d29e:	da24      	bge.n	801d2ea <ull_writetxdata+0x56>
 801d2a0:	461c      	mov	r4, r3
 801d2a2:	4617      	mov	r7, r2
 801d2a4:	460e      	mov	r6, r1
 801d2a6:	4605      	mov	r5, r0
 801d2a8:	2b7f      	cmp	r3, #127	; 0x7f
 801d2aa:	d915      	bls.n	801d2d8 <ull_writetxdata+0x44>
 801d2ac:	2314      	movs	r3, #20
 801d2ae:	2200      	movs	r2, #0
 801d2b0:	490f      	ldr	r1, [pc, #60]	; (801d2f0 <ull_writetxdata+0x5c>)
 801d2b2:	f7ff fcb1 	bl	801cc18 <dwt_write32bitoffsetreg>
 801d2b6:	4623      	mov	r3, r4
 801d2b8:	2200      	movs	r2, #0
 801d2ba:	490e      	ldr	r1, [pc, #56]	; (801d2f4 <ull_writetxdata+0x60>)
 801d2bc:	4628      	mov	r0, r5
 801d2be:	f7ff fcab 	bl	801cc18 <dwt_write32bitoffsetreg>
 801d2c2:	9700      	str	r7, [sp, #0]
 801d2c4:	4633      	mov	r3, r6
 801d2c6:	2200      	movs	r2, #0
 801d2c8:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 801d2cc:	4628      	mov	r0, r5
 801d2ce:	f7ff fc2d 	bl	801cb2c <dwt_writetodevice>
 801d2d2:	2000      	movs	r0, #0
 801d2d4:	b003      	add	sp, #12
 801d2d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d2d8:	9200      	str	r2, [sp, #0]
 801d2da:	460b      	mov	r3, r1
 801d2dc:	4622      	mov	r2, r4
 801d2de:	f44f 11a0 	mov.w	r1, #1310720	; 0x140000
 801d2e2:	f7ff fc23 	bl	801cb2c <dwt_writetodevice>
 801d2e6:	2000      	movs	r0, #0
 801d2e8:	e7f4      	b.n	801d2d4 <ull_writetxdata+0x40>
 801d2ea:	f04f 30ff 	mov.w	r0, #4294967295
 801d2ee:	e7f1      	b.n	801d2d4 <ull_writetxdata+0x40>
 801d2f0:	001f0004 	.word	0x001f0004
 801d2f4:	001f0008 	.word	0x001f0008

0801d2f8 <ull_signal_rx_buff_free>:
 801d2f8:	b510      	push	{r4, lr}
 801d2fa:	b082      	sub	sp, #8
 801d2fc:	4604      	mov	r4, r0
 801d2fe:	2302      	movs	r3, #2
 801d300:	9301      	str	r3, [sp, #4]
 801d302:	2200      	movs	r2, #0
 801d304:	9200      	str	r2, [sp, #0]
 801d306:	4613      	mov	r3, r2
 801d308:	2113      	movs	r1, #19
 801d30a:	f7fe ff1e 	bl	801c14a <dwt_xfer3xxx>
 801d30e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801d310:	7b9a      	ldrb	r2, [r3, #14]
 801d312:	2a03      	cmp	r2, #3
 801d314:	bf0c      	ite	eq
 801d316:	2201      	moveq	r2, #1
 801d318:	2203      	movne	r2, #3
 801d31a:	739a      	strb	r2, [r3, #14]
 801d31c:	b002      	add	sp, #8
 801d31e:	bd10      	pop	{r4, pc}

0801d320 <ull_isr>:
 801d320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d324:	4604      	mov	r4, r0
 801d326:	2200      	movs	r2, #0
 801d328:	f44f 11f8 	mov.w	r1, #2031616	; 0x1f0000
 801d32c:	f7fe ffea 	bl	801c304 <dwt_read8bitoffsetreg>
 801d330:	4605      	mov	r5, r0
 801d332:	2200      	movs	r2, #0
 801d334:	2144      	movs	r1, #68	; 0x44
 801d336:	4620      	mov	r0, r4
 801d338:	f7fe ff8f 	bl	801c25a <dwt_read32bitoffsetreg>
 801d33c:	4606      	mov	r6, r0
 801d33e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801d340:	2200      	movs	r2, #0
 801d342:	83da      	strh	r2, [r3, #30]
 801d344:	f883 2020 	strb.w	r2, [r3, #32]
 801d348:	619a      	str	r2, [r3, #24]
 801d34a:	839a      	strh	r2, [r3, #28]
 801d34c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 801d350:	625a      	str	r2, [r3, #36]	; 0x24
 801d352:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801d354:	625c      	str	r4, [r3, #36]	; 0x24
 801d356:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801d358:	7b9f      	ldrb	r7, [r3, #14]
 801d35a:	2f00      	cmp	r7, #0
 801d35c:	d17f      	bne.n	801d45e <ull_isr+0x13e>
 801d35e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801d360:	619e      	str	r6, [r3, #24]
 801d362:	f8d4 8050 	ldr.w	r8, [r4, #80]	; 0x50
 801d366:	f898 3015 	ldrb.w	r3, [r8, #21]
 801d36a:	f003 0303 	and.w	r3, r3, #3
 801d36e:	2b03      	cmp	r3, #3
 801d370:	f000 8090 	beq.w	801d494 <ull_isr+0x174>
 801d374:	f015 0f80 	tst.w	r5, #128	; 0x80
 801d378:	f040 8093 	bne.w	801d4a2 <ull_isr+0x182>
 801d37c:	f015 0f01 	tst.w	r5, #1
 801d380:	f040 80c1 	bne.w	801d506 <ull_isr+0x1e6>
 801d384:	f015 0f40 	tst.w	r5, #64	; 0x40
 801d388:	d00b      	beq.n	801d3a2 <ull_isr+0x82>
 801d38a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d38c:	b113      	cbz	r3, 801d394 <ull_isr+0x74>
 801d38e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801d390:	3018      	adds	r0, #24
 801d392:	4798      	blx	r3
 801d394:	f44f 73c0 	mov.w	r3, #384	; 0x180
 801d398:	2202      	movs	r2, #2
 801d39a:	2144      	movs	r1, #68	; 0x44
 801d39c:	4620      	mov	r0, r4
 801d39e:	f7ff fbd0 	bl	801cb42 <dwt_write16bitoffsetreg>
 801d3a2:	f015 0f08 	tst.w	r5, #8
 801d3a6:	d107      	bne.n	801d3b8 <ull_isr+0x98>
 801d3a8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801d3aa:	7b9b      	ldrb	r3, [r3, #14]
 801d3ac:	2b00      	cmp	r3, #0
 801d3ae:	f000 80ea 	beq.w	801d586 <ull_isr+0x266>
 801d3b2:	2f00      	cmp	r7, #0
 801d3b4:	f000 80e7 	beq.w	801d586 <ull_isr+0x266>
 801d3b8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801d3ba:	2200      	movs	r2, #0
 801d3bc:	f883 2020 	strb.w	r2, [r3, #32]
 801d3c0:	f416 2f80 	tst.w	r6, #262144	; 0x40000
 801d3c4:	f000 80ad 	beq.w	801d522 <ull_isr+0x202>
 801d3c8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 801d3ca:	f892 3020 	ldrb.w	r3, [r2, #32]
 801d3ce:	f043 0308 	orr.w	r3, r3, #8
 801d3d2:	f882 3020 	strb.w	r3, [r2, #32]
 801d3d6:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 801d3da:	f016 5f80 	tst.w	r6, #268435456	; 0x10000000
 801d3de:	d008      	beq.n	801d3f2 <ull_isr+0xd2>
 801d3e0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 801d3e2:	f892 3020 	ldrb.w	r3, [r2, #32]
 801d3e6:	f043 0310 	orr.w	r3, r3, #16
 801d3ea:	f882 3020 	strb.w	r3, [r2, #32]
 801d3ee:	f047 5780 	orr.w	r7, r7, #268435456	; 0x10000000
 801d3f2:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 801d3f6:	d006      	beq.n	801d406 <ull_isr+0xe6>
 801d3f8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 801d3fa:	7d53      	ldrb	r3, [r2, #21]
 801d3fc:	f003 0303 	and.w	r3, r3, #3
 801d400:	2b03      	cmp	r3, #3
 801d402:	f000 809a 	beq.w	801d53a <ull_isr+0x21a>
 801d406:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 801d40a:	f040 80a2 	bne.w	801d552 <ull_isr+0x232>
 801d40e:	f447 43de 	orr.w	r3, r7, #28416	; 0x6f00
 801d412:	2200      	movs	r2, #0
 801d414:	2144      	movs	r1, #68	; 0x44
 801d416:	4620      	mov	r0, r4
 801d418:	f7ff fbfe 	bl	801cc18 <dwt_write32bitoffsetreg>
 801d41c:	4620      	mov	r0, r4
 801d41e:	f7ff fe1d 	bl	801d05c <_dwt_clear_db_events>
 801d422:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801d424:	8bc3      	ldrh	r3, [r0, #30]
 801d426:	2b00      	cmp	r3, #0
 801d428:	f040 80a2 	bne.w	801d570 <ull_isr+0x250>
 801d42c:	7d43      	ldrb	r3, [r0, #21]
 801d42e:	f003 0303 	and.w	r3, r3, #3
 801d432:	2b03      	cmp	r3, #3
 801d434:	f000 809c 	beq.w	801d570 <ull_isr+0x250>
 801d438:	6983      	ldr	r3, [r0, #24]
 801d43a:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 801d43e:	6183      	str	r3, [r0, #24]
 801d440:	6d22      	ldr	r2, [r4, #80]	; 0x50
 801d442:	6993      	ldr	r3, [r2, #24]
 801d444:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801d448:	6193      	str	r3, [r2, #24]
 801d44a:	69e3      	ldr	r3, [r4, #28]
 801d44c:	b113      	cbz	r3, 801d454 <ull_isr+0x134>
 801d44e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801d450:	3018      	adds	r0, #24
 801d452:	4798      	blx	r3
 801d454:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801d456:	2200      	movs	r2, #0
 801d458:	f883 2020 	strb.w	r2, [r3, #32]
 801d45c:	e08c      	b.n	801d578 <ull_isr+0x258>
 801d45e:	496d      	ldr	r1, [pc, #436]	; (801d614 <ull_isr+0x2f4>)
 801d460:	4620      	mov	r0, r4
 801d462:	f7fe ff4f 	bl	801c304 <dwt_read8bitoffsetreg>
 801d466:	4607      	mov	r7, r0
 801d468:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801d46a:	7b9b      	ldrb	r3, [r3, #14]
 801d46c:	2b03      	cmp	r3, #3
 801d46e:	bf08      	it	eq
 801d470:	f3c0 1707 	ubfxeq	r7, r0, #4, #8
 801d474:	f017 0f01 	tst.w	r7, #1
 801d478:	bf18      	it	ne
 801d47a:	f446 4680 	orrne.w	r6, r6, #16384	; 0x4000
 801d47e:	f017 0f02 	tst.w	r7, #2
 801d482:	bf18      	it	ne
 801d484:	f446 5600 	orrne.w	r6, r6, #8192	; 0x2000
 801d488:	f017 0f04 	tst.w	r7, #4
 801d48c:	bf18      	it	ne
 801d48e:	f446 6680 	orrne.w	r6, r6, #1024	; 0x400
 801d492:	e764      	b.n	801d35e <ull_isr+0x3e>
 801d494:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 801d498:	bf1c      	itt	ne
 801d49a:	f045 0508 	orrne.w	r5, r5, #8
 801d49e:	b2ed      	uxtbne	r5, r5
 801d4a0:	e768      	b.n	801d374 <ull_isr+0x54>
 801d4a2:	2200      	movs	r2, #0
 801d4a4:	2148      	movs	r1, #72	; 0x48
 801d4a6:	4620      	mov	r0, r4
 801d4a8:	f7fe feed 	bl	801c286 <dwt_read16bitoffsetreg>
 801d4ac:	f8a8 001c 	strh.w	r0, [r8, #28]
 801d4b0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801d4b2:	7d1a      	ldrb	r2, [r3, #20]
 801d4b4:	b11a      	cbz	r2, 801d4be <ull_isr+0x19e>
 801d4b6:	699a      	ldr	r2, [r3, #24]
 801d4b8:	f012 0f04 	tst.w	r2, #4
 801d4bc:	d103      	bne.n	801d4c6 <ull_isr+0x1a6>
 801d4be:	8b9b      	ldrh	r3, [r3, #28]
 801d4c0:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 801d4c4:	b18b      	cbz	r3, 801d4ea <ull_isr+0x1ca>
 801d4c6:	2304      	movs	r3, #4
 801d4c8:	2200      	movs	r2, #0
 801d4ca:	2144      	movs	r1, #68	; 0x44
 801d4cc:	4620      	mov	r0, r4
 801d4ce:	f7ff fd87 	bl	801cfe0 <dwt_write8bitoffsetreg>
 801d4d2:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 801d4d6:	2200      	movs	r2, #0
 801d4d8:	2148      	movs	r1, #72	; 0x48
 801d4da:	4620      	mov	r0, r4
 801d4dc:	f7ff fb31 	bl	801cb42 <dwt_write16bitoffsetreg>
 801d4e0:	6a23      	ldr	r3, [r4, #32]
 801d4e2:	b113      	cbz	r3, 801d4ea <ull_isr+0x1ca>
 801d4e4:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801d4e6:	3018      	adds	r0, #24
 801d4e8:	4798      	blx	r3
 801d4ea:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801d4ec:	8b9b      	ldrh	r3, [r3, #28]
 801d4ee:	f413 7f80 	tst.w	r3, #256	; 0x100
 801d4f2:	f43f af43 	beq.w	801d37c <ull_isr+0x5c>
 801d4f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 801d4fa:	2200      	movs	r2, #0
 801d4fc:	2148      	movs	r1, #72	; 0x48
 801d4fe:	4620      	mov	r0, r4
 801d500:	f7ff fb1f 	bl	801cb42 <dwt_write16bitoffsetreg>
 801d504:	e73a      	b.n	801d37c <ull_isr+0x5c>
 801d506:	23f8      	movs	r3, #248	; 0xf8
 801d508:	2200      	movs	r2, #0
 801d50a:	2144      	movs	r1, #68	; 0x44
 801d50c:	4620      	mov	r0, r4
 801d50e:	f7ff fd67 	bl	801cfe0 <dwt_write8bitoffsetreg>
 801d512:	6923      	ldr	r3, [r4, #16]
 801d514:	2b00      	cmp	r3, #0
 801d516:	f43f af35 	beq.w	801d384 <ull_isr+0x64>
 801d51a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801d51c:	3018      	adds	r0, #24
 801d51e:	4798      	blx	r3
 801d520:	e730      	b.n	801d384 <ull_isr+0x64>
 801d522:	f416 6f80 	tst.w	r6, #1024	; 0x400
 801d526:	bf1f      	itttt	ne
 801d528:	6d22      	ldrne	r2, [r4, #80]	; 0x50
 801d52a:	f892 3020 	ldrbne.w	r3, [r2, #32]
 801d52e:	f043 0304 	orrne.w	r3, r3, #4
 801d532:	f882 3020 	strbne.w	r3, [r2, #32]
 801d536:	2700      	movs	r7, #0
 801d538:	e74f      	b.n	801d3da <ull_isr+0xba>
 801d53a:	f892 3020 	ldrb.w	r3, [r2, #32]
 801d53e:	f043 0302 	orr.w	r3, r3, #2
 801d542:	f882 3020 	strb.w	r3, [r2, #32]
 801d546:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801d548:	2200      	movs	r2, #0
 801d54a:	83da      	strh	r2, [r3, #30]
 801d54c:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 801d550:	e75d      	b.n	801d40e <ull_isr+0xee>
 801d552:	4620      	mov	r0, r4
 801d554:	f7ff fd50 	bl	801cff8 <ull_getframelength>
 801d558:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 801d55c:	f43f af57 	beq.w	801d40e <ull_isr+0xee>
 801d560:	6d22      	ldr	r2, [r4, #80]	; 0x50
 801d562:	f892 3020 	ldrb.w	r3, [r2, #32]
 801d566:	f043 0301 	orr.w	r3, r3, #1
 801d56a:	f882 3020 	strb.w	r3, [r2, #32]
 801d56e:	e74e      	b.n	801d40e <ull_isr+0xee>
 801d570:	6963      	ldr	r3, [r4, #20]
 801d572:	b10b      	cbz	r3, 801d578 <ull_isr+0x258>
 801d574:	3018      	adds	r0, #24
 801d576:	4798      	blx	r3
 801d578:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801d57a:	7b9b      	ldrb	r3, [r3, #14]
 801d57c:	bb03      	cbnz	r3, 801d5c0 <ull_isr+0x2a0>
 801d57e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801d580:	2200      	movs	r2, #0
 801d582:	f883 2020 	strb.w	r2, [r3, #32]
 801d586:	f015 0f10 	tst.w	r5, #16
 801d58a:	d11d      	bne.n	801d5c8 <ull_isr+0x2a8>
 801d58c:	f015 0f20 	tst.w	r5, #32
 801d590:	d12d      	bne.n	801d5ee <ull_isr+0x2ce>
 801d592:	2200      	movs	r2, #0
 801d594:	4920      	ldr	r1, [pc, #128]	; (801d618 <ull_isr+0x2f8>)
 801d596:	4620      	mov	r0, r4
 801d598:	f7fe feb4 	bl	801c304 <dwt_read8bitoffsetreg>
 801d59c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801d59e:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21
 801d5a2:	f010 0303 	ands.w	r3, r0, #3
 801d5a6:	d009      	beq.n	801d5bc <ull_isr+0x29c>
 801d5a8:	2200      	movs	r2, #0
 801d5aa:	491b      	ldr	r1, [pc, #108]	; (801d618 <ull_isr+0x2f8>)
 801d5ac:	4620      	mov	r0, r4
 801d5ae:	f7ff fd17 	bl	801cfe0 <dwt_write8bitoffsetreg>
 801d5b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801d5b4:	b113      	cbz	r3, 801d5bc <ull_isr+0x29c>
 801d5b6:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801d5b8:	3018      	adds	r0, #24
 801d5ba:	4798      	blx	r3
 801d5bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d5c0:	4620      	mov	r0, r4
 801d5c2:	f7ff fe99 	bl	801d2f8 <ull_signal_rx_buff_free>
 801d5c6:	e7da      	b.n	801d57e <ull_isr+0x25e>
 801d5c8:	4b14      	ldr	r3, [pc, #80]	; (801d61c <ull_isr+0x2fc>)
 801d5ca:	2200      	movs	r2, #0
 801d5cc:	2144      	movs	r1, #68	; 0x44
 801d5ce:	4620      	mov	r0, r4
 801d5d0:	f7ff fb22 	bl	801cc18 <dwt_write32bitoffsetreg>
 801d5d4:	4620      	mov	r0, r4
 801d5d6:	f7ff fd41 	bl	801d05c <_dwt_clear_db_events>
 801d5da:	69e3      	ldr	r3, [r4, #28]
 801d5dc:	b113      	cbz	r3, 801d5e4 <ull_isr+0x2c4>
 801d5de:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801d5e0:	3018      	adds	r0, #24
 801d5e2:	4798      	blx	r3
 801d5e4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801d5e6:	2200      	movs	r2, #0
 801d5e8:	f883 2020 	strb.w	r2, [r3, #32]
 801d5ec:	e7ce      	b.n	801d58c <ull_isr+0x26c>
 801d5ee:	4b0c      	ldr	r3, [pc, #48]	; (801d620 <ull_isr+0x300>)
 801d5f0:	2200      	movs	r2, #0
 801d5f2:	2144      	movs	r1, #68	; 0x44
 801d5f4:	4620      	mov	r0, r4
 801d5f6:	f7ff fb0f 	bl	801cc18 <dwt_write32bitoffsetreg>
 801d5fa:	4620      	mov	r0, r4
 801d5fc:	f7ff fd2e 	bl	801d05c <_dwt_clear_db_events>
 801d600:	69a3      	ldr	r3, [r4, #24]
 801d602:	b113      	cbz	r3, 801d60a <ull_isr+0x2ea>
 801d604:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801d606:	3018      	adds	r0, #24
 801d608:	4798      	blx	r3
 801d60a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801d60c:	2200      	movs	r2, #0
 801d60e:	f883 2020 	strb.w	r2, [r3, #32]
 801d612:	e7be      	b.n	801d592 <ull_isr+0x272>
 801d614:	00010018 	.word	0x00010018
 801d618:	00110038 	.word	0x00110038
 801d61c:	34059400 	.word	0x34059400
 801d620:	10220400 	.word	0x10220400

0801d624 <dwt_modify32bitoffsetreg>:
 801d624:	b530      	push	{r4, r5, lr}
 801d626:	b085      	sub	sp, #20
 801d628:	9c08      	ldr	r4, [sp, #32]
 801d62a:	f88d 3008 	strb.w	r3, [sp, #8]
 801d62e:	0a1d      	lsrs	r5, r3, #8
 801d630:	f88d 5009 	strb.w	r5, [sp, #9]
 801d634:	0c1d      	lsrs	r5, r3, #16
 801d636:	f88d 500a 	strb.w	r5, [sp, #10]
 801d63a:	0e1b      	lsrs	r3, r3, #24
 801d63c:	f88d 300b 	strb.w	r3, [sp, #11]
 801d640:	f88d 400c 	strb.w	r4, [sp, #12]
 801d644:	0a23      	lsrs	r3, r4, #8
 801d646:	f88d 300d 	strb.w	r3, [sp, #13]
 801d64a:	0c23      	lsrs	r3, r4, #16
 801d64c:	f88d 300e 	strb.w	r3, [sp, #14]
 801d650:	0e24      	lsrs	r4, r4, #24
 801d652:	f88d 400f 	strb.w	r4, [sp, #15]
 801d656:	f248 0303 	movw	r3, #32771	; 0x8003
 801d65a:	9301      	str	r3, [sp, #4]
 801d65c:	ab02      	add	r3, sp, #8
 801d65e:	9300      	str	r3, [sp, #0]
 801d660:	2308      	movs	r3, #8
 801d662:	b292      	uxth	r2, r2
 801d664:	f7fe fd71 	bl	801c14a <dwt_xfer3xxx>
 801d668:	b005      	add	sp, #20
 801d66a:	bd30      	pop	{r4, r5, pc}

0801d66c <ull_enablegpioclocks>:
 801d66c:	b500      	push	{lr}
 801d66e:	b083      	sub	sp, #12
 801d670:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801d674:	9300      	str	r3, [sp, #0]
 801d676:	f04f 33ff 	mov.w	r3, #4294967295
 801d67a:	2200      	movs	r2, #0
 801d67c:	4902      	ldr	r1, [pc, #8]	; (801d688 <ull_enablegpioclocks+0x1c>)
 801d67e:	f7ff ffd1 	bl	801d624 <dwt_modify32bitoffsetreg>
 801d682:	b003      	add	sp, #12
 801d684:	f85d fb04 	ldr.w	pc, [sp], #4
 801d688:	00110004 	.word	0x00110004

0801d68c <ull_enable_rf_tx>:
 801d68c:	b570      	push	{r4, r5, r6, lr}
 801d68e:	b082      	sub	sp, #8
 801d690:	4604      	mov	r4, r0
 801d692:	460e      	mov	r6, r1
 801d694:	4d13      	ldr	r5, [pc, #76]	; (801d6e4 <ull_enable_rf_tx+0x58>)
 801d696:	f04f 2308 	mov.w	r3, #134219776	; 0x8000800
 801d69a:	9300      	str	r3, [sp, #0]
 801d69c:	f04f 33ff 	mov.w	r3, #4294967295
 801d6a0:	2200      	movs	r2, #0
 801d6a2:	4629      	mov	r1, r5
 801d6a4:	f7ff ffbe 	bl	801d624 <dwt_modify32bitoffsetreg>
 801d6a8:	f04f 1360 	mov.w	r3, #6291552	; 0x600060
 801d6ac:	9300      	str	r3, [sp, #0]
 801d6ae:	f04f 33ff 	mov.w	r3, #4294967295
 801d6b2:	2200      	movs	r2, #0
 801d6b4:	4629      	mov	r1, r5
 801d6b6:	4620      	mov	r0, r4
 801d6b8:	f7ff ffb4 	bl	801d624 <dwt_modify32bitoffsetreg>
 801d6bc:	4b0a      	ldr	r3, [pc, #40]	; (801d6e8 <ull_enable_rf_tx+0x5c>)
 801d6be:	9300      	str	r3, [sp, #0]
 801d6c0:	f04f 33ff 	mov.w	r3, #4294967295
 801d6c4:	2200      	movs	r2, #0
 801d6c6:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 801d6ca:	4620      	mov	r0, r4
 801d6cc:	f7ff ffaa 	bl	801d624 <dwt_modify32bitoffsetreg>
 801d6d0:	b90e      	cbnz	r6, 801d6d6 <ull_enable_rf_tx+0x4a>
 801d6d2:	b002      	add	sp, #8
 801d6d4:	bd70      	pop	{r4, r5, r6, pc}
 801d6d6:	4b05      	ldr	r3, [pc, #20]	; (801d6ec <ull_enable_rf_tx+0x60>)
 801d6d8:	2200      	movs	r2, #0
 801d6da:	4905      	ldr	r1, [pc, #20]	; (801d6f0 <ull_enable_rf_tx+0x64>)
 801d6dc:	4620      	mov	r0, r4
 801d6de:	f7ff fa9b 	bl	801cc18 <dwt_write32bitoffsetreg>
 801d6e2:	e7f6      	b.n	801d6d2 <ull_enable_rf_tx+0x46>
 801d6e4:	00070048 	.word	0x00070048
 801d6e8:	02003c00 	.word	0x02003c00
 801d6ec:	01011100 	.word	0x01011100
 801d6f0:	00070014 	.word	0x00070014

0801d6f4 <ull_enable_rftx_blocks>:
 801d6f4:	b500      	push	{lr}
 801d6f6:	b083      	sub	sp, #12
 801d6f8:	4b05      	ldr	r3, [pc, #20]	; (801d710 <ull_enable_rftx_blocks+0x1c>)
 801d6fa:	9300      	str	r3, [sp, #0]
 801d6fc:	f04f 33ff 	mov.w	r3, #4294967295
 801d700:	2200      	movs	r2, #0
 801d702:	4904      	ldr	r1, [pc, #16]	; (801d714 <ull_enable_rftx_blocks+0x20>)
 801d704:	f7ff ff8e 	bl	801d624 <dwt_modify32bitoffsetreg>
 801d708:	b003      	add	sp, #12
 801d70a:	f85d fb04 	ldr.w	pc, [sp], #4
 801d70e:	bf00      	nop
 801d710:	02003c00 	.word	0x02003c00
 801d714:	00070004 	.word	0x00070004

0801d718 <_dwt_otpprogword32>:
 801d718:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d71c:	b083      	sub	sp, #12
 801d71e:	4604      	mov	r4, r0
 801d720:	460d      	mov	r5, r1
 801d722:	4617      	mov	r7, r2
 801d724:	4e56      	ldr	r6, [pc, #344]	; (801d880 <_dwt_otpprogword32+0x168>)
 801d726:	2200      	movs	r2, #0
 801d728:	4631      	mov	r1, r6
 801d72a:	f7fe fd96 	bl	801c25a <dwt_read32bitoffsetreg>
 801d72e:	4681      	mov	r9, r0
 801d730:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 801d734:	9300      	str	r3, [sp, #0]
 801d736:	f04f 33ff 	mov.w	r3, #4294967295
 801d73a:	2200      	movs	r2, #0
 801d73c:	4631      	mov	r1, r6
 801d73e:	4620      	mov	r0, r4
 801d740:	f7ff ff70 	bl	801d624 <dwt_modify32bitoffsetreg>
 801d744:	f8df 813c 	ldr.w	r8, [pc, #316]	; 801d884 <_dwt_otpprogword32+0x16c>
 801d748:	2318      	movs	r3, #24
 801d74a:	2200      	movs	r2, #0
 801d74c:	4641      	mov	r1, r8
 801d74e:	4620      	mov	r0, r4
 801d750:	f7ff f9f7 	bl	801cb42 <dwt_write16bitoffsetreg>
 801d754:	2125      	movs	r1, #37	; 0x25
 801d756:	4620      	mov	r0, r4
 801d758:	f7ff fa28 	bl	801cbac <__dwt_otp_write_wdata_id_reg>
 801d75c:	2102      	movs	r1, #2
 801d75e:	4620      	mov	r0, r4
 801d760:	f7ff fa24 	bl	801cbac <__dwt_otp_write_wdata_id_reg>
 801d764:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
 801d768:	4620      	mov	r0, r4
 801d76a:	f7ff fa1f 	bl	801cbac <__dwt_otp_write_wdata_id_reg>
 801d76e:	b2f9      	uxtb	r1, r7
 801d770:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 801d774:	4620      	mov	r0, r4
 801d776:	f7ff fa19 	bl	801cbac <__dwt_otp_write_wdata_id_reg>
 801d77a:	f44f 7180 	mov.w	r1, #256	; 0x100
 801d77e:	4620      	mov	r0, r4
 801d780:	f7ff fa14 	bl	801cbac <__dwt_otp_write_wdata_id_reg>
 801d784:	2100      	movs	r1, #0
 801d786:	4620      	mov	r0, r4
 801d788:	f7ff fa10 	bl	801cbac <__dwt_otp_write_wdata_id_reg>
 801d78c:	2102      	movs	r1, #2
 801d78e:	4620      	mov	r0, r4
 801d790:	f7ff fa0c 	bl	801cbac <__dwt_otp_write_wdata_id_reg>
 801d794:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 801d798:	4620      	mov	r0, r4
 801d79a:	f7ff fa07 	bl	801cbac <__dwt_otp_write_wdata_id_reg>
 801d79e:	b2e9      	uxtb	r1, r5
 801d7a0:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 801d7a4:	4620      	mov	r0, r4
 801d7a6:	f7ff fa01 	bl	801cbac <__dwt_otp_write_wdata_id_reg>
 801d7aa:	f3c5 2107 	ubfx	r1, r5, #8, #8
 801d7ae:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 801d7b2:	4620      	mov	r0, r4
 801d7b4:	f7ff f9fa 	bl	801cbac <__dwt_otp_write_wdata_id_reg>
 801d7b8:	f3c5 4107 	ubfx	r1, r5, #16, #8
 801d7bc:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 801d7c0:	4620      	mov	r0, r4
 801d7c2:	f7ff f9f3 	bl	801cbac <__dwt_otp_write_wdata_id_reg>
 801d7c6:	0e29      	lsrs	r1, r5, #24
 801d7c8:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 801d7cc:	4620      	mov	r0, r4
 801d7ce:	f7ff f9ed 	bl	801cbac <__dwt_otp_write_wdata_id_reg>
 801d7d2:	2100      	movs	r1, #0
 801d7d4:	4620      	mov	r0, r4
 801d7d6:	f7ff f9e9 	bl	801cbac <__dwt_otp_write_wdata_id_reg>
 801d7da:	213a      	movs	r1, #58	; 0x3a
 801d7dc:	4620      	mov	r0, r4
 801d7de:	f7ff f9e5 	bl	801cbac <__dwt_otp_write_wdata_id_reg>
 801d7e2:	f240 11ff 	movw	r1, #511	; 0x1ff
 801d7e6:	4620      	mov	r0, r4
 801d7e8:	f7ff f9e0 	bl	801cbac <__dwt_otp_write_wdata_id_reg>
 801d7ec:	f44f 7185 	mov.w	r1, #266	; 0x10a
 801d7f0:	4620      	mov	r0, r4
 801d7f2:	f7ff f9db 	bl	801cbac <__dwt_otp_write_wdata_id_reg>
 801d7f6:	2100      	movs	r1, #0
 801d7f8:	4620      	mov	r0, r4
 801d7fa:	f7ff f9d7 	bl	801cbac <__dwt_otp_write_wdata_id_reg>
 801d7fe:	213a      	movs	r1, #58	; 0x3a
 801d800:	4620      	mov	r0, r4
 801d802:	f7ff f9d3 	bl	801cbac <__dwt_otp_write_wdata_id_reg>
 801d806:	f240 1101 	movw	r1, #257	; 0x101
 801d80a:	4620      	mov	r0, r4
 801d80c:	f7ff f9ce 	bl	801cbac <__dwt_otp_write_wdata_id_reg>
 801d810:	2302      	movs	r3, #2
 801d812:	2200      	movs	r2, #0
 801d814:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 801d818:	4620      	mov	r0, r4
 801d81a:	f7ff f992 	bl	801cb42 <dwt_write16bitoffsetreg>
 801d81e:	2300      	movs	r3, #0
 801d820:	461a      	mov	r2, r3
 801d822:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 801d826:	4620      	mov	r0, r4
 801d828:	f7ff f98b 	bl	801cb42 <dwt_write16bitoffsetreg>
 801d82c:	2002      	movs	r0, #2
 801d82e:	f7e3 f9a1 	bl	8000b74 <deca_sleep>
 801d832:	213a      	movs	r1, #58	; 0x3a
 801d834:	4620      	mov	r0, r4
 801d836:	f7ff f9b9 	bl	801cbac <__dwt_otp_write_wdata_id_reg>
 801d83a:	f44f 7181 	mov.w	r1, #258	; 0x102
 801d83e:	4620      	mov	r0, r4
 801d840:	f7ff f9b4 	bl	801cbac <__dwt_otp_write_wdata_id_reg>
 801d844:	2302      	movs	r3, #2
 801d846:	2200      	movs	r2, #0
 801d848:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 801d84c:	4620      	mov	r0, r4
 801d84e:	f7ff f978 	bl	801cb42 <dwt_write16bitoffsetreg>
 801d852:	2300      	movs	r3, #0
 801d854:	461a      	mov	r2, r3
 801d856:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 801d85a:	4620      	mov	r0, r4
 801d85c:	f7ff f971 	bl	801cb42 <dwt_write16bitoffsetreg>
 801d860:	2300      	movs	r3, #0
 801d862:	461a      	mov	r2, r3
 801d864:	4641      	mov	r1, r8
 801d866:	4620      	mov	r0, r4
 801d868:	f7ff f96b 	bl	801cb42 <dwt_write16bitoffsetreg>
 801d86c:	464b      	mov	r3, r9
 801d86e:	2200      	movs	r2, #0
 801d870:	4631      	mov	r1, r6
 801d872:	4620      	mov	r0, r4
 801d874:	f7ff f9d0 	bl	801cc18 <dwt_write32bitoffsetreg>
 801d878:	b003      	add	sp, #12
 801d87a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d87e:	bf00      	nop
 801d880:	00070044 	.word	0x00070044
 801d884:	000b0008 	.word	0x000b0008

0801d888 <ull_setgpiomode>:
 801d888:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d88a:	b083      	sub	sp, #12
 801d88c:	2400      	movs	r4, #0
 801d88e:	4623      	mov	r3, r4
 801d890:	2601      	movs	r6, #1
 801d892:	2707      	movs	r7, #7
 801d894:	e002      	b.n	801d89c <ull_setgpiomode+0x14>
 801d896:	3401      	adds	r4, #1
 801d898:	2c09      	cmp	r4, #9
 801d89a:	d009      	beq.n	801d8b0 <ull_setgpiomode+0x28>
 801d89c:	fa06 f504 	lsl.w	r5, r6, r4
 801d8a0:	420d      	tst	r5, r1
 801d8a2:	d0f8      	beq.n	801d896 <ull_setgpiomode+0xe>
 801d8a4:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 801d8a8:	fa07 f505 	lsl.w	r5, r7, r5
 801d8ac:	432b      	orrs	r3, r5
 801d8ae:	e7f2      	b.n	801d896 <ull_setgpiomode+0xe>
 801d8b0:	401a      	ands	r2, r3
 801d8b2:	9200      	str	r2, [sp, #0]
 801d8b4:	43db      	mvns	r3, r3
 801d8b6:	2200      	movs	r2, #0
 801d8b8:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801d8bc:	f7ff feb2 	bl	801d624 <dwt_modify32bitoffsetreg>
 801d8c0:	b003      	add	sp, #12
 801d8c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d8c4 <ull_writetxfctrl>:
 801d8c4:	b500      	push	{lr}
 801d8c6:	b083      	sub	sp, #12
 801d8c8:	2a7f      	cmp	r2, #127	; 0x7f
 801d8ca:	bf88      	it	hi
 801d8cc:	3280      	addhi	r2, #128	; 0x80
 801d8ce:	ea41 21c3 	orr.w	r1, r1, r3, lsl #11
 801d8d2:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801d8d6:	9100      	str	r1, [sp, #0]
 801d8d8:	4b03      	ldr	r3, [pc, #12]	; (801d8e8 <ull_writetxfctrl+0x24>)
 801d8da:	2200      	movs	r2, #0
 801d8dc:	2120      	movs	r1, #32
 801d8de:	f7ff fea1 	bl	801d624 <dwt_modify32bitoffsetreg>
 801d8e2:	b003      	add	sp, #12
 801d8e4:	f85d fb04 	ldr.w	pc, [sp], #4
 801d8e8:	fc00f400 	.word	0xfc00f400

0801d8ec <prs_sys_status_and_or>:
 801d8ec:	b500      	push	{lr}
 801d8ee:	b083      	sub	sp, #12
 801d8f0:	9200      	str	r2, [sp, #0]
 801d8f2:	460b      	mov	r3, r1
 801d8f4:	2200      	movs	r2, #0
 801d8f6:	2144      	movs	r1, #68	; 0x44
 801d8f8:	f7ff fe94 	bl	801d624 <dwt_modify32bitoffsetreg>
 801d8fc:	2000      	movs	r0, #0
 801d8fe:	b003      	add	sp, #12
 801d900:	f85d fb04 	ldr.w	pc, [sp], #4

0801d904 <dwt_modify8bitoffsetreg>:
 801d904:	b500      	push	{lr}
 801d906:	b085      	sub	sp, #20
 801d908:	f88d 300c 	strb.w	r3, [sp, #12]
 801d90c:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801d910:	f88d 300d 	strb.w	r3, [sp, #13]
 801d914:	f248 0301 	movw	r3, #32769	; 0x8001
 801d918:	9301      	str	r3, [sp, #4]
 801d91a:	ab03      	add	r3, sp, #12
 801d91c:	9300      	str	r3, [sp, #0]
 801d91e:	2302      	movs	r3, #2
 801d920:	b292      	uxth	r2, r2
 801d922:	f7fe fc12 	bl	801c14a <dwt_xfer3xxx>
 801d926:	b005      	add	sp, #20
 801d928:	f85d fb04 	ldr.w	pc, [sp], #4

0801d92c <ull_enablespicrccheck>:
 801d92c:	b570      	push	{r4, r5, r6, lr}
 801d92e:	b082      	sub	sp, #8
 801d930:	4604      	mov	r4, r0
 801d932:	460d      	mov	r5, r1
 801d934:	b159      	cbz	r1, 801d94e <ull_enablespicrccheck+0x22>
 801d936:	4616      	mov	r6, r2
 801d938:	2340      	movs	r3, #64	; 0x40
 801d93a:	9300      	str	r3, [sp, #0]
 801d93c:	23ff      	movs	r3, #255	; 0xff
 801d93e:	2200      	movs	r2, #0
 801d940:	2110      	movs	r1, #16
 801d942:	f7ff ffdf 	bl	801d904 <dwt_modify8bitoffsetreg>
 801d946:	2d02      	cmp	r5, #2
 801d948:	d107      	bne.n	801d95a <ull_enablespicrccheck+0x2e>
 801d94a:	60e6      	str	r6, [r4, #12]
 801d94c:	e005      	b.n	801d95a <ull_enablespicrccheck+0x2e>
 801d94e:	2200      	movs	r2, #0
 801d950:	9200      	str	r2, [sp, #0]
 801d952:	23bf      	movs	r3, #191	; 0xbf
 801d954:	2110      	movs	r1, #16
 801d956:	f7ff ffd5 	bl	801d904 <dwt_modify8bitoffsetreg>
 801d95a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801d95c:	751d      	strb	r5, [r3, #20]
 801d95e:	b002      	add	sp, #8
 801d960:	bd70      	pop	{r4, r5, r6, pc}
	...

0801d964 <ull_configciadiag>:
 801d964:	b530      	push	{r4, r5, lr}
 801d966:	b083      	sub	sp, #12
 801d968:	4604      	mov	r4, r0
 801d96a:	460d      	mov	r5, r1
 801d96c:	f011 0f01 	tst.w	r1, #1
 801d970:	d015      	beq.n	801d99e <ull_configciadiag+0x3a>
 801d972:	2300      	movs	r3, #0
 801d974:	9300      	str	r3, [sp, #0]
 801d976:	23ef      	movs	r3, #239	; 0xef
 801d978:	2202      	movs	r2, #2
 801d97a:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 801d97e:	f7ff ffc1 	bl	801d904 <dwt_modify8bitoffsetreg>
 801d982:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801d984:	759d      	strb	r5, [r3, #22]
 801d986:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801d988:	7d9b      	ldrb	r3, [r3, #22]
 801d98a:	085b      	lsrs	r3, r3, #1
 801d98c:	d010      	beq.n	801d9b0 <ull_configciadiag+0x4c>
 801d98e:	086b      	lsrs	r3, r5, #1
 801d990:	2200      	movs	r2, #0
 801d992:	490e      	ldr	r1, [pc, #56]	; (801d9cc <ull_configciadiag+0x68>)
 801d994:	4620      	mov	r0, r4
 801d996:	f7ff fb23 	bl	801cfe0 <dwt_write8bitoffsetreg>
 801d99a:	b003      	add	sp, #12
 801d99c:	bd30      	pop	{r4, r5, pc}
 801d99e:	2310      	movs	r3, #16
 801d9a0:	9300      	str	r3, [sp, #0]
 801d9a2:	23ff      	movs	r3, #255	; 0xff
 801d9a4:	2202      	movs	r2, #2
 801d9a6:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 801d9aa:	f7ff ffab 	bl	801d904 <dwt_modify8bitoffsetreg>
 801d9ae:	e7e8      	b.n	801d982 <ull_configciadiag+0x1e>
 801d9b0:	2301      	movs	r3, #1
 801d9b2:	9300      	str	r3, [sp, #0]
 801d9b4:	23ff      	movs	r3, #255	; 0xff
 801d9b6:	2200      	movs	r2, #0
 801d9b8:	4904      	ldr	r1, [pc, #16]	; (801d9cc <ull_configciadiag+0x68>)
 801d9ba:	4620      	mov	r0, r4
 801d9bc:	f7ff ffa2 	bl	801d904 <dwt_modify8bitoffsetreg>
 801d9c0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 801d9c2:	7d93      	ldrb	r3, [r2, #22]
 801d9c4:	f043 0302 	orr.w	r3, r3, #2
 801d9c8:	7593      	strb	r3, [r2, #22]
 801d9ca:	e7e6      	b.n	801d99a <ull_configciadiag+0x36>
 801d9cc:	00010020 	.word	0x00010020

0801d9d0 <ull_configurestsloadiv>:
 801d9d0:	b500      	push	{lr}
 801d9d2:	b083      	sub	sp, #12
 801d9d4:	2301      	movs	r3, #1
 801d9d6:	9300      	str	r3, [sp, #0]
 801d9d8:	23ff      	movs	r3, #255	; 0xff
 801d9da:	2200      	movs	r2, #0
 801d9dc:	4902      	ldr	r1, [pc, #8]	; (801d9e8 <ull_configurestsloadiv+0x18>)
 801d9de:	f7ff ff91 	bl	801d904 <dwt_modify8bitoffsetreg>
 801d9e2:	b003      	add	sp, #12
 801d9e4:	f85d fb04 	ldr.w	pc, [sp], #4
 801d9e8:	00020004 	.word	0x00020004

0801d9ec <ull_adcoffsetscalibration>:
 801d9ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d9f0:	b08b      	sub	sp, #44	; 0x2c
 801d9f2:	4607      	mov	r7, r0
 801d9f4:	f8df 8220 	ldr.w	r8, [pc, #544]	; 801dc18 <ull_adcoffsetscalibration+0x22c>
 801d9f8:	2200      	movs	r2, #0
 801d9fa:	4641      	mov	r1, r8
 801d9fc:	f7fe fc2d 	bl	801c25a <dwt_read32bitoffsetreg>
 801da00:	9004      	str	r0, [sp, #16]
 801da02:	4c7d      	ldr	r4, [pc, #500]	; (801dbf8 <ull_adcoffsetscalibration+0x20c>)
 801da04:	2200      	movs	r2, #0
 801da06:	4621      	mov	r1, r4
 801da08:	4638      	mov	r0, r7
 801da0a:	f7fe fc26 	bl	801c25a <dwt_read32bitoffsetreg>
 801da0e:	9005      	str	r0, [sp, #20]
 801da10:	4d7a      	ldr	r5, [pc, #488]	; (801dbfc <ull_adcoffsetscalibration+0x210>)
 801da12:	2200      	movs	r2, #0
 801da14:	4629      	mov	r1, r5
 801da16:	4638      	mov	r0, r7
 801da18:	f7fe fc74 	bl	801c304 <dwt_read8bitoffsetreg>
 801da1c:	9006      	str	r0, [sp, #24]
 801da1e:	4e78      	ldr	r6, [pc, #480]	; (801dc00 <ull_adcoffsetscalibration+0x214>)
 801da20:	2200      	movs	r2, #0
 801da22:	4631      	mov	r1, r6
 801da24:	4638      	mov	r0, r7
 801da26:	f7fe fc18 	bl	801c25a <dwt_read32bitoffsetreg>
 801da2a:	4682      	mov	sl, r0
 801da2c:	9007      	str	r0, [sp, #28]
 801da2e:	2200      	movs	r2, #0
 801da30:	4974      	ldr	r1, [pc, #464]	; (801dc04 <ull_adcoffsetscalibration+0x218>)
 801da32:	4638      	mov	r0, r7
 801da34:	f7fe fc11 	bl	801c25a <dwt_read32bitoffsetreg>
 801da38:	4681      	mov	r9, r0
 801da3a:	4b73      	ldr	r3, [pc, #460]	; (801dc08 <ull_adcoffsetscalibration+0x21c>)
 801da3c:	9300      	str	r3, [sp, #0]
 801da3e:	f06f 537c 	mvn.w	r3, #1056964608	; 0x3f000000
 801da42:	2200      	movs	r2, #0
 801da44:	4641      	mov	r1, r8
 801da46:	4638      	mov	r0, r7
 801da48:	f7ff fdec 	bl	801d624 <dwt_modify32bitoffsetreg>
 801da4c:	464b      	mov	r3, r9
 801da4e:	2200      	movs	r2, #0
 801da50:	4631      	mov	r1, r6
 801da52:	4638      	mov	r0, r7
 801da54:	f7ff f8e0 	bl	801cc18 <dwt_write32bitoffsetreg>
 801da58:	4653      	mov	r3, sl
 801da5a:	00db      	lsls	r3, r3, #3
 801da5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801da60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801da64:	9300      	str	r3, [sp, #0]
 801da66:	2386      	movs	r3, #134	; 0x86
 801da68:	2200      	movs	r2, #0
 801da6a:	4621      	mov	r1, r4
 801da6c:	4638      	mov	r0, r7
 801da6e:	f7ff ff49 	bl	801d904 <dwt_modify8bitoffsetreg>
 801da72:	2300      	movs	r3, #0
 801da74:	2203      	movs	r2, #3
 801da76:	4621      	mov	r1, r4
 801da78:	4638      	mov	r0, r7
 801da7a:	f7ff fab1 	bl	801cfe0 <dwt_write8bitoffsetreg>
 801da7e:	f04f 0900 	mov.w	r9, #0
 801da82:	f8cd 9000 	str.w	r9, [sp]
 801da86:	23fe      	movs	r3, #254	; 0xfe
 801da88:	464a      	mov	r2, r9
 801da8a:	4629      	mov	r1, r5
 801da8c:	4638      	mov	r0, r7
 801da8e:	f7ff ff39 	bl	801d904 <dwt_modify8bitoffsetreg>
 801da92:	464a      	mov	r2, r9
 801da94:	213c      	movs	r1, #60	; 0x3c
 801da96:	4638      	mov	r0, r7
 801da98:	f7fe fbdf 	bl	801c25a <dwt_read32bitoffsetreg>
 801da9c:	9008      	str	r0, [sp, #32]
 801da9e:	464a      	mov	r2, r9
 801daa0:	2140      	movs	r1, #64	; 0x40
 801daa2:	4638      	mov	r0, r7
 801daa4:	f7fe fbd9 	bl	801c25a <dwt_read32bitoffsetreg>
 801daa8:	9009      	str	r0, [sp, #36]	; 0x24
 801daaa:	464b      	mov	r3, r9
 801daac:	464a      	mov	r2, r9
 801daae:	213c      	movs	r1, #60	; 0x3c
 801dab0:	4638      	mov	r0, r7
 801dab2:	f7ff f8b1 	bl	801cc18 <dwt_write32bitoffsetreg>
 801dab6:	464b      	mov	r3, r9
 801dab8:	464a      	mov	r2, r9
 801daba:	2140      	movs	r1, #64	; 0x40
 801dabc:	4638      	mov	r0, r7
 801dabe:	f7ff f8ab 	bl	801cc18 <dwt_write32bitoffsetreg>
 801dac2:	f7f4 feff 	bl	80128c4 <dwt_forcetrxoff>
 801dac6:	f04f 0b02 	mov.w	fp, #2
 801daca:	464c      	mov	r4, r9
 801dacc:	464d      	mov	r5, r9
 801dace:	464e      	mov	r6, r9
 801dad0:	46c8      	mov	r8, r9
 801dad2:	f8cd 900c 	str.w	r9, [sp, #12]
 801dad6:	46ca      	mov	sl, r9
 801dad8:	e00e      	b.n	801daf8 <ull_adcoffsetscalibration+0x10c>
 801dada:	f7f4 fef3 	bl	80128c4 <dwt_forcetrxoff>
 801dade:	9b03      	ldr	r3, [sp, #12]
 801dae0:	2b00      	cmp	r3, #0
 801dae2:	f000 8082 	beq.w	801dbea <ull_adcoffsetscalibration+0x1fe>
 801dae6:	f1bb 0f01 	cmp.w	fp, #1
 801daea:	f000 8081 	beq.w	801dbf0 <ull_adcoffsetscalibration+0x204>
 801daee:	2301      	movs	r3, #1
 801daf0:	9303      	str	r3, [sp, #12]
 801daf2:	f1bb 0b01 	subs.w	fp, fp, #1
 801daf6:	d043      	beq.n	801db80 <ull_adcoffsetscalibration+0x194>
 801daf8:	4650      	mov	r0, sl
 801dafa:	f7f4 fef1 	bl	80128e0 <dwt_rxenable>
 801dafe:	2014      	movs	r0, #20
 801db00:	f7e3 f843 	bl	8000b8a <deca_usleep>
 801db04:	f04f 0904 	mov.w	r9, #4
 801db08:	f8cd a000 	str.w	sl, [sp]
 801db0c:	23fe      	movs	r3, #254	; 0xfe
 801db0e:	4652      	mov	r2, sl
 801db10:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801db14:	4638      	mov	r0, r7
 801db16:	f7ff fef5 	bl	801d904 <dwt_modify8bitoffsetreg>
 801db1a:	2301      	movs	r3, #1
 801db1c:	9300      	str	r3, [sp, #0]
 801db1e:	23fe      	movs	r3, #254	; 0xfe
 801db20:	4652      	mov	r2, sl
 801db22:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 801db26:	4638      	mov	r0, r7
 801db28:	f7ff feec 	bl	801d904 <dwt_modify8bitoffsetreg>
 801db2c:	4652      	mov	r2, sl
 801db2e:	4937      	ldr	r1, [pc, #220]	; (801dc0c <ull_adcoffsetscalibration+0x220>)
 801db30:	4638      	mov	r0, r7
 801db32:	f7fe fb92 	bl	801c25a <dwt_read32bitoffsetreg>
 801db36:	fa58 f880 	uxtab	r8, r8, r0
 801db3a:	fa1f f888 	uxth.w	r8, r8
 801db3e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801db42:	441e      	add	r6, r3
 801db44:	b2b6      	uxth	r6, r6
 801db46:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801db4a:	441d      	add	r5, r3
 801db4c:	b2ad      	uxth	r5, r5
 801db4e:	eb04 6410 	add.w	r4, r4, r0, lsr #24
 801db52:	b2a4      	uxth	r4, r4
 801db54:	f1b9 0901 	subs.w	r9, r9, #1
 801db58:	d1d6      	bne.n	801db08 <ull_adcoffsetscalibration+0x11c>
 801db5a:	f3c8 0887 	ubfx	r8, r8, #2, #8
 801db5e:	f3c6 0687 	ubfx	r6, r6, #2, #8
 801db62:	f3c5 0587 	ubfx	r5, r5, #2, #8
 801db66:	f3c4 0487 	ubfx	r4, r4, #2, #8
 801db6a:	4652      	mov	r2, sl
 801db6c:	2144      	movs	r1, #68	; 0x44
 801db6e:	4638      	mov	r0, r7
 801db70:	f7fe fb73 	bl	801c25a <dwt_read32bitoffsetreg>
 801db74:	4b26      	ldr	r3, [pc, #152]	; (801dc10 <ull_adcoffsetscalibration+0x224>)
 801db76:	4218      	tst	r0, r3
 801db78:	d0af      	beq.n	801dada <ull_adcoffsetscalibration+0xee>
 801db7a:	f7f4 fea3 	bl	80128c4 <dwt_forcetrxoff>
 801db7e:	e7b2      	b.n	801dae6 <ull_adcoffsetscalibration+0xfa>
 801db80:	f04f 0900 	mov.w	r9, #0
 801db84:	9b08      	ldr	r3, [sp, #32]
 801db86:	2200      	movs	r2, #0
 801db88:	213c      	movs	r1, #60	; 0x3c
 801db8a:	4638      	mov	r0, r7
 801db8c:	f7ff f844 	bl	801cc18 <dwt_write32bitoffsetreg>
 801db90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801db92:	2200      	movs	r2, #0
 801db94:	2140      	movs	r1, #64	; 0x40
 801db96:	4638      	mov	r0, r7
 801db98:	f7ff f83e 	bl	801cc18 <dwt_write32bitoffsetreg>
 801db9c:	042b      	lsls	r3, r5, #16
 801db9e:	eb03 6304 	add.w	r3, r3, r4, lsl #24
 801dba2:	eb03 2306 	add.w	r3, r3, r6, lsl #8
 801dba6:	4443      	add	r3, r8
 801dba8:	2200      	movs	r2, #0
 801dbaa:	491a      	ldr	r1, [pc, #104]	; (801dc14 <ull_adcoffsetscalibration+0x228>)
 801dbac:	4638      	mov	r0, r7
 801dbae:	f7ff f833 	bl	801cc18 <dwt_write32bitoffsetreg>
 801dbb2:	9b04      	ldr	r3, [sp, #16]
 801dbb4:	2200      	movs	r2, #0
 801dbb6:	4918      	ldr	r1, [pc, #96]	; (801dc18 <ull_adcoffsetscalibration+0x22c>)
 801dbb8:	4638      	mov	r0, r7
 801dbba:	f7ff f82d 	bl	801cc18 <dwt_write32bitoffsetreg>
 801dbbe:	9b05      	ldr	r3, [sp, #20]
 801dbc0:	2200      	movs	r2, #0
 801dbc2:	490d      	ldr	r1, [pc, #52]	; (801dbf8 <ull_adcoffsetscalibration+0x20c>)
 801dbc4:	4638      	mov	r0, r7
 801dbc6:	f7ff f827 	bl	801cc18 <dwt_write32bitoffsetreg>
 801dbca:	9b06      	ldr	r3, [sp, #24]
 801dbcc:	2200      	movs	r2, #0
 801dbce:	490b      	ldr	r1, [pc, #44]	; (801dbfc <ull_adcoffsetscalibration+0x210>)
 801dbd0:	4638      	mov	r0, r7
 801dbd2:	f7ff fa05 	bl	801cfe0 <dwt_write8bitoffsetreg>
 801dbd6:	9b07      	ldr	r3, [sp, #28]
 801dbd8:	2200      	movs	r2, #0
 801dbda:	4909      	ldr	r1, [pc, #36]	; (801dc00 <ull_adcoffsetscalibration+0x214>)
 801dbdc:	4638      	mov	r0, r7
 801dbde:	f7ff f81b 	bl	801cc18 <dwt_write32bitoffsetreg>
 801dbe2:	4648      	mov	r0, r9
 801dbe4:	b00b      	add	sp, #44	; 0x2c
 801dbe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dbea:	f04f 0900 	mov.w	r9, #0
 801dbee:	e7c9      	b.n	801db84 <ull_adcoffsetscalibration+0x198>
 801dbf0:	f06f 0905 	mvn.w	r9, #5
 801dbf4:	e7c6      	b.n	801db84 <ull_adcoffsetscalibration+0x198>
 801dbf6:	bf00      	nop
 801dbf8:	00030014 	.word	0x00030014
 801dbfc:	00030018 	.word	0x00030018
 801dc00:	0003002c 	.word	0x0003002c
 801dc04:	00030044 	.word	0x00030044
 801dc08:	38010000 	.word	0x38010000
 801dc0c:	0003004c 	.word	0x0003004c
 801dc10:	3427ff00 	.word	0x3427ff00
 801dc14:	00030010 	.word	0x00030010
 801dc18:	00070014 	.word	0x00070014

0801dc1c <ull_restoreconfig>:
 801dc1c:	b510      	push	{r4, lr}
 801dc1e:	4604      	mov	r4, r0
 801dc20:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801dc22:	7d9b      	ldrb	r3, [r3, #22]
 801dc24:	085b      	lsrs	r3, r3, #1
 801dc26:	d01a      	beq.n	801dc5e <ull_restoreconfig+0x42>
 801dc28:	2200      	movs	r2, #0
 801dc2a:	4912      	ldr	r1, [pc, #72]	; (801dc74 <ull_restoreconfig+0x58>)
 801dc2c:	4620      	mov	r0, r4
 801dc2e:	f7fe fb2a 	bl	801c286 <dwt_read16bitoffsetreg>
 801dc32:	f3c0 03c4 	ubfx	r3, r0, #3, #5
 801dc36:	3b09      	subs	r3, #9
 801dc38:	2b0f      	cmp	r3, #15
 801dc3a:	d80c      	bhi.n	801dc56 <ull_restoreconfig+0x3a>
 801dc3c:	f000 0001 	and.w	r0, r0, #1
 801dc40:	2800      	cmp	r0, #0
 801dc42:	bf0c      	ite	eq
 801dc44:	2105      	moveq	r1, #5
 801dc46:	2109      	movne	r1, #9
 801dc48:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801dc4a:	7a1b      	ldrb	r3, [r3, #8]
 801dc4c:	2b01      	cmp	r3, #1
 801dc4e:	d002      	beq.n	801dc56 <ull_restoreconfig+0x3a>
 801dc50:	4620      	mov	r0, r4
 801dc52:	f7ff f8ad 	bl	801cdb0 <ull_configmrxlut>
 801dc56:	4620      	mov	r0, r4
 801dc58:	f7ff fec8 	bl	801d9ec <ull_adcoffsetscalibration>
 801dc5c:	bd10      	pop	{r4, pc}
 801dc5e:	2301      	movs	r3, #1
 801dc60:	2200      	movs	r2, #0
 801dc62:	4905      	ldr	r1, [pc, #20]	; (801dc78 <ull_restoreconfig+0x5c>)
 801dc64:	f7ff f9bc 	bl	801cfe0 <dwt_write8bitoffsetreg>
 801dc68:	6d22      	ldr	r2, [r4, #80]	; 0x50
 801dc6a:	7d93      	ldrb	r3, [r2, #22]
 801dc6c:	f043 0302 	orr.w	r3, r3, #2
 801dc70:	7593      	strb	r3, [r2, #22]
 801dc72:	e7d9      	b.n	801dc28 <ull_restoreconfig+0xc>
 801dc74:	00010008 	.word	0x00010008
 801dc78:	00010020 	.word	0x00010020

0801dc7c <ull_calcbandwidthadj>:
 801dc7c:	b570      	push	{r4, r5, r6, lr}
 801dc7e:	b082      	sub	sp, #8
 801dc80:	4604      	mov	r4, r0
 801dc82:	460d      	mov	r5, r1
 801dc84:	2101      	movs	r1, #1
 801dc86:	f7fe ff7b 	bl	801cb80 <ull_force_clocks>
 801dc8a:	2100      	movs	r1, #0
 801dc8c:	4620      	mov	r0, r4
 801dc8e:	f7ff fcfd 	bl	801d68c <ull_enable_rf_tx>
 801dc92:	4620      	mov	r0, r4
 801dc94:	f7ff fd2e 	bl	801d6f4 <ull_enable_rftx_blocks>
 801dc98:	f3c5 030b 	ubfx	r3, r5, #0, #12
 801dc9c:	2200      	movs	r2, #0
 801dc9e:	4915      	ldr	r1, [pc, #84]	; (801dcf4 <ull_calcbandwidthadj+0x78>)
 801dca0:	4620      	mov	r0, r4
 801dca2:	f7fe ff4e 	bl	801cb42 <dwt_write16bitoffsetreg>
 801dca6:	2303      	movs	r3, #3
 801dca8:	9300      	str	r3, [sp, #0]
 801dcaa:	23ff      	movs	r3, #255	; 0xff
 801dcac:	2200      	movs	r2, #0
 801dcae:	4912      	ldr	r1, [pc, #72]	; (801dcf8 <ull_calcbandwidthadj+0x7c>)
 801dcb0:	4620      	mov	r0, r4
 801dcb2:	f7ff fe27 	bl	801d904 <dwt_modify8bitoffsetreg>
 801dcb6:	4e10      	ldr	r6, [pc, #64]	; (801dcf8 <ull_calcbandwidthadj+0x7c>)
 801dcb8:	2500      	movs	r5, #0
 801dcba:	462a      	mov	r2, r5
 801dcbc:	4631      	mov	r1, r6
 801dcbe:	4620      	mov	r0, r4
 801dcc0:	f7fe fb20 	bl	801c304 <dwt_read8bitoffsetreg>
 801dcc4:	f010 0f01 	tst.w	r0, #1
 801dcc8:	d1f7      	bne.n	801dcba <ull_calcbandwidthadj+0x3e>
 801dcca:	4620      	mov	r0, r4
 801dccc:	f7ff f906 	bl	801cedc <ull_disable_rftx_blocks>
 801dcd0:	2100      	movs	r1, #0
 801dcd2:	4620      	mov	r0, r4
 801dcd4:	f7ff f90c 	bl	801cef0 <ull_disable_rf_tx>
 801dcd8:	2105      	movs	r1, #5
 801dcda:	4620      	mov	r0, r4
 801dcdc:	f7fe ff50 	bl	801cb80 <ull_force_clocks>
 801dce0:	2200      	movs	r2, #0
 801dce2:	4906      	ldr	r1, [pc, #24]	; (801dcfc <ull_calcbandwidthadj+0x80>)
 801dce4:	4620      	mov	r0, r4
 801dce6:	f7fe fb0d 	bl	801c304 <dwt_read8bitoffsetreg>
 801dcea:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 801dcee:	b002      	add	sp, #8
 801dcf0:	bd70      	pop	{r4, r5, r6, pc}
 801dcf2:	bf00      	nop
 801dcf4:	0008001c 	.word	0x0008001c
 801dcf8:	00080010 	.word	0x00080010
 801dcfc:	0007001c 	.word	0x0007001c

0801dd00 <ull_configuretxrf>:
 801dd00:	b538      	push	{r3, r4, r5, lr}
 801dd02:	4605      	mov	r5, r0
 801dd04:	460c      	mov	r4, r1
 801dd06:	f8b1 1005 	ldrh.w	r1, [r1, #5]
 801dd0a:	b149      	cbz	r1, 801dd20 <ull_configuretxrf+0x20>
 801dd0c:	f7ff ffb6 	bl	801dc7c <ull_calcbandwidthadj>
 801dd10:	f8d4 3001 	ldr.w	r3, [r4, #1]
 801dd14:	2200      	movs	r2, #0
 801dd16:	4905      	ldr	r1, [pc, #20]	; (801dd2c <ull_configuretxrf+0x2c>)
 801dd18:	4628      	mov	r0, r5
 801dd1a:	f7fe ff7d 	bl	801cc18 <dwt_write32bitoffsetreg>
 801dd1e:	bd38      	pop	{r3, r4, r5, pc}
 801dd20:	7823      	ldrb	r3, [r4, #0]
 801dd22:	2200      	movs	r2, #0
 801dd24:	4902      	ldr	r1, [pc, #8]	; (801dd30 <ull_configuretxrf+0x30>)
 801dd26:	f7ff f95b 	bl	801cfe0 <dwt_write8bitoffsetreg>
 801dd2a:	e7f1      	b.n	801dd10 <ull_configuretxrf+0x10>
 801dd2c:	00010004 	.word	0x00010004
 801dd30:	0007001c 	.word	0x0007001c

0801dd34 <ull_repeated_frames>:
 801dd34:	b530      	push	{r4, r5, lr}
 801dd36:	b083      	sub	sp, #12
 801dd38:	4604      	mov	r4, r0
 801dd3a:	460d      	mov	r5, r1
 801dd3c:	2310      	movs	r3, #16
 801dd3e:	9300      	str	r3, [sp, #0]
 801dd40:	23ff      	movs	r3, #255	; 0xff
 801dd42:	2200      	movs	r2, #0
 801dd44:	4906      	ldr	r1, [pc, #24]	; (801dd60 <ull_repeated_frames+0x2c>)
 801dd46:	f7ff fddd 	bl	801d904 <dwt_modify8bitoffsetreg>
 801dd4a:	462b      	mov	r3, r5
 801dd4c:	2d02      	cmp	r5, #2
 801dd4e:	bf38      	it	cc
 801dd50:	2302      	movcc	r3, #2
 801dd52:	2200      	movs	r2, #0
 801dd54:	2128      	movs	r1, #40	; 0x28
 801dd56:	4620      	mov	r0, r4
 801dd58:	f7fe ff5e 	bl	801cc18 <dwt_write32bitoffsetreg>
 801dd5c:	b003      	add	sp, #12
 801dd5e:	bd30      	pop	{r4, r5, pc}
 801dd60:	000f0028 	.word	0x000f0028

0801dd64 <ull_setdwstate>:
 801dd64:	b530      	push	{r4, r5, lr}
 801dd66:	b083      	sub	sp, #12
 801dd68:	4604      	mov	r4, r0
 801dd6a:	2901      	cmp	r1, #1
 801dd6c:	d01d      	beq.n	801ddaa <ull_setdwstate+0x46>
 801dd6e:	2902      	cmp	r1, #2
 801dd70:	d030      	beq.n	801ddd4 <ull_setdwstate+0x70>
 801dd72:	2301      	movs	r3, #1
 801dd74:	9300      	str	r3, [sp, #0]
 801dd76:	23ff      	movs	r3, #255	; 0xff
 801dd78:	2200      	movs	r2, #0
 801dd7a:	4926      	ldr	r1, [pc, #152]	; (801de14 <ull_setdwstate+0xb0>)
 801dd7c:	f7ff fdc2 	bl	801d904 <dwt_modify8bitoffsetreg>
 801dd80:	4d25      	ldr	r5, [pc, #148]	; (801de18 <ull_setdwstate+0xb4>)
 801dd82:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801dd86:	9300      	str	r3, [sp, #0]
 801dd88:	f46f 7380 	mvn.w	r3, #256	; 0x100
 801dd8c:	2200      	movs	r2, #0
 801dd8e:	4629      	mov	r1, r5
 801dd90:	4620      	mov	r0, r4
 801dd92:	f7ff fc47 	bl	801d624 <dwt_modify32bitoffsetreg>
 801dd96:	2300      	movs	r3, #0
 801dd98:	9300      	str	r3, [sp, #0]
 801dd9a:	237f      	movs	r3, #127	; 0x7f
 801dd9c:	2202      	movs	r2, #2
 801dd9e:	4629      	mov	r1, r5
 801dda0:	4620      	mov	r0, r4
 801dda2:	f7ff fdaf 	bl	801d904 <dwt_modify8bitoffsetreg>
 801dda6:	b003      	add	sp, #12
 801dda8:	bd30      	pop	{r4, r5, pc}
 801ddaa:	2105      	movs	r1, #5
 801ddac:	f7fe fee8 	bl	801cb80 <ull_force_clocks>
 801ddb0:	f44f 7381 	mov.w	r3, #258	; 0x102
 801ddb4:	9300      	str	r3, [sp, #0]
 801ddb6:	f04f 33ff 	mov.w	r3, #4294967295
 801ddba:	2200      	movs	r2, #0
 801ddbc:	4917      	ldr	r1, [pc, #92]	; (801de1c <ull_setdwstate+0xb8>)
 801ddbe:	4620      	mov	r0, r4
 801ddc0:	f7ff fc30 	bl	801d624 <dwt_modify32bitoffsetreg>
 801ddc4:	2201      	movs	r2, #1
 801ddc6:	9200      	str	r2, [sp, #0]
 801ddc8:	23ff      	movs	r3, #255	; 0xff
 801ddca:	4913      	ldr	r1, [pc, #76]	; (801de18 <ull_setdwstate+0xb4>)
 801ddcc:	4620      	mov	r0, r4
 801ddce:	f7ff fd99 	bl	801d904 <dwt_modify8bitoffsetreg>
 801ddd2:	e7e8      	b.n	801dda6 <ull_setdwstate+0x42>
 801ddd4:	2303      	movs	r3, #3
 801ddd6:	9300      	str	r3, [sp, #0]
 801ddd8:	23ff      	movs	r3, #255	; 0xff
 801ddda:	2200      	movs	r2, #0
 801dddc:	490d      	ldr	r1, [pc, #52]	; (801de14 <ull_setdwstate+0xb0>)
 801ddde:	f7ff fd91 	bl	801d904 <dwt_modify8bitoffsetreg>
 801dde2:	4d0d      	ldr	r5, [pc, #52]	; (801de18 <ull_setdwstate+0xb4>)
 801dde4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801dde8:	9300      	str	r3, [sp, #0]
 801ddea:	f46f 7380 	mvn.w	r3, #256	; 0x100
 801ddee:	2200      	movs	r2, #0
 801ddf0:	4629      	mov	r1, r5
 801ddf2:	4620      	mov	r0, r4
 801ddf4:	f7ff fc16 	bl	801d624 <dwt_modify32bitoffsetreg>
 801ddf8:	2300      	movs	r3, #0
 801ddfa:	9300      	str	r3, [sp, #0]
 801ddfc:	237f      	movs	r3, #127	; 0x7f
 801ddfe:	2202      	movs	r2, #2
 801de00:	4629      	mov	r1, r5
 801de02:	4620      	mov	r0, r4
 801de04:	f7ff fd7e 	bl	801d904 <dwt_modify8bitoffsetreg>
 801de08:	2105      	movs	r1, #5
 801de0a:	4620      	mov	r0, r4
 801de0c:	f7fe feb8 	bl	801cb80 <ull_force_clocks>
 801de10:	e7c9      	b.n	801dda6 <ull_setdwstate+0x42>
 801de12:	bf00      	nop
 801de14:	00110004 	.word	0x00110004
 801de18:	00110008 	.word	0x00110008
 801de1c:	00090008 	.word	0x00090008

0801de20 <ull_configureframefilter>:
 801de20:	b530      	push	{r4, r5, lr}
 801de22:	b083      	sub	sp, #12
 801de24:	4605      	mov	r5, r0
 801de26:	2902      	cmp	r1, #2
 801de28:	d00e      	beq.n	801de48 <ull_configureframefilter+0x28>
 801de2a:	2400      	movs	r4, #0
 801de2c:	9400      	str	r4, [sp, #0]
 801de2e:	23fe      	movs	r3, #254	; 0xfe
 801de30:	4622      	mov	r2, r4
 801de32:	2110      	movs	r1, #16
 801de34:	f7ff fd66 	bl	801d904 <dwt_modify8bitoffsetreg>
 801de38:	4623      	mov	r3, r4
 801de3a:	4622      	mov	r2, r4
 801de3c:	2114      	movs	r1, #20
 801de3e:	4628      	mov	r0, r5
 801de40:	f7fe fe7f 	bl	801cb42 <dwt_write16bitoffsetreg>
 801de44:	b003      	add	sp, #12
 801de46:	bd30      	pop	{r4, r5, pc}
 801de48:	4614      	mov	r4, r2
 801de4a:	2301      	movs	r3, #1
 801de4c:	9300      	str	r3, [sp, #0]
 801de4e:	23ff      	movs	r3, #255	; 0xff
 801de50:	2200      	movs	r2, #0
 801de52:	2110      	movs	r1, #16
 801de54:	f7ff fd56 	bl	801d904 <dwt_modify8bitoffsetreg>
 801de58:	4623      	mov	r3, r4
 801de5a:	2200      	movs	r2, #0
 801de5c:	2114      	movs	r1, #20
 801de5e:	4628      	mov	r0, r5
 801de60:	f7fe fe6f 	bl	801cb42 <dwt_write16bitoffsetreg>
 801de64:	e7ee      	b.n	801de44 <ull_configureframefilter+0x24>
	...

0801de68 <ull_run_pgfcal>:
 801de68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801de6c:	b082      	sub	sp, #8
 801de6e:	4605      	mov	r5, r0
 801de70:	4c2a      	ldr	r4, [pc, #168]	; (801df1c <ull_run_pgfcal+0xb4>)
 801de72:	2301      	movs	r3, #1
 801de74:	9300      	str	r3, [sp, #0]
 801de76:	23ff      	movs	r3, #255	; 0xff
 801de78:	2200      	movs	r2, #0
 801de7a:	4621      	mov	r1, r4
 801de7c:	f7ff fd42 	bl	801d904 <dwt_modify8bitoffsetreg>
 801de80:	2310      	movs	r3, #16
 801de82:	9300      	str	r3, [sp, #0]
 801de84:	23ff      	movs	r3, #255	; 0xff
 801de86:	2200      	movs	r2, #0
 801de88:	4621      	mov	r1, r4
 801de8a:	4628      	mov	r0, r5
 801de8c:	f7ff fd3a 	bl	801d904 <dwt_modify8bitoffsetreg>
 801de90:	2403      	movs	r4, #3
 801de92:	f04f 0814 	mov.w	r8, #20
 801de96:	4f22      	ldr	r7, [pc, #136]	; (801df20 <ull_run_pgfcal+0xb8>)
 801de98:	2600      	movs	r6, #0
 801de9a:	4640      	mov	r0, r8
 801de9c:	f7e2 fe75 	bl	8000b8a <deca_usleep>
 801dea0:	4632      	mov	r2, r6
 801dea2:	4639      	mov	r1, r7
 801dea4:	4628      	mov	r0, r5
 801dea6:	f7fe fa2d 	bl	801c304 <dwt_read8bitoffsetreg>
 801deaa:	2801      	cmp	r0, #1
 801deac:	d034      	beq.n	801df18 <ull_run_pgfcal+0xb0>
 801deae:	1e63      	subs	r3, r4, #1
 801deb0:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 801deb4:	d1f1      	bne.n	801de9a <ull_run_pgfcal+0x32>
 801deb6:	f06f 0402 	mvn.w	r4, #2
 801deba:	4e18      	ldr	r6, [pc, #96]	; (801df1c <ull_run_pgfcal+0xb4>)
 801debc:	2300      	movs	r3, #0
 801debe:	461a      	mov	r2, r3
 801dec0:	4631      	mov	r1, r6
 801dec2:	4628      	mov	r0, r5
 801dec4:	f7ff f88c 	bl	801cfe0 <dwt_write8bitoffsetreg>
 801dec8:	2301      	movs	r3, #1
 801deca:	2200      	movs	r2, #0
 801decc:	4914      	ldr	r1, [pc, #80]	; (801df20 <ull_run_pgfcal+0xb8>)
 801dece:	4628      	mov	r0, r5
 801ded0:	f7ff f886 	bl	801cfe0 <dwt_write8bitoffsetreg>
 801ded4:	2301      	movs	r3, #1
 801ded6:	9300      	str	r3, [sp, #0]
 801ded8:	23ff      	movs	r3, #255	; 0xff
 801deda:	2202      	movs	r2, #2
 801dedc:	4631      	mov	r1, r6
 801dede:	4628      	mov	r0, r5
 801dee0:	f7ff fd10 	bl	801d904 <dwt_modify8bitoffsetreg>
 801dee4:	2200      	movs	r2, #0
 801dee6:	490f      	ldr	r1, [pc, #60]	; (801df24 <ull_run_pgfcal+0xbc>)
 801dee8:	4628      	mov	r0, r5
 801deea:	f7fe f9b6 	bl	801c25a <dwt_read32bitoffsetreg>
 801deee:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 801def2:	4298      	cmp	r0, r3
 801def4:	bf08      	it	eq
 801def6:	f06f 0403 	mvneq.w	r4, #3
 801defa:	2200      	movs	r2, #0
 801defc:	490a      	ldr	r1, [pc, #40]	; (801df28 <ull_run_pgfcal+0xc0>)
 801defe:	4628      	mov	r0, r5
 801df00:	f7fe f9ab 	bl	801c25a <dwt_read32bitoffsetreg>
 801df04:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 801df08:	4298      	cmp	r0, r3
 801df0a:	bf14      	ite	ne
 801df0c:	4620      	movne	r0, r4
 801df0e:	f06f 0004 	mvneq.w	r0, #4
 801df12:	b002      	add	sp, #8
 801df14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801df18:	2400      	movs	r4, #0
 801df1a:	e7ce      	b.n	801deba <ull_run_pgfcal+0x52>
 801df1c:	0004000c 	.word	0x0004000c
 801df20:	00040020 	.word	0x00040020
 801df24:	00040014 	.word	0x00040014
 801df28:	0004001c 	.word	0x0004001c

0801df2c <ull_setinterrupt>:
 801df2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801df30:	b083      	sub	sp, #12
 801df32:	4605      	mov	r5, r0
 801df34:	4688      	mov	r8, r1
 801df36:	4617      	mov	r7, r2
 801df38:	461c      	mov	r4, r3
 801df3a:	f7e2 fdfd 	bl	8000b38 <decamutexon>
 801df3e:	4606      	mov	r6, r0
 801df40:	2c02      	cmp	r4, #2
 801df42:	d019      	beq.n	801df78 <ull_setinterrupt+0x4c>
 801df44:	2c04      	cmp	r4, #4
 801df46:	d017      	beq.n	801df78 <ull_setinterrupt+0x4c>
 801df48:	f004 03fd 	and.w	r3, r4, #253	; 0xfd
 801df4c:	2b01      	cmp	r3, #1
 801df4e:	d03f      	beq.n	801dfd0 <ull_setinterrupt+0xa4>
 801df50:	f04f 0900 	mov.w	r9, #0
 801df54:	f8cd 9000 	str.w	r9, [sp]
 801df58:	ea6f 0308 	mvn.w	r3, r8
 801df5c:	464a      	mov	r2, r9
 801df5e:	213c      	movs	r1, #60	; 0x3c
 801df60:	4628      	mov	r0, r5
 801df62:	f7ff fb5f 	bl	801d624 <dwt_modify32bitoffsetreg>
 801df66:	f8cd 9000 	str.w	r9, [sp]
 801df6a:	43fb      	mvns	r3, r7
 801df6c:	464a      	mov	r2, r9
 801df6e:	2140      	movs	r1, #64	; 0x40
 801df70:	4628      	mov	r0, r5
 801df72:	f7ff fb57 	bl	801d624 <dwt_modify32bitoffsetreg>
 801df76:	e00b      	b.n	801df90 <ull_setinterrupt+0x64>
 801df78:	4643      	mov	r3, r8
 801df7a:	2200      	movs	r2, #0
 801df7c:	213c      	movs	r1, #60	; 0x3c
 801df7e:	4628      	mov	r0, r5
 801df80:	f7fe fe4a 	bl	801cc18 <dwt_write32bitoffsetreg>
 801df84:	463b      	mov	r3, r7
 801df86:	2200      	movs	r2, #0
 801df88:	2140      	movs	r1, #64	; 0x40
 801df8a:	4628      	mov	r0, r5
 801df8c:	f7fe fe44 	bl	801cc18 <dwt_write32bitoffsetreg>
 801df90:	3c03      	subs	r4, #3
 801df92:	b2e4      	uxtb	r4, r4
 801df94:	2c01      	cmp	r4, #1
 801df96:	d92d      	bls.n	801dff4 <ull_setinterrupt+0xc8>
 801df98:	2200      	movs	r2, #0
 801df9a:	213c      	movs	r1, #60	; 0x3c
 801df9c:	4628      	mov	r0, r5
 801df9e:	f7fe f95c 	bl	801c25a <dwt_read32bitoffsetreg>
 801dfa2:	4603      	mov	r3, r0
 801dfa4:	2200      	movs	r2, #0
 801dfa6:	2144      	movs	r1, #68	; 0x44
 801dfa8:	4628      	mov	r0, r5
 801dfaa:	f7fe fe35 	bl	801cc18 <dwt_write32bitoffsetreg>
 801dfae:	2200      	movs	r2, #0
 801dfb0:	2140      	movs	r1, #64	; 0x40
 801dfb2:	4628      	mov	r0, r5
 801dfb4:	f7fe f951 	bl	801c25a <dwt_read32bitoffsetreg>
 801dfb8:	4603      	mov	r3, r0
 801dfba:	2200      	movs	r2, #0
 801dfbc:	2148      	movs	r1, #72	; 0x48
 801dfbe:	4628      	mov	r0, r5
 801dfc0:	f7fe fe2a 	bl	801cc18 <dwt_write32bitoffsetreg>
 801dfc4:	4630      	mov	r0, r6
 801dfc6:	f7e2 fdc8 	bl	8000b5a <decamutexoff>
 801dfca:	b003      	add	sp, #12
 801dfcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801dfd0:	f8cd 8000 	str.w	r8, [sp]
 801dfd4:	f04f 33ff 	mov.w	r3, #4294967295
 801dfd8:	2200      	movs	r2, #0
 801dfda:	213c      	movs	r1, #60	; 0x3c
 801dfdc:	4628      	mov	r0, r5
 801dfde:	f7ff fb21 	bl	801d624 <dwt_modify32bitoffsetreg>
 801dfe2:	9700      	str	r7, [sp, #0]
 801dfe4:	f04f 33ff 	mov.w	r3, #4294967295
 801dfe8:	2200      	movs	r2, #0
 801dfea:	2140      	movs	r1, #64	; 0x40
 801dfec:	4628      	mov	r0, r5
 801dfee:	f7ff fb19 	bl	801d624 <dwt_modify32bitoffsetreg>
 801dff2:	e7cd      	b.n	801df90 <ull_setinterrupt+0x64>
 801dff4:	2110      	movs	r1, #16
 801dff6:	9100      	str	r1, [sp, #0]
 801dff8:	23ff      	movs	r3, #255	; 0xff
 801dffa:	2202      	movs	r2, #2
 801dffc:	4628      	mov	r0, r5
 801dffe:	f7ff fc81 	bl	801d904 <dwt_modify8bitoffsetreg>
 801e002:	e7c9      	b.n	801df98 <ull_setinterrupt+0x6c>

0801e004 <prs_ack_enable>:
 801e004:	b500      	push	{lr}
 801e006:	b083      	sub	sp, #12
 801e008:	2900      	cmp	r1, #0
 801e00a:	bf0b      	itete	eq
 801e00c:	23ff      	moveq	r3, #255	; 0xff
 801e00e:	23f7      	movne	r3, #247	; 0xf7
 801e010:	2200      	moveq	r2, #0
 801e012:	2208      	movne	r2, #8
 801e014:	9200      	str	r2, [sp, #0]
 801e016:	2201      	movs	r2, #1
 801e018:	2110      	movs	r1, #16
 801e01a:	f7ff fc73 	bl	801d904 <dwt_modify8bitoffsetreg>
 801e01e:	b003      	add	sp, #12
 801e020:	f85d fb04 	ldr.w	pc, [sp], #4

0801e024 <dwt_modify16bitoffsetreg>:
 801e024:	b510      	push	{r4, lr}
 801e026:	b084      	sub	sp, #16
 801e028:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 801e02c:	f88d 300c 	strb.w	r3, [sp, #12]
 801e030:	0a1b      	lsrs	r3, r3, #8
 801e032:	f88d 300d 	strb.w	r3, [sp, #13]
 801e036:	f88d 400e 	strb.w	r4, [sp, #14]
 801e03a:	0a24      	lsrs	r4, r4, #8
 801e03c:	f88d 400f 	strb.w	r4, [sp, #15]
 801e040:	f248 0302 	movw	r3, #32770	; 0x8002
 801e044:	9301      	str	r3, [sp, #4]
 801e046:	ab03      	add	r3, sp, #12
 801e048:	9300      	str	r3, [sp, #0]
 801e04a:	2304      	movs	r3, #4
 801e04c:	b292      	uxth	r2, r2
 801e04e:	f7fe f87c 	bl	801c14a <dwt_xfer3xxx>
 801e052:	b004      	add	sp, #16
 801e054:	bd10      	pop	{r4, pc}
	...

0801e058 <ull_configurestsmode>:
 801e058:	b530      	push	{r4, r5, lr}
 801e05a:	b083      	sub	sp, #12
 801e05c:	4605      	mov	r5, r0
 801e05e:	460c      	mov	r4, r1
 801e060:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801e062:	7559      	strb	r1, [r3, #21]
 801e064:	030b      	lsls	r3, r1, #12
 801e066:	f403 4330 	and.w	r3, r3, #45056	; 0xb000
 801e06a:	9300      	str	r3, [sp, #0]
 801e06c:	f644 73ff 	movw	r3, #20479	; 0x4fff
 801e070:	2200      	movs	r2, #0
 801e072:	2110      	movs	r1, #16
 801e074:	f7ff ffd6 	bl	801e024 <dwt_modify16bitoffsetreg>
 801e078:	f004 0403 	and.w	r4, r4, #3
 801e07c:	2c03      	cmp	r4, #3
 801e07e:	bf0c      	ite	eq
 801e080:	4b04      	ldreq	r3, [pc, #16]	; (801e094 <ull_configurestsmode+0x3c>)
 801e082:	4b05      	ldrne	r3, [pc, #20]	; (801e098 <ull_configurestsmode+0x40>)
 801e084:	2200      	movs	r2, #0
 801e086:	4905      	ldr	r1, [pc, #20]	; (801e09c <ull_configurestsmode+0x44>)
 801e088:	4628      	mov	r0, r5
 801e08a:	f7fe fdc5 	bl	801cc18 <dwt_write32bitoffsetreg>
 801e08e:	b003      	add	sp, #12
 801e090:	bd30      	pop	{r4, r5, pc}
 801e092:	bf00      	nop
 801e094:	af5f35cc 	.word	0xaf5f35cc
 801e098:	af5f584c 	.word	0xaf5f584c
 801e09c:	0006000c 	.word	0x0006000c

0801e0a0 <ull_setleds>:
 801e0a0:	b530      	push	{r4, r5, lr}
 801e0a2:	b083      	sub	sp, #12
 801e0a4:	4604      	mov	r4, r0
 801e0a6:	f011 0f01 	tst.w	r1, #1
 801e0aa:	d01f      	beq.n	801e0ec <ull_setleds+0x4c>
 801e0ac:	460d      	mov	r5, r1
 801e0ae:	f44f 7310 	mov.w	r3, #576	; 0x240
 801e0b2:	9300      	str	r3, [sp, #0]
 801e0b4:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 801e0b8:	2200      	movs	r2, #0
 801e0ba:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801e0be:	f7ff fab1 	bl	801d624 <dwt_modify32bitoffsetreg>
 801e0c2:	f44f 0304 	mov.w	r3, #8650752	; 0x840000
 801e0c6:	9300      	str	r3, [sp, #0]
 801e0c8:	f04f 33ff 	mov.w	r3, #4294967295
 801e0cc:	2200      	movs	r2, #0
 801e0ce:	4918      	ldr	r1, [pc, #96]	; (801e130 <ull_setleds+0x90>)
 801e0d0:	4620      	mov	r0, r4
 801e0d2:	f7ff faa7 	bl	801d624 <dwt_modify32bitoffsetreg>
 801e0d6:	f015 0f02 	tst.w	r5, #2
 801e0da:	d11a      	bne.n	801e112 <ull_setleds+0x72>
 801e0dc:	f44f 7388 	mov.w	r3, #272	; 0x110
 801e0e0:	2200      	movs	r2, #0
 801e0e2:	4914      	ldr	r1, [pc, #80]	; (801e134 <ull_setleds+0x94>)
 801e0e4:	4620      	mov	r0, r4
 801e0e6:	f7fe fd97 	bl	801cc18 <dwt_write32bitoffsetreg>
 801e0ea:	e010      	b.n	801e10e <ull_setleds+0x6e>
 801e0ec:	2500      	movs	r5, #0
 801e0ee:	9500      	str	r5, [sp, #0]
 801e0f0:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 801e0f4:	462a      	mov	r2, r5
 801e0f6:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801e0fa:	f7ff fa93 	bl	801d624 <dwt_modify32bitoffsetreg>
 801e0fe:	9500      	str	r5, [sp, #0]
 801e100:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801e104:	462a      	mov	r2, r5
 801e106:	490b      	ldr	r1, [pc, #44]	; (801e134 <ull_setleds+0x94>)
 801e108:	4620      	mov	r0, r4
 801e10a:	f7ff ff8b 	bl	801e024 <dwt_modify16bitoffsetreg>
 801e10e:	b003      	add	sp, #12
 801e110:	bd30      	pop	{r4, r5, pc}
 801e112:	4d08      	ldr	r5, [pc, #32]	; (801e134 <ull_setleds+0x94>)
 801e114:	4b08      	ldr	r3, [pc, #32]	; (801e138 <ull_setleds+0x98>)
 801e116:	2200      	movs	r2, #0
 801e118:	4629      	mov	r1, r5
 801e11a:	4620      	mov	r0, r4
 801e11c:	f7fe fd7c 	bl	801cc18 <dwt_write32bitoffsetreg>
 801e120:	f44f 7388 	mov.w	r3, #272	; 0x110
 801e124:	2200      	movs	r2, #0
 801e126:	4629      	mov	r1, r5
 801e128:	4620      	mov	r0, r4
 801e12a:	f7fe fd75 	bl	801cc18 <dwt_write32bitoffsetreg>
 801e12e:	e7ee      	b.n	801e10e <ull_setleds+0x6e>
 801e130:	00110004 	.word	0x00110004
 801e134:	00110018 	.word	0x00110018
 801e138:	000f0110 	.word	0x000f0110

0801e13c <ull_pgf_cal>:
 801e13c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e13e:	b083      	sub	sp, #12
 801e140:	4604      	mov	r4, r0
 801e142:	2901      	cmp	r1, #1
 801e144:	d009      	beq.n	801e15a <ull_pgf_cal+0x1e>
 801e146:	2014      	movs	r0, #20
 801e148:	f7e2 fd1f 	bl	8000b8a <deca_usleep>
 801e14c:	4620      	mov	r0, r4
 801e14e:	f7ff fe8b 	bl	801de68 <ull_run_pgfcal>
 801e152:	4605      	mov	r5, r0
 801e154:	4628      	mov	r0, r5
 801e156:	b003      	add	sp, #12
 801e158:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e15a:	4e0f      	ldr	r6, [pc, #60]	; (801e198 <ull_pgf_cal+0x5c>)
 801e15c:	2200      	movs	r2, #0
 801e15e:	4631      	mov	r1, r6
 801e160:	f7fe f891 	bl	801c286 <dwt_read16bitoffsetreg>
 801e164:	4607      	mov	r7, r0
 801e166:	f240 1307 	movw	r3, #263	; 0x107
 801e16a:	9300      	str	r3, [sp, #0]
 801e16c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e170:	2200      	movs	r2, #0
 801e172:	4631      	mov	r1, r6
 801e174:	4620      	mov	r0, r4
 801e176:	f7ff ff55 	bl	801e024 <dwt_modify16bitoffsetreg>
 801e17a:	2014      	movs	r0, #20
 801e17c:	f7e2 fd05 	bl	8000b8a <deca_usleep>
 801e180:	4620      	mov	r0, r4
 801e182:	f7ff fe71 	bl	801de68 <ull_run_pgfcal>
 801e186:	4605      	mov	r5, r0
 801e188:	2200      	movs	r2, #0
 801e18a:	9200      	str	r2, [sp, #0]
 801e18c:	463b      	mov	r3, r7
 801e18e:	4631      	mov	r1, r6
 801e190:	4620      	mov	r0, r4
 801e192:	f7ff ff47 	bl	801e024 <dwt_modify16bitoffsetreg>
 801e196:	e7dd      	b.n	801e154 <ull_pgf_cal+0x18>
 801e198:	00070048 	.word	0x00070048

0801e19c <ull_setgpiovalue>:
 801e19c:	b500      	push	{lr}
 801e19e:	b083      	sub	sp, #12
 801e1a0:	2a01      	cmp	r2, #1
 801e1a2:	d009      	beq.n	801e1b8 <ull_setgpiovalue+0x1c>
 801e1a4:	43cb      	mvns	r3, r1
 801e1a6:	2200      	movs	r2, #0
 801e1a8:	9200      	str	r2, [sp, #0]
 801e1aa:	b29b      	uxth	r3, r3
 801e1ac:	4906      	ldr	r1, [pc, #24]	; (801e1c8 <ull_setgpiovalue+0x2c>)
 801e1ae:	f7ff ff39 	bl	801e024 <dwt_modify16bitoffsetreg>
 801e1b2:	b003      	add	sp, #12
 801e1b4:	f85d fb04 	ldr.w	pc, [sp], #4
 801e1b8:	9100      	str	r1, [sp, #0]
 801e1ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e1be:	2200      	movs	r2, #0
 801e1c0:	4901      	ldr	r1, [pc, #4]	; (801e1c8 <ull_setgpiovalue+0x2c>)
 801e1c2:	f7ff ff2f 	bl	801e024 <dwt_modify16bitoffsetreg>
 801e1c6:	e7f4      	b.n	801e1b2 <ull_setgpiovalue+0x16>
 801e1c8:	0005000c 	.word	0x0005000c

0801e1cc <ull_readaccdata>:
 801e1cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e1ce:	b083      	sub	sp, #12
 801e1d0:	4604      	mov	r4, r0
 801e1d2:	460f      	mov	r7, r1
 801e1d4:	4616      	mov	r6, r2
 801e1d6:	461d      	mov	r5, r3
 801e1d8:	f248 0340 	movw	r3, #32832	; 0x8040
 801e1dc:	9300      	str	r3, [sp, #0]
 801e1de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e1e2:	2200      	movs	r2, #0
 801e1e4:	4918      	ldr	r1, [pc, #96]	; (801e248 <ull_readaccdata+0x7c>)
 801e1e6:	f7ff ff1d 	bl	801e024 <dwt_modify16bitoffsetreg>
 801e1ea:	19aa      	adds	r2, r5, r6
 801e1ec:	f243 0301 	movw	r3, #12289	; 0x3001
 801e1f0:	429a      	cmp	r2, r3
 801e1f2:	dc15      	bgt.n	801e220 <ull_readaccdata+0x54>
 801e1f4:	2d7f      	cmp	r5, #127	; 0x7f
 801e1f6:	d91d      	bls.n	801e234 <ull_readaccdata+0x68>
 801e1f8:	2315      	movs	r3, #21
 801e1fa:	2200      	movs	r2, #0
 801e1fc:	4913      	ldr	r1, [pc, #76]	; (801e24c <ull_readaccdata+0x80>)
 801e1fe:	4620      	mov	r0, r4
 801e200:	f7fe fd0a 	bl	801cc18 <dwt_write32bitoffsetreg>
 801e204:	462b      	mov	r3, r5
 801e206:	2200      	movs	r2, #0
 801e208:	4911      	ldr	r1, [pc, #68]	; (801e250 <ull_readaccdata+0x84>)
 801e20a:	4620      	mov	r0, r4
 801e20c:	f7fe fd04 	bl	801cc18 <dwt_write32bitoffsetreg>
 801e210:	9700      	str	r7, [sp, #0]
 801e212:	4633      	mov	r3, r6
 801e214:	2200      	movs	r2, #0
 801e216:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 801e21a:	4620      	mov	r0, r4
 801e21c:	f7fe f813 	bl	801c246 <dwt_readfromdevice>
 801e220:	2200      	movs	r2, #0
 801e222:	9200      	str	r2, [sp, #0]
 801e224:	f647 73bf 	movw	r3, #32703	; 0x7fbf
 801e228:	4907      	ldr	r1, [pc, #28]	; (801e248 <ull_readaccdata+0x7c>)
 801e22a:	4620      	mov	r0, r4
 801e22c:	f7ff fefa 	bl	801e024 <dwt_modify16bitoffsetreg>
 801e230:	b003      	add	sp, #12
 801e232:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e234:	9700      	str	r7, [sp, #0]
 801e236:	4633      	mov	r3, r6
 801e238:	462a      	mov	r2, r5
 801e23a:	f44f 11a8 	mov.w	r1, #1376256	; 0x150000
 801e23e:	4620      	mov	r0, r4
 801e240:	f7fe f801 	bl	801c246 <dwt_readfromdevice>
 801e244:	e7ec      	b.n	801e220 <ull_readaccdata+0x54>
 801e246:	bf00      	nop
 801e248:	00110004 	.word	0x00110004
 801e24c:	001f0004 	.word	0x001f0004
 801e250:	001f0008 	.word	0x001f0008

0801e254 <ull_configure>:
 801e254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e258:	b083      	sub	sp, #12
 801e25a:	4604      	mov	r4, r0
 801e25c:	460d      	mov	r5, r1
 801e25e:	f891 9000 	ldrb.w	r9, [r1]
 801e262:	790b      	ldrb	r3, [r1, #4]
 801e264:	2b18      	cmp	r3, #24
 801e266:	d814      	bhi.n	801e292 <ull_configure+0x3e>
 801e268:	78cf      	ldrb	r7, [r1, #3]
 801e26a:	2f18      	cmp	r7, #24
 801e26c:	bf94      	ite	ls
 801e26e:	2700      	movls	r7, #0
 801e270:	2701      	movhi	r7, #1
 801e272:	b2ff      	uxtb	r7, r7
 801e274:	79eb      	ldrb	r3, [r5, #7]
 801e276:	2b01      	cmp	r3, #1
 801e278:	bf0c      	ite	eq
 801e27a:	2110      	moveq	r1, #16
 801e27c:	2100      	movne	r1, #0
 801e27e:	786b      	ldrb	r3, [r5, #1]
 801e280:	3b01      	subs	r3, #1
 801e282:	2b06      	cmp	r3, #6
 801e284:	d810      	bhi.n	801e2a8 <ull_configure+0x54>
 801e286:	e8df f003 	tbb	[pc, r3]
 801e28a:	0f06      	.short	0x0f06
 801e28c:	0f0c120f 	.word	0x0f0c120f
 801e290:	09          	.byte	0x09
 801e291:	00          	.byte	0x00
 801e292:	2701      	movs	r7, #1
 801e294:	e7ed      	b.n	801e272 <ull_configure+0x1e>
 801e296:	f04f 0a40 	mov.w	sl, #64	; 0x40
 801e29a:	e00a      	b.n	801e2b2 <ull_configure+0x5e>
 801e29c:	f04f 0a48 	mov.w	sl, #72	; 0x48
 801e2a0:	e007      	b.n	801e2b2 <ull_configure+0x5e>
 801e2a2:	f04f 0a80 	mov.w	sl, #128	; 0x80
 801e2a6:	e004      	b.n	801e2b2 <ull_configure+0x5e>
 801e2a8:	f44f 7a80 	mov.w	sl, #256	; 0x100
 801e2ac:	e001      	b.n	801e2b2 <ull_configure+0x5e>
 801e2ae:	f04f 0a20 	mov.w	sl, #32
 801e2b2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 801e2b4:	8a13      	ldrh	r3, [r2, #16]
 801e2b6:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 801e2ba:	8213      	strh	r3, [r2, #16]
 801e2bc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801e2be:	79ea      	ldrb	r2, [r5, #7]
 801e2c0:	72da      	strb	r2, [r3, #11]
 801e2c2:	7b2e      	ldrb	r6, [r5, #12]
 801e2c4:	1cb3      	adds	r3, r6, #2
 801e2c6:	2601      	movs	r6, #1
 801e2c8:	409e      	lsls	r6, r3
 801e2ca:	fa1f f886 	uxth.w	r8, r6
 801e2ce:	6d22      	ldr	r2, [r4, #80]	; 0x50
 801e2d0:	4bca      	ldr	r3, [pc, #808]	; (801e5fc <ull_configure+0x3a8>)
 801e2d2:	fb03 f308 	mul.w	r3, r3, r8
 801e2d6:	0bdb      	lsrs	r3, r3, #15
 801e2d8:	8253      	strh	r3, [r2, #18]
 801e2da:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801e2dc:	7aea      	ldrb	r2, [r5, #11]
 801e2de:	755a      	strb	r2, [r3, #21]
 801e2e0:	7a2b      	ldrb	r3, [r5, #8]
 801e2e2:	015b      	lsls	r3, r3, #5
 801e2e4:	f003 0320 	and.w	r3, r3, #32
 801e2e8:	7b6a      	ldrb	r2, [r5, #13]
 801e2ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801e2ee:	7aea      	ldrb	r2, [r5, #11]
 801e2f0:	0312      	lsls	r2, r2, #12
 801e2f2:	f402 4230 	and.w	r2, r2, #45056	; 0xb000
 801e2f6:	4313      	orrs	r3, r2
 801e2f8:	430b      	orrs	r3, r1
 801e2fa:	9300      	str	r3, [sp, #0]
 801e2fc:	4bc0      	ldr	r3, [pc, #768]	; (801e600 <ull_configure+0x3ac>)
 801e2fe:	2200      	movs	r2, #0
 801e300:	2110      	movs	r1, #16
 801e302:	4620      	mov	r0, r4
 801e304:	f7ff f98e 	bl	801d624 <dwt_modify32bitoffsetreg>
 801e308:	2f00      	cmp	r7, #0
 801e30a:	f040 80fe 	bne.w	801e50a <ull_configure+0x2b6>
 801e30e:	7aeb      	ldrb	r3, [r5, #11]
 801e310:	b1bb      	cbz	r3, 801e342 <ull_configure+0xee>
 801e312:	7b6b      	ldrb	r3, [r5, #13]
 801e314:	2b01      	cmp	r3, #1
 801e316:	7b28      	ldrb	r0, [r5, #12]
 801e318:	bf94      	ite	ls
 801e31a:	2203      	movls	r2, #3
 801e31c:	2204      	movhi	r2, #4
 801e31e:	2110      	movs	r1, #16
 801e320:	4bb8      	ldr	r3, [pc, #736]	; (801e604 <ull_configure+0x3b0>)
 801e322:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801e326:	f7fd fef3 	bl	801c110 <get_sts_mnth>
 801e32a:	eb0a 0ac8 	add.w	sl, sl, r8, lsl #3
 801e32e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801e332:	9000      	str	r0, [sp, #0]
 801e334:	f64f 7380 	movw	r3, #65408	; 0xff80
 801e338:	2202      	movs	r2, #2
 801e33a:	49b3      	ldr	r1, [pc, #716]	; (801e608 <ull_configure+0x3b4>)
 801e33c:	4620      	mov	r0, r4
 801e33e:	f7ff fe71 	bl	801e024 <dwt_modify16bitoffsetreg>
 801e342:	2394      	movs	r3, #148	; 0x94
 801e344:	9300      	str	r3, [sp, #0]
 801e346:	4bb1      	ldr	r3, [pc, #708]	; (801e60c <ull_configure+0x3b8>)
 801e348:	2200      	movs	r2, #0
 801e34a:	49b1      	ldr	r1, [pc, #708]	; (801e610 <ull_configure+0x3bc>)
 801e34c:	4620      	mov	r0, r4
 801e34e:	f7ff f969 	bl	801d624 <dwt_modify32bitoffsetreg>
 801e352:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801e356:	f340 8103 	ble.w	801e560 <ull_configure+0x30c>
 801e35a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 801e35c:	8a13      	ldrh	r3, [r2, #16]
 801e35e:	f043 0320 	orr.w	r3, r3, #32
 801e362:	8213      	strh	r3, [r2, #16]
 801e364:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801e368:	9300      	str	r3, [sp, #0]
 801e36a:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 801e36e:	2200      	movs	r2, #0
 801e370:	49a8      	ldr	r1, [pc, #672]	; (801e614 <ull_configure+0x3c0>)
 801e372:	4620      	mov	r0, r4
 801e374:	f7ff fe56 	bl	801e024 <dwt_modify16bitoffsetreg>
 801e378:	7b6b      	ldrb	r3, [r5, #13]
 801e37a:	2b01      	cmp	r3, #1
 801e37c:	f000 80fb 	beq.w	801e576 <ull_configure+0x322>
 801e380:	78ab      	ldrb	r3, [r5, #2]
 801e382:	f043 0310 	orr.w	r3, r3, #16
 801e386:	9300      	str	r3, [sp, #0]
 801e388:	23fc      	movs	r3, #252	; 0xfc
 801e38a:	2200      	movs	r2, #0
 801e38c:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 801e390:	4620      	mov	r0, r4
 801e392:	f7ff fab7 	bl	801d904 <dwt_modify8bitoffsetreg>
 801e396:	1e73      	subs	r3, r6, #1
 801e398:	b2db      	uxtb	r3, r3
 801e39a:	2200      	movs	r2, #0
 801e39c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801e3a0:	4620      	mov	r0, r4
 801e3a2:	f7fe fe1d 	bl	801cfe0 <dwt_write8bitoffsetreg>
 801e3a6:	786b      	ldrb	r3, [r5, #1]
 801e3a8:	2b07      	cmp	r3, #7
 801e3aa:	bf0c      	ite	eq
 801e3ac:	2108      	moveq	r1, #8
 801e3ae:	2100      	movne	r1, #0
 801e3b0:	4620      	mov	r0, r4
 801e3b2:	f7fe ff1b 	bl	801d1ec <ull_setplenfine>
 801e3b6:	7aeb      	ldrb	r3, [r5, #11]
 801e3b8:	f003 0303 	and.w	r3, r3, #3
 801e3bc:	2b03      	cmp	r3, #3
 801e3be:	bf0c      	ite	eq
 801e3c0:	4b95      	ldreq	r3, [pc, #596]	; (801e618 <ull_configure+0x3c4>)
 801e3c2:	4b96      	ldrne	r3, [pc, #600]	; (801e61c <ull_configure+0x3c8>)
 801e3c4:	2200      	movs	r2, #0
 801e3c6:	4996      	ldr	r1, [pc, #600]	; (801e620 <ull_configure+0x3cc>)
 801e3c8:	4620      	mov	r0, r4
 801e3ca:	f7fe fc25 	bl	801cc18 <dwt_write32bitoffsetreg>
 801e3ce:	2200      	movs	r2, #0
 801e3d0:	4994      	ldr	r1, [pc, #592]	; (801e624 <ull_configure+0x3d0>)
 801e3d2:	4620      	mov	r0, r4
 801e3d4:	f7fd ff41 	bl	801c25a <dwt_read32bitoffsetreg>
 801e3d8:	f420 50ff 	bic.w	r0, r0, #8160	; 0x1fe0
 801e3dc:	f020 001f 	bic.w	r0, r0, #31
 801e3e0:	f1b9 0f09 	cmp.w	r9, #9
 801e3e4:	bf08      	it	eq
 801e3e6:	f040 0001 	orreq.w	r0, r0, #1
 801e3ea:	792a      	ldrb	r2, [r5, #4]
 801e3ec:	0212      	lsls	r2, r2, #8
 801e3ee:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
 801e3f2:	78eb      	ldrb	r3, [r5, #3]
 801e3f4:	00db      	lsls	r3, r3, #3
 801e3f6:	b2db      	uxtb	r3, r3
 801e3f8:	431a      	orrs	r2, r3
 801e3fa:	796b      	ldrb	r3, [r5, #5]
 801e3fc:	005b      	lsls	r3, r3, #1
 801e3fe:	f003 0306 	and.w	r3, r3, #6
 801e402:	4313      	orrs	r3, r2
 801e404:	4303      	orrs	r3, r0
 801e406:	2200      	movs	r2, #0
 801e408:	4986      	ldr	r1, [pc, #536]	; (801e624 <ull_configure+0x3d0>)
 801e40a:	4620      	mov	r0, r4
 801e40c:	f7fe fc04 	bl	801cc18 <dwt_write32bitoffsetreg>
 801e410:	79aa      	ldrb	r2, [r5, #6]
 801e412:	786b      	ldrb	r3, [r5, #1]
 801e414:	031b      	lsls	r3, r3, #12
 801e416:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 801e41a:	9300      	str	r3, [sp, #0]
 801e41c:	f46f 4374 	mvn.w	r3, #62464	; 0xf400
 801e420:	2200      	movs	r2, #0
 801e422:	2120      	movs	r1, #32
 801e424:	4620      	mov	r0, r4
 801e426:	f7ff f8fd 	bl	801d624 <dwt_modify32bitoffsetreg>
 801e42a:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 801e42e:	b923      	cbnz	r3, 801e43a <ull_configure+0x1e6>
 801e430:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 801e434:	726b      	strb	r3, [r5, #9]
 801e436:	2300      	movs	r3, #0
 801e438:	72ab      	strb	r3, [r5, #10]
 801e43a:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 801e43e:	2202      	movs	r2, #2
 801e440:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 801e444:	4620      	mov	r0, r4
 801e446:	f7fe fb7c 	bl	801cb42 <dwt_write16bitoffsetreg>
 801e44a:	2202      	movs	r2, #2
 801e44c:	4976      	ldr	r1, [pc, #472]	; (801e628 <ull_configure+0x3d4>)
 801e44e:	4620      	mov	r0, r4
 801e450:	f7fd ff58 	bl	801c304 <dwt_read8bitoffsetreg>
 801e454:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801e456:	7bdb      	ldrb	r3, [r3, #15]
 801e458:	454b      	cmp	r3, r9
 801e45a:	f000 8096 	beq.w	801e58a <ull_configure+0x336>
 801e45e:	2803      	cmp	r0, #3
 801e460:	f000 8097 	beq.w	801e592 <ull_configure+0x33e>
 801e464:	f1b9 0f09 	cmp.w	r9, #9
 801e468:	f000 8098 	beq.w	801e59c <ull_configure+0x348>
 801e46c:	4b6f      	ldr	r3, [pc, #444]	; (801e62c <ull_configure+0x3d8>)
 801e46e:	9300      	str	r3, [sp, #0]
 801e470:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801e474:	2200      	movs	r2, #0
 801e476:	496e      	ldr	r1, [pc, #440]	; (801e630 <ull_configure+0x3dc>)
 801e478:	4620      	mov	r0, r4
 801e47a:	f7ff f8d3 	bl	801d624 <dwt_modify32bitoffsetreg>
 801e47e:	f641 733c 	movw	r3, #7996	; 0x1f3c
 801e482:	2200      	movs	r2, #0
 801e484:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 801e488:	4620      	mov	r0, r4
 801e48a:	f7fe fb5a 	bl	801cb42 <dwt_write16bitoffsetreg>
 801e48e:	2314      	movs	r3, #20
 801e490:	2201      	movs	r2, #1
 801e492:	4968      	ldr	r1, [pc, #416]	; (801e634 <ull_configure+0x3e0>)
 801e494:	4620      	mov	r0, r4
 801e496:	f7fe fda3 	bl	801cfe0 <dwt_write8bitoffsetreg>
 801e49a:	230e      	movs	r3, #14
 801e49c:	2202      	movs	r2, #2
 801e49e:	4966      	ldr	r1, [pc, #408]	; (801e638 <ull_configure+0x3e4>)
 801e4a0:	4620      	mov	r0, r4
 801e4a2:	f7fe fd9d 	bl	801cfe0 <dwt_write8bitoffsetreg>
 801e4a6:	2381      	movs	r3, #129	; 0x81
 801e4a8:	2200      	movs	r2, #0
 801e4aa:	4964      	ldr	r1, [pc, #400]	; (801e63c <ull_configure+0x3e8>)
 801e4ac:	4620      	mov	r0, r4
 801e4ae:	f7fe fd97 	bl	801cfe0 <dwt_write8bitoffsetreg>
 801e4b2:	2600      	movs	r6, #0
 801e4b4:	9600      	str	r6, [sp, #0]
 801e4b6:	23fc      	movs	r3, #252	; 0xfc
 801e4b8:	2203      	movs	r2, #3
 801e4ba:	4961      	ldr	r1, [pc, #388]	; (801e640 <ull_configure+0x3ec>)
 801e4bc:	4620      	mov	r0, r4
 801e4be:	f7ff fa21 	bl	801d904 <dwt_modify8bitoffsetreg>
 801e4c2:	2302      	movs	r3, #2
 801e4c4:	4632      	mov	r2, r6
 801e4c6:	2144      	movs	r1, #68	; 0x44
 801e4c8:	4620      	mov	r0, r4
 801e4ca:	f7fe fd89 	bl	801cfe0 <dwt_write8bitoffsetreg>
 801e4ce:	2101      	movs	r1, #1
 801e4d0:	4620      	mov	r0, r4
 801e4d2:	f7ff fc47 	bl	801dd64 <ull_setdwstate>
 801e4d6:	f04f 0b32 	mov.w	fp, #50	; 0x32
 801e4da:	f04f 0814 	mov.w	r8, #20
 801e4de:	4637      	mov	r7, r6
 801e4e0:	2644      	movs	r6, #68	; 0x44
 801e4e2:	4640      	mov	r0, r8
 801e4e4:	f7e2 fb51 	bl	8000b8a <deca_usleep>
 801e4e8:	463a      	mov	r2, r7
 801e4ea:	4631      	mov	r1, r6
 801e4ec:	4620      	mov	r0, r4
 801e4ee:	f7fd ff09 	bl	801c304 <dwt_read8bitoffsetreg>
 801e4f2:	f010 0f02 	tst.w	r0, #2
 801e4f6:	f040 80af 	bne.w	801e658 <ull_configure+0x404>
 801e4fa:	f10b 33ff 	add.w	r3, fp, #4294967295
 801e4fe:	f013 0bff 	ands.w	fp, r3, #255	; 0xff
 801e502:	d1ee      	bne.n	801e4e2 <ull_configure+0x28e>
 801e504:	f06f 0001 	mvn.w	r0, #1
 801e508:	e0e6      	b.n	801e6d8 <ull_configure+0x484>
 801e50a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 801e50c:	8a13      	ldrh	r3, [r2, #16]
 801e50e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 801e512:	8213      	strh	r3, [r2, #16]
 801e514:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801e518:	9300      	str	r3, [sp, #0]
 801e51a:	f46f 5340 	mvn.w	r3, #12288	; 0x3000
 801e51e:	2200      	movs	r2, #0
 801e520:	493c      	ldr	r1, [pc, #240]	; (801e614 <ull_configure+0x3c0>)
 801e522:	4620      	mov	r0, r4
 801e524:	f7ff f87e 	bl	801d624 <dwt_modify32bitoffsetreg>
 801e528:	f240 3306 	movw	r3, #774	; 0x306
 801e52c:	2200      	movs	r2, #0
 801e52e:	4945      	ldr	r1, [pc, #276]	; (801e644 <ull_configure+0x3f0>)
 801e530:	4620      	mov	r0, r4
 801e532:	f7fe fb71 	bl	801cc18 <dwt_write32bitoffsetreg>
 801e536:	2300      	movs	r3, #0
 801e538:	461a      	mov	r2, r3
 801e53a:	4943      	ldr	r1, [pc, #268]	; (801e648 <ull_configure+0x3f4>)
 801e53c:	4620      	mov	r0, r4
 801e53e:	f7fe fb6b 	bl	801cc18 <dwt_write32bitoffsetreg>
 801e542:	4b42      	ldr	r3, [pc, #264]	; (801e64c <ull_configure+0x3f8>)
 801e544:	2200      	movs	r2, #0
 801e546:	4930      	ldr	r1, [pc, #192]	; (801e608 <ull_configure+0x3b4>)
 801e548:	4620      	mov	r0, r4
 801e54a:	f7fe fb65 	bl	801cc18 <dwt_write32bitoffsetreg>
 801e54e:	239d      	movs	r3, #157	; 0x9d
 801e550:	9300      	str	r3, [sp, #0]
 801e552:	4b2e      	ldr	r3, [pc, #184]	; (801e60c <ull_configure+0x3b8>)
 801e554:	2200      	movs	r2, #0
 801e556:	492e      	ldr	r1, [pc, #184]	; (801e610 <ull_configure+0x3bc>)
 801e558:	4620      	mov	r0, r4
 801e55a:	f7ff f863 	bl	801d624 <dwt_modify32bitoffsetreg>
 801e55e:	e70b      	b.n	801e378 <ull_configure+0x124>
 801e560:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 801e564:	9300      	str	r3, [sp, #0]
 801e566:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 801e56a:	2200      	movs	r2, #0
 801e56c:	4929      	ldr	r1, [pc, #164]	; (801e614 <ull_configure+0x3c0>)
 801e56e:	4620      	mov	r0, r4
 801e570:	f7ff fd58 	bl	801e024 <dwt_modify16bitoffsetreg>
 801e574:	e700      	b.n	801e378 <ull_configure+0x124>
 801e576:	78ab      	ldrb	r3, [r5, #2]
 801e578:	9300      	str	r3, [sp, #0]
 801e57a:	23ec      	movs	r3, #236	; 0xec
 801e57c:	2200      	movs	r2, #0
 801e57e:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 801e582:	4620      	mov	r0, r4
 801e584:	f7ff f9be 	bl	801d904 <dwt_modify8bitoffsetreg>
 801e588:	e705      	b.n	801e396 <ull_configure+0x142>
 801e58a:	2803      	cmp	r0, #3
 801e58c:	f47f af6a 	bne.w	801e464 <ull_configure+0x210>
 801e590:	e065      	b.n	801e65e <ull_configure+0x40a>
 801e592:	2102      	movs	r1, #2
 801e594:	4620      	mov	r0, r4
 801e596:	f7ff fbe5 	bl	801dd64 <ull_setdwstate>
 801e59a:	e763      	b.n	801e464 <ull_configure+0x210>
 801e59c:	4b2c      	ldr	r3, [pc, #176]	; (801e650 <ull_configure+0x3fc>)
 801e59e:	9300      	str	r3, [sp, #0]
 801e5a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801e5a4:	2200      	movs	r2, #0
 801e5a6:	4922      	ldr	r1, [pc, #136]	; (801e630 <ull_configure+0x3dc>)
 801e5a8:	4620      	mov	r0, r4
 801e5aa:	f7ff f83b 	bl	801d624 <dwt_modify32bitoffsetreg>
 801e5ae:	f640 733c 	movw	r3, #3900	; 0xf3c
 801e5b2:	2200      	movs	r2, #0
 801e5b4:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 801e5b8:	4620      	mov	r0, r4
 801e5ba:	f7fe fac2 	bl	801cb42 <dwt_write16bitoffsetreg>
 801e5be:	e766      	b.n	801e48e <ull_configure+0x23a>
 801e5c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 801e5c4:	9300      	str	r3, [sp, #0]
 801e5c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e5ca:	2200      	movs	r2, #0
 801e5cc:	4911      	ldr	r1, [pc, #68]	; (801e614 <ull_configure+0x3c0>)
 801e5ce:	4620      	mov	r0, r4
 801e5d0:	f7ff fd28 	bl	801e024 <dwt_modify16bitoffsetreg>
 801e5d4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 801e5d6:	8a13      	ldrh	r3, [r2, #16]
 801e5d8:	f043 0308 	orr.w	r3, r3, #8
 801e5dc:	8213      	strh	r3, [r2, #16]
 801e5de:	e050      	b.n	801e682 <ull_configure+0x42e>
 801e5e0:	2200      	movs	r2, #0
 801e5e2:	9200      	str	r2, [sp, #0]
 801e5e4:	23fe      	movs	r3, #254	; 0xfe
 801e5e6:	491b      	ldr	r1, [pc, #108]	; (801e654 <ull_configure+0x400>)
 801e5e8:	4620      	mov	r0, r4
 801e5ea:	f7ff f98b 	bl	801d904 <dwt_modify8bitoffsetreg>
 801e5ee:	e052      	b.n	801e696 <ull_configure+0x442>
 801e5f0:	2101      	movs	r1, #1
 801e5f2:	4620      	mov	r0, r4
 801e5f4:	f7ff fda2 	bl	801e13c <ull_pgf_cal>
 801e5f8:	e06b      	b.n	801e6d2 <ull_configure+0x47e>
 801e5fa:	bf00      	nop
 801e5fc:	00026668 	.word	0x00026668
 801e600:	fffc4fcf 	.word	0xfffc4fcf
 801e604:	0802146c 	.word	0x0802146c
 801e608:	000e0014 	.word	0x000e0014
 801e60c:	bfffff00 	.word	0xbfffff00
 801e610:	000e0018 	.word	0x000e0018
 801e614:	000b0008 	.word	0x000b0008
 801e618:	af5f35cc 	.word	0xaf5f35cc
 801e61c:	af5f584c 	.word	0xaf5f584c
 801e620:	0006000c 	.word	0x0006000c
 801e624:	00010008 	.word	0x00010008
 801e628:	000f0030 	.word	0x000f0030
 801e62c:	1c071134 	.word	0x1c071134
 801e630:	0007001c 	.word	0x0007001c
 801e634:	00070050 	.word	0x00070050
 801e638:	00070018 	.word	0x00070018
 801e63c:	00090008 	.word	0x00090008
 801e640:	00090004 	.word	0x00090004
 801e644:	000e000c 	.word	0x000e000c
 801e648:	000e0010 	.word	0x000e0010
 801e64c:	000c5a0a 	.word	0x000c5a0a
 801e650:	1c010034 	.word	0x1c010034
 801e654:	00030018 	.word	0x00030018
 801e658:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801e65a:	f883 900f 	strb.w	r9, [r3, #15]
 801e65e:	792b      	ldrb	r3, [r5, #4]
 801e660:	3b09      	subs	r3, #9
 801e662:	b2db      	uxtb	r3, r3
 801e664:	2b0f      	cmp	r3, #15
 801e666:	d8bb      	bhi.n	801e5e0 <ull_configure+0x38c>
 801e668:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801e66a:	7a1b      	ldrb	r3, [r3, #8]
 801e66c:	2b01      	cmp	r3, #1
 801e66e:	d0a7      	beq.n	801e5c0 <ull_configure+0x36c>
 801e670:	4649      	mov	r1, r9
 801e672:	4620      	mov	r0, r4
 801e674:	f7fe fb9c 	bl	801cdb0 <ull_configmrxlut>
 801e678:	6d22      	ldr	r2, [r4, #80]	; 0x50
 801e67a:	8a13      	ldrh	r3, [r2, #16]
 801e67c:	f023 0308 	bic.w	r3, r3, #8
 801e680:	8213      	strh	r3, [r2, #16]
 801e682:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 801e686:	9300      	str	r3, [sp, #0]
 801e688:	f248 13ff 	movw	r3, #33279	; 0x81ff
 801e68c:	2200      	movs	r2, #0
 801e68e:	4914      	ldr	r1, [pc, #80]	; (801e6e0 <ull_configure+0x48c>)
 801e690:	4620      	mov	r0, r4
 801e692:	f7ff fcc7 	bl	801e024 <dwt_modify16bitoffsetreg>
 801e696:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 801e69a:	bfcc      	ite	gt
 801e69c:	f04f 5300 	movgt.w	r3, #536870912	; 0x20000000
 801e6a0:	f04f 53a0 	movle.w	r3, #335544320	; 0x14000000
 801e6a4:	9300      	str	r3, [sp, #0]
 801e6a6:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801e6aa:	2200      	movs	r2, #0
 801e6ac:	490d      	ldr	r1, [pc, #52]	; (801e6e4 <ull_configure+0x490>)
 801e6ae:	4620      	mov	r0, r4
 801e6b0:	f7fe ffb8 	bl	801d624 <dwt_modify32bitoffsetreg>
 801e6b4:	2301      	movs	r3, #1
 801e6b6:	9300      	str	r3, [sp, #0]
 801e6b8:	23ff      	movs	r3, #255	; 0xff
 801e6ba:	2202      	movs	r2, #2
 801e6bc:	490a      	ldr	r1, [pc, #40]	; (801e6e8 <ull_configure+0x494>)
 801e6be:	4620      	mov	r0, r4
 801e6c0:	f7ff f920 	bl	801d904 <dwt_modify8bitoffsetreg>
 801e6c4:	2200      	movs	r2, #0
 801e6c6:	4909      	ldr	r1, [pc, #36]	; (801e6ec <ull_configure+0x498>)
 801e6c8:	4620      	mov	r0, r4
 801e6ca:	f7fd fdc6 	bl	801c25a <dwt_read32bitoffsetreg>
 801e6ce:	2800      	cmp	r0, #0
 801e6d0:	d08e      	beq.n	801e5f0 <ull_configure+0x39c>
 801e6d2:	4620      	mov	r0, r4
 801e6d4:	f7ff f98a 	bl	801d9ec <ull_adcoffsetscalibration>
 801e6d8:	b003      	add	sp, #12
 801e6da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e6de:	bf00      	nop
 801e6e0:	00030018 	.word	0x00030018
 801e6e4:	00060010 	.word	0x00060010
 801e6e8:	0004000c 	.word	0x0004000c
 801e6ec:	00040014 	.word	0x00040014

0801e6f0 <ull_initialise>:
 801e6f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e6f4:	b082      	sub	sp, #8
 801e6f6:	4605      	mov	r5, r0
 801e6f8:	460e      	mov	r6, r1
 801e6fa:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801e6fc:	2b00      	cmp	r3, #0
 801e6fe:	d05b      	beq.n	801e7b8 <ull_initialise+0xc8>
 801e700:	6d2c      	ldr	r4, [r5, #80]	; 0x50
 801e702:	2300      	movs	r3, #0
 801e704:	73a3      	strb	r3, [r4, #14]
 801e706:	2202      	movs	r2, #2
 801e708:	8222      	strh	r2, [r4, #16]
 801e70a:	7523      	strb	r3, [r4, #20]
 801e70c:	7563      	strb	r3, [r4, #21]
 801e70e:	73e3      	strb	r3, [r4, #15]
 801e710:	7263      	strb	r3, [r4, #9]
 801e712:	72a3      	strb	r3, [r4, #10]
 801e714:	2104      	movs	r1, #4
 801e716:	4628      	mov	r0, r5
 801e718:	f7fe fa5c 	bl	801cbd4 <_dwt_otpread>
 801e71c:	4607      	mov	r7, r0
 801e71e:	2105      	movs	r1, #5
 801e720:	4628      	mov	r0, r5
 801e722:	f7fe fa57 	bl	801cbd4 <_dwt_otpread>
 801e726:	4680      	mov	r8, r0
 801e728:	210a      	movs	r1, #10
 801e72a:	4628      	mov	r0, r5
 801e72c:	f7fe fa52 	bl	801cbd4 <_dwt_otpread>
 801e730:	b12f      	cbz	r7, 801e73e <ull_initialise+0x4e>
 801e732:	f1b8 0f00 	cmp.w	r8, #0
 801e736:	d002      	beq.n	801e73e <ull_initialise+0x4e>
 801e738:	b280      	uxth	r0, r0
 801e73a:	2800      	cmp	r0, #0
 801e73c:	d141      	bne.n	801e7c2 <ull_initialise+0xd2>
 801e73e:	2120      	movs	r1, #32
 801e740:	4628      	mov	r0, r5
 801e742:	f7fe fa47 	bl	801cbd4 <_dwt_otpread>
 801e746:	f5b0 7f10 	cmp.w	r0, #576	; 0x240
 801e74a:	bf0c      	ite	eq
 801e74c:	2301      	moveq	r3, #1
 801e74e:	2300      	movne	r3, #0
 801e750:	7223      	strb	r3, [r4, #8]
 801e752:	f016 0f10 	tst.w	r6, #16
 801e756:	d143      	bne.n	801e7e0 <ull_initialise+0xf0>
 801e758:	f016 0f20 	tst.w	r6, #32
 801e75c:	d146      	bne.n	801e7ec <ull_initialise+0xfc>
 801e75e:	f016 0f40 	tst.w	r6, #64	; 0x40
 801e762:	d149      	bne.n	801e7f8 <ull_initialise+0x108>
 801e764:	f016 0f80 	tst.w	r6, #128	; 0x80
 801e768:	d14d      	bne.n	801e806 <ull_initialise+0x116>
 801e76a:	7aa3      	ldrb	r3, [r4, #10]
 801e76c:	b90b      	cbnz	r3, 801e772 <ull_initialise+0x82>
 801e76e:	2385      	movs	r3, #133	; 0x85
 801e770:	72a3      	strb	r3, [r4, #10]
 801e772:	7a63      	ldrb	r3, [r4, #9]
 801e774:	b90b      	cbnz	r3, 801e77a <ull_initialise+0x8a>
 801e776:	2374      	movs	r3, #116	; 0x74
 801e778:	7263      	strb	r3, [r4, #9]
 801e77a:	211f      	movs	r1, #31
 801e77c:	4628      	mov	r0, r5
 801e77e:	f7fe fa29 	bl	801cbd4 <_dwt_otpread>
 801e782:	7320      	strb	r0, [r4, #12]
 801e784:	211e      	movs	r1, #30
 801e786:	4628      	mov	r0, r5
 801e788:	f7fe fa24 	bl	801cbd4 <_dwt_otpread>
 801e78c:	f010 003f 	ands.w	r0, r0, #63	; 0x3f
 801e790:	bf12      	itee	ne
 801e792:	7360      	strbne	r0, [r4, #13]
 801e794:	232e      	moveq	r3, #46	; 0x2e
 801e796:	7363      	strbeq	r3, [r4, #13]
 801e798:	7b63      	ldrb	r3, [r4, #13]
 801e79a:	2200      	movs	r2, #0
 801e79c:	4920      	ldr	r1, [pc, #128]	; (801e820 <ull_initialise+0x130>)
 801e79e:	4628      	mov	r0, r5
 801e7a0:	f7fe fc1e 	bl	801cfe0 <dwt_write8bitoffsetreg>
 801e7a4:	2135      	movs	r1, #53	; 0x35
 801e7a6:	4628      	mov	r0, r5
 801e7a8:	f7fe fa14 	bl	801cbd4 <_dwt_otpread>
 801e7ac:	4603      	mov	r3, r0
 801e7ae:	bb80      	cbnz	r0, 801e812 <ull_initialise+0x122>
 801e7b0:	2000      	movs	r0, #0
 801e7b2:	b002      	add	sp, #8
 801e7b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e7b8:	2028      	movs	r0, #40	; 0x28
 801e7ba:	f002 f9f5 	bl	8020ba8 <malloc>
 801e7be:	6528      	str	r0, [r5, #80]	; 0x50
 801e7c0:	e79e      	b.n	801e700 <ull_initialise+0x10>
 801e7c2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 801e7c6:	9300      	str	r3, [sp, #0]
 801e7c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e7cc:	2200      	movs	r2, #0
 801e7ce:	4915      	ldr	r1, [pc, #84]	; (801e824 <ull_initialise+0x134>)
 801e7d0:	4628      	mov	r0, r5
 801e7d2:	f7ff fc27 	bl	801e024 <dwt_modify16bitoffsetreg>
 801e7d6:	8a23      	ldrh	r3, [r4, #16]
 801e7d8:	f043 0314 	orr.w	r3, r3, #20
 801e7dc:	8223      	strh	r3, [r4, #16]
 801e7de:	e7ae      	b.n	801e73e <ull_initialise+0x4e>
 801e7e0:	2106      	movs	r1, #6
 801e7e2:	4628      	mov	r0, r5
 801e7e4:	f7fe f9f6 	bl	801cbd4 <_dwt_otpread>
 801e7e8:	6020      	str	r0, [r4, #0]
 801e7ea:	e7b5      	b.n	801e758 <ull_initialise+0x68>
 801e7ec:	2107      	movs	r1, #7
 801e7ee:	4628      	mov	r0, r5
 801e7f0:	f7fe f9f0 	bl	801cbd4 <_dwt_otpread>
 801e7f4:	6060      	str	r0, [r4, #4]
 801e7f6:	e7b2      	b.n	801e75e <ull_initialise+0x6e>
 801e7f8:	2108      	movs	r1, #8
 801e7fa:	4628      	mov	r0, r5
 801e7fc:	f7fe f9ea 	bl	801cbd4 <_dwt_otpread>
 801e800:	0c00      	lsrs	r0, r0, #16
 801e802:	7260      	strb	r0, [r4, #9]
 801e804:	e7ae      	b.n	801e764 <ull_initialise+0x74>
 801e806:	2109      	movs	r1, #9
 801e808:	4628      	mov	r0, r5
 801e80a:	f7fe f9e3 	bl	801cbd4 <_dwt_otpread>
 801e80e:	72a0      	strb	r0, [r4, #10]
 801e810:	e7ab      	b.n	801e76a <ull_initialise+0x7a>
 801e812:	2200      	movs	r2, #0
 801e814:	4904      	ldr	r1, [pc, #16]	; (801e828 <ull_initialise+0x138>)
 801e816:	4628      	mov	r0, r5
 801e818:	f7fe f9fe 	bl	801cc18 <dwt_write32bitoffsetreg>
 801e81c:	e7c8      	b.n	801e7b0 <ull_initialise+0xc0>
 801e81e:	bf00      	nop
 801e820:	00090014 	.word	0x00090014
 801e824:	000b0008 	.word	0x000b0008
 801e828:	00090004 	.word	0x00090004

0801e82c <ull_rxenable>:
 801e82c:	b530      	push	{r4, r5, lr}
 801e82e:	b083      	sub	sp, #12
 801e830:	4605      	mov	r5, r0
 801e832:	460c      	mov	r4, r1
 801e834:	b171      	cbz	r1, 801e854 <ull_rxenable+0x28>
 801e836:	f021 0302 	bic.w	r3, r1, #2
 801e83a:	3b01      	subs	r3, #1
 801e83c:	2b0f      	cmp	r3, #15
 801e83e:	d862      	bhi.n	801e906 <ull_rxenable+0xda>
 801e840:	e8df f003 	tbb	[pc, r3]
 801e844:	24616111 	.word	0x24616111
 801e848:	2d616161 	.word	0x2d616161
 801e84c:	61616161 	.word	0x61616161
 801e850:	3a616161 	.word	0x3a616161
 801e854:	2102      	movs	r1, #2
 801e856:	9101      	str	r1, [sp, #4]
 801e858:	2200      	movs	r2, #0
 801e85a:	9200      	str	r2, [sp, #0]
 801e85c:	4613      	mov	r3, r2
 801e85e:	f7fd fc74 	bl	801c14a <dwt_xfer3xxx>
 801e862:	4620      	mov	r0, r4
 801e864:	e010      	b.n	801e888 <ull_rxenable+0x5c>
 801e866:	2302      	movs	r3, #2
 801e868:	9301      	str	r3, [sp, #4]
 801e86a:	2200      	movs	r2, #0
 801e86c:	9200      	str	r2, [sp, #0]
 801e86e:	4613      	mov	r3, r2
 801e870:	2104      	movs	r1, #4
 801e872:	f7fd fc6a 	bl	801c14a <dwt_xfer3xxx>
 801e876:	2203      	movs	r2, #3
 801e878:	2144      	movs	r1, #68	; 0x44
 801e87a:	4628      	mov	r0, r5
 801e87c:	f7fd fd42 	bl	801c304 <dwt_read8bitoffsetreg>
 801e880:	f010 0f08 	tst.w	r0, #8
 801e884:	d125      	bne.n	801e8d2 <ull_rxenable+0xa6>
 801e886:	2000      	movs	r0, #0
 801e888:	b003      	add	sp, #12
 801e88a:	bd30      	pop	{r4, r5, pc}
 801e88c:	2302      	movs	r3, #2
 801e88e:	9301      	str	r3, [sp, #4]
 801e890:	2200      	movs	r2, #0
 801e892:	9200      	str	r2, [sp, #0]
 801e894:	4613      	mov	r3, r2
 801e896:	210a      	movs	r1, #10
 801e898:	f7fd fc57 	bl	801c14a <dwt_xfer3xxx>
 801e89c:	e7eb      	b.n	801e876 <ull_rxenable+0x4a>
 801e89e:	2100      	movs	r1, #0
 801e8a0:	f7fe f9cf 	bl	801cc42 <_dwt_adjust_delaytime>
 801e8a4:	2302      	movs	r3, #2
 801e8a6:	9301      	str	r3, [sp, #4]
 801e8a8:	2200      	movs	r2, #0
 801e8aa:	9200      	str	r2, [sp, #0]
 801e8ac:	4613      	mov	r3, r2
 801e8ae:	2108      	movs	r1, #8
 801e8b0:	4628      	mov	r0, r5
 801e8b2:	f7fd fc4a 	bl	801c14a <dwt_xfer3xxx>
 801e8b6:	e7de      	b.n	801e876 <ull_rxenable+0x4a>
 801e8b8:	2101      	movs	r1, #1
 801e8ba:	f7fe f9c2 	bl	801cc42 <_dwt_adjust_delaytime>
 801e8be:	2302      	movs	r3, #2
 801e8c0:	9301      	str	r3, [sp, #4]
 801e8c2:	2200      	movs	r2, #0
 801e8c4:	9200      	str	r2, [sp, #0]
 801e8c6:	4613      	mov	r3, r2
 801e8c8:	2106      	movs	r1, #6
 801e8ca:	4628      	mov	r0, r5
 801e8cc:	f7fd fc3d 	bl	801c14a <dwt_xfer3xxx>
 801e8d0:	e7d1      	b.n	801e876 <ull_rxenable+0x4a>
 801e8d2:	2302      	movs	r3, #2
 801e8d4:	9301      	str	r3, [sp, #4]
 801e8d6:	2100      	movs	r1, #0
 801e8d8:	9100      	str	r1, [sp, #0]
 801e8da:	460b      	mov	r3, r1
 801e8dc:	460a      	mov	r2, r1
 801e8de:	4628      	mov	r0, r5
 801e8e0:	f7fd fc33 	bl	801c14a <dwt_xfer3xxx>
 801e8e4:	f014 0f02 	tst.w	r4, #2
 801e8e8:	d002      	beq.n	801e8f0 <ull_rxenable+0xc4>
 801e8ea:	f04f 30ff 	mov.w	r0, #4294967295
 801e8ee:	e7cb      	b.n	801e888 <ull_rxenable+0x5c>
 801e8f0:	2102      	movs	r1, #2
 801e8f2:	9101      	str	r1, [sp, #4]
 801e8f4:	2200      	movs	r2, #0
 801e8f6:	9200      	str	r2, [sp, #0]
 801e8f8:	4613      	mov	r3, r2
 801e8fa:	4628      	mov	r0, r5
 801e8fc:	f7fd fc25 	bl	801c14a <dwt_xfer3xxx>
 801e900:	f04f 30ff 	mov.w	r0, #4294967295
 801e904:	e7c0      	b.n	801e888 <ull_rxenable+0x5c>
 801e906:	f04f 30ff 	mov.w	r0, #4294967295
 801e90a:	e7bd      	b.n	801e888 <ull_rxenable+0x5c>

0801e90c <ull_softreset_no_sema_fcmd>:
 801e90c:	b570      	push	{r4, r5, r6, lr}
 801e90e:	b082      	sub	sp, #8
 801e910:	4606      	mov	r6, r0
 801e912:	2502      	movs	r5, #2
 801e914:	9501      	str	r5, [sp, #4]
 801e916:	2400      	movs	r4, #0
 801e918:	9400      	str	r4, [sp, #0]
 801e91a:	4623      	mov	r3, r4
 801e91c:	4622      	mov	r2, r4
 801e91e:	2119      	movs	r1, #25
 801e920:	f7fd fc13 	bl	801c14a <dwt_xfer3xxx>
 801e924:	6d33      	ldr	r3, [r6, #80]	; 0x50
 801e926:	739c      	strb	r4, [r3, #14]
 801e928:	821d      	strh	r5, [r3, #16]
 801e92a:	751c      	strb	r4, [r3, #20]
 801e92c:	755c      	strb	r4, [r3, #21]
 801e92e:	73dc      	strb	r4, [r3, #15]
 801e930:	b002      	add	sp, #8
 801e932:	bd70      	pop	{r4, r5, r6, pc}

0801e934 <ull_softreset_fcmd>:
 801e934:	b570      	push	{r4, r5, r6, lr}
 801e936:	b082      	sub	sp, #8
 801e938:	4606      	mov	r6, r0
 801e93a:	2502      	movs	r5, #2
 801e93c:	9501      	str	r5, [sp, #4]
 801e93e:	2400      	movs	r4, #0
 801e940:	9400      	str	r4, [sp, #0]
 801e942:	4623      	mov	r3, r4
 801e944:	4622      	mov	r2, r4
 801e946:	2118      	movs	r1, #24
 801e948:	f7fd fbff 	bl	801c14a <dwt_xfer3xxx>
 801e94c:	6d33      	ldr	r3, [r6, #80]	; 0x50
 801e94e:	739c      	strb	r4, [r3, #14]
 801e950:	821d      	strh	r5, [r3, #16]
 801e952:	751c      	strb	r4, [r3, #20]
 801e954:	755c      	strb	r4, [r3, #21]
 801e956:	73dc      	strb	r4, [r3, #15]
 801e958:	b002      	add	sp, #8
 801e95a:	bd70      	pop	{r4, r5, r6, pc}

0801e95c <dwt_ioctl>:
 801e95c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e960:	b08d      	sub	sp, #52	; 0x34
 801e962:	4606      	mov	r6, r0
 801e964:	4615      	mov	r5, r2
 801e966:	461c      	mov	r4, r3
 801e968:	299c      	cmp	r1, #156	; 0x9c
 801e96a:	f200 809f 	bhi.w	801eaac <dwt_ioctl+0x150>
 801e96e:	e8df f011 	tbh	[pc, r1, lsl #1]
 801e972:	09b3      	.short	0x09b3
 801e974:	00a109be 	.word	0x00a109be
 801e978:	00c100a6 	.word	0x00c100a6
 801e97c:	019d0151 	.word	0x019d0151
 801e980:	015c0176 	.word	0x015c0176
 801e984:	01b301ae 	.word	0x01b301ae
 801e988:	01c501bc 	.word	0x01c501bc
 801e98c:	01d701ce 	.word	0x01d701ce
 801e990:	01e501e0 	.word	0x01e501e0
 801e994:	027201ee 	.word	0x027201ee
 801e998:	027e0278 	.word	0x027e0278
 801e99c:	028f0289 	.word	0x028f0289
 801e9a0:	029a0295 	.word	0x029a0295
 801e9a4:	02a502a0 	.word	0x02a502a0
 801e9a8:	02b702ae 	.word	0x02b702ae
 801e9ac:	02c902c0 	.word	0x02c902c0
 801e9b0:	02f90304 	.word	0x02f90304
 801e9b4:	02d202ee 	.word	0x02d202ee
 801e9b8:	031e02e0 	.word	0x031e02e0
 801e9bc:	021a01f8 	.word	0x021a01f8
 801e9c0:	02420239 	.word	0x02420239
 801e9c4:	08b40258 	.word	0x08b40258
 801e9c8:	031508b9 	.word	0x031508b9
 801e9cc:	032c0327 	.word	0x032c0327
 801e9d0:	033c0336 	.word	0x033c0336
 801e9d4:	03520347 	.word	0x03520347
 801e9d8:	0386035b 	.word	0x0386035b
 801e9dc:	03a9039d 	.word	0x03a9039d
 801e9e0:	03b5030a 	.word	0x03b5030a
 801e9e4:	03d203bf 	.word	0x03d203bf
 801e9e8:	040b03f9 	.word	0x040b03f9
 801e9ec:	0457044d 	.word	0x0457044d
 801e9f0:	048c047d 	.word	0x048c047d
 801e9f4:	049504a7 	.word	0x049504a7
 801e9f8:	04f704b1 	.word	0x04f704b1
 801e9fc:	0524050a 	.word	0x0524050a
 801ea00:	054d0539 	.word	0x054d0539
 801ea04:	05720556 	.word	0x05720556
 801ea08:	068c055f 	.word	0x068c055f
 801ea0c:	070b06bb 	.word	0x070b06bb
 801ea10:	071c0711 	.word	0x071c0711
 801ea14:	07550735 	.word	0x07550735
 801ea18:	0789075f 	.word	0x0789075f
 801ea1c:	07c007b7 	.word	0x07c007b7
 801ea20:	07cf07c6 	.word	0x07cf07c6
 801ea24:	07e907dc 	.word	0x07e907dc
 801ea28:	07fc07f3 	.word	0x07fc07f3
 801ea2c:	08100805 	.word	0x08100805
 801ea30:	0821081b 	.word	0x0821081b
 801ea34:	084f0844 	.word	0x084f0844
 801ea38:	0865085a 	.word	0x0865085a
 801ea3c:	08920887 	.word	0x08920887
 801ea40:	08bf08ab 	.word	0x08bf08ab
 801ea44:	09530949 	.word	0x09530949
 801ea48:	09c6095e 	.word	0x09c6095e
 801ea4c:	09a80968 	.word	0x09a80968
 801ea50:	08fd06ad 	.word	0x08fd06ad
 801ea54:	0a34091e 	.word	0x0a34091e
 801ea58:	09d30a29 	.word	0x09d30a29
 801ea5c:	09e909de 	.word	0x09e909de
 801ea60:	09ff09f4 	.word	0x09ff09f4
 801ea64:	0a150a0a 	.word	0x0a150a0a
 801ea68:	0c2c0a1e 	.word	0x0c2c0a1e
 801ea6c:	0c9d0c63 	.word	0x0c9d0c63
 801ea70:	0e270cbf 	.word	0x0e270cbf
 801ea74:	0a440e3b 	.word	0x0a440e3b
 801ea78:	0b830b51 	.word	0x0b830b51
 801ea7c:	0b910b8d 	.word	0x0b910b8d
 801ea80:	0b9f0b95 	.word	0x0b9f0b95
 801ea84:	0bbb0bb1 	.word	0x0bbb0bb1
 801ea88:	0be20bce 	.word	0x0be20bce
 801ea8c:	0cd50c1c 	.word	0x0cd50c1c
 801ea90:	0cf70cdf 	.word	0x0cf70cdf
 801ea94:	0d270d12 	.word	0x0d270d12
 801ea98:	0d830d47 	.word	0x0d830d47
 801ea9c:	0db10d9b 	.word	0x0db10d9b
 801eaa0:	0ef60dc1 	.word	0x0ef60dc1
 801eaa4:	0de60df0 	.word	0x0de60df0
 801eaa8:	0dfa0e02 	.word	0x0dfa0e02
 801eaac:	f04f 35ff 	mov.w	r5, #4294967295
 801eab0:	f001 be56 	b.w	8020760 <dwt_ioctl+0x1e04>
 801eab4:	f7fd fb28 	bl	801c108 <ull_wakeup_ic>
 801eab8:	2500      	movs	r5, #0
 801eaba:	f001 be51 	b.w	8020760 <dwt_ioctl+0x1e04>
 801eabe:	2202      	movs	r2, #2
 801eac0:	49c0      	ldr	r1, [pc, #768]	; (801edc4 <dwt_ioctl+0x468>)
 801eac2:	f7fd fc1f 	bl	801c304 <dwt_read8bitoffsetreg>
 801eac6:	2803      	cmp	r0, #3
 801eac8:	d802      	bhi.n	801ead0 <dwt_ioctl+0x174>
 801eaca:	2500      	movs	r5, #0
 801eacc:	f001 be48 	b.w	8020760 <dwt_ioctl+0x1e04>
 801ead0:	f7e2 f832 	bl	8000b38 <decamutexon>
 801ead4:	4604      	mov	r4, r0
 801ead6:	2302      	movs	r3, #2
 801ead8:	9301      	str	r3, [sp, #4]
 801eada:	2500      	movs	r5, #0
 801eadc:	9500      	str	r5, [sp, #0]
 801eade:	462b      	mov	r3, r5
 801eae0:	462a      	mov	r2, r5
 801eae2:	4629      	mov	r1, r5
 801eae4:	4630      	mov	r0, r6
 801eae6:	f7fd fb30 	bl	801c14a <dwt_xfer3xxx>
 801eaea:	4620      	mov	r0, r4
 801eaec:	f7e2 f835 	bl	8000b5a <decamutexoff>
 801eaf0:	f001 be36 	b.w	8020760 <dwt_ioctl+0x1e04>
 801eaf4:	2c00      	cmp	r4, #0
 801eaf6:	f001 8637 	beq.w	8020768 <dwt_ioctl+0x1e0c>
 801eafa:	7824      	ldrb	r4, [r4, #0]
 801eafc:	f014 0f1d 	tst.w	r4, #29
 801eb00:	d063      	beq.n	801ebca <dwt_ioctl+0x26e>
 801eb02:	f014 0f01 	tst.w	r4, #1
 801eb06:	d025      	beq.n	801eb54 <dwt_ioctl+0x1f8>
 801eb08:	f014 0f02 	tst.w	r4, #2
 801eb0c:	f04f 0302 	mov.w	r3, #2
 801eb10:	9301      	str	r3, [sp, #4]
 801eb12:	f04f 0200 	mov.w	r2, #0
 801eb16:	9200      	str	r2, [sp, #0]
 801eb18:	4613      	mov	r3, r2
 801eb1a:	bf14      	ite	ne
 801eb1c:	210d      	movne	r1, #13
 801eb1e:	2103      	moveq	r1, #3
 801eb20:	f7fd fb13 	bl	801c14a <dwt_xfer3xxx>
 801eb24:	2203      	movs	r2, #3
 801eb26:	2144      	movs	r1, #68	; 0x44
 801eb28:	4630      	mov	r0, r6
 801eb2a:	f7fd fbeb 	bl	801c304 <dwt_read8bitoffsetreg>
 801eb2e:	f010 0f08 	tst.w	r0, #8
 801eb32:	bf08      	it	eq
 801eb34:	2500      	moveq	r5, #0
 801eb36:	f001 8613 	beq.w	8020760 <dwt_ioctl+0x1e04>
 801eb3a:	2302      	movs	r3, #2
 801eb3c:	9301      	str	r3, [sp, #4]
 801eb3e:	2100      	movs	r1, #0
 801eb40:	9100      	str	r1, [sp, #0]
 801eb42:	460b      	mov	r3, r1
 801eb44:	460a      	mov	r2, r1
 801eb46:	4630      	mov	r0, r6
 801eb48:	f7fd faff 	bl	801c14a <dwt_xfer3xxx>
 801eb4c:	f04f 35ff 	mov.w	r5, #4294967295
 801eb50:	f001 be06 	b.w	8020760 <dwt_ioctl+0x1e04>
 801eb54:	f014 0f08 	tst.w	r4, #8
 801eb58:	d111      	bne.n	801eb7e <dwt_ioctl+0x222>
 801eb5a:	f014 0f10 	tst.w	r4, #16
 801eb5e:	d121      	bne.n	801eba4 <dwt_ioctl+0x248>
 801eb60:	f014 0f02 	tst.w	r4, #2
 801eb64:	f04f 0302 	mov.w	r3, #2
 801eb68:	9301      	str	r3, [sp, #4]
 801eb6a:	f04f 0200 	mov.w	r2, #0
 801eb6e:	9200      	str	r2, [sp, #0]
 801eb70:	4613      	mov	r3, r2
 801eb72:	bf14      	ite	ne
 801eb74:	2110      	movne	r1, #16
 801eb76:	2109      	moveq	r1, #9
 801eb78:	f7fd fae7 	bl	801c14a <dwt_xfer3xxx>
 801eb7c:	e7d2      	b.n	801eb24 <dwt_ioctl+0x1c8>
 801eb7e:	2100      	movs	r1, #0
 801eb80:	f7fe f85f 	bl	801cc42 <_dwt_adjust_delaytime>
 801eb84:	f014 0f02 	tst.w	r4, #2
 801eb88:	f04f 0302 	mov.w	r3, #2
 801eb8c:	9301      	str	r3, [sp, #4]
 801eb8e:	f04f 0200 	mov.w	r2, #0
 801eb92:	9200      	str	r2, [sp, #0]
 801eb94:	4613      	mov	r3, r2
 801eb96:	bf14      	ite	ne
 801eb98:	210f      	movne	r1, #15
 801eb9a:	2107      	moveq	r1, #7
 801eb9c:	4630      	mov	r0, r6
 801eb9e:	f7fd fad4 	bl	801c14a <dwt_xfer3xxx>
 801eba2:	e7bf      	b.n	801eb24 <dwt_ioctl+0x1c8>
 801eba4:	2101      	movs	r1, #1
 801eba6:	f7fe f84c 	bl	801cc42 <_dwt_adjust_delaytime>
 801ebaa:	f014 0f02 	tst.w	r4, #2
 801ebae:	f04f 0302 	mov.w	r3, #2
 801ebb2:	9301      	str	r3, [sp, #4]
 801ebb4:	f04f 0200 	mov.w	r2, #0
 801ebb8:	9200      	str	r2, [sp, #0]
 801ebba:	4613      	mov	r3, r2
 801ebbc:	bf14      	ite	ne
 801ebbe:	210e      	movne	r1, #14
 801ebc0:	2105      	moveq	r1, #5
 801ebc2:	4630      	mov	r0, r6
 801ebc4:	f7fd fac1 	bl	801c14a <dwt_xfer3xxx>
 801ebc8:	e7ac      	b.n	801eb24 <dwt_ioctl+0x1c8>
 801ebca:	f014 0f20 	tst.w	r4, #32
 801ebce:	d010      	beq.n	801ebf2 <dwt_ioctl+0x296>
 801ebd0:	f014 0f02 	tst.w	r4, #2
 801ebd4:	f04f 0302 	mov.w	r3, #2
 801ebd8:	9301      	str	r3, [sp, #4]
 801ebda:	f04f 0500 	mov.w	r5, #0
 801ebde:	9500      	str	r5, [sp, #0]
 801ebe0:	462b      	mov	r3, r5
 801ebe2:	462a      	mov	r2, r5
 801ebe4:	bf14      	ite	ne
 801ebe6:	2111      	movne	r1, #17
 801ebe8:	210b      	moveq	r1, #11
 801ebea:	f7fd faae 	bl	801c14a <dwt_xfer3xxx>
 801ebee:	f001 bdb7 	b.w	8020760 <dwt_ioctl+0x1e04>
 801ebf2:	f014 0f02 	tst.w	r4, #2
 801ebf6:	f04f 0302 	mov.w	r3, #2
 801ebfa:	9301      	str	r3, [sp, #4]
 801ebfc:	f04f 0500 	mov.w	r5, #0
 801ec00:	9500      	str	r5, [sp, #0]
 801ec02:	462b      	mov	r3, r5
 801ec04:	462a      	mov	r2, r5
 801ec06:	bf14      	ite	ne
 801ec08:	210c      	movne	r1, #12
 801ec0a:	2101      	moveq	r1, #1
 801ec0c:	f7fd fa9d 	bl	801c14a <dwt_xfer3xxx>
 801ec10:	f001 bda6 	b.w	8020760 <dwt_ioctl+0x1e04>
 801ec14:	2c00      	cmp	r4, #0
 801ec16:	f001 85a9 	beq.w	802076c <dwt_ioctl+0x1e10>
 801ec1a:	6823      	ldr	r3, [r4, #0]
 801ec1c:	2200      	movs	r2, #0
 801ec1e:	2128      	movs	r1, #40	; 0x28
 801ec20:	f7fd fffa 	bl	801cc18 <dwt_write32bitoffsetreg>
 801ec24:	2500      	movs	r5, #0
 801ec26:	f001 bd9b 	b.w	8020760 <dwt_ioctl+0x1e04>
 801ec2a:	6823      	ldr	r3, [r4, #0]
 801ec2c:	2200      	movs	r2, #0
 801ec2e:	4966      	ldr	r1, [pc, #408]	; (801edc8 <dwt_ioctl+0x46c>)
 801ec30:	f7fd fff2 	bl	801cc18 <dwt_write32bitoffsetreg>
 801ec34:	6863      	ldr	r3, [r4, #4]
 801ec36:	2200      	movs	r2, #0
 801ec38:	4964      	ldr	r1, [pc, #400]	; (801edcc <dwt_ioctl+0x470>)
 801ec3a:	4630      	mov	r0, r6
 801ec3c:	f7fd ffec 	bl	801cc18 <dwt_write32bitoffsetreg>
 801ec40:	68a3      	ldr	r3, [r4, #8]
 801ec42:	2200      	movs	r2, #0
 801ec44:	4962      	ldr	r1, [pc, #392]	; (801edd0 <dwt_ioctl+0x474>)
 801ec46:	4630      	mov	r0, r6
 801ec48:	f7fd ffe6 	bl	801cc18 <dwt_write32bitoffsetreg>
 801ec4c:	68e3      	ldr	r3, [r4, #12]
 801ec4e:	2200      	movs	r2, #0
 801ec50:	4960      	ldr	r1, [pc, #384]	; (801edd4 <dwt_ioctl+0x478>)
 801ec52:	4630      	mov	r0, r6
 801ec54:	f7fd ffe0 	bl	801cc18 <dwt_write32bitoffsetreg>
 801ec58:	2500      	movs	r5, #0
 801ec5a:	f001 bd81 	b.w	8020760 <dwt_ioctl+0x1e04>
 801ec5e:	2c00      	cmp	r4, #0
 801ec60:	f001 8586 	beq.w	8020770 <dwt_ioctl+0x1e14>
 801ec64:	8823      	ldrh	r3, [r4, #0]
 801ec66:	6865      	ldr	r5, [r4, #4]
 801ec68:	2d03      	cmp	r5, #3
 801ec6a:	f201 8583 	bhi.w	8020774 <dwt_ioctl+0x1e18>
 801ec6e:	e8df f005 	tbb	[pc, r5]
 801ec72:	0802      	.short	0x0802
 801ec74:	160f      	.short	0x160f
 801ec76:	2200      	movs	r2, #0
 801ec78:	4957      	ldr	r1, [pc, #348]	; (801edd8 <dwt_ioctl+0x47c>)
 801ec7a:	f7fd ff62 	bl	801cb42 <dwt_write16bitoffsetreg>
 801ec7e:	f001 bd6f 	b.w	8020760 <dwt_ioctl+0x1e04>
 801ec82:	2202      	movs	r2, #2
 801ec84:	4954      	ldr	r1, [pc, #336]	; (801edd8 <dwt_ioctl+0x47c>)
 801ec86:	f7fd ff5c 	bl	801cb42 <dwt_write16bitoffsetreg>
 801ec8a:	2500      	movs	r5, #0
 801ec8c:	f001 bd68 	b.w	8020760 <dwt_ioctl+0x1e04>
 801ec90:	2200      	movs	r2, #0
 801ec92:	4952      	ldr	r1, [pc, #328]	; (801eddc <dwt_ioctl+0x480>)
 801ec94:	f7fd ff55 	bl	801cb42 <dwt_write16bitoffsetreg>
 801ec98:	2500      	movs	r5, #0
 801ec9a:	f001 bd61 	b.w	8020760 <dwt_ioctl+0x1e04>
 801ec9e:	2202      	movs	r2, #2
 801eca0:	494e      	ldr	r1, [pc, #312]	; (801eddc <dwt_ioctl+0x480>)
 801eca2:	f7fd ff4e 	bl	801cb42 <dwt_write16bitoffsetreg>
 801eca6:	2500      	movs	r5, #0
 801eca8:	f001 bd5a 	b.w	8020760 <dwt_ioctl+0x1e04>
 801ecac:	2c00      	cmp	r4, #0
 801ecae:	f001 8563 	beq.w	8020778 <dwt_ioctl+0x1e1c>
 801ecb2:	7823      	ldrb	r3, [r4, #0]
 801ecb4:	005b      	lsls	r3, r3, #1
 801ecb6:	f003 0306 	and.w	r3, r3, #6
 801ecba:	9300      	str	r3, [sp, #0]
 801ecbc:	f06f 0306 	mvn.w	r3, #6
 801ecc0:	2200      	movs	r2, #0
 801ecc2:	4947      	ldr	r1, [pc, #284]	; (801ede0 <dwt_ioctl+0x484>)
 801ecc4:	f7fe fcae 	bl	801d624 <dwt_modify32bitoffsetreg>
 801ecc8:	2500      	movs	r5, #0
 801ecca:	f001 bd49 	b.w	8020760 <dwt_ioctl+0x1e04>
 801ecce:	f7fe fccd 	bl	801d66c <ull_enablegpioclocks>
 801ecd2:	2500      	movs	r5, #0
 801ecd4:	f001 bd44 	b.w	8020760 <dwt_ioctl+0x1e04>
 801ecd8:	2c00      	cmp	r4, #0
 801ecda:	f001 854f 	beq.w	802077c <dwt_ioctl+0x1e20>
 801ecde:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801ece0:	7b1b      	ldrb	r3, [r3, #12]
 801ece2:	7023      	strb	r3, [r4, #0]
 801ece4:	2500      	movs	r5, #0
 801ece6:	f001 bd3b 	b.w	8020760 <dwt_ioctl+0x1e04>
 801ecea:	2c00      	cmp	r4, #0
 801ecec:	f001 8548 	beq.w	8020780 <dwt_ioctl+0x1e24>
 801ecf0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801ecf2:	7a5b      	ldrb	r3, [r3, #9]
 801ecf4:	7023      	strb	r3, [r4, #0]
 801ecf6:	2500      	movs	r5, #0
 801ecf8:	f001 bd32 	b.w	8020760 <dwt_ioctl+0x1e04>
 801ecfc:	2c00      	cmp	r4, #0
 801ecfe:	f001 8541 	beq.w	8020784 <dwt_ioctl+0x1e28>
 801ed02:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801ed04:	7a9b      	ldrb	r3, [r3, #10]
 801ed06:	7023      	strb	r3, [r4, #0]
 801ed08:	2500      	movs	r5, #0
 801ed0a:	f001 bd29 	b.w	8020760 <dwt_ioctl+0x1e04>
 801ed0e:	2c00      	cmp	r4, #0
 801ed10:	f001 853a 	beq.w	8020788 <dwt_ioctl+0x1e2c>
 801ed14:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801ed16:	681b      	ldr	r3, [r3, #0]
 801ed18:	6023      	str	r3, [r4, #0]
 801ed1a:	2500      	movs	r5, #0
 801ed1c:	f001 bd20 	b.w	8020760 <dwt_ioctl+0x1e04>
 801ed20:	2c00      	cmp	r4, #0
 801ed22:	f001 8533 	beq.w	802078c <dwt_ioctl+0x1e30>
 801ed26:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801ed28:	685b      	ldr	r3, [r3, #4]
 801ed2a:	6023      	str	r3, [r4, #0]
 801ed2c:	2500      	movs	r5, #0
 801ed2e:	f001 bd17 	b.w	8020760 <dwt_ioctl+0x1e04>
 801ed32:	f7fe fae1 	bl	801d2f8 <ull_signal_rx_buff_free>
 801ed36:	2500      	movs	r5, #0
 801ed38:	f001 bd12 	b.w	8020760 <dwt_ioctl+0x1e04>
 801ed3c:	2c00      	cmp	r4, #0
 801ed3e:	f001 8527 	beq.w	8020790 <dwt_ioctl+0x1e34>
 801ed42:	6821      	ldr	r1, [r4, #0]
 801ed44:	f7fd ffa3 	bl	801cc8e <ull_setrxaftertxdelay>
 801ed48:	2500      	movs	r5, #0
 801ed4a:	f001 bd09 	b.w	8020760 <dwt_ioctl+0x1e04>
 801ed4e:	2c00      	cmp	r4, #0
 801ed50:	f001 8520 	beq.w	8020794 <dwt_ioctl+0x1e38>
 801ed54:	6862      	ldr	r2, [r4, #4]
 801ed56:	7821      	ldrb	r1, [r4, #0]
 801ed58:	f7fe fde8 	bl	801d92c <ull_enablespicrccheck>
 801ed5c:	2500      	movs	r5, #0
 801ed5e:	f001 bcff 	b.w	8020760 <dwt_ioctl+0x1e04>
 801ed62:	2c00      	cmp	r4, #0
 801ed64:	f001 8518 	beq.w	8020798 <dwt_ioctl+0x1e3c>
 801ed68:	6865      	ldr	r5, [r4, #4]
 801ed6a:	7823      	ldrb	r3, [r4, #0]
 801ed6c:	2203      	movs	r2, #3
 801ed6e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 801ed72:	f7fe f935 	bl	801cfe0 <dwt_write8bitoffsetreg>
 801ed76:	b94d      	cbnz	r5, 801ed8c <dwt_ioctl+0x430>
 801ed78:	2200      	movs	r2, #0
 801ed7a:	9200      	str	r2, [sp, #0]
 801ed7c:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 801ed80:	2110      	movs	r1, #16
 801ed82:	4630      	mov	r0, r6
 801ed84:	f7ff f94e 	bl	801e024 <dwt_modify16bitoffsetreg>
 801ed88:	f001 bcea 	b.w	8020760 <dwt_ioctl+0x1e04>
 801ed8c:	f44f 2381 	mov.w	r3, #264192	; 0x40800
 801ed90:	9300      	str	r3, [sp, #0]
 801ed92:	f04f 33ff 	mov.w	r3, #4294967295
 801ed96:	2200      	movs	r2, #0
 801ed98:	2110      	movs	r1, #16
 801ed9a:	4630      	mov	r0, r6
 801ed9c:	f7fe fc42 	bl	801d624 <dwt_modify32bitoffsetreg>
 801eda0:	2500      	movs	r5, #0
 801eda2:	f001 bcdd 	b.w	8020760 <dwt_ioctl+0x1e04>
 801eda6:	2200      	movs	r2, #0
 801eda8:	4611      	mov	r1, r2
 801edaa:	f7fd fa56 	bl	801c25a <dwt_read32bitoffsetreg>
 801edae:	68b2      	ldr	r2, [r6, #8]
 801edb0:	6813      	ldr	r3, [r2, #0]
 801edb2:	4043      	eors	r3, r0
 801edb4:	6852      	ldr	r2, [r2, #4]
 801edb6:	4213      	tst	r3, r2
 801edb8:	bf14      	ite	ne
 801edba:	f04f 35ff 	movne.w	r5, #4294967295
 801edbe:	2500      	moveq	r5, #0
 801edc0:	f001 bcce 	b.w	8020760 <dwt_ioctl+0x1e04>
 801edc4:	000f0030 	.word	0x000f0030
 801edc8:	00010054 	.word	0x00010054
 801edcc:	00010058 	.word	0x00010058
 801edd0:	0001005c 	.word	0x0001005c
 801edd4:	00010060 	.word	0x00010060
 801edd8:	0001000c 	.word	0x0001000c
 801eddc:	00010010 	.word	0x00010010
 801ede0:	00010008 	.word	0x00010008
 801ede4:	2c00      	cmp	r4, #0
 801ede6:	f001 84d9 	beq.w	802079c <dwt_ioctl+0x1e40>
 801edea:	7821      	ldrb	r1, [r4, #0]
 801edec:	f7fe fdba 	bl	801d964 <ull_configciadiag>
 801edf0:	2500      	movs	r5, #0
 801edf2:	f001 bcb5 	b.w	8020760 <dwt_ioctl+0x1e04>
 801edf6:	b942      	cbnz	r2, 801ee0a <dwt_ioctl+0x4ae>
 801edf8:	2200      	movs	r2, #0
 801edfa:	9200      	str	r2, [sp, #0]
 801edfc:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 801ee00:	49d2      	ldr	r1, [pc, #840]	; (801f14c <dwt_ioctl+0x7f0>)
 801ee02:	f7ff f90f 	bl	801e024 <dwt_modify16bitoffsetreg>
 801ee06:	f001 bcab 	b.w	8020760 <dwt_ioctl+0x1e04>
 801ee0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801ee0e:	9300      	str	r3, [sp, #0]
 801ee10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ee14:	2200      	movs	r2, #0
 801ee16:	49cd      	ldr	r1, [pc, #820]	; (801f14c <dwt_ioctl+0x7f0>)
 801ee18:	f7ff f904 	bl	801e024 <dwt_modify16bitoffsetreg>
 801ee1c:	2500      	movs	r5, #0
 801ee1e:	f001 bc9f 	b.w	8020760 <dwt_ioctl+0x1e04>
 801ee22:	f002 0201 	and.w	r2, r2, #1
 801ee26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ee2a:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 801ee2e:	2a00      	cmp	r2, #0
 801ee30:	bf08      	it	eq
 801ee32:	460b      	moveq	r3, r1
 801ee34:	02d2      	lsls	r2, r2, #11
 801ee36:	f015 0f02 	tst.w	r5, #2
 801ee3a:	bf12      	itee	ne
 801ee3c:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 801ee40:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801ee44:	b29b      	uxtheq	r3, r3
 801ee46:	9200      	str	r2, [sp, #0]
 801ee48:	2200      	movs	r2, #0
 801ee4a:	49c0      	ldr	r1, [pc, #768]	; (801f14c <dwt_ioctl+0x7f0>)
 801ee4c:	f7ff f8ea 	bl	801e024 <dwt_modify16bitoffsetreg>
 801ee50:	2500      	movs	r5, #0
 801ee52:	f001 bc85 	b.w	8020760 <dwt_ioctl+0x1e04>
 801ee56:	4611      	mov	r1, r2
 801ee58:	f7fd ff2e 	bl	801ccb8 <ull_setfinegraintxseq>
 801ee5c:	2500      	movs	r5, #0
 801ee5e:	f001 bc7f 	b.w	8020760 <dwt_ioctl+0x1e04>
 801ee62:	4611      	mov	r1, r2
 801ee64:	f7fd ff3c 	bl	801cce0 <ull_setlnapamode>
 801ee68:	2500      	movs	r5, #0
 801ee6a:	f001 bc79 	b.w	8020760 <dwt_ioctl+0x1e04>
 801ee6e:	2c00      	cmp	r4, #0
 801ee70:	f001 8496 	beq.w	80207a0 <dwt_ioctl+0x1e44>
 801ee74:	2200      	movs	r2, #0
 801ee76:	49b6      	ldr	r1, [pc, #728]	; (801f150 <dwt_ioctl+0x7f4>)
 801ee78:	f7fd fa44 	bl	801c304 <dwt_read8bitoffsetreg>
 801ee7c:	7020      	strb	r0, [r4, #0]
 801ee7e:	2500      	movs	r5, #0
 801ee80:	f001 bc6e 	b.w	8020760 <dwt_ioctl+0x1e04>
 801ee84:	4621      	mov	r1, r4
 801ee86:	f7fd ff4b 	bl	801cd20 <ull_configurestskey>
 801ee8a:	2500      	movs	r5, #0
 801ee8c:	f001 bc68 	b.w	8020760 <dwt_ioctl+0x1e04>
 801ee90:	4621      	mov	r1, r4
 801ee92:	f7fd ff69 	bl	801cd68 <ull_configurestsiv>
 801ee96:	2500      	movs	r5, #0
 801ee98:	f001 bc62 	b.w	8020760 <dwt_ioctl+0x1e04>
 801ee9c:	f7fe fd98 	bl	801d9d0 <ull_configurestsloadiv>
 801eea0:	2500      	movs	r5, #0
 801eea2:	f001 bc5d 	b.w	8020760 <dwt_ioctl+0x1e04>
 801eea6:	4611      	mov	r1, r2
 801eea8:	f7fd ff82 	bl	801cdb0 <ull_configmrxlut>
 801eeac:	2500      	movs	r5, #0
 801eeae:	f001 bc57 	b.w	8020760 <dwt_ioctl+0x1e04>
 801eeb2:	f7fe feb3 	bl	801dc1c <ull_restoreconfig>
 801eeb6:	2500      	movs	r5, #0
 801eeb8:	f001 bc52 	b.w	8020760 <dwt_ioctl+0x1e04>
 801eebc:	2c00      	cmp	r4, #0
 801eebe:	f001 8471 	beq.w	80207a4 <dwt_ioctl+0x1e48>
 801eec2:	7821      	ldrb	r1, [r4, #0]
 801eec4:	f7ff f8c8 	bl	801e058 <ull_configurestsmode>
 801eec8:	2500      	movs	r5, #0
 801eeca:	f001 bc49 	b.w	8020760 <dwt_ioctl+0x1e04>
 801eece:	2c00      	cmp	r4, #0
 801eed0:	f001 846a 	beq.w	80207a8 <dwt_ioctl+0x1e4c>
 801eed4:	8821      	ldrh	r1, [r4, #0]
 801eed6:	f7fd fe44 	bl	801cb62 <ull_setrxantennadelay>
 801eeda:	2500      	movs	r5, #0
 801eedc:	f001 bc40 	b.w	8020760 <dwt_ioctl+0x1e04>
 801eee0:	2c00      	cmp	r4, #0
 801eee2:	f001 8463 	beq.w	80207ac <dwt_ioctl+0x1e50>
 801eee6:	f7fd f9e0 	bl	801c2aa <ull_getrxantennadelay>
 801eeea:	8020      	strh	r0, [r4, #0]
 801eeec:	2500      	movs	r5, #0
 801eeee:	f001 bc37 	b.w	8020760 <dwt_ioctl+0x1e04>
 801eef2:	2c00      	cmp	r4, #0
 801eef4:	f001 845c 	beq.w	80207b0 <dwt_ioctl+0x1e54>
 801eef8:	8821      	ldrh	r1, [r4, #0]
 801eefa:	f7fd fe3a 	bl	801cb72 <ull_settxantennadelay>
 801eefe:	2500      	movs	r5, #0
 801ef00:	f001 bc2e 	b.w	8020760 <dwt_ioctl+0x1e04>
 801ef04:	2c00      	cmp	r4, #0
 801ef06:	f001 8455 	beq.w	80207b4 <dwt_ioctl+0x1e58>
 801ef0a:	f7fd f9d5 	bl	801c2b8 <ull_gettxantennadelay>
 801ef0e:	8020      	strh	r0, [r4, #0]
 801ef10:	2500      	movs	r5, #0
 801ef12:	f001 bc25 	b.w	8020760 <dwt_ioctl+0x1e04>
 801ef16:	2c00      	cmp	r4, #0
 801ef18:	f001 844e 	beq.w	80207b8 <dwt_ioctl+0x1e5c>
 801ef1c:	88a3      	ldrh	r3, [r4, #4]
 801ef1e:	88e2      	ldrh	r2, [r4, #6]
 801ef20:	6821      	ldr	r1, [r4, #0]
 801ef22:	9100      	str	r1, [sp, #0]
 801ef24:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 801ef28:	f7fd fe00 	bl	801cb2c <dwt_writetodevice>
 801ef2c:	2500      	movs	r5, #0
 801ef2e:	f001 bc17 	b.w	8020760 <dwt_ioctl+0x1e04>
 801ef32:	2c00      	cmp	r4, #0
 801ef34:	f001 8442 	beq.w	80207bc <dwt_ioctl+0x1e60>
 801ef38:	88a3      	ldrh	r3, [r4, #4]
 801ef3a:	88e2      	ldrh	r2, [r4, #6]
 801ef3c:	6821      	ldr	r1, [r4, #0]
 801ef3e:	9100      	str	r1, [sp, #0]
 801ef40:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 801ef44:	f7fd f97f 	bl	801c246 <dwt_readfromdevice>
 801ef48:	2500      	movs	r5, #0
 801ef4a:	f001 bc09 	b.w	8020760 <dwt_ioctl+0x1e04>
 801ef4e:	2c00      	cmp	r4, #0
 801ef50:	f001 8436 	beq.w	80207c0 <dwt_ioctl+0x1e64>
 801ef54:	88e3      	ldrh	r3, [r4, #6]
 801ef56:	88a2      	ldrh	r2, [r4, #4]
 801ef58:	6821      	ldr	r1, [r4, #0]
 801ef5a:	f7fe f80b 	bl	801cf74 <ull_readrxdata>
 801ef5e:	2500      	movs	r5, #0
 801ef60:	f001 bbfe 	b.w	8020760 <dwt_ioctl+0x1e04>
 801ef64:	2c00      	cmp	r4, #0
 801ef66:	f001 842d 	beq.w	80207c4 <dwt_ioctl+0x1e68>
 801ef6a:	88e3      	ldrh	r3, [r4, #6]
 801ef6c:	6822      	ldr	r2, [r4, #0]
 801ef6e:	88a1      	ldrh	r1, [r4, #4]
 801ef70:	f7fe f990 	bl	801d294 <ull_writetxdata>
 801ef74:	2500      	movs	r5, #0
 801ef76:	f001 bbf3 	b.w	8020760 <dwt_ioctl+0x1e04>
 801ef7a:	4611      	mov	r1, r2
 801ef7c:	f7ff fc56 	bl	801e82c <ull_rxenable>
 801ef80:	2500      	movs	r5, #0
 801ef82:	f001 bbed 	b.w	8020760 <dwt_ioctl+0x1e04>
 801ef86:	2c00      	cmp	r4, #0
 801ef88:	f001 841e 	beq.w	80207c8 <dwt_ioctl+0x1e6c>
 801ef8c:	7923      	ldrb	r3, [r4, #4]
 801ef8e:	8862      	ldrh	r2, [r4, #2]
 801ef90:	8821      	ldrh	r1, [r4, #0]
 801ef92:	f7fe fc97 	bl	801d8c4 <ull_writetxfctrl>
 801ef96:	2500      	movs	r5, #0
 801ef98:	f001 bbe2 	b.w	8020760 <dwt_ioctl+0x1e04>
 801ef9c:	2c00      	cmp	r4, #0
 801ef9e:	f001 8415 	beq.w	80207cc <dwt_ioctl+0x1e70>
 801efa2:	f7fd f98f 	bl	801c2c4 <ull_readclockoffset>
 801efa6:	8020      	strh	r0, [r4, #0]
 801efa8:	2500      	movs	r5, #0
 801efaa:	f001 bbd9 	b.w	8020760 <dwt_ioctl+0x1e04>
 801efae:	2c00      	cmp	r4, #0
 801efb0:	f001 840e 	beq.w	80207d0 <dwt_ioctl+0x1e74>
 801efb4:	f7fd f9b4 	bl	801c320 <ull_readcarrierintegrator>
 801efb8:	6020      	str	r0, [r4, #0]
 801efba:	2500      	movs	r5, #0
 801efbc:	f001 bbd0 	b.w	8020760 <dwt_ioctl+0x1e04>
 801efc0:	f7fe f866 	bl	801d090 <ull_clearaonconfig>
 801efc4:	2500      	movs	r5, #0
 801efc6:	f001 bbcb 	b.w	8020760 <dwt_ioctl+0x1e04>
 801efca:	2c00      	cmp	r4, #0
 801efcc:	f001 8402 	beq.w	80207d4 <dwt_ioctl+0x1e78>
 801efd0:	8861      	ldrh	r1, [r4, #2]
 801efd2:	f7fe fe53 	bl	801dc7c <ull_calcbandwidthadj>
 801efd6:	7020      	strb	r0, [r4, #0]
 801efd8:	2500      	movs	r5, #0
 801efda:	f001 bbc1 	b.w	8020760 <dwt_ioctl+0x1e04>
 801efde:	4621      	mov	r1, r4
 801efe0:	f7fd f9be 	bl	801c360 <ull_readdiagnostics>
 801efe4:	2500      	movs	r5, #0
 801efe6:	f001 bbbb 	b.w	8020760 <dwt_ioctl+0x1e04>
 801efea:	2c00      	cmp	r4, #0
 801efec:	f001 83f4 	beq.w	80207d8 <dwt_ioctl+0x1e7c>
 801eff0:	2201      	movs	r2, #1
 801eff2:	2170      	movs	r1, #112	; 0x70
 801eff4:	f7fd f931 	bl	801c25a <dwt_read32bitoffsetreg>
 801eff8:	6020      	str	r0, [r4, #0]
 801effa:	2500      	movs	r5, #0
 801effc:	f001 bbb0 	b.w	8020760 <dwt_ioctl+0x1e04>
 801f000:	2c00      	cmp	r4, #0
 801f002:	f001 83eb 	beq.w	80207dc <dwt_ioctl+0x1e80>
 801f006:	2200      	movs	r2, #0
 801f008:	2170      	movs	r1, #112	; 0x70
 801f00a:	f7fd f926 	bl	801c25a <dwt_read32bitoffsetreg>
 801f00e:	6020      	str	r0, [r4, #0]
 801f010:	2500      	movs	r5, #0
 801f012:	f001 bba5 	b.w	8020760 <dwt_ioctl+0x1e04>
 801f016:	9400      	str	r4, [sp, #0]
 801f018:	2305      	movs	r3, #5
 801f01a:	2200      	movs	r2, #0
 801f01c:	2170      	movs	r1, #112	; 0x70
 801f01e:	f7fd f912 	bl	801c246 <dwt_readfromdevice>
 801f022:	2500      	movs	r5, #0
 801f024:	f001 bb9c 	b.w	8020760 <dwt_ioctl+0x1e04>
 801f028:	2c00      	cmp	r4, #0
 801f02a:	f001 83d9 	beq.w	80207e0 <dwt_ioctl+0x1e84>
 801f02e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801f030:	7b9b      	ldrb	r3, [r3, #14]
 801f032:	2b01      	cmp	r3, #1
 801f034:	d015      	beq.n	801f062 <dwt_ioctl+0x706>
 801f036:	2b03      	cmp	r3, #3
 801f038:	d11a      	bne.n	801f070 <dwt_ioctl+0x714>
 801f03a:	2216      	movs	r2, #22
 801f03c:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 801f040:	f7fd f921 	bl	801c286 <dwt_read16bitoffsetreg>
 801f044:	f3c0 000d 	ubfx	r0, r0, #0, #14
 801f048:	b283      	uxth	r3, r0
 801f04a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 801f04e:	d004      	beq.n	801f05a <dwt_ioctl+0x6fe>
 801f050:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 801f054:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 801f058:	b218      	sxth	r0, r3
 801f05a:	8020      	strh	r0, [r4, #0]
 801f05c:	2500      	movs	r5, #0
 801f05e:	f001 bb7f 	b.w	8020760 <dwt_ioctl+0x1e04>
 801f062:	2202      	movs	r2, #2
 801f064:	493b      	ldr	r1, [pc, #236]	; (801f154 <dwt_ioctl+0x7f8>)
 801f066:	f7fd f90e 	bl	801c286 <dwt_read16bitoffsetreg>
 801f06a:	f3c0 000d 	ubfx	r0, r0, #0, #14
 801f06e:	e7eb      	b.n	801f048 <dwt_ioctl+0x6ec>
 801f070:	2202      	movs	r2, #2
 801f072:	4939      	ldr	r1, [pc, #228]	; (801f158 <dwt_ioctl+0x7fc>)
 801f074:	f7fd f907 	bl	801c286 <dwt_read16bitoffsetreg>
 801f078:	f3c0 000d 	ubfx	r0, r0, #0, #14
 801f07c:	e7e4      	b.n	801f048 <dwt_ioctl+0x6ec>
 801f07e:	9400      	str	r4, [sp, #0]
 801f080:	2306      	movs	r3, #6
 801f082:	2200      	movs	r2, #0
 801f084:	4935      	ldr	r1, [pc, #212]	; (801f15c <dwt_ioctl+0x800>)
 801f086:	f7fd f8de 	bl	801c246 <dwt_readfromdevice>
 801f08a:	f994 3001 	ldrsb.w	r3, [r4, #1]
 801f08e:	2b00      	cmp	r3, #0
 801f090:	db06      	blt.n	801f0a0 <dwt_ioctl+0x744>
 801f092:	7963      	ldrb	r3, [r4, #5]
 801f094:	f003 0301 	and.w	r3, r3, #1
 801f098:	7163      	strb	r3, [r4, #5]
 801f09a:	2500      	movs	r5, #0
 801f09c:	f001 bb60 	b.w	8020760 <dwt_ioctl+0x1e04>
 801f0a0:	23ff      	movs	r3, #255	; 0xff
 801f0a2:	70a3      	strb	r3, [r4, #2]
 801f0a4:	70e3      	strb	r3, [r4, #3]
 801f0a6:	7123      	strb	r3, [r4, #4]
 801f0a8:	7163      	strb	r3, [r4, #5]
 801f0aa:	e7f2      	b.n	801f092 <dwt_ioctl+0x736>
 801f0ac:	2c00      	cmp	r4, #0
 801f0ae:	f001 8399 	beq.w	80207e4 <dwt_ioctl+0x1e88>
 801f0b2:	2201      	movs	r2, #1
 801f0b4:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 801f0b8:	f7fd f924 	bl	801c304 <dwt_read8bitoffsetreg>
 801f0bc:	7020      	strb	r0, [r4, #0]
 801f0be:	2500      	movs	r5, #0
 801f0c0:	f001 bb4e 	b.w	8020760 <dwt_ioctl+0x1e04>
 801f0c4:	2c00      	cmp	r4, #0
 801f0c6:	f001 838f 	beq.w	80207e8 <dwt_ioctl+0x1e8c>
 801f0ca:	2200      	movs	r2, #0
 801f0cc:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 801f0d0:	f7fd f918 	bl	801c304 <dwt_read8bitoffsetreg>
 801f0d4:	7020      	strb	r0, [r4, #0]
 801f0d6:	2500      	movs	r5, #0
 801f0d8:	f001 bb42 	b.w	8020760 <dwt_ioctl+0x1e04>
 801f0dc:	2c00      	cmp	r4, #0
 801f0de:	f001 8385 	beq.w	80207ec <dwt_ioctl+0x1e90>
 801f0e2:	88a2      	ldrh	r2, [r4, #4]
 801f0e4:	6821      	ldr	r1, [r4, #0]
 801f0e6:	f7fe fb17 	bl	801d718 <_dwt_otpprogword32>
 801f0ea:	2500      	movs	r5, #0
 801f0ec:	f001 bb38 	b.w	8020760 <dwt_ioctl+0x1e04>
 801f0f0:	2c00      	cmp	r4, #0
 801f0f2:	f001 837d 	beq.w	80207f0 <dwt_ioctl+0x1e94>
 801f0f6:	6825      	ldr	r5, [r4, #0]
 801f0f8:	88a4      	ldrh	r4, [r4, #4]
 801f0fa:	4622      	mov	r2, r4
 801f0fc:	4629      	mov	r1, r5
 801f0fe:	f7fe fb0b 	bl	801d718 <_dwt_otpprogword32>
 801f102:	4621      	mov	r1, r4
 801f104:	4630      	mov	r0, r6
 801f106:	f7fd fd65 	bl	801cbd4 <_dwt_otpread>
 801f10a:	1a2d      	subs	r5, r5, r0
 801f10c:	bf18      	it	ne
 801f10e:	f04f 35ff 	movne.w	r5, #4294967295
 801f112:	f001 bb25 	b.w	8020760 <dwt_ioctl+0x1e04>
 801f116:	2a02      	cmp	r2, #2
 801f118:	d00f      	beq.n	801f13a <dwt_ioctl+0x7de>
 801f11a:	4c11      	ldr	r4, [pc, #68]	; (801f160 <dwt_ioctl+0x804>)
 801f11c:	2300      	movs	r3, #0
 801f11e:	461a      	mov	r2, r3
 801f120:	4621      	mov	r1, r4
 801f122:	4630      	mov	r0, r6
 801f124:	f7fd ff5c 	bl	801cfe0 <dwt_write8bitoffsetreg>
 801f128:	2302      	movs	r3, #2
 801f12a:	2200      	movs	r2, #0
 801f12c:	4621      	mov	r1, r4
 801f12e:	4630      	mov	r0, r6
 801f130:	f7fd ff56 	bl	801cfe0 <dwt_write8bitoffsetreg>
 801f134:	2500      	movs	r5, #0
 801f136:	f001 bb13 	b.w	8020760 <dwt_ioctl+0x1e04>
 801f13a:	2300      	movs	r3, #0
 801f13c:	9300      	str	r3, [sp, #0]
 801f13e:	23fe      	movs	r3, #254	; 0xfe
 801f140:	2201      	movs	r2, #1
 801f142:	4902      	ldr	r1, [pc, #8]	; (801f14c <dwt_ioctl+0x7f0>)
 801f144:	f7fe fbde 	bl	801d904 <dwt_modify8bitoffsetreg>
 801f148:	e7e7      	b.n	801f11a <dwt_ioctl+0x7be>
 801f14a:	bf00      	nop
 801f14c:	00110008 	.word	0x00110008
 801f150:	0007001c 	.word	0x0007001c
 801f154:	00180014 	.word	0x00180014
 801f158:	000c001c 	.word	0x000c001c
 801f15c:	000c0018 	.word	0x000c0018
 801f160:	000a0004 	.word	0x000a0004
 801f164:	2c00      	cmp	r4, #0
 801f166:	f001 8345 	beq.w	80207f4 <dwt_ioctl+0x1e98>
 801f16a:	8824      	ldrh	r4, [r4, #0]
 801f16c:	b2e2      	uxtb	r2, r4
 801f16e:	f44f 7181 	mov.w	r1, #258	; 0x102
 801f172:	f7fd ffe1 	bl	801d138 <ull_aon_write>
 801f176:	0a22      	lsrs	r2, r4, #8
 801f178:	f240 1103 	movw	r1, #259	; 0x103
 801f17c:	4630      	mov	r0, r6
 801f17e:	f7fd ffdb 	bl	801d138 <ull_aon_write>
 801f182:	2500      	movs	r5, #0
 801f184:	f001 baec 	b.w	8020760 <dwt_ioctl+0x1e04>
 801f188:	2c00      	cmp	r4, #0
 801f18a:	f001 8335 	beq.w	80207f8 <dwt_ioctl+0x1e9c>
 801f18e:	f8df 835c 	ldr.w	r8, [pc, #860]	; 801f4ec <dwt_ioctl+0xb90>
 801f192:	2310      	movs	r3, #16
 801f194:	9300      	str	r3, [sp, #0]
 801f196:	23ff      	movs	r3, #255	; 0xff
 801f198:	2200      	movs	r2, #0
 801f19a:	4641      	mov	r1, r8
 801f19c:	f7fe fbb2 	bl	801d904 <dwt_modify8bitoffsetreg>
 801f1a0:	f44f 7182 	mov.w	r1, #260	; 0x104
 801f1a4:	4630      	mov	r0, r6
 801f1a6:	f7fd ffa7 	bl	801d0f8 <ull_aon_read>
 801f1aa:	f000 05e0 	and.w	r5, r0, #224	; 0xe0
 801f1ae:	462a      	mov	r2, r5
 801f1b0:	f44f 7182 	mov.w	r1, #260	; 0x104
 801f1b4:	4630      	mov	r0, r6
 801f1b6:	f7fd ffbf 	bl	801d138 <ull_aon_write>
 801f1ba:	f045 0204 	orr.w	r2, r5, #4
 801f1be:	f44f 7182 	mov.w	r1, #260	; 0x104
 801f1c2:	4630      	mov	r0, r6
 801f1c4:	f7fd ffb8 	bl	801d138 <ull_aon_write>
 801f1c8:	2002      	movs	r0, #2
 801f1ca:	f7e1 fcd3 	bl	8000b74 <deca_sleep>
 801f1ce:	f44f 7187 	mov.w	r1, #270	; 0x10e
 801f1d2:	4630      	mov	r0, r6
 801f1d4:	f7fd ff90 	bl	801d0f8 <ull_aon_read>
 801f1d8:	4607      	mov	r7, r0
 801f1da:	f240 110f 	movw	r1, #271	; 0x10f
 801f1de:	4630      	mov	r0, r6
 801f1e0:	f7fd ff8a 	bl	801d0f8 <ull_aon_read>
 801f1e4:	4681      	mov	r9, r0
 801f1e6:	462a      	mov	r2, r5
 801f1e8:	f44f 7182 	mov.w	r1, #260	; 0x104
 801f1ec:	4630      	mov	r0, r6
 801f1ee:	f7fd ffa3 	bl	801d138 <ull_aon_write>
 801f1f2:	2500      	movs	r5, #0
 801f1f4:	9500      	str	r5, [sp, #0]
 801f1f6:	23ef      	movs	r3, #239	; 0xef
 801f1f8:	462a      	mov	r2, r5
 801f1fa:	4641      	mov	r1, r8
 801f1fc:	4630      	mov	r0, r6
 801f1fe:	f7fe fb81 	bl	801d904 <dwt_modify8bitoffsetreg>
 801f202:	ea47 2709 	orr.w	r7, r7, r9, lsl #8
 801f206:	8027      	strh	r7, [r4, #0]
 801f208:	f001 baaa 	b.w	8020760 <dwt_ioctl+0x1e04>
 801f20c:	2c00      	cmp	r4, #0
 801f20e:	f001 82f5 	beq.w	80207fc <dwt_ioctl+0x1ea0>
 801f212:	78a2      	ldrb	r2, [r4, #2]
 801f214:	8821      	ldrh	r1, [r4, #0]
 801f216:	f7fd ffb7 	bl	801d188 <ull_configuresleep>
 801f21a:	2500      	movs	r5, #0
 801f21c:	f001 baa0 	b.w	8020760 <dwt_ioctl+0x1e04>
 801f220:	2c00      	cmp	r4, #0
 801f222:	f001 82ed 	beq.w	8020800 <dwt_ioctl+0x1ea4>
 801f226:	6824      	ldr	r4, [r4, #0]
 801f228:	f7fd ff32 	bl	801d090 <ull_clearaonconfig>
 801f22c:	2001      	movs	r0, #1
 801f22e:	f7e1 fca1 	bl	8000b74 <deca_sleep>
 801f232:	2303      	movs	r3, #3
 801f234:	9300      	str	r3, [sp, #0]
 801f236:	23ff      	movs	r3, #255	; 0xff
 801f238:	2200      	movs	r2, #0
 801f23a:	49aa      	ldr	r1, [pc, #680]	; (801f4e4 <dwt_ioctl+0xb88>)
 801f23c:	4630      	mov	r0, r6
 801f23e:	f7fe fb61 	bl	801d904 <dwt_modify8bitoffsetreg>
 801f242:	b97c      	cbnz	r4, 801f264 <dwt_ioctl+0x908>
 801f244:	4630      	mov	r0, r6
 801f246:	f7ff fb61 	bl	801e90c <ull_softreset_no_sema_fcmd>
 801f24a:	2001      	movs	r0, #1
 801f24c:	f7e1 fc92 	bl	8000b74 <deca_sleep>
 801f250:	6d33      	ldr	r3, [r6, #80]	; 0x50
 801f252:	2500      	movs	r5, #0
 801f254:	739d      	strb	r5, [r3, #14]
 801f256:	2202      	movs	r2, #2
 801f258:	821a      	strh	r2, [r3, #16]
 801f25a:	751d      	strb	r5, [r3, #20]
 801f25c:	755d      	strb	r5, [r3, #21]
 801f25e:	73dd      	strb	r5, [r3, #15]
 801f260:	f001 ba7e 	b.w	8020760 <dwt_ioctl+0x1e04>
 801f264:	4630      	mov	r0, r6
 801f266:	f7ff fb65 	bl	801e934 <ull_softreset_fcmd>
 801f26a:	e7ee      	b.n	801f24a <dwt_ioctl+0x8ee>
 801f26c:	2c00      	cmp	r4, #0
 801f26e:	f001 82c9 	beq.w	8020804 <dwt_ioctl+0x1ea8>
 801f272:	7823      	ldrb	r3, [r4, #0]
 801f274:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801f278:	6d02      	ldr	r2, [r0, #80]	; 0x50
 801f27a:	7353      	strb	r3, [r2, #13]
 801f27c:	2200      	movs	r2, #0
 801f27e:	499a      	ldr	r1, [pc, #616]	; (801f4e8 <dwt_ioctl+0xb8c>)
 801f280:	f7fd feae 	bl	801cfe0 <dwt_write8bitoffsetreg>
 801f284:	2500      	movs	r5, #0
 801f286:	f001 ba6b 	b.w	8020760 <dwt_ioctl+0x1e04>
 801f28a:	2c00      	cmp	r4, #0
 801f28c:	f001 82bc 	beq.w	8020808 <dwt_ioctl+0x1eac>
 801f290:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801f292:	7b5b      	ldrb	r3, [r3, #13]
 801f294:	7023      	strb	r3, [r4, #0]
 801f296:	2500      	movs	r5, #0
 801f298:	f001 ba62 	b.w	8020760 <dwt_ioctl+0x1e04>
 801f29c:	2101      	movs	r1, #1
 801f29e:	f7fe f9f5 	bl	801d68c <ull_enable_rf_tx>
 801f2a2:	4630      	mov	r0, r6
 801f2a4:	f7fe fa26 	bl	801d6f4 <ull_enable_rftx_blocks>
 801f2a8:	2101      	movs	r1, #1
 801f2aa:	4630      	mov	r0, r6
 801f2ac:	f7fd fc68 	bl	801cb80 <ull_force_clocks>
 801f2b0:	220f      	movs	r2, #15
 801f2b2:	2101      	movs	r1, #1
 801f2b4:	4630      	mov	r0, r6
 801f2b6:	f7fd fe39 	bl	801cf2c <ull_repeated_cw>
 801f2ba:	2500      	movs	r5, #0
 801f2bc:	f001 ba50 	b.w	8020760 <dwt_ioctl+0x1e04>
 801f2c0:	2c00      	cmp	r4, #0
 801f2c2:	f001 82a3 	beq.w	802080c <dwt_ioctl+0x1eb0>
 801f2c6:	6862      	ldr	r2, [r4, #4]
 801f2c8:	6821      	ldr	r1, [r4, #0]
 801f2ca:	f7fd fe2f 	bl	801cf2c <ull_repeated_cw>
 801f2ce:	2500      	movs	r5, #0
 801f2d0:	f001 ba46 	b.w	8020760 <dwt_ioctl+0x1e04>
 801f2d4:	2c00      	cmp	r4, #0
 801f2d6:	f001 829b 	beq.w	8020810 <dwt_ioctl+0x1eb4>
 801f2da:	4d84      	ldr	r5, [pc, #528]	; (801f4ec <dwt_ioctl+0xb90>)
 801f2dc:	2200      	movs	r2, #0
 801f2de:	4629      	mov	r1, r5
 801f2e0:	f7fd f810 	bl	801c304 <dwt_read8bitoffsetreg>
 801f2e4:	4680      	mov	r8, r0
 801f2e6:	2302      	movs	r3, #2
 801f2e8:	9300      	str	r3, [sp, #0]
 801f2ea:	23ff      	movs	r3, #255	; 0xff
 801f2ec:	2200      	movs	r2, #0
 801f2ee:	4629      	mov	r1, r5
 801f2f0:	4630      	mov	r0, r6
 801f2f2:	f7fe fb07 	bl	801d904 <dwt_modify8bitoffsetreg>
 801f2f6:	2304      	movs	r3, #4
 801f2f8:	2200      	movs	r2, #0
 801f2fa:	497d      	ldr	r1, [pc, #500]	; (801f4f0 <dwt_ioctl+0xb94>)
 801f2fc:	4630      	mov	r0, r6
 801f2fe:	f7fd fe6f 	bl	801cfe0 <dwt_write8bitoffsetreg>
 801f302:	2301      	movs	r3, #1
 801f304:	2200      	movs	r2, #0
 801f306:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801f30a:	4630      	mov	r0, r6
 801f30c:	f7fd fe68 	bl	801cfe0 <dwt_write8bitoffsetreg>
 801f310:	4f78      	ldr	r7, [pc, #480]	; (801f4f4 <dwt_ioctl+0xb98>)
 801f312:	2500      	movs	r5, #0
 801f314:	462a      	mov	r2, r5
 801f316:	4639      	mov	r1, r7
 801f318:	4630      	mov	r0, r6
 801f31a:	f7fc fff3 	bl	801c304 <dwt_read8bitoffsetreg>
 801f31e:	f010 0f01 	tst.w	r0, #1
 801f322:	d0f7      	beq.n	801f314 <dwt_ioctl+0x9b8>
 801f324:	2200      	movs	r2, #0
 801f326:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 801f32a:	4630      	mov	r0, r6
 801f32c:	f7fc ffab 	bl	801c286 <dwt_read16bitoffsetreg>
 801f330:	4605      	mov	r5, r0
 801f332:	2300      	movs	r3, #0
 801f334:	461a      	mov	r2, r3
 801f336:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801f33a:	4630      	mov	r0, r6
 801f33c:	f7fd fe50 	bl	801cfe0 <dwt_write8bitoffsetreg>
 801f340:	2300      	movs	r3, #0
 801f342:	461a      	mov	r2, r3
 801f344:	496a      	ldr	r1, [pc, #424]	; (801f4f0 <dwt_ioctl+0xb94>)
 801f346:	4630      	mov	r0, r6
 801f348:	f7fd fe4a 	bl	801cfe0 <dwt_write8bitoffsetreg>
 801f34c:	4643      	mov	r3, r8
 801f34e:	2200      	movs	r2, #0
 801f350:	4966      	ldr	r1, [pc, #408]	; (801f4ec <dwt_ioctl+0xb90>)
 801f352:	4630      	mov	r0, r6
 801f354:	f7fd fe44 	bl	801cfe0 <dwt_write8bitoffsetreg>
 801f358:	8025      	strh	r5, [r4, #0]
 801f35a:	2500      	movs	r5, #0
 801f35c:	f001 ba00 	b.w	8020760 <dwt_ioctl+0x1e04>
 801f360:	2c00      	cmp	r4, #0
 801f362:	f001 8257 	beq.w	8020814 <dwt_ioctl+0x1eb8>
 801f366:	7920      	ldrb	r0, [r4, #4]
 801f368:	6d33      	ldr	r3, [r6, #80]	; 0x50
 801f36a:	7a9b      	ldrb	r3, [r3, #10]
 801f36c:	1ac0      	subs	r0, r0, r3
 801f36e:	f7e1 f8bb 	bl	80004e8 <__aeabi_i2f>
 801f372:	4961      	ldr	r1, [pc, #388]	; (801f4f8 <dwt_ioctl+0xb9c>)
 801f374:	f7e1 f90c 	bl	8000590 <__aeabi_fmul>
 801f378:	4960      	ldr	r1, [pc, #384]	; (801f4fc <dwt_ioctl+0xba0>)
 801f37a:	f7e1 f801 	bl	8000380 <__addsf3>
 801f37e:	6020      	str	r0, [r4, #0]
 801f380:	2500      	movs	r5, #0
 801f382:	f001 b9ed 	b.w	8020760 <dwt_ioctl+0x1e04>
 801f386:	2c00      	cmp	r4, #0
 801f388:	f001 8246 	beq.w	8020818 <dwt_ioctl+0x1ebc>
 801f38c:	7920      	ldrb	r0, [r4, #4]
 801f38e:	6d33      	ldr	r3, [r6, #80]	; 0x50
 801f390:	7a5b      	ldrb	r3, [r3, #9]
 801f392:	1ac0      	subs	r0, r0, r3
 801f394:	f7e1 f8a8 	bl	80004e8 <__aeabi_i2f>
 801f398:	4959      	ldr	r1, [pc, #356]	; (801f500 <dwt_ioctl+0xba4>)
 801f39a:	f7e1 f8f9 	bl	8000590 <__aeabi_fmul>
 801f39e:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 801f3a2:	f7e1 f8f5 	bl	8000590 <__aeabi_fmul>
 801f3a6:	4957      	ldr	r1, [pc, #348]	; (801f504 <dwt_ioctl+0xba8>)
 801f3a8:	f7e1 f9a6 	bl	80006f8 <__aeabi_fdiv>
 801f3ac:	4956      	ldr	r1, [pc, #344]	; (801f508 <dwt_ioctl+0xbac>)
 801f3ae:	f7e0 ffe7 	bl	8000380 <__addsf3>
 801f3b2:	6020      	str	r0, [r4, #0]
 801f3b4:	2500      	movs	r5, #0
 801f3b6:	f001 b9d3 	b.w	8020760 <dwt_ioctl+0x1e04>
 801f3ba:	2c00      	cmp	r4, #0
 801f3bc:	f001 822e 	beq.w	802081c <dwt_ioctl+0x1ec0>
 801f3c0:	6824      	ldr	r4, [r4, #0]
 801f3c2:	2101      	movs	r1, #1
 801f3c4:	f7fe f962 	bl	801d68c <ull_enable_rf_tx>
 801f3c8:	4630      	mov	r0, r6
 801f3ca:	f7fe f993 	bl	801d6f4 <ull_enable_rftx_blocks>
 801f3ce:	2101      	movs	r1, #1
 801f3d0:	4630      	mov	r0, r6
 801f3d2:	f7fd fbd5 	bl	801cb80 <ull_force_clocks>
 801f3d6:	4621      	mov	r1, r4
 801f3d8:	4630      	mov	r0, r6
 801f3da:	f7fe fcab 	bl	801dd34 <ull_repeated_frames>
 801f3de:	2500      	movs	r5, #0
 801f3e0:	f001 b9be 	b.w	8020760 <dwt_ioctl+0x1e04>
 801f3e4:	2500      	movs	r5, #0
 801f3e6:	9500      	str	r5, [sp, #0]
 801f3e8:	23ef      	movs	r3, #239	; 0xef
 801f3ea:	462a      	mov	r2, r5
 801f3ec:	4947      	ldr	r1, [pc, #284]	; (801f50c <dwt_ioctl+0xbb0>)
 801f3ee:	f7fe fa89 	bl	801d904 <dwt_modify8bitoffsetreg>
 801f3f2:	2105      	movs	r1, #5
 801f3f4:	4630      	mov	r0, r6
 801f3f6:	f7fd fbc3 	bl	801cb80 <ull_force_clocks>
 801f3fa:	2101      	movs	r1, #1
 801f3fc:	4630      	mov	r0, r6
 801f3fe:	f7fd fd77 	bl	801cef0 <ull_disable_rf_tx>
 801f402:	4630      	mov	r0, r6
 801f404:	f7fd fd6a 	bl	801cedc <ull_disable_rftx_blocks>
 801f408:	f001 b9aa 	b.w	8020760 <dwt_ioctl+0x1e04>
 801f40c:	2500      	movs	r5, #0
 801f40e:	9500      	str	r5, [sp, #0]
 801f410:	23ef      	movs	r3, #239	; 0xef
 801f412:	462a      	mov	r2, r5
 801f414:	493d      	ldr	r1, [pc, #244]	; (801f50c <dwt_ioctl+0xbb0>)
 801f416:	f7fe fa75 	bl	801d904 <dwt_modify8bitoffsetreg>
 801f41a:	f001 b9a1 	b.w	8020760 <dwt_ioctl+0x1e04>
 801f41e:	2c00      	cmp	r4, #0
 801f420:	f001 81fe 	beq.w	8020820 <dwt_ioctl+0x1ec4>
 801f424:	6821      	ldr	r1, [r4, #0]
 801f426:	f7fe fc85 	bl	801dd34 <ull_repeated_frames>
 801f42a:	2500      	movs	r5, #0
 801f42c:	f001 b998 	b.w	8020760 <dwt_ioctl+0x1e04>
 801f430:	2200      	movs	r2, #0
 801f432:	4937      	ldr	r1, [pc, #220]	; (801f510 <dwt_ioctl+0xbb4>)
 801f434:	f7fc ff27 	bl	801c286 <dwt_read16bitoffsetreg>
 801f438:	f3c0 050b 	ubfx	r5, r0, #0, #12
 801f43c:	f410 6f00 	tst.w	r0, #2048	; 0x800
 801f440:	bf18      	it	ne
 801f442:	f445 4570 	orrne.w	r5, r5, #61440	; 0xf000
 801f446:	b22d      	sxth	r5, r5
 801f448:	8025      	strh	r5, [r4, #0]
 801f44a:	6d33      	ldr	r3, [r6, #80]	; 0x50
 801f44c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801f450:	1aed      	subs	r5, r5, r3
 801f452:	f001 b985 	b.w	8020760 <dwt_ioctl+0x1e04>
 801f456:	2c00      	cmp	r4, #0
 801f458:	f001 81e4 	beq.w	8020824 <dwt_ioctl+0x1ec8>
 801f45c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801f460:	7a23      	ldrb	r3, [r4, #8]
 801f462:	f899 2013 	ldrb.w	r2, [r9, #19]
 801f466:	2aff      	cmp	r2, #255	; 0xff
 801f468:	f000 8103 	beq.w	801f672 <dwt_ioctl+0xd16>
 801f46c:	bb93      	cbnz	r3, 801f4d4 <dwt_ioctl+0xb78>
 801f46e:	f8d9 1000 	ldr.w	r1, [r9]
 801f472:	f7fd fec3 	bl	801d1fc <ull_update_nonce_GCM>
 801f476:	f899 300c 	ldrb.w	r3, [r9, #12]
 801f47a:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 801f47e:	18d1      	adds	r1, r2, r3
 801f480:	f899 2012 	ldrb.w	r2, [r9, #18]
 801f484:	2a00      	cmp	r2, #0
 801f486:	d145      	bne.n	801f514 <dwt_ioctl+0xbb8>
 801f488:	f899 0010 	ldrb.w	r0, [r9, #16]
 801f48c:	2800      	cmp	r0, #0
 801f48e:	bf0b      	itete	eq
 801f490:	227f      	moveq	r2, #127	; 0x7f
 801f492:	f44f 6280 	movne.w	r2, #1024	; 0x400
 801f496:	f44f 15b0 	moveq.w	r5, #1441792	; 0x160000
 801f49a:	f44f 15a0 	movne.w	r5, #1310720	; 0x140000
 801f49e:	f899 0013 	ldrb.w	r0, [r9, #19]
 801f4a2:	1a12      	subs	r2, r2, r0
 801f4a4:	3a02      	subs	r2, #2
 801f4a6:	4291      	cmp	r1, r2
 801f4a8:	f200 80ec 	bhi.w	801f684 <dwt_ioctl+0xd28>
 801f4ac:	f8d9 2004 	ldr.w	r2, [r9, #4]
 801f4b0:	9200      	str	r2, [sp, #0]
 801f4b2:	2200      	movs	r2, #0
 801f4b4:	4629      	mov	r1, r5
 801f4b6:	4630      	mov	r0, r6
 801f4b8:	f7fd fb38 	bl	801cb2c <dwt_writetodevice>
 801f4bc:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 801f4c0:	f899 200c 	ldrb.w	r2, [r9, #12]
 801f4c4:	f8d9 1008 	ldr.w	r1, [r9, #8]
 801f4c8:	9100      	str	r1, [sp, #0]
 801f4ca:	4629      	mov	r1, r5
 801f4cc:	4630      	mov	r0, r6
 801f4ce:	f7fd fb2d 	bl	801cb2c <dwt_writetodevice>
 801f4d2:	e030      	b.n	801f536 <dwt_ioctl+0xbda>
 801f4d4:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 801f4d8:	f8d9 1000 	ldr.w	r1, [r9]
 801f4dc:	f7fd fe9c 	bl	801d218 <ull_update_nonce_CCM>
 801f4e0:	e7c9      	b.n	801f476 <dwt_ioctl+0xb1a>
 801f4e2:	bf00      	nop
 801f4e4:	00110004 	.word	0x00110004
 801f4e8:	00090014 	.word	0x00090014
 801f4ec:	00070048 	.word	0x00070048
 801f4f0:	00070034 	.word	0x00070034
 801f4f4:	00080004 	.word	0x00080004
 801f4f8:	3f866666 	.word	0x3f866666
 801f4fc:	41b00000 	.word	0x41b00000
 801f500:	3ecccccd 	.word	0x3ecccccd
 801f504:	437f0000 	.word	0x437f0000
 801f508:	40400000 	.word	0x40400000
 801f50c:	000f0028 	.word	0x000f0028
 801f510:	00020008 	.word	0x00020008
 801f514:	2a01      	cmp	r2, #1
 801f516:	f040 80af 	bne.w	801f678 <dwt_ioctl+0xd1c>
 801f51a:	f899 3011 	ldrb.w	r3, [r9, #17]
 801f51e:	2b00      	cmp	r3, #0
 801f520:	f240 33ff 	movw	r3, #1023	; 0x3ff
 801f524:	bf08      	it	eq
 801f526:	237f      	moveq	r3, #127	; 0x7f
 801f528:	f899 2013 	ldrb.w	r2, [r9, #19]
 801f52c:	1a9b      	subs	r3, r3, r2
 801f52e:	3b02      	subs	r3, #2
 801f530:	4299      	cmp	r1, r3
 801f532:	f200 80a4 	bhi.w	801f67e <dwt_ioctl+0xd22>
 801f536:	f899 2010 	ldrb.w	r2, [r9, #16]
 801f53a:	1e53      	subs	r3, r2, #1
 801f53c:	b2db      	uxtb	r3, r3
 801f53e:	2b01      	cmp	r3, #1
 801f540:	d940      	bls.n	801f5c4 <dwt_ioctl+0xc68>
 801f542:	f899 3011 	ldrb.w	r3, [r9, #17]
 801f546:	1e59      	subs	r1, r3, #1
 801f548:	b2c9      	uxtb	r1, r1
 801f54a:	2901      	cmp	r1, #1
 801f54c:	d947      	bls.n	801f5de <dwt_ioctl+0xc82>
 801f54e:	2b04      	cmp	r3, #4
 801f550:	d04c      	beq.n	801f5ec <dwt_ioctl+0xc90>
 801f552:	ea42 3343 	orr.w	r3, r2, r3, lsl #13
 801f556:	2200      	movs	r2, #0
 801f558:	49ba      	ldr	r1, [pc, #744]	; (801f844 <dwt_ioctl+0xee8>)
 801f55a:	4630      	mov	r0, r6
 801f55c:	f7fd fb5c 	bl	801cc18 <dwt_write32bitoffsetreg>
 801f560:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 801f564:	4ab8      	ldr	r2, [pc, #736]	; (801f848 <dwt_ioctl+0xeec>)
 801f566:	ea02 12c3 	and.w	r2, r2, r3, lsl #7
 801f56a:	f899 300c 	ldrb.w	r3, [r9, #12]
 801f56e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801f572:	4313      	orrs	r3, r2
 801f574:	2200      	movs	r2, #0
 801f576:	49b5      	ldr	r1, [pc, #724]	; (801f84c <dwt_ioctl+0xef0>)
 801f578:	4630      	mov	r0, r6
 801f57a:	f7fd fb4d 	bl	801cc18 <dwt_write32bitoffsetreg>
 801f57e:	2301      	movs	r3, #1
 801f580:	2200      	movs	r2, #0
 801f582:	49b3      	ldr	r1, [pc, #716]	; (801f850 <dwt_ioctl+0xef4>)
 801f584:	4630      	mov	r0, r6
 801f586:	f7fd fd2b 	bl	801cfe0 <dwt_write8bitoffsetreg>
 801f58a:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 801f854 <dwt_ioctl+0xef8>
 801f58e:	2700      	movs	r7, #0
 801f590:	463a      	mov	r2, r7
 801f592:	4641      	mov	r1, r8
 801f594:	4630      	mov	r0, r6
 801f596:	f7fc feb5 	bl	801c304 <dwt_read8bitoffsetreg>
 801f59a:	f010 0f05 	tst.w	r0, #5
 801f59e:	d0f7      	beq.n	801f590 <dwt_ioctl+0xc34>
 801f5a0:	4605      	mov	r5, r0
 801f5a2:	4603      	mov	r3, r0
 801f5a4:	2200      	movs	r2, #0
 801f5a6:	49ab      	ldr	r1, [pc, #684]	; (801f854 <dwt_ioctl+0xef8>)
 801f5a8:	4630      	mov	r0, r6
 801f5aa:	f7fd fd19 	bl	801cfe0 <dwt_write8bitoffsetreg>
 801f5ae:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 801f5b2:	f025 0330 	bic.w	r3, r5, #48	; 0x30
 801f5b6:	2b01      	cmp	r3, #1
 801f5b8:	d025      	beq.n	801f606 <dwt_ioctl+0xcaa>
 801f5ba:	b26b      	sxtb	r3, r5
 801f5bc:	7023      	strb	r3, [r4, #0]
 801f5be:	2500      	movs	r5, #0
 801f5c0:	f001 b8ce 	b.w	8020760 <dwt_ioctl+0x1e04>
 801f5c4:	6d33      	ldr	r3, [r6, #80]	; 0x50
 801f5c6:	7b9b      	ldrb	r3, [r3, #14]
 801f5c8:	2b03      	cmp	r3, #3
 801f5ca:	f001 81af 	beq.w	802092c <dwt_ioctl+0x1fd0>
 801f5ce:	f899 3011 	ldrb.w	r3, [r9, #17]
 801f5d2:	1e5a      	subs	r2, r3, #1
 801f5d4:	b2d2      	uxtb	r2, r2
 801f5d6:	2a01      	cmp	r2, #1
 801f5d8:	d912      	bls.n	801f600 <dwt_ioctl+0xca4>
 801f5da:	2201      	movs	r2, #1
 801f5dc:	e7b7      	b.n	801f54e <dwt_ioctl+0xbf2>
 801f5de:	6d33      	ldr	r3, [r6, #80]	; 0x50
 801f5e0:	7b9b      	ldrb	r3, [r3, #14]
 801f5e2:	2b03      	cmp	r3, #3
 801f5e4:	bf0c      	ite	eq
 801f5e6:	2302      	moveq	r3, #2
 801f5e8:	2301      	movne	r3, #1
 801f5ea:	e7b2      	b.n	801f552 <dwt_ioctl+0xbf6>
 801f5ec:	f8b9 100e 	ldrh.w	r1, [r9, #14]
 801f5f0:	2910      	cmp	r1, #16
 801f5f2:	d9ae      	bls.n	801f552 <dwt_ioctl+0xbf6>
 801f5f4:	f06f 0303 	mvn.w	r3, #3
 801f5f8:	e7e0      	b.n	801f5bc <dwt_ioctl+0xc60>
 801f5fa:	2202      	movs	r2, #2
 801f5fc:	4613      	mov	r3, r2
 801f5fe:	e7a8      	b.n	801f552 <dwt_ioctl+0xbf6>
 801f600:	2201      	movs	r2, #1
 801f602:	4613      	mov	r3, r2
 801f604:	e7a5      	b.n	801f552 <dwt_ioctl+0xbf6>
 801f606:	f899 3012 	ldrb.w	r3, [r9, #18]
 801f60a:	2b01      	cmp	r3, #1
 801f60c:	d1d5      	bne.n	801f5ba <dwt_ioctl+0xc5e>
 801f60e:	f899 2011 	ldrb.w	r2, [r9, #17]
 801f612:	1e53      	subs	r3, r2, #1
 801f614:	b2db      	uxtb	r3, r3
 801f616:	2b01      	cmp	r3, #1
 801f618:	d91b      	bls.n	801f652 <dwt_ioctl+0xcf6>
 801f61a:	2a03      	cmp	r2, #3
 801f61c:	bf0c      	ite	eq
 801f61e:	f44f 17a0 	moveq.w	r7, #1310720	; 0x140000
 801f622:	f44f 17b0 	movne.w	r7, #1441792	; 0x160000
 801f626:	f8d9 2004 	ldr.w	r2, [r9, #4]
 801f62a:	b112      	cbz	r2, 801f632 <dwt_ioctl+0xcd6>
 801f62c:	f899 300c 	ldrb.w	r3, [r9, #12]
 801f630:	b9c3      	cbnz	r3, 801f664 <dwt_ioctl+0xd08>
 801f632:	f8d9 1008 	ldr.w	r1, [r9, #8]
 801f636:	2900      	cmp	r1, #0
 801f638:	d0bf      	beq.n	801f5ba <dwt_ioctl+0xc5e>
 801f63a:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 801f63e:	2b00      	cmp	r3, #0
 801f640:	d0bb      	beq.n	801f5ba <dwt_ioctl+0xc5e>
 801f642:	f899 200c 	ldrb.w	r2, [r9, #12]
 801f646:	9100      	str	r1, [sp, #0]
 801f648:	4639      	mov	r1, r7
 801f64a:	4630      	mov	r0, r6
 801f64c:	f7fc fdfb 	bl	801c246 <dwt_readfromdevice>
 801f650:	e7b3      	b.n	801f5ba <dwt_ioctl+0xc5e>
 801f652:	6d33      	ldr	r3, [r6, #80]	; 0x50
 801f654:	7b9b      	ldrb	r3, [r3, #14]
 801f656:	2b03      	cmp	r3, #3
 801f658:	bf0c      	ite	eq
 801f65a:	f44f 1798 	moveq.w	r7, #1245184	; 0x130000
 801f65e:	f44f 1790 	movne.w	r7, #1179648	; 0x120000
 801f662:	e7e0      	b.n	801f626 <dwt_ioctl+0xcca>
 801f664:	9200      	str	r2, [sp, #0]
 801f666:	2200      	movs	r2, #0
 801f668:	4639      	mov	r1, r7
 801f66a:	4630      	mov	r0, r6
 801f66c:	f7fc fdeb 	bl	801c246 <dwt_readfromdevice>
 801f670:	e7df      	b.n	801f632 <dwt_ioctl+0xcd6>
 801f672:	f06f 0302 	mvn.w	r3, #2
 801f676:	e7a1      	b.n	801f5bc <dwt_ioctl+0xc60>
 801f678:	f06f 0301 	mvn.w	r3, #1
 801f67c:	e79e      	b.n	801f5bc <dwt_ioctl+0xc60>
 801f67e:	f04f 33ff 	mov.w	r3, #4294967295
 801f682:	e79b      	b.n	801f5bc <dwt_ioctl+0xc60>
 801f684:	f04f 33ff 	mov.w	r3, #4294967295
 801f688:	e798      	b.n	801f5bc <dwt_ioctl+0xc60>
 801f68a:	7a23      	ldrb	r3, [r4, #8]
 801f68c:	79e1      	ldrb	r1, [r4, #7]
 801f68e:	79a2      	ldrb	r2, [r4, #6]
 801f690:	00d2      	lsls	r2, r2, #3
 801f692:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801f696:	4313      	orrs	r3, r2
 801f698:	7962      	ldrb	r2, [r4, #5]
 801f69a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 801f69e:	7922      	ldrb	r2, [r4, #4]
 801f6a0:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 801f6a4:	78e2      	ldrb	r2, [r4, #3]
 801f6a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801f6aa:	78a2      	ldrb	r2, [r4, #2]
 801f6ac:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 801f6b0:	7862      	ldrb	r2, [r4, #1]
 801f6b2:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 801f6b6:	7822      	ldrb	r2, [r4, #0]
 801f6b8:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 801f6bc:	b29b      	uxth	r3, r3
 801f6be:	2200      	movs	r2, #0
 801f6c0:	4965      	ldr	r1, [pc, #404]	; (801f858 <dwt_ioctl+0xefc>)
 801f6c2:	f7fd fa3e 	bl	801cb42 <dwt_write16bitoffsetreg>
 801f6c6:	2500      	movs	r5, #0
 801f6c8:	f001 b84a 	b.w	8020760 <dwt_ioctl+0x1e04>
 801f6cc:	2c00      	cmp	r4, #0
 801f6ce:	f001 80ab 	beq.w	8020828 <dwt_ioctl+0x1ecc>
 801f6d2:	7863      	ldrb	r3, [r4, #1]
 801f6d4:	b133      	cbz	r3, 801f6e4 <dwt_ioctl+0xd88>
 801f6d6:	085b      	lsrs	r3, r3, #1
 801f6d8:	3b01      	subs	r3, #1
 801f6da:	b2db      	uxtb	r3, r3
 801f6dc:	7023      	strb	r3, [r4, #0]
 801f6de:	2500      	movs	r5, #0
 801f6e0:	f001 b83e 	b.w	8020760 <dwt_ioctl+0x1e04>
 801f6e4:	2300      	movs	r3, #0
 801f6e6:	e7f9      	b.n	801f6dc <dwt_ioctl+0xd80>
 801f6e8:	2200      	movs	r2, #0
 801f6ea:	495c      	ldr	r1, [pc, #368]	; (801f85c <dwt_ioctl+0xf00>)
 801f6ec:	f7fc fdb5 	bl	801c25a <dwt_read32bitoffsetreg>
 801f6f0:	f3c0 030b 	ubfx	r3, r0, #0, #12
 801f6f4:	8023      	strh	r3, [r4, #0]
 801f6f6:	f3c0 400b 	ubfx	r0, r0, #16, #12
 801f6fa:	8060      	strh	r0, [r4, #2]
 801f6fc:	2200      	movs	r2, #0
 801f6fe:	4958      	ldr	r1, [pc, #352]	; (801f860 <dwt_ioctl+0xf04>)
 801f700:	4630      	mov	r0, r6
 801f702:	f7fc fdaa 	bl	801c25a <dwt_read32bitoffsetreg>
 801f706:	f3c0 030b 	ubfx	r3, r0, #0, #12
 801f70a:	80a3      	strh	r3, [r4, #4]
 801f70c:	f3c0 400b 	ubfx	r0, r0, #16, #12
 801f710:	80e0      	strh	r0, [r4, #6]
 801f712:	2200      	movs	r2, #0
 801f714:	4953      	ldr	r1, [pc, #332]	; (801f864 <dwt_ioctl+0xf08>)
 801f716:	4630      	mov	r0, r6
 801f718:	f7fc fd9f 	bl	801c25a <dwt_read32bitoffsetreg>
 801f71c:	7220      	strb	r0, [r4, #8]
 801f71e:	0c00      	lsrs	r0, r0, #16
 801f720:	7260      	strb	r0, [r4, #9]
 801f722:	2200      	movs	r2, #0
 801f724:	4950      	ldr	r1, [pc, #320]	; (801f868 <dwt_ioctl+0xf0c>)
 801f726:	4630      	mov	r0, r6
 801f728:	f7fc fd97 	bl	801c25a <dwt_read32bitoffsetreg>
 801f72c:	f3c0 430b 	ubfx	r3, r0, #16, #12
 801f730:	81a3      	strh	r3, [r4, #12]
 801f732:	f3c0 000b 	ubfx	r0, r0, #0, #12
 801f736:	8160      	strh	r0, [r4, #10]
 801f738:	2200      	movs	r2, #0
 801f73a:	494c      	ldr	r1, [pc, #304]	; (801f86c <dwt_ioctl+0xf10>)
 801f73c:	4630      	mov	r0, r6
 801f73e:	f7fc fd8c 	bl	801c25a <dwt_read32bitoffsetreg>
 801f742:	f3c0 430b 	ubfx	r3, r0, #16, #12
 801f746:	f8a4 300f 	strh.w	r3, [r4, #15]
 801f74a:	73a0      	strb	r0, [r4, #14]
 801f74c:	2200      	movs	r2, #0
 801f74e:	4948      	ldr	r1, [pc, #288]	; (801f870 <dwt_ioctl+0xf14>)
 801f750:	4630      	mov	r0, r6
 801f752:	f7fc fd82 	bl	801c25a <dwt_read32bitoffsetreg>
 801f756:	7460      	strb	r0, [r4, #17]
 801f758:	0c00      	lsrs	r0, r0, #16
 801f75a:	74a0      	strb	r0, [r4, #18]
 801f75c:	2200      	movs	r2, #0
 801f75e:	4945      	ldr	r1, [pc, #276]	; (801f874 <dwt_ioctl+0xf18>)
 801f760:	4630      	mov	r0, r6
 801f762:	f7fc fd7a 	bl	801c25a <dwt_read32bitoffsetreg>
 801f766:	f3c0 030b 	ubfx	r3, r0, #0, #12
 801f76a:	f8a4 3013 	strh.w	r3, [r4, #19]
 801f76e:	f3c0 400b 	ubfx	r0, r0, #16, #12
 801f772:	f8a4 0015 	strh.w	r0, [r4, #21]
 801f776:	2200      	movs	r2, #0
 801f778:	493f      	ldr	r1, [pc, #252]	; (801f878 <dwt_ioctl+0xf1c>)
 801f77a:	4630      	mov	r0, r6
 801f77c:	f7fc fdc2 	bl	801c304 <dwt_read8bitoffsetreg>
 801f780:	75e0      	strb	r0, [r4, #23]
 801f782:	2500      	movs	r5, #0
 801f784:	f000 bfec 	b.w	8020760 <dwt_ioctl+0x1e04>
 801f788:	4611      	mov	r1, r2
 801f78a:	f7fd fca1 	bl	801d0d0 <ull_configeventcounters>
 801f78e:	2500      	movs	r5, #0
 801f790:	f000 bfe6 	b.w	8020760 <dwt_ioctl+0x1e04>
 801f794:	2c00      	cmp	r4, #0
 801f796:	f001 8049 	beq.w	802082c <dwt_ioctl+0x1ed0>
 801f79a:	8823      	ldrh	r3, [r4, #0]
 801f79c:	2200      	movs	r2, #0
 801f79e:	4937      	ldr	r1, [pc, #220]	; (801f87c <dwt_ioctl+0xf20>)
 801f7a0:	f7fd f9cf 	bl	801cb42 <dwt_write16bitoffsetreg>
 801f7a4:	2500      	movs	r5, #0
 801f7a6:	f000 bfdb 	b.w	8020760 <dwt_ioctl+0x1e04>
 801f7aa:	2c00      	cmp	r4, #0
 801f7ac:	f001 8040 	beq.w	8020830 <dwt_ioctl+0x1ed4>
 801f7b0:	6825      	ldr	r5, [r4, #0]
 801f7b2:	b935      	cbnz	r5, 801f7c2 <dwt_ioctl+0xe66>
 801f7b4:	2300      	movs	r3, #0
 801f7b6:	461a      	mov	r2, r3
 801f7b8:	4931      	ldr	r1, [pc, #196]	; (801f880 <dwt_ioctl+0xf24>)
 801f7ba:	f7fd f9c2 	bl	801cb42 <dwt_write16bitoffsetreg>
 801f7be:	f000 bfcf 	b.w	8020760 <dwt_ioctl+0x1e04>
 801f7c2:	7962      	ldrb	r2, [r4, #5]
 801f7c4:	7923      	ldrb	r3, [r4, #4]
 801f7c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801f7ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801f7ce:	2200      	movs	r2, #0
 801f7d0:	492b      	ldr	r1, [pc, #172]	; (801f880 <dwt_ioctl+0xf24>)
 801f7d2:	f7fd f9b6 	bl	801cb42 <dwt_write16bitoffsetreg>
 801f7d6:	2500      	movs	r5, #0
 801f7d8:	f000 bfc2 	b.w	8020760 <dwt_ioctl+0x1e04>
 801f7dc:	2c00      	cmp	r4, #0
 801f7de:	f001 8029 	beq.w	8020834 <dwt_ioctl+0x1ed8>
 801f7e2:	6823      	ldr	r3, [r4, #0]
 801f7e4:	b94b      	cbnz	r3, 801f7fa <dwt_ioctl+0xe9e>
 801f7e6:	2500      	movs	r5, #0
 801f7e8:	9500      	str	r5, [sp, #0]
 801f7ea:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 801f7ee:	462a      	mov	r2, r5
 801f7f0:	2110      	movs	r1, #16
 801f7f2:	f7fe fc17 	bl	801e024 <dwt_modify16bitoffsetreg>
 801f7f6:	f000 bfb3 	b.w	8020760 <dwt_ioctl+0x1e04>
 801f7fa:	2200      	movs	r2, #0
 801f7fc:	2134      	movs	r1, #52	; 0x34
 801f7fe:	f7fd fa0b 	bl	801cc18 <dwt_write32bitoffsetreg>
 801f802:	f44f 7300 	mov.w	r3, #512	; 0x200
 801f806:	9300      	str	r3, [sp, #0]
 801f808:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801f80c:	2200      	movs	r2, #0
 801f80e:	2110      	movs	r1, #16
 801f810:	4630      	mov	r0, r6
 801f812:	f7fe fc07 	bl	801e024 <dwt_modify16bitoffsetreg>
 801f816:	2500      	movs	r5, #0
 801f818:	f000 bfa2 	b.w	8020760 <dwt_ioctl+0x1e04>
 801f81c:	2c00      	cmp	r4, #0
 801f81e:	f001 800b 	beq.w	8020838 <dwt_ioctl+0x1edc>
 801f822:	8861      	ldrh	r1, [r4, #2]
 801f824:	f7fd fc68 	bl	801d0f8 <ull_aon_read>
 801f828:	7020      	strb	r0, [r4, #0]
 801f82a:	2500      	movs	r5, #0
 801f82c:	f000 bf98 	b.w	8020760 <dwt_ioctl+0x1e04>
 801f830:	2c00      	cmp	r4, #0
 801f832:	f001 8003 	beq.w	802083c <dwt_ioctl+0x1ee0>
 801f836:	78a2      	ldrb	r2, [r4, #2]
 801f838:	8821      	ldrh	r1, [r4, #0]
 801f83a:	f7fd fc7d 	bl	801d138 <ull_aon_write>
 801f83e:	2500      	movs	r5, #0
 801f840:	f000 bf8e 	b.w	8020760 <dwt_ioctl+0x1e04>
 801f844:	00010044 	.word	0x00010044
 801f848:	0001ff80 	.word	0x0001ff80
 801f84c:	00010048 	.word	0x00010048
 801f850:	0001004c 	.word	0x0001004c
 801f854:	00010050 	.word	0x00010050
 801f858:	00010030 	.word	0x00010030
 801f85c:	000f0004 	.word	0x000f0004
 801f860:	000f0008 	.word	0x000f0008
 801f864:	000f000c 	.word	0x000f000c
 801f868:	000f0010 	.word	0x000f0010
 801f86c:	000f0014 	.word	0x000f0014
 801f870:	000f0018 	.word	0x000f0018
 801f874:	000f001c 	.word	0x000f001c
 801f878:	000f0020 	.word	0x000f0020
 801f87c:	00060004 	.word	0x00060004
 801f880:	0011001c 	.word	0x0011001c
 801f884:	4bd5      	ldr	r3, [pc, #852]	; (801fbdc <dwt_ioctl+0x1280>)
 801f886:	4ad6      	ldr	r2, [pc, #856]	; (801fbe0 <dwt_ioctl+0x1284>)
 801f888:	2d01      	cmp	r5, #1
 801f88a:	bf18      	it	ne
 801f88c:	4613      	movne	r3, r2
 801f88e:	2d01      	cmp	r5, #1
 801f890:	49d4      	ldr	r1, [pc, #848]	; (801fbe4 <dwt_ioctl+0x1288>)
 801f892:	bf18      	it	ne
 801f894:	f04f 110c 	movne.w	r1, #786444	; 0xc000c
 801f898:	6d02      	ldr	r2, [r0, #80]	; 0x50
 801f89a:	7b92      	ldrb	r2, [r2, #14]
 801f89c:	2a01      	cmp	r2, #1
 801f89e:	d012      	beq.n	801f8c6 <dwt_ioctl+0xf6a>
 801f8a0:	2a03      	cmp	r2, #3
 801f8a2:	d117      	bne.n	801f8d4 <dwt_ioctl+0xf78>
 801f8a4:	f5a2 12c0 	sub.w	r2, r2, #1572864	; 0x180000
 801f8a8:	3a01      	subs	r2, #1
 801f8aa:	441a      	add	r2, r3
 801f8ac:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 801f8b0:	f7fc fce9 	bl	801c286 <dwt_read16bitoffsetreg>
 801f8b4:	09c0      	lsrs	r0, r0, #7
 801f8b6:	8020      	strh	r0, [r4, #0]
 801f8b8:	8825      	ldrh	r5, [r4, #0]
 801f8ba:	3500      	adds	r5, #0
 801f8bc:	bf18      	it	ne
 801f8be:	2501      	movne	r5, #1
 801f8c0:	426d      	negs	r5, r5
 801f8c2:	f000 bf4d 	b.w	8020760 <dwt_ioctl+0x1e04>
 801f8c6:	2202      	movs	r2, #2
 801f8c8:	4619      	mov	r1, r3
 801f8ca:	f7fc fcdc 	bl	801c286 <dwt_read16bitoffsetreg>
 801f8ce:	09c0      	lsrs	r0, r0, #7
 801f8d0:	8020      	strh	r0, [r4, #0]
 801f8d2:	e7f1      	b.n	801f8b8 <dwt_ioctl+0xf5c>
 801f8d4:	2202      	movs	r2, #2
 801f8d6:	f7fc fcd6 	bl	801c286 <dwt_read16bitoffsetreg>
 801f8da:	09c0      	lsrs	r0, r0, #7
 801f8dc:	8020      	strh	r0, [r4, #0]
 801f8de:	e7eb      	b.n	801f8b8 <dwt_ioctl+0xf5c>
 801f8e0:	2c00      	cmp	r4, #0
 801f8e2:	f000 87ad 	beq.w	8020840 <dwt_ioctl+0x1ee4>
 801f8e6:	7821      	ldrb	r1, [r4, #0]
 801f8e8:	f7fe fbda 	bl	801e0a0 <ull_setleds>
 801f8ec:	2500      	movs	r5, #0
 801f8ee:	f000 bf37 	b.w	8020760 <dwt_ioctl+0x1e04>
 801f8f2:	4611      	mov	r1, r2
 801f8f4:	f7fe fa36 	bl	801dd64 <ull_setdwstate>
 801f8f8:	2500      	movs	r5, #0
 801f8fa:	f000 bf31 	b.w	8020760 <dwt_ioctl+0x1e04>
 801f8fe:	9400      	str	r4, [sp, #0]
 801f900:	2304      	movs	r3, #4
 801f902:	2200      	movs	r2, #0
 801f904:	211c      	movs	r1, #28
 801f906:	f7fc fc9e 	bl	801c246 <dwt_readfromdevice>
 801f90a:	2500      	movs	r5, #0
 801f90c:	f000 bf28 	b.w	8020760 <dwt_ioctl+0x1e04>
 801f910:	2c00      	cmp	r4, #0
 801f912:	f000 8797 	beq.w	8020844 <dwt_ioctl+0x1ee8>
 801f916:	2202      	movs	r2, #2
 801f918:	2144      	movs	r1, #68	; 0x44
 801f91a:	f7fc fcb4 	bl	801c286 <dwt_read16bitoffsetreg>
 801f91e:	f3c0 2000 	ubfx	r0, r0, #8, #1
 801f922:	7020      	strb	r0, [r4, #0]
 801f924:	2500      	movs	r5, #0
 801f926:	f000 bf1b 	b.w	8020760 <dwt_ioctl+0x1e04>
 801f92a:	2c00      	cmp	r4, #0
 801f92c:	f000 878c 	beq.w	8020848 <dwt_ioctl+0x1eec>
 801f930:	2200      	movs	r2, #0
 801f932:	2144      	movs	r1, #68	; 0x44
 801f934:	f7fc fce6 	bl	801c304 <dwt_read8bitoffsetreg>
 801f938:	f000 0001 	and.w	r0, r0, #1
 801f93c:	7020      	strb	r0, [r4, #0]
 801f93e:	2500      	movs	r5, #0
 801f940:	f000 bf0e 	b.w	8020760 <dwt_ioctl+0x1e04>
 801f944:	2c00      	cmp	r4, #0
 801f946:	f000 8781 	beq.w	802084c <dwt_ioctl+0x1ef0>
 801f94a:	8862      	ldrh	r2, [r4, #2]
 801f94c:	8821      	ldrh	r1, [r4, #0]
 801f94e:	f7fe fa67 	bl	801de20 <ull_configureframefilter>
 801f952:	2500      	movs	r5, #0
 801f954:	f000 bf04 	b.w	8020760 <dwt_ioctl+0x1e04>
 801f958:	9400      	str	r4, [sp, #0]
 801f95a:	2308      	movs	r3, #8
 801f95c:	2200      	movs	r2, #0
 801f95e:	2104      	movs	r1, #4
 801f960:	f7fd f8e4 	bl	801cb2c <dwt_writetodevice>
 801f964:	2500      	movs	r5, #0
 801f966:	f000 befb 	b.w	8020760 <dwt_ioctl+0x1e04>
 801f96a:	9400      	str	r4, [sp, #0]
 801f96c:	2308      	movs	r3, #8
 801f96e:	2200      	movs	r2, #0
 801f970:	2104      	movs	r1, #4
 801f972:	f7fc fc68 	bl	801c246 <dwt_readfromdevice>
 801f976:	2500      	movs	r5, #0
 801f978:	f000 bef2 	b.w	8020760 <dwt_ioctl+0x1e04>
 801f97c:	2c00      	cmp	r4, #0
 801f97e:	f000 8767 	beq.w	8020850 <dwt_ioctl+0x1ef4>
 801f982:	8823      	ldrh	r3, [r4, #0]
 801f984:	2202      	movs	r2, #2
 801f986:	210c      	movs	r1, #12
 801f988:	f7fd f8db 	bl	801cb42 <dwt_write16bitoffsetreg>
 801f98c:	2500      	movs	r5, #0
 801f98e:	f000 bee7 	b.w	8020760 <dwt_ioctl+0x1e04>
 801f992:	2c00      	cmp	r4, #0
 801f994:	f000 875e 	beq.w	8020854 <dwt_ioctl+0x1ef8>
 801f998:	8823      	ldrh	r3, [r4, #0]
 801f99a:	2200      	movs	r2, #0
 801f99c:	210c      	movs	r1, #12
 801f99e:	f7fd f8d0 	bl	801cb42 <dwt_write16bitoffsetreg>
 801f9a2:	2500      	movs	r5, #0
 801f9a4:	f000 bedc 	b.w	8020760 <dwt_ioctl+0x1e04>
 801f9a8:	4621      	mov	r1, r4
 801f9aa:	f7fd f89d 	bl	801cae8 <ull_readrxtimestamp>
 801f9ae:	2500      	movs	r5, #0
 801f9b0:	f000 bed6 	b.w	8020760 <dwt_ioctl+0x1e04>
 801f9b4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801f9b6:	7b9b      	ldrb	r3, [r3, #14]
 801f9b8:	2b01      	cmp	r3, #1
 801f9ba:	d00b      	beq.n	801f9d4 <dwt_ioctl+0x1078>
 801f9bc:	2b03      	cmp	r3, #3
 801f9be:	d112      	bne.n	801f9e6 <dwt_ioctl+0x108a>
 801f9c0:	9400      	str	r4, [sp, #0]
 801f9c2:	2305      	movs	r3, #5
 801f9c4:	2220      	movs	r2, #32
 801f9c6:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 801f9ca:	f7fc fc3c 	bl	801c246 <dwt_readfromdevice>
 801f9ce:	2500      	movs	r5, #0
 801f9d0:	f000 bec6 	b.w	8020760 <dwt_ioctl+0x1e04>
 801f9d4:	9400      	str	r4, [sp, #0]
 801f9d6:	2305      	movs	r3, #5
 801f9d8:	2200      	movs	r2, #0
 801f9da:	4983      	ldr	r1, [pc, #524]	; (801fbe8 <dwt_ioctl+0x128c>)
 801f9dc:	f7fc fc33 	bl	801c246 <dwt_readfromdevice>
 801f9e0:	2500      	movs	r5, #0
 801f9e2:	f000 bebd 	b.w	8020760 <dwt_ioctl+0x1e04>
 801f9e6:	9400      	str	r4, [sp, #0]
 801f9e8:	2305      	movs	r3, #5
 801f9ea:	2200      	movs	r2, #0
 801f9ec:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 801f9f0:	f7fc fc29 	bl	801c246 <dwt_readfromdevice>
 801f9f4:	2500      	movs	r5, #0
 801f9f6:	f000 beb3 	b.w	8020760 <dwt_ioctl+0x1e04>
 801f9fa:	2500      	movs	r5, #0
 801f9fc:	f804 5b01 	strb.w	r5, [r4], #1
 801fa00:	9400      	str	r4, [sp, #0]
 801fa02:	2304      	movs	r3, #4
 801fa04:	462a      	mov	r2, r5
 801fa06:	216c      	movs	r1, #108	; 0x6c
 801fa08:	f7fc fc1d 	bl	801c246 <dwt_readfromdevice>
 801fa0c:	f000 bea8 	b.w	8020760 <dwt_ioctl+0x1e04>
 801fa10:	2c00      	cmp	r4, #0
 801fa12:	f000 8721 	beq.w	8020858 <dwt_ioctl+0x1efc>
 801fa16:	2201      	movs	r2, #1
 801fa18:	2160      	movs	r1, #96	; 0x60
 801fa1a:	f7fc fc1e 	bl	801c25a <dwt_read32bitoffsetreg>
 801fa1e:	6020      	str	r0, [r4, #0]
 801fa20:	2500      	movs	r5, #0
 801fa22:	f000 be9d 	b.w	8020760 <dwt_ioctl+0x1e04>
 801fa26:	2c00      	cmp	r4, #0
 801fa28:	f000 8718 	beq.w	802085c <dwt_ioctl+0x1f00>
 801fa2c:	2200      	movs	r2, #0
 801fa2e:	2160      	movs	r1, #96	; 0x60
 801fa30:	f7fc fc13 	bl	801c25a <dwt_read32bitoffsetreg>
 801fa34:	6020      	str	r0, [r4, #0]
 801fa36:	2500      	movs	r5, #0
 801fa38:	f000 be92 	b.w	8020760 <dwt_ioctl+0x1e04>
 801fa3c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801fa3e:	7b9b      	ldrb	r3, [r3, #14]
 801fa40:	2b01      	cmp	r3, #1
 801fa42:	d00b      	beq.n	801fa5c <dwt_ioctl+0x1100>
 801fa44:	2b03      	cmp	r3, #3
 801fa46:	d112      	bne.n	801fa6e <dwt_ioctl+0x1112>
 801fa48:	9400      	str	r4, [sp, #0]
 801fa4a:	2305      	movs	r3, #5
 801fa4c:	2228      	movs	r2, #40	; 0x28
 801fa4e:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 801fa52:	f7fc fbf8 	bl	801c246 <dwt_readfromdevice>
 801fa56:	2500      	movs	r5, #0
 801fa58:	f000 be82 	b.w	8020760 <dwt_ioctl+0x1e04>
 801fa5c:	9400      	str	r4, [sp, #0]
 801fa5e:	2305      	movs	r3, #5
 801fa60:	2200      	movs	r2, #0
 801fa62:	4962      	ldr	r1, [pc, #392]	; (801fbec <dwt_ioctl+0x1290>)
 801fa64:	f7fc fbef 	bl	801c246 <dwt_readfromdevice>
 801fa68:	2500      	movs	r5, #0
 801fa6a:	f000 be79 	b.w	8020760 <dwt_ioctl+0x1e04>
 801fa6e:	9400      	str	r4, [sp, #0]
 801fa70:	2305      	movs	r3, #5
 801fa72:	2200      	movs	r2, #0
 801fa74:	495e      	ldr	r1, [pc, #376]	; (801fbf0 <dwt_ioctl+0x1294>)
 801fa76:	f7fc fbe6 	bl	801c246 <dwt_readfromdevice>
 801fa7a:	2500      	movs	r5, #0
 801fa7c:	f000 be70 	b.w	8020760 <dwt_ioctl+0x1e04>
 801fa80:	2c00      	cmp	r4, #0
 801fa82:	f000 86ed 	beq.w	8020860 <dwt_ioctl+0x1f04>
 801fa86:	2200      	movs	r2, #0
 801fa88:	211c      	movs	r1, #28
 801fa8a:	f7fc fbe6 	bl	801c25a <dwt_read32bitoffsetreg>
 801fa8e:	6020      	str	r0, [r4, #0]
 801fa90:	2500      	movs	r5, #0
 801fa92:	f000 be65 	b.w	8020760 <dwt_ioctl+0x1e04>
 801fa96:	2c00      	cmp	r4, #0
 801fa98:	f000 86e4 	beq.w	8020864 <dwt_ioctl+0x1f08>
 801fa9c:	8825      	ldrh	r5, [r4, #0]
 801fa9e:	6867      	ldr	r7, [r4, #4]
 801faa0:	7a23      	ldrb	r3, [r4, #8]
 801faa2:	2b00      	cmp	r3, #0
 801faa4:	f000 86e0 	beq.w	8020868 <dwt_ioctl+0x1f0c>
 801faa8:	463c      	mov	r4, r7
 801faaa:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 801faae:	4629      	mov	r1, r5
 801fab0:	4630      	mov	r0, r6
 801fab2:	f7fd f88f 	bl	801cbd4 <_dwt_otpread>
 801fab6:	f844 0b04 	str.w	r0, [r4], #4
 801faba:	3501      	adds	r5, #1
 801fabc:	b2ad      	uxth	r5, r5
 801fabe:	42bc      	cmp	r4, r7
 801fac0:	d1f5      	bne.n	801faae <dwt_ioctl+0x1152>
 801fac2:	2500      	movs	r5, #0
 801fac4:	f000 be4c 	b.w	8020760 <dwt_ioctl+0x1e04>
 801fac8:	2c00      	cmp	r4, #0
 801faca:	f000 86cf 	beq.w	802086c <dwt_ioctl+0x1f10>
 801face:	7821      	ldrb	r1, [r4, #0]
 801fad0:	f7fd fb8c 	bl	801d1ec <ull_setplenfine>
 801fad4:	2500      	movs	r5, #0
 801fad6:	f000 be43 	b.w	8020760 <dwt_ioctl+0x1e04>
 801fada:	f7fe f9c5 	bl	801de68 <ull_run_pgfcal>
 801fade:	4605      	mov	r5, r0
 801fae0:	f000 be3e 	b.w	8020760 <dwt_ioctl+0x1e04>
 801fae4:	4611      	mov	r1, r2
 801fae6:	f7fe fb29 	bl	801e13c <ull_pgf_cal>
 801faea:	4605      	mov	r5, r0
 801faec:	f000 be38 	b.w	8020760 <dwt_ioctl+0x1e04>
 801faf0:	2c00      	cmp	r4, #0
 801faf2:	f000 86bd 	beq.w	8020870 <dwt_ioctl+0x1f14>
 801faf6:	78a5      	ldrb	r5, [r4, #2]
 801faf8:	2101      	movs	r1, #1
 801fafa:	f7fd f841 	bl	801cb80 <ull_force_clocks>
 801fafe:	2100      	movs	r1, #0
 801fb00:	4630      	mov	r0, r6
 801fb02:	f7fd fdc3 	bl	801d68c <ull_enable_rf_tx>
 801fb06:	4630      	mov	r0, r6
 801fb08:	f7fd fdf4 	bl	801d6f4 <ull_enable_rftx_blocks>
 801fb0c:	f005 033f 	and.w	r3, r5, #63	; 0x3f
 801fb10:	2200      	movs	r2, #0
 801fb12:	4938      	ldr	r1, [pc, #224]	; (801fbf4 <dwt_ioctl+0x1298>)
 801fb14:	4630      	mov	r0, r6
 801fb16:	f7fd fa63 	bl	801cfe0 <dwt_write8bitoffsetreg>
 801fb1a:	2301      	movs	r3, #1
 801fb1c:	9300      	str	r3, [sp, #0]
 801fb1e:	23ff      	movs	r3, #255	; 0xff
 801fb20:	2200      	movs	r2, #0
 801fb22:	4935      	ldr	r1, [pc, #212]	; (801fbf8 <dwt_ioctl+0x129c>)
 801fb24:	4630      	mov	r0, r6
 801fb26:	f7fd feed 	bl	801d904 <dwt_modify8bitoffsetreg>
 801fb2a:	4f33      	ldr	r7, [pc, #204]	; (801fbf8 <dwt_ioctl+0x129c>)
 801fb2c:	2500      	movs	r5, #0
 801fb2e:	462a      	mov	r2, r5
 801fb30:	4639      	mov	r1, r7
 801fb32:	4630      	mov	r0, r6
 801fb34:	f7fc fbe6 	bl	801c304 <dwt_read8bitoffsetreg>
 801fb38:	f010 0f01 	tst.w	r0, #1
 801fb3c:	d1f7      	bne.n	801fb2e <dwt_ioctl+0x11d2>
 801fb3e:	2200      	movs	r2, #0
 801fb40:	492e      	ldr	r1, [pc, #184]	; (801fbfc <dwt_ioctl+0x12a0>)
 801fb42:	4630      	mov	r0, r6
 801fb44:	f7fc fb9f 	bl	801c286 <dwt_read16bitoffsetreg>
 801fb48:	4605      	mov	r5, r0
 801fb4a:	4630      	mov	r0, r6
 801fb4c:	f7fd f9c6 	bl	801cedc <ull_disable_rftx_blocks>
 801fb50:	2100      	movs	r1, #0
 801fb52:	4630      	mov	r0, r6
 801fb54:	f7fd f9cc 	bl	801cef0 <ull_disable_rf_tx>
 801fb58:	2105      	movs	r1, #5
 801fb5a:	4630      	mov	r0, r6
 801fb5c:	f7fd f810 	bl	801cb80 <ull_force_clocks>
 801fb60:	f3c5 050b 	ubfx	r5, r5, #0, #12
 801fb64:	8025      	strh	r5, [r4, #0]
 801fb66:	2500      	movs	r5, #0
 801fb68:	f000 bdfa 	b.w	8020760 <dwt_ioctl+0x1e04>
 801fb6c:	2102      	movs	r1, #2
 801fb6e:	f7fe f8f9 	bl	801dd64 <ull_setdwstate>
 801fb72:	2101      	movs	r1, #1
 801fb74:	4630      	mov	r0, r6
 801fb76:	f7fe f8f5 	bl	801dd64 <ull_setdwstate>
 801fb7a:	2432      	movs	r4, #50	; 0x32
 801fb7c:	f04f 0814 	mov.w	r8, #20
 801fb80:	2700      	movs	r7, #0
 801fb82:	2544      	movs	r5, #68	; 0x44
 801fb84:	4640      	mov	r0, r8
 801fb86:	f7e1 f800 	bl	8000b8a <deca_usleep>
 801fb8a:	463a      	mov	r2, r7
 801fb8c:	4629      	mov	r1, r5
 801fb8e:	4630      	mov	r0, r6
 801fb90:	f7fc fbb8 	bl	801c304 <dwt_read8bitoffsetreg>
 801fb94:	f010 0f02 	tst.w	r0, #2
 801fb98:	d105      	bne.n	801fba6 <dwt_ioctl+0x124a>
 801fb9a:	1e63      	subs	r3, r4, #1
 801fb9c:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 801fba0:	d1f0      	bne.n	801fb84 <dwt_ioctl+0x1228>
 801fba2:	2501      	movs	r5, #1
 801fba4:	e000      	b.n	801fba8 <dwt_ioctl+0x124c>
 801fba6:	2500      	movs	r5, #0
 801fba8:	426d      	negs	r5, r5
 801fbaa:	f000 bdd9 	b.w	8020760 <dwt_ioctl+0x1e04>
 801fbae:	2c00      	cmp	r4, #0
 801fbb0:	f000 8660 	beq.w	8020874 <dwt_ioctl+0x1f18>
 801fbb4:	7823      	ldrb	r3, [r4, #0]
 801fbb6:	031b      	lsls	r3, r3, #12
 801fbb8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 801fbbc:	7862      	ldrb	r2, [r4, #1]
 801fbbe:	2a01      	cmp	r2, #1
 801fbc0:	bf08      	it	eq
 801fbc2:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
 801fbc6:	9300      	str	r3, [sp, #0]
 801fbc8:	f46f 43e2 	mvn.w	r3, #28928	; 0x7100
 801fbcc:	2200      	movs	r2, #0
 801fbce:	490c      	ldr	r1, [pc, #48]	; (801fc00 <dwt_ioctl+0x12a4>)
 801fbd0:	f7fd fd28 	bl	801d624 <dwt_modify32bitoffsetreg>
 801fbd4:	2500      	movs	r5, #0
 801fbd6:	f000 bdc3 	b.w	8020760 <dwt_ioctl+0x1e04>
 801fbda:	bf00      	nop
 801fbdc:	00180034 	.word	0x00180034
 801fbe0:	0018002c 	.word	0x0018002c
 801fbe4:	000c0014 	.word	0x000c0014
 801fbe8:	00180020 	.word	0x00180020
 801fbec:	00180028 	.word	0x00180028
 801fbf0:	000c0008 	.word	0x000c0008
 801fbf4:	0007001c 	.word	0x0007001c
 801fbf8:	00080010 	.word	0x00080010
 801fbfc:	00080014 	.word	0x00080014
 801fc00:	00070014 	.word	0x00070014
 801fc04:	2c00      	cmp	r4, #0
 801fc06:	f000 8637 	beq.w	8020878 <dwt_ioctl+0x1f1c>
 801fc0a:	6862      	ldr	r2, [r4, #4]
 801fc0c:	6821      	ldr	r1, [r4, #0]
 801fc0e:	f7fd fe3b 	bl	801d888 <ull_setgpiomode>
 801fc12:	2500      	movs	r5, #0
 801fc14:	f000 bda4 	b.w	8020760 <dwt_ioctl+0x1e04>
 801fc18:	2c00      	cmp	r4, #0
 801fc1a:	f000 862f 	beq.w	802087c <dwt_ioctl+0x1f20>
 801fc1e:	8823      	ldrh	r3, [r4, #0]
 801fc20:	2200      	movs	r2, #0
 801fc22:	49c4      	ldr	r1, [pc, #784]	; (801ff34 <dwt_ioctl+0x15d8>)
 801fc24:	f7fc ff8d 	bl	801cb42 <dwt_write16bitoffsetreg>
 801fc28:	2500      	movs	r5, #0
 801fc2a:	f000 bd99 	b.w	8020760 <dwt_ioctl+0x1e04>
 801fc2e:	2c00      	cmp	r4, #0
 801fc30:	f000 8626 	beq.w	8020880 <dwt_ioctl+0x1f24>
 801fc34:	6862      	ldr	r2, [r4, #4]
 801fc36:	8821      	ldrh	r1, [r4, #0]
 801fc38:	f7fe fab0 	bl	801e19c <ull_setgpiovalue>
 801fc3c:	2500      	movs	r5, #0
 801fc3e:	f000 bd8f 	b.w	8020760 <dwt_ioctl+0x1e04>
 801fc42:	2c00      	cmp	r4, #0
 801fc44:	f000 861e 	beq.w	8020884 <dwt_ioctl+0x1f28>
 801fc48:	7865      	ldrb	r5, [r4, #1]
 801fc4a:	7823      	ldrb	r3, [r4, #0]
 801fc4c:	b18b      	cbz	r3, 801fc72 <dwt_ioctl+0x1316>
 801fc4e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801fc50:	2200      	movs	r2, #0
 801fc52:	739a      	strb	r2, [r3, #14]
 801fc54:	f04f 33ff 	mov.w	r3, #4294967295
 801fc58:	2208      	movs	r2, #8
 801fc5a:	b37d      	cbz	r5, 801fcbc <dwt_ioctl+0x1360>
 801fc5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801fc60:	9200      	str	r2, [sp, #0]
 801fc62:	2200      	movs	r2, #0
 801fc64:	2110      	movs	r1, #16
 801fc66:	4630      	mov	r0, r6
 801fc68:	f7fd fcdc 	bl	801d624 <dwt_modify32bitoffsetreg>
 801fc6c:	2500      	movs	r5, #0
 801fc6e:	f000 bd77 	b.w	8020760 <dwt_ioctl+0x1e04>
 801fc72:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801fc74:	2201      	movs	r2, #1
 801fc76:	739a      	strb	r2, [r3, #14]
 801fc78:	2318      	movs	r3, #24
 801fc7a:	2200      	movs	r2, #0
 801fc7c:	49ae      	ldr	r1, [pc, #696]	; (801ff38 <dwt_ioctl+0x15dc>)
 801fc7e:	f7fc ffcb 	bl	801cc18 <dwt_write32bitoffsetreg>
 801fc82:	23e8      	movs	r3, #232	; 0xe8
 801fc84:	2200      	movs	r2, #0
 801fc86:	49ad      	ldr	r1, [pc, #692]	; (801ff3c <dwt_ioctl+0x15e0>)
 801fc88:	4630      	mov	r0, r6
 801fc8a:	f7fc ffc5 	bl	801cc18 <dwt_write32bitoffsetreg>
 801fc8e:	6d33      	ldr	r3, [r6, #80]	; 0x50
 801fc90:	7d9b      	ldrb	r3, [r3, #22]
 801fc92:	085b      	lsrs	r3, r3, #1
 801fc94:	d003      	beq.n	801fc9e <dwt_ioctl+0x1342>
 801fc96:	f06f 0308 	mvn.w	r3, #8
 801fc9a:	2200      	movs	r2, #0
 801fc9c:	e7dd      	b.n	801fc5a <dwt_ioctl+0x12fe>
 801fc9e:	2301      	movs	r3, #1
 801fca0:	2200      	movs	r2, #0
 801fca2:	49a7      	ldr	r1, [pc, #668]	; (801ff40 <dwt_ioctl+0x15e4>)
 801fca4:	4630      	mov	r0, r6
 801fca6:	f7fd f99b 	bl	801cfe0 <dwt_write8bitoffsetreg>
 801fcaa:	6d32      	ldr	r2, [r6, #80]	; 0x50
 801fcac:	7d93      	ldrb	r3, [r2, #22]
 801fcae:	f043 0302 	orr.w	r3, r3, #2
 801fcb2:	7593      	strb	r3, [r2, #22]
 801fcb4:	f06f 0308 	mvn.w	r3, #8
 801fcb8:	2200      	movs	r2, #0
 801fcba:	e7ce      	b.n	801fc5a <dwt_ioctl+0x12fe>
 801fcbc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801fcc0:	e7ce      	b.n	801fc60 <dwt_ioctl+0x1304>
 801fcc2:	2c00      	cmp	r4, #0
 801fcc4:	f000 85e0 	beq.w	8020888 <dwt_ioctl+0x1f2c>
 801fcc8:	6823      	ldr	r3, [r4, #0]
 801fcca:	2200      	movs	r2, #0
 801fccc:	2130      	movs	r1, #48	; 0x30
 801fcce:	f7fc ffa3 	bl	801cc18 <dwt_write32bitoffsetreg>
 801fcd2:	2500      	movs	r5, #0
 801fcd4:	f000 bd44 	b.w	8020760 <dwt_ioctl+0x1e04>
 801fcd8:	2c00      	cmp	r4, #0
 801fcda:	f000 85d7 	beq.w	802088c <dwt_ioctl+0x1f30>
 801fcde:	2200      	movs	r2, #0
 801fce0:	4629      	mov	r1, r5
 801fce2:	f7fc faba 	bl	801c25a <dwt_read32bitoffsetreg>
 801fce6:	6020      	str	r0, [r4, #0]
 801fce8:	2500      	movs	r5, #0
 801fcea:	f000 bd39 	b.w	8020760 <dwt_ioctl+0x1e04>
 801fcee:	4623      	mov	r3, r4
 801fcf0:	2200      	movs	r2, #0
 801fcf2:	4629      	mov	r1, r5
 801fcf4:	f7fc ff90 	bl	801cc18 <dwt_write32bitoffsetreg>
 801fcf8:	2500      	movs	r5, #0
 801fcfa:	f000 bd31 	b.w	8020760 <dwt_ioctl+0x1e04>
 801fcfe:	2c00      	cmp	r4, #0
 801fd00:	f000 85c6 	beq.w	8020890 <dwt_ioctl+0x1f34>
 801fd04:	2203      	movs	r2, #3
 801fd06:	498f      	ldr	r1, [pc, #572]	; (801ff44 <dwt_ioctl+0x15e8>)
 801fd08:	f7fc fafc 	bl	801c304 <dwt_read8bitoffsetreg>
 801fd0c:	f3c0 1002 	ubfx	r0, r0, #4, #3
 801fd10:	7020      	strb	r0, [r4, #0]
 801fd12:	2500      	movs	r5, #0
 801fd14:	f000 bd24 	b.w	8020760 <dwt_ioctl+0x1e04>
 801fd18:	2c00      	cmp	r4, #0
 801fd1a:	f000 85bb 	beq.w	8020894 <dwt_ioctl+0x1f38>
 801fd1e:	6823      	ldr	r3, [r4, #0]
 801fd20:	2200      	movs	r2, #0
 801fd22:	2144      	movs	r1, #68	; 0x44
 801fd24:	f7fc ff78 	bl	801cc18 <dwt_write32bitoffsetreg>
 801fd28:	2500      	movs	r5, #0
 801fd2a:	f000 bd19 	b.w	8020760 <dwt_ioctl+0x1e04>
 801fd2e:	2c00      	cmp	r4, #0
 801fd30:	f000 85b2 	beq.w	8020898 <dwt_ioctl+0x1f3c>
 801fd34:	8823      	ldrh	r3, [r4, #0]
 801fd36:	2200      	movs	r2, #0
 801fd38:	2148      	movs	r1, #72	; 0x48
 801fd3a:	f7fc ff02 	bl	801cb42 <dwt_write16bitoffsetreg>
 801fd3e:	2500      	movs	r5, #0
 801fd40:	f000 bd0e 	b.w	8020760 <dwt_ioctl+0x1e04>
 801fd44:	2c00      	cmp	r4, #0
 801fd46:	f000 85a9 	beq.w	802089c <dwt_ioctl+0x1f40>
 801fd4a:	2200      	movs	r2, #0
 801fd4c:	2144      	movs	r1, #68	; 0x44
 801fd4e:	f7fc fa84 	bl	801c25a <dwt_read32bitoffsetreg>
 801fd52:	6020      	str	r0, [r4, #0]
 801fd54:	2500      	movs	r5, #0
 801fd56:	f000 bd03 	b.w	8020760 <dwt_ioctl+0x1e04>
 801fd5a:	2c00      	cmp	r4, #0
 801fd5c:	f000 85a0 	beq.w	80208a0 <dwt_ioctl+0x1f44>
 801fd60:	2200      	movs	r2, #0
 801fd62:	2148      	movs	r1, #72	; 0x48
 801fd64:	f7fc fa8f 	bl	801c286 <dwt_read16bitoffsetreg>
 801fd68:	6020      	str	r0, [r4, #0]
 801fd6a:	2500      	movs	r5, #0
 801fd6c:	f000 bcf8 	b.w	8020760 <dwt_ioctl+0x1e04>
 801fd70:	2c00      	cmp	r4, #0
 801fd72:	f000 8597 	beq.w	80208a4 <dwt_ioctl+0x1f48>
 801fd76:	7823      	ldrb	r3, [r4, #0]
 801fd78:	2200      	movs	r2, #0
 801fd7a:	4973      	ldr	r1, [pc, #460]	; (801ff48 <dwt_ioctl+0x15ec>)
 801fd7c:	f7fd f930 	bl	801cfe0 <dwt_write8bitoffsetreg>
 801fd80:	2500      	movs	r5, #0
 801fd82:	f000 bced 	b.w	8020760 <dwt_ioctl+0x1e04>
 801fd86:	2c00      	cmp	r4, #0
 801fd88:	f000 858e 	beq.w	80208a8 <dwt_ioctl+0x1f4c>
 801fd8c:	2200      	movs	r2, #0
 801fd8e:	2144      	movs	r1, #68	; 0x44
 801fd90:	f7fc fab8 	bl	801c304 <dwt_read8bitoffsetreg>
 801fd94:	7020      	strb	r0, [r4, #0]
 801fd96:	2500      	movs	r5, #0
 801fd98:	f000 bce2 	b.w	8020760 <dwt_ioctl+0x1e04>
 801fd9c:	2c00      	cmp	r4, #0
 801fd9e:	f000 8585 	beq.w	80208ac <dwt_ioctl+0x1f50>
 801fda2:	f7fd f929 	bl	801cff8 <ull_getframelength>
 801fda6:	6020      	str	r0, [r4, #0]
 801fda8:	2500      	movs	r5, #0
 801fdaa:	f000 bcd9 	b.w	8020760 <dwt_ioctl+0x1e04>
 801fdae:	2c00      	cmp	r4, #0
 801fdb0:	f000 857e 	beq.w	80208b0 <dwt_ioctl+0x1f54>
 801fdb4:	2200      	movs	r2, #0
 801fdb6:	4965      	ldr	r1, [pc, #404]	; (801ff4c <dwt_ioctl+0x15f0>)
 801fdb8:	f7fc fa65 	bl	801c286 <dwt_read16bitoffsetreg>
 801fdbc:	8020      	strh	r0, [r4, #0]
 801fdbe:	2500      	movs	r5, #0
 801fdc0:	f000 bcce 	b.w	8020760 <dwt_ioctl+0x1e04>
 801fdc4:	2c00      	cmp	r4, #0
 801fdc6:	f000 8575 	beq.w	80208b4 <dwt_ioctl+0x1f58>
 801fdca:	2200      	movs	r2, #0
 801fdcc:	4960      	ldr	r1, [pc, #384]	; (801ff50 <dwt_ioctl+0x15f4>)
 801fdce:	f7fc fa44 	bl	801c25a <dwt_read32bitoffsetreg>
 801fdd2:	6020      	str	r0, [r4, #0]
 801fdd4:	2500      	movs	r5, #0
 801fdd6:	f000 bcc3 	b.w	8020760 <dwt_ioctl+0x1e04>
 801fdda:	2c00      	cmp	r4, #0
 801fddc:	f000 856c 	beq.w	80208b8 <dwt_ioctl+0x1f5c>
 801fde0:	8823      	ldrh	r3, [r4, #0]
 801fde2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801fde6:	9300      	str	r3, [sp, #0]
 801fde8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 801fdec:	2200      	movs	r2, #0
 801fdee:	4958      	ldr	r1, [pc, #352]	; (801ff50 <dwt_ioctl+0x15f4>)
 801fdf0:	f7fe f918 	bl	801e024 <dwt_modify16bitoffsetreg>
 801fdf4:	2500      	movs	r5, #0
 801fdf6:	f000 bcb3 	b.w	8020760 <dwt_ioctl+0x1e04>
 801fdfa:	2c00      	cmp	r4, #0
 801fdfc:	f000 855e 	beq.w	80208bc <dwt_ioctl+0x1f60>
 801fe00:	88a7      	ldrh	r7, [r4, #4]
 801fe02:	f8d4 b008 	ldr.w	fp, [r4, #8]
 801fe06:	7b23      	ldrb	r3, [r4, #12]
 801fe08:	9306      	str	r3, [sp, #24]
 801fe0a:	6922      	ldr	r2, [r4, #16]
 801fe0c:	9204      	str	r2, [sp, #16]
 801fe0e:	6962      	ldr	r2, [r4, #20]
 801fe10:	9205      	str	r2, [sp, #20]
 801fe12:	f00b 0203 	and.w	r2, fp, #3
 801fe16:	f3cb 0585 	ubfx	r5, fp, #2, #6
 801fe1a:	2b05      	cmp	r3, #5
 801fe1c:	d147      	bne.n	801feae <dwt_ioctl+0x1552>
 801fe1e:	f5b7 7fb1 	cmp.w	r7, #354	; 0x162
 801fe22:	bf28      	it	cs
 801fe24:	f44f 77b1 	movcs.w	r7, #354	; 0x162
 801fe28:	f8df 912c 	ldr.w	r9, [pc, #300]	; 801ff58 <dwt_ioctl+0x15fc>
 801fe2c:	2f04      	cmp	r7, #4
 801fe2e:	d805      	bhi.n	801fe3c <dwt_ioctl+0x14e0>
 801fe30:	eb09 0305 	add.w	r3, r9, r5
 801fe34:	785b      	ldrb	r3, [r3, #1]
 801fe36:	3b05      	subs	r3, #5
 801fe38:	429f      	cmp	r7, r3
 801fe3a:	db40      	blt.n	801febe <dwt_ioctl+0x1562>
 801fe3c:	2a01      	cmp	r2, #1
 801fe3e:	f200 80c8 	bhi.w	801ffd2 <dwt_ioctl+0x1676>
 801fe42:	4b44      	ldr	r3, [pc, #272]	; (801ff54 <dwt_ioctl+0x15f8>)
 801fe44:	5c99      	ldrb	r1, [r3, r2]
 801fe46:	463e      	mov	r6, r7
 801fe48:	42b9      	cmp	r1, r7
 801fe4a:	f280 80c4 	bge.w	801ffd6 <dwt_ioctl+0x167a>
 801fe4e:	1c50      	adds	r0, r2, #1
 801fe50:	fa53 f080 	uxtab	r0, r3, r0
 801fe54:	2300      	movs	r3, #0
 801fe56:	440b      	add	r3, r1
 801fe58:	b29b      	uxth	r3, r3
 801fe5a:	3201      	adds	r2, #1
 801fe5c:	b2d2      	uxtb	r2, r2
 801fe5e:	2a02      	cmp	r2, #2
 801fe60:	d005      	beq.n	801fe6e <dwt_ioctl+0x1512>
 801fe62:	f810 1b01 	ldrb.w	r1, [r0], #1
 801fe66:	eba6 0c03 	sub.w	ip, r6, r3
 801fe6a:	4561      	cmp	r1, ip
 801fe6c:	dbf3      	blt.n	801fe56 <dwt_ioctl+0x14fa>
 801fe6e:	429f      	cmp	r7, r3
 801fe70:	bf08      	it	eq
 801fe72:	9503      	streq	r5, [sp, #12]
 801fe74:	f000 80b4 	beq.w	801ffe0 <dwt_ioctl+0x1684>
 801fe78:	f107 0c05 	add.w	ip, r7, #5
 801fe7c:	fa1f fc8c 	uxth.w	ip, ip
 801fe80:	2680      	movs	r6, #128	; 0x80
 801fe82:	2100      	movs	r1, #0
 801fe84:	9107      	str	r1, [sp, #28]
 801fe86:	9103      	str	r1, [sp, #12]
 801fe88:	9108      	str	r1, [sp, #32]
 801fe8a:	2005      	movs	r0, #5
 801fe8c:	46b8      	mov	r8, r7
 801fe8e:	4287      	cmp	r7, r0
 801fe90:	bf38      	it	cc
 801fe92:	4680      	movcc	r8, r0
 801fe94:	f1a8 0805 	sub.w	r8, r8, #5
 801fe98:	fa1f f888 	uxth.w	r8, r8
 801fe9c:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 801ff54 <dwt_ioctl+0x15f8>
 801fea0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801fea4:	4683      	mov	fp, r0
 801fea6:	4620      	mov	r0, r4
 801fea8:	460c      	mov	r4, r1
 801feaa:	4686      	mov	lr, r0
 801feac:	e031      	b.n	801ff12 <dwt_ioctl+0x15b6>
 801feae:	f240 1331 	movw	r3, #305	; 0x131
 801feb2:	429f      	cmp	r7, r3
 801feb4:	bf28      	it	cs
 801feb6:	461f      	movcs	r7, r3
 801feb8:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 801ff5c <dwt_ioctl+0x1600>
 801febc:	e7b6      	b.n	801fe2c <dwt_ioctl+0x14d0>
 801febe:	2300      	movs	r3, #0
 801fec0:	9a05      	ldr	r2, [sp, #20]
 801fec2:	8013      	strh	r3, [r2, #0]
 801fec4:	9a04      	ldr	r2, [sp, #16]
 801fec6:	f8c2 b000 	str.w	fp, [r2]
 801feca:	e098      	b.n	801fffe <dwt_ioctl+0x16a2>
 801fecc:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801fed0:	4674      	mov	r4, lr
 801fed2:	2300      	movs	r3, #0
 801fed4:	9a05      	ldr	r2, [sp, #20]
 801fed6:	8013      	strh	r3, [r2, #0]
 801fed8:	9b04      	ldr	r3, [sp, #16]
 801feda:	f8c3 b000 	str.w	fp, [r3]
 801fede:	f04f 33ff 	mov.w	r3, #4294967295
 801fee2:	e08c      	b.n	801fffe <dwt_ioctl+0x16a2>
 801fee4:	fa1f fb80 	uxth.w	fp, r0
 801fee8:	9207      	str	r2, [sp, #28]
 801feea:	9503      	str	r5, [sp, #12]
 801feec:	9308      	str	r3, [sp, #32]
 801feee:	2401      	movs	r4, #1
 801fef0:	2d3f      	cmp	r5, #63	; 0x3f
 801fef2:	d050      	beq.n	801ff96 <dwt_ioctl+0x163a>
 801fef4:	2900      	cmp	r1, #0
 801fef6:	d139      	bne.n	801ff6c <dwt_ioctl+0x1610>
 801fef8:	3501      	adds	r5, #1
 801fefa:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 801fefe:	f819 0005 	ldrb.w	r0, [r9, r5]
 801ff02:	4403      	add	r3, r0
 801ff04:	b29b      	uxth	r3, r3
 801ff06:	429f      	cmp	r7, r3
 801ff08:	d067      	beq.n	801ffda <dwt_ioctl+0x167e>
 801ff0a:	3e01      	subs	r6, #1
 801ff0c:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 801ff10:	d0dc      	beq.n	801fecc <dwt_ioctl+0x1570>
 801ff12:	4543      	cmp	r3, r8
 801ff14:	d924      	bls.n	801ff60 <dwt_ioctl+0x1604>
 801ff16:	4563      	cmp	r3, ip
 801ff18:	d222      	bcs.n	801ff60 <dwt_ioctl+0x1604>
 801ff1a:	1af8      	subs	r0, r7, r3
 801ff1c:	b200      	sxth	r0, r0
 801ff1e:	2800      	cmp	r0, #0
 801ff20:	bfb8      	it	lt
 801ff22:	4240      	neglt	r0, r0
 801ff24:	4558      	cmp	r0, fp
 801ff26:	dddd      	ble.n	801fee4 <dwt_ioctl+0x1588>
 801ff28:	2c00      	cmp	r4, #0
 801ff2a:	d0e1      	beq.n	801fef0 <dwt_ioctl+0x1594>
 801ff2c:	4674      	mov	r4, lr
 801ff2e:	9a07      	ldr	r2, [sp, #28]
 801ff30:	9b08      	ldr	r3, [sp, #32]
 801ff32:	e055      	b.n	801ffe0 <dwt_ioctl+0x1684>
 801ff34:	00050008 	.word	0x00050008
 801ff38:	001f000c 	.word	0x001f000c
 801ff3c:	001f0010 	.word	0x001f0010
 801ff40:	00010020 	.word	0x00010020
 801ff44:	00030054 	.word	0x00030054
 801ff48:	00010018 	.word	0x00010018
 801ff4c:	0005002c 	.word	0x0005002c
 801ff50:	000e001c 	.word	0x000e001c
 801ff54:	08021460 	.word	0x08021460
 801ff58:	080213e0 	.word	0x080213e0
 801ff5c:	08021420 	.word	0x08021420
 801ff60:	b984      	cbnz	r4, 801ff84 <dwt_ioctl+0x1628>
 801ff62:	4563      	cmp	r3, ip
 801ff64:	d3c4      	bcc.n	801fef0 <dwt_ioctl+0x1594>
 801ff66:	b199      	cbz	r1, 801ff90 <dwt_ioctl+0x1634>
 801ff68:	2d3f      	cmp	r5, #63	; 0x3f
 801ff6a:	d014      	beq.n	801ff96 <dwt_ioctl+0x163a>
 801ff6c:	f819 1005 	ldrb.w	r1, [r9, r5]
 801ff70:	1a5b      	subs	r3, r3, r1
 801ff72:	b29b      	uxth	r3, r3
 801ff74:	1e69      	subs	r1, r5, #1
 801ff76:	f001 053f 	and.w	r5, r1, #63	; 0x3f
 801ff7a:	f011 013f 	ands.w	r1, r1, #63	; 0x3f
 801ff7e:	bf18      	it	ne
 801ff80:	2101      	movne	r1, #1
 801ff82:	e7c0      	b.n	801ff06 <dwt_ioctl+0x15aa>
 801ff84:	4674      	mov	r4, lr
 801ff86:	f819 1005 	ldrb.w	r1, [r9, r5]
 801ff8a:	1a5b      	subs	r3, r3, r1
 801ff8c:	b29b      	uxth	r3, r3
 801ff8e:	e027      	b.n	801ffe0 <dwt_ioctl+0x1684>
 801ff90:	4674      	mov	r4, lr
 801ff92:	9503      	str	r5, [sp, #12]
 801ff94:	e024      	b.n	801ffe0 <dwt_ioctl+0x1684>
 801ff96:	2c00      	cmp	r4, #0
 801ff98:	d134      	bne.n	8020004 <dwt_ioctl+0x16a8>
 801ff9a:	2a03      	cmp	r2, #3
 801ff9c:	d036      	beq.n	802000c <dwt_ioctl+0x16b0>
 801ff9e:	2a02      	cmp	r2, #2
 801ffa0:	d009      	beq.n	801ffb6 <dwt_ioctl+0x165a>
 801ffa2:	f81a 1002 	ldrb.w	r1, [sl, r2]
 801ffa6:	1858      	adds	r0, r3, r1
 801ffa8:	42b8      	cmp	r0, r7
 801ffaa:	dd0b      	ble.n	801ffc4 <dwt_ioctl+0x1668>
 801ffac:	440b      	add	r3, r1
 801ffae:	b29b      	uxth	r3, r3
 801ffb0:	3201      	adds	r2, #1
 801ffb2:	b2d2      	uxtb	r2, r2
 801ffb4:	e7da      	b.n	801ff6c <dwt_ioctl+0x1610>
 801ffb6:	9906      	ldr	r1, [sp, #24]
 801ffb8:	2909      	cmp	r1, #9
 801ffba:	d1f2      	bne.n	801ffa2 <dwt_ioctl+0x1646>
 801ffbc:	4674      	mov	r4, lr
 801ffbe:	213f      	movs	r1, #63	; 0x3f
 801ffc0:	9103      	str	r1, [sp, #12]
 801ffc2:	e00d      	b.n	801ffe0 <dwt_ioctl+0x1684>
 801ffc4:	4674      	mov	r4, lr
 801ffc6:	b283      	uxth	r3, r0
 801ffc8:	3201      	adds	r2, #1
 801ffca:	b2d2      	uxtb	r2, r2
 801ffcc:	213f      	movs	r1, #63	; 0x3f
 801ffce:	9103      	str	r1, [sp, #12]
 801ffd0:	e006      	b.n	801ffe0 <dwt_ioctl+0x1684>
 801ffd2:	2300      	movs	r3, #0
 801ffd4:	e74b      	b.n	801fe6e <dwt_ioctl+0x1512>
 801ffd6:	2300      	movs	r3, #0
 801ffd8:	e749      	b.n	801fe6e <dwt_ioctl+0x1512>
 801ffda:	4674      	mov	r4, lr
 801ffdc:	9503      	str	r5, [sp, #12]
 801ffde:	463b      	mov	r3, r7
 801ffe0:	9905      	ldr	r1, [sp, #20]
 801ffe2:	800b      	strh	r3, [r1, #0]
 801ffe4:	9b03      	ldr	r3, [sp, #12]
 801ffe6:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
 801ffea:	b2db      	uxtb	r3, r3
 801ffec:	041a      	lsls	r2, r3, #16
 801ffee:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 801fff2:	431a      	orrs	r2, r3
 801fff4:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 801fff8:	9a04      	ldr	r2, [sp, #16]
 801fffa:	6013      	str	r3, [r2, #0]
 801fffc:	2300      	movs	r3, #0
 801fffe:	6023      	str	r3, [r4, #0]
 8020000:	2500      	movs	r5, #0
 8020002:	e3ad      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020004:	4674      	mov	r4, lr
 8020006:	9a07      	ldr	r2, [sp, #28]
 8020008:	9b08      	ldr	r3, [sp, #32]
 802000a:	e7e9      	b.n	801ffe0 <dwt_ioctl+0x1684>
 802000c:	4674      	mov	r4, lr
 802000e:	213f      	movs	r1, #63	; 0x3f
 8020010:	9103      	str	r1, [sp, #12]
 8020012:	e7e5      	b.n	801ffe0 <dwt_ioctl+0x1684>
 8020014:	2c00      	cmp	r4, #0
 8020016:	f000 8453 	beq.w	80208c0 <dwt_ioctl+0x1f64>
 802001a:	7827      	ldrb	r7, [r4, #0]
 802001c:	7864      	ldrb	r4, [r4, #1]
 802001e:	f7e0 fd8b 	bl	8000b38 <decamutexon>
 8020022:	4605      	mov	r5, r0
 8020024:	2c02      	cmp	r4, #2
 8020026:	d00e      	beq.n	8020046 <dwt_ioctl+0x16ea>
 8020028:	2c04      	cmp	r4, #4
 802002a:	d00c      	beq.n	8020046 <dwt_ioctl+0x16ea>
 802002c:	f004 04fd 	and.w	r4, r4, #253	; 0xfd
 8020030:	2c01      	cmp	r4, #1
 8020032:	d019      	beq.n	8020068 <dwt_ioctl+0x170c>
 8020034:	43fb      	mvns	r3, r7
 8020036:	2200      	movs	r2, #0
 8020038:	9200      	str	r2, [sp, #0]
 802003a:	b2db      	uxtb	r3, r3
 802003c:	49c1      	ldr	r1, [pc, #772]	; (8020344 <dwt_ioctl+0x19e8>)
 802003e:	4630      	mov	r0, r6
 8020040:	f7fd fc60 	bl	801d904 <dwt_modify8bitoffsetreg>
 8020044:	e005      	b.n	8020052 <dwt_ioctl+0x16f6>
 8020046:	463b      	mov	r3, r7
 8020048:	2200      	movs	r2, #0
 802004a:	49be      	ldr	r1, [pc, #760]	; (8020344 <dwt_ioctl+0x19e8>)
 802004c:	4630      	mov	r0, r6
 802004e:	f7fc ffc7 	bl	801cfe0 <dwt_write8bitoffsetreg>
 8020052:	463b      	mov	r3, r7
 8020054:	2200      	movs	r2, #0
 8020056:	49bc      	ldr	r1, [pc, #752]	; (8020348 <dwt_ioctl+0x19ec>)
 8020058:	4630      	mov	r0, r6
 802005a:	f7fc fddd 	bl	801cc18 <dwt_write32bitoffsetreg>
 802005e:	4628      	mov	r0, r5
 8020060:	f7e0 fd7b 	bl	8000b5a <decamutexoff>
 8020064:	2500      	movs	r5, #0
 8020066:	e37b      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020068:	9700      	str	r7, [sp, #0]
 802006a:	23ff      	movs	r3, #255	; 0xff
 802006c:	2200      	movs	r2, #0
 802006e:	49b5      	ldr	r1, [pc, #724]	; (8020344 <dwt_ioctl+0x19e8>)
 8020070:	4630      	mov	r0, r6
 8020072:	f7fd fc47 	bl	801d904 <dwt_modify8bitoffsetreg>
 8020076:	e7ec      	b.n	8020052 <dwt_ioctl+0x16f6>
 8020078:	2302      	movs	r3, #2
 802007a:	9301      	str	r3, [sp, #4]
 802007c:	2500      	movs	r5, #0
 802007e:	9500      	str	r5, [sp, #0]
 8020080:	462b      	mov	r3, r5
 8020082:	462a      	mov	r2, r5
 8020084:	211a      	movs	r1, #26
 8020086:	f7fc f860 	bl	801c14a <dwt_xfer3xxx>
 802008a:	e369      	b.n	8020760 <dwt_ioctl+0x1e04>
 802008c:	f7fe fc52 	bl	801e934 <ull_softreset_fcmd>
 8020090:	2500      	movs	r5, #0
 8020092:	e365      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020094:	f7fe fc3a 	bl	801e90c <ull_softreset_no_sema_fcmd>
 8020098:	2500      	movs	r5, #0
 802009a:	e361      	b.n	8020760 <dwt_ioctl+0x1e04>
 802009c:	2302      	movs	r3, #2
 802009e:	9301      	str	r3, [sp, #4]
 80200a0:	2500      	movs	r5, #0
 80200a2:	9500      	str	r5, [sp, #0]
 80200a4:	462b      	mov	r3, r5
 80200a6:	462a      	mov	r2, r5
 80200a8:	2114      	movs	r1, #20
 80200aa:	f7fc f84e 	bl	801c14a <dwt_xfer3xxx>
 80200ae:	e357      	b.n	8020760 <dwt_ioctl+0x1e04>
 80200b0:	2402      	movs	r4, #2
 80200b2:	9401      	str	r4, [sp, #4]
 80200b4:	2500      	movs	r5, #0
 80200b6:	9500      	str	r5, [sp, #0]
 80200b8:	462b      	mov	r3, r5
 80200ba:	462a      	mov	r2, r5
 80200bc:	2115      	movs	r1, #21
 80200be:	f7fc f844 	bl	801c14a <dwt_xfer3xxx>
 80200c2:	9401      	str	r4, [sp, #4]
 80200c4:	9500      	str	r5, [sp, #0]
 80200c6:	462b      	mov	r3, r5
 80200c8:	462a      	mov	r2, r5
 80200ca:	2115      	movs	r1, #21
 80200cc:	4630      	mov	r0, r6
 80200ce:	f7fc f83c 	bl	801c14a <dwt_xfer3xxx>
 80200d2:	e345      	b.n	8020760 <dwt_ioctl+0x1e04>
 80200d4:	2302      	movs	r3, #2
 80200d6:	9301      	str	r3, [sp, #4]
 80200d8:	2500      	movs	r5, #0
 80200da:	9500      	str	r5, [sp, #0]
 80200dc:	462b      	mov	r3, r5
 80200de:	462a      	mov	r2, r5
 80200e0:	2116      	movs	r1, #22
 80200e2:	f7fc f832 	bl	801c14a <dwt_xfer3xxx>
 80200e6:	e33b      	b.n	8020760 <dwt_ioctl+0x1e04>
 80200e8:	2c00      	cmp	r4, #0
 80200ea:	f000 83eb 	beq.w	80208c4 <dwt_ioctl+0x1f68>
 80200ee:	b932      	cbnz	r2, 80200fe <dwt_ioctl+0x17a2>
 80200f0:	2200      	movs	r2, #0
 80200f2:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 80200f6:	f7fc f905 	bl	801c304 <dwt_read8bitoffsetreg>
 80200fa:	7020      	strb	r0, [r4, #0]
 80200fc:	e330      	b.n	8020760 <dwt_ioctl+0x1e04>
 80200fe:	2201      	movs	r2, #1
 8020100:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 8020104:	f7fc f8fe 	bl	801c304 <dwt_read8bitoffsetreg>
 8020108:	7020      	strb	r0, [r4, #0]
 802010a:	2500      	movs	r5, #0
 802010c:	e328      	b.n	8020760 <dwt_ioctl+0x1e04>
 802010e:	2c00      	cmp	r4, #0
 8020110:	f000 83da 	beq.w	80208c8 <dwt_ioctl+0x1f6c>
 8020114:	7824      	ldrb	r4, [r4, #0]
 8020116:	2200      	movs	r2, #0
 8020118:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 802011c:	f7fc f8f2 	bl	801c304 <dwt_read8bitoffsetreg>
 8020120:	f000 039f 	and.w	r3, r0, #159	; 0x9f
 8020124:	4323      	orrs	r3, r4
 8020126:	2200      	movs	r2, #0
 8020128:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 802012c:	4630      	mov	r0, r6
 802012e:	f7fc ff57 	bl	801cfe0 <dwt_write8bitoffsetreg>
 8020132:	2500      	movs	r5, #0
 8020134:	e314      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020136:	2c00      	cmp	r4, #0
 8020138:	f000 83c8 	beq.w	80208cc <dwt_ioctl+0x1f70>
 802013c:	7824      	ldrb	r4, [r4, #0]
 802013e:	f012 05ff 	ands.w	r5, r2, #255	; 0xff
 8020142:	d01d      	beq.n	8020180 <dwt_ioctl+0x1824>
 8020144:	2d01      	cmp	r5, #1
 8020146:	f040 83c3 	bne.w	80208d0 <dwt_ioctl+0x1f74>
 802014a:	2502      	movs	r5, #2
 802014c:	2201      	movs	r2, #1
 802014e:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 8020152:	4630      	mov	r0, r6
 8020154:	f7fc f8d6 	bl	801c304 <dwt_read8bitoffsetreg>
 8020158:	b9a4      	cbnz	r4, 8020184 <dwt_ioctl+0x1828>
 802015a:	ea20 0305 	bic.w	r3, r0, r5
 802015e:	b2db      	uxtb	r3, r3
 8020160:	2201      	movs	r2, #1
 8020162:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 8020166:	4630      	mov	r0, r6
 8020168:	f7fc ff3a 	bl	801cfe0 <dwt_write8bitoffsetreg>
 802016c:	2200      	movs	r2, #0
 802016e:	2110      	movs	r1, #16
 8020170:	4630      	mov	r0, r6
 8020172:	f7fc f872 	bl	801c25a <dwt_read32bitoffsetreg>
 8020176:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 802017a:	d00a      	beq.n	8020192 <dwt_ioctl+0x1836>
 802017c:	2500      	movs	r5, #0
 802017e:	e2ef      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020180:	2504      	movs	r5, #4
 8020182:	e7e3      	b.n	802014c <dwt_ioctl+0x17f0>
 8020184:	2c01      	cmp	r4, #1
 8020186:	f040 83a6 	bne.w	80208d6 <dwt_ioctl+0x1f7a>
 802018a:	ea40 0305 	orr.w	r3, r0, r5
 802018e:	b2db      	uxtb	r3, r3
 8020190:	e7e6      	b.n	8020160 <dwt_ioctl+0x1804>
 8020192:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8020196:	9300      	str	r3, [sp, #0]
 8020198:	f04f 33ff 	mov.w	r3, #4294967295
 802019c:	2200      	movs	r2, #0
 802019e:	2110      	movs	r1, #16
 80201a0:	4630      	mov	r0, r6
 80201a2:	f7fd fa3f 	bl	801d624 <dwt_modify32bitoffsetreg>
 80201a6:	2500      	movs	r5, #0
 80201a8:	e2da      	b.n	8020760 <dwt_ioctl+0x1e04>
 80201aa:	2c00      	cmp	r4, #0
 80201ac:	f000 8396 	beq.w	80208dc <dwt_ioctl+0x1f80>
 80201b0:	7823      	ldrb	r3, [r4, #0]
 80201b2:	035b      	lsls	r3, r3, #13
 80201b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80201b8:	9300      	str	r3, [sp, #0]
 80201ba:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 80201be:	2200      	movs	r2, #0
 80201c0:	4962      	ldr	r1, [pc, #392]	; (802034c <dwt_ioctl+0x19f0>)
 80201c2:	f7fd ff2f 	bl	801e024 <dwt_modify16bitoffsetreg>
 80201c6:	2500      	movs	r5, #0
 80201c8:	e2ca      	b.n	8020760 <dwt_ioctl+0x1e04>
 80201ca:	2c00      	cmp	r4, #0
 80201cc:	f000 8388 	beq.w	80208e0 <dwt_ioctl+0x1f84>
 80201d0:	7825      	ldrb	r5, [r4, #0]
 80201d2:	6862      	ldr	r2, [r4, #4]
 80201d4:	2a01      	cmp	r2, #1
 80201d6:	bf15      	itete	ne
 80201d8:	f46f 3360 	mvnne.w	r3, #229376	; 0x38000
 80201dc:	f46f 43e0 	mvneq.w	r3, #28672	; 0x7000
 80201e0:	27df      	movne	r7, #223	; 0xdf
 80201e2:	27ef      	moveq	r7, #239	; 0xef
 80201e4:	bf14      	ite	ne
 80201e6:	f04f 0820 	movne.w	r8, #32
 80201ea:	f04f 0810 	moveq.w	r8, #16
 80201ee:	2400      	movs	r4, #0
 80201f0:	9400      	str	r4, [sp, #0]
 80201f2:	4622      	mov	r2, r4
 80201f4:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80201f8:	f7fd fa14 	bl	801d624 <dwt_modify32bitoffsetreg>
 80201fc:	9400      	str	r4, [sp, #0]
 80201fe:	463b      	mov	r3, r7
 8020200:	4622      	mov	r2, r4
 8020202:	4953      	ldr	r1, [pc, #332]	; (8020350 <dwt_ioctl+0x19f4>)
 8020204:	4630      	mov	r0, r6
 8020206:	f7fd fb7d 	bl	801d904 <dwt_modify8bitoffsetreg>
 802020a:	2d01      	cmp	r5, #1
 802020c:	d002      	beq.n	8020214 <dwt_ioctl+0x18b8>
 802020e:	b155      	cbz	r5, 8020226 <dwt_ioctl+0x18ca>
 8020210:	2500      	movs	r5, #0
 8020212:	e2a5      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020214:	4625      	mov	r5, r4
 8020216:	9400      	str	r4, [sp, #0]
 8020218:	463b      	mov	r3, r7
 802021a:	4622      	mov	r2, r4
 802021c:	494d      	ldr	r1, [pc, #308]	; (8020354 <dwt_ioctl+0x19f8>)
 802021e:	4630      	mov	r0, r6
 8020220:	f7fd fb70 	bl	801d904 <dwt_modify8bitoffsetreg>
 8020224:	e29c      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020226:	f8cd 8000 	str.w	r8, [sp]
 802022a:	23ff      	movs	r3, #255	; 0xff
 802022c:	2200      	movs	r2, #0
 802022e:	4949      	ldr	r1, [pc, #292]	; (8020354 <dwt_ioctl+0x19f8>)
 8020230:	4630      	mov	r0, r6
 8020232:	f7fd fb67 	bl	801d904 <dwt_modify8bitoffsetreg>
 8020236:	e293      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020238:	2c00      	cmp	r4, #0
 802023a:	f000 8353 	beq.w	80208e4 <dwt_ioctl+0x1f88>
 802023e:	7822      	ldrb	r2, [r4, #0]
 8020240:	f012 0f01 	tst.w	r2, #1
 8020244:	d02c      	beq.n	80202a0 <dwt_ioctl+0x1944>
 8020246:	0157      	lsls	r7, r2, #5
 8020248:	f007 0740 	and.w	r7, r7, #64	; 0x40
 802024c:	2440      	movs	r4, #64	; 0x40
 802024e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8020252:	f012 0f04 	tst.w	r2, #4
 8020256:	d027      	beq.n	80202a8 <dwt_ioctl+0x194c>
 8020258:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
 802025c:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8020260:	0112      	lsls	r2, r2, #4
 8020262:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8020266:	4317      	orrs	r7, r2
 8020268:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 802026c:	9200      	str	r2, [sp, #0]
 802026e:	43db      	mvns	r3, r3
 8020270:	2200      	movs	r2, #0
 8020272:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8020276:	4630      	mov	r0, r6
 8020278:	f7fd f9d4 	bl	801d624 <dwt_modify32bitoffsetreg>
 802027c:	43e4      	mvns	r4, r4
 802027e:	b2a4      	uxth	r4, r4
 8020280:	2500      	movs	r5, #0
 8020282:	9500      	str	r5, [sp, #0]
 8020284:	4623      	mov	r3, r4
 8020286:	462a      	mov	r2, r5
 8020288:	4931      	ldr	r1, [pc, #196]	; (8020350 <dwt_ioctl+0x19f4>)
 802028a:	4630      	mov	r0, r6
 802028c:	f7fd feca 	bl	801e024 <dwt_modify16bitoffsetreg>
 8020290:	9700      	str	r7, [sp, #0]
 8020292:	4623      	mov	r3, r4
 8020294:	462a      	mov	r2, r5
 8020296:	492f      	ldr	r1, [pc, #188]	; (8020354 <dwt_ioctl+0x19f8>)
 8020298:	4630      	mov	r0, r6
 802029a:	f7fd fec3 	bl	801e024 <dwt_modify16bitoffsetreg>
 802029e:	e25f      	b.n	8020760 <dwt_ioctl+0x1e04>
 80202a0:	2700      	movs	r7, #0
 80202a2:	463c      	mov	r4, r7
 80202a4:	463b      	mov	r3, r7
 80202a6:	e7d4      	b.n	8020252 <dwt_ioctl+0x18f6>
 80202a8:	2200      	movs	r2, #0
 80202aa:	e7df      	b.n	802026c <dwt_ioctl+0x1910>
 80202ac:	2308      	movs	r3, #8
 80202ae:	9300      	str	r3, [sp, #0]
 80202b0:	23ff      	movs	r3, #255	; 0xff
 80202b2:	2201      	movs	r2, #1
 80202b4:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80202b8:	f7fd fb24 	bl	801d904 <dwt_modify8bitoffsetreg>
 80202bc:	4c26      	ldr	r4, [pc, #152]	; (8020358 <dwt_ioctl+0x19fc>)
 80202be:	2302      	movs	r3, #2
 80202c0:	9300      	str	r3, [sp, #0]
 80202c2:	23ff      	movs	r3, #255	; 0xff
 80202c4:	2203      	movs	r2, #3
 80202c6:	4621      	mov	r1, r4
 80202c8:	4630      	mov	r0, r6
 80202ca:	f7fd fb1b 	bl	801d904 <dwt_modify8bitoffsetreg>
 80202ce:	2500      	movs	r5, #0
 80202d0:	9500      	str	r5, [sp, #0]
 80202d2:	23f7      	movs	r3, #247	; 0xf7
 80202d4:	2201      	movs	r2, #1
 80202d6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80202da:	4630      	mov	r0, r6
 80202dc:	f7fd fb12 	bl	801d904 <dwt_modify8bitoffsetreg>
 80202e0:	9500      	str	r5, [sp, #0]
 80202e2:	23fd      	movs	r3, #253	; 0xfd
 80202e4:	2203      	movs	r2, #3
 80202e6:	4621      	mov	r1, r4
 80202e8:	4630      	mov	r0, r6
 80202ea:	f7fd fb0b 	bl	801d904 <dwt_modify8bitoffsetreg>
 80202ee:	e237      	b.n	8020760 <dwt_ioctl+0x1e04>
 80202f0:	2c00      	cmp	r4, #0
 80202f2:	f000 82f9 	beq.w	80208e8 <dwt_ioctl+0x1f8c>
 80202f6:	8863      	ldrh	r3, [r4, #2]
 80202f8:	00db      	lsls	r3, r3, #3
 80202fa:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 80202fe:	7822      	ldrb	r2, [r4, #0]
 8020300:	b10a      	cbz	r2, 8020306 <dwt_ioctl+0x19aa>
 8020302:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8020306:	9300      	str	r3, [sp, #0]
 8020308:	f24f 0307 	movw	r3, #61447	; 0xf007
 802030c:	2200      	movs	r2, #0
 802030e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8020312:	4630      	mov	r0, r6
 8020314:	f7fd fe86 	bl	801e024 <dwt_modify16bitoffsetreg>
 8020318:	2500      	movs	r5, #0
 802031a:	e221      	b.n	8020760 <dwt_ioctl+0x1e04>
 802031c:	2500      	movs	r5, #0
 802031e:	9500      	str	r5, [sp, #0]
 8020320:	f64f 33ff 	movw	r3, #64511	; 0xfbff
 8020324:	462a      	mov	r2, r5
 8020326:	f44f 1188 	mov.w	r1, #1114112	; 0x110000
 802032a:	f7fd fe7b 	bl	801e024 <dwt_modify16bitoffsetreg>
 802032e:	e217      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020330:	2c00      	cmp	r4, #0
 8020332:	f000 82db 	beq.w	80208ec <dwt_ioctl+0x1f90>
 8020336:	2200      	movs	r2, #0
 8020338:	4908      	ldr	r1, [pc, #32]	; (802035c <dwt_ioctl+0x1a00>)
 802033a:	f7fb ffa4 	bl	801c286 <dwt_read16bitoffsetreg>
 802033e:	8020      	strh	r0, [r4, #0]
 8020340:	2500      	movs	r5, #0
 8020342:	e20d      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020344:	0001001c 	.word	0x0001001c
 8020348:	00010018 	.word	0x00010018
 802034c:	000e000c 	.word	0x000e000c
 8020350:	00050008 	.word	0x00050008
 8020354:	0005000c 	.word	0x0005000c
 8020358:	00110008 	.word	0x00110008
 802035c:	00110048 	.word	0x00110048
 8020360:	2c00      	cmp	r4, #0
 8020362:	f000 82c5 	beq.w	80208f0 <dwt_ioctl+0x1f94>
 8020366:	7823      	ldrb	r3, [r4, #0]
 8020368:	2b01      	cmp	r3, #1
 802036a:	7862      	ldrb	r2, [r4, #1]
 802036c:	78a3      	ldrb	r3, [r4, #2]
 802036e:	ea4f 23c3 	mov.w	r3, r3, lsl #11
 8020372:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8020376:	78e2      	ldrb	r2, [r4, #3]
 8020378:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 802037c:	7922      	ldrb	r2, [r4, #4]
 802037e:	ea43 3382 	orr.w	r3, r3, r2, lsl #14
 8020382:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020386:	bf0c      	ite	eq
 8020388:	2202      	moveq	r2, #2
 802038a:	2200      	movne	r2, #0
 802038c:	49b6      	ldr	r1, [pc, #728]	; (8020668 <dwt_ioctl+0x1d0c>)
 802038e:	f7fc fbd8 	bl	801cb42 <dwt_write16bitoffsetreg>
 8020392:	2500      	movs	r5, #0
 8020394:	e1e4      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020396:	2c00      	cmp	r4, #0
 8020398:	f000 82ac 	beq.w	80208f4 <dwt_ioctl+0x1f98>
 802039c:	6863      	ldr	r3, [r4, #4]
 802039e:	7822      	ldrb	r2, [r4, #0]
 80203a0:	b13a      	cbz	r2, 80203b2 <dwt_ioctl+0x1a56>
 80203a2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80203a6:	2200      	movs	r2, #0
 80203a8:	49b0      	ldr	r1, [pc, #704]	; (802066c <dwt_ioctl+0x1d10>)
 80203aa:	f7fc fc35 	bl	801cc18 <dwt_write32bitoffsetreg>
 80203ae:	2500      	movs	r5, #0
 80203b0:	e1d6      	b.n	8020760 <dwt_ioctl+0x1e04>
 80203b2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80203b6:	49ae      	ldr	r1, [pc, #696]	; (8020670 <dwt_ioctl+0x1d14>)
 80203b8:	f7fc fc2e 	bl	801cc18 <dwt_write32bitoffsetreg>
 80203bc:	2500      	movs	r5, #0
 80203be:	e1cf      	b.n	8020760 <dwt_ioctl+0x1e04>
 80203c0:	2c00      	cmp	r4, #0
 80203c2:	f000 8299 	beq.w	80208f8 <dwt_ioctl+0x1f9c>
 80203c6:	7823      	ldrb	r3, [r4, #0]
 80203c8:	2401      	movs	r4, #1
 80203ca:	409c      	lsls	r4, r3
 80203cc:	b2e4      	uxtb	r4, r4
 80203ce:	2310      	movs	r3, #16
 80203d0:	9300      	str	r3, [sp, #0]
 80203d2:	23ff      	movs	r3, #255	; 0xff
 80203d4:	2200      	movs	r2, #0
 80203d6:	49a7      	ldr	r1, [pc, #668]	; (8020674 <dwt_ioctl+0x1d18>)
 80203d8:	f7fd fa94 	bl	801d904 <dwt_modify8bitoffsetreg>
 80203dc:	43e3      	mvns	r3, r4
 80203de:	4fa2      	ldr	r7, [pc, #648]	; (8020668 <dwt_ioctl+0x1d0c>)
 80203e0:	2500      	movs	r5, #0
 80203e2:	9500      	str	r5, [sp, #0]
 80203e4:	b2db      	uxtb	r3, r3
 80203e6:	462a      	mov	r2, r5
 80203e8:	4639      	mov	r1, r7
 80203ea:	4630      	mov	r0, r6
 80203ec:	f7fd fa8a 	bl	801d904 <dwt_modify8bitoffsetreg>
 80203f0:	9400      	str	r4, [sp, #0]
 80203f2:	23ff      	movs	r3, #255	; 0xff
 80203f4:	462a      	mov	r2, r5
 80203f6:	4639      	mov	r1, r7
 80203f8:	4630      	mov	r0, r6
 80203fa:	f7fd fa83 	bl	801d904 <dwt_modify8bitoffsetreg>
 80203fe:	e1af      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020400:	2c00      	cmp	r4, #0
 8020402:	f000 827b 	beq.w	80208fc <dwt_ioctl+0x1fa0>
 8020406:	7822      	ldrb	r2, [r4, #0]
 8020408:	7863      	ldrb	r3, [r4, #1]
 802040a:	b19b      	cbz	r3, 8020434 <dwt_ioctl+0x1ad8>
 802040c:	2a00      	cmp	r2, #0
 802040e:	f040 8297 	bne.w	8020940 <dwt_ioctl+0x1fe4>
 8020412:	2400      	movs	r4, #0
 8020414:	9400      	str	r4, [sp, #0]
 8020416:	f06f 73c0 	mvn.w	r3, #25165824	; 0x1800000
 802041a:	4622      	mov	r2, r4
 802041c:	2110      	movs	r1, #16
 802041e:	f7fd f901 	bl	801d624 <dwt_modify32bitoffsetreg>
 8020422:	9400      	str	r4, [sp, #0]
 8020424:	4b94      	ldr	r3, [pc, #592]	; (8020678 <dwt_ioctl+0x1d1c>)
 8020426:	4622      	mov	r2, r4
 8020428:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 802042c:	4630      	mov	r0, r6
 802042e:	f7fd f8f9 	bl	801d624 <dwt_modify32bitoffsetreg>
 8020432:	e017      	b.n	8020464 <dwt_ioctl+0x1b08>
 8020434:	2a00      	cmp	r2, #0
 8020436:	f000 8285 	beq.w	8020944 <dwt_ioctl+0x1fe8>
 802043a:	f44f 4500 	mov.w	r5, #32768	; 0x8000
 802043e:	2400      	movs	r4, #0
 8020440:	9400      	str	r4, [sp, #0]
 8020442:	f06f 73c0 	mvn.w	r3, #25165824	; 0x1800000
 8020446:	4622      	mov	r2, r4
 8020448:	2110      	movs	r1, #16
 802044a:	4630      	mov	r0, r6
 802044c:	f7fd f8ea 	bl	801d624 <dwt_modify32bitoffsetreg>
 8020450:	9500      	str	r5, [sp, #0]
 8020452:	4b89      	ldr	r3, [pc, #548]	; (8020678 <dwt_ioctl+0x1d1c>)
 8020454:	4622      	mov	r2, r4
 8020456:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 802045a:	4630      	mov	r0, r6
 802045c:	f7fd f8e2 	bl	801d624 <dwt_modify32bitoffsetreg>
 8020460:	f04f 74c0 	mov.w	r4, #25165824	; 0x1800000
 8020464:	9400      	str	r4, [sp, #0]
 8020466:	f04f 33ff 	mov.w	r3, #4294967295
 802046a:	2200      	movs	r2, #0
 802046c:	2110      	movs	r1, #16
 802046e:	4630      	mov	r0, r6
 8020470:	f7fd f8d8 	bl	801d624 <dwt_modify32bitoffsetreg>
 8020474:	2500      	movs	r5, #0
 8020476:	e173      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020478:	2c00      	cmp	r4, #0
 802047a:	f000 8241 	beq.w	8020900 <dwt_ioctl+0x1fa4>
 802047e:	7823      	ldrb	r3, [r4, #0]
 8020480:	b93b      	cbnz	r3, 8020492 <dwt_ioctl+0x1b36>
 8020482:	2500      	movs	r5, #0
 8020484:	9500      	str	r5, [sp, #0]
 8020486:	23df      	movs	r3, #223	; 0xdf
 8020488:	2203      	movs	r2, #3
 802048a:	497c      	ldr	r1, [pc, #496]	; (802067c <dwt_ioctl+0x1d20>)
 802048c:	f7fd fa3a 	bl	801d904 <dwt_modify8bitoffsetreg>
 8020490:	e166      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020492:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8020496:	9300      	str	r3, [sp, #0]
 8020498:	f04f 33ff 	mov.w	r3, #4294967295
 802049c:	2200      	movs	r2, #0
 802049e:	4977      	ldr	r1, [pc, #476]	; (802067c <dwt_ioctl+0x1d20>)
 80204a0:	f7fd f8c0 	bl	801d624 <dwt_modify32bitoffsetreg>
 80204a4:	2500      	movs	r5, #0
 80204a6:	e15b      	b.n	8020760 <dwt_ioctl+0x1e04>
 80204a8:	2c00      	cmp	r4, #0
 80204aa:	f000 822b 	beq.w	8020904 <dwt_ioctl+0x1fa8>
 80204ae:	7823      	ldrb	r3, [r4, #0]
 80204b0:	b93b      	cbnz	r3, 80204c2 <dwt_ioctl+0x1b66>
 80204b2:	2500      	movs	r5, #0
 80204b4:	9500      	str	r5, [sp, #0]
 80204b6:	237f      	movs	r3, #127	; 0x7f
 80204b8:	2203      	movs	r2, #3
 80204ba:	4971      	ldr	r1, [pc, #452]	; (8020680 <dwt_ioctl+0x1d24>)
 80204bc:	f7fd fa22 	bl	801d904 <dwt_modify8bitoffsetreg>
 80204c0:	e14e      	b.n	8020760 <dwt_ioctl+0x1e04>
 80204c2:	2380      	movs	r3, #128	; 0x80
 80204c4:	9300      	str	r3, [sp, #0]
 80204c6:	23ff      	movs	r3, #255	; 0xff
 80204c8:	2203      	movs	r2, #3
 80204ca:	496d      	ldr	r1, [pc, #436]	; (8020680 <dwt_ioctl+0x1d24>)
 80204cc:	f7fd fa1a 	bl	801d904 <dwt_modify8bitoffsetreg>
 80204d0:	2500      	movs	r5, #0
 80204d2:	e145      	b.n	8020760 <dwt_ioctl+0x1e04>
 80204d4:	2c00      	cmp	r4, #0
 80204d6:	f000 8217 	beq.w	8020908 <dwt_ioctl+0x1fac>
 80204da:	b2e3      	uxtb	r3, r4
 80204dc:	1c9a      	adds	r2, r3, #2
 80204de:	2301      	movs	r3, #1
 80204e0:	4093      	lsls	r3, r2
 80204e2:	3b01      	subs	r3, #1
 80204e4:	b2db      	uxtb	r3, r3
 80204e6:	2200      	movs	r2, #0
 80204e8:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80204ec:	f7fc fd78 	bl	801cfe0 <dwt_write8bitoffsetreg>
 80204f0:	2500      	movs	r5, #0
 80204f2:	e135      	b.n	8020760 <dwt_ioctl+0x1e04>
 80204f4:	2c00      	cmp	r4, #0
 80204f6:	f000 8209 	beq.w	802090c <dwt_ioctl+0x1fb0>
 80204fa:	7ae3      	ldrb	r3, [r4, #11]
 80204fc:	2b00      	cmp	r3, #0
 80204fe:	f000 8207 	beq.w	8020910 <dwt_ioctl+0x1fb4>
 8020502:	7b63      	ldrb	r3, [r4, #13]
 8020504:	2b01      	cmp	r3, #1
 8020506:	7b20      	ldrb	r0, [r4, #12]
 8020508:	bf94      	ite	ls
 802050a:	2203      	movls	r2, #3
 802050c:	2204      	movhi	r2, #4
 802050e:	2110      	movs	r1, #16
 8020510:	4b5c      	ldr	r3, [pc, #368]	; (8020684 <dwt_ioctl+0x1d28>)
 8020512:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8020516:	f7fb fdfb 	bl	801c110 <get_sts_mnth>
 802051a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 802051e:	9000      	str	r0, [sp, #0]
 8020520:	f64f 7380 	movw	r3, #65408	; 0xff80
 8020524:	2202      	movs	r2, #2
 8020526:	4958      	ldr	r1, [pc, #352]	; (8020688 <dwt_ioctl+0x1d2c>)
 8020528:	4630      	mov	r0, r6
 802052a:	f7fd fd7b 	bl	801e024 <dwt_modify16bitoffsetreg>
 802052e:	2394      	movs	r3, #148	; 0x94
 8020530:	2200      	movs	r2, #0
 8020532:	4956      	ldr	r1, [pc, #344]	; (802068c <dwt_ioctl+0x1d30>)
 8020534:	4630      	mov	r0, r6
 8020536:	f7fc fd53 	bl	801cfe0 <dwt_write8bitoffsetreg>
 802053a:	2500      	movs	r5, #0
 802053c:	e110      	b.n	8020760 <dwt_ioctl+0x1e04>
 802053e:	2c00      	cmp	r4, #0
 8020540:	f000 81e8 	beq.w	8020914 <dwt_ioctl+0x1fb8>
 8020544:	2200      	movs	r2, #0
 8020546:	4952      	ldr	r1, [pc, #328]	; (8020690 <dwt_ioctl+0x1d34>)
 8020548:	f7fb fe87 	bl	801c25a <dwt_read32bitoffsetreg>
 802054c:	6020      	str	r0, [r4, #0]
 802054e:	2500      	movs	r5, #0
 8020550:	e106      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020552:	2c00      	cmp	r4, #0
 8020554:	f000 81e0 	beq.w	8020918 <dwt_ioctl+0x1fbc>
 8020558:	2200      	movs	r2, #0
 802055a:	494e      	ldr	r1, [pc, #312]	; (8020694 <dwt_ioctl+0x1d38>)
 802055c:	f7fb fe7d 	bl	801c25a <dwt_read32bitoffsetreg>
 8020560:	6020      	str	r0, [r4, #0]
 8020562:	2500      	movs	r5, #0
 8020564:	e0fc      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020566:	2c00      	cmp	r4, #0
 8020568:	f000 81d8 	beq.w	802091c <dwt_ioctl+0x1fc0>
 802056c:	f44f 13a8 	mov.w	r3, #1376256	; 0x150000
 8020570:	6023      	str	r3, [r4, #0]
 8020572:	2500      	movs	r5, #0
 8020574:	e0f4      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020576:	2c00      	cmp	r4, #0
 8020578:	f000 81d2 	beq.w	8020920 <dwt_ioctl+0x1fc4>
 802057c:	2500      	movs	r5, #0
 802057e:	950a      	str	r5, [sp, #40]	; 0x28
 8020580:	af0c      	add	r7, sp, #48	; 0x30
 8020582:	2319      	movs	r3, #25
 8020584:	f847 3d04 	str.w	r3, [r7, #-4]!
 8020588:	9700      	str	r7, [sp, #0]
 802058a:	2304      	movs	r3, #4
 802058c:	462a      	mov	r2, r5
 802058e:	4942      	ldr	r1, [pc, #264]	; (8020698 <dwt_ioctl+0x1d3c>)
 8020590:	f7fc facc 	bl	801cb2c <dwt_writetodevice>
 8020594:	f641 7348 	movw	r3, #8008	; 0x1f48
 8020598:	930b      	str	r3, [sp, #44]	; 0x2c
 802059a:	9700      	str	r7, [sp, #0]
 802059c:	2304      	movs	r3, #4
 802059e:	462a      	mov	r2, r5
 80205a0:	493e      	ldr	r1, [pc, #248]	; (802069c <dwt_ioctl+0x1d40>)
 80205a2:	4630      	mov	r0, r6
 80205a4:	f7fc fac2 	bl	801cb2c <dwt_writetodevice>
 80205a8:	ab0a      	add	r3, sp, #40	; 0x28
 80205aa:	9300      	str	r3, [sp, #0]
 80205ac:	2304      	movs	r3, #4
 80205ae:	462a      	mov	r2, r5
 80205b0:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 80205b4:	4630      	mov	r0, r6
 80205b6:	f7fb fe46 	bl	801c246 <dwt_readfromdevice>
 80205ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80205bc:	6023      	str	r3, [r4, #0]
 80205be:	e0cf      	b.n	8020760 <dwt_ioctl+0x1e04>
 80205c0:	2c00      	cmp	r4, #0
 80205c2:	f000 81af 	beq.w	8020924 <dwt_ioctl+0x1fc8>
 80205c6:	2200      	movs	r2, #0
 80205c8:	4935      	ldr	r1, [pc, #212]	; (80206a0 <dwt_ioctl+0x1d44>)
 80205ca:	f7fb fe46 	bl	801c25a <dwt_read32bitoffsetreg>
 80205ce:	b280      	uxth	r0, r0
 80205d0:	6020      	str	r0, [r4, #0]
 80205d2:	2200      	movs	r2, #0
 80205d4:	4933      	ldr	r1, [pc, #204]	; (80206a4 <dwt_ioctl+0x1d48>)
 80205d6:	4630      	mov	r0, r6
 80205d8:	f7fb fe3f 	bl	801c25a <dwt_read32bitoffsetreg>
 80205dc:	0d43      	lsrs	r3, r0, #21
 80205de:	019b      	lsls	r3, r3, #6
 80205e0:	b29b      	uxth	r3, r3
 80205e2:	6063      	str	r3, [r4, #4]
 80205e4:	2500      	movs	r5, #0
 80205e6:	e0bb      	b.n	8020760 <dwt_ioctl+0x1e04>
 80205e8:	2c00      	cmp	r4, #0
 80205ea:	f000 819d 	beq.w	8020928 <dwt_ioctl+0x1fcc>
 80205ee:	7d63      	ldrb	r3, [r4, #21]
 80205f0:	b133      	cbz	r3, 8020600 <dwt_ioctl+0x1ca4>
 80205f2:	2b01      	cmp	r3, #1
 80205f4:	d062      	beq.n	80206bc <dwt_ioctl+0x1d60>
 80205f6:	2b02      	cmp	r3, #2
 80205f8:	f000 8089 	beq.w	802070e <dwt_ioctl+0x1db2>
 80205fc:	23ff      	movs	r3, #255	; 0xff
 80205fe:	e02f      	b.n	8020660 <dwt_ioctl+0x1d04>
 8020600:	2200      	movs	r2, #0
 8020602:	4929      	ldr	r1, [pc, #164]	; (80206a8 <dwt_ioctl+0x1d4c>)
 8020604:	f7fb fe29 	bl	801c25a <dwt_read32bitoffsetreg>
 8020608:	f3c0 000b 	ubfx	r0, r0, #0, #12
 802060c:	6020      	str	r0, [r4, #0]
 802060e:	2200      	movs	r2, #0
 8020610:	4926      	ldr	r1, [pc, #152]	; (80206ac <dwt_ioctl+0x1d50>)
 8020612:	4630      	mov	r0, r6
 8020614:	f7fb fe21 	bl	801c25a <dwt_read32bitoffsetreg>
 8020618:	f3c0 0015 	ubfx	r0, r0, #0, #22
 802061c:	6060      	str	r0, [r4, #4]
 802061e:	2200      	movs	r2, #0
 8020620:	4923      	ldr	r1, [pc, #140]	; (80206b0 <dwt_ioctl+0x1d54>)
 8020622:	4630      	mov	r0, r6
 8020624:	f7fb fe19 	bl	801c25a <dwt_read32bitoffsetreg>
 8020628:	f3c0 0015 	ubfx	r0, r0, #0, #22
 802062c:	60a0      	str	r0, [r4, #8]
 802062e:	2200      	movs	r2, #0
 8020630:	4920      	ldr	r1, [pc, #128]	; (80206b4 <dwt_ioctl+0x1d58>)
 8020632:	4630      	mov	r0, r6
 8020634:	f7fb fe11 	bl	801c25a <dwt_read32bitoffsetreg>
 8020638:	f3c0 0015 	ubfx	r0, r0, #0, #22
 802063c:	60e0      	str	r0, [r4, #12]
 802063e:	2200      	movs	r2, #0
 8020640:	491d      	ldr	r1, [pc, #116]	; (80206b8 <dwt_ioctl+0x1d5c>)
 8020642:	4630      	mov	r0, r6
 8020644:	f7fb fe09 	bl	801c25a <dwt_read32bitoffsetreg>
 8020648:	f3c0 0013 	ubfx	r0, r0, #0, #20
 802064c:	6120      	str	r0, [r4, #16]
 802064e:	2203      	movs	r2, #3
 8020650:	490f      	ldr	r1, [pc, #60]	; (8020690 <dwt_ioctl+0x1d34>)
 8020652:	4630      	mov	r0, r6
 8020654:	f7fb fe56 	bl	801c304 <dwt_read8bitoffsetreg>
 8020658:	f3c0 1002 	ubfx	r0, r0, #4, #3
 802065c:	7520      	strb	r0, [r4, #20]
 802065e:	2300      	movs	r3, #0
 8020660:	75a3      	strb	r3, [r4, #22]
 8020662:	2500      	movs	r5, #0
 8020664:	e07c      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020666:	bf00      	nop
 8020668:	0011003c 	.word	0x0011003c
 802066c:	00110044 	.word	0x00110044
 8020670:	00110040 	.word	0x00110040
 8020674:	00070048 	.word	0x00070048
 8020678:	f7fc0fff 	.word	0xf7fc0fff
 802067c:	000f0028 	.word	0x000f0028
 8020680:	0007001c 	.word	0x0007001c
 8020684:	0802146c 	.word	0x0802146c
 8020688:	000e0014 	.word	0x000e0014
 802068c:	000e0018 	.word	0x000e0018
 8020690:	00030054 	.word	0x00030054
 8020694:	000f004c 	.word	0x000f004c
 8020698:	001f0004 	.word	0x001f0004
 802069c:	001f0008 	.word	0x001f0008
 80206a0:	000c0048 	.word	0x000c0048
 80206a4:	000c0028 	.word	0x000c0028
 80206a8:	000c0058 	.word	0x000c0058
 80206ac:	000c0030 	.word	0x000c0030
 80206b0:	000c0034 	.word	0x000c0034
 80206b4:	000c0038 	.word	0x000c0038
 80206b8:	000c002c 	.word	0x000c002c
 80206bc:	2200      	movs	r2, #0
 80206be:	49aa      	ldr	r1, [pc, #680]	; (8020968 <dwt_ioctl+0x200c>)
 80206c0:	f7fb fdcb 	bl	801c25a <dwt_read32bitoffsetreg>
 80206c4:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80206c8:	6020      	str	r0, [r4, #0]
 80206ca:	2200      	movs	r2, #0
 80206cc:	49a7      	ldr	r1, [pc, #668]	; (802096c <dwt_ioctl+0x2010>)
 80206ce:	4630      	mov	r0, r6
 80206d0:	f7fb fdc3 	bl	801c25a <dwt_read32bitoffsetreg>
 80206d4:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80206d8:	6060      	str	r0, [r4, #4]
 80206da:	2200      	movs	r2, #0
 80206dc:	49a4      	ldr	r1, [pc, #656]	; (8020970 <dwt_ioctl+0x2014>)
 80206de:	4630      	mov	r0, r6
 80206e0:	f7fb fdbb 	bl	801c25a <dwt_read32bitoffsetreg>
 80206e4:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80206e8:	60a0      	str	r0, [r4, #8]
 80206ea:	2200      	movs	r2, #0
 80206ec:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 80206f0:	4630      	mov	r0, r6
 80206f2:	f7fb fdb2 	bl	801c25a <dwt_read32bitoffsetreg>
 80206f6:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80206fa:	60e0      	str	r0, [r4, #12]
 80206fc:	2200      	movs	r2, #0
 80206fe:	499d      	ldr	r1, [pc, #628]	; (8020974 <dwt_ioctl+0x2018>)
 8020700:	4630      	mov	r0, r6
 8020702:	f7fb fdaa 	bl	801c25a <dwt_read32bitoffsetreg>
 8020706:	f3c0 0013 	ubfx	r0, r0, #0, #20
 802070a:	6120      	str	r0, [r4, #16]
 802070c:	e79f      	b.n	802064e <dwt_ioctl+0x1cf2>
 802070e:	2200      	movs	r2, #0
 8020710:	4999      	ldr	r1, [pc, #612]	; (8020978 <dwt_ioctl+0x201c>)
 8020712:	f7fb fda2 	bl	801c25a <dwt_read32bitoffsetreg>
 8020716:	f3c0 000b 	ubfx	r0, r0, #0, #12
 802071a:	6020      	str	r0, [r4, #0]
 802071c:	2200      	movs	r2, #0
 802071e:	4997      	ldr	r1, [pc, #604]	; (802097c <dwt_ioctl+0x2020>)
 8020720:	4630      	mov	r0, r6
 8020722:	f7fb fd9a 	bl	801c25a <dwt_read32bitoffsetreg>
 8020726:	f3c0 0015 	ubfx	r0, r0, #0, #22
 802072a:	6060      	str	r0, [r4, #4]
 802072c:	2200      	movs	r2, #0
 802072e:	4994      	ldr	r1, [pc, #592]	; (8020980 <dwt_ioctl+0x2024>)
 8020730:	4630      	mov	r0, r6
 8020732:	f7fb fd92 	bl	801c25a <dwt_read32bitoffsetreg>
 8020736:	f3c0 0015 	ubfx	r0, r0, #0, #22
 802073a:	60a0      	str	r0, [r4, #8]
 802073c:	2200      	movs	r2, #0
 802073e:	4991      	ldr	r1, [pc, #580]	; (8020984 <dwt_ioctl+0x2028>)
 8020740:	4630      	mov	r0, r6
 8020742:	f7fb fd8a 	bl	801c25a <dwt_read32bitoffsetreg>
 8020746:	f3c0 0015 	ubfx	r0, r0, #0, #22
 802074a:	60e0      	str	r0, [r4, #12]
 802074c:	2200      	movs	r2, #0
 802074e:	498e      	ldr	r1, [pc, #568]	; (8020988 <dwt_ioctl+0x202c>)
 8020750:	4630      	mov	r0, r6
 8020752:	f7fb fd82 	bl	801c25a <dwt_read32bitoffsetreg>
 8020756:	f3c0 0013 	ubfx	r0, r0, #0, #20
 802075a:	6120      	str	r0, [r4, #16]
 802075c:	e777      	b.n	802064e <dwt_ioctl+0x1cf2>
 802075e:	2500      	movs	r5, #0
 8020760:	4628      	mov	r0, r5
 8020762:	b00d      	add	sp, #52	; 0x34
 8020764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020768:	2500      	movs	r5, #0
 802076a:	e7f9      	b.n	8020760 <dwt_ioctl+0x1e04>
 802076c:	2500      	movs	r5, #0
 802076e:	e7f7      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020770:	2500      	movs	r5, #0
 8020772:	e7f5      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020774:	2500      	movs	r5, #0
 8020776:	e7f3      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020778:	2500      	movs	r5, #0
 802077a:	e7f1      	b.n	8020760 <dwt_ioctl+0x1e04>
 802077c:	2500      	movs	r5, #0
 802077e:	e7ef      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020780:	2500      	movs	r5, #0
 8020782:	e7ed      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020784:	2500      	movs	r5, #0
 8020786:	e7eb      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020788:	2500      	movs	r5, #0
 802078a:	e7e9      	b.n	8020760 <dwt_ioctl+0x1e04>
 802078c:	2500      	movs	r5, #0
 802078e:	e7e7      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020790:	2500      	movs	r5, #0
 8020792:	e7e5      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020794:	2500      	movs	r5, #0
 8020796:	e7e3      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020798:	2500      	movs	r5, #0
 802079a:	e7e1      	b.n	8020760 <dwt_ioctl+0x1e04>
 802079c:	2500      	movs	r5, #0
 802079e:	e7df      	b.n	8020760 <dwt_ioctl+0x1e04>
 80207a0:	2500      	movs	r5, #0
 80207a2:	e7dd      	b.n	8020760 <dwt_ioctl+0x1e04>
 80207a4:	2500      	movs	r5, #0
 80207a6:	e7db      	b.n	8020760 <dwt_ioctl+0x1e04>
 80207a8:	2500      	movs	r5, #0
 80207aa:	e7d9      	b.n	8020760 <dwt_ioctl+0x1e04>
 80207ac:	2500      	movs	r5, #0
 80207ae:	e7d7      	b.n	8020760 <dwt_ioctl+0x1e04>
 80207b0:	2500      	movs	r5, #0
 80207b2:	e7d5      	b.n	8020760 <dwt_ioctl+0x1e04>
 80207b4:	2500      	movs	r5, #0
 80207b6:	e7d3      	b.n	8020760 <dwt_ioctl+0x1e04>
 80207b8:	2500      	movs	r5, #0
 80207ba:	e7d1      	b.n	8020760 <dwt_ioctl+0x1e04>
 80207bc:	2500      	movs	r5, #0
 80207be:	e7cf      	b.n	8020760 <dwt_ioctl+0x1e04>
 80207c0:	2500      	movs	r5, #0
 80207c2:	e7cd      	b.n	8020760 <dwt_ioctl+0x1e04>
 80207c4:	2500      	movs	r5, #0
 80207c6:	e7cb      	b.n	8020760 <dwt_ioctl+0x1e04>
 80207c8:	2500      	movs	r5, #0
 80207ca:	e7c9      	b.n	8020760 <dwt_ioctl+0x1e04>
 80207cc:	2500      	movs	r5, #0
 80207ce:	e7c7      	b.n	8020760 <dwt_ioctl+0x1e04>
 80207d0:	2500      	movs	r5, #0
 80207d2:	e7c5      	b.n	8020760 <dwt_ioctl+0x1e04>
 80207d4:	2500      	movs	r5, #0
 80207d6:	e7c3      	b.n	8020760 <dwt_ioctl+0x1e04>
 80207d8:	2500      	movs	r5, #0
 80207da:	e7c1      	b.n	8020760 <dwt_ioctl+0x1e04>
 80207dc:	2500      	movs	r5, #0
 80207de:	e7bf      	b.n	8020760 <dwt_ioctl+0x1e04>
 80207e0:	2500      	movs	r5, #0
 80207e2:	e7bd      	b.n	8020760 <dwt_ioctl+0x1e04>
 80207e4:	2500      	movs	r5, #0
 80207e6:	e7bb      	b.n	8020760 <dwt_ioctl+0x1e04>
 80207e8:	2500      	movs	r5, #0
 80207ea:	e7b9      	b.n	8020760 <dwt_ioctl+0x1e04>
 80207ec:	2500      	movs	r5, #0
 80207ee:	e7b7      	b.n	8020760 <dwt_ioctl+0x1e04>
 80207f0:	2500      	movs	r5, #0
 80207f2:	e7b5      	b.n	8020760 <dwt_ioctl+0x1e04>
 80207f4:	2500      	movs	r5, #0
 80207f6:	e7b3      	b.n	8020760 <dwt_ioctl+0x1e04>
 80207f8:	2500      	movs	r5, #0
 80207fa:	e7b1      	b.n	8020760 <dwt_ioctl+0x1e04>
 80207fc:	2500      	movs	r5, #0
 80207fe:	e7af      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020800:	2500      	movs	r5, #0
 8020802:	e7ad      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020804:	2500      	movs	r5, #0
 8020806:	e7ab      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020808:	2500      	movs	r5, #0
 802080a:	e7a9      	b.n	8020760 <dwt_ioctl+0x1e04>
 802080c:	2500      	movs	r5, #0
 802080e:	e7a7      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020810:	2500      	movs	r5, #0
 8020812:	e7a5      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020814:	2500      	movs	r5, #0
 8020816:	e7a3      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020818:	2500      	movs	r5, #0
 802081a:	e7a1      	b.n	8020760 <dwt_ioctl+0x1e04>
 802081c:	2500      	movs	r5, #0
 802081e:	e79f      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020820:	2500      	movs	r5, #0
 8020822:	e79d      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020824:	2500      	movs	r5, #0
 8020826:	e79b      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020828:	2500      	movs	r5, #0
 802082a:	e799      	b.n	8020760 <dwt_ioctl+0x1e04>
 802082c:	2500      	movs	r5, #0
 802082e:	e797      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020830:	2500      	movs	r5, #0
 8020832:	e795      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020834:	2500      	movs	r5, #0
 8020836:	e793      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020838:	2500      	movs	r5, #0
 802083a:	e791      	b.n	8020760 <dwt_ioctl+0x1e04>
 802083c:	2500      	movs	r5, #0
 802083e:	e78f      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020840:	2500      	movs	r5, #0
 8020842:	e78d      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020844:	2500      	movs	r5, #0
 8020846:	e78b      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020848:	2500      	movs	r5, #0
 802084a:	e789      	b.n	8020760 <dwt_ioctl+0x1e04>
 802084c:	2500      	movs	r5, #0
 802084e:	e787      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020850:	2500      	movs	r5, #0
 8020852:	e785      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020854:	2500      	movs	r5, #0
 8020856:	e783      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020858:	2500      	movs	r5, #0
 802085a:	e781      	b.n	8020760 <dwt_ioctl+0x1e04>
 802085c:	2500      	movs	r5, #0
 802085e:	e77f      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020860:	2500      	movs	r5, #0
 8020862:	e77d      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020864:	2500      	movs	r5, #0
 8020866:	e77b      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020868:	2500      	movs	r5, #0
 802086a:	e779      	b.n	8020760 <dwt_ioctl+0x1e04>
 802086c:	2500      	movs	r5, #0
 802086e:	e777      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020870:	2500      	movs	r5, #0
 8020872:	e775      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020874:	2500      	movs	r5, #0
 8020876:	e773      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020878:	2500      	movs	r5, #0
 802087a:	e771      	b.n	8020760 <dwt_ioctl+0x1e04>
 802087c:	2500      	movs	r5, #0
 802087e:	e76f      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020880:	2500      	movs	r5, #0
 8020882:	e76d      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020884:	2500      	movs	r5, #0
 8020886:	e76b      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020888:	2500      	movs	r5, #0
 802088a:	e769      	b.n	8020760 <dwt_ioctl+0x1e04>
 802088c:	2500      	movs	r5, #0
 802088e:	e767      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020890:	2500      	movs	r5, #0
 8020892:	e765      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020894:	2500      	movs	r5, #0
 8020896:	e763      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020898:	2500      	movs	r5, #0
 802089a:	e761      	b.n	8020760 <dwt_ioctl+0x1e04>
 802089c:	2500      	movs	r5, #0
 802089e:	e75f      	b.n	8020760 <dwt_ioctl+0x1e04>
 80208a0:	2500      	movs	r5, #0
 80208a2:	e75d      	b.n	8020760 <dwt_ioctl+0x1e04>
 80208a4:	2500      	movs	r5, #0
 80208a6:	e75b      	b.n	8020760 <dwt_ioctl+0x1e04>
 80208a8:	2500      	movs	r5, #0
 80208aa:	e759      	b.n	8020760 <dwt_ioctl+0x1e04>
 80208ac:	2500      	movs	r5, #0
 80208ae:	e757      	b.n	8020760 <dwt_ioctl+0x1e04>
 80208b0:	2500      	movs	r5, #0
 80208b2:	e755      	b.n	8020760 <dwt_ioctl+0x1e04>
 80208b4:	2500      	movs	r5, #0
 80208b6:	e753      	b.n	8020760 <dwt_ioctl+0x1e04>
 80208b8:	2500      	movs	r5, #0
 80208ba:	e751      	b.n	8020760 <dwt_ioctl+0x1e04>
 80208bc:	2500      	movs	r5, #0
 80208be:	e74f      	b.n	8020760 <dwt_ioctl+0x1e04>
 80208c0:	2500      	movs	r5, #0
 80208c2:	e74d      	b.n	8020760 <dwt_ioctl+0x1e04>
 80208c4:	2500      	movs	r5, #0
 80208c6:	e74b      	b.n	8020760 <dwt_ioctl+0x1e04>
 80208c8:	2500      	movs	r5, #0
 80208ca:	e749      	b.n	8020760 <dwt_ioctl+0x1e04>
 80208cc:	2500      	movs	r5, #0
 80208ce:	e747      	b.n	8020760 <dwt_ioctl+0x1e04>
 80208d0:	f04f 35ff 	mov.w	r5, #4294967295
 80208d4:	e744      	b.n	8020760 <dwt_ioctl+0x1e04>
 80208d6:	f04f 35ff 	mov.w	r5, #4294967295
 80208da:	e741      	b.n	8020760 <dwt_ioctl+0x1e04>
 80208dc:	2500      	movs	r5, #0
 80208de:	e73f      	b.n	8020760 <dwt_ioctl+0x1e04>
 80208e0:	2500      	movs	r5, #0
 80208e2:	e73d      	b.n	8020760 <dwt_ioctl+0x1e04>
 80208e4:	2500      	movs	r5, #0
 80208e6:	e73b      	b.n	8020760 <dwt_ioctl+0x1e04>
 80208e8:	2500      	movs	r5, #0
 80208ea:	e739      	b.n	8020760 <dwt_ioctl+0x1e04>
 80208ec:	2500      	movs	r5, #0
 80208ee:	e737      	b.n	8020760 <dwt_ioctl+0x1e04>
 80208f0:	2500      	movs	r5, #0
 80208f2:	e735      	b.n	8020760 <dwt_ioctl+0x1e04>
 80208f4:	2500      	movs	r5, #0
 80208f6:	e733      	b.n	8020760 <dwt_ioctl+0x1e04>
 80208f8:	2500      	movs	r5, #0
 80208fa:	e731      	b.n	8020760 <dwt_ioctl+0x1e04>
 80208fc:	2500      	movs	r5, #0
 80208fe:	e72f      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020900:	2500      	movs	r5, #0
 8020902:	e72d      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020904:	2500      	movs	r5, #0
 8020906:	e72b      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020908:	2500      	movs	r5, #0
 802090a:	e729      	b.n	8020760 <dwt_ioctl+0x1e04>
 802090c:	2500      	movs	r5, #0
 802090e:	e727      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020910:	2500      	movs	r5, #0
 8020912:	e725      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020914:	2500      	movs	r5, #0
 8020916:	e723      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020918:	2500      	movs	r5, #0
 802091a:	e721      	b.n	8020760 <dwt_ioctl+0x1e04>
 802091c:	2500      	movs	r5, #0
 802091e:	e71f      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020920:	2500      	movs	r5, #0
 8020922:	e71d      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020924:	2500      	movs	r5, #0
 8020926:	e71b      	b.n	8020760 <dwt_ioctl+0x1e04>
 8020928:	2500      	movs	r5, #0
 802092a:	e719      	b.n	8020760 <dwt_ioctl+0x1e04>
 802092c:	f899 3011 	ldrb.w	r3, [r9, #17]
 8020930:	1e5a      	subs	r2, r3, #1
 8020932:	b2d2      	uxtb	r2, r2
 8020934:	2a01      	cmp	r2, #1
 8020936:	f67e ae60 	bls.w	801f5fa <dwt_ioctl+0xc9e>
 802093a:	2202      	movs	r2, #2
 802093c:	f7fe be07 	b.w	801f54e <dwt_ioctl+0xbf2>
 8020940:	4d12      	ldr	r5, [pc, #72]	; (802098c <dwt_ioctl+0x2030>)
 8020942:	e57c      	b.n	802043e <dwt_ioctl+0x1ae2>
 8020944:	2400      	movs	r4, #0
 8020946:	9400      	str	r4, [sp, #0]
 8020948:	f06f 73c0 	mvn.w	r3, #25165824	; 0x1800000
 802094c:	4622      	mov	r2, r4
 802094e:	2110      	movs	r1, #16
 8020950:	f7fc fe68 	bl	801d624 <dwt_modify32bitoffsetreg>
 8020954:	9400      	str	r4, [sp, #0]
 8020956:	4b0e      	ldr	r3, [pc, #56]	; (8020990 <dwt_ioctl+0x2034>)
 8020958:	4622      	mov	r2, r4
 802095a:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 802095e:	4630      	mov	r0, r6
 8020960:	f7fc fe60 	bl	801d624 <dwt_modify32bitoffsetreg>
 8020964:	e57e      	b.n	8020464 <dwt_ioctl+0x1b08>
 8020966:	bf00      	nop
 8020968:	000d0020 	.word	0x000d0020
 802096c:	000c0064 	.word	0x000c0064
 8020970:	000c0068 	.word	0x000c0068
 8020974:	000c0060 	.word	0x000c0060
 8020978:	000d0068 	.word	0x000d0068
 802097c:	000d0040 	.word	0x000d0040
 8020980:	000d0044 	.word	0x000d0044
 8020984:	000d0048 	.word	0x000d0048
 8020988:	000d003c 	.word	0x000d003c
 802098c:	08001000 	.word	0x08001000
 8020990:	f7fc0fff 	.word	0xf7fc0fff

08020994 <_init>:
 8020994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020996:	b085      	sub	sp, #20
 8020998:	4604      	mov	r4, r0
 802099a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 802099c:	6819      	ldr	r1, [r3, #0]
 802099e:	f7fd fea7 	bl	801e6f0 <ull_initialise>
 80209a2:	4606      	mov	r6, r0
 80209a4:	6823      	ldr	r3, [r4, #0]
 80209a6:	691b      	ldr	r3, [r3, #16]
 80209a8:	4798      	blx	r3
 80209aa:	ab03      	add	r3, sp, #12
 80209ac:	2200      	movs	r2, #0
 80209ae:	4611      	mov	r1, r2
 80209b0:	4620      	mov	r0, r4
 80209b2:	f7fd ffd3 	bl	801e95c <dwt_ioctl>
 80209b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80209b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80209ba:	6819      	ldr	r1, [r3, #0]
 80209bc:	4620      	mov	r0, r4
 80209be:	f7fd fc49 	bl	801e254 <ull_configure>
 80209c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80209c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80209c6:	6859      	ldr	r1, [r3, #4]
 80209c8:	4620      	mov	r0, r4
 80209ca:	f7fd f999 	bl	801dd00 <ull_configuretxrf>
 80209ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80209d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80209d2:	89d9      	ldrh	r1, [r3, #14]
 80209d4:	4620      	mov	r0, r4
 80209d6:	f7fc f8c4 	bl	801cb62 <ull_setrxantennadelay>
 80209da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80209dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80209de:	8999      	ldrh	r1, [r3, #12]
 80209e0:	4620      	mov	r0, r4
 80209e2:	f7fc f8c6 	bl	801cb72 <ull_settxantennadelay>
 80209e6:	2100      	movs	r1, #0
 80209e8:	4620      	mov	r0, r4
 80209ea:	f7fc f950 	bl	801cc8e <ull_setrxaftertxdelay>
 80209ee:	2500      	movs	r5, #0
 80209f0:	9500      	str	r5, [sp, #0]
 80209f2:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 80209f6:	462a      	mov	r2, r5
 80209f8:	2110      	movs	r1, #16
 80209fa:	4620      	mov	r0, r4
 80209fc:	f7fd fb12 	bl	801e024 <dwt_modify16bitoffsetreg>
 8020a00:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020a04:	895a      	ldrh	r2, [r3, #10]
 8020a06:	8919      	ldrh	r1, [r3, #8]
 8020a08:	4620      	mov	r0, r4
 8020a0a:	f7fd fa09 	bl	801de20 <ull_configureframefilter>
 8020a0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020a12:	8a1b      	ldrh	r3, [r3, #16]
 8020a14:	2202      	movs	r2, #2
 8020a16:	210c      	movs	r1, #12
 8020a18:	4620      	mov	r0, r4
 8020a1a:	f7fc f892 	bl	801cb42 <dwt_write16bitoffsetreg>
 8020a1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020a22:	8a5b      	ldrh	r3, [r3, #18]
 8020a24:	462a      	mov	r2, r5
 8020a26:	210c      	movs	r1, #12
 8020a28:	4620      	mov	r0, r4
 8020a2a:	f7fc f88a 	bl	801cb42 <dwt_write16bitoffsetreg>
 8020a2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020a30:	7a19      	ldrb	r1, [r3, #8]
 8020a32:	4620      	mov	r0, r4
 8020a34:	f7fd fb34 	bl	801e0a0 <ull_setleds>
 8020a38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020a3a:	68d9      	ldr	r1, [r3, #12]
 8020a3c:	4620      	mov	r0, r4
 8020a3e:	f7fc f94f 	bl	801cce0 <ull_setlnapamode>
 8020a42:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020a44:	7e0b      	ldrb	r3, [r1, #24]
 8020a46:	694a      	ldr	r2, [r1, #20]
 8020a48:	6909      	ldr	r1, [r1, #16]
 8020a4a:	4620      	mov	r0, r4
 8020a4c:	f7fd fa6e 	bl	801df2c <ull_setinterrupt>
 8020a50:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020a52:	7f9a      	ldrb	r2, [r3, #30]
 8020a54:	8b99      	ldrh	r1, [r3, #28]
 8020a56:	4620      	mov	r0, r4
 8020a58:	f7fc fb96 	bl	801d188 <ull_configuresleep>
 8020a5c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8020a5e:	7b53      	ldrb	r3, [r2, #13]
 8020a60:	2b2e      	cmp	r3, #46	; 0x2e
 8020a62:	d005      	beq.n	8020a70 <_init+0xdc>
 8020a64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020a66:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8020a6a:	f033 033f 	bics.w	r3, r3, #63	; 0x3f
 8020a6e:	d00a      	beq.n	8020a86 <_init+0xf2>
 8020a70:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020a72:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8020a76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8020a7a:	7353      	strb	r3, [r2, #13]
 8020a7c:	2200      	movs	r2, #0
 8020a7e:	4928      	ldr	r1, [pc, #160]	; (8020b20 <_init+0x18c>)
 8020a80:	4620      	mov	r0, r4
 8020a82:	f7fc faad 	bl	801cfe0 <dwt_write8bitoffsetreg>
 8020a86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020a88:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 8020a8c:	4620      	mov	r0, r4
 8020a8e:	f7fc ff69 	bl	801d964 <ull_configciadiag>
 8020a92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020a94:	6a19      	ldr	r1, [r3, #32]
 8020a96:	4620      	mov	r0, r4
 8020a98:	f7fc f942 	bl	801cd20 <ull_configurestskey>
 8020a9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020a9e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8020aa0:	4620      	mov	r0, r4
 8020aa2:	f7fc f961 	bl	801cd68 <ull_configurestsiv>
 8020aa6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020aa8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8020aac:	bb9b      	cbnz	r3, 8020b16 <_init+0x182>
 8020aae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020ab0:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 8020ab4:	4620      	mov	r0, r4
 8020ab6:	f7fc fb0b 	bl	801d0d0 <ull_configeventcounters>
 8020aba:	f994 504c 	ldrsb.w	r5, [r4, #76]	; 0x4c
 8020abe:	2d00      	cmp	r5, #0
 8020ac0:	db26      	blt.n	8020b10 <_init+0x17c>
 8020ac2:	2301      	movs	r3, #1
 8020ac4:	fa03 f505 	lsl.w	r5, r3, r5
 8020ac8:	b2af      	uxth	r7, r5
 8020aca:	4a16      	ldr	r2, [pc, #88]	; (8020b24 <_init+0x190>)
 8020acc:	4639      	mov	r1, r7
 8020ace:	4620      	mov	r0, r4
 8020ad0:	f7fc feda 	bl	801d888 <ull_setgpiomode>
 8020ad4:	f10d 030a 	add.w	r3, sp, #10
 8020ad8:	9300      	str	r3, [sp, #0]
 8020ada:	2302      	movs	r3, #2
 8020adc:	2200      	movs	r2, #0
 8020ade:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8020ae2:	4620      	mov	r0, r4
 8020ae4:	f7fb fbaf 	bl	801c246 <dwt_readfromdevice>
 8020ae8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8020aec:	ea23 0305 	bic.w	r3, r3, r5
 8020af0:	f8ad 300a 	strh.w	r3, [sp, #10]
 8020af4:	2200      	movs	r2, #0
 8020af6:	490c      	ldr	r1, [pc, #48]	; (8020b28 <_init+0x194>)
 8020af8:	4620      	mov	r0, r4
 8020afa:	f7fc f822 	bl	801cb42 <dwt_write16bitoffsetreg>
 8020afe:	f994 204d 	ldrsb.w	r2, [r4, #77]	; 0x4d
 8020b02:	fab2 f282 	clz	r2, r2
 8020b06:	0952      	lsrs	r2, r2, #5
 8020b08:	4639      	mov	r1, r7
 8020b0a:	4620      	mov	r0, r4
 8020b0c:	f7fd fb46 	bl	801e19c <ull_setgpiovalue>
 8020b10:	4630      	mov	r0, r6
 8020b12:	b005      	add	sp, #20
 8020b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020b16:	4620      	mov	r0, r4
 8020b18:	f7fc ff5a 	bl	801d9d0 <ull_configurestsloadiv>
 8020b1c:	e7c7      	b.n	8020aae <_init+0x11a>
 8020b1e:	bf00      	nop
 8020b20:	00090014 	.word	0x00090014
 8020b24:	01200492 	.word	0x01200492
 8020b28:	00050008 	.word	0x00050008

08020b2c <__errno>:
 8020b2c:	4b01      	ldr	r3, [pc, #4]	; (8020b34 <__errno+0x8>)
 8020b2e:	6818      	ldr	r0, [r3, #0]
 8020b30:	4770      	bx	lr
 8020b32:	bf00      	nop
 8020b34:	20000078 	.word	0x20000078

08020b38 <exit>:
 8020b38:	b508      	push	{r3, lr}
 8020b3a:	4b07      	ldr	r3, [pc, #28]	; (8020b58 <exit+0x20>)
 8020b3c:	4604      	mov	r4, r0
 8020b3e:	b113      	cbz	r3, 8020b46 <exit+0xe>
 8020b40:	2100      	movs	r1, #0
 8020b42:	f3af 8000 	nop.w
 8020b46:	4b05      	ldr	r3, [pc, #20]	; (8020b5c <exit+0x24>)
 8020b48:	6818      	ldr	r0, [r3, #0]
 8020b4a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8020b4c:	b103      	cbz	r3, 8020b50 <exit+0x18>
 8020b4e:	4798      	blx	r3
 8020b50:	4620      	mov	r0, r4
 8020b52:	f7e1 fa6a 	bl	800202a <_exit>
 8020b56:	bf00      	nop
 8020b58:	00000000 	.word	0x00000000
 8020b5c:	0802147c 	.word	0x0802147c

08020b60 <__libc_init_array>:
 8020b60:	b570      	push	{r4, r5, r6, lr}
 8020b62:	2600      	movs	r6, #0
 8020b64:	4d0c      	ldr	r5, [pc, #48]	; (8020b98 <__libc_init_array+0x38>)
 8020b66:	4c0d      	ldr	r4, [pc, #52]	; (8020b9c <__libc_init_array+0x3c>)
 8020b68:	1b64      	subs	r4, r4, r5
 8020b6a:	10a4      	asrs	r4, r4, #2
 8020b6c:	42a6      	cmp	r6, r4
 8020b6e:	d109      	bne.n	8020b84 <__libc_init_array+0x24>
 8020b70:	f000 f9a2 	bl	8020eb8 <_init>
 8020b74:	2600      	movs	r6, #0
 8020b76:	4d0a      	ldr	r5, [pc, #40]	; (8020ba0 <__libc_init_array+0x40>)
 8020b78:	4c0a      	ldr	r4, [pc, #40]	; (8020ba4 <__libc_init_array+0x44>)
 8020b7a:	1b64      	subs	r4, r4, r5
 8020b7c:	10a4      	asrs	r4, r4, #2
 8020b7e:	42a6      	cmp	r6, r4
 8020b80:	d105      	bne.n	8020b8e <__libc_init_array+0x2e>
 8020b82:	bd70      	pop	{r4, r5, r6, pc}
 8020b84:	f855 3b04 	ldr.w	r3, [r5], #4
 8020b88:	4798      	blx	r3
 8020b8a:	3601      	adds	r6, #1
 8020b8c:	e7ee      	b.n	8020b6c <__libc_init_array+0xc>
 8020b8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8020b92:	4798      	blx	r3
 8020b94:	3601      	adds	r6, #1
 8020b96:	e7f2      	b.n	8020b7e <__libc_init_array+0x1e>
 8020b98:	08021488 	.word	0x08021488
 8020b9c:	08021488 	.word	0x08021488
 8020ba0:	08021488 	.word	0x08021488
 8020ba4:	0802148c 	.word	0x0802148c

08020ba8 <malloc>:
 8020ba8:	4b02      	ldr	r3, [pc, #8]	; (8020bb4 <malloc+0xc>)
 8020baa:	4601      	mov	r1, r0
 8020bac:	6818      	ldr	r0, [r3, #0]
 8020bae:	f000 b87b 	b.w	8020ca8 <_malloc_r>
 8020bb2:	bf00      	nop
 8020bb4:	20000078 	.word	0x20000078

08020bb8 <free>:
 8020bb8:	4b02      	ldr	r3, [pc, #8]	; (8020bc4 <free+0xc>)
 8020bba:	4601      	mov	r1, r0
 8020bbc:	6818      	ldr	r0, [r3, #0]
 8020bbe:	f000 b80b 	b.w	8020bd8 <_free_r>
 8020bc2:	bf00      	nop
 8020bc4:	20000078 	.word	0x20000078

08020bc8 <memset>:
 8020bc8:	4603      	mov	r3, r0
 8020bca:	4402      	add	r2, r0
 8020bcc:	4293      	cmp	r3, r2
 8020bce:	d100      	bne.n	8020bd2 <memset+0xa>
 8020bd0:	4770      	bx	lr
 8020bd2:	f803 1b01 	strb.w	r1, [r3], #1
 8020bd6:	e7f9      	b.n	8020bcc <memset+0x4>

08020bd8 <_free_r>:
 8020bd8:	b538      	push	{r3, r4, r5, lr}
 8020bda:	4605      	mov	r5, r0
 8020bdc:	2900      	cmp	r1, #0
 8020bde:	d040      	beq.n	8020c62 <_free_r+0x8a>
 8020be0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020be4:	1f0c      	subs	r4, r1, #4
 8020be6:	2b00      	cmp	r3, #0
 8020be8:	bfb8      	it	lt
 8020bea:	18e4      	addlt	r4, r4, r3
 8020bec:	f000 f8e0 	bl	8020db0 <__malloc_lock>
 8020bf0:	4a1c      	ldr	r2, [pc, #112]	; (8020c64 <_free_r+0x8c>)
 8020bf2:	6813      	ldr	r3, [r2, #0]
 8020bf4:	b933      	cbnz	r3, 8020c04 <_free_r+0x2c>
 8020bf6:	6063      	str	r3, [r4, #4]
 8020bf8:	6014      	str	r4, [r2, #0]
 8020bfa:	4628      	mov	r0, r5
 8020bfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020c00:	f000 b8dc 	b.w	8020dbc <__malloc_unlock>
 8020c04:	42a3      	cmp	r3, r4
 8020c06:	d908      	bls.n	8020c1a <_free_r+0x42>
 8020c08:	6820      	ldr	r0, [r4, #0]
 8020c0a:	1821      	adds	r1, r4, r0
 8020c0c:	428b      	cmp	r3, r1
 8020c0e:	bf01      	itttt	eq
 8020c10:	6819      	ldreq	r1, [r3, #0]
 8020c12:	685b      	ldreq	r3, [r3, #4]
 8020c14:	1809      	addeq	r1, r1, r0
 8020c16:	6021      	streq	r1, [r4, #0]
 8020c18:	e7ed      	b.n	8020bf6 <_free_r+0x1e>
 8020c1a:	461a      	mov	r2, r3
 8020c1c:	685b      	ldr	r3, [r3, #4]
 8020c1e:	b10b      	cbz	r3, 8020c24 <_free_r+0x4c>
 8020c20:	42a3      	cmp	r3, r4
 8020c22:	d9fa      	bls.n	8020c1a <_free_r+0x42>
 8020c24:	6811      	ldr	r1, [r2, #0]
 8020c26:	1850      	adds	r0, r2, r1
 8020c28:	42a0      	cmp	r0, r4
 8020c2a:	d10b      	bne.n	8020c44 <_free_r+0x6c>
 8020c2c:	6820      	ldr	r0, [r4, #0]
 8020c2e:	4401      	add	r1, r0
 8020c30:	1850      	adds	r0, r2, r1
 8020c32:	4283      	cmp	r3, r0
 8020c34:	6011      	str	r1, [r2, #0]
 8020c36:	d1e0      	bne.n	8020bfa <_free_r+0x22>
 8020c38:	6818      	ldr	r0, [r3, #0]
 8020c3a:	685b      	ldr	r3, [r3, #4]
 8020c3c:	4401      	add	r1, r0
 8020c3e:	6011      	str	r1, [r2, #0]
 8020c40:	6053      	str	r3, [r2, #4]
 8020c42:	e7da      	b.n	8020bfa <_free_r+0x22>
 8020c44:	d902      	bls.n	8020c4c <_free_r+0x74>
 8020c46:	230c      	movs	r3, #12
 8020c48:	602b      	str	r3, [r5, #0]
 8020c4a:	e7d6      	b.n	8020bfa <_free_r+0x22>
 8020c4c:	6820      	ldr	r0, [r4, #0]
 8020c4e:	1821      	adds	r1, r4, r0
 8020c50:	428b      	cmp	r3, r1
 8020c52:	bf01      	itttt	eq
 8020c54:	6819      	ldreq	r1, [r3, #0]
 8020c56:	685b      	ldreq	r3, [r3, #4]
 8020c58:	1809      	addeq	r1, r1, r0
 8020c5a:	6021      	streq	r1, [r4, #0]
 8020c5c:	6063      	str	r3, [r4, #4]
 8020c5e:	6054      	str	r4, [r2, #4]
 8020c60:	e7cb      	b.n	8020bfa <_free_r+0x22>
 8020c62:	bd38      	pop	{r3, r4, r5, pc}
 8020c64:	200007b8 	.word	0x200007b8

08020c68 <sbrk_aligned>:
 8020c68:	b570      	push	{r4, r5, r6, lr}
 8020c6a:	4e0e      	ldr	r6, [pc, #56]	; (8020ca4 <sbrk_aligned+0x3c>)
 8020c6c:	460c      	mov	r4, r1
 8020c6e:	6831      	ldr	r1, [r6, #0]
 8020c70:	4605      	mov	r5, r0
 8020c72:	b911      	cbnz	r1, 8020c7a <sbrk_aligned+0x12>
 8020c74:	f000 f88c 	bl	8020d90 <_sbrk_r>
 8020c78:	6030      	str	r0, [r6, #0]
 8020c7a:	4621      	mov	r1, r4
 8020c7c:	4628      	mov	r0, r5
 8020c7e:	f000 f887 	bl	8020d90 <_sbrk_r>
 8020c82:	1c43      	adds	r3, r0, #1
 8020c84:	d00a      	beq.n	8020c9c <sbrk_aligned+0x34>
 8020c86:	1cc4      	adds	r4, r0, #3
 8020c88:	f024 0403 	bic.w	r4, r4, #3
 8020c8c:	42a0      	cmp	r0, r4
 8020c8e:	d007      	beq.n	8020ca0 <sbrk_aligned+0x38>
 8020c90:	1a21      	subs	r1, r4, r0
 8020c92:	4628      	mov	r0, r5
 8020c94:	f000 f87c 	bl	8020d90 <_sbrk_r>
 8020c98:	3001      	adds	r0, #1
 8020c9a:	d101      	bne.n	8020ca0 <sbrk_aligned+0x38>
 8020c9c:	f04f 34ff 	mov.w	r4, #4294967295
 8020ca0:	4620      	mov	r0, r4
 8020ca2:	bd70      	pop	{r4, r5, r6, pc}
 8020ca4:	200007bc 	.word	0x200007bc

08020ca8 <_malloc_r>:
 8020ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020cac:	1ccd      	adds	r5, r1, #3
 8020cae:	f025 0503 	bic.w	r5, r5, #3
 8020cb2:	3508      	adds	r5, #8
 8020cb4:	2d0c      	cmp	r5, #12
 8020cb6:	bf38      	it	cc
 8020cb8:	250c      	movcc	r5, #12
 8020cba:	2d00      	cmp	r5, #0
 8020cbc:	4607      	mov	r7, r0
 8020cbe:	db01      	blt.n	8020cc4 <_malloc_r+0x1c>
 8020cc0:	42a9      	cmp	r1, r5
 8020cc2:	d905      	bls.n	8020cd0 <_malloc_r+0x28>
 8020cc4:	230c      	movs	r3, #12
 8020cc6:	2600      	movs	r6, #0
 8020cc8:	603b      	str	r3, [r7, #0]
 8020cca:	4630      	mov	r0, r6
 8020ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020cd0:	4e2e      	ldr	r6, [pc, #184]	; (8020d8c <_malloc_r+0xe4>)
 8020cd2:	f000 f86d 	bl	8020db0 <__malloc_lock>
 8020cd6:	6833      	ldr	r3, [r6, #0]
 8020cd8:	461c      	mov	r4, r3
 8020cda:	bb34      	cbnz	r4, 8020d2a <_malloc_r+0x82>
 8020cdc:	4629      	mov	r1, r5
 8020cde:	4638      	mov	r0, r7
 8020ce0:	f7ff ffc2 	bl	8020c68 <sbrk_aligned>
 8020ce4:	1c43      	adds	r3, r0, #1
 8020ce6:	4604      	mov	r4, r0
 8020ce8:	d14d      	bne.n	8020d86 <_malloc_r+0xde>
 8020cea:	6834      	ldr	r4, [r6, #0]
 8020cec:	4626      	mov	r6, r4
 8020cee:	2e00      	cmp	r6, #0
 8020cf0:	d140      	bne.n	8020d74 <_malloc_r+0xcc>
 8020cf2:	6823      	ldr	r3, [r4, #0]
 8020cf4:	4631      	mov	r1, r6
 8020cf6:	4638      	mov	r0, r7
 8020cf8:	eb04 0803 	add.w	r8, r4, r3
 8020cfc:	f000 f848 	bl	8020d90 <_sbrk_r>
 8020d00:	4580      	cmp	r8, r0
 8020d02:	d13a      	bne.n	8020d7a <_malloc_r+0xd2>
 8020d04:	6821      	ldr	r1, [r4, #0]
 8020d06:	3503      	adds	r5, #3
 8020d08:	1a6d      	subs	r5, r5, r1
 8020d0a:	f025 0503 	bic.w	r5, r5, #3
 8020d0e:	3508      	adds	r5, #8
 8020d10:	2d0c      	cmp	r5, #12
 8020d12:	bf38      	it	cc
 8020d14:	250c      	movcc	r5, #12
 8020d16:	4638      	mov	r0, r7
 8020d18:	4629      	mov	r1, r5
 8020d1a:	f7ff ffa5 	bl	8020c68 <sbrk_aligned>
 8020d1e:	3001      	adds	r0, #1
 8020d20:	d02b      	beq.n	8020d7a <_malloc_r+0xd2>
 8020d22:	6823      	ldr	r3, [r4, #0]
 8020d24:	442b      	add	r3, r5
 8020d26:	6023      	str	r3, [r4, #0]
 8020d28:	e00e      	b.n	8020d48 <_malloc_r+0xa0>
 8020d2a:	6822      	ldr	r2, [r4, #0]
 8020d2c:	1b52      	subs	r2, r2, r5
 8020d2e:	d41e      	bmi.n	8020d6e <_malloc_r+0xc6>
 8020d30:	2a0b      	cmp	r2, #11
 8020d32:	d916      	bls.n	8020d62 <_malloc_r+0xba>
 8020d34:	1961      	adds	r1, r4, r5
 8020d36:	42a3      	cmp	r3, r4
 8020d38:	6025      	str	r5, [r4, #0]
 8020d3a:	bf18      	it	ne
 8020d3c:	6059      	strne	r1, [r3, #4]
 8020d3e:	6863      	ldr	r3, [r4, #4]
 8020d40:	bf08      	it	eq
 8020d42:	6031      	streq	r1, [r6, #0]
 8020d44:	5162      	str	r2, [r4, r5]
 8020d46:	604b      	str	r3, [r1, #4]
 8020d48:	4638      	mov	r0, r7
 8020d4a:	f104 060b 	add.w	r6, r4, #11
 8020d4e:	f000 f835 	bl	8020dbc <__malloc_unlock>
 8020d52:	f026 0607 	bic.w	r6, r6, #7
 8020d56:	1d23      	adds	r3, r4, #4
 8020d58:	1af2      	subs	r2, r6, r3
 8020d5a:	d0b6      	beq.n	8020cca <_malloc_r+0x22>
 8020d5c:	1b9b      	subs	r3, r3, r6
 8020d5e:	50a3      	str	r3, [r4, r2]
 8020d60:	e7b3      	b.n	8020cca <_malloc_r+0x22>
 8020d62:	6862      	ldr	r2, [r4, #4]
 8020d64:	42a3      	cmp	r3, r4
 8020d66:	bf0c      	ite	eq
 8020d68:	6032      	streq	r2, [r6, #0]
 8020d6a:	605a      	strne	r2, [r3, #4]
 8020d6c:	e7ec      	b.n	8020d48 <_malloc_r+0xa0>
 8020d6e:	4623      	mov	r3, r4
 8020d70:	6864      	ldr	r4, [r4, #4]
 8020d72:	e7b2      	b.n	8020cda <_malloc_r+0x32>
 8020d74:	4634      	mov	r4, r6
 8020d76:	6876      	ldr	r6, [r6, #4]
 8020d78:	e7b9      	b.n	8020cee <_malloc_r+0x46>
 8020d7a:	230c      	movs	r3, #12
 8020d7c:	4638      	mov	r0, r7
 8020d7e:	603b      	str	r3, [r7, #0]
 8020d80:	f000 f81c 	bl	8020dbc <__malloc_unlock>
 8020d84:	e7a1      	b.n	8020cca <_malloc_r+0x22>
 8020d86:	6025      	str	r5, [r4, #0]
 8020d88:	e7de      	b.n	8020d48 <_malloc_r+0xa0>
 8020d8a:	bf00      	nop
 8020d8c:	200007b8 	.word	0x200007b8

08020d90 <_sbrk_r>:
 8020d90:	b538      	push	{r3, r4, r5, lr}
 8020d92:	2300      	movs	r3, #0
 8020d94:	4d05      	ldr	r5, [pc, #20]	; (8020dac <_sbrk_r+0x1c>)
 8020d96:	4604      	mov	r4, r0
 8020d98:	4608      	mov	r0, r1
 8020d9a:	602b      	str	r3, [r5, #0]
 8020d9c:	f7e1 fa2a 	bl	80021f4 <_sbrk>
 8020da0:	1c43      	adds	r3, r0, #1
 8020da2:	d102      	bne.n	8020daa <_sbrk_r+0x1a>
 8020da4:	682b      	ldr	r3, [r5, #0]
 8020da6:	b103      	cbz	r3, 8020daa <_sbrk_r+0x1a>
 8020da8:	6023      	str	r3, [r4, #0]
 8020daa:	bd38      	pop	{r3, r4, r5, pc}
 8020dac:	200007c0 	.word	0x200007c0

08020db0 <__malloc_lock>:
 8020db0:	4801      	ldr	r0, [pc, #4]	; (8020db8 <__malloc_lock+0x8>)
 8020db2:	f000 b878 	b.w	8020ea6 <__retarget_lock_acquire_recursive>
 8020db6:	bf00      	nop
 8020db8:	200007c9 	.word	0x200007c9

08020dbc <__malloc_unlock>:
 8020dbc:	4801      	ldr	r0, [pc, #4]	; (8020dc4 <__malloc_unlock+0x8>)
 8020dbe:	f000 b878 	b.w	8020eb2 <__retarget_lock_release_recursive>
 8020dc2:	bf00      	nop
 8020dc4:	200007c9 	.word	0x200007c9

08020dc8 <cleanup_glue>:
 8020dc8:	b538      	push	{r3, r4, r5, lr}
 8020dca:	460c      	mov	r4, r1
 8020dcc:	6809      	ldr	r1, [r1, #0]
 8020dce:	4605      	mov	r5, r0
 8020dd0:	b109      	cbz	r1, 8020dd6 <cleanup_glue+0xe>
 8020dd2:	f7ff fff9 	bl	8020dc8 <cleanup_glue>
 8020dd6:	4621      	mov	r1, r4
 8020dd8:	4628      	mov	r0, r5
 8020dda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020dde:	f7ff befb 	b.w	8020bd8 <_free_r>
	...

08020de4 <_reclaim_reent>:
 8020de4:	4b2c      	ldr	r3, [pc, #176]	; (8020e98 <_reclaim_reent+0xb4>)
 8020de6:	b570      	push	{r4, r5, r6, lr}
 8020de8:	681b      	ldr	r3, [r3, #0]
 8020dea:	4604      	mov	r4, r0
 8020dec:	4283      	cmp	r3, r0
 8020dee:	d051      	beq.n	8020e94 <_reclaim_reent+0xb0>
 8020df0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8020df2:	b143      	cbz	r3, 8020e06 <_reclaim_reent+0x22>
 8020df4:	68db      	ldr	r3, [r3, #12]
 8020df6:	2b00      	cmp	r3, #0
 8020df8:	d14a      	bne.n	8020e90 <_reclaim_reent+0xac>
 8020dfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020dfc:	6819      	ldr	r1, [r3, #0]
 8020dfe:	b111      	cbz	r1, 8020e06 <_reclaim_reent+0x22>
 8020e00:	4620      	mov	r0, r4
 8020e02:	f7ff fee9 	bl	8020bd8 <_free_r>
 8020e06:	6961      	ldr	r1, [r4, #20]
 8020e08:	b111      	cbz	r1, 8020e10 <_reclaim_reent+0x2c>
 8020e0a:	4620      	mov	r0, r4
 8020e0c:	f7ff fee4 	bl	8020bd8 <_free_r>
 8020e10:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8020e12:	b111      	cbz	r1, 8020e1a <_reclaim_reent+0x36>
 8020e14:	4620      	mov	r0, r4
 8020e16:	f7ff fedf 	bl	8020bd8 <_free_r>
 8020e1a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8020e1c:	b111      	cbz	r1, 8020e24 <_reclaim_reent+0x40>
 8020e1e:	4620      	mov	r0, r4
 8020e20:	f7ff feda 	bl	8020bd8 <_free_r>
 8020e24:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8020e26:	b111      	cbz	r1, 8020e2e <_reclaim_reent+0x4a>
 8020e28:	4620      	mov	r0, r4
 8020e2a:	f7ff fed5 	bl	8020bd8 <_free_r>
 8020e2e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8020e30:	b111      	cbz	r1, 8020e38 <_reclaim_reent+0x54>
 8020e32:	4620      	mov	r0, r4
 8020e34:	f7ff fed0 	bl	8020bd8 <_free_r>
 8020e38:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8020e3a:	b111      	cbz	r1, 8020e42 <_reclaim_reent+0x5e>
 8020e3c:	4620      	mov	r0, r4
 8020e3e:	f7ff fecb 	bl	8020bd8 <_free_r>
 8020e42:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8020e44:	b111      	cbz	r1, 8020e4c <_reclaim_reent+0x68>
 8020e46:	4620      	mov	r0, r4
 8020e48:	f7ff fec6 	bl	8020bd8 <_free_r>
 8020e4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020e4e:	b111      	cbz	r1, 8020e56 <_reclaim_reent+0x72>
 8020e50:	4620      	mov	r0, r4
 8020e52:	f7ff fec1 	bl	8020bd8 <_free_r>
 8020e56:	69a3      	ldr	r3, [r4, #24]
 8020e58:	b1e3      	cbz	r3, 8020e94 <_reclaim_reent+0xb0>
 8020e5a:	4620      	mov	r0, r4
 8020e5c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8020e5e:	4798      	blx	r3
 8020e60:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8020e62:	b1b9      	cbz	r1, 8020e94 <_reclaim_reent+0xb0>
 8020e64:	4620      	mov	r0, r4
 8020e66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8020e6a:	f7ff bfad 	b.w	8020dc8 <cleanup_glue>
 8020e6e:	5949      	ldr	r1, [r1, r5]
 8020e70:	b941      	cbnz	r1, 8020e84 <_reclaim_reent+0xa0>
 8020e72:	3504      	adds	r5, #4
 8020e74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020e76:	2d80      	cmp	r5, #128	; 0x80
 8020e78:	68d9      	ldr	r1, [r3, #12]
 8020e7a:	d1f8      	bne.n	8020e6e <_reclaim_reent+0x8a>
 8020e7c:	4620      	mov	r0, r4
 8020e7e:	f7ff feab 	bl	8020bd8 <_free_r>
 8020e82:	e7ba      	b.n	8020dfa <_reclaim_reent+0x16>
 8020e84:	680e      	ldr	r6, [r1, #0]
 8020e86:	4620      	mov	r0, r4
 8020e88:	f7ff fea6 	bl	8020bd8 <_free_r>
 8020e8c:	4631      	mov	r1, r6
 8020e8e:	e7ef      	b.n	8020e70 <_reclaim_reent+0x8c>
 8020e90:	2500      	movs	r5, #0
 8020e92:	e7ef      	b.n	8020e74 <_reclaim_reent+0x90>
 8020e94:	bd70      	pop	{r4, r5, r6, pc}
 8020e96:	bf00      	nop
 8020e98:	20000078 	.word	0x20000078

08020e9c <__retarget_lock_init>:
 8020e9c:	4770      	bx	lr

08020e9e <__retarget_lock_init_recursive>:
 8020e9e:	4770      	bx	lr

08020ea0 <__retarget_lock_close>:
 8020ea0:	4770      	bx	lr

08020ea2 <__retarget_lock_close_recursive>:
 8020ea2:	4770      	bx	lr

08020ea4 <__retarget_lock_acquire>:
 8020ea4:	4770      	bx	lr

08020ea6 <__retarget_lock_acquire_recursive>:
 8020ea6:	4770      	bx	lr

08020ea8 <__retarget_lock_try_acquire>:
 8020ea8:	2001      	movs	r0, #1
 8020eaa:	4770      	bx	lr

08020eac <__retarget_lock_try_acquire_recursive>:
 8020eac:	2001      	movs	r0, #1
 8020eae:	4770      	bx	lr

08020eb0 <__retarget_lock_release>:
 8020eb0:	4770      	bx	lr

08020eb2 <__retarget_lock_release_recursive>:
 8020eb2:	4770      	bx	lr

08020eb4 <__EH_FRAME_BEGIN__>:
 8020eb4:	0000 0000                                   ....

08020eb8 <_init>:
 8020eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020eba:	bf00      	nop
 8020ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020ebe:	bc08      	pop	{r3}
 8020ec0:	469e      	mov	lr, r3
 8020ec2:	4770      	bx	lr

08020ec4 <_fini>:
 8020ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020ec6:	bf00      	nop
 8020ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020eca:	bc08      	pop	{r3}
 8020ecc:	469e      	mov	lr, r3
 8020ece:	4770      	bx	lr

08020ed0 <dw3000_driver>:
 8020ed0:	0312 deca ff0f ffff 121c 0802 1224 0802     ............$...
 8020ee0:	1158 0802 111c 0802 0007 0006               X...........

08020eec <dw3700_driver>:
 8020eec:	0313 deca ff0f ffff 121c 0802 1224 0802     ............$...
 8020efc:	1298 0802 125c 0802 0007 0006               ....\.......

08020f08 <dw3720_driver>:
 8020f08:	0314 deca ff0f ffff 121c 0802 1224 0802     ............$...
 8020f18:	13a8 0802 136c 0802 0007 0006               ....l.......

Disassembly of section .data:

20000000 <__dso_handle>:
20000000:	0000 0000                                   ....

20000004 <txconfig_options>:
20000004:	fd34 fdfd 00fd 0000                         4.......

2000000c <txconfig_options_ch9>:
2000000c:	fe34 fefe 00fe 0000                         4.......

20000014 <config_options>:
20000014:	0505 0900 0309 0001 8100 0100 0002 0000     ................

20000024 <config_option_sp3>:
20000024:	0505 0900 0309 0001 8100 0300 0002 0000     ................

20000034 <config_option_sp0>:
20000034:	0505 0900 0309 0001 8100 0000 0002 0000     ................

20000044 <hcurrent_active_spi>:
20000044:	069c 2000                                   ... 

20000048 <pin_io_active_spi>:
20000048:	0010 0000                                   ....

2000004c <config>:
2000004c:	0505 0900 0109 0001 8100 0000 0001 0000     ................

2000005c <tx_msg>:
2000005c:	00c5 4544 4143 4157 4556 0000               ..DECAWAVE..

20000068 <environ>:
20000068:	06f4 2000                                   ... 

2000006c <SystemCoreClock>:
2000006c:	ff68 001f                                   h...

20000070 <uwTickPrio>:
20000070:	0010 0000                                   ....

20000074 <uwTickFreq>:
20000074:	0001 0000                                   ....

20000078 <_impure_ptr>:
20000078:	007c 2000                                   |.. 

2000007c <impure_data>:
	...

200000dc <HAL_FLASHEx_EnableRunPowerDown>:
  * @brief  Enable  the power down mode during RUN mode.
  * @note  This function can be used only when the user code is running from Internal SRAM.
  * @retval HAL status
  */
__RAM_FUNC HAL_StatusTypeDef HAL_FLASHEx_EnableRunPowerDown(void)
{
200000dc:	b480      	push	{r7}
200000de:	af00      	add	r7, sp, #0
  /* Enable the Power Down in Run mode*/
  __HAL_FLASH_POWER_DOWN_ENABLE();
200000e0:	4b08      	ldr	r3, [pc, #32]	; (20000104 <HAL_FLASHEx_EnableRunPowerDown+0x28>)
200000e2:	4a09      	ldr	r2, [pc, #36]	; (20000108 <HAL_FLASHEx_EnableRunPowerDown+0x2c>)
200000e4:	609a      	str	r2, [r3, #8]
200000e6:	4b07      	ldr	r3, [pc, #28]	; (20000104 <HAL_FLASHEx_EnableRunPowerDown+0x28>)
200000e8:	4a08      	ldr	r2, [pc, #32]	; (2000010c <HAL_FLASHEx_EnableRunPowerDown+0x30>)
200000ea:	609a      	str	r2, [r3, #8]
200000ec:	4b05      	ldr	r3, [pc, #20]	; (20000104 <HAL_FLASHEx_EnableRunPowerDown+0x28>)
200000ee:	681b      	ldr	r3, [r3, #0]
200000f0:	4a04      	ldr	r2, [pc, #16]	; (20000104 <HAL_FLASHEx_EnableRunPowerDown+0x28>)
200000f2:	f043 0310 	orr.w	r3, r3, #16
200000f6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
200000f8:	2300      	movs	r3, #0
}
200000fa:	4618      	mov	r0, r3
200000fc:	46bd      	mov	sp, r7
200000fe:	bc80      	pop	{r7}
20000100:	4770      	bx	lr
20000102:	bf00      	nop
20000104:	40023c00 	.word	0x40023c00
20000108:	04152637 	.word	0x04152637
2000010c:	fafbfcfd 	.word	0xfafbfcfd

20000110 <HAL_FLASHEx_DisableRunPowerDown>:
  * @brief  Disable the power down mode during RUN mode.
  * @note  This function can be used only when the user code is running from Internal SRAM.
  * @retval HAL status
  */
__RAM_FUNC HAL_StatusTypeDef HAL_FLASHEx_DisableRunPowerDown(void)
{
20000110:	b480      	push	{r7}
20000112:	af00      	add	r7, sp, #0
  /* Disable the Power Down in Run mode*/
  __HAL_FLASH_POWER_DOWN_DISABLE();
20000114:	4b08      	ldr	r3, [pc, #32]	; (20000138 <HAL_FLASHEx_DisableRunPowerDown+0x28>)
20000116:	4a09      	ldr	r2, [pc, #36]	; (2000013c <HAL_FLASHEx_DisableRunPowerDown+0x2c>)
20000118:	609a      	str	r2, [r3, #8]
2000011a:	4b07      	ldr	r3, [pc, #28]	; (20000138 <HAL_FLASHEx_DisableRunPowerDown+0x28>)
2000011c:	4a08      	ldr	r2, [pc, #32]	; (20000140 <HAL_FLASHEx_DisableRunPowerDown+0x30>)
2000011e:	609a      	str	r2, [r3, #8]
20000120:	4b05      	ldr	r3, [pc, #20]	; (20000138 <HAL_FLASHEx_DisableRunPowerDown+0x28>)
20000122:	681b      	ldr	r3, [r3, #0]
20000124:	4a04      	ldr	r2, [pc, #16]	; (20000138 <HAL_FLASHEx_DisableRunPowerDown+0x28>)
20000126:	f023 0310 	bic.w	r3, r3, #16
2000012a:	6013      	str	r3, [r2, #0]

  return HAL_OK;  
2000012c:	2300      	movs	r3, #0
}
2000012e:	4618      	mov	r0, r3
20000130:	46bd      	mov	sp, r7
20000132:	bc80      	pop	{r7}
20000134:	4770      	bx	lr
20000136:	bf00      	nop
20000138:	40023c00 	.word	0x40023c00
2000013c:	04152637 	.word	0x04152637
20000140:	fafbfcfd 	.word	0xfafbfcfd

20000144 <HAL_FLASHEx_EraseParallelPage>:
  * @note   A Page is erased in the Program memory only if the address to load 
  *         is the start address of a page (multiple of @ref FLASH_PAGE_SIZE bytes).
  * @retval HAL status
  */
__RAM_FUNC HAL_StatusTypeDef HAL_FLASHEx_EraseParallelPage(uint32_t Page_Address1, uint32_t Page_Address2)
{
20000144:	b580      	push	{r7, lr}
20000146:	b084      	sub	sp, #16
20000148:	af00      	add	r7, sp, #0
2000014a:	6078      	str	r0, [r7, #4]
2000014c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
2000014e:	2300      	movs	r3, #0
20000150:	73fb      	strb	r3, [r7, #15]

  /* Wait for last operation to be completed */
  status = FLASHRAM_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
20000152:	f24c 3050 	movw	r0, #50000	; 0xc350
20000156:	f000 f9bf 	bl	200004d8 <FLASHRAM_WaitForLastOperation>
2000015a:	4603      	mov	r3, r0
2000015c:	73fb      	strb	r3, [r7, #15]
  
  if(status == HAL_OK)
2000015e:	7bfb      	ldrb	r3, [r7, #15]
20000160:	2b00      	cmp	r3, #0
20000162:	d12f      	bne.n	200001c4 <HAL_FLASHEx_EraseParallelPage+0x80>
  {
    /* Proceed to erase the page */
    SET_BIT(FLASH->PECR, FLASH_PECR_PARALLBANK);
20000164:	4b1a      	ldr	r3, [pc, #104]	; (200001d0 <HAL_FLASHEx_EraseParallelPage+0x8c>)
20000166:	685b      	ldr	r3, [r3, #4]
20000168:	4a19      	ldr	r2, [pc, #100]	; (200001d0 <HAL_FLASHEx_EraseParallelPage+0x8c>)
2000016a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
2000016e:	6053      	str	r3, [r2, #4]
    SET_BIT(FLASH->PECR, FLASH_PECR_ERASE);
20000170:	4b17      	ldr	r3, [pc, #92]	; (200001d0 <HAL_FLASHEx_EraseParallelPage+0x8c>)
20000172:	685b      	ldr	r3, [r3, #4]
20000174:	4a16      	ldr	r2, [pc, #88]	; (200001d0 <HAL_FLASHEx_EraseParallelPage+0x8c>)
20000176:	f443 7300 	orr.w	r3, r3, #512	; 0x200
2000017a:	6053      	str	r3, [r2, #4]
    SET_BIT(FLASH->PECR, FLASH_PECR_PROG);
2000017c:	4b14      	ldr	r3, [pc, #80]	; (200001d0 <HAL_FLASHEx_EraseParallelPage+0x8c>)
2000017e:	685b      	ldr	r3, [r3, #4]
20000180:	4a13      	ldr	r2, [pc, #76]	; (200001d0 <HAL_FLASHEx_EraseParallelPage+0x8c>)
20000182:	f043 0308 	orr.w	r3, r3, #8
20000186:	6053      	str	r3, [r2, #4]
  
    /* Write 00000000h to the first word of the first program page to erase */
    *(__IO uint32_t *)Page_Address1 = 0x00000000U;
20000188:	687b      	ldr	r3, [r7, #4]
2000018a:	2200      	movs	r2, #0
2000018c:	601a      	str	r2, [r3, #0]
    /* Write 00000000h to the first word of the second program page to erase */    
    *(__IO uint32_t *)Page_Address2 = 0x00000000U;
2000018e:	683b      	ldr	r3, [r7, #0]
20000190:	2200      	movs	r2, #0
20000192:	601a      	str	r2, [r3, #0]
 
    /* Wait for last operation to be completed */
    status = FLASHRAM_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
20000194:	f24c 3050 	movw	r0, #50000	; 0xc350
20000198:	f000 f99e 	bl	200004d8 <FLASHRAM_WaitForLastOperation>
2000019c:	4603      	mov	r3, r0
2000019e:	73fb      	strb	r3, [r7, #15]

    /* If the erase operation is completed, disable the ERASE, PROG and PARALLBANK bits */
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_PROG);
200001a0:	4b0b      	ldr	r3, [pc, #44]	; (200001d0 <HAL_FLASHEx_EraseParallelPage+0x8c>)
200001a2:	685b      	ldr	r3, [r3, #4]
200001a4:	4a0a      	ldr	r2, [pc, #40]	; (200001d0 <HAL_FLASHEx_EraseParallelPage+0x8c>)
200001a6:	f023 0308 	bic.w	r3, r3, #8
200001aa:	6053      	str	r3, [r2, #4]
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_ERASE);
200001ac:	4b08      	ldr	r3, [pc, #32]	; (200001d0 <HAL_FLASHEx_EraseParallelPage+0x8c>)
200001ae:	685b      	ldr	r3, [r3, #4]
200001b0:	4a07      	ldr	r2, [pc, #28]	; (200001d0 <HAL_FLASHEx_EraseParallelPage+0x8c>)
200001b2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
200001b6:	6053      	str	r3, [r2, #4]
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_PARALLBANK);
200001b8:	4b05      	ldr	r3, [pc, #20]	; (200001d0 <HAL_FLASHEx_EraseParallelPage+0x8c>)
200001ba:	685b      	ldr	r3, [r3, #4]
200001bc:	4a04      	ldr	r2, [pc, #16]	; (200001d0 <HAL_FLASHEx_EraseParallelPage+0x8c>)
200001be:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
200001c2:	6053      	str	r3, [r2, #4]
  }     
  /* Return the Erase Status */
  return status;
200001c4:	7bfb      	ldrb	r3, [r7, #15]
}
200001c6:	4618      	mov	r0, r3
200001c8:	3710      	adds	r7, #16
200001ca:	46bd      	mov	sp, r7
200001cc:	bd80      	pop	{r7, pc}
200001ce:	bf00      	nop
200001d0:	40023c00 	.word	0x40023c00

200001d4 <HAL_FLASHEx_ProgramParallelHalfPage>:
  *         FPRG and PROG/DATA bits and restart the write operation from the 
  *         beginning.
  * @retval HAL status
  */
__RAM_FUNC HAL_StatusTypeDef HAL_FLASHEx_ProgramParallelHalfPage(uint32_t Address1, uint32_t* pBuffer1, uint32_t Address2, uint32_t* pBuffer2)
{
200001d4:	b580      	push	{r7, lr}
200001d6:	b08a      	sub	sp, #40	; 0x28
200001d8:	af00      	add	r7, sp, #0
200001da:	60f8      	str	r0, [r7, #12]
200001dc:	60b9      	str	r1, [r7, #8]
200001de:	607a      	str	r2, [r7, #4]
200001e0:	603b      	str	r3, [r7, #0]
  uint32_t primask_bit;
  uint32_t count = 0U; 
200001e2:	2300      	movs	r3, #0
200001e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef status = HAL_OK;
200001e6:	2300      	movs	r3, #0
200001e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Wait for last operation to be completed */
  status = FLASHRAM_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
200001ec:	f24c 3050 	movw	r0, #50000	; 0xc350
200001f0:	f000 f972 	bl	200004d8 <FLASHRAM_WaitForLastOperation>
200001f4:	4603      	mov	r3, r0
200001f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  
  if(status == HAL_OK)
200001fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
200001fe:	2b00      	cmp	r3, #0
20000200:	d15d      	bne.n	200002be <HAL_FLASHEx_ProgramParallelHalfPage+0xea>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
20000202:	f3ef 8310 	mrs	r3, PRIMASK
20000206:	61bb      	str	r3, [r7, #24]
  return(result);
20000208:	69bb      	ldr	r3, [r7, #24]
  {
    /* Disable all IRQs */
    primask_bit = __get_PRIMASK();
2000020a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
2000020c:	b672      	cpsid	i
}
2000020e:	bf00      	nop
    __disable_irq();
    
    /* Proceed to program the new half page */
    SET_BIT(FLASH->PECR, FLASH_PECR_PARALLBANK);
20000210:	4b2e      	ldr	r3, [pc, #184]	; (200002cc <HAL_FLASHEx_ProgramParallelHalfPage+0xf8>)
20000212:	685b      	ldr	r3, [r3, #4]
20000214:	4a2d      	ldr	r2, [pc, #180]	; (200002cc <HAL_FLASHEx_ProgramParallelHalfPage+0xf8>)
20000216:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
2000021a:	6053      	str	r3, [r2, #4]
    SET_BIT(FLASH->PECR, FLASH_PECR_FPRG);
2000021c:	4b2b      	ldr	r3, [pc, #172]	; (200002cc <HAL_FLASHEx_ProgramParallelHalfPage+0xf8>)
2000021e:	685b      	ldr	r3, [r3, #4]
20000220:	4a2a      	ldr	r2, [pc, #168]	; (200002cc <HAL_FLASHEx_ProgramParallelHalfPage+0xf8>)
20000222:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
20000226:	6053      	str	r3, [r2, #4]
    SET_BIT(FLASH->PECR, FLASH_PECR_PROG);
20000228:	4b28      	ldr	r3, [pc, #160]	; (200002cc <HAL_FLASHEx_ProgramParallelHalfPage+0xf8>)
2000022a:	685b      	ldr	r3, [r3, #4]
2000022c:	4a27      	ldr	r2, [pc, #156]	; (200002cc <HAL_FLASHEx_ProgramParallelHalfPage+0xf8>)
2000022e:	f043 0308 	orr.w	r3, r3, #8
20000232:	6053      	str	r3, [r2, #4]

    /* Write the first half page directly with 32 different words */
    while(count < 32U)
20000234:	e00d      	b.n	20000252 <HAL_FLASHEx_ProgramParallelHalfPage+0x7e>
    {
      *(__IO uint32_t*) ((uint32_t)(Address1 + (4 * count))) = *pBuffer1;
20000236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000238:	009a      	lsls	r2, r3, #2
2000023a:	68fb      	ldr	r3, [r7, #12]
2000023c:	4413      	add	r3, r2
2000023e:	461a      	mov	r2, r3
20000240:	68bb      	ldr	r3, [r7, #8]
20000242:	681b      	ldr	r3, [r3, #0]
20000244:	6013      	str	r3, [r2, #0]
      pBuffer1++;
20000246:	68bb      	ldr	r3, [r7, #8]
20000248:	3304      	adds	r3, #4
2000024a:	60bb      	str	r3, [r7, #8]
      count ++;  
2000024c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000024e:	3301      	adds	r3, #1
20000250:	627b      	str	r3, [r7, #36]	; 0x24
    while(count < 32U)
20000252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000254:	2b1f      	cmp	r3, #31
20000256:	d9ee      	bls.n	20000236 <HAL_FLASHEx_ProgramParallelHalfPage+0x62>
    }
    
    /* Write the second half page directly with 32 different words */
    count = 0U;
20000258:	2300      	movs	r3, #0
2000025a:	627b      	str	r3, [r7, #36]	; 0x24
    while(count < 32U)
2000025c:	e00d      	b.n	2000027a <HAL_FLASHEx_ProgramParallelHalfPage+0xa6>
    {
      *(__IO uint32_t*) ((uint32_t)(Address2 + (4 * count))) = *pBuffer2;
2000025e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000260:	009a      	lsls	r2, r3, #2
20000262:	687b      	ldr	r3, [r7, #4]
20000264:	4413      	add	r3, r2
20000266:	461a      	mov	r2, r3
20000268:	683b      	ldr	r3, [r7, #0]
2000026a:	681b      	ldr	r3, [r3, #0]
2000026c:	6013      	str	r3, [r2, #0]
      pBuffer2++;
2000026e:	683b      	ldr	r3, [r7, #0]
20000270:	3304      	adds	r3, #4
20000272:	603b      	str	r3, [r7, #0]
      count ++;  
20000274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000276:	3301      	adds	r3, #1
20000278:	627b      	str	r3, [r7, #36]	; 0x24
    while(count < 32U)
2000027a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000027c:	2b1f      	cmp	r3, #31
2000027e:	d9ee      	bls.n	2000025e <HAL_FLASHEx_ProgramParallelHalfPage+0x8a>
    }
    
    /* Wait for last operation to be completed */
    status = FLASHRAM_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
20000280:	f24c 3050 	movw	r0, #50000	; 0xc350
20000284:	f000 f928 	bl	200004d8 <FLASHRAM_WaitForLastOperation>
20000288:	4603      	mov	r3, r0
2000028a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    
    /* if the write operation is completed, disable the PROG, FPRG and PARALLBANK bits */
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_PROG);
2000028e:	4b0f      	ldr	r3, [pc, #60]	; (200002cc <HAL_FLASHEx_ProgramParallelHalfPage+0xf8>)
20000290:	685b      	ldr	r3, [r3, #4]
20000292:	4a0e      	ldr	r2, [pc, #56]	; (200002cc <HAL_FLASHEx_ProgramParallelHalfPage+0xf8>)
20000294:	f023 0308 	bic.w	r3, r3, #8
20000298:	6053      	str	r3, [r2, #4]
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FPRG);
2000029a:	4b0c      	ldr	r3, [pc, #48]	; (200002cc <HAL_FLASHEx_ProgramParallelHalfPage+0xf8>)
2000029c:	685b      	ldr	r3, [r3, #4]
2000029e:	4a0b      	ldr	r2, [pc, #44]	; (200002cc <HAL_FLASHEx_ProgramParallelHalfPage+0xf8>)
200002a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
200002a4:	6053      	str	r3, [r2, #4]
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_PARALLBANK);
200002a6:	4b09      	ldr	r3, [pc, #36]	; (200002cc <HAL_FLASHEx_ProgramParallelHalfPage+0xf8>)
200002a8:	685b      	ldr	r3, [r3, #4]
200002aa:	4a08      	ldr	r2, [pc, #32]	; (200002cc <HAL_FLASHEx_ProgramParallelHalfPage+0xf8>)
200002ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
200002b0:	6053      	str	r3, [r2, #4]
200002b2:	69fb      	ldr	r3, [r7, #28]
200002b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200002b6:	697b      	ldr	r3, [r7, #20]
200002b8:	f383 8810 	msr	PRIMASK, r3
}
200002bc:	bf00      	nop
    /* Enable IRQs */
    __set_PRIMASK(primask_bit);    
  }

  /* Return the Write Status */
  return status;
200002be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
200002c2:	4618      	mov	r0, r3
200002c4:	3728      	adds	r7, #40	; 0x28
200002c6:	46bd      	mov	sp, r7
200002c8:	bd80      	pop	{r7, pc}
200002ca:	bf00      	nop
200002cc:	40023c00 	.word	0x40023c00

200002d0 <HAL_FLASHEx_HalfPageProgram>:
  *         FPRG and PROG/DATA bits and restart the write operation from the 
  *         beginning.
  * @retval HAL status
  */
__RAM_FUNC HAL_StatusTypeDef HAL_FLASHEx_HalfPageProgram(uint32_t Address, uint32_t* pBuffer)
{
200002d0:	b580      	push	{r7, lr}
200002d2:	b088      	sub	sp, #32
200002d4:	af00      	add	r7, sp, #0
200002d6:	6078      	str	r0, [r7, #4]
200002d8:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint32_t count = 0U; 
200002da:	2300      	movs	r3, #0
200002dc:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef status = HAL_OK;
200002de:	2300      	movs	r3, #0
200002e0:	76fb      	strb	r3, [r7, #27]

  /* Wait for last operation to be completed */
  status = FLASHRAM_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
200002e2:	f24c 3050 	movw	r0, #50000	; 0xc350
200002e6:	f000 f8f7 	bl	200004d8 <FLASHRAM_WaitForLastOperation>
200002ea:	4603      	mov	r3, r0
200002ec:	76fb      	strb	r3, [r7, #27]
  
  if(status == HAL_OK)
200002ee:	7efb      	ldrb	r3, [r7, #27]
200002f0:	2b00      	cmp	r3, #0
200002f2:	d13c      	bne.n	2000036e <HAL_FLASHEx_HalfPageProgram+0x9e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
200002f4:	f3ef 8310 	mrs	r3, PRIMASK
200002f8:	613b      	str	r3, [r7, #16]
  return(result);
200002fa:	693b      	ldr	r3, [r7, #16]
  {
    /* Disable all IRQs */
    primask_bit = __get_PRIMASK();
200002fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
200002fe:	b672      	cpsid	i
}
20000300:	bf00      	nop
    __disable_irq();

    /* Proceed to program the new half page */
    SET_BIT(FLASH->PECR, FLASH_PECR_FPRG);
20000302:	4b1d      	ldr	r3, [pc, #116]	; (20000378 <HAL_FLASHEx_HalfPageProgram+0xa8>)
20000304:	685b      	ldr	r3, [r3, #4]
20000306:	4a1c      	ldr	r2, [pc, #112]	; (20000378 <HAL_FLASHEx_HalfPageProgram+0xa8>)
20000308:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
2000030c:	6053      	str	r3, [r2, #4]
    SET_BIT(FLASH->PECR, FLASH_PECR_PROG);
2000030e:	4b1a      	ldr	r3, [pc, #104]	; (20000378 <HAL_FLASHEx_HalfPageProgram+0xa8>)
20000310:	685b      	ldr	r3, [r3, #4]
20000312:	4a19      	ldr	r2, [pc, #100]	; (20000378 <HAL_FLASHEx_HalfPageProgram+0xa8>)
20000314:	f043 0308 	orr.w	r3, r3, #8
20000318:	6053      	str	r3, [r2, #4]
    
    /* Write one half page directly with 32 different words */
    while(count < 32U)
2000031a:	e00d      	b.n	20000338 <HAL_FLASHEx_HalfPageProgram+0x68>
    {
      *(__IO uint32_t*) ((uint32_t)(Address + (4 * count))) = *pBuffer;
2000031c:	69fb      	ldr	r3, [r7, #28]
2000031e:	009a      	lsls	r2, r3, #2
20000320:	687b      	ldr	r3, [r7, #4]
20000322:	4413      	add	r3, r2
20000324:	461a      	mov	r2, r3
20000326:	683b      	ldr	r3, [r7, #0]
20000328:	681b      	ldr	r3, [r3, #0]
2000032a:	6013      	str	r3, [r2, #0]
      pBuffer++;
2000032c:	683b      	ldr	r3, [r7, #0]
2000032e:	3304      	adds	r3, #4
20000330:	603b      	str	r3, [r7, #0]
      count ++;  
20000332:	69fb      	ldr	r3, [r7, #28]
20000334:	3301      	adds	r3, #1
20000336:	61fb      	str	r3, [r7, #28]
    while(count < 32U)
20000338:	69fb      	ldr	r3, [r7, #28]
2000033a:	2b1f      	cmp	r3, #31
2000033c:	d9ee      	bls.n	2000031c <HAL_FLASHEx_HalfPageProgram+0x4c>
    }

    /* Wait for last operation to be completed */
    status = FLASHRAM_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
2000033e:	f24c 3050 	movw	r0, #50000	; 0xc350
20000342:	f000 f8c9 	bl	200004d8 <FLASHRAM_WaitForLastOperation>
20000346:	4603      	mov	r3, r0
20000348:	76fb      	strb	r3, [r7, #27]
 
    /* If the write operation is completed, disable the PROG and FPRG bits */
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_PROG);
2000034a:	4b0b      	ldr	r3, [pc, #44]	; (20000378 <HAL_FLASHEx_HalfPageProgram+0xa8>)
2000034c:	685b      	ldr	r3, [r3, #4]
2000034e:	4a0a      	ldr	r2, [pc, #40]	; (20000378 <HAL_FLASHEx_HalfPageProgram+0xa8>)
20000350:	f023 0308 	bic.w	r3, r3, #8
20000354:	6053      	str	r3, [r2, #4]
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FPRG);
20000356:	4b08      	ldr	r3, [pc, #32]	; (20000378 <HAL_FLASHEx_HalfPageProgram+0xa8>)
20000358:	685b      	ldr	r3, [r3, #4]
2000035a:	4a07      	ldr	r2, [pc, #28]	; (20000378 <HAL_FLASHEx_HalfPageProgram+0xa8>)
2000035c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
20000360:	6053      	str	r3, [r2, #4]
20000362:	697b      	ldr	r3, [r7, #20]
20000364:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000366:	68fb      	ldr	r3, [r7, #12]
20000368:	f383 8810 	msr	PRIMASK, r3
}
2000036c:	bf00      	nop
    /* Enable IRQs */
    __set_PRIMASK(primask_bit);
  }
   
  /* Return the Write Status */
  return status;
2000036e:	7efb      	ldrb	r3, [r7, #27]
}
20000370:	4618      	mov	r0, r3
20000372:	3720      	adds	r7, #32
20000374:	46bd      	mov	sp, r7
20000376:	bd80      	pop	{r7, pc}
20000378:	40023c00 	.word	0x40023c00

2000037c <HAL_FLASHEx_GetError>:
  *            @arg @ref HAL_FLASH_ERROR_WRP     FLASH Write protected error flag
  *            @arg @ref HAL_FLASH_ERROR_OPTV    FLASH Option valid error flag 
  * @retval HAL Status
  */
__RAM_FUNC HAL_StatusTypeDef HAL_FLASHEx_GetError(uint32_t * Error)
{ 
2000037c:	b480      	push	{r7}
2000037e:	b083      	sub	sp, #12
20000380:	af00      	add	r7, sp, #0
20000382:	6078      	str	r0, [r7, #4]
  *Error = pFlash.ErrorCode;
20000384:	4b04      	ldr	r3, [pc, #16]	; (20000398 <HAL_FLASHEx_GetError+0x1c>)
20000386:	695a      	ldr	r2, [r3, #20]
20000388:	687b      	ldr	r3, [r7, #4]
2000038a:	601a      	str	r2, [r3, #0]
  return HAL_OK;  
2000038c:	2300      	movs	r3, #0
}
2000038e:	4618      	mov	r0, r3
20000390:	370c      	adds	r7, #12
20000392:	46bd      	mov	sp, r7
20000394:	bc80      	pop	{r7}
20000396:	4770      	bx	lr
20000398:	20000748 	.word	0x20000748

2000039c <HAL_FLASHEx_DATAEEPROM_EraseDoubleWord>:
  *         operations such as breakpoints, periodic updates, etc.).
  * @retval HAL status
  */

__RAM_FUNC HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_EraseDoubleWord(uint32_t Address)
{
2000039c:	b580      	push	{r7, lr}
2000039e:	b086      	sub	sp, #24
200003a0:	af00      	add	r7, sp, #0
200003a2:	6078      	str	r0, [r7, #4]
  uint32_t primask_bit;
  HAL_StatusTypeDef status = HAL_OK;
200003a4:	2300      	movs	r3, #0
200003a6:	75fb      	strb	r3, [r7, #23]
  
  /* Wait for last operation to be completed */
  status = FLASHRAM_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
200003a8:	f24c 3050 	movw	r0, #50000	; 0xc350
200003ac:	f000 f894 	bl	200004d8 <FLASHRAM_WaitForLastOperation>
200003b0:	4603      	mov	r3, r0
200003b2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
200003b4:	7dfb      	ldrb	r3, [r7, #23]
200003b6:	2b00      	cmp	r3, #0
200003b8:	d133      	bne.n	20000422 <HAL_FLASHEx_DATAEEPROM_EraseDoubleWord+0x86>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
200003ba:	f3ef 8310 	mrs	r3, PRIMASK
200003be:	60bb      	str	r3, [r7, #8]
  return(result);
200003c0:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable all IRQs */
    primask_bit = __get_PRIMASK();
200003c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
200003c4:	b672      	cpsid	i
}
200003c6:	bf00      	nop
    __disable_irq();

    /* If the previous operation is completed, proceed to erase the next double word */
    /* Set the ERASE bit */
    SET_BIT(FLASH->PECR, FLASH_PECR_ERASE);
200003c8:	4b18      	ldr	r3, [pc, #96]	; (2000042c <HAL_FLASHEx_DATAEEPROM_EraseDoubleWord+0x90>)
200003ca:	685b      	ldr	r3, [r3, #4]
200003cc:	4a17      	ldr	r2, [pc, #92]	; (2000042c <HAL_FLASHEx_DATAEEPROM_EraseDoubleWord+0x90>)
200003ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
200003d2:	6053      	str	r3, [r2, #4]

    /* Set DATA bit */
    SET_BIT(FLASH->PECR, FLASH_PECR_DATA);
200003d4:	4b15      	ldr	r3, [pc, #84]	; (2000042c <HAL_FLASHEx_DATAEEPROM_EraseDoubleWord+0x90>)
200003d6:	685b      	ldr	r3, [r3, #4]
200003d8:	4a14      	ldr	r2, [pc, #80]	; (2000042c <HAL_FLASHEx_DATAEEPROM_EraseDoubleWord+0x90>)
200003da:	f043 0310 	orr.w	r3, r3, #16
200003de:	6053      	str	r3, [r2, #4]
   
    /* Write 00000000h to the 2 words to erase */
    *(__IO uint32_t *)Address = 0x00000000U;
200003e0:	687b      	ldr	r3, [r7, #4]
200003e2:	2200      	movs	r2, #0
200003e4:	601a      	str	r2, [r3, #0]
    Address += 4U;
200003e6:	687b      	ldr	r3, [r7, #4]
200003e8:	3304      	adds	r3, #4
200003ea:	607b      	str	r3, [r7, #4]
    *(__IO uint32_t *)Address = 0x00000000U;
200003ec:	687b      	ldr	r3, [r7, #4]
200003ee:	2200      	movs	r2, #0
200003f0:	601a      	str	r2, [r3, #0]
   
    /* Wait for last operation to be completed */
    status = FLASHRAM_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
200003f2:	f24c 3050 	movw	r0, #50000	; 0xc350
200003f6:	f000 f86f 	bl	200004d8 <FLASHRAM_WaitForLastOperation>
200003fa:	4603      	mov	r3, r0
200003fc:	75fb      	strb	r3, [r7, #23]
    
    /* If the erase operation is completed, disable the ERASE and DATA bits */
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_ERASE);
200003fe:	4b0b      	ldr	r3, [pc, #44]	; (2000042c <HAL_FLASHEx_DATAEEPROM_EraseDoubleWord+0x90>)
20000400:	685b      	ldr	r3, [r3, #4]
20000402:	4a0a      	ldr	r2, [pc, #40]	; (2000042c <HAL_FLASHEx_DATAEEPROM_EraseDoubleWord+0x90>)
20000404:	f423 7300 	bic.w	r3, r3, #512	; 0x200
20000408:	6053      	str	r3, [r2, #4]
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_DATA);
2000040a:	4b08      	ldr	r3, [pc, #32]	; (2000042c <HAL_FLASHEx_DATAEEPROM_EraseDoubleWord+0x90>)
2000040c:	685b      	ldr	r3, [r3, #4]
2000040e:	4a07      	ldr	r2, [pc, #28]	; (2000042c <HAL_FLASHEx_DATAEEPROM_EraseDoubleWord+0x90>)
20000410:	f023 0310 	bic.w	r3, r3, #16
20000414:	6053      	str	r3, [r2, #4]
20000416:	693b      	ldr	r3, [r7, #16]
20000418:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
2000041a:	68fb      	ldr	r3, [r7, #12]
2000041c:	f383 8810 	msr	PRIMASK, r3
}
20000420:	bf00      	nop
    __set_PRIMASK(primask_bit);
 
  }  
      
  /* Return the erase status */
  return status;
20000422:	7dfb      	ldrb	r3, [r7, #23]
}
20000424:	4618      	mov	r0, r3
20000426:	3718      	adds	r7, #24
20000428:	46bd      	mov	sp, r7
2000042a:	bd80      	pop	{r7, pc}
2000042c:	40023c00 	.word	0x40023c00

20000430 <HAL_FLASHEx_DATAEEPROM_ProgramDoubleWord>:
  *         forbidden (this includes DMA read operations and debugger read 
  *         operations such as breakpoints, periodic updates, etc.).
  * @retval HAL status
  */ 
__RAM_FUNC HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_ProgramDoubleWord(uint32_t Address, uint64_t Data)
{
20000430:	b580      	push	{r7, lr}
20000432:	b088      	sub	sp, #32
20000434:	af00      	add	r7, sp, #0
20000436:	60f8      	str	r0, [r7, #12]
20000438:	e9c7 2300 	strd	r2, r3, [r7]
  uint32_t primask_bit;
  HAL_StatusTypeDef status = HAL_OK;
2000043c:	2300      	movs	r3, #0
2000043e:	77fb      	strb	r3, [r7, #31]

  /* Wait for last operation to be completed */
  status = FLASHRAM_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
20000440:	f24c 3050 	movw	r0, #50000	; 0xc350
20000444:	f000 f848 	bl	200004d8 <FLASHRAM_WaitForLastOperation>
20000448:	4603      	mov	r3, r0
2000044a:	77fb      	strb	r3, [r7, #31]
  
  if(status == HAL_OK)
2000044c:	7ffb      	ldrb	r3, [r7, #31]
2000044e:	2b00      	cmp	r3, #0
20000450:	d13b      	bne.n	200004ca <HAL_FLASHEx_DATAEEPROM_ProgramDoubleWord+0x9a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
20000452:	f3ef 8310 	mrs	r3, PRIMASK
20000456:	613b      	str	r3, [r7, #16]
  return(result);
20000458:	693b      	ldr	r3, [r7, #16]
  {
    /* Disable all IRQs */
    primask_bit = __get_PRIMASK();
2000045a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
2000045c:	b672      	cpsid	i
}
2000045e:	bf00      	nop
    __disable_irq();

    /* If the previous operation is completed, proceed to program the new data*/
    SET_BIT(FLASH->PECR, FLASH_PECR_FPRG);
20000460:	4b1c      	ldr	r3, [pc, #112]	; (200004d4 <HAL_FLASHEx_DATAEEPROM_ProgramDoubleWord+0xa4>)
20000462:	685b      	ldr	r3, [r3, #4]
20000464:	4a1b      	ldr	r2, [pc, #108]	; (200004d4 <HAL_FLASHEx_DATAEEPROM_ProgramDoubleWord+0xa4>)
20000466:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
2000046a:	6053      	str	r3, [r2, #4]
    SET_BIT(FLASH->PECR, FLASH_PECR_DATA);
2000046c:	4b19      	ldr	r3, [pc, #100]	; (200004d4 <HAL_FLASHEx_DATAEEPROM_ProgramDoubleWord+0xa4>)
2000046e:	685b      	ldr	r3, [r3, #4]
20000470:	4a18      	ldr	r2, [pc, #96]	; (200004d4 <HAL_FLASHEx_DATAEEPROM_ProgramDoubleWord+0xa4>)
20000472:	f043 0310 	orr.w	r3, r3, #16
20000476:	6053      	str	r3, [r2, #4]
    
    /* Write the 2 words */  
     *(__IO uint32_t *)Address = (uint32_t) Data;
20000478:	68fb      	ldr	r3, [r7, #12]
2000047a:	683a      	ldr	r2, [r7, #0]
2000047c:	601a      	str	r2, [r3, #0]
     Address += 4U;
2000047e:	68fb      	ldr	r3, [r7, #12]
20000480:	3304      	adds	r3, #4
20000482:	60fb      	str	r3, [r7, #12]
     *(__IO uint32_t *)Address = (uint32_t) (Data >> 32);
20000484:	e9d7 0100 	ldrd	r0, r1, [r7]
20000488:	f04f 0200 	mov.w	r2, #0
2000048c:	f04f 0300 	mov.w	r3, #0
20000490:	000a      	movs	r2, r1
20000492:	2300      	movs	r3, #0
20000494:	68f9      	ldr	r1, [r7, #12]
20000496:	4613      	mov	r3, r2
20000498:	600b      	str	r3, [r1, #0]
     
    /* Wait for last operation to be completed */
    status = FLASHRAM_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
2000049a:	f24c 3050 	movw	r0, #50000	; 0xc350
2000049e:	f000 f81b 	bl	200004d8 <FLASHRAM_WaitForLastOperation>
200004a2:	4603      	mov	r3, r0
200004a4:	77fb      	strb	r3, [r7, #31]
    
    /* If the write operation is completed, disable the FPRG and DATA bits */
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FPRG);
200004a6:	4b0b      	ldr	r3, [pc, #44]	; (200004d4 <HAL_FLASHEx_DATAEEPROM_ProgramDoubleWord+0xa4>)
200004a8:	685b      	ldr	r3, [r3, #4]
200004aa:	4a0a      	ldr	r2, [pc, #40]	; (200004d4 <HAL_FLASHEx_DATAEEPROM_ProgramDoubleWord+0xa4>)
200004ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
200004b0:	6053      	str	r3, [r2, #4]
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_DATA);     
200004b2:	4b08      	ldr	r3, [pc, #32]	; (200004d4 <HAL_FLASHEx_DATAEEPROM_ProgramDoubleWord+0xa4>)
200004b4:	685b      	ldr	r3, [r3, #4]
200004b6:	4a07      	ldr	r2, [pc, #28]	; (200004d4 <HAL_FLASHEx_DATAEEPROM_ProgramDoubleWord+0xa4>)
200004b8:	f023 0310 	bic.w	r3, r3, #16
200004bc:	6053      	str	r3, [r2, #4]
200004be:	69bb      	ldr	r3, [r7, #24]
200004c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200004c2:	697b      	ldr	r3, [r7, #20]
200004c4:	f383 8810 	msr	PRIMASK, r3
}
200004c8:	bf00      	nop
    /* Enable IRQs */
    __set_PRIMASK(primask_bit);
  }
      
  /* Return the Write Status */
  return status;
200004ca:	7ffb      	ldrb	r3, [r7, #31]
}
200004cc:	4618      	mov	r0, r3
200004ce:	3720      	adds	r7, #32
200004d0:	46bd      	mov	sp, r7
200004d2:	bd80      	pop	{r7, pc}
200004d4:	40023c00 	.word	0x40023c00

200004d8 <FLASHRAM_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL status
  */
static __RAM_FUNC HAL_StatusTypeDef FLASHRAM_WaitForLastOperation(uint32_t Timeout)
{ 
200004d8:	b580      	push	{r7, lr}
200004da:	b082      	sub	sp, #8
200004dc:	af00      	add	r7, sp, #0
200004de:	6078      	str	r0, [r7, #4]
    /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
       Even if the FLASH operation fails, the BUSY flag will be reset and an error
       flag will be set */
       
    while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) && (Timeout != 0x00U)) 
200004e0:	e002      	b.n	200004e8 <FLASHRAM_WaitForLastOperation+0x10>
    { 
      Timeout--;
200004e2:	687b      	ldr	r3, [r7, #4]
200004e4:	3b01      	subs	r3, #1
200004e6:	607b      	str	r3, [r7, #4]
    while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) && (Timeout != 0x00U)) 
200004e8:	4b1d      	ldr	r3, [pc, #116]	; (20000560 <FLASHRAM_WaitForLastOperation+0x88>)
200004ea:	699b      	ldr	r3, [r3, #24]
200004ec:	f003 0301 	and.w	r3, r3, #1
200004f0:	2b01      	cmp	r3, #1
200004f2:	d102      	bne.n	200004fa <FLASHRAM_WaitForLastOperation+0x22>
200004f4:	687b      	ldr	r3, [r7, #4]
200004f6:	2b00      	cmp	r3, #0
200004f8:	d1f3      	bne.n	200004e2 <FLASHRAM_WaitForLastOperation+0xa>
    }
    
    if(Timeout == 0x00U)
200004fa:	687b      	ldr	r3, [r7, #4]
200004fc:	2b00      	cmp	r3, #0
200004fe:	d101      	bne.n	20000504 <FLASHRAM_WaitForLastOperation+0x2c>
    {
      return HAL_TIMEOUT;
20000500:	2303      	movs	r3, #3
20000502:	e029      	b.n	20000558 <FLASHRAM_WaitForLastOperation+0x80>
    }
    
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
20000504:	4b16      	ldr	r3, [pc, #88]	; (20000560 <FLASHRAM_WaitForLastOperation+0x88>)
20000506:	699b      	ldr	r3, [r3, #24]
20000508:	f003 0302 	and.w	r3, r3, #2
2000050c:	2b02      	cmp	r3, #2
2000050e:	d102      	bne.n	20000516 <FLASHRAM_WaitForLastOperation+0x3e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
20000510:	4b13      	ldr	r3, [pc, #76]	; (20000560 <FLASHRAM_WaitForLastOperation+0x88>)
20000512:	2202      	movs	r2, #2
20000514:	619a      	str	r2, [r3, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
20000516:	4b12      	ldr	r3, [pc, #72]	; (20000560 <FLASHRAM_WaitForLastOperation+0x88>)
20000518:	699b      	ldr	r3, [r3, #24]
2000051a:	f403 7380 	and.w	r3, r3, #256	; 0x100
2000051e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
20000522:	d014      	beq.n	2000054e <FLASHRAM_WaitForLastOperation+0x76>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
20000524:	4b0e      	ldr	r3, [pc, #56]	; (20000560 <FLASHRAM_WaitForLastOperation+0x88>)
20000526:	699b      	ldr	r3, [r3, #24]
20000528:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
2000052c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
20000530:	d00d      	beq.n	2000054e <FLASHRAM_WaitForLastOperation+0x76>
#if defined(FLASH_SR_RDERR)
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) || 
#endif /* FLASH_SR_RDERR */
#if defined(FLASH_SR_OPTVERRUSR)
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERRUSR) || 
20000532:	4b0b      	ldr	r3, [pc, #44]	; (20000560 <FLASHRAM_WaitForLastOperation+0x88>)
20000534:	699b      	ldr	r3, [r3, #24]
20000536:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
2000053a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
2000053e:	d006      	beq.n	2000054e <FLASHRAM_WaitForLastOperation+0x76>
#endif /* FLASH_SR_OPTVERRUSR */
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
20000540:	4b07      	ldr	r3, [pc, #28]	; (20000560 <FLASHRAM_WaitForLastOperation+0x88>)
20000542:	699b      	ldr	r3, [r3, #24]
20000544:	f403 7300 	and.w	r3, r3, #512	; 0x200
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERRUSR) || 
20000548:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
2000054c:	d103      	bne.n	20000556 <FLASHRAM_WaitForLastOperation+0x7e>
  {
    /*Save the error code*/
    FLASHRAM_SetErrorCode();
2000054e:	f000 f809 	bl	20000564 <FLASHRAM_SetErrorCode>
    return HAL_ERROR;
20000552:	2301      	movs	r3, #1
20000554:	e000      	b.n	20000558 <FLASHRAM_WaitForLastOperation+0x80>
  }

  /* There is no error flag set */
  return HAL_OK;
20000556:	2300      	movs	r3, #0
}
20000558:	4618      	mov	r0, r3
2000055a:	3708      	adds	r7, #8
2000055c:	46bd      	mov	sp, r7
2000055e:	bd80      	pop	{r7, pc}
20000560:	40023c00 	.word	0x40023c00

20000564 <FLASHRAM_SetErrorCode>:
{
20000564:	b480      	push	{r7}
20000566:	b083      	sub	sp, #12
20000568:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
2000056a:	2300      	movs	r3, #0
2000056c:	607b      	str	r3, [r7, #4]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
2000056e:	4b26      	ldr	r3, [pc, #152]	; (20000608 <FLASHRAM_SetErrorCode+0xa4>)
20000570:	699b      	ldr	r3, [r3, #24]
20000572:	f403 7380 	and.w	r3, r3, #256	; 0x100
20000576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2000057a:	d109      	bne.n	20000590 <FLASHRAM_SetErrorCode+0x2c>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
2000057c:	4b23      	ldr	r3, [pc, #140]	; (2000060c <FLASHRAM_SetErrorCode+0xa8>)
2000057e:	695b      	ldr	r3, [r3, #20]
20000580:	f043 0302 	orr.w	r3, r3, #2
20000584:	4a21      	ldr	r2, [pc, #132]	; (2000060c <FLASHRAM_SetErrorCode+0xa8>)
20000586:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_WRPERR;
20000588:	687b      	ldr	r3, [r7, #4]
2000058a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2000058e:	607b      	str	r3, [r7, #4]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
20000590:	4b1d      	ldr	r3, [pc, #116]	; (20000608 <FLASHRAM_SetErrorCode+0xa4>)
20000592:	699b      	ldr	r3, [r3, #24]
20000594:	f403 7300 	and.w	r3, r3, #512	; 0x200
20000598:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
2000059c:	d109      	bne.n	200005b2 <FLASHRAM_SetErrorCode+0x4e>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
2000059e:	4b1b      	ldr	r3, [pc, #108]	; (2000060c <FLASHRAM_SetErrorCode+0xa8>)
200005a0:	695b      	ldr	r3, [r3, #20]
200005a2:	f043 0301 	orr.w	r3, r3, #1
200005a6:	4a19      	ldr	r2, [pc, #100]	; (2000060c <FLASHRAM_SetErrorCode+0xa8>)
200005a8:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_PGAERR;
200005aa:	687b      	ldr	r3, [r7, #4]
200005ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
200005b0:	607b      	str	r3, [r7, #4]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
200005b2:	4b15      	ldr	r3, [pc, #84]	; (20000608 <FLASHRAM_SetErrorCode+0xa4>)
200005b4:	699b      	ldr	r3, [r3, #24]
200005b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
200005ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
200005be:	d109      	bne.n	200005d4 <FLASHRAM_SetErrorCode+0x70>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
200005c0:	4b12      	ldr	r3, [pc, #72]	; (2000060c <FLASHRAM_SetErrorCode+0xa8>)
200005c2:	695b      	ldr	r3, [r3, #20]
200005c4:	f043 0304 	orr.w	r3, r3, #4
200005c8:	4a10      	ldr	r2, [pc, #64]	; (2000060c <FLASHRAM_SetErrorCode+0xa8>)
200005ca:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_OPTVERR;
200005cc:	687b      	ldr	r3, [r7, #4]
200005ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
200005d2:	607b      	str	r3, [r7, #4]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERRUSR))
200005d4:	4b0c      	ldr	r3, [pc, #48]	; (20000608 <FLASHRAM_SetErrorCode+0xa4>)
200005d6:	699b      	ldr	r3, [r3, #24]
200005d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
200005dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
200005e0:	d109      	bne.n	200005f6 <FLASHRAM_SetErrorCode+0x92>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTVUSR;
200005e2:	4b0a      	ldr	r3, [pc, #40]	; (2000060c <FLASHRAM_SetErrorCode+0xa8>)
200005e4:	695b      	ldr	r3, [r3, #20]
200005e6:	f043 0320 	orr.w	r3, r3, #32
200005ea:	4a08      	ldr	r2, [pc, #32]	; (2000060c <FLASHRAM_SetErrorCode+0xa8>)
200005ec:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_OPTVERRUSR;
200005ee:	687b      	ldr	r3, [r7, #4]
200005f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
200005f4:	607b      	str	r3, [r7, #4]
  __HAL_FLASH_CLEAR_FLAG(flags);
200005f6:	4a04      	ldr	r2, [pc, #16]	; (20000608 <FLASHRAM_SetErrorCode+0xa4>)
200005f8:	687b      	ldr	r3, [r7, #4]
200005fa:	6193      	str	r3, [r2, #24]
  return HAL_OK;
200005fc:	2300      	movs	r3, #0
}  
200005fe:	4618      	mov	r0, r3
20000600:	370c      	adds	r7, #12
20000602:	46bd      	mov	sp, r7
20000604:	bc80      	pop	{r7}
20000606:	4770      	bx	lr
20000608:	40023c00 	.word	0x40023c00
2000060c:	20000748 	.word	0x20000748
