
dwm3000-f411-tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012d30  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e0  08012ec8  08012ec8  00022ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080133a8  080133a8  0003009c  2**0
                  CONTENTS
  4 .ARM          00000008  080133a8  080133a8  000233a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080133b0  080133b0  0003009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080133b0  080133b0  000233b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080133b4  080133b4  000233b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  080133b8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  2000009c  08013454  0003009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  08013454  00030224  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018001  00000000  00000000  000300cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034e4  00000000  00000000  000480cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e40  00000000  00000000  0004b5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00018625  00000000  00000000  0004c3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00014e0c  00000000  00000000  00064a1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008c0a3  00000000  00000000  00079829  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      000000d2  00000000  00000000  001058cc  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000ce0  00000000  00000000  001059a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000039b8  00000000  00000000  00106680  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000009c 	.word	0x2000009c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08012e5c 	.word	0x08012e5c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000a0 	.word	0x200000a0
 80001d4:	08012e5c 	.word	0x08012e5c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
    decaIrqStatus_t s = port_GetEXT_IRQStatus();
 80004d6:	f000 fa5f 	bl	8000998 <port_GetEXT_IRQStatus>
 80004da:	4603      	mov	r3, r0
 80004dc:	607b      	str	r3, [r7, #4]

    if (s)
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d001      	beq.n	80004e8 <decamutexon+0x18>
    {
        port_DisableEXT_IRQ(); // disable the external interrupt line
 80004e4:	f000 fa34 	bl	8000950 <port_DisableEXT_IRQ>
    }
    return s; // return state before disable, value is used to re-enable in decamutexoff call
 80004e8:	687b      	ldr	r3, [r7, #4]
}
 80004ea:	4618      	mov	r0, r3
 80004ec:	3708      	adds	r7, #8
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}

080004f2 <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s) // put a function here that re-enables the interrupt at the end of the critical section
{
 80004f2:	b580      	push	{r7, lr}
 80004f4:	b082      	sub	sp, #8
 80004f6:	af00      	add	r7, sp, #0
 80004f8:	6078      	str	r0, [r7, #4]
    if (s)
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <decamutexoff+0x12>
    { // need to check the port state as we can't use level sensitive interrupt on the STM ARM
        port_EnableEXT_IRQ();
 8000500:	f000 fa38 	bl	8000974 <port_EnableEXT_IRQ>
    }
}
 8000504:	bf00      	nop
 8000506:	3708      	adds	r7, #8
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}

0800050c <deca_sleep>:
#include <deca_device_api.h>
#include <port.h>

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
void deca_sleep(unsigned int time_ms)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
    Sleep(time_ms);
 8000514:	6878      	ldr	r0, [r7, #4]
 8000516:	f000 f95f 	bl	80007d8 <Sleep>
}
 800051a:	bf00      	nop
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}

08000522 <deca_usleep>:

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
void deca_usleep(unsigned long time_us)
{
 8000522:	b580      	push	{r7, lr}
 8000524:	b082      	sub	sp, #8
 8000526:	af00      	add	r7, sp, #0
 8000528:	6078      	str	r0, [r7, #4]
    Sleep(time_us);
 800052a:	6878      	ldr	r0, [r7, #4]
 800052c:	f000 f954 	bl	80007d8 <Sleep>
}
 8000530:	bf00      	nop
 8000532:	3708      	adds	r7, #8
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}

08000538 <writetospiwithcrc>:
 * Low level abstract function to write to the SPI when SPI CRC mode is used
 * Takes two separate byte buffers for write header and write data, and a CRC8 byte which is written last
 * returns 0 for success, or -1 for error
 */
int writetospiwithcrc(uint16_t headerLength, const uint8_t *headerBuffer, uint16_t bodyLength, const uint8_t *bodyBuffer, uint8_t crc8)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b086      	sub	sp, #24
 800053c:	af00      	add	r7, sp, #0
 800053e:	60b9      	str	r1, [r7, #8]
 8000540:	607b      	str	r3, [r7, #4]
 8000542:	4603      	mov	r3, r0
 8000544:	81fb      	strh	r3, [r7, #14]
 8000546:	4613      	mov	r3, r2
 8000548:	81bb      	strh	r3, [r7, #12]
#ifdef DWT_ENABLE_CRC
    decaIrqStatus_t stat;
    stat = decamutexon();
 800054a:	f7ff ffc1 	bl	80004d0 <decamutexon>
 800054e:	6178      	str	r0, [r7, #20]
    while (HAL_SPI_GetState(hcurrent_active_spi) != HAL_SPI_STATE_READY);
 8000550:	bf00      	nop
 8000552:	4b1d      	ldr	r3, [pc, #116]	; (80005c8 <writetospiwithcrc+0x90>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4618      	mov	r0, r3
 8000558:	f003 ffb6 	bl	80044c8 <HAL_SPI_GetState>
 800055c:	4603      	mov	r3, r0
 800055e:	2b01      	cmp	r3, #1
 8000560:	d1f7      	bne.n	8000552 <writetospiwithcrc+0x1a>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, pin_io_active_spi, SPI_CS_state); /**< Put chip select line low */
 8000562:	4b1a      	ldr	r3, [pc, #104]	; (80005cc <writetospiwithcrc+0x94>)
 8000564:	881b      	ldrh	r3, [r3, #0]
 8000566:	4a1a      	ldr	r2, [pc, #104]	; (80005d0 <writetospiwithcrc+0x98>)
 8000568:	7812      	ldrb	r2, [r2, #0]
 800056a:	4619      	mov	r1, r3
 800056c:	4819      	ldr	r0, [pc, #100]	; (80005d4 <writetospiwithcrc+0x9c>)
 800056e:	f001 fa59 	bl	8001a24 <HAL_GPIO_WritePin>


    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)headerBuffer, headerLength, 10);    /* Send header in polling mode */
 8000572:	4b15      	ldr	r3, [pc, #84]	; (80005c8 <writetospiwithcrc+0x90>)
 8000574:	6818      	ldr	r0, [r3, #0]
 8000576:	89fa      	ldrh	r2, [r7, #14]
 8000578:	230a      	movs	r3, #10
 800057a:	68b9      	ldr	r1, [r7, #8]
 800057c:	f003 fd5d 	bl	800403a <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)bodyBuffer, bodyLength, 10);        /* Send data in polling mode */
 8000580:	4b11      	ldr	r3, [pc, #68]	; (80005c8 <writetospiwithcrc+0x90>)
 8000582:	6818      	ldr	r0, [r3, #0]
 8000584:	89ba      	ldrh	r2, [r7, #12]
 8000586:	230a      	movs	r3, #10
 8000588:	6879      	ldr	r1, [r7, #4]
 800058a:	f003 fd56 	bl	800403a <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)&crc8, 1, 10);      /* Send data in polling mode */
 800058e:	4b0e      	ldr	r3, [pc, #56]	; (80005c8 <writetospiwithcrc+0x90>)
 8000590:	6818      	ldr	r0, [r3, #0]
 8000592:	230a      	movs	r3, #10
 8000594:	2201      	movs	r2, #1
 8000596:	f107 0120 	add.w	r1, r7, #32
 800059a:	f003 fd4e 	bl	800403a <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, pin_io_active_spi,(GPIO_PinState)(!((uint8_t)SPI_CS_state))); /**< Put chip select line high */
 800059e:	4b0b      	ldr	r3, [pc, #44]	; (80005cc <writetospiwithcrc+0x94>)
 80005a0:	8819      	ldrh	r1, [r3, #0]
 80005a2:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <writetospiwithcrc+0x98>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	bf0c      	ite	eq
 80005aa:	2301      	moveq	r3, #1
 80005ac:	2300      	movne	r3, #0
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	461a      	mov	r2, r3
 80005b2:	4808      	ldr	r0, [pc, #32]	; (80005d4 <writetospiwithcrc+0x9c>)
 80005b4:	f001 fa36 	bl	8001a24 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 80005b8:	6978      	ldr	r0, [r7, #20]
 80005ba:	f7ff ff9a 	bl	80004f2 <decamutexoff>
#endif //DWT_ENABLE_CRC
    return 0;
 80005be:	2300      	movs	r3, #0
} // end writetospiwithcrc()
 80005c0:	4618      	mov	r0, r3
 80005c2:	3718      	adds	r7, #24
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000008 	.word	0x20000008
 80005cc:	2000000c 	.word	0x2000000c
 80005d0:	200000b8 	.word	0x200000b8
 80005d4:	40020800 	.word	0x40020800

080005d8 <writetospi>:
 * Low level abstract function to write to the SPI
 * Takes two separate byte buffers for write header and write data
 * returns 0 for success, or -1 for error
 */
int writetospi(uint16_t headerLength, const uint8_t *headerBuffer, uint16_t bodyLength, const uint8_t *bodyBuffer)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b086      	sub	sp, #24
 80005dc:	af00      	add	r7, sp, #0
 80005de:	60b9      	str	r1, [r7, #8]
 80005e0:	607b      	str	r3, [r7, #4]
 80005e2:	4603      	mov	r3, r0
 80005e4:	81fb      	strh	r3, [r7, #14]
 80005e6:	4613      	mov	r3, r2
 80005e8:	81bb      	strh	r3, [r7, #12]
    decaIrqStatus_t stat;
    stat = decamutexon();
 80005ea:	f7ff ff71 	bl	80004d0 <decamutexon>
 80005ee:	6178      	str	r0, [r7, #20]

    while (HAL_SPI_GetState(hcurrent_active_spi) != HAL_SPI_STATE_READY);
 80005f0:	bf00      	nop
 80005f2:	4b1c      	ldr	r3, [pc, #112]	; (8000664 <writetospi+0x8c>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4618      	mov	r0, r3
 80005f8:	f003 ff66 	bl	80044c8 <HAL_SPI_GetState>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d1f7      	bne.n	80005f2 <writetospi+0x1a>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, pin_io_active_spi, SPI_CS_state); /**< Put chip select line low */
 8000602:	4b19      	ldr	r3, [pc, #100]	; (8000668 <writetospi+0x90>)
 8000604:	881b      	ldrh	r3, [r3, #0]
 8000606:	4a19      	ldr	r2, [pc, #100]	; (800066c <writetospi+0x94>)
 8000608:	7812      	ldrb	r2, [r2, #0]
 800060a:	4619      	mov	r1, r3
 800060c:	4818      	ldr	r0, [pc, #96]	; (8000670 <writetospi+0x98>)
 800060e:	f001 fa09 	bl	8001a24 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)headerBuffer, headerLength, HAL_MAX_DELAY); /* Send header in polling mode */
 8000612:	4b14      	ldr	r3, [pc, #80]	; (8000664 <writetospi+0x8c>)
 8000614:	6818      	ldr	r0, [r3, #0]
 8000616:	89fa      	ldrh	r2, [r7, #14]
 8000618:	f04f 33ff 	mov.w	r3, #4294967295
 800061c:	68b9      	ldr	r1, [r7, #8]
 800061e:	f003 fd0c 	bl	800403a <HAL_SPI_Transmit>

    if(bodyLength != 0)
 8000622:	89bb      	ldrh	r3, [r7, #12]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d007      	beq.n	8000638 <writetospi+0x60>
    {
        HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)bodyBuffer,   bodyLength, HAL_MAX_DELAY);     /* Send data in polling mode */
 8000628:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <writetospi+0x8c>)
 800062a:	6818      	ldr	r0, [r3, #0]
 800062c:	89ba      	ldrh	r2, [r7, #12]
 800062e:	f04f 33ff 	mov.w	r3, #4294967295
 8000632:	6879      	ldr	r1, [r7, #4]
 8000634:	f003 fd01 	bl	800403a <HAL_SPI_Transmit>
    }

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, pin_io_active_spi, (GPIO_PinState)(!((uint8_t)SPI_CS_state))); /**< Put chip select line high */
 8000638:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <writetospi+0x90>)
 800063a:	8819      	ldrh	r1, [r3, #0]
 800063c:	4b0b      	ldr	r3, [pc, #44]	; (800066c <writetospi+0x94>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	2b00      	cmp	r3, #0
 8000642:	bf0c      	ite	eq
 8000644:	2301      	moveq	r3, #1
 8000646:	2300      	movne	r3, #0
 8000648:	b2db      	uxtb	r3, r3
 800064a:	461a      	mov	r2, r3
 800064c:	4808      	ldr	r0, [pc, #32]	; (8000670 <writetospi+0x98>)
 800064e:	f001 f9e9 	bl	8001a24 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 8000652:	6978      	ldr	r0, [r7, #20]
 8000654:	f7ff ff4d 	bl	80004f2 <decamutexoff>

    return 0;
 8000658:	2300      	movs	r3, #0
} // end writetospi()
 800065a:	4618      	mov	r0, r3
 800065c:	3718      	adds	r7, #24
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	20000008 	.word	0x20000008
 8000668:	2000000c 	.word	0x2000000c
 800066c:	200000b8 	.word	0x200000b8
 8000670:	40020800 	.word	0x40020800

08000674 <readfromspi>:
 * returns the offset into read buffer where first byte of read data may be found,
 * or returns -1 if there was an error
 */
//#pragma GCC optimize ("O3")
int readfromspi(uint16_t headerLength, uint8_t *headerBuffer, uint16_t readlength, uint8_t *readBuffer)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af00      	add	r7, sp, #0
 800067a:	60b9      	str	r1, [r7, #8]
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	4603      	mov	r3, r0
 8000680:	81fb      	strh	r3, [r7, #14]
 8000682:	4613      	mov	r3, r2
 8000684:	81bb      	strh	r3, [r7, #12]

    decaIrqStatus_t stat;
    stat = decamutexon();
 8000686:	f7ff ff23 	bl	80004d0 <decamutexon>
 800068a:	6178      	str	r0, [r7, #20]

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(hcurrent_active_spi) != HAL_SPI_STATE_READY);
 800068c:	bf00      	nop
 800068e:	4b2d      	ldr	r3, [pc, #180]	; (8000744 <readfromspi+0xd0>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4618      	mov	r0, r3
 8000694:	f003 ff18 	bl	80044c8 <HAL_SPI_GetState>
 8000698:	4603      	mov	r3, r0
 800069a:	2b01      	cmp	r3, #1
 800069c:	d1f7      	bne.n	800068e <readfromspi+0x1a>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, SPI_CS_state); /**< Put chip select line low */
 800069e:	4b2a      	ldr	r3, [pc, #168]	; (8000748 <readfromspi+0xd4>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	461a      	mov	r2, r3
 80006a4:	2110      	movs	r1, #16
 80006a6:	4829      	ldr	r0, [pc, #164]	; (800074c <readfromspi+0xd8>)
 80006a8:	f001 f9bc 	bl	8001a24 <HAL_GPIO_WritePin>

    /* Send header */
    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t*)headerBuffer, headerLength, HAL_MAX_DELAY); //No timeout
 80006ac:	4b25      	ldr	r3, [pc, #148]	; (8000744 <readfromspi+0xd0>)
 80006ae:	6818      	ldr	r0, [r3, #0]
 80006b0:	89fa      	ldrh	r2, [r7, #14]
 80006b2:	f04f 33ff 	mov.w	r3, #4294967295
 80006b6:	68b9      	ldr	r1, [r7, #8]
 80006b8:	f003 fcbf 	bl	800403a <HAL_SPI_Transmit>

    while(__HAL_SPI_GET_FLAG(hcurrent_active_spi, SPI_FLAG_TXE) == RESET)//Verify that the transmit was ended
 80006bc:	bf00      	nop
 80006be:	4b21      	ldr	r3, [pc, #132]	; (8000744 <readfromspi+0xd0>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	689b      	ldr	r3, [r3, #8]
 80006c6:	f003 0302 	and.w	r3, r3, #2
 80006ca:	2b02      	cmp	r3, #2
 80006cc:	d1f7      	bne.n	80006be <readfromspi+0x4a>
    {
    }

    /* for the data buffer use LL functions directly as the HAL SPI read function
     * has issue reading single bytes */
    while (readlength-- > 0)
 80006ce:	e01f      	b.n	8000710 <readfromspi+0x9c>
    {
        /* Wait until TXE flag is set to send data */
        while(__HAL_SPI_GET_FLAG(hcurrent_active_spi, SPI_FLAG_TXE) == RESET)
 80006d0:	bf00      	nop
 80006d2:	4b1c      	ldr	r3, [pc, #112]	; (8000744 <readfromspi+0xd0>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	689b      	ldr	r3, [r3, #8]
 80006da:	f003 0302 	and.w	r3, r3, #2
 80006de:	2b02      	cmp	r3, #2
 80006e0:	d1f7      	bne.n	80006d2 <readfromspi+0x5e>
        {
        }

        hcurrent_active_spi->Instance->DR=0;
 80006e2:	4b18      	ldr	r3, [pc, #96]	; (8000744 <readfromspi+0xd0>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	2200      	movs	r2, #0
 80006ea:	60da      	str	r2, [r3, #12]
        /* set output to 0 (MOSI), this is necessary for
        e.g. when waking up DW3000 from DEEPSLEEP via dwt_spicswakeup() function.
        */

        /* Wait until RXNE flag is set to read data */
        while(__HAL_SPI_GET_FLAG(hcurrent_active_spi, SPI_FLAG_RXNE) == RESET)
 80006ec:	bf00      	nop
 80006ee:	4b15      	ldr	r3, [pc, #84]	; (8000744 <readfromspi+0xd0>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	689b      	ldr	r3, [r3, #8]
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	2b01      	cmp	r3, #1
 80006fc:	d1f7      	bne.n	80006ee <readfromspi+0x7a>
        {
        }

        (*readBuffer++) = hcurrent_active_spi->Instance->DR;  //copy data read form (MISO)
 80006fe:	4b11      	ldr	r3, [pc, #68]	; (8000744 <readfromspi+0xd0>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	68d9      	ldr	r1, [r3, #12]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	1c5a      	adds	r2, r3, #1
 800070a:	607a      	str	r2, [r7, #4]
 800070c:	b2ca      	uxtb	r2, r1
 800070e:	701a      	strb	r2, [r3, #0]
    while (readlength-- > 0)
 8000710:	89bb      	ldrh	r3, [r7, #12]
 8000712:	1e5a      	subs	r2, r3, #1
 8000714:	81ba      	strh	r2, [r7, #12]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d1da      	bne.n	80006d0 <readfromspi+0x5c>
    }


    HAL_GPIO_WritePin(DW_CS_GPIO_Port, pin_io_active_spi, (GPIO_PinState)(!((uint8_t)SPI_CS_state))); /**< Put chip select line high */
 800071a:	4b0d      	ldr	r3, [pc, #52]	; (8000750 <readfromspi+0xdc>)
 800071c:	8819      	ldrh	r1, [r3, #0]
 800071e:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <readfromspi+0xd4>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	2b00      	cmp	r3, #0
 8000724:	bf0c      	ite	eq
 8000726:	2301      	moveq	r3, #1
 8000728:	2300      	movne	r3, #0
 800072a:	b2db      	uxtb	r3, r3
 800072c:	461a      	mov	r2, r3
 800072e:	4807      	ldr	r0, [pc, #28]	; (800074c <readfromspi+0xd8>)
 8000730:	f001 f978 	bl	8001a24 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 8000734:	6978      	ldr	r0, [r7, #20]
 8000736:	f7ff fedc 	bl	80004f2 <decamutexoff>

    return 0;
 800073a:	2300      	movs	r3, #0
} // end readfromspi()
 800073c:	4618      	mov	r0, r3
 800073e:	3718      	adds	r7, #24
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	20000008 	.word	0x20000008
 8000748:	200000b8 	.word	0x200000b8
 800074c:	40020800 	.word	0x40020800
 8000750:	2000000c 	.word	0x2000000c

08000754 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800075e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000762:	2b00      	cmp	r3, #0
 8000764:	db0b      	blt.n	800077e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	f003 021f 	and.w	r2, r3, #31
 800076c:	4907      	ldr	r1, [pc, #28]	; (800078c <__NVIC_EnableIRQ+0x38>)
 800076e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000772:	095b      	lsrs	r3, r3, #5
 8000774:	2001      	movs	r0, #1
 8000776:	fa00 f202 	lsl.w	r2, r0, r2
 800077a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800077e:	bf00      	nop
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	e000e100 	.word	0xe000e100

08000790 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800079a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	db12      	blt.n	80007c8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	f003 021f 	and.w	r2, r3, #31
 80007a8:	490a      	ldr	r1, [pc, #40]	; (80007d4 <__NVIC_DisableIRQ+0x44>)
 80007aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ae:	095b      	lsrs	r3, r3, #5
 80007b0:	2001      	movs	r0, #1
 80007b2:	fa00 f202 	lsl.w	r2, r0, r2
 80007b6:	3320      	adds	r3, #32
 80007b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80007bc:	f3bf 8f4f 	dsb	sy
}
 80007c0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007c2:	f3bf 8f6f 	isb	sy
}
 80007c6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80007c8:	bf00      	nop
 80007ca:	370c      	adds	r7, #12
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr
 80007d4:	e000e100 	.word	0xe000e100

080007d8 <Sleep>:

/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void Sleep(uint32_t x)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f000 fd93 	bl	800130c <HAL_Delay>
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
	...

080007f0 <EXTI_GetITEnStatus>:
 * @brief  Checks whether the specified IRQn line is enabled or not.
 * @param  IRQn: specifies the IRQn line to check.
 * @return "0" when IRQn is "not enabled" and !0 otherwise
 */
ITStatus EXTI_GetITEnStatus(IRQn_Type IRQn)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	71fb      	strb	r3, [r7, #7]
    return ((NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) == (uint32_t)RESET) ? (RESET) : (SET);
 80007fa:	4a0c      	ldr	r2, [pc, #48]	; (800082c <EXTI_GetITEnStatus+0x3c>)
 80007fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000800:	095b      	lsrs	r3, r3, #5
 8000802:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	f003 031f 	and.w	r3, r3, #31
 800080c:	fa22 f303 	lsr.w	r3, r2, r3
 8000810:	f003 0301 	and.w	r3, r3, #1
 8000814:	2b00      	cmp	r3, #0
 8000816:	bf14      	ite	ne
 8000818:	2301      	movne	r3, #1
 800081a:	2300      	moveq	r3, #0
 800081c:	b2db      	uxtb	r3, r3
}
 800081e:	4618      	mov	r0, r3
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	e000e100 	.word	0xe000e100

08000830 <reset_DWIC>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW IC by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DWIC(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;

    // Enable GPIO used for DW1000 reset as open collector output
    GPIO_InitStruct.Pin = DW_RST_Pin;
 8000836:	2301      	movs	r3, #1
 8000838:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800083a:	2311      	movs	r3, #17
 800083c:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083e:	2300      	movs	r3, #0
 8000840:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	4619      	mov	r1, r3
 8000846:	480a      	ldr	r0, [pc, #40]	; (8000870 <reset_DWIC+0x40>)
 8000848:	f000 ff68 	bl	800171c <HAL_GPIO_Init>

    // drive the RSTn pin low
    HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_RESET);
 800084c:	2200      	movs	r2, #0
 800084e:	2101      	movs	r1, #1
 8000850:	4807      	ldr	r0, [pc, #28]	; (8000870 <reset_DWIC+0x40>)
 8000852:	f001 f8e7 	bl	8001a24 <HAL_GPIO_WritePin>

    Sleep(1);
 8000856:	2001      	movs	r0, #1
 8000858:	f7ff ffbe 	bl	80007d8 <Sleep>

    // put the pin back to output open-drain (not active)
    setup_DWICRSTnIRQ(0);
 800085c:	2000      	movs	r0, #0
 800085e:	f000 f809 	bl	8000874 <setup_DWICRSTnIRQ>
    Sleep(2);
 8000862:	2002      	movs	r0, #2
 8000864:	f7ff ffb8 	bl	80007d8 <Sleep>
}
 8000868:	bf00      	nop
 800086a:	3718      	adds	r7, #24
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40020000 	.word	0x40020000

08000874 <setup_DWICRSTnIRQ>:
 * @brief   setup the DW_RESET pin mode
 *          0 - output Open collector mode
 *          !0 - input mode with connected EXTI0 IRQ
 * */
void setup_DWICRSTnIRQ(int enable)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b088      	sub	sp, #32
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    if (enable)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d015      	beq.n	80008ae <setup_DWICRSTnIRQ+0x3a>
    {
        // Enable GPIO used as DECA RESET for interrupt
        GPIO_InitStruct.Pin = DW_RST_Pin;
 8000882:	2301      	movs	r3, #1
 8000884:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000886:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800088a:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 8000890:	f107 030c 	add.w	r3, r7, #12
 8000894:	4619      	mov	r1, r3
 8000896:	4813      	ldr	r0, [pc, #76]	; (80008e4 <setup_DWICRSTnIRQ+0x70>)
 8000898:	f000 ff40 	bl	800171c <HAL_GPIO_Init>

        HAL_NVIC_EnableIRQ(EXTI0_IRQn); // pin #0 -> EXTI #0
 800089c:	2006      	movs	r0, #6
 800089e:	f000 fe74 	bl	800158a <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2105      	movs	r1, #5
 80008a6:	2006      	movs	r0, #6
 80008a8:	f000 fe53 	bl	8001552 <HAL_NVIC_SetPriority>
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
        HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_SET);
    }
}
 80008ac:	e015      	b.n	80008da <setup_DWICRSTnIRQ+0x66>
        HAL_NVIC_DisableIRQ(EXTI0_IRQn); // pin #0 -> EXTI #0
 80008ae:	2006      	movs	r0, #6
 80008b0:	f000 fe79 	bl	80015a6 <HAL_NVIC_DisableIRQ>
        GPIO_InitStruct.Pin = DW_RST_Pin;
 80008b4:	2301      	movs	r3, #1
 80008b6:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80008b8:	2311      	movs	r3, #17
 80008ba:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008c0:	2302      	movs	r3, #2
 80008c2:	61bb      	str	r3, [r7, #24]
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 80008c4:	f107 030c 	add.w	r3, r7, #12
 80008c8:	4619      	mov	r1, r3
 80008ca:	4806      	ldr	r0, [pc, #24]	; (80008e4 <setup_DWICRSTnIRQ+0x70>)
 80008cc:	f000 ff26 	bl	800171c <HAL_GPIO_Init>
        HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_SET);
 80008d0:	2201      	movs	r2, #1
 80008d2:	2101      	movs	r1, #1
 80008d4:	4803      	ldr	r0, [pc, #12]	; (80008e4 <setup_DWICRSTnIRQ+0x70>)
 80008d6:	f001 f8a5 	bl	8001a24 <HAL_GPIO_WritePin>
}
 80008da:	bf00      	nop
 80008dc:	3720      	adds	r7, #32
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40020000 	.word	0x40020000

080008e8 <wakeup_device_with_io>:
 *
 * output -None
 *
 */
void wakeup_device_with_io(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
    SET_WAKEUP_PIN_IO_HIGH;
 80008ec:	2201      	movs	r2, #1
 80008ee:	2110      	movs	r1, #16
 80008f0:	4806      	ldr	r0, [pc, #24]	; (800090c <wakeup_device_with_io+0x24>)
 80008f2:	f001 f897 	bl	8001a24 <HAL_GPIO_WritePin>
    WAIT_200uSEC;
 80008f6:	2001      	movs	r0, #1
 80008f8:	f7ff ff6e 	bl	80007d8 <Sleep>
    SET_WAKEUP_PIN_IO_LOW;
 80008fc:	2200      	movs	r2, #0
 80008fe:	2110      	movs	r1, #16
 8000900:	4802      	ldr	r0, [pc, #8]	; (800090c <wakeup_device_with_io+0x24>)
 8000902:	f001 f88f 	bl	8001a24 <HAL_GPIO_WritePin>
}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40020800 	.word	0x40020800

08000910 <port_set_dw_ic_spi_slowrate>:
/* @fn      port_set_dw_ic_spi_slowrate
 * @brief   set 4.5MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw_ic_spi_slowrate(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
    hcurrent_active_spi->Init.BaudRatePrescaler=SPI_BAUDRATEPRESCALER_16;
 8000914:	4b05      	ldr	r3, [pc, #20]	; (800092c <port_set_dw_ic_spi_slowrate+0x1c>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2218      	movs	r2, #24
 800091a:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(hcurrent_active_spi);
 800091c:	4b03      	ldr	r3, [pc, #12]	; (800092c <port_set_dw_ic_spi_slowrate+0x1c>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4618      	mov	r0, r3
 8000922:	f003 fb01 	bl	8003f28 <HAL_SPI_Init>
}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000008 	.word	0x20000008

08000930 <port_set_dw_ic_spi_fastrate>:
/* @fn      port_set_dw_ic_spi_fastrate
 * @brief   set 18MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw_ic_spi_fastrate(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
    hcurrent_active_spi->Init.BaudRatePrescaler=SPI_BAUDRATEPRESCALER_2;
 8000934:	4b05      	ldr	r3, [pc, #20]	; (800094c <port_set_dw_ic_spi_fastrate+0x1c>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2200      	movs	r2, #0
 800093a:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(hcurrent_active_spi);
 800093c:	4b03      	ldr	r3, [pc, #12]	; (800094c <port_set_dw_ic_spi_fastrate+0x1c>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4618      	mov	r0, r3
 8000942:	f003 faf1 	bl	8003f28 <HAL_SPI_Init>
}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000008 	.word	0x20000008

08000950 <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
    if(SPI_1 == host_spi)
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <port_DisableEXT_IRQ+0x20>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d103      	bne.n	8000964 <port_DisableEXT_IRQ+0x14>
    {
        NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 800095c:	2028      	movs	r0, #40	; 0x28
 800095e:	f7ff ff17 	bl	8000790 <__NVIC_DisableIRQ>
    else
    {
        NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn2);
    }

}
 8000962:	e002      	b.n	800096a <port_DisableEXT_IRQ+0x1a>
        NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn2);
 8000964:	2017      	movs	r0, #23
 8000966:	f7ff ff13 	bl	8000790 <__NVIC_DisableIRQ>
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	200000b9 	.word	0x200000b9

08000974 <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
    if(SPI_1 == host_spi)
 8000978:	4b06      	ldr	r3, [pc, #24]	; (8000994 <port_EnableEXT_IRQ+0x20>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d103      	bne.n	8000988 <port_EnableEXT_IRQ+0x14>
    {
        NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 8000980:	2028      	movs	r0, #40	; 0x28
 8000982:	f7ff fee7 	bl	8000754 <__NVIC_EnableIRQ>
    }
    else
    {
        NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn2);
    }
}
 8000986:	e002      	b.n	800098e <port_EnableEXT_IRQ+0x1a>
        NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn2);
 8000988:	2017      	movs	r0, #23
 800098a:	f7ff fee3 	bl	8000754 <__NVIC_EnableIRQ>
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	200000b9 	.word	0x200000b9

08000998 <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
    uint32_t status;

    if(SPI_1 == host_spi)
 800099e:	4b0a      	ldr	r3, [pc, #40]	; (80009c8 <port_GetEXT_IRQStatus+0x30>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d105      	bne.n	80009b2 <port_GetEXT_IRQStatus+0x1a>
    {
        status = EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 80009a6:	2028      	movs	r0, #40	; 0x28
 80009a8:	f7ff ff22 	bl	80007f0 <EXTI_GetITEnStatus>
 80009ac:	4603      	mov	r3, r0
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	e004      	b.n	80009bc <port_GetEXT_IRQStatus+0x24>
    }
    else
    {
        status = EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn2);
 80009b2:	2017      	movs	r0, #23
 80009b4:	f7ff ff1c 	bl	80007f0 <EXTI_GetITEnStatus>
 80009b8:	4603      	mov	r3, r0
 80009ba:	607b      	str	r3, [r7, #4]
    }
    return status;
 80009bc:	687b      	ldr	r3, [r7, #4]
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	200000b9 	.word	0x200000b9

080009cc <waitforsysstatus>:
 *               0 - The function will not wait for any bits in the system status register (lower 32 bits).
 *
 * return None
 */
void waitforsysstatus(uint32_t *lo_result, uint32_t *hi_result, uint32_t lo_mask, uint32_t hi_mask)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	60b9      	str	r1, [r7, #8]
 80009d6:	607a      	str	r2, [r7, #4]
 80009d8:	603b      	str	r3, [r7, #0]
    uint32_t lo_result_tmp = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	617b      	str	r3, [r7, #20]
    uint32_t hi_result_tmp = 0;
 80009de:	2300      	movs	r3, #0
 80009e0:	613b      	str	r3, [r7, #16]

    // If a mask has been passed into the function for the system status register (lower 32-bits)
    if (lo_mask)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d014      	beq.n	8000a12 <waitforsysstatus+0x46>
    {
        while (!((lo_result_tmp = dwt_readsysstatuslo()) & (lo_mask)))
 80009e8:	e00a      	b.n	8000a00 <waitforsysstatus+0x34>
        {
            // If a mask value is set for the system status register (higher 32-bits)
            if (hi_mask)
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d007      	beq.n	8000a00 <waitforsysstatus+0x34>
            {
                // If mask value for the system status register (higher 32-bits) is found
                if ((hi_result_tmp = dwt_readsysstatushi()) & hi_mask)
 80009f0:	f005 f846 	bl	8005a80 <dwt_readsysstatushi>
 80009f4:	6138      	str	r0, [r7, #16]
 80009f6:	693a      	ldr	r2, [r7, #16]
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	4013      	ands	r3, r2
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d115      	bne.n	8000a2c <waitforsysstatus+0x60>
        while (!((lo_result_tmp = dwt_readsysstatuslo()) & (lo_mask)))
 8000a00:	f005 f82c 	bl	8005a5c <dwt_readsysstatuslo>
 8000a04:	6178      	str	r0, [r7, #20]
 8000a06:	697a      	ldr	r2, [r7, #20]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	4013      	ands	r3, r2
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d0ec      	beq.n	80009ea <waitforsysstatus+0x1e>
 8000a10:	e00d      	b.n	8000a2e <waitforsysstatus+0x62>
                }
            }
        }
    }
    // if only a mask value for the system status register (higher 32-bits) is set
    else if (hi_mask)
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d00a      	beq.n	8000a2e <waitforsysstatus+0x62>
    {
        while (!((hi_result_tmp = dwt_readsysstatushi()) & (hi_mask))) { };
 8000a18:	bf00      	nop
 8000a1a:	f005 f831 	bl	8005a80 <dwt_readsysstatushi>
 8000a1e:	6138      	str	r0, [r7, #16]
 8000a20:	693a      	ldr	r2, [r7, #16]
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	4013      	ands	r3, r2
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d0f7      	beq.n	8000a1a <waitforsysstatus+0x4e>
 8000a2a:	e000      	b.n	8000a2e <waitforsysstatus+0x62>
                    break;
 8000a2c:	bf00      	nop
    }

    if (lo_result != NULL)
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d002      	beq.n	8000a3a <waitforsysstatus+0x6e>
    {
        *lo_result = lo_result_tmp;
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	697a      	ldr	r2, [r7, #20]
 8000a38:	601a      	str	r2, [r3, #0]
    }

    if (hi_result != NULL)
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d002      	beq.n	8000a46 <waitforsysstatus+0x7a>
    {
        *hi_result = hi_result_tmp;
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	601a      	str	r2, [r3, #0]
    }
}
 8000a46:	bf00      	nop
 8000a48:	3718      	adds	r7, #24
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
	...

08000a50 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08a      	sub	sp, #40	; 0x28
 8000a54:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
 8000a60:	609a      	str	r2, [r3, #8]
 8000a62:	60da      	str	r2, [r3, #12]
 8000a64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	613b      	str	r3, [r7, #16]
 8000a6a:	4b30      	ldr	r3, [pc, #192]	; (8000b2c <MX_GPIO_Init+0xdc>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a2f      	ldr	r2, [pc, #188]	; (8000b2c <MX_GPIO_Init+0xdc>)
 8000a70:	f043 0304 	orr.w	r3, r3, #4
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b2d      	ldr	r3, [pc, #180]	; (8000b2c <MX_GPIO_Init+0xdc>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0304 	and.w	r3, r3, #4
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	4b29      	ldr	r3, [pc, #164]	; (8000b2c <MX_GPIO_Init+0xdc>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a28      	ldr	r2, [pc, #160]	; (8000b2c <MX_GPIO_Init+0xdc>)
 8000a8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b26      	ldr	r3, [pc, #152]	; (8000b2c <MX_GPIO_Init+0xdc>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60bb      	str	r3, [r7, #8]
 8000aa2:	4b22      	ldr	r3, [pc, #136]	; (8000b2c <MX_GPIO_Init+0xdc>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a21      	ldr	r2, [pc, #132]	; (8000b2c <MX_GPIO_Init+0xdc>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b1f      	ldr	r3, [pc, #124]	; (8000b2c <MX_GPIO_Init+0xdc>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	60bb      	str	r3, [r7, #8]
 8000ab8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	4b1b      	ldr	r3, [pc, #108]	; (8000b2c <MX_GPIO_Init+0xdc>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a1a      	ldr	r2, [pc, #104]	; (8000b2c <MX_GPIO_Init+0xdc>)
 8000ac4:	f043 0302 	orr.w	r3, r3, #2
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b18      	ldr	r3, [pc, #96]	; (8000b2c <MX_GPIO_Init+0xdc>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0302 	and.w	r3, r3, #2
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DW_RST_Pin|DW_IRQ_Pin, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2103      	movs	r1, #3
 8000ada:	4815      	ldr	r0, [pc, #84]	; (8000b30 <MX_GPIO_Init+0xe0>)
 8000adc:	f000 ffa2 	bl	8001a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2110      	movs	r1, #16
 8000ae4:	4813      	ldr	r0, [pc, #76]	; (8000b34 <MX_GPIO_Init+0xe4>)
 8000ae6:	f000 ff9d 	bl	8001a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DW_RST_Pin|DW_IRQ_Pin;
 8000aea:	2303      	movs	r3, #3
 8000aec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aee:	2301      	movs	r3, #1
 8000af0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	2300      	movs	r3, #0
 8000af8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afa:	f107 0314 	add.w	r3, r7, #20
 8000afe:	4619      	mov	r1, r3
 8000b00:	480b      	ldr	r0, [pc, #44]	; (8000b30 <MX_GPIO_Init+0xe0>)
 8000b02:	f000 fe0b 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DW_CS_Pin;
 8000b06:	2310      	movs	r3, #16
 8000b08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b12:	2300      	movs	r3, #0
 8000b14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DW_CS_GPIO_Port, &GPIO_InitStruct);
 8000b16:	f107 0314 	add.w	r3, r7, #20
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4805      	ldr	r0, [pc, #20]	; (8000b34 <MX_GPIO_Init+0xe4>)
 8000b1e:	f000 fdfd 	bl	800171c <HAL_GPIO_Init>

}
 8000b22:	bf00      	nop
 8000b24:	3728      	adds	r7, #40	; 0x28
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	40020000 	.word	0x40020000
 8000b34:	40020800 	.word	0x40020800

08000b38 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b3c:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <MX_I2C1_Init+0x50>)
 8000b3e:	4a13      	ldr	r2, [pc, #76]	; (8000b8c <MX_I2C1_Init+0x54>)
 8000b40:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000b42:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <MX_I2C1_Init+0x50>)
 8000b44:	4a12      	ldr	r2, [pc, #72]	; (8000b90 <MX_I2C1_Init+0x58>)
 8000b46:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b48:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <MX_I2C1_Init+0x50>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <MX_I2C1_Init+0x50>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b54:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <MX_I2C1_Init+0x50>)
 8000b56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b5a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b5c:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <MX_I2C1_Init+0x50>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b62:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <MX_I2C1_Init+0x50>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b68:	4b07      	ldr	r3, [pc, #28]	; (8000b88 <MX_I2C1_Init+0x50>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b6e:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <MX_I2C1_Init+0x50>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b74:	4804      	ldr	r0, [pc, #16]	; (8000b88 <MX_I2C1_Init+0x50>)
 8000b76:	f000 ff6f 	bl	8001a58 <HAL_I2C_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b80:	f000 f8e2 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000120 	.word	0x20000120
 8000b8c:	40005400 	.word	0x40005400
 8000b90:	00061a80 	.word	0x00061a80

08000b94 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08a      	sub	sp, #40	; 0x28
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a21      	ldr	r2, [pc, #132]	; (8000c38 <HAL_I2C_MspInit+0xa4>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d13c      	bne.n	8000c30 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	613b      	str	r3, [r7, #16]
 8000bba:	4b20      	ldr	r3, [pc, #128]	; (8000c3c <HAL_I2C_MspInit+0xa8>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	4a1f      	ldr	r2, [pc, #124]	; (8000c3c <HAL_I2C_MspInit+0xa8>)
 8000bc0:	f043 0302 	orr.w	r3, r3, #2
 8000bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc6:	4b1d      	ldr	r3, [pc, #116]	; (8000c3c <HAL_I2C_MspInit+0xa8>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	f003 0302 	and.w	r3, r3, #2
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bd2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bd8:	2312      	movs	r3, #18
 8000bda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be0:	2303      	movs	r3, #3
 8000be2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000be4:	2304      	movs	r3, #4
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	4619      	mov	r1, r3
 8000bee:	4814      	ldr	r0, [pc, #80]	; (8000c40 <HAL_I2C_MspInit+0xac>)
 8000bf0:	f000 fd94 	bl	800171c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <HAL_I2C_MspInit+0xa8>)
 8000bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfc:	4a0f      	ldr	r2, [pc, #60]	; (8000c3c <HAL_I2C_MspInit+0xa8>)
 8000bfe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c02:	6413      	str	r3, [r2, #64]	; 0x40
 8000c04:	4b0d      	ldr	r3, [pc, #52]	; (8000c3c <HAL_I2C_MspInit+0xa8>)
 8000c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000c10:	2200      	movs	r2, #0
 8000c12:	2100      	movs	r1, #0
 8000c14:	201f      	movs	r0, #31
 8000c16:	f000 fc9c 	bl	8001552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000c1a:	201f      	movs	r0, #31
 8000c1c:	f000 fcb5 	bl	800158a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000c20:	2200      	movs	r2, #0
 8000c22:	2100      	movs	r1, #0
 8000c24:	2020      	movs	r0, #32
 8000c26:	f000 fc94 	bl	8001552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000c2a:	2020      	movs	r0, #32
 8000c2c:	f000 fcad 	bl	800158a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c30:	bf00      	nop
 8000c32:	3728      	adds	r7, #40	; 0x28
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40005400 	.word	0x40005400
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40020400 	.word	0x40020400

08000c44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c48:	f000 faee 	bl	8001228 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c4c:	f000 f814 	bl	8000c78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c50:	f7ff fefe 	bl	8000a50 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c54:	f000 fa44 	bl	80010e0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000c58:	f7ff ff6e 	bl	8000b38 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000c5c:	f000 f8ec 	bl	8000e38 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  port_DisableEXT_IRQ();
 8000c60:	f7ff fe76 	bl	8000950 <port_DisableEXT_IRQ>
  Sleep(1000);
 8000c64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c68:	f7ff fdb6 	bl	80007d8 <Sleep>
  setup_DWICRSTnIRQ(0);
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	f7ff fe01 	bl	8000874 <setup_DWICRSTnIRQ>
  simple_tx();
 8000c72:	f000 f86f 	bl	8000d54 <simple_tx>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c76:	e7fe      	b.n	8000c76 <main+0x32>

08000c78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b094      	sub	sp, #80	; 0x50
 8000c7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c7e:	f107 0320 	add.w	r3, r7, #32
 8000c82:	2230      	movs	r2, #48	; 0x30
 8000c84:	2100      	movs	r1, #0
 8000c86:	4618      	mov	r0, r3
 8000c88:	f012 f868 	bl	8012d5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c8c:	f107 030c 	add.w	r3, r7, #12
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	60bb      	str	r3, [r7, #8]
 8000ca0:	4b27      	ldr	r3, [pc, #156]	; (8000d40 <SystemClock_Config+0xc8>)
 8000ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca4:	4a26      	ldr	r2, [pc, #152]	; (8000d40 <SystemClock_Config+0xc8>)
 8000ca6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000caa:	6413      	str	r3, [r2, #64]	; 0x40
 8000cac:	4b24      	ldr	r3, [pc, #144]	; (8000d40 <SystemClock_Config+0xc8>)
 8000cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb4:	60bb      	str	r3, [r7, #8]
 8000cb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cb8:	2300      	movs	r3, #0
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	4b21      	ldr	r3, [pc, #132]	; (8000d44 <SystemClock_Config+0xcc>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a20      	ldr	r2, [pc, #128]	; (8000d44 <SystemClock_Config+0xcc>)
 8000cc2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cc6:	6013      	str	r3, [r2, #0]
 8000cc8:	4b1e      	ldr	r3, [pc, #120]	; (8000d44 <SystemClock_Config+0xcc>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cd0:	607b      	str	r3, [r7, #4]
 8000cd2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cdc:	2310      	movs	r3, #16
 8000cde:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ce8:	2308      	movs	r3, #8
 8000cea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000cec:	2364      	movs	r3, #100	; 0x64
 8000cee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cf4:	2304      	movs	r3, #4
 8000cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cf8:	f107 0320 	add.w	r3, r7, #32
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f002 fccb 	bl	8003698 <HAL_RCC_OscConfig>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d08:	f000 f81e 	bl	8000d48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d0c:	230f      	movs	r3, #15
 8000d0e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d10:	2302      	movs	r3, #2
 8000d12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d22:	f107 030c 	add.w	r3, r7, #12
 8000d26:	2103      	movs	r1, #3
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f002 ff2d 	bl	8003b88 <HAL_RCC_ClockConfig>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000d34:	f000 f808 	bl	8000d48 <Error_Handler>
  }
}
 8000d38:	bf00      	nop
 8000d3a:	3750      	adds	r7, #80	; 0x50
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40023800 	.word	0x40023800
 8000d44:	40007000 	.word	0x40007000

08000d48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d4c:	b672      	cpsid	i
}
 8000d4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <Error_Handler+0x8>
	...

08000d54 <simple_tx>:

/**
 * Application entry point.
 */
int simple_tx(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0

    /* Display application name on LCD. */
//    test_run_info((unsigned char *)APP_NAME);

    /* Configure SPI rate, DW3000 supports up to 36 MHz */
    port_set_dw_ic_spi_fastrate();
 8000d5a:	f7ff fde9 	bl	8000930 <port_set_dw_ic_spi_fastrate>

    /* Reset DW IC */
    reset_DWIC(); /* Target specific drive of RSTn line into DW IC low for a period. */
 8000d5e:	f7ff fd67 	bl	8000830 <reset_DWIC>

    Sleep(2); // Time needed for DW3000 to start up (transition from INIT_RC to IDLE_RC, or could wait for SPIRDY event)
 8000d62:	2002      	movs	r0, #2
 8000d64:	f7ff fd38 	bl	80007d8 <Sleep>

    /* Probe for the correct device driver. */
    dwt_probe((struct dwt_probe_s *)&dw3000_probe_interf);
 8000d68:	482b      	ldr	r0, [pc, #172]	; (8000e18 <simple_tx+0xc4>)
 8000d6a:	f004 fd61 	bl	8005830 <dwt_probe>

    dev_id = dwt_readdevid();
 8000d6e:	f004 fdab 	bl	80058c8 <dwt_readdevid>
 8000d72:	6078      	str	r0, [r7, #4]

    while (!dwt_checkidlerc()) /* Need to make sure DW IC is in IDLE_RC before proceeding */ { };
 8000d74:	bf00      	nop
 8000d76:	f004 fe25 	bl	80059c4 <dwt_checkidlerc>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d0fa      	beq.n	8000d76 <simple_tx+0x22>

    if (dwt_initialise(DWT_DW_INIT) == DWT_ERROR)
 8000d80:	2000      	movs	r0, #0
 8000d82:	f004 fdb3 	bl	80058ec <dwt_initialise>
 8000d86:	4603      	mov	r3, r0
 8000d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d8c:	d107      	bne.n	8000d9e <simple_tx+0x4a>
    {
//        test_run_info((unsigned char *)"INIT FAILED     ");
    	HAL_UART_Transmit(&huart2, "Init Failed!!!", 15, HAL_MAX_DELAY);
 8000d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d92:	220f      	movs	r2, #15
 8000d94:	4921      	ldr	r1, [pc, #132]	; (8000e1c <simple_tx+0xc8>)
 8000d96:	4822      	ldr	r0, [pc, #136]	; (8000e20 <simple_tx+0xcc>)
 8000d98:	f003 fccf 	bl	800473a <HAL_UART_Transmit>
        while (1) { };
 8000d9c:	e7fe      	b.n	8000d9c <simple_tx+0x48>
    }

    /* Enabling LEDs here for debug so that for each TX the D1 LED will flash on DW3000 red eval-shield boards. */
    dwt_setleds(DWT_LEDS_ENABLE | DWT_LEDS_INIT_BLINK);
 8000d9e:	2003      	movs	r0, #3
 8000da0:	f004 fe38 	bl	8005a14 <dwt_setleds>

    /* Configure DW IC. See NOTE 5 below. */
    /* if the dwt_configure returns DWT_ERROR either the PLL or RX calibration has failed the host should reset the device */
    if (dwt_configure(&config))
 8000da4:	481f      	ldr	r0, [pc, #124]	; (8000e24 <simple_tx+0xd0>)
 8000da6:	f004 fdad 	bl	8005904 <dwt_configure>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d007      	beq.n	8000dc0 <simple_tx+0x6c>
    {
//        test_run_info((unsigned char *)"CONFIG FAILED     ");
        HAL_UART_Transmit(&huart2, "Config Failed!!!", 16, HAL_MAX_DELAY);
 8000db0:	f04f 33ff 	mov.w	r3, #4294967295
 8000db4:	2210      	movs	r2, #16
 8000db6:	491c      	ldr	r1, [pc, #112]	; (8000e28 <simple_tx+0xd4>)
 8000db8:	4819      	ldr	r0, [pc, #100]	; (8000e20 <simple_tx+0xcc>)
 8000dba:	f003 fcbe 	bl	800473a <HAL_UART_Transmit>
        while (1) { };
 8000dbe:	e7fe      	b.n	8000dbe <simple_tx+0x6a>
    }

    /* Configure the TX spectrum parameters (power PG delay and PG Count) */
    dwt_configuretxrf(&txconfig_options);
 8000dc0:	481a      	ldr	r0, [pc, #104]	; (8000e2c <simple_tx+0xd8>)
 8000dc2:	f004 fdab 	bl	800591c <dwt_configuretxrf>

    /* Loop forever sending frames periodically. */
    while (1)
    {
        /* Write frame data to DW IC and prepare transmission. See NOTE 3 below.*/
        dwt_writetxdata(FRAME_LENGTH - FCS_LEN, tx_msg, 0); /* Zero offset in TX buffer. */
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	4919      	ldr	r1, [pc, #100]	; (8000e30 <simple_tx+0xdc>)
 8000dca:	200a      	movs	r0, #10
 8000dcc:	f004 fdb2 	bl	8005934 <dwt_writetxdata>

        /* In this example since the length of the transmitted frame does not change,
         * nor the other parameters of the dwt_writetxfctrl function, the
         * dwt_writetxfctrl call could be outside the main while(1) loop.
         */
        dwt_writetxfctrl(FRAME_LENGTH, 0, 0); /* Zero offset in TX buffer, no ranging. */
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	200c      	movs	r0, #12
 8000dd6:	f004 fdbb 	bl	8005950 <dwt_writetxfctrl>

        /* Start transmission. */
        dwt_starttx(DWT_START_TX_IMMEDIATE);
 8000dda:	2000      	movs	r0, #0
 8000ddc:	f004 fdc6 	bl	800596c <dwt_starttx>
        /* Poll DW IC until TX frame sent event set. See NOTE 4 below.
         * STATUS register is 4 bytes long but, as the event we are looking
         * at is in the first byte of the register, we can use this simplest
         * API function to access it.*/
        waitforsysstatus(NULL, NULL, DWT_INT_TXFRS_BIT_MASK, 0);
 8000de0:	2300      	movs	r3, #0
 8000de2:	2280      	movs	r2, #128	; 0x80
 8000de4:	2100      	movs	r1, #0
 8000de6:	2000      	movs	r0, #0
 8000de8:	f7ff fdf0 	bl	80009cc <waitforsysstatus>

        /* Clear TX frame sent event. */
        dwt_writesysstatuslo(DWT_INT_TXFRS_BIT_MASK);
 8000dec:	2080      	movs	r0, #128	; 0x80
 8000dee:	f004 fe23 	bl	8005a38 <dwt_writesysstatuslo>

//        test_run_info((unsigned char *)"TX Frame Sent");
        HAL_UART_Transmit(&huart2, "TX Frame Sent😊", 15, HAL_MAX_DELAY);
 8000df2:	f04f 33ff 	mov.w	r3, #4294967295
 8000df6:	220f      	movs	r2, #15
 8000df8:	490e      	ldr	r1, [pc, #56]	; (8000e34 <simple_tx+0xe0>)
 8000dfa:	4809      	ldr	r0, [pc, #36]	; (8000e20 <simple_tx+0xcc>)
 8000dfc:	f003 fc9d 	bl	800473a <HAL_UART_Transmit>

        /* Execute a delay between transmissions. */
        Sleep(TX_DELAY_MS);
 8000e00:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e04:	f7ff fce8 	bl	80007d8 <Sleep>

        /* Increment the blink frame sequence number (modulo 256). */
        tx_msg[BLINK_FRAME_SN_IDX]++;
 8000e08:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <simple_tx+0xdc>)
 8000e0a:	785b      	ldrb	r3, [r3, #1]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	4b07      	ldr	r3, [pc, #28]	; (8000e30 <simple_tx+0xdc>)
 8000e12:	705a      	strb	r2, [r3, #1]
        dwt_writetxdata(FRAME_LENGTH - FCS_LEN, tx_msg, 0); /* Zero offset in TX buffer. */
 8000e14:	e7d7      	b.n	8000dc6 <simple_tx+0x72>
 8000e16:	bf00      	nop
 8000e18:	08012f24 	.word	0x08012f24
 8000e1c:	08012ec8 	.word	0x08012ec8
 8000e20:	200001cc 	.word	0x200001cc
 8000e24:	20000010 	.word	0x20000010
 8000e28:	08012ed8 	.word	0x08012ed8
 8000e2c:	20000000 	.word	0x20000000
 8000e30:	20000020 	.word	0x20000020
 8000e34:	08012eec 	.word	0x08012eec

08000e38 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000e3c:	4b17      	ldr	r3, [pc, #92]	; (8000e9c <MX_SPI1_Init+0x64>)
 8000e3e:	4a18      	ldr	r2, [pc, #96]	; (8000ea0 <MX_SPI1_Init+0x68>)
 8000e40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e42:	4b16      	ldr	r3, [pc, #88]	; (8000e9c <MX_SPI1_Init+0x64>)
 8000e44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e4a:	4b14      	ldr	r3, [pc, #80]	; (8000e9c <MX_SPI1_Init+0x64>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e50:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <MX_SPI1_Init+0x64>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e56:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <MX_SPI1_Init+0x64>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e5c:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <MX_SPI1_Init+0x64>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e62:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <MX_SPI1_Init+0x64>)
 8000e64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e68:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e6a:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <MX_SPI1_Init+0x64>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e70:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <MX_SPI1_Init+0x64>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e76:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <MX_SPI1_Init+0x64>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e7c:	4b07      	ldr	r3, [pc, #28]	; (8000e9c <MX_SPI1_Init+0x64>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e82:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <MX_SPI1_Init+0x64>)
 8000e84:	220a      	movs	r2, #10
 8000e86:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e88:	4804      	ldr	r0, [pc, #16]	; (8000e9c <MX_SPI1_Init+0x64>)
 8000e8a:	f003 f84d 	bl	8003f28 <HAL_SPI_Init>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e94:	f7ff ff58 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e98:	bf00      	nop
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20000174 	.word	0x20000174
 8000ea0:	40013000 	.word	0x40013000

08000ea4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08a      	sub	sp, #40	; 0x28
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a1d      	ldr	r2, [pc, #116]	; (8000f38 <HAL_SPI_MspInit+0x94>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d133      	bne.n	8000f2e <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	613b      	str	r3, [r7, #16]
 8000eca:	4b1c      	ldr	r3, [pc, #112]	; (8000f3c <HAL_SPI_MspInit+0x98>)
 8000ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ece:	4a1b      	ldr	r2, [pc, #108]	; (8000f3c <HAL_SPI_MspInit+0x98>)
 8000ed0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ed4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ed6:	4b19      	ldr	r3, [pc, #100]	; (8000f3c <HAL_SPI_MspInit+0x98>)
 8000ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ede:	613b      	str	r3, [r7, #16]
 8000ee0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <HAL_SPI_MspInit+0x98>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a14      	ldr	r2, [pc, #80]	; (8000f3c <HAL_SPI_MspInit+0x98>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b12      	ldr	r3, [pc, #72]	; (8000f3c <HAL_SPI_MspInit+0x98>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000efe:	23e0      	movs	r3, #224	; 0xe0
 8000f00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f02:	2302      	movs	r3, #2
 8000f04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f0e:	2305      	movs	r3, #5
 8000f10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f12:	f107 0314 	add.w	r3, r7, #20
 8000f16:	4619      	mov	r1, r3
 8000f18:	4809      	ldr	r0, [pc, #36]	; (8000f40 <HAL_SPI_MspInit+0x9c>)
 8000f1a:	f000 fbff 	bl	800171c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2100      	movs	r1, #0
 8000f22:	2023      	movs	r0, #35	; 0x23
 8000f24:	f000 fb15 	bl	8001552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000f28:	2023      	movs	r0, #35	; 0x23
 8000f2a:	f000 fb2e 	bl	800158a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000f2e:	bf00      	nop
 8000f30:	3728      	adds	r7, #40	; 0x28
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40013000 	.word	0x40013000
 8000f3c:	40023800 	.word	0x40023800
 8000f40:	40020000 	.word	0x40020000

08000f44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	607b      	str	r3, [r7, #4]
 8000f4e:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <HAL_MspInit+0x4c>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f52:	4a0f      	ldr	r2, [pc, #60]	; (8000f90 <HAL_MspInit+0x4c>)
 8000f54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f58:	6453      	str	r3, [r2, #68]	; 0x44
 8000f5a:	4b0d      	ldr	r3, [pc, #52]	; (8000f90 <HAL_MspInit+0x4c>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	603b      	str	r3, [r7, #0]
 8000f6a:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <HAL_MspInit+0x4c>)
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6e:	4a08      	ldr	r2, [pc, #32]	; (8000f90 <HAL_MspInit+0x4c>)
 8000f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f74:	6413      	str	r3, [r2, #64]	; 0x40
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <HAL_MspInit+0x4c>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7e:	603b      	str	r3, [r7, #0]
 8000f80:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f82:	2007      	movs	r0, #7
 8000f84:	f000 fada 	bl	800153c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f88:	bf00      	nop
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40023800 	.word	0x40023800

08000f94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <NMI_Handler+0x4>
	...

08000f9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_UART_Transmit(&huart2,"Hard Fault!!!", 15, 100);
 8000fa0:	2364      	movs	r3, #100	; 0x64
 8000fa2:	220f      	movs	r2, #15
 8000fa4:	4902      	ldr	r1, [pc, #8]	; (8000fb0 <HardFault_Handler+0x14>)
 8000fa6:	4803      	ldr	r0, [pc, #12]	; (8000fb4 <HardFault_Handler+0x18>)
 8000fa8:	f003 fbc7 	bl	800473a <HAL_UART_Transmit>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fac:	e7fe      	b.n	8000fac <HardFault_Handler+0x10>
 8000fae:	bf00      	nop
 8000fb0:	08012f00 	.word	0x08012f00
 8000fb4:	200001cc 	.word	0x200001cc

08000fb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <MemManage_Handler+0x4>

08000fbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fc2:	e7fe      	b.n	8000fc2 <BusFault_Handler+0x4>

08000fc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <UsageFault_Handler+0x4>

08000fca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ff8:	f000 f968 	bl	80012cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001004:	4802      	ldr	r0, [pc, #8]	; (8001010 <I2C1_EV_IRQHandler+0x10>)
 8001006:	f000 fe6b 	bl	8001ce0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000120 	.word	0x20000120

08001014 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001018:	4802      	ldr	r0, [pc, #8]	; (8001024 <I2C1_ER_IRQHandler+0x10>)
 800101a:	f000 ffd2 	bl	8001fc2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000120 	.word	0x20000120

08001028 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800102c:	4802      	ldr	r0, [pc, #8]	; (8001038 <SPI1_IRQHandler+0x10>)
 800102e:	f003 f941 	bl	80042b4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000174 	.word	0x20000174

0800103c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001040:	4802      	ldr	r0, [pc, #8]	; (800104c <USART2_IRQHandler+0x10>)
 8001042:	f003 fc0d 	bl	8004860 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	200001cc 	.word	0x200001cc

08001050 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001058:	4a14      	ldr	r2, [pc, #80]	; (80010ac <_sbrk+0x5c>)
 800105a:	4b15      	ldr	r3, [pc, #84]	; (80010b0 <_sbrk+0x60>)
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001064:	4b13      	ldr	r3, [pc, #76]	; (80010b4 <_sbrk+0x64>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d102      	bne.n	8001072 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800106c:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <_sbrk+0x64>)
 800106e:	4a12      	ldr	r2, [pc, #72]	; (80010b8 <_sbrk+0x68>)
 8001070:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001072:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <_sbrk+0x64>)
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4413      	add	r3, r2
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	429a      	cmp	r2, r3
 800107e:	d207      	bcs.n	8001090 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001080:	f011 fe3a 	bl	8012cf8 <__errno>
 8001084:	4603      	mov	r3, r0
 8001086:	220c      	movs	r2, #12
 8001088:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800108a:	f04f 33ff 	mov.w	r3, #4294967295
 800108e:	e009      	b.n	80010a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001090:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <_sbrk+0x64>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001096:	4b07      	ldr	r3, [pc, #28]	; (80010b4 <_sbrk+0x64>)
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4413      	add	r3, r2
 800109e:	4a05      	ldr	r2, [pc, #20]	; (80010b4 <_sbrk+0x64>)
 80010a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010a2:	68fb      	ldr	r3, [r7, #12]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3718      	adds	r7, #24
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20020000 	.word	0x20020000
 80010b0:	00000400 	.word	0x00000400
 80010b4:	200000bc 	.word	0x200000bc
 80010b8:	20000228 	.word	0x20000228

080010bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010c0:	4b06      	ldr	r3, [pc, #24]	; (80010dc <SystemInit+0x20>)
 80010c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010c6:	4a05      	ldr	r2, [pc, #20]	; (80010dc <SystemInit+0x20>)
 80010c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010e4:	4b11      	ldr	r3, [pc, #68]	; (800112c <MX_USART2_UART_Init+0x4c>)
 80010e6:	4a12      	ldr	r2, [pc, #72]	; (8001130 <MX_USART2_UART_Init+0x50>)
 80010e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010ea:	4b10      	ldr	r3, [pc, #64]	; (800112c <MX_USART2_UART_Init+0x4c>)
 80010ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010f2:	4b0e      	ldr	r3, [pc, #56]	; (800112c <MX_USART2_UART_Init+0x4c>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010f8:	4b0c      	ldr	r3, [pc, #48]	; (800112c <MX_USART2_UART_Init+0x4c>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010fe:	4b0b      	ldr	r3, [pc, #44]	; (800112c <MX_USART2_UART_Init+0x4c>)
 8001100:	2200      	movs	r2, #0
 8001102:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001104:	4b09      	ldr	r3, [pc, #36]	; (800112c <MX_USART2_UART_Init+0x4c>)
 8001106:	220c      	movs	r2, #12
 8001108:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800110a:	4b08      	ldr	r3, [pc, #32]	; (800112c <MX_USART2_UART_Init+0x4c>)
 800110c:	2200      	movs	r2, #0
 800110e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001110:	4b06      	ldr	r3, [pc, #24]	; (800112c <MX_USART2_UART_Init+0x4c>)
 8001112:	2200      	movs	r2, #0
 8001114:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001116:	4805      	ldr	r0, [pc, #20]	; (800112c <MX_USART2_UART_Init+0x4c>)
 8001118:	f003 fac2 	bl	80046a0 <HAL_UART_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001122:	f7ff fe11 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	200001cc 	.word	0x200001cc
 8001130:	40004400 	.word	0x40004400

08001134 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08a      	sub	sp, #40	; 0x28
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a1d      	ldr	r2, [pc, #116]	; (80011c8 <HAL_UART_MspInit+0x94>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d133      	bne.n	80011be <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	613b      	str	r3, [r7, #16]
 800115a:	4b1c      	ldr	r3, [pc, #112]	; (80011cc <HAL_UART_MspInit+0x98>)
 800115c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115e:	4a1b      	ldr	r2, [pc, #108]	; (80011cc <HAL_UART_MspInit+0x98>)
 8001160:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001164:	6413      	str	r3, [r2, #64]	; 0x40
 8001166:	4b19      	ldr	r3, [pc, #100]	; (80011cc <HAL_UART_MspInit+0x98>)
 8001168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116e:	613b      	str	r3, [r7, #16]
 8001170:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	4b15      	ldr	r3, [pc, #84]	; (80011cc <HAL_UART_MspInit+0x98>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4a14      	ldr	r2, [pc, #80]	; (80011cc <HAL_UART_MspInit+0x98>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	4b12      	ldr	r3, [pc, #72]	; (80011cc <HAL_UART_MspInit+0x98>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800118e:	230c      	movs	r3, #12
 8001190:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001192:	2302      	movs	r3, #2
 8001194:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119a:	2303      	movs	r3, #3
 800119c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800119e:	2307      	movs	r3, #7
 80011a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a2:	f107 0314 	add.w	r3, r7, #20
 80011a6:	4619      	mov	r1, r3
 80011a8:	4809      	ldr	r0, [pc, #36]	; (80011d0 <HAL_UART_MspInit+0x9c>)
 80011aa:	f000 fab7 	bl	800171c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2100      	movs	r1, #0
 80011b2:	2026      	movs	r0, #38	; 0x26
 80011b4:	f000 f9cd 	bl	8001552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011b8:	2026      	movs	r0, #38	; 0x26
 80011ba:	f000 f9e6 	bl	800158a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80011be:	bf00      	nop
 80011c0:	3728      	adds	r7, #40	; 0x28
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40004400 	.word	0x40004400
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40020000 	.word	0x40020000

080011d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80011d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800120c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011d8:	480d      	ldr	r0, [pc, #52]	; (8001210 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011da:	490e      	ldr	r1, [pc, #56]	; (8001214 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011dc:	4a0e      	ldr	r2, [pc, #56]	; (8001218 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011e0:	e002      	b.n	80011e8 <LoopCopyDataInit>

080011e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011e6:	3304      	adds	r3, #4

080011e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011ec:	d3f9      	bcc.n	80011e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ee:	4a0b      	ldr	r2, [pc, #44]	; (800121c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011f0:	4c0b      	ldr	r4, [pc, #44]	; (8001220 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f4:	e001      	b.n	80011fa <LoopFillZerobss>

080011f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f8:	3204      	adds	r2, #4

080011fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011fc:	d3fb      	bcc.n	80011f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011fe:	f7ff ff5d 	bl	80010bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001202:	f011 fd7f 	bl	8012d04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001206:	f7ff fd1d 	bl	8000c44 <main>
  bx  lr    
 800120a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800120c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001210:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001214:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8001218:	080133b8 	.word	0x080133b8
  ldr r2, =_sbss
 800121c:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8001220:	20000224 	.word	0x20000224

08001224 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001224:	e7fe      	b.n	8001224 <ADC_IRQHandler>
	...

08001228 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800122c:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <HAL_Init+0x40>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a0d      	ldr	r2, [pc, #52]	; (8001268 <HAL_Init+0x40>)
 8001232:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001236:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001238:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <HAL_Init+0x40>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a0a      	ldr	r2, [pc, #40]	; (8001268 <HAL_Init+0x40>)
 800123e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001242:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001244:	4b08      	ldr	r3, [pc, #32]	; (8001268 <HAL_Init+0x40>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a07      	ldr	r2, [pc, #28]	; (8001268 <HAL_Init+0x40>)
 800124a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800124e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001250:	2003      	movs	r0, #3
 8001252:	f000 f973 	bl	800153c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001256:	2000      	movs	r0, #0
 8001258:	f000 f808 	bl	800126c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800125c:	f7ff fe72 	bl	8000f44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40023c00 	.word	0x40023c00

0800126c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <HAL_InitTick+0x54>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <HAL_InitTick+0x58>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	4619      	mov	r1, r3
 800127e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001282:	fbb3 f3f1 	udiv	r3, r3, r1
 8001286:	fbb2 f3f3 	udiv	r3, r2, r3
 800128a:	4618      	mov	r0, r3
 800128c:	f000 f999 	bl	80015c2 <HAL_SYSTICK_Config>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e00e      	b.n	80012b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2b0f      	cmp	r3, #15
 800129e:	d80a      	bhi.n	80012b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012a0:	2200      	movs	r2, #0
 80012a2:	6879      	ldr	r1, [r7, #4]
 80012a4:	f04f 30ff 	mov.w	r0, #4294967295
 80012a8:	f000 f953 	bl	8001552 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012ac:	4a06      	ldr	r2, [pc, #24]	; (80012c8 <HAL_InitTick+0x5c>)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012b2:	2300      	movs	r3, #0
 80012b4:	e000      	b.n	80012b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	2000002c 	.word	0x2000002c
 80012c4:	20000034 	.word	0x20000034
 80012c8:	20000030 	.word	0x20000030

080012cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <HAL_IncTick+0x20>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	461a      	mov	r2, r3
 80012d6:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <HAL_IncTick+0x24>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4413      	add	r3, r2
 80012dc:	4a04      	ldr	r2, [pc, #16]	; (80012f0 <HAL_IncTick+0x24>)
 80012de:	6013      	str	r3, [r2, #0]
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	20000034 	.word	0x20000034
 80012f0:	20000210 	.word	0x20000210

080012f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  return uwTick;
 80012f8:	4b03      	ldr	r3, [pc, #12]	; (8001308 <HAL_GetTick+0x14>)
 80012fa:	681b      	ldr	r3, [r3, #0]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	20000210 	.word	0x20000210

0800130c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001314:	f7ff ffee 	bl	80012f4 <HAL_GetTick>
 8001318:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001324:	d005      	beq.n	8001332 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001326:	4b0a      	ldr	r3, [pc, #40]	; (8001350 <HAL_Delay+0x44>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	461a      	mov	r2, r3
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	4413      	add	r3, r2
 8001330:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001332:	bf00      	nop
 8001334:	f7ff ffde 	bl	80012f4 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	68fa      	ldr	r2, [r7, #12]
 8001340:	429a      	cmp	r2, r3
 8001342:	d8f7      	bhi.n	8001334 <HAL_Delay+0x28>
  {
  }
}
 8001344:	bf00      	nop
 8001346:	bf00      	nop
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000034 	.word	0x20000034

08001354 <__NVIC_SetPriorityGrouping>:
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001364:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <__NVIC_SetPriorityGrouping+0x44>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800136a:	68ba      	ldr	r2, [r7, #8]
 800136c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001370:	4013      	ands	r3, r2
 8001372:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800137c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001380:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001384:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001386:	4a04      	ldr	r2, [pc, #16]	; (8001398 <__NVIC_SetPriorityGrouping+0x44>)
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	60d3      	str	r3, [r2, #12]
}
 800138c:	bf00      	nop
 800138e:	3714      	adds	r7, #20
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <__NVIC_GetPriorityGrouping>:
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013a0:	4b04      	ldr	r3, [pc, #16]	; (80013b4 <__NVIC_GetPriorityGrouping+0x18>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	0a1b      	lsrs	r3, r3, #8
 80013a6:	f003 0307 	and.w	r3, r3, #7
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <__NVIC_EnableIRQ>:
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	db0b      	blt.n	80013e2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	f003 021f 	and.w	r2, r3, #31
 80013d0:	4907      	ldr	r1, [pc, #28]	; (80013f0 <__NVIC_EnableIRQ+0x38>)
 80013d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d6:	095b      	lsrs	r3, r3, #5
 80013d8:	2001      	movs	r0, #1
 80013da:	fa00 f202 	lsl.w	r2, r0, r2
 80013de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	e000e100 	.word	0xe000e100

080013f4 <__NVIC_DisableIRQ>:
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001402:	2b00      	cmp	r3, #0
 8001404:	db12      	blt.n	800142c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	f003 021f 	and.w	r2, r3, #31
 800140c:	490a      	ldr	r1, [pc, #40]	; (8001438 <__NVIC_DisableIRQ+0x44>)
 800140e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001412:	095b      	lsrs	r3, r3, #5
 8001414:	2001      	movs	r0, #1
 8001416:	fa00 f202 	lsl.w	r2, r0, r2
 800141a:	3320      	adds	r3, #32
 800141c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001420:	f3bf 8f4f 	dsb	sy
}
 8001424:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001426:	f3bf 8f6f 	isb	sy
}
 800142a:	bf00      	nop
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	e000e100 	.word	0xe000e100

0800143c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	6039      	str	r1, [r7, #0]
 8001446:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144c:	2b00      	cmp	r3, #0
 800144e:	db0a      	blt.n	8001466 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	b2da      	uxtb	r2, r3
 8001454:	490c      	ldr	r1, [pc, #48]	; (8001488 <__NVIC_SetPriority+0x4c>)
 8001456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145a:	0112      	lsls	r2, r2, #4
 800145c:	b2d2      	uxtb	r2, r2
 800145e:	440b      	add	r3, r1
 8001460:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001464:	e00a      	b.n	800147c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	b2da      	uxtb	r2, r3
 800146a:	4908      	ldr	r1, [pc, #32]	; (800148c <__NVIC_SetPriority+0x50>)
 800146c:	79fb      	ldrb	r3, [r7, #7]
 800146e:	f003 030f 	and.w	r3, r3, #15
 8001472:	3b04      	subs	r3, #4
 8001474:	0112      	lsls	r2, r2, #4
 8001476:	b2d2      	uxtb	r2, r2
 8001478:	440b      	add	r3, r1
 800147a:	761a      	strb	r2, [r3, #24]
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	e000e100 	.word	0xe000e100
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001490:	b480      	push	{r7}
 8001492:	b089      	sub	sp, #36	; 0x24
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	f1c3 0307 	rsb	r3, r3, #7
 80014aa:	2b04      	cmp	r3, #4
 80014ac:	bf28      	it	cs
 80014ae:	2304      	movcs	r3, #4
 80014b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	3304      	adds	r3, #4
 80014b6:	2b06      	cmp	r3, #6
 80014b8:	d902      	bls.n	80014c0 <NVIC_EncodePriority+0x30>
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	3b03      	subs	r3, #3
 80014be:	e000      	b.n	80014c2 <NVIC_EncodePriority+0x32>
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c4:	f04f 32ff 	mov.w	r2, #4294967295
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43da      	mvns	r2, r3
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	401a      	ands	r2, r3
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014d8:	f04f 31ff 	mov.w	r1, #4294967295
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	fa01 f303 	lsl.w	r3, r1, r3
 80014e2:	43d9      	mvns	r1, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e8:	4313      	orrs	r3, r2
         );
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3724      	adds	r7, #36	; 0x24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
	...

080014f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3b01      	subs	r3, #1
 8001504:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001508:	d301      	bcc.n	800150e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800150a:	2301      	movs	r3, #1
 800150c:	e00f      	b.n	800152e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800150e:	4a0a      	ldr	r2, [pc, #40]	; (8001538 <SysTick_Config+0x40>)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3b01      	subs	r3, #1
 8001514:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001516:	210f      	movs	r1, #15
 8001518:	f04f 30ff 	mov.w	r0, #4294967295
 800151c:	f7ff ff8e 	bl	800143c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001520:	4b05      	ldr	r3, [pc, #20]	; (8001538 <SysTick_Config+0x40>)
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001526:	4b04      	ldr	r3, [pc, #16]	; (8001538 <SysTick_Config+0x40>)
 8001528:	2207      	movs	r2, #7
 800152a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	e000e010 	.word	0xe000e010

0800153c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7ff ff05 	bl	8001354 <__NVIC_SetPriorityGrouping>
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001552:	b580      	push	{r7, lr}
 8001554:	b086      	sub	sp, #24
 8001556:	af00      	add	r7, sp, #0
 8001558:	4603      	mov	r3, r0
 800155a:	60b9      	str	r1, [r7, #8]
 800155c:	607a      	str	r2, [r7, #4]
 800155e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001564:	f7ff ff1a 	bl	800139c <__NVIC_GetPriorityGrouping>
 8001568:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	68b9      	ldr	r1, [r7, #8]
 800156e:	6978      	ldr	r0, [r7, #20]
 8001570:	f7ff ff8e 	bl	8001490 <NVIC_EncodePriority>
 8001574:	4602      	mov	r2, r0
 8001576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800157a:	4611      	mov	r1, r2
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff ff5d 	bl	800143c <__NVIC_SetPriority>
}
 8001582:	bf00      	nop
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	4603      	mov	r3, r0
 8001592:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff ff0d 	bl	80013b8 <__NVIC_EnableIRQ>
}
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b082      	sub	sp, #8
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	4603      	mov	r3, r0
 80015ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80015b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff ff1d 	bl	80013f4 <__NVIC_DisableIRQ>
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f7ff ff94 	bl	80014f8 <SysTick_Config>
 80015d0:	4603      	mov	r3, r0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b084      	sub	sp, #16
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80015e8:	f7ff fe84 	bl	80012f4 <HAL_GetTick>
 80015ec:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d008      	beq.n	800160c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2280      	movs	r2, #128	; 0x80
 80015fe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e052      	b.n	80016b2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f022 0216 	bic.w	r2, r2, #22
 800161a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	695a      	ldr	r2, [r3, #20]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800162a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001630:	2b00      	cmp	r3, #0
 8001632:	d103      	bne.n	800163c <HAL_DMA_Abort+0x62>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001638:	2b00      	cmp	r3, #0
 800163a:	d007      	beq.n	800164c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f022 0208 	bic.w	r2, r2, #8
 800164a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f022 0201 	bic.w	r2, r2, #1
 800165a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800165c:	e013      	b.n	8001686 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800165e:	f7ff fe49 	bl	80012f4 <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b05      	cmp	r3, #5
 800166a:	d90c      	bls.n	8001686 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2220      	movs	r2, #32
 8001670:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2203      	movs	r2, #3
 8001676:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2200      	movs	r2, #0
 800167e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e015      	b.n	80016b2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0301 	and.w	r3, r3, #1
 8001690:	2b00      	cmp	r3, #0
 8001692:	d1e4      	bne.n	800165e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001698:	223f      	movs	r2, #63	; 0x3f
 800169a:	409a      	lsls	r2, r3
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2201      	movs	r2, #1
 80016a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016ba:	b480      	push	{r7}
 80016bc:	b083      	sub	sp, #12
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d004      	beq.n	80016d8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2280      	movs	r2, #128	; 0x80
 80016d2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e00c      	b.n	80016f2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2205      	movs	r2, #5
 80016dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f022 0201 	bic.w	r2, r2, #1
 80016ee:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80016fe:	b480      	push	{r7}
 8001700:	b083      	sub	sp, #12
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800170c:	b2db      	uxtb	r3, r3
}
 800170e:	4618      	mov	r0, r3
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
	...

0800171c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800171c:	b480      	push	{r7}
 800171e:	b089      	sub	sp, #36	; 0x24
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001726:	2300      	movs	r3, #0
 8001728:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800172a:	2300      	movs	r3, #0
 800172c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800172e:	2300      	movs	r3, #0
 8001730:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001732:	2300      	movs	r3, #0
 8001734:	61fb      	str	r3, [r7, #28]
 8001736:	e159      	b.n	80019ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001738:	2201      	movs	r2, #1
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	697a      	ldr	r2, [r7, #20]
 8001748:	4013      	ands	r3, r2
 800174a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	429a      	cmp	r2, r3
 8001752:	f040 8148 	bne.w	80019e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f003 0303 	and.w	r3, r3, #3
 800175e:	2b01      	cmp	r3, #1
 8001760:	d005      	beq.n	800176e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800176a:	2b02      	cmp	r3, #2
 800176c:	d130      	bne.n	80017d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	2203      	movs	r2, #3
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	43db      	mvns	r3, r3
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	4013      	ands	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	68da      	ldr	r2, [r3, #12]
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	4313      	orrs	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017a4:	2201      	movs	r2, #1
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	43db      	mvns	r3, r3
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	4013      	ands	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	091b      	lsrs	r3, r3, #4
 80017ba:	f003 0201 	and.w	r2, r3, #1
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f003 0303 	and.w	r3, r3, #3
 80017d8:	2b03      	cmp	r3, #3
 80017da:	d017      	beq.n	800180c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	2203      	movs	r2, #3
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	43db      	mvns	r3, r3
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	4013      	ands	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	689a      	ldr	r2, [r3, #8]
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	4313      	orrs	r3, r2
 8001804:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f003 0303 	and.w	r3, r3, #3
 8001814:	2b02      	cmp	r3, #2
 8001816:	d123      	bne.n	8001860 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	08da      	lsrs	r2, r3, #3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3208      	adds	r2, #8
 8001820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001824:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	f003 0307 	and.w	r3, r3, #7
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	220f      	movs	r2, #15
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	43db      	mvns	r3, r3
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	4013      	ands	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	691a      	ldr	r2, [r3, #16]
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	4313      	orrs	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	08da      	lsrs	r2, r3, #3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	3208      	adds	r2, #8
 800185a:	69b9      	ldr	r1, [r7, #24]
 800185c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	2203      	movs	r2, #3
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	43db      	mvns	r3, r3
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4013      	ands	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f003 0203 	and.w	r2, r3, #3
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	4313      	orrs	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800189c:	2b00      	cmp	r3, #0
 800189e:	f000 80a2 	beq.w	80019e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	4b57      	ldr	r3, [pc, #348]	; (8001a04 <HAL_GPIO_Init+0x2e8>)
 80018a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018aa:	4a56      	ldr	r2, [pc, #344]	; (8001a04 <HAL_GPIO_Init+0x2e8>)
 80018ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018b0:	6453      	str	r3, [r2, #68]	; 0x44
 80018b2:	4b54      	ldr	r3, [pc, #336]	; (8001a04 <HAL_GPIO_Init+0x2e8>)
 80018b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018be:	4a52      	ldr	r2, [pc, #328]	; (8001a08 <HAL_GPIO_Init+0x2ec>)
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	089b      	lsrs	r3, r3, #2
 80018c4:	3302      	adds	r3, #2
 80018c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	f003 0303 	and.w	r3, r3, #3
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	220f      	movs	r2, #15
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43db      	mvns	r3, r3
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	4013      	ands	r3, r2
 80018e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a49      	ldr	r2, [pc, #292]	; (8001a0c <HAL_GPIO_Init+0x2f0>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d019      	beq.n	800191e <HAL_GPIO_Init+0x202>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a48      	ldr	r2, [pc, #288]	; (8001a10 <HAL_GPIO_Init+0x2f4>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d013      	beq.n	800191a <HAL_GPIO_Init+0x1fe>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a47      	ldr	r2, [pc, #284]	; (8001a14 <HAL_GPIO_Init+0x2f8>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d00d      	beq.n	8001916 <HAL_GPIO_Init+0x1fa>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a46      	ldr	r2, [pc, #280]	; (8001a18 <HAL_GPIO_Init+0x2fc>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d007      	beq.n	8001912 <HAL_GPIO_Init+0x1f6>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a45      	ldr	r2, [pc, #276]	; (8001a1c <HAL_GPIO_Init+0x300>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d101      	bne.n	800190e <HAL_GPIO_Init+0x1f2>
 800190a:	2304      	movs	r3, #4
 800190c:	e008      	b.n	8001920 <HAL_GPIO_Init+0x204>
 800190e:	2307      	movs	r3, #7
 8001910:	e006      	b.n	8001920 <HAL_GPIO_Init+0x204>
 8001912:	2303      	movs	r3, #3
 8001914:	e004      	b.n	8001920 <HAL_GPIO_Init+0x204>
 8001916:	2302      	movs	r3, #2
 8001918:	e002      	b.n	8001920 <HAL_GPIO_Init+0x204>
 800191a:	2301      	movs	r3, #1
 800191c:	e000      	b.n	8001920 <HAL_GPIO_Init+0x204>
 800191e:	2300      	movs	r3, #0
 8001920:	69fa      	ldr	r2, [r7, #28]
 8001922:	f002 0203 	and.w	r2, r2, #3
 8001926:	0092      	lsls	r2, r2, #2
 8001928:	4093      	lsls	r3, r2
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4313      	orrs	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001930:	4935      	ldr	r1, [pc, #212]	; (8001a08 <HAL_GPIO_Init+0x2ec>)
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	089b      	lsrs	r3, r3, #2
 8001936:	3302      	adds	r3, #2
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800193e:	4b38      	ldr	r3, [pc, #224]	; (8001a20 <HAL_GPIO_Init+0x304>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	43db      	mvns	r3, r3
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	4013      	ands	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d003      	beq.n	8001962 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	4313      	orrs	r3, r2
 8001960:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001962:	4a2f      	ldr	r2, [pc, #188]	; (8001a20 <HAL_GPIO_Init+0x304>)
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001968:	4b2d      	ldr	r3, [pc, #180]	; (8001a20 <HAL_GPIO_Init+0x304>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	43db      	mvns	r3, r3
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	4013      	ands	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d003      	beq.n	800198c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	4313      	orrs	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800198c:	4a24      	ldr	r2, [pc, #144]	; (8001a20 <HAL_GPIO_Init+0x304>)
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001992:	4b23      	ldr	r3, [pc, #140]	; (8001a20 <HAL_GPIO_Init+0x304>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	43db      	mvns	r3, r3
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	4013      	ands	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d003      	beq.n	80019b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019b6:	4a1a      	ldr	r2, [pc, #104]	; (8001a20 <HAL_GPIO_Init+0x304>)
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019bc:	4b18      	ldr	r3, [pc, #96]	; (8001a20 <HAL_GPIO_Init+0x304>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	43db      	mvns	r3, r3
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	4013      	ands	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d003      	beq.n	80019e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	4313      	orrs	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019e0:	4a0f      	ldr	r2, [pc, #60]	; (8001a20 <HAL_GPIO_Init+0x304>)
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	3301      	adds	r3, #1
 80019ea:	61fb      	str	r3, [r7, #28]
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	2b0f      	cmp	r3, #15
 80019f0:	f67f aea2 	bls.w	8001738 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019f4:	bf00      	nop
 80019f6:	bf00      	nop
 80019f8:	3724      	adds	r7, #36	; 0x24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	40023800 	.word	0x40023800
 8001a08:	40013800 	.word	0x40013800
 8001a0c:	40020000 	.word	0x40020000
 8001a10:	40020400 	.word	0x40020400
 8001a14:	40020800 	.word	0x40020800
 8001a18:	40020c00 	.word	0x40020c00
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	40013c00 	.word	0x40013c00

08001a24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	807b      	strh	r3, [r7, #2]
 8001a30:	4613      	mov	r3, r2
 8001a32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a34:	787b      	ldrb	r3, [r7, #1]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d003      	beq.n	8001a42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a3a:	887a      	ldrh	r2, [r7, #2]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a40:	e003      	b.n	8001a4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a42:	887b      	ldrh	r3, [r7, #2]
 8001a44:	041a      	lsls	r2, r3, #16
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	619a      	str	r2, [r3, #24]
}
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
	...

08001a58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e12b      	b.n	8001cc2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d106      	bne.n	8001a84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f7ff f888 	bl	8000b94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2224      	movs	r2, #36	; 0x24
 8001a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f022 0201 	bic.w	r2, r2, #1
 8001a9a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001aaa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001aba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001abc:	f002 fa0c 	bl	8003ed8 <HAL_RCC_GetPCLK1Freq>
 8001ac0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	4a81      	ldr	r2, [pc, #516]	; (8001ccc <HAL_I2C_Init+0x274>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d807      	bhi.n	8001adc <HAL_I2C_Init+0x84>
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	4a80      	ldr	r2, [pc, #512]	; (8001cd0 <HAL_I2C_Init+0x278>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	bf94      	ite	ls
 8001ad4:	2301      	movls	r3, #1
 8001ad6:	2300      	movhi	r3, #0
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	e006      	b.n	8001aea <HAL_I2C_Init+0x92>
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	4a7d      	ldr	r2, [pc, #500]	; (8001cd4 <HAL_I2C_Init+0x27c>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	bf94      	ite	ls
 8001ae4:	2301      	movls	r3, #1
 8001ae6:	2300      	movhi	r3, #0
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e0e7      	b.n	8001cc2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	4a78      	ldr	r2, [pc, #480]	; (8001cd8 <HAL_I2C_Init+0x280>)
 8001af6:	fba2 2303 	umull	r2, r3, r2, r3
 8001afa:	0c9b      	lsrs	r3, r3, #18
 8001afc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	68ba      	ldr	r2, [r7, #8]
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	6a1b      	ldr	r3, [r3, #32]
 8001b18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	4a6a      	ldr	r2, [pc, #424]	; (8001ccc <HAL_I2C_Init+0x274>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d802      	bhi.n	8001b2c <HAL_I2C_Init+0xd4>
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	e009      	b.n	8001b40 <HAL_I2C_Init+0xe8>
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b32:	fb02 f303 	mul.w	r3, r2, r3
 8001b36:	4a69      	ldr	r2, [pc, #420]	; (8001cdc <HAL_I2C_Init+0x284>)
 8001b38:	fba2 2303 	umull	r2, r3, r2, r3
 8001b3c:	099b      	lsrs	r3, r3, #6
 8001b3e:	3301      	adds	r3, #1
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	6812      	ldr	r2, [r2, #0]
 8001b44:	430b      	orrs	r3, r1
 8001b46:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	69db      	ldr	r3, [r3, #28]
 8001b4e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b52:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	495c      	ldr	r1, [pc, #368]	; (8001ccc <HAL_I2C_Init+0x274>)
 8001b5c:	428b      	cmp	r3, r1
 8001b5e:	d819      	bhi.n	8001b94 <HAL_I2C_Init+0x13c>
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	1e59      	subs	r1, r3, #1
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b6e:	1c59      	adds	r1, r3, #1
 8001b70:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001b74:	400b      	ands	r3, r1
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d00a      	beq.n	8001b90 <HAL_I2C_Init+0x138>
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	1e59      	subs	r1, r3, #1
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b88:	3301      	adds	r3, #1
 8001b8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b8e:	e051      	b.n	8001c34 <HAL_I2C_Init+0x1dc>
 8001b90:	2304      	movs	r3, #4
 8001b92:	e04f      	b.n	8001c34 <HAL_I2C_Init+0x1dc>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d111      	bne.n	8001bc0 <HAL_I2C_Init+0x168>
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	1e58      	subs	r0, r3, #1
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6859      	ldr	r1, [r3, #4]
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	440b      	add	r3, r1
 8001baa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bae:	3301      	adds	r3, #1
 8001bb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	bf0c      	ite	eq
 8001bb8:	2301      	moveq	r3, #1
 8001bba:	2300      	movne	r3, #0
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	e012      	b.n	8001be6 <HAL_I2C_Init+0x18e>
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	1e58      	subs	r0, r3, #1
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6859      	ldr	r1, [r3, #4]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	440b      	add	r3, r1
 8001bce:	0099      	lsls	r1, r3, #2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	bf0c      	ite	eq
 8001be0:	2301      	moveq	r3, #1
 8001be2:	2300      	movne	r3, #0
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <HAL_I2C_Init+0x196>
 8001bea:	2301      	movs	r3, #1
 8001bec:	e022      	b.n	8001c34 <HAL_I2C_Init+0x1dc>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d10e      	bne.n	8001c14 <HAL_I2C_Init+0x1bc>
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	1e58      	subs	r0, r3, #1
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6859      	ldr	r1, [r3, #4]
 8001bfe:	460b      	mov	r3, r1
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	440b      	add	r3, r1
 8001c04:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c08:	3301      	adds	r3, #1
 8001c0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c12:	e00f      	b.n	8001c34 <HAL_I2C_Init+0x1dc>
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	1e58      	subs	r0, r3, #1
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6859      	ldr	r1, [r3, #4]
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	440b      	add	r3, r1
 8001c22:	0099      	lsls	r1, r3, #2
 8001c24:	440b      	add	r3, r1
 8001c26:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c34:	6879      	ldr	r1, [r7, #4]
 8001c36:	6809      	ldr	r1, [r1, #0]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69da      	ldr	r2, [r3, #28]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a1b      	ldr	r3, [r3, #32]
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	430a      	orrs	r2, r1
 8001c56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	6911      	ldr	r1, [r2, #16]
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	68d2      	ldr	r2, [r2, #12]
 8001c6e:	4311      	orrs	r1, r2
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	6812      	ldr	r2, [r2, #0]
 8001c74:	430b      	orrs	r3, r1
 8001c76:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	695a      	ldr	r2, [r3, #20]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	430a      	orrs	r2, r1
 8001c92:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f042 0201 	orr.w	r2, r2, #1
 8001ca2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2220      	movs	r2, #32
 8001cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	000186a0 	.word	0x000186a0
 8001cd0:	001e847f 	.word	0x001e847f
 8001cd4:	003d08ff 	.word	0x003d08ff
 8001cd8:	431bde83 	.word	0x431bde83
 8001cdc:	10624dd3 	.word	0x10624dd3

08001ce0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b088      	sub	sp, #32
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d00:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d08:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001d0a:	7bfb      	ldrb	r3, [r7, #15]
 8001d0c:	2b10      	cmp	r3, #16
 8001d0e:	d003      	beq.n	8001d18 <HAL_I2C_EV_IRQHandler+0x38>
 8001d10:	7bfb      	ldrb	r3, [r7, #15]
 8001d12:	2b40      	cmp	r3, #64	; 0x40
 8001d14:	f040 80c1 	bne.w	8001e9a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d10d      	bne.n	8001d4e <HAL_I2C_EV_IRQHandler+0x6e>
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001d38:	d003      	beq.n	8001d42 <HAL_I2C_EV_IRQHandler+0x62>
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001d40:	d101      	bne.n	8001d46 <HAL_I2C_EV_IRQHandler+0x66>
 8001d42:	2301      	movs	r3, #1
 8001d44:	e000      	b.n	8001d48 <HAL_I2C_EV_IRQHandler+0x68>
 8001d46:	2300      	movs	r3, #0
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	f000 8132 	beq.w	8001fb2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d00c      	beq.n	8001d72 <HAL_I2C_EV_IRQHandler+0x92>
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	0a5b      	lsrs	r3, r3, #9
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d006      	beq.n	8001d72 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f001 fc7b 	bl	8003660 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 fd83 	bl	8002876 <I2C_Master_SB>
 8001d70:	e092      	b.n	8001e98 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	08db      	lsrs	r3, r3, #3
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d009      	beq.n	8001d92 <HAL_I2C_EV_IRQHandler+0xb2>
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	0a5b      	lsrs	r3, r3, #9
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 fdf9 	bl	8002982 <I2C_Master_ADD10>
 8001d90:	e082      	b.n	8001e98 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	085b      	lsrs	r3, r3, #1
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d009      	beq.n	8001db2 <HAL_I2C_EV_IRQHandler+0xd2>
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	0a5b      	lsrs	r3, r3, #9
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 fe13 	bl	80029d6 <I2C_Master_ADDR>
 8001db0:	e072      	b.n	8001e98 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	089b      	lsrs	r3, r3, #2
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d03b      	beq.n	8001e36 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001dcc:	f000 80f3 	beq.w	8001fb6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	09db      	lsrs	r3, r3, #7
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d00f      	beq.n	8001dfc <HAL_I2C_EV_IRQHandler+0x11c>
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	0a9b      	lsrs	r3, r3, #10
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d009      	beq.n	8001dfc <HAL_I2C_EV_IRQHandler+0x11c>
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	089b      	lsrs	r3, r3, #2
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d103      	bne.n	8001dfc <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f000 f9f3 	bl	80021e0 <I2C_MasterTransmit_TXE>
 8001dfa:	e04d      	b.n	8001e98 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	089b      	lsrs	r3, r3, #2
 8001e00:	f003 0301 	and.w	r3, r3, #1
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	f000 80d6 	beq.w	8001fb6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	0a5b      	lsrs	r3, r3, #9
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f000 80cf 	beq.w	8001fb6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001e18:	7bbb      	ldrb	r3, [r7, #14]
 8001e1a:	2b21      	cmp	r3, #33	; 0x21
 8001e1c:	d103      	bne.n	8001e26 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 fa7a 	bl	8002318 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e24:	e0c7      	b.n	8001fb6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001e26:	7bfb      	ldrb	r3, [r7, #15]
 8001e28:	2b40      	cmp	r3, #64	; 0x40
 8001e2a:	f040 80c4 	bne.w	8001fb6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 fae8 	bl	8002404 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e34:	e0bf      	b.n	8001fb6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e44:	f000 80b7 	beq.w	8001fb6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	099b      	lsrs	r3, r3, #6
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d00f      	beq.n	8001e74 <HAL_I2C_EV_IRQHandler+0x194>
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	0a9b      	lsrs	r3, r3, #10
 8001e58:	f003 0301 	and.w	r3, r3, #1
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d009      	beq.n	8001e74 <HAL_I2C_EV_IRQHandler+0x194>
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	089b      	lsrs	r3, r3, #2
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d103      	bne.n	8001e74 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f000 fb5d 	bl	800252c <I2C_MasterReceive_RXNE>
 8001e72:	e011      	b.n	8001e98 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	089b      	lsrs	r3, r3, #2
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f000 809a 	beq.w	8001fb6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	0a5b      	lsrs	r3, r3, #9
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f000 8093 	beq.w	8001fb6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f000 fc06 	bl	80026a2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e96:	e08e      	b.n	8001fb6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001e98:	e08d      	b.n	8001fb6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d004      	beq.n	8001eac <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	695b      	ldr	r3, [r3, #20]
 8001ea8:	61fb      	str	r3, [r7, #28]
 8001eaa:	e007      	b.n	8001ebc <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	695b      	ldr	r3, [r3, #20]
 8001eba:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	085b      	lsrs	r3, r3, #1
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d012      	beq.n	8001eee <HAL_I2C_EV_IRQHandler+0x20e>
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	0a5b      	lsrs	r3, r3, #9
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d00c      	beq.n	8001eee <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d003      	beq.n	8001ee4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001ee4:	69b9      	ldr	r1, [r7, #24]
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 ffc4 	bl	8002e74 <I2C_Slave_ADDR>
 8001eec:	e066      	b.n	8001fbc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	091b      	lsrs	r3, r3, #4
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d009      	beq.n	8001f0e <HAL_I2C_EV_IRQHandler+0x22e>
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	0a5b      	lsrs	r3, r3, #9
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 fffe 	bl	8002f08 <I2C_Slave_STOPF>
 8001f0c:	e056      	b.n	8001fbc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001f0e:	7bbb      	ldrb	r3, [r7, #14]
 8001f10:	2b21      	cmp	r3, #33	; 0x21
 8001f12:	d002      	beq.n	8001f1a <HAL_I2C_EV_IRQHandler+0x23a>
 8001f14:	7bbb      	ldrb	r3, [r7, #14]
 8001f16:	2b29      	cmp	r3, #41	; 0x29
 8001f18:	d125      	bne.n	8001f66 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	09db      	lsrs	r3, r3, #7
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00f      	beq.n	8001f46 <HAL_I2C_EV_IRQHandler+0x266>
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	0a9b      	lsrs	r3, r3, #10
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d009      	beq.n	8001f46 <HAL_I2C_EV_IRQHandler+0x266>
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	089b      	lsrs	r3, r3, #2
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d103      	bne.n	8001f46 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 feda 	bl	8002cf8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f44:	e039      	b.n	8001fba <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	089b      	lsrs	r3, r3, #2
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d033      	beq.n	8001fba <HAL_I2C_EV_IRQHandler+0x2da>
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	0a5b      	lsrs	r3, r3, #9
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d02d      	beq.n	8001fba <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 ff07 	bl	8002d72 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f64:	e029      	b.n	8001fba <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	099b      	lsrs	r3, r3, #6
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00f      	beq.n	8001f92 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	0a9b      	lsrs	r3, r3, #10
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d009      	beq.n	8001f92 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	089b      	lsrs	r3, r3, #2
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d103      	bne.n	8001f92 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 ff12 	bl	8002db4 <I2C_SlaveReceive_RXNE>
 8001f90:	e014      	b.n	8001fbc <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	089b      	lsrs	r3, r3, #2
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00e      	beq.n	8001fbc <HAL_I2C_EV_IRQHandler+0x2dc>
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	0a5b      	lsrs	r3, r3, #9
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d008      	beq.n	8001fbc <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 ff40 	bl	8002e30 <I2C_SlaveReceive_BTF>
 8001fb0:	e004      	b.n	8001fbc <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001fb2:	bf00      	nop
 8001fb4:	e002      	b.n	8001fbc <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fb6:	bf00      	nop
 8001fb8:	e000      	b.n	8001fbc <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001fba:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001fbc:	3720      	adds	r7, #32
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b08a      	sub	sp, #40	; 0x28
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	695b      	ldr	r3, [r3, #20]
 8001fd0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001fe4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001fe6:	6a3b      	ldr	r3, [r7, #32]
 8001fe8:	0a1b      	lsrs	r3, r3, #8
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00e      	beq.n	8002010 <HAL_I2C_ER_IRQHandler+0x4e>
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	0a1b      	lsrs	r3, r3, #8
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d008      	beq.n	8002010 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	f043 0301 	orr.w	r3, r3, #1
 8002004:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800200e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002010:	6a3b      	ldr	r3, [r7, #32]
 8002012:	0a5b      	lsrs	r3, r3, #9
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	2b00      	cmp	r3, #0
 800201a:	d00e      	beq.n	800203a <HAL_I2C_ER_IRQHandler+0x78>
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	0a1b      	lsrs	r3, r3, #8
 8002020:	f003 0301 	and.w	r3, r3, #1
 8002024:	2b00      	cmp	r3, #0
 8002026:	d008      	beq.n	800203a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202a:	f043 0302 	orr.w	r3, r3, #2
 800202e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002038:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800203a:	6a3b      	ldr	r3, [r7, #32]
 800203c:	0a9b      	lsrs	r3, r3, #10
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b00      	cmp	r3, #0
 8002044:	d03f      	beq.n	80020c6 <HAL_I2C_ER_IRQHandler+0x104>
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	0a1b      	lsrs	r3, r3, #8
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b00      	cmp	r3, #0
 8002050:	d039      	beq.n	80020c6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8002052:	7efb      	ldrb	r3, [r7, #27]
 8002054:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800205a:	b29b      	uxth	r3, r3
 800205c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002064:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800206c:	7ebb      	ldrb	r3, [r7, #26]
 800206e:	2b20      	cmp	r3, #32
 8002070:	d112      	bne.n	8002098 <HAL_I2C_ER_IRQHandler+0xd6>
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d10f      	bne.n	8002098 <HAL_I2C_ER_IRQHandler+0xd6>
 8002078:	7cfb      	ldrb	r3, [r7, #19]
 800207a:	2b21      	cmp	r3, #33	; 0x21
 800207c:	d008      	beq.n	8002090 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800207e:	7cfb      	ldrb	r3, [r7, #19]
 8002080:	2b29      	cmp	r3, #41	; 0x29
 8002082:	d005      	beq.n	8002090 <HAL_I2C_ER_IRQHandler+0xce>
 8002084:	7cfb      	ldrb	r3, [r7, #19]
 8002086:	2b28      	cmp	r3, #40	; 0x28
 8002088:	d106      	bne.n	8002098 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2b21      	cmp	r3, #33	; 0x21
 800208e:	d103      	bne.n	8002098 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f001 f869 	bl	8003168 <I2C_Slave_AF>
 8002096:	e016      	b.n	80020c6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80020a0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	f043 0304 	orr.w	r3, r3, #4
 80020a8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80020aa:	7efb      	ldrb	r3, [r7, #27]
 80020ac:	2b10      	cmp	r3, #16
 80020ae:	d002      	beq.n	80020b6 <HAL_I2C_ER_IRQHandler+0xf4>
 80020b0:	7efb      	ldrb	r3, [r7, #27]
 80020b2:	2b40      	cmp	r3, #64	; 0x40
 80020b4:	d107      	bne.n	80020c6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020c4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80020c6:	6a3b      	ldr	r3, [r7, #32]
 80020c8:	0adb      	lsrs	r3, r3, #11
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d00e      	beq.n	80020f0 <HAL_I2C_ER_IRQHandler+0x12e>
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	0a1b      	lsrs	r3, r3, #8
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d008      	beq.n	80020f0 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	f043 0308 	orr.w	r3, r3, #8
 80020e4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80020ee:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80020f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d008      	beq.n	8002108 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fc:	431a      	orrs	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f001 f8a0 	bl	8003248 <I2C_ITError>
  }
}
 8002108:	bf00      	nop
 800210a:	3728      	adds	r7, #40	; 0x28
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	460b      	mov	r3, r1
 800216a:	70fb      	strb	r3, [r7, #3]
 800216c:	4613      	mov	r3, r2
 800216e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021ee:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021f6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fc:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002202:	2b00      	cmp	r3, #0
 8002204:	d150      	bne.n	80022a8 <I2C_MasterTransmit_TXE+0xc8>
 8002206:	7bfb      	ldrb	r3, [r7, #15]
 8002208:	2b21      	cmp	r3, #33	; 0x21
 800220a:	d14d      	bne.n	80022a8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	2b08      	cmp	r3, #8
 8002210:	d01d      	beq.n	800224e <I2C_MasterTransmit_TXE+0x6e>
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	2b20      	cmp	r3, #32
 8002216:	d01a      	beq.n	800224e <I2C_MasterTransmit_TXE+0x6e>
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800221e:	d016      	beq.n	800224e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	685a      	ldr	r2, [r3, #4]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800222e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2211      	movs	r2, #17
 8002234:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2220      	movs	r2, #32
 8002242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f7ff ff62 	bl	8002110 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800224c:	e060      	b.n	8002310 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800225c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800226c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2220      	movs	r2, #32
 8002278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b40      	cmp	r3, #64	; 0x40
 8002286:	d107      	bne.n	8002298 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f7ff ff7d 	bl	8002190 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002296:	e03b      	b.n	8002310 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f7ff ff35 	bl	8002110 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80022a6:	e033      	b.n	8002310 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
 80022aa:	2b21      	cmp	r3, #33	; 0x21
 80022ac:	d005      	beq.n	80022ba <I2C_MasterTransmit_TXE+0xda>
 80022ae:	7bbb      	ldrb	r3, [r7, #14]
 80022b0:	2b40      	cmp	r3, #64	; 0x40
 80022b2:	d12d      	bne.n	8002310 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80022b4:	7bfb      	ldrb	r3, [r7, #15]
 80022b6:	2b22      	cmp	r3, #34	; 0x22
 80022b8:	d12a      	bne.n	8002310 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022be:	b29b      	uxth	r3, r3
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d108      	bne.n	80022d6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	685a      	ldr	r2, [r3, #4]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022d2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80022d4:	e01c      	b.n	8002310 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b40      	cmp	r3, #64	; 0x40
 80022e0:	d103      	bne.n	80022ea <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 f88e 	bl	8002404 <I2C_MemoryTransmit_TXE_BTF>
}
 80022e8:	e012      	b.n	8002310 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ee:	781a      	ldrb	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fa:	1c5a      	adds	r2, r3, #1
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002304:	b29b      	uxth	r3, r3
 8002306:	3b01      	subs	r3, #1
 8002308:	b29a      	uxth	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800230e:	e7ff      	b.n	8002310 <I2C_MasterTransmit_TXE+0x130>
 8002310:	bf00      	nop
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002324:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b21      	cmp	r3, #33	; 0x21
 8002330:	d164      	bne.n	80023fc <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002336:	b29b      	uxth	r3, r3
 8002338:	2b00      	cmp	r3, #0
 800233a:	d012      	beq.n	8002362 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002340:	781a      	ldrb	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	1c5a      	adds	r2, r3, #1
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002356:	b29b      	uxth	r3, r3
 8002358:	3b01      	subs	r3, #1
 800235a:	b29a      	uxth	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002360:	e04c      	b.n	80023fc <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2b08      	cmp	r3, #8
 8002366:	d01d      	beq.n	80023a4 <I2C_MasterTransmit_BTF+0x8c>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2b20      	cmp	r3, #32
 800236c:	d01a      	beq.n	80023a4 <I2C_MasterTransmit_BTF+0x8c>
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002374:	d016      	beq.n	80023a4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	685a      	ldr	r2, [r3, #4]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002384:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2211      	movs	r2, #17
 800238a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2220      	movs	r2, #32
 8002398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f7ff feb7 	bl	8002110 <HAL_I2C_MasterTxCpltCallback>
}
 80023a2:	e02b      	b.n	80023fc <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	685a      	ldr	r2, [r3, #4]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80023b2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023c2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2220      	movs	r2, #32
 80023ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b40      	cmp	r3, #64	; 0x40
 80023dc:	d107      	bne.n	80023ee <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f7ff fed2 	bl	8002190 <HAL_I2C_MemTxCpltCallback>
}
 80023ec:	e006      	b.n	80023fc <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f7ff fe8a 	bl	8002110 <HAL_I2C_MasterTxCpltCallback>
}
 80023fc:	bf00      	nop
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002412:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002418:	2b00      	cmp	r3, #0
 800241a:	d11d      	bne.n	8002458 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002420:	2b01      	cmp	r3, #1
 8002422:	d10b      	bne.n	800243c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002428:	b2da      	uxtb	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002434:	1c9a      	adds	r2, r3, #2
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800243a:	e073      	b.n	8002524 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002440:	b29b      	uxth	r3, r3
 8002442:	121b      	asrs	r3, r3, #8
 8002444:	b2da      	uxtb	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002450:	1c5a      	adds	r2, r3, #1
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002456:	e065      	b.n	8002524 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800245c:	2b01      	cmp	r3, #1
 800245e:	d10b      	bne.n	8002478 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002464:	b2da      	uxtb	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002470:	1c5a      	adds	r2, r3, #1
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002476:	e055      	b.n	8002524 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800247c:	2b02      	cmp	r3, #2
 800247e:	d151      	bne.n	8002524 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002480:	7bfb      	ldrb	r3, [r7, #15]
 8002482:	2b22      	cmp	r3, #34	; 0x22
 8002484:	d10d      	bne.n	80024a2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002494:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800249a:	1c5a      	adds	r2, r3, #1
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	651a      	str	r2, [r3, #80]	; 0x50
}
 80024a0:	e040      	b.n	8002524 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d015      	beq.n	80024d8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80024ac:	7bfb      	ldrb	r3, [r7, #15]
 80024ae:	2b21      	cmp	r3, #33	; 0x21
 80024b0:	d112      	bne.n	80024d8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b6:	781a      	ldrb	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c2:	1c5a      	adds	r2, r3, #1
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	3b01      	subs	r3, #1
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80024d6:	e025      	b.n	8002524 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024dc:	b29b      	uxth	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d120      	bne.n	8002524 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80024e2:	7bfb      	ldrb	r3, [r7, #15]
 80024e4:	2b21      	cmp	r3, #33	; 0x21
 80024e6:	d11d      	bne.n	8002524 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	685a      	ldr	r2, [r3, #4]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80024f6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002506:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2220      	movs	r2, #32
 8002512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7ff fe36 	bl	8002190 <HAL_I2C_MemTxCpltCallback>
}
 8002524:	bf00      	nop
 8002526:	3710      	adds	r7, #16
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800253a:	b2db      	uxtb	r3, r3
 800253c:	2b22      	cmp	r3, #34	; 0x22
 800253e:	f040 80ac 	bne.w	800269a <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002546:	b29b      	uxth	r3, r3
 8002548:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2b03      	cmp	r3, #3
 800254e:	d921      	bls.n	8002594 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	691a      	ldr	r2, [r3, #16]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255a:	b2d2      	uxtb	r2, r2
 800255c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002562:	1c5a      	adds	r2, r3, #1
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800256c:	b29b      	uxth	r3, r3
 800256e:	3b01      	subs	r3, #1
 8002570:	b29a      	uxth	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800257a:	b29b      	uxth	r3, r3
 800257c:	2b03      	cmp	r3, #3
 800257e:	f040 808c 	bne.w	800269a <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	685a      	ldr	r2, [r3, #4]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002590:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002592:	e082      	b.n	800269a <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002598:	2b02      	cmp	r3, #2
 800259a:	d075      	beq.n	8002688 <I2C_MasterReceive_RXNE+0x15c>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d002      	beq.n	80025a8 <I2C_MasterReceive_RXNE+0x7c>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d16f      	bne.n	8002688 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f001 f827 	bl	80035fc <I2C_WaitOnSTOPRequestThroughIT>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d142      	bne.n	800263a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025c2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80025d2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	691a      	ldr	r2, [r3, #16]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025de:	b2d2      	uxtb	r2, r2
 80025e0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e6:	1c5a      	adds	r2, r3, #1
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	3b01      	subs	r3, #1
 80025f4:	b29a      	uxth	r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2220      	movs	r2, #32
 80025fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b40      	cmp	r3, #64	; 0x40
 800260c:	d10a      	bne.n	8002624 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f7ff fdc1 	bl	80021a4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002622:	e03a      	b.n	800269a <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2212      	movs	r2, #18
 8002630:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7ff fd76 	bl	8002124 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002638:	e02f      	b.n	800269a <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	685a      	ldr	r2, [r3, #4]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002648:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	691a      	ldr	r2, [r3, #16]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002654:	b2d2      	uxtb	r2, r2
 8002656:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265c:	1c5a      	adds	r2, r3, #1
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002666:	b29b      	uxth	r3, r3
 8002668:	3b01      	subs	r3, #1
 800266a:	b29a      	uxth	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2220      	movs	r2, #32
 8002674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f7ff fd99 	bl	80021b8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002686:	e008      	b.n	800269a <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	685a      	ldr	r2, [r3, #4]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002696:	605a      	str	r2, [r3, #4]
}
 8002698:	e7ff      	b.n	800269a <I2C_MasterReceive_RXNE+0x16e>
 800269a:	bf00      	nop
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b084      	sub	sp, #16
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ae:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	2b04      	cmp	r3, #4
 80026b8:	d11b      	bne.n	80026f2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	685a      	ldr	r2, [r3, #4]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026c8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	691a      	ldr	r2, [r3, #16]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d4:	b2d2      	uxtb	r2, r2
 80026d6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026dc:	1c5a      	adds	r2, r3, #1
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	3b01      	subs	r3, #1
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80026f0:	e0bd      	b.n	800286e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	2b03      	cmp	r3, #3
 80026fa:	d129      	bne.n	8002750 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	685a      	ldr	r2, [r3, #4]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800270a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2b04      	cmp	r3, #4
 8002710:	d00a      	beq.n	8002728 <I2C_MasterReceive_BTF+0x86>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2b02      	cmp	r3, #2
 8002716:	d007      	beq.n	8002728 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002726:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	691a      	ldr	r2, [r3, #16]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002732:	b2d2      	uxtb	r2, r2
 8002734:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273a:	1c5a      	adds	r2, r3, #1
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002744:	b29b      	uxth	r3, r3
 8002746:	3b01      	subs	r3, #1
 8002748:	b29a      	uxth	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800274e:	e08e      	b.n	800286e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002754:	b29b      	uxth	r3, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d176      	bne.n	8002848 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d002      	beq.n	8002766 <I2C_MasterReceive_BTF+0xc4>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2b10      	cmp	r3, #16
 8002764:	d108      	bne.n	8002778 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002774:	601a      	str	r2, [r3, #0]
 8002776:	e019      	b.n	80027ac <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2b04      	cmp	r3, #4
 800277c:	d002      	beq.n	8002784 <I2C_MasterReceive_BTF+0xe2>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2b02      	cmp	r3, #2
 8002782:	d108      	bne.n	8002796 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	e00a      	b.n	80027ac <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2b10      	cmp	r3, #16
 800279a:	d007      	beq.n	80027ac <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027aa:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	691a      	ldr	r2, [r3, #16]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b6:	b2d2      	uxtb	r2, r2
 80027b8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027be:	1c5a      	adds	r2, r3, #1
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	3b01      	subs	r3, #1
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	691a      	ldr	r2, [r3, #16]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027dc:	b2d2      	uxtb	r2, r2
 80027de:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e4:	1c5a      	adds	r2, r3, #1
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	3b01      	subs	r3, #1
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	685a      	ldr	r2, [r3, #4]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002806:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2220      	movs	r2, #32
 800280c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002816:	b2db      	uxtb	r3, r3
 8002818:	2b40      	cmp	r3, #64	; 0x40
 800281a:	d10a      	bne.n	8002832 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7ff fcba 	bl	80021a4 <HAL_I2C_MemRxCpltCallback>
}
 8002830:	e01d      	b.n	800286e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2212      	movs	r2, #18
 800283e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f7ff fc6f 	bl	8002124 <HAL_I2C_MasterRxCpltCallback>
}
 8002846:	e012      	b.n	800286e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	691a      	ldr	r2, [r3, #16]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285a:	1c5a      	adds	r2, r3, #1
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002864:	b29b      	uxth	r3, r3
 8002866:	3b01      	subs	r3, #1
 8002868:	b29a      	uxth	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800286e:	bf00      	nop
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002876:	b480      	push	{r7}
 8002878:	b083      	sub	sp, #12
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b40      	cmp	r3, #64	; 0x40
 8002888:	d117      	bne.n	80028ba <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800288e:	2b00      	cmp	r3, #0
 8002890:	d109      	bne.n	80028a6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002896:	b2db      	uxtb	r3, r3
 8002898:	461a      	mov	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80028a2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80028a4:	e067      	b.n	8002976 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	f043 0301 	orr.w	r3, r3, #1
 80028b0:	b2da      	uxtb	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	611a      	str	r2, [r3, #16]
}
 80028b8:	e05d      	b.n	8002976 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028c2:	d133      	bne.n	800292c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b21      	cmp	r3, #33	; 0x21
 80028ce:	d109      	bne.n	80028e4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	461a      	mov	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80028e0:	611a      	str	r2, [r3, #16]
 80028e2:	e008      	b.n	80028f6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	f043 0301 	orr.w	r3, r3, #1
 80028ee:	b2da      	uxtb	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d004      	beq.n	8002908 <I2C_Master_SB+0x92>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002904:	2b00      	cmp	r3, #0
 8002906:	d108      	bne.n	800291a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800290c:	2b00      	cmp	r3, #0
 800290e:	d032      	beq.n	8002976 <I2C_Master_SB+0x100>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002916:	2b00      	cmp	r3, #0
 8002918:	d02d      	beq.n	8002976 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002928:	605a      	str	r2, [r3, #4]
}
 800292a:	e024      	b.n	8002976 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002930:	2b00      	cmp	r3, #0
 8002932:	d10e      	bne.n	8002952 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002938:	b29b      	uxth	r3, r3
 800293a:	11db      	asrs	r3, r3, #7
 800293c:	b2db      	uxtb	r3, r3
 800293e:	f003 0306 	and.w	r3, r3, #6
 8002942:	b2db      	uxtb	r3, r3
 8002944:	f063 030f 	orn	r3, r3, #15
 8002948:	b2da      	uxtb	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	611a      	str	r2, [r3, #16]
}
 8002950:	e011      	b.n	8002976 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002956:	2b01      	cmp	r3, #1
 8002958:	d10d      	bne.n	8002976 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295e:	b29b      	uxth	r3, r3
 8002960:	11db      	asrs	r3, r3, #7
 8002962:	b2db      	uxtb	r3, r3
 8002964:	f003 0306 	and.w	r3, r3, #6
 8002968:	b2db      	uxtb	r3, r3
 800296a:	f063 030e 	orn	r3, r3, #14
 800296e:	b2da      	uxtb	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	611a      	str	r2, [r3, #16]
}
 8002976:	bf00      	nop
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr

08002982 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002982:	b480      	push	{r7}
 8002984:	b083      	sub	sp, #12
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298e:	b2da      	uxtb	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800299a:	2b00      	cmp	r3, #0
 800299c:	d004      	beq.n	80029a8 <I2C_Master_ADD10+0x26>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d108      	bne.n	80029ba <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d00c      	beq.n	80029ca <I2C_Master_ADD10+0x48>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d007      	beq.n	80029ca <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	685a      	ldr	r2, [r3, #4]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029c8:	605a      	str	r2, [r3, #4]
  }
}
 80029ca:	bf00      	nop
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80029d6:	b480      	push	{r7}
 80029d8:	b091      	sub	sp, #68	; 0x44
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ec:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f2:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	2b22      	cmp	r3, #34	; 0x22
 80029fe:	f040 8169 	bne.w	8002cd4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10f      	bne.n	8002a2a <I2C_Master_ADDR+0x54>
 8002a0a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002a0e:	2b40      	cmp	r3, #64	; 0x40
 8002a10:	d10b      	bne.n	8002a2a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a12:	2300      	movs	r3, #0
 8002a14:	633b      	str	r3, [r7, #48]	; 0x30
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	695b      	ldr	r3, [r3, #20]
 8002a1c:	633b      	str	r3, [r7, #48]	; 0x30
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	633b      	str	r3, [r7, #48]	; 0x30
 8002a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a28:	e160      	b.n	8002cec <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d11d      	bne.n	8002a6e <I2C_Master_ADDR+0x98>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002a3a:	d118      	bne.n	8002a6e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a60:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a66:	1c5a      	adds	r2, r3, #1
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	651a      	str	r2, [r3, #80]	; 0x50
 8002a6c:	e13e      	b.n	8002cec <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d113      	bne.n	8002aa0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a78:	2300      	movs	r3, #0
 8002a7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a9c:	601a      	str	r2, [r3, #0]
 8002a9e:	e115      	b.n	8002ccc <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	f040 808a 	bne.w	8002bc0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ab2:	d137      	bne.n	8002b24 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ac2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ace:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ad2:	d113      	bne.n	8002afc <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ae2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	627b      	str	r3, [r7, #36]	; 0x24
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	627b      	str	r3, [r7, #36]	; 0x24
 8002af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afa:	e0e7      	b.n	8002ccc <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002afc:	2300      	movs	r3, #0
 8002afe:	623b      	str	r3, [r7, #32]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	623b      	str	r3, [r7, #32]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	623b      	str	r3, [r7, #32]
 8002b10:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	e0d3      	b.n	8002ccc <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b26:	2b08      	cmp	r3, #8
 8002b28:	d02e      	beq.n	8002b88 <I2C_Master_ADDR+0x1b2>
 8002b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b2c:	2b20      	cmp	r3, #32
 8002b2e:	d02b      	beq.n	8002b88 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b32:	2b12      	cmp	r3, #18
 8002b34:	d102      	bne.n	8002b3c <I2C_Master_ADDR+0x166>
 8002b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d125      	bne.n	8002b88 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	d00e      	beq.n	8002b60 <I2C_Master_ADDR+0x18a>
 8002b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d00b      	beq.n	8002b60 <I2C_Master_ADDR+0x18a>
 8002b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b4a:	2b10      	cmp	r3, #16
 8002b4c:	d008      	beq.n	8002b60 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	e007      	b.n	8002b70 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b6e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b70:	2300      	movs	r3, #0
 8002b72:	61fb      	str	r3, [r7, #28]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	61fb      	str	r3, [r7, #28]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	61fb      	str	r3, [r7, #28]
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	e0a1      	b.n	8002ccc <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b96:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b98:	2300      	movs	r3, #0
 8002b9a:	61bb      	str	r3, [r7, #24]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	61bb      	str	r3, [r7, #24]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	61bb      	str	r3, [r7, #24]
 8002bac:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	e085      	b.n	8002ccc <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d14d      	bne.n	8002c66 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bcc:	2b04      	cmp	r3, #4
 8002bce:	d016      	beq.n	8002bfe <I2C_Master_ADDR+0x228>
 8002bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d013      	beq.n	8002bfe <I2C_Master_ADDR+0x228>
 8002bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd8:	2b10      	cmp	r3, #16
 8002bda:	d010      	beq.n	8002bfe <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bea:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	e007      	b.n	8002c0e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c0c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c1c:	d117      	bne.n	8002c4e <I2C_Master_ADDR+0x278>
 8002c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c24:	d00b      	beq.n	8002c3e <I2C_Master_ADDR+0x268>
 8002c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d008      	beq.n	8002c3e <I2C_Master_ADDR+0x268>
 8002c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c2e:	2b08      	cmp	r3, #8
 8002c30:	d005      	beq.n	8002c3e <I2C_Master_ADDR+0x268>
 8002c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c34:	2b10      	cmp	r3, #16
 8002c36:	d002      	beq.n	8002c3e <I2C_Master_ADDR+0x268>
 8002c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c3a:	2b20      	cmp	r3, #32
 8002c3c:	d107      	bne.n	8002c4e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	685a      	ldr	r2, [r3, #4]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002c4c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c4e:	2300      	movs	r3, #0
 8002c50:	617b      	str	r3, [r7, #20]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	695b      	ldr	r3, [r3, #20]
 8002c58:	617b      	str	r3, [r7, #20]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	617b      	str	r3, [r7, #20]
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	e032      	b.n	8002ccc <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c74:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c84:	d117      	bne.n	8002cb6 <I2C_Master_ADDR+0x2e0>
 8002c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c88:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c8c:	d00b      	beq.n	8002ca6 <I2C_Master_ADDR+0x2d0>
 8002c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d008      	beq.n	8002ca6 <I2C_Master_ADDR+0x2d0>
 8002c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c96:	2b08      	cmp	r3, #8
 8002c98:	d005      	beq.n	8002ca6 <I2C_Master_ADDR+0x2d0>
 8002c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c9c:	2b10      	cmp	r3, #16
 8002c9e:	d002      	beq.n	8002ca6 <I2C_Master_ADDR+0x2d0>
 8002ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ca2:	2b20      	cmp	r3, #32
 8002ca4:	d107      	bne.n	8002cb6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	685a      	ldr	r2, [r3, #4]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002cb4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	613b      	str	r3, [r7, #16]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	695b      	ldr	r3, [r3, #20]
 8002cc0:	613b      	str	r3, [r7, #16]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	613b      	str	r3, [r7, #16]
 8002cca:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002cd2:	e00b      	b.n	8002cec <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	60fb      	str	r3, [r7, #12]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	60fb      	str	r3, [r7, #12]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	60fb      	str	r3, [r7, #12]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
}
 8002cea:	e7ff      	b.n	8002cec <I2C_Master_ADDR+0x316>
 8002cec:	bf00      	nop
 8002cee:	3744      	adds	r7, #68	; 0x44
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d06:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d02b      	beq.n	8002d6a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d16:	781a      	ldrb	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d22:	1c5a      	adds	r2, r3, #1
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d114      	bne.n	8002d6a <I2C_SlaveTransmit_TXE+0x72>
 8002d40:	7bfb      	ldrb	r3, [r7, #15]
 8002d42:	2b29      	cmp	r3, #41	; 0x29
 8002d44:	d111      	bne.n	8002d6a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	685a      	ldr	r2, [r3, #4]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d54:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2221      	movs	r2, #33	; 0x21
 8002d5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2228      	movs	r2, #40	; 0x28
 8002d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f7ff f9e7 	bl	8002138 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002d6a:	bf00      	nop
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002d72:	b480      	push	{r7}
 8002d74:	b083      	sub	sp, #12
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d011      	beq.n	8002da8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d88:	781a      	ldrb	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d94:	1c5a      	adds	r2, r3, #1
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	3b01      	subs	r3, #1
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dc2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d02c      	beq.n	8002e28 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	691a      	ldr	r2, [r3, #16]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd8:	b2d2      	uxtb	r2, r2
 8002dda:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de0:	1c5a      	adds	r2, r3, #1
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	3b01      	subs	r3, #1
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d114      	bne.n	8002e28 <I2C_SlaveReceive_RXNE+0x74>
 8002dfe:	7bfb      	ldrb	r3, [r7, #15]
 8002e00:	2b2a      	cmp	r3, #42	; 0x2a
 8002e02:	d111      	bne.n	8002e28 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	685a      	ldr	r2, [r3, #4]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e12:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2222      	movs	r2, #34	; 0x22
 8002e18:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2228      	movs	r2, #40	; 0x28
 8002e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f7ff f992 	bl	800214c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002e28:	bf00      	nop
 8002e2a:	3710      	adds	r7, #16
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d012      	beq.n	8002e68 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	691a      	ldr	r2, [r3, #16]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4c:	b2d2      	uxtb	r2, r2
 8002e4e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e54:	1c5a      	adds	r2, r3, #1
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	3b01      	subs	r3, #1
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002e68:	bf00      	nop
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002e8e:	2b28      	cmp	r3, #40	; 0x28
 8002e90:	d127      	bne.n	8002ee2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	685a      	ldr	r2, [r3, #4]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ea0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	089b      	lsrs	r3, r3, #2
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	09db      	lsrs	r3, r3, #7
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d103      	bne.n	8002ec6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	81bb      	strh	r3, [r7, #12]
 8002ec4:	e002      	b.n	8002ecc <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002ed4:	89ba      	ldrh	r2, [r7, #12]
 8002ed6:	7bfb      	ldrb	r3, [r7, #15]
 8002ed8:	4619      	mov	r1, r3
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f7ff f940 	bl	8002160 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002ee0:	e00e      	b.n	8002f00 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	60bb      	str	r3, [r7, #8]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	60bb      	str	r3, [r7, #8]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	60bb      	str	r3, [r7, #8]
 8002ef6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002f00:	bf00      	nop
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f16:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	685a      	ldr	r2, [r3, #4]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f26:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002f28:	2300      	movs	r3, #0
 8002f2a:	60bb      	str	r3, [r7, #8]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	60bb      	str	r3, [r7, #8]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f042 0201 	orr.w	r2, r2, #1
 8002f42:	601a      	str	r2, [r3, #0]
 8002f44:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f54:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f64:	d172      	bne.n	800304c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002f66:	7bfb      	ldrb	r3, [r7, #15]
 8002f68:	2b22      	cmp	r3, #34	; 0x22
 8002f6a:	d002      	beq.n	8002f72 <I2C_Slave_STOPF+0x6a>
 8002f6c:	7bfb      	ldrb	r3, [r7, #15]
 8002f6e:	2b2a      	cmp	r3, #42	; 0x2a
 8002f70:	d135      	bne.n	8002fde <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d005      	beq.n	8002f96 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8e:	f043 0204 	orr.w	r2, r3, #4
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	685a      	ldr	r2, [r3, #4]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fa4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7fe fba7 	bl	80016fe <HAL_DMA_GetState>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d049      	beq.n	800304a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fba:	4a69      	ldr	r2, [pc, #420]	; (8003160 <I2C_Slave_STOPF+0x258>)
 8002fbc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7fe fb79 	bl	80016ba <HAL_DMA_Abort_IT>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d03d      	beq.n	800304a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002fd8:	4610      	mov	r0, r2
 8002fda:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002fdc:	e035      	b.n	800304a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d005      	beq.n	8003002 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	f043 0204 	orr.w	r2, r3, #4
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003010:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003016:	4618      	mov	r0, r3
 8003018:	f7fe fb71 	bl	80016fe <HAL_DMA_GetState>
 800301c:	4603      	mov	r3, r0
 800301e:	2b01      	cmp	r3, #1
 8003020:	d014      	beq.n	800304c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003026:	4a4e      	ldr	r2, [pc, #312]	; (8003160 <I2C_Slave_STOPF+0x258>)
 8003028:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800302e:	4618      	mov	r0, r3
 8003030:	f7fe fb43 	bl	80016ba <HAL_DMA_Abort_IT>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d008      	beq.n	800304c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800303e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003044:	4610      	mov	r0, r2
 8003046:	4798      	blx	r3
 8003048:	e000      	b.n	800304c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800304a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003050:	b29b      	uxth	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d03e      	beq.n	80030d4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	695b      	ldr	r3, [r3, #20]
 800305c:	f003 0304 	and.w	r3, r3, #4
 8003060:	2b04      	cmp	r3, #4
 8003062:	d112      	bne.n	800308a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	691a      	ldr	r2, [r3, #16]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306e:	b2d2      	uxtb	r2, r2
 8003070:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003076:	1c5a      	adds	r2, r3, #1
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003080:	b29b      	uxth	r3, r3
 8003082:	3b01      	subs	r3, #1
 8003084:	b29a      	uxth	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	695b      	ldr	r3, [r3, #20]
 8003090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003094:	2b40      	cmp	r3, #64	; 0x40
 8003096:	d112      	bne.n	80030be <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	691a      	ldr	r2, [r3, #16]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a2:	b2d2      	uxtb	r2, r2
 80030a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030aa:	1c5a      	adds	r2, r3, #1
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	3b01      	subs	r3, #1
 80030b8:	b29a      	uxth	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d005      	beq.n	80030d4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030cc:	f043 0204 	orr.w	r2, r3, #4
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d003      	beq.n	80030e4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f000 f8b3 	bl	8003248 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80030e2:	e039      	b.n	8003158 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80030e4:	7bfb      	ldrb	r3, [r7, #15]
 80030e6:	2b2a      	cmp	r3, #42	; 0x2a
 80030e8:	d109      	bne.n	80030fe <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2228      	movs	r2, #40	; 0x28
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f7ff f827 	bl	800214c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b28      	cmp	r3, #40	; 0x28
 8003108:	d111      	bne.n	800312e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a15      	ldr	r2, [pc, #84]	; (8003164 <I2C_Slave_STOPF+0x25c>)
 800310e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2220      	movs	r2, #32
 800311a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7ff f828 	bl	800217c <HAL_I2C_ListenCpltCallback>
}
 800312c:	e014      	b.n	8003158 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003132:	2b22      	cmp	r3, #34	; 0x22
 8003134:	d002      	beq.n	800313c <I2C_Slave_STOPF+0x234>
 8003136:	7bfb      	ldrb	r3, [r7, #15]
 8003138:	2b22      	cmp	r3, #34	; 0x22
 800313a:	d10d      	bne.n	8003158 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2220      	movs	r2, #32
 8003146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f7fe fffa 	bl	800214c <HAL_I2C_SlaveRxCpltCallback>
}
 8003158:	bf00      	nop
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	080034ad 	.word	0x080034ad
 8003164:	ffff0000 	.word	0xffff0000

08003168 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003176:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800317c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	2b08      	cmp	r3, #8
 8003182:	d002      	beq.n	800318a <I2C_Slave_AF+0x22>
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	2b20      	cmp	r3, #32
 8003188:	d129      	bne.n	80031de <I2C_Slave_AF+0x76>
 800318a:	7bfb      	ldrb	r3, [r7, #15]
 800318c:	2b28      	cmp	r3, #40	; 0x28
 800318e:	d126      	bne.n	80031de <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a2c      	ldr	r2, [pc, #176]	; (8003244 <I2C_Slave_AF+0xdc>)
 8003194:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	685a      	ldr	r2, [r3, #4]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80031a4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031ae:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031be:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2220      	movs	r2, #32
 80031ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f7fe ffd0 	bl	800217c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80031dc:	e02e      	b.n	800323c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80031de:	7bfb      	ldrb	r3, [r7, #15]
 80031e0:	2b21      	cmp	r3, #33	; 0x21
 80031e2:	d126      	bne.n	8003232 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a17      	ldr	r2, [pc, #92]	; (8003244 <I2C_Slave_AF+0xdc>)
 80031e8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2221      	movs	r2, #33	; 0x21
 80031ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2220      	movs	r2, #32
 80031f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800320e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003218:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003228:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f7fe ff84 	bl	8002138 <HAL_I2C_SlaveTxCpltCallback>
}
 8003230:	e004      	b.n	800323c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800323a:	615a      	str	r2, [r3, #20]
}
 800323c:	bf00      	nop
 800323e:	3710      	adds	r7, #16
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	ffff0000 	.word	0xffff0000

08003248 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003256:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800325e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003260:	7bbb      	ldrb	r3, [r7, #14]
 8003262:	2b10      	cmp	r3, #16
 8003264:	d002      	beq.n	800326c <I2C_ITError+0x24>
 8003266:	7bbb      	ldrb	r3, [r7, #14]
 8003268:	2b40      	cmp	r3, #64	; 0x40
 800326a:	d10a      	bne.n	8003282 <I2C_ITError+0x3a>
 800326c:	7bfb      	ldrb	r3, [r7, #15]
 800326e:	2b22      	cmp	r3, #34	; 0x22
 8003270:	d107      	bne.n	8003282 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003280:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003282:	7bfb      	ldrb	r3, [r7, #15]
 8003284:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003288:	2b28      	cmp	r3, #40	; 0x28
 800328a:	d107      	bne.n	800329c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2228      	movs	r2, #40	; 0x28
 8003296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800329a:	e015      	b.n	80032c8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032aa:	d00a      	beq.n	80032c2 <I2C_ITError+0x7a>
 80032ac:	7bfb      	ldrb	r3, [r7, #15]
 80032ae:	2b60      	cmp	r3, #96	; 0x60
 80032b0:	d007      	beq.n	80032c2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2220      	movs	r2, #32
 80032b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032d6:	d162      	bne.n	800339e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	685a      	ldr	r2, [r3, #4]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032e6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d020      	beq.n	8003338 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032fa:	4a6a      	ldr	r2, [pc, #424]	; (80034a4 <I2C_ITError+0x25c>)
 80032fc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003302:	4618      	mov	r0, r3
 8003304:	f7fe f9d9 	bl	80016ba <HAL_DMA_Abort_IT>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	f000 8089 	beq.w	8003422 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 0201 	bic.w	r2, r2, #1
 800331e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2220      	movs	r2, #32
 8003324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800332c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003332:	4610      	mov	r0, r2
 8003334:	4798      	blx	r3
 8003336:	e074      	b.n	8003422 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333c:	4a59      	ldr	r2, [pc, #356]	; (80034a4 <I2C_ITError+0x25c>)
 800333e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003344:	4618      	mov	r0, r3
 8003346:	f7fe f9b8 	bl	80016ba <HAL_DMA_Abort_IT>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d068      	beq.n	8003422 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800335a:	2b40      	cmp	r3, #64	; 0x40
 800335c:	d10b      	bne.n	8003376 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	691a      	ldr	r2, [r3, #16]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003368:	b2d2      	uxtb	r2, r2
 800336a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003370:	1c5a      	adds	r2, r3, #1
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 0201 	bic.w	r2, r2, #1
 8003384:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2220      	movs	r2, #32
 800338a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003392:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003398:	4610      	mov	r0, r2
 800339a:	4798      	blx	r3
 800339c:	e041      	b.n	8003422 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b60      	cmp	r3, #96	; 0x60
 80033a8:	d125      	bne.n	80033f6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2220      	movs	r2, #32
 80033ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c2:	2b40      	cmp	r3, #64	; 0x40
 80033c4:	d10b      	bne.n	80033de <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	691a      	ldr	r2, [r3, #16]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d0:	b2d2      	uxtb	r2, r2
 80033d2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d8:	1c5a      	adds	r2, r3, #1
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 0201 	bic.w	r2, r2, #1
 80033ec:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f7fe feec 	bl	80021cc <HAL_I2C_AbortCpltCallback>
 80033f4:	e015      	b.n	8003422 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003400:	2b40      	cmp	r3, #64	; 0x40
 8003402:	d10b      	bne.n	800341c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	691a      	ldr	r2, [r3, #16]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340e:	b2d2      	uxtb	r2, r2
 8003410:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003416:	1c5a      	adds	r2, r3, #1
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f7fe fecb 	bl	80021b8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b00      	cmp	r3, #0
 8003430:	d10e      	bne.n	8003450 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003438:	2b00      	cmp	r3, #0
 800343a:	d109      	bne.n	8003450 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003442:	2b00      	cmp	r3, #0
 8003444:	d104      	bne.n	8003450 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800344c:	2b00      	cmp	r3, #0
 800344e:	d007      	beq.n	8003460 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	685a      	ldr	r2, [r3, #4]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800345e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003466:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346c:	f003 0304 	and.w	r3, r3, #4
 8003470:	2b04      	cmp	r3, #4
 8003472:	d113      	bne.n	800349c <I2C_ITError+0x254>
 8003474:	7bfb      	ldrb	r3, [r7, #15]
 8003476:	2b28      	cmp	r3, #40	; 0x28
 8003478:	d110      	bne.n	800349c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a0a      	ldr	r2, [pc, #40]	; (80034a8 <I2C_ITError+0x260>)
 800347e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2220      	movs	r2, #32
 800348a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f7fe fe70 	bl	800217c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800349c:	bf00      	nop
 800349e:	3710      	adds	r7, #16
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	080034ad 	.word	0x080034ad
 80034a8:	ffff0000 	.word	0xffff0000

080034ac <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b086      	sub	sp, #24
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80034b4:	2300      	movs	r3, #0
 80034b6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034bc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034c4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80034c6:	4b4b      	ldr	r3, [pc, #300]	; (80035f4 <I2C_DMAAbort+0x148>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	08db      	lsrs	r3, r3, #3
 80034cc:	4a4a      	ldr	r2, [pc, #296]	; (80035f8 <I2C_DMAAbort+0x14c>)
 80034ce:	fba2 2303 	umull	r2, r3, r2, r3
 80034d2:	0a1a      	lsrs	r2, r3, #8
 80034d4:	4613      	mov	r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	4413      	add	r3, r2
 80034da:	00da      	lsls	r2, r3, #3
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d106      	bne.n	80034f4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	f043 0220 	orr.w	r2, r3, #32
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80034f2:	e00a      	b.n	800350a <I2C_DMAAbort+0x5e>
    }
    count--;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	3b01      	subs	r3, #1
 80034f8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003504:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003508:	d0ea      	beq.n	80034e0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800350e:	2b00      	cmp	r3, #0
 8003510:	d003      	beq.n	800351a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003516:	2200      	movs	r2, #0
 8003518:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800351e:	2b00      	cmp	r3, #0
 8003520:	d003      	beq.n	800352a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003526:	2200      	movs	r2, #0
 8003528:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003538:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	2200      	movs	r2, #0
 800353e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003544:	2b00      	cmp	r3, #0
 8003546:	d003      	beq.n	8003550 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800354c:	2200      	movs	r2, #0
 800354e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003554:	2b00      	cmp	r3, #0
 8003556:	d003      	beq.n	8003560 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800355c:	2200      	movs	r2, #0
 800355e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f022 0201 	bic.w	r2, r2, #1
 800356e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2b60      	cmp	r3, #96	; 0x60
 800357a:	d10e      	bne.n	800359a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	2220      	movs	r2, #32
 8003580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	2200      	movs	r2, #0
 8003590:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003592:	6978      	ldr	r0, [r7, #20]
 8003594:	f7fe fe1a 	bl	80021cc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003598:	e027      	b.n	80035ea <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800359a:	7cfb      	ldrb	r3, [r7, #19]
 800359c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80035a0:	2b28      	cmp	r3, #40	; 0x28
 80035a2:	d117      	bne.n	80035d4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f042 0201 	orr.w	r2, r2, #1
 80035b2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035c2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	2200      	movs	r2, #0
 80035c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	2228      	movs	r2, #40	; 0x28
 80035ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80035d2:	e007      	b.n	80035e4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	2220      	movs	r2, #32
 80035d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80035e4:	6978      	ldr	r0, [r7, #20]
 80035e6:	f7fe fde7 	bl	80021b8 <HAL_I2C_ErrorCallback>
}
 80035ea:	bf00      	nop
 80035ec:	3718      	adds	r7, #24
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	2000002c 	.word	0x2000002c
 80035f8:	14f8b589 	.word	0x14f8b589

080035fc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b085      	sub	sp, #20
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003604:	2300      	movs	r3, #0
 8003606:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003608:	4b13      	ldr	r3, [pc, #76]	; (8003658 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	08db      	lsrs	r3, r3, #3
 800360e:	4a13      	ldr	r2, [pc, #76]	; (800365c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003610:	fba2 2303 	umull	r2, r3, r2, r3
 8003614:	0a1a      	lsrs	r2, r3, #8
 8003616:	4613      	mov	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	4413      	add	r3, r2
 800361c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	3b01      	subs	r3, #1
 8003622:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d107      	bne.n	800363a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362e:	f043 0220 	orr.w	r2, r3, #32
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e008      	b.n	800364c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003644:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003648:	d0e9      	beq.n	800361e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3714      	adds	r7, #20
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr
 8003658:	2000002c 	.word	0x2000002c
 800365c:	14f8b589 	.word	0x14f8b589

08003660 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003670:	d103      	bne.n	800367a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2201      	movs	r2, #1
 8003676:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003678:	e007      	b.n	800368a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003682:	d102      	bne.n	800368a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2208      	movs	r2, #8
 8003688:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800368a:	bf00      	nop
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
	...

08003698 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b086      	sub	sp, #24
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e264      	b.n	8003b74 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d075      	beq.n	80037a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036b6:	4ba3      	ldr	r3, [pc, #652]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f003 030c 	and.w	r3, r3, #12
 80036be:	2b04      	cmp	r3, #4
 80036c0:	d00c      	beq.n	80036dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036c2:	4ba0      	ldr	r3, [pc, #640]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036ca:	2b08      	cmp	r3, #8
 80036cc:	d112      	bne.n	80036f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036ce:	4b9d      	ldr	r3, [pc, #628]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036da:	d10b      	bne.n	80036f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036dc:	4b99      	ldr	r3, [pc, #612]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d05b      	beq.n	80037a0 <HAL_RCC_OscConfig+0x108>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d157      	bne.n	80037a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e23f      	b.n	8003b74 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036fc:	d106      	bne.n	800370c <HAL_RCC_OscConfig+0x74>
 80036fe:	4b91      	ldr	r3, [pc, #580]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a90      	ldr	r2, [pc, #576]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 8003704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003708:	6013      	str	r3, [r2, #0]
 800370a:	e01d      	b.n	8003748 <HAL_RCC_OscConfig+0xb0>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003714:	d10c      	bne.n	8003730 <HAL_RCC_OscConfig+0x98>
 8003716:	4b8b      	ldr	r3, [pc, #556]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a8a      	ldr	r2, [pc, #552]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 800371c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003720:	6013      	str	r3, [r2, #0]
 8003722:	4b88      	ldr	r3, [pc, #544]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a87      	ldr	r2, [pc, #540]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 8003728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800372c:	6013      	str	r3, [r2, #0]
 800372e:	e00b      	b.n	8003748 <HAL_RCC_OscConfig+0xb0>
 8003730:	4b84      	ldr	r3, [pc, #528]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a83      	ldr	r2, [pc, #524]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 8003736:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800373a:	6013      	str	r3, [r2, #0]
 800373c:	4b81      	ldr	r3, [pc, #516]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a80      	ldr	r2, [pc, #512]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 8003742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003746:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d013      	beq.n	8003778 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003750:	f7fd fdd0 	bl	80012f4 <HAL_GetTick>
 8003754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003758:	f7fd fdcc 	bl	80012f4 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b64      	cmp	r3, #100	; 0x64
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e204      	b.n	8003b74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800376a:	4b76      	ldr	r3, [pc, #472]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d0f0      	beq.n	8003758 <HAL_RCC_OscConfig+0xc0>
 8003776:	e014      	b.n	80037a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003778:	f7fd fdbc 	bl	80012f4 <HAL_GetTick>
 800377c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800377e:	e008      	b.n	8003792 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003780:	f7fd fdb8 	bl	80012f4 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b64      	cmp	r3, #100	; 0x64
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e1f0      	b.n	8003b74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003792:	4b6c      	ldr	r3, [pc, #432]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d1f0      	bne.n	8003780 <HAL_RCC_OscConfig+0xe8>
 800379e:	e000      	b.n	80037a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d063      	beq.n	8003876 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037ae:	4b65      	ldr	r3, [pc, #404]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f003 030c 	and.w	r3, r3, #12
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00b      	beq.n	80037d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037ba:	4b62      	ldr	r3, [pc, #392]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037c2:	2b08      	cmp	r3, #8
 80037c4:	d11c      	bne.n	8003800 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037c6:	4b5f      	ldr	r3, [pc, #380]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d116      	bne.n	8003800 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037d2:	4b5c      	ldr	r3, [pc, #368]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d005      	beq.n	80037ea <HAL_RCC_OscConfig+0x152>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d001      	beq.n	80037ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e1c4      	b.n	8003b74 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ea:	4b56      	ldr	r3, [pc, #344]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	4952      	ldr	r1, [pc, #328]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037fe:	e03a      	b.n	8003876 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d020      	beq.n	800384a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003808:	4b4f      	ldr	r3, [pc, #316]	; (8003948 <HAL_RCC_OscConfig+0x2b0>)
 800380a:	2201      	movs	r2, #1
 800380c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800380e:	f7fd fd71 	bl	80012f4 <HAL_GetTick>
 8003812:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003814:	e008      	b.n	8003828 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003816:	f7fd fd6d 	bl	80012f4 <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	2b02      	cmp	r3, #2
 8003822:	d901      	bls.n	8003828 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e1a5      	b.n	8003b74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003828:	4b46      	ldr	r3, [pc, #280]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	2b00      	cmp	r3, #0
 8003832:	d0f0      	beq.n	8003816 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003834:	4b43      	ldr	r3, [pc, #268]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	00db      	lsls	r3, r3, #3
 8003842:	4940      	ldr	r1, [pc, #256]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 8003844:	4313      	orrs	r3, r2
 8003846:	600b      	str	r3, [r1, #0]
 8003848:	e015      	b.n	8003876 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800384a:	4b3f      	ldr	r3, [pc, #252]	; (8003948 <HAL_RCC_OscConfig+0x2b0>)
 800384c:	2200      	movs	r2, #0
 800384e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003850:	f7fd fd50 	bl	80012f4 <HAL_GetTick>
 8003854:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003856:	e008      	b.n	800386a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003858:	f7fd fd4c 	bl	80012f4 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b02      	cmp	r3, #2
 8003864:	d901      	bls.n	800386a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e184      	b.n	8003b74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800386a:	4b36      	ldr	r3, [pc, #216]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1f0      	bne.n	8003858 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0308 	and.w	r3, r3, #8
 800387e:	2b00      	cmp	r3, #0
 8003880:	d030      	beq.n	80038e4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d016      	beq.n	80038b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800388a:	4b30      	ldr	r3, [pc, #192]	; (800394c <HAL_RCC_OscConfig+0x2b4>)
 800388c:	2201      	movs	r2, #1
 800388e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003890:	f7fd fd30 	bl	80012f4 <HAL_GetTick>
 8003894:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003896:	e008      	b.n	80038aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003898:	f7fd fd2c 	bl	80012f4 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e164      	b.n	8003b74 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038aa:	4b26      	ldr	r3, [pc, #152]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 80038ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d0f0      	beq.n	8003898 <HAL_RCC_OscConfig+0x200>
 80038b6:	e015      	b.n	80038e4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038b8:	4b24      	ldr	r3, [pc, #144]	; (800394c <HAL_RCC_OscConfig+0x2b4>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038be:	f7fd fd19 	bl	80012f4 <HAL_GetTick>
 80038c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038c4:	e008      	b.n	80038d8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038c6:	f7fd fd15 	bl	80012f4 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d901      	bls.n	80038d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e14d      	b.n	8003b74 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038d8:	4b1a      	ldr	r3, [pc, #104]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 80038da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1f0      	bne.n	80038c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0304 	and.w	r3, r3, #4
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f000 80a0 	beq.w	8003a32 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038f2:	2300      	movs	r3, #0
 80038f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038f6:	4b13      	ldr	r3, [pc, #76]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 80038f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10f      	bne.n	8003922 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003902:	2300      	movs	r3, #0
 8003904:	60bb      	str	r3, [r7, #8]
 8003906:	4b0f      	ldr	r3, [pc, #60]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 8003908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390a:	4a0e      	ldr	r2, [pc, #56]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 800390c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003910:	6413      	str	r3, [r2, #64]	; 0x40
 8003912:	4b0c      	ldr	r3, [pc, #48]	; (8003944 <HAL_RCC_OscConfig+0x2ac>)
 8003914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800391a:	60bb      	str	r3, [r7, #8]
 800391c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800391e:	2301      	movs	r3, #1
 8003920:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003922:	4b0b      	ldr	r3, [pc, #44]	; (8003950 <HAL_RCC_OscConfig+0x2b8>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800392a:	2b00      	cmp	r3, #0
 800392c:	d121      	bne.n	8003972 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800392e:	4b08      	ldr	r3, [pc, #32]	; (8003950 <HAL_RCC_OscConfig+0x2b8>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a07      	ldr	r2, [pc, #28]	; (8003950 <HAL_RCC_OscConfig+0x2b8>)
 8003934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003938:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800393a:	f7fd fcdb 	bl	80012f4 <HAL_GetTick>
 800393e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003940:	e011      	b.n	8003966 <HAL_RCC_OscConfig+0x2ce>
 8003942:	bf00      	nop
 8003944:	40023800 	.word	0x40023800
 8003948:	42470000 	.word	0x42470000
 800394c:	42470e80 	.word	0x42470e80
 8003950:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003954:	f7fd fcce 	bl	80012f4 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b02      	cmp	r3, #2
 8003960:	d901      	bls.n	8003966 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e106      	b.n	8003b74 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003966:	4b85      	ldr	r3, [pc, #532]	; (8003b7c <HAL_RCC_OscConfig+0x4e4>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800396e:	2b00      	cmp	r3, #0
 8003970:	d0f0      	beq.n	8003954 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d106      	bne.n	8003988 <HAL_RCC_OscConfig+0x2f0>
 800397a:	4b81      	ldr	r3, [pc, #516]	; (8003b80 <HAL_RCC_OscConfig+0x4e8>)
 800397c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800397e:	4a80      	ldr	r2, [pc, #512]	; (8003b80 <HAL_RCC_OscConfig+0x4e8>)
 8003980:	f043 0301 	orr.w	r3, r3, #1
 8003984:	6713      	str	r3, [r2, #112]	; 0x70
 8003986:	e01c      	b.n	80039c2 <HAL_RCC_OscConfig+0x32a>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	2b05      	cmp	r3, #5
 800398e:	d10c      	bne.n	80039aa <HAL_RCC_OscConfig+0x312>
 8003990:	4b7b      	ldr	r3, [pc, #492]	; (8003b80 <HAL_RCC_OscConfig+0x4e8>)
 8003992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003994:	4a7a      	ldr	r2, [pc, #488]	; (8003b80 <HAL_RCC_OscConfig+0x4e8>)
 8003996:	f043 0304 	orr.w	r3, r3, #4
 800399a:	6713      	str	r3, [r2, #112]	; 0x70
 800399c:	4b78      	ldr	r3, [pc, #480]	; (8003b80 <HAL_RCC_OscConfig+0x4e8>)
 800399e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a0:	4a77      	ldr	r2, [pc, #476]	; (8003b80 <HAL_RCC_OscConfig+0x4e8>)
 80039a2:	f043 0301 	orr.w	r3, r3, #1
 80039a6:	6713      	str	r3, [r2, #112]	; 0x70
 80039a8:	e00b      	b.n	80039c2 <HAL_RCC_OscConfig+0x32a>
 80039aa:	4b75      	ldr	r3, [pc, #468]	; (8003b80 <HAL_RCC_OscConfig+0x4e8>)
 80039ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ae:	4a74      	ldr	r2, [pc, #464]	; (8003b80 <HAL_RCC_OscConfig+0x4e8>)
 80039b0:	f023 0301 	bic.w	r3, r3, #1
 80039b4:	6713      	str	r3, [r2, #112]	; 0x70
 80039b6:	4b72      	ldr	r3, [pc, #456]	; (8003b80 <HAL_RCC_OscConfig+0x4e8>)
 80039b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ba:	4a71      	ldr	r2, [pc, #452]	; (8003b80 <HAL_RCC_OscConfig+0x4e8>)
 80039bc:	f023 0304 	bic.w	r3, r3, #4
 80039c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d015      	beq.n	80039f6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ca:	f7fd fc93 	bl	80012f4 <HAL_GetTick>
 80039ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039d0:	e00a      	b.n	80039e8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039d2:	f7fd fc8f 	bl	80012f4 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d901      	bls.n	80039e8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e0c5      	b.n	8003b74 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039e8:	4b65      	ldr	r3, [pc, #404]	; (8003b80 <HAL_RCC_OscConfig+0x4e8>)
 80039ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ec:	f003 0302 	and.w	r3, r3, #2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d0ee      	beq.n	80039d2 <HAL_RCC_OscConfig+0x33a>
 80039f4:	e014      	b.n	8003a20 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039f6:	f7fd fc7d 	bl	80012f4 <HAL_GetTick>
 80039fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039fc:	e00a      	b.n	8003a14 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039fe:	f7fd fc79 	bl	80012f4 <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d901      	bls.n	8003a14 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e0af      	b.n	8003b74 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a14:	4b5a      	ldr	r3, [pc, #360]	; (8003b80 <HAL_RCC_OscConfig+0x4e8>)
 8003a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a18:	f003 0302 	and.w	r3, r3, #2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d1ee      	bne.n	80039fe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a20:	7dfb      	ldrb	r3, [r7, #23]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d105      	bne.n	8003a32 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a26:	4b56      	ldr	r3, [pc, #344]	; (8003b80 <HAL_RCC_OscConfig+0x4e8>)
 8003a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2a:	4a55      	ldr	r2, [pc, #340]	; (8003b80 <HAL_RCC_OscConfig+0x4e8>)
 8003a2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a30:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	f000 809b 	beq.w	8003b72 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a3c:	4b50      	ldr	r3, [pc, #320]	; (8003b80 <HAL_RCC_OscConfig+0x4e8>)
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f003 030c 	and.w	r3, r3, #12
 8003a44:	2b08      	cmp	r3, #8
 8003a46:	d05c      	beq.n	8003b02 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d141      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a50:	4b4c      	ldr	r3, [pc, #304]	; (8003b84 <HAL_RCC_OscConfig+0x4ec>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a56:	f7fd fc4d 	bl	80012f4 <HAL_GetTick>
 8003a5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a5c:	e008      	b.n	8003a70 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a5e:	f7fd fc49 	bl	80012f4 <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d901      	bls.n	8003a70 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e081      	b.n	8003b74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a70:	4b43      	ldr	r3, [pc, #268]	; (8003b80 <HAL_RCC_OscConfig+0x4e8>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1f0      	bne.n	8003a5e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	69da      	ldr	r2, [r3, #28]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a1b      	ldr	r3, [r3, #32]
 8003a84:	431a      	orrs	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8a:	019b      	lsls	r3, r3, #6
 8003a8c:	431a      	orrs	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a92:	085b      	lsrs	r3, r3, #1
 8003a94:	3b01      	subs	r3, #1
 8003a96:	041b      	lsls	r3, r3, #16
 8003a98:	431a      	orrs	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9e:	061b      	lsls	r3, r3, #24
 8003aa0:	4937      	ldr	r1, [pc, #220]	; (8003b80 <HAL_RCC_OscConfig+0x4e8>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003aa6:	4b37      	ldr	r3, [pc, #220]	; (8003b84 <HAL_RCC_OscConfig+0x4ec>)
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aac:	f7fd fc22 	bl	80012f4 <HAL_GetTick>
 8003ab0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ab2:	e008      	b.n	8003ac6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ab4:	f7fd fc1e 	bl	80012f4 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e056      	b.n	8003b74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ac6:	4b2e      	ldr	r3, [pc, #184]	; (8003b80 <HAL_RCC_OscConfig+0x4e8>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d0f0      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x41c>
 8003ad2:	e04e      	b.n	8003b72 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ad4:	4b2b      	ldr	r3, [pc, #172]	; (8003b84 <HAL_RCC_OscConfig+0x4ec>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ada:	f7fd fc0b 	bl	80012f4 <HAL_GetTick>
 8003ade:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ae0:	e008      	b.n	8003af4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ae2:	f7fd fc07 	bl	80012f4 <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d901      	bls.n	8003af4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	e03f      	b.n	8003b74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003af4:	4b22      	ldr	r3, [pc, #136]	; (8003b80 <HAL_RCC_OscConfig+0x4e8>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d1f0      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x44a>
 8003b00:	e037      	b.n	8003b72 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d101      	bne.n	8003b0e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e032      	b.n	8003b74 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b0e:	4b1c      	ldr	r3, [pc, #112]	; (8003b80 <HAL_RCC_OscConfig+0x4e8>)
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d028      	beq.n	8003b6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d121      	bne.n	8003b6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d11a      	bne.n	8003b6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b38:	68fa      	ldr	r2, [r7, #12]
 8003b3a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b3e:	4013      	ands	r3, r2
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b44:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d111      	bne.n	8003b6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b54:	085b      	lsrs	r3, r3, #1
 8003b56:	3b01      	subs	r3, #1
 8003b58:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d107      	bne.n	8003b6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b68:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d001      	beq.n	8003b72 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e000      	b.n	8003b74 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3718      	adds	r7, #24
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	40007000 	.word	0x40007000
 8003b80:	40023800 	.word	0x40023800
 8003b84:	42470060 	.word	0x42470060

08003b88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d101      	bne.n	8003b9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e0cc      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b9c:	4b68      	ldr	r3, [pc, #416]	; (8003d40 <HAL_RCC_ClockConfig+0x1b8>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0307 	and.w	r3, r3, #7
 8003ba4:	683a      	ldr	r2, [r7, #0]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d90c      	bls.n	8003bc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003baa:	4b65      	ldr	r3, [pc, #404]	; (8003d40 <HAL_RCC_ClockConfig+0x1b8>)
 8003bac:	683a      	ldr	r2, [r7, #0]
 8003bae:	b2d2      	uxtb	r2, r2
 8003bb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bb2:	4b63      	ldr	r3, [pc, #396]	; (8003d40 <HAL_RCC_ClockConfig+0x1b8>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0307 	and.w	r3, r3, #7
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d001      	beq.n	8003bc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e0b8      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d020      	beq.n	8003c12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0304 	and.w	r3, r3, #4
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d005      	beq.n	8003be8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bdc:	4b59      	ldr	r3, [pc, #356]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	4a58      	ldr	r2, [pc, #352]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003be2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003be6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0308 	and.w	r3, r3, #8
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d005      	beq.n	8003c00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bf4:	4b53      	ldr	r3, [pc, #332]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	4a52      	ldr	r2, [pc, #328]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003bfe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c00:	4b50      	ldr	r3, [pc, #320]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	494d      	ldr	r1, [pc, #308]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d044      	beq.n	8003ca8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d107      	bne.n	8003c36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c26:	4b47      	ldr	r3, [pc, #284]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d119      	bne.n	8003c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e07f      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d003      	beq.n	8003c46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c42:	2b03      	cmp	r3, #3
 8003c44:	d107      	bne.n	8003c56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c46:	4b3f      	ldr	r3, [pc, #252]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d109      	bne.n	8003c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e06f      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c56:	4b3b      	ldr	r3, [pc, #236]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e067      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c66:	4b37      	ldr	r3, [pc, #220]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f023 0203 	bic.w	r2, r3, #3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	4934      	ldr	r1, [pc, #208]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c78:	f7fd fb3c 	bl	80012f4 <HAL_GetTick>
 8003c7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c7e:	e00a      	b.n	8003c96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c80:	f7fd fb38 	bl	80012f4 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e04f      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c96:	4b2b      	ldr	r3, [pc, #172]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f003 020c 	and.w	r2, r3, #12
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d1eb      	bne.n	8003c80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ca8:	4b25      	ldr	r3, [pc, #148]	; (8003d40 <HAL_RCC_ClockConfig+0x1b8>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0307 	and.w	r3, r3, #7
 8003cb0:	683a      	ldr	r2, [r7, #0]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d20c      	bcs.n	8003cd0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cb6:	4b22      	ldr	r3, [pc, #136]	; (8003d40 <HAL_RCC_ClockConfig+0x1b8>)
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	b2d2      	uxtb	r2, r2
 8003cbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cbe:	4b20      	ldr	r3, [pc, #128]	; (8003d40 <HAL_RCC_ClockConfig+0x1b8>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0307 	and.w	r3, r3, #7
 8003cc6:	683a      	ldr	r2, [r7, #0]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d001      	beq.n	8003cd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e032      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0304 	and.w	r3, r3, #4
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d008      	beq.n	8003cee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cdc:	4b19      	ldr	r3, [pc, #100]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	4916      	ldr	r1, [pc, #88]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0308 	and.w	r3, r3, #8
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d009      	beq.n	8003d0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cfa:	4b12      	ldr	r3, [pc, #72]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	490e      	ldr	r1, [pc, #56]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d0e:	f000 f821 	bl	8003d54 <HAL_RCC_GetSysClockFreq>
 8003d12:	4602      	mov	r2, r0
 8003d14:	4b0b      	ldr	r3, [pc, #44]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	091b      	lsrs	r3, r3, #4
 8003d1a:	f003 030f 	and.w	r3, r3, #15
 8003d1e:	490a      	ldr	r1, [pc, #40]	; (8003d48 <HAL_RCC_ClockConfig+0x1c0>)
 8003d20:	5ccb      	ldrb	r3, [r1, r3]
 8003d22:	fa22 f303 	lsr.w	r3, r2, r3
 8003d26:	4a09      	ldr	r2, [pc, #36]	; (8003d4c <HAL_RCC_ClockConfig+0x1c4>)
 8003d28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d2a:	4b09      	ldr	r3, [pc, #36]	; (8003d50 <HAL_RCC_ClockConfig+0x1c8>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7fd fa9c 	bl	800126c <HAL_InitTick>

  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3710      	adds	r7, #16
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	40023c00 	.word	0x40023c00
 8003d44:	40023800 	.word	0x40023800
 8003d48:	08012f30 	.word	0x08012f30
 8003d4c:	2000002c 	.word	0x2000002c
 8003d50:	20000030 	.word	0x20000030

08003d54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d54:	b5b0      	push	{r4, r5, r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	6079      	str	r1, [r7, #4]
 8003d5e:	2100      	movs	r1, #0
 8003d60:	60f9      	str	r1, [r7, #12]
 8003d62:	2100      	movs	r1, #0
 8003d64:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003d66:	2100      	movs	r1, #0
 8003d68:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d6a:	4952      	ldr	r1, [pc, #328]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d6c:	6889      	ldr	r1, [r1, #8]
 8003d6e:	f001 010c 	and.w	r1, r1, #12
 8003d72:	2908      	cmp	r1, #8
 8003d74:	d00d      	beq.n	8003d92 <HAL_RCC_GetSysClockFreq+0x3e>
 8003d76:	2908      	cmp	r1, #8
 8003d78:	f200 8094 	bhi.w	8003ea4 <HAL_RCC_GetSysClockFreq+0x150>
 8003d7c:	2900      	cmp	r1, #0
 8003d7e:	d002      	beq.n	8003d86 <HAL_RCC_GetSysClockFreq+0x32>
 8003d80:	2904      	cmp	r1, #4
 8003d82:	d003      	beq.n	8003d8c <HAL_RCC_GetSysClockFreq+0x38>
 8003d84:	e08e      	b.n	8003ea4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d86:	4b4c      	ldr	r3, [pc, #304]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x164>)
 8003d88:	60bb      	str	r3, [r7, #8]
       break;
 8003d8a:	e08e      	b.n	8003eaa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d8c:	4b4b      	ldr	r3, [pc, #300]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x168>)
 8003d8e:	60bb      	str	r3, [r7, #8]
      break;
 8003d90:	e08b      	b.n	8003eaa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d92:	4948      	ldr	r1, [pc, #288]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d94:	6849      	ldr	r1, [r1, #4]
 8003d96:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003d9a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d9c:	4945      	ldr	r1, [pc, #276]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d9e:	6849      	ldr	r1, [r1, #4]
 8003da0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003da4:	2900      	cmp	r1, #0
 8003da6:	d024      	beq.n	8003df2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003da8:	4942      	ldr	r1, [pc, #264]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003daa:	6849      	ldr	r1, [r1, #4]
 8003dac:	0989      	lsrs	r1, r1, #6
 8003dae:	4608      	mov	r0, r1
 8003db0:	f04f 0100 	mov.w	r1, #0
 8003db4:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003db8:	f04f 0500 	mov.w	r5, #0
 8003dbc:	ea00 0204 	and.w	r2, r0, r4
 8003dc0:	ea01 0305 	and.w	r3, r1, r5
 8003dc4:	493d      	ldr	r1, [pc, #244]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x168>)
 8003dc6:	fb01 f003 	mul.w	r0, r1, r3
 8003dca:	2100      	movs	r1, #0
 8003dcc:	fb01 f102 	mul.w	r1, r1, r2
 8003dd0:	1844      	adds	r4, r0, r1
 8003dd2:	493a      	ldr	r1, [pc, #232]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x168>)
 8003dd4:	fba2 0101 	umull	r0, r1, r2, r1
 8003dd8:	1863      	adds	r3, r4, r1
 8003dda:	4619      	mov	r1, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	461a      	mov	r2, r3
 8003de0:	f04f 0300 	mov.w	r3, #0
 8003de4:	f7fc f9f8 	bl	80001d8 <__aeabi_uldivmod>
 8003de8:	4602      	mov	r2, r0
 8003dea:	460b      	mov	r3, r1
 8003dec:	4613      	mov	r3, r2
 8003dee:	60fb      	str	r3, [r7, #12]
 8003df0:	e04a      	b.n	8003e88 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003df2:	4b30      	ldr	r3, [pc, #192]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	099b      	lsrs	r3, r3, #6
 8003df8:	461a      	mov	r2, r3
 8003dfa:	f04f 0300 	mov.w	r3, #0
 8003dfe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003e02:	f04f 0100 	mov.w	r1, #0
 8003e06:	ea02 0400 	and.w	r4, r2, r0
 8003e0a:	ea03 0501 	and.w	r5, r3, r1
 8003e0e:	4620      	mov	r0, r4
 8003e10:	4629      	mov	r1, r5
 8003e12:	f04f 0200 	mov.w	r2, #0
 8003e16:	f04f 0300 	mov.w	r3, #0
 8003e1a:	014b      	lsls	r3, r1, #5
 8003e1c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003e20:	0142      	lsls	r2, r0, #5
 8003e22:	4610      	mov	r0, r2
 8003e24:	4619      	mov	r1, r3
 8003e26:	1b00      	subs	r0, r0, r4
 8003e28:	eb61 0105 	sbc.w	r1, r1, r5
 8003e2c:	f04f 0200 	mov.w	r2, #0
 8003e30:	f04f 0300 	mov.w	r3, #0
 8003e34:	018b      	lsls	r3, r1, #6
 8003e36:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003e3a:	0182      	lsls	r2, r0, #6
 8003e3c:	1a12      	subs	r2, r2, r0
 8003e3e:	eb63 0301 	sbc.w	r3, r3, r1
 8003e42:	f04f 0000 	mov.w	r0, #0
 8003e46:	f04f 0100 	mov.w	r1, #0
 8003e4a:	00d9      	lsls	r1, r3, #3
 8003e4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e50:	00d0      	lsls	r0, r2, #3
 8003e52:	4602      	mov	r2, r0
 8003e54:	460b      	mov	r3, r1
 8003e56:	1912      	adds	r2, r2, r4
 8003e58:	eb45 0303 	adc.w	r3, r5, r3
 8003e5c:	f04f 0000 	mov.w	r0, #0
 8003e60:	f04f 0100 	mov.w	r1, #0
 8003e64:	0299      	lsls	r1, r3, #10
 8003e66:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003e6a:	0290      	lsls	r0, r2, #10
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	460b      	mov	r3, r1
 8003e70:	4610      	mov	r0, r2
 8003e72:	4619      	mov	r1, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	461a      	mov	r2, r3
 8003e78:	f04f 0300 	mov.w	r3, #0
 8003e7c:	f7fc f9ac 	bl	80001d8 <__aeabi_uldivmod>
 8003e80:	4602      	mov	r2, r0
 8003e82:	460b      	mov	r3, r1
 8003e84:	4613      	mov	r3, r2
 8003e86:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e88:	4b0a      	ldr	r3, [pc, #40]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	0c1b      	lsrs	r3, r3, #16
 8003e8e:	f003 0303 	and.w	r3, r3, #3
 8003e92:	3301      	adds	r3, #1
 8003e94:	005b      	lsls	r3, r3, #1
 8003e96:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea0:	60bb      	str	r3, [r7, #8]
      break;
 8003ea2:	e002      	b.n	8003eaa <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ea4:	4b04      	ldr	r3, [pc, #16]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x164>)
 8003ea6:	60bb      	str	r3, [r7, #8]
      break;
 8003ea8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003eaa:	68bb      	ldr	r3, [r7, #8]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3710      	adds	r7, #16
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bdb0      	pop	{r4, r5, r7, pc}
 8003eb4:	40023800 	.word	0x40023800
 8003eb8:	00f42400 	.word	0x00f42400
 8003ebc:	018cba80 	.word	0x018cba80

08003ec0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ec4:	4b03      	ldr	r3, [pc, #12]	; (8003ed4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	2000002c 	.word	0x2000002c

08003ed8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003edc:	f7ff fff0 	bl	8003ec0 <HAL_RCC_GetHCLKFreq>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	4b05      	ldr	r3, [pc, #20]	; (8003ef8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	0a9b      	lsrs	r3, r3, #10
 8003ee8:	f003 0307 	and.w	r3, r3, #7
 8003eec:	4903      	ldr	r1, [pc, #12]	; (8003efc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003eee:	5ccb      	ldrb	r3, [r1, r3]
 8003ef0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	40023800 	.word	0x40023800
 8003efc:	08012f40 	.word	0x08012f40

08003f00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f04:	f7ff ffdc 	bl	8003ec0 <HAL_RCC_GetHCLKFreq>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	4b05      	ldr	r3, [pc, #20]	; (8003f20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	0b5b      	lsrs	r3, r3, #13
 8003f10:	f003 0307 	and.w	r3, r3, #7
 8003f14:	4903      	ldr	r1, [pc, #12]	; (8003f24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f16:	5ccb      	ldrb	r3, [r1, r3]
 8003f18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	40023800 	.word	0x40023800
 8003f24:	08012f40 	.word	0x08012f40

08003f28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e07b      	b.n	8004032 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d108      	bne.n	8003f54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f4a:	d009      	beq.n	8003f60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	61da      	str	r2, [r3, #28]
 8003f52:	e005      	b.n	8003f60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d106      	bne.n	8003f80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f7fc ff92 	bl	8000ea4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2202      	movs	r2, #2
 8003f84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f96:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003fa8:	431a      	orrs	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	691b      	ldr	r3, [r3, #16]
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	431a      	orrs	r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	431a      	orrs	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fd0:	431a      	orrs	r2, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	69db      	ldr	r3, [r3, #28]
 8003fd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fda:	431a      	orrs	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a1b      	ldr	r3, [r3, #32]
 8003fe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe4:	ea42 0103 	orr.w	r1, r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	699b      	ldr	r3, [r3, #24]
 8003ffc:	0c1b      	lsrs	r3, r3, #16
 8003ffe:	f003 0104 	and.w	r1, r3, #4
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004006:	f003 0210 	and.w	r2, r3, #16
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	430a      	orrs	r2, r1
 8004010:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	69da      	ldr	r2, [r3, #28]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004020:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3708      	adds	r7, #8
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}

0800403a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800403a:	b580      	push	{r7, lr}
 800403c:	b088      	sub	sp, #32
 800403e:	af00      	add	r7, sp, #0
 8004040:	60f8      	str	r0, [r7, #12]
 8004042:	60b9      	str	r1, [r7, #8]
 8004044:	603b      	str	r3, [r7, #0]
 8004046:	4613      	mov	r3, r2
 8004048:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800404a:	2300      	movs	r3, #0
 800404c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004054:	2b01      	cmp	r3, #1
 8004056:	d101      	bne.n	800405c <HAL_SPI_Transmit+0x22>
 8004058:	2302      	movs	r3, #2
 800405a:	e126      	b.n	80042aa <HAL_SPI_Transmit+0x270>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004064:	f7fd f946 	bl	80012f4 <HAL_GetTick>
 8004068:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800406a:	88fb      	ldrh	r3, [r7, #6]
 800406c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b01      	cmp	r3, #1
 8004078:	d002      	beq.n	8004080 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800407a:	2302      	movs	r3, #2
 800407c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800407e:	e10b      	b.n	8004298 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d002      	beq.n	800408c <HAL_SPI_Transmit+0x52>
 8004086:	88fb      	ldrh	r3, [r7, #6]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d102      	bne.n	8004092 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004090:	e102      	b.n	8004298 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2203      	movs	r2, #3
 8004096:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	68ba      	ldr	r2, [r7, #8]
 80040a4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	88fa      	ldrh	r2, [r7, #6]
 80040aa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	88fa      	ldrh	r2, [r7, #6]
 80040b0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040d8:	d10f      	bne.n	80040fa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004104:	2b40      	cmp	r3, #64	; 0x40
 8004106:	d007      	beq.n	8004118 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004116:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004120:	d14b      	bne.n	80041ba <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d002      	beq.n	8004130 <HAL_SPI_Transmit+0xf6>
 800412a:	8afb      	ldrh	r3, [r7, #22]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d13e      	bne.n	80041ae <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004134:	881a      	ldrh	r2, [r3, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004140:	1c9a      	adds	r2, r3, #2
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800414a:	b29b      	uxth	r3, r3
 800414c:	3b01      	subs	r3, #1
 800414e:	b29a      	uxth	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004154:	e02b      	b.n	80041ae <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b02      	cmp	r3, #2
 8004162:	d112      	bne.n	800418a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004168:	881a      	ldrh	r2, [r3, #0]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004174:	1c9a      	adds	r2, r3, #2
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800417e:	b29b      	uxth	r3, r3
 8004180:	3b01      	subs	r3, #1
 8004182:	b29a      	uxth	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	86da      	strh	r2, [r3, #54]	; 0x36
 8004188:	e011      	b.n	80041ae <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800418a:	f7fd f8b3 	bl	80012f4 <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	683a      	ldr	r2, [r7, #0]
 8004196:	429a      	cmp	r2, r3
 8004198:	d803      	bhi.n	80041a2 <HAL_SPI_Transmit+0x168>
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a0:	d102      	bne.n	80041a8 <HAL_SPI_Transmit+0x16e>
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d102      	bne.n	80041ae <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80041ac:	e074      	b.n	8004298 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d1ce      	bne.n	8004156 <HAL_SPI_Transmit+0x11c>
 80041b8:	e04c      	b.n	8004254 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d002      	beq.n	80041c8 <HAL_SPI_Transmit+0x18e>
 80041c2:	8afb      	ldrh	r3, [r7, #22]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d140      	bne.n	800424a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	330c      	adds	r3, #12
 80041d2:	7812      	ldrb	r2, [r2, #0]
 80041d4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041da:	1c5a      	adds	r2, r3, #1
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	3b01      	subs	r3, #1
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80041ee:	e02c      	b.n	800424a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f003 0302 	and.w	r3, r3, #2
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d113      	bne.n	8004226 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	330c      	adds	r3, #12
 8004208:	7812      	ldrb	r2, [r2, #0]
 800420a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004210:	1c5a      	adds	r2, r3, #1
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800421a:	b29b      	uxth	r3, r3
 800421c:	3b01      	subs	r3, #1
 800421e:	b29a      	uxth	r2, r3
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	86da      	strh	r2, [r3, #54]	; 0x36
 8004224:	e011      	b.n	800424a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004226:	f7fd f865 	bl	80012f4 <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	683a      	ldr	r2, [r7, #0]
 8004232:	429a      	cmp	r2, r3
 8004234:	d803      	bhi.n	800423e <HAL_SPI_Transmit+0x204>
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800423c:	d102      	bne.n	8004244 <HAL_SPI_Transmit+0x20a>
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d102      	bne.n	800424a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004248:	e026      	b.n	8004298 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800424e:	b29b      	uxth	r3, r3
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1cd      	bne.n	80041f0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004254:	69ba      	ldr	r2, [r7, #24]
 8004256:	6839      	ldr	r1, [r7, #0]
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f000 f9df 	bl	800461c <SPI_EndRxTxTransaction>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d002      	beq.n	800426a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2220      	movs	r2, #32
 8004268:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10a      	bne.n	8004288 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004272:	2300      	movs	r3, #0
 8004274:	613b      	str	r3, [r7, #16]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	613b      	str	r3, [r7, #16]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	613b      	str	r3, [r7, #16]
 8004286:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800428c:	2b00      	cmp	r3, #0
 800428e:	d002      	beq.n	8004296 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	77fb      	strb	r3, [r7, #31]
 8004294:	e000      	b.n	8004298 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004296:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80042a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3720      	adds	r7, #32
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
	...

080042b4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b088      	sub	sp, #32
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	099b      	lsrs	r3, r3, #6
 80042d0:	f003 0301 	and.w	r3, r3, #1
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d10f      	bne.n	80042f8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00a      	beq.n	80042f8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	099b      	lsrs	r3, r3, #6
 80042e6:	f003 0301 	and.w	r3, r3, #1
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d004      	beq.n	80042f8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	4798      	blx	r3
    return;
 80042f6:	e0d7      	b.n	80044a8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	085b      	lsrs	r3, r3, #1
 80042fc:	f003 0301 	and.w	r3, r3, #1
 8004300:	2b00      	cmp	r3, #0
 8004302:	d00a      	beq.n	800431a <HAL_SPI_IRQHandler+0x66>
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	09db      	lsrs	r3, r3, #7
 8004308:	f003 0301 	and.w	r3, r3, #1
 800430c:	2b00      	cmp	r3, #0
 800430e:	d004      	beq.n	800431a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	4798      	blx	r3
    return;
 8004318:	e0c6      	b.n	80044a8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	095b      	lsrs	r3, r3, #5
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	2b00      	cmp	r3, #0
 8004324:	d10c      	bne.n	8004340 <HAL_SPI_IRQHandler+0x8c>
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	099b      	lsrs	r3, r3, #6
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	2b00      	cmp	r3, #0
 8004330:	d106      	bne.n	8004340 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	0a1b      	lsrs	r3, r3, #8
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	2b00      	cmp	r3, #0
 800433c:	f000 80b4 	beq.w	80044a8 <HAL_SPI_IRQHandler+0x1f4>
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	095b      	lsrs	r3, r3, #5
 8004344:	f003 0301 	and.w	r3, r3, #1
 8004348:	2b00      	cmp	r3, #0
 800434a:	f000 80ad 	beq.w	80044a8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	099b      	lsrs	r3, r3, #6
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	2b00      	cmp	r3, #0
 8004358:	d023      	beq.n	80043a2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b03      	cmp	r3, #3
 8004364:	d011      	beq.n	800438a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800436a:	f043 0204 	orr.w	r2, r3, #4
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004372:	2300      	movs	r3, #0
 8004374:	617b      	str	r3, [r7, #20]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	617b      	str	r3, [r7, #20]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	617b      	str	r3, [r7, #20]
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	e00b      	b.n	80043a2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800438a:	2300      	movs	r3, #0
 800438c:	613b      	str	r3, [r7, #16]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	613b      	str	r3, [r7, #16]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	613b      	str	r3, [r7, #16]
 800439e:	693b      	ldr	r3, [r7, #16]
        return;
 80043a0:	e082      	b.n	80044a8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	095b      	lsrs	r3, r3, #5
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d014      	beq.n	80043d8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b2:	f043 0201 	orr.w	r2, r3, #1
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80043ba:	2300      	movs	r3, #0
 80043bc:	60fb      	str	r3, [r7, #12]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	60fb      	str	r3, [r7, #12]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043d4:	601a      	str	r2, [r3, #0]
 80043d6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	0a1b      	lsrs	r3, r3, #8
 80043dc:	f003 0301 	and.w	r3, r3, #1
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00c      	beq.n	80043fe <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e8:	f043 0208 	orr.w	r2, r3, #8
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80043f0:	2300      	movs	r3, #0
 80043f2:	60bb      	str	r3, [r7, #8]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	60bb      	str	r3, [r7, #8]
 80043fc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004402:	2b00      	cmp	r3, #0
 8004404:	d04f      	beq.n	80044a6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	685a      	ldr	r2, [r3, #4]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004414:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	2b00      	cmp	r3, #0
 8004426:	d104      	bne.n	8004432 <HAL_SPI_IRQHandler+0x17e>
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	2b00      	cmp	r3, #0
 8004430:	d034      	beq.n	800449c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	685a      	ldr	r2, [r3, #4]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f022 0203 	bic.w	r2, r2, #3
 8004440:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004446:	2b00      	cmp	r3, #0
 8004448:	d011      	beq.n	800446e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800444e:	4a18      	ldr	r2, [pc, #96]	; (80044b0 <HAL_SPI_IRQHandler+0x1fc>)
 8004450:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004456:	4618      	mov	r0, r3
 8004458:	f7fd f92f 	bl	80016ba <HAL_DMA_Abort_IT>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d005      	beq.n	800446e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004466:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004472:	2b00      	cmp	r3, #0
 8004474:	d016      	beq.n	80044a4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800447a:	4a0d      	ldr	r2, [pc, #52]	; (80044b0 <HAL_SPI_IRQHandler+0x1fc>)
 800447c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004482:	4618      	mov	r0, r3
 8004484:	f7fd f919 	bl	80016ba <HAL_DMA_Abort_IT>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00a      	beq.n	80044a4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004492:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800449a:	e003      	b.n	80044a4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 f809 	bl	80044b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80044a2:	e000      	b.n	80044a6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80044a4:	bf00      	nop
    return;
 80044a6:	bf00      	nop
  }
}
 80044a8:	3720      	adds	r7, #32
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	080044e5 	.word	0x080044e5

080044b4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044d6:	b2db      	uxtb	r3, r3
}
 80044d8:	4618      	mov	r0, r3
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2200      	movs	r2, #0
 80044fc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80044fe:	68f8      	ldr	r0, [r7, #12]
 8004500:	f7ff ffd8 	bl	80044b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004504:	bf00      	nop
 8004506:	3710      	adds	r7, #16
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b088      	sub	sp, #32
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	603b      	str	r3, [r7, #0]
 8004518:	4613      	mov	r3, r2
 800451a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800451c:	f7fc feea 	bl	80012f4 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004524:	1a9b      	subs	r3, r3, r2
 8004526:	683a      	ldr	r2, [r7, #0]
 8004528:	4413      	add	r3, r2
 800452a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800452c:	f7fc fee2 	bl	80012f4 <HAL_GetTick>
 8004530:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004532:	4b39      	ldr	r3, [pc, #228]	; (8004618 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	015b      	lsls	r3, r3, #5
 8004538:	0d1b      	lsrs	r3, r3, #20
 800453a:	69fa      	ldr	r2, [r7, #28]
 800453c:	fb02 f303 	mul.w	r3, r2, r3
 8004540:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004542:	e054      	b.n	80045ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800454a:	d050      	beq.n	80045ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800454c:	f7fc fed2 	bl	80012f4 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	69fa      	ldr	r2, [r7, #28]
 8004558:	429a      	cmp	r2, r3
 800455a:	d902      	bls.n	8004562 <SPI_WaitFlagStateUntilTimeout+0x56>
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d13d      	bne.n	80045de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	685a      	ldr	r2, [r3, #4]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004570:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800457a:	d111      	bne.n	80045a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004584:	d004      	beq.n	8004590 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800458e:	d107      	bne.n	80045a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800459e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045a8:	d10f      	bne.n	80045ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045b8:	601a      	str	r2, [r3, #0]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2201      	movs	r2, #1
 80045ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e017      	b.n	800460e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d101      	bne.n	80045e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80045e4:	2300      	movs	r3, #0
 80045e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	3b01      	subs	r3, #1
 80045ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	689a      	ldr	r2, [r3, #8]
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	4013      	ands	r3, r2
 80045f8:	68ba      	ldr	r2, [r7, #8]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	bf0c      	ite	eq
 80045fe:	2301      	moveq	r3, #1
 8004600:	2300      	movne	r3, #0
 8004602:	b2db      	uxtb	r3, r3
 8004604:	461a      	mov	r2, r3
 8004606:	79fb      	ldrb	r3, [r7, #7]
 8004608:	429a      	cmp	r2, r3
 800460a:	d19b      	bne.n	8004544 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3720      	adds	r7, #32
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	2000002c 	.word	0x2000002c

0800461c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b088      	sub	sp, #32
 8004620:	af02      	add	r7, sp, #8
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004628:	4b1b      	ldr	r3, [pc, #108]	; (8004698 <SPI_EndRxTxTransaction+0x7c>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a1b      	ldr	r2, [pc, #108]	; (800469c <SPI_EndRxTxTransaction+0x80>)
 800462e:	fba2 2303 	umull	r2, r3, r2, r3
 8004632:	0d5b      	lsrs	r3, r3, #21
 8004634:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004638:	fb02 f303 	mul.w	r3, r2, r3
 800463c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004646:	d112      	bne.n	800466e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	9300      	str	r3, [sp, #0]
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	2200      	movs	r2, #0
 8004650:	2180      	movs	r1, #128	; 0x80
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	f7ff ff5a 	bl	800450c <SPI_WaitFlagStateUntilTimeout>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d016      	beq.n	800468c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004662:	f043 0220 	orr.w	r2, r3, #32
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e00f      	b.n	800468e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00a      	beq.n	800468a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	3b01      	subs	r3, #1
 8004678:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004684:	2b80      	cmp	r3, #128	; 0x80
 8004686:	d0f2      	beq.n	800466e <SPI_EndRxTxTransaction+0x52>
 8004688:	e000      	b.n	800468c <SPI_EndRxTxTransaction+0x70>
        break;
 800468a:	bf00      	nop
  }

  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3718      	adds	r7, #24
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	2000002c 	.word	0x2000002c
 800469c:	165e9f81 	.word	0x165e9f81

080046a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d101      	bne.n	80046b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e03f      	b.n	8004732 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d106      	bne.n	80046cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f7fc fd34 	bl	8001134 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2224      	movs	r2, #36	; 0x24
 80046d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68da      	ldr	r2, [r3, #12]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 fd7b 	bl	80051e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	691a      	ldr	r2, [r3, #16]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	695a      	ldr	r2, [r3, #20]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004708:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68da      	ldr	r2, [r3, #12]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004718:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2220      	movs	r2, #32
 8004724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2220      	movs	r2, #32
 800472c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3708      	adds	r7, #8
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}

0800473a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800473a:	b580      	push	{r7, lr}
 800473c:	b08a      	sub	sp, #40	; 0x28
 800473e:	af02      	add	r7, sp, #8
 8004740:	60f8      	str	r0, [r7, #12]
 8004742:	60b9      	str	r1, [r7, #8]
 8004744:	603b      	str	r3, [r7, #0]
 8004746:	4613      	mov	r3, r2
 8004748:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800474a:	2300      	movs	r3, #0
 800474c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004754:	b2db      	uxtb	r3, r3
 8004756:	2b20      	cmp	r3, #32
 8004758:	d17c      	bne.n	8004854 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d002      	beq.n	8004766 <HAL_UART_Transmit+0x2c>
 8004760:	88fb      	ldrh	r3, [r7, #6]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d101      	bne.n	800476a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e075      	b.n	8004856 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004770:	2b01      	cmp	r3, #1
 8004772:	d101      	bne.n	8004778 <HAL_UART_Transmit+0x3e>
 8004774:	2302      	movs	r3, #2
 8004776:	e06e      	b.n	8004856 <HAL_UART_Transmit+0x11c>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2221      	movs	r2, #33	; 0x21
 800478a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800478e:	f7fc fdb1 	bl	80012f4 <HAL_GetTick>
 8004792:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	88fa      	ldrh	r2, [r7, #6]
 8004798:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	88fa      	ldrh	r2, [r7, #6]
 800479e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047a8:	d108      	bne.n	80047bc <HAL_UART_Transmit+0x82>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d104      	bne.n	80047bc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80047b2:	2300      	movs	r3, #0
 80047b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	61bb      	str	r3, [r7, #24]
 80047ba:	e003      	b.n	80047c4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047c0:	2300      	movs	r3, #0
 80047c2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80047cc:	e02a      	b.n	8004824 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	9300      	str	r3, [sp, #0]
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	2200      	movs	r2, #0
 80047d6:	2180      	movs	r1, #128	; 0x80
 80047d8:	68f8      	ldr	r0, [r7, #12]
 80047da:	f000 faf9 	bl	8004dd0 <UART_WaitOnFlagUntilTimeout>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d001      	beq.n	80047e8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e036      	b.n	8004856 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d10b      	bne.n	8004806 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	881b      	ldrh	r3, [r3, #0]
 80047f2:	461a      	mov	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	3302      	adds	r3, #2
 8004802:	61bb      	str	r3, [r7, #24]
 8004804:	e007      	b.n	8004816 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	781a      	ldrb	r2, [r3, #0]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	3301      	adds	r3, #1
 8004814:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800481a:	b29b      	uxth	r3, r3
 800481c:	3b01      	subs	r3, #1
 800481e:	b29a      	uxth	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004828:	b29b      	uxth	r3, r3
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1cf      	bne.n	80047ce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	9300      	str	r3, [sp, #0]
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	2200      	movs	r2, #0
 8004836:	2140      	movs	r1, #64	; 0x40
 8004838:	68f8      	ldr	r0, [r7, #12]
 800483a:	f000 fac9 	bl	8004dd0 <UART_WaitOnFlagUntilTimeout>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d001      	beq.n	8004848 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e006      	b.n	8004856 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2220      	movs	r2, #32
 800484c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004850:	2300      	movs	r3, #0
 8004852:	e000      	b.n	8004856 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004854:	2302      	movs	r3, #2
  }
}
 8004856:	4618      	mov	r0, r3
 8004858:	3720      	adds	r7, #32
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
	...

08004860 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b0ba      	sub	sp, #232	; 0xe8
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004886:	2300      	movs	r3, #0
 8004888:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800488c:	2300      	movs	r3, #0
 800488e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004896:	f003 030f 	and.w	r3, r3, #15
 800489a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800489e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d10f      	bne.n	80048c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048aa:	f003 0320 	and.w	r3, r3, #32
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d009      	beq.n	80048c6 <HAL_UART_IRQHandler+0x66>
 80048b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048b6:	f003 0320 	and.w	r3, r3, #32
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d003      	beq.n	80048c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 fbd3 	bl	800506a <UART_Receive_IT>
      return;
 80048c4:	e256      	b.n	8004d74 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80048c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	f000 80de 	beq.w	8004a8c <HAL_UART_IRQHandler+0x22c>
 80048d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048d4:	f003 0301 	and.w	r3, r3, #1
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d106      	bne.n	80048ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80048dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048e0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f000 80d1 	beq.w	8004a8c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80048ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048ee:	f003 0301 	and.w	r3, r3, #1
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00b      	beq.n	800490e <HAL_UART_IRQHandler+0xae>
 80048f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d005      	beq.n	800490e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004906:	f043 0201 	orr.w	r2, r3, #1
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800490e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004912:	f003 0304 	and.w	r3, r3, #4
 8004916:	2b00      	cmp	r3, #0
 8004918:	d00b      	beq.n	8004932 <HAL_UART_IRQHandler+0xd2>
 800491a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	2b00      	cmp	r3, #0
 8004924:	d005      	beq.n	8004932 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492a:	f043 0202 	orr.w	r2, r3, #2
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00b      	beq.n	8004956 <HAL_UART_IRQHandler+0xf6>
 800493e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	2b00      	cmp	r3, #0
 8004948:	d005      	beq.n	8004956 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494e:	f043 0204 	orr.w	r2, r3, #4
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800495a:	f003 0308 	and.w	r3, r3, #8
 800495e:	2b00      	cmp	r3, #0
 8004960:	d011      	beq.n	8004986 <HAL_UART_IRQHandler+0x126>
 8004962:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004966:	f003 0320 	and.w	r3, r3, #32
 800496a:	2b00      	cmp	r3, #0
 800496c:	d105      	bne.n	800497a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800496e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	2b00      	cmp	r3, #0
 8004978:	d005      	beq.n	8004986 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497e:	f043 0208 	orr.w	r2, r3, #8
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498a:	2b00      	cmp	r3, #0
 800498c:	f000 81ed 	beq.w	8004d6a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004994:	f003 0320 	and.w	r3, r3, #32
 8004998:	2b00      	cmp	r3, #0
 800499a:	d008      	beq.n	80049ae <HAL_UART_IRQHandler+0x14e>
 800499c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049a0:	f003 0320 	and.w	r3, r3, #32
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d002      	beq.n	80049ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f000 fb5e 	bl	800506a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b8:	2b40      	cmp	r3, #64	; 0x40
 80049ba:	bf0c      	ite	eq
 80049bc:	2301      	moveq	r3, #1
 80049be:	2300      	movne	r3, #0
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ca:	f003 0308 	and.w	r3, r3, #8
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d103      	bne.n	80049da <HAL_UART_IRQHandler+0x17a>
 80049d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d04f      	beq.n	8004a7a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 fa66 	bl	8004eac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ea:	2b40      	cmp	r3, #64	; 0x40
 80049ec:	d141      	bne.n	8004a72 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	3314      	adds	r3, #20
 80049f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80049fc:	e853 3f00 	ldrex	r3, [r3]
 8004a00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004a04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	3314      	adds	r3, #20
 8004a16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004a1a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004a1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004a26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004a2a:	e841 2300 	strex	r3, r2, [r1]
 8004a2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004a32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1d9      	bne.n	80049ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d013      	beq.n	8004a6a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a46:	4a7d      	ldr	r2, [pc, #500]	; (8004c3c <HAL_UART_IRQHandler+0x3dc>)
 8004a48:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f7fc fe33 	bl	80016ba <HAL_DMA_Abort_IT>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d016      	beq.n	8004a88 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a64:	4610      	mov	r0, r2
 8004a66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a68:	e00e      	b.n	8004a88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 f99a 	bl	8004da4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a70:	e00a      	b.n	8004a88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f996 	bl	8004da4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a78:	e006      	b.n	8004a88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 f992 	bl	8004da4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004a86:	e170      	b.n	8004d6a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a88:	bf00      	nop
    return;
 8004a8a:	e16e      	b.n	8004d6a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	f040 814a 	bne.w	8004d2a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a9a:	f003 0310 	and.w	r3, r3, #16
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	f000 8143 	beq.w	8004d2a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004aa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004aa8:	f003 0310 	and.w	r3, r3, #16
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f000 813c 	beq.w	8004d2a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	60bb      	str	r3, [r7, #8]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	60bb      	str	r3, [r7, #8]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	60bb      	str	r3, [r7, #8]
 8004ac6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad2:	2b40      	cmp	r3, #64	; 0x40
 8004ad4:	f040 80b4 	bne.w	8004c40 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ae4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f000 8140 	beq.w	8004d6e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004af2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004af6:	429a      	cmp	r2, r3
 8004af8:	f080 8139 	bcs.w	8004d6e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b02:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b08:	69db      	ldr	r3, [r3, #28]
 8004b0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b0e:	f000 8088 	beq.w	8004c22 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	330c      	adds	r3, #12
 8004b18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b20:	e853 3f00 	ldrex	r3, [r3]
 8004b24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004b28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	330c      	adds	r3, #12
 8004b3a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004b3e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b46:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004b4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004b4e:	e841 2300 	strex	r3, r2, [r1]
 8004b52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004b56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1d9      	bne.n	8004b12 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	3314      	adds	r3, #20
 8004b64:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b68:	e853 3f00 	ldrex	r3, [r3]
 8004b6c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004b6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b70:	f023 0301 	bic.w	r3, r3, #1
 8004b74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	3314      	adds	r3, #20
 8004b7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004b82:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004b86:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b88:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004b8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004b8e:	e841 2300 	strex	r3, r2, [r1]
 8004b92:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004b94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d1e1      	bne.n	8004b5e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	3314      	adds	r3, #20
 8004ba0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ba4:	e853 3f00 	ldrex	r3, [r3]
 8004ba8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004baa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	3314      	adds	r3, #20
 8004bba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004bbe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004bc0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004bc4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004bc6:	e841 2300 	strex	r3, r2, [r1]
 8004bca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004bcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d1e3      	bne.n	8004b9a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2220      	movs	r2, #32
 8004bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	330c      	adds	r3, #12
 8004be6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bea:	e853 3f00 	ldrex	r3, [r3]
 8004bee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004bf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bf2:	f023 0310 	bic.w	r3, r3, #16
 8004bf6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	330c      	adds	r3, #12
 8004c00:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004c04:	65ba      	str	r2, [r7, #88]	; 0x58
 8004c06:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c08:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c0c:	e841 2300 	strex	r3, r2, [r1]
 8004c10:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004c12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d1e3      	bne.n	8004be0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f7fc fcdc 	bl	80015da <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	4619      	mov	r1, r3
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 f8c0 	bl	8004db8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c38:	e099      	b.n	8004d6e <HAL_UART_IRQHandler+0x50e>
 8004c3a:	bf00      	nop
 8004c3c:	08004f73 	.word	0x08004f73
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	f000 808b 	beq.w	8004d72 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004c5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	f000 8086 	beq.w	8004d72 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	330c      	adds	r3, #12
 8004c6c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c70:	e853 3f00 	ldrex	r3, [r3]
 8004c74:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	330c      	adds	r3, #12
 8004c86:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004c8a:	647a      	str	r2, [r7, #68]	; 0x44
 8004c8c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c92:	e841 2300 	strex	r3, r2, [r1]
 8004c96:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d1e3      	bne.n	8004c66 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	3314      	adds	r3, #20
 8004ca4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca8:	e853 3f00 	ldrex	r3, [r3]
 8004cac:	623b      	str	r3, [r7, #32]
   return(result);
 8004cae:	6a3b      	ldr	r3, [r7, #32]
 8004cb0:	f023 0301 	bic.w	r3, r3, #1
 8004cb4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	3314      	adds	r3, #20
 8004cbe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004cc2:	633a      	str	r2, [r7, #48]	; 0x30
 8004cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004cc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cca:	e841 2300 	strex	r3, r2, [r1]
 8004cce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d1e3      	bne.n	8004c9e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2220      	movs	r2, #32
 8004cda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	330c      	adds	r3, #12
 8004cea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	e853 3f00 	ldrex	r3, [r3]
 8004cf2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f023 0310 	bic.w	r3, r3, #16
 8004cfa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	330c      	adds	r3, #12
 8004d04:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004d08:	61fa      	str	r2, [r7, #28]
 8004d0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d0c:	69b9      	ldr	r1, [r7, #24]
 8004d0e:	69fa      	ldr	r2, [r7, #28]
 8004d10:	e841 2300 	strex	r3, r2, [r1]
 8004d14:	617b      	str	r3, [r7, #20]
   return(result);
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d1e3      	bne.n	8004ce4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d20:	4619      	mov	r1, r3
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 f848 	bl	8004db8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d28:	e023      	b.n	8004d72 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d009      	beq.n	8004d4a <HAL_UART_IRQHandler+0x4ea>
 8004d36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d003      	beq.n	8004d4a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 f929 	bl	8004f9a <UART_Transmit_IT>
    return;
 8004d48:	e014      	b.n	8004d74 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00e      	beq.n	8004d74 <HAL_UART_IRQHandler+0x514>
 8004d56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d008      	beq.n	8004d74 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 f969 	bl	800503a <UART_EndTransmit_IT>
    return;
 8004d68:	e004      	b.n	8004d74 <HAL_UART_IRQHandler+0x514>
    return;
 8004d6a:	bf00      	nop
 8004d6c:	e002      	b.n	8004d74 <HAL_UART_IRQHandler+0x514>
      return;
 8004d6e:	bf00      	nop
 8004d70:	e000      	b.n	8004d74 <HAL_UART_IRQHandler+0x514>
      return;
 8004d72:	bf00      	nop
  }
}
 8004d74:	37e8      	adds	r7, #232	; 0xe8
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop

08004d7c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004dc4:	bf00      	nop
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b090      	sub	sp, #64	; 0x40
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	603b      	str	r3, [r7, #0]
 8004ddc:	4613      	mov	r3, r2
 8004dde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004de0:	e050      	b.n	8004e84 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004de2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de8:	d04c      	beq.n	8004e84 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004dea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d007      	beq.n	8004e00 <UART_WaitOnFlagUntilTimeout+0x30>
 8004df0:	f7fc fa80 	bl	80012f4 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d241      	bcs.n	8004e84 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	330c      	adds	r3, #12
 8004e06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e0a:	e853 3f00 	ldrex	r3, [r3]
 8004e0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e12:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	330c      	adds	r3, #12
 8004e1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e20:	637a      	str	r2, [r7, #52]	; 0x34
 8004e22:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e28:	e841 2300 	strex	r3, r2, [r1]
 8004e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1e5      	bne.n	8004e00 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	3314      	adds	r3, #20
 8004e3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	e853 3f00 	ldrex	r3, [r3]
 8004e42:	613b      	str	r3, [r7, #16]
   return(result);
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	f023 0301 	bic.w	r3, r3, #1
 8004e4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	3314      	adds	r3, #20
 8004e52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e54:	623a      	str	r2, [r7, #32]
 8004e56:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e58:	69f9      	ldr	r1, [r7, #28]
 8004e5a:	6a3a      	ldr	r2, [r7, #32]
 8004e5c:	e841 2300 	strex	r3, r2, [r1]
 8004e60:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1e5      	bne.n	8004e34 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2220      	movs	r2, #32
 8004e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2220      	movs	r2, #32
 8004e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004e80:	2303      	movs	r3, #3
 8004e82:	e00f      	b.n	8004ea4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	68ba      	ldr	r2, [r7, #8]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	bf0c      	ite	eq
 8004e94:	2301      	moveq	r3, #1
 8004e96:	2300      	movne	r3, #0
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	79fb      	ldrb	r3, [r7, #7]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d09f      	beq.n	8004de2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3740      	adds	r7, #64	; 0x40
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b095      	sub	sp, #84	; 0x54
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	330c      	adds	r3, #12
 8004eba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ebe:	e853 3f00 	ldrex	r3, [r3]
 8004ec2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004eca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	330c      	adds	r3, #12
 8004ed2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ed4:	643a      	str	r2, [r7, #64]	; 0x40
 8004ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004eda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004edc:	e841 2300 	strex	r3, r2, [r1]
 8004ee0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1e5      	bne.n	8004eb4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	3314      	adds	r3, #20
 8004eee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef0:	6a3b      	ldr	r3, [r7, #32]
 8004ef2:	e853 3f00 	ldrex	r3, [r3]
 8004ef6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	f023 0301 	bic.w	r3, r3, #1
 8004efe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	3314      	adds	r3, #20
 8004f06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f10:	e841 2300 	strex	r3, r2, [r1]
 8004f14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1e5      	bne.n	8004ee8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d119      	bne.n	8004f58 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	330c      	adds	r3, #12
 8004f2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	e853 3f00 	ldrex	r3, [r3]
 8004f32:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	f023 0310 	bic.w	r3, r3, #16
 8004f3a:	647b      	str	r3, [r7, #68]	; 0x44
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	330c      	adds	r3, #12
 8004f42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f44:	61ba      	str	r2, [r7, #24]
 8004f46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f48:	6979      	ldr	r1, [r7, #20]
 8004f4a:	69ba      	ldr	r2, [r7, #24]
 8004f4c:	e841 2300 	strex	r3, r2, [r1]
 8004f50:	613b      	str	r3, [r7, #16]
   return(result);
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1e5      	bne.n	8004f24 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2220      	movs	r2, #32
 8004f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004f66:	bf00      	nop
 8004f68:	3754      	adds	r7, #84	; 0x54
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr

08004f72 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f72:	b580      	push	{r7, lr}
 8004f74:	b084      	sub	sp, #16
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f7e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2200      	movs	r2, #0
 8004f84:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f8c:	68f8      	ldr	r0, [r7, #12]
 8004f8e:	f7ff ff09 	bl	8004da4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f92:	bf00      	nop
 8004f94:	3710      	adds	r7, #16
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}

08004f9a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004f9a:	b480      	push	{r7}
 8004f9c:	b085      	sub	sp, #20
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	2b21      	cmp	r3, #33	; 0x21
 8004fac:	d13e      	bne.n	800502c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fb6:	d114      	bne.n	8004fe2 <UART_Transmit_IT+0x48>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d110      	bne.n	8004fe2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a1b      	ldr	r3, [r3, #32]
 8004fc4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	881b      	ldrh	r3, [r3, #0]
 8004fca:	461a      	mov	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fd4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a1b      	ldr	r3, [r3, #32]
 8004fda:	1c9a      	adds	r2, r3, #2
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	621a      	str	r2, [r3, #32]
 8004fe0:	e008      	b.n	8004ff4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a1b      	ldr	r3, [r3, #32]
 8004fe6:	1c59      	adds	r1, r3, #1
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	6211      	str	r1, [r2, #32]
 8004fec:	781a      	ldrb	r2, [r3, #0]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	4619      	mov	r1, r3
 8005002:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005004:	2b00      	cmp	r3, #0
 8005006:	d10f      	bne.n	8005028 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68da      	ldr	r2, [r3, #12]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005016:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68da      	ldr	r2, [r3, #12]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005026:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005028:	2300      	movs	r3, #0
 800502a:	e000      	b.n	800502e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800502c:	2302      	movs	r3, #2
  }
}
 800502e:	4618      	mov	r0, r3
 8005030:	3714      	adds	r7, #20
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr

0800503a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800503a:	b580      	push	{r7, lr}
 800503c:	b082      	sub	sp, #8
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68da      	ldr	r2, [r3, #12]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005050:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2220      	movs	r2, #32
 8005056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f7ff fe8e 	bl	8004d7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3708      	adds	r7, #8
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}

0800506a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800506a:	b580      	push	{r7, lr}
 800506c:	b08c      	sub	sp, #48	; 0x30
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005078:	b2db      	uxtb	r3, r3
 800507a:	2b22      	cmp	r3, #34	; 0x22
 800507c:	f040 80ab 	bne.w	80051d6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005088:	d117      	bne.n	80050ba <UART_Receive_IT+0x50>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d113      	bne.n	80050ba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005092:	2300      	movs	r3, #0
 8005094:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800509a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050a8:	b29a      	uxth	r2, r3
 80050aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b2:	1c9a      	adds	r2, r3, #2
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	629a      	str	r2, [r3, #40]	; 0x28
 80050b8:	e026      	b.n	8005108 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050be:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80050c0:	2300      	movs	r3, #0
 80050c2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050cc:	d007      	beq.n	80050de <UART_Receive_IT+0x74>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d10a      	bne.n	80050ec <UART_Receive_IT+0x82>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d106      	bne.n	80050ec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	b2da      	uxtb	r2, r3
 80050e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e8:	701a      	strb	r2, [r3, #0]
 80050ea:	e008      	b.n	80050fe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050f8:	b2da      	uxtb	r2, r3
 80050fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050fc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005102:	1c5a      	adds	r2, r3, #1
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800510c:	b29b      	uxth	r3, r3
 800510e:	3b01      	subs	r3, #1
 8005110:	b29b      	uxth	r3, r3
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	4619      	mov	r1, r3
 8005116:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005118:	2b00      	cmp	r3, #0
 800511a:	d15a      	bne.n	80051d2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68da      	ldr	r2, [r3, #12]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f022 0220 	bic.w	r2, r2, #32
 800512a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68da      	ldr	r2, [r3, #12]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800513a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	695a      	ldr	r2, [r3, #20]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f022 0201 	bic.w	r2, r2, #1
 800514a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2220      	movs	r2, #32
 8005150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005158:	2b01      	cmp	r3, #1
 800515a:	d135      	bne.n	80051c8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	330c      	adds	r3, #12
 8005168:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	e853 3f00 	ldrex	r3, [r3]
 8005170:	613b      	str	r3, [r7, #16]
   return(result);
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	f023 0310 	bic.w	r3, r3, #16
 8005178:	627b      	str	r3, [r7, #36]	; 0x24
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	330c      	adds	r3, #12
 8005180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005182:	623a      	str	r2, [r7, #32]
 8005184:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005186:	69f9      	ldr	r1, [r7, #28]
 8005188:	6a3a      	ldr	r2, [r7, #32]
 800518a:	e841 2300 	strex	r3, r2, [r1]
 800518e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d1e5      	bne.n	8005162 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0310 	and.w	r3, r3, #16
 80051a0:	2b10      	cmp	r3, #16
 80051a2:	d10a      	bne.n	80051ba <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051a4:	2300      	movs	r3, #0
 80051a6:	60fb      	str	r3, [r7, #12]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	60fb      	str	r3, [r7, #12]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	60fb      	str	r3, [r7, #12]
 80051b8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80051be:	4619      	mov	r1, r3
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f7ff fdf9 	bl	8004db8 <HAL_UARTEx_RxEventCallback>
 80051c6:	e002      	b.n	80051ce <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f7ff fde1 	bl	8004d90 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80051ce:	2300      	movs	r3, #0
 80051d0:	e002      	b.n	80051d8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80051d2:	2300      	movs	r3, #0
 80051d4:	e000      	b.n	80051d8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80051d6:	2302      	movs	r3, #2
  }
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3730      	adds	r7, #48	; 0x30
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051e4:	b09f      	sub	sp, #124	; 0x7c
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80051f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051f6:	68d9      	ldr	r1, [r3, #12]
 80051f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	ea40 0301 	orr.w	r3, r0, r1
 8005200:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005202:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005204:	689a      	ldr	r2, [r3, #8]
 8005206:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	431a      	orrs	r2, r3
 800520c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800520e:	695b      	ldr	r3, [r3, #20]
 8005210:	431a      	orrs	r2, r3
 8005212:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005214:	69db      	ldr	r3, [r3, #28]
 8005216:	4313      	orrs	r3, r2
 8005218:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800521a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005224:	f021 010c 	bic.w	r1, r1, #12
 8005228:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800522e:	430b      	orrs	r3, r1
 8005230:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005232:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	695b      	ldr	r3, [r3, #20]
 8005238:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800523c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800523e:	6999      	ldr	r1, [r3, #24]
 8005240:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	ea40 0301 	orr.w	r3, r0, r1
 8005248:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800524a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	4bc5      	ldr	r3, [pc, #788]	; (8005564 <UART_SetConfig+0x384>)
 8005250:	429a      	cmp	r2, r3
 8005252:	d004      	beq.n	800525e <UART_SetConfig+0x7e>
 8005254:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	4bc3      	ldr	r3, [pc, #780]	; (8005568 <UART_SetConfig+0x388>)
 800525a:	429a      	cmp	r2, r3
 800525c:	d103      	bne.n	8005266 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800525e:	f7fe fe4f 	bl	8003f00 <HAL_RCC_GetPCLK2Freq>
 8005262:	6778      	str	r0, [r7, #116]	; 0x74
 8005264:	e002      	b.n	800526c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005266:	f7fe fe37 	bl	8003ed8 <HAL_RCC_GetPCLK1Freq>
 800526a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800526c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800526e:	69db      	ldr	r3, [r3, #28]
 8005270:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005274:	f040 80b6 	bne.w	80053e4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005278:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800527a:	461c      	mov	r4, r3
 800527c:	f04f 0500 	mov.w	r5, #0
 8005280:	4622      	mov	r2, r4
 8005282:	462b      	mov	r3, r5
 8005284:	1891      	adds	r1, r2, r2
 8005286:	6439      	str	r1, [r7, #64]	; 0x40
 8005288:	415b      	adcs	r3, r3
 800528a:	647b      	str	r3, [r7, #68]	; 0x44
 800528c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005290:	1912      	adds	r2, r2, r4
 8005292:	eb45 0303 	adc.w	r3, r5, r3
 8005296:	f04f 0000 	mov.w	r0, #0
 800529a:	f04f 0100 	mov.w	r1, #0
 800529e:	00d9      	lsls	r1, r3, #3
 80052a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052a4:	00d0      	lsls	r0, r2, #3
 80052a6:	4602      	mov	r2, r0
 80052a8:	460b      	mov	r3, r1
 80052aa:	1911      	adds	r1, r2, r4
 80052ac:	6639      	str	r1, [r7, #96]	; 0x60
 80052ae:	416b      	adcs	r3, r5
 80052b0:	667b      	str	r3, [r7, #100]	; 0x64
 80052b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	461a      	mov	r2, r3
 80052b8:	f04f 0300 	mov.w	r3, #0
 80052bc:	1891      	adds	r1, r2, r2
 80052be:	63b9      	str	r1, [r7, #56]	; 0x38
 80052c0:	415b      	adcs	r3, r3
 80052c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80052c8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80052cc:	f7fa ff84 	bl	80001d8 <__aeabi_uldivmod>
 80052d0:	4602      	mov	r2, r0
 80052d2:	460b      	mov	r3, r1
 80052d4:	4ba5      	ldr	r3, [pc, #660]	; (800556c <UART_SetConfig+0x38c>)
 80052d6:	fba3 2302 	umull	r2, r3, r3, r2
 80052da:	095b      	lsrs	r3, r3, #5
 80052dc:	011e      	lsls	r6, r3, #4
 80052de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052e0:	461c      	mov	r4, r3
 80052e2:	f04f 0500 	mov.w	r5, #0
 80052e6:	4622      	mov	r2, r4
 80052e8:	462b      	mov	r3, r5
 80052ea:	1891      	adds	r1, r2, r2
 80052ec:	6339      	str	r1, [r7, #48]	; 0x30
 80052ee:	415b      	adcs	r3, r3
 80052f0:	637b      	str	r3, [r7, #52]	; 0x34
 80052f2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80052f6:	1912      	adds	r2, r2, r4
 80052f8:	eb45 0303 	adc.w	r3, r5, r3
 80052fc:	f04f 0000 	mov.w	r0, #0
 8005300:	f04f 0100 	mov.w	r1, #0
 8005304:	00d9      	lsls	r1, r3, #3
 8005306:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800530a:	00d0      	lsls	r0, r2, #3
 800530c:	4602      	mov	r2, r0
 800530e:	460b      	mov	r3, r1
 8005310:	1911      	adds	r1, r2, r4
 8005312:	65b9      	str	r1, [r7, #88]	; 0x58
 8005314:	416b      	adcs	r3, r5
 8005316:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005318:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	461a      	mov	r2, r3
 800531e:	f04f 0300 	mov.w	r3, #0
 8005322:	1891      	adds	r1, r2, r2
 8005324:	62b9      	str	r1, [r7, #40]	; 0x28
 8005326:	415b      	adcs	r3, r3
 8005328:	62fb      	str	r3, [r7, #44]	; 0x2c
 800532a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800532e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005332:	f7fa ff51 	bl	80001d8 <__aeabi_uldivmod>
 8005336:	4602      	mov	r2, r0
 8005338:	460b      	mov	r3, r1
 800533a:	4b8c      	ldr	r3, [pc, #560]	; (800556c <UART_SetConfig+0x38c>)
 800533c:	fba3 1302 	umull	r1, r3, r3, r2
 8005340:	095b      	lsrs	r3, r3, #5
 8005342:	2164      	movs	r1, #100	; 0x64
 8005344:	fb01 f303 	mul.w	r3, r1, r3
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	00db      	lsls	r3, r3, #3
 800534c:	3332      	adds	r3, #50	; 0x32
 800534e:	4a87      	ldr	r2, [pc, #540]	; (800556c <UART_SetConfig+0x38c>)
 8005350:	fba2 2303 	umull	r2, r3, r2, r3
 8005354:	095b      	lsrs	r3, r3, #5
 8005356:	005b      	lsls	r3, r3, #1
 8005358:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800535c:	441e      	add	r6, r3
 800535e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005360:	4618      	mov	r0, r3
 8005362:	f04f 0100 	mov.w	r1, #0
 8005366:	4602      	mov	r2, r0
 8005368:	460b      	mov	r3, r1
 800536a:	1894      	adds	r4, r2, r2
 800536c:	623c      	str	r4, [r7, #32]
 800536e:	415b      	adcs	r3, r3
 8005370:	627b      	str	r3, [r7, #36]	; 0x24
 8005372:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005376:	1812      	adds	r2, r2, r0
 8005378:	eb41 0303 	adc.w	r3, r1, r3
 800537c:	f04f 0400 	mov.w	r4, #0
 8005380:	f04f 0500 	mov.w	r5, #0
 8005384:	00dd      	lsls	r5, r3, #3
 8005386:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800538a:	00d4      	lsls	r4, r2, #3
 800538c:	4622      	mov	r2, r4
 800538e:	462b      	mov	r3, r5
 8005390:	1814      	adds	r4, r2, r0
 8005392:	653c      	str	r4, [r7, #80]	; 0x50
 8005394:	414b      	adcs	r3, r1
 8005396:	657b      	str	r3, [r7, #84]	; 0x54
 8005398:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	461a      	mov	r2, r3
 800539e:	f04f 0300 	mov.w	r3, #0
 80053a2:	1891      	adds	r1, r2, r2
 80053a4:	61b9      	str	r1, [r7, #24]
 80053a6:	415b      	adcs	r3, r3
 80053a8:	61fb      	str	r3, [r7, #28]
 80053aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053ae:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80053b2:	f7fa ff11 	bl	80001d8 <__aeabi_uldivmod>
 80053b6:	4602      	mov	r2, r0
 80053b8:	460b      	mov	r3, r1
 80053ba:	4b6c      	ldr	r3, [pc, #432]	; (800556c <UART_SetConfig+0x38c>)
 80053bc:	fba3 1302 	umull	r1, r3, r3, r2
 80053c0:	095b      	lsrs	r3, r3, #5
 80053c2:	2164      	movs	r1, #100	; 0x64
 80053c4:	fb01 f303 	mul.w	r3, r1, r3
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	00db      	lsls	r3, r3, #3
 80053cc:	3332      	adds	r3, #50	; 0x32
 80053ce:	4a67      	ldr	r2, [pc, #412]	; (800556c <UART_SetConfig+0x38c>)
 80053d0:	fba2 2303 	umull	r2, r3, r2, r3
 80053d4:	095b      	lsrs	r3, r3, #5
 80053d6:	f003 0207 	and.w	r2, r3, #7
 80053da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4432      	add	r2, r6
 80053e0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80053e2:	e0b9      	b.n	8005558 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053e6:	461c      	mov	r4, r3
 80053e8:	f04f 0500 	mov.w	r5, #0
 80053ec:	4622      	mov	r2, r4
 80053ee:	462b      	mov	r3, r5
 80053f0:	1891      	adds	r1, r2, r2
 80053f2:	6139      	str	r1, [r7, #16]
 80053f4:	415b      	adcs	r3, r3
 80053f6:	617b      	str	r3, [r7, #20]
 80053f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80053fc:	1912      	adds	r2, r2, r4
 80053fe:	eb45 0303 	adc.w	r3, r5, r3
 8005402:	f04f 0000 	mov.w	r0, #0
 8005406:	f04f 0100 	mov.w	r1, #0
 800540a:	00d9      	lsls	r1, r3, #3
 800540c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005410:	00d0      	lsls	r0, r2, #3
 8005412:	4602      	mov	r2, r0
 8005414:	460b      	mov	r3, r1
 8005416:	eb12 0804 	adds.w	r8, r2, r4
 800541a:	eb43 0905 	adc.w	r9, r3, r5
 800541e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	4618      	mov	r0, r3
 8005424:	f04f 0100 	mov.w	r1, #0
 8005428:	f04f 0200 	mov.w	r2, #0
 800542c:	f04f 0300 	mov.w	r3, #0
 8005430:	008b      	lsls	r3, r1, #2
 8005432:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005436:	0082      	lsls	r2, r0, #2
 8005438:	4640      	mov	r0, r8
 800543a:	4649      	mov	r1, r9
 800543c:	f7fa fecc 	bl	80001d8 <__aeabi_uldivmod>
 8005440:	4602      	mov	r2, r0
 8005442:	460b      	mov	r3, r1
 8005444:	4b49      	ldr	r3, [pc, #292]	; (800556c <UART_SetConfig+0x38c>)
 8005446:	fba3 2302 	umull	r2, r3, r3, r2
 800544a:	095b      	lsrs	r3, r3, #5
 800544c:	011e      	lsls	r6, r3, #4
 800544e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005450:	4618      	mov	r0, r3
 8005452:	f04f 0100 	mov.w	r1, #0
 8005456:	4602      	mov	r2, r0
 8005458:	460b      	mov	r3, r1
 800545a:	1894      	adds	r4, r2, r2
 800545c:	60bc      	str	r4, [r7, #8]
 800545e:	415b      	adcs	r3, r3
 8005460:	60fb      	str	r3, [r7, #12]
 8005462:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005466:	1812      	adds	r2, r2, r0
 8005468:	eb41 0303 	adc.w	r3, r1, r3
 800546c:	f04f 0400 	mov.w	r4, #0
 8005470:	f04f 0500 	mov.w	r5, #0
 8005474:	00dd      	lsls	r5, r3, #3
 8005476:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800547a:	00d4      	lsls	r4, r2, #3
 800547c:	4622      	mov	r2, r4
 800547e:	462b      	mov	r3, r5
 8005480:	1814      	adds	r4, r2, r0
 8005482:	64bc      	str	r4, [r7, #72]	; 0x48
 8005484:	414b      	adcs	r3, r1
 8005486:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	4618      	mov	r0, r3
 800548e:	f04f 0100 	mov.w	r1, #0
 8005492:	f04f 0200 	mov.w	r2, #0
 8005496:	f04f 0300 	mov.w	r3, #0
 800549a:	008b      	lsls	r3, r1, #2
 800549c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80054a0:	0082      	lsls	r2, r0, #2
 80054a2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80054a6:	f7fa fe97 	bl	80001d8 <__aeabi_uldivmod>
 80054aa:	4602      	mov	r2, r0
 80054ac:	460b      	mov	r3, r1
 80054ae:	4b2f      	ldr	r3, [pc, #188]	; (800556c <UART_SetConfig+0x38c>)
 80054b0:	fba3 1302 	umull	r1, r3, r3, r2
 80054b4:	095b      	lsrs	r3, r3, #5
 80054b6:	2164      	movs	r1, #100	; 0x64
 80054b8:	fb01 f303 	mul.w	r3, r1, r3
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	011b      	lsls	r3, r3, #4
 80054c0:	3332      	adds	r3, #50	; 0x32
 80054c2:	4a2a      	ldr	r2, [pc, #168]	; (800556c <UART_SetConfig+0x38c>)
 80054c4:	fba2 2303 	umull	r2, r3, r2, r3
 80054c8:	095b      	lsrs	r3, r3, #5
 80054ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054ce:	441e      	add	r6, r3
 80054d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054d2:	4618      	mov	r0, r3
 80054d4:	f04f 0100 	mov.w	r1, #0
 80054d8:	4602      	mov	r2, r0
 80054da:	460b      	mov	r3, r1
 80054dc:	1894      	adds	r4, r2, r2
 80054de:	603c      	str	r4, [r7, #0]
 80054e0:	415b      	adcs	r3, r3
 80054e2:	607b      	str	r3, [r7, #4]
 80054e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054e8:	1812      	adds	r2, r2, r0
 80054ea:	eb41 0303 	adc.w	r3, r1, r3
 80054ee:	f04f 0400 	mov.w	r4, #0
 80054f2:	f04f 0500 	mov.w	r5, #0
 80054f6:	00dd      	lsls	r5, r3, #3
 80054f8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80054fc:	00d4      	lsls	r4, r2, #3
 80054fe:	4622      	mov	r2, r4
 8005500:	462b      	mov	r3, r5
 8005502:	eb12 0a00 	adds.w	sl, r2, r0
 8005506:	eb43 0b01 	adc.w	fp, r3, r1
 800550a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	4618      	mov	r0, r3
 8005510:	f04f 0100 	mov.w	r1, #0
 8005514:	f04f 0200 	mov.w	r2, #0
 8005518:	f04f 0300 	mov.w	r3, #0
 800551c:	008b      	lsls	r3, r1, #2
 800551e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005522:	0082      	lsls	r2, r0, #2
 8005524:	4650      	mov	r0, sl
 8005526:	4659      	mov	r1, fp
 8005528:	f7fa fe56 	bl	80001d8 <__aeabi_uldivmod>
 800552c:	4602      	mov	r2, r0
 800552e:	460b      	mov	r3, r1
 8005530:	4b0e      	ldr	r3, [pc, #56]	; (800556c <UART_SetConfig+0x38c>)
 8005532:	fba3 1302 	umull	r1, r3, r3, r2
 8005536:	095b      	lsrs	r3, r3, #5
 8005538:	2164      	movs	r1, #100	; 0x64
 800553a:	fb01 f303 	mul.w	r3, r1, r3
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	011b      	lsls	r3, r3, #4
 8005542:	3332      	adds	r3, #50	; 0x32
 8005544:	4a09      	ldr	r2, [pc, #36]	; (800556c <UART_SetConfig+0x38c>)
 8005546:	fba2 2303 	umull	r2, r3, r2, r3
 800554a:	095b      	lsrs	r3, r3, #5
 800554c:	f003 020f 	and.w	r2, r3, #15
 8005550:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4432      	add	r2, r6
 8005556:	609a      	str	r2, [r3, #8]
}
 8005558:	bf00      	nop
 800555a:	377c      	adds	r7, #124	; 0x7c
 800555c:	46bd      	mov	sp, r7
 800555e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005562:	bf00      	nop
 8005564:	40011000 	.word	0x40011000
 8005568:	40011400 	.word	0x40011400
 800556c:	51eb851f 	.word	0x51eb851f

08005570 <interface_tx_frame>:
 8005570:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005574:	b085      	sub	sp, #20
 8005576:	4605      	mov	r5, r0
 8005578:	461c      	mov	r4, r3
 800557a:	6883      	ldr	r3, [r0, #8]
 800557c:	695e      	ldr	r6, [r3, #20]
 800557e:	b1e2      	cbz	r2, 80055ba <interface_tx_frame+0x4a>
 8005580:	9102      	str	r1, [sp, #8]
 8005582:	fa1f f882 	uxth.w	r8, r2
 8005586:	f8ad 800c 	strh.w	r8, [sp, #12]
 800558a:	f04f 0900 	mov.w	r9, #0
 800558e:	f8ad 900e 	strh.w	r9, [sp, #14]
 8005592:	6b77      	ldr	r7, [r6, #52]	; 0x34
 8005594:	ab02      	add	r3, sp, #8
 8005596:	464a      	mov	r2, r9
 8005598:	2120      	movs	r1, #32
 800559a:	47b8      	blx	r7
 800559c:	f8ad 8000 	strh.w	r8, [sp]
 80055a0:	f8ad 9002 	strh.w	r9, [sp, #2]
 80055a4:	68e3      	ldr	r3, [r4, #12]
 80055a6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80055aa:	f88d 3004 	strb.w	r3, [sp, #4]
 80055ae:	6b77      	ldr	r7, [r6, #52]	; 0x34
 80055b0:	466b      	mov	r3, sp
 80055b2:	464a      	mov	r2, r9
 80055b4:	2137      	movs	r1, #55	; 0x37
 80055b6:	4628      	mov	r0, r5
 80055b8:	47b8      	blx	r7
 80055ba:	68e3      	ldr	r3, [r4, #12]
 80055bc:	f013 0f1d 	tst.w	r3, #29
 80055c0:	d005      	beq.n	80055ce <interface_tx_frame+0x5e>
 80055c2:	6b77      	ldr	r7, [r6, #52]	; 0x34
 80055c4:	4623      	mov	r3, r4
 80055c6:	2200      	movs	r2, #0
 80055c8:	2105      	movs	r1, #5
 80055ca:	4628      	mov	r0, r5
 80055cc:	47b8      	blx	r7
 80055ce:	6863      	ldr	r3, [r4, #4]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	db0c      	blt.n	80055ee <interface_tx_frame+0x7e>
 80055d4:	6b77      	ldr	r7, [r6, #52]	; 0x34
 80055d6:	1d23      	adds	r3, r4, #4
 80055d8:	2200      	movs	r2, #0
 80055da:	2110      	movs	r1, #16
 80055dc:	4628      	mov	r0, r5
 80055de:	47b8      	blx	r7
 80055e0:	6b77      	ldr	r7, [r6, #52]	; 0x34
 80055e2:	f104 0308 	add.w	r3, r4, #8
 80055e6:	2200      	movs	r2, #0
 80055e8:	2151      	movs	r1, #81	; 0x51
 80055ea:	4628      	mov	r0, r5
 80055ec:	47b8      	blx	r7
 80055ee:	6b76      	ldr	r6, [r6, #52]	; 0x34
 80055f0:	f104 030c 	add.w	r3, r4, #12
 80055f4:	2200      	movs	r2, #0
 80055f6:	2104      	movs	r1, #4
 80055f8:	4628      	mov	r0, r5
 80055fa:	47b0      	blx	r6
 80055fc:	b005      	add	sp, #20
 80055fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08005602 <interface_get_timestamp>:
 8005602:	b530      	push	{r4, r5, lr}
 8005604:	b083      	sub	sp, #12
 8005606:	ab02      	add	r3, sp, #8
 8005608:	2400      	movs	r4, #0
 800560a:	2500      	movs	r5, #0
 800560c:	e963 4502 	strd	r4, r5, [r3, #-8]!
 8005610:	6882      	ldr	r2, [r0, #8]
 8005612:	6952      	ldr	r2, [r2, #20]
 8005614:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8005616:	2200      	movs	r2, #0
 8005618:	215f      	movs	r1, #95	; 0x5f
 800561a:	47a0      	blx	r4
 800561c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005620:	b003      	add	sp, #12
 8005622:	bd30      	pop	{r4, r5, pc}

08005624 <interface_rx_disable>:
 8005624:	b510      	push	{r4, lr}
 8005626:	6883      	ldr	r3, [r0, #8]
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800562c:	2300      	movs	r3, #0
 800562e:	461a      	mov	r2, r3
 8005630:	2103      	movs	r1, #3
 8005632:	47a0      	blx	r4
 8005634:	bd10      	pop	{r4, pc}
	...

08005638 <interface_rx_enable>:
 8005638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800563c:	b084      	sub	sp, #16
 800563e:	4604      	mov	r4, r0
 8005640:	6883      	ldr	r3, [r0, #8]
 8005642:	695d      	ldr	r5, [r3, #20]
 8005644:	f8d1 a008 	ldr.w	sl, [r1, #8]
 8005648:	680b      	ldr	r3, [r1, #0]
 800564a:	9303      	str	r3, [sp, #12]
 800564c:	684a      	ldr	r2, [r1, #4]
 800564e:	ab04      	add	r3, sp, #16
 8005650:	f843 2d08 	str.w	r2, [r3, #-8]!
 8005654:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 8005656:	2200      	movs	r2, #0
 8005658:	214f      	movs	r1, #79	; 0x4f
 800565a:	47b8      	blx	r7
 800565c:	4607      	mov	r7, r0
 800565e:	b118      	cbz	r0, 8005668 <interface_rx_enable+0x30>
 8005660:	4638      	mov	r0, r7
 8005662:	b004      	add	sp, #16
 8005664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005668:	68a3      	ldr	r3, [r4, #8]
 800566a:	695a      	ldr	r2, [r3, #20]
 800566c:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 8005670:	2b00      	cmp	r3, #0
 8005672:	db3c      	blt.n	80056ee <interface_rx_enable+0xb6>
 8005674:	6b57      	ldr	r7, [r2, #52]	; 0x34
 8005676:	ab01      	add	r3, sp, #4
 8005678:	2200      	movs	r2, #0
 800567a:	2157      	movs	r1, #87	; 0x57
 800567c:	4620      	mov	r0, r4
 800567e:	47b8      	blx	r7
 8005680:	bba8      	cbnz	r0, 80056ee <interface_rx_enable+0xb6>
 8005682:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8005686:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800568a:	041b      	lsls	r3, r3, #16
 800568c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005690:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8005694:	4313      	orrs	r3, r2
 8005696:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800569a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800569e:	f1ba 0f00 	cmp.w	sl, #0
 80056a2:	d131      	bne.n	8005708 <interface_rx_enable+0xd0>
 80056a4:	f503 3378 	add.w	r3, r3, #253952	; 0x3e000
 80056a8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80056ac:	9303      	str	r3, [sp, #12]
 80056ae:	f04f 0a01 	mov.w	sl, #1
 80056b2:	68a3      	ldr	r3, [r4, #8]
 80056b4:	695f      	ldr	r7, [r3, #20]
 80056b6:	f10d 0302 	add.w	r3, sp, #2
 80056ba:	2200      	movs	r2, #0
 80056bc:	217b      	movs	r1, #123	; 0x7b
 80056be:	4620      	mov	r0, r4
 80056c0:	6b7e      	ldr	r6, [r7, #52]	; 0x34
 80056c2:	47b0      	blx	r6
 80056c4:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d04e      	beq.n	800576a <interface_rx_enable+0x132>
 80056cc:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 80056d0:	2201      	movs	r2, #1
 80056d2:	fa02 f303 	lsl.w	r3, r2, r3
 80056d6:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80056da:	ea22 0203 	bic.w	r2, r2, r3
 80056de:	ab04      	add	r3, sp, #16
 80056e0:	f823 2d0e 	strh.w	r2, [r3, #-14]!
 80056e4:	6b7f      	ldr	r7, [r7, #52]	; 0x34
 80056e6:	2200      	movs	r2, #0
 80056e8:	216b      	movs	r1, #107	; 0x6b
 80056ea:	4620      	mov	r0, r4
 80056ec:	47b8      	blx	r7
 80056ee:	f1ba 0f00 	cmp.w	sl, #0
 80056f2:	d14a      	bne.n	800578a <interface_rx_enable+0x152>
 80056f4:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 80056f6:	2300      	movs	r3, #0
 80056f8:	461a      	mov	r2, r3
 80056fa:	211f      	movs	r1, #31
 80056fc:	4620      	mov	r0, r4
 80056fe:	47a8      	blx	r5
 8005700:	4607      	mov	r7, r0
 8005702:	2800      	cmp	r0, #0
 8005704:	d150      	bne.n	80057a8 <interface_rx_enable+0x170>
 8005706:	e7ab      	b.n	8005660 <interface_rx_enable+0x28>
 8005708:	9a03      	ldr	r2, [sp, #12]
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	4698      	mov	r8, r3
 800570e:	ea4f 79e3 	mov.w	r9, r3, asr #31
 8005712:	ea4f 1249 	mov.w	r2, r9, lsl #5
 8005716:	0158      	lsls	r0, r3, #5
 8005718:	ea42 61d3 	orr.w	r1, r2, r3, lsr #27
 800571c:	1ac0      	subs	r0, r0, r3
 800571e:	eb61 0109 	sbc.w	r1, r1, r9
 8005722:	024b      	lsls	r3, r1, #9
 8005724:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8005728:	0242      	lsls	r2, r0, #9
 800572a:	eb12 0008 	adds.w	r0, r2, r8
 800572e:	eb43 0109 	adc.w	r1, r3, r9
 8005732:	018b      	lsls	r3, r1, #6
 8005734:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005738:	0182      	lsls	r2, r0, #6
 800573a:	1a12      	subs	r2, r2, r0
 800573c:	eb63 0301 	sbc.w	r3, r3, r1
 8005740:	4616      	mov	r6, r2
 8005742:	461f      	mov	r7, r3
 8005744:	4a31      	ldr	r2, [pc, #196]	; (800580c <interface_rx_enable+0x1d4>)
 8005746:	2300      	movs	r3, #0
 8005748:	eb16 0008 	adds.w	r0, r6, r8
 800574c:	eb47 0109 	adc.w	r1, r7, r9
 8005750:	f7fa fd42 	bl	80001d8 <__aeabi_uldivmod>
 8005754:	f5b0 7f7f 	cmp.w	r0, #1020	; 0x3fc
 8005758:	ddab      	ble.n	80056b2 <interface_rx_enable+0x7a>
 800575a:	68a3      	ldr	r3, [r4, #8]
 800575c:	695f      	ldr	r7, [r3, #20]
 800575e:	f5b0 707f 	subs.w	r0, r0, #1020	; 0x3fc
 8005762:	d0a8      	beq.n	80056b6 <interface_rx_enable+0x7e>
 8005764:	f7fa fedd 	bl	8000522 <deca_usleep>
 8005768:	e7a5      	b.n	80056b6 <interface_rx_enable+0x7e>
 800576a:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 800576e:	2201      	movs	r2, #1
 8005770:	409a      	lsls	r2, r3
 8005772:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8005776:	431a      	orrs	r2, r3
 8005778:	ab04      	add	r3, sp, #16
 800577a:	f823 2d0e 	strh.w	r2, [r3, #-14]!
 800577e:	6b7f      	ldr	r7, [r7, #52]	; 0x34
 8005780:	2200      	movs	r2, #0
 8005782:	216b      	movs	r1, #107	; 0x6b
 8005784:	4620      	mov	r0, r4
 8005786:	47b8      	blx	r7
 8005788:	e7b1      	b.n	80056ee <interface_rx_enable+0xb6>
 800578a:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 800578c:	ab03      	add	r3, sp, #12
 800578e:	2200      	movs	r2, #0
 8005790:	2105      	movs	r1, #5
 8005792:	4620      	mov	r0, r4
 8005794:	47b0      	blx	r6
 8005796:	4607      	mov	r7, r0
 8005798:	b930      	cbnz	r0, 80057a8 <interface_rx_enable+0x170>
 800579a:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 800579c:	2300      	movs	r3, #0
 800579e:	2201      	movs	r2, #1
 80057a0:	211f      	movs	r1, #31
 80057a2:	4620      	mov	r0, r4
 80057a4:	47a8      	blx	r5
 80057a6:	4607      	mov	r7, r0
 80057a8:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f6ff af57 	blt.w	8005660 <interface_rx_enable+0x28>
 80057b2:	68a3      	ldr	r3, [r4, #8]
 80057b4:	695d      	ldr	r5, [r3, #20]
 80057b6:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 80057b8:	ab01      	add	r3, sp, #4
 80057ba:	2200      	movs	r2, #0
 80057bc:	217b      	movs	r1, #123	; 0x7b
 80057be:	4620      	mov	r0, r4
 80057c0:	47b0      	blx	r6
 80057c2:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 80057c6:	b18b      	cbz	r3, 80057ec <interface_rx_enable+0x1b4>
 80057c8:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 80057cc:	2201      	movs	r2, #1
 80057ce:	fa02 f303 	lsl.w	r3, r2, r3
 80057d2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80057d6:	ea22 0203 	bic.w	r2, r2, r3
 80057da:	ab04      	add	r3, sp, #16
 80057dc:	f823 2d0c 	strh.w	r2, [r3, #-12]!
 80057e0:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 80057e2:	2200      	movs	r2, #0
 80057e4:	216b      	movs	r1, #107	; 0x6b
 80057e6:	4620      	mov	r0, r4
 80057e8:	47a8      	blx	r5
 80057ea:	e739      	b.n	8005660 <interface_rx_enable+0x28>
 80057ec:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 80057f0:	2201      	movs	r2, #1
 80057f2:	409a      	lsls	r2, r3
 80057f4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80057f8:	431a      	orrs	r2, r3
 80057fa:	ab04      	add	r3, sp, #16
 80057fc:	f823 2d0c 	strh.w	r2, [r3, #-12]!
 8005800:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 8005802:	2200      	movs	r2, #0
 8005804:	216b      	movs	r1, #107	; 0x6b
 8005806:	4620      	mov	r0, r4
 8005808:	47a8      	blx	r5
 800580a:	e729      	b.n	8005660 <interface_rx_enable+0x28>
 800580c:	0ee09800 	.word	0x0ee09800

08005810 <interface_read_rx_frame>:
 8005810:	b510      	push	{r4, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	9100      	str	r1, [sp, #0]
 8005816:	f8ad 2004 	strh.w	r2, [sp, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	f8ad 2006 	strh.w	r2, [sp, #6]
 8005820:	6883      	ldr	r3, [r0, #8]
 8005822:	695b      	ldr	r3, [r3, #20]
 8005824:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8005826:	466b      	mov	r3, sp
 8005828:	2121      	movs	r1, #33	; 0x21
 800582a:	47a0      	blx	r4
 800582c:	b002      	add	sp, #8
 800582e:	bd10      	pop	{r4, pc}

08005830 <dwt_probe>:
 8005830:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005832:	b083      	sub	sp, #12
 8005834:	6803      	ldr	r3, [r0, #0]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d037      	beq.n	80058aa <dwt_probe+0x7a>
 800583a:	4a1f      	ldr	r2, [pc, #124]	; (80058b8 <dwt_probe+0x88>)
 800583c:	6013      	str	r3, [r2, #0]
 800583e:	4b1e      	ldr	r3, [pc, #120]	; (80058b8 <dwt_probe+0x88>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	6842      	ldr	r2, [r0, #4]
 8005844:	601a      	str	r2, [r3, #0]
 8005846:	6882      	ldr	r2, [r0, #8]
 8005848:	605a      	str	r2, [r3, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	f88d 2003 	strb.w	r2, [sp, #3]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681c      	ldr	r4, [r3, #0]
 8005854:	ab01      	add	r3, sp, #4
 8005856:	2204      	movs	r2, #4
 8005858:	f10d 0103 	add.w	r1, sp, #3
 800585c:	2001      	movs	r0, #1
 800585e:	47a0      	blx	r4
 8005860:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005864:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8005868:	0409      	lsls	r1, r1, #16
 800586a:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
 800586e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005872:	4319      	orrs	r1, r3
 8005874:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8005878:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 800587c:	4a0f      	ldr	r2, [pc, #60]	; (80058bc <dwt_probe+0x8c>)
 800587e:	4b10      	ldr	r3, [pc, #64]	; (80058c0 <dwt_probe+0x90>)
 8005880:	429a      	cmp	r2, r3
 8005882:	d216      	bcs.n	80058b2 <dwt_probe+0x82>
 8005884:	4b0c      	ldr	r3, [pc, #48]	; (80058b8 <dwt_probe+0x88>)
 8005886:	681f      	ldr	r7, [r3, #0]
 8005888:	4613      	mov	r3, r2
 800588a:	f04f 30ff 	mov.w	r0, #4294967295
 800588e:	2600      	movs	r6, #0
 8005890:	4d0b      	ldr	r5, [pc, #44]	; (80058c0 <dwt_probe+0x90>)
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	404a      	eors	r2, r1
 8005896:	685c      	ldr	r4, [r3, #4]
 8005898:	4222      	tst	r2, r4
 800589a:	bf04      	itt	eq
 800589c:	60bb      	streq	r3, [r7, #8]
 800589e:	4630      	moveq	r0, r6
 80058a0:	331c      	adds	r3, #28
 80058a2:	42ab      	cmp	r3, r5
 80058a4:	d3f5      	bcc.n	8005892 <dwt_probe+0x62>
 80058a6:	b003      	add	sp, #12
 80058a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058aa:	4b03      	ldr	r3, [pc, #12]	; (80058b8 <dwt_probe+0x88>)
 80058ac:	4a05      	ldr	r2, [pc, #20]	; (80058c4 <dwt_probe+0x94>)
 80058ae:	601a      	str	r2, [r3, #0]
 80058b0:	e7c5      	b.n	800583e <dwt_probe+0xe>
 80058b2:	f04f 30ff 	mov.w	r0, #4294967295
 80058b6:	e7f6      	b.n	80058a6 <dwt_probe+0x76>
 80058b8:	200000c0 	.word	0x200000c0
 80058bc:	08012e74 	.word	0x08012e74
 80058c0:	08012ec8 	.word	0x08012ec8
 80058c4:	200000c4 	.word	0x200000c4

080058c8 <dwt_readdevid>:
 80058c8:	b510      	push	{r4, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	2100      	movs	r1, #0
 80058ce:	ab02      	add	r3, sp, #8
 80058d0:	f843 1d04 	str.w	r1, [r3, #-4]!
 80058d4:	4a04      	ldr	r2, [pc, #16]	; (80058e8 <dwt_readdevid+0x20>)
 80058d6:	6810      	ldr	r0, [r2, #0]
 80058d8:	6882      	ldr	r2, [r0, #8]
 80058da:	6912      	ldr	r2, [r2, #16]
 80058dc:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 80058de:	460a      	mov	r2, r1
 80058e0:	47a0      	blx	r4
 80058e2:	9801      	ldr	r0, [sp, #4]
 80058e4:	b002      	add	sp, #8
 80058e6:	bd10      	pop	{r4, pc}
 80058e8:	200000c0 	.word	0x200000c0

080058ec <dwt_initialise>:
 80058ec:	b508      	push	{r3, lr}
 80058ee:	4b04      	ldr	r3, [pc, #16]	; (8005900 <dwt_initialise+0x14>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	689a      	ldr	r2, [r3, #8]
 80058f4:	6912      	ldr	r2, [r2, #16]
 80058f6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80058f8:	4601      	mov	r1, r0
 80058fa:	4618      	mov	r0, r3
 80058fc:	4790      	blx	r2
 80058fe:	bd08      	pop	{r3, pc}
 8005900:	200000c0 	.word	0x200000c0

08005904 <dwt_configure>:
 8005904:	b508      	push	{r3, lr}
 8005906:	4b04      	ldr	r3, [pc, #16]	; (8005918 <dwt_configure+0x14>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	689a      	ldr	r2, [r3, #8]
 800590c:	6912      	ldr	r2, [r2, #16]
 800590e:	6812      	ldr	r2, [r2, #0]
 8005910:	4601      	mov	r1, r0
 8005912:	4618      	mov	r0, r3
 8005914:	4790      	blx	r2
 8005916:	bd08      	pop	{r3, pc}
 8005918:	200000c0 	.word	0x200000c0

0800591c <dwt_configuretxrf>:
 800591c:	b508      	push	{r3, lr}
 800591e:	4b04      	ldr	r3, [pc, #16]	; (8005930 <dwt_configuretxrf+0x14>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	689a      	ldr	r2, [r3, #8]
 8005924:	6912      	ldr	r2, [r2, #16]
 8005926:	6992      	ldr	r2, [r2, #24]
 8005928:	4601      	mov	r1, r0
 800592a:	4618      	mov	r0, r3
 800592c:	4790      	blx	r2
 800592e:	bd08      	pop	{r3, pc}
 8005930:	200000c0 	.word	0x200000c0

08005934 <dwt_writetxdata>:
 8005934:	b538      	push	{r3, r4, r5, lr}
 8005936:	4b05      	ldr	r3, [pc, #20]	; (800594c <dwt_writetxdata+0x18>)
 8005938:	681c      	ldr	r4, [r3, #0]
 800593a:	68a3      	ldr	r3, [r4, #8]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	685d      	ldr	r5, [r3, #4]
 8005940:	4613      	mov	r3, r2
 8005942:	460a      	mov	r2, r1
 8005944:	4601      	mov	r1, r0
 8005946:	4620      	mov	r0, r4
 8005948:	47a8      	blx	r5
 800594a:	bd38      	pop	{r3, r4, r5, pc}
 800594c:	200000c0 	.word	0x200000c0

08005950 <dwt_writetxfctrl>:
 8005950:	b538      	push	{r3, r4, r5, lr}
 8005952:	4b05      	ldr	r3, [pc, #20]	; (8005968 <dwt_writetxfctrl+0x18>)
 8005954:	681c      	ldr	r4, [r3, #0]
 8005956:	68a3      	ldr	r3, [r4, #8]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	689d      	ldr	r5, [r3, #8]
 800595c:	4613      	mov	r3, r2
 800595e:	460a      	mov	r2, r1
 8005960:	4601      	mov	r1, r0
 8005962:	4620      	mov	r0, r4
 8005964:	47a8      	blx	r5
 8005966:	bd38      	pop	{r3, r4, r5, pc}
 8005968:	200000c0 	.word	0x200000c0

0800596c <dwt_starttx>:
 800596c:	b510      	push	{r4, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	ab02      	add	r3, sp, #8
 8005972:	f803 0d01 	strb.w	r0, [r3, #-1]!
 8005976:	4a05      	ldr	r2, [pc, #20]	; (800598c <dwt_starttx+0x20>)
 8005978:	6810      	ldr	r0, [r2, #0]
 800597a:	6882      	ldr	r2, [r0, #8]
 800597c:	6912      	ldr	r2, [r2, #16]
 800597e:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8005980:	2200      	movs	r2, #0
 8005982:	2104      	movs	r1, #4
 8005984:	47a0      	blx	r4
 8005986:	b002      	add	sp, #8
 8005988:	bd10      	pop	{r4, pc}
 800598a:	bf00      	nop
 800598c:	200000c0 	.word	0x200000c0

08005990 <dwt_forcetrxoff>:
 8005990:	b510      	push	{r4, lr}
 8005992:	4b05      	ldr	r3, [pc, #20]	; (80059a8 <dwt_forcetrxoff+0x18>)
 8005994:	6818      	ldr	r0, [r3, #0]
 8005996:	6883      	ldr	r3, [r0, #8]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800599c:	2300      	movs	r3, #0
 800599e:	461a      	mov	r2, r3
 80059a0:	2103      	movs	r1, #3
 80059a2:	47a0      	blx	r4
 80059a4:	bd10      	pop	{r4, pc}
 80059a6:	bf00      	nop
 80059a8:	200000c0 	.word	0x200000c0

080059ac <dwt_rxenable>:
 80059ac:	b508      	push	{r3, lr}
 80059ae:	4b04      	ldr	r3, [pc, #16]	; (80059c0 <dwt_rxenable+0x14>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	689a      	ldr	r2, [r3, #8]
 80059b4:	6912      	ldr	r2, [r2, #16]
 80059b6:	6a12      	ldr	r2, [r2, #32]
 80059b8:	4601      	mov	r1, r0
 80059ba:	4618      	mov	r0, r3
 80059bc:	4790      	blx	r2
 80059be:	bd08      	pop	{r3, pc}
 80059c0:	200000c0 	.word	0x200000c0

080059c4 <dwt_checkidlerc>:
 80059c4:	b510      	push	{r4, lr}
 80059c6:	b082      	sub	sp, #8
 80059c8:	2200      	movs	r2, #0
 80059ca:	ab02      	add	r3, sp, #8
 80059cc:	f803 2d01 	strb.w	r2, [r3, #-1]!
 80059d0:	4905      	ldr	r1, [pc, #20]	; (80059e8 <dwt_checkidlerc+0x24>)
 80059d2:	6808      	ldr	r0, [r1, #0]
 80059d4:	6881      	ldr	r1, [r0, #8]
 80059d6:	6909      	ldr	r1, [r1, #16]
 80059d8:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 80059da:	2158      	movs	r1, #88	; 0x58
 80059dc:	47a0      	blx	r4
 80059de:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80059e2:	b002      	add	sp, #8
 80059e4:	bd10      	pop	{r4, pc}
 80059e6:	bf00      	nop
 80059e8:	200000c0 	.word	0x200000c0

080059ec <dwt_generatecrc8>:
 80059ec:	2900      	cmp	r1, #0
 80059ee:	dd0d      	ble.n	8005a0c <dwt_generatecrc8+0x20>
 80059f0:	b410      	push	{r4}
 80059f2:	1e43      	subs	r3, r0, #1
 80059f4:	4419      	add	r1, r3
 80059f6:	4610      	mov	r0, r2
 80059f8:	4c05      	ldr	r4, [pc, #20]	; (8005a10 <dwt_generatecrc8+0x24>)
 80059fa:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80059fe:	4050      	eors	r0, r2
 8005a00:	5c20      	ldrb	r0, [r4, r0]
 8005a02:	428b      	cmp	r3, r1
 8005a04:	d1f9      	bne.n	80059fa <dwt_generatecrc8+0xe>
 8005a06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a0a:	4770      	bx	lr
 8005a0c:	4610      	mov	r0, r2
 8005a0e:	4770      	bx	lr
 8005a10:	08012f48 	.word	0x08012f48

08005a14 <dwt_setleds>:
 8005a14:	b510      	push	{r4, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	ab02      	add	r3, sp, #8
 8005a1a:	f803 0d01 	strb.w	r0, [r3, #-1]!
 8005a1e:	4a05      	ldr	r2, [pc, #20]	; (8005a34 <dwt_setleds+0x20>)
 8005a20:	6810      	ldr	r0, [r2, #0]
 8005a22:	6882      	ldr	r2, [r0, #8]
 8005a24:	6912      	ldr	r2, [r2, #16]
 8005a26:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8005a28:	2200      	movs	r2, #0
 8005a2a:	2155      	movs	r1, #85	; 0x55
 8005a2c:	47a0      	blx	r4
 8005a2e:	b002      	add	sp, #8
 8005a30:	bd10      	pop	{r4, pc}
 8005a32:	bf00      	nop
 8005a34:	200000c0 	.word	0x200000c0

08005a38 <dwt_writesysstatuslo>:
 8005a38:	b510      	push	{r4, lr}
 8005a3a:	b082      	sub	sp, #8
 8005a3c:	ab02      	add	r3, sp, #8
 8005a3e:	f843 0d04 	str.w	r0, [r3, #-4]!
 8005a42:	4a05      	ldr	r2, [pc, #20]	; (8005a58 <dwt_writesysstatuslo+0x20>)
 8005a44:	6810      	ldr	r0, [r2, #0]
 8005a46:	6882      	ldr	r2, [r0, #8]
 8005a48:	6912      	ldr	r2, [r2, #16]
 8005a4a:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	2174      	movs	r1, #116	; 0x74
 8005a50:	47a0      	blx	r4
 8005a52:	b002      	add	sp, #8
 8005a54:	bd10      	pop	{r4, pc}
 8005a56:	bf00      	nop
 8005a58:	200000c0 	.word	0x200000c0

08005a5c <dwt_readsysstatuslo>:
 8005a5c:	b510      	push	{r4, lr}
 8005a5e:	b082      	sub	sp, #8
 8005a60:	2200      	movs	r2, #0
 8005a62:	ab02      	add	r3, sp, #8
 8005a64:	f843 2d04 	str.w	r2, [r3, #-4]!
 8005a68:	4904      	ldr	r1, [pc, #16]	; (8005a7c <dwt_readsysstatuslo+0x20>)
 8005a6a:	6808      	ldr	r0, [r1, #0]
 8005a6c:	6881      	ldr	r1, [r0, #8]
 8005a6e:	6909      	ldr	r1, [r1, #16]
 8005a70:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8005a72:	2176      	movs	r1, #118	; 0x76
 8005a74:	47a0      	blx	r4
 8005a76:	9801      	ldr	r0, [sp, #4]
 8005a78:	b002      	add	sp, #8
 8005a7a:	bd10      	pop	{r4, pc}
 8005a7c:	200000c0 	.word	0x200000c0

08005a80 <dwt_readsysstatushi>:
 8005a80:	b510      	push	{r4, lr}
 8005a82:	b082      	sub	sp, #8
 8005a84:	2200      	movs	r2, #0
 8005a86:	ab02      	add	r3, sp, #8
 8005a88:	f843 2d04 	str.w	r2, [r3, #-4]!
 8005a8c:	4904      	ldr	r1, [pc, #16]	; (8005aa0 <dwt_readsysstatushi+0x20>)
 8005a8e:	6808      	ldr	r0, [r1, #0]
 8005a90:	6881      	ldr	r1, [r0, #8]
 8005a92:	6909      	ldr	r1, [r1, #16]
 8005a94:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8005a96:	2177      	movs	r1, #119	; 0x77
 8005a98:	47a0      	blx	r4
 8005a9a:	9801      	ldr	r0, [sp, #4]
 8005a9c:	b002      	add	sp, #8
 8005a9e:	bd10      	pop	{r4, pc}
 8005aa0:	200000c0 	.word	0x200000c0

08005aa4 <dwt_dbg_fn>:
 8005aa4:	2998      	cmp	r1, #152	; 0x98
 8005aa6:	4802      	ldr	r0, [pc, #8]	; (8005ab0 <dwt_dbg_fn+0xc>)
 8005aa8:	bf18      	it	ne
 8005aaa:	2000      	movne	r0, #0
 8005aac:	4770      	bx	lr
 8005aae:	bf00      	nop
 8005ab0:	08013140 	.word	0x08013140

08005ab4 <_deinit>:
 8005ab4:	4770      	bx	lr

08005ab6 <dwt_xfer3xxx>:
 8005ab6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	4605      	mov	r5, r0
 8005abe:	460e      	mov	r6, r1
 8005ac0:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8005ac4:	1990      	adds	r0, r2, r6
 8005ac6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8005aca:	4432      	add	r2, r6
 8005acc:	f3c2 4204 	ubfx	r2, r2, #16, #5
 8005ad0:	0084      	lsls	r4, r0, #2
 8005ad2:	ea44 2442 	orr.w	r4, r4, r2, lsl #9
 8005ad6:	ea41 0204 	orr.w	r2, r1, r4
 8005ada:	0a12      	lsrs	r2, r2, #8
 8005adc:	f88d 200c 	strb.w	r2, [sp, #12]
 8005ae0:	f001 0703 	and.w	r7, r1, #3
 8005ae4:	433c      	orrs	r4, r7
 8005ae6:	f88d 400d 	strb.w	r4, [sp, #13]
 8005aea:	461f      	mov	r7, r3
 8005aec:	b973      	cbnz	r3, 8005b0c <dwt_xfer3xxx+0x56>
 8005aee:	2900      	cmp	r1, #0
 8005af0:	d05c      	beq.n	8005bac <dwt_xfer3xxx+0xf6>
 8005af2:	0073      	lsls	r3, r6, #1
 8005af4:	f063 037e 	orn	r3, r3, #126	; 0x7e
 8005af8:	f88d 300c 	strb.w	r3, [sp, #12]
 8005afc:	2401      	movs	r4, #1
 8005afe:	2900      	cmp	r1, #0
 8005b00:	d02f      	beq.n	8005b62 <dwt_xfer3xxx+0xac>
 8005b02:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
 8005b06:	2903      	cmp	r1, #3
 8005b08:	d90a      	bls.n	8005b20 <dwt_xfer3xxx+0x6a>
 8005b0a:	e7fe      	b.n	8005b0a <dwt_xfer3xxx+0x54>
 8005b0c:	2800      	cmp	r0, #0
 8005b0e:	d14f      	bne.n	8005bb0 <dwt_xfer3xxx+0xfa>
 8005b10:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005b14:	d003      	beq.n	8005b1e <dwt_xfer3xxx+0x68>
 8005b16:	2900      	cmp	r1, #0
 8005b18:	d14a      	bne.n	8005bb0 <dwt_xfer3xxx+0xfa>
 8005b1a:	2401      	movs	r4, #1
 8005b1c:	e021      	b.n	8005b62 <dwt_xfer3xxx+0xac>
 8005b1e:	2401      	movs	r4, #1
 8005b20:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8005b22:	7d9b      	ldrb	r3, [r3, #22]
 8005b24:	b94b      	cbnz	r3, 8005b3a <dwt_xfer3xxx+0x84>
 8005b26:	682b      	ldr	r3, [r5, #0]
 8005b28:	685d      	ldr	r5, [r3, #4]
 8005b2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b2c:	463a      	mov	r2, r7
 8005b2e:	a903      	add	r1, sp, #12
 8005b30:	4620      	mov	r0, r4
 8005b32:	47a8      	blx	r5
 8005b34:	b004      	add	sp, #16
 8005b36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	4621      	mov	r1, r4
 8005b3e:	a803      	add	r0, sp, #12
 8005b40:	f7ff ff54 	bl	80059ec <dwt_generatecrc8>
 8005b44:	4602      	mov	r2, r0
 8005b46:	4639      	mov	r1, r7
 8005b48:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005b4a:	f7ff ff4f 	bl	80059ec <dwt_generatecrc8>
 8005b4e:	682b      	ldr	r3, [r5, #0]
 8005b50:	9000      	str	r0, [sp, #0]
 8005b52:	689d      	ldr	r5, [r3, #8]
 8005b54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b56:	463a      	mov	r2, r7
 8005b58:	a903      	add	r1, sp, #12
 8005b5a:	4620      	mov	r0, r4
 8005b5c:	47a8      	blx	r5
 8005b5e:	e7e9      	b.n	8005b34 <dwt_xfer3xxx+0x7e>
 8005b60:	2401      	movs	r4, #1
 8005b62:	682b      	ldr	r3, [r5, #0]
 8005b64:	f8d3 8000 	ldr.w	r8, [r3]
 8005b68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b6a:	463a      	mov	r2, r7
 8005b6c:	a903      	add	r1, sp, #12
 8005b6e:	4620      	mov	r0, r4
 8005b70:	47c0      	blx	r8
 8005b72:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8005b74:	7d9b      	ldrb	r3, [r3, #22]
 8005b76:	2b02      	cmp	r3, #2
 8005b78:	d1dc      	bne.n	8005b34 <dwt_xfer3xxx+0x7e>
 8005b7a:	2e18      	cmp	r6, #24
 8005b7c:	d0da      	beq.n	8005b34 <dwt_xfer3xxx+0x7e>
 8005b7e:	2200      	movs	r2, #0
 8005b80:	4621      	mov	r1, r4
 8005b82:	a803      	add	r0, sp, #12
 8005b84:	f7ff ff32 	bl	80059ec <dwt_generatecrc8>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	4639      	mov	r1, r7
 8005b8c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005b8e:	f7ff ff2d 	bl	80059ec <dwt_generatecrc8>
 8005b92:	4604      	mov	r4, r0
 8005b94:	2200      	movs	r2, #0
 8005b96:	2118      	movs	r1, #24
 8005b98:	4628      	mov	r0, r5
 8005b9a:	f000 f841 	bl	8005c20 <dwt_read8bitoffsetreg>
 8005b9e:	4284      	cmp	r4, r0
 8005ba0:	d0c8      	beq.n	8005b34 <dwt_xfer3xxx+0x7e>
 8005ba2:	68eb      	ldr	r3, [r5, #12]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d0c5      	beq.n	8005b34 <dwt_xfer3xxx+0x7e>
 8005ba8:	4798      	blx	r3
 8005baa:	e7c3      	b.n	8005b34 <dwt_xfer3xxx+0x7e>
 8005bac:	2800      	cmp	r0, #0
 8005bae:	d0d7      	beq.n	8005b60 <dwt_xfer3xxx+0xaa>
 8005bb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bb4:	f88d 200c 	strb.w	r2, [sp, #12]
 8005bb8:	2402      	movs	r4, #2
 8005bba:	e7a0      	b.n	8005afe <dwt_xfer3xxx+0x48>

08005bbc <dwt_readfromdevice>:
 8005bbc:	b510      	push	{r4, lr}
 8005bbe:	b082      	sub	sp, #8
 8005bc0:	2400      	movs	r4, #0
 8005bc2:	9401      	str	r4, [sp, #4]
 8005bc4:	9c04      	ldr	r4, [sp, #16]
 8005bc6:	9400      	str	r4, [sp, #0]
 8005bc8:	f7ff ff75 	bl	8005ab6 <dwt_xfer3xxx>
 8005bcc:	b002      	add	sp, #8
 8005bce:	bd10      	pop	{r4, pc}

08005bd0 <dwt_read32bitoffsetreg>:
 8005bd0:	b500      	push	{lr}
 8005bd2:	b085      	sub	sp, #20
 8005bd4:	ab03      	add	r3, sp, #12
 8005bd6:	9300      	str	r3, [sp, #0]
 8005bd8:	2304      	movs	r3, #4
 8005bda:	b292      	uxth	r2, r2
 8005bdc:	f7ff ffee 	bl	8005bbc <dwt_readfromdevice>
 8005be0:	f10d 030f 	add.w	r3, sp, #15
 8005be4:	f10d 010b 	add.w	r1, sp, #11
 8005be8:	2000      	movs	r0, #0
 8005bea:	f813 2901 	ldrb.w	r2, [r3], #-1
 8005bee:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 8005bf2:	428b      	cmp	r3, r1
 8005bf4:	d1f9      	bne.n	8005bea <dwt_read32bitoffsetreg+0x1a>
 8005bf6:	b005      	add	sp, #20
 8005bf8:	f85d fb04 	ldr.w	pc, [sp], #4

08005bfc <dwt_read16bitoffsetreg>:
 8005bfc:	b500      	push	{lr}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	ab03      	add	r3, sp, #12
 8005c02:	9300      	str	r3, [sp, #0]
 8005c04:	2302      	movs	r3, #2
 8005c06:	b292      	uxth	r2, r2
 8005c08:	f7ff ffd8 	bl	8005bbc <dwt_readfromdevice>
 8005c0c:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8005c10:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8005c14:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 8005c18:	b280      	uxth	r0, r0
 8005c1a:	b005      	add	sp, #20
 8005c1c:	f85d fb04 	ldr.w	pc, [sp], #4

08005c20 <dwt_read8bitoffsetreg>:
 8005c20:	b500      	push	{lr}
 8005c22:	b085      	sub	sp, #20
 8005c24:	f10d 030f 	add.w	r3, sp, #15
 8005c28:	9300      	str	r3, [sp, #0]
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	b292      	uxth	r2, r2
 8005c2e:	f7ff ffc5 	bl	8005bbc <dwt_readfromdevice>
 8005c32:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8005c36:	b005      	add	sp, #20
 8005c38:	f85d fb04 	ldr.w	pc, [sp], #4

08005c3c <ull_readdiagnostics>:
 8005c3c:	b530      	push	{r4, r5, lr}
 8005c3e:	b0bd      	sub	sp, #244	; 0xf4
 8005c40:	4605      	mov	r5, r0
 8005c42:	460c      	mov	r4, r1
 8005c44:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005c46:	7bda      	ldrb	r2, [r3, #15]
 8005c48:	2a01      	cmp	r2, #1
 8005c4a:	d01c      	beq.n	8005c86 <ull_readdiagnostics+0x4a>
 8005c4c:	2a03      	cmp	r2, #3
 8005c4e:	f040 81d4 	bne.w	8005ffa <ull_readdiagnostics+0x3be>
 8005c52:	7e1b      	ldrb	r3, [r3, #24]
 8005c54:	f013 0f08 	tst.w	r3, #8
 8005c58:	d10c      	bne.n	8005c74 <ull_readdiagnostics+0x38>
 8005c5a:	f013 0f04 	tst.w	r3, #4
 8005c5e:	ab02      	add	r3, sp, #8
 8005c60:	9300      	str	r3, [sp, #0]
 8005c62:	bf14      	ite	ne
 8005c64:	2338      	movne	r3, #56	; 0x38
 8005c66:	2320      	moveq	r3, #32
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8005c6e:	f7ff ffa5 	bl	8005bbc <dwt_readfromdevice>
 8005c72:	e019      	b.n	8005ca8 <ull_readdiagnostics+0x6c>
 8005c74:	ab02      	add	r3, sp, #8
 8005c76:	9300      	str	r3, [sp, #0]
 8005c78:	23e8      	movs	r3, #232	; 0xe8
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8005c80:	f7ff ff9c 	bl	8005bbc <dwt_readfromdevice>
 8005c84:	e010      	b.n	8005ca8 <ull_readdiagnostics+0x6c>
 8005c86:	7e1b      	ldrb	r3, [r3, #24]
 8005c88:	f013 0f08 	tst.w	r3, #8
 8005c8c:	f040 81ac 	bne.w	8005fe8 <ull_readdiagnostics+0x3ac>
 8005c90:	f013 0f04 	tst.w	r3, #4
 8005c94:	ab02      	add	r3, sp, #8
 8005c96:	9300      	str	r3, [sp, #0]
 8005c98:	bf14      	ite	ne
 8005c9a:	2338      	movne	r3, #56	; 0x38
 8005c9c:	2320      	moveq	r3, #32
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 8005ca4:	f7ff ff8a 	bl	8005bbc <dwt_readfromdevice>
 8005ca8:	f10d 0217 	add.w	r2, sp, #23
 8005cac:	f104 031a 	add.w	r3, r4, #26
 8005cb0:	f104 0020 	add.w	r0, r4, #32
 8005cb4:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8005cb8:	f803 1b01 	strb.w	r1, [r3], #1
 8005cbc:	4283      	cmp	r3, r0
 8005cbe:	d1f9      	bne.n	8005cb4 <ull_readdiagnostics+0x78>
 8005cc0:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8005cc4:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8005cc8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005ccc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005cd0:	8463      	strh	r3, [r4, #34]	; 0x22
 8005cd2:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8005cd6:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8005cda:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005cde:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005ce2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8005ce6:	bf1c      	itt	ne
 8005ce8:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 8005cec:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 8005cf0:	8423      	strh	r3, [r4, #32]
 8005cf2:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 8005cf6:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8005cfa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005cfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d02:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005d04:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8005d06:	7e1b      	ldrb	r3, [r3, #24]
 8005d08:	f013 0f02 	tst.w	r3, #2
 8005d0c:	f040 816a 	bne.w	8005fe4 <ull_readdiagnostics+0x3a8>
 8005d10:	aa0a      	add	r2, sp, #40	; 0x28
 8005d12:	1e63      	subs	r3, r4, #1
 8005d14:	1d20      	adds	r0, r4, #4
 8005d16:	f812 1b01 	ldrb.w	r1, [r2], #1
 8005d1a:	f803 1f01 	strb.w	r1, [r3, #1]!
 8005d1e:	79d1      	ldrb	r1, [r2, #7]
 8005d20:	7219      	strb	r1, [r3, #8]
 8005d22:	7bd1      	ldrb	r1, [r2, #15]
 8005d24:	7459      	strb	r1, [r3, #17]
 8005d26:	4283      	cmp	r3, r0
 8005d28:	d1f5      	bne.n	8005d16 <ull_readdiagnostics+0xda>
 8005d2a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8005d2e:	7163      	strb	r3, [r4, #5]
 8005d30:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 8005d34:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 8005d38:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005d3c:	80e3      	strh	r3, [r4, #6]
 8005d3e:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 8005d42:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 8005d46:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005d4a:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 8005d4e:	f8a4 300d 	strh.w	r3, [r4, #13]
 8005d52:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 8005d56:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8005d5a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005d5e:	f8a4 300f 	strh.w	r3, [r4, #15]
 8005d62:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 8005d66:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 8005d6a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005d6e:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 8005d72:	82e3      	strh	r3, [r4, #22]
 8005d74:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
 8005d78:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8005d7c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005d80:	8323      	strh	r3, [r4, #24]
 8005d82:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8005d84:	7e1b      	ldrb	r3, [r3, #24]
 8005d86:	f013 0f04 	tst.w	r3, #4
 8005d8a:	f040 812b 	bne.w	8005fe4 <ull_readdiagnostics+0x3a8>
 8005d8e:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 8005d92:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8005d96:	041b      	lsls	r3, r3, #16
 8005d98:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005d9c:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8005da0:	4313      	orrs	r3, r2
 8005da2:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8005da6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005daa:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8005dae:	6263      	str	r3, [r4, #36]	; 0x24
 8005db0:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
 8005db4:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
 8005db8:	041b      	lsls	r3, r3, #16
 8005dba:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005dbe:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
 8005dc8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005dcc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005dd0:	62a3      	str	r3, [r4, #40]	; 0x28
 8005dd2:	f89d 204b 	ldrb.w	r2, [sp, #75]	; 0x4b
 8005dd6:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 8005dda:	041b      	lsls	r3, r3, #16
 8005ddc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005de0:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8005de4:	4313      	orrs	r3, r2
 8005de6:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 8005dea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005dee:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8005df2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005df4:	f89d 204f 	ldrb.w	r2, [sp, #79]	; 0x4f
 8005df8:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
 8005dfc:	041b      	lsls	r3, r3, #16
 8005dfe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005e02:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 8005e06:	4313      	orrs	r3, r2
 8005e08:	f89d 204d 	ldrb.w	r2, [sp, #77]	; 0x4d
 8005e0c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005e10:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005e14:	6323      	str	r3, [r4, #48]	; 0x30
 8005e16:	f89d 2053 	ldrb.w	r2, [sp, #83]	; 0x53
 8005e1a:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
 8005e1e:	041b      	lsls	r3, r3, #16
 8005e20:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005e24:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 8005e2e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005e32:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005e36:	6363      	str	r3, [r4, #52]	; 0x34
 8005e38:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
 8005e3c:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
 8005e40:	041b      	lsls	r3, r3, #16
 8005e42:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005e46:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	f89d 2055 	ldrb.w	r2, [sp, #85]	; 0x55
 8005e50:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005e54:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005e58:	63a3      	str	r3, [r4, #56]	; 0x38
 8005e5a:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 8005e5e:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8005e62:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005e66:	87a3      	strh	r3, [r4, #60]	; 0x3c
 8005e68:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 8005e6c:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 8005e70:	041b      	lsls	r3, r3, #16
 8005e72:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005e76:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 8005e80:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005e84:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005e88:	6423      	str	r3, [r4, #64]	; 0x40
 8005e8a:	f89d 2079 	ldrb.w	r2, [sp, #121]	; 0x79
 8005e8e:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
 8005e92:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005e96:	6463      	str	r3, [r4, #68]	; 0x44
 8005e98:	f89d 207f 	ldrb.w	r2, [sp, #127]	; 0x7f
 8005e9c:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
 8005ea0:	041b      	lsls	r3, r3, #16
 8005ea2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005ea6:	f89d 207c 	ldrb.w	r2, [sp, #124]	; 0x7c
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	f89d 207d 	ldrb.w	r2, [sp, #125]	; 0x7d
 8005eb0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005eb4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005eb8:	64a3      	str	r3, [r4, #72]	; 0x48
 8005eba:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
 8005ebe:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
 8005ec2:	041b      	lsls	r3, r3, #16
 8005ec4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005ec8:	f89d 2080 	ldrb.w	r2, [sp, #128]	; 0x80
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	f89d 2081 	ldrb.w	r2, [sp, #129]	; 0x81
 8005ed2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005ed6:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005eda:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005edc:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
 8005ee0:	f89d 3086 	ldrb.w	r3, [sp, #134]	; 0x86
 8005ee4:	041b      	lsls	r3, r3, #16
 8005ee6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005eea:	f89d 2084 	ldrb.w	r2, [sp, #132]	; 0x84
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 8005ef4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005ef8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005efc:	6523      	str	r3, [r4, #80]	; 0x50
 8005efe:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 8005f02:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 8005f06:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005f0a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005f0e:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 8005f12:	f89d 20a5 	ldrb.w	r2, [sp, #165]	; 0xa5
 8005f16:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8005f1a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005f1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f22:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8005f26:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 8005f2a:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 8005f2e:	041b      	lsls	r3, r3, #16
 8005f30:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005f34:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 8005f3e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005f42:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005f46:	65a3      	str	r3, [r4, #88]	; 0x58
 8005f48:	f89d 20c1 	ldrb.w	r2, [sp, #193]	; 0xc1
 8005f4c:	f89d 30c0 	ldrb.w	r3, [sp, #192]	; 0xc0
 8005f50:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005f54:	65e3      	str	r3, [r4, #92]	; 0x5c
 8005f56:	f89d 20c7 	ldrb.w	r2, [sp, #199]	; 0xc7
 8005f5a:	f89d 30c6 	ldrb.w	r3, [sp, #198]	; 0xc6
 8005f5e:	041b      	lsls	r3, r3, #16
 8005f60:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005f64:	f89d 20c4 	ldrb.w	r2, [sp, #196]	; 0xc4
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	f89d 20c5 	ldrb.w	r2, [sp, #197]	; 0xc5
 8005f6e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005f72:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005f76:	6623      	str	r3, [r4, #96]	; 0x60
 8005f78:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
 8005f7c:	f89d 30ca 	ldrb.w	r3, [sp, #202]	; 0xca
 8005f80:	041b      	lsls	r3, r3, #16
 8005f82:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005f86:	f89d 20c8 	ldrb.w	r2, [sp, #200]	; 0xc8
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	f89d 20c9 	ldrb.w	r2, [sp, #201]	; 0xc9
 8005f90:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005f94:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005f98:	6663      	str	r3, [r4, #100]	; 0x64
 8005f9a:	f89d 20cf 	ldrb.w	r2, [sp, #207]	; 0xcf
 8005f9e:	f89d 30ce 	ldrb.w	r3, [sp, #206]	; 0xce
 8005fa2:	041b      	lsls	r3, r3, #16
 8005fa4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005fa8:	f89d 20cc 	ldrb.w	r2, [sp, #204]	; 0xcc
 8005fac:	4313      	orrs	r3, r2
 8005fae:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 8005fb2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005fb6:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005fba:	66a3      	str	r3, [r4, #104]	; 0x68
 8005fbc:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 8005fc0:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8005fc4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005fc8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005fcc:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 8005fd0:	f89d 20ed 	ldrb.w	r2, [sp, #237]	; 0xed
 8005fd4:	f89d 30ec 	ldrb.w	r3, [sp, #236]	; 0xec
 8005fd8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005fdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fe0:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 8005fe4:	b03d      	add	sp, #244	; 0xf4
 8005fe6:	bd30      	pop	{r4, r5, pc}
 8005fe8:	ab02      	add	r3, sp, #8
 8005fea:	9300      	str	r3, [sp, #0]
 8005fec:	23e8      	movs	r3, #232	; 0xe8
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 8005ff4:	f7ff fde2 	bl	8005bbc <dwt_readfromdevice>
 8005ff8:	e656      	b.n	8005ca8 <ull_readdiagnostics+0x6c>
 8005ffa:	7e1b      	ldrb	r3, [r3, #24]
 8005ffc:	f013 0f01 	tst.w	r3, #1
 8006000:	f000 819f 	beq.w	8006342 <ull_readdiagnostics+0x706>
 8006004:	ab02      	add	r3, sp, #8
 8006006:	9300      	str	r3, [sp, #0]
 8006008:	236c      	movs	r3, #108	; 0x6c
 800600a:	2200      	movs	r2, #0
 800600c:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 8006010:	f7ff fdd4 	bl	8005bbc <dwt_readfromdevice>
 8006014:	ab1d      	add	r3, sp, #116	; 0x74
 8006016:	9300      	str	r3, [sp, #0]
 8006018:	236c      	movs	r3, #108	; 0x6c
 800601a:	2200      	movs	r2, #0
 800601c:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 8006020:	4628      	mov	r0, r5
 8006022:	f7ff fdcb 	bl	8005bbc <dwt_readfromdevice>
 8006026:	aa02      	add	r2, sp, #8
 8006028:	1e63      	subs	r3, r4, #1
 800602a:	1d20      	adds	r0, r4, #4
 800602c:	f812 1b01 	ldrb.w	r1, [r2], #1
 8006030:	f803 1f01 	strb.w	r1, [r3, #1]!
 8006034:	79d1      	ldrb	r1, [r2, #7]
 8006036:	7219      	strb	r1, [r3, #8]
 8006038:	7bd1      	ldrb	r1, [r2, #15]
 800603a:	7459      	strb	r1, [r3, #17]
 800603c:	7dd1      	ldrb	r1, [r2, #23]
 800603e:	7699      	strb	r1, [r3, #26]
 8006040:	4283      	cmp	r3, r0
 8006042:	d1f3      	bne.n	800602c <ull_readdiagnostics+0x3f0>
 8006044:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8006048:	77e3      	strb	r3, [r4, #31]
 800604a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800604e:	7163      	strb	r3, [r4, #5]
 8006050:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8006054:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8006058:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800605c:	80e3      	strh	r3, [r4, #6]
 800605e:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8006062:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8006066:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 800606a:	f3c2 12cf 	ubfx	r2, r2, #7, #16
 800606e:	f8a4 200d 	strh.w	r2, [r4, #13]
 8006072:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8006076:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800607a:	f8a4 200f 	strh.w	r2, [r4, #15]
 800607e:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8006082:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006086:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 800608a:	82e3      	strh	r3, [r4, #22]
 800608c:	f89d 201e 	ldrb.w	r2, [sp, #30]
 8006090:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8006094:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006098:	8323      	strh	r3, [r4, #24]
 800609a:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 800609e:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 80060a2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80060a6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80060aa:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80060ae:	bf1c      	itt	ne
 80060b0:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 80060b4:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 80060b8:	8423      	strh	r3, [r4, #32]
 80060ba:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 80060be:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 80060c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80060c6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80060ca:	8463      	strh	r3, [r4, #34]	; 0x22
 80060cc:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 80060d0:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 80060d4:	041b      	lsls	r3, r3, #16
 80060d6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80060da:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 80060de:	4313      	orrs	r3, r2
 80060e0:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 80060e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80060e8:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80060ec:	6263      	str	r3, [r4, #36]	; 0x24
 80060ee:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80060f0:	7e1b      	ldrb	r3, [r3, #24]
 80060f2:	f013 0f01 	tst.w	r3, #1
 80060f6:	f43f af75 	beq.w	8005fe4 <ull_readdiagnostics+0x3a8>
 80060fa:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 80060fe:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8006102:	041b      	lsls	r3, r3, #16
 8006104:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006108:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 800610c:	4313      	orrs	r3, r2
 800610e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 8006112:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006116:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800611a:	62a3      	str	r3, [r4, #40]	; 0x28
 800611c:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 8006120:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 8006124:	041b      	lsls	r3, r3, #16
 8006126:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800612a:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 800612e:	4313      	orrs	r3, r2
 8006130:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 8006134:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006138:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800613c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800613e:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 8006142:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8006146:	041b      	lsls	r3, r3, #16
 8006148:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800614c:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8006150:	4313      	orrs	r3, r2
 8006152:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8006156:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800615a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800615e:	6323      	str	r3, [r4, #48]	; 0x30
 8006160:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 8006164:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 8006168:	041b      	lsls	r3, r3, #16
 800616a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800616e:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 8006172:	4313      	orrs	r3, r2
 8006174:	f89d 203d 	ldrb.w	r2, [sp, #61]	; 0x3d
 8006178:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800617c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006180:	6363      	str	r3, [r4, #52]	; 0x34
 8006182:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 8006186:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800618a:	041b      	lsls	r3, r3, #16
 800618c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006190:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8006194:	4313      	orrs	r3, r2
 8006196:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 800619a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800619e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80061a2:	63a3      	str	r3, [r4, #56]	; 0x38
 80061a4:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 80061a8:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80061ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80061b0:	87a3      	strh	r3, [r4, #60]	; 0x3c
 80061b2:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
 80061b6:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 80061ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80061be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061c2:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80061c4:	f89d 2067 	ldrb.w	r2, [sp, #103]	; 0x67
 80061c8:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
 80061cc:	041b      	lsls	r3, r3, #16
 80061ce:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80061d2:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80061d6:	4313      	orrs	r3, r2
 80061d8:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 80061dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80061e0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80061e4:	6423      	str	r3, [r4, #64]	; 0x40
 80061e6:	f89d 2069 	ldrb.w	r2, [sp, #105]	; 0x69
 80061ea:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 80061ee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80061f2:	6463      	str	r3, [r4, #68]	; 0x44
 80061f4:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
 80061f8:	f89d 306e 	ldrb.w	r3, [sp, #110]	; 0x6e
 80061fc:	041b      	lsls	r3, r3, #16
 80061fe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006202:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 8006206:	4313      	orrs	r3, r2
 8006208:	f89d 206d 	ldrb.w	r2, [sp, #109]	; 0x6d
 800620c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006210:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006214:	64a3      	str	r3, [r4, #72]	; 0x48
 8006216:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
 800621a:	f89d 3072 	ldrb.w	r3, [sp, #114]	; 0x72
 800621e:	041b      	lsls	r3, r3, #16
 8006220:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006224:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
 8006228:	4313      	orrs	r3, r2
 800622a:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
 800622e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006232:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006236:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006238:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 800623c:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 8006240:	041b      	lsls	r3, r3, #16
 8006242:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006246:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 800624a:	4313      	orrs	r3, r2
 800624c:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 8006250:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006254:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006258:	6523      	str	r3, [r4, #80]	; 0x50
 800625a:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 800625e:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 8006262:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006266:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800626a:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 800626e:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 8006272:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 8006276:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800627a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800627e:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8006282:	f89d 20af 	ldrb.w	r2, [sp, #175]	; 0xaf
 8006286:	f89d 30ae 	ldrb.w	r3, [sp, #174]	; 0xae
 800628a:	041b      	lsls	r3, r3, #16
 800628c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006290:	f89d 20ac 	ldrb.w	r2, [sp, #172]	; 0xac
 8006294:	4313      	orrs	r3, r2
 8006296:	f89d 20ad 	ldrb.w	r2, [sp, #173]	; 0xad
 800629a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800629e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80062a2:	65a3      	str	r3, [r4, #88]	; 0x58
 80062a4:	f89d 20b1 	ldrb.w	r2, [sp, #177]	; 0xb1
 80062a8:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 80062ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80062b0:	65e3      	str	r3, [r4, #92]	; 0x5c
 80062b2:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
 80062b6:	f89d 30b6 	ldrb.w	r3, [sp, #182]	; 0xb6
 80062ba:	041b      	lsls	r3, r3, #16
 80062bc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80062c0:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 80062c4:	4313      	orrs	r3, r2
 80062c6:	f89d 20b5 	ldrb.w	r2, [sp, #181]	; 0xb5
 80062ca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80062ce:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80062d2:	6623      	str	r3, [r4, #96]	; 0x60
 80062d4:	f89d 20bb 	ldrb.w	r2, [sp, #187]	; 0xbb
 80062d8:	f89d 30ba 	ldrb.w	r3, [sp, #186]	; 0xba
 80062dc:	041b      	lsls	r3, r3, #16
 80062de:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80062e2:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 80062e6:	4313      	orrs	r3, r2
 80062e8:	f89d 20b9 	ldrb.w	r2, [sp, #185]	; 0xb9
 80062ec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80062f0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80062f4:	6663      	str	r3, [r4, #100]	; 0x64
 80062f6:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 80062fa:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 80062fe:	041b      	lsls	r3, r3, #16
 8006300:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006304:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 8006308:	4313      	orrs	r3, r2
 800630a:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 800630e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006312:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006316:	66a3      	str	r3, [r4, #104]	; 0x68
 8006318:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 800631c:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8006320:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006324:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006328:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 800632c:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 8006330:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8006334:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006338:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800633c:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 8006340:	e650      	b.n	8005fe4 <ull_readdiagnostics+0x3a8>
 8006342:	ab02      	add	r3, sp, #8
 8006344:	9300      	str	r3, [sp, #0]
 8006346:	2328      	movs	r3, #40	; 0x28
 8006348:	2200      	movs	r2, #0
 800634a:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 800634e:	f7ff fc35 	bl	8005bbc <dwt_readfromdevice>
 8006352:	e668      	b.n	8006026 <ull_readdiagnostics+0x3ea>

08006354 <ull_readrxtimestamp>:
 8006354:	b500      	push	{lr}
 8006356:	b083      	sub	sp, #12
 8006358:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800635a:	7bdb      	ldrb	r3, [r3, #15]
 800635c:	2b01      	cmp	r3, #1
 800635e:	d00b      	beq.n	8006378 <ull_readrxtimestamp+0x24>
 8006360:	2b03      	cmp	r3, #3
 8006362:	d110      	bne.n	8006386 <ull_readrxtimestamp+0x32>
 8006364:	9100      	str	r1, [sp, #0]
 8006366:	2305      	movs	r3, #5
 8006368:	2204      	movs	r2, #4
 800636a:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800636e:	f7ff fc25 	bl	8005bbc <dwt_readfromdevice>
 8006372:	b003      	add	sp, #12
 8006374:	f85d fb04 	ldr.w	pc, [sp], #4
 8006378:	9100      	str	r1, [sp, #0]
 800637a:	2305      	movs	r3, #5
 800637c:	2200      	movs	r2, #0
 800637e:	4905      	ldr	r1, [pc, #20]	; (8006394 <ull_readrxtimestamp+0x40>)
 8006380:	f7ff fc1c 	bl	8005bbc <dwt_readfromdevice>
 8006384:	e7f5      	b.n	8006372 <ull_readrxtimestamp+0x1e>
 8006386:	9100      	str	r1, [sp, #0]
 8006388:	2305      	movs	r3, #5
 800638a:	2200      	movs	r2, #0
 800638c:	2164      	movs	r1, #100	; 0x64
 800638e:	f7ff fc15 	bl	8005bbc <dwt_readfromdevice>
 8006392:	e7ee      	b.n	8006372 <ull_readrxtimestamp+0x1e>
 8006394:	00180004 	.word	0x00180004

08006398 <dwt_writetodevice>:
 8006398:	b510      	push	{r4, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 80063a0:	9401      	str	r4, [sp, #4]
 80063a2:	9c04      	ldr	r4, [sp, #16]
 80063a4:	9400      	str	r4, [sp, #0]
 80063a6:	f7ff fb86 	bl	8005ab6 <dwt_xfer3xxx>
 80063aa:	b002      	add	sp, #8
 80063ac:	bd10      	pop	{r4, pc}

080063ae <dwt_write8bitoffsetreg>:
 80063ae:	b510      	push	{r4, lr}
 80063b0:	b084      	sub	sp, #16
 80063b2:	ac04      	add	r4, sp, #16
 80063b4:	f804 3d01 	strb.w	r3, [r4, #-1]!
 80063b8:	9400      	str	r4, [sp, #0]
 80063ba:	2301      	movs	r3, #1
 80063bc:	b292      	uxth	r2, r2
 80063be:	f7ff ffeb 	bl	8006398 <dwt_writetodevice>
 80063c2:	b004      	add	sp, #16
 80063c4:	bd10      	pop	{r4, pc}
	...

080063c8 <ull_getframelength>:
 80063c8:	b510      	push	{r4, lr}
 80063ca:	4604      	mov	r4, r0
 80063cc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80063ce:	7bdb      	ldrb	r3, [r3, #15]
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d013      	beq.n	80063fc <ull_getframelength+0x34>
 80063d4:	2b03      	cmp	r3, #3
 80063d6:	d11d      	bne.n	8006414 <ull_getframelength+0x4c>
 80063d8:	23f0      	movs	r3, #240	; 0xf0
 80063da:	2200      	movs	r2, #0
 80063dc:	4912      	ldr	r1, [pc, #72]	; (8006428 <ull_getframelength+0x60>)
 80063de:	f7ff ffe6 	bl	80063ae <dwt_write8bitoffsetreg>
 80063e2:	2200      	movs	r2, #0
 80063e4:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 80063e8:	4620      	mov	r0, r4
 80063ea:	f7ff fc07 	bl	8005bfc <dwt_read16bitoffsetreg>
 80063ee:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80063f0:	7b1a      	ldrb	r2, [r3, #12]
 80063f2:	b1a2      	cbz	r2, 800641e <ull_getframelength+0x56>
 80063f4:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80063f8:	8458      	strh	r0, [r3, #34]	; 0x22
 80063fa:	bd10      	pop	{r4, pc}
 80063fc:	230f      	movs	r3, #15
 80063fe:	2200      	movs	r2, #0
 8006400:	4909      	ldr	r1, [pc, #36]	; (8006428 <ull_getframelength+0x60>)
 8006402:	f7ff ffd4 	bl	80063ae <dwt_write8bitoffsetreg>
 8006406:	2200      	movs	r2, #0
 8006408:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 800640c:	4620      	mov	r0, r4
 800640e:	f7ff fbf5 	bl	8005bfc <dwt_read16bitoffsetreg>
 8006412:	e7ec      	b.n	80063ee <ull_getframelength+0x26>
 8006414:	2200      	movs	r2, #0
 8006416:	214c      	movs	r1, #76	; 0x4c
 8006418:	f7ff fbf0 	bl	8005bfc <dwt_read16bitoffsetreg>
 800641c:	e7e7      	b.n	80063ee <ull_getframelength+0x26>
 800641e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8006422:	8458      	strh	r0, [r3, #34]	; 0x22
 8006424:	e7e9      	b.n	80063fa <ull_getframelength+0x32>
 8006426:	bf00      	nop
 8006428:	00010024 	.word	0x00010024

0800642c <ull_configeventcounters>:
 800642c:	b538      	push	{r3, r4, r5, lr}
 800642e:	4605      	mov	r5, r0
 8006430:	460c      	mov	r4, r1
 8006432:	2302      	movs	r3, #2
 8006434:	2200      	movs	r2, #0
 8006436:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800643a:	f7ff ffb8 	bl	80063ae <dwt_write8bitoffsetreg>
 800643e:	b904      	cbnz	r4, 8006442 <ull_configeventcounters+0x16>
 8006440:	bd38      	pop	{r3, r4, r5, pc}
 8006442:	2301      	movs	r3, #1
 8006444:	2200      	movs	r2, #0
 8006446:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800644a:	4628      	mov	r0, r5
 800644c:	f7ff ffaf 	bl	80063ae <dwt_write8bitoffsetreg>
 8006450:	e7f6      	b.n	8006440 <ull_configeventcounters+0x14>

08006452 <dwt_write16bitoffsetreg>:
 8006452:	b500      	push	{lr}
 8006454:	b085      	sub	sp, #20
 8006456:	f88d 300c 	strb.w	r3, [sp, #12]
 800645a:	0a1b      	lsrs	r3, r3, #8
 800645c:	f88d 300d 	strb.w	r3, [sp, #13]
 8006460:	ab03      	add	r3, sp, #12
 8006462:	9300      	str	r3, [sp, #0]
 8006464:	2302      	movs	r3, #2
 8006466:	b292      	uxth	r2, r2
 8006468:	f7ff ff96 	bl	8006398 <dwt_writetodevice>
 800646c:	b005      	add	sp, #20
 800646e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08006474 <ull_clearaonconfig>:
 8006474:	b538      	push	{r3, r4, r5, lr}
 8006476:	4604      	mov	r4, r0
 8006478:	2300      	movs	r3, #0
 800647a:	461a      	mov	r2, r3
 800647c:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 8006480:	f7ff ffe7 	bl	8006452 <dwt_write16bitoffsetreg>
 8006484:	2300      	movs	r3, #0
 8006486:	461a      	mov	r2, r3
 8006488:	4908      	ldr	r1, [pc, #32]	; (80064ac <ull_clearaonconfig+0x38>)
 800648a:	4620      	mov	r0, r4
 800648c:	f7ff ff8f 	bl	80063ae <dwt_write8bitoffsetreg>
 8006490:	4d07      	ldr	r5, [pc, #28]	; (80064b0 <ull_clearaonconfig+0x3c>)
 8006492:	2300      	movs	r3, #0
 8006494:	461a      	mov	r2, r3
 8006496:	4629      	mov	r1, r5
 8006498:	4620      	mov	r0, r4
 800649a:	f7ff ff88 	bl	80063ae <dwt_write8bitoffsetreg>
 800649e:	2302      	movs	r3, #2
 80064a0:	2200      	movs	r2, #0
 80064a2:	4629      	mov	r1, r5
 80064a4:	4620      	mov	r0, r4
 80064a6:	f7ff ff82 	bl	80063ae <dwt_write8bitoffsetreg>
 80064aa:	bd38      	pop	{r3, r4, r5, pc}
 80064ac:	000a0014 	.word	0x000a0014
 80064b0:	000a0004 	.word	0x000a0004

080064b4 <ull_force_clocks>:
 80064b4:	b508      	push	{r3, lr}
 80064b6:	2901      	cmp	r1, #1
 80064b8:	d002      	beq.n	80064c0 <ull_force_clocks+0xc>
 80064ba:	2905      	cmp	r1, #5
 80064bc:	d007      	beq.n	80064ce <ull_force_clocks+0x1a>
 80064be:	bd08      	pop	{r3, pc}
 80064c0:	f641 0322 	movw	r3, #6178	; 0x1822
 80064c4:	2200      	movs	r2, #0
 80064c6:	4905      	ldr	r1, [pc, #20]	; (80064dc <ull_force_clocks+0x28>)
 80064c8:	f7ff ffc3 	bl	8006452 <dwt_write16bitoffsetreg>
 80064cc:	e7f7      	b.n	80064be <ull_force_clocks+0xa>
 80064ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064d2:	2200      	movs	r2, #0
 80064d4:	4901      	ldr	r1, [pc, #4]	; (80064dc <ull_force_clocks+0x28>)
 80064d6:	f7ff ffbc 	bl	8006452 <dwt_write16bitoffsetreg>
 80064da:	e7f0      	b.n	80064be <ull_force_clocks+0xa>
 80064dc:	00110004 	.word	0x00110004

080064e0 <__dwt_otp_write_wdata_id_reg>:
 80064e0:	b538      	push	{r3, r4, r5, lr}
 80064e2:	4605      	mov	r5, r0
 80064e4:	460c      	mov	r4, r1
 80064e6:	f441 7300 	orr.w	r3, r1, #512	; 0x200
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	2200      	movs	r2, #0
 80064ee:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 80064f2:	f7ff ffae 	bl	8006452 <dwt_write16bitoffsetreg>
 80064f6:	b2a3      	uxth	r3, r4
 80064f8:	2200      	movs	r2, #0
 80064fa:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 80064fe:	4628      	mov	r0, r5
 8006500:	f7ff ffa7 	bl	8006452 <dwt_write16bitoffsetreg>
 8006504:	bd38      	pop	{r3, r4, r5, pc}
	...

08006508 <_dwt_otpread>:
 8006508:	b570      	push	{r4, r5, r6, lr}
 800650a:	4604      	mov	r4, r0
 800650c:	460e      	mov	r6, r1
 800650e:	4d0c      	ldr	r5, [pc, #48]	; (8006540 <_dwt_otpread+0x38>)
 8006510:	2301      	movs	r3, #1
 8006512:	2200      	movs	r2, #0
 8006514:	4629      	mov	r1, r5
 8006516:	f7ff ff9c 	bl	8006452 <dwt_write16bitoffsetreg>
 800651a:	4633      	mov	r3, r6
 800651c:	2200      	movs	r2, #0
 800651e:	4909      	ldr	r1, [pc, #36]	; (8006544 <_dwt_otpread+0x3c>)
 8006520:	4620      	mov	r0, r4
 8006522:	f7ff ff96 	bl	8006452 <dwt_write16bitoffsetreg>
 8006526:	2302      	movs	r3, #2
 8006528:	2200      	movs	r2, #0
 800652a:	4629      	mov	r1, r5
 800652c:	4620      	mov	r0, r4
 800652e:	f7ff ff90 	bl	8006452 <dwt_write16bitoffsetreg>
 8006532:	2200      	movs	r2, #0
 8006534:	4904      	ldr	r1, [pc, #16]	; (8006548 <_dwt_otpread+0x40>)
 8006536:	4620      	mov	r0, r4
 8006538:	f7ff fb4a 	bl	8005bd0 <dwt_read32bitoffsetreg>
 800653c:	bd70      	pop	{r4, r5, r6, pc}
 800653e:	bf00      	nop
 8006540:	000b0008 	.word	0x000b0008
 8006544:	000b0004 	.word	0x000b0004
 8006548:	000b0010 	.word	0x000b0010

0800654c <ull_aon_read>:
 800654c:	b538      	push	{r3, r4, r5, lr}
 800654e:	4604      	mov	r4, r0
 8006550:	460b      	mov	r3, r1
 8006552:	2200      	movs	r2, #0
 8006554:	490a      	ldr	r1, [pc, #40]	; (8006580 <ull_aon_read+0x34>)
 8006556:	f7ff ff7c 	bl	8006452 <dwt_write16bitoffsetreg>
 800655a:	4d0a      	ldr	r5, [pc, #40]	; (8006584 <ull_aon_read+0x38>)
 800655c:	2388      	movs	r3, #136	; 0x88
 800655e:	2200      	movs	r2, #0
 8006560:	4629      	mov	r1, r5
 8006562:	4620      	mov	r0, r4
 8006564:	f7ff ff23 	bl	80063ae <dwt_write8bitoffsetreg>
 8006568:	2300      	movs	r3, #0
 800656a:	461a      	mov	r2, r3
 800656c:	4629      	mov	r1, r5
 800656e:	4620      	mov	r0, r4
 8006570:	f7ff ff1d 	bl	80063ae <dwt_write8bitoffsetreg>
 8006574:	2200      	movs	r2, #0
 8006576:	4904      	ldr	r1, [pc, #16]	; (8006588 <ull_aon_read+0x3c>)
 8006578:	4620      	mov	r0, r4
 800657a:	f7ff fb51 	bl	8005c20 <dwt_read8bitoffsetreg>
 800657e:	bd38      	pop	{r3, r4, r5, pc}
 8006580:	000a000c 	.word	0x000a000c
 8006584:	000a0004 	.word	0x000a0004
 8006588:	000a0008 	.word	0x000a0008

0800658c <ull_aon_write>:
 800658c:	b570      	push	{r4, r5, r6, lr}
 800658e:	4604      	mov	r4, r0
 8006590:	460b      	mov	r3, r1
 8006592:	4615      	mov	r5, r2
 8006594:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8006598:	bf34      	ite	cc
 800659a:	2600      	movcc	r6, #0
 800659c:	2620      	movcs	r6, #32
 800659e:	2200      	movs	r2, #0
 80065a0:	490b      	ldr	r1, [pc, #44]	; (80065d0 <ull_aon_write+0x44>)
 80065a2:	f7ff ff56 	bl	8006452 <dwt_write16bitoffsetreg>
 80065a6:	462b      	mov	r3, r5
 80065a8:	2200      	movs	r2, #0
 80065aa:	490a      	ldr	r1, [pc, #40]	; (80065d4 <ull_aon_write+0x48>)
 80065ac:	4620      	mov	r0, r4
 80065ae:	f7ff fefe 	bl	80063ae <dwt_write8bitoffsetreg>
 80065b2:	4d09      	ldr	r5, [pc, #36]	; (80065d8 <ull_aon_write+0x4c>)
 80065b4:	f046 0390 	orr.w	r3, r6, #144	; 0x90
 80065b8:	2200      	movs	r2, #0
 80065ba:	4629      	mov	r1, r5
 80065bc:	4620      	mov	r0, r4
 80065be:	f7ff fef6 	bl	80063ae <dwt_write8bitoffsetreg>
 80065c2:	2300      	movs	r3, #0
 80065c4:	461a      	mov	r2, r3
 80065c6:	4629      	mov	r1, r5
 80065c8:	4620      	mov	r0, r4
 80065ca:	f7ff fef0 	bl	80063ae <dwt_write8bitoffsetreg>
 80065ce:	bd70      	pop	{r4, r5, r6, pc}
 80065d0:	000a000c 	.word	0x000a000c
 80065d4:	000a0010 	.word	0x000a0010
 80065d8:	000a0004 	.word	0x000a0004

080065dc <ull_configuresleep>:
 80065dc:	b570      	push	{r4, r5, r6, lr}
 80065de:	4604      	mov	r4, r0
 80065e0:	460d      	mov	r5, r1
 80065e2:	4616      	mov	r6, r2
 80065e4:	2200      	movs	r2, #0
 80065e6:	f240 110b 	movw	r1, #267	; 0x10b
 80065ea:	f7ff ffcf 	bl	800658c <ull_aon_write>
 80065ee:	f44f 7182 	mov.w	r1, #260	; 0x104
 80065f2:	4620      	mov	r0, r4
 80065f4:	f7ff ffaa 	bl	800654c <ull_aon_read>
 80065f8:	f000 021f 	and.w	r2, r0, #31
 80065fc:	f44f 7182 	mov.w	r1, #260	; 0x104
 8006600:	4620      	mov	r0, r4
 8006602:	f7ff ffc3 	bl	800658c <ull_aon_write>
 8006606:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006608:	8a5a      	ldrh	r2, [r3, #18]
 800660a:	4315      	orrs	r5, r2
 800660c:	825d      	strh	r5, [r3, #18]
 800660e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006610:	8a5b      	ldrh	r3, [r3, #18]
 8006612:	2200      	movs	r2, #0
 8006614:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 8006618:	4620      	mov	r0, r4
 800661a:	f7ff ff1a 	bl	8006452 <dwt_write16bitoffsetreg>
 800661e:	4633      	mov	r3, r6
 8006620:	2200      	movs	r2, #0
 8006622:	4902      	ldr	r1, [pc, #8]	; (800662c <ull_configuresleep+0x50>)
 8006624:	4620      	mov	r0, r4
 8006626:	f7ff fec2 	bl	80063ae <dwt_write8bitoffsetreg>
 800662a:	bd70      	pop	{r4, r5, r6, pc}
 800662c:	000a0014 	.word	0x000a0014

08006630 <ull_signal_rx_buff_free>:
 8006630:	b510      	push	{r4, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	4604      	mov	r4, r0
 8006636:	2200      	movs	r2, #0
 8006638:	9200      	str	r2, [sp, #0]
 800663a:	4613      	mov	r3, r2
 800663c:	2113      	movs	r1, #19
 800663e:	f7ff feab 	bl	8006398 <dwt_writetodevice>
 8006642:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006644:	7bda      	ldrb	r2, [r3, #15]
 8006646:	2a03      	cmp	r2, #3
 8006648:	bf0c      	ite	eq
 800664a:	2201      	moveq	r2, #1
 800664c:	2203      	movne	r2, #3
 800664e:	73da      	strb	r2, [r3, #15]
 8006650:	b002      	add	sp, #8
 8006652:	bd10      	pop	{r4, pc}

08006654 <dwt_write32bitoffsetreg>:
 8006654:	b510      	push	{r4, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	f88d 300c 	strb.w	r3, [sp, #12]
 800665c:	0a1c      	lsrs	r4, r3, #8
 800665e:	f88d 400d 	strb.w	r4, [sp, #13]
 8006662:	0c1c      	lsrs	r4, r3, #16
 8006664:	f88d 400e 	strb.w	r4, [sp, #14]
 8006668:	0e1b      	lsrs	r3, r3, #24
 800666a:	f88d 300f 	strb.w	r3, [sp, #15]
 800666e:	ab03      	add	r3, sp, #12
 8006670:	9300      	str	r3, [sp, #0]
 8006672:	2304      	movs	r3, #4
 8006674:	b292      	uxth	r2, r2
 8006676:	f7ff fe8f 	bl	8006398 <dwt_writetodevice>
 800667a:	b004      	add	sp, #16
 800667c:	bd10      	pop	{r4, pc}
	...

08006680 <ull_isr>:
 8006680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006682:	4604      	mov	r4, r0
 8006684:	2200      	movs	r2, #0
 8006686:	f44f 11f8 	mov.w	r1, #2031616	; 0x1f0000
 800668a:	f7ff fac9 	bl	8005c20 <dwt_read8bitoffsetreg>
 800668e:	4605      	mov	r5, r0
 8006690:	2200      	movs	r2, #0
 8006692:	2144      	movs	r1, #68	; 0x44
 8006694:	4620      	mov	r0, r4
 8006696:	f7ff fa9b 	bl	8005bd0 <dwt_read32bitoffsetreg>
 800669a:	4606      	mov	r6, r0
 800669c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800669e:	2200      	movs	r2, #0
 80066a0:	845a      	strh	r2, [r3, #34]	; 0x22
 80066a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80066a6:	61da      	str	r2, [r3, #28]
 80066a8:	841a      	strh	r2, [r3, #32]
 80066aa:	629a      	str	r2, [r3, #40]	; 0x28
 80066ac:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80066ae:	629c      	str	r4, [r3, #40]	; 0x28
 80066b0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80066b2:	61d8      	str	r0, [r3, #28]
 80066b4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80066b6:	7dd3      	ldrb	r3, [r2, #23]
 80066b8:	f003 0303 	and.w	r3, r3, #3
 80066bc:	2b03      	cmp	r3, #3
 80066be:	d079      	beq.n	80067b4 <ull_isr+0x134>
 80066c0:	f416 6f80 	tst.w	r6, #1024	; 0x400
 80066c4:	d005      	beq.n	80066d2 <ull_isr+0x52>
 80066c6:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80066ca:	f043 0304 	orr.w	r3, r3, #4
 80066ce:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 80066d2:	f015 0f80 	tst.w	r5, #128	; 0x80
 80066d6:	d174      	bne.n	80067c2 <ull_isr+0x142>
 80066d8:	f015 0f01 	tst.w	r5, #1
 80066dc:	f040 80a3 	bne.w	8006826 <ull_isr+0x1a6>
 80066e0:	f015 0f40 	tst.w	r5, #64	; 0x40
 80066e4:	d00b      	beq.n	80066fe <ull_isr+0x7e>
 80066e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066e8:	b113      	cbz	r3, 80066f0 <ull_isr+0x70>
 80066ea:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80066ec:	301c      	adds	r0, #28
 80066ee:	4798      	blx	r3
 80066f0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80066f4:	2202      	movs	r2, #2
 80066f6:	2144      	movs	r1, #68	; 0x44
 80066f8:	4620      	mov	r0, r4
 80066fa:	f7ff feaa 	bl	8006452 <dwt_write16bitoffsetreg>
 80066fe:	f015 0f08 	tst.w	r5, #8
 8006702:	f000 80ea 	beq.w	80068da <ull_isr+0x25a>
 8006706:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006708:	2200      	movs	r2, #0
 800670a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800670e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006710:	7bdb      	ldrb	r3, [r3, #15]
 8006712:	2b00      	cmp	r3, #0
 8006714:	f040 8095 	bne.w	8006842 <ull_isr+0x1c2>
 8006718:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800671a:	61de      	str	r6, [r3, #28]
 800671c:	f416 2f80 	tst.w	r6, #262144	; 0x40000
 8006720:	f000 80a9 	beq.w	8006876 <ull_isr+0x1f6>
 8006724:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8006726:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 800672a:	f043 0308 	orr.w	r3, r3, #8
 800672e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8006732:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 8006736:	f016 5f80 	tst.w	r6, #268435456	; 0x10000000
 800673a:	d008      	beq.n	800674e <ull_isr+0xce>
 800673c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800673e:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8006742:	f043 0310 	orr.w	r3, r3, #16
 8006746:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 800674a:	f047 5780 	orr.w	r7, r7, #268435456	; 0x10000000
 800674e:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 8006752:	d006      	beq.n	8006762 <ull_isr+0xe2>
 8006754:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8006756:	7dd3      	ldrb	r3, [r2, #23]
 8006758:	f003 0303 	and.w	r3, r3, #3
 800675c:	2b03      	cmp	r3, #3
 800675e:	f000 8096 	beq.w	800688e <ull_isr+0x20e>
 8006762:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8006766:	f040 809e 	bne.w	80068a6 <ull_isr+0x226>
 800676a:	f447 43de 	orr.w	r3, r7, #28416	; 0x6f00
 800676e:	2200      	movs	r2, #0
 8006770:	2144      	movs	r1, #68	; 0x44
 8006772:	4620      	mov	r0, r4
 8006774:	f7ff ff6e 	bl	8006654 <dwt_write32bitoffsetreg>
 8006778:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800677a:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800677c:	2b00      	cmp	r3, #0
 800677e:	f040 80a1 	bne.w	80068c4 <ull_isr+0x244>
 8006782:	7dc3      	ldrb	r3, [r0, #23]
 8006784:	f003 0303 	and.w	r3, r3, #3
 8006788:	2b03      	cmp	r3, #3
 800678a:	f000 809b 	beq.w	80068c4 <ull_isr+0x244>
 800678e:	69c3      	ldr	r3, [r0, #28]
 8006790:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8006794:	61c3      	str	r3, [r0, #28]
 8006796:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8006798:	69d3      	ldr	r3, [r2, #28]
 800679a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800679e:	61d3      	str	r3, [r2, #28]
 80067a0:	69e3      	ldr	r3, [r4, #28]
 80067a2:	b113      	cbz	r3, 80067aa <ull_isr+0x12a>
 80067a4:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80067a6:	301c      	adds	r0, #28
 80067a8:	4798      	blx	r3
 80067aa:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80067ac:	2200      	movs	r2, #0
 80067ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80067b2:	e08b      	b.n	80068cc <ull_isr+0x24c>
 80067b4:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 80067b8:	bf1c      	itt	ne
 80067ba:	f045 0508 	orrne.w	r5, r5, #8
 80067be:	b2ed      	uxtbne	r5, r5
 80067c0:	e77e      	b.n	80066c0 <ull_isr+0x40>
 80067c2:	6d27      	ldr	r7, [r4, #80]	; 0x50
 80067c4:	2200      	movs	r2, #0
 80067c6:	2148      	movs	r1, #72	; 0x48
 80067c8:	4620      	mov	r0, r4
 80067ca:	f7ff fa17 	bl	8005bfc <dwt_read16bitoffsetreg>
 80067ce:	8438      	strh	r0, [r7, #32]
 80067d0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80067d2:	7d9a      	ldrb	r2, [r3, #22]
 80067d4:	b11a      	cbz	r2, 80067de <ull_isr+0x15e>
 80067d6:	69da      	ldr	r2, [r3, #28]
 80067d8:	f012 0f04 	tst.w	r2, #4
 80067dc:	d103      	bne.n	80067e6 <ull_isr+0x166>
 80067de:	8c1b      	ldrh	r3, [r3, #32]
 80067e0:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 80067e4:	b18b      	cbz	r3, 800680a <ull_isr+0x18a>
 80067e6:	2304      	movs	r3, #4
 80067e8:	2200      	movs	r2, #0
 80067ea:	2144      	movs	r1, #68	; 0x44
 80067ec:	4620      	mov	r0, r4
 80067ee:	f7ff fdde 	bl	80063ae <dwt_write8bitoffsetreg>
 80067f2:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 80067f6:	2200      	movs	r2, #0
 80067f8:	2148      	movs	r1, #72	; 0x48
 80067fa:	4620      	mov	r0, r4
 80067fc:	f7ff fe29 	bl	8006452 <dwt_write16bitoffsetreg>
 8006800:	6a23      	ldr	r3, [r4, #32]
 8006802:	b113      	cbz	r3, 800680a <ull_isr+0x18a>
 8006804:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8006806:	301c      	adds	r0, #28
 8006808:	4798      	blx	r3
 800680a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800680c:	8c1b      	ldrh	r3, [r3, #32]
 800680e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006812:	f43f af61 	beq.w	80066d8 <ull_isr+0x58>
 8006816:	f44f 7380 	mov.w	r3, #256	; 0x100
 800681a:	2200      	movs	r2, #0
 800681c:	2148      	movs	r1, #72	; 0x48
 800681e:	4620      	mov	r0, r4
 8006820:	f7ff fe17 	bl	8006452 <dwt_write16bitoffsetreg>
 8006824:	e758      	b.n	80066d8 <ull_isr+0x58>
 8006826:	23f8      	movs	r3, #248	; 0xf8
 8006828:	2200      	movs	r2, #0
 800682a:	2144      	movs	r1, #68	; 0x44
 800682c:	4620      	mov	r0, r4
 800682e:	f7ff fdbe 	bl	80063ae <dwt_write8bitoffsetreg>
 8006832:	6923      	ldr	r3, [r4, #16]
 8006834:	2b00      	cmp	r3, #0
 8006836:	f43f af53 	beq.w	80066e0 <ull_isr+0x60>
 800683a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800683c:	301c      	adds	r0, #28
 800683e:	4798      	blx	r3
 8006840:	e74e      	b.n	80066e0 <ull_isr+0x60>
 8006842:	493b      	ldr	r1, [pc, #236]	; (8006930 <ull_isr+0x2b0>)
 8006844:	4620      	mov	r0, r4
 8006846:	f7ff f9eb 	bl	8005c20 <dwt_read8bitoffsetreg>
 800684a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800684c:	7bdb      	ldrb	r3, [r3, #15]
 800684e:	2b03      	cmp	r3, #3
 8006850:	bf08      	it	eq
 8006852:	f3c0 1007 	ubfxeq	r0, r0, #4, #8
 8006856:	f010 0f01 	tst.w	r0, #1
 800685a:	bf18      	it	ne
 800685c:	f446 4680 	orrne.w	r6, r6, #16384	; 0x4000
 8006860:	f010 0f02 	tst.w	r0, #2
 8006864:	bf18      	it	ne
 8006866:	f446 5600 	orrne.w	r6, r6, #8192	; 0x2000
 800686a:	f010 0f04 	tst.w	r0, #4
 800686e:	bf18      	it	ne
 8006870:	f446 6680 	orrne.w	r6, r6, #1024	; 0x400
 8006874:	e750      	b.n	8006718 <ull_isr+0x98>
 8006876:	f416 6f80 	tst.w	r6, #1024	; 0x400
 800687a:	bf1f      	itttt	ne
 800687c:	6d22      	ldrne	r2, [r4, #80]	; 0x50
 800687e:	f892 3024 	ldrbne.w	r3, [r2, #36]	; 0x24
 8006882:	f043 0304 	orrne.w	r3, r3, #4
 8006886:	f882 3024 	strbne.w	r3, [r2, #36]	; 0x24
 800688a:	2700      	movs	r7, #0
 800688c:	e753      	b.n	8006736 <ull_isr+0xb6>
 800688e:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8006892:	f043 0302 	orr.w	r3, r3, #2
 8006896:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 800689a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800689c:	2200      	movs	r2, #0
 800689e:	845a      	strh	r2, [r3, #34]	; 0x22
 80068a0:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 80068a4:	e761      	b.n	800676a <ull_isr+0xea>
 80068a6:	4620      	mov	r0, r4
 80068a8:	f7ff fd8e 	bl	80063c8 <ull_getframelength>
 80068ac:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 80068b0:	f43f af5b 	beq.w	800676a <ull_isr+0xea>
 80068b4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80068b6:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80068ba:	f043 0301 	orr.w	r3, r3, #1
 80068be:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 80068c2:	e752      	b.n	800676a <ull_isr+0xea>
 80068c4:	6963      	ldr	r3, [r4, #20]
 80068c6:	b10b      	cbz	r3, 80068cc <ull_isr+0x24c>
 80068c8:	301c      	adds	r0, #28
 80068ca:	4798      	blx	r3
 80068cc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80068ce:	7bdb      	ldrb	r3, [r3, #15]
 80068d0:	b953      	cbnz	r3, 80068e8 <ull_isr+0x268>
 80068d2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80068da:	f015 0f10 	tst.w	r5, #16
 80068de:	d107      	bne.n	80068f0 <ull_isr+0x270>
 80068e0:	f015 0f20 	tst.w	r5, #32
 80068e4:	d114      	bne.n	8006910 <ull_isr+0x290>
 80068e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068e8:	4620      	mov	r0, r4
 80068ea:	f7ff fea1 	bl	8006630 <ull_signal_rx_buff_free>
 80068ee:	e7f0      	b.n	80068d2 <ull_isr+0x252>
 80068f0:	4b10      	ldr	r3, [pc, #64]	; (8006934 <ull_isr+0x2b4>)
 80068f2:	2200      	movs	r2, #0
 80068f4:	2144      	movs	r1, #68	; 0x44
 80068f6:	4620      	mov	r0, r4
 80068f8:	f7ff feac 	bl	8006654 <dwt_write32bitoffsetreg>
 80068fc:	69e3      	ldr	r3, [r4, #28]
 80068fe:	b113      	cbz	r3, 8006906 <ull_isr+0x286>
 8006900:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8006902:	301c      	adds	r0, #28
 8006904:	4798      	blx	r3
 8006906:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006908:	2200      	movs	r2, #0
 800690a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800690e:	e7e7      	b.n	80068e0 <ull_isr+0x260>
 8006910:	4b09      	ldr	r3, [pc, #36]	; (8006938 <ull_isr+0x2b8>)
 8006912:	2200      	movs	r2, #0
 8006914:	2144      	movs	r1, #68	; 0x44
 8006916:	4620      	mov	r0, r4
 8006918:	f7ff fe9c 	bl	8006654 <dwt_write32bitoffsetreg>
 800691c:	69a3      	ldr	r3, [r4, #24]
 800691e:	b113      	cbz	r3, 8006926 <ull_isr+0x2a6>
 8006920:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8006922:	301c      	adds	r0, #28
 8006924:	4798      	blx	r3
 8006926:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006928:	2200      	movs	r2, #0
 800692a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800692e:	e7da      	b.n	80068e6 <ull_isr+0x266>
 8006930:	00010024 	.word	0x00010024
 8006934:	34059400 	.word	0x34059400
 8006938:	10220400 	.word	0x10220400

0800693c <_dwt_adjust_delaytime>:
 800693c:	b538      	push	{r3, r4, r5, lr}
 800693e:	4604      	mov	r4, r0
 8006940:	b989      	cbnz	r1, 8006966 <_dwt_adjust_delaytime+0x2a>
 8006942:	2200      	movs	r2, #0
 8006944:	212c      	movs	r1, #44	; 0x2c
 8006946:	f7ff f943 	bl	8005bd0 <dwt_read32bitoffsetreg>
 800694a:	4605      	mov	r5, r0
 800694c:	2201      	movs	r2, #1
 800694e:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 8006952:	4620      	mov	r0, r4
 8006954:	f7ff f964 	bl	8005c20 <dwt_read8bitoffsetreg>
 8006958:	1a2b      	subs	r3, r5, r0
 800695a:	2200      	movs	r2, #0
 800695c:	212c      	movs	r1, #44	; 0x2c
 800695e:	4620      	mov	r0, r4
 8006960:	f7ff fe78 	bl	8006654 <dwt_write32bitoffsetreg>
 8006964:	bd38      	pop	{r3, r4, r5, pc}
 8006966:	2200      	movs	r2, #0
 8006968:	212c      	movs	r1, #44	; 0x2c
 800696a:	f7ff f931 	bl	8005bd0 <dwt_read32bitoffsetreg>
 800696e:	4605      	mov	r5, r0
 8006970:	2201      	movs	r2, #1
 8006972:	4905      	ldr	r1, [pc, #20]	; (8006988 <_dwt_adjust_delaytime+0x4c>)
 8006974:	4620      	mov	r0, r4
 8006976:	f7ff f953 	bl	8005c20 <dwt_read8bitoffsetreg>
 800697a:	1a2b      	subs	r3, r5, r0
 800697c:	2200      	movs	r2, #0
 800697e:	212c      	movs	r1, #44	; 0x2c
 8006980:	4620      	mov	r0, r4
 8006982:	f7ff fe67 	bl	8006654 <dwt_write32bitoffsetreg>
 8006986:	e7ed      	b.n	8006964 <_dwt_adjust_delaytime+0x28>
 8006988:	00010004 	.word	0x00010004

0800698c <ull_setrxaftertxdelay>:
 800698c:	b570      	push	{r4, r5, r6, lr}
 800698e:	4606      	mov	r6, r0
 8006990:	460c      	mov	r4, r1
 8006992:	4d08      	ldr	r5, [pc, #32]	; (80069b4 <ull_setrxaftertxdelay+0x28>)
 8006994:	2200      	movs	r2, #0
 8006996:	4629      	mov	r1, r5
 8006998:	f7ff f91a 	bl	8005bd0 <dwt_read32bitoffsetreg>
 800699c:	0d00      	lsrs	r0, r0, #20
 800699e:	0500      	lsls	r0, r0, #20
 80069a0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80069a4:	4303      	orrs	r3, r0
 80069a6:	2200      	movs	r2, #0
 80069a8:	4629      	mov	r1, r5
 80069aa:	4630      	mov	r0, r6
 80069ac:	f7ff fe52 	bl	8006654 <dwt_write32bitoffsetreg>
 80069b0:	bd70      	pop	{r4, r5, r6, pc}
 80069b2:	bf00      	nop
 80069b4:	00010008 	.word	0x00010008

080069b8 <ull_setlnapamode>:
 80069b8:	b538      	push	{r3, r4, r5, lr}
 80069ba:	4605      	mov	r5, r0
 80069bc:	460c      	mov	r4, r1
 80069be:	2200      	movs	r2, #0
 80069c0:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80069c4:	f7ff f904 	bl	8005bd0 <dwt_read32bitoffsetreg>
 80069c8:	4b0b      	ldr	r3, [pc, #44]	; (80069f8 <ull_setlnapamode+0x40>)
 80069ca:	4003      	ands	r3, r0
 80069cc:	f014 0f01 	tst.w	r4, #1
 80069d0:	bf18      	it	ne
 80069d2:	f443 2380 	orrne.w	r3, r3, #262144	; 0x40000
 80069d6:	f014 0f02 	tst.w	r4, #2
 80069da:	bf18      	it	ne
 80069dc:	f443 4310 	orrne.w	r3, r3, #36864	; 0x9000
 80069e0:	f014 0f04 	tst.w	r4, #4
 80069e4:	bf18      	it	ne
 80069e6:	f043 0312 	orrne.w	r3, r3, #18
 80069ea:	2200      	movs	r2, #0
 80069ec:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80069f0:	4628      	mov	r0, r5
 80069f2:	f7ff fe2f 	bl	8006654 <dwt_write32bitoffsetreg>
 80069f6:	bd38      	pop	{r3, r4, r5, pc}
 80069f8:	ffe00fc0 	.word	0xffe00fc0

080069fc <ull_configurestskey>:
 80069fc:	b538      	push	{r3, r4, r5, lr}
 80069fe:	4605      	mov	r5, r0
 8006a00:	460c      	mov	r4, r1
 8006a02:	680b      	ldr	r3, [r1, #0]
 8006a04:	2200      	movs	r2, #0
 8006a06:	490b      	ldr	r1, [pc, #44]	; (8006a34 <ull_configurestskey+0x38>)
 8006a08:	f7ff fe24 	bl	8006654 <dwt_write32bitoffsetreg>
 8006a0c:	6863      	ldr	r3, [r4, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	4909      	ldr	r1, [pc, #36]	; (8006a38 <ull_configurestskey+0x3c>)
 8006a12:	4628      	mov	r0, r5
 8006a14:	f7ff fe1e 	bl	8006654 <dwt_write32bitoffsetreg>
 8006a18:	68a3      	ldr	r3, [r4, #8]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	4907      	ldr	r1, [pc, #28]	; (8006a3c <ull_configurestskey+0x40>)
 8006a1e:	4628      	mov	r0, r5
 8006a20:	f7ff fe18 	bl	8006654 <dwt_write32bitoffsetreg>
 8006a24:	68e3      	ldr	r3, [r4, #12]
 8006a26:	2200      	movs	r2, #0
 8006a28:	4905      	ldr	r1, [pc, #20]	; (8006a40 <ull_configurestskey+0x44>)
 8006a2a:	4628      	mov	r0, r5
 8006a2c:	f7ff fe12 	bl	8006654 <dwt_write32bitoffsetreg>
 8006a30:	bd38      	pop	{r3, r4, r5, pc}
 8006a32:	bf00      	nop
 8006a34:	0002000c 	.word	0x0002000c
 8006a38:	00020010 	.word	0x00020010
 8006a3c:	00020014 	.word	0x00020014
 8006a40:	00020018 	.word	0x00020018

08006a44 <ull_configurestsiv>:
 8006a44:	b538      	push	{r3, r4, r5, lr}
 8006a46:	4605      	mov	r5, r0
 8006a48:	460c      	mov	r4, r1
 8006a4a:	680b      	ldr	r3, [r1, #0]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	490b      	ldr	r1, [pc, #44]	; (8006a7c <ull_configurestsiv+0x38>)
 8006a50:	f7ff fe00 	bl	8006654 <dwt_write32bitoffsetreg>
 8006a54:	6863      	ldr	r3, [r4, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	4909      	ldr	r1, [pc, #36]	; (8006a80 <ull_configurestsiv+0x3c>)
 8006a5a:	4628      	mov	r0, r5
 8006a5c:	f7ff fdfa 	bl	8006654 <dwt_write32bitoffsetreg>
 8006a60:	68a3      	ldr	r3, [r4, #8]
 8006a62:	2200      	movs	r2, #0
 8006a64:	4907      	ldr	r1, [pc, #28]	; (8006a84 <ull_configurestsiv+0x40>)
 8006a66:	4628      	mov	r0, r5
 8006a68:	f7ff fdf4 	bl	8006654 <dwt_write32bitoffsetreg>
 8006a6c:	68e3      	ldr	r3, [r4, #12]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	4905      	ldr	r1, [pc, #20]	; (8006a88 <ull_configurestsiv+0x44>)
 8006a72:	4628      	mov	r0, r5
 8006a74:	f7ff fdee 	bl	8006654 <dwt_write32bitoffsetreg>
 8006a78:	bd38      	pop	{r3, r4, r5, pc}
 8006a7a:	bf00      	nop
 8006a7c:	0002001c 	.word	0x0002001c
 8006a80:	00020020 	.word	0x00020020
 8006a84:	00020024 	.word	0x00020024
 8006a88:	00020028 	.word	0x00020028

08006a8c <ull_configmrxlut>:
 8006a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a90:	4604      	mov	r4, r0
 8006a92:	2905      	cmp	r1, #5
 8006a94:	d040      	beq.n	8006b18 <ull_configmrxlut+0x8c>
 8006a96:	4d26      	ldr	r5, [pc, #152]	; (8006b30 <ull_configmrxlut+0xa4>)
 8006a98:	462e      	mov	r6, r5
 8006a9a:	4f26      	ldr	r7, [pc, #152]	; (8006b34 <ull_configmrxlut+0xa8>)
 8006a9c:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8006b78 <ull_configmrxlut+0xec>
 8006aa0:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8006b7c <ull_configmrxlut+0xf0>
 8006aa4:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006b80 <ull_configmrxlut+0xf4>
 8006aa8:	4b23      	ldr	r3, [pc, #140]	; (8006b38 <ull_configmrxlut+0xac>)
 8006aaa:	2200      	movs	r2, #0
 8006aac:	4923      	ldr	r1, [pc, #140]	; (8006b3c <ull_configmrxlut+0xb0>)
 8006aae:	4620      	mov	r0, r4
 8006ab0:	f7ff fdd0 	bl	8006654 <dwt_write32bitoffsetreg>
 8006ab4:	4653      	mov	r3, sl
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	4921      	ldr	r1, [pc, #132]	; (8006b40 <ull_configmrxlut+0xb4>)
 8006aba:	4620      	mov	r0, r4
 8006abc:	f7ff fdca 	bl	8006654 <dwt_write32bitoffsetreg>
 8006ac0:	464b      	mov	r3, r9
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	491f      	ldr	r1, [pc, #124]	; (8006b44 <ull_configmrxlut+0xb8>)
 8006ac6:	4620      	mov	r0, r4
 8006ac8:	f7ff fdc4 	bl	8006654 <dwt_write32bitoffsetreg>
 8006acc:	4643      	mov	r3, r8
 8006ace:	2200      	movs	r2, #0
 8006ad0:	491d      	ldr	r1, [pc, #116]	; (8006b48 <ull_configmrxlut+0xbc>)
 8006ad2:	4620      	mov	r0, r4
 8006ad4:	f7ff fdbe 	bl	8006654 <dwt_write32bitoffsetreg>
 8006ad8:	463b      	mov	r3, r7
 8006ada:	2200      	movs	r2, #0
 8006adc:	491b      	ldr	r1, [pc, #108]	; (8006b4c <ull_configmrxlut+0xc0>)
 8006ade:	4620      	mov	r0, r4
 8006ae0:	f7ff fdb8 	bl	8006654 <dwt_write32bitoffsetreg>
 8006ae4:	4633      	mov	r3, r6
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	4919      	ldr	r1, [pc, #100]	; (8006b50 <ull_configmrxlut+0xc4>)
 8006aea:	4620      	mov	r0, r4
 8006aec:	f7ff fdb2 	bl	8006654 <dwt_write32bitoffsetreg>
 8006af0:	462b      	mov	r3, r5
 8006af2:	2200      	movs	r2, #0
 8006af4:	4917      	ldr	r1, [pc, #92]	; (8006b54 <ull_configmrxlut+0xc8>)
 8006af6:	4620      	mov	r0, r4
 8006af8:	f7ff fdac 	bl	8006654 <dwt_write32bitoffsetreg>
 8006afc:	4b16      	ldr	r3, [pc, #88]	; (8006b58 <ull_configmrxlut+0xcc>)
 8006afe:	2200      	movs	r2, #0
 8006b00:	4916      	ldr	r1, [pc, #88]	; (8006b5c <ull_configmrxlut+0xd0>)
 8006b02:	4620      	mov	r0, r4
 8006b04:	f7ff fda6 	bl	8006654 <dwt_write32bitoffsetreg>
 8006b08:	4b15      	ldr	r3, [pc, #84]	; (8006b60 <ull_configmrxlut+0xd4>)
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	4915      	ldr	r1, [pc, #84]	; (8006b64 <ull_configmrxlut+0xd8>)
 8006b0e:	4620      	mov	r0, r4
 8006b10:	f7ff fda0 	bl	8006654 <dwt_write32bitoffsetreg>
 8006b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b18:	4d13      	ldr	r5, [pc, #76]	; (8006b68 <ull_configmrxlut+0xdc>)
 8006b1a:	4e14      	ldr	r6, [pc, #80]	; (8006b6c <ull_configmrxlut+0xe0>)
 8006b1c:	4f14      	ldr	r7, [pc, #80]	; (8006b70 <ull_configmrxlut+0xe4>)
 8006b1e:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8006b84 <ull_configmrxlut+0xf8>
 8006b22:	f8df 9064 	ldr.w	r9, [pc, #100]	; 8006b88 <ull_configmrxlut+0xfc>
 8006b26:	f8df a064 	ldr.w	sl, [pc, #100]	; 8006b8c <ull_configmrxlut+0x100>
 8006b2a:	4b12      	ldr	r3, [pc, #72]	; (8006b74 <ull_configmrxlut+0xe8>)
 8006b2c:	e7bd      	b.n	8006aaa <ull_configmrxlut+0x1e>
 8006b2e:	bf00      	nop
 8006b30:	0002afb5 	.word	0x0002afb5
 8006b34:	0002af7d 	.word	0x0002af7d
 8006b38:	0002a8fe 	.word	0x0002a8fe
 8006b3c:	00030038 	.word	0x00030038
 8006b40:	0003003c 	.word	0x0003003c
 8006b44:	00030040 	.word	0x00030040
 8006b48:	00030044 	.word	0x00030044
 8006b4c:	00030048 	.word	0x00030048
 8006b50:	0003004c 	.word	0x0003004c
 8006b54:	00030050 	.word	0x00030050
 8006b58:	10000240 	.word	0x10000240
 8006b5c:	0003001c 	.word	0x0003001c
 8006b60:	1b6da489 	.word	0x1b6da489
 8006b64:	00030020 	.word	0x00030020
 8006b68:	0001cff5 	.word	0x0001cff5
 8006b6c:	0001cfb5 	.word	0x0001cfb5
 8006b70:	0001cf36 	.word	0x0001cf36
 8006b74:	0001c0fd 	.word	0x0001c0fd
 8006b78:	0002af3e 	.word	0x0002af3e
 8006b7c:	0002a5fe 	.word	0x0002a5fe
 8006b80:	0002ac36 	.word	0x0002ac36
 8006b84:	0001c77e 	.word	0x0001c77e
 8006b88:	0001c6be 	.word	0x0001c6be
 8006b8c:	0001c43e 	.word	0x0001c43e

08006b90 <ull_disable_rftx_blocks>:
 8006b90:	b508      	push	{r3, lr}
 8006b92:	2300      	movs	r3, #0
 8006b94:	461a      	mov	r2, r3
 8006b96:	4902      	ldr	r1, [pc, #8]	; (8006ba0 <ull_disable_rftx_blocks+0x10>)
 8006b98:	f7ff fd5c 	bl	8006654 <dwt_write32bitoffsetreg>
 8006b9c:	bd08      	pop	{r3, pc}
 8006b9e:	bf00      	nop
 8006ba0:	00070004 	.word	0x00070004

08006ba4 <ull_disable_rf_tx>:
 8006ba4:	b538      	push	{r3, r4, r5, lr}
 8006ba6:	4604      	mov	r4, r0
 8006ba8:	460d      	mov	r5, r1
 8006baa:	2300      	movs	r3, #0
 8006bac:	461a      	mov	r2, r3
 8006bae:	490a      	ldr	r1, [pc, #40]	; (8006bd8 <ull_disable_rf_tx+0x34>)
 8006bb0:	f7ff fd50 	bl	8006654 <dwt_write32bitoffsetreg>
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 8006bbc:	4620      	mov	r0, r4
 8006bbe:	f7ff fd49 	bl	8006654 <dwt_write32bitoffsetreg>
 8006bc2:	b905      	cbnz	r5, 8006bc6 <ull_disable_rf_tx+0x22>
 8006bc4:	bd38      	pop	{r3, r4, r5, pc}
 8006bc6:	f04f 53e0 	mov.w	r3, #469762048	; 0x1c000000
 8006bca:	2200      	movs	r2, #0
 8006bcc:	4903      	ldr	r1, [pc, #12]	; (8006bdc <ull_disable_rf_tx+0x38>)
 8006bce:	4620      	mov	r0, r4
 8006bd0:	f7ff fd40 	bl	8006654 <dwt_write32bitoffsetreg>
 8006bd4:	e7f6      	b.n	8006bc4 <ull_disable_rf_tx+0x20>
 8006bd6:	bf00      	nop
 8006bd8:	00070048 	.word	0x00070048
 8006bdc:	00070014 	.word	0x00070014

08006be0 <ull_readrxdata>:
 8006be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006be2:	b083      	sub	sp, #12
 8006be4:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8006be6:	7be4      	ldrb	r4, [r4, #15]
 8006be8:	2c03      	cmp	r4, #3
 8006bea:	bf0c      	ite	eq
 8006bec:	f44f 1c98 	moveq.w	ip, #1245184	; 0x130000
 8006bf0:	f44f 1c90 	movne.w	ip, #1179648	; 0x120000
 8006bf4:	189c      	adds	r4, r3, r2
 8006bf6:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8006bfa:	da19      	bge.n	8006c30 <ull_readrxdata+0x50>
 8006bfc:	461d      	mov	r5, r3
 8006bfe:	4616      	mov	r6, r2
 8006c00:	460f      	mov	r7, r1
 8006c02:	4604      	mov	r4, r0
 8006c04:	2b7f      	cmp	r3, #127	; 0x7f
 8006c06:	d915      	bls.n	8006c34 <ull_readrxdata+0x54>
 8006c08:	ea4f 431c 	mov.w	r3, ip, lsr #16
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	490d      	ldr	r1, [pc, #52]	; (8006c44 <ull_readrxdata+0x64>)
 8006c10:	f7ff fd20 	bl	8006654 <dwt_write32bitoffsetreg>
 8006c14:	462b      	mov	r3, r5
 8006c16:	2200      	movs	r2, #0
 8006c18:	490b      	ldr	r1, [pc, #44]	; (8006c48 <ull_readrxdata+0x68>)
 8006c1a:	4620      	mov	r0, r4
 8006c1c:	f7ff fd1a 	bl	8006654 <dwt_write32bitoffsetreg>
 8006c20:	9700      	str	r7, [sp, #0]
 8006c22:	4633      	mov	r3, r6
 8006c24:	2200      	movs	r2, #0
 8006c26:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 8006c2a:	4620      	mov	r0, r4
 8006c2c:	f7fe ffc6 	bl	8005bbc <dwt_readfromdevice>
 8006c30:	b003      	add	sp, #12
 8006c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c34:	9100      	str	r1, [sp, #0]
 8006c36:	4613      	mov	r3, r2
 8006c38:	462a      	mov	r2, r5
 8006c3a:	4661      	mov	r1, ip
 8006c3c:	f7fe ffbe 	bl	8005bbc <dwt_readfromdevice>
 8006c40:	e7f6      	b.n	8006c30 <ull_readrxdata+0x50>
 8006c42:	bf00      	nop
 8006c44:	001f0004 	.word	0x001f0004
 8006c48:	001f0008 	.word	0x001f0008

08006c4c <ull_rxenable>:
 8006c4c:	b530      	push	{r4, r5, lr}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	4605      	mov	r5, r0
 8006c52:	460c      	mov	r4, r1
 8006c54:	b171      	cbz	r1, 8006c74 <ull_rxenable+0x28>
 8006c56:	f021 0302 	bic.w	r3, r1, #2
 8006c5a:	3b01      	subs	r3, #1
 8006c5c:	2b0f      	cmp	r3, #15
 8006c5e:	d856      	bhi.n	8006d0e <ull_rxenable+0xc2>
 8006c60:	e8df f003 	tbb	[pc, r3]
 8006c64:	21555510 	.word	0x21555510
 8006c68:	28555555 	.word	0x28555555
 8006c6c:	55555555 	.word	0x55555555
 8006c70:	33555555 	.word	0x33555555
 8006c74:	2200      	movs	r2, #0
 8006c76:	9200      	str	r2, [sp, #0]
 8006c78:	4613      	mov	r3, r2
 8006c7a:	2102      	movs	r1, #2
 8006c7c:	f7ff fb8c 	bl	8006398 <dwt_writetodevice>
 8006c80:	4620      	mov	r0, r4
 8006c82:	e00e      	b.n	8006ca2 <ull_rxenable+0x56>
 8006c84:	2200      	movs	r2, #0
 8006c86:	9200      	str	r2, [sp, #0]
 8006c88:	4613      	mov	r3, r2
 8006c8a:	2104      	movs	r1, #4
 8006c8c:	f7ff fb84 	bl	8006398 <dwt_writetodevice>
 8006c90:	2203      	movs	r2, #3
 8006c92:	2144      	movs	r1, #68	; 0x44
 8006c94:	4628      	mov	r0, r5
 8006c96:	f7fe ffc3 	bl	8005c20 <dwt_read8bitoffsetreg>
 8006c9a:	f010 0f08 	tst.w	r0, #8
 8006c9e:	d11f      	bne.n	8006ce0 <ull_rxenable+0x94>
 8006ca0:	2000      	movs	r0, #0
 8006ca2:	b003      	add	sp, #12
 8006ca4:	bd30      	pop	{r4, r5, pc}
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	9200      	str	r2, [sp, #0]
 8006caa:	4613      	mov	r3, r2
 8006cac:	210a      	movs	r1, #10
 8006cae:	f7ff fb73 	bl	8006398 <dwt_writetodevice>
 8006cb2:	e7ed      	b.n	8006c90 <ull_rxenable+0x44>
 8006cb4:	2100      	movs	r1, #0
 8006cb6:	f7ff fe41 	bl	800693c <_dwt_adjust_delaytime>
 8006cba:	2200      	movs	r2, #0
 8006cbc:	9200      	str	r2, [sp, #0]
 8006cbe:	4613      	mov	r3, r2
 8006cc0:	2108      	movs	r1, #8
 8006cc2:	4628      	mov	r0, r5
 8006cc4:	f7ff fb68 	bl	8006398 <dwt_writetodevice>
 8006cc8:	e7e2      	b.n	8006c90 <ull_rxenable+0x44>
 8006cca:	2101      	movs	r1, #1
 8006ccc:	f7ff fe36 	bl	800693c <_dwt_adjust_delaytime>
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	9200      	str	r2, [sp, #0]
 8006cd4:	4613      	mov	r3, r2
 8006cd6:	2106      	movs	r1, #6
 8006cd8:	4628      	mov	r0, r5
 8006cda:	f7ff fb5d 	bl	8006398 <dwt_writetodevice>
 8006cde:	e7d7      	b.n	8006c90 <ull_rxenable+0x44>
 8006ce0:	2100      	movs	r1, #0
 8006ce2:	9100      	str	r1, [sp, #0]
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	460a      	mov	r2, r1
 8006ce8:	4628      	mov	r0, r5
 8006cea:	f7ff fb55 	bl	8006398 <dwt_writetodevice>
 8006cee:	f014 0f02 	tst.w	r4, #2
 8006cf2:	d002      	beq.n	8006cfa <ull_rxenable+0xae>
 8006cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8006cf8:	e7d3      	b.n	8006ca2 <ull_rxenable+0x56>
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	9200      	str	r2, [sp, #0]
 8006cfe:	4613      	mov	r3, r2
 8006d00:	2102      	movs	r1, #2
 8006d02:	4628      	mov	r0, r5
 8006d04:	f7ff fb48 	bl	8006398 <dwt_writetodevice>
 8006d08:	f04f 30ff 	mov.w	r0, #4294967295
 8006d0c:	e7c9      	b.n	8006ca2 <ull_rxenable+0x56>
 8006d0e:	f04f 30ff 	mov.w	r0, #4294967295
 8006d12:	e7c6      	b.n	8006ca2 <ull_rxenable+0x56>

08006d14 <ull_writetxdata>:
 8006d14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d16:	b083      	sub	sp, #12
 8006d18:	185c      	adds	r4, r3, r1
 8006d1a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8006d1e:	da24      	bge.n	8006d6a <ull_writetxdata+0x56>
 8006d20:	461c      	mov	r4, r3
 8006d22:	4617      	mov	r7, r2
 8006d24:	460e      	mov	r6, r1
 8006d26:	4605      	mov	r5, r0
 8006d28:	2b7f      	cmp	r3, #127	; 0x7f
 8006d2a:	d915      	bls.n	8006d58 <ull_writetxdata+0x44>
 8006d2c:	2314      	movs	r3, #20
 8006d2e:	2200      	movs	r2, #0
 8006d30:	490f      	ldr	r1, [pc, #60]	; (8006d70 <ull_writetxdata+0x5c>)
 8006d32:	f7ff fc8f 	bl	8006654 <dwt_write32bitoffsetreg>
 8006d36:	4623      	mov	r3, r4
 8006d38:	2200      	movs	r2, #0
 8006d3a:	490e      	ldr	r1, [pc, #56]	; (8006d74 <ull_writetxdata+0x60>)
 8006d3c:	4628      	mov	r0, r5
 8006d3e:	f7ff fc89 	bl	8006654 <dwt_write32bitoffsetreg>
 8006d42:	9700      	str	r7, [sp, #0]
 8006d44:	4633      	mov	r3, r6
 8006d46:	2200      	movs	r2, #0
 8006d48:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 8006d4c:	4628      	mov	r0, r5
 8006d4e:	f7ff fb23 	bl	8006398 <dwt_writetodevice>
 8006d52:	2000      	movs	r0, #0
 8006d54:	b003      	add	sp, #12
 8006d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d58:	9200      	str	r2, [sp, #0]
 8006d5a:	460b      	mov	r3, r1
 8006d5c:	4622      	mov	r2, r4
 8006d5e:	f44f 11a0 	mov.w	r1, #1310720	; 0x140000
 8006d62:	f7ff fb19 	bl	8006398 <dwt_writetodevice>
 8006d66:	2000      	movs	r0, #0
 8006d68:	e7f4      	b.n	8006d54 <ull_writetxdata+0x40>
 8006d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8006d6e:	e7f1      	b.n	8006d54 <ull_writetxdata+0x40>
 8006d70:	001f0004 	.word	0x001f0004
 8006d74:	001f0008 	.word	0x001f0008

08006d78 <dwt_modify32bitoffsetreg>:
 8006d78:	b530      	push	{r4, r5, lr}
 8006d7a:	b085      	sub	sp, #20
 8006d7c:	9c08      	ldr	r4, [sp, #32]
 8006d7e:	f88d 3008 	strb.w	r3, [sp, #8]
 8006d82:	0a1d      	lsrs	r5, r3, #8
 8006d84:	f88d 5009 	strb.w	r5, [sp, #9]
 8006d88:	0c1d      	lsrs	r5, r3, #16
 8006d8a:	f88d 500a 	strb.w	r5, [sp, #10]
 8006d8e:	0e1b      	lsrs	r3, r3, #24
 8006d90:	f88d 300b 	strb.w	r3, [sp, #11]
 8006d94:	f88d 400c 	strb.w	r4, [sp, #12]
 8006d98:	0a23      	lsrs	r3, r4, #8
 8006d9a:	f88d 300d 	strb.w	r3, [sp, #13]
 8006d9e:	0c23      	lsrs	r3, r4, #16
 8006da0:	f88d 300e 	strb.w	r3, [sp, #14]
 8006da4:	0e24      	lsrs	r4, r4, #24
 8006da6:	f88d 400f 	strb.w	r4, [sp, #15]
 8006daa:	f248 0303 	movw	r3, #32771	; 0x8003
 8006dae:	9301      	str	r3, [sp, #4]
 8006db0:	ab02      	add	r3, sp, #8
 8006db2:	9300      	str	r3, [sp, #0]
 8006db4:	2308      	movs	r3, #8
 8006db6:	b292      	uxth	r2, r2
 8006db8:	f7fe fe7d 	bl	8005ab6 <dwt_xfer3xxx>
 8006dbc:	b005      	add	sp, #20
 8006dbe:	bd30      	pop	{r4, r5, pc}

08006dc0 <_dwt_kick_dgc_on_wakeup>:
 8006dc0:	b500      	push	{lr}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	2905      	cmp	r1, #5
 8006dc6:	d004      	beq.n	8006dd2 <_dwt_kick_dgc_on_wakeup+0x12>
 8006dc8:	2909      	cmp	r1, #9
 8006dca:	d00b      	beq.n	8006de4 <_dwt_kick_dgc_on_wakeup+0x24>
 8006dcc:	b003      	add	sp, #12
 8006dce:	f85d fb04 	ldr.w	pc, [sp], #4
 8006dd2:	2340      	movs	r3, #64	; 0x40
 8006dd4:	9300      	str	r3, [sp, #0]
 8006dd6:	f46f 5300 	mvn.w	r3, #8192	; 0x2000
 8006dda:	2200      	movs	r2, #0
 8006ddc:	4906      	ldr	r1, [pc, #24]	; (8006df8 <_dwt_kick_dgc_on_wakeup+0x38>)
 8006dde:	f7ff ffcb 	bl	8006d78 <dwt_modify32bitoffsetreg>
 8006de2:	e7f3      	b.n	8006dcc <_dwt_kick_dgc_on_wakeup+0xc>
 8006de4:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8006de8:	9300      	str	r3, [sp, #0]
 8006dea:	f46f 5300 	mvn.w	r3, #8192	; 0x2000
 8006dee:	2200      	movs	r2, #0
 8006df0:	4901      	ldr	r1, [pc, #4]	; (8006df8 <_dwt_kick_dgc_on_wakeup+0x38>)
 8006df2:	f7ff ffc1 	bl	8006d78 <dwt_modify32bitoffsetreg>
 8006df6:	e7e9      	b.n	8006dcc <_dwt_kick_dgc_on_wakeup+0xc>
 8006df8:	000b0008 	.word	0x000b0008

08006dfc <ull_enable_rf_tx>:
 8006dfc:	b570      	push	{r4, r5, r6, lr}
 8006dfe:	b082      	sub	sp, #8
 8006e00:	4604      	mov	r4, r0
 8006e02:	460e      	mov	r6, r1
 8006e04:	4d13      	ldr	r5, [pc, #76]	; (8006e54 <ull_enable_rf_tx+0x58>)
 8006e06:	f04f 2308 	mov.w	r3, #134219776	; 0x8000800
 8006e0a:	9300      	str	r3, [sp, #0]
 8006e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8006e10:	2200      	movs	r2, #0
 8006e12:	4629      	mov	r1, r5
 8006e14:	f7ff ffb0 	bl	8006d78 <dwt_modify32bitoffsetreg>
 8006e18:	f04f 1360 	mov.w	r3, #6291552	; 0x600060
 8006e1c:	9300      	str	r3, [sp, #0]
 8006e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8006e22:	2200      	movs	r2, #0
 8006e24:	4629      	mov	r1, r5
 8006e26:	4620      	mov	r0, r4
 8006e28:	f7ff ffa6 	bl	8006d78 <dwt_modify32bitoffsetreg>
 8006e2c:	4b0a      	ldr	r3, [pc, #40]	; (8006e58 <ull_enable_rf_tx+0x5c>)
 8006e2e:	9300      	str	r3, [sp, #0]
 8006e30:	f04f 33ff 	mov.w	r3, #4294967295
 8006e34:	2200      	movs	r2, #0
 8006e36:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 8006e3a:	4620      	mov	r0, r4
 8006e3c:	f7ff ff9c 	bl	8006d78 <dwt_modify32bitoffsetreg>
 8006e40:	b90e      	cbnz	r6, 8006e46 <ull_enable_rf_tx+0x4a>
 8006e42:	b002      	add	sp, #8
 8006e44:	bd70      	pop	{r4, r5, r6, pc}
 8006e46:	4b05      	ldr	r3, [pc, #20]	; (8006e5c <ull_enable_rf_tx+0x60>)
 8006e48:	2200      	movs	r2, #0
 8006e4a:	4905      	ldr	r1, [pc, #20]	; (8006e60 <ull_enable_rf_tx+0x64>)
 8006e4c:	4620      	mov	r0, r4
 8006e4e:	f7ff fc01 	bl	8006654 <dwt_write32bitoffsetreg>
 8006e52:	e7f6      	b.n	8006e42 <ull_enable_rf_tx+0x46>
 8006e54:	00070048 	.word	0x00070048
 8006e58:	02003c00 	.word	0x02003c00
 8006e5c:	01011100 	.word	0x01011100
 8006e60:	00070014 	.word	0x00070014

08006e64 <ull_enable_rftx_blocks>:
 8006e64:	b500      	push	{lr}
 8006e66:	b083      	sub	sp, #12
 8006e68:	4b05      	ldr	r3, [pc, #20]	; (8006e80 <ull_enable_rftx_blocks+0x1c>)
 8006e6a:	9300      	str	r3, [sp, #0]
 8006e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8006e70:	2200      	movs	r2, #0
 8006e72:	4904      	ldr	r1, [pc, #16]	; (8006e84 <ull_enable_rftx_blocks+0x20>)
 8006e74:	f7ff ff80 	bl	8006d78 <dwt_modify32bitoffsetreg>
 8006e78:	b003      	add	sp, #12
 8006e7a:	f85d fb04 	ldr.w	pc, [sp], #4
 8006e7e:	bf00      	nop
 8006e80:	02003c00 	.word	0x02003c00
 8006e84:	00070004 	.word	0x00070004

08006e88 <_dwt_otpprogword32>:
 8006e88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006e8c:	b083      	sub	sp, #12
 8006e8e:	4604      	mov	r4, r0
 8006e90:	460d      	mov	r5, r1
 8006e92:	4617      	mov	r7, r2
 8006e94:	4e56      	ldr	r6, [pc, #344]	; (8006ff0 <_dwt_otpprogword32+0x168>)
 8006e96:	2200      	movs	r2, #0
 8006e98:	4631      	mov	r1, r6
 8006e9a:	f7fe fe99 	bl	8005bd0 <dwt_read32bitoffsetreg>
 8006e9e:	4681      	mov	r9, r0
 8006ea0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8006ea4:	9300      	str	r3, [sp, #0]
 8006ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8006eaa:	2200      	movs	r2, #0
 8006eac:	4631      	mov	r1, r6
 8006eae:	4620      	mov	r0, r4
 8006eb0:	f7ff ff62 	bl	8006d78 <dwt_modify32bitoffsetreg>
 8006eb4:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8006ff4 <_dwt_otpprogword32+0x16c>
 8006eb8:	2318      	movs	r3, #24
 8006eba:	2200      	movs	r2, #0
 8006ebc:	4641      	mov	r1, r8
 8006ebe:	4620      	mov	r0, r4
 8006ec0:	f7ff fac7 	bl	8006452 <dwt_write16bitoffsetreg>
 8006ec4:	2125      	movs	r1, #37	; 0x25
 8006ec6:	4620      	mov	r0, r4
 8006ec8:	f7ff fb0a 	bl	80064e0 <__dwt_otp_write_wdata_id_reg>
 8006ecc:	2102      	movs	r1, #2
 8006ece:	4620      	mov	r0, r4
 8006ed0:	f7ff fb06 	bl	80064e0 <__dwt_otp_write_wdata_id_reg>
 8006ed4:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
 8006ed8:	4620      	mov	r0, r4
 8006eda:	f7ff fb01 	bl	80064e0 <__dwt_otp_write_wdata_id_reg>
 8006ede:	b2f9      	uxtb	r1, r7
 8006ee0:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8006ee4:	4620      	mov	r0, r4
 8006ee6:	f7ff fafb 	bl	80064e0 <__dwt_otp_write_wdata_id_reg>
 8006eea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006eee:	4620      	mov	r0, r4
 8006ef0:	f7ff faf6 	bl	80064e0 <__dwt_otp_write_wdata_id_reg>
 8006ef4:	2100      	movs	r1, #0
 8006ef6:	4620      	mov	r0, r4
 8006ef8:	f7ff faf2 	bl	80064e0 <__dwt_otp_write_wdata_id_reg>
 8006efc:	2102      	movs	r1, #2
 8006efe:	4620      	mov	r0, r4
 8006f00:	f7ff faee 	bl	80064e0 <__dwt_otp_write_wdata_id_reg>
 8006f04:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8006f08:	4620      	mov	r0, r4
 8006f0a:	f7ff fae9 	bl	80064e0 <__dwt_otp_write_wdata_id_reg>
 8006f0e:	b2e9      	uxtb	r1, r5
 8006f10:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8006f14:	4620      	mov	r0, r4
 8006f16:	f7ff fae3 	bl	80064e0 <__dwt_otp_write_wdata_id_reg>
 8006f1a:	f3c5 2107 	ubfx	r1, r5, #8, #8
 8006f1e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8006f22:	4620      	mov	r0, r4
 8006f24:	f7ff fadc 	bl	80064e0 <__dwt_otp_write_wdata_id_reg>
 8006f28:	f3c5 4107 	ubfx	r1, r5, #16, #8
 8006f2c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8006f30:	4620      	mov	r0, r4
 8006f32:	f7ff fad5 	bl	80064e0 <__dwt_otp_write_wdata_id_reg>
 8006f36:	0e29      	lsrs	r1, r5, #24
 8006f38:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8006f3c:	4620      	mov	r0, r4
 8006f3e:	f7ff facf 	bl	80064e0 <__dwt_otp_write_wdata_id_reg>
 8006f42:	2100      	movs	r1, #0
 8006f44:	4620      	mov	r0, r4
 8006f46:	f7ff facb 	bl	80064e0 <__dwt_otp_write_wdata_id_reg>
 8006f4a:	213a      	movs	r1, #58	; 0x3a
 8006f4c:	4620      	mov	r0, r4
 8006f4e:	f7ff fac7 	bl	80064e0 <__dwt_otp_write_wdata_id_reg>
 8006f52:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006f56:	4620      	mov	r0, r4
 8006f58:	f7ff fac2 	bl	80064e0 <__dwt_otp_write_wdata_id_reg>
 8006f5c:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8006f60:	4620      	mov	r0, r4
 8006f62:	f7ff fabd 	bl	80064e0 <__dwt_otp_write_wdata_id_reg>
 8006f66:	2100      	movs	r1, #0
 8006f68:	4620      	mov	r0, r4
 8006f6a:	f7ff fab9 	bl	80064e0 <__dwt_otp_write_wdata_id_reg>
 8006f6e:	213a      	movs	r1, #58	; 0x3a
 8006f70:	4620      	mov	r0, r4
 8006f72:	f7ff fab5 	bl	80064e0 <__dwt_otp_write_wdata_id_reg>
 8006f76:	f240 1101 	movw	r1, #257	; 0x101
 8006f7a:	4620      	mov	r0, r4
 8006f7c:	f7ff fab0 	bl	80064e0 <__dwt_otp_write_wdata_id_reg>
 8006f80:	2302      	movs	r3, #2
 8006f82:	2200      	movs	r2, #0
 8006f84:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8006f88:	4620      	mov	r0, r4
 8006f8a:	f7ff fa62 	bl	8006452 <dwt_write16bitoffsetreg>
 8006f8e:	2300      	movs	r3, #0
 8006f90:	461a      	mov	r2, r3
 8006f92:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8006f96:	4620      	mov	r0, r4
 8006f98:	f7ff fa5b 	bl	8006452 <dwt_write16bitoffsetreg>
 8006f9c:	2002      	movs	r0, #2
 8006f9e:	f7f9 fab5 	bl	800050c <deca_sleep>
 8006fa2:	213a      	movs	r1, #58	; 0x3a
 8006fa4:	4620      	mov	r0, r4
 8006fa6:	f7ff fa9b 	bl	80064e0 <__dwt_otp_write_wdata_id_reg>
 8006faa:	f44f 7181 	mov.w	r1, #258	; 0x102
 8006fae:	4620      	mov	r0, r4
 8006fb0:	f7ff fa96 	bl	80064e0 <__dwt_otp_write_wdata_id_reg>
 8006fb4:	2302      	movs	r3, #2
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8006fbc:	4620      	mov	r0, r4
 8006fbe:	f7ff fa48 	bl	8006452 <dwt_write16bitoffsetreg>
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8006fca:	4620      	mov	r0, r4
 8006fcc:	f7ff fa41 	bl	8006452 <dwt_write16bitoffsetreg>
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	4641      	mov	r1, r8
 8006fd6:	4620      	mov	r0, r4
 8006fd8:	f7ff fa3b 	bl	8006452 <dwt_write16bitoffsetreg>
 8006fdc:	464b      	mov	r3, r9
 8006fde:	2200      	movs	r2, #0
 8006fe0:	4631      	mov	r1, r6
 8006fe2:	4620      	mov	r0, r4
 8006fe4:	f7ff fb36 	bl	8006654 <dwt_write32bitoffsetreg>
 8006fe8:	b003      	add	sp, #12
 8006fea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006fee:	bf00      	nop
 8006ff0:	00070044 	.word	0x00070044
 8006ff4:	000b0008 	.word	0x000b0008

08006ff8 <ull_setgpiomode>:
 8006ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ffa:	b083      	sub	sp, #12
 8006ffc:	2400      	movs	r4, #0
 8006ffe:	4623      	mov	r3, r4
 8007000:	2601      	movs	r6, #1
 8007002:	2707      	movs	r7, #7
 8007004:	e002      	b.n	800700c <ull_setgpiomode+0x14>
 8007006:	3401      	adds	r4, #1
 8007008:	2c09      	cmp	r4, #9
 800700a:	d009      	beq.n	8007020 <ull_setgpiomode+0x28>
 800700c:	fa06 f504 	lsl.w	r5, r6, r4
 8007010:	420d      	tst	r5, r1
 8007012:	d0f8      	beq.n	8007006 <ull_setgpiomode+0xe>
 8007014:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8007018:	fa07 f505 	lsl.w	r5, r7, r5
 800701c:	432b      	orrs	r3, r5
 800701e:	e7f2      	b.n	8007006 <ull_setgpiomode+0xe>
 8007020:	401a      	ands	r2, r3
 8007022:	9200      	str	r2, [sp, #0]
 8007024:	43db      	mvns	r3, r3
 8007026:	2200      	movs	r2, #0
 8007028:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800702c:	f7ff fea4 	bl	8006d78 <dwt_modify32bitoffsetreg>
 8007030:	b003      	add	sp, #12
 8007032:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007034 <ull_setinterrupt>:
 8007034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007038:	b082      	sub	sp, #8
 800703a:	4604      	mov	r4, r0
 800703c:	4688      	mov	r8, r1
 800703e:	4617      	mov	r7, r2
 8007040:	461d      	mov	r5, r3
 8007042:	f7f9 fa45 	bl	80004d0 <decamutexon>
 8007046:	4606      	mov	r6, r0
 8007048:	2d02      	cmp	r5, #2
 800704a:	d02d      	beq.n	80070a8 <ull_setinterrupt+0x74>
 800704c:	2d01      	cmp	r5, #1
 800704e:	d038      	beq.n	80070c2 <ull_setinterrupt+0x8e>
 8007050:	2500      	movs	r5, #0
 8007052:	9500      	str	r5, [sp, #0]
 8007054:	ea6f 0308 	mvn.w	r3, r8
 8007058:	462a      	mov	r2, r5
 800705a:	213c      	movs	r1, #60	; 0x3c
 800705c:	4620      	mov	r0, r4
 800705e:	f7ff fe8b 	bl	8006d78 <dwt_modify32bitoffsetreg>
 8007062:	9500      	str	r5, [sp, #0]
 8007064:	43fb      	mvns	r3, r7
 8007066:	462a      	mov	r2, r5
 8007068:	2140      	movs	r1, #64	; 0x40
 800706a:	4620      	mov	r0, r4
 800706c:	f7ff fe84 	bl	8006d78 <dwt_modify32bitoffsetreg>
 8007070:	2200      	movs	r2, #0
 8007072:	213c      	movs	r1, #60	; 0x3c
 8007074:	4620      	mov	r0, r4
 8007076:	f7fe fdab 	bl	8005bd0 <dwt_read32bitoffsetreg>
 800707a:	4603      	mov	r3, r0
 800707c:	2200      	movs	r2, #0
 800707e:	2144      	movs	r1, #68	; 0x44
 8007080:	4620      	mov	r0, r4
 8007082:	f7ff fae7 	bl	8006654 <dwt_write32bitoffsetreg>
 8007086:	2200      	movs	r2, #0
 8007088:	2140      	movs	r1, #64	; 0x40
 800708a:	4620      	mov	r0, r4
 800708c:	f7fe fda0 	bl	8005bd0 <dwt_read32bitoffsetreg>
 8007090:	4603      	mov	r3, r0
 8007092:	2200      	movs	r2, #0
 8007094:	2148      	movs	r1, #72	; 0x48
 8007096:	4620      	mov	r0, r4
 8007098:	f7ff fadc 	bl	8006654 <dwt_write32bitoffsetreg>
 800709c:	4630      	mov	r0, r6
 800709e:	f7f9 fa28 	bl	80004f2 <decamutexoff>
 80070a2:	b002      	add	sp, #8
 80070a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070a8:	4643      	mov	r3, r8
 80070aa:	2200      	movs	r2, #0
 80070ac:	213c      	movs	r1, #60	; 0x3c
 80070ae:	4620      	mov	r0, r4
 80070b0:	f7ff fad0 	bl	8006654 <dwt_write32bitoffsetreg>
 80070b4:	463b      	mov	r3, r7
 80070b6:	2200      	movs	r2, #0
 80070b8:	2140      	movs	r1, #64	; 0x40
 80070ba:	4620      	mov	r0, r4
 80070bc:	f7ff faca 	bl	8006654 <dwt_write32bitoffsetreg>
 80070c0:	e7d6      	b.n	8007070 <ull_setinterrupt+0x3c>
 80070c2:	f8cd 8000 	str.w	r8, [sp]
 80070c6:	f04f 33ff 	mov.w	r3, #4294967295
 80070ca:	2200      	movs	r2, #0
 80070cc:	213c      	movs	r1, #60	; 0x3c
 80070ce:	4620      	mov	r0, r4
 80070d0:	f7ff fe52 	bl	8006d78 <dwt_modify32bitoffsetreg>
 80070d4:	9700      	str	r7, [sp, #0]
 80070d6:	f04f 33ff 	mov.w	r3, #4294967295
 80070da:	2200      	movs	r2, #0
 80070dc:	2140      	movs	r1, #64	; 0x40
 80070de:	4620      	mov	r0, r4
 80070e0:	f7ff fe4a 	bl	8006d78 <dwt_modify32bitoffsetreg>
 80070e4:	e7c4      	b.n	8007070 <ull_setinterrupt+0x3c>
	...

080070e8 <ull_writetxfctrl>:
 80070e8:	b510      	push	{r4, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	4604      	mov	r4, r0
 80070ee:	2a7f      	cmp	r2, #127	; 0x7f
 80070f0:	d912      	bls.n	8007118 <ull_writetxfctrl+0x30>
 80070f2:	3280      	adds	r2, #128	; 0x80
 80070f4:	ea41 21c3 	orr.w	r1, r1, r3, lsl #11
 80070f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80070fc:	9100      	str	r1, [sp, #0]
 80070fe:	4b0c      	ldr	r3, [pc, #48]	; (8007130 <ull_writetxfctrl+0x48>)
 8007100:	2200      	movs	r2, #0
 8007102:	2124      	movs	r1, #36	; 0x24
 8007104:	f7ff fe38 	bl	8006d78 <dwt_modify32bitoffsetreg>
 8007108:	2200      	movs	r2, #0
 800710a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800710e:	4620      	mov	r0, r4
 8007110:	f7fe fd86 	bl	8005c20 <dwt_read8bitoffsetreg>
 8007114:	b002      	add	sp, #8
 8007116:	bd10      	pop	{r4, pc}
 8007118:	ea41 21c3 	orr.w	r1, r1, r3, lsl #11
 800711c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007120:	9100      	str	r1, [sp, #0]
 8007122:	4b03      	ldr	r3, [pc, #12]	; (8007130 <ull_writetxfctrl+0x48>)
 8007124:	2200      	movs	r2, #0
 8007126:	2124      	movs	r1, #36	; 0x24
 8007128:	f7ff fe26 	bl	8006d78 <dwt_modify32bitoffsetreg>
 800712c:	e7f2      	b.n	8007114 <ull_writetxfctrl+0x2c>
 800712e:	bf00      	nop
 8007130:	fc00f400 	.word	0xfc00f400

08007134 <prs_sys_status_and_or>:
 8007134:	b500      	push	{lr}
 8007136:	b083      	sub	sp, #12
 8007138:	9200      	str	r2, [sp, #0]
 800713a:	460b      	mov	r3, r1
 800713c:	2200      	movs	r2, #0
 800713e:	2144      	movs	r1, #68	; 0x44
 8007140:	f7ff fe1a 	bl	8006d78 <dwt_modify32bitoffsetreg>
 8007144:	2000      	movs	r0, #0
 8007146:	b003      	add	sp, #12
 8007148:	f85d fb04 	ldr.w	pc, [sp], #4

0800714c <dwt_modify8bitoffsetreg>:
 800714c:	b500      	push	{lr}
 800714e:	b085      	sub	sp, #20
 8007150:	f88d 300c 	strb.w	r3, [sp, #12]
 8007154:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8007158:	f88d 300d 	strb.w	r3, [sp, #13]
 800715c:	f248 0301 	movw	r3, #32769	; 0x8001
 8007160:	9301      	str	r3, [sp, #4]
 8007162:	ab03      	add	r3, sp, #12
 8007164:	9300      	str	r3, [sp, #0]
 8007166:	2302      	movs	r3, #2
 8007168:	b292      	uxth	r2, r2
 800716a:	f7fe fca4 	bl	8005ab6 <dwt_xfer3xxx>
 800716e:	b005      	add	sp, #20
 8007170:	f85d fb04 	ldr.w	pc, [sp], #4

08007174 <ull_configciadiag>:
 8007174:	b530      	push	{r4, r5, lr}
 8007176:	b083      	sub	sp, #12
 8007178:	4604      	mov	r4, r0
 800717a:	460d      	mov	r5, r1
 800717c:	f011 0f01 	tst.w	r1, #1
 8007180:	d015      	beq.n	80071ae <ull_configciadiag+0x3a>
 8007182:	2300      	movs	r3, #0
 8007184:	9300      	str	r3, [sp, #0]
 8007186:	23ef      	movs	r3, #239	; 0xef
 8007188:	2202      	movs	r2, #2
 800718a:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800718e:	f7ff ffdd 	bl	800714c <dwt_modify8bitoffsetreg>
 8007192:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007194:	761d      	strb	r5, [r3, #24]
 8007196:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007198:	7e1b      	ldrb	r3, [r3, #24]
 800719a:	085b      	lsrs	r3, r3, #1
 800719c:	d010      	beq.n	80071c0 <ull_configciadiag+0x4c>
 800719e:	086b      	lsrs	r3, r5, #1
 80071a0:	2200      	movs	r2, #0
 80071a2:	490e      	ldr	r1, [pc, #56]	; (80071dc <ull_configciadiag+0x68>)
 80071a4:	4620      	mov	r0, r4
 80071a6:	f7ff f902 	bl	80063ae <dwt_write8bitoffsetreg>
 80071aa:	b003      	add	sp, #12
 80071ac:	bd30      	pop	{r4, r5, pc}
 80071ae:	2310      	movs	r3, #16
 80071b0:	9300      	str	r3, [sp, #0]
 80071b2:	23ff      	movs	r3, #255	; 0xff
 80071b4:	2202      	movs	r2, #2
 80071b6:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 80071ba:	f7ff ffc7 	bl	800714c <dwt_modify8bitoffsetreg>
 80071be:	e7e8      	b.n	8007192 <ull_configciadiag+0x1e>
 80071c0:	2301      	movs	r3, #1
 80071c2:	9300      	str	r3, [sp, #0]
 80071c4:	23ff      	movs	r3, #255	; 0xff
 80071c6:	2200      	movs	r2, #0
 80071c8:	4904      	ldr	r1, [pc, #16]	; (80071dc <ull_configciadiag+0x68>)
 80071ca:	4620      	mov	r0, r4
 80071cc:	f7ff ffbe 	bl	800714c <dwt_modify8bitoffsetreg>
 80071d0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80071d2:	7e13      	ldrb	r3, [r2, #24]
 80071d4:	f043 0302 	orr.w	r3, r3, #2
 80071d8:	7613      	strb	r3, [r2, #24]
 80071da:	e7e6      	b.n	80071aa <ull_configciadiag+0x36>
 80071dc:	00010028 	.word	0x00010028

080071e0 <ull_calcbandwidthadj>:
 80071e0:	b570      	push	{r4, r5, r6, lr}
 80071e2:	b082      	sub	sp, #8
 80071e4:	4604      	mov	r4, r0
 80071e6:	460d      	mov	r5, r1
 80071e8:	2101      	movs	r1, #1
 80071ea:	f7ff f963 	bl	80064b4 <ull_force_clocks>
 80071ee:	2100      	movs	r1, #0
 80071f0:	4620      	mov	r0, r4
 80071f2:	f7ff fe03 	bl	8006dfc <ull_enable_rf_tx>
 80071f6:	4620      	mov	r0, r4
 80071f8:	f7ff fe34 	bl	8006e64 <ull_enable_rftx_blocks>
 80071fc:	f3c5 030b 	ubfx	r3, r5, #0, #12
 8007200:	2200      	movs	r2, #0
 8007202:	4915      	ldr	r1, [pc, #84]	; (8007258 <ull_calcbandwidthadj+0x78>)
 8007204:	4620      	mov	r0, r4
 8007206:	f7ff f924 	bl	8006452 <dwt_write16bitoffsetreg>
 800720a:	2303      	movs	r3, #3
 800720c:	9300      	str	r3, [sp, #0]
 800720e:	23ff      	movs	r3, #255	; 0xff
 8007210:	2200      	movs	r2, #0
 8007212:	4912      	ldr	r1, [pc, #72]	; (800725c <ull_calcbandwidthadj+0x7c>)
 8007214:	4620      	mov	r0, r4
 8007216:	f7ff ff99 	bl	800714c <dwt_modify8bitoffsetreg>
 800721a:	4e10      	ldr	r6, [pc, #64]	; (800725c <ull_calcbandwidthadj+0x7c>)
 800721c:	2500      	movs	r5, #0
 800721e:	462a      	mov	r2, r5
 8007220:	4631      	mov	r1, r6
 8007222:	4620      	mov	r0, r4
 8007224:	f7fe fcfc 	bl	8005c20 <dwt_read8bitoffsetreg>
 8007228:	f010 0f01 	tst.w	r0, #1
 800722c:	d1f7      	bne.n	800721e <ull_calcbandwidthadj+0x3e>
 800722e:	4620      	mov	r0, r4
 8007230:	f7ff fcae 	bl	8006b90 <ull_disable_rftx_blocks>
 8007234:	2100      	movs	r1, #0
 8007236:	4620      	mov	r0, r4
 8007238:	f7ff fcb4 	bl	8006ba4 <ull_disable_rf_tx>
 800723c:	2105      	movs	r1, #5
 800723e:	4620      	mov	r0, r4
 8007240:	f7ff f938 	bl	80064b4 <ull_force_clocks>
 8007244:	2200      	movs	r2, #0
 8007246:	4906      	ldr	r1, [pc, #24]	; (8007260 <ull_calcbandwidthadj+0x80>)
 8007248:	4620      	mov	r0, r4
 800724a:	f7fe fce9 	bl	8005c20 <dwt_read8bitoffsetreg>
 800724e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8007252:	b002      	add	sp, #8
 8007254:	bd70      	pop	{r4, r5, r6, pc}
 8007256:	bf00      	nop
 8007258:	0008001c 	.word	0x0008001c
 800725c:	00080010 	.word	0x00080010
 8007260:	0007001c 	.word	0x0007001c

08007264 <ull_configuretxrf>:
 8007264:	b538      	push	{r3, r4, r5, lr}
 8007266:	4605      	mov	r5, r0
 8007268:	460c      	mov	r4, r1
 800726a:	f8b1 1005 	ldrh.w	r1, [r1, #5]
 800726e:	b149      	cbz	r1, 8007284 <ull_configuretxrf+0x20>
 8007270:	f7ff ffb6 	bl	80071e0 <ull_calcbandwidthadj>
 8007274:	f8d4 3001 	ldr.w	r3, [r4, #1]
 8007278:	2200      	movs	r2, #0
 800727a:	4905      	ldr	r1, [pc, #20]	; (8007290 <ull_configuretxrf+0x2c>)
 800727c:	4628      	mov	r0, r5
 800727e:	f7ff f9e9 	bl	8006654 <dwt_write32bitoffsetreg>
 8007282:	bd38      	pop	{r3, r4, r5, pc}
 8007284:	7823      	ldrb	r3, [r4, #0]
 8007286:	2200      	movs	r2, #0
 8007288:	4902      	ldr	r1, [pc, #8]	; (8007294 <ull_configuretxrf+0x30>)
 800728a:	f7ff f890 	bl	80063ae <dwt_write8bitoffsetreg>
 800728e:	e7f1      	b.n	8007274 <ull_configuretxrf+0x10>
 8007290:	0001000c 	.word	0x0001000c
 8007294:	0007001c 	.word	0x0007001c

08007298 <ull_repeated_frames>:
 8007298:	b530      	push	{r4, r5, lr}
 800729a:	b083      	sub	sp, #12
 800729c:	4604      	mov	r4, r0
 800729e:	460d      	mov	r5, r1
 80072a0:	2310      	movs	r3, #16
 80072a2:	9300      	str	r3, [sp, #0]
 80072a4:	23ff      	movs	r3, #255	; 0xff
 80072a6:	2200      	movs	r2, #0
 80072a8:	4906      	ldr	r1, [pc, #24]	; (80072c4 <ull_repeated_frames+0x2c>)
 80072aa:	f7ff ff4f 	bl	800714c <dwt_modify8bitoffsetreg>
 80072ae:	462b      	mov	r3, r5
 80072b0:	2d02      	cmp	r5, #2
 80072b2:	bf38      	it	cc
 80072b4:	2302      	movcc	r3, #2
 80072b6:	2200      	movs	r2, #0
 80072b8:	212c      	movs	r1, #44	; 0x2c
 80072ba:	4620      	mov	r0, r4
 80072bc:	f7ff f9ca 	bl	8006654 <dwt_write32bitoffsetreg>
 80072c0:	b003      	add	sp, #12
 80072c2:	bd30      	pop	{r4, r5, pc}
 80072c4:	000f0024 	.word	0x000f0024

080072c8 <ull_setdwstate>:
 80072c8:	b530      	push	{r4, r5, lr}
 80072ca:	b083      	sub	sp, #12
 80072cc:	4604      	mov	r4, r0
 80072ce:	2901      	cmp	r1, #1
 80072d0:	d01d      	beq.n	800730e <ull_setdwstate+0x46>
 80072d2:	2902      	cmp	r1, #2
 80072d4:	d030      	beq.n	8007338 <ull_setdwstate+0x70>
 80072d6:	2301      	movs	r3, #1
 80072d8:	9300      	str	r3, [sp, #0]
 80072da:	23ff      	movs	r3, #255	; 0xff
 80072dc:	2200      	movs	r2, #0
 80072de:	4926      	ldr	r1, [pc, #152]	; (8007378 <ull_setdwstate+0xb0>)
 80072e0:	f7ff ff34 	bl	800714c <dwt_modify8bitoffsetreg>
 80072e4:	4d25      	ldr	r5, [pc, #148]	; (800737c <ull_setdwstate+0xb4>)
 80072e6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80072ea:	9300      	str	r3, [sp, #0]
 80072ec:	f46f 7380 	mvn.w	r3, #256	; 0x100
 80072f0:	2200      	movs	r2, #0
 80072f2:	4629      	mov	r1, r5
 80072f4:	4620      	mov	r0, r4
 80072f6:	f7ff fd3f 	bl	8006d78 <dwt_modify32bitoffsetreg>
 80072fa:	2300      	movs	r3, #0
 80072fc:	9300      	str	r3, [sp, #0]
 80072fe:	237f      	movs	r3, #127	; 0x7f
 8007300:	2202      	movs	r2, #2
 8007302:	4629      	mov	r1, r5
 8007304:	4620      	mov	r0, r4
 8007306:	f7ff ff21 	bl	800714c <dwt_modify8bitoffsetreg>
 800730a:	b003      	add	sp, #12
 800730c:	bd30      	pop	{r4, r5, pc}
 800730e:	2105      	movs	r1, #5
 8007310:	f7ff f8d0 	bl	80064b4 <ull_force_clocks>
 8007314:	f44f 7381 	mov.w	r3, #258	; 0x102
 8007318:	9300      	str	r3, [sp, #0]
 800731a:	f04f 33ff 	mov.w	r3, #4294967295
 800731e:	2200      	movs	r2, #0
 8007320:	4917      	ldr	r1, [pc, #92]	; (8007380 <ull_setdwstate+0xb8>)
 8007322:	4620      	mov	r0, r4
 8007324:	f7ff fd28 	bl	8006d78 <dwt_modify32bitoffsetreg>
 8007328:	2201      	movs	r2, #1
 800732a:	9200      	str	r2, [sp, #0]
 800732c:	23ff      	movs	r3, #255	; 0xff
 800732e:	4913      	ldr	r1, [pc, #76]	; (800737c <ull_setdwstate+0xb4>)
 8007330:	4620      	mov	r0, r4
 8007332:	f7ff ff0b 	bl	800714c <dwt_modify8bitoffsetreg>
 8007336:	e7e8      	b.n	800730a <ull_setdwstate+0x42>
 8007338:	2303      	movs	r3, #3
 800733a:	9300      	str	r3, [sp, #0]
 800733c:	23ff      	movs	r3, #255	; 0xff
 800733e:	2200      	movs	r2, #0
 8007340:	490d      	ldr	r1, [pc, #52]	; (8007378 <ull_setdwstate+0xb0>)
 8007342:	f7ff ff03 	bl	800714c <dwt_modify8bitoffsetreg>
 8007346:	4d0d      	ldr	r5, [pc, #52]	; (800737c <ull_setdwstate+0xb4>)
 8007348:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800734c:	9300      	str	r3, [sp, #0]
 800734e:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8007352:	2200      	movs	r2, #0
 8007354:	4629      	mov	r1, r5
 8007356:	4620      	mov	r0, r4
 8007358:	f7ff fd0e 	bl	8006d78 <dwt_modify32bitoffsetreg>
 800735c:	2300      	movs	r3, #0
 800735e:	9300      	str	r3, [sp, #0]
 8007360:	237f      	movs	r3, #127	; 0x7f
 8007362:	2202      	movs	r2, #2
 8007364:	4629      	mov	r1, r5
 8007366:	4620      	mov	r0, r4
 8007368:	f7ff fef0 	bl	800714c <dwt_modify8bitoffsetreg>
 800736c:	2105      	movs	r1, #5
 800736e:	4620      	mov	r0, r4
 8007370:	f7ff f8a0 	bl	80064b4 <ull_force_clocks>
 8007374:	e7c9      	b.n	800730a <ull_setdwstate+0x42>
 8007376:	bf00      	nop
 8007378:	00110004 	.word	0x00110004
 800737c:	00110008 	.word	0x00110008
 8007380:	00090008 	.word	0x00090008

08007384 <ull_configureframefilter>:
 8007384:	b530      	push	{r4, r5, lr}
 8007386:	b083      	sub	sp, #12
 8007388:	4605      	mov	r5, r0
 800738a:	2902      	cmp	r1, #2
 800738c:	d00e      	beq.n	80073ac <ull_configureframefilter+0x28>
 800738e:	2400      	movs	r4, #0
 8007390:	9400      	str	r4, [sp, #0]
 8007392:	23fe      	movs	r3, #254	; 0xfe
 8007394:	4622      	mov	r2, r4
 8007396:	2110      	movs	r1, #16
 8007398:	f7ff fed8 	bl	800714c <dwt_modify8bitoffsetreg>
 800739c:	4623      	mov	r3, r4
 800739e:	4622      	mov	r2, r4
 80073a0:	2114      	movs	r1, #20
 80073a2:	4628      	mov	r0, r5
 80073a4:	f7ff f855 	bl	8006452 <dwt_write16bitoffsetreg>
 80073a8:	b003      	add	sp, #12
 80073aa:	bd30      	pop	{r4, r5, pc}
 80073ac:	4614      	mov	r4, r2
 80073ae:	2301      	movs	r3, #1
 80073b0:	9300      	str	r3, [sp, #0]
 80073b2:	23ff      	movs	r3, #255	; 0xff
 80073b4:	2200      	movs	r2, #0
 80073b6:	2110      	movs	r1, #16
 80073b8:	f7ff fec8 	bl	800714c <dwt_modify8bitoffsetreg>
 80073bc:	4623      	mov	r3, r4
 80073be:	2200      	movs	r2, #0
 80073c0:	2114      	movs	r1, #20
 80073c2:	4628      	mov	r0, r5
 80073c4:	f7ff f845 	bl	8006452 <dwt_write16bitoffsetreg>
 80073c8:	e7ee      	b.n	80073a8 <ull_configureframefilter+0x24>
	...

080073cc <ull_run_pgfcal>:
 80073cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073d0:	b082      	sub	sp, #8
 80073d2:	4605      	mov	r5, r0
 80073d4:	4c29      	ldr	r4, [pc, #164]	; (800747c <ull_run_pgfcal+0xb0>)
 80073d6:	4b2a      	ldr	r3, [pc, #168]	; (8007480 <ull_run_pgfcal+0xb4>)
 80073d8:	2200      	movs	r2, #0
 80073da:	4621      	mov	r1, r4
 80073dc:	f7ff f93a 	bl	8006654 <dwt_write32bitoffsetreg>
 80073e0:	2310      	movs	r3, #16
 80073e2:	9300      	str	r3, [sp, #0]
 80073e4:	23ff      	movs	r3, #255	; 0xff
 80073e6:	2200      	movs	r2, #0
 80073e8:	4621      	mov	r1, r4
 80073ea:	4628      	mov	r0, r5
 80073ec:	f7ff feae 	bl	800714c <dwt_modify8bitoffsetreg>
 80073f0:	2403      	movs	r4, #3
 80073f2:	f04f 0814 	mov.w	r8, #20
 80073f6:	4f23      	ldr	r7, [pc, #140]	; (8007484 <ull_run_pgfcal+0xb8>)
 80073f8:	2600      	movs	r6, #0
 80073fa:	4640      	mov	r0, r8
 80073fc:	f7f9 f891 	bl	8000522 <deca_usleep>
 8007400:	4632      	mov	r2, r6
 8007402:	4639      	mov	r1, r7
 8007404:	4628      	mov	r0, r5
 8007406:	f7fe fc0b 	bl	8005c20 <dwt_read8bitoffsetreg>
 800740a:	2801      	cmp	r0, #1
 800740c:	d034      	beq.n	8007478 <ull_run_pgfcal+0xac>
 800740e:	1e63      	subs	r3, r4, #1
 8007410:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8007414:	d1f1      	bne.n	80073fa <ull_run_pgfcal+0x2e>
 8007416:	f06f 0402 	mvn.w	r4, #2
 800741a:	4e18      	ldr	r6, [pc, #96]	; (800747c <ull_run_pgfcal+0xb0>)
 800741c:	2300      	movs	r3, #0
 800741e:	461a      	mov	r2, r3
 8007420:	4631      	mov	r1, r6
 8007422:	4628      	mov	r0, r5
 8007424:	f7fe ffc3 	bl	80063ae <dwt_write8bitoffsetreg>
 8007428:	2301      	movs	r3, #1
 800742a:	2200      	movs	r2, #0
 800742c:	4915      	ldr	r1, [pc, #84]	; (8007484 <ull_run_pgfcal+0xb8>)
 800742e:	4628      	mov	r0, r5
 8007430:	f7fe ffbd 	bl	80063ae <dwt_write8bitoffsetreg>
 8007434:	2301      	movs	r3, #1
 8007436:	9300      	str	r3, [sp, #0]
 8007438:	23ff      	movs	r3, #255	; 0xff
 800743a:	2202      	movs	r2, #2
 800743c:	4631      	mov	r1, r6
 800743e:	4628      	mov	r0, r5
 8007440:	f7ff fe84 	bl	800714c <dwt_modify8bitoffsetreg>
 8007444:	2200      	movs	r2, #0
 8007446:	4910      	ldr	r1, [pc, #64]	; (8007488 <ull_run_pgfcal+0xbc>)
 8007448:	4628      	mov	r0, r5
 800744a:	f7fe fbc1 	bl	8005bd0 <dwt_read32bitoffsetreg>
 800744e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8007452:	4298      	cmp	r0, r3
 8007454:	bf08      	it	eq
 8007456:	f06f 0403 	mvneq.w	r4, #3
 800745a:	2200      	movs	r2, #0
 800745c:	490b      	ldr	r1, [pc, #44]	; (800748c <ull_run_pgfcal+0xc0>)
 800745e:	4628      	mov	r0, r5
 8007460:	f7fe fbb6 	bl	8005bd0 <dwt_read32bitoffsetreg>
 8007464:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8007468:	4298      	cmp	r0, r3
 800746a:	bf14      	ite	ne
 800746c:	4620      	movne	r0, r4
 800746e:	f06f 0004 	mvneq.w	r0, #4
 8007472:	b002      	add	sp, #8
 8007474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007478:	2400      	movs	r4, #0
 800747a:	e7ce      	b.n	800741a <ull_run_pgfcal+0x4e>
 800747c:	0004000c 	.word	0x0004000c
 8007480:	00020001 	.word	0x00020001
 8007484:	00040020 	.word	0x00040020
 8007488:	00040014 	.word	0x00040014
 800748c:	0004001c 	.word	0x0004001c

08007490 <prs_ack_enable>:
 8007490:	b500      	push	{lr}
 8007492:	b083      	sub	sp, #12
 8007494:	2900      	cmp	r1, #0
 8007496:	bf0b      	itete	eq
 8007498:	23ff      	moveq	r3, #255	; 0xff
 800749a:	23f7      	movne	r3, #247	; 0xf7
 800749c:	2200      	moveq	r2, #0
 800749e:	2208      	movne	r2, #8
 80074a0:	9200      	str	r2, [sp, #0]
 80074a2:	2201      	movs	r2, #1
 80074a4:	2110      	movs	r1, #16
 80074a6:	f7ff fe51 	bl	800714c <dwt_modify8bitoffsetreg>
 80074aa:	b003      	add	sp, #12
 80074ac:	f85d fb04 	ldr.w	pc, [sp], #4

080074b0 <dwt_modify16bitoffsetreg>:
 80074b0:	b510      	push	{r4, lr}
 80074b2:	b084      	sub	sp, #16
 80074b4:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 80074b8:	f88d 300c 	strb.w	r3, [sp, #12]
 80074bc:	0a1b      	lsrs	r3, r3, #8
 80074be:	f88d 300d 	strb.w	r3, [sp, #13]
 80074c2:	f88d 400e 	strb.w	r4, [sp, #14]
 80074c6:	0a24      	lsrs	r4, r4, #8
 80074c8:	f88d 400f 	strb.w	r4, [sp, #15]
 80074cc:	f248 0302 	movw	r3, #32770	; 0x8002
 80074d0:	9301      	str	r3, [sp, #4]
 80074d2:	ab03      	add	r3, sp, #12
 80074d4:	9300      	str	r3, [sp, #0]
 80074d6:	2304      	movs	r3, #4
 80074d8:	b292      	uxth	r2, r2
 80074da:	f7fe faec 	bl	8005ab6 <dwt_xfer3xxx>
 80074de:	b004      	add	sp, #16
 80074e0:	bd10      	pop	{r4, pc}
	...

080074e4 <_dwt_prog_ldo_and_bias_tune>:
 80074e4:	b510      	push	{r4, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	4604      	mov	r4, r0
 80074ea:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80074ee:	9300      	str	r3, [sp, #0]
 80074f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80074f4:	2200      	movs	r2, #0
 80074f6:	4907      	ldr	r1, [pc, #28]	; (8007514 <_dwt_prog_ldo_and_bias_tune+0x30>)
 80074f8:	f7ff ffda 	bl	80074b0 <dwt_modify16bitoffsetreg>
 80074fc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80074fe:	7a1b      	ldrb	r3, [r3, #8]
 8007500:	9300      	str	r3, [sp, #0]
 8007502:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8007506:	2200      	movs	r2, #0
 8007508:	4903      	ldr	r1, [pc, #12]	; (8007518 <_dwt_prog_ldo_and_bias_tune+0x34>)
 800750a:	4620      	mov	r0, r4
 800750c:	f7ff ffd0 	bl	80074b0 <dwt_modify16bitoffsetreg>
 8007510:	b002      	add	sp, #8
 8007512:	bd10      	pop	{r4, pc}
 8007514:	000b0008 	.word	0x000b0008
 8007518:	0011001f 	.word	0x0011001f

0800751c <ull_setleds>:
 800751c:	b530      	push	{r4, r5, lr}
 800751e:	b083      	sub	sp, #12
 8007520:	4604      	mov	r4, r0
 8007522:	f011 0f01 	tst.w	r1, #1
 8007526:	d01f      	beq.n	8007568 <ull_setleds+0x4c>
 8007528:	460d      	mov	r5, r1
 800752a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800752e:	9300      	str	r3, [sp, #0]
 8007530:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 8007534:	2200      	movs	r2, #0
 8007536:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800753a:	f7ff fc1d 	bl	8006d78 <dwt_modify32bitoffsetreg>
 800753e:	f44f 0304 	mov.w	r3, #8650752	; 0x840000
 8007542:	9300      	str	r3, [sp, #0]
 8007544:	f04f 33ff 	mov.w	r3, #4294967295
 8007548:	2200      	movs	r2, #0
 800754a:	4918      	ldr	r1, [pc, #96]	; (80075ac <ull_setleds+0x90>)
 800754c:	4620      	mov	r0, r4
 800754e:	f7ff fc13 	bl	8006d78 <dwt_modify32bitoffsetreg>
 8007552:	f015 0f02 	tst.w	r5, #2
 8007556:	d11a      	bne.n	800758e <ull_setleds+0x72>
 8007558:	f44f 7388 	mov.w	r3, #272	; 0x110
 800755c:	2200      	movs	r2, #0
 800755e:	4914      	ldr	r1, [pc, #80]	; (80075b0 <ull_setleds+0x94>)
 8007560:	4620      	mov	r0, r4
 8007562:	f7ff f877 	bl	8006654 <dwt_write32bitoffsetreg>
 8007566:	e010      	b.n	800758a <ull_setleds+0x6e>
 8007568:	2500      	movs	r5, #0
 800756a:	9500      	str	r5, [sp, #0]
 800756c:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 8007570:	462a      	mov	r2, r5
 8007572:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8007576:	f7ff fbff 	bl	8006d78 <dwt_modify32bitoffsetreg>
 800757a:	9500      	str	r5, [sp, #0]
 800757c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8007580:	462a      	mov	r2, r5
 8007582:	490b      	ldr	r1, [pc, #44]	; (80075b0 <ull_setleds+0x94>)
 8007584:	4620      	mov	r0, r4
 8007586:	f7ff ff93 	bl	80074b0 <dwt_modify16bitoffsetreg>
 800758a:	b003      	add	sp, #12
 800758c:	bd30      	pop	{r4, r5, pc}
 800758e:	4d08      	ldr	r5, [pc, #32]	; (80075b0 <ull_setleds+0x94>)
 8007590:	4b08      	ldr	r3, [pc, #32]	; (80075b4 <ull_setleds+0x98>)
 8007592:	2200      	movs	r2, #0
 8007594:	4629      	mov	r1, r5
 8007596:	4620      	mov	r0, r4
 8007598:	f7ff f85c 	bl	8006654 <dwt_write32bitoffsetreg>
 800759c:	f44f 7388 	mov.w	r3, #272	; 0x110
 80075a0:	2200      	movs	r2, #0
 80075a2:	4629      	mov	r1, r5
 80075a4:	4620      	mov	r0, r4
 80075a6:	f7ff f855 	bl	8006654 <dwt_write32bitoffsetreg>
 80075aa:	e7ee      	b.n	800758a <ull_setleds+0x6e>
 80075ac:	00110004 	.word	0x00110004
 80075b0:	00110016 	.word	0x00110016
 80075b4:	000f0110 	.word	0x000f0110

080075b8 <ull_pgf_cal>:
 80075b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075ba:	b083      	sub	sp, #12
 80075bc:	4604      	mov	r4, r0
 80075be:	2901      	cmp	r1, #1
 80075c0:	d009      	beq.n	80075d6 <ull_pgf_cal+0x1e>
 80075c2:	2014      	movs	r0, #20
 80075c4:	f7f8 ffad 	bl	8000522 <deca_usleep>
 80075c8:	4620      	mov	r0, r4
 80075ca:	f7ff feff 	bl	80073cc <ull_run_pgfcal>
 80075ce:	4605      	mov	r5, r0
 80075d0:	4628      	mov	r0, r5
 80075d2:	b003      	add	sp, #12
 80075d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075d6:	4e0f      	ldr	r6, [pc, #60]	; (8007614 <ull_pgf_cal+0x5c>)
 80075d8:	2200      	movs	r2, #0
 80075da:	4631      	mov	r1, r6
 80075dc:	f7fe fb0e 	bl	8005bfc <dwt_read16bitoffsetreg>
 80075e0:	4607      	mov	r7, r0
 80075e2:	f240 1305 	movw	r3, #261	; 0x105
 80075e6:	9300      	str	r3, [sp, #0]
 80075e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80075ec:	2200      	movs	r2, #0
 80075ee:	4631      	mov	r1, r6
 80075f0:	4620      	mov	r0, r4
 80075f2:	f7ff ff5d 	bl	80074b0 <dwt_modify16bitoffsetreg>
 80075f6:	2014      	movs	r0, #20
 80075f8:	f7f8 ff93 	bl	8000522 <deca_usleep>
 80075fc:	4620      	mov	r0, r4
 80075fe:	f7ff fee5 	bl	80073cc <ull_run_pgfcal>
 8007602:	4605      	mov	r5, r0
 8007604:	2200      	movs	r2, #0
 8007606:	9200      	str	r2, [sp, #0]
 8007608:	463b      	mov	r3, r7
 800760a:	4631      	mov	r1, r6
 800760c:	4620      	mov	r0, r4
 800760e:	f7ff ff4f 	bl	80074b0 <dwt_modify16bitoffsetreg>
 8007612:	e7dd      	b.n	80075d0 <ull_pgf_cal+0x18>
 8007614:	00070048 	.word	0x00070048

08007618 <ull_setgpiovalue>:
 8007618:	b500      	push	{lr}
 800761a:	b083      	sub	sp, #12
 800761c:	2a01      	cmp	r2, #1
 800761e:	d009      	beq.n	8007634 <ull_setgpiovalue+0x1c>
 8007620:	43cb      	mvns	r3, r1
 8007622:	2200      	movs	r2, #0
 8007624:	9200      	str	r2, [sp, #0]
 8007626:	b29b      	uxth	r3, r3
 8007628:	4906      	ldr	r1, [pc, #24]	; (8007644 <ull_setgpiovalue+0x2c>)
 800762a:	f7ff ff41 	bl	80074b0 <dwt_modify16bitoffsetreg>
 800762e:	b003      	add	sp, #12
 8007630:	f85d fb04 	ldr.w	pc, [sp], #4
 8007634:	9100      	str	r1, [sp, #0]
 8007636:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800763a:	2200      	movs	r2, #0
 800763c:	4901      	ldr	r1, [pc, #4]	; (8007644 <ull_setgpiovalue+0x2c>)
 800763e:	f7ff ff37 	bl	80074b0 <dwt_modify16bitoffsetreg>
 8007642:	e7f4      	b.n	800762e <ull_setgpiovalue+0x16>
 8007644:	0005000c 	.word	0x0005000c

08007648 <ull_readaccdata>:
 8007648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800764a:	b083      	sub	sp, #12
 800764c:	4604      	mov	r4, r0
 800764e:	460f      	mov	r7, r1
 8007650:	4616      	mov	r6, r2
 8007652:	461d      	mov	r5, r3
 8007654:	f248 0340 	movw	r3, #32832	; 0x8040
 8007658:	9300      	str	r3, [sp, #0]
 800765a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800765e:	2200      	movs	r2, #0
 8007660:	4918      	ldr	r1, [pc, #96]	; (80076c4 <ull_readaccdata+0x7c>)
 8007662:	f7ff ff25 	bl	80074b0 <dwt_modify16bitoffsetreg>
 8007666:	19aa      	adds	r2, r5, r6
 8007668:	f243 0301 	movw	r3, #12289	; 0x3001
 800766c:	429a      	cmp	r2, r3
 800766e:	dc15      	bgt.n	800769c <ull_readaccdata+0x54>
 8007670:	2d7f      	cmp	r5, #127	; 0x7f
 8007672:	d91d      	bls.n	80076b0 <ull_readaccdata+0x68>
 8007674:	2315      	movs	r3, #21
 8007676:	2200      	movs	r2, #0
 8007678:	4913      	ldr	r1, [pc, #76]	; (80076c8 <ull_readaccdata+0x80>)
 800767a:	4620      	mov	r0, r4
 800767c:	f7fe ffea 	bl	8006654 <dwt_write32bitoffsetreg>
 8007680:	462b      	mov	r3, r5
 8007682:	2200      	movs	r2, #0
 8007684:	4911      	ldr	r1, [pc, #68]	; (80076cc <ull_readaccdata+0x84>)
 8007686:	4620      	mov	r0, r4
 8007688:	f7fe ffe4 	bl	8006654 <dwt_write32bitoffsetreg>
 800768c:	9700      	str	r7, [sp, #0]
 800768e:	4633      	mov	r3, r6
 8007690:	2200      	movs	r2, #0
 8007692:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 8007696:	4620      	mov	r0, r4
 8007698:	f7fe fa90 	bl	8005bbc <dwt_readfromdevice>
 800769c:	2200      	movs	r2, #0
 800769e:	9200      	str	r2, [sp, #0]
 80076a0:	f647 73bf 	movw	r3, #32703	; 0x7fbf
 80076a4:	4907      	ldr	r1, [pc, #28]	; (80076c4 <ull_readaccdata+0x7c>)
 80076a6:	4620      	mov	r0, r4
 80076a8:	f7ff ff02 	bl	80074b0 <dwt_modify16bitoffsetreg>
 80076ac:	b003      	add	sp, #12
 80076ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076b0:	9700      	str	r7, [sp, #0]
 80076b2:	4633      	mov	r3, r6
 80076b4:	462a      	mov	r2, r5
 80076b6:	f44f 11a8 	mov.w	r1, #1376256	; 0x150000
 80076ba:	4620      	mov	r0, r4
 80076bc:	f7fe fa7e 	bl	8005bbc <dwt_readfromdevice>
 80076c0:	e7ec      	b.n	800769c <ull_readaccdata+0x54>
 80076c2:	bf00      	nop
 80076c4:	00110004 	.word	0x00110004
 80076c8:	001f0004 	.word	0x001f0004
 80076cc:	001f0008 	.word	0x001f0008

080076d0 <ull_repeated_cw>:
 80076d0:	b570      	push	{r4, r5, r6, lr}
 80076d2:	4606      	mov	r6, r0
 80076d4:	460c      	mov	r4, r1
 80076d6:	4615      	mov	r5, r2
 80076d8:	4b0e      	ldr	r3, [pc, #56]	; (8007714 <ull_repeated_cw+0x44>)
 80076da:	2202      	movs	r2, #2
 80076dc:	490e      	ldr	r1, [pc, #56]	; (8007718 <ull_repeated_cw+0x48>)
 80076de:	f7fe ffb9 	bl	8006654 <dwt_write32bitoffsetreg>
 80076e2:	2d0f      	cmp	r5, #15
 80076e4:	bfa8      	it	ge
 80076e6:	250f      	movge	r5, #15
 80076e8:	1e63      	subs	r3, r4, #1
 80076ea:	2b03      	cmp	r3, #3
 80076ec:	bf28      	it	cs
 80076ee:	2404      	movcs	r4, #4
 80076f0:	2310      	movs	r3, #16
 80076f2:	4123      	asrs	r3, r4
 80076f4:	2200      	movs	r2, #0
 80076f6:	4909      	ldr	r1, [pc, #36]	; (800771c <ull_repeated_cw+0x4c>)
 80076f8:	4630      	mov	r0, r6
 80076fa:	f7fe ffab 	bl	8006654 <dwt_write32bitoffsetreg>
 80076fe:	1e63      	subs	r3, r4, #1
 8007700:	009b      	lsls	r3, r3, #2
 8007702:	fa05 f303 	lsl.w	r3, r5, r3
 8007706:	2200      	movs	r2, #0
 8007708:	4905      	ldr	r1, [pc, #20]	; (8007720 <ull_repeated_cw+0x50>)
 800770a:	4630      	mov	r0, r6
 800770c:	f7fe ffa2 	bl	8006654 <dwt_write32bitoffsetreg>
 8007710:	bd70      	pop	{r4, r5, r6, pc}
 8007712:	bf00      	nop
 8007714:	00d20874 	.word	0x00d20874
 8007718:	00110010 	.word	0x00110010
 800771c:	00070028 	.word	0x00070028
 8007720:	00080018 	.word	0x00080018

08007724 <ull_configure>:
 8007724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007728:	b083      	sub	sp, #12
 800772a:	4604      	mov	r4, r0
 800772c:	460d      	mov	r5, r1
 800772e:	f891 9000 	ldrb.w	r9, [r1]
 8007732:	790b      	ldrb	r3, [r1, #4]
 8007734:	2b18      	cmp	r3, #24
 8007736:	d814      	bhi.n	8007762 <ull_configure+0x3e>
 8007738:	78cf      	ldrb	r7, [r1, #3]
 800773a:	2f18      	cmp	r7, #24
 800773c:	bf94      	ite	ls
 800773e:	2700      	movls	r7, #0
 8007740:	2701      	movhi	r7, #1
 8007742:	b2ff      	uxtb	r7, r7
 8007744:	79eb      	ldrb	r3, [r5, #7]
 8007746:	2b01      	cmp	r3, #1
 8007748:	bf0c      	ite	eq
 800774a:	2110      	moveq	r1, #16
 800774c:	2100      	movne	r1, #0
 800774e:	786b      	ldrb	r3, [r5, #1]
 8007750:	3b01      	subs	r3, #1
 8007752:	2b06      	cmp	r3, #6
 8007754:	d810      	bhi.n	8007778 <ull_configure+0x54>
 8007756:	e8df f003 	tbb	[pc, r3]
 800775a:	0f06      	.short	0x0f06
 800775c:	0f0c120f 	.word	0x0f0c120f
 8007760:	09          	.byte	0x09
 8007761:	00          	.byte	0x00
 8007762:	2701      	movs	r7, #1
 8007764:	e7ed      	b.n	8007742 <ull_configure+0x1e>
 8007766:	f04f 0a40 	mov.w	sl, #64	; 0x40
 800776a:	e00a      	b.n	8007782 <ull_configure+0x5e>
 800776c:	f04f 0a48 	mov.w	sl, #72	; 0x48
 8007770:	e007      	b.n	8007782 <ull_configure+0x5e>
 8007772:	f04f 0a80 	mov.w	sl, #128	; 0x80
 8007776:	e004      	b.n	8007782 <ull_configure+0x5e>
 8007778:	f44f 7a80 	mov.w	sl, #256	; 0x100
 800777c:	e001      	b.n	8007782 <ull_configure+0x5e>
 800777e:	f04f 0a20 	mov.w	sl, #32
 8007782:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8007784:	8a53      	ldrh	r3, [r2, #18]
 8007786:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800778a:	8253      	strh	r3, [r2, #18]
 800778c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800778e:	79ea      	ldrb	r2, [r5, #7]
 8007790:	731a      	strb	r2, [r3, #12]
 8007792:	7b2e      	ldrb	r6, [r5, #12]
 8007794:	1cb3      	adds	r3, r6, #2
 8007796:	2601      	movs	r6, #1
 8007798:	409e      	lsls	r6, r3
 800779a:	fa1f f886 	uxth.w	r8, r6
 800779e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80077a0:	4bc7      	ldr	r3, [pc, #796]	; (8007ac0 <ull_configure+0x39c>)
 80077a2:	fb03 f308 	mul.w	r3, r3, r8
 80077a6:	0bdb      	lsrs	r3, r3, #15
 80077a8:	8293      	strh	r3, [r2, #20]
 80077aa:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80077ac:	7aea      	ldrb	r2, [r5, #11]
 80077ae:	75da      	strb	r2, [r3, #23]
 80077b0:	7a2b      	ldrb	r3, [r5, #8]
 80077b2:	015b      	lsls	r3, r3, #5
 80077b4:	f003 0320 	and.w	r3, r3, #32
 80077b8:	7b6a      	ldrb	r2, [r5, #13]
 80077ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077be:	7aea      	ldrb	r2, [r5, #11]
 80077c0:	0312      	lsls	r2, r2, #12
 80077c2:	f402 4230 	and.w	r2, r2, #45056	; 0xb000
 80077c6:	4313      	orrs	r3, r2
 80077c8:	430b      	orrs	r3, r1
 80077ca:	9300      	str	r3, [sp, #0]
 80077cc:	4bbd      	ldr	r3, [pc, #756]	; (8007ac4 <ull_configure+0x3a0>)
 80077ce:	2200      	movs	r2, #0
 80077d0:	2110      	movs	r1, #16
 80077d2:	4620      	mov	r0, r4
 80077d4:	f7ff fad0 	bl	8006d78 <dwt_modify32bitoffsetreg>
 80077d8:	2f00      	cmp	r7, #0
 80077da:	f040 80f6 	bne.w	80079ca <ull_configure+0x2a6>
 80077de:	7aeb      	ldrb	r3, [r5, #11]
 80077e0:	b1f3      	cbz	r3, 8007820 <ull_configure+0xfc>
 80077e2:	7b6b      	ldrb	r3, [r5, #13]
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	f240 811c 	bls.w	8007a22 <ull_configure+0x2fe>
 80077ea:	7b2a      	ldrb	r2, [r5, #12]
 80077ec:	4bb6      	ldr	r3, [pc, #728]	; (8007ac8 <ull_configure+0x3a4>)
 80077ee:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80077f2:	0112      	lsls	r2, r2, #4
 80077f4:	0ad3      	lsrs	r3, r2, #11
 80077f6:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80077fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80077fe:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8007802:	bf28      	it	cs
 8007804:	3301      	addcs	r3, #1
 8007806:	b29b      	uxth	r3, r3
 8007808:	eb0a 0ac8 	add.w	sl, sl, r8, lsl #3
 800780c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007810:	9300      	str	r3, [sp, #0]
 8007812:	f64f 7380 	movw	r3, #65408	; 0xff80
 8007816:	2202      	movs	r2, #2
 8007818:	49ac      	ldr	r1, [pc, #688]	; (8007acc <ull_configure+0x3a8>)
 800781a:	4620      	mov	r0, r4
 800781c:	f7ff fe48 	bl	80074b0 <dwt_modify16bitoffsetreg>
 8007820:	2394      	movs	r3, #148	; 0x94
 8007822:	9300      	str	r3, [sp, #0]
 8007824:	4baa      	ldr	r3, [pc, #680]	; (8007ad0 <ull_configure+0x3ac>)
 8007826:	2200      	movs	r2, #0
 8007828:	49aa      	ldr	r1, [pc, #680]	; (8007ad4 <ull_configure+0x3b0>)
 800782a:	4620      	mov	r0, r4
 800782c:	f7ff faa4 	bl	8006d78 <dwt_modify32bitoffsetreg>
 8007830:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8007834:	f340 8108 	ble.w	8007a48 <ull_configure+0x324>
 8007838:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800783a:	8a53      	ldrh	r3, [r2, #18]
 800783c:	f043 0320 	orr.w	r3, r3, #32
 8007840:	8253      	strh	r3, [r2, #18]
 8007842:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007846:	9300      	str	r3, [sp, #0]
 8007848:	f24e 73ff 	movw	r3, #59391	; 0xe7ff
 800784c:	2200      	movs	r2, #0
 800784e:	49a2      	ldr	r1, [pc, #648]	; (8007ad8 <ull_configure+0x3b4>)
 8007850:	4620      	mov	r0, r4
 8007852:	f7ff fe2d 	bl	80074b0 <dwt_modify16bitoffsetreg>
 8007856:	7b6b      	ldrb	r3, [r5, #13]
 8007858:	2b01      	cmp	r3, #1
 800785a:	f000 8100 	beq.w	8007a5e <ull_configure+0x33a>
 800785e:	78ab      	ldrb	r3, [r5, #2]
 8007860:	f043 0310 	orr.w	r3, r3, #16
 8007864:	9300      	str	r3, [sp, #0]
 8007866:	23fc      	movs	r3, #252	; 0xfc
 8007868:	2200      	movs	r2, #0
 800786a:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800786e:	4620      	mov	r0, r4
 8007870:	f7ff fc6c 	bl	800714c <dwt_modify8bitoffsetreg>
 8007874:	1e73      	subs	r3, r6, #1
 8007876:	b2db      	uxtb	r3, r3
 8007878:	2200      	movs	r2, #0
 800787a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800787e:	4620      	mov	r0, r4
 8007880:	f7fe fd95 	bl	80063ae <dwt_write8bitoffsetreg>
 8007884:	786b      	ldrb	r3, [r5, #1]
 8007886:	2b07      	cmp	r3, #7
 8007888:	bf0c      	ite	eq
 800788a:	2308      	moveq	r3, #8
 800788c:	2300      	movne	r3, #0
 800788e:	2201      	movs	r2, #1
 8007890:	2128      	movs	r1, #40	; 0x28
 8007892:	4620      	mov	r0, r4
 8007894:	f7fe fd8b 	bl	80063ae <dwt_write8bitoffsetreg>
 8007898:	4b90      	ldr	r3, [pc, #576]	; (8007adc <ull_configure+0x3b8>)
 800789a:	2200      	movs	r2, #0
 800789c:	4990      	ldr	r1, [pc, #576]	; (8007ae0 <ull_configure+0x3bc>)
 800789e:	4620      	mov	r0, r4
 80078a0:	f7fe fed8 	bl	8006654 <dwt_write32bitoffsetreg>
 80078a4:	2200      	movs	r2, #0
 80078a6:	498f      	ldr	r1, [pc, #572]	; (8007ae4 <ull_configure+0x3c0>)
 80078a8:	4620      	mov	r0, r4
 80078aa:	f7fe f991 	bl	8005bd0 <dwt_read32bitoffsetreg>
 80078ae:	f420 50ff 	bic.w	r0, r0, #8160	; 0x1fe0
 80078b2:	f020 001f 	bic.w	r0, r0, #31
 80078b6:	f1b9 0f09 	cmp.w	r9, #9
 80078ba:	bf08      	it	eq
 80078bc:	f040 0001 	orreq.w	r0, r0, #1
 80078c0:	792a      	ldrb	r2, [r5, #4]
 80078c2:	0212      	lsls	r2, r2, #8
 80078c4:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
 80078c8:	78eb      	ldrb	r3, [r5, #3]
 80078ca:	00db      	lsls	r3, r3, #3
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	431a      	orrs	r2, r3
 80078d0:	796b      	ldrb	r3, [r5, #5]
 80078d2:	005b      	lsls	r3, r3, #1
 80078d4:	f003 0306 	and.w	r3, r3, #6
 80078d8:	4313      	orrs	r3, r2
 80078da:	4303      	orrs	r3, r0
 80078dc:	2200      	movs	r2, #0
 80078de:	4981      	ldr	r1, [pc, #516]	; (8007ae4 <ull_configure+0x3c0>)
 80078e0:	4620      	mov	r0, r4
 80078e2:	f7fe feb7 	bl	8006654 <dwt_write32bitoffsetreg>
 80078e6:	79aa      	ldrb	r2, [r5, #6]
 80078e8:	786b      	ldrb	r3, [r5, #1]
 80078ea:	031b      	lsls	r3, r3, #12
 80078ec:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 80078f0:	9300      	str	r3, [sp, #0]
 80078f2:	f46f 4374 	mvn.w	r3, #62464	; 0xf400
 80078f6:	2200      	movs	r2, #0
 80078f8:	2124      	movs	r1, #36	; 0x24
 80078fa:	4620      	mov	r0, r4
 80078fc:	f7ff fa3c 	bl	8006d78 <dwt_modify32bitoffsetreg>
 8007900:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 8007904:	b923      	cbnz	r3, 8007910 <ull_configure+0x1ec>
 8007906:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 800790a:	726b      	strb	r3, [r5, #9]
 800790c:	2300      	movs	r3, #0
 800790e:	72ab      	strb	r3, [r5, #10]
 8007910:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 8007914:	2202      	movs	r2, #2
 8007916:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800791a:	4620      	mov	r0, r4
 800791c:	f7fe fd99 	bl	8006452 <dwt_write16bitoffsetreg>
 8007920:	2202      	movs	r2, #2
 8007922:	4971      	ldr	r1, [pc, #452]	; (8007ae8 <ull_configure+0x3c4>)
 8007924:	4620      	mov	r0, r4
 8007926:	f7fe f97b 	bl	8005c20 <dwt_read8bitoffsetreg>
 800792a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800792c:	7c1b      	ldrb	r3, [r3, #16]
 800792e:	454b      	cmp	r3, r9
 8007930:	f000 809f 	beq.w	8007a72 <ull_configure+0x34e>
 8007934:	2803      	cmp	r0, #3
 8007936:	f000 80a0 	beq.w	8007a7a <ull_configure+0x356>
 800793a:	f1b9 0f09 	cmp.w	r9, #9
 800793e:	f000 80a1 	beq.w	8007a84 <ull_configure+0x360>
 8007942:	4b6a      	ldr	r3, [pc, #424]	; (8007aec <ull_configure+0x3c8>)
 8007944:	2200      	movs	r2, #0
 8007946:	496a      	ldr	r1, [pc, #424]	; (8007af0 <ull_configure+0x3cc>)
 8007948:	4620      	mov	r0, r4
 800794a:	f7fe fe83 	bl	8006654 <dwt_write32bitoffsetreg>
 800794e:	f641 733c 	movw	r3, #7996	; 0x1f3c
 8007952:	2200      	movs	r2, #0
 8007954:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 8007958:	4620      	mov	r0, r4
 800795a:	f7fe fd7a 	bl	8006452 <dwt_write16bitoffsetreg>
 800795e:	2314      	movs	r3, #20
 8007960:	2201      	movs	r2, #1
 8007962:	4964      	ldr	r1, [pc, #400]	; (8007af4 <ull_configure+0x3d0>)
 8007964:	4620      	mov	r0, r4
 8007966:	f7fe fd22 	bl	80063ae <dwt_write8bitoffsetreg>
 800796a:	230e      	movs	r3, #14
 800796c:	2202      	movs	r2, #2
 800796e:	4962      	ldr	r1, [pc, #392]	; (8007af8 <ull_configure+0x3d4>)
 8007970:	4620      	mov	r0, r4
 8007972:	f7fe fd1c 	bl	80063ae <dwt_write8bitoffsetreg>
 8007976:	2381      	movs	r3, #129	; 0x81
 8007978:	2200      	movs	r2, #0
 800797a:	4960      	ldr	r1, [pc, #384]	; (8007afc <ull_configure+0x3d8>)
 800797c:	4620      	mov	r0, r4
 800797e:	f7fe fd16 	bl	80063ae <dwt_write8bitoffsetreg>
 8007982:	2302      	movs	r3, #2
 8007984:	2200      	movs	r2, #0
 8007986:	2144      	movs	r1, #68	; 0x44
 8007988:	4620      	mov	r0, r4
 800798a:	f7fe fd10 	bl	80063ae <dwt_write8bitoffsetreg>
 800798e:	2101      	movs	r1, #1
 8007990:	4620      	mov	r0, r4
 8007992:	f7ff fc99 	bl	80072c8 <ull_setdwstate>
 8007996:	f04f 0b32 	mov.w	fp, #50	; 0x32
 800799a:	f04f 0814 	mov.w	r8, #20
 800799e:	2700      	movs	r7, #0
 80079a0:	2644      	movs	r6, #68	; 0x44
 80079a2:	4640      	mov	r0, r8
 80079a4:	f7f8 fdbd 	bl	8000522 <deca_usleep>
 80079a8:	463a      	mov	r2, r7
 80079aa:	4631      	mov	r1, r6
 80079ac:	4620      	mov	r0, r4
 80079ae:	f7fe f937 	bl	8005c20 <dwt_read8bitoffsetreg>
 80079b2:	f010 0f02 	tst.w	r0, #2
 80079b6:	f040 80ab 	bne.w	8007b10 <ull_configure+0x3ec>
 80079ba:	f10b 33ff 	add.w	r3, fp, #4294967295
 80079be:	f013 0bff 	ands.w	fp, r3, #255	; 0xff
 80079c2:	d1ee      	bne.n	80079a2 <ull_configure+0x27e>
 80079c4:	f06f 0001 	mvn.w	r0, #1
 80079c8:	e0cf      	b.n	8007b6a <ull_configure+0x446>
 80079ca:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80079cc:	8a53      	ldrh	r3, [r2, #18]
 80079ce:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80079d2:	8253      	strh	r3, [r2, #18]
 80079d4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80079d8:	9300      	str	r3, [sp, #0]
 80079da:	f46f 53c0 	mvn.w	r3, #6144	; 0x1800
 80079de:	2200      	movs	r2, #0
 80079e0:	493d      	ldr	r1, [pc, #244]	; (8007ad8 <ull_configure+0x3b4>)
 80079e2:	4620      	mov	r0, r4
 80079e4:	f7ff f9c8 	bl	8006d78 <dwt_modify32bitoffsetreg>
 80079e8:	f240 3306 	movw	r3, #774	; 0x306
 80079ec:	2200      	movs	r2, #0
 80079ee:	4944      	ldr	r1, [pc, #272]	; (8007b00 <ull_configure+0x3dc>)
 80079f0:	4620      	mov	r0, r4
 80079f2:	f7fe fe2f 	bl	8006654 <dwt_write32bitoffsetreg>
 80079f6:	2300      	movs	r3, #0
 80079f8:	461a      	mov	r2, r3
 80079fa:	f04f 110e 	mov.w	r1, #917518	; 0xe000e
 80079fe:	4620      	mov	r0, r4
 8007a00:	f7fe fe28 	bl	8006654 <dwt_write32bitoffsetreg>
 8007a04:	4b3f      	ldr	r3, [pc, #252]	; (8007b04 <ull_configure+0x3e0>)
 8007a06:	2200      	movs	r2, #0
 8007a08:	4930      	ldr	r1, [pc, #192]	; (8007acc <ull_configure+0x3a8>)
 8007a0a:	4620      	mov	r0, r4
 8007a0c:	f7fe fe22 	bl	8006654 <dwt_write32bitoffsetreg>
 8007a10:	239d      	movs	r3, #157	; 0x9d
 8007a12:	9300      	str	r3, [sp, #0]
 8007a14:	4b2e      	ldr	r3, [pc, #184]	; (8007ad0 <ull_configure+0x3ac>)
 8007a16:	2200      	movs	r2, #0
 8007a18:	492e      	ldr	r1, [pc, #184]	; (8007ad4 <ull_configure+0x3b0>)
 8007a1a:	4620      	mov	r0, r4
 8007a1c:	f7ff f9ac 	bl	8006d78 <dwt_modify32bitoffsetreg>
 8007a20:	e719      	b.n	8007856 <ull_configure+0x132>
 8007a22:	7b2a      	ldrb	r2, [r5, #12]
 8007a24:	4b28      	ldr	r3, [pc, #160]	; (8007ac8 <ull_configure+0x3a4>)
 8007a26:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007a2a:	f44f 6235 	mov.w	r2, #2896	; 0xb50
 8007a2e:	fb02 f203 	mul.w	r2, r2, r3
 8007a32:	0c93      	lsrs	r3, r2, #18
 8007a34:	f3c2 12ca 	ubfx	r2, r2, #7, #11
 8007a38:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007a3c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8007a40:	bf28      	it	cs
 8007a42:	3301      	addcs	r3, #1
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	e6df      	b.n	8007808 <ull_configure+0xe4>
 8007a48:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007a4c:	9300      	str	r3, [sp, #0]
 8007a4e:	f24e 73ff 	movw	r3, #59391	; 0xe7ff
 8007a52:	2200      	movs	r2, #0
 8007a54:	4920      	ldr	r1, [pc, #128]	; (8007ad8 <ull_configure+0x3b4>)
 8007a56:	4620      	mov	r0, r4
 8007a58:	f7ff fd2a 	bl	80074b0 <dwt_modify16bitoffsetreg>
 8007a5c:	e6fb      	b.n	8007856 <ull_configure+0x132>
 8007a5e:	78ab      	ldrb	r3, [r5, #2]
 8007a60:	9300      	str	r3, [sp, #0]
 8007a62:	23ec      	movs	r3, #236	; 0xec
 8007a64:	2200      	movs	r2, #0
 8007a66:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 8007a6a:	4620      	mov	r0, r4
 8007a6c:	f7ff fb6e 	bl	800714c <dwt_modify8bitoffsetreg>
 8007a70:	e700      	b.n	8007874 <ull_configure+0x150>
 8007a72:	2803      	cmp	r0, #3
 8007a74:	f47f af61 	bne.w	800793a <ull_configure+0x216>
 8007a78:	e04d      	b.n	8007b16 <ull_configure+0x3f2>
 8007a7a:	2102      	movs	r1, #2
 8007a7c:	4620      	mov	r0, r4
 8007a7e:	f7ff fc23 	bl	80072c8 <ull_setdwstate>
 8007a82:	e75a      	b.n	800793a <ull_configure+0x216>
 8007a84:	4b20      	ldr	r3, [pc, #128]	; (8007b08 <ull_configure+0x3e4>)
 8007a86:	2200      	movs	r2, #0
 8007a88:	4919      	ldr	r1, [pc, #100]	; (8007af0 <ull_configure+0x3cc>)
 8007a8a:	4620      	mov	r0, r4
 8007a8c:	f7fe fde2 	bl	8006654 <dwt_write32bitoffsetreg>
 8007a90:	f640 733c 	movw	r3, #3900	; 0xf3c
 8007a94:	2200      	movs	r2, #0
 8007a96:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 8007a9a:	4620      	mov	r0, r4
 8007a9c:	f7fe fcd9 	bl	8006452 <dwt_write16bitoffsetreg>
 8007aa0:	e75d      	b.n	800795e <ull_configure+0x23a>
 8007aa2:	fa4f f189 	sxtb.w	r1, r9
 8007aa6:	4620      	mov	r0, r4
 8007aa8:	f7ff f98a 	bl	8006dc0 <_dwt_kick_dgc_on_wakeup>
 8007aac:	e040      	b.n	8007b30 <ull_configure+0x40c>
 8007aae:	2200      	movs	r2, #0
 8007ab0:	9200      	str	r2, [sp, #0]
 8007ab2:	23fe      	movs	r3, #254	; 0xfe
 8007ab4:	4915      	ldr	r1, [pc, #84]	; (8007b0c <ull_configure+0x3e8>)
 8007ab6:	4620      	mov	r0, r4
 8007ab8:	f7ff fb48 	bl	800714c <dwt_modify8bitoffsetreg>
 8007abc:	e042      	b.n	8007b44 <ull_configure+0x420>
 8007abe:	bf00      	nop
 8007ac0:	00026668 	.word	0x00026668
 8007ac4:	fffc4fcf 	.word	0xfffc4fcf
 8007ac8:	08013178 	.word	0x08013178
 8007acc:	000e0012 	.word	0x000e0012
 8007ad0:	bfffff00 	.word	0xbfffff00
 8007ad4:	000e0016 	.word	0x000e0016
 8007ad8:	000b0008 	.word	0x000b0008
 8007adc:	af5f35cc 	.word	0xaf5f35cc
 8007ae0:	0006000c 	.word	0x0006000c
 8007ae4:	00010014 	.word	0x00010014
 8007ae8:	000f0030 	.word	0x000f0030
 8007aec:	1c071134 	.word	0x1c071134
 8007af0:	0007001c 	.word	0x0007001c
 8007af4:	00070050 	.word	0x00070050
 8007af8:	00070018 	.word	0x00070018
 8007afc:	00090008 	.word	0x00090008
 8007b00:	000e000c 	.word	0x000e000c
 8007b04:	000c5a0a 	.word	0x000c5a0a
 8007b08:	1c010034 	.word	0x1c010034
 8007b0c:	00030018 	.word	0x00030018
 8007b10:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007b12:	f883 9010 	strb.w	r9, [r3, #16]
 8007b16:	792b      	ldrb	r3, [r5, #4]
 8007b18:	3b09      	subs	r3, #9
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	2b0f      	cmp	r3, #15
 8007b1e:	d8c6      	bhi.n	8007aae <ull_configure+0x38a>
 8007b20:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007b22:	7a5b      	ldrb	r3, [r3, #9]
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d0bc      	beq.n	8007aa2 <ull_configure+0x37e>
 8007b28:	4649      	mov	r1, r9
 8007b2a:	4620      	mov	r0, r4
 8007b2c:	f7fe ffae 	bl	8006a8c <ull_configmrxlut>
 8007b30:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8007b34:	9300      	str	r3, [sp, #0]
 8007b36:	f248 13ff 	movw	r3, #33279	; 0x81ff
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	490c      	ldr	r1, [pc, #48]	; (8007b70 <ull_configure+0x44c>)
 8007b3e:	4620      	mov	r0, r4
 8007b40:	f7ff fcb6 	bl	80074b0 <dwt_modify16bitoffsetreg>
 8007b44:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 8007b48:	bfcc      	ite	gt
 8007b4a:	f04f 5300 	movgt.w	r3, #536870912	; 0x20000000
 8007b4e:	f04f 53a0 	movle.w	r3, #335544320	; 0x14000000
 8007b52:	9300      	str	r3, [sp, #0]
 8007b54:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8007b58:	2200      	movs	r2, #0
 8007b5a:	4906      	ldr	r1, [pc, #24]	; (8007b74 <ull_configure+0x450>)
 8007b5c:	4620      	mov	r0, r4
 8007b5e:	f7ff f90b 	bl	8006d78 <dwt_modify32bitoffsetreg>
 8007b62:	2101      	movs	r1, #1
 8007b64:	4620      	mov	r0, r4
 8007b66:	f7ff fd27 	bl	80075b8 <ull_pgf_cal>
 8007b6a:	b003      	add	sp, #12
 8007b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b70:	00030018 	.word	0x00030018
 8007b74:	00060010 	.word	0x00060010

08007b78 <dwt_ioctl>:
 8007b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b7c:	b091      	sub	sp, #68	; 0x44
 8007b7e:	4606      	mov	r6, r0
 8007b80:	4615      	mov	r5, r2
 8007b82:	461c      	mov	r4, r3
 8007b84:	299c      	cmp	r1, #156	; 0x9c
 8007b86:	f200 809f 	bhi.w	8007cc8 <dwt_ioctl+0x150>
 8007b8a:	e8df f011 	tbh	[pc, r1, lsl #1]
 8007b8e:	0a6d      	.short	0x0a6d
 8007b90:	00a30a78 	.word	0x00a30a78
 8007b94:	00be00a7 	.word	0x00be00a7
 8007b98:	018e0148 	.word	0x018e0148
 8007b9c:	0152016b 	.word	0x0152016b
 8007ba0:	01a9019e 	.word	0x01a9019e
 8007ba4:	01b901b1 	.word	0x01b901b1
 8007ba8:	01c901c1 	.word	0x01c901c1
 8007bac:	01d501d1 	.word	0x01d501d1
 8007bb0:	026e01dd 	.word	0x026e01dd
 8007bb4:	0281027c 	.word	0x0281027c
 8007bb8:	0290028b 	.word	0x0290028b
 8007bbc:	029e0295 	.word	0x029e0295
 8007bc0:	030902a3 	.word	0x030902a3
 8007bc4:	0326031b 	.word	0x0326031b
 8007bc8:	033b0331 	.word	0x033b0331
 8007bcc:	03690373 	.word	0x03690373
 8007bd0:	0345035f 	.word	0x0345035f
 8007bd4:	03c10352 	.word	0x03c10352
 8007bd8:	022b01f8 	.word	0x022b01f8
 8007bdc:	02410239 	.word	0x02410239
 8007be0:	09960255 	.word	0x09960255
 8007be4:	0382099b 	.word	0x0382099b
 8007be8:	03e303df 	.word	0x03e303df
 8007bec:	03f103ec 	.word	0x03f103ec
 8007bf0:	040503fb 	.word	0x040503fb
 8007bf4:	0437040d 	.word	0x0437040d
 8007bf8:	044e0443 	.word	0x044e0443
 8007bfc:	04590378 	.word	0x04590378
 8007c00:	04740462 	.word	0x04740462
 8007c04:	049e048d 	.word	0x049e048d
 8007c08:	04ea04e0 	.word	0x04ea04e0
 8007c0c:	051a050b 	.word	0x051a050b
 8007c10:	05230535 	.word	0x05230535
 8007c14:	05970551 	.word	0x05970551
 8007c18:	05cf05af 	.word	0x05cf05af
 8007c1c:	05f805e4 	.word	0x05f805e4
 8007c20:	061d0601 	.word	0x061d0601
 8007c24:	0773060a 	.word	0x0773060a
 8007c28:	07ed079f 	.word	0x07ed079f
 8007c2c:	07fe07f3 	.word	0x07fe07f3
 8007c30:	08370817 	.word	0x08370817
 8007c34:	084b0841 	.word	0x084b0841
 8007c38:	08820879 	.word	0x08820879
 8007c3c:	08910888 	.word	0x08910888
 8007c40:	08ab089e 	.word	0x08ab089e
 8007c44:	08be08b5 	.word	0x08be08b5
 8007c48:	08d208c7 	.word	0x08d208c7
 8007c4c:	08e308dd 	.word	0x08e308dd
 8007c50:	09110906 	.word	0x09110906
 8007c54:	0945091c 	.word	0x0945091c
 8007c58:	09720967 	.word	0x09720967
 8007c5c:	09a1098b 	.word	0x09a1098b
 8007c60:	0a200a16 	.word	0x0a200a16
 8007c64:	0a800a2b 	.word	0x0a800a2b
 8007c68:	0a620a35 	.word	0x0a620a35
 8007c6c:	09df0791 	.word	0x09df0791
 8007c70:	0aee0a00 	.word	0x0aee0a00
 8007c74:	0a8d0ae3 	.word	0x0a8d0ae3
 8007c78:	0aa30a98 	.word	0x0aa30a98
 8007c7c:	0ab90aae 	.word	0x0ab90aae
 8007c80:	0acf0ac4 	.word	0x0acf0ac4
 8007c84:	0bd80ad8 	.word	0x0bd80ad8
 8007c88:	0c4d0c12 	.word	0x0c4d0c12
 8007c8c:	0d290c70 	.word	0x0d290c70
 8007c90:	0b190d3e 	.word	0x0b190d3e
 8007c94:	009d009d 	.word	0x009d009d
 8007c98:	009d009d 	.word	0x009d009d
 8007c9c:	009d009d 	.word	0x009d009d
 8007ca0:	009d009d 	.word	0x009d009d
 8007ca4:	009d009d 	.word	0x009d009d
 8007ca8:	009d009d 	.word	0x009d009d
 8007cac:	009d009d 	.word	0x009d009d
 8007cb0:	009d009d 	.word	0x009d009d
 8007cb4:	009d009d 	.word	0x009d009d
 8007cb8:	0c87009d 	.word	0x0c87009d
 8007cbc:	0dce0ca5 	.word	0x0dce0ca5
 8007cc0:	0ce40cef 	.word	0x0ce40cef
 8007cc4:	0cfa0d03 	.word	0x0cfa0d03
 8007cc8:	f04f 35ff 	mov.w	r5, #4294967295
 8007ccc:	4628      	mov	r0, r5
 8007cce:	b011      	add	sp, #68	; 0x44
 8007cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cd4:	6843      	ldr	r3, [r0, #4]
 8007cd6:	4798      	blx	r3
 8007cd8:	2500      	movs	r5, #0
 8007cda:	e7f7      	b.n	8007ccc <dwt_ioctl+0x154>
 8007cdc:	2202      	movs	r2, #2
 8007cde:	49b7      	ldr	r1, [pc, #732]	; (8007fbc <dwt_ioctl+0x444>)
 8007ce0:	f7fd ff9e 	bl	8005c20 <dwt_read8bitoffsetreg>
 8007ce4:	2803      	cmp	r0, #3
 8007ce6:	d801      	bhi.n	8007cec <dwt_ioctl+0x174>
 8007ce8:	2500      	movs	r5, #0
 8007cea:	e7ef      	b.n	8007ccc <dwt_ioctl+0x154>
 8007cec:	f7f8 fbf0 	bl	80004d0 <decamutexon>
 8007cf0:	4604      	mov	r4, r0
 8007cf2:	2500      	movs	r5, #0
 8007cf4:	9500      	str	r5, [sp, #0]
 8007cf6:	462b      	mov	r3, r5
 8007cf8:	462a      	mov	r2, r5
 8007cfa:	4629      	mov	r1, r5
 8007cfc:	4630      	mov	r0, r6
 8007cfe:	f7fe fb4b 	bl	8006398 <dwt_writetodevice>
 8007d02:	4620      	mov	r0, r4
 8007d04:	f7f8 fbf5 	bl	80004f2 <decamutexoff>
 8007d08:	e7e0      	b.n	8007ccc <dwt_ioctl+0x154>
 8007d0a:	2c00      	cmp	r4, #0
 8007d0c:	f001 8510 	beq.w	8009730 <dwt_ioctl+0x1bb8>
 8007d10:	7824      	ldrb	r4, [r4, #0]
 8007d12:	f014 0f1d 	tst.w	r4, #29
 8007d16:	d065      	beq.n	8007de4 <dwt_ioctl+0x26c>
 8007d18:	f014 0f01 	tst.w	r4, #1
 8007d1c:	d026      	beq.n	8007d6c <dwt_ioctl+0x1f4>
 8007d1e:	f014 0f02 	tst.w	r4, #2
 8007d22:	f04f 0200 	mov.w	r2, #0
 8007d26:	9200      	str	r2, [sp, #0]
 8007d28:	4613      	mov	r3, r2
 8007d2a:	bf14      	ite	ne
 8007d2c:	210d      	movne	r1, #13
 8007d2e:	2103      	moveq	r1, #3
 8007d30:	f7fe fb32 	bl	8006398 <dwt_writetodevice>
 8007d34:	2203      	movs	r2, #3
 8007d36:	2144      	movs	r1, #68	; 0x44
 8007d38:	4630      	mov	r0, r6
 8007d3a:	f7fd ff71 	bl	8005c20 <dwt_read8bitoffsetreg>
 8007d3e:	f010 0f08 	tst.w	r0, #8
 8007d42:	d145      	bne.n	8007dd0 <dwt_ioctl+0x258>
 8007d44:	2200      	movs	r2, #0
 8007d46:	499d      	ldr	r1, [pc, #628]	; (8007fbc <dwt_ioctl+0x444>)
 8007d48:	4630      	mov	r0, r6
 8007d4a:	f7fd ff41 	bl	8005bd0 <dwt_read32bitoffsetreg>
 8007d4e:	f5b0 2f50 	cmp.w	r0, #851968	; 0xd0000
 8007d52:	bf18      	it	ne
 8007d54:	2500      	movne	r5, #0
 8007d56:	d1b9      	bne.n	8007ccc <dwt_ioctl+0x154>
 8007d58:	2100      	movs	r1, #0
 8007d5a:	9100      	str	r1, [sp, #0]
 8007d5c:	460b      	mov	r3, r1
 8007d5e:	460a      	mov	r2, r1
 8007d60:	4630      	mov	r0, r6
 8007d62:	f7fe fb19 	bl	8006398 <dwt_writetodevice>
 8007d66:	f04f 35ff 	mov.w	r5, #4294967295
 8007d6a:	e7af      	b.n	8007ccc <dwt_ioctl+0x154>
 8007d6c:	f014 0f08 	tst.w	r4, #8
 8007d70:	d10e      	bne.n	8007d90 <dwt_ioctl+0x218>
 8007d72:	f014 0f10 	tst.w	r4, #16
 8007d76:	d11b      	bne.n	8007db0 <dwt_ioctl+0x238>
 8007d78:	f014 0f02 	tst.w	r4, #2
 8007d7c:	f04f 0200 	mov.w	r2, #0
 8007d80:	9200      	str	r2, [sp, #0]
 8007d82:	4613      	mov	r3, r2
 8007d84:	bf14      	ite	ne
 8007d86:	2110      	movne	r1, #16
 8007d88:	2109      	moveq	r1, #9
 8007d8a:	f7fe fb05 	bl	8006398 <dwt_writetodevice>
 8007d8e:	e7d1      	b.n	8007d34 <dwt_ioctl+0x1bc>
 8007d90:	2100      	movs	r1, #0
 8007d92:	f7fe fdd3 	bl	800693c <_dwt_adjust_delaytime>
 8007d96:	f014 0f02 	tst.w	r4, #2
 8007d9a:	f04f 0200 	mov.w	r2, #0
 8007d9e:	9200      	str	r2, [sp, #0]
 8007da0:	4613      	mov	r3, r2
 8007da2:	bf14      	ite	ne
 8007da4:	210f      	movne	r1, #15
 8007da6:	2107      	moveq	r1, #7
 8007da8:	4630      	mov	r0, r6
 8007daa:	f7fe faf5 	bl	8006398 <dwt_writetodevice>
 8007dae:	e7c1      	b.n	8007d34 <dwt_ioctl+0x1bc>
 8007db0:	2101      	movs	r1, #1
 8007db2:	f7fe fdc3 	bl	800693c <_dwt_adjust_delaytime>
 8007db6:	f014 0f02 	tst.w	r4, #2
 8007dba:	f04f 0200 	mov.w	r2, #0
 8007dbe:	9200      	str	r2, [sp, #0]
 8007dc0:	4613      	mov	r3, r2
 8007dc2:	bf14      	ite	ne
 8007dc4:	210e      	movne	r1, #14
 8007dc6:	2105      	moveq	r1, #5
 8007dc8:	4630      	mov	r0, r6
 8007dca:	f7fe fae5 	bl	8006398 <dwt_writetodevice>
 8007dce:	e7b1      	b.n	8007d34 <dwt_ioctl+0x1bc>
 8007dd0:	2100      	movs	r1, #0
 8007dd2:	9100      	str	r1, [sp, #0]
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	460a      	mov	r2, r1
 8007dd8:	4630      	mov	r0, r6
 8007dda:	f7fe fadd 	bl	8006398 <dwt_writetodevice>
 8007dde:	f04f 35ff 	mov.w	r5, #4294967295
 8007de2:	e773      	b.n	8007ccc <dwt_ioctl+0x154>
 8007de4:	f014 0f20 	tst.w	r4, #32
 8007de8:	d00c      	beq.n	8007e04 <dwt_ioctl+0x28c>
 8007dea:	f014 0f02 	tst.w	r4, #2
 8007dee:	f04f 0500 	mov.w	r5, #0
 8007df2:	9500      	str	r5, [sp, #0]
 8007df4:	462b      	mov	r3, r5
 8007df6:	462a      	mov	r2, r5
 8007df8:	bf14      	ite	ne
 8007dfa:	2111      	movne	r1, #17
 8007dfc:	210b      	moveq	r1, #11
 8007dfe:	f7fe facb 	bl	8006398 <dwt_writetodevice>
 8007e02:	e763      	b.n	8007ccc <dwt_ioctl+0x154>
 8007e04:	f014 0f02 	tst.w	r4, #2
 8007e08:	f04f 0500 	mov.w	r5, #0
 8007e0c:	9500      	str	r5, [sp, #0]
 8007e0e:	462b      	mov	r3, r5
 8007e10:	462a      	mov	r2, r5
 8007e12:	bf14      	ite	ne
 8007e14:	210c      	movne	r1, #12
 8007e16:	2101      	moveq	r1, #1
 8007e18:	f7fe fabe 	bl	8006398 <dwt_writetodevice>
 8007e1c:	e756      	b.n	8007ccc <dwt_ioctl+0x154>
 8007e1e:	2c00      	cmp	r4, #0
 8007e20:	f001 8489 	beq.w	8009736 <dwt_ioctl+0x1bbe>
 8007e24:	6823      	ldr	r3, [r4, #0]
 8007e26:	2200      	movs	r2, #0
 8007e28:	212c      	movs	r1, #44	; 0x2c
 8007e2a:	f7fe fc13 	bl	8006654 <dwt_write32bitoffsetreg>
 8007e2e:	2500      	movs	r5, #0
 8007e30:	e74c      	b.n	8007ccc <dwt_ioctl+0x154>
 8007e32:	6823      	ldr	r3, [r4, #0]
 8007e34:	2200      	movs	r2, #0
 8007e36:	4962      	ldr	r1, [pc, #392]	; (8007fc0 <dwt_ioctl+0x448>)
 8007e38:	f7fe fc0c 	bl	8006654 <dwt_write32bitoffsetreg>
 8007e3c:	6863      	ldr	r3, [r4, #4]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	4960      	ldr	r1, [pc, #384]	; (8007fc4 <dwt_ioctl+0x44c>)
 8007e42:	4630      	mov	r0, r6
 8007e44:	f7fe fc06 	bl	8006654 <dwt_write32bitoffsetreg>
 8007e48:	68a3      	ldr	r3, [r4, #8]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	495e      	ldr	r1, [pc, #376]	; (8007fc8 <dwt_ioctl+0x450>)
 8007e4e:	4630      	mov	r0, r6
 8007e50:	f7fe fc00 	bl	8006654 <dwt_write32bitoffsetreg>
 8007e54:	68e3      	ldr	r3, [r4, #12]
 8007e56:	2200      	movs	r2, #0
 8007e58:	495c      	ldr	r1, [pc, #368]	; (8007fcc <dwt_ioctl+0x454>)
 8007e5a:	4630      	mov	r0, r6
 8007e5c:	f7fe fbfa 	bl	8006654 <dwt_write32bitoffsetreg>
 8007e60:	2500      	movs	r5, #0
 8007e62:	e733      	b.n	8007ccc <dwt_ioctl+0x154>
 8007e64:	2c00      	cmp	r4, #0
 8007e66:	f001 8469 	beq.w	800973c <dwt_ioctl+0x1bc4>
 8007e6a:	8823      	ldrh	r3, [r4, #0]
 8007e6c:	6865      	ldr	r5, [r4, #4]
 8007e6e:	2d03      	cmp	r5, #3
 8007e70:	f201 8467 	bhi.w	8009742 <dwt_ioctl+0x1bca>
 8007e74:	e8df f005 	tbb	[pc, r5]
 8007e78:	130d0702 	.word	0x130d0702
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	4954      	ldr	r1, [pc, #336]	; (8007fd0 <dwt_ioctl+0x458>)
 8007e80:	f7fe fae7 	bl	8006452 <dwt_write16bitoffsetreg>
 8007e84:	e722      	b.n	8007ccc <dwt_ioctl+0x154>
 8007e86:	2202      	movs	r2, #2
 8007e88:	4951      	ldr	r1, [pc, #324]	; (8007fd0 <dwt_ioctl+0x458>)
 8007e8a:	f7fe fae2 	bl	8006452 <dwt_write16bitoffsetreg>
 8007e8e:	2500      	movs	r5, #0
 8007e90:	e71c      	b.n	8007ccc <dwt_ioctl+0x154>
 8007e92:	2200      	movs	r2, #0
 8007e94:	494f      	ldr	r1, [pc, #316]	; (8007fd4 <dwt_ioctl+0x45c>)
 8007e96:	f7fe fadc 	bl	8006452 <dwt_write16bitoffsetreg>
 8007e9a:	2500      	movs	r5, #0
 8007e9c:	e716      	b.n	8007ccc <dwt_ioctl+0x154>
 8007e9e:	2202      	movs	r2, #2
 8007ea0:	494c      	ldr	r1, [pc, #304]	; (8007fd4 <dwt_ioctl+0x45c>)
 8007ea2:	f7fe fad6 	bl	8006452 <dwt_write16bitoffsetreg>
 8007ea6:	2500      	movs	r5, #0
 8007ea8:	e710      	b.n	8007ccc <dwt_ioctl+0x154>
 8007eaa:	2c00      	cmp	r4, #0
 8007eac:	f001 844c 	beq.w	8009748 <dwt_ioctl+0x1bd0>
 8007eb0:	7823      	ldrb	r3, [r4, #0]
 8007eb2:	005b      	lsls	r3, r3, #1
 8007eb4:	f003 0306 	and.w	r3, r3, #6
 8007eb8:	9300      	str	r3, [sp, #0]
 8007eba:	f06f 0306 	mvn.w	r3, #6
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	4945      	ldr	r1, [pc, #276]	; (8007fd8 <dwt_ioctl+0x460>)
 8007ec2:	f7fe ff59 	bl	8006d78 <dwt_modify32bitoffsetreg>
 8007ec6:	2500      	movs	r5, #0
 8007ec8:	e700      	b.n	8007ccc <dwt_ioctl+0x154>
 8007eca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007ece:	9300      	str	r3, [sp, #0]
 8007ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	4941      	ldr	r1, [pc, #260]	; (8007fdc <dwt_ioctl+0x464>)
 8007ed8:	f7fe ff4e 	bl	8006d78 <dwt_modify32bitoffsetreg>
 8007edc:	2500      	movs	r5, #0
 8007ede:	e6f5      	b.n	8007ccc <dwt_ioctl+0x154>
 8007ee0:	2c00      	cmp	r4, #0
 8007ee2:	f001 8434 	beq.w	800974e <dwt_ioctl+0x1bd6>
 8007ee6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007ee8:	7b5b      	ldrb	r3, [r3, #13]
 8007eea:	7023      	strb	r3, [r4, #0]
 8007eec:	2500      	movs	r5, #0
 8007eee:	e6ed      	b.n	8007ccc <dwt_ioctl+0x154>
 8007ef0:	2c00      	cmp	r4, #0
 8007ef2:	f001 842f 	beq.w	8009754 <dwt_ioctl+0x1bdc>
 8007ef6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007ef8:	7a9b      	ldrb	r3, [r3, #10]
 8007efa:	7023      	strb	r3, [r4, #0]
 8007efc:	2500      	movs	r5, #0
 8007efe:	e6e5      	b.n	8007ccc <dwt_ioctl+0x154>
 8007f00:	2c00      	cmp	r4, #0
 8007f02:	f001 842a 	beq.w	800975a <dwt_ioctl+0x1be2>
 8007f06:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007f08:	7adb      	ldrb	r3, [r3, #11]
 8007f0a:	7023      	strb	r3, [r4, #0]
 8007f0c:	2500      	movs	r5, #0
 8007f0e:	e6dd      	b.n	8007ccc <dwt_ioctl+0x154>
 8007f10:	2c00      	cmp	r4, #0
 8007f12:	f001 8425 	beq.w	8009760 <dwt_ioctl+0x1be8>
 8007f16:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	6023      	str	r3, [r4, #0]
 8007f1c:	2500      	movs	r5, #0
 8007f1e:	e6d5      	b.n	8007ccc <dwt_ioctl+0x154>
 8007f20:	2c00      	cmp	r4, #0
 8007f22:	f001 8420 	beq.w	8009766 <dwt_ioctl+0x1bee>
 8007f26:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	6023      	str	r3, [r4, #0]
 8007f2c:	2500      	movs	r5, #0
 8007f2e:	e6cd      	b.n	8007ccc <dwt_ioctl+0x154>
 8007f30:	f7fe fb7e 	bl	8006630 <ull_signal_rx_buff_free>
 8007f34:	2500      	movs	r5, #0
 8007f36:	e6c9      	b.n	8007ccc <dwt_ioctl+0x154>
 8007f38:	2c00      	cmp	r4, #0
 8007f3a:	f001 8417 	beq.w	800976c <dwt_ioctl+0x1bf4>
 8007f3e:	6821      	ldr	r1, [r4, #0]
 8007f40:	f7fe fd24 	bl	800698c <ull_setrxaftertxdelay>
 8007f44:	2500      	movs	r5, #0
 8007f46:	e6c1      	b.n	8007ccc <dwt_ioctl+0x154>
 8007f48:	2c00      	cmp	r4, #0
 8007f4a:	f001 8412 	beq.w	8009772 <dwt_ioctl+0x1bfa>
 8007f4e:	7825      	ldrb	r5, [r4, #0]
 8007f50:	b15d      	cbz	r5, 8007f6a <dwt_ioctl+0x3f2>
 8007f52:	6864      	ldr	r4, [r4, #4]
 8007f54:	2340      	movs	r3, #64	; 0x40
 8007f56:	9300      	str	r3, [sp, #0]
 8007f58:	23ff      	movs	r3, #255	; 0xff
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	2110      	movs	r1, #16
 8007f5e:	f7ff f8f5 	bl	800714c <dwt_modify8bitoffsetreg>
 8007f62:	2d02      	cmp	r5, #2
 8007f64:	d107      	bne.n	8007f76 <dwt_ioctl+0x3fe>
 8007f66:	60f4      	str	r4, [r6, #12]
 8007f68:	e005      	b.n	8007f76 <dwt_ioctl+0x3fe>
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	9200      	str	r2, [sp, #0]
 8007f6e:	23bf      	movs	r3, #191	; 0xbf
 8007f70:	2110      	movs	r1, #16
 8007f72:	f7ff f8eb 	bl	800714c <dwt_modify8bitoffsetreg>
 8007f76:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8007f78:	759d      	strb	r5, [r3, #22]
 8007f7a:	2500      	movs	r5, #0
 8007f7c:	e6a6      	b.n	8007ccc <dwt_ioctl+0x154>
 8007f7e:	2c00      	cmp	r4, #0
 8007f80:	f001 83fa 	beq.w	8009778 <dwt_ioctl+0x1c00>
 8007f84:	6865      	ldr	r5, [r4, #4]
 8007f86:	7823      	ldrb	r3, [r4, #0]
 8007f88:	2203      	movs	r2, #3
 8007f8a:	4915      	ldr	r1, [pc, #84]	; (8007fe0 <dwt_ioctl+0x468>)
 8007f8c:	f7fe fa0f 	bl	80063ae <dwt_write8bitoffsetreg>
 8007f90:	b945      	cbnz	r5, 8007fa4 <dwt_ioctl+0x42c>
 8007f92:	2200      	movs	r2, #0
 8007f94:	9200      	str	r2, [sp, #0]
 8007f96:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8007f9a:	2110      	movs	r1, #16
 8007f9c:	4630      	mov	r0, r6
 8007f9e:	f7ff fa87 	bl	80074b0 <dwt_modify16bitoffsetreg>
 8007fa2:	e693      	b.n	8007ccc <dwt_ioctl+0x154>
 8007fa4:	f44f 2381 	mov.w	r3, #264192	; 0x40800
 8007fa8:	9300      	str	r3, [sp, #0]
 8007faa:	f04f 33ff 	mov.w	r3, #4294967295
 8007fae:	2200      	movs	r2, #0
 8007fb0:	2110      	movs	r1, #16
 8007fb2:	4630      	mov	r0, r6
 8007fb4:	f7fe fee0 	bl	8006d78 <dwt_modify32bitoffsetreg>
 8007fb8:	2500      	movs	r5, #0
 8007fba:	e687      	b.n	8007ccc <dwt_ioctl+0x154>
 8007fbc:	000f0030 	.word	0x000f0030
 8007fc0:	00010054 	.word	0x00010054
 8007fc4:	00010058 	.word	0x00010058
 8007fc8:	0001005c 	.word	0x0001005c
 8007fcc:	00010060 	.word	0x00010060
 8007fd0:	00010018 	.word	0x00010018
 8007fd4:	0001001c 	.word	0x0001001c
 8007fd8:	00010014 	.word	0x00010014
 8007fdc:	00110004 	.word	0x00110004
 8007fe0:	00010008 	.word	0x00010008
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	4611      	mov	r1, r2
 8007fe8:	f7fd fdf2 	bl	8005bd0 <dwt_read32bitoffsetreg>
 8007fec:	68b2      	ldr	r2, [r6, #8]
 8007fee:	6813      	ldr	r3, [r2, #0]
 8007ff0:	4043      	eors	r3, r0
 8007ff2:	6852      	ldr	r2, [r2, #4]
 8007ff4:	4213      	tst	r3, r2
 8007ff6:	bf14      	ite	ne
 8007ff8:	f04f 35ff 	movne.w	r5, #4294967295
 8007ffc:	2500      	moveq	r5, #0
 8007ffe:	e665      	b.n	8007ccc <dwt_ioctl+0x154>
 8008000:	2c00      	cmp	r4, #0
 8008002:	f001 83bc 	beq.w	800977e <dwt_ioctl+0x1c06>
 8008006:	7821      	ldrb	r1, [r4, #0]
 8008008:	f7ff f8b4 	bl	8007174 <ull_configciadiag>
 800800c:	2500      	movs	r5, #0
 800800e:	e65d      	b.n	8007ccc <dwt_ioctl+0x154>
 8008010:	b93a      	cbnz	r2, 8008022 <dwt_ioctl+0x4aa>
 8008012:	2200      	movs	r2, #0
 8008014:	9200      	str	r2, [sp, #0]
 8008016:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 800801a:	49ae      	ldr	r1, [pc, #696]	; (80082d4 <dwt_ioctl+0x75c>)
 800801c:	f7ff fa48 	bl	80074b0 <dwt_modify16bitoffsetreg>
 8008020:	e654      	b.n	8007ccc <dwt_ioctl+0x154>
 8008022:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008026:	9300      	str	r3, [sp, #0]
 8008028:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800802c:	2200      	movs	r2, #0
 800802e:	49a9      	ldr	r1, [pc, #676]	; (80082d4 <dwt_ioctl+0x75c>)
 8008030:	f7ff fa3e 	bl	80074b0 <dwt_modify16bitoffsetreg>
 8008034:	2500      	movs	r5, #0
 8008036:	e649      	b.n	8007ccc <dwt_ioctl+0x154>
 8008038:	f002 0201 	and.w	r2, r2, #1
 800803c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008040:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 8008044:	2a00      	cmp	r2, #0
 8008046:	bf08      	it	eq
 8008048:	460b      	moveq	r3, r1
 800804a:	02d2      	lsls	r2, r2, #11
 800804c:	f015 0f02 	tst.w	r5, #2
 8008050:	bf12      	itee	ne
 8008052:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 8008056:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800805a:	b29b      	uxtheq	r3, r3
 800805c:	9200      	str	r2, [sp, #0]
 800805e:	2200      	movs	r2, #0
 8008060:	499c      	ldr	r1, [pc, #624]	; (80082d4 <dwt_ioctl+0x75c>)
 8008062:	f7ff fa25 	bl	80074b0 <dwt_modify16bitoffsetreg>
 8008066:	2500      	movs	r5, #0
 8008068:	e630      	b.n	8007ccc <dwt_ioctl+0x154>
 800806a:	b92a      	cbnz	r2, 8008078 <dwt_ioctl+0x500>
 800806c:	4b9a      	ldr	r3, [pc, #616]	; (80082d8 <dwt_ioctl+0x760>)
 800806e:	2202      	movs	r2, #2
 8008070:	499a      	ldr	r1, [pc, #616]	; (80082dc <dwt_ioctl+0x764>)
 8008072:	f7fe faef 	bl	8006654 <dwt_write32bitoffsetreg>
 8008076:	e629      	b.n	8007ccc <dwt_ioctl+0x154>
 8008078:	4b99      	ldr	r3, [pc, #612]	; (80082e0 <dwt_ioctl+0x768>)
 800807a:	2202      	movs	r2, #2
 800807c:	4997      	ldr	r1, [pc, #604]	; (80082dc <dwt_ioctl+0x764>)
 800807e:	f7fe fae9 	bl	8006654 <dwt_write32bitoffsetreg>
 8008082:	2500      	movs	r5, #0
 8008084:	e622      	b.n	8007ccc <dwt_ioctl+0x154>
 8008086:	4611      	mov	r1, r2
 8008088:	f7fe fc96 	bl	80069b8 <ull_setlnapamode>
 800808c:	2500      	movs	r5, #0
 800808e:	e61d      	b.n	8007ccc <dwt_ioctl+0x154>
 8008090:	2c00      	cmp	r4, #0
 8008092:	f001 8377 	beq.w	8009784 <dwt_ioctl+0x1c0c>
 8008096:	2200      	movs	r2, #0
 8008098:	4992      	ldr	r1, [pc, #584]	; (80082e4 <dwt_ioctl+0x76c>)
 800809a:	f7fd fdc1 	bl	8005c20 <dwt_read8bitoffsetreg>
 800809e:	7020      	strb	r0, [r4, #0]
 80080a0:	2500      	movs	r5, #0
 80080a2:	e613      	b.n	8007ccc <dwt_ioctl+0x154>
 80080a4:	4621      	mov	r1, r4
 80080a6:	f7fe fca9 	bl	80069fc <ull_configurestskey>
 80080aa:	2500      	movs	r5, #0
 80080ac:	e60e      	b.n	8007ccc <dwt_ioctl+0x154>
 80080ae:	4621      	mov	r1, r4
 80080b0:	f7fe fcc8 	bl	8006a44 <ull_configurestsiv>
 80080b4:	2500      	movs	r5, #0
 80080b6:	e609      	b.n	8007ccc <dwt_ioctl+0x154>
 80080b8:	2301      	movs	r3, #1
 80080ba:	9300      	str	r3, [sp, #0]
 80080bc:	23ff      	movs	r3, #255	; 0xff
 80080be:	2200      	movs	r2, #0
 80080c0:	4989      	ldr	r1, [pc, #548]	; (80082e8 <dwt_ioctl+0x770>)
 80080c2:	f7ff f843 	bl	800714c <dwt_modify8bitoffsetreg>
 80080c6:	2500      	movs	r5, #0
 80080c8:	e600      	b.n	8007ccc <dwt_ioctl+0x154>
 80080ca:	4611      	mov	r1, r2
 80080cc:	f7fe fcde 	bl	8006a8c <ull_configmrxlut>
 80080d0:	2500      	movs	r5, #0
 80080d2:	e5fb      	b.n	8007ccc <dwt_ioctl+0x154>
 80080d4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80080d6:	7a1b      	ldrb	r3, [r3, #8]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d137      	bne.n	800814c <dwt_ioctl+0x5d4>
 80080dc:	2314      	movs	r3, #20
 80080de:	2201      	movs	r2, #1
 80080e0:	4982      	ldr	r1, [pc, #520]	; (80082ec <dwt_ioctl+0x774>)
 80080e2:	4630      	mov	r0, r6
 80080e4:	f7fe f963 	bl	80063ae <dwt_write8bitoffsetreg>
 80080e8:	2318      	movs	r3, #24
 80080ea:	2200      	movs	r2, #0
 80080ec:	4980      	ldr	r1, [pc, #512]	; (80082f0 <dwt_ioctl+0x778>)
 80080ee:	4630      	mov	r0, r6
 80080f0:	f7fe fab0 	bl	8006654 <dwt_write32bitoffsetreg>
 80080f4:	23e8      	movs	r3, #232	; 0xe8
 80080f6:	2200      	movs	r2, #0
 80080f8:	497e      	ldr	r1, [pc, #504]	; (80082f4 <dwt_ioctl+0x77c>)
 80080fa:	4630      	mov	r0, r6
 80080fc:	f7fe faaa 	bl	8006654 <dwt_write32bitoffsetreg>
 8008100:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8008102:	8a5b      	ldrh	r3, [r3, #18]
 8008104:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8008108:	2b20      	cmp	r3, #32
 800810a:	d022      	beq.n	8008152 <dwt_ioctl+0x5da>
 800810c:	2b60      	cmp	r3, #96	; 0x60
 800810e:	d02b      	beq.n	8008168 <dwt_ioctl+0x5f0>
 8008110:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8008112:	7e1b      	ldrb	r3, [r3, #24]
 8008114:	085b      	lsrs	r3, r3, #1
 8008116:	d032      	beq.n	800817e <dwt_ioctl+0x606>
 8008118:	2200      	movs	r2, #0
 800811a:	4977      	ldr	r1, [pc, #476]	; (80082f8 <dwt_ioctl+0x780>)
 800811c:	4630      	mov	r0, r6
 800811e:	f7fd fd6d 	bl	8005bfc <dwt_read16bitoffsetreg>
 8008122:	f3c0 03c4 	ubfx	r3, r0, #3, #5
 8008126:	3b09      	subs	r3, #9
 8008128:	2b0f      	cmp	r3, #15
 800812a:	f201 832e 	bhi.w	800978a <dwt_ioctl+0x1c12>
 800812e:	f000 0001 	and.w	r0, r0, #1
 8008132:	2800      	cmp	r0, #0
 8008134:	bf0c      	ite	eq
 8008136:	2105      	moveq	r1, #5
 8008138:	2109      	movne	r1, #9
 800813a:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800813c:	7a5b      	ldrb	r3, [r3, #9]
 800813e:	2b01      	cmp	r3, #1
 8008140:	d029      	beq.n	8008196 <dwt_ioctl+0x61e>
 8008142:	4630      	mov	r0, r6
 8008144:	f7fe fca2 	bl	8006a8c <ull_configmrxlut>
 8008148:	2500      	movs	r5, #0
 800814a:	e5bf      	b.n	8007ccc <dwt_ioctl+0x154>
 800814c:	f7ff f9ca 	bl	80074e4 <_dwt_prog_ldo_and_bias_tune>
 8008150:	e7c4      	b.n	80080dc <dwt_ioctl+0x564>
 8008152:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008156:	9300      	str	r3, [sp, #0]
 8008158:	f46f 53c0 	mvn.w	r3, #6144	; 0x1800
 800815c:	2200      	movs	r2, #0
 800815e:	4967      	ldr	r1, [pc, #412]	; (80082fc <dwt_ioctl+0x784>)
 8008160:	4630      	mov	r0, r6
 8008162:	f7fe fe09 	bl	8006d78 <dwt_modify32bitoffsetreg>
 8008166:	e7d3      	b.n	8008110 <dwt_ioctl+0x598>
 8008168:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800816c:	9300      	str	r3, [sp, #0]
 800816e:	f46f 53c0 	mvn.w	r3, #6144	; 0x1800
 8008172:	2200      	movs	r2, #0
 8008174:	4961      	ldr	r1, [pc, #388]	; (80082fc <dwt_ioctl+0x784>)
 8008176:	4630      	mov	r0, r6
 8008178:	f7fe fdfe 	bl	8006d78 <dwt_modify32bitoffsetreg>
 800817c:	e7c8      	b.n	8008110 <dwt_ioctl+0x598>
 800817e:	2301      	movs	r3, #1
 8008180:	2200      	movs	r2, #0
 8008182:	495f      	ldr	r1, [pc, #380]	; (8008300 <dwt_ioctl+0x788>)
 8008184:	4630      	mov	r0, r6
 8008186:	f7fe f912 	bl	80063ae <dwt_write8bitoffsetreg>
 800818a:	6d32      	ldr	r2, [r6, #80]	; 0x50
 800818c:	7e13      	ldrb	r3, [r2, #24]
 800818e:	f043 0302 	orr.w	r3, r3, #2
 8008192:	7613      	strb	r3, [r2, #24]
 8008194:	e7c0      	b.n	8008118 <dwt_ioctl+0x5a0>
 8008196:	4630      	mov	r0, r6
 8008198:	f7fe fe12 	bl	8006dc0 <_dwt_kick_dgc_on_wakeup>
 800819c:	2500      	movs	r5, #0
 800819e:	e595      	b.n	8007ccc <dwt_ioctl+0x154>
 80081a0:	2c00      	cmp	r4, #0
 80081a2:	f001 82f5 	beq.w	8009790 <dwt_ioctl+0x1c18>
 80081a6:	7823      	ldrb	r3, [r4, #0]
 80081a8:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80081aa:	75d3      	strb	r3, [r2, #23]
 80081ac:	031b      	lsls	r3, r3, #12
 80081ae:	f403 4330 	and.w	r3, r3, #45056	; 0xb000
 80081b2:	9300      	str	r3, [sp, #0]
 80081b4:	f644 73ff 	movw	r3, #20479	; 0x4fff
 80081b8:	2200      	movs	r2, #0
 80081ba:	2110      	movs	r1, #16
 80081bc:	f7ff f978 	bl	80074b0 <dwt_modify16bitoffsetreg>
 80081c0:	2500      	movs	r5, #0
 80081c2:	e583      	b.n	8007ccc <dwt_ioctl+0x154>
 80081c4:	2c00      	cmp	r4, #0
 80081c6:	f001 82e6 	beq.w	8009796 <dwt_ioctl+0x1c1e>
 80081ca:	8823      	ldrh	r3, [r4, #0]
 80081cc:	2200      	movs	r2, #0
 80081ce:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 80081d2:	f7fe f93e 	bl	8006452 <dwt_write16bitoffsetreg>
 80081d6:	2500      	movs	r5, #0
 80081d8:	e578      	b.n	8007ccc <dwt_ioctl+0x154>
 80081da:	2c00      	cmp	r4, #0
 80081dc:	f001 82de 	beq.w	800979c <dwt_ioctl+0x1c24>
 80081e0:	2200      	movs	r2, #0
 80081e2:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 80081e6:	f7fd fd09 	bl	8005bfc <dwt_read16bitoffsetreg>
 80081ea:	8020      	strh	r0, [r4, #0]
 80081ec:	2500      	movs	r5, #0
 80081ee:	e56d      	b.n	8007ccc <dwt_ioctl+0x154>
 80081f0:	2c00      	cmp	r4, #0
 80081f2:	f001 82d6 	beq.w	80097a2 <dwt_ioctl+0x1c2a>
 80081f6:	8823      	ldrh	r3, [r4, #0]
 80081f8:	2200      	movs	r2, #0
 80081fa:	4942      	ldr	r1, [pc, #264]	; (8008304 <dwt_ioctl+0x78c>)
 80081fc:	f7fe f929 	bl	8006452 <dwt_write16bitoffsetreg>
 8008200:	2500      	movs	r5, #0
 8008202:	e563      	b.n	8007ccc <dwt_ioctl+0x154>
 8008204:	2c00      	cmp	r4, #0
 8008206:	f001 82cf 	beq.w	80097a8 <dwt_ioctl+0x1c30>
 800820a:	2200      	movs	r2, #0
 800820c:	493d      	ldr	r1, [pc, #244]	; (8008304 <dwt_ioctl+0x78c>)
 800820e:	f7fd fcf5 	bl	8005bfc <dwt_read16bitoffsetreg>
 8008212:	8020      	strh	r0, [r4, #0]
 8008214:	2500      	movs	r5, #0
 8008216:	e559      	b.n	8007ccc <dwt_ioctl+0x154>
 8008218:	2c00      	cmp	r4, #0
 800821a:	f001 82c8 	beq.w	80097ae <dwt_ioctl+0x1c36>
 800821e:	88a3      	ldrh	r3, [r4, #4]
 8008220:	88e2      	ldrh	r2, [r4, #6]
 8008222:	6821      	ldr	r1, [r4, #0]
 8008224:	9100      	str	r1, [sp, #0]
 8008226:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 800822a:	f7fe f8b5 	bl	8006398 <dwt_writetodevice>
 800822e:	2500      	movs	r5, #0
 8008230:	e54c      	b.n	8007ccc <dwt_ioctl+0x154>
 8008232:	2c00      	cmp	r4, #0
 8008234:	f001 82be 	beq.w	80097b4 <dwt_ioctl+0x1c3c>
 8008238:	88a3      	ldrh	r3, [r4, #4]
 800823a:	88e2      	ldrh	r2, [r4, #6]
 800823c:	6821      	ldr	r1, [r4, #0]
 800823e:	9100      	str	r1, [sp, #0]
 8008240:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 8008244:	f7fd fcba 	bl	8005bbc <dwt_readfromdevice>
 8008248:	2500      	movs	r5, #0
 800824a:	e53f      	b.n	8007ccc <dwt_ioctl+0x154>
 800824c:	2c00      	cmp	r4, #0
 800824e:	f001 82b4 	beq.w	80097ba <dwt_ioctl+0x1c42>
 8008252:	88e3      	ldrh	r3, [r4, #6]
 8008254:	88a2      	ldrh	r2, [r4, #4]
 8008256:	6821      	ldr	r1, [r4, #0]
 8008258:	f7fe fcc2 	bl	8006be0 <ull_readrxdata>
 800825c:	2500      	movs	r5, #0
 800825e:	e535      	b.n	8007ccc <dwt_ioctl+0x154>
 8008260:	2c00      	cmp	r4, #0
 8008262:	f001 82ad 	beq.w	80097c0 <dwt_ioctl+0x1c48>
 8008266:	88e3      	ldrh	r3, [r4, #6]
 8008268:	6822      	ldr	r2, [r4, #0]
 800826a:	88a1      	ldrh	r1, [r4, #4]
 800826c:	f7fe fd52 	bl	8006d14 <ull_writetxdata>
 8008270:	2500      	movs	r5, #0
 8008272:	e52b      	b.n	8007ccc <dwt_ioctl+0x154>
 8008274:	4611      	mov	r1, r2
 8008276:	f7fe fce9 	bl	8006c4c <ull_rxenable>
 800827a:	2500      	movs	r5, #0
 800827c:	e526      	b.n	8007ccc <dwt_ioctl+0x154>
 800827e:	2c00      	cmp	r4, #0
 8008280:	f001 82a1 	beq.w	80097c6 <dwt_ioctl+0x1c4e>
 8008284:	7923      	ldrb	r3, [r4, #4]
 8008286:	8862      	ldrh	r2, [r4, #2]
 8008288:	8821      	ldrh	r1, [r4, #0]
 800828a:	f7fe ff2d 	bl	80070e8 <ull_writetxfctrl>
 800828e:	2500      	movs	r5, #0
 8008290:	e51c      	b.n	8007ccc <dwt_ioctl+0x154>
 8008292:	2c00      	cmp	r4, #0
 8008294:	f001 829a 	beq.w	80097cc <dwt_ioctl+0x1c54>
 8008298:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800829a:	7bdb      	ldrb	r3, [r3, #15]
 800829c:	2b01      	cmp	r3, #1
 800829e:	d00c      	beq.n	80082ba <dwt_ioctl+0x742>
 80082a0:	2b03      	cmp	r3, #3
 80082a2:	d110      	bne.n	80082c6 <dwt_ioctl+0x74e>
 80082a4:	220c      	movs	r2, #12
 80082a6:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 80082aa:	f7fd fca7 	bl	8005bfc <dwt_read16bitoffsetreg>
 80082ae:	b200      	sxth	r0, r0
 80082b0:	f340 030c 	sbfx	r3, r0, #0, #13
 80082b4:	8023      	strh	r3, [r4, #0]
 80082b6:	2500      	movs	r5, #0
 80082b8:	e508      	b.n	8007ccc <dwt_ioctl+0x154>
 80082ba:	2200      	movs	r2, #0
 80082bc:	4912      	ldr	r1, [pc, #72]	; (8008308 <dwt_ioctl+0x790>)
 80082be:	f7fd fc9d 	bl	8005bfc <dwt_read16bitoffsetreg>
 80082c2:	b200      	sxth	r0, r0
 80082c4:	e7f4      	b.n	80082b0 <dwt_ioctl+0x738>
 80082c6:	2200      	movs	r2, #0
 80082c8:	4910      	ldr	r1, [pc, #64]	; (800830c <dwt_ioctl+0x794>)
 80082ca:	f7fd fc97 	bl	8005bfc <dwt_read16bitoffsetreg>
 80082ce:	b200      	sxth	r0, r0
 80082d0:	e7ee      	b.n	80082b0 <dwt_ioctl+0x738>
 80082d2:	bf00      	nop
 80082d4:	00110008 	.word	0x00110008
 80082d8:	00d20874 	.word	0x00d20874
 80082dc:	00110010 	.word	0x00110010
 80082e0:	04d28874 	.word	0x04d28874
 80082e4:	0007001c 	.word	0x0007001c
 80082e8:	00020004 	.word	0x00020004
 80082ec:	00070050 	.word	0x00070050
 80082f0:	001f000c 	.word	0x001f000c
 80082f4:	001f0010 	.word	0x001f0010
 80082f8:	00010014 	.word	0x00010014
 80082fc:	000b0008 	.word	0x000b0008
 8008300:	00010028 	.word	0x00010028
 8008304:	00010004 	.word	0x00010004
 8008308:	0018000c 	.word	0x0018000c
 800830c:	000c0020 	.word	0x000c0020
 8008310:	2c00      	cmp	r4, #0
 8008312:	f001 825e 	beq.w	80097d2 <dwt_ioctl+0x1c5a>
 8008316:	ab0c      	add	r3, sp, #48	; 0x30
 8008318:	9300      	str	r3, [sp, #0]
 800831a:	2303      	movs	r3, #3
 800831c:	2200      	movs	r2, #0
 800831e:	49bb      	ldr	r1, [pc, #748]	; (800860c <dwt_ioctl+0xa94>)
 8008320:	f7fd fc4c 	bl	8005bbc <dwt_readfromdevice>
 8008324:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 8008328:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 800832c:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 8008330:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8008334:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8008338:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800833c:	bf1c      	itt	ne
 800833e:	ea6f 3303 	mvnne.w	r3, r3, lsl #12
 8008342:	ea6f 3313 	mvnne.w	r3, r3, lsr #12
 8008346:	6023      	str	r3, [r4, #0]
 8008348:	2500      	movs	r5, #0
 800834a:	e4bf      	b.n	8007ccc <dwt_ioctl+0x154>
 800834c:	f7fe f892 	bl	8006474 <ull_clearaonconfig>
 8008350:	2500      	movs	r5, #0
 8008352:	e4bb      	b.n	8007ccc <dwt_ioctl+0x154>
 8008354:	2c00      	cmp	r4, #0
 8008356:	f001 823f 	beq.w	80097d8 <dwt_ioctl+0x1c60>
 800835a:	8861      	ldrh	r1, [r4, #2]
 800835c:	f7fe ff40 	bl	80071e0 <ull_calcbandwidthadj>
 8008360:	7020      	strb	r0, [r4, #0]
 8008362:	2500      	movs	r5, #0
 8008364:	e4b2      	b.n	8007ccc <dwt_ioctl+0x154>
 8008366:	4621      	mov	r1, r4
 8008368:	f7fd fc68 	bl	8005c3c <ull_readdiagnostics>
 800836c:	2500      	movs	r5, #0
 800836e:	e4ad      	b.n	8007ccc <dwt_ioctl+0x154>
 8008370:	2c00      	cmp	r4, #0
 8008372:	f001 8234 	beq.w	80097de <dwt_ioctl+0x1c66>
 8008376:	2201      	movs	r2, #1
 8008378:	2174      	movs	r1, #116	; 0x74
 800837a:	f7fd fc29 	bl	8005bd0 <dwt_read32bitoffsetreg>
 800837e:	6020      	str	r0, [r4, #0]
 8008380:	2500      	movs	r5, #0
 8008382:	e4a3      	b.n	8007ccc <dwt_ioctl+0x154>
 8008384:	2c00      	cmp	r4, #0
 8008386:	f001 822d 	beq.w	80097e4 <dwt_ioctl+0x1c6c>
 800838a:	2200      	movs	r2, #0
 800838c:	2174      	movs	r1, #116	; 0x74
 800838e:	f7fd fc1f 	bl	8005bd0 <dwt_read32bitoffsetreg>
 8008392:	6020      	str	r0, [r4, #0]
 8008394:	2500      	movs	r5, #0
 8008396:	e499      	b.n	8007ccc <dwt_ioctl+0x154>
 8008398:	9400      	str	r4, [sp, #0]
 800839a:	2305      	movs	r3, #5
 800839c:	2200      	movs	r2, #0
 800839e:	2174      	movs	r1, #116	; 0x74
 80083a0:	f7fd fc0c 	bl	8005bbc <dwt_readfromdevice>
 80083a4:	2500      	movs	r5, #0
 80083a6:	e491      	b.n	8007ccc <dwt_ioctl+0x154>
 80083a8:	2c00      	cmp	r4, #0
 80083aa:	f001 821e 	beq.w	80097ea <dwt_ioctl+0x1c72>
 80083ae:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80083b0:	7bdb      	ldrb	r3, [r3, #15]
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	d014      	beq.n	80083e0 <dwt_ioctl+0x868>
 80083b6:	2b03      	cmp	r3, #3
 80083b8:	d119      	bne.n	80083ee <dwt_ioctl+0x876>
 80083ba:	2216      	movs	r2, #22
 80083bc:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 80083c0:	f7fd fc1c 	bl	8005bfc <dwt_read16bitoffsetreg>
 80083c4:	f3c0 000d 	ubfx	r0, r0, #0, #14
 80083c8:	b283      	uxth	r3, r0
 80083ca:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80083ce:	d004      	beq.n	80083da <dwt_ioctl+0x862>
 80083d0:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 80083d4:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 80083d8:	b218      	sxth	r0, r3
 80083da:	8020      	strh	r0, [r4, #0]
 80083dc:	2500      	movs	r5, #0
 80083de:	e475      	b.n	8007ccc <dwt_ioctl+0x154>
 80083e0:	2202      	movs	r2, #2
 80083e2:	498b      	ldr	r1, [pc, #556]	; (8008610 <dwt_ioctl+0xa98>)
 80083e4:	f7fd fc0a 	bl	8005bfc <dwt_read16bitoffsetreg>
 80083e8:	f3c0 000d 	ubfx	r0, r0, #0, #14
 80083ec:	e7ec      	b.n	80083c8 <dwt_ioctl+0x850>
 80083ee:	2202      	movs	r2, #2
 80083f0:	4988      	ldr	r1, [pc, #544]	; (8008614 <dwt_ioctl+0xa9c>)
 80083f2:	f7fd fc03 	bl	8005bfc <dwt_read16bitoffsetreg>
 80083f6:	f3c0 000d 	ubfx	r0, r0, #0, #14
 80083fa:	e7e5      	b.n	80083c8 <dwt_ioctl+0x850>
 80083fc:	9400      	str	r4, [sp, #0]
 80083fe:	2306      	movs	r3, #6
 8008400:	2200      	movs	r2, #0
 8008402:	4985      	ldr	r1, [pc, #532]	; (8008618 <dwt_ioctl+0xaa0>)
 8008404:	f7fd fbda 	bl	8005bbc <dwt_readfromdevice>
 8008408:	7963      	ldrb	r3, [r4, #5]
 800840a:	f003 0301 	and.w	r3, r3, #1
 800840e:	7163      	strb	r3, [r4, #5]
 8008410:	2500      	movs	r5, #0
 8008412:	e45b      	b.n	8007ccc <dwt_ioctl+0x154>
 8008414:	2c00      	cmp	r4, #0
 8008416:	f001 81eb 	beq.w	80097f0 <dwt_ioctl+0x1c78>
 800841a:	2201      	movs	r2, #1
 800841c:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 8008420:	f7fd fbfe 	bl	8005c20 <dwt_read8bitoffsetreg>
 8008424:	7020      	strb	r0, [r4, #0]
 8008426:	2500      	movs	r5, #0
 8008428:	e450      	b.n	8007ccc <dwt_ioctl+0x154>
 800842a:	2c00      	cmp	r4, #0
 800842c:	f001 81e3 	beq.w	80097f6 <dwt_ioctl+0x1c7e>
 8008430:	2200      	movs	r2, #0
 8008432:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 8008436:	f7fd fbf3 	bl	8005c20 <dwt_read8bitoffsetreg>
 800843a:	7020      	strb	r0, [r4, #0]
 800843c:	2500      	movs	r5, #0
 800843e:	e445      	b.n	8007ccc <dwt_ioctl+0x154>
 8008440:	2c00      	cmp	r4, #0
 8008442:	f001 81db 	beq.w	80097fc <dwt_ioctl+0x1c84>
 8008446:	88a2      	ldrh	r2, [r4, #4]
 8008448:	6821      	ldr	r1, [r4, #0]
 800844a:	f7fe fd1d 	bl	8006e88 <_dwt_otpprogword32>
 800844e:	2500      	movs	r5, #0
 8008450:	e43c      	b.n	8007ccc <dwt_ioctl+0x154>
 8008452:	2c00      	cmp	r4, #0
 8008454:	f001 81d5 	beq.w	8009802 <dwt_ioctl+0x1c8a>
 8008458:	6825      	ldr	r5, [r4, #0]
 800845a:	88a4      	ldrh	r4, [r4, #4]
 800845c:	4622      	mov	r2, r4
 800845e:	4629      	mov	r1, r5
 8008460:	f7fe fd12 	bl	8006e88 <_dwt_otpprogword32>
 8008464:	4621      	mov	r1, r4
 8008466:	4630      	mov	r0, r6
 8008468:	f7fe f84e 	bl	8006508 <_dwt_otpread>
 800846c:	1a2d      	subs	r5, r5, r0
 800846e:	bf18      	it	ne
 8008470:	f04f 35ff 	movne.w	r5, #4294967295
 8008474:	e42a      	b.n	8007ccc <dwt_ioctl+0x154>
 8008476:	2a02      	cmp	r2, #2
 8008478:	d00e      	beq.n	8008498 <dwt_ioctl+0x920>
 800847a:	4c68      	ldr	r4, [pc, #416]	; (800861c <dwt_ioctl+0xaa4>)
 800847c:	2300      	movs	r3, #0
 800847e:	461a      	mov	r2, r3
 8008480:	4621      	mov	r1, r4
 8008482:	4630      	mov	r0, r6
 8008484:	f7fd ff93 	bl	80063ae <dwt_write8bitoffsetreg>
 8008488:	2302      	movs	r3, #2
 800848a:	2200      	movs	r2, #0
 800848c:	4621      	mov	r1, r4
 800848e:	4630      	mov	r0, r6
 8008490:	f7fd ff8d 	bl	80063ae <dwt_write8bitoffsetreg>
 8008494:	2500      	movs	r5, #0
 8008496:	e419      	b.n	8007ccc <dwt_ioctl+0x154>
 8008498:	2300      	movs	r3, #0
 800849a:	9300      	str	r3, [sp, #0]
 800849c:	23fe      	movs	r3, #254	; 0xfe
 800849e:	2201      	movs	r2, #1
 80084a0:	495f      	ldr	r1, [pc, #380]	; (8008620 <dwt_ioctl+0xaa8>)
 80084a2:	f7fe fe53 	bl	800714c <dwt_modify8bitoffsetreg>
 80084a6:	e7e8      	b.n	800847a <dwt_ioctl+0x902>
 80084a8:	2c00      	cmp	r4, #0
 80084aa:	f001 81ad 	beq.w	8009808 <dwt_ioctl+0x1c90>
 80084ae:	8824      	ldrh	r4, [r4, #0]
 80084b0:	b2e2      	uxtb	r2, r4
 80084b2:	f44f 7181 	mov.w	r1, #258	; 0x102
 80084b6:	f7fe f869 	bl	800658c <ull_aon_write>
 80084ba:	0a22      	lsrs	r2, r4, #8
 80084bc:	f240 1103 	movw	r1, #259	; 0x103
 80084c0:	4630      	mov	r0, r6
 80084c2:	f7fe f863 	bl	800658c <ull_aon_write>
 80084c6:	2500      	movs	r5, #0
 80084c8:	e400      	b.n	8007ccc <dwt_ioctl+0x154>
 80084ca:	2c00      	cmp	r4, #0
 80084cc:	f001 819f 	beq.w	800980e <dwt_ioctl+0x1c96>
 80084d0:	f8df 8158 	ldr.w	r8, [pc, #344]	; 800862c <dwt_ioctl+0xab4>
 80084d4:	2310      	movs	r3, #16
 80084d6:	9300      	str	r3, [sp, #0]
 80084d8:	23ff      	movs	r3, #255	; 0xff
 80084da:	2200      	movs	r2, #0
 80084dc:	4641      	mov	r1, r8
 80084de:	f7fe fe35 	bl	800714c <dwt_modify8bitoffsetreg>
 80084e2:	f44f 7182 	mov.w	r1, #260	; 0x104
 80084e6:	4630      	mov	r0, r6
 80084e8:	f7fe f830 	bl	800654c <ull_aon_read>
 80084ec:	f000 05e0 	and.w	r5, r0, #224	; 0xe0
 80084f0:	462a      	mov	r2, r5
 80084f2:	f44f 7182 	mov.w	r1, #260	; 0x104
 80084f6:	4630      	mov	r0, r6
 80084f8:	f7fe f848 	bl	800658c <ull_aon_write>
 80084fc:	f045 0204 	orr.w	r2, r5, #4
 8008500:	f44f 7182 	mov.w	r1, #260	; 0x104
 8008504:	4630      	mov	r0, r6
 8008506:	f7fe f841 	bl	800658c <ull_aon_write>
 800850a:	2002      	movs	r0, #2
 800850c:	f7f7 fffe 	bl	800050c <deca_sleep>
 8008510:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8008514:	4630      	mov	r0, r6
 8008516:	f7fe f819 	bl	800654c <ull_aon_read>
 800851a:	4607      	mov	r7, r0
 800851c:	f240 110f 	movw	r1, #271	; 0x10f
 8008520:	4630      	mov	r0, r6
 8008522:	f7fe f813 	bl	800654c <ull_aon_read>
 8008526:	4681      	mov	r9, r0
 8008528:	462a      	mov	r2, r5
 800852a:	f44f 7182 	mov.w	r1, #260	; 0x104
 800852e:	4630      	mov	r0, r6
 8008530:	f7fe f82c 	bl	800658c <ull_aon_write>
 8008534:	2500      	movs	r5, #0
 8008536:	9500      	str	r5, [sp, #0]
 8008538:	23ef      	movs	r3, #239	; 0xef
 800853a:	462a      	mov	r2, r5
 800853c:	4641      	mov	r1, r8
 800853e:	4630      	mov	r0, r6
 8008540:	f7fe fe04 	bl	800714c <dwt_modify8bitoffsetreg>
 8008544:	ea47 2709 	orr.w	r7, r7, r9, lsl #8
 8008548:	8027      	strh	r7, [r4, #0]
 800854a:	f7ff bbbf 	b.w	8007ccc <dwt_ioctl+0x154>
 800854e:	2c00      	cmp	r4, #0
 8008550:	f001 8160 	beq.w	8009814 <dwt_ioctl+0x1c9c>
 8008554:	78a2      	ldrb	r2, [r4, #2]
 8008556:	8821      	ldrh	r1, [r4, #0]
 8008558:	f7fe f840 	bl	80065dc <ull_configuresleep>
 800855c:	2500      	movs	r5, #0
 800855e:	f7ff bbb5 	b.w	8007ccc <dwt_ioctl+0x154>
 8008562:	f7fd ff87 	bl	8006474 <ull_clearaonconfig>
 8008566:	2001      	movs	r0, #1
 8008568:	f7f7 ffd0 	bl	800050c <deca_sleep>
 800856c:	2303      	movs	r3, #3
 800856e:	9300      	str	r3, [sp, #0]
 8008570:	23ff      	movs	r3, #255	; 0xff
 8008572:	2200      	movs	r2, #0
 8008574:	492b      	ldr	r1, [pc, #172]	; (8008624 <dwt_ioctl+0xaac>)
 8008576:	4630      	mov	r0, r6
 8008578:	f7fe fde8 	bl	800714c <dwt_modify8bitoffsetreg>
 800857c:	2300      	movs	r3, #0
 800857e:	461a      	mov	r2, r3
 8008580:	f44f 1188 	mov.w	r1, #1114112	; 0x110000
 8008584:	4630      	mov	r0, r6
 8008586:	f7fd ff12 	bl	80063ae <dwt_write8bitoffsetreg>
 800858a:	2001      	movs	r0, #1
 800858c:	f7f7 ffbe 	bl	800050c <deca_sleep>
 8008590:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8008592:	2500      	movs	r5, #0
 8008594:	73dd      	strb	r5, [r3, #15]
 8008596:	2202      	movs	r2, #2
 8008598:	825a      	strh	r2, [r3, #18]
 800859a:	759d      	strb	r5, [r3, #22]
 800859c:	75dd      	strb	r5, [r3, #23]
 800859e:	741d      	strb	r5, [r3, #16]
 80085a0:	f7ff bb94 	b.w	8007ccc <dwt_ioctl+0x154>
 80085a4:	2c00      	cmp	r4, #0
 80085a6:	f001 8138 	beq.w	800981a <dwt_ioctl+0x1ca2>
 80085aa:	7823      	ldrb	r3, [r4, #0]
 80085ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80085b0:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80085b2:	7393      	strb	r3, [r2, #14]
 80085b4:	2200      	movs	r2, #0
 80085b6:	491c      	ldr	r1, [pc, #112]	; (8008628 <dwt_ioctl+0xab0>)
 80085b8:	f7fd fef9 	bl	80063ae <dwt_write8bitoffsetreg>
 80085bc:	2500      	movs	r5, #0
 80085be:	f7ff bb85 	b.w	8007ccc <dwt_ioctl+0x154>
 80085c2:	2c00      	cmp	r4, #0
 80085c4:	f001 812c 	beq.w	8009820 <dwt_ioctl+0x1ca8>
 80085c8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80085ca:	7b9b      	ldrb	r3, [r3, #14]
 80085cc:	7023      	strb	r3, [r4, #0]
 80085ce:	2500      	movs	r5, #0
 80085d0:	f7ff bb7c 	b.w	8007ccc <dwt_ioctl+0x154>
 80085d4:	2101      	movs	r1, #1
 80085d6:	f7fe fc11 	bl	8006dfc <ull_enable_rf_tx>
 80085da:	4630      	mov	r0, r6
 80085dc:	f7fe fc42 	bl	8006e64 <ull_enable_rftx_blocks>
 80085e0:	2101      	movs	r1, #1
 80085e2:	4630      	mov	r0, r6
 80085e4:	f7fd ff66 	bl	80064b4 <ull_force_clocks>
 80085e8:	220f      	movs	r2, #15
 80085ea:	2101      	movs	r1, #1
 80085ec:	4630      	mov	r0, r6
 80085ee:	f7ff f86f 	bl	80076d0 <ull_repeated_cw>
 80085f2:	2500      	movs	r5, #0
 80085f4:	f7ff bb6a 	b.w	8007ccc <dwt_ioctl+0x154>
 80085f8:	2c00      	cmp	r4, #0
 80085fa:	f001 8114 	beq.w	8009826 <dwt_ioctl+0x1cae>
 80085fe:	6862      	ldr	r2, [r4, #4]
 8008600:	6821      	ldr	r1, [r4, #0]
 8008602:	f7ff f865 	bl	80076d0 <ull_repeated_cw>
 8008606:	2500      	movs	r5, #0
 8008608:	f7ff bb60 	b.w	8007ccc <dwt_ioctl+0x154>
 800860c:	00060029 	.word	0x00060029
 8008610:	00180014 	.word	0x00180014
 8008614:	000c001c 	.word	0x000c001c
 8008618:	000c0018 	.word	0x000c0018
 800861c:	000a0004 	.word	0x000a0004
 8008620:	00110008 	.word	0x00110008
 8008624:	00110004 	.word	0x00110004
 8008628:	00090014 	.word	0x00090014
 800862c:	00070048 	.word	0x00070048
 8008630:	2c00      	cmp	r4, #0
 8008632:	f001 80fb 	beq.w	800982c <dwt_ioctl+0x1cb4>
 8008636:	4dd6      	ldr	r5, [pc, #856]	; (8008990 <dwt_ioctl+0xe18>)
 8008638:	2200      	movs	r2, #0
 800863a:	4629      	mov	r1, r5
 800863c:	f7fd faf0 	bl	8005c20 <dwt_read8bitoffsetreg>
 8008640:	4680      	mov	r8, r0
 8008642:	2302      	movs	r3, #2
 8008644:	9300      	str	r3, [sp, #0]
 8008646:	23ff      	movs	r3, #255	; 0xff
 8008648:	2200      	movs	r2, #0
 800864a:	4629      	mov	r1, r5
 800864c:	4630      	mov	r0, r6
 800864e:	f7fe fd7d 	bl	800714c <dwt_modify8bitoffsetreg>
 8008652:	2304      	movs	r3, #4
 8008654:	2200      	movs	r2, #0
 8008656:	49cf      	ldr	r1, [pc, #828]	; (8008994 <dwt_ioctl+0xe1c>)
 8008658:	4630      	mov	r0, r6
 800865a:	f7fd fea8 	bl	80063ae <dwt_write8bitoffsetreg>
 800865e:	2301      	movs	r3, #1
 8008660:	2200      	movs	r2, #0
 8008662:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008666:	4630      	mov	r0, r6
 8008668:	f7fd fea1 	bl	80063ae <dwt_write8bitoffsetreg>
 800866c:	4fca      	ldr	r7, [pc, #808]	; (8008998 <dwt_ioctl+0xe20>)
 800866e:	2500      	movs	r5, #0
 8008670:	462a      	mov	r2, r5
 8008672:	4639      	mov	r1, r7
 8008674:	4630      	mov	r0, r6
 8008676:	f7fd fad3 	bl	8005c20 <dwt_read8bitoffsetreg>
 800867a:	f010 0f01 	tst.w	r0, #1
 800867e:	d0f7      	beq.n	8008670 <dwt_ioctl+0xaf8>
 8008680:	2200      	movs	r2, #0
 8008682:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 8008686:	4630      	mov	r0, r6
 8008688:	f7fd fab8 	bl	8005bfc <dwt_read16bitoffsetreg>
 800868c:	4605      	mov	r5, r0
 800868e:	2300      	movs	r3, #0
 8008690:	461a      	mov	r2, r3
 8008692:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008696:	4630      	mov	r0, r6
 8008698:	f7fd fe89 	bl	80063ae <dwt_write8bitoffsetreg>
 800869c:	2300      	movs	r3, #0
 800869e:	461a      	mov	r2, r3
 80086a0:	49bc      	ldr	r1, [pc, #752]	; (8008994 <dwt_ioctl+0xe1c>)
 80086a2:	4630      	mov	r0, r6
 80086a4:	f7fd fe83 	bl	80063ae <dwt_write8bitoffsetreg>
 80086a8:	4643      	mov	r3, r8
 80086aa:	2200      	movs	r2, #0
 80086ac:	49b8      	ldr	r1, [pc, #736]	; (8008990 <dwt_ioctl+0xe18>)
 80086ae:	4630      	mov	r0, r6
 80086b0:	f7fd fe7d 	bl	80063ae <dwt_write8bitoffsetreg>
 80086b4:	8025      	strh	r5, [r4, #0]
 80086b6:	2500      	movs	r5, #0
 80086b8:	f7ff bb08 	b.w	8007ccc <dwt_ioctl+0x154>
 80086bc:	2c00      	cmp	r4, #0
 80086be:	f001 80b8 	beq.w	8009832 <dwt_ioctl+0x1cba>
 80086c2:	7923      	ldrb	r3, [r4, #4]
 80086c4:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80086c6:	7ad2      	ldrb	r2, [r2, #11]
 80086c8:	1a9b      	subs	r3, r3, r2
 80086ca:	ee07 3a90 	vmov	s15, r3
 80086ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80086d2:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 800899c <dwt_ioctl+0xe24>
 80086d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80086da:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 80086de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80086e2:	edc4 7a00 	vstr	s15, [r4]
 80086e6:	2500      	movs	r5, #0
 80086e8:	f7ff baf0 	b.w	8007ccc <dwt_ioctl+0x154>
 80086ec:	2c00      	cmp	r4, #0
 80086ee:	f001 80a3 	beq.w	8009838 <dwt_ioctl+0x1cc0>
 80086f2:	7923      	ldrb	r3, [r4, #4]
 80086f4:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80086f6:	7a92      	ldrb	r2, [r2, #10]
 80086f8:	1a9b      	subs	r3, r3, r2
 80086fa:	ee07 3a90 	vmov	s15, r3
 80086fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008702:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 80089a0 <dwt_ioctl+0xe28>
 8008706:	ee67 7a87 	vmul.f32	s15, s15, s14
 800870a:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800870e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008712:	eddf 6aa4 	vldr	s13, [pc, #656]	; 80089a4 <dwt_ioctl+0xe2c>
 8008716:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800871a:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 800871e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008722:	edc4 7a00 	vstr	s15, [r4]
 8008726:	2500      	movs	r5, #0
 8008728:	f7ff bad0 	b.w	8007ccc <dwt_ioctl+0x154>
 800872c:	2c00      	cmp	r4, #0
 800872e:	f001 8086 	beq.w	800983e <dwt_ioctl+0x1cc6>
 8008732:	6824      	ldr	r4, [r4, #0]
 8008734:	2101      	movs	r1, #1
 8008736:	f7fe fb61 	bl	8006dfc <ull_enable_rf_tx>
 800873a:	4630      	mov	r0, r6
 800873c:	f7fe fb92 	bl	8006e64 <ull_enable_rftx_blocks>
 8008740:	2101      	movs	r1, #1
 8008742:	4630      	mov	r0, r6
 8008744:	f7fd feb6 	bl	80064b4 <ull_force_clocks>
 8008748:	4621      	mov	r1, r4
 800874a:	4630      	mov	r0, r6
 800874c:	f7fe fda4 	bl	8007298 <ull_repeated_frames>
 8008750:	2500      	movs	r5, #0
 8008752:	f7ff babb 	b.w	8007ccc <dwt_ioctl+0x154>
 8008756:	2500      	movs	r5, #0
 8008758:	9500      	str	r5, [sp, #0]
 800875a:	23ef      	movs	r3, #239	; 0xef
 800875c:	462a      	mov	r2, r5
 800875e:	4992      	ldr	r1, [pc, #584]	; (80089a8 <dwt_ioctl+0xe30>)
 8008760:	f7fe fcf4 	bl	800714c <dwt_modify8bitoffsetreg>
 8008764:	2105      	movs	r1, #5
 8008766:	4630      	mov	r0, r6
 8008768:	f7fd fea4 	bl	80064b4 <ull_force_clocks>
 800876c:	2101      	movs	r1, #1
 800876e:	4630      	mov	r0, r6
 8008770:	f7fe fa18 	bl	8006ba4 <ull_disable_rf_tx>
 8008774:	4630      	mov	r0, r6
 8008776:	f7fe fa0b 	bl	8006b90 <ull_disable_rftx_blocks>
 800877a:	f7ff baa7 	b.w	8007ccc <dwt_ioctl+0x154>
 800877e:	2500      	movs	r5, #0
 8008780:	9500      	str	r5, [sp, #0]
 8008782:	23ef      	movs	r3, #239	; 0xef
 8008784:	462a      	mov	r2, r5
 8008786:	4988      	ldr	r1, [pc, #544]	; (80089a8 <dwt_ioctl+0xe30>)
 8008788:	f7fe fce0 	bl	800714c <dwt_modify8bitoffsetreg>
 800878c:	f7ff ba9e 	b.w	8007ccc <dwt_ioctl+0x154>
 8008790:	2c00      	cmp	r4, #0
 8008792:	f001 8057 	beq.w	8009844 <dwt_ioctl+0x1ccc>
 8008796:	6821      	ldr	r1, [r4, #0]
 8008798:	f7fe fd7e 	bl	8007298 <ull_repeated_frames>
 800879c:	2500      	movs	r5, #0
 800879e:	f7ff ba95 	b.w	8007ccc <dwt_ioctl+0x154>
 80087a2:	2200      	movs	r2, #0
 80087a4:	4981      	ldr	r1, [pc, #516]	; (80089ac <dwt_ioctl+0xe34>)
 80087a6:	f7fd fa29 	bl	8005bfc <dwt_read16bitoffsetreg>
 80087aa:	f3c0 050b 	ubfx	r5, r0, #0, #12
 80087ae:	f410 6f00 	tst.w	r0, #2048	; 0x800
 80087b2:	bf18      	it	ne
 80087b4:	f445 4570 	orrne.w	r5, r5, #61440	; 0xf000
 80087b8:	b22d      	sxth	r5, r5
 80087ba:	8025      	strh	r5, [r4, #0]
 80087bc:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80087be:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80087c2:	1aed      	subs	r5, r5, r3
 80087c4:	f7ff ba82 	b.w	8007ccc <dwt_ioctl+0x154>
 80087c8:	2c00      	cmp	r4, #0
 80087ca:	f001 806d 	beq.w	80098a8 <dwt_ioctl+0x1d30>
 80087ce:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80087d2:	7a23      	ldrb	r3, [r4, #8]
 80087d4:	f899 2013 	ldrb.w	r2, [r9, #19]
 80087d8:	2aff      	cmp	r2, #255	; 0xff
 80087da:	f000 813f 	beq.w	8008a5c <dwt_ioctl+0xee4>
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d136      	bne.n	8008850 <dwt_ioctl+0xcd8>
 80087e2:	f8d9 3000 	ldr.w	r3, [r9]
 80087e6:	9300      	str	r3, [sp, #0]
 80087e8:	230c      	movs	r3, #12
 80087ea:	2200      	movs	r2, #0
 80087ec:	4970      	ldr	r1, [pc, #448]	; (80089b0 <dwt_ioctl+0xe38>)
 80087ee:	f7fd fdd3 	bl	8006398 <dwt_writetodevice>
 80087f2:	f899 300c 	ldrb.w	r3, [r9, #12]
 80087f6:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 80087fa:	18d1      	adds	r1, r2, r3
 80087fc:	f899 2012 	ldrb.w	r2, [r9, #18]
 8008800:	2a00      	cmp	r2, #0
 8008802:	d15f      	bne.n	80088c4 <dwt_ioctl+0xd4c>
 8008804:	f899 0010 	ldrb.w	r0, [r9, #16]
 8008808:	2800      	cmp	r0, #0
 800880a:	bf0b      	itete	eq
 800880c:	227f      	moveq	r2, #127	; 0x7f
 800880e:	f44f 6280 	movne.w	r2, #1024	; 0x400
 8008812:	f44f 15b0 	moveq.w	r5, #1441792	; 0x160000
 8008816:	f44f 15a0 	movne.w	r5, #1310720	; 0x140000
 800881a:	f899 0013 	ldrb.w	r0, [r9, #19]
 800881e:	1a12      	subs	r2, r2, r0
 8008820:	3a02      	subs	r2, #2
 8008822:	4291      	cmp	r1, r2
 8008824:	f200 8120 	bhi.w	8008a68 <dwt_ioctl+0xef0>
 8008828:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800882c:	9200      	str	r2, [sp, #0]
 800882e:	2200      	movs	r2, #0
 8008830:	4629      	mov	r1, r5
 8008832:	4630      	mov	r0, r6
 8008834:	f7fd fdb0 	bl	8006398 <dwt_writetodevice>
 8008838:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 800883c:	f899 200c 	ldrb.w	r2, [r9, #12]
 8008840:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8008844:	9100      	str	r1, [sp, #0]
 8008846:	4629      	mov	r1, r5
 8008848:	4630      	mov	r0, r6
 800884a:	f7fd fda5 	bl	8006398 <dwt_writetodevice>
 800884e:	e04a      	b.n	80088e6 <dwt_ioctl+0xd6e>
 8008850:	f8d9 3000 	ldr.w	r3, [r9]
 8008854:	f8b9 100e 	ldrh.w	r1, [r9, #14]
 8008858:	7a9a      	ldrb	r2, [r3, #10]
 800885a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
 800885e:	7a5a      	ldrb	r2, [r3, #9]
 8008860:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
 8008864:	7a1a      	ldrb	r2, [r3, #8]
 8008866:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
 800886a:	79da      	ldrb	r2, [r3, #7]
 800886c:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 8008870:	799a      	ldrb	r2, [r3, #6]
 8008872:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 8008876:	795a      	ldrb	r2, [r3, #5]
 8008878:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
 800887c:	791a      	ldrb	r2, [r3, #4]
 800887e:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 8008882:	78da      	ldrb	r2, [r3, #3]
 8008884:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
 8008888:	789a      	ldrb	r2, [r3, #2]
 800888a:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
 800888e:	785a      	ldrb	r2, [r3, #1]
 8008890:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
 8008894:	781a      	ldrb	r2, [r3, #0]
 8008896:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 800889a:	2200      	movs	r2, #0
 800889c:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
 80088a0:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 80088a4:	0a09      	lsrs	r1, r1, #8
 80088a6:	f88d 103d 	strb.w	r1, [sp, #61]	; 0x3d
 80088aa:	7b19      	ldrb	r1, [r3, #12]
 80088ac:	f88d 103e 	strb.w	r1, [sp, #62]	; 0x3e
 80088b0:	7adb      	ldrb	r3, [r3, #11]
 80088b2:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 80088b6:	ab0c      	add	r3, sp, #48	; 0x30
 80088b8:	9300      	str	r3, [sp, #0]
 80088ba:	2310      	movs	r3, #16
 80088bc:	493c      	ldr	r1, [pc, #240]	; (80089b0 <dwt_ioctl+0xe38>)
 80088be:	f7fd fd6b 	bl	8006398 <dwt_writetodevice>
 80088c2:	e796      	b.n	80087f2 <dwt_ioctl+0xc7a>
 80088c4:	2a01      	cmp	r2, #1
 80088c6:	f040 80cc 	bne.w	8008a62 <dwt_ioctl+0xeea>
 80088ca:	f899 3011 	ldrb.w	r3, [r9, #17]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80088d4:	bf08      	it	eq
 80088d6:	237f      	moveq	r3, #127	; 0x7f
 80088d8:	f899 2013 	ldrb.w	r2, [r9, #19]
 80088dc:	1a9b      	subs	r3, r3, r2
 80088de:	3b02      	subs	r3, #2
 80088e0:	4299      	cmp	r1, r3
 80088e2:	f200 80c4 	bhi.w	8008a6e <dwt_ioctl+0xef6>
 80088e6:	f899 2010 	ldrb.w	r2, [r9, #16]
 80088ea:	1e53      	subs	r3, r2, #1
 80088ec:	b2db      	uxtb	r3, r3
 80088ee:	2b01      	cmp	r3, #1
 80088f0:	d940      	bls.n	8008974 <dwt_ioctl+0xdfc>
 80088f2:	f899 3011 	ldrb.w	r3, [r9, #17]
 80088f6:	1e59      	subs	r1, r3, #1
 80088f8:	b2c9      	uxtb	r1, r1
 80088fa:	2901      	cmp	r1, #1
 80088fc:	d964      	bls.n	80089c8 <dwt_ioctl+0xe50>
 80088fe:	2b04      	cmp	r3, #4
 8008900:	d069      	beq.n	80089d6 <dwt_ioctl+0xe5e>
 8008902:	ea42 3343 	orr.w	r3, r2, r3, lsl #13
 8008906:	2200      	movs	r2, #0
 8008908:	492a      	ldr	r1, [pc, #168]	; (80089b4 <dwt_ioctl+0xe3c>)
 800890a:	4630      	mov	r0, r6
 800890c:	f7fd fea2 	bl	8006654 <dwt_write32bitoffsetreg>
 8008910:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 8008914:	4a28      	ldr	r2, [pc, #160]	; (80089b8 <dwt_ioctl+0xe40>)
 8008916:	ea02 12c3 	and.w	r2, r2, r3, lsl #7
 800891a:	f899 300c 	ldrb.w	r3, [r9, #12]
 800891e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008922:	4313      	orrs	r3, r2
 8008924:	2200      	movs	r2, #0
 8008926:	4925      	ldr	r1, [pc, #148]	; (80089bc <dwt_ioctl+0xe44>)
 8008928:	4630      	mov	r0, r6
 800892a:	f7fd fe93 	bl	8006654 <dwt_write32bitoffsetreg>
 800892e:	2301      	movs	r3, #1
 8008930:	2200      	movs	r2, #0
 8008932:	4923      	ldr	r1, [pc, #140]	; (80089c0 <dwt_ioctl+0xe48>)
 8008934:	4630      	mov	r0, r6
 8008936:	f7fd fd3a 	bl	80063ae <dwt_write8bitoffsetreg>
 800893a:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80089c4 <dwt_ioctl+0xe4c>
 800893e:	2700      	movs	r7, #0
 8008940:	463a      	mov	r2, r7
 8008942:	4641      	mov	r1, r8
 8008944:	4630      	mov	r0, r6
 8008946:	f7fd f96b 	bl	8005c20 <dwt_read8bitoffsetreg>
 800894a:	f010 0f05 	tst.w	r0, #5
 800894e:	d0f7      	beq.n	8008940 <dwt_ioctl+0xdc8>
 8008950:	4605      	mov	r5, r0
 8008952:	4603      	mov	r3, r0
 8008954:	2200      	movs	r2, #0
 8008956:	491b      	ldr	r1, [pc, #108]	; (80089c4 <dwt_ioctl+0xe4c>)
 8008958:	4630      	mov	r0, r6
 800895a:	f7fd fd28 	bl	80063ae <dwt_write8bitoffsetreg>
 800895e:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 8008962:	f025 0330 	bic.w	r3, r5, #48	; 0x30
 8008966:	2b01      	cmp	r3, #1
 8008968:	d042      	beq.n	80089f0 <dwt_ioctl+0xe78>
 800896a:	b26b      	sxtb	r3, r5
 800896c:	7023      	strb	r3, [r4, #0]
 800896e:	2500      	movs	r5, #0
 8008970:	f7ff b9ac 	b.w	8007ccc <dwt_ioctl+0x154>
 8008974:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8008976:	7bdb      	ldrb	r3, [r3, #15]
 8008978:	2b03      	cmp	r3, #3
 800897a:	f001 802e 	beq.w	80099da <dwt_ioctl+0x1e62>
 800897e:	f899 3011 	ldrb.w	r3, [r9, #17]
 8008982:	1e5a      	subs	r2, r3, #1
 8008984:	b2d2      	uxtb	r2, r2
 8008986:	2a01      	cmp	r2, #1
 8008988:	d92c      	bls.n	80089e4 <dwt_ioctl+0xe6c>
 800898a:	2201      	movs	r2, #1
 800898c:	e7b7      	b.n	80088fe <dwt_ioctl+0xd86>
 800898e:	bf00      	nop
 8008990:	00070048 	.word	0x00070048
 8008994:	00070034 	.word	0x00070034
 8008998:	00080004 	.word	0x00080004
 800899c:	3f866666 	.word	0x3f866666
 80089a0:	3ecccccd 	.word	0x3ecccccd
 80089a4:	437f0000 	.word	0x437f0000
 80089a8:	000f0024 	.word	0x000f0024
 80089ac:	00020008 	.word	0x00020008
 80089b0:	00010034 	.word	0x00010034
 80089b4:	00010044 	.word	0x00010044
 80089b8:	0001ff80 	.word	0x0001ff80
 80089bc:	00010048 	.word	0x00010048
 80089c0:	0001004c 	.word	0x0001004c
 80089c4:	00010050 	.word	0x00010050
 80089c8:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80089ca:	7bdb      	ldrb	r3, [r3, #15]
 80089cc:	2b03      	cmp	r3, #3
 80089ce:	bf0c      	ite	eq
 80089d0:	2302      	moveq	r3, #2
 80089d2:	2301      	movne	r3, #1
 80089d4:	e795      	b.n	8008902 <dwt_ioctl+0xd8a>
 80089d6:	f8b9 100e 	ldrh.w	r1, [r9, #14]
 80089da:	2910      	cmp	r1, #16
 80089dc:	d991      	bls.n	8008902 <dwt_ioctl+0xd8a>
 80089de:	f06f 0303 	mvn.w	r3, #3
 80089e2:	e7c3      	b.n	800896c <dwt_ioctl+0xdf4>
 80089e4:	2201      	movs	r2, #1
 80089e6:	4613      	mov	r3, r2
 80089e8:	e78b      	b.n	8008902 <dwt_ioctl+0xd8a>
 80089ea:	2202      	movs	r2, #2
 80089ec:	4613      	mov	r3, r2
 80089ee:	e788      	b.n	8008902 <dwt_ioctl+0xd8a>
 80089f0:	f899 3012 	ldrb.w	r3, [r9, #18]
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d1b8      	bne.n	800896a <dwt_ioctl+0xdf2>
 80089f8:	f899 2011 	ldrb.w	r2, [r9, #17]
 80089fc:	1e53      	subs	r3, r2, #1
 80089fe:	b2db      	uxtb	r3, r3
 8008a00:	2b01      	cmp	r3, #1
 8008a02:	d91b      	bls.n	8008a3c <dwt_ioctl+0xec4>
 8008a04:	2a03      	cmp	r2, #3
 8008a06:	bf0c      	ite	eq
 8008a08:	f44f 17a0 	moveq.w	r7, #1310720	; 0x140000
 8008a0c:	f44f 17b0 	movne.w	r7, #1441792	; 0x160000
 8008a10:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8008a14:	b112      	cbz	r2, 8008a1c <dwt_ioctl+0xea4>
 8008a16:	f899 300c 	ldrb.w	r3, [r9, #12]
 8008a1a:	b9c3      	cbnz	r3, 8008a4e <dwt_ioctl+0xed6>
 8008a1c:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8008a20:	2900      	cmp	r1, #0
 8008a22:	d0a2      	beq.n	800896a <dwt_ioctl+0xdf2>
 8008a24:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d09e      	beq.n	800896a <dwt_ioctl+0xdf2>
 8008a2c:	f899 200c 	ldrb.w	r2, [r9, #12]
 8008a30:	9100      	str	r1, [sp, #0]
 8008a32:	4639      	mov	r1, r7
 8008a34:	4630      	mov	r0, r6
 8008a36:	f7fd f8c1 	bl	8005bbc <dwt_readfromdevice>
 8008a3a:	e796      	b.n	800896a <dwt_ioctl+0xdf2>
 8008a3c:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8008a3e:	7bdb      	ldrb	r3, [r3, #15]
 8008a40:	2b03      	cmp	r3, #3
 8008a42:	bf0c      	ite	eq
 8008a44:	f44f 1798 	moveq.w	r7, #1245184	; 0x130000
 8008a48:	f44f 1790 	movne.w	r7, #1179648	; 0x120000
 8008a4c:	e7e0      	b.n	8008a10 <dwt_ioctl+0xe98>
 8008a4e:	9200      	str	r2, [sp, #0]
 8008a50:	2200      	movs	r2, #0
 8008a52:	4639      	mov	r1, r7
 8008a54:	4630      	mov	r0, r6
 8008a56:	f7fd f8b1 	bl	8005bbc <dwt_readfromdevice>
 8008a5a:	e7df      	b.n	8008a1c <dwt_ioctl+0xea4>
 8008a5c:	f06f 0302 	mvn.w	r3, #2
 8008a60:	e784      	b.n	800896c <dwt_ioctl+0xdf4>
 8008a62:	f06f 0301 	mvn.w	r3, #1
 8008a66:	e781      	b.n	800896c <dwt_ioctl+0xdf4>
 8008a68:	f04f 33ff 	mov.w	r3, #4294967295
 8008a6c:	e77e      	b.n	800896c <dwt_ioctl+0xdf4>
 8008a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8008a72:	e77b      	b.n	800896c <dwt_ioctl+0xdf4>
 8008a74:	7a23      	ldrb	r3, [r4, #8]
 8008a76:	79e1      	ldrb	r1, [r4, #7]
 8008a78:	79a2      	ldrb	r2, [r4, #6]
 8008a7a:	00d2      	lsls	r2, r2, #3
 8008a7c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8008a80:	4313      	orrs	r3, r2
 8008a82:	7962      	ldrb	r2, [r4, #5]
 8008a84:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8008a88:	7922      	ldrb	r2, [r4, #4]
 8008a8a:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8008a8e:	78e2      	ldrb	r2, [r4, #3]
 8008a90:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008a94:	78a2      	ldrb	r2, [r4, #2]
 8008a96:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 8008a9a:	7862      	ldrb	r2, [r4, #1]
 8008a9c:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8008aa0:	b29b      	uxth	r3, r3
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	49cd      	ldr	r1, [pc, #820]	; (8008ddc <dwt_ioctl+0x1264>)
 8008aa6:	f7fd fcd4 	bl	8006452 <dwt_write16bitoffsetreg>
 8008aaa:	2500      	movs	r5, #0
 8008aac:	f7ff b90e 	b.w	8007ccc <dwt_ioctl+0x154>
 8008ab0:	2c00      	cmp	r4, #0
 8008ab2:	f000 86fc 	beq.w	80098ae <dwt_ioctl+0x1d36>
 8008ab6:	7863      	ldrb	r3, [r4, #1]
 8008ab8:	b133      	cbz	r3, 8008ac8 <dwt_ioctl+0xf50>
 8008aba:	085b      	lsrs	r3, r3, #1
 8008abc:	3b01      	subs	r3, #1
 8008abe:	b2db      	uxtb	r3, r3
 8008ac0:	7023      	strb	r3, [r4, #0]
 8008ac2:	2500      	movs	r5, #0
 8008ac4:	f7ff b902 	b.w	8007ccc <dwt_ioctl+0x154>
 8008ac8:	2300      	movs	r3, #0
 8008aca:	e7f9      	b.n	8008ac0 <dwt_ioctl+0xf48>
 8008acc:	2200      	movs	r2, #0
 8008ace:	49c4      	ldr	r1, [pc, #784]	; (8008de0 <dwt_ioctl+0x1268>)
 8008ad0:	f7fd f87e 	bl	8005bd0 <dwt_read32bitoffsetreg>
 8008ad4:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8008ad8:	8023      	strh	r3, [r4, #0]
 8008ada:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8008ade:	8060      	strh	r0, [r4, #2]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	49c0      	ldr	r1, [pc, #768]	; (8008de4 <dwt_ioctl+0x126c>)
 8008ae4:	4630      	mov	r0, r6
 8008ae6:	f7fd f873 	bl	8005bd0 <dwt_read32bitoffsetreg>
 8008aea:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8008aee:	80a3      	strh	r3, [r4, #4]
 8008af0:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8008af4:	80e0      	strh	r0, [r4, #6]
 8008af6:	2200      	movs	r2, #0
 8008af8:	49bb      	ldr	r1, [pc, #748]	; (8008de8 <dwt_ioctl+0x1270>)
 8008afa:	4630      	mov	r0, r6
 8008afc:	f7fd f868 	bl	8005bd0 <dwt_read32bitoffsetreg>
 8008b00:	7220      	strb	r0, [r4, #8]
 8008b02:	0c00      	lsrs	r0, r0, #16
 8008b04:	7260      	strb	r0, [r4, #9]
 8008b06:	2200      	movs	r2, #0
 8008b08:	49b8      	ldr	r1, [pc, #736]	; (8008dec <dwt_ioctl+0x1274>)
 8008b0a:	4630      	mov	r0, r6
 8008b0c:	f7fd f860 	bl	8005bd0 <dwt_read32bitoffsetreg>
 8008b10:	f3c0 430b 	ubfx	r3, r0, #16, #12
 8008b14:	81a3      	strh	r3, [r4, #12]
 8008b16:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8008b1a:	8160      	strh	r0, [r4, #10]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	49b4      	ldr	r1, [pc, #720]	; (8008df0 <dwt_ioctl+0x1278>)
 8008b20:	4630      	mov	r0, r6
 8008b22:	f7fd f855 	bl	8005bd0 <dwt_read32bitoffsetreg>
 8008b26:	f3c0 430b 	ubfx	r3, r0, #16, #12
 8008b2a:	f8a4 300f 	strh.w	r3, [r4, #15]
 8008b2e:	73a0      	strb	r0, [r4, #14]
 8008b30:	2200      	movs	r2, #0
 8008b32:	49b0      	ldr	r1, [pc, #704]	; (8008df4 <dwt_ioctl+0x127c>)
 8008b34:	4630      	mov	r0, r6
 8008b36:	f7fd f84b 	bl	8005bd0 <dwt_read32bitoffsetreg>
 8008b3a:	7460      	strb	r0, [r4, #17]
 8008b3c:	0c00      	lsrs	r0, r0, #16
 8008b3e:	74a0      	strb	r0, [r4, #18]
 8008b40:	2200      	movs	r2, #0
 8008b42:	49ad      	ldr	r1, [pc, #692]	; (8008df8 <dwt_ioctl+0x1280>)
 8008b44:	4630      	mov	r0, r6
 8008b46:	f7fd f843 	bl	8005bd0 <dwt_read32bitoffsetreg>
 8008b4a:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8008b4e:	f8a4 0013 	strh.w	r0, [r4, #19]
 8008b52:	2500      	movs	r5, #0
 8008b54:	7565      	strb	r5, [r4, #21]
 8008b56:	75a5      	strb	r5, [r4, #22]
 8008b58:	462a      	mov	r2, r5
 8008b5a:	49a8      	ldr	r1, [pc, #672]	; (8008dfc <dwt_ioctl+0x1284>)
 8008b5c:	4630      	mov	r0, r6
 8008b5e:	f7fd f85f 	bl	8005c20 <dwt_read8bitoffsetreg>
 8008b62:	75e0      	strb	r0, [r4, #23]
 8008b64:	f7ff b8b2 	b.w	8007ccc <dwt_ioctl+0x154>
 8008b68:	4611      	mov	r1, r2
 8008b6a:	f7fd fc5f 	bl	800642c <ull_configeventcounters>
 8008b6e:	2500      	movs	r5, #0
 8008b70:	f7ff b8ac 	b.w	8007ccc <dwt_ioctl+0x154>
 8008b74:	2c00      	cmp	r4, #0
 8008b76:	f000 869d 	beq.w	80098b4 <dwt_ioctl+0x1d3c>
 8008b7a:	8823      	ldrh	r3, [r4, #0]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	49a0      	ldr	r1, [pc, #640]	; (8008e00 <dwt_ioctl+0x1288>)
 8008b80:	f7fd fc67 	bl	8006452 <dwt_write16bitoffsetreg>
 8008b84:	2500      	movs	r5, #0
 8008b86:	f7ff b8a1 	b.w	8007ccc <dwt_ioctl+0x154>
 8008b8a:	2c00      	cmp	r4, #0
 8008b8c:	f000 8695 	beq.w	80098ba <dwt_ioctl+0x1d42>
 8008b90:	6825      	ldr	r5, [r4, #0]
 8008b92:	b935      	cbnz	r5, 8008ba2 <dwt_ioctl+0x102a>
 8008b94:	2300      	movs	r3, #0
 8008b96:	461a      	mov	r2, r3
 8008b98:	499a      	ldr	r1, [pc, #616]	; (8008e04 <dwt_ioctl+0x128c>)
 8008b9a:	f7fd fc5a 	bl	8006452 <dwt_write16bitoffsetreg>
 8008b9e:	f7ff b895 	b.w	8007ccc <dwt_ioctl+0x154>
 8008ba2:	7962      	ldrb	r2, [r4, #5]
 8008ba4:	7923      	ldrb	r3, [r4, #4]
 8008ba6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008baa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008bae:	2200      	movs	r2, #0
 8008bb0:	4994      	ldr	r1, [pc, #592]	; (8008e04 <dwt_ioctl+0x128c>)
 8008bb2:	f7fd fc4e 	bl	8006452 <dwt_write16bitoffsetreg>
 8008bb6:	2500      	movs	r5, #0
 8008bb8:	f7ff b888 	b.w	8007ccc <dwt_ioctl+0x154>
 8008bbc:	2c00      	cmp	r4, #0
 8008bbe:	f000 867f 	beq.w	80098c0 <dwt_ioctl+0x1d48>
 8008bc2:	6823      	ldr	r3, [r4, #0]
 8008bc4:	b94b      	cbnz	r3, 8008bda <dwt_ioctl+0x1062>
 8008bc6:	2500      	movs	r5, #0
 8008bc8:	9500      	str	r5, [sp, #0]
 8008bca:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 8008bce:	462a      	mov	r2, r5
 8008bd0:	2110      	movs	r1, #16
 8008bd2:	f7fe fc6d 	bl	80074b0 <dwt_modify16bitoffsetreg>
 8008bd6:	f7ff b879 	b.w	8007ccc <dwt_ioctl+0x154>
 8008bda:	2200      	movs	r2, #0
 8008bdc:	2134      	movs	r1, #52	; 0x34
 8008bde:	f7fd fd39 	bl	8006654 <dwt_write32bitoffsetreg>
 8008be2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008be6:	9300      	str	r3, [sp, #0]
 8008be8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008bec:	2200      	movs	r2, #0
 8008bee:	2110      	movs	r1, #16
 8008bf0:	4630      	mov	r0, r6
 8008bf2:	f7fe fc5d 	bl	80074b0 <dwt_modify16bitoffsetreg>
 8008bf6:	2500      	movs	r5, #0
 8008bf8:	f7ff b868 	b.w	8007ccc <dwt_ioctl+0x154>
 8008bfc:	2c00      	cmp	r4, #0
 8008bfe:	f000 8662 	beq.w	80098c6 <dwt_ioctl+0x1d4e>
 8008c02:	8861      	ldrh	r1, [r4, #2]
 8008c04:	f7fd fca2 	bl	800654c <ull_aon_read>
 8008c08:	7020      	strb	r0, [r4, #0]
 8008c0a:	2500      	movs	r5, #0
 8008c0c:	f7ff b85e 	b.w	8007ccc <dwt_ioctl+0x154>
 8008c10:	2c00      	cmp	r4, #0
 8008c12:	f000 865b 	beq.w	80098cc <dwt_ioctl+0x1d54>
 8008c16:	78a2      	ldrb	r2, [r4, #2]
 8008c18:	8821      	ldrh	r1, [r4, #0]
 8008c1a:	f7fd fcb7 	bl	800658c <ull_aon_write>
 8008c1e:	2500      	movs	r5, #0
 8008c20:	f7ff b854 	b.w	8007ccc <dwt_ioctl+0x154>
 8008c24:	4b78      	ldr	r3, [pc, #480]	; (8008e08 <dwt_ioctl+0x1290>)
 8008c26:	4a79      	ldr	r2, [pc, #484]	; (8008e0c <dwt_ioctl+0x1294>)
 8008c28:	2d01      	cmp	r5, #1
 8008c2a:	bf18      	it	ne
 8008c2c:	4613      	movne	r3, r2
 8008c2e:	2d01      	cmp	r5, #1
 8008c30:	4977      	ldr	r1, [pc, #476]	; (8008e10 <dwt_ioctl+0x1298>)
 8008c32:	bf18      	it	ne
 8008c34:	f04f 110c 	movne.w	r1, #786444	; 0xc000c
 8008c38:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8008c3a:	7bd2      	ldrb	r2, [r2, #15]
 8008c3c:	2a01      	cmp	r2, #1
 8008c3e:	d012      	beq.n	8008c66 <dwt_ioctl+0x10ee>
 8008c40:	2a03      	cmp	r2, #3
 8008c42:	d117      	bne.n	8008c74 <dwt_ioctl+0x10fc>
 8008c44:	f5a2 12c0 	sub.w	r2, r2, #1572864	; 0x180000
 8008c48:	3a01      	subs	r2, #1
 8008c4a:	441a      	add	r2, r3
 8008c4c:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8008c50:	f7fc ffd4 	bl	8005bfc <dwt_read16bitoffsetreg>
 8008c54:	09c0      	lsrs	r0, r0, #7
 8008c56:	8020      	strh	r0, [r4, #0]
 8008c58:	8825      	ldrh	r5, [r4, #0]
 8008c5a:	3500      	adds	r5, #0
 8008c5c:	bf18      	it	ne
 8008c5e:	2501      	movne	r5, #1
 8008c60:	426d      	negs	r5, r5
 8008c62:	f7ff b833 	b.w	8007ccc <dwt_ioctl+0x154>
 8008c66:	2202      	movs	r2, #2
 8008c68:	4619      	mov	r1, r3
 8008c6a:	f7fc ffc7 	bl	8005bfc <dwt_read16bitoffsetreg>
 8008c6e:	09c0      	lsrs	r0, r0, #7
 8008c70:	8020      	strh	r0, [r4, #0]
 8008c72:	e7f1      	b.n	8008c58 <dwt_ioctl+0x10e0>
 8008c74:	2202      	movs	r2, #2
 8008c76:	f7fc ffc1 	bl	8005bfc <dwt_read16bitoffsetreg>
 8008c7a:	09c0      	lsrs	r0, r0, #7
 8008c7c:	8020      	strh	r0, [r4, #0]
 8008c7e:	e7eb      	b.n	8008c58 <dwt_ioctl+0x10e0>
 8008c80:	2c00      	cmp	r4, #0
 8008c82:	f000 8626 	beq.w	80098d2 <dwt_ioctl+0x1d5a>
 8008c86:	7821      	ldrb	r1, [r4, #0]
 8008c88:	f7fe fc48 	bl	800751c <ull_setleds>
 8008c8c:	2500      	movs	r5, #0
 8008c8e:	f7ff b81d 	b.w	8007ccc <dwt_ioctl+0x154>
 8008c92:	4611      	mov	r1, r2
 8008c94:	f7fe fb18 	bl	80072c8 <ull_setdwstate>
 8008c98:	2500      	movs	r5, #0
 8008c9a:	f7ff b817 	b.w	8007ccc <dwt_ioctl+0x154>
 8008c9e:	9400      	str	r4, [sp, #0]
 8008ca0:	2304      	movs	r3, #4
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	211c      	movs	r1, #28
 8008ca6:	f7fc ff89 	bl	8005bbc <dwt_readfromdevice>
 8008caa:	2500      	movs	r5, #0
 8008cac:	f7ff b80e 	b.w	8007ccc <dwt_ioctl+0x154>
 8008cb0:	2c00      	cmp	r4, #0
 8008cb2:	f000 8611 	beq.w	80098d8 <dwt_ioctl+0x1d60>
 8008cb6:	2202      	movs	r2, #2
 8008cb8:	2144      	movs	r1, #68	; 0x44
 8008cba:	f7fc ff9f 	bl	8005bfc <dwt_read16bitoffsetreg>
 8008cbe:	f3c0 2000 	ubfx	r0, r0, #8, #1
 8008cc2:	7020      	strb	r0, [r4, #0]
 8008cc4:	2500      	movs	r5, #0
 8008cc6:	f7ff b801 	b.w	8007ccc <dwt_ioctl+0x154>
 8008cca:	2c00      	cmp	r4, #0
 8008ccc:	f000 8607 	beq.w	80098de <dwt_ioctl+0x1d66>
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	2144      	movs	r1, #68	; 0x44
 8008cd4:	f7fc ffa4 	bl	8005c20 <dwt_read8bitoffsetreg>
 8008cd8:	f000 0001 	and.w	r0, r0, #1
 8008cdc:	7020      	strb	r0, [r4, #0]
 8008cde:	2500      	movs	r5, #0
 8008ce0:	f7fe bff4 	b.w	8007ccc <dwt_ioctl+0x154>
 8008ce4:	2c00      	cmp	r4, #0
 8008ce6:	f000 85fd 	beq.w	80098e4 <dwt_ioctl+0x1d6c>
 8008cea:	8862      	ldrh	r2, [r4, #2]
 8008cec:	8821      	ldrh	r1, [r4, #0]
 8008cee:	f7fe fb49 	bl	8007384 <ull_configureframefilter>
 8008cf2:	2500      	movs	r5, #0
 8008cf4:	f7fe bfea 	b.w	8007ccc <dwt_ioctl+0x154>
 8008cf8:	9400      	str	r4, [sp, #0]
 8008cfa:	2308      	movs	r3, #8
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	2104      	movs	r1, #4
 8008d00:	f7fd fb4a 	bl	8006398 <dwt_writetodevice>
 8008d04:	2500      	movs	r5, #0
 8008d06:	f7fe bfe1 	b.w	8007ccc <dwt_ioctl+0x154>
 8008d0a:	9400      	str	r4, [sp, #0]
 8008d0c:	2308      	movs	r3, #8
 8008d0e:	2200      	movs	r2, #0
 8008d10:	2104      	movs	r1, #4
 8008d12:	f7fc ff53 	bl	8005bbc <dwt_readfromdevice>
 8008d16:	2500      	movs	r5, #0
 8008d18:	f7fe bfd8 	b.w	8007ccc <dwt_ioctl+0x154>
 8008d1c:	2c00      	cmp	r4, #0
 8008d1e:	f000 85e4 	beq.w	80098ea <dwt_ioctl+0x1d72>
 8008d22:	8823      	ldrh	r3, [r4, #0]
 8008d24:	2202      	movs	r2, #2
 8008d26:	210c      	movs	r1, #12
 8008d28:	f7fd fb93 	bl	8006452 <dwt_write16bitoffsetreg>
 8008d2c:	2500      	movs	r5, #0
 8008d2e:	f7fe bfcd 	b.w	8007ccc <dwt_ioctl+0x154>
 8008d32:	2c00      	cmp	r4, #0
 8008d34:	f000 85dc 	beq.w	80098f0 <dwt_ioctl+0x1d78>
 8008d38:	8823      	ldrh	r3, [r4, #0]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	210c      	movs	r1, #12
 8008d3e:	f7fd fb88 	bl	8006452 <dwt_write16bitoffsetreg>
 8008d42:	2500      	movs	r5, #0
 8008d44:	f7fe bfc2 	b.w	8007ccc <dwt_ioctl+0x154>
 8008d48:	4621      	mov	r1, r4
 8008d4a:	f7fd fb03 	bl	8006354 <ull_readrxtimestamp>
 8008d4e:	2500      	movs	r5, #0
 8008d50:	f7fe bfbc 	b.w	8007ccc <dwt_ioctl+0x154>
 8008d54:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8008d56:	7bdb      	ldrb	r3, [r3, #15]
 8008d58:	2b01      	cmp	r3, #1
 8008d5a:	d00b      	beq.n	8008d74 <dwt_ioctl+0x11fc>
 8008d5c:	2b03      	cmp	r3, #3
 8008d5e:	d112      	bne.n	8008d86 <dwt_ioctl+0x120e>
 8008d60:	9400      	str	r4, [sp, #0]
 8008d62:	2305      	movs	r3, #5
 8008d64:	2220      	movs	r2, #32
 8008d66:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8008d6a:	f7fc ff27 	bl	8005bbc <dwt_readfromdevice>
 8008d6e:	2500      	movs	r5, #0
 8008d70:	f7fe bfac 	b.w	8007ccc <dwt_ioctl+0x154>
 8008d74:	9400      	str	r4, [sp, #0]
 8008d76:	2305      	movs	r3, #5
 8008d78:	2200      	movs	r2, #0
 8008d7a:	4926      	ldr	r1, [pc, #152]	; (8008e14 <dwt_ioctl+0x129c>)
 8008d7c:	f7fc ff1e 	bl	8005bbc <dwt_readfromdevice>
 8008d80:	2500      	movs	r5, #0
 8008d82:	f7fe bfa3 	b.w	8007ccc <dwt_ioctl+0x154>
 8008d86:	9400      	str	r4, [sp, #0]
 8008d88:	2305      	movs	r3, #5
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 8008d90:	f7fc ff14 	bl	8005bbc <dwt_readfromdevice>
 8008d94:	2500      	movs	r5, #0
 8008d96:	f7fe bf99 	b.w	8007ccc <dwt_ioctl+0x154>
 8008d9a:	2500      	movs	r5, #0
 8008d9c:	f804 5b01 	strb.w	r5, [r4], #1
 8008da0:	9400      	str	r4, [sp, #0]
 8008da2:	2304      	movs	r3, #4
 8008da4:	462a      	mov	r2, r5
 8008da6:	2170      	movs	r1, #112	; 0x70
 8008da8:	f7fc ff08 	bl	8005bbc <dwt_readfromdevice>
 8008dac:	f7fe bf8e 	b.w	8007ccc <dwt_ioctl+0x154>
 8008db0:	2c00      	cmp	r4, #0
 8008db2:	f000 85a0 	beq.w	80098f6 <dwt_ioctl+0x1d7e>
 8008db6:	2201      	movs	r2, #1
 8008db8:	2164      	movs	r1, #100	; 0x64
 8008dba:	f7fc ff09 	bl	8005bd0 <dwt_read32bitoffsetreg>
 8008dbe:	6020      	str	r0, [r4, #0]
 8008dc0:	2500      	movs	r5, #0
 8008dc2:	f7fe bf83 	b.w	8007ccc <dwt_ioctl+0x154>
 8008dc6:	2c00      	cmp	r4, #0
 8008dc8:	f000 8598 	beq.w	80098fc <dwt_ioctl+0x1d84>
 8008dcc:	2200      	movs	r2, #0
 8008dce:	2164      	movs	r1, #100	; 0x64
 8008dd0:	f7fc fefe 	bl	8005bd0 <dwt_read32bitoffsetreg>
 8008dd4:	6020      	str	r0, [r4, #0]
 8008dd6:	2500      	movs	r5, #0
 8008dd8:	f7fe bf78 	b.w	8007ccc <dwt_ioctl+0x154>
 8008ddc:	00010030 	.word	0x00010030
 8008de0:	000f0004 	.word	0x000f0004
 8008de4:	000f0008 	.word	0x000f0008
 8008de8:	000f000c 	.word	0x000f000c
 8008dec:	000f0010 	.word	0x000f0010
 8008df0:	000f0014 	.word	0x000f0014
 8008df4:	000f0018 	.word	0x000f0018
 8008df8:	000f001c 	.word	0x000f001c
 8008dfc:	000f0028 	.word	0x000f0028
 8008e00:	00060004 	.word	0x00060004
 8008e04:	0011001a 	.word	0x0011001a
 8008e08:	00180034 	.word	0x00180034
 8008e0c:	0018002c 	.word	0x0018002c
 8008e10:	000c0014 	.word	0x000c0014
 8008e14:	00180020 	.word	0x00180020
 8008e18:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8008e1a:	7bdb      	ldrb	r3, [r3, #15]
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d00b      	beq.n	8008e38 <dwt_ioctl+0x12c0>
 8008e20:	2b03      	cmp	r3, #3
 8008e22:	d112      	bne.n	8008e4a <dwt_ioctl+0x12d2>
 8008e24:	9400      	str	r4, [sp, #0]
 8008e26:	2305      	movs	r3, #5
 8008e28:	2228      	movs	r2, #40	; 0x28
 8008e2a:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8008e2e:	f7fc fec5 	bl	8005bbc <dwt_readfromdevice>
 8008e32:	2500      	movs	r5, #0
 8008e34:	f7fe bf4a 	b.w	8007ccc <dwt_ioctl+0x154>
 8008e38:	9400      	str	r4, [sp, #0]
 8008e3a:	2305      	movs	r3, #5
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	49d3      	ldr	r1, [pc, #844]	; (800918c <dwt_ioctl+0x1614>)
 8008e40:	f7fc febc 	bl	8005bbc <dwt_readfromdevice>
 8008e44:	2500      	movs	r5, #0
 8008e46:	f7fe bf41 	b.w	8007ccc <dwt_ioctl+0x154>
 8008e4a:	9400      	str	r4, [sp, #0]
 8008e4c:	2305      	movs	r3, #5
 8008e4e:	2200      	movs	r2, #0
 8008e50:	49cf      	ldr	r1, [pc, #828]	; (8009190 <dwt_ioctl+0x1618>)
 8008e52:	f7fc feb3 	bl	8005bbc <dwt_readfromdevice>
 8008e56:	2500      	movs	r5, #0
 8008e58:	f7fe bf38 	b.w	8007ccc <dwt_ioctl+0x154>
 8008e5c:	2c00      	cmp	r4, #0
 8008e5e:	f000 8550 	beq.w	8009902 <dwt_ioctl+0x1d8a>
 8008e62:	2200      	movs	r2, #0
 8008e64:	211c      	movs	r1, #28
 8008e66:	f7fc feb3 	bl	8005bd0 <dwt_read32bitoffsetreg>
 8008e6a:	6020      	str	r0, [r4, #0]
 8008e6c:	2500      	movs	r5, #0
 8008e6e:	f7fe bf2d 	b.w	8007ccc <dwt_ioctl+0x154>
 8008e72:	2c00      	cmp	r4, #0
 8008e74:	f000 8548 	beq.w	8009908 <dwt_ioctl+0x1d90>
 8008e78:	8825      	ldrh	r5, [r4, #0]
 8008e7a:	6867      	ldr	r7, [r4, #4]
 8008e7c:	7a23      	ldrb	r3, [r4, #8]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	f000 8545 	beq.w	800990e <dwt_ioctl+0x1d96>
 8008e84:	463c      	mov	r4, r7
 8008e86:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 8008e8a:	4629      	mov	r1, r5
 8008e8c:	4630      	mov	r0, r6
 8008e8e:	f7fd fb3b 	bl	8006508 <_dwt_otpread>
 8008e92:	f844 0b04 	str.w	r0, [r4], #4
 8008e96:	3501      	adds	r5, #1
 8008e98:	b2ad      	uxth	r5, r5
 8008e9a:	42bc      	cmp	r4, r7
 8008e9c:	d1f5      	bne.n	8008e8a <dwt_ioctl+0x1312>
 8008e9e:	2500      	movs	r5, #0
 8008ea0:	f7fe bf14 	b.w	8007ccc <dwt_ioctl+0x154>
 8008ea4:	2c00      	cmp	r4, #0
 8008ea6:	f000 8535 	beq.w	8009914 <dwt_ioctl+0x1d9c>
 8008eaa:	7823      	ldrb	r3, [r4, #0]
 8008eac:	2201      	movs	r2, #1
 8008eae:	2128      	movs	r1, #40	; 0x28
 8008eb0:	f7fd fa7d 	bl	80063ae <dwt_write8bitoffsetreg>
 8008eb4:	2500      	movs	r5, #0
 8008eb6:	f7fe bf09 	b.w	8007ccc <dwt_ioctl+0x154>
 8008eba:	f7fe fa87 	bl	80073cc <ull_run_pgfcal>
 8008ebe:	4605      	mov	r5, r0
 8008ec0:	f7fe bf04 	b.w	8007ccc <dwt_ioctl+0x154>
 8008ec4:	4611      	mov	r1, r2
 8008ec6:	f7fe fb77 	bl	80075b8 <ull_pgf_cal>
 8008eca:	4605      	mov	r5, r0
 8008ecc:	f7fe befe 	b.w	8007ccc <dwt_ioctl+0x154>
 8008ed0:	2c00      	cmp	r4, #0
 8008ed2:	f000 8522 	beq.w	800991a <dwt_ioctl+0x1da2>
 8008ed6:	78a5      	ldrb	r5, [r4, #2]
 8008ed8:	2101      	movs	r1, #1
 8008eda:	f7fd faeb 	bl	80064b4 <ull_force_clocks>
 8008ede:	2100      	movs	r1, #0
 8008ee0:	4630      	mov	r0, r6
 8008ee2:	f7fd ff8b 	bl	8006dfc <ull_enable_rf_tx>
 8008ee6:	4630      	mov	r0, r6
 8008ee8:	f7fd ffbc 	bl	8006e64 <ull_enable_rftx_blocks>
 8008eec:	f005 033f 	and.w	r3, r5, #63	; 0x3f
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	49a8      	ldr	r1, [pc, #672]	; (8009194 <dwt_ioctl+0x161c>)
 8008ef4:	4630      	mov	r0, r6
 8008ef6:	f7fd fa5a 	bl	80063ae <dwt_write8bitoffsetreg>
 8008efa:	2301      	movs	r3, #1
 8008efc:	9300      	str	r3, [sp, #0]
 8008efe:	23ff      	movs	r3, #255	; 0xff
 8008f00:	2200      	movs	r2, #0
 8008f02:	49a5      	ldr	r1, [pc, #660]	; (8009198 <dwt_ioctl+0x1620>)
 8008f04:	4630      	mov	r0, r6
 8008f06:	f7fe f921 	bl	800714c <dwt_modify8bitoffsetreg>
 8008f0a:	4fa3      	ldr	r7, [pc, #652]	; (8009198 <dwt_ioctl+0x1620>)
 8008f0c:	2500      	movs	r5, #0
 8008f0e:	462a      	mov	r2, r5
 8008f10:	4639      	mov	r1, r7
 8008f12:	4630      	mov	r0, r6
 8008f14:	f7fc fe84 	bl	8005c20 <dwt_read8bitoffsetreg>
 8008f18:	f010 0f01 	tst.w	r0, #1
 8008f1c:	d1f7      	bne.n	8008f0e <dwt_ioctl+0x1396>
 8008f1e:	2200      	movs	r2, #0
 8008f20:	499e      	ldr	r1, [pc, #632]	; (800919c <dwt_ioctl+0x1624>)
 8008f22:	4630      	mov	r0, r6
 8008f24:	f7fc fe6a 	bl	8005bfc <dwt_read16bitoffsetreg>
 8008f28:	4605      	mov	r5, r0
 8008f2a:	4630      	mov	r0, r6
 8008f2c:	f7fd fe30 	bl	8006b90 <ull_disable_rftx_blocks>
 8008f30:	2100      	movs	r1, #0
 8008f32:	4630      	mov	r0, r6
 8008f34:	f7fd fe36 	bl	8006ba4 <ull_disable_rf_tx>
 8008f38:	2105      	movs	r1, #5
 8008f3a:	4630      	mov	r0, r6
 8008f3c:	f7fd faba 	bl	80064b4 <ull_force_clocks>
 8008f40:	f3c5 050b 	ubfx	r5, r5, #0, #12
 8008f44:	8025      	strh	r5, [r4, #0]
 8008f46:	2500      	movs	r5, #0
 8008f48:	f7fe bec0 	b.w	8007ccc <dwt_ioctl+0x154>
 8008f4c:	2102      	movs	r1, #2
 8008f4e:	f7fe f9bb 	bl	80072c8 <ull_setdwstate>
 8008f52:	2101      	movs	r1, #1
 8008f54:	4630      	mov	r0, r6
 8008f56:	f7fe f9b7 	bl	80072c8 <ull_setdwstate>
 8008f5a:	2432      	movs	r4, #50	; 0x32
 8008f5c:	f04f 0814 	mov.w	r8, #20
 8008f60:	2700      	movs	r7, #0
 8008f62:	2544      	movs	r5, #68	; 0x44
 8008f64:	4640      	mov	r0, r8
 8008f66:	f7f7 fadc 	bl	8000522 <deca_usleep>
 8008f6a:	463a      	mov	r2, r7
 8008f6c:	4629      	mov	r1, r5
 8008f6e:	4630      	mov	r0, r6
 8008f70:	f7fc fe56 	bl	8005c20 <dwt_read8bitoffsetreg>
 8008f74:	f010 0f02 	tst.w	r0, #2
 8008f78:	d105      	bne.n	8008f86 <dwt_ioctl+0x140e>
 8008f7a:	1e63      	subs	r3, r4, #1
 8008f7c:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8008f80:	d1f0      	bne.n	8008f64 <dwt_ioctl+0x13ec>
 8008f82:	2501      	movs	r5, #1
 8008f84:	e000      	b.n	8008f88 <dwt_ioctl+0x1410>
 8008f86:	2500      	movs	r5, #0
 8008f88:	426d      	negs	r5, r5
 8008f8a:	f7fe be9f 	b.w	8007ccc <dwt_ioctl+0x154>
 8008f8e:	2c00      	cmp	r4, #0
 8008f90:	f000 84c6 	beq.w	8009920 <dwt_ioctl+0x1da8>
 8008f94:	7823      	ldrb	r3, [r4, #0]
 8008f96:	031b      	lsls	r3, r3, #12
 8008f98:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008f9c:	7862      	ldrb	r2, [r4, #1]
 8008f9e:	2a01      	cmp	r2, #1
 8008fa0:	bf08      	it	eq
 8008fa2:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
 8008fa6:	9300      	str	r3, [sp, #0]
 8008fa8:	f46f 43e2 	mvn.w	r3, #28928	; 0x7100
 8008fac:	2200      	movs	r2, #0
 8008fae:	497c      	ldr	r1, [pc, #496]	; (80091a0 <dwt_ioctl+0x1628>)
 8008fb0:	f7fd fee2 	bl	8006d78 <dwt_modify32bitoffsetreg>
 8008fb4:	2500      	movs	r5, #0
 8008fb6:	f7fe be89 	b.w	8007ccc <dwt_ioctl+0x154>
 8008fba:	2c00      	cmp	r4, #0
 8008fbc:	f000 84b3 	beq.w	8009926 <dwt_ioctl+0x1dae>
 8008fc0:	6862      	ldr	r2, [r4, #4]
 8008fc2:	6821      	ldr	r1, [r4, #0]
 8008fc4:	f7fe f818 	bl	8006ff8 <ull_setgpiomode>
 8008fc8:	2500      	movs	r5, #0
 8008fca:	f7fe be7f 	b.w	8007ccc <dwt_ioctl+0x154>
 8008fce:	2c00      	cmp	r4, #0
 8008fd0:	f000 84ac 	beq.w	800992c <dwt_ioctl+0x1db4>
 8008fd4:	8823      	ldrh	r3, [r4, #0]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	4972      	ldr	r1, [pc, #456]	; (80091a4 <dwt_ioctl+0x162c>)
 8008fda:	f7fd fa3a 	bl	8006452 <dwt_write16bitoffsetreg>
 8008fde:	2500      	movs	r5, #0
 8008fe0:	f7fe be74 	b.w	8007ccc <dwt_ioctl+0x154>
 8008fe4:	2c00      	cmp	r4, #0
 8008fe6:	f000 84a4 	beq.w	8009932 <dwt_ioctl+0x1dba>
 8008fea:	6862      	ldr	r2, [r4, #4]
 8008fec:	8821      	ldrh	r1, [r4, #0]
 8008fee:	f7fe fb13 	bl	8007618 <ull_setgpiovalue>
 8008ff2:	2500      	movs	r5, #0
 8008ff4:	f7fe be6a 	b.w	8007ccc <dwt_ioctl+0x154>
 8008ff8:	2c00      	cmp	r4, #0
 8008ffa:	f000 849d 	beq.w	8009938 <dwt_ioctl+0x1dc0>
 8008ffe:	7865      	ldrb	r5, [r4, #1]
 8009000:	7823      	ldrb	r3, [r4, #0]
 8009002:	b18b      	cbz	r3, 8009028 <dwt_ioctl+0x14b0>
 8009004:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8009006:	2200      	movs	r2, #0
 8009008:	73da      	strb	r2, [r3, #15]
 800900a:	f04f 33ff 	mov.w	r3, #4294967295
 800900e:	2208      	movs	r2, #8
 8009010:	b1e5      	cbz	r5, 800904c <dwt_ioctl+0x14d4>
 8009012:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009016:	9200      	str	r2, [sp, #0]
 8009018:	2200      	movs	r2, #0
 800901a:	2110      	movs	r1, #16
 800901c:	4630      	mov	r0, r6
 800901e:	f7fd feab 	bl	8006d78 <dwt_modify32bitoffsetreg>
 8009022:	2500      	movs	r5, #0
 8009024:	f7fe be52 	b.w	8007ccc <dwt_ioctl+0x154>
 8009028:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800902a:	2201      	movs	r2, #1
 800902c:	73da      	strb	r2, [r3, #15]
 800902e:	2318      	movs	r3, #24
 8009030:	2200      	movs	r2, #0
 8009032:	495d      	ldr	r1, [pc, #372]	; (80091a8 <dwt_ioctl+0x1630>)
 8009034:	f7fd fb0e 	bl	8006654 <dwt_write32bitoffsetreg>
 8009038:	23e8      	movs	r3, #232	; 0xe8
 800903a:	2200      	movs	r2, #0
 800903c:	495b      	ldr	r1, [pc, #364]	; (80091ac <dwt_ioctl+0x1634>)
 800903e:	4630      	mov	r0, r6
 8009040:	f7fd fb08 	bl	8006654 <dwt_write32bitoffsetreg>
 8009044:	f06f 0308 	mvn.w	r3, #8
 8009048:	2200      	movs	r2, #0
 800904a:	e7e1      	b.n	8009010 <dwt_ioctl+0x1498>
 800904c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009050:	e7e1      	b.n	8009016 <dwt_ioctl+0x149e>
 8009052:	2c00      	cmp	r4, #0
 8009054:	f000 8473 	beq.w	800993e <dwt_ioctl+0x1dc6>
 8009058:	6823      	ldr	r3, [r4, #0]
 800905a:	2200      	movs	r2, #0
 800905c:	2130      	movs	r1, #48	; 0x30
 800905e:	f7fd faf9 	bl	8006654 <dwt_write32bitoffsetreg>
 8009062:	2500      	movs	r5, #0
 8009064:	f7fe be32 	b.w	8007ccc <dwt_ioctl+0x154>
 8009068:	2c00      	cmp	r4, #0
 800906a:	f000 846b 	beq.w	8009944 <dwt_ioctl+0x1dcc>
 800906e:	2200      	movs	r2, #0
 8009070:	4629      	mov	r1, r5
 8009072:	f7fc fdad 	bl	8005bd0 <dwt_read32bitoffsetreg>
 8009076:	6020      	str	r0, [r4, #0]
 8009078:	2500      	movs	r5, #0
 800907a:	f7fe be27 	b.w	8007ccc <dwt_ioctl+0x154>
 800907e:	4623      	mov	r3, r4
 8009080:	2200      	movs	r2, #0
 8009082:	4629      	mov	r1, r5
 8009084:	f7fd fae6 	bl	8006654 <dwt_write32bitoffsetreg>
 8009088:	2500      	movs	r5, #0
 800908a:	f7fe be1f 	b.w	8007ccc <dwt_ioctl+0x154>
 800908e:	2c00      	cmp	r4, #0
 8009090:	f000 845b 	beq.w	800994a <dwt_ioctl+0x1dd2>
 8009094:	2203      	movs	r2, #3
 8009096:	4946      	ldr	r1, [pc, #280]	; (80091b0 <dwt_ioctl+0x1638>)
 8009098:	f7fc fdc2 	bl	8005c20 <dwt_read8bitoffsetreg>
 800909c:	f3c0 1002 	ubfx	r0, r0, #4, #3
 80090a0:	7020      	strb	r0, [r4, #0]
 80090a2:	2500      	movs	r5, #0
 80090a4:	f7fe be12 	b.w	8007ccc <dwt_ioctl+0x154>
 80090a8:	2c00      	cmp	r4, #0
 80090aa:	f000 8451 	beq.w	8009950 <dwt_ioctl+0x1dd8>
 80090ae:	6823      	ldr	r3, [r4, #0]
 80090b0:	2200      	movs	r2, #0
 80090b2:	2144      	movs	r1, #68	; 0x44
 80090b4:	f7fd face 	bl	8006654 <dwt_write32bitoffsetreg>
 80090b8:	2500      	movs	r5, #0
 80090ba:	f7fe be07 	b.w	8007ccc <dwt_ioctl+0x154>
 80090be:	2c00      	cmp	r4, #0
 80090c0:	f000 8449 	beq.w	8009956 <dwt_ioctl+0x1dde>
 80090c4:	8823      	ldrh	r3, [r4, #0]
 80090c6:	2200      	movs	r2, #0
 80090c8:	2148      	movs	r1, #72	; 0x48
 80090ca:	f7fd f9c2 	bl	8006452 <dwt_write16bitoffsetreg>
 80090ce:	2500      	movs	r5, #0
 80090d0:	f7fe bdfc 	b.w	8007ccc <dwt_ioctl+0x154>
 80090d4:	2c00      	cmp	r4, #0
 80090d6:	f000 8441 	beq.w	800995c <dwt_ioctl+0x1de4>
 80090da:	2200      	movs	r2, #0
 80090dc:	2144      	movs	r1, #68	; 0x44
 80090de:	f7fc fd77 	bl	8005bd0 <dwt_read32bitoffsetreg>
 80090e2:	6020      	str	r0, [r4, #0]
 80090e4:	2500      	movs	r5, #0
 80090e6:	f7fe bdf1 	b.w	8007ccc <dwt_ioctl+0x154>
 80090ea:	2c00      	cmp	r4, #0
 80090ec:	f000 8439 	beq.w	8009962 <dwt_ioctl+0x1dea>
 80090f0:	2200      	movs	r2, #0
 80090f2:	2148      	movs	r1, #72	; 0x48
 80090f4:	f7fc fd82 	bl	8005bfc <dwt_read16bitoffsetreg>
 80090f8:	6020      	str	r0, [r4, #0]
 80090fa:	2500      	movs	r5, #0
 80090fc:	f7fe bde6 	b.w	8007ccc <dwt_ioctl+0x154>
 8009100:	2c00      	cmp	r4, #0
 8009102:	f000 8431 	beq.w	8009968 <dwt_ioctl+0x1df0>
 8009106:	7823      	ldrb	r3, [r4, #0]
 8009108:	2200      	movs	r2, #0
 800910a:	492a      	ldr	r1, [pc, #168]	; (80091b4 <dwt_ioctl+0x163c>)
 800910c:	f7fd f94f 	bl	80063ae <dwt_write8bitoffsetreg>
 8009110:	2500      	movs	r5, #0
 8009112:	f7fe bddb 	b.w	8007ccc <dwt_ioctl+0x154>
 8009116:	2c00      	cmp	r4, #0
 8009118:	f000 8429 	beq.w	800996e <dwt_ioctl+0x1df6>
 800911c:	2200      	movs	r2, #0
 800911e:	2144      	movs	r1, #68	; 0x44
 8009120:	f7fc fd7e 	bl	8005c20 <dwt_read8bitoffsetreg>
 8009124:	7020      	strb	r0, [r4, #0]
 8009126:	2500      	movs	r5, #0
 8009128:	f7fe bdd0 	b.w	8007ccc <dwt_ioctl+0x154>
 800912c:	2c00      	cmp	r4, #0
 800912e:	f000 8421 	beq.w	8009974 <dwt_ioctl+0x1dfc>
 8009132:	f7fd f949 	bl	80063c8 <ull_getframelength>
 8009136:	6020      	str	r0, [r4, #0]
 8009138:	2500      	movs	r5, #0
 800913a:	f7fe bdc7 	b.w	8007ccc <dwt_ioctl+0x154>
 800913e:	2c00      	cmp	r4, #0
 8009140:	f000 841b 	beq.w	800997a <dwt_ioctl+0x1e02>
 8009144:	2200      	movs	r2, #0
 8009146:	491c      	ldr	r1, [pc, #112]	; (80091b8 <dwt_ioctl+0x1640>)
 8009148:	f7fc fd58 	bl	8005bfc <dwt_read16bitoffsetreg>
 800914c:	8020      	strh	r0, [r4, #0]
 800914e:	2500      	movs	r5, #0
 8009150:	f7fe bdbc 	b.w	8007ccc <dwt_ioctl+0x154>
 8009154:	2c00      	cmp	r4, #0
 8009156:	f000 8413 	beq.w	8009980 <dwt_ioctl+0x1e08>
 800915a:	2200      	movs	r2, #0
 800915c:	4917      	ldr	r1, [pc, #92]	; (80091bc <dwt_ioctl+0x1644>)
 800915e:	f7fc fd37 	bl	8005bd0 <dwt_read32bitoffsetreg>
 8009162:	6020      	str	r0, [r4, #0]
 8009164:	2500      	movs	r5, #0
 8009166:	f7fe bdb1 	b.w	8007ccc <dwt_ioctl+0x154>
 800916a:	2c00      	cmp	r4, #0
 800916c:	f000 840b 	beq.w	8009986 <dwt_ioctl+0x1e0e>
 8009170:	8823      	ldrh	r3, [r4, #0]
 8009172:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009176:	9300      	str	r3, [sp, #0]
 8009178:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800917c:	2200      	movs	r2, #0
 800917e:	490f      	ldr	r1, [pc, #60]	; (80091bc <dwt_ioctl+0x1644>)
 8009180:	f7fe f996 	bl	80074b0 <dwt_modify16bitoffsetreg>
 8009184:	2500      	movs	r5, #0
 8009186:	f7fe bda1 	b.w	8007ccc <dwt_ioctl+0x154>
 800918a:	bf00      	nop
 800918c:	00180028 	.word	0x00180028
 8009190:	000c0008 	.word	0x000c0008
 8009194:	0007001c 	.word	0x0007001c
 8009198:	00080010 	.word	0x00080010
 800919c:	00080014 	.word	0x00080014
 80091a0:	00070014 	.word	0x00070014
 80091a4:	00050008 	.word	0x00050008
 80091a8:	001f000c 	.word	0x001f000c
 80091ac:	001f0010 	.word	0x001f0010
 80091b0:	00030060 	.word	0x00030060
 80091b4:	00010024 	.word	0x00010024
 80091b8:	0005002c 	.word	0x0005002c
 80091bc:	000e001a 	.word	0x000e001a
 80091c0:	2c00      	cmp	r4, #0
 80091c2:	f000 83e3 	beq.w	800998c <dwt_ioctl+0x1e14>
 80091c6:	88a7      	ldrh	r7, [r4, #4]
 80091c8:	68a3      	ldr	r3, [r4, #8]
 80091ca:	9309      	str	r3, [sp, #36]	; 0x24
 80091cc:	7b21      	ldrb	r1, [r4, #12]
 80091ce:	9106      	str	r1, [sp, #24]
 80091d0:	6922      	ldr	r2, [r4, #16]
 80091d2:	9204      	str	r2, [sp, #16]
 80091d4:	6962      	ldr	r2, [r4, #20]
 80091d6:	9205      	str	r2, [sp, #20]
 80091d8:	f003 0203 	and.w	r2, r3, #3
 80091dc:	f3c3 0085 	ubfx	r0, r3, #2, #6
 80091e0:	2905      	cmp	r1, #5
 80091e2:	d142      	bne.n	800926a <dwt_ioctl+0x16f2>
 80091e4:	f5b7 7fb1 	cmp.w	r7, #354	; 0x162
 80091e8:	bf28      	it	cs
 80091ea:	f44f 77b1 	movcs.w	r7, #354	; 0x162
 80091ee:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 80094d0 <dwt_ioctl+0x1958>
 80091f2:	2f04      	cmp	r7, #4
 80091f4:	d805      	bhi.n	8009202 <dwt_ioctl+0x168a>
 80091f6:	eb09 0300 	add.w	r3, r9, r0
 80091fa:	785b      	ldrb	r3, [r3, #1]
 80091fc:	3b05      	subs	r3, #5
 80091fe:	429f      	cmp	r7, r3
 8009200:	db3b      	blt.n	800927a <dwt_ioctl+0x1702>
 8009202:	2a01      	cmp	r2, #1
 8009204:	d877      	bhi.n	80092f6 <dwt_ioctl+0x177e>
 8009206:	4bae      	ldr	r3, [pc, #696]	; (80094c0 <dwt_ioctl+0x1948>)
 8009208:	5c99      	ldrb	r1, [r3, r2]
 800920a:	463e      	mov	r6, r7
 800920c:	42b9      	cmp	r1, r7
 800920e:	da74      	bge.n	80092fa <dwt_ioctl+0x1782>
 8009210:	1c55      	adds	r5, r2, #1
 8009212:	fa53 f585 	uxtab	r5, r3, r5
 8009216:	2300      	movs	r3, #0
 8009218:	440b      	add	r3, r1
 800921a:	b29b      	uxth	r3, r3
 800921c:	3201      	adds	r2, #1
 800921e:	b2d2      	uxtb	r2, r2
 8009220:	2a02      	cmp	r2, #2
 8009222:	d005      	beq.n	8009230 <dwt_ioctl+0x16b8>
 8009224:	f815 1b01 	ldrb.w	r1, [r5], #1
 8009228:	eba6 0c03 	sub.w	ip, r6, r3
 800922c:	4561      	cmp	r1, ip
 800922e:	dbf3      	blt.n	8009218 <dwt_ioctl+0x16a0>
 8009230:	429f      	cmp	r7, r3
 8009232:	bf08      	it	eq
 8009234:	9003      	streq	r0, [sp, #12]
 8009236:	d064      	beq.n	8009302 <dwt_ioctl+0x178a>
 8009238:	f107 0805 	add.w	r8, r7, #5
 800923c:	fa1f f888 	uxth.w	r8, r8
 8009240:	2580      	movs	r5, #128	; 0x80
 8009242:	2100      	movs	r1, #0
 8009244:	9107      	str	r1, [sp, #28]
 8009246:	9103      	str	r1, [sp, #12]
 8009248:	9108      	str	r1, [sp, #32]
 800924a:	460e      	mov	r6, r1
 800924c:	f04f 0b05 	mov.w	fp, #5
 8009250:	46be      	mov	lr, r7
 8009252:	455f      	cmp	r7, fp
 8009254:	bf38      	it	cc
 8009256:	46de      	movcc	lr, fp
 8009258:	f1ae 0e05 	sub.w	lr, lr, #5
 800925c:	fa1f fe8e 	uxth.w	lr, lr
 8009260:	f8df a25c 	ldr.w	sl, [pc, #604]	; 80094c0 <dwt_ioctl+0x1948>
 8009264:	46bc      	mov	ip, r7
 8009266:	460f      	mov	r7, r1
 8009268:	e3dd      	b.n	8009a26 <dwt_ioctl+0x1eae>
 800926a:	f240 1331 	movw	r3, #305	; 0x131
 800926e:	429f      	cmp	r7, r3
 8009270:	bf28      	it	cs
 8009272:	461f      	movcs	r7, r3
 8009274:	f8df 925c 	ldr.w	r9, [pc, #604]	; 80094d4 <dwt_ioctl+0x195c>
 8009278:	e7bb      	b.n	80091f2 <dwt_ioctl+0x167a>
 800927a:	2300      	movs	r3, #0
 800927c:	9a05      	ldr	r2, [sp, #20]
 800927e:	8013      	strh	r3, [r2, #0]
 8009280:	9a04      	ldr	r2, [sp, #16]
 8009282:	4611      	mov	r1, r2
 8009284:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009286:	600a      	str	r2, [r1, #0]
 8009288:	e04a      	b.n	8009320 <dwt_ioctl+0x17a8>
 800928a:	2300      	movs	r3, #0
 800928c:	9a05      	ldr	r2, [sp, #20]
 800928e:	8013      	strh	r3, [r2, #0]
 8009290:	9b04      	ldr	r3, [sp, #16]
 8009292:	461a      	mov	r2, r3
 8009294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009296:	6013      	str	r3, [r2, #0]
 8009298:	f04f 33ff 	mov.w	r3, #4294967295
 800929c:	e040      	b.n	8009320 <dwt_ioctl+0x17a8>
 800929e:	fa1f fb81 	uxth.w	fp, r1
 80092a2:	9207      	str	r2, [sp, #28]
 80092a4:	9003      	str	r0, [sp, #12]
 80092a6:	9308      	str	r3, [sp, #32]
 80092a8:	2701      	movs	r7, #1
 80092aa:	e3cd      	b.n	8009a48 <dwt_ioctl+0x1ed0>
 80092ac:	2f00      	cmp	r7, #0
 80092ae:	f040 83a1 	bne.w	80099f4 <dwt_ioctl+0x1e7c>
 80092b2:	4598      	cmp	r8, r3
 80092b4:	f200 83a3 	bhi.w	80099fe <dwt_ioctl+0x1e86>
 80092b8:	2e00      	cmp	r6, #0
 80092ba:	d038      	beq.n	800932e <dwt_ioctl+0x17b6>
 80092bc:	283f      	cmp	r0, #63	; 0x3f
 80092be:	f000 83c8 	beq.w	8009a52 <dwt_ioctl+0x1eda>
 80092c2:	2700      	movs	r7, #0
 80092c4:	f819 1000 	ldrb.w	r1, [r9, r0]
 80092c8:	1a5b      	subs	r3, r3, r1
 80092ca:	b29b      	uxth	r3, r3
 80092cc:	1e46      	subs	r6, r0, #1
 80092ce:	f006 003f 	and.w	r0, r6, #63	; 0x3f
 80092d2:	f016 063f 	ands.w	r6, r6, #63	; 0x3f
 80092d6:	bf18      	it	ne
 80092d8:	2601      	movne	r6, #1
 80092da:	e39c      	b.n	8009a16 <dwt_ioctl+0x1e9e>
 80092dc:	9906      	ldr	r1, [sp, #24]
 80092de:	2909      	cmp	r1, #9
 80092e0:	f040 83bd 	bne.w	8009a5e <dwt_ioctl+0x1ee6>
 80092e4:	213f      	movs	r1, #63	; 0x3f
 80092e6:	9103      	str	r1, [sp, #12]
 80092e8:	e00b      	b.n	8009302 <dwt_ioctl+0x178a>
 80092ea:	b2b3      	uxth	r3, r6
 80092ec:	3201      	adds	r2, #1
 80092ee:	b2d2      	uxtb	r2, r2
 80092f0:	213f      	movs	r1, #63	; 0x3f
 80092f2:	9103      	str	r1, [sp, #12]
 80092f4:	e005      	b.n	8009302 <dwt_ioctl+0x178a>
 80092f6:	2300      	movs	r3, #0
 80092f8:	e79a      	b.n	8009230 <dwt_ioctl+0x16b8>
 80092fa:	2300      	movs	r3, #0
 80092fc:	e798      	b.n	8009230 <dwt_ioctl+0x16b8>
 80092fe:	9003      	str	r0, [sp, #12]
 8009300:	4663      	mov	r3, ip
 8009302:	9905      	ldr	r1, [sp, #20]
 8009304:	800b      	strh	r3, [r1, #0]
 8009306:	9b03      	ldr	r3, [sp, #12]
 8009308:	ea42 0283 	orr.w	r2, r2, r3, lsl #2
 800930c:	b2d2      	uxtb	r2, r2
 800930e:	0413      	lsls	r3, r2, #16
 8009310:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009314:	4313      	orrs	r3, r2
 8009316:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800931a:	9a04      	ldr	r2, [sp, #16]
 800931c:	6013      	str	r3, [r2, #0]
 800931e:	2300      	movs	r3, #0
 8009320:	6023      	str	r3, [r4, #0]
 8009322:	2500      	movs	r5, #0
 8009324:	f7fe bcd2 	b.w	8007ccc <dwt_ioctl+0x154>
 8009328:	9a07      	ldr	r2, [sp, #28]
 800932a:	9b08      	ldr	r3, [sp, #32]
 800932c:	e7e9      	b.n	8009302 <dwt_ioctl+0x178a>
 800932e:	9003      	str	r0, [sp, #12]
 8009330:	e7e7      	b.n	8009302 <dwt_ioctl+0x178a>
 8009332:	9a07      	ldr	r2, [sp, #28]
 8009334:	9b08      	ldr	r3, [sp, #32]
 8009336:	e7e4      	b.n	8009302 <dwt_ioctl+0x178a>
 8009338:	213f      	movs	r1, #63	; 0x3f
 800933a:	9103      	str	r1, [sp, #12]
 800933c:	e7e1      	b.n	8009302 <dwt_ioctl+0x178a>
 800933e:	2c00      	cmp	r4, #0
 8009340:	f000 8327 	beq.w	8009992 <dwt_ioctl+0x1e1a>
 8009344:	7825      	ldrb	r5, [r4, #0]
 8009346:	6862      	ldr	r2, [r4, #4]
 8009348:	2a01      	cmp	r2, #1
 800934a:	bf15      	itete	ne
 800934c:	f46f 3360 	mvnne.w	r3, #229376	; 0x38000
 8009350:	f46f 43e0 	mvneq.w	r3, #28672	; 0x7000
 8009354:	27df      	movne	r7, #223	; 0xdf
 8009356:	27ef      	moveq	r7, #239	; 0xef
 8009358:	bf14      	ite	ne
 800935a:	f04f 0820 	movne.w	r8, #32
 800935e:	f04f 0810 	moveq.w	r8, #16
 8009362:	2400      	movs	r4, #0
 8009364:	9400      	str	r4, [sp, #0]
 8009366:	4622      	mov	r2, r4
 8009368:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800936c:	f7fd fd04 	bl	8006d78 <dwt_modify32bitoffsetreg>
 8009370:	9400      	str	r4, [sp, #0]
 8009372:	463b      	mov	r3, r7
 8009374:	4622      	mov	r2, r4
 8009376:	4953      	ldr	r1, [pc, #332]	; (80094c4 <dwt_ioctl+0x194c>)
 8009378:	4630      	mov	r0, r6
 800937a:	f7fd fee7 	bl	800714c <dwt_modify8bitoffsetreg>
 800937e:	2d01      	cmp	r5, #1
 8009380:	d003      	beq.n	800938a <dwt_ioctl+0x1812>
 8009382:	b165      	cbz	r5, 800939e <dwt_ioctl+0x1826>
 8009384:	2500      	movs	r5, #0
 8009386:	f7fe bca1 	b.w	8007ccc <dwt_ioctl+0x154>
 800938a:	4625      	mov	r5, r4
 800938c:	9400      	str	r4, [sp, #0]
 800938e:	463b      	mov	r3, r7
 8009390:	4622      	mov	r2, r4
 8009392:	494d      	ldr	r1, [pc, #308]	; (80094c8 <dwt_ioctl+0x1950>)
 8009394:	4630      	mov	r0, r6
 8009396:	f7fd fed9 	bl	800714c <dwt_modify8bitoffsetreg>
 800939a:	f7fe bc97 	b.w	8007ccc <dwt_ioctl+0x154>
 800939e:	f8cd 8000 	str.w	r8, [sp]
 80093a2:	23ff      	movs	r3, #255	; 0xff
 80093a4:	2200      	movs	r2, #0
 80093a6:	4948      	ldr	r1, [pc, #288]	; (80094c8 <dwt_ioctl+0x1950>)
 80093a8:	4630      	mov	r0, r6
 80093aa:	f7fd fecf 	bl	800714c <dwt_modify8bitoffsetreg>
 80093ae:	f7fe bc8d 	b.w	8007ccc <dwt_ioctl+0x154>
 80093b2:	2c00      	cmp	r4, #0
 80093b4:	f000 82f0 	beq.w	8009998 <dwt_ioctl+0x1e20>
 80093b8:	7822      	ldrb	r2, [r4, #0]
 80093ba:	f012 0f01 	tst.w	r2, #1
 80093be:	d02d      	beq.n	800941c <dwt_ioctl+0x18a4>
 80093c0:	0157      	lsls	r7, r2, #5
 80093c2:	f007 0740 	and.w	r7, r7, #64	; 0x40
 80093c6:	2440      	movs	r4, #64	; 0x40
 80093c8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80093cc:	f012 0f04 	tst.w	r2, #4
 80093d0:	d028      	beq.n	8009424 <dwt_ioctl+0x18ac>
 80093d2:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
 80093d6:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 80093da:	0112      	lsls	r2, r2, #4
 80093dc:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80093e0:	4317      	orrs	r7, r2
 80093e2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80093e6:	9200      	str	r2, [sp, #0]
 80093e8:	43db      	mvns	r3, r3
 80093ea:	2200      	movs	r2, #0
 80093ec:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80093f0:	4630      	mov	r0, r6
 80093f2:	f7fd fcc1 	bl	8006d78 <dwt_modify32bitoffsetreg>
 80093f6:	43e4      	mvns	r4, r4
 80093f8:	b2a4      	uxth	r4, r4
 80093fa:	2500      	movs	r5, #0
 80093fc:	9500      	str	r5, [sp, #0]
 80093fe:	4623      	mov	r3, r4
 8009400:	462a      	mov	r2, r5
 8009402:	4930      	ldr	r1, [pc, #192]	; (80094c4 <dwt_ioctl+0x194c>)
 8009404:	4630      	mov	r0, r6
 8009406:	f7fe f853 	bl	80074b0 <dwt_modify16bitoffsetreg>
 800940a:	9700      	str	r7, [sp, #0]
 800940c:	4623      	mov	r3, r4
 800940e:	462a      	mov	r2, r5
 8009410:	492d      	ldr	r1, [pc, #180]	; (80094c8 <dwt_ioctl+0x1950>)
 8009412:	4630      	mov	r0, r6
 8009414:	f7fe f84c 	bl	80074b0 <dwt_modify16bitoffsetreg>
 8009418:	f7fe bc58 	b.w	8007ccc <dwt_ioctl+0x154>
 800941c:	2700      	movs	r7, #0
 800941e:	463c      	mov	r4, r7
 8009420:	463b      	mov	r3, r7
 8009422:	e7d3      	b.n	80093cc <dwt_ioctl+0x1854>
 8009424:	2200      	movs	r2, #0
 8009426:	e7de      	b.n	80093e6 <dwt_ioctl+0x186e>
 8009428:	2308      	movs	r3, #8
 800942a:	9300      	str	r3, [sp, #0]
 800942c:	23ff      	movs	r3, #255	; 0xff
 800942e:	2201      	movs	r2, #1
 8009430:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8009434:	f7fd fe8a 	bl	800714c <dwt_modify8bitoffsetreg>
 8009438:	4c24      	ldr	r4, [pc, #144]	; (80094cc <dwt_ioctl+0x1954>)
 800943a:	2302      	movs	r3, #2
 800943c:	9300      	str	r3, [sp, #0]
 800943e:	23ff      	movs	r3, #255	; 0xff
 8009440:	2203      	movs	r2, #3
 8009442:	4621      	mov	r1, r4
 8009444:	4630      	mov	r0, r6
 8009446:	f7fd fe81 	bl	800714c <dwt_modify8bitoffsetreg>
 800944a:	2500      	movs	r5, #0
 800944c:	9500      	str	r5, [sp, #0]
 800944e:	23f7      	movs	r3, #247	; 0xf7
 8009450:	2201      	movs	r2, #1
 8009452:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8009456:	4630      	mov	r0, r6
 8009458:	f7fd fe78 	bl	800714c <dwt_modify8bitoffsetreg>
 800945c:	9500      	str	r5, [sp, #0]
 800945e:	23fd      	movs	r3, #253	; 0xfd
 8009460:	2203      	movs	r2, #3
 8009462:	4621      	mov	r1, r4
 8009464:	4630      	mov	r0, r6
 8009466:	f7fd fe71 	bl	800714c <dwt_modify8bitoffsetreg>
 800946a:	f7fe bc2f 	b.w	8007ccc <dwt_ioctl+0x154>
 800946e:	2c00      	cmp	r4, #0
 8009470:	f000 8295 	beq.w	800999e <dwt_ioctl+0x1e26>
 8009474:	8863      	ldrh	r3, [r4, #2]
 8009476:	00db      	lsls	r3, r3, #3
 8009478:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800947c:	7822      	ldrb	r2, [r4, #0]
 800947e:	b10a      	cbz	r2, 8009484 <dwt_ioctl+0x190c>
 8009480:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009484:	9300      	str	r3, [sp, #0]
 8009486:	f24f 0307 	movw	r3, #61447	; 0xf007
 800948a:	2200      	movs	r2, #0
 800948c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8009490:	4630      	mov	r0, r6
 8009492:	f7fe f80d 	bl	80074b0 <dwt_modify16bitoffsetreg>
 8009496:	2500      	movs	r5, #0
 8009498:	f7fe bc18 	b.w	8007ccc <dwt_ioctl+0x154>
 800949c:	2c00      	cmp	r4, #0
 800949e:	f000 8281 	beq.w	80099a4 <dwt_ioctl+0x1e2c>
 80094a2:	b2e3      	uxtb	r3, r4
 80094a4:	1c9a      	adds	r2, r3, #2
 80094a6:	2301      	movs	r3, #1
 80094a8:	4093      	lsls	r3, r2
 80094aa:	3b01      	subs	r3, #1
 80094ac:	b2db      	uxtb	r3, r3
 80094ae:	2200      	movs	r2, #0
 80094b0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80094b4:	f7fc ff7b 	bl	80063ae <dwt_write8bitoffsetreg>
 80094b8:	2500      	movs	r5, #0
 80094ba:	f7fe bc07 	b.w	8007ccc <dwt_ioctl+0x154>
 80094be:	bf00      	nop
 80094c0:	0801313c 	.word	0x0801313c
 80094c4:	00050008 	.word	0x00050008
 80094c8:	0005000c 	.word	0x0005000c
 80094cc:	00110008 	.word	0x00110008
 80094d0:	080130bc 	.word	0x080130bc
 80094d4:	080130fc 	.word	0x080130fc
 80094d8:	2c00      	cmp	r4, #0
 80094da:	f000 8266 	beq.w	80099aa <dwt_ioctl+0x1e32>
 80094de:	7ae3      	ldrb	r3, [r4, #11]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	f000 8265 	beq.w	80099b0 <dwt_ioctl+0x1e38>
 80094e6:	7b63      	ldrb	r3, [r4, #13]
 80094e8:	2b01      	cmp	r3, #1
 80094ea:	d921      	bls.n	8009530 <dwt_ioctl+0x19b8>
 80094ec:	7b22      	ldrb	r2, [r4, #12]
 80094ee:	4bd7      	ldr	r3, [pc, #860]	; (800984c <dwt_ioctl+0x1cd4>)
 80094f0:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80094f4:	0112      	lsls	r2, r2, #4
 80094f6:	0ad3      	lsrs	r3, r2, #11
 80094f8:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80094fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009500:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8009504:	bf28      	it	cs
 8009506:	3301      	addcs	r3, #1
 8009508:	b29b      	uxth	r3, r3
 800950a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800950e:	9300      	str	r3, [sp, #0]
 8009510:	f64f 7380 	movw	r3, #65408	; 0xff80
 8009514:	2202      	movs	r2, #2
 8009516:	49ce      	ldr	r1, [pc, #824]	; (8009850 <dwt_ioctl+0x1cd8>)
 8009518:	4630      	mov	r0, r6
 800951a:	f7fd ffc9 	bl	80074b0 <dwt_modify16bitoffsetreg>
 800951e:	2394      	movs	r3, #148	; 0x94
 8009520:	2200      	movs	r2, #0
 8009522:	49cc      	ldr	r1, [pc, #816]	; (8009854 <dwt_ioctl+0x1cdc>)
 8009524:	4630      	mov	r0, r6
 8009526:	f7fc ff42 	bl	80063ae <dwt_write8bitoffsetreg>
 800952a:	2500      	movs	r5, #0
 800952c:	f7fe bbce 	b.w	8007ccc <dwt_ioctl+0x154>
 8009530:	7b22      	ldrb	r2, [r4, #12]
 8009532:	4bc6      	ldr	r3, [pc, #792]	; (800984c <dwt_ioctl+0x1cd4>)
 8009534:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8009538:	f44f 6235 	mov.w	r2, #2896	; 0xb50
 800953c:	fb02 f203 	mul.w	r2, r2, r3
 8009540:	0c93      	lsrs	r3, r2, #18
 8009542:	f3c2 12ca 	ubfx	r2, r2, #7, #11
 8009546:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800954a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800954e:	bf28      	it	cs
 8009550:	3301      	addcs	r3, #1
 8009552:	b29b      	uxth	r3, r3
 8009554:	e7d9      	b.n	800950a <dwt_ioctl+0x1992>
 8009556:	2c00      	cmp	r4, #0
 8009558:	f000 822d 	beq.w	80099b6 <dwt_ioctl+0x1e3e>
 800955c:	2200      	movs	r2, #0
 800955e:	49be      	ldr	r1, [pc, #760]	; (8009858 <dwt_ioctl+0x1ce0>)
 8009560:	f7fc fb36 	bl	8005bd0 <dwt_read32bitoffsetreg>
 8009564:	6020      	str	r0, [r4, #0]
 8009566:	2500      	movs	r5, #0
 8009568:	f7fe bbb0 	b.w	8007ccc <dwt_ioctl+0x154>
 800956c:	2c00      	cmp	r4, #0
 800956e:	f000 8225 	beq.w	80099bc <dwt_ioctl+0x1e44>
 8009572:	2200      	movs	r2, #0
 8009574:	49b9      	ldr	r1, [pc, #740]	; (800985c <dwt_ioctl+0x1ce4>)
 8009576:	f7fc fb2b 	bl	8005bd0 <dwt_read32bitoffsetreg>
 800957a:	6020      	str	r0, [r4, #0]
 800957c:	2500      	movs	r5, #0
 800957e:	f7fe bba5 	b.w	8007ccc <dwt_ioctl+0x154>
 8009582:	2c00      	cmp	r4, #0
 8009584:	f000 821d 	beq.w	80099c2 <dwt_ioctl+0x1e4a>
 8009588:	f44f 13a8 	mov.w	r3, #1376256	; 0x150000
 800958c:	6023      	str	r3, [r4, #0]
 800958e:	2500      	movs	r5, #0
 8009590:	f7fe bb9c 	b.w	8007ccc <dwt_ioctl+0x154>
 8009594:	2c00      	cmp	r4, #0
 8009596:	f000 8217 	beq.w	80099c8 <dwt_ioctl+0x1e50>
 800959a:	2500      	movs	r5, #0
 800959c:	950b      	str	r5, [sp, #44]	; 0x2c
 800959e:	af10      	add	r7, sp, #64	; 0x40
 80095a0:	2319      	movs	r3, #25
 80095a2:	f847 3d10 	str.w	r3, [r7, #-16]!
 80095a6:	9700      	str	r7, [sp, #0]
 80095a8:	2304      	movs	r3, #4
 80095aa:	462a      	mov	r2, r5
 80095ac:	49ac      	ldr	r1, [pc, #688]	; (8009860 <dwt_ioctl+0x1ce8>)
 80095ae:	f7fc fef3 	bl	8006398 <dwt_writetodevice>
 80095b2:	f641 7348 	movw	r3, #8008	; 0x1f48
 80095b6:	930c      	str	r3, [sp, #48]	; 0x30
 80095b8:	9700      	str	r7, [sp, #0]
 80095ba:	2304      	movs	r3, #4
 80095bc:	462a      	mov	r2, r5
 80095be:	49a9      	ldr	r1, [pc, #676]	; (8009864 <dwt_ioctl+0x1cec>)
 80095c0:	4630      	mov	r0, r6
 80095c2:	f7fc fee9 	bl	8006398 <dwt_writetodevice>
 80095c6:	ab0b      	add	r3, sp, #44	; 0x2c
 80095c8:	9300      	str	r3, [sp, #0]
 80095ca:	2304      	movs	r3, #4
 80095cc:	462a      	mov	r2, r5
 80095ce:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 80095d2:	4630      	mov	r0, r6
 80095d4:	f7fc faf2 	bl	8005bbc <dwt_readfromdevice>
 80095d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095da:	6023      	str	r3, [r4, #0]
 80095dc:	f7fe bb76 	b.w	8007ccc <dwt_ioctl+0x154>
 80095e0:	2c00      	cmp	r4, #0
 80095e2:	f000 81f4 	beq.w	80099ce <dwt_ioctl+0x1e56>
 80095e6:	2200      	movs	r2, #0
 80095e8:	499f      	ldr	r1, [pc, #636]	; (8009868 <dwt_ioctl+0x1cf0>)
 80095ea:	f7fc faf1 	bl	8005bd0 <dwt_read32bitoffsetreg>
 80095ee:	b280      	uxth	r0, r0
 80095f0:	6020      	str	r0, [r4, #0]
 80095f2:	2200      	movs	r2, #0
 80095f4:	499d      	ldr	r1, [pc, #628]	; (800986c <dwt_ioctl+0x1cf4>)
 80095f6:	4630      	mov	r0, r6
 80095f8:	f7fc faea 	bl	8005bd0 <dwt_read32bitoffsetreg>
 80095fc:	0d43      	lsrs	r3, r0, #21
 80095fe:	019b      	lsls	r3, r3, #6
 8009600:	b29b      	uxth	r3, r3
 8009602:	6063      	str	r3, [r4, #4]
 8009604:	2500      	movs	r5, #0
 8009606:	f7fe bb61 	b.w	8007ccc <dwt_ioctl+0x154>
 800960a:	2c00      	cmp	r4, #0
 800960c:	f000 81e2 	beq.w	80099d4 <dwt_ioctl+0x1e5c>
 8009610:	7d63      	ldrb	r3, [r4, #21]
 8009612:	b12b      	cbz	r3, 8009620 <dwt_ioctl+0x1aa8>
 8009614:	2b01      	cmp	r3, #1
 8009616:	d037      	beq.n	8009688 <dwt_ioctl+0x1b10>
 8009618:	2b02      	cmp	r3, #2
 800961a:	d05e      	beq.n	80096da <dwt_ioctl+0x1b62>
 800961c:	23ff      	movs	r3, #255	; 0xff
 800961e:	e02f      	b.n	8009680 <dwt_ioctl+0x1b08>
 8009620:	2200      	movs	r2, #0
 8009622:	4993      	ldr	r1, [pc, #588]	; (8009870 <dwt_ioctl+0x1cf8>)
 8009624:	f7fc fad4 	bl	8005bd0 <dwt_read32bitoffsetreg>
 8009628:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800962c:	6020      	str	r0, [r4, #0]
 800962e:	2200      	movs	r2, #0
 8009630:	4990      	ldr	r1, [pc, #576]	; (8009874 <dwt_ioctl+0x1cfc>)
 8009632:	4630      	mov	r0, r6
 8009634:	f7fc facc 	bl	8005bd0 <dwt_read32bitoffsetreg>
 8009638:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800963c:	6060      	str	r0, [r4, #4]
 800963e:	2200      	movs	r2, #0
 8009640:	498d      	ldr	r1, [pc, #564]	; (8009878 <dwt_ioctl+0x1d00>)
 8009642:	4630      	mov	r0, r6
 8009644:	f7fc fac4 	bl	8005bd0 <dwt_read32bitoffsetreg>
 8009648:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800964c:	60a0      	str	r0, [r4, #8]
 800964e:	2200      	movs	r2, #0
 8009650:	498a      	ldr	r1, [pc, #552]	; (800987c <dwt_ioctl+0x1d04>)
 8009652:	4630      	mov	r0, r6
 8009654:	f7fc fabc 	bl	8005bd0 <dwt_read32bitoffsetreg>
 8009658:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800965c:	60e0      	str	r0, [r4, #12]
 800965e:	2200      	movs	r2, #0
 8009660:	4987      	ldr	r1, [pc, #540]	; (8009880 <dwt_ioctl+0x1d08>)
 8009662:	4630      	mov	r0, r6
 8009664:	f7fc fab4 	bl	8005bd0 <dwt_read32bitoffsetreg>
 8009668:	f3c0 0010 	ubfx	r0, r0, #0, #17
 800966c:	6120      	str	r0, [r4, #16]
 800966e:	2203      	movs	r2, #3
 8009670:	4979      	ldr	r1, [pc, #484]	; (8009858 <dwt_ioctl+0x1ce0>)
 8009672:	4630      	mov	r0, r6
 8009674:	f7fc fad4 	bl	8005c20 <dwt_read8bitoffsetreg>
 8009678:	f3c0 1002 	ubfx	r0, r0, #4, #3
 800967c:	7520      	strb	r0, [r4, #20]
 800967e:	2300      	movs	r3, #0
 8009680:	75a3      	strb	r3, [r4, #22]
 8009682:	2500      	movs	r5, #0
 8009684:	f7fe bb22 	b.w	8007ccc <dwt_ioctl+0x154>
 8009688:	2200      	movs	r2, #0
 800968a:	497e      	ldr	r1, [pc, #504]	; (8009884 <dwt_ioctl+0x1d0c>)
 800968c:	f7fc faa0 	bl	8005bd0 <dwt_read32bitoffsetreg>
 8009690:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8009694:	6020      	str	r0, [r4, #0]
 8009696:	2200      	movs	r2, #0
 8009698:	497b      	ldr	r1, [pc, #492]	; (8009888 <dwt_ioctl+0x1d10>)
 800969a:	4630      	mov	r0, r6
 800969c:	f7fc fa98 	bl	8005bd0 <dwt_read32bitoffsetreg>
 80096a0:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80096a4:	6060      	str	r0, [r4, #4]
 80096a6:	2200      	movs	r2, #0
 80096a8:	4978      	ldr	r1, [pc, #480]	; (800988c <dwt_ioctl+0x1d14>)
 80096aa:	4630      	mov	r0, r6
 80096ac:	f7fc fa90 	bl	8005bd0 <dwt_read32bitoffsetreg>
 80096b0:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80096b4:	60a0      	str	r0, [r4, #8]
 80096b6:	2200      	movs	r2, #0
 80096b8:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 80096bc:	4630      	mov	r0, r6
 80096be:	f7fc fa87 	bl	8005bd0 <dwt_read32bitoffsetreg>
 80096c2:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80096c6:	60e0      	str	r0, [r4, #12]
 80096c8:	2200      	movs	r2, #0
 80096ca:	4971      	ldr	r1, [pc, #452]	; (8009890 <dwt_ioctl+0x1d18>)
 80096cc:	4630      	mov	r0, r6
 80096ce:	f7fc fa7f 	bl	8005bd0 <dwt_read32bitoffsetreg>
 80096d2:	f3c0 0013 	ubfx	r0, r0, #0, #20
 80096d6:	6120      	str	r0, [r4, #16]
 80096d8:	e7c9      	b.n	800966e <dwt_ioctl+0x1af6>
 80096da:	2200      	movs	r2, #0
 80096dc:	496d      	ldr	r1, [pc, #436]	; (8009894 <dwt_ioctl+0x1d1c>)
 80096de:	f7fc fa77 	bl	8005bd0 <dwt_read32bitoffsetreg>
 80096e2:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80096e6:	6020      	str	r0, [r4, #0]
 80096e8:	2200      	movs	r2, #0
 80096ea:	496b      	ldr	r1, [pc, #428]	; (8009898 <dwt_ioctl+0x1d20>)
 80096ec:	4630      	mov	r0, r6
 80096ee:	f7fc fa6f 	bl	8005bd0 <dwt_read32bitoffsetreg>
 80096f2:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80096f6:	6060      	str	r0, [r4, #4]
 80096f8:	2200      	movs	r2, #0
 80096fa:	4968      	ldr	r1, [pc, #416]	; (800989c <dwt_ioctl+0x1d24>)
 80096fc:	4630      	mov	r0, r6
 80096fe:	f7fc fa67 	bl	8005bd0 <dwt_read32bitoffsetreg>
 8009702:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8009706:	60a0      	str	r0, [r4, #8]
 8009708:	2200      	movs	r2, #0
 800970a:	4965      	ldr	r1, [pc, #404]	; (80098a0 <dwt_ioctl+0x1d28>)
 800970c:	4630      	mov	r0, r6
 800970e:	f7fc fa5f 	bl	8005bd0 <dwt_read32bitoffsetreg>
 8009712:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8009716:	60e0      	str	r0, [r4, #12]
 8009718:	2200      	movs	r2, #0
 800971a:	4962      	ldr	r1, [pc, #392]	; (80098a4 <dwt_ioctl+0x1d2c>)
 800971c:	4630      	mov	r0, r6
 800971e:	f7fc fa57 	bl	8005bd0 <dwt_read32bitoffsetreg>
 8009722:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8009726:	6120      	str	r0, [r4, #16]
 8009728:	e7a1      	b.n	800966e <dwt_ioctl+0x1af6>
 800972a:	2500      	movs	r5, #0
 800972c:	f7fe bace 	b.w	8007ccc <dwt_ioctl+0x154>
 8009730:	2500      	movs	r5, #0
 8009732:	f7fe bacb 	b.w	8007ccc <dwt_ioctl+0x154>
 8009736:	2500      	movs	r5, #0
 8009738:	f7fe bac8 	b.w	8007ccc <dwt_ioctl+0x154>
 800973c:	2500      	movs	r5, #0
 800973e:	f7fe bac5 	b.w	8007ccc <dwt_ioctl+0x154>
 8009742:	2500      	movs	r5, #0
 8009744:	f7fe bac2 	b.w	8007ccc <dwt_ioctl+0x154>
 8009748:	2500      	movs	r5, #0
 800974a:	f7fe babf 	b.w	8007ccc <dwt_ioctl+0x154>
 800974e:	2500      	movs	r5, #0
 8009750:	f7fe babc 	b.w	8007ccc <dwt_ioctl+0x154>
 8009754:	2500      	movs	r5, #0
 8009756:	f7fe bab9 	b.w	8007ccc <dwt_ioctl+0x154>
 800975a:	2500      	movs	r5, #0
 800975c:	f7fe bab6 	b.w	8007ccc <dwt_ioctl+0x154>
 8009760:	2500      	movs	r5, #0
 8009762:	f7fe bab3 	b.w	8007ccc <dwt_ioctl+0x154>
 8009766:	2500      	movs	r5, #0
 8009768:	f7fe bab0 	b.w	8007ccc <dwt_ioctl+0x154>
 800976c:	2500      	movs	r5, #0
 800976e:	f7fe baad 	b.w	8007ccc <dwt_ioctl+0x154>
 8009772:	2500      	movs	r5, #0
 8009774:	f7fe baaa 	b.w	8007ccc <dwt_ioctl+0x154>
 8009778:	2500      	movs	r5, #0
 800977a:	f7fe baa7 	b.w	8007ccc <dwt_ioctl+0x154>
 800977e:	2500      	movs	r5, #0
 8009780:	f7fe baa4 	b.w	8007ccc <dwt_ioctl+0x154>
 8009784:	2500      	movs	r5, #0
 8009786:	f7fe baa1 	b.w	8007ccc <dwt_ioctl+0x154>
 800978a:	2500      	movs	r5, #0
 800978c:	f7fe ba9e 	b.w	8007ccc <dwt_ioctl+0x154>
 8009790:	2500      	movs	r5, #0
 8009792:	f7fe ba9b 	b.w	8007ccc <dwt_ioctl+0x154>
 8009796:	2500      	movs	r5, #0
 8009798:	f7fe ba98 	b.w	8007ccc <dwt_ioctl+0x154>
 800979c:	2500      	movs	r5, #0
 800979e:	f7fe ba95 	b.w	8007ccc <dwt_ioctl+0x154>
 80097a2:	2500      	movs	r5, #0
 80097a4:	f7fe ba92 	b.w	8007ccc <dwt_ioctl+0x154>
 80097a8:	2500      	movs	r5, #0
 80097aa:	f7fe ba8f 	b.w	8007ccc <dwt_ioctl+0x154>
 80097ae:	2500      	movs	r5, #0
 80097b0:	f7fe ba8c 	b.w	8007ccc <dwt_ioctl+0x154>
 80097b4:	2500      	movs	r5, #0
 80097b6:	f7fe ba89 	b.w	8007ccc <dwt_ioctl+0x154>
 80097ba:	2500      	movs	r5, #0
 80097bc:	f7fe ba86 	b.w	8007ccc <dwt_ioctl+0x154>
 80097c0:	2500      	movs	r5, #0
 80097c2:	f7fe ba83 	b.w	8007ccc <dwt_ioctl+0x154>
 80097c6:	2500      	movs	r5, #0
 80097c8:	f7fe ba80 	b.w	8007ccc <dwt_ioctl+0x154>
 80097cc:	2500      	movs	r5, #0
 80097ce:	f7fe ba7d 	b.w	8007ccc <dwt_ioctl+0x154>
 80097d2:	2500      	movs	r5, #0
 80097d4:	f7fe ba7a 	b.w	8007ccc <dwt_ioctl+0x154>
 80097d8:	2500      	movs	r5, #0
 80097da:	f7fe ba77 	b.w	8007ccc <dwt_ioctl+0x154>
 80097de:	2500      	movs	r5, #0
 80097e0:	f7fe ba74 	b.w	8007ccc <dwt_ioctl+0x154>
 80097e4:	2500      	movs	r5, #0
 80097e6:	f7fe ba71 	b.w	8007ccc <dwt_ioctl+0x154>
 80097ea:	2500      	movs	r5, #0
 80097ec:	f7fe ba6e 	b.w	8007ccc <dwt_ioctl+0x154>
 80097f0:	2500      	movs	r5, #0
 80097f2:	f7fe ba6b 	b.w	8007ccc <dwt_ioctl+0x154>
 80097f6:	2500      	movs	r5, #0
 80097f8:	f7fe ba68 	b.w	8007ccc <dwt_ioctl+0x154>
 80097fc:	2500      	movs	r5, #0
 80097fe:	f7fe ba65 	b.w	8007ccc <dwt_ioctl+0x154>
 8009802:	2500      	movs	r5, #0
 8009804:	f7fe ba62 	b.w	8007ccc <dwt_ioctl+0x154>
 8009808:	2500      	movs	r5, #0
 800980a:	f7fe ba5f 	b.w	8007ccc <dwt_ioctl+0x154>
 800980e:	2500      	movs	r5, #0
 8009810:	f7fe ba5c 	b.w	8007ccc <dwt_ioctl+0x154>
 8009814:	2500      	movs	r5, #0
 8009816:	f7fe ba59 	b.w	8007ccc <dwt_ioctl+0x154>
 800981a:	2500      	movs	r5, #0
 800981c:	f7fe ba56 	b.w	8007ccc <dwt_ioctl+0x154>
 8009820:	2500      	movs	r5, #0
 8009822:	f7fe ba53 	b.w	8007ccc <dwt_ioctl+0x154>
 8009826:	2500      	movs	r5, #0
 8009828:	f7fe ba50 	b.w	8007ccc <dwt_ioctl+0x154>
 800982c:	2500      	movs	r5, #0
 800982e:	f7fe ba4d 	b.w	8007ccc <dwt_ioctl+0x154>
 8009832:	2500      	movs	r5, #0
 8009834:	f7fe ba4a 	b.w	8007ccc <dwt_ioctl+0x154>
 8009838:	2500      	movs	r5, #0
 800983a:	f7fe ba47 	b.w	8007ccc <dwt_ioctl+0x154>
 800983e:	2500      	movs	r5, #0
 8009840:	f7fe ba44 	b.w	8007ccc <dwt_ioctl+0x154>
 8009844:	2500      	movs	r5, #0
 8009846:	f7fe ba41 	b.w	8007ccc <dwt_ioctl+0x154>
 800984a:	bf00      	nop
 800984c:	08013178 	.word	0x08013178
 8009850:	000e0012 	.word	0x000e0012
 8009854:	000e0016 	.word	0x000e0016
 8009858:	00030060 	.word	0x00030060
 800985c:	000f0048 	.word	0x000f0048
 8009860:	001f0004 	.word	0x001f0004
 8009864:	001f0008 	.word	0x001f0008
 8009868:	000c0048 	.word	0x000c0048
 800986c:	000c0028 	.word	0x000c0028
 8009870:	000c0058 	.word	0x000c0058
 8009874:	000c0030 	.word	0x000c0030
 8009878:	000c0034 	.word	0x000c0034
 800987c:	000c0038 	.word	0x000c0038
 8009880:	000c002c 	.word	0x000c002c
 8009884:	000d0020 	.word	0x000d0020
 8009888:	000c0064 	.word	0x000c0064
 800988c:	000c0068 	.word	0x000c0068
 8009890:	000c0060 	.word	0x000c0060
 8009894:	000d0068 	.word	0x000d0068
 8009898:	000d0040 	.word	0x000d0040
 800989c:	000d0044 	.word	0x000d0044
 80098a0:	000d0048 	.word	0x000d0048
 80098a4:	000d003c 	.word	0x000d003c
 80098a8:	2500      	movs	r5, #0
 80098aa:	f7fe ba0f 	b.w	8007ccc <dwt_ioctl+0x154>
 80098ae:	2500      	movs	r5, #0
 80098b0:	f7fe ba0c 	b.w	8007ccc <dwt_ioctl+0x154>
 80098b4:	2500      	movs	r5, #0
 80098b6:	f7fe ba09 	b.w	8007ccc <dwt_ioctl+0x154>
 80098ba:	2500      	movs	r5, #0
 80098bc:	f7fe ba06 	b.w	8007ccc <dwt_ioctl+0x154>
 80098c0:	2500      	movs	r5, #0
 80098c2:	f7fe ba03 	b.w	8007ccc <dwt_ioctl+0x154>
 80098c6:	2500      	movs	r5, #0
 80098c8:	f7fe ba00 	b.w	8007ccc <dwt_ioctl+0x154>
 80098cc:	2500      	movs	r5, #0
 80098ce:	f7fe b9fd 	b.w	8007ccc <dwt_ioctl+0x154>
 80098d2:	2500      	movs	r5, #0
 80098d4:	f7fe b9fa 	b.w	8007ccc <dwt_ioctl+0x154>
 80098d8:	2500      	movs	r5, #0
 80098da:	f7fe b9f7 	b.w	8007ccc <dwt_ioctl+0x154>
 80098de:	2500      	movs	r5, #0
 80098e0:	f7fe b9f4 	b.w	8007ccc <dwt_ioctl+0x154>
 80098e4:	2500      	movs	r5, #0
 80098e6:	f7fe b9f1 	b.w	8007ccc <dwt_ioctl+0x154>
 80098ea:	2500      	movs	r5, #0
 80098ec:	f7fe b9ee 	b.w	8007ccc <dwt_ioctl+0x154>
 80098f0:	2500      	movs	r5, #0
 80098f2:	f7fe b9eb 	b.w	8007ccc <dwt_ioctl+0x154>
 80098f6:	2500      	movs	r5, #0
 80098f8:	f7fe b9e8 	b.w	8007ccc <dwt_ioctl+0x154>
 80098fc:	2500      	movs	r5, #0
 80098fe:	f7fe b9e5 	b.w	8007ccc <dwt_ioctl+0x154>
 8009902:	2500      	movs	r5, #0
 8009904:	f7fe b9e2 	b.w	8007ccc <dwt_ioctl+0x154>
 8009908:	2500      	movs	r5, #0
 800990a:	f7fe b9df 	b.w	8007ccc <dwt_ioctl+0x154>
 800990e:	2500      	movs	r5, #0
 8009910:	f7fe b9dc 	b.w	8007ccc <dwt_ioctl+0x154>
 8009914:	2500      	movs	r5, #0
 8009916:	f7fe b9d9 	b.w	8007ccc <dwt_ioctl+0x154>
 800991a:	2500      	movs	r5, #0
 800991c:	f7fe b9d6 	b.w	8007ccc <dwt_ioctl+0x154>
 8009920:	2500      	movs	r5, #0
 8009922:	f7fe b9d3 	b.w	8007ccc <dwt_ioctl+0x154>
 8009926:	2500      	movs	r5, #0
 8009928:	f7fe b9d0 	b.w	8007ccc <dwt_ioctl+0x154>
 800992c:	2500      	movs	r5, #0
 800992e:	f7fe b9cd 	b.w	8007ccc <dwt_ioctl+0x154>
 8009932:	2500      	movs	r5, #0
 8009934:	f7fe b9ca 	b.w	8007ccc <dwt_ioctl+0x154>
 8009938:	2500      	movs	r5, #0
 800993a:	f7fe b9c7 	b.w	8007ccc <dwt_ioctl+0x154>
 800993e:	2500      	movs	r5, #0
 8009940:	f7fe b9c4 	b.w	8007ccc <dwt_ioctl+0x154>
 8009944:	2500      	movs	r5, #0
 8009946:	f7fe b9c1 	b.w	8007ccc <dwt_ioctl+0x154>
 800994a:	2500      	movs	r5, #0
 800994c:	f7fe b9be 	b.w	8007ccc <dwt_ioctl+0x154>
 8009950:	2500      	movs	r5, #0
 8009952:	f7fe b9bb 	b.w	8007ccc <dwt_ioctl+0x154>
 8009956:	2500      	movs	r5, #0
 8009958:	f7fe b9b8 	b.w	8007ccc <dwt_ioctl+0x154>
 800995c:	2500      	movs	r5, #0
 800995e:	f7fe b9b5 	b.w	8007ccc <dwt_ioctl+0x154>
 8009962:	2500      	movs	r5, #0
 8009964:	f7fe b9b2 	b.w	8007ccc <dwt_ioctl+0x154>
 8009968:	2500      	movs	r5, #0
 800996a:	f7fe b9af 	b.w	8007ccc <dwt_ioctl+0x154>
 800996e:	2500      	movs	r5, #0
 8009970:	f7fe b9ac 	b.w	8007ccc <dwt_ioctl+0x154>
 8009974:	2500      	movs	r5, #0
 8009976:	f7fe b9a9 	b.w	8007ccc <dwt_ioctl+0x154>
 800997a:	2500      	movs	r5, #0
 800997c:	f7fe b9a6 	b.w	8007ccc <dwt_ioctl+0x154>
 8009980:	2500      	movs	r5, #0
 8009982:	f7fe b9a3 	b.w	8007ccc <dwt_ioctl+0x154>
 8009986:	2500      	movs	r5, #0
 8009988:	f7fe b9a0 	b.w	8007ccc <dwt_ioctl+0x154>
 800998c:	2500      	movs	r5, #0
 800998e:	f7fe b99d 	b.w	8007ccc <dwt_ioctl+0x154>
 8009992:	2500      	movs	r5, #0
 8009994:	f7fe b99a 	b.w	8007ccc <dwt_ioctl+0x154>
 8009998:	2500      	movs	r5, #0
 800999a:	f7fe b997 	b.w	8007ccc <dwt_ioctl+0x154>
 800999e:	2500      	movs	r5, #0
 80099a0:	f7fe b994 	b.w	8007ccc <dwt_ioctl+0x154>
 80099a4:	2500      	movs	r5, #0
 80099a6:	f7fe b991 	b.w	8007ccc <dwt_ioctl+0x154>
 80099aa:	2500      	movs	r5, #0
 80099ac:	f7fe b98e 	b.w	8007ccc <dwt_ioctl+0x154>
 80099b0:	2500      	movs	r5, #0
 80099b2:	f7fe b98b 	b.w	8007ccc <dwt_ioctl+0x154>
 80099b6:	2500      	movs	r5, #0
 80099b8:	f7fe b988 	b.w	8007ccc <dwt_ioctl+0x154>
 80099bc:	2500      	movs	r5, #0
 80099be:	f7fe b985 	b.w	8007ccc <dwt_ioctl+0x154>
 80099c2:	2500      	movs	r5, #0
 80099c4:	f7fe b982 	b.w	8007ccc <dwt_ioctl+0x154>
 80099c8:	2500      	movs	r5, #0
 80099ca:	f7fe b97f 	b.w	8007ccc <dwt_ioctl+0x154>
 80099ce:	2500      	movs	r5, #0
 80099d0:	f7fe b97c 	b.w	8007ccc <dwt_ioctl+0x154>
 80099d4:	2500      	movs	r5, #0
 80099d6:	f7fe b979 	b.w	8007ccc <dwt_ioctl+0x154>
 80099da:	f899 3011 	ldrb.w	r3, [r9, #17]
 80099de:	1e5a      	subs	r2, r3, #1
 80099e0:	b2d2      	uxtb	r2, r2
 80099e2:	2a01      	cmp	r2, #1
 80099e4:	f67f a801 	bls.w	80089ea <dwt_ioctl+0xe72>
 80099e8:	2202      	movs	r2, #2
 80099ea:	f7fe bf88 	b.w	80088fe <dwt_ioctl+0xd86>
 80099ee:	2f00      	cmp	r7, #0
 80099f0:	f43f ac62 	beq.w	80092b8 <dwt_ioctl+0x1740>
 80099f4:	f819 1000 	ldrb.w	r1, [r9, r0]
 80099f8:	1a5b      	subs	r3, r3, r1
 80099fa:	b29b      	uxth	r3, r3
 80099fc:	e481      	b.n	8009302 <dwt_ioctl+0x178a>
 80099fe:	283f      	cmp	r0, #63	; 0x3f
 8009a00:	d027      	beq.n	8009a52 <dwt_ioctl+0x1eda>
 8009a02:	2e00      	cmp	r6, #0
 8009a04:	f47f ac5e 	bne.w	80092c4 <dwt_ioctl+0x174c>
 8009a08:	3001      	adds	r0, #1
 8009a0a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8009a0e:	f819 1000 	ldrb.w	r1, [r9, r0]
 8009a12:	440b      	add	r3, r1
 8009a14:	b29b      	uxth	r3, r3
 8009a16:	459c      	cmp	ip, r3
 8009a18:	f43f ac71 	beq.w	80092fe <dwt_ioctl+0x1786>
 8009a1c:	3d01      	subs	r5, #1
 8009a1e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8009a22:	f43f ac32 	beq.w	800928a <dwt_ioctl+0x1712>
 8009a26:	459e      	cmp	lr, r3
 8009a28:	f4bf ac40 	bcs.w	80092ac <dwt_ioctl+0x1734>
 8009a2c:	4598      	cmp	r8, r3
 8009a2e:	d9de      	bls.n	80099ee <dwt_ioctl+0x1e76>
 8009a30:	ebac 0103 	sub.w	r1, ip, r3
 8009a34:	b209      	sxth	r1, r1
 8009a36:	2900      	cmp	r1, #0
 8009a38:	bfb8      	it	lt
 8009a3a:	4249      	neglt	r1, r1
 8009a3c:	4559      	cmp	r1, fp
 8009a3e:	f77f ac2e 	ble.w	800929e <dwt_ioctl+0x1726>
 8009a42:	2f00      	cmp	r7, #0
 8009a44:	f47f ac70 	bne.w	8009328 <dwt_ioctl+0x17b0>
 8009a48:	283f      	cmp	r0, #63	; 0x3f
 8009a4a:	d1da      	bne.n	8009a02 <dwt_ioctl+0x1e8a>
 8009a4c:	2f00      	cmp	r7, #0
 8009a4e:	f47f ac70 	bne.w	8009332 <dwt_ioctl+0x17ba>
 8009a52:	2a03      	cmp	r2, #3
 8009a54:	f43f ac70 	beq.w	8009338 <dwt_ioctl+0x17c0>
 8009a58:	2a02      	cmp	r2, #2
 8009a5a:	f43f ac3f 	beq.w	80092dc <dwt_ioctl+0x1764>
 8009a5e:	f81a 1002 	ldrb.w	r1, [sl, r2]
 8009a62:	185e      	adds	r6, r3, r1
 8009a64:	4566      	cmp	r6, ip
 8009a66:	f77f ac40 	ble.w	80092ea <dwt_ioctl+0x1772>
 8009a6a:	440b      	add	r3, r1
 8009a6c:	b29b      	uxth	r3, r3
 8009a6e:	3201      	adds	r2, #1
 8009a70:	b2d2      	uxtb	r2, r2
 8009a72:	2700      	movs	r7, #0
 8009a74:	e426      	b.n	80092c4 <dwt_ioctl+0x174c>
 8009a76:	bf00      	nop

08009a78 <ull_initialise>:
 8009a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a7c:	4605      	mov	r5, r0
 8009a7e:	460e      	mov	r6, r1
 8009a80:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d05c      	beq.n	8009b40 <ull_initialise+0xc8>
 8009a86:	6d2c      	ldr	r4, [r5, #80]	; 0x50
 8009a88:	2300      	movs	r3, #0
 8009a8a:	73e3      	strb	r3, [r4, #15]
 8009a8c:	2202      	movs	r2, #2
 8009a8e:	8262      	strh	r2, [r4, #18]
 8009a90:	75a3      	strb	r3, [r4, #22]
 8009a92:	75e3      	strb	r3, [r4, #23]
 8009a94:	7423      	strb	r3, [r4, #16]
 8009a96:	72a3      	strb	r3, [r4, #10]
 8009a98:	72e3      	strb	r3, [r4, #11]
 8009a9a:	2104      	movs	r1, #4
 8009a9c:	4628      	mov	r0, r5
 8009a9e:	f7fc fd33 	bl	8006508 <_dwt_otpread>
 8009aa2:	4607      	mov	r7, r0
 8009aa4:	2105      	movs	r1, #5
 8009aa6:	4628      	mov	r0, r5
 8009aa8:	f7fc fd2e 	bl	8006508 <_dwt_otpread>
 8009aac:	4680      	mov	r8, r0
 8009aae:	210a      	movs	r1, #10
 8009ab0:	4628      	mov	r0, r5
 8009ab2:	f7fc fd29 	bl	8006508 <_dwt_otpread>
 8009ab6:	f3c0 4004 	ubfx	r0, r0, #16, #5
 8009aba:	7220      	strb	r0, [r4, #8]
 8009abc:	b127      	cbz	r7, 8009ac8 <ull_initialise+0x50>
 8009abe:	f1b8 0f00 	cmp.w	r8, #0
 8009ac2:	d001      	beq.n	8009ac8 <ull_initialise+0x50>
 8009ac4:	2800      	cmp	r0, #0
 8009ac6:	d140      	bne.n	8009b4a <ull_initialise+0xd2>
 8009ac8:	2120      	movs	r1, #32
 8009aca:	4628      	mov	r0, r5
 8009acc:	f7fc fd1c 	bl	8006508 <_dwt_otpread>
 8009ad0:	4b2f      	ldr	r3, [pc, #188]	; (8009b90 <ull_initialise+0x118>)
 8009ad2:	4298      	cmp	r0, r3
 8009ad4:	bf0c      	ite	eq
 8009ad6:	2301      	moveq	r3, #1
 8009ad8:	2300      	movne	r3, #0
 8009ada:	7263      	strb	r3, [r4, #9]
 8009adc:	f016 0f10 	tst.w	r6, #16
 8009ae0:	d137      	bne.n	8009b52 <ull_initialise+0xda>
 8009ae2:	f016 0f20 	tst.w	r6, #32
 8009ae6:	d13a      	bne.n	8009b5e <ull_initialise+0xe6>
 8009ae8:	f016 0f40 	tst.w	r6, #64	; 0x40
 8009aec:	d13d      	bne.n	8009b6a <ull_initialise+0xf2>
 8009aee:	f016 0f80 	tst.w	r6, #128	; 0x80
 8009af2:	d141      	bne.n	8009b78 <ull_initialise+0x100>
 8009af4:	7ae3      	ldrb	r3, [r4, #11]
 8009af6:	b90b      	cbnz	r3, 8009afc <ull_initialise+0x84>
 8009af8:	2385      	movs	r3, #133	; 0x85
 8009afa:	72e3      	strb	r3, [r4, #11]
 8009afc:	7aa3      	ldrb	r3, [r4, #10]
 8009afe:	b90b      	cbnz	r3, 8009b04 <ull_initialise+0x8c>
 8009b00:	2374      	movs	r3, #116	; 0x74
 8009b02:	72a3      	strb	r3, [r4, #10]
 8009b04:	211f      	movs	r1, #31
 8009b06:	4628      	mov	r0, r5
 8009b08:	f7fc fcfe 	bl	8006508 <_dwt_otpread>
 8009b0c:	7360      	strb	r0, [r4, #13]
 8009b0e:	211e      	movs	r1, #30
 8009b10:	4628      	mov	r0, r5
 8009b12:	f7fc fcf9 	bl	8006508 <_dwt_otpread>
 8009b16:	f010 003f 	ands.w	r0, r0, #63	; 0x3f
 8009b1a:	bf12      	itee	ne
 8009b1c:	73a0      	strbne	r0, [r4, #14]
 8009b1e:	232e      	moveq	r3, #46	; 0x2e
 8009b20:	73a3      	strbeq	r3, [r4, #14]
 8009b22:	7ba3      	ldrb	r3, [r4, #14]
 8009b24:	2200      	movs	r2, #0
 8009b26:	491b      	ldr	r1, [pc, #108]	; (8009b94 <ull_initialise+0x11c>)
 8009b28:	4628      	mov	r0, r5
 8009b2a:	f7fc fc40 	bl	80063ae <dwt_write8bitoffsetreg>
 8009b2e:	2135      	movs	r1, #53	; 0x35
 8009b30:	4628      	mov	r0, r5
 8009b32:	f7fc fce9 	bl	8006508 <_dwt_otpread>
 8009b36:	4603      	mov	r3, r0
 8009b38:	bb20      	cbnz	r0, 8009b84 <ull_initialise+0x10c>
 8009b3a:	2000      	movs	r0, #0
 8009b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b40:	202c      	movs	r0, #44	; 0x2c
 8009b42:	f009 f903 	bl	8012d4c <malloc>
 8009b46:	6528      	str	r0, [r5, #80]	; 0x50
 8009b48:	e79d      	b.n	8009a86 <ull_initialise+0xe>
 8009b4a:	4628      	mov	r0, r5
 8009b4c:	f7fd fcca 	bl	80074e4 <_dwt_prog_ldo_and_bias_tune>
 8009b50:	e7ba      	b.n	8009ac8 <ull_initialise+0x50>
 8009b52:	2106      	movs	r1, #6
 8009b54:	4628      	mov	r0, r5
 8009b56:	f7fc fcd7 	bl	8006508 <_dwt_otpread>
 8009b5a:	6020      	str	r0, [r4, #0]
 8009b5c:	e7c1      	b.n	8009ae2 <ull_initialise+0x6a>
 8009b5e:	2107      	movs	r1, #7
 8009b60:	4628      	mov	r0, r5
 8009b62:	f7fc fcd1 	bl	8006508 <_dwt_otpread>
 8009b66:	6060      	str	r0, [r4, #4]
 8009b68:	e7be      	b.n	8009ae8 <ull_initialise+0x70>
 8009b6a:	2108      	movs	r1, #8
 8009b6c:	4628      	mov	r0, r5
 8009b6e:	f7fc fccb 	bl	8006508 <_dwt_otpread>
 8009b72:	0c00      	lsrs	r0, r0, #16
 8009b74:	72a0      	strb	r0, [r4, #10]
 8009b76:	e7ba      	b.n	8009aee <ull_initialise+0x76>
 8009b78:	2109      	movs	r1, #9
 8009b7a:	4628      	mov	r0, r5
 8009b7c:	f7fc fcc4 	bl	8006508 <_dwt_otpread>
 8009b80:	72e0      	strb	r0, [r4, #11]
 8009b82:	e7b7      	b.n	8009af4 <ull_initialise+0x7c>
 8009b84:	2200      	movs	r2, #0
 8009b86:	4904      	ldr	r1, [pc, #16]	; (8009b98 <ull_initialise+0x120>)
 8009b88:	4628      	mov	r0, r5
 8009b8a:	f7fc fd63 	bl	8006654 <dwt_write32bitoffsetreg>
 8009b8e:	e7d4      	b.n	8009b3a <ull_initialise+0xc2>
 8009b90:	10000240 	.word	0x10000240
 8009b94:	00090014 	.word	0x00090014
 8009b98:	00090004 	.word	0x00090004

08009b9c <_init>:
 8009b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b9e:	b085      	sub	sp, #20
 8009ba0:	4604      	mov	r4, r0
 8009ba2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009ba4:	6819      	ldr	r1, [r3, #0]
 8009ba6:	f7ff ff67 	bl	8009a78 <ull_initialise>
 8009baa:	4606      	mov	r6, r0
 8009bac:	6823      	ldr	r3, [r4, #0]
 8009bae:	691b      	ldr	r3, [r3, #16]
 8009bb0:	4798      	blx	r3
 8009bb2:	ab03      	add	r3, sp, #12
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	4611      	mov	r1, r2
 8009bb8:	4620      	mov	r0, r4
 8009bba:	f7fd ffdd 	bl	8007b78 <dwt_ioctl>
 8009bbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bc2:	6819      	ldr	r1, [r3, #0]
 8009bc4:	4620      	mov	r0, r4
 8009bc6:	f7fd fdad 	bl	8007724 <ull_configure>
 8009bca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bce:	6859      	ldr	r1, [r3, #4]
 8009bd0:	4620      	mov	r0, r4
 8009bd2:	f7fd fb47 	bl	8007264 <ull_configuretxrf>
 8009bd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bda:	89db      	ldrh	r3, [r3, #14]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 8009be2:	4620      	mov	r0, r4
 8009be4:	f7fc fc35 	bl	8006452 <dwt_write16bitoffsetreg>
 8009be8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bec:	899b      	ldrh	r3, [r3, #12]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	4952      	ldr	r1, [pc, #328]	; (8009d3c <_init+0x1a0>)
 8009bf2:	4620      	mov	r0, r4
 8009bf4:	f7fc fc2d 	bl	8006452 <dwt_write16bitoffsetreg>
 8009bf8:	2100      	movs	r1, #0
 8009bfa:	4620      	mov	r0, r4
 8009bfc:	f7fc fec6 	bl	800698c <ull_setrxaftertxdelay>
 8009c00:	2500      	movs	r5, #0
 8009c02:	9500      	str	r5, [sp, #0]
 8009c04:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 8009c08:	462a      	mov	r2, r5
 8009c0a:	2110      	movs	r1, #16
 8009c0c:	4620      	mov	r0, r4
 8009c0e:	f7fd fc4f 	bl	80074b0 <dwt_modify16bitoffsetreg>
 8009c12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c16:	895a      	ldrh	r2, [r3, #10]
 8009c18:	8919      	ldrh	r1, [r3, #8]
 8009c1a:	4620      	mov	r0, r4
 8009c1c:	f7fd fbb2 	bl	8007384 <ull_configureframefilter>
 8009c20:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c24:	8a1b      	ldrh	r3, [r3, #16]
 8009c26:	2202      	movs	r2, #2
 8009c28:	210c      	movs	r1, #12
 8009c2a:	4620      	mov	r0, r4
 8009c2c:	f7fc fc11 	bl	8006452 <dwt_write16bitoffsetreg>
 8009c30:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c34:	8a5b      	ldrh	r3, [r3, #18]
 8009c36:	462a      	mov	r2, r5
 8009c38:	210c      	movs	r1, #12
 8009c3a:	4620      	mov	r0, r4
 8009c3c:	f7fc fc09 	bl	8006452 <dwt_write16bitoffsetreg>
 8009c40:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c42:	7a19      	ldrb	r1, [r3, #8]
 8009c44:	4620      	mov	r0, r4
 8009c46:	f7fd fc69 	bl	800751c <ull_setleds>
 8009c4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c4c:	68d9      	ldr	r1, [r3, #12]
 8009c4e:	4620      	mov	r0, r4
 8009c50:	f7fc feb2 	bl	80069b8 <ull_setlnapamode>
 8009c54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c56:	7e0b      	ldrb	r3, [r1, #24]
 8009c58:	694a      	ldr	r2, [r1, #20]
 8009c5a:	6909      	ldr	r1, [r1, #16]
 8009c5c:	4620      	mov	r0, r4
 8009c5e:	f7fd f9e9 	bl	8007034 <ull_setinterrupt>
 8009c62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c64:	7f9a      	ldrb	r2, [r3, #30]
 8009c66:	8b99      	ldrh	r1, [r3, #28]
 8009c68:	4620      	mov	r0, r4
 8009c6a:	f7fc fcb7 	bl	80065dc <ull_configuresleep>
 8009c6e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8009c70:	7b93      	ldrb	r3, [r2, #14]
 8009c72:	2b2e      	cmp	r3, #46	; 0x2e
 8009c74:	d005      	beq.n	8009c82 <_init+0xe6>
 8009c76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c78:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009c7c:	f033 033f 	bics.w	r3, r3, #63	; 0x3f
 8009c80:	d00a      	beq.n	8009c98 <_init+0xfc>
 8009c82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c84:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009c88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009c8c:	7393      	strb	r3, [r2, #14]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	492b      	ldr	r1, [pc, #172]	; (8009d40 <_init+0x1a4>)
 8009c92:	4620      	mov	r0, r4
 8009c94:	f7fc fb8b 	bl	80063ae <dwt_write8bitoffsetreg>
 8009c98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c9a:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 8009c9e:	4620      	mov	r0, r4
 8009ca0:	f7fd fa68 	bl	8007174 <ull_configciadiag>
 8009ca4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ca6:	6a19      	ldr	r1, [r3, #32]
 8009ca8:	4620      	mov	r0, r4
 8009caa:	f7fc fea7 	bl	80069fc <ull_configurestskey>
 8009cae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009cb0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009cb2:	4620      	mov	r0, r4
 8009cb4:	f7fc fec6 	bl	8006a44 <ull_configurestsiv>
 8009cb8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009cba:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8009cbe:	bba3      	cbnz	r3, 8009d2a <_init+0x18e>
 8009cc0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009cc2:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 8009cc6:	4620      	mov	r0, r4
 8009cc8:	f7fc fbb0 	bl	800642c <ull_configeventcounters>
 8009ccc:	f994 504c 	ldrsb.w	r5, [r4, #76]	; 0x4c
 8009cd0:	2d00      	cmp	r5, #0
 8009cd2:	db27      	blt.n	8009d24 <_init+0x188>
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	fa03 f505 	lsl.w	r5, r3, r5
 8009cda:	b2af      	uxth	r7, r5
 8009cdc:	f04f 7290 	mov.w	r2, #18874368	; 0x1200000
 8009ce0:	4639      	mov	r1, r7
 8009ce2:	4620      	mov	r0, r4
 8009ce4:	f7fd f988 	bl	8006ff8 <ull_setgpiomode>
 8009ce8:	f10d 030a 	add.w	r3, sp, #10
 8009cec:	9300      	str	r3, [sp, #0]
 8009cee:	2302      	movs	r3, #2
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8009cf6:	4620      	mov	r0, r4
 8009cf8:	f7fb ff60 	bl	8005bbc <dwt_readfromdevice>
 8009cfc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8009d00:	ea23 0305 	bic.w	r3, r3, r5
 8009d04:	f8ad 300a 	strh.w	r3, [sp, #10]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	490e      	ldr	r1, [pc, #56]	; (8009d44 <_init+0x1a8>)
 8009d0c:	4620      	mov	r0, r4
 8009d0e:	f7fc fba0 	bl	8006452 <dwt_write16bitoffsetreg>
 8009d12:	f994 204d 	ldrsb.w	r2, [r4, #77]	; 0x4d
 8009d16:	fab2 f282 	clz	r2, r2
 8009d1a:	0952      	lsrs	r2, r2, #5
 8009d1c:	4639      	mov	r1, r7
 8009d1e:	4620      	mov	r0, r4
 8009d20:	f7fd fc7a 	bl	8007618 <ull_setgpiovalue>
 8009d24:	4630      	mov	r0, r6
 8009d26:	b005      	add	sp, #20
 8009d28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	9300      	str	r3, [sp, #0]
 8009d2e:	23ff      	movs	r3, #255	; 0xff
 8009d30:	2200      	movs	r2, #0
 8009d32:	4905      	ldr	r1, [pc, #20]	; (8009d48 <_init+0x1ac>)
 8009d34:	4620      	mov	r0, r4
 8009d36:	f7fd fa09 	bl	800714c <dwt_modify8bitoffsetreg>
 8009d3a:	e7c1      	b.n	8009cc0 <_init+0x124>
 8009d3c:	00010004 	.word	0x00010004
 8009d40:	00090014 	.word	0x00090014
 8009d44:	00050008 	.word	0x00050008
 8009d48:	00020004 	.word	0x00020004

08009d4c <dwt_dbg_fn>:
 8009d4c:	2998      	cmp	r1, #152	; 0x98
 8009d4e:	4802      	ldr	r0, [pc, #8]	; (8009d58 <dwt_dbg_fn+0xc>)
 8009d50:	bf18      	it	ne
 8009d52:	2000      	movne	r0, #0
 8009d54:	4770      	bx	lr
 8009d56:	bf00      	nop
 8009d58:	08013280 	.word	0x08013280

08009d5c <_deinit>:
 8009d5c:	4770      	bx	lr

08009d5e <dwt_xfer3xxx>:
 8009d5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d62:	b084      	sub	sp, #16
 8009d64:	4605      	mov	r5, r0
 8009d66:	460f      	mov	r7, r1
 8009d68:	461e      	mov	r6, r3
 8009d6a:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8009d6e:	1e59      	subs	r1, r3, #1
 8009d70:	b289      	uxth	r1, r1
 8009d72:	2901      	cmp	r1, #1
 8009d74:	d91c      	bls.n	8009db0 <dwt_xfer3xxx+0x52>
 8009d76:	19d0      	adds	r0, r2, r7
 8009d78:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8009d7c:	443a      	add	r2, r7
 8009d7e:	f3c2 4104 	ubfx	r1, r2, #16, #5
 8009d82:	0082      	lsls	r2, r0, #2
 8009d84:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8009d88:	ea43 0102 	orr.w	r1, r3, r2
 8009d8c:	0a09      	lsrs	r1, r1, #8
 8009d8e:	f88d 100c 	strb.w	r1, [sp, #12]
 8009d92:	b920      	cbnz	r0, 8009d9e <dwt_xfer3xxx+0x40>
 8009d94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d98:	d018      	beq.n	8009dcc <dwt_xfer3xxx+0x6e>
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d037      	beq.n	8009e0e <dwt_xfer3xxx+0xb0>
 8009d9e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8009da2:	f88d 100c 	strb.w	r1, [sp, #12]
 8009da6:	431a      	orrs	r2, r3
 8009da8:	f88d 200d 	strb.w	r2, [sp, #13]
 8009dac:	2402      	movs	r4, #2
 8009dae:	e005      	b.n	8009dbc <dwt_xfer3xxx+0x5e>
 8009db0:	007a      	lsls	r2, r7, #1
 8009db2:	f062 027e 	orn	r2, r2, #126	; 0x7e
 8009db6:	f88d 200c 	strb.w	r2, [sp, #12]
 8009dba:	2401      	movs	r4, #1
 8009dbc:	2b02      	cmp	r3, #2
 8009dbe:	d006      	beq.n	8009dce <dwt_xfer3xxx+0x70>
 8009dc0:	d326      	bcc.n	8009e10 <dwt_xfer3xxx+0xb2>
 8009dc2:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8009dc6:	2b03      	cmp	r3, #3
 8009dc8:	d901      	bls.n	8009dce <dwt_xfer3xxx+0x70>
 8009dca:	e7fe      	b.n	8009dca <dwt_xfer3xxx+0x6c>
 8009dcc:	2401      	movs	r4, #1
 8009dce:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8009dd0:	7d1b      	ldrb	r3, [r3, #20]
 8009dd2:	b94b      	cbnz	r3, 8009de8 <dwt_xfer3xxx+0x8a>
 8009dd4:	682b      	ldr	r3, [r5, #0]
 8009dd6:	685d      	ldr	r5, [r3, #4]
 8009dd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dda:	4632      	mov	r2, r6
 8009ddc:	a903      	add	r1, sp, #12
 8009dde:	4620      	mov	r0, r4
 8009de0:	47a8      	blx	r5
 8009de2:	b004      	add	sp, #16
 8009de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009de8:	2200      	movs	r2, #0
 8009dea:	4621      	mov	r1, r4
 8009dec:	a803      	add	r0, sp, #12
 8009dee:	f7fb fdfd 	bl	80059ec <dwt_generatecrc8>
 8009df2:	4602      	mov	r2, r0
 8009df4:	4631      	mov	r1, r6
 8009df6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009df8:	f7fb fdf8 	bl	80059ec <dwt_generatecrc8>
 8009dfc:	682b      	ldr	r3, [r5, #0]
 8009dfe:	9000      	str	r0, [sp, #0]
 8009e00:	689d      	ldr	r5, [r3, #8]
 8009e02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e04:	4632      	mov	r2, r6
 8009e06:	a903      	add	r1, sp, #12
 8009e08:	4620      	mov	r0, r4
 8009e0a:	47a8      	blx	r5
 8009e0c:	e7e9      	b.n	8009de2 <dwt_xfer3xxx+0x84>
 8009e0e:	2401      	movs	r4, #1
 8009e10:	682b      	ldr	r3, [r5, #0]
 8009e12:	f8d3 8000 	ldr.w	r8, [r3]
 8009e16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e18:	4632      	mov	r2, r6
 8009e1a:	a903      	add	r1, sp, #12
 8009e1c:	4620      	mov	r0, r4
 8009e1e:	47c0      	blx	r8
 8009e20:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8009e22:	7d1b      	ldrb	r3, [r3, #20]
 8009e24:	2b02      	cmp	r3, #2
 8009e26:	d1dc      	bne.n	8009de2 <dwt_xfer3xxx+0x84>
 8009e28:	2f18      	cmp	r7, #24
 8009e2a:	d0da      	beq.n	8009de2 <dwt_xfer3xxx+0x84>
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	4621      	mov	r1, r4
 8009e30:	a803      	add	r0, sp, #12
 8009e32:	f7fb fddb 	bl	80059ec <dwt_generatecrc8>
 8009e36:	4602      	mov	r2, r0
 8009e38:	4631      	mov	r1, r6
 8009e3a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009e3c:	f7fb fdd6 	bl	80059ec <dwt_generatecrc8>
 8009e40:	4604      	mov	r4, r0
 8009e42:	2200      	movs	r2, #0
 8009e44:	2118      	movs	r1, #24
 8009e46:	4628      	mov	r0, r5
 8009e48:	f000 f839 	bl	8009ebe <dwt_read8bitoffsetreg>
 8009e4c:	4284      	cmp	r4, r0
 8009e4e:	d0c8      	beq.n	8009de2 <dwt_xfer3xxx+0x84>
 8009e50:	68eb      	ldr	r3, [r5, #12]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d0c5      	beq.n	8009de2 <dwt_xfer3xxx+0x84>
 8009e56:	4798      	blx	r3
 8009e58:	e7c3      	b.n	8009de2 <dwt_xfer3xxx+0x84>

08009e5a <dwt_readfromdevice>:
 8009e5a:	b510      	push	{r4, lr}
 8009e5c:	b082      	sub	sp, #8
 8009e5e:	2400      	movs	r4, #0
 8009e60:	9401      	str	r4, [sp, #4]
 8009e62:	9c04      	ldr	r4, [sp, #16]
 8009e64:	9400      	str	r4, [sp, #0]
 8009e66:	f7ff ff7a 	bl	8009d5e <dwt_xfer3xxx>
 8009e6a:	b002      	add	sp, #8
 8009e6c:	bd10      	pop	{r4, pc}

08009e6e <dwt_read32bitoffsetreg>:
 8009e6e:	b500      	push	{lr}
 8009e70:	b085      	sub	sp, #20
 8009e72:	ab03      	add	r3, sp, #12
 8009e74:	9300      	str	r3, [sp, #0]
 8009e76:	2304      	movs	r3, #4
 8009e78:	b292      	uxth	r2, r2
 8009e7a:	f7ff ffee 	bl	8009e5a <dwt_readfromdevice>
 8009e7e:	f10d 030f 	add.w	r3, sp, #15
 8009e82:	f10d 010b 	add.w	r1, sp, #11
 8009e86:	2000      	movs	r0, #0
 8009e88:	f813 2901 	ldrb.w	r2, [r3], #-1
 8009e8c:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 8009e90:	428b      	cmp	r3, r1
 8009e92:	d1f9      	bne.n	8009e88 <dwt_read32bitoffsetreg+0x1a>
 8009e94:	b005      	add	sp, #20
 8009e96:	f85d fb04 	ldr.w	pc, [sp], #4

08009e9a <dwt_read16bitoffsetreg>:
 8009e9a:	b500      	push	{lr}
 8009e9c:	b085      	sub	sp, #20
 8009e9e:	ab03      	add	r3, sp, #12
 8009ea0:	9300      	str	r3, [sp, #0]
 8009ea2:	2302      	movs	r3, #2
 8009ea4:	b292      	uxth	r2, r2
 8009ea6:	f7ff ffd8 	bl	8009e5a <dwt_readfromdevice>
 8009eaa:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8009eae:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8009eb2:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 8009eb6:	b280      	uxth	r0, r0
 8009eb8:	b005      	add	sp, #20
 8009eba:	f85d fb04 	ldr.w	pc, [sp], #4

08009ebe <dwt_read8bitoffsetreg>:
 8009ebe:	b500      	push	{lr}
 8009ec0:	b085      	sub	sp, #20
 8009ec2:	f10d 030f 	add.w	r3, sp, #15
 8009ec6:	9300      	str	r3, [sp, #0]
 8009ec8:	2301      	movs	r3, #1
 8009eca:	b292      	uxth	r2, r2
 8009ecc:	f7ff ffc5 	bl	8009e5a <dwt_readfromdevice>
 8009ed0:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8009ed4:	b005      	add	sp, #20
 8009ed6:	f85d fb04 	ldr.w	pc, [sp], #4

08009eda <ull_readdiagnostics>:
 8009eda:	b530      	push	{r4, r5, lr}
 8009edc:	b0bd      	sub	sp, #244	; 0xf4
 8009ede:	4605      	mov	r5, r0
 8009ee0:	460c      	mov	r4, r1
 8009ee2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8009ee4:	7b9a      	ldrb	r2, [r3, #14]
 8009ee6:	2a01      	cmp	r2, #1
 8009ee8:	d01c      	beq.n	8009f24 <ull_readdiagnostics+0x4a>
 8009eea:	2a03      	cmp	r2, #3
 8009eec:	f040 81e8 	bne.w	800a2c0 <ull_readdiagnostics+0x3e6>
 8009ef0:	7d9b      	ldrb	r3, [r3, #22]
 8009ef2:	f013 0f08 	tst.w	r3, #8
 8009ef6:	d10c      	bne.n	8009f12 <ull_readdiagnostics+0x38>
 8009ef8:	f013 0f04 	tst.w	r3, #4
 8009efc:	ab02      	add	r3, sp, #8
 8009efe:	9300      	str	r3, [sp, #0]
 8009f00:	bf14      	ite	ne
 8009f02:	2338      	movne	r3, #56	; 0x38
 8009f04:	2320      	moveq	r3, #32
 8009f06:	2200      	movs	r2, #0
 8009f08:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8009f0c:	f7ff ffa5 	bl	8009e5a <dwt_readfromdevice>
 8009f10:	e019      	b.n	8009f46 <ull_readdiagnostics+0x6c>
 8009f12:	ab02      	add	r3, sp, #8
 8009f14:	9300      	str	r3, [sp, #0]
 8009f16:	23e8      	movs	r3, #232	; 0xe8
 8009f18:	2200      	movs	r2, #0
 8009f1a:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8009f1e:	f7ff ff9c 	bl	8009e5a <dwt_readfromdevice>
 8009f22:	e010      	b.n	8009f46 <ull_readdiagnostics+0x6c>
 8009f24:	7d9b      	ldrb	r3, [r3, #22]
 8009f26:	f013 0f08 	tst.w	r3, #8
 8009f2a:	f040 81c0 	bne.w	800a2ae <ull_readdiagnostics+0x3d4>
 8009f2e:	f013 0f04 	tst.w	r3, #4
 8009f32:	ab02      	add	r3, sp, #8
 8009f34:	9300      	str	r3, [sp, #0]
 8009f36:	bf14      	ite	ne
 8009f38:	2338      	movne	r3, #56	; 0x38
 8009f3a:	2320      	moveq	r3, #32
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 8009f42:	f7ff ff8a 	bl	8009e5a <dwt_readfromdevice>
 8009f46:	f10d 0217 	add.w	r2, sp, #23
 8009f4a:	f104 031a 	add.w	r3, r4, #26
 8009f4e:	f104 0020 	add.w	r0, r4, #32
 8009f52:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8009f56:	f803 1b01 	strb.w	r1, [r3], #1
 8009f5a:	4283      	cmp	r3, r0
 8009f5c:	d1f9      	bne.n	8009f52 <ull_readdiagnostics+0x78>
 8009f5e:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8009f62:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8009f66:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009f6a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009f6e:	8463      	strh	r3, [r4, #34]	; 0x22
 8009f70:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8009f74:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8009f78:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009f7c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009f80:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8009f84:	bf1c      	itt	ne
 8009f86:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 8009f8a:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 8009f8e:	8423      	strh	r3, [r4, #32]
 8009f90:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 8009f94:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8009f98:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009f9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009fa0:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8009fa2:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8009fa4:	7d9b      	ldrb	r3, [r3, #22]
 8009fa6:	f013 0f02 	tst.w	r3, #2
 8009faa:	f040 817e 	bne.w	800a2aa <ull_readdiagnostics+0x3d0>
 8009fae:	aa0a      	add	r2, sp, #40	; 0x28
 8009fb0:	1e63      	subs	r3, r4, #1
 8009fb2:	1d20      	adds	r0, r4, #4
 8009fb4:	f812 1b01 	ldrb.w	r1, [r2], #1
 8009fb8:	f803 1f01 	strb.w	r1, [r3, #1]!
 8009fbc:	79d1      	ldrb	r1, [r2, #7]
 8009fbe:	7219      	strb	r1, [r3, #8]
 8009fc0:	7bd1      	ldrb	r1, [r2, #15]
 8009fc2:	7459      	strb	r1, [r3, #17]
 8009fc4:	4283      	cmp	r3, r0
 8009fc6:	d1f5      	bne.n	8009fb4 <ull_readdiagnostics+0xda>
 8009fc8:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8009fcc:	7163      	strb	r3, [r4, #5]
 8009fce:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 8009fd2:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 8009fd6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009fda:	80e3      	strh	r3, [r4, #6]
 8009fdc:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 8009fe0:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 8009fe4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8009fe8:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 8009fec:	f8a4 300d 	strh.w	r3, [r4, #13]
 8009ff0:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 8009ff4:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8009ff8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009ffc:	f8a4 300f 	strh.w	r3, [r4, #15]
 800a000:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 800a004:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 800a008:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800a00c:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 800a010:	82e3      	strh	r3, [r4, #22]
 800a012:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
 800a016:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 800a01a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a01e:	8323      	strh	r3, [r4, #24]
 800a020:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800a022:	7d9b      	ldrb	r3, [r3, #22]
 800a024:	f013 0f04 	tst.w	r3, #4
 800a028:	f040 813f 	bne.w	800a2aa <ull_readdiagnostics+0x3d0>
 800a02c:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 800a030:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800a034:	041b      	lsls	r3, r3, #16
 800a036:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a03a:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 800a03e:	4313      	orrs	r3, r2
 800a040:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 800a044:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a048:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800a04c:	6263      	str	r3, [r4, #36]	; 0x24
 800a04e:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
 800a052:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
 800a056:	041b      	lsls	r3, r3, #16
 800a058:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a05c:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800a060:	4313      	orrs	r3, r2
 800a062:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
 800a066:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a06a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a06e:	62a3      	str	r3, [r4, #40]	; 0x28
 800a070:	f89d 204b 	ldrb.w	r2, [sp, #75]	; 0x4b
 800a074:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 800a078:	041b      	lsls	r3, r3, #16
 800a07a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a07e:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 800a082:	4313      	orrs	r3, r2
 800a084:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 800a088:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a08c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a090:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a092:	f89d 204f 	ldrb.w	r2, [sp, #79]	; 0x4f
 800a096:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
 800a09a:	041b      	lsls	r3, r3, #16
 800a09c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a0a0:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 800a0a4:	4313      	orrs	r3, r2
 800a0a6:	f89d 204d 	ldrb.w	r2, [sp, #77]	; 0x4d
 800a0aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a0ae:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a0b2:	6323      	str	r3, [r4, #48]	; 0x30
 800a0b4:	f89d 2053 	ldrb.w	r2, [sp, #83]	; 0x53
 800a0b8:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
 800a0bc:	041b      	lsls	r3, r3, #16
 800a0be:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a0c2:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 800a0c6:	4313      	orrs	r3, r2
 800a0c8:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 800a0cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a0d0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a0d4:	6363      	str	r3, [r4, #52]	; 0x34
 800a0d6:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
 800a0da:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
 800a0de:	041b      	lsls	r3, r3, #16
 800a0e0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a0e4:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 800a0e8:	4313      	orrs	r3, r2
 800a0ea:	f89d 2055 	ldrb.w	r2, [sp, #85]	; 0x55
 800a0ee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a0f2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a0f6:	63a3      	str	r3, [r4, #56]	; 0x38
 800a0f8:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 800a0fc:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 800a100:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a104:	87a3      	strh	r3, [r4, #60]	; 0x3c
 800a106:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 800a10a:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 800a10e:	041b      	lsls	r3, r3, #16
 800a110:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a114:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 800a118:	4313      	orrs	r3, r2
 800a11a:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 800a11e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a122:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800a126:	6423      	str	r3, [r4, #64]	; 0x40
 800a128:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
 800a12c:	f89d 307a 	ldrb.w	r3, [sp, #122]	; 0x7a
 800a130:	041b      	lsls	r3, r3, #16
 800a132:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a136:	f89d 2078 	ldrb.w	r2, [sp, #120]	; 0x78
 800a13a:	4313      	orrs	r3, r2
 800a13c:	f89d 2079 	ldrb.w	r2, [sp, #121]	; 0x79
 800a140:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a144:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a148:	6463      	str	r3, [r4, #68]	; 0x44
 800a14a:	f89d 207f 	ldrb.w	r2, [sp, #127]	; 0x7f
 800a14e:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
 800a152:	041b      	lsls	r3, r3, #16
 800a154:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a158:	f89d 207c 	ldrb.w	r2, [sp, #124]	; 0x7c
 800a15c:	4313      	orrs	r3, r2
 800a15e:	f89d 207d 	ldrb.w	r2, [sp, #125]	; 0x7d
 800a162:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a166:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a16a:	64a3      	str	r3, [r4, #72]	; 0x48
 800a16c:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
 800a170:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
 800a174:	041b      	lsls	r3, r3, #16
 800a176:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a17a:	f89d 2080 	ldrb.w	r2, [sp, #128]	; 0x80
 800a17e:	4313      	orrs	r3, r2
 800a180:	f89d 2081 	ldrb.w	r2, [sp, #129]	; 0x81
 800a184:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a188:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a18c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a18e:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
 800a192:	f89d 3086 	ldrb.w	r3, [sp, #134]	; 0x86
 800a196:	041b      	lsls	r3, r3, #16
 800a198:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a19c:	f89d 2084 	ldrb.w	r2, [sp, #132]	; 0x84
 800a1a0:	4313      	orrs	r3, r2
 800a1a2:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 800a1a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a1aa:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a1ae:	6523      	str	r3, [r4, #80]	; 0x50
 800a1b0:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 800a1b4:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 800a1b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a1bc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800a1c0:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 800a1c4:	f89d 20a5 	ldrb.w	r2, [sp, #165]	; 0xa5
 800a1c8:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 800a1cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a1d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a1d4:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 800a1d8:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 800a1dc:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 800a1e0:	041b      	lsls	r3, r3, #16
 800a1e2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a1e6:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 800a1f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a1f4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800a1f8:	65a3      	str	r3, [r4, #88]	; 0x58
 800a1fa:	f89d 20c3 	ldrb.w	r2, [sp, #195]	; 0xc3
 800a1fe:	f89d 30c2 	ldrb.w	r3, [sp, #194]	; 0xc2
 800a202:	041b      	lsls	r3, r3, #16
 800a204:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a208:	f89d 20c0 	ldrb.w	r2, [sp, #192]	; 0xc0
 800a20c:	4313      	orrs	r3, r2
 800a20e:	f89d 20c1 	ldrb.w	r2, [sp, #193]	; 0xc1
 800a212:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a216:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a21a:	65e3      	str	r3, [r4, #92]	; 0x5c
 800a21c:	f89d 20c7 	ldrb.w	r2, [sp, #199]	; 0xc7
 800a220:	f89d 30c6 	ldrb.w	r3, [sp, #198]	; 0xc6
 800a224:	041b      	lsls	r3, r3, #16
 800a226:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a22a:	f89d 20c4 	ldrb.w	r2, [sp, #196]	; 0xc4
 800a22e:	4313      	orrs	r3, r2
 800a230:	f89d 20c5 	ldrb.w	r2, [sp, #197]	; 0xc5
 800a234:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a238:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a23c:	6623      	str	r3, [r4, #96]	; 0x60
 800a23e:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
 800a242:	f89d 30ca 	ldrb.w	r3, [sp, #202]	; 0xca
 800a246:	041b      	lsls	r3, r3, #16
 800a248:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a24c:	f89d 20c8 	ldrb.w	r2, [sp, #200]	; 0xc8
 800a250:	4313      	orrs	r3, r2
 800a252:	f89d 20c9 	ldrb.w	r2, [sp, #201]	; 0xc9
 800a256:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a25a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a25e:	6663      	str	r3, [r4, #100]	; 0x64
 800a260:	f89d 20cf 	ldrb.w	r2, [sp, #207]	; 0xcf
 800a264:	f89d 30ce 	ldrb.w	r3, [sp, #206]	; 0xce
 800a268:	041b      	lsls	r3, r3, #16
 800a26a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a26e:	f89d 20cc 	ldrb.w	r2, [sp, #204]	; 0xcc
 800a272:	4313      	orrs	r3, r2
 800a274:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 800a278:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a27c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a280:	66a3      	str	r3, [r4, #104]	; 0x68
 800a282:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 800a286:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 800a28a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a28e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800a292:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 800a296:	f89d 20ed 	ldrb.w	r2, [sp, #237]	; 0xed
 800a29a:	f89d 30ec 	ldrb.w	r3, [sp, #236]	; 0xec
 800a29e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a2a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a2a6:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 800a2aa:	b03d      	add	sp, #244	; 0xf4
 800a2ac:	bd30      	pop	{r4, r5, pc}
 800a2ae:	ab02      	add	r3, sp, #8
 800a2b0:	9300      	str	r3, [sp, #0]
 800a2b2:	23e8      	movs	r3, #232	; 0xe8
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 800a2ba:	f7ff fdce 	bl	8009e5a <dwt_readfromdevice>
 800a2be:	e642      	b.n	8009f46 <ull_readdiagnostics+0x6c>
 800a2c0:	7d9b      	ldrb	r3, [r3, #22]
 800a2c2:	f013 0f01 	tst.w	r3, #1
 800a2c6:	f000 81b3 	beq.w	800a630 <ull_readdiagnostics+0x756>
 800a2ca:	ab02      	add	r3, sp, #8
 800a2cc:	9300      	str	r3, [sp, #0]
 800a2ce:	236c      	movs	r3, #108	; 0x6c
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 800a2d6:	f7ff fdc0 	bl	8009e5a <dwt_readfromdevice>
 800a2da:	ab1d      	add	r3, sp, #116	; 0x74
 800a2dc:	9300      	str	r3, [sp, #0]
 800a2de:	236c      	movs	r3, #108	; 0x6c
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 800a2e6:	4628      	mov	r0, r5
 800a2e8:	f7ff fdb7 	bl	8009e5a <dwt_readfromdevice>
 800a2ec:	aa02      	add	r2, sp, #8
 800a2ee:	1e63      	subs	r3, r4, #1
 800a2f0:	1d20      	adds	r0, r4, #4
 800a2f2:	f812 1b01 	ldrb.w	r1, [r2], #1
 800a2f6:	f803 1f01 	strb.w	r1, [r3, #1]!
 800a2fa:	79d1      	ldrb	r1, [r2, #7]
 800a2fc:	7219      	strb	r1, [r3, #8]
 800a2fe:	7bd1      	ldrb	r1, [r2, #15]
 800a300:	7459      	strb	r1, [r3, #17]
 800a302:	7dd1      	ldrb	r1, [r2, #23]
 800a304:	7699      	strb	r1, [r3, #26]
 800a306:	4283      	cmp	r3, r0
 800a308:	d1f3      	bne.n	800a2f2 <ull_readdiagnostics+0x418>
 800a30a:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800a30e:	77e3      	strb	r3, [r4, #31]
 800a310:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800a314:	7163      	strb	r3, [r4, #5]
 800a316:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800a31a:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800a31e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a322:	80e3      	strh	r3, [r4, #6]
 800a324:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800a328:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800a32c:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 800a330:	f3c2 12cf 	ubfx	r2, r2, #7, #16
 800a334:	f8a4 200d 	strh.w	r2, [r4, #13]
 800a338:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800a33c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800a340:	f8a4 200f 	strh.w	r2, [r4, #15]
 800a344:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800a348:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a34c:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 800a350:	82e3      	strh	r3, [r4, #22]
 800a352:	f89d 201e 	ldrb.w	r2, [sp, #30]
 800a356:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800a35a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a35e:	8323      	strh	r3, [r4, #24]
 800a360:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 800a364:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 800a368:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a36c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a370:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800a374:	bf1c      	itt	ne
 800a376:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 800a37a:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 800a37e:	8423      	strh	r3, [r4, #32]
 800a380:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 800a384:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800a388:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a38c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a390:	8463      	strh	r3, [r4, #34]	; 0x22
 800a392:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 800a396:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 800a39a:	041b      	lsls	r3, r3, #16
 800a39c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a3a0:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 800a3a4:	4313      	orrs	r3, r2
 800a3a6:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 800a3aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a3ae:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800a3b2:	6263      	str	r3, [r4, #36]	; 0x24
 800a3b4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800a3b6:	7d9b      	ldrb	r3, [r3, #22]
 800a3b8:	f013 0f01 	tst.w	r3, #1
 800a3bc:	f43f af75 	beq.w	800a2aa <ull_readdiagnostics+0x3d0>
 800a3c0:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 800a3c4:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 800a3c8:	041b      	lsls	r3, r3, #16
 800a3ca:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a3ce:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 800a3d2:	4313      	orrs	r3, r2
 800a3d4:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 800a3d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a3dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a3e0:	62a3      	str	r3, [r4, #40]	; 0x28
 800a3e2:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 800a3e6:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 800a3ea:	041b      	lsls	r3, r3, #16
 800a3ec:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a3f0:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 800a3f4:	4313      	orrs	r3, r2
 800a3f6:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 800a3fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a3fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a402:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a404:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 800a408:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 800a40c:	041b      	lsls	r3, r3, #16
 800a40e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a412:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 800a416:	4313      	orrs	r3, r2
 800a418:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 800a41c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a420:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a424:	6323      	str	r3, [r4, #48]	; 0x30
 800a426:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 800a42a:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 800a42e:	041b      	lsls	r3, r3, #16
 800a430:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a434:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 800a438:	4313      	orrs	r3, r2
 800a43a:	f89d 203d 	ldrb.w	r2, [sp, #61]	; 0x3d
 800a43e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a442:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a446:	6363      	str	r3, [r4, #52]	; 0x34
 800a448:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 800a44c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800a450:	041b      	lsls	r3, r3, #16
 800a452:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a456:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 800a45a:	4313      	orrs	r3, r2
 800a45c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 800a460:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a464:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a468:	63a3      	str	r3, [r4, #56]	; 0x38
 800a46a:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 800a46e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800a472:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a476:	87a3      	strh	r3, [r4, #60]	; 0x3c
 800a478:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
 800a47c:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 800a480:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a484:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a488:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800a48a:	f89d 2067 	ldrb.w	r2, [sp, #103]	; 0x67
 800a48e:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
 800a492:	041b      	lsls	r3, r3, #16
 800a494:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a498:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 800a49c:	4313      	orrs	r3, r2
 800a49e:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 800a4a2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a4a6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800a4aa:	6423      	str	r3, [r4, #64]	; 0x40
 800a4ac:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
 800a4b0:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
 800a4b4:	041b      	lsls	r3, r3, #16
 800a4b6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a4ba:	f89d 2068 	ldrb.w	r2, [sp, #104]	; 0x68
 800a4be:	4313      	orrs	r3, r2
 800a4c0:	f89d 2069 	ldrb.w	r2, [sp, #105]	; 0x69
 800a4c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a4c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a4cc:	6463      	str	r3, [r4, #68]	; 0x44
 800a4ce:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
 800a4d2:	f89d 306e 	ldrb.w	r3, [sp, #110]	; 0x6e
 800a4d6:	041b      	lsls	r3, r3, #16
 800a4d8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a4dc:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 800a4e0:	4313      	orrs	r3, r2
 800a4e2:	f89d 206d 	ldrb.w	r2, [sp, #109]	; 0x6d
 800a4e6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a4ea:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a4ee:	64a3      	str	r3, [r4, #72]	; 0x48
 800a4f0:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
 800a4f4:	f89d 3072 	ldrb.w	r3, [sp, #114]	; 0x72
 800a4f8:	041b      	lsls	r3, r3, #16
 800a4fa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a4fe:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
 800a502:	4313      	orrs	r3, r2
 800a504:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
 800a508:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a50c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a510:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a512:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 800a516:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 800a51a:	041b      	lsls	r3, r3, #16
 800a51c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a520:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 800a524:	4313      	orrs	r3, r2
 800a526:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 800a52a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a52e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a532:	6523      	str	r3, [r4, #80]	; 0x50
 800a534:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 800a538:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 800a53c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a540:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800a544:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 800a548:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 800a54c:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 800a550:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a554:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a558:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 800a55c:	f89d 20af 	ldrb.w	r2, [sp, #175]	; 0xaf
 800a560:	f89d 30ae 	ldrb.w	r3, [sp, #174]	; 0xae
 800a564:	041b      	lsls	r3, r3, #16
 800a566:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a56a:	f89d 20ac 	ldrb.w	r2, [sp, #172]	; 0xac
 800a56e:	4313      	orrs	r3, r2
 800a570:	f89d 20ad 	ldrb.w	r2, [sp, #173]	; 0xad
 800a574:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a578:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800a57c:	65a3      	str	r3, [r4, #88]	; 0x58
 800a57e:	f89d 20b3 	ldrb.w	r2, [sp, #179]	; 0xb3
 800a582:	f89d 30b2 	ldrb.w	r3, [sp, #178]	; 0xb2
 800a586:	041b      	lsls	r3, r3, #16
 800a588:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a58c:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
 800a590:	4313      	orrs	r3, r2
 800a592:	f89d 20b1 	ldrb.w	r2, [sp, #177]	; 0xb1
 800a596:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a59a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a59e:	65e3      	str	r3, [r4, #92]	; 0x5c
 800a5a0:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
 800a5a4:	f89d 30b6 	ldrb.w	r3, [sp, #182]	; 0xb6
 800a5a8:	041b      	lsls	r3, r3, #16
 800a5aa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a5ae:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 800a5b2:	4313      	orrs	r3, r2
 800a5b4:	f89d 20b5 	ldrb.w	r2, [sp, #181]	; 0xb5
 800a5b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a5bc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a5c0:	6623      	str	r3, [r4, #96]	; 0x60
 800a5c2:	f89d 20bb 	ldrb.w	r2, [sp, #187]	; 0xbb
 800a5c6:	f89d 30ba 	ldrb.w	r3, [sp, #186]	; 0xba
 800a5ca:	041b      	lsls	r3, r3, #16
 800a5cc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a5d0:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 800a5d4:	4313      	orrs	r3, r2
 800a5d6:	f89d 20b9 	ldrb.w	r2, [sp, #185]	; 0xb9
 800a5da:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a5de:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a5e2:	6663      	str	r3, [r4, #100]	; 0x64
 800a5e4:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 800a5e8:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 800a5ec:	041b      	lsls	r3, r3, #16
 800a5ee:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a5f2:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 800a5f6:	4313      	orrs	r3, r2
 800a5f8:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 800a5fc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a600:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a604:	66a3      	str	r3, [r4, #104]	; 0x68
 800a606:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 800a60a:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 800a60e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a612:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800a616:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 800a61a:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 800a61e:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 800a622:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a626:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a62a:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 800a62e:	e63c      	b.n	800a2aa <ull_readdiagnostics+0x3d0>
 800a630:	ab02      	add	r3, sp, #8
 800a632:	9300      	str	r3, [sp, #0]
 800a634:	2328      	movs	r3, #40	; 0x28
 800a636:	2200      	movs	r2, #0
 800a638:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 800a63c:	f7ff fc0d 	bl	8009e5a <dwt_readfromdevice>
 800a640:	e654      	b.n	800a2ec <ull_readdiagnostics+0x412>
	...

0800a644 <ull_readrxtimestamp>:
 800a644:	b500      	push	{lr}
 800a646:	b083      	sub	sp, #12
 800a648:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800a64a:	7b9b      	ldrb	r3, [r3, #14]
 800a64c:	2b01      	cmp	r3, #1
 800a64e:	d00b      	beq.n	800a668 <ull_readrxtimestamp+0x24>
 800a650:	2b03      	cmp	r3, #3
 800a652:	d110      	bne.n	800a676 <ull_readrxtimestamp+0x32>
 800a654:	9100      	str	r1, [sp, #0]
 800a656:	2305      	movs	r3, #5
 800a658:	2204      	movs	r2, #4
 800a65a:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800a65e:	f7ff fbfc 	bl	8009e5a <dwt_readfromdevice>
 800a662:	b003      	add	sp, #12
 800a664:	f85d fb04 	ldr.w	pc, [sp], #4
 800a668:	9100      	str	r1, [sp, #0]
 800a66a:	2305      	movs	r3, #5
 800a66c:	2200      	movs	r2, #0
 800a66e:	4905      	ldr	r1, [pc, #20]	; (800a684 <ull_readrxtimestamp+0x40>)
 800a670:	f7ff fbf3 	bl	8009e5a <dwt_readfromdevice>
 800a674:	e7f5      	b.n	800a662 <ull_readrxtimestamp+0x1e>
 800a676:	9100      	str	r1, [sp, #0]
 800a678:	2305      	movs	r3, #5
 800a67a:	2200      	movs	r2, #0
 800a67c:	2160      	movs	r1, #96	; 0x60
 800a67e:	f7ff fbec 	bl	8009e5a <dwt_readfromdevice>
 800a682:	e7ee      	b.n	800a662 <ull_readrxtimestamp+0x1e>
 800a684:	00180004 	.word	0x00180004

0800a688 <dwt_writetodevice>:
 800a688:	b510      	push	{r4, lr}
 800a68a:	b082      	sub	sp, #8
 800a68c:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 800a690:	9401      	str	r4, [sp, #4]
 800a692:	9c04      	ldr	r4, [sp, #16]
 800a694:	9400      	str	r4, [sp, #0]
 800a696:	f7ff fb62 	bl	8009d5e <dwt_xfer3xxx>
 800a69a:	b002      	add	sp, #8
 800a69c:	bd10      	pop	{r4, pc}

0800a69e <dwt_write16bitoffsetreg>:
 800a69e:	b500      	push	{lr}
 800a6a0:	b085      	sub	sp, #20
 800a6a2:	f88d 300c 	strb.w	r3, [sp, #12]
 800a6a6:	0a1b      	lsrs	r3, r3, #8
 800a6a8:	f88d 300d 	strb.w	r3, [sp, #13]
 800a6ac:	ab03      	add	r3, sp, #12
 800a6ae:	9300      	str	r3, [sp, #0]
 800a6b0:	2302      	movs	r3, #2
 800a6b2:	b292      	uxth	r2, r2
 800a6b4:	f7ff ffe8 	bl	800a688 <dwt_writetodevice>
 800a6b8:	b005      	add	sp, #20
 800a6ba:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800a6c0 <ull_force_clocks>:
 800a6c0:	b508      	push	{r3, lr}
 800a6c2:	2901      	cmp	r1, #1
 800a6c4:	d002      	beq.n	800a6cc <ull_force_clocks+0xc>
 800a6c6:	2905      	cmp	r1, #5
 800a6c8:	d007      	beq.n	800a6da <ull_force_clocks+0x1a>
 800a6ca:	bd08      	pop	{r3, pc}
 800a6cc:	f641 0322 	movw	r3, #6178	; 0x1822
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	4905      	ldr	r1, [pc, #20]	; (800a6e8 <ull_force_clocks+0x28>)
 800a6d4:	f7ff ffe3 	bl	800a69e <dwt_write16bitoffsetreg>
 800a6d8:	e7f7      	b.n	800a6ca <ull_force_clocks+0xa>
 800a6da:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a6de:	2200      	movs	r2, #0
 800a6e0:	4901      	ldr	r1, [pc, #4]	; (800a6e8 <ull_force_clocks+0x28>)
 800a6e2:	f7ff ffdc 	bl	800a69e <dwt_write16bitoffsetreg>
 800a6e6:	e7f0      	b.n	800a6ca <ull_force_clocks+0xa>
 800a6e8:	00110004 	.word	0x00110004

0800a6ec <__dwt_otp_write_wdata_id_reg>:
 800a6ec:	b538      	push	{r3, r4, r5, lr}
 800a6ee:	4605      	mov	r5, r0
 800a6f0:	460c      	mov	r4, r1
 800a6f2:	f441 7300 	orr.w	r3, r1, #512	; 0x200
 800a6f6:	b29b      	uxth	r3, r3
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800a6fe:	f7ff ffce 	bl	800a69e <dwt_write16bitoffsetreg>
 800a702:	b2a3      	uxth	r3, r4
 800a704:	2200      	movs	r2, #0
 800a706:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800a70a:	4628      	mov	r0, r5
 800a70c:	f7ff ffc7 	bl	800a69e <dwt_write16bitoffsetreg>
 800a710:	bd38      	pop	{r3, r4, r5, pc}
	...

0800a714 <_dwt_otpread>:
 800a714:	b570      	push	{r4, r5, r6, lr}
 800a716:	4604      	mov	r4, r0
 800a718:	460e      	mov	r6, r1
 800a71a:	4d0c      	ldr	r5, [pc, #48]	; (800a74c <_dwt_otpread+0x38>)
 800a71c:	2301      	movs	r3, #1
 800a71e:	2200      	movs	r2, #0
 800a720:	4629      	mov	r1, r5
 800a722:	f7ff ffbc 	bl	800a69e <dwt_write16bitoffsetreg>
 800a726:	4633      	mov	r3, r6
 800a728:	2200      	movs	r2, #0
 800a72a:	4909      	ldr	r1, [pc, #36]	; (800a750 <_dwt_otpread+0x3c>)
 800a72c:	4620      	mov	r0, r4
 800a72e:	f7ff ffb6 	bl	800a69e <dwt_write16bitoffsetreg>
 800a732:	2302      	movs	r3, #2
 800a734:	2200      	movs	r2, #0
 800a736:	4629      	mov	r1, r5
 800a738:	4620      	mov	r0, r4
 800a73a:	f7ff ffb0 	bl	800a69e <dwt_write16bitoffsetreg>
 800a73e:	2200      	movs	r2, #0
 800a740:	4904      	ldr	r1, [pc, #16]	; (800a754 <_dwt_otpread+0x40>)
 800a742:	4620      	mov	r0, r4
 800a744:	f7ff fb93 	bl	8009e6e <dwt_read32bitoffsetreg>
 800a748:	bd70      	pop	{r4, r5, r6, pc}
 800a74a:	bf00      	nop
 800a74c:	000b0008 	.word	0x000b0008
 800a750:	000b0004 	.word	0x000b0004
 800a754:	000b0010 	.word	0x000b0010

0800a758 <dwt_write32bitoffsetreg>:
 800a758:	b510      	push	{r4, lr}
 800a75a:	b084      	sub	sp, #16
 800a75c:	f88d 300c 	strb.w	r3, [sp, #12]
 800a760:	0a1c      	lsrs	r4, r3, #8
 800a762:	f88d 400d 	strb.w	r4, [sp, #13]
 800a766:	0c1c      	lsrs	r4, r3, #16
 800a768:	f88d 400e 	strb.w	r4, [sp, #14]
 800a76c:	0e1b      	lsrs	r3, r3, #24
 800a76e:	f88d 300f 	strb.w	r3, [sp, #15]
 800a772:	ab03      	add	r3, sp, #12
 800a774:	9300      	str	r3, [sp, #0]
 800a776:	2304      	movs	r3, #4
 800a778:	b292      	uxth	r2, r2
 800a77a:	f7ff ff85 	bl	800a688 <dwt_writetodevice>
 800a77e:	b004      	add	sp, #16
 800a780:	bd10      	pop	{r4, pc}

0800a782 <_dwt_adjust_delaytime>:
 800a782:	b538      	push	{r3, r4, r5, lr}
 800a784:	4604      	mov	r4, r0
 800a786:	b989      	cbnz	r1, 800a7ac <_dwt_adjust_delaytime+0x2a>
 800a788:	2200      	movs	r2, #0
 800a78a:	2128      	movs	r1, #40	; 0x28
 800a78c:	f7ff fb6f 	bl	8009e6e <dwt_read32bitoffsetreg>
 800a790:	4605      	mov	r5, r0
 800a792:	2201      	movs	r2, #1
 800a794:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800a798:	4620      	mov	r0, r4
 800a79a:	f7ff fb90 	bl	8009ebe <dwt_read8bitoffsetreg>
 800a79e:	1a2b      	subs	r3, r5, r0
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	2128      	movs	r1, #40	; 0x28
 800a7a4:	4620      	mov	r0, r4
 800a7a6:	f7ff ffd7 	bl	800a758 <dwt_write32bitoffsetreg>
 800a7aa:	bd38      	pop	{r3, r4, r5, pc}
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	2128      	movs	r1, #40	; 0x28
 800a7b0:	f7ff fb5d 	bl	8009e6e <dwt_read32bitoffsetreg>
 800a7b4:	4605      	mov	r5, r0
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	217c      	movs	r1, #124	; 0x7c
 800a7ba:	4620      	mov	r0, r4
 800a7bc:	f7ff fb7f 	bl	8009ebe <dwt_read8bitoffsetreg>
 800a7c0:	1a2b      	subs	r3, r5, r0
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	2128      	movs	r1, #40	; 0x28
 800a7c6:	4620      	mov	r0, r4
 800a7c8:	f7ff ffc6 	bl	800a758 <dwt_write32bitoffsetreg>
 800a7cc:	e7ed      	b.n	800a7aa <_dwt_adjust_delaytime+0x28>

0800a7ce <ull_setrxaftertxdelay>:
 800a7ce:	b538      	push	{r3, r4, r5, lr}
 800a7d0:	4605      	mov	r5, r0
 800a7d2:	460c      	mov	r4, r1
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800a7da:	f7ff fb48 	bl	8009e6e <dwt_read32bitoffsetreg>
 800a7de:	0d00      	lsrs	r0, r0, #20
 800a7e0:	0500      	lsls	r0, r0, #20
 800a7e2:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800a7e6:	4303      	orrs	r3, r0
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800a7ee:	4628      	mov	r0, r5
 800a7f0:	f7ff ffb2 	bl	800a758 <dwt_write32bitoffsetreg>
 800a7f4:	bd38      	pop	{r3, r4, r5, pc}

0800a7f6 <ull_setlnapamode>:
 800a7f6:	b538      	push	{r3, r4, r5, lr}
 800a7f8:	4605      	mov	r5, r0
 800a7fa:	460c      	mov	r4, r1
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800a802:	f7ff fb34 	bl	8009e6e <dwt_read32bitoffsetreg>
 800a806:	f420 337c 	bic.w	r3, r0, #258048	; 0x3f000
 800a80a:	f014 0f01 	tst.w	r4, #1
 800a80e:	bf18      	it	ne
 800a810:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
 800a814:	f014 0f02 	tst.w	r4, #2
 800a818:	bf18      	it	ne
 800a81a:	f443 5300 	orrne.w	r3, r3, #8192	; 0x2000
 800a81e:	f014 0f04 	tst.w	r4, #4
 800a822:	bf18      	it	ne
 800a824:	f443 3390 	orrne.w	r3, r3, #73728	; 0x12000
 800a828:	2200      	movs	r2, #0
 800a82a:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800a82e:	4628      	mov	r0, r5
 800a830:	f7ff ff92 	bl	800a758 <dwt_write32bitoffsetreg>
 800a834:	bd38      	pop	{r3, r4, r5, pc}
	...

0800a838 <ull_configurestskey>:
 800a838:	b538      	push	{r3, r4, r5, lr}
 800a83a:	4605      	mov	r5, r0
 800a83c:	460c      	mov	r4, r1
 800a83e:	680b      	ldr	r3, [r1, #0]
 800a840:	2200      	movs	r2, #0
 800a842:	490b      	ldr	r1, [pc, #44]	; (800a870 <ull_configurestskey+0x38>)
 800a844:	f7ff ff88 	bl	800a758 <dwt_write32bitoffsetreg>
 800a848:	6863      	ldr	r3, [r4, #4]
 800a84a:	2200      	movs	r2, #0
 800a84c:	4909      	ldr	r1, [pc, #36]	; (800a874 <ull_configurestskey+0x3c>)
 800a84e:	4628      	mov	r0, r5
 800a850:	f7ff ff82 	bl	800a758 <dwt_write32bitoffsetreg>
 800a854:	68a3      	ldr	r3, [r4, #8]
 800a856:	2200      	movs	r2, #0
 800a858:	4907      	ldr	r1, [pc, #28]	; (800a878 <ull_configurestskey+0x40>)
 800a85a:	4628      	mov	r0, r5
 800a85c:	f7ff ff7c 	bl	800a758 <dwt_write32bitoffsetreg>
 800a860:	68e3      	ldr	r3, [r4, #12]
 800a862:	2200      	movs	r2, #0
 800a864:	4905      	ldr	r1, [pc, #20]	; (800a87c <ull_configurestskey+0x44>)
 800a866:	4628      	mov	r0, r5
 800a868:	f7ff ff76 	bl	800a758 <dwt_write32bitoffsetreg>
 800a86c:	bd38      	pop	{r3, r4, r5, pc}
 800a86e:	bf00      	nop
 800a870:	0002000c 	.word	0x0002000c
 800a874:	00020010 	.word	0x00020010
 800a878:	00020014 	.word	0x00020014
 800a87c:	00020018 	.word	0x00020018

0800a880 <ull_configurestsiv>:
 800a880:	b538      	push	{r3, r4, r5, lr}
 800a882:	4605      	mov	r5, r0
 800a884:	460c      	mov	r4, r1
 800a886:	680b      	ldr	r3, [r1, #0]
 800a888:	2200      	movs	r2, #0
 800a88a:	490b      	ldr	r1, [pc, #44]	; (800a8b8 <ull_configurestsiv+0x38>)
 800a88c:	f7ff ff64 	bl	800a758 <dwt_write32bitoffsetreg>
 800a890:	6863      	ldr	r3, [r4, #4]
 800a892:	2200      	movs	r2, #0
 800a894:	4909      	ldr	r1, [pc, #36]	; (800a8bc <ull_configurestsiv+0x3c>)
 800a896:	4628      	mov	r0, r5
 800a898:	f7ff ff5e 	bl	800a758 <dwt_write32bitoffsetreg>
 800a89c:	68a3      	ldr	r3, [r4, #8]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	4907      	ldr	r1, [pc, #28]	; (800a8c0 <ull_configurestsiv+0x40>)
 800a8a2:	4628      	mov	r0, r5
 800a8a4:	f7ff ff58 	bl	800a758 <dwt_write32bitoffsetreg>
 800a8a8:	68e3      	ldr	r3, [r4, #12]
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	4905      	ldr	r1, [pc, #20]	; (800a8c4 <ull_configurestsiv+0x44>)
 800a8ae:	4628      	mov	r0, r5
 800a8b0:	f7ff ff52 	bl	800a758 <dwt_write32bitoffsetreg>
 800a8b4:	bd38      	pop	{r3, r4, r5, pc}
 800a8b6:	bf00      	nop
 800a8b8:	0002001c 	.word	0x0002001c
 800a8bc:	00020020 	.word	0x00020020
 800a8c0:	00020024 	.word	0x00020024
 800a8c4:	00020028 	.word	0x00020028

0800a8c8 <ull_configmrxlut>:
 800a8c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8cc:	4604      	mov	r4, r0
 800a8ce:	2905      	cmp	r1, #5
 800a8d0:	d03a      	beq.n	800a948 <ull_configmrxlut+0x80>
 800a8d2:	4d23      	ldr	r5, [pc, #140]	; (800a960 <ull_configmrxlut+0x98>)
 800a8d4:	462e      	mov	r6, r5
 800a8d6:	4f23      	ldr	r7, [pc, #140]	; (800a964 <ull_configmrxlut+0x9c>)
 800a8d8:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 800a9a0 <ull_configmrxlut+0xd8>
 800a8dc:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 800a9a4 <ull_configmrxlut+0xdc>
 800a8e0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a9a8 <ull_configmrxlut+0xe0>
 800a8e4:	4b20      	ldr	r3, [pc, #128]	; (800a968 <ull_configmrxlut+0xa0>)
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	4920      	ldr	r1, [pc, #128]	; (800a96c <ull_configmrxlut+0xa4>)
 800a8ea:	4620      	mov	r0, r4
 800a8ec:	f7ff ff34 	bl	800a758 <dwt_write32bitoffsetreg>
 800a8f0:	4653      	mov	r3, sl
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	491e      	ldr	r1, [pc, #120]	; (800a970 <ull_configmrxlut+0xa8>)
 800a8f6:	4620      	mov	r0, r4
 800a8f8:	f7ff ff2e 	bl	800a758 <dwt_write32bitoffsetreg>
 800a8fc:	464b      	mov	r3, r9
 800a8fe:	2200      	movs	r2, #0
 800a900:	491c      	ldr	r1, [pc, #112]	; (800a974 <ull_configmrxlut+0xac>)
 800a902:	4620      	mov	r0, r4
 800a904:	f7ff ff28 	bl	800a758 <dwt_write32bitoffsetreg>
 800a908:	4643      	mov	r3, r8
 800a90a:	2200      	movs	r2, #0
 800a90c:	491a      	ldr	r1, [pc, #104]	; (800a978 <ull_configmrxlut+0xb0>)
 800a90e:	4620      	mov	r0, r4
 800a910:	f7ff ff22 	bl	800a758 <dwt_write32bitoffsetreg>
 800a914:	463b      	mov	r3, r7
 800a916:	2200      	movs	r2, #0
 800a918:	4918      	ldr	r1, [pc, #96]	; (800a97c <ull_configmrxlut+0xb4>)
 800a91a:	4620      	mov	r0, r4
 800a91c:	f7ff ff1c 	bl	800a758 <dwt_write32bitoffsetreg>
 800a920:	4633      	mov	r3, r6
 800a922:	2200      	movs	r2, #0
 800a924:	4916      	ldr	r1, [pc, #88]	; (800a980 <ull_configmrxlut+0xb8>)
 800a926:	4620      	mov	r0, r4
 800a928:	f7ff ff16 	bl	800a758 <dwt_write32bitoffsetreg>
 800a92c:	462b      	mov	r3, r5
 800a92e:	2200      	movs	r2, #0
 800a930:	4914      	ldr	r1, [pc, #80]	; (800a984 <ull_configmrxlut+0xbc>)
 800a932:	4620      	mov	r0, r4
 800a934:	f7ff ff10 	bl	800a758 <dwt_write32bitoffsetreg>
 800a938:	4b13      	ldr	r3, [pc, #76]	; (800a988 <ull_configmrxlut+0xc0>)
 800a93a:	2200      	movs	r2, #0
 800a93c:	4913      	ldr	r1, [pc, #76]	; (800a98c <ull_configmrxlut+0xc4>)
 800a93e:	4620      	mov	r0, r4
 800a940:	f7ff ff0a 	bl	800a758 <dwt_write32bitoffsetreg>
 800a944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a948:	4d11      	ldr	r5, [pc, #68]	; (800a990 <ull_configmrxlut+0xc8>)
 800a94a:	4e12      	ldr	r6, [pc, #72]	; (800a994 <ull_configmrxlut+0xcc>)
 800a94c:	4f12      	ldr	r7, [pc, #72]	; (800a998 <ull_configmrxlut+0xd0>)
 800a94e:	f8df 805c 	ldr.w	r8, [pc, #92]	; 800a9ac <ull_configmrxlut+0xe4>
 800a952:	f8df 905c 	ldr.w	r9, [pc, #92]	; 800a9b0 <ull_configmrxlut+0xe8>
 800a956:	f8df a05c 	ldr.w	sl, [pc, #92]	; 800a9b4 <ull_configmrxlut+0xec>
 800a95a:	4b10      	ldr	r3, [pc, #64]	; (800a99c <ull_configmrxlut+0xd4>)
 800a95c:	e7c3      	b.n	800a8e6 <ull_configmrxlut+0x1e>
 800a95e:	bf00      	nop
 800a960:	0002afb5 	.word	0x0002afb5
 800a964:	0002af7d 	.word	0x0002af7d
 800a968:	0002a8fe 	.word	0x0002a8fe
 800a96c:	00030038 	.word	0x00030038
 800a970:	0003003c 	.word	0x0003003c
 800a974:	00030040 	.word	0x00030040
 800a978:	00030044 	.word	0x00030044
 800a97c:	00030048 	.word	0x00030048
 800a980:	0003004c 	.word	0x0003004c
 800a984:	00030050 	.word	0x00030050
 800a988:	10000240 	.word	0x10000240
 800a98c:	0003001c 	.word	0x0003001c
 800a990:	0001cff5 	.word	0x0001cff5
 800a994:	0001cfb5 	.word	0x0001cfb5
 800a998:	0001cf36 	.word	0x0001cf36
 800a99c:	0001c0fd 	.word	0x0001c0fd
 800a9a0:	0002af3e 	.word	0x0002af3e
 800a9a4:	0002a5fe 	.word	0x0002a5fe
 800a9a8:	0002ac36 	.word	0x0002ac36
 800a9ac:	0001c77e 	.word	0x0001c77e
 800a9b0:	0001c6be 	.word	0x0001c6be
 800a9b4:	0001c43e 	.word	0x0001c43e

0800a9b8 <ull_disable_rftx_blocks>:
 800a9b8:	b508      	push	{r3, lr}
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	461a      	mov	r2, r3
 800a9be:	4902      	ldr	r1, [pc, #8]	; (800a9c8 <ull_disable_rftx_blocks+0x10>)
 800a9c0:	f7ff feca 	bl	800a758 <dwt_write32bitoffsetreg>
 800a9c4:	bd08      	pop	{r3, pc}
 800a9c6:	bf00      	nop
 800a9c8:	00070004 	.word	0x00070004

0800a9cc <ull_disable_rf_tx>:
 800a9cc:	b538      	push	{r3, r4, r5, lr}
 800a9ce:	4604      	mov	r4, r0
 800a9d0:	460d      	mov	r5, r1
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	461a      	mov	r2, r3
 800a9d6:	490a      	ldr	r1, [pc, #40]	; (800aa00 <ull_disable_rf_tx+0x34>)
 800a9d8:	f7ff febe 	bl	800a758 <dwt_write32bitoffsetreg>
 800a9dc:	2300      	movs	r3, #0
 800a9de:	461a      	mov	r2, r3
 800a9e0:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 800a9e4:	4620      	mov	r0, r4
 800a9e6:	f7ff feb7 	bl	800a758 <dwt_write32bitoffsetreg>
 800a9ea:	b905      	cbnz	r5, 800a9ee <ull_disable_rf_tx+0x22>
 800a9ec:	bd38      	pop	{r3, r4, r5, pc}
 800a9ee:	f04f 53e0 	mov.w	r3, #469762048	; 0x1c000000
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	4903      	ldr	r1, [pc, #12]	; (800aa04 <ull_disable_rf_tx+0x38>)
 800a9f6:	4620      	mov	r0, r4
 800a9f8:	f7ff feae 	bl	800a758 <dwt_write32bitoffsetreg>
 800a9fc:	e7f6      	b.n	800a9ec <ull_disable_rf_tx+0x20>
 800a9fe:	bf00      	nop
 800aa00:	00070048 	.word	0x00070048
 800aa04:	00070014 	.word	0x00070014

0800aa08 <ull_readrxdata>:
 800aa08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa0a:	b083      	sub	sp, #12
 800aa0c:	6d04      	ldr	r4, [r0, #80]	; 0x50
 800aa0e:	7ba4      	ldrb	r4, [r4, #14]
 800aa10:	2c03      	cmp	r4, #3
 800aa12:	bf0c      	ite	eq
 800aa14:	f44f 1c98 	moveq.w	ip, #1245184	; 0x130000
 800aa18:	f44f 1c90 	movne.w	ip, #1179648	; 0x120000
 800aa1c:	189c      	adds	r4, r3, r2
 800aa1e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800aa22:	da19      	bge.n	800aa58 <ull_readrxdata+0x50>
 800aa24:	461d      	mov	r5, r3
 800aa26:	4616      	mov	r6, r2
 800aa28:	460f      	mov	r7, r1
 800aa2a:	4604      	mov	r4, r0
 800aa2c:	2b7f      	cmp	r3, #127	; 0x7f
 800aa2e:	d915      	bls.n	800aa5c <ull_readrxdata+0x54>
 800aa30:	ea4f 431c 	mov.w	r3, ip, lsr #16
 800aa34:	2200      	movs	r2, #0
 800aa36:	490d      	ldr	r1, [pc, #52]	; (800aa6c <ull_readrxdata+0x64>)
 800aa38:	f7ff fe8e 	bl	800a758 <dwt_write32bitoffsetreg>
 800aa3c:	462b      	mov	r3, r5
 800aa3e:	2200      	movs	r2, #0
 800aa40:	490b      	ldr	r1, [pc, #44]	; (800aa70 <ull_readrxdata+0x68>)
 800aa42:	4620      	mov	r0, r4
 800aa44:	f7ff fe88 	bl	800a758 <dwt_write32bitoffsetreg>
 800aa48:	9700      	str	r7, [sp, #0]
 800aa4a:	4633      	mov	r3, r6
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800aa52:	4620      	mov	r0, r4
 800aa54:	f7ff fa01 	bl	8009e5a <dwt_readfromdevice>
 800aa58:	b003      	add	sp, #12
 800aa5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa5c:	9100      	str	r1, [sp, #0]
 800aa5e:	4613      	mov	r3, r2
 800aa60:	462a      	mov	r2, r5
 800aa62:	4661      	mov	r1, ip
 800aa64:	f7ff f9f9 	bl	8009e5a <dwt_readfromdevice>
 800aa68:	e7f6      	b.n	800aa58 <ull_readrxdata+0x50>
 800aa6a:	bf00      	nop
 800aa6c:	001f0004 	.word	0x001f0004
 800aa70:	001f0008 	.word	0x001f0008

0800aa74 <dwt_write8bitoffsetreg>:
 800aa74:	b510      	push	{r4, lr}
 800aa76:	b084      	sub	sp, #16
 800aa78:	ac04      	add	r4, sp, #16
 800aa7a:	f804 3d01 	strb.w	r3, [r4, #-1]!
 800aa7e:	9400      	str	r4, [sp, #0]
 800aa80:	2301      	movs	r3, #1
 800aa82:	b292      	uxth	r2, r2
 800aa84:	f7ff fe00 	bl	800a688 <dwt_writetodevice>
 800aa88:	b004      	add	sp, #16
 800aa8a:	bd10      	pop	{r4, pc}

0800aa8c <ull_getframelength>:
 800aa8c:	b510      	push	{r4, lr}
 800aa8e:	4604      	mov	r4, r0
 800aa90:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800aa92:	7b9b      	ldrb	r3, [r3, #14]
 800aa94:	2b01      	cmp	r3, #1
 800aa96:	d013      	beq.n	800aac0 <ull_getframelength+0x34>
 800aa98:	2b03      	cmp	r3, #3
 800aa9a:	d11d      	bne.n	800aad8 <ull_getframelength+0x4c>
 800aa9c:	23f0      	movs	r3, #240	; 0xf0
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	4912      	ldr	r1, [pc, #72]	; (800aaec <ull_getframelength+0x60>)
 800aaa2:	f7ff ffe7 	bl	800aa74 <dwt_write8bitoffsetreg>
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800aaac:	4620      	mov	r0, r4
 800aaae:	f7ff f9f4 	bl	8009e9a <dwt_read16bitoffsetreg>
 800aab2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800aab4:	7ada      	ldrb	r2, [r3, #11]
 800aab6:	b1a2      	cbz	r2, 800aae2 <ull_getframelength+0x56>
 800aab8:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800aabc:	83d8      	strh	r0, [r3, #30]
 800aabe:	bd10      	pop	{r4, pc}
 800aac0:	230f      	movs	r3, #15
 800aac2:	2200      	movs	r2, #0
 800aac4:	4909      	ldr	r1, [pc, #36]	; (800aaec <ull_getframelength+0x60>)
 800aac6:	f7ff ffd5 	bl	800aa74 <dwt_write8bitoffsetreg>
 800aaca:	2200      	movs	r2, #0
 800aacc:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 800aad0:	4620      	mov	r0, r4
 800aad2:	f7ff f9e2 	bl	8009e9a <dwt_read16bitoffsetreg>
 800aad6:	e7ec      	b.n	800aab2 <ull_getframelength+0x26>
 800aad8:	2200      	movs	r2, #0
 800aada:	214c      	movs	r1, #76	; 0x4c
 800aadc:	f7ff f9dd 	bl	8009e9a <dwt_read16bitoffsetreg>
 800aae0:	e7e7      	b.n	800aab2 <ull_getframelength+0x26>
 800aae2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800aae6:	83d8      	strh	r0, [r3, #30]
 800aae8:	e7e9      	b.n	800aabe <ull_getframelength+0x32>
 800aaea:	bf00      	nop
 800aaec:	00010018 	.word	0x00010018

0800aaf0 <_dwt_clear_db_events>:
 800aaf0:	b510      	push	{r4, lr}
 800aaf2:	4604      	mov	r4, r0
 800aaf4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800aaf6:	7b9b      	ldrb	r3, [r3, #14]
 800aaf8:	2b01      	cmp	r3, #1
 800aafa:	d004      	beq.n	800ab06 <_dwt_clear_db_events+0x16>
 800aafc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800aafe:	7b9b      	ldrb	r3, [r3, #14]
 800ab00:	2b03      	cmp	r3, #3
 800ab02:	d006      	beq.n	800ab12 <_dwt_clear_db_events+0x22>
 800ab04:	bd10      	pop	{r4, pc}
 800ab06:	230f      	movs	r3, #15
 800ab08:	2200      	movs	r2, #0
 800ab0a:	4905      	ldr	r1, [pc, #20]	; (800ab20 <_dwt_clear_db_events+0x30>)
 800ab0c:	f7ff ffb2 	bl	800aa74 <dwt_write8bitoffsetreg>
 800ab10:	e7f4      	b.n	800aafc <_dwt_clear_db_events+0xc>
 800ab12:	23f0      	movs	r3, #240	; 0xf0
 800ab14:	2200      	movs	r2, #0
 800ab16:	4902      	ldr	r1, [pc, #8]	; (800ab20 <_dwt_clear_db_events+0x30>)
 800ab18:	4620      	mov	r0, r4
 800ab1a:	f7ff ffab 	bl	800aa74 <dwt_write8bitoffsetreg>
 800ab1e:	e7f1      	b.n	800ab04 <_dwt_clear_db_events+0x14>
 800ab20:	00010018 	.word	0x00010018

0800ab24 <ull_clearaonconfig>:
 800ab24:	b538      	push	{r3, r4, r5, lr}
 800ab26:	4604      	mov	r4, r0
 800ab28:	2300      	movs	r3, #0
 800ab2a:	461a      	mov	r2, r3
 800ab2c:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 800ab30:	f7ff fdb5 	bl	800a69e <dwt_write16bitoffsetreg>
 800ab34:	2300      	movs	r3, #0
 800ab36:	461a      	mov	r2, r3
 800ab38:	4908      	ldr	r1, [pc, #32]	; (800ab5c <ull_clearaonconfig+0x38>)
 800ab3a:	4620      	mov	r0, r4
 800ab3c:	f7ff ff9a 	bl	800aa74 <dwt_write8bitoffsetreg>
 800ab40:	4d07      	ldr	r5, [pc, #28]	; (800ab60 <ull_clearaonconfig+0x3c>)
 800ab42:	2300      	movs	r3, #0
 800ab44:	461a      	mov	r2, r3
 800ab46:	4629      	mov	r1, r5
 800ab48:	4620      	mov	r0, r4
 800ab4a:	f7ff ff93 	bl	800aa74 <dwt_write8bitoffsetreg>
 800ab4e:	2302      	movs	r3, #2
 800ab50:	2200      	movs	r2, #0
 800ab52:	4629      	mov	r1, r5
 800ab54:	4620      	mov	r0, r4
 800ab56:	f7ff ff8d 	bl	800aa74 <dwt_write8bitoffsetreg>
 800ab5a:	bd38      	pop	{r3, r4, r5, pc}
 800ab5c:	000a0014 	.word	0x000a0014
 800ab60:	000a0004 	.word	0x000a0004

0800ab64 <ull_configeventcounters>:
 800ab64:	b538      	push	{r3, r4, r5, lr}
 800ab66:	4605      	mov	r5, r0
 800ab68:	460c      	mov	r4, r1
 800ab6a:	2302      	movs	r3, #2
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800ab72:	f7ff ff7f 	bl	800aa74 <dwt_write8bitoffsetreg>
 800ab76:	b904      	cbnz	r4, 800ab7a <ull_configeventcounters+0x16>
 800ab78:	bd38      	pop	{r3, r4, r5, pc}
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800ab82:	4628      	mov	r0, r5
 800ab84:	f7ff ff76 	bl	800aa74 <dwt_write8bitoffsetreg>
 800ab88:	e7f6      	b.n	800ab78 <ull_configeventcounters+0x14>
	...

0800ab8c <ull_aon_read>:
 800ab8c:	b538      	push	{r3, r4, r5, lr}
 800ab8e:	4604      	mov	r4, r0
 800ab90:	460b      	mov	r3, r1
 800ab92:	2200      	movs	r2, #0
 800ab94:	490a      	ldr	r1, [pc, #40]	; (800abc0 <ull_aon_read+0x34>)
 800ab96:	f7ff fd82 	bl	800a69e <dwt_write16bitoffsetreg>
 800ab9a:	4d0a      	ldr	r5, [pc, #40]	; (800abc4 <ull_aon_read+0x38>)
 800ab9c:	2388      	movs	r3, #136	; 0x88
 800ab9e:	2200      	movs	r2, #0
 800aba0:	4629      	mov	r1, r5
 800aba2:	4620      	mov	r0, r4
 800aba4:	f7ff ff66 	bl	800aa74 <dwt_write8bitoffsetreg>
 800aba8:	2300      	movs	r3, #0
 800abaa:	461a      	mov	r2, r3
 800abac:	4629      	mov	r1, r5
 800abae:	4620      	mov	r0, r4
 800abb0:	f7ff ff60 	bl	800aa74 <dwt_write8bitoffsetreg>
 800abb4:	2200      	movs	r2, #0
 800abb6:	4904      	ldr	r1, [pc, #16]	; (800abc8 <ull_aon_read+0x3c>)
 800abb8:	4620      	mov	r0, r4
 800abba:	f7ff f980 	bl	8009ebe <dwt_read8bitoffsetreg>
 800abbe:	bd38      	pop	{r3, r4, r5, pc}
 800abc0:	000a000c 	.word	0x000a000c
 800abc4:	000a0004 	.word	0x000a0004
 800abc8:	000a0008 	.word	0x000a0008

0800abcc <ull_aon_write>:
 800abcc:	b570      	push	{r4, r5, r6, lr}
 800abce:	4604      	mov	r4, r0
 800abd0:	460b      	mov	r3, r1
 800abd2:	4615      	mov	r5, r2
 800abd4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800abd8:	bf34      	ite	cc
 800abda:	2600      	movcc	r6, #0
 800abdc:	2620      	movcs	r6, #32
 800abde:	2200      	movs	r2, #0
 800abe0:	490b      	ldr	r1, [pc, #44]	; (800ac10 <ull_aon_write+0x44>)
 800abe2:	f7ff fd5c 	bl	800a69e <dwt_write16bitoffsetreg>
 800abe6:	462b      	mov	r3, r5
 800abe8:	2200      	movs	r2, #0
 800abea:	490a      	ldr	r1, [pc, #40]	; (800ac14 <ull_aon_write+0x48>)
 800abec:	4620      	mov	r0, r4
 800abee:	f7ff ff41 	bl	800aa74 <dwt_write8bitoffsetreg>
 800abf2:	4d09      	ldr	r5, [pc, #36]	; (800ac18 <ull_aon_write+0x4c>)
 800abf4:	f046 0390 	orr.w	r3, r6, #144	; 0x90
 800abf8:	2200      	movs	r2, #0
 800abfa:	4629      	mov	r1, r5
 800abfc:	4620      	mov	r0, r4
 800abfe:	f7ff ff39 	bl	800aa74 <dwt_write8bitoffsetreg>
 800ac02:	2300      	movs	r3, #0
 800ac04:	461a      	mov	r2, r3
 800ac06:	4629      	mov	r1, r5
 800ac08:	4620      	mov	r0, r4
 800ac0a:	f7ff ff33 	bl	800aa74 <dwt_write8bitoffsetreg>
 800ac0e:	bd70      	pop	{r4, r5, r6, pc}
 800ac10:	000a000c 	.word	0x000a000c
 800ac14:	000a0010 	.word	0x000a0010
 800ac18:	000a0004 	.word	0x000a0004

0800ac1c <ull_configuresleep>:
 800ac1c:	b570      	push	{r4, r5, r6, lr}
 800ac1e:	4604      	mov	r4, r0
 800ac20:	460d      	mov	r5, r1
 800ac22:	4616      	mov	r6, r2
 800ac24:	2200      	movs	r2, #0
 800ac26:	f240 110b 	movw	r1, #267	; 0x10b
 800ac2a:	f7ff ffcf 	bl	800abcc <ull_aon_write>
 800ac2e:	f44f 7182 	mov.w	r1, #260	; 0x104
 800ac32:	4620      	mov	r0, r4
 800ac34:	f7ff ffaa 	bl	800ab8c <ull_aon_read>
 800ac38:	f000 021f 	and.w	r2, r0, #31
 800ac3c:	f44f 7182 	mov.w	r1, #260	; 0x104
 800ac40:	4620      	mov	r0, r4
 800ac42:	f7ff ffc3 	bl	800abcc <ull_aon_write>
 800ac46:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ac48:	8a1a      	ldrh	r2, [r3, #16]
 800ac4a:	4315      	orrs	r5, r2
 800ac4c:	821d      	strh	r5, [r3, #16]
 800ac4e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ac50:	8a1b      	ldrh	r3, [r3, #16]
 800ac52:	2200      	movs	r2, #0
 800ac54:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 800ac58:	4620      	mov	r0, r4
 800ac5a:	f7ff fd20 	bl	800a69e <dwt_write16bitoffsetreg>
 800ac5e:	4633      	mov	r3, r6
 800ac60:	2200      	movs	r2, #0
 800ac62:	4902      	ldr	r1, [pc, #8]	; (800ac6c <ull_configuresleep+0x50>)
 800ac64:	4620      	mov	r0, r4
 800ac66:	f7ff ff05 	bl	800aa74 <dwt_write8bitoffsetreg>
 800ac6a:	bd70      	pop	{r4, r5, r6, pc}
 800ac6c:	000a0014 	.word	0x000a0014

0800ac70 <ull_writetxdata>:
 800ac70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac72:	b083      	sub	sp, #12
 800ac74:	185c      	adds	r4, r3, r1
 800ac76:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800ac7a:	da24      	bge.n	800acc6 <ull_writetxdata+0x56>
 800ac7c:	461c      	mov	r4, r3
 800ac7e:	4617      	mov	r7, r2
 800ac80:	460e      	mov	r6, r1
 800ac82:	4605      	mov	r5, r0
 800ac84:	2b7f      	cmp	r3, #127	; 0x7f
 800ac86:	d915      	bls.n	800acb4 <ull_writetxdata+0x44>
 800ac88:	2314      	movs	r3, #20
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	490f      	ldr	r1, [pc, #60]	; (800accc <ull_writetxdata+0x5c>)
 800ac8e:	f7ff fd63 	bl	800a758 <dwt_write32bitoffsetreg>
 800ac92:	4623      	mov	r3, r4
 800ac94:	2200      	movs	r2, #0
 800ac96:	490e      	ldr	r1, [pc, #56]	; (800acd0 <ull_writetxdata+0x60>)
 800ac98:	4628      	mov	r0, r5
 800ac9a:	f7ff fd5d 	bl	800a758 <dwt_write32bitoffsetreg>
 800ac9e:	9700      	str	r7, [sp, #0]
 800aca0:	4633      	mov	r3, r6
 800aca2:	2200      	movs	r2, #0
 800aca4:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800aca8:	4628      	mov	r0, r5
 800acaa:	f7ff fced 	bl	800a688 <dwt_writetodevice>
 800acae:	2000      	movs	r0, #0
 800acb0:	b003      	add	sp, #12
 800acb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acb4:	9200      	str	r2, [sp, #0]
 800acb6:	460b      	mov	r3, r1
 800acb8:	4622      	mov	r2, r4
 800acba:	f44f 11a0 	mov.w	r1, #1310720	; 0x140000
 800acbe:	f7ff fce3 	bl	800a688 <dwt_writetodevice>
 800acc2:	2000      	movs	r0, #0
 800acc4:	e7f4      	b.n	800acb0 <ull_writetxdata+0x40>
 800acc6:	f04f 30ff 	mov.w	r0, #4294967295
 800acca:	e7f1      	b.n	800acb0 <ull_writetxdata+0x40>
 800accc:	001f0004 	.word	0x001f0004
 800acd0:	001f0008 	.word	0x001f0008

0800acd4 <ull_signal_rx_buff_free>:
 800acd4:	b510      	push	{r4, lr}
 800acd6:	b082      	sub	sp, #8
 800acd8:	4604      	mov	r4, r0
 800acda:	2302      	movs	r3, #2
 800acdc:	9301      	str	r3, [sp, #4]
 800acde:	2200      	movs	r2, #0
 800ace0:	9200      	str	r2, [sp, #0]
 800ace2:	4613      	mov	r3, r2
 800ace4:	2113      	movs	r1, #19
 800ace6:	f7ff f83a 	bl	8009d5e <dwt_xfer3xxx>
 800acea:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800acec:	7b9a      	ldrb	r2, [r3, #14]
 800acee:	2a03      	cmp	r2, #3
 800acf0:	bf0c      	ite	eq
 800acf2:	2201      	moveq	r2, #1
 800acf4:	2203      	movne	r2, #3
 800acf6:	739a      	strb	r2, [r3, #14]
 800acf8:	b002      	add	sp, #8
 800acfa:	bd10      	pop	{r4, pc}

0800acfc <ull_isr>:
 800acfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad00:	4604      	mov	r4, r0
 800ad02:	2200      	movs	r2, #0
 800ad04:	f44f 11f8 	mov.w	r1, #2031616	; 0x1f0000
 800ad08:	f7ff f8d9 	bl	8009ebe <dwt_read8bitoffsetreg>
 800ad0c:	4605      	mov	r5, r0
 800ad0e:	2200      	movs	r2, #0
 800ad10:	2144      	movs	r1, #68	; 0x44
 800ad12:	4620      	mov	r0, r4
 800ad14:	f7ff f8ab 	bl	8009e6e <dwt_read32bitoffsetreg>
 800ad18:	4606      	mov	r6, r0
 800ad1a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	83da      	strh	r2, [r3, #30]
 800ad20:	f883 2020 	strb.w	r2, [r3, #32]
 800ad24:	619a      	str	r2, [r3, #24]
 800ad26:	839a      	strh	r2, [r3, #28]
 800ad28:	625a      	str	r2, [r3, #36]	; 0x24
 800ad2a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ad2c:	625c      	str	r4, [r3, #36]	; 0x24
 800ad2e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ad30:	7b9f      	ldrb	r7, [r3, #14]
 800ad32:	2f00      	cmp	r7, #0
 800ad34:	d17f      	bne.n	800ae36 <ull_isr+0x13a>
 800ad36:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ad38:	619e      	str	r6, [r3, #24]
 800ad3a:	f8d4 8050 	ldr.w	r8, [r4, #80]	; 0x50
 800ad3e:	f898 3015 	ldrb.w	r3, [r8, #21]
 800ad42:	f003 0303 	and.w	r3, r3, #3
 800ad46:	2b03      	cmp	r3, #3
 800ad48:	f000 8090 	beq.w	800ae6c <ull_isr+0x170>
 800ad4c:	f015 0f80 	tst.w	r5, #128	; 0x80
 800ad50:	f040 8093 	bne.w	800ae7a <ull_isr+0x17e>
 800ad54:	f015 0f01 	tst.w	r5, #1
 800ad58:	f040 80c1 	bne.w	800aede <ull_isr+0x1e2>
 800ad5c:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ad60:	d00b      	beq.n	800ad7a <ull_isr+0x7e>
 800ad62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad64:	b113      	cbz	r3, 800ad6c <ull_isr+0x70>
 800ad66:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800ad68:	3018      	adds	r0, #24
 800ad6a:	4798      	blx	r3
 800ad6c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800ad70:	2202      	movs	r2, #2
 800ad72:	2144      	movs	r1, #68	; 0x44
 800ad74:	4620      	mov	r0, r4
 800ad76:	f7ff fc92 	bl	800a69e <dwt_write16bitoffsetreg>
 800ad7a:	f015 0f08 	tst.w	r5, #8
 800ad7e:	d107      	bne.n	800ad90 <ull_isr+0x94>
 800ad80:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ad82:	7b9b      	ldrb	r3, [r3, #14]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	f000 80ea 	beq.w	800af5e <ull_isr+0x262>
 800ad8a:	2f00      	cmp	r7, #0
 800ad8c:	f000 80e7 	beq.w	800af5e <ull_isr+0x262>
 800ad90:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ad92:	2200      	movs	r2, #0
 800ad94:	f883 2020 	strb.w	r2, [r3, #32]
 800ad98:	f416 2f80 	tst.w	r6, #262144	; 0x40000
 800ad9c:	f000 80ad 	beq.w	800aefa <ull_isr+0x1fe>
 800ada0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800ada2:	f892 3020 	ldrb.w	r3, [r2, #32]
 800ada6:	f043 0308 	orr.w	r3, r3, #8
 800adaa:	f882 3020 	strb.w	r3, [r2, #32]
 800adae:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 800adb2:	f016 5f80 	tst.w	r6, #268435456	; 0x10000000
 800adb6:	d008      	beq.n	800adca <ull_isr+0xce>
 800adb8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800adba:	f892 3020 	ldrb.w	r3, [r2, #32]
 800adbe:	f043 0310 	orr.w	r3, r3, #16
 800adc2:	f882 3020 	strb.w	r3, [r2, #32]
 800adc6:	f047 5780 	orr.w	r7, r7, #268435456	; 0x10000000
 800adca:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 800adce:	d006      	beq.n	800adde <ull_isr+0xe2>
 800add0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800add2:	7d53      	ldrb	r3, [r2, #21]
 800add4:	f003 0303 	and.w	r3, r3, #3
 800add8:	2b03      	cmp	r3, #3
 800adda:	f000 809a 	beq.w	800af12 <ull_isr+0x216>
 800adde:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 800ade2:	f040 80a2 	bne.w	800af2a <ull_isr+0x22e>
 800ade6:	f447 43de 	orr.w	r3, r7, #28416	; 0x6f00
 800adea:	2200      	movs	r2, #0
 800adec:	2144      	movs	r1, #68	; 0x44
 800adee:	4620      	mov	r0, r4
 800adf0:	f7ff fcb2 	bl	800a758 <dwt_write32bitoffsetreg>
 800adf4:	4620      	mov	r0, r4
 800adf6:	f7ff fe7b 	bl	800aaf0 <_dwt_clear_db_events>
 800adfa:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800adfc:	8bc3      	ldrh	r3, [r0, #30]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	f040 80a2 	bne.w	800af48 <ull_isr+0x24c>
 800ae04:	7d43      	ldrb	r3, [r0, #21]
 800ae06:	f003 0303 	and.w	r3, r3, #3
 800ae0a:	2b03      	cmp	r3, #3
 800ae0c:	f000 809c 	beq.w	800af48 <ull_isr+0x24c>
 800ae10:	6983      	ldr	r3, [r0, #24]
 800ae12:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800ae16:	6183      	str	r3, [r0, #24]
 800ae18:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800ae1a:	6993      	ldr	r3, [r2, #24]
 800ae1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ae20:	6193      	str	r3, [r2, #24]
 800ae22:	69e3      	ldr	r3, [r4, #28]
 800ae24:	b113      	cbz	r3, 800ae2c <ull_isr+0x130>
 800ae26:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800ae28:	3018      	adds	r0, #24
 800ae2a:	4798      	blx	r3
 800ae2c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ae2e:	2200      	movs	r2, #0
 800ae30:	f883 2020 	strb.w	r2, [r3, #32]
 800ae34:	e08c      	b.n	800af50 <ull_isr+0x254>
 800ae36:	496d      	ldr	r1, [pc, #436]	; (800afec <ull_isr+0x2f0>)
 800ae38:	4620      	mov	r0, r4
 800ae3a:	f7ff f840 	bl	8009ebe <dwt_read8bitoffsetreg>
 800ae3e:	4607      	mov	r7, r0
 800ae40:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ae42:	7b9b      	ldrb	r3, [r3, #14]
 800ae44:	2b03      	cmp	r3, #3
 800ae46:	bf08      	it	eq
 800ae48:	f3c0 1707 	ubfxeq	r7, r0, #4, #8
 800ae4c:	f017 0f01 	tst.w	r7, #1
 800ae50:	bf18      	it	ne
 800ae52:	f446 4680 	orrne.w	r6, r6, #16384	; 0x4000
 800ae56:	f017 0f02 	tst.w	r7, #2
 800ae5a:	bf18      	it	ne
 800ae5c:	f446 5600 	orrne.w	r6, r6, #8192	; 0x2000
 800ae60:	f017 0f04 	tst.w	r7, #4
 800ae64:	bf18      	it	ne
 800ae66:	f446 6680 	orrne.w	r6, r6, #1024	; 0x400
 800ae6a:	e764      	b.n	800ad36 <ull_isr+0x3a>
 800ae6c:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 800ae70:	bf1c      	itt	ne
 800ae72:	f045 0508 	orrne.w	r5, r5, #8
 800ae76:	b2ed      	uxtbne	r5, r5
 800ae78:	e768      	b.n	800ad4c <ull_isr+0x50>
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	2148      	movs	r1, #72	; 0x48
 800ae7e:	4620      	mov	r0, r4
 800ae80:	f7ff f80b 	bl	8009e9a <dwt_read16bitoffsetreg>
 800ae84:	f8a8 001c 	strh.w	r0, [r8, #28]
 800ae88:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ae8a:	7d1a      	ldrb	r2, [r3, #20]
 800ae8c:	b11a      	cbz	r2, 800ae96 <ull_isr+0x19a>
 800ae8e:	699a      	ldr	r2, [r3, #24]
 800ae90:	f012 0f04 	tst.w	r2, #4
 800ae94:	d103      	bne.n	800ae9e <ull_isr+0x1a2>
 800ae96:	8b9b      	ldrh	r3, [r3, #28]
 800ae98:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800ae9c:	b18b      	cbz	r3, 800aec2 <ull_isr+0x1c6>
 800ae9e:	2304      	movs	r3, #4
 800aea0:	2200      	movs	r2, #0
 800aea2:	2144      	movs	r1, #68	; 0x44
 800aea4:	4620      	mov	r0, r4
 800aea6:	f7ff fde5 	bl	800aa74 <dwt_write8bitoffsetreg>
 800aeaa:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 800aeae:	2200      	movs	r2, #0
 800aeb0:	2148      	movs	r1, #72	; 0x48
 800aeb2:	4620      	mov	r0, r4
 800aeb4:	f7ff fbf3 	bl	800a69e <dwt_write16bitoffsetreg>
 800aeb8:	6a23      	ldr	r3, [r4, #32]
 800aeba:	b113      	cbz	r3, 800aec2 <ull_isr+0x1c6>
 800aebc:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800aebe:	3018      	adds	r0, #24
 800aec0:	4798      	blx	r3
 800aec2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800aec4:	8b9b      	ldrh	r3, [r3, #28]
 800aec6:	f413 7f80 	tst.w	r3, #256	; 0x100
 800aeca:	f43f af43 	beq.w	800ad54 <ull_isr+0x58>
 800aece:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aed2:	2200      	movs	r2, #0
 800aed4:	2148      	movs	r1, #72	; 0x48
 800aed6:	4620      	mov	r0, r4
 800aed8:	f7ff fbe1 	bl	800a69e <dwt_write16bitoffsetreg>
 800aedc:	e73a      	b.n	800ad54 <ull_isr+0x58>
 800aede:	23f8      	movs	r3, #248	; 0xf8
 800aee0:	2200      	movs	r2, #0
 800aee2:	2144      	movs	r1, #68	; 0x44
 800aee4:	4620      	mov	r0, r4
 800aee6:	f7ff fdc5 	bl	800aa74 <dwt_write8bitoffsetreg>
 800aeea:	6923      	ldr	r3, [r4, #16]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	f43f af35 	beq.w	800ad5c <ull_isr+0x60>
 800aef2:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800aef4:	3018      	adds	r0, #24
 800aef6:	4798      	blx	r3
 800aef8:	e730      	b.n	800ad5c <ull_isr+0x60>
 800aefa:	f416 6f80 	tst.w	r6, #1024	; 0x400
 800aefe:	bf1f      	itttt	ne
 800af00:	6d22      	ldrne	r2, [r4, #80]	; 0x50
 800af02:	f892 3020 	ldrbne.w	r3, [r2, #32]
 800af06:	f043 0304 	orrne.w	r3, r3, #4
 800af0a:	f882 3020 	strbne.w	r3, [r2, #32]
 800af0e:	2700      	movs	r7, #0
 800af10:	e74f      	b.n	800adb2 <ull_isr+0xb6>
 800af12:	f892 3020 	ldrb.w	r3, [r2, #32]
 800af16:	f043 0302 	orr.w	r3, r3, #2
 800af1a:	f882 3020 	strb.w	r3, [r2, #32]
 800af1e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800af20:	2200      	movs	r2, #0
 800af22:	83da      	strh	r2, [r3, #30]
 800af24:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 800af28:	e75d      	b.n	800ade6 <ull_isr+0xea>
 800af2a:	4620      	mov	r0, r4
 800af2c:	f7ff fdae 	bl	800aa8c <ull_getframelength>
 800af30:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 800af34:	f43f af57 	beq.w	800ade6 <ull_isr+0xea>
 800af38:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800af3a:	f892 3020 	ldrb.w	r3, [r2, #32]
 800af3e:	f043 0301 	orr.w	r3, r3, #1
 800af42:	f882 3020 	strb.w	r3, [r2, #32]
 800af46:	e74e      	b.n	800ade6 <ull_isr+0xea>
 800af48:	6963      	ldr	r3, [r4, #20]
 800af4a:	b10b      	cbz	r3, 800af50 <ull_isr+0x254>
 800af4c:	3018      	adds	r0, #24
 800af4e:	4798      	blx	r3
 800af50:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800af52:	7b9b      	ldrb	r3, [r3, #14]
 800af54:	bb03      	cbnz	r3, 800af98 <ull_isr+0x29c>
 800af56:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800af58:	2200      	movs	r2, #0
 800af5a:	f883 2020 	strb.w	r2, [r3, #32]
 800af5e:	f015 0f10 	tst.w	r5, #16
 800af62:	d11d      	bne.n	800afa0 <ull_isr+0x2a4>
 800af64:	f015 0f20 	tst.w	r5, #32
 800af68:	d12d      	bne.n	800afc6 <ull_isr+0x2ca>
 800af6a:	2200      	movs	r2, #0
 800af6c:	4920      	ldr	r1, [pc, #128]	; (800aff0 <ull_isr+0x2f4>)
 800af6e:	4620      	mov	r0, r4
 800af70:	f7fe ffa5 	bl	8009ebe <dwt_read8bitoffsetreg>
 800af74:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800af76:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21
 800af7a:	f010 0303 	ands.w	r3, r0, #3
 800af7e:	d009      	beq.n	800af94 <ull_isr+0x298>
 800af80:	2200      	movs	r2, #0
 800af82:	491b      	ldr	r1, [pc, #108]	; (800aff0 <ull_isr+0x2f4>)
 800af84:	4620      	mov	r0, r4
 800af86:	f7ff fd75 	bl	800aa74 <dwt_write8bitoffsetreg>
 800af8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800af8c:	b113      	cbz	r3, 800af94 <ull_isr+0x298>
 800af8e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800af90:	3018      	adds	r0, #24
 800af92:	4798      	blx	r3
 800af94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af98:	4620      	mov	r0, r4
 800af9a:	f7ff fe9b 	bl	800acd4 <ull_signal_rx_buff_free>
 800af9e:	e7da      	b.n	800af56 <ull_isr+0x25a>
 800afa0:	4b14      	ldr	r3, [pc, #80]	; (800aff4 <ull_isr+0x2f8>)
 800afa2:	2200      	movs	r2, #0
 800afa4:	2144      	movs	r1, #68	; 0x44
 800afa6:	4620      	mov	r0, r4
 800afa8:	f7ff fbd6 	bl	800a758 <dwt_write32bitoffsetreg>
 800afac:	4620      	mov	r0, r4
 800afae:	f7ff fd9f 	bl	800aaf0 <_dwt_clear_db_events>
 800afb2:	69e3      	ldr	r3, [r4, #28]
 800afb4:	b113      	cbz	r3, 800afbc <ull_isr+0x2c0>
 800afb6:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800afb8:	3018      	adds	r0, #24
 800afba:	4798      	blx	r3
 800afbc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800afbe:	2200      	movs	r2, #0
 800afc0:	f883 2020 	strb.w	r2, [r3, #32]
 800afc4:	e7ce      	b.n	800af64 <ull_isr+0x268>
 800afc6:	4b0c      	ldr	r3, [pc, #48]	; (800aff8 <ull_isr+0x2fc>)
 800afc8:	2200      	movs	r2, #0
 800afca:	2144      	movs	r1, #68	; 0x44
 800afcc:	4620      	mov	r0, r4
 800afce:	f7ff fbc3 	bl	800a758 <dwt_write32bitoffsetreg>
 800afd2:	4620      	mov	r0, r4
 800afd4:	f7ff fd8c 	bl	800aaf0 <_dwt_clear_db_events>
 800afd8:	69a3      	ldr	r3, [r4, #24]
 800afda:	b113      	cbz	r3, 800afe2 <ull_isr+0x2e6>
 800afdc:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800afde:	3018      	adds	r0, #24
 800afe0:	4798      	blx	r3
 800afe2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800afe4:	2200      	movs	r2, #0
 800afe6:	f883 2020 	strb.w	r2, [r3, #32]
 800afea:	e7be      	b.n	800af6a <ull_isr+0x26e>
 800afec:	00010018 	.word	0x00010018
 800aff0:	00110038 	.word	0x00110038
 800aff4:	34059400 	.word	0x34059400
 800aff8:	10220400 	.word	0x10220400

0800affc <dwt_modify32bitoffsetreg>:
 800affc:	b530      	push	{r4, r5, lr}
 800affe:	b085      	sub	sp, #20
 800b000:	9c08      	ldr	r4, [sp, #32]
 800b002:	f88d 3008 	strb.w	r3, [sp, #8]
 800b006:	0a1d      	lsrs	r5, r3, #8
 800b008:	f88d 5009 	strb.w	r5, [sp, #9]
 800b00c:	0c1d      	lsrs	r5, r3, #16
 800b00e:	f88d 500a 	strb.w	r5, [sp, #10]
 800b012:	0e1b      	lsrs	r3, r3, #24
 800b014:	f88d 300b 	strb.w	r3, [sp, #11]
 800b018:	f88d 400c 	strb.w	r4, [sp, #12]
 800b01c:	0a23      	lsrs	r3, r4, #8
 800b01e:	f88d 300d 	strb.w	r3, [sp, #13]
 800b022:	0c23      	lsrs	r3, r4, #16
 800b024:	f88d 300e 	strb.w	r3, [sp, #14]
 800b028:	0e24      	lsrs	r4, r4, #24
 800b02a:	f88d 400f 	strb.w	r4, [sp, #15]
 800b02e:	f248 0303 	movw	r3, #32771	; 0x8003
 800b032:	9301      	str	r3, [sp, #4]
 800b034:	ab02      	add	r3, sp, #8
 800b036:	9300      	str	r3, [sp, #0]
 800b038:	2308      	movs	r3, #8
 800b03a:	b292      	uxth	r2, r2
 800b03c:	f7fe fe8f 	bl	8009d5e <dwt_xfer3xxx>
 800b040:	b005      	add	sp, #20
 800b042:	bd30      	pop	{r4, r5, pc}

0800b044 <ull_enable_rf_tx>:
 800b044:	b570      	push	{r4, r5, r6, lr}
 800b046:	b082      	sub	sp, #8
 800b048:	4604      	mov	r4, r0
 800b04a:	460e      	mov	r6, r1
 800b04c:	4d13      	ldr	r5, [pc, #76]	; (800b09c <ull_enable_rf_tx+0x58>)
 800b04e:	f04f 2308 	mov.w	r3, #134219776	; 0x8000800
 800b052:	9300      	str	r3, [sp, #0]
 800b054:	f04f 33ff 	mov.w	r3, #4294967295
 800b058:	2200      	movs	r2, #0
 800b05a:	4629      	mov	r1, r5
 800b05c:	f7ff ffce 	bl	800affc <dwt_modify32bitoffsetreg>
 800b060:	f04f 1360 	mov.w	r3, #6291552	; 0x600060
 800b064:	9300      	str	r3, [sp, #0]
 800b066:	f04f 33ff 	mov.w	r3, #4294967295
 800b06a:	2200      	movs	r2, #0
 800b06c:	4629      	mov	r1, r5
 800b06e:	4620      	mov	r0, r4
 800b070:	f7ff ffc4 	bl	800affc <dwt_modify32bitoffsetreg>
 800b074:	4b0a      	ldr	r3, [pc, #40]	; (800b0a0 <ull_enable_rf_tx+0x5c>)
 800b076:	9300      	str	r3, [sp, #0]
 800b078:	f04f 33ff 	mov.w	r3, #4294967295
 800b07c:	2200      	movs	r2, #0
 800b07e:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 800b082:	4620      	mov	r0, r4
 800b084:	f7ff ffba 	bl	800affc <dwt_modify32bitoffsetreg>
 800b088:	b90e      	cbnz	r6, 800b08e <ull_enable_rf_tx+0x4a>
 800b08a:	b002      	add	sp, #8
 800b08c:	bd70      	pop	{r4, r5, r6, pc}
 800b08e:	4b05      	ldr	r3, [pc, #20]	; (800b0a4 <ull_enable_rf_tx+0x60>)
 800b090:	2200      	movs	r2, #0
 800b092:	4905      	ldr	r1, [pc, #20]	; (800b0a8 <ull_enable_rf_tx+0x64>)
 800b094:	4620      	mov	r0, r4
 800b096:	f7ff fb5f 	bl	800a758 <dwt_write32bitoffsetreg>
 800b09a:	e7f6      	b.n	800b08a <ull_enable_rf_tx+0x46>
 800b09c:	00070048 	.word	0x00070048
 800b0a0:	02003c00 	.word	0x02003c00
 800b0a4:	01011100 	.word	0x01011100
 800b0a8:	00070014 	.word	0x00070014

0800b0ac <ull_enable_rftx_blocks>:
 800b0ac:	b500      	push	{lr}
 800b0ae:	b083      	sub	sp, #12
 800b0b0:	4b05      	ldr	r3, [pc, #20]	; (800b0c8 <ull_enable_rftx_blocks+0x1c>)
 800b0b2:	9300      	str	r3, [sp, #0]
 800b0b4:	f04f 33ff 	mov.w	r3, #4294967295
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	4904      	ldr	r1, [pc, #16]	; (800b0cc <ull_enable_rftx_blocks+0x20>)
 800b0bc:	f7ff ff9e 	bl	800affc <dwt_modify32bitoffsetreg>
 800b0c0:	b003      	add	sp, #12
 800b0c2:	f85d fb04 	ldr.w	pc, [sp], #4
 800b0c6:	bf00      	nop
 800b0c8:	02003c00 	.word	0x02003c00
 800b0cc:	00070004 	.word	0x00070004

0800b0d0 <_dwt_otpprogword32>:
 800b0d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b0d4:	b083      	sub	sp, #12
 800b0d6:	4604      	mov	r4, r0
 800b0d8:	460d      	mov	r5, r1
 800b0da:	4617      	mov	r7, r2
 800b0dc:	4e56      	ldr	r6, [pc, #344]	; (800b238 <_dwt_otpprogword32+0x168>)
 800b0de:	2200      	movs	r2, #0
 800b0e0:	4631      	mov	r1, r6
 800b0e2:	f7fe fec4 	bl	8009e6e <dwt_read32bitoffsetreg>
 800b0e6:	4681      	mov	r9, r0
 800b0e8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800b0ec:	9300      	str	r3, [sp, #0]
 800b0ee:	f04f 33ff 	mov.w	r3, #4294967295
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	4631      	mov	r1, r6
 800b0f6:	4620      	mov	r0, r4
 800b0f8:	f7ff ff80 	bl	800affc <dwt_modify32bitoffsetreg>
 800b0fc:	f8df 813c 	ldr.w	r8, [pc, #316]	; 800b23c <_dwt_otpprogword32+0x16c>
 800b100:	2318      	movs	r3, #24
 800b102:	2200      	movs	r2, #0
 800b104:	4641      	mov	r1, r8
 800b106:	4620      	mov	r0, r4
 800b108:	f7ff fac9 	bl	800a69e <dwt_write16bitoffsetreg>
 800b10c:	2125      	movs	r1, #37	; 0x25
 800b10e:	4620      	mov	r0, r4
 800b110:	f7ff faec 	bl	800a6ec <__dwt_otp_write_wdata_id_reg>
 800b114:	2102      	movs	r1, #2
 800b116:	4620      	mov	r0, r4
 800b118:	f7ff fae8 	bl	800a6ec <__dwt_otp_write_wdata_id_reg>
 800b11c:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
 800b120:	4620      	mov	r0, r4
 800b122:	f7ff fae3 	bl	800a6ec <__dwt_otp_write_wdata_id_reg>
 800b126:	b2f9      	uxtb	r1, r7
 800b128:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800b12c:	4620      	mov	r0, r4
 800b12e:	f7ff fadd 	bl	800a6ec <__dwt_otp_write_wdata_id_reg>
 800b132:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b136:	4620      	mov	r0, r4
 800b138:	f7ff fad8 	bl	800a6ec <__dwt_otp_write_wdata_id_reg>
 800b13c:	2100      	movs	r1, #0
 800b13e:	4620      	mov	r0, r4
 800b140:	f7ff fad4 	bl	800a6ec <__dwt_otp_write_wdata_id_reg>
 800b144:	2102      	movs	r1, #2
 800b146:	4620      	mov	r0, r4
 800b148:	f7ff fad0 	bl	800a6ec <__dwt_otp_write_wdata_id_reg>
 800b14c:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800b150:	4620      	mov	r0, r4
 800b152:	f7ff facb 	bl	800a6ec <__dwt_otp_write_wdata_id_reg>
 800b156:	b2e9      	uxtb	r1, r5
 800b158:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800b15c:	4620      	mov	r0, r4
 800b15e:	f7ff fac5 	bl	800a6ec <__dwt_otp_write_wdata_id_reg>
 800b162:	f3c5 2107 	ubfx	r1, r5, #8, #8
 800b166:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800b16a:	4620      	mov	r0, r4
 800b16c:	f7ff fabe 	bl	800a6ec <__dwt_otp_write_wdata_id_reg>
 800b170:	f3c5 4107 	ubfx	r1, r5, #16, #8
 800b174:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800b178:	4620      	mov	r0, r4
 800b17a:	f7ff fab7 	bl	800a6ec <__dwt_otp_write_wdata_id_reg>
 800b17e:	0e29      	lsrs	r1, r5, #24
 800b180:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800b184:	4620      	mov	r0, r4
 800b186:	f7ff fab1 	bl	800a6ec <__dwt_otp_write_wdata_id_reg>
 800b18a:	2100      	movs	r1, #0
 800b18c:	4620      	mov	r0, r4
 800b18e:	f7ff faad 	bl	800a6ec <__dwt_otp_write_wdata_id_reg>
 800b192:	213a      	movs	r1, #58	; 0x3a
 800b194:	4620      	mov	r0, r4
 800b196:	f7ff faa9 	bl	800a6ec <__dwt_otp_write_wdata_id_reg>
 800b19a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b19e:	4620      	mov	r0, r4
 800b1a0:	f7ff faa4 	bl	800a6ec <__dwt_otp_write_wdata_id_reg>
 800b1a4:	f44f 7185 	mov.w	r1, #266	; 0x10a
 800b1a8:	4620      	mov	r0, r4
 800b1aa:	f7ff fa9f 	bl	800a6ec <__dwt_otp_write_wdata_id_reg>
 800b1ae:	2100      	movs	r1, #0
 800b1b0:	4620      	mov	r0, r4
 800b1b2:	f7ff fa9b 	bl	800a6ec <__dwt_otp_write_wdata_id_reg>
 800b1b6:	213a      	movs	r1, #58	; 0x3a
 800b1b8:	4620      	mov	r0, r4
 800b1ba:	f7ff fa97 	bl	800a6ec <__dwt_otp_write_wdata_id_reg>
 800b1be:	f240 1101 	movw	r1, #257	; 0x101
 800b1c2:	4620      	mov	r0, r4
 800b1c4:	f7ff fa92 	bl	800a6ec <__dwt_otp_write_wdata_id_reg>
 800b1c8:	2302      	movs	r3, #2
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800b1d0:	4620      	mov	r0, r4
 800b1d2:	f7ff fa64 	bl	800a69e <dwt_write16bitoffsetreg>
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	461a      	mov	r2, r3
 800b1da:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800b1de:	4620      	mov	r0, r4
 800b1e0:	f7ff fa5d 	bl	800a69e <dwt_write16bitoffsetreg>
 800b1e4:	2002      	movs	r0, #2
 800b1e6:	f7f5 f991 	bl	800050c <deca_sleep>
 800b1ea:	213a      	movs	r1, #58	; 0x3a
 800b1ec:	4620      	mov	r0, r4
 800b1ee:	f7ff fa7d 	bl	800a6ec <__dwt_otp_write_wdata_id_reg>
 800b1f2:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b1f6:	4620      	mov	r0, r4
 800b1f8:	f7ff fa78 	bl	800a6ec <__dwt_otp_write_wdata_id_reg>
 800b1fc:	2302      	movs	r3, #2
 800b1fe:	2200      	movs	r2, #0
 800b200:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800b204:	4620      	mov	r0, r4
 800b206:	f7ff fa4a 	bl	800a69e <dwt_write16bitoffsetreg>
 800b20a:	2300      	movs	r3, #0
 800b20c:	461a      	mov	r2, r3
 800b20e:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800b212:	4620      	mov	r0, r4
 800b214:	f7ff fa43 	bl	800a69e <dwt_write16bitoffsetreg>
 800b218:	2300      	movs	r3, #0
 800b21a:	461a      	mov	r2, r3
 800b21c:	4641      	mov	r1, r8
 800b21e:	4620      	mov	r0, r4
 800b220:	f7ff fa3d 	bl	800a69e <dwt_write16bitoffsetreg>
 800b224:	464b      	mov	r3, r9
 800b226:	2200      	movs	r2, #0
 800b228:	4631      	mov	r1, r6
 800b22a:	4620      	mov	r0, r4
 800b22c:	f7ff fa94 	bl	800a758 <dwt_write32bitoffsetreg>
 800b230:	b003      	add	sp, #12
 800b232:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b236:	bf00      	nop
 800b238:	00070044 	.word	0x00070044
 800b23c:	000b0008 	.word	0x000b0008

0800b240 <ull_setgpiomode>:
 800b240:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b242:	b083      	sub	sp, #12
 800b244:	2400      	movs	r4, #0
 800b246:	4623      	mov	r3, r4
 800b248:	2601      	movs	r6, #1
 800b24a:	2707      	movs	r7, #7
 800b24c:	e002      	b.n	800b254 <ull_setgpiomode+0x14>
 800b24e:	3401      	adds	r4, #1
 800b250:	2c09      	cmp	r4, #9
 800b252:	d009      	beq.n	800b268 <ull_setgpiomode+0x28>
 800b254:	fa06 f504 	lsl.w	r5, r6, r4
 800b258:	420d      	tst	r5, r1
 800b25a:	d0f8      	beq.n	800b24e <ull_setgpiomode+0xe>
 800b25c:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800b260:	fa07 f505 	lsl.w	r5, r7, r5
 800b264:	432b      	orrs	r3, r5
 800b266:	e7f2      	b.n	800b24e <ull_setgpiomode+0xe>
 800b268:	401a      	ands	r2, r3
 800b26a:	9200      	str	r2, [sp, #0]
 800b26c:	43db      	mvns	r3, r3
 800b26e:	2200      	movs	r2, #0
 800b270:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800b274:	f7ff fec2 	bl	800affc <dwt_modify32bitoffsetreg>
 800b278:	b003      	add	sp, #12
 800b27a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b27c <ull_writetxfctrl>:
 800b27c:	b510      	push	{r4, lr}
 800b27e:	b082      	sub	sp, #8
 800b280:	4604      	mov	r4, r0
 800b282:	2a7f      	cmp	r2, #127	; 0x7f
 800b284:	d912      	bls.n	800b2ac <ull_writetxfctrl+0x30>
 800b286:	3280      	adds	r2, #128	; 0x80
 800b288:	ea41 21c3 	orr.w	r1, r1, r3, lsl #11
 800b28c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b290:	9100      	str	r1, [sp, #0]
 800b292:	4b0c      	ldr	r3, [pc, #48]	; (800b2c4 <ull_writetxfctrl+0x48>)
 800b294:	2200      	movs	r2, #0
 800b296:	2120      	movs	r1, #32
 800b298:	f7ff feb0 	bl	800affc <dwt_modify32bitoffsetreg>
 800b29c:	2200      	movs	r2, #0
 800b29e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b2a2:	4620      	mov	r0, r4
 800b2a4:	f7fe fe0b 	bl	8009ebe <dwt_read8bitoffsetreg>
 800b2a8:	b002      	add	sp, #8
 800b2aa:	bd10      	pop	{r4, pc}
 800b2ac:	ea41 21c3 	orr.w	r1, r1, r3, lsl #11
 800b2b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b2b4:	9100      	str	r1, [sp, #0]
 800b2b6:	4b03      	ldr	r3, [pc, #12]	; (800b2c4 <ull_writetxfctrl+0x48>)
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	2120      	movs	r1, #32
 800b2bc:	f7ff fe9e 	bl	800affc <dwt_modify32bitoffsetreg>
 800b2c0:	e7f2      	b.n	800b2a8 <ull_writetxfctrl+0x2c>
 800b2c2:	bf00      	nop
 800b2c4:	fc00f400 	.word	0xfc00f400

0800b2c8 <prs_sys_status_and_or>:
 800b2c8:	b500      	push	{lr}
 800b2ca:	b083      	sub	sp, #12
 800b2cc:	9200      	str	r2, [sp, #0]
 800b2ce:	460b      	mov	r3, r1
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	2144      	movs	r1, #68	; 0x44
 800b2d4:	f7ff fe92 	bl	800affc <dwt_modify32bitoffsetreg>
 800b2d8:	2000      	movs	r0, #0
 800b2da:	b003      	add	sp, #12
 800b2dc:	f85d fb04 	ldr.w	pc, [sp], #4

0800b2e0 <dwt_modify8bitoffsetreg>:
 800b2e0:	b500      	push	{lr}
 800b2e2:	b085      	sub	sp, #20
 800b2e4:	f88d 300c 	strb.w	r3, [sp, #12]
 800b2e8:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800b2ec:	f88d 300d 	strb.w	r3, [sp, #13]
 800b2f0:	f248 0301 	movw	r3, #32769	; 0x8001
 800b2f4:	9301      	str	r3, [sp, #4]
 800b2f6:	ab03      	add	r3, sp, #12
 800b2f8:	9300      	str	r3, [sp, #0]
 800b2fa:	2302      	movs	r3, #2
 800b2fc:	b292      	uxth	r2, r2
 800b2fe:	f7fe fd2e 	bl	8009d5e <dwt_xfer3xxx>
 800b302:	b005      	add	sp, #20
 800b304:	f85d fb04 	ldr.w	pc, [sp], #4

0800b308 <ull_configciadiag>:
 800b308:	b530      	push	{r4, r5, lr}
 800b30a:	b083      	sub	sp, #12
 800b30c:	4604      	mov	r4, r0
 800b30e:	460d      	mov	r5, r1
 800b310:	f011 0f01 	tst.w	r1, #1
 800b314:	d015      	beq.n	800b342 <ull_configciadiag+0x3a>
 800b316:	2300      	movs	r3, #0
 800b318:	9300      	str	r3, [sp, #0]
 800b31a:	23ef      	movs	r3, #239	; 0xef
 800b31c:	2202      	movs	r2, #2
 800b31e:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800b322:	f7ff ffdd 	bl	800b2e0 <dwt_modify8bitoffsetreg>
 800b326:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800b328:	759d      	strb	r5, [r3, #22]
 800b32a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800b32c:	7d9b      	ldrb	r3, [r3, #22]
 800b32e:	085b      	lsrs	r3, r3, #1
 800b330:	d010      	beq.n	800b354 <ull_configciadiag+0x4c>
 800b332:	086b      	lsrs	r3, r5, #1
 800b334:	2200      	movs	r2, #0
 800b336:	490e      	ldr	r1, [pc, #56]	; (800b370 <ull_configciadiag+0x68>)
 800b338:	4620      	mov	r0, r4
 800b33a:	f7ff fb9b 	bl	800aa74 <dwt_write8bitoffsetreg>
 800b33e:	b003      	add	sp, #12
 800b340:	bd30      	pop	{r4, r5, pc}
 800b342:	2310      	movs	r3, #16
 800b344:	9300      	str	r3, [sp, #0]
 800b346:	23ff      	movs	r3, #255	; 0xff
 800b348:	2202      	movs	r2, #2
 800b34a:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800b34e:	f7ff ffc7 	bl	800b2e0 <dwt_modify8bitoffsetreg>
 800b352:	e7e8      	b.n	800b326 <ull_configciadiag+0x1e>
 800b354:	2301      	movs	r3, #1
 800b356:	9300      	str	r3, [sp, #0]
 800b358:	23ff      	movs	r3, #255	; 0xff
 800b35a:	2200      	movs	r2, #0
 800b35c:	4904      	ldr	r1, [pc, #16]	; (800b370 <ull_configciadiag+0x68>)
 800b35e:	4620      	mov	r0, r4
 800b360:	f7ff ffbe 	bl	800b2e0 <dwt_modify8bitoffsetreg>
 800b364:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800b366:	7d93      	ldrb	r3, [r2, #22]
 800b368:	f043 0302 	orr.w	r3, r3, #2
 800b36c:	7593      	strb	r3, [r2, #22]
 800b36e:	e7e6      	b.n	800b33e <ull_configciadiag+0x36>
 800b370:	00010020 	.word	0x00010020

0800b374 <ull_calcbandwidthadj>:
 800b374:	b570      	push	{r4, r5, r6, lr}
 800b376:	b082      	sub	sp, #8
 800b378:	4604      	mov	r4, r0
 800b37a:	460d      	mov	r5, r1
 800b37c:	2101      	movs	r1, #1
 800b37e:	f7ff f99f 	bl	800a6c0 <ull_force_clocks>
 800b382:	2100      	movs	r1, #0
 800b384:	4620      	mov	r0, r4
 800b386:	f7ff fe5d 	bl	800b044 <ull_enable_rf_tx>
 800b38a:	4620      	mov	r0, r4
 800b38c:	f7ff fe8e 	bl	800b0ac <ull_enable_rftx_blocks>
 800b390:	f3c5 030b 	ubfx	r3, r5, #0, #12
 800b394:	2200      	movs	r2, #0
 800b396:	4915      	ldr	r1, [pc, #84]	; (800b3ec <ull_calcbandwidthadj+0x78>)
 800b398:	4620      	mov	r0, r4
 800b39a:	f7ff f980 	bl	800a69e <dwt_write16bitoffsetreg>
 800b39e:	2303      	movs	r3, #3
 800b3a0:	9300      	str	r3, [sp, #0]
 800b3a2:	23ff      	movs	r3, #255	; 0xff
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	4912      	ldr	r1, [pc, #72]	; (800b3f0 <ull_calcbandwidthadj+0x7c>)
 800b3a8:	4620      	mov	r0, r4
 800b3aa:	f7ff ff99 	bl	800b2e0 <dwt_modify8bitoffsetreg>
 800b3ae:	4e10      	ldr	r6, [pc, #64]	; (800b3f0 <ull_calcbandwidthadj+0x7c>)
 800b3b0:	2500      	movs	r5, #0
 800b3b2:	462a      	mov	r2, r5
 800b3b4:	4631      	mov	r1, r6
 800b3b6:	4620      	mov	r0, r4
 800b3b8:	f7fe fd81 	bl	8009ebe <dwt_read8bitoffsetreg>
 800b3bc:	f010 0f01 	tst.w	r0, #1
 800b3c0:	d1f7      	bne.n	800b3b2 <ull_calcbandwidthadj+0x3e>
 800b3c2:	4620      	mov	r0, r4
 800b3c4:	f7ff faf8 	bl	800a9b8 <ull_disable_rftx_blocks>
 800b3c8:	2100      	movs	r1, #0
 800b3ca:	4620      	mov	r0, r4
 800b3cc:	f7ff fafe 	bl	800a9cc <ull_disable_rf_tx>
 800b3d0:	2105      	movs	r1, #5
 800b3d2:	4620      	mov	r0, r4
 800b3d4:	f7ff f974 	bl	800a6c0 <ull_force_clocks>
 800b3d8:	2200      	movs	r2, #0
 800b3da:	4906      	ldr	r1, [pc, #24]	; (800b3f4 <ull_calcbandwidthadj+0x80>)
 800b3dc:	4620      	mov	r0, r4
 800b3de:	f7fe fd6e 	bl	8009ebe <dwt_read8bitoffsetreg>
 800b3e2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800b3e6:	b002      	add	sp, #8
 800b3e8:	bd70      	pop	{r4, r5, r6, pc}
 800b3ea:	bf00      	nop
 800b3ec:	0008001c 	.word	0x0008001c
 800b3f0:	00080010 	.word	0x00080010
 800b3f4:	0007001c 	.word	0x0007001c

0800b3f8 <ull_configuretxrf>:
 800b3f8:	b538      	push	{r3, r4, r5, lr}
 800b3fa:	4605      	mov	r5, r0
 800b3fc:	460c      	mov	r4, r1
 800b3fe:	f8b1 1005 	ldrh.w	r1, [r1, #5]
 800b402:	b149      	cbz	r1, 800b418 <ull_configuretxrf+0x20>
 800b404:	f7ff ffb6 	bl	800b374 <ull_calcbandwidthadj>
 800b408:	f8d4 3001 	ldr.w	r3, [r4, #1]
 800b40c:	2200      	movs	r2, #0
 800b40e:	4905      	ldr	r1, [pc, #20]	; (800b424 <ull_configuretxrf+0x2c>)
 800b410:	4628      	mov	r0, r5
 800b412:	f7ff f9a1 	bl	800a758 <dwt_write32bitoffsetreg>
 800b416:	bd38      	pop	{r3, r4, r5, pc}
 800b418:	7823      	ldrb	r3, [r4, #0]
 800b41a:	2200      	movs	r2, #0
 800b41c:	4902      	ldr	r1, [pc, #8]	; (800b428 <ull_configuretxrf+0x30>)
 800b41e:	f7ff fb29 	bl	800aa74 <dwt_write8bitoffsetreg>
 800b422:	e7f1      	b.n	800b408 <ull_configuretxrf+0x10>
 800b424:	00010004 	.word	0x00010004
 800b428:	0007001c 	.word	0x0007001c

0800b42c <ull_repeated_frames>:
 800b42c:	b530      	push	{r4, r5, lr}
 800b42e:	b083      	sub	sp, #12
 800b430:	4604      	mov	r4, r0
 800b432:	460d      	mov	r5, r1
 800b434:	2310      	movs	r3, #16
 800b436:	9300      	str	r3, [sp, #0]
 800b438:	23ff      	movs	r3, #255	; 0xff
 800b43a:	2200      	movs	r2, #0
 800b43c:	4906      	ldr	r1, [pc, #24]	; (800b458 <ull_repeated_frames+0x2c>)
 800b43e:	f7ff ff4f 	bl	800b2e0 <dwt_modify8bitoffsetreg>
 800b442:	462b      	mov	r3, r5
 800b444:	2d02      	cmp	r5, #2
 800b446:	bf38      	it	cc
 800b448:	2302      	movcc	r3, #2
 800b44a:	2200      	movs	r2, #0
 800b44c:	2128      	movs	r1, #40	; 0x28
 800b44e:	4620      	mov	r0, r4
 800b450:	f7ff f982 	bl	800a758 <dwt_write32bitoffsetreg>
 800b454:	b003      	add	sp, #12
 800b456:	bd30      	pop	{r4, r5, pc}
 800b458:	000f0028 	.word	0x000f0028

0800b45c <ull_setdwstate>:
 800b45c:	b530      	push	{r4, r5, lr}
 800b45e:	b083      	sub	sp, #12
 800b460:	4604      	mov	r4, r0
 800b462:	2901      	cmp	r1, #1
 800b464:	d01d      	beq.n	800b4a2 <ull_setdwstate+0x46>
 800b466:	2902      	cmp	r1, #2
 800b468:	d02f      	beq.n	800b4ca <ull_setdwstate+0x6e>
 800b46a:	2301      	movs	r3, #1
 800b46c:	9300      	str	r3, [sp, #0]
 800b46e:	23ff      	movs	r3, #255	; 0xff
 800b470:	2200      	movs	r2, #0
 800b472:	4925      	ldr	r1, [pc, #148]	; (800b508 <ull_setdwstate+0xac>)
 800b474:	f7ff ff34 	bl	800b2e0 <dwt_modify8bitoffsetreg>
 800b478:	4d24      	ldr	r5, [pc, #144]	; (800b50c <ull_setdwstate+0xb0>)
 800b47a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b47e:	9300      	str	r3, [sp, #0]
 800b480:	f46f 7380 	mvn.w	r3, #256	; 0x100
 800b484:	2200      	movs	r2, #0
 800b486:	4629      	mov	r1, r5
 800b488:	4620      	mov	r0, r4
 800b48a:	f7ff fdb7 	bl	800affc <dwt_modify32bitoffsetreg>
 800b48e:	2300      	movs	r3, #0
 800b490:	9300      	str	r3, [sp, #0]
 800b492:	237f      	movs	r3, #127	; 0x7f
 800b494:	2202      	movs	r2, #2
 800b496:	4629      	mov	r1, r5
 800b498:	4620      	mov	r0, r4
 800b49a:	f7ff ff21 	bl	800b2e0 <dwt_modify8bitoffsetreg>
 800b49e:	b003      	add	sp, #12
 800b4a0:	bd30      	pop	{r4, r5, pc}
 800b4a2:	2105      	movs	r1, #5
 800b4a4:	f7ff f90c 	bl	800a6c0 <ull_force_clocks>
 800b4a8:	2302      	movs	r3, #2
 800b4aa:	9300      	str	r3, [sp, #0]
 800b4ac:	f04f 33ff 	mov.w	r3, #4294967295
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	4917      	ldr	r1, [pc, #92]	; (800b510 <ull_setdwstate+0xb4>)
 800b4b4:	4620      	mov	r0, r4
 800b4b6:	f7ff fda1 	bl	800affc <dwt_modify32bitoffsetreg>
 800b4ba:	2201      	movs	r2, #1
 800b4bc:	9200      	str	r2, [sp, #0]
 800b4be:	23ff      	movs	r3, #255	; 0xff
 800b4c0:	4912      	ldr	r1, [pc, #72]	; (800b50c <ull_setdwstate+0xb0>)
 800b4c2:	4620      	mov	r0, r4
 800b4c4:	f7ff ff0c 	bl	800b2e0 <dwt_modify8bitoffsetreg>
 800b4c8:	e7e9      	b.n	800b49e <ull_setdwstate+0x42>
 800b4ca:	2303      	movs	r3, #3
 800b4cc:	9300      	str	r3, [sp, #0]
 800b4ce:	23ff      	movs	r3, #255	; 0xff
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	490d      	ldr	r1, [pc, #52]	; (800b508 <ull_setdwstate+0xac>)
 800b4d4:	f7ff ff04 	bl	800b2e0 <dwt_modify8bitoffsetreg>
 800b4d8:	4d0c      	ldr	r5, [pc, #48]	; (800b50c <ull_setdwstate+0xb0>)
 800b4da:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b4de:	9300      	str	r3, [sp, #0]
 800b4e0:	f46f 7380 	mvn.w	r3, #256	; 0x100
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	4629      	mov	r1, r5
 800b4e8:	4620      	mov	r0, r4
 800b4ea:	f7ff fd87 	bl	800affc <dwt_modify32bitoffsetreg>
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	9300      	str	r3, [sp, #0]
 800b4f2:	237f      	movs	r3, #127	; 0x7f
 800b4f4:	2202      	movs	r2, #2
 800b4f6:	4629      	mov	r1, r5
 800b4f8:	4620      	mov	r0, r4
 800b4fa:	f7ff fef1 	bl	800b2e0 <dwt_modify8bitoffsetreg>
 800b4fe:	2105      	movs	r1, #5
 800b500:	4620      	mov	r0, r4
 800b502:	f7ff f8dd 	bl	800a6c0 <ull_force_clocks>
 800b506:	e7ca      	b.n	800b49e <ull_setdwstate+0x42>
 800b508:	00110004 	.word	0x00110004
 800b50c:	00110008 	.word	0x00110008
 800b510:	00090008 	.word	0x00090008

0800b514 <ull_configureframefilter>:
 800b514:	b530      	push	{r4, r5, lr}
 800b516:	b083      	sub	sp, #12
 800b518:	4605      	mov	r5, r0
 800b51a:	2902      	cmp	r1, #2
 800b51c:	d00e      	beq.n	800b53c <ull_configureframefilter+0x28>
 800b51e:	2400      	movs	r4, #0
 800b520:	9400      	str	r4, [sp, #0]
 800b522:	23fe      	movs	r3, #254	; 0xfe
 800b524:	4622      	mov	r2, r4
 800b526:	2110      	movs	r1, #16
 800b528:	f7ff feda 	bl	800b2e0 <dwt_modify8bitoffsetreg>
 800b52c:	4623      	mov	r3, r4
 800b52e:	4622      	mov	r2, r4
 800b530:	2114      	movs	r1, #20
 800b532:	4628      	mov	r0, r5
 800b534:	f7ff f8b3 	bl	800a69e <dwt_write16bitoffsetreg>
 800b538:	b003      	add	sp, #12
 800b53a:	bd30      	pop	{r4, r5, pc}
 800b53c:	4614      	mov	r4, r2
 800b53e:	2301      	movs	r3, #1
 800b540:	9300      	str	r3, [sp, #0]
 800b542:	23ff      	movs	r3, #255	; 0xff
 800b544:	2200      	movs	r2, #0
 800b546:	2110      	movs	r1, #16
 800b548:	f7ff feca 	bl	800b2e0 <dwt_modify8bitoffsetreg>
 800b54c:	4623      	mov	r3, r4
 800b54e:	2200      	movs	r2, #0
 800b550:	2114      	movs	r1, #20
 800b552:	4628      	mov	r0, r5
 800b554:	f7ff f8a3 	bl	800a69e <dwt_write16bitoffsetreg>
 800b558:	e7ee      	b.n	800b538 <ull_configureframefilter+0x24>
	...

0800b55c <ull_run_pgfcal>:
 800b55c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b560:	b082      	sub	sp, #8
 800b562:	4605      	mov	r5, r0
 800b564:	4c29      	ldr	r4, [pc, #164]	; (800b60c <ull_run_pgfcal+0xb0>)
 800b566:	4b2a      	ldr	r3, [pc, #168]	; (800b610 <ull_run_pgfcal+0xb4>)
 800b568:	2200      	movs	r2, #0
 800b56a:	4621      	mov	r1, r4
 800b56c:	f7ff f8f4 	bl	800a758 <dwt_write32bitoffsetreg>
 800b570:	2310      	movs	r3, #16
 800b572:	9300      	str	r3, [sp, #0]
 800b574:	23ff      	movs	r3, #255	; 0xff
 800b576:	2200      	movs	r2, #0
 800b578:	4621      	mov	r1, r4
 800b57a:	4628      	mov	r0, r5
 800b57c:	f7ff feb0 	bl	800b2e0 <dwt_modify8bitoffsetreg>
 800b580:	2403      	movs	r4, #3
 800b582:	f04f 0814 	mov.w	r8, #20
 800b586:	4f23      	ldr	r7, [pc, #140]	; (800b614 <ull_run_pgfcal+0xb8>)
 800b588:	2600      	movs	r6, #0
 800b58a:	4640      	mov	r0, r8
 800b58c:	f7f4 ffc9 	bl	8000522 <deca_usleep>
 800b590:	4632      	mov	r2, r6
 800b592:	4639      	mov	r1, r7
 800b594:	4628      	mov	r0, r5
 800b596:	f7fe fc92 	bl	8009ebe <dwt_read8bitoffsetreg>
 800b59a:	2801      	cmp	r0, #1
 800b59c:	d034      	beq.n	800b608 <ull_run_pgfcal+0xac>
 800b59e:	1e63      	subs	r3, r4, #1
 800b5a0:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 800b5a4:	d1f1      	bne.n	800b58a <ull_run_pgfcal+0x2e>
 800b5a6:	f06f 0402 	mvn.w	r4, #2
 800b5aa:	4e18      	ldr	r6, [pc, #96]	; (800b60c <ull_run_pgfcal+0xb0>)
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	461a      	mov	r2, r3
 800b5b0:	4631      	mov	r1, r6
 800b5b2:	4628      	mov	r0, r5
 800b5b4:	f7ff fa5e 	bl	800aa74 <dwt_write8bitoffsetreg>
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	4915      	ldr	r1, [pc, #84]	; (800b614 <ull_run_pgfcal+0xb8>)
 800b5be:	4628      	mov	r0, r5
 800b5c0:	f7ff fa58 	bl	800aa74 <dwt_write8bitoffsetreg>
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	9300      	str	r3, [sp, #0]
 800b5c8:	23ff      	movs	r3, #255	; 0xff
 800b5ca:	2202      	movs	r2, #2
 800b5cc:	4631      	mov	r1, r6
 800b5ce:	4628      	mov	r0, r5
 800b5d0:	f7ff fe86 	bl	800b2e0 <dwt_modify8bitoffsetreg>
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	4910      	ldr	r1, [pc, #64]	; (800b618 <ull_run_pgfcal+0xbc>)
 800b5d8:	4628      	mov	r0, r5
 800b5da:	f7fe fc48 	bl	8009e6e <dwt_read32bitoffsetreg>
 800b5de:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800b5e2:	4298      	cmp	r0, r3
 800b5e4:	bf08      	it	eq
 800b5e6:	f06f 0403 	mvneq.w	r4, #3
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	490b      	ldr	r1, [pc, #44]	; (800b61c <ull_run_pgfcal+0xc0>)
 800b5ee:	4628      	mov	r0, r5
 800b5f0:	f7fe fc3d 	bl	8009e6e <dwt_read32bitoffsetreg>
 800b5f4:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800b5f8:	4298      	cmp	r0, r3
 800b5fa:	bf14      	ite	ne
 800b5fc:	4620      	movne	r0, r4
 800b5fe:	f06f 0004 	mvneq.w	r0, #4
 800b602:	b002      	add	sp, #8
 800b604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b608:	2400      	movs	r4, #0
 800b60a:	e7ce      	b.n	800b5aa <ull_run_pgfcal+0x4e>
 800b60c:	0004000c 	.word	0x0004000c
 800b610:	00020001 	.word	0x00020001
 800b614:	00040020 	.word	0x00040020
 800b618:	00040014 	.word	0x00040014
 800b61c:	0004001c 	.word	0x0004001c

0800b620 <ull_setinterrupt>:
 800b620:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b624:	b083      	sub	sp, #12
 800b626:	4605      	mov	r5, r0
 800b628:	4688      	mov	r8, r1
 800b62a:	4617      	mov	r7, r2
 800b62c:	461c      	mov	r4, r3
 800b62e:	f7f4 ff4f 	bl	80004d0 <decamutexon>
 800b632:	4606      	mov	r6, r0
 800b634:	2c02      	cmp	r4, #2
 800b636:	d019      	beq.n	800b66c <ull_setinterrupt+0x4c>
 800b638:	2c04      	cmp	r4, #4
 800b63a:	d017      	beq.n	800b66c <ull_setinterrupt+0x4c>
 800b63c:	f004 03fd 	and.w	r3, r4, #253	; 0xfd
 800b640:	2b01      	cmp	r3, #1
 800b642:	d03f      	beq.n	800b6c4 <ull_setinterrupt+0xa4>
 800b644:	f04f 0900 	mov.w	r9, #0
 800b648:	f8cd 9000 	str.w	r9, [sp]
 800b64c:	ea6f 0308 	mvn.w	r3, r8
 800b650:	464a      	mov	r2, r9
 800b652:	213c      	movs	r1, #60	; 0x3c
 800b654:	4628      	mov	r0, r5
 800b656:	f7ff fcd1 	bl	800affc <dwt_modify32bitoffsetreg>
 800b65a:	f8cd 9000 	str.w	r9, [sp]
 800b65e:	43fb      	mvns	r3, r7
 800b660:	464a      	mov	r2, r9
 800b662:	2140      	movs	r1, #64	; 0x40
 800b664:	4628      	mov	r0, r5
 800b666:	f7ff fcc9 	bl	800affc <dwt_modify32bitoffsetreg>
 800b66a:	e00b      	b.n	800b684 <ull_setinterrupt+0x64>
 800b66c:	4643      	mov	r3, r8
 800b66e:	2200      	movs	r2, #0
 800b670:	213c      	movs	r1, #60	; 0x3c
 800b672:	4628      	mov	r0, r5
 800b674:	f7ff f870 	bl	800a758 <dwt_write32bitoffsetreg>
 800b678:	463b      	mov	r3, r7
 800b67a:	2200      	movs	r2, #0
 800b67c:	2140      	movs	r1, #64	; 0x40
 800b67e:	4628      	mov	r0, r5
 800b680:	f7ff f86a 	bl	800a758 <dwt_write32bitoffsetreg>
 800b684:	3c03      	subs	r4, #3
 800b686:	b2e4      	uxtb	r4, r4
 800b688:	2c01      	cmp	r4, #1
 800b68a:	d92d      	bls.n	800b6e8 <ull_setinterrupt+0xc8>
 800b68c:	2200      	movs	r2, #0
 800b68e:	213c      	movs	r1, #60	; 0x3c
 800b690:	4628      	mov	r0, r5
 800b692:	f7fe fbec 	bl	8009e6e <dwt_read32bitoffsetreg>
 800b696:	4603      	mov	r3, r0
 800b698:	2200      	movs	r2, #0
 800b69a:	2144      	movs	r1, #68	; 0x44
 800b69c:	4628      	mov	r0, r5
 800b69e:	f7ff f85b 	bl	800a758 <dwt_write32bitoffsetreg>
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	2140      	movs	r1, #64	; 0x40
 800b6a6:	4628      	mov	r0, r5
 800b6a8:	f7fe fbe1 	bl	8009e6e <dwt_read32bitoffsetreg>
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	2148      	movs	r1, #72	; 0x48
 800b6b2:	4628      	mov	r0, r5
 800b6b4:	f7ff f850 	bl	800a758 <dwt_write32bitoffsetreg>
 800b6b8:	4630      	mov	r0, r6
 800b6ba:	f7f4 ff1a 	bl	80004f2 <decamutexoff>
 800b6be:	b003      	add	sp, #12
 800b6c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b6c4:	f8cd 8000 	str.w	r8, [sp]
 800b6c8:	f04f 33ff 	mov.w	r3, #4294967295
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	213c      	movs	r1, #60	; 0x3c
 800b6d0:	4628      	mov	r0, r5
 800b6d2:	f7ff fc93 	bl	800affc <dwt_modify32bitoffsetreg>
 800b6d6:	9700      	str	r7, [sp, #0]
 800b6d8:	f04f 33ff 	mov.w	r3, #4294967295
 800b6dc:	2200      	movs	r2, #0
 800b6de:	2140      	movs	r1, #64	; 0x40
 800b6e0:	4628      	mov	r0, r5
 800b6e2:	f7ff fc8b 	bl	800affc <dwt_modify32bitoffsetreg>
 800b6e6:	e7cd      	b.n	800b684 <ull_setinterrupt+0x64>
 800b6e8:	2110      	movs	r1, #16
 800b6ea:	9100      	str	r1, [sp, #0]
 800b6ec:	23ff      	movs	r3, #255	; 0xff
 800b6ee:	2202      	movs	r2, #2
 800b6f0:	4628      	mov	r0, r5
 800b6f2:	f7ff fdf5 	bl	800b2e0 <dwt_modify8bitoffsetreg>
 800b6f6:	e7c9      	b.n	800b68c <ull_setinterrupt+0x6c>

0800b6f8 <prs_ack_enable>:
 800b6f8:	b500      	push	{lr}
 800b6fa:	b083      	sub	sp, #12
 800b6fc:	2900      	cmp	r1, #0
 800b6fe:	bf0b      	itete	eq
 800b700:	23ff      	moveq	r3, #255	; 0xff
 800b702:	23f7      	movne	r3, #247	; 0xf7
 800b704:	2200      	moveq	r2, #0
 800b706:	2208      	movne	r2, #8
 800b708:	9200      	str	r2, [sp, #0]
 800b70a:	2201      	movs	r2, #1
 800b70c:	2110      	movs	r1, #16
 800b70e:	f7ff fde7 	bl	800b2e0 <dwt_modify8bitoffsetreg>
 800b712:	b003      	add	sp, #12
 800b714:	f85d fb04 	ldr.w	pc, [sp], #4

0800b718 <dwt_modify16bitoffsetreg>:
 800b718:	b510      	push	{r4, lr}
 800b71a:	b084      	sub	sp, #16
 800b71c:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 800b720:	f88d 300c 	strb.w	r3, [sp, #12]
 800b724:	0a1b      	lsrs	r3, r3, #8
 800b726:	f88d 300d 	strb.w	r3, [sp, #13]
 800b72a:	f88d 400e 	strb.w	r4, [sp, #14]
 800b72e:	0a24      	lsrs	r4, r4, #8
 800b730:	f88d 400f 	strb.w	r4, [sp, #15]
 800b734:	f248 0302 	movw	r3, #32770	; 0x8002
 800b738:	9301      	str	r3, [sp, #4]
 800b73a:	ab03      	add	r3, sp, #12
 800b73c:	9300      	str	r3, [sp, #0]
 800b73e:	2304      	movs	r3, #4
 800b740:	b292      	uxth	r2, r2
 800b742:	f7fe fb0c 	bl	8009d5e <dwt_xfer3xxx>
 800b746:	b004      	add	sp, #16
 800b748:	bd10      	pop	{r4, pc}
	...

0800b74c <ull_setleds>:
 800b74c:	b530      	push	{r4, r5, lr}
 800b74e:	b083      	sub	sp, #12
 800b750:	4604      	mov	r4, r0
 800b752:	f011 0f01 	tst.w	r1, #1
 800b756:	d01f      	beq.n	800b798 <ull_setleds+0x4c>
 800b758:	460d      	mov	r5, r1
 800b75a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800b75e:	9300      	str	r3, [sp, #0]
 800b760:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 800b764:	2200      	movs	r2, #0
 800b766:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800b76a:	f7ff fc47 	bl	800affc <dwt_modify32bitoffsetreg>
 800b76e:	f44f 0304 	mov.w	r3, #8650752	; 0x840000
 800b772:	9300      	str	r3, [sp, #0]
 800b774:	f04f 33ff 	mov.w	r3, #4294967295
 800b778:	2200      	movs	r2, #0
 800b77a:	4918      	ldr	r1, [pc, #96]	; (800b7dc <ull_setleds+0x90>)
 800b77c:	4620      	mov	r0, r4
 800b77e:	f7ff fc3d 	bl	800affc <dwt_modify32bitoffsetreg>
 800b782:	f015 0f02 	tst.w	r5, #2
 800b786:	d11a      	bne.n	800b7be <ull_setleds+0x72>
 800b788:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b78c:	2200      	movs	r2, #0
 800b78e:	4914      	ldr	r1, [pc, #80]	; (800b7e0 <ull_setleds+0x94>)
 800b790:	4620      	mov	r0, r4
 800b792:	f7fe ffe1 	bl	800a758 <dwt_write32bitoffsetreg>
 800b796:	e010      	b.n	800b7ba <ull_setleds+0x6e>
 800b798:	2500      	movs	r5, #0
 800b79a:	9500      	str	r5, [sp, #0]
 800b79c:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 800b7a0:	462a      	mov	r2, r5
 800b7a2:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800b7a6:	f7ff fc29 	bl	800affc <dwt_modify32bitoffsetreg>
 800b7aa:	9500      	str	r5, [sp, #0]
 800b7ac:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800b7b0:	462a      	mov	r2, r5
 800b7b2:	490b      	ldr	r1, [pc, #44]	; (800b7e0 <ull_setleds+0x94>)
 800b7b4:	4620      	mov	r0, r4
 800b7b6:	f7ff ffaf 	bl	800b718 <dwt_modify16bitoffsetreg>
 800b7ba:	b003      	add	sp, #12
 800b7bc:	bd30      	pop	{r4, r5, pc}
 800b7be:	4d08      	ldr	r5, [pc, #32]	; (800b7e0 <ull_setleds+0x94>)
 800b7c0:	4b08      	ldr	r3, [pc, #32]	; (800b7e4 <ull_setleds+0x98>)
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	4629      	mov	r1, r5
 800b7c6:	4620      	mov	r0, r4
 800b7c8:	f7fe ffc6 	bl	800a758 <dwt_write32bitoffsetreg>
 800b7cc:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	4629      	mov	r1, r5
 800b7d4:	4620      	mov	r0, r4
 800b7d6:	f7fe ffbf 	bl	800a758 <dwt_write32bitoffsetreg>
 800b7da:	e7ee      	b.n	800b7ba <ull_setleds+0x6e>
 800b7dc:	00110004 	.word	0x00110004
 800b7e0:	00110018 	.word	0x00110018
 800b7e4:	000f0110 	.word	0x000f0110

0800b7e8 <ull_pgf_cal>:
 800b7e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7ea:	b083      	sub	sp, #12
 800b7ec:	4604      	mov	r4, r0
 800b7ee:	2901      	cmp	r1, #1
 800b7f0:	d009      	beq.n	800b806 <ull_pgf_cal+0x1e>
 800b7f2:	2014      	movs	r0, #20
 800b7f4:	f7f4 fe95 	bl	8000522 <deca_usleep>
 800b7f8:	4620      	mov	r0, r4
 800b7fa:	f7ff feaf 	bl	800b55c <ull_run_pgfcal>
 800b7fe:	4605      	mov	r5, r0
 800b800:	4628      	mov	r0, r5
 800b802:	b003      	add	sp, #12
 800b804:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b806:	4e0f      	ldr	r6, [pc, #60]	; (800b844 <ull_pgf_cal+0x5c>)
 800b808:	2200      	movs	r2, #0
 800b80a:	4631      	mov	r1, r6
 800b80c:	f7fe fb45 	bl	8009e9a <dwt_read16bitoffsetreg>
 800b810:	4607      	mov	r7, r0
 800b812:	f240 1307 	movw	r3, #263	; 0x107
 800b816:	9300      	str	r3, [sp, #0]
 800b818:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b81c:	2200      	movs	r2, #0
 800b81e:	4631      	mov	r1, r6
 800b820:	4620      	mov	r0, r4
 800b822:	f7ff ff79 	bl	800b718 <dwt_modify16bitoffsetreg>
 800b826:	2014      	movs	r0, #20
 800b828:	f7f4 fe7b 	bl	8000522 <deca_usleep>
 800b82c:	4620      	mov	r0, r4
 800b82e:	f7ff fe95 	bl	800b55c <ull_run_pgfcal>
 800b832:	4605      	mov	r5, r0
 800b834:	2200      	movs	r2, #0
 800b836:	9200      	str	r2, [sp, #0]
 800b838:	463b      	mov	r3, r7
 800b83a:	4631      	mov	r1, r6
 800b83c:	4620      	mov	r0, r4
 800b83e:	f7ff ff6b 	bl	800b718 <dwt_modify16bitoffsetreg>
 800b842:	e7dd      	b.n	800b800 <ull_pgf_cal+0x18>
 800b844:	00070048 	.word	0x00070048

0800b848 <ull_setgpiovalue>:
 800b848:	b500      	push	{lr}
 800b84a:	b083      	sub	sp, #12
 800b84c:	2a01      	cmp	r2, #1
 800b84e:	d009      	beq.n	800b864 <ull_setgpiovalue+0x1c>
 800b850:	43cb      	mvns	r3, r1
 800b852:	2200      	movs	r2, #0
 800b854:	9200      	str	r2, [sp, #0]
 800b856:	b29b      	uxth	r3, r3
 800b858:	4906      	ldr	r1, [pc, #24]	; (800b874 <ull_setgpiovalue+0x2c>)
 800b85a:	f7ff ff5d 	bl	800b718 <dwt_modify16bitoffsetreg>
 800b85e:	b003      	add	sp, #12
 800b860:	f85d fb04 	ldr.w	pc, [sp], #4
 800b864:	9100      	str	r1, [sp, #0]
 800b866:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b86a:	2200      	movs	r2, #0
 800b86c:	4901      	ldr	r1, [pc, #4]	; (800b874 <ull_setgpiovalue+0x2c>)
 800b86e:	f7ff ff53 	bl	800b718 <dwt_modify16bitoffsetreg>
 800b872:	e7f4      	b.n	800b85e <ull_setgpiovalue+0x16>
 800b874:	0005000c 	.word	0x0005000c

0800b878 <ull_readaccdata>:
 800b878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b87a:	b083      	sub	sp, #12
 800b87c:	4604      	mov	r4, r0
 800b87e:	460f      	mov	r7, r1
 800b880:	4616      	mov	r6, r2
 800b882:	461d      	mov	r5, r3
 800b884:	f248 0340 	movw	r3, #32832	; 0x8040
 800b888:	9300      	str	r3, [sp, #0]
 800b88a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b88e:	2200      	movs	r2, #0
 800b890:	4918      	ldr	r1, [pc, #96]	; (800b8f4 <ull_readaccdata+0x7c>)
 800b892:	f7ff ff41 	bl	800b718 <dwt_modify16bitoffsetreg>
 800b896:	19aa      	adds	r2, r5, r6
 800b898:	f243 0301 	movw	r3, #12289	; 0x3001
 800b89c:	429a      	cmp	r2, r3
 800b89e:	dc15      	bgt.n	800b8cc <ull_readaccdata+0x54>
 800b8a0:	2d7f      	cmp	r5, #127	; 0x7f
 800b8a2:	d91d      	bls.n	800b8e0 <ull_readaccdata+0x68>
 800b8a4:	2315      	movs	r3, #21
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	4913      	ldr	r1, [pc, #76]	; (800b8f8 <ull_readaccdata+0x80>)
 800b8aa:	4620      	mov	r0, r4
 800b8ac:	f7fe ff54 	bl	800a758 <dwt_write32bitoffsetreg>
 800b8b0:	462b      	mov	r3, r5
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	4911      	ldr	r1, [pc, #68]	; (800b8fc <ull_readaccdata+0x84>)
 800b8b6:	4620      	mov	r0, r4
 800b8b8:	f7fe ff4e 	bl	800a758 <dwt_write32bitoffsetreg>
 800b8bc:	9700      	str	r7, [sp, #0]
 800b8be:	4633      	mov	r3, r6
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800b8c6:	4620      	mov	r0, r4
 800b8c8:	f7fe fac7 	bl	8009e5a <dwt_readfromdevice>
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	9200      	str	r2, [sp, #0]
 800b8d0:	f647 73bf 	movw	r3, #32703	; 0x7fbf
 800b8d4:	4907      	ldr	r1, [pc, #28]	; (800b8f4 <ull_readaccdata+0x7c>)
 800b8d6:	4620      	mov	r0, r4
 800b8d8:	f7ff ff1e 	bl	800b718 <dwt_modify16bitoffsetreg>
 800b8dc:	b003      	add	sp, #12
 800b8de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8e0:	9700      	str	r7, [sp, #0]
 800b8e2:	4633      	mov	r3, r6
 800b8e4:	462a      	mov	r2, r5
 800b8e6:	f44f 11a8 	mov.w	r1, #1376256	; 0x150000
 800b8ea:	4620      	mov	r0, r4
 800b8ec:	f7fe fab5 	bl	8009e5a <dwt_readfromdevice>
 800b8f0:	e7ec      	b.n	800b8cc <ull_readaccdata+0x54>
 800b8f2:	bf00      	nop
 800b8f4:	00110004 	.word	0x00110004
 800b8f8:	001f0004 	.word	0x001f0004
 800b8fc:	001f0008 	.word	0x001f0008

0800b900 <ull_repeated_cw>:
 800b900:	b570      	push	{r4, r5, r6, lr}
 800b902:	4606      	mov	r6, r0
 800b904:	460c      	mov	r4, r1
 800b906:	4615      	mov	r5, r2
 800b908:	4b0e      	ldr	r3, [pc, #56]	; (800b944 <ull_repeated_cw+0x44>)
 800b90a:	2202      	movs	r2, #2
 800b90c:	490e      	ldr	r1, [pc, #56]	; (800b948 <ull_repeated_cw+0x48>)
 800b90e:	f7fe ff23 	bl	800a758 <dwt_write32bitoffsetreg>
 800b912:	2d0f      	cmp	r5, #15
 800b914:	bfa8      	it	ge
 800b916:	250f      	movge	r5, #15
 800b918:	1e63      	subs	r3, r4, #1
 800b91a:	2b03      	cmp	r3, #3
 800b91c:	bf28      	it	cs
 800b91e:	2404      	movcs	r4, #4
 800b920:	2310      	movs	r3, #16
 800b922:	4123      	asrs	r3, r4
 800b924:	2200      	movs	r2, #0
 800b926:	4909      	ldr	r1, [pc, #36]	; (800b94c <ull_repeated_cw+0x4c>)
 800b928:	4630      	mov	r0, r6
 800b92a:	f7fe ff15 	bl	800a758 <dwt_write32bitoffsetreg>
 800b92e:	1e63      	subs	r3, r4, #1
 800b930:	009b      	lsls	r3, r3, #2
 800b932:	fa05 f303 	lsl.w	r3, r5, r3
 800b936:	2200      	movs	r2, #0
 800b938:	4905      	ldr	r1, [pc, #20]	; (800b950 <ull_repeated_cw+0x50>)
 800b93a:	4630      	mov	r0, r6
 800b93c:	f7fe ff0c 	bl	800a758 <dwt_write32bitoffsetreg>
 800b940:	bd70      	pop	{r4, r5, r6, pc}
 800b942:	bf00      	nop
 800b944:	00d20874 	.word	0x00d20874
 800b948:	00110010 	.word	0x00110010
 800b94c:	00070028 	.word	0x00070028
 800b950:	00080018 	.word	0x00080018

0800b954 <ull_configure>:
 800b954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b958:	b083      	sub	sp, #12
 800b95a:	4604      	mov	r4, r0
 800b95c:	460d      	mov	r5, r1
 800b95e:	f891 9000 	ldrb.w	r9, [r1]
 800b962:	790b      	ldrb	r3, [r1, #4]
 800b964:	2b18      	cmp	r3, #24
 800b966:	d814      	bhi.n	800b992 <ull_configure+0x3e>
 800b968:	78cf      	ldrb	r7, [r1, #3]
 800b96a:	2f18      	cmp	r7, #24
 800b96c:	bf94      	ite	ls
 800b96e:	2700      	movls	r7, #0
 800b970:	2701      	movhi	r7, #1
 800b972:	b2ff      	uxtb	r7, r7
 800b974:	79eb      	ldrb	r3, [r5, #7]
 800b976:	2b01      	cmp	r3, #1
 800b978:	bf0c      	ite	eq
 800b97a:	2110      	moveq	r1, #16
 800b97c:	2100      	movne	r1, #0
 800b97e:	786b      	ldrb	r3, [r5, #1]
 800b980:	3b01      	subs	r3, #1
 800b982:	2b06      	cmp	r3, #6
 800b984:	d810      	bhi.n	800b9a8 <ull_configure+0x54>
 800b986:	e8df f003 	tbb	[pc, r3]
 800b98a:	0f06      	.short	0x0f06
 800b98c:	0f0c120f 	.word	0x0f0c120f
 800b990:	09          	.byte	0x09
 800b991:	00          	.byte	0x00
 800b992:	2701      	movs	r7, #1
 800b994:	e7ed      	b.n	800b972 <ull_configure+0x1e>
 800b996:	f04f 0a40 	mov.w	sl, #64	; 0x40
 800b99a:	e00a      	b.n	800b9b2 <ull_configure+0x5e>
 800b99c:	f04f 0a48 	mov.w	sl, #72	; 0x48
 800b9a0:	e007      	b.n	800b9b2 <ull_configure+0x5e>
 800b9a2:	f04f 0a80 	mov.w	sl, #128	; 0x80
 800b9a6:	e004      	b.n	800b9b2 <ull_configure+0x5e>
 800b9a8:	f44f 7a80 	mov.w	sl, #256	; 0x100
 800b9ac:	e001      	b.n	800b9b2 <ull_configure+0x5e>
 800b9ae:	f04f 0a20 	mov.w	sl, #32
 800b9b2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800b9b4:	8a13      	ldrh	r3, [r2, #16]
 800b9b6:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800b9ba:	8213      	strh	r3, [r2, #16]
 800b9bc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800b9be:	79ea      	ldrb	r2, [r5, #7]
 800b9c0:	72da      	strb	r2, [r3, #11]
 800b9c2:	7b2e      	ldrb	r6, [r5, #12]
 800b9c4:	1cb3      	adds	r3, r6, #2
 800b9c6:	2601      	movs	r6, #1
 800b9c8:	409e      	lsls	r6, r3
 800b9ca:	fa1f f886 	uxth.w	r8, r6
 800b9ce:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800b9d0:	4bca      	ldr	r3, [pc, #808]	; (800bcfc <ull_configure+0x3a8>)
 800b9d2:	fb03 f308 	mul.w	r3, r3, r8
 800b9d6:	0bdb      	lsrs	r3, r3, #15
 800b9d8:	8253      	strh	r3, [r2, #18]
 800b9da:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800b9dc:	7aea      	ldrb	r2, [r5, #11]
 800b9de:	755a      	strb	r2, [r3, #21]
 800b9e0:	7a2b      	ldrb	r3, [r5, #8]
 800b9e2:	015b      	lsls	r3, r3, #5
 800b9e4:	f003 0320 	and.w	r3, r3, #32
 800b9e8:	7b6a      	ldrb	r2, [r5, #13]
 800b9ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b9ee:	7aea      	ldrb	r2, [r5, #11]
 800b9f0:	0312      	lsls	r2, r2, #12
 800b9f2:	f402 4230 	and.w	r2, r2, #45056	; 0xb000
 800b9f6:	4313      	orrs	r3, r2
 800b9f8:	430b      	orrs	r3, r1
 800b9fa:	9300      	str	r3, [sp, #0]
 800b9fc:	4bc0      	ldr	r3, [pc, #768]	; (800bd00 <ull_configure+0x3ac>)
 800b9fe:	2200      	movs	r2, #0
 800ba00:	2110      	movs	r1, #16
 800ba02:	4620      	mov	r0, r4
 800ba04:	f7ff fafa 	bl	800affc <dwt_modify32bitoffsetreg>
 800ba08:	2f00      	cmp	r7, #0
 800ba0a:	f040 80fc 	bne.w	800bc06 <ull_configure+0x2b2>
 800ba0e:	7aeb      	ldrb	r3, [r5, #11]
 800ba10:	b1f3      	cbz	r3, 800ba50 <ull_configure+0xfc>
 800ba12:	7b6b      	ldrb	r3, [r5, #13]
 800ba14:	2b01      	cmp	r3, #1
 800ba16:	f240 8121 	bls.w	800bc5c <ull_configure+0x308>
 800ba1a:	7b2a      	ldrb	r2, [r5, #12]
 800ba1c:	4bb9      	ldr	r3, [pc, #740]	; (800bd04 <ull_configure+0x3b0>)
 800ba1e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800ba22:	0112      	lsls	r2, r2, #4
 800ba24:	0ad3      	lsrs	r3, r2, #11
 800ba26:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800ba2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ba2e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800ba32:	bf28      	it	cs
 800ba34:	3301      	addcs	r3, #1
 800ba36:	b29b      	uxth	r3, r3
 800ba38:	eb0a 0ac8 	add.w	sl, sl, r8, lsl #3
 800ba3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba40:	9300      	str	r3, [sp, #0]
 800ba42:	f64f 7380 	movw	r3, #65408	; 0xff80
 800ba46:	2202      	movs	r2, #2
 800ba48:	49af      	ldr	r1, [pc, #700]	; (800bd08 <ull_configure+0x3b4>)
 800ba4a:	4620      	mov	r0, r4
 800ba4c:	f7ff fe64 	bl	800b718 <dwt_modify16bitoffsetreg>
 800ba50:	2394      	movs	r3, #148	; 0x94
 800ba52:	9300      	str	r3, [sp, #0]
 800ba54:	4bad      	ldr	r3, [pc, #692]	; (800bd0c <ull_configure+0x3b8>)
 800ba56:	2200      	movs	r2, #0
 800ba58:	49ad      	ldr	r1, [pc, #692]	; (800bd10 <ull_configure+0x3bc>)
 800ba5a:	4620      	mov	r0, r4
 800ba5c:	f7ff face 	bl	800affc <dwt_modify32bitoffsetreg>
 800ba60:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800ba64:	f340 810d 	ble.w	800bc82 <ull_configure+0x32e>
 800ba68:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800ba6a:	8a13      	ldrh	r3, [r2, #16]
 800ba6c:	f043 0320 	orr.w	r3, r3, #32
 800ba70:	8213      	strh	r3, [r2, #16]
 800ba72:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ba76:	9300      	str	r3, [sp, #0]
 800ba78:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	49a5      	ldr	r1, [pc, #660]	; (800bd14 <ull_configure+0x3c0>)
 800ba80:	4620      	mov	r0, r4
 800ba82:	f7ff fe49 	bl	800b718 <dwt_modify16bitoffsetreg>
 800ba86:	7b6b      	ldrb	r3, [r5, #13]
 800ba88:	2b01      	cmp	r3, #1
 800ba8a:	f000 8105 	beq.w	800bc98 <ull_configure+0x344>
 800ba8e:	78ab      	ldrb	r3, [r5, #2]
 800ba90:	f043 0310 	orr.w	r3, r3, #16
 800ba94:	9300      	str	r3, [sp, #0]
 800ba96:	23fc      	movs	r3, #252	; 0xfc
 800ba98:	2200      	movs	r2, #0
 800ba9a:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800ba9e:	4620      	mov	r0, r4
 800baa0:	f7ff fc1e 	bl	800b2e0 <dwt_modify8bitoffsetreg>
 800baa4:	1e73      	subs	r3, r6, #1
 800baa6:	b2db      	uxtb	r3, r3
 800baa8:	2200      	movs	r2, #0
 800baaa:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800baae:	4620      	mov	r0, r4
 800bab0:	f7fe ffe0 	bl	800aa74 <dwt_write8bitoffsetreg>
 800bab4:	786b      	ldrb	r3, [r5, #1]
 800bab6:	2b07      	cmp	r3, #7
 800bab8:	bf0c      	ite	eq
 800baba:	2308      	moveq	r3, #8
 800babc:	2300      	movne	r3, #0
 800babe:	2201      	movs	r2, #1
 800bac0:	2124      	movs	r1, #36	; 0x24
 800bac2:	4620      	mov	r0, r4
 800bac4:	f7fe ffd6 	bl	800aa74 <dwt_write8bitoffsetreg>
 800bac8:	7aeb      	ldrb	r3, [r5, #11]
 800baca:	f003 0303 	and.w	r3, r3, #3
 800bace:	2b03      	cmp	r3, #3
 800bad0:	bf0c      	ite	eq
 800bad2:	4b91      	ldreq	r3, [pc, #580]	; (800bd18 <ull_configure+0x3c4>)
 800bad4:	4b91      	ldrne	r3, [pc, #580]	; (800bd1c <ull_configure+0x3c8>)
 800bad6:	2200      	movs	r2, #0
 800bad8:	4991      	ldr	r1, [pc, #580]	; (800bd20 <ull_configure+0x3cc>)
 800bada:	4620      	mov	r0, r4
 800badc:	f7fe fe3c 	bl	800a758 <dwt_write32bitoffsetreg>
 800bae0:	2200      	movs	r2, #0
 800bae2:	4990      	ldr	r1, [pc, #576]	; (800bd24 <ull_configure+0x3d0>)
 800bae4:	4620      	mov	r0, r4
 800bae6:	f7fe f9c2 	bl	8009e6e <dwt_read32bitoffsetreg>
 800baea:	f420 50ff 	bic.w	r0, r0, #8160	; 0x1fe0
 800baee:	f020 001f 	bic.w	r0, r0, #31
 800baf2:	f1b9 0f09 	cmp.w	r9, #9
 800baf6:	bf08      	it	eq
 800baf8:	f040 0001 	orreq.w	r0, r0, #1
 800bafc:	792a      	ldrb	r2, [r5, #4]
 800bafe:	0212      	lsls	r2, r2, #8
 800bb00:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
 800bb04:	78eb      	ldrb	r3, [r5, #3]
 800bb06:	00db      	lsls	r3, r3, #3
 800bb08:	b2db      	uxtb	r3, r3
 800bb0a:	431a      	orrs	r2, r3
 800bb0c:	796b      	ldrb	r3, [r5, #5]
 800bb0e:	005b      	lsls	r3, r3, #1
 800bb10:	f003 0306 	and.w	r3, r3, #6
 800bb14:	4313      	orrs	r3, r2
 800bb16:	4303      	orrs	r3, r0
 800bb18:	2200      	movs	r2, #0
 800bb1a:	4982      	ldr	r1, [pc, #520]	; (800bd24 <ull_configure+0x3d0>)
 800bb1c:	4620      	mov	r0, r4
 800bb1e:	f7fe fe1b 	bl	800a758 <dwt_write32bitoffsetreg>
 800bb22:	79aa      	ldrb	r2, [r5, #6]
 800bb24:	786b      	ldrb	r3, [r5, #1]
 800bb26:	031b      	lsls	r3, r3, #12
 800bb28:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 800bb2c:	9300      	str	r3, [sp, #0]
 800bb2e:	f46f 4374 	mvn.w	r3, #62464	; 0xf400
 800bb32:	2200      	movs	r2, #0
 800bb34:	2120      	movs	r1, #32
 800bb36:	4620      	mov	r0, r4
 800bb38:	f7ff fa60 	bl	800affc <dwt_modify32bitoffsetreg>
 800bb3c:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 800bb40:	b923      	cbnz	r3, 800bb4c <ull_configure+0x1f8>
 800bb42:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 800bb46:	726b      	strb	r3, [r5, #9]
 800bb48:	2300      	movs	r3, #0
 800bb4a:	72ab      	strb	r3, [r5, #10]
 800bb4c:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 800bb50:	2202      	movs	r2, #2
 800bb52:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800bb56:	4620      	mov	r0, r4
 800bb58:	f7fe fda1 	bl	800a69e <dwt_write16bitoffsetreg>
 800bb5c:	2202      	movs	r2, #2
 800bb5e:	4972      	ldr	r1, [pc, #456]	; (800bd28 <ull_configure+0x3d4>)
 800bb60:	4620      	mov	r0, r4
 800bb62:	f7fe f9ac 	bl	8009ebe <dwt_read8bitoffsetreg>
 800bb66:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800bb68:	7bdb      	ldrb	r3, [r3, #15]
 800bb6a:	454b      	cmp	r3, r9
 800bb6c:	f000 809e 	beq.w	800bcac <ull_configure+0x358>
 800bb70:	2803      	cmp	r0, #3
 800bb72:	f000 809f 	beq.w	800bcb4 <ull_configure+0x360>
 800bb76:	f1b9 0f09 	cmp.w	r9, #9
 800bb7a:	f000 80a0 	beq.w	800bcbe <ull_configure+0x36a>
 800bb7e:	4b6b      	ldr	r3, [pc, #428]	; (800bd2c <ull_configure+0x3d8>)
 800bb80:	2200      	movs	r2, #0
 800bb82:	496b      	ldr	r1, [pc, #428]	; (800bd30 <ull_configure+0x3dc>)
 800bb84:	4620      	mov	r0, r4
 800bb86:	f7fe fde7 	bl	800a758 <dwt_write32bitoffsetreg>
 800bb8a:	f641 733c 	movw	r3, #7996	; 0x1f3c
 800bb8e:	2200      	movs	r2, #0
 800bb90:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 800bb94:	4620      	mov	r0, r4
 800bb96:	f7fe fd82 	bl	800a69e <dwt_write16bitoffsetreg>
 800bb9a:	2314      	movs	r3, #20
 800bb9c:	2201      	movs	r2, #1
 800bb9e:	4965      	ldr	r1, [pc, #404]	; (800bd34 <ull_configure+0x3e0>)
 800bba0:	4620      	mov	r0, r4
 800bba2:	f7fe ff67 	bl	800aa74 <dwt_write8bitoffsetreg>
 800bba6:	230e      	movs	r3, #14
 800bba8:	2202      	movs	r2, #2
 800bbaa:	4963      	ldr	r1, [pc, #396]	; (800bd38 <ull_configure+0x3e4>)
 800bbac:	4620      	mov	r0, r4
 800bbae:	f7fe ff61 	bl	800aa74 <dwt_write8bitoffsetreg>
 800bbb2:	2381      	movs	r3, #129	; 0x81
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	4961      	ldr	r1, [pc, #388]	; (800bd3c <ull_configure+0x3e8>)
 800bbb8:	4620      	mov	r0, r4
 800bbba:	f7fe ff5b 	bl	800aa74 <dwt_write8bitoffsetreg>
 800bbbe:	2302      	movs	r3, #2
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	2144      	movs	r1, #68	; 0x44
 800bbc4:	4620      	mov	r0, r4
 800bbc6:	f7fe ff55 	bl	800aa74 <dwt_write8bitoffsetreg>
 800bbca:	2101      	movs	r1, #1
 800bbcc:	4620      	mov	r0, r4
 800bbce:	f7ff fc45 	bl	800b45c <ull_setdwstate>
 800bbd2:	f04f 0b32 	mov.w	fp, #50	; 0x32
 800bbd6:	f04f 0814 	mov.w	r8, #20
 800bbda:	2700      	movs	r7, #0
 800bbdc:	2644      	movs	r6, #68	; 0x44
 800bbde:	4640      	mov	r0, r8
 800bbe0:	f7f4 fc9f 	bl	8000522 <deca_usleep>
 800bbe4:	463a      	mov	r2, r7
 800bbe6:	4631      	mov	r1, r6
 800bbe8:	4620      	mov	r0, r4
 800bbea:	f7fe f968 	bl	8009ebe <dwt_read8bitoffsetreg>
 800bbee:	f010 0f02 	tst.w	r0, #2
 800bbf2:	f040 80b5 	bne.w	800bd60 <ull_configure+0x40c>
 800bbf6:	f10b 33ff 	add.w	r3, fp, #4294967295
 800bbfa:	f013 0bff 	ands.w	fp, r3, #255	; 0xff
 800bbfe:	d1ee      	bne.n	800bbde <ull_configure+0x28a>
 800bc00:	f06f 0001 	mvn.w	r0, #1
 800bc04:	e0de      	b.n	800bdc4 <ull_configure+0x470>
 800bc06:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800bc08:	8a13      	ldrh	r3, [r2, #16]
 800bc0a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800bc0e:	8213      	strh	r3, [r2, #16]
 800bc10:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800bc14:	9300      	str	r3, [sp, #0]
 800bc16:	f46f 5340 	mvn.w	r3, #12288	; 0x3000
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	493d      	ldr	r1, [pc, #244]	; (800bd14 <ull_configure+0x3c0>)
 800bc1e:	4620      	mov	r0, r4
 800bc20:	f7ff f9ec 	bl	800affc <dwt_modify32bitoffsetreg>
 800bc24:	f240 3306 	movw	r3, #774	; 0x306
 800bc28:	2200      	movs	r2, #0
 800bc2a:	4945      	ldr	r1, [pc, #276]	; (800bd40 <ull_configure+0x3ec>)
 800bc2c:	4620      	mov	r0, r4
 800bc2e:	f7fe fd93 	bl	800a758 <dwt_write32bitoffsetreg>
 800bc32:	2300      	movs	r3, #0
 800bc34:	461a      	mov	r2, r3
 800bc36:	4943      	ldr	r1, [pc, #268]	; (800bd44 <ull_configure+0x3f0>)
 800bc38:	4620      	mov	r0, r4
 800bc3a:	f7fe fd8d 	bl	800a758 <dwt_write32bitoffsetreg>
 800bc3e:	4b42      	ldr	r3, [pc, #264]	; (800bd48 <ull_configure+0x3f4>)
 800bc40:	2200      	movs	r2, #0
 800bc42:	4931      	ldr	r1, [pc, #196]	; (800bd08 <ull_configure+0x3b4>)
 800bc44:	4620      	mov	r0, r4
 800bc46:	f7fe fd87 	bl	800a758 <dwt_write32bitoffsetreg>
 800bc4a:	239d      	movs	r3, #157	; 0x9d
 800bc4c:	9300      	str	r3, [sp, #0]
 800bc4e:	4b2f      	ldr	r3, [pc, #188]	; (800bd0c <ull_configure+0x3b8>)
 800bc50:	2200      	movs	r2, #0
 800bc52:	492f      	ldr	r1, [pc, #188]	; (800bd10 <ull_configure+0x3bc>)
 800bc54:	4620      	mov	r0, r4
 800bc56:	f7ff f9d1 	bl	800affc <dwt_modify32bitoffsetreg>
 800bc5a:	e714      	b.n	800ba86 <ull_configure+0x132>
 800bc5c:	7b2a      	ldrb	r2, [r5, #12]
 800bc5e:	4b29      	ldr	r3, [pc, #164]	; (800bd04 <ull_configure+0x3b0>)
 800bc60:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800bc64:	f44f 6235 	mov.w	r2, #2896	; 0xb50
 800bc68:	fb02 f203 	mul.w	r2, r2, r3
 800bc6c:	0c93      	lsrs	r3, r2, #18
 800bc6e:	f3c2 12ca 	ubfx	r2, r2, #7, #11
 800bc72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bc76:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800bc7a:	bf28      	it	cs
 800bc7c:	3301      	addcs	r3, #1
 800bc7e:	b29b      	uxth	r3, r3
 800bc80:	e6da      	b.n	800ba38 <ull_configure+0xe4>
 800bc82:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bc86:	9300      	str	r3, [sp, #0]
 800bc88:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	4921      	ldr	r1, [pc, #132]	; (800bd14 <ull_configure+0x3c0>)
 800bc90:	4620      	mov	r0, r4
 800bc92:	f7ff fd41 	bl	800b718 <dwt_modify16bitoffsetreg>
 800bc96:	e6f6      	b.n	800ba86 <ull_configure+0x132>
 800bc98:	78ab      	ldrb	r3, [r5, #2]
 800bc9a:	9300      	str	r3, [sp, #0]
 800bc9c:	23ec      	movs	r3, #236	; 0xec
 800bc9e:	2200      	movs	r2, #0
 800bca0:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800bca4:	4620      	mov	r0, r4
 800bca6:	f7ff fb1b 	bl	800b2e0 <dwt_modify8bitoffsetreg>
 800bcaa:	e6fb      	b.n	800baa4 <ull_configure+0x150>
 800bcac:	2803      	cmp	r0, #3
 800bcae:	f47f af62 	bne.w	800bb76 <ull_configure+0x222>
 800bcb2:	e058      	b.n	800bd66 <ull_configure+0x412>
 800bcb4:	2102      	movs	r1, #2
 800bcb6:	4620      	mov	r0, r4
 800bcb8:	f7ff fbd0 	bl	800b45c <ull_setdwstate>
 800bcbc:	e75b      	b.n	800bb76 <ull_configure+0x222>
 800bcbe:	4b23      	ldr	r3, [pc, #140]	; (800bd4c <ull_configure+0x3f8>)
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	491b      	ldr	r1, [pc, #108]	; (800bd30 <ull_configure+0x3dc>)
 800bcc4:	4620      	mov	r0, r4
 800bcc6:	f7fe fd47 	bl	800a758 <dwt_write32bitoffsetreg>
 800bcca:	f640 733c 	movw	r3, #3900	; 0xf3c
 800bcce:	2200      	movs	r2, #0
 800bcd0:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 800bcd4:	4620      	mov	r0, r4
 800bcd6:	f7fe fce2 	bl	800a69e <dwt_write16bitoffsetreg>
 800bcda:	e75e      	b.n	800bb9a <ull_configure+0x246>
 800bcdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bce0:	9300      	str	r3, [sp, #0]
 800bce2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bce6:	2200      	movs	r2, #0
 800bce8:	490a      	ldr	r1, [pc, #40]	; (800bd14 <ull_configure+0x3c0>)
 800bcea:	4620      	mov	r0, r4
 800bcec:	f7ff fd14 	bl	800b718 <dwt_modify16bitoffsetreg>
 800bcf0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800bcf2:	8a13      	ldrh	r3, [r2, #16]
 800bcf4:	f043 0308 	orr.w	r3, r3, #8
 800bcf8:	8213      	strh	r3, [r2, #16]
 800bcfa:	e046      	b.n	800bd8a <ull_configure+0x436>
 800bcfc:	00026668 	.word	0x00026668
 800bd00:	fffc4fcf 	.word	0xfffc4fcf
 800bd04:	08013288 	.word	0x08013288
 800bd08:	000e0014 	.word	0x000e0014
 800bd0c:	bfffff00 	.word	0xbfffff00
 800bd10:	000e0018 	.word	0x000e0018
 800bd14:	000b0008 	.word	0x000b0008
 800bd18:	af5f35cc 	.word	0xaf5f35cc
 800bd1c:	af5f584c 	.word	0xaf5f584c
 800bd20:	0006000c 	.word	0x0006000c
 800bd24:	00010008 	.word	0x00010008
 800bd28:	000f0030 	.word	0x000f0030
 800bd2c:	1c071134 	.word	0x1c071134
 800bd30:	0007001c 	.word	0x0007001c
 800bd34:	00070050 	.word	0x00070050
 800bd38:	00070018 	.word	0x00070018
 800bd3c:	00090008 	.word	0x00090008
 800bd40:	000e000c 	.word	0x000e000c
 800bd44:	000e0010 	.word	0x000e0010
 800bd48:	000c5a0a 	.word	0x000c5a0a
 800bd4c:	1c010034 	.word	0x1c010034
 800bd50:	2200      	movs	r2, #0
 800bd52:	9200      	str	r2, [sp, #0]
 800bd54:	23fe      	movs	r3, #254	; 0xfe
 800bd56:	491d      	ldr	r1, [pc, #116]	; (800bdcc <ull_configure+0x478>)
 800bd58:	4620      	mov	r0, r4
 800bd5a:	f7ff fac1 	bl	800b2e0 <dwt_modify8bitoffsetreg>
 800bd5e:	e01e      	b.n	800bd9e <ull_configure+0x44a>
 800bd60:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800bd62:	f883 900f 	strb.w	r9, [r3, #15]
 800bd66:	792b      	ldrb	r3, [r5, #4]
 800bd68:	3b09      	subs	r3, #9
 800bd6a:	b2db      	uxtb	r3, r3
 800bd6c:	2b0f      	cmp	r3, #15
 800bd6e:	d8ef      	bhi.n	800bd50 <ull_configure+0x3fc>
 800bd70:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800bd72:	7a1b      	ldrb	r3, [r3, #8]
 800bd74:	2b01      	cmp	r3, #1
 800bd76:	d0b1      	beq.n	800bcdc <ull_configure+0x388>
 800bd78:	4649      	mov	r1, r9
 800bd7a:	4620      	mov	r0, r4
 800bd7c:	f7fe fda4 	bl	800a8c8 <ull_configmrxlut>
 800bd80:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800bd82:	8a13      	ldrh	r3, [r2, #16]
 800bd84:	f023 0308 	bic.w	r3, r3, #8
 800bd88:	8213      	strh	r3, [r2, #16]
 800bd8a:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800bd8e:	9300      	str	r3, [sp, #0]
 800bd90:	f248 13ff 	movw	r3, #33279	; 0x81ff
 800bd94:	2200      	movs	r2, #0
 800bd96:	490d      	ldr	r1, [pc, #52]	; (800bdcc <ull_configure+0x478>)
 800bd98:	4620      	mov	r0, r4
 800bd9a:	f7ff fcbd 	bl	800b718 <dwt_modify16bitoffsetreg>
 800bd9e:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 800bda2:	bfcc      	ite	gt
 800bda4:	f04f 5300 	movgt.w	r3, #536870912	; 0x20000000
 800bda8:	f04f 53a0 	movle.w	r3, #335544320	; 0x14000000
 800bdac:	9300      	str	r3, [sp, #0]
 800bdae:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	4906      	ldr	r1, [pc, #24]	; (800bdd0 <ull_configure+0x47c>)
 800bdb6:	4620      	mov	r0, r4
 800bdb8:	f7ff f920 	bl	800affc <dwt_modify32bitoffsetreg>
 800bdbc:	2101      	movs	r1, #1
 800bdbe:	4620      	mov	r0, r4
 800bdc0:	f7ff fd12 	bl	800b7e8 <ull_pgf_cal>
 800bdc4:	b003      	add	sp, #12
 800bdc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdca:	bf00      	nop
 800bdcc:	00030018 	.word	0x00030018
 800bdd0:	00060010 	.word	0x00060010

0800bdd4 <ull_initialise>:
 800bdd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdd6:	b083      	sub	sp, #12
 800bdd8:	4605      	mov	r5, r0
 800bdda:	460e      	mov	r6, r1
 800bddc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d051      	beq.n	800be86 <ull_initialise+0xb2>
 800bde2:	6d2c      	ldr	r4, [r5, #80]	; 0x50
 800bde4:	2300      	movs	r3, #0
 800bde6:	73a3      	strb	r3, [r4, #14]
 800bde8:	2202      	movs	r2, #2
 800bdea:	8222      	strh	r2, [r4, #16]
 800bdec:	7523      	strb	r3, [r4, #20]
 800bdee:	7563      	strb	r3, [r4, #21]
 800bdf0:	73e3      	strb	r3, [r4, #15]
 800bdf2:	7263      	strb	r3, [r4, #9]
 800bdf4:	72a3      	strb	r3, [r4, #10]
 800bdf6:	2104      	movs	r1, #4
 800bdf8:	4628      	mov	r0, r5
 800bdfa:	f7fe fc8b 	bl	800a714 <_dwt_otpread>
 800bdfe:	4607      	mov	r7, r0
 800be00:	2105      	movs	r1, #5
 800be02:	4628      	mov	r0, r5
 800be04:	f7fe fc86 	bl	800a714 <_dwt_otpread>
 800be08:	b10f      	cbz	r7, 800be0e <ull_initialise+0x3a>
 800be0a:	2800      	cmp	r0, #0
 800be0c:	d140      	bne.n	800be90 <ull_initialise+0xbc>
 800be0e:	2120      	movs	r1, #32
 800be10:	4628      	mov	r0, r5
 800be12:	f7fe fc7f 	bl	800a714 <_dwt_otpread>
 800be16:	4b35      	ldr	r3, [pc, #212]	; (800beec <ull_initialise+0x118>)
 800be18:	4298      	cmp	r0, r3
 800be1a:	bf0c      	ite	eq
 800be1c:	2301      	moveq	r3, #1
 800be1e:	2300      	movne	r3, #0
 800be20:	7223      	strb	r3, [r4, #8]
 800be22:	f016 0f10 	tst.w	r6, #16
 800be26:	d142      	bne.n	800beae <ull_initialise+0xda>
 800be28:	f016 0f20 	tst.w	r6, #32
 800be2c:	d145      	bne.n	800beba <ull_initialise+0xe6>
 800be2e:	f016 0f40 	tst.w	r6, #64	; 0x40
 800be32:	d148      	bne.n	800bec6 <ull_initialise+0xf2>
 800be34:	f016 0f80 	tst.w	r6, #128	; 0x80
 800be38:	d14c      	bne.n	800bed4 <ull_initialise+0x100>
 800be3a:	7aa3      	ldrb	r3, [r4, #10]
 800be3c:	b90b      	cbnz	r3, 800be42 <ull_initialise+0x6e>
 800be3e:	2385      	movs	r3, #133	; 0x85
 800be40:	72a3      	strb	r3, [r4, #10]
 800be42:	7a63      	ldrb	r3, [r4, #9]
 800be44:	b90b      	cbnz	r3, 800be4a <ull_initialise+0x76>
 800be46:	2374      	movs	r3, #116	; 0x74
 800be48:	7263      	strb	r3, [r4, #9]
 800be4a:	211f      	movs	r1, #31
 800be4c:	4628      	mov	r0, r5
 800be4e:	f7fe fc61 	bl	800a714 <_dwt_otpread>
 800be52:	7320      	strb	r0, [r4, #12]
 800be54:	211e      	movs	r1, #30
 800be56:	4628      	mov	r0, r5
 800be58:	f7fe fc5c 	bl	800a714 <_dwt_otpread>
 800be5c:	f010 003f 	ands.w	r0, r0, #63	; 0x3f
 800be60:	bf12      	itee	ne
 800be62:	7360      	strbne	r0, [r4, #13]
 800be64:	232e      	moveq	r3, #46	; 0x2e
 800be66:	7363      	strbeq	r3, [r4, #13]
 800be68:	7b63      	ldrb	r3, [r4, #13]
 800be6a:	2200      	movs	r2, #0
 800be6c:	4920      	ldr	r1, [pc, #128]	; (800bef0 <ull_initialise+0x11c>)
 800be6e:	4628      	mov	r0, r5
 800be70:	f7fe fe00 	bl	800aa74 <dwt_write8bitoffsetreg>
 800be74:	2135      	movs	r1, #53	; 0x35
 800be76:	4628      	mov	r0, r5
 800be78:	f7fe fc4c 	bl	800a714 <_dwt_otpread>
 800be7c:	4603      	mov	r3, r0
 800be7e:	bb78      	cbnz	r0, 800bee0 <ull_initialise+0x10c>
 800be80:	2000      	movs	r0, #0
 800be82:	b003      	add	sp, #12
 800be84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be86:	2028      	movs	r0, #40	; 0x28
 800be88:	f006 ff60 	bl	8012d4c <malloc>
 800be8c:	6528      	str	r0, [r5, #80]	; 0x50
 800be8e:	e7a8      	b.n	800bde2 <ull_initialise+0xe>
 800be90:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be94:	9300      	str	r3, [sp, #0]
 800be96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800be9a:	2200      	movs	r2, #0
 800be9c:	4915      	ldr	r1, [pc, #84]	; (800bef4 <ull_initialise+0x120>)
 800be9e:	4628      	mov	r0, r5
 800bea0:	f7ff fc3a 	bl	800b718 <dwt_modify16bitoffsetreg>
 800bea4:	8a23      	ldrh	r3, [r4, #16]
 800bea6:	f043 0310 	orr.w	r3, r3, #16
 800beaa:	8223      	strh	r3, [r4, #16]
 800beac:	e7af      	b.n	800be0e <ull_initialise+0x3a>
 800beae:	2106      	movs	r1, #6
 800beb0:	4628      	mov	r0, r5
 800beb2:	f7fe fc2f 	bl	800a714 <_dwt_otpread>
 800beb6:	6020      	str	r0, [r4, #0]
 800beb8:	e7b6      	b.n	800be28 <ull_initialise+0x54>
 800beba:	2107      	movs	r1, #7
 800bebc:	4628      	mov	r0, r5
 800bebe:	f7fe fc29 	bl	800a714 <_dwt_otpread>
 800bec2:	6060      	str	r0, [r4, #4]
 800bec4:	e7b3      	b.n	800be2e <ull_initialise+0x5a>
 800bec6:	2108      	movs	r1, #8
 800bec8:	4628      	mov	r0, r5
 800beca:	f7fe fc23 	bl	800a714 <_dwt_otpread>
 800bece:	0c00      	lsrs	r0, r0, #16
 800bed0:	7260      	strb	r0, [r4, #9]
 800bed2:	e7af      	b.n	800be34 <ull_initialise+0x60>
 800bed4:	2109      	movs	r1, #9
 800bed6:	4628      	mov	r0, r5
 800bed8:	f7fe fc1c 	bl	800a714 <_dwt_otpread>
 800bedc:	72a0      	strb	r0, [r4, #10]
 800bede:	e7ac      	b.n	800be3a <ull_initialise+0x66>
 800bee0:	2200      	movs	r2, #0
 800bee2:	4905      	ldr	r1, [pc, #20]	; (800bef8 <ull_initialise+0x124>)
 800bee4:	4628      	mov	r0, r5
 800bee6:	f7fe fc37 	bl	800a758 <dwt_write32bitoffsetreg>
 800beea:	e7c9      	b.n	800be80 <ull_initialise+0xac>
 800beec:	10000240 	.word	0x10000240
 800bef0:	00090014 	.word	0x00090014
 800bef4:	000b0008 	.word	0x000b0008
 800bef8:	00090004 	.word	0x00090004

0800befc <ull_rxenable>:
 800befc:	b530      	push	{r4, r5, lr}
 800befe:	b083      	sub	sp, #12
 800bf00:	4605      	mov	r5, r0
 800bf02:	460c      	mov	r4, r1
 800bf04:	b171      	cbz	r1, 800bf24 <ull_rxenable+0x28>
 800bf06:	f021 0302 	bic.w	r3, r1, #2
 800bf0a:	3b01      	subs	r3, #1
 800bf0c:	2b0f      	cmp	r3, #15
 800bf0e:	d862      	bhi.n	800bfd6 <ull_rxenable+0xda>
 800bf10:	e8df f003 	tbb	[pc, r3]
 800bf14:	24616111 	.word	0x24616111
 800bf18:	2d616161 	.word	0x2d616161
 800bf1c:	61616161 	.word	0x61616161
 800bf20:	3a616161 	.word	0x3a616161
 800bf24:	2102      	movs	r1, #2
 800bf26:	9101      	str	r1, [sp, #4]
 800bf28:	2200      	movs	r2, #0
 800bf2a:	9200      	str	r2, [sp, #0]
 800bf2c:	4613      	mov	r3, r2
 800bf2e:	f7fd ff16 	bl	8009d5e <dwt_xfer3xxx>
 800bf32:	4620      	mov	r0, r4
 800bf34:	e010      	b.n	800bf58 <ull_rxenable+0x5c>
 800bf36:	2302      	movs	r3, #2
 800bf38:	9301      	str	r3, [sp, #4]
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	9200      	str	r2, [sp, #0]
 800bf3e:	4613      	mov	r3, r2
 800bf40:	2104      	movs	r1, #4
 800bf42:	f7fd ff0c 	bl	8009d5e <dwt_xfer3xxx>
 800bf46:	2203      	movs	r2, #3
 800bf48:	2144      	movs	r1, #68	; 0x44
 800bf4a:	4628      	mov	r0, r5
 800bf4c:	f7fd ffb7 	bl	8009ebe <dwt_read8bitoffsetreg>
 800bf50:	f010 0f08 	tst.w	r0, #8
 800bf54:	d125      	bne.n	800bfa2 <ull_rxenable+0xa6>
 800bf56:	2000      	movs	r0, #0
 800bf58:	b003      	add	sp, #12
 800bf5a:	bd30      	pop	{r4, r5, pc}
 800bf5c:	2302      	movs	r3, #2
 800bf5e:	9301      	str	r3, [sp, #4]
 800bf60:	2200      	movs	r2, #0
 800bf62:	9200      	str	r2, [sp, #0]
 800bf64:	4613      	mov	r3, r2
 800bf66:	210a      	movs	r1, #10
 800bf68:	f7fd fef9 	bl	8009d5e <dwt_xfer3xxx>
 800bf6c:	e7eb      	b.n	800bf46 <ull_rxenable+0x4a>
 800bf6e:	2100      	movs	r1, #0
 800bf70:	f7fe fc07 	bl	800a782 <_dwt_adjust_delaytime>
 800bf74:	2302      	movs	r3, #2
 800bf76:	9301      	str	r3, [sp, #4]
 800bf78:	2200      	movs	r2, #0
 800bf7a:	9200      	str	r2, [sp, #0]
 800bf7c:	4613      	mov	r3, r2
 800bf7e:	2108      	movs	r1, #8
 800bf80:	4628      	mov	r0, r5
 800bf82:	f7fd feec 	bl	8009d5e <dwt_xfer3xxx>
 800bf86:	e7de      	b.n	800bf46 <ull_rxenable+0x4a>
 800bf88:	2101      	movs	r1, #1
 800bf8a:	f7fe fbfa 	bl	800a782 <_dwt_adjust_delaytime>
 800bf8e:	2302      	movs	r3, #2
 800bf90:	9301      	str	r3, [sp, #4]
 800bf92:	2200      	movs	r2, #0
 800bf94:	9200      	str	r2, [sp, #0]
 800bf96:	4613      	mov	r3, r2
 800bf98:	2106      	movs	r1, #6
 800bf9a:	4628      	mov	r0, r5
 800bf9c:	f7fd fedf 	bl	8009d5e <dwt_xfer3xxx>
 800bfa0:	e7d1      	b.n	800bf46 <ull_rxenable+0x4a>
 800bfa2:	2302      	movs	r3, #2
 800bfa4:	9301      	str	r3, [sp, #4]
 800bfa6:	2100      	movs	r1, #0
 800bfa8:	9100      	str	r1, [sp, #0]
 800bfaa:	460b      	mov	r3, r1
 800bfac:	460a      	mov	r2, r1
 800bfae:	4628      	mov	r0, r5
 800bfb0:	f7fd fed5 	bl	8009d5e <dwt_xfer3xxx>
 800bfb4:	f014 0f02 	tst.w	r4, #2
 800bfb8:	d002      	beq.n	800bfc0 <ull_rxenable+0xc4>
 800bfba:	f04f 30ff 	mov.w	r0, #4294967295
 800bfbe:	e7cb      	b.n	800bf58 <ull_rxenable+0x5c>
 800bfc0:	2102      	movs	r1, #2
 800bfc2:	9101      	str	r1, [sp, #4]
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	9200      	str	r2, [sp, #0]
 800bfc8:	4613      	mov	r3, r2
 800bfca:	4628      	mov	r0, r5
 800bfcc:	f7fd fec7 	bl	8009d5e <dwt_xfer3xxx>
 800bfd0:	f04f 30ff 	mov.w	r0, #4294967295
 800bfd4:	e7c0      	b.n	800bf58 <ull_rxenable+0x5c>
 800bfd6:	f04f 30ff 	mov.w	r0, #4294967295
 800bfda:	e7bd      	b.n	800bf58 <ull_rxenable+0x5c>

0800bfdc <ull_softreset_no_sema_fcmd>:
 800bfdc:	b570      	push	{r4, r5, r6, lr}
 800bfde:	b082      	sub	sp, #8
 800bfe0:	4606      	mov	r6, r0
 800bfe2:	2502      	movs	r5, #2
 800bfe4:	9501      	str	r5, [sp, #4]
 800bfe6:	2400      	movs	r4, #0
 800bfe8:	9400      	str	r4, [sp, #0]
 800bfea:	4623      	mov	r3, r4
 800bfec:	4622      	mov	r2, r4
 800bfee:	2119      	movs	r1, #25
 800bff0:	f7fd feb5 	bl	8009d5e <dwt_xfer3xxx>
 800bff4:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800bff6:	739c      	strb	r4, [r3, #14]
 800bff8:	821d      	strh	r5, [r3, #16]
 800bffa:	751c      	strb	r4, [r3, #20]
 800bffc:	755c      	strb	r4, [r3, #21]
 800bffe:	73dc      	strb	r4, [r3, #15]
 800c000:	b002      	add	sp, #8
 800c002:	bd70      	pop	{r4, r5, r6, pc}

0800c004 <ull_softreset_fcmd>:
 800c004:	b570      	push	{r4, r5, r6, lr}
 800c006:	b082      	sub	sp, #8
 800c008:	4606      	mov	r6, r0
 800c00a:	2502      	movs	r5, #2
 800c00c:	9501      	str	r5, [sp, #4]
 800c00e:	2400      	movs	r4, #0
 800c010:	9400      	str	r4, [sp, #0]
 800c012:	4623      	mov	r3, r4
 800c014:	4622      	mov	r2, r4
 800c016:	2118      	movs	r1, #24
 800c018:	f7fd fea1 	bl	8009d5e <dwt_xfer3xxx>
 800c01c:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800c01e:	739c      	strb	r4, [r3, #14]
 800c020:	821d      	strh	r5, [r3, #16]
 800c022:	751c      	strb	r4, [r3, #20]
 800c024:	755c      	strb	r4, [r3, #21]
 800c026:	73dc      	strb	r4, [r3, #15]
 800c028:	b002      	add	sp, #8
 800c02a:	bd70      	pop	{r4, r5, r6, pc}

0800c02c <dwt_ioctl>:
 800c02c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c030:	b091      	sub	sp, #68	; 0x44
 800c032:	4606      	mov	r6, r0
 800c034:	4615      	mov	r5, r2
 800c036:	461c      	mov	r4, r3
 800c038:	299c      	cmp	r1, #156	; 0x9c
 800c03a:	f200 809f 	bhi.w	800c17c <dwt_ioctl+0x150>
 800c03e:	e8df f011 	tbh	[pc, r1, lsl #1]
 800c042:	0a54      	.short	0x0a54
 800c044:	00a30a5f 	.word	0x00a30a5f
 800c048:	00c000a7 	.word	0x00c000a7
 800c04c:	0192014c 	.word	0x0192014c
 800c050:	0156016f 	.word	0x0156016f
 800c054:	01ad01a2 	.word	0x01ad01a2
 800c058:	01bd01b5 	.word	0x01bd01b5
 800c05c:	01cd01c5 	.word	0x01cd01c5
 800c060:	01d901d5 	.word	0x01d901d5
 800c064:	027201e1 	.word	0x027201e1
 800c068:	02850280 	.word	0x02850280
 800c06c:	0294028f 	.word	0x0294028f
 800c070:	02a20299 	.word	0x02a20299
 800c074:	02dd02a7 	.word	0x02dd02a7
 800c078:	030502fa 	.word	0x030502fa
 800c07c:	031a0310 	.word	0x031a0310
 800c080:	03480352 	.word	0x03480352
 800c084:	0324033e 	.word	0x0324033e
 800c088:	03810331 	.word	0x03810331
 800c08c:	022f01fc 	.word	0x022f01fc
 800c090:	0245023d 	.word	0x0245023d
 800c094:	097d0259 	.word	0x097d0259
 800c098:	03610982 	.word	0x03610982
 800c09c:	03a3039f 	.word	0x03a3039f
 800c0a0:	03b103ac 	.word	0x03b103ac
 800c0a4:	03e503db 	.word	0x03e503db
 800c0a8:	041703ed 	.word	0x041703ed
 800c0ac:	042e0423 	.word	0x042e0423
 800c0b0:	04390357 	.word	0x04390357
 800c0b4:	04540442 	.word	0x04540442
 800c0b8:	047e046d 	.word	0x047e046d
 800c0bc:	04ca04c0 	.word	0x04ca04c0
 800c0c0:	04ff04f0 	.word	0x04ff04f0
 800c0c4:	0508051a 	.word	0x0508051a
 800c0c8:	056a0524 	.word	0x056a0524
 800c0cc:	05a20582 	.word	0x05a20582
 800c0d0:	05e505d1 	.word	0x05e505d1
 800c0d4:	060a05ee 	.word	0x060a05ee
 800c0d8:	074305f7 	.word	0x074305f7
 800c0dc:	07d30785 	.word	0x07d30785
 800c0e0:	07e407d9 	.word	0x07e407d9
 800c0e4:	081d07fd 	.word	0x081d07fd
 800c0e8:	08310827 	.word	0x08310827
 800c0ec:	0868085f 	.word	0x0868085f
 800c0f0:	0877086e 	.word	0x0877086e
 800c0f4:	08910884 	.word	0x08910884
 800c0f8:	08a4089b 	.word	0x08a4089b
 800c0fc:	08b808ad 	.word	0x08b808ad
 800c100:	08c908c3 	.word	0x08c908c3
 800c104:	08f708ec 	.word	0x08f708ec
 800c108:	090d0902 	.word	0x090d0902
 800c10c:	0959094e 	.word	0x0959094e
 800c110:	09880972 	.word	0x09880972
 800c114:	0a0709fd 	.word	0x0a0709fd
 800c118:	0a670a12 	.word	0x0a670a12
 800c11c:	0a490a1c 	.word	0x0a490a1c
 800c120:	09c60777 	.word	0x09c60777
 800c124:	0ad509e7 	.word	0x0ad509e7
 800c128:	0a740aca 	.word	0x0a740aca
 800c12c:	0a8a0a7f 	.word	0x0a8a0a7f
 800c130:	0aa00a95 	.word	0x0aa00a95
 800c134:	0ab60aab 	.word	0x0ab60aab
 800c138:	0cb50abf 	.word	0x0cb50abf
 800c13c:	0d2a0cef 	.word	0x0d2a0cef
 800c140:	0df90d4d 	.word	0x0df90d4d
 800c144:	0afd0e0e 	.word	0x0afd0e0e
 800c148:	0bf40bc1 	.word	0x0bf40bc1
 800c14c:	0c040bff 	.word	0x0c040bff
 800c150:	0c140c09 	.word	0x0c140c09
 800c154:	0c320c27 	.word	0x0c320c27
 800c158:	0c5c0c47 	.word	0x0c5c0c47
 800c15c:	009d0c98 	.word	0x009d0c98
 800c160:	009d009d 	.word	0x009d009d
 800c164:	009d009d 	.word	0x009d009d
 800c168:	009d009d 	.word	0x009d009d
 800c16c:	0d64009d 	.word	0x0d64009d
 800c170:	0ec20d75 	.word	0x0ec20d75
 800c174:	0db40dbf 	.word	0x0db40dbf
 800c178:	0dca0dd3 	.word	0x0dca0dd3
 800c17c:	f04f 35ff 	mov.w	r5, #4294967295
 800c180:	4628      	mov	r0, r5
 800c182:	b011      	add	sp, #68	; 0x44
 800c184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c188:	6843      	ldr	r3, [r0, #4]
 800c18a:	4798      	blx	r3
 800c18c:	2500      	movs	r5, #0
 800c18e:	e7f7      	b.n	800c180 <dwt_ioctl+0x154>
 800c190:	2202      	movs	r2, #2
 800c192:	49b4      	ldr	r1, [pc, #720]	; (800c464 <dwt_ioctl+0x438>)
 800c194:	f7fd fe93 	bl	8009ebe <dwt_read8bitoffsetreg>
 800c198:	2803      	cmp	r0, #3
 800c19a:	d801      	bhi.n	800c1a0 <dwt_ioctl+0x174>
 800c19c:	2500      	movs	r5, #0
 800c19e:	e7ef      	b.n	800c180 <dwt_ioctl+0x154>
 800c1a0:	f7f4 f996 	bl	80004d0 <decamutexon>
 800c1a4:	4604      	mov	r4, r0
 800c1a6:	2302      	movs	r3, #2
 800c1a8:	9301      	str	r3, [sp, #4]
 800c1aa:	2500      	movs	r5, #0
 800c1ac:	9500      	str	r5, [sp, #0]
 800c1ae:	462b      	mov	r3, r5
 800c1b0:	462a      	mov	r2, r5
 800c1b2:	4629      	mov	r1, r5
 800c1b4:	4630      	mov	r0, r6
 800c1b6:	f7fd fdd2 	bl	8009d5e <dwt_xfer3xxx>
 800c1ba:	4620      	mov	r0, r4
 800c1bc:	f7f4 f999 	bl	80004f2 <decamutexoff>
 800c1c0:	e7de      	b.n	800c180 <dwt_ioctl+0x154>
 800c1c2:	2c00      	cmp	r4, #0
 800c1c4:	f001 8602 	beq.w	800ddcc <dwt_ioctl+0x1da0>
 800c1c8:	7824      	ldrb	r4, [r4, #0]
 800c1ca:	f014 0f1d 	tst.w	r4, #29
 800c1ce:	d061      	beq.n	800c294 <dwt_ioctl+0x268>
 800c1d0:	f014 0f01 	tst.w	r4, #1
 800c1d4:	d023      	beq.n	800c21e <dwt_ioctl+0x1f2>
 800c1d6:	f014 0f02 	tst.w	r4, #2
 800c1da:	f04f 0302 	mov.w	r3, #2
 800c1de:	9301      	str	r3, [sp, #4]
 800c1e0:	f04f 0200 	mov.w	r2, #0
 800c1e4:	9200      	str	r2, [sp, #0]
 800c1e6:	4613      	mov	r3, r2
 800c1e8:	bf14      	ite	ne
 800c1ea:	210d      	movne	r1, #13
 800c1ec:	2103      	moveq	r1, #3
 800c1ee:	f7fd fdb6 	bl	8009d5e <dwt_xfer3xxx>
 800c1f2:	2203      	movs	r2, #3
 800c1f4:	2144      	movs	r1, #68	; 0x44
 800c1f6:	4630      	mov	r0, r6
 800c1f8:	f7fd fe61 	bl	8009ebe <dwt_read8bitoffsetreg>
 800c1fc:	f010 0f08 	tst.w	r0, #8
 800c200:	bf08      	it	eq
 800c202:	2500      	moveq	r5, #0
 800c204:	d0bc      	beq.n	800c180 <dwt_ioctl+0x154>
 800c206:	2302      	movs	r3, #2
 800c208:	9301      	str	r3, [sp, #4]
 800c20a:	2100      	movs	r1, #0
 800c20c:	9100      	str	r1, [sp, #0]
 800c20e:	460b      	mov	r3, r1
 800c210:	460a      	mov	r2, r1
 800c212:	4630      	mov	r0, r6
 800c214:	f7fd fda3 	bl	8009d5e <dwt_xfer3xxx>
 800c218:	f04f 35ff 	mov.w	r5, #4294967295
 800c21c:	e7b0      	b.n	800c180 <dwt_ioctl+0x154>
 800c21e:	f014 0f08 	tst.w	r4, #8
 800c222:	d111      	bne.n	800c248 <dwt_ioctl+0x21c>
 800c224:	f014 0f10 	tst.w	r4, #16
 800c228:	d121      	bne.n	800c26e <dwt_ioctl+0x242>
 800c22a:	f014 0f02 	tst.w	r4, #2
 800c22e:	f04f 0302 	mov.w	r3, #2
 800c232:	9301      	str	r3, [sp, #4]
 800c234:	f04f 0200 	mov.w	r2, #0
 800c238:	9200      	str	r2, [sp, #0]
 800c23a:	4613      	mov	r3, r2
 800c23c:	bf14      	ite	ne
 800c23e:	2110      	movne	r1, #16
 800c240:	2109      	moveq	r1, #9
 800c242:	f7fd fd8c 	bl	8009d5e <dwt_xfer3xxx>
 800c246:	e7d4      	b.n	800c1f2 <dwt_ioctl+0x1c6>
 800c248:	2100      	movs	r1, #0
 800c24a:	f7fe fa9a 	bl	800a782 <_dwt_adjust_delaytime>
 800c24e:	f014 0f02 	tst.w	r4, #2
 800c252:	f04f 0302 	mov.w	r3, #2
 800c256:	9301      	str	r3, [sp, #4]
 800c258:	f04f 0200 	mov.w	r2, #0
 800c25c:	9200      	str	r2, [sp, #0]
 800c25e:	4613      	mov	r3, r2
 800c260:	bf14      	ite	ne
 800c262:	210f      	movne	r1, #15
 800c264:	2107      	moveq	r1, #7
 800c266:	4630      	mov	r0, r6
 800c268:	f7fd fd79 	bl	8009d5e <dwt_xfer3xxx>
 800c26c:	e7c1      	b.n	800c1f2 <dwt_ioctl+0x1c6>
 800c26e:	2101      	movs	r1, #1
 800c270:	f7fe fa87 	bl	800a782 <_dwt_adjust_delaytime>
 800c274:	f014 0f02 	tst.w	r4, #2
 800c278:	f04f 0302 	mov.w	r3, #2
 800c27c:	9301      	str	r3, [sp, #4]
 800c27e:	f04f 0200 	mov.w	r2, #0
 800c282:	9200      	str	r2, [sp, #0]
 800c284:	4613      	mov	r3, r2
 800c286:	bf14      	ite	ne
 800c288:	210e      	movne	r1, #14
 800c28a:	2105      	moveq	r1, #5
 800c28c:	4630      	mov	r0, r6
 800c28e:	f7fd fd66 	bl	8009d5e <dwt_xfer3xxx>
 800c292:	e7ae      	b.n	800c1f2 <dwt_ioctl+0x1c6>
 800c294:	f014 0f20 	tst.w	r4, #32
 800c298:	d00f      	beq.n	800c2ba <dwt_ioctl+0x28e>
 800c29a:	f014 0f02 	tst.w	r4, #2
 800c29e:	f04f 0302 	mov.w	r3, #2
 800c2a2:	9301      	str	r3, [sp, #4]
 800c2a4:	f04f 0500 	mov.w	r5, #0
 800c2a8:	9500      	str	r5, [sp, #0]
 800c2aa:	462b      	mov	r3, r5
 800c2ac:	462a      	mov	r2, r5
 800c2ae:	bf14      	ite	ne
 800c2b0:	2111      	movne	r1, #17
 800c2b2:	210b      	moveq	r1, #11
 800c2b4:	f7fd fd53 	bl	8009d5e <dwt_xfer3xxx>
 800c2b8:	e762      	b.n	800c180 <dwt_ioctl+0x154>
 800c2ba:	f014 0f02 	tst.w	r4, #2
 800c2be:	f04f 0302 	mov.w	r3, #2
 800c2c2:	9301      	str	r3, [sp, #4]
 800c2c4:	f04f 0500 	mov.w	r5, #0
 800c2c8:	9500      	str	r5, [sp, #0]
 800c2ca:	462b      	mov	r3, r5
 800c2cc:	462a      	mov	r2, r5
 800c2ce:	bf14      	ite	ne
 800c2d0:	210c      	movne	r1, #12
 800c2d2:	2101      	moveq	r1, #1
 800c2d4:	f7fd fd43 	bl	8009d5e <dwt_xfer3xxx>
 800c2d8:	e752      	b.n	800c180 <dwt_ioctl+0x154>
 800c2da:	2c00      	cmp	r4, #0
 800c2dc:	f001 8579 	beq.w	800ddd2 <dwt_ioctl+0x1da6>
 800c2e0:	6823      	ldr	r3, [r4, #0]
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	2128      	movs	r1, #40	; 0x28
 800c2e6:	f7fe fa37 	bl	800a758 <dwt_write32bitoffsetreg>
 800c2ea:	2500      	movs	r5, #0
 800c2ec:	e748      	b.n	800c180 <dwt_ioctl+0x154>
 800c2ee:	6823      	ldr	r3, [r4, #0]
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	495d      	ldr	r1, [pc, #372]	; (800c468 <dwt_ioctl+0x43c>)
 800c2f4:	f7fe fa30 	bl	800a758 <dwt_write32bitoffsetreg>
 800c2f8:	6863      	ldr	r3, [r4, #4]
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	495b      	ldr	r1, [pc, #364]	; (800c46c <dwt_ioctl+0x440>)
 800c2fe:	4630      	mov	r0, r6
 800c300:	f7fe fa2a 	bl	800a758 <dwt_write32bitoffsetreg>
 800c304:	68a3      	ldr	r3, [r4, #8]
 800c306:	2200      	movs	r2, #0
 800c308:	4959      	ldr	r1, [pc, #356]	; (800c470 <dwt_ioctl+0x444>)
 800c30a:	4630      	mov	r0, r6
 800c30c:	f7fe fa24 	bl	800a758 <dwt_write32bitoffsetreg>
 800c310:	68e3      	ldr	r3, [r4, #12]
 800c312:	2200      	movs	r2, #0
 800c314:	4957      	ldr	r1, [pc, #348]	; (800c474 <dwt_ioctl+0x448>)
 800c316:	4630      	mov	r0, r6
 800c318:	f7fe fa1e 	bl	800a758 <dwt_write32bitoffsetreg>
 800c31c:	2500      	movs	r5, #0
 800c31e:	e72f      	b.n	800c180 <dwt_ioctl+0x154>
 800c320:	2c00      	cmp	r4, #0
 800c322:	f001 8559 	beq.w	800ddd8 <dwt_ioctl+0x1dac>
 800c326:	8823      	ldrh	r3, [r4, #0]
 800c328:	6865      	ldr	r5, [r4, #4]
 800c32a:	2d03      	cmp	r5, #3
 800c32c:	f201 8557 	bhi.w	800ddde <dwt_ioctl+0x1db2>
 800c330:	e8df f005 	tbb	[pc, r5]
 800c334:	130d0702 	.word	0x130d0702
 800c338:	2200      	movs	r2, #0
 800c33a:	494f      	ldr	r1, [pc, #316]	; (800c478 <dwt_ioctl+0x44c>)
 800c33c:	f7fe f9af 	bl	800a69e <dwt_write16bitoffsetreg>
 800c340:	e71e      	b.n	800c180 <dwt_ioctl+0x154>
 800c342:	2202      	movs	r2, #2
 800c344:	494c      	ldr	r1, [pc, #304]	; (800c478 <dwt_ioctl+0x44c>)
 800c346:	f7fe f9aa 	bl	800a69e <dwt_write16bitoffsetreg>
 800c34a:	2500      	movs	r5, #0
 800c34c:	e718      	b.n	800c180 <dwt_ioctl+0x154>
 800c34e:	2200      	movs	r2, #0
 800c350:	494a      	ldr	r1, [pc, #296]	; (800c47c <dwt_ioctl+0x450>)
 800c352:	f7fe f9a4 	bl	800a69e <dwt_write16bitoffsetreg>
 800c356:	2500      	movs	r5, #0
 800c358:	e712      	b.n	800c180 <dwt_ioctl+0x154>
 800c35a:	2202      	movs	r2, #2
 800c35c:	4947      	ldr	r1, [pc, #284]	; (800c47c <dwt_ioctl+0x450>)
 800c35e:	f7fe f99e 	bl	800a69e <dwt_write16bitoffsetreg>
 800c362:	2500      	movs	r5, #0
 800c364:	e70c      	b.n	800c180 <dwt_ioctl+0x154>
 800c366:	2c00      	cmp	r4, #0
 800c368:	f001 853c 	beq.w	800dde4 <dwt_ioctl+0x1db8>
 800c36c:	7823      	ldrb	r3, [r4, #0]
 800c36e:	005b      	lsls	r3, r3, #1
 800c370:	f003 0306 	and.w	r3, r3, #6
 800c374:	9300      	str	r3, [sp, #0]
 800c376:	f06f 0306 	mvn.w	r3, #6
 800c37a:	2200      	movs	r2, #0
 800c37c:	4940      	ldr	r1, [pc, #256]	; (800c480 <dwt_ioctl+0x454>)
 800c37e:	f7fe fe3d 	bl	800affc <dwt_modify32bitoffsetreg>
 800c382:	2500      	movs	r5, #0
 800c384:	e6fc      	b.n	800c180 <dwt_ioctl+0x154>
 800c386:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c38a:	9300      	str	r3, [sp, #0]
 800c38c:	f04f 33ff 	mov.w	r3, #4294967295
 800c390:	2200      	movs	r2, #0
 800c392:	493c      	ldr	r1, [pc, #240]	; (800c484 <dwt_ioctl+0x458>)
 800c394:	f7fe fe32 	bl	800affc <dwt_modify32bitoffsetreg>
 800c398:	2500      	movs	r5, #0
 800c39a:	e6f1      	b.n	800c180 <dwt_ioctl+0x154>
 800c39c:	2c00      	cmp	r4, #0
 800c39e:	f001 8524 	beq.w	800ddea <dwt_ioctl+0x1dbe>
 800c3a2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800c3a4:	7b1b      	ldrb	r3, [r3, #12]
 800c3a6:	7023      	strb	r3, [r4, #0]
 800c3a8:	2500      	movs	r5, #0
 800c3aa:	e6e9      	b.n	800c180 <dwt_ioctl+0x154>
 800c3ac:	2c00      	cmp	r4, #0
 800c3ae:	f001 851f 	beq.w	800ddf0 <dwt_ioctl+0x1dc4>
 800c3b2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800c3b4:	7a5b      	ldrb	r3, [r3, #9]
 800c3b6:	7023      	strb	r3, [r4, #0]
 800c3b8:	2500      	movs	r5, #0
 800c3ba:	e6e1      	b.n	800c180 <dwt_ioctl+0x154>
 800c3bc:	2c00      	cmp	r4, #0
 800c3be:	f001 851a 	beq.w	800ddf6 <dwt_ioctl+0x1dca>
 800c3c2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800c3c4:	7a9b      	ldrb	r3, [r3, #10]
 800c3c6:	7023      	strb	r3, [r4, #0]
 800c3c8:	2500      	movs	r5, #0
 800c3ca:	e6d9      	b.n	800c180 <dwt_ioctl+0x154>
 800c3cc:	2c00      	cmp	r4, #0
 800c3ce:	f001 8515 	beq.w	800ddfc <dwt_ioctl+0x1dd0>
 800c3d2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	6023      	str	r3, [r4, #0]
 800c3d8:	2500      	movs	r5, #0
 800c3da:	e6d1      	b.n	800c180 <dwt_ioctl+0x154>
 800c3dc:	2c00      	cmp	r4, #0
 800c3de:	f001 8510 	beq.w	800de02 <dwt_ioctl+0x1dd6>
 800c3e2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800c3e4:	685b      	ldr	r3, [r3, #4]
 800c3e6:	6023      	str	r3, [r4, #0]
 800c3e8:	2500      	movs	r5, #0
 800c3ea:	e6c9      	b.n	800c180 <dwt_ioctl+0x154>
 800c3ec:	f7fe fc72 	bl	800acd4 <ull_signal_rx_buff_free>
 800c3f0:	2500      	movs	r5, #0
 800c3f2:	e6c5      	b.n	800c180 <dwt_ioctl+0x154>
 800c3f4:	2c00      	cmp	r4, #0
 800c3f6:	f001 8507 	beq.w	800de08 <dwt_ioctl+0x1ddc>
 800c3fa:	6821      	ldr	r1, [r4, #0]
 800c3fc:	f7fe f9e7 	bl	800a7ce <ull_setrxaftertxdelay>
 800c400:	2500      	movs	r5, #0
 800c402:	e6bd      	b.n	800c180 <dwt_ioctl+0x154>
 800c404:	2c00      	cmp	r4, #0
 800c406:	f001 8502 	beq.w	800de0e <dwt_ioctl+0x1de2>
 800c40a:	7825      	ldrb	r5, [r4, #0]
 800c40c:	b15d      	cbz	r5, 800c426 <dwt_ioctl+0x3fa>
 800c40e:	6864      	ldr	r4, [r4, #4]
 800c410:	2340      	movs	r3, #64	; 0x40
 800c412:	9300      	str	r3, [sp, #0]
 800c414:	23ff      	movs	r3, #255	; 0xff
 800c416:	2200      	movs	r2, #0
 800c418:	2110      	movs	r1, #16
 800c41a:	f7fe ff61 	bl	800b2e0 <dwt_modify8bitoffsetreg>
 800c41e:	2d02      	cmp	r5, #2
 800c420:	d107      	bne.n	800c432 <dwt_ioctl+0x406>
 800c422:	60f4      	str	r4, [r6, #12]
 800c424:	e005      	b.n	800c432 <dwt_ioctl+0x406>
 800c426:	2200      	movs	r2, #0
 800c428:	9200      	str	r2, [sp, #0]
 800c42a:	23bf      	movs	r3, #191	; 0xbf
 800c42c:	2110      	movs	r1, #16
 800c42e:	f7fe ff57 	bl	800b2e0 <dwt_modify8bitoffsetreg>
 800c432:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800c434:	751d      	strb	r5, [r3, #20]
 800c436:	2500      	movs	r5, #0
 800c438:	e6a2      	b.n	800c180 <dwt_ioctl+0x154>
 800c43a:	2c00      	cmp	r4, #0
 800c43c:	f001 84ea 	beq.w	800de14 <dwt_ioctl+0x1de8>
 800c440:	6865      	ldr	r5, [r4, #4]
 800c442:	7823      	ldrb	r3, [r4, #0]
 800c444:	2203      	movs	r2, #3
 800c446:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800c44a:	f7fe fb13 	bl	800aa74 <dwt_write8bitoffsetreg>
 800c44e:	b9dd      	cbnz	r5, 800c488 <dwt_ioctl+0x45c>
 800c450:	2200      	movs	r2, #0
 800c452:	9200      	str	r2, [sp, #0]
 800c454:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 800c458:	2110      	movs	r1, #16
 800c45a:	4630      	mov	r0, r6
 800c45c:	f7ff f95c 	bl	800b718 <dwt_modify16bitoffsetreg>
 800c460:	e68e      	b.n	800c180 <dwt_ioctl+0x154>
 800c462:	bf00      	nop
 800c464:	000f0030 	.word	0x000f0030
 800c468:	00010054 	.word	0x00010054
 800c46c:	00010058 	.word	0x00010058
 800c470:	0001005c 	.word	0x0001005c
 800c474:	00010060 	.word	0x00010060
 800c478:	0001000c 	.word	0x0001000c
 800c47c:	00010010 	.word	0x00010010
 800c480:	00010008 	.word	0x00010008
 800c484:	00110004 	.word	0x00110004
 800c488:	f44f 2381 	mov.w	r3, #264192	; 0x40800
 800c48c:	9300      	str	r3, [sp, #0]
 800c48e:	f04f 33ff 	mov.w	r3, #4294967295
 800c492:	2200      	movs	r2, #0
 800c494:	2110      	movs	r1, #16
 800c496:	4630      	mov	r0, r6
 800c498:	f7fe fdb0 	bl	800affc <dwt_modify32bitoffsetreg>
 800c49c:	2500      	movs	r5, #0
 800c49e:	e66f      	b.n	800c180 <dwt_ioctl+0x154>
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	4611      	mov	r1, r2
 800c4a4:	f7fd fce3 	bl	8009e6e <dwt_read32bitoffsetreg>
 800c4a8:	68b2      	ldr	r2, [r6, #8]
 800c4aa:	6813      	ldr	r3, [r2, #0]
 800c4ac:	4043      	eors	r3, r0
 800c4ae:	6852      	ldr	r2, [r2, #4]
 800c4b0:	4213      	tst	r3, r2
 800c4b2:	bf14      	ite	ne
 800c4b4:	f04f 35ff 	movne.w	r5, #4294967295
 800c4b8:	2500      	moveq	r5, #0
 800c4ba:	e661      	b.n	800c180 <dwt_ioctl+0x154>
 800c4bc:	2c00      	cmp	r4, #0
 800c4be:	f001 84ac 	beq.w	800de1a <dwt_ioctl+0x1dee>
 800c4c2:	7821      	ldrb	r1, [r4, #0]
 800c4c4:	f7fe ff20 	bl	800b308 <ull_configciadiag>
 800c4c8:	2500      	movs	r5, #0
 800c4ca:	e659      	b.n	800c180 <dwt_ioctl+0x154>
 800c4cc:	b93a      	cbnz	r2, 800c4de <dwt_ioctl+0x4b2>
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	9200      	str	r2, [sp, #0]
 800c4d2:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 800c4d6:	49b8      	ldr	r1, [pc, #736]	; (800c7b8 <dwt_ioctl+0x78c>)
 800c4d8:	f7ff f91e 	bl	800b718 <dwt_modify16bitoffsetreg>
 800c4dc:	e650      	b.n	800c180 <dwt_ioctl+0x154>
 800c4de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c4e2:	9300      	str	r3, [sp, #0]
 800c4e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	49b3      	ldr	r1, [pc, #716]	; (800c7b8 <dwt_ioctl+0x78c>)
 800c4ec:	f7ff f914 	bl	800b718 <dwt_modify16bitoffsetreg>
 800c4f0:	2500      	movs	r5, #0
 800c4f2:	e645      	b.n	800c180 <dwt_ioctl+0x154>
 800c4f4:	f002 0201 	and.w	r2, r2, #1
 800c4f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c4fc:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 800c500:	2a00      	cmp	r2, #0
 800c502:	bf08      	it	eq
 800c504:	460b      	moveq	r3, r1
 800c506:	02d2      	lsls	r2, r2, #11
 800c508:	f015 0f02 	tst.w	r5, #2
 800c50c:	bf12      	itee	ne
 800c50e:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 800c512:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c516:	b29b      	uxtheq	r3, r3
 800c518:	9200      	str	r2, [sp, #0]
 800c51a:	2200      	movs	r2, #0
 800c51c:	49a6      	ldr	r1, [pc, #664]	; (800c7b8 <dwt_ioctl+0x78c>)
 800c51e:	f7ff f8fb 	bl	800b718 <dwt_modify16bitoffsetreg>
 800c522:	2500      	movs	r5, #0
 800c524:	e62c      	b.n	800c180 <dwt_ioctl+0x154>
 800c526:	b92a      	cbnz	r2, 800c534 <dwt_ioctl+0x508>
 800c528:	4ba4      	ldr	r3, [pc, #656]	; (800c7bc <dwt_ioctl+0x790>)
 800c52a:	2202      	movs	r2, #2
 800c52c:	49a4      	ldr	r1, [pc, #656]	; (800c7c0 <dwt_ioctl+0x794>)
 800c52e:	f7fe f913 	bl	800a758 <dwt_write32bitoffsetreg>
 800c532:	e625      	b.n	800c180 <dwt_ioctl+0x154>
 800c534:	4ba3      	ldr	r3, [pc, #652]	; (800c7c4 <dwt_ioctl+0x798>)
 800c536:	2202      	movs	r2, #2
 800c538:	49a1      	ldr	r1, [pc, #644]	; (800c7c0 <dwt_ioctl+0x794>)
 800c53a:	f7fe f90d 	bl	800a758 <dwt_write32bitoffsetreg>
 800c53e:	2500      	movs	r5, #0
 800c540:	e61e      	b.n	800c180 <dwt_ioctl+0x154>
 800c542:	4611      	mov	r1, r2
 800c544:	f7fe f957 	bl	800a7f6 <ull_setlnapamode>
 800c548:	2500      	movs	r5, #0
 800c54a:	e619      	b.n	800c180 <dwt_ioctl+0x154>
 800c54c:	2c00      	cmp	r4, #0
 800c54e:	f001 8467 	beq.w	800de20 <dwt_ioctl+0x1df4>
 800c552:	2200      	movs	r2, #0
 800c554:	499c      	ldr	r1, [pc, #624]	; (800c7c8 <dwt_ioctl+0x79c>)
 800c556:	f7fd fcb2 	bl	8009ebe <dwt_read8bitoffsetreg>
 800c55a:	7020      	strb	r0, [r4, #0]
 800c55c:	2500      	movs	r5, #0
 800c55e:	e60f      	b.n	800c180 <dwt_ioctl+0x154>
 800c560:	4621      	mov	r1, r4
 800c562:	f7fe f969 	bl	800a838 <ull_configurestskey>
 800c566:	2500      	movs	r5, #0
 800c568:	e60a      	b.n	800c180 <dwt_ioctl+0x154>
 800c56a:	4621      	mov	r1, r4
 800c56c:	f7fe f988 	bl	800a880 <ull_configurestsiv>
 800c570:	2500      	movs	r5, #0
 800c572:	e605      	b.n	800c180 <dwt_ioctl+0x154>
 800c574:	2301      	movs	r3, #1
 800c576:	9300      	str	r3, [sp, #0]
 800c578:	23ff      	movs	r3, #255	; 0xff
 800c57a:	2200      	movs	r2, #0
 800c57c:	4993      	ldr	r1, [pc, #588]	; (800c7cc <dwt_ioctl+0x7a0>)
 800c57e:	f7fe feaf 	bl	800b2e0 <dwt_modify8bitoffsetreg>
 800c582:	2500      	movs	r5, #0
 800c584:	e5fc      	b.n	800c180 <dwt_ioctl+0x154>
 800c586:	4611      	mov	r1, r2
 800c588:	f7fe f99e 	bl	800a8c8 <ull_configmrxlut>
 800c58c:	2500      	movs	r5, #0
 800c58e:	e5f7      	b.n	800c180 <dwt_ioctl+0x154>
 800c590:	2318      	movs	r3, #24
 800c592:	2200      	movs	r2, #0
 800c594:	498e      	ldr	r1, [pc, #568]	; (800c7d0 <dwt_ioctl+0x7a4>)
 800c596:	f7fe f8df 	bl	800a758 <dwt_write32bitoffsetreg>
 800c59a:	23e8      	movs	r3, #232	; 0xe8
 800c59c:	2200      	movs	r2, #0
 800c59e:	498d      	ldr	r1, [pc, #564]	; (800c7d4 <dwt_ioctl+0x7a8>)
 800c5a0:	4630      	mov	r0, r6
 800c5a2:	f7fe f8d9 	bl	800a758 <dwt_write32bitoffsetreg>
 800c5a6:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800c5a8:	7d9b      	ldrb	r3, [r3, #22]
 800c5aa:	085b      	lsrs	r3, r3, #1
 800c5ac:	d01a      	beq.n	800c5e4 <dwt_ioctl+0x5b8>
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	4989      	ldr	r1, [pc, #548]	; (800c7d8 <dwt_ioctl+0x7ac>)
 800c5b2:	4630      	mov	r0, r6
 800c5b4:	f7fd fc71 	bl	8009e9a <dwt_read16bitoffsetreg>
 800c5b8:	f3c0 03c4 	ubfx	r3, r0, #3, #5
 800c5bc:	3b09      	subs	r3, #9
 800c5be:	2b0f      	cmp	r3, #15
 800c5c0:	f201 8431 	bhi.w	800de26 <dwt_ioctl+0x1dfa>
 800c5c4:	f000 0001 	and.w	r0, r0, #1
 800c5c8:	2800      	cmp	r0, #0
 800c5ca:	bf0c      	ite	eq
 800c5cc:	2105      	moveq	r1, #5
 800c5ce:	2109      	movne	r1, #9
 800c5d0:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800c5d2:	7a1b      	ldrb	r3, [r3, #8]
 800c5d4:	2b01      	cmp	r3, #1
 800c5d6:	f001 8429 	beq.w	800de2c <dwt_ioctl+0x1e00>
 800c5da:	4630      	mov	r0, r6
 800c5dc:	f7fe f974 	bl	800a8c8 <ull_configmrxlut>
 800c5e0:	2500      	movs	r5, #0
 800c5e2:	e5cd      	b.n	800c180 <dwt_ioctl+0x154>
 800c5e4:	2301      	movs	r3, #1
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	497c      	ldr	r1, [pc, #496]	; (800c7dc <dwt_ioctl+0x7b0>)
 800c5ea:	4630      	mov	r0, r6
 800c5ec:	f7fe fa42 	bl	800aa74 <dwt_write8bitoffsetreg>
 800c5f0:	6d32      	ldr	r2, [r6, #80]	; 0x50
 800c5f2:	7d93      	ldrb	r3, [r2, #22]
 800c5f4:	f043 0302 	orr.w	r3, r3, #2
 800c5f8:	7593      	strb	r3, [r2, #22]
 800c5fa:	e7d8      	b.n	800c5ae <dwt_ioctl+0x582>
 800c5fc:	2c00      	cmp	r4, #0
 800c5fe:	f001 8418 	beq.w	800de32 <dwt_ioctl+0x1e06>
 800c602:	7824      	ldrb	r4, [r4, #0]
 800c604:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800c606:	755c      	strb	r4, [r3, #21]
 800c608:	0323      	lsls	r3, r4, #12
 800c60a:	f403 4330 	and.w	r3, r3, #45056	; 0xb000
 800c60e:	9300      	str	r3, [sp, #0]
 800c610:	f644 73ff 	movw	r3, #20479	; 0x4fff
 800c614:	2200      	movs	r2, #0
 800c616:	2110      	movs	r1, #16
 800c618:	f7ff f87e 	bl	800b718 <dwt_modify16bitoffsetreg>
 800c61c:	f004 0403 	and.w	r4, r4, #3
 800c620:	2c03      	cmp	r4, #3
 800c622:	bf0c      	ite	eq
 800c624:	4b6e      	ldreq	r3, [pc, #440]	; (800c7e0 <dwt_ioctl+0x7b4>)
 800c626:	4b6f      	ldrne	r3, [pc, #444]	; (800c7e4 <dwt_ioctl+0x7b8>)
 800c628:	2200      	movs	r2, #0
 800c62a:	496f      	ldr	r1, [pc, #444]	; (800c7e8 <dwt_ioctl+0x7bc>)
 800c62c:	4630      	mov	r0, r6
 800c62e:	f7fe f893 	bl	800a758 <dwt_write32bitoffsetreg>
 800c632:	2500      	movs	r5, #0
 800c634:	e5a4      	b.n	800c180 <dwt_ioctl+0x154>
 800c636:	2c00      	cmp	r4, #0
 800c638:	f001 83fe 	beq.w	800de38 <dwt_ioctl+0x1e0c>
 800c63c:	8823      	ldrh	r3, [r4, #0]
 800c63e:	2200      	movs	r2, #0
 800c640:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800c644:	f7fe f82b 	bl	800a69e <dwt_write16bitoffsetreg>
 800c648:	2500      	movs	r5, #0
 800c64a:	e599      	b.n	800c180 <dwt_ioctl+0x154>
 800c64c:	2c00      	cmp	r4, #0
 800c64e:	f001 83f6 	beq.w	800de3e <dwt_ioctl+0x1e12>
 800c652:	2200      	movs	r2, #0
 800c654:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800c658:	f7fd fc1f 	bl	8009e9a <dwt_read16bitoffsetreg>
 800c65c:	8020      	strh	r0, [r4, #0]
 800c65e:	2500      	movs	r5, #0
 800c660:	e58e      	b.n	800c180 <dwt_ioctl+0x154>
 800c662:	2c00      	cmp	r4, #0
 800c664:	f001 83ee 	beq.w	800de44 <dwt_ioctl+0x1e18>
 800c668:	8823      	ldrh	r3, [r4, #0]
 800c66a:	2200      	movs	r2, #0
 800c66c:	217c      	movs	r1, #124	; 0x7c
 800c66e:	f7fe f816 	bl	800a69e <dwt_write16bitoffsetreg>
 800c672:	2500      	movs	r5, #0
 800c674:	e584      	b.n	800c180 <dwt_ioctl+0x154>
 800c676:	2c00      	cmp	r4, #0
 800c678:	f001 83e7 	beq.w	800de4a <dwt_ioctl+0x1e1e>
 800c67c:	2200      	movs	r2, #0
 800c67e:	217c      	movs	r1, #124	; 0x7c
 800c680:	f7fd fc0b 	bl	8009e9a <dwt_read16bitoffsetreg>
 800c684:	8020      	strh	r0, [r4, #0]
 800c686:	2500      	movs	r5, #0
 800c688:	e57a      	b.n	800c180 <dwt_ioctl+0x154>
 800c68a:	2c00      	cmp	r4, #0
 800c68c:	f001 83e0 	beq.w	800de50 <dwt_ioctl+0x1e24>
 800c690:	88a3      	ldrh	r3, [r4, #4]
 800c692:	88e2      	ldrh	r2, [r4, #6]
 800c694:	6821      	ldr	r1, [r4, #0]
 800c696:	9100      	str	r1, [sp, #0]
 800c698:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 800c69c:	f7fd fff4 	bl	800a688 <dwt_writetodevice>
 800c6a0:	2500      	movs	r5, #0
 800c6a2:	e56d      	b.n	800c180 <dwt_ioctl+0x154>
 800c6a4:	2c00      	cmp	r4, #0
 800c6a6:	f001 83d6 	beq.w	800de56 <dwt_ioctl+0x1e2a>
 800c6aa:	88a3      	ldrh	r3, [r4, #4]
 800c6ac:	88e2      	ldrh	r2, [r4, #6]
 800c6ae:	6821      	ldr	r1, [r4, #0]
 800c6b0:	9100      	str	r1, [sp, #0]
 800c6b2:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 800c6b6:	f7fd fbd0 	bl	8009e5a <dwt_readfromdevice>
 800c6ba:	2500      	movs	r5, #0
 800c6bc:	e560      	b.n	800c180 <dwt_ioctl+0x154>
 800c6be:	2c00      	cmp	r4, #0
 800c6c0:	f001 83cc 	beq.w	800de5c <dwt_ioctl+0x1e30>
 800c6c4:	88e3      	ldrh	r3, [r4, #6]
 800c6c6:	88a2      	ldrh	r2, [r4, #4]
 800c6c8:	6821      	ldr	r1, [r4, #0]
 800c6ca:	f7fe f99d 	bl	800aa08 <ull_readrxdata>
 800c6ce:	2500      	movs	r5, #0
 800c6d0:	e556      	b.n	800c180 <dwt_ioctl+0x154>
 800c6d2:	2c00      	cmp	r4, #0
 800c6d4:	f001 83c5 	beq.w	800de62 <dwt_ioctl+0x1e36>
 800c6d8:	88e3      	ldrh	r3, [r4, #6]
 800c6da:	6822      	ldr	r2, [r4, #0]
 800c6dc:	88a1      	ldrh	r1, [r4, #4]
 800c6de:	f7fe fac7 	bl	800ac70 <ull_writetxdata>
 800c6e2:	2500      	movs	r5, #0
 800c6e4:	e54c      	b.n	800c180 <dwt_ioctl+0x154>
 800c6e6:	4611      	mov	r1, r2
 800c6e8:	f7ff fc08 	bl	800befc <ull_rxenable>
 800c6ec:	2500      	movs	r5, #0
 800c6ee:	e547      	b.n	800c180 <dwt_ioctl+0x154>
 800c6f0:	2c00      	cmp	r4, #0
 800c6f2:	f001 83b9 	beq.w	800de68 <dwt_ioctl+0x1e3c>
 800c6f6:	7923      	ldrb	r3, [r4, #4]
 800c6f8:	8862      	ldrh	r2, [r4, #2]
 800c6fa:	8821      	ldrh	r1, [r4, #0]
 800c6fc:	f7fe fdbe 	bl	800b27c <ull_writetxfctrl>
 800c700:	2500      	movs	r5, #0
 800c702:	e53d      	b.n	800c180 <dwt_ioctl+0x154>
 800c704:	2c00      	cmp	r4, #0
 800c706:	f001 83b2 	beq.w	800de6e <dwt_ioctl+0x1e42>
 800c70a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800c70c:	7b9b      	ldrb	r3, [r3, #14]
 800c70e:	2b01      	cmp	r3, #1
 800c710:	d00c      	beq.n	800c72c <dwt_ioctl+0x700>
 800c712:	2b03      	cmp	r3, #3
 800c714:	d110      	bne.n	800c738 <dwt_ioctl+0x70c>
 800c716:	220c      	movs	r2, #12
 800c718:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800c71c:	f7fd fbbd 	bl	8009e9a <dwt_read16bitoffsetreg>
 800c720:	b200      	sxth	r0, r0
 800c722:	f340 030c 	sbfx	r3, r0, #0, #13
 800c726:	8023      	strh	r3, [r4, #0]
 800c728:	2500      	movs	r5, #0
 800c72a:	e529      	b.n	800c180 <dwt_ioctl+0x154>
 800c72c:	2200      	movs	r2, #0
 800c72e:	492f      	ldr	r1, [pc, #188]	; (800c7ec <dwt_ioctl+0x7c0>)
 800c730:	f7fd fbb3 	bl	8009e9a <dwt_read16bitoffsetreg>
 800c734:	b200      	sxth	r0, r0
 800c736:	e7f4      	b.n	800c722 <dwt_ioctl+0x6f6>
 800c738:	2200      	movs	r2, #0
 800c73a:	492d      	ldr	r1, [pc, #180]	; (800c7f0 <dwt_ioctl+0x7c4>)
 800c73c:	f7fd fbad 	bl	8009e9a <dwt_read16bitoffsetreg>
 800c740:	b200      	sxth	r0, r0
 800c742:	e7ee      	b.n	800c722 <dwt_ioctl+0x6f6>
 800c744:	2c00      	cmp	r4, #0
 800c746:	f001 8395 	beq.w	800de74 <dwt_ioctl+0x1e48>
 800c74a:	ab0c      	add	r3, sp, #48	; 0x30
 800c74c:	9300      	str	r3, [sp, #0]
 800c74e:	2303      	movs	r3, #3
 800c750:	2200      	movs	r2, #0
 800c752:	4928      	ldr	r1, [pc, #160]	; (800c7f4 <dwt_ioctl+0x7c8>)
 800c754:	f7fd fb81 	bl	8009e5a <dwt_readfromdevice>
 800c758:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 800c75c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 800c760:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 800c764:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800c768:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800c76c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800c770:	bf1c      	itt	ne
 800c772:	ea6f 3303 	mvnne.w	r3, r3, lsl #12
 800c776:	ea6f 3313 	mvnne.w	r3, r3, lsr #12
 800c77a:	6023      	str	r3, [r4, #0]
 800c77c:	2500      	movs	r5, #0
 800c77e:	e4ff      	b.n	800c180 <dwt_ioctl+0x154>
 800c780:	f7fe f9d0 	bl	800ab24 <ull_clearaonconfig>
 800c784:	2500      	movs	r5, #0
 800c786:	e4fb      	b.n	800c180 <dwt_ioctl+0x154>
 800c788:	2c00      	cmp	r4, #0
 800c78a:	f001 8376 	beq.w	800de7a <dwt_ioctl+0x1e4e>
 800c78e:	8861      	ldrh	r1, [r4, #2]
 800c790:	f7fe fdf0 	bl	800b374 <ull_calcbandwidthadj>
 800c794:	7020      	strb	r0, [r4, #0]
 800c796:	2500      	movs	r5, #0
 800c798:	e4f2      	b.n	800c180 <dwt_ioctl+0x154>
 800c79a:	4621      	mov	r1, r4
 800c79c:	f7fd fb9d 	bl	8009eda <ull_readdiagnostics>
 800c7a0:	2500      	movs	r5, #0
 800c7a2:	e4ed      	b.n	800c180 <dwt_ioctl+0x154>
 800c7a4:	2c00      	cmp	r4, #0
 800c7a6:	f001 836b 	beq.w	800de80 <dwt_ioctl+0x1e54>
 800c7aa:	2201      	movs	r2, #1
 800c7ac:	2170      	movs	r1, #112	; 0x70
 800c7ae:	f7fd fb5e 	bl	8009e6e <dwt_read32bitoffsetreg>
 800c7b2:	6020      	str	r0, [r4, #0]
 800c7b4:	2500      	movs	r5, #0
 800c7b6:	e4e3      	b.n	800c180 <dwt_ioctl+0x154>
 800c7b8:	00110008 	.word	0x00110008
 800c7bc:	00d20874 	.word	0x00d20874
 800c7c0:	00110010 	.word	0x00110010
 800c7c4:	04d28874 	.word	0x04d28874
 800c7c8:	0007001c 	.word	0x0007001c
 800c7cc:	00020004 	.word	0x00020004
 800c7d0:	001f000c 	.word	0x001f000c
 800c7d4:	001f0010 	.word	0x001f0010
 800c7d8:	00010008 	.word	0x00010008
 800c7dc:	00010020 	.word	0x00010020
 800c7e0:	af5f35cc 	.word	0xaf5f35cc
 800c7e4:	af5f584c 	.word	0xaf5f584c
 800c7e8:	0006000c 	.word	0x0006000c
 800c7ec:	0018000c 	.word	0x0018000c
 800c7f0:	000c0020 	.word	0x000c0020
 800c7f4:	00060029 	.word	0x00060029
 800c7f8:	2c00      	cmp	r4, #0
 800c7fa:	f001 8344 	beq.w	800de86 <dwt_ioctl+0x1e5a>
 800c7fe:	2200      	movs	r2, #0
 800c800:	2170      	movs	r1, #112	; 0x70
 800c802:	f7fd fb34 	bl	8009e6e <dwt_read32bitoffsetreg>
 800c806:	6020      	str	r0, [r4, #0]
 800c808:	2500      	movs	r5, #0
 800c80a:	e4b9      	b.n	800c180 <dwt_ioctl+0x154>
 800c80c:	9400      	str	r4, [sp, #0]
 800c80e:	2305      	movs	r3, #5
 800c810:	2200      	movs	r2, #0
 800c812:	2170      	movs	r1, #112	; 0x70
 800c814:	f7fd fb21 	bl	8009e5a <dwt_readfromdevice>
 800c818:	2500      	movs	r5, #0
 800c81a:	e4b1      	b.n	800c180 <dwt_ioctl+0x154>
 800c81c:	2c00      	cmp	r4, #0
 800c81e:	f001 8335 	beq.w	800de8c <dwt_ioctl+0x1e60>
 800c822:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800c824:	7b9b      	ldrb	r3, [r3, #14]
 800c826:	2b01      	cmp	r3, #1
 800c828:	d014      	beq.n	800c854 <dwt_ioctl+0x828>
 800c82a:	2b03      	cmp	r3, #3
 800c82c:	d119      	bne.n	800c862 <dwt_ioctl+0x836>
 800c82e:	2216      	movs	r2, #22
 800c830:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800c834:	f7fd fb31 	bl	8009e9a <dwt_read16bitoffsetreg>
 800c838:	f3c0 000d 	ubfx	r0, r0, #0, #14
 800c83c:	b283      	uxth	r3, r0
 800c83e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800c842:	d004      	beq.n	800c84e <dwt_ioctl+0x822>
 800c844:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 800c848:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 800c84c:	b218      	sxth	r0, r3
 800c84e:	8020      	strh	r0, [r4, #0]
 800c850:	2500      	movs	r5, #0
 800c852:	e495      	b.n	800c180 <dwt_ioctl+0x154>
 800c854:	2202      	movs	r2, #2
 800c856:	49d6      	ldr	r1, [pc, #856]	; (800cbb0 <dwt_ioctl+0xb84>)
 800c858:	f7fd fb1f 	bl	8009e9a <dwt_read16bitoffsetreg>
 800c85c:	f3c0 000d 	ubfx	r0, r0, #0, #14
 800c860:	e7ec      	b.n	800c83c <dwt_ioctl+0x810>
 800c862:	2202      	movs	r2, #2
 800c864:	49d3      	ldr	r1, [pc, #844]	; (800cbb4 <dwt_ioctl+0xb88>)
 800c866:	f7fd fb18 	bl	8009e9a <dwt_read16bitoffsetreg>
 800c86a:	f3c0 000d 	ubfx	r0, r0, #0, #14
 800c86e:	e7e5      	b.n	800c83c <dwt_ioctl+0x810>
 800c870:	9400      	str	r4, [sp, #0]
 800c872:	2306      	movs	r3, #6
 800c874:	2200      	movs	r2, #0
 800c876:	49d0      	ldr	r1, [pc, #832]	; (800cbb8 <dwt_ioctl+0xb8c>)
 800c878:	f7fd faef 	bl	8009e5a <dwt_readfromdevice>
 800c87c:	7963      	ldrb	r3, [r4, #5]
 800c87e:	f003 0301 	and.w	r3, r3, #1
 800c882:	7163      	strb	r3, [r4, #5]
 800c884:	2500      	movs	r5, #0
 800c886:	e47b      	b.n	800c180 <dwt_ioctl+0x154>
 800c888:	2c00      	cmp	r4, #0
 800c88a:	f001 8302 	beq.w	800de92 <dwt_ioctl+0x1e66>
 800c88e:	2201      	movs	r2, #1
 800c890:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 800c894:	f7fd fb13 	bl	8009ebe <dwt_read8bitoffsetreg>
 800c898:	7020      	strb	r0, [r4, #0]
 800c89a:	2500      	movs	r5, #0
 800c89c:	e470      	b.n	800c180 <dwt_ioctl+0x154>
 800c89e:	2c00      	cmp	r4, #0
 800c8a0:	f001 82fa 	beq.w	800de98 <dwt_ioctl+0x1e6c>
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 800c8aa:	f7fd fb08 	bl	8009ebe <dwt_read8bitoffsetreg>
 800c8ae:	7020      	strb	r0, [r4, #0]
 800c8b0:	2500      	movs	r5, #0
 800c8b2:	e465      	b.n	800c180 <dwt_ioctl+0x154>
 800c8b4:	2c00      	cmp	r4, #0
 800c8b6:	f001 82f2 	beq.w	800de9e <dwt_ioctl+0x1e72>
 800c8ba:	88a2      	ldrh	r2, [r4, #4]
 800c8bc:	6821      	ldr	r1, [r4, #0]
 800c8be:	f7fe fc07 	bl	800b0d0 <_dwt_otpprogword32>
 800c8c2:	2500      	movs	r5, #0
 800c8c4:	e45c      	b.n	800c180 <dwt_ioctl+0x154>
 800c8c6:	2c00      	cmp	r4, #0
 800c8c8:	f001 82ec 	beq.w	800dea4 <dwt_ioctl+0x1e78>
 800c8cc:	6825      	ldr	r5, [r4, #0]
 800c8ce:	88a4      	ldrh	r4, [r4, #4]
 800c8d0:	4622      	mov	r2, r4
 800c8d2:	4629      	mov	r1, r5
 800c8d4:	f7fe fbfc 	bl	800b0d0 <_dwt_otpprogword32>
 800c8d8:	4621      	mov	r1, r4
 800c8da:	4630      	mov	r0, r6
 800c8dc:	f7fd ff1a 	bl	800a714 <_dwt_otpread>
 800c8e0:	1a2d      	subs	r5, r5, r0
 800c8e2:	bf18      	it	ne
 800c8e4:	f04f 35ff 	movne.w	r5, #4294967295
 800c8e8:	e44a      	b.n	800c180 <dwt_ioctl+0x154>
 800c8ea:	2a02      	cmp	r2, #2
 800c8ec:	d00e      	beq.n	800c90c <dwt_ioctl+0x8e0>
 800c8ee:	4cb3      	ldr	r4, [pc, #716]	; (800cbbc <dwt_ioctl+0xb90>)
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	461a      	mov	r2, r3
 800c8f4:	4621      	mov	r1, r4
 800c8f6:	4630      	mov	r0, r6
 800c8f8:	f7fe f8bc 	bl	800aa74 <dwt_write8bitoffsetreg>
 800c8fc:	2302      	movs	r3, #2
 800c8fe:	2200      	movs	r2, #0
 800c900:	4621      	mov	r1, r4
 800c902:	4630      	mov	r0, r6
 800c904:	f7fe f8b6 	bl	800aa74 <dwt_write8bitoffsetreg>
 800c908:	2500      	movs	r5, #0
 800c90a:	e439      	b.n	800c180 <dwt_ioctl+0x154>
 800c90c:	2300      	movs	r3, #0
 800c90e:	9300      	str	r3, [sp, #0]
 800c910:	23fe      	movs	r3, #254	; 0xfe
 800c912:	2201      	movs	r2, #1
 800c914:	49aa      	ldr	r1, [pc, #680]	; (800cbc0 <dwt_ioctl+0xb94>)
 800c916:	f7fe fce3 	bl	800b2e0 <dwt_modify8bitoffsetreg>
 800c91a:	e7e8      	b.n	800c8ee <dwt_ioctl+0x8c2>
 800c91c:	2c00      	cmp	r4, #0
 800c91e:	f001 82c4 	beq.w	800deaa <dwt_ioctl+0x1e7e>
 800c922:	8824      	ldrh	r4, [r4, #0]
 800c924:	b2e2      	uxtb	r2, r4
 800c926:	f44f 7181 	mov.w	r1, #258	; 0x102
 800c92a:	f7fe f94f 	bl	800abcc <ull_aon_write>
 800c92e:	0a22      	lsrs	r2, r4, #8
 800c930:	f240 1103 	movw	r1, #259	; 0x103
 800c934:	4630      	mov	r0, r6
 800c936:	f7fe f949 	bl	800abcc <ull_aon_write>
 800c93a:	2500      	movs	r5, #0
 800c93c:	e420      	b.n	800c180 <dwt_ioctl+0x154>
 800c93e:	2c00      	cmp	r4, #0
 800c940:	f001 82b6 	beq.w	800deb0 <dwt_ioctl+0x1e84>
 800c944:	f8df 8284 	ldr.w	r8, [pc, #644]	; 800cbcc <dwt_ioctl+0xba0>
 800c948:	2310      	movs	r3, #16
 800c94a:	9300      	str	r3, [sp, #0]
 800c94c:	23ff      	movs	r3, #255	; 0xff
 800c94e:	2200      	movs	r2, #0
 800c950:	4641      	mov	r1, r8
 800c952:	f7fe fcc5 	bl	800b2e0 <dwt_modify8bitoffsetreg>
 800c956:	f44f 7182 	mov.w	r1, #260	; 0x104
 800c95a:	4630      	mov	r0, r6
 800c95c:	f7fe f916 	bl	800ab8c <ull_aon_read>
 800c960:	f000 05e0 	and.w	r5, r0, #224	; 0xe0
 800c964:	462a      	mov	r2, r5
 800c966:	f44f 7182 	mov.w	r1, #260	; 0x104
 800c96a:	4630      	mov	r0, r6
 800c96c:	f7fe f92e 	bl	800abcc <ull_aon_write>
 800c970:	f045 0204 	orr.w	r2, r5, #4
 800c974:	f44f 7182 	mov.w	r1, #260	; 0x104
 800c978:	4630      	mov	r0, r6
 800c97a:	f7fe f927 	bl	800abcc <ull_aon_write>
 800c97e:	2002      	movs	r0, #2
 800c980:	f7f3 fdc4 	bl	800050c <deca_sleep>
 800c984:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800c988:	4630      	mov	r0, r6
 800c98a:	f7fe f8ff 	bl	800ab8c <ull_aon_read>
 800c98e:	4607      	mov	r7, r0
 800c990:	f240 110f 	movw	r1, #271	; 0x10f
 800c994:	4630      	mov	r0, r6
 800c996:	f7fe f8f9 	bl	800ab8c <ull_aon_read>
 800c99a:	4681      	mov	r9, r0
 800c99c:	462a      	mov	r2, r5
 800c99e:	f44f 7182 	mov.w	r1, #260	; 0x104
 800c9a2:	4630      	mov	r0, r6
 800c9a4:	f7fe f912 	bl	800abcc <ull_aon_write>
 800c9a8:	2500      	movs	r5, #0
 800c9aa:	9500      	str	r5, [sp, #0]
 800c9ac:	23ef      	movs	r3, #239	; 0xef
 800c9ae:	462a      	mov	r2, r5
 800c9b0:	4641      	mov	r1, r8
 800c9b2:	4630      	mov	r0, r6
 800c9b4:	f7fe fc94 	bl	800b2e0 <dwt_modify8bitoffsetreg>
 800c9b8:	ea47 2709 	orr.w	r7, r7, r9, lsl #8
 800c9bc:	8027      	strh	r7, [r4, #0]
 800c9be:	f7ff bbdf 	b.w	800c180 <dwt_ioctl+0x154>
 800c9c2:	2c00      	cmp	r4, #0
 800c9c4:	f001 8277 	beq.w	800deb6 <dwt_ioctl+0x1e8a>
 800c9c8:	78a2      	ldrb	r2, [r4, #2]
 800c9ca:	8821      	ldrh	r1, [r4, #0]
 800c9cc:	f7fe f926 	bl	800ac1c <ull_configuresleep>
 800c9d0:	2500      	movs	r5, #0
 800c9d2:	f7ff bbd5 	b.w	800c180 <dwt_ioctl+0x154>
 800c9d6:	2c00      	cmp	r4, #0
 800c9d8:	f001 8270 	beq.w	800debc <dwt_ioctl+0x1e90>
 800c9dc:	6824      	ldr	r4, [r4, #0]
 800c9de:	f7fe f8a1 	bl	800ab24 <ull_clearaonconfig>
 800c9e2:	2001      	movs	r0, #1
 800c9e4:	f7f3 fd92 	bl	800050c <deca_sleep>
 800c9e8:	2303      	movs	r3, #3
 800c9ea:	9300      	str	r3, [sp, #0]
 800c9ec:	23ff      	movs	r3, #255	; 0xff
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	4974      	ldr	r1, [pc, #464]	; (800cbc4 <dwt_ioctl+0xb98>)
 800c9f2:	4630      	mov	r0, r6
 800c9f4:	f7fe fc74 	bl	800b2e0 <dwt_modify8bitoffsetreg>
 800c9f8:	b97c      	cbnz	r4, 800ca1a <dwt_ioctl+0x9ee>
 800c9fa:	4630      	mov	r0, r6
 800c9fc:	f7ff faee 	bl	800bfdc <ull_softreset_no_sema_fcmd>
 800ca00:	2001      	movs	r0, #1
 800ca02:	f7f3 fd83 	bl	800050c <deca_sleep>
 800ca06:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800ca08:	2500      	movs	r5, #0
 800ca0a:	739d      	strb	r5, [r3, #14]
 800ca0c:	2202      	movs	r2, #2
 800ca0e:	821a      	strh	r2, [r3, #16]
 800ca10:	751d      	strb	r5, [r3, #20]
 800ca12:	755d      	strb	r5, [r3, #21]
 800ca14:	73dd      	strb	r5, [r3, #15]
 800ca16:	f7ff bbb3 	b.w	800c180 <dwt_ioctl+0x154>
 800ca1a:	4630      	mov	r0, r6
 800ca1c:	f7ff faf2 	bl	800c004 <ull_softreset_fcmd>
 800ca20:	e7ee      	b.n	800ca00 <dwt_ioctl+0x9d4>
 800ca22:	2c00      	cmp	r4, #0
 800ca24:	f001 824d 	beq.w	800dec2 <dwt_ioctl+0x1e96>
 800ca28:	7823      	ldrb	r3, [r4, #0]
 800ca2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca2e:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800ca30:	7353      	strb	r3, [r2, #13]
 800ca32:	2200      	movs	r2, #0
 800ca34:	4964      	ldr	r1, [pc, #400]	; (800cbc8 <dwt_ioctl+0xb9c>)
 800ca36:	f7fe f81d 	bl	800aa74 <dwt_write8bitoffsetreg>
 800ca3a:	2500      	movs	r5, #0
 800ca3c:	f7ff bba0 	b.w	800c180 <dwt_ioctl+0x154>
 800ca40:	2c00      	cmp	r4, #0
 800ca42:	f001 8241 	beq.w	800dec8 <dwt_ioctl+0x1e9c>
 800ca46:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800ca48:	7b5b      	ldrb	r3, [r3, #13]
 800ca4a:	7023      	strb	r3, [r4, #0]
 800ca4c:	2500      	movs	r5, #0
 800ca4e:	f7ff bb97 	b.w	800c180 <dwt_ioctl+0x154>
 800ca52:	2101      	movs	r1, #1
 800ca54:	f7fe faf6 	bl	800b044 <ull_enable_rf_tx>
 800ca58:	4630      	mov	r0, r6
 800ca5a:	f7fe fb27 	bl	800b0ac <ull_enable_rftx_blocks>
 800ca5e:	2101      	movs	r1, #1
 800ca60:	4630      	mov	r0, r6
 800ca62:	f7fd fe2d 	bl	800a6c0 <ull_force_clocks>
 800ca66:	220f      	movs	r2, #15
 800ca68:	2101      	movs	r1, #1
 800ca6a:	4630      	mov	r0, r6
 800ca6c:	f7fe ff48 	bl	800b900 <ull_repeated_cw>
 800ca70:	2500      	movs	r5, #0
 800ca72:	f7ff bb85 	b.w	800c180 <dwt_ioctl+0x154>
 800ca76:	2c00      	cmp	r4, #0
 800ca78:	f001 8229 	beq.w	800dece <dwt_ioctl+0x1ea2>
 800ca7c:	6862      	ldr	r2, [r4, #4]
 800ca7e:	6821      	ldr	r1, [r4, #0]
 800ca80:	f7fe ff3e 	bl	800b900 <ull_repeated_cw>
 800ca84:	2500      	movs	r5, #0
 800ca86:	f7ff bb7b 	b.w	800c180 <dwt_ioctl+0x154>
 800ca8a:	2c00      	cmp	r4, #0
 800ca8c:	f001 8222 	beq.w	800ded4 <dwt_ioctl+0x1ea8>
 800ca90:	4d4e      	ldr	r5, [pc, #312]	; (800cbcc <dwt_ioctl+0xba0>)
 800ca92:	2200      	movs	r2, #0
 800ca94:	4629      	mov	r1, r5
 800ca96:	f7fd fa12 	bl	8009ebe <dwt_read8bitoffsetreg>
 800ca9a:	4680      	mov	r8, r0
 800ca9c:	2302      	movs	r3, #2
 800ca9e:	9300      	str	r3, [sp, #0]
 800caa0:	23ff      	movs	r3, #255	; 0xff
 800caa2:	2200      	movs	r2, #0
 800caa4:	4629      	mov	r1, r5
 800caa6:	4630      	mov	r0, r6
 800caa8:	f7fe fc1a 	bl	800b2e0 <dwt_modify8bitoffsetreg>
 800caac:	2304      	movs	r3, #4
 800caae:	2200      	movs	r2, #0
 800cab0:	4947      	ldr	r1, [pc, #284]	; (800cbd0 <dwt_ioctl+0xba4>)
 800cab2:	4630      	mov	r0, r6
 800cab4:	f7fd ffde 	bl	800aa74 <dwt_write8bitoffsetreg>
 800cab8:	2301      	movs	r3, #1
 800caba:	2200      	movs	r2, #0
 800cabc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800cac0:	4630      	mov	r0, r6
 800cac2:	f7fd ffd7 	bl	800aa74 <dwt_write8bitoffsetreg>
 800cac6:	4f43      	ldr	r7, [pc, #268]	; (800cbd4 <dwt_ioctl+0xba8>)
 800cac8:	2500      	movs	r5, #0
 800caca:	462a      	mov	r2, r5
 800cacc:	4639      	mov	r1, r7
 800cace:	4630      	mov	r0, r6
 800cad0:	f7fd f9f5 	bl	8009ebe <dwt_read8bitoffsetreg>
 800cad4:	f010 0f01 	tst.w	r0, #1
 800cad8:	d0f7      	beq.n	800caca <dwt_ioctl+0xa9e>
 800cada:	2200      	movs	r2, #0
 800cadc:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 800cae0:	4630      	mov	r0, r6
 800cae2:	f7fd f9da 	bl	8009e9a <dwt_read16bitoffsetreg>
 800cae6:	4605      	mov	r5, r0
 800cae8:	2300      	movs	r3, #0
 800caea:	461a      	mov	r2, r3
 800caec:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800caf0:	4630      	mov	r0, r6
 800caf2:	f7fd ffbf 	bl	800aa74 <dwt_write8bitoffsetreg>
 800caf6:	2300      	movs	r3, #0
 800caf8:	461a      	mov	r2, r3
 800cafa:	4935      	ldr	r1, [pc, #212]	; (800cbd0 <dwt_ioctl+0xba4>)
 800cafc:	4630      	mov	r0, r6
 800cafe:	f7fd ffb9 	bl	800aa74 <dwt_write8bitoffsetreg>
 800cb02:	4643      	mov	r3, r8
 800cb04:	2200      	movs	r2, #0
 800cb06:	4931      	ldr	r1, [pc, #196]	; (800cbcc <dwt_ioctl+0xba0>)
 800cb08:	4630      	mov	r0, r6
 800cb0a:	f7fd ffb3 	bl	800aa74 <dwt_write8bitoffsetreg>
 800cb0e:	8025      	strh	r5, [r4, #0]
 800cb10:	2500      	movs	r5, #0
 800cb12:	f7ff bb35 	b.w	800c180 <dwt_ioctl+0x154>
 800cb16:	2c00      	cmp	r4, #0
 800cb18:	f001 81df 	beq.w	800deda <dwt_ioctl+0x1eae>
 800cb1c:	7923      	ldrb	r3, [r4, #4]
 800cb1e:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800cb20:	7a92      	ldrb	r2, [r2, #10]
 800cb22:	1a9b      	subs	r3, r3, r2
 800cb24:	ee07 3a90 	vmov	s15, r3
 800cb28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cb2c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800cbd8 <dwt_ioctl+0xbac>
 800cb30:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cb34:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 800cb38:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cb3c:	edc4 7a00 	vstr	s15, [r4]
 800cb40:	2500      	movs	r5, #0
 800cb42:	f7ff bb1d 	b.w	800c180 <dwt_ioctl+0x154>
 800cb46:	2c00      	cmp	r4, #0
 800cb48:	f001 81ca 	beq.w	800dee0 <dwt_ioctl+0x1eb4>
 800cb4c:	7923      	ldrb	r3, [r4, #4]
 800cb4e:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800cb50:	7a52      	ldrb	r2, [r2, #9]
 800cb52:	1a9b      	subs	r3, r3, r2
 800cb54:	ee07 3a90 	vmov	s15, r3
 800cb58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cb5c:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800cbdc <dwt_ioctl+0xbb0>
 800cb60:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cb64:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800cb68:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cb6c:	eddf 6a1c 	vldr	s13, [pc, #112]	; 800cbe0 <dwt_ioctl+0xbb4>
 800cb70:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800cb74:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 800cb78:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cb7c:	edc4 7a00 	vstr	s15, [r4]
 800cb80:	2500      	movs	r5, #0
 800cb82:	f7ff bafd 	b.w	800c180 <dwt_ioctl+0x154>
 800cb86:	2c00      	cmp	r4, #0
 800cb88:	f001 81ad 	beq.w	800dee6 <dwt_ioctl+0x1eba>
 800cb8c:	6824      	ldr	r4, [r4, #0]
 800cb8e:	2101      	movs	r1, #1
 800cb90:	f7fe fa58 	bl	800b044 <ull_enable_rf_tx>
 800cb94:	4630      	mov	r0, r6
 800cb96:	f7fe fa89 	bl	800b0ac <ull_enable_rftx_blocks>
 800cb9a:	2101      	movs	r1, #1
 800cb9c:	4630      	mov	r0, r6
 800cb9e:	f7fd fd8f 	bl	800a6c0 <ull_force_clocks>
 800cba2:	4621      	mov	r1, r4
 800cba4:	4630      	mov	r0, r6
 800cba6:	f7fe fc41 	bl	800b42c <ull_repeated_frames>
 800cbaa:	2500      	movs	r5, #0
 800cbac:	f7ff bae8 	b.w	800c180 <dwt_ioctl+0x154>
 800cbb0:	00180014 	.word	0x00180014
 800cbb4:	000c001c 	.word	0x000c001c
 800cbb8:	000c0018 	.word	0x000c0018
 800cbbc:	000a0004 	.word	0x000a0004
 800cbc0:	00110008 	.word	0x00110008
 800cbc4:	00110004 	.word	0x00110004
 800cbc8:	00090014 	.word	0x00090014
 800cbcc:	00070048 	.word	0x00070048
 800cbd0:	00070034 	.word	0x00070034
 800cbd4:	00080004 	.word	0x00080004
 800cbd8:	3f866666 	.word	0x3f866666
 800cbdc:	3ecccccd 	.word	0x3ecccccd
 800cbe0:	437f0000 	.word	0x437f0000
 800cbe4:	2500      	movs	r5, #0
 800cbe6:	9500      	str	r5, [sp, #0]
 800cbe8:	23ef      	movs	r3, #239	; 0xef
 800cbea:	462a      	mov	r2, r5
 800cbec:	49c7      	ldr	r1, [pc, #796]	; (800cf0c <dwt_ioctl+0xee0>)
 800cbee:	f7fe fb77 	bl	800b2e0 <dwt_modify8bitoffsetreg>
 800cbf2:	2105      	movs	r1, #5
 800cbf4:	4630      	mov	r0, r6
 800cbf6:	f7fd fd63 	bl	800a6c0 <ull_force_clocks>
 800cbfa:	2101      	movs	r1, #1
 800cbfc:	4630      	mov	r0, r6
 800cbfe:	f7fd fee5 	bl	800a9cc <ull_disable_rf_tx>
 800cc02:	4630      	mov	r0, r6
 800cc04:	f7fd fed8 	bl	800a9b8 <ull_disable_rftx_blocks>
 800cc08:	f7ff baba 	b.w	800c180 <dwt_ioctl+0x154>
 800cc0c:	2500      	movs	r5, #0
 800cc0e:	9500      	str	r5, [sp, #0]
 800cc10:	23ef      	movs	r3, #239	; 0xef
 800cc12:	462a      	mov	r2, r5
 800cc14:	49bd      	ldr	r1, [pc, #756]	; (800cf0c <dwt_ioctl+0xee0>)
 800cc16:	f7fe fb63 	bl	800b2e0 <dwt_modify8bitoffsetreg>
 800cc1a:	f7ff bab1 	b.w	800c180 <dwt_ioctl+0x154>
 800cc1e:	2c00      	cmp	r4, #0
 800cc20:	f001 8164 	beq.w	800deec <dwt_ioctl+0x1ec0>
 800cc24:	6821      	ldr	r1, [r4, #0]
 800cc26:	f7fe fc01 	bl	800b42c <ull_repeated_frames>
 800cc2a:	2500      	movs	r5, #0
 800cc2c:	f7ff baa8 	b.w	800c180 <dwt_ioctl+0x154>
 800cc30:	2200      	movs	r2, #0
 800cc32:	49b7      	ldr	r1, [pc, #732]	; (800cf10 <dwt_ioctl+0xee4>)
 800cc34:	f7fd f931 	bl	8009e9a <dwt_read16bitoffsetreg>
 800cc38:	f3c0 050b 	ubfx	r5, r0, #0, #12
 800cc3c:	f410 6f00 	tst.w	r0, #2048	; 0x800
 800cc40:	bf18      	it	ne
 800cc42:	f445 4570 	orrne.w	r5, r5, #61440	; 0xf000
 800cc46:	b22d      	sxth	r5, r5
 800cc48:	8025      	strh	r5, [r4, #0]
 800cc4a:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800cc4c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800cc50:	1aed      	subs	r5, r5, r3
 800cc52:	f7ff ba95 	b.w	800c180 <dwt_ioctl+0x154>
 800cc56:	2c00      	cmp	r4, #0
 800cc58:	f001 814b 	beq.w	800def2 <dwt_ioctl+0x1ec6>
 800cc5c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800cc60:	7a23      	ldrb	r3, [r4, #8]
 800cc62:	f899 2013 	ldrb.w	r2, [r9, #19]
 800cc66:	2aff      	cmp	r2, #255	; 0xff
 800cc68:	f000 8122 	beq.w	800ceb0 <dwt_ioctl+0xe84>
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d136      	bne.n	800ccde <dwt_ioctl+0xcb2>
 800cc70:	f8d9 3000 	ldr.w	r3, [r9]
 800cc74:	9300      	str	r3, [sp, #0]
 800cc76:	230c      	movs	r3, #12
 800cc78:	2200      	movs	r2, #0
 800cc7a:	49a6      	ldr	r1, [pc, #664]	; (800cf14 <dwt_ioctl+0xee8>)
 800cc7c:	f7fd fd04 	bl	800a688 <dwt_writetodevice>
 800cc80:	f899 300c 	ldrb.w	r3, [r9, #12]
 800cc84:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 800cc88:	18d1      	adds	r1, r2, r3
 800cc8a:	f899 2012 	ldrb.w	r2, [r9, #18]
 800cc8e:	2a00      	cmp	r2, #0
 800cc90:	d15f      	bne.n	800cd52 <dwt_ioctl+0xd26>
 800cc92:	f899 0010 	ldrb.w	r0, [r9, #16]
 800cc96:	2800      	cmp	r0, #0
 800cc98:	bf0b      	itete	eq
 800cc9a:	227f      	moveq	r2, #127	; 0x7f
 800cc9c:	f44f 6280 	movne.w	r2, #1024	; 0x400
 800cca0:	f44f 15b0 	moveq.w	r5, #1441792	; 0x160000
 800cca4:	f44f 15a0 	movne.w	r5, #1310720	; 0x140000
 800cca8:	f899 0013 	ldrb.w	r0, [r9, #19]
 800ccac:	1a12      	subs	r2, r2, r0
 800ccae:	3a02      	subs	r2, #2
 800ccb0:	4291      	cmp	r1, r2
 800ccb2:	f200 8103 	bhi.w	800cebc <dwt_ioctl+0xe90>
 800ccb6:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800ccba:	9200      	str	r2, [sp, #0]
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	4629      	mov	r1, r5
 800ccc0:	4630      	mov	r0, r6
 800ccc2:	f7fd fce1 	bl	800a688 <dwt_writetodevice>
 800ccc6:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 800ccca:	f899 200c 	ldrb.w	r2, [r9, #12]
 800ccce:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800ccd2:	9100      	str	r1, [sp, #0]
 800ccd4:	4629      	mov	r1, r5
 800ccd6:	4630      	mov	r0, r6
 800ccd8:	f7fd fcd6 	bl	800a688 <dwt_writetodevice>
 800ccdc:	e04a      	b.n	800cd74 <dwt_ioctl+0xd48>
 800ccde:	f8d9 3000 	ldr.w	r3, [r9]
 800cce2:	f8b9 100e 	ldrh.w	r1, [r9, #14]
 800cce6:	7a9a      	ldrb	r2, [r3, #10]
 800cce8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
 800ccec:	7a5a      	ldrb	r2, [r3, #9]
 800ccee:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
 800ccf2:	7a1a      	ldrb	r2, [r3, #8]
 800ccf4:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
 800ccf8:	79da      	ldrb	r2, [r3, #7]
 800ccfa:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 800ccfe:	799a      	ldrb	r2, [r3, #6]
 800cd00:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 800cd04:	795a      	ldrb	r2, [r3, #5]
 800cd06:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
 800cd0a:	791a      	ldrb	r2, [r3, #4]
 800cd0c:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 800cd10:	78da      	ldrb	r2, [r3, #3]
 800cd12:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
 800cd16:	789a      	ldrb	r2, [r3, #2]
 800cd18:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
 800cd1c:	785a      	ldrb	r2, [r3, #1]
 800cd1e:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
 800cd22:	781a      	ldrb	r2, [r3, #0]
 800cd24:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 800cd28:	2200      	movs	r2, #0
 800cd2a:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
 800cd2e:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 800cd32:	0a09      	lsrs	r1, r1, #8
 800cd34:	f88d 103d 	strb.w	r1, [sp, #61]	; 0x3d
 800cd38:	7b19      	ldrb	r1, [r3, #12]
 800cd3a:	f88d 103e 	strb.w	r1, [sp, #62]	; 0x3e
 800cd3e:	7adb      	ldrb	r3, [r3, #11]
 800cd40:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 800cd44:	ab0c      	add	r3, sp, #48	; 0x30
 800cd46:	9300      	str	r3, [sp, #0]
 800cd48:	2310      	movs	r3, #16
 800cd4a:	4972      	ldr	r1, [pc, #456]	; (800cf14 <dwt_ioctl+0xee8>)
 800cd4c:	f7fd fc9c 	bl	800a688 <dwt_writetodevice>
 800cd50:	e796      	b.n	800cc80 <dwt_ioctl+0xc54>
 800cd52:	2a01      	cmp	r2, #1
 800cd54:	f040 80af 	bne.w	800ceb6 <dwt_ioctl+0xe8a>
 800cd58:	f899 3011 	ldrb.w	r3, [r9, #17]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800cd62:	bf08      	it	eq
 800cd64:	237f      	moveq	r3, #127	; 0x7f
 800cd66:	f899 2013 	ldrb.w	r2, [r9, #19]
 800cd6a:	1a9b      	subs	r3, r3, r2
 800cd6c:	3b02      	subs	r3, #2
 800cd6e:	4299      	cmp	r1, r3
 800cd70:	f200 80a7 	bhi.w	800cec2 <dwt_ioctl+0xe96>
 800cd74:	f899 2010 	ldrb.w	r2, [r9, #16]
 800cd78:	1e53      	subs	r3, r2, #1
 800cd7a:	b2db      	uxtb	r3, r3
 800cd7c:	2b01      	cmp	r3, #1
 800cd7e:	d940      	bls.n	800ce02 <dwt_ioctl+0xdd6>
 800cd80:	f899 3011 	ldrb.w	r3, [r9, #17]
 800cd84:	1e59      	subs	r1, r3, #1
 800cd86:	b2c9      	uxtb	r1, r1
 800cd88:	2901      	cmp	r1, #1
 800cd8a:	d947      	bls.n	800ce1c <dwt_ioctl+0xdf0>
 800cd8c:	2b04      	cmp	r3, #4
 800cd8e:	d04c      	beq.n	800ce2a <dwt_ioctl+0xdfe>
 800cd90:	ea42 3343 	orr.w	r3, r2, r3, lsl #13
 800cd94:	2200      	movs	r2, #0
 800cd96:	4960      	ldr	r1, [pc, #384]	; (800cf18 <dwt_ioctl+0xeec>)
 800cd98:	4630      	mov	r0, r6
 800cd9a:	f7fd fcdd 	bl	800a758 <dwt_write32bitoffsetreg>
 800cd9e:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 800cda2:	4a5e      	ldr	r2, [pc, #376]	; (800cf1c <dwt_ioctl+0xef0>)
 800cda4:	ea02 12c3 	and.w	r2, r2, r3, lsl #7
 800cda8:	f899 300c 	ldrb.w	r3, [r9, #12]
 800cdac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cdb0:	4313      	orrs	r3, r2
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	495a      	ldr	r1, [pc, #360]	; (800cf20 <dwt_ioctl+0xef4>)
 800cdb6:	4630      	mov	r0, r6
 800cdb8:	f7fd fcce 	bl	800a758 <dwt_write32bitoffsetreg>
 800cdbc:	2301      	movs	r3, #1
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	4958      	ldr	r1, [pc, #352]	; (800cf24 <dwt_ioctl+0xef8>)
 800cdc2:	4630      	mov	r0, r6
 800cdc4:	f7fd fe56 	bl	800aa74 <dwt_write8bitoffsetreg>
 800cdc8:	f8df 815c 	ldr.w	r8, [pc, #348]	; 800cf28 <dwt_ioctl+0xefc>
 800cdcc:	2700      	movs	r7, #0
 800cdce:	463a      	mov	r2, r7
 800cdd0:	4641      	mov	r1, r8
 800cdd2:	4630      	mov	r0, r6
 800cdd4:	f7fd f873 	bl	8009ebe <dwt_read8bitoffsetreg>
 800cdd8:	f010 0f05 	tst.w	r0, #5
 800cddc:	d0f7      	beq.n	800cdce <dwt_ioctl+0xda2>
 800cdde:	4605      	mov	r5, r0
 800cde0:	4603      	mov	r3, r0
 800cde2:	2200      	movs	r2, #0
 800cde4:	4950      	ldr	r1, [pc, #320]	; (800cf28 <dwt_ioctl+0xefc>)
 800cde6:	4630      	mov	r0, r6
 800cde8:	f7fd fe44 	bl	800aa74 <dwt_write8bitoffsetreg>
 800cdec:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 800cdf0:	f025 0330 	bic.w	r3, r5, #48	; 0x30
 800cdf4:	2b01      	cmp	r3, #1
 800cdf6:	d025      	beq.n	800ce44 <dwt_ioctl+0xe18>
 800cdf8:	b26b      	sxtb	r3, r5
 800cdfa:	7023      	strb	r3, [r4, #0]
 800cdfc:	2500      	movs	r5, #0
 800cdfe:	f7ff b9bf 	b.w	800c180 <dwt_ioctl+0x154>
 800ce02:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800ce04:	7b9b      	ldrb	r3, [r3, #14]
 800ce06:	2b03      	cmp	r3, #3
 800ce08:	f001 8123 	beq.w	800e052 <dwt_ioctl+0x2026>
 800ce0c:	f899 3011 	ldrb.w	r3, [r9, #17]
 800ce10:	1e5a      	subs	r2, r3, #1
 800ce12:	b2d2      	uxtb	r2, r2
 800ce14:	2a01      	cmp	r2, #1
 800ce16:	d912      	bls.n	800ce3e <dwt_ioctl+0xe12>
 800ce18:	2201      	movs	r2, #1
 800ce1a:	e7b7      	b.n	800cd8c <dwt_ioctl+0xd60>
 800ce1c:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800ce1e:	7b9b      	ldrb	r3, [r3, #14]
 800ce20:	2b03      	cmp	r3, #3
 800ce22:	bf0c      	ite	eq
 800ce24:	2302      	moveq	r3, #2
 800ce26:	2301      	movne	r3, #1
 800ce28:	e7b2      	b.n	800cd90 <dwt_ioctl+0xd64>
 800ce2a:	f8b9 100e 	ldrh.w	r1, [r9, #14]
 800ce2e:	2910      	cmp	r1, #16
 800ce30:	d9ae      	bls.n	800cd90 <dwt_ioctl+0xd64>
 800ce32:	f06f 0303 	mvn.w	r3, #3
 800ce36:	e7e0      	b.n	800cdfa <dwt_ioctl+0xdce>
 800ce38:	2202      	movs	r2, #2
 800ce3a:	4613      	mov	r3, r2
 800ce3c:	e7a8      	b.n	800cd90 <dwt_ioctl+0xd64>
 800ce3e:	2201      	movs	r2, #1
 800ce40:	4613      	mov	r3, r2
 800ce42:	e7a5      	b.n	800cd90 <dwt_ioctl+0xd64>
 800ce44:	f899 3012 	ldrb.w	r3, [r9, #18]
 800ce48:	2b01      	cmp	r3, #1
 800ce4a:	d1d5      	bne.n	800cdf8 <dwt_ioctl+0xdcc>
 800ce4c:	f899 2011 	ldrb.w	r2, [r9, #17]
 800ce50:	1e53      	subs	r3, r2, #1
 800ce52:	b2db      	uxtb	r3, r3
 800ce54:	2b01      	cmp	r3, #1
 800ce56:	d91b      	bls.n	800ce90 <dwt_ioctl+0xe64>
 800ce58:	2a03      	cmp	r2, #3
 800ce5a:	bf0c      	ite	eq
 800ce5c:	f44f 17a0 	moveq.w	r7, #1310720	; 0x140000
 800ce60:	f44f 17b0 	movne.w	r7, #1441792	; 0x160000
 800ce64:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800ce68:	b112      	cbz	r2, 800ce70 <dwt_ioctl+0xe44>
 800ce6a:	f899 300c 	ldrb.w	r3, [r9, #12]
 800ce6e:	b9c3      	cbnz	r3, 800cea2 <dwt_ioctl+0xe76>
 800ce70:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800ce74:	2900      	cmp	r1, #0
 800ce76:	d0bf      	beq.n	800cdf8 <dwt_ioctl+0xdcc>
 800ce78:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d0bb      	beq.n	800cdf8 <dwt_ioctl+0xdcc>
 800ce80:	f899 200c 	ldrb.w	r2, [r9, #12]
 800ce84:	9100      	str	r1, [sp, #0]
 800ce86:	4639      	mov	r1, r7
 800ce88:	4630      	mov	r0, r6
 800ce8a:	f7fc ffe6 	bl	8009e5a <dwt_readfromdevice>
 800ce8e:	e7b3      	b.n	800cdf8 <dwt_ioctl+0xdcc>
 800ce90:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800ce92:	7b9b      	ldrb	r3, [r3, #14]
 800ce94:	2b03      	cmp	r3, #3
 800ce96:	bf0c      	ite	eq
 800ce98:	f44f 1798 	moveq.w	r7, #1245184	; 0x130000
 800ce9c:	f44f 1790 	movne.w	r7, #1179648	; 0x120000
 800cea0:	e7e0      	b.n	800ce64 <dwt_ioctl+0xe38>
 800cea2:	9200      	str	r2, [sp, #0]
 800cea4:	2200      	movs	r2, #0
 800cea6:	4639      	mov	r1, r7
 800cea8:	4630      	mov	r0, r6
 800ceaa:	f7fc ffd6 	bl	8009e5a <dwt_readfromdevice>
 800ceae:	e7df      	b.n	800ce70 <dwt_ioctl+0xe44>
 800ceb0:	f06f 0302 	mvn.w	r3, #2
 800ceb4:	e7a1      	b.n	800cdfa <dwt_ioctl+0xdce>
 800ceb6:	f06f 0301 	mvn.w	r3, #1
 800ceba:	e79e      	b.n	800cdfa <dwt_ioctl+0xdce>
 800cebc:	f04f 33ff 	mov.w	r3, #4294967295
 800cec0:	e79b      	b.n	800cdfa <dwt_ioctl+0xdce>
 800cec2:	f04f 33ff 	mov.w	r3, #4294967295
 800cec6:	e798      	b.n	800cdfa <dwt_ioctl+0xdce>
 800cec8:	7a23      	ldrb	r3, [r4, #8]
 800ceca:	79e1      	ldrb	r1, [r4, #7]
 800cecc:	79a2      	ldrb	r2, [r4, #6]
 800cece:	00d2      	lsls	r2, r2, #3
 800ced0:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800ced4:	4313      	orrs	r3, r2
 800ced6:	7962      	ldrb	r2, [r4, #5]
 800ced8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800cedc:	7922      	ldrb	r2, [r4, #4]
 800cede:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800cee2:	78e2      	ldrb	r2, [r4, #3]
 800cee4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800cee8:	78a2      	ldrb	r2, [r4, #2]
 800ceea:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 800ceee:	7862      	ldrb	r2, [r4, #1]
 800cef0:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800cef4:	7822      	ldrb	r2, [r4, #0]
 800cef6:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 800cefa:	b29b      	uxth	r3, r3
 800cefc:	2200      	movs	r2, #0
 800cefe:	490b      	ldr	r1, [pc, #44]	; (800cf2c <dwt_ioctl+0xf00>)
 800cf00:	f7fd fbcd 	bl	800a69e <dwt_write16bitoffsetreg>
 800cf04:	2500      	movs	r5, #0
 800cf06:	f7ff b93b 	b.w	800c180 <dwt_ioctl+0x154>
 800cf0a:	bf00      	nop
 800cf0c:	000f0028 	.word	0x000f0028
 800cf10:	00020008 	.word	0x00020008
 800cf14:	00010034 	.word	0x00010034
 800cf18:	00010044 	.word	0x00010044
 800cf1c:	0001ff80 	.word	0x0001ff80
 800cf20:	00010048 	.word	0x00010048
 800cf24:	0001004c 	.word	0x0001004c
 800cf28:	00010050 	.word	0x00010050
 800cf2c:	00010030 	.word	0x00010030
 800cf30:	2c00      	cmp	r4, #0
 800cf32:	f000 87e1 	beq.w	800def8 <dwt_ioctl+0x1ecc>
 800cf36:	7863      	ldrb	r3, [r4, #1]
 800cf38:	b133      	cbz	r3, 800cf48 <dwt_ioctl+0xf1c>
 800cf3a:	085b      	lsrs	r3, r3, #1
 800cf3c:	3b01      	subs	r3, #1
 800cf3e:	b2db      	uxtb	r3, r3
 800cf40:	7023      	strb	r3, [r4, #0]
 800cf42:	2500      	movs	r5, #0
 800cf44:	f7ff b91c 	b.w	800c180 <dwt_ioctl+0x154>
 800cf48:	2300      	movs	r3, #0
 800cf4a:	e7f9      	b.n	800cf40 <dwt_ioctl+0xf14>
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	49d0      	ldr	r1, [pc, #832]	; (800d290 <dwt_ioctl+0x1264>)
 800cf50:	f7fc ff8d 	bl	8009e6e <dwt_read32bitoffsetreg>
 800cf54:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800cf58:	8023      	strh	r3, [r4, #0]
 800cf5a:	f3c0 400b 	ubfx	r0, r0, #16, #12
 800cf5e:	8060      	strh	r0, [r4, #2]
 800cf60:	2200      	movs	r2, #0
 800cf62:	49cc      	ldr	r1, [pc, #816]	; (800d294 <dwt_ioctl+0x1268>)
 800cf64:	4630      	mov	r0, r6
 800cf66:	f7fc ff82 	bl	8009e6e <dwt_read32bitoffsetreg>
 800cf6a:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800cf6e:	80a3      	strh	r3, [r4, #4]
 800cf70:	f3c0 400b 	ubfx	r0, r0, #16, #12
 800cf74:	80e0      	strh	r0, [r4, #6]
 800cf76:	2200      	movs	r2, #0
 800cf78:	49c7      	ldr	r1, [pc, #796]	; (800d298 <dwt_ioctl+0x126c>)
 800cf7a:	4630      	mov	r0, r6
 800cf7c:	f7fc ff77 	bl	8009e6e <dwt_read32bitoffsetreg>
 800cf80:	7220      	strb	r0, [r4, #8]
 800cf82:	0c00      	lsrs	r0, r0, #16
 800cf84:	7260      	strb	r0, [r4, #9]
 800cf86:	2200      	movs	r2, #0
 800cf88:	49c4      	ldr	r1, [pc, #784]	; (800d29c <dwt_ioctl+0x1270>)
 800cf8a:	4630      	mov	r0, r6
 800cf8c:	f7fc ff6f 	bl	8009e6e <dwt_read32bitoffsetreg>
 800cf90:	f3c0 430b 	ubfx	r3, r0, #16, #12
 800cf94:	81a3      	strh	r3, [r4, #12]
 800cf96:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800cf9a:	8160      	strh	r0, [r4, #10]
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	49c0      	ldr	r1, [pc, #768]	; (800d2a0 <dwt_ioctl+0x1274>)
 800cfa0:	4630      	mov	r0, r6
 800cfa2:	f7fc ff64 	bl	8009e6e <dwt_read32bitoffsetreg>
 800cfa6:	f3c0 430b 	ubfx	r3, r0, #16, #12
 800cfaa:	f8a4 300f 	strh.w	r3, [r4, #15]
 800cfae:	73a0      	strb	r0, [r4, #14]
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	49bc      	ldr	r1, [pc, #752]	; (800d2a4 <dwt_ioctl+0x1278>)
 800cfb4:	4630      	mov	r0, r6
 800cfb6:	f7fc ff5a 	bl	8009e6e <dwt_read32bitoffsetreg>
 800cfba:	7460      	strb	r0, [r4, #17]
 800cfbc:	0c00      	lsrs	r0, r0, #16
 800cfbe:	74a0      	strb	r0, [r4, #18]
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	49b9      	ldr	r1, [pc, #740]	; (800d2a8 <dwt_ioctl+0x127c>)
 800cfc4:	4630      	mov	r0, r6
 800cfc6:	f7fc ff52 	bl	8009e6e <dwt_read32bitoffsetreg>
 800cfca:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800cfce:	f8a4 0013 	strh.w	r0, [r4, #19]
 800cfd2:	2500      	movs	r5, #0
 800cfd4:	7565      	strb	r5, [r4, #21]
 800cfd6:	75a5      	strb	r5, [r4, #22]
 800cfd8:	462a      	mov	r2, r5
 800cfda:	49b4      	ldr	r1, [pc, #720]	; (800d2ac <dwt_ioctl+0x1280>)
 800cfdc:	4630      	mov	r0, r6
 800cfde:	f7fc ff6e 	bl	8009ebe <dwt_read8bitoffsetreg>
 800cfe2:	75e0      	strb	r0, [r4, #23]
 800cfe4:	f7ff b8cc 	b.w	800c180 <dwt_ioctl+0x154>
 800cfe8:	4611      	mov	r1, r2
 800cfea:	f7fd fdbb 	bl	800ab64 <ull_configeventcounters>
 800cfee:	2500      	movs	r5, #0
 800cff0:	f7ff b8c6 	b.w	800c180 <dwt_ioctl+0x154>
 800cff4:	2c00      	cmp	r4, #0
 800cff6:	f000 8782 	beq.w	800defe <dwt_ioctl+0x1ed2>
 800cffa:	8823      	ldrh	r3, [r4, #0]
 800cffc:	2200      	movs	r2, #0
 800cffe:	49ac      	ldr	r1, [pc, #688]	; (800d2b0 <dwt_ioctl+0x1284>)
 800d000:	f7fd fb4d 	bl	800a69e <dwt_write16bitoffsetreg>
 800d004:	2500      	movs	r5, #0
 800d006:	f7ff b8bb 	b.w	800c180 <dwt_ioctl+0x154>
 800d00a:	2c00      	cmp	r4, #0
 800d00c:	f000 877a 	beq.w	800df04 <dwt_ioctl+0x1ed8>
 800d010:	6825      	ldr	r5, [r4, #0]
 800d012:	b935      	cbnz	r5, 800d022 <dwt_ioctl+0xff6>
 800d014:	2300      	movs	r3, #0
 800d016:	461a      	mov	r2, r3
 800d018:	49a6      	ldr	r1, [pc, #664]	; (800d2b4 <dwt_ioctl+0x1288>)
 800d01a:	f7fd fb40 	bl	800a69e <dwt_write16bitoffsetreg>
 800d01e:	f7ff b8af 	b.w	800c180 <dwt_ioctl+0x154>
 800d022:	7962      	ldrb	r2, [r4, #5]
 800d024:	7923      	ldrb	r3, [r4, #4]
 800d026:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d02a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d02e:	2200      	movs	r2, #0
 800d030:	49a0      	ldr	r1, [pc, #640]	; (800d2b4 <dwt_ioctl+0x1288>)
 800d032:	f7fd fb34 	bl	800a69e <dwt_write16bitoffsetreg>
 800d036:	2500      	movs	r5, #0
 800d038:	f7ff b8a2 	b.w	800c180 <dwt_ioctl+0x154>
 800d03c:	2c00      	cmp	r4, #0
 800d03e:	f000 8764 	beq.w	800df0a <dwt_ioctl+0x1ede>
 800d042:	6823      	ldr	r3, [r4, #0]
 800d044:	b94b      	cbnz	r3, 800d05a <dwt_ioctl+0x102e>
 800d046:	2500      	movs	r5, #0
 800d048:	9500      	str	r5, [sp, #0]
 800d04a:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 800d04e:	462a      	mov	r2, r5
 800d050:	2110      	movs	r1, #16
 800d052:	f7fe fb61 	bl	800b718 <dwt_modify16bitoffsetreg>
 800d056:	f7ff b893 	b.w	800c180 <dwt_ioctl+0x154>
 800d05a:	2200      	movs	r2, #0
 800d05c:	2134      	movs	r1, #52	; 0x34
 800d05e:	f7fd fb7b 	bl	800a758 <dwt_write32bitoffsetreg>
 800d062:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d066:	9300      	str	r3, [sp, #0]
 800d068:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d06c:	2200      	movs	r2, #0
 800d06e:	2110      	movs	r1, #16
 800d070:	4630      	mov	r0, r6
 800d072:	f7fe fb51 	bl	800b718 <dwt_modify16bitoffsetreg>
 800d076:	2500      	movs	r5, #0
 800d078:	f7ff b882 	b.w	800c180 <dwt_ioctl+0x154>
 800d07c:	2c00      	cmp	r4, #0
 800d07e:	f000 8747 	beq.w	800df10 <dwt_ioctl+0x1ee4>
 800d082:	8861      	ldrh	r1, [r4, #2]
 800d084:	f7fd fd82 	bl	800ab8c <ull_aon_read>
 800d088:	7020      	strb	r0, [r4, #0]
 800d08a:	2500      	movs	r5, #0
 800d08c:	f7ff b878 	b.w	800c180 <dwt_ioctl+0x154>
 800d090:	2c00      	cmp	r4, #0
 800d092:	f000 8740 	beq.w	800df16 <dwt_ioctl+0x1eea>
 800d096:	78a2      	ldrb	r2, [r4, #2]
 800d098:	8821      	ldrh	r1, [r4, #0]
 800d09a:	f7fd fd97 	bl	800abcc <ull_aon_write>
 800d09e:	2500      	movs	r5, #0
 800d0a0:	f7ff b86e 	b.w	800c180 <dwt_ioctl+0x154>
 800d0a4:	4b84      	ldr	r3, [pc, #528]	; (800d2b8 <dwt_ioctl+0x128c>)
 800d0a6:	4a85      	ldr	r2, [pc, #532]	; (800d2bc <dwt_ioctl+0x1290>)
 800d0a8:	2d01      	cmp	r5, #1
 800d0aa:	bf18      	it	ne
 800d0ac:	4613      	movne	r3, r2
 800d0ae:	2d01      	cmp	r5, #1
 800d0b0:	4983      	ldr	r1, [pc, #524]	; (800d2c0 <dwt_ioctl+0x1294>)
 800d0b2:	bf18      	it	ne
 800d0b4:	f04f 110c 	movne.w	r1, #786444	; 0xc000c
 800d0b8:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800d0ba:	7b92      	ldrb	r2, [r2, #14]
 800d0bc:	2a01      	cmp	r2, #1
 800d0be:	d012      	beq.n	800d0e6 <dwt_ioctl+0x10ba>
 800d0c0:	2a03      	cmp	r2, #3
 800d0c2:	d117      	bne.n	800d0f4 <dwt_ioctl+0x10c8>
 800d0c4:	f5a2 12c0 	sub.w	r2, r2, #1572864	; 0x180000
 800d0c8:	3a01      	subs	r2, #1
 800d0ca:	441a      	add	r2, r3
 800d0cc:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800d0d0:	f7fc fee3 	bl	8009e9a <dwt_read16bitoffsetreg>
 800d0d4:	09c0      	lsrs	r0, r0, #7
 800d0d6:	8020      	strh	r0, [r4, #0]
 800d0d8:	8825      	ldrh	r5, [r4, #0]
 800d0da:	3500      	adds	r5, #0
 800d0dc:	bf18      	it	ne
 800d0de:	2501      	movne	r5, #1
 800d0e0:	426d      	negs	r5, r5
 800d0e2:	f7ff b84d 	b.w	800c180 <dwt_ioctl+0x154>
 800d0e6:	2202      	movs	r2, #2
 800d0e8:	4619      	mov	r1, r3
 800d0ea:	f7fc fed6 	bl	8009e9a <dwt_read16bitoffsetreg>
 800d0ee:	09c0      	lsrs	r0, r0, #7
 800d0f0:	8020      	strh	r0, [r4, #0]
 800d0f2:	e7f1      	b.n	800d0d8 <dwt_ioctl+0x10ac>
 800d0f4:	2202      	movs	r2, #2
 800d0f6:	f7fc fed0 	bl	8009e9a <dwt_read16bitoffsetreg>
 800d0fa:	09c0      	lsrs	r0, r0, #7
 800d0fc:	8020      	strh	r0, [r4, #0]
 800d0fe:	e7eb      	b.n	800d0d8 <dwt_ioctl+0x10ac>
 800d100:	2c00      	cmp	r4, #0
 800d102:	f000 870b 	beq.w	800df1c <dwt_ioctl+0x1ef0>
 800d106:	7821      	ldrb	r1, [r4, #0]
 800d108:	f7fe fb20 	bl	800b74c <ull_setleds>
 800d10c:	2500      	movs	r5, #0
 800d10e:	f7ff b837 	b.w	800c180 <dwt_ioctl+0x154>
 800d112:	4611      	mov	r1, r2
 800d114:	f7fe f9a2 	bl	800b45c <ull_setdwstate>
 800d118:	2500      	movs	r5, #0
 800d11a:	f7ff b831 	b.w	800c180 <dwt_ioctl+0x154>
 800d11e:	9400      	str	r4, [sp, #0]
 800d120:	2304      	movs	r3, #4
 800d122:	2200      	movs	r2, #0
 800d124:	211c      	movs	r1, #28
 800d126:	f7fc fe98 	bl	8009e5a <dwt_readfromdevice>
 800d12a:	2500      	movs	r5, #0
 800d12c:	f7ff b828 	b.w	800c180 <dwt_ioctl+0x154>
 800d130:	2c00      	cmp	r4, #0
 800d132:	f000 86f6 	beq.w	800df22 <dwt_ioctl+0x1ef6>
 800d136:	2202      	movs	r2, #2
 800d138:	2144      	movs	r1, #68	; 0x44
 800d13a:	f7fc feae 	bl	8009e9a <dwt_read16bitoffsetreg>
 800d13e:	f3c0 2000 	ubfx	r0, r0, #8, #1
 800d142:	7020      	strb	r0, [r4, #0]
 800d144:	2500      	movs	r5, #0
 800d146:	f7ff b81b 	b.w	800c180 <dwt_ioctl+0x154>
 800d14a:	2c00      	cmp	r4, #0
 800d14c:	f000 86ec 	beq.w	800df28 <dwt_ioctl+0x1efc>
 800d150:	2200      	movs	r2, #0
 800d152:	2144      	movs	r1, #68	; 0x44
 800d154:	f7fc feb3 	bl	8009ebe <dwt_read8bitoffsetreg>
 800d158:	f000 0001 	and.w	r0, r0, #1
 800d15c:	7020      	strb	r0, [r4, #0]
 800d15e:	2500      	movs	r5, #0
 800d160:	f7ff b80e 	b.w	800c180 <dwt_ioctl+0x154>
 800d164:	2c00      	cmp	r4, #0
 800d166:	f000 86e2 	beq.w	800df2e <dwt_ioctl+0x1f02>
 800d16a:	8862      	ldrh	r2, [r4, #2]
 800d16c:	8821      	ldrh	r1, [r4, #0]
 800d16e:	f7fe f9d1 	bl	800b514 <ull_configureframefilter>
 800d172:	2500      	movs	r5, #0
 800d174:	f7ff b804 	b.w	800c180 <dwt_ioctl+0x154>
 800d178:	9400      	str	r4, [sp, #0]
 800d17a:	2308      	movs	r3, #8
 800d17c:	2200      	movs	r2, #0
 800d17e:	2104      	movs	r1, #4
 800d180:	f7fd fa82 	bl	800a688 <dwt_writetodevice>
 800d184:	2500      	movs	r5, #0
 800d186:	f7fe bffb 	b.w	800c180 <dwt_ioctl+0x154>
 800d18a:	9400      	str	r4, [sp, #0]
 800d18c:	2308      	movs	r3, #8
 800d18e:	2200      	movs	r2, #0
 800d190:	2104      	movs	r1, #4
 800d192:	f7fc fe62 	bl	8009e5a <dwt_readfromdevice>
 800d196:	2500      	movs	r5, #0
 800d198:	f7fe bff2 	b.w	800c180 <dwt_ioctl+0x154>
 800d19c:	2c00      	cmp	r4, #0
 800d19e:	f000 86c9 	beq.w	800df34 <dwt_ioctl+0x1f08>
 800d1a2:	8823      	ldrh	r3, [r4, #0]
 800d1a4:	2202      	movs	r2, #2
 800d1a6:	210c      	movs	r1, #12
 800d1a8:	f7fd fa79 	bl	800a69e <dwt_write16bitoffsetreg>
 800d1ac:	2500      	movs	r5, #0
 800d1ae:	f7fe bfe7 	b.w	800c180 <dwt_ioctl+0x154>
 800d1b2:	2c00      	cmp	r4, #0
 800d1b4:	f000 86c1 	beq.w	800df3a <dwt_ioctl+0x1f0e>
 800d1b8:	8823      	ldrh	r3, [r4, #0]
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	210c      	movs	r1, #12
 800d1be:	f7fd fa6e 	bl	800a69e <dwt_write16bitoffsetreg>
 800d1c2:	2500      	movs	r5, #0
 800d1c4:	f7fe bfdc 	b.w	800c180 <dwt_ioctl+0x154>
 800d1c8:	4621      	mov	r1, r4
 800d1ca:	f7fd fa3b 	bl	800a644 <ull_readrxtimestamp>
 800d1ce:	2500      	movs	r5, #0
 800d1d0:	f7fe bfd6 	b.w	800c180 <dwt_ioctl+0x154>
 800d1d4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800d1d6:	7b9b      	ldrb	r3, [r3, #14]
 800d1d8:	2b01      	cmp	r3, #1
 800d1da:	d00b      	beq.n	800d1f4 <dwt_ioctl+0x11c8>
 800d1dc:	2b03      	cmp	r3, #3
 800d1de:	d112      	bne.n	800d206 <dwt_ioctl+0x11da>
 800d1e0:	9400      	str	r4, [sp, #0]
 800d1e2:	2305      	movs	r3, #5
 800d1e4:	2220      	movs	r2, #32
 800d1e6:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800d1ea:	f7fc fe36 	bl	8009e5a <dwt_readfromdevice>
 800d1ee:	2500      	movs	r5, #0
 800d1f0:	f7fe bfc6 	b.w	800c180 <dwt_ioctl+0x154>
 800d1f4:	9400      	str	r4, [sp, #0]
 800d1f6:	2305      	movs	r3, #5
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	4932      	ldr	r1, [pc, #200]	; (800d2c4 <dwt_ioctl+0x1298>)
 800d1fc:	f7fc fe2d 	bl	8009e5a <dwt_readfromdevice>
 800d200:	2500      	movs	r5, #0
 800d202:	f7fe bfbd 	b.w	800c180 <dwt_ioctl+0x154>
 800d206:	9400      	str	r4, [sp, #0]
 800d208:	2305      	movs	r3, #5
 800d20a:	2200      	movs	r2, #0
 800d20c:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 800d210:	f7fc fe23 	bl	8009e5a <dwt_readfromdevice>
 800d214:	2500      	movs	r5, #0
 800d216:	f7fe bfb3 	b.w	800c180 <dwt_ioctl+0x154>
 800d21a:	2500      	movs	r5, #0
 800d21c:	f804 5b01 	strb.w	r5, [r4], #1
 800d220:	9400      	str	r4, [sp, #0]
 800d222:	2304      	movs	r3, #4
 800d224:	462a      	mov	r2, r5
 800d226:	216c      	movs	r1, #108	; 0x6c
 800d228:	f7fc fe17 	bl	8009e5a <dwt_readfromdevice>
 800d22c:	f7fe bfa8 	b.w	800c180 <dwt_ioctl+0x154>
 800d230:	2c00      	cmp	r4, #0
 800d232:	f000 8685 	beq.w	800df40 <dwt_ioctl+0x1f14>
 800d236:	2201      	movs	r2, #1
 800d238:	2160      	movs	r1, #96	; 0x60
 800d23a:	f7fc fe18 	bl	8009e6e <dwt_read32bitoffsetreg>
 800d23e:	6020      	str	r0, [r4, #0]
 800d240:	2500      	movs	r5, #0
 800d242:	f7fe bf9d 	b.w	800c180 <dwt_ioctl+0x154>
 800d246:	2c00      	cmp	r4, #0
 800d248:	f000 867d 	beq.w	800df46 <dwt_ioctl+0x1f1a>
 800d24c:	2200      	movs	r2, #0
 800d24e:	2160      	movs	r1, #96	; 0x60
 800d250:	f7fc fe0d 	bl	8009e6e <dwt_read32bitoffsetreg>
 800d254:	6020      	str	r0, [r4, #0]
 800d256:	2500      	movs	r5, #0
 800d258:	f7fe bf92 	b.w	800c180 <dwt_ioctl+0x154>
 800d25c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800d25e:	7b9b      	ldrb	r3, [r3, #14]
 800d260:	2b01      	cmp	r3, #1
 800d262:	d00b      	beq.n	800d27c <dwt_ioctl+0x1250>
 800d264:	2b03      	cmp	r3, #3
 800d266:	d131      	bne.n	800d2cc <dwt_ioctl+0x12a0>
 800d268:	9400      	str	r4, [sp, #0]
 800d26a:	2305      	movs	r3, #5
 800d26c:	2228      	movs	r2, #40	; 0x28
 800d26e:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800d272:	f7fc fdf2 	bl	8009e5a <dwt_readfromdevice>
 800d276:	2500      	movs	r5, #0
 800d278:	f7fe bf82 	b.w	800c180 <dwt_ioctl+0x154>
 800d27c:	9400      	str	r4, [sp, #0]
 800d27e:	2305      	movs	r3, #5
 800d280:	2200      	movs	r2, #0
 800d282:	4911      	ldr	r1, [pc, #68]	; (800d2c8 <dwt_ioctl+0x129c>)
 800d284:	f7fc fde9 	bl	8009e5a <dwt_readfromdevice>
 800d288:	2500      	movs	r5, #0
 800d28a:	f7fe bf79 	b.w	800c180 <dwt_ioctl+0x154>
 800d28e:	bf00      	nop
 800d290:	000f0004 	.word	0x000f0004
 800d294:	000f0008 	.word	0x000f0008
 800d298:	000f000c 	.word	0x000f000c
 800d29c:	000f0010 	.word	0x000f0010
 800d2a0:	000f0014 	.word	0x000f0014
 800d2a4:	000f0018 	.word	0x000f0018
 800d2a8:	000f001c 	.word	0x000f001c
 800d2ac:	000f0020 	.word	0x000f0020
 800d2b0:	00060004 	.word	0x00060004
 800d2b4:	0011001c 	.word	0x0011001c
 800d2b8:	00180034 	.word	0x00180034
 800d2bc:	0018002c 	.word	0x0018002c
 800d2c0:	000c0014 	.word	0x000c0014
 800d2c4:	00180020 	.word	0x00180020
 800d2c8:	00180028 	.word	0x00180028
 800d2cc:	9400      	str	r4, [sp, #0]
 800d2ce:	2305      	movs	r3, #5
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	49ce      	ldr	r1, [pc, #824]	; (800d60c <dwt_ioctl+0x15e0>)
 800d2d4:	f7fc fdc1 	bl	8009e5a <dwt_readfromdevice>
 800d2d8:	2500      	movs	r5, #0
 800d2da:	f7fe bf51 	b.w	800c180 <dwt_ioctl+0x154>
 800d2de:	2c00      	cmp	r4, #0
 800d2e0:	f000 8634 	beq.w	800df4c <dwt_ioctl+0x1f20>
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	211c      	movs	r1, #28
 800d2e8:	f7fc fdc1 	bl	8009e6e <dwt_read32bitoffsetreg>
 800d2ec:	6020      	str	r0, [r4, #0]
 800d2ee:	2500      	movs	r5, #0
 800d2f0:	f7fe bf46 	b.w	800c180 <dwt_ioctl+0x154>
 800d2f4:	2c00      	cmp	r4, #0
 800d2f6:	f000 862c 	beq.w	800df52 <dwt_ioctl+0x1f26>
 800d2fa:	8825      	ldrh	r5, [r4, #0]
 800d2fc:	6867      	ldr	r7, [r4, #4]
 800d2fe:	7a23      	ldrb	r3, [r4, #8]
 800d300:	2b00      	cmp	r3, #0
 800d302:	f000 8629 	beq.w	800df58 <dwt_ioctl+0x1f2c>
 800d306:	463c      	mov	r4, r7
 800d308:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 800d30c:	4629      	mov	r1, r5
 800d30e:	4630      	mov	r0, r6
 800d310:	f7fd fa00 	bl	800a714 <_dwt_otpread>
 800d314:	f844 0b04 	str.w	r0, [r4], #4
 800d318:	3501      	adds	r5, #1
 800d31a:	b2ad      	uxth	r5, r5
 800d31c:	42bc      	cmp	r4, r7
 800d31e:	d1f5      	bne.n	800d30c <dwt_ioctl+0x12e0>
 800d320:	2500      	movs	r5, #0
 800d322:	f7fe bf2d 	b.w	800c180 <dwt_ioctl+0x154>
 800d326:	2c00      	cmp	r4, #0
 800d328:	f000 8619 	beq.w	800df5e <dwt_ioctl+0x1f32>
 800d32c:	7823      	ldrb	r3, [r4, #0]
 800d32e:	2201      	movs	r2, #1
 800d330:	2124      	movs	r1, #36	; 0x24
 800d332:	f7fd fb9f 	bl	800aa74 <dwt_write8bitoffsetreg>
 800d336:	2500      	movs	r5, #0
 800d338:	f7fe bf22 	b.w	800c180 <dwt_ioctl+0x154>
 800d33c:	f7fe f90e 	bl	800b55c <ull_run_pgfcal>
 800d340:	4605      	mov	r5, r0
 800d342:	f7fe bf1d 	b.w	800c180 <dwt_ioctl+0x154>
 800d346:	4611      	mov	r1, r2
 800d348:	f7fe fa4e 	bl	800b7e8 <ull_pgf_cal>
 800d34c:	4605      	mov	r5, r0
 800d34e:	f7fe bf17 	b.w	800c180 <dwt_ioctl+0x154>
 800d352:	2c00      	cmp	r4, #0
 800d354:	f000 8606 	beq.w	800df64 <dwt_ioctl+0x1f38>
 800d358:	78a5      	ldrb	r5, [r4, #2]
 800d35a:	2101      	movs	r1, #1
 800d35c:	f7fd f9b0 	bl	800a6c0 <ull_force_clocks>
 800d360:	2100      	movs	r1, #0
 800d362:	4630      	mov	r0, r6
 800d364:	f7fd fe6e 	bl	800b044 <ull_enable_rf_tx>
 800d368:	4630      	mov	r0, r6
 800d36a:	f7fd fe9f 	bl	800b0ac <ull_enable_rftx_blocks>
 800d36e:	f005 033f 	and.w	r3, r5, #63	; 0x3f
 800d372:	2200      	movs	r2, #0
 800d374:	49a6      	ldr	r1, [pc, #664]	; (800d610 <dwt_ioctl+0x15e4>)
 800d376:	4630      	mov	r0, r6
 800d378:	f7fd fb7c 	bl	800aa74 <dwt_write8bitoffsetreg>
 800d37c:	2301      	movs	r3, #1
 800d37e:	9300      	str	r3, [sp, #0]
 800d380:	23ff      	movs	r3, #255	; 0xff
 800d382:	2200      	movs	r2, #0
 800d384:	49a3      	ldr	r1, [pc, #652]	; (800d614 <dwt_ioctl+0x15e8>)
 800d386:	4630      	mov	r0, r6
 800d388:	f7fd ffaa 	bl	800b2e0 <dwt_modify8bitoffsetreg>
 800d38c:	4fa1      	ldr	r7, [pc, #644]	; (800d614 <dwt_ioctl+0x15e8>)
 800d38e:	2500      	movs	r5, #0
 800d390:	462a      	mov	r2, r5
 800d392:	4639      	mov	r1, r7
 800d394:	4630      	mov	r0, r6
 800d396:	f7fc fd92 	bl	8009ebe <dwt_read8bitoffsetreg>
 800d39a:	f010 0f01 	tst.w	r0, #1
 800d39e:	d1f7      	bne.n	800d390 <dwt_ioctl+0x1364>
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	499d      	ldr	r1, [pc, #628]	; (800d618 <dwt_ioctl+0x15ec>)
 800d3a4:	4630      	mov	r0, r6
 800d3a6:	f7fc fd78 	bl	8009e9a <dwt_read16bitoffsetreg>
 800d3aa:	4605      	mov	r5, r0
 800d3ac:	4630      	mov	r0, r6
 800d3ae:	f7fd fb03 	bl	800a9b8 <ull_disable_rftx_blocks>
 800d3b2:	2100      	movs	r1, #0
 800d3b4:	4630      	mov	r0, r6
 800d3b6:	f7fd fb09 	bl	800a9cc <ull_disable_rf_tx>
 800d3ba:	2105      	movs	r1, #5
 800d3bc:	4630      	mov	r0, r6
 800d3be:	f7fd f97f 	bl	800a6c0 <ull_force_clocks>
 800d3c2:	f3c5 050b 	ubfx	r5, r5, #0, #12
 800d3c6:	8025      	strh	r5, [r4, #0]
 800d3c8:	2500      	movs	r5, #0
 800d3ca:	f7fe bed9 	b.w	800c180 <dwt_ioctl+0x154>
 800d3ce:	2102      	movs	r1, #2
 800d3d0:	f7fe f844 	bl	800b45c <ull_setdwstate>
 800d3d4:	2101      	movs	r1, #1
 800d3d6:	4630      	mov	r0, r6
 800d3d8:	f7fe f840 	bl	800b45c <ull_setdwstate>
 800d3dc:	2432      	movs	r4, #50	; 0x32
 800d3de:	f04f 0814 	mov.w	r8, #20
 800d3e2:	2700      	movs	r7, #0
 800d3e4:	2544      	movs	r5, #68	; 0x44
 800d3e6:	4640      	mov	r0, r8
 800d3e8:	f7f3 f89b 	bl	8000522 <deca_usleep>
 800d3ec:	463a      	mov	r2, r7
 800d3ee:	4629      	mov	r1, r5
 800d3f0:	4630      	mov	r0, r6
 800d3f2:	f7fc fd64 	bl	8009ebe <dwt_read8bitoffsetreg>
 800d3f6:	f010 0f02 	tst.w	r0, #2
 800d3fa:	d105      	bne.n	800d408 <dwt_ioctl+0x13dc>
 800d3fc:	1e63      	subs	r3, r4, #1
 800d3fe:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 800d402:	d1f0      	bne.n	800d3e6 <dwt_ioctl+0x13ba>
 800d404:	2501      	movs	r5, #1
 800d406:	e000      	b.n	800d40a <dwt_ioctl+0x13de>
 800d408:	2500      	movs	r5, #0
 800d40a:	426d      	negs	r5, r5
 800d40c:	f7fe beb8 	b.w	800c180 <dwt_ioctl+0x154>
 800d410:	2c00      	cmp	r4, #0
 800d412:	f000 85aa 	beq.w	800df6a <dwt_ioctl+0x1f3e>
 800d416:	7823      	ldrb	r3, [r4, #0]
 800d418:	031b      	lsls	r3, r3, #12
 800d41a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800d41e:	7862      	ldrb	r2, [r4, #1]
 800d420:	2a01      	cmp	r2, #1
 800d422:	bf08      	it	eq
 800d424:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
 800d428:	9300      	str	r3, [sp, #0]
 800d42a:	f46f 43e2 	mvn.w	r3, #28928	; 0x7100
 800d42e:	2200      	movs	r2, #0
 800d430:	497a      	ldr	r1, [pc, #488]	; (800d61c <dwt_ioctl+0x15f0>)
 800d432:	f7fd fde3 	bl	800affc <dwt_modify32bitoffsetreg>
 800d436:	2500      	movs	r5, #0
 800d438:	f7fe bea2 	b.w	800c180 <dwt_ioctl+0x154>
 800d43c:	2c00      	cmp	r4, #0
 800d43e:	f000 8597 	beq.w	800df70 <dwt_ioctl+0x1f44>
 800d442:	6862      	ldr	r2, [r4, #4]
 800d444:	6821      	ldr	r1, [r4, #0]
 800d446:	f7fd fefb 	bl	800b240 <ull_setgpiomode>
 800d44a:	2500      	movs	r5, #0
 800d44c:	f7fe be98 	b.w	800c180 <dwt_ioctl+0x154>
 800d450:	2c00      	cmp	r4, #0
 800d452:	f000 8590 	beq.w	800df76 <dwt_ioctl+0x1f4a>
 800d456:	8823      	ldrh	r3, [r4, #0]
 800d458:	2200      	movs	r2, #0
 800d45a:	4971      	ldr	r1, [pc, #452]	; (800d620 <dwt_ioctl+0x15f4>)
 800d45c:	f7fd f91f 	bl	800a69e <dwt_write16bitoffsetreg>
 800d460:	2500      	movs	r5, #0
 800d462:	f7fe be8d 	b.w	800c180 <dwt_ioctl+0x154>
 800d466:	2c00      	cmp	r4, #0
 800d468:	f000 8588 	beq.w	800df7c <dwt_ioctl+0x1f50>
 800d46c:	6862      	ldr	r2, [r4, #4]
 800d46e:	8821      	ldrh	r1, [r4, #0]
 800d470:	f7fe f9ea 	bl	800b848 <ull_setgpiovalue>
 800d474:	2500      	movs	r5, #0
 800d476:	f7fe be83 	b.w	800c180 <dwt_ioctl+0x154>
 800d47a:	2c00      	cmp	r4, #0
 800d47c:	f000 8581 	beq.w	800df82 <dwt_ioctl+0x1f56>
 800d480:	7865      	ldrb	r5, [r4, #1]
 800d482:	7823      	ldrb	r3, [r4, #0]
 800d484:	b18b      	cbz	r3, 800d4aa <dwt_ioctl+0x147e>
 800d486:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800d488:	2200      	movs	r2, #0
 800d48a:	739a      	strb	r2, [r3, #14]
 800d48c:	f04f 33ff 	mov.w	r3, #4294967295
 800d490:	2208      	movs	r2, #8
 800d492:	b1e5      	cbz	r5, 800d4ce <dwt_ioctl+0x14a2>
 800d494:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d498:	9200      	str	r2, [sp, #0]
 800d49a:	2200      	movs	r2, #0
 800d49c:	2110      	movs	r1, #16
 800d49e:	4630      	mov	r0, r6
 800d4a0:	f7fd fdac 	bl	800affc <dwt_modify32bitoffsetreg>
 800d4a4:	2500      	movs	r5, #0
 800d4a6:	f7fe be6b 	b.w	800c180 <dwt_ioctl+0x154>
 800d4aa:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800d4ac:	2201      	movs	r2, #1
 800d4ae:	739a      	strb	r2, [r3, #14]
 800d4b0:	2318      	movs	r3, #24
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	495b      	ldr	r1, [pc, #364]	; (800d624 <dwt_ioctl+0x15f8>)
 800d4b6:	f7fd f94f 	bl	800a758 <dwt_write32bitoffsetreg>
 800d4ba:	23e8      	movs	r3, #232	; 0xe8
 800d4bc:	2200      	movs	r2, #0
 800d4be:	495a      	ldr	r1, [pc, #360]	; (800d628 <dwt_ioctl+0x15fc>)
 800d4c0:	4630      	mov	r0, r6
 800d4c2:	f7fd f949 	bl	800a758 <dwt_write32bitoffsetreg>
 800d4c6:	f06f 0308 	mvn.w	r3, #8
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	e7e1      	b.n	800d492 <dwt_ioctl+0x1466>
 800d4ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d4d2:	e7e1      	b.n	800d498 <dwt_ioctl+0x146c>
 800d4d4:	2c00      	cmp	r4, #0
 800d4d6:	f000 8557 	beq.w	800df88 <dwt_ioctl+0x1f5c>
 800d4da:	6823      	ldr	r3, [r4, #0]
 800d4dc:	2200      	movs	r2, #0
 800d4de:	2130      	movs	r1, #48	; 0x30
 800d4e0:	f7fd f93a 	bl	800a758 <dwt_write32bitoffsetreg>
 800d4e4:	2500      	movs	r5, #0
 800d4e6:	f7fe be4b 	b.w	800c180 <dwt_ioctl+0x154>
 800d4ea:	2c00      	cmp	r4, #0
 800d4ec:	f000 854f 	beq.w	800df8e <dwt_ioctl+0x1f62>
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	4629      	mov	r1, r5
 800d4f4:	f7fc fcbb 	bl	8009e6e <dwt_read32bitoffsetreg>
 800d4f8:	6020      	str	r0, [r4, #0]
 800d4fa:	2500      	movs	r5, #0
 800d4fc:	f7fe be40 	b.w	800c180 <dwt_ioctl+0x154>
 800d500:	4623      	mov	r3, r4
 800d502:	2200      	movs	r2, #0
 800d504:	4629      	mov	r1, r5
 800d506:	f7fd f927 	bl	800a758 <dwt_write32bitoffsetreg>
 800d50a:	2500      	movs	r5, #0
 800d50c:	f7fe be38 	b.w	800c180 <dwt_ioctl+0x154>
 800d510:	2c00      	cmp	r4, #0
 800d512:	f000 853f 	beq.w	800df94 <dwt_ioctl+0x1f68>
 800d516:	2203      	movs	r2, #3
 800d518:	4944      	ldr	r1, [pc, #272]	; (800d62c <dwt_ioctl+0x1600>)
 800d51a:	f7fc fcd0 	bl	8009ebe <dwt_read8bitoffsetreg>
 800d51e:	f3c0 1002 	ubfx	r0, r0, #4, #3
 800d522:	7020      	strb	r0, [r4, #0]
 800d524:	2500      	movs	r5, #0
 800d526:	f7fe be2b 	b.w	800c180 <dwt_ioctl+0x154>
 800d52a:	2c00      	cmp	r4, #0
 800d52c:	f000 8535 	beq.w	800df9a <dwt_ioctl+0x1f6e>
 800d530:	6823      	ldr	r3, [r4, #0]
 800d532:	2200      	movs	r2, #0
 800d534:	2144      	movs	r1, #68	; 0x44
 800d536:	f7fd f90f 	bl	800a758 <dwt_write32bitoffsetreg>
 800d53a:	2500      	movs	r5, #0
 800d53c:	f7fe be20 	b.w	800c180 <dwt_ioctl+0x154>
 800d540:	2c00      	cmp	r4, #0
 800d542:	f000 852d 	beq.w	800dfa0 <dwt_ioctl+0x1f74>
 800d546:	8823      	ldrh	r3, [r4, #0]
 800d548:	2200      	movs	r2, #0
 800d54a:	2148      	movs	r1, #72	; 0x48
 800d54c:	f7fd f8a7 	bl	800a69e <dwt_write16bitoffsetreg>
 800d550:	2500      	movs	r5, #0
 800d552:	f7fe be15 	b.w	800c180 <dwt_ioctl+0x154>
 800d556:	2c00      	cmp	r4, #0
 800d558:	f000 8525 	beq.w	800dfa6 <dwt_ioctl+0x1f7a>
 800d55c:	2200      	movs	r2, #0
 800d55e:	2144      	movs	r1, #68	; 0x44
 800d560:	f7fc fc85 	bl	8009e6e <dwt_read32bitoffsetreg>
 800d564:	6020      	str	r0, [r4, #0]
 800d566:	2500      	movs	r5, #0
 800d568:	f7fe be0a 	b.w	800c180 <dwt_ioctl+0x154>
 800d56c:	2c00      	cmp	r4, #0
 800d56e:	f000 851d 	beq.w	800dfac <dwt_ioctl+0x1f80>
 800d572:	2200      	movs	r2, #0
 800d574:	2148      	movs	r1, #72	; 0x48
 800d576:	f7fc fc90 	bl	8009e9a <dwt_read16bitoffsetreg>
 800d57a:	6020      	str	r0, [r4, #0]
 800d57c:	2500      	movs	r5, #0
 800d57e:	f7fe bdff 	b.w	800c180 <dwt_ioctl+0x154>
 800d582:	2c00      	cmp	r4, #0
 800d584:	f000 8515 	beq.w	800dfb2 <dwt_ioctl+0x1f86>
 800d588:	7823      	ldrb	r3, [r4, #0]
 800d58a:	2200      	movs	r2, #0
 800d58c:	4928      	ldr	r1, [pc, #160]	; (800d630 <dwt_ioctl+0x1604>)
 800d58e:	f7fd fa71 	bl	800aa74 <dwt_write8bitoffsetreg>
 800d592:	2500      	movs	r5, #0
 800d594:	f7fe bdf4 	b.w	800c180 <dwt_ioctl+0x154>
 800d598:	2c00      	cmp	r4, #0
 800d59a:	f000 850d 	beq.w	800dfb8 <dwt_ioctl+0x1f8c>
 800d59e:	2200      	movs	r2, #0
 800d5a0:	2144      	movs	r1, #68	; 0x44
 800d5a2:	f7fc fc8c 	bl	8009ebe <dwt_read8bitoffsetreg>
 800d5a6:	7020      	strb	r0, [r4, #0]
 800d5a8:	2500      	movs	r5, #0
 800d5aa:	f7fe bde9 	b.w	800c180 <dwt_ioctl+0x154>
 800d5ae:	2c00      	cmp	r4, #0
 800d5b0:	f000 8505 	beq.w	800dfbe <dwt_ioctl+0x1f92>
 800d5b4:	f7fd fa6a 	bl	800aa8c <ull_getframelength>
 800d5b8:	6020      	str	r0, [r4, #0]
 800d5ba:	2500      	movs	r5, #0
 800d5bc:	f7fe bde0 	b.w	800c180 <dwt_ioctl+0x154>
 800d5c0:	2c00      	cmp	r4, #0
 800d5c2:	f000 84ff 	beq.w	800dfc4 <dwt_ioctl+0x1f98>
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	491a      	ldr	r1, [pc, #104]	; (800d634 <dwt_ioctl+0x1608>)
 800d5ca:	f7fc fc66 	bl	8009e9a <dwt_read16bitoffsetreg>
 800d5ce:	8020      	strh	r0, [r4, #0]
 800d5d0:	2500      	movs	r5, #0
 800d5d2:	f7fe bdd5 	b.w	800c180 <dwt_ioctl+0x154>
 800d5d6:	2c00      	cmp	r4, #0
 800d5d8:	f000 84f7 	beq.w	800dfca <dwt_ioctl+0x1f9e>
 800d5dc:	2200      	movs	r2, #0
 800d5de:	4916      	ldr	r1, [pc, #88]	; (800d638 <dwt_ioctl+0x160c>)
 800d5e0:	f7fc fc45 	bl	8009e6e <dwt_read32bitoffsetreg>
 800d5e4:	6020      	str	r0, [r4, #0]
 800d5e6:	2500      	movs	r5, #0
 800d5e8:	f7fe bdca 	b.w	800c180 <dwt_ioctl+0x154>
 800d5ec:	2c00      	cmp	r4, #0
 800d5ee:	f000 84ef 	beq.w	800dfd0 <dwt_ioctl+0x1fa4>
 800d5f2:	8823      	ldrh	r3, [r4, #0]
 800d5f4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d5f8:	9300      	str	r3, [sp, #0]
 800d5fa:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800d5fe:	2200      	movs	r2, #0
 800d600:	490d      	ldr	r1, [pc, #52]	; (800d638 <dwt_ioctl+0x160c>)
 800d602:	f7fe f889 	bl	800b718 <dwt_modify16bitoffsetreg>
 800d606:	2500      	movs	r5, #0
 800d608:	f7fe bdba 	b.w	800c180 <dwt_ioctl+0x154>
 800d60c:	000c0008 	.word	0x000c0008
 800d610:	0007001c 	.word	0x0007001c
 800d614:	00080010 	.word	0x00080010
 800d618:	00080014 	.word	0x00080014
 800d61c:	00070014 	.word	0x00070014
 800d620:	00050008 	.word	0x00050008
 800d624:	001f000c 	.word	0x001f000c
 800d628:	001f0010 	.word	0x001f0010
 800d62c:	00030060 	.word	0x00030060
 800d630:	00010018 	.word	0x00010018
 800d634:	0005002c 	.word	0x0005002c
 800d638:	000e001c 	.word	0x000e001c
 800d63c:	2c00      	cmp	r4, #0
 800d63e:	f000 84ca 	beq.w	800dfd6 <dwt_ioctl+0x1faa>
 800d642:	88a7      	ldrh	r7, [r4, #4]
 800d644:	f8d4 b008 	ldr.w	fp, [r4, #8]
 800d648:	7b23      	ldrb	r3, [r4, #12]
 800d64a:	9306      	str	r3, [sp, #24]
 800d64c:	6922      	ldr	r2, [r4, #16]
 800d64e:	9204      	str	r2, [sp, #16]
 800d650:	6962      	ldr	r2, [r4, #20]
 800d652:	9205      	str	r2, [sp, #20]
 800d654:	f00b 0203 	and.w	r2, fp, #3
 800d658:	f3cb 0085 	ubfx	r0, fp, #2, #6
 800d65c:	2b05      	cmp	r3, #5
 800d65e:	d145      	bne.n	800d6ec <dwt_ioctl+0x16c0>
 800d660:	f5b7 7fb1 	cmp.w	r7, #354	; 0x162
 800d664:	bf28      	it	cs
 800d666:	f44f 77b1 	movcs.w	r7, #354	; 0x162
 800d66a:	f8df 9338 	ldr.w	r9, [pc, #824]	; 800d9a4 <dwt_ioctl+0x1978>
 800d66e:	2f04      	cmp	r7, #4
 800d670:	d805      	bhi.n	800d67e <dwt_ioctl+0x1652>
 800d672:	eb09 0300 	add.w	r3, r9, r0
 800d676:	785b      	ldrb	r3, [r3, #1]
 800d678:	3b05      	subs	r3, #5
 800d67a:	429f      	cmp	r7, r3
 800d67c:	db3e      	blt.n	800d6fc <dwt_ioctl+0x16d0>
 800d67e:	2a01      	cmp	r2, #1
 800d680:	d87c      	bhi.n	800d77c <dwt_ioctl+0x1750>
 800d682:	4bc4      	ldr	r3, [pc, #784]	; (800d994 <dwt_ioctl+0x1968>)
 800d684:	5c99      	ldrb	r1, [r3, r2]
 800d686:	463e      	mov	r6, r7
 800d688:	42b9      	cmp	r1, r7
 800d68a:	da79      	bge.n	800d780 <dwt_ioctl+0x1754>
 800d68c:	1c55      	adds	r5, r2, #1
 800d68e:	fa53 f585 	uxtab	r5, r3, r5
 800d692:	2300      	movs	r3, #0
 800d694:	440b      	add	r3, r1
 800d696:	b29b      	uxth	r3, r3
 800d698:	3201      	adds	r2, #1
 800d69a:	b2d2      	uxtb	r2, r2
 800d69c:	2a02      	cmp	r2, #2
 800d69e:	d005      	beq.n	800d6ac <dwt_ioctl+0x1680>
 800d6a0:	f815 1b01 	ldrb.w	r1, [r5], #1
 800d6a4:	eba6 0c03 	sub.w	ip, r6, r3
 800d6a8:	4561      	cmp	r1, ip
 800d6aa:	dbf3      	blt.n	800d694 <dwt_ioctl+0x1668>
 800d6ac:	429f      	cmp	r7, r3
 800d6ae:	bf08      	it	eq
 800d6b0:	9003      	streq	r0, [sp, #12]
 800d6b2:	d069      	beq.n	800d788 <dwt_ioctl+0x175c>
 800d6b4:	f107 0805 	add.w	r8, r7, #5
 800d6b8:	fa1f f888 	uxth.w	r8, r8
 800d6bc:	2580      	movs	r5, #128	; 0x80
 800d6be:	2100      	movs	r1, #0
 800d6c0:	9107      	str	r1, [sp, #28]
 800d6c2:	9103      	str	r1, [sp, #12]
 800d6c4:	9108      	str	r1, [sp, #32]
 800d6c6:	460e      	mov	r6, r1
 800d6c8:	2105      	movs	r1, #5
 800d6ca:	46be      	mov	lr, r7
 800d6cc:	428f      	cmp	r7, r1
 800d6ce:	bf38      	it	cc
 800d6d0:	468e      	movcc	lr, r1
 800d6d2:	f1ae 0e05 	sub.w	lr, lr, #5
 800d6d6:	fa1f fe8e 	uxth.w	lr, lr
 800d6da:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 800d994 <dwt_ioctl+0x1968>
 800d6de:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800d6e2:	468b      	mov	fp, r1
 800d6e4:	46bc      	mov	ip, r7
 800d6e6:	4637      	mov	r7, r6
 800d6e8:	f000 bcec 	b.w	800e0c4 <dwt_ioctl+0x2098>
 800d6ec:	f240 1331 	movw	r3, #305	; 0x131
 800d6f0:	429f      	cmp	r7, r3
 800d6f2:	bf28      	it	cs
 800d6f4:	461f      	movcs	r7, r3
 800d6f6:	f8df 92b0 	ldr.w	r9, [pc, #688]	; 800d9a8 <dwt_ioctl+0x197c>
 800d6fa:	e7b8      	b.n	800d66e <dwt_ioctl+0x1642>
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	9a05      	ldr	r2, [sp, #20]
 800d700:	8013      	strh	r3, [r2, #0]
 800d702:	9a04      	ldr	r2, [sp, #16]
 800d704:	f8c2 b000 	str.w	fp, [r2]
 800d708:	e04d      	b.n	800d7a6 <dwt_ioctl+0x177a>
 800d70a:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 800d70e:	2300      	movs	r3, #0
 800d710:	9a05      	ldr	r2, [sp, #20]
 800d712:	8013      	strh	r3, [r2, #0]
 800d714:	9b04      	ldr	r3, [sp, #16]
 800d716:	f8c3 b000 	str.w	fp, [r3]
 800d71a:	f04f 33ff 	mov.w	r3, #4294967295
 800d71e:	e042      	b.n	800d7a6 <dwt_ioctl+0x177a>
 800d720:	fa1f fb81 	uxth.w	fp, r1
 800d724:	9207      	str	r2, [sp, #28]
 800d726:	9003      	str	r0, [sp, #12]
 800d728:	9308      	str	r3, [sp, #32]
 800d72a:	2701      	movs	r7, #1
 800d72c:	f000 bcdb 	b.w	800e0e6 <dwt_ioctl+0x20ba>
 800d730:	2f00      	cmp	r7, #0
 800d732:	f040 849b 	bne.w	800e06c <dwt_ioctl+0x2040>
 800d736:	4598      	cmp	r8, r3
 800d738:	f200 84b0 	bhi.w	800e09c <dwt_ioctl+0x2070>
 800d73c:	2e00      	cmp	r6, #0
 800d73e:	d039      	beq.n	800d7b4 <dwt_ioctl+0x1788>
 800d740:	283f      	cmp	r0, #63	; 0x3f
 800d742:	f000 84d5 	beq.w	800e0f0 <dwt_ioctl+0x20c4>
 800d746:	2700      	movs	r7, #0
 800d748:	f819 1000 	ldrb.w	r1, [r9, r0]
 800d74c:	1a5b      	subs	r3, r3, r1
 800d74e:	b29b      	uxth	r3, r3
 800d750:	1e46      	subs	r6, r0, #1
 800d752:	f006 003f 	and.w	r0, r6, #63	; 0x3f
 800d756:	f016 063f 	ands.w	r6, r6, #63	; 0x3f
 800d75a:	bf18      	it	ne
 800d75c:	2601      	movne	r6, #1
 800d75e:	f000 bca9 	b.w	800e0b4 <dwt_ioctl+0x2088>
 800d762:	9906      	ldr	r1, [sp, #24]
 800d764:	2909      	cmp	r1, #9
 800d766:	f040 84c9 	bne.w	800e0fc <dwt_ioctl+0x20d0>
 800d76a:	213f      	movs	r1, #63	; 0x3f
 800d76c:	9103      	str	r1, [sp, #12]
 800d76e:	e00b      	b.n	800d788 <dwt_ioctl+0x175c>
 800d770:	b2b3      	uxth	r3, r6
 800d772:	3201      	adds	r2, #1
 800d774:	b2d2      	uxtb	r2, r2
 800d776:	213f      	movs	r1, #63	; 0x3f
 800d778:	9103      	str	r1, [sp, #12]
 800d77a:	e005      	b.n	800d788 <dwt_ioctl+0x175c>
 800d77c:	2300      	movs	r3, #0
 800d77e:	e795      	b.n	800d6ac <dwt_ioctl+0x1680>
 800d780:	2300      	movs	r3, #0
 800d782:	e793      	b.n	800d6ac <dwt_ioctl+0x1680>
 800d784:	9003      	str	r0, [sp, #12]
 800d786:	4663      	mov	r3, ip
 800d788:	9905      	ldr	r1, [sp, #20]
 800d78a:	800b      	strh	r3, [r1, #0]
 800d78c:	9b03      	ldr	r3, [sp, #12]
 800d78e:	ea42 0283 	orr.w	r2, r2, r3, lsl #2
 800d792:	b2d2      	uxtb	r2, r2
 800d794:	0413      	lsls	r3, r2, #16
 800d796:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d79a:	4313      	orrs	r3, r2
 800d79c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d7a0:	9a04      	ldr	r2, [sp, #16]
 800d7a2:	6013      	str	r3, [r2, #0]
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	6023      	str	r3, [r4, #0]
 800d7a8:	2500      	movs	r5, #0
 800d7aa:	f7fe bce9 	b.w	800c180 <dwt_ioctl+0x154>
 800d7ae:	9a07      	ldr	r2, [sp, #28]
 800d7b0:	9b08      	ldr	r3, [sp, #32]
 800d7b2:	e7e9      	b.n	800d788 <dwt_ioctl+0x175c>
 800d7b4:	9003      	str	r0, [sp, #12]
 800d7b6:	e7e7      	b.n	800d788 <dwt_ioctl+0x175c>
 800d7b8:	9a07      	ldr	r2, [sp, #28]
 800d7ba:	9b08      	ldr	r3, [sp, #32]
 800d7bc:	e7e4      	b.n	800d788 <dwt_ioctl+0x175c>
 800d7be:	213f      	movs	r1, #63	; 0x3f
 800d7c0:	9103      	str	r1, [sp, #12]
 800d7c2:	e7e1      	b.n	800d788 <dwt_ioctl+0x175c>
 800d7c4:	2c00      	cmp	r4, #0
 800d7c6:	f000 8409 	beq.w	800dfdc <dwt_ioctl+0x1fb0>
 800d7ca:	7827      	ldrb	r7, [r4, #0]
 800d7cc:	7864      	ldrb	r4, [r4, #1]
 800d7ce:	f7f2 fe7f 	bl	80004d0 <decamutexon>
 800d7d2:	4605      	mov	r5, r0
 800d7d4:	2c02      	cmp	r4, #2
 800d7d6:	d00e      	beq.n	800d7f6 <dwt_ioctl+0x17ca>
 800d7d8:	2c04      	cmp	r4, #4
 800d7da:	d00c      	beq.n	800d7f6 <dwt_ioctl+0x17ca>
 800d7dc:	f004 04fd 	and.w	r4, r4, #253	; 0xfd
 800d7e0:	2c01      	cmp	r4, #1
 800d7e2:	d01a      	beq.n	800d81a <dwt_ioctl+0x17ee>
 800d7e4:	43fb      	mvns	r3, r7
 800d7e6:	2200      	movs	r2, #0
 800d7e8:	9200      	str	r2, [sp, #0]
 800d7ea:	b2db      	uxtb	r3, r3
 800d7ec:	496a      	ldr	r1, [pc, #424]	; (800d998 <dwt_ioctl+0x196c>)
 800d7ee:	4630      	mov	r0, r6
 800d7f0:	f7fd fd76 	bl	800b2e0 <dwt_modify8bitoffsetreg>
 800d7f4:	e005      	b.n	800d802 <dwt_ioctl+0x17d6>
 800d7f6:	463b      	mov	r3, r7
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	4967      	ldr	r1, [pc, #412]	; (800d998 <dwt_ioctl+0x196c>)
 800d7fc:	4630      	mov	r0, r6
 800d7fe:	f7fd f939 	bl	800aa74 <dwt_write8bitoffsetreg>
 800d802:	463b      	mov	r3, r7
 800d804:	2200      	movs	r2, #0
 800d806:	4965      	ldr	r1, [pc, #404]	; (800d99c <dwt_ioctl+0x1970>)
 800d808:	4630      	mov	r0, r6
 800d80a:	f7fc ffa5 	bl	800a758 <dwt_write32bitoffsetreg>
 800d80e:	4628      	mov	r0, r5
 800d810:	f7f2 fe6f 	bl	80004f2 <decamutexoff>
 800d814:	2500      	movs	r5, #0
 800d816:	f7fe bcb3 	b.w	800c180 <dwt_ioctl+0x154>
 800d81a:	9700      	str	r7, [sp, #0]
 800d81c:	23ff      	movs	r3, #255	; 0xff
 800d81e:	2200      	movs	r2, #0
 800d820:	495d      	ldr	r1, [pc, #372]	; (800d998 <dwt_ioctl+0x196c>)
 800d822:	4630      	mov	r0, r6
 800d824:	f7fd fd5c 	bl	800b2e0 <dwt_modify8bitoffsetreg>
 800d828:	e7eb      	b.n	800d802 <dwt_ioctl+0x17d6>
 800d82a:	2302      	movs	r3, #2
 800d82c:	9301      	str	r3, [sp, #4]
 800d82e:	2500      	movs	r5, #0
 800d830:	9500      	str	r5, [sp, #0]
 800d832:	462b      	mov	r3, r5
 800d834:	462a      	mov	r2, r5
 800d836:	211a      	movs	r1, #26
 800d838:	f7fc fa91 	bl	8009d5e <dwt_xfer3xxx>
 800d83c:	f7fe bca0 	b.w	800c180 <dwt_ioctl+0x154>
 800d840:	f7fe fbe0 	bl	800c004 <ull_softreset_fcmd>
 800d844:	2500      	movs	r5, #0
 800d846:	f7fe bc9b 	b.w	800c180 <dwt_ioctl+0x154>
 800d84a:	f7fe fbc7 	bl	800bfdc <ull_softreset_no_sema_fcmd>
 800d84e:	2500      	movs	r5, #0
 800d850:	f7fe bc96 	b.w	800c180 <dwt_ioctl+0x154>
 800d854:	2302      	movs	r3, #2
 800d856:	9301      	str	r3, [sp, #4]
 800d858:	2500      	movs	r5, #0
 800d85a:	9500      	str	r5, [sp, #0]
 800d85c:	462b      	mov	r3, r5
 800d85e:	462a      	mov	r2, r5
 800d860:	2114      	movs	r1, #20
 800d862:	f7fc fa7c 	bl	8009d5e <dwt_xfer3xxx>
 800d866:	f7fe bc8b 	b.w	800c180 <dwt_ioctl+0x154>
 800d86a:	2402      	movs	r4, #2
 800d86c:	9401      	str	r4, [sp, #4]
 800d86e:	2500      	movs	r5, #0
 800d870:	9500      	str	r5, [sp, #0]
 800d872:	462b      	mov	r3, r5
 800d874:	462a      	mov	r2, r5
 800d876:	2115      	movs	r1, #21
 800d878:	f7fc fa71 	bl	8009d5e <dwt_xfer3xxx>
 800d87c:	9401      	str	r4, [sp, #4]
 800d87e:	9500      	str	r5, [sp, #0]
 800d880:	462b      	mov	r3, r5
 800d882:	462a      	mov	r2, r5
 800d884:	2115      	movs	r1, #21
 800d886:	4630      	mov	r0, r6
 800d888:	f7fc fa69 	bl	8009d5e <dwt_xfer3xxx>
 800d88c:	f7fe bc78 	b.w	800c180 <dwt_ioctl+0x154>
 800d890:	2302      	movs	r3, #2
 800d892:	9301      	str	r3, [sp, #4]
 800d894:	2500      	movs	r5, #0
 800d896:	9500      	str	r5, [sp, #0]
 800d898:	462b      	mov	r3, r5
 800d89a:	462a      	mov	r2, r5
 800d89c:	2116      	movs	r1, #22
 800d89e:	f7fc fa5e 	bl	8009d5e <dwt_xfer3xxx>
 800d8a2:	f7fe bc6d 	b.w	800c180 <dwt_ioctl+0x154>
 800d8a6:	2c00      	cmp	r4, #0
 800d8a8:	f000 839b 	beq.w	800dfe2 <dwt_ioctl+0x1fb6>
 800d8ac:	b93a      	cbnz	r2, 800d8be <dwt_ioctl+0x1892>
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 800d8b4:	f7fc fb03 	bl	8009ebe <dwt_read8bitoffsetreg>
 800d8b8:	7020      	strb	r0, [r4, #0]
 800d8ba:	f7fe bc61 	b.w	800c180 <dwt_ioctl+0x154>
 800d8be:	2201      	movs	r2, #1
 800d8c0:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 800d8c4:	f7fc fafb 	bl	8009ebe <dwt_read8bitoffsetreg>
 800d8c8:	7020      	strb	r0, [r4, #0]
 800d8ca:	2500      	movs	r5, #0
 800d8cc:	f7fe bc58 	b.w	800c180 <dwt_ioctl+0x154>
 800d8d0:	2c00      	cmp	r4, #0
 800d8d2:	f000 8389 	beq.w	800dfe8 <dwt_ioctl+0x1fbc>
 800d8d6:	7824      	ldrb	r4, [r4, #0]
 800d8d8:	2200      	movs	r2, #0
 800d8da:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 800d8de:	f7fc faee 	bl	8009ebe <dwt_read8bitoffsetreg>
 800d8e2:	f000 039f 	and.w	r3, r0, #159	; 0x9f
 800d8e6:	4323      	orrs	r3, r4
 800d8e8:	2200      	movs	r2, #0
 800d8ea:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 800d8ee:	4630      	mov	r0, r6
 800d8f0:	f7fd f8c0 	bl	800aa74 <dwt_write8bitoffsetreg>
 800d8f4:	2500      	movs	r5, #0
 800d8f6:	f7fe bc43 	b.w	800c180 <dwt_ioctl+0x154>
 800d8fa:	2c00      	cmp	r4, #0
 800d8fc:	f000 8377 	beq.w	800dfee <dwt_ioctl+0x1fc2>
 800d900:	7824      	ldrb	r4, [r4, #0]
 800d902:	f012 05ff 	ands.w	r5, r2, #255	; 0xff
 800d906:	d01e      	beq.n	800d946 <dwt_ioctl+0x191a>
 800d908:	2d01      	cmp	r5, #1
 800d90a:	f040 8373 	bne.w	800dff4 <dwt_ioctl+0x1fc8>
 800d90e:	2502      	movs	r5, #2
 800d910:	2201      	movs	r2, #1
 800d912:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 800d916:	4630      	mov	r0, r6
 800d918:	f7fc fad1 	bl	8009ebe <dwt_read8bitoffsetreg>
 800d91c:	b9ac      	cbnz	r4, 800d94a <dwt_ioctl+0x191e>
 800d91e:	ea20 0305 	bic.w	r3, r0, r5
 800d922:	b2db      	uxtb	r3, r3
 800d924:	2201      	movs	r2, #1
 800d926:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 800d92a:	4630      	mov	r0, r6
 800d92c:	f7fd f8a2 	bl	800aa74 <dwt_write8bitoffsetreg>
 800d930:	2200      	movs	r2, #0
 800d932:	2110      	movs	r1, #16
 800d934:	4630      	mov	r0, r6
 800d936:	f7fc fa9a 	bl	8009e6e <dwt_read32bitoffsetreg>
 800d93a:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 800d93e:	d00b      	beq.n	800d958 <dwt_ioctl+0x192c>
 800d940:	2500      	movs	r5, #0
 800d942:	f7fe bc1d 	b.w	800c180 <dwt_ioctl+0x154>
 800d946:	2504      	movs	r5, #4
 800d948:	e7e2      	b.n	800d910 <dwt_ioctl+0x18e4>
 800d94a:	2c01      	cmp	r4, #1
 800d94c:	f040 8356 	bne.w	800dffc <dwt_ioctl+0x1fd0>
 800d950:	ea40 0305 	orr.w	r3, r0, r5
 800d954:	b2db      	uxtb	r3, r3
 800d956:	e7e5      	b.n	800d924 <dwt_ioctl+0x18f8>
 800d958:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d95c:	9300      	str	r3, [sp, #0]
 800d95e:	f04f 33ff 	mov.w	r3, #4294967295
 800d962:	2200      	movs	r2, #0
 800d964:	2110      	movs	r1, #16
 800d966:	4630      	mov	r0, r6
 800d968:	f7fd fb48 	bl	800affc <dwt_modify32bitoffsetreg>
 800d96c:	2500      	movs	r5, #0
 800d96e:	f7fe bc07 	b.w	800c180 <dwt_ioctl+0x154>
 800d972:	2c00      	cmp	r4, #0
 800d974:	f000 8346 	beq.w	800e004 <dwt_ioctl+0x1fd8>
 800d978:	7823      	ldrb	r3, [r4, #0]
 800d97a:	035b      	lsls	r3, r3, #13
 800d97c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d980:	9300      	str	r3, [sp, #0]
 800d982:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 800d986:	2200      	movs	r2, #0
 800d988:	4905      	ldr	r1, [pc, #20]	; (800d9a0 <dwt_ioctl+0x1974>)
 800d98a:	f7fd fec5 	bl	800b718 <dwt_modify16bitoffsetreg>
 800d98e:	2500      	movs	r5, #0
 800d990:	f7fe bbf6 	b.w	800c180 <dwt_ioctl+0x154>
 800d994:	0801327c 	.word	0x0801327c
 800d998:	0001001c 	.word	0x0001001c
 800d99c:	00010018 	.word	0x00010018
 800d9a0:	000e000c 	.word	0x000e000c
 800d9a4:	080131fc 	.word	0x080131fc
 800d9a8:	0801323c 	.word	0x0801323c
 800d9ac:	2c00      	cmp	r4, #0
 800d9ae:	f000 832c 	beq.w	800e00a <dwt_ioctl+0x1fde>
 800d9b2:	7825      	ldrb	r5, [r4, #0]
 800d9b4:	6862      	ldr	r2, [r4, #4]
 800d9b6:	2a01      	cmp	r2, #1
 800d9b8:	bf15      	itete	ne
 800d9ba:	f46f 3360 	mvnne.w	r3, #229376	; 0x38000
 800d9be:	f46f 43e0 	mvneq.w	r3, #28672	; 0x7000
 800d9c2:	27df      	movne	r7, #223	; 0xdf
 800d9c4:	27ef      	moveq	r7, #239	; 0xef
 800d9c6:	bf14      	ite	ne
 800d9c8:	f04f 0820 	movne.w	r8, #32
 800d9cc:	f04f 0810 	moveq.w	r8, #16
 800d9d0:	2400      	movs	r4, #0
 800d9d2:	9400      	str	r4, [sp, #0]
 800d9d4:	4622      	mov	r2, r4
 800d9d6:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800d9da:	f7fd fb0f 	bl	800affc <dwt_modify32bitoffsetreg>
 800d9de:	9400      	str	r4, [sp, #0]
 800d9e0:	463b      	mov	r3, r7
 800d9e2:	4622      	mov	r2, r4
 800d9e4:	49be      	ldr	r1, [pc, #760]	; (800dce0 <dwt_ioctl+0x1cb4>)
 800d9e6:	4630      	mov	r0, r6
 800d9e8:	f7fd fc7a 	bl	800b2e0 <dwt_modify8bitoffsetreg>
 800d9ec:	2d01      	cmp	r5, #1
 800d9ee:	d003      	beq.n	800d9f8 <dwt_ioctl+0x19cc>
 800d9f0:	b165      	cbz	r5, 800da0c <dwt_ioctl+0x19e0>
 800d9f2:	2500      	movs	r5, #0
 800d9f4:	f7fe bbc4 	b.w	800c180 <dwt_ioctl+0x154>
 800d9f8:	4625      	mov	r5, r4
 800d9fa:	9400      	str	r4, [sp, #0]
 800d9fc:	463b      	mov	r3, r7
 800d9fe:	4622      	mov	r2, r4
 800da00:	49b8      	ldr	r1, [pc, #736]	; (800dce4 <dwt_ioctl+0x1cb8>)
 800da02:	4630      	mov	r0, r6
 800da04:	f7fd fc6c 	bl	800b2e0 <dwt_modify8bitoffsetreg>
 800da08:	f7fe bbba 	b.w	800c180 <dwt_ioctl+0x154>
 800da0c:	f8cd 8000 	str.w	r8, [sp]
 800da10:	23ff      	movs	r3, #255	; 0xff
 800da12:	2200      	movs	r2, #0
 800da14:	49b3      	ldr	r1, [pc, #716]	; (800dce4 <dwt_ioctl+0x1cb8>)
 800da16:	4630      	mov	r0, r6
 800da18:	f7fd fc62 	bl	800b2e0 <dwt_modify8bitoffsetreg>
 800da1c:	f7fe bbb0 	b.w	800c180 <dwt_ioctl+0x154>
 800da20:	2c00      	cmp	r4, #0
 800da22:	f000 82f5 	beq.w	800e010 <dwt_ioctl+0x1fe4>
 800da26:	7822      	ldrb	r2, [r4, #0]
 800da28:	f012 0f01 	tst.w	r2, #1
 800da2c:	d02d      	beq.n	800da8a <dwt_ioctl+0x1a5e>
 800da2e:	0157      	lsls	r7, r2, #5
 800da30:	f007 0740 	and.w	r7, r7, #64	; 0x40
 800da34:	2440      	movs	r4, #64	; 0x40
 800da36:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800da3a:	f012 0f04 	tst.w	r2, #4
 800da3e:	d028      	beq.n	800da92 <dwt_ioctl+0x1a66>
 800da40:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
 800da44:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800da48:	0112      	lsls	r2, r2, #4
 800da4a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800da4e:	4317      	orrs	r7, r2
 800da50:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800da54:	9200      	str	r2, [sp, #0]
 800da56:	43db      	mvns	r3, r3
 800da58:	2200      	movs	r2, #0
 800da5a:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800da5e:	4630      	mov	r0, r6
 800da60:	f7fd facc 	bl	800affc <dwt_modify32bitoffsetreg>
 800da64:	43e4      	mvns	r4, r4
 800da66:	b2a4      	uxth	r4, r4
 800da68:	2500      	movs	r5, #0
 800da6a:	9500      	str	r5, [sp, #0]
 800da6c:	4623      	mov	r3, r4
 800da6e:	462a      	mov	r2, r5
 800da70:	499b      	ldr	r1, [pc, #620]	; (800dce0 <dwt_ioctl+0x1cb4>)
 800da72:	4630      	mov	r0, r6
 800da74:	f7fd fe50 	bl	800b718 <dwt_modify16bitoffsetreg>
 800da78:	9700      	str	r7, [sp, #0]
 800da7a:	4623      	mov	r3, r4
 800da7c:	462a      	mov	r2, r5
 800da7e:	4999      	ldr	r1, [pc, #612]	; (800dce4 <dwt_ioctl+0x1cb8>)
 800da80:	4630      	mov	r0, r6
 800da82:	f7fd fe49 	bl	800b718 <dwt_modify16bitoffsetreg>
 800da86:	f7fe bb7b 	b.w	800c180 <dwt_ioctl+0x154>
 800da8a:	2700      	movs	r7, #0
 800da8c:	463c      	mov	r4, r7
 800da8e:	463b      	mov	r3, r7
 800da90:	e7d3      	b.n	800da3a <dwt_ioctl+0x1a0e>
 800da92:	2200      	movs	r2, #0
 800da94:	e7de      	b.n	800da54 <dwt_ioctl+0x1a28>
 800da96:	2308      	movs	r3, #8
 800da98:	9300      	str	r3, [sp, #0]
 800da9a:	23ff      	movs	r3, #255	; 0xff
 800da9c:	2201      	movs	r2, #1
 800da9e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800daa2:	f7fd fc1d 	bl	800b2e0 <dwt_modify8bitoffsetreg>
 800daa6:	4c90      	ldr	r4, [pc, #576]	; (800dce8 <dwt_ioctl+0x1cbc>)
 800daa8:	2302      	movs	r3, #2
 800daaa:	9300      	str	r3, [sp, #0]
 800daac:	23ff      	movs	r3, #255	; 0xff
 800daae:	2203      	movs	r2, #3
 800dab0:	4621      	mov	r1, r4
 800dab2:	4630      	mov	r0, r6
 800dab4:	f7fd fc14 	bl	800b2e0 <dwt_modify8bitoffsetreg>
 800dab8:	2500      	movs	r5, #0
 800daba:	9500      	str	r5, [sp, #0]
 800dabc:	23f7      	movs	r3, #247	; 0xf7
 800dabe:	2201      	movs	r2, #1
 800dac0:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800dac4:	4630      	mov	r0, r6
 800dac6:	f7fd fc0b 	bl	800b2e0 <dwt_modify8bitoffsetreg>
 800daca:	9500      	str	r5, [sp, #0]
 800dacc:	23fd      	movs	r3, #253	; 0xfd
 800dace:	2203      	movs	r2, #3
 800dad0:	4621      	mov	r1, r4
 800dad2:	4630      	mov	r0, r6
 800dad4:	f7fd fc04 	bl	800b2e0 <dwt_modify8bitoffsetreg>
 800dad8:	f7fe bb52 	b.w	800c180 <dwt_ioctl+0x154>
 800dadc:	2c00      	cmp	r4, #0
 800dade:	f000 829a 	beq.w	800e016 <dwt_ioctl+0x1fea>
 800dae2:	8863      	ldrh	r3, [r4, #2]
 800dae4:	00db      	lsls	r3, r3, #3
 800dae6:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800daea:	7822      	ldrb	r2, [r4, #0]
 800daec:	b10a      	cbz	r2, 800daf2 <dwt_ioctl+0x1ac6>
 800daee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800daf2:	9300      	str	r3, [sp, #0]
 800daf4:	f24f 0307 	movw	r3, #61447	; 0xf007
 800daf8:	2200      	movs	r2, #0
 800dafa:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800dafe:	4630      	mov	r0, r6
 800db00:	f7fd fe0a 	bl	800b718 <dwt_modify16bitoffsetreg>
 800db04:	2500      	movs	r5, #0
 800db06:	f7fe bb3b 	b.w	800c180 <dwt_ioctl+0x154>
 800db0a:	2c00      	cmp	r4, #0
 800db0c:	f000 8286 	beq.w	800e01c <dwt_ioctl+0x1ff0>
 800db10:	b2e3      	uxtb	r3, r4
 800db12:	1c9a      	adds	r2, r3, #2
 800db14:	2301      	movs	r3, #1
 800db16:	4093      	lsls	r3, r2
 800db18:	3b01      	subs	r3, #1
 800db1a:	b2db      	uxtb	r3, r3
 800db1c:	2200      	movs	r2, #0
 800db1e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800db22:	f7fc ffa7 	bl	800aa74 <dwt_write8bitoffsetreg>
 800db26:	2500      	movs	r5, #0
 800db28:	f7fe bb2a 	b.w	800c180 <dwt_ioctl+0x154>
 800db2c:	2c00      	cmp	r4, #0
 800db2e:	f000 8278 	beq.w	800e022 <dwt_ioctl+0x1ff6>
 800db32:	7ae3      	ldrb	r3, [r4, #11]
 800db34:	2b00      	cmp	r3, #0
 800db36:	f000 8277 	beq.w	800e028 <dwt_ioctl+0x1ffc>
 800db3a:	7b63      	ldrb	r3, [r4, #13]
 800db3c:	2b01      	cmp	r3, #1
 800db3e:	d921      	bls.n	800db84 <dwt_ioctl+0x1b58>
 800db40:	7b22      	ldrb	r2, [r4, #12]
 800db42:	4b6a      	ldr	r3, [pc, #424]	; (800dcec <dwt_ioctl+0x1cc0>)
 800db44:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800db48:	0112      	lsls	r2, r2, #4
 800db4a:	0ad3      	lsrs	r3, r2, #11
 800db4c:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800db50:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800db54:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800db58:	bf28      	it	cs
 800db5a:	3301      	addcs	r3, #1
 800db5c:	b29b      	uxth	r3, r3
 800db5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db62:	9300      	str	r3, [sp, #0]
 800db64:	f64f 7380 	movw	r3, #65408	; 0xff80
 800db68:	2202      	movs	r2, #2
 800db6a:	4961      	ldr	r1, [pc, #388]	; (800dcf0 <dwt_ioctl+0x1cc4>)
 800db6c:	4630      	mov	r0, r6
 800db6e:	f7fd fdd3 	bl	800b718 <dwt_modify16bitoffsetreg>
 800db72:	2394      	movs	r3, #148	; 0x94
 800db74:	2200      	movs	r2, #0
 800db76:	495f      	ldr	r1, [pc, #380]	; (800dcf4 <dwt_ioctl+0x1cc8>)
 800db78:	4630      	mov	r0, r6
 800db7a:	f7fc ff7b 	bl	800aa74 <dwt_write8bitoffsetreg>
 800db7e:	2500      	movs	r5, #0
 800db80:	f7fe bafe 	b.w	800c180 <dwt_ioctl+0x154>
 800db84:	7b22      	ldrb	r2, [r4, #12]
 800db86:	4b59      	ldr	r3, [pc, #356]	; (800dcec <dwt_ioctl+0x1cc0>)
 800db88:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800db8c:	f44f 6235 	mov.w	r2, #2896	; 0xb50
 800db90:	fb02 f203 	mul.w	r2, r2, r3
 800db94:	0c93      	lsrs	r3, r2, #18
 800db96:	f3c2 12ca 	ubfx	r2, r2, #7, #11
 800db9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800db9e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800dba2:	bf28      	it	cs
 800dba4:	3301      	addcs	r3, #1
 800dba6:	b29b      	uxth	r3, r3
 800dba8:	e7d9      	b.n	800db5e <dwt_ioctl+0x1b32>
 800dbaa:	2c00      	cmp	r4, #0
 800dbac:	f000 823f 	beq.w	800e02e <dwt_ioctl+0x2002>
 800dbb0:	2200      	movs	r2, #0
 800dbb2:	4951      	ldr	r1, [pc, #324]	; (800dcf8 <dwt_ioctl+0x1ccc>)
 800dbb4:	f7fc f95b 	bl	8009e6e <dwt_read32bitoffsetreg>
 800dbb8:	6020      	str	r0, [r4, #0]
 800dbba:	2500      	movs	r5, #0
 800dbbc:	f7fe bae0 	b.w	800c180 <dwt_ioctl+0x154>
 800dbc0:	2c00      	cmp	r4, #0
 800dbc2:	f000 8237 	beq.w	800e034 <dwt_ioctl+0x2008>
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	494c      	ldr	r1, [pc, #304]	; (800dcfc <dwt_ioctl+0x1cd0>)
 800dbca:	f7fc f950 	bl	8009e6e <dwt_read32bitoffsetreg>
 800dbce:	6020      	str	r0, [r4, #0]
 800dbd0:	2500      	movs	r5, #0
 800dbd2:	f7fe bad5 	b.w	800c180 <dwt_ioctl+0x154>
 800dbd6:	2c00      	cmp	r4, #0
 800dbd8:	f000 822f 	beq.w	800e03a <dwt_ioctl+0x200e>
 800dbdc:	f44f 13a8 	mov.w	r3, #1376256	; 0x150000
 800dbe0:	6023      	str	r3, [r4, #0]
 800dbe2:	2500      	movs	r5, #0
 800dbe4:	f7fe bacc 	b.w	800c180 <dwt_ioctl+0x154>
 800dbe8:	2c00      	cmp	r4, #0
 800dbea:	f000 8229 	beq.w	800e040 <dwt_ioctl+0x2014>
 800dbee:	2500      	movs	r5, #0
 800dbf0:	950b      	str	r5, [sp, #44]	; 0x2c
 800dbf2:	af10      	add	r7, sp, #64	; 0x40
 800dbf4:	2319      	movs	r3, #25
 800dbf6:	f847 3d10 	str.w	r3, [r7, #-16]!
 800dbfa:	9700      	str	r7, [sp, #0]
 800dbfc:	2304      	movs	r3, #4
 800dbfe:	462a      	mov	r2, r5
 800dc00:	493f      	ldr	r1, [pc, #252]	; (800dd00 <dwt_ioctl+0x1cd4>)
 800dc02:	f7fc fd41 	bl	800a688 <dwt_writetodevice>
 800dc06:	f641 7348 	movw	r3, #8008	; 0x1f48
 800dc0a:	930c      	str	r3, [sp, #48]	; 0x30
 800dc0c:	9700      	str	r7, [sp, #0]
 800dc0e:	2304      	movs	r3, #4
 800dc10:	462a      	mov	r2, r5
 800dc12:	493c      	ldr	r1, [pc, #240]	; (800dd04 <dwt_ioctl+0x1cd8>)
 800dc14:	4630      	mov	r0, r6
 800dc16:	f7fc fd37 	bl	800a688 <dwt_writetodevice>
 800dc1a:	ab0b      	add	r3, sp, #44	; 0x2c
 800dc1c:	9300      	str	r3, [sp, #0]
 800dc1e:	2304      	movs	r3, #4
 800dc20:	462a      	mov	r2, r5
 800dc22:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800dc26:	4630      	mov	r0, r6
 800dc28:	f7fc f917 	bl	8009e5a <dwt_readfromdevice>
 800dc2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc2e:	6023      	str	r3, [r4, #0]
 800dc30:	f7fe baa6 	b.w	800c180 <dwt_ioctl+0x154>
 800dc34:	2c00      	cmp	r4, #0
 800dc36:	f000 8206 	beq.w	800e046 <dwt_ioctl+0x201a>
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	4932      	ldr	r1, [pc, #200]	; (800dd08 <dwt_ioctl+0x1cdc>)
 800dc3e:	f7fc f916 	bl	8009e6e <dwt_read32bitoffsetreg>
 800dc42:	b280      	uxth	r0, r0
 800dc44:	6020      	str	r0, [r4, #0]
 800dc46:	2200      	movs	r2, #0
 800dc48:	4930      	ldr	r1, [pc, #192]	; (800dd0c <dwt_ioctl+0x1ce0>)
 800dc4a:	4630      	mov	r0, r6
 800dc4c:	f7fc f90f 	bl	8009e6e <dwt_read32bitoffsetreg>
 800dc50:	0d43      	lsrs	r3, r0, #21
 800dc52:	019b      	lsls	r3, r3, #6
 800dc54:	b29b      	uxth	r3, r3
 800dc56:	6063      	str	r3, [r4, #4]
 800dc58:	2500      	movs	r5, #0
 800dc5a:	f7fe ba91 	b.w	800c180 <dwt_ioctl+0x154>
 800dc5e:	2c00      	cmp	r4, #0
 800dc60:	f000 81f4 	beq.w	800e04c <dwt_ioctl+0x2020>
 800dc64:	7d63      	ldrb	r3, [r4, #21]
 800dc66:	b133      	cbz	r3, 800dc76 <dwt_ioctl+0x1c4a>
 800dc68:	2b01      	cmp	r3, #1
 800dc6a:	d05b      	beq.n	800dd24 <dwt_ioctl+0x1cf8>
 800dc6c:	2b02      	cmp	r3, #2
 800dc6e:	f000 8082 	beq.w	800dd76 <dwt_ioctl+0x1d4a>
 800dc72:	23ff      	movs	r3, #255	; 0xff
 800dc74:	e02f      	b.n	800dcd6 <dwt_ioctl+0x1caa>
 800dc76:	2200      	movs	r2, #0
 800dc78:	4925      	ldr	r1, [pc, #148]	; (800dd10 <dwt_ioctl+0x1ce4>)
 800dc7a:	f7fc f8f8 	bl	8009e6e <dwt_read32bitoffsetreg>
 800dc7e:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800dc82:	6020      	str	r0, [r4, #0]
 800dc84:	2200      	movs	r2, #0
 800dc86:	4923      	ldr	r1, [pc, #140]	; (800dd14 <dwt_ioctl+0x1ce8>)
 800dc88:	4630      	mov	r0, r6
 800dc8a:	f7fc f8f0 	bl	8009e6e <dwt_read32bitoffsetreg>
 800dc8e:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800dc92:	6060      	str	r0, [r4, #4]
 800dc94:	2200      	movs	r2, #0
 800dc96:	4920      	ldr	r1, [pc, #128]	; (800dd18 <dwt_ioctl+0x1cec>)
 800dc98:	4630      	mov	r0, r6
 800dc9a:	f7fc f8e8 	bl	8009e6e <dwt_read32bitoffsetreg>
 800dc9e:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800dca2:	60a0      	str	r0, [r4, #8]
 800dca4:	2200      	movs	r2, #0
 800dca6:	491d      	ldr	r1, [pc, #116]	; (800dd1c <dwt_ioctl+0x1cf0>)
 800dca8:	4630      	mov	r0, r6
 800dcaa:	f7fc f8e0 	bl	8009e6e <dwt_read32bitoffsetreg>
 800dcae:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800dcb2:	60e0      	str	r0, [r4, #12]
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	491a      	ldr	r1, [pc, #104]	; (800dd20 <dwt_ioctl+0x1cf4>)
 800dcb8:	4630      	mov	r0, r6
 800dcba:	f7fc f8d8 	bl	8009e6e <dwt_read32bitoffsetreg>
 800dcbe:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800dcc2:	6120      	str	r0, [r4, #16]
 800dcc4:	2203      	movs	r2, #3
 800dcc6:	490c      	ldr	r1, [pc, #48]	; (800dcf8 <dwt_ioctl+0x1ccc>)
 800dcc8:	4630      	mov	r0, r6
 800dcca:	f7fc f8f8 	bl	8009ebe <dwt_read8bitoffsetreg>
 800dcce:	f3c0 1002 	ubfx	r0, r0, #4, #3
 800dcd2:	7520      	strb	r0, [r4, #20]
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	75a3      	strb	r3, [r4, #22]
 800dcd8:	2500      	movs	r5, #0
 800dcda:	f7fe ba51 	b.w	800c180 <dwt_ioctl+0x154>
 800dcde:	bf00      	nop
 800dce0:	00050008 	.word	0x00050008
 800dce4:	0005000c 	.word	0x0005000c
 800dce8:	00110008 	.word	0x00110008
 800dcec:	08013288 	.word	0x08013288
 800dcf0:	000e0014 	.word	0x000e0014
 800dcf4:	000e0018 	.word	0x000e0018
 800dcf8:	00030060 	.word	0x00030060
 800dcfc:	000f004c 	.word	0x000f004c
 800dd00:	001f0004 	.word	0x001f0004
 800dd04:	001f0008 	.word	0x001f0008
 800dd08:	000c0048 	.word	0x000c0048
 800dd0c:	000c0028 	.word	0x000c0028
 800dd10:	000c0058 	.word	0x000c0058
 800dd14:	000c0030 	.word	0x000c0030
 800dd18:	000c0034 	.word	0x000c0034
 800dd1c:	000c0038 	.word	0x000c0038
 800dd20:	000c002c 	.word	0x000c002c
 800dd24:	2200      	movs	r2, #0
 800dd26:	49d4      	ldr	r1, [pc, #848]	; (800e078 <dwt_ioctl+0x204c>)
 800dd28:	f7fc f8a1 	bl	8009e6e <dwt_read32bitoffsetreg>
 800dd2c:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800dd30:	6020      	str	r0, [r4, #0]
 800dd32:	2200      	movs	r2, #0
 800dd34:	49d1      	ldr	r1, [pc, #836]	; (800e07c <dwt_ioctl+0x2050>)
 800dd36:	4630      	mov	r0, r6
 800dd38:	f7fc f899 	bl	8009e6e <dwt_read32bitoffsetreg>
 800dd3c:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800dd40:	6060      	str	r0, [r4, #4]
 800dd42:	2200      	movs	r2, #0
 800dd44:	49ce      	ldr	r1, [pc, #824]	; (800e080 <dwt_ioctl+0x2054>)
 800dd46:	4630      	mov	r0, r6
 800dd48:	f7fc f891 	bl	8009e6e <dwt_read32bitoffsetreg>
 800dd4c:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800dd50:	60a0      	str	r0, [r4, #8]
 800dd52:	2200      	movs	r2, #0
 800dd54:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 800dd58:	4630      	mov	r0, r6
 800dd5a:	f7fc f888 	bl	8009e6e <dwt_read32bitoffsetreg>
 800dd5e:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800dd62:	60e0      	str	r0, [r4, #12]
 800dd64:	2200      	movs	r2, #0
 800dd66:	49c7      	ldr	r1, [pc, #796]	; (800e084 <dwt_ioctl+0x2058>)
 800dd68:	4630      	mov	r0, r6
 800dd6a:	f7fc f880 	bl	8009e6e <dwt_read32bitoffsetreg>
 800dd6e:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800dd72:	6120      	str	r0, [r4, #16]
 800dd74:	e7a6      	b.n	800dcc4 <dwt_ioctl+0x1c98>
 800dd76:	2200      	movs	r2, #0
 800dd78:	49c3      	ldr	r1, [pc, #780]	; (800e088 <dwt_ioctl+0x205c>)
 800dd7a:	f7fc f878 	bl	8009e6e <dwt_read32bitoffsetreg>
 800dd7e:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800dd82:	6020      	str	r0, [r4, #0]
 800dd84:	2200      	movs	r2, #0
 800dd86:	49c1      	ldr	r1, [pc, #772]	; (800e08c <dwt_ioctl+0x2060>)
 800dd88:	4630      	mov	r0, r6
 800dd8a:	f7fc f870 	bl	8009e6e <dwt_read32bitoffsetreg>
 800dd8e:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800dd92:	6060      	str	r0, [r4, #4]
 800dd94:	2200      	movs	r2, #0
 800dd96:	49be      	ldr	r1, [pc, #760]	; (800e090 <dwt_ioctl+0x2064>)
 800dd98:	4630      	mov	r0, r6
 800dd9a:	f7fc f868 	bl	8009e6e <dwt_read32bitoffsetreg>
 800dd9e:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800dda2:	60a0      	str	r0, [r4, #8]
 800dda4:	2200      	movs	r2, #0
 800dda6:	49bb      	ldr	r1, [pc, #748]	; (800e094 <dwt_ioctl+0x2068>)
 800dda8:	4630      	mov	r0, r6
 800ddaa:	f7fc f860 	bl	8009e6e <dwt_read32bitoffsetreg>
 800ddae:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800ddb2:	60e0      	str	r0, [r4, #12]
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	49b8      	ldr	r1, [pc, #736]	; (800e098 <dwt_ioctl+0x206c>)
 800ddb8:	4630      	mov	r0, r6
 800ddba:	f7fc f858 	bl	8009e6e <dwt_read32bitoffsetreg>
 800ddbe:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800ddc2:	6120      	str	r0, [r4, #16]
 800ddc4:	e77e      	b.n	800dcc4 <dwt_ioctl+0x1c98>
 800ddc6:	2500      	movs	r5, #0
 800ddc8:	f7fe b9da 	b.w	800c180 <dwt_ioctl+0x154>
 800ddcc:	2500      	movs	r5, #0
 800ddce:	f7fe b9d7 	b.w	800c180 <dwt_ioctl+0x154>
 800ddd2:	2500      	movs	r5, #0
 800ddd4:	f7fe b9d4 	b.w	800c180 <dwt_ioctl+0x154>
 800ddd8:	2500      	movs	r5, #0
 800ddda:	f7fe b9d1 	b.w	800c180 <dwt_ioctl+0x154>
 800ddde:	2500      	movs	r5, #0
 800dde0:	f7fe b9ce 	b.w	800c180 <dwt_ioctl+0x154>
 800dde4:	2500      	movs	r5, #0
 800dde6:	f7fe b9cb 	b.w	800c180 <dwt_ioctl+0x154>
 800ddea:	2500      	movs	r5, #0
 800ddec:	f7fe b9c8 	b.w	800c180 <dwt_ioctl+0x154>
 800ddf0:	2500      	movs	r5, #0
 800ddf2:	f7fe b9c5 	b.w	800c180 <dwt_ioctl+0x154>
 800ddf6:	2500      	movs	r5, #0
 800ddf8:	f7fe b9c2 	b.w	800c180 <dwt_ioctl+0x154>
 800ddfc:	2500      	movs	r5, #0
 800ddfe:	f7fe b9bf 	b.w	800c180 <dwt_ioctl+0x154>
 800de02:	2500      	movs	r5, #0
 800de04:	f7fe b9bc 	b.w	800c180 <dwt_ioctl+0x154>
 800de08:	2500      	movs	r5, #0
 800de0a:	f7fe b9b9 	b.w	800c180 <dwt_ioctl+0x154>
 800de0e:	2500      	movs	r5, #0
 800de10:	f7fe b9b6 	b.w	800c180 <dwt_ioctl+0x154>
 800de14:	2500      	movs	r5, #0
 800de16:	f7fe b9b3 	b.w	800c180 <dwt_ioctl+0x154>
 800de1a:	2500      	movs	r5, #0
 800de1c:	f7fe b9b0 	b.w	800c180 <dwt_ioctl+0x154>
 800de20:	2500      	movs	r5, #0
 800de22:	f7fe b9ad 	b.w	800c180 <dwt_ioctl+0x154>
 800de26:	2500      	movs	r5, #0
 800de28:	f7fe b9aa 	b.w	800c180 <dwt_ioctl+0x154>
 800de2c:	2500      	movs	r5, #0
 800de2e:	f7fe b9a7 	b.w	800c180 <dwt_ioctl+0x154>
 800de32:	2500      	movs	r5, #0
 800de34:	f7fe b9a4 	b.w	800c180 <dwt_ioctl+0x154>
 800de38:	2500      	movs	r5, #0
 800de3a:	f7fe b9a1 	b.w	800c180 <dwt_ioctl+0x154>
 800de3e:	2500      	movs	r5, #0
 800de40:	f7fe b99e 	b.w	800c180 <dwt_ioctl+0x154>
 800de44:	2500      	movs	r5, #0
 800de46:	f7fe b99b 	b.w	800c180 <dwt_ioctl+0x154>
 800de4a:	2500      	movs	r5, #0
 800de4c:	f7fe b998 	b.w	800c180 <dwt_ioctl+0x154>
 800de50:	2500      	movs	r5, #0
 800de52:	f7fe b995 	b.w	800c180 <dwt_ioctl+0x154>
 800de56:	2500      	movs	r5, #0
 800de58:	f7fe b992 	b.w	800c180 <dwt_ioctl+0x154>
 800de5c:	2500      	movs	r5, #0
 800de5e:	f7fe b98f 	b.w	800c180 <dwt_ioctl+0x154>
 800de62:	2500      	movs	r5, #0
 800de64:	f7fe b98c 	b.w	800c180 <dwt_ioctl+0x154>
 800de68:	2500      	movs	r5, #0
 800de6a:	f7fe b989 	b.w	800c180 <dwt_ioctl+0x154>
 800de6e:	2500      	movs	r5, #0
 800de70:	f7fe b986 	b.w	800c180 <dwt_ioctl+0x154>
 800de74:	2500      	movs	r5, #0
 800de76:	f7fe b983 	b.w	800c180 <dwt_ioctl+0x154>
 800de7a:	2500      	movs	r5, #0
 800de7c:	f7fe b980 	b.w	800c180 <dwt_ioctl+0x154>
 800de80:	2500      	movs	r5, #0
 800de82:	f7fe b97d 	b.w	800c180 <dwt_ioctl+0x154>
 800de86:	2500      	movs	r5, #0
 800de88:	f7fe b97a 	b.w	800c180 <dwt_ioctl+0x154>
 800de8c:	2500      	movs	r5, #0
 800de8e:	f7fe b977 	b.w	800c180 <dwt_ioctl+0x154>
 800de92:	2500      	movs	r5, #0
 800de94:	f7fe b974 	b.w	800c180 <dwt_ioctl+0x154>
 800de98:	2500      	movs	r5, #0
 800de9a:	f7fe b971 	b.w	800c180 <dwt_ioctl+0x154>
 800de9e:	2500      	movs	r5, #0
 800dea0:	f7fe b96e 	b.w	800c180 <dwt_ioctl+0x154>
 800dea4:	2500      	movs	r5, #0
 800dea6:	f7fe b96b 	b.w	800c180 <dwt_ioctl+0x154>
 800deaa:	2500      	movs	r5, #0
 800deac:	f7fe b968 	b.w	800c180 <dwt_ioctl+0x154>
 800deb0:	2500      	movs	r5, #0
 800deb2:	f7fe b965 	b.w	800c180 <dwt_ioctl+0x154>
 800deb6:	2500      	movs	r5, #0
 800deb8:	f7fe b962 	b.w	800c180 <dwt_ioctl+0x154>
 800debc:	2500      	movs	r5, #0
 800debe:	f7fe b95f 	b.w	800c180 <dwt_ioctl+0x154>
 800dec2:	2500      	movs	r5, #0
 800dec4:	f7fe b95c 	b.w	800c180 <dwt_ioctl+0x154>
 800dec8:	2500      	movs	r5, #0
 800deca:	f7fe b959 	b.w	800c180 <dwt_ioctl+0x154>
 800dece:	2500      	movs	r5, #0
 800ded0:	f7fe b956 	b.w	800c180 <dwt_ioctl+0x154>
 800ded4:	2500      	movs	r5, #0
 800ded6:	f7fe b953 	b.w	800c180 <dwt_ioctl+0x154>
 800deda:	2500      	movs	r5, #0
 800dedc:	f7fe b950 	b.w	800c180 <dwt_ioctl+0x154>
 800dee0:	2500      	movs	r5, #0
 800dee2:	f7fe b94d 	b.w	800c180 <dwt_ioctl+0x154>
 800dee6:	2500      	movs	r5, #0
 800dee8:	f7fe b94a 	b.w	800c180 <dwt_ioctl+0x154>
 800deec:	2500      	movs	r5, #0
 800deee:	f7fe b947 	b.w	800c180 <dwt_ioctl+0x154>
 800def2:	2500      	movs	r5, #0
 800def4:	f7fe b944 	b.w	800c180 <dwt_ioctl+0x154>
 800def8:	2500      	movs	r5, #0
 800defa:	f7fe b941 	b.w	800c180 <dwt_ioctl+0x154>
 800defe:	2500      	movs	r5, #0
 800df00:	f7fe b93e 	b.w	800c180 <dwt_ioctl+0x154>
 800df04:	2500      	movs	r5, #0
 800df06:	f7fe b93b 	b.w	800c180 <dwt_ioctl+0x154>
 800df0a:	2500      	movs	r5, #0
 800df0c:	f7fe b938 	b.w	800c180 <dwt_ioctl+0x154>
 800df10:	2500      	movs	r5, #0
 800df12:	f7fe b935 	b.w	800c180 <dwt_ioctl+0x154>
 800df16:	2500      	movs	r5, #0
 800df18:	f7fe b932 	b.w	800c180 <dwt_ioctl+0x154>
 800df1c:	2500      	movs	r5, #0
 800df1e:	f7fe b92f 	b.w	800c180 <dwt_ioctl+0x154>
 800df22:	2500      	movs	r5, #0
 800df24:	f7fe b92c 	b.w	800c180 <dwt_ioctl+0x154>
 800df28:	2500      	movs	r5, #0
 800df2a:	f7fe b929 	b.w	800c180 <dwt_ioctl+0x154>
 800df2e:	2500      	movs	r5, #0
 800df30:	f7fe b926 	b.w	800c180 <dwt_ioctl+0x154>
 800df34:	2500      	movs	r5, #0
 800df36:	f7fe b923 	b.w	800c180 <dwt_ioctl+0x154>
 800df3a:	2500      	movs	r5, #0
 800df3c:	f7fe b920 	b.w	800c180 <dwt_ioctl+0x154>
 800df40:	2500      	movs	r5, #0
 800df42:	f7fe b91d 	b.w	800c180 <dwt_ioctl+0x154>
 800df46:	2500      	movs	r5, #0
 800df48:	f7fe b91a 	b.w	800c180 <dwt_ioctl+0x154>
 800df4c:	2500      	movs	r5, #0
 800df4e:	f7fe b917 	b.w	800c180 <dwt_ioctl+0x154>
 800df52:	2500      	movs	r5, #0
 800df54:	f7fe b914 	b.w	800c180 <dwt_ioctl+0x154>
 800df58:	2500      	movs	r5, #0
 800df5a:	f7fe b911 	b.w	800c180 <dwt_ioctl+0x154>
 800df5e:	2500      	movs	r5, #0
 800df60:	f7fe b90e 	b.w	800c180 <dwt_ioctl+0x154>
 800df64:	2500      	movs	r5, #0
 800df66:	f7fe b90b 	b.w	800c180 <dwt_ioctl+0x154>
 800df6a:	2500      	movs	r5, #0
 800df6c:	f7fe b908 	b.w	800c180 <dwt_ioctl+0x154>
 800df70:	2500      	movs	r5, #0
 800df72:	f7fe b905 	b.w	800c180 <dwt_ioctl+0x154>
 800df76:	2500      	movs	r5, #0
 800df78:	f7fe b902 	b.w	800c180 <dwt_ioctl+0x154>
 800df7c:	2500      	movs	r5, #0
 800df7e:	f7fe b8ff 	b.w	800c180 <dwt_ioctl+0x154>
 800df82:	2500      	movs	r5, #0
 800df84:	f7fe b8fc 	b.w	800c180 <dwt_ioctl+0x154>
 800df88:	2500      	movs	r5, #0
 800df8a:	f7fe b8f9 	b.w	800c180 <dwt_ioctl+0x154>
 800df8e:	2500      	movs	r5, #0
 800df90:	f7fe b8f6 	b.w	800c180 <dwt_ioctl+0x154>
 800df94:	2500      	movs	r5, #0
 800df96:	f7fe b8f3 	b.w	800c180 <dwt_ioctl+0x154>
 800df9a:	2500      	movs	r5, #0
 800df9c:	f7fe b8f0 	b.w	800c180 <dwt_ioctl+0x154>
 800dfa0:	2500      	movs	r5, #0
 800dfa2:	f7fe b8ed 	b.w	800c180 <dwt_ioctl+0x154>
 800dfa6:	2500      	movs	r5, #0
 800dfa8:	f7fe b8ea 	b.w	800c180 <dwt_ioctl+0x154>
 800dfac:	2500      	movs	r5, #0
 800dfae:	f7fe b8e7 	b.w	800c180 <dwt_ioctl+0x154>
 800dfb2:	2500      	movs	r5, #0
 800dfb4:	f7fe b8e4 	b.w	800c180 <dwt_ioctl+0x154>
 800dfb8:	2500      	movs	r5, #0
 800dfba:	f7fe b8e1 	b.w	800c180 <dwt_ioctl+0x154>
 800dfbe:	2500      	movs	r5, #0
 800dfc0:	f7fe b8de 	b.w	800c180 <dwt_ioctl+0x154>
 800dfc4:	2500      	movs	r5, #0
 800dfc6:	f7fe b8db 	b.w	800c180 <dwt_ioctl+0x154>
 800dfca:	2500      	movs	r5, #0
 800dfcc:	f7fe b8d8 	b.w	800c180 <dwt_ioctl+0x154>
 800dfd0:	2500      	movs	r5, #0
 800dfd2:	f7fe b8d5 	b.w	800c180 <dwt_ioctl+0x154>
 800dfd6:	2500      	movs	r5, #0
 800dfd8:	f7fe b8d2 	b.w	800c180 <dwt_ioctl+0x154>
 800dfdc:	2500      	movs	r5, #0
 800dfde:	f7fe b8cf 	b.w	800c180 <dwt_ioctl+0x154>
 800dfe2:	2500      	movs	r5, #0
 800dfe4:	f7fe b8cc 	b.w	800c180 <dwt_ioctl+0x154>
 800dfe8:	2500      	movs	r5, #0
 800dfea:	f7fe b8c9 	b.w	800c180 <dwt_ioctl+0x154>
 800dfee:	2500      	movs	r5, #0
 800dff0:	f7fe b8c6 	b.w	800c180 <dwt_ioctl+0x154>
 800dff4:	f04f 35ff 	mov.w	r5, #4294967295
 800dff8:	f7fe b8c2 	b.w	800c180 <dwt_ioctl+0x154>
 800dffc:	f04f 35ff 	mov.w	r5, #4294967295
 800e000:	f7fe b8be 	b.w	800c180 <dwt_ioctl+0x154>
 800e004:	2500      	movs	r5, #0
 800e006:	f7fe b8bb 	b.w	800c180 <dwt_ioctl+0x154>
 800e00a:	2500      	movs	r5, #0
 800e00c:	f7fe b8b8 	b.w	800c180 <dwt_ioctl+0x154>
 800e010:	2500      	movs	r5, #0
 800e012:	f7fe b8b5 	b.w	800c180 <dwt_ioctl+0x154>
 800e016:	2500      	movs	r5, #0
 800e018:	f7fe b8b2 	b.w	800c180 <dwt_ioctl+0x154>
 800e01c:	2500      	movs	r5, #0
 800e01e:	f7fe b8af 	b.w	800c180 <dwt_ioctl+0x154>
 800e022:	2500      	movs	r5, #0
 800e024:	f7fe b8ac 	b.w	800c180 <dwt_ioctl+0x154>
 800e028:	2500      	movs	r5, #0
 800e02a:	f7fe b8a9 	b.w	800c180 <dwt_ioctl+0x154>
 800e02e:	2500      	movs	r5, #0
 800e030:	f7fe b8a6 	b.w	800c180 <dwt_ioctl+0x154>
 800e034:	2500      	movs	r5, #0
 800e036:	f7fe b8a3 	b.w	800c180 <dwt_ioctl+0x154>
 800e03a:	2500      	movs	r5, #0
 800e03c:	f7fe b8a0 	b.w	800c180 <dwt_ioctl+0x154>
 800e040:	2500      	movs	r5, #0
 800e042:	f7fe b89d 	b.w	800c180 <dwt_ioctl+0x154>
 800e046:	2500      	movs	r5, #0
 800e048:	f7fe b89a 	b.w	800c180 <dwt_ioctl+0x154>
 800e04c:	2500      	movs	r5, #0
 800e04e:	f7fe b897 	b.w	800c180 <dwt_ioctl+0x154>
 800e052:	f899 3011 	ldrb.w	r3, [r9, #17]
 800e056:	1e5a      	subs	r2, r3, #1
 800e058:	b2d2      	uxtb	r2, r2
 800e05a:	2a01      	cmp	r2, #1
 800e05c:	f67e aeec 	bls.w	800ce38 <dwt_ioctl+0xe0c>
 800e060:	2202      	movs	r2, #2
 800e062:	f7fe be93 	b.w	800cd8c <dwt_ioctl+0xd60>
 800e066:	2f00      	cmp	r7, #0
 800e068:	f43f ab68 	beq.w	800d73c <dwt_ioctl+0x1710>
 800e06c:	f819 1000 	ldrb.w	r1, [r9, r0]
 800e070:	1a5b      	subs	r3, r3, r1
 800e072:	b29b      	uxth	r3, r3
 800e074:	f7ff bb88 	b.w	800d788 <dwt_ioctl+0x175c>
 800e078:	000d0020 	.word	0x000d0020
 800e07c:	000c0064 	.word	0x000c0064
 800e080:	000c0068 	.word	0x000c0068
 800e084:	000c0060 	.word	0x000c0060
 800e088:	000d0068 	.word	0x000d0068
 800e08c:	000d0040 	.word	0x000d0040
 800e090:	000d0044 	.word	0x000d0044
 800e094:	000d0048 	.word	0x000d0048
 800e098:	000d003c 	.word	0x000d003c
 800e09c:	283f      	cmp	r0, #63	; 0x3f
 800e09e:	d027      	beq.n	800e0f0 <dwt_ioctl+0x20c4>
 800e0a0:	2e00      	cmp	r6, #0
 800e0a2:	f47f ab51 	bne.w	800d748 <dwt_ioctl+0x171c>
 800e0a6:	3001      	adds	r0, #1
 800e0a8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800e0ac:	f819 1000 	ldrb.w	r1, [r9, r0]
 800e0b0:	440b      	add	r3, r1
 800e0b2:	b29b      	uxth	r3, r3
 800e0b4:	459c      	cmp	ip, r3
 800e0b6:	f43f ab65 	beq.w	800d784 <dwt_ioctl+0x1758>
 800e0ba:	3d01      	subs	r5, #1
 800e0bc:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 800e0c0:	f43f ab23 	beq.w	800d70a <dwt_ioctl+0x16de>
 800e0c4:	459e      	cmp	lr, r3
 800e0c6:	f4bf ab33 	bcs.w	800d730 <dwt_ioctl+0x1704>
 800e0ca:	4598      	cmp	r8, r3
 800e0cc:	d9cb      	bls.n	800e066 <dwt_ioctl+0x203a>
 800e0ce:	ebac 0103 	sub.w	r1, ip, r3
 800e0d2:	b209      	sxth	r1, r1
 800e0d4:	2900      	cmp	r1, #0
 800e0d6:	bfb8      	it	lt
 800e0d8:	4249      	neglt	r1, r1
 800e0da:	4559      	cmp	r1, fp
 800e0dc:	f77f ab20 	ble.w	800d720 <dwt_ioctl+0x16f4>
 800e0e0:	2f00      	cmp	r7, #0
 800e0e2:	f47f ab64 	bne.w	800d7ae <dwt_ioctl+0x1782>
 800e0e6:	283f      	cmp	r0, #63	; 0x3f
 800e0e8:	d1da      	bne.n	800e0a0 <dwt_ioctl+0x2074>
 800e0ea:	2f00      	cmp	r7, #0
 800e0ec:	f47f ab64 	bne.w	800d7b8 <dwt_ioctl+0x178c>
 800e0f0:	2a03      	cmp	r2, #3
 800e0f2:	f43f ab64 	beq.w	800d7be <dwt_ioctl+0x1792>
 800e0f6:	2a02      	cmp	r2, #2
 800e0f8:	f43f ab33 	beq.w	800d762 <dwt_ioctl+0x1736>
 800e0fc:	f81a 1002 	ldrb.w	r1, [sl, r2]
 800e100:	185e      	adds	r6, r3, r1
 800e102:	4566      	cmp	r6, ip
 800e104:	f77f ab34 	ble.w	800d770 <dwt_ioctl+0x1744>
 800e108:	440b      	add	r3, r1
 800e10a:	b29b      	uxth	r3, r3
 800e10c:	3201      	adds	r2, #1
 800e10e:	b2d2      	uxtb	r2, r2
 800e110:	2700      	movs	r7, #0
 800e112:	f7ff bb19 	b.w	800d748 <dwt_ioctl+0x171c>
 800e116:	bf00      	nop

0800e118 <_init>:
 800e118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e11a:	b085      	sub	sp, #20
 800e11c:	4604      	mov	r4, r0
 800e11e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e120:	6819      	ldr	r1, [r3, #0]
 800e122:	f7fd fe57 	bl	800bdd4 <ull_initialise>
 800e126:	4606      	mov	r6, r0
 800e128:	6823      	ldr	r3, [r4, #0]
 800e12a:	691b      	ldr	r3, [r3, #16]
 800e12c:	4798      	blx	r3
 800e12e:	ab03      	add	r3, sp, #12
 800e130:	2200      	movs	r2, #0
 800e132:	4611      	mov	r1, r2
 800e134:	4620      	mov	r0, r4
 800e136:	f7fd ff79 	bl	800c02c <dwt_ioctl>
 800e13a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e13c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e13e:	6819      	ldr	r1, [r3, #0]
 800e140:	4620      	mov	r0, r4
 800e142:	f7fd fc07 	bl	800b954 <ull_configure>
 800e146:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e14a:	6859      	ldr	r1, [r3, #4]
 800e14c:	4620      	mov	r0, r4
 800e14e:	f7fd f953 	bl	800b3f8 <ull_configuretxrf>
 800e152:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e156:	89db      	ldrh	r3, [r3, #14]
 800e158:	2200      	movs	r2, #0
 800e15a:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800e15e:	4620      	mov	r0, r4
 800e160:	f7fc fa9d 	bl	800a69e <dwt_write16bitoffsetreg>
 800e164:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e168:	899b      	ldrh	r3, [r3, #12]
 800e16a:	2200      	movs	r2, #0
 800e16c:	217c      	movs	r1, #124	; 0x7c
 800e16e:	4620      	mov	r0, r4
 800e170:	f7fc fa95 	bl	800a69e <dwt_write16bitoffsetreg>
 800e174:	2100      	movs	r1, #0
 800e176:	4620      	mov	r0, r4
 800e178:	f7fc fb29 	bl	800a7ce <ull_setrxaftertxdelay>
 800e17c:	2500      	movs	r5, #0
 800e17e:	9500      	str	r5, [sp, #0]
 800e180:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 800e184:	462a      	mov	r2, r5
 800e186:	2110      	movs	r1, #16
 800e188:	4620      	mov	r0, r4
 800e18a:	f7fd fac5 	bl	800b718 <dwt_modify16bitoffsetreg>
 800e18e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e192:	895a      	ldrh	r2, [r3, #10]
 800e194:	8919      	ldrh	r1, [r3, #8]
 800e196:	4620      	mov	r0, r4
 800e198:	f7fd f9bc 	bl	800b514 <ull_configureframefilter>
 800e19c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e19e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1a0:	8a1b      	ldrh	r3, [r3, #16]
 800e1a2:	2202      	movs	r2, #2
 800e1a4:	210c      	movs	r1, #12
 800e1a6:	4620      	mov	r0, r4
 800e1a8:	f7fc fa79 	bl	800a69e <dwt_write16bitoffsetreg>
 800e1ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e1ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1b0:	8a5b      	ldrh	r3, [r3, #18]
 800e1b2:	462a      	mov	r2, r5
 800e1b4:	210c      	movs	r1, #12
 800e1b6:	4620      	mov	r0, r4
 800e1b8:	f7fc fa71 	bl	800a69e <dwt_write16bitoffsetreg>
 800e1bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e1be:	7a19      	ldrb	r1, [r3, #8]
 800e1c0:	4620      	mov	r0, r4
 800e1c2:	f7fd fac3 	bl	800b74c <ull_setleds>
 800e1c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e1c8:	68d9      	ldr	r1, [r3, #12]
 800e1ca:	4620      	mov	r0, r4
 800e1cc:	f7fc fb13 	bl	800a7f6 <ull_setlnapamode>
 800e1d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e1d2:	7e0b      	ldrb	r3, [r1, #24]
 800e1d4:	694a      	ldr	r2, [r1, #20]
 800e1d6:	6909      	ldr	r1, [r1, #16]
 800e1d8:	4620      	mov	r0, r4
 800e1da:	f7fd fa21 	bl	800b620 <ull_setinterrupt>
 800e1de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e1e0:	7f9a      	ldrb	r2, [r3, #30]
 800e1e2:	8b99      	ldrh	r1, [r3, #28]
 800e1e4:	4620      	mov	r0, r4
 800e1e6:	f7fc fd19 	bl	800ac1c <ull_configuresleep>
 800e1ea:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800e1ec:	7b53      	ldrb	r3, [r2, #13]
 800e1ee:	2b2e      	cmp	r3, #46	; 0x2e
 800e1f0:	d005      	beq.n	800e1fe <_init+0xe6>
 800e1f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e1f4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e1f8:	f033 033f 	bics.w	r3, r3, #63	; 0x3f
 800e1fc:	d00a      	beq.n	800e214 <_init+0xfc>
 800e1fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e200:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e204:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e208:	7353      	strb	r3, [r2, #13]
 800e20a:	2200      	movs	r2, #0
 800e20c:	492a      	ldr	r1, [pc, #168]	; (800e2b8 <_init+0x1a0>)
 800e20e:	4620      	mov	r0, r4
 800e210:	f7fc fc30 	bl	800aa74 <dwt_write8bitoffsetreg>
 800e214:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e216:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 800e21a:	4620      	mov	r0, r4
 800e21c:	f7fd f874 	bl	800b308 <ull_configciadiag>
 800e220:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e222:	6a19      	ldr	r1, [r3, #32]
 800e224:	4620      	mov	r0, r4
 800e226:	f7fc fb07 	bl	800a838 <ull_configurestskey>
 800e22a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e22c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800e22e:	4620      	mov	r0, r4
 800e230:	f7fc fb26 	bl	800a880 <ull_configurestsiv>
 800e234:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e236:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800e23a:	bb9b      	cbnz	r3, 800e2a4 <_init+0x18c>
 800e23c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e23e:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 800e242:	4620      	mov	r0, r4
 800e244:	f7fc fc8e 	bl	800ab64 <ull_configeventcounters>
 800e248:	f994 504c 	ldrsb.w	r5, [r4, #76]	; 0x4c
 800e24c:	2d00      	cmp	r5, #0
 800e24e:	db26      	blt.n	800e29e <_init+0x186>
 800e250:	2301      	movs	r3, #1
 800e252:	fa03 f505 	lsl.w	r5, r3, r5
 800e256:	b2af      	uxth	r7, r5
 800e258:	4a18      	ldr	r2, [pc, #96]	; (800e2bc <_init+0x1a4>)
 800e25a:	4639      	mov	r1, r7
 800e25c:	4620      	mov	r0, r4
 800e25e:	f7fc ffef 	bl	800b240 <ull_setgpiomode>
 800e262:	f10d 030a 	add.w	r3, sp, #10
 800e266:	9300      	str	r3, [sp, #0]
 800e268:	2302      	movs	r3, #2
 800e26a:	2200      	movs	r2, #0
 800e26c:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800e270:	4620      	mov	r0, r4
 800e272:	f7fb fdf2 	bl	8009e5a <dwt_readfromdevice>
 800e276:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800e27a:	ea23 0305 	bic.w	r3, r3, r5
 800e27e:	f8ad 300a 	strh.w	r3, [sp, #10]
 800e282:	2200      	movs	r2, #0
 800e284:	490e      	ldr	r1, [pc, #56]	; (800e2c0 <_init+0x1a8>)
 800e286:	4620      	mov	r0, r4
 800e288:	f7fc fa09 	bl	800a69e <dwt_write16bitoffsetreg>
 800e28c:	f994 204d 	ldrsb.w	r2, [r4, #77]	; 0x4d
 800e290:	fab2 f282 	clz	r2, r2
 800e294:	0952      	lsrs	r2, r2, #5
 800e296:	4639      	mov	r1, r7
 800e298:	4620      	mov	r0, r4
 800e29a:	f7fd fad5 	bl	800b848 <ull_setgpiovalue>
 800e29e:	4630      	mov	r0, r6
 800e2a0:	b005      	add	sp, #20
 800e2a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2a4:	2301      	movs	r3, #1
 800e2a6:	9300      	str	r3, [sp, #0]
 800e2a8:	23ff      	movs	r3, #255	; 0xff
 800e2aa:	2200      	movs	r2, #0
 800e2ac:	4905      	ldr	r1, [pc, #20]	; (800e2c4 <_init+0x1ac>)
 800e2ae:	4620      	mov	r0, r4
 800e2b0:	f7fd f816 	bl	800b2e0 <dwt_modify8bitoffsetreg>
 800e2b4:	e7c2      	b.n	800e23c <_init+0x124>
 800e2b6:	bf00      	nop
 800e2b8:	00090014 	.word	0x00090014
 800e2bc:	01200492 	.word	0x01200492
 800e2c0:	00050008 	.word	0x00050008
 800e2c4:	00020004 	.word	0x00020004

0800e2c8 <ull_wakeup_ic>:
 800e2c8:	b508      	push	{r3, lr}
 800e2ca:	6843      	ldr	r3, [r0, #4]
 800e2cc:	4798      	blx	r3
 800e2ce:	bd08      	pop	{r3, pc}

0800e2d0 <get_sts_mnth>:
 800e2d0:	fb01 f100 	mul.w	r1, r1, r0
 800e2d4:	2a03      	cmp	r2, #3
 800e2d6:	d00a      	beq.n	800e2ee <get_sts_mnth+0x1e>
 800e2d8:	0ac8      	lsrs	r0, r1, #11
 800e2da:	f3c1 010a 	ubfx	r1, r1, #0, #11
 800e2de:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e2e2:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800e2e6:	bf28      	it	cs
 800e2e8:	3001      	addcs	r0, #1
 800e2ea:	b280      	uxth	r0, r0
 800e2ec:	4770      	bx	lr
 800e2ee:	20b5      	movs	r0, #181	; 0xb5
 800e2f0:	fb00 f101 	mul.w	r1, r0, r1
 800e2f4:	09c9      	lsrs	r1, r1, #7
 800e2f6:	e7ef      	b.n	800e2d8 <get_sts_mnth+0x8>

0800e2f8 <dwt_dbg_fn>:
 800e2f8:	2998      	cmp	r1, #152	; 0x98
 800e2fa:	4802      	ldr	r0, [pc, #8]	; (800e304 <dwt_dbg_fn+0xc>)
 800e2fc:	bf18      	it	ne
 800e2fe:	2000      	movne	r0, #0
 800e300:	4770      	bx	lr
 800e302:	bf00      	nop
 800e304:	08013390 	.word	0x08013390

0800e308 <_deinit>:
 800e308:	4770      	bx	lr

0800e30a <dwt_xfer3xxx>:
 800e30a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e30e:	b084      	sub	sp, #16
 800e310:	4605      	mov	r5, r0
 800e312:	460f      	mov	r7, r1
 800e314:	461e      	mov	r6, r3
 800e316:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800e31a:	1e59      	subs	r1, r3, #1
 800e31c:	b289      	uxth	r1, r1
 800e31e:	2901      	cmp	r1, #1
 800e320:	d91c      	bls.n	800e35c <dwt_xfer3xxx+0x52>
 800e322:	19d0      	adds	r0, r2, r7
 800e324:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800e328:	443a      	add	r2, r7
 800e32a:	f3c2 4104 	ubfx	r1, r2, #16, #5
 800e32e:	0082      	lsls	r2, r0, #2
 800e330:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 800e334:	ea43 0102 	orr.w	r1, r3, r2
 800e338:	0a09      	lsrs	r1, r1, #8
 800e33a:	f88d 100c 	strb.w	r1, [sp, #12]
 800e33e:	b920      	cbnz	r0, 800e34a <dwt_xfer3xxx+0x40>
 800e340:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e344:	d018      	beq.n	800e378 <dwt_xfer3xxx+0x6e>
 800e346:	2b00      	cmp	r3, #0
 800e348:	d037      	beq.n	800e3ba <dwt_xfer3xxx+0xb0>
 800e34a:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800e34e:	f88d 100c 	strb.w	r1, [sp, #12]
 800e352:	431a      	orrs	r2, r3
 800e354:	f88d 200d 	strb.w	r2, [sp, #13]
 800e358:	2402      	movs	r4, #2
 800e35a:	e005      	b.n	800e368 <dwt_xfer3xxx+0x5e>
 800e35c:	007a      	lsls	r2, r7, #1
 800e35e:	f062 027e 	orn	r2, r2, #126	; 0x7e
 800e362:	f88d 200c 	strb.w	r2, [sp, #12]
 800e366:	2401      	movs	r4, #1
 800e368:	2b02      	cmp	r3, #2
 800e36a:	d006      	beq.n	800e37a <dwt_xfer3xxx+0x70>
 800e36c:	d326      	bcc.n	800e3bc <dwt_xfer3xxx+0xb2>
 800e36e:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800e372:	2b03      	cmp	r3, #3
 800e374:	d901      	bls.n	800e37a <dwt_xfer3xxx+0x70>
 800e376:	e7fe      	b.n	800e376 <dwt_xfer3xxx+0x6c>
 800e378:	2401      	movs	r4, #1
 800e37a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800e37c:	7d1b      	ldrb	r3, [r3, #20]
 800e37e:	b94b      	cbnz	r3, 800e394 <dwt_xfer3xxx+0x8a>
 800e380:	682b      	ldr	r3, [r5, #0]
 800e382:	685d      	ldr	r5, [r3, #4]
 800e384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e386:	4632      	mov	r2, r6
 800e388:	a903      	add	r1, sp, #12
 800e38a:	4620      	mov	r0, r4
 800e38c:	47a8      	blx	r5
 800e38e:	b004      	add	sp, #16
 800e390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e394:	2200      	movs	r2, #0
 800e396:	4621      	mov	r1, r4
 800e398:	a803      	add	r0, sp, #12
 800e39a:	f7f7 fb27 	bl	80059ec <dwt_generatecrc8>
 800e39e:	4602      	mov	r2, r0
 800e3a0:	4631      	mov	r1, r6
 800e3a2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e3a4:	f7f7 fb22 	bl	80059ec <dwt_generatecrc8>
 800e3a8:	682b      	ldr	r3, [r5, #0]
 800e3aa:	9000      	str	r0, [sp, #0]
 800e3ac:	689d      	ldr	r5, [r3, #8]
 800e3ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e3b0:	4632      	mov	r2, r6
 800e3b2:	a903      	add	r1, sp, #12
 800e3b4:	4620      	mov	r0, r4
 800e3b6:	47a8      	blx	r5
 800e3b8:	e7e9      	b.n	800e38e <dwt_xfer3xxx+0x84>
 800e3ba:	2401      	movs	r4, #1
 800e3bc:	682b      	ldr	r3, [r5, #0]
 800e3be:	f8d3 8000 	ldr.w	r8, [r3]
 800e3c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e3c4:	4632      	mov	r2, r6
 800e3c6:	a903      	add	r1, sp, #12
 800e3c8:	4620      	mov	r0, r4
 800e3ca:	47c0      	blx	r8
 800e3cc:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800e3ce:	7d1b      	ldrb	r3, [r3, #20]
 800e3d0:	2b02      	cmp	r3, #2
 800e3d2:	d1dc      	bne.n	800e38e <dwt_xfer3xxx+0x84>
 800e3d4:	2f18      	cmp	r7, #24
 800e3d6:	d0da      	beq.n	800e38e <dwt_xfer3xxx+0x84>
 800e3d8:	2200      	movs	r2, #0
 800e3da:	4621      	mov	r1, r4
 800e3dc:	a803      	add	r0, sp, #12
 800e3de:	f7f7 fb05 	bl	80059ec <dwt_generatecrc8>
 800e3e2:	4602      	mov	r2, r0
 800e3e4:	4631      	mov	r1, r6
 800e3e6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e3e8:	f7f7 fb00 	bl	80059ec <dwt_generatecrc8>
 800e3ec:	4604      	mov	r4, r0
 800e3ee:	2200      	movs	r2, #0
 800e3f0:	2118      	movs	r1, #24
 800e3f2:	4628      	mov	r0, r5
 800e3f4:	f000 f866 	bl	800e4c4 <dwt_read8bitoffsetreg>
 800e3f8:	4284      	cmp	r4, r0
 800e3fa:	d0c8      	beq.n	800e38e <dwt_xfer3xxx+0x84>
 800e3fc:	68eb      	ldr	r3, [r5, #12]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d0c5      	beq.n	800e38e <dwt_xfer3xxx+0x84>
 800e402:	4798      	blx	r3
 800e404:	e7c3      	b.n	800e38e <dwt_xfer3xxx+0x84>

0800e406 <dwt_readfromdevice>:
 800e406:	b510      	push	{r4, lr}
 800e408:	b082      	sub	sp, #8
 800e40a:	2400      	movs	r4, #0
 800e40c:	9401      	str	r4, [sp, #4]
 800e40e:	9c04      	ldr	r4, [sp, #16]
 800e410:	9400      	str	r4, [sp, #0]
 800e412:	f7ff ff7a 	bl	800e30a <dwt_xfer3xxx>
 800e416:	b002      	add	sp, #8
 800e418:	bd10      	pop	{r4, pc}

0800e41a <dwt_read32bitoffsetreg>:
 800e41a:	b500      	push	{lr}
 800e41c:	b085      	sub	sp, #20
 800e41e:	ab03      	add	r3, sp, #12
 800e420:	9300      	str	r3, [sp, #0]
 800e422:	2304      	movs	r3, #4
 800e424:	b292      	uxth	r2, r2
 800e426:	f7ff ffee 	bl	800e406 <dwt_readfromdevice>
 800e42a:	f10d 030f 	add.w	r3, sp, #15
 800e42e:	f10d 010b 	add.w	r1, sp, #11
 800e432:	2000      	movs	r0, #0
 800e434:	f813 2901 	ldrb.w	r2, [r3], #-1
 800e438:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 800e43c:	428b      	cmp	r3, r1
 800e43e:	d1f9      	bne.n	800e434 <dwt_read32bitoffsetreg+0x1a>
 800e440:	b005      	add	sp, #20
 800e442:	f85d fb04 	ldr.w	pc, [sp], #4

0800e446 <dwt_read16bitoffsetreg>:
 800e446:	b500      	push	{lr}
 800e448:	b085      	sub	sp, #20
 800e44a:	ab03      	add	r3, sp, #12
 800e44c:	9300      	str	r3, [sp, #0]
 800e44e:	2302      	movs	r3, #2
 800e450:	b292      	uxth	r2, r2
 800e452:	f7ff ffd8 	bl	800e406 <dwt_readfromdevice>
 800e456:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800e45a:	f89d 000c 	ldrb.w	r0, [sp, #12]
 800e45e:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 800e462:	b280      	uxth	r0, r0
 800e464:	b005      	add	sp, #20
 800e466:	f85d fb04 	ldr.w	pc, [sp], #4

0800e46a <ull_getrxantennadelay>:
 800e46a:	b508      	push	{r3, lr}
 800e46c:	2200      	movs	r2, #0
 800e46e:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800e472:	f7ff ffe8 	bl	800e446 <dwt_read16bitoffsetreg>
 800e476:	bd08      	pop	{r3, pc}

0800e478 <ull_gettxantennadelay>:
 800e478:	b508      	push	{r3, lr}
 800e47a:	2200      	movs	r2, #0
 800e47c:	217c      	movs	r1, #124	; 0x7c
 800e47e:	f7ff ffe2 	bl	800e446 <dwt_read16bitoffsetreg>
 800e482:	bd08      	pop	{r3, pc}

0800e484 <ull_readclockoffset>:
 800e484:	b508      	push	{r3, lr}
 800e486:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800e488:	7b9b      	ldrb	r3, [r3, #14]
 800e48a:	2b01      	cmp	r3, #1
 800e48c:	d00a      	beq.n	800e4a4 <ull_readclockoffset+0x20>
 800e48e:	2b03      	cmp	r3, #3
 800e490:	d10e      	bne.n	800e4b0 <ull_readclockoffset+0x2c>
 800e492:	220c      	movs	r2, #12
 800e494:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800e498:	f7ff ffd5 	bl	800e446 <dwt_read16bitoffsetreg>
 800e49c:	b200      	sxth	r0, r0
 800e49e:	f340 000c 	sbfx	r0, r0, #0, #13
 800e4a2:	bd08      	pop	{r3, pc}
 800e4a4:	2200      	movs	r2, #0
 800e4a6:	4905      	ldr	r1, [pc, #20]	; (800e4bc <ull_readclockoffset+0x38>)
 800e4a8:	f7ff ffcd 	bl	800e446 <dwt_read16bitoffsetreg>
 800e4ac:	b200      	sxth	r0, r0
 800e4ae:	e7f6      	b.n	800e49e <ull_readclockoffset+0x1a>
 800e4b0:	2200      	movs	r2, #0
 800e4b2:	4903      	ldr	r1, [pc, #12]	; (800e4c0 <ull_readclockoffset+0x3c>)
 800e4b4:	f7ff ffc7 	bl	800e446 <dwt_read16bitoffsetreg>
 800e4b8:	b200      	sxth	r0, r0
 800e4ba:	e7f0      	b.n	800e49e <ull_readclockoffset+0x1a>
 800e4bc:	0018000c 	.word	0x0018000c
 800e4c0:	000c0020 	.word	0x000c0020

0800e4c4 <dwt_read8bitoffsetreg>:
 800e4c4:	b500      	push	{lr}
 800e4c6:	b085      	sub	sp, #20
 800e4c8:	f10d 030f 	add.w	r3, sp, #15
 800e4cc:	9300      	str	r3, [sp, #0]
 800e4ce:	2301      	movs	r3, #1
 800e4d0:	b292      	uxth	r2, r2
 800e4d2:	f7ff ff98 	bl	800e406 <dwt_readfromdevice>
 800e4d6:	f89d 000f 	ldrb.w	r0, [sp, #15]
 800e4da:	b005      	add	sp, #20
 800e4dc:	f85d fb04 	ldr.w	pc, [sp], #4

0800e4e0 <ull_readcarrierintegrator>:
 800e4e0:	b500      	push	{lr}
 800e4e2:	b085      	sub	sp, #20
 800e4e4:	ab03      	add	r3, sp, #12
 800e4e6:	9300      	str	r3, [sp, #0]
 800e4e8:	2303      	movs	r3, #3
 800e4ea:	2200      	movs	r2, #0
 800e4ec:	490b      	ldr	r1, [pc, #44]	; (800e51c <ull_readcarrierintegrator+0x3c>)
 800e4ee:	f7ff ff8a 	bl	800e406 <dwt_readfromdevice>
 800e4f2:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800e4f6:	f89d 000d 	ldrb.w	r0, [sp, #13]
 800e4fa:	eb00 2303 	add.w	r3, r0, r3, lsl #8
 800e4fe:	f89d 000c 	ldrb.w	r0, [sp, #12]
 800e502:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 800e506:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 800e50a:	bf1c      	itt	ne
 800e50c:	ea6f 3000 	mvnne.w	r0, r0, lsl #12
 800e510:	ea6f 3010 	mvnne.w	r0, r0, lsr #12
 800e514:	b005      	add	sp, #20
 800e516:	f85d fb04 	ldr.w	pc, [sp], #4
 800e51a:	bf00      	nop
 800e51c:	00060029 	.word	0x00060029

0800e520 <ull_readdiagnostics>:
 800e520:	b530      	push	{r4, r5, lr}
 800e522:	b0bd      	sub	sp, #244	; 0xf4
 800e524:	4605      	mov	r5, r0
 800e526:	460c      	mov	r4, r1
 800e528:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800e52a:	7b9a      	ldrb	r2, [r3, #14]
 800e52c:	2a01      	cmp	r2, #1
 800e52e:	d01c      	beq.n	800e56a <ull_readdiagnostics+0x4a>
 800e530:	2a03      	cmp	r2, #3
 800e532:	f040 81f1 	bne.w	800e918 <ull_readdiagnostics+0x3f8>
 800e536:	7d9b      	ldrb	r3, [r3, #22]
 800e538:	f013 0f08 	tst.w	r3, #8
 800e53c:	d10c      	bne.n	800e558 <ull_readdiagnostics+0x38>
 800e53e:	f013 0f04 	tst.w	r3, #4
 800e542:	ab02      	add	r3, sp, #8
 800e544:	9300      	str	r3, [sp, #0]
 800e546:	bf14      	ite	ne
 800e548:	2338      	movne	r3, #56	; 0x38
 800e54a:	2320      	moveq	r3, #32
 800e54c:	2200      	movs	r2, #0
 800e54e:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800e552:	f7ff ff58 	bl	800e406 <dwt_readfromdevice>
 800e556:	e019      	b.n	800e58c <ull_readdiagnostics+0x6c>
 800e558:	ab02      	add	r3, sp, #8
 800e55a:	9300      	str	r3, [sp, #0]
 800e55c:	23e8      	movs	r3, #232	; 0xe8
 800e55e:	2200      	movs	r2, #0
 800e560:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800e564:	f7ff ff4f 	bl	800e406 <dwt_readfromdevice>
 800e568:	e010      	b.n	800e58c <ull_readdiagnostics+0x6c>
 800e56a:	7d9b      	ldrb	r3, [r3, #22]
 800e56c:	f013 0f08 	tst.w	r3, #8
 800e570:	f040 81c9 	bne.w	800e906 <ull_readdiagnostics+0x3e6>
 800e574:	f013 0f04 	tst.w	r3, #4
 800e578:	ab02      	add	r3, sp, #8
 800e57a:	9300      	str	r3, [sp, #0]
 800e57c:	bf14      	ite	ne
 800e57e:	2338      	movne	r3, #56	; 0x38
 800e580:	2320      	moveq	r3, #32
 800e582:	2200      	movs	r2, #0
 800e584:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 800e588:	f7ff ff3d 	bl	800e406 <dwt_readfromdevice>
 800e58c:	f10d 0217 	add.w	r2, sp, #23
 800e590:	f104 031a 	add.w	r3, r4, #26
 800e594:	f104 0020 	add.w	r0, r4, #32
 800e598:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800e59c:	f803 1b01 	strb.w	r1, [r3], #1
 800e5a0:	4283      	cmp	r3, r0
 800e5a2:	d1f9      	bne.n	800e598 <ull_readdiagnostics+0x78>
 800e5a4:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800e5a8:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800e5ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e5b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e5b4:	8463      	strh	r3, [r4, #34]	; 0x22
 800e5b6:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800e5ba:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800e5be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e5c2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e5c6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800e5ca:	bf1c      	itt	ne
 800e5cc:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 800e5d0:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 800e5d4:	8423      	strh	r3, [r4, #32]
 800e5d6:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 800e5da:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800e5de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e5e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e5e6:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800e5e8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800e5ea:	7d9b      	ldrb	r3, [r3, #22]
 800e5ec:	f013 0f02 	tst.w	r3, #2
 800e5f0:	f040 817e 	bne.w	800e8f0 <ull_readdiagnostics+0x3d0>
 800e5f4:	aa0a      	add	r2, sp, #40	; 0x28
 800e5f6:	1e63      	subs	r3, r4, #1
 800e5f8:	1d20      	adds	r0, r4, #4
 800e5fa:	f812 1b01 	ldrb.w	r1, [r2], #1
 800e5fe:	f803 1f01 	strb.w	r1, [r3, #1]!
 800e602:	79d1      	ldrb	r1, [r2, #7]
 800e604:	7219      	strb	r1, [r3, #8]
 800e606:	7bd1      	ldrb	r1, [r2, #15]
 800e608:	7459      	strb	r1, [r3, #17]
 800e60a:	4283      	cmp	r3, r0
 800e60c:	d1f5      	bne.n	800e5fa <ull_readdiagnostics+0xda>
 800e60e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 800e612:	7163      	strb	r3, [r4, #5]
 800e614:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 800e618:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 800e61c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e620:	80e3      	strh	r3, [r4, #6]
 800e622:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 800e626:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 800e62a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800e62e:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 800e632:	f8a4 300d 	strh.w	r3, [r4, #13]
 800e636:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 800e63a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 800e63e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e642:	f8a4 300f 	strh.w	r3, [r4, #15]
 800e646:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 800e64a:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 800e64e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800e652:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 800e656:	82e3      	strh	r3, [r4, #22]
 800e658:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
 800e65c:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 800e660:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e664:	8323      	strh	r3, [r4, #24]
 800e666:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800e668:	7d9b      	ldrb	r3, [r3, #22]
 800e66a:	f013 0f04 	tst.w	r3, #4
 800e66e:	f040 813f 	bne.w	800e8f0 <ull_readdiagnostics+0x3d0>
 800e672:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 800e676:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800e67a:	041b      	lsls	r3, r3, #16
 800e67c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e680:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 800e684:	4313      	orrs	r3, r2
 800e686:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 800e68a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e68e:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800e692:	6263      	str	r3, [r4, #36]	; 0x24
 800e694:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
 800e698:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
 800e69c:	041b      	lsls	r3, r3, #16
 800e69e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e6a2:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800e6a6:	4313      	orrs	r3, r2
 800e6a8:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
 800e6ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e6b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e6b4:	62a3      	str	r3, [r4, #40]	; 0x28
 800e6b6:	f89d 204b 	ldrb.w	r2, [sp, #75]	; 0x4b
 800e6ba:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 800e6be:	041b      	lsls	r3, r3, #16
 800e6c0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e6c4:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 800e6c8:	4313      	orrs	r3, r2
 800e6ca:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 800e6ce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e6d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e6d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e6d8:	f89d 204f 	ldrb.w	r2, [sp, #79]	; 0x4f
 800e6dc:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
 800e6e0:	041b      	lsls	r3, r3, #16
 800e6e2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e6e6:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 800e6ea:	4313      	orrs	r3, r2
 800e6ec:	f89d 204d 	ldrb.w	r2, [sp, #77]	; 0x4d
 800e6f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e6f4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e6f8:	6323      	str	r3, [r4, #48]	; 0x30
 800e6fa:	f89d 2053 	ldrb.w	r2, [sp, #83]	; 0x53
 800e6fe:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
 800e702:	041b      	lsls	r3, r3, #16
 800e704:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e708:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 800e70c:	4313      	orrs	r3, r2
 800e70e:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 800e712:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e716:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e71a:	6363      	str	r3, [r4, #52]	; 0x34
 800e71c:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
 800e720:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
 800e724:	041b      	lsls	r3, r3, #16
 800e726:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e72a:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 800e72e:	4313      	orrs	r3, r2
 800e730:	f89d 2055 	ldrb.w	r2, [sp, #85]	; 0x55
 800e734:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e738:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e73c:	63a3      	str	r3, [r4, #56]	; 0x38
 800e73e:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 800e742:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 800e746:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e74a:	87a3      	strh	r3, [r4, #60]	; 0x3c
 800e74c:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 800e750:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 800e754:	041b      	lsls	r3, r3, #16
 800e756:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e75a:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 800e75e:	4313      	orrs	r3, r2
 800e760:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 800e764:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e768:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800e76c:	6423      	str	r3, [r4, #64]	; 0x40
 800e76e:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
 800e772:	f89d 307a 	ldrb.w	r3, [sp, #122]	; 0x7a
 800e776:	041b      	lsls	r3, r3, #16
 800e778:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e77c:	f89d 2078 	ldrb.w	r2, [sp, #120]	; 0x78
 800e780:	4313      	orrs	r3, r2
 800e782:	f89d 2079 	ldrb.w	r2, [sp, #121]	; 0x79
 800e786:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e78a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e78e:	6463      	str	r3, [r4, #68]	; 0x44
 800e790:	f89d 207f 	ldrb.w	r2, [sp, #127]	; 0x7f
 800e794:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
 800e798:	041b      	lsls	r3, r3, #16
 800e79a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e79e:	f89d 207c 	ldrb.w	r2, [sp, #124]	; 0x7c
 800e7a2:	4313      	orrs	r3, r2
 800e7a4:	f89d 207d 	ldrb.w	r2, [sp, #125]	; 0x7d
 800e7a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e7ac:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e7b0:	64a3      	str	r3, [r4, #72]	; 0x48
 800e7b2:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
 800e7b6:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
 800e7ba:	041b      	lsls	r3, r3, #16
 800e7bc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e7c0:	f89d 2080 	ldrb.w	r2, [sp, #128]	; 0x80
 800e7c4:	4313      	orrs	r3, r2
 800e7c6:	f89d 2081 	ldrb.w	r2, [sp, #129]	; 0x81
 800e7ca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e7ce:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e7d2:	64e3      	str	r3, [r4, #76]	; 0x4c
 800e7d4:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
 800e7d8:	f89d 3086 	ldrb.w	r3, [sp, #134]	; 0x86
 800e7dc:	041b      	lsls	r3, r3, #16
 800e7de:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e7e2:	f89d 2084 	ldrb.w	r2, [sp, #132]	; 0x84
 800e7e6:	4313      	orrs	r3, r2
 800e7e8:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 800e7ec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e7f0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e7f4:	6523      	str	r3, [r4, #80]	; 0x50
 800e7f6:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 800e7fa:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 800e7fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e802:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800e806:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 800e80a:	f89d 20a5 	ldrb.w	r2, [sp, #165]	; 0xa5
 800e80e:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 800e812:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e816:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e81a:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 800e81e:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 800e822:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 800e826:	041b      	lsls	r3, r3, #16
 800e828:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e82c:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 800e830:	4313      	orrs	r3, r2
 800e832:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 800e836:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e83a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800e83e:	65a3      	str	r3, [r4, #88]	; 0x58
 800e840:	f89d 20c3 	ldrb.w	r2, [sp, #195]	; 0xc3
 800e844:	f89d 30c2 	ldrb.w	r3, [sp, #194]	; 0xc2
 800e848:	041b      	lsls	r3, r3, #16
 800e84a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e84e:	f89d 20c0 	ldrb.w	r2, [sp, #192]	; 0xc0
 800e852:	4313      	orrs	r3, r2
 800e854:	f89d 20c1 	ldrb.w	r2, [sp, #193]	; 0xc1
 800e858:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e85c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e860:	65e3      	str	r3, [r4, #92]	; 0x5c
 800e862:	f89d 20c7 	ldrb.w	r2, [sp, #199]	; 0xc7
 800e866:	f89d 30c6 	ldrb.w	r3, [sp, #198]	; 0xc6
 800e86a:	041b      	lsls	r3, r3, #16
 800e86c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e870:	f89d 20c4 	ldrb.w	r2, [sp, #196]	; 0xc4
 800e874:	4313      	orrs	r3, r2
 800e876:	f89d 20c5 	ldrb.w	r2, [sp, #197]	; 0xc5
 800e87a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e87e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e882:	6623      	str	r3, [r4, #96]	; 0x60
 800e884:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
 800e888:	f89d 30ca 	ldrb.w	r3, [sp, #202]	; 0xca
 800e88c:	041b      	lsls	r3, r3, #16
 800e88e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e892:	f89d 20c8 	ldrb.w	r2, [sp, #200]	; 0xc8
 800e896:	4313      	orrs	r3, r2
 800e898:	f89d 20c9 	ldrb.w	r2, [sp, #201]	; 0xc9
 800e89c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e8a0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e8a4:	6663      	str	r3, [r4, #100]	; 0x64
 800e8a6:	f89d 20cf 	ldrb.w	r2, [sp, #207]	; 0xcf
 800e8aa:	f89d 30ce 	ldrb.w	r3, [sp, #206]	; 0xce
 800e8ae:	041b      	lsls	r3, r3, #16
 800e8b0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e8b4:	f89d 20cc 	ldrb.w	r2, [sp, #204]	; 0xcc
 800e8b8:	4313      	orrs	r3, r2
 800e8ba:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 800e8be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e8c2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e8c6:	66a3      	str	r3, [r4, #104]	; 0x68
 800e8c8:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 800e8cc:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 800e8d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e8d4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800e8d8:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 800e8dc:	f89d 20ed 	ldrb.w	r2, [sp, #237]	; 0xed
 800e8e0:	f89d 30ec 	ldrb.w	r3, [sp, #236]	; 0xec
 800e8e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e8e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e8ec:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 800e8f0:	f994 301b 	ldrsb.w	r3, [r4, #27]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	f2c0 81d0 	blt.w	800ec9a <ull_readdiagnostics+0x77a>
 800e8fa:	7fe3      	ldrb	r3, [r4, #31]
 800e8fc:	f003 0301 	and.w	r3, r3, #1
 800e900:	77e3      	strb	r3, [r4, #31]
 800e902:	b03d      	add	sp, #244	; 0xf4
 800e904:	bd30      	pop	{r4, r5, pc}
 800e906:	ab02      	add	r3, sp, #8
 800e908:	9300      	str	r3, [sp, #0]
 800e90a:	23e8      	movs	r3, #232	; 0xe8
 800e90c:	2200      	movs	r2, #0
 800e90e:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 800e912:	f7ff fd78 	bl	800e406 <dwt_readfromdevice>
 800e916:	e639      	b.n	800e58c <ull_readdiagnostics+0x6c>
 800e918:	7d9b      	ldrb	r3, [r3, #22]
 800e91a:	f013 0f01 	tst.w	r3, #1
 800e91e:	f000 81b3 	beq.w	800ec88 <ull_readdiagnostics+0x768>
 800e922:	ab02      	add	r3, sp, #8
 800e924:	9300      	str	r3, [sp, #0]
 800e926:	236c      	movs	r3, #108	; 0x6c
 800e928:	2200      	movs	r2, #0
 800e92a:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 800e92e:	f7ff fd6a 	bl	800e406 <dwt_readfromdevice>
 800e932:	ab1d      	add	r3, sp, #116	; 0x74
 800e934:	9300      	str	r3, [sp, #0]
 800e936:	236c      	movs	r3, #108	; 0x6c
 800e938:	2200      	movs	r2, #0
 800e93a:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 800e93e:	4628      	mov	r0, r5
 800e940:	f7ff fd61 	bl	800e406 <dwt_readfromdevice>
 800e944:	aa02      	add	r2, sp, #8
 800e946:	1e63      	subs	r3, r4, #1
 800e948:	1d20      	adds	r0, r4, #4
 800e94a:	f812 1b01 	ldrb.w	r1, [r2], #1
 800e94e:	f803 1f01 	strb.w	r1, [r3, #1]!
 800e952:	79d1      	ldrb	r1, [r2, #7]
 800e954:	7219      	strb	r1, [r3, #8]
 800e956:	7bd1      	ldrb	r1, [r2, #15]
 800e958:	7459      	strb	r1, [r3, #17]
 800e95a:	7dd1      	ldrb	r1, [r2, #23]
 800e95c:	7699      	strb	r1, [r3, #26]
 800e95e:	4283      	cmp	r3, r0
 800e960:	d1f3      	bne.n	800e94a <ull_readdiagnostics+0x42a>
 800e962:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800e966:	77e3      	strb	r3, [r4, #31]
 800e968:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800e96c:	7163      	strb	r3, [r4, #5]
 800e96e:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800e972:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800e976:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e97a:	80e3      	strh	r3, [r4, #6]
 800e97c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800e980:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800e984:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 800e988:	f3c2 12cf 	ubfx	r2, r2, #7, #16
 800e98c:	f8a4 200d 	strh.w	r2, [r4, #13]
 800e990:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800e994:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800e998:	f8a4 200f 	strh.w	r2, [r4, #15]
 800e99c:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800e9a0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e9a4:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 800e9a8:	82e3      	strh	r3, [r4, #22]
 800e9aa:	f89d 201e 	ldrb.w	r2, [sp, #30]
 800e9ae:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800e9b2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e9b6:	8323      	strh	r3, [r4, #24]
 800e9b8:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 800e9bc:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 800e9c0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e9c4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e9c8:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800e9cc:	bf1c      	itt	ne
 800e9ce:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 800e9d2:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 800e9d6:	8423      	strh	r3, [r4, #32]
 800e9d8:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 800e9dc:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800e9e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e9e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e9e8:	8463      	strh	r3, [r4, #34]	; 0x22
 800e9ea:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 800e9ee:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 800e9f2:	041b      	lsls	r3, r3, #16
 800e9f4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e9f8:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 800e9fc:	4313      	orrs	r3, r2
 800e9fe:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 800ea02:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ea06:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800ea0a:	6263      	str	r3, [r4, #36]	; 0x24
 800ea0c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800ea0e:	7d9b      	ldrb	r3, [r3, #22]
 800ea10:	f013 0f01 	tst.w	r3, #1
 800ea14:	f43f af6c 	beq.w	800e8f0 <ull_readdiagnostics+0x3d0>
 800ea18:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 800ea1c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 800ea20:	041b      	lsls	r3, r3, #16
 800ea22:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ea26:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 800ea2a:	4313      	orrs	r3, r2
 800ea2c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 800ea30:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ea34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ea38:	62a3      	str	r3, [r4, #40]	; 0x28
 800ea3a:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 800ea3e:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 800ea42:	041b      	lsls	r3, r3, #16
 800ea44:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ea48:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 800ea4c:	4313      	orrs	r3, r2
 800ea4e:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 800ea52:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ea56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ea5a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ea5c:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 800ea60:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 800ea64:	041b      	lsls	r3, r3, #16
 800ea66:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ea6a:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 800ea6e:	4313      	orrs	r3, r2
 800ea70:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 800ea74:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ea78:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ea7c:	6323      	str	r3, [r4, #48]	; 0x30
 800ea7e:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 800ea82:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 800ea86:	041b      	lsls	r3, r3, #16
 800ea88:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ea8c:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 800ea90:	4313      	orrs	r3, r2
 800ea92:	f89d 203d 	ldrb.w	r2, [sp, #61]	; 0x3d
 800ea96:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ea9a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ea9e:	6363      	str	r3, [r4, #52]	; 0x34
 800eaa0:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 800eaa4:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800eaa8:	041b      	lsls	r3, r3, #16
 800eaaa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800eaae:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 800eab2:	4313      	orrs	r3, r2
 800eab4:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 800eab8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800eabc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800eac0:	63a3      	str	r3, [r4, #56]	; 0x38
 800eac2:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 800eac6:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800eaca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800eace:	87a3      	strh	r3, [r4, #60]	; 0x3c
 800ead0:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
 800ead4:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 800ead8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800eadc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800eae0:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800eae2:	f89d 2067 	ldrb.w	r2, [sp, #103]	; 0x67
 800eae6:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
 800eaea:	041b      	lsls	r3, r3, #16
 800eaec:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800eaf0:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 800eaf4:	4313      	orrs	r3, r2
 800eaf6:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 800eafa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800eafe:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800eb02:	6423      	str	r3, [r4, #64]	; 0x40
 800eb04:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
 800eb08:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
 800eb0c:	041b      	lsls	r3, r3, #16
 800eb0e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800eb12:	f89d 2068 	ldrb.w	r2, [sp, #104]	; 0x68
 800eb16:	4313      	orrs	r3, r2
 800eb18:	f89d 2069 	ldrb.w	r2, [sp, #105]	; 0x69
 800eb1c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800eb20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eb24:	6463      	str	r3, [r4, #68]	; 0x44
 800eb26:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
 800eb2a:	f89d 306e 	ldrb.w	r3, [sp, #110]	; 0x6e
 800eb2e:	041b      	lsls	r3, r3, #16
 800eb30:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800eb34:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 800eb38:	4313      	orrs	r3, r2
 800eb3a:	f89d 206d 	ldrb.w	r2, [sp, #109]	; 0x6d
 800eb3e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800eb42:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800eb46:	64a3      	str	r3, [r4, #72]	; 0x48
 800eb48:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
 800eb4c:	f89d 3072 	ldrb.w	r3, [sp, #114]	; 0x72
 800eb50:	041b      	lsls	r3, r3, #16
 800eb52:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800eb56:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
 800eb5a:	4313      	orrs	r3, r2
 800eb5c:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
 800eb60:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800eb64:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800eb68:	64e3      	str	r3, [r4, #76]	; 0x4c
 800eb6a:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 800eb6e:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 800eb72:	041b      	lsls	r3, r3, #16
 800eb74:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800eb78:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 800eb7c:	4313      	orrs	r3, r2
 800eb7e:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 800eb82:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800eb86:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800eb8a:	6523      	str	r3, [r4, #80]	; 0x50
 800eb8c:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 800eb90:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 800eb94:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800eb98:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800eb9c:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 800eba0:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 800eba4:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 800eba8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ebac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ebb0:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 800ebb4:	f89d 20af 	ldrb.w	r2, [sp, #175]	; 0xaf
 800ebb8:	f89d 30ae 	ldrb.w	r3, [sp, #174]	; 0xae
 800ebbc:	041b      	lsls	r3, r3, #16
 800ebbe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ebc2:	f89d 20ac 	ldrb.w	r2, [sp, #172]	; 0xac
 800ebc6:	4313      	orrs	r3, r2
 800ebc8:	f89d 20ad 	ldrb.w	r2, [sp, #173]	; 0xad
 800ebcc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ebd0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800ebd4:	65a3      	str	r3, [r4, #88]	; 0x58
 800ebd6:	f89d 20b3 	ldrb.w	r2, [sp, #179]	; 0xb3
 800ebda:	f89d 30b2 	ldrb.w	r3, [sp, #178]	; 0xb2
 800ebde:	041b      	lsls	r3, r3, #16
 800ebe0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ebe4:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
 800ebe8:	4313      	orrs	r3, r2
 800ebea:	f89d 20b1 	ldrb.w	r2, [sp, #177]	; 0xb1
 800ebee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ebf2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ebf6:	65e3      	str	r3, [r4, #92]	; 0x5c
 800ebf8:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
 800ebfc:	f89d 30b6 	ldrb.w	r3, [sp, #182]	; 0xb6
 800ec00:	041b      	lsls	r3, r3, #16
 800ec02:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ec06:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 800ec0a:	4313      	orrs	r3, r2
 800ec0c:	f89d 20b5 	ldrb.w	r2, [sp, #181]	; 0xb5
 800ec10:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ec14:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ec18:	6623      	str	r3, [r4, #96]	; 0x60
 800ec1a:	f89d 20bb 	ldrb.w	r2, [sp, #187]	; 0xbb
 800ec1e:	f89d 30ba 	ldrb.w	r3, [sp, #186]	; 0xba
 800ec22:	041b      	lsls	r3, r3, #16
 800ec24:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ec28:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 800ec2c:	4313      	orrs	r3, r2
 800ec2e:	f89d 20b9 	ldrb.w	r2, [sp, #185]	; 0xb9
 800ec32:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ec36:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ec3a:	6663      	str	r3, [r4, #100]	; 0x64
 800ec3c:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 800ec40:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 800ec44:	041b      	lsls	r3, r3, #16
 800ec46:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ec4a:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 800ec4e:	4313      	orrs	r3, r2
 800ec50:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 800ec54:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ec58:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ec5c:	66a3      	str	r3, [r4, #104]	; 0x68
 800ec5e:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 800ec62:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 800ec66:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ec6a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800ec6e:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 800ec72:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 800ec76:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 800ec7a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ec7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ec82:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 800ec86:	e633      	b.n	800e8f0 <ull_readdiagnostics+0x3d0>
 800ec88:	ab02      	add	r3, sp, #8
 800ec8a:	9300      	str	r3, [sp, #0]
 800ec8c:	2328      	movs	r3, #40	; 0x28
 800ec8e:	2200      	movs	r2, #0
 800ec90:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 800ec94:	f7ff fbb7 	bl	800e406 <dwt_readfromdevice>
 800ec98:	e654      	b.n	800e944 <ull_readdiagnostics+0x424>
 800ec9a:	23ff      	movs	r3, #255	; 0xff
 800ec9c:	7723      	strb	r3, [r4, #28]
 800ec9e:	7763      	strb	r3, [r4, #29]
 800eca0:	77a3      	strb	r3, [r4, #30]
 800eca2:	77e3      	strb	r3, [r4, #31]
 800eca4:	e629      	b.n	800e8fa <ull_readdiagnostics+0x3da>
	...

0800eca8 <ull_readrxtimestamp>:
 800eca8:	b500      	push	{lr}
 800ecaa:	b083      	sub	sp, #12
 800ecac:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800ecae:	7b9b      	ldrb	r3, [r3, #14]
 800ecb0:	2b01      	cmp	r3, #1
 800ecb2:	d00b      	beq.n	800eccc <ull_readrxtimestamp+0x24>
 800ecb4:	2b03      	cmp	r3, #3
 800ecb6:	d110      	bne.n	800ecda <ull_readrxtimestamp+0x32>
 800ecb8:	9100      	str	r1, [sp, #0]
 800ecba:	2305      	movs	r3, #5
 800ecbc:	2204      	movs	r2, #4
 800ecbe:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800ecc2:	f7ff fba0 	bl	800e406 <dwt_readfromdevice>
 800ecc6:	b003      	add	sp, #12
 800ecc8:	f85d fb04 	ldr.w	pc, [sp], #4
 800eccc:	9100      	str	r1, [sp, #0]
 800ecce:	2305      	movs	r3, #5
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	4905      	ldr	r1, [pc, #20]	; (800ece8 <ull_readrxtimestamp+0x40>)
 800ecd4:	f7ff fb97 	bl	800e406 <dwt_readfromdevice>
 800ecd8:	e7f5      	b.n	800ecc6 <ull_readrxtimestamp+0x1e>
 800ecda:	9100      	str	r1, [sp, #0]
 800ecdc:	2305      	movs	r3, #5
 800ecde:	2200      	movs	r2, #0
 800ece0:	2160      	movs	r1, #96	; 0x60
 800ece2:	f7ff fb90 	bl	800e406 <dwt_readfromdevice>
 800ece6:	e7ee      	b.n	800ecc6 <ull_readrxtimestamp+0x1e>
 800ece8:	00180004 	.word	0x00180004

0800ecec <dwt_writetodevice>:
 800ecec:	b510      	push	{r4, lr}
 800ecee:	b082      	sub	sp, #8
 800ecf0:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 800ecf4:	9401      	str	r4, [sp, #4]
 800ecf6:	9c04      	ldr	r4, [sp, #16]
 800ecf8:	9400      	str	r4, [sp, #0]
 800ecfa:	f7ff fb06 	bl	800e30a <dwt_xfer3xxx>
 800ecfe:	b002      	add	sp, #8
 800ed00:	bd10      	pop	{r4, pc}

0800ed02 <dwt_write16bitoffsetreg>:
 800ed02:	b500      	push	{lr}
 800ed04:	b085      	sub	sp, #20
 800ed06:	f88d 300c 	strb.w	r3, [sp, #12]
 800ed0a:	0a1b      	lsrs	r3, r3, #8
 800ed0c:	f88d 300d 	strb.w	r3, [sp, #13]
 800ed10:	ab03      	add	r3, sp, #12
 800ed12:	9300      	str	r3, [sp, #0]
 800ed14:	2302      	movs	r3, #2
 800ed16:	b292      	uxth	r2, r2
 800ed18:	f7ff ffe8 	bl	800ecec <dwt_writetodevice>
 800ed1c:	b005      	add	sp, #20
 800ed1e:	f85d fb04 	ldr.w	pc, [sp], #4

0800ed22 <ull_setrxantennadelay>:
 800ed22:	b508      	push	{r3, lr}
 800ed24:	460b      	mov	r3, r1
 800ed26:	2200      	movs	r2, #0
 800ed28:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800ed2c:	f7ff ffe9 	bl	800ed02 <dwt_write16bitoffsetreg>
 800ed30:	bd08      	pop	{r3, pc}

0800ed32 <ull_settxantennadelay>:
 800ed32:	b508      	push	{r3, lr}
 800ed34:	460b      	mov	r3, r1
 800ed36:	2200      	movs	r2, #0
 800ed38:	217c      	movs	r1, #124	; 0x7c
 800ed3a:	f7ff ffe2 	bl	800ed02 <dwt_write16bitoffsetreg>
 800ed3e:	bd08      	pop	{r3, pc}

0800ed40 <ull_force_clocks>:
 800ed40:	b508      	push	{r3, lr}
 800ed42:	2901      	cmp	r1, #1
 800ed44:	d002      	beq.n	800ed4c <ull_force_clocks+0xc>
 800ed46:	2905      	cmp	r1, #5
 800ed48:	d007      	beq.n	800ed5a <ull_force_clocks+0x1a>
 800ed4a:	bd08      	pop	{r3, pc}
 800ed4c:	f641 0322 	movw	r3, #6178	; 0x1822
 800ed50:	2200      	movs	r2, #0
 800ed52:	4905      	ldr	r1, [pc, #20]	; (800ed68 <ull_force_clocks+0x28>)
 800ed54:	f7ff ffd5 	bl	800ed02 <dwt_write16bitoffsetreg>
 800ed58:	e7f7      	b.n	800ed4a <ull_force_clocks+0xa>
 800ed5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ed5e:	2200      	movs	r2, #0
 800ed60:	4901      	ldr	r1, [pc, #4]	; (800ed68 <ull_force_clocks+0x28>)
 800ed62:	f7ff ffce 	bl	800ed02 <dwt_write16bitoffsetreg>
 800ed66:	e7f0      	b.n	800ed4a <ull_force_clocks+0xa>
 800ed68:	00110004 	.word	0x00110004

0800ed6c <__dwt_otp_write_wdata_id_reg>:
 800ed6c:	b538      	push	{r3, r4, r5, lr}
 800ed6e:	4605      	mov	r5, r0
 800ed70:	460c      	mov	r4, r1
 800ed72:	f441 7300 	orr.w	r3, r1, #512	; 0x200
 800ed76:	b29b      	uxth	r3, r3
 800ed78:	2200      	movs	r2, #0
 800ed7a:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800ed7e:	f7ff ffc0 	bl	800ed02 <dwt_write16bitoffsetreg>
 800ed82:	b2a3      	uxth	r3, r4
 800ed84:	2200      	movs	r2, #0
 800ed86:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800ed8a:	4628      	mov	r0, r5
 800ed8c:	f7ff ffb9 	bl	800ed02 <dwt_write16bitoffsetreg>
 800ed90:	bd38      	pop	{r3, r4, r5, pc}
	...

0800ed94 <_dwt_otpread>:
 800ed94:	b570      	push	{r4, r5, r6, lr}
 800ed96:	4604      	mov	r4, r0
 800ed98:	460e      	mov	r6, r1
 800ed9a:	4d0c      	ldr	r5, [pc, #48]	; (800edcc <_dwt_otpread+0x38>)
 800ed9c:	2301      	movs	r3, #1
 800ed9e:	2200      	movs	r2, #0
 800eda0:	4629      	mov	r1, r5
 800eda2:	f7ff ffae 	bl	800ed02 <dwt_write16bitoffsetreg>
 800eda6:	4633      	mov	r3, r6
 800eda8:	2200      	movs	r2, #0
 800edaa:	4909      	ldr	r1, [pc, #36]	; (800edd0 <_dwt_otpread+0x3c>)
 800edac:	4620      	mov	r0, r4
 800edae:	f7ff ffa8 	bl	800ed02 <dwt_write16bitoffsetreg>
 800edb2:	2302      	movs	r3, #2
 800edb4:	2200      	movs	r2, #0
 800edb6:	4629      	mov	r1, r5
 800edb8:	4620      	mov	r0, r4
 800edba:	f7ff ffa2 	bl	800ed02 <dwt_write16bitoffsetreg>
 800edbe:	2200      	movs	r2, #0
 800edc0:	4904      	ldr	r1, [pc, #16]	; (800edd4 <_dwt_otpread+0x40>)
 800edc2:	4620      	mov	r0, r4
 800edc4:	f7ff fb29 	bl	800e41a <dwt_read32bitoffsetreg>
 800edc8:	bd70      	pop	{r4, r5, r6, pc}
 800edca:	bf00      	nop
 800edcc:	000b0008 	.word	0x000b0008
 800edd0:	000b0004 	.word	0x000b0004
 800edd4:	000b0010 	.word	0x000b0010

0800edd8 <dwt_write32bitoffsetreg>:
 800edd8:	b510      	push	{r4, lr}
 800edda:	b084      	sub	sp, #16
 800eddc:	f88d 300c 	strb.w	r3, [sp, #12]
 800ede0:	0a1c      	lsrs	r4, r3, #8
 800ede2:	f88d 400d 	strb.w	r4, [sp, #13]
 800ede6:	0c1c      	lsrs	r4, r3, #16
 800ede8:	f88d 400e 	strb.w	r4, [sp, #14]
 800edec:	0e1b      	lsrs	r3, r3, #24
 800edee:	f88d 300f 	strb.w	r3, [sp, #15]
 800edf2:	ab03      	add	r3, sp, #12
 800edf4:	9300      	str	r3, [sp, #0]
 800edf6:	2304      	movs	r3, #4
 800edf8:	b292      	uxth	r2, r2
 800edfa:	f7ff ff77 	bl	800ecec <dwt_writetodevice>
 800edfe:	b004      	add	sp, #16
 800ee00:	bd10      	pop	{r4, pc}

0800ee02 <_dwt_adjust_delaytime>:
 800ee02:	b538      	push	{r3, r4, r5, lr}
 800ee04:	4604      	mov	r4, r0
 800ee06:	b989      	cbnz	r1, 800ee2c <_dwt_adjust_delaytime+0x2a>
 800ee08:	2200      	movs	r2, #0
 800ee0a:	2128      	movs	r1, #40	; 0x28
 800ee0c:	f7ff fb05 	bl	800e41a <dwt_read32bitoffsetreg>
 800ee10:	4605      	mov	r5, r0
 800ee12:	2201      	movs	r2, #1
 800ee14:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800ee18:	4620      	mov	r0, r4
 800ee1a:	f7ff fb53 	bl	800e4c4 <dwt_read8bitoffsetreg>
 800ee1e:	1a2b      	subs	r3, r5, r0
 800ee20:	2200      	movs	r2, #0
 800ee22:	2128      	movs	r1, #40	; 0x28
 800ee24:	4620      	mov	r0, r4
 800ee26:	f7ff ffd7 	bl	800edd8 <dwt_write32bitoffsetreg>
 800ee2a:	bd38      	pop	{r3, r4, r5, pc}
 800ee2c:	2200      	movs	r2, #0
 800ee2e:	2128      	movs	r1, #40	; 0x28
 800ee30:	f7ff faf3 	bl	800e41a <dwt_read32bitoffsetreg>
 800ee34:	4605      	mov	r5, r0
 800ee36:	2201      	movs	r2, #1
 800ee38:	217c      	movs	r1, #124	; 0x7c
 800ee3a:	4620      	mov	r0, r4
 800ee3c:	f7ff fb42 	bl	800e4c4 <dwt_read8bitoffsetreg>
 800ee40:	1a2b      	subs	r3, r5, r0
 800ee42:	2200      	movs	r2, #0
 800ee44:	2128      	movs	r1, #40	; 0x28
 800ee46:	4620      	mov	r0, r4
 800ee48:	f7ff ffc6 	bl	800edd8 <dwt_write32bitoffsetreg>
 800ee4c:	e7ed      	b.n	800ee2a <_dwt_adjust_delaytime+0x28>

0800ee4e <ull_setrxaftertxdelay>:
 800ee4e:	b538      	push	{r3, r4, r5, lr}
 800ee50:	4605      	mov	r5, r0
 800ee52:	460c      	mov	r4, r1
 800ee54:	2200      	movs	r2, #0
 800ee56:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800ee5a:	f7ff fade 	bl	800e41a <dwt_read32bitoffsetreg>
 800ee5e:	0d00      	lsrs	r0, r0, #20
 800ee60:	0500      	lsls	r0, r0, #20
 800ee62:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800ee66:	4303      	orrs	r3, r0
 800ee68:	2200      	movs	r2, #0
 800ee6a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800ee6e:	4628      	mov	r0, r5
 800ee70:	f7ff ffb2 	bl	800edd8 <dwt_write32bitoffsetreg>
 800ee74:	bd38      	pop	{r3, r4, r5, pc}
	...

0800ee78 <ull_setfinegraintxseq>:
 800ee78:	b508      	push	{r3, lr}
 800ee7a:	b929      	cbnz	r1, 800ee88 <ull_setfinegraintxseq+0x10>
 800ee7c:	4b05      	ldr	r3, [pc, #20]	; (800ee94 <ull_setfinegraintxseq+0x1c>)
 800ee7e:	2202      	movs	r2, #2
 800ee80:	4905      	ldr	r1, [pc, #20]	; (800ee98 <ull_setfinegraintxseq+0x20>)
 800ee82:	f7ff ffa9 	bl	800edd8 <dwt_write32bitoffsetreg>
 800ee86:	bd08      	pop	{r3, pc}
 800ee88:	4b04      	ldr	r3, [pc, #16]	; (800ee9c <ull_setfinegraintxseq+0x24>)
 800ee8a:	2202      	movs	r2, #2
 800ee8c:	4902      	ldr	r1, [pc, #8]	; (800ee98 <ull_setfinegraintxseq+0x20>)
 800ee8e:	f7ff ffa3 	bl	800edd8 <dwt_write32bitoffsetreg>
 800ee92:	e7f8      	b.n	800ee86 <ull_setfinegraintxseq+0xe>
 800ee94:	00d20874 	.word	0x00d20874
 800ee98:	00110010 	.word	0x00110010
 800ee9c:	04d28874 	.word	0x04d28874

0800eea0 <ull_setlnapamode>:
 800eea0:	b538      	push	{r3, r4, r5, lr}
 800eea2:	4605      	mov	r5, r0
 800eea4:	460c      	mov	r4, r1
 800eea6:	2200      	movs	r2, #0
 800eea8:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800eeac:	f7ff fab5 	bl	800e41a <dwt_read32bitoffsetreg>
 800eeb0:	f420 337c 	bic.w	r3, r0, #258048	; 0x3f000
 800eeb4:	f014 0f01 	tst.w	r4, #1
 800eeb8:	bf18      	it	ne
 800eeba:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
 800eebe:	f014 0f02 	tst.w	r4, #2
 800eec2:	bf18      	it	ne
 800eec4:	f443 5300 	orrne.w	r3, r3, #8192	; 0x2000
 800eec8:	f014 0f04 	tst.w	r4, #4
 800eecc:	bf18      	it	ne
 800eece:	f443 3390 	orrne.w	r3, r3, #73728	; 0x12000
 800eed2:	2200      	movs	r2, #0
 800eed4:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800eed8:	4628      	mov	r0, r5
 800eeda:	f7ff ff7d 	bl	800edd8 <dwt_write32bitoffsetreg>
 800eede:	bd38      	pop	{r3, r4, r5, pc}

0800eee0 <ull_configurestskey>:
 800eee0:	b538      	push	{r3, r4, r5, lr}
 800eee2:	4605      	mov	r5, r0
 800eee4:	460c      	mov	r4, r1
 800eee6:	680b      	ldr	r3, [r1, #0]
 800eee8:	2200      	movs	r2, #0
 800eeea:	490b      	ldr	r1, [pc, #44]	; (800ef18 <ull_configurestskey+0x38>)
 800eeec:	f7ff ff74 	bl	800edd8 <dwt_write32bitoffsetreg>
 800eef0:	6863      	ldr	r3, [r4, #4]
 800eef2:	2200      	movs	r2, #0
 800eef4:	4909      	ldr	r1, [pc, #36]	; (800ef1c <ull_configurestskey+0x3c>)
 800eef6:	4628      	mov	r0, r5
 800eef8:	f7ff ff6e 	bl	800edd8 <dwt_write32bitoffsetreg>
 800eefc:	68a3      	ldr	r3, [r4, #8]
 800eefe:	2200      	movs	r2, #0
 800ef00:	4907      	ldr	r1, [pc, #28]	; (800ef20 <ull_configurestskey+0x40>)
 800ef02:	4628      	mov	r0, r5
 800ef04:	f7ff ff68 	bl	800edd8 <dwt_write32bitoffsetreg>
 800ef08:	68e3      	ldr	r3, [r4, #12]
 800ef0a:	2200      	movs	r2, #0
 800ef0c:	4905      	ldr	r1, [pc, #20]	; (800ef24 <ull_configurestskey+0x44>)
 800ef0e:	4628      	mov	r0, r5
 800ef10:	f7ff ff62 	bl	800edd8 <dwt_write32bitoffsetreg>
 800ef14:	bd38      	pop	{r3, r4, r5, pc}
 800ef16:	bf00      	nop
 800ef18:	0002000c 	.word	0x0002000c
 800ef1c:	00020010 	.word	0x00020010
 800ef20:	00020014 	.word	0x00020014
 800ef24:	00020018 	.word	0x00020018

0800ef28 <ull_configurestsiv>:
 800ef28:	b538      	push	{r3, r4, r5, lr}
 800ef2a:	4605      	mov	r5, r0
 800ef2c:	460c      	mov	r4, r1
 800ef2e:	680b      	ldr	r3, [r1, #0]
 800ef30:	2200      	movs	r2, #0
 800ef32:	490b      	ldr	r1, [pc, #44]	; (800ef60 <ull_configurestsiv+0x38>)
 800ef34:	f7ff ff50 	bl	800edd8 <dwt_write32bitoffsetreg>
 800ef38:	6863      	ldr	r3, [r4, #4]
 800ef3a:	2200      	movs	r2, #0
 800ef3c:	4909      	ldr	r1, [pc, #36]	; (800ef64 <ull_configurestsiv+0x3c>)
 800ef3e:	4628      	mov	r0, r5
 800ef40:	f7ff ff4a 	bl	800edd8 <dwt_write32bitoffsetreg>
 800ef44:	68a3      	ldr	r3, [r4, #8]
 800ef46:	2200      	movs	r2, #0
 800ef48:	4907      	ldr	r1, [pc, #28]	; (800ef68 <ull_configurestsiv+0x40>)
 800ef4a:	4628      	mov	r0, r5
 800ef4c:	f7ff ff44 	bl	800edd8 <dwt_write32bitoffsetreg>
 800ef50:	68e3      	ldr	r3, [r4, #12]
 800ef52:	2200      	movs	r2, #0
 800ef54:	4905      	ldr	r1, [pc, #20]	; (800ef6c <ull_configurestsiv+0x44>)
 800ef56:	4628      	mov	r0, r5
 800ef58:	f7ff ff3e 	bl	800edd8 <dwt_write32bitoffsetreg>
 800ef5c:	bd38      	pop	{r3, r4, r5, pc}
 800ef5e:	bf00      	nop
 800ef60:	0002001c 	.word	0x0002001c
 800ef64:	00020020 	.word	0x00020020
 800ef68:	00020024 	.word	0x00020024
 800ef6c:	00020028 	.word	0x00020028

0800ef70 <ull_configmrxlut>:
 800ef70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef74:	4604      	mov	r4, r0
 800ef76:	4d35      	ldr	r5, [pc, #212]	; (800f04c <ull_configmrxlut+0xdc>)
 800ef78:	4b35      	ldr	r3, [pc, #212]	; (800f050 <ull_configmrxlut+0xe0>)
 800ef7a:	2905      	cmp	r1, #5
 800ef7c:	bf18      	it	ne
 800ef7e:	461d      	movne	r5, r3
 800ef80:	4e34      	ldr	r6, [pc, #208]	; (800f054 <ull_configmrxlut+0xe4>)
 800ef82:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800ef86:	2905      	cmp	r1, #5
 800ef88:	bf18      	it	ne
 800ef8a:	461e      	movne	r6, r3
 800ef8c:	4f32      	ldr	r7, [pc, #200]	; (800f058 <ull_configmrxlut+0xe8>)
 800ef8e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800ef92:	2905      	cmp	r1, #5
 800ef94:	bf18      	it	ne
 800ef96:	461f      	movne	r7, r3
 800ef98:	4a30      	ldr	r2, [pc, #192]	; (800f05c <ull_configmrxlut+0xec>)
 800ef9a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800ef9e:	2905      	cmp	r1, #5
 800efa0:	bf0c      	ite	eq
 800efa2:	4690      	moveq	r8, r2
 800efa4:	4698      	movne	r8, r3
 800efa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800efaa:	f5a3 5388 	sub.w	r3, r3, #4352	; 0x1100
 800efae:	2905      	cmp	r1, #5
 800efb0:	bf0c      	ite	eq
 800efb2:	4691      	moveq	r9, r2
 800efb4:	4699      	movne	r9, r3
 800efb6:	4a2a      	ldr	r2, [pc, #168]	; (800f060 <ull_configmrxlut+0xf0>)
 800efb8:	f5a3 63af 	sub.w	r3, r3, #1400	; 0x578
 800efbc:	2905      	cmp	r1, #5
 800efbe:	bf0c      	ite	eq
 800efc0:	4692      	moveq	sl, r2
 800efc2:	469a      	movne	sl, r3
 800efc4:	4b27      	ldr	r3, [pc, #156]	; (800f064 <ull_configmrxlut+0xf4>)
 800efc6:	4a28      	ldr	r2, [pc, #160]	; (800f068 <ull_configmrxlut+0xf8>)
 800efc8:	2905      	cmp	r1, #5
 800efca:	bf0c      	ite	eq
 800efcc:	469b      	moveq	fp, r3
 800efce:	4693      	movne	fp, r2
 800efd0:	f44f 7310 	mov.w	r3, #576	; 0x240
 800efd4:	2200      	movs	r2, #0
 800efd6:	4925      	ldr	r1, [pc, #148]	; (800f06c <ull_configmrxlut+0xfc>)
 800efd8:	f7ff fefe 	bl	800edd8 <dwt_write32bitoffsetreg>
 800efdc:	4b24      	ldr	r3, [pc, #144]	; (800f070 <ull_configmrxlut+0x100>)
 800efde:	2200      	movs	r2, #0
 800efe0:	4924      	ldr	r1, [pc, #144]	; (800f074 <ull_configmrxlut+0x104>)
 800efe2:	4620      	mov	r0, r4
 800efe4:	f7ff fef8 	bl	800edd8 <dwt_write32bitoffsetreg>
 800efe8:	4b23      	ldr	r3, [pc, #140]	; (800f078 <ull_configmrxlut+0x108>)
 800efea:	2200      	movs	r2, #0
 800efec:	4923      	ldr	r1, [pc, #140]	; (800f07c <ull_configmrxlut+0x10c>)
 800efee:	4620      	mov	r0, r4
 800eff0:	f7ff fef2 	bl	800edd8 <dwt_write32bitoffsetreg>
 800eff4:	465b      	mov	r3, fp
 800eff6:	2200      	movs	r2, #0
 800eff8:	4921      	ldr	r1, [pc, #132]	; (800f080 <ull_configmrxlut+0x110>)
 800effa:	4620      	mov	r0, r4
 800effc:	f7ff feec 	bl	800edd8 <dwt_write32bitoffsetreg>
 800f000:	4653      	mov	r3, sl
 800f002:	2200      	movs	r2, #0
 800f004:	491f      	ldr	r1, [pc, #124]	; (800f084 <ull_configmrxlut+0x114>)
 800f006:	4620      	mov	r0, r4
 800f008:	f7ff fee6 	bl	800edd8 <dwt_write32bitoffsetreg>
 800f00c:	464b      	mov	r3, r9
 800f00e:	2200      	movs	r2, #0
 800f010:	491d      	ldr	r1, [pc, #116]	; (800f088 <ull_configmrxlut+0x118>)
 800f012:	4620      	mov	r0, r4
 800f014:	f7ff fee0 	bl	800edd8 <dwt_write32bitoffsetreg>
 800f018:	4643      	mov	r3, r8
 800f01a:	2200      	movs	r2, #0
 800f01c:	491b      	ldr	r1, [pc, #108]	; (800f08c <ull_configmrxlut+0x11c>)
 800f01e:	4620      	mov	r0, r4
 800f020:	f7ff feda 	bl	800edd8 <dwt_write32bitoffsetreg>
 800f024:	463b      	mov	r3, r7
 800f026:	2200      	movs	r2, #0
 800f028:	4919      	ldr	r1, [pc, #100]	; (800f090 <ull_configmrxlut+0x120>)
 800f02a:	4620      	mov	r0, r4
 800f02c:	f7ff fed4 	bl	800edd8 <dwt_write32bitoffsetreg>
 800f030:	4633      	mov	r3, r6
 800f032:	2200      	movs	r2, #0
 800f034:	4917      	ldr	r1, [pc, #92]	; (800f094 <ull_configmrxlut+0x124>)
 800f036:	4620      	mov	r0, r4
 800f038:	f7ff fece 	bl	800edd8 <dwt_write32bitoffsetreg>
 800f03c:	462b      	mov	r3, r5
 800f03e:	2200      	movs	r2, #0
 800f040:	4915      	ldr	r1, [pc, #84]	; (800f098 <ull_configmrxlut+0x128>)
 800f042:	4620      	mov	r0, r4
 800f044:	f7ff fec8 	bl	800edd8 <dwt_write32bitoffsetreg>
 800f048:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f04c:	00039ff6 	.word	0x00039ff6
 800f050:	00055ffe 	.word	0x00055ffe
 800f054:	00039dfe 	.word	0x00039dfe
 800f058:	00039c7e 	.word	0x00039c7e
 800f05c:	00038efe 	.word	0x00038efe
 800f060:	0003876e 	.word	0x0003876e
 800f064:	0003803e 	.word	0x0003803e
 800f068:	0005407e 	.word	0x0005407e
 800f06c:	0003001c 	.word	0x0003001c
 800f070:	1a491248 	.word	0x1a491248
 800f074:	00030020 	.word	0x00030020
 800f078:	2db248db 	.word	0x2db248db
 800f07c:	00030024 	.word	0x00030024
 800f080:	0003002c 	.word	0x0003002c
 800f084:	00030030 	.word	0x00030030
 800f088:	00030034 	.word	0x00030034
 800f08c:	00030038 	.word	0x00030038
 800f090:	0003003c 	.word	0x0003003c
 800f094:	00030040 	.word	0x00030040
 800f098:	00030044 	.word	0x00030044

0800f09c <ull_disable_rftx_blocks>:
 800f09c:	b508      	push	{r3, lr}
 800f09e:	2300      	movs	r3, #0
 800f0a0:	461a      	mov	r2, r3
 800f0a2:	4902      	ldr	r1, [pc, #8]	; (800f0ac <ull_disable_rftx_blocks+0x10>)
 800f0a4:	f7ff fe98 	bl	800edd8 <dwt_write32bitoffsetreg>
 800f0a8:	bd08      	pop	{r3, pc}
 800f0aa:	bf00      	nop
 800f0ac:	00070004 	.word	0x00070004

0800f0b0 <ull_disable_rf_tx>:
 800f0b0:	b538      	push	{r3, r4, r5, lr}
 800f0b2:	4604      	mov	r4, r0
 800f0b4:	460d      	mov	r5, r1
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	461a      	mov	r2, r3
 800f0ba:	490a      	ldr	r1, [pc, #40]	; (800f0e4 <ull_disable_rf_tx+0x34>)
 800f0bc:	f7ff fe8c 	bl	800edd8 <dwt_write32bitoffsetreg>
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	461a      	mov	r2, r3
 800f0c4:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 800f0c8:	4620      	mov	r0, r4
 800f0ca:	f7ff fe85 	bl	800edd8 <dwt_write32bitoffsetreg>
 800f0ce:	b905      	cbnz	r5, 800f0d2 <ull_disable_rf_tx+0x22>
 800f0d0:	bd38      	pop	{r3, r4, r5, pc}
 800f0d2:	f04f 53e0 	mov.w	r3, #469762048	; 0x1c000000
 800f0d6:	2200      	movs	r2, #0
 800f0d8:	4903      	ldr	r1, [pc, #12]	; (800f0e8 <ull_disable_rf_tx+0x38>)
 800f0da:	4620      	mov	r0, r4
 800f0dc:	f7ff fe7c 	bl	800edd8 <dwt_write32bitoffsetreg>
 800f0e0:	e7f6      	b.n	800f0d0 <ull_disable_rf_tx+0x20>
 800f0e2:	bf00      	nop
 800f0e4:	00070048 	.word	0x00070048
 800f0e8:	00070014 	.word	0x00070014

0800f0ec <ull_repeated_cw>:
 800f0ec:	b570      	push	{r4, r5, r6, lr}
 800f0ee:	4606      	mov	r6, r0
 800f0f0:	460c      	mov	r4, r1
 800f0f2:	4615      	mov	r5, r2
 800f0f4:	2100      	movs	r1, #0
 800f0f6:	f7ff febf 	bl	800ee78 <ull_setfinegraintxseq>
 800f0fa:	2d0f      	cmp	r5, #15
 800f0fc:	bfa8      	it	ge
 800f0fe:	250f      	movge	r5, #15
 800f100:	1e63      	subs	r3, r4, #1
 800f102:	2b03      	cmp	r3, #3
 800f104:	bf28      	it	cs
 800f106:	2404      	movcs	r4, #4
 800f108:	2310      	movs	r3, #16
 800f10a:	4123      	asrs	r3, r4
 800f10c:	2200      	movs	r2, #0
 800f10e:	4907      	ldr	r1, [pc, #28]	; (800f12c <ull_repeated_cw+0x40>)
 800f110:	4630      	mov	r0, r6
 800f112:	f7ff fe61 	bl	800edd8 <dwt_write32bitoffsetreg>
 800f116:	1e63      	subs	r3, r4, #1
 800f118:	009b      	lsls	r3, r3, #2
 800f11a:	fa05 f303 	lsl.w	r3, r5, r3
 800f11e:	2200      	movs	r2, #0
 800f120:	4903      	ldr	r1, [pc, #12]	; (800f130 <ull_repeated_cw+0x44>)
 800f122:	4630      	mov	r0, r6
 800f124:	f7ff fe58 	bl	800edd8 <dwt_write32bitoffsetreg>
 800f128:	bd70      	pop	{r4, r5, r6, pc}
 800f12a:	bf00      	nop
 800f12c:	00070028 	.word	0x00070028
 800f130:	00080018 	.word	0x00080018

0800f134 <ull_readrxdata>:
 800f134:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f136:	b083      	sub	sp, #12
 800f138:	6d04      	ldr	r4, [r0, #80]	; 0x50
 800f13a:	7ba4      	ldrb	r4, [r4, #14]
 800f13c:	2c03      	cmp	r4, #3
 800f13e:	bf0c      	ite	eq
 800f140:	f44f 1c98 	moveq.w	ip, #1245184	; 0x130000
 800f144:	f44f 1c90 	movne.w	ip, #1179648	; 0x120000
 800f148:	189c      	adds	r4, r3, r2
 800f14a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800f14e:	da19      	bge.n	800f184 <ull_readrxdata+0x50>
 800f150:	461d      	mov	r5, r3
 800f152:	4616      	mov	r6, r2
 800f154:	460f      	mov	r7, r1
 800f156:	4604      	mov	r4, r0
 800f158:	2b7f      	cmp	r3, #127	; 0x7f
 800f15a:	d915      	bls.n	800f188 <ull_readrxdata+0x54>
 800f15c:	ea4f 431c 	mov.w	r3, ip, lsr #16
 800f160:	2200      	movs	r2, #0
 800f162:	490d      	ldr	r1, [pc, #52]	; (800f198 <ull_readrxdata+0x64>)
 800f164:	f7ff fe38 	bl	800edd8 <dwt_write32bitoffsetreg>
 800f168:	462b      	mov	r3, r5
 800f16a:	2200      	movs	r2, #0
 800f16c:	490b      	ldr	r1, [pc, #44]	; (800f19c <ull_readrxdata+0x68>)
 800f16e:	4620      	mov	r0, r4
 800f170:	f7ff fe32 	bl	800edd8 <dwt_write32bitoffsetreg>
 800f174:	9700      	str	r7, [sp, #0]
 800f176:	4633      	mov	r3, r6
 800f178:	2200      	movs	r2, #0
 800f17a:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800f17e:	4620      	mov	r0, r4
 800f180:	f7ff f941 	bl	800e406 <dwt_readfromdevice>
 800f184:	b003      	add	sp, #12
 800f186:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f188:	9100      	str	r1, [sp, #0]
 800f18a:	4613      	mov	r3, r2
 800f18c:	462a      	mov	r2, r5
 800f18e:	4661      	mov	r1, ip
 800f190:	f7ff f939 	bl	800e406 <dwt_readfromdevice>
 800f194:	e7f6      	b.n	800f184 <ull_readrxdata+0x50>
 800f196:	bf00      	nop
 800f198:	001f0004 	.word	0x001f0004
 800f19c:	001f0008 	.word	0x001f0008

0800f1a0 <dwt_write8bitoffsetreg>:
 800f1a0:	b510      	push	{r4, lr}
 800f1a2:	b084      	sub	sp, #16
 800f1a4:	ac04      	add	r4, sp, #16
 800f1a6:	f804 3d01 	strb.w	r3, [r4, #-1]!
 800f1aa:	9400      	str	r4, [sp, #0]
 800f1ac:	2301      	movs	r3, #1
 800f1ae:	b292      	uxth	r2, r2
 800f1b0:	f7ff fd9c 	bl	800ecec <dwt_writetodevice>
 800f1b4:	b004      	add	sp, #16
 800f1b6:	bd10      	pop	{r4, pc}

0800f1b8 <ull_getframelength>:
 800f1b8:	b510      	push	{r4, lr}
 800f1ba:	4604      	mov	r4, r0
 800f1bc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800f1be:	7b9b      	ldrb	r3, [r3, #14]
 800f1c0:	2b01      	cmp	r3, #1
 800f1c2:	d013      	beq.n	800f1ec <ull_getframelength+0x34>
 800f1c4:	2b03      	cmp	r3, #3
 800f1c6:	d11d      	bne.n	800f204 <ull_getframelength+0x4c>
 800f1c8:	23f0      	movs	r3, #240	; 0xf0
 800f1ca:	2200      	movs	r2, #0
 800f1cc:	4912      	ldr	r1, [pc, #72]	; (800f218 <ull_getframelength+0x60>)
 800f1ce:	f7ff ffe7 	bl	800f1a0 <dwt_write8bitoffsetreg>
 800f1d2:	2200      	movs	r2, #0
 800f1d4:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800f1d8:	4620      	mov	r0, r4
 800f1da:	f7ff f934 	bl	800e446 <dwt_read16bitoffsetreg>
 800f1de:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f1e0:	7ada      	ldrb	r2, [r3, #11]
 800f1e2:	b1a2      	cbz	r2, 800f20e <ull_getframelength+0x56>
 800f1e4:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800f1e8:	83d8      	strh	r0, [r3, #30]
 800f1ea:	bd10      	pop	{r4, pc}
 800f1ec:	230f      	movs	r3, #15
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	4909      	ldr	r1, [pc, #36]	; (800f218 <ull_getframelength+0x60>)
 800f1f2:	f7ff ffd5 	bl	800f1a0 <dwt_write8bitoffsetreg>
 800f1f6:	2200      	movs	r2, #0
 800f1f8:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 800f1fc:	4620      	mov	r0, r4
 800f1fe:	f7ff f922 	bl	800e446 <dwt_read16bitoffsetreg>
 800f202:	e7ec      	b.n	800f1de <ull_getframelength+0x26>
 800f204:	2200      	movs	r2, #0
 800f206:	214c      	movs	r1, #76	; 0x4c
 800f208:	f7ff f91d 	bl	800e446 <dwt_read16bitoffsetreg>
 800f20c:	e7e7      	b.n	800f1de <ull_getframelength+0x26>
 800f20e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800f212:	83d8      	strh	r0, [r3, #30]
 800f214:	e7e9      	b.n	800f1ea <ull_getframelength+0x32>
 800f216:	bf00      	nop
 800f218:	00010018 	.word	0x00010018

0800f21c <_dwt_clear_db_events>:
 800f21c:	b510      	push	{r4, lr}
 800f21e:	4604      	mov	r4, r0
 800f220:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800f222:	7b9b      	ldrb	r3, [r3, #14]
 800f224:	2b01      	cmp	r3, #1
 800f226:	d004      	beq.n	800f232 <_dwt_clear_db_events+0x16>
 800f228:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f22a:	7b9b      	ldrb	r3, [r3, #14]
 800f22c:	2b03      	cmp	r3, #3
 800f22e:	d006      	beq.n	800f23e <_dwt_clear_db_events+0x22>
 800f230:	bd10      	pop	{r4, pc}
 800f232:	230f      	movs	r3, #15
 800f234:	2200      	movs	r2, #0
 800f236:	4905      	ldr	r1, [pc, #20]	; (800f24c <_dwt_clear_db_events+0x30>)
 800f238:	f7ff ffb2 	bl	800f1a0 <dwt_write8bitoffsetreg>
 800f23c:	e7f4      	b.n	800f228 <_dwt_clear_db_events+0xc>
 800f23e:	23f0      	movs	r3, #240	; 0xf0
 800f240:	2200      	movs	r2, #0
 800f242:	4902      	ldr	r1, [pc, #8]	; (800f24c <_dwt_clear_db_events+0x30>)
 800f244:	4620      	mov	r0, r4
 800f246:	f7ff ffab 	bl	800f1a0 <dwt_write8bitoffsetreg>
 800f24a:	e7f1      	b.n	800f230 <_dwt_clear_db_events+0x14>
 800f24c:	00010018 	.word	0x00010018

0800f250 <ull_clearaonconfig>:
 800f250:	b538      	push	{r3, r4, r5, lr}
 800f252:	4604      	mov	r4, r0
 800f254:	2300      	movs	r3, #0
 800f256:	461a      	mov	r2, r3
 800f258:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 800f25c:	f7ff fd51 	bl	800ed02 <dwt_write16bitoffsetreg>
 800f260:	2300      	movs	r3, #0
 800f262:	461a      	mov	r2, r3
 800f264:	4908      	ldr	r1, [pc, #32]	; (800f288 <ull_clearaonconfig+0x38>)
 800f266:	4620      	mov	r0, r4
 800f268:	f7ff ff9a 	bl	800f1a0 <dwt_write8bitoffsetreg>
 800f26c:	4d07      	ldr	r5, [pc, #28]	; (800f28c <ull_clearaonconfig+0x3c>)
 800f26e:	2300      	movs	r3, #0
 800f270:	461a      	mov	r2, r3
 800f272:	4629      	mov	r1, r5
 800f274:	4620      	mov	r0, r4
 800f276:	f7ff ff93 	bl	800f1a0 <dwt_write8bitoffsetreg>
 800f27a:	2302      	movs	r3, #2
 800f27c:	2200      	movs	r2, #0
 800f27e:	4629      	mov	r1, r5
 800f280:	4620      	mov	r0, r4
 800f282:	f7ff ff8d 	bl	800f1a0 <dwt_write8bitoffsetreg>
 800f286:	bd38      	pop	{r3, r4, r5, pc}
 800f288:	000a0014 	.word	0x000a0014
 800f28c:	000a0004 	.word	0x000a0004

0800f290 <ull_configeventcounters>:
 800f290:	b538      	push	{r3, r4, r5, lr}
 800f292:	4605      	mov	r5, r0
 800f294:	460c      	mov	r4, r1
 800f296:	2302      	movs	r3, #2
 800f298:	2200      	movs	r2, #0
 800f29a:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800f29e:	f7ff ff7f 	bl	800f1a0 <dwt_write8bitoffsetreg>
 800f2a2:	b904      	cbnz	r4, 800f2a6 <ull_configeventcounters+0x16>
 800f2a4:	bd38      	pop	{r3, r4, r5, pc}
 800f2a6:	2301      	movs	r3, #1
 800f2a8:	2200      	movs	r2, #0
 800f2aa:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800f2ae:	4628      	mov	r0, r5
 800f2b0:	f7ff ff76 	bl	800f1a0 <dwt_write8bitoffsetreg>
 800f2b4:	e7f6      	b.n	800f2a4 <ull_configeventcounters+0x14>
	...

0800f2b8 <ull_aon_read>:
 800f2b8:	b538      	push	{r3, r4, r5, lr}
 800f2ba:	4604      	mov	r4, r0
 800f2bc:	460b      	mov	r3, r1
 800f2be:	2200      	movs	r2, #0
 800f2c0:	490a      	ldr	r1, [pc, #40]	; (800f2ec <ull_aon_read+0x34>)
 800f2c2:	f7ff fd1e 	bl	800ed02 <dwt_write16bitoffsetreg>
 800f2c6:	4d0a      	ldr	r5, [pc, #40]	; (800f2f0 <ull_aon_read+0x38>)
 800f2c8:	2388      	movs	r3, #136	; 0x88
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	4629      	mov	r1, r5
 800f2ce:	4620      	mov	r0, r4
 800f2d0:	f7ff ff66 	bl	800f1a0 <dwt_write8bitoffsetreg>
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	461a      	mov	r2, r3
 800f2d8:	4629      	mov	r1, r5
 800f2da:	4620      	mov	r0, r4
 800f2dc:	f7ff ff60 	bl	800f1a0 <dwt_write8bitoffsetreg>
 800f2e0:	2200      	movs	r2, #0
 800f2e2:	4904      	ldr	r1, [pc, #16]	; (800f2f4 <ull_aon_read+0x3c>)
 800f2e4:	4620      	mov	r0, r4
 800f2e6:	f7ff f8ed 	bl	800e4c4 <dwt_read8bitoffsetreg>
 800f2ea:	bd38      	pop	{r3, r4, r5, pc}
 800f2ec:	000a000c 	.word	0x000a000c
 800f2f0:	000a0004 	.word	0x000a0004
 800f2f4:	000a0008 	.word	0x000a0008

0800f2f8 <ull_aon_write>:
 800f2f8:	b570      	push	{r4, r5, r6, lr}
 800f2fa:	4604      	mov	r4, r0
 800f2fc:	460b      	mov	r3, r1
 800f2fe:	4615      	mov	r5, r2
 800f300:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800f304:	bf34      	ite	cc
 800f306:	2600      	movcc	r6, #0
 800f308:	2620      	movcs	r6, #32
 800f30a:	2200      	movs	r2, #0
 800f30c:	490b      	ldr	r1, [pc, #44]	; (800f33c <ull_aon_write+0x44>)
 800f30e:	f7ff fcf8 	bl	800ed02 <dwt_write16bitoffsetreg>
 800f312:	462b      	mov	r3, r5
 800f314:	2200      	movs	r2, #0
 800f316:	490a      	ldr	r1, [pc, #40]	; (800f340 <ull_aon_write+0x48>)
 800f318:	4620      	mov	r0, r4
 800f31a:	f7ff ff41 	bl	800f1a0 <dwt_write8bitoffsetreg>
 800f31e:	4d09      	ldr	r5, [pc, #36]	; (800f344 <ull_aon_write+0x4c>)
 800f320:	f046 0390 	orr.w	r3, r6, #144	; 0x90
 800f324:	2200      	movs	r2, #0
 800f326:	4629      	mov	r1, r5
 800f328:	4620      	mov	r0, r4
 800f32a:	f7ff ff39 	bl	800f1a0 <dwt_write8bitoffsetreg>
 800f32e:	2300      	movs	r3, #0
 800f330:	461a      	mov	r2, r3
 800f332:	4629      	mov	r1, r5
 800f334:	4620      	mov	r0, r4
 800f336:	f7ff ff33 	bl	800f1a0 <dwt_write8bitoffsetreg>
 800f33a:	bd70      	pop	{r4, r5, r6, pc}
 800f33c:	000a000c 	.word	0x000a000c
 800f340:	000a0010 	.word	0x000a0010
 800f344:	000a0004 	.word	0x000a0004

0800f348 <ull_configuresleep>:
 800f348:	b570      	push	{r4, r5, r6, lr}
 800f34a:	4604      	mov	r4, r0
 800f34c:	460d      	mov	r5, r1
 800f34e:	4616      	mov	r6, r2
 800f350:	2200      	movs	r2, #0
 800f352:	f240 110b 	movw	r1, #267	; 0x10b
 800f356:	f7ff ffcf 	bl	800f2f8 <ull_aon_write>
 800f35a:	f44f 7182 	mov.w	r1, #260	; 0x104
 800f35e:	4620      	mov	r0, r4
 800f360:	f7ff ffaa 	bl	800f2b8 <ull_aon_read>
 800f364:	f000 021f 	and.w	r2, r0, #31
 800f368:	f44f 7182 	mov.w	r1, #260	; 0x104
 800f36c:	4620      	mov	r0, r4
 800f36e:	f7ff ffc3 	bl	800f2f8 <ull_aon_write>
 800f372:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f374:	8a1a      	ldrh	r2, [r3, #16]
 800f376:	4315      	orrs	r5, r2
 800f378:	821d      	strh	r5, [r3, #16]
 800f37a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f37c:	8a13      	ldrh	r3, [r2, #16]
 800f37e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800f382:	bf1c      	itt	ne
 800f384:	f423 6300 	bicne.w	r3, r3, #2048	; 0x800
 800f388:	8213      	strhne	r3, [r2, #16]
 800f38a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f38c:	8a1b      	ldrh	r3, [r3, #16]
 800f38e:	2200      	movs	r2, #0
 800f390:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 800f394:	4620      	mov	r0, r4
 800f396:	f7ff fcb4 	bl	800ed02 <dwt_write16bitoffsetreg>
 800f39a:	4633      	mov	r3, r6
 800f39c:	2200      	movs	r2, #0
 800f39e:	4902      	ldr	r1, [pc, #8]	; (800f3a8 <ull_configuresleep+0x60>)
 800f3a0:	4620      	mov	r0, r4
 800f3a2:	f7ff fefd 	bl	800f1a0 <dwt_write8bitoffsetreg>
 800f3a6:	bd70      	pop	{r4, r5, r6, pc}
 800f3a8:	000a0014 	.word	0x000a0014

0800f3ac <ull_setplenfine>:
 800f3ac:	b508      	push	{r3, lr}
 800f3ae:	460b      	mov	r3, r1
 800f3b0:	2201      	movs	r2, #1
 800f3b2:	2124      	movs	r1, #36	; 0x24
 800f3b4:	f7ff fef4 	bl	800f1a0 <dwt_write8bitoffsetreg>
 800f3b8:	bd08      	pop	{r3, pc}
	...

0800f3bc <ull_update_nonce_GCM>:
 800f3bc:	b500      	push	{lr}
 800f3be:	b083      	sub	sp, #12
 800f3c0:	9100      	str	r1, [sp, #0]
 800f3c2:	230c      	movs	r3, #12
 800f3c4:	2200      	movs	r2, #0
 800f3c6:	4903      	ldr	r1, [pc, #12]	; (800f3d4 <ull_update_nonce_GCM+0x18>)
 800f3c8:	f7ff fc90 	bl	800ecec <dwt_writetodevice>
 800f3cc:	b003      	add	sp, #12
 800f3ce:	f85d fb04 	ldr.w	pc, [sp], #4
 800f3d2:	bf00      	nop
 800f3d4:	00010034 	.word	0x00010034

0800f3d8 <ull_update_nonce_CCM>:
 800f3d8:	b500      	push	{lr}
 800f3da:	b087      	sub	sp, #28
 800f3dc:	4613      	mov	r3, r2
 800f3de:	7a8a      	ldrb	r2, [r1, #10]
 800f3e0:	f88d 2008 	strb.w	r2, [sp, #8]
 800f3e4:	7a4a      	ldrb	r2, [r1, #9]
 800f3e6:	f88d 2009 	strb.w	r2, [sp, #9]
 800f3ea:	7a0a      	ldrb	r2, [r1, #8]
 800f3ec:	f88d 200a 	strb.w	r2, [sp, #10]
 800f3f0:	79ca      	ldrb	r2, [r1, #7]
 800f3f2:	f88d 200b 	strb.w	r2, [sp, #11]
 800f3f6:	798a      	ldrb	r2, [r1, #6]
 800f3f8:	f88d 200c 	strb.w	r2, [sp, #12]
 800f3fc:	794a      	ldrb	r2, [r1, #5]
 800f3fe:	f88d 200d 	strb.w	r2, [sp, #13]
 800f402:	790a      	ldrb	r2, [r1, #4]
 800f404:	f88d 200e 	strb.w	r2, [sp, #14]
 800f408:	78ca      	ldrb	r2, [r1, #3]
 800f40a:	f88d 200f 	strb.w	r2, [sp, #15]
 800f40e:	788a      	ldrb	r2, [r1, #2]
 800f410:	f88d 2010 	strb.w	r2, [sp, #16]
 800f414:	784a      	ldrb	r2, [r1, #1]
 800f416:	f88d 2011 	strb.w	r2, [sp, #17]
 800f41a:	780a      	ldrb	r2, [r1, #0]
 800f41c:	f88d 2012 	strb.w	r2, [sp, #18]
 800f420:	2200      	movs	r2, #0
 800f422:	f88d 2013 	strb.w	r2, [sp, #19]
 800f426:	f88d 3014 	strb.w	r3, [sp, #20]
 800f42a:	0a1b      	lsrs	r3, r3, #8
 800f42c:	f88d 3015 	strb.w	r3, [sp, #21]
 800f430:	7b0b      	ldrb	r3, [r1, #12]
 800f432:	f88d 3016 	strb.w	r3, [sp, #22]
 800f436:	7acb      	ldrb	r3, [r1, #11]
 800f438:	f88d 3017 	strb.w	r3, [sp, #23]
 800f43c:	ab02      	add	r3, sp, #8
 800f43e:	9300      	str	r3, [sp, #0]
 800f440:	2310      	movs	r3, #16
 800f442:	4903      	ldr	r1, [pc, #12]	; (800f450 <ull_update_nonce_CCM+0x78>)
 800f444:	f7ff fc52 	bl	800ecec <dwt_writetodevice>
 800f448:	b007      	add	sp, #28
 800f44a:	f85d fb04 	ldr.w	pc, [sp], #4
 800f44e:	bf00      	nop
 800f450:	00010034 	.word	0x00010034

0800f454 <ull_writetxdata>:
 800f454:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f456:	b083      	sub	sp, #12
 800f458:	185c      	adds	r4, r3, r1
 800f45a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800f45e:	da24      	bge.n	800f4aa <ull_writetxdata+0x56>
 800f460:	461c      	mov	r4, r3
 800f462:	4617      	mov	r7, r2
 800f464:	460e      	mov	r6, r1
 800f466:	4605      	mov	r5, r0
 800f468:	2b7f      	cmp	r3, #127	; 0x7f
 800f46a:	d915      	bls.n	800f498 <ull_writetxdata+0x44>
 800f46c:	2314      	movs	r3, #20
 800f46e:	2200      	movs	r2, #0
 800f470:	490f      	ldr	r1, [pc, #60]	; (800f4b0 <ull_writetxdata+0x5c>)
 800f472:	f7ff fcb1 	bl	800edd8 <dwt_write32bitoffsetreg>
 800f476:	4623      	mov	r3, r4
 800f478:	2200      	movs	r2, #0
 800f47a:	490e      	ldr	r1, [pc, #56]	; (800f4b4 <ull_writetxdata+0x60>)
 800f47c:	4628      	mov	r0, r5
 800f47e:	f7ff fcab 	bl	800edd8 <dwt_write32bitoffsetreg>
 800f482:	9700      	str	r7, [sp, #0]
 800f484:	4633      	mov	r3, r6
 800f486:	2200      	movs	r2, #0
 800f488:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800f48c:	4628      	mov	r0, r5
 800f48e:	f7ff fc2d 	bl	800ecec <dwt_writetodevice>
 800f492:	2000      	movs	r0, #0
 800f494:	b003      	add	sp, #12
 800f496:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f498:	9200      	str	r2, [sp, #0]
 800f49a:	460b      	mov	r3, r1
 800f49c:	4622      	mov	r2, r4
 800f49e:	f44f 11a0 	mov.w	r1, #1310720	; 0x140000
 800f4a2:	f7ff fc23 	bl	800ecec <dwt_writetodevice>
 800f4a6:	2000      	movs	r0, #0
 800f4a8:	e7f4      	b.n	800f494 <ull_writetxdata+0x40>
 800f4aa:	f04f 30ff 	mov.w	r0, #4294967295
 800f4ae:	e7f1      	b.n	800f494 <ull_writetxdata+0x40>
 800f4b0:	001f0004 	.word	0x001f0004
 800f4b4:	001f0008 	.word	0x001f0008

0800f4b8 <ull_signal_rx_buff_free>:
 800f4b8:	b510      	push	{r4, lr}
 800f4ba:	b082      	sub	sp, #8
 800f4bc:	4604      	mov	r4, r0
 800f4be:	2302      	movs	r3, #2
 800f4c0:	9301      	str	r3, [sp, #4]
 800f4c2:	2200      	movs	r2, #0
 800f4c4:	9200      	str	r2, [sp, #0]
 800f4c6:	4613      	mov	r3, r2
 800f4c8:	2113      	movs	r1, #19
 800f4ca:	f7fe ff1e 	bl	800e30a <dwt_xfer3xxx>
 800f4ce:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f4d0:	7b9a      	ldrb	r2, [r3, #14]
 800f4d2:	2a03      	cmp	r2, #3
 800f4d4:	bf0c      	ite	eq
 800f4d6:	2201      	moveq	r2, #1
 800f4d8:	2203      	movne	r2, #3
 800f4da:	739a      	strb	r2, [r3, #14]
 800f4dc:	b002      	add	sp, #8
 800f4de:	bd10      	pop	{r4, pc}

0800f4e0 <ull_isr>:
 800f4e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4e4:	4604      	mov	r4, r0
 800f4e6:	2200      	movs	r2, #0
 800f4e8:	f44f 11f8 	mov.w	r1, #2031616	; 0x1f0000
 800f4ec:	f7fe ffea 	bl	800e4c4 <dwt_read8bitoffsetreg>
 800f4f0:	4605      	mov	r5, r0
 800f4f2:	2200      	movs	r2, #0
 800f4f4:	2144      	movs	r1, #68	; 0x44
 800f4f6:	4620      	mov	r0, r4
 800f4f8:	f7fe ff8f 	bl	800e41a <dwt_read32bitoffsetreg>
 800f4fc:	4606      	mov	r6, r0
 800f4fe:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f500:	2200      	movs	r2, #0
 800f502:	83da      	strh	r2, [r3, #30]
 800f504:	f883 2020 	strb.w	r2, [r3, #32]
 800f508:	619a      	str	r2, [r3, #24]
 800f50a:	839a      	strh	r2, [r3, #28]
 800f50c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800f510:	625a      	str	r2, [r3, #36]	; 0x24
 800f512:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f514:	625c      	str	r4, [r3, #36]	; 0x24
 800f516:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f518:	7b9f      	ldrb	r7, [r3, #14]
 800f51a:	2f00      	cmp	r7, #0
 800f51c:	d17f      	bne.n	800f61e <ull_isr+0x13e>
 800f51e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f520:	619e      	str	r6, [r3, #24]
 800f522:	f8d4 8050 	ldr.w	r8, [r4, #80]	; 0x50
 800f526:	f898 3015 	ldrb.w	r3, [r8, #21]
 800f52a:	f003 0303 	and.w	r3, r3, #3
 800f52e:	2b03      	cmp	r3, #3
 800f530:	f000 8090 	beq.w	800f654 <ull_isr+0x174>
 800f534:	f015 0f80 	tst.w	r5, #128	; 0x80
 800f538:	f040 8093 	bne.w	800f662 <ull_isr+0x182>
 800f53c:	f015 0f01 	tst.w	r5, #1
 800f540:	f040 80c1 	bne.w	800f6c6 <ull_isr+0x1e6>
 800f544:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f548:	d00b      	beq.n	800f562 <ull_isr+0x82>
 800f54a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f54c:	b113      	cbz	r3, 800f554 <ull_isr+0x74>
 800f54e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800f550:	3018      	adds	r0, #24
 800f552:	4798      	blx	r3
 800f554:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800f558:	2202      	movs	r2, #2
 800f55a:	2144      	movs	r1, #68	; 0x44
 800f55c:	4620      	mov	r0, r4
 800f55e:	f7ff fbd0 	bl	800ed02 <dwt_write16bitoffsetreg>
 800f562:	f015 0f08 	tst.w	r5, #8
 800f566:	d107      	bne.n	800f578 <ull_isr+0x98>
 800f568:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f56a:	7b9b      	ldrb	r3, [r3, #14]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	f000 80ea 	beq.w	800f746 <ull_isr+0x266>
 800f572:	2f00      	cmp	r7, #0
 800f574:	f000 80e7 	beq.w	800f746 <ull_isr+0x266>
 800f578:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f57a:	2200      	movs	r2, #0
 800f57c:	f883 2020 	strb.w	r2, [r3, #32]
 800f580:	f416 2f80 	tst.w	r6, #262144	; 0x40000
 800f584:	f000 80ad 	beq.w	800f6e2 <ull_isr+0x202>
 800f588:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f58a:	f892 3020 	ldrb.w	r3, [r2, #32]
 800f58e:	f043 0308 	orr.w	r3, r3, #8
 800f592:	f882 3020 	strb.w	r3, [r2, #32]
 800f596:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 800f59a:	f016 5f80 	tst.w	r6, #268435456	; 0x10000000
 800f59e:	d008      	beq.n	800f5b2 <ull_isr+0xd2>
 800f5a0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f5a2:	f892 3020 	ldrb.w	r3, [r2, #32]
 800f5a6:	f043 0310 	orr.w	r3, r3, #16
 800f5aa:	f882 3020 	strb.w	r3, [r2, #32]
 800f5ae:	f047 5780 	orr.w	r7, r7, #268435456	; 0x10000000
 800f5b2:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 800f5b6:	d006      	beq.n	800f5c6 <ull_isr+0xe6>
 800f5b8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f5ba:	7d53      	ldrb	r3, [r2, #21]
 800f5bc:	f003 0303 	and.w	r3, r3, #3
 800f5c0:	2b03      	cmp	r3, #3
 800f5c2:	f000 809a 	beq.w	800f6fa <ull_isr+0x21a>
 800f5c6:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 800f5ca:	f040 80a2 	bne.w	800f712 <ull_isr+0x232>
 800f5ce:	f447 43de 	orr.w	r3, r7, #28416	; 0x6f00
 800f5d2:	2200      	movs	r2, #0
 800f5d4:	2144      	movs	r1, #68	; 0x44
 800f5d6:	4620      	mov	r0, r4
 800f5d8:	f7ff fbfe 	bl	800edd8 <dwt_write32bitoffsetreg>
 800f5dc:	4620      	mov	r0, r4
 800f5de:	f7ff fe1d 	bl	800f21c <_dwt_clear_db_events>
 800f5e2:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800f5e4:	8bc3      	ldrh	r3, [r0, #30]
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	f040 80a2 	bne.w	800f730 <ull_isr+0x250>
 800f5ec:	7d43      	ldrb	r3, [r0, #21]
 800f5ee:	f003 0303 	and.w	r3, r3, #3
 800f5f2:	2b03      	cmp	r3, #3
 800f5f4:	f000 809c 	beq.w	800f730 <ull_isr+0x250>
 800f5f8:	6983      	ldr	r3, [r0, #24]
 800f5fa:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800f5fe:	6183      	str	r3, [r0, #24]
 800f600:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f602:	6993      	ldr	r3, [r2, #24]
 800f604:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f608:	6193      	str	r3, [r2, #24]
 800f60a:	69e3      	ldr	r3, [r4, #28]
 800f60c:	b113      	cbz	r3, 800f614 <ull_isr+0x134>
 800f60e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800f610:	3018      	adds	r0, #24
 800f612:	4798      	blx	r3
 800f614:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f616:	2200      	movs	r2, #0
 800f618:	f883 2020 	strb.w	r2, [r3, #32]
 800f61c:	e08c      	b.n	800f738 <ull_isr+0x258>
 800f61e:	496d      	ldr	r1, [pc, #436]	; (800f7d4 <ull_isr+0x2f4>)
 800f620:	4620      	mov	r0, r4
 800f622:	f7fe ff4f 	bl	800e4c4 <dwt_read8bitoffsetreg>
 800f626:	4607      	mov	r7, r0
 800f628:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f62a:	7b9b      	ldrb	r3, [r3, #14]
 800f62c:	2b03      	cmp	r3, #3
 800f62e:	bf08      	it	eq
 800f630:	f3c0 1707 	ubfxeq	r7, r0, #4, #8
 800f634:	f017 0f01 	tst.w	r7, #1
 800f638:	bf18      	it	ne
 800f63a:	f446 4680 	orrne.w	r6, r6, #16384	; 0x4000
 800f63e:	f017 0f02 	tst.w	r7, #2
 800f642:	bf18      	it	ne
 800f644:	f446 5600 	orrne.w	r6, r6, #8192	; 0x2000
 800f648:	f017 0f04 	tst.w	r7, #4
 800f64c:	bf18      	it	ne
 800f64e:	f446 6680 	orrne.w	r6, r6, #1024	; 0x400
 800f652:	e764      	b.n	800f51e <ull_isr+0x3e>
 800f654:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 800f658:	bf1c      	itt	ne
 800f65a:	f045 0508 	orrne.w	r5, r5, #8
 800f65e:	b2ed      	uxtbne	r5, r5
 800f660:	e768      	b.n	800f534 <ull_isr+0x54>
 800f662:	2200      	movs	r2, #0
 800f664:	2148      	movs	r1, #72	; 0x48
 800f666:	4620      	mov	r0, r4
 800f668:	f7fe feed 	bl	800e446 <dwt_read16bitoffsetreg>
 800f66c:	f8a8 001c 	strh.w	r0, [r8, #28]
 800f670:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f672:	7d1a      	ldrb	r2, [r3, #20]
 800f674:	b11a      	cbz	r2, 800f67e <ull_isr+0x19e>
 800f676:	699a      	ldr	r2, [r3, #24]
 800f678:	f012 0f04 	tst.w	r2, #4
 800f67c:	d103      	bne.n	800f686 <ull_isr+0x1a6>
 800f67e:	8b9b      	ldrh	r3, [r3, #28]
 800f680:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800f684:	b18b      	cbz	r3, 800f6aa <ull_isr+0x1ca>
 800f686:	2304      	movs	r3, #4
 800f688:	2200      	movs	r2, #0
 800f68a:	2144      	movs	r1, #68	; 0x44
 800f68c:	4620      	mov	r0, r4
 800f68e:	f7ff fd87 	bl	800f1a0 <dwt_write8bitoffsetreg>
 800f692:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 800f696:	2200      	movs	r2, #0
 800f698:	2148      	movs	r1, #72	; 0x48
 800f69a:	4620      	mov	r0, r4
 800f69c:	f7ff fb31 	bl	800ed02 <dwt_write16bitoffsetreg>
 800f6a0:	6a23      	ldr	r3, [r4, #32]
 800f6a2:	b113      	cbz	r3, 800f6aa <ull_isr+0x1ca>
 800f6a4:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800f6a6:	3018      	adds	r0, #24
 800f6a8:	4798      	blx	r3
 800f6aa:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f6ac:	8b9b      	ldrh	r3, [r3, #28]
 800f6ae:	f413 7f80 	tst.w	r3, #256	; 0x100
 800f6b2:	f43f af43 	beq.w	800f53c <ull_isr+0x5c>
 800f6b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	2148      	movs	r1, #72	; 0x48
 800f6be:	4620      	mov	r0, r4
 800f6c0:	f7ff fb1f 	bl	800ed02 <dwt_write16bitoffsetreg>
 800f6c4:	e73a      	b.n	800f53c <ull_isr+0x5c>
 800f6c6:	23f8      	movs	r3, #248	; 0xf8
 800f6c8:	2200      	movs	r2, #0
 800f6ca:	2144      	movs	r1, #68	; 0x44
 800f6cc:	4620      	mov	r0, r4
 800f6ce:	f7ff fd67 	bl	800f1a0 <dwt_write8bitoffsetreg>
 800f6d2:	6923      	ldr	r3, [r4, #16]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	f43f af35 	beq.w	800f544 <ull_isr+0x64>
 800f6da:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800f6dc:	3018      	adds	r0, #24
 800f6de:	4798      	blx	r3
 800f6e0:	e730      	b.n	800f544 <ull_isr+0x64>
 800f6e2:	f416 6f80 	tst.w	r6, #1024	; 0x400
 800f6e6:	bf1f      	itttt	ne
 800f6e8:	6d22      	ldrne	r2, [r4, #80]	; 0x50
 800f6ea:	f892 3020 	ldrbne.w	r3, [r2, #32]
 800f6ee:	f043 0304 	orrne.w	r3, r3, #4
 800f6f2:	f882 3020 	strbne.w	r3, [r2, #32]
 800f6f6:	2700      	movs	r7, #0
 800f6f8:	e74f      	b.n	800f59a <ull_isr+0xba>
 800f6fa:	f892 3020 	ldrb.w	r3, [r2, #32]
 800f6fe:	f043 0302 	orr.w	r3, r3, #2
 800f702:	f882 3020 	strb.w	r3, [r2, #32]
 800f706:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f708:	2200      	movs	r2, #0
 800f70a:	83da      	strh	r2, [r3, #30]
 800f70c:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 800f710:	e75d      	b.n	800f5ce <ull_isr+0xee>
 800f712:	4620      	mov	r0, r4
 800f714:	f7ff fd50 	bl	800f1b8 <ull_getframelength>
 800f718:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 800f71c:	f43f af57 	beq.w	800f5ce <ull_isr+0xee>
 800f720:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f722:	f892 3020 	ldrb.w	r3, [r2, #32]
 800f726:	f043 0301 	orr.w	r3, r3, #1
 800f72a:	f882 3020 	strb.w	r3, [r2, #32]
 800f72e:	e74e      	b.n	800f5ce <ull_isr+0xee>
 800f730:	6963      	ldr	r3, [r4, #20]
 800f732:	b10b      	cbz	r3, 800f738 <ull_isr+0x258>
 800f734:	3018      	adds	r0, #24
 800f736:	4798      	blx	r3
 800f738:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f73a:	7b9b      	ldrb	r3, [r3, #14]
 800f73c:	bb03      	cbnz	r3, 800f780 <ull_isr+0x2a0>
 800f73e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f740:	2200      	movs	r2, #0
 800f742:	f883 2020 	strb.w	r2, [r3, #32]
 800f746:	f015 0f10 	tst.w	r5, #16
 800f74a:	d11d      	bne.n	800f788 <ull_isr+0x2a8>
 800f74c:	f015 0f20 	tst.w	r5, #32
 800f750:	d12d      	bne.n	800f7ae <ull_isr+0x2ce>
 800f752:	2200      	movs	r2, #0
 800f754:	4920      	ldr	r1, [pc, #128]	; (800f7d8 <ull_isr+0x2f8>)
 800f756:	4620      	mov	r0, r4
 800f758:	f7fe feb4 	bl	800e4c4 <dwt_read8bitoffsetreg>
 800f75c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f75e:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21
 800f762:	f010 0303 	ands.w	r3, r0, #3
 800f766:	d009      	beq.n	800f77c <ull_isr+0x29c>
 800f768:	2200      	movs	r2, #0
 800f76a:	491b      	ldr	r1, [pc, #108]	; (800f7d8 <ull_isr+0x2f8>)
 800f76c:	4620      	mov	r0, r4
 800f76e:	f7ff fd17 	bl	800f1a0 <dwt_write8bitoffsetreg>
 800f772:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f774:	b113      	cbz	r3, 800f77c <ull_isr+0x29c>
 800f776:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800f778:	3018      	adds	r0, #24
 800f77a:	4798      	blx	r3
 800f77c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f780:	4620      	mov	r0, r4
 800f782:	f7ff fe99 	bl	800f4b8 <ull_signal_rx_buff_free>
 800f786:	e7da      	b.n	800f73e <ull_isr+0x25e>
 800f788:	4b14      	ldr	r3, [pc, #80]	; (800f7dc <ull_isr+0x2fc>)
 800f78a:	2200      	movs	r2, #0
 800f78c:	2144      	movs	r1, #68	; 0x44
 800f78e:	4620      	mov	r0, r4
 800f790:	f7ff fb22 	bl	800edd8 <dwt_write32bitoffsetreg>
 800f794:	4620      	mov	r0, r4
 800f796:	f7ff fd41 	bl	800f21c <_dwt_clear_db_events>
 800f79a:	69e3      	ldr	r3, [r4, #28]
 800f79c:	b113      	cbz	r3, 800f7a4 <ull_isr+0x2c4>
 800f79e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800f7a0:	3018      	adds	r0, #24
 800f7a2:	4798      	blx	r3
 800f7a4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f7a6:	2200      	movs	r2, #0
 800f7a8:	f883 2020 	strb.w	r2, [r3, #32]
 800f7ac:	e7ce      	b.n	800f74c <ull_isr+0x26c>
 800f7ae:	4b0c      	ldr	r3, [pc, #48]	; (800f7e0 <ull_isr+0x300>)
 800f7b0:	2200      	movs	r2, #0
 800f7b2:	2144      	movs	r1, #68	; 0x44
 800f7b4:	4620      	mov	r0, r4
 800f7b6:	f7ff fb0f 	bl	800edd8 <dwt_write32bitoffsetreg>
 800f7ba:	4620      	mov	r0, r4
 800f7bc:	f7ff fd2e 	bl	800f21c <_dwt_clear_db_events>
 800f7c0:	69a3      	ldr	r3, [r4, #24]
 800f7c2:	b113      	cbz	r3, 800f7ca <ull_isr+0x2ea>
 800f7c4:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800f7c6:	3018      	adds	r0, #24
 800f7c8:	4798      	blx	r3
 800f7ca:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f7cc:	2200      	movs	r2, #0
 800f7ce:	f883 2020 	strb.w	r2, [r3, #32]
 800f7d2:	e7be      	b.n	800f752 <ull_isr+0x272>
 800f7d4:	00010018 	.word	0x00010018
 800f7d8:	00110038 	.word	0x00110038
 800f7dc:	34059400 	.word	0x34059400
 800f7e0:	10220400 	.word	0x10220400

0800f7e4 <dwt_modify32bitoffsetreg>:
 800f7e4:	b530      	push	{r4, r5, lr}
 800f7e6:	b085      	sub	sp, #20
 800f7e8:	9c08      	ldr	r4, [sp, #32]
 800f7ea:	f88d 3008 	strb.w	r3, [sp, #8]
 800f7ee:	0a1d      	lsrs	r5, r3, #8
 800f7f0:	f88d 5009 	strb.w	r5, [sp, #9]
 800f7f4:	0c1d      	lsrs	r5, r3, #16
 800f7f6:	f88d 500a 	strb.w	r5, [sp, #10]
 800f7fa:	0e1b      	lsrs	r3, r3, #24
 800f7fc:	f88d 300b 	strb.w	r3, [sp, #11]
 800f800:	f88d 400c 	strb.w	r4, [sp, #12]
 800f804:	0a23      	lsrs	r3, r4, #8
 800f806:	f88d 300d 	strb.w	r3, [sp, #13]
 800f80a:	0c23      	lsrs	r3, r4, #16
 800f80c:	f88d 300e 	strb.w	r3, [sp, #14]
 800f810:	0e24      	lsrs	r4, r4, #24
 800f812:	f88d 400f 	strb.w	r4, [sp, #15]
 800f816:	f248 0303 	movw	r3, #32771	; 0x8003
 800f81a:	9301      	str	r3, [sp, #4]
 800f81c:	ab02      	add	r3, sp, #8
 800f81e:	9300      	str	r3, [sp, #0]
 800f820:	2308      	movs	r3, #8
 800f822:	b292      	uxth	r2, r2
 800f824:	f7fe fd71 	bl	800e30a <dwt_xfer3xxx>
 800f828:	b005      	add	sp, #20
 800f82a:	bd30      	pop	{r4, r5, pc}

0800f82c <ull_enablegpioclocks>:
 800f82c:	b500      	push	{lr}
 800f82e:	b083      	sub	sp, #12
 800f830:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800f834:	9300      	str	r3, [sp, #0]
 800f836:	f04f 33ff 	mov.w	r3, #4294967295
 800f83a:	2200      	movs	r2, #0
 800f83c:	4902      	ldr	r1, [pc, #8]	; (800f848 <ull_enablegpioclocks+0x1c>)
 800f83e:	f7ff ffd1 	bl	800f7e4 <dwt_modify32bitoffsetreg>
 800f842:	b003      	add	sp, #12
 800f844:	f85d fb04 	ldr.w	pc, [sp], #4
 800f848:	00110004 	.word	0x00110004

0800f84c <ull_enable_rf_tx>:
 800f84c:	b570      	push	{r4, r5, r6, lr}
 800f84e:	b082      	sub	sp, #8
 800f850:	4604      	mov	r4, r0
 800f852:	460e      	mov	r6, r1
 800f854:	4d13      	ldr	r5, [pc, #76]	; (800f8a4 <ull_enable_rf_tx+0x58>)
 800f856:	f04f 2308 	mov.w	r3, #134219776	; 0x8000800
 800f85a:	9300      	str	r3, [sp, #0]
 800f85c:	f04f 33ff 	mov.w	r3, #4294967295
 800f860:	2200      	movs	r2, #0
 800f862:	4629      	mov	r1, r5
 800f864:	f7ff ffbe 	bl	800f7e4 <dwt_modify32bitoffsetreg>
 800f868:	f04f 1360 	mov.w	r3, #6291552	; 0x600060
 800f86c:	9300      	str	r3, [sp, #0]
 800f86e:	f04f 33ff 	mov.w	r3, #4294967295
 800f872:	2200      	movs	r2, #0
 800f874:	4629      	mov	r1, r5
 800f876:	4620      	mov	r0, r4
 800f878:	f7ff ffb4 	bl	800f7e4 <dwt_modify32bitoffsetreg>
 800f87c:	4b0a      	ldr	r3, [pc, #40]	; (800f8a8 <ull_enable_rf_tx+0x5c>)
 800f87e:	9300      	str	r3, [sp, #0]
 800f880:	f04f 33ff 	mov.w	r3, #4294967295
 800f884:	2200      	movs	r2, #0
 800f886:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 800f88a:	4620      	mov	r0, r4
 800f88c:	f7ff ffaa 	bl	800f7e4 <dwt_modify32bitoffsetreg>
 800f890:	b90e      	cbnz	r6, 800f896 <ull_enable_rf_tx+0x4a>
 800f892:	b002      	add	sp, #8
 800f894:	bd70      	pop	{r4, r5, r6, pc}
 800f896:	4b05      	ldr	r3, [pc, #20]	; (800f8ac <ull_enable_rf_tx+0x60>)
 800f898:	2200      	movs	r2, #0
 800f89a:	4905      	ldr	r1, [pc, #20]	; (800f8b0 <ull_enable_rf_tx+0x64>)
 800f89c:	4620      	mov	r0, r4
 800f89e:	f7ff fa9b 	bl	800edd8 <dwt_write32bitoffsetreg>
 800f8a2:	e7f6      	b.n	800f892 <ull_enable_rf_tx+0x46>
 800f8a4:	00070048 	.word	0x00070048
 800f8a8:	02003c00 	.word	0x02003c00
 800f8ac:	01011100 	.word	0x01011100
 800f8b0:	00070014 	.word	0x00070014

0800f8b4 <ull_enable_rftx_blocks>:
 800f8b4:	b500      	push	{lr}
 800f8b6:	b083      	sub	sp, #12
 800f8b8:	4b05      	ldr	r3, [pc, #20]	; (800f8d0 <ull_enable_rftx_blocks+0x1c>)
 800f8ba:	9300      	str	r3, [sp, #0]
 800f8bc:	f04f 33ff 	mov.w	r3, #4294967295
 800f8c0:	2200      	movs	r2, #0
 800f8c2:	4904      	ldr	r1, [pc, #16]	; (800f8d4 <ull_enable_rftx_blocks+0x20>)
 800f8c4:	f7ff ff8e 	bl	800f7e4 <dwt_modify32bitoffsetreg>
 800f8c8:	b003      	add	sp, #12
 800f8ca:	f85d fb04 	ldr.w	pc, [sp], #4
 800f8ce:	bf00      	nop
 800f8d0:	02003c00 	.word	0x02003c00
 800f8d4:	00070004 	.word	0x00070004

0800f8d8 <_dwt_otpprogword32>:
 800f8d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f8dc:	b083      	sub	sp, #12
 800f8de:	4604      	mov	r4, r0
 800f8e0:	460d      	mov	r5, r1
 800f8e2:	4617      	mov	r7, r2
 800f8e4:	4e56      	ldr	r6, [pc, #344]	; (800fa40 <_dwt_otpprogword32+0x168>)
 800f8e6:	2200      	movs	r2, #0
 800f8e8:	4631      	mov	r1, r6
 800f8ea:	f7fe fd96 	bl	800e41a <dwt_read32bitoffsetreg>
 800f8ee:	4681      	mov	r9, r0
 800f8f0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800f8f4:	9300      	str	r3, [sp, #0]
 800f8f6:	f04f 33ff 	mov.w	r3, #4294967295
 800f8fa:	2200      	movs	r2, #0
 800f8fc:	4631      	mov	r1, r6
 800f8fe:	4620      	mov	r0, r4
 800f900:	f7ff ff70 	bl	800f7e4 <dwt_modify32bitoffsetreg>
 800f904:	f8df 813c 	ldr.w	r8, [pc, #316]	; 800fa44 <_dwt_otpprogword32+0x16c>
 800f908:	2318      	movs	r3, #24
 800f90a:	2200      	movs	r2, #0
 800f90c:	4641      	mov	r1, r8
 800f90e:	4620      	mov	r0, r4
 800f910:	f7ff f9f7 	bl	800ed02 <dwt_write16bitoffsetreg>
 800f914:	2125      	movs	r1, #37	; 0x25
 800f916:	4620      	mov	r0, r4
 800f918:	f7ff fa28 	bl	800ed6c <__dwt_otp_write_wdata_id_reg>
 800f91c:	2102      	movs	r1, #2
 800f91e:	4620      	mov	r0, r4
 800f920:	f7ff fa24 	bl	800ed6c <__dwt_otp_write_wdata_id_reg>
 800f924:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
 800f928:	4620      	mov	r0, r4
 800f92a:	f7ff fa1f 	bl	800ed6c <__dwt_otp_write_wdata_id_reg>
 800f92e:	b2f9      	uxtb	r1, r7
 800f930:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800f934:	4620      	mov	r0, r4
 800f936:	f7ff fa19 	bl	800ed6c <__dwt_otp_write_wdata_id_reg>
 800f93a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f93e:	4620      	mov	r0, r4
 800f940:	f7ff fa14 	bl	800ed6c <__dwt_otp_write_wdata_id_reg>
 800f944:	2100      	movs	r1, #0
 800f946:	4620      	mov	r0, r4
 800f948:	f7ff fa10 	bl	800ed6c <__dwt_otp_write_wdata_id_reg>
 800f94c:	2102      	movs	r1, #2
 800f94e:	4620      	mov	r0, r4
 800f950:	f7ff fa0c 	bl	800ed6c <__dwt_otp_write_wdata_id_reg>
 800f954:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800f958:	4620      	mov	r0, r4
 800f95a:	f7ff fa07 	bl	800ed6c <__dwt_otp_write_wdata_id_reg>
 800f95e:	b2e9      	uxtb	r1, r5
 800f960:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800f964:	4620      	mov	r0, r4
 800f966:	f7ff fa01 	bl	800ed6c <__dwt_otp_write_wdata_id_reg>
 800f96a:	f3c5 2107 	ubfx	r1, r5, #8, #8
 800f96e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800f972:	4620      	mov	r0, r4
 800f974:	f7ff f9fa 	bl	800ed6c <__dwt_otp_write_wdata_id_reg>
 800f978:	f3c5 4107 	ubfx	r1, r5, #16, #8
 800f97c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800f980:	4620      	mov	r0, r4
 800f982:	f7ff f9f3 	bl	800ed6c <__dwt_otp_write_wdata_id_reg>
 800f986:	0e29      	lsrs	r1, r5, #24
 800f988:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800f98c:	4620      	mov	r0, r4
 800f98e:	f7ff f9ed 	bl	800ed6c <__dwt_otp_write_wdata_id_reg>
 800f992:	2100      	movs	r1, #0
 800f994:	4620      	mov	r0, r4
 800f996:	f7ff f9e9 	bl	800ed6c <__dwt_otp_write_wdata_id_reg>
 800f99a:	213a      	movs	r1, #58	; 0x3a
 800f99c:	4620      	mov	r0, r4
 800f99e:	f7ff f9e5 	bl	800ed6c <__dwt_otp_write_wdata_id_reg>
 800f9a2:	f240 11ff 	movw	r1, #511	; 0x1ff
 800f9a6:	4620      	mov	r0, r4
 800f9a8:	f7ff f9e0 	bl	800ed6c <__dwt_otp_write_wdata_id_reg>
 800f9ac:	f44f 7185 	mov.w	r1, #266	; 0x10a
 800f9b0:	4620      	mov	r0, r4
 800f9b2:	f7ff f9db 	bl	800ed6c <__dwt_otp_write_wdata_id_reg>
 800f9b6:	2100      	movs	r1, #0
 800f9b8:	4620      	mov	r0, r4
 800f9ba:	f7ff f9d7 	bl	800ed6c <__dwt_otp_write_wdata_id_reg>
 800f9be:	213a      	movs	r1, #58	; 0x3a
 800f9c0:	4620      	mov	r0, r4
 800f9c2:	f7ff f9d3 	bl	800ed6c <__dwt_otp_write_wdata_id_reg>
 800f9c6:	f240 1101 	movw	r1, #257	; 0x101
 800f9ca:	4620      	mov	r0, r4
 800f9cc:	f7ff f9ce 	bl	800ed6c <__dwt_otp_write_wdata_id_reg>
 800f9d0:	2302      	movs	r3, #2
 800f9d2:	2200      	movs	r2, #0
 800f9d4:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800f9d8:	4620      	mov	r0, r4
 800f9da:	f7ff f992 	bl	800ed02 <dwt_write16bitoffsetreg>
 800f9de:	2300      	movs	r3, #0
 800f9e0:	461a      	mov	r2, r3
 800f9e2:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800f9e6:	4620      	mov	r0, r4
 800f9e8:	f7ff f98b 	bl	800ed02 <dwt_write16bitoffsetreg>
 800f9ec:	2002      	movs	r0, #2
 800f9ee:	f7f0 fd8d 	bl	800050c <deca_sleep>
 800f9f2:	213a      	movs	r1, #58	; 0x3a
 800f9f4:	4620      	mov	r0, r4
 800f9f6:	f7ff f9b9 	bl	800ed6c <__dwt_otp_write_wdata_id_reg>
 800f9fa:	f44f 7181 	mov.w	r1, #258	; 0x102
 800f9fe:	4620      	mov	r0, r4
 800fa00:	f7ff f9b4 	bl	800ed6c <__dwt_otp_write_wdata_id_reg>
 800fa04:	2302      	movs	r3, #2
 800fa06:	2200      	movs	r2, #0
 800fa08:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800fa0c:	4620      	mov	r0, r4
 800fa0e:	f7ff f978 	bl	800ed02 <dwt_write16bitoffsetreg>
 800fa12:	2300      	movs	r3, #0
 800fa14:	461a      	mov	r2, r3
 800fa16:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800fa1a:	4620      	mov	r0, r4
 800fa1c:	f7ff f971 	bl	800ed02 <dwt_write16bitoffsetreg>
 800fa20:	2300      	movs	r3, #0
 800fa22:	461a      	mov	r2, r3
 800fa24:	4641      	mov	r1, r8
 800fa26:	4620      	mov	r0, r4
 800fa28:	f7ff f96b 	bl	800ed02 <dwt_write16bitoffsetreg>
 800fa2c:	464b      	mov	r3, r9
 800fa2e:	2200      	movs	r2, #0
 800fa30:	4631      	mov	r1, r6
 800fa32:	4620      	mov	r0, r4
 800fa34:	f7ff f9d0 	bl	800edd8 <dwt_write32bitoffsetreg>
 800fa38:	b003      	add	sp, #12
 800fa3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fa3e:	bf00      	nop
 800fa40:	00070044 	.word	0x00070044
 800fa44:	000b0008 	.word	0x000b0008

0800fa48 <ull_setgpiomode>:
 800fa48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa4a:	b083      	sub	sp, #12
 800fa4c:	2400      	movs	r4, #0
 800fa4e:	4623      	mov	r3, r4
 800fa50:	2601      	movs	r6, #1
 800fa52:	2707      	movs	r7, #7
 800fa54:	e002      	b.n	800fa5c <ull_setgpiomode+0x14>
 800fa56:	3401      	adds	r4, #1
 800fa58:	2c09      	cmp	r4, #9
 800fa5a:	d009      	beq.n	800fa70 <ull_setgpiomode+0x28>
 800fa5c:	fa06 f504 	lsl.w	r5, r6, r4
 800fa60:	420d      	tst	r5, r1
 800fa62:	d0f8      	beq.n	800fa56 <ull_setgpiomode+0xe>
 800fa64:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800fa68:	fa07 f505 	lsl.w	r5, r7, r5
 800fa6c:	432b      	orrs	r3, r5
 800fa6e:	e7f2      	b.n	800fa56 <ull_setgpiomode+0xe>
 800fa70:	401a      	ands	r2, r3
 800fa72:	9200      	str	r2, [sp, #0]
 800fa74:	43db      	mvns	r3, r3
 800fa76:	2200      	movs	r2, #0
 800fa78:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800fa7c:	f7ff feb2 	bl	800f7e4 <dwt_modify32bitoffsetreg>
 800fa80:	b003      	add	sp, #12
 800fa82:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fa84 <ull_writetxfctrl>:
 800fa84:	b500      	push	{lr}
 800fa86:	b083      	sub	sp, #12
 800fa88:	2a7f      	cmp	r2, #127	; 0x7f
 800fa8a:	bf88      	it	hi
 800fa8c:	3280      	addhi	r2, #128	; 0x80
 800fa8e:	ea41 21c3 	orr.w	r1, r1, r3, lsl #11
 800fa92:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800fa96:	9100      	str	r1, [sp, #0]
 800fa98:	4b03      	ldr	r3, [pc, #12]	; (800faa8 <ull_writetxfctrl+0x24>)
 800fa9a:	2200      	movs	r2, #0
 800fa9c:	2120      	movs	r1, #32
 800fa9e:	f7ff fea1 	bl	800f7e4 <dwt_modify32bitoffsetreg>
 800faa2:	b003      	add	sp, #12
 800faa4:	f85d fb04 	ldr.w	pc, [sp], #4
 800faa8:	fc00f400 	.word	0xfc00f400

0800faac <prs_sys_status_and_or>:
 800faac:	b500      	push	{lr}
 800faae:	b083      	sub	sp, #12
 800fab0:	9200      	str	r2, [sp, #0]
 800fab2:	460b      	mov	r3, r1
 800fab4:	2200      	movs	r2, #0
 800fab6:	2144      	movs	r1, #68	; 0x44
 800fab8:	f7ff fe94 	bl	800f7e4 <dwt_modify32bitoffsetreg>
 800fabc:	2000      	movs	r0, #0
 800fabe:	b003      	add	sp, #12
 800fac0:	f85d fb04 	ldr.w	pc, [sp], #4

0800fac4 <dwt_modify8bitoffsetreg>:
 800fac4:	b500      	push	{lr}
 800fac6:	b085      	sub	sp, #20
 800fac8:	f88d 300c 	strb.w	r3, [sp, #12]
 800facc:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800fad0:	f88d 300d 	strb.w	r3, [sp, #13]
 800fad4:	f248 0301 	movw	r3, #32769	; 0x8001
 800fad8:	9301      	str	r3, [sp, #4]
 800fada:	ab03      	add	r3, sp, #12
 800fadc:	9300      	str	r3, [sp, #0]
 800fade:	2302      	movs	r3, #2
 800fae0:	b292      	uxth	r2, r2
 800fae2:	f7fe fc12 	bl	800e30a <dwt_xfer3xxx>
 800fae6:	b005      	add	sp, #20
 800fae8:	f85d fb04 	ldr.w	pc, [sp], #4

0800faec <ull_enablespicrccheck>:
 800faec:	b570      	push	{r4, r5, r6, lr}
 800faee:	b082      	sub	sp, #8
 800faf0:	4604      	mov	r4, r0
 800faf2:	460d      	mov	r5, r1
 800faf4:	b159      	cbz	r1, 800fb0e <ull_enablespicrccheck+0x22>
 800faf6:	4616      	mov	r6, r2
 800faf8:	2340      	movs	r3, #64	; 0x40
 800fafa:	9300      	str	r3, [sp, #0]
 800fafc:	23ff      	movs	r3, #255	; 0xff
 800fafe:	2200      	movs	r2, #0
 800fb00:	2110      	movs	r1, #16
 800fb02:	f7ff ffdf 	bl	800fac4 <dwt_modify8bitoffsetreg>
 800fb06:	2d02      	cmp	r5, #2
 800fb08:	d107      	bne.n	800fb1a <ull_enablespicrccheck+0x2e>
 800fb0a:	60e6      	str	r6, [r4, #12]
 800fb0c:	e005      	b.n	800fb1a <ull_enablespicrccheck+0x2e>
 800fb0e:	2200      	movs	r2, #0
 800fb10:	9200      	str	r2, [sp, #0]
 800fb12:	23bf      	movs	r3, #191	; 0xbf
 800fb14:	2110      	movs	r1, #16
 800fb16:	f7ff ffd5 	bl	800fac4 <dwt_modify8bitoffsetreg>
 800fb1a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800fb1c:	751d      	strb	r5, [r3, #20]
 800fb1e:	b002      	add	sp, #8
 800fb20:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fb24 <ull_configciadiag>:
 800fb24:	b530      	push	{r4, r5, lr}
 800fb26:	b083      	sub	sp, #12
 800fb28:	4604      	mov	r4, r0
 800fb2a:	460d      	mov	r5, r1
 800fb2c:	f011 0f01 	tst.w	r1, #1
 800fb30:	d015      	beq.n	800fb5e <ull_configciadiag+0x3a>
 800fb32:	2300      	movs	r3, #0
 800fb34:	9300      	str	r3, [sp, #0]
 800fb36:	23ef      	movs	r3, #239	; 0xef
 800fb38:	2202      	movs	r2, #2
 800fb3a:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800fb3e:	f7ff ffc1 	bl	800fac4 <dwt_modify8bitoffsetreg>
 800fb42:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800fb44:	759d      	strb	r5, [r3, #22]
 800fb46:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800fb48:	7d9b      	ldrb	r3, [r3, #22]
 800fb4a:	085b      	lsrs	r3, r3, #1
 800fb4c:	d010      	beq.n	800fb70 <ull_configciadiag+0x4c>
 800fb4e:	086b      	lsrs	r3, r5, #1
 800fb50:	2200      	movs	r2, #0
 800fb52:	490e      	ldr	r1, [pc, #56]	; (800fb8c <ull_configciadiag+0x68>)
 800fb54:	4620      	mov	r0, r4
 800fb56:	f7ff fb23 	bl	800f1a0 <dwt_write8bitoffsetreg>
 800fb5a:	b003      	add	sp, #12
 800fb5c:	bd30      	pop	{r4, r5, pc}
 800fb5e:	2310      	movs	r3, #16
 800fb60:	9300      	str	r3, [sp, #0]
 800fb62:	23ff      	movs	r3, #255	; 0xff
 800fb64:	2202      	movs	r2, #2
 800fb66:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800fb6a:	f7ff ffab 	bl	800fac4 <dwt_modify8bitoffsetreg>
 800fb6e:	e7e8      	b.n	800fb42 <ull_configciadiag+0x1e>
 800fb70:	2301      	movs	r3, #1
 800fb72:	9300      	str	r3, [sp, #0]
 800fb74:	23ff      	movs	r3, #255	; 0xff
 800fb76:	2200      	movs	r2, #0
 800fb78:	4904      	ldr	r1, [pc, #16]	; (800fb8c <ull_configciadiag+0x68>)
 800fb7a:	4620      	mov	r0, r4
 800fb7c:	f7ff ffa2 	bl	800fac4 <dwt_modify8bitoffsetreg>
 800fb80:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800fb82:	7d93      	ldrb	r3, [r2, #22]
 800fb84:	f043 0302 	orr.w	r3, r3, #2
 800fb88:	7593      	strb	r3, [r2, #22]
 800fb8a:	e7e6      	b.n	800fb5a <ull_configciadiag+0x36>
 800fb8c:	00010020 	.word	0x00010020

0800fb90 <ull_configurestsloadiv>:
 800fb90:	b500      	push	{lr}
 800fb92:	b083      	sub	sp, #12
 800fb94:	2301      	movs	r3, #1
 800fb96:	9300      	str	r3, [sp, #0]
 800fb98:	23ff      	movs	r3, #255	; 0xff
 800fb9a:	2200      	movs	r2, #0
 800fb9c:	4902      	ldr	r1, [pc, #8]	; (800fba8 <ull_configurestsloadiv+0x18>)
 800fb9e:	f7ff ff91 	bl	800fac4 <dwt_modify8bitoffsetreg>
 800fba2:	b003      	add	sp, #12
 800fba4:	f85d fb04 	ldr.w	pc, [sp], #4
 800fba8:	00020004 	.word	0x00020004

0800fbac <ull_adcoffsetscalibration>:
 800fbac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbb0:	b08b      	sub	sp, #44	; 0x2c
 800fbb2:	4607      	mov	r7, r0
 800fbb4:	f8df 8220 	ldr.w	r8, [pc, #544]	; 800fdd8 <ull_adcoffsetscalibration+0x22c>
 800fbb8:	2200      	movs	r2, #0
 800fbba:	4641      	mov	r1, r8
 800fbbc:	f7fe fc2d 	bl	800e41a <dwt_read32bitoffsetreg>
 800fbc0:	9004      	str	r0, [sp, #16]
 800fbc2:	4c7d      	ldr	r4, [pc, #500]	; (800fdb8 <ull_adcoffsetscalibration+0x20c>)
 800fbc4:	2200      	movs	r2, #0
 800fbc6:	4621      	mov	r1, r4
 800fbc8:	4638      	mov	r0, r7
 800fbca:	f7fe fc26 	bl	800e41a <dwt_read32bitoffsetreg>
 800fbce:	9005      	str	r0, [sp, #20]
 800fbd0:	4d7a      	ldr	r5, [pc, #488]	; (800fdbc <ull_adcoffsetscalibration+0x210>)
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	4629      	mov	r1, r5
 800fbd6:	4638      	mov	r0, r7
 800fbd8:	f7fe fc74 	bl	800e4c4 <dwt_read8bitoffsetreg>
 800fbdc:	9006      	str	r0, [sp, #24]
 800fbde:	4e78      	ldr	r6, [pc, #480]	; (800fdc0 <ull_adcoffsetscalibration+0x214>)
 800fbe0:	2200      	movs	r2, #0
 800fbe2:	4631      	mov	r1, r6
 800fbe4:	4638      	mov	r0, r7
 800fbe6:	f7fe fc18 	bl	800e41a <dwt_read32bitoffsetreg>
 800fbea:	4682      	mov	sl, r0
 800fbec:	9007      	str	r0, [sp, #28]
 800fbee:	2200      	movs	r2, #0
 800fbf0:	4974      	ldr	r1, [pc, #464]	; (800fdc4 <ull_adcoffsetscalibration+0x218>)
 800fbf2:	4638      	mov	r0, r7
 800fbf4:	f7fe fc11 	bl	800e41a <dwt_read32bitoffsetreg>
 800fbf8:	4681      	mov	r9, r0
 800fbfa:	4b73      	ldr	r3, [pc, #460]	; (800fdc8 <ull_adcoffsetscalibration+0x21c>)
 800fbfc:	9300      	str	r3, [sp, #0]
 800fbfe:	f06f 537c 	mvn.w	r3, #1056964608	; 0x3f000000
 800fc02:	2200      	movs	r2, #0
 800fc04:	4641      	mov	r1, r8
 800fc06:	4638      	mov	r0, r7
 800fc08:	f7ff fdec 	bl	800f7e4 <dwt_modify32bitoffsetreg>
 800fc0c:	464b      	mov	r3, r9
 800fc0e:	2200      	movs	r2, #0
 800fc10:	4631      	mov	r1, r6
 800fc12:	4638      	mov	r0, r7
 800fc14:	f7ff f8e0 	bl	800edd8 <dwt_write32bitoffsetreg>
 800fc18:	4653      	mov	r3, sl
 800fc1a:	00db      	lsls	r3, r3, #3
 800fc1c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fc20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc24:	9300      	str	r3, [sp, #0]
 800fc26:	2386      	movs	r3, #134	; 0x86
 800fc28:	2200      	movs	r2, #0
 800fc2a:	4621      	mov	r1, r4
 800fc2c:	4638      	mov	r0, r7
 800fc2e:	f7ff ff49 	bl	800fac4 <dwt_modify8bitoffsetreg>
 800fc32:	2300      	movs	r3, #0
 800fc34:	2203      	movs	r2, #3
 800fc36:	4621      	mov	r1, r4
 800fc38:	4638      	mov	r0, r7
 800fc3a:	f7ff fab1 	bl	800f1a0 <dwt_write8bitoffsetreg>
 800fc3e:	f04f 0900 	mov.w	r9, #0
 800fc42:	f8cd 9000 	str.w	r9, [sp]
 800fc46:	23fe      	movs	r3, #254	; 0xfe
 800fc48:	464a      	mov	r2, r9
 800fc4a:	4629      	mov	r1, r5
 800fc4c:	4638      	mov	r0, r7
 800fc4e:	f7ff ff39 	bl	800fac4 <dwt_modify8bitoffsetreg>
 800fc52:	464a      	mov	r2, r9
 800fc54:	213c      	movs	r1, #60	; 0x3c
 800fc56:	4638      	mov	r0, r7
 800fc58:	f7fe fbdf 	bl	800e41a <dwt_read32bitoffsetreg>
 800fc5c:	9008      	str	r0, [sp, #32]
 800fc5e:	464a      	mov	r2, r9
 800fc60:	2140      	movs	r1, #64	; 0x40
 800fc62:	4638      	mov	r0, r7
 800fc64:	f7fe fbd9 	bl	800e41a <dwt_read32bitoffsetreg>
 800fc68:	9009      	str	r0, [sp, #36]	; 0x24
 800fc6a:	464b      	mov	r3, r9
 800fc6c:	464a      	mov	r2, r9
 800fc6e:	213c      	movs	r1, #60	; 0x3c
 800fc70:	4638      	mov	r0, r7
 800fc72:	f7ff f8b1 	bl	800edd8 <dwt_write32bitoffsetreg>
 800fc76:	464b      	mov	r3, r9
 800fc78:	464a      	mov	r2, r9
 800fc7a:	2140      	movs	r1, #64	; 0x40
 800fc7c:	4638      	mov	r0, r7
 800fc7e:	f7ff f8ab 	bl	800edd8 <dwt_write32bitoffsetreg>
 800fc82:	f7f5 fe85 	bl	8005990 <dwt_forcetrxoff>
 800fc86:	f04f 0b02 	mov.w	fp, #2
 800fc8a:	464c      	mov	r4, r9
 800fc8c:	464d      	mov	r5, r9
 800fc8e:	464e      	mov	r6, r9
 800fc90:	46c8      	mov	r8, r9
 800fc92:	f8cd 900c 	str.w	r9, [sp, #12]
 800fc96:	46ca      	mov	sl, r9
 800fc98:	e00e      	b.n	800fcb8 <ull_adcoffsetscalibration+0x10c>
 800fc9a:	f7f5 fe79 	bl	8005990 <dwt_forcetrxoff>
 800fc9e:	9b03      	ldr	r3, [sp, #12]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	f000 8082 	beq.w	800fdaa <ull_adcoffsetscalibration+0x1fe>
 800fca6:	f1bb 0f01 	cmp.w	fp, #1
 800fcaa:	f000 8081 	beq.w	800fdb0 <ull_adcoffsetscalibration+0x204>
 800fcae:	2301      	movs	r3, #1
 800fcb0:	9303      	str	r3, [sp, #12]
 800fcb2:	f1bb 0b01 	subs.w	fp, fp, #1
 800fcb6:	d043      	beq.n	800fd40 <ull_adcoffsetscalibration+0x194>
 800fcb8:	4650      	mov	r0, sl
 800fcba:	f7f5 fe77 	bl	80059ac <dwt_rxenable>
 800fcbe:	2014      	movs	r0, #20
 800fcc0:	f7f0 fc2f 	bl	8000522 <deca_usleep>
 800fcc4:	f04f 0904 	mov.w	r9, #4
 800fcc8:	f8cd a000 	str.w	sl, [sp]
 800fccc:	23fe      	movs	r3, #254	; 0xfe
 800fcce:	4652      	mov	r2, sl
 800fcd0:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 800fcd4:	4638      	mov	r0, r7
 800fcd6:	f7ff fef5 	bl	800fac4 <dwt_modify8bitoffsetreg>
 800fcda:	2301      	movs	r3, #1
 800fcdc:	9300      	str	r3, [sp, #0]
 800fcde:	23fe      	movs	r3, #254	; 0xfe
 800fce0:	4652      	mov	r2, sl
 800fce2:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 800fce6:	4638      	mov	r0, r7
 800fce8:	f7ff feec 	bl	800fac4 <dwt_modify8bitoffsetreg>
 800fcec:	4652      	mov	r2, sl
 800fcee:	4937      	ldr	r1, [pc, #220]	; (800fdcc <ull_adcoffsetscalibration+0x220>)
 800fcf0:	4638      	mov	r0, r7
 800fcf2:	f7fe fb92 	bl	800e41a <dwt_read32bitoffsetreg>
 800fcf6:	fa58 f880 	uxtab	r8, r8, r0
 800fcfa:	fa1f f888 	uxth.w	r8, r8
 800fcfe:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800fd02:	441e      	add	r6, r3
 800fd04:	b2b6      	uxth	r6, r6
 800fd06:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800fd0a:	441d      	add	r5, r3
 800fd0c:	b2ad      	uxth	r5, r5
 800fd0e:	eb04 6410 	add.w	r4, r4, r0, lsr #24
 800fd12:	b2a4      	uxth	r4, r4
 800fd14:	f1b9 0901 	subs.w	r9, r9, #1
 800fd18:	d1d6      	bne.n	800fcc8 <ull_adcoffsetscalibration+0x11c>
 800fd1a:	f3c8 0887 	ubfx	r8, r8, #2, #8
 800fd1e:	f3c6 0687 	ubfx	r6, r6, #2, #8
 800fd22:	f3c5 0587 	ubfx	r5, r5, #2, #8
 800fd26:	f3c4 0487 	ubfx	r4, r4, #2, #8
 800fd2a:	4652      	mov	r2, sl
 800fd2c:	2144      	movs	r1, #68	; 0x44
 800fd2e:	4638      	mov	r0, r7
 800fd30:	f7fe fb73 	bl	800e41a <dwt_read32bitoffsetreg>
 800fd34:	4b26      	ldr	r3, [pc, #152]	; (800fdd0 <ull_adcoffsetscalibration+0x224>)
 800fd36:	4218      	tst	r0, r3
 800fd38:	d0af      	beq.n	800fc9a <ull_adcoffsetscalibration+0xee>
 800fd3a:	f7f5 fe29 	bl	8005990 <dwt_forcetrxoff>
 800fd3e:	e7b2      	b.n	800fca6 <ull_adcoffsetscalibration+0xfa>
 800fd40:	f04f 0900 	mov.w	r9, #0
 800fd44:	9b08      	ldr	r3, [sp, #32]
 800fd46:	2200      	movs	r2, #0
 800fd48:	213c      	movs	r1, #60	; 0x3c
 800fd4a:	4638      	mov	r0, r7
 800fd4c:	f7ff f844 	bl	800edd8 <dwt_write32bitoffsetreg>
 800fd50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd52:	2200      	movs	r2, #0
 800fd54:	2140      	movs	r1, #64	; 0x40
 800fd56:	4638      	mov	r0, r7
 800fd58:	f7ff f83e 	bl	800edd8 <dwt_write32bitoffsetreg>
 800fd5c:	042b      	lsls	r3, r5, #16
 800fd5e:	eb03 6304 	add.w	r3, r3, r4, lsl #24
 800fd62:	eb03 2306 	add.w	r3, r3, r6, lsl #8
 800fd66:	4443      	add	r3, r8
 800fd68:	2200      	movs	r2, #0
 800fd6a:	491a      	ldr	r1, [pc, #104]	; (800fdd4 <ull_adcoffsetscalibration+0x228>)
 800fd6c:	4638      	mov	r0, r7
 800fd6e:	f7ff f833 	bl	800edd8 <dwt_write32bitoffsetreg>
 800fd72:	9b04      	ldr	r3, [sp, #16]
 800fd74:	2200      	movs	r2, #0
 800fd76:	4918      	ldr	r1, [pc, #96]	; (800fdd8 <ull_adcoffsetscalibration+0x22c>)
 800fd78:	4638      	mov	r0, r7
 800fd7a:	f7ff f82d 	bl	800edd8 <dwt_write32bitoffsetreg>
 800fd7e:	9b05      	ldr	r3, [sp, #20]
 800fd80:	2200      	movs	r2, #0
 800fd82:	490d      	ldr	r1, [pc, #52]	; (800fdb8 <ull_adcoffsetscalibration+0x20c>)
 800fd84:	4638      	mov	r0, r7
 800fd86:	f7ff f827 	bl	800edd8 <dwt_write32bitoffsetreg>
 800fd8a:	9b06      	ldr	r3, [sp, #24]
 800fd8c:	2200      	movs	r2, #0
 800fd8e:	490b      	ldr	r1, [pc, #44]	; (800fdbc <ull_adcoffsetscalibration+0x210>)
 800fd90:	4638      	mov	r0, r7
 800fd92:	f7ff fa05 	bl	800f1a0 <dwt_write8bitoffsetreg>
 800fd96:	9b07      	ldr	r3, [sp, #28]
 800fd98:	2200      	movs	r2, #0
 800fd9a:	4909      	ldr	r1, [pc, #36]	; (800fdc0 <ull_adcoffsetscalibration+0x214>)
 800fd9c:	4638      	mov	r0, r7
 800fd9e:	f7ff f81b 	bl	800edd8 <dwt_write32bitoffsetreg>
 800fda2:	4648      	mov	r0, r9
 800fda4:	b00b      	add	sp, #44	; 0x2c
 800fda6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdaa:	f04f 0900 	mov.w	r9, #0
 800fdae:	e7c9      	b.n	800fd44 <ull_adcoffsetscalibration+0x198>
 800fdb0:	f06f 0905 	mvn.w	r9, #5
 800fdb4:	e7c6      	b.n	800fd44 <ull_adcoffsetscalibration+0x198>
 800fdb6:	bf00      	nop
 800fdb8:	00030014 	.word	0x00030014
 800fdbc:	00030018 	.word	0x00030018
 800fdc0:	0003002c 	.word	0x0003002c
 800fdc4:	00030044 	.word	0x00030044
 800fdc8:	38010000 	.word	0x38010000
 800fdcc:	0003004c 	.word	0x0003004c
 800fdd0:	3427ff00 	.word	0x3427ff00
 800fdd4:	00030010 	.word	0x00030010
 800fdd8:	00070014 	.word	0x00070014

0800fddc <ull_restoreconfig>:
 800fddc:	b510      	push	{r4, lr}
 800fdde:	4604      	mov	r4, r0
 800fde0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800fde2:	7d9b      	ldrb	r3, [r3, #22]
 800fde4:	085b      	lsrs	r3, r3, #1
 800fde6:	d01a      	beq.n	800fe1e <ull_restoreconfig+0x42>
 800fde8:	2200      	movs	r2, #0
 800fdea:	4912      	ldr	r1, [pc, #72]	; (800fe34 <ull_restoreconfig+0x58>)
 800fdec:	4620      	mov	r0, r4
 800fdee:	f7fe fb2a 	bl	800e446 <dwt_read16bitoffsetreg>
 800fdf2:	f3c0 03c4 	ubfx	r3, r0, #3, #5
 800fdf6:	3b09      	subs	r3, #9
 800fdf8:	2b0f      	cmp	r3, #15
 800fdfa:	d80c      	bhi.n	800fe16 <ull_restoreconfig+0x3a>
 800fdfc:	f000 0001 	and.w	r0, r0, #1
 800fe00:	2800      	cmp	r0, #0
 800fe02:	bf0c      	ite	eq
 800fe04:	2105      	moveq	r1, #5
 800fe06:	2109      	movne	r1, #9
 800fe08:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800fe0a:	7a1b      	ldrb	r3, [r3, #8]
 800fe0c:	2b01      	cmp	r3, #1
 800fe0e:	d002      	beq.n	800fe16 <ull_restoreconfig+0x3a>
 800fe10:	4620      	mov	r0, r4
 800fe12:	f7ff f8ad 	bl	800ef70 <ull_configmrxlut>
 800fe16:	4620      	mov	r0, r4
 800fe18:	f7ff fec8 	bl	800fbac <ull_adcoffsetscalibration>
 800fe1c:	bd10      	pop	{r4, pc}
 800fe1e:	2301      	movs	r3, #1
 800fe20:	2200      	movs	r2, #0
 800fe22:	4905      	ldr	r1, [pc, #20]	; (800fe38 <ull_restoreconfig+0x5c>)
 800fe24:	f7ff f9bc 	bl	800f1a0 <dwt_write8bitoffsetreg>
 800fe28:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800fe2a:	7d93      	ldrb	r3, [r2, #22]
 800fe2c:	f043 0302 	orr.w	r3, r3, #2
 800fe30:	7593      	strb	r3, [r2, #22]
 800fe32:	e7d9      	b.n	800fde8 <ull_restoreconfig+0xc>
 800fe34:	00010008 	.word	0x00010008
 800fe38:	00010020 	.word	0x00010020

0800fe3c <ull_calcbandwidthadj>:
 800fe3c:	b570      	push	{r4, r5, r6, lr}
 800fe3e:	b082      	sub	sp, #8
 800fe40:	4604      	mov	r4, r0
 800fe42:	460d      	mov	r5, r1
 800fe44:	2101      	movs	r1, #1
 800fe46:	f7fe ff7b 	bl	800ed40 <ull_force_clocks>
 800fe4a:	2100      	movs	r1, #0
 800fe4c:	4620      	mov	r0, r4
 800fe4e:	f7ff fcfd 	bl	800f84c <ull_enable_rf_tx>
 800fe52:	4620      	mov	r0, r4
 800fe54:	f7ff fd2e 	bl	800f8b4 <ull_enable_rftx_blocks>
 800fe58:	f3c5 030b 	ubfx	r3, r5, #0, #12
 800fe5c:	2200      	movs	r2, #0
 800fe5e:	4915      	ldr	r1, [pc, #84]	; (800feb4 <ull_calcbandwidthadj+0x78>)
 800fe60:	4620      	mov	r0, r4
 800fe62:	f7fe ff4e 	bl	800ed02 <dwt_write16bitoffsetreg>
 800fe66:	2303      	movs	r3, #3
 800fe68:	9300      	str	r3, [sp, #0]
 800fe6a:	23ff      	movs	r3, #255	; 0xff
 800fe6c:	2200      	movs	r2, #0
 800fe6e:	4912      	ldr	r1, [pc, #72]	; (800feb8 <ull_calcbandwidthadj+0x7c>)
 800fe70:	4620      	mov	r0, r4
 800fe72:	f7ff fe27 	bl	800fac4 <dwt_modify8bitoffsetreg>
 800fe76:	4e10      	ldr	r6, [pc, #64]	; (800feb8 <ull_calcbandwidthadj+0x7c>)
 800fe78:	2500      	movs	r5, #0
 800fe7a:	462a      	mov	r2, r5
 800fe7c:	4631      	mov	r1, r6
 800fe7e:	4620      	mov	r0, r4
 800fe80:	f7fe fb20 	bl	800e4c4 <dwt_read8bitoffsetreg>
 800fe84:	f010 0f01 	tst.w	r0, #1
 800fe88:	d1f7      	bne.n	800fe7a <ull_calcbandwidthadj+0x3e>
 800fe8a:	4620      	mov	r0, r4
 800fe8c:	f7ff f906 	bl	800f09c <ull_disable_rftx_blocks>
 800fe90:	2100      	movs	r1, #0
 800fe92:	4620      	mov	r0, r4
 800fe94:	f7ff f90c 	bl	800f0b0 <ull_disable_rf_tx>
 800fe98:	2105      	movs	r1, #5
 800fe9a:	4620      	mov	r0, r4
 800fe9c:	f7fe ff50 	bl	800ed40 <ull_force_clocks>
 800fea0:	2200      	movs	r2, #0
 800fea2:	4906      	ldr	r1, [pc, #24]	; (800febc <ull_calcbandwidthadj+0x80>)
 800fea4:	4620      	mov	r0, r4
 800fea6:	f7fe fb0d 	bl	800e4c4 <dwt_read8bitoffsetreg>
 800feaa:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800feae:	b002      	add	sp, #8
 800feb0:	bd70      	pop	{r4, r5, r6, pc}
 800feb2:	bf00      	nop
 800feb4:	0008001c 	.word	0x0008001c
 800feb8:	00080010 	.word	0x00080010
 800febc:	0007001c 	.word	0x0007001c

0800fec0 <ull_configuretxrf>:
 800fec0:	b538      	push	{r3, r4, r5, lr}
 800fec2:	4605      	mov	r5, r0
 800fec4:	460c      	mov	r4, r1
 800fec6:	f8b1 1005 	ldrh.w	r1, [r1, #5]
 800feca:	b149      	cbz	r1, 800fee0 <ull_configuretxrf+0x20>
 800fecc:	f7ff ffb6 	bl	800fe3c <ull_calcbandwidthadj>
 800fed0:	f8d4 3001 	ldr.w	r3, [r4, #1]
 800fed4:	2200      	movs	r2, #0
 800fed6:	4905      	ldr	r1, [pc, #20]	; (800feec <ull_configuretxrf+0x2c>)
 800fed8:	4628      	mov	r0, r5
 800feda:	f7fe ff7d 	bl	800edd8 <dwt_write32bitoffsetreg>
 800fede:	bd38      	pop	{r3, r4, r5, pc}
 800fee0:	7823      	ldrb	r3, [r4, #0]
 800fee2:	2200      	movs	r2, #0
 800fee4:	4902      	ldr	r1, [pc, #8]	; (800fef0 <ull_configuretxrf+0x30>)
 800fee6:	f7ff f95b 	bl	800f1a0 <dwt_write8bitoffsetreg>
 800feea:	e7f1      	b.n	800fed0 <ull_configuretxrf+0x10>
 800feec:	00010004 	.word	0x00010004
 800fef0:	0007001c 	.word	0x0007001c

0800fef4 <ull_repeated_frames>:
 800fef4:	b530      	push	{r4, r5, lr}
 800fef6:	b083      	sub	sp, #12
 800fef8:	4604      	mov	r4, r0
 800fefa:	460d      	mov	r5, r1
 800fefc:	2310      	movs	r3, #16
 800fefe:	9300      	str	r3, [sp, #0]
 800ff00:	23ff      	movs	r3, #255	; 0xff
 800ff02:	2200      	movs	r2, #0
 800ff04:	4906      	ldr	r1, [pc, #24]	; (800ff20 <ull_repeated_frames+0x2c>)
 800ff06:	f7ff fddd 	bl	800fac4 <dwt_modify8bitoffsetreg>
 800ff0a:	462b      	mov	r3, r5
 800ff0c:	2d02      	cmp	r5, #2
 800ff0e:	bf38      	it	cc
 800ff10:	2302      	movcc	r3, #2
 800ff12:	2200      	movs	r2, #0
 800ff14:	2128      	movs	r1, #40	; 0x28
 800ff16:	4620      	mov	r0, r4
 800ff18:	f7fe ff5e 	bl	800edd8 <dwt_write32bitoffsetreg>
 800ff1c:	b003      	add	sp, #12
 800ff1e:	bd30      	pop	{r4, r5, pc}
 800ff20:	000f0028 	.word	0x000f0028

0800ff24 <ull_setdwstate>:
 800ff24:	b530      	push	{r4, r5, lr}
 800ff26:	b083      	sub	sp, #12
 800ff28:	4604      	mov	r4, r0
 800ff2a:	2901      	cmp	r1, #1
 800ff2c:	d01d      	beq.n	800ff6a <ull_setdwstate+0x46>
 800ff2e:	2902      	cmp	r1, #2
 800ff30:	d030      	beq.n	800ff94 <ull_setdwstate+0x70>
 800ff32:	2301      	movs	r3, #1
 800ff34:	9300      	str	r3, [sp, #0]
 800ff36:	23ff      	movs	r3, #255	; 0xff
 800ff38:	2200      	movs	r2, #0
 800ff3a:	4926      	ldr	r1, [pc, #152]	; (800ffd4 <ull_setdwstate+0xb0>)
 800ff3c:	f7ff fdc2 	bl	800fac4 <dwt_modify8bitoffsetreg>
 800ff40:	4d25      	ldr	r5, [pc, #148]	; (800ffd8 <ull_setdwstate+0xb4>)
 800ff42:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ff46:	9300      	str	r3, [sp, #0]
 800ff48:	f46f 7380 	mvn.w	r3, #256	; 0x100
 800ff4c:	2200      	movs	r2, #0
 800ff4e:	4629      	mov	r1, r5
 800ff50:	4620      	mov	r0, r4
 800ff52:	f7ff fc47 	bl	800f7e4 <dwt_modify32bitoffsetreg>
 800ff56:	2300      	movs	r3, #0
 800ff58:	9300      	str	r3, [sp, #0]
 800ff5a:	237f      	movs	r3, #127	; 0x7f
 800ff5c:	2202      	movs	r2, #2
 800ff5e:	4629      	mov	r1, r5
 800ff60:	4620      	mov	r0, r4
 800ff62:	f7ff fdaf 	bl	800fac4 <dwt_modify8bitoffsetreg>
 800ff66:	b003      	add	sp, #12
 800ff68:	bd30      	pop	{r4, r5, pc}
 800ff6a:	2105      	movs	r1, #5
 800ff6c:	f7fe fee8 	bl	800ed40 <ull_force_clocks>
 800ff70:	f44f 7381 	mov.w	r3, #258	; 0x102
 800ff74:	9300      	str	r3, [sp, #0]
 800ff76:	f04f 33ff 	mov.w	r3, #4294967295
 800ff7a:	2200      	movs	r2, #0
 800ff7c:	4917      	ldr	r1, [pc, #92]	; (800ffdc <ull_setdwstate+0xb8>)
 800ff7e:	4620      	mov	r0, r4
 800ff80:	f7ff fc30 	bl	800f7e4 <dwt_modify32bitoffsetreg>
 800ff84:	2201      	movs	r2, #1
 800ff86:	9200      	str	r2, [sp, #0]
 800ff88:	23ff      	movs	r3, #255	; 0xff
 800ff8a:	4913      	ldr	r1, [pc, #76]	; (800ffd8 <ull_setdwstate+0xb4>)
 800ff8c:	4620      	mov	r0, r4
 800ff8e:	f7ff fd99 	bl	800fac4 <dwt_modify8bitoffsetreg>
 800ff92:	e7e8      	b.n	800ff66 <ull_setdwstate+0x42>
 800ff94:	2303      	movs	r3, #3
 800ff96:	9300      	str	r3, [sp, #0]
 800ff98:	23ff      	movs	r3, #255	; 0xff
 800ff9a:	2200      	movs	r2, #0
 800ff9c:	490d      	ldr	r1, [pc, #52]	; (800ffd4 <ull_setdwstate+0xb0>)
 800ff9e:	f7ff fd91 	bl	800fac4 <dwt_modify8bitoffsetreg>
 800ffa2:	4d0d      	ldr	r5, [pc, #52]	; (800ffd8 <ull_setdwstate+0xb4>)
 800ffa4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ffa8:	9300      	str	r3, [sp, #0]
 800ffaa:	f46f 7380 	mvn.w	r3, #256	; 0x100
 800ffae:	2200      	movs	r2, #0
 800ffb0:	4629      	mov	r1, r5
 800ffb2:	4620      	mov	r0, r4
 800ffb4:	f7ff fc16 	bl	800f7e4 <dwt_modify32bitoffsetreg>
 800ffb8:	2300      	movs	r3, #0
 800ffba:	9300      	str	r3, [sp, #0]
 800ffbc:	237f      	movs	r3, #127	; 0x7f
 800ffbe:	2202      	movs	r2, #2
 800ffc0:	4629      	mov	r1, r5
 800ffc2:	4620      	mov	r0, r4
 800ffc4:	f7ff fd7e 	bl	800fac4 <dwt_modify8bitoffsetreg>
 800ffc8:	2105      	movs	r1, #5
 800ffca:	4620      	mov	r0, r4
 800ffcc:	f7fe feb8 	bl	800ed40 <ull_force_clocks>
 800ffd0:	e7c9      	b.n	800ff66 <ull_setdwstate+0x42>
 800ffd2:	bf00      	nop
 800ffd4:	00110004 	.word	0x00110004
 800ffd8:	00110008 	.word	0x00110008
 800ffdc:	00090008 	.word	0x00090008

0800ffe0 <ull_configureframefilter>:
 800ffe0:	b530      	push	{r4, r5, lr}
 800ffe2:	b083      	sub	sp, #12
 800ffe4:	4605      	mov	r5, r0
 800ffe6:	2902      	cmp	r1, #2
 800ffe8:	d00e      	beq.n	8010008 <ull_configureframefilter+0x28>
 800ffea:	2400      	movs	r4, #0
 800ffec:	9400      	str	r4, [sp, #0]
 800ffee:	23fe      	movs	r3, #254	; 0xfe
 800fff0:	4622      	mov	r2, r4
 800fff2:	2110      	movs	r1, #16
 800fff4:	f7ff fd66 	bl	800fac4 <dwt_modify8bitoffsetreg>
 800fff8:	4623      	mov	r3, r4
 800fffa:	4622      	mov	r2, r4
 800fffc:	2114      	movs	r1, #20
 800fffe:	4628      	mov	r0, r5
 8010000:	f7fe fe7f 	bl	800ed02 <dwt_write16bitoffsetreg>
 8010004:	b003      	add	sp, #12
 8010006:	bd30      	pop	{r4, r5, pc}
 8010008:	4614      	mov	r4, r2
 801000a:	2301      	movs	r3, #1
 801000c:	9300      	str	r3, [sp, #0]
 801000e:	23ff      	movs	r3, #255	; 0xff
 8010010:	2200      	movs	r2, #0
 8010012:	2110      	movs	r1, #16
 8010014:	f7ff fd56 	bl	800fac4 <dwt_modify8bitoffsetreg>
 8010018:	4623      	mov	r3, r4
 801001a:	2200      	movs	r2, #0
 801001c:	2114      	movs	r1, #20
 801001e:	4628      	mov	r0, r5
 8010020:	f7fe fe6f 	bl	800ed02 <dwt_write16bitoffsetreg>
 8010024:	e7ee      	b.n	8010004 <ull_configureframefilter+0x24>
	...

08010028 <ull_run_pgfcal>:
 8010028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801002c:	b082      	sub	sp, #8
 801002e:	4605      	mov	r5, r0
 8010030:	4c2a      	ldr	r4, [pc, #168]	; (80100dc <ull_run_pgfcal+0xb4>)
 8010032:	2301      	movs	r3, #1
 8010034:	9300      	str	r3, [sp, #0]
 8010036:	23ff      	movs	r3, #255	; 0xff
 8010038:	2200      	movs	r2, #0
 801003a:	4621      	mov	r1, r4
 801003c:	f7ff fd42 	bl	800fac4 <dwt_modify8bitoffsetreg>
 8010040:	2310      	movs	r3, #16
 8010042:	9300      	str	r3, [sp, #0]
 8010044:	23ff      	movs	r3, #255	; 0xff
 8010046:	2200      	movs	r2, #0
 8010048:	4621      	mov	r1, r4
 801004a:	4628      	mov	r0, r5
 801004c:	f7ff fd3a 	bl	800fac4 <dwt_modify8bitoffsetreg>
 8010050:	2403      	movs	r4, #3
 8010052:	f04f 0814 	mov.w	r8, #20
 8010056:	4f22      	ldr	r7, [pc, #136]	; (80100e0 <ull_run_pgfcal+0xb8>)
 8010058:	2600      	movs	r6, #0
 801005a:	4640      	mov	r0, r8
 801005c:	f7f0 fa61 	bl	8000522 <deca_usleep>
 8010060:	4632      	mov	r2, r6
 8010062:	4639      	mov	r1, r7
 8010064:	4628      	mov	r0, r5
 8010066:	f7fe fa2d 	bl	800e4c4 <dwt_read8bitoffsetreg>
 801006a:	2801      	cmp	r0, #1
 801006c:	d034      	beq.n	80100d8 <ull_run_pgfcal+0xb0>
 801006e:	1e63      	subs	r3, r4, #1
 8010070:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8010074:	d1f1      	bne.n	801005a <ull_run_pgfcal+0x32>
 8010076:	f06f 0402 	mvn.w	r4, #2
 801007a:	4e18      	ldr	r6, [pc, #96]	; (80100dc <ull_run_pgfcal+0xb4>)
 801007c:	2300      	movs	r3, #0
 801007e:	461a      	mov	r2, r3
 8010080:	4631      	mov	r1, r6
 8010082:	4628      	mov	r0, r5
 8010084:	f7ff f88c 	bl	800f1a0 <dwt_write8bitoffsetreg>
 8010088:	2301      	movs	r3, #1
 801008a:	2200      	movs	r2, #0
 801008c:	4914      	ldr	r1, [pc, #80]	; (80100e0 <ull_run_pgfcal+0xb8>)
 801008e:	4628      	mov	r0, r5
 8010090:	f7ff f886 	bl	800f1a0 <dwt_write8bitoffsetreg>
 8010094:	2301      	movs	r3, #1
 8010096:	9300      	str	r3, [sp, #0]
 8010098:	23ff      	movs	r3, #255	; 0xff
 801009a:	2202      	movs	r2, #2
 801009c:	4631      	mov	r1, r6
 801009e:	4628      	mov	r0, r5
 80100a0:	f7ff fd10 	bl	800fac4 <dwt_modify8bitoffsetreg>
 80100a4:	2200      	movs	r2, #0
 80100a6:	490f      	ldr	r1, [pc, #60]	; (80100e4 <ull_run_pgfcal+0xbc>)
 80100a8:	4628      	mov	r0, r5
 80100aa:	f7fe f9b6 	bl	800e41a <dwt_read32bitoffsetreg>
 80100ae:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80100b2:	4298      	cmp	r0, r3
 80100b4:	bf08      	it	eq
 80100b6:	f06f 0403 	mvneq.w	r4, #3
 80100ba:	2200      	movs	r2, #0
 80100bc:	490a      	ldr	r1, [pc, #40]	; (80100e8 <ull_run_pgfcal+0xc0>)
 80100be:	4628      	mov	r0, r5
 80100c0:	f7fe f9ab 	bl	800e41a <dwt_read32bitoffsetreg>
 80100c4:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80100c8:	4298      	cmp	r0, r3
 80100ca:	bf14      	ite	ne
 80100cc:	4620      	movne	r0, r4
 80100ce:	f06f 0004 	mvneq.w	r0, #4
 80100d2:	b002      	add	sp, #8
 80100d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100d8:	2400      	movs	r4, #0
 80100da:	e7ce      	b.n	801007a <ull_run_pgfcal+0x52>
 80100dc:	0004000c 	.word	0x0004000c
 80100e0:	00040020 	.word	0x00040020
 80100e4:	00040014 	.word	0x00040014
 80100e8:	0004001c 	.word	0x0004001c

080100ec <ull_setinterrupt>:
 80100ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80100f0:	b083      	sub	sp, #12
 80100f2:	4605      	mov	r5, r0
 80100f4:	4688      	mov	r8, r1
 80100f6:	4617      	mov	r7, r2
 80100f8:	461c      	mov	r4, r3
 80100fa:	f7f0 f9e9 	bl	80004d0 <decamutexon>
 80100fe:	4606      	mov	r6, r0
 8010100:	2c02      	cmp	r4, #2
 8010102:	d019      	beq.n	8010138 <ull_setinterrupt+0x4c>
 8010104:	2c04      	cmp	r4, #4
 8010106:	d017      	beq.n	8010138 <ull_setinterrupt+0x4c>
 8010108:	f004 03fd 	and.w	r3, r4, #253	; 0xfd
 801010c:	2b01      	cmp	r3, #1
 801010e:	d03f      	beq.n	8010190 <ull_setinterrupt+0xa4>
 8010110:	f04f 0900 	mov.w	r9, #0
 8010114:	f8cd 9000 	str.w	r9, [sp]
 8010118:	ea6f 0308 	mvn.w	r3, r8
 801011c:	464a      	mov	r2, r9
 801011e:	213c      	movs	r1, #60	; 0x3c
 8010120:	4628      	mov	r0, r5
 8010122:	f7ff fb5f 	bl	800f7e4 <dwt_modify32bitoffsetreg>
 8010126:	f8cd 9000 	str.w	r9, [sp]
 801012a:	43fb      	mvns	r3, r7
 801012c:	464a      	mov	r2, r9
 801012e:	2140      	movs	r1, #64	; 0x40
 8010130:	4628      	mov	r0, r5
 8010132:	f7ff fb57 	bl	800f7e4 <dwt_modify32bitoffsetreg>
 8010136:	e00b      	b.n	8010150 <ull_setinterrupt+0x64>
 8010138:	4643      	mov	r3, r8
 801013a:	2200      	movs	r2, #0
 801013c:	213c      	movs	r1, #60	; 0x3c
 801013e:	4628      	mov	r0, r5
 8010140:	f7fe fe4a 	bl	800edd8 <dwt_write32bitoffsetreg>
 8010144:	463b      	mov	r3, r7
 8010146:	2200      	movs	r2, #0
 8010148:	2140      	movs	r1, #64	; 0x40
 801014a:	4628      	mov	r0, r5
 801014c:	f7fe fe44 	bl	800edd8 <dwt_write32bitoffsetreg>
 8010150:	3c03      	subs	r4, #3
 8010152:	b2e4      	uxtb	r4, r4
 8010154:	2c01      	cmp	r4, #1
 8010156:	d92d      	bls.n	80101b4 <ull_setinterrupt+0xc8>
 8010158:	2200      	movs	r2, #0
 801015a:	213c      	movs	r1, #60	; 0x3c
 801015c:	4628      	mov	r0, r5
 801015e:	f7fe f95c 	bl	800e41a <dwt_read32bitoffsetreg>
 8010162:	4603      	mov	r3, r0
 8010164:	2200      	movs	r2, #0
 8010166:	2144      	movs	r1, #68	; 0x44
 8010168:	4628      	mov	r0, r5
 801016a:	f7fe fe35 	bl	800edd8 <dwt_write32bitoffsetreg>
 801016e:	2200      	movs	r2, #0
 8010170:	2140      	movs	r1, #64	; 0x40
 8010172:	4628      	mov	r0, r5
 8010174:	f7fe f951 	bl	800e41a <dwt_read32bitoffsetreg>
 8010178:	4603      	mov	r3, r0
 801017a:	2200      	movs	r2, #0
 801017c:	2148      	movs	r1, #72	; 0x48
 801017e:	4628      	mov	r0, r5
 8010180:	f7fe fe2a 	bl	800edd8 <dwt_write32bitoffsetreg>
 8010184:	4630      	mov	r0, r6
 8010186:	f7f0 f9b4 	bl	80004f2 <decamutexoff>
 801018a:	b003      	add	sp, #12
 801018c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010190:	f8cd 8000 	str.w	r8, [sp]
 8010194:	f04f 33ff 	mov.w	r3, #4294967295
 8010198:	2200      	movs	r2, #0
 801019a:	213c      	movs	r1, #60	; 0x3c
 801019c:	4628      	mov	r0, r5
 801019e:	f7ff fb21 	bl	800f7e4 <dwt_modify32bitoffsetreg>
 80101a2:	9700      	str	r7, [sp, #0]
 80101a4:	f04f 33ff 	mov.w	r3, #4294967295
 80101a8:	2200      	movs	r2, #0
 80101aa:	2140      	movs	r1, #64	; 0x40
 80101ac:	4628      	mov	r0, r5
 80101ae:	f7ff fb19 	bl	800f7e4 <dwt_modify32bitoffsetreg>
 80101b2:	e7cd      	b.n	8010150 <ull_setinterrupt+0x64>
 80101b4:	2110      	movs	r1, #16
 80101b6:	9100      	str	r1, [sp, #0]
 80101b8:	23ff      	movs	r3, #255	; 0xff
 80101ba:	2202      	movs	r2, #2
 80101bc:	4628      	mov	r0, r5
 80101be:	f7ff fc81 	bl	800fac4 <dwt_modify8bitoffsetreg>
 80101c2:	e7c9      	b.n	8010158 <ull_setinterrupt+0x6c>

080101c4 <prs_ack_enable>:
 80101c4:	b500      	push	{lr}
 80101c6:	b083      	sub	sp, #12
 80101c8:	2900      	cmp	r1, #0
 80101ca:	bf0b      	itete	eq
 80101cc:	23ff      	moveq	r3, #255	; 0xff
 80101ce:	23f7      	movne	r3, #247	; 0xf7
 80101d0:	2200      	moveq	r2, #0
 80101d2:	2208      	movne	r2, #8
 80101d4:	9200      	str	r2, [sp, #0]
 80101d6:	2201      	movs	r2, #1
 80101d8:	2110      	movs	r1, #16
 80101da:	f7ff fc73 	bl	800fac4 <dwt_modify8bitoffsetreg>
 80101de:	b003      	add	sp, #12
 80101e0:	f85d fb04 	ldr.w	pc, [sp], #4

080101e4 <dwt_modify16bitoffsetreg>:
 80101e4:	b510      	push	{r4, lr}
 80101e6:	b084      	sub	sp, #16
 80101e8:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 80101ec:	f88d 300c 	strb.w	r3, [sp, #12]
 80101f0:	0a1b      	lsrs	r3, r3, #8
 80101f2:	f88d 300d 	strb.w	r3, [sp, #13]
 80101f6:	f88d 400e 	strb.w	r4, [sp, #14]
 80101fa:	0a24      	lsrs	r4, r4, #8
 80101fc:	f88d 400f 	strb.w	r4, [sp, #15]
 8010200:	f248 0302 	movw	r3, #32770	; 0x8002
 8010204:	9301      	str	r3, [sp, #4]
 8010206:	ab03      	add	r3, sp, #12
 8010208:	9300      	str	r3, [sp, #0]
 801020a:	2304      	movs	r3, #4
 801020c:	b292      	uxth	r2, r2
 801020e:	f7fe f87c 	bl	800e30a <dwt_xfer3xxx>
 8010212:	b004      	add	sp, #16
 8010214:	bd10      	pop	{r4, pc}
	...

08010218 <ull_configurestsmode>:
 8010218:	b530      	push	{r4, r5, lr}
 801021a:	b083      	sub	sp, #12
 801021c:	4605      	mov	r5, r0
 801021e:	460c      	mov	r4, r1
 8010220:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010222:	7559      	strb	r1, [r3, #21]
 8010224:	030b      	lsls	r3, r1, #12
 8010226:	f403 4330 	and.w	r3, r3, #45056	; 0xb000
 801022a:	9300      	str	r3, [sp, #0]
 801022c:	f644 73ff 	movw	r3, #20479	; 0x4fff
 8010230:	2200      	movs	r2, #0
 8010232:	2110      	movs	r1, #16
 8010234:	f7ff ffd6 	bl	80101e4 <dwt_modify16bitoffsetreg>
 8010238:	f004 0403 	and.w	r4, r4, #3
 801023c:	2c03      	cmp	r4, #3
 801023e:	bf0c      	ite	eq
 8010240:	4b04      	ldreq	r3, [pc, #16]	; (8010254 <ull_configurestsmode+0x3c>)
 8010242:	4b05      	ldrne	r3, [pc, #20]	; (8010258 <ull_configurestsmode+0x40>)
 8010244:	2200      	movs	r2, #0
 8010246:	4905      	ldr	r1, [pc, #20]	; (801025c <ull_configurestsmode+0x44>)
 8010248:	4628      	mov	r0, r5
 801024a:	f7fe fdc5 	bl	800edd8 <dwt_write32bitoffsetreg>
 801024e:	b003      	add	sp, #12
 8010250:	bd30      	pop	{r4, r5, pc}
 8010252:	bf00      	nop
 8010254:	af5f35cc 	.word	0xaf5f35cc
 8010258:	af5f584c 	.word	0xaf5f584c
 801025c:	0006000c 	.word	0x0006000c

08010260 <ull_setleds>:
 8010260:	b530      	push	{r4, r5, lr}
 8010262:	b083      	sub	sp, #12
 8010264:	4604      	mov	r4, r0
 8010266:	f011 0f01 	tst.w	r1, #1
 801026a:	d01f      	beq.n	80102ac <ull_setleds+0x4c>
 801026c:	460d      	mov	r5, r1
 801026e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8010272:	9300      	str	r3, [sp, #0]
 8010274:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 8010278:	2200      	movs	r2, #0
 801027a:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801027e:	f7ff fab1 	bl	800f7e4 <dwt_modify32bitoffsetreg>
 8010282:	f44f 0304 	mov.w	r3, #8650752	; 0x840000
 8010286:	9300      	str	r3, [sp, #0]
 8010288:	f04f 33ff 	mov.w	r3, #4294967295
 801028c:	2200      	movs	r2, #0
 801028e:	4918      	ldr	r1, [pc, #96]	; (80102f0 <ull_setleds+0x90>)
 8010290:	4620      	mov	r0, r4
 8010292:	f7ff faa7 	bl	800f7e4 <dwt_modify32bitoffsetreg>
 8010296:	f015 0f02 	tst.w	r5, #2
 801029a:	d11a      	bne.n	80102d2 <ull_setleds+0x72>
 801029c:	f44f 7388 	mov.w	r3, #272	; 0x110
 80102a0:	2200      	movs	r2, #0
 80102a2:	4914      	ldr	r1, [pc, #80]	; (80102f4 <ull_setleds+0x94>)
 80102a4:	4620      	mov	r0, r4
 80102a6:	f7fe fd97 	bl	800edd8 <dwt_write32bitoffsetreg>
 80102aa:	e010      	b.n	80102ce <ull_setleds+0x6e>
 80102ac:	2500      	movs	r5, #0
 80102ae:	9500      	str	r5, [sp, #0]
 80102b0:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 80102b4:	462a      	mov	r2, r5
 80102b6:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80102ba:	f7ff fa93 	bl	800f7e4 <dwt_modify32bitoffsetreg>
 80102be:	9500      	str	r5, [sp, #0]
 80102c0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80102c4:	462a      	mov	r2, r5
 80102c6:	490b      	ldr	r1, [pc, #44]	; (80102f4 <ull_setleds+0x94>)
 80102c8:	4620      	mov	r0, r4
 80102ca:	f7ff ff8b 	bl	80101e4 <dwt_modify16bitoffsetreg>
 80102ce:	b003      	add	sp, #12
 80102d0:	bd30      	pop	{r4, r5, pc}
 80102d2:	4d08      	ldr	r5, [pc, #32]	; (80102f4 <ull_setleds+0x94>)
 80102d4:	4b08      	ldr	r3, [pc, #32]	; (80102f8 <ull_setleds+0x98>)
 80102d6:	2200      	movs	r2, #0
 80102d8:	4629      	mov	r1, r5
 80102da:	4620      	mov	r0, r4
 80102dc:	f7fe fd7c 	bl	800edd8 <dwt_write32bitoffsetreg>
 80102e0:	f44f 7388 	mov.w	r3, #272	; 0x110
 80102e4:	2200      	movs	r2, #0
 80102e6:	4629      	mov	r1, r5
 80102e8:	4620      	mov	r0, r4
 80102ea:	f7fe fd75 	bl	800edd8 <dwt_write32bitoffsetreg>
 80102ee:	e7ee      	b.n	80102ce <ull_setleds+0x6e>
 80102f0:	00110004 	.word	0x00110004
 80102f4:	00110018 	.word	0x00110018
 80102f8:	000f0110 	.word	0x000f0110

080102fc <ull_pgf_cal>:
 80102fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80102fe:	b083      	sub	sp, #12
 8010300:	4604      	mov	r4, r0
 8010302:	2901      	cmp	r1, #1
 8010304:	d009      	beq.n	801031a <ull_pgf_cal+0x1e>
 8010306:	2014      	movs	r0, #20
 8010308:	f7f0 f90b 	bl	8000522 <deca_usleep>
 801030c:	4620      	mov	r0, r4
 801030e:	f7ff fe8b 	bl	8010028 <ull_run_pgfcal>
 8010312:	4605      	mov	r5, r0
 8010314:	4628      	mov	r0, r5
 8010316:	b003      	add	sp, #12
 8010318:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801031a:	4e0f      	ldr	r6, [pc, #60]	; (8010358 <ull_pgf_cal+0x5c>)
 801031c:	2200      	movs	r2, #0
 801031e:	4631      	mov	r1, r6
 8010320:	f7fe f891 	bl	800e446 <dwt_read16bitoffsetreg>
 8010324:	4607      	mov	r7, r0
 8010326:	f240 1307 	movw	r3, #263	; 0x107
 801032a:	9300      	str	r3, [sp, #0]
 801032c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010330:	2200      	movs	r2, #0
 8010332:	4631      	mov	r1, r6
 8010334:	4620      	mov	r0, r4
 8010336:	f7ff ff55 	bl	80101e4 <dwt_modify16bitoffsetreg>
 801033a:	2014      	movs	r0, #20
 801033c:	f7f0 f8f1 	bl	8000522 <deca_usleep>
 8010340:	4620      	mov	r0, r4
 8010342:	f7ff fe71 	bl	8010028 <ull_run_pgfcal>
 8010346:	4605      	mov	r5, r0
 8010348:	2200      	movs	r2, #0
 801034a:	9200      	str	r2, [sp, #0]
 801034c:	463b      	mov	r3, r7
 801034e:	4631      	mov	r1, r6
 8010350:	4620      	mov	r0, r4
 8010352:	f7ff ff47 	bl	80101e4 <dwt_modify16bitoffsetreg>
 8010356:	e7dd      	b.n	8010314 <ull_pgf_cal+0x18>
 8010358:	00070048 	.word	0x00070048

0801035c <ull_setgpiovalue>:
 801035c:	b500      	push	{lr}
 801035e:	b083      	sub	sp, #12
 8010360:	2a01      	cmp	r2, #1
 8010362:	d009      	beq.n	8010378 <ull_setgpiovalue+0x1c>
 8010364:	43cb      	mvns	r3, r1
 8010366:	2200      	movs	r2, #0
 8010368:	9200      	str	r2, [sp, #0]
 801036a:	b29b      	uxth	r3, r3
 801036c:	4906      	ldr	r1, [pc, #24]	; (8010388 <ull_setgpiovalue+0x2c>)
 801036e:	f7ff ff39 	bl	80101e4 <dwt_modify16bitoffsetreg>
 8010372:	b003      	add	sp, #12
 8010374:	f85d fb04 	ldr.w	pc, [sp], #4
 8010378:	9100      	str	r1, [sp, #0]
 801037a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801037e:	2200      	movs	r2, #0
 8010380:	4901      	ldr	r1, [pc, #4]	; (8010388 <ull_setgpiovalue+0x2c>)
 8010382:	f7ff ff2f 	bl	80101e4 <dwt_modify16bitoffsetreg>
 8010386:	e7f4      	b.n	8010372 <ull_setgpiovalue+0x16>
 8010388:	0005000c 	.word	0x0005000c

0801038c <ull_readaccdata>:
 801038c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801038e:	b083      	sub	sp, #12
 8010390:	4604      	mov	r4, r0
 8010392:	460f      	mov	r7, r1
 8010394:	4616      	mov	r6, r2
 8010396:	461d      	mov	r5, r3
 8010398:	f248 0340 	movw	r3, #32832	; 0x8040
 801039c:	9300      	str	r3, [sp, #0]
 801039e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80103a2:	2200      	movs	r2, #0
 80103a4:	4918      	ldr	r1, [pc, #96]	; (8010408 <ull_readaccdata+0x7c>)
 80103a6:	f7ff ff1d 	bl	80101e4 <dwt_modify16bitoffsetreg>
 80103aa:	19aa      	adds	r2, r5, r6
 80103ac:	f243 0301 	movw	r3, #12289	; 0x3001
 80103b0:	429a      	cmp	r2, r3
 80103b2:	dc15      	bgt.n	80103e0 <ull_readaccdata+0x54>
 80103b4:	2d7f      	cmp	r5, #127	; 0x7f
 80103b6:	d91d      	bls.n	80103f4 <ull_readaccdata+0x68>
 80103b8:	2315      	movs	r3, #21
 80103ba:	2200      	movs	r2, #0
 80103bc:	4913      	ldr	r1, [pc, #76]	; (801040c <ull_readaccdata+0x80>)
 80103be:	4620      	mov	r0, r4
 80103c0:	f7fe fd0a 	bl	800edd8 <dwt_write32bitoffsetreg>
 80103c4:	462b      	mov	r3, r5
 80103c6:	2200      	movs	r2, #0
 80103c8:	4911      	ldr	r1, [pc, #68]	; (8010410 <ull_readaccdata+0x84>)
 80103ca:	4620      	mov	r0, r4
 80103cc:	f7fe fd04 	bl	800edd8 <dwt_write32bitoffsetreg>
 80103d0:	9700      	str	r7, [sp, #0]
 80103d2:	4633      	mov	r3, r6
 80103d4:	2200      	movs	r2, #0
 80103d6:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 80103da:	4620      	mov	r0, r4
 80103dc:	f7fe f813 	bl	800e406 <dwt_readfromdevice>
 80103e0:	2200      	movs	r2, #0
 80103e2:	9200      	str	r2, [sp, #0]
 80103e4:	f647 73bf 	movw	r3, #32703	; 0x7fbf
 80103e8:	4907      	ldr	r1, [pc, #28]	; (8010408 <ull_readaccdata+0x7c>)
 80103ea:	4620      	mov	r0, r4
 80103ec:	f7ff fefa 	bl	80101e4 <dwt_modify16bitoffsetreg>
 80103f0:	b003      	add	sp, #12
 80103f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80103f4:	9700      	str	r7, [sp, #0]
 80103f6:	4633      	mov	r3, r6
 80103f8:	462a      	mov	r2, r5
 80103fa:	f44f 11a8 	mov.w	r1, #1376256	; 0x150000
 80103fe:	4620      	mov	r0, r4
 8010400:	f7fe f801 	bl	800e406 <dwt_readfromdevice>
 8010404:	e7ec      	b.n	80103e0 <ull_readaccdata+0x54>
 8010406:	bf00      	nop
 8010408:	00110004 	.word	0x00110004
 801040c:	001f0004 	.word	0x001f0004
 8010410:	001f0008 	.word	0x001f0008

08010414 <ull_configure>:
 8010414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010418:	b083      	sub	sp, #12
 801041a:	4604      	mov	r4, r0
 801041c:	460d      	mov	r5, r1
 801041e:	f891 9000 	ldrb.w	r9, [r1]
 8010422:	790b      	ldrb	r3, [r1, #4]
 8010424:	2b18      	cmp	r3, #24
 8010426:	d814      	bhi.n	8010452 <ull_configure+0x3e>
 8010428:	78cf      	ldrb	r7, [r1, #3]
 801042a:	2f18      	cmp	r7, #24
 801042c:	bf94      	ite	ls
 801042e:	2700      	movls	r7, #0
 8010430:	2701      	movhi	r7, #1
 8010432:	b2ff      	uxtb	r7, r7
 8010434:	79eb      	ldrb	r3, [r5, #7]
 8010436:	2b01      	cmp	r3, #1
 8010438:	bf0c      	ite	eq
 801043a:	2110      	moveq	r1, #16
 801043c:	2100      	movne	r1, #0
 801043e:	786b      	ldrb	r3, [r5, #1]
 8010440:	3b01      	subs	r3, #1
 8010442:	2b06      	cmp	r3, #6
 8010444:	d810      	bhi.n	8010468 <ull_configure+0x54>
 8010446:	e8df f003 	tbb	[pc, r3]
 801044a:	0f06      	.short	0x0f06
 801044c:	0f0c120f 	.word	0x0f0c120f
 8010450:	09          	.byte	0x09
 8010451:	00          	.byte	0x00
 8010452:	2701      	movs	r7, #1
 8010454:	e7ed      	b.n	8010432 <ull_configure+0x1e>
 8010456:	f04f 0a40 	mov.w	sl, #64	; 0x40
 801045a:	e00a      	b.n	8010472 <ull_configure+0x5e>
 801045c:	f04f 0a48 	mov.w	sl, #72	; 0x48
 8010460:	e007      	b.n	8010472 <ull_configure+0x5e>
 8010462:	f04f 0a80 	mov.w	sl, #128	; 0x80
 8010466:	e004      	b.n	8010472 <ull_configure+0x5e>
 8010468:	f44f 7a80 	mov.w	sl, #256	; 0x100
 801046c:	e001      	b.n	8010472 <ull_configure+0x5e>
 801046e:	f04f 0a20 	mov.w	sl, #32
 8010472:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8010474:	8a13      	ldrh	r3, [r2, #16]
 8010476:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 801047a:	8213      	strh	r3, [r2, #16]
 801047c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801047e:	79ea      	ldrb	r2, [r5, #7]
 8010480:	72da      	strb	r2, [r3, #11]
 8010482:	7b2e      	ldrb	r6, [r5, #12]
 8010484:	1cb3      	adds	r3, r6, #2
 8010486:	2601      	movs	r6, #1
 8010488:	409e      	lsls	r6, r3
 801048a:	fa1f f886 	uxth.w	r8, r6
 801048e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8010490:	4bca      	ldr	r3, [pc, #808]	; (80107bc <ull_configure+0x3a8>)
 8010492:	fb03 f308 	mul.w	r3, r3, r8
 8010496:	0bdb      	lsrs	r3, r3, #15
 8010498:	8253      	strh	r3, [r2, #18]
 801049a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801049c:	7aea      	ldrb	r2, [r5, #11]
 801049e:	755a      	strb	r2, [r3, #21]
 80104a0:	7a2b      	ldrb	r3, [r5, #8]
 80104a2:	015b      	lsls	r3, r3, #5
 80104a4:	f003 0320 	and.w	r3, r3, #32
 80104a8:	7b6a      	ldrb	r2, [r5, #13]
 80104aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80104ae:	7aea      	ldrb	r2, [r5, #11]
 80104b0:	0312      	lsls	r2, r2, #12
 80104b2:	f402 4230 	and.w	r2, r2, #45056	; 0xb000
 80104b6:	4313      	orrs	r3, r2
 80104b8:	430b      	orrs	r3, r1
 80104ba:	9300      	str	r3, [sp, #0]
 80104bc:	4bc0      	ldr	r3, [pc, #768]	; (80107c0 <ull_configure+0x3ac>)
 80104be:	2200      	movs	r2, #0
 80104c0:	2110      	movs	r1, #16
 80104c2:	4620      	mov	r0, r4
 80104c4:	f7ff f98e 	bl	800f7e4 <dwt_modify32bitoffsetreg>
 80104c8:	2f00      	cmp	r7, #0
 80104ca:	f040 80fe 	bne.w	80106ca <ull_configure+0x2b6>
 80104ce:	7aeb      	ldrb	r3, [r5, #11]
 80104d0:	b1bb      	cbz	r3, 8010502 <ull_configure+0xee>
 80104d2:	7b6b      	ldrb	r3, [r5, #13]
 80104d4:	2b01      	cmp	r3, #1
 80104d6:	7b28      	ldrb	r0, [r5, #12]
 80104d8:	bf94      	ite	ls
 80104da:	2203      	movls	r2, #3
 80104dc:	2204      	movhi	r2, #4
 80104de:	2110      	movs	r1, #16
 80104e0:	4bb8      	ldr	r3, [pc, #736]	; (80107c4 <ull_configure+0x3b0>)
 80104e2:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80104e6:	f7fd fef3 	bl	800e2d0 <get_sts_mnth>
 80104ea:	eb0a 0ac8 	add.w	sl, sl, r8, lsl #3
 80104ee:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80104f2:	9000      	str	r0, [sp, #0]
 80104f4:	f64f 7380 	movw	r3, #65408	; 0xff80
 80104f8:	2202      	movs	r2, #2
 80104fa:	49b3      	ldr	r1, [pc, #716]	; (80107c8 <ull_configure+0x3b4>)
 80104fc:	4620      	mov	r0, r4
 80104fe:	f7ff fe71 	bl	80101e4 <dwt_modify16bitoffsetreg>
 8010502:	2394      	movs	r3, #148	; 0x94
 8010504:	9300      	str	r3, [sp, #0]
 8010506:	4bb1      	ldr	r3, [pc, #708]	; (80107cc <ull_configure+0x3b8>)
 8010508:	2200      	movs	r2, #0
 801050a:	49b1      	ldr	r1, [pc, #708]	; (80107d0 <ull_configure+0x3bc>)
 801050c:	4620      	mov	r0, r4
 801050e:	f7ff f969 	bl	800f7e4 <dwt_modify32bitoffsetreg>
 8010512:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8010516:	f340 8103 	ble.w	8010720 <ull_configure+0x30c>
 801051a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 801051c:	8a13      	ldrh	r3, [r2, #16]
 801051e:	f043 0320 	orr.w	r3, r3, #32
 8010522:	8213      	strh	r3, [r2, #16]
 8010524:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010528:	9300      	str	r3, [sp, #0]
 801052a:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 801052e:	2200      	movs	r2, #0
 8010530:	49a8      	ldr	r1, [pc, #672]	; (80107d4 <ull_configure+0x3c0>)
 8010532:	4620      	mov	r0, r4
 8010534:	f7ff fe56 	bl	80101e4 <dwt_modify16bitoffsetreg>
 8010538:	7b6b      	ldrb	r3, [r5, #13]
 801053a:	2b01      	cmp	r3, #1
 801053c:	f000 80fb 	beq.w	8010736 <ull_configure+0x322>
 8010540:	78ab      	ldrb	r3, [r5, #2]
 8010542:	f043 0310 	orr.w	r3, r3, #16
 8010546:	9300      	str	r3, [sp, #0]
 8010548:	23fc      	movs	r3, #252	; 0xfc
 801054a:	2200      	movs	r2, #0
 801054c:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 8010550:	4620      	mov	r0, r4
 8010552:	f7ff fab7 	bl	800fac4 <dwt_modify8bitoffsetreg>
 8010556:	1e73      	subs	r3, r6, #1
 8010558:	b2db      	uxtb	r3, r3
 801055a:	2200      	movs	r2, #0
 801055c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8010560:	4620      	mov	r0, r4
 8010562:	f7fe fe1d 	bl	800f1a0 <dwt_write8bitoffsetreg>
 8010566:	786b      	ldrb	r3, [r5, #1]
 8010568:	2b07      	cmp	r3, #7
 801056a:	bf0c      	ite	eq
 801056c:	2108      	moveq	r1, #8
 801056e:	2100      	movne	r1, #0
 8010570:	4620      	mov	r0, r4
 8010572:	f7fe ff1b 	bl	800f3ac <ull_setplenfine>
 8010576:	7aeb      	ldrb	r3, [r5, #11]
 8010578:	f003 0303 	and.w	r3, r3, #3
 801057c:	2b03      	cmp	r3, #3
 801057e:	bf0c      	ite	eq
 8010580:	4b95      	ldreq	r3, [pc, #596]	; (80107d8 <ull_configure+0x3c4>)
 8010582:	4b96      	ldrne	r3, [pc, #600]	; (80107dc <ull_configure+0x3c8>)
 8010584:	2200      	movs	r2, #0
 8010586:	4996      	ldr	r1, [pc, #600]	; (80107e0 <ull_configure+0x3cc>)
 8010588:	4620      	mov	r0, r4
 801058a:	f7fe fc25 	bl	800edd8 <dwt_write32bitoffsetreg>
 801058e:	2200      	movs	r2, #0
 8010590:	4994      	ldr	r1, [pc, #592]	; (80107e4 <ull_configure+0x3d0>)
 8010592:	4620      	mov	r0, r4
 8010594:	f7fd ff41 	bl	800e41a <dwt_read32bitoffsetreg>
 8010598:	f420 50ff 	bic.w	r0, r0, #8160	; 0x1fe0
 801059c:	f020 001f 	bic.w	r0, r0, #31
 80105a0:	f1b9 0f09 	cmp.w	r9, #9
 80105a4:	bf08      	it	eq
 80105a6:	f040 0001 	orreq.w	r0, r0, #1
 80105aa:	792a      	ldrb	r2, [r5, #4]
 80105ac:	0212      	lsls	r2, r2, #8
 80105ae:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
 80105b2:	78eb      	ldrb	r3, [r5, #3]
 80105b4:	00db      	lsls	r3, r3, #3
 80105b6:	b2db      	uxtb	r3, r3
 80105b8:	431a      	orrs	r2, r3
 80105ba:	796b      	ldrb	r3, [r5, #5]
 80105bc:	005b      	lsls	r3, r3, #1
 80105be:	f003 0306 	and.w	r3, r3, #6
 80105c2:	4313      	orrs	r3, r2
 80105c4:	4303      	orrs	r3, r0
 80105c6:	2200      	movs	r2, #0
 80105c8:	4986      	ldr	r1, [pc, #536]	; (80107e4 <ull_configure+0x3d0>)
 80105ca:	4620      	mov	r0, r4
 80105cc:	f7fe fc04 	bl	800edd8 <dwt_write32bitoffsetreg>
 80105d0:	79aa      	ldrb	r2, [r5, #6]
 80105d2:	786b      	ldrb	r3, [r5, #1]
 80105d4:	031b      	lsls	r3, r3, #12
 80105d6:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 80105da:	9300      	str	r3, [sp, #0]
 80105dc:	f46f 4374 	mvn.w	r3, #62464	; 0xf400
 80105e0:	2200      	movs	r2, #0
 80105e2:	2120      	movs	r1, #32
 80105e4:	4620      	mov	r0, r4
 80105e6:	f7ff f8fd 	bl	800f7e4 <dwt_modify32bitoffsetreg>
 80105ea:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 80105ee:	b923      	cbnz	r3, 80105fa <ull_configure+0x1e6>
 80105f0:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 80105f4:	726b      	strb	r3, [r5, #9]
 80105f6:	2300      	movs	r3, #0
 80105f8:	72ab      	strb	r3, [r5, #10]
 80105fa:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 80105fe:	2202      	movs	r2, #2
 8010600:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 8010604:	4620      	mov	r0, r4
 8010606:	f7fe fb7c 	bl	800ed02 <dwt_write16bitoffsetreg>
 801060a:	2202      	movs	r2, #2
 801060c:	4976      	ldr	r1, [pc, #472]	; (80107e8 <ull_configure+0x3d4>)
 801060e:	4620      	mov	r0, r4
 8010610:	f7fd ff58 	bl	800e4c4 <dwt_read8bitoffsetreg>
 8010614:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8010616:	7bdb      	ldrb	r3, [r3, #15]
 8010618:	454b      	cmp	r3, r9
 801061a:	f000 8096 	beq.w	801074a <ull_configure+0x336>
 801061e:	2803      	cmp	r0, #3
 8010620:	f000 8097 	beq.w	8010752 <ull_configure+0x33e>
 8010624:	f1b9 0f09 	cmp.w	r9, #9
 8010628:	f000 8098 	beq.w	801075c <ull_configure+0x348>
 801062c:	4b6f      	ldr	r3, [pc, #444]	; (80107ec <ull_configure+0x3d8>)
 801062e:	9300      	str	r3, [sp, #0]
 8010630:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010634:	2200      	movs	r2, #0
 8010636:	496e      	ldr	r1, [pc, #440]	; (80107f0 <ull_configure+0x3dc>)
 8010638:	4620      	mov	r0, r4
 801063a:	f7ff f8d3 	bl	800f7e4 <dwt_modify32bitoffsetreg>
 801063e:	f641 733c 	movw	r3, #7996	; 0x1f3c
 8010642:	2200      	movs	r2, #0
 8010644:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 8010648:	4620      	mov	r0, r4
 801064a:	f7fe fb5a 	bl	800ed02 <dwt_write16bitoffsetreg>
 801064e:	2314      	movs	r3, #20
 8010650:	2201      	movs	r2, #1
 8010652:	4968      	ldr	r1, [pc, #416]	; (80107f4 <ull_configure+0x3e0>)
 8010654:	4620      	mov	r0, r4
 8010656:	f7fe fda3 	bl	800f1a0 <dwt_write8bitoffsetreg>
 801065a:	230e      	movs	r3, #14
 801065c:	2202      	movs	r2, #2
 801065e:	4966      	ldr	r1, [pc, #408]	; (80107f8 <ull_configure+0x3e4>)
 8010660:	4620      	mov	r0, r4
 8010662:	f7fe fd9d 	bl	800f1a0 <dwt_write8bitoffsetreg>
 8010666:	2381      	movs	r3, #129	; 0x81
 8010668:	2200      	movs	r2, #0
 801066a:	4964      	ldr	r1, [pc, #400]	; (80107fc <ull_configure+0x3e8>)
 801066c:	4620      	mov	r0, r4
 801066e:	f7fe fd97 	bl	800f1a0 <dwt_write8bitoffsetreg>
 8010672:	2600      	movs	r6, #0
 8010674:	9600      	str	r6, [sp, #0]
 8010676:	23fc      	movs	r3, #252	; 0xfc
 8010678:	2203      	movs	r2, #3
 801067a:	4961      	ldr	r1, [pc, #388]	; (8010800 <ull_configure+0x3ec>)
 801067c:	4620      	mov	r0, r4
 801067e:	f7ff fa21 	bl	800fac4 <dwt_modify8bitoffsetreg>
 8010682:	2302      	movs	r3, #2
 8010684:	4632      	mov	r2, r6
 8010686:	2144      	movs	r1, #68	; 0x44
 8010688:	4620      	mov	r0, r4
 801068a:	f7fe fd89 	bl	800f1a0 <dwt_write8bitoffsetreg>
 801068e:	2101      	movs	r1, #1
 8010690:	4620      	mov	r0, r4
 8010692:	f7ff fc47 	bl	800ff24 <ull_setdwstate>
 8010696:	f04f 0b32 	mov.w	fp, #50	; 0x32
 801069a:	f04f 0814 	mov.w	r8, #20
 801069e:	4637      	mov	r7, r6
 80106a0:	2644      	movs	r6, #68	; 0x44
 80106a2:	4640      	mov	r0, r8
 80106a4:	f7ef ff3d 	bl	8000522 <deca_usleep>
 80106a8:	463a      	mov	r2, r7
 80106aa:	4631      	mov	r1, r6
 80106ac:	4620      	mov	r0, r4
 80106ae:	f7fd ff09 	bl	800e4c4 <dwt_read8bitoffsetreg>
 80106b2:	f010 0f02 	tst.w	r0, #2
 80106b6:	f040 80af 	bne.w	8010818 <ull_configure+0x404>
 80106ba:	f10b 33ff 	add.w	r3, fp, #4294967295
 80106be:	f013 0bff 	ands.w	fp, r3, #255	; 0xff
 80106c2:	d1ee      	bne.n	80106a2 <ull_configure+0x28e>
 80106c4:	f06f 0001 	mvn.w	r0, #1
 80106c8:	e0e6      	b.n	8010898 <ull_configure+0x484>
 80106ca:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80106cc:	8a13      	ldrh	r3, [r2, #16]
 80106ce:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80106d2:	8213      	strh	r3, [r2, #16]
 80106d4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80106d8:	9300      	str	r3, [sp, #0]
 80106da:	f46f 5340 	mvn.w	r3, #12288	; 0x3000
 80106de:	2200      	movs	r2, #0
 80106e0:	493c      	ldr	r1, [pc, #240]	; (80107d4 <ull_configure+0x3c0>)
 80106e2:	4620      	mov	r0, r4
 80106e4:	f7ff f87e 	bl	800f7e4 <dwt_modify32bitoffsetreg>
 80106e8:	f240 3306 	movw	r3, #774	; 0x306
 80106ec:	2200      	movs	r2, #0
 80106ee:	4945      	ldr	r1, [pc, #276]	; (8010804 <ull_configure+0x3f0>)
 80106f0:	4620      	mov	r0, r4
 80106f2:	f7fe fb71 	bl	800edd8 <dwt_write32bitoffsetreg>
 80106f6:	2300      	movs	r3, #0
 80106f8:	461a      	mov	r2, r3
 80106fa:	4943      	ldr	r1, [pc, #268]	; (8010808 <ull_configure+0x3f4>)
 80106fc:	4620      	mov	r0, r4
 80106fe:	f7fe fb6b 	bl	800edd8 <dwt_write32bitoffsetreg>
 8010702:	4b42      	ldr	r3, [pc, #264]	; (801080c <ull_configure+0x3f8>)
 8010704:	2200      	movs	r2, #0
 8010706:	4930      	ldr	r1, [pc, #192]	; (80107c8 <ull_configure+0x3b4>)
 8010708:	4620      	mov	r0, r4
 801070a:	f7fe fb65 	bl	800edd8 <dwt_write32bitoffsetreg>
 801070e:	239d      	movs	r3, #157	; 0x9d
 8010710:	9300      	str	r3, [sp, #0]
 8010712:	4b2e      	ldr	r3, [pc, #184]	; (80107cc <ull_configure+0x3b8>)
 8010714:	2200      	movs	r2, #0
 8010716:	492e      	ldr	r1, [pc, #184]	; (80107d0 <ull_configure+0x3bc>)
 8010718:	4620      	mov	r0, r4
 801071a:	f7ff f863 	bl	800f7e4 <dwt_modify32bitoffsetreg>
 801071e:	e70b      	b.n	8010538 <ull_configure+0x124>
 8010720:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8010724:	9300      	str	r3, [sp, #0]
 8010726:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 801072a:	2200      	movs	r2, #0
 801072c:	4929      	ldr	r1, [pc, #164]	; (80107d4 <ull_configure+0x3c0>)
 801072e:	4620      	mov	r0, r4
 8010730:	f7ff fd58 	bl	80101e4 <dwt_modify16bitoffsetreg>
 8010734:	e700      	b.n	8010538 <ull_configure+0x124>
 8010736:	78ab      	ldrb	r3, [r5, #2]
 8010738:	9300      	str	r3, [sp, #0]
 801073a:	23ec      	movs	r3, #236	; 0xec
 801073c:	2200      	movs	r2, #0
 801073e:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 8010742:	4620      	mov	r0, r4
 8010744:	f7ff f9be 	bl	800fac4 <dwt_modify8bitoffsetreg>
 8010748:	e705      	b.n	8010556 <ull_configure+0x142>
 801074a:	2803      	cmp	r0, #3
 801074c:	f47f af6a 	bne.w	8010624 <ull_configure+0x210>
 8010750:	e065      	b.n	801081e <ull_configure+0x40a>
 8010752:	2102      	movs	r1, #2
 8010754:	4620      	mov	r0, r4
 8010756:	f7ff fbe5 	bl	800ff24 <ull_setdwstate>
 801075a:	e763      	b.n	8010624 <ull_configure+0x210>
 801075c:	4b2c      	ldr	r3, [pc, #176]	; (8010810 <ull_configure+0x3fc>)
 801075e:	9300      	str	r3, [sp, #0]
 8010760:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010764:	2200      	movs	r2, #0
 8010766:	4922      	ldr	r1, [pc, #136]	; (80107f0 <ull_configure+0x3dc>)
 8010768:	4620      	mov	r0, r4
 801076a:	f7ff f83b 	bl	800f7e4 <dwt_modify32bitoffsetreg>
 801076e:	f640 733c 	movw	r3, #3900	; 0xf3c
 8010772:	2200      	movs	r2, #0
 8010774:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 8010778:	4620      	mov	r0, r4
 801077a:	f7fe fac2 	bl	800ed02 <dwt_write16bitoffsetreg>
 801077e:	e766      	b.n	801064e <ull_configure+0x23a>
 8010780:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010784:	9300      	str	r3, [sp, #0]
 8010786:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801078a:	2200      	movs	r2, #0
 801078c:	4911      	ldr	r1, [pc, #68]	; (80107d4 <ull_configure+0x3c0>)
 801078e:	4620      	mov	r0, r4
 8010790:	f7ff fd28 	bl	80101e4 <dwt_modify16bitoffsetreg>
 8010794:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8010796:	8a13      	ldrh	r3, [r2, #16]
 8010798:	f043 0308 	orr.w	r3, r3, #8
 801079c:	8213      	strh	r3, [r2, #16]
 801079e:	e050      	b.n	8010842 <ull_configure+0x42e>
 80107a0:	2200      	movs	r2, #0
 80107a2:	9200      	str	r2, [sp, #0]
 80107a4:	23fe      	movs	r3, #254	; 0xfe
 80107a6:	491b      	ldr	r1, [pc, #108]	; (8010814 <ull_configure+0x400>)
 80107a8:	4620      	mov	r0, r4
 80107aa:	f7ff f98b 	bl	800fac4 <dwt_modify8bitoffsetreg>
 80107ae:	e052      	b.n	8010856 <ull_configure+0x442>
 80107b0:	2101      	movs	r1, #1
 80107b2:	4620      	mov	r0, r4
 80107b4:	f7ff fda2 	bl	80102fc <ull_pgf_cal>
 80107b8:	e06b      	b.n	8010892 <ull_configure+0x47e>
 80107ba:	bf00      	nop
 80107bc:	00026668 	.word	0x00026668
 80107c0:	fffc4fcf 	.word	0xfffc4fcf
 80107c4:	08013398 	.word	0x08013398
 80107c8:	000e0014 	.word	0x000e0014
 80107cc:	bfffff00 	.word	0xbfffff00
 80107d0:	000e0018 	.word	0x000e0018
 80107d4:	000b0008 	.word	0x000b0008
 80107d8:	af5f35cc 	.word	0xaf5f35cc
 80107dc:	af5f584c 	.word	0xaf5f584c
 80107e0:	0006000c 	.word	0x0006000c
 80107e4:	00010008 	.word	0x00010008
 80107e8:	000f0030 	.word	0x000f0030
 80107ec:	1c071134 	.word	0x1c071134
 80107f0:	0007001c 	.word	0x0007001c
 80107f4:	00070050 	.word	0x00070050
 80107f8:	00070018 	.word	0x00070018
 80107fc:	00090008 	.word	0x00090008
 8010800:	00090004 	.word	0x00090004
 8010804:	000e000c 	.word	0x000e000c
 8010808:	000e0010 	.word	0x000e0010
 801080c:	000c5a0a 	.word	0x000c5a0a
 8010810:	1c010034 	.word	0x1c010034
 8010814:	00030018 	.word	0x00030018
 8010818:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801081a:	f883 900f 	strb.w	r9, [r3, #15]
 801081e:	792b      	ldrb	r3, [r5, #4]
 8010820:	3b09      	subs	r3, #9
 8010822:	b2db      	uxtb	r3, r3
 8010824:	2b0f      	cmp	r3, #15
 8010826:	d8bb      	bhi.n	80107a0 <ull_configure+0x38c>
 8010828:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801082a:	7a1b      	ldrb	r3, [r3, #8]
 801082c:	2b01      	cmp	r3, #1
 801082e:	d0a7      	beq.n	8010780 <ull_configure+0x36c>
 8010830:	4649      	mov	r1, r9
 8010832:	4620      	mov	r0, r4
 8010834:	f7fe fb9c 	bl	800ef70 <ull_configmrxlut>
 8010838:	6d22      	ldr	r2, [r4, #80]	; 0x50
 801083a:	8a13      	ldrh	r3, [r2, #16]
 801083c:	f023 0308 	bic.w	r3, r3, #8
 8010840:	8213      	strh	r3, [r2, #16]
 8010842:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8010846:	9300      	str	r3, [sp, #0]
 8010848:	f248 13ff 	movw	r3, #33279	; 0x81ff
 801084c:	2200      	movs	r2, #0
 801084e:	4914      	ldr	r1, [pc, #80]	; (80108a0 <ull_configure+0x48c>)
 8010850:	4620      	mov	r0, r4
 8010852:	f7ff fcc7 	bl	80101e4 <dwt_modify16bitoffsetreg>
 8010856:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 801085a:	bfcc      	ite	gt
 801085c:	f04f 5300 	movgt.w	r3, #536870912	; 0x20000000
 8010860:	f04f 53a0 	movle.w	r3, #335544320	; 0x14000000
 8010864:	9300      	str	r3, [sp, #0]
 8010866:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801086a:	2200      	movs	r2, #0
 801086c:	490d      	ldr	r1, [pc, #52]	; (80108a4 <ull_configure+0x490>)
 801086e:	4620      	mov	r0, r4
 8010870:	f7fe ffb8 	bl	800f7e4 <dwt_modify32bitoffsetreg>
 8010874:	2301      	movs	r3, #1
 8010876:	9300      	str	r3, [sp, #0]
 8010878:	23ff      	movs	r3, #255	; 0xff
 801087a:	2202      	movs	r2, #2
 801087c:	490a      	ldr	r1, [pc, #40]	; (80108a8 <ull_configure+0x494>)
 801087e:	4620      	mov	r0, r4
 8010880:	f7ff f920 	bl	800fac4 <dwt_modify8bitoffsetreg>
 8010884:	2200      	movs	r2, #0
 8010886:	4909      	ldr	r1, [pc, #36]	; (80108ac <ull_configure+0x498>)
 8010888:	4620      	mov	r0, r4
 801088a:	f7fd fdc6 	bl	800e41a <dwt_read32bitoffsetreg>
 801088e:	2800      	cmp	r0, #0
 8010890:	d08e      	beq.n	80107b0 <ull_configure+0x39c>
 8010892:	4620      	mov	r0, r4
 8010894:	f7ff f98a 	bl	800fbac <ull_adcoffsetscalibration>
 8010898:	b003      	add	sp, #12
 801089a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801089e:	bf00      	nop
 80108a0:	00030018 	.word	0x00030018
 80108a4:	00060010 	.word	0x00060010
 80108a8:	0004000c 	.word	0x0004000c
 80108ac:	00040014 	.word	0x00040014

080108b0 <ull_initialise>:
 80108b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108b4:	b082      	sub	sp, #8
 80108b6:	4605      	mov	r5, r0
 80108b8:	460e      	mov	r6, r1
 80108ba:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d05b      	beq.n	8010978 <ull_initialise+0xc8>
 80108c0:	6d2c      	ldr	r4, [r5, #80]	; 0x50
 80108c2:	2300      	movs	r3, #0
 80108c4:	73a3      	strb	r3, [r4, #14]
 80108c6:	2202      	movs	r2, #2
 80108c8:	8222      	strh	r2, [r4, #16]
 80108ca:	7523      	strb	r3, [r4, #20]
 80108cc:	7563      	strb	r3, [r4, #21]
 80108ce:	73e3      	strb	r3, [r4, #15]
 80108d0:	7263      	strb	r3, [r4, #9]
 80108d2:	72a3      	strb	r3, [r4, #10]
 80108d4:	2104      	movs	r1, #4
 80108d6:	4628      	mov	r0, r5
 80108d8:	f7fe fa5c 	bl	800ed94 <_dwt_otpread>
 80108dc:	4607      	mov	r7, r0
 80108de:	2105      	movs	r1, #5
 80108e0:	4628      	mov	r0, r5
 80108e2:	f7fe fa57 	bl	800ed94 <_dwt_otpread>
 80108e6:	4680      	mov	r8, r0
 80108e8:	210a      	movs	r1, #10
 80108ea:	4628      	mov	r0, r5
 80108ec:	f7fe fa52 	bl	800ed94 <_dwt_otpread>
 80108f0:	b12f      	cbz	r7, 80108fe <ull_initialise+0x4e>
 80108f2:	f1b8 0f00 	cmp.w	r8, #0
 80108f6:	d002      	beq.n	80108fe <ull_initialise+0x4e>
 80108f8:	b280      	uxth	r0, r0
 80108fa:	2800      	cmp	r0, #0
 80108fc:	d141      	bne.n	8010982 <ull_initialise+0xd2>
 80108fe:	2120      	movs	r1, #32
 8010900:	4628      	mov	r0, r5
 8010902:	f7fe fa47 	bl	800ed94 <_dwt_otpread>
 8010906:	f5b0 7f10 	cmp.w	r0, #576	; 0x240
 801090a:	bf0c      	ite	eq
 801090c:	2301      	moveq	r3, #1
 801090e:	2300      	movne	r3, #0
 8010910:	7223      	strb	r3, [r4, #8]
 8010912:	f016 0f10 	tst.w	r6, #16
 8010916:	d143      	bne.n	80109a0 <ull_initialise+0xf0>
 8010918:	f016 0f20 	tst.w	r6, #32
 801091c:	d146      	bne.n	80109ac <ull_initialise+0xfc>
 801091e:	f016 0f40 	tst.w	r6, #64	; 0x40
 8010922:	d149      	bne.n	80109b8 <ull_initialise+0x108>
 8010924:	f016 0f80 	tst.w	r6, #128	; 0x80
 8010928:	d14d      	bne.n	80109c6 <ull_initialise+0x116>
 801092a:	7aa3      	ldrb	r3, [r4, #10]
 801092c:	b90b      	cbnz	r3, 8010932 <ull_initialise+0x82>
 801092e:	2385      	movs	r3, #133	; 0x85
 8010930:	72a3      	strb	r3, [r4, #10]
 8010932:	7a63      	ldrb	r3, [r4, #9]
 8010934:	b90b      	cbnz	r3, 801093a <ull_initialise+0x8a>
 8010936:	2374      	movs	r3, #116	; 0x74
 8010938:	7263      	strb	r3, [r4, #9]
 801093a:	211f      	movs	r1, #31
 801093c:	4628      	mov	r0, r5
 801093e:	f7fe fa29 	bl	800ed94 <_dwt_otpread>
 8010942:	7320      	strb	r0, [r4, #12]
 8010944:	211e      	movs	r1, #30
 8010946:	4628      	mov	r0, r5
 8010948:	f7fe fa24 	bl	800ed94 <_dwt_otpread>
 801094c:	f010 003f 	ands.w	r0, r0, #63	; 0x3f
 8010950:	bf12      	itee	ne
 8010952:	7360      	strbne	r0, [r4, #13]
 8010954:	232e      	moveq	r3, #46	; 0x2e
 8010956:	7363      	strbeq	r3, [r4, #13]
 8010958:	7b63      	ldrb	r3, [r4, #13]
 801095a:	2200      	movs	r2, #0
 801095c:	4920      	ldr	r1, [pc, #128]	; (80109e0 <ull_initialise+0x130>)
 801095e:	4628      	mov	r0, r5
 8010960:	f7fe fc1e 	bl	800f1a0 <dwt_write8bitoffsetreg>
 8010964:	2135      	movs	r1, #53	; 0x35
 8010966:	4628      	mov	r0, r5
 8010968:	f7fe fa14 	bl	800ed94 <_dwt_otpread>
 801096c:	4603      	mov	r3, r0
 801096e:	bb80      	cbnz	r0, 80109d2 <ull_initialise+0x122>
 8010970:	2000      	movs	r0, #0
 8010972:	b002      	add	sp, #8
 8010974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010978:	2028      	movs	r0, #40	; 0x28
 801097a:	f002 f9e7 	bl	8012d4c <malloc>
 801097e:	6528      	str	r0, [r5, #80]	; 0x50
 8010980:	e79e      	b.n	80108c0 <ull_initialise+0x10>
 8010982:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8010986:	9300      	str	r3, [sp, #0]
 8010988:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801098c:	2200      	movs	r2, #0
 801098e:	4915      	ldr	r1, [pc, #84]	; (80109e4 <ull_initialise+0x134>)
 8010990:	4628      	mov	r0, r5
 8010992:	f7ff fc27 	bl	80101e4 <dwt_modify16bitoffsetreg>
 8010996:	8a23      	ldrh	r3, [r4, #16]
 8010998:	f043 0314 	orr.w	r3, r3, #20
 801099c:	8223      	strh	r3, [r4, #16]
 801099e:	e7ae      	b.n	80108fe <ull_initialise+0x4e>
 80109a0:	2106      	movs	r1, #6
 80109a2:	4628      	mov	r0, r5
 80109a4:	f7fe f9f6 	bl	800ed94 <_dwt_otpread>
 80109a8:	6020      	str	r0, [r4, #0]
 80109aa:	e7b5      	b.n	8010918 <ull_initialise+0x68>
 80109ac:	2107      	movs	r1, #7
 80109ae:	4628      	mov	r0, r5
 80109b0:	f7fe f9f0 	bl	800ed94 <_dwt_otpread>
 80109b4:	6060      	str	r0, [r4, #4]
 80109b6:	e7b2      	b.n	801091e <ull_initialise+0x6e>
 80109b8:	2108      	movs	r1, #8
 80109ba:	4628      	mov	r0, r5
 80109bc:	f7fe f9ea 	bl	800ed94 <_dwt_otpread>
 80109c0:	0c00      	lsrs	r0, r0, #16
 80109c2:	7260      	strb	r0, [r4, #9]
 80109c4:	e7ae      	b.n	8010924 <ull_initialise+0x74>
 80109c6:	2109      	movs	r1, #9
 80109c8:	4628      	mov	r0, r5
 80109ca:	f7fe f9e3 	bl	800ed94 <_dwt_otpread>
 80109ce:	72a0      	strb	r0, [r4, #10]
 80109d0:	e7ab      	b.n	801092a <ull_initialise+0x7a>
 80109d2:	2200      	movs	r2, #0
 80109d4:	4904      	ldr	r1, [pc, #16]	; (80109e8 <ull_initialise+0x138>)
 80109d6:	4628      	mov	r0, r5
 80109d8:	f7fe f9fe 	bl	800edd8 <dwt_write32bitoffsetreg>
 80109dc:	e7c8      	b.n	8010970 <ull_initialise+0xc0>
 80109de:	bf00      	nop
 80109e0:	00090014 	.word	0x00090014
 80109e4:	000b0008 	.word	0x000b0008
 80109e8:	00090004 	.word	0x00090004

080109ec <ull_rxenable>:
 80109ec:	b530      	push	{r4, r5, lr}
 80109ee:	b083      	sub	sp, #12
 80109f0:	4605      	mov	r5, r0
 80109f2:	460c      	mov	r4, r1
 80109f4:	b171      	cbz	r1, 8010a14 <ull_rxenable+0x28>
 80109f6:	f021 0302 	bic.w	r3, r1, #2
 80109fa:	3b01      	subs	r3, #1
 80109fc:	2b0f      	cmp	r3, #15
 80109fe:	d862      	bhi.n	8010ac6 <ull_rxenable+0xda>
 8010a00:	e8df f003 	tbb	[pc, r3]
 8010a04:	24616111 	.word	0x24616111
 8010a08:	2d616161 	.word	0x2d616161
 8010a0c:	61616161 	.word	0x61616161
 8010a10:	3a616161 	.word	0x3a616161
 8010a14:	2102      	movs	r1, #2
 8010a16:	9101      	str	r1, [sp, #4]
 8010a18:	2200      	movs	r2, #0
 8010a1a:	9200      	str	r2, [sp, #0]
 8010a1c:	4613      	mov	r3, r2
 8010a1e:	f7fd fc74 	bl	800e30a <dwt_xfer3xxx>
 8010a22:	4620      	mov	r0, r4
 8010a24:	e010      	b.n	8010a48 <ull_rxenable+0x5c>
 8010a26:	2302      	movs	r3, #2
 8010a28:	9301      	str	r3, [sp, #4]
 8010a2a:	2200      	movs	r2, #0
 8010a2c:	9200      	str	r2, [sp, #0]
 8010a2e:	4613      	mov	r3, r2
 8010a30:	2104      	movs	r1, #4
 8010a32:	f7fd fc6a 	bl	800e30a <dwt_xfer3xxx>
 8010a36:	2203      	movs	r2, #3
 8010a38:	2144      	movs	r1, #68	; 0x44
 8010a3a:	4628      	mov	r0, r5
 8010a3c:	f7fd fd42 	bl	800e4c4 <dwt_read8bitoffsetreg>
 8010a40:	f010 0f08 	tst.w	r0, #8
 8010a44:	d125      	bne.n	8010a92 <ull_rxenable+0xa6>
 8010a46:	2000      	movs	r0, #0
 8010a48:	b003      	add	sp, #12
 8010a4a:	bd30      	pop	{r4, r5, pc}
 8010a4c:	2302      	movs	r3, #2
 8010a4e:	9301      	str	r3, [sp, #4]
 8010a50:	2200      	movs	r2, #0
 8010a52:	9200      	str	r2, [sp, #0]
 8010a54:	4613      	mov	r3, r2
 8010a56:	210a      	movs	r1, #10
 8010a58:	f7fd fc57 	bl	800e30a <dwt_xfer3xxx>
 8010a5c:	e7eb      	b.n	8010a36 <ull_rxenable+0x4a>
 8010a5e:	2100      	movs	r1, #0
 8010a60:	f7fe f9cf 	bl	800ee02 <_dwt_adjust_delaytime>
 8010a64:	2302      	movs	r3, #2
 8010a66:	9301      	str	r3, [sp, #4]
 8010a68:	2200      	movs	r2, #0
 8010a6a:	9200      	str	r2, [sp, #0]
 8010a6c:	4613      	mov	r3, r2
 8010a6e:	2108      	movs	r1, #8
 8010a70:	4628      	mov	r0, r5
 8010a72:	f7fd fc4a 	bl	800e30a <dwt_xfer3xxx>
 8010a76:	e7de      	b.n	8010a36 <ull_rxenable+0x4a>
 8010a78:	2101      	movs	r1, #1
 8010a7a:	f7fe f9c2 	bl	800ee02 <_dwt_adjust_delaytime>
 8010a7e:	2302      	movs	r3, #2
 8010a80:	9301      	str	r3, [sp, #4]
 8010a82:	2200      	movs	r2, #0
 8010a84:	9200      	str	r2, [sp, #0]
 8010a86:	4613      	mov	r3, r2
 8010a88:	2106      	movs	r1, #6
 8010a8a:	4628      	mov	r0, r5
 8010a8c:	f7fd fc3d 	bl	800e30a <dwt_xfer3xxx>
 8010a90:	e7d1      	b.n	8010a36 <ull_rxenable+0x4a>
 8010a92:	2302      	movs	r3, #2
 8010a94:	9301      	str	r3, [sp, #4]
 8010a96:	2100      	movs	r1, #0
 8010a98:	9100      	str	r1, [sp, #0]
 8010a9a:	460b      	mov	r3, r1
 8010a9c:	460a      	mov	r2, r1
 8010a9e:	4628      	mov	r0, r5
 8010aa0:	f7fd fc33 	bl	800e30a <dwt_xfer3xxx>
 8010aa4:	f014 0f02 	tst.w	r4, #2
 8010aa8:	d002      	beq.n	8010ab0 <ull_rxenable+0xc4>
 8010aaa:	f04f 30ff 	mov.w	r0, #4294967295
 8010aae:	e7cb      	b.n	8010a48 <ull_rxenable+0x5c>
 8010ab0:	2102      	movs	r1, #2
 8010ab2:	9101      	str	r1, [sp, #4]
 8010ab4:	2200      	movs	r2, #0
 8010ab6:	9200      	str	r2, [sp, #0]
 8010ab8:	4613      	mov	r3, r2
 8010aba:	4628      	mov	r0, r5
 8010abc:	f7fd fc25 	bl	800e30a <dwt_xfer3xxx>
 8010ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8010ac4:	e7c0      	b.n	8010a48 <ull_rxenable+0x5c>
 8010ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8010aca:	e7bd      	b.n	8010a48 <ull_rxenable+0x5c>

08010acc <ull_softreset_no_sema_fcmd>:
 8010acc:	b570      	push	{r4, r5, r6, lr}
 8010ace:	b082      	sub	sp, #8
 8010ad0:	4606      	mov	r6, r0
 8010ad2:	2502      	movs	r5, #2
 8010ad4:	9501      	str	r5, [sp, #4]
 8010ad6:	2400      	movs	r4, #0
 8010ad8:	9400      	str	r4, [sp, #0]
 8010ada:	4623      	mov	r3, r4
 8010adc:	4622      	mov	r2, r4
 8010ade:	2119      	movs	r1, #25
 8010ae0:	f7fd fc13 	bl	800e30a <dwt_xfer3xxx>
 8010ae4:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8010ae6:	739c      	strb	r4, [r3, #14]
 8010ae8:	821d      	strh	r5, [r3, #16]
 8010aea:	751c      	strb	r4, [r3, #20]
 8010aec:	755c      	strb	r4, [r3, #21]
 8010aee:	73dc      	strb	r4, [r3, #15]
 8010af0:	b002      	add	sp, #8
 8010af2:	bd70      	pop	{r4, r5, r6, pc}

08010af4 <ull_softreset_fcmd>:
 8010af4:	b570      	push	{r4, r5, r6, lr}
 8010af6:	b082      	sub	sp, #8
 8010af8:	4606      	mov	r6, r0
 8010afa:	2502      	movs	r5, #2
 8010afc:	9501      	str	r5, [sp, #4]
 8010afe:	2400      	movs	r4, #0
 8010b00:	9400      	str	r4, [sp, #0]
 8010b02:	4623      	mov	r3, r4
 8010b04:	4622      	mov	r2, r4
 8010b06:	2118      	movs	r1, #24
 8010b08:	f7fd fbff 	bl	800e30a <dwt_xfer3xxx>
 8010b0c:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8010b0e:	739c      	strb	r4, [r3, #14]
 8010b10:	821d      	strh	r5, [r3, #16]
 8010b12:	751c      	strb	r4, [r3, #20]
 8010b14:	755c      	strb	r4, [r3, #21]
 8010b16:	73dc      	strb	r4, [r3, #15]
 8010b18:	b002      	add	sp, #8
 8010b1a:	bd70      	pop	{r4, r5, r6, pc}

08010b1c <dwt_ioctl>:
 8010b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b20:	b08d      	sub	sp, #52	; 0x34
 8010b22:	4606      	mov	r6, r0
 8010b24:	4615      	mov	r5, r2
 8010b26:	461c      	mov	r4, r3
 8010b28:	299c      	cmp	r1, #156	; 0x9c
 8010b2a:	f200 809f 	bhi.w	8010c6c <dwt_ioctl+0x150>
 8010b2e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8010b32:	09b9      	.short	0x09b9
 8010b34:	00a109c4 	.word	0x00a109c4
 8010b38:	00c100a6 	.word	0x00c100a6
 8010b3c:	019d0151 	.word	0x019d0151
 8010b40:	015c0176 	.word	0x015c0176
 8010b44:	01b301ae 	.word	0x01b301ae
 8010b48:	01c501bc 	.word	0x01c501bc
 8010b4c:	01d701ce 	.word	0x01d701ce
 8010b50:	01e501e0 	.word	0x01e501e0
 8010b54:	027201ee 	.word	0x027201ee
 8010b58:	027e0278 	.word	0x027e0278
 8010b5c:	028f0289 	.word	0x028f0289
 8010b60:	029a0295 	.word	0x029a0295
 8010b64:	02a502a0 	.word	0x02a502a0
 8010b68:	02b702ae 	.word	0x02b702ae
 8010b6c:	02c902c0 	.word	0x02c902c0
 8010b70:	02f90304 	.word	0x02f90304
 8010b74:	02d202ee 	.word	0x02d202ee
 8010b78:	031e02e0 	.word	0x031e02e0
 8010b7c:	021a01f8 	.word	0x021a01f8
 8010b80:	02420239 	.word	0x02420239
 8010b84:	08ba0258 	.word	0x08ba0258
 8010b88:	031508bf 	.word	0x031508bf
 8010b8c:	032c0327 	.word	0x032c0327
 8010b90:	033c0336 	.word	0x033c0336
 8010b94:	03520347 	.word	0x03520347
 8010b98:	0386035b 	.word	0x0386035b
 8010b9c:	03a9039d 	.word	0x03a9039d
 8010ba0:	03b5030a 	.word	0x03b5030a
 8010ba4:	03d203bf 	.word	0x03d203bf
 8010ba8:	040b03f9 	.word	0x040b03f9
 8010bac:	0457044d 	.word	0x0457044d
 8010bb0:	048c047d 	.word	0x048c047d
 8010bb4:	049504a7 	.word	0x049504a7
 8010bb8:	04f704b1 	.word	0x04f704b1
 8010bbc:	052f050f 	.word	0x052f050f
 8010bc0:	05580544 	.word	0x05580544
 8010bc4:	057d0561 	.word	0x057d0561
 8010bc8:	0692056a 	.word	0x0692056a
 8010bcc:	071106c1 	.word	0x071106c1
 8010bd0:	07220717 	.word	0x07220717
 8010bd4:	075b073b 	.word	0x075b073b
 8010bd8:	078f0765 	.word	0x078f0765
 8010bdc:	07c607bd 	.word	0x07c607bd
 8010be0:	07d507cc 	.word	0x07d507cc
 8010be4:	07ef07e2 	.word	0x07ef07e2
 8010be8:	080207f9 	.word	0x080207f9
 8010bec:	0816080b 	.word	0x0816080b
 8010bf0:	08270821 	.word	0x08270821
 8010bf4:	0855084a 	.word	0x0855084a
 8010bf8:	086b0860 	.word	0x086b0860
 8010bfc:	0898088d 	.word	0x0898088d
 8010c00:	08c508b1 	.word	0x08c508b1
 8010c04:	0959094f 	.word	0x0959094f
 8010c08:	09cc0964 	.word	0x09cc0964
 8010c0c:	09ae096e 	.word	0x09ae096e
 8010c10:	090306b3 	.word	0x090306b3
 8010c14:	0a3a0924 	.word	0x0a3a0924
 8010c18:	09d90a2f 	.word	0x09d90a2f
 8010c1c:	09ef09e4 	.word	0x09ef09e4
 8010c20:	0a0509fa 	.word	0x0a0509fa
 8010c24:	0a1b0a10 	.word	0x0a1b0a10
 8010c28:	0c320a24 	.word	0x0c320a24
 8010c2c:	0ca30c69 	.word	0x0ca30c69
 8010c30:	0e2d0cc5 	.word	0x0e2d0cc5
 8010c34:	0a4a0e41 	.word	0x0a4a0e41
 8010c38:	0b890b57 	.word	0x0b890b57
 8010c3c:	0b970b93 	.word	0x0b970b93
 8010c40:	0ba50b9b 	.word	0x0ba50b9b
 8010c44:	0bc10bb7 	.word	0x0bc10bb7
 8010c48:	0be80bd4 	.word	0x0be80bd4
 8010c4c:	0cdb0c22 	.word	0x0cdb0c22
 8010c50:	0cfd0ce5 	.word	0x0cfd0ce5
 8010c54:	0d2d0d18 	.word	0x0d2d0d18
 8010c58:	0d890d4d 	.word	0x0d890d4d
 8010c5c:	0db70da1 	.word	0x0db70da1
 8010c60:	0efc0dc7 	.word	0x0efc0dc7
 8010c64:	0dec0df6 	.word	0x0dec0df6
 8010c68:	0e000e08 	.word	0x0e000e08
 8010c6c:	f04f 35ff 	mov.w	r5, #4294967295
 8010c70:	f001 be5c 	b.w	801292c <dwt_ioctl+0x1e10>
 8010c74:	f7fd fb28 	bl	800e2c8 <ull_wakeup_ic>
 8010c78:	2500      	movs	r5, #0
 8010c7a:	f001 be57 	b.w	801292c <dwt_ioctl+0x1e10>
 8010c7e:	2202      	movs	r2, #2
 8010c80:	49c0      	ldr	r1, [pc, #768]	; (8010f84 <dwt_ioctl+0x468>)
 8010c82:	f7fd fc1f 	bl	800e4c4 <dwt_read8bitoffsetreg>
 8010c86:	2803      	cmp	r0, #3
 8010c88:	d802      	bhi.n	8010c90 <dwt_ioctl+0x174>
 8010c8a:	2500      	movs	r5, #0
 8010c8c:	f001 be4e 	b.w	801292c <dwt_ioctl+0x1e10>
 8010c90:	f7ef fc1e 	bl	80004d0 <decamutexon>
 8010c94:	4604      	mov	r4, r0
 8010c96:	2302      	movs	r3, #2
 8010c98:	9301      	str	r3, [sp, #4]
 8010c9a:	2500      	movs	r5, #0
 8010c9c:	9500      	str	r5, [sp, #0]
 8010c9e:	462b      	mov	r3, r5
 8010ca0:	462a      	mov	r2, r5
 8010ca2:	4629      	mov	r1, r5
 8010ca4:	4630      	mov	r0, r6
 8010ca6:	f7fd fb30 	bl	800e30a <dwt_xfer3xxx>
 8010caa:	4620      	mov	r0, r4
 8010cac:	f7ef fc21 	bl	80004f2 <decamutexoff>
 8010cb0:	f001 be3c 	b.w	801292c <dwt_ioctl+0x1e10>
 8010cb4:	2c00      	cmp	r4, #0
 8010cb6:	f001 863d 	beq.w	8012934 <dwt_ioctl+0x1e18>
 8010cba:	7824      	ldrb	r4, [r4, #0]
 8010cbc:	f014 0f1d 	tst.w	r4, #29
 8010cc0:	d063      	beq.n	8010d8a <dwt_ioctl+0x26e>
 8010cc2:	f014 0f01 	tst.w	r4, #1
 8010cc6:	d025      	beq.n	8010d14 <dwt_ioctl+0x1f8>
 8010cc8:	f014 0f02 	tst.w	r4, #2
 8010ccc:	f04f 0302 	mov.w	r3, #2
 8010cd0:	9301      	str	r3, [sp, #4]
 8010cd2:	f04f 0200 	mov.w	r2, #0
 8010cd6:	9200      	str	r2, [sp, #0]
 8010cd8:	4613      	mov	r3, r2
 8010cda:	bf14      	ite	ne
 8010cdc:	210d      	movne	r1, #13
 8010cde:	2103      	moveq	r1, #3
 8010ce0:	f7fd fb13 	bl	800e30a <dwt_xfer3xxx>
 8010ce4:	2203      	movs	r2, #3
 8010ce6:	2144      	movs	r1, #68	; 0x44
 8010ce8:	4630      	mov	r0, r6
 8010cea:	f7fd fbeb 	bl	800e4c4 <dwt_read8bitoffsetreg>
 8010cee:	f010 0f08 	tst.w	r0, #8
 8010cf2:	bf08      	it	eq
 8010cf4:	2500      	moveq	r5, #0
 8010cf6:	f001 8619 	beq.w	801292c <dwt_ioctl+0x1e10>
 8010cfa:	2302      	movs	r3, #2
 8010cfc:	9301      	str	r3, [sp, #4]
 8010cfe:	2100      	movs	r1, #0
 8010d00:	9100      	str	r1, [sp, #0]
 8010d02:	460b      	mov	r3, r1
 8010d04:	460a      	mov	r2, r1
 8010d06:	4630      	mov	r0, r6
 8010d08:	f7fd faff 	bl	800e30a <dwt_xfer3xxx>
 8010d0c:	f04f 35ff 	mov.w	r5, #4294967295
 8010d10:	f001 be0c 	b.w	801292c <dwt_ioctl+0x1e10>
 8010d14:	f014 0f08 	tst.w	r4, #8
 8010d18:	d111      	bne.n	8010d3e <dwt_ioctl+0x222>
 8010d1a:	f014 0f10 	tst.w	r4, #16
 8010d1e:	d121      	bne.n	8010d64 <dwt_ioctl+0x248>
 8010d20:	f014 0f02 	tst.w	r4, #2
 8010d24:	f04f 0302 	mov.w	r3, #2
 8010d28:	9301      	str	r3, [sp, #4]
 8010d2a:	f04f 0200 	mov.w	r2, #0
 8010d2e:	9200      	str	r2, [sp, #0]
 8010d30:	4613      	mov	r3, r2
 8010d32:	bf14      	ite	ne
 8010d34:	2110      	movne	r1, #16
 8010d36:	2109      	moveq	r1, #9
 8010d38:	f7fd fae7 	bl	800e30a <dwt_xfer3xxx>
 8010d3c:	e7d2      	b.n	8010ce4 <dwt_ioctl+0x1c8>
 8010d3e:	2100      	movs	r1, #0
 8010d40:	f7fe f85f 	bl	800ee02 <_dwt_adjust_delaytime>
 8010d44:	f014 0f02 	tst.w	r4, #2
 8010d48:	f04f 0302 	mov.w	r3, #2
 8010d4c:	9301      	str	r3, [sp, #4]
 8010d4e:	f04f 0200 	mov.w	r2, #0
 8010d52:	9200      	str	r2, [sp, #0]
 8010d54:	4613      	mov	r3, r2
 8010d56:	bf14      	ite	ne
 8010d58:	210f      	movne	r1, #15
 8010d5a:	2107      	moveq	r1, #7
 8010d5c:	4630      	mov	r0, r6
 8010d5e:	f7fd fad4 	bl	800e30a <dwt_xfer3xxx>
 8010d62:	e7bf      	b.n	8010ce4 <dwt_ioctl+0x1c8>
 8010d64:	2101      	movs	r1, #1
 8010d66:	f7fe f84c 	bl	800ee02 <_dwt_adjust_delaytime>
 8010d6a:	f014 0f02 	tst.w	r4, #2
 8010d6e:	f04f 0302 	mov.w	r3, #2
 8010d72:	9301      	str	r3, [sp, #4]
 8010d74:	f04f 0200 	mov.w	r2, #0
 8010d78:	9200      	str	r2, [sp, #0]
 8010d7a:	4613      	mov	r3, r2
 8010d7c:	bf14      	ite	ne
 8010d7e:	210e      	movne	r1, #14
 8010d80:	2105      	moveq	r1, #5
 8010d82:	4630      	mov	r0, r6
 8010d84:	f7fd fac1 	bl	800e30a <dwt_xfer3xxx>
 8010d88:	e7ac      	b.n	8010ce4 <dwt_ioctl+0x1c8>
 8010d8a:	f014 0f20 	tst.w	r4, #32
 8010d8e:	d010      	beq.n	8010db2 <dwt_ioctl+0x296>
 8010d90:	f014 0f02 	tst.w	r4, #2
 8010d94:	f04f 0302 	mov.w	r3, #2
 8010d98:	9301      	str	r3, [sp, #4]
 8010d9a:	f04f 0500 	mov.w	r5, #0
 8010d9e:	9500      	str	r5, [sp, #0]
 8010da0:	462b      	mov	r3, r5
 8010da2:	462a      	mov	r2, r5
 8010da4:	bf14      	ite	ne
 8010da6:	2111      	movne	r1, #17
 8010da8:	210b      	moveq	r1, #11
 8010daa:	f7fd faae 	bl	800e30a <dwt_xfer3xxx>
 8010dae:	f001 bdbd 	b.w	801292c <dwt_ioctl+0x1e10>
 8010db2:	f014 0f02 	tst.w	r4, #2
 8010db6:	f04f 0302 	mov.w	r3, #2
 8010dba:	9301      	str	r3, [sp, #4]
 8010dbc:	f04f 0500 	mov.w	r5, #0
 8010dc0:	9500      	str	r5, [sp, #0]
 8010dc2:	462b      	mov	r3, r5
 8010dc4:	462a      	mov	r2, r5
 8010dc6:	bf14      	ite	ne
 8010dc8:	210c      	movne	r1, #12
 8010dca:	2101      	moveq	r1, #1
 8010dcc:	f7fd fa9d 	bl	800e30a <dwt_xfer3xxx>
 8010dd0:	f001 bdac 	b.w	801292c <dwt_ioctl+0x1e10>
 8010dd4:	2c00      	cmp	r4, #0
 8010dd6:	f001 85af 	beq.w	8012938 <dwt_ioctl+0x1e1c>
 8010dda:	6823      	ldr	r3, [r4, #0]
 8010ddc:	2200      	movs	r2, #0
 8010dde:	2128      	movs	r1, #40	; 0x28
 8010de0:	f7fd fffa 	bl	800edd8 <dwt_write32bitoffsetreg>
 8010de4:	2500      	movs	r5, #0
 8010de6:	f001 bda1 	b.w	801292c <dwt_ioctl+0x1e10>
 8010dea:	6823      	ldr	r3, [r4, #0]
 8010dec:	2200      	movs	r2, #0
 8010dee:	4966      	ldr	r1, [pc, #408]	; (8010f88 <dwt_ioctl+0x46c>)
 8010df0:	f7fd fff2 	bl	800edd8 <dwt_write32bitoffsetreg>
 8010df4:	6863      	ldr	r3, [r4, #4]
 8010df6:	2200      	movs	r2, #0
 8010df8:	4964      	ldr	r1, [pc, #400]	; (8010f8c <dwt_ioctl+0x470>)
 8010dfa:	4630      	mov	r0, r6
 8010dfc:	f7fd ffec 	bl	800edd8 <dwt_write32bitoffsetreg>
 8010e00:	68a3      	ldr	r3, [r4, #8]
 8010e02:	2200      	movs	r2, #0
 8010e04:	4962      	ldr	r1, [pc, #392]	; (8010f90 <dwt_ioctl+0x474>)
 8010e06:	4630      	mov	r0, r6
 8010e08:	f7fd ffe6 	bl	800edd8 <dwt_write32bitoffsetreg>
 8010e0c:	68e3      	ldr	r3, [r4, #12]
 8010e0e:	2200      	movs	r2, #0
 8010e10:	4960      	ldr	r1, [pc, #384]	; (8010f94 <dwt_ioctl+0x478>)
 8010e12:	4630      	mov	r0, r6
 8010e14:	f7fd ffe0 	bl	800edd8 <dwt_write32bitoffsetreg>
 8010e18:	2500      	movs	r5, #0
 8010e1a:	f001 bd87 	b.w	801292c <dwt_ioctl+0x1e10>
 8010e1e:	2c00      	cmp	r4, #0
 8010e20:	f001 858c 	beq.w	801293c <dwt_ioctl+0x1e20>
 8010e24:	8823      	ldrh	r3, [r4, #0]
 8010e26:	6865      	ldr	r5, [r4, #4]
 8010e28:	2d03      	cmp	r5, #3
 8010e2a:	f201 8589 	bhi.w	8012940 <dwt_ioctl+0x1e24>
 8010e2e:	e8df f005 	tbb	[pc, r5]
 8010e32:	0802      	.short	0x0802
 8010e34:	160f      	.short	0x160f
 8010e36:	2200      	movs	r2, #0
 8010e38:	4957      	ldr	r1, [pc, #348]	; (8010f98 <dwt_ioctl+0x47c>)
 8010e3a:	f7fd ff62 	bl	800ed02 <dwt_write16bitoffsetreg>
 8010e3e:	f001 bd75 	b.w	801292c <dwt_ioctl+0x1e10>
 8010e42:	2202      	movs	r2, #2
 8010e44:	4954      	ldr	r1, [pc, #336]	; (8010f98 <dwt_ioctl+0x47c>)
 8010e46:	f7fd ff5c 	bl	800ed02 <dwt_write16bitoffsetreg>
 8010e4a:	2500      	movs	r5, #0
 8010e4c:	f001 bd6e 	b.w	801292c <dwt_ioctl+0x1e10>
 8010e50:	2200      	movs	r2, #0
 8010e52:	4952      	ldr	r1, [pc, #328]	; (8010f9c <dwt_ioctl+0x480>)
 8010e54:	f7fd ff55 	bl	800ed02 <dwt_write16bitoffsetreg>
 8010e58:	2500      	movs	r5, #0
 8010e5a:	f001 bd67 	b.w	801292c <dwt_ioctl+0x1e10>
 8010e5e:	2202      	movs	r2, #2
 8010e60:	494e      	ldr	r1, [pc, #312]	; (8010f9c <dwt_ioctl+0x480>)
 8010e62:	f7fd ff4e 	bl	800ed02 <dwt_write16bitoffsetreg>
 8010e66:	2500      	movs	r5, #0
 8010e68:	f001 bd60 	b.w	801292c <dwt_ioctl+0x1e10>
 8010e6c:	2c00      	cmp	r4, #0
 8010e6e:	f001 8569 	beq.w	8012944 <dwt_ioctl+0x1e28>
 8010e72:	7823      	ldrb	r3, [r4, #0]
 8010e74:	005b      	lsls	r3, r3, #1
 8010e76:	f003 0306 	and.w	r3, r3, #6
 8010e7a:	9300      	str	r3, [sp, #0]
 8010e7c:	f06f 0306 	mvn.w	r3, #6
 8010e80:	2200      	movs	r2, #0
 8010e82:	4947      	ldr	r1, [pc, #284]	; (8010fa0 <dwt_ioctl+0x484>)
 8010e84:	f7fe fcae 	bl	800f7e4 <dwt_modify32bitoffsetreg>
 8010e88:	2500      	movs	r5, #0
 8010e8a:	f001 bd4f 	b.w	801292c <dwt_ioctl+0x1e10>
 8010e8e:	f7fe fccd 	bl	800f82c <ull_enablegpioclocks>
 8010e92:	2500      	movs	r5, #0
 8010e94:	f001 bd4a 	b.w	801292c <dwt_ioctl+0x1e10>
 8010e98:	2c00      	cmp	r4, #0
 8010e9a:	f001 8555 	beq.w	8012948 <dwt_ioctl+0x1e2c>
 8010e9e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010ea0:	7b1b      	ldrb	r3, [r3, #12]
 8010ea2:	7023      	strb	r3, [r4, #0]
 8010ea4:	2500      	movs	r5, #0
 8010ea6:	f001 bd41 	b.w	801292c <dwt_ioctl+0x1e10>
 8010eaa:	2c00      	cmp	r4, #0
 8010eac:	f001 854e 	beq.w	801294c <dwt_ioctl+0x1e30>
 8010eb0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010eb2:	7a5b      	ldrb	r3, [r3, #9]
 8010eb4:	7023      	strb	r3, [r4, #0]
 8010eb6:	2500      	movs	r5, #0
 8010eb8:	f001 bd38 	b.w	801292c <dwt_ioctl+0x1e10>
 8010ebc:	2c00      	cmp	r4, #0
 8010ebe:	f001 8547 	beq.w	8012950 <dwt_ioctl+0x1e34>
 8010ec2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010ec4:	7a9b      	ldrb	r3, [r3, #10]
 8010ec6:	7023      	strb	r3, [r4, #0]
 8010ec8:	2500      	movs	r5, #0
 8010eca:	f001 bd2f 	b.w	801292c <dwt_ioctl+0x1e10>
 8010ece:	2c00      	cmp	r4, #0
 8010ed0:	f001 8540 	beq.w	8012954 <dwt_ioctl+0x1e38>
 8010ed4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	6023      	str	r3, [r4, #0]
 8010eda:	2500      	movs	r5, #0
 8010edc:	f001 bd26 	b.w	801292c <dwt_ioctl+0x1e10>
 8010ee0:	2c00      	cmp	r4, #0
 8010ee2:	f001 8539 	beq.w	8012958 <dwt_ioctl+0x1e3c>
 8010ee6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010ee8:	685b      	ldr	r3, [r3, #4]
 8010eea:	6023      	str	r3, [r4, #0]
 8010eec:	2500      	movs	r5, #0
 8010eee:	f001 bd1d 	b.w	801292c <dwt_ioctl+0x1e10>
 8010ef2:	f7fe fae1 	bl	800f4b8 <ull_signal_rx_buff_free>
 8010ef6:	2500      	movs	r5, #0
 8010ef8:	f001 bd18 	b.w	801292c <dwt_ioctl+0x1e10>
 8010efc:	2c00      	cmp	r4, #0
 8010efe:	f001 852d 	beq.w	801295c <dwt_ioctl+0x1e40>
 8010f02:	6821      	ldr	r1, [r4, #0]
 8010f04:	f7fd ffa3 	bl	800ee4e <ull_setrxaftertxdelay>
 8010f08:	2500      	movs	r5, #0
 8010f0a:	f001 bd0f 	b.w	801292c <dwt_ioctl+0x1e10>
 8010f0e:	2c00      	cmp	r4, #0
 8010f10:	f001 8526 	beq.w	8012960 <dwt_ioctl+0x1e44>
 8010f14:	6862      	ldr	r2, [r4, #4]
 8010f16:	7821      	ldrb	r1, [r4, #0]
 8010f18:	f7fe fde8 	bl	800faec <ull_enablespicrccheck>
 8010f1c:	2500      	movs	r5, #0
 8010f1e:	f001 bd05 	b.w	801292c <dwt_ioctl+0x1e10>
 8010f22:	2c00      	cmp	r4, #0
 8010f24:	f001 851e 	beq.w	8012964 <dwt_ioctl+0x1e48>
 8010f28:	6865      	ldr	r5, [r4, #4]
 8010f2a:	7823      	ldrb	r3, [r4, #0]
 8010f2c:	2203      	movs	r2, #3
 8010f2e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8010f32:	f7fe f935 	bl	800f1a0 <dwt_write8bitoffsetreg>
 8010f36:	b94d      	cbnz	r5, 8010f4c <dwt_ioctl+0x430>
 8010f38:	2200      	movs	r2, #0
 8010f3a:	9200      	str	r2, [sp, #0]
 8010f3c:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8010f40:	2110      	movs	r1, #16
 8010f42:	4630      	mov	r0, r6
 8010f44:	f7ff f94e 	bl	80101e4 <dwt_modify16bitoffsetreg>
 8010f48:	f001 bcf0 	b.w	801292c <dwt_ioctl+0x1e10>
 8010f4c:	f44f 2381 	mov.w	r3, #264192	; 0x40800
 8010f50:	9300      	str	r3, [sp, #0]
 8010f52:	f04f 33ff 	mov.w	r3, #4294967295
 8010f56:	2200      	movs	r2, #0
 8010f58:	2110      	movs	r1, #16
 8010f5a:	4630      	mov	r0, r6
 8010f5c:	f7fe fc42 	bl	800f7e4 <dwt_modify32bitoffsetreg>
 8010f60:	2500      	movs	r5, #0
 8010f62:	f001 bce3 	b.w	801292c <dwt_ioctl+0x1e10>
 8010f66:	2200      	movs	r2, #0
 8010f68:	4611      	mov	r1, r2
 8010f6a:	f7fd fa56 	bl	800e41a <dwt_read32bitoffsetreg>
 8010f6e:	68b2      	ldr	r2, [r6, #8]
 8010f70:	6813      	ldr	r3, [r2, #0]
 8010f72:	4043      	eors	r3, r0
 8010f74:	6852      	ldr	r2, [r2, #4]
 8010f76:	4213      	tst	r3, r2
 8010f78:	bf14      	ite	ne
 8010f7a:	f04f 35ff 	movne.w	r5, #4294967295
 8010f7e:	2500      	moveq	r5, #0
 8010f80:	f001 bcd4 	b.w	801292c <dwt_ioctl+0x1e10>
 8010f84:	000f0030 	.word	0x000f0030
 8010f88:	00010054 	.word	0x00010054
 8010f8c:	00010058 	.word	0x00010058
 8010f90:	0001005c 	.word	0x0001005c
 8010f94:	00010060 	.word	0x00010060
 8010f98:	0001000c 	.word	0x0001000c
 8010f9c:	00010010 	.word	0x00010010
 8010fa0:	00010008 	.word	0x00010008
 8010fa4:	2c00      	cmp	r4, #0
 8010fa6:	f001 84df 	beq.w	8012968 <dwt_ioctl+0x1e4c>
 8010faa:	7821      	ldrb	r1, [r4, #0]
 8010fac:	f7fe fdba 	bl	800fb24 <ull_configciadiag>
 8010fb0:	2500      	movs	r5, #0
 8010fb2:	f001 bcbb 	b.w	801292c <dwt_ioctl+0x1e10>
 8010fb6:	b942      	cbnz	r2, 8010fca <dwt_ioctl+0x4ae>
 8010fb8:	2200      	movs	r2, #0
 8010fba:	9200      	str	r2, [sp, #0]
 8010fbc:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8010fc0:	49d2      	ldr	r1, [pc, #840]	; (801130c <dwt_ioctl+0x7f0>)
 8010fc2:	f7ff f90f 	bl	80101e4 <dwt_modify16bitoffsetreg>
 8010fc6:	f001 bcb1 	b.w	801292c <dwt_ioctl+0x1e10>
 8010fca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010fce:	9300      	str	r3, [sp, #0]
 8010fd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010fd4:	2200      	movs	r2, #0
 8010fd6:	49cd      	ldr	r1, [pc, #820]	; (801130c <dwt_ioctl+0x7f0>)
 8010fd8:	f7ff f904 	bl	80101e4 <dwt_modify16bitoffsetreg>
 8010fdc:	2500      	movs	r5, #0
 8010fde:	f001 bca5 	b.w	801292c <dwt_ioctl+0x1e10>
 8010fe2:	f002 0201 	and.w	r2, r2, #1
 8010fe6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010fea:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 8010fee:	2a00      	cmp	r2, #0
 8010ff0:	bf08      	it	eq
 8010ff2:	460b      	moveq	r3, r1
 8010ff4:	02d2      	lsls	r2, r2, #11
 8010ff6:	f015 0f02 	tst.w	r5, #2
 8010ffa:	bf12      	itee	ne
 8010ffc:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 8011000:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011004:	b29b      	uxtheq	r3, r3
 8011006:	9200      	str	r2, [sp, #0]
 8011008:	2200      	movs	r2, #0
 801100a:	49c0      	ldr	r1, [pc, #768]	; (801130c <dwt_ioctl+0x7f0>)
 801100c:	f7ff f8ea 	bl	80101e4 <dwt_modify16bitoffsetreg>
 8011010:	2500      	movs	r5, #0
 8011012:	f001 bc8b 	b.w	801292c <dwt_ioctl+0x1e10>
 8011016:	4611      	mov	r1, r2
 8011018:	f7fd ff2e 	bl	800ee78 <ull_setfinegraintxseq>
 801101c:	2500      	movs	r5, #0
 801101e:	f001 bc85 	b.w	801292c <dwt_ioctl+0x1e10>
 8011022:	4611      	mov	r1, r2
 8011024:	f7fd ff3c 	bl	800eea0 <ull_setlnapamode>
 8011028:	2500      	movs	r5, #0
 801102a:	f001 bc7f 	b.w	801292c <dwt_ioctl+0x1e10>
 801102e:	2c00      	cmp	r4, #0
 8011030:	f001 849c 	beq.w	801296c <dwt_ioctl+0x1e50>
 8011034:	2200      	movs	r2, #0
 8011036:	49b6      	ldr	r1, [pc, #728]	; (8011310 <dwt_ioctl+0x7f4>)
 8011038:	f7fd fa44 	bl	800e4c4 <dwt_read8bitoffsetreg>
 801103c:	7020      	strb	r0, [r4, #0]
 801103e:	2500      	movs	r5, #0
 8011040:	f001 bc74 	b.w	801292c <dwt_ioctl+0x1e10>
 8011044:	4621      	mov	r1, r4
 8011046:	f7fd ff4b 	bl	800eee0 <ull_configurestskey>
 801104a:	2500      	movs	r5, #0
 801104c:	f001 bc6e 	b.w	801292c <dwt_ioctl+0x1e10>
 8011050:	4621      	mov	r1, r4
 8011052:	f7fd ff69 	bl	800ef28 <ull_configurestsiv>
 8011056:	2500      	movs	r5, #0
 8011058:	f001 bc68 	b.w	801292c <dwt_ioctl+0x1e10>
 801105c:	f7fe fd98 	bl	800fb90 <ull_configurestsloadiv>
 8011060:	2500      	movs	r5, #0
 8011062:	f001 bc63 	b.w	801292c <dwt_ioctl+0x1e10>
 8011066:	4611      	mov	r1, r2
 8011068:	f7fd ff82 	bl	800ef70 <ull_configmrxlut>
 801106c:	2500      	movs	r5, #0
 801106e:	f001 bc5d 	b.w	801292c <dwt_ioctl+0x1e10>
 8011072:	f7fe feb3 	bl	800fddc <ull_restoreconfig>
 8011076:	2500      	movs	r5, #0
 8011078:	f001 bc58 	b.w	801292c <dwt_ioctl+0x1e10>
 801107c:	2c00      	cmp	r4, #0
 801107e:	f001 8477 	beq.w	8012970 <dwt_ioctl+0x1e54>
 8011082:	7821      	ldrb	r1, [r4, #0]
 8011084:	f7ff f8c8 	bl	8010218 <ull_configurestsmode>
 8011088:	2500      	movs	r5, #0
 801108a:	f001 bc4f 	b.w	801292c <dwt_ioctl+0x1e10>
 801108e:	2c00      	cmp	r4, #0
 8011090:	f001 8470 	beq.w	8012974 <dwt_ioctl+0x1e58>
 8011094:	8821      	ldrh	r1, [r4, #0]
 8011096:	f7fd fe44 	bl	800ed22 <ull_setrxantennadelay>
 801109a:	2500      	movs	r5, #0
 801109c:	f001 bc46 	b.w	801292c <dwt_ioctl+0x1e10>
 80110a0:	2c00      	cmp	r4, #0
 80110a2:	f001 8469 	beq.w	8012978 <dwt_ioctl+0x1e5c>
 80110a6:	f7fd f9e0 	bl	800e46a <ull_getrxantennadelay>
 80110aa:	8020      	strh	r0, [r4, #0]
 80110ac:	2500      	movs	r5, #0
 80110ae:	f001 bc3d 	b.w	801292c <dwt_ioctl+0x1e10>
 80110b2:	2c00      	cmp	r4, #0
 80110b4:	f001 8462 	beq.w	801297c <dwt_ioctl+0x1e60>
 80110b8:	8821      	ldrh	r1, [r4, #0]
 80110ba:	f7fd fe3a 	bl	800ed32 <ull_settxantennadelay>
 80110be:	2500      	movs	r5, #0
 80110c0:	f001 bc34 	b.w	801292c <dwt_ioctl+0x1e10>
 80110c4:	2c00      	cmp	r4, #0
 80110c6:	f001 845b 	beq.w	8012980 <dwt_ioctl+0x1e64>
 80110ca:	f7fd f9d5 	bl	800e478 <ull_gettxantennadelay>
 80110ce:	8020      	strh	r0, [r4, #0]
 80110d0:	2500      	movs	r5, #0
 80110d2:	f001 bc2b 	b.w	801292c <dwt_ioctl+0x1e10>
 80110d6:	2c00      	cmp	r4, #0
 80110d8:	f001 8454 	beq.w	8012984 <dwt_ioctl+0x1e68>
 80110dc:	88a3      	ldrh	r3, [r4, #4]
 80110de:	88e2      	ldrh	r2, [r4, #6]
 80110e0:	6821      	ldr	r1, [r4, #0]
 80110e2:	9100      	str	r1, [sp, #0]
 80110e4:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 80110e8:	f7fd fe00 	bl	800ecec <dwt_writetodevice>
 80110ec:	2500      	movs	r5, #0
 80110ee:	f001 bc1d 	b.w	801292c <dwt_ioctl+0x1e10>
 80110f2:	2c00      	cmp	r4, #0
 80110f4:	f001 8448 	beq.w	8012988 <dwt_ioctl+0x1e6c>
 80110f8:	88a3      	ldrh	r3, [r4, #4]
 80110fa:	88e2      	ldrh	r2, [r4, #6]
 80110fc:	6821      	ldr	r1, [r4, #0]
 80110fe:	9100      	str	r1, [sp, #0]
 8011100:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 8011104:	f7fd f97f 	bl	800e406 <dwt_readfromdevice>
 8011108:	2500      	movs	r5, #0
 801110a:	f001 bc0f 	b.w	801292c <dwt_ioctl+0x1e10>
 801110e:	2c00      	cmp	r4, #0
 8011110:	f001 843c 	beq.w	801298c <dwt_ioctl+0x1e70>
 8011114:	88e3      	ldrh	r3, [r4, #6]
 8011116:	88a2      	ldrh	r2, [r4, #4]
 8011118:	6821      	ldr	r1, [r4, #0]
 801111a:	f7fe f80b 	bl	800f134 <ull_readrxdata>
 801111e:	2500      	movs	r5, #0
 8011120:	f001 bc04 	b.w	801292c <dwt_ioctl+0x1e10>
 8011124:	2c00      	cmp	r4, #0
 8011126:	f001 8433 	beq.w	8012990 <dwt_ioctl+0x1e74>
 801112a:	88e3      	ldrh	r3, [r4, #6]
 801112c:	6822      	ldr	r2, [r4, #0]
 801112e:	88a1      	ldrh	r1, [r4, #4]
 8011130:	f7fe f990 	bl	800f454 <ull_writetxdata>
 8011134:	2500      	movs	r5, #0
 8011136:	f001 bbf9 	b.w	801292c <dwt_ioctl+0x1e10>
 801113a:	4611      	mov	r1, r2
 801113c:	f7ff fc56 	bl	80109ec <ull_rxenable>
 8011140:	2500      	movs	r5, #0
 8011142:	f001 bbf3 	b.w	801292c <dwt_ioctl+0x1e10>
 8011146:	2c00      	cmp	r4, #0
 8011148:	f001 8424 	beq.w	8012994 <dwt_ioctl+0x1e78>
 801114c:	7923      	ldrb	r3, [r4, #4]
 801114e:	8862      	ldrh	r2, [r4, #2]
 8011150:	8821      	ldrh	r1, [r4, #0]
 8011152:	f7fe fc97 	bl	800fa84 <ull_writetxfctrl>
 8011156:	2500      	movs	r5, #0
 8011158:	f001 bbe8 	b.w	801292c <dwt_ioctl+0x1e10>
 801115c:	2c00      	cmp	r4, #0
 801115e:	f001 841b 	beq.w	8012998 <dwt_ioctl+0x1e7c>
 8011162:	f7fd f98f 	bl	800e484 <ull_readclockoffset>
 8011166:	8020      	strh	r0, [r4, #0]
 8011168:	2500      	movs	r5, #0
 801116a:	f001 bbdf 	b.w	801292c <dwt_ioctl+0x1e10>
 801116e:	2c00      	cmp	r4, #0
 8011170:	f001 8414 	beq.w	801299c <dwt_ioctl+0x1e80>
 8011174:	f7fd f9b4 	bl	800e4e0 <ull_readcarrierintegrator>
 8011178:	6020      	str	r0, [r4, #0]
 801117a:	2500      	movs	r5, #0
 801117c:	f001 bbd6 	b.w	801292c <dwt_ioctl+0x1e10>
 8011180:	f7fe f866 	bl	800f250 <ull_clearaonconfig>
 8011184:	2500      	movs	r5, #0
 8011186:	f001 bbd1 	b.w	801292c <dwt_ioctl+0x1e10>
 801118a:	2c00      	cmp	r4, #0
 801118c:	f001 8408 	beq.w	80129a0 <dwt_ioctl+0x1e84>
 8011190:	8861      	ldrh	r1, [r4, #2]
 8011192:	f7fe fe53 	bl	800fe3c <ull_calcbandwidthadj>
 8011196:	7020      	strb	r0, [r4, #0]
 8011198:	2500      	movs	r5, #0
 801119a:	f001 bbc7 	b.w	801292c <dwt_ioctl+0x1e10>
 801119e:	4621      	mov	r1, r4
 80111a0:	f7fd f9be 	bl	800e520 <ull_readdiagnostics>
 80111a4:	2500      	movs	r5, #0
 80111a6:	f001 bbc1 	b.w	801292c <dwt_ioctl+0x1e10>
 80111aa:	2c00      	cmp	r4, #0
 80111ac:	f001 83fa 	beq.w	80129a4 <dwt_ioctl+0x1e88>
 80111b0:	2201      	movs	r2, #1
 80111b2:	2170      	movs	r1, #112	; 0x70
 80111b4:	f7fd f931 	bl	800e41a <dwt_read32bitoffsetreg>
 80111b8:	6020      	str	r0, [r4, #0]
 80111ba:	2500      	movs	r5, #0
 80111bc:	f001 bbb6 	b.w	801292c <dwt_ioctl+0x1e10>
 80111c0:	2c00      	cmp	r4, #0
 80111c2:	f001 83f1 	beq.w	80129a8 <dwt_ioctl+0x1e8c>
 80111c6:	2200      	movs	r2, #0
 80111c8:	2170      	movs	r1, #112	; 0x70
 80111ca:	f7fd f926 	bl	800e41a <dwt_read32bitoffsetreg>
 80111ce:	6020      	str	r0, [r4, #0]
 80111d0:	2500      	movs	r5, #0
 80111d2:	f001 bbab 	b.w	801292c <dwt_ioctl+0x1e10>
 80111d6:	9400      	str	r4, [sp, #0]
 80111d8:	2305      	movs	r3, #5
 80111da:	2200      	movs	r2, #0
 80111dc:	2170      	movs	r1, #112	; 0x70
 80111de:	f7fd f912 	bl	800e406 <dwt_readfromdevice>
 80111e2:	2500      	movs	r5, #0
 80111e4:	f001 bba2 	b.w	801292c <dwt_ioctl+0x1e10>
 80111e8:	2c00      	cmp	r4, #0
 80111ea:	f001 83df 	beq.w	80129ac <dwt_ioctl+0x1e90>
 80111ee:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80111f0:	7b9b      	ldrb	r3, [r3, #14]
 80111f2:	2b01      	cmp	r3, #1
 80111f4:	d015      	beq.n	8011222 <dwt_ioctl+0x706>
 80111f6:	2b03      	cmp	r3, #3
 80111f8:	d11a      	bne.n	8011230 <dwt_ioctl+0x714>
 80111fa:	2216      	movs	r2, #22
 80111fc:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8011200:	f7fd f921 	bl	800e446 <dwt_read16bitoffsetreg>
 8011204:	f3c0 000d 	ubfx	r0, r0, #0, #14
 8011208:	b283      	uxth	r3, r0
 801120a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 801120e:	d004      	beq.n	801121a <dwt_ioctl+0x6fe>
 8011210:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 8011214:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 8011218:	b218      	sxth	r0, r3
 801121a:	8020      	strh	r0, [r4, #0]
 801121c:	2500      	movs	r5, #0
 801121e:	f001 bb85 	b.w	801292c <dwt_ioctl+0x1e10>
 8011222:	2202      	movs	r2, #2
 8011224:	493b      	ldr	r1, [pc, #236]	; (8011314 <dwt_ioctl+0x7f8>)
 8011226:	f7fd f90e 	bl	800e446 <dwt_read16bitoffsetreg>
 801122a:	f3c0 000d 	ubfx	r0, r0, #0, #14
 801122e:	e7eb      	b.n	8011208 <dwt_ioctl+0x6ec>
 8011230:	2202      	movs	r2, #2
 8011232:	4939      	ldr	r1, [pc, #228]	; (8011318 <dwt_ioctl+0x7fc>)
 8011234:	f7fd f907 	bl	800e446 <dwt_read16bitoffsetreg>
 8011238:	f3c0 000d 	ubfx	r0, r0, #0, #14
 801123c:	e7e4      	b.n	8011208 <dwt_ioctl+0x6ec>
 801123e:	9400      	str	r4, [sp, #0]
 8011240:	2306      	movs	r3, #6
 8011242:	2200      	movs	r2, #0
 8011244:	4935      	ldr	r1, [pc, #212]	; (801131c <dwt_ioctl+0x800>)
 8011246:	f7fd f8de 	bl	800e406 <dwt_readfromdevice>
 801124a:	f994 3001 	ldrsb.w	r3, [r4, #1]
 801124e:	2b00      	cmp	r3, #0
 8011250:	db06      	blt.n	8011260 <dwt_ioctl+0x744>
 8011252:	7963      	ldrb	r3, [r4, #5]
 8011254:	f003 0301 	and.w	r3, r3, #1
 8011258:	7163      	strb	r3, [r4, #5]
 801125a:	2500      	movs	r5, #0
 801125c:	f001 bb66 	b.w	801292c <dwt_ioctl+0x1e10>
 8011260:	23ff      	movs	r3, #255	; 0xff
 8011262:	70a3      	strb	r3, [r4, #2]
 8011264:	70e3      	strb	r3, [r4, #3]
 8011266:	7123      	strb	r3, [r4, #4]
 8011268:	7163      	strb	r3, [r4, #5]
 801126a:	e7f2      	b.n	8011252 <dwt_ioctl+0x736>
 801126c:	2c00      	cmp	r4, #0
 801126e:	f001 839f 	beq.w	80129b0 <dwt_ioctl+0x1e94>
 8011272:	2201      	movs	r2, #1
 8011274:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 8011278:	f7fd f924 	bl	800e4c4 <dwt_read8bitoffsetreg>
 801127c:	7020      	strb	r0, [r4, #0]
 801127e:	2500      	movs	r5, #0
 8011280:	f001 bb54 	b.w	801292c <dwt_ioctl+0x1e10>
 8011284:	2c00      	cmp	r4, #0
 8011286:	f001 8395 	beq.w	80129b4 <dwt_ioctl+0x1e98>
 801128a:	2200      	movs	r2, #0
 801128c:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 8011290:	f7fd f918 	bl	800e4c4 <dwt_read8bitoffsetreg>
 8011294:	7020      	strb	r0, [r4, #0]
 8011296:	2500      	movs	r5, #0
 8011298:	f001 bb48 	b.w	801292c <dwt_ioctl+0x1e10>
 801129c:	2c00      	cmp	r4, #0
 801129e:	f001 838b 	beq.w	80129b8 <dwt_ioctl+0x1e9c>
 80112a2:	88a2      	ldrh	r2, [r4, #4]
 80112a4:	6821      	ldr	r1, [r4, #0]
 80112a6:	f7fe fb17 	bl	800f8d8 <_dwt_otpprogword32>
 80112aa:	2500      	movs	r5, #0
 80112ac:	f001 bb3e 	b.w	801292c <dwt_ioctl+0x1e10>
 80112b0:	2c00      	cmp	r4, #0
 80112b2:	f001 8383 	beq.w	80129bc <dwt_ioctl+0x1ea0>
 80112b6:	6825      	ldr	r5, [r4, #0]
 80112b8:	88a4      	ldrh	r4, [r4, #4]
 80112ba:	4622      	mov	r2, r4
 80112bc:	4629      	mov	r1, r5
 80112be:	f7fe fb0b 	bl	800f8d8 <_dwt_otpprogword32>
 80112c2:	4621      	mov	r1, r4
 80112c4:	4630      	mov	r0, r6
 80112c6:	f7fd fd65 	bl	800ed94 <_dwt_otpread>
 80112ca:	1a2d      	subs	r5, r5, r0
 80112cc:	bf18      	it	ne
 80112ce:	f04f 35ff 	movne.w	r5, #4294967295
 80112d2:	f001 bb2b 	b.w	801292c <dwt_ioctl+0x1e10>
 80112d6:	2a02      	cmp	r2, #2
 80112d8:	d00f      	beq.n	80112fa <dwt_ioctl+0x7de>
 80112da:	4c11      	ldr	r4, [pc, #68]	; (8011320 <dwt_ioctl+0x804>)
 80112dc:	2300      	movs	r3, #0
 80112de:	461a      	mov	r2, r3
 80112e0:	4621      	mov	r1, r4
 80112e2:	4630      	mov	r0, r6
 80112e4:	f7fd ff5c 	bl	800f1a0 <dwt_write8bitoffsetreg>
 80112e8:	2302      	movs	r3, #2
 80112ea:	2200      	movs	r2, #0
 80112ec:	4621      	mov	r1, r4
 80112ee:	4630      	mov	r0, r6
 80112f0:	f7fd ff56 	bl	800f1a0 <dwt_write8bitoffsetreg>
 80112f4:	2500      	movs	r5, #0
 80112f6:	f001 bb19 	b.w	801292c <dwt_ioctl+0x1e10>
 80112fa:	2300      	movs	r3, #0
 80112fc:	9300      	str	r3, [sp, #0]
 80112fe:	23fe      	movs	r3, #254	; 0xfe
 8011300:	2201      	movs	r2, #1
 8011302:	4902      	ldr	r1, [pc, #8]	; (801130c <dwt_ioctl+0x7f0>)
 8011304:	f7fe fbde 	bl	800fac4 <dwt_modify8bitoffsetreg>
 8011308:	e7e7      	b.n	80112da <dwt_ioctl+0x7be>
 801130a:	bf00      	nop
 801130c:	00110008 	.word	0x00110008
 8011310:	0007001c 	.word	0x0007001c
 8011314:	00180014 	.word	0x00180014
 8011318:	000c001c 	.word	0x000c001c
 801131c:	000c0018 	.word	0x000c0018
 8011320:	000a0004 	.word	0x000a0004
 8011324:	2c00      	cmp	r4, #0
 8011326:	f001 834b 	beq.w	80129c0 <dwt_ioctl+0x1ea4>
 801132a:	8824      	ldrh	r4, [r4, #0]
 801132c:	b2e2      	uxtb	r2, r4
 801132e:	f44f 7181 	mov.w	r1, #258	; 0x102
 8011332:	f7fd ffe1 	bl	800f2f8 <ull_aon_write>
 8011336:	0a22      	lsrs	r2, r4, #8
 8011338:	f240 1103 	movw	r1, #259	; 0x103
 801133c:	4630      	mov	r0, r6
 801133e:	f7fd ffdb 	bl	800f2f8 <ull_aon_write>
 8011342:	2500      	movs	r5, #0
 8011344:	f001 baf2 	b.w	801292c <dwt_ioctl+0x1e10>
 8011348:	2c00      	cmp	r4, #0
 801134a:	f001 833b 	beq.w	80129c4 <dwt_ioctl+0x1ea8>
 801134e:	f8df 8370 	ldr.w	r8, [pc, #880]	; 80116c0 <dwt_ioctl+0xba4>
 8011352:	2310      	movs	r3, #16
 8011354:	9300      	str	r3, [sp, #0]
 8011356:	23ff      	movs	r3, #255	; 0xff
 8011358:	2200      	movs	r2, #0
 801135a:	4641      	mov	r1, r8
 801135c:	f7fe fbb2 	bl	800fac4 <dwt_modify8bitoffsetreg>
 8011360:	f44f 7182 	mov.w	r1, #260	; 0x104
 8011364:	4630      	mov	r0, r6
 8011366:	f7fd ffa7 	bl	800f2b8 <ull_aon_read>
 801136a:	f000 05e0 	and.w	r5, r0, #224	; 0xe0
 801136e:	462a      	mov	r2, r5
 8011370:	f44f 7182 	mov.w	r1, #260	; 0x104
 8011374:	4630      	mov	r0, r6
 8011376:	f7fd ffbf 	bl	800f2f8 <ull_aon_write>
 801137a:	f045 0204 	orr.w	r2, r5, #4
 801137e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8011382:	4630      	mov	r0, r6
 8011384:	f7fd ffb8 	bl	800f2f8 <ull_aon_write>
 8011388:	2002      	movs	r0, #2
 801138a:	f7ef f8bf 	bl	800050c <deca_sleep>
 801138e:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8011392:	4630      	mov	r0, r6
 8011394:	f7fd ff90 	bl	800f2b8 <ull_aon_read>
 8011398:	4607      	mov	r7, r0
 801139a:	f240 110f 	movw	r1, #271	; 0x10f
 801139e:	4630      	mov	r0, r6
 80113a0:	f7fd ff8a 	bl	800f2b8 <ull_aon_read>
 80113a4:	4681      	mov	r9, r0
 80113a6:	462a      	mov	r2, r5
 80113a8:	f44f 7182 	mov.w	r1, #260	; 0x104
 80113ac:	4630      	mov	r0, r6
 80113ae:	f7fd ffa3 	bl	800f2f8 <ull_aon_write>
 80113b2:	2500      	movs	r5, #0
 80113b4:	9500      	str	r5, [sp, #0]
 80113b6:	23ef      	movs	r3, #239	; 0xef
 80113b8:	462a      	mov	r2, r5
 80113ba:	4641      	mov	r1, r8
 80113bc:	4630      	mov	r0, r6
 80113be:	f7fe fb81 	bl	800fac4 <dwt_modify8bitoffsetreg>
 80113c2:	ea47 2709 	orr.w	r7, r7, r9, lsl #8
 80113c6:	8027      	strh	r7, [r4, #0]
 80113c8:	f001 bab0 	b.w	801292c <dwt_ioctl+0x1e10>
 80113cc:	2c00      	cmp	r4, #0
 80113ce:	f001 82fb 	beq.w	80129c8 <dwt_ioctl+0x1eac>
 80113d2:	78a2      	ldrb	r2, [r4, #2]
 80113d4:	8821      	ldrh	r1, [r4, #0]
 80113d6:	f7fd ffb7 	bl	800f348 <ull_configuresleep>
 80113da:	2500      	movs	r5, #0
 80113dc:	f001 baa6 	b.w	801292c <dwt_ioctl+0x1e10>
 80113e0:	2c00      	cmp	r4, #0
 80113e2:	f001 82f3 	beq.w	80129cc <dwt_ioctl+0x1eb0>
 80113e6:	6824      	ldr	r4, [r4, #0]
 80113e8:	f7fd ff32 	bl	800f250 <ull_clearaonconfig>
 80113ec:	2001      	movs	r0, #1
 80113ee:	f7ef f88d 	bl	800050c <deca_sleep>
 80113f2:	2303      	movs	r3, #3
 80113f4:	9300      	str	r3, [sp, #0]
 80113f6:	23ff      	movs	r3, #255	; 0xff
 80113f8:	2200      	movs	r2, #0
 80113fa:	49af      	ldr	r1, [pc, #700]	; (80116b8 <dwt_ioctl+0xb9c>)
 80113fc:	4630      	mov	r0, r6
 80113fe:	f7fe fb61 	bl	800fac4 <dwt_modify8bitoffsetreg>
 8011402:	b97c      	cbnz	r4, 8011424 <dwt_ioctl+0x908>
 8011404:	4630      	mov	r0, r6
 8011406:	f7ff fb61 	bl	8010acc <ull_softreset_no_sema_fcmd>
 801140a:	2001      	movs	r0, #1
 801140c:	f7ef f87e 	bl	800050c <deca_sleep>
 8011410:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8011412:	2500      	movs	r5, #0
 8011414:	739d      	strb	r5, [r3, #14]
 8011416:	2202      	movs	r2, #2
 8011418:	821a      	strh	r2, [r3, #16]
 801141a:	751d      	strb	r5, [r3, #20]
 801141c:	755d      	strb	r5, [r3, #21]
 801141e:	73dd      	strb	r5, [r3, #15]
 8011420:	f001 ba84 	b.w	801292c <dwt_ioctl+0x1e10>
 8011424:	4630      	mov	r0, r6
 8011426:	f7ff fb65 	bl	8010af4 <ull_softreset_fcmd>
 801142a:	e7ee      	b.n	801140a <dwt_ioctl+0x8ee>
 801142c:	2c00      	cmp	r4, #0
 801142e:	f001 82cf 	beq.w	80129d0 <dwt_ioctl+0x1eb4>
 8011432:	7823      	ldrb	r3, [r4, #0]
 8011434:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011438:	6d02      	ldr	r2, [r0, #80]	; 0x50
 801143a:	7353      	strb	r3, [r2, #13]
 801143c:	2200      	movs	r2, #0
 801143e:	499f      	ldr	r1, [pc, #636]	; (80116bc <dwt_ioctl+0xba0>)
 8011440:	f7fd feae 	bl	800f1a0 <dwt_write8bitoffsetreg>
 8011444:	2500      	movs	r5, #0
 8011446:	f001 ba71 	b.w	801292c <dwt_ioctl+0x1e10>
 801144a:	2c00      	cmp	r4, #0
 801144c:	f001 82c2 	beq.w	80129d4 <dwt_ioctl+0x1eb8>
 8011450:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8011452:	7b5b      	ldrb	r3, [r3, #13]
 8011454:	7023      	strb	r3, [r4, #0]
 8011456:	2500      	movs	r5, #0
 8011458:	f001 ba68 	b.w	801292c <dwt_ioctl+0x1e10>
 801145c:	2101      	movs	r1, #1
 801145e:	f7fe f9f5 	bl	800f84c <ull_enable_rf_tx>
 8011462:	4630      	mov	r0, r6
 8011464:	f7fe fa26 	bl	800f8b4 <ull_enable_rftx_blocks>
 8011468:	2101      	movs	r1, #1
 801146a:	4630      	mov	r0, r6
 801146c:	f7fd fc68 	bl	800ed40 <ull_force_clocks>
 8011470:	220f      	movs	r2, #15
 8011472:	2101      	movs	r1, #1
 8011474:	4630      	mov	r0, r6
 8011476:	f7fd fe39 	bl	800f0ec <ull_repeated_cw>
 801147a:	2500      	movs	r5, #0
 801147c:	f001 ba56 	b.w	801292c <dwt_ioctl+0x1e10>
 8011480:	2c00      	cmp	r4, #0
 8011482:	f001 82a9 	beq.w	80129d8 <dwt_ioctl+0x1ebc>
 8011486:	6862      	ldr	r2, [r4, #4]
 8011488:	6821      	ldr	r1, [r4, #0]
 801148a:	f7fd fe2f 	bl	800f0ec <ull_repeated_cw>
 801148e:	2500      	movs	r5, #0
 8011490:	f001 ba4c 	b.w	801292c <dwt_ioctl+0x1e10>
 8011494:	2c00      	cmp	r4, #0
 8011496:	f001 82a1 	beq.w	80129dc <dwt_ioctl+0x1ec0>
 801149a:	4d89      	ldr	r5, [pc, #548]	; (80116c0 <dwt_ioctl+0xba4>)
 801149c:	2200      	movs	r2, #0
 801149e:	4629      	mov	r1, r5
 80114a0:	f7fd f810 	bl	800e4c4 <dwt_read8bitoffsetreg>
 80114a4:	4680      	mov	r8, r0
 80114a6:	2302      	movs	r3, #2
 80114a8:	9300      	str	r3, [sp, #0]
 80114aa:	23ff      	movs	r3, #255	; 0xff
 80114ac:	2200      	movs	r2, #0
 80114ae:	4629      	mov	r1, r5
 80114b0:	4630      	mov	r0, r6
 80114b2:	f7fe fb07 	bl	800fac4 <dwt_modify8bitoffsetreg>
 80114b6:	2304      	movs	r3, #4
 80114b8:	2200      	movs	r2, #0
 80114ba:	4982      	ldr	r1, [pc, #520]	; (80116c4 <dwt_ioctl+0xba8>)
 80114bc:	4630      	mov	r0, r6
 80114be:	f7fd fe6f 	bl	800f1a0 <dwt_write8bitoffsetreg>
 80114c2:	2301      	movs	r3, #1
 80114c4:	2200      	movs	r2, #0
 80114c6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80114ca:	4630      	mov	r0, r6
 80114cc:	f7fd fe68 	bl	800f1a0 <dwt_write8bitoffsetreg>
 80114d0:	4f7d      	ldr	r7, [pc, #500]	; (80116c8 <dwt_ioctl+0xbac>)
 80114d2:	2500      	movs	r5, #0
 80114d4:	462a      	mov	r2, r5
 80114d6:	4639      	mov	r1, r7
 80114d8:	4630      	mov	r0, r6
 80114da:	f7fc fff3 	bl	800e4c4 <dwt_read8bitoffsetreg>
 80114de:	f010 0f01 	tst.w	r0, #1
 80114e2:	d0f7      	beq.n	80114d4 <dwt_ioctl+0x9b8>
 80114e4:	2200      	movs	r2, #0
 80114e6:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 80114ea:	4630      	mov	r0, r6
 80114ec:	f7fc ffab 	bl	800e446 <dwt_read16bitoffsetreg>
 80114f0:	4605      	mov	r5, r0
 80114f2:	2300      	movs	r3, #0
 80114f4:	461a      	mov	r2, r3
 80114f6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80114fa:	4630      	mov	r0, r6
 80114fc:	f7fd fe50 	bl	800f1a0 <dwt_write8bitoffsetreg>
 8011500:	2300      	movs	r3, #0
 8011502:	461a      	mov	r2, r3
 8011504:	496f      	ldr	r1, [pc, #444]	; (80116c4 <dwt_ioctl+0xba8>)
 8011506:	4630      	mov	r0, r6
 8011508:	f7fd fe4a 	bl	800f1a0 <dwt_write8bitoffsetreg>
 801150c:	4643      	mov	r3, r8
 801150e:	2200      	movs	r2, #0
 8011510:	496b      	ldr	r1, [pc, #428]	; (80116c0 <dwt_ioctl+0xba4>)
 8011512:	4630      	mov	r0, r6
 8011514:	f7fd fe44 	bl	800f1a0 <dwt_write8bitoffsetreg>
 8011518:	8025      	strh	r5, [r4, #0]
 801151a:	2500      	movs	r5, #0
 801151c:	f001 ba06 	b.w	801292c <dwt_ioctl+0x1e10>
 8011520:	2c00      	cmp	r4, #0
 8011522:	f001 825d 	beq.w	80129e0 <dwt_ioctl+0x1ec4>
 8011526:	7923      	ldrb	r3, [r4, #4]
 8011528:	6d02      	ldr	r2, [r0, #80]	; 0x50
 801152a:	7a92      	ldrb	r2, [r2, #10]
 801152c:	1a9b      	subs	r3, r3, r2
 801152e:	ee07 3a90 	vmov	s15, r3
 8011532:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011536:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80116cc <dwt_ioctl+0xbb0>
 801153a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801153e:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 8011542:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011546:	edc4 7a00 	vstr	s15, [r4]
 801154a:	2500      	movs	r5, #0
 801154c:	f001 b9ee 	b.w	801292c <dwt_ioctl+0x1e10>
 8011550:	2c00      	cmp	r4, #0
 8011552:	f001 8247 	beq.w	80129e4 <dwt_ioctl+0x1ec8>
 8011556:	7923      	ldrb	r3, [r4, #4]
 8011558:	6d02      	ldr	r2, [r0, #80]	; 0x50
 801155a:	7a52      	ldrb	r2, [r2, #9]
 801155c:	1a9b      	subs	r3, r3, r2
 801155e:	ee07 3a90 	vmov	s15, r3
 8011562:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011566:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 80116d0 <dwt_ioctl+0xbb4>
 801156a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801156e:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8011572:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011576:	eddf 6a57 	vldr	s13, [pc, #348]	; 80116d4 <dwt_ioctl+0xbb8>
 801157a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801157e:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8011582:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011586:	edc4 7a00 	vstr	s15, [r4]
 801158a:	2500      	movs	r5, #0
 801158c:	f001 b9ce 	b.w	801292c <dwt_ioctl+0x1e10>
 8011590:	2c00      	cmp	r4, #0
 8011592:	f001 8229 	beq.w	80129e8 <dwt_ioctl+0x1ecc>
 8011596:	6824      	ldr	r4, [r4, #0]
 8011598:	2101      	movs	r1, #1
 801159a:	f7fe f957 	bl	800f84c <ull_enable_rf_tx>
 801159e:	4630      	mov	r0, r6
 80115a0:	f7fe f988 	bl	800f8b4 <ull_enable_rftx_blocks>
 80115a4:	2101      	movs	r1, #1
 80115a6:	4630      	mov	r0, r6
 80115a8:	f7fd fbca 	bl	800ed40 <ull_force_clocks>
 80115ac:	4621      	mov	r1, r4
 80115ae:	4630      	mov	r0, r6
 80115b0:	f7fe fca0 	bl	800fef4 <ull_repeated_frames>
 80115b4:	2500      	movs	r5, #0
 80115b6:	f001 b9b9 	b.w	801292c <dwt_ioctl+0x1e10>
 80115ba:	2500      	movs	r5, #0
 80115bc:	9500      	str	r5, [sp, #0]
 80115be:	23ef      	movs	r3, #239	; 0xef
 80115c0:	462a      	mov	r2, r5
 80115c2:	4945      	ldr	r1, [pc, #276]	; (80116d8 <dwt_ioctl+0xbbc>)
 80115c4:	f7fe fa7e 	bl	800fac4 <dwt_modify8bitoffsetreg>
 80115c8:	2105      	movs	r1, #5
 80115ca:	4630      	mov	r0, r6
 80115cc:	f7fd fbb8 	bl	800ed40 <ull_force_clocks>
 80115d0:	2101      	movs	r1, #1
 80115d2:	4630      	mov	r0, r6
 80115d4:	f7fd fd6c 	bl	800f0b0 <ull_disable_rf_tx>
 80115d8:	4630      	mov	r0, r6
 80115da:	f7fd fd5f 	bl	800f09c <ull_disable_rftx_blocks>
 80115de:	f001 b9a5 	b.w	801292c <dwt_ioctl+0x1e10>
 80115e2:	2500      	movs	r5, #0
 80115e4:	9500      	str	r5, [sp, #0]
 80115e6:	23ef      	movs	r3, #239	; 0xef
 80115e8:	462a      	mov	r2, r5
 80115ea:	493b      	ldr	r1, [pc, #236]	; (80116d8 <dwt_ioctl+0xbbc>)
 80115ec:	f7fe fa6a 	bl	800fac4 <dwt_modify8bitoffsetreg>
 80115f0:	f001 b99c 	b.w	801292c <dwt_ioctl+0x1e10>
 80115f4:	2c00      	cmp	r4, #0
 80115f6:	f001 81f9 	beq.w	80129ec <dwt_ioctl+0x1ed0>
 80115fa:	6821      	ldr	r1, [r4, #0]
 80115fc:	f7fe fc7a 	bl	800fef4 <ull_repeated_frames>
 8011600:	2500      	movs	r5, #0
 8011602:	f001 b993 	b.w	801292c <dwt_ioctl+0x1e10>
 8011606:	2200      	movs	r2, #0
 8011608:	4934      	ldr	r1, [pc, #208]	; (80116dc <dwt_ioctl+0xbc0>)
 801160a:	f7fc ff1c 	bl	800e446 <dwt_read16bitoffsetreg>
 801160e:	f3c0 050b 	ubfx	r5, r0, #0, #12
 8011612:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8011616:	bf18      	it	ne
 8011618:	f445 4570 	orrne.w	r5, r5, #61440	; 0xf000
 801161c:	b22d      	sxth	r5, r5
 801161e:	8025      	strh	r5, [r4, #0]
 8011620:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8011622:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8011626:	1aed      	subs	r5, r5, r3
 8011628:	f001 b980 	b.w	801292c <dwt_ioctl+0x1e10>
 801162c:	2c00      	cmp	r4, #0
 801162e:	f001 81df 	beq.w	80129f0 <dwt_ioctl+0x1ed4>
 8011632:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8011636:	7a23      	ldrb	r3, [r4, #8]
 8011638:	f899 2013 	ldrb.w	r2, [r9, #19]
 801163c:	2aff      	cmp	r2, #255	; 0xff
 801163e:	f000 80fe 	beq.w	801183e <dwt_ioctl+0xd22>
 8011642:	bb93      	cbnz	r3, 80116aa <dwt_ioctl+0xb8e>
 8011644:	f8d9 1000 	ldr.w	r1, [r9]
 8011648:	f7fd feb8 	bl	800f3bc <ull_update_nonce_GCM>
 801164c:	f899 300c 	ldrb.w	r3, [r9, #12]
 8011650:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 8011654:	18d1      	adds	r1, r2, r3
 8011656:	f899 2012 	ldrb.w	r2, [r9, #18]
 801165a:	2a00      	cmp	r2, #0
 801165c:	d140      	bne.n	80116e0 <dwt_ioctl+0xbc4>
 801165e:	f899 0010 	ldrb.w	r0, [r9, #16]
 8011662:	2800      	cmp	r0, #0
 8011664:	bf0b      	itete	eq
 8011666:	227f      	moveq	r2, #127	; 0x7f
 8011668:	f44f 6280 	movne.w	r2, #1024	; 0x400
 801166c:	f44f 15b0 	moveq.w	r5, #1441792	; 0x160000
 8011670:	f44f 15a0 	movne.w	r5, #1310720	; 0x140000
 8011674:	f899 0013 	ldrb.w	r0, [r9, #19]
 8011678:	1a12      	subs	r2, r2, r0
 801167a:	3a02      	subs	r2, #2
 801167c:	4291      	cmp	r1, r2
 801167e:	f200 80e7 	bhi.w	8011850 <dwt_ioctl+0xd34>
 8011682:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8011686:	9200      	str	r2, [sp, #0]
 8011688:	2200      	movs	r2, #0
 801168a:	4629      	mov	r1, r5
 801168c:	4630      	mov	r0, r6
 801168e:	f7fd fb2d 	bl	800ecec <dwt_writetodevice>
 8011692:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 8011696:	f899 200c 	ldrb.w	r2, [r9, #12]
 801169a:	f8d9 1008 	ldr.w	r1, [r9, #8]
 801169e:	9100      	str	r1, [sp, #0]
 80116a0:	4629      	mov	r1, r5
 80116a2:	4630      	mov	r0, r6
 80116a4:	f7fd fb22 	bl	800ecec <dwt_writetodevice>
 80116a8:	e02b      	b.n	8011702 <dwt_ioctl+0xbe6>
 80116aa:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 80116ae:	f8d9 1000 	ldr.w	r1, [r9]
 80116b2:	f7fd fe91 	bl	800f3d8 <ull_update_nonce_CCM>
 80116b6:	e7c9      	b.n	801164c <dwt_ioctl+0xb30>
 80116b8:	00110004 	.word	0x00110004
 80116bc:	00090014 	.word	0x00090014
 80116c0:	00070048 	.word	0x00070048
 80116c4:	00070034 	.word	0x00070034
 80116c8:	00080004 	.word	0x00080004
 80116cc:	3f866666 	.word	0x3f866666
 80116d0:	3ecccccd 	.word	0x3ecccccd
 80116d4:	437f0000 	.word	0x437f0000
 80116d8:	000f0028 	.word	0x000f0028
 80116dc:	00020008 	.word	0x00020008
 80116e0:	2a01      	cmp	r2, #1
 80116e2:	f040 80af 	bne.w	8011844 <dwt_ioctl+0xd28>
 80116e6:	f899 3011 	ldrb.w	r3, [r9, #17]
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80116f0:	bf08      	it	eq
 80116f2:	237f      	moveq	r3, #127	; 0x7f
 80116f4:	f899 2013 	ldrb.w	r2, [r9, #19]
 80116f8:	1a9b      	subs	r3, r3, r2
 80116fa:	3b02      	subs	r3, #2
 80116fc:	4299      	cmp	r1, r3
 80116fe:	f200 80a4 	bhi.w	801184a <dwt_ioctl+0xd2e>
 8011702:	f899 2010 	ldrb.w	r2, [r9, #16]
 8011706:	1e53      	subs	r3, r2, #1
 8011708:	b2db      	uxtb	r3, r3
 801170a:	2b01      	cmp	r3, #1
 801170c:	d940      	bls.n	8011790 <dwt_ioctl+0xc74>
 801170e:	f899 3011 	ldrb.w	r3, [r9, #17]
 8011712:	1e59      	subs	r1, r3, #1
 8011714:	b2c9      	uxtb	r1, r1
 8011716:	2901      	cmp	r1, #1
 8011718:	d947      	bls.n	80117aa <dwt_ioctl+0xc8e>
 801171a:	2b04      	cmp	r3, #4
 801171c:	d04c      	beq.n	80117b8 <dwt_ioctl+0xc9c>
 801171e:	ea42 3343 	orr.w	r3, r2, r3, lsl #13
 8011722:	2200      	movs	r2, #0
 8011724:	49ba      	ldr	r1, [pc, #744]	; (8011a10 <dwt_ioctl+0xef4>)
 8011726:	4630      	mov	r0, r6
 8011728:	f7fd fb56 	bl	800edd8 <dwt_write32bitoffsetreg>
 801172c:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 8011730:	4ab8      	ldr	r2, [pc, #736]	; (8011a14 <dwt_ioctl+0xef8>)
 8011732:	ea02 12c3 	and.w	r2, r2, r3, lsl #7
 8011736:	f899 300c 	ldrb.w	r3, [r9, #12]
 801173a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801173e:	4313      	orrs	r3, r2
 8011740:	2200      	movs	r2, #0
 8011742:	49b5      	ldr	r1, [pc, #724]	; (8011a18 <dwt_ioctl+0xefc>)
 8011744:	4630      	mov	r0, r6
 8011746:	f7fd fb47 	bl	800edd8 <dwt_write32bitoffsetreg>
 801174a:	2301      	movs	r3, #1
 801174c:	2200      	movs	r2, #0
 801174e:	49b3      	ldr	r1, [pc, #716]	; (8011a1c <dwt_ioctl+0xf00>)
 8011750:	4630      	mov	r0, r6
 8011752:	f7fd fd25 	bl	800f1a0 <dwt_write8bitoffsetreg>
 8011756:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 8011a20 <dwt_ioctl+0xf04>
 801175a:	2700      	movs	r7, #0
 801175c:	463a      	mov	r2, r7
 801175e:	4641      	mov	r1, r8
 8011760:	4630      	mov	r0, r6
 8011762:	f7fc feaf 	bl	800e4c4 <dwt_read8bitoffsetreg>
 8011766:	f010 0f05 	tst.w	r0, #5
 801176a:	d0f7      	beq.n	801175c <dwt_ioctl+0xc40>
 801176c:	4605      	mov	r5, r0
 801176e:	4603      	mov	r3, r0
 8011770:	2200      	movs	r2, #0
 8011772:	49ab      	ldr	r1, [pc, #684]	; (8011a20 <dwt_ioctl+0xf04>)
 8011774:	4630      	mov	r0, r6
 8011776:	f7fd fd13 	bl	800f1a0 <dwt_write8bitoffsetreg>
 801177a:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 801177e:	f025 0330 	bic.w	r3, r5, #48	; 0x30
 8011782:	2b01      	cmp	r3, #1
 8011784:	d025      	beq.n	80117d2 <dwt_ioctl+0xcb6>
 8011786:	b26b      	sxtb	r3, r5
 8011788:	7023      	strb	r3, [r4, #0]
 801178a:	2500      	movs	r5, #0
 801178c:	f001 b8ce 	b.w	801292c <dwt_ioctl+0x1e10>
 8011790:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8011792:	7b9b      	ldrb	r3, [r3, #14]
 8011794:	2b03      	cmp	r3, #3
 8011796:	f001 81af 	beq.w	8012af8 <dwt_ioctl+0x1fdc>
 801179a:	f899 3011 	ldrb.w	r3, [r9, #17]
 801179e:	1e5a      	subs	r2, r3, #1
 80117a0:	b2d2      	uxtb	r2, r2
 80117a2:	2a01      	cmp	r2, #1
 80117a4:	d912      	bls.n	80117cc <dwt_ioctl+0xcb0>
 80117a6:	2201      	movs	r2, #1
 80117a8:	e7b7      	b.n	801171a <dwt_ioctl+0xbfe>
 80117aa:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80117ac:	7b9b      	ldrb	r3, [r3, #14]
 80117ae:	2b03      	cmp	r3, #3
 80117b0:	bf0c      	ite	eq
 80117b2:	2302      	moveq	r3, #2
 80117b4:	2301      	movne	r3, #1
 80117b6:	e7b2      	b.n	801171e <dwt_ioctl+0xc02>
 80117b8:	f8b9 100e 	ldrh.w	r1, [r9, #14]
 80117bc:	2910      	cmp	r1, #16
 80117be:	d9ae      	bls.n	801171e <dwt_ioctl+0xc02>
 80117c0:	f06f 0303 	mvn.w	r3, #3
 80117c4:	e7e0      	b.n	8011788 <dwt_ioctl+0xc6c>
 80117c6:	2202      	movs	r2, #2
 80117c8:	4613      	mov	r3, r2
 80117ca:	e7a8      	b.n	801171e <dwt_ioctl+0xc02>
 80117cc:	2201      	movs	r2, #1
 80117ce:	4613      	mov	r3, r2
 80117d0:	e7a5      	b.n	801171e <dwt_ioctl+0xc02>
 80117d2:	f899 3012 	ldrb.w	r3, [r9, #18]
 80117d6:	2b01      	cmp	r3, #1
 80117d8:	d1d5      	bne.n	8011786 <dwt_ioctl+0xc6a>
 80117da:	f899 2011 	ldrb.w	r2, [r9, #17]
 80117de:	1e53      	subs	r3, r2, #1
 80117e0:	b2db      	uxtb	r3, r3
 80117e2:	2b01      	cmp	r3, #1
 80117e4:	d91b      	bls.n	801181e <dwt_ioctl+0xd02>
 80117e6:	2a03      	cmp	r2, #3
 80117e8:	bf0c      	ite	eq
 80117ea:	f44f 17a0 	moveq.w	r7, #1310720	; 0x140000
 80117ee:	f44f 17b0 	movne.w	r7, #1441792	; 0x160000
 80117f2:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80117f6:	b112      	cbz	r2, 80117fe <dwt_ioctl+0xce2>
 80117f8:	f899 300c 	ldrb.w	r3, [r9, #12]
 80117fc:	b9c3      	cbnz	r3, 8011830 <dwt_ioctl+0xd14>
 80117fe:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8011802:	2900      	cmp	r1, #0
 8011804:	d0bf      	beq.n	8011786 <dwt_ioctl+0xc6a>
 8011806:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 801180a:	2b00      	cmp	r3, #0
 801180c:	d0bb      	beq.n	8011786 <dwt_ioctl+0xc6a>
 801180e:	f899 200c 	ldrb.w	r2, [r9, #12]
 8011812:	9100      	str	r1, [sp, #0]
 8011814:	4639      	mov	r1, r7
 8011816:	4630      	mov	r0, r6
 8011818:	f7fc fdf5 	bl	800e406 <dwt_readfromdevice>
 801181c:	e7b3      	b.n	8011786 <dwt_ioctl+0xc6a>
 801181e:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8011820:	7b9b      	ldrb	r3, [r3, #14]
 8011822:	2b03      	cmp	r3, #3
 8011824:	bf0c      	ite	eq
 8011826:	f44f 1798 	moveq.w	r7, #1245184	; 0x130000
 801182a:	f44f 1790 	movne.w	r7, #1179648	; 0x120000
 801182e:	e7e0      	b.n	80117f2 <dwt_ioctl+0xcd6>
 8011830:	9200      	str	r2, [sp, #0]
 8011832:	2200      	movs	r2, #0
 8011834:	4639      	mov	r1, r7
 8011836:	4630      	mov	r0, r6
 8011838:	f7fc fde5 	bl	800e406 <dwt_readfromdevice>
 801183c:	e7df      	b.n	80117fe <dwt_ioctl+0xce2>
 801183e:	f06f 0302 	mvn.w	r3, #2
 8011842:	e7a1      	b.n	8011788 <dwt_ioctl+0xc6c>
 8011844:	f06f 0301 	mvn.w	r3, #1
 8011848:	e79e      	b.n	8011788 <dwt_ioctl+0xc6c>
 801184a:	f04f 33ff 	mov.w	r3, #4294967295
 801184e:	e79b      	b.n	8011788 <dwt_ioctl+0xc6c>
 8011850:	f04f 33ff 	mov.w	r3, #4294967295
 8011854:	e798      	b.n	8011788 <dwt_ioctl+0xc6c>
 8011856:	7a23      	ldrb	r3, [r4, #8]
 8011858:	79e1      	ldrb	r1, [r4, #7]
 801185a:	79a2      	ldrb	r2, [r4, #6]
 801185c:	00d2      	lsls	r2, r2, #3
 801185e:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8011862:	4313      	orrs	r3, r2
 8011864:	7962      	ldrb	r2, [r4, #5]
 8011866:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 801186a:	7922      	ldrb	r2, [r4, #4]
 801186c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8011870:	78e2      	ldrb	r2, [r4, #3]
 8011872:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8011876:	78a2      	ldrb	r2, [r4, #2]
 8011878:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 801187c:	7862      	ldrb	r2, [r4, #1]
 801187e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8011882:	7822      	ldrb	r2, [r4, #0]
 8011884:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8011888:	b29b      	uxth	r3, r3
 801188a:	2200      	movs	r2, #0
 801188c:	4965      	ldr	r1, [pc, #404]	; (8011a24 <dwt_ioctl+0xf08>)
 801188e:	f7fd fa38 	bl	800ed02 <dwt_write16bitoffsetreg>
 8011892:	2500      	movs	r5, #0
 8011894:	f001 b84a 	b.w	801292c <dwt_ioctl+0x1e10>
 8011898:	2c00      	cmp	r4, #0
 801189a:	f001 80ab 	beq.w	80129f4 <dwt_ioctl+0x1ed8>
 801189e:	7863      	ldrb	r3, [r4, #1]
 80118a0:	b133      	cbz	r3, 80118b0 <dwt_ioctl+0xd94>
 80118a2:	085b      	lsrs	r3, r3, #1
 80118a4:	3b01      	subs	r3, #1
 80118a6:	b2db      	uxtb	r3, r3
 80118a8:	7023      	strb	r3, [r4, #0]
 80118aa:	2500      	movs	r5, #0
 80118ac:	f001 b83e 	b.w	801292c <dwt_ioctl+0x1e10>
 80118b0:	2300      	movs	r3, #0
 80118b2:	e7f9      	b.n	80118a8 <dwt_ioctl+0xd8c>
 80118b4:	2200      	movs	r2, #0
 80118b6:	495c      	ldr	r1, [pc, #368]	; (8011a28 <dwt_ioctl+0xf0c>)
 80118b8:	f7fc fdaf 	bl	800e41a <dwt_read32bitoffsetreg>
 80118bc:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80118c0:	8023      	strh	r3, [r4, #0]
 80118c2:	f3c0 400b 	ubfx	r0, r0, #16, #12
 80118c6:	8060      	strh	r0, [r4, #2]
 80118c8:	2200      	movs	r2, #0
 80118ca:	4958      	ldr	r1, [pc, #352]	; (8011a2c <dwt_ioctl+0xf10>)
 80118cc:	4630      	mov	r0, r6
 80118ce:	f7fc fda4 	bl	800e41a <dwt_read32bitoffsetreg>
 80118d2:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80118d6:	80a3      	strh	r3, [r4, #4]
 80118d8:	f3c0 400b 	ubfx	r0, r0, #16, #12
 80118dc:	80e0      	strh	r0, [r4, #6]
 80118de:	2200      	movs	r2, #0
 80118e0:	4953      	ldr	r1, [pc, #332]	; (8011a30 <dwt_ioctl+0xf14>)
 80118e2:	4630      	mov	r0, r6
 80118e4:	f7fc fd99 	bl	800e41a <dwt_read32bitoffsetreg>
 80118e8:	7220      	strb	r0, [r4, #8]
 80118ea:	0c00      	lsrs	r0, r0, #16
 80118ec:	7260      	strb	r0, [r4, #9]
 80118ee:	2200      	movs	r2, #0
 80118f0:	4950      	ldr	r1, [pc, #320]	; (8011a34 <dwt_ioctl+0xf18>)
 80118f2:	4630      	mov	r0, r6
 80118f4:	f7fc fd91 	bl	800e41a <dwt_read32bitoffsetreg>
 80118f8:	f3c0 430b 	ubfx	r3, r0, #16, #12
 80118fc:	81a3      	strh	r3, [r4, #12]
 80118fe:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8011902:	8160      	strh	r0, [r4, #10]
 8011904:	2200      	movs	r2, #0
 8011906:	494c      	ldr	r1, [pc, #304]	; (8011a38 <dwt_ioctl+0xf1c>)
 8011908:	4630      	mov	r0, r6
 801190a:	f7fc fd86 	bl	800e41a <dwt_read32bitoffsetreg>
 801190e:	f3c0 430b 	ubfx	r3, r0, #16, #12
 8011912:	f8a4 300f 	strh.w	r3, [r4, #15]
 8011916:	73a0      	strb	r0, [r4, #14]
 8011918:	2200      	movs	r2, #0
 801191a:	4948      	ldr	r1, [pc, #288]	; (8011a3c <dwt_ioctl+0xf20>)
 801191c:	4630      	mov	r0, r6
 801191e:	f7fc fd7c 	bl	800e41a <dwt_read32bitoffsetreg>
 8011922:	7460      	strb	r0, [r4, #17]
 8011924:	0c00      	lsrs	r0, r0, #16
 8011926:	74a0      	strb	r0, [r4, #18]
 8011928:	2200      	movs	r2, #0
 801192a:	4945      	ldr	r1, [pc, #276]	; (8011a40 <dwt_ioctl+0xf24>)
 801192c:	4630      	mov	r0, r6
 801192e:	f7fc fd74 	bl	800e41a <dwt_read32bitoffsetreg>
 8011932:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8011936:	f8a4 3013 	strh.w	r3, [r4, #19]
 801193a:	f3c0 400b 	ubfx	r0, r0, #16, #12
 801193e:	f8a4 0015 	strh.w	r0, [r4, #21]
 8011942:	2200      	movs	r2, #0
 8011944:	493f      	ldr	r1, [pc, #252]	; (8011a44 <dwt_ioctl+0xf28>)
 8011946:	4630      	mov	r0, r6
 8011948:	f7fc fdbc 	bl	800e4c4 <dwt_read8bitoffsetreg>
 801194c:	75e0      	strb	r0, [r4, #23]
 801194e:	2500      	movs	r5, #0
 8011950:	f000 bfec 	b.w	801292c <dwt_ioctl+0x1e10>
 8011954:	4611      	mov	r1, r2
 8011956:	f7fd fc9b 	bl	800f290 <ull_configeventcounters>
 801195a:	2500      	movs	r5, #0
 801195c:	f000 bfe6 	b.w	801292c <dwt_ioctl+0x1e10>
 8011960:	2c00      	cmp	r4, #0
 8011962:	f001 8049 	beq.w	80129f8 <dwt_ioctl+0x1edc>
 8011966:	8823      	ldrh	r3, [r4, #0]
 8011968:	2200      	movs	r2, #0
 801196a:	4937      	ldr	r1, [pc, #220]	; (8011a48 <dwt_ioctl+0xf2c>)
 801196c:	f7fd f9c9 	bl	800ed02 <dwt_write16bitoffsetreg>
 8011970:	2500      	movs	r5, #0
 8011972:	f000 bfdb 	b.w	801292c <dwt_ioctl+0x1e10>
 8011976:	2c00      	cmp	r4, #0
 8011978:	f001 8040 	beq.w	80129fc <dwt_ioctl+0x1ee0>
 801197c:	6825      	ldr	r5, [r4, #0]
 801197e:	b935      	cbnz	r5, 801198e <dwt_ioctl+0xe72>
 8011980:	2300      	movs	r3, #0
 8011982:	461a      	mov	r2, r3
 8011984:	4931      	ldr	r1, [pc, #196]	; (8011a4c <dwt_ioctl+0xf30>)
 8011986:	f7fd f9bc 	bl	800ed02 <dwt_write16bitoffsetreg>
 801198a:	f000 bfcf 	b.w	801292c <dwt_ioctl+0x1e10>
 801198e:	7962      	ldrb	r2, [r4, #5]
 8011990:	7923      	ldrb	r3, [r4, #4]
 8011992:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8011996:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801199a:	2200      	movs	r2, #0
 801199c:	492b      	ldr	r1, [pc, #172]	; (8011a4c <dwt_ioctl+0xf30>)
 801199e:	f7fd f9b0 	bl	800ed02 <dwt_write16bitoffsetreg>
 80119a2:	2500      	movs	r5, #0
 80119a4:	f000 bfc2 	b.w	801292c <dwt_ioctl+0x1e10>
 80119a8:	2c00      	cmp	r4, #0
 80119aa:	f001 8029 	beq.w	8012a00 <dwt_ioctl+0x1ee4>
 80119ae:	6823      	ldr	r3, [r4, #0]
 80119b0:	b94b      	cbnz	r3, 80119c6 <dwt_ioctl+0xeaa>
 80119b2:	2500      	movs	r5, #0
 80119b4:	9500      	str	r5, [sp, #0]
 80119b6:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 80119ba:	462a      	mov	r2, r5
 80119bc:	2110      	movs	r1, #16
 80119be:	f7fe fc11 	bl	80101e4 <dwt_modify16bitoffsetreg>
 80119c2:	f000 bfb3 	b.w	801292c <dwt_ioctl+0x1e10>
 80119c6:	2200      	movs	r2, #0
 80119c8:	2134      	movs	r1, #52	; 0x34
 80119ca:	f7fd fa05 	bl	800edd8 <dwt_write32bitoffsetreg>
 80119ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80119d2:	9300      	str	r3, [sp, #0]
 80119d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80119d8:	2200      	movs	r2, #0
 80119da:	2110      	movs	r1, #16
 80119dc:	4630      	mov	r0, r6
 80119de:	f7fe fc01 	bl	80101e4 <dwt_modify16bitoffsetreg>
 80119e2:	2500      	movs	r5, #0
 80119e4:	f000 bfa2 	b.w	801292c <dwt_ioctl+0x1e10>
 80119e8:	2c00      	cmp	r4, #0
 80119ea:	f001 800b 	beq.w	8012a04 <dwt_ioctl+0x1ee8>
 80119ee:	8861      	ldrh	r1, [r4, #2]
 80119f0:	f7fd fc62 	bl	800f2b8 <ull_aon_read>
 80119f4:	7020      	strb	r0, [r4, #0]
 80119f6:	2500      	movs	r5, #0
 80119f8:	f000 bf98 	b.w	801292c <dwt_ioctl+0x1e10>
 80119fc:	2c00      	cmp	r4, #0
 80119fe:	f001 8003 	beq.w	8012a08 <dwt_ioctl+0x1eec>
 8011a02:	78a2      	ldrb	r2, [r4, #2]
 8011a04:	8821      	ldrh	r1, [r4, #0]
 8011a06:	f7fd fc77 	bl	800f2f8 <ull_aon_write>
 8011a0a:	2500      	movs	r5, #0
 8011a0c:	f000 bf8e 	b.w	801292c <dwt_ioctl+0x1e10>
 8011a10:	00010044 	.word	0x00010044
 8011a14:	0001ff80 	.word	0x0001ff80
 8011a18:	00010048 	.word	0x00010048
 8011a1c:	0001004c 	.word	0x0001004c
 8011a20:	00010050 	.word	0x00010050
 8011a24:	00010030 	.word	0x00010030
 8011a28:	000f0004 	.word	0x000f0004
 8011a2c:	000f0008 	.word	0x000f0008
 8011a30:	000f000c 	.word	0x000f000c
 8011a34:	000f0010 	.word	0x000f0010
 8011a38:	000f0014 	.word	0x000f0014
 8011a3c:	000f0018 	.word	0x000f0018
 8011a40:	000f001c 	.word	0x000f001c
 8011a44:	000f0020 	.word	0x000f0020
 8011a48:	00060004 	.word	0x00060004
 8011a4c:	0011001c 	.word	0x0011001c
 8011a50:	4bd5      	ldr	r3, [pc, #852]	; (8011da8 <dwt_ioctl+0x128c>)
 8011a52:	4ad6      	ldr	r2, [pc, #856]	; (8011dac <dwt_ioctl+0x1290>)
 8011a54:	2d01      	cmp	r5, #1
 8011a56:	bf18      	it	ne
 8011a58:	4613      	movne	r3, r2
 8011a5a:	2d01      	cmp	r5, #1
 8011a5c:	49d4      	ldr	r1, [pc, #848]	; (8011db0 <dwt_ioctl+0x1294>)
 8011a5e:	bf18      	it	ne
 8011a60:	f04f 110c 	movne.w	r1, #786444	; 0xc000c
 8011a64:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8011a66:	7b92      	ldrb	r2, [r2, #14]
 8011a68:	2a01      	cmp	r2, #1
 8011a6a:	d012      	beq.n	8011a92 <dwt_ioctl+0xf76>
 8011a6c:	2a03      	cmp	r2, #3
 8011a6e:	d117      	bne.n	8011aa0 <dwt_ioctl+0xf84>
 8011a70:	f5a2 12c0 	sub.w	r2, r2, #1572864	; 0x180000
 8011a74:	3a01      	subs	r2, #1
 8011a76:	441a      	add	r2, r3
 8011a78:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8011a7c:	f7fc fce3 	bl	800e446 <dwt_read16bitoffsetreg>
 8011a80:	09c0      	lsrs	r0, r0, #7
 8011a82:	8020      	strh	r0, [r4, #0]
 8011a84:	8825      	ldrh	r5, [r4, #0]
 8011a86:	3500      	adds	r5, #0
 8011a88:	bf18      	it	ne
 8011a8a:	2501      	movne	r5, #1
 8011a8c:	426d      	negs	r5, r5
 8011a8e:	f000 bf4d 	b.w	801292c <dwt_ioctl+0x1e10>
 8011a92:	2202      	movs	r2, #2
 8011a94:	4619      	mov	r1, r3
 8011a96:	f7fc fcd6 	bl	800e446 <dwt_read16bitoffsetreg>
 8011a9a:	09c0      	lsrs	r0, r0, #7
 8011a9c:	8020      	strh	r0, [r4, #0]
 8011a9e:	e7f1      	b.n	8011a84 <dwt_ioctl+0xf68>
 8011aa0:	2202      	movs	r2, #2
 8011aa2:	f7fc fcd0 	bl	800e446 <dwt_read16bitoffsetreg>
 8011aa6:	09c0      	lsrs	r0, r0, #7
 8011aa8:	8020      	strh	r0, [r4, #0]
 8011aaa:	e7eb      	b.n	8011a84 <dwt_ioctl+0xf68>
 8011aac:	2c00      	cmp	r4, #0
 8011aae:	f000 87ad 	beq.w	8012a0c <dwt_ioctl+0x1ef0>
 8011ab2:	7821      	ldrb	r1, [r4, #0]
 8011ab4:	f7fe fbd4 	bl	8010260 <ull_setleds>
 8011ab8:	2500      	movs	r5, #0
 8011aba:	f000 bf37 	b.w	801292c <dwt_ioctl+0x1e10>
 8011abe:	4611      	mov	r1, r2
 8011ac0:	f7fe fa30 	bl	800ff24 <ull_setdwstate>
 8011ac4:	2500      	movs	r5, #0
 8011ac6:	f000 bf31 	b.w	801292c <dwt_ioctl+0x1e10>
 8011aca:	9400      	str	r4, [sp, #0]
 8011acc:	2304      	movs	r3, #4
 8011ace:	2200      	movs	r2, #0
 8011ad0:	211c      	movs	r1, #28
 8011ad2:	f7fc fc98 	bl	800e406 <dwt_readfromdevice>
 8011ad6:	2500      	movs	r5, #0
 8011ad8:	f000 bf28 	b.w	801292c <dwt_ioctl+0x1e10>
 8011adc:	2c00      	cmp	r4, #0
 8011ade:	f000 8797 	beq.w	8012a10 <dwt_ioctl+0x1ef4>
 8011ae2:	2202      	movs	r2, #2
 8011ae4:	2144      	movs	r1, #68	; 0x44
 8011ae6:	f7fc fcae 	bl	800e446 <dwt_read16bitoffsetreg>
 8011aea:	f3c0 2000 	ubfx	r0, r0, #8, #1
 8011aee:	7020      	strb	r0, [r4, #0]
 8011af0:	2500      	movs	r5, #0
 8011af2:	f000 bf1b 	b.w	801292c <dwt_ioctl+0x1e10>
 8011af6:	2c00      	cmp	r4, #0
 8011af8:	f000 878c 	beq.w	8012a14 <dwt_ioctl+0x1ef8>
 8011afc:	2200      	movs	r2, #0
 8011afe:	2144      	movs	r1, #68	; 0x44
 8011b00:	f7fc fce0 	bl	800e4c4 <dwt_read8bitoffsetreg>
 8011b04:	f000 0001 	and.w	r0, r0, #1
 8011b08:	7020      	strb	r0, [r4, #0]
 8011b0a:	2500      	movs	r5, #0
 8011b0c:	f000 bf0e 	b.w	801292c <dwt_ioctl+0x1e10>
 8011b10:	2c00      	cmp	r4, #0
 8011b12:	f000 8781 	beq.w	8012a18 <dwt_ioctl+0x1efc>
 8011b16:	8862      	ldrh	r2, [r4, #2]
 8011b18:	8821      	ldrh	r1, [r4, #0]
 8011b1a:	f7fe fa61 	bl	800ffe0 <ull_configureframefilter>
 8011b1e:	2500      	movs	r5, #0
 8011b20:	f000 bf04 	b.w	801292c <dwt_ioctl+0x1e10>
 8011b24:	9400      	str	r4, [sp, #0]
 8011b26:	2308      	movs	r3, #8
 8011b28:	2200      	movs	r2, #0
 8011b2a:	2104      	movs	r1, #4
 8011b2c:	f7fd f8de 	bl	800ecec <dwt_writetodevice>
 8011b30:	2500      	movs	r5, #0
 8011b32:	f000 befb 	b.w	801292c <dwt_ioctl+0x1e10>
 8011b36:	9400      	str	r4, [sp, #0]
 8011b38:	2308      	movs	r3, #8
 8011b3a:	2200      	movs	r2, #0
 8011b3c:	2104      	movs	r1, #4
 8011b3e:	f7fc fc62 	bl	800e406 <dwt_readfromdevice>
 8011b42:	2500      	movs	r5, #0
 8011b44:	f000 bef2 	b.w	801292c <dwt_ioctl+0x1e10>
 8011b48:	2c00      	cmp	r4, #0
 8011b4a:	f000 8767 	beq.w	8012a1c <dwt_ioctl+0x1f00>
 8011b4e:	8823      	ldrh	r3, [r4, #0]
 8011b50:	2202      	movs	r2, #2
 8011b52:	210c      	movs	r1, #12
 8011b54:	f7fd f8d5 	bl	800ed02 <dwt_write16bitoffsetreg>
 8011b58:	2500      	movs	r5, #0
 8011b5a:	f000 bee7 	b.w	801292c <dwt_ioctl+0x1e10>
 8011b5e:	2c00      	cmp	r4, #0
 8011b60:	f000 875e 	beq.w	8012a20 <dwt_ioctl+0x1f04>
 8011b64:	8823      	ldrh	r3, [r4, #0]
 8011b66:	2200      	movs	r2, #0
 8011b68:	210c      	movs	r1, #12
 8011b6a:	f7fd f8ca 	bl	800ed02 <dwt_write16bitoffsetreg>
 8011b6e:	2500      	movs	r5, #0
 8011b70:	f000 bedc 	b.w	801292c <dwt_ioctl+0x1e10>
 8011b74:	4621      	mov	r1, r4
 8011b76:	f7fd f897 	bl	800eca8 <ull_readrxtimestamp>
 8011b7a:	2500      	movs	r5, #0
 8011b7c:	f000 bed6 	b.w	801292c <dwt_ioctl+0x1e10>
 8011b80:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8011b82:	7b9b      	ldrb	r3, [r3, #14]
 8011b84:	2b01      	cmp	r3, #1
 8011b86:	d00b      	beq.n	8011ba0 <dwt_ioctl+0x1084>
 8011b88:	2b03      	cmp	r3, #3
 8011b8a:	d112      	bne.n	8011bb2 <dwt_ioctl+0x1096>
 8011b8c:	9400      	str	r4, [sp, #0]
 8011b8e:	2305      	movs	r3, #5
 8011b90:	2220      	movs	r2, #32
 8011b92:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8011b96:	f7fc fc36 	bl	800e406 <dwt_readfromdevice>
 8011b9a:	2500      	movs	r5, #0
 8011b9c:	f000 bec6 	b.w	801292c <dwt_ioctl+0x1e10>
 8011ba0:	9400      	str	r4, [sp, #0]
 8011ba2:	2305      	movs	r3, #5
 8011ba4:	2200      	movs	r2, #0
 8011ba6:	4983      	ldr	r1, [pc, #524]	; (8011db4 <dwt_ioctl+0x1298>)
 8011ba8:	f7fc fc2d 	bl	800e406 <dwt_readfromdevice>
 8011bac:	2500      	movs	r5, #0
 8011bae:	f000 bebd 	b.w	801292c <dwt_ioctl+0x1e10>
 8011bb2:	9400      	str	r4, [sp, #0]
 8011bb4:	2305      	movs	r3, #5
 8011bb6:	2200      	movs	r2, #0
 8011bb8:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 8011bbc:	f7fc fc23 	bl	800e406 <dwt_readfromdevice>
 8011bc0:	2500      	movs	r5, #0
 8011bc2:	f000 beb3 	b.w	801292c <dwt_ioctl+0x1e10>
 8011bc6:	2500      	movs	r5, #0
 8011bc8:	f804 5b01 	strb.w	r5, [r4], #1
 8011bcc:	9400      	str	r4, [sp, #0]
 8011bce:	2304      	movs	r3, #4
 8011bd0:	462a      	mov	r2, r5
 8011bd2:	216c      	movs	r1, #108	; 0x6c
 8011bd4:	f7fc fc17 	bl	800e406 <dwt_readfromdevice>
 8011bd8:	f000 bea8 	b.w	801292c <dwt_ioctl+0x1e10>
 8011bdc:	2c00      	cmp	r4, #0
 8011bde:	f000 8721 	beq.w	8012a24 <dwt_ioctl+0x1f08>
 8011be2:	2201      	movs	r2, #1
 8011be4:	2160      	movs	r1, #96	; 0x60
 8011be6:	f7fc fc18 	bl	800e41a <dwt_read32bitoffsetreg>
 8011bea:	6020      	str	r0, [r4, #0]
 8011bec:	2500      	movs	r5, #0
 8011bee:	f000 be9d 	b.w	801292c <dwt_ioctl+0x1e10>
 8011bf2:	2c00      	cmp	r4, #0
 8011bf4:	f000 8718 	beq.w	8012a28 <dwt_ioctl+0x1f0c>
 8011bf8:	2200      	movs	r2, #0
 8011bfa:	2160      	movs	r1, #96	; 0x60
 8011bfc:	f7fc fc0d 	bl	800e41a <dwt_read32bitoffsetreg>
 8011c00:	6020      	str	r0, [r4, #0]
 8011c02:	2500      	movs	r5, #0
 8011c04:	f000 be92 	b.w	801292c <dwt_ioctl+0x1e10>
 8011c08:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8011c0a:	7b9b      	ldrb	r3, [r3, #14]
 8011c0c:	2b01      	cmp	r3, #1
 8011c0e:	d00b      	beq.n	8011c28 <dwt_ioctl+0x110c>
 8011c10:	2b03      	cmp	r3, #3
 8011c12:	d112      	bne.n	8011c3a <dwt_ioctl+0x111e>
 8011c14:	9400      	str	r4, [sp, #0]
 8011c16:	2305      	movs	r3, #5
 8011c18:	2228      	movs	r2, #40	; 0x28
 8011c1a:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8011c1e:	f7fc fbf2 	bl	800e406 <dwt_readfromdevice>
 8011c22:	2500      	movs	r5, #0
 8011c24:	f000 be82 	b.w	801292c <dwt_ioctl+0x1e10>
 8011c28:	9400      	str	r4, [sp, #0]
 8011c2a:	2305      	movs	r3, #5
 8011c2c:	2200      	movs	r2, #0
 8011c2e:	4962      	ldr	r1, [pc, #392]	; (8011db8 <dwt_ioctl+0x129c>)
 8011c30:	f7fc fbe9 	bl	800e406 <dwt_readfromdevice>
 8011c34:	2500      	movs	r5, #0
 8011c36:	f000 be79 	b.w	801292c <dwt_ioctl+0x1e10>
 8011c3a:	9400      	str	r4, [sp, #0]
 8011c3c:	2305      	movs	r3, #5
 8011c3e:	2200      	movs	r2, #0
 8011c40:	495e      	ldr	r1, [pc, #376]	; (8011dbc <dwt_ioctl+0x12a0>)
 8011c42:	f7fc fbe0 	bl	800e406 <dwt_readfromdevice>
 8011c46:	2500      	movs	r5, #0
 8011c48:	f000 be70 	b.w	801292c <dwt_ioctl+0x1e10>
 8011c4c:	2c00      	cmp	r4, #0
 8011c4e:	f000 86ed 	beq.w	8012a2c <dwt_ioctl+0x1f10>
 8011c52:	2200      	movs	r2, #0
 8011c54:	211c      	movs	r1, #28
 8011c56:	f7fc fbe0 	bl	800e41a <dwt_read32bitoffsetreg>
 8011c5a:	6020      	str	r0, [r4, #0]
 8011c5c:	2500      	movs	r5, #0
 8011c5e:	f000 be65 	b.w	801292c <dwt_ioctl+0x1e10>
 8011c62:	2c00      	cmp	r4, #0
 8011c64:	f000 86e4 	beq.w	8012a30 <dwt_ioctl+0x1f14>
 8011c68:	8825      	ldrh	r5, [r4, #0]
 8011c6a:	6867      	ldr	r7, [r4, #4]
 8011c6c:	7a23      	ldrb	r3, [r4, #8]
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	f000 86e0 	beq.w	8012a34 <dwt_ioctl+0x1f18>
 8011c74:	463c      	mov	r4, r7
 8011c76:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 8011c7a:	4629      	mov	r1, r5
 8011c7c:	4630      	mov	r0, r6
 8011c7e:	f7fd f889 	bl	800ed94 <_dwt_otpread>
 8011c82:	f844 0b04 	str.w	r0, [r4], #4
 8011c86:	3501      	adds	r5, #1
 8011c88:	b2ad      	uxth	r5, r5
 8011c8a:	42bc      	cmp	r4, r7
 8011c8c:	d1f5      	bne.n	8011c7a <dwt_ioctl+0x115e>
 8011c8e:	2500      	movs	r5, #0
 8011c90:	f000 be4c 	b.w	801292c <dwt_ioctl+0x1e10>
 8011c94:	2c00      	cmp	r4, #0
 8011c96:	f000 86cf 	beq.w	8012a38 <dwt_ioctl+0x1f1c>
 8011c9a:	7821      	ldrb	r1, [r4, #0]
 8011c9c:	f7fd fb86 	bl	800f3ac <ull_setplenfine>
 8011ca0:	2500      	movs	r5, #0
 8011ca2:	f000 be43 	b.w	801292c <dwt_ioctl+0x1e10>
 8011ca6:	f7fe f9bf 	bl	8010028 <ull_run_pgfcal>
 8011caa:	4605      	mov	r5, r0
 8011cac:	f000 be3e 	b.w	801292c <dwt_ioctl+0x1e10>
 8011cb0:	4611      	mov	r1, r2
 8011cb2:	f7fe fb23 	bl	80102fc <ull_pgf_cal>
 8011cb6:	4605      	mov	r5, r0
 8011cb8:	f000 be38 	b.w	801292c <dwt_ioctl+0x1e10>
 8011cbc:	2c00      	cmp	r4, #0
 8011cbe:	f000 86bd 	beq.w	8012a3c <dwt_ioctl+0x1f20>
 8011cc2:	78a5      	ldrb	r5, [r4, #2]
 8011cc4:	2101      	movs	r1, #1
 8011cc6:	f7fd f83b 	bl	800ed40 <ull_force_clocks>
 8011cca:	2100      	movs	r1, #0
 8011ccc:	4630      	mov	r0, r6
 8011cce:	f7fd fdbd 	bl	800f84c <ull_enable_rf_tx>
 8011cd2:	4630      	mov	r0, r6
 8011cd4:	f7fd fdee 	bl	800f8b4 <ull_enable_rftx_blocks>
 8011cd8:	f005 033f 	and.w	r3, r5, #63	; 0x3f
 8011cdc:	2200      	movs	r2, #0
 8011cde:	4938      	ldr	r1, [pc, #224]	; (8011dc0 <dwt_ioctl+0x12a4>)
 8011ce0:	4630      	mov	r0, r6
 8011ce2:	f7fd fa5d 	bl	800f1a0 <dwt_write8bitoffsetreg>
 8011ce6:	2301      	movs	r3, #1
 8011ce8:	9300      	str	r3, [sp, #0]
 8011cea:	23ff      	movs	r3, #255	; 0xff
 8011cec:	2200      	movs	r2, #0
 8011cee:	4935      	ldr	r1, [pc, #212]	; (8011dc4 <dwt_ioctl+0x12a8>)
 8011cf0:	4630      	mov	r0, r6
 8011cf2:	f7fd fee7 	bl	800fac4 <dwt_modify8bitoffsetreg>
 8011cf6:	4f33      	ldr	r7, [pc, #204]	; (8011dc4 <dwt_ioctl+0x12a8>)
 8011cf8:	2500      	movs	r5, #0
 8011cfa:	462a      	mov	r2, r5
 8011cfc:	4639      	mov	r1, r7
 8011cfe:	4630      	mov	r0, r6
 8011d00:	f7fc fbe0 	bl	800e4c4 <dwt_read8bitoffsetreg>
 8011d04:	f010 0f01 	tst.w	r0, #1
 8011d08:	d1f7      	bne.n	8011cfa <dwt_ioctl+0x11de>
 8011d0a:	2200      	movs	r2, #0
 8011d0c:	492e      	ldr	r1, [pc, #184]	; (8011dc8 <dwt_ioctl+0x12ac>)
 8011d0e:	4630      	mov	r0, r6
 8011d10:	f7fc fb99 	bl	800e446 <dwt_read16bitoffsetreg>
 8011d14:	4605      	mov	r5, r0
 8011d16:	4630      	mov	r0, r6
 8011d18:	f7fd f9c0 	bl	800f09c <ull_disable_rftx_blocks>
 8011d1c:	2100      	movs	r1, #0
 8011d1e:	4630      	mov	r0, r6
 8011d20:	f7fd f9c6 	bl	800f0b0 <ull_disable_rf_tx>
 8011d24:	2105      	movs	r1, #5
 8011d26:	4630      	mov	r0, r6
 8011d28:	f7fd f80a 	bl	800ed40 <ull_force_clocks>
 8011d2c:	f3c5 050b 	ubfx	r5, r5, #0, #12
 8011d30:	8025      	strh	r5, [r4, #0]
 8011d32:	2500      	movs	r5, #0
 8011d34:	f000 bdfa 	b.w	801292c <dwt_ioctl+0x1e10>
 8011d38:	2102      	movs	r1, #2
 8011d3a:	f7fe f8f3 	bl	800ff24 <ull_setdwstate>
 8011d3e:	2101      	movs	r1, #1
 8011d40:	4630      	mov	r0, r6
 8011d42:	f7fe f8ef 	bl	800ff24 <ull_setdwstate>
 8011d46:	2432      	movs	r4, #50	; 0x32
 8011d48:	f04f 0814 	mov.w	r8, #20
 8011d4c:	2700      	movs	r7, #0
 8011d4e:	2544      	movs	r5, #68	; 0x44
 8011d50:	4640      	mov	r0, r8
 8011d52:	f7ee fbe6 	bl	8000522 <deca_usleep>
 8011d56:	463a      	mov	r2, r7
 8011d58:	4629      	mov	r1, r5
 8011d5a:	4630      	mov	r0, r6
 8011d5c:	f7fc fbb2 	bl	800e4c4 <dwt_read8bitoffsetreg>
 8011d60:	f010 0f02 	tst.w	r0, #2
 8011d64:	d105      	bne.n	8011d72 <dwt_ioctl+0x1256>
 8011d66:	1e63      	subs	r3, r4, #1
 8011d68:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8011d6c:	d1f0      	bne.n	8011d50 <dwt_ioctl+0x1234>
 8011d6e:	2501      	movs	r5, #1
 8011d70:	e000      	b.n	8011d74 <dwt_ioctl+0x1258>
 8011d72:	2500      	movs	r5, #0
 8011d74:	426d      	negs	r5, r5
 8011d76:	f000 bdd9 	b.w	801292c <dwt_ioctl+0x1e10>
 8011d7a:	2c00      	cmp	r4, #0
 8011d7c:	f000 8660 	beq.w	8012a40 <dwt_ioctl+0x1f24>
 8011d80:	7823      	ldrb	r3, [r4, #0]
 8011d82:	031b      	lsls	r3, r3, #12
 8011d84:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8011d88:	7862      	ldrb	r2, [r4, #1]
 8011d8a:	2a01      	cmp	r2, #1
 8011d8c:	bf08      	it	eq
 8011d8e:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
 8011d92:	9300      	str	r3, [sp, #0]
 8011d94:	f46f 43e2 	mvn.w	r3, #28928	; 0x7100
 8011d98:	2200      	movs	r2, #0
 8011d9a:	490c      	ldr	r1, [pc, #48]	; (8011dcc <dwt_ioctl+0x12b0>)
 8011d9c:	f7fd fd22 	bl	800f7e4 <dwt_modify32bitoffsetreg>
 8011da0:	2500      	movs	r5, #0
 8011da2:	f000 bdc3 	b.w	801292c <dwt_ioctl+0x1e10>
 8011da6:	bf00      	nop
 8011da8:	00180034 	.word	0x00180034
 8011dac:	0018002c 	.word	0x0018002c
 8011db0:	000c0014 	.word	0x000c0014
 8011db4:	00180020 	.word	0x00180020
 8011db8:	00180028 	.word	0x00180028
 8011dbc:	000c0008 	.word	0x000c0008
 8011dc0:	0007001c 	.word	0x0007001c
 8011dc4:	00080010 	.word	0x00080010
 8011dc8:	00080014 	.word	0x00080014
 8011dcc:	00070014 	.word	0x00070014
 8011dd0:	2c00      	cmp	r4, #0
 8011dd2:	f000 8637 	beq.w	8012a44 <dwt_ioctl+0x1f28>
 8011dd6:	6862      	ldr	r2, [r4, #4]
 8011dd8:	6821      	ldr	r1, [r4, #0]
 8011dda:	f7fd fe35 	bl	800fa48 <ull_setgpiomode>
 8011dde:	2500      	movs	r5, #0
 8011de0:	f000 bda4 	b.w	801292c <dwt_ioctl+0x1e10>
 8011de4:	2c00      	cmp	r4, #0
 8011de6:	f000 862f 	beq.w	8012a48 <dwt_ioctl+0x1f2c>
 8011dea:	8823      	ldrh	r3, [r4, #0]
 8011dec:	2200      	movs	r2, #0
 8011dee:	49c4      	ldr	r1, [pc, #784]	; (8012100 <dwt_ioctl+0x15e4>)
 8011df0:	f7fc ff87 	bl	800ed02 <dwt_write16bitoffsetreg>
 8011df4:	2500      	movs	r5, #0
 8011df6:	f000 bd99 	b.w	801292c <dwt_ioctl+0x1e10>
 8011dfa:	2c00      	cmp	r4, #0
 8011dfc:	f000 8626 	beq.w	8012a4c <dwt_ioctl+0x1f30>
 8011e00:	6862      	ldr	r2, [r4, #4]
 8011e02:	8821      	ldrh	r1, [r4, #0]
 8011e04:	f7fe faaa 	bl	801035c <ull_setgpiovalue>
 8011e08:	2500      	movs	r5, #0
 8011e0a:	f000 bd8f 	b.w	801292c <dwt_ioctl+0x1e10>
 8011e0e:	2c00      	cmp	r4, #0
 8011e10:	f000 861e 	beq.w	8012a50 <dwt_ioctl+0x1f34>
 8011e14:	7865      	ldrb	r5, [r4, #1]
 8011e16:	7823      	ldrb	r3, [r4, #0]
 8011e18:	b18b      	cbz	r3, 8011e3e <dwt_ioctl+0x1322>
 8011e1a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8011e1c:	2200      	movs	r2, #0
 8011e1e:	739a      	strb	r2, [r3, #14]
 8011e20:	f04f 33ff 	mov.w	r3, #4294967295
 8011e24:	2208      	movs	r2, #8
 8011e26:	b37d      	cbz	r5, 8011e88 <dwt_ioctl+0x136c>
 8011e28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011e2c:	9200      	str	r2, [sp, #0]
 8011e2e:	2200      	movs	r2, #0
 8011e30:	2110      	movs	r1, #16
 8011e32:	4630      	mov	r0, r6
 8011e34:	f7fd fcd6 	bl	800f7e4 <dwt_modify32bitoffsetreg>
 8011e38:	2500      	movs	r5, #0
 8011e3a:	f000 bd77 	b.w	801292c <dwt_ioctl+0x1e10>
 8011e3e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8011e40:	2201      	movs	r2, #1
 8011e42:	739a      	strb	r2, [r3, #14]
 8011e44:	2318      	movs	r3, #24
 8011e46:	2200      	movs	r2, #0
 8011e48:	49ae      	ldr	r1, [pc, #696]	; (8012104 <dwt_ioctl+0x15e8>)
 8011e4a:	f7fc ffc5 	bl	800edd8 <dwt_write32bitoffsetreg>
 8011e4e:	23e8      	movs	r3, #232	; 0xe8
 8011e50:	2200      	movs	r2, #0
 8011e52:	49ad      	ldr	r1, [pc, #692]	; (8012108 <dwt_ioctl+0x15ec>)
 8011e54:	4630      	mov	r0, r6
 8011e56:	f7fc ffbf 	bl	800edd8 <dwt_write32bitoffsetreg>
 8011e5a:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8011e5c:	7d9b      	ldrb	r3, [r3, #22]
 8011e5e:	085b      	lsrs	r3, r3, #1
 8011e60:	d003      	beq.n	8011e6a <dwt_ioctl+0x134e>
 8011e62:	f06f 0308 	mvn.w	r3, #8
 8011e66:	2200      	movs	r2, #0
 8011e68:	e7dd      	b.n	8011e26 <dwt_ioctl+0x130a>
 8011e6a:	2301      	movs	r3, #1
 8011e6c:	2200      	movs	r2, #0
 8011e6e:	49a7      	ldr	r1, [pc, #668]	; (801210c <dwt_ioctl+0x15f0>)
 8011e70:	4630      	mov	r0, r6
 8011e72:	f7fd f995 	bl	800f1a0 <dwt_write8bitoffsetreg>
 8011e76:	6d32      	ldr	r2, [r6, #80]	; 0x50
 8011e78:	7d93      	ldrb	r3, [r2, #22]
 8011e7a:	f043 0302 	orr.w	r3, r3, #2
 8011e7e:	7593      	strb	r3, [r2, #22]
 8011e80:	f06f 0308 	mvn.w	r3, #8
 8011e84:	2200      	movs	r2, #0
 8011e86:	e7ce      	b.n	8011e26 <dwt_ioctl+0x130a>
 8011e88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011e8c:	e7ce      	b.n	8011e2c <dwt_ioctl+0x1310>
 8011e8e:	2c00      	cmp	r4, #0
 8011e90:	f000 85e0 	beq.w	8012a54 <dwt_ioctl+0x1f38>
 8011e94:	6823      	ldr	r3, [r4, #0]
 8011e96:	2200      	movs	r2, #0
 8011e98:	2130      	movs	r1, #48	; 0x30
 8011e9a:	f7fc ff9d 	bl	800edd8 <dwt_write32bitoffsetreg>
 8011e9e:	2500      	movs	r5, #0
 8011ea0:	f000 bd44 	b.w	801292c <dwt_ioctl+0x1e10>
 8011ea4:	2c00      	cmp	r4, #0
 8011ea6:	f000 85d7 	beq.w	8012a58 <dwt_ioctl+0x1f3c>
 8011eaa:	2200      	movs	r2, #0
 8011eac:	4629      	mov	r1, r5
 8011eae:	f7fc fab4 	bl	800e41a <dwt_read32bitoffsetreg>
 8011eb2:	6020      	str	r0, [r4, #0]
 8011eb4:	2500      	movs	r5, #0
 8011eb6:	f000 bd39 	b.w	801292c <dwt_ioctl+0x1e10>
 8011eba:	4623      	mov	r3, r4
 8011ebc:	2200      	movs	r2, #0
 8011ebe:	4629      	mov	r1, r5
 8011ec0:	f7fc ff8a 	bl	800edd8 <dwt_write32bitoffsetreg>
 8011ec4:	2500      	movs	r5, #0
 8011ec6:	f000 bd31 	b.w	801292c <dwt_ioctl+0x1e10>
 8011eca:	2c00      	cmp	r4, #0
 8011ecc:	f000 85c6 	beq.w	8012a5c <dwt_ioctl+0x1f40>
 8011ed0:	2203      	movs	r2, #3
 8011ed2:	498f      	ldr	r1, [pc, #572]	; (8012110 <dwt_ioctl+0x15f4>)
 8011ed4:	f7fc faf6 	bl	800e4c4 <dwt_read8bitoffsetreg>
 8011ed8:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8011edc:	7020      	strb	r0, [r4, #0]
 8011ede:	2500      	movs	r5, #0
 8011ee0:	f000 bd24 	b.w	801292c <dwt_ioctl+0x1e10>
 8011ee4:	2c00      	cmp	r4, #0
 8011ee6:	f000 85bb 	beq.w	8012a60 <dwt_ioctl+0x1f44>
 8011eea:	6823      	ldr	r3, [r4, #0]
 8011eec:	2200      	movs	r2, #0
 8011eee:	2144      	movs	r1, #68	; 0x44
 8011ef0:	f7fc ff72 	bl	800edd8 <dwt_write32bitoffsetreg>
 8011ef4:	2500      	movs	r5, #0
 8011ef6:	f000 bd19 	b.w	801292c <dwt_ioctl+0x1e10>
 8011efa:	2c00      	cmp	r4, #0
 8011efc:	f000 85b2 	beq.w	8012a64 <dwt_ioctl+0x1f48>
 8011f00:	8823      	ldrh	r3, [r4, #0]
 8011f02:	2200      	movs	r2, #0
 8011f04:	2148      	movs	r1, #72	; 0x48
 8011f06:	f7fc fefc 	bl	800ed02 <dwt_write16bitoffsetreg>
 8011f0a:	2500      	movs	r5, #0
 8011f0c:	f000 bd0e 	b.w	801292c <dwt_ioctl+0x1e10>
 8011f10:	2c00      	cmp	r4, #0
 8011f12:	f000 85a9 	beq.w	8012a68 <dwt_ioctl+0x1f4c>
 8011f16:	2200      	movs	r2, #0
 8011f18:	2144      	movs	r1, #68	; 0x44
 8011f1a:	f7fc fa7e 	bl	800e41a <dwt_read32bitoffsetreg>
 8011f1e:	6020      	str	r0, [r4, #0]
 8011f20:	2500      	movs	r5, #0
 8011f22:	f000 bd03 	b.w	801292c <dwt_ioctl+0x1e10>
 8011f26:	2c00      	cmp	r4, #0
 8011f28:	f000 85a0 	beq.w	8012a6c <dwt_ioctl+0x1f50>
 8011f2c:	2200      	movs	r2, #0
 8011f2e:	2148      	movs	r1, #72	; 0x48
 8011f30:	f7fc fa89 	bl	800e446 <dwt_read16bitoffsetreg>
 8011f34:	6020      	str	r0, [r4, #0]
 8011f36:	2500      	movs	r5, #0
 8011f38:	f000 bcf8 	b.w	801292c <dwt_ioctl+0x1e10>
 8011f3c:	2c00      	cmp	r4, #0
 8011f3e:	f000 8597 	beq.w	8012a70 <dwt_ioctl+0x1f54>
 8011f42:	7823      	ldrb	r3, [r4, #0]
 8011f44:	2200      	movs	r2, #0
 8011f46:	4973      	ldr	r1, [pc, #460]	; (8012114 <dwt_ioctl+0x15f8>)
 8011f48:	f7fd f92a 	bl	800f1a0 <dwt_write8bitoffsetreg>
 8011f4c:	2500      	movs	r5, #0
 8011f4e:	f000 bced 	b.w	801292c <dwt_ioctl+0x1e10>
 8011f52:	2c00      	cmp	r4, #0
 8011f54:	f000 858e 	beq.w	8012a74 <dwt_ioctl+0x1f58>
 8011f58:	2200      	movs	r2, #0
 8011f5a:	2144      	movs	r1, #68	; 0x44
 8011f5c:	f7fc fab2 	bl	800e4c4 <dwt_read8bitoffsetreg>
 8011f60:	7020      	strb	r0, [r4, #0]
 8011f62:	2500      	movs	r5, #0
 8011f64:	f000 bce2 	b.w	801292c <dwt_ioctl+0x1e10>
 8011f68:	2c00      	cmp	r4, #0
 8011f6a:	f000 8585 	beq.w	8012a78 <dwt_ioctl+0x1f5c>
 8011f6e:	f7fd f923 	bl	800f1b8 <ull_getframelength>
 8011f72:	6020      	str	r0, [r4, #0]
 8011f74:	2500      	movs	r5, #0
 8011f76:	f000 bcd9 	b.w	801292c <dwt_ioctl+0x1e10>
 8011f7a:	2c00      	cmp	r4, #0
 8011f7c:	f000 857e 	beq.w	8012a7c <dwt_ioctl+0x1f60>
 8011f80:	2200      	movs	r2, #0
 8011f82:	4965      	ldr	r1, [pc, #404]	; (8012118 <dwt_ioctl+0x15fc>)
 8011f84:	f7fc fa5f 	bl	800e446 <dwt_read16bitoffsetreg>
 8011f88:	8020      	strh	r0, [r4, #0]
 8011f8a:	2500      	movs	r5, #0
 8011f8c:	f000 bcce 	b.w	801292c <dwt_ioctl+0x1e10>
 8011f90:	2c00      	cmp	r4, #0
 8011f92:	f000 8575 	beq.w	8012a80 <dwt_ioctl+0x1f64>
 8011f96:	2200      	movs	r2, #0
 8011f98:	4960      	ldr	r1, [pc, #384]	; (801211c <dwt_ioctl+0x1600>)
 8011f9a:	f7fc fa3e 	bl	800e41a <dwt_read32bitoffsetreg>
 8011f9e:	6020      	str	r0, [r4, #0]
 8011fa0:	2500      	movs	r5, #0
 8011fa2:	f000 bcc3 	b.w	801292c <dwt_ioctl+0x1e10>
 8011fa6:	2c00      	cmp	r4, #0
 8011fa8:	f000 856c 	beq.w	8012a84 <dwt_ioctl+0x1f68>
 8011fac:	8823      	ldrh	r3, [r4, #0]
 8011fae:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011fb2:	9300      	str	r3, [sp, #0]
 8011fb4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8011fb8:	2200      	movs	r2, #0
 8011fba:	4958      	ldr	r1, [pc, #352]	; (801211c <dwt_ioctl+0x1600>)
 8011fbc:	f7fe f912 	bl	80101e4 <dwt_modify16bitoffsetreg>
 8011fc0:	2500      	movs	r5, #0
 8011fc2:	f000 bcb3 	b.w	801292c <dwt_ioctl+0x1e10>
 8011fc6:	2c00      	cmp	r4, #0
 8011fc8:	f000 855e 	beq.w	8012a88 <dwt_ioctl+0x1f6c>
 8011fcc:	88a7      	ldrh	r7, [r4, #4]
 8011fce:	f8d4 b008 	ldr.w	fp, [r4, #8]
 8011fd2:	7b23      	ldrb	r3, [r4, #12]
 8011fd4:	9306      	str	r3, [sp, #24]
 8011fd6:	6922      	ldr	r2, [r4, #16]
 8011fd8:	9204      	str	r2, [sp, #16]
 8011fda:	6962      	ldr	r2, [r4, #20]
 8011fdc:	9205      	str	r2, [sp, #20]
 8011fde:	f00b 0203 	and.w	r2, fp, #3
 8011fe2:	f3cb 0585 	ubfx	r5, fp, #2, #6
 8011fe6:	2b05      	cmp	r3, #5
 8011fe8:	d147      	bne.n	801207a <dwt_ioctl+0x155e>
 8011fea:	f5b7 7fb1 	cmp.w	r7, #354	; 0x162
 8011fee:	bf28      	it	cs
 8011ff0:	f44f 77b1 	movcs.w	r7, #354	; 0x162
 8011ff4:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8012124 <dwt_ioctl+0x1608>
 8011ff8:	2f04      	cmp	r7, #4
 8011ffa:	d805      	bhi.n	8012008 <dwt_ioctl+0x14ec>
 8011ffc:	eb09 0305 	add.w	r3, r9, r5
 8012000:	785b      	ldrb	r3, [r3, #1]
 8012002:	3b05      	subs	r3, #5
 8012004:	429f      	cmp	r7, r3
 8012006:	db40      	blt.n	801208a <dwt_ioctl+0x156e>
 8012008:	2a01      	cmp	r2, #1
 801200a:	f200 80c8 	bhi.w	801219e <dwt_ioctl+0x1682>
 801200e:	4b44      	ldr	r3, [pc, #272]	; (8012120 <dwt_ioctl+0x1604>)
 8012010:	5c99      	ldrb	r1, [r3, r2]
 8012012:	463e      	mov	r6, r7
 8012014:	42b9      	cmp	r1, r7
 8012016:	f280 80c4 	bge.w	80121a2 <dwt_ioctl+0x1686>
 801201a:	1c50      	adds	r0, r2, #1
 801201c:	fa53 f080 	uxtab	r0, r3, r0
 8012020:	2300      	movs	r3, #0
 8012022:	440b      	add	r3, r1
 8012024:	b29b      	uxth	r3, r3
 8012026:	3201      	adds	r2, #1
 8012028:	b2d2      	uxtb	r2, r2
 801202a:	2a02      	cmp	r2, #2
 801202c:	d005      	beq.n	801203a <dwt_ioctl+0x151e>
 801202e:	f810 1b01 	ldrb.w	r1, [r0], #1
 8012032:	eba6 0c03 	sub.w	ip, r6, r3
 8012036:	4561      	cmp	r1, ip
 8012038:	dbf3      	blt.n	8012022 <dwt_ioctl+0x1506>
 801203a:	429f      	cmp	r7, r3
 801203c:	bf08      	it	eq
 801203e:	9503      	streq	r5, [sp, #12]
 8012040:	f000 80b4 	beq.w	80121ac <dwt_ioctl+0x1690>
 8012044:	f107 0c05 	add.w	ip, r7, #5
 8012048:	fa1f fc8c 	uxth.w	ip, ip
 801204c:	2680      	movs	r6, #128	; 0x80
 801204e:	2100      	movs	r1, #0
 8012050:	9107      	str	r1, [sp, #28]
 8012052:	9103      	str	r1, [sp, #12]
 8012054:	9108      	str	r1, [sp, #32]
 8012056:	2005      	movs	r0, #5
 8012058:	46b8      	mov	r8, r7
 801205a:	4287      	cmp	r7, r0
 801205c:	bf38      	it	cc
 801205e:	4680      	movcc	r8, r0
 8012060:	f1a8 0805 	sub.w	r8, r8, #5
 8012064:	fa1f f888 	uxth.w	r8, r8
 8012068:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 8012120 <dwt_ioctl+0x1604>
 801206c:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8012070:	4683      	mov	fp, r0
 8012072:	4620      	mov	r0, r4
 8012074:	460c      	mov	r4, r1
 8012076:	4686      	mov	lr, r0
 8012078:	e031      	b.n	80120de <dwt_ioctl+0x15c2>
 801207a:	f240 1331 	movw	r3, #305	; 0x131
 801207e:	429f      	cmp	r7, r3
 8012080:	bf28      	it	cs
 8012082:	461f      	movcs	r7, r3
 8012084:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8012128 <dwt_ioctl+0x160c>
 8012088:	e7b6      	b.n	8011ff8 <dwt_ioctl+0x14dc>
 801208a:	2300      	movs	r3, #0
 801208c:	9a05      	ldr	r2, [sp, #20]
 801208e:	8013      	strh	r3, [r2, #0]
 8012090:	9a04      	ldr	r2, [sp, #16]
 8012092:	f8c2 b000 	str.w	fp, [r2]
 8012096:	e098      	b.n	80121ca <dwt_ioctl+0x16ae>
 8012098:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801209c:	4674      	mov	r4, lr
 801209e:	2300      	movs	r3, #0
 80120a0:	9a05      	ldr	r2, [sp, #20]
 80120a2:	8013      	strh	r3, [r2, #0]
 80120a4:	9b04      	ldr	r3, [sp, #16]
 80120a6:	f8c3 b000 	str.w	fp, [r3]
 80120aa:	f04f 33ff 	mov.w	r3, #4294967295
 80120ae:	e08c      	b.n	80121ca <dwt_ioctl+0x16ae>
 80120b0:	fa1f fb80 	uxth.w	fp, r0
 80120b4:	9207      	str	r2, [sp, #28]
 80120b6:	9503      	str	r5, [sp, #12]
 80120b8:	9308      	str	r3, [sp, #32]
 80120ba:	2401      	movs	r4, #1
 80120bc:	2d3f      	cmp	r5, #63	; 0x3f
 80120be:	d050      	beq.n	8012162 <dwt_ioctl+0x1646>
 80120c0:	2900      	cmp	r1, #0
 80120c2:	d139      	bne.n	8012138 <dwt_ioctl+0x161c>
 80120c4:	3501      	adds	r5, #1
 80120c6:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 80120ca:	f819 0005 	ldrb.w	r0, [r9, r5]
 80120ce:	4403      	add	r3, r0
 80120d0:	b29b      	uxth	r3, r3
 80120d2:	429f      	cmp	r7, r3
 80120d4:	d067      	beq.n	80121a6 <dwt_ioctl+0x168a>
 80120d6:	3e01      	subs	r6, #1
 80120d8:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 80120dc:	d0dc      	beq.n	8012098 <dwt_ioctl+0x157c>
 80120de:	4543      	cmp	r3, r8
 80120e0:	d924      	bls.n	801212c <dwt_ioctl+0x1610>
 80120e2:	4563      	cmp	r3, ip
 80120e4:	d222      	bcs.n	801212c <dwt_ioctl+0x1610>
 80120e6:	1af8      	subs	r0, r7, r3
 80120e8:	b200      	sxth	r0, r0
 80120ea:	2800      	cmp	r0, #0
 80120ec:	bfb8      	it	lt
 80120ee:	4240      	neglt	r0, r0
 80120f0:	4558      	cmp	r0, fp
 80120f2:	dddd      	ble.n	80120b0 <dwt_ioctl+0x1594>
 80120f4:	2c00      	cmp	r4, #0
 80120f6:	d0e1      	beq.n	80120bc <dwt_ioctl+0x15a0>
 80120f8:	4674      	mov	r4, lr
 80120fa:	9a07      	ldr	r2, [sp, #28]
 80120fc:	9b08      	ldr	r3, [sp, #32]
 80120fe:	e055      	b.n	80121ac <dwt_ioctl+0x1690>
 8012100:	00050008 	.word	0x00050008
 8012104:	001f000c 	.word	0x001f000c
 8012108:	001f0010 	.word	0x001f0010
 801210c:	00010020 	.word	0x00010020
 8012110:	00030054 	.word	0x00030054
 8012114:	00010018 	.word	0x00010018
 8012118:	0005002c 	.word	0x0005002c
 801211c:	000e001c 	.word	0x000e001c
 8012120:	0801338c 	.word	0x0801338c
 8012124:	0801330c 	.word	0x0801330c
 8012128:	0801334c 	.word	0x0801334c
 801212c:	b984      	cbnz	r4, 8012150 <dwt_ioctl+0x1634>
 801212e:	4563      	cmp	r3, ip
 8012130:	d3c4      	bcc.n	80120bc <dwt_ioctl+0x15a0>
 8012132:	b199      	cbz	r1, 801215c <dwt_ioctl+0x1640>
 8012134:	2d3f      	cmp	r5, #63	; 0x3f
 8012136:	d014      	beq.n	8012162 <dwt_ioctl+0x1646>
 8012138:	f819 1005 	ldrb.w	r1, [r9, r5]
 801213c:	1a5b      	subs	r3, r3, r1
 801213e:	b29b      	uxth	r3, r3
 8012140:	1e69      	subs	r1, r5, #1
 8012142:	f001 053f 	and.w	r5, r1, #63	; 0x3f
 8012146:	f011 013f 	ands.w	r1, r1, #63	; 0x3f
 801214a:	bf18      	it	ne
 801214c:	2101      	movne	r1, #1
 801214e:	e7c0      	b.n	80120d2 <dwt_ioctl+0x15b6>
 8012150:	4674      	mov	r4, lr
 8012152:	f819 1005 	ldrb.w	r1, [r9, r5]
 8012156:	1a5b      	subs	r3, r3, r1
 8012158:	b29b      	uxth	r3, r3
 801215a:	e027      	b.n	80121ac <dwt_ioctl+0x1690>
 801215c:	4674      	mov	r4, lr
 801215e:	9503      	str	r5, [sp, #12]
 8012160:	e024      	b.n	80121ac <dwt_ioctl+0x1690>
 8012162:	2c00      	cmp	r4, #0
 8012164:	d134      	bne.n	80121d0 <dwt_ioctl+0x16b4>
 8012166:	2a03      	cmp	r2, #3
 8012168:	d036      	beq.n	80121d8 <dwt_ioctl+0x16bc>
 801216a:	2a02      	cmp	r2, #2
 801216c:	d009      	beq.n	8012182 <dwt_ioctl+0x1666>
 801216e:	f81a 1002 	ldrb.w	r1, [sl, r2]
 8012172:	1858      	adds	r0, r3, r1
 8012174:	42b8      	cmp	r0, r7
 8012176:	dd0b      	ble.n	8012190 <dwt_ioctl+0x1674>
 8012178:	440b      	add	r3, r1
 801217a:	b29b      	uxth	r3, r3
 801217c:	3201      	adds	r2, #1
 801217e:	b2d2      	uxtb	r2, r2
 8012180:	e7da      	b.n	8012138 <dwt_ioctl+0x161c>
 8012182:	9906      	ldr	r1, [sp, #24]
 8012184:	2909      	cmp	r1, #9
 8012186:	d1f2      	bne.n	801216e <dwt_ioctl+0x1652>
 8012188:	4674      	mov	r4, lr
 801218a:	213f      	movs	r1, #63	; 0x3f
 801218c:	9103      	str	r1, [sp, #12]
 801218e:	e00d      	b.n	80121ac <dwt_ioctl+0x1690>
 8012190:	4674      	mov	r4, lr
 8012192:	b283      	uxth	r3, r0
 8012194:	3201      	adds	r2, #1
 8012196:	b2d2      	uxtb	r2, r2
 8012198:	213f      	movs	r1, #63	; 0x3f
 801219a:	9103      	str	r1, [sp, #12]
 801219c:	e006      	b.n	80121ac <dwt_ioctl+0x1690>
 801219e:	2300      	movs	r3, #0
 80121a0:	e74b      	b.n	801203a <dwt_ioctl+0x151e>
 80121a2:	2300      	movs	r3, #0
 80121a4:	e749      	b.n	801203a <dwt_ioctl+0x151e>
 80121a6:	4674      	mov	r4, lr
 80121a8:	9503      	str	r5, [sp, #12]
 80121aa:	463b      	mov	r3, r7
 80121ac:	9905      	ldr	r1, [sp, #20]
 80121ae:	800b      	strh	r3, [r1, #0]
 80121b0:	9b03      	ldr	r3, [sp, #12]
 80121b2:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
 80121b6:	b2db      	uxtb	r3, r3
 80121b8:	041a      	lsls	r2, r3, #16
 80121ba:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 80121be:	431a      	orrs	r2, r3
 80121c0:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80121c4:	9a04      	ldr	r2, [sp, #16]
 80121c6:	6013      	str	r3, [r2, #0]
 80121c8:	2300      	movs	r3, #0
 80121ca:	6023      	str	r3, [r4, #0]
 80121cc:	2500      	movs	r5, #0
 80121ce:	e3ad      	b.n	801292c <dwt_ioctl+0x1e10>
 80121d0:	4674      	mov	r4, lr
 80121d2:	9a07      	ldr	r2, [sp, #28]
 80121d4:	9b08      	ldr	r3, [sp, #32]
 80121d6:	e7e9      	b.n	80121ac <dwt_ioctl+0x1690>
 80121d8:	4674      	mov	r4, lr
 80121da:	213f      	movs	r1, #63	; 0x3f
 80121dc:	9103      	str	r1, [sp, #12]
 80121de:	e7e5      	b.n	80121ac <dwt_ioctl+0x1690>
 80121e0:	2c00      	cmp	r4, #0
 80121e2:	f000 8453 	beq.w	8012a8c <dwt_ioctl+0x1f70>
 80121e6:	7827      	ldrb	r7, [r4, #0]
 80121e8:	7864      	ldrb	r4, [r4, #1]
 80121ea:	f7ee f971 	bl	80004d0 <decamutexon>
 80121ee:	4605      	mov	r5, r0
 80121f0:	2c02      	cmp	r4, #2
 80121f2:	d00e      	beq.n	8012212 <dwt_ioctl+0x16f6>
 80121f4:	2c04      	cmp	r4, #4
 80121f6:	d00c      	beq.n	8012212 <dwt_ioctl+0x16f6>
 80121f8:	f004 04fd 	and.w	r4, r4, #253	; 0xfd
 80121fc:	2c01      	cmp	r4, #1
 80121fe:	d019      	beq.n	8012234 <dwt_ioctl+0x1718>
 8012200:	43fb      	mvns	r3, r7
 8012202:	2200      	movs	r2, #0
 8012204:	9200      	str	r2, [sp, #0]
 8012206:	b2db      	uxtb	r3, r3
 8012208:	49c1      	ldr	r1, [pc, #772]	; (8012510 <dwt_ioctl+0x19f4>)
 801220a:	4630      	mov	r0, r6
 801220c:	f7fd fc5a 	bl	800fac4 <dwt_modify8bitoffsetreg>
 8012210:	e005      	b.n	801221e <dwt_ioctl+0x1702>
 8012212:	463b      	mov	r3, r7
 8012214:	2200      	movs	r2, #0
 8012216:	49be      	ldr	r1, [pc, #760]	; (8012510 <dwt_ioctl+0x19f4>)
 8012218:	4630      	mov	r0, r6
 801221a:	f7fc ffc1 	bl	800f1a0 <dwt_write8bitoffsetreg>
 801221e:	463b      	mov	r3, r7
 8012220:	2200      	movs	r2, #0
 8012222:	49bc      	ldr	r1, [pc, #752]	; (8012514 <dwt_ioctl+0x19f8>)
 8012224:	4630      	mov	r0, r6
 8012226:	f7fc fdd7 	bl	800edd8 <dwt_write32bitoffsetreg>
 801222a:	4628      	mov	r0, r5
 801222c:	f7ee f961 	bl	80004f2 <decamutexoff>
 8012230:	2500      	movs	r5, #0
 8012232:	e37b      	b.n	801292c <dwt_ioctl+0x1e10>
 8012234:	9700      	str	r7, [sp, #0]
 8012236:	23ff      	movs	r3, #255	; 0xff
 8012238:	2200      	movs	r2, #0
 801223a:	49b5      	ldr	r1, [pc, #724]	; (8012510 <dwt_ioctl+0x19f4>)
 801223c:	4630      	mov	r0, r6
 801223e:	f7fd fc41 	bl	800fac4 <dwt_modify8bitoffsetreg>
 8012242:	e7ec      	b.n	801221e <dwt_ioctl+0x1702>
 8012244:	2302      	movs	r3, #2
 8012246:	9301      	str	r3, [sp, #4]
 8012248:	2500      	movs	r5, #0
 801224a:	9500      	str	r5, [sp, #0]
 801224c:	462b      	mov	r3, r5
 801224e:	462a      	mov	r2, r5
 8012250:	211a      	movs	r1, #26
 8012252:	f7fc f85a 	bl	800e30a <dwt_xfer3xxx>
 8012256:	e369      	b.n	801292c <dwt_ioctl+0x1e10>
 8012258:	f7fe fc4c 	bl	8010af4 <ull_softreset_fcmd>
 801225c:	2500      	movs	r5, #0
 801225e:	e365      	b.n	801292c <dwt_ioctl+0x1e10>
 8012260:	f7fe fc34 	bl	8010acc <ull_softreset_no_sema_fcmd>
 8012264:	2500      	movs	r5, #0
 8012266:	e361      	b.n	801292c <dwt_ioctl+0x1e10>
 8012268:	2302      	movs	r3, #2
 801226a:	9301      	str	r3, [sp, #4]
 801226c:	2500      	movs	r5, #0
 801226e:	9500      	str	r5, [sp, #0]
 8012270:	462b      	mov	r3, r5
 8012272:	462a      	mov	r2, r5
 8012274:	2114      	movs	r1, #20
 8012276:	f7fc f848 	bl	800e30a <dwt_xfer3xxx>
 801227a:	e357      	b.n	801292c <dwt_ioctl+0x1e10>
 801227c:	2402      	movs	r4, #2
 801227e:	9401      	str	r4, [sp, #4]
 8012280:	2500      	movs	r5, #0
 8012282:	9500      	str	r5, [sp, #0]
 8012284:	462b      	mov	r3, r5
 8012286:	462a      	mov	r2, r5
 8012288:	2115      	movs	r1, #21
 801228a:	f7fc f83e 	bl	800e30a <dwt_xfer3xxx>
 801228e:	9401      	str	r4, [sp, #4]
 8012290:	9500      	str	r5, [sp, #0]
 8012292:	462b      	mov	r3, r5
 8012294:	462a      	mov	r2, r5
 8012296:	2115      	movs	r1, #21
 8012298:	4630      	mov	r0, r6
 801229a:	f7fc f836 	bl	800e30a <dwt_xfer3xxx>
 801229e:	e345      	b.n	801292c <dwt_ioctl+0x1e10>
 80122a0:	2302      	movs	r3, #2
 80122a2:	9301      	str	r3, [sp, #4]
 80122a4:	2500      	movs	r5, #0
 80122a6:	9500      	str	r5, [sp, #0]
 80122a8:	462b      	mov	r3, r5
 80122aa:	462a      	mov	r2, r5
 80122ac:	2116      	movs	r1, #22
 80122ae:	f7fc f82c 	bl	800e30a <dwt_xfer3xxx>
 80122b2:	e33b      	b.n	801292c <dwt_ioctl+0x1e10>
 80122b4:	2c00      	cmp	r4, #0
 80122b6:	f000 83eb 	beq.w	8012a90 <dwt_ioctl+0x1f74>
 80122ba:	b932      	cbnz	r2, 80122ca <dwt_ioctl+0x17ae>
 80122bc:	2200      	movs	r2, #0
 80122be:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 80122c2:	f7fc f8ff 	bl	800e4c4 <dwt_read8bitoffsetreg>
 80122c6:	7020      	strb	r0, [r4, #0]
 80122c8:	e330      	b.n	801292c <dwt_ioctl+0x1e10>
 80122ca:	2201      	movs	r2, #1
 80122cc:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 80122d0:	f7fc f8f8 	bl	800e4c4 <dwt_read8bitoffsetreg>
 80122d4:	7020      	strb	r0, [r4, #0]
 80122d6:	2500      	movs	r5, #0
 80122d8:	e328      	b.n	801292c <dwt_ioctl+0x1e10>
 80122da:	2c00      	cmp	r4, #0
 80122dc:	f000 83da 	beq.w	8012a94 <dwt_ioctl+0x1f78>
 80122e0:	7824      	ldrb	r4, [r4, #0]
 80122e2:	2200      	movs	r2, #0
 80122e4:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 80122e8:	f7fc f8ec 	bl	800e4c4 <dwt_read8bitoffsetreg>
 80122ec:	f000 039f 	and.w	r3, r0, #159	; 0x9f
 80122f0:	4323      	orrs	r3, r4
 80122f2:	2200      	movs	r2, #0
 80122f4:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 80122f8:	4630      	mov	r0, r6
 80122fa:	f7fc ff51 	bl	800f1a0 <dwt_write8bitoffsetreg>
 80122fe:	2500      	movs	r5, #0
 8012300:	e314      	b.n	801292c <dwt_ioctl+0x1e10>
 8012302:	2c00      	cmp	r4, #0
 8012304:	f000 83c8 	beq.w	8012a98 <dwt_ioctl+0x1f7c>
 8012308:	7824      	ldrb	r4, [r4, #0]
 801230a:	f012 05ff 	ands.w	r5, r2, #255	; 0xff
 801230e:	d01d      	beq.n	801234c <dwt_ioctl+0x1830>
 8012310:	2d01      	cmp	r5, #1
 8012312:	f040 83c3 	bne.w	8012a9c <dwt_ioctl+0x1f80>
 8012316:	2502      	movs	r5, #2
 8012318:	2201      	movs	r2, #1
 801231a:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 801231e:	4630      	mov	r0, r6
 8012320:	f7fc f8d0 	bl	800e4c4 <dwt_read8bitoffsetreg>
 8012324:	b9a4      	cbnz	r4, 8012350 <dwt_ioctl+0x1834>
 8012326:	ea20 0305 	bic.w	r3, r0, r5
 801232a:	b2db      	uxtb	r3, r3
 801232c:	2201      	movs	r2, #1
 801232e:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 8012332:	4630      	mov	r0, r6
 8012334:	f7fc ff34 	bl	800f1a0 <dwt_write8bitoffsetreg>
 8012338:	2200      	movs	r2, #0
 801233a:	2110      	movs	r1, #16
 801233c:	4630      	mov	r0, r6
 801233e:	f7fc f86c 	bl	800e41a <dwt_read32bitoffsetreg>
 8012342:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8012346:	d00a      	beq.n	801235e <dwt_ioctl+0x1842>
 8012348:	2500      	movs	r5, #0
 801234a:	e2ef      	b.n	801292c <dwt_ioctl+0x1e10>
 801234c:	2504      	movs	r5, #4
 801234e:	e7e3      	b.n	8012318 <dwt_ioctl+0x17fc>
 8012350:	2c01      	cmp	r4, #1
 8012352:	f040 83a6 	bne.w	8012aa2 <dwt_ioctl+0x1f86>
 8012356:	ea40 0305 	orr.w	r3, r0, r5
 801235a:	b2db      	uxtb	r3, r3
 801235c:	e7e6      	b.n	801232c <dwt_ioctl+0x1810>
 801235e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8012362:	9300      	str	r3, [sp, #0]
 8012364:	f04f 33ff 	mov.w	r3, #4294967295
 8012368:	2200      	movs	r2, #0
 801236a:	2110      	movs	r1, #16
 801236c:	4630      	mov	r0, r6
 801236e:	f7fd fa39 	bl	800f7e4 <dwt_modify32bitoffsetreg>
 8012372:	2500      	movs	r5, #0
 8012374:	e2da      	b.n	801292c <dwt_ioctl+0x1e10>
 8012376:	2c00      	cmp	r4, #0
 8012378:	f000 8396 	beq.w	8012aa8 <dwt_ioctl+0x1f8c>
 801237c:	7823      	ldrb	r3, [r4, #0]
 801237e:	035b      	lsls	r3, r3, #13
 8012380:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012384:	9300      	str	r3, [sp, #0]
 8012386:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 801238a:	2200      	movs	r2, #0
 801238c:	4962      	ldr	r1, [pc, #392]	; (8012518 <dwt_ioctl+0x19fc>)
 801238e:	f7fd ff29 	bl	80101e4 <dwt_modify16bitoffsetreg>
 8012392:	2500      	movs	r5, #0
 8012394:	e2ca      	b.n	801292c <dwt_ioctl+0x1e10>
 8012396:	2c00      	cmp	r4, #0
 8012398:	f000 8388 	beq.w	8012aac <dwt_ioctl+0x1f90>
 801239c:	7825      	ldrb	r5, [r4, #0]
 801239e:	6862      	ldr	r2, [r4, #4]
 80123a0:	2a01      	cmp	r2, #1
 80123a2:	bf15      	itete	ne
 80123a4:	f46f 3360 	mvnne.w	r3, #229376	; 0x38000
 80123a8:	f46f 43e0 	mvneq.w	r3, #28672	; 0x7000
 80123ac:	27df      	movne	r7, #223	; 0xdf
 80123ae:	27ef      	moveq	r7, #239	; 0xef
 80123b0:	bf14      	ite	ne
 80123b2:	f04f 0820 	movne.w	r8, #32
 80123b6:	f04f 0810 	moveq.w	r8, #16
 80123ba:	2400      	movs	r4, #0
 80123bc:	9400      	str	r4, [sp, #0]
 80123be:	4622      	mov	r2, r4
 80123c0:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80123c4:	f7fd fa0e 	bl	800f7e4 <dwt_modify32bitoffsetreg>
 80123c8:	9400      	str	r4, [sp, #0]
 80123ca:	463b      	mov	r3, r7
 80123cc:	4622      	mov	r2, r4
 80123ce:	4953      	ldr	r1, [pc, #332]	; (801251c <dwt_ioctl+0x1a00>)
 80123d0:	4630      	mov	r0, r6
 80123d2:	f7fd fb77 	bl	800fac4 <dwt_modify8bitoffsetreg>
 80123d6:	2d01      	cmp	r5, #1
 80123d8:	d002      	beq.n	80123e0 <dwt_ioctl+0x18c4>
 80123da:	b155      	cbz	r5, 80123f2 <dwt_ioctl+0x18d6>
 80123dc:	2500      	movs	r5, #0
 80123de:	e2a5      	b.n	801292c <dwt_ioctl+0x1e10>
 80123e0:	4625      	mov	r5, r4
 80123e2:	9400      	str	r4, [sp, #0]
 80123e4:	463b      	mov	r3, r7
 80123e6:	4622      	mov	r2, r4
 80123e8:	494d      	ldr	r1, [pc, #308]	; (8012520 <dwt_ioctl+0x1a04>)
 80123ea:	4630      	mov	r0, r6
 80123ec:	f7fd fb6a 	bl	800fac4 <dwt_modify8bitoffsetreg>
 80123f0:	e29c      	b.n	801292c <dwt_ioctl+0x1e10>
 80123f2:	f8cd 8000 	str.w	r8, [sp]
 80123f6:	23ff      	movs	r3, #255	; 0xff
 80123f8:	2200      	movs	r2, #0
 80123fa:	4949      	ldr	r1, [pc, #292]	; (8012520 <dwt_ioctl+0x1a04>)
 80123fc:	4630      	mov	r0, r6
 80123fe:	f7fd fb61 	bl	800fac4 <dwt_modify8bitoffsetreg>
 8012402:	e293      	b.n	801292c <dwt_ioctl+0x1e10>
 8012404:	2c00      	cmp	r4, #0
 8012406:	f000 8353 	beq.w	8012ab0 <dwt_ioctl+0x1f94>
 801240a:	7822      	ldrb	r2, [r4, #0]
 801240c:	f012 0f01 	tst.w	r2, #1
 8012410:	d02c      	beq.n	801246c <dwt_ioctl+0x1950>
 8012412:	0157      	lsls	r7, r2, #5
 8012414:	f007 0740 	and.w	r7, r7, #64	; 0x40
 8012418:	2440      	movs	r4, #64	; 0x40
 801241a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 801241e:	f012 0f04 	tst.w	r2, #4
 8012422:	d027      	beq.n	8012474 <dwt_ioctl+0x1958>
 8012424:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
 8012428:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 801242c:	0112      	lsls	r2, r2, #4
 801242e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8012432:	4317      	orrs	r7, r2
 8012434:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8012438:	9200      	str	r2, [sp, #0]
 801243a:	43db      	mvns	r3, r3
 801243c:	2200      	movs	r2, #0
 801243e:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8012442:	4630      	mov	r0, r6
 8012444:	f7fd f9ce 	bl	800f7e4 <dwt_modify32bitoffsetreg>
 8012448:	43e4      	mvns	r4, r4
 801244a:	b2a4      	uxth	r4, r4
 801244c:	2500      	movs	r5, #0
 801244e:	9500      	str	r5, [sp, #0]
 8012450:	4623      	mov	r3, r4
 8012452:	462a      	mov	r2, r5
 8012454:	4931      	ldr	r1, [pc, #196]	; (801251c <dwt_ioctl+0x1a00>)
 8012456:	4630      	mov	r0, r6
 8012458:	f7fd fec4 	bl	80101e4 <dwt_modify16bitoffsetreg>
 801245c:	9700      	str	r7, [sp, #0]
 801245e:	4623      	mov	r3, r4
 8012460:	462a      	mov	r2, r5
 8012462:	492f      	ldr	r1, [pc, #188]	; (8012520 <dwt_ioctl+0x1a04>)
 8012464:	4630      	mov	r0, r6
 8012466:	f7fd febd 	bl	80101e4 <dwt_modify16bitoffsetreg>
 801246a:	e25f      	b.n	801292c <dwt_ioctl+0x1e10>
 801246c:	2700      	movs	r7, #0
 801246e:	463c      	mov	r4, r7
 8012470:	463b      	mov	r3, r7
 8012472:	e7d4      	b.n	801241e <dwt_ioctl+0x1902>
 8012474:	2200      	movs	r2, #0
 8012476:	e7df      	b.n	8012438 <dwt_ioctl+0x191c>
 8012478:	2308      	movs	r3, #8
 801247a:	9300      	str	r3, [sp, #0]
 801247c:	23ff      	movs	r3, #255	; 0xff
 801247e:	2201      	movs	r2, #1
 8012480:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8012484:	f7fd fb1e 	bl	800fac4 <dwt_modify8bitoffsetreg>
 8012488:	4c26      	ldr	r4, [pc, #152]	; (8012524 <dwt_ioctl+0x1a08>)
 801248a:	2302      	movs	r3, #2
 801248c:	9300      	str	r3, [sp, #0]
 801248e:	23ff      	movs	r3, #255	; 0xff
 8012490:	2203      	movs	r2, #3
 8012492:	4621      	mov	r1, r4
 8012494:	4630      	mov	r0, r6
 8012496:	f7fd fb15 	bl	800fac4 <dwt_modify8bitoffsetreg>
 801249a:	2500      	movs	r5, #0
 801249c:	9500      	str	r5, [sp, #0]
 801249e:	23f7      	movs	r3, #247	; 0xf7
 80124a0:	2201      	movs	r2, #1
 80124a2:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80124a6:	4630      	mov	r0, r6
 80124a8:	f7fd fb0c 	bl	800fac4 <dwt_modify8bitoffsetreg>
 80124ac:	9500      	str	r5, [sp, #0]
 80124ae:	23fd      	movs	r3, #253	; 0xfd
 80124b0:	2203      	movs	r2, #3
 80124b2:	4621      	mov	r1, r4
 80124b4:	4630      	mov	r0, r6
 80124b6:	f7fd fb05 	bl	800fac4 <dwt_modify8bitoffsetreg>
 80124ba:	e237      	b.n	801292c <dwt_ioctl+0x1e10>
 80124bc:	2c00      	cmp	r4, #0
 80124be:	f000 82f9 	beq.w	8012ab4 <dwt_ioctl+0x1f98>
 80124c2:	8863      	ldrh	r3, [r4, #2]
 80124c4:	00db      	lsls	r3, r3, #3
 80124c6:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 80124ca:	7822      	ldrb	r2, [r4, #0]
 80124cc:	b10a      	cbz	r2, 80124d2 <dwt_ioctl+0x19b6>
 80124ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80124d2:	9300      	str	r3, [sp, #0]
 80124d4:	f24f 0307 	movw	r3, #61447	; 0xf007
 80124d8:	2200      	movs	r2, #0
 80124da:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80124de:	4630      	mov	r0, r6
 80124e0:	f7fd fe80 	bl	80101e4 <dwt_modify16bitoffsetreg>
 80124e4:	2500      	movs	r5, #0
 80124e6:	e221      	b.n	801292c <dwt_ioctl+0x1e10>
 80124e8:	2500      	movs	r5, #0
 80124ea:	9500      	str	r5, [sp, #0]
 80124ec:	f64f 33ff 	movw	r3, #64511	; 0xfbff
 80124f0:	462a      	mov	r2, r5
 80124f2:	f44f 1188 	mov.w	r1, #1114112	; 0x110000
 80124f6:	f7fd fe75 	bl	80101e4 <dwt_modify16bitoffsetreg>
 80124fa:	e217      	b.n	801292c <dwt_ioctl+0x1e10>
 80124fc:	2c00      	cmp	r4, #0
 80124fe:	f000 82db 	beq.w	8012ab8 <dwt_ioctl+0x1f9c>
 8012502:	2200      	movs	r2, #0
 8012504:	4908      	ldr	r1, [pc, #32]	; (8012528 <dwt_ioctl+0x1a0c>)
 8012506:	f7fb ff9e 	bl	800e446 <dwt_read16bitoffsetreg>
 801250a:	8020      	strh	r0, [r4, #0]
 801250c:	2500      	movs	r5, #0
 801250e:	e20d      	b.n	801292c <dwt_ioctl+0x1e10>
 8012510:	0001001c 	.word	0x0001001c
 8012514:	00010018 	.word	0x00010018
 8012518:	000e000c 	.word	0x000e000c
 801251c:	00050008 	.word	0x00050008
 8012520:	0005000c 	.word	0x0005000c
 8012524:	00110008 	.word	0x00110008
 8012528:	00110048 	.word	0x00110048
 801252c:	2c00      	cmp	r4, #0
 801252e:	f000 82c5 	beq.w	8012abc <dwt_ioctl+0x1fa0>
 8012532:	7823      	ldrb	r3, [r4, #0]
 8012534:	2b01      	cmp	r3, #1
 8012536:	7862      	ldrb	r2, [r4, #1]
 8012538:	78a3      	ldrb	r3, [r4, #2]
 801253a:	ea4f 23c3 	mov.w	r3, r3, lsl #11
 801253e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8012542:	78e2      	ldrb	r2, [r4, #3]
 8012544:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8012548:	7922      	ldrb	r2, [r4, #4]
 801254a:	ea43 3382 	orr.w	r3, r3, r2, lsl #14
 801254e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8012552:	bf0c      	ite	eq
 8012554:	2202      	moveq	r2, #2
 8012556:	2200      	movne	r2, #0
 8012558:	49b6      	ldr	r1, [pc, #728]	; (8012834 <dwt_ioctl+0x1d18>)
 801255a:	f7fc fbd2 	bl	800ed02 <dwt_write16bitoffsetreg>
 801255e:	2500      	movs	r5, #0
 8012560:	e1e4      	b.n	801292c <dwt_ioctl+0x1e10>
 8012562:	2c00      	cmp	r4, #0
 8012564:	f000 82ac 	beq.w	8012ac0 <dwt_ioctl+0x1fa4>
 8012568:	6863      	ldr	r3, [r4, #4]
 801256a:	7822      	ldrb	r2, [r4, #0]
 801256c:	b13a      	cbz	r2, 801257e <dwt_ioctl+0x1a62>
 801256e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012572:	2200      	movs	r2, #0
 8012574:	49b0      	ldr	r1, [pc, #704]	; (8012838 <dwt_ioctl+0x1d1c>)
 8012576:	f7fc fc2f 	bl	800edd8 <dwt_write32bitoffsetreg>
 801257a:	2500      	movs	r5, #0
 801257c:	e1d6      	b.n	801292c <dwt_ioctl+0x1e10>
 801257e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012582:	49ae      	ldr	r1, [pc, #696]	; (801283c <dwt_ioctl+0x1d20>)
 8012584:	f7fc fc28 	bl	800edd8 <dwt_write32bitoffsetreg>
 8012588:	2500      	movs	r5, #0
 801258a:	e1cf      	b.n	801292c <dwt_ioctl+0x1e10>
 801258c:	2c00      	cmp	r4, #0
 801258e:	f000 8299 	beq.w	8012ac4 <dwt_ioctl+0x1fa8>
 8012592:	7823      	ldrb	r3, [r4, #0]
 8012594:	2401      	movs	r4, #1
 8012596:	409c      	lsls	r4, r3
 8012598:	b2e4      	uxtb	r4, r4
 801259a:	2310      	movs	r3, #16
 801259c:	9300      	str	r3, [sp, #0]
 801259e:	23ff      	movs	r3, #255	; 0xff
 80125a0:	2200      	movs	r2, #0
 80125a2:	49a7      	ldr	r1, [pc, #668]	; (8012840 <dwt_ioctl+0x1d24>)
 80125a4:	f7fd fa8e 	bl	800fac4 <dwt_modify8bitoffsetreg>
 80125a8:	43e3      	mvns	r3, r4
 80125aa:	4fa2      	ldr	r7, [pc, #648]	; (8012834 <dwt_ioctl+0x1d18>)
 80125ac:	2500      	movs	r5, #0
 80125ae:	9500      	str	r5, [sp, #0]
 80125b0:	b2db      	uxtb	r3, r3
 80125b2:	462a      	mov	r2, r5
 80125b4:	4639      	mov	r1, r7
 80125b6:	4630      	mov	r0, r6
 80125b8:	f7fd fa84 	bl	800fac4 <dwt_modify8bitoffsetreg>
 80125bc:	9400      	str	r4, [sp, #0]
 80125be:	23ff      	movs	r3, #255	; 0xff
 80125c0:	462a      	mov	r2, r5
 80125c2:	4639      	mov	r1, r7
 80125c4:	4630      	mov	r0, r6
 80125c6:	f7fd fa7d 	bl	800fac4 <dwt_modify8bitoffsetreg>
 80125ca:	e1af      	b.n	801292c <dwt_ioctl+0x1e10>
 80125cc:	2c00      	cmp	r4, #0
 80125ce:	f000 827b 	beq.w	8012ac8 <dwt_ioctl+0x1fac>
 80125d2:	7822      	ldrb	r2, [r4, #0]
 80125d4:	7863      	ldrb	r3, [r4, #1]
 80125d6:	b19b      	cbz	r3, 8012600 <dwt_ioctl+0x1ae4>
 80125d8:	2a00      	cmp	r2, #0
 80125da:	f040 8297 	bne.w	8012b0c <dwt_ioctl+0x1ff0>
 80125de:	2400      	movs	r4, #0
 80125e0:	9400      	str	r4, [sp, #0]
 80125e2:	f06f 73c0 	mvn.w	r3, #25165824	; 0x1800000
 80125e6:	4622      	mov	r2, r4
 80125e8:	2110      	movs	r1, #16
 80125ea:	f7fd f8fb 	bl	800f7e4 <dwt_modify32bitoffsetreg>
 80125ee:	9400      	str	r4, [sp, #0]
 80125f0:	4b94      	ldr	r3, [pc, #592]	; (8012844 <dwt_ioctl+0x1d28>)
 80125f2:	4622      	mov	r2, r4
 80125f4:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80125f8:	4630      	mov	r0, r6
 80125fa:	f7fd f8f3 	bl	800f7e4 <dwt_modify32bitoffsetreg>
 80125fe:	e017      	b.n	8012630 <dwt_ioctl+0x1b14>
 8012600:	2a00      	cmp	r2, #0
 8012602:	f000 8285 	beq.w	8012b10 <dwt_ioctl+0x1ff4>
 8012606:	f44f 4500 	mov.w	r5, #32768	; 0x8000
 801260a:	2400      	movs	r4, #0
 801260c:	9400      	str	r4, [sp, #0]
 801260e:	f06f 73c0 	mvn.w	r3, #25165824	; 0x1800000
 8012612:	4622      	mov	r2, r4
 8012614:	2110      	movs	r1, #16
 8012616:	4630      	mov	r0, r6
 8012618:	f7fd f8e4 	bl	800f7e4 <dwt_modify32bitoffsetreg>
 801261c:	9500      	str	r5, [sp, #0]
 801261e:	4b89      	ldr	r3, [pc, #548]	; (8012844 <dwt_ioctl+0x1d28>)
 8012620:	4622      	mov	r2, r4
 8012622:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8012626:	4630      	mov	r0, r6
 8012628:	f7fd f8dc 	bl	800f7e4 <dwt_modify32bitoffsetreg>
 801262c:	f04f 74c0 	mov.w	r4, #25165824	; 0x1800000
 8012630:	9400      	str	r4, [sp, #0]
 8012632:	f04f 33ff 	mov.w	r3, #4294967295
 8012636:	2200      	movs	r2, #0
 8012638:	2110      	movs	r1, #16
 801263a:	4630      	mov	r0, r6
 801263c:	f7fd f8d2 	bl	800f7e4 <dwt_modify32bitoffsetreg>
 8012640:	2500      	movs	r5, #0
 8012642:	e173      	b.n	801292c <dwt_ioctl+0x1e10>
 8012644:	2c00      	cmp	r4, #0
 8012646:	f000 8241 	beq.w	8012acc <dwt_ioctl+0x1fb0>
 801264a:	7823      	ldrb	r3, [r4, #0]
 801264c:	b93b      	cbnz	r3, 801265e <dwt_ioctl+0x1b42>
 801264e:	2500      	movs	r5, #0
 8012650:	9500      	str	r5, [sp, #0]
 8012652:	23df      	movs	r3, #223	; 0xdf
 8012654:	2203      	movs	r2, #3
 8012656:	497c      	ldr	r1, [pc, #496]	; (8012848 <dwt_ioctl+0x1d2c>)
 8012658:	f7fd fa34 	bl	800fac4 <dwt_modify8bitoffsetreg>
 801265c:	e166      	b.n	801292c <dwt_ioctl+0x1e10>
 801265e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8012662:	9300      	str	r3, [sp, #0]
 8012664:	f04f 33ff 	mov.w	r3, #4294967295
 8012668:	2200      	movs	r2, #0
 801266a:	4977      	ldr	r1, [pc, #476]	; (8012848 <dwt_ioctl+0x1d2c>)
 801266c:	f7fd f8ba 	bl	800f7e4 <dwt_modify32bitoffsetreg>
 8012670:	2500      	movs	r5, #0
 8012672:	e15b      	b.n	801292c <dwt_ioctl+0x1e10>
 8012674:	2c00      	cmp	r4, #0
 8012676:	f000 822b 	beq.w	8012ad0 <dwt_ioctl+0x1fb4>
 801267a:	7823      	ldrb	r3, [r4, #0]
 801267c:	b93b      	cbnz	r3, 801268e <dwt_ioctl+0x1b72>
 801267e:	2500      	movs	r5, #0
 8012680:	9500      	str	r5, [sp, #0]
 8012682:	237f      	movs	r3, #127	; 0x7f
 8012684:	2203      	movs	r2, #3
 8012686:	4971      	ldr	r1, [pc, #452]	; (801284c <dwt_ioctl+0x1d30>)
 8012688:	f7fd fa1c 	bl	800fac4 <dwt_modify8bitoffsetreg>
 801268c:	e14e      	b.n	801292c <dwt_ioctl+0x1e10>
 801268e:	2380      	movs	r3, #128	; 0x80
 8012690:	9300      	str	r3, [sp, #0]
 8012692:	23ff      	movs	r3, #255	; 0xff
 8012694:	2203      	movs	r2, #3
 8012696:	496d      	ldr	r1, [pc, #436]	; (801284c <dwt_ioctl+0x1d30>)
 8012698:	f7fd fa14 	bl	800fac4 <dwt_modify8bitoffsetreg>
 801269c:	2500      	movs	r5, #0
 801269e:	e145      	b.n	801292c <dwt_ioctl+0x1e10>
 80126a0:	2c00      	cmp	r4, #0
 80126a2:	f000 8217 	beq.w	8012ad4 <dwt_ioctl+0x1fb8>
 80126a6:	b2e3      	uxtb	r3, r4
 80126a8:	1c9a      	adds	r2, r3, #2
 80126aa:	2301      	movs	r3, #1
 80126ac:	4093      	lsls	r3, r2
 80126ae:	3b01      	subs	r3, #1
 80126b0:	b2db      	uxtb	r3, r3
 80126b2:	2200      	movs	r2, #0
 80126b4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80126b8:	f7fc fd72 	bl	800f1a0 <dwt_write8bitoffsetreg>
 80126bc:	2500      	movs	r5, #0
 80126be:	e135      	b.n	801292c <dwt_ioctl+0x1e10>
 80126c0:	2c00      	cmp	r4, #0
 80126c2:	f000 8209 	beq.w	8012ad8 <dwt_ioctl+0x1fbc>
 80126c6:	7ae3      	ldrb	r3, [r4, #11]
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	f000 8207 	beq.w	8012adc <dwt_ioctl+0x1fc0>
 80126ce:	7b63      	ldrb	r3, [r4, #13]
 80126d0:	2b01      	cmp	r3, #1
 80126d2:	7b20      	ldrb	r0, [r4, #12]
 80126d4:	bf94      	ite	ls
 80126d6:	2203      	movls	r2, #3
 80126d8:	2204      	movhi	r2, #4
 80126da:	2110      	movs	r1, #16
 80126dc:	4b5c      	ldr	r3, [pc, #368]	; (8012850 <dwt_ioctl+0x1d34>)
 80126de:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80126e2:	f7fb fdf5 	bl	800e2d0 <get_sts_mnth>
 80126e6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80126ea:	9000      	str	r0, [sp, #0]
 80126ec:	f64f 7380 	movw	r3, #65408	; 0xff80
 80126f0:	2202      	movs	r2, #2
 80126f2:	4958      	ldr	r1, [pc, #352]	; (8012854 <dwt_ioctl+0x1d38>)
 80126f4:	4630      	mov	r0, r6
 80126f6:	f7fd fd75 	bl	80101e4 <dwt_modify16bitoffsetreg>
 80126fa:	2394      	movs	r3, #148	; 0x94
 80126fc:	2200      	movs	r2, #0
 80126fe:	4956      	ldr	r1, [pc, #344]	; (8012858 <dwt_ioctl+0x1d3c>)
 8012700:	4630      	mov	r0, r6
 8012702:	f7fc fd4d 	bl	800f1a0 <dwt_write8bitoffsetreg>
 8012706:	2500      	movs	r5, #0
 8012708:	e110      	b.n	801292c <dwt_ioctl+0x1e10>
 801270a:	2c00      	cmp	r4, #0
 801270c:	f000 81e8 	beq.w	8012ae0 <dwt_ioctl+0x1fc4>
 8012710:	2200      	movs	r2, #0
 8012712:	4952      	ldr	r1, [pc, #328]	; (801285c <dwt_ioctl+0x1d40>)
 8012714:	f7fb fe81 	bl	800e41a <dwt_read32bitoffsetreg>
 8012718:	6020      	str	r0, [r4, #0]
 801271a:	2500      	movs	r5, #0
 801271c:	e106      	b.n	801292c <dwt_ioctl+0x1e10>
 801271e:	2c00      	cmp	r4, #0
 8012720:	f000 81e0 	beq.w	8012ae4 <dwt_ioctl+0x1fc8>
 8012724:	2200      	movs	r2, #0
 8012726:	494e      	ldr	r1, [pc, #312]	; (8012860 <dwt_ioctl+0x1d44>)
 8012728:	f7fb fe77 	bl	800e41a <dwt_read32bitoffsetreg>
 801272c:	6020      	str	r0, [r4, #0]
 801272e:	2500      	movs	r5, #0
 8012730:	e0fc      	b.n	801292c <dwt_ioctl+0x1e10>
 8012732:	2c00      	cmp	r4, #0
 8012734:	f000 81d8 	beq.w	8012ae8 <dwt_ioctl+0x1fcc>
 8012738:	f44f 13a8 	mov.w	r3, #1376256	; 0x150000
 801273c:	6023      	str	r3, [r4, #0]
 801273e:	2500      	movs	r5, #0
 8012740:	e0f4      	b.n	801292c <dwt_ioctl+0x1e10>
 8012742:	2c00      	cmp	r4, #0
 8012744:	f000 81d2 	beq.w	8012aec <dwt_ioctl+0x1fd0>
 8012748:	2500      	movs	r5, #0
 801274a:	950a      	str	r5, [sp, #40]	; 0x28
 801274c:	af0c      	add	r7, sp, #48	; 0x30
 801274e:	2319      	movs	r3, #25
 8012750:	f847 3d04 	str.w	r3, [r7, #-4]!
 8012754:	9700      	str	r7, [sp, #0]
 8012756:	2304      	movs	r3, #4
 8012758:	462a      	mov	r2, r5
 801275a:	4942      	ldr	r1, [pc, #264]	; (8012864 <dwt_ioctl+0x1d48>)
 801275c:	f7fc fac6 	bl	800ecec <dwt_writetodevice>
 8012760:	f641 7348 	movw	r3, #8008	; 0x1f48
 8012764:	930b      	str	r3, [sp, #44]	; 0x2c
 8012766:	9700      	str	r7, [sp, #0]
 8012768:	2304      	movs	r3, #4
 801276a:	462a      	mov	r2, r5
 801276c:	493e      	ldr	r1, [pc, #248]	; (8012868 <dwt_ioctl+0x1d4c>)
 801276e:	4630      	mov	r0, r6
 8012770:	f7fc fabc 	bl	800ecec <dwt_writetodevice>
 8012774:	ab0a      	add	r3, sp, #40	; 0x28
 8012776:	9300      	str	r3, [sp, #0]
 8012778:	2304      	movs	r3, #4
 801277a:	462a      	mov	r2, r5
 801277c:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 8012780:	4630      	mov	r0, r6
 8012782:	f7fb fe40 	bl	800e406 <dwt_readfromdevice>
 8012786:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012788:	6023      	str	r3, [r4, #0]
 801278a:	e0cf      	b.n	801292c <dwt_ioctl+0x1e10>
 801278c:	2c00      	cmp	r4, #0
 801278e:	f000 81af 	beq.w	8012af0 <dwt_ioctl+0x1fd4>
 8012792:	2200      	movs	r2, #0
 8012794:	4935      	ldr	r1, [pc, #212]	; (801286c <dwt_ioctl+0x1d50>)
 8012796:	f7fb fe40 	bl	800e41a <dwt_read32bitoffsetreg>
 801279a:	b280      	uxth	r0, r0
 801279c:	6020      	str	r0, [r4, #0]
 801279e:	2200      	movs	r2, #0
 80127a0:	4933      	ldr	r1, [pc, #204]	; (8012870 <dwt_ioctl+0x1d54>)
 80127a2:	4630      	mov	r0, r6
 80127a4:	f7fb fe39 	bl	800e41a <dwt_read32bitoffsetreg>
 80127a8:	0d43      	lsrs	r3, r0, #21
 80127aa:	019b      	lsls	r3, r3, #6
 80127ac:	b29b      	uxth	r3, r3
 80127ae:	6063      	str	r3, [r4, #4]
 80127b0:	2500      	movs	r5, #0
 80127b2:	e0bb      	b.n	801292c <dwt_ioctl+0x1e10>
 80127b4:	2c00      	cmp	r4, #0
 80127b6:	f000 819d 	beq.w	8012af4 <dwt_ioctl+0x1fd8>
 80127ba:	7d63      	ldrb	r3, [r4, #21]
 80127bc:	b133      	cbz	r3, 80127cc <dwt_ioctl+0x1cb0>
 80127be:	2b01      	cmp	r3, #1
 80127c0:	d062      	beq.n	8012888 <dwt_ioctl+0x1d6c>
 80127c2:	2b02      	cmp	r3, #2
 80127c4:	f000 8089 	beq.w	80128da <dwt_ioctl+0x1dbe>
 80127c8:	23ff      	movs	r3, #255	; 0xff
 80127ca:	e02f      	b.n	801282c <dwt_ioctl+0x1d10>
 80127cc:	2200      	movs	r2, #0
 80127ce:	4929      	ldr	r1, [pc, #164]	; (8012874 <dwt_ioctl+0x1d58>)
 80127d0:	f7fb fe23 	bl	800e41a <dwt_read32bitoffsetreg>
 80127d4:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80127d8:	6020      	str	r0, [r4, #0]
 80127da:	2200      	movs	r2, #0
 80127dc:	4926      	ldr	r1, [pc, #152]	; (8012878 <dwt_ioctl+0x1d5c>)
 80127de:	4630      	mov	r0, r6
 80127e0:	f7fb fe1b 	bl	800e41a <dwt_read32bitoffsetreg>
 80127e4:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80127e8:	6060      	str	r0, [r4, #4]
 80127ea:	2200      	movs	r2, #0
 80127ec:	4923      	ldr	r1, [pc, #140]	; (801287c <dwt_ioctl+0x1d60>)
 80127ee:	4630      	mov	r0, r6
 80127f0:	f7fb fe13 	bl	800e41a <dwt_read32bitoffsetreg>
 80127f4:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80127f8:	60a0      	str	r0, [r4, #8]
 80127fa:	2200      	movs	r2, #0
 80127fc:	4920      	ldr	r1, [pc, #128]	; (8012880 <dwt_ioctl+0x1d64>)
 80127fe:	4630      	mov	r0, r6
 8012800:	f7fb fe0b 	bl	800e41a <dwt_read32bitoffsetreg>
 8012804:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8012808:	60e0      	str	r0, [r4, #12]
 801280a:	2200      	movs	r2, #0
 801280c:	491d      	ldr	r1, [pc, #116]	; (8012884 <dwt_ioctl+0x1d68>)
 801280e:	4630      	mov	r0, r6
 8012810:	f7fb fe03 	bl	800e41a <dwt_read32bitoffsetreg>
 8012814:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8012818:	6120      	str	r0, [r4, #16]
 801281a:	2203      	movs	r2, #3
 801281c:	490f      	ldr	r1, [pc, #60]	; (801285c <dwt_ioctl+0x1d40>)
 801281e:	4630      	mov	r0, r6
 8012820:	f7fb fe50 	bl	800e4c4 <dwt_read8bitoffsetreg>
 8012824:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8012828:	7520      	strb	r0, [r4, #20]
 801282a:	2300      	movs	r3, #0
 801282c:	75a3      	strb	r3, [r4, #22]
 801282e:	2500      	movs	r5, #0
 8012830:	e07c      	b.n	801292c <dwt_ioctl+0x1e10>
 8012832:	bf00      	nop
 8012834:	0011003c 	.word	0x0011003c
 8012838:	00110044 	.word	0x00110044
 801283c:	00110040 	.word	0x00110040
 8012840:	00070048 	.word	0x00070048
 8012844:	f7fc0fff 	.word	0xf7fc0fff
 8012848:	000f0028 	.word	0x000f0028
 801284c:	0007001c 	.word	0x0007001c
 8012850:	08013398 	.word	0x08013398
 8012854:	000e0014 	.word	0x000e0014
 8012858:	000e0018 	.word	0x000e0018
 801285c:	00030054 	.word	0x00030054
 8012860:	000f004c 	.word	0x000f004c
 8012864:	001f0004 	.word	0x001f0004
 8012868:	001f0008 	.word	0x001f0008
 801286c:	000c0048 	.word	0x000c0048
 8012870:	000c0028 	.word	0x000c0028
 8012874:	000c0058 	.word	0x000c0058
 8012878:	000c0030 	.word	0x000c0030
 801287c:	000c0034 	.word	0x000c0034
 8012880:	000c0038 	.word	0x000c0038
 8012884:	000c002c 	.word	0x000c002c
 8012888:	2200      	movs	r2, #0
 801288a:	49aa      	ldr	r1, [pc, #680]	; (8012b34 <dwt_ioctl+0x2018>)
 801288c:	f7fb fdc5 	bl	800e41a <dwt_read32bitoffsetreg>
 8012890:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8012894:	6020      	str	r0, [r4, #0]
 8012896:	2200      	movs	r2, #0
 8012898:	49a7      	ldr	r1, [pc, #668]	; (8012b38 <dwt_ioctl+0x201c>)
 801289a:	4630      	mov	r0, r6
 801289c:	f7fb fdbd 	bl	800e41a <dwt_read32bitoffsetreg>
 80128a0:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80128a4:	6060      	str	r0, [r4, #4]
 80128a6:	2200      	movs	r2, #0
 80128a8:	49a4      	ldr	r1, [pc, #656]	; (8012b3c <dwt_ioctl+0x2020>)
 80128aa:	4630      	mov	r0, r6
 80128ac:	f7fb fdb5 	bl	800e41a <dwt_read32bitoffsetreg>
 80128b0:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80128b4:	60a0      	str	r0, [r4, #8]
 80128b6:	2200      	movs	r2, #0
 80128b8:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 80128bc:	4630      	mov	r0, r6
 80128be:	f7fb fdac 	bl	800e41a <dwt_read32bitoffsetreg>
 80128c2:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80128c6:	60e0      	str	r0, [r4, #12]
 80128c8:	2200      	movs	r2, #0
 80128ca:	499d      	ldr	r1, [pc, #628]	; (8012b40 <dwt_ioctl+0x2024>)
 80128cc:	4630      	mov	r0, r6
 80128ce:	f7fb fda4 	bl	800e41a <dwt_read32bitoffsetreg>
 80128d2:	f3c0 0013 	ubfx	r0, r0, #0, #20
 80128d6:	6120      	str	r0, [r4, #16]
 80128d8:	e79f      	b.n	801281a <dwt_ioctl+0x1cfe>
 80128da:	2200      	movs	r2, #0
 80128dc:	4999      	ldr	r1, [pc, #612]	; (8012b44 <dwt_ioctl+0x2028>)
 80128de:	f7fb fd9c 	bl	800e41a <dwt_read32bitoffsetreg>
 80128e2:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80128e6:	6020      	str	r0, [r4, #0]
 80128e8:	2200      	movs	r2, #0
 80128ea:	4997      	ldr	r1, [pc, #604]	; (8012b48 <dwt_ioctl+0x202c>)
 80128ec:	4630      	mov	r0, r6
 80128ee:	f7fb fd94 	bl	800e41a <dwt_read32bitoffsetreg>
 80128f2:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80128f6:	6060      	str	r0, [r4, #4]
 80128f8:	2200      	movs	r2, #0
 80128fa:	4994      	ldr	r1, [pc, #592]	; (8012b4c <dwt_ioctl+0x2030>)
 80128fc:	4630      	mov	r0, r6
 80128fe:	f7fb fd8c 	bl	800e41a <dwt_read32bitoffsetreg>
 8012902:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8012906:	60a0      	str	r0, [r4, #8]
 8012908:	2200      	movs	r2, #0
 801290a:	4991      	ldr	r1, [pc, #580]	; (8012b50 <dwt_ioctl+0x2034>)
 801290c:	4630      	mov	r0, r6
 801290e:	f7fb fd84 	bl	800e41a <dwt_read32bitoffsetreg>
 8012912:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8012916:	60e0      	str	r0, [r4, #12]
 8012918:	2200      	movs	r2, #0
 801291a:	498e      	ldr	r1, [pc, #568]	; (8012b54 <dwt_ioctl+0x2038>)
 801291c:	4630      	mov	r0, r6
 801291e:	f7fb fd7c 	bl	800e41a <dwt_read32bitoffsetreg>
 8012922:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8012926:	6120      	str	r0, [r4, #16]
 8012928:	e777      	b.n	801281a <dwt_ioctl+0x1cfe>
 801292a:	2500      	movs	r5, #0
 801292c:	4628      	mov	r0, r5
 801292e:	b00d      	add	sp, #52	; 0x34
 8012930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012934:	2500      	movs	r5, #0
 8012936:	e7f9      	b.n	801292c <dwt_ioctl+0x1e10>
 8012938:	2500      	movs	r5, #0
 801293a:	e7f7      	b.n	801292c <dwt_ioctl+0x1e10>
 801293c:	2500      	movs	r5, #0
 801293e:	e7f5      	b.n	801292c <dwt_ioctl+0x1e10>
 8012940:	2500      	movs	r5, #0
 8012942:	e7f3      	b.n	801292c <dwt_ioctl+0x1e10>
 8012944:	2500      	movs	r5, #0
 8012946:	e7f1      	b.n	801292c <dwt_ioctl+0x1e10>
 8012948:	2500      	movs	r5, #0
 801294a:	e7ef      	b.n	801292c <dwt_ioctl+0x1e10>
 801294c:	2500      	movs	r5, #0
 801294e:	e7ed      	b.n	801292c <dwt_ioctl+0x1e10>
 8012950:	2500      	movs	r5, #0
 8012952:	e7eb      	b.n	801292c <dwt_ioctl+0x1e10>
 8012954:	2500      	movs	r5, #0
 8012956:	e7e9      	b.n	801292c <dwt_ioctl+0x1e10>
 8012958:	2500      	movs	r5, #0
 801295a:	e7e7      	b.n	801292c <dwt_ioctl+0x1e10>
 801295c:	2500      	movs	r5, #0
 801295e:	e7e5      	b.n	801292c <dwt_ioctl+0x1e10>
 8012960:	2500      	movs	r5, #0
 8012962:	e7e3      	b.n	801292c <dwt_ioctl+0x1e10>
 8012964:	2500      	movs	r5, #0
 8012966:	e7e1      	b.n	801292c <dwt_ioctl+0x1e10>
 8012968:	2500      	movs	r5, #0
 801296a:	e7df      	b.n	801292c <dwt_ioctl+0x1e10>
 801296c:	2500      	movs	r5, #0
 801296e:	e7dd      	b.n	801292c <dwt_ioctl+0x1e10>
 8012970:	2500      	movs	r5, #0
 8012972:	e7db      	b.n	801292c <dwt_ioctl+0x1e10>
 8012974:	2500      	movs	r5, #0
 8012976:	e7d9      	b.n	801292c <dwt_ioctl+0x1e10>
 8012978:	2500      	movs	r5, #0
 801297a:	e7d7      	b.n	801292c <dwt_ioctl+0x1e10>
 801297c:	2500      	movs	r5, #0
 801297e:	e7d5      	b.n	801292c <dwt_ioctl+0x1e10>
 8012980:	2500      	movs	r5, #0
 8012982:	e7d3      	b.n	801292c <dwt_ioctl+0x1e10>
 8012984:	2500      	movs	r5, #0
 8012986:	e7d1      	b.n	801292c <dwt_ioctl+0x1e10>
 8012988:	2500      	movs	r5, #0
 801298a:	e7cf      	b.n	801292c <dwt_ioctl+0x1e10>
 801298c:	2500      	movs	r5, #0
 801298e:	e7cd      	b.n	801292c <dwt_ioctl+0x1e10>
 8012990:	2500      	movs	r5, #0
 8012992:	e7cb      	b.n	801292c <dwt_ioctl+0x1e10>
 8012994:	2500      	movs	r5, #0
 8012996:	e7c9      	b.n	801292c <dwt_ioctl+0x1e10>
 8012998:	2500      	movs	r5, #0
 801299a:	e7c7      	b.n	801292c <dwt_ioctl+0x1e10>
 801299c:	2500      	movs	r5, #0
 801299e:	e7c5      	b.n	801292c <dwt_ioctl+0x1e10>
 80129a0:	2500      	movs	r5, #0
 80129a2:	e7c3      	b.n	801292c <dwt_ioctl+0x1e10>
 80129a4:	2500      	movs	r5, #0
 80129a6:	e7c1      	b.n	801292c <dwt_ioctl+0x1e10>
 80129a8:	2500      	movs	r5, #0
 80129aa:	e7bf      	b.n	801292c <dwt_ioctl+0x1e10>
 80129ac:	2500      	movs	r5, #0
 80129ae:	e7bd      	b.n	801292c <dwt_ioctl+0x1e10>
 80129b0:	2500      	movs	r5, #0
 80129b2:	e7bb      	b.n	801292c <dwt_ioctl+0x1e10>
 80129b4:	2500      	movs	r5, #0
 80129b6:	e7b9      	b.n	801292c <dwt_ioctl+0x1e10>
 80129b8:	2500      	movs	r5, #0
 80129ba:	e7b7      	b.n	801292c <dwt_ioctl+0x1e10>
 80129bc:	2500      	movs	r5, #0
 80129be:	e7b5      	b.n	801292c <dwt_ioctl+0x1e10>
 80129c0:	2500      	movs	r5, #0
 80129c2:	e7b3      	b.n	801292c <dwt_ioctl+0x1e10>
 80129c4:	2500      	movs	r5, #0
 80129c6:	e7b1      	b.n	801292c <dwt_ioctl+0x1e10>
 80129c8:	2500      	movs	r5, #0
 80129ca:	e7af      	b.n	801292c <dwt_ioctl+0x1e10>
 80129cc:	2500      	movs	r5, #0
 80129ce:	e7ad      	b.n	801292c <dwt_ioctl+0x1e10>
 80129d0:	2500      	movs	r5, #0
 80129d2:	e7ab      	b.n	801292c <dwt_ioctl+0x1e10>
 80129d4:	2500      	movs	r5, #0
 80129d6:	e7a9      	b.n	801292c <dwt_ioctl+0x1e10>
 80129d8:	2500      	movs	r5, #0
 80129da:	e7a7      	b.n	801292c <dwt_ioctl+0x1e10>
 80129dc:	2500      	movs	r5, #0
 80129de:	e7a5      	b.n	801292c <dwt_ioctl+0x1e10>
 80129e0:	2500      	movs	r5, #0
 80129e2:	e7a3      	b.n	801292c <dwt_ioctl+0x1e10>
 80129e4:	2500      	movs	r5, #0
 80129e6:	e7a1      	b.n	801292c <dwt_ioctl+0x1e10>
 80129e8:	2500      	movs	r5, #0
 80129ea:	e79f      	b.n	801292c <dwt_ioctl+0x1e10>
 80129ec:	2500      	movs	r5, #0
 80129ee:	e79d      	b.n	801292c <dwt_ioctl+0x1e10>
 80129f0:	2500      	movs	r5, #0
 80129f2:	e79b      	b.n	801292c <dwt_ioctl+0x1e10>
 80129f4:	2500      	movs	r5, #0
 80129f6:	e799      	b.n	801292c <dwt_ioctl+0x1e10>
 80129f8:	2500      	movs	r5, #0
 80129fa:	e797      	b.n	801292c <dwt_ioctl+0x1e10>
 80129fc:	2500      	movs	r5, #0
 80129fe:	e795      	b.n	801292c <dwt_ioctl+0x1e10>
 8012a00:	2500      	movs	r5, #0
 8012a02:	e793      	b.n	801292c <dwt_ioctl+0x1e10>
 8012a04:	2500      	movs	r5, #0
 8012a06:	e791      	b.n	801292c <dwt_ioctl+0x1e10>
 8012a08:	2500      	movs	r5, #0
 8012a0a:	e78f      	b.n	801292c <dwt_ioctl+0x1e10>
 8012a0c:	2500      	movs	r5, #0
 8012a0e:	e78d      	b.n	801292c <dwt_ioctl+0x1e10>
 8012a10:	2500      	movs	r5, #0
 8012a12:	e78b      	b.n	801292c <dwt_ioctl+0x1e10>
 8012a14:	2500      	movs	r5, #0
 8012a16:	e789      	b.n	801292c <dwt_ioctl+0x1e10>
 8012a18:	2500      	movs	r5, #0
 8012a1a:	e787      	b.n	801292c <dwt_ioctl+0x1e10>
 8012a1c:	2500      	movs	r5, #0
 8012a1e:	e785      	b.n	801292c <dwt_ioctl+0x1e10>
 8012a20:	2500      	movs	r5, #0
 8012a22:	e783      	b.n	801292c <dwt_ioctl+0x1e10>
 8012a24:	2500      	movs	r5, #0
 8012a26:	e781      	b.n	801292c <dwt_ioctl+0x1e10>
 8012a28:	2500      	movs	r5, #0
 8012a2a:	e77f      	b.n	801292c <dwt_ioctl+0x1e10>
 8012a2c:	2500      	movs	r5, #0
 8012a2e:	e77d      	b.n	801292c <dwt_ioctl+0x1e10>
 8012a30:	2500      	movs	r5, #0
 8012a32:	e77b      	b.n	801292c <dwt_ioctl+0x1e10>
 8012a34:	2500      	movs	r5, #0
 8012a36:	e779      	b.n	801292c <dwt_ioctl+0x1e10>
 8012a38:	2500      	movs	r5, #0
 8012a3a:	e777      	b.n	801292c <dwt_ioctl+0x1e10>
 8012a3c:	2500      	movs	r5, #0
 8012a3e:	e775      	b.n	801292c <dwt_ioctl+0x1e10>
 8012a40:	2500      	movs	r5, #0
 8012a42:	e773      	b.n	801292c <dwt_ioctl+0x1e10>
 8012a44:	2500      	movs	r5, #0
 8012a46:	e771      	b.n	801292c <dwt_ioctl+0x1e10>
 8012a48:	2500      	movs	r5, #0
 8012a4a:	e76f      	b.n	801292c <dwt_ioctl+0x1e10>
 8012a4c:	2500      	movs	r5, #0
 8012a4e:	e76d      	b.n	801292c <dwt_ioctl+0x1e10>
 8012a50:	2500      	movs	r5, #0
 8012a52:	e76b      	b.n	801292c <dwt_ioctl+0x1e10>
 8012a54:	2500      	movs	r5, #0
 8012a56:	e769      	b.n	801292c <dwt_ioctl+0x1e10>
 8012a58:	2500      	movs	r5, #0
 8012a5a:	e767      	b.n	801292c <dwt_ioctl+0x1e10>
 8012a5c:	2500      	movs	r5, #0
 8012a5e:	e765      	b.n	801292c <dwt_ioctl+0x1e10>
 8012a60:	2500      	movs	r5, #0
 8012a62:	e763      	b.n	801292c <dwt_ioctl+0x1e10>
 8012a64:	2500      	movs	r5, #0
 8012a66:	e761      	b.n	801292c <dwt_ioctl+0x1e10>
 8012a68:	2500      	movs	r5, #0
 8012a6a:	e75f      	b.n	801292c <dwt_ioctl+0x1e10>
 8012a6c:	2500      	movs	r5, #0
 8012a6e:	e75d      	b.n	801292c <dwt_ioctl+0x1e10>
 8012a70:	2500      	movs	r5, #0
 8012a72:	e75b      	b.n	801292c <dwt_ioctl+0x1e10>
 8012a74:	2500      	movs	r5, #0
 8012a76:	e759      	b.n	801292c <dwt_ioctl+0x1e10>
 8012a78:	2500      	movs	r5, #0
 8012a7a:	e757      	b.n	801292c <dwt_ioctl+0x1e10>
 8012a7c:	2500      	movs	r5, #0
 8012a7e:	e755      	b.n	801292c <dwt_ioctl+0x1e10>
 8012a80:	2500      	movs	r5, #0
 8012a82:	e753      	b.n	801292c <dwt_ioctl+0x1e10>
 8012a84:	2500      	movs	r5, #0
 8012a86:	e751      	b.n	801292c <dwt_ioctl+0x1e10>
 8012a88:	2500      	movs	r5, #0
 8012a8a:	e74f      	b.n	801292c <dwt_ioctl+0x1e10>
 8012a8c:	2500      	movs	r5, #0
 8012a8e:	e74d      	b.n	801292c <dwt_ioctl+0x1e10>
 8012a90:	2500      	movs	r5, #0
 8012a92:	e74b      	b.n	801292c <dwt_ioctl+0x1e10>
 8012a94:	2500      	movs	r5, #0
 8012a96:	e749      	b.n	801292c <dwt_ioctl+0x1e10>
 8012a98:	2500      	movs	r5, #0
 8012a9a:	e747      	b.n	801292c <dwt_ioctl+0x1e10>
 8012a9c:	f04f 35ff 	mov.w	r5, #4294967295
 8012aa0:	e744      	b.n	801292c <dwt_ioctl+0x1e10>
 8012aa2:	f04f 35ff 	mov.w	r5, #4294967295
 8012aa6:	e741      	b.n	801292c <dwt_ioctl+0x1e10>
 8012aa8:	2500      	movs	r5, #0
 8012aaa:	e73f      	b.n	801292c <dwt_ioctl+0x1e10>
 8012aac:	2500      	movs	r5, #0
 8012aae:	e73d      	b.n	801292c <dwt_ioctl+0x1e10>
 8012ab0:	2500      	movs	r5, #0
 8012ab2:	e73b      	b.n	801292c <dwt_ioctl+0x1e10>
 8012ab4:	2500      	movs	r5, #0
 8012ab6:	e739      	b.n	801292c <dwt_ioctl+0x1e10>
 8012ab8:	2500      	movs	r5, #0
 8012aba:	e737      	b.n	801292c <dwt_ioctl+0x1e10>
 8012abc:	2500      	movs	r5, #0
 8012abe:	e735      	b.n	801292c <dwt_ioctl+0x1e10>
 8012ac0:	2500      	movs	r5, #0
 8012ac2:	e733      	b.n	801292c <dwt_ioctl+0x1e10>
 8012ac4:	2500      	movs	r5, #0
 8012ac6:	e731      	b.n	801292c <dwt_ioctl+0x1e10>
 8012ac8:	2500      	movs	r5, #0
 8012aca:	e72f      	b.n	801292c <dwt_ioctl+0x1e10>
 8012acc:	2500      	movs	r5, #0
 8012ace:	e72d      	b.n	801292c <dwt_ioctl+0x1e10>
 8012ad0:	2500      	movs	r5, #0
 8012ad2:	e72b      	b.n	801292c <dwt_ioctl+0x1e10>
 8012ad4:	2500      	movs	r5, #0
 8012ad6:	e729      	b.n	801292c <dwt_ioctl+0x1e10>
 8012ad8:	2500      	movs	r5, #0
 8012ada:	e727      	b.n	801292c <dwt_ioctl+0x1e10>
 8012adc:	2500      	movs	r5, #0
 8012ade:	e725      	b.n	801292c <dwt_ioctl+0x1e10>
 8012ae0:	2500      	movs	r5, #0
 8012ae2:	e723      	b.n	801292c <dwt_ioctl+0x1e10>
 8012ae4:	2500      	movs	r5, #0
 8012ae6:	e721      	b.n	801292c <dwt_ioctl+0x1e10>
 8012ae8:	2500      	movs	r5, #0
 8012aea:	e71f      	b.n	801292c <dwt_ioctl+0x1e10>
 8012aec:	2500      	movs	r5, #0
 8012aee:	e71d      	b.n	801292c <dwt_ioctl+0x1e10>
 8012af0:	2500      	movs	r5, #0
 8012af2:	e71b      	b.n	801292c <dwt_ioctl+0x1e10>
 8012af4:	2500      	movs	r5, #0
 8012af6:	e719      	b.n	801292c <dwt_ioctl+0x1e10>
 8012af8:	f899 3011 	ldrb.w	r3, [r9, #17]
 8012afc:	1e5a      	subs	r2, r3, #1
 8012afe:	b2d2      	uxtb	r2, r2
 8012b00:	2a01      	cmp	r2, #1
 8012b02:	f67e ae60 	bls.w	80117c6 <dwt_ioctl+0xcaa>
 8012b06:	2202      	movs	r2, #2
 8012b08:	f7fe be07 	b.w	801171a <dwt_ioctl+0xbfe>
 8012b0c:	4d12      	ldr	r5, [pc, #72]	; (8012b58 <dwt_ioctl+0x203c>)
 8012b0e:	e57c      	b.n	801260a <dwt_ioctl+0x1aee>
 8012b10:	2400      	movs	r4, #0
 8012b12:	9400      	str	r4, [sp, #0]
 8012b14:	f06f 73c0 	mvn.w	r3, #25165824	; 0x1800000
 8012b18:	4622      	mov	r2, r4
 8012b1a:	2110      	movs	r1, #16
 8012b1c:	f7fc fe62 	bl	800f7e4 <dwt_modify32bitoffsetreg>
 8012b20:	9400      	str	r4, [sp, #0]
 8012b22:	4b0e      	ldr	r3, [pc, #56]	; (8012b5c <dwt_ioctl+0x2040>)
 8012b24:	4622      	mov	r2, r4
 8012b26:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8012b2a:	4630      	mov	r0, r6
 8012b2c:	f7fc fe5a 	bl	800f7e4 <dwt_modify32bitoffsetreg>
 8012b30:	e57e      	b.n	8012630 <dwt_ioctl+0x1b14>
 8012b32:	bf00      	nop
 8012b34:	000d0020 	.word	0x000d0020
 8012b38:	000c0064 	.word	0x000c0064
 8012b3c:	000c0068 	.word	0x000c0068
 8012b40:	000c0060 	.word	0x000c0060
 8012b44:	000d0068 	.word	0x000d0068
 8012b48:	000d0040 	.word	0x000d0040
 8012b4c:	000d0044 	.word	0x000d0044
 8012b50:	000d0048 	.word	0x000d0048
 8012b54:	000d003c 	.word	0x000d003c
 8012b58:	08001000 	.word	0x08001000
 8012b5c:	f7fc0fff 	.word	0xf7fc0fff

08012b60 <_init>:
 8012b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012b62:	b085      	sub	sp, #20
 8012b64:	4604      	mov	r4, r0
 8012b66:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012b68:	6819      	ldr	r1, [r3, #0]
 8012b6a:	f7fd fea1 	bl	80108b0 <ull_initialise>
 8012b6e:	4606      	mov	r6, r0
 8012b70:	6823      	ldr	r3, [r4, #0]
 8012b72:	691b      	ldr	r3, [r3, #16]
 8012b74:	4798      	blx	r3
 8012b76:	ab03      	add	r3, sp, #12
 8012b78:	2200      	movs	r2, #0
 8012b7a:	4611      	mov	r1, r2
 8012b7c:	4620      	mov	r0, r4
 8012b7e:	f7fd ffcd 	bl	8010b1c <dwt_ioctl>
 8012b82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b86:	6819      	ldr	r1, [r3, #0]
 8012b88:	4620      	mov	r0, r4
 8012b8a:	f7fd fc43 	bl	8010414 <ull_configure>
 8012b8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b92:	6859      	ldr	r1, [r3, #4]
 8012b94:	4620      	mov	r0, r4
 8012b96:	f7fd f993 	bl	800fec0 <ull_configuretxrf>
 8012b9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b9e:	89d9      	ldrh	r1, [r3, #14]
 8012ba0:	4620      	mov	r0, r4
 8012ba2:	f7fc f8be 	bl	800ed22 <ull_setrxantennadelay>
 8012ba6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012baa:	8999      	ldrh	r1, [r3, #12]
 8012bac:	4620      	mov	r0, r4
 8012bae:	f7fc f8c0 	bl	800ed32 <ull_settxantennadelay>
 8012bb2:	2100      	movs	r1, #0
 8012bb4:	4620      	mov	r0, r4
 8012bb6:	f7fc f94a 	bl	800ee4e <ull_setrxaftertxdelay>
 8012bba:	2500      	movs	r5, #0
 8012bbc:	9500      	str	r5, [sp, #0]
 8012bbe:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 8012bc2:	462a      	mov	r2, r5
 8012bc4:	2110      	movs	r1, #16
 8012bc6:	4620      	mov	r0, r4
 8012bc8:	f7fd fb0c 	bl	80101e4 <dwt_modify16bitoffsetreg>
 8012bcc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012bd0:	895a      	ldrh	r2, [r3, #10]
 8012bd2:	8919      	ldrh	r1, [r3, #8]
 8012bd4:	4620      	mov	r0, r4
 8012bd6:	f7fd fa03 	bl	800ffe0 <ull_configureframefilter>
 8012bda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012bde:	8a1b      	ldrh	r3, [r3, #16]
 8012be0:	2202      	movs	r2, #2
 8012be2:	210c      	movs	r1, #12
 8012be4:	4620      	mov	r0, r4
 8012be6:	f7fc f88c 	bl	800ed02 <dwt_write16bitoffsetreg>
 8012bea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012bee:	8a5b      	ldrh	r3, [r3, #18]
 8012bf0:	462a      	mov	r2, r5
 8012bf2:	210c      	movs	r1, #12
 8012bf4:	4620      	mov	r0, r4
 8012bf6:	f7fc f884 	bl	800ed02 <dwt_write16bitoffsetreg>
 8012bfa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012bfc:	7a19      	ldrb	r1, [r3, #8]
 8012bfe:	4620      	mov	r0, r4
 8012c00:	f7fd fb2e 	bl	8010260 <ull_setleds>
 8012c04:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012c06:	68d9      	ldr	r1, [r3, #12]
 8012c08:	4620      	mov	r0, r4
 8012c0a:	f7fc f949 	bl	800eea0 <ull_setlnapamode>
 8012c0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012c10:	7e0b      	ldrb	r3, [r1, #24]
 8012c12:	694a      	ldr	r2, [r1, #20]
 8012c14:	6909      	ldr	r1, [r1, #16]
 8012c16:	4620      	mov	r0, r4
 8012c18:	f7fd fa68 	bl	80100ec <ull_setinterrupt>
 8012c1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012c1e:	7f9a      	ldrb	r2, [r3, #30]
 8012c20:	8b99      	ldrh	r1, [r3, #28]
 8012c22:	4620      	mov	r0, r4
 8012c24:	f7fc fb90 	bl	800f348 <ull_configuresleep>
 8012c28:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8012c2a:	7b53      	ldrb	r3, [r2, #13]
 8012c2c:	2b2e      	cmp	r3, #46	; 0x2e
 8012c2e:	d005      	beq.n	8012c3c <_init+0xdc>
 8012c30:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012c32:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012c36:	f033 033f 	bics.w	r3, r3, #63	; 0x3f
 8012c3a:	d00a      	beq.n	8012c52 <_init+0xf2>
 8012c3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012c3e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012c42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012c46:	7353      	strb	r3, [r2, #13]
 8012c48:	2200      	movs	r2, #0
 8012c4a:	4928      	ldr	r1, [pc, #160]	; (8012cec <_init+0x18c>)
 8012c4c:	4620      	mov	r0, r4
 8012c4e:	f7fc faa7 	bl	800f1a0 <dwt_write8bitoffsetreg>
 8012c52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012c54:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 8012c58:	4620      	mov	r0, r4
 8012c5a:	f7fc ff63 	bl	800fb24 <ull_configciadiag>
 8012c5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012c60:	6a19      	ldr	r1, [r3, #32]
 8012c62:	4620      	mov	r0, r4
 8012c64:	f7fc f93c 	bl	800eee0 <ull_configurestskey>
 8012c68:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012c6a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8012c6c:	4620      	mov	r0, r4
 8012c6e:	f7fc f95b 	bl	800ef28 <ull_configurestsiv>
 8012c72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012c74:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8012c78:	bb9b      	cbnz	r3, 8012ce2 <_init+0x182>
 8012c7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012c7c:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 8012c80:	4620      	mov	r0, r4
 8012c82:	f7fc fb05 	bl	800f290 <ull_configeventcounters>
 8012c86:	f994 504c 	ldrsb.w	r5, [r4, #76]	; 0x4c
 8012c8a:	2d00      	cmp	r5, #0
 8012c8c:	db26      	blt.n	8012cdc <_init+0x17c>
 8012c8e:	2301      	movs	r3, #1
 8012c90:	fa03 f505 	lsl.w	r5, r3, r5
 8012c94:	b2af      	uxth	r7, r5
 8012c96:	4a16      	ldr	r2, [pc, #88]	; (8012cf0 <_init+0x190>)
 8012c98:	4639      	mov	r1, r7
 8012c9a:	4620      	mov	r0, r4
 8012c9c:	f7fc fed4 	bl	800fa48 <ull_setgpiomode>
 8012ca0:	f10d 030a 	add.w	r3, sp, #10
 8012ca4:	9300      	str	r3, [sp, #0]
 8012ca6:	2302      	movs	r3, #2
 8012ca8:	2200      	movs	r2, #0
 8012caa:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8012cae:	4620      	mov	r0, r4
 8012cb0:	f7fb fba9 	bl	800e406 <dwt_readfromdevice>
 8012cb4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8012cb8:	ea23 0305 	bic.w	r3, r3, r5
 8012cbc:	f8ad 300a 	strh.w	r3, [sp, #10]
 8012cc0:	2200      	movs	r2, #0
 8012cc2:	490c      	ldr	r1, [pc, #48]	; (8012cf4 <_init+0x194>)
 8012cc4:	4620      	mov	r0, r4
 8012cc6:	f7fc f81c 	bl	800ed02 <dwt_write16bitoffsetreg>
 8012cca:	f994 204d 	ldrsb.w	r2, [r4, #77]	; 0x4d
 8012cce:	fab2 f282 	clz	r2, r2
 8012cd2:	0952      	lsrs	r2, r2, #5
 8012cd4:	4639      	mov	r1, r7
 8012cd6:	4620      	mov	r0, r4
 8012cd8:	f7fd fb40 	bl	801035c <ull_setgpiovalue>
 8012cdc:	4630      	mov	r0, r6
 8012cde:	b005      	add	sp, #20
 8012ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012ce2:	4620      	mov	r0, r4
 8012ce4:	f7fc ff54 	bl	800fb90 <ull_configurestsloadiv>
 8012ce8:	e7c7      	b.n	8012c7a <_init+0x11a>
 8012cea:	bf00      	nop
 8012cec:	00090014 	.word	0x00090014
 8012cf0:	01200492 	.word	0x01200492
 8012cf4:	00050008 	.word	0x00050008

08012cf8 <__errno>:
 8012cf8:	4b01      	ldr	r3, [pc, #4]	; (8012d00 <__errno+0x8>)
 8012cfa:	6818      	ldr	r0, [r3, #0]
 8012cfc:	4770      	bx	lr
 8012cfe:	bf00      	nop
 8012d00:	20000038 	.word	0x20000038

08012d04 <__libc_init_array>:
 8012d04:	b570      	push	{r4, r5, r6, lr}
 8012d06:	4d0d      	ldr	r5, [pc, #52]	; (8012d3c <__libc_init_array+0x38>)
 8012d08:	4c0d      	ldr	r4, [pc, #52]	; (8012d40 <__libc_init_array+0x3c>)
 8012d0a:	1b64      	subs	r4, r4, r5
 8012d0c:	10a4      	asrs	r4, r4, #2
 8012d0e:	2600      	movs	r6, #0
 8012d10:	42a6      	cmp	r6, r4
 8012d12:	d109      	bne.n	8012d28 <__libc_init_array+0x24>
 8012d14:	4d0b      	ldr	r5, [pc, #44]	; (8012d44 <__libc_init_array+0x40>)
 8012d16:	4c0c      	ldr	r4, [pc, #48]	; (8012d48 <__libc_init_array+0x44>)
 8012d18:	f000 f8a0 	bl	8012e5c <_init>
 8012d1c:	1b64      	subs	r4, r4, r5
 8012d1e:	10a4      	asrs	r4, r4, #2
 8012d20:	2600      	movs	r6, #0
 8012d22:	42a6      	cmp	r6, r4
 8012d24:	d105      	bne.n	8012d32 <__libc_init_array+0x2e>
 8012d26:	bd70      	pop	{r4, r5, r6, pc}
 8012d28:	f855 3b04 	ldr.w	r3, [r5], #4
 8012d2c:	4798      	blx	r3
 8012d2e:	3601      	adds	r6, #1
 8012d30:	e7ee      	b.n	8012d10 <__libc_init_array+0xc>
 8012d32:	f855 3b04 	ldr.w	r3, [r5], #4
 8012d36:	4798      	blx	r3
 8012d38:	3601      	adds	r6, #1
 8012d3a:	e7f2      	b.n	8012d22 <__libc_init_array+0x1e>
 8012d3c:	080133b0 	.word	0x080133b0
 8012d40:	080133b0 	.word	0x080133b0
 8012d44:	080133b0 	.word	0x080133b0
 8012d48:	080133b4 	.word	0x080133b4

08012d4c <malloc>:
 8012d4c:	4b02      	ldr	r3, [pc, #8]	; (8012d58 <malloc+0xc>)
 8012d4e:	4601      	mov	r1, r0
 8012d50:	6818      	ldr	r0, [r3, #0]
 8012d52:	f000 b80b 	b.w	8012d6c <_malloc_r>
 8012d56:	bf00      	nop
 8012d58:	20000038 	.word	0x20000038

08012d5c <memset>:
 8012d5c:	4402      	add	r2, r0
 8012d5e:	4603      	mov	r3, r0
 8012d60:	4293      	cmp	r3, r2
 8012d62:	d100      	bne.n	8012d66 <memset+0xa>
 8012d64:	4770      	bx	lr
 8012d66:	f803 1b01 	strb.w	r1, [r3], #1
 8012d6a:	e7f9      	b.n	8012d60 <memset+0x4>

08012d6c <_malloc_r>:
 8012d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d6e:	1ccd      	adds	r5, r1, #3
 8012d70:	f025 0503 	bic.w	r5, r5, #3
 8012d74:	3508      	adds	r5, #8
 8012d76:	2d0c      	cmp	r5, #12
 8012d78:	bf38      	it	cc
 8012d7a:	250c      	movcc	r5, #12
 8012d7c:	2d00      	cmp	r5, #0
 8012d7e:	4606      	mov	r6, r0
 8012d80:	db01      	blt.n	8012d86 <_malloc_r+0x1a>
 8012d82:	42a9      	cmp	r1, r5
 8012d84:	d903      	bls.n	8012d8e <_malloc_r+0x22>
 8012d86:	230c      	movs	r3, #12
 8012d88:	6033      	str	r3, [r6, #0]
 8012d8a:	2000      	movs	r0, #0
 8012d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d8e:	f000 f857 	bl	8012e40 <__malloc_lock>
 8012d92:	4921      	ldr	r1, [pc, #132]	; (8012e18 <_malloc_r+0xac>)
 8012d94:	680a      	ldr	r2, [r1, #0]
 8012d96:	4614      	mov	r4, r2
 8012d98:	b99c      	cbnz	r4, 8012dc2 <_malloc_r+0x56>
 8012d9a:	4f20      	ldr	r7, [pc, #128]	; (8012e1c <_malloc_r+0xb0>)
 8012d9c:	683b      	ldr	r3, [r7, #0]
 8012d9e:	b923      	cbnz	r3, 8012daa <_malloc_r+0x3e>
 8012da0:	4621      	mov	r1, r4
 8012da2:	4630      	mov	r0, r6
 8012da4:	f000 f83c 	bl	8012e20 <_sbrk_r>
 8012da8:	6038      	str	r0, [r7, #0]
 8012daa:	4629      	mov	r1, r5
 8012dac:	4630      	mov	r0, r6
 8012dae:	f000 f837 	bl	8012e20 <_sbrk_r>
 8012db2:	1c43      	adds	r3, r0, #1
 8012db4:	d123      	bne.n	8012dfe <_malloc_r+0x92>
 8012db6:	230c      	movs	r3, #12
 8012db8:	6033      	str	r3, [r6, #0]
 8012dba:	4630      	mov	r0, r6
 8012dbc:	f000 f846 	bl	8012e4c <__malloc_unlock>
 8012dc0:	e7e3      	b.n	8012d8a <_malloc_r+0x1e>
 8012dc2:	6823      	ldr	r3, [r4, #0]
 8012dc4:	1b5b      	subs	r3, r3, r5
 8012dc6:	d417      	bmi.n	8012df8 <_malloc_r+0x8c>
 8012dc8:	2b0b      	cmp	r3, #11
 8012dca:	d903      	bls.n	8012dd4 <_malloc_r+0x68>
 8012dcc:	6023      	str	r3, [r4, #0]
 8012dce:	441c      	add	r4, r3
 8012dd0:	6025      	str	r5, [r4, #0]
 8012dd2:	e004      	b.n	8012dde <_malloc_r+0x72>
 8012dd4:	6863      	ldr	r3, [r4, #4]
 8012dd6:	42a2      	cmp	r2, r4
 8012dd8:	bf0c      	ite	eq
 8012dda:	600b      	streq	r3, [r1, #0]
 8012ddc:	6053      	strne	r3, [r2, #4]
 8012dde:	4630      	mov	r0, r6
 8012de0:	f000 f834 	bl	8012e4c <__malloc_unlock>
 8012de4:	f104 000b 	add.w	r0, r4, #11
 8012de8:	1d23      	adds	r3, r4, #4
 8012dea:	f020 0007 	bic.w	r0, r0, #7
 8012dee:	1ac2      	subs	r2, r0, r3
 8012df0:	d0cc      	beq.n	8012d8c <_malloc_r+0x20>
 8012df2:	1a1b      	subs	r3, r3, r0
 8012df4:	50a3      	str	r3, [r4, r2]
 8012df6:	e7c9      	b.n	8012d8c <_malloc_r+0x20>
 8012df8:	4622      	mov	r2, r4
 8012dfa:	6864      	ldr	r4, [r4, #4]
 8012dfc:	e7cc      	b.n	8012d98 <_malloc_r+0x2c>
 8012dfe:	1cc4      	adds	r4, r0, #3
 8012e00:	f024 0403 	bic.w	r4, r4, #3
 8012e04:	42a0      	cmp	r0, r4
 8012e06:	d0e3      	beq.n	8012dd0 <_malloc_r+0x64>
 8012e08:	1a21      	subs	r1, r4, r0
 8012e0a:	4630      	mov	r0, r6
 8012e0c:	f000 f808 	bl	8012e20 <_sbrk_r>
 8012e10:	3001      	adds	r0, #1
 8012e12:	d1dd      	bne.n	8012dd0 <_malloc_r+0x64>
 8012e14:	e7cf      	b.n	8012db6 <_malloc_r+0x4a>
 8012e16:	bf00      	nop
 8012e18:	20000118 	.word	0x20000118
 8012e1c:	2000011c 	.word	0x2000011c

08012e20 <_sbrk_r>:
 8012e20:	b538      	push	{r3, r4, r5, lr}
 8012e22:	4d06      	ldr	r5, [pc, #24]	; (8012e3c <_sbrk_r+0x1c>)
 8012e24:	2300      	movs	r3, #0
 8012e26:	4604      	mov	r4, r0
 8012e28:	4608      	mov	r0, r1
 8012e2a:	602b      	str	r3, [r5, #0]
 8012e2c:	f7ee f910 	bl	8001050 <_sbrk>
 8012e30:	1c43      	adds	r3, r0, #1
 8012e32:	d102      	bne.n	8012e3a <_sbrk_r+0x1a>
 8012e34:	682b      	ldr	r3, [r5, #0]
 8012e36:	b103      	cbz	r3, 8012e3a <_sbrk_r+0x1a>
 8012e38:	6023      	str	r3, [r4, #0]
 8012e3a:	bd38      	pop	{r3, r4, r5, pc}
 8012e3c:	20000214 	.word	0x20000214

08012e40 <__malloc_lock>:
 8012e40:	4801      	ldr	r0, [pc, #4]	; (8012e48 <__malloc_lock+0x8>)
 8012e42:	f000 b809 	b.w	8012e58 <__retarget_lock_acquire_recursive>
 8012e46:	bf00      	nop
 8012e48:	2000021c 	.word	0x2000021c

08012e4c <__malloc_unlock>:
 8012e4c:	4801      	ldr	r0, [pc, #4]	; (8012e54 <__malloc_unlock+0x8>)
 8012e4e:	f000 b804 	b.w	8012e5a <__retarget_lock_release_recursive>
 8012e52:	bf00      	nop
 8012e54:	2000021c 	.word	0x2000021c

08012e58 <__retarget_lock_acquire_recursive>:
 8012e58:	4770      	bx	lr

08012e5a <__retarget_lock_release_recursive>:
 8012e5a:	4770      	bx	lr

08012e5c <_init>:
 8012e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e5e:	bf00      	nop
 8012e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012e62:	bc08      	pop	{r3}
 8012e64:	469e      	mov	lr, r3
 8012e66:	4770      	bx	lr

08012e68 <_fini>:
 8012e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e6a:	bf00      	nop
 8012e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012e6e:	bc08      	pop	{r3}
 8012e70:	469e      	mov	lr, r3
 8012e72:	4770      	bx	lr

08012e74 <dw3000_driver>:
 8012e74:	0312 deca ff0f ffff 3148 0801 3150 0801     ........H1..P1..
 8012e84:	3084 0801 3048 0801 0007 0006               .0..H0......

08012e90 <dw3700_driver>:
 8012e90:	0313 deca ff0f ffff 3148 0801 3150 0801     ........H1..P1..
 8012ea0:	31c4 0801 3188 0801 0007 0006               .1...1......

08012eac <dw3720_driver>:
 8012eac:	0314 deca ff0f ffff 3148 0801 3150 0801     ........H1..P1..
 8012ebc:	32d4 0801 3298 0801 0007 0006               .2...2......
