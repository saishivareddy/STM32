
dwm3000-f411-tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012f28  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e0  080130c0  080130c0  000230c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080135a0  080135a0  0003009c  2**0
                  CONTENTS
  4 .ARM          00000008  080135a0  080135a0  000235a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080135a8  080135a8  0003009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080135a8  080135a8  000235a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080135ac  080135ac  000235ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  080135b0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  2000009c  0801364c  0003009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  0801364c  0003021c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012355  00000000  00000000  000300cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fc5  00000000  00000000  00042421  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e40  00000000  00000000  000453e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000181f1  00000000  00000000  00046228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00014dbf  00000000  00000000  0005e419  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008bd45  00000000  00000000  000731d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      000000cf  00000000  00000000  000fef1d  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000ce0  00000000  00000000  000feff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000039e4  00000000  00000000  000ffcd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000009c 	.word	0x2000009c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08013054 	.word	0x08013054

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000a0 	.word	0x200000a0
 80001d4:	08013054 	.word	0x08013054

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
    decaIrqStatus_t s = port_GetEXT_IRQStatus();
 80004e2:	f000 fa5f 	bl	80009a4 <port_GetEXT_IRQStatus>
 80004e6:	4603      	mov	r3, r0
 80004e8:	607b      	str	r3, [r7, #4]

    if (s)
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d001      	beq.n	80004f4 <decamutexon+0x18>
    {
        port_DisableEXT_IRQ(); // disable the external interrupt line
 80004f0:	f000 fa34 	bl	800095c <port_DisableEXT_IRQ>
    }
    return s; // return state before disable, value is used to re-enable in decamutexoff call
 80004f4:	687b      	ldr	r3, [r7, #4]
}
 80004f6:	4618      	mov	r0, r3
 80004f8:	3708      	adds	r7, #8
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}

080004fe <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s) // put a function here that re-enables the interrupt at the end of the critical section
{
 80004fe:	b580      	push	{r7, lr}
 8000500:	b082      	sub	sp, #8
 8000502:	af00      	add	r7, sp, #0
 8000504:	6078      	str	r0, [r7, #4]
    if (s)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d001      	beq.n	8000510 <decamutexoff+0x12>
    { // need to check the port state as we can't use level sensitive interrupt on the STM ARM
        port_EnableEXT_IRQ();
 800050c:	f000 fa38 	bl	8000980 <port_EnableEXT_IRQ>
    }
}
 8000510:	bf00      	nop
 8000512:	3708      	adds	r7, #8
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}

08000518 <deca_sleep>:
#include <deca_device_api.h>
#include <port.h>

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
void deca_sleep(unsigned int time_ms)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
    Sleep(time_ms);
 8000520:	6878      	ldr	r0, [r7, #4]
 8000522:	f000 f95f 	bl	80007e4 <Sleep>
}
 8000526:	bf00      	nop
 8000528:	3708      	adds	r7, #8
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}

0800052e <deca_usleep>:

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
void deca_usleep(unsigned long time_us)
{
 800052e:	b580      	push	{r7, lr}
 8000530:	b082      	sub	sp, #8
 8000532:	af00      	add	r7, sp, #0
 8000534:	6078      	str	r0, [r7, #4]
    Sleep(time_us);
 8000536:	6878      	ldr	r0, [r7, #4]
 8000538:	f000 f954 	bl	80007e4 <Sleep>
}
 800053c:	bf00      	nop
 800053e:	3708      	adds	r7, #8
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}

08000544 <writetospiwithcrc>:
 * Low level abstract function to write to the SPI when SPI CRC mode is used
 * Takes two separate byte buffers for write header and write data, and a CRC8 byte which is written last
 * returns 0 for success, or -1 for error
 */
int writetospiwithcrc(uint16_t headerLength, const uint8_t *headerBuffer, uint16_t bodyLength, const uint8_t *bodyBuffer, uint8_t crc8)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af00      	add	r7, sp, #0
 800054a:	60b9      	str	r1, [r7, #8]
 800054c:	607b      	str	r3, [r7, #4]
 800054e:	4603      	mov	r3, r0
 8000550:	81fb      	strh	r3, [r7, #14]
 8000552:	4613      	mov	r3, r2
 8000554:	81bb      	strh	r3, [r7, #12]
#ifdef DWT_ENABLE_CRC
    decaIrqStatus_t stat;
    stat = decamutexon();
 8000556:	f7ff ffc1 	bl	80004dc <decamutexon>
 800055a:	6178      	str	r0, [r7, #20]
    while (HAL_SPI_GetState(hcurrent_active_spi) != HAL_SPI_STATE_READY);
 800055c:	bf00      	nop
 800055e:	4b1d      	ldr	r3, [pc, #116]	; (80005d4 <writetospiwithcrc+0x90>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4618      	mov	r0, r3
 8000564:	f003 ffc6 	bl	80044f4 <HAL_SPI_GetState>
 8000568:	4603      	mov	r3, r0
 800056a:	2b01      	cmp	r3, #1
 800056c:	d1f7      	bne.n	800055e <writetospiwithcrc+0x1a>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, pin_io_active_spi, SPI_CS_state); /**< Put chip select line low */
 800056e:	4b1a      	ldr	r3, [pc, #104]	; (80005d8 <writetospiwithcrc+0x94>)
 8000570:	881b      	ldrh	r3, [r3, #0]
 8000572:	4a1a      	ldr	r2, [pc, #104]	; (80005dc <writetospiwithcrc+0x98>)
 8000574:	7812      	ldrb	r2, [r2, #0]
 8000576:	4619      	mov	r1, r3
 8000578:	4819      	ldr	r0, [pc, #100]	; (80005e0 <writetospiwithcrc+0x9c>)
 800057a:	f001 fa59 	bl	8001a30 <HAL_GPIO_WritePin>


    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)headerBuffer, headerLength, 10);    /* Send header in polling mode */
 800057e:	4b15      	ldr	r3, [pc, #84]	; (80005d4 <writetospiwithcrc+0x90>)
 8000580:	6818      	ldr	r0, [r3, #0]
 8000582:	89fa      	ldrh	r2, [r7, #14]
 8000584:	230a      	movs	r3, #10
 8000586:	68b9      	ldr	r1, [r7, #8]
 8000588:	f003 fd6d 	bl	8004066 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)bodyBuffer, bodyLength, 10);        /* Send data in polling mode */
 800058c:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <writetospiwithcrc+0x90>)
 800058e:	6818      	ldr	r0, [r3, #0]
 8000590:	89ba      	ldrh	r2, [r7, #12]
 8000592:	230a      	movs	r3, #10
 8000594:	6879      	ldr	r1, [r7, #4]
 8000596:	f003 fd66 	bl	8004066 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)&crc8, 1, 10);      /* Send data in polling mode */
 800059a:	4b0e      	ldr	r3, [pc, #56]	; (80005d4 <writetospiwithcrc+0x90>)
 800059c:	6818      	ldr	r0, [r3, #0]
 800059e:	230a      	movs	r3, #10
 80005a0:	2201      	movs	r2, #1
 80005a2:	f107 0120 	add.w	r1, r7, #32
 80005a6:	f003 fd5e 	bl	8004066 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, pin_io_active_spi,(GPIO_PinState)(!((uint8_t)SPI_CS_state))); /**< Put chip select line high */
 80005aa:	4b0b      	ldr	r3, [pc, #44]	; (80005d8 <writetospiwithcrc+0x94>)
 80005ac:	8819      	ldrh	r1, [r3, #0]
 80005ae:	4b0b      	ldr	r3, [pc, #44]	; (80005dc <writetospiwithcrc+0x98>)
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	bf0c      	ite	eq
 80005b6:	2301      	moveq	r3, #1
 80005b8:	2300      	movne	r3, #0
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	461a      	mov	r2, r3
 80005be:	4808      	ldr	r0, [pc, #32]	; (80005e0 <writetospiwithcrc+0x9c>)
 80005c0:	f001 fa36 	bl	8001a30 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 80005c4:	6978      	ldr	r0, [r7, #20]
 80005c6:	f7ff ff9a 	bl	80004fe <decamutexoff>
#endif //DWT_ENABLE_CRC
    return 0;
 80005ca:	2300      	movs	r3, #0
} // end writetospiwithcrc()
 80005cc:	4618      	mov	r0, r3
 80005ce:	3718      	adds	r7, #24
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	20000008 	.word	0x20000008
 80005d8:	2000000c 	.word	0x2000000c
 80005dc:	2000010c 	.word	0x2000010c
 80005e0:	40020800 	.word	0x40020800

080005e4 <writetospi>:
 * Low level abstract function to write to the SPI
 * Takes two separate byte buffers for write header and write data
 * returns 0 for success, or -1 for error
 */
int writetospi(uint16_t headerLength, const uint8_t *headerBuffer, uint16_t bodyLength, const uint8_t *bodyBuffer)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b086      	sub	sp, #24
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60b9      	str	r1, [r7, #8]
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	4603      	mov	r3, r0
 80005f0:	81fb      	strh	r3, [r7, #14]
 80005f2:	4613      	mov	r3, r2
 80005f4:	81bb      	strh	r3, [r7, #12]
    decaIrqStatus_t stat;
    stat = decamutexon();
 80005f6:	f7ff ff71 	bl	80004dc <decamutexon>
 80005fa:	6178      	str	r0, [r7, #20]

    while (HAL_SPI_GetState(hcurrent_active_spi) != HAL_SPI_STATE_READY);
 80005fc:	bf00      	nop
 80005fe:	4b1c      	ldr	r3, [pc, #112]	; (8000670 <writetospi+0x8c>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4618      	mov	r0, r3
 8000604:	f003 ff76 	bl	80044f4 <HAL_SPI_GetState>
 8000608:	4603      	mov	r3, r0
 800060a:	2b01      	cmp	r3, #1
 800060c:	d1f7      	bne.n	80005fe <writetospi+0x1a>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, pin_io_active_spi, SPI_CS_state); /**< Put chip select line low */
 800060e:	4b19      	ldr	r3, [pc, #100]	; (8000674 <writetospi+0x90>)
 8000610:	881b      	ldrh	r3, [r3, #0]
 8000612:	4a19      	ldr	r2, [pc, #100]	; (8000678 <writetospi+0x94>)
 8000614:	7812      	ldrb	r2, [r2, #0]
 8000616:	4619      	mov	r1, r3
 8000618:	4818      	ldr	r0, [pc, #96]	; (800067c <writetospi+0x98>)
 800061a:	f001 fa09 	bl	8001a30 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)headerBuffer, headerLength, HAL_MAX_DELAY); /* Send header in polling mode */
 800061e:	4b14      	ldr	r3, [pc, #80]	; (8000670 <writetospi+0x8c>)
 8000620:	6818      	ldr	r0, [r3, #0]
 8000622:	89fa      	ldrh	r2, [r7, #14]
 8000624:	f04f 33ff 	mov.w	r3, #4294967295
 8000628:	68b9      	ldr	r1, [r7, #8]
 800062a:	f003 fd1c 	bl	8004066 <HAL_SPI_Transmit>

    if(bodyLength != 0)
 800062e:	89bb      	ldrh	r3, [r7, #12]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d007      	beq.n	8000644 <writetospi+0x60>
    {
        HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t *)bodyBuffer,   bodyLength, HAL_MAX_DELAY);     /* Send data in polling mode */
 8000634:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <writetospi+0x8c>)
 8000636:	6818      	ldr	r0, [r3, #0]
 8000638:	89ba      	ldrh	r2, [r7, #12]
 800063a:	f04f 33ff 	mov.w	r3, #4294967295
 800063e:	6879      	ldr	r1, [r7, #4]
 8000640:	f003 fd11 	bl	8004066 <HAL_SPI_Transmit>
    }

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, pin_io_active_spi, (GPIO_PinState)(!((uint8_t)SPI_CS_state))); /**< Put chip select line high */
 8000644:	4b0b      	ldr	r3, [pc, #44]	; (8000674 <writetospi+0x90>)
 8000646:	8819      	ldrh	r1, [r3, #0]
 8000648:	4b0b      	ldr	r3, [pc, #44]	; (8000678 <writetospi+0x94>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	2b00      	cmp	r3, #0
 800064e:	bf0c      	ite	eq
 8000650:	2301      	moveq	r3, #1
 8000652:	2300      	movne	r3, #0
 8000654:	b2db      	uxtb	r3, r3
 8000656:	461a      	mov	r2, r3
 8000658:	4808      	ldr	r0, [pc, #32]	; (800067c <writetospi+0x98>)
 800065a:	f001 f9e9 	bl	8001a30 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 800065e:	6978      	ldr	r0, [r7, #20]
 8000660:	f7ff ff4d 	bl	80004fe <decamutexoff>

    return 0;
 8000664:	2300      	movs	r3, #0
} // end writetospi()
 8000666:	4618      	mov	r0, r3
 8000668:	3718      	adds	r7, #24
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20000008 	.word	0x20000008
 8000674:	2000000c 	.word	0x2000000c
 8000678:	2000010c 	.word	0x2000010c
 800067c:	40020800 	.word	0x40020800

08000680 <readfromspi>:
 * returns the offset into read buffer where first byte of read data may be found,
 * or returns -1 if there was an error
 */
//#pragma GCC optimize ("O3")
int readfromspi(uint16_t headerLength, uint8_t *headerBuffer, uint16_t readlength, uint8_t *readBuffer)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af00      	add	r7, sp, #0
 8000686:	60b9      	str	r1, [r7, #8]
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	4603      	mov	r3, r0
 800068c:	81fb      	strh	r3, [r7, #14]
 800068e:	4613      	mov	r3, r2
 8000690:	81bb      	strh	r3, [r7, #12]

    decaIrqStatus_t stat;
    stat = decamutexon();
 8000692:	f7ff ff23 	bl	80004dc <decamutexon>
 8000696:	6178      	str	r0, [r7, #20]

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(hcurrent_active_spi) != HAL_SPI_STATE_READY);
 8000698:	bf00      	nop
 800069a:	4b2d      	ldr	r3, [pc, #180]	; (8000750 <readfromspi+0xd0>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4618      	mov	r0, r3
 80006a0:	f003 ff28 	bl	80044f4 <HAL_SPI_GetState>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b01      	cmp	r3, #1
 80006a8:	d1f7      	bne.n	800069a <readfromspi+0x1a>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, SPI_CS_state); /**< Put chip select line low */
 80006aa:	4b2a      	ldr	r3, [pc, #168]	; (8000754 <readfromspi+0xd4>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	461a      	mov	r2, r3
 80006b0:	2110      	movs	r1, #16
 80006b2:	4829      	ldr	r0, [pc, #164]	; (8000758 <readfromspi+0xd8>)
 80006b4:	f001 f9bc 	bl	8001a30 <HAL_GPIO_WritePin>

    /* Send header */
    HAL_SPI_Transmit(hcurrent_active_spi, (uint8_t*)headerBuffer, headerLength, HAL_MAX_DELAY); //No timeout
 80006b8:	4b25      	ldr	r3, [pc, #148]	; (8000750 <readfromspi+0xd0>)
 80006ba:	6818      	ldr	r0, [r3, #0]
 80006bc:	89fa      	ldrh	r2, [r7, #14]
 80006be:	f04f 33ff 	mov.w	r3, #4294967295
 80006c2:	68b9      	ldr	r1, [r7, #8]
 80006c4:	f003 fccf 	bl	8004066 <HAL_SPI_Transmit>

    while(__HAL_SPI_GET_FLAG(hcurrent_active_spi, SPI_FLAG_TXE) == RESET)//Verify that the transmit was ended
 80006c8:	bf00      	nop
 80006ca:	4b21      	ldr	r3, [pc, #132]	; (8000750 <readfromspi+0xd0>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	689b      	ldr	r3, [r3, #8]
 80006d2:	f003 0302 	and.w	r3, r3, #2
 80006d6:	2b02      	cmp	r3, #2
 80006d8:	d1f7      	bne.n	80006ca <readfromspi+0x4a>
    {
    }

    /* for the data buffer use LL functions directly as the HAL SPI read function
     * has issue reading single bytes */
    while (readlength-- > 0)
 80006da:	e01f      	b.n	800071c <readfromspi+0x9c>
    {
        /* Wait until TXE flag is set to send data */
        while(__HAL_SPI_GET_FLAG(hcurrent_active_spi, SPI_FLAG_TXE) == RESET)
 80006dc:	bf00      	nop
 80006de:	4b1c      	ldr	r3, [pc, #112]	; (8000750 <readfromspi+0xd0>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	689b      	ldr	r3, [r3, #8]
 80006e6:	f003 0302 	and.w	r3, r3, #2
 80006ea:	2b02      	cmp	r3, #2
 80006ec:	d1f7      	bne.n	80006de <readfromspi+0x5e>
        {
        }

        hcurrent_active_spi->Instance->DR=0;
 80006ee:	4b18      	ldr	r3, [pc, #96]	; (8000750 <readfromspi+0xd0>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2200      	movs	r2, #0
 80006f6:	60da      	str	r2, [r3, #12]
        /* set output to 0 (MOSI), this is necessary for
        e.g. when waking up DW3000 from DEEPSLEEP via dwt_spicswakeup() function.
        */

        /* Wait until RXNE flag is set to read data */
        while(__HAL_SPI_GET_FLAG(hcurrent_active_spi, SPI_FLAG_RXNE) == RESET)
 80006f8:	bf00      	nop
 80006fa:	4b15      	ldr	r3, [pc, #84]	; (8000750 <readfromspi+0xd0>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	689b      	ldr	r3, [r3, #8]
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	2b01      	cmp	r3, #1
 8000708:	d1f7      	bne.n	80006fa <readfromspi+0x7a>
        {
        }

        (*readBuffer++) = hcurrent_active_spi->Instance->DR;  //copy data read form (MISO)
 800070a:	4b11      	ldr	r3, [pc, #68]	; (8000750 <readfromspi+0xd0>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	68d9      	ldr	r1, [r3, #12]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	1c5a      	adds	r2, r3, #1
 8000716:	607a      	str	r2, [r7, #4]
 8000718:	b2ca      	uxtb	r2, r1
 800071a:	701a      	strb	r2, [r3, #0]
    while (readlength-- > 0)
 800071c:	89bb      	ldrh	r3, [r7, #12]
 800071e:	1e5a      	subs	r2, r3, #1
 8000720:	81ba      	strh	r2, [r7, #12]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d1da      	bne.n	80006dc <readfromspi+0x5c>
    }


    HAL_GPIO_WritePin(DW_CS_GPIO_Port, pin_io_active_spi, (GPIO_PinState)(!((uint8_t)SPI_CS_state))); /**< Put chip select line high */
 8000726:	4b0d      	ldr	r3, [pc, #52]	; (800075c <readfromspi+0xdc>)
 8000728:	8819      	ldrh	r1, [r3, #0]
 800072a:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <readfromspi+0xd4>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b00      	cmp	r3, #0
 8000730:	bf0c      	ite	eq
 8000732:	2301      	moveq	r3, #1
 8000734:	2300      	movne	r3, #0
 8000736:	b2db      	uxtb	r3, r3
 8000738:	461a      	mov	r2, r3
 800073a:	4807      	ldr	r0, [pc, #28]	; (8000758 <readfromspi+0xd8>)
 800073c:	f001 f978 	bl	8001a30 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 8000740:	6978      	ldr	r0, [r7, #20]
 8000742:	f7ff fedc 	bl	80004fe <decamutexoff>

    return 0;
 8000746:	2300      	movs	r3, #0
} // end readfromspi()
 8000748:	4618      	mov	r0, r3
 800074a:	3718      	adds	r7, #24
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	20000008 	.word	0x20000008
 8000754:	2000010c 	.word	0x2000010c
 8000758:	40020800 	.word	0x40020800
 800075c:	2000000c 	.word	0x2000000c

08000760 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800076a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076e:	2b00      	cmp	r3, #0
 8000770:	db0b      	blt.n	800078a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	f003 021f 	and.w	r2, r3, #31
 8000778:	4907      	ldr	r1, [pc, #28]	; (8000798 <__NVIC_EnableIRQ+0x38>)
 800077a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800077e:	095b      	lsrs	r3, r3, #5
 8000780:	2001      	movs	r0, #1
 8000782:	fa00 f202 	lsl.w	r2, r0, r2
 8000786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800078a:	bf00      	nop
 800078c:	370c      	adds	r7, #12
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	e000e100 	.word	0xe000e100

0800079c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	db12      	blt.n	80007d4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	f003 021f 	and.w	r2, r3, #31
 80007b4:	490a      	ldr	r1, [pc, #40]	; (80007e0 <__NVIC_DisableIRQ+0x44>)
 80007b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ba:	095b      	lsrs	r3, r3, #5
 80007bc:	2001      	movs	r0, #1
 80007be:	fa00 f202 	lsl.w	r2, r0, r2
 80007c2:	3320      	adds	r3, #32
 80007c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80007c8:	f3bf 8f4f 	dsb	sy
}
 80007cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007ce:	f3bf 8f6f 	isb	sy
}
 80007d2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80007d4:	bf00      	nop
 80007d6:	370c      	adds	r7, #12
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr
 80007e0:	e000e100 	.word	0xe000e100

080007e4 <Sleep>:

/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void Sleep(uint32_t x)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f000 fd93 	bl	8001318 <HAL_Delay>
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
	...

080007fc <EXTI_GetITEnStatus>:
 * @brief  Checks whether the specified IRQn line is enabled or not.
 * @param  IRQn: specifies the IRQn line to check.
 * @return "0" when IRQn is "not enabled" and !0 otherwise
 */
ITStatus EXTI_GetITEnStatus(IRQn_Type IRQn)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	71fb      	strb	r3, [r7, #7]
    return ((NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) == (uint32_t)RESET) ? (RESET) : (SET);
 8000806:	4a0c      	ldr	r2, [pc, #48]	; (8000838 <EXTI_GetITEnStatus+0x3c>)
 8000808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080c:	095b      	lsrs	r3, r3, #5
 800080e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	f003 031f 	and.w	r3, r3, #31
 8000818:	fa22 f303 	lsr.w	r3, r2, r3
 800081c:	f003 0301 	and.w	r3, r3, #1
 8000820:	2b00      	cmp	r3, #0
 8000822:	bf14      	ite	ne
 8000824:	2301      	movne	r3, #1
 8000826:	2300      	moveq	r3, #0
 8000828:	b2db      	uxtb	r3, r3
}
 800082a:	4618      	mov	r0, r3
 800082c:	370c      	adds	r7, #12
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	e000e100 	.word	0xe000e100

0800083c <reset_DWIC>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW IC by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DWIC(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;

    // Enable GPIO used for DW1000 reset as open collector output
    GPIO_InitStruct.Pin = DW_RST_Pin;
 8000842:	2301      	movs	r3, #1
 8000844:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000846:	2311      	movs	r3, #17
 8000848:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	2300      	movs	r3, #0
 800084c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	4619      	mov	r1, r3
 8000852:	480a      	ldr	r0, [pc, #40]	; (800087c <reset_DWIC+0x40>)
 8000854:	f000 ff68 	bl	8001728 <HAL_GPIO_Init>

    // drive the RSTn pin low
    HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_RESET);
 8000858:	2200      	movs	r2, #0
 800085a:	2101      	movs	r1, #1
 800085c:	4807      	ldr	r0, [pc, #28]	; (800087c <reset_DWIC+0x40>)
 800085e:	f001 f8e7 	bl	8001a30 <HAL_GPIO_WritePin>

    Sleep(1);
 8000862:	2001      	movs	r0, #1
 8000864:	f7ff ffbe 	bl	80007e4 <Sleep>

    // put the pin back to output open-drain (not active)
    setup_DWICRSTnIRQ(0);
 8000868:	2000      	movs	r0, #0
 800086a:	f000 f809 	bl	8000880 <setup_DWICRSTnIRQ>
    Sleep(2);
 800086e:	2002      	movs	r0, #2
 8000870:	f7ff ffb8 	bl	80007e4 <Sleep>
}
 8000874:	bf00      	nop
 8000876:	3718      	adds	r7, #24
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40020000 	.word	0x40020000

08000880 <setup_DWICRSTnIRQ>:
 * @brief   setup the DW_RESET pin mode
 *          0 - output Open collector mode
 *          !0 - input mode with connected EXTI0 IRQ
 * */
void setup_DWICRSTnIRQ(int enable)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b088      	sub	sp, #32
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    if (enable)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d015      	beq.n	80008ba <setup_DWICRSTnIRQ+0x3a>
    {
        // Enable GPIO used as DECA RESET for interrupt
        GPIO_InitStruct.Pin = DW_RST_Pin;
 800088e:	2301      	movs	r3, #1
 8000890:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000892:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000896:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	4619      	mov	r1, r3
 80008a2:	4813      	ldr	r0, [pc, #76]	; (80008f0 <setup_DWICRSTnIRQ+0x70>)
 80008a4:	f000 ff40 	bl	8001728 <HAL_GPIO_Init>

        HAL_NVIC_EnableIRQ(EXTI0_IRQn); // pin #0 -> EXTI #0
 80008a8:	2006      	movs	r0, #6
 80008aa:	f000 fe74 	bl	8001596 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2105      	movs	r1, #5
 80008b2:	2006      	movs	r0, #6
 80008b4:	f000 fe53 	bl	800155e <HAL_NVIC_SetPriority>
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
        HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_SET);
    }
}
 80008b8:	e015      	b.n	80008e6 <setup_DWICRSTnIRQ+0x66>
        HAL_NVIC_DisableIRQ(EXTI0_IRQn); // pin #0 -> EXTI #0
 80008ba:	2006      	movs	r0, #6
 80008bc:	f000 fe79 	bl	80015b2 <HAL_NVIC_DisableIRQ>
        GPIO_InitStruct.Pin = DW_RST_Pin;
 80008c0:	2301      	movs	r3, #1
 80008c2:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80008c4:	2311      	movs	r3, #17
 80008c6:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008cc:	2302      	movs	r3, #2
 80008ce:	61bb      	str	r3, [r7, #24]
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 80008d0:	f107 030c 	add.w	r3, r7, #12
 80008d4:	4619      	mov	r1, r3
 80008d6:	4806      	ldr	r0, [pc, #24]	; (80008f0 <setup_DWICRSTnIRQ+0x70>)
 80008d8:	f000 ff26 	bl	8001728 <HAL_GPIO_Init>
        HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_SET);
 80008dc:	2201      	movs	r2, #1
 80008de:	2101      	movs	r1, #1
 80008e0:	4803      	ldr	r0, [pc, #12]	; (80008f0 <setup_DWICRSTnIRQ+0x70>)
 80008e2:	f001 f8a5 	bl	8001a30 <HAL_GPIO_WritePin>
}
 80008e6:	bf00      	nop
 80008e8:	3720      	adds	r7, #32
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40020000 	.word	0x40020000

080008f4 <wakeup_device_with_io>:
 *
 * output -None
 *
 */
void wakeup_device_with_io(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
    SET_WAKEUP_PIN_IO_HIGH;
 80008f8:	2201      	movs	r2, #1
 80008fa:	2110      	movs	r1, #16
 80008fc:	4806      	ldr	r0, [pc, #24]	; (8000918 <wakeup_device_with_io+0x24>)
 80008fe:	f001 f897 	bl	8001a30 <HAL_GPIO_WritePin>
    WAIT_200uSEC;
 8000902:	2001      	movs	r0, #1
 8000904:	f7ff ff6e 	bl	80007e4 <Sleep>
    SET_WAKEUP_PIN_IO_LOW;
 8000908:	2200      	movs	r2, #0
 800090a:	2110      	movs	r1, #16
 800090c:	4802      	ldr	r0, [pc, #8]	; (8000918 <wakeup_device_with_io+0x24>)
 800090e:	f001 f88f 	bl	8001a30 <HAL_GPIO_WritePin>
}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40020800 	.word	0x40020800

0800091c <port_set_dw_ic_spi_slowrate>:
/* @fn      port_set_dw_ic_spi_slowrate
 * @brief   set 4.5MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw_ic_spi_slowrate(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
    hcurrent_active_spi->Init.BaudRatePrescaler=SPI_BAUDRATEPRESCALER_16;
 8000920:	4b05      	ldr	r3, [pc, #20]	; (8000938 <port_set_dw_ic_spi_slowrate+0x1c>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2218      	movs	r2, #24
 8000926:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(hcurrent_active_spi);
 8000928:	4b03      	ldr	r3, [pc, #12]	; (8000938 <port_set_dw_ic_spi_slowrate+0x1c>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4618      	mov	r0, r3
 800092e:	f003 fb11 	bl	8003f54 <HAL_SPI_Init>
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000008 	.word	0x20000008

0800093c <port_set_dw_ic_spi_fastrate>:
/* @fn      port_set_dw_ic_spi_fastrate
 * @brief   set 18MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw_ic_spi_fastrate(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
    hcurrent_active_spi->Init.BaudRatePrescaler=SPI_BAUDRATEPRESCALER_2;
 8000940:	4b05      	ldr	r3, [pc, #20]	; (8000958 <port_set_dw_ic_spi_fastrate+0x1c>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2200      	movs	r2, #0
 8000946:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(hcurrent_active_spi);
 8000948:	4b03      	ldr	r3, [pc, #12]	; (8000958 <port_set_dw_ic_spi_fastrate+0x1c>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4618      	mov	r0, r3
 800094e:	f003 fb01 	bl	8003f54 <HAL_SPI_Init>
}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	20000008 	.word	0x20000008

0800095c <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
    if(SPI_1 == host_spi)
 8000960:	4b06      	ldr	r3, [pc, #24]	; (800097c <port_DisableEXT_IRQ+0x20>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d103      	bne.n	8000970 <port_DisableEXT_IRQ+0x14>
    {
        NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 8000968:	2028      	movs	r0, #40	; 0x28
 800096a:	f7ff ff17 	bl	800079c <__NVIC_DisableIRQ>
    else
    {
        NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn2);
    }

}
 800096e:	e002      	b.n	8000976 <port_DisableEXT_IRQ+0x1a>
        NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn2);
 8000970:	2017      	movs	r0, #23
 8000972:	f7ff ff13 	bl	800079c <__NVIC_DisableIRQ>
}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	2000010d 	.word	0x2000010d

08000980 <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
    if(SPI_1 == host_spi)
 8000984:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <port_EnableEXT_IRQ+0x20>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d103      	bne.n	8000994 <port_EnableEXT_IRQ+0x14>
    {
        NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 800098c:	2028      	movs	r0, #40	; 0x28
 800098e:	f7ff fee7 	bl	8000760 <__NVIC_EnableIRQ>
    }
    else
    {
        NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn2);
    }
}
 8000992:	e002      	b.n	800099a <port_EnableEXT_IRQ+0x1a>
        NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn2);
 8000994:	2017      	movs	r0, #23
 8000996:	f7ff fee3 	bl	8000760 <__NVIC_EnableIRQ>
}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	2000010d 	.word	0x2000010d

080009a4 <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
    uint32_t status;

    if(SPI_1 == host_spi)
 80009aa:	4b0a      	ldr	r3, [pc, #40]	; (80009d4 <port_GetEXT_IRQStatus+0x30>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d105      	bne.n	80009be <port_GetEXT_IRQStatus+0x1a>
    {
        status = EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 80009b2:	2028      	movs	r0, #40	; 0x28
 80009b4:	f7ff ff22 	bl	80007fc <EXTI_GetITEnStatus>
 80009b8:	4603      	mov	r3, r0
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	e004      	b.n	80009c8 <port_GetEXT_IRQStatus+0x24>
    }
    else
    {
        status = EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn2);
 80009be:	2017      	movs	r0, #23
 80009c0:	f7ff ff1c 	bl	80007fc <EXTI_GetITEnStatus>
 80009c4:	4603      	mov	r3, r0
 80009c6:	607b      	str	r3, [r7, #4]
    }
    return status;
 80009c8:	687b      	ldr	r3, [r7, #4]
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	2000010d 	.word	0x2000010d

080009d8 <waitforsysstatus>:
 *               0 - The function will not wait for any bits in the system status register (lower 32 bits).
 *
 * return None
 */
void waitforsysstatus(uint32_t *lo_result, uint32_t *hi_result, uint32_t lo_mask, uint32_t hi_mask)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af00      	add	r7, sp, #0
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	60b9      	str	r1, [r7, #8]
 80009e2:	607a      	str	r2, [r7, #4]
 80009e4:	603b      	str	r3, [r7, #0]
    uint32_t lo_result_tmp = 0;
 80009e6:	2300      	movs	r3, #0
 80009e8:	617b      	str	r3, [r7, #20]
    uint32_t hi_result_tmp = 0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]

    // If a mask has been passed into the function for the system status register (lower 32-bits)
    if (lo_mask)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d014      	beq.n	8000a1e <waitforsysstatus+0x46>
    {
        while (!((lo_result_tmp = dwt_readsysstatuslo()) & (lo_mask)))
 80009f4:	e00a      	b.n	8000a0c <waitforsysstatus+0x34>
        {
            // If a mask value is set for the system status register (higher 32-bits)
            if (hi_mask)
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d007      	beq.n	8000a0c <waitforsysstatus+0x34>
            {
                // If mask value for the system status register (higher 32-bits) is found
                if ((hi_result_tmp = dwt_readsysstatushi()) & hi_mask)
 80009fc:	f005 f902 	bl	8005c04 <dwt_readsysstatushi>
 8000a00:	6138      	str	r0, [r7, #16]
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	4013      	ands	r3, r2
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d115      	bne.n	8000a38 <waitforsysstatus+0x60>
        while (!((lo_result_tmp = dwt_readsysstatuslo()) & (lo_mask)))
 8000a0c:	f005 f8e8 	bl	8005be0 <dwt_readsysstatuslo>
 8000a10:	6178      	str	r0, [r7, #20]
 8000a12:	697a      	ldr	r2, [r7, #20]
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	4013      	ands	r3, r2
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d0ec      	beq.n	80009f6 <waitforsysstatus+0x1e>
 8000a1c:	e00d      	b.n	8000a3a <waitforsysstatus+0x62>
                }
            }
        }
    }
    // if only a mask value for the system status register (higher 32-bits) is set
    else if (hi_mask)
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d00a      	beq.n	8000a3a <waitforsysstatus+0x62>
    {
        while (!((hi_result_tmp = dwt_readsysstatushi()) & (hi_mask))) { };
 8000a24:	bf00      	nop
 8000a26:	f005 f8ed 	bl	8005c04 <dwt_readsysstatushi>
 8000a2a:	6138      	str	r0, [r7, #16]
 8000a2c:	693a      	ldr	r2, [r7, #16]
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	4013      	ands	r3, r2
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d0f7      	beq.n	8000a26 <waitforsysstatus+0x4e>
 8000a36:	e000      	b.n	8000a3a <waitforsysstatus+0x62>
                    break;
 8000a38:	bf00      	nop
    }

    if (lo_result != NULL)
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d002      	beq.n	8000a46 <waitforsysstatus+0x6e>
    {
        *lo_result = lo_result_tmp;
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	697a      	ldr	r2, [r7, #20]
 8000a44:	601a      	str	r2, [r3, #0]
    }

    if (hi_result != NULL)
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d002      	beq.n	8000a52 <waitforsysstatus+0x7a>
    {
        *hi_result = hi_result_tmp;
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	601a      	str	r2, [r3, #0]
    }
}
 8000a52:	bf00      	nop
 8000a54:	3718      	adds	r7, #24
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
	...

08000a5c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08a      	sub	sp, #40	; 0x28
 8000a60:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a62:	f107 0314 	add.w	r3, r7, #20
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]
 8000a6c:	609a      	str	r2, [r3, #8]
 8000a6e:	60da      	str	r2, [r3, #12]
 8000a70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	613b      	str	r3, [r7, #16]
 8000a76:	4b30      	ldr	r3, [pc, #192]	; (8000b38 <MX_GPIO_Init+0xdc>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a2f      	ldr	r2, [pc, #188]	; (8000b38 <MX_GPIO_Init+0xdc>)
 8000a7c:	f043 0304 	orr.w	r3, r3, #4
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b2d      	ldr	r3, [pc, #180]	; (8000b38 <MX_GPIO_Init+0xdc>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0304 	and.w	r3, r3, #4
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	4b29      	ldr	r3, [pc, #164]	; (8000b38 <MX_GPIO_Init+0xdc>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a28      	ldr	r2, [pc, #160]	; (8000b38 <MX_GPIO_Init+0xdc>)
 8000a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b26      	ldr	r3, [pc, #152]	; (8000b38 <MX_GPIO_Init+0xdc>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60bb      	str	r3, [r7, #8]
 8000aae:	4b22      	ldr	r3, [pc, #136]	; (8000b38 <MX_GPIO_Init+0xdc>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a21      	ldr	r2, [pc, #132]	; (8000b38 <MX_GPIO_Init+0xdc>)
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b1f      	ldr	r3, [pc, #124]	; (8000b38 <MX_GPIO_Init+0xdc>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	60bb      	str	r3, [r7, #8]
 8000ac4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	4b1b      	ldr	r3, [pc, #108]	; (8000b38 <MX_GPIO_Init+0xdc>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a1a      	ldr	r2, [pc, #104]	; (8000b38 <MX_GPIO_Init+0xdc>)
 8000ad0:	f043 0302 	orr.w	r3, r3, #2
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b18      	ldr	r3, [pc, #96]	; (8000b38 <MX_GPIO_Init+0xdc>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0302 	and.w	r3, r3, #2
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DW_RST_Pin|DW_IRQ_Pin, GPIO_PIN_RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2103      	movs	r1, #3
 8000ae6:	4815      	ldr	r0, [pc, #84]	; (8000b3c <MX_GPIO_Init+0xe0>)
 8000ae8:	f000 ffa2 	bl	8001a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET);
 8000aec:	2200      	movs	r2, #0
 8000aee:	2110      	movs	r1, #16
 8000af0:	4813      	ldr	r0, [pc, #76]	; (8000b40 <MX_GPIO_Init+0xe4>)
 8000af2:	f000 ff9d 	bl	8001a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DW_RST_Pin|DW_IRQ_Pin;
 8000af6:	2303      	movs	r3, #3
 8000af8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afa:	2301      	movs	r3, #1
 8000afc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b02:	2300      	movs	r3, #0
 8000b04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b06:	f107 0314 	add.w	r3, r7, #20
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	480b      	ldr	r0, [pc, #44]	; (8000b3c <MX_GPIO_Init+0xe0>)
 8000b0e:	f000 fe0b 	bl	8001728 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DW_CS_Pin;
 8000b12:	2310      	movs	r3, #16
 8000b14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b16:	2301      	movs	r3, #1
 8000b18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DW_CS_GPIO_Port, &GPIO_InitStruct);
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	4619      	mov	r1, r3
 8000b28:	4805      	ldr	r0, [pc, #20]	; (8000b40 <MX_GPIO_Init+0xe4>)
 8000b2a:	f000 fdfd 	bl	8001728 <HAL_GPIO_Init>

}
 8000b2e:	bf00      	nop
 8000b30:	3728      	adds	r7, #40	; 0x28
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	40020000 	.word	0x40020000
 8000b40:	40020800 	.word	0x40020800

08000b44 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b48:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <MX_I2C1_Init+0x50>)
 8000b4a:	4a13      	ldr	r2, [pc, #76]	; (8000b98 <MX_I2C1_Init+0x54>)
 8000b4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <MX_I2C1_Init+0x50>)
 8000b50:	4a12      	ldr	r2, [pc, #72]	; (8000b9c <MX_I2C1_Init+0x58>)
 8000b52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b54:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <MX_I2C1_Init+0x50>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <MX_I2C1_Init+0x50>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b60:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <MX_I2C1_Init+0x50>)
 8000b62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b66:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b68:	4b0a      	ldr	r3, [pc, #40]	; (8000b94 <MX_I2C1_Init+0x50>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b6e:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <MX_I2C1_Init+0x50>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b74:	4b07      	ldr	r3, [pc, #28]	; (8000b94 <MX_I2C1_Init+0x50>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b7a:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <MX_I2C1_Init+0x50>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b80:	4804      	ldr	r0, [pc, #16]	; (8000b94 <MX_I2C1_Init+0x50>)
 8000b82:	f000 ff6f 	bl	8001a64 <HAL_I2C_Init>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b8c:	f000 f8e2 	bl	8000d54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	200000b8 	.word	0x200000b8
 8000b98:	40005400 	.word	0x40005400
 8000b9c:	00061a80 	.word	0x00061a80

08000ba0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08a      	sub	sp, #40	; 0x28
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a21      	ldr	r2, [pc, #132]	; (8000c44 <HAL_I2C_MspInit+0xa4>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d13c      	bne.n	8000c3c <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	4b20      	ldr	r3, [pc, #128]	; (8000c48 <HAL_I2C_MspInit+0xa8>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a1f      	ldr	r2, [pc, #124]	; (8000c48 <HAL_I2C_MspInit+0xa8>)
 8000bcc:	f043 0302 	orr.w	r3, r3, #2
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b1d      	ldr	r3, [pc, #116]	; (8000c48 <HAL_I2C_MspInit+0xa8>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0302 	and.w	r3, r3, #2
 8000bda:	613b      	str	r3, [r7, #16]
 8000bdc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bde:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000be2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000be4:	2312      	movs	r3, #18
 8000be6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bec:	2303      	movs	r3, #3
 8000bee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bf0:	2304      	movs	r3, #4
 8000bf2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4814      	ldr	r0, [pc, #80]	; (8000c4c <HAL_I2C_MspInit+0xac>)
 8000bfc:	f000 fd94 	bl	8001728 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c00:	2300      	movs	r3, #0
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <HAL_I2C_MspInit+0xa8>)
 8000c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c08:	4a0f      	ldr	r2, [pc, #60]	; (8000c48 <HAL_I2C_MspInit+0xa8>)
 8000c0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c10:	4b0d      	ldr	r3, [pc, #52]	; (8000c48 <HAL_I2C_MspInit+0xa8>)
 8000c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	2100      	movs	r1, #0
 8000c20:	201f      	movs	r0, #31
 8000c22:	f000 fc9c 	bl	800155e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000c26:	201f      	movs	r0, #31
 8000c28:	f000 fcb5 	bl	8001596 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2100      	movs	r1, #0
 8000c30:	2020      	movs	r0, #32
 8000c32:	f000 fc94 	bl	800155e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000c36:	2020      	movs	r0, #32
 8000c38:	f000 fcad 	bl	8001596 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c3c:	bf00      	nop
 8000c3e:	3728      	adds	r7, #40	; 0x28
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40005400 	.word	0x40005400
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40020400 	.word	0x40020400

08000c50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c54:	f000 faee 	bl	8001234 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c58:	f000 f814 	bl	8000c84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c5c:	f7ff fefe 	bl	8000a5c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c60:	f000 fa44 	bl	80010ec <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000c64:	f7ff ff6e 	bl	8000b44 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000c68:	f000 f8ec 	bl	8000e44 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  port_DisableEXT_IRQ();
 8000c6c:	f7ff fe76 	bl	800095c <port_DisableEXT_IRQ>
  Sleep(1000);
 8000c70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c74:	f7ff fdb6 	bl	80007e4 <Sleep>
  setup_DWICRSTnIRQ(0);
 8000c78:	2000      	movs	r0, #0
 8000c7a:	f7ff fe01 	bl	8000880 <setup_DWICRSTnIRQ>
  simple_tx();
 8000c7e:	f000 f86f 	bl	8000d60 <simple_tx>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c82:	e7fe      	b.n	8000c82 <main+0x32>

08000c84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b094      	sub	sp, #80	; 0x50
 8000c88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c8a:	f107 0320 	add.w	r3, r7, #32
 8000c8e:	2230      	movs	r2, #48	; 0x30
 8000c90:	2100      	movs	r1, #0
 8000c92:	4618      	mov	r0, r3
 8000c94:	f012 f924 	bl	8012ee0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c98:	f107 030c 	add.w	r3, r7, #12
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60bb      	str	r3, [r7, #8]
 8000cac:	4b27      	ldr	r3, [pc, #156]	; (8000d4c <SystemClock_Config+0xc8>)
 8000cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb0:	4a26      	ldr	r2, [pc, #152]	; (8000d4c <SystemClock_Config+0xc8>)
 8000cb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb8:	4b24      	ldr	r3, [pc, #144]	; (8000d4c <SystemClock_Config+0xc8>)
 8000cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc0:	60bb      	str	r3, [r7, #8]
 8000cc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	4b21      	ldr	r3, [pc, #132]	; (8000d50 <SystemClock_Config+0xcc>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a20      	ldr	r2, [pc, #128]	; (8000d50 <SystemClock_Config+0xcc>)
 8000cce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cd2:	6013      	str	r3, [r2, #0]
 8000cd4:	4b1e      	ldr	r3, [pc, #120]	; (8000d50 <SystemClock_Config+0xcc>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cdc:	607b      	str	r3, [r7, #4]
 8000cde:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ce8:	2310      	movs	r3, #16
 8000cea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cec:	2302      	movs	r3, #2
 8000cee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000cf4:	2308      	movs	r3, #8
 8000cf6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000cf8:	2364      	movs	r3, #100	; 0x64
 8000cfa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d00:	2304      	movs	r3, #4
 8000d02:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d04:	f107 0320 	add.w	r3, r7, #32
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f002 fccb 	bl	80036a4 <HAL_RCC_OscConfig>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d14:	f000 f81e 	bl	8000d54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d18:	230f      	movs	r3, #15
 8000d1a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d2e:	f107 030c 	add.w	r3, r7, #12
 8000d32:	2103      	movs	r1, #3
 8000d34:	4618      	mov	r0, r3
 8000d36:	f002 ff2d 	bl	8003b94 <HAL_RCC_ClockConfig>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000d40:	f000 f808 	bl	8000d54 <Error_Handler>
  }
}
 8000d44:	bf00      	nop
 8000d46:	3750      	adds	r7, #80	; 0x50
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40023800 	.word	0x40023800
 8000d50:	40007000 	.word	0x40007000

08000d54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d58:	b672      	cpsid	i
}
 8000d5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d5c:	e7fe      	b.n	8000d5c <Error_Handler+0x8>
	...

08000d60 <simple_tx>:

/**
 * Application entry point.
 */
int simple_tx(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0

    /* Display application name on LCD. */
//    test_run_info((unsigned char *)APP_NAME);

    /* Configure SPI rate, DW3000 supports up to 36 MHz */
    port_set_dw_ic_spi_fastrate();
 8000d66:	f7ff fde9 	bl	800093c <port_set_dw_ic_spi_fastrate>

    /* Reset DW IC */
    reset_DWIC(); /* Target specific drive of RSTn line into DW IC low for a period. */
 8000d6a:	f7ff fd67 	bl	800083c <reset_DWIC>

    Sleep(2); // Time needed for DW3000 to start up (transition from INIT_RC to IDLE_RC, or could wait for SPIRDY event)
 8000d6e:	2002      	movs	r0, #2
 8000d70:	f7ff fd38 	bl	80007e4 <Sleep>

    /* Probe for the correct device driver. */
    dwt_probe((struct dwt_probe_s *)&dw3000_probe_interf);
 8000d74:	482b      	ldr	r0, [pc, #172]	; (8000e24 <simple_tx+0xc4>)
 8000d76:	f004 fe1d 	bl	80059b4 <dwt_probe>

    dev_id = dwt_readdevid();
 8000d7a:	f004 fe67 	bl	8005a4c <dwt_readdevid>
 8000d7e:	6078      	str	r0, [r7, #4]

    while (!dwt_checkidlerc()) /* Need to make sure DW IC is in IDLE_RC before proceeding */ { };
 8000d80:	bf00      	nop
 8000d82:	f004 fee1 	bl	8005b48 <dwt_checkidlerc>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d0fa      	beq.n	8000d82 <simple_tx+0x22>

    if (dwt_initialise(DWT_DW_INIT) == DWT_ERROR)
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	f004 fe6f 	bl	8005a70 <dwt_initialise>
 8000d92:	4603      	mov	r3, r0
 8000d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d98:	d107      	bne.n	8000daa <simple_tx+0x4a>
    {
//        test_run_info((unsigned char *)"INIT FAILED     ");
    	HAL_UART_Transmit(&huart2, "Init Failed!!!", 15, HAL_MAX_DELAY);
 8000d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d9e:	220f      	movs	r2, #15
 8000da0:	4921      	ldr	r1, [pc, #132]	; (8000e28 <simple_tx+0xc8>)
 8000da2:	4822      	ldr	r0, [pc, #136]	; (8000e2c <simple_tx+0xcc>)
 8000da4:	f003 fcdf 	bl	8004766 <HAL_UART_Transmit>
        while (1) { };
 8000da8:	e7fe      	b.n	8000da8 <simple_tx+0x48>
    }

    /* Enabling LEDs here for debug so that for each TX the D1 LED will flash on DW3000 red eval-shield boards. */
    dwt_setleds(DWT_LEDS_ENABLE | DWT_LEDS_INIT_BLINK);
 8000daa:	2003      	movs	r0, #3
 8000dac:	f004 fef4 	bl	8005b98 <dwt_setleds>

    /* Configure DW IC. See NOTE 5 below. */
    /* if the dwt_configure returns DWT_ERROR either the PLL or RX calibration has failed the host should reset the device */
    if (dwt_configure(&config))
 8000db0:	481f      	ldr	r0, [pc, #124]	; (8000e30 <simple_tx+0xd0>)
 8000db2:	f004 fe69 	bl	8005a88 <dwt_configure>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d007      	beq.n	8000dcc <simple_tx+0x6c>
    {
//        test_run_info((unsigned char *)"CONFIG FAILED     ");
        HAL_UART_Transmit(&huart2, "Config Failed!!!", 16, HAL_MAX_DELAY);
 8000dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc0:	2210      	movs	r2, #16
 8000dc2:	491c      	ldr	r1, [pc, #112]	; (8000e34 <simple_tx+0xd4>)
 8000dc4:	4819      	ldr	r0, [pc, #100]	; (8000e2c <simple_tx+0xcc>)
 8000dc6:	f003 fcce 	bl	8004766 <HAL_UART_Transmit>
        while (1) { };
 8000dca:	e7fe      	b.n	8000dca <simple_tx+0x6a>
    }

    /* Configure the TX spectrum parameters (power PG delay and PG Count) */
    dwt_configuretxrf(&txconfig_options);
 8000dcc:	481a      	ldr	r0, [pc, #104]	; (8000e38 <simple_tx+0xd8>)
 8000dce:	f004 fe67 	bl	8005aa0 <dwt_configuretxrf>

    /* Loop forever sending frames periodically. */
    while (1)
    {
        /* Write frame data to DW IC and prepare transmission. See NOTE 3 below.*/
        dwt_writetxdata(FRAME_LENGTH - FCS_LEN, tx_msg, 0); /* Zero offset in TX buffer. */
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	4919      	ldr	r1, [pc, #100]	; (8000e3c <simple_tx+0xdc>)
 8000dd6:	200a      	movs	r0, #10
 8000dd8:	f004 fe6e 	bl	8005ab8 <dwt_writetxdata>

        /* In this example since the length of the transmitted frame does not change,
         * nor the other parameters of the dwt_writetxfctrl function, the
         * dwt_writetxfctrl call could be outside the main while(1) loop.
         */
        dwt_writetxfctrl(FRAME_LENGTH, 0, 0); /* Zero offset in TX buffer, no ranging. */
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2100      	movs	r1, #0
 8000de0:	200c      	movs	r0, #12
 8000de2:	f004 fe77 	bl	8005ad4 <dwt_writetxfctrl>

        /* Start transmission. */
        dwt_starttx(DWT_START_TX_IMMEDIATE);
 8000de6:	2000      	movs	r0, #0
 8000de8:	f004 fe82 	bl	8005af0 <dwt_starttx>
        /* Poll DW IC until TX frame sent event set. See NOTE 4 below.
         * STATUS register is 4 bytes long but, as the event we are looking
         * at is in the first byte of the register, we can use this simplest
         * API function to access it.*/
        waitforsysstatus(NULL, NULL, DWT_INT_TXFRS_BIT_MASK, 0);
 8000dec:	2300      	movs	r3, #0
 8000dee:	2280      	movs	r2, #128	; 0x80
 8000df0:	2100      	movs	r1, #0
 8000df2:	2000      	movs	r0, #0
 8000df4:	f7ff fdf0 	bl	80009d8 <waitforsysstatus>

        /* Clear TX frame sent event. */
        dwt_writesysstatuslo(DWT_INT_TXFRS_BIT_MASK);
 8000df8:	2080      	movs	r0, #128	; 0x80
 8000dfa:	f004 fedf 	bl	8005bbc <dwt_writesysstatuslo>

//        test_run_info((unsigned char *)"TX Frame Sent");
        HAL_UART_Transmit(&huart2, "TX Frame Sent😊", 15, HAL_MAX_DELAY);
 8000dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000e02:	220f      	movs	r2, #15
 8000e04:	490e      	ldr	r1, [pc, #56]	; (8000e40 <simple_tx+0xe0>)
 8000e06:	4809      	ldr	r0, [pc, #36]	; (8000e2c <simple_tx+0xcc>)
 8000e08:	f003 fcad 	bl	8004766 <HAL_UART_Transmit>

        /* Execute a delay between transmissions. */
        Sleep(TX_DELAY_MS);
 8000e0c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e10:	f7ff fce8 	bl	80007e4 <Sleep>

        /* Increment the blink frame sequence number (modulo 256). */
        tx_msg[BLINK_FRAME_SN_IDX]++;
 8000e14:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <simple_tx+0xdc>)
 8000e16:	785b      	ldrb	r3, [r3, #1]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	b2da      	uxtb	r2, r3
 8000e1c:	4b07      	ldr	r3, [pc, #28]	; (8000e3c <simple_tx+0xdc>)
 8000e1e:	705a      	strb	r2, [r3, #1]
        dwt_writetxdata(FRAME_LENGTH - FCS_LEN, tx_msg, 0); /* Zero offset in TX buffer. */
 8000e20:	e7d7      	b.n	8000dd2 <simple_tx+0x72>
 8000e22:	bf00      	nop
 8000e24:	0801311c 	.word	0x0801311c
 8000e28:	080130c0 	.word	0x080130c0
 8000e2c:	2000016c 	.word	0x2000016c
 8000e30:	20000010 	.word	0x20000010
 8000e34:	080130d0 	.word	0x080130d0
 8000e38:	20000000 	.word	0x20000000
 8000e3c:	20000020 	.word	0x20000020
 8000e40:	080130e4 	.word	0x080130e4

08000e44 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000e48:	4b17      	ldr	r3, [pc, #92]	; (8000ea8 <MX_SPI1_Init+0x64>)
 8000e4a:	4a18      	ldr	r2, [pc, #96]	; (8000eac <MX_SPI1_Init+0x68>)
 8000e4c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e4e:	4b16      	ldr	r3, [pc, #88]	; (8000ea8 <MX_SPI1_Init+0x64>)
 8000e50:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e54:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e56:	4b14      	ldr	r3, [pc, #80]	; (8000ea8 <MX_SPI1_Init+0x64>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e5c:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <MX_SPI1_Init+0x64>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e62:	4b11      	ldr	r3, [pc, #68]	; (8000ea8 <MX_SPI1_Init+0x64>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e68:	4b0f      	ldr	r3, [pc, #60]	; (8000ea8 <MX_SPI1_Init+0x64>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <MX_SPI1_Init+0x64>)
 8000e70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e74:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e76:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <MX_SPI1_Init+0x64>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ea8 <MX_SPI1_Init+0x64>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e82:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <MX_SPI1_Init+0x64>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e88:	4b07      	ldr	r3, [pc, #28]	; (8000ea8 <MX_SPI1_Init+0x64>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e8e:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <MX_SPI1_Init+0x64>)
 8000e90:	220a      	movs	r2, #10
 8000e92:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e94:	4804      	ldr	r0, [pc, #16]	; (8000ea8 <MX_SPI1_Init+0x64>)
 8000e96:	f003 f85d 	bl	8003f54 <HAL_SPI_Init>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ea0:	f7ff ff58 	bl	8000d54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	20000110 	.word	0x20000110
 8000eac:	40013000 	.word	0x40013000

08000eb0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08a      	sub	sp, #40	; 0x28
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a1d      	ldr	r2, [pc, #116]	; (8000f44 <HAL_SPI_MspInit+0x94>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d133      	bne.n	8000f3a <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	613b      	str	r3, [r7, #16]
 8000ed6:	4b1c      	ldr	r3, [pc, #112]	; (8000f48 <HAL_SPI_MspInit+0x98>)
 8000ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eda:	4a1b      	ldr	r2, [pc, #108]	; (8000f48 <HAL_SPI_MspInit+0x98>)
 8000edc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ee0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ee2:	4b19      	ldr	r3, [pc, #100]	; (8000f48 <HAL_SPI_MspInit+0x98>)
 8000ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000eea:	613b      	str	r3, [r7, #16]
 8000eec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <HAL_SPI_MspInit+0x98>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	4a14      	ldr	r2, [pc, #80]	; (8000f48 <HAL_SPI_MspInit+0x98>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	6313      	str	r3, [r2, #48]	; 0x30
 8000efe:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <HAL_SPI_MspInit+0x98>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f0a:	23e0      	movs	r3, #224	; 0xe0
 8000f0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f16:	2303      	movs	r3, #3
 8000f18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f1a:	2305      	movs	r3, #5
 8000f1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1e:	f107 0314 	add.w	r3, r7, #20
 8000f22:	4619      	mov	r1, r3
 8000f24:	4809      	ldr	r0, [pc, #36]	; (8000f4c <HAL_SPI_MspInit+0x9c>)
 8000f26:	f000 fbff 	bl	8001728 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	2023      	movs	r0, #35	; 0x23
 8000f30:	f000 fb15 	bl	800155e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000f34:	2023      	movs	r0, #35	; 0x23
 8000f36:	f000 fb2e 	bl	8001596 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000f3a:	bf00      	nop
 8000f3c:	3728      	adds	r7, #40	; 0x28
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40013000 	.word	0x40013000
 8000f48:	40023800 	.word	0x40023800
 8000f4c:	40020000 	.word	0x40020000

08000f50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	607b      	str	r3, [r7, #4]
 8000f5a:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <HAL_MspInit+0x4c>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5e:	4a0f      	ldr	r2, [pc, #60]	; (8000f9c <HAL_MspInit+0x4c>)
 8000f60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f64:	6453      	str	r3, [r2, #68]	; 0x44
 8000f66:	4b0d      	ldr	r3, [pc, #52]	; (8000f9c <HAL_MspInit+0x4c>)
 8000f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	603b      	str	r3, [r7, #0]
 8000f76:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <HAL_MspInit+0x4c>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	4a08      	ldr	r2, [pc, #32]	; (8000f9c <HAL_MspInit+0x4c>)
 8000f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f80:	6413      	str	r3, [r2, #64]	; 0x40
 8000f82:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <HAL_MspInit+0x4c>)
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8a:	603b      	str	r3, [r7, #0]
 8000f8c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f8e:	2007      	movs	r0, #7
 8000f90:	f000 fada 	bl	8001548 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40023800 	.word	0x40023800

08000fa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <NMI_Handler+0x4>
	...

08000fa8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_UART_Transmit(&huart2,"Hard Fault!!!", 15, 100);
 8000fac:	2364      	movs	r3, #100	; 0x64
 8000fae:	220f      	movs	r2, #15
 8000fb0:	4902      	ldr	r1, [pc, #8]	; (8000fbc <HardFault_Handler+0x14>)
 8000fb2:	4803      	ldr	r0, [pc, #12]	; (8000fc0 <HardFault_Handler+0x18>)
 8000fb4:	f003 fbd7 	bl	8004766 <HAL_UART_Transmit>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fb8:	e7fe      	b.n	8000fb8 <HardFault_Handler+0x10>
 8000fba:	bf00      	nop
 8000fbc:	080130f8 	.word	0x080130f8
 8000fc0:	2000016c 	.word	0x2000016c

08000fc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <MemManage_Handler+0x4>

08000fca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fce:	e7fe      	b.n	8000fce <BusFault_Handler+0x4>

08000fd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <UsageFault_Handler+0x4>

08000fd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001004:	f000 f968 	bl	80012d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}

0800100c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001010:	4802      	ldr	r0, [pc, #8]	; (800101c <I2C1_EV_IRQHandler+0x10>)
 8001012:	f000 fe6b 	bl	8001cec <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	200000b8 	.word	0x200000b8

08001020 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001024:	4802      	ldr	r0, [pc, #8]	; (8001030 <I2C1_ER_IRQHandler+0x10>)
 8001026:	f000 ffd2 	bl	8001fce <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	200000b8 	.word	0x200000b8

08001034 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001038:	4802      	ldr	r0, [pc, #8]	; (8001044 <SPI1_IRQHandler+0x10>)
 800103a:	f003 f951 	bl	80042e0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000110 	.word	0x20000110

08001048 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800104c:	4802      	ldr	r0, [pc, #8]	; (8001058 <USART2_IRQHandler+0x10>)
 800104e:	f003 fc1d 	bl	800488c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	2000016c 	.word	0x2000016c

0800105c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001064:	4a14      	ldr	r2, [pc, #80]	; (80010b8 <_sbrk+0x5c>)
 8001066:	4b15      	ldr	r3, [pc, #84]	; (80010bc <_sbrk+0x60>)
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001070:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <_sbrk+0x64>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d102      	bne.n	800107e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001078:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <_sbrk+0x64>)
 800107a:	4a12      	ldr	r2, [pc, #72]	; (80010c4 <_sbrk+0x68>)
 800107c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800107e:	4b10      	ldr	r3, [pc, #64]	; (80010c0 <_sbrk+0x64>)
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4413      	add	r3, r2
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	429a      	cmp	r2, r3
 800108a:	d207      	bcs.n	800109c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800108c:	f011 fef6 	bl	8012e7c <__errno>
 8001090:	4603      	mov	r3, r0
 8001092:	220c      	movs	r2, #12
 8001094:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001096:	f04f 33ff 	mov.w	r3, #4294967295
 800109a:	e009      	b.n	80010b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800109c:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <_sbrk+0x64>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010a2:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <_sbrk+0x64>)
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4413      	add	r3, r2
 80010aa:	4a05      	ldr	r2, [pc, #20]	; (80010c0 <_sbrk+0x64>)
 80010ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ae:	68fb      	ldr	r3, [r7, #12]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3718      	adds	r7, #24
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20020000 	.word	0x20020000
 80010bc:	00000400 	.word	0x00000400
 80010c0:	20000168 	.word	0x20000168
 80010c4:	20000220 	.word	0x20000220

080010c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <SystemInit+0x20>)
 80010ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010d2:	4a05      	ldr	r2, [pc, #20]	; (80010e8 <SystemInit+0x20>)
 80010d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010f0:	4b11      	ldr	r3, [pc, #68]	; (8001138 <MX_USART2_UART_Init+0x4c>)
 80010f2:	4a12      	ldr	r2, [pc, #72]	; (800113c <MX_USART2_UART_Init+0x50>)
 80010f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010f6:	4b10      	ldr	r3, [pc, #64]	; (8001138 <MX_USART2_UART_Init+0x4c>)
 80010f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010fe:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <MX_USART2_UART_Init+0x4c>)
 8001100:	2200      	movs	r2, #0
 8001102:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001104:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <MX_USART2_UART_Init+0x4c>)
 8001106:	2200      	movs	r2, #0
 8001108:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800110a:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <MX_USART2_UART_Init+0x4c>)
 800110c:	2200      	movs	r2, #0
 800110e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001110:	4b09      	ldr	r3, [pc, #36]	; (8001138 <MX_USART2_UART_Init+0x4c>)
 8001112:	220c      	movs	r2, #12
 8001114:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001116:	4b08      	ldr	r3, [pc, #32]	; (8001138 <MX_USART2_UART_Init+0x4c>)
 8001118:	2200      	movs	r2, #0
 800111a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <MX_USART2_UART_Init+0x4c>)
 800111e:	2200      	movs	r2, #0
 8001120:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001122:	4805      	ldr	r0, [pc, #20]	; (8001138 <MX_USART2_UART_Init+0x4c>)
 8001124:	f003 fad2 	bl	80046cc <HAL_UART_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800112e:	f7ff fe11 	bl	8000d54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	2000016c 	.word	0x2000016c
 800113c:	40004400 	.word	0x40004400

08001140 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08a      	sub	sp, #40	; 0x28
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a1d      	ldr	r2, [pc, #116]	; (80011d4 <HAL_UART_MspInit+0x94>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d133      	bne.n	80011ca <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	613b      	str	r3, [r7, #16]
 8001166:	4b1c      	ldr	r3, [pc, #112]	; (80011d8 <HAL_UART_MspInit+0x98>)
 8001168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116a:	4a1b      	ldr	r2, [pc, #108]	; (80011d8 <HAL_UART_MspInit+0x98>)
 800116c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001170:	6413      	str	r3, [r2, #64]	; 0x40
 8001172:	4b19      	ldr	r3, [pc, #100]	; (80011d8 <HAL_UART_MspInit+0x98>)
 8001174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117a:	613b      	str	r3, [r7, #16]
 800117c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <HAL_UART_MspInit+0x98>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	4a14      	ldr	r2, [pc, #80]	; (80011d8 <HAL_UART_MspInit+0x98>)
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	6313      	str	r3, [r2, #48]	; 0x30
 800118e:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <HAL_UART_MspInit+0x98>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800119a:	230c      	movs	r3, #12
 800119c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119e:	2302      	movs	r3, #2
 80011a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a6:	2303      	movs	r3, #3
 80011a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011aa:	2307      	movs	r3, #7
 80011ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ae:	f107 0314 	add.w	r3, r7, #20
 80011b2:	4619      	mov	r1, r3
 80011b4:	4809      	ldr	r0, [pc, #36]	; (80011dc <HAL_UART_MspInit+0x9c>)
 80011b6:	f000 fab7 	bl	8001728 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2100      	movs	r1, #0
 80011be:	2026      	movs	r0, #38	; 0x26
 80011c0:	f000 f9cd 	bl	800155e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011c4:	2026      	movs	r0, #38	; 0x26
 80011c6:	f000 f9e6 	bl	8001596 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80011ca:	bf00      	nop
 80011cc:	3728      	adds	r7, #40	; 0x28
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40004400 	.word	0x40004400
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40020000 	.word	0x40020000

080011e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80011e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001218 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011e4:	480d      	ldr	r0, [pc, #52]	; (800121c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011e6:	490e      	ldr	r1, [pc, #56]	; (8001220 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011e8:	4a0e      	ldr	r2, [pc, #56]	; (8001224 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011ec:	e002      	b.n	80011f4 <LoopCopyDataInit>

080011ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011f2:	3304      	adds	r3, #4

080011f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011f8:	d3f9      	bcc.n	80011ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011fa:	4a0b      	ldr	r2, [pc, #44]	; (8001228 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011fc:	4c0b      	ldr	r4, [pc, #44]	; (800122c <LoopFillZerobss+0x26>)
  movs r3, #0
 80011fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001200:	e001      	b.n	8001206 <LoopFillZerobss>

08001202 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001202:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001204:	3204      	adds	r2, #4

08001206 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001206:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001208:	d3fb      	bcc.n	8001202 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800120a:	f7ff ff5d 	bl	80010c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800120e:	f011 fe3b 	bl	8012e88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001212:	f7ff fd1d 	bl	8000c50 <main>
  bx  lr    
 8001216:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001218:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800121c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001220:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8001224:	080135b0 	.word	0x080135b0
  ldr r2, =_sbss
 8001228:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 800122c:	2000021c 	.word	0x2000021c

08001230 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001230:	e7fe      	b.n	8001230 <ADC_IRQHandler>
	...

08001234 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001238:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <HAL_Init+0x40>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a0d      	ldr	r2, [pc, #52]	; (8001274 <HAL_Init+0x40>)
 800123e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001242:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001244:	4b0b      	ldr	r3, [pc, #44]	; (8001274 <HAL_Init+0x40>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a0a      	ldr	r2, [pc, #40]	; (8001274 <HAL_Init+0x40>)
 800124a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800124e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001250:	4b08      	ldr	r3, [pc, #32]	; (8001274 <HAL_Init+0x40>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a07      	ldr	r2, [pc, #28]	; (8001274 <HAL_Init+0x40>)
 8001256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800125a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800125c:	2003      	movs	r0, #3
 800125e:	f000 f973 	bl	8001548 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001262:	2000      	movs	r0, #0
 8001264:	f000 f808 	bl	8001278 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001268:	f7ff fe72 	bl	8000f50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40023c00 	.word	0x40023c00

08001278 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001280:	4b12      	ldr	r3, [pc, #72]	; (80012cc <HAL_InitTick+0x54>)
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <HAL_InitTick+0x58>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	4619      	mov	r1, r3
 800128a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800128e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001292:	fbb2 f3f3 	udiv	r3, r2, r3
 8001296:	4618      	mov	r0, r3
 8001298:	f000 f999 	bl	80015ce <HAL_SYSTICK_Config>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e00e      	b.n	80012c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2b0f      	cmp	r3, #15
 80012aa:	d80a      	bhi.n	80012c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012ac:	2200      	movs	r2, #0
 80012ae:	6879      	ldr	r1, [r7, #4]
 80012b0:	f04f 30ff 	mov.w	r0, #4294967295
 80012b4:	f000 f953 	bl	800155e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012b8:	4a06      	ldr	r2, [pc, #24]	; (80012d4 <HAL_InitTick+0x5c>)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012be:	2300      	movs	r3, #0
 80012c0:	e000      	b.n	80012c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	2000002c 	.word	0x2000002c
 80012d0:	20000034 	.word	0x20000034
 80012d4:	20000030 	.word	0x20000030

080012d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012dc:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <HAL_IncTick+0x20>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	461a      	mov	r2, r3
 80012e2:	4b06      	ldr	r3, [pc, #24]	; (80012fc <HAL_IncTick+0x24>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4413      	add	r3, r2
 80012e8:	4a04      	ldr	r2, [pc, #16]	; (80012fc <HAL_IncTick+0x24>)
 80012ea:	6013      	str	r3, [r2, #0]
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	20000034 	.word	0x20000034
 80012fc:	200001b0 	.word	0x200001b0

08001300 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  return uwTick;
 8001304:	4b03      	ldr	r3, [pc, #12]	; (8001314 <HAL_GetTick+0x14>)
 8001306:	681b      	ldr	r3, [r3, #0]
}
 8001308:	4618      	mov	r0, r3
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	200001b0 	.word	0x200001b0

08001318 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001320:	f7ff ffee 	bl	8001300 <HAL_GetTick>
 8001324:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001330:	d005      	beq.n	800133e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001332:	4b0a      	ldr	r3, [pc, #40]	; (800135c <HAL_Delay+0x44>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	461a      	mov	r2, r3
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	4413      	add	r3, r2
 800133c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800133e:	bf00      	nop
 8001340:	f7ff ffde 	bl	8001300 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	68fa      	ldr	r2, [r7, #12]
 800134c:	429a      	cmp	r2, r3
 800134e:	d8f7      	bhi.n	8001340 <HAL_Delay+0x28>
  {
  }
}
 8001350:	bf00      	nop
 8001352:	bf00      	nop
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20000034 	.word	0x20000034

08001360 <__NVIC_SetPriorityGrouping>:
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f003 0307 	and.w	r3, r3, #7
 800136e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001370:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001376:	68ba      	ldr	r2, [r7, #8]
 8001378:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800137c:	4013      	ands	r3, r2
 800137e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001388:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800138c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001390:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001392:	4a04      	ldr	r2, [pc, #16]	; (80013a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	60d3      	str	r3, [r2, #12]
}
 8001398:	bf00      	nop
 800139a:	3714      	adds	r7, #20
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <__NVIC_GetPriorityGrouping>:
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013ac:	4b04      	ldr	r3, [pc, #16]	; (80013c0 <__NVIC_GetPriorityGrouping+0x18>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	0a1b      	lsrs	r3, r3, #8
 80013b2:	f003 0307 	and.w	r3, r3, #7
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <__NVIC_EnableIRQ>:
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	db0b      	blt.n	80013ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	f003 021f 	and.w	r2, r3, #31
 80013dc:	4907      	ldr	r1, [pc, #28]	; (80013fc <__NVIC_EnableIRQ+0x38>)
 80013de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e2:	095b      	lsrs	r3, r3, #5
 80013e4:	2001      	movs	r0, #1
 80013e6:	fa00 f202 	lsl.w	r2, r0, r2
 80013ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	e000e100 	.word	0xe000e100

08001400 <__NVIC_DisableIRQ>:
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800140a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140e:	2b00      	cmp	r3, #0
 8001410:	db12      	blt.n	8001438 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	f003 021f 	and.w	r2, r3, #31
 8001418:	490a      	ldr	r1, [pc, #40]	; (8001444 <__NVIC_DisableIRQ+0x44>)
 800141a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141e:	095b      	lsrs	r3, r3, #5
 8001420:	2001      	movs	r0, #1
 8001422:	fa00 f202 	lsl.w	r2, r0, r2
 8001426:	3320      	adds	r3, #32
 8001428:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800142c:	f3bf 8f4f 	dsb	sy
}
 8001430:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001432:	f3bf 8f6f 	isb	sy
}
 8001436:	bf00      	nop
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	e000e100 	.word	0xe000e100

08001448 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	6039      	str	r1, [r7, #0]
 8001452:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001458:	2b00      	cmp	r3, #0
 800145a:	db0a      	blt.n	8001472 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	b2da      	uxtb	r2, r3
 8001460:	490c      	ldr	r1, [pc, #48]	; (8001494 <__NVIC_SetPriority+0x4c>)
 8001462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001466:	0112      	lsls	r2, r2, #4
 8001468:	b2d2      	uxtb	r2, r2
 800146a:	440b      	add	r3, r1
 800146c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001470:	e00a      	b.n	8001488 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	b2da      	uxtb	r2, r3
 8001476:	4908      	ldr	r1, [pc, #32]	; (8001498 <__NVIC_SetPriority+0x50>)
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	f003 030f 	and.w	r3, r3, #15
 800147e:	3b04      	subs	r3, #4
 8001480:	0112      	lsls	r2, r2, #4
 8001482:	b2d2      	uxtb	r2, r2
 8001484:	440b      	add	r3, r1
 8001486:	761a      	strb	r2, [r3, #24]
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	e000e100 	.word	0xe000e100
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800149c:	b480      	push	{r7}
 800149e:	b089      	sub	sp, #36	; 0x24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	f1c3 0307 	rsb	r3, r3, #7
 80014b6:	2b04      	cmp	r3, #4
 80014b8:	bf28      	it	cs
 80014ba:	2304      	movcs	r3, #4
 80014bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	3304      	adds	r3, #4
 80014c2:	2b06      	cmp	r3, #6
 80014c4:	d902      	bls.n	80014cc <NVIC_EncodePriority+0x30>
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	3b03      	subs	r3, #3
 80014ca:	e000      	b.n	80014ce <NVIC_EncodePriority+0x32>
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d0:	f04f 32ff 	mov.w	r2, #4294967295
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	43da      	mvns	r2, r3
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	401a      	ands	r2, r3
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014e4:	f04f 31ff 	mov.w	r1, #4294967295
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	fa01 f303 	lsl.w	r3, r1, r3
 80014ee:	43d9      	mvns	r1, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f4:	4313      	orrs	r3, r2
         );
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3724      	adds	r7, #36	; 0x24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
	...

08001504 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3b01      	subs	r3, #1
 8001510:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001514:	d301      	bcc.n	800151a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001516:	2301      	movs	r3, #1
 8001518:	e00f      	b.n	800153a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800151a:	4a0a      	ldr	r2, [pc, #40]	; (8001544 <SysTick_Config+0x40>)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3b01      	subs	r3, #1
 8001520:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001522:	210f      	movs	r1, #15
 8001524:	f04f 30ff 	mov.w	r0, #4294967295
 8001528:	f7ff ff8e 	bl	8001448 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800152c:	4b05      	ldr	r3, [pc, #20]	; (8001544 <SysTick_Config+0x40>)
 800152e:	2200      	movs	r2, #0
 8001530:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001532:	4b04      	ldr	r3, [pc, #16]	; (8001544 <SysTick_Config+0x40>)
 8001534:	2207      	movs	r2, #7
 8001536:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	e000e010 	.word	0xe000e010

08001548 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7ff ff05 	bl	8001360 <__NVIC_SetPriorityGrouping>
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800155e:	b580      	push	{r7, lr}
 8001560:	b086      	sub	sp, #24
 8001562:	af00      	add	r7, sp, #0
 8001564:	4603      	mov	r3, r0
 8001566:	60b9      	str	r1, [r7, #8]
 8001568:	607a      	str	r2, [r7, #4]
 800156a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001570:	f7ff ff1a 	bl	80013a8 <__NVIC_GetPriorityGrouping>
 8001574:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	68b9      	ldr	r1, [r7, #8]
 800157a:	6978      	ldr	r0, [r7, #20]
 800157c:	f7ff ff8e 	bl	800149c <NVIC_EncodePriority>
 8001580:	4602      	mov	r2, r0
 8001582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001586:	4611      	mov	r1, r2
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff ff5d 	bl	8001448 <__NVIC_SetPriority>
}
 800158e:	bf00      	nop
 8001590:	3718      	adds	r7, #24
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b082      	sub	sp, #8
 800159a:	af00      	add	r7, sp, #0
 800159c:	4603      	mov	r3, r0
 800159e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff ff0d 	bl	80013c4 <__NVIC_EnableIRQ>
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b082      	sub	sp, #8
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	4603      	mov	r3, r0
 80015ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80015bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff ff1d 	bl	8001400 <__NVIC_DisableIRQ>
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b082      	sub	sp, #8
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7ff ff94 	bl	8001504 <SysTick_Config>
 80015dc:	4603      	mov	r3, r0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b084      	sub	sp, #16
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80015f4:	f7ff fe84 	bl	8001300 <HAL_GetTick>
 80015f8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d008      	beq.n	8001618 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2280      	movs	r2, #128	; 0x80
 800160a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2200      	movs	r2, #0
 8001610:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e052      	b.n	80016be <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f022 0216 	bic.w	r2, r2, #22
 8001626:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	695a      	ldr	r2, [r3, #20]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001636:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163c:	2b00      	cmp	r3, #0
 800163e:	d103      	bne.n	8001648 <HAL_DMA_Abort+0x62>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001644:	2b00      	cmp	r3, #0
 8001646:	d007      	beq.n	8001658 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f022 0208 	bic.w	r2, r2, #8
 8001656:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f022 0201 	bic.w	r2, r2, #1
 8001666:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001668:	e013      	b.n	8001692 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800166a:	f7ff fe49 	bl	8001300 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b05      	cmp	r3, #5
 8001676:	d90c      	bls.n	8001692 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2220      	movs	r2, #32
 800167c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2203      	movs	r2, #3
 8001682:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e015      	b.n	80016be <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	2b00      	cmp	r3, #0
 800169e:	d1e4      	bne.n	800166a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a4:	223f      	movs	r2, #63	; 0x3f
 80016a6:	409a      	lsls	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2201      	movs	r2, #1
 80016b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d004      	beq.n	80016e4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2280      	movs	r2, #128	; 0x80
 80016de:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e00c      	b.n	80016fe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2205      	movs	r2, #5
 80016e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f022 0201 	bic.w	r2, r2, #1
 80016fa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800170a:	b480      	push	{r7}
 800170c:	b083      	sub	sp, #12
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001718:	b2db      	uxtb	r3, r3
}
 800171a:	4618      	mov	r0, r3
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
	...

08001728 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001728:	b480      	push	{r7}
 800172a:	b089      	sub	sp, #36	; 0x24
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001732:	2300      	movs	r3, #0
 8001734:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001736:	2300      	movs	r3, #0
 8001738:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800173a:	2300      	movs	r3, #0
 800173c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800173e:	2300      	movs	r3, #0
 8001740:	61fb      	str	r3, [r7, #28]
 8001742:	e159      	b.n	80019f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001744:	2201      	movs	r2, #1
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	697a      	ldr	r2, [r7, #20]
 8001754:	4013      	ands	r3, r2
 8001756:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	429a      	cmp	r2, r3
 800175e:	f040 8148 	bne.w	80019f2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f003 0303 	and.w	r3, r3, #3
 800176a:	2b01      	cmp	r3, #1
 800176c:	d005      	beq.n	800177a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001776:	2b02      	cmp	r3, #2
 8001778:	d130      	bne.n	80017dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	2203      	movs	r2, #3
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	43db      	mvns	r3, r3
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4013      	ands	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	68da      	ldr	r2, [r3, #12]
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017b0:	2201      	movs	r2, #1
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	43db      	mvns	r3, r3
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	4013      	ands	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	091b      	lsrs	r3, r3, #4
 80017c6:	f003 0201 	and.w	r2, r3, #1
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f003 0303 	and.w	r3, r3, #3
 80017e4:	2b03      	cmp	r3, #3
 80017e6:	d017      	beq.n	8001818 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	2203      	movs	r2, #3
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	43db      	mvns	r3, r3
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	4013      	ands	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4313      	orrs	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f003 0303 	and.w	r3, r3, #3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d123      	bne.n	800186c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	08da      	lsrs	r2, r3, #3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3208      	adds	r2, #8
 800182c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001830:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	f003 0307 	and.w	r3, r3, #7
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	220f      	movs	r2, #15
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	4013      	ands	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	691a      	ldr	r2, [r3, #16]
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4313      	orrs	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	08da      	lsrs	r2, r3, #3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	3208      	adds	r2, #8
 8001866:	69b9      	ldr	r1, [r7, #24]
 8001868:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	2203      	movs	r2, #3
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	43db      	mvns	r3, r3
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4013      	ands	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f003 0203 	and.w	r2, r3, #3
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	4313      	orrs	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f000 80a2 	beq.w	80019f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	4b57      	ldr	r3, [pc, #348]	; (8001a10 <HAL_GPIO_Init+0x2e8>)
 80018b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b6:	4a56      	ldr	r2, [pc, #344]	; (8001a10 <HAL_GPIO_Init+0x2e8>)
 80018b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018bc:	6453      	str	r3, [r2, #68]	; 0x44
 80018be:	4b54      	ldr	r3, [pc, #336]	; (8001a10 <HAL_GPIO_Init+0x2e8>)
 80018c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018ca:	4a52      	ldr	r2, [pc, #328]	; (8001a14 <HAL_GPIO_Init+0x2ec>)
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	089b      	lsrs	r3, r3, #2
 80018d0:	3302      	adds	r3, #2
 80018d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	f003 0303 	and.w	r3, r3, #3
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	220f      	movs	r2, #15
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	43db      	mvns	r3, r3
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	4013      	ands	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a49      	ldr	r2, [pc, #292]	; (8001a18 <HAL_GPIO_Init+0x2f0>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d019      	beq.n	800192a <HAL_GPIO_Init+0x202>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a48      	ldr	r2, [pc, #288]	; (8001a1c <HAL_GPIO_Init+0x2f4>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d013      	beq.n	8001926 <HAL_GPIO_Init+0x1fe>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a47      	ldr	r2, [pc, #284]	; (8001a20 <HAL_GPIO_Init+0x2f8>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d00d      	beq.n	8001922 <HAL_GPIO_Init+0x1fa>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a46      	ldr	r2, [pc, #280]	; (8001a24 <HAL_GPIO_Init+0x2fc>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d007      	beq.n	800191e <HAL_GPIO_Init+0x1f6>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a45      	ldr	r2, [pc, #276]	; (8001a28 <HAL_GPIO_Init+0x300>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d101      	bne.n	800191a <HAL_GPIO_Init+0x1f2>
 8001916:	2304      	movs	r3, #4
 8001918:	e008      	b.n	800192c <HAL_GPIO_Init+0x204>
 800191a:	2307      	movs	r3, #7
 800191c:	e006      	b.n	800192c <HAL_GPIO_Init+0x204>
 800191e:	2303      	movs	r3, #3
 8001920:	e004      	b.n	800192c <HAL_GPIO_Init+0x204>
 8001922:	2302      	movs	r3, #2
 8001924:	e002      	b.n	800192c <HAL_GPIO_Init+0x204>
 8001926:	2301      	movs	r3, #1
 8001928:	e000      	b.n	800192c <HAL_GPIO_Init+0x204>
 800192a:	2300      	movs	r3, #0
 800192c:	69fa      	ldr	r2, [r7, #28]
 800192e:	f002 0203 	and.w	r2, r2, #3
 8001932:	0092      	lsls	r2, r2, #2
 8001934:	4093      	lsls	r3, r2
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	4313      	orrs	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800193c:	4935      	ldr	r1, [pc, #212]	; (8001a14 <HAL_GPIO_Init+0x2ec>)
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	089b      	lsrs	r3, r3, #2
 8001942:	3302      	adds	r3, #2
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800194a:	4b38      	ldr	r3, [pc, #224]	; (8001a2c <HAL_GPIO_Init+0x304>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	43db      	mvns	r3, r3
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	4013      	ands	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d003      	beq.n	800196e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	4313      	orrs	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800196e:	4a2f      	ldr	r2, [pc, #188]	; (8001a2c <HAL_GPIO_Init+0x304>)
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001974:	4b2d      	ldr	r3, [pc, #180]	; (8001a2c <HAL_GPIO_Init+0x304>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	43db      	mvns	r3, r3
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	4013      	ands	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d003      	beq.n	8001998 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	4313      	orrs	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001998:	4a24      	ldr	r2, [pc, #144]	; (8001a2c <HAL_GPIO_Init+0x304>)
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800199e:	4b23      	ldr	r3, [pc, #140]	; (8001a2c <HAL_GPIO_Init+0x304>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	43db      	mvns	r3, r3
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	4013      	ands	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d003      	beq.n	80019c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	4313      	orrs	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019c2:	4a1a      	ldr	r2, [pc, #104]	; (8001a2c <HAL_GPIO_Init+0x304>)
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019c8:	4b18      	ldr	r3, [pc, #96]	; (8001a2c <HAL_GPIO_Init+0x304>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	43db      	mvns	r3, r3
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	4013      	ands	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d003      	beq.n	80019ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019ec:	4a0f      	ldr	r2, [pc, #60]	; (8001a2c <HAL_GPIO_Init+0x304>)
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	3301      	adds	r3, #1
 80019f6:	61fb      	str	r3, [r7, #28]
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	2b0f      	cmp	r3, #15
 80019fc:	f67f aea2 	bls.w	8001744 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a00:	bf00      	nop
 8001a02:	bf00      	nop
 8001a04:	3724      	adds	r7, #36	; 0x24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	40023800 	.word	0x40023800
 8001a14:	40013800 	.word	0x40013800
 8001a18:	40020000 	.word	0x40020000
 8001a1c:	40020400 	.word	0x40020400
 8001a20:	40020800 	.word	0x40020800
 8001a24:	40020c00 	.word	0x40020c00
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	40013c00 	.word	0x40013c00

08001a30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	460b      	mov	r3, r1
 8001a3a:	807b      	strh	r3, [r7, #2]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a40:	787b      	ldrb	r3, [r7, #1]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d003      	beq.n	8001a4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a46:	887a      	ldrh	r2, [r7, #2]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a4c:	e003      	b.n	8001a56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a4e:	887b      	ldrh	r3, [r7, #2]
 8001a50:	041a      	lsls	r2, r3, #16
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	619a      	str	r2, [r3, #24]
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
	...

08001a64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d101      	bne.n	8001a76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e12b      	b.n	8001cce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d106      	bne.n	8001a90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7ff f888 	bl	8000ba0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2224      	movs	r2, #36	; 0x24
 8001a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f022 0201 	bic.w	r2, r2, #1
 8001aa6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ab6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ac6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ac8:	f002 fa1c 	bl	8003f04 <HAL_RCC_GetPCLK1Freq>
 8001acc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	4a81      	ldr	r2, [pc, #516]	; (8001cd8 <HAL_I2C_Init+0x274>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d807      	bhi.n	8001ae8 <HAL_I2C_Init+0x84>
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	4a80      	ldr	r2, [pc, #512]	; (8001cdc <HAL_I2C_Init+0x278>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	bf94      	ite	ls
 8001ae0:	2301      	movls	r3, #1
 8001ae2:	2300      	movhi	r3, #0
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	e006      	b.n	8001af6 <HAL_I2C_Init+0x92>
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	4a7d      	ldr	r2, [pc, #500]	; (8001ce0 <HAL_I2C_Init+0x27c>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	bf94      	ite	ls
 8001af0:	2301      	movls	r3, #1
 8001af2:	2300      	movhi	r3, #0
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e0e7      	b.n	8001cce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	4a78      	ldr	r2, [pc, #480]	; (8001ce4 <HAL_I2C_Init+0x280>)
 8001b02:	fba2 2303 	umull	r2, r3, r2, r3
 8001b06:	0c9b      	lsrs	r3, r3, #18
 8001b08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	68ba      	ldr	r2, [r7, #8]
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	6a1b      	ldr	r3, [r3, #32]
 8001b24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	4a6a      	ldr	r2, [pc, #424]	; (8001cd8 <HAL_I2C_Init+0x274>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d802      	bhi.n	8001b38 <HAL_I2C_Init+0xd4>
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	3301      	adds	r3, #1
 8001b36:	e009      	b.n	8001b4c <HAL_I2C_Init+0xe8>
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b3e:	fb02 f303 	mul.w	r3, r2, r3
 8001b42:	4a69      	ldr	r2, [pc, #420]	; (8001ce8 <HAL_I2C_Init+0x284>)
 8001b44:	fba2 2303 	umull	r2, r3, r2, r3
 8001b48:	099b      	lsrs	r3, r3, #6
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	6812      	ldr	r2, [r2, #0]
 8001b50:	430b      	orrs	r3, r1
 8001b52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	69db      	ldr	r3, [r3, #28]
 8001b5a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b5e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	495c      	ldr	r1, [pc, #368]	; (8001cd8 <HAL_I2C_Init+0x274>)
 8001b68:	428b      	cmp	r3, r1
 8001b6a:	d819      	bhi.n	8001ba0 <HAL_I2C_Init+0x13c>
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	1e59      	subs	r1, r3, #1
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b7a:	1c59      	adds	r1, r3, #1
 8001b7c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001b80:	400b      	ands	r3, r1
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d00a      	beq.n	8001b9c <HAL_I2C_Init+0x138>
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	1e59      	subs	r1, r3, #1
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b94:	3301      	adds	r3, #1
 8001b96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b9a:	e051      	b.n	8001c40 <HAL_I2C_Init+0x1dc>
 8001b9c:	2304      	movs	r3, #4
 8001b9e:	e04f      	b.n	8001c40 <HAL_I2C_Init+0x1dc>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d111      	bne.n	8001bcc <HAL_I2C_Init+0x168>
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	1e58      	subs	r0, r3, #1
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6859      	ldr	r1, [r3, #4]
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	440b      	add	r3, r1
 8001bb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bba:	3301      	adds	r3, #1
 8001bbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	bf0c      	ite	eq
 8001bc4:	2301      	moveq	r3, #1
 8001bc6:	2300      	movne	r3, #0
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	e012      	b.n	8001bf2 <HAL_I2C_Init+0x18e>
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	1e58      	subs	r0, r3, #1
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6859      	ldr	r1, [r3, #4]
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	440b      	add	r3, r1
 8001bda:	0099      	lsls	r1, r3, #2
 8001bdc:	440b      	add	r3, r1
 8001bde:	fbb0 f3f3 	udiv	r3, r0, r3
 8001be2:	3301      	adds	r3, #1
 8001be4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	bf0c      	ite	eq
 8001bec:	2301      	moveq	r3, #1
 8001bee:	2300      	movne	r3, #0
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <HAL_I2C_Init+0x196>
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e022      	b.n	8001c40 <HAL_I2C_Init+0x1dc>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d10e      	bne.n	8001c20 <HAL_I2C_Init+0x1bc>
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	1e58      	subs	r0, r3, #1
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6859      	ldr	r1, [r3, #4]
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	440b      	add	r3, r1
 8001c10:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c14:	3301      	adds	r3, #1
 8001c16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c1e:	e00f      	b.n	8001c40 <HAL_I2C_Init+0x1dc>
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	1e58      	subs	r0, r3, #1
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6859      	ldr	r1, [r3, #4]
 8001c28:	460b      	mov	r3, r1
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	440b      	add	r3, r1
 8001c2e:	0099      	lsls	r1, r3, #2
 8001c30:	440b      	add	r3, r1
 8001c32:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c36:	3301      	adds	r3, #1
 8001c38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c40:	6879      	ldr	r1, [r7, #4]
 8001c42:	6809      	ldr	r1, [r1, #0]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	69da      	ldr	r2, [r3, #28]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a1b      	ldr	r3, [r3, #32]
 8001c5a:	431a      	orrs	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	430a      	orrs	r2, r1
 8001c62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c6e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	6911      	ldr	r1, [r2, #16]
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	68d2      	ldr	r2, [r2, #12]
 8001c7a:	4311      	orrs	r1, r2
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	6812      	ldr	r2, [r2, #0]
 8001c80:	430b      	orrs	r3, r1
 8001c82:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	695a      	ldr	r2, [r3, #20]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	431a      	orrs	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f042 0201 	orr.w	r2, r2, #1
 8001cae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2220      	movs	r2, #32
 8001cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	000186a0 	.word	0x000186a0
 8001cdc:	001e847f 	.word	0x001e847f
 8001ce0:	003d08ff 	.word	0x003d08ff
 8001ce4:	431bde83 	.word	0x431bde83
 8001ce8:	10624dd3 	.word	0x10624dd3

08001cec <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b088      	sub	sp, #32
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d04:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d0c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d14:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001d16:	7bfb      	ldrb	r3, [r7, #15]
 8001d18:	2b10      	cmp	r3, #16
 8001d1a:	d003      	beq.n	8001d24 <HAL_I2C_EV_IRQHandler+0x38>
 8001d1c:	7bfb      	ldrb	r3, [r7, #15]
 8001d1e:	2b40      	cmp	r3, #64	; 0x40
 8001d20:	f040 80c1 	bne.w	8001ea6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	699b      	ldr	r3, [r3, #24]
 8001d2a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d10d      	bne.n	8001d5a <HAL_I2C_EV_IRQHandler+0x6e>
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001d44:	d003      	beq.n	8001d4e <HAL_I2C_EV_IRQHandler+0x62>
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001d4c:	d101      	bne.n	8001d52 <HAL_I2C_EV_IRQHandler+0x66>
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e000      	b.n	8001d54 <HAL_I2C_EV_IRQHandler+0x68>
 8001d52:	2300      	movs	r3, #0
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	f000 8132 	beq.w	8001fbe <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d00c      	beq.n	8001d7e <HAL_I2C_EV_IRQHandler+0x92>
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	0a5b      	lsrs	r3, r3, #9
 8001d68:	f003 0301 	and.w	r3, r3, #1
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d006      	beq.n	8001d7e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f001 fc7b 	bl	800366c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 fd83 	bl	8002882 <I2C_Master_SB>
 8001d7c:	e092      	b.n	8001ea4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	08db      	lsrs	r3, r3, #3
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d009      	beq.n	8001d9e <HAL_I2C_EV_IRQHandler+0xb2>
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	0a5b      	lsrs	r3, r3, #9
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 fdf9 	bl	800298e <I2C_Master_ADD10>
 8001d9c:	e082      	b.n	8001ea4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	085b      	lsrs	r3, r3, #1
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d009      	beq.n	8001dbe <HAL_I2C_EV_IRQHandler+0xd2>
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	0a5b      	lsrs	r3, r3, #9
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 fe13 	bl	80029e2 <I2C_Master_ADDR>
 8001dbc:	e072      	b.n	8001ea4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	089b      	lsrs	r3, r3, #2
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d03b      	beq.n	8001e42 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001dd8:	f000 80f3 	beq.w	8001fc2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	09db      	lsrs	r3, r3, #7
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d00f      	beq.n	8001e08 <HAL_I2C_EV_IRQHandler+0x11c>
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	0a9b      	lsrs	r3, r3, #10
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d009      	beq.n	8001e08 <HAL_I2C_EV_IRQHandler+0x11c>
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	089b      	lsrs	r3, r3, #2
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d103      	bne.n	8001e08 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f000 f9f3 	bl	80021ec <I2C_MasterTransmit_TXE>
 8001e06:	e04d      	b.n	8001ea4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	089b      	lsrs	r3, r3, #2
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f000 80d6 	beq.w	8001fc2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	0a5b      	lsrs	r3, r3, #9
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f000 80cf 	beq.w	8001fc2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001e24:	7bbb      	ldrb	r3, [r7, #14]
 8001e26:	2b21      	cmp	r3, #33	; 0x21
 8001e28:	d103      	bne.n	8001e32 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 fa7a 	bl	8002324 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e30:	e0c7      	b.n	8001fc2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001e32:	7bfb      	ldrb	r3, [r7, #15]
 8001e34:	2b40      	cmp	r3, #64	; 0x40
 8001e36:	f040 80c4 	bne.w	8001fc2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 fae8 	bl	8002410 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e40:	e0bf      	b.n	8001fc2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e50:	f000 80b7 	beq.w	8001fc2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	099b      	lsrs	r3, r3, #6
 8001e58:	f003 0301 	and.w	r3, r3, #1
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d00f      	beq.n	8001e80 <HAL_I2C_EV_IRQHandler+0x194>
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	0a9b      	lsrs	r3, r3, #10
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d009      	beq.n	8001e80 <HAL_I2C_EV_IRQHandler+0x194>
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	089b      	lsrs	r3, r3, #2
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d103      	bne.n	8001e80 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f000 fb5d 	bl	8002538 <I2C_MasterReceive_RXNE>
 8001e7e:	e011      	b.n	8001ea4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	089b      	lsrs	r3, r3, #2
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	f000 809a 	beq.w	8001fc2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	0a5b      	lsrs	r3, r3, #9
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f000 8093 	beq.w	8001fc2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f000 fc06 	bl	80026ae <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ea2:	e08e      	b.n	8001fc2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001ea4:	e08d      	b.n	8001fc2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d004      	beq.n	8001eb8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	695b      	ldr	r3, [r3, #20]
 8001eb4:	61fb      	str	r3, [r7, #28]
 8001eb6:	e007      	b.n	8001ec8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	085b      	lsrs	r3, r3, #1
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d012      	beq.n	8001efa <HAL_I2C_EV_IRQHandler+0x20e>
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	0a5b      	lsrs	r3, r3, #9
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d00c      	beq.n	8001efa <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d003      	beq.n	8001ef0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001ef0:	69b9      	ldr	r1, [r7, #24]
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 ffc4 	bl	8002e80 <I2C_Slave_ADDR>
 8001ef8:	e066      	b.n	8001fc8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	091b      	lsrs	r3, r3, #4
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d009      	beq.n	8001f1a <HAL_I2C_EV_IRQHandler+0x22e>
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	0a5b      	lsrs	r3, r3, #9
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 fffe 	bl	8002f14 <I2C_Slave_STOPF>
 8001f18:	e056      	b.n	8001fc8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001f1a:	7bbb      	ldrb	r3, [r7, #14]
 8001f1c:	2b21      	cmp	r3, #33	; 0x21
 8001f1e:	d002      	beq.n	8001f26 <HAL_I2C_EV_IRQHandler+0x23a>
 8001f20:	7bbb      	ldrb	r3, [r7, #14]
 8001f22:	2b29      	cmp	r3, #41	; 0x29
 8001f24:	d125      	bne.n	8001f72 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	09db      	lsrs	r3, r3, #7
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d00f      	beq.n	8001f52 <HAL_I2C_EV_IRQHandler+0x266>
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	0a9b      	lsrs	r3, r3, #10
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d009      	beq.n	8001f52 <HAL_I2C_EV_IRQHandler+0x266>
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	089b      	lsrs	r3, r3, #2
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d103      	bne.n	8001f52 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 feda 	bl	8002d04 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f50:	e039      	b.n	8001fc6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	089b      	lsrs	r3, r3, #2
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d033      	beq.n	8001fc6 <HAL_I2C_EV_IRQHandler+0x2da>
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	0a5b      	lsrs	r3, r3, #9
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d02d      	beq.n	8001fc6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 ff07 	bl	8002d7e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f70:	e029      	b.n	8001fc6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	099b      	lsrs	r3, r3, #6
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d00f      	beq.n	8001f9e <HAL_I2C_EV_IRQHandler+0x2b2>
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	0a9b      	lsrs	r3, r3, #10
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d009      	beq.n	8001f9e <HAL_I2C_EV_IRQHandler+0x2b2>
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	089b      	lsrs	r3, r3, #2
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d103      	bne.n	8001f9e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 ff12 	bl	8002dc0 <I2C_SlaveReceive_RXNE>
 8001f9c:	e014      	b.n	8001fc8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	089b      	lsrs	r3, r3, #2
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d00e      	beq.n	8001fc8 <HAL_I2C_EV_IRQHandler+0x2dc>
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	0a5b      	lsrs	r3, r3, #9
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d008      	beq.n	8001fc8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 ff40 	bl	8002e3c <I2C_SlaveReceive_BTF>
 8001fbc:	e004      	b.n	8001fc8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001fbe:	bf00      	nop
 8001fc0:	e002      	b.n	8001fc8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fc2:	bf00      	nop
 8001fc4:	e000      	b.n	8001fc8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001fc6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001fc8:	3720      	adds	r7, #32
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b08a      	sub	sp, #40	; 0x28
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	695b      	ldr	r3, [r3, #20]
 8001fdc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ff0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001ff2:	6a3b      	ldr	r3, [r7, #32]
 8001ff4:	0a1b      	lsrs	r3, r3, #8
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00e      	beq.n	800201c <HAL_I2C_ER_IRQHandler+0x4e>
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	0a1b      	lsrs	r3, r3, #8
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	2b00      	cmp	r3, #0
 8002008:	d008      	beq.n	800201c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800200a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800201a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800201c:	6a3b      	ldr	r3, [r7, #32]
 800201e:	0a5b      	lsrs	r3, r3, #9
 8002020:	f003 0301 	and.w	r3, r3, #1
 8002024:	2b00      	cmp	r3, #0
 8002026:	d00e      	beq.n	8002046 <HAL_I2C_ER_IRQHandler+0x78>
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	0a1b      	lsrs	r3, r3, #8
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	2b00      	cmp	r3, #0
 8002032:	d008      	beq.n	8002046 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002036:	f043 0302 	orr.w	r3, r3, #2
 800203a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002044:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002046:	6a3b      	ldr	r3, [r7, #32]
 8002048:	0a9b      	lsrs	r3, r3, #10
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b00      	cmp	r3, #0
 8002050:	d03f      	beq.n	80020d2 <HAL_I2C_ER_IRQHandler+0x104>
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	0a1b      	lsrs	r3, r3, #8
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b00      	cmp	r3, #0
 800205c:	d039      	beq.n	80020d2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800205e:	7efb      	ldrb	r3, [r7, #27]
 8002060:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002066:	b29b      	uxth	r3, r3
 8002068:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002070:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002078:	7ebb      	ldrb	r3, [r7, #26]
 800207a:	2b20      	cmp	r3, #32
 800207c:	d112      	bne.n	80020a4 <HAL_I2C_ER_IRQHandler+0xd6>
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d10f      	bne.n	80020a4 <HAL_I2C_ER_IRQHandler+0xd6>
 8002084:	7cfb      	ldrb	r3, [r7, #19]
 8002086:	2b21      	cmp	r3, #33	; 0x21
 8002088:	d008      	beq.n	800209c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800208a:	7cfb      	ldrb	r3, [r7, #19]
 800208c:	2b29      	cmp	r3, #41	; 0x29
 800208e:	d005      	beq.n	800209c <HAL_I2C_ER_IRQHandler+0xce>
 8002090:	7cfb      	ldrb	r3, [r7, #19]
 8002092:	2b28      	cmp	r3, #40	; 0x28
 8002094:	d106      	bne.n	80020a4 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2b21      	cmp	r3, #33	; 0x21
 800209a:	d103      	bne.n	80020a4 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f001 f869 	bl	8003174 <I2C_Slave_AF>
 80020a2:	e016      	b.n	80020d2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80020ac:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	f043 0304 	orr.w	r3, r3, #4
 80020b4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80020b6:	7efb      	ldrb	r3, [r7, #27]
 80020b8:	2b10      	cmp	r3, #16
 80020ba:	d002      	beq.n	80020c2 <HAL_I2C_ER_IRQHandler+0xf4>
 80020bc:	7efb      	ldrb	r3, [r7, #27]
 80020be:	2b40      	cmp	r3, #64	; 0x40
 80020c0:	d107      	bne.n	80020d2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020d0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80020d2:	6a3b      	ldr	r3, [r7, #32]
 80020d4:	0adb      	lsrs	r3, r3, #11
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d00e      	beq.n	80020fc <HAL_I2C_ER_IRQHandler+0x12e>
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	0a1b      	lsrs	r3, r3, #8
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d008      	beq.n	80020fc <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80020ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ec:	f043 0308 	orr.w	r3, r3, #8
 80020f0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80020fa:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80020fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d008      	beq.n	8002114 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002108:	431a      	orrs	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f001 f8a0 	bl	8003254 <I2C_ITError>
  }
}
 8002114:	bf00      	nop
 8002116:	3728      	adds	r7, #40	; 0x28
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	460b      	mov	r3, r1
 8002176:	70fb      	strb	r3, [r7, #3]
 8002178:	4613      	mov	r3, r2
 800217a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80021a4:	bf00      	nop
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021fa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002202:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002208:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800220e:	2b00      	cmp	r3, #0
 8002210:	d150      	bne.n	80022b4 <I2C_MasterTransmit_TXE+0xc8>
 8002212:	7bfb      	ldrb	r3, [r7, #15]
 8002214:	2b21      	cmp	r3, #33	; 0x21
 8002216:	d14d      	bne.n	80022b4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	2b08      	cmp	r3, #8
 800221c:	d01d      	beq.n	800225a <I2C_MasterTransmit_TXE+0x6e>
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	2b20      	cmp	r3, #32
 8002222:	d01a      	beq.n	800225a <I2C_MasterTransmit_TXE+0x6e>
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800222a:	d016      	beq.n	800225a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	685a      	ldr	r2, [r3, #4]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800223a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2211      	movs	r2, #17
 8002240:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2220      	movs	r2, #32
 800224e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f7ff ff62 	bl	800211c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002258:	e060      	b.n	800231c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	685a      	ldr	r2, [r3, #4]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002268:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002278:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2220      	movs	r2, #32
 8002284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b40      	cmp	r3, #64	; 0x40
 8002292:	d107      	bne.n	80022a4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f7ff ff7d 	bl	800219c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80022a2:	e03b      	b.n	800231c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f7ff ff35 	bl	800211c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80022b2:	e033      	b.n	800231c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80022b4:	7bfb      	ldrb	r3, [r7, #15]
 80022b6:	2b21      	cmp	r3, #33	; 0x21
 80022b8:	d005      	beq.n	80022c6 <I2C_MasterTransmit_TXE+0xda>
 80022ba:	7bbb      	ldrb	r3, [r7, #14]
 80022bc:	2b40      	cmp	r3, #64	; 0x40
 80022be:	d12d      	bne.n	800231c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80022c0:	7bfb      	ldrb	r3, [r7, #15]
 80022c2:	2b22      	cmp	r3, #34	; 0x22
 80022c4:	d12a      	bne.n	800231c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d108      	bne.n	80022e2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	685a      	ldr	r2, [r3, #4]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022de:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80022e0:	e01c      	b.n	800231c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b40      	cmp	r3, #64	; 0x40
 80022ec:	d103      	bne.n	80022f6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 f88e 	bl	8002410 <I2C_MemoryTransmit_TXE_BTF>
}
 80022f4:	e012      	b.n	800231c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fa:	781a      	ldrb	r2, [r3, #0]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002306:	1c5a      	adds	r2, r3, #1
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002310:	b29b      	uxth	r3, r3
 8002312:	3b01      	subs	r3, #1
 8002314:	b29a      	uxth	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800231a:	e7ff      	b.n	800231c <I2C_MasterTransmit_TXE+0x130>
 800231c:	bf00      	nop
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002330:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b21      	cmp	r3, #33	; 0x21
 800233c:	d164      	bne.n	8002408 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002342:	b29b      	uxth	r3, r3
 8002344:	2b00      	cmp	r3, #0
 8002346:	d012      	beq.n	800236e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	781a      	ldrb	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002358:	1c5a      	adds	r2, r3, #1
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002362:	b29b      	uxth	r3, r3
 8002364:	3b01      	subs	r3, #1
 8002366:	b29a      	uxth	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800236c:	e04c      	b.n	8002408 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2b08      	cmp	r3, #8
 8002372:	d01d      	beq.n	80023b0 <I2C_MasterTransmit_BTF+0x8c>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2b20      	cmp	r3, #32
 8002378:	d01a      	beq.n	80023b0 <I2C_MasterTransmit_BTF+0x8c>
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002380:	d016      	beq.n	80023b0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	685a      	ldr	r2, [r3, #4]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002390:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2211      	movs	r2, #17
 8002396:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2220      	movs	r2, #32
 80023a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f7ff feb7 	bl	800211c <HAL_I2C_MasterTxCpltCallback>
}
 80023ae:	e02b      	b.n	8002408 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	685a      	ldr	r2, [r3, #4]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80023be:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023ce:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2220      	movs	r2, #32
 80023da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b40      	cmp	r3, #64	; 0x40
 80023e8:	d107      	bne.n	80023fa <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f7ff fed2 	bl	800219c <HAL_I2C_MemTxCpltCallback>
}
 80023f8:	e006      	b.n	8002408 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f7ff fe8a 	bl	800211c <HAL_I2C_MasterTxCpltCallback>
}
 8002408:	bf00      	nop
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800241e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002424:	2b00      	cmp	r3, #0
 8002426:	d11d      	bne.n	8002464 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800242c:	2b01      	cmp	r3, #1
 800242e:	d10b      	bne.n	8002448 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002434:	b2da      	uxtb	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002440:	1c9a      	adds	r2, r3, #2
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002446:	e073      	b.n	8002530 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800244c:	b29b      	uxth	r3, r3
 800244e:	121b      	asrs	r3, r3, #8
 8002450:	b2da      	uxtb	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800245c:	1c5a      	adds	r2, r3, #1
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002462:	e065      	b.n	8002530 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002468:	2b01      	cmp	r3, #1
 800246a:	d10b      	bne.n	8002484 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002470:	b2da      	uxtb	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800247c:	1c5a      	adds	r2, r3, #1
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002482:	e055      	b.n	8002530 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002488:	2b02      	cmp	r3, #2
 800248a:	d151      	bne.n	8002530 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800248c:	7bfb      	ldrb	r3, [r7, #15]
 800248e:	2b22      	cmp	r3, #34	; 0x22
 8002490:	d10d      	bne.n	80024ae <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024a0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024a6:	1c5a      	adds	r2, r3, #1
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	651a      	str	r2, [r3, #80]	; 0x50
}
 80024ac:	e040      	b.n	8002530 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d015      	beq.n	80024e4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80024b8:	7bfb      	ldrb	r3, [r7, #15]
 80024ba:	2b21      	cmp	r3, #33	; 0x21
 80024bc:	d112      	bne.n	80024e4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c2:	781a      	ldrb	r2, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ce:	1c5a      	adds	r2, r3, #1
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d8:	b29b      	uxth	r3, r3
 80024da:	3b01      	subs	r3, #1
 80024dc:	b29a      	uxth	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80024e2:	e025      	b.n	8002530 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d120      	bne.n	8002530 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80024ee:	7bfb      	ldrb	r3, [r7, #15]
 80024f0:	2b21      	cmp	r3, #33	; 0x21
 80024f2:	d11d      	bne.n	8002530 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	685a      	ldr	r2, [r3, #4]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002502:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002512:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2220      	movs	r2, #32
 800251e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f7ff fe36 	bl	800219c <HAL_I2C_MemTxCpltCallback>
}
 8002530:	bf00      	nop
 8002532:	3710      	adds	r7, #16
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b22      	cmp	r3, #34	; 0x22
 800254a:	f040 80ac 	bne.w	80026a6 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002552:	b29b      	uxth	r3, r3
 8002554:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2b03      	cmp	r3, #3
 800255a:	d921      	bls.n	80025a0 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	691a      	ldr	r2, [r3, #16]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002566:	b2d2      	uxtb	r2, r2
 8002568:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256e:	1c5a      	adds	r2, r3, #1
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002578:	b29b      	uxth	r3, r3
 800257a:	3b01      	subs	r3, #1
 800257c:	b29a      	uxth	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002586:	b29b      	uxth	r3, r3
 8002588:	2b03      	cmp	r3, #3
 800258a:	f040 808c 	bne.w	80026a6 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	685a      	ldr	r2, [r3, #4]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800259c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800259e:	e082      	b.n	80026a6 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d075      	beq.n	8002694 <I2C_MasterReceive_RXNE+0x15c>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d002      	beq.n	80025b4 <I2C_MasterReceive_RXNE+0x7c>
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d16f      	bne.n	8002694 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f001 f827 	bl	8003608 <I2C_WaitOnSTOPRequestThroughIT>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d142      	bne.n	8002646 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025ce:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	685a      	ldr	r2, [r3, #4]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80025de:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	691a      	ldr	r2, [r3, #16]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ea:	b2d2      	uxtb	r2, r2
 80025ec:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f2:	1c5a      	adds	r2, r3, #1
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	3b01      	subs	r3, #1
 8002600:	b29a      	uxth	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2220      	movs	r2, #32
 800260a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b40      	cmp	r3, #64	; 0x40
 8002618:	d10a      	bne.n	8002630 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f7ff fdc1 	bl	80021b0 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800262e:	e03a      	b.n	80026a6 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2212      	movs	r2, #18
 800263c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7ff fd76 	bl	8002130 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002644:	e02f      	b.n	80026a6 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	685a      	ldr	r2, [r3, #4]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002654:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	691a      	ldr	r2, [r3, #16]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002660:	b2d2      	uxtb	r2, r2
 8002662:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002668:	1c5a      	adds	r2, r3, #1
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002672:	b29b      	uxth	r3, r3
 8002674:	3b01      	subs	r3, #1
 8002676:	b29a      	uxth	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2220      	movs	r2, #32
 8002680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f7ff fd99 	bl	80021c4 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002692:	e008      	b.n	80026a6 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026a2:	605a      	str	r2, [r3, #4]
}
 80026a4:	e7ff      	b.n	80026a6 <I2C_MasterReceive_RXNE+0x16e>
 80026a6:	bf00      	nop
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b084      	sub	sp, #16
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ba:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	2b04      	cmp	r3, #4
 80026c4:	d11b      	bne.n	80026fe <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	685a      	ldr	r2, [r3, #4]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026d4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	691a      	ldr	r2, [r3, #16]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e0:	b2d2      	uxtb	r2, r2
 80026e2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e8:	1c5a      	adds	r2, r3, #1
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	3b01      	subs	r3, #1
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80026fc:	e0bd      	b.n	800287a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002702:	b29b      	uxth	r3, r3
 8002704:	2b03      	cmp	r3, #3
 8002706:	d129      	bne.n	800275c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	685a      	ldr	r2, [r3, #4]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002716:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2b04      	cmp	r3, #4
 800271c:	d00a      	beq.n	8002734 <I2C_MasterReceive_BTF+0x86>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2b02      	cmp	r3, #2
 8002722:	d007      	beq.n	8002734 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002732:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	691a      	ldr	r2, [r3, #16]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273e:	b2d2      	uxtb	r2, r2
 8002740:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002746:	1c5a      	adds	r2, r3, #1
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002750:	b29b      	uxth	r3, r3
 8002752:	3b01      	subs	r3, #1
 8002754:	b29a      	uxth	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800275a:	e08e      	b.n	800287a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002760:	b29b      	uxth	r3, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d176      	bne.n	8002854 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d002      	beq.n	8002772 <I2C_MasterReceive_BTF+0xc4>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2b10      	cmp	r3, #16
 8002770:	d108      	bne.n	8002784 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002780:	601a      	str	r2, [r3, #0]
 8002782:	e019      	b.n	80027b8 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2b04      	cmp	r3, #4
 8002788:	d002      	beq.n	8002790 <I2C_MasterReceive_BTF+0xe2>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2b02      	cmp	r3, #2
 800278e:	d108      	bne.n	80027a2 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	e00a      	b.n	80027b8 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2b10      	cmp	r3, #16
 80027a6:	d007      	beq.n	80027b8 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027b6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	691a      	ldr	r2, [r3, #16]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c2:	b2d2      	uxtb	r2, r2
 80027c4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ca:	1c5a      	adds	r2, r3, #1
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	3b01      	subs	r3, #1
 80027d8:	b29a      	uxth	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	691a      	ldr	r2, [r3, #16]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e8:	b2d2      	uxtb	r2, r2
 80027ea:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f0:	1c5a      	adds	r2, r3, #1
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	3b01      	subs	r3, #1
 80027fe:	b29a      	uxth	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002812:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2220      	movs	r2, #32
 8002818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2b40      	cmp	r3, #64	; 0x40
 8002826:	d10a      	bne.n	800283e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f7ff fcba 	bl	80021b0 <HAL_I2C_MemRxCpltCallback>
}
 800283c:	e01d      	b.n	800287a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2212      	movs	r2, #18
 800284a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f7ff fc6f 	bl	8002130 <HAL_I2C_MasterRxCpltCallback>
}
 8002852:	e012      	b.n	800287a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	691a      	ldr	r2, [r3, #16]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285e:	b2d2      	uxtb	r2, r2
 8002860:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002866:	1c5a      	adds	r2, r3, #1
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002870:	b29b      	uxth	r3, r3
 8002872:	3b01      	subs	r3, #1
 8002874:	b29a      	uxth	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800287a:	bf00      	nop
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002882:	b480      	push	{r7}
 8002884:	b083      	sub	sp, #12
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b40      	cmp	r3, #64	; 0x40
 8002894:	d117      	bne.n	80028c6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800289a:	2b00      	cmp	r3, #0
 800289c:	d109      	bne.n	80028b2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	461a      	mov	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80028ae:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80028b0:	e067      	b.n	8002982 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	f043 0301 	orr.w	r3, r3, #1
 80028bc:	b2da      	uxtb	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	611a      	str	r2, [r3, #16]
}
 80028c4:	e05d      	b.n	8002982 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028ce:	d133      	bne.n	8002938 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2b21      	cmp	r3, #33	; 0x21
 80028da:	d109      	bne.n	80028f0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	461a      	mov	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80028ec:	611a      	str	r2, [r3, #16]
 80028ee:	e008      	b.n	8002902 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	f043 0301 	orr.w	r3, r3, #1
 80028fa:	b2da      	uxtb	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002906:	2b00      	cmp	r3, #0
 8002908:	d004      	beq.n	8002914 <I2C_Master_SB+0x92>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800290e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002910:	2b00      	cmp	r3, #0
 8002912:	d108      	bne.n	8002926 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002918:	2b00      	cmp	r3, #0
 800291a:	d032      	beq.n	8002982 <I2C_Master_SB+0x100>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002922:	2b00      	cmp	r3, #0
 8002924:	d02d      	beq.n	8002982 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	685a      	ldr	r2, [r3, #4]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002934:	605a      	str	r2, [r3, #4]
}
 8002936:	e024      	b.n	8002982 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800293c:	2b00      	cmp	r3, #0
 800293e:	d10e      	bne.n	800295e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002944:	b29b      	uxth	r3, r3
 8002946:	11db      	asrs	r3, r3, #7
 8002948:	b2db      	uxtb	r3, r3
 800294a:	f003 0306 	and.w	r3, r3, #6
 800294e:	b2db      	uxtb	r3, r3
 8002950:	f063 030f 	orn	r3, r3, #15
 8002954:	b2da      	uxtb	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	611a      	str	r2, [r3, #16]
}
 800295c:	e011      	b.n	8002982 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002962:	2b01      	cmp	r3, #1
 8002964:	d10d      	bne.n	8002982 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296a:	b29b      	uxth	r3, r3
 800296c:	11db      	asrs	r3, r3, #7
 800296e:	b2db      	uxtb	r3, r3
 8002970:	f003 0306 	and.w	r3, r3, #6
 8002974:	b2db      	uxtb	r3, r3
 8002976:	f063 030e 	orn	r3, r3, #14
 800297a:	b2da      	uxtb	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	611a      	str	r2, [r3, #16]
}
 8002982:	bf00      	nop
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr

0800298e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800298e:	b480      	push	{r7}
 8002990:	b083      	sub	sp, #12
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299a:	b2da      	uxtb	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d004      	beq.n	80029b4 <I2C_Master_ADD10+0x26>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d108      	bne.n	80029c6 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00c      	beq.n	80029d6 <I2C_Master_ADD10+0x48>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d007      	beq.n	80029d6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	685a      	ldr	r2, [r3, #4]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029d4:	605a      	str	r2, [r3, #4]
  }
}
 80029d6:	bf00      	nop
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr

080029e2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80029e2:	b480      	push	{r7}
 80029e4:	b091      	sub	sp, #68	; 0x44
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	2b22      	cmp	r3, #34	; 0x22
 8002a0a:	f040 8169 	bne.w	8002ce0 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d10f      	bne.n	8002a36 <I2C_Master_ADDR+0x54>
 8002a16:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002a1a:	2b40      	cmp	r3, #64	; 0x40
 8002a1c:	d10b      	bne.n	8002a36 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a1e:	2300      	movs	r3, #0
 8002a20:	633b      	str	r3, [r7, #48]	; 0x30
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	695b      	ldr	r3, [r3, #20]
 8002a28:	633b      	str	r3, [r7, #48]	; 0x30
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	633b      	str	r3, [r7, #48]	; 0x30
 8002a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a34:	e160      	b.n	8002cf8 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d11d      	bne.n	8002a7a <I2C_Master_ADDR+0x98>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002a46:	d118      	bne.n	8002a7a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a48:	2300      	movs	r3, #0
 8002a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a6c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a72:	1c5a      	adds	r2, r3, #1
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	651a      	str	r2, [r3, #80]	; 0x50
 8002a78:	e13e      	b.n	8002cf8 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d113      	bne.n	8002aac <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a84:	2300      	movs	r3, #0
 8002a86:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a98:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	e115      	b.n	8002cd8 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	f040 808a 	bne.w	8002bcc <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002abe:	d137      	bne.n	8002b30 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ace:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ada:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ade:	d113      	bne.n	8002b08 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aee:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002af0:	2300      	movs	r3, #0
 8002af2:	627b      	str	r3, [r7, #36]	; 0x24
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	627b      	str	r3, [r7, #36]	; 0x24
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	627b      	str	r3, [r7, #36]	; 0x24
 8002b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b06:	e0e7      	b.n	8002cd8 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b08:	2300      	movs	r3, #0
 8002b0a:	623b      	str	r3, [r7, #32]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	623b      	str	r3, [r7, #32]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	623b      	str	r3, [r7, #32]
 8002b1c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b2c:	601a      	str	r2, [r3, #0]
 8002b2e:	e0d3      	b.n	8002cd8 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b32:	2b08      	cmp	r3, #8
 8002b34:	d02e      	beq.n	8002b94 <I2C_Master_ADDR+0x1b2>
 8002b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b38:	2b20      	cmp	r3, #32
 8002b3a:	d02b      	beq.n	8002b94 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b3e:	2b12      	cmp	r3, #18
 8002b40:	d102      	bne.n	8002b48 <I2C_Master_ADDR+0x166>
 8002b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d125      	bne.n	8002b94 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b4a:	2b04      	cmp	r3, #4
 8002b4c:	d00e      	beq.n	8002b6c <I2C_Master_ADDR+0x18a>
 8002b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d00b      	beq.n	8002b6c <I2C_Master_ADDR+0x18a>
 8002b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b56:	2b10      	cmp	r3, #16
 8002b58:	d008      	beq.n	8002b6c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	e007      	b.n	8002b7c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b7a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	61fb      	str	r3, [r7, #28]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	61fb      	str	r3, [r7, #28]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	61fb      	str	r3, [r7, #28]
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	e0a1      	b.n	8002cd8 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ba2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	61bb      	str	r3, [r7, #24]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	61bb      	str	r3, [r7, #24]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	61bb      	str	r3, [r7, #24]
 8002bb8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	e085      	b.n	8002cd8 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d14d      	bne.n	8002c72 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd8:	2b04      	cmp	r3, #4
 8002bda:	d016      	beq.n	8002c0a <I2C_Master_ADDR+0x228>
 8002bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d013      	beq.n	8002c0a <I2C_Master_ADDR+0x228>
 8002be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002be4:	2b10      	cmp	r3, #16
 8002be6:	d010      	beq.n	8002c0a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bf6:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	e007      	b.n	8002c1a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c18:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c28:	d117      	bne.n	8002c5a <I2C_Master_ADDR+0x278>
 8002c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c2c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c30:	d00b      	beq.n	8002c4a <I2C_Master_ADDR+0x268>
 8002c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d008      	beq.n	8002c4a <I2C_Master_ADDR+0x268>
 8002c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c3a:	2b08      	cmp	r3, #8
 8002c3c:	d005      	beq.n	8002c4a <I2C_Master_ADDR+0x268>
 8002c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c40:	2b10      	cmp	r3, #16
 8002c42:	d002      	beq.n	8002c4a <I2C_Master_ADDR+0x268>
 8002c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c46:	2b20      	cmp	r3, #32
 8002c48:	d107      	bne.n	8002c5a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	685a      	ldr	r2, [r3, #4]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002c58:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	617b      	str	r3, [r7, #20]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	695b      	ldr	r3, [r3, #20]
 8002c64:	617b      	str	r3, [r7, #20]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	617b      	str	r3, [r7, #20]
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	e032      	b.n	8002cd8 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c80:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c90:	d117      	bne.n	8002cc2 <I2C_Master_ADDR+0x2e0>
 8002c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c94:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c98:	d00b      	beq.n	8002cb2 <I2C_Master_ADDR+0x2d0>
 8002c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d008      	beq.n	8002cb2 <I2C_Master_ADDR+0x2d0>
 8002ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ca2:	2b08      	cmp	r3, #8
 8002ca4:	d005      	beq.n	8002cb2 <I2C_Master_ADDR+0x2d0>
 8002ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ca8:	2b10      	cmp	r3, #16
 8002caa:	d002      	beq.n	8002cb2 <I2C_Master_ADDR+0x2d0>
 8002cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cae:	2b20      	cmp	r3, #32
 8002cb0:	d107      	bne.n	8002cc2 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	685a      	ldr	r2, [r3, #4]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002cc0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	613b      	str	r3, [r7, #16]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	695b      	ldr	r3, [r3, #20]
 8002ccc:	613b      	str	r3, [r7, #16]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	613b      	str	r3, [r7, #16]
 8002cd6:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002cde:	e00b      	b.n	8002cf8 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	60fb      	str	r3, [r7, #12]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	60fb      	str	r3, [r7, #12]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	60fb      	str	r3, [r7, #12]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
}
 8002cf6:	e7ff      	b.n	8002cf8 <I2C_Master_ADDR+0x316>
 8002cf8:	bf00      	nop
 8002cfa:	3744      	adds	r7, #68	; 0x44
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d12:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d02b      	beq.n	8002d76 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d22:	781a      	ldrb	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2e:	1c5a      	adds	r2, r3, #1
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d114      	bne.n	8002d76 <I2C_SlaveTransmit_TXE+0x72>
 8002d4c:	7bfb      	ldrb	r3, [r7, #15]
 8002d4e:	2b29      	cmp	r3, #41	; 0x29
 8002d50:	d111      	bne.n	8002d76 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	685a      	ldr	r2, [r3, #4]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d60:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2221      	movs	r2, #33	; 0x21
 8002d66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2228      	movs	r2, #40	; 0x28
 8002d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f7ff f9e7 	bl	8002144 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002d76:	bf00      	nop
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b083      	sub	sp, #12
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d011      	beq.n	8002db4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d94:	781a      	ldrb	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da0:	1c5a      	adds	r2, r3, #1
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	3b01      	subs	r3, #1
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002db4:	bf00      	nop
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dce:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d02c      	beq.n	8002e34 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	691a      	ldr	r2, [r3, #16]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de4:	b2d2      	uxtb	r2, r2
 8002de6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dec:	1c5a      	adds	r2, r3, #1
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d114      	bne.n	8002e34 <I2C_SlaveReceive_RXNE+0x74>
 8002e0a:	7bfb      	ldrb	r3, [r7, #15]
 8002e0c:	2b2a      	cmp	r3, #42	; 0x2a
 8002e0e:	d111      	bne.n	8002e34 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	685a      	ldr	r2, [r3, #4]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e1e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2222      	movs	r2, #34	; 0x22
 8002e24:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2228      	movs	r2, #40	; 0x28
 8002e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f7ff f992 	bl	8002158 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002e34:	bf00      	nop
 8002e36:	3710      	adds	r7, #16
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d012      	beq.n	8002e74 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	691a      	ldr	r2, [r3, #16]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e58:	b2d2      	uxtb	r2, r2
 8002e5a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e60:	1c5a      	adds	r2, r3, #1
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	b29a      	uxth	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002e9a:	2b28      	cmp	r3, #40	; 0x28
 8002e9c:	d127      	bne.n	8002eee <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	685a      	ldr	r2, [r3, #4]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eac:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	089b      	lsrs	r3, r3, #2
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	09db      	lsrs	r3, r3, #7
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d103      	bne.n	8002ed2 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	81bb      	strh	r3, [r7, #12]
 8002ed0:	e002      	b.n	8002ed8 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002ee0:	89ba      	ldrh	r2, [r7, #12]
 8002ee2:	7bfb      	ldrb	r3, [r7, #15]
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f7ff f940 	bl	800216c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002eec:	e00e      	b.n	8002f0c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eee:	2300      	movs	r3, #0
 8002ef0:	60bb      	str	r3, [r7, #8]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	695b      	ldr	r3, [r3, #20]
 8002ef8:	60bb      	str	r3, [r7, #8]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	60bb      	str	r3, [r7, #8]
 8002f02:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002f0c:	bf00      	nop
 8002f0e:	3710      	adds	r7, #16
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f22:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	685a      	ldr	r2, [r3, #4]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f32:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002f34:	2300      	movs	r3, #0
 8002f36:	60bb      	str	r3, [r7, #8]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	60bb      	str	r3, [r7, #8]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f042 0201 	orr.w	r2, r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f60:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f70:	d172      	bne.n	8003058 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002f72:	7bfb      	ldrb	r3, [r7, #15]
 8002f74:	2b22      	cmp	r3, #34	; 0x22
 8002f76:	d002      	beq.n	8002f7e <I2C_Slave_STOPF+0x6a>
 8002f78:	7bfb      	ldrb	r3, [r7, #15]
 8002f7a:	2b2a      	cmp	r3, #42	; 0x2a
 8002f7c:	d135      	bne.n	8002fea <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d005      	beq.n	8002fa2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	f043 0204 	orr.w	r2, r3, #4
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	685a      	ldr	r2, [r3, #4]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fb0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7fe fba7 	bl	800170a <HAL_DMA_GetState>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d049      	beq.n	8003056 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc6:	4a69      	ldr	r2, [pc, #420]	; (800316c <I2C_Slave_STOPF+0x258>)
 8002fc8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7fe fb79 	bl	80016c6 <HAL_DMA_Abort_IT>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d03d      	beq.n	8003056 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002fe4:	4610      	mov	r0, r2
 8002fe6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002fe8:	e035      	b.n	8003056 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d005      	beq.n	800300e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	f043 0204 	orr.w	r2, r3, #4
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	685a      	ldr	r2, [r3, #4]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800301c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003022:	4618      	mov	r0, r3
 8003024:	f7fe fb71 	bl	800170a <HAL_DMA_GetState>
 8003028:	4603      	mov	r3, r0
 800302a:	2b01      	cmp	r3, #1
 800302c:	d014      	beq.n	8003058 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003032:	4a4e      	ldr	r2, [pc, #312]	; (800316c <I2C_Slave_STOPF+0x258>)
 8003034:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800303a:	4618      	mov	r0, r3
 800303c:	f7fe fb43 	bl	80016c6 <HAL_DMA_Abort_IT>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d008      	beq.n	8003058 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800304a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003050:	4610      	mov	r0, r2
 8003052:	4798      	blx	r3
 8003054:	e000      	b.n	8003058 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003056:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800305c:	b29b      	uxth	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d03e      	beq.n	80030e0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	f003 0304 	and.w	r3, r3, #4
 800306c:	2b04      	cmp	r3, #4
 800306e:	d112      	bne.n	8003096 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	691a      	ldr	r2, [r3, #16]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307a:	b2d2      	uxtb	r2, r2
 800307c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003082:	1c5a      	adds	r2, r3, #1
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800308c:	b29b      	uxth	r3, r3
 800308e:	3b01      	subs	r3, #1
 8003090:	b29a      	uxth	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a0:	2b40      	cmp	r3, #64	; 0x40
 80030a2:	d112      	bne.n	80030ca <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	691a      	ldr	r2, [r3, #16]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ae:	b2d2      	uxtb	r2, r2
 80030b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b6:	1c5a      	adds	r2, r3, #1
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	3b01      	subs	r3, #1
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d005      	beq.n	80030e0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d8:	f043 0204 	orr.w	r2, r3, #4
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d003      	beq.n	80030f0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f000 f8b3 	bl	8003254 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80030ee:	e039      	b.n	8003164 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80030f0:	7bfb      	ldrb	r3, [r7, #15]
 80030f2:	2b2a      	cmp	r3, #42	; 0x2a
 80030f4:	d109      	bne.n	800310a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2228      	movs	r2, #40	; 0x28
 8003100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f7ff f827 	bl	8002158 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b28      	cmp	r3, #40	; 0x28
 8003114:	d111      	bne.n	800313a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a15      	ldr	r2, [pc, #84]	; (8003170 <I2C_Slave_STOPF+0x25c>)
 800311a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2220      	movs	r2, #32
 8003126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f7ff f828 	bl	8002188 <HAL_I2C_ListenCpltCallback>
}
 8003138:	e014      	b.n	8003164 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313e:	2b22      	cmp	r3, #34	; 0x22
 8003140:	d002      	beq.n	8003148 <I2C_Slave_STOPF+0x234>
 8003142:	7bfb      	ldrb	r3, [r7, #15]
 8003144:	2b22      	cmp	r3, #34	; 0x22
 8003146:	d10d      	bne.n	8003164 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2220      	movs	r2, #32
 8003152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7fe fffa 	bl	8002158 <HAL_I2C_SlaveRxCpltCallback>
}
 8003164:	bf00      	nop
 8003166:	3710      	adds	r7, #16
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	080034b9 	.word	0x080034b9
 8003170:	ffff0000 	.word	0xffff0000

08003174 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003182:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003188:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	2b08      	cmp	r3, #8
 800318e:	d002      	beq.n	8003196 <I2C_Slave_AF+0x22>
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	2b20      	cmp	r3, #32
 8003194:	d129      	bne.n	80031ea <I2C_Slave_AF+0x76>
 8003196:	7bfb      	ldrb	r3, [r7, #15]
 8003198:	2b28      	cmp	r3, #40	; 0x28
 800319a:	d126      	bne.n	80031ea <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a2c      	ldr	r2, [pc, #176]	; (8003250 <I2C_Slave_AF+0xdc>)
 80031a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80031b0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031ba:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031ca:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2220      	movs	r2, #32
 80031d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f7fe ffd0 	bl	8002188 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80031e8:	e02e      	b.n	8003248 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80031ea:	7bfb      	ldrb	r3, [r7, #15]
 80031ec:	2b21      	cmp	r3, #33	; 0x21
 80031ee:	d126      	bne.n	800323e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a17      	ldr	r2, [pc, #92]	; (8003250 <I2C_Slave_AF+0xdc>)
 80031f4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2221      	movs	r2, #33	; 0x21
 80031fa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2220      	movs	r2, #32
 8003200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	685a      	ldr	r2, [r3, #4]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800321a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003224:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003234:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f7fe ff84 	bl	8002144 <HAL_I2C_SlaveTxCpltCallback>
}
 800323c:	e004      	b.n	8003248 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003246:	615a      	str	r2, [r3, #20]
}
 8003248:	bf00      	nop
 800324a:	3710      	adds	r7, #16
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	ffff0000 	.word	0xffff0000

08003254 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003262:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800326a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800326c:	7bbb      	ldrb	r3, [r7, #14]
 800326e:	2b10      	cmp	r3, #16
 8003270:	d002      	beq.n	8003278 <I2C_ITError+0x24>
 8003272:	7bbb      	ldrb	r3, [r7, #14]
 8003274:	2b40      	cmp	r3, #64	; 0x40
 8003276:	d10a      	bne.n	800328e <I2C_ITError+0x3a>
 8003278:	7bfb      	ldrb	r3, [r7, #15]
 800327a:	2b22      	cmp	r3, #34	; 0x22
 800327c:	d107      	bne.n	800328e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800328c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800328e:	7bfb      	ldrb	r3, [r7, #15]
 8003290:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003294:	2b28      	cmp	r3, #40	; 0x28
 8003296:	d107      	bne.n	80032a8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2228      	movs	r2, #40	; 0x28
 80032a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80032a6:	e015      	b.n	80032d4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032b6:	d00a      	beq.n	80032ce <I2C_ITError+0x7a>
 80032b8:	7bfb      	ldrb	r3, [r7, #15]
 80032ba:	2b60      	cmp	r3, #96	; 0x60
 80032bc:	d007      	beq.n	80032ce <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2220      	movs	r2, #32
 80032c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032e2:	d162      	bne.n	80033aa <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	685a      	ldr	r2, [r3, #4]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032f2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d020      	beq.n	8003344 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003306:	4a6a      	ldr	r2, [pc, #424]	; (80034b0 <I2C_ITError+0x25c>)
 8003308:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800330e:	4618      	mov	r0, r3
 8003310:	f7fe f9d9 	bl	80016c6 <HAL_DMA_Abort_IT>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	f000 8089 	beq.w	800342e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f022 0201 	bic.w	r2, r2, #1
 800332a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2220      	movs	r2, #32
 8003330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800333e:	4610      	mov	r0, r2
 8003340:	4798      	blx	r3
 8003342:	e074      	b.n	800342e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003348:	4a59      	ldr	r2, [pc, #356]	; (80034b0 <I2C_ITError+0x25c>)
 800334a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003350:	4618      	mov	r0, r3
 8003352:	f7fe f9b8 	bl	80016c6 <HAL_DMA_Abort_IT>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d068      	beq.n	800342e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003366:	2b40      	cmp	r3, #64	; 0x40
 8003368:	d10b      	bne.n	8003382 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	691a      	ldr	r2, [r3, #16]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003374:	b2d2      	uxtb	r2, r2
 8003376:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337c:	1c5a      	adds	r2, r3, #1
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f022 0201 	bic.w	r2, r2, #1
 8003390:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2220      	movs	r2, #32
 8003396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033a4:	4610      	mov	r0, r2
 80033a6:	4798      	blx	r3
 80033a8:	e041      	b.n	800342e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b60      	cmp	r3, #96	; 0x60
 80033b4:	d125      	bne.n	8003402 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2220      	movs	r2, #32
 80033ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ce:	2b40      	cmp	r3, #64	; 0x40
 80033d0:	d10b      	bne.n	80033ea <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	691a      	ldr	r2, [r3, #16]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033dc:	b2d2      	uxtb	r2, r2
 80033de:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e4:	1c5a      	adds	r2, r3, #1
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f022 0201 	bic.w	r2, r2, #1
 80033f8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f7fe feec 	bl	80021d8 <HAL_I2C_AbortCpltCallback>
 8003400:	e015      	b.n	800342e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	695b      	ldr	r3, [r3, #20]
 8003408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800340c:	2b40      	cmp	r3, #64	; 0x40
 800340e:	d10b      	bne.n	8003428 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	691a      	ldr	r2, [r3, #16]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341a:	b2d2      	uxtb	r2, r2
 800341c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003422:	1c5a      	adds	r2, r3, #1
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f7fe fecb 	bl	80021c4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10e      	bne.n	800345c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003444:	2b00      	cmp	r3, #0
 8003446:	d109      	bne.n	800345c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800344e:	2b00      	cmp	r3, #0
 8003450:	d104      	bne.n	800345c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003458:	2b00      	cmp	r3, #0
 800345a:	d007      	beq.n	800346c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	685a      	ldr	r2, [r3, #4]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800346a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003472:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003478:	f003 0304 	and.w	r3, r3, #4
 800347c:	2b04      	cmp	r3, #4
 800347e:	d113      	bne.n	80034a8 <I2C_ITError+0x254>
 8003480:	7bfb      	ldrb	r3, [r7, #15]
 8003482:	2b28      	cmp	r3, #40	; 0x28
 8003484:	d110      	bne.n	80034a8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a0a      	ldr	r2, [pc, #40]	; (80034b4 <I2C_ITError+0x260>)
 800348a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2220      	movs	r2, #32
 8003496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7fe fe70 	bl	8002188 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80034a8:	bf00      	nop
 80034aa:	3710      	adds	r7, #16
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	080034b9 	.word	0x080034b9
 80034b4:	ffff0000 	.word	0xffff0000

080034b8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80034c0:	2300      	movs	r3, #0
 80034c2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034d0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80034d2:	4b4b      	ldr	r3, [pc, #300]	; (8003600 <I2C_DMAAbort+0x148>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	08db      	lsrs	r3, r3, #3
 80034d8:	4a4a      	ldr	r2, [pc, #296]	; (8003604 <I2C_DMAAbort+0x14c>)
 80034da:	fba2 2303 	umull	r2, r3, r2, r3
 80034de:	0a1a      	lsrs	r2, r3, #8
 80034e0:	4613      	mov	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4413      	add	r3, r2
 80034e6:	00da      	lsls	r2, r3, #3
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d106      	bne.n	8003500 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f6:	f043 0220 	orr.w	r2, r3, #32
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80034fe:	e00a      	b.n	8003516 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	3b01      	subs	r3, #1
 8003504:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003510:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003514:	d0ea      	beq.n	80034ec <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800351a:	2b00      	cmp	r3, #0
 800351c:	d003      	beq.n	8003526 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003522:	2200      	movs	r2, #0
 8003524:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003532:	2200      	movs	r2, #0
 8003534:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003544:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	2200      	movs	r2, #0
 800354a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003550:	2b00      	cmp	r3, #0
 8003552:	d003      	beq.n	800355c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003558:	2200      	movs	r2, #0
 800355a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003560:	2b00      	cmp	r3, #0
 8003562:	d003      	beq.n	800356c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003568:	2200      	movs	r2, #0
 800356a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f022 0201 	bic.w	r2, r2, #1
 800357a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003582:	b2db      	uxtb	r3, r3
 8003584:	2b60      	cmp	r3, #96	; 0x60
 8003586:	d10e      	bne.n	80035a6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	2220      	movs	r2, #32
 800358c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	2200      	movs	r2, #0
 800359c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800359e:	6978      	ldr	r0, [r7, #20]
 80035a0:	f7fe fe1a 	bl	80021d8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80035a4:	e027      	b.n	80035f6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80035a6:	7cfb      	ldrb	r3, [r7, #19]
 80035a8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80035ac:	2b28      	cmp	r3, #40	; 0x28
 80035ae:	d117      	bne.n	80035e0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f042 0201 	orr.w	r2, r2, #1
 80035be:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035ce:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	2200      	movs	r2, #0
 80035d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	2228      	movs	r2, #40	; 0x28
 80035da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80035de:	e007      	b.n	80035f0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	2220      	movs	r2, #32
 80035e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80035f0:	6978      	ldr	r0, [r7, #20]
 80035f2:	f7fe fde7 	bl	80021c4 <HAL_I2C_ErrorCallback>
}
 80035f6:	bf00      	nop
 80035f8:	3718      	adds	r7, #24
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	2000002c 	.word	0x2000002c
 8003604:	14f8b589 	.word	0x14f8b589

08003608 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003610:	2300      	movs	r3, #0
 8003612:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003614:	4b13      	ldr	r3, [pc, #76]	; (8003664 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	08db      	lsrs	r3, r3, #3
 800361a:	4a13      	ldr	r2, [pc, #76]	; (8003668 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800361c:	fba2 2303 	umull	r2, r3, r2, r3
 8003620:	0a1a      	lsrs	r2, r3, #8
 8003622:	4613      	mov	r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	4413      	add	r3, r2
 8003628:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	3b01      	subs	r3, #1
 800362e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d107      	bne.n	8003646 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363a:	f043 0220 	orr.w	r2, r3, #32
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e008      	b.n	8003658 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003654:	d0e9      	beq.n	800362a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3714      	adds	r7, #20
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr
 8003664:	2000002c 	.word	0x2000002c
 8003668:	14f8b589 	.word	0x14f8b589

0800366c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003678:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800367c:	d103      	bne.n	8003686 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2201      	movs	r2, #1
 8003682:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003684:	e007      	b.n	8003696 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800368e:	d102      	bne.n	8003696 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2208      	movs	r2, #8
 8003694:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003696:	bf00      	nop
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
	...

080036a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e267      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d075      	beq.n	80037ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036c2:	4b88      	ldr	r3, [pc, #544]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 030c 	and.w	r3, r3, #12
 80036ca:	2b04      	cmp	r3, #4
 80036cc:	d00c      	beq.n	80036e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036ce:	4b85      	ldr	r3, [pc, #532]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036d6:	2b08      	cmp	r3, #8
 80036d8:	d112      	bne.n	8003700 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036da:	4b82      	ldr	r3, [pc, #520]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036e6:	d10b      	bne.n	8003700 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036e8:	4b7e      	ldr	r3, [pc, #504]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d05b      	beq.n	80037ac <HAL_RCC_OscConfig+0x108>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d157      	bne.n	80037ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e242      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003708:	d106      	bne.n	8003718 <HAL_RCC_OscConfig+0x74>
 800370a:	4b76      	ldr	r3, [pc, #472]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a75      	ldr	r2, [pc, #468]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 8003710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003714:	6013      	str	r3, [r2, #0]
 8003716:	e01d      	b.n	8003754 <HAL_RCC_OscConfig+0xb0>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003720:	d10c      	bne.n	800373c <HAL_RCC_OscConfig+0x98>
 8003722:	4b70      	ldr	r3, [pc, #448]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a6f      	ldr	r2, [pc, #444]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 8003728:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800372c:	6013      	str	r3, [r2, #0]
 800372e:	4b6d      	ldr	r3, [pc, #436]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a6c      	ldr	r2, [pc, #432]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 8003734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003738:	6013      	str	r3, [r2, #0]
 800373a:	e00b      	b.n	8003754 <HAL_RCC_OscConfig+0xb0>
 800373c:	4b69      	ldr	r3, [pc, #420]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a68      	ldr	r2, [pc, #416]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 8003742:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003746:	6013      	str	r3, [r2, #0]
 8003748:	4b66      	ldr	r3, [pc, #408]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a65      	ldr	r2, [pc, #404]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 800374e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003752:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d013      	beq.n	8003784 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375c:	f7fd fdd0 	bl	8001300 <HAL_GetTick>
 8003760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003762:	e008      	b.n	8003776 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003764:	f7fd fdcc 	bl	8001300 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b64      	cmp	r3, #100	; 0x64
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e207      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003776:	4b5b      	ldr	r3, [pc, #364]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d0f0      	beq.n	8003764 <HAL_RCC_OscConfig+0xc0>
 8003782:	e014      	b.n	80037ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003784:	f7fd fdbc 	bl	8001300 <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800378c:	f7fd fdb8 	bl	8001300 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b64      	cmp	r3, #100	; 0x64
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e1f3      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800379e:	4b51      	ldr	r3, [pc, #324]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1f0      	bne.n	800378c <HAL_RCC_OscConfig+0xe8>
 80037aa:	e000      	b.n	80037ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d063      	beq.n	8003882 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037ba:	4b4a      	ldr	r3, [pc, #296]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f003 030c 	and.w	r3, r3, #12
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00b      	beq.n	80037de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037c6:	4b47      	ldr	r3, [pc, #284]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037ce:	2b08      	cmp	r3, #8
 80037d0:	d11c      	bne.n	800380c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037d2:	4b44      	ldr	r3, [pc, #272]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d116      	bne.n	800380c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037de:	4b41      	ldr	r3, [pc, #260]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d005      	beq.n	80037f6 <HAL_RCC_OscConfig+0x152>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d001      	beq.n	80037f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e1c7      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037f6:	4b3b      	ldr	r3, [pc, #236]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	4937      	ldr	r1, [pc, #220]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 8003806:	4313      	orrs	r3, r2
 8003808:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800380a:	e03a      	b.n	8003882 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d020      	beq.n	8003856 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003814:	4b34      	ldr	r3, [pc, #208]	; (80038e8 <HAL_RCC_OscConfig+0x244>)
 8003816:	2201      	movs	r2, #1
 8003818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800381a:	f7fd fd71 	bl	8001300 <HAL_GetTick>
 800381e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003820:	e008      	b.n	8003834 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003822:	f7fd fd6d 	bl	8001300 <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	2b02      	cmp	r3, #2
 800382e:	d901      	bls.n	8003834 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e1a8      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003834:	4b2b      	ldr	r3, [pc, #172]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d0f0      	beq.n	8003822 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003840:	4b28      	ldr	r3, [pc, #160]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	00db      	lsls	r3, r3, #3
 800384e:	4925      	ldr	r1, [pc, #148]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 8003850:	4313      	orrs	r3, r2
 8003852:	600b      	str	r3, [r1, #0]
 8003854:	e015      	b.n	8003882 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003856:	4b24      	ldr	r3, [pc, #144]	; (80038e8 <HAL_RCC_OscConfig+0x244>)
 8003858:	2200      	movs	r2, #0
 800385a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385c:	f7fd fd50 	bl	8001300 <HAL_GetTick>
 8003860:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003862:	e008      	b.n	8003876 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003864:	f7fd fd4c 	bl	8001300 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b02      	cmp	r3, #2
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e187      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003876:	4b1b      	ldr	r3, [pc, #108]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1f0      	bne.n	8003864 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0308 	and.w	r3, r3, #8
 800388a:	2b00      	cmp	r3, #0
 800388c:	d036      	beq.n	80038fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d016      	beq.n	80038c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003896:	4b15      	ldr	r3, [pc, #84]	; (80038ec <HAL_RCC_OscConfig+0x248>)
 8003898:	2201      	movs	r2, #1
 800389a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800389c:	f7fd fd30 	bl	8001300 <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038a2:	e008      	b.n	80038b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038a4:	f7fd fd2c 	bl	8001300 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e167      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038b6:	4b0b      	ldr	r3, [pc, #44]	; (80038e4 <HAL_RCC_OscConfig+0x240>)
 80038b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d0f0      	beq.n	80038a4 <HAL_RCC_OscConfig+0x200>
 80038c2:	e01b      	b.n	80038fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038c4:	4b09      	ldr	r3, [pc, #36]	; (80038ec <HAL_RCC_OscConfig+0x248>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ca:	f7fd fd19 	bl	8001300 <HAL_GetTick>
 80038ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038d0:	e00e      	b.n	80038f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038d2:	f7fd fd15 	bl	8001300 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d907      	bls.n	80038f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e150      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
 80038e4:	40023800 	.word	0x40023800
 80038e8:	42470000 	.word	0x42470000
 80038ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038f0:	4b88      	ldr	r3, [pc, #544]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 80038f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1ea      	bne.n	80038d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0304 	and.w	r3, r3, #4
 8003904:	2b00      	cmp	r3, #0
 8003906:	f000 8097 	beq.w	8003a38 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800390a:	2300      	movs	r3, #0
 800390c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800390e:	4b81      	ldr	r3, [pc, #516]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10f      	bne.n	800393a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800391a:	2300      	movs	r3, #0
 800391c:	60bb      	str	r3, [r7, #8]
 800391e:	4b7d      	ldr	r3, [pc, #500]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003922:	4a7c      	ldr	r2, [pc, #496]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003928:	6413      	str	r3, [r2, #64]	; 0x40
 800392a:	4b7a      	ldr	r3, [pc, #488]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 800392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003932:	60bb      	str	r3, [r7, #8]
 8003934:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003936:	2301      	movs	r3, #1
 8003938:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800393a:	4b77      	ldr	r3, [pc, #476]	; (8003b18 <HAL_RCC_OscConfig+0x474>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003942:	2b00      	cmp	r3, #0
 8003944:	d118      	bne.n	8003978 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003946:	4b74      	ldr	r3, [pc, #464]	; (8003b18 <HAL_RCC_OscConfig+0x474>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a73      	ldr	r2, [pc, #460]	; (8003b18 <HAL_RCC_OscConfig+0x474>)
 800394c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003950:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003952:	f7fd fcd5 	bl	8001300 <HAL_GetTick>
 8003956:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003958:	e008      	b.n	800396c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800395a:	f7fd fcd1 	bl	8001300 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d901      	bls.n	800396c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e10c      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800396c:	4b6a      	ldr	r3, [pc, #424]	; (8003b18 <HAL_RCC_OscConfig+0x474>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003974:	2b00      	cmp	r3, #0
 8003976:	d0f0      	beq.n	800395a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d106      	bne.n	800398e <HAL_RCC_OscConfig+0x2ea>
 8003980:	4b64      	ldr	r3, [pc, #400]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003984:	4a63      	ldr	r2, [pc, #396]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003986:	f043 0301 	orr.w	r3, r3, #1
 800398a:	6713      	str	r3, [r2, #112]	; 0x70
 800398c:	e01c      	b.n	80039c8 <HAL_RCC_OscConfig+0x324>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	2b05      	cmp	r3, #5
 8003994:	d10c      	bne.n	80039b0 <HAL_RCC_OscConfig+0x30c>
 8003996:	4b5f      	ldr	r3, [pc, #380]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399a:	4a5e      	ldr	r2, [pc, #376]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 800399c:	f043 0304 	orr.w	r3, r3, #4
 80039a0:	6713      	str	r3, [r2, #112]	; 0x70
 80039a2:	4b5c      	ldr	r3, [pc, #368]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 80039a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a6:	4a5b      	ldr	r2, [pc, #364]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 80039a8:	f043 0301 	orr.w	r3, r3, #1
 80039ac:	6713      	str	r3, [r2, #112]	; 0x70
 80039ae:	e00b      	b.n	80039c8 <HAL_RCC_OscConfig+0x324>
 80039b0:	4b58      	ldr	r3, [pc, #352]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 80039b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b4:	4a57      	ldr	r2, [pc, #348]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 80039b6:	f023 0301 	bic.w	r3, r3, #1
 80039ba:	6713      	str	r3, [r2, #112]	; 0x70
 80039bc:	4b55      	ldr	r3, [pc, #340]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 80039be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c0:	4a54      	ldr	r2, [pc, #336]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 80039c2:	f023 0304 	bic.w	r3, r3, #4
 80039c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d015      	beq.n	80039fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d0:	f7fd fc96 	bl	8001300 <HAL_GetTick>
 80039d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039d6:	e00a      	b.n	80039ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039d8:	f7fd fc92 	bl	8001300 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e0cb      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ee:	4b49      	ldr	r3, [pc, #292]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 80039f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d0ee      	beq.n	80039d8 <HAL_RCC_OscConfig+0x334>
 80039fa:	e014      	b.n	8003a26 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039fc:	f7fd fc80 	bl	8001300 <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a02:	e00a      	b.n	8003a1a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a04:	f7fd fc7c 	bl	8001300 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e0b5      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a1a:	4b3e      	ldr	r3, [pc, #248]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1ee      	bne.n	8003a04 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a26:	7dfb      	ldrb	r3, [r7, #23]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d105      	bne.n	8003a38 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a2c:	4b39      	ldr	r3, [pc, #228]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a30:	4a38      	ldr	r2, [pc, #224]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003a32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a36:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f000 80a1 	beq.w	8003b84 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a42:	4b34      	ldr	r3, [pc, #208]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f003 030c 	and.w	r3, r3, #12
 8003a4a:	2b08      	cmp	r3, #8
 8003a4c:	d05c      	beq.n	8003b08 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d141      	bne.n	8003ada <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a56:	4b31      	ldr	r3, [pc, #196]	; (8003b1c <HAL_RCC_OscConfig+0x478>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a5c:	f7fd fc50 	bl	8001300 <HAL_GetTick>
 8003a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a62:	e008      	b.n	8003a76 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a64:	f7fd fc4c 	bl	8001300 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e087      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a76:	4b27      	ldr	r3, [pc, #156]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1f0      	bne.n	8003a64 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	69da      	ldr	r2, [r3, #28]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	431a      	orrs	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a90:	019b      	lsls	r3, r3, #6
 8003a92:	431a      	orrs	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a98:	085b      	lsrs	r3, r3, #1
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	041b      	lsls	r3, r3, #16
 8003a9e:	431a      	orrs	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa4:	061b      	lsls	r3, r3, #24
 8003aa6:	491b      	ldr	r1, [pc, #108]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003aac:	4b1b      	ldr	r3, [pc, #108]	; (8003b1c <HAL_RCC_OscConfig+0x478>)
 8003aae:	2201      	movs	r2, #1
 8003ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab2:	f7fd fc25 	bl	8001300 <HAL_GetTick>
 8003ab6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ab8:	e008      	b.n	8003acc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aba:	f7fd fc21 	bl	8001300 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d901      	bls.n	8003acc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e05c      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003acc:	4b11      	ldr	r3, [pc, #68]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d0f0      	beq.n	8003aba <HAL_RCC_OscConfig+0x416>
 8003ad8:	e054      	b.n	8003b84 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ada:	4b10      	ldr	r3, [pc, #64]	; (8003b1c <HAL_RCC_OscConfig+0x478>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae0:	f7fd fc0e 	bl	8001300 <HAL_GetTick>
 8003ae4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ae6:	e008      	b.n	8003afa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ae8:	f7fd fc0a 	bl	8001300 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e045      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003afa:	4b06      	ldr	r3, [pc, #24]	; (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1f0      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x444>
 8003b06:	e03d      	b.n	8003b84 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d107      	bne.n	8003b20 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e038      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
 8003b14:	40023800 	.word	0x40023800
 8003b18:	40007000 	.word	0x40007000
 8003b1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b20:	4b1b      	ldr	r3, [pc, #108]	; (8003b90 <HAL_RCC_OscConfig+0x4ec>)
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d028      	beq.n	8003b80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d121      	bne.n	8003b80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d11a      	bne.n	8003b80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b50:	4013      	ands	r3, r2
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d111      	bne.n	8003b80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b66:	085b      	lsrs	r3, r3, #1
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d107      	bne.n	8003b80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d001      	beq.n	8003b84 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e000      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3718      	adds	r7, #24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	40023800 	.word	0x40023800

08003b94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d101      	bne.n	8003ba8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e0cc      	b.n	8003d42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ba8:	4b68      	ldr	r3, [pc, #416]	; (8003d4c <HAL_RCC_ClockConfig+0x1b8>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0307 	and.w	r3, r3, #7
 8003bb0:	683a      	ldr	r2, [r7, #0]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d90c      	bls.n	8003bd0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bb6:	4b65      	ldr	r3, [pc, #404]	; (8003d4c <HAL_RCC_ClockConfig+0x1b8>)
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	b2d2      	uxtb	r2, r2
 8003bbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bbe:	4b63      	ldr	r3, [pc, #396]	; (8003d4c <HAL_RCC_ClockConfig+0x1b8>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0307 	and.w	r3, r3, #7
 8003bc6:	683a      	ldr	r2, [r7, #0]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d001      	beq.n	8003bd0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e0b8      	b.n	8003d42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d020      	beq.n	8003c1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0304 	and.w	r3, r3, #4
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d005      	beq.n	8003bf4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003be8:	4b59      	ldr	r3, [pc, #356]	; (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	4a58      	ldr	r2, [pc, #352]	; (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003bee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003bf2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0308 	and.w	r3, r3, #8
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d005      	beq.n	8003c0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c00:	4b53      	ldr	r3, [pc, #332]	; (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	4a52      	ldr	r2, [pc, #328]	; (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003c06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c0c:	4b50      	ldr	r3, [pc, #320]	; (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	494d      	ldr	r1, [pc, #308]	; (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d044      	beq.n	8003cb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d107      	bne.n	8003c42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c32:	4b47      	ldr	r3, [pc, #284]	; (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d119      	bne.n	8003c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e07f      	b.n	8003d42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d003      	beq.n	8003c52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c4e:	2b03      	cmp	r3, #3
 8003c50:	d107      	bne.n	8003c62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c52:	4b3f      	ldr	r3, [pc, #252]	; (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d109      	bne.n	8003c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e06f      	b.n	8003d42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c62:	4b3b      	ldr	r3, [pc, #236]	; (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d101      	bne.n	8003c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e067      	b.n	8003d42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c72:	4b37      	ldr	r3, [pc, #220]	; (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f023 0203 	bic.w	r2, r3, #3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	4934      	ldr	r1, [pc, #208]	; (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c84:	f7fd fb3c 	bl	8001300 <HAL_GetTick>
 8003c88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c8a:	e00a      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c8c:	f7fd fb38 	bl	8001300 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e04f      	b.n	8003d42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ca2:	4b2b      	ldr	r3, [pc, #172]	; (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f003 020c 	and.w	r2, r3, #12
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d1eb      	bne.n	8003c8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cb4:	4b25      	ldr	r3, [pc, #148]	; (8003d4c <HAL_RCC_ClockConfig+0x1b8>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0307 	and.w	r3, r3, #7
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d20c      	bcs.n	8003cdc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cc2:	4b22      	ldr	r3, [pc, #136]	; (8003d4c <HAL_RCC_ClockConfig+0x1b8>)
 8003cc4:	683a      	ldr	r2, [r7, #0]
 8003cc6:	b2d2      	uxtb	r2, r2
 8003cc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cca:	4b20      	ldr	r3, [pc, #128]	; (8003d4c <HAL_RCC_ClockConfig+0x1b8>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0307 	and.w	r3, r3, #7
 8003cd2:	683a      	ldr	r2, [r7, #0]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d001      	beq.n	8003cdc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e032      	b.n	8003d42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0304 	and.w	r3, r3, #4
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d008      	beq.n	8003cfa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ce8:	4b19      	ldr	r3, [pc, #100]	; (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	4916      	ldr	r1, [pc, #88]	; (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0308 	and.w	r3, r3, #8
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d009      	beq.n	8003d1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d06:	4b12      	ldr	r3, [pc, #72]	; (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	00db      	lsls	r3, r3, #3
 8003d14:	490e      	ldr	r1, [pc, #56]	; (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d1a:	f000 f821 	bl	8003d60 <HAL_RCC_GetSysClockFreq>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	4b0b      	ldr	r3, [pc, #44]	; (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	091b      	lsrs	r3, r3, #4
 8003d26:	f003 030f 	and.w	r3, r3, #15
 8003d2a:	490a      	ldr	r1, [pc, #40]	; (8003d54 <HAL_RCC_ClockConfig+0x1c0>)
 8003d2c:	5ccb      	ldrb	r3, [r1, r3]
 8003d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d32:	4a09      	ldr	r2, [pc, #36]	; (8003d58 <HAL_RCC_ClockConfig+0x1c4>)
 8003d34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d36:	4b09      	ldr	r3, [pc, #36]	; (8003d5c <HAL_RCC_ClockConfig+0x1c8>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7fd fa9c 	bl	8001278 <HAL_InitTick>

  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	40023c00 	.word	0x40023c00
 8003d50:	40023800 	.word	0x40023800
 8003d54:	08013128 	.word	0x08013128
 8003d58:	2000002c 	.word	0x2000002c
 8003d5c:	20000030 	.word	0x20000030

08003d60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d64:	b090      	sub	sp, #64	; 0x40
 8003d66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	637b      	str	r3, [r7, #52]	; 0x34
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d70:	2300      	movs	r3, #0
 8003d72:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003d74:	2300      	movs	r3, #0
 8003d76:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d78:	4b59      	ldr	r3, [pc, #356]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f003 030c 	and.w	r3, r3, #12
 8003d80:	2b08      	cmp	r3, #8
 8003d82:	d00d      	beq.n	8003da0 <HAL_RCC_GetSysClockFreq+0x40>
 8003d84:	2b08      	cmp	r3, #8
 8003d86:	f200 80a1 	bhi.w	8003ecc <HAL_RCC_GetSysClockFreq+0x16c>
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d002      	beq.n	8003d94 <HAL_RCC_GetSysClockFreq+0x34>
 8003d8e:	2b04      	cmp	r3, #4
 8003d90:	d003      	beq.n	8003d9a <HAL_RCC_GetSysClockFreq+0x3a>
 8003d92:	e09b      	b.n	8003ecc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d94:	4b53      	ldr	r3, [pc, #332]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d96:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003d98:	e09b      	b.n	8003ed2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d9a:	4b53      	ldr	r3, [pc, #332]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d9c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d9e:	e098      	b.n	8003ed2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003da0:	4b4f      	ldr	r3, [pc, #316]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003da8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003daa:	4b4d      	ldr	r3, [pc, #308]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d028      	beq.n	8003e08 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003db6:	4b4a      	ldr	r3, [pc, #296]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	099b      	lsrs	r3, r3, #6
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	623b      	str	r3, [r7, #32]
 8003dc0:	627a      	str	r2, [r7, #36]	; 0x24
 8003dc2:	6a3b      	ldr	r3, [r7, #32]
 8003dc4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003dc8:	2100      	movs	r1, #0
 8003dca:	4b47      	ldr	r3, [pc, #284]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003dcc:	fb03 f201 	mul.w	r2, r3, r1
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	fb00 f303 	mul.w	r3, r0, r3
 8003dd6:	4413      	add	r3, r2
 8003dd8:	4a43      	ldr	r2, [pc, #268]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003dda:	fba0 1202 	umull	r1, r2, r0, r2
 8003dde:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003de0:	460a      	mov	r2, r1
 8003de2:	62ba      	str	r2, [r7, #40]	; 0x28
 8003de4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003de6:	4413      	add	r3, r2
 8003de8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dec:	2200      	movs	r2, #0
 8003dee:	61bb      	str	r3, [r7, #24]
 8003df0:	61fa      	str	r2, [r7, #28]
 8003df2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003df6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003dfa:	f7fc f9ed 	bl	80001d8 <__aeabi_uldivmod>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	460b      	mov	r3, r1
 8003e02:	4613      	mov	r3, r2
 8003e04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e06:	e053      	b.n	8003eb0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e08:	4b35      	ldr	r3, [pc, #212]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	099b      	lsrs	r3, r3, #6
 8003e0e:	2200      	movs	r2, #0
 8003e10:	613b      	str	r3, [r7, #16]
 8003e12:	617a      	str	r2, [r7, #20]
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003e1a:	f04f 0b00 	mov.w	fp, #0
 8003e1e:	4652      	mov	r2, sl
 8003e20:	465b      	mov	r3, fp
 8003e22:	f04f 0000 	mov.w	r0, #0
 8003e26:	f04f 0100 	mov.w	r1, #0
 8003e2a:	0159      	lsls	r1, r3, #5
 8003e2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e30:	0150      	lsls	r0, r2, #5
 8003e32:	4602      	mov	r2, r0
 8003e34:	460b      	mov	r3, r1
 8003e36:	ebb2 080a 	subs.w	r8, r2, sl
 8003e3a:	eb63 090b 	sbc.w	r9, r3, fp
 8003e3e:	f04f 0200 	mov.w	r2, #0
 8003e42:	f04f 0300 	mov.w	r3, #0
 8003e46:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003e4a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003e4e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003e52:	ebb2 0408 	subs.w	r4, r2, r8
 8003e56:	eb63 0509 	sbc.w	r5, r3, r9
 8003e5a:	f04f 0200 	mov.w	r2, #0
 8003e5e:	f04f 0300 	mov.w	r3, #0
 8003e62:	00eb      	lsls	r3, r5, #3
 8003e64:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e68:	00e2      	lsls	r2, r4, #3
 8003e6a:	4614      	mov	r4, r2
 8003e6c:	461d      	mov	r5, r3
 8003e6e:	eb14 030a 	adds.w	r3, r4, sl
 8003e72:	603b      	str	r3, [r7, #0]
 8003e74:	eb45 030b 	adc.w	r3, r5, fp
 8003e78:	607b      	str	r3, [r7, #4]
 8003e7a:	f04f 0200 	mov.w	r2, #0
 8003e7e:	f04f 0300 	mov.w	r3, #0
 8003e82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e86:	4629      	mov	r1, r5
 8003e88:	028b      	lsls	r3, r1, #10
 8003e8a:	4621      	mov	r1, r4
 8003e8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e90:	4621      	mov	r1, r4
 8003e92:	028a      	lsls	r2, r1, #10
 8003e94:	4610      	mov	r0, r2
 8003e96:	4619      	mov	r1, r3
 8003e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	60bb      	str	r3, [r7, #8]
 8003e9e:	60fa      	str	r2, [r7, #12]
 8003ea0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ea4:	f7fc f998 	bl	80001d8 <__aeabi_uldivmod>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	460b      	mov	r3, r1
 8003eac:	4613      	mov	r3, r2
 8003eae:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003eb0:	4b0b      	ldr	r3, [pc, #44]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	0c1b      	lsrs	r3, r3, #16
 8003eb6:	f003 0303 	and.w	r3, r3, #3
 8003eba:	3301      	adds	r3, #1
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003ec0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003eca:	e002      	b.n	8003ed2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ecc:	4b05      	ldr	r3, [pc, #20]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003ece:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ed0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3740      	adds	r7, #64	; 0x40
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ede:	bf00      	nop
 8003ee0:	40023800 	.word	0x40023800
 8003ee4:	00f42400 	.word	0x00f42400
 8003ee8:	018cba80 	.word	0x018cba80

08003eec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ef0:	4b03      	ldr	r3, [pc, #12]	; (8003f00 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	2000002c 	.word	0x2000002c

08003f04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f08:	f7ff fff0 	bl	8003eec <HAL_RCC_GetHCLKFreq>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	4b05      	ldr	r3, [pc, #20]	; (8003f24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	0a9b      	lsrs	r3, r3, #10
 8003f14:	f003 0307 	and.w	r3, r3, #7
 8003f18:	4903      	ldr	r1, [pc, #12]	; (8003f28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f1a:	5ccb      	ldrb	r3, [r1, r3]
 8003f1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	40023800 	.word	0x40023800
 8003f28:	08013138 	.word	0x08013138

08003f2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f30:	f7ff ffdc 	bl	8003eec <HAL_RCC_GetHCLKFreq>
 8003f34:	4602      	mov	r2, r0
 8003f36:	4b05      	ldr	r3, [pc, #20]	; (8003f4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	0b5b      	lsrs	r3, r3, #13
 8003f3c:	f003 0307 	and.w	r3, r3, #7
 8003f40:	4903      	ldr	r1, [pc, #12]	; (8003f50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f42:	5ccb      	ldrb	r3, [r1, r3]
 8003f44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	40023800 	.word	0x40023800
 8003f50:	08013138 	.word	0x08013138

08003f54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d101      	bne.n	8003f66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e07b      	b.n	800405e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d108      	bne.n	8003f80 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f76:	d009      	beq.n	8003f8c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	61da      	str	r2, [r3, #28]
 8003f7e:	e005      	b.n	8003f8c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d106      	bne.n	8003fac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f7fc ff82 	bl	8000eb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2202      	movs	r2, #2
 8003fb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fc2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003fd4:	431a      	orrs	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	431a      	orrs	r2, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	f003 0301 	and.w	r3, r3, #1
 8003ff2:	431a      	orrs	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ffc:	431a      	orrs	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	69db      	ldr	r3, [r3, #28]
 8004002:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004006:	431a      	orrs	r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a1b      	ldr	r3, [r3, #32]
 800400c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004010:	ea42 0103 	orr.w	r1, r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004018:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	430a      	orrs	r2, r1
 8004022:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	0c1b      	lsrs	r3, r3, #16
 800402a:	f003 0104 	and.w	r1, r3, #4
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004032:	f003 0210 	and.w	r2, r3, #16
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	430a      	orrs	r2, r1
 800403c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	69da      	ldr	r2, [r3, #28]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800404c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3708      	adds	r7, #8
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004066:	b580      	push	{r7, lr}
 8004068:	b088      	sub	sp, #32
 800406a:	af00      	add	r7, sp, #0
 800406c:	60f8      	str	r0, [r7, #12]
 800406e:	60b9      	str	r1, [r7, #8]
 8004070:	603b      	str	r3, [r7, #0]
 8004072:	4613      	mov	r3, r2
 8004074:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004076:	2300      	movs	r3, #0
 8004078:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004080:	2b01      	cmp	r3, #1
 8004082:	d101      	bne.n	8004088 <HAL_SPI_Transmit+0x22>
 8004084:	2302      	movs	r3, #2
 8004086:	e126      	b.n	80042d6 <HAL_SPI_Transmit+0x270>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004090:	f7fd f936 	bl	8001300 <HAL_GetTick>
 8004094:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004096:	88fb      	ldrh	r3, [r7, #6]
 8004098:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d002      	beq.n	80040ac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80040a6:	2302      	movs	r3, #2
 80040a8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80040aa:	e10b      	b.n	80042c4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d002      	beq.n	80040b8 <HAL_SPI_Transmit+0x52>
 80040b2:	88fb      	ldrh	r3, [r7, #6]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d102      	bne.n	80040be <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 80040bc:	e102      	b.n	80042c4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2203      	movs	r2, #3
 80040c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	68ba      	ldr	r2, [r7, #8]
 80040d0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	88fa      	ldrh	r2, [r7, #6]
 80040d6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	88fa      	ldrh	r2, [r7, #6]
 80040dc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2200      	movs	r2, #0
 80040fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004104:	d10f      	bne.n	8004126 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004114:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004124:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004130:	2b40      	cmp	r3, #64	; 0x40
 8004132:	d007      	beq.n	8004144 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004142:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800414c:	d14b      	bne.n	80041e6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d002      	beq.n	800415c <HAL_SPI_Transmit+0xf6>
 8004156:	8afb      	ldrh	r3, [r7, #22]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d13e      	bne.n	80041da <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004160:	881a      	ldrh	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416c:	1c9a      	adds	r2, r3, #2
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004176:	b29b      	uxth	r3, r3
 8004178:	3b01      	subs	r3, #1
 800417a:	b29a      	uxth	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004180:	e02b      	b.n	80041da <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f003 0302 	and.w	r3, r3, #2
 800418c:	2b02      	cmp	r3, #2
 800418e:	d112      	bne.n	80041b6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004194:	881a      	ldrh	r2, [r3, #0]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a0:	1c9a      	adds	r2, r3, #2
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	3b01      	subs	r3, #1
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	86da      	strh	r2, [r3, #54]	; 0x36
 80041b4:	e011      	b.n	80041da <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041b6:	f7fd f8a3 	bl	8001300 <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	683a      	ldr	r2, [r7, #0]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d803      	bhi.n	80041ce <HAL_SPI_Transmit+0x168>
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041cc:	d102      	bne.n	80041d4 <HAL_SPI_Transmit+0x16e>
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d102      	bne.n	80041da <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80041d8:	e074      	b.n	80042c4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041de:	b29b      	uxth	r3, r3
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1ce      	bne.n	8004182 <HAL_SPI_Transmit+0x11c>
 80041e4:	e04c      	b.n	8004280 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d002      	beq.n	80041f4 <HAL_SPI_Transmit+0x18e>
 80041ee:	8afb      	ldrh	r3, [r7, #22]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d140      	bne.n	8004276 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	330c      	adds	r3, #12
 80041fe:	7812      	ldrb	r2, [r2, #0]
 8004200:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004206:	1c5a      	adds	r2, r3, #1
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004210:	b29b      	uxth	r3, r3
 8004212:	3b01      	subs	r3, #1
 8004214:	b29a      	uxth	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800421a:	e02c      	b.n	8004276 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	2b02      	cmp	r3, #2
 8004228:	d113      	bne.n	8004252 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	330c      	adds	r3, #12
 8004234:	7812      	ldrb	r2, [r2, #0]
 8004236:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423c:	1c5a      	adds	r2, r3, #1
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004246:	b29b      	uxth	r3, r3
 8004248:	3b01      	subs	r3, #1
 800424a:	b29a      	uxth	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004250:	e011      	b.n	8004276 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004252:	f7fd f855 	bl	8001300 <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	429a      	cmp	r2, r3
 8004260:	d803      	bhi.n	800426a <HAL_SPI_Transmit+0x204>
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004268:	d102      	bne.n	8004270 <HAL_SPI_Transmit+0x20a>
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d102      	bne.n	8004276 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004274:	e026      	b.n	80042c4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800427a:	b29b      	uxth	r3, r3
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1cd      	bne.n	800421c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004280:	69ba      	ldr	r2, [r7, #24]
 8004282:	6839      	ldr	r1, [r7, #0]
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f000 f9df 	bl	8004648 <SPI_EndRxTxTransaction>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d002      	beq.n	8004296 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2220      	movs	r2, #32
 8004294:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d10a      	bne.n	80042b4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800429e:	2300      	movs	r3, #0
 80042a0:	613b      	str	r3, [r7, #16]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	613b      	str	r3, [r7, #16]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	613b      	str	r3, [r7, #16]
 80042b2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d002      	beq.n	80042c2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	77fb      	strb	r3, [r7, #31]
 80042c0:	e000      	b.n	80042c4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80042c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80042d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3720      	adds	r7, #32
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
	...

080042e0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b088      	sub	sp, #32
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	099b      	lsrs	r3, r3, #6
 80042fc:	f003 0301 	and.w	r3, r3, #1
 8004300:	2b00      	cmp	r3, #0
 8004302:	d10f      	bne.n	8004324 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00a      	beq.n	8004324 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	099b      	lsrs	r3, r3, #6
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b00      	cmp	r3, #0
 8004318:	d004      	beq.n	8004324 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	4798      	blx	r3
    return;
 8004322:	e0d7      	b.n	80044d4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	085b      	lsrs	r3, r3, #1
 8004328:	f003 0301 	and.w	r3, r3, #1
 800432c:	2b00      	cmp	r3, #0
 800432e:	d00a      	beq.n	8004346 <HAL_SPI_IRQHandler+0x66>
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	09db      	lsrs	r3, r3, #7
 8004334:	f003 0301 	and.w	r3, r3, #1
 8004338:	2b00      	cmp	r3, #0
 800433a:	d004      	beq.n	8004346 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	4798      	blx	r3
    return;
 8004344:	e0c6      	b.n	80044d4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	095b      	lsrs	r3, r3, #5
 800434a:	f003 0301 	and.w	r3, r3, #1
 800434e:	2b00      	cmp	r3, #0
 8004350:	d10c      	bne.n	800436c <HAL_SPI_IRQHandler+0x8c>
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	099b      	lsrs	r3, r3, #6
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	2b00      	cmp	r3, #0
 800435c:	d106      	bne.n	800436c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	0a1b      	lsrs	r3, r3, #8
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	2b00      	cmp	r3, #0
 8004368:	f000 80b4 	beq.w	80044d4 <HAL_SPI_IRQHandler+0x1f4>
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	095b      	lsrs	r3, r3, #5
 8004370:	f003 0301 	and.w	r3, r3, #1
 8004374:	2b00      	cmp	r3, #0
 8004376:	f000 80ad 	beq.w	80044d4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	099b      	lsrs	r3, r3, #6
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	2b00      	cmp	r3, #0
 8004384:	d023      	beq.n	80043ce <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b03      	cmp	r3, #3
 8004390:	d011      	beq.n	80043b6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004396:	f043 0204 	orr.w	r2, r3, #4
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800439e:	2300      	movs	r3, #0
 80043a0:	617b      	str	r3, [r7, #20]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	617b      	str	r3, [r7, #20]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	617b      	str	r3, [r7, #20]
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	e00b      	b.n	80043ce <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043b6:	2300      	movs	r3, #0
 80043b8:	613b      	str	r3, [r7, #16]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	613b      	str	r3, [r7, #16]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	613b      	str	r3, [r7, #16]
 80043ca:	693b      	ldr	r3, [r7, #16]
        return;
 80043cc:	e082      	b.n	80044d4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	095b      	lsrs	r3, r3, #5
 80043d2:	f003 0301 	and.w	r3, r3, #1
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d014      	beq.n	8004404 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043de:	f043 0201 	orr.w	r2, r3, #1
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80043e6:	2300      	movs	r3, #0
 80043e8:	60fb      	str	r3, [r7, #12]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	60fb      	str	r3, [r7, #12]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004400:	601a      	str	r2, [r3, #0]
 8004402:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	0a1b      	lsrs	r3, r3, #8
 8004408:	f003 0301 	and.w	r3, r3, #1
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00c      	beq.n	800442a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004414:	f043 0208 	orr.w	r2, r3, #8
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800441c:	2300      	movs	r3, #0
 800441e:	60bb      	str	r3, [r7, #8]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	60bb      	str	r3, [r7, #8]
 8004428:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800442e:	2b00      	cmp	r3, #0
 8004430:	d04f      	beq.n	80044d2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	685a      	ldr	r2, [r3, #4]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004440:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2201      	movs	r2, #1
 8004446:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	f003 0302 	and.w	r3, r3, #2
 8004450:	2b00      	cmp	r3, #0
 8004452:	d104      	bne.n	800445e <HAL_SPI_IRQHandler+0x17e>
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	2b00      	cmp	r3, #0
 800445c:	d034      	beq.n	80044c8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	685a      	ldr	r2, [r3, #4]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f022 0203 	bic.w	r2, r2, #3
 800446c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004472:	2b00      	cmp	r3, #0
 8004474:	d011      	beq.n	800449a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800447a:	4a18      	ldr	r2, [pc, #96]	; (80044dc <HAL_SPI_IRQHandler+0x1fc>)
 800447c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004482:	4618      	mov	r0, r3
 8004484:	f7fd f91f 	bl	80016c6 <HAL_DMA_Abort_IT>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d005      	beq.n	800449a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004492:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d016      	beq.n	80044d0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044a6:	4a0d      	ldr	r2, [pc, #52]	; (80044dc <HAL_SPI_IRQHandler+0x1fc>)
 80044a8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044ae:	4618      	mov	r0, r3
 80044b0:	f7fd f909 	bl	80016c6 <HAL_DMA_Abort_IT>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00a      	beq.n	80044d0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80044c6:	e003      	b.n	80044d0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 f809 	bl	80044e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80044ce:	e000      	b.n	80044d2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80044d0:	bf00      	nop
    return;
 80044d2:	bf00      	nop
  }
}
 80044d4:	3720      	adds	r7, #32
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	08004511 	.word	0x08004511

080044e0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004502:	b2db      	uxtb	r3, r3
}
 8004504:	4618      	mov	r0, r3
 8004506:	370c      	adds	r7, #12
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2200      	movs	r2, #0
 8004522:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	f7ff ffd8 	bl	80044e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004530:	bf00      	nop
 8004532:	3710      	adds	r7, #16
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b088      	sub	sp, #32
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	603b      	str	r3, [r7, #0]
 8004544:	4613      	mov	r3, r2
 8004546:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004548:	f7fc feda 	bl	8001300 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004550:	1a9b      	subs	r3, r3, r2
 8004552:	683a      	ldr	r2, [r7, #0]
 8004554:	4413      	add	r3, r2
 8004556:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004558:	f7fc fed2 	bl	8001300 <HAL_GetTick>
 800455c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800455e:	4b39      	ldr	r3, [pc, #228]	; (8004644 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	015b      	lsls	r3, r3, #5
 8004564:	0d1b      	lsrs	r3, r3, #20
 8004566:	69fa      	ldr	r2, [r7, #28]
 8004568:	fb02 f303 	mul.w	r3, r2, r3
 800456c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800456e:	e054      	b.n	800461a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004576:	d050      	beq.n	800461a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004578:	f7fc fec2 	bl	8001300 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	69fa      	ldr	r2, [r7, #28]
 8004584:	429a      	cmp	r2, r3
 8004586:	d902      	bls.n	800458e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d13d      	bne.n	800460a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	685a      	ldr	r2, [r3, #4]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800459c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045a6:	d111      	bne.n	80045cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045b0:	d004      	beq.n	80045bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045ba:	d107      	bne.n	80045cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045d4:	d10f      	bne.n	80045f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045e4:	601a      	str	r2, [r3, #0]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2201      	movs	r2, #1
 80045fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e017      	b.n	800463a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d101      	bne.n	8004614 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004610:	2300      	movs	r3, #0
 8004612:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	3b01      	subs	r3, #1
 8004618:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	689a      	ldr	r2, [r3, #8]
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	4013      	ands	r3, r2
 8004624:	68ba      	ldr	r2, [r7, #8]
 8004626:	429a      	cmp	r2, r3
 8004628:	bf0c      	ite	eq
 800462a:	2301      	moveq	r3, #1
 800462c:	2300      	movne	r3, #0
 800462e:	b2db      	uxtb	r3, r3
 8004630:	461a      	mov	r2, r3
 8004632:	79fb      	ldrb	r3, [r7, #7]
 8004634:	429a      	cmp	r2, r3
 8004636:	d19b      	bne.n	8004570 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3720      	adds	r7, #32
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	2000002c 	.word	0x2000002c

08004648 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b088      	sub	sp, #32
 800464c:	af02      	add	r7, sp, #8
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004654:	4b1b      	ldr	r3, [pc, #108]	; (80046c4 <SPI_EndRxTxTransaction+0x7c>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a1b      	ldr	r2, [pc, #108]	; (80046c8 <SPI_EndRxTxTransaction+0x80>)
 800465a:	fba2 2303 	umull	r2, r3, r2, r3
 800465e:	0d5b      	lsrs	r3, r3, #21
 8004660:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004664:	fb02 f303 	mul.w	r3, r2, r3
 8004668:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004672:	d112      	bne.n	800469a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	9300      	str	r3, [sp, #0]
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	2200      	movs	r2, #0
 800467c:	2180      	movs	r1, #128	; 0x80
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	f7ff ff5a 	bl	8004538 <SPI_WaitFlagStateUntilTimeout>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d016      	beq.n	80046b8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800468e:	f043 0220 	orr.w	r2, r3, #32
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e00f      	b.n	80046ba <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00a      	beq.n	80046b6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	3b01      	subs	r3, #1
 80046a4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046b0:	2b80      	cmp	r3, #128	; 0x80
 80046b2:	d0f2      	beq.n	800469a <SPI_EndRxTxTransaction+0x52>
 80046b4:	e000      	b.n	80046b8 <SPI_EndRxTxTransaction+0x70>
        break;
 80046b6:	bf00      	nop
  }

  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3718      	adds	r7, #24
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	2000002c 	.word	0x2000002c
 80046c8:	165e9f81 	.word	0x165e9f81

080046cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d101      	bne.n	80046de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e03f      	b.n	800475e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d106      	bne.n	80046f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f7fc fd24 	bl	8001140 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2224      	movs	r2, #36	; 0x24
 80046fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68da      	ldr	r2, [r3, #12]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800470e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 fd7b 	bl	800520c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	691a      	ldr	r2, [r3, #16]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004724:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	695a      	ldr	r2, [r3, #20]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004734:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68da      	ldr	r2, [r3, #12]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004744:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2220      	movs	r2, #32
 8004750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2220      	movs	r2, #32
 8004758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3708      	adds	r7, #8
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}

08004766 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004766:	b580      	push	{r7, lr}
 8004768:	b08a      	sub	sp, #40	; 0x28
 800476a:	af02      	add	r7, sp, #8
 800476c:	60f8      	str	r0, [r7, #12]
 800476e:	60b9      	str	r1, [r7, #8]
 8004770:	603b      	str	r3, [r7, #0]
 8004772:	4613      	mov	r3, r2
 8004774:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004776:	2300      	movs	r3, #0
 8004778:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004780:	b2db      	uxtb	r3, r3
 8004782:	2b20      	cmp	r3, #32
 8004784:	d17c      	bne.n	8004880 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d002      	beq.n	8004792 <HAL_UART_Transmit+0x2c>
 800478c:	88fb      	ldrh	r3, [r7, #6]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d101      	bne.n	8004796 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e075      	b.n	8004882 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800479c:	2b01      	cmp	r3, #1
 800479e:	d101      	bne.n	80047a4 <HAL_UART_Transmit+0x3e>
 80047a0:	2302      	movs	r3, #2
 80047a2:	e06e      	b.n	8004882 <HAL_UART_Transmit+0x11c>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2221      	movs	r2, #33	; 0x21
 80047b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047ba:	f7fc fda1 	bl	8001300 <HAL_GetTick>
 80047be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	88fa      	ldrh	r2, [r7, #6]
 80047c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	88fa      	ldrh	r2, [r7, #6]
 80047ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047d4:	d108      	bne.n	80047e8 <HAL_UART_Transmit+0x82>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d104      	bne.n	80047e8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80047de:	2300      	movs	r3, #0
 80047e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	61bb      	str	r3, [r7, #24]
 80047e6:	e003      	b.n	80047f0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047ec:	2300      	movs	r3, #0
 80047ee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80047f8:	e02a      	b.n	8004850 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	9300      	str	r3, [sp, #0]
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	2200      	movs	r2, #0
 8004802:	2180      	movs	r1, #128	; 0x80
 8004804:	68f8      	ldr	r0, [r7, #12]
 8004806:	f000 faf9 	bl	8004dfc <UART_WaitOnFlagUntilTimeout>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d001      	beq.n	8004814 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e036      	b.n	8004882 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d10b      	bne.n	8004832 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	881b      	ldrh	r3, [r3, #0]
 800481e:	461a      	mov	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004828:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	3302      	adds	r3, #2
 800482e:	61bb      	str	r3, [r7, #24]
 8004830:	e007      	b.n	8004842 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	781a      	ldrb	r2, [r3, #0]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	3301      	adds	r3, #1
 8004840:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004846:	b29b      	uxth	r3, r3
 8004848:	3b01      	subs	r3, #1
 800484a:	b29a      	uxth	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004854:	b29b      	uxth	r3, r3
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1cf      	bne.n	80047fa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	9300      	str	r3, [sp, #0]
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	2200      	movs	r2, #0
 8004862:	2140      	movs	r1, #64	; 0x40
 8004864:	68f8      	ldr	r0, [r7, #12]
 8004866:	f000 fac9 	bl	8004dfc <UART_WaitOnFlagUntilTimeout>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d001      	beq.n	8004874 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004870:	2303      	movs	r3, #3
 8004872:	e006      	b.n	8004882 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2220      	movs	r2, #32
 8004878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800487c:	2300      	movs	r3, #0
 800487e:	e000      	b.n	8004882 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004880:	2302      	movs	r3, #2
  }
}
 8004882:	4618      	mov	r0, r3
 8004884:	3720      	adds	r7, #32
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
	...

0800488c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b0ba      	sub	sp, #232	; 0xe8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80048b2:	2300      	movs	r3, #0
 80048b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80048b8:	2300      	movs	r3, #0
 80048ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80048be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048c2:	f003 030f 	and.w	r3, r3, #15
 80048c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80048ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d10f      	bne.n	80048f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048d6:	f003 0320 	and.w	r3, r3, #32
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d009      	beq.n	80048f2 <HAL_UART_IRQHandler+0x66>
 80048de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048e2:	f003 0320 	and.w	r3, r3, #32
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d003      	beq.n	80048f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 fbd3 	bl	8005096 <UART_Receive_IT>
      return;
 80048f0:	e256      	b.n	8004da0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80048f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	f000 80de 	beq.w	8004ab8 <HAL_UART_IRQHandler+0x22c>
 80048fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004900:	f003 0301 	and.w	r3, r3, #1
 8004904:	2b00      	cmp	r3, #0
 8004906:	d106      	bne.n	8004916 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800490c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004910:	2b00      	cmp	r3, #0
 8004912:	f000 80d1 	beq.w	8004ab8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800491a:	f003 0301 	and.w	r3, r3, #1
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00b      	beq.n	800493a <HAL_UART_IRQHandler+0xae>
 8004922:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800492a:	2b00      	cmp	r3, #0
 800492c:	d005      	beq.n	800493a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004932:	f043 0201 	orr.w	r2, r3, #1
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800493a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800493e:	f003 0304 	and.w	r3, r3, #4
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00b      	beq.n	800495e <HAL_UART_IRQHandler+0xd2>
 8004946:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	2b00      	cmp	r3, #0
 8004950:	d005      	beq.n	800495e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004956:	f043 0202 	orr.w	r2, r3, #2
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800495e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004962:	f003 0302 	and.w	r3, r3, #2
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00b      	beq.n	8004982 <HAL_UART_IRQHandler+0xf6>
 800496a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800496e:	f003 0301 	and.w	r3, r3, #1
 8004972:	2b00      	cmp	r3, #0
 8004974:	d005      	beq.n	8004982 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497a:	f043 0204 	orr.w	r2, r3, #4
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004986:	f003 0308 	and.w	r3, r3, #8
 800498a:	2b00      	cmp	r3, #0
 800498c:	d011      	beq.n	80049b2 <HAL_UART_IRQHandler+0x126>
 800498e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004992:	f003 0320 	and.w	r3, r3, #32
 8004996:	2b00      	cmp	r3, #0
 8004998:	d105      	bne.n	80049a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800499a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d005      	beq.n	80049b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049aa:	f043 0208 	orr.w	r2, r3, #8
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	f000 81ed 	beq.w	8004d96 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049c0:	f003 0320 	and.w	r3, r3, #32
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d008      	beq.n	80049da <HAL_UART_IRQHandler+0x14e>
 80049c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049cc:	f003 0320 	and.w	r3, r3, #32
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d002      	beq.n	80049da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f000 fb5e 	bl	8005096 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	695b      	ldr	r3, [r3, #20]
 80049e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e4:	2b40      	cmp	r3, #64	; 0x40
 80049e6:	bf0c      	ite	eq
 80049e8:	2301      	moveq	r3, #1
 80049ea:	2300      	movne	r3, #0
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f6:	f003 0308 	and.w	r3, r3, #8
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d103      	bne.n	8004a06 <HAL_UART_IRQHandler+0x17a>
 80049fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d04f      	beq.n	8004aa6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 fa66 	bl	8004ed8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a16:	2b40      	cmp	r3, #64	; 0x40
 8004a18:	d141      	bne.n	8004a9e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	3314      	adds	r3, #20
 8004a20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a28:	e853 3f00 	ldrex	r3, [r3]
 8004a2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004a30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	3314      	adds	r3, #20
 8004a42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004a46:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004a4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004a52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004a56:	e841 2300 	strex	r3, r2, [r1]
 8004a5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004a5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1d9      	bne.n	8004a1a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d013      	beq.n	8004a96 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a72:	4a7d      	ldr	r2, [pc, #500]	; (8004c68 <HAL_UART_IRQHandler+0x3dc>)
 8004a74:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7fc fe23 	bl	80016c6 <HAL_DMA_Abort_IT>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d016      	beq.n	8004ab4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a90:	4610      	mov	r0, r2
 8004a92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a94:	e00e      	b.n	8004ab4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 f99a 	bl	8004dd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a9c:	e00a      	b.n	8004ab4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 f996 	bl	8004dd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aa4:	e006      	b.n	8004ab4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 f992 	bl	8004dd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004ab2:	e170      	b.n	8004d96 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ab4:	bf00      	nop
    return;
 8004ab6:	e16e      	b.n	8004d96 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	f040 814a 	bne.w	8004d56 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ac6:	f003 0310 	and.w	r3, r3, #16
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	f000 8143 	beq.w	8004d56 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004ad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ad4:	f003 0310 	and.w	r3, r3, #16
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f000 813c 	beq.w	8004d56 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ade:	2300      	movs	r3, #0
 8004ae0:	60bb      	str	r3, [r7, #8]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	60bb      	str	r3, [r7, #8]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	60bb      	str	r3, [r7, #8]
 8004af2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004afe:	2b40      	cmp	r3, #64	; 0x40
 8004b00:	f040 80b4 	bne.w	8004c6c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004b10:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f000 8140 	beq.w	8004d9a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b22:	429a      	cmp	r2, r3
 8004b24:	f080 8139 	bcs.w	8004d9a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b2e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b34:	69db      	ldr	r3, [r3, #28]
 8004b36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b3a:	f000 8088 	beq.w	8004c4e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	330c      	adds	r3, #12
 8004b44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b48:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b4c:	e853 3f00 	ldrex	r3, [r3]
 8004b50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004b54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	330c      	adds	r3, #12
 8004b66:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004b6a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b72:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004b76:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004b7a:	e841 2300 	strex	r3, r2, [r1]
 8004b7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004b82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1d9      	bne.n	8004b3e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	3314      	adds	r3, #20
 8004b90:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b94:	e853 3f00 	ldrex	r3, [r3]
 8004b98:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004b9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b9c:	f023 0301 	bic.w	r3, r3, #1
 8004ba0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	3314      	adds	r3, #20
 8004baa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004bae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004bb2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004bb6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004bba:	e841 2300 	strex	r3, r2, [r1]
 8004bbe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004bc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1e1      	bne.n	8004b8a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	3314      	adds	r3, #20
 8004bcc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bd0:	e853 3f00 	ldrex	r3, [r3]
 8004bd4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004bd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bdc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	3314      	adds	r3, #20
 8004be6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004bea:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004bec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004bf0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004bf2:	e841 2300 	strex	r3, r2, [r1]
 8004bf6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004bf8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1e3      	bne.n	8004bc6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2220      	movs	r2, #32
 8004c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	330c      	adds	r3, #12
 8004c12:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c16:	e853 3f00 	ldrex	r3, [r3]
 8004c1a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004c1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c1e:	f023 0310 	bic.w	r3, r3, #16
 8004c22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	330c      	adds	r3, #12
 8004c2c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004c30:	65ba      	str	r2, [r7, #88]	; 0x58
 8004c32:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c34:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c38:	e841 2300 	strex	r3, r2, [r1]
 8004c3c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004c3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d1e3      	bne.n	8004c0c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f7fc fccc 	bl	80015e6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f8c0 	bl	8004de4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c64:	e099      	b.n	8004d9a <HAL_UART_IRQHandler+0x50e>
 8004c66:	bf00      	nop
 8004c68:	08004f9f 	.word	0x08004f9f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	f000 808b 	beq.w	8004d9e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004c88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f000 8086 	beq.w	8004d9e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	330c      	adds	r3, #12
 8004c98:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c9c:	e853 3f00 	ldrex	r3, [r3]
 8004ca0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ca4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ca8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	330c      	adds	r3, #12
 8004cb2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004cb6:	647a      	str	r2, [r7, #68]	; 0x44
 8004cb8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004cbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cbe:	e841 2300 	strex	r3, r2, [r1]
 8004cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1e3      	bne.n	8004c92 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	3314      	adds	r3, #20
 8004cd0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd4:	e853 3f00 	ldrex	r3, [r3]
 8004cd8:	623b      	str	r3, [r7, #32]
   return(result);
 8004cda:	6a3b      	ldr	r3, [r7, #32]
 8004cdc:	f023 0301 	bic.w	r3, r3, #1
 8004ce0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	3314      	adds	r3, #20
 8004cea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004cee:	633a      	str	r2, [r7, #48]	; 0x30
 8004cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004cf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cf6:	e841 2300 	strex	r3, r2, [r1]
 8004cfa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1e3      	bne.n	8004cca <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2220      	movs	r2, #32
 8004d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	330c      	adds	r3, #12
 8004d16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	e853 3f00 	ldrex	r3, [r3]
 8004d1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f023 0310 	bic.w	r3, r3, #16
 8004d26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	330c      	adds	r3, #12
 8004d30:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004d34:	61fa      	str	r2, [r7, #28]
 8004d36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d38:	69b9      	ldr	r1, [r7, #24]
 8004d3a:	69fa      	ldr	r2, [r7, #28]
 8004d3c:	e841 2300 	strex	r3, r2, [r1]
 8004d40:	617b      	str	r3, [r7, #20]
   return(result);
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d1e3      	bne.n	8004d10 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 f848 	bl	8004de4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d54:	e023      	b.n	8004d9e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d009      	beq.n	8004d76 <HAL_UART_IRQHandler+0x4ea>
 8004d62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d003      	beq.n	8004d76 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 f929 	bl	8004fc6 <UART_Transmit_IT>
    return;
 8004d74:	e014      	b.n	8004da0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00e      	beq.n	8004da0 <HAL_UART_IRQHandler+0x514>
 8004d82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d008      	beq.n	8004da0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 f969 	bl	8005066 <UART_EndTransmit_IT>
    return;
 8004d94:	e004      	b.n	8004da0 <HAL_UART_IRQHandler+0x514>
    return;
 8004d96:	bf00      	nop
 8004d98:	e002      	b.n	8004da0 <HAL_UART_IRQHandler+0x514>
      return;
 8004d9a:	bf00      	nop
 8004d9c:	e000      	b.n	8004da0 <HAL_UART_IRQHandler+0x514>
      return;
 8004d9e:	bf00      	nop
  }
}
 8004da0:	37e8      	adds	r7, #232	; 0xe8
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop

08004da8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004db0:	bf00      	nop
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004dc4:	bf00      	nop
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004dd8:	bf00      	nop
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	460b      	mov	r3, r1
 8004dee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004df0:	bf00      	nop
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b090      	sub	sp, #64	; 0x40
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	603b      	str	r3, [r7, #0]
 8004e08:	4613      	mov	r3, r2
 8004e0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e0c:	e050      	b.n	8004eb0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e14:	d04c      	beq.n	8004eb0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004e16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d007      	beq.n	8004e2c <UART_WaitOnFlagUntilTimeout+0x30>
 8004e1c:	f7fc fa70 	bl	8001300 <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d241      	bcs.n	8004eb0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	330c      	adds	r3, #12
 8004e32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e36:	e853 3f00 	ldrex	r3, [r3]
 8004e3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	330c      	adds	r3, #12
 8004e4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e4c:	637a      	str	r2, [r7, #52]	; 0x34
 8004e4e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e54:	e841 2300 	strex	r3, r2, [r1]
 8004e58:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d1e5      	bne.n	8004e2c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	3314      	adds	r3, #20
 8004e66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	e853 3f00 	ldrex	r3, [r3]
 8004e6e:	613b      	str	r3, [r7, #16]
   return(result);
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	f023 0301 	bic.w	r3, r3, #1
 8004e76:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	3314      	adds	r3, #20
 8004e7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e80:	623a      	str	r2, [r7, #32]
 8004e82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e84:	69f9      	ldr	r1, [r7, #28]
 8004e86:	6a3a      	ldr	r2, [r7, #32]
 8004e88:	e841 2300 	strex	r3, r2, [r1]
 8004e8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d1e5      	bne.n	8004e60 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2220      	movs	r2, #32
 8004e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2220      	movs	r2, #32
 8004ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004eac:	2303      	movs	r3, #3
 8004eae:	e00f      	b.n	8004ed0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	4013      	ands	r3, r2
 8004eba:	68ba      	ldr	r2, [r7, #8]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	bf0c      	ite	eq
 8004ec0:	2301      	moveq	r3, #1
 8004ec2:	2300      	movne	r3, #0
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	79fb      	ldrb	r3, [r7, #7]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d09f      	beq.n	8004e0e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ece:	2300      	movs	r3, #0
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3740      	adds	r7, #64	; 0x40
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b095      	sub	sp, #84	; 0x54
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	330c      	adds	r3, #12
 8004ee6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eea:	e853 3f00 	ldrex	r3, [r3]
 8004eee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	330c      	adds	r3, #12
 8004efe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f00:	643a      	str	r2, [r7, #64]	; 0x40
 8004f02:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f08:	e841 2300 	strex	r3, r2, [r1]
 8004f0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d1e5      	bne.n	8004ee0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	3314      	adds	r3, #20
 8004f1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f1c:	6a3b      	ldr	r3, [r7, #32]
 8004f1e:	e853 3f00 	ldrex	r3, [r3]
 8004f22:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	f023 0301 	bic.w	r3, r3, #1
 8004f2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	3314      	adds	r3, #20
 8004f32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f3c:	e841 2300 	strex	r3, r2, [r1]
 8004f40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d1e5      	bne.n	8004f14 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d119      	bne.n	8004f84 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	330c      	adds	r3, #12
 8004f56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	e853 3f00 	ldrex	r3, [r3]
 8004f5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	f023 0310 	bic.w	r3, r3, #16
 8004f66:	647b      	str	r3, [r7, #68]	; 0x44
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	330c      	adds	r3, #12
 8004f6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f70:	61ba      	str	r2, [r7, #24]
 8004f72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f74:	6979      	ldr	r1, [r7, #20]
 8004f76:	69ba      	ldr	r2, [r7, #24]
 8004f78:	e841 2300 	strex	r3, r2, [r1]
 8004f7c:	613b      	str	r3, [r7, #16]
   return(result);
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d1e5      	bne.n	8004f50 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2220      	movs	r2, #32
 8004f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004f92:	bf00      	nop
 8004f94:	3754      	adds	r7, #84	; 0x54
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr

08004f9e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b084      	sub	sp, #16
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004faa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fb8:	68f8      	ldr	r0, [r7, #12]
 8004fba:	f7ff ff09 	bl	8004dd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fbe:	bf00      	nop
 8004fc0:	3710      	adds	r7, #16
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}

08004fc6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004fc6:	b480      	push	{r7}
 8004fc8:	b085      	sub	sp, #20
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	2b21      	cmp	r3, #33	; 0x21
 8004fd8:	d13e      	bne.n	8005058 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fe2:	d114      	bne.n	800500e <UART_Transmit_IT+0x48>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	691b      	ldr	r3, [r3, #16]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d110      	bne.n	800500e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a1b      	ldr	r3, [r3, #32]
 8004ff0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	881b      	ldrh	r3, [r3, #0]
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005000:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	1c9a      	adds	r2, r3, #2
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	621a      	str	r2, [r3, #32]
 800500c:	e008      	b.n	8005020 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	1c59      	adds	r1, r3, #1
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	6211      	str	r1, [r2, #32]
 8005018:	781a      	ldrb	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005024:	b29b      	uxth	r3, r3
 8005026:	3b01      	subs	r3, #1
 8005028:	b29b      	uxth	r3, r3
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	4619      	mov	r1, r3
 800502e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005030:	2b00      	cmp	r3, #0
 8005032:	d10f      	bne.n	8005054 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68da      	ldr	r2, [r3, #12]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005042:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68da      	ldr	r2, [r3, #12]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005052:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005054:	2300      	movs	r3, #0
 8005056:	e000      	b.n	800505a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005058:	2302      	movs	r3, #2
  }
}
 800505a:	4618      	mov	r0, r3
 800505c:	3714      	adds	r7, #20
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr

08005066 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005066:	b580      	push	{r7, lr}
 8005068:	b082      	sub	sp, #8
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68da      	ldr	r2, [r3, #12]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800507c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2220      	movs	r2, #32
 8005082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f7ff fe8e 	bl	8004da8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3708      	adds	r7, #8
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}

08005096 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005096:	b580      	push	{r7, lr}
 8005098:	b08c      	sub	sp, #48	; 0x30
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	2b22      	cmp	r3, #34	; 0x22
 80050a8:	f040 80ab 	bne.w	8005202 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050b4:	d117      	bne.n	80050e6 <UART_Receive_IT+0x50>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d113      	bne.n	80050e6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80050be:	2300      	movs	r3, #0
 80050c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050d4:	b29a      	uxth	r2, r3
 80050d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050de:	1c9a      	adds	r2, r3, #2
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	629a      	str	r2, [r3, #40]	; 0x28
 80050e4:	e026      	b.n	8005134 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80050ec:	2300      	movs	r3, #0
 80050ee:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050f8:	d007      	beq.n	800510a <UART_Receive_IT+0x74>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d10a      	bne.n	8005118 <UART_Receive_IT+0x82>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d106      	bne.n	8005118 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	b2da      	uxtb	r2, r3
 8005112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005114:	701a      	strb	r2, [r3, #0]
 8005116:	e008      	b.n	800512a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	b2db      	uxtb	r3, r3
 8005120:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005124:	b2da      	uxtb	r2, r3
 8005126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005128:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800512e:	1c5a      	adds	r2, r3, #1
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005138:	b29b      	uxth	r3, r3
 800513a:	3b01      	subs	r3, #1
 800513c:	b29b      	uxth	r3, r3
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	4619      	mov	r1, r3
 8005142:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005144:	2b00      	cmp	r3, #0
 8005146:	d15a      	bne.n	80051fe <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68da      	ldr	r2, [r3, #12]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f022 0220 	bic.w	r2, r2, #32
 8005156:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68da      	ldr	r2, [r3, #12]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005166:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	695a      	ldr	r2, [r3, #20]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f022 0201 	bic.w	r2, r2, #1
 8005176:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2220      	movs	r2, #32
 800517c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005184:	2b01      	cmp	r3, #1
 8005186:	d135      	bne.n	80051f4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	330c      	adds	r3, #12
 8005194:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	e853 3f00 	ldrex	r3, [r3]
 800519c:	613b      	str	r3, [r7, #16]
   return(result);
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	f023 0310 	bic.w	r3, r3, #16
 80051a4:	627b      	str	r3, [r7, #36]	; 0x24
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	330c      	adds	r3, #12
 80051ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ae:	623a      	str	r2, [r7, #32]
 80051b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b2:	69f9      	ldr	r1, [r7, #28]
 80051b4:	6a3a      	ldr	r2, [r7, #32]
 80051b6:	e841 2300 	strex	r3, r2, [r1]
 80051ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d1e5      	bne.n	800518e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0310 	and.w	r3, r3, #16
 80051cc:	2b10      	cmp	r3, #16
 80051ce:	d10a      	bne.n	80051e6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051d0:	2300      	movs	r3, #0
 80051d2:	60fb      	str	r3, [r7, #12]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	60fb      	str	r3, [r7, #12]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	60fb      	str	r3, [r7, #12]
 80051e4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80051ea:	4619      	mov	r1, r3
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f7ff fdf9 	bl	8004de4 <HAL_UARTEx_RxEventCallback>
 80051f2:	e002      	b.n	80051fa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f7ff fde1 	bl	8004dbc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80051fa:	2300      	movs	r3, #0
 80051fc:	e002      	b.n	8005204 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80051fe:	2300      	movs	r3, #0
 8005200:	e000      	b.n	8005204 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005202:	2302      	movs	r3, #2
  }
}
 8005204:	4618      	mov	r0, r3
 8005206:	3730      	adds	r7, #48	; 0x30
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800520c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005210:	b0c0      	sub	sp, #256	; 0x100
 8005212:	af00      	add	r7, sp, #0
 8005214:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	691b      	ldr	r3, [r3, #16]
 8005220:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005228:	68d9      	ldr	r1, [r3, #12]
 800522a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	ea40 0301 	orr.w	r3, r0, r1
 8005234:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800523a:	689a      	ldr	r2, [r3, #8]
 800523c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	431a      	orrs	r2, r3
 8005244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	431a      	orrs	r2, r3
 800524c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005250:	69db      	ldr	r3, [r3, #28]
 8005252:	4313      	orrs	r3, r2
 8005254:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005264:	f021 010c 	bic.w	r1, r1, #12
 8005268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005272:	430b      	orrs	r3, r1
 8005274:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	695b      	ldr	r3, [r3, #20]
 800527e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005286:	6999      	ldr	r1, [r3, #24]
 8005288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	ea40 0301 	orr.w	r3, r0, r1
 8005292:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	4b8f      	ldr	r3, [pc, #572]	; (80054d8 <UART_SetConfig+0x2cc>)
 800529c:	429a      	cmp	r2, r3
 800529e:	d005      	beq.n	80052ac <UART_SetConfig+0xa0>
 80052a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	4b8d      	ldr	r3, [pc, #564]	; (80054dc <UART_SetConfig+0x2d0>)
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d104      	bne.n	80052b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80052ac:	f7fe fe3e 	bl	8003f2c <HAL_RCC_GetPCLK2Freq>
 80052b0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80052b4:	e003      	b.n	80052be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80052b6:	f7fe fe25 	bl	8003f04 <HAL_RCC_GetPCLK1Freq>
 80052ba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052c2:	69db      	ldr	r3, [r3, #28]
 80052c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052c8:	f040 810c 	bne.w	80054e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80052cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052d0:	2200      	movs	r2, #0
 80052d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80052d6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80052da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80052de:	4622      	mov	r2, r4
 80052e0:	462b      	mov	r3, r5
 80052e2:	1891      	adds	r1, r2, r2
 80052e4:	65b9      	str	r1, [r7, #88]	; 0x58
 80052e6:	415b      	adcs	r3, r3
 80052e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80052ee:	4621      	mov	r1, r4
 80052f0:	eb12 0801 	adds.w	r8, r2, r1
 80052f4:	4629      	mov	r1, r5
 80052f6:	eb43 0901 	adc.w	r9, r3, r1
 80052fa:	f04f 0200 	mov.w	r2, #0
 80052fe:	f04f 0300 	mov.w	r3, #0
 8005302:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005306:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800530a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800530e:	4690      	mov	r8, r2
 8005310:	4699      	mov	r9, r3
 8005312:	4623      	mov	r3, r4
 8005314:	eb18 0303 	adds.w	r3, r8, r3
 8005318:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800531c:	462b      	mov	r3, r5
 800531e:	eb49 0303 	adc.w	r3, r9, r3
 8005322:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005332:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005336:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800533a:	460b      	mov	r3, r1
 800533c:	18db      	adds	r3, r3, r3
 800533e:	653b      	str	r3, [r7, #80]	; 0x50
 8005340:	4613      	mov	r3, r2
 8005342:	eb42 0303 	adc.w	r3, r2, r3
 8005346:	657b      	str	r3, [r7, #84]	; 0x54
 8005348:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800534c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005350:	f7fa ff42 	bl	80001d8 <__aeabi_uldivmod>
 8005354:	4602      	mov	r2, r0
 8005356:	460b      	mov	r3, r1
 8005358:	4b61      	ldr	r3, [pc, #388]	; (80054e0 <UART_SetConfig+0x2d4>)
 800535a:	fba3 2302 	umull	r2, r3, r3, r2
 800535e:	095b      	lsrs	r3, r3, #5
 8005360:	011c      	lsls	r4, r3, #4
 8005362:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005366:	2200      	movs	r2, #0
 8005368:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800536c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005370:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005374:	4642      	mov	r2, r8
 8005376:	464b      	mov	r3, r9
 8005378:	1891      	adds	r1, r2, r2
 800537a:	64b9      	str	r1, [r7, #72]	; 0x48
 800537c:	415b      	adcs	r3, r3
 800537e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005380:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005384:	4641      	mov	r1, r8
 8005386:	eb12 0a01 	adds.w	sl, r2, r1
 800538a:	4649      	mov	r1, r9
 800538c:	eb43 0b01 	adc.w	fp, r3, r1
 8005390:	f04f 0200 	mov.w	r2, #0
 8005394:	f04f 0300 	mov.w	r3, #0
 8005398:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800539c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80053a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053a4:	4692      	mov	sl, r2
 80053a6:	469b      	mov	fp, r3
 80053a8:	4643      	mov	r3, r8
 80053aa:	eb1a 0303 	adds.w	r3, sl, r3
 80053ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80053b2:	464b      	mov	r3, r9
 80053b4:	eb4b 0303 	adc.w	r3, fp, r3
 80053b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80053bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053c8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80053cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80053d0:	460b      	mov	r3, r1
 80053d2:	18db      	adds	r3, r3, r3
 80053d4:	643b      	str	r3, [r7, #64]	; 0x40
 80053d6:	4613      	mov	r3, r2
 80053d8:	eb42 0303 	adc.w	r3, r2, r3
 80053dc:	647b      	str	r3, [r7, #68]	; 0x44
 80053de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80053e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80053e6:	f7fa fef7 	bl	80001d8 <__aeabi_uldivmod>
 80053ea:	4602      	mov	r2, r0
 80053ec:	460b      	mov	r3, r1
 80053ee:	4611      	mov	r1, r2
 80053f0:	4b3b      	ldr	r3, [pc, #236]	; (80054e0 <UART_SetConfig+0x2d4>)
 80053f2:	fba3 2301 	umull	r2, r3, r3, r1
 80053f6:	095b      	lsrs	r3, r3, #5
 80053f8:	2264      	movs	r2, #100	; 0x64
 80053fa:	fb02 f303 	mul.w	r3, r2, r3
 80053fe:	1acb      	subs	r3, r1, r3
 8005400:	00db      	lsls	r3, r3, #3
 8005402:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005406:	4b36      	ldr	r3, [pc, #216]	; (80054e0 <UART_SetConfig+0x2d4>)
 8005408:	fba3 2302 	umull	r2, r3, r3, r2
 800540c:	095b      	lsrs	r3, r3, #5
 800540e:	005b      	lsls	r3, r3, #1
 8005410:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005414:	441c      	add	r4, r3
 8005416:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800541a:	2200      	movs	r2, #0
 800541c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005420:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005424:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005428:	4642      	mov	r2, r8
 800542a:	464b      	mov	r3, r9
 800542c:	1891      	adds	r1, r2, r2
 800542e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005430:	415b      	adcs	r3, r3
 8005432:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005434:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005438:	4641      	mov	r1, r8
 800543a:	1851      	adds	r1, r2, r1
 800543c:	6339      	str	r1, [r7, #48]	; 0x30
 800543e:	4649      	mov	r1, r9
 8005440:	414b      	adcs	r3, r1
 8005442:	637b      	str	r3, [r7, #52]	; 0x34
 8005444:	f04f 0200 	mov.w	r2, #0
 8005448:	f04f 0300 	mov.w	r3, #0
 800544c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005450:	4659      	mov	r1, fp
 8005452:	00cb      	lsls	r3, r1, #3
 8005454:	4651      	mov	r1, sl
 8005456:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800545a:	4651      	mov	r1, sl
 800545c:	00ca      	lsls	r2, r1, #3
 800545e:	4610      	mov	r0, r2
 8005460:	4619      	mov	r1, r3
 8005462:	4603      	mov	r3, r0
 8005464:	4642      	mov	r2, r8
 8005466:	189b      	adds	r3, r3, r2
 8005468:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800546c:	464b      	mov	r3, r9
 800546e:	460a      	mov	r2, r1
 8005470:	eb42 0303 	adc.w	r3, r2, r3
 8005474:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005484:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005488:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800548c:	460b      	mov	r3, r1
 800548e:	18db      	adds	r3, r3, r3
 8005490:	62bb      	str	r3, [r7, #40]	; 0x28
 8005492:	4613      	mov	r3, r2
 8005494:	eb42 0303 	adc.w	r3, r2, r3
 8005498:	62fb      	str	r3, [r7, #44]	; 0x2c
 800549a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800549e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80054a2:	f7fa fe99 	bl	80001d8 <__aeabi_uldivmod>
 80054a6:	4602      	mov	r2, r0
 80054a8:	460b      	mov	r3, r1
 80054aa:	4b0d      	ldr	r3, [pc, #52]	; (80054e0 <UART_SetConfig+0x2d4>)
 80054ac:	fba3 1302 	umull	r1, r3, r3, r2
 80054b0:	095b      	lsrs	r3, r3, #5
 80054b2:	2164      	movs	r1, #100	; 0x64
 80054b4:	fb01 f303 	mul.w	r3, r1, r3
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	00db      	lsls	r3, r3, #3
 80054bc:	3332      	adds	r3, #50	; 0x32
 80054be:	4a08      	ldr	r2, [pc, #32]	; (80054e0 <UART_SetConfig+0x2d4>)
 80054c0:	fba2 2303 	umull	r2, r3, r2, r3
 80054c4:	095b      	lsrs	r3, r3, #5
 80054c6:	f003 0207 	and.w	r2, r3, #7
 80054ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4422      	add	r2, r4
 80054d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80054d4:	e105      	b.n	80056e2 <UART_SetConfig+0x4d6>
 80054d6:	bf00      	nop
 80054d8:	40011000 	.word	0x40011000
 80054dc:	40011400 	.word	0x40011400
 80054e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054e8:	2200      	movs	r2, #0
 80054ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80054ee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80054f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80054f6:	4642      	mov	r2, r8
 80054f8:	464b      	mov	r3, r9
 80054fa:	1891      	adds	r1, r2, r2
 80054fc:	6239      	str	r1, [r7, #32]
 80054fe:	415b      	adcs	r3, r3
 8005500:	627b      	str	r3, [r7, #36]	; 0x24
 8005502:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005506:	4641      	mov	r1, r8
 8005508:	1854      	adds	r4, r2, r1
 800550a:	4649      	mov	r1, r9
 800550c:	eb43 0501 	adc.w	r5, r3, r1
 8005510:	f04f 0200 	mov.w	r2, #0
 8005514:	f04f 0300 	mov.w	r3, #0
 8005518:	00eb      	lsls	r3, r5, #3
 800551a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800551e:	00e2      	lsls	r2, r4, #3
 8005520:	4614      	mov	r4, r2
 8005522:	461d      	mov	r5, r3
 8005524:	4643      	mov	r3, r8
 8005526:	18e3      	adds	r3, r4, r3
 8005528:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800552c:	464b      	mov	r3, r9
 800552e:	eb45 0303 	adc.w	r3, r5, r3
 8005532:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005542:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005546:	f04f 0200 	mov.w	r2, #0
 800554a:	f04f 0300 	mov.w	r3, #0
 800554e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005552:	4629      	mov	r1, r5
 8005554:	008b      	lsls	r3, r1, #2
 8005556:	4621      	mov	r1, r4
 8005558:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800555c:	4621      	mov	r1, r4
 800555e:	008a      	lsls	r2, r1, #2
 8005560:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005564:	f7fa fe38 	bl	80001d8 <__aeabi_uldivmod>
 8005568:	4602      	mov	r2, r0
 800556a:	460b      	mov	r3, r1
 800556c:	4b60      	ldr	r3, [pc, #384]	; (80056f0 <UART_SetConfig+0x4e4>)
 800556e:	fba3 2302 	umull	r2, r3, r3, r2
 8005572:	095b      	lsrs	r3, r3, #5
 8005574:	011c      	lsls	r4, r3, #4
 8005576:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800557a:	2200      	movs	r2, #0
 800557c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005580:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005584:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005588:	4642      	mov	r2, r8
 800558a:	464b      	mov	r3, r9
 800558c:	1891      	adds	r1, r2, r2
 800558e:	61b9      	str	r1, [r7, #24]
 8005590:	415b      	adcs	r3, r3
 8005592:	61fb      	str	r3, [r7, #28]
 8005594:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005598:	4641      	mov	r1, r8
 800559a:	1851      	adds	r1, r2, r1
 800559c:	6139      	str	r1, [r7, #16]
 800559e:	4649      	mov	r1, r9
 80055a0:	414b      	adcs	r3, r1
 80055a2:	617b      	str	r3, [r7, #20]
 80055a4:	f04f 0200 	mov.w	r2, #0
 80055a8:	f04f 0300 	mov.w	r3, #0
 80055ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055b0:	4659      	mov	r1, fp
 80055b2:	00cb      	lsls	r3, r1, #3
 80055b4:	4651      	mov	r1, sl
 80055b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055ba:	4651      	mov	r1, sl
 80055bc:	00ca      	lsls	r2, r1, #3
 80055be:	4610      	mov	r0, r2
 80055c0:	4619      	mov	r1, r3
 80055c2:	4603      	mov	r3, r0
 80055c4:	4642      	mov	r2, r8
 80055c6:	189b      	adds	r3, r3, r2
 80055c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80055cc:	464b      	mov	r3, r9
 80055ce:	460a      	mov	r2, r1
 80055d0:	eb42 0303 	adc.w	r3, r2, r3
 80055d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80055d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80055e2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80055e4:	f04f 0200 	mov.w	r2, #0
 80055e8:	f04f 0300 	mov.w	r3, #0
 80055ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80055f0:	4649      	mov	r1, r9
 80055f2:	008b      	lsls	r3, r1, #2
 80055f4:	4641      	mov	r1, r8
 80055f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055fa:	4641      	mov	r1, r8
 80055fc:	008a      	lsls	r2, r1, #2
 80055fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005602:	f7fa fde9 	bl	80001d8 <__aeabi_uldivmod>
 8005606:	4602      	mov	r2, r0
 8005608:	460b      	mov	r3, r1
 800560a:	4b39      	ldr	r3, [pc, #228]	; (80056f0 <UART_SetConfig+0x4e4>)
 800560c:	fba3 1302 	umull	r1, r3, r3, r2
 8005610:	095b      	lsrs	r3, r3, #5
 8005612:	2164      	movs	r1, #100	; 0x64
 8005614:	fb01 f303 	mul.w	r3, r1, r3
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	011b      	lsls	r3, r3, #4
 800561c:	3332      	adds	r3, #50	; 0x32
 800561e:	4a34      	ldr	r2, [pc, #208]	; (80056f0 <UART_SetConfig+0x4e4>)
 8005620:	fba2 2303 	umull	r2, r3, r2, r3
 8005624:	095b      	lsrs	r3, r3, #5
 8005626:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800562a:	441c      	add	r4, r3
 800562c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005630:	2200      	movs	r2, #0
 8005632:	673b      	str	r3, [r7, #112]	; 0x70
 8005634:	677a      	str	r2, [r7, #116]	; 0x74
 8005636:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800563a:	4642      	mov	r2, r8
 800563c:	464b      	mov	r3, r9
 800563e:	1891      	adds	r1, r2, r2
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	415b      	adcs	r3, r3
 8005644:	60fb      	str	r3, [r7, #12]
 8005646:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800564a:	4641      	mov	r1, r8
 800564c:	1851      	adds	r1, r2, r1
 800564e:	6039      	str	r1, [r7, #0]
 8005650:	4649      	mov	r1, r9
 8005652:	414b      	adcs	r3, r1
 8005654:	607b      	str	r3, [r7, #4]
 8005656:	f04f 0200 	mov.w	r2, #0
 800565a:	f04f 0300 	mov.w	r3, #0
 800565e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005662:	4659      	mov	r1, fp
 8005664:	00cb      	lsls	r3, r1, #3
 8005666:	4651      	mov	r1, sl
 8005668:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800566c:	4651      	mov	r1, sl
 800566e:	00ca      	lsls	r2, r1, #3
 8005670:	4610      	mov	r0, r2
 8005672:	4619      	mov	r1, r3
 8005674:	4603      	mov	r3, r0
 8005676:	4642      	mov	r2, r8
 8005678:	189b      	adds	r3, r3, r2
 800567a:	66bb      	str	r3, [r7, #104]	; 0x68
 800567c:	464b      	mov	r3, r9
 800567e:	460a      	mov	r2, r1
 8005680:	eb42 0303 	adc.w	r3, r2, r3
 8005684:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	663b      	str	r3, [r7, #96]	; 0x60
 8005690:	667a      	str	r2, [r7, #100]	; 0x64
 8005692:	f04f 0200 	mov.w	r2, #0
 8005696:	f04f 0300 	mov.w	r3, #0
 800569a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800569e:	4649      	mov	r1, r9
 80056a0:	008b      	lsls	r3, r1, #2
 80056a2:	4641      	mov	r1, r8
 80056a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056a8:	4641      	mov	r1, r8
 80056aa:	008a      	lsls	r2, r1, #2
 80056ac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80056b0:	f7fa fd92 	bl	80001d8 <__aeabi_uldivmod>
 80056b4:	4602      	mov	r2, r0
 80056b6:	460b      	mov	r3, r1
 80056b8:	4b0d      	ldr	r3, [pc, #52]	; (80056f0 <UART_SetConfig+0x4e4>)
 80056ba:	fba3 1302 	umull	r1, r3, r3, r2
 80056be:	095b      	lsrs	r3, r3, #5
 80056c0:	2164      	movs	r1, #100	; 0x64
 80056c2:	fb01 f303 	mul.w	r3, r1, r3
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	011b      	lsls	r3, r3, #4
 80056ca:	3332      	adds	r3, #50	; 0x32
 80056cc:	4a08      	ldr	r2, [pc, #32]	; (80056f0 <UART_SetConfig+0x4e4>)
 80056ce:	fba2 2303 	umull	r2, r3, r2, r3
 80056d2:	095b      	lsrs	r3, r3, #5
 80056d4:	f003 020f 	and.w	r2, r3, #15
 80056d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4422      	add	r2, r4
 80056e0:	609a      	str	r2, [r3, #8]
}
 80056e2:	bf00      	nop
 80056e4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80056e8:	46bd      	mov	sp, r7
 80056ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056ee:	bf00      	nop
 80056f0:	51eb851f 	.word	0x51eb851f

080056f4 <interface_tx_frame>:
 80056f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80056f8:	b085      	sub	sp, #20
 80056fa:	4605      	mov	r5, r0
 80056fc:	461c      	mov	r4, r3
 80056fe:	6883      	ldr	r3, [r0, #8]
 8005700:	695e      	ldr	r6, [r3, #20]
 8005702:	b1e2      	cbz	r2, 800573e <interface_tx_frame+0x4a>
 8005704:	9102      	str	r1, [sp, #8]
 8005706:	fa1f f882 	uxth.w	r8, r2
 800570a:	f8ad 800c 	strh.w	r8, [sp, #12]
 800570e:	f04f 0900 	mov.w	r9, #0
 8005712:	f8ad 900e 	strh.w	r9, [sp, #14]
 8005716:	6b77      	ldr	r7, [r6, #52]	; 0x34
 8005718:	ab02      	add	r3, sp, #8
 800571a:	464a      	mov	r2, r9
 800571c:	2120      	movs	r1, #32
 800571e:	47b8      	blx	r7
 8005720:	f8ad 8000 	strh.w	r8, [sp]
 8005724:	f8ad 9002 	strh.w	r9, [sp, #2]
 8005728:	68e3      	ldr	r3, [r4, #12]
 800572a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800572e:	f88d 3004 	strb.w	r3, [sp, #4]
 8005732:	6b77      	ldr	r7, [r6, #52]	; 0x34
 8005734:	466b      	mov	r3, sp
 8005736:	464a      	mov	r2, r9
 8005738:	2137      	movs	r1, #55	; 0x37
 800573a:	4628      	mov	r0, r5
 800573c:	47b8      	blx	r7
 800573e:	68e3      	ldr	r3, [r4, #12]
 8005740:	f013 0f1d 	tst.w	r3, #29
 8005744:	d005      	beq.n	8005752 <interface_tx_frame+0x5e>
 8005746:	6b77      	ldr	r7, [r6, #52]	; 0x34
 8005748:	4623      	mov	r3, r4
 800574a:	2200      	movs	r2, #0
 800574c:	2105      	movs	r1, #5
 800574e:	4628      	mov	r0, r5
 8005750:	47b8      	blx	r7
 8005752:	6863      	ldr	r3, [r4, #4]
 8005754:	2b00      	cmp	r3, #0
 8005756:	db0c      	blt.n	8005772 <interface_tx_frame+0x7e>
 8005758:	6b77      	ldr	r7, [r6, #52]	; 0x34
 800575a:	1d23      	adds	r3, r4, #4
 800575c:	2200      	movs	r2, #0
 800575e:	2110      	movs	r1, #16
 8005760:	4628      	mov	r0, r5
 8005762:	47b8      	blx	r7
 8005764:	6b77      	ldr	r7, [r6, #52]	; 0x34
 8005766:	f104 0308 	add.w	r3, r4, #8
 800576a:	2200      	movs	r2, #0
 800576c:	2151      	movs	r1, #81	; 0x51
 800576e:	4628      	mov	r0, r5
 8005770:	47b8      	blx	r7
 8005772:	6b76      	ldr	r6, [r6, #52]	; 0x34
 8005774:	f104 030c 	add.w	r3, r4, #12
 8005778:	2200      	movs	r2, #0
 800577a:	2104      	movs	r1, #4
 800577c:	4628      	mov	r0, r5
 800577e:	47b0      	blx	r6
 8005780:	b005      	add	sp, #20
 8005782:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08005786 <interface_get_timestamp>:
 8005786:	b530      	push	{r4, r5, lr}
 8005788:	b083      	sub	sp, #12
 800578a:	ab02      	add	r3, sp, #8
 800578c:	2400      	movs	r4, #0
 800578e:	2500      	movs	r5, #0
 8005790:	e963 4502 	strd	r4, r5, [r3, #-8]!
 8005794:	6882      	ldr	r2, [r0, #8]
 8005796:	6952      	ldr	r2, [r2, #20]
 8005798:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800579a:	2200      	movs	r2, #0
 800579c:	215f      	movs	r1, #95	; 0x5f
 800579e:	47a0      	blx	r4
 80057a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80057a4:	b003      	add	sp, #12
 80057a6:	bd30      	pop	{r4, r5, pc}

080057a8 <interface_rx_disable>:
 80057a8:	b510      	push	{r4, lr}
 80057aa:	6883      	ldr	r3, [r0, #8]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80057b0:	2300      	movs	r3, #0
 80057b2:	461a      	mov	r2, r3
 80057b4:	2103      	movs	r1, #3
 80057b6:	47a0      	blx	r4
 80057b8:	bd10      	pop	{r4, pc}
	...

080057bc <interface_rx_enable>:
 80057bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057c0:	b084      	sub	sp, #16
 80057c2:	4604      	mov	r4, r0
 80057c4:	6883      	ldr	r3, [r0, #8]
 80057c6:	695d      	ldr	r5, [r3, #20]
 80057c8:	f8d1 a008 	ldr.w	sl, [r1, #8]
 80057cc:	680b      	ldr	r3, [r1, #0]
 80057ce:	9303      	str	r3, [sp, #12]
 80057d0:	684a      	ldr	r2, [r1, #4]
 80057d2:	ab04      	add	r3, sp, #16
 80057d4:	f843 2d08 	str.w	r2, [r3, #-8]!
 80057d8:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 80057da:	2200      	movs	r2, #0
 80057dc:	214f      	movs	r1, #79	; 0x4f
 80057de:	47b8      	blx	r7
 80057e0:	4607      	mov	r7, r0
 80057e2:	b118      	cbz	r0, 80057ec <interface_rx_enable+0x30>
 80057e4:	4638      	mov	r0, r7
 80057e6:	b004      	add	sp, #16
 80057e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057ec:	68a3      	ldr	r3, [r4, #8]
 80057ee:	695a      	ldr	r2, [r3, #20]
 80057f0:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	db3c      	blt.n	8005872 <interface_rx_enable+0xb6>
 80057f8:	6b57      	ldr	r7, [r2, #52]	; 0x34
 80057fa:	ab01      	add	r3, sp, #4
 80057fc:	2200      	movs	r2, #0
 80057fe:	2157      	movs	r1, #87	; 0x57
 8005800:	4620      	mov	r0, r4
 8005802:	47b8      	blx	r7
 8005804:	bba8      	cbnz	r0, 8005872 <interface_rx_enable+0xb6>
 8005806:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800580a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800580e:	041b      	lsls	r3, r3, #16
 8005810:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005814:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8005818:	4313      	orrs	r3, r2
 800581a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800581e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005822:	f1ba 0f00 	cmp.w	sl, #0
 8005826:	d131      	bne.n	800588c <interface_rx_enable+0xd0>
 8005828:	f503 3378 	add.w	r3, r3, #253952	; 0x3e000
 800582c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005830:	9303      	str	r3, [sp, #12]
 8005832:	f04f 0a01 	mov.w	sl, #1
 8005836:	68a3      	ldr	r3, [r4, #8]
 8005838:	695f      	ldr	r7, [r3, #20]
 800583a:	f10d 0302 	add.w	r3, sp, #2
 800583e:	2200      	movs	r2, #0
 8005840:	217b      	movs	r1, #123	; 0x7b
 8005842:	4620      	mov	r0, r4
 8005844:	6b7e      	ldr	r6, [r7, #52]	; 0x34
 8005846:	47b0      	blx	r6
 8005848:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 800584c:	2b01      	cmp	r3, #1
 800584e:	d04e      	beq.n	80058ee <interface_rx_enable+0x132>
 8005850:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 8005854:	2201      	movs	r2, #1
 8005856:	fa02 f303 	lsl.w	r3, r2, r3
 800585a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800585e:	ea22 0203 	bic.w	r2, r2, r3
 8005862:	ab04      	add	r3, sp, #16
 8005864:	f823 2d0e 	strh.w	r2, [r3, #-14]!
 8005868:	6b7f      	ldr	r7, [r7, #52]	; 0x34
 800586a:	2200      	movs	r2, #0
 800586c:	216b      	movs	r1, #107	; 0x6b
 800586e:	4620      	mov	r0, r4
 8005870:	47b8      	blx	r7
 8005872:	f1ba 0f00 	cmp.w	sl, #0
 8005876:	d14a      	bne.n	800590e <interface_rx_enable+0x152>
 8005878:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 800587a:	2300      	movs	r3, #0
 800587c:	461a      	mov	r2, r3
 800587e:	211f      	movs	r1, #31
 8005880:	4620      	mov	r0, r4
 8005882:	47a8      	blx	r5
 8005884:	4607      	mov	r7, r0
 8005886:	2800      	cmp	r0, #0
 8005888:	d150      	bne.n	800592c <interface_rx_enable+0x170>
 800588a:	e7ab      	b.n	80057e4 <interface_rx_enable+0x28>
 800588c:	9a03      	ldr	r2, [sp, #12]
 800588e:	1ad3      	subs	r3, r2, r3
 8005890:	4698      	mov	r8, r3
 8005892:	ea4f 79e3 	mov.w	r9, r3, asr #31
 8005896:	ea4f 1249 	mov.w	r2, r9, lsl #5
 800589a:	0158      	lsls	r0, r3, #5
 800589c:	ea42 61d3 	orr.w	r1, r2, r3, lsr #27
 80058a0:	1ac0      	subs	r0, r0, r3
 80058a2:	eb61 0109 	sbc.w	r1, r1, r9
 80058a6:	024b      	lsls	r3, r1, #9
 80058a8:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 80058ac:	0242      	lsls	r2, r0, #9
 80058ae:	eb12 0008 	adds.w	r0, r2, r8
 80058b2:	eb43 0109 	adc.w	r1, r3, r9
 80058b6:	018b      	lsls	r3, r1, #6
 80058b8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80058bc:	0182      	lsls	r2, r0, #6
 80058be:	1a12      	subs	r2, r2, r0
 80058c0:	eb63 0301 	sbc.w	r3, r3, r1
 80058c4:	4616      	mov	r6, r2
 80058c6:	461f      	mov	r7, r3
 80058c8:	4a31      	ldr	r2, [pc, #196]	; (8005990 <interface_rx_enable+0x1d4>)
 80058ca:	2300      	movs	r3, #0
 80058cc:	eb16 0008 	adds.w	r0, r6, r8
 80058d0:	eb47 0109 	adc.w	r1, r7, r9
 80058d4:	f7fa fc80 	bl	80001d8 <__aeabi_uldivmod>
 80058d8:	f5b0 7f7f 	cmp.w	r0, #1020	; 0x3fc
 80058dc:	ddab      	ble.n	8005836 <interface_rx_enable+0x7a>
 80058de:	68a3      	ldr	r3, [r4, #8]
 80058e0:	695f      	ldr	r7, [r3, #20]
 80058e2:	f5b0 707f 	subs.w	r0, r0, #1020	; 0x3fc
 80058e6:	d0a8      	beq.n	800583a <interface_rx_enable+0x7e>
 80058e8:	f7fa fe21 	bl	800052e <deca_usleep>
 80058ec:	e7a5      	b.n	800583a <interface_rx_enable+0x7e>
 80058ee:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 80058f2:	2201      	movs	r2, #1
 80058f4:	409a      	lsls	r2, r3
 80058f6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80058fa:	431a      	orrs	r2, r3
 80058fc:	ab04      	add	r3, sp, #16
 80058fe:	f823 2d0e 	strh.w	r2, [r3, #-14]!
 8005902:	6b7f      	ldr	r7, [r7, #52]	; 0x34
 8005904:	2200      	movs	r2, #0
 8005906:	216b      	movs	r1, #107	; 0x6b
 8005908:	4620      	mov	r0, r4
 800590a:	47b8      	blx	r7
 800590c:	e7b1      	b.n	8005872 <interface_rx_enable+0xb6>
 800590e:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 8005910:	ab03      	add	r3, sp, #12
 8005912:	2200      	movs	r2, #0
 8005914:	2105      	movs	r1, #5
 8005916:	4620      	mov	r0, r4
 8005918:	47b0      	blx	r6
 800591a:	4607      	mov	r7, r0
 800591c:	b930      	cbnz	r0, 800592c <interface_rx_enable+0x170>
 800591e:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 8005920:	2300      	movs	r3, #0
 8005922:	2201      	movs	r2, #1
 8005924:	211f      	movs	r1, #31
 8005926:	4620      	mov	r0, r4
 8005928:	47a8      	blx	r5
 800592a:	4607      	mov	r7, r0
 800592c:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 8005930:	2b00      	cmp	r3, #0
 8005932:	f6ff af57 	blt.w	80057e4 <interface_rx_enable+0x28>
 8005936:	68a3      	ldr	r3, [r4, #8]
 8005938:	695d      	ldr	r5, [r3, #20]
 800593a:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 800593c:	ab01      	add	r3, sp, #4
 800593e:	2200      	movs	r2, #0
 8005940:	217b      	movs	r1, #123	; 0x7b
 8005942:	4620      	mov	r0, r4
 8005944:	47b0      	blx	r6
 8005946:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 800594a:	b18b      	cbz	r3, 8005970 <interface_rx_enable+0x1b4>
 800594c:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 8005950:	2201      	movs	r2, #1
 8005952:	fa02 f303 	lsl.w	r3, r2, r3
 8005956:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800595a:	ea22 0203 	bic.w	r2, r2, r3
 800595e:	ab04      	add	r3, sp, #16
 8005960:	f823 2d0c 	strh.w	r2, [r3, #-12]!
 8005964:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 8005966:	2200      	movs	r2, #0
 8005968:	216b      	movs	r1, #107	; 0x6b
 800596a:	4620      	mov	r0, r4
 800596c:	47a8      	blx	r5
 800596e:	e739      	b.n	80057e4 <interface_rx_enable+0x28>
 8005970:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 8005974:	2201      	movs	r2, #1
 8005976:	409a      	lsls	r2, r3
 8005978:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800597c:	431a      	orrs	r2, r3
 800597e:	ab04      	add	r3, sp, #16
 8005980:	f823 2d0c 	strh.w	r2, [r3, #-12]!
 8005984:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 8005986:	2200      	movs	r2, #0
 8005988:	216b      	movs	r1, #107	; 0x6b
 800598a:	4620      	mov	r0, r4
 800598c:	47a8      	blx	r5
 800598e:	e729      	b.n	80057e4 <interface_rx_enable+0x28>
 8005990:	0ee09800 	.word	0x0ee09800

08005994 <interface_read_rx_frame>:
 8005994:	b510      	push	{r4, lr}
 8005996:	b082      	sub	sp, #8
 8005998:	9100      	str	r1, [sp, #0]
 800599a:	f8ad 2004 	strh.w	r2, [sp, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	f8ad 2006 	strh.w	r2, [sp, #6]
 80059a4:	6883      	ldr	r3, [r0, #8]
 80059a6:	695b      	ldr	r3, [r3, #20]
 80059a8:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80059aa:	466b      	mov	r3, sp
 80059ac:	2121      	movs	r1, #33	; 0x21
 80059ae:	47a0      	blx	r4
 80059b0:	b002      	add	sp, #8
 80059b2:	bd10      	pop	{r4, pc}

080059b4 <dwt_probe>:
 80059b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059b6:	b083      	sub	sp, #12
 80059b8:	6803      	ldr	r3, [r0, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d037      	beq.n	8005a2e <dwt_probe+0x7a>
 80059be:	4a1f      	ldr	r2, [pc, #124]	; (8005a3c <dwt_probe+0x88>)
 80059c0:	6013      	str	r3, [r2, #0]
 80059c2:	4b1e      	ldr	r3, [pc, #120]	; (8005a3c <dwt_probe+0x88>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	6842      	ldr	r2, [r0, #4]
 80059c8:	601a      	str	r2, [r3, #0]
 80059ca:	6882      	ldr	r2, [r0, #8]
 80059cc:	605a      	str	r2, [r3, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f88d 2003 	strb.w	r2, [sp, #3]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681c      	ldr	r4, [r3, #0]
 80059d8:	ab01      	add	r3, sp, #4
 80059da:	2204      	movs	r2, #4
 80059dc:	f10d 0103 	add.w	r1, sp, #3
 80059e0:	2001      	movs	r0, #1
 80059e2:	47a0      	blx	r4
 80059e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80059e8:	f89d 1006 	ldrb.w	r1, [sp, #6]
 80059ec:	0409      	lsls	r1, r1, #16
 80059ee:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
 80059f2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80059f6:	4319      	orrs	r1, r3
 80059f8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80059fc:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 8005a00:	4a0f      	ldr	r2, [pc, #60]	; (8005a40 <dwt_probe+0x8c>)
 8005a02:	4b10      	ldr	r3, [pc, #64]	; (8005a44 <dwt_probe+0x90>)
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d216      	bcs.n	8005a36 <dwt_probe+0x82>
 8005a08:	4b0c      	ldr	r3, [pc, #48]	; (8005a3c <dwt_probe+0x88>)
 8005a0a:	681f      	ldr	r7, [r3, #0]
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	f04f 30ff 	mov.w	r0, #4294967295
 8005a12:	2600      	movs	r6, #0
 8005a14:	4d0b      	ldr	r5, [pc, #44]	; (8005a44 <dwt_probe+0x90>)
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	404a      	eors	r2, r1
 8005a1a:	685c      	ldr	r4, [r3, #4]
 8005a1c:	4222      	tst	r2, r4
 8005a1e:	bf04      	itt	eq
 8005a20:	60bb      	streq	r3, [r7, #8]
 8005a22:	4630      	moveq	r0, r6
 8005a24:	331c      	adds	r3, #28
 8005a26:	42ab      	cmp	r3, r5
 8005a28:	d3f5      	bcc.n	8005a16 <dwt_probe+0x62>
 8005a2a:	b003      	add	sp, #12
 8005a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a2e:	4b03      	ldr	r3, [pc, #12]	; (8005a3c <dwt_probe+0x88>)
 8005a30:	4a05      	ldr	r2, [pc, #20]	; (8005a48 <dwt_probe+0x94>)
 8005a32:	601a      	str	r2, [r3, #0]
 8005a34:	e7c5      	b.n	80059c2 <dwt_probe+0xe>
 8005a36:	f04f 30ff 	mov.w	r0, #4294967295
 8005a3a:	e7f6      	b.n	8005a2a <dwt_probe+0x76>
 8005a3c:	200001b4 	.word	0x200001b4
 8005a40:	0801306c 	.word	0x0801306c
 8005a44:	080130c0 	.word	0x080130c0
 8005a48:	200001b8 	.word	0x200001b8

08005a4c <dwt_readdevid>:
 8005a4c:	b510      	push	{r4, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	2100      	movs	r1, #0
 8005a52:	ab02      	add	r3, sp, #8
 8005a54:	f843 1d04 	str.w	r1, [r3, #-4]!
 8005a58:	4a04      	ldr	r2, [pc, #16]	; (8005a6c <dwt_readdevid+0x20>)
 8005a5a:	6810      	ldr	r0, [r2, #0]
 8005a5c:	6882      	ldr	r2, [r0, #8]
 8005a5e:	6912      	ldr	r2, [r2, #16]
 8005a60:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8005a62:	460a      	mov	r2, r1
 8005a64:	47a0      	blx	r4
 8005a66:	9801      	ldr	r0, [sp, #4]
 8005a68:	b002      	add	sp, #8
 8005a6a:	bd10      	pop	{r4, pc}
 8005a6c:	200001b4 	.word	0x200001b4

08005a70 <dwt_initialise>:
 8005a70:	b508      	push	{r3, lr}
 8005a72:	4b04      	ldr	r3, [pc, #16]	; (8005a84 <dwt_initialise+0x14>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	689a      	ldr	r2, [r3, #8]
 8005a78:	6912      	ldr	r2, [r2, #16]
 8005a7a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a7c:	4601      	mov	r1, r0
 8005a7e:	4618      	mov	r0, r3
 8005a80:	4790      	blx	r2
 8005a82:	bd08      	pop	{r3, pc}
 8005a84:	200001b4 	.word	0x200001b4

08005a88 <dwt_configure>:
 8005a88:	b508      	push	{r3, lr}
 8005a8a:	4b04      	ldr	r3, [pc, #16]	; (8005a9c <dwt_configure+0x14>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	689a      	ldr	r2, [r3, #8]
 8005a90:	6912      	ldr	r2, [r2, #16]
 8005a92:	6812      	ldr	r2, [r2, #0]
 8005a94:	4601      	mov	r1, r0
 8005a96:	4618      	mov	r0, r3
 8005a98:	4790      	blx	r2
 8005a9a:	bd08      	pop	{r3, pc}
 8005a9c:	200001b4 	.word	0x200001b4

08005aa0 <dwt_configuretxrf>:
 8005aa0:	b508      	push	{r3, lr}
 8005aa2:	4b04      	ldr	r3, [pc, #16]	; (8005ab4 <dwt_configuretxrf+0x14>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	689a      	ldr	r2, [r3, #8]
 8005aa8:	6912      	ldr	r2, [r2, #16]
 8005aaa:	6992      	ldr	r2, [r2, #24]
 8005aac:	4601      	mov	r1, r0
 8005aae:	4618      	mov	r0, r3
 8005ab0:	4790      	blx	r2
 8005ab2:	bd08      	pop	{r3, pc}
 8005ab4:	200001b4 	.word	0x200001b4

08005ab8 <dwt_writetxdata>:
 8005ab8:	b538      	push	{r3, r4, r5, lr}
 8005aba:	4b05      	ldr	r3, [pc, #20]	; (8005ad0 <dwt_writetxdata+0x18>)
 8005abc:	681c      	ldr	r4, [r3, #0]
 8005abe:	68a3      	ldr	r3, [r4, #8]
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	685d      	ldr	r5, [r3, #4]
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	460a      	mov	r2, r1
 8005ac8:	4601      	mov	r1, r0
 8005aca:	4620      	mov	r0, r4
 8005acc:	47a8      	blx	r5
 8005ace:	bd38      	pop	{r3, r4, r5, pc}
 8005ad0:	200001b4 	.word	0x200001b4

08005ad4 <dwt_writetxfctrl>:
 8005ad4:	b538      	push	{r3, r4, r5, lr}
 8005ad6:	4b05      	ldr	r3, [pc, #20]	; (8005aec <dwt_writetxfctrl+0x18>)
 8005ad8:	681c      	ldr	r4, [r3, #0]
 8005ada:	68a3      	ldr	r3, [r4, #8]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	689d      	ldr	r5, [r3, #8]
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	460a      	mov	r2, r1
 8005ae4:	4601      	mov	r1, r0
 8005ae6:	4620      	mov	r0, r4
 8005ae8:	47a8      	blx	r5
 8005aea:	bd38      	pop	{r3, r4, r5, pc}
 8005aec:	200001b4 	.word	0x200001b4

08005af0 <dwt_starttx>:
 8005af0:	b510      	push	{r4, lr}
 8005af2:	b082      	sub	sp, #8
 8005af4:	ab02      	add	r3, sp, #8
 8005af6:	f803 0d01 	strb.w	r0, [r3, #-1]!
 8005afa:	4a05      	ldr	r2, [pc, #20]	; (8005b10 <dwt_starttx+0x20>)
 8005afc:	6810      	ldr	r0, [r2, #0]
 8005afe:	6882      	ldr	r2, [r0, #8]
 8005b00:	6912      	ldr	r2, [r2, #16]
 8005b02:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8005b04:	2200      	movs	r2, #0
 8005b06:	2104      	movs	r1, #4
 8005b08:	47a0      	blx	r4
 8005b0a:	b002      	add	sp, #8
 8005b0c:	bd10      	pop	{r4, pc}
 8005b0e:	bf00      	nop
 8005b10:	200001b4 	.word	0x200001b4

08005b14 <dwt_forcetrxoff>:
 8005b14:	b510      	push	{r4, lr}
 8005b16:	4b05      	ldr	r3, [pc, #20]	; (8005b2c <dwt_forcetrxoff+0x18>)
 8005b18:	6818      	ldr	r0, [r3, #0]
 8005b1a:	6883      	ldr	r3, [r0, #8]
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8005b20:	2300      	movs	r3, #0
 8005b22:	461a      	mov	r2, r3
 8005b24:	2103      	movs	r1, #3
 8005b26:	47a0      	blx	r4
 8005b28:	bd10      	pop	{r4, pc}
 8005b2a:	bf00      	nop
 8005b2c:	200001b4 	.word	0x200001b4

08005b30 <dwt_rxenable>:
 8005b30:	b508      	push	{r3, lr}
 8005b32:	4b04      	ldr	r3, [pc, #16]	; (8005b44 <dwt_rxenable+0x14>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	689a      	ldr	r2, [r3, #8]
 8005b38:	6912      	ldr	r2, [r2, #16]
 8005b3a:	6a12      	ldr	r2, [r2, #32]
 8005b3c:	4601      	mov	r1, r0
 8005b3e:	4618      	mov	r0, r3
 8005b40:	4790      	blx	r2
 8005b42:	bd08      	pop	{r3, pc}
 8005b44:	200001b4 	.word	0x200001b4

08005b48 <dwt_checkidlerc>:
 8005b48:	b510      	push	{r4, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	ab02      	add	r3, sp, #8
 8005b50:	f803 2d01 	strb.w	r2, [r3, #-1]!
 8005b54:	4905      	ldr	r1, [pc, #20]	; (8005b6c <dwt_checkidlerc+0x24>)
 8005b56:	6808      	ldr	r0, [r1, #0]
 8005b58:	6881      	ldr	r1, [r0, #8]
 8005b5a:	6909      	ldr	r1, [r1, #16]
 8005b5c:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8005b5e:	2158      	movs	r1, #88	; 0x58
 8005b60:	47a0      	blx	r4
 8005b62:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8005b66:	b002      	add	sp, #8
 8005b68:	bd10      	pop	{r4, pc}
 8005b6a:	bf00      	nop
 8005b6c:	200001b4 	.word	0x200001b4

08005b70 <dwt_generatecrc8>:
 8005b70:	2900      	cmp	r1, #0
 8005b72:	dd0d      	ble.n	8005b90 <dwt_generatecrc8+0x20>
 8005b74:	b410      	push	{r4}
 8005b76:	1e43      	subs	r3, r0, #1
 8005b78:	4419      	add	r1, r3
 8005b7a:	4610      	mov	r0, r2
 8005b7c:	4c05      	ldr	r4, [pc, #20]	; (8005b94 <dwt_generatecrc8+0x24>)
 8005b7e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8005b82:	4050      	eors	r0, r2
 8005b84:	5c20      	ldrb	r0, [r4, r0]
 8005b86:	428b      	cmp	r3, r1
 8005b88:	d1f9      	bne.n	8005b7e <dwt_generatecrc8+0xe>
 8005b8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b8e:	4770      	bx	lr
 8005b90:	4610      	mov	r0, r2
 8005b92:	4770      	bx	lr
 8005b94:	08013140 	.word	0x08013140

08005b98 <dwt_setleds>:
 8005b98:	b510      	push	{r4, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	ab02      	add	r3, sp, #8
 8005b9e:	f803 0d01 	strb.w	r0, [r3, #-1]!
 8005ba2:	4a05      	ldr	r2, [pc, #20]	; (8005bb8 <dwt_setleds+0x20>)
 8005ba4:	6810      	ldr	r0, [r2, #0]
 8005ba6:	6882      	ldr	r2, [r0, #8]
 8005ba8:	6912      	ldr	r2, [r2, #16]
 8005baa:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8005bac:	2200      	movs	r2, #0
 8005bae:	2155      	movs	r1, #85	; 0x55
 8005bb0:	47a0      	blx	r4
 8005bb2:	b002      	add	sp, #8
 8005bb4:	bd10      	pop	{r4, pc}
 8005bb6:	bf00      	nop
 8005bb8:	200001b4 	.word	0x200001b4

08005bbc <dwt_writesysstatuslo>:
 8005bbc:	b510      	push	{r4, lr}
 8005bbe:	b082      	sub	sp, #8
 8005bc0:	ab02      	add	r3, sp, #8
 8005bc2:	f843 0d04 	str.w	r0, [r3, #-4]!
 8005bc6:	4a05      	ldr	r2, [pc, #20]	; (8005bdc <dwt_writesysstatuslo+0x20>)
 8005bc8:	6810      	ldr	r0, [r2, #0]
 8005bca:	6882      	ldr	r2, [r0, #8]
 8005bcc:	6912      	ldr	r2, [r2, #16]
 8005bce:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	2174      	movs	r1, #116	; 0x74
 8005bd4:	47a0      	blx	r4
 8005bd6:	b002      	add	sp, #8
 8005bd8:	bd10      	pop	{r4, pc}
 8005bda:	bf00      	nop
 8005bdc:	200001b4 	.word	0x200001b4

08005be0 <dwt_readsysstatuslo>:
 8005be0:	b510      	push	{r4, lr}
 8005be2:	b082      	sub	sp, #8
 8005be4:	2200      	movs	r2, #0
 8005be6:	ab02      	add	r3, sp, #8
 8005be8:	f843 2d04 	str.w	r2, [r3, #-4]!
 8005bec:	4904      	ldr	r1, [pc, #16]	; (8005c00 <dwt_readsysstatuslo+0x20>)
 8005bee:	6808      	ldr	r0, [r1, #0]
 8005bf0:	6881      	ldr	r1, [r0, #8]
 8005bf2:	6909      	ldr	r1, [r1, #16]
 8005bf4:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8005bf6:	2176      	movs	r1, #118	; 0x76
 8005bf8:	47a0      	blx	r4
 8005bfa:	9801      	ldr	r0, [sp, #4]
 8005bfc:	b002      	add	sp, #8
 8005bfe:	bd10      	pop	{r4, pc}
 8005c00:	200001b4 	.word	0x200001b4

08005c04 <dwt_readsysstatushi>:
 8005c04:	b510      	push	{r4, lr}
 8005c06:	b082      	sub	sp, #8
 8005c08:	2200      	movs	r2, #0
 8005c0a:	ab02      	add	r3, sp, #8
 8005c0c:	f843 2d04 	str.w	r2, [r3, #-4]!
 8005c10:	4904      	ldr	r1, [pc, #16]	; (8005c24 <dwt_readsysstatushi+0x20>)
 8005c12:	6808      	ldr	r0, [r1, #0]
 8005c14:	6881      	ldr	r1, [r0, #8]
 8005c16:	6909      	ldr	r1, [r1, #16]
 8005c18:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8005c1a:	2177      	movs	r1, #119	; 0x77
 8005c1c:	47a0      	blx	r4
 8005c1e:	9801      	ldr	r0, [sp, #4]
 8005c20:	b002      	add	sp, #8
 8005c22:	bd10      	pop	{r4, pc}
 8005c24:	200001b4 	.word	0x200001b4

08005c28 <dwt_dbg_fn>:
 8005c28:	2998      	cmp	r1, #152	; 0x98
 8005c2a:	4802      	ldr	r0, [pc, #8]	; (8005c34 <dwt_dbg_fn+0xc>)
 8005c2c:	bf18      	it	ne
 8005c2e:	2000      	movne	r0, #0
 8005c30:	4770      	bx	lr
 8005c32:	bf00      	nop
 8005c34:	08013338 	.word	0x08013338

08005c38 <_deinit>:
 8005c38:	4770      	bx	lr

08005c3a <dwt_xfer3xxx>:
 8005c3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	4605      	mov	r5, r0
 8005c42:	460e      	mov	r6, r1
 8005c44:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8005c48:	1990      	adds	r0, r2, r6
 8005c4a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8005c4e:	4432      	add	r2, r6
 8005c50:	f3c2 4204 	ubfx	r2, r2, #16, #5
 8005c54:	0084      	lsls	r4, r0, #2
 8005c56:	ea44 2442 	orr.w	r4, r4, r2, lsl #9
 8005c5a:	ea41 0204 	orr.w	r2, r1, r4
 8005c5e:	0a12      	lsrs	r2, r2, #8
 8005c60:	f88d 200c 	strb.w	r2, [sp, #12]
 8005c64:	f001 0703 	and.w	r7, r1, #3
 8005c68:	433c      	orrs	r4, r7
 8005c6a:	f88d 400d 	strb.w	r4, [sp, #13]
 8005c6e:	461f      	mov	r7, r3
 8005c70:	b973      	cbnz	r3, 8005c90 <dwt_xfer3xxx+0x56>
 8005c72:	2900      	cmp	r1, #0
 8005c74:	d05c      	beq.n	8005d30 <dwt_xfer3xxx+0xf6>
 8005c76:	0073      	lsls	r3, r6, #1
 8005c78:	f063 037e 	orn	r3, r3, #126	; 0x7e
 8005c7c:	f88d 300c 	strb.w	r3, [sp, #12]
 8005c80:	2401      	movs	r4, #1
 8005c82:	2900      	cmp	r1, #0
 8005c84:	d02f      	beq.n	8005ce6 <dwt_xfer3xxx+0xac>
 8005c86:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
 8005c8a:	2903      	cmp	r1, #3
 8005c8c:	d90a      	bls.n	8005ca4 <dwt_xfer3xxx+0x6a>
 8005c8e:	e7fe      	b.n	8005c8e <dwt_xfer3xxx+0x54>
 8005c90:	2800      	cmp	r0, #0
 8005c92:	d14f      	bne.n	8005d34 <dwt_xfer3xxx+0xfa>
 8005c94:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005c98:	d003      	beq.n	8005ca2 <dwt_xfer3xxx+0x68>
 8005c9a:	2900      	cmp	r1, #0
 8005c9c:	d14a      	bne.n	8005d34 <dwt_xfer3xxx+0xfa>
 8005c9e:	2401      	movs	r4, #1
 8005ca0:	e021      	b.n	8005ce6 <dwt_xfer3xxx+0xac>
 8005ca2:	2401      	movs	r4, #1
 8005ca4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8005ca6:	7d9b      	ldrb	r3, [r3, #22]
 8005ca8:	b94b      	cbnz	r3, 8005cbe <dwt_xfer3xxx+0x84>
 8005caa:	682b      	ldr	r3, [r5, #0]
 8005cac:	685d      	ldr	r5, [r3, #4]
 8005cae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cb0:	463a      	mov	r2, r7
 8005cb2:	a903      	add	r1, sp, #12
 8005cb4:	4620      	mov	r0, r4
 8005cb6:	47a8      	blx	r5
 8005cb8:	b004      	add	sp, #16
 8005cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	4621      	mov	r1, r4
 8005cc2:	a803      	add	r0, sp, #12
 8005cc4:	f7ff ff54 	bl	8005b70 <dwt_generatecrc8>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	4639      	mov	r1, r7
 8005ccc:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005cce:	f7ff ff4f 	bl	8005b70 <dwt_generatecrc8>
 8005cd2:	682b      	ldr	r3, [r5, #0]
 8005cd4:	9000      	str	r0, [sp, #0]
 8005cd6:	689d      	ldr	r5, [r3, #8]
 8005cd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cda:	463a      	mov	r2, r7
 8005cdc:	a903      	add	r1, sp, #12
 8005cde:	4620      	mov	r0, r4
 8005ce0:	47a8      	blx	r5
 8005ce2:	e7e9      	b.n	8005cb8 <dwt_xfer3xxx+0x7e>
 8005ce4:	2401      	movs	r4, #1
 8005ce6:	682b      	ldr	r3, [r5, #0]
 8005ce8:	f8d3 8000 	ldr.w	r8, [r3]
 8005cec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cee:	463a      	mov	r2, r7
 8005cf0:	a903      	add	r1, sp, #12
 8005cf2:	4620      	mov	r0, r4
 8005cf4:	47c0      	blx	r8
 8005cf6:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8005cf8:	7d9b      	ldrb	r3, [r3, #22]
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d1dc      	bne.n	8005cb8 <dwt_xfer3xxx+0x7e>
 8005cfe:	2e18      	cmp	r6, #24
 8005d00:	d0da      	beq.n	8005cb8 <dwt_xfer3xxx+0x7e>
 8005d02:	2200      	movs	r2, #0
 8005d04:	4621      	mov	r1, r4
 8005d06:	a803      	add	r0, sp, #12
 8005d08:	f7ff ff32 	bl	8005b70 <dwt_generatecrc8>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	4639      	mov	r1, r7
 8005d10:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005d12:	f7ff ff2d 	bl	8005b70 <dwt_generatecrc8>
 8005d16:	4604      	mov	r4, r0
 8005d18:	2200      	movs	r2, #0
 8005d1a:	2118      	movs	r1, #24
 8005d1c:	4628      	mov	r0, r5
 8005d1e:	f000 f841 	bl	8005da4 <dwt_read8bitoffsetreg>
 8005d22:	4284      	cmp	r4, r0
 8005d24:	d0c8      	beq.n	8005cb8 <dwt_xfer3xxx+0x7e>
 8005d26:	68eb      	ldr	r3, [r5, #12]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d0c5      	beq.n	8005cb8 <dwt_xfer3xxx+0x7e>
 8005d2c:	4798      	blx	r3
 8005d2e:	e7c3      	b.n	8005cb8 <dwt_xfer3xxx+0x7e>
 8005d30:	2800      	cmp	r0, #0
 8005d32:	d0d7      	beq.n	8005ce4 <dwt_xfer3xxx+0xaa>
 8005d34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d38:	f88d 200c 	strb.w	r2, [sp, #12]
 8005d3c:	2402      	movs	r4, #2
 8005d3e:	e7a0      	b.n	8005c82 <dwt_xfer3xxx+0x48>

08005d40 <dwt_readfromdevice>:
 8005d40:	b510      	push	{r4, lr}
 8005d42:	b082      	sub	sp, #8
 8005d44:	2400      	movs	r4, #0
 8005d46:	9401      	str	r4, [sp, #4]
 8005d48:	9c04      	ldr	r4, [sp, #16]
 8005d4a:	9400      	str	r4, [sp, #0]
 8005d4c:	f7ff ff75 	bl	8005c3a <dwt_xfer3xxx>
 8005d50:	b002      	add	sp, #8
 8005d52:	bd10      	pop	{r4, pc}

08005d54 <dwt_read32bitoffsetreg>:
 8005d54:	b500      	push	{lr}
 8005d56:	b085      	sub	sp, #20
 8005d58:	ab03      	add	r3, sp, #12
 8005d5a:	9300      	str	r3, [sp, #0]
 8005d5c:	2304      	movs	r3, #4
 8005d5e:	b292      	uxth	r2, r2
 8005d60:	f7ff ffee 	bl	8005d40 <dwt_readfromdevice>
 8005d64:	f10d 030f 	add.w	r3, sp, #15
 8005d68:	f10d 010b 	add.w	r1, sp, #11
 8005d6c:	2000      	movs	r0, #0
 8005d6e:	f813 2901 	ldrb.w	r2, [r3], #-1
 8005d72:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 8005d76:	428b      	cmp	r3, r1
 8005d78:	d1f9      	bne.n	8005d6e <dwt_read32bitoffsetreg+0x1a>
 8005d7a:	b005      	add	sp, #20
 8005d7c:	f85d fb04 	ldr.w	pc, [sp], #4

08005d80 <dwt_read16bitoffsetreg>:
 8005d80:	b500      	push	{lr}
 8005d82:	b085      	sub	sp, #20
 8005d84:	ab03      	add	r3, sp, #12
 8005d86:	9300      	str	r3, [sp, #0]
 8005d88:	2302      	movs	r3, #2
 8005d8a:	b292      	uxth	r2, r2
 8005d8c:	f7ff ffd8 	bl	8005d40 <dwt_readfromdevice>
 8005d90:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8005d94:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8005d98:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 8005d9c:	b280      	uxth	r0, r0
 8005d9e:	b005      	add	sp, #20
 8005da0:	f85d fb04 	ldr.w	pc, [sp], #4

08005da4 <dwt_read8bitoffsetreg>:
 8005da4:	b500      	push	{lr}
 8005da6:	b085      	sub	sp, #20
 8005da8:	f10d 030f 	add.w	r3, sp, #15
 8005dac:	9300      	str	r3, [sp, #0]
 8005dae:	2301      	movs	r3, #1
 8005db0:	b292      	uxth	r2, r2
 8005db2:	f7ff ffc5 	bl	8005d40 <dwt_readfromdevice>
 8005db6:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8005dba:	b005      	add	sp, #20
 8005dbc:	f85d fb04 	ldr.w	pc, [sp], #4

08005dc0 <ull_readdiagnostics>:
 8005dc0:	b530      	push	{r4, r5, lr}
 8005dc2:	b0bd      	sub	sp, #244	; 0xf4
 8005dc4:	4605      	mov	r5, r0
 8005dc6:	460c      	mov	r4, r1
 8005dc8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005dca:	7bda      	ldrb	r2, [r3, #15]
 8005dcc:	2a01      	cmp	r2, #1
 8005dce:	d01c      	beq.n	8005e0a <ull_readdiagnostics+0x4a>
 8005dd0:	2a03      	cmp	r2, #3
 8005dd2:	f040 81d4 	bne.w	800617e <ull_readdiagnostics+0x3be>
 8005dd6:	7e1b      	ldrb	r3, [r3, #24]
 8005dd8:	f013 0f08 	tst.w	r3, #8
 8005ddc:	d10c      	bne.n	8005df8 <ull_readdiagnostics+0x38>
 8005dde:	f013 0f04 	tst.w	r3, #4
 8005de2:	ab02      	add	r3, sp, #8
 8005de4:	9300      	str	r3, [sp, #0]
 8005de6:	bf14      	ite	ne
 8005de8:	2338      	movne	r3, #56	; 0x38
 8005dea:	2320      	moveq	r3, #32
 8005dec:	2200      	movs	r2, #0
 8005dee:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8005df2:	f7ff ffa5 	bl	8005d40 <dwt_readfromdevice>
 8005df6:	e019      	b.n	8005e2c <ull_readdiagnostics+0x6c>
 8005df8:	ab02      	add	r3, sp, #8
 8005dfa:	9300      	str	r3, [sp, #0]
 8005dfc:	23e8      	movs	r3, #232	; 0xe8
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8005e04:	f7ff ff9c 	bl	8005d40 <dwt_readfromdevice>
 8005e08:	e010      	b.n	8005e2c <ull_readdiagnostics+0x6c>
 8005e0a:	7e1b      	ldrb	r3, [r3, #24]
 8005e0c:	f013 0f08 	tst.w	r3, #8
 8005e10:	f040 81ac 	bne.w	800616c <ull_readdiagnostics+0x3ac>
 8005e14:	f013 0f04 	tst.w	r3, #4
 8005e18:	ab02      	add	r3, sp, #8
 8005e1a:	9300      	str	r3, [sp, #0]
 8005e1c:	bf14      	ite	ne
 8005e1e:	2338      	movne	r3, #56	; 0x38
 8005e20:	2320      	moveq	r3, #32
 8005e22:	2200      	movs	r2, #0
 8005e24:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 8005e28:	f7ff ff8a 	bl	8005d40 <dwt_readfromdevice>
 8005e2c:	f10d 0217 	add.w	r2, sp, #23
 8005e30:	f104 031a 	add.w	r3, r4, #26
 8005e34:	f104 0020 	add.w	r0, r4, #32
 8005e38:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8005e3c:	f803 1b01 	strb.w	r1, [r3], #1
 8005e40:	4283      	cmp	r3, r0
 8005e42:	d1f9      	bne.n	8005e38 <ull_readdiagnostics+0x78>
 8005e44:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8005e48:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8005e4c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005e50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e54:	8463      	strh	r3, [r4, #34]	; 0x22
 8005e56:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8005e5a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8005e5e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005e62:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005e66:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8005e6a:	bf1c      	itt	ne
 8005e6c:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 8005e70:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 8005e74:	8423      	strh	r3, [r4, #32]
 8005e76:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 8005e7a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8005e7e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005e82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e86:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005e88:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8005e8a:	7e1b      	ldrb	r3, [r3, #24]
 8005e8c:	f013 0f02 	tst.w	r3, #2
 8005e90:	f040 816a 	bne.w	8006168 <ull_readdiagnostics+0x3a8>
 8005e94:	aa0a      	add	r2, sp, #40	; 0x28
 8005e96:	1e63      	subs	r3, r4, #1
 8005e98:	1d20      	adds	r0, r4, #4
 8005e9a:	f812 1b01 	ldrb.w	r1, [r2], #1
 8005e9e:	f803 1f01 	strb.w	r1, [r3, #1]!
 8005ea2:	79d1      	ldrb	r1, [r2, #7]
 8005ea4:	7219      	strb	r1, [r3, #8]
 8005ea6:	7bd1      	ldrb	r1, [r2, #15]
 8005ea8:	7459      	strb	r1, [r3, #17]
 8005eaa:	4283      	cmp	r3, r0
 8005eac:	d1f5      	bne.n	8005e9a <ull_readdiagnostics+0xda>
 8005eae:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8005eb2:	7163      	strb	r3, [r4, #5]
 8005eb4:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 8005eb8:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 8005ebc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005ec0:	80e3      	strh	r3, [r4, #6]
 8005ec2:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 8005ec6:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 8005eca:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005ece:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 8005ed2:	f8a4 300d 	strh.w	r3, [r4, #13]
 8005ed6:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 8005eda:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8005ede:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005ee2:	f8a4 300f 	strh.w	r3, [r4, #15]
 8005ee6:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 8005eea:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 8005eee:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005ef2:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 8005ef6:	82e3      	strh	r3, [r4, #22]
 8005ef8:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
 8005efc:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8005f00:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005f04:	8323      	strh	r3, [r4, #24]
 8005f06:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8005f08:	7e1b      	ldrb	r3, [r3, #24]
 8005f0a:	f013 0f04 	tst.w	r3, #4
 8005f0e:	f040 812b 	bne.w	8006168 <ull_readdiagnostics+0x3a8>
 8005f12:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 8005f16:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8005f1a:	041b      	lsls	r3, r3, #16
 8005f1c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005f20:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8005f24:	4313      	orrs	r3, r2
 8005f26:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8005f2a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005f2e:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8005f32:	6263      	str	r3, [r4, #36]	; 0x24
 8005f34:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
 8005f38:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
 8005f3c:	041b      	lsls	r3, r3, #16
 8005f3e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005f42:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8005f46:	4313      	orrs	r3, r2
 8005f48:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
 8005f4c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005f50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f54:	62a3      	str	r3, [r4, #40]	; 0x28
 8005f56:	f89d 204b 	ldrb.w	r2, [sp, #75]	; 0x4b
 8005f5a:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 8005f5e:	041b      	lsls	r3, r3, #16
 8005f60:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005f64:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 8005f6e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005f72:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8005f76:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005f78:	f89d 204f 	ldrb.w	r2, [sp, #79]	; 0x4f
 8005f7c:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
 8005f80:	041b      	lsls	r3, r3, #16
 8005f82:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005f86:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	f89d 204d 	ldrb.w	r2, [sp, #77]	; 0x4d
 8005f90:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005f94:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005f98:	6323      	str	r3, [r4, #48]	; 0x30
 8005f9a:	f89d 2053 	ldrb.w	r2, [sp, #83]	; 0x53
 8005f9e:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
 8005fa2:	041b      	lsls	r3, r3, #16
 8005fa4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005fa8:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8005fac:	4313      	orrs	r3, r2
 8005fae:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 8005fb2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005fb6:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005fba:	6363      	str	r3, [r4, #52]	; 0x34
 8005fbc:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
 8005fc0:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
 8005fc4:	041b      	lsls	r3, r3, #16
 8005fc6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005fca:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	f89d 2055 	ldrb.w	r2, [sp, #85]	; 0x55
 8005fd4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005fd8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005fdc:	63a3      	str	r3, [r4, #56]	; 0x38
 8005fde:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 8005fe2:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8005fe6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005fea:	87a3      	strh	r3, [r4, #60]	; 0x3c
 8005fec:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 8005ff0:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 8005ff4:	041b      	lsls	r3, r3, #16
 8005ff6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005ffa:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 8005ffe:	4313      	orrs	r3, r2
 8006000:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 8006004:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006008:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800600c:	6423      	str	r3, [r4, #64]	; 0x40
 800600e:	f89d 2079 	ldrb.w	r2, [sp, #121]	; 0x79
 8006012:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
 8006016:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800601a:	6463      	str	r3, [r4, #68]	; 0x44
 800601c:	f89d 207f 	ldrb.w	r2, [sp, #127]	; 0x7f
 8006020:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
 8006024:	041b      	lsls	r3, r3, #16
 8006026:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800602a:	f89d 207c 	ldrb.w	r2, [sp, #124]	; 0x7c
 800602e:	4313      	orrs	r3, r2
 8006030:	f89d 207d 	ldrb.w	r2, [sp, #125]	; 0x7d
 8006034:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006038:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800603c:	64a3      	str	r3, [r4, #72]	; 0x48
 800603e:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
 8006042:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
 8006046:	041b      	lsls	r3, r3, #16
 8006048:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800604c:	f89d 2080 	ldrb.w	r2, [sp, #128]	; 0x80
 8006050:	4313      	orrs	r3, r2
 8006052:	f89d 2081 	ldrb.w	r2, [sp, #129]	; 0x81
 8006056:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800605a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800605e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006060:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
 8006064:	f89d 3086 	ldrb.w	r3, [sp, #134]	; 0x86
 8006068:	041b      	lsls	r3, r3, #16
 800606a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800606e:	f89d 2084 	ldrb.w	r2, [sp, #132]	; 0x84
 8006072:	4313      	orrs	r3, r2
 8006074:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 8006078:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800607c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006080:	6523      	str	r3, [r4, #80]	; 0x50
 8006082:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 8006086:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 800608a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800608e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006092:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 8006096:	f89d 20a5 	ldrb.w	r2, [sp, #165]	; 0xa5
 800609a:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 800609e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80060a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060a6:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 80060aa:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 80060ae:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 80060b2:	041b      	lsls	r3, r3, #16
 80060b4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80060b8:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 80060bc:	4313      	orrs	r3, r2
 80060be:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 80060c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80060c6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80060ca:	65a3      	str	r3, [r4, #88]	; 0x58
 80060cc:	f89d 20c1 	ldrb.w	r2, [sp, #193]	; 0xc1
 80060d0:	f89d 30c0 	ldrb.w	r3, [sp, #192]	; 0xc0
 80060d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80060d8:	65e3      	str	r3, [r4, #92]	; 0x5c
 80060da:	f89d 20c7 	ldrb.w	r2, [sp, #199]	; 0xc7
 80060de:	f89d 30c6 	ldrb.w	r3, [sp, #198]	; 0xc6
 80060e2:	041b      	lsls	r3, r3, #16
 80060e4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80060e8:	f89d 20c4 	ldrb.w	r2, [sp, #196]	; 0xc4
 80060ec:	4313      	orrs	r3, r2
 80060ee:	f89d 20c5 	ldrb.w	r2, [sp, #197]	; 0xc5
 80060f2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80060f6:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80060fa:	6623      	str	r3, [r4, #96]	; 0x60
 80060fc:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
 8006100:	f89d 30ca 	ldrb.w	r3, [sp, #202]	; 0xca
 8006104:	041b      	lsls	r3, r3, #16
 8006106:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800610a:	f89d 20c8 	ldrb.w	r2, [sp, #200]	; 0xc8
 800610e:	4313      	orrs	r3, r2
 8006110:	f89d 20c9 	ldrb.w	r2, [sp, #201]	; 0xc9
 8006114:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006118:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800611c:	6663      	str	r3, [r4, #100]	; 0x64
 800611e:	f89d 20cf 	ldrb.w	r2, [sp, #207]	; 0xcf
 8006122:	f89d 30ce 	ldrb.w	r3, [sp, #206]	; 0xce
 8006126:	041b      	lsls	r3, r3, #16
 8006128:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800612c:	f89d 20cc 	ldrb.w	r2, [sp, #204]	; 0xcc
 8006130:	4313      	orrs	r3, r2
 8006132:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 8006136:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800613a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800613e:	66a3      	str	r3, [r4, #104]	; 0x68
 8006140:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 8006144:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8006148:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800614c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006150:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 8006154:	f89d 20ed 	ldrb.w	r2, [sp, #237]	; 0xed
 8006158:	f89d 30ec 	ldrb.w	r3, [sp, #236]	; 0xec
 800615c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006160:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006164:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 8006168:	b03d      	add	sp, #244	; 0xf4
 800616a:	bd30      	pop	{r4, r5, pc}
 800616c:	ab02      	add	r3, sp, #8
 800616e:	9300      	str	r3, [sp, #0]
 8006170:	23e8      	movs	r3, #232	; 0xe8
 8006172:	2200      	movs	r2, #0
 8006174:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 8006178:	f7ff fde2 	bl	8005d40 <dwt_readfromdevice>
 800617c:	e656      	b.n	8005e2c <ull_readdiagnostics+0x6c>
 800617e:	7e1b      	ldrb	r3, [r3, #24]
 8006180:	f013 0f01 	tst.w	r3, #1
 8006184:	f000 819f 	beq.w	80064c6 <ull_readdiagnostics+0x706>
 8006188:	ab02      	add	r3, sp, #8
 800618a:	9300      	str	r3, [sp, #0]
 800618c:	236c      	movs	r3, #108	; 0x6c
 800618e:	2200      	movs	r2, #0
 8006190:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 8006194:	f7ff fdd4 	bl	8005d40 <dwt_readfromdevice>
 8006198:	ab1d      	add	r3, sp, #116	; 0x74
 800619a:	9300      	str	r3, [sp, #0]
 800619c:	236c      	movs	r3, #108	; 0x6c
 800619e:	2200      	movs	r2, #0
 80061a0:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 80061a4:	4628      	mov	r0, r5
 80061a6:	f7ff fdcb 	bl	8005d40 <dwt_readfromdevice>
 80061aa:	aa02      	add	r2, sp, #8
 80061ac:	1e63      	subs	r3, r4, #1
 80061ae:	1d20      	adds	r0, r4, #4
 80061b0:	f812 1b01 	ldrb.w	r1, [r2], #1
 80061b4:	f803 1f01 	strb.w	r1, [r3, #1]!
 80061b8:	79d1      	ldrb	r1, [r2, #7]
 80061ba:	7219      	strb	r1, [r3, #8]
 80061bc:	7bd1      	ldrb	r1, [r2, #15]
 80061be:	7459      	strb	r1, [r3, #17]
 80061c0:	7dd1      	ldrb	r1, [r2, #23]
 80061c2:	7699      	strb	r1, [r3, #26]
 80061c4:	4283      	cmp	r3, r0
 80061c6:	d1f3      	bne.n	80061b0 <ull_readdiagnostics+0x3f0>
 80061c8:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 80061cc:	77e3      	strb	r3, [r4, #31]
 80061ce:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80061d2:	7163      	strb	r3, [r4, #5]
 80061d4:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80061d8:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80061dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80061e0:	80e3      	strh	r3, [r4, #6]
 80061e2:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80061e6:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80061ea:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 80061ee:	f3c2 12cf 	ubfx	r2, r2, #7, #16
 80061f2:	f8a4 200d 	strh.w	r2, [r4, #13]
 80061f6:	f89d 2015 	ldrb.w	r2, [sp, #21]
 80061fa:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80061fe:	f8a4 200f 	strh.w	r2, [r4, #15]
 8006202:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8006206:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800620a:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 800620e:	82e3      	strh	r3, [r4, #22]
 8006210:	f89d 201e 	ldrb.w	r2, [sp, #30]
 8006214:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8006218:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800621c:	8323      	strh	r3, [r4, #24]
 800621e:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 8006222:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 8006226:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800622a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800622e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8006232:	bf1c      	itt	ne
 8006234:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 8006238:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 800623c:	8423      	strh	r3, [r4, #32]
 800623e:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 8006242:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8006246:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800624a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800624e:	8463      	strh	r3, [r4, #34]	; 0x22
 8006250:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 8006254:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 8006258:	041b      	lsls	r3, r3, #16
 800625a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800625e:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 8006262:	4313      	orrs	r3, r2
 8006264:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 8006268:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800626c:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8006270:	6263      	str	r3, [r4, #36]	; 0x24
 8006272:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8006274:	7e1b      	ldrb	r3, [r3, #24]
 8006276:	f013 0f01 	tst.w	r3, #1
 800627a:	f43f af75 	beq.w	8006168 <ull_readdiagnostics+0x3a8>
 800627e:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 8006282:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8006286:	041b      	lsls	r3, r3, #16
 8006288:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800628c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8006290:	4313      	orrs	r3, r2
 8006292:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 8006296:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800629a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800629e:	62a3      	str	r3, [r4, #40]	; 0x28
 80062a0:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 80062a4:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 80062a8:	041b      	lsls	r3, r3, #16
 80062aa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80062ae:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 80062b2:	4313      	orrs	r3, r2
 80062b4:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 80062b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80062bc:	f3c3 0310 	ubfx	r3, r3, #0, #17
 80062c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80062c2:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 80062c6:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 80062ca:	041b      	lsls	r3, r3, #16
 80062cc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80062d0:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 80062d4:	4313      	orrs	r3, r2
 80062d6:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 80062da:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80062de:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80062e2:	6323      	str	r3, [r4, #48]	; 0x30
 80062e4:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 80062e8:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 80062ec:	041b      	lsls	r3, r3, #16
 80062ee:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80062f2:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 80062f6:	4313      	orrs	r3, r2
 80062f8:	f89d 203d 	ldrb.w	r2, [sp, #61]	; 0x3d
 80062fc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006300:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006304:	6363      	str	r3, [r4, #52]	; 0x34
 8006306:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 800630a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800630e:	041b      	lsls	r3, r3, #16
 8006310:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006314:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8006318:	4313      	orrs	r3, r2
 800631a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 800631e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006322:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006326:	63a3      	str	r3, [r4, #56]	; 0x38
 8006328:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 800632c:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8006330:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006334:	87a3      	strh	r3, [r4, #60]	; 0x3c
 8006336:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
 800633a:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 800633e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006342:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006346:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8006348:	f89d 2067 	ldrb.w	r2, [sp, #103]	; 0x67
 800634c:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
 8006350:	041b      	lsls	r3, r3, #16
 8006352:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006356:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 800635a:	4313      	orrs	r3, r2
 800635c:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 8006360:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006364:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8006368:	6423      	str	r3, [r4, #64]	; 0x40
 800636a:	f89d 2069 	ldrb.w	r2, [sp, #105]	; 0x69
 800636e:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 8006372:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006376:	6463      	str	r3, [r4, #68]	; 0x44
 8006378:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
 800637c:	f89d 306e 	ldrb.w	r3, [sp, #110]	; 0x6e
 8006380:	041b      	lsls	r3, r3, #16
 8006382:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006386:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 800638a:	4313      	orrs	r3, r2
 800638c:	f89d 206d 	ldrb.w	r2, [sp, #109]	; 0x6d
 8006390:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006394:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006398:	64a3      	str	r3, [r4, #72]	; 0x48
 800639a:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
 800639e:	f89d 3072 	ldrb.w	r3, [sp, #114]	; 0x72
 80063a2:	041b      	lsls	r3, r3, #16
 80063a4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80063a8:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
 80063ac:	4313      	orrs	r3, r2
 80063ae:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
 80063b2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80063b6:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80063ba:	64e3      	str	r3, [r4, #76]	; 0x4c
 80063bc:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 80063c0:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 80063c4:	041b      	lsls	r3, r3, #16
 80063c6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80063ca:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 80063ce:	4313      	orrs	r3, r2
 80063d0:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 80063d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80063d8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80063dc:	6523      	str	r3, [r4, #80]	; 0x50
 80063de:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 80063e2:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 80063e6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80063ea:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80063ee:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 80063f2:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 80063f6:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 80063fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80063fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006402:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8006406:	f89d 20af 	ldrb.w	r2, [sp, #175]	; 0xaf
 800640a:	f89d 30ae 	ldrb.w	r3, [sp, #174]	; 0xae
 800640e:	041b      	lsls	r3, r3, #16
 8006410:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006414:	f89d 20ac 	ldrb.w	r2, [sp, #172]	; 0xac
 8006418:	4313      	orrs	r3, r2
 800641a:	f89d 20ad 	ldrb.w	r2, [sp, #173]	; 0xad
 800641e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006422:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8006426:	65a3      	str	r3, [r4, #88]	; 0x58
 8006428:	f89d 20b1 	ldrb.w	r2, [sp, #177]	; 0xb1
 800642c:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 8006430:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006434:	65e3      	str	r3, [r4, #92]	; 0x5c
 8006436:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
 800643a:	f89d 30b6 	ldrb.w	r3, [sp, #182]	; 0xb6
 800643e:	041b      	lsls	r3, r3, #16
 8006440:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006444:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 8006448:	4313      	orrs	r3, r2
 800644a:	f89d 20b5 	ldrb.w	r2, [sp, #181]	; 0xb5
 800644e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006452:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006456:	6623      	str	r3, [r4, #96]	; 0x60
 8006458:	f89d 20bb 	ldrb.w	r2, [sp, #187]	; 0xbb
 800645c:	f89d 30ba 	ldrb.w	r3, [sp, #186]	; 0xba
 8006460:	041b      	lsls	r3, r3, #16
 8006462:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006466:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 800646a:	4313      	orrs	r3, r2
 800646c:	f89d 20b9 	ldrb.w	r2, [sp, #185]	; 0xb9
 8006470:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006474:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006478:	6663      	str	r3, [r4, #100]	; 0x64
 800647a:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 800647e:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 8006482:	041b      	lsls	r3, r3, #16
 8006484:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006488:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 800648c:	4313      	orrs	r3, r2
 800648e:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 8006492:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006496:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800649a:	66a3      	str	r3, [r4, #104]	; 0x68
 800649c:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 80064a0:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 80064a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80064a8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80064ac:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 80064b0:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 80064b4:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 80064b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80064bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064c0:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 80064c4:	e650      	b.n	8006168 <ull_readdiagnostics+0x3a8>
 80064c6:	ab02      	add	r3, sp, #8
 80064c8:	9300      	str	r3, [sp, #0]
 80064ca:	2328      	movs	r3, #40	; 0x28
 80064cc:	2200      	movs	r2, #0
 80064ce:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 80064d2:	f7ff fc35 	bl	8005d40 <dwt_readfromdevice>
 80064d6:	e668      	b.n	80061aa <ull_readdiagnostics+0x3ea>

080064d8 <ull_readrxtimestamp>:
 80064d8:	b500      	push	{lr}
 80064da:	b083      	sub	sp, #12
 80064dc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80064de:	7bdb      	ldrb	r3, [r3, #15]
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d00b      	beq.n	80064fc <ull_readrxtimestamp+0x24>
 80064e4:	2b03      	cmp	r3, #3
 80064e6:	d110      	bne.n	800650a <ull_readrxtimestamp+0x32>
 80064e8:	9100      	str	r1, [sp, #0]
 80064ea:	2305      	movs	r3, #5
 80064ec:	2204      	movs	r2, #4
 80064ee:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 80064f2:	f7ff fc25 	bl	8005d40 <dwt_readfromdevice>
 80064f6:	b003      	add	sp, #12
 80064f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80064fc:	9100      	str	r1, [sp, #0]
 80064fe:	2305      	movs	r3, #5
 8006500:	2200      	movs	r2, #0
 8006502:	4905      	ldr	r1, [pc, #20]	; (8006518 <ull_readrxtimestamp+0x40>)
 8006504:	f7ff fc1c 	bl	8005d40 <dwt_readfromdevice>
 8006508:	e7f5      	b.n	80064f6 <ull_readrxtimestamp+0x1e>
 800650a:	9100      	str	r1, [sp, #0]
 800650c:	2305      	movs	r3, #5
 800650e:	2200      	movs	r2, #0
 8006510:	2164      	movs	r1, #100	; 0x64
 8006512:	f7ff fc15 	bl	8005d40 <dwt_readfromdevice>
 8006516:	e7ee      	b.n	80064f6 <ull_readrxtimestamp+0x1e>
 8006518:	00180004 	.word	0x00180004

0800651c <dwt_writetodevice>:
 800651c:	b510      	push	{r4, lr}
 800651e:	b082      	sub	sp, #8
 8006520:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 8006524:	9401      	str	r4, [sp, #4]
 8006526:	9c04      	ldr	r4, [sp, #16]
 8006528:	9400      	str	r4, [sp, #0]
 800652a:	f7ff fb86 	bl	8005c3a <dwt_xfer3xxx>
 800652e:	b002      	add	sp, #8
 8006530:	bd10      	pop	{r4, pc}

08006532 <dwt_write8bitoffsetreg>:
 8006532:	b510      	push	{r4, lr}
 8006534:	b084      	sub	sp, #16
 8006536:	ac04      	add	r4, sp, #16
 8006538:	f804 3d01 	strb.w	r3, [r4, #-1]!
 800653c:	9400      	str	r4, [sp, #0]
 800653e:	2301      	movs	r3, #1
 8006540:	b292      	uxth	r2, r2
 8006542:	f7ff ffeb 	bl	800651c <dwt_writetodevice>
 8006546:	b004      	add	sp, #16
 8006548:	bd10      	pop	{r4, pc}
	...

0800654c <ull_getframelength>:
 800654c:	b510      	push	{r4, lr}
 800654e:	4604      	mov	r4, r0
 8006550:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006552:	7bdb      	ldrb	r3, [r3, #15]
 8006554:	2b01      	cmp	r3, #1
 8006556:	d013      	beq.n	8006580 <ull_getframelength+0x34>
 8006558:	2b03      	cmp	r3, #3
 800655a:	d11d      	bne.n	8006598 <ull_getframelength+0x4c>
 800655c:	23f0      	movs	r3, #240	; 0xf0
 800655e:	2200      	movs	r2, #0
 8006560:	4912      	ldr	r1, [pc, #72]	; (80065ac <ull_getframelength+0x60>)
 8006562:	f7ff ffe6 	bl	8006532 <dwt_write8bitoffsetreg>
 8006566:	2200      	movs	r2, #0
 8006568:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800656c:	4620      	mov	r0, r4
 800656e:	f7ff fc07 	bl	8005d80 <dwt_read16bitoffsetreg>
 8006572:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006574:	7b1a      	ldrb	r2, [r3, #12]
 8006576:	b1a2      	cbz	r2, 80065a2 <ull_getframelength+0x56>
 8006578:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800657c:	8458      	strh	r0, [r3, #34]	; 0x22
 800657e:	bd10      	pop	{r4, pc}
 8006580:	230f      	movs	r3, #15
 8006582:	2200      	movs	r2, #0
 8006584:	4909      	ldr	r1, [pc, #36]	; (80065ac <ull_getframelength+0x60>)
 8006586:	f7ff ffd4 	bl	8006532 <dwt_write8bitoffsetreg>
 800658a:	2200      	movs	r2, #0
 800658c:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 8006590:	4620      	mov	r0, r4
 8006592:	f7ff fbf5 	bl	8005d80 <dwt_read16bitoffsetreg>
 8006596:	e7ec      	b.n	8006572 <ull_getframelength+0x26>
 8006598:	2200      	movs	r2, #0
 800659a:	214c      	movs	r1, #76	; 0x4c
 800659c:	f7ff fbf0 	bl	8005d80 <dwt_read16bitoffsetreg>
 80065a0:	e7e7      	b.n	8006572 <ull_getframelength+0x26>
 80065a2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80065a6:	8458      	strh	r0, [r3, #34]	; 0x22
 80065a8:	e7e9      	b.n	800657e <ull_getframelength+0x32>
 80065aa:	bf00      	nop
 80065ac:	00010024 	.word	0x00010024

080065b0 <ull_configeventcounters>:
 80065b0:	b538      	push	{r3, r4, r5, lr}
 80065b2:	4605      	mov	r5, r0
 80065b4:	460c      	mov	r4, r1
 80065b6:	2302      	movs	r3, #2
 80065b8:	2200      	movs	r2, #0
 80065ba:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 80065be:	f7ff ffb8 	bl	8006532 <dwt_write8bitoffsetreg>
 80065c2:	b904      	cbnz	r4, 80065c6 <ull_configeventcounters+0x16>
 80065c4:	bd38      	pop	{r3, r4, r5, pc}
 80065c6:	2301      	movs	r3, #1
 80065c8:	2200      	movs	r2, #0
 80065ca:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 80065ce:	4628      	mov	r0, r5
 80065d0:	f7ff ffaf 	bl	8006532 <dwt_write8bitoffsetreg>
 80065d4:	e7f6      	b.n	80065c4 <ull_configeventcounters+0x14>

080065d6 <dwt_write16bitoffsetreg>:
 80065d6:	b500      	push	{lr}
 80065d8:	b085      	sub	sp, #20
 80065da:	f88d 300c 	strb.w	r3, [sp, #12]
 80065de:	0a1b      	lsrs	r3, r3, #8
 80065e0:	f88d 300d 	strb.w	r3, [sp, #13]
 80065e4:	ab03      	add	r3, sp, #12
 80065e6:	9300      	str	r3, [sp, #0]
 80065e8:	2302      	movs	r3, #2
 80065ea:	b292      	uxth	r2, r2
 80065ec:	f7ff ff96 	bl	800651c <dwt_writetodevice>
 80065f0:	b005      	add	sp, #20
 80065f2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080065f8 <ull_clearaonconfig>:
 80065f8:	b538      	push	{r3, r4, r5, lr}
 80065fa:	4604      	mov	r4, r0
 80065fc:	2300      	movs	r3, #0
 80065fe:	461a      	mov	r2, r3
 8006600:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 8006604:	f7ff ffe7 	bl	80065d6 <dwt_write16bitoffsetreg>
 8006608:	2300      	movs	r3, #0
 800660a:	461a      	mov	r2, r3
 800660c:	4908      	ldr	r1, [pc, #32]	; (8006630 <ull_clearaonconfig+0x38>)
 800660e:	4620      	mov	r0, r4
 8006610:	f7ff ff8f 	bl	8006532 <dwt_write8bitoffsetreg>
 8006614:	4d07      	ldr	r5, [pc, #28]	; (8006634 <ull_clearaonconfig+0x3c>)
 8006616:	2300      	movs	r3, #0
 8006618:	461a      	mov	r2, r3
 800661a:	4629      	mov	r1, r5
 800661c:	4620      	mov	r0, r4
 800661e:	f7ff ff88 	bl	8006532 <dwt_write8bitoffsetreg>
 8006622:	2302      	movs	r3, #2
 8006624:	2200      	movs	r2, #0
 8006626:	4629      	mov	r1, r5
 8006628:	4620      	mov	r0, r4
 800662a:	f7ff ff82 	bl	8006532 <dwt_write8bitoffsetreg>
 800662e:	bd38      	pop	{r3, r4, r5, pc}
 8006630:	000a0014 	.word	0x000a0014
 8006634:	000a0004 	.word	0x000a0004

08006638 <ull_force_clocks>:
 8006638:	b508      	push	{r3, lr}
 800663a:	2901      	cmp	r1, #1
 800663c:	d002      	beq.n	8006644 <ull_force_clocks+0xc>
 800663e:	2905      	cmp	r1, #5
 8006640:	d007      	beq.n	8006652 <ull_force_clocks+0x1a>
 8006642:	bd08      	pop	{r3, pc}
 8006644:	f641 0322 	movw	r3, #6178	; 0x1822
 8006648:	2200      	movs	r2, #0
 800664a:	4905      	ldr	r1, [pc, #20]	; (8006660 <ull_force_clocks+0x28>)
 800664c:	f7ff ffc3 	bl	80065d6 <dwt_write16bitoffsetreg>
 8006650:	e7f7      	b.n	8006642 <ull_force_clocks+0xa>
 8006652:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006656:	2200      	movs	r2, #0
 8006658:	4901      	ldr	r1, [pc, #4]	; (8006660 <ull_force_clocks+0x28>)
 800665a:	f7ff ffbc 	bl	80065d6 <dwt_write16bitoffsetreg>
 800665e:	e7f0      	b.n	8006642 <ull_force_clocks+0xa>
 8006660:	00110004 	.word	0x00110004

08006664 <__dwt_otp_write_wdata_id_reg>:
 8006664:	b538      	push	{r3, r4, r5, lr}
 8006666:	4605      	mov	r5, r0
 8006668:	460c      	mov	r4, r1
 800666a:	f441 7300 	orr.w	r3, r1, #512	; 0x200
 800666e:	b29b      	uxth	r3, r3
 8006670:	2200      	movs	r2, #0
 8006672:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8006676:	f7ff ffae 	bl	80065d6 <dwt_write16bitoffsetreg>
 800667a:	b2a3      	uxth	r3, r4
 800667c:	2200      	movs	r2, #0
 800667e:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8006682:	4628      	mov	r0, r5
 8006684:	f7ff ffa7 	bl	80065d6 <dwt_write16bitoffsetreg>
 8006688:	bd38      	pop	{r3, r4, r5, pc}
	...

0800668c <_dwt_otpread>:
 800668c:	b570      	push	{r4, r5, r6, lr}
 800668e:	4604      	mov	r4, r0
 8006690:	460e      	mov	r6, r1
 8006692:	4d0c      	ldr	r5, [pc, #48]	; (80066c4 <_dwt_otpread+0x38>)
 8006694:	2301      	movs	r3, #1
 8006696:	2200      	movs	r2, #0
 8006698:	4629      	mov	r1, r5
 800669a:	f7ff ff9c 	bl	80065d6 <dwt_write16bitoffsetreg>
 800669e:	4633      	mov	r3, r6
 80066a0:	2200      	movs	r2, #0
 80066a2:	4909      	ldr	r1, [pc, #36]	; (80066c8 <_dwt_otpread+0x3c>)
 80066a4:	4620      	mov	r0, r4
 80066a6:	f7ff ff96 	bl	80065d6 <dwt_write16bitoffsetreg>
 80066aa:	2302      	movs	r3, #2
 80066ac:	2200      	movs	r2, #0
 80066ae:	4629      	mov	r1, r5
 80066b0:	4620      	mov	r0, r4
 80066b2:	f7ff ff90 	bl	80065d6 <dwt_write16bitoffsetreg>
 80066b6:	2200      	movs	r2, #0
 80066b8:	4904      	ldr	r1, [pc, #16]	; (80066cc <_dwt_otpread+0x40>)
 80066ba:	4620      	mov	r0, r4
 80066bc:	f7ff fb4a 	bl	8005d54 <dwt_read32bitoffsetreg>
 80066c0:	bd70      	pop	{r4, r5, r6, pc}
 80066c2:	bf00      	nop
 80066c4:	000b0008 	.word	0x000b0008
 80066c8:	000b0004 	.word	0x000b0004
 80066cc:	000b0010 	.word	0x000b0010

080066d0 <ull_aon_read>:
 80066d0:	b538      	push	{r3, r4, r5, lr}
 80066d2:	4604      	mov	r4, r0
 80066d4:	460b      	mov	r3, r1
 80066d6:	2200      	movs	r2, #0
 80066d8:	490a      	ldr	r1, [pc, #40]	; (8006704 <ull_aon_read+0x34>)
 80066da:	f7ff ff7c 	bl	80065d6 <dwt_write16bitoffsetreg>
 80066de:	4d0a      	ldr	r5, [pc, #40]	; (8006708 <ull_aon_read+0x38>)
 80066e0:	2388      	movs	r3, #136	; 0x88
 80066e2:	2200      	movs	r2, #0
 80066e4:	4629      	mov	r1, r5
 80066e6:	4620      	mov	r0, r4
 80066e8:	f7ff ff23 	bl	8006532 <dwt_write8bitoffsetreg>
 80066ec:	2300      	movs	r3, #0
 80066ee:	461a      	mov	r2, r3
 80066f0:	4629      	mov	r1, r5
 80066f2:	4620      	mov	r0, r4
 80066f4:	f7ff ff1d 	bl	8006532 <dwt_write8bitoffsetreg>
 80066f8:	2200      	movs	r2, #0
 80066fa:	4904      	ldr	r1, [pc, #16]	; (800670c <ull_aon_read+0x3c>)
 80066fc:	4620      	mov	r0, r4
 80066fe:	f7ff fb51 	bl	8005da4 <dwt_read8bitoffsetreg>
 8006702:	bd38      	pop	{r3, r4, r5, pc}
 8006704:	000a000c 	.word	0x000a000c
 8006708:	000a0004 	.word	0x000a0004
 800670c:	000a0008 	.word	0x000a0008

08006710 <ull_aon_write>:
 8006710:	b570      	push	{r4, r5, r6, lr}
 8006712:	4604      	mov	r4, r0
 8006714:	460b      	mov	r3, r1
 8006716:	4615      	mov	r5, r2
 8006718:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800671c:	bf34      	ite	cc
 800671e:	2600      	movcc	r6, #0
 8006720:	2620      	movcs	r6, #32
 8006722:	2200      	movs	r2, #0
 8006724:	490b      	ldr	r1, [pc, #44]	; (8006754 <ull_aon_write+0x44>)
 8006726:	f7ff ff56 	bl	80065d6 <dwt_write16bitoffsetreg>
 800672a:	462b      	mov	r3, r5
 800672c:	2200      	movs	r2, #0
 800672e:	490a      	ldr	r1, [pc, #40]	; (8006758 <ull_aon_write+0x48>)
 8006730:	4620      	mov	r0, r4
 8006732:	f7ff fefe 	bl	8006532 <dwt_write8bitoffsetreg>
 8006736:	4d09      	ldr	r5, [pc, #36]	; (800675c <ull_aon_write+0x4c>)
 8006738:	f046 0390 	orr.w	r3, r6, #144	; 0x90
 800673c:	2200      	movs	r2, #0
 800673e:	4629      	mov	r1, r5
 8006740:	4620      	mov	r0, r4
 8006742:	f7ff fef6 	bl	8006532 <dwt_write8bitoffsetreg>
 8006746:	2300      	movs	r3, #0
 8006748:	461a      	mov	r2, r3
 800674a:	4629      	mov	r1, r5
 800674c:	4620      	mov	r0, r4
 800674e:	f7ff fef0 	bl	8006532 <dwt_write8bitoffsetreg>
 8006752:	bd70      	pop	{r4, r5, r6, pc}
 8006754:	000a000c 	.word	0x000a000c
 8006758:	000a0010 	.word	0x000a0010
 800675c:	000a0004 	.word	0x000a0004

08006760 <ull_configuresleep>:
 8006760:	b570      	push	{r4, r5, r6, lr}
 8006762:	4604      	mov	r4, r0
 8006764:	460d      	mov	r5, r1
 8006766:	4616      	mov	r6, r2
 8006768:	2200      	movs	r2, #0
 800676a:	f240 110b 	movw	r1, #267	; 0x10b
 800676e:	f7ff ffcf 	bl	8006710 <ull_aon_write>
 8006772:	f44f 7182 	mov.w	r1, #260	; 0x104
 8006776:	4620      	mov	r0, r4
 8006778:	f7ff ffaa 	bl	80066d0 <ull_aon_read>
 800677c:	f000 021f 	and.w	r2, r0, #31
 8006780:	f44f 7182 	mov.w	r1, #260	; 0x104
 8006784:	4620      	mov	r0, r4
 8006786:	f7ff ffc3 	bl	8006710 <ull_aon_write>
 800678a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800678c:	8a5a      	ldrh	r2, [r3, #18]
 800678e:	4315      	orrs	r5, r2
 8006790:	825d      	strh	r5, [r3, #18]
 8006792:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006794:	8a5b      	ldrh	r3, [r3, #18]
 8006796:	2200      	movs	r2, #0
 8006798:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 800679c:	4620      	mov	r0, r4
 800679e:	f7ff ff1a 	bl	80065d6 <dwt_write16bitoffsetreg>
 80067a2:	4633      	mov	r3, r6
 80067a4:	2200      	movs	r2, #0
 80067a6:	4902      	ldr	r1, [pc, #8]	; (80067b0 <ull_configuresleep+0x50>)
 80067a8:	4620      	mov	r0, r4
 80067aa:	f7ff fec2 	bl	8006532 <dwt_write8bitoffsetreg>
 80067ae:	bd70      	pop	{r4, r5, r6, pc}
 80067b0:	000a0014 	.word	0x000a0014

080067b4 <ull_signal_rx_buff_free>:
 80067b4:	b510      	push	{r4, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	4604      	mov	r4, r0
 80067ba:	2200      	movs	r2, #0
 80067bc:	9200      	str	r2, [sp, #0]
 80067be:	4613      	mov	r3, r2
 80067c0:	2113      	movs	r1, #19
 80067c2:	f7ff feab 	bl	800651c <dwt_writetodevice>
 80067c6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80067c8:	7bda      	ldrb	r2, [r3, #15]
 80067ca:	2a03      	cmp	r2, #3
 80067cc:	bf0c      	ite	eq
 80067ce:	2201      	moveq	r2, #1
 80067d0:	2203      	movne	r2, #3
 80067d2:	73da      	strb	r2, [r3, #15]
 80067d4:	b002      	add	sp, #8
 80067d6:	bd10      	pop	{r4, pc}

080067d8 <dwt_write32bitoffsetreg>:
 80067d8:	b510      	push	{r4, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	f88d 300c 	strb.w	r3, [sp, #12]
 80067e0:	0a1c      	lsrs	r4, r3, #8
 80067e2:	f88d 400d 	strb.w	r4, [sp, #13]
 80067e6:	0c1c      	lsrs	r4, r3, #16
 80067e8:	f88d 400e 	strb.w	r4, [sp, #14]
 80067ec:	0e1b      	lsrs	r3, r3, #24
 80067ee:	f88d 300f 	strb.w	r3, [sp, #15]
 80067f2:	ab03      	add	r3, sp, #12
 80067f4:	9300      	str	r3, [sp, #0]
 80067f6:	2304      	movs	r3, #4
 80067f8:	b292      	uxth	r2, r2
 80067fa:	f7ff fe8f 	bl	800651c <dwt_writetodevice>
 80067fe:	b004      	add	sp, #16
 8006800:	bd10      	pop	{r4, pc}
	...

08006804 <ull_isr>:
 8006804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006806:	4604      	mov	r4, r0
 8006808:	2200      	movs	r2, #0
 800680a:	f44f 11f8 	mov.w	r1, #2031616	; 0x1f0000
 800680e:	f7ff fac9 	bl	8005da4 <dwt_read8bitoffsetreg>
 8006812:	4605      	mov	r5, r0
 8006814:	2200      	movs	r2, #0
 8006816:	2144      	movs	r1, #68	; 0x44
 8006818:	4620      	mov	r0, r4
 800681a:	f7ff fa9b 	bl	8005d54 <dwt_read32bitoffsetreg>
 800681e:	4606      	mov	r6, r0
 8006820:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006822:	2200      	movs	r2, #0
 8006824:	845a      	strh	r2, [r3, #34]	; 0x22
 8006826:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800682a:	61da      	str	r2, [r3, #28]
 800682c:	841a      	strh	r2, [r3, #32]
 800682e:	629a      	str	r2, [r3, #40]	; 0x28
 8006830:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006832:	629c      	str	r4, [r3, #40]	; 0x28
 8006834:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006836:	61d8      	str	r0, [r3, #28]
 8006838:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800683a:	7dd3      	ldrb	r3, [r2, #23]
 800683c:	f003 0303 	and.w	r3, r3, #3
 8006840:	2b03      	cmp	r3, #3
 8006842:	d079      	beq.n	8006938 <ull_isr+0x134>
 8006844:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8006848:	d005      	beq.n	8006856 <ull_isr+0x52>
 800684a:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 800684e:	f043 0304 	orr.w	r3, r3, #4
 8006852:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8006856:	f015 0f80 	tst.w	r5, #128	; 0x80
 800685a:	d174      	bne.n	8006946 <ull_isr+0x142>
 800685c:	f015 0f01 	tst.w	r5, #1
 8006860:	f040 80a3 	bne.w	80069aa <ull_isr+0x1a6>
 8006864:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006868:	d00b      	beq.n	8006882 <ull_isr+0x7e>
 800686a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800686c:	b113      	cbz	r3, 8006874 <ull_isr+0x70>
 800686e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8006870:	301c      	adds	r0, #28
 8006872:	4798      	blx	r3
 8006874:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8006878:	2202      	movs	r2, #2
 800687a:	2144      	movs	r1, #68	; 0x44
 800687c:	4620      	mov	r0, r4
 800687e:	f7ff feaa 	bl	80065d6 <dwt_write16bitoffsetreg>
 8006882:	f015 0f08 	tst.w	r5, #8
 8006886:	f000 80ea 	beq.w	8006a5e <ull_isr+0x25a>
 800688a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800688c:	2200      	movs	r2, #0
 800688e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006892:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006894:	7bdb      	ldrb	r3, [r3, #15]
 8006896:	2b00      	cmp	r3, #0
 8006898:	f040 8095 	bne.w	80069c6 <ull_isr+0x1c2>
 800689c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800689e:	61de      	str	r6, [r3, #28]
 80068a0:	f416 2f80 	tst.w	r6, #262144	; 0x40000
 80068a4:	f000 80a9 	beq.w	80069fa <ull_isr+0x1f6>
 80068a8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80068aa:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80068ae:	f043 0308 	orr.w	r3, r3, #8
 80068b2:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 80068b6:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 80068ba:	f016 5f80 	tst.w	r6, #268435456	; 0x10000000
 80068be:	d008      	beq.n	80068d2 <ull_isr+0xce>
 80068c0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80068c2:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80068c6:	f043 0310 	orr.w	r3, r3, #16
 80068ca:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 80068ce:	f047 5780 	orr.w	r7, r7, #268435456	; 0x10000000
 80068d2:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 80068d6:	d006      	beq.n	80068e6 <ull_isr+0xe2>
 80068d8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80068da:	7dd3      	ldrb	r3, [r2, #23]
 80068dc:	f003 0303 	and.w	r3, r3, #3
 80068e0:	2b03      	cmp	r3, #3
 80068e2:	f000 8096 	beq.w	8006a12 <ull_isr+0x20e>
 80068e6:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 80068ea:	f040 809e 	bne.w	8006a2a <ull_isr+0x226>
 80068ee:	f447 43de 	orr.w	r3, r7, #28416	; 0x6f00
 80068f2:	2200      	movs	r2, #0
 80068f4:	2144      	movs	r1, #68	; 0x44
 80068f6:	4620      	mov	r0, r4
 80068f8:	f7ff ff6e 	bl	80067d8 <dwt_write32bitoffsetreg>
 80068fc:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80068fe:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8006900:	2b00      	cmp	r3, #0
 8006902:	f040 80a1 	bne.w	8006a48 <ull_isr+0x244>
 8006906:	7dc3      	ldrb	r3, [r0, #23]
 8006908:	f003 0303 	and.w	r3, r3, #3
 800690c:	2b03      	cmp	r3, #3
 800690e:	f000 809b 	beq.w	8006a48 <ull_isr+0x244>
 8006912:	69c3      	ldr	r3, [r0, #28]
 8006914:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8006918:	61c3      	str	r3, [r0, #28]
 800691a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800691c:	69d3      	ldr	r3, [r2, #28]
 800691e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006922:	61d3      	str	r3, [r2, #28]
 8006924:	69e3      	ldr	r3, [r4, #28]
 8006926:	b113      	cbz	r3, 800692e <ull_isr+0x12a>
 8006928:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800692a:	301c      	adds	r0, #28
 800692c:	4798      	blx	r3
 800692e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006930:	2200      	movs	r2, #0
 8006932:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006936:	e08b      	b.n	8006a50 <ull_isr+0x24c>
 8006938:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 800693c:	bf1c      	itt	ne
 800693e:	f045 0508 	orrne.w	r5, r5, #8
 8006942:	b2ed      	uxtbne	r5, r5
 8006944:	e77e      	b.n	8006844 <ull_isr+0x40>
 8006946:	6d27      	ldr	r7, [r4, #80]	; 0x50
 8006948:	2200      	movs	r2, #0
 800694a:	2148      	movs	r1, #72	; 0x48
 800694c:	4620      	mov	r0, r4
 800694e:	f7ff fa17 	bl	8005d80 <dwt_read16bitoffsetreg>
 8006952:	8438      	strh	r0, [r7, #32]
 8006954:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006956:	7d9a      	ldrb	r2, [r3, #22]
 8006958:	b11a      	cbz	r2, 8006962 <ull_isr+0x15e>
 800695a:	69da      	ldr	r2, [r3, #28]
 800695c:	f012 0f04 	tst.w	r2, #4
 8006960:	d103      	bne.n	800696a <ull_isr+0x166>
 8006962:	8c1b      	ldrh	r3, [r3, #32]
 8006964:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8006968:	b18b      	cbz	r3, 800698e <ull_isr+0x18a>
 800696a:	2304      	movs	r3, #4
 800696c:	2200      	movs	r2, #0
 800696e:	2144      	movs	r1, #68	; 0x44
 8006970:	4620      	mov	r0, r4
 8006972:	f7ff fdde 	bl	8006532 <dwt_write8bitoffsetreg>
 8006976:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 800697a:	2200      	movs	r2, #0
 800697c:	2148      	movs	r1, #72	; 0x48
 800697e:	4620      	mov	r0, r4
 8006980:	f7ff fe29 	bl	80065d6 <dwt_write16bitoffsetreg>
 8006984:	6a23      	ldr	r3, [r4, #32]
 8006986:	b113      	cbz	r3, 800698e <ull_isr+0x18a>
 8006988:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800698a:	301c      	adds	r0, #28
 800698c:	4798      	blx	r3
 800698e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006990:	8c1b      	ldrh	r3, [r3, #32]
 8006992:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006996:	f43f af61 	beq.w	800685c <ull_isr+0x58>
 800699a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800699e:	2200      	movs	r2, #0
 80069a0:	2148      	movs	r1, #72	; 0x48
 80069a2:	4620      	mov	r0, r4
 80069a4:	f7ff fe17 	bl	80065d6 <dwt_write16bitoffsetreg>
 80069a8:	e758      	b.n	800685c <ull_isr+0x58>
 80069aa:	23f8      	movs	r3, #248	; 0xf8
 80069ac:	2200      	movs	r2, #0
 80069ae:	2144      	movs	r1, #68	; 0x44
 80069b0:	4620      	mov	r0, r4
 80069b2:	f7ff fdbe 	bl	8006532 <dwt_write8bitoffsetreg>
 80069b6:	6923      	ldr	r3, [r4, #16]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	f43f af53 	beq.w	8006864 <ull_isr+0x60>
 80069be:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80069c0:	301c      	adds	r0, #28
 80069c2:	4798      	blx	r3
 80069c4:	e74e      	b.n	8006864 <ull_isr+0x60>
 80069c6:	493b      	ldr	r1, [pc, #236]	; (8006ab4 <ull_isr+0x2b0>)
 80069c8:	4620      	mov	r0, r4
 80069ca:	f7ff f9eb 	bl	8005da4 <dwt_read8bitoffsetreg>
 80069ce:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80069d0:	7bdb      	ldrb	r3, [r3, #15]
 80069d2:	2b03      	cmp	r3, #3
 80069d4:	bf08      	it	eq
 80069d6:	f3c0 1007 	ubfxeq	r0, r0, #4, #8
 80069da:	f010 0f01 	tst.w	r0, #1
 80069de:	bf18      	it	ne
 80069e0:	f446 4680 	orrne.w	r6, r6, #16384	; 0x4000
 80069e4:	f010 0f02 	tst.w	r0, #2
 80069e8:	bf18      	it	ne
 80069ea:	f446 5600 	orrne.w	r6, r6, #8192	; 0x2000
 80069ee:	f010 0f04 	tst.w	r0, #4
 80069f2:	bf18      	it	ne
 80069f4:	f446 6680 	orrne.w	r6, r6, #1024	; 0x400
 80069f8:	e750      	b.n	800689c <ull_isr+0x98>
 80069fa:	f416 6f80 	tst.w	r6, #1024	; 0x400
 80069fe:	bf1f      	itttt	ne
 8006a00:	6d22      	ldrne	r2, [r4, #80]	; 0x50
 8006a02:	f892 3024 	ldrbne.w	r3, [r2, #36]	; 0x24
 8006a06:	f043 0304 	orrne.w	r3, r3, #4
 8006a0a:	f882 3024 	strbne.w	r3, [r2, #36]	; 0x24
 8006a0e:	2700      	movs	r7, #0
 8006a10:	e753      	b.n	80068ba <ull_isr+0xb6>
 8006a12:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8006a16:	f043 0302 	orr.w	r3, r3, #2
 8006a1a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8006a1e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006a20:	2200      	movs	r2, #0
 8006a22:	845a      	strh	r2, [r3, #34]	; 0x22
 8006a24:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 8006a28:	e761      	b.n	80068ee <ull_isr+0xea>
 8006a2a:	4620      	mov	r0, r4
 8006a2c:	f7ff fd8e 	bl	800654c <ull_getframelength>
 8006a30:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8006a34:	f43f af5b 	beq.w	80068ee <ull_isr+0xea>
 8006a38:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8006a3a:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8006a3e:	f043 0301 	orr.w	r3, r3, #1
 8006a42:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8006a46:	e752      	b.n	80068ee <ull_isr+0xea>
 8006a48:	6963      	ldr	r3, [r4, #20]
 8006a4a:	b10b      	cbz	r3, 8006a50 <ull_isr+0x24c>
 8006a4c:	301c      	adds	r0, #28
 8006a4e:	4798      	blx	r3
 8006a50:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006a52:	7bdb      	ldrb	r3, [r3, #15]
 8006a54:	b953      	cbnz	r3, 8006a6c <ull_isr+0x268>
 8006a56:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006a58:	2200      	movs	r2, #0
 8006a5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006a5e:	f015 0f10 	tst.w	r5, #16
 8006a62:	d107      	bne.n	8006a74 <ull_isr+0x270>
 8006a64:	f015 0f20 	tst.w	r5, #32
 8006a68:	d114      	bne.n	8006a94 <ull_isr+0x290>
 8006a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a6c:	4620      	mov	r0, r4
 8006a6e:	f7ff fea1 	bl	80067b4 <ull_signal_rx_buff_free>
 8006a72:	e7f0      	b.n	8006a56 <ull_isr+0x252>
 8006a74:	4b10      	ldr	r3, [pc, #64]	; (8006ab8 <ull_isr+0x2b4>)
 8006a76:	2200      	movs	r2, #0
 8006a78:	2144      	movs	r1, #68	; 0x44
 8006a7a:	4620      	mov	r0, r4
 8006a7c:	f7ff feac 	bl	80067d8 <dwt_write32bitoffsetreg>
 8006a80:	69e3      	ldr	r3, [r4, #28]
 8006a82:	b113      	cbz	r3, 8006a8a <ull_isr+0x286>
 8006a84:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8006a86:	301c      	adds	r0, #28
 8006a88:	4798      	blx	r3
 8006a8a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006a92:	e7e7      	b.n	8006a64 <ull_isr+0x260>
 8006a94:	4b09      	ldr	r3, [pc, #36]	; (8006abc <ull_isr+0x2b8>)
 8006a96:	2200      	movs	r2, #0
 8006a98:	2144      	movs	r1, #68	; 0x44
 8006a9a:	4620      	mov	r0, r4
 8006a9c:	f7ff fe9c 	bl	80067d8 <dwt_write32bitoffsetreg>
 8006aa0:	69a3      	ldr	r3, [r4, #24]
 8006aa2:	b113      	cbz	r3, 8006aaa <ull_isr+0x2a6>
 8006aa4:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8006aa6:	301c      	adds	r0, #28
 8006aa8:	4798      	blx	r3
 8006aaa:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006ab2:	e7da      	b.n	8006a6a <ull_isr+0x266>
 8006ab4:	00010024 	.word	0x00010024
 8006ab8:	34059400 	.word	0x34059400
 8006abc:	10220400 	.word	0x10220400

08006ac0 <_dwt_adjust_delaytime>:
 8006ac0:	b538      	push	{r3, r4, r5, lr}
 8006ac2:	4604      	mov	r4, r0
 8006ac4:	b989      	cbnz	r1, 8006aea <_dwt_adjust_delaytime+0x2a>
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	212c      	movs	r1, #44	; 0x2c
 8006aca:	f7ff f943 	bl	8005d54 <dwt_read32bitoffsetreg>
 8006ace:	4605      	mov	r5, r0
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 8006ad6:	4620      	mov	r0, r4
 8006ad8:	f7ff f964 	bl	8005da4 <dwt_read8bitoffsetreg>
 8006adc:	1a2b      	subs	r3, r5, r0
 8006ade:	2200      	movs	r2, #0
 8006ae0:	212c      	movs	r1, #44	; 0x2c
 8006ae2:	4620      	mov	r0, r4
 8006ae4:	f7ff fe78 	bl	80067d8 <dwt_write32bitoffsetreg>
 8006ae8:	bd38      	pop	{r3, r4, r5, pc}
 8006aea:	2200      	movs	r2, #0
 8006aec:	212c      	movs	r1, #44	; 0x2c
 8006aee:	f7ff f931 	bl	8005d54 <dwt_read32bitoffsetreg>
 8006af2:	4605      	mov	r5, r0
 8006af4:	2201      	movs	r2, #1
 8006af6:	4905      	ldr	r1, [pc, #20]	; (8006b0c <_dwt_adjust_delaytime+0x4c>)
 8006af8:	4620      	mov	r0, r4
 8006afa:	f7ff f953 	bl	8005da4 <dwt_read8bitoffsetreg>
 8006afe:	1a2b      	subs	r3, r5, r0
 8006b00:	2200      	movs	r2, #0
 8006b02:	212c      	movs	r1, #44	; 0x2c
 8006b04:	4620      	mov	r0, r4
 8006b06:	f7ff fe67 	bl	80067d8 <dwt_write32bitoffsetreg>
 8006b0a:	e7ed      	b.n	8006ae8 <_dwt_adjust_delaytime+0x28>
 8006b0c:	00010004 	.word	0x00010004

08006b10 <ull_setrxaftertxdelay>:
 8006b10:	b570      	push	{r4, r5, r6, lr}
 8006b12:	4606      	mov	r6, r0
 8006b14:	460c      	mov	r4, r1
 8006b16:	4d08      	ldr	r5, [pc, #32]	; (8006b38 <ull_setrxaftertxdelay+0x28>)
 8006b18:	2200      	movs	r2, #0
 8006b1a:	4629      	mov	r1, r5
 8006b1c:	f7ff f91a 	bl	8005d54 <dwt_read32bitoffsetreg>
 8006b20:	0d00      	lsrs	r0, r0, #20
 8006b22:	0500      	lsls	r0, r0, #20
 8006b24:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006b28:	4303      	orrs	r3, r0
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	4629      	mov	r1, r5
 8006b2e:	4630      	mov	r0, r6
 8006b30:	f7ff fe52 	bl	80067d8 <dwt_write32bitoffsetreg>
 8006b34:	bd70      	pop	{r4, r5, r6, pc}
 8006b36:	bf00      	nop
 8006b38:	00010008 	.word	0x00010008

08006b3c <ull_setlnapamode>:
 8006b3c:	b538      	push	{r3, r4, r5, lr}
 8006b3e:	4605      	mov	r5, r0
 8006b40:	460c      	mov	r4, r1
 8006b42:	2200      	movs	r2, #0
 8006b44:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8006b48:	f7ff f904 	bl	8005d54 <dwt_read32bitoffsetreg>
 8006b4c:	4b0b      	ldr	r3, [pc, #44]	; (8006b7c <ull_setlnapamode+0x40>)
 8006b4e:	4003      	ands	r3, r0
 8006b50:	f014 0f01 	tst.w	r4, #1
 8006b54:	bf18      	it	ne
 8006b56:	f443 2380 	orrne.w	r3, r3, #262144	; 0x40000
 8006b5a:	f014 0f02 	tst.w	r4, #2
 8006b5e:	bf18      	it	ne
 8006b60:	f443 4310 	orrne.w	r3, r3, #36864	; 0x9000
 8006b64:	f014 0f04 	tst.w	r4, #4
 8006b68:	bf18      	it	ne
 8006b6a:	f043 0312 	orrne.w	r3, r3, #18
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8006b74:	4628      	mov	r0, r5
 8006b76:	f7ff fe2f 	bl	80067d8 <dwt_write32bitoffsetreg>
 8006b7a:	bd38      	pop	{r3, r4, r5, pc}
 8006b7c:	ffe00fc0 	.word	0xffe00fc0

08006b80 <ull_configurestskey>:
 8006b80:	b538      	push	{r3, r4, r5, lr}
 8006b82:	4605      	mov	r5, r0
 8006b84:	460c      	mov	r4, r1
 8006b86:	680b      	ldr	r3, [r1, #0]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	490b      	ldr	r1, [pc, #44]	; (8006bb8 <ull_configurestskey+0x38>)
 8006b8c:	f7ff fe24 	bl	80067d8 <dwt_write32bitoffsetreg>
 8006b90:	6863      	ldr	r3, [r4, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	4909      	ldr	r1, [pc, #36]	; (8006bbc <ull_configurestskey+0x3c>)
 8006b96:	4628      	mov	r0, r5
 8006b98:	f7ff fe1e 	bl	80067d8 <dwt_write32bitoffsetreg>
 8006b9c:	68a3      	ldr	r3, [r4, #8]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	4907      	ldr	r1, [pc, #28]	; (8006bc0 <ull_configurestskey+0x40>)
 8006ba2:	4628      	mov	r0, r5
 8006ba4:	f7ff fe18 	bl	80067d8 <dwt_write32bitoffsetreg>
 8006ba8:	68e3      	ldr	r3, [r4, #12]
 8006baa:	2200      	movs	r2, #0
 8006bac:	4905      	ldr	r1, [pc, #20]	; (8006bc4 <ull_configurestskey+0x44>)
 8006bae:	4628      	mov	r0, r5
 8006bb0:	f7ff fe12 	bl	80067d8 <dwt_write32bitoffsetreg>
 8006bb4:	bd38      	pop	{r3, r4, r5, pc}
 8006bb6:	bf00      	nop
 8006bb8:	0002000c 	.word	0x0002000c
 8006bbc:	00020010 	.word	0x00020010
 8006bc0:	00020014 	.word	0x00020014
 8006bc4:	00020018 	.word	0x00020018

08006bc8 <ull_configurestsiv>:
 8006bc8:	b538      	push	{r3, r4, r5, lr}
 8006bca:	4605      	mov	r5, r0
 8006bcc:	460c      	mov	r4, r1
 8006bce:	680b      	ldr	r3, [r1, #0]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	490b      	ldr	r1, [pc, #44]	; (8006c00 <ull_configurestsiv+0x38>)
 8006bd4:	f7ff fe00 	bl	80067d8 <dwt_write32bitoffsetreg>
 8006bd8:	6863      	ldr	r3, [r4, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	4909      	ldr	r1, [pc, #36]	; (8006c04 <ull_configurestsiv+0x3c>)
 8006bde:	4628      	mov	r0, r5
 8006be0:	f7ff fdfa 	bl	80067d8 <dwt_write32bitoffsetreg>
 8006be4:	68a3      	ldr	r3, [r4, #8]
 8006be6:	2200      	movs	r2, #0
 8006be8:	4907      	ldr	r1, [pc, #28]	; (8006c08 <ull_configurestsiv+0x40>)
 8006bea:	4628      	mov	r0, r5
 8006bec:	f7ff fdf4 	bl	80067d8 <dwt_write32bitoffsetreg>
 8006bf0:	68e3      	ldr	r3, [r4, #12]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	4905      	ldr	r1, [pc, #20]	; (8006c0c <ull_configurestsiv+0x44>)
 8006bf6:	4628      	mov	r0, r5
 8006bf8:	f7ff fdee 	bl	80067d8 <dwt_write32bitoffsetreg>
 8006bfc:	bd38      	pop	{r3, r4, r5, pc}
 8006bfe:	bf00      	nop
 8006c00:	0002001c 	.word	0x0002001c
 8006c04:	00020020 	.word	0x00020020
 8006c08:	00020024 	.word	0x00020024
 8006c0c:	00020028 	.word	0x00020028

08006c10 <ull_configmrxlut>:
 8006c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c14:	4604      	mov	r4, r0
 8006c16:	2905      	cmp	r1, #5
 8006c18:	d040      	beq.n	8006c9c <ull_configmrxlut+0x8c>
 8006c1a:	4d26      	ldr	r5, [pc, #152]	; (8006cb4 <ull_configmrxlut+0xa4>)
 8006c1c:	462e      	mov	r6, r5
 8006c1e:	4f26      	ldr	r7, [pc, #152]	; (8006cb8 <ull_configmrxlut+0xa8>)
 8006c20:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8006cfc <ull_configmrxlut+0xec>
 8006c24:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8006d00 <ull_configmrxlut+0xf0>
 8006c28:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006d04 <ull_configmrxlut+0xf4>
 8006c2c:	4b23      	ldr	r3, [pc, #140]	; (8006cbc <ull_configmrxlut+0xac>)
 8006c2e:	2200      	movs	r2, #0
 8006c30:	4923      	ldr	r1, [pc, #140]	; (8006cc0 <ull_configmrxlut+0xb0>)
 8006c32:	4620      	mov	r0, r4
 8006c34:	f7ff fdd0 	bl	80067d8 <dwt_write32bitoffsetreg>
 8006c38:	4653      	mov	r3, sl
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	4921      	ldr	r1, [pc, #132]	; (8006cc4 <ull_configmrxlut+0xb4>)
 8006c3e:	4620      	mov	r0, r4
 8006c40:	f7ff fdca 	bl	80067d8 <dwt_write32bitoffsetreg>
 8006c44:	464b      	mov	r3, r9
 8006c46:	2200      	movs	r2, #0
 8006c48:	491f      	ldr	r1, [pc, #124]	; (8006cc8 <ull_configmrxlut+0xb8>)
 8006c4a:	4620      	mov	r0, r4
 8006c4c:	f7ff fdc4 	bl	80067d8 <dwt_write32bitoffsetreg>
 8006c50:	4643      	mov	r3, r8
 8006c52:	2200      	movs	r2, #0
 8006c54:	491d      	ldr	r1, [pc, #116]	; (8006ccc <ull_configmrxlut+0xbc>)
 8006c56:	4620      	mov	r0, r4
 8006c58:	f7ff fdbe 	bl	80067d8 <dwt_write32bitoffsetreg>
 8006c5c:	463b      	mov	r3, r7
 8006c5e:	2200      	movs	r2, #0
 8006c60:	491b      	ldr	r1, [pc, #108]	; (8006cd0 <ull_configmrxlut+0xc0>)
 8006c62:	4620      	mov	r0, r4
 8006c64:	f7ff fdb8 	bl	80067d8 <dwt_write32bitoffsetreg>
 8006c68:	4633      	mov	r3, r6
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	4919      	ldr	r1, [pc, #100]	; (8006cd4 <ull_configmrxlut+0xc4>)
 8006c6e:	4620      	mov	r0, r4
 8006c70:	f7ff fdb2 	bl	80067d8 <dwt_write32bitoffsetreg>
 8006c74:	462b      	mov	r3, r5
 8006c76:	2200      	movs	r2, #0
 8006c78:	4917      	ldr	r1, [pc, #92]	; (8006cd8 <ull_configmrxlut+0xc8>)
 8006c7a:	4620      	mov	r0, r4
 8006c7c:	f7ff fdac 	bl	80067d8 <dwt_write32bitoffsetreg>
 8006c80:	4b16      	ldr	r3, [pc, #88]	; (8006cdc <ull_configmrxlut+0xcc>)
 8006c82:	2200      	movs	r2, #0
 8006c84:	4916      	ldr	r1, [pc, #88]	; (8006ce0 <ull_configmrxlut+0xd0>)
 8006c86:	4620      	mov	r0, r4
 8006c88:	f7ff fda6 	bl	80067d8 <dwt_write32bitoffsetreg>
 8006c8c:	4b15      	ldr	r3, [pc, #84]	; (8006ce4 <ull_configmrxlut+0xd4>)
 8006c8e:	2200      	movs	r2, #0
 8006c90:	4915      	ldr	r1, [pc, #84]	; (8006ce8 <ull_configmrxlut+0xd8>)
 8006c92:	4620      	mov	r0, r4
 8006c94:	f7ff fda0 	bl	80067d8 <dwt_write32bitoffsetreg>
 8006c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c9c:	4d13      	ldr	r5, [pc, #76]	; (8006cec <ull_configmrxlut+0xdc>)
 8006c9e:	4e14      	ldr	r6, [pc, #80]	; (8006cf0 <ull_configmrxlut+0xe0>)
 8006ca0:	4f14      	ldr	r7, [pc, #80]	; (8006cf4 <ull_configmrxlut+0xe4>)
 8006ca2:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8006d08 <ull_configmrxlut+0xf8>
 8006ca6:	f8df 9064 	ldr.w	r9, [pc, #100]	; 8006d0c <ull_configmrxlut+0xfc>
 8006caa:	f8df a064 	ldr.w	sl, [pc, #100]	; 8006d10 <ull_configmrxlut+0x100>
 8006cae:	4b12      	ldr	r3, [pc, #72]	; (8006cf8 <ull_configmrxlut+0xe8>)
 8006cb0:	e7bd      	b.n	8006c2e <ull_configmrxlut+0x1e>
 8006cb2:	bf00      	nop
 8006cb4:	0002afb5 	.word	0x0002afb5
 8006cb8:	0002af7d 	.word	0x0002af7d
 8006cbc:	0002a8fe 	.word	0x0002a8fe
 8006cc0:	00030038 	.word	0x00030038
 8006cc4:	0003003c 	.word	0x0003003c
 8006cc8:	00030040 	.word	0x00030040
 8006ccc:	00030044 	.word	0x00030044
 8006cd0:	00030048 	.word	0x00030048
 8006cd4:	0003004c 	.word	0x0003004c
 8006cd8:	00030050 	.word	0x00030050
 8006cdc:	10000240 	.word	0x10000240
 8006ce0:	0003001c 	.word	0x0003001c
 8006ce4:	1b6da489 	.word	0x1b6da489
 8006ce8:	00030020 	.word	0x00030020
 8006cec:	0001cff5 	.word	0x0001cff5
 8006cf0:	0001cfb5 	.word	0x0001cfb5
 8006cf4:	0001cf36 	.word	0x0001cf36
 8006cf8:	0001c0fd 	.word	0x0001c0fd
 8006cfc:	0002af3e 	.word	0x0002af3e
 8006d00:	0002a5fe 	.word	0x0002a5fe
 8006d04:	0002ac36 	.word	0x0002ac36
 8006d08:	0001c77e 	.word	0x0001c77e
 8006d0c:	0001c6be 	.word	0x0001c6be
 8006d10:	0001c43e 	.word	0x0001c43e

08006d14 <ull_disable_rftx_blocks>:
 8006d14:	b508      	push	{r3, lr}
 8006d16:	2300      	movs	r3, #0
 8006d18:	461a      	mov	r2, r3
 8006d1a:	4902      	ldr	r1, [pc, #8]	; (8006d24 <ull_disable_rftx_blocks+0x10>)
 8006d1c:	f7ff fd5c 	bl	80067d8 <dwt_write32bitoffsetreg>
 8006d20:	bd08      	pop	{r3, pc}
 8006d22:	bf00      	nop
 8006d24:	00070004 	.word	0x00070004

08006d28 <ull_disable_rf_tx>:
 8006d28:	b538      	push	{r3, r4, r5, lr}
 8006d2a:	4604      	mov	r4, r0
 8006d2c:	460d      	mov	r5, r1
 8006d2e:	2300      	movs	r3, #0
 8006d30:	461a      	mov	r2, r3
 8006d32:	490a      	ldr	r1, [pc, #40]	; (8006d5c <ull_disable_rf_tx+0x34>)
 8006d34:	f7ff fd50 	bl	80067d8 <dwt_write32bitoffsetreg>
 8006d38:	2300      	movs	r3, #0
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 8006d40:	4620      	mov	r0, r4
 8006d42:	f7ff fd49 	bl	80067d8 <dwt_write32bitoffsetreg>
 8006d46:	b905      	cbnz	r5, 8006d4a <ull_disable_rf_tx+0x22>
 8006d48:	bd38      	pop	{r3, r4, r5, pc}
 8006d4a:	f04f 53e0 	mov.w	r3, #469762048	; 0x1c000000
 8006d4e:	2200      	movs	r2, #0
 8006d50:	4903      	ldr	r1, [pc, #12]	; (8006d60 <ull_disable_rf_tx+0x38>)
 8006d52:	4620      	mov	r0, r4
 8006d54:	f7ff fd40 	bl	80067d8 <dwt_write32bitoffsetreg>
 8006d58:	e7f6      	b.n	8006d48 <ull_disable_rf_tx+0x20>
 8006d5a:	bf00      	nop
 8006d5c:	00070048 	.word	0x00070048
 8006d60:	00070014 	.word	0x00070014

08006d64 <ull_readrxdata>:
 8006d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d66:	b083      	sub	sp, #12
 8006d68:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8006d6a:	7be4      	ldrb	r4, [r4, #15]
 8006d6c:	2c03      	cmp	r4, #3
 8006d6e:	bf0c      	ite	eq
 8006d70:	f44f 1c98 	moveq.w	ip, #1245184	; 0x130000
 8006d74:	f44f 1c90 	movne.w	ip, #1179648	; 0x120000
 8006d78:	189c      	adds	r4, r3, r2
 8006d7a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8006d7e:	da19      	bge.n	8006db4 <ull_readrxdata+0x50>
 8006d80:	461d      	mov	r5, r3
 8006d82:	4616      	mov	r6, r2
 8006d84:	460f      	mov	r7, r1
 8006d86:	4604      	mov	r4, r0
 8006d88:	2b7f      	cmp	r3, #127	; 0x7f
 8006d8a:	d915      	bls.n	8006db8 <ull_readrxdata+0x54>
 8006d8c:	ea4f 431c 	mov.w	r3, ip, lsr #16
 8006d90:	2200      	movs	r2, #0
 8006d92:	490d      	ldr	r1, [pc, #52]	; (8006dc8 <ull_readrxdata+0x64>)
 8006d94:	f7ff fd20 	bl	80067d8 <dwt_write32bitoffsetreg>
 8006d98:	462b      	mov	r3, r5
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	490b      	ldr	r1, [pc, #44]	; (8006dcc <ull_readrxdata+0x68>)
 8006d9e:	4620      	mov	r0, r4
 8006da0:	f7ff fd1a 	bl	80067d8 <dwt_write32bitoffsetreg>
 8006da4:	9700      	str	r7, [sp, #0]
 8006da6:	4633      	mov	r3, r6
 8006da8:	2200      	movs	r2, #0
 8006daa:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 8006dae:	4620      	mov	r0, r4
 8006db0:	f7fe ffc6 	bl	8005d40 <dwt_readfromdevice>
 8006db4:	b003      	add	sp, #12
 8006db6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006db8:	9100      	str	r1, [sp, #0]
 8006dba:	4613      	mov	r3, r2
 8006dbc:	462a      	mov	r2, r5
 8006dbe:	4661      	mov	r1, ip
 8006dc0:	f7fe ffbe 	bl	8005d40 <dwt_readfromdevice>
 8006dc4:	e7f6      	b.n	8006db4 <ull_readrxdata+0x50>
 8006dc6:	bf00      	nop
 8006dc8:	001f0004 	.word	0x001f0004
 8006dcc:	001f0008 	.word	0x001f0008

08006dd0 <ull_rxenable>:
 8006dd0:	b530      	push	{r4, r5, lr}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	4605      	mov	r5, r0
 8006dd6:	460c      	mov	r4, r1
 8006dd8:	b171      	cbz	r1, 8006df8 <ull_rxenable+0x28>
 8006dda:	f021 0302 	bic.w	r3, r1, #2
 8006dde:	3b01      	subs	r3, #1
 8006de0:	2b0f      	cmp	r3, #15
 8006de2:	d856      	bhi.n	8006e92 <ull_rxenable+0xc2>
 8006de4:	e8df f003 	tbb	[pc, r3]
 8006de8:	21555510 	.word	0x21555510
 8006dec:	28555555 	.word	0x28555555
 8006df0:	55555555 	.word	0x55555555
 8006df4:	33555555 	.word	0x33555555
 8006df8:	2200      	movs	r2, #0
 8006dfa:	9200      	str	r2, [sp, #0]
 8006dfc:	4613      	mov	r3, r2
 8006dfe:	2102      	movs	r1, #2
 8006e00:	f7ff fb8c 	bl	800651c <dwt_writetodevice>
 8006e04:	4620      	mov	r0, r4
 8006e06:	e00e      	b.n	8006e26 <ull_rxenable+0x56>
 8006e08:	2200      	movs	r2, #0
 8006e0a:	9200      	str	r2, [sp, #0]
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	2104      	movs	r1, #4
 8006e10:	f7ff fb84 	bl	800651c <dwt_writetodevice>
 8006e14:	2203      	movs	r2, #3
 8006e16:	2144      	movs	r1, #68	; 0x44
 8006e18:	4628      	mov	r0, r5
 8006e1a:	f7fe ffc3 	bl	8005da4 <dwt_read8bitoffsetreg>
 8006e1e:	f010 0f08 	tst.w	r0, #8
 8006e22:	d11f      	bne.n	8006e64 <ull_rxenable+0x94>
 8006e24:	2000      	movs	r0, #0
 8006e26:	b003      	add	sp, #12
 8006e28:	bd30      	pop	{r4, r5, pc}
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	9200      	str	r2, [sp, #0]
 8006e2e:	4613      	mov	r3, r2
 8006e30:	210a      	movs	r1, #10
 8006e32:	f7ff fb73 	bl	800651c <dwt_writetodevice>
 8006e36:	e7ed      	b.n	8006e14 <ull_rxenable+0x44>
 8006e38:	2100      	movs	r1, #0
 8006e3a:	f7ff fe41 	bl	8006ac0 <_dwt_adjust_delaytime>
 8006e3e:	2200      	movs	r2, #0
 8006e40:	9200      	str	r2, [sp, #0]
 8006e42:	4613      	mov	r3, r2
 8006e44:	2108      	movs	r1, #8
 8006e46:	4628      	mov	r0, r5
 8006e48:	f7ff fb68 	bl	800651c <dwt_writetodevice>
 8006e4c:	e7e2      	b.n	8006e14 <ull_rxenable+0x44>
 8006e4e:	2101      	movs	r1, #1
 8006e50:	f7ff fe36 	bl	8006ac0 <_dwt_adjust_delaytime>
 8006e54:	2200      	movs	r2, #0
 8006e56:	9200      	str	r2, [sp, #0]
 8006e58:	4613      	mov	r3, r2
 8006e5a:	2106      	movs	r1, #6
 8006e5c:	4628      	mov	r0, r5
 8006e5e:	f7ff fb5d 	bl	800651c <dwt_writetodevice>
 8006e62:	e7d7      	b.n	8006e14 <ull_rxenable+0x44>
 8006e64:	2100      	movs	r1, #0
 8006e66:	9100      	str	r1, [sp, #0]
 8006e68:	460b      	mov	r3, r1
 8006e6a:	460a      	mov	r2, r1
 8006e6c:	4628      	mov	r0, r5
 8006e6e:	f7ff fb55 	bl	800651c <dwt_writetodevice>
 8006e72:	f014 0f02 	tst.w	r4, #2
 8006e76:	d002      	beq.n	8006e7e <ull_rxenable+0xae>
 8006e78:	f04f 30ff 	mov.w	r0, #4294967295
 8006e7c:	e7d3      	b.n	8006e26 <ull_rxenable+0x56>
 8006e7e:	2200      	movs	r2, #0
 8006e80:	9200      	str	r2, [sp, #0]
 8006e82:	4613      	mov	r3, r2
 8006e84:	2102      	movs	r1, #2
 8006e86:	4628      	mov	r0, r5
 8006e88:	f7ff fb48 	bl	800651c <dwt_writetodevice>
 8006e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e90:	e7c9      	b.n	8006e26 <ull_rxenable+0x56>
 8006e92:	f04f 30ff 	mov.w	r0, #4294967295
 8006e96:	e7c6      	b.n	8006e26 <ull_rxenable+0x56>

08006e98 <ull_writetxdata>:
 8006e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	185c      	adds	r4, r3, r1
 8006e9e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8006ea2:	da24      	bge.n	8006eee <ull_writetxdata+0x56>
 8006ea4:	461c      	mov	r4, r3
 8006ea6:	4617      	mov	r7, r2
 8006ea8:	460e      	mov	r6, r1
 8006eaa:	4605      	mov	r5, r0
 8006eac:	2b7f      	cmp	r3, #127	; 0x7f
 8006eae:	d915      	bls.n	8006edc <ull_writetxdata+0x44>
 8006eb0:	2314      	movs	r3, #20
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	490f      	ldr	r1, [pc, #60]	; (8006ef4 <ull_writetxdata+0x5c>)
 8006eb6:	f7ff fc8f 	bl	80067d8 <dwt_write32bitoffsetreg>
 8006eba:	4623      	mov	r3, r4
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	490e      	ldr	r1, [pc, #56]	; (8006ef8 <ull_writetxdata+0x60>)
 8006ec0:	4628      	mov	r0, r5
 8006ec2:	f7ff fc89 	bl	80067d8 <dwt_write32bitoffsetreg>
 8006ec6:	9700      	str	r7, [sp, #0]
 8006ec8:	4633      	mov	r3, r6
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 8006ed0:	4628      	mov	r0, r5
 8006ed2:	f7ff fb23 	bl	800651c <dwt_writetodevice>
 8006ed6:	2000      	movs	r0, #0
 8006ed8:	b003      	add	sp, #12
 8006eda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006edc:	9200      	str	r2, [sp, #0]
 8006ede:	460b      	mov	r3, r1
 8006ee0:	4622      	mov	r2, r4
 8006ee2:	f44f 11a0 	mov.w	r1, #1310720	; 0x140000
 8006ee6:	f7ff fb19 	bl	800651c <dwt_writetodevice>
 8006eea:	2000      	movs	r0, #0
 8006eec:	e7f4      	b.n	8006ed8 <ull_writetxdata+0x40>
 8006eee:	f04f 30ff 	mov.w	r0, #4294967295
 8006ef2:	e7f1      	b.n	8006ed8 <ull_writetxdata+0x40>
 8006ef4:	001f0004 	.word	0x001f0004
 8006ef8:	001f0008 	.word	0x001f0008

08006efc <dwt_modify32bitoffsetreg>:
 8006efc:	b530      	push	{r4, r5, lr}
 8006efe:	b085      	sub	sp, #20
 8006f00:	9c08      	ldr	r4, [sp, #32]
 8006f02:	f88d 3008 	strb.w	r3, [sp, #8]
 8006f06:	0a1d      	lsrs	r5, r3, #8
 8006f08:	f88d 5009 	strb.w	r5, [sp, #9]
 8006f0c:	0c1d      	lsrs	r5, r3, #16
 8006f0e:	f88d 500a 	strb.w	r5, [sp, #10]
 8006f12:	0e1b      	lsrs	r3, r3, #24
 8006f14:	f88d 300b 	strb.w	r3, [sp, #11]
 8006f18:	f88d 400c 	strb.w	r4, [sp, #12]
 8006f1c:	0a23      	lsrs	r3, r4, #8
 8006f1e:	f88d 300d 	strb.w	r3, [sp, #13]
 8006f22:	0c23      	lsrs	r3, r4, #16
 8006f24:	f88d 300e 	strb.w	r3, [sp, #14]
 8006f28:	0e24      	lsrs	r4, r4, #24
 8006f2a:	f88d 400f 	strb.w	r4, [sp, #15]
 8006f2e:	f248 0303 	movw	r3, #32771	; 0x8003
 8006f32:	9301      	str	r3, [sp, #4]
 8006f34:	ab02      	add	r3, sp, #8
 8006f36:	9300      	str	r3, [sp, #0]
 8006f38:	2308      	movs	r3, #8
 8006f3a:	b292      	uxth	r2, r2
 8006f3c:	f7fe fe7d 	bl	8005c3a <dwt_xfer3xxx>
 8006f40:	b005      	add	sp, #20
 8006f42:	bd30      	pop	{r4, r5, pc}

08006f44 <_dwt_kick_dgc_on_wakeup>:
 8006f44:	b500      	push	{lr}
 8006f46:	b083      	sub	sp, #12
 8006f48:	2905      	cmp	r1, #5
 8006f4a:	d004      	beq.n	8006f56 <_dwt_kick_dgc_on_wakeup+0x12>
 8006f4c:	2909      	cmp	r1, #9
 8006f4e:	d00b      	beq.n	8006f68 <_dwt_kick_dgc_on_wakeup+0x24>
 8006f50:	b003      	add	sp, #12
 8006f52:	f85d fb04 	ldr.w	pc, [sp], #4
 8006f56:	2340      	movs	r3, #64	; 0x40
 8006f58:	9300      	str	r3, [sp, #0]
 8006f5a:	f46f 5300 	mvn.w	r3, #8192	; 0x2000
 8006f5e:	2200      	movs	r2, #0
 8006f60:	4906      	ldr	r1, [pc, #24]	; (8006f7c <_dwt_kick_dgc_on_wakeup+0x38>)
 8006f62:	f7ff ffcb 	bl	8006efc <dwt_modify32bitoffsetreg>
 8006f66:	e7f3      	b.n	8006f50 <_dwt_kick_dgc_on_wakeup+0xc>
 8006f68:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8006f6c:	9300      	str	r3, [sp, #0]
 8006f6e:	f46f 5300 	mvn.w	r3, #8192	; 0x2000
 8006f72:	2200      	movs	r2, #0
 8006f74:	4901      	ldr	r1, [pc, #4]	; (8006f7c <_dwt_kick_dgc_on_wakeup+0x38>)
 8006f76:	f7ff ffc1 	bl	8006efc <dwt_modify32bitoffsetreg>
 8006f7a:	e7e9      	b.n	8006f50 <_dwt_kick_dgc_on_wakeup+0xc>
 8006f7c:	000b0008 	.word	0x000b0008

08006f80 <ull_enable_rf_tx>:
 8006f80:	b570      	push	{r4, r5, r6, lr}
 8006f82:	b082      	sub	sp, #8
 8006f84:	4604      	mov	r4, r0
 8006f86:	460e      	mov	r6, r1
 8006f88:	4d13      	ldr	r5, [pc, #76]	; (8006fd8 <ull_enable_rf_tx+0x58>)
 8006f8a:	f04f 2308 	mov.w	r3, #134219776	; 0x8000800
 8006f8e:	9300      	str	r3, [sp, #0]
 8006f90:	f04f 33ff 	mov.w	r3, #4294967295
 8006f94:	2200      	movs	r2, #0
 8006f96:	4629      	mov	r1, r5
 8006f98:	f7ff ffb0 	bl	8006efc <dwt_modify32bitoffsetreg>
 8006f9c:	f04f 1360 	mov.w	r3, #6291552	; 0x600060
 8006fa0:	9300      	str	r3, [sp, #0]
 8006fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	4629      	mov	r1, r5
 8006faa:	4620      	mov	r0, r4
 8006fac:	f7ff ffa6 	bl	8006efc <dwt_modify32bitoffsetreg>
 8006fb0:	4b0a      	ldr	r3, [pc, #40]	; (8006fdc <ull_enable_rf_tx+0x5c>)
 8006fb2:	9300      	str	r3, [sp, #0]
 8006fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 8006fbe:	4620      	mov	r0, r4
 8006fc0:	f7ff ff9c 	bl	8006efc <dwt_modify32bitoffsetreg>
 8006fc4:	b90e      	cbnz	r6, 8006fca <ull_enable_rf_tx+0x4a>
 8006fc6:	b002      	add	sp, #8
 8006fc8:	bd70      	pop	{r4, r5, r6, pc}
 8006fca:	4b05      	ldr	r3, [pc, #20]	; (8006fe0 <ull_enable_rf_tx+0x60>)
 8006fcc:	2200      	movs	r2, #0
 8006fce:	4905      	ldr	r1, [pc, #20]	; (8006fe4 <ull_enable_rf_tx+0x64>)
 8006fd0:	4620      	mov	r0, r4
 8006fd2:	f7ff fc01 	bl	80067d8 <dwt_write32bitoffsetreg>
 8006fd6:	e7f6      	b.n	8006fc6 <ull_enable_rf_tx+0x46>
 8006fd8:	00070048 	.word	0x00070048
 8006fdc:	02003c00 	.word	0x02003c00
 8006fe0:	01011100 	.word	0x01011100
 8006fe4:	00070014 	.word	0x00070014

08006fe8 <ull_enable_rftx_blocks>:
 8006fe8:	b500      	push	{lr}
 8006fea:	b083      	sub	sp, #12
 8006fec:	4b05      	ldr	r3, [pc, #20]	; (8007004 <ull_enable_rftx_blocks+0x1c>)
 8006fee:	9300      	str	r3, [sp, #0]
 8006ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	4904      	ldr	r1, [pc, #16]	; (8007008 <ull_enable_rftx_blocks+0x20>)
 8006ff8:	f7ff ff80 	bl	8006efc <dwt_modify32bitoffsetreg>
 8006ffc:	b003      	add	sp, #12
 8006ffe:	f85d fb04 	ldr.w	pc, [sp], #4
 8007002:	bf00      	nop
 8007004:	02003c00 	.word	0x02003c00
 8007008:	00070004 	.word	0x00070004

0800700c <_dwt_otpprogword32>:
 800700c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007010:	b083      	sub	sp, #12
 8007012:	4604      	mov	r4, r0
 8007014:	460d      	mov	r5, r1
 8007016:	4617      	mov	r7, r2
 8007018:	4e56      	ldr	r6, [pc, #344]	; (8007174 <_dwt_otpprogword32+0x168>)
 800701a:	2200      	movs	r2, #0
 800701c:	4631      	mov	r1, r6
 800701e:	f7fe fe99 	bl	8005d54 <dwt_read32bitoffsetreg>
 8007022:	4681      	mov	r9, r0
 8007024:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8007028:	9300      	str	r3, [sp, #0]
 800702a:	f04f 33ff 	mov.w	r3, #4294967295
 800702e:	2200      	movs	r2, #0
 8007030:	4631      	mov	r1, r6
 8007032:	4620      	mov	r0, r4
 8007034:	f7ff ff62 	bl	8006efc <dwt_modify32bitoffsetreg>
 8007038:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8007178 <_dwt_otpprogword32+0x16c>
 800703c:	2318      	movs	r3, #24
 800703e:	2200      	movs	r2, #0
 8007040:	4641      	mov	r1, r8
 8007042:	4620      	mov	r0, r4
 8007044:	f7ff fac7 	bl	80065d6 <dwt_write16bitoffsetreg>
 8007048:	2125      	movs	r1, #37	; 0x25
 800704a:	4620      	mov	r0, r4
 800704c:	f7ff fb0a 	bl	8006664 <__dwt_otp_write_wdata_id_reg>
 8007050:	2102      	movs	r1, #2
 8007052:	4620      	mov	r0, r4
 8007054:	f7ff fb06 	bl	8006664 <__dwt_otp_write_wdata_id_reg>
 8007058:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
 800705c:	4620      	mov	r0, r4
 800705e:	f7ff fb01 	bl	8006664 <__dwt_otp_write_wdata_id_reg>
 8007062:	b2f9      	uxtb	r1, r7
 8007064:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8007068:	4620      	mov	r0, r4
 800706a:	f7ff fafb 	bl	8006664 <__dwt_otp_write_wdata_id_reg>
 800706e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007072:	4620      	mov	r0, r4
 8007074:	f7ff faf6 	bl	8006664 <__dwt_otp_write_wdata_id_reg>
 8007078:	2100      	movs	r1, #0
 800707a:	4620      	mov	r0, r4
 800707c:	f7ff faf2 	bl	8006664 <__dwt_otp_write_wdata_id_reg>
 8007080:	2102      	movs	r1, #2
 8007082:	4620      	mov	r0, r4
 8007084:	f7ff faee 	bl	8006664 <__dwt_otp_write_wdata_id_reg>
 8007088:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800708c:	4620      	mov	r0, r4
 800708e:	f7ff fae9 	bl	8006664 <__dwt_otp_write_wdata_id_reg>
 8007092:	b2e9      	uxtb	r1, r5
 8007094:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8007098:	4620      	mov	r0, r4
 800709a:	f7ff fae3 	bl	8006664 <__dwt_otp_write_wdata_id_reg>
 800709e:	f3c5 2107 	ubfx	r1, r5, #8, #8
 80070a2:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80070a6:	4620      	mov	r0, r4
 80070a8:	f7ff fadc 	bl	8006664 <__dwt_otp_write_wdata_id_reg>
 80070ac:	f3c5 4107 	ubfx	r1, r5, #16, #8
 80070b0:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80070b4:	4620      	mov	r0, r4
 80070b6:	f7ff fad5 	bl	8006664 <__dwt_otp_write_wdata_id_reg>
 80070ba:	0e29      	lsrs	r1, r5, #24
 80070bc:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80070c0:	4620      	mov	r0, r4
 80070c2:	f7ff facf 	bl	8006664 <__dwt_otp_write_wdata_id_reg>
 80070c6:	2100      	movs	r1, #0
 80070c8:	4620      	mov	r0, r4
 80070ca:	f7ff facb 	bl	8006664 <__dwt_otp_write_wdata_id_reg>
 80070ce:	213a      	movs	r1, #58	; 0x3a
 80070d0:	4620      	mov	r0, r4
 80070d2:	f7ff fac7 	bl	8006664 <__dwt_otp_write_wdata_id_reg>
 80070d6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80070da:	4620      	mov	r0, r4
 80070dc:	f7ff fac2 	bl	8006664 <__dwt_otp_write_wdata_id_reg>
 80070e0:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80070e4:	4620      	mov	r0, r4
 80070e6:	f7ff fabd 	bl	8006664 <__dwt_otp_write_wdata_id_reg>
 80070ea:	2100      	movs	r1, #0
 80070ec:	4620      	mov	r0, r4
 80070ee:	f7ff fab9 	bl	8006664 <__dwt_otp_write_wdata_id_reg>
 80070f2:	213a      	movs	r1, #58	; 0x3a
 80070f4:	4620      	mov	r0, r4
 80070f6:	f7ff fab5 	bl	8006664 <__dwt_otp_write_wdata_id_reg>
 80070fa:	f240 1101 	movw	r1, #257	; 0x101
 80070fe:	4620      	mov	r0, r4
 8007100:	f7ff fab0 	bl	8006664 <__dwt_otp_write_wdata_id_reg>
 8007104:	2302      	movs	r3, #2
 8007106:	2200      	movs	r2, #0
 8007108:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800710c:	4620      	mov	r0, r4
 800710e:	f7ff fa62 	bl	80065d6 <dwt_write16bitoffsetreg>
 8007112:	2300      	movs	r3, #0
 8007114:	461a      	mov	r2, r3
 8007116:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800711a:	4620      	mov	r0, r4
 800711c:	f7ff fa5b 	bl	80065d6 <dwt_write16bitoffsetreg>
 8007120:	2002      	movs	r0, #2
 8007122:	f7f9 f9f9 	bl	8000518 <deca_sleep>
 8007126:	213a      	movs	r1, #58	; 0x3a
 8007128:	4620      	mov	r0, r4
 800712a:	f7ff fa9b 	bl	8006664 <__dwt_otp_write_wdata_id_reg>
 800712e:	f44f 7181 	mov.w	r1, #258	; 0x102
 8007132:	4620      	mov	r0, r4
 8007134:	f7ff fa96 	bl	8006664 <__dwt_otp_write_wdata_id_reg>
 8007138:	2302      	movs	r3, #2
 800713a:	2200      	movs	r2, #0
 800713c:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 8007140:	4620      	mov	r0, r4
 8007142:	f7ff fa48 	bl	80065d6 <dwt_write16bitoffsetreg>
 8007146:	2300      	movs	r3, #0
 8007148:	461a      	mov	r2, r3
 800714a:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800714e:	4620      	mov	r0, r4
 8007150:	f7ff fa41 	bl	80065d6 <dwt_write16bitoffsetreg>
 8007154:	2300      	movs	r3, #0
 8007156:	461a      	mov	r2, r3
 8007158:	4641      	mov	r1, r8
 800715a:	4620      	mov	r0, r4
 800715c:	f7ff fa3b 	bl	80065d6 <dwt_write16bitoffsetreg>
 8007160:	464b      	mov	r3, r9
 8007162:	2200      	movs	r2, #0
 8007164:	4631      	mov	r1, r6
 8007166:	4620      	mov	r0, r4
 8007168:	f7ff fb36 	bl	80067d8 <dwt_write32bitoffsetreg>
 800716c:	b003      	add	sp, #12
 800716e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007172:	bf00      	nop
 8007174:	00070044 	.word	0x00070044
 8007178:	000b0008 	.word	0x000b0008

0800717c <ull_setgpiomode>:
 800717c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800717e:	b083      	sub	sp, #12
 8007180:	2400      	movs	r4, #0
 8007182:	4623      	mov	r3, r4
 8007184:	2601      	movs	r6, #1
 8007186:	2707      	movs	r7, #7
 8007188:	e002      	b.n	8007190 <ull_setgpiomode+0x14>
 800718a:	3401      	adds	r4, #1
 800718c:	2c09      	cmp	r4, #9
 800718e:	d009      	beq.n	80071a4 <ull_setgpiomode+0x28>
 8007190:	fa06 f504 	lsl.w	r5, r6, r4
 8007194:	420d      	tst	r5, r1
 8007196:	d0f8      	beq.n	800718a <ull_setgpiomode+0xe>
 8007198:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800719c:	fa07 f505 	lsl.w	r5, r7, r5
 80071a0:	432b      	orrs	r3, r5
 80071a2:	e7f2      	b.n	800718a <ull_setgpiomode+0xe>
 80071a4:	401a      	ands	r2, r3
 80071a6:	9200      	str	r2, [sp, #0]
 80071a8:	43db      	mvns	r3, r3
 80071aa:	2200      	movs	r2, #0
 80071ac:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80071b0:	f7ff fea4 	bl	8006efc <dwt_modify32bitoffsetreg>
 80071b4:	b003      	add	sp, #12
 80071b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080071b8 <ull_setinterrupt>:
 80071b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071bc:	b082      	sub	sp, #8
 80071be:	4604      	mov	r4, r0
 80071c0:	4688      	mov	r8, r1
 80071c2:	4617      	mov	r7, r2
 80071c4:	461d      	mov	r5, r3
 80071c6:	f7f9 f989 	bl	80004dc <decamutexon>
 80071ca:	4606      	mov	r6, r0
 80071cc:	2d02      	cmp	r5, #2
 80071ce:	d02d      	beq.n	800722c <ull_setinterrupt+0x74>
 80071d0:	2d01      	cmp	r5, #1
 80071d2:	d038      	beq.n	8007246 <ull_setinterrupt+0x8e>
 80071d4:	2500      	movs	r5, #0
 80071d6:	9500      	str	r5, [sp, #0]
 80071d8:	ea6f 0308 	mvn.w	r3, r8
 80071dc:	462a      	mov	r2, r5
 80071de:	213c      	movs	r1, #60	; 0x3c
 80071e0:	4620      	mov	r0, r4
 80071e2:	f7ff fe8b 	bl	8006efc <dwt_modify32bitoffsetreg>
 80071e6:	9500      	str	r5, [sp, #0]
 80071e8:	43fb      	mvns	r3, r7
 80071ea:	462a      	mov	r2, r5
 80071ec:	2140      	movs	r1, #64	; 0x40
 80071ee:	4620      	mov	r0, r4
 80071f0:	f7ff fe84 	bl	8006efc <dwt_modify32bitoffsetreg>
 80071f4:	2200      	movs	r2, #0
 80071f6:	213c      	movs	r1, #60	; 0x3c
 80071f8:	4620      	mov	r0, r4
 80071fa:	f7fe fdab 	bl	8005d54 <dwt_read32bitoffsetreg>
 80071fe:	4603      	mov	r3, r0
 8007200:	2200      	movs	r2, #0
 8007202:	2144      	movs	r1, #68	; 0x44
 8007204:	4620      	mov	r0, r4
 8007206:	f7ff fae7 	bl	80067d8 <dwt_write32bitoffsetreg>
 800720a:	2200      	movs	r2, #0
 800720c:	2140      	movs	r1, #64	; 0x40
 800720e:	4620      	mov	r0, r4
 8007210:	f7fe fda0 	bl	8005d54 <dwt_read32bitoffsetreg>
 8007214:	4603      	mov	r3, r0
 8007216:	2200      	movs	r2, #0
 8007218:	2148      	movs	r1, #72	; 0x48
 800721a:	4620      	mov	r0, r4
 800721c:	f7ff fadc 	bl	80067d8 <dwt_write32bitoffsetreg>
 8007220:	4630      	mov	r0, r6
 8007222:	f7f9 f96c 	bl	80004fe <decamutexoff>
 8007226:	b002      	add	sp, #8
 8007228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800722c:	4643      	mov	r3, r8
 800722e:	2200      	movs	r2, #0
 8007230:	213c      	movs	r1, #60	; 0x3c
 8007232:	4620      	mov	r0, r4
 8007234:	f7ff fad0 	bl	80067d8 <dwt_write32bitoffsetreg>
 8007238:	463b      	mov	r3, r7
 800723a:	2200      	movs	r2, #0
 800723c:	2140      	movs	r1, #64	; 0x40
 800723e:	4620      	mov	r0, r4
 8007240:	f7ff faca 	bl	80067d8 <dwt_write32bitoffsetreg>
 8007244:	e7d6      	b.n	80071f4 <ull_setinterrupt+0x3c>
 8007246:	f8cd 8000 	str.w	r8, [sp]
 800724a:	f04f 33ff 	mov.w	r3, #4294967295
 800724e:	2200      	movs	r2, #0
 8007250:	213c      	movs	r1, #60	; 0x3c
 8007252:	4620      	mov	r0, r4
 8007254:	f7ff fe52 	bl	8006efc <dwt_modify32bitoffsetreg>
 8007258:	9700      	str	r7, [sp, #0]
 800725a:	f04f 33ff 	mov.w	r3, #4294967295
 800725e:	2200      	movs	r2, #0
 8007260:	2140      	movs	r1, #64	; 0x40
 8007262:	4620      	mov	r0, r4
 8007264:	f7ff fe4a 	bl	8006efc <dwt_modify32bitoffsetreg>
 8007268:	e7c4      	b.n	80071f4 <ull_setinterrupt+0x3c>
	...

0800726c <ull_writetxfctrl>:
 800726c:	b510      	push	{r4, lr}
 800726e:	b082      	sub	sp, #8
 8007270:	4604      	mov	r4, r0
 8007272:	2a7f      	cmp	r2, #127	; 0x7f
 8007274:	d912      	bls.n	800729c <ull_writetxfctrl+0x30>
 8007276:	3280      	adds	r2, #128	; 0x80
 8007278:	ea41 21c3 	orr.w	r1, r1, r3, lsl #11
 800727c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007280:	9100      	str	r1, [sp, #0]
 8007282:	4b0c      	ldr	r3, [pc, #48]	; (80072b4 <ull_writetxfctrl+0x48>)
 8007284:	2200      	movs	r2, #0
 8007286:	2124      	movs	r1, #36	; 0x24
 8007288:	f7ff fe38 	bl	8006efc <dwt_modify32bitoffsetreg>
 800728c:	2200      	movs	r2, #0
 800728e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007292:	4620      	mov	r0, r4
 8007294:	f7fe fd86 	bl	8005da4 <dwt_read8bitoffsetreg>
 8007298:	b002      	add	sp, #8
 800729a:	bd10      	pop	{r4, pc}
 800729c:	ea41 21c3 	orr.w	r1, r1, r3, lsl #11
 80072a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80072a4:	9100      	str	r1, [sp, #0]
 80072a6:	4b03      	ldr	r3, [pc, #12]	; (80072b4 <ull_writetxfctrl+0x48>)
 80072a8:	2200      	movs	r2, #0
 80072aa:	2124      	movs	r1, #36	; 0x24
 80072ac:	f7ff fe26 	bl	8006efc <dwt_modify32bitoffsetreg>
 80072b0:	e7f2      	b.n	8007298 <ull_writetxfctrl+0x2c>
 80072b2:	bf00      	nop
 80072b4:	fc00f400 	.word	0xfc00f400

080072b8 <prs_sys_status_and_or>:
 80072b8:	b500      	push	{lr}
 80072ba:	b083      	sub	sp, #12
 80072bc:	9200      	str	r2, [sp, #0]
 80072be:	460b      	mov	r3, r1
 80072c0:	2200      	movs	r2, #0
 80072c2:	2144      	movs	r1, #68	; 0x44
 80072c4:	f7ff fe1a 	bl	8006efc <dwt_modify32bitoffsetreg>
 80072c8:	2000      	movs	r0, #0
 80072ca:	b003      	add	sp, #12
 80072cc:	f85d fb04 	ldr.w	pc, [sp], #4

080072d0 <dwt_modify8bitoffsetreg>:
 80072d0:	b500      	push	{lr}
 80072d2:	b085      	sub	sp, #20
 80072d4:	f88d 300c 	strb.w	r3, [sp, #12]
 80072d8:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80072dc:	f88d 300d 	strb.w	r3, [sp, #13]
 80072e0:	f248 0301 	movw	r3, #32769	; 0x8001
 80072e4:	9301      	str	r3, [sp, #4]
 80072e6:	ab03      	add	r3, sp, #12
 80072e8:	9300      	str	r3, [sp, #0]
 80072ea:	2302      	movs	r3, #2
 80072ec:	b292      	uxth	r2, r2
 80072ee:	f7fe fca4 	bl	8005c3a <dwt_xfer3xxx>
 80072f2:	b005      	add	sp, #20
 80072f4:	f85d fb04 	ldr.w	pc, [sp], #4

080072f8 <ull_configciadiag>:
 80072f8:	b530      	push	{r4, r5, lr}
 80072fa:	b083      	sub	sp, #12
 80072fc:	4604      	mov	r4, r0
 80072fe:	460d      	mov	r5, r1
 8007300:	f011 0f01 	tst.w	r1, #1
 8007304:	d015      	beq.n	8007332 <ull_configciadiag+0x3a>
 8007306:	2300      	movs	r3, #0
 8007308:	9300      	str	r3, [sp, #0]
 800730a:	23ef      	movs	r3, #239	; 0xef
 800730c:	2202      	movs	r2, #2
 800730e:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 8007312:	f7ff ffdd 	bl	80072d0 <dwt_modify8bitoffsetreg>
 8007316:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007318:	761d      	strb	r5, [r3, #24]
 800731a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800731c:	7e1b      	ldrb	r3, [r3, #24]
 800731e:	085b      	lsrs	r3, r3, #1
 8007320:	d010      	beq.n	8007344 <ull_configciadiag+0x4c>
 8007322:	086b      	lsrs	r3, r5, #1
 8007324:	2200      	movs	r2, #0
 8007326:	490e      	ldr	r1, [pc, #56]	; (8007360 <ull_configciadiag+0x68>)
 8007328:	4620      	mov	r0, r4
 800732a:	f7ff f902 	bl	8006532 <dwt_write8bitoffsetreg>
 800732e:	b003      	add	sp, #12
 8007330:	bd30      	pop	{r4, r5, pc}
 8007332:	2310      	movs	r3, #16
 8007334:	9300      	str	r3, [sp, #0]
 8007336:	23ff      	movs	r3, #255	; 0xff
 8007338:	2202      	movs	r2, #2
 800733a:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800733e:	f7ff ffc7 	bl	80072d0 <dwt_modify8bitoffsetreg>
 8007342:	e7e8      	b.n	8007316 <ull_configciadiag+0x1e>
 8007344:	2301      	movs	r3, #1
 8007346:	9300      	str	r3, [sp, #0]
 8007348:	23ff      	movs	r3, #255	; 0xff
 800734a:	2200      	movs	r2, #0
 800734c:	4904      	ldr	r1, [pc, #16]	; (8007360 <ull_configciadiag+0x68>)
 800734e:	4620      	mov	r0, r4
 8007350:	f7ff ffbe 	bl	80072d0 <dwt_modify8bitoffsetreg>
 8007354:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8007356:	7e13      	ldrb	r3, [r2, #24]
 8007358:	f043 0302 	orr.w	r3, r3, #2
 800735c:	7613      	strb	r3, [r2, #24]
 800735e:	e7e6      	b.n	800732e <ull_configciadiag+0x36>
 8007360:	00010028 	.word	0x00010028

08007364 <ull_calcbandwidthadj>:
 8007364:	b570      	push	{r4, r5, r6, lr}
 8007366:	b082      	sub	sp, #8
 8007368:	4604      	mov	r4, r0
 800736a:	460d      	mov	r5, r1
 800736c:	2101      	movs	r1, #1
 800736e:	f7ff f963 	bl	8006638 <ull_force_clocks>
 8007372:	2100      	movs	r1, #0
 8007374:	4620      	mov	r0, r4
 8007376:	f7ff fe03 	bl	8006f80 <ull_enable_rf_tx>
 800737a:	4620      	mov	r0, r4
 800737c:	f7ff fe34 	bl	8006fe8 <ull_enable_rftx_blocks>
 8007380:	f3c5 030b 	ubfx	r3, r5, #0, #12
 8007384:	2200      	movs	r2, #0
 8007386:	4915      	ldr	r1, [pc, #84]	; (80073dc <ull_calcbandwidthadj+0x78>)
 8007388:	4620      	mov	r0, r4
 800738a:	f7ff f924 	bl	80065d6 <dwt_write16bitoffsetreg>
 800738e:	2303      	movs	r3, #3
 8007390:	9300      	str	r3, [sp, #0]
 8007392:	23ff      	movs	r3, #255	; 0xff
 8007394:	2200      	movs	r2, #0
 8007396:	4912      	ldr	r1, [pc, #72]	; (80073e0 <ull_calcbandwidthadj+0x7c>)
 8007398:	4620      	mov	r0, r4
 800739a:	f7ff ff99 	bl	80072d0 <dwt_modify8bitoffsetreg>
 800739e:	4e10      	ldr	r6, [pc, #64]	; (80073e0 <ull_calcbandwidthadj+0x7c>)
 80073a0:	2500      	movs	r5, #0
 80073a2:	462a      	mov	r2, r5
 80073a4:	4631      	mov	r1, r6
 80073a6:	4620      	mov	r0, r4
 80073a8:	f7fe fcfc 	bl	8005da4 <dwt_read8bitoffsetreg>
 80073ac:	f010 0f01 	tst.w	r0, #1
 80073b0:	d1f7      	bne.n	80073a2 <ull_calcbandwidthadj+0x3e>
 80073b2:	4620      	mov	r0, r4
 80073b4:	f7ff fcae 	bl	8006d14 <ull_disable_rftx_blocks>
 80073b8:	2100      	movs	r1, #0
 80073ba:	4620      	mov	r0, r4
 80073bc:	f7ff fcb4 	bl	8006d28 <ull_disable_rf_tx>
 80073c0:	2105      	movs	r1, #5
 80073c2:	4620      	mov	r0, r4
 80073c4:	f7ff f938 	bl	8006638 <ull_force_clocks>
 80073c8:	2200      	movs	r2, #0
 80073ca:	4906      	ldr	r1, [pc, #24]	; (80073e4 <ull_calcbandwidthadj+0x80>)
 80073cc:	4620      	mov	r0, r4
 80073ce:	f7fe fce9 	bl	8005da4 <dwt_read8bitoffsetreg>
 80073d2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80073d6:	b002      	add	sp, #8
 80073d8:	bd70      	pop	{r4, r5, r6, pc}
 80073da:	bf00      	nop
 80073dc:	0008001c 	.word	0x0008001c
 80073e0:	00080010 	.word	0x00080010
 80073e4:	0007001c 	.word	0x0007001c

080073e8 <ull_configuretxrf>:
 80073e8:	b538      	push	{r3, r4, r5, lr}
 80073ea:	4605      	mov	r5, r0
 80073ec:	460c      	mov	r4, r1
 80073ee:	f8b1 1005 	ldrh.w	r1, [r1, #5]
 80073f2:	b149      	cbz	r1, 8007408 <ull_configuretxrf+0x20>
 80073f4:	f7ff ffb6 	bl	8007364 <ull_calcbandwidthadj>
 80073f8:	f8d4 3001 	ldr.w	r3, [r4, #1]
 80073fc:	2200      	movs	r2, #0
 80073fe:	4905      	ldr	r1, [pc, #20]	; (8007414 <ull_configuretxrf+0x2c>)
 8007400:	4628      	mov	r0, r5
 8007402:	f7ff f9e9 	bl	80067d8 <dwt_write32bitoffsetreg>
 8007406:	bd38      	pop	{r3, r4, r5, pc}
 8007408:	7823      	ldrb	r3, [r4, #0]
 800740a:	2200      	movs	r2, #0
 800740c:	4902      	ldr	r1, [pc, #8]	; (8007418 <ull_configuretxrf+0x30>)
 800740e:	f7ff f890 	bl	8006532 <dwt_write8bitoffsetreg>
 8007412:	e7f1      	b.n	80073f8 <ull_configuretxrf+0x10>
 8007414:	0001000c 	.word	0x0001000c
 8007418:	0007001c 	.word	0x0007001c

0800741c <ull_repeated_frames>:
 800741c:	b530      	push	{r4, r5, lr}
 800741e:	b083      	sub	sp, #12
 8007420:	4604      	mov	r4, r0
 8007422:	460d      	mov	r5, r1
 8007424:	2310      	movs	r3, #16
 8007426:	9300      	str	r3, [sp, #0]
 8007428:	23ff      	movs	r3, #255	; 0xff
 800742a:	2200      	movs	r2, #0
 800742c:	4906      	ldr	r1, [pc, #24]	; (8007448 <ull_repeated_frames+0x2c>)
 800742e:	f7ff ff4f 	bl	80072d0 <dwt_modify8bitoffsetreg>
 8007432:	462b      	mov	r3, r5
 8007434:	2d02      	cmp	r5, #2
 8007436:	bf38      	it	cc
 8007438:	2302      	movcc	r3, #2
 800743a:	2200      	movs	r2, #0
 800743c:	212c      	movs	r1, #44	; 0x2c
 800743e:	4620      	mov	r0, r4
 8007440:	f7ff f9ca 	bl	80067d8 <dwt_write32bitoffsetreg>
 8007444:	b003      	add	sp, #12
 8007446:	bd30      	pop	{r4, r5, pc}
 8007448:	000f0024 	.word	0x000f0024

0800744c <ull_setdwstate>:
 800744c:	b530      	push	{r4, r5, lr}
 800744e:	b083      	sub	sp, #12
 8007450:	4604      	mov	r4, r0
 8007452:	2901      	cmp	r1, #1
 8007454:	d01d      	beq.n	8007492 <ull_setdwstate+0x46>
 8007456:	2902      	cmp	r1, #2
 8007458:	d030      	beq.n	80074bc <ull_setdwstate+0x70>
 800745a:	2301      	movs	r3, #1
 800745c:	9300      	str	r3, [sp, #0]
 800745e:	23ff      	movs	r3, #255	; 0xff
 8007460:	2200      	movs	r2, #0
 8007462:	4926      	ldr	r1, [pc, #152]	; (80074fc <ull_setdwstate+0xb0>)
 8007464:	f7ff ff34 	bl	80072d0 <dwt_modify8bitoffsetreg>
 8007468:	4d25      	ldr	r5, [pc, #148]	; (8007500 <ull_setdwstate+0xb4>)
 800746a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800746e:	9300      	str	r3, [sp, #0]
 8007470:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8007474:	2200      	movs	r2, #0
 8007476:	4629      	mov	r1, r5
 8007478:	4620      	mov	r0, r4
 800747a:	f7ff fd3f 	bl	8006efc <dwt_modify32bitoffsetreg>
 800747e:	2300      	movs	r3, #0
 8007480:	9300      	str	r3, [sp, #0]
 8007482:	237f      	movs	r3, #127	; 0x7f
 8007484:	2202      	movs	r2, #2
 8007486:	4629      	mov	r1, r5
 8007488:	4620      	mov	r0, r4
 800748a:	f7ff ff21 	bl	80072d0 <dwt_modify8bitoffsetreg>
 800748e:	b003      	add	sp, #12
 8007490:	bd30      	pop	{r4, r5, pc}
 8007492:	2105      	movs	r1, #5
 8007494:	f7ff f8d0 	bl	8006638 <ull_force_clocks>
 8007498:	f44f 7381 	mov.w	r3, #258	; 0x102
 800749c:	9300      	str	r3, [sp, #0]
 800749e:	f04f 33ff 	mov.w	r3, #4294967295
 80074a2:	2200      	movs	r2, #0
 80074a4:	4917      	ldr	r1, [pc, #92]	; (8007504 <ull_setdwstate+0xb8>)
 80074a6:	4620      	mov	r0, r4
 80074a8:	f7ff fd28 	bl	8006efc <dwt_modify32bitoffsetreg>
 80074ac:	2201      	movs	r2, #1
 80074ae:	9200      	str	r2, [sp, #0]
 80074b0:	23ff      	movs	r3, #255	; 0xff
 80074b2:	4913      	ldr	r1, [pc, #76]	; (8007500 <ull_setdwstate+0xb4>)
 80074b4:	4620      	mov	r0, r4
 80074b6:	f7ff ff0b 	bl	80072d0 <dwt_modify8bitoffsetreg>
 80074ba:	e7e8      	b.n	800748e <ull_setdwstate+0x42>
 80074bc:	2303      	movs	r3, #3
 80074be:	9300      	str	r3, [sp, #0]
 80074c0:	23ff      	movs	r3, #255	; 0xff
 80074c2:	2200      	movs	r2, #0
 80074c4:	490d      	ldr	r1, [pc, #52]	; (80074fc <ull_setdwstate+0xb0>)
 80074c6:	f7ff ff03 	bl	80072d0 <dwt_modify8bitoffsetreg>
 80074ca:	4d0d      	ldr	r5, [pc, #52]	; (8007500 <ull_setdwstate+0xb4>)
 80074cc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80074d0:	9300      	str	r3, [sp, #0]
 80074d2:	f46f 7380 	mvn.w	r3, #256	; 0x100
 80074d6:	2200      	movs	r2, #0
 80074d8:	4629      	mov	r1, r5
 80074da:	4620      	mov	r0, r4
 80074dc:	f7ff fd0e 	bl	8006efc <dwt_modify32bitoffsetreg>
 80074e0:	2300      	movs	r3, #0
 80074e2:	9300      	str	r3, [sp, #0]
 80074e4:	237f      	movs	r3, #127	; 0x7f
 80074e6:	2202      	movs	r2, #2
 80074e8:	4629      	mov	r1, r5
 80074ea:	4620      	mov	r0, r4
 80074ec:	f7ff fef0 	bl	80072d0 <dwt_modify8bitoffsetreg>
 80074f0:	2105      	movs	r1, #5
 80074f2:	4620      	mov	r0, r4
 80074f4:	f7ff f8a0 	bl	8006638 <ull_force_clocks>
 80074f8:	e7c9      	b.n	800748e <ull_setdwstate+0x42>
 80074fa:	bf00      	nop
 80074fc:	00110004 	.word	0x00110004
 8007500:	00110008 	.word	0x00110008
 8007504:	00090008 	.word	0x00090008

08007508 <ull_configureframefilter>:
 8007508:	b530      	push	{r4, r5, lr}
 800750a:	b083      	sub	sp, #12
 800750c:	4605      	mov	r5, r0
 800750e:	2902      	cmp	r1, #2
 8007510:	d00e      	beq.n	8007530 <ull_configureframefilter+0x28>
 8007512:	2400      	movs	r4, #0
 8007514:	9400      	str	r4, [sp, #0]
 8007516:	23fe      	movs	r3, #254	; 0xfe
 8007518:	4622      	mov	r2, r4
 800751a:	2110      	movs	r1, #16
 800751c:	f7ff fed8 	bl	80072d0 <dwt_modify8bitoffsetreg>
 8007520:	4623      	mov	r3, r4
 8007522:	4622      	mov	r2, r4
 8007524:	2114      	movs	r1, #20
 8007526:	4628      	mov	r0, r5
 8007528:	f7ff f855 	bl	80065d6 <dwt_write16bitoffsetreg>
 800752c:	b003      	add	sp, #12
 800752e:	bd30      	pop	{r4, r5, pc}
 8007530:	4614      	mov	r4, r2
 8007532:	2301      	movs	r3, #1
 8007534:	9300      	str	r3, [sp, #0]
 8007536:	23ff      	movs	r3, #255	; 0xff
 8007538:	2200      	movs	r2, #0
 800753a:	2110      	movs	r1, #16
 800753c:	f7ff fec8 	bl	80072d0 <dwt_modify8bitoffsetreg>
 8007540:	4623      	mov	r3, r4
 8007542:	2200      	movs	r2, #0
 8007544:	2114      	movs	r1, #20
 8007546:	4628      	mov	r0, r5
 8007548:	f7ff f845 	bl	80065d6 <dwt_write16bitoffsetreg>
 800754c:	e7ee      	b.n	800752c <ull_configureframefilter+0x24>
	...

08007550 <ull_run_pgfcal>:
 8007550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007554:	b082      	sub	sp, #8
 8007556:	4605      	mov	r5, r0
 8007558:	4c29      	ldr	r4, [pc, #164]	; (8007600 <ull_run_pgfcal+0xb0>)
 800755a:	4b2a      	ldr	r3, [pc, #168]	; (8007604 <ull_run_pgfcal+0xb4>)
 800755c:	2200      	movs	r2, #0
 800755e:	4621      	mov	r1, r4
 8007560:	f7ff f93a 	bl	80067d8 <dwt_write32bitoffsetreg>
 8007564:	2310      	movs	r3, #16
 8007566:	9300      	str	r3, [sp, #0]
 8007568:	23ff      	movs	r3, #255	; 0xff
 800756a:	2200      	movs	r2, #0
 800756c:	4621      	mov	r1, r4
 800756e:	4628      	mov	r0, r5
 8007570:	f7ff feae 	bl	80072d0 <dwt_modify8bitoffsetreg>
 8007574:	2403      	movs	r4, #3
 8007576:	f04f 0814 	mov.w	r8, #20
 800757a:	4f23      	ldr	r7, [pc, #140]	; (8007608 <ull_run_pgfcal+0xb8>)
 800757c:	2600      	movs	r6, #0
 800757e:	4640      	mov	r0, r8
 8007580:	f7f8 ffd5 	bl	800052e <deca_usleep>
 8007584:	4632      	mov	r2, r6
 8007586:	4639      	mov	r1, r7
 8007588:	4628      	mov	r0, r5
 800758a:	f7fe fc0b 	bl	8005da4 <dwt_read8bitoffsetreg>
 800758e:	2801      	cmp	r0, #1
 8007590:	d034      	beq.n	80075fc <ull_run_pgfcal+0xac>
 8007592:	1e63      	subs	r3, r4, #1
 8007594:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8007598:	d1f1      	bne.n	800757e <ull_run_pgfcal+0x2e>
 800759a:	f06f 0402 	mvn.w	r4, #2
 800759e:	4e18      	ldr	r6, [pc, #96]	; (8007600 <ull_run_pgfcal+0xb0>)
 80075a0:	2300      	movs	r3, #0
 80075a2:	461a      	mov	r2, r3
 80075a4:	4631      	mov	r1, r6
 80075a6:	4628      	mov	r0, r5
 80075a8:	f7fe ffc3 	bl	8006532 <dwt_write8bitoffsetreg>
 80075ac:	2301      	movs	r3, #1
 80075ae:	2200      	movs	r2, #0
 80075b0:	4915      	ldr	r1, [pc, #84]	; (8007608 <ull_run_pgfcal+0xb8>)
 80075b2:	4628      	mov	r0, r5
 80075b4:	f7fe ffbd 	bl	8006532 <dwt_write8bitoffsetreg>
 80075b8:	2301      	movs	r3, #1
 80075ba:	9300      	str	r3, [sp, #0]
 80075bc:	23ff      	movs	r3, #255	; 0xff
 80075be:	2202      	movs	r2, #2
 80075c0:	4631      	mov	r1, r6
 80075c2:	4628      	mov	r0, r5
 80075c4:	f7ff fe84 	bl	80072d0 <dwt_modify8bitoffsetreg>
 80075c8:	2200      	movs	r2, #0
 80075ca:	4910      	ldr	r1, [pc, #64]	; (800760c <ull_run_pgfcal+0xbc>)
 80075cc:	4628      	mov	r0, r5
 80075ce:	f7fe fbc1 	bl	8005d54 <dwt_read32bitoffsetreg>
 80075d2:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80075d6:	4298      	cmp	r0, r3
 80075d8:	bf08      	it	eq
 80075da:	f06f 0403 	mvneq.w	r4, #3
 80075de:	2200      	movs	r2, #0
 80075e0:	490b      	ldr	r1, [pc, #44]	; (8007610 <ull_run_pgfcal+0xc0>)
 80075e2:	4628      	mov	r0, r5
 80075e4:	f7fe fbb6 	bl	8005d54 <dwt_read32bitoffsetreg>
 80075e8:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80075ec:	4298      	cmp	r0, r3
 80075ee:	bf14      	ite	ne
 80075f0:	4620      	movne	r0, r4
 80075f2:	f06f 0004 	mvneq.w	r0, #4
 80075f6:	b002      	add	sp, #8
 80075f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075fc:	2400      	movs	r4, #0
 80075fe:	e7ce      	b.n	800759e <ull_run_pgfcal+0x4e>
 8007600:	0004000c 	.word	0x0004000c
 8007604:	00020001 	.word	0x00020001
 8007608:	00040020 	.word	0x00040020
 800760c:	00040014 	.word	0x00040014
 8007610:	0004001c 	.word	0x0004001c

08007614 <prs_ack_enable>:
 8007614:	b500      	push	{lr}
 8007616:	b083      	sub	sp, #12
 8007618:	2900      	cmp	r1, #0
 800761a:	bf0b      	itete	eq
 800761c:	23ff      	moveq	r3, #255	; 0xff
 800761e:	23f7      	movne	r3, #247	; 0xf7
 8007620:	2200      	moveq	r2, #0
 8007622:	2208      	movne	r2, #8
 8007624:	9200      	str	r2, [sp, #0]
 8007626:	2201      	movs	r2, #1
 8007628:	2110      	movs	r1, #16
 800762a:	f7ff fe51 	bl	80072d0 <dwt_modify8bitoffsetreg>
 800762e:	b003      	add	sp, #12
 8007630:	f85d fb04 	ldr.w	pc, [sp], #4

08007634 <dwt_modify16bitoffsetreg>:
 8007634:	b510      	push	{r4, lr}
 8007636:	b084      	sub	sp, #16
 8007638:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 800763c:	f88d 300c 	strb.w	r3, [sp, #12]
 8007640:	0a1b      	lsrs	r3, r3, #8
 8007642:	f88d 300d 	strb.w	r3, [sp, #13]
 8007646:	f88d 400e 	strb.w	r4, [sp, #14]
 800764a:	0a24      	lsrs	r4, r4, #8
 800764c:	f88d 400f 	strb.w	r4, [sp, #15]
 8007650:	f248 0302 	movw	r3, #32770	; 0x8002
 8007654:	9301      	str	r3, [sp, #4]
 8007656:	ab03      	add	r3, sp, #12
 8007658:	9300      	str	r3, [sp, #0]
 800765a:	2304      	movs	r3, #4
 800765c:	b292      	uxth	r2, r2
 800765e:	f7fe faec 	bl	8005c3a <dwt_xfer3xxx>
 8007662:	b004      	add	sp, #16
 8007664:	bd10      	pop	{r4, pc}
	...

08007668 <_dwt_prog_ldo_and_bias_tune>:
 8007668:	b510      	push	{r4, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	4604      	mov	r4, r0
 800766e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8007672:	9300      	str	r3, [sp, #0]
 8007674:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007678:	2200      	movs	r2, #0
 800767a:	4907      	ldr	r1, [pc, #28]	; (8007698 <_dwt_prog_ldo_and_bias_tune+0x30>)
 800767c:	f7ff ffda 	bl	8007634 <dwt_modify16bitoffsetreg>
 8007680:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007682:	7a1b      	ldrb	r3, [r3, #8]
 8007684:	9300      	str	r3, [sp, #0]
 8007686:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800768a:	2200      	movs	r2, #0
 800768c:	4903      	ldr	r1, [pc, #12]	; (800769c <_dwt_prog_ldo_and_bias_tune+0x34>)
 800768e:	4620      	mov	r0, r4
 8007690:	f7ff ffd0 	bl	8007634 <dwt_modify16bitoffsetreg>
 8007694:	b002      	add	sp, #8
 8007696:	bd10      	pop	{r4, pc}
 8007698:	000b0008 	.word	0x000b0008
 800769c:	0011001f 	.word	0x0011001f

080076a0 <ull_setleds>:
 80076a0:	b530      	push	{r4, r5, lr}
 80076a2:	b083      	sub	sp, #12
 80076a4:	4604      	mov	r4, r0
 80076a6:	f011 0f01 	tst.w	r1, #1
 80076aa:	d01f      	beq.n	80076ec <ull_setleds+0x4c>
 80076ac:	460d      	mov	r5, r1
 80076ae:	f44f 7310 	mov.w	r3, #576	; 0x240
 80076b2:	9300      	str	r3, [sp, #0]
 80076b4:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 80076b8:	2200      	movs	r2, #0
 80076ba:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80076be:	f7ff fc1d 	bl	8006efc <dwt_modify32bitoffsetreg>
 80076c2:	f44f 0304 	mov.w	r3, #8650752	; 0x840000
 80076c6:	9300      	str	r3, [sp, #0]
 80076c8:	f04f 33ff 	mov.w	r3, #4294967295
 80076cc:	2200      	movs	r2, #0
 80076ce:	4918      	ldr	r1, [pc, #96]	; (8007730 <ull_setleds+0x90>)
 80076d0:	4620      	mov	r0, r4
 80076d2:	f7ff fc13 	bl	8006efc <dwt_modify32bitoffsetreg>
 80076d6:	f015 0f02 	tst.w	r5, #2
 80076da:	d11a      	bne.n	8007712 <ull_setleds+0x72>
 80076dc:	f44f 7388 	mov.w	r3, #272	; 0x110
 80076e0:	2200      	movs	r2, #0
 80076e2:	4914      	ldr	r1, [pc, #80]	; (8007734 <ull_setleds+0x94>)
 80076e4:	4620      	mov	r0, r4
 80076e6:	f7ff f877 	bl	80067d8 <dwt_write32bitoffsetreg>
 80076ea:	e010      	b.n	800770e <ull_setleds+0x6e>
 80076ec:	2500      	movs	r5, #0
 80076ee:	9500      	str	r5, [sp, #0]
 80076f0:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 80076f4:	462a      	mov	r2, r5
 80076f6:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80076fa:	f7ff fbff 	bl	8006efc <dwt_modify32bitoffsetreg>
 80076fe:	9500      	str	r5, [sp, #0]
 8007700:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8007704:	462a      	mov	r2, r5
 8007706:	490b      	ldr	r1, [pc, #44]	; (8007734 <ull_setleds+0x94>)
 8007708:	4620      	mov	r0, r4
 800770a:	f7ff ff93 	bl	8007634 <dwt_modify16bitoffsetreg>
 800770e:	b003      	add	sp, #12
 8007710:	bd30      	pop	{r4, r5, pc}
 8007712:	4d08      	ldr	r5, [pc, #32]	; (8007734 <ull_setleds+0x94>)
 8007714:	4b08      	ldr	r3, [pc, #32]	; (8007738 <ull_setleds+0x98>)
 8007716:	2200      	movs	r2, #0
 8007718:	4629      	mov	r1, r5
 800771a:	4620      	mov	r0, r4
 800771c:	f7ff f85c 	bl	80067d8 <dwt_write32bitoffsetreg>
 8007720:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007724:	2200      	movs	r2, #0
 8007726:	4629      	mov	r1, r5
 8007728:	4620      	mov	r0, r4
 800772a:	f7ff f855 	bl	80067d8 <dwt_write32bitoffsetreg>
 800772e:	e7ee      	b.n	800770e <ull_setleds+0x6e>
 8007730:	00110004 	.word	0x00110004
 8007734:	00110016 	.word	0x00110016
 8007738:	000f0110 	.word	0x000f0110

0800773c <ull_pgf_cal>:
 800773c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800773e:	b083      	sub	sp, #12
 8007740:	4604      	mov	r4, r0
 8007742:	2901      	cmp	r1, #1
 8007744:	d009      	beq.n	800775a <ull_pgf_cal+0x1e>
 8007746:	2014      	movs	r0, #20
 8007748:	f7f8 fef1 	bl	800052e <deca_usleep>
 800774c:	4620      	mov	r0, r4
 800774e:	f7ff feff 	bl	8007550 <ull_run_pgfcal>
 8007752:	4605      	mov	r5, r0
 8007754:	4628      	mov	r0, r5
 8007756:	b003      	add	sp, #12
 8007758:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800775a:	4e0f      	ldr	r6, [pc, #60]	; (8007798 <ull_pgf_cal+0x5c>)
 800775c:	2200      	movs	r2, #0
 800775e:	4631      	mov	r1, r6
 8007760:	f7fe fb0e 	bl	8005d80 <dwt_read16bitoffsetreg>
 8007764:	4607      	mov	r7, r0
 8007766:	f240 1305 	movw	r3, #261	; 0x105
 800776a:	9300      	str	r3, [sp, #0]
 800776c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007770:	2200      	movs	r2, #0
 8007772:	4631      	mov	r1, r6
 8007774:	4620      	mov	r0, r4
 8007776:	f7ff ff5d 	bl	8007634 <dwt_modify16bitoffsetreg>
 800777a:	2014      	movs	r0, #20
 800777c:	f7f8 fed7 	bl	800052e <deca_usleep>
 8007780:	4620      	mov	r0, r4
 8007782:	f7ff fee5 	bl	8007550 <ull_run_pgfcal>
 8007786:	4605      	mov	r5, r0
 8007788:	2200      	movs	r2, #0
 800778a:	9200      	str	r2, [sp, #0]
 800778c:	463b      	mov	r3, r7
 800778e:	4631      	mov	r1, r6
 8007790:	4620      	mov	r0, r4
 8007792:	f7ff ff4f 	bl	8007634 <dwt_modify16bitoffsetreg>
 8007796:	e7dd      	b.n	8007754 <ull_pgf_cal+0x18>
 8007798:	00070048 	.word	0x00070048

0800779c <ull_setgpiovalue>:
 800779c:	b500      	push	{lr}
 800779e:	b083      	sub	sp, #12
 80077a0:	2a01      	cmp	r2, #1
 80077a2:	d009      	beq.n	80077b8 <ull_setgpiovalue+0x1c>
 80077a4:	43cb      	mvns	r3, r1
 80077a6:	2200      	movs	r2, #0
 80077a8:	9200      	str	r2, [sp, #0]
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	4906      	ldr	r1, [pc, #24]	; (80077c8 <ull_setgpiovalue+0x2c>)
 80077ae:	f7ff ff41 	bl	8007634 <dwt_modify16bitoffsetreg>
 80077b2:	b003      	add	sp, #12
 80077b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80077b8:	9100      	str	r1, [sp, #0]
 80077ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80077be:	2200      	movs	r2, #0
 80077c0:	4901      	ldr	r1, [pc, #4]	; (80077c8 <ull_setgpiovalue+0x2c>)
 80077c2:	f7ff ff37 	bl	8007634 <dwt_modify16bitoffsetreg>
 80077c6:	e7f4      	b.n	80077b2 <ull_setgpiovalue+0x16>
 80077c8:	0005000c 	.word	0x0005000c

080077cc <ull_readaccdata>:
 80077cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077ce:	b083      	sub	sp, #12
 80077d0:	4604      	mov	r4, r0
 80077d2:	460f      	mov	r7, r1
 80077d4:	4616      	mov	r6, r2
 80077d6:	461d      	mov	r5, r3
 80077d8:	f248 0340 	movw	r3, #32832	; 0x8040
 80077dc:	9300      	str	r3, [sp, #0]
 80077de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80077e2:	2200      	movs	r2, #0
 80077e4:	4918      	ldr	r1, [pc, #96]	; (8007848 <ull_readaccdata+0x7c>)
 80077e6:	f7ff ff25 	bl	8007634 <dwt_modify16bitoffsetreg>
 80077ea:	19aa      	adds	r2, r5, r6
 80077ec:	f243 0301 	movw	r3, #12289	; 0x3001
 80077f0:	429a      	cmp	r2, r3
 80077f2:	dc15      	bgt.n	8007820 <ull_readaccdata+0x54>
 80077f4:	2d7f      	cmp	r5, #127	; 0x7f
 80077f6:	d91d      	bls.n	8007834 <ull_readaccdata+0x68>
 80077f8:	2315      	movs	r3, #21
 80077fa:	2200      	movs	r2, #0
 80077fc:	4913      	ldr	r1, [pc, #76]	; (800784c <ull_readaccdata+0x80>)
 80077fe:	4620      	mov	r0, r4
 8007800:	f7fe ffea 	bl	80067d8 <dwt_write32bitoffsetreg>
 8007804:	462b      	mov	r3, r5
 8007806:	2200      	movs	r2, #0
 8007808:	4911      	ldr	r1, [pc, #68]	; (8007850 <ull_readaccdata+0x84>)
 800780a:	4620      	mov	r0, r4
 800780c:	f7fe ffe4 	bl	80067d8 <dwt_write32bitoffsetreg>
 8007810:	9700      	str	r7, [sp, #0]
 8007812:	4633      	mov	r3, r6
 8007814:	2200      	movs	r2, #0
 8007816:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800781a:	4620      	mov	r0, r4
 800781c:	f7fe fa90 	bl	8005d40 <dwt_readfromdevice>
 8007820:	2200      	movs	r2, #0
 8007822:	9200      	str	r2, [sp, #0]
 8007824:	f647 73bf 	movw	r3, #32703	; 0x7fbf
 8007828:	4907      	ldr	r1, [pc, #28]	; (8007848 <ull_readaccdata+0x7c>)
 800782a:	4620      	mov	r0, r4
 800782c:	f7ff ff02 	bl	8007634 <dwt_modify16bitoffsetreg>
 8007830:	b003      	add	sp, #12
 8007832:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007834:	9700      	str	r7, [sp, #0]
 8007836:	4633      	mov	r3, r6
 8007838:	462a      	mov	r2, r5
 800783a:	f44f 11a8 	mov.w	r1, #1376256	; 0x150000
 800783e:	4620      	mov	r0, r4
 8007840:	f7fe fa7e 	bl	8005d40 <dwt_readfromdevice>
 8007844:	e7ec      	b.n	8007820 <ull_readaccdata+0x54>
 8007846:	bf00      	nop
 8007848:	00110004 	.word	0x00110004
 800784c:	001f0004 	.word	0x001f0004
 8007850:	001f0008 	.word	0x001f0008

08007854 <ull_repeated_cw>:
 8007854:	b570      	push	{r4, r5, r6, lr}
 8007856:	4606      	mov	r6, r0
 8007858:	460c      	mov	r4, r1
 800785a:	4615      	mov	r5, r2
 800785c:	4b0e      	ldr	r3, [pc, #56]	; (8007898 <ull_repeated_cw+0x44>)
 800785e:	2202      	movs	r2, #2
 8007860:	490e      	ldr	r1, [pc, #56]	; (800789c <ull_repeated_cw+0x48>)
 8007862:	f7fe ffb9 	bl	80067d8 <dwt_write32bitoffsetreg>
 8007866:	2d0f      	cmp	r5, #15
 8007868:	bfa8      	it	ge
 800786a:	250f      	movge	r5, #15
 800786c:	1e63      	subs	r3, r4, #1
 800786e:	2b03      	cmp	r3, #3
 8007870:	bf28      	it	cs
 8007872:	2404      	movcs	r4, #4
 8007874:	2310      	movs	r3, #16
 8007876:	4123      	asrs	r3, r4
 8007878:	2200      	movs	r2, #0
 800787a:	4909      	ldr	r1, [pc, #36]	; (80078a0 <ull_repeated_cw+0x4c>)
 800787c:	4630      	mov	r0, r6
 800787e:	f7fe ffab 	bl	80067d8 <dwt_write32bitoffsetreg>
 8007882:	1e63      	subs	r3, r4, #1
 8007884:	009b      	lsls	r3, r3, #2
 8007886:	fa05 f303 	lsl.w	r3, r5, r3
 800788a:	2200      	movs	r2, #0
 800788c:	4905      	ldr	r1, [pc, #20]	; (80078a4 <ull_repeated_cw+0x50>)
 800788e:	4630      	mov	r0, r6
 8007890:	f7fe ffa2 	bl	80067d8 <dwt_write32bitoffsetreg>
 8007894:	bd70      	pop	{r4, r5, r6, pc}
 8007896:	bf00      	nop
 8007898:	00d20874 	.word	0x00d20874
 800789c:	00110010 	.word	0x00110010
 80078a0:	00070028 	.word	0x00070028
 80078a4:	00080018 	.word	0x00080018

080078a8 <ull_configure>:
 80078a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078ac:	b083      	sub	sp, #12
 80078ae:	4604      	mov	r4, r0
 80078b0:	460d      	mov	r5, r1
 80078b2:	f891 9000 	ldrb.w	r9, [r1]
 80078b6:	790b      	ldrb	r3, [r1, #4]
 80078b8:	2b18      	cmp	r3, #24
 80078ba:	d814      	bhi.n	80078e6 <ull_configure+0x3e>
 80078bc:	78cf      	ldrb	r7, [r1, #3]
 80078be:	2f18      	cmp	r7, #24
 80078c0:	bf94      	ite	ls
 80078c2:	2700      	movls	r7, #0
 80078c4:	2701      	movhi	r7, #1
 80078c6:	b2ff      	uxtb	r7, r7
 80078c8:	79eb      	ldrb	r3, [r5, #7]
 80078ca:	2b01      	cmp	r3, #1
 80078cc:	bf0c      	ite	eq
 80078ce:	2110      	moveq	r1, #16
 80078d0:	2100      	movne	r1, #0
 80078d2:	786b      	ldrb	r3, [r5, #1]
 80078d4:	3b01      	subs	r3, #1
 80078d6:	2b06      	cmp	r3, #6
 80078d8:	d810      	bhi.n	80078fc <ull_configure+0x54>
 80078da:	e8df f003 	tbb	[pc, r3]
 80078de:	0f06      	.short	0x0f06
 80078e0:	0f0c120f 	.word	0x0f0c120f
 80078e4:	09          	.byte	0x09
 80078e5:	00          	.byte	0x00
 80078e6:	2701      	movs	r7, #1
 80078e8:	e7ed      	b.n	80078c6 <ull_configure+0x1e>
 80078ea:	f04f 0a40 	mov.w	sl, #64	; 0x40
 80078ee:	e00a      	b.n	8007906 <ull_configure+0x5e>
 80078f0:	f04f 0a48 	mov.w	sl, #72	; 0x48
 80078f4:	e007      	b.n	8007906 <ull_configure+0x5e>
 80078f6:	f04f 0a80 	mov.w	sl, #128	; 0x80
 80078fa:	e004      	b.n	8007906 <ull_configure+0x5e>
 80078fc:	f44f 7a80 	mov.w	sl, #256	; 0x100
 8007900:	e001      	b.n	8007906 <ull_configure+0x5e>
 8007902:	f04f 0a20 	mov.w	sl, #32
 8007906:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8007908:	8a53      	ldrh	r3, [r2, #18]
 800790a:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800790e:	8253      	strh	r3, [r2, #18]
 8007910:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007912:	79ea      	ldrb	r2, [r5, #7]
 8007914:	731a      	strb	r2, [r3, #12]
 8007916:	7b2e      	ldrb	r6, [r5, #12]
 8007918:	1cb3      	adds	r3, r6, #2
 800791a:	2601      	movs	r6, #1
 800791c:	409e      	lsls	r6, r3
 800791e:	fa1f f886 	uxth.w	r8, r6
 8007922:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8007924:	4bc7      	ldr	r3, [pc, #796]	; (8007c44 <ull_configure+0x39c>)
 8007926:	fb03 f308 	mul.w	r3, r3, r8
 800792a:	0bdb      	lsrs	r3, r3, #15
 800792c:	8293      	strh	r3, [r2, #20]
 800792e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007930:	7aea      	ldrb	r2, [r5, #11]
 8007932:	75da      	strb	r2, [r3, #23]
 8007934:	7a2b      	ldrb	r3, [r5, #8]
 8007936:	015b      	lsls	r3, r3, #5
 8007938:	f003 0320 	and.w	r3, r3, #32
 800793c:	7b6a      	ldrb	r2, [r5, #13]
 800793e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007942:	7aea      	ldrb	r2, [r5, #11]
 8007944:	0312      	lsls	r2, r2, #12
 8007946:	f402 4230 	and.w	r2, r2, #45056	; 0xb000
 800794a:	4313      	orrs	r3, r2
 800794c:	430b      	orrs	r3, r1
 800794e:	9300      	str	r3, [sp, #0]
 8007950:	4bbd      	ldr	r3, [pc, #756]	; (8007c48 <ull_configure+0x3a0>)
 8007952:	2200      	movs	r2, #0
 8007954:	2110      	movs	r1, #16
 8007956:	4620      	mov	r0, r4
 8007958:	f7ff fad0 	bl	8006efc <dwt_modify32bitoffsetreg>
 800795c:	2f00      	cmp	r7, #0
 800795e:	f040 80f6 	bne.w	8007b4e <ull_configure+0x2a6>
 8007962:	7aeb      	ldrb	r3, [r5, #11]
 8007964:	b1f3      	cbz	r3, 80079a4 <ull_configure+0xfc>
 8007966:	7b6b      	ldrb	r3, [r5, #13]
 8007968:	2b01      	cmp	r3, #1
 800796a:	f240 811c 	bls.w	8007ba6 <ull_configure+0x2fe>
 800796e:	7b2a      	ldrb	r2, [r5, #12]
 8007970:	4bb6      	ldr	r3, [pc, #728]	; (8007c4c <ull_configure+0x3a4>)
 8007972:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8007976:	0112      	lsls	r2, r2, #4
 8007978:	0ad3      	lsrs	r3, r2, #11
 800797a:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800797e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007982:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8007986:	bf28      	it	cs
 8007988:	3301      	addcs	r3, #1
 800798a:	b29b      	uxth	r3, r3
 800798c:	eb0a 0ac8 	add.w	sl, sl, r8, lsl #3
 8007990:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007994:	9300      	str	r3, [sp, #0]
 8007996:	f64f 7380 	movw	r3, #65408	; 0xff80
 800799a:	2202      	movs	r2, #2
 800799c:	49ac      	ldr	r1, [pc, #688]	; (8007c50 <ull_configure+0x3a8>)
 800799e:	4620      	mov	r0, r4
 80079a0:	f7ff fe48 	bl	8007634 <dwt_modify16bitoffsetreg>
 80079a4:	2394      	movs	r3, #148	; 0x94
 80079a6:	9300      	str	r3, [sp, #0]
 80079a8:	4baa      	ldr	r3, [pc, #680]	; (8007c54 <ull_configure+0x3ac>)
 80079aa:	2200      	movs	r2, #0
 80079ac:	49aa      	ldr	r1, [pc, #680]	; (8007c58 <ull_configure+0x3b0>)
 80079ae:	4620      	mov	r0, r4
 80079b0:	f7ff faa4 	bl	8006efc <dwt_modify32bitoffsetreg>
 80079b4:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80079b8:	f340 8108 	ble.w	8007bcc <ull_configure+0x324>
 80079bc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80079be:	8a53      	ldrh	r3, [r2, #18]
 80079c0:	f043 0320 	orr.w	r3, r3, #32
 80079c4:	8253      	strh	r3, [r2, #18]
 80079c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079ca:	9300      	str	r3, [sp, #0]
 80079cc:	f24e 73ff 	movw	r3, #59391	; 0xe7ff
 80079d0:	2200      	movs	r2, #0
 80079d2:	49a2      	ldr	r1, [pc, #648]	; (8007c5c <ull_configure+0x3b4>)
 80079d4:	4620      	mov	r0, r4
 80079d6:	f7ff fe2d 	bl	8007634 <dwt_modify16bitoffsetreg>
 80079da:	7b6b      	ldrb	r3, [r5, #13]
 80079dc:	2b01      	cmp	r3, #1
 80079de:	f000 8100 	beq.w	8007be2 <ull_configure+0x33a>
 80079e2:	78ab      	ldrb	r3, [r5, #2]
 80079e4:	f043 0310 	orr.w	r3, r3, #16
 80079e8:	9300      	str	r3, [sp, #0]
 80079ea:	23fc      	movs	r3, #252	; 0xfc
 80079ec:	2200      	movs	r2, #0
 80079ee:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 80079f2:	4620      	mov	r0, r4
 80079f4:	f7ff fc6c 	bl	80072d0 <dwt_modify8bitoffsetreg>
 80079f8:	1e73      	subs	r3, r6, #1
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	2200      	movs	r2, #0
 80079fe:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8007a02:	4620      	mov	r0, r4
 8007a04:	f7fe fd95 	bl	8006532 <dwt_write8bitoffsetreg>
 8007a08:	786b      	ldrb	r3, [r5, #1]
 8007a0a:	2b07      	cmp	r3, #7
 8007a0c:	bf0c      	ite	eq
 8007a0e:	2308      	moveq	r3, #8
 8007a10:	2300      	movne	r3, #0
 8007a12:	2201      	movs	r2, #1
 8007a14:	2128      	movs	r1, #40	; 0x28
 8007a16:	4620      	mov	r0, r4
 8007a18:	f7fe fd8b 	bl	8006532 <dwt_write8bitoffsetreg>
 8007a1c:	4b90      	ldr	r3, [pc, #576]	; (8007c60 <ull_configure+0x3b8>)
 8007a1e:	2200      	movs	r2, #0
 8007a20:	4990      	ldr	r1, [pc, #576]	; (8007c64 <ull_configure+0x3bc>)
 8007a22:	4620      	mov	r0, r4
 8007a24:	f7fe fed8 	bl	80067d8 <dwt_write32bitoffsetreg>
 8007a28:	2200      	movs	r2, #0
 8007a2a:	498f      	ldr	r1, [pc, #572]	; (8007c68 <ull_configure+0x3c0>)
 8007a2c:	4620      	mov	r0, r4
 8007a2e:	f7fe f991 	bl	8005d54 <dwt_read32bitoffsetreg>
 8007a32:	f420 50ff 	bic.w	r0, r0, #8160	; 0x1fe0
 8007a36:	f020 001f 	bic.w	r0, r0, #31
 8007a3a:	f1b9 0f09 	cmp.w	r9, #9
 8007a3e:	bf08      	it	eq
 8007a40:	f040 0001 	orreq.w	r0, r0, #1
 8007a44:	792a      	ldrb	r2, [r5, #4]
 8007a46:	0212      	lsls	r2, r2, #8
 8007a48:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
 8007a4c:	78eb      	ldrb	r3, [r5, #3]
 8007a4e:	00db      	lsls	r3, r3, #3
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	431a      	orrs	r2, r3
 8007a54:	796b      	ldrb	r3, [r5, #5]
 8007a56:	005b      	lsls	r3, r3, #1
 8007a58:	f003 0306 	and.w	r3, r3, #6
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	4303      	orrs	r3, r0
 8007a60:	2200      	movs	r2, #0
 8007a62:	4981      	ldr	r1, [pc, #516]	; (8007c68 <ull_configure+0x3c0>)
 8007a64:	4620      	mov	r0, r4
 8007a66:	f7fe feb7 	bl	80067d8 <dwt_write32bitoffsetreg>
 8007a6a:	79aa      	ldrb	r2, [r5, #6]
 8007a6c:	786b      	ldrb	r3, [r5, #1]
 8007a6e:	031b      	lsls	r3, r3, #12
 8007a70:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8007a74:	9300      	str	r3, [sp, #0]
 8007a76:	f46f 4374 	mvn.w	r3, #62464	; 0xf400
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	2124      	movs	r1, #36	; 0x24
 8007a7e:	4620      	mov	r0, r4
 8007a80:	f7ff fa3c 	bl	8006efc <dwt_modify32bitoffsetreg>
 8007a84:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 8007a88:	b923      	cbnz	r3, 8007a94 <ull_configure+0x1ec>
 8007a8a:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8007a8e:	726b      	strb	r3, [r5, #9]
 8007a90:	2300      	movs	r3, #0
 8007a92:	72ab      	strb	r3, [r5, #10]
 8007a94:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 8007a98:	2202      	movs	r2, #2
 8007a9a:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 8007a9e:	4620      	mov	r0, r4
 8007aa0:	f7fe fd99 	bl	80065d6 <dwt_write16bitoffsetreg>
 8007aa4:	2202      	movs	r2, #2
 8007aa6:	4971      	ldr	r1, [pc, #452]	; (8007c6c <ull_configure+0x3c4>)
 8007aa8:	4620      	mov	r0, r4
 8007aaa:	f7fe f97b 	bl	8005da4 <dwt_read8bitoffsetreg>
 8007aae:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007ab0:	7c1b      	ldrb	r3, [r3, #16]
 8007ab2:	454b      	cmp	r3, r9
 8007ab4:	f000 809f 	beq.w	8007bf6 <ull_configure+0x34e>
 8007ab8:	2803      	cmp	r0, #3
 8007aba:	f000 80a0 	beq.w	8007bfe <ull_configure+0x356>
 8007abe:	f1b9 0f09 	cmp.w	r9, #9
 8007ac2:	f000 80a1 	beq.w	8007c08 <ull_configure+0x360>
 8007ac6:	4b6a      	ldr	r3, [pc, #424]	; (8007c70 <ull_configure+0x3c8>)
 8007ac8:	2200      	movs	r2, #0
 8007aca:	496a      	ldr	r1, [pc, #424]	; (8007c74 <ull_configure+0x3cc>)
 8007acc:	4620      	mov	r0, r4
 8007ace:	f7fe fe83 	bl	80067d8 <dwt_write32bitoffsetreg>
 8007ad2:	f641 733c 	movw	r3, #7996	; 0x1f3c
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 8007adc:	4620      	mov	r0, r4
 8007ade:	f7fe fd7a 	bl	80065d6 <dwt_write16bitoffsetreg>
 8007ae2:	2314      	movs	r3, #20
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	4964      	ldr	r1, [pc, #400]	; (8007c78 <ull_configure+0x3d0>)
 8007ae8:	4620      	mov	r0, r4
 8007aea:	f7fe fd22 	bl	8006532 <dwt_write8bitoffsetreg>
 8007aee:	230e      	movs	r3, #14
 8007af0:	2202      	movs	r2, #2
 8007af2:	4962      	ldr	r1, [pc, #392]	; (8007c7c <ull_configure+0x3d4>)
 8007af4:	4620      	mov	r0, r4
 8007af6:	f7fe fd1c 	bl	8006532 <dwt_write8bitoffsetreg>
 8007afa:	2381      	movs	r3, #129	; 0x81
 8007afc:	2200      	movs	r2, #0
 8007afe:	4960      	ldr	r1, [pc, #384]	; (8007c80 <ull_configure+0x3d8>)
 8007b00:	4620      	mov	r0, r4
 8007b02:	f7fe fd16 	bl	8006532 <dwt_write8bitoffsetreg>
 8007b06:	2302      	movs	r3, #2
 8007b08:	2200      	movs	r2, #0
 8007b0a:	2144      	movs	r1, #68	; 0x44
 8007b0c:	4620      	mov	r0, r4
 8007b0e:	f7fe fd10 	bl	8006532 <dwt_write8bitoffsetreg>
 8007b12:	2101      	movs	r1, #1
 8007b14:	4620      	mov	r0, r4
 8007b16:	f7ff fc99 	bl	800744c <ull_setdwstate>
 8007b1a:	f04f 0b32 	mov.w	fp, #50	; 0x32
 8007b1e:	f04f 0814 	mov.w	r8, #20
 8007b22:	2700      	movs	r7, #0
 8007b24:	2644      	movs	r6, #68	; 0x44
 8007b26:	4640      	mov	r0, r8
 8007b28:	f7f8 fd01 	bl	800052e <deca_usleep>
 8007b2c:	463a      	mov	r2, r7
 8007b2e:	4631      	mov	r1, r6
 8007b30:	4620      	mov	r0, r4
 8007b32:	f7fe f937 	bl	8005da4 <dwt_read8bitoffsetreg>
 8007b36:	f010 0f02 	tst.w	r0, #2
 8007b3a:	f040 80ab 	bne.w	8007c94 <ull_configure+0x3ec>
 8007b3e:	f10b 33ff 	add.w	r3, fp, #4294967295
 8007b42:	f013 0bff 	ands.w	fp, r3, #255	; 0xff
 8007b46:	d1ee      	bne.n	8007b26 <ull_configure+0x27e>
 8007b48:	f06f 0001 	mvn.w	r0, #1
 8007b4c:	e0cf      	b.n	8007cee <ull_configure+0x446>
 8007b4e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8007b50:	8a53      	ldrh	r3, [r2, #18]
 8007b52:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007b56:	8253      	strh	r3, [r2, #18]
 8007b58:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007b5c:	9300      	str	r3, [sp, #0]
 8007b5e:	f46f 53c0 	mvn.w	r3, #6144	; 0x1800
 8007b62:	2200      	movs	r2, #0
 8007b64:	493d      	ldr	r1, [pc, #244]	; (8007c5c <ull_configure+0x3b4>)
 8007b66:	4620      	mov	r0, r4
 8007b68:	f7ff f9c8 	bl	8006efc <dwt_modify32bitoffsetreg>
 8007b6c:	f240 3306 	movw	r3, #774	; 0x306
 8007b70:	2200      	movs	r2, #0
 8007b72:	4944      	ldr	r1, [pc, #272]	; (8007c84 <ull_configure+0x3dc>)
 8007b74:	4620      	mov	r0, r4
 8007b76:	f7fe fe2f 	bl	80067d8 <dwt_write32bitoffsetreg>
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	f04f 110e 	mov.w	r1, #917518	; 0xe000e
 8007b82:	4620      	mov	r0, r4
 8007b84:	f7fe fe28 	bl	80067d8 <dwt_write32bitoffsetreg>
 8007b88:	4b3f      	ldr	r3, [pc, #252]	; (8007c88 <ull_configure+0x3e0>)
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	4930      	ldr	r1, [pc, #192]	; (8007c50 <ull_configure+0x3a8>)
 8007b8e:	4620      	mov	r0, r4
 8007b90:	f7fe fe22 	bl	80067d8 <dwt_write32bitoffsetreg>
 8007b94:	239d      	movs	r3, #157	; 0x9d
 8007b96:	9300      	str	r3, [sp, #0]
 8007b98:	4b2e      	ldr	r3, [pc, #184]	; (8007c54 <ull_configure+0x3ac>)
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	492e      	ldr	r1, [pc, #184]	; (8007c58 <ull_configure+0x3b0>)
 8007b9e:	4620      	mov	r0, r4
 8007ba0:	f7ff f9ac 	bl	8006efc <dwt_modify32bitoffsetreg>
 8007ba4:	e719      	b.n	80079da <ull_configure+0x132>
 8007ba6:	7b2a      	ldrb	r2, [r5, #12]
 8007ba8:	4b28      	ldr	r3, [pc, #160]	; (8007c4c <ull_configure+0x3a4>)
 8007baa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007bae:	f44f 6235 	mov.w	r2, #2896	; 0xb50
 8007bb2:	fb02 f203 	mul.w	r2, r2, r3
 8007bb6:	0c93      	lsrs	r3, r2, #18
 8007bb8:	f3c2 12ca 	ubfx	r2, r2, #7, #11
 8007bbc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007bc0:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8007bc4:	bf28      	it	cs
 8007bc6:	3301      	addcs	r3, #1
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	e6df      	b.n	800798c <ull_configure+0xe4>
 8007bcc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007bd0:	9300      	str	r3, [sp, #0]
 8007bd2:	f24e 73ff 	movw	r3, #59391	; 0xe7ff
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	4920      	ldr	r1, [pc, #128]	; (8007c5c <ull_configure+0x3b4>)
 8007bda:	4620      	mov	r0, r4
 8007bdc:	f7ff fd2a 	bl	8007634 <dwt_modify16bitoffsetreg>
 8007be0:	e6fb      	b.n	80079da <ull_configure+0x132>
 8007be2:	78ab      	ldrb	r3, [r5, #2]
 8007be4:	9300      	str	r3, [sp, #0]
 8007be6:	23ec      	movs	r3, #236	; 0xec
 8007be8:	2200      	movs	r2, #0
 8007bea:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 8007bee:	4620      	mov	r0, r4
 8007bf0:	f7ff fb6e 	bl	80072d0 <dwt_modify8bitoffsetreg>
 8007bf4:	e700      	b.n	80079f8 <ull_configure+0x150>
 8007bf6:	2803      	cmp	r0, #3
 8007bf8:	f47f af61 	bne.w	8007abe <ull_configure+0x216>
 8007bfc:	e04d      	b.n	8007c9a <ull_configure+0x3f2>
 8007bfe:	2102      	movs	r1, #2
 8007c00:	4620      	mov	r0, r4
 8007c02:	f7ff fc23 	bl	800744c <ull_setdwstate>
 8007c06:	e75a      	b.n	8007abe <ull_configure+0x216>
 8007c08:	4b20      	ldr	r3, [pc, #128]	; (8007c8c <ull_configure+0x3e4>)
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	4919      	ldr	r1, [pc, #100]	; (8007c74 <ull_configure+0x3cc>)
 8007c0e:	4620      	mov	r0, r4
 8007c10:	f7fe fde2 	bl	80067d8 <dwt_write32bitoffsetreg>
 8007c14:	f640 733c 	movw	r3, #3900	; 0xf3c
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 8007c1e:	4620      	mov	r0, r4
 8007c20:	f7fe fcd9 	bl	80065d6 <dwt_write16bitoffsetreg>
 8007c24:	e75d      	b.n	8007ae2 <ull_configure+0x23a>
 8007c26:	fa4f f189 	sxtb.w	r1, r9
 8007c2a:	4620      	mov	r0, r4
 8007c2c:	f7ff f98a 	bl	8006f44 <_dwt_kick_dgc_on_wakeup>
 8007c30:	e040      	b.n	8007cb4 <ull_configure+0x40c>
 8007c32:	2200      	movs	r2, #0
 8007c34:	9200      	str	r2, [sp, #0]
 8007c36:	23fe      	movs	r3, #254	; 0xfe
 8007c38:	4915      	ldr	r1, [pc, #84]	; (8007c90 <ull_configure+0x3e8>)
 8007c3a:	4620      	mov	r0, r4
 8007c3c:	f7ff fb48 	bl	80072d0 <dwt_modify8bitoffsetreg>
 8007c40:	e042      	b.n	8007cc8 <ull_configure+0x420>
 8007c42:	bf00      	nop
 8007c44:	00026668 	.word	0x00026668
 8007c48:	fffc4fcf 	.word	0xfffc4fcf
 8007c4c:	08013370 	.word	0x08013370
 8007c50:	000e0012 	.word	0x000e0012
 8007c54:	bfffff00 	.word	0xbfffff00
 8007c58:	000e0016 	.word	0x000e0016
 8007c5c:	000b0008 	.word	0x000b0008
 8007c60:	af5f35cc 	.word	0xaf5f35cc
 8007c64:	0006000c 	.word	0x0006000c
 8007c68:	00010014 	.word	0x00010014
 8007c6c:	000f0030 	.word	0x000f0030
 8007c70:	1c071134 	.word	0x1c071134
 8007c74:	0007001c 	.word	0x0007001c
 8007c78:	00070050 	.word	0x00070050
 8007c7c:	00070018 	.word	0x00070018
 8007c80:	00090008 	.word	0x00090008
 8007c84:	000e000c 	.word	0x000e000c
 8007c88:	000c5a0a 	.word	0x000c5a0a
 8007c8c:	1c010034 	.word	0x1c010034
 8007c90:	00030018 	.word	0x00030018
 8007c94:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007c96:	f883 9010 	strb.w	r9, [r3, #16]
 8007c9a:	792b      	ldrb	r3, [r5, #4]
 8007c9c:	3b09      	subs	r3, #9
 8007c9e:	b2db      	uxtb	r3, r3
 8007ca0:	2b0f      	cmp	r3, #15
 8007ca2:	d8c6      	bhi.n	8007c32 <ull_configure+0x38a>
 8007ca4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007ca6:	7a5b      	ldrb	r3, [r3, #9]
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d0bc      	beq.n	8007c26 <ull_configure+0x37e>
 8007cac:	4649      	mov	r1, r9
 8007cae:	4620      	mov	r0, r4
 8007cb0:	f7fe ffae 	bl	8006c10 <ull_configmrxlut>
 8007cb4:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8007cb8:	9300      	str	r3, [sp, #0]
 8007cba:	f248 13ff 	movw	r3, #33279	; 0x81ff
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	490c      	ldr	r1, [pc, #48]	; (8007cf4 <ull_configure+0x44c>)
 8007cc2:	4620      	mov	r0, r4
 8007cc4:	f7ff fcb6 	bl	8007634 <dwt_modify16bitoffsetreg>
 8007cc8:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 8007ccc:	bfcc      	ite	gt
 8007cce:	f04f 5300 	movgt.w	r3, #536870912	; 0x20000000
 8007cd2:	f04f 53a0 	movle.w	r3, #335544320	; 0x14000000
 8007cd6:	9300      	str	r3, [sp, #0]
 8007cd8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8007cdc:	2200      	movs	r2, #0
 8007cde:	4906      	ldr	r1, [pc, #24]	; (8007cf8 <ull_configure+0x450>)
 8007ce0:	4620      	mov	r0, r4
 8007ce2:	f7ff f90b 	bl	8006efc <dwt_modify32bitoffsetreg>
 8007ce6:	2101      	movs	r1, #1
 8007ce8:	4620      	mov	r0, r4
 8007cea:	f7ff fd27 	bl	800773c <ull_pgf_cal>
 8007cee:	b003      	add	sp, #12
 8007cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cf4:	00030018 	.word	0x00030018
 8007cf8:	00060010 	.word	0x00060010

08007cfc <dwt_ioctl>:
 8007cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d00:	b091      	sub	sp, #68	; 0x44
 8007d02:	4606      	mov	r6, r0
 8007d04:	4615      	mov	r5, r2
 8007d06:	461c      	mov	r4, r3
 8007d08:	299c      	cmp	r1, #156	; 0x9c
 8007d0a:	f200 809f 	bhi.w	8007e4c <dwt_ioctl+0x150>
 8007d0e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8007d12:	0a6d      	.short	0x0a6d
 8007d14:	00a30a78 	.word	0x00a30a78
 8007d18:	00be00a7 	.word	0x00be00a7
 8007d1c:	018e0148 	.word	0x018e0148
 8007d20:	0152016b 	.word	0x0152016b
 8007d24:	01a9019e 	.word	0x01a9019e
 8007d28:	01b901b1 	.word	0x01b901b1
 8007d2c:	01c901c1 	.word	0x01c901c1
 8007d30:	01d501d1 	.word	0x01d501d1
 8007d34:	026e01dd 	.word	0x026e01dd
 8007d38:	0281027c 	.word	0x0281027c
 8007d3c:	0290028b 	.word	0x0290028b
 8007d40:	029e0295 	.word	0x029e0295
 8007d44:	030902a3 	.word	0x030902a3
 8007d48:	0326031b 	.word	0x0326031b
 8007d4c:	033b0331 	.word	0x033b0331
 8007d50:	03690373 	.word	0x03690373
 8007d54:	0345035f 	.word	0x0345035f
 8007d58:	03c10352 	.word	0x03c10352
 8007d5c:	022b01f8 	.word	0x022b01f8
 8007d60:	02410239 	.word	0x02410239
 8007d64:	09960255 	.word	0x09960255
 8007d68:	0382099b 	.word	0x0382099b
 8007d6c:	03e303df 	.word	0x03e303df
 8007d70:	03f103ec 	.word	0x03f103ec
 8007d74:	040503fb 	.word	0x040503fb
 8007d78:	0437040d 	.word	0x0437040d
 8007d7c:	044e0443 	.word	0x044e0443
 8007d80:	04590378 	.word	0x04590378
 8007d84:	04740462 	.word	0x04740462
 8007d88:	049e048d 	.word	0x049e048d
 8007d8c:	04ea04e0 	.word	0x04ea04e0
 8007d90:	051a050b 	.word	0x051a050b
 8007d94:	05230535 	.word	0x05230535
 8007d98:	05970551 	.word	0x05970551
 8007d9c:	05cf05af 	.word	0x05cf05af
 8007da0:	05f805e4 	.word	0x05f805e4
 8007da4:	061d0601 	.word	0x061d0601
 8007da8:	0773060a 	.word	0x0773060a
 8007dac:	07ed079f 	.word	0x07ed079f
 8007db0:	07fe07f3 	.word	0x07fe07f3
 8007db4:	08370817 	.word	0x08370817
 8007db8:	084b0841 	.word	0x084b0841
 8007dbc:	08820879 	.word	0x08820879
 8007dc0:	08910888 	.word	0x08910888
 8007dc4:	08ab089e 	.word	0x08ab089e
 8007dc8:	08be08b5 	.word	0x08be08b5
 8007dcc:	08d208c7 	.word	0x08d208c7
 8007dd0:	08e308dd 	.word	0x08e308dd
 8007dd4:	09110906 	.word	0x09110906
 8007dd8:	0945091c 	.word	0x0945091c
 8007ddc:	09720967 	.word	0x09720967
 8007de0:	09a1098b 	.word	0x09a1098b
 8007de4:	0a200a16 	.word	0x0a200a16
 8007de8:	0a800a2b 	.word	0x0a800a2b
 8007dec:	0a620a35 	.word	0x0a620a35
 8007df0:	09df0791 	.word	0x09df0791
 8007df4:	0aee0a00 	.word	0x0aee0a00
 8007df8:	0a8d0ae3 	.word	0x0a8d0ae3
 8007dfc:	0aa30a98 	.word	0x0aa30a98
 8007e00:	0ab90aae 	.word	0x0ab90aae
 8007e04:	0acf0ac4 	.word	0x0acf0ac4
 8007e08:	0bd80ad8 	.word	0x0bd80ad8
 8007e0c:	0c4d0c12 	.word	0x0c4d0c12
 8007e10:	0d290c70 	.word	0x0d290c70
 8007e14:	0b190d3e 	.word	0x0b190d3e
 8007e18:	009d009d 	.word	0x009d009d
 8007e1c:	009d009d 	.word	0x009d009d
 8007e20:	009d009d 	.word	0x009d009d
 8007e24:	009d009d 	.word	0x009d009d
 8007e28:	009d009d 	.word	0x009d009d
 8007e2c:	009d009d 	.word	0x009d009d
 8007e30:	009d009d 	.word	0x009d009d
 8007e34:	009d009d 	.word	0x009d009d
 8007e38:	009d009d 	.word	0x009d009d
 8007e3c:	0c87009d 	.word	0x0c87009d
 8007e40:	0dce0ca5 	.word	0x0dce0ca5
 8007e44:	0ce40cef 	.word	0x0ce40cef
 8007e48:	0cfa0d03 	.word	0x0cfa0d03
 8007e4c:	f04f 35ff 	mov.w	r5, #4294967295
 8007e50:	4628      	mov	r0, r5
 8007e52:	b011      	add	sp, #68	; 0x44
 8007e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e58:	6843      	ldr	r3, [r0, #4]
 8007e5a:	4798      	blx	r3
 8007e5c:	2500      	movs	r5, #0
 8007e5e:	e7f7      	b.n	8007e50 <dwt_ioctl+0x154>
 8007e60:	2202      	movs	r2, #2
 8007e62:	49b7      	ldr	r1, [pc, #732]	; (8008140 <dwt_ioctl+0x444>)
 8007e64:	f7fd ff9e 	bl	8005da4 <dwt_read8bitoffsetreg>
 8007e68:	2803      	cmp	r0, #3
 8007e6a:	d801      	bhi.n	8007e70 <dwt_ioctl+0x174>
 8007e6c:	2500      	movs	r5, #0
 8007e6e:	e7ef      	b.n	8007e50 <dwt_ioctl+0x154>
 8007e70:	f7f8 fb34 	bl	80004dc <decamutexon>
 8007e74:	4604      	mov	r4, r0
 8007e76:	2500      	movs	r5, #0
 8007e78:	9500      	str	r5, [sp, #0]
 8007e7a:	462b      	mov	r3, r5
 8007e7c:	462a      	mov	r2, r5
 8007e7e:	4629      	mov	r1, r5
 8007e80:	4630      	mov	r0, r6
 8007e82:	f7fe fb4b 	bl	800651c <dwt_writetodevice>
 8007e86:	4620      	mov	r0, r4
 8007e88:	f7f8 fb39 	bl	80004fe <decamutexoff>
 8007e8c:	e7e0      	b.n	8007e50 <dwt_ioctl+0x154>
 8007e8e:	2c00      	cmp	r4, #0
 8007e90:	f001 8510 	beq.w	80098b4 <dwt_ioctl+0x1bb8>
 8007e94:	7824      	ldrb	r4, [r4, #0]
 8007e96:	f014 0f1d 	tst.w	r4, #29
 8007e9a:	d065      	beq.n	8007f68 <dwt_ioctl+0x26c>
 8007e9c:	f014 0f01 	tst.w	r4, #1
 8007ea0:	d026      	beq.n	8007ef0 <dwt_ioctl+0x1f4>
 8007ea2:	f014 0f02 	tst.w	r4, #2
 8007ea6:	f04f 0200 	mov.w	r2, #0
 8007eaa:	9200      	str	r2, [sp, #0]
 8007eac:	4613      	mov	r3, r2
 8007eae:	bf14      	ite	ne
 8007eb0:	210d      	movne	r1, #13
 8007eb2:	2103      	moveq	r1, #3
 8007eb4:	f7fe fb32 	bl	800651c <dwt_writetodevice>
 8007eb8:	2203      	movs	r2, #3
 8007eba:	2144      	movs	r1, #68	; 0x44
 8007ebc:	4630      	mov	r0, r6
 8007ebe:	f7fd ff71 	bl	8005da4 <dwt_read8bitoffsetreg>
 8007ec2:	f010 0f08 	tst.w	r0, #8
 8007ec6:	d145      	bne.n	8007f54 <dwt_ioctl+0x258>
 8007ec8:	2200      	movs	r2, #0
 8007eca:	499d      	ldr	r1, [pc, #628]	; (8008140 <dwt_ioctl+0x444>)
 8007ecc:	4630      	mov	r0, r6
 8007ece:	f7fd ff41 	bl	8005d54 <dwt_read32bitoffsetreg>
 8007ed2:	f5b0 2f50 	cmp.w	r0, #851968	; 0xd0000
 8007ed6:	bf18      	it	ne
 8007ed8:	2500      	movne	r5, #0
 8007eda:	d1b9      	bne.n	8007e50 <dwt_ioctl+0x154>
 8007edc:	2100      	movs	r1, #0
 8007ede:	9100      	str	r1, [sp, #0]
 8007ee0:	460b      	mov	r3, r1
 8007ee2:	460a      	mov	r2, r1
 8007ee4:	4630      	mov	r0, r6
 8007ee6:	f7fe fb19 	bl	800651c <dwt_writetodevice>
 8007eea:	f04f 35ff 	mov.w	r5, #4294967295
 8007eee:	e7af      	b.n	8007e50 <dwt_ioctl+0x154>
 8007ef0:	f014 0f08 	tst.w	r4, #8
 8007ef4:	d10e      	bne.n	8007f14 <dwt_ioctl+0x218>
 8007ef6:	f014 0f10 	tst.w	r4, #16
 8007efa:	d11b      	bne.n	8007f34 <dwt_ioctl+0x238>
 8007efc:	f014 0f02 	tst.w	r4, #2
 8007f00:	f04f 0200 	mov.w	r2, #0
 8007f04:	9200      	str	r2, [sp, #0]
 8007f06:	4613      	mov	r3, r2
 8007f08:	bf14      	ite	ne
 8007f0a:	2110      	movne	r1, #16
 8007f0c:	2109      	moveq	r1, #9
 8007f0e:	f7fe fb05 	bl	800651c <dwt_writetodevice>
 8007f12:	e7d1      	b.n	8007eb8 <dwt_ioctl+0x1bc>
 8007f14:	2100      	movs	r1, #0
 8007f16:	f7fe fdd3 	bl	8006ac0 <_dwt_adjust_delaytime>
 8007f1a:	f014 0f02 	tst.w	r4, #2
 8007f1e:	f04f 0200 	mov.w	r2, #0
 8007f22:	9200      	str	r2, [sp, #0]
 8007f24:	4613      	mov	r3, r2
 8007f26:	bf14      	ite	ne
 8007f28:	210f      	movne	r1, #15
 8007f2a:	2107      	moveq	r1, #7
 8007f2c:	4630      	mov	r0, r6
 8007f2e:	f7fe faf5 	bl	800651c <dwt_writetodevice>
 8007f32:	e7c1      	b.n	8007eb8 <dwt_ioctl+0x1bc>
 8007f34:	2101      	movs	r1, #1
 8007f36:	f7fe fdc3 	bl	8006ac0 <_dwt_adjust_delaytime>
 8007f3a:	f014 0f02 	tst.w	r4, #2
 8007f3e:	f04f 0200 	mov.w	r2, #0
 8007f42:	9200      	str	r2, [sp, #0]
 8007f44:	4613      	mov	r3, r2
 8007f46:	bf14      	ite	ne
 8007f48:	210e      	movne	r1, #14
 8007f4a:	2105      	moveq	r1, #5
 8007f4c:	4630      	mov	r0, r6
 8007f4e:	f7fe fae5 	bl	800651c <dwt_writetodevice>
 8007f52:	e7b1      	b.n	8007eb8 <dwt_ioctl+0x1bc>
 8007f54:	2100      	movs	r1, #0
 8007f56:	9100      	str	r1, [sp, #0]
 8007f58:	460b      	mov	r3, r1
 8007f5a:	460a      	mov	r2, r1
 8007f5c:	4630      	mov	r0, r6
 8007f5e:	f7fe fadd 	bl	800651c <dwt_writetodevice>
 8007f62:	f04f 35ff 	mov.w	r5, #4294967295
 8007f66:	e773      	b.n	8007e50 <dwt_ioctl+0x154>
 8007f68:	f014 0f20 	tst.w	r4, #32
 8007f6c:	d00c      	beq.n	8007f88 <dwt_ioctl+0x28c>
 8007f6e:	f014 0f02 	tst.w	r4, #2
 8007f72:	f04f 0500 	mov.w	r5, #0
 8007f76:	9500      	str	r5, [sp, #0]
 8007f78:	462b      	mov	r3, r5
 8007f7a:	462a      	mov	r2, r5
 8007f7c:	bf14      	ite	ne
 8007f7e:	2111      	movne	r1, #17
 8007f80:	210b      	moveq	r1, #11
 8007f82:	f7fe facb 	bl	800651c <dwt_writetodevice>
 8007f86:	e763      	b.n	8007e50 <dwt_ioctl+0x154>
 8007f88:	f014 0f02 	tst.w	r4, #2
 8007f8c:	f04f 0500 	mov.w	r5, #0
 8007f90:	9500      	str	r5, [sp, #0]
 8007f92:	462b      	mov	r3, r5
 8007f94:	462a      	mov	r2, r5
 8007f96:	bf14      	ite	ne
 8007f98:	210c      	movne	r1, #12
 8007f9a:	2101      	moveq	r1, #1
 8007f9c:	f7fe fabe 	bl	800651c <dwt_writetodevice>
 8007fa0:	e756      	b.n	8007e50 <dwt_ioctl+0x154>
 8007fa2:	2c00      	cmp	r4, #0
 8007fa4:	f001 8489 	beq.w	80098ba <dwt_ioctl+0x1bbe>
 8007fa8:	6823      	ldr	r3, [r4, #0]
 8007faa:	2200      	movs	r2, #0
 8007fac:	212c      	movs	r1, #44	; 0x2c
 8007fae:	f7fe fc13 	bl	80067d8 <dwt_write32bitoffsetreg>
 8007fb2:	2500      	movs	r5, #0
 8007fb4:	e74c      	b.n	8007e50 <dwt_ioctl+0x154>
 8007fb6:	6823      	ldr	r3, [r4, #0]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	4962      	ldr	r1, [pc, #392]	; (8008144 <dwt_ioctl+0x448>)
 8007fbc:	f7fe fc0c 	bl	80067d8 <dwt_write32bitoffsetreg>
 8007fc0:	6863      	ldr	r3, [r4, #4]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	4960      	ldr	r1, [pc, #384]	; (8008148 <dwt_ioctl+0x44c>)
 8007fc6:	4630      	mov	r0, r6
 8007fc8:	f7fe fc06 	bl	80067d8 <dwt_write32bitoffsetreg>
 8007fcc:	68a3      	ldr	r3, [r4, #8]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	495e      	ldr	r1, [pc, #376]	; (800814c <dwt_ioctl+0x450>)
 8007fd2:	4630      	mov	r0, r6
 8007fd4:	f7fe fc00 	bl	80067d8 <dwt_write32bitoffsetreg>
 8007fd8:	68e3      	ldr	r3, [r4, #12]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	495c      	ldr	r1, [pc, #368]	; (8008150 <dwt_ioctl+0x454>)
 8007fde:	4630      	mov	r0, r6
 8007fe0:	f7fe fbfa 	bl	80067d8 <dwt_write32bitoffsetreg>
 8007fe4:	2500      	movs	r5, #0
 8007fe6:	e733      	b.n	8007e50 <dwt_ioctl+0x154>
 8007fe8:	2c00      	cmp	r4, #0
 8007fea:	f001 8469 	beq.w	80098c0 <dwt_ioctl+0x1bc4>
 8007fee:	8823      	ldrh	r3, [r4, #0]
 8007ff0:	6865      	ldr	r5, [r4, #4]
 8007ff2:	2d03      	cmp	r5, #3
 8007ff4:	f201 8467 	bhi.w	80098c6 <dwt_ioctl+0x1bca>
 8007ff8:	e8df f005 	tbb	[pc, r5]
 8007ffc:	130d0702 	.word	0x130d0702
 8008000:	2200      	movs	r2, #0
 8008002:	4954      	ldr	r1, [pc, #336]	; (8008154 <dwt_ioctl+0x458>)
 8008004:	f7fe fae7 	bl	80065d6 <dwt_write16bitoffsetreg>
 8008008:	e722      	b.n	8007e50 <dwt_ioctl+0x154>
 800800a:	2202      	movs	r2, #2
 800800c:	4951      	ldr	r1, [pc, #324]	; (8008154 <dwt_ioctl+0x458>)
 800800e:	f7fe fae2 	bl	80065d6 <dwt_write16bitoffsetreg>
 8008012:	2500      	movs	r5, #0
 8008014:	e71c      	b.n	8007e50 <dwt_ioctl+0x154>
 8008016:	2200      	movs	r2, #0
 8008018:	494f      	ldr	r1, [pc, #316]	; (8008158 <dwt_ioctl+0x45c>)
 800801a:	f7fe fadc 	bl	80065d6 <dwt_write16bitoffsetreg>
 800801e:	2500      	movs	r5, #0
 8008020:	e716      	b.n	8007e50 <dwt_ioctl+0x154>
 8008022:	2202      	movs	r2, #2
 8008024:	494c      	ldr	r1, [pc, #304]	; (8008158 <dwt_ioctl+0x45c>)
 8008026:	f7fe fad6 	bl	80065d6 <dwt_write16bitoffsetreg>
 800802a:	2500      	movs	r5, #0
 800802c:	e710      	b.n	8007e50 <dwt_ioctl+0x154>
 800802e:	2c00      	cmp	r4, #0
 8008030:	f001 844c 	beq.w	80098cc <dwt_ioctl+0x1bd0>
 8008034:	7823      	ldrb	r3, [r4, #0]
 8008036:	005b      	lsls	r3, r3, #1
 8008038:	f003 0306 	and.w	r3, r3, #6
 800803c:	9300      	str	r3, [sp, #0]
 800803e:	f06f 0306 	mvn.w	r3, #6
 8008042:	2200      	movs	r2, #0
 8008044:	4945      	ldr	r1, [pc, #276]	; (800815c <dwt_ioctl+0x460>)
 8008046:	f7fe ff59 	bl	8006efc <dwt_modify32bitoffsetreg>
 800804a:	2500      	movs	r5, #0
 800804c:	e700      	b.n	8007e50 <dwt_ioctl+0x154>
 800804e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008052:	9300      	str	r3, [sp, #0]
 8008054:	f04f 33ff 	mov.w	r3, #4294967295
 8008058:	2200      	movs	r2, #0
 800805a:	4941      	ldr	r1, [pc, #260]	; (8008160 <dwt_ioctl+0x464>)
 800805c:	f7fe ff4e 	bl	8006efc <dwt_modify32bitoffsetreg>
 8008060:	2500      	movs	r5, #0
 8008062:	e6f5      	b.n	8007e50 <dwt_ioctl+0x154>
 8008064:	2c00      	cmp	r4, #0
 8008066:	f001 8434 	beq.w	80098d2 <dwt_ioctl+0x1bd6>
 800806a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800806c:	7b5b      	ldrb	r3, [r3, #13]
 800806e:	7023      	strb	r3, [r4, #0]
 8008070:	2500      	movs	r5, #0
 8008072:	e6ed      	b.n	8007e50 <dwt_ioctl+0x154>
 8008074:	2c00      	cmp	r4, #0
 8008076:	f001 842f 	beq.w	80098d8 <dwt_ioctl+0x1bdc>
 800807a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800807c:	7a9b      	ldrb	r3, [r3, #10]
 800807e:	7023      	strb	r3, [r4, #0]
 8008080:	2500      	movs	r5, #0
 8008082:	e6e5      	b.n	8007e50 <dwt_ioctl+0x154>
 8008084:	2c00      	cmp	r4, #0
 8008086:	f001 842a 	beq.w	80098de <dwt_ioctl+0x1be2>
 800808a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800808c:	7adb      	ldrb	r3, [r3, #11]
 800808e:	7023      	strb	r3, [r4, #0]
 8008090:	2500      	movs	r5, #0
 8008092:	e6dd      	b.n	8007e50 <dwt_ioctl+0x154>
 8008094:	2c00      	cmp	r4, #0
 8008096:	f001 8425 	beq.w	80098e4 <dwt_ioctl+0x1be8>
 800809a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	6023      	str	r3, [r4, #0]
 80080a0:	2500      	movs	r5, #0
 80080a2:	e6d5      	b.n	8007e50 <dwt_ioctl+0x154>
 80080a4:	2c00      	cmp	r4, #0
 80080a6:	f001 8420 	beq.w	80098ea <dwt_ioctl+0x1bee>
 80080aa:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	6023      	str	r3, [r4, #0]
 80080b0:	2500      	movs	r5, #0
 80080b2:	e6cd      	b.n	8007e50 <dwt_ioctl+0x154>
 80080b4:	f7fe fb7e 	bl	80067b4 <ull_signal_rx_buff_free>
 80080b8:	2500      	movs	r5, #0
 80080ba:	e6c9      	b.n	8007e50 <dwt_ioctl+0x154>
 80080bc:	2c00      	cmp	r4, #0
 80080be:	f001 8417 	beq.w	80098f0 <dwt_ioctl+0x1bf4>
 80080c2:	6821      	ldr	r1, [r4, #0]
 80080c4:	f7fe fd24 	bl	8006b10 <ull_setrxaftertxdelay>
 80080c8:	2500      	movs	r5, #0
 80080ca:	e6c1      	b.n	8007e50 <dwt_ioctl+0x154>
 80080cc:	2c00      	cmp	r4, #0
 80080ce:	f001 8412 	beq.w	80098f6 <dwt_ioctl+0x1bfa>
 80080d2:	7825      	ldrb	r5, [r4, #0]
 80080d4:	b15d      	cbz	r5, 80080ee <dwt_ioctl+0x3f2>
 80080d6:	6864      	ldr	r4, [r4, #4]
 80080d8:	2340      	movs	r3, #64	; 0x40
 80080da:	9300      	str	r3, [sp, #0]
 80080dc:	23ff      	movs	r3, #255	; 0xff
 80080de:	2200      	movs	r2, #0
 80080e0:	2110      	movs	r1, #16
 80080e2:	f7ff f8f5 	bl	80072d0 <dwt_modify8bitoffsetreg>
 80080e6:	2d02      	cmp	r5, #2
 80080e8:	d107      	bne.n	80080fa <dwt_ioctl+0x3fe>
 80080ea:	60f4      	str	r4, [r6, #12]
 80080ec:	e005      	b.n	80080fa <dwt_ioctl+0x3fe>
 80080ee:	2200      	movs	r2, #0
 80080f0:	9200      	str	r2, [sp, #0]
 80080f2:	23bf      	movs	r3, #191	; 0xbf
 80080f4:	2110      	movs	r1, #16
 80080f6:	f7ff f8eb 	bl	80072d0 <dwt_modify8bitoffsetreg>
 80080fa:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80080fc:	759d      	strb	r5, [r3, #22]
 80080fe:	2500      	movs	r5, #0
 8008100:	e6a6      	b.n	8007e50 <dwt_ioctl+0x154>
 8008102:	2c00      	cmp	r4, #0
 8008104:	f001 83fa 	beq.w	80098fc <dwt_ioctl+0x1c00>
 8008108:	6865      	ldr	r5, [r4, #4]
 800810a:	7823      	ldrb	r3, [r4, #0]
 800810c:	2203      	movs	r2, #3
 800810e:	4915      	ldr	r1, [pc, #84]	; (8008164 <dwt_ioctl+0x468>)
 8008110:	f7fe fa0f 	bl	8006532 <dwt_write8bitoffsetreg>
 8008114:	b945      	cbnz	r5, 8008128 <dwt_ioctl+0x42c>
 8008116:	2200      	movs	r2, #0
 8008118:	9200      	str	r2, [sp, #0]
 800811a:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 800811e:	2110      	movs	r1, #16
 8008120:	4630      	mov	r0, r6
 8008122:	f7ff fa87 	bl	8007634 <dwt_modify16bitoffsetreg>
 8008126:	e693      	b.n	8007e50 <dwt_ioctl+0x154>
 8008128:	f44f 2381 	mov.w	r3, #264192	; 0x40800
 800812c:	9300      	str	r3, [sp, #0]
 800812e:	f04f 33ff 	mov.w	r3, #4294967295
 8008132:	2200      	movs	r2, #0
 8008134:	2110      	movs	r1, #16
 8008136:	4630      	mov	r0, r6
 8008138:	f7fe fee0 	bl	8006efc <dwt_modify32bitoffsetreg>
 800813c:	2500      	movs	r5, #0
 800813e:	e687      	b.n	8007e50 <dwt_ioctl+0x154>
 8008140:	000f0030 	.word	0x000f0030
 8008144:	00010054 	.word	0x00010054
 8008148:	00010058 	.word	0x00010058
 800814c:	0001005c 	.word	0x0001005c
 8008150:	00010060 	.word	0x00010060
 8008154:	00010018 	.word	0x00010018
 8008158:	0001001c 	.word	0x0001001c
 800815c:	00010014 	.word	0x00010014
 8008160:	00110004 	.word	0x00110004
 8008164:	00010008 	.word	0x00010008
 8008168:	2200      	movs	r2, #0
 800816a:	4611      	mov	r1, r2
 800816c:	f7fd fdf2 	bl	8005d54 <dwt_read32bitoffsetreg>
 8008170:	68b2      	ldr	r2, [r6, #8]
 8008172:	6813      	ldr	r3, [r2, #0]
 8008174:	4043      	eors	r3, r0
 8008176:	6852      	ldr	r2, [r2, #4]
 8008178:	4213      	tst	r3, r2
 800817a:	bf14      	ite	ne
 800817c:	f04f 35ff 	movne.w	r5, #4294967295
 8008180:	2500      	moveq	r5, #0
 8008182:	e665      	b.n	8007e50 <dwt_ioctl+0x154>
 8008184:	2c00      	cmp	r4, #0
 8008186:	f001 83bc 	beq.w	8009902 <dwt_ioctl+0x1c06>
 800818a:	7821      	ldrb	r1, [r4, #0]
 800818c:	f7ff f8b4 	bl	80072f8 <ull_configciadiag>
 8008190:	2500      	movs	r5, #0
 8008192:	e65d      	b.n	8007e50 <dwt_ioctl+0x154>
 8008194:	b93a      	cbnz	r2, 80081a6 <dwt_ioctl+0x4aa>
 8008196:	2200      	movs	r2, #0
 8008198:	9200      	str	r2, [sp, #0]
 800819a:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 800819e:	49ae      	ldr	r1, [pc, #696]	; (8008458 <dwt_ioctl+0x75c>)
 80081a0:	f7ff fa48 	bl	8007634 <dwt_modify16bitoffsetreg>
 80081a4:	e654      	b.n	8007e50 <dwt_ioctl+0x154>
 80081a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80081aa:	9300      	str	r3, [sp, #0]
 80081ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80081b0:	2200      	movs	r2, #0
 80081b2:	49a9      	ldr	r1, [pc, #676]	; (8008458 <dwt_ioctl+0x75c>)
 80081b4:	f7ff fa3e 	bl	8007634 <dwt_modify16bitoffsetreg>
 80081b8:	2500      	movs	r5, #0
 80081ba:	e649      	b.n	8007e50 <dwt_ioctl+0x154>
 80081bc:	f002 0201 	and.w	r2, r2, #1
 80081c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80081c4:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 80081c8:	2a00      	cmp	r2, #0
 80081ca:	bf08      	it	eq
 80081cc:	460b      	moveq	r3, r1
 80081ce:	02d2      	lsls	r2, r2, #11
 80081d0:	f015 0f02 	tst.w	r5, #2
 80081d4:	bf12      	itee	ne
 80081d6:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 80081da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80081de:	b29b      	uxtheq	r3, r3
 80081e0:	9200      	str	r2, [sp, #0]
 80081e2:	2200      	movs	r2, #0
 80081e4:	499c      	ldr	r1, [pc, #624]	; (8008458 <dwt_ioctl+0x75c>)
 80081e6:	f7ff fa25 	bl	8007634 <dwt_modify16bitoffsetreg>
 80081ea:	2500      	movs	r5, #0
 80081ec:	e630      	b.n	8007e50 <dwt_ioctl+0x154>
 80081ee:	b92a      	cbnz	r2, 80081fc <dwt_ioctl+0x500>
 80081f0:	4b9a      	ldr	r3, [pc, #616]	; (800845c <dwt_ioctl+0x760>)
 80081f2:	2202      	movs	r2, #2
 80081f4:	499a      	ldr	r1, [pc, #616]	; (8008460 <dwt_ioctl+0x764>)
 80081f6:	f7fe faef 	bl	80067d8 <dwt_write32bitoffsetreg>
 80081fa:	e629      	b.n	8007e50 <dwt_ioctl+0x154>
 80081fc:	4b99      	ldr	r3, [pc, #612]	; (8008464 <dwt_ioctl+0x768>)
 80081fe:	2202      	movs	r2, #2
 8008200:	4997      	ldr	r1, [pc, #604]	; (8008460 <dwt_ioctl+0x764>)
 8008202:	f7fe fae9 	bl	80067d8 <dwt_write32bitoffsetreg>
 8008206:	2500      	movs	r5, #0
 8008208:	e622      	b.n	8007e50 <dwt_ioctl+0x154>
 800820a:	4611      	mov	r1, r2
 800820c:	f7fe fc96 	bl	8006b3c <ull_setlnapamode>
 8008210:	2500      	movs	r5, #0
 8008212:	e61d      	b.n	8007e50 <dwt_ioctl+0x154>
 8008214:	2c00      	cmp	r4, #0
 8008216:	f001 8377 	beq.w	8009908 <dwt_ioctl+0x1c0c>
 800821a:	2200      	movs	r2, #0
 800821c:	4992      	ldr	r1, [pc, #584]	; (8008468 <dwt_ioctl+0x76c>)
 800821e:	f7fd fdc1 	bl	8005da4 <dwt_read8bitoffsetreg>
 8008222:	7020      	strb	r0, [r4, #0]
 8008224:	2500      	movs	r5, #0
 8008226:	e613      	b.n	8007e50 <dwt_ioctl+0x154>
 8008228:	4621      	mov	r1, r4
 800822a:	f7fe fca9 	bl	8006b80 <ull_configurestskey>
 800822e:	2500      	movs	r5, #0
 8008230:	e60e      	b.n	8007e50 <dwt_ioctl+0x154>
 8008232:	4621      	mov	r1, r4
 8008234:	f7fe fcc8 	bl	8006bc8 <ull_configurestsiv>
 8008238:	2500      	movs	r5, #0
 800823a:	e609      	b.n	8007e50 <dwt_ioctl+0x154>
 800823c:	2301      	movs	r3, #1
 800823e:	9300      	str	r3, [sp, #0]
 8008240:	23ff      	movs	r3, #255	; 0xff
 8008242:	2200      	movs	r2, #0
 8008244:	4989      	ldr	r1, [pc, #548]	; (800846c <dwt_ioctl+0x770>)
 8008246:	f7ff f843 	bl	80072d0 <dwt_modify8bitoffsetreg>
 800824a:	2500      	movs	r5, #0
 800824c:	e600      	b.n	8007e50 <dwt_ioctl+0x154>
 800824e:	4611      	mov	r1, r2
 8008250:	f7fe fcde 	bl	8006c10 <ull_configmrxlut>
 8008254:	2500      	movs	r5, #0
 8008256:	e5fb      	b.n	8007e50 <dwt_ioctl+0x154>
 8008258:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800825a:	7a1b      	ldrb	r3, [r3, #8]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d137      	bne.n	80082d0 <dwt_ioctl+0x5d4>
 8008260:	2314      	movs	r3, #20
 8008262:	2201      	movs	r2, #1
 8008264:	4982      	ldr	r1, [pc, #520]	; (8008470 <dwt_ioctl+0x774>)
 8008266:	4630      	mov	r0, r6
 8008268:	f7fe f963 	bl	8006532 <dwt_write8bitoffsetreg>
 800826c:	2318      	movs	r3, #24
 800826e:	2200      	movs	r2, #0
 8008270:	4980      	ldr	r1, [pc, #512]	; (8008474 <dwt_ioctl+0x778>)
 8008272:	4630      	mov	r0, r6
 8008274:	f7fe fab0 	bl	80067d8 <dwt_write32bitoffsetreg>
 8008278:	23e8      	movs	r3, #232	; 0xe8
 800827a:	2200      	movs	r2, #0
 800827c:	497e      	ldr	r1, [pc, #504]	; (8008478 <dwt_ioctl+0x77c>)
 800827e:	4630      	mov	r0, r6
 8008280:	f7fe faaa 	bl	80067d8 <dwt_write32bitoffsetreg>
 8008284:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8008286:	8a5b      	ldrh	r3, [r3, #18]
 8008288:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800828c:	2b20      	cmp	r3, #32
 800828e:	d022      	beq.n	80082d6 <dwt_ioctl+0x5da>
 8008290:	2b60      	cmp	r3, #96	; 0x60
 8008292:	d02b      	beq.n	80082ec <dwt_ioctl+0x5f0>
 8008294:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8008296:	7e1b      	ldrb	r3, [r3, #24]
 8008298:	085b      	lsrs	r3, r3, #1
 800829a:	d032      	beq.n	8008302 <dwt_ioctl+0x606>
 800829c:	2200      	movs	r2, #0
 800829e:	4977      	ldr	r1, [pc, #476]	; (800847c <dwt_ioctl+0x780>)
 80082a0:	4630      	mov	r0, r6
 80082a2:	f7fd fd6d 	bl	8005d80 <dwt_read16bitoffsetreg>
 80082a6:	f3c0 03c4 	ubfx	r3, r0, #3, #5
 80082aa:	3b09      	subs	r3, #9
 80082ac:	2b0f      	cmp	r3, #15
 80082ae:	f201 832e 	bhi.w	800990e <dwt_ioctl+0x1c12>
 80082b2:	f000 0001 	and.w	r0, r0, #1
 80082b6:	2800      	cmp	r0, #0
 80082b8:	bf0c      	ite	eq
 80082ba:	2105      	moveq	r1, #5
 80082bc:	2109      	movne	r1, #9
 80082be:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80082c0:	7a5b      	ldrb	r3, [r3, #9]
 80082c2:	2b01      	cmp	r3, #1
 80082c4:	d029      	beq.n	800831a <dwt_ioctl+0x61e>
 80082c6:	4630      	mov	r0, r6
 80082c8:	f7fe fca2 	bl	8006c10 <ull_configmrxlut>
 80082cc:	2500      	movs	r5, #0
 80082ce:	e5bf      	b.n	8007e50 <dwt_ioctl+0x154>
 80082d0:	f7ff f9ca 	bl	8007668 <_dwt_prog_ldo_and_bias_tune>
 80082d4:	e7c4      	b.n	8008260 <dwt_ioctl+0x564>
 80082d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082da:	9300      	str	r3, [sp, #0]
 80082dc:	f46f 53c0 	mvn.w	r3, #6144	; 0x1800
 80082e0:	2200      	movs	r2, #0
 80082e2:	4967      	ldr	r1, [pc, #412]	; (8008480 <dwt_ioctl+0x784>)
 80082e4:	4630      	mov	r0, r6
 80082e6:	f7fe fe09 	bl	8006efc <dwt_modify32bitoffsetreg>
 80082ea:	e7d3      	b.n	8008294 <dwt_ioctl+0x598>
 80082ec:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80082f0:	9300      	str	r3, [sp, #0]
 80082f2:	f46f 53c0 	mvn.w	r3, #6144	; 0x1800
 80082f6:	2200      	movs	r2, #0
 80082f8:	4961      	ldr	r1, [pc, #388]	; (8008480 <dwt_ioctl+0x784>)
 80082fa:	4630      	mov	r0, r6
 80082fc:	f7fe fdfe 	bl	8006efc <dwt_modify32bitoffsetreg>
 8008300:	e7c8      	b.n	8008294 <dwt_ioctl+0x598>
 8008302:	2301      	movs	r3, #1
 8008304:	2200      	movs	r2, #0
 8008306:	495f      	ldr	r1, [pc, #380]	; (8008484 <dwt_ioctl+0x788>)
 8008308:	4630      	mov	r0, r6
 800830a:	f7fe f912 	bl	8006532 <dwt_write8bitoffsetreg>
 800830e:	6d32      	ldr	r2, [r6, #80]	; 0x50
 8008310:	7e13      	ldrb	r3, [r2, #24]
 8008312:	f043 0302 	orr.w	r3, r3, #2
 8008316:	7613      	strb	r3, [r2, #24]
 8008318:	e7c0      	b.n	800829c <dwt_ioctl+0x5a0>
 800831a:	4630      	mov	r0, r6
 800831c:	f7fe fe12 	bl	8006f44 <_dwt_kick_dgc_on_wakeup>
 8008320:	2500      	movs	r5, #0
 8008322:	e595      	b.n	8007e50 <dwt_ioctl+0x154>
 8008324:	2c00      	cmp	r4, #0
 8008326:	f001 82f5 	beq.w	8009914 <dwt_ioctl+0x1c18>
 800832a:	7823      	ldrb	r3, [r4, #0]
 800832c:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800832e:	75d3      	strb	r3, [r2, #23]
 8008330:	031b      	lsls	r3, r3, #12
 8008332:	f403 4330 	and.w	r3, r3, #45056	; 0xb000
 8008336:	9300      	str	r3, [sp, #0]
 8008338:	f644 73ff 	movw	r3, #20479	; 0x4fff
 800833c:	2200      	movs	r2, #0
 800833e:	2110      	movs	r1, #16
 8008340:	f7ff f978 	bl	8007634 <dwt_modify16bitoffsetreg>
 8008344:	2500      	movs	r5, #0
 8008346:	e583      	b.n	8007e50 <dwt_ioctl+0x154>
 8008348:	2c00      	cmp	r4, #0
 800834a:	f001 82e6 	beq.w	800991a <dwt_ioctl+0x1c1e>
 800834e:	8823      	ldrh	r3, [r4, #0]
 8008350:	2200      	movs	r2, #0
 8008352:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 8008356:	f7fe f93e 	bl	80065d6 <dwt_write16bitoffsetreg>
 800835a:	2500      	movs	r5, #0
 800835c:	e578      	b.n	8007e50 <dwt_ioctl+0x154>
 800835e:	2c00      	cmp	r4, #0
 8008360:	f001 82de 	beq.w	8009920 <dwt_ioctl+0x1c24>
 8008364:	2200      	movs	r2, #0
 8008366:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800836a:	f7fd fd09 	bl	8005d80 <dwt_read16bitoffsetreg>
 800836e:	8020      	strh	r0, [r4, #0]
 8008370:	2500      	movs	r5, #0
 8008372:	e56d      	b.n	8007e50 <dwt_ioctl+0x154>
 8008374:	2c00      	cmp	r4, #0
 8008376:	f001 82d6 	beq.w	8009926 <dwt_ioctl+0x1c2a>
 800837a:	8823      	ldrh	r3, [r4, #0]
 800837c:	2200      	movs	r2, #0
 800837e:	4942      	ldr	r1, [pc, #264]	; (8008488 <dwt_ioctl+0x78c>)
 8008380:	f7fe f929 	bl	80065d6 <dwt_write16bitoffsetreg>
 8008384:	2500      	movs	r5, #0
 8008386:	e563      	b.n	8007e50 <dwt_ioctl+0x154>
 8008388:	2c00      	cmp	r4, #0
 800838a:	f001 82cf 	beq.w	800992c <dwt_ioctl+0x1c30>
 800838e:	2200      	movs	r2, #0
 8008390:	493d      	ldr	r1, [pc, #244]	; (8008488 <dwt_ioctl+0x78c>)
 8008392:	f7fd fcf5 	bl	8005d80 <dwt_read16bitoffsetreg>
 8008396:	8020      	strh	r0, [r4, #0]
 8008398:	2500      	movs	r5, #0
 800839a:	e559      	b.n	8007e50 <dwt_ioctl+0x154>
 800839c:	2c00      	cmp	r4, #0
 800839e:	f001 82c8 	beq.w	8009932 <dwt_ioctl+0x1c36>
 80083a2:	88a3      	ldrh	r3, [r4, #4]
 80083a4:	88e2      	ldrh	r2, [r4, #6]
 80083a6:	6821      	ldr	r1, [r4, #0]
 80083a8:	9100      	str	r1, [sp, #0]
 80083aa:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 80083ae:	f7fe f8b5 	bl	800651c <dwt_writetodevice>
 80083b2:	2500      	movs	r5, #0
 80083b4:	e54c      	b.n	8007e50 <dwt_ioctl+0x154>
 80083b6:	2c00      	cmp	r4, #0
 80083b8:	f001 82be 	beq.w	8009938 <dwt_ioctl+0x1c3c>
 80083bc:	88a3      	ldrh	r3, [r4, #4]
 80083be:	88e2      	ldrh	r2, [r4, #6]
 80083c0:	6821      	ldr	r1, [r4, #0]
 80083c2:	9100      	str	r1, [sp, #0]
 80083c4:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 80083c8:	f7fd fcba 	bl	8005d40 <dwt_readfromdevice>
 80083cc:	2500      	movs	r5, #0
 80083ce:	e53f      	b.n	8007e50 <dwt_ioctl+0x154>
 80083d0:	2c00      	cmp	r4, #0
 80083d2:	f001 82b4 	beq.w	800993e <dwt_ioctl+0x1c42>
 80083d6:	88e3      	ldrh	r3, [r4, #6]
 80083d8:	88a2      	ldrh	r2, [r4, #4]
 80083da:	6821      	ldr	r1, [r4, #0]
 80083dc:	f7fe fcc2 	bl	8006d64 <ull_readrxdata>
 80083e0:	2500      	movs	r5, #0
 80083e2:	e535      	b.n	8007e50 <dwt_ioctl+0x154>
 80083e4:	2c00      	cmp	r4, #0
 80083e6:	f001 82ad 	beq.w	8009944 <dwt_ioctl+0x1c48>
 80083ea:	88e3      	ldrh	r3, [r4, #6]
 80083ec:	6822      	ldr	r2, [r4, #0]
 80083ee:	88a1      	ldrh	r1, [r4, #4]
 80083f0:	f7fe fd52 	bl	8006e98 <ull_writetxdata>
 80083f4:	2500      	movs	r5, #0
 80083f6:	e52b      	b.n	8007e50 <dwt_ioctl+0x154>
 80083f8:	4611      	mov	r1, r2
 80083fa:	f7fe fce9 	bl	8006dd0 <ull_rxenable>
 80083fe:	2500      	movs	r5, #0
 8008400:	e526      	b.n	8007e50 <dwt_ioctl+0x154>
 8008402:	2c00      	cmp	r4, #0
 8008404:	f001 82a1 	beq.w	800994a <dwt_ioctl+0x1c4e>
 8008408:	7923      	ldrb	r3, [r4, #4]
 800840a:	8862      	ldrh	r2, [r4, #2]
 800840c:	8821      	ldrh	r1, [r4, #0]
 800840e:	f7fe ff2d 	bl	800726c <ull_writetxfctrl>
 8008412:	2500      	movs	r5, #0
 8008414:	e51c      	b.n	8007e50 <dwt_ioctl+0x154>
 8008416:	2c00      	cmp	r4, #0
 8008418:	f001 829a 	beq.w	8009950 <dwt_ioctl+0x1c54>
 800841c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800841e:	7bdb      	ldrb	r3, [r3, #15]
 8008420:	2b01      	cmp	r3, #1
 8008422:	d00c      	beq.n	800843e <dwt_ioctl+0x742>
 8008424:	2b03      	cmp	r3, #3
 8008426:	d110      	bne.n	800844a <dwt_ioctl+0x74e>
 8008428:	220c      	movs	r2, #12
 800842a:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800842e:	f7fd fca7 	bl	8005d80 <dwt_read16bitoffsetreg>
 8008432:	b200      	sxth	r0, r0
 8008434:	f340 030c 	sbfx	r3, r0, #0, #13
 8008438:	8023      	strh	r3, [r4, #0]
 800843a:	2500      	movs	r5, #0
 800843c:	e508      	b.n	8007e50 <dwt_ioctl+0x154>
 800843e:	2200      	movs	r2, #0
 8008440:	4912      	ldr	r1, [pc, #72]	; (800848c <dwt_ioctl+0x790>)
 8008442:	f7fd fc9d 	bl	8005d80 <dwt_read16bitoffsetreg>
 8008446:	b200      	sxth	r0, r0
 8008448:	e7f4      	b.n	8008434 <dwt_ioctl+0x738>
 800844a:	2200      	movs	r2, #0
 800844c:	4910      	ldr	r1, [pc, #64]	; (8008490 <dwt_ioctl+0x794>)
 800844e:	f7fd fc97 	bl	8005d80 <dwt_read16bitoffsetreg>
 8008452:	b200      	sxth	r0, r0
 8008454:	e7ee      	b.n	8008434 <dwt_ioctl+0x738>
 8008456:	bf00      	nop
 8008458:	00110008 	.word	0x00110008
 800845c:	00d20874 	.word	0x00d20874
 8008460:	00110010 	.word	0x00110010
 8008464:	04d28874 	.word	0x04d28874
 8008468:	0007001c 	.word	0x0007001c
 800846c:	00020004 	.word	0x00020004
 8008470:	00070050 	.word	0x00070050
 8008474:	001f000c 	.word	0x001f000c
 8008478:	001f0010 	.word	0x001f0010
 800847c:	00010014 	.word	0x00010014
 8008480:	000b0008 	.word	0x000b0008
 8008484:	00010028 	.word	0x00010028
 8008488:	00010004 	.word	0x00010004
 800848c:	0018000c 	.word	0x0018000c
 8008490:	000c0020 	.word	0x000c0020
 8008494:	2c00      	cmp	r4, #0
 8008496:	f001 825e 	beq.w	8009956 <dwt_ioctl+0x1c5a>
 800849a:	ab0c      	add	r3, sp, #48	; 0x30
 800849c:	9300      	str	r3, [sp, #0]
 800849e:	2303      	movs	r3, #3
 80084a0:	2200      	movs	r2, #0
 80084a2:	49bb      	ldr	r1, [pc, #748]	; (8008790 <dwt_ioctl+0xa94>)
 80084a4:	f7fd fc4c 	bl	8005d40 <dwt_readfromdevice>
 80084a8:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 80084ac:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 80084b0:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 80084b4:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 80084b8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80084bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80084c0:	bf1c      	itt	ne
 80084c2:	ea6f 3303 	mvnne.w	r3, r3, lsl #12
 80084c6:	ea6f 3313 	mvnne.w	r3, r3, lsr #12
 80084ca:	6023      	str	r3, [r4, #0]
 80084cc:	2500      	movs	r5, #0
 80084ce:	e4bf      	b.n	8007e50 <dwt_ioctl+0x154>
 80084d0:	f7fe f892 	bl	80065f8 <ull_clearaonconfig>
 80084d4:	2500      	movs	r5, #0
 80084d6:	e4bb      	b.n	8007e50 <dwt_ioctl+0x154>
 80084d8:	2c00      	cmp	r4, #0
 80084da:	f001 823f 	beq.w	800995c <dwt_ioctl+0x1c60>
 80084de:	8861      	ldrh	r1, [r4, #2]
 80084e0:	f7fe ff40 	bl	8007364 <ull_calcbandwidthadj>
 80084e4:	7020      	strb	r0, [r4, #0]
 80084e6:	2500      	movs	r5, #0
 80084e8:	e4b2      	b.n	8007e50 <dwt_ioctl+0x154>
 80084ea:	4621      	mov	r1, r4
 80084ec:	f7fd fc68 	bl	8005dc0 <ull_readdiagnostics>
 80084f0:	2500      	movs	r5, #0
 80084f2:	e4ad      	b.n	8007e50 <dwt_ioctl+0x154>
 80084f4:	2c00      	cmp	r4, #0
 80084f6:	f001 8234 	beq.w	8009962 <dwt_ioctl+0x1c66>
 80084fa:	2201      	movs	r2, #1
 80084fc:	2174      	movs	r1, #116	; 0x74
 80084fe:	f7fd fc29 	bl	8005d54 <dwt_read32bitoffsetreg>
 8008502:	6020      	str	r0, [r4, #0]
 8008504:	2500      	movs	r5, #0
 8008506:	e4a3      	b.n	8007e50 <dwt_ioctl+0x154>
 8008508:	2c00      	cmp	r4, #0
 800850a:	f001 822d 	beq.w	8009968 <dwt_ioctl+0x1c6c>
 800850e:	2200      	movs	r2, #0
 8008510:	2174      	movs	r1, #116	; 0x74
 8008512:	f7fd fc1f 	bl	8005d54 <dwt_read32bitoffsetreg>
 8008516:	6020      	str	r0, [r4, #0]
 8008518:	2500      	movs	r5, #0
 800851a:	e499      	b.n	8007e50 <dwt_ioctl+0x154>
 800851c:	9400      	str	r4, [sp, #0]
 800851e:	2305      	movs	r3, #5
 8008520:	2200      	movs	r2, #0
 8008522:	2174      	movs	r1, #116	; 0x74
 8008524:	f7fd fc0c 	bl	8005d40 <dwt_readfromdevice>
 8008528:	2500      	movs	r5, #0
 800852a:	e491      	b.n	8007e50 <dwt_ioctl+0x154>
 800852c:	2c00      	cmp	r4, #0
 800852e:	f001 821e 	beq.w	800996e <dwt_ioctl+0x1c72>
 8008532:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8008534:	7bdb      	ldrb	r3, [r3, #15]
 8008536:	2b01      	cmp	r3, #1
 8008538:	d014      	beq.n	8008564 <dwt_ioctl+0x868>
 800853a:	2b03      	cmp	r3, #3
 800853c:	d119      	bne.n	8008572 <dwt_ioctl+0x876>
 800853e:	2216      	movs	r2, #22
 8008540:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8008544:	f7fd fc1c 	bl	8005d80 <dwt_read16bitoffsetreg>
 8008548:	f3c0 000d 	ubfx	r0, r0, #0, #14
 800854c:	b283      	uxth	r3, r0
 800854e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8008552:	d004      	beq.n	800855e <dwt_ioctl+0x862>
 8008554:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 8008558:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 800855c:	b218      	sxth	r0, r3
 800855e:	8020      	strh	r0, [r4, #0]
 8008560:	2500      	movs	r5, #0
 8008562:	e475      	b.n	8007e50 <dwt_ioctl+0x154>
 8008564:	2202      	movs	r2, #2
 8008566:	498b      	ldr	r1, [pc, #556]	; (8008794 <dwt_ioctl+0xa98>)
 8008568:	f7fd fc0a 	bl	8005d80 <dwt_read16bitoffsetreg>
 800856c:	f3c0 000d 	ubfx	r0, r0, #0, #14
 8008570:	e7ec      	b.n	800854c <dwt_ioctl+0x850>
 8008572:	2202      	movs	r2, #2
 8008574:	4988      	ldr	r1, [pc, #544]	; (8008798 <dwt_ioctl+0xa9c>)
 8008576:	f7fd fc03 	bl	8005d80 <dwt_read16bitoffsetreg>
 800857a:	f3c0 000d 	ubfx	r0, r0, #0, #14
 800857e:	e7e5      	b.n	800854c <dwt_ioctl+0x850>
 8008580:	9400      	str	r4, [sp, #0]
 8008582:	2306      	movs	r3, #6
 8008584:	2200      	movs	r2, #0
 8008586:	4985      	ldr	r1, [pc, #532]	; (800879c <dwt_ioctl+0xaa0>)
 8008588:	f7fd fbda 	bl	8005d40 <dwt_readfromdevice>
 800858c:	7963      	ldrb	r3, [r4, #5]
 800858e:	f003 0301 	and.w	r3, r3, #1
 8008592:	7163      	strb	r3, [r4, #5]
 8008594:	2500      	movs	r5, #0
 8008596:	e45b      	b.n	8007e50 <dwt_ioctl+0x154>
 8008598:	2c00      	cmp	r4, #0
 800859a:	f001 81eb 	beq.w	8009974 <dwt_ioctl+0x1c78>
 800859e:	2201      	movs	r2, #1
 80085a0:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 80085a4:	f7fd fbfe 	bl	8005da4 <dwt_read8bitoffsetreg>
 80085a8:	7020      	strb	r0, [r4, #0]
 80085aa:	2500      	movs	r5, #0
 80085ac:	e450      	b.n	8007e50 <dwt_ioctl+0x154>
 80085ae:	2c00      	cmp	r4, #0
 80085b0:	f001 81e3 	beq.w	800997a <dwt_ioctl+0x1c7e>
 80085b4:	2200      	movs	r2, #0
 80085b6:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 80085ba:	f7fd fbf3 	bl	8005da4 <dwt_read8bitoffsetreg>
 80085be:	7020      	strb	r0, [r4, #0]
 80085c0:	2500      	movs	r5, #0
 80085c2:	e445      	b.n	8007e50 <dwt_ioctl+0x154>
 80085c4:	2c00      	cmp	r4, #0
 80085c6:	f001 81db 	beq.w	8009980 <dwt_ioctl+0x1c84>
 80085ca:	88a2      	ldrh	r2, [r4, #4]
 80085cc:	6821      	ldr	r1, [r4, #0]
 80085ce:	f7fe fd1d 	bl	800700c <_dwt_otpprogword32>
 80085d2:	2500      	movs	r5, #0
 80085d4:	e43c      	b.n	8007e50 <dwt_ioctl+0x154>
 80085d6:	2c00      	cmp	r4, #0
 80085d8:	f001 81d5 	beq.w	8009986 <dwt_ioctl+0x1c8a>
 80085dc:	6825      	ldr	r5, [r4, #0]
 80085de:	88a4      	ldrh	r4, [r4, #4]
 80085e0:	4622      	mov	r2, r4
 80085e2:	4629      	mov	r1, r5
 80085e4:	f7fe fd12 	bl	800700c <_dwt_otpprogword32>
 80085e8:	4621      	mov	r1, r4
 80085ea:	4630      	mov	r0, r6
 80085ec:	f7fe f84e 	bl	800668c <_dwt_otpread>
 80085f0:	1a2d      	subs	r5, r5, r0
 80085f2:	bf18      	it	ne
 80085f4:	f04f 35ff 	movne.w	r5, #4294967295
 80085f8:	e42a      	b.n	8007e50 <dwt_ioctl+0x154>
 80085fa:	2a02      	cmp	r2, #2
 80085fc:	d00e      	beq.n	800861c <dwt_ioctl+0x920>
 80085fe:	4c68      	ldr	r4, [pc, #416]	; (80087a0 <dwt_ioctl+0xaa4>)
 8008600:	2300      	movs	r3, #0
 8008602:	461a      	mov	r2, r3
 8008604:	4621      	mov	r1, r4
 8008606:	4630      	mov	r0, r6
 8008608:	f7fd ff93 	bl	8006532 <dwt_write8bitoffsetreg>
 800860c:	2302      	movs	r3, #2
 800860e:	2200      	movs	r2, #0
 8008610:	4621      	mov	r1, r4
 8008612:	4630      	mov	r0, r6
 8008614:	f7fd ff8d 	bl	8006532 <dwt_write8bitoffsetreg>
 8008618:	2500      	movs	r5, #0
 800861a:	e419      	b.n	8007e50 <dwt_ioctl+0x154>
 800861c:	2300      	movs	r3, #0
 800861e:	9300      	str	r3, [sp, #0]
 8008620:	23fe      	movs	r3, #254	; 0xfe
 8008622:	2201      	movs	r2, #1
 8008624:	495f      	ldr	r1, [pc, #380]	; (80087a4 <dwt_ioctl+0xaa8>)
 8008626:	f7fe fe53 	bl	80072d0 <dwt_modify8bitoffsetreg>
 800862a:	e7e8      	b.n	80085fe <dwt_ioctl+0x902>
 800862c:	2c00      	cmp	r4, #0
 800862e:	f001 81ad 	beq.w	800998c <dwt_ioctl+0x1c90>
 8008632:	8824      	ldrh	r4, [r4, #0]
 8008634:	b2e2      	uxtb	r2, r4
 8008636:	f44f 7181 	mov.w	r1, #258	; 0x102
 800863a:	f7fe f869 	bl	8006710 <ull_aon_write>
 800863e:	0a22      	lsrs	r2, r4, #8
 8008640:	f240 1103 	movw	r1, #259	; 0x103
 8008644:	4630      	mov	r0, r6
 8008646:	f7fe f863 	bl	8006710 <ull_aon_write>
 800864a:	2500      	movs	r5, #0
 800864c:	e400      	b.n	8007e50 <dwt_ioctl+0x154>
 800864e:	2c00      	cmp	r4, #0
 8008650:	f001 819f 	beq.w	8009992 <dwt_ioctl+0x1c96>
 8008654:	f8df 8158 	ldr.w	r8, [pc, #344]	; 80087b0 <dwt_ioctl+0xab4>
 8008658:	2310      	movs	r3, #16
 800865a:	9300      	str	r3, [sp, #0]
 800865c:	23ff      	movs	r3, #255	; 0xff
 800865e:	2200      	movs	r2, #0
 8008660:	4641      	mov	r1, r8
 8008662:	f7fe fe35 	bl	80072d0 <dwt_modify8bitoffsetreg>
 8008666:	f44f 7182 	mov.w	r1, #260	; 0x104
 800866a:	4630      	mov	r0, r6
 800866c:	f7fe f830 	bl	80066d0 <ull_aon_read>
 8008670:	f000 05e0 	and.w	r5, r0, #224	; 0xe0
 8008674:	462a      	mov	r2, r5
 8008676:	f44f 7182 	mov.w	r1, #260	; 0x104
 800867a:	4630      	mov	r0, r6
 800867c:	f7fe f848 	bl	8006710 <ull_aon_write>
 8008680:	f045 0204 	orr.w	r2, r5, #4
 8008684:	f44f 7182 	mov.w	r1, #260	; 0x104
 8008688:	4630      	mov	r0, r6
 800868a:	f7fe f841 	bl	8006710 <ull_aon_write>
 800868e:	2002      	movs	r0, #2
 8008690:	f7f7 ff42 	bl	8000518 <deca_sleep>
 8008694:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8008698:	4630      	mov	r0, r6
 800869a:	f7fe f819 	bl	80066d0 <ull_aon_read>
 800869e:	4607      	mov	r7, r0
 80086a0:	f240 110f 	movw	r1, #271	; 0x10f
 80086a4:	4630      	mov	r0, r6
 80086a6:	f7fe f813 	bl	80066d0 <ull_aon_read>
 80086aa:	4681      	mov	r9, r0
 80086ac:	462a      	mov	r2, r5
 80086ae:	f44f 7182 	mov.w	r1, #260	; 0x104
 80086b2:	4630      	mov	r0, r6
 80086b4:	f7fe f82c 	bl	8006710 <ull_aon_write>
 80086b8:	2500      	movs	r5, #0
 80086ba:	9500      	str	r5, [sp, #0]
 80086bc:	23ef      	movs	r3, #239	; 0xef
 80086be:	462a      	mov	r2, r5
 80086c0:	4641      	mov	r1, r8
 80086c2:	4630      	mov	r0, r6
 80086c4:	f7fe fe04 	bl	80072d0 <dwt_modify8bitoffsetreg>
 80086c8:	ea47 2709 	orr.w	r7, r7, r9, lsl #8
 80086cc:	8027      	strh	r7, [r4, #0]
 80086ce:	f7ff bbbf 	b.w	8007e50 <dwt_ioctl+0x154>
 80086d2:	2c00      	cmp	r4, #0
 80086d4:	f001 8160 	beq.w	8009998 <dwt_ioctl+0x1c9c>
 80086d8:	78a2      	ldrb	r2, [r4, #2]
 80086da:	8821      	ldrh	r1, [r4, #0]
 80086dc:	f7fe f840 	bl	8006760 <ull_configuresleep>
 80086e0:	2500      	movs	r5, #0
 80086e2:	f7ff bbb5 	b.w	8007e50 <dwt_ioctl+0x154>
 80086e6:	f7fd ff87 	bl	80065f8 <ull_clearaonconfig>
 80086ea:	2001      	movs	r0, #1
 80086ec:	f7f7 ff14 	bl	8000518 <deca_sleep>
 80086f0:	2303      	movs	r3, #3
 80086f2:	9300      	str	r3, [sp, #0]
 80086f4:	23ff      	movs	r3, #255	; 0xff
 80086f6:	2200      	movs	r2, #0
 80086f8:	492b      	ldr	r1, [pc, #172]	; (80087a8 <dwt_ioctl+0xaac>)
 80086fa:	4630      	mov	r0, r6
 80086fc:	f7fe fde8 	bl	80072d0 <dwt_modify8bitoffsetreg>
 8008700:	2300      	movs	r3, #0
 8008702:	461a      	mov	r2, r3
 8008704:	f44f 1188 	mov.w	r1, #1114112	; 0x110000
 8008708:	4630      	mov	r0, r6
 800870a:	f7fd ff12 	bl	8006532 <dwt_write8bitoffsetreg>
 800870e:	2001      	movs	r0, #1
 8008710:	f7f7 ff02 	bl	8000518 <deca_sleep>
 8008714:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8008716:	2500      	movs	r5, #0
 8008718:	73dd      	strb	r5, [r3, #15]
 800871a:	2202      	movs	r2, #2
 800871c:	825a      	strh	r2, [r3, #18]
 800871e:	759d      	strb	r5, [r3, #22]
 8008720:	75dd      	strb	r5, [r3, #23]
 8008722:	741d      	strb	r5, [r3, #16]
 8008724:	f7ff bb94 	b.w	8007e50 <dwt_ioctl+0x154>
 8008728:	2c00      	cmp	r4, #0
 800872a:	f001 8138 	beq.w	800999e <dwt_ioctl+0x1ca2>
 800872e:	7823      	ldrb	r3, [r4, #0]
 8008730:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008734:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8008736:	7393      	strb	r3, [r2, #14]
 8008738:	2200      	movs	r2, #0
 800873a:	491c      	ldr	r1, [pc, #112]	; (80087ac <dwt_ioctl+0xab0>)
 800873c:	f7fd fef9 	bl	8006532 <dwt_write8bitoffsetreg>
 8008740:	2500      	movs	r5, #0
 8008742:	f7ff bb85 	b.w	8007e50 <dwt_ioctl+0x154>
 8008746:	2c00      	cmp	r4, #0
 8008748:	f001 812c 	beq.w	80099a4 <dwt_ioctl+0x1ca8>
 800874c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800874e:	7b9b      	ldrb	r3, [r3, #14]
 8008750:	7023      	strb	r3, [r4, #0]
 8008752:	2500      	movs	r5, #0
 8008754:	f7ff bb7c 	b.w	8007e50 <dwt_ioctl+0x154>
 8008758:	2101      	movs	r1, #1
 800875a:	f7fe fc11 	bl	8006f80 <ull_enable_rf_tx>
 800875e:	4630      	mov	r0, r6
 8008760:	f7fe fc42 	bl	8006fe8 <ull_enable_rftx_blocks>
 8008764:	2101      	movs	r1, #1
 8008766:	4630      	mov	r0, r6
 8008768:	f7fd ff66 	bl	8006638 <ull_force_clocks>
 800876c:	220f      	movs	r2, #15
 800876e:	2101      	movs	r1, #1
 8008770:	4630      	mov	r0, r6
 8008772:	f7ff f86f 	bl	8007854 <ull_repeated_cw>
 8008776:	2500      	movs	r5, #0
 8008778:	f7ff bb6a 	b.w	8007e50 <dwt_ioctl+0x154>
 800877c:	2c00      	cmp	r4, #0
 800877e:	f001 8114 	beq.w	80099aa <dwt_ioctl+0x1cae>
 8008782:	6862      	ldr	r2, [r4, #4]
 8008784:	6821      	ldr	r1, [r4, #0]
 8008786:	f7ff f865 	bl	8007854 <ull_repeated_cw>
 800878a:	2500      	movs	r5, #0
 800878c:	f7ff bb60 	b.w	8007e50 <dwt_ioctl+0x154>
 8008790:	00060029 	.word	0x00060029
 8008794:	00180014 	.word	0x00180014
 8008798:	000c001c 	.word	0x000c001c
 800879c:	000c0018 	.word	0x000c0018
 80087a0:	000a0004 	.word	0x000a0004
 80087a4:	00110008 	.word	0x00110008
 80087a8:	00110004 	.word	0x00110004
 80087ac:	00090014 	.word	0x00090014
 80087b0:	00070048 	.word	0x00070048
 80087b4:	2c00      	cmp	r4, #0
 80087b6:	f001 80fb 	beq.w	80099b0 <dwt_ioctl+0x1cb4>
 80087ba:	4dd6      	ldr	r5, [pc, #856]	; (8008b14 <dwt_ioctl+0xe18>)
 80087bc:	2200      	movs	r2, #0
 80087be:	4629      	mov	r1, r5
 80087c0:	f7fd faf0 	bl	8005da4 <dwt_read8bitoffsetreg>
 80087c4:	4680      	mov	r8, r0
 80087c6:	2302      	movs	r3, #2
 80087c8:	9300      	str	r3, [sp, #0]
 80087ca:	23ff      	movs	r3, #255	; 0xff
 80087cc:	2200      	movs	r2, #0
 80087ce:	4629      	mov	r1, r5
 80087d0:	4630      	mov	r0, r6
 80087d2:	f7fe fd7d 	bl	80072d0 <dwt_modify8bitoffsetreg>
 80087d6:	2304      	movs	r3, #4
 80087d8:	2200      	movs	r2, #0
 80087da:	49cf      	ldr	r1, [pc, #828]	; (8008b18 <dwt_ioctl+0xe1c>)
 80087dc:	4630      	mov	r0, r6
 80087de:	f7fd fea8 	bl	8006532 <dwt_write8bitoffsetreg>
 80087e2:	2301      	movs	r3, #1
 80087e4:	2200      	movs	r2, #0
 80087e6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80087ea:	4630      	mov	r0, r6
 80087ec:	f7fd fea1 	bl	8006532 <dwt_write8bitoffsetreg>
 80087f0:	4fca      	ldr	r7, [pc, #808]	; (8008b1c <dwt_ioctl+0xe20>)
 80087f2:	2500      	movs	r5, #0
 80087f4:	462a      	mov	r2, r5
 80087f6:	4639      	mov	r1, r7
 80087f8:	4630      	mov	r0, r6
 80087fa:	f7fd fad3 	bl	8005da4 <dwt_read8bitoffsetreg>
 80087fe:	f010 0f01 	tst.w	r0, #1
 8008802:	d0f7      	beq.n	80087f4 <dwt_ioctl+0xaf8>
 8008804:	2200      	movs	r2, #0
 8008806:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 800880a:	4630      	mov	r0, r6
 800880c:	f7fd fab8 	bl	8005d80 <dwt_read16bitoffsetreg>
 8008810:	4605      	mov	r5, r0
 8008812:	2300      	movs	r3, #0
 8008814:	461a      	mov	r2, r3
 8008816:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800881a:	4630      	mov	r0, r6
 800881c:	f7fd fe89 	bl	8006532 <dwt_write8bitoffsetreg>
 8008820:	2300      	movs	r3, #0
 8008822:	461a      	mov	r2, r3
 8008824:	49bc      	ldr	r1, [pc, #752]	; (8008b18 <dwt_ioctl+0xe1c>)
 8008826:	4630      	mov	r0, r6
 8008828:	f7fd fe83 	bl	8006532 <dwt_write8bitoffsetreg>
 800882c:	4643      	mov	r3, r8
 800882e:	2200      	movs	r2, #0
 8008830:	49b8      	ldr	r1, [pc, #736]	; (8008b14 <dwt_ioctl+0xe18>)
 8008832:	4630      	mov	r0, r6
 8008834:	f7fd fe7d 	bl	8006532 <dwt_write8bitoffsetreg>
 8008838:	8025      	strh	r5, [r4, #0]
 800883a:	2500      	movs	r5, #0
 800883c:	f7ff bb08 	b.w	8007e50 <dwt_ioctl+0x154>
 8008840:	2c00      	cmp	r4, #0
 8008842:	f001 80b8 	beq.w	80099b6 <dwt_ioctl+0x1cba>
 8008846:	7923      	ldrb	r3, [r4, #4]
 8008848:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800884a:	7ad2      	ldrb	r2, [r2, #11]
 800884c:	1a9b      	subs	r3, r3, r2
 800884e:	ee07 3a90 	vmov	s15, r3
 8008852:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008856:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8008b20 <dwt_ioctl+0xe24>
 800885a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800885e:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 8008862:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008866:	edc4 7a00 	vstr	s15, [r4]
 800886a:	2500      	movs	r5, #0
 800886c:	f7ff baf0 	b.w	8007e50 <dwt_ioctl+0x154>
 8008870:	2c00      	cmp	r4, #0
 8008872:	f001 80a3 	beq.w	80099bc <dwt_ioctl+0x1cc0>
 8008876:	7923      	ldrb	r3, [r4, #4]
 8008878:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800887a:	7a92      	ldrb	r2, [r2, #10]
 800887c:	1a9b      	subs	r3, r3, r2
 800887e:	ee07 3a90 	vmov	s15, r3
 8008882:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008886:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 8008b24 <dwt_ioctl+0xe28>
 800888a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800888e:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8008892:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008896:	eddf 6aa4 	vldr	s13, [pc, #656]	; 8008b28 <dwt_ioctl+0xe2c>
 800889a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800889e:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 80088a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80088a6:	edc4 7a00 	vstr	s15, [r4]
 80088aa:	2500      	movs	r5, #0
 80088ac:	f7ff bad0 	b.w	8007e50 <dwt_ioctl+0x154>
 80088b0:	2c00      	cmp	r4, #0
 80088b2:	f001 8086 	beq.w	80099c2 <dwt_ioctl+0x1cc6>
 80088b6:	6824      	ldr	r4, [r4, #0]
 80088b8:	2101      	movs	r1, #1
 80088ba:	f7fe fb61 	bl	8006f80 <ull_enable_rf_tx>
 80088be:	4630      	mov	r0, r6
 80088c0:	f7fe fb92 	bl	8006fe8 <ull_enable_rftx_blocks>
 80088c4:	2101      	movs	r1, #1
 80088c6:	4630      	mov	r0, r6
 80088c8:	f7fd feb6 	bl	8006638 <ull_force_clocks>
 80088cc:	4621      	mov	r1, r4
 80088ce:	4630      	mov	r0, r6
 80088d0:	f7fe fda4 	bl	800741c <ull_repeated_frames>
 80088d4:	2500      	movs	r5, #0
 80088d6:	f7ff babb 	b.w	8007e50 <dwt_ioctl+0x154>
 80088da:	2500      	movs	r5, #0
 80088dc:	9500      	str	r5, [sp, #0]
 80088de:	23ef      	movs	r3, #239	; 0xef
 80088e0:	462a      	mov	r2, r5
 80088e2:	4992      	ldr	r1, [pc, #584]	; (8008b2c <dwt_ioctl+0xe30>)
 80088e4:	f7fe fcf4 	bl	80072d0 <dwt_modify8bitoffsetreg>
 80088e8:	2105      	movs	r1, #5
 80088ea:	4630      	mov	r0, r6
 80088ec:	f7fd fea4 	bl	8006638 <ull_force_clocks>
 80088f0:	2101      	movs	r1, #1
 80088f2:	4630      	mov	r0, r6
 80088f4:	f7fe fa18 	bl	8006d28 <ull_disable_rf_tx>
 80088f8:	4630      	mov	r0, r6
 80088fa:	f7fe fa0b 	bl	8006d14 <ull_disable_rftx_blocks>
 80088fe:	f7ff baa7 	b.w	8007e50 <dwt_ioctl+0x154>
 8008902:	2500      	movs	r5, #0
 8008904:	9500      	str	r5, [sp, #0]
 8008906:	23ef      	movs	r3, #239	; 0xef
 8008908:	462a      	mov	r2, r5
 800890a:	4988      	ldr	r1, [pc, #544]	; (8008b2c <dwt_ioctl+0xe30>)
 800890c:	f7fe fce0 	bl	80072d0 <dwt_modify8bitoffsetreg>
 8008910:	f7ff ba9e 	b.w	8007e50 <dwt_ioctl+0x154>
 8008914:	2c00      	cmp	r4, #0
 8008916:	f001 8057 	beq.w	80099c8 <dwt_ioctl+0x1ccc>
 800891a:	6821      	ldr	r1, [r4, #0]
 800891c:	f7fe fd7e 	bl	800741c <ull_repeated_frames>
 8008920:	2500      	movs	r5, #0
 8008922:	f7ff ba95 	b.w	8007e50 <dwt_ioctl+0x154>
 8008926:	2200      	movs	r2, #0
 8008928:	4981      	ldr	r1, [pc, #516]	; (8008b30 <dwt_ioctl+0xe34>)
 800892a:	f7fd fa29 	bl	8005d80 <dwt_read16bitoffsetreg>
 800892e:	f3c0 050b 	ubfx	r5, r0, #0, #12
 8008932:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8008936:	bf18      	it	ne
 8008938:	f445 4570 	orrne.w	r5, r5, #61440	; 0xf000
 800893c:	b22d      	sxth	r5, r5
 800893e:	8025      	strh	r5, [r4, #0]
 8008940:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8008942:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8008946:	1aed      	subs	r5, r5, r3
 8008948:	f7ff ba82 	b.w	8007e50 <dwt_ioctl+0x154>
 800894c:	2c00      	cmp	r4, #0
 800894e:	f001 806d 	beq.w	8009a2c <dwt_ioctl+0x1d30>
 8008952:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8008956:	7a23      	ldrb	r3, [r4, #8]
 8008958:	f899 2013 	ldrb.w	r2, [r9, #19]
 800895c:	2aff      	cmp	r2, #255	; 0xff
 800895e:	f000 813f 	beq.w	8008be0 <dwt_ioctl+0xee4>
 8008962:	2b00      	cmp	r3, #0
 8008964:	d136      	bne.n	80089d4 <dwt_ioctl+0xcd8>
 8008966:	f8d9 3000 	ldr.w	r3, [r9]
 800896a:	9300      	str	r3, [sp, #0]
 800896c:	230c      	movs	r3, #12
 800896e:	2200      	movs	r2, #0
 8008970:	4970      	ldr	r1, [pc, #448]	; (8008b34 <dwt_ioctl+0xe38>)
 8008972:	f7fd fdd3 	bl	800651c <dwt_writetodevice>
 8008976:	f899 300c 	ldrb.w	r3, [r9, #12]
 800897a:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 800897e:	18d1      	adds	r1, r2, r3
 8008980:	f899 2012 	ldrb.w	r2, [r9, #18]
 8008984:	2a00      	cmp	r2, #0
 8008986:	d15f      	bne.n	8008a48 <dwt_ioctl+0xd4c>
 8008988:	f899 0010 	ldrb.w	r0, [r9, #16]
 800898c:	2800      	cmp	r0, #0
 800898e:	bf0b      	itete	eq
 8008990:	227f      	moveq	r2, #127	; 0x7f
 8008992:	f44f 6280 	movne.w	r2, #1024	; 0x400
 8008996:	f44f 15b0 	moveq.w	r5, #1441792	; 0x160000
 800899a:	f44f 15a0 	movne.w	r5, #1310720	; 0x140000
 800899e:	f899 0013 	ldrb.w	r0, [r9, #19]
 80089a2:	1a12      	subs	r2, r2, r0
 80089a4:	3a02      	subs	r2, #2
 80089a6:	4291      	cmp	r1, r2
 80089a8:	f200 8120 	bhi.w	8008bec <dwt_ioctl+0xef0>
 80089ac:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80089b0:	9200      	str	r2, [sp, #0]
 80089b2:	2200      	movs	r2, #0
 80089b4:	4629      	mov	r1, r5
 80089b6:	4630      	mov	r0, r6
 80089b8:	f7fd fdb0 	bl	800651c <dwt_writetodevice>
 80089bc:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 80089c0:	f899 200c 	ldrb.w	r2, [r9, #12]
 80089c4:	f8d9 1008 	ldr.w	r1, [r9, #8]
 80089c8:	9100      	str	r1, [sp, #0]
 80089ca:	4629      	mov	r1, r5
 80089cc:	4630      	mov	r0, r6
 80089ce:	f7fd fda5 	bl	800651c <dwt_writetodevice>
 80089d2:	e04a      	b.n	8008a6a <dwt_ioctl+0xd6e>
 80089d4:	f8d9 3000 	ldr.w	r3, [r9]
 80089d8:	f8b9 100e 	ldrh.w	r1, [r9, #14]
 80089dc:	7a9a      	ldrb	r2, [r3, #10]
 80089de:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
 80089e2:	7a5a      	ldrb	r2, [r3, #9]
 80089e4:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
 80089e8:	7a1a      	ldrb	r2, [r3, #8]
 80089ea:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
 80089ee:	79da      	ldrb	r2, [r3, #7]
 80089f0:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 80089f4:	799a      	ldrb	r2, [r3, #6]
 80089f6:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 80089fa:	795a      	ldrb	r2, [r3, #5]
 80089fc:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
 8008a00:	791a      	ldrb	r2, [r3, #4]
 8008a02:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 8008a06:	78da      	ldrb	r2, [r3, #3]
 8008a08:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
 8008a0c:	789a      	ldrb	r2, [r3, #2]
 8008a0e:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
 8008a12:	785a      	ldrb	r2, [r3, #1]
 8008a14:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
 8008a18:	781a      	ldrb	r2, [r3, #0]
 8008a1a:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 8008a1e:	2200      	movs	r2, #0
 8008a20:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
 8008a24:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 8008a28:	0a09      	lsrs	r1, r1, #8
 8008a2a:	f88d 103d 	strb.w	r1, [sp, #61]	; 0x3d
 8008a2e:	7b19      	ldrb	r1, [r3, #12]
 8008a30:	f88d 103e 	strb.w	r1, [sp, #62]	; 0x3e
 8008a34:	7adb      	ldrb	r3, [r3, #11]
 8008a36:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8008a3a:	ab0c      	add	r3, sp, #48	; 0x30
 8008a3c:	9300      	str	r3, [sp, #0]
 8008a3e:	2310      	movs	r3, #16
 8008a40:	493c      	ldr	r1, [pc, #240]	; (8008b34 <dwt_ioctl+0xe38>)
 8008a42:	f7fd fd6b 	bl	800651c <dwt_writetodevice>
 8008a46:	e796      	b.n	8008976 <dwt_ioctl+0xc7a>
 8008a48:	2a01      	cmp	r2, #1
 8008a4a:	f040 80cc 	bne.w	8008be6 <dwt_ioctl+0xeea>
 8008a4e:	f899 3011 	ldrb.w	r3, [r9, #17]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8008a58:	bf08      	it	eq
 8008a5a:	237f      	moveq	r3, #127	; 0x7f
 8008a5c:	f899 2013 	ldrb.w	r2, [r9, #19]
 8008a60:	1a9b      	subs	r3, r3, r2
 8008a62:	3b02      	subs	r3, #2
 8008a64:	4299      	cmp	r1, r3
 8008a66:	f200 80c4 	bhi.w	8008bf2 <dwt_ioctl+0xef6>
 8008a6a:	f899 2010 	ldrb.w	r2, [r9, #16]
 8008a6e:	1e53      	subs	r3, r2, #1
 8008a70:	b2db      	uxtb	r3, r3
 8008a72:	2b01      	cmp	r3, #1
 8008a74:	d940      	bls.n	8008af8 <dwt_ioctl+0xdfc>
 8008a76:	f899 3011 	ldrb.w	r3, [r9, #17]
 8008a7a:	1e59      	subs	r1, r3, #1
 8008a7c:	b2c9      	uxtb	r1, r1
 8008a7e:	2901      	cmp	r1, #1
 8008a80:	d964      	bls.n	8008b4c <dwt_ioctl+0xe50>
 8008a82:	2b04      	cmp	r3, #4
 8008a84:	d069      	beq.n	8008b5a <dwt_ioctl+0xe5e>
 8008a86:	ea42 3343 	orr.w	r3, r2, r3, lsl #13
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	492a      	ldr	r1, [pc, #168]	; (8008b38 <dwt_ioctl+0xe3c>)
 8008a8e:	4630      	mov	r0, r6
 8008a90:	f7fd fea2 	bl	80067d8 <dwt_write32bitoffsetreg>
 8008a94:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 8008a98:	4a28      	ldr	r2, [pc, #160]	; (8008b3c <dwt_ioctl+0xe40>)
 8008a9a:	ea02 12c3 	and.w	r2, r2, r3, lsl #7
 8008a9e:	f899 300c 	ldrb.w	r3, [r9, #12]
 8008aa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	4925      	ldr	r1, [pc, #148]	; (8008b40 <dwt_ioctl+0xe44>)
 8008aac:	4630      	mov	r0, r6
 8008aae:	f7fd fe93 	bl	80067d8 <dwt_write32bitoffsetreg>
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	4923      	ldr	r1, [pc, #140]	; (8008b44 <dwt_ioctl+0xe48>)
 8008ab8:	4630      	mov	r0, r6
 8008aba:	f7fd fd3a 	bl	8006532 <dwt_write8bitoffsetreg>
 8008abe:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8008b48 <dwt_ioctl+0xe4c>
 8008ac2:	2700      	movs	r7, #0
 8008ac4:	463a      	mov	r2, r7
 8008ac6:	4641      	mov	r1, r8
 8008ac8:	4630      	mov	r0, r6
 8008aca:	f7fd f96b 	bl	8005da4 <dwt_read8bitoffsetreg>
 8008ace:	f010 0f05 	tst.w	r0, #5
 8008ad2:	d0f7      	beq.n	8008ac4 <dwt_ioctl+0xdc8>
 8008ad4:	4605      	mov	r5, r0
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	2200      	movs	r2, #0
 8008ada:	491b      	ldr	r1, [pc, #108]	; (8008b48 <dwt_ioctl+0xe4c>)
 8008adc:	4630      	mov	r0, r6
 8008ade:	f7fd fd28 	bl	8006532 <dwt_write8bitoffsetreg>
 8008ae2:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 8008ae6:	f025 0330 	bic.w	r3, r5, #48	; 0x30
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	d042      	beq.n	8008b74 <dwt_ioctl+0xe78>
 8008aee:	b26b      	sxtb	r3, r5
 8008af0:	7023      	strb	r3, [r4, #0]
 8008af2:	2500      	movs	r5, #0
 8008af4:	f7ff b9ac 	b.w	8007e50 <dwt_ioctl+0x154>
 8008af8:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8008afa:	7bdb      	ldrb	r3, [r3, #15]
 8008afc:	2b03      	cmp	r3, #3
 8008afe:	f001 802e 	beq.w	8009b5e <dwt_ioctl+0x1e62>
 8008b02:	f899 3011 	ldrb.w	r3, [r9, #17]
 8008b06:	1e5a      	subs	r2, r3, #1
 8008b08:	b2d2      	uxtb	r2, r2
 8008b0a:	2a01      	cmp	r2, #1
 8008b0c:	d92c      	bls.n	8008b68 <dwt_ioctl+0xe6c>
 8008b0e:	2201      	movs	r2, #1
 8008b10:	e7b7      	b.n	8008a82 <dwt_ioctl+0xd86>
 8008b12:	bf00      	nop
 8008b14:	00070048 	.word	0x00070048
 8008b18:	00070034 	.word	0x00070034
 8008b1c:	00080004 	.word	0x00080004
 8008b20:	3f866666 	.word	0x3f866666
 8008b24:	3ecccccd 	.word	0x3ecccccd
 8008b28:	437f0000 	.word	0x437f0000
 8008b2c:	000f0024 	.word	0x000f0024
 8008b30:	00020008 	.word	0x00020008
 8008b34:	00010034 	.word	0x00010034
 8008b38:	00010044 	.word	0x00010044
 8008b3c:	0001ff80 	.word	0x0001ff80
 8008b40:	00010048 	.word	0x00010048
 8008b44:	0001004c 	.word	0x0001004c
 8008b48:	00010050 	.word	0x00010050
 8008b4c:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8008b4e:	7bdb      	ldrb	r3, [r3, #15]
 8008b50:	2b03      	cmp	r3, #3
 8008b52:	bf0c      	ite	eq
 8008b54:	2302      	moveq	r3, #2
 8008b56:	2301      	movne	r3, #1
 8008b58:	e795      	b.n	8008a86 <dwt_ioctl+0xd8a>
 8008b5a:	f8b9 100e 	ldrh.w	r1, [r9, #14]
 8008b5e:	2910      	cmp	r1, #16
 8008b60:	d991      	bls.n	8008a86 <dwt_ioctl+0xd8a>
 8008b62:	f06f 0303 	mvn.w	r3, #3
 8008b66:	e7c3      	b.n	8008af0 <dwt_ioctl+0xdf4>
 8008b68:	2201      	movs	r2, #1
 8008b6a:	4613      	mov	r3, r2
 8008b6c:	e78b      	b.n	8008a86 <dwt_ioctl+0xd8a>
 8008b6e:	2202      	movs	r2, #2
 8008b70:	4613      	mov	r3, r2
 8008b72:	e788      	b.n	8008a86 <dwt_ioctl+0xd8a>
 8008b74:	f899 3012 	ldrb.w	r3, [r9, #18]
 8008b78:	2b01      	cmp	r3, #1
 8008b7a:	d1b8      	bne.n	8008aee <dwt_ioctl+0xdf2>
 8008b7c:	f899 2011 	ldrb.w	r2, [r9, #17]
 8008b80:	1e53      	subs	r3, r2, #1
 8008b82:	b2db      	uxtb	r3, r3
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	d91b      	bls.n	8008bc0 <dwt_ioctl+0xec4>
 8008b88:	2a03      	cmp	r2, #3
 8008b8a:	bf0c      	ite	eq
 8008b8c:	f44f 17a0 	moveq.w	r7, #1310720	; 0x140000
 8008b90:	f44f 17b0 	movne.w	r7, #1441792	; 0x160000
 8008b94:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8008b98:	b112      	cbz	r2, 8008ba0 <dwt_ioctl+0xea4>
 8008b9a:	f899 300c 	ldrb.w	r3, [r9, #12]
 8008b9e:	b9c3      	cbnz	r3, 8008bd2 <dwt_ioctl+0xed6>
 8008ba0:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8008ba4:	2900      	cmp	r1, #0
 8008ba6:	d0a2      	beq.n	8008aee <dwt_ioctl+0xdf2>
 8008ba8:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d09e      	beq.n	8008aee <dwt_ioctl+0xdf2>
 8008bb0:	f899 200c 	ldrb.w	r2, [r9, #12]
 8008bb4:	9100      	str	r1, [sp, #0]
 8008bb6:	4639      	mov	r1, r7
 8008bb8:	4630      	mov	r0, r6
 8008bba:	f7fd f8c1 	bl	8005d40 <dwt_readfromdevice>
 8008bbe:	e796      	b.n	8008aee <dwt_ioctl+0xdf2>
 8008bc0:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8008bc2:	7bdb      	ldrb	r3, [r3, #15]
 8008bc4:	2b03      	cmp	r3, #3
 8008bc6:	bf0c      	ite	eq
 8008bc8:	f44f 1798 	moveq.w	r7, #1245184	; 0x130000
 8008bcc:	f44f 1790 	movne.w	r7, #1179648	; 0x120000
 8008bd0:	e7e0      	b.n	8008b94 <dwt_ioctl+0xe98>
 8008bd2:	9200      	str	r2, [sp, #0]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	4639      	mov	r1, r7
 8008bd8:	4630      	mov	r0, r6
 8008bda:	f7fd f8b1 	bl	8005d40 <dwt_readfromdevice>
 8008bde:	e7df      	b.n	8008ba0 <dwt_ioctl+0xea4>
 8008be0:	f06f 0302 	mvn.w	r3, #2
 8008be4:	e784      	b.n	8008af0 <dwt_ioctl+0xdf4>
 8008be6:	f06f 0301 	mvn.w	r3, #1
 8008bea:	e781      	b.n	8008af0 <dwt_ioctl+0xdf4>
 8008bec:	f04f 33ff 	mov.w	r3, #4294967295
 8008bf0:	e77e      	b.n	8008af0 <dwt_ioctl+0xdf4>
 8008bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8008bf6:	e77b      	b.n	8008af0 <dwt_ioctl+0xdf4>
 8008bf8:	7a23      	ldrb	r3, [r4, #8]
 8008bfa:	79e1      	ldrb	r1, [r4, #7]
 8008bfc:	79a2      	ldrb	r2, [r4, #6]
 8008bfe:	00d2      	lsls	r2, r2, #3
 8008c00:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8008c04:	4313      	orrs	r3, r2
 8008c06:	7962      	ldrb	r2, [r4, #5]
 8008c08:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8008c0c:	7922      	ldrb	r2, [r4, #4]
 8008c0e:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8008c12:	78e2      	ldrb	r2, [r4, #3]
 8008c14:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008c18:	78a2      	ldrb	r2, [r4, #2]
 8008c1a:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 8008c1e:	7862      	ldrb	r2, [r4, #1]
 8008c20:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	2200      	movs	r2, #0
 8008c28:	49cd      	ldr	r1, [pc, #820]	; (8008f60 <dwt_ioctl+0x1264>)
 8008c2a:	f7fd fcd4 	bl	80065d6 <dwt_write16bitoffsetreg>
 8008c2e:	2500      	movs	r5, #0
 8008c30:	f7ff b90e 	b.w	8007e50 <dwt_ioctl+0x154>
 8008c34:	2c00      	cmp	r4, #0
 8008c36:	f000 86fc 	beq.w	8009a32 <dwt_ioctl+0x1d36>
 8008c3a:	7863      	ldrb	r3, [r4, #1]
 8008c3c:	b133      	cbz	r3, 8008c4c <dwt_ioctl+0xf50>
 8008c3e:	085b      	lsrs	r3, r3, #1
 8008c40:	3b01      	subs	r3, #1
 8008c42:	b2db      	uxtb	r3, r3
 8008c44:	7023      	strb	r3, [r4, #0]
 8008c46:	2500      	movs	r5, #0
 8008c48:	f7ff b902 	b.w	8007e50 <dwt_ioctl+0x154>
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	e7f9      	b.n	8008c44 <dwt_ioctl+0xf48>
 8008c50:	2200      	movs	r2, #0
 8008c52:	49c4      	ldr	r1, [pc, #784]	; (8008f64 <dwt_ioctl+0x1268>)
 8008c54:	f7fd f87e 	bl	8005d54 <dwt_read32bitoffsetreg>
 8008c58:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8008c5c:	8023      	strh	r3, [r4, #0]
 8008c5e:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8008c62:	8060      	strh	r0, [r4, #2]
 8008c64:	2200      	movs	r2, #0
 8008c66:	49c0      	ldr	r1, [pc, #768]	; (8008f68 <dwt_ioctl+0x126c>)
 8008c68:	4630      	mov	r0, r6
 8008c6a:	f7fd f873 	bl	8005d54 <dwt_read32bitoffsetreg>
 8008c6e:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8008c72:	80a3      	strh	r3, [r4, #4]
 8008c74:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8008c78:	80e0      	strh	r0, [r4, #6]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	49bb      	ldr	r1, [pc, #748]	; (8008f6c <dwt_ioctl+0x1270>)
 8008c7e:	4630      	mov	r0, r6
 8008c80:	f7fd f868 	bl	8005d54 <dwt_read32bitoffsetreg>
 8008c84:	7220      	strb	r0, [r4, #8]
 8008c86:	0c00      	lsrs	r0, r0, #16
 8008c88:	7260      	strb	r0, [r4, #9]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	49b8      	ldr	r1, [pc, #736]	; (8008f70 <dwt_ioctl+0x1274>)
 8008c8e:	4630      	mov	r0, r6
 8008c90:	f7fd f860 	bl	8005d54 <dwt_read32bitoffsetreg>
 8008c94:	f3c0 430b 	ubfx	r3, r0, #16, #12
 8008c98:	81a3      	strh	r3, [r4, #12]
 8008c9a:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8008c9e:	8160      	strh	r0, [r4, #10]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	49b4      	ldr	r1, [pc, #720]	; (8008f74 <dwt_ioctl+0x1278>)
 8008ca4:	4630      	mov	r0, r6
 8008ca6:	f7fd f855 	bl	8005d54 <dwt_read32bitoffsetreg>
 8008caa:	f3c0 430b 	ubfx	r3, r0, #16, #12
 8008cae:	f8a4 300f 	strh.w	r3, [r4, #15]
 8008cb2:	73a0      	strb	r0, [r4, #14]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	49b0      	ldr	r1, [pc, #704]	; (8008f78 <dwt_ioctl+0x127c>)
 8008cb8:	4630      	mov	r0, r6
 8008cba:	f7fd f84b 	bl	8005d54 <dwt_read32bitoffsetreg>
 8008cbe:	7460      	strb	r0, [r4, #17]
 8008cc0:	0c00      	lsrs	r0, r0, #16
 8008cc2:	74a0      	strb	r0, [r4, #18]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	49ad      	ldr	r1, [pc, #692]	; (8008f7c <dwt_ioctl+0x1280>)
 8008cc8:	4630      	mov	r0, r6
 8008cca:	f7fd f843 	bl	8005d54 <dwt_read32bitoffsetreg>
 8008cce:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8008cd2:	f8a4 0013 	strh.w	r0, [r4, #19]
 8008cd6:	2500      	movs	r5, #0
 8008cd8:	7565      	strb	r5, [r4, #21]
 8008cda:	75a5      	strb	r5, [r4, #22]
 8008cdc:	462a      	mov	r2, r5
 8008cde:	49a8      	ldr	r1, [pc, #672]	; (8008f80 <dwt_ioctl+0x1284>)
 8008ce0:	4630      	mov	r0, r6
 8008ce2:	f7fd f85f 	bl	8005da4 <dwt_read8bitoffsetreg>
 8008ce6:	75e0      	strb	r0, [r4, #23]
 8008ce8:	f7ff b8b2 	b.w	8007e50 <dwt_ioctl+0x154>
 8008cec:	4611      	mov	r1, r2
 8008cee:	f7fd fc5f 	bl	80065b0 <ull_configeventcounters>
 8008cf2:	2500      	movs	r5, #0
 8008cf4:	f7ff b8ac 	b.w	8007e50 <dwt_ioctl+0x154>
 8008cf8:	2c00      	cmp	r4, #0
 8008cfa:	f000 869d 	beq.w	8009a38 <dwt_ioctl+0x1d3c>
 8008cfe:	8823      	ldrh	r3, [r4, #0]
 8008d00:	2200      	movs	r2, #0
 8008d02:	49a0      	ldr	r1, [pc, #640]	; (8008f84 <dwt_ioctl+0x1288>)
 8008d04:	f7fd fc67 	bl	80065d6 <dwt_write16bitoffsetreg>
 8008d08:	2500      	movs	r5, #0
 8008d0a:	f7ff b8a1 	b.w	8007e50 <dwt_ioctl+0x154>
 8008d0e:	2c00      	cmp	r4, #0
 8008d10:	f000 8695 	beq.w	8009a3e <dwt_ioctl+0x1d42>
 8008d14:	6825      	ldr	r5, [r4, #0]
 8008d16:	b935      	cbnz	r5, 8008d26 <dwt_ioctl+0x102a>
 8008d18:	2300      	movs	r3, #0
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	499a      	ldr	r1, [pc, #616]	; (8008f88 <dwt_ioctl+0x128c>)
 8008d1e:	f7fd fc5a 	bl	80065d6 <dwt_write16bitoffsetreg>
 8008d22:	f7ff b895 	b.w	8007e50 <dwt_ioctl+0x154>
 8008d26:	7962      	ldrb	r2, [r4, #5]
 8008d28:	7923      	ldrb	r3, [r4, #4]
 8008d2a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008d2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008d32:	2200      	movs	r2, #0
 8008d34:	4994      	ldr	r1, [pc, #592]	; (8008f88 <dwt_ioctl+0x128c>)
 8008d36:	f7fd fc4e 	bl	80065d6 <dwt_write16bitoffsetreg>
 8008d3a:	2500      	movs	r5, #0
 8008d3c:	f7ff b888 	b.w	8007e50 <dwt_ioctl+0x154>
 8008d40:	2c00      	cmp	r4, #0
 8008d42:	f000 867f 	beq.w	8009a44 <dwt_ioctl+0x1d48>
 8008d46:	6823      	ldr	r3, [r4, #0]
 8008d48:	b94b      	cbnz	r3, 8008d5e <dwt_ioctl+0x1062>
 8008d4a:	2500      	movs	r5, #0
 8008d4c:	9500      	str	r5, [sp, #0]
 8008d4e:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 8008d52:	462a      	mov	r2, r5
 8008d54:	2110      	movs	r1, #16
 8008d56:	f7fe fc6d 	bl	8007634 <dwt_modify16bitoffsetreg>
 8008d5a:	f7ff b879 	b.w	8007e50 <dwt_ioctl+0x154>
 8008d5e:	2200      	movs	r2, #0
 8008d60:	2134      	movs	r1, #52	; 0x34
 8008d62:	f7fd fd39 	bl	80067d8 <dwt_write32bitoffsetreg>
 8008d66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d6a:	9300      	str	r3, [sp, #0]
 8008d6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008d70:	2200      	movs	r2, #0
 8008d72:	2110      	movs	r1, #16
 8008d74:	4630      	mov	r0, r6
 8008d76:	f7fe fc5d 	bl	8007634 <dwt_modify16bitoffsetreg>
 8008d7a:	2500      	movs	r5, #0
 8008d7c:	f7ff b868 	b.w	8007e50 <dwt_ioctl+0x154>
 8008d80:	2c00      	cmp	r4, #0
 8008d82:	f000 8662 	beq.w	8009a4a <dwt_ioctl+0x1d4e>
 8008d86:	8861      	ldrh	r1, [r4, #2]
 8008d88:	f7fd fca2 	bl	80066d0 <ull_aon_read>
 8008d8c:	7020      	strb	r0, [r4, #0]
 8008d8e:	2500      	movs	r5, #0
 8008d90:	f7ff b85e 	b.w	8007e50 <dwt_ioctl+0x154>
 8008d94:	2c00      	cmp	r4, #0
 8008d96:	f000 865b 	beq.w	8009a50 <dwt_ioctl+0x1d54>
 8008d9a:	78a2      	ldrb	r2, [r4, #2]
 8008d9c:	8821      	ldrh	r1, [r4, #0]
 8008d9e:	f7fd fcb7 	bl	8006710 <ull_aon_write>
 8008da2:	2500      	movs	r5, #0
 8008da4:	f7ff b854 	b.w	8007e50 <dwt_ioctl+0x154>
 8008da8:	4b78      	ldr	r3, [pc, #480]	; (8008f8c <dwt_ioctl+0x1290>)
 8008daa:	4a79      	ldr	r2, [pc, #484]	; (8008f90 <dwt_ioctl+0x1294>)
 8008dac:	2d01      	cmp	r5, #1
 8008dae:	bf18      	it	ne
 8008db0:	4613      	movne	r3, r2
 8008db2:	2d01      	cmp	r5, #1
 8008db4:	4977      	ldr	r1, [pc, #476]	; (8008f94 <dwt_ioctl+0x1298>)
 8008db6:	bf18      	it	ne
 8008db8:	f04f 110c 	movne.w	r1, #786444	; 0xc000c
 8008dbc:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8008dbe:	7bd2      	ldrb	r2, [r2, #15]
 8008dc0:	2a01      	cmp	r2, #1
 8008dc2:	d012      	beq.n	8008dea <dwt_ioctl+0x10ee>
 8008dc4:	2a03      	cmp	r2, #3
 8008dc6:	d117      	bne.n	8008df8 <dwt_ioctl+0x10fc>
 8008dc8:	f5a2 12c0 	sub.w	r2, r2, #1572864	; 0x180000
 8008dcc:	3a01      	subs	r2, #1
 8008dce:	441a      	add	r2, r3
 8008dd0:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8008dd4:	f7fc ffd4 	bl	8005d80 <dwt_read16bitoffsetreg>
 8008dd8:	09c0      	lsrs	r0, r0, #7
 8008dda:	8020      	strh	r0, [r4, #0]
 8008ddc:	8825      	ldrh	r5, [r4, #0]
 8008dde:	3500      	adds	r5, #0
 8008de0:	bf18      	it	ne
 8008de2:	2501      	movne	r5, #1
 8008de4:	426d      	negs	r5, r5
 8008de6:	f7ff b833 	b.w	8007e50 <dwt_ioctl+0x154>
 8008dea:	2202      	movs	r2, #2
 8008dec:	4619      	mov	r1, r3
 8008dee:	f7fc ffc7 	bl	8005d80 <dwt_read16bitoffsetreg>
 8008df2:	09c0      	lsrs	r0, r0, #7
 8008df4:	8020      	strh	r0, [r4, #0]
 8008df6:	e7f1      	b.n	8008ddc <dwt_ioctl+0x10e0>
 8008df8:	2202      	movs	r2, #2
 8008dfa:	f7fc ffc1 	bl	8005d80 <dwt_read16bitoffsetreg>
 8008dfe:	09c0      	lsrs	r0, r0, #7
 8008e00:	8020      	strh	r0, [r4, #0]
 8008e02:	e7eb      	b.n	8008ddc <dwt_ioctl+0x10e0>
 8008e04:	2c00      	cmp	r4, #0
 8008e06:	f000 8626 	beq.w	8009a56 <dwt_ioctl+0x1d5a>
 8008e0a:	7821      	ldrb	r1, [r4, #0]
 8008e0c:	f7fe fc48 	bl	80076a0 <ull_setleds>
 8008e10:	2500      	movs	r5, #0
 8008e12:	f7ff b81d 	b.w	8007e50 <dwt_ioctl+0x154>
 8008e16:	4611      	mov	r1, r2
 8008e18:	f7fe fb18 	bl	800744c <ull_setdwstate>
 8008e1c:	2500      	movs	r5, #0
 8008e1e:	f7ff b817 	b.w	8007e50 <dwt_ioctl+0x154>
 8008e22:	9400      	str	r4, [sp, #0]
 8008e24:	2304      	movs	r3, #4
 8008e26:	2200      	movs	r2, #0
 8008e28:	211c      	movs	r1, #28
 8008e2a:	f7fc ff89 	bl	8005d40 <dwt_readfromdevice>
 8008e2e:	2500      	movs	r5, #0
 8008e30:	f7ff b80e 	b.w	8007e50 <dwt_ioctl+0x154>
 8008e34:	2c00      	cmp	r4, #0
 8008e36:	f000 8611 	beq.w	8009a5c <dwt_ioctl+0x1d60>
 8008e3a:	2202      	movs	r2, #2
 8008e3c:	2144      	movs	r1, #68	; 0x44
 8008e3e:	f7fc ff9f 	bl	8005d80 <dwt_read16bitoffsetreg>
 8008e42:	f3c0 2000 	ubfx	r0, r0, #8, #1
 8008e46:	7020      	strb	r0, [r4, #0]
 8008e48:	2500      	movs	r5, #0
 8008e4a:	f7ff b801 	b.w	8007e50 <dwt_ioctl+0x154>
 8008e4e:	2c00      	cmp	r4, #0
 8008e50:	f000 8607 	beq.w	8009a62 <dwt_ioctl+0x1d66>
 8008e54:	2200      	movs	r2, #0
 8008e56:	2144      	movs	r1, #68	; 0x44
 8008e58:	f7fc ffa4 	bl	8005da4 <dwt_read8bitoffsetreg>
 8008e5c:	f000 0001 	and.w	r0, r0, #1
 8008e60:	7020      	strb	r0, [r4, #0]
 8008e62:	2500      	movs	r5, #0
 8008e64:	f7fe bff4 	b.w	8007e50 <dwt_ioctl+0x154>
 8008e68:	2c00      	cmp	r4, #0
 8008e6a:	f000 85fd 	beq.w	8009a68 <dwt_ioctl+0x1d6c>
 8008e6e:	8862      	ldrh	r2, [r4, #2]
 8008e70:	8821      	ldrh	r1, [r4, #0]
 8008e72:	f7fe fb49 	bl	8007508 <ull_configureframefilter>
 8008e76:	2500      	movs	r5, #0
 8008e78:	f7fe bfea 	b.w	8007e50 <dwt_ioctl+0x154>
 8008e7c:	9400      	str	r4, [sp, #0]
 8008e7e:	2308      	movs	r3, #8
 8008e80:	2200      	movs	r2, #0
 8008e82:	2104      	movs	r1, #4
 8008e84:	f7fd fb4a 	bl	800651c <dwt_writetodevice>
 8008e88:	2500      	movs	r5, #0
 8008e8a:	f7fe bfe1 	b.w	8007e50 <dwt_ioctl+0x154>
 8008e8e:	9400      	str	r4, [sp, #0]
 8008e90:	2308      	movs	r3, #8
 8008e92:	2200      	movs	r2, #0
 8008e94:	2104      	movs	r1, #4
 8008e96:	f7fc ff53 	bl	8005d40 <dwt_readfromdevice>
 8008e9a:	2500      	movs	r5, #0
 8008e9c:	f7fe bfd8 	b.w	8007e50 <dwt_ioctl+0x154>
 8008ea0:	2c00      	cmp	r4, #0
 8008ea2:	f000 85e4 	beq.w	8009a6e <dwt_ioctl+0x1d72>
 8008ea6:	8823      	ldrh	r3, [r4, #0]
 8008ea8:	2202      	movs	r2, #2
 8008eaa:	210c      	movs	r1, #12
 8008eac:	f7fd fb93 	bl	80065d6 <dwt_write16bitoffsetreg>
 8008eb0:	2500      	movs	r5, #0
 8008eb2:	f7fe bfcd 	b.w	8007e50 <dwt_ioctl+0x154>
 8008eb6:	2c00      	cmp	r4, #0
 8008eb8:	f000 85dc 	beq.w	8009a74 <dwt_ioctl+0x1d78>
 8008ebc:	8823      	ldrh	r3, [r4, #0]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	210c      	movs	r1, #12
 8008ec2:	f7fd fb88 	bl	80065d6 <dwt_write16bitoffsetreg>
 8008ec6:	2500      	movs	r5, #0
 8008ec8:	f7fe bfc2 	b.w	8007e50 <dwt_ioctl+0x154>
 8008ecc:	4621      	mov	r1, r4
 8008ece:	f7fd fb03 	bl	80064d8 <ull_readrxtimestamp>
 8008ed2:	2500      	movs	r5, #0
 8008ed4:	f7fe bfbc 	b.w	8007e50 <dwt_ioctl+0x154>
 8008ed8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8008eda:	7bdb      	ldrb	r3, [r3, #15]
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d00b      	beq.n	8008ef8 <dwt_ioctl+0x11fc>
 8008ee0:	2b03      	cmp	r3, #3
 8008ee2:	d112      	bne.n	8008f0a <dwt_ioctl+0x120e>
 8008ee4:	9400      	str	r4, [sp, #0]
 8008ee6:	2305      	movs	r3, #5
 8008ee8:	2220      	movs	r2, #32
 8008eea:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8008eee:	f7fc ff27 	bl	8005d40 <dwt_readfromdevice>
 8008ef2:	2500      	movs	r5, #0
 8008ef4:	f7fe bfac 	b.w	8007e50 <dwt_ioctl+0x154>
 8008ef8:	9400      	str	r4, [sp, #0]
 8008efa:	2305      	movs	r3, #5
 8008efc:	2200      	movs	r2, #0
 8008efe:	4926      	ldr	r1, [pc, #152]	; (8008f98 <dwt_ioctl+0x129c>)
 8008f00:	f7fc ff1e 	bl	8005d40 <dwt_readfromdevice>
 8008f04:	2500      	movs	r5, #0
 8008f06:	f7fe bfa3 	b.w	8007e50 <dwt_ioctl+0x154>
 8008f0a:	9400      	str	r4, [sp, #0]
 8008f0c:	2305      	movs	r3, #5
 8008f0e:	2200      	movs	r2, #0
 8008f10:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 8008f14:	f7fc ff14 	bl	8005d40 <dwt_readfromdevice>
 8008f18:	2500      	movs	r5, #0
 8008f1a:	f7fe bf99 	b.w	8007e50 <dwt_ioctl+0x154>
 8008f1e:	2500      	movs	r5, #0
 8008f20:	f804 5b01 	strb.w	r5, [r4], #1
 8008f24:	9400      	str	r4, [sp, #0]
 8008f26:	2304      	movs	r3, #4
 8008f28:	462a      	mov	r2, r5
 8008f2a:	2170      	movs	r1, #112	; 0x70
 8008f2c:	f7fc ff08 	bl	8005d40 <dwt_readfromdevice>
 8008f30:	f7fe bf8e 	b.w	8007e50 <dwt_ioctl+0x154>
 8008f34:	2c00      	cmp	r4, #0
 8008f36:	f000 85a0 	beq.w	8009a7a <dwt_ioctl+0x1d7e>
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	2164      	movs	r1, #100	; 0x64
 8008f3e:	f7fc ff09 	bl	8005d54 <dwt_read32bitoffsetreg>
 8008f42:	6020      	str	r0, [r4, #0]
 8008f44:	2500      	movs	r5, #0
 8008f46:	f7fe bf83 	b.w	8007e50 <dwt_ioctl+0x154>
 8008f4a:	2c00      	cmp	r4, #0
 8008f4c:	f000 8598 	beq.w	8009a80 <dwt_ioctl+0x1d84>
 8008f50:	2200      	movs	r2, #0
 8008f52:	2164      	movs	r1, #100	; 0x64
 8008f54:	f7fc fefe 	bl	8005d54 <dwt_read32bitoffsetreg>
 8008f58:	6020      	str	r0, [r4, #0]
 8008f5a:	2500      	movs	r5, #0
 8008f5c:	f7fe bf78 	b.w	8007e50 <dwt_ioctl+0x154>
 8008f60:	00010030 	.word	0x00010030
 8008f64:	000f0004 	.word	0x000f0004
 8008f68:	000f0008 	.word	0x000f0008
 8008f6c:	000f000c 	.word	0x000f000c
 8008f70:	000f0010 	.word	0x000f0010
 8008f74:	000f0014 	.word	0x000f0014
 8008f78:	000f0018 	.word	0x000f0018
 8008f7c:	000f001c 	.word	0x000f001c
 8008f80:	000f0028 	.word	0x000f0028
 8008f84:	00060004 	.word	0x00060004
 8008f88:	0011001a 	.word	0x0011001a
 8008f8c:	00180034 	.word	0x00180034
 8008f90:	0018002c 	.word	0x0018002c
 8008f94:	000c0014 	.word	0x000c0014
 8008f98:	00180020 	.word	0x00180020
 8008f9c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8008f9e:	7bdb      	ldrb	r3, [r3, #15]
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d00b      	beq.n	8008fbc <dwt_ioctl+0x12c0>
 8008fa4:	2b03      	cmp	r3, #3
 8008fa6:	d112      	bne.n	8008fce <dwt_ioctl+0x12d2>
 8008fa8:	9400      	str	r4, [sp, #0]
 8008faa:	2305      	movs	r3, #5
 8008fac:	2228      	movs	r2, #40	; 0x28
 8008fae:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8008fb2:	f7fc fec5 	bl	8005d40 <dwt_readfromdevice>
 8008fb6:	2500      	movs	r5, #0
 8008fb8:	f7fe bf4a 	b.w	8007e50 <dwt_ioctl+0x154>
 8008fbc:	9400      	str	r4, [sp, #0]
 8008fbe:	2305      	movs	r3, #5
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	49d3      	ldr	r1, [pc, #844]	; (8009310 <dwt_ioctl+0x1614>)
 8008fc4:	f7fc febc 	bl	8005d40 <dwt_readfromdevice>
 8008fc8:	2500      	movs	r5, #0
 8008fca:	f7fe bf41 	b.w	8007e50 <dwt_ioctl+0x154>
 8008fce:	9400      	str	r4, [sp, #0]
 8008fd0:	2305      	movs	r3, #5
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	49cf      	ldr	r1, [pc, #828]	; (8009314 <dwt_ioctl+0x1618>)
 8008fd6:	f7fc feb3 	bl	8005d40 <dwt_readfromdevice>
 8008fda:	2500      	movs	r5, #0
 8008fdc:	f7fe bf38 	b.w	8007e50 <dwt_ioctl+0x154>
 8008fe0:	2c00      	cmp	r4, #0
 8008fe2:	f000 8550 	beq.w	8009a86 <dwt_ioctl+0x1d8a>
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	211c      	movs	r1, #28
 8008fea:	f7fc feb3 	bl	8005d54 <dwt_read32bitoffsetreg>
 8008fee:	6020      	str	r0, [r4, #0]
 8008ff0:	2500      	movs	r5, #0
 8008ff2:	f7fe bf2d 	b.w	8007e50 <dwt_ioctl+0x154>
 8008ff6:	2c00      	cmp	r4, #0
 8008ff8:	f000 8548 	beq.w	8009a8c <dwt_ioctl+0x1d90>
 8008ffc:	8825      	ldrh	r5, [r4, #0]
 8008ffe:	6867      	ldr	r7, [r4, #4]
 8009000:	7a23      	ldrb	r3, [r4, #8]
 8009002:	2b00      	cmp	r3, #0
 8009004:	f000 8545 	beq.w	8009a92 <dwt_ioctl+0x1d96>
 8009008:	463c      	mov	r4, r7
 800900a:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 800900e:	4629      	mov	r1, r5
 8009010:	4630      	mov	r0, r6
 8009012:	f7fd fb3b 	bl	800668c <_dwt_otpread>
 8009016:	f844 0b04 	str.w	r0, [r4], #4
 800901a:	3501      	adds	r5, #1
 800901c:	b2ad      	uxth	r5, r5
 800901e:	42bc      	cmp	r4, r7
 8009020:	d1f5      	bne.n	800900e <dwt_ioctl+0x1312>
 8009022:	2500      	movs	r5, #0
 8009024:	f7fe bf14 	b.w	8007e50 <dwt_ioctl+0x154>
 8009028:	2c00      	cmp	r4, #0
 800902a:	f000 8535 	beq.w	8009a98 <dwt_ioctl+0x1d9c>
 800902e:	7823      	ldrb	r3, [r4, #0]
 8009030:	2201      	movs	r2, #1
 8009032:	2128      	movs	r1, #40	; 0x28
 8009034:	f7fd fa7d 	bl	8006532 <dwt_write8bitoffsetreg>
 8009038:	2500      	movs	r5, #0
 800903a:	f7fe bf09 	b.w	8007e50 <dwt_ioctl+0x154>
 800903e:	f7fe fa87 	bl	8007550 <ull_run_pgfcal>
 8009042:	4605      	mov	r5, r0
 8009044:	f7fe bf04 	b.w	8007e50 <dwt_ioctl+0x154>
 8009048:	4611      	mov	r1, r2
 800904a:	f7fe fb77 	bl	800773c <ull_pgf_cal>
 800904e:	4605      	mov	r5, r0
 8009050:	f7fe befe 	b.w	8007e50 <dwt_ioctl+0x154>
 8009054:	2c00      	cmp	r4, #0
 8009056:	f000 8522 	beq.w	8009a9e <dwt_ioctl+0x1da2>
 800905a:	78a5      	ldrb	r5, [r4, #2]
 800905c:	2101      	movs	r1, #1
 800905e:	f7fd faeb 	bl	8006638 <ull_force_clocks>
 8009062:	2100      	movs	r1, #0
 8009064:	4630      	mov	r0, r6
 8009066:	f7fd ff8b 	bl	8006f80 <ull_enable_rf_tx>
 800906a:	4630      	mov	r0, r6
 800906c:	f7fd ffbc 	bl	8006fe8 <ull_enable_rftx_blocks>
 8009070:	f005 033f 	and.w	r3, r5, #63	; 0x3f
 8009074:	2200      	movs	r2, #0
 8009076:	49a8      	ldr	r1, [pc, #672]	; (8009318 <dwt_ioctl+0x161c>)
 8009078:	4630      	mov	r0, r6
 800907a:	f7fd fa5a 	bl	8006532 <dwt_write8bitoffsetreg>
 800907e:	2301      	movs	r3, #1
 8009080:	9300      	str	r3, [sp, #0]
 8009082:	23ff      	movs	r3, #255	; 0xff
 8009084:	2200      	movs	r2, #0
 8009086:	49a5      	ldr	r1, [pc, #660]	; (800931c <dwt_ioctl+0x1620>)
 8009088:	4630      	mov	r0, r6
 800908a:	f7fe f921 	bl	80072d0 <dwt_modify8bitoffsetreg>
 800908e:	4fa3      	ldr	r7, [pc, #652]	; (800931c <dwt_ioctl+0x1620>)
 8009090:	2500      	movs	r5, #0
 8009092:	462a      	mov	r2, r5
 8009094:	4639      	mov	r1, r7
 8009096:	4630      	mov	r0, r6
 8009098:	f7fc fe84 	bl	8005da4 <dwt_read8bitoffsetreg>
 800909c:	f010 0f01 	tst.w	r0, #1
 80090a0:	d1f7      	bne.n	8009092 <dwt_ioctl+0x1396>
 80090a2:	2200      	movs	r2, #0
 80090a4:	499e      	ldr	r1, [pc, #632]	; (8009320 <dwt_ioctl+0x1624>)
 80090a6:	4630      	mov	r0, r6
 80090a8:	f7fc fe6a 	bl	8005d80 <dwt_read16bitoffsetreg>
 80090ac:	4605      	mov	r5, r0
 80090ae:	4630      	mov	r0, r6
 80090b0:	f7fd fe30 	bl	8006d14 <ull_disable_rftx_blocks>
 80090b4:	2100      	movs	r1, #0
 80090b6:	4630      	mov	r0, r6
 80090b8:	f7fd fe36 	bl	8006d28 <ull_disable_rf_tx>
 80090bc:	2105      	movs	r1, #5
 80090be:	4630      	mov	r0, r6
 80090c0:	f7fd faba 	bl	8006638 <ull_force_clocks>
 80090c4:	f3c5 050b 	ubfx	r5, r5, #0, #12
 80090c8:	8025      	strh	r5, [r4, #0]
 80090ca:	2500      	movs	r5, #0
 80090cc:	f7fe bec0 	b.w	8007e50 <dwt_ioctl+0x154>
 80090d0:	2102      	movs	r1, #2
 80090d2:	f7fe f9bb 	bl	800744c <ull_setdwstate>
 80090d6:	2101      	movs	r1, #1
 80090d8:	4630      	mov	r0, r6
 80090da:	f7fe f9b7 	bl	800744c <ull_setdwstate>
 80090de:	2432      	movs	r4, #50	; 0x32
 80090e0:	f04f 0814 	mov.w	r8, #20
 80090e4:	2700      	movs	r7, #0
 80090e6:	2544      	movs	r5, #68	; 0x44
 80090e8:	4640      	mov	r0, r8
 80090ea:	f7f7 fa20 	bl	800052e <deca_usleep>
 80090ee:	463a      	mov	r2, r7
 80090f0:	4629      	mov	r1, r5
 80090f2:	4630      	mov	r0, r6
 80090f4:	f7fc fe56 	bl	8005da4 <dwt_read8bitoffsetreg>
 80090f8:	f010 0f02 	tst.w	r0, #2
 80090fc:	d105      	bne.n	800910a <dwt_ioctl+0x140e>
 80090fe:	1e63      	subs	r3, r4, #1
 8009100:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8009104:	d1f0      	bne.n	80090e8 <dwt_ioctl+0x13ec>
 8009106:	2501      	movs	r5, #1
 8009108:	e000      	b.n	800910c <dwt_ioctl+0x1410>
 800910a:	2500      	movs	r5, #0
 800910c:	426d      	negs	r5, r5
 800910e:	f7fe be9f 	b.w	8007e50 <dwt_ioctl+0x154>
 8009112:	2c00      	cmp	r4, #0
 8009114:	f000 84c6 	beq.w	8009aa4 <dwt_ioctl+0x1da8>
 8009118:	7823      	ldrb	r3, [r4, #0]
 800911a:	031b      	lsls	r3, r3, #12
 800911c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009120:	7862      	ldrb	r2, [r4, #1]
 8009122:	2a01      	cmp	r2, #1
 8009124:	bf08      	it	eq
 8009126:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
 800912a:	9300      	str	r3, [sp, #0]
 800912c:	f46f 43e2 	mvn.w	r3, #28928	; 0x7100
 8009130:	2200      	movs	r2, #0
 8009132:	497c      	ldr	r1, [pc, #496]	; (8009324 <dwt_ioctl+0x1628>)
 8009134:	f7fd fee2 	bl	8006efc <dwt_modify32bitoffsetreg>
 8009138:	2500      	movs	r5, #0
 800913a:	f7fe be89 	b.w	8007e50 <dwt_ioctl+0x154>
 800913e:	2c00      	cmp	r4, #0
 8009140:	f000 84b3 	beq.w	8009aaa <dwt_ioctl+0x1dae>
 8009144:	6862      	ldr	r2, [r4, #4]
 8009146:	6821      	ldr	r1, [r4, #0]
 8009148:	f7fe f818 	bl	800717c <ull_setgpiomode>
 800914c:	2500      	movs	r5, #0
 800914e:	f7fe be7f 	b.w	8007e50 <dwt_ioctl+0x154>
 8009152:	2c00      	cmp	r4, #0
 8009154:	f000 84ac 	beq.w	8009ab0 <dwt_ioctl+0x1db4>
 8009158:	8823      	ldrh	r3, [r4, #0]
 800915a:	2200      	movs	r2, #0
 800915c:	4972      	ldr	r1, [pc, #456]	; (8009328 <dwt_ioctl+0x162c>)
 800915e:	f7fd fa3a 	bl	80065d6 <dwt_write16bitoffsetreg>
 8009162:	2500      	movs	r5, #0
 8009164:	f7fe be74 	b.w	8007e50 <dwt_ioctl+0x154>
 8009168:	2c00      	cmp	r4, #0
 800916a:	f000 84a4 	beq.w	8009ab6 <dwt_ioctl+0x1dba>
 800916e:	6862      	ldr	r2, [r4, #4]
 8009170:	8821      	ldrh	r1, [r4, #0]
 8009172:	f7fe fb13 	bl	800779c <ull_setgpiovalue>
 8009176:	2500      	movs	r5, #0
 8009178:	f7fe be6a 	b.w	8007e50 <dwt_ioctl+0x154>
 800917c:	2c00      	cmp	r4, #0
 800917e:	f000 849d 	beq.w	8009abc <dwt_ioctl+0x1dc0>
 8009182:	7865      	ldrb	r5, [r4, #1]
 8009184:	7823      	ldrb	r3, [r4, #0]
 8009186:	b18b      	cbz	r3, 80091ac <dwt_ioctl+0x14b0>
 8009188:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800918a:	2200      	movs	r2, #0
 800918c:	73da      	strb	r2, [r3, #15]
 800918e:	f04f 33ff 	mov.w	r3, #4294967295
 8009192:	2208      	movs	r2, #8
 8009194:	b1e5      	cbz	r5, 80091d0 <dwt_ioctl+0x14d4>
 8009196:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800919a:	9200      	str	r2, [sp, #0]
 800919c:	2200      	movs	r2, #0
 800919e:	2110      	movs	r1, #16
 80091a0:	4630      	mov	r0, r6
 80091a2:	f7fd feab 	bl	8006efc <dwt_modify32bitoffsetreg>
 80091a6:	2500      	movs	r5, #0
 80091a8:	f7fe be52 	b.w	8007e50 <dwt_ioctl+0x154>
 80091ac:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80091ae:	2201      	movs	r2, #1
 80091b0:	73da      	strb	r2, [r3, #15]
 80091b2:	2318      	movs	r3, #24
 80091b4:	2200      	movs	r2, #0
 80091b6:	495d      	ldr	r1, [pc, #372]	; (800932c <dwt_ioctl+0x1630>)
 80091b8:	f7fd fb0e 	bl	80067d8 <dwt_write32bitoffsetreg>
 80091bc:	23e8      	movs	r3, #232	; 0xe8
 80091be:	2200      	movs	r2, #0
 80091c0:	495b      	ldr	r1, [pc, #364]	; (8009330 <dwt_ioctl+0x1634>)
 80091c2:	4630      	mov	r0, r6
 80091c4:	f7fd fb08 	bl	80067d8 <dwt_write32bitoffsetreg>
 80091c8:	f06f 0308 	mvn.w	r3, #8
 80091cc:	2200      	movs	r2, #0
 80091ce:	e7e1      	b.n	8009194 <dwt_ioctl+0x1498>
 80091d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80091d4:	e7e1      	b.n	800919a <dwt_ioctl+0x149e>
 80091d6:	2c00      	cmp	r4, #0
 80091d8:	f000 8473 	beq.w	8009ac2 <dwt_ioctl+0x1dc6>
 80091dc:	6823      	ldr	r3, [r4, #0]
 80091de:	2200      	movs	r2, #0
 80091e0:	2130      	movs	r1, #48	; 0x30
 80091e2:	f7fd faf9 	bl	80067d8 <dwt_write32bitoffsetreg>
 80091e6:	2500      	movs	r5, #0
 80091e8:	f7fe be32 	b.w	8007e50 <dwt_ioctl+0x154>
 80091ec:	2c00      	cmp	r4, #0
 80091ee:	f000 846b 	beq.w	8009ac8 <dwt_ioctl+0x1dcc>
 80091f2:	2200      	movs	r2, #0
 80091f4:	4629      	mov	r1, r5
 80091f6:	f7fc fdad 	bl	8005d54 <dwt_read32bitoffsetreg>
 80091fa:	6020      	str	r0, [r4, #0]
 80091fc:	2500      	movs	r5, #0
 80091fe:	f7fe be27 	b.w	8007e50 <dwt_ioctl+0x154>
 8009202:	4623      	mov	r3, r4
 8009204:	2200      	movs	r2, #0
 8009206:	4629      	mov	r1, r5
 8009208:	f7fd fae6 	bl	80067d8 <dwt_write32bitoffsetreg>
 800920c:	2500      	movs	r5, #0
 800920e:	f7fe be1f 	b.w	8007e50 <dwt_ioctl+0x154>
 8009212:	2c00      	cmp	r4, #0
 8009214:	f000 845b 	beq.w	8009ace <dwt_ioctl+0x1dd2>
 8009218:	2203      	movs	r2, #3
 800921a:	4946      	ldr	r1, [pc, #280]	; (8009334 <dwt_ioctl+0x1638>)
 800921c:	f7fc fdc2 	bl	8005da4 <dwt_read8bitoffsetreg>
 8009220:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8009224:	7020      	strb	r0, [r4, #0]
 8009226:	2500      	movs	r5, #0
 8009228:	f7fe be12 	b.w	8007e50 <dwt_ioctl+0x154>
 800922c:	2c00      	cmp	r4, #0
 800922e:	f000 8451 	beq.w	8009ad4 <dwt_ioctl+0x1dd8>
 8009232:	6823      	ldr	r3, [r4, #0]
 8009234:	2200      	movs	r2, #0
 8009236:	2144      	movs	r1, #68	; 0x44
 8009238:	f7fd face 	bl	80067d8 <dwt_write32bitoffsetreg>
 800923c:	2500      	movs	r5, #0
 800923e:	f7fe be07 	b.w	8007e50 <dwt_ioctl+0x154>
 8009242:	2c00      	cmp	r4, #0
 8009244:	f000 8449 	beq.w	8009ada <dwt_ioctl+0x1dde>
 8009248:	8823      	ldrh	r3, [r4, #0]
 800924a:	2200      	movs	r2, #0
 800924c:	2148      	movs	r1, #72	; 0x48
 800924e:	f7fd f9c2 	bl	80065d6 <dwt_write16bitoffsetreg>
 8009252:	2500      	movs	r5, #0
 8009254:	f7fe bdfc 	b.w	8007e50 <dwt_ioctl+0x154>
 8009258:	2c00      	cmp	r4, #0
 800925a:	f000 8441 	beq.w	8009ae0 <dwt_ioctl+0x1de4>
 800925e:	2200      	movs	r2, #0
 8009260:	2144      	movs	r1, #68	; 0x44
 8009262:	f7fc fd77 	bl	8005d54 <dwt_read32bitoffsetreg>
 8009266:	6020      	str	r0, [r4, #0]
 8009268:	2500      	movs	r5, #0
 800926a:	f7fe bdf1 	b.w	8007e50 <dwt_ioctl+0x154>
 800926e:	2c00      	cmp	r4, #0
 8009270:	f000 8439 	beq.w	8009ae6 <dwt_ioctl+0x1dea>
 8009274:	2200      	movs	r2, #0
 8009276:	2148      	movs	r1, #72	; 0x48
 8009278:	f7fc fd82 	bl	8005d80 <dwt_read16bitoffsetreg>
 800927c:	6020      	str	r0, [r4, #0]
 800927e:	2500      	movs	r5, #0
 8009280:	f7fe bde6 	b.w	8007e50 <dwt_ioctl+0x154>
 8009284:	2c00      	cmp	r4, #0
 8009286:	f000 8431 	beq.w	8009aec <dwt_ioctl+0x1df0>
 800928a:	7823      	ldrb	r3, [r4, #0]
 800928c:	2200      	movs	r2, #0
 800928e:	492a      	ldr	r1, [pc, #168]	; (8009338 <dwt_ioctl+0x163c>)
 8009290:	f7fd f94f 	bl	8006532 <dwt_write8bitoffsetreg>
 8009294:	2500      	movs	r5, #0
 8009296:	f7fe bddb 	b.w	8007e50 <dwt_ioctl+0x154>
 800929a:	2c00      	cmp	r4, #0
 800929c:	f000 8429 	beq.w	8009af2 <dwt_ioctl+0x1df6>
 80092a0:	2200      	movs	r2, #0
 80092a2:	2144      	movs	r1, #68	; 0x44
 80092a4:	f7fc fd7e 	bl	8005da4 <dwt_read8bitoffsetreg>
 80092a8:	7020      	strb	r0, [r4, #0]
 80092aa:	2500      	movs	r5, #0
 80092ac:	f7fe bdd0 	b.w	8007e50 <dwt_ioctl+0x154>
 80092b0:	2c00      	cmp	r4, #0
 80092b2:	f000 8421 	beq.w	8009af8 <dwt_ioctl+0x1dfc>
 80092b6:	f7fd f949 	bl	800654c <ull_getframelength>
 80092ba:	6020      	str	r0, [r4, #0]
 80092bc:	2500      	movs	r5, #0
 80092be:	f7fe bdc7 	b.w	8007e50 <dwt_ioctl+0x154>
 80092c2:	2c00      	cmp	r4, #0
 80092c4:	f000 841b 	beq.w	8009afe <dwt_ioctl+0x1e02>
 80092c8:	2200      	movs	r2, #0
 80092ca:	491c      	ldr	r1, [pc, #112]	; (800933c <dwt_ioctl+0x1640>)
 80092cc:	f7fc fd58 	bl	8005d80 <dwt_read16bitoffsetreg>
 80092d0:	8020      	strh	r0, [r4, #0]
 80092d2:	2500      	movs	r5, #0
 80092d4:	f7fe bdbc 	b.w	8007e50 <dwt_ioctl+0x154>
 80092d8:	2c00      	cmp	r4, #0
 80092da:	f000 8413 	beq.w	8009b04 <dwt_ioctl+0x1e08>
 80092de:	2200      	movs	r2, #0
 80092e0:	4917      	ldr	r1, [pc, #92]	; (8009340 <dwt_ioctl+0x1644>)
 80092e2:	f7fc fd37 	bl	8005d54 <dwt_read32bitoffsetreg>
 80092e6:	6020      	str	r0, [r4, #0]
 80092e8:	2500      	movs	r5, #0
 80092ea:	f7fe bdb1 	b.w	8007e50 <dwt_ioctl+0x154>
 80092ee:	2c00      	cmp	r4, #0
 80092f0:	f000 840b 	beq.w	8009b0a <dwt_ioctl+0x1e0e>
 80092f4:	8823      	ldrh	r3, [r4, #0]
 80092f6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80092fa:	9300      	str	r3, [sp, #0]
 80092fc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8009300:	2200      	movs	r2, #0
 8009302:	490f      	ldr	r1, [pc, #60]	; (8009340 <dwt_ioctl+0x1644>)
 8009304:	f7fe f996 	bl	8007634 <dwt_modify16bitoffsetreg>
 8009308:	2500      	movs	r5, #0
 800930a:	f7fe bda1 	b.w	8007e50 <dwt_ioctl+0x154>
 800930e:	bf00      	nop
 8009310:	00180028 	.word	0x00180028
 8009314:	000c0008 	.word	0x000c0008
 8009318:	0007001c 	.word	0x0007001c
 800931c:	00080010 	.word	0x00080010
 8009320:	00080014 	.word	0x00080014
 8009324:	00070014 	.word	0x00070014
 8009328:	00050008 	.word	0x00050008
 800932c:	001f000c 	.word	0x001f000c
 8009330:	001f0010 	.word	0x001f0010
 8009334:	00030060 	.word	0x00030060
 8009338:	00010024 	.word	0x00010024
 800933c:	0005002c 	.word	0x0005002c
 8009340:	000e001a 	.word	0x000e001a
 8009344:	2c00      	cmp	r4, #0
 8009346:	f000 83e3 	beq.w	8009b10 <dwt_ioctl+0x1e14>
 800934a:	88a7      	ldrh	r7, [r4, #4]
 800934c:	68a3      	ldr	r3, [r4, #8]
 800934e:	9309      	str	r3, [sp, #36]	; 0x24
 8009350:	7b21      	ldrb	r1, [r4, #12]
 8009352:	9106      	str	r1, [sp, #24]
 8009354:	6922      	ldr	r2, [r4, #16]
 8009356:	9204      	str	r2, [sp, #16]
 8009358:	6962      	ldr	r2, [r4, #20]
 800935a:	9205      	str	r2, [sp, #20]
 800935c:	f003 0203 	and.w	r2, r3, #3
 8009360:	f3c3 0085 	ubfx	r0, r3, #2, #6
 8009364:	2905      	cmp	r1, #5
 8009366:	d142      	bne.n	80093ee <dwt_ioctl+0x16f2>
 8009368:	f5b7 7fb1 	cmp.w	r7, #354	; 0x162
 800936c:	bf28      	it	cs
 800936e:	f44f 77b1 	movcs.w	r7, #354	; 0x162
 8009372:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 8009654 <dwt_ioctl+0x1958>
 8009376:	2f04      	cmp	r7, #4
 8009378:	d805      	bhi.n	8009386 <dwt_ioctl+0x168a>
 800937a:	eb09 0300 	add.w	r3, r9, r0
 800937e:	785b      	ldrb	r3, [r3, #1]
 8009380:	3b05      	subs	r3, #5
 8009382:	429f      	cmp	r7, r3
 8009384:	db3b      	blt.n	80093fe <dwt_ioctl+0x1702>
 8009386:	2a01      	cmp	r2, #1
 8009388:	d877      	bhi.n	800947a <dwt_ioctl+0x177e>
 800938a:	4bae      	ldr	r3, [pc, #696]	; (8009644 <dwt_ioctl+0x1948>)
 800938c:	5c99      	ldrb	r1, [r3, r2]
 800938e:	463e      	mov	r6, r7
 8009390:	42b9      	cmp	r1, r7
 8009392:	da74      	bge.n	800947e <dwt_ioctl+0x1782>
 8009394:	1c55      	adds	r5, r2, #1
 8009396:	fa53 f585 	uxtab	r5, r3, r5
 800939a:	2300      	movs	r3, #0
 800939c:	440b      	add	r3, r1
 800939e:	b29b      	uxth	r3, r3
 80093a0:	3201      	adds	r2, #1
 80093a2:	b2d2      	uxtb	r2, r2
 80093a4:	2a02      	cmp	r2, #2
 80093a6:	d005      	beq.n	80093b4 <dwt_ioctl+0x16b8>
 80093a8:	f815 1b01 	ldrb.w	r1, [r5], #1
 80093ac:	eba6 0c03 	sub.w	ip, r6, r3
 80093b0:	4561      	cmp	r1, ip
 80093b2:	dbf3      	blt.n	800939c <dwt_ioctl+0x16a0>
 80093b4:	429f      	cmp	r7, r3
 80093b6:	bf08      	it	eq
 80093b8:	9003      	streq	r0, [sp, #12]
 80093ba:	d064      	beq.n	8009486 <dwt_ioctl+0x178a>
 80093bc:	f107 0805 	add.w	r8, r7, #5
 80093c0:	fa1f f888 	uxth.w	r8, r8
 80093c4:	2580      	movs	r5, #128	; 0x80
 80093c6:	2100      	movs	r1, #0
 80093c8:	9107      	str	r1, [sp, #28]
 80093ca:	9103      	str	r1, [sp, #12]
 80093cc:	9108      	str	r1, [sp, #32]
 80093ce:	460e      	mov	r6, r1
 80093d0:	f04f 0b05 	mov.w	fp, #5
 80093d4:	46be      	mov	lr, r7
 80093d6:	455f      	cmp	r7, fp
 80093d8:	bf38      	it	cc
 80093da:	46de      	movcc	lr, fp
 80093dc:	f1ae 0e05 	sub.w	lr, lr, #5
 80093e0:	fa1f fe8e 	uxth.w	lr, lr
 80093e4:	f8df a25c 	ldr.w	sl, [pc, #604]	; 8009644 <dwt_ioctl+0x1948>
 80093e8:	46bc      	mov	ip, r7
 80093ea:	460f      	mov	r7, r1
 80093ec:	e3dd      	b.n	8009baa <dwt_ioctl+0x1eae>
 80093ee:	f240 1331 	movw	r3, #305	; 0x131
 80093f2:	429f      	cmp	r7, r3
 80093f4:	bf28      	it	cs
 80093f6:	461f      	movcs	r7, r3
 80093f8:	f8df 925c 	ldr.w	r9, [pc, #604]	; 8009658 <dwt_ioctl+0x195c>
 80093fc:	e7bb      	b.n	8009376 <dwt_ioctl+0x167a>
 80093fe:	2300      	movs	r3, #0
 8009400:	9a05      	ldr	r2, [sp, #20]
 8009402:	8013      	strh	r3, [r2, #0]
 8009404:	9a04      	ldr	r2, [sp, #16]
 8009406:	4611      	mov	r1, r2
 8009408:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800940a:	600a      	str	r2, [r1, #0]
 800940c:	e04a      	b.n	80094a4 <dwt_ioctl+0x17a8>
 800940e:	2300      	movs	r3, #0
 8009410:	9a05      	ldr	r2, [sp, #20]
 8009412:	8013      	strh	r3, [r2, #0]
 8009414:	9b04      	ldr	r3, [sp, #16]
 8009416:	461a      	mov	r2, r3
 8009418:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800941a:	6013      	str	r3, [r2, #0]
 800941c:	f04f 33ff 	mov.w	r3, #4294967295
 8009420:	e040      	b.n	80094a4 <dwt_ioctl+0x17a8>
 8009422:	fa1f fb81 	uxth.w	fp, r1
 8009426:	9207      	str	r2, [sp, #28]
 8009428:	9003      	str	r0, [sp, #12]
 800942a:	9308      	str	r3, [sp, #32]
 800942c:	2701      	movs	r7, #1
 800942e:	e3cd      	b.n	8009bcc <dwt_ioctl+0x1ed0>
 8009430:	2f00      	cmp	r7, #0
 8009432:	f040 83a1 	bne.w	8009b78 <dwt_ioctl+0x1e7c>
 8009436:	4598      	cmp	r8, r3
 8009438:	f200 83a3 	bhi.w	8009b82 <dwt_ioctl+0x1e86>
 800943c:	2e00      	cmp	r6, #0
 800943e:	d038      	beq.n	80094b2 <dwt_ioctl+0x17b6>
 8009440:	283f      	cmp	r0, #63	; 0x3f
 8009442:	f000 83c8 	beq.w	8009bd6 <dwt_ioctl+0x1eda>
 8009446:	2700      	movs	r7, #0
 8009448:	f819 1000 	ldrb.w	r1, [r9, r0]
 800944c:	1a5b      	subs	r3, r3, r1
 800944e:	b29b      	uxth	r3, r3
 8009450:	1e46      	subs	r6, r0, #1
 8009452:	f006 003f 	and.w	r0, r6, #63	; 0x3f
 8009456:	f016 063f 	ands.w	r6, r6, #63	; 0x3f
 800945a:	bf18      	it	ne
 800945c:	2601      	movne	r6, #1
 800945e:	e39c      	b.n	8009b9a <dwt_ioctl+0x1e9e>
 8009460:	9906      	ldr	r1, [sp, #24]
 8009462:	2909      	cmp	r1, #9
 8009464:	f040 83bd 	bne.w	8009be2 <dwt_ioctl+0x1ee6>
 8009468:	213f      	movs	r1, #63	; 0x3f
 800946a:	9103      	str	r1, [sp, #12]
 800946c:	e00b      	b.n	8009486 <dwt_ioctl+0x178a>
 800946e:	b2b3      	uxth	r3, r6
 8009470:	3201      	adds	r2, #1
 8009472:	b2d2      	uxtb	r2, r2
 8009474:	213f      	movs	r1, #63	; 0x3f
 8009476:	9103      	str	r1, [sp, #12]
 8009478:	e005      	b.n	8009486 <dwt_ioctl+0x178a>
 800947a:	2300      	movs	r3, #0
 800947c:	e79a      	b.n	80093b4 <dwt_ioctl+0x16b8>
 800947e:	2300      	movs	r3, #0
 8009480:	e798      	b.n	80093b4 <dwt_ioctl+0x16b8>
 8009482:	9003      	str	r0, [sp, #12]
 8009484:	4663      	mov	r3, ip
 8009486:	9905      	ldr	r1, [sp, #20]
 8009488:	800b      	strh	r3, [r1, #0]
 800948a:	9b03      	ldr	r3, [sp, #12]
 800948c:	ea42 0283 	orr.w	r2, r2, r3, lsl #2
 8009490:	b2d2      	uxtb	r2, r2
 8009492:	0413      	lsls	r3, r2, #16
 8009494:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009498:	4313      	orrs	r3, r2
 800949a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800949e:	9a04      	ldr	r2, [sp, #16]
 80094a0:	6013      	str	r3, [r2, #0]
 80094a2:	2300      	movs	r3, #0
 80094a4:	6023      	str	r3, [r4, #0]
 80094a6:	2500      	movs	r5, #0
 80094a8:	f7fe bcd2 	b.w	8007e50 <dwt_ioctl+0x154>
 80094ac:	9a07      	ldr	r2, [sp, #28]
 80094ae:	9b08      	ldr	r3, [sp, #32]
 80094b0:	e7e9      	b.n	8009486 <dwt_ioctl+0x178a>
 80094b2:	9003      	str	r0, [sp, #12]
 80094b4:	e7e7      	b.n	8009486 <dwt_ioctl+0x178a>
 80094b6:	9a07      	ldr	r2, [sp, #28]
 80094b8:	9b08      	ldr	r3, [sp, #32]
 80094ba:	e7e4      	b.n	8009486 <dwt_ioctl+0x178a>
 80094bc:	213f      	movs	r1, #63	; 0x3f
 80094be:	9103      	str	r1, [sp, #12]
 80094c0:	e7e1      	b.n	8009486 <dwt_ioctl+0x178a>
 80094c2:	2c00      	cmp	r4, #0
 80094c4:	f000 8327 	beq.w	8009b16 <dwt_ioctl+0x1e1a>
 80094c8:	7825      	ldrb	r5, [r4, #0]
 80094ca:	6862      	ldr	r2, [r4, #4]
 80094cc:	2a01      	cmp	r2, #1
 80094ce:	bf15      	itete	ne
 80094d0:	f46f 3360 	mvnne.w	r3, #229376	; 0x38000
 80094d4:	f46f 43e0 	mvneq.w	r3, #28672	; 0x7000
 80094d8:	27df      	movne	r7, #223	; 0xdf
 80094da:	27ef      	moveq	r7, #239	; 0xef
 80094dc:	bf14      	ite	ne
 80094de:	f04f 0820 	movne.w	r8, #32
 80094e2:	f04f 0810 	moveq.w	r8, #16
 80094e6:	2400      	movs	r4, #0
 80094e8:	9400      	str	r4, [sp, #0]
 80094ea:	4622      	mov	r2, r4
 80094ec:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80094f0:	f7fd fd04 	bl	8006efc <dwt_modify32bitoffsetreg>
 80094f4:	9400      	str	r4, [sp, #0]
 80094f6:	463b      	mov	r3, r7
 80094f8:	4622      	mov	r2, r4
 80094fa:	4953      	ldr	r1, [pc, #332]	; (8009648 <dwt_ioctl+0x194c>)
 80094fc:	4630      	mov	r0, r6
 80094fe:	f7fd fee7 	bl	80072d0 <dwt_modify8bitoffsetreg>
 8009502:	2d01      	cmp	r5, #1
 8009504:	d003      	beq.n	800950e <dwt_ioctl+0x1812>
 8009506:	b165      	cbz	r5, 8009522 <dwt_ioctl+0x1826>
 8009508:	2500      	movs	r5, #0
 800950a:	f7fe bca1 	b.w	8007e50 <dwt_ioctl+0x154>
 800950e:	4625      	mov	r5, r4
 8009510:	9400      	str	r4, [sp, #0]
 8009512:	463b      	mov	r3, r7
 8009514:	4622      	mov	r2, r4
 8009516:	494d      	ldr	r1, [pc, #308]	; (800964c <dwt_ioctl+0x1950>)
 8009518:	4630      	mov	r0, r6
 800951a:	f7fd fed9 	bl	80072d0 <dwt_modify8bitoffsetreg>
 800951e:	f7fe bc97 	b.w	8007e50 <dwt_ioctl+0x154>
 8009522:	f8cd 8000 	str.w	r8, [sp]
 8009526:	23ff      	movs	r3, #255	; 0xff
 8009528:	2200      	movs	r2, #0
 800952a:	4948      	ldr	r1, [pc, #288]	; (800964c <dwt_ioctl+0x1950>)
 800952c:	4630      	mov	r0, r6
 800952e:	f7fd fecf 	bl	80072d0 <dwt_modify8bitoffsetreg>
 8009532:	f7fe bc8d 	b.w	8007e50 <dwt_ioctl+0x154>
 8009536:	2c00      	cmp	r4, #0
 8009538:	f000 82f0 	beq.w	8009b1c <dwt_ioctl+0x1e20>
 800953c:	7822      	ldrb	r2, [r4, #0]
 800953e:	f012 0f01 	tst.w	r2, #1
 8009542:	d02d      	beq.n	80095a0 <dwt_ioctl+0x18a4>
 8009544:	0157      	lsls	r7, r2, #5
 8009546:	f007 0740 	and.w	r7, r7, #64	; 0x40
 800954a:	2440      	movs	r4, #64	; 0x40
 800954c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8009550:	f012 0f04 	tst.w	r2, #4
 8009554:	d028      	beq.n	80095a8 <dwt_ioctl+0x18ac>
 8009556:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
 800955a:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800955e:	0112      	lsls	r2, r2, #4
 8009560:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8009564:	4317      	orrs	r7, r2
 8009566:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800956a:	9200      	str	r2, [sp, #0]
 800956c:	43db      	mvns	r3, r3
 800956e:	2200      	movs	r2, #0
 8009570:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8009574:	4630      	mov	r0, r6
 8009576:	f7fd fcc1 	bl	8006efc <dwt_modify32bitoffsetreg>
 800957a:	43e4      	mvns	r4, r4
 800957c:	b2a4      	uxth	r4, r4
 800957e:	2500      	movs	r5, #0
 8009580:	9500      	str	r5, [sp, #0]
 8009582:	4623      	mov	r3, r4
 8009584:	462a      	mov	r2, r5
 8009586:	4930      	ldr	r1, [pc, #192]	; (8009648 <dwt_ioctl+0x194c>)
 8009588:	4630      	mov	r0, r6
 800958a:	f7fe f853 	bl	8007634 <dwt_modify16bitoffsetreg>
 800958e:	9700      	str	r7, [sp, #0]
 8009590:	4623      	mov	r3, r4
 8009592:	462a      	mov	r2, r5
 8009594:	492d      	ldr	r1, [pc, #180]	; (800964c <dwt_ioctl+0x1950>)
 8009596:	4630      	mov	r0, r6
 8009598:	f7fe f84c 	bl	8007634 <dwt_modify16bitoffsetreg>
 800959c:	f7fe bc58 	b.w	8007e50 <dwt_ioctl+0x154>
 80095a0:	2700      	movs	r7, #0
 80095a2:	463c      	mov	r4, r7
 80095a4:	463b      	mov	r3, r7
 80095a6:	e7d3      	b.n	8009550 <dwt_ioctl+0x1854>
 80095a8:	2200      	movs	r2, #0
 80095aa:	e7de      	b.n	800956a <dwt_ioctl+0x186e>
 80095ac:	2308      	movs	r3, #8
 80095ae:	9300      	str	r3, [sp, #0]
 80095b0:	23ff      	movs	r3, #255	; 0xff
 80095b2:	2201      	movs	r2, #1
 80095b4:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80095b8:	f7fd fe8a 	bl	80072d0 <dwt_modify8bitoffsetreg>
 80095bc:	4c24      	ldr	r4, [pc, #144]	; (8009650 <dwt_ioctl+0x1954>)
 80095be:	2302      	movs	r3, #2
 80095c0:	9300      	str	r3, [sp, #0]
 80095c2:	23ff      	movs	r3, #255	; 0xff
 80095c4:	2203      	movs	r2, #3
 80095c6:	4621      	mov	r1, r4
 80095c8:	4630      	mov	r0, r6
 80095ca:	f7fd fe81 	bl	80072d0 <dwt_modify8bitoffsetreg>
 80095ce:	2500      	movs	r5, #0
 80095d0:	9500      	str	r5, [sp, #0]
 80095d2:	23f7      	movs	r3, #247	; 0xf7
 80095d4:	2201      	movs	r2, #1
 80095d6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80095da:	4630      	mov	r0, r6
 80095dc:	f7fd fe78 	bl	80072d0 <dwt_modify8bitoffsetreg>
 80095e0:	9500      	str	r5, [sp, #0]
 80095e2:	23fd      	movs	r3, #253	; 0xfd
 80095e4:	2203      	movs	r2, #3
 80095e6:	4621      	mov	r1, r4
 80095e8:	4630      	mov	r0, r6
 80095ea:	f7fd fe71 	bl	80072d0 <dwt_modify8bitoffsetreg>
 80095ee:	f7fe bc2f 	b.w	8007e50 <dwt_ioctl+0x154>
 80095f2:	2c00      	cmp	r4, #0
 80095f4:	f000 8295 	beq.w	8009b22 <dwt_ioctl+0x1e26>
 80095f8:	8863      	ldrh	r3, [r4, #2]
 80095fa:	00db      	lsls	r3, r3, #3
 80095fc:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8009600:	7822      	ldrb	r2, [r4, #0]
 8009602:	b10a      	cbz	r2, 8009608 <dwt_ioctl+0x190c>
 8009604:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009608:	9300      	str	r3, [sp, #0]
 800960a:	f24f 0307 	movw	r3, #61447	; 0xf007
 800960e:	2200      	movs	r2, #0
 8009610:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8009614:	4630      	mov	r0, r6
 8009616:	f7fe f80d 	bl	8007634 <dwt_modify16bitoffsetreg>
 800961a:	2500      	movs	r5, #0
 800961c:	f7fe bc18 	b.w	8007e50 <dwt_ioctl+0x154>
 8009620:	2c00      	cmp	r4, #0
 8009622:	f000 8281 	beq.w	8009b28 <dwt_ioctl+0x1e2c>
 8009626:	b2e3      	uxtb	r3, r4
 8009628:	1c9a      	adds	r2, r3, #2
 800962a:	2301      	movs	r3, #1
 800962c:	4093      	lsls	r3, r2
 800962e:	3b01      	subs	r3, #1
 8009630:	b2db      	uxtb	r3, r3
 8009632:	2200      	movs	r2, #0
 8009634:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8009638:	f7fc ff7b 	bl	8006532 <dwt_write8bitoffsetreg>
 800963c:	2500      	movs	r5, #0
 800963e:	f7fe bc07 	b.w	8007e50 <dwt_ioctl+0x154>
 8009642:	bf00      	nop
 8009644:	08013334 	.word	0x08013334
 8009648:	00050008 	.word	0x00050008
 800964c:	0005000c 	.word	0x0005000c
 8009650:	00110008 	.word	0x00110008
 8009654:	080132b4 	.word	0x080132b4
 8009658:	080132f4 	.word	0x080132f4
 800965c:	2c00      	cmp	r4, #0
 800965e:	f000 8266 	beq.w	8009b2e <dwt_ioctl+0x1e32>
 8009662:	7ae3      	ldrb	r3, [r4, #11]
 8009664:	2b00      	cmp	r3, #0
 8009666:	f000 8265 	beq.w	8009b34 <dwt_ioctl+0x1e38>
 800966a:	7b63      	ldrb	r3, [r4, #13]
 800966c:	2b01      	cmp	r3, #1
 800966e:	d921      	bls.n	80096b4 <dwt_ioctl+0x19b8>
 8009670:	7b22      	ldrb	r2, [r4, #12]
 8009672:	4bd7      	ldr	r3, [pc, #860]	; (80099d0 <dwt_ioctl+0x1cd4>)
 8009674:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8009678:	0112      	lsls	r2, r2, #4
 800967a:	0ad3      	lsrs	r3, r2, #11
 800967c:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8009680:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009684:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8009688:	bf28      	it	cs
 800968a:	3301      	addcs	r3, #1
 800968c:	b29b      	uxth	r3, r3
 800968e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009692:	9300      	str	r3, [sp, #0]
 8009694:	f64f 7380 	movw	r3, #65408	; 0xff80
 8009698:	2202      	movs	r2, #2
 800969a:	49ce      	ldr	r1, [pc, #824]	; (80099d4 <dwt_ioctl+0x1cd8>)
 800969c:	4630      	mov	r0, r6
 800969e:	f7fd ffc9 	bl	8007634 <dwt_modify16bitoffsetreg>
 80096a2:	2394      	movs	r3, #148	; 0x94
 80096a4:	2200      	movs	r2, #0
 80096a6:	49cc      	ldr	r1, [pc, #816]	; (80099d8 <dwt_ioctl+0x1cdc>)
 80096a8:	4630      	mov	r0, r6
 80096aa:	f7fc ff42 	bl	8006532 <dwt_write8bitoffsetreg>
 80096ae:	2500      	movs	r5, #0
 80096b0:	f7fe bbce 	b.w	8007e50 <dwt_ioctl+0x154>
 80096b4:	7b22      	ldrb	r2, [r4, #12]
 80096b6:	4bc6      	ldr	r3, [pc, #792]	; (80099d0 <dwt_ioctl+0x1cd4>)
 80096b8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80096bc:	f44f 6235 	mov.w	r2, #2896	; 0xb50
 80096c0:	fb02 f203 	mul.w	r2, r2, r3
 80096c4:	0c93      	lsrs	r3, r2, #18
 80096c6:	f3c2 12ca 	ubfx	r2, r2, #7, #11
 80096ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80096ce:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80096d2:	bf28      	it	cs
 80096d4:	3301      	addcs	r3, #1
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	e7d9      	b.n	800968e <dwt_ioctl+0x1992>
 80096da:	2c00      	cmp	r4, #0
 80096dc:	f000 822d 	beq.w	8009b3a <dwt_ioctl+0x1e3e>
 80096e0:	2200      	movs	r2, #0
 80096e2:	49be      	ldr	r1, [pc, #760]	; (80099dc <dwt_ioctl+0x1ce0>)
 80096e4:	f7fc fb36 	bl	8005d54 <dwt_read32bitoffsetreg>
 80096e8:	6020      	str	r0, [r4, #0]
 80096ea:	2500      	movs	r5, #0
 80096ec:	f7fe bbb0 	b.w	8007e50 <dwt_ioctl+0x154>
 80096f0:	2c00      	cmp	r4, #0
 80096f2:	f000 8225 	beq.w	8009b40 <dwt_ioctl+0x1e44>
 80096f6:	2200      	movs	r2, #0
 80096f8:	49b9      	ldr	r1, [pc, #740]	; (80099e0 <dwt_ioctl+0x1ce4>)
 80096fa:	f7fc fb2b 	bl	8005d54 <dwt_read32bitoffsetreg>
 80096fe:	6020      	str	r0, [r4, #0]
 8009700:	2500      	movs	r5, #0
 8009702:	f7fe bba5 	b.w	8007e50 <dwt_ioctl+0x154>
 8009706:	2c00      	cmp	r4, #0
 8009708:	f000 821d 	beq.w	8009b46 <dwt_ioctl+0x1e4a>
 800970c:	f44f 13a8 	mov.w	r3, #1376256	; 0x150000
 8009710:	6023      	str	r3, [r4, #0]
 8009712:	2500      	movs	r5, #0
 8009714:	f7fe bb9c 	b.w	8007e50 <dwt_ioctl+0x154>
 8009718:	2c00      	cmp	r4, #0
 800971a:	f000 8217 	beq.w	8009b4c <dwt_ioctl+0x1e50>
 800971e:	2500      	movs	r5, #0
 8009720:	950b      	str	r5, [sp, #44]	; 0x2c
 8009722:	af10      	add	r7, sp, #64	; 0x40
 8009724:	2319      	movs	r3, #25
 8009726:	f847 3d10 	str.w	r3, [r7, #-16]!
 800972a:	9700      	str	r7, [sp, #0]
 800972c:	2304      	movs	r3, #4
 800972e:	462a      	mov	r2, r5
 8009730:	49ac      	ldr	r1, [pc, #688]	; (80099e4 <dwt_ioctl+0x1ce8>)
 8009732:	f7fc fef3 	bl	800651c <dwt_writetodevice>
 8009736:	f641 7348 	movw	r3, #8008	; 0x1f48
 800973a:	930c      	str	r3, [sp, #48]	; 0x30
 800973c:	9700      	str	r7, [sp, #0]
 800973e:	2304      	movs	r3, #4
 8009740:	462a      	mov	r2, r5
 8009742:	49a9      	ldr	r1, [pc, #676]	; (80099e8 <dwt_ioctl+0x1cec>)
 8009744:	4630      	mov	r0, r6
 8009746:	f7fc fee9 	bl	800651c <dwt_writetodevice>
 800974a:	ab0b      	add	r3, sp, #44	; 0x2c
 800974c:	9300      	str	r3, [sp, #0]
 800974e:	2304      	movs	r3, #4
 8009750:	462a      	mov	r2, r5
 8009752:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 8009756:	4630      	mov	r0, r6
 8009758:	f7fc faf2 	bl	8005d40 <dwt_readfromdevice>
 800975c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800975e:	6023      	str	r3, [r4, #0]
 8009760:	f7fe bb76 	b.w	8007e50 <dwt_ioctl+0x154>
 8009764:	2c00      	cmp	r4, #0
 8009766:	f000 81f4 	beq.w	8009b52 <dwt_ioctl+0x1e56>
 800976a:	2200      	movs	r2, #0
 800976c:	499f      	ldr	r1, [pc, #636]	; (80099ec <dwt_ioctl+0x1cf0>)
 800976e:	f7fc faf1 	bl	8005d54 <dwt_read32bitoffsetreg>
 8009772:	b280      	uxth	r0, r0
 8009774:	6020      	str	r0, [r4, #0]
 8009776:	2200      	movs	r2, #0
 8009778:	499d      	ldr	r1, [pc, #628]	; (80099f0 <dwt_ioctl+0x1cf4>)
 800977a:	4630      	mov	r0, r6
 800977c:	f7fc faea 	bl	8005d54 <dwt_read32bitoffsetreg>
 8009780:	0d43      	lsrs	r3, r0, #21
 8009782:	019b      	lsls	r3, r3, #6
 8009784:	b29b      	uxth	r3, r3
 8009786:	6063      	str	r3, [r4, #4]
 8009788:	2500      	movs	r5, #0
 800978a:	f7fe bb61 	b.w	8007e50 <dwt_ioctl+0x154>
 800978e:	2c00      	cmp	r4, #0
 8009790:	f000 81e2 	beq.w	8009b58 <dwt_ioctl+0x1e5c>
 8009794:	7d63      	ldrb	r3, [r4, #21]
 8009796:	b12b      	cbz	r3, 80097a4 <dwt_ioctl+0x1aa8>
 8009798:	2b01      	cmp	r3, #1
 800979a:	d037      	beq.n	800980c <dwt_ioctl+0x1b10>
 800979c:	2b02      	cmp	r3, #2
 800979e:	d05e      	beq.n	800985e <dwt_ioctl+0x1b62>
 80097a0:	23ff      	movs	r3, #255	; 0xff
 80097a2:	e02f      	b.n	8009804 <dwt_ioctl+0x1b08>
 80097a4:	2200      	movs	r2, #0
 80097a6:	4993      	ldr	r1, [pc, #588]	; (80099f4 <dwt_ioctl+0x1cf8>)
 80097a8:	f7fc fad4 	bl	8005d54 <dwt_read32bitoffsetreg>
 80097ac:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80097b0:	6020      	str	r0, [r4, #0]
 80097b2:	2200      	movs	r2, #0
 80097b4:	4990      	ldr	r1, [pc, #576]	; (80099f8 <dwt_ioctl+0x1cfc>)
 80097b6:	4630      	mov	r0, r6
 80097b8:	f7fc facc 	bl	8005d54 <dwt_read32bitoffsetreg>
 80097bc:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80097c0:	6060      	str	r0, [r4, #4]
 80097c2:	2200      	movs	r2, #0
 80097c4:	498d      	ldr	r1, [pc, #564]	; (80099fc <dwt_ioctl+0x1d00>)
 80097c6:	4630      	mov	r0, r6
 80097c8:	f7fc fac4 	bl	8005d54 <dwt_read32bitoffsetreg>
 80097cc:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80097d0:	60a0      	str	r0, [r4, #8]
 80097d2:	2200      	movs	r2, #0
 80097d4:	498a      	ldr	r1, [pc, #552]	; (8009a00 <dwt_ioctl+0x1d04>)
 80097d6:	4630      	mov	r0, r6
 80097d8:	f7fc fabc 	bl	8005d54 <dwt_read32bitoffsetreg>
 80097dc:	f3c0 0015 	ubfx	r0, r0, #0, #22
 80097e0:	60e0      	str	r0, [r4, #12]
 80097e2:	2200      	movs	r2, #0
 80097e4:	4987      	ldr	r1, [pc, #540]	; (8009a04 <dwt_ioctl+0x1d08>)
 80097e6:	4630      	mov	r0, r6
 80097e8:	f7fc fab4 	bl	8005d54 <dwt_read32bitoffsetreg>
 80097ec:	f3c0 0010 	ubfx	r0, r0, #0, #17
 80097f0:	6120      	str	r0, [r4, #16]
 80097f2:	2203      	movs	r2, #3
 80097f4:	4979      	ldr	r1, [pc, #484]	; (80099dc <dwt_ioctl+0x1ce0>)
 80097f6:	4630      	mov	r0, r6
 80097f8:	f7fc fad4 	bl	8005da4 <dwt_read8bitoffsetreg>
 80097fc:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8009800:	7520      	strb	r0, [r4, #20]
 8009802:	2300      	movs	r3, #0
 8009804:	75a3      	strb	r3, [r4, #22]
 8009806:	2500      	movs	r5, #0
 8009808:	f7fe bb22 	b.w	8007e50 <dwt_ioctl+0x154>
 800980c:	2200      	movs	r2, #0
 800980e:	497e      	ldr	r1, [pc, #504]	; (8009a08 <dwt_ioctl+0x1d0c>)
 8009810:	f7fc faa0 	bl	8005d54 <dwt_read32bitoffsetreg>
 8009814:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8009818:	6020      	str	r0, [r4, #0]
 800981a:	2200      	movs	r2, #0
 800981c:	497b      	ldr	r1, [pc, #492]	; (8009a0c <dwt_ioctl+0x1d10>)
 800981e:	4630      	mov	r0, r6
 8009820:	f7fc fa98 	bl	8005d54 <dwt_read32bitoffsetreg>
 8009824:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8009828:	6060      	str	r0, [r4, #4]
 800982a:	2200      	movs	r2, #0
 800982c:	4978      	ldr	r1, [pc, #480]	; (8009a10 <dwt_ioctl+0x1d14>)
 800982e:	4630      	mov	r0, r6
 8009830:	f7fc fa90 	bl	8005d54 <dwt_read32bitoffsetreg>
 8009834:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8009838:	60a0      	str	r0, [r4, #8]
 800983a:	2200      	movs	r2, #0
 800983c:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 8009840:	4630      	mov	r0, r6
 8009842:	f7fc fa87 	bl	8005d54 <dwt_read32bitoffsetreg>
 8009846:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800984a:	60e0      	str	r0, [r4, #12]
 800984c:	2200      	movs	r2, #0
 800984e:	4971      	ldr	r1, [pc, #452]	; (8009a14 <dwt_ioctl+0x1d18>)
 8009850:	4630      	mov	r0, r6
 8009852:	f7fc fa7f 	bl	8005d54 <dwt_read32bitoffsetreg>
 8009856:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800985a:	6120      	str	r0, [r4, #16]
 800985c:	e7c9      	b.n	80097f2 <dwt_ioctl+0x1af6>
 800985e:	2200      	movs	r2, #0
 8009860:	496d      	ldr	r1, [pc, #436]	; (8009a18 <dwt_ioctl+0x1d1c>)
 8009862:	f7fc fa77 	bl	8005d54 <dwt_read32bitoffsetreg>
 8009866:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800986a:	6020      	str	r0, [r4, #0]
 800986c:	2200      	movs	r2, #0
 800986e:	496b      	ldr	r1, [pc, #428]	; (8009a1c <dwt_ioctl+0x1d20>)
 8009870:	4630      	mov	r0, r6
 8009872:	f7fc fa6f 	bl	8005d54 <dwt_read32bitoffsetreg>
 8009876:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800987a:	6060      	str	r0, [r4, #4]
 800987c:	2200      	movs	r2, #0
 800987e:	4968      	ldr	r1, [pc, #416]	; (8009a20 <dwt_ioctl+0x1d24>)
 8009880:	4630      	mov	r0, r6
 8009882:	f7fc fa67 	bl	8005d54 <dwt_read32bitoffsetreg>
 8009886:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800988a:	60a0      	str	r0, [r4, #8]
 800988c:	2200      	movs	r2, #0
 800988e:	4965      	ldr	r1, [pc, #404]	; (8009a24 <dwt_ioctl+0x1d28>)
 8009890:	4630      	mov	r0, r6
 8009892:	f7fc fa5f 	bl	8005d54 <dwt_read32bitoffsetreg>
 8009896:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800989a:	60e0      	str	r0, [r4, #12]
 800989c:	2200      	movs	r2, #0
 800989e:	4962      	ldr	r1, [pc, #392]	; (8009a28 <dwt_ioctl+0x1d2c>)
 80098a0:	4630      	mov	r0, r6
 80098a2:	f7fc fa57 	bl	8005d54 <dwt_read32bitoffsetreg>
 80098a6:	f3c0 0013 	ubfx	r0, r0, #0, #20
 80098aa:	6120      	str	r0, [r4, #16]
 80098ac:	e7a1      	b.n	80097f2 <dwt_ioctl+0x1af6>
 80098ae:	2500      	movs	r5, #0
 80098b0:	f7fe bace 	b.w	8007e50 <dwt_ioctl+0x154>
 80098b4:	2500      	movs	r5, #0
 80098b6:	f7fe bacb 	b.w	8007e50 <dwt_ioctl+0x154>
 80098ba:	2500      	movs	r5, #0
 80098bc:	f7fe bac8 	b.w	8007e50 <dwt_ioctl+0x154>
 80098c0:	2500      	movs	r5, #0
 80098c2:	f7fe bac5 	b.w	8007e50 <dwt_ioctl+0x154>
 80098c6:	2500      	movs	r5, #0
 80098c8:	f7fe bac2 	b.w	8007e50 <dwt_ioctl+0x154>
 80098cc:	2500      	movs	r5, #0
 80098ce:	f7fe babf 	b.w	8007e50 <dwt_ioctl+0x154>
 80098d2:	2500      	movs	r5, #0
 80098d4:	f7fe babc 	b.w	8007e50 <dwt_ioctl+0x154>
 80098d8:	2500      	movs	r5, #0
 80098da:	f7fe bab9 	b.w	8007e50 <dwt_ioctl+0x154>
 80098de:	2500      	movs	r5, #0
 80098e0:	f7fe bab6 	b.w	8007e50 <dwt_ioctl+0x154>
 80098e4:	2500      	movs	r5, #0
 80098e6:	f7fe bab3 	b.w	8007e50 <dwt_ioctl+0x154>
 80098ea:	2500      	movs	r5, #0
 80098ec:	f7fe bab0 	b.w	8007e50 <dwt_ioctl+0x154>
 80098f0:	2500      	movs	r5, #0
 80098f2:	f7fe baad 	b.w	8007e50 <dwt_ioctl+0x154>
 80098f6:	2500      	movs	r5, #0
 80098f8:	f7fe baaa 	b.w	8007e50 <dwt_ioctl+0x154>
 80098fc:	2500      	movs	r5, #0
 80098fe:	f7fe baa7 	b.w	8007e50 <dwt_ioctl+0x154>
 8009902:	2500      	movs	r5, #0
 8009904:	f7fe baa4 	b.w	8007e50 <dwt_ioctl+0x154>
 8009908:	2500      	movs	r5, #0
 800990a:	f7fe baa1 	b.w	8007e50 <dwt_ioctl+0x154>
 800990e:	2500      	movs	r5, #0
 8009910:	f7fe ba9e 	b.w	8007e50 <dwt_ioctl+0x154>
 8009914:	2500      	movs	r5, #0
 8009916:	f7fe ba9b 	b.w	8007e50 <dwt_ioctl+0x154>
 800991a:	2500      	movs	r5, #0
 800991c:	f7fe ba98 	b.w	8007e50 <dwt_ioctl+0x154>
 8009920:	2500      	movs	r5, #0
 8009922:	f7fe ba95 	b.w	8007e50 <dwt_ioctl+0x154>
 8009926:	2500      	movs	r5, #0
 8009928:	f7fe ba92 	b.w	8007e50 <dwt_ioctl+0x154>
 800992c:	2500      	movs	r5, #0
 800992e:	f7fe ba8f 	b.w	8007e50 <dwt_ioctl+0x154>
 8009932:	2500      	movs	r5, #0
 8009934:	f7fe ba8c 	b.w	8007e50 <dwt_ioctl+0x154>
 8009938:	2500      	movs	r5, #0
 800993a:	f7fe ba89 	b.w	8007e50 <dwt_ioctl+0x154>
 800993e:	2500      	movs	r5, #0
 8009940:	f7fe ba86 	b.w	8007e50 <dwt_ioctl+0x154>
 8009944:	2500      	movs	r5, #0
 8009946:	f7fe ba83 	b.w	8007e50 <dwt_ioctl+0x154>
 800994a:	2500      	movs	r5, #0
 800994c:	f7fe ba80 	b.w	8007e50 <dwt_ioctl+0x154>
 8009950:	2500      	movs	r5, #0
 8009952:	f7fe ba7d 	b.w	8007e50 <dwt_ioctl+0x154>
 8009956:	2500      	movs	r5, #0
 8009958:	f7fe ba7a 	b.w	8007e50 <dwt_ioctl+0x154>
 800995c:	2500      	movs	r5, #0
 800995e:	f7fe ba77 	b.w	8007e50 <dwt_ioctl+0x154>
 8009962:	2500      	movs	r5, #0
 8009964:	f7fe ba74 	b.w	8007e50 <dwt_ioctl+0x154>
 8009968:	2500      	movs	r5, #0
 800996a:	f7fe ba71 	b.w	8007e50 <dwt_ioctl+0x154>
 800996e:	2500      	movs	r5, #0
 8009970:	f7fe ba6e 	b.w	8007e50 <dwt_ioctl+0x154>
 8009974:	2500      	movs	r5, #0
 8009976:	f7fe ba6b 	b.w	8007e50 <dwt_ioctl+0x154>
 800997a:	2500      	movs	r5, #0
 800997c:	f7fe ba68 	b.w	8007e50 <dwt_ioctl+0x154>
 8009980:	2500      	movs	r5, #0
 8009982:	f7fe ba65 	b.w	8007e50 <dwt_ioctl+0x154>
 8009986:	2500      	movs	r5, #0
 8009988:	f7fe ba62 	b.w	8007e50 <dwt_ioctl+0x154>
 800998c:	2500      	movs	r5, #0
 800998e:	f7fe ba5f 	b.w	8007e50 <dwt_ioctl+0x154>
 8009992:	2500      	movs	r5, #0
 8009994:	f7fe ba5c 	b.w	8007e50 <dwt_ioctl+0x154>
 8009998:	2500      	movs	r5, #0
 800999a:	f7fe ba59 	b.w	8007e50 <dwt_ioctl+0x154>
 800999e:	2500      	movs	r5, #0
 80099a0:	f7fe ba56 	b.w	8007e50 <dwt_ioctl+0x154>
 80099a4:	2500      	movs	r5, #0
 80099a6:	f7fe ba53 	b.w	8007e50 <dwt_ioctl+0x154>
 80099aa:	2500      	movs	r5, #0
 80099ac:	f7fe ba50 	b.w	8007e50 <dwt_ioctl+0x154>
 80099b0:	2500      	movs	r5, #0
 80099b2:	f7fe ba4d 	b.w	8007e50 <dwt_ioctl+0x154>
 80099b6:	2500      	movs	r5, #0
 80099b8:	f7fe ba4a 	b.w	8007e50 <dwt_ioctl+0x154>
 80099bc:	2500      	movs	r5, #0
 80099be:	f7fe ba47 	b.w	8007e50 <dwt_ioctl+0x154>
 80099c2:	2500      	movs	r5, #0
 80099c4:	f7fe ba44 	b.w	8007e50 <dwt_ioctl+0x154>
 80099c8:	2500      	movs	r5, #0
 80099ca:	f7fe ba41 	b.w	8007e50 <dwt_ioctl+0x154>
 80099ce:	bf00      	nop
 80099d0:	08013370 	.word	0x08013370
 80099d4:	000e0012 	.word	0x000e0012
 80099d8:	000e0016 	.word	0x000e0016
 80099dc:	00030060 	.word	0x00030060
 80099e0:	000f0048 	.word	0x000f0048
 80099e4:	001f0004 	.word	0x001f0004
 80099e8:	001f0008 	.word	0x001f0008
 80099ec:	000c0048 	.word	0x000c0048
 80099f0:	000c0028 	.word	0x000c0028
 80099f4:	000c0058 	.word	0x000c0058
 80099f8:	000c0030 	.word	0x000c0030
 80099fc:	000c0034 	.word	0x000c0034
 8009a00:	000c0038 	.word	0x000c0038
 8009a04:	000c002c 	.word	0x000c002c
 8009a08:	000d0020 	.word	0x000d0020
 8009a0c:	000c0064 	.word	0x000c0064
 8009a10:	000c0068 	.word	0x000c0068
 8009a14:	000c0060 	.word	0x000c0060
 8009a18:	000d0068 	.word	0x000d0068
 8009a1c:	000d0040 	.word	0x000d0040
 8009a20:	000d0044 	.word	0x000d0044
 8009a24:	000d0048 	.word	0x000d0048
 8009a28:	000d003c 	.word	0x000d003c
 8009a2c:	2500      	movs	r5, #0
 8009a2e:	f7fe ba0f 	b.w	8007e50 <dwt_ioctl+0x154>
 8009a32:	2500      	movs	r5, #0
 8009a34:	f7fe ba0c 	b.w	8007e50 <dwt_ioctl+0x154>
 8009a38:	2500      	movs	r5, #0
 8009a3a:	f7fe ba09 	b.w	8007e50 <dwt_ioctl+0x154>
 8009a3e:	2500      	movs	r5, #0
 8009a40:	f7fe ba06 	b.w	8007e50 <dwt_ioctl+0x154>
 8009a44:	2500      	movs	r5, #0
 8009a46:	f7fe ba03 	b.w	8007e50 <dwt_ioctl+0x154>
 8009a4a:	2500      	movs	r5, #0
 8009a4c:	f7fe ba00 	b.w	8007e50 <dwt_ioctl+0x154>
 8009a50:	2500      	movs	r5, #0
 8009a52:	f7fe b9fd 	b.w	8007e50 <dwt_ioctl+0x154>
 8009a56:	2500      	movs	r5, #0
 8009a58:	f7fe b9fa 	b.w	8007e50 <dwt_ioctl+0x154>
 8009a5c:	2500      	movs	r5, #0
 8009a5e:	f7fe b9f7 	b.w	8007e50 <dwt_ioctl+0x154>
 8009a62:	2500      	movs	r5, #0
 8009a64:	f7fe b9f4 	b.w	8007e50 <dwt_ioctl+0x154>
 8009a68:	2500      	movs	r5, #0
 8009a6a:	f7fe b9f1 	b.w	8007e50 <dwt_ioctl+0x154>
 8009a6e:	2500      	movs	r5, #0
 8009a70:	f7fe b9ee 	b.w	8007e50 <dwt_ioctl+0x154>
 8009a74:	2500      	movs	r5, #0
 8009a76:	f7fe b9eb 	b.w	8007e50 <dwt_ioctl+0x154>
 8009a7a:	2500      	movs	r5, #0
 8009a7c:	f7fe b9e8 	b.w	8007e50 <dwt_ioctl+0x154>
 8009a80:	2500      	movs	r5, #0
 8009a82:	f7fe b9e5 	b.w	8007e50 <dwt_ioctl+0x154>
 8009a86:	2500      	movs	r5, #0
 8009a88:	f7fe b9e2 	b.w	8007e50 <dwt_ioctl+0x154>
 8009a8c:	2500      	movs	r5, #0
 8009a8e:	f7fe b9df 	b.w	8007e50 <dwt_ioctl+0x154>
 8009a92:	2500      	movs	r5, #0
 8009a94:	f7fe b9dc 	b.w	8007e50 <dwt_ioctl+0x154>
 8009a98:	2500      	movs	r5, #0
 8009a9a:	f7fe b9d9 	b.w	8007e50 <dwt_ioctl+0x154>
 8009a9e:	2500      	movs	r5, #0
 8009aa0:	f7fe b9d6 	b.w	8007e50 <dwt_ioctl+0x154>
 8009aa4:	2500      	movs	r5, #0
 8009aa6:	f7fe b9d3 	b.w	8007e50 <dwt_ioctl+0x154>
 8009aaa:	2500      	movs	r5, #0
 8009aac:	f7fe b9d0 	b.w	8007e50 <dwt_ioctl+0x154>
 8009ab0:	2500      	movs	r5, #0
 8009ab2:	f7fe b9cd 	b.w	8007e50 <dwt_ioctl+0x154>
 8009ab6:	2500      	movs	r5, #0
 8009ab8:	f7fe b9ca 	b.w	8007e50 <dwt_ioctl+0x154>
 8009abc:	2500      	movs	r5, #0
 8009abe:	f7fe b9c7 	b.w	8007e50 <dwt_ioctl+0x154>
 8009ac2:	2500      	movs	r5, #0
 8009ac4:	f7fe b9c4 	b.w	8007e50 <dwt_ioctl+0x154>
 8009ac8:	2500      	movs	r5, #0
 8009aca:	f7fe b9c1 	b.w	8007e50 <dwt_ioctl+0x154>
 8009ace:	2500      	movs	r5, #0
 8009ad0:	f7fe b9be 	b.w	8007e50 <dwt_ioctl+0x154>
 8009ad4:	2500      	movs	r5, #0
 8009ad6:	f7fe b9bb 	b.w	8007e50 <dwt_ioctl+0x154>
 8009ada:	2500      	movs	r5, #0
 8009adc:	f7fe b9b8 	b.w	8007e50 <dwt_ioctl+0x154>
 8009ae0:	2500      	movs	r5, #0
 8009ae2:	f7fe b9b5 	b.w	8007e50 <dwt_ioctl+0x154>
 8009ae6:	2500      	movs	r5, #0
 8009ae8:	f7fe b9b2 	b.w	8007e50 <dwt_ioctl+0x154>
 8009aec:	2500      	movs	r5, #0
 8009aee:	f7fe b9af 	b.w	8007e50 <dwt_ioctl+0x154>
 8009af2:	2500      	movs	r5, #0
 8009af4:	f7fe b9ac 	b.w	8007e50 <dwt_ioctl+0x154>
 8009af8:	2500      	movs	r5, #0
 8009afa:	f7fe b9a9 	b.w	8007e50 <dwt_ioctl+0x154>
 8009afe:	2500      	movs	r5, #0
 8009b00:	f7fe b9a6 	b.w	8007e50 <dwt_ioctl+0x154>
 8009b04:	2500      	movs	r5, #0
 8009b06:	f7fe b9a3 	b.w	8007e50 <dwt_ioctl+0x154>
 8009b0a:	2500      	movs	r5, #0
 8009b0c:	f7fe b9a0 	b.w	8007e50 <dwt_ioctl+0x154>
 8009b10:	2500      	movs	r5, #0
 8009b12:	f7fe b99d 	b.w	8007e50 <dwt_ioctl+0x154>
 8009b16:	2500      	movs	r5, #0
 8009b18:	f7fe b99a 	b.w	8007e50 <dwt_ioctl+0x154>
 8009b1c:	2500      	movs	r5, #0
 8009b1e:	f7fe b997 	b.w	8007e50 <dwt_ioctl+0x154>
 8009b22:	2500      	movs	r5, #0
 8009b24:	f7fe b994 	b.w	8007e50 <dwt_ioctl+0x154>
 8009b28:	2500      	movs	r5, #0
 8009b2a:	f7fe b991 	b.w	8007e50 <dwt_ioctl+0x154>
 8009b2e:	2500      	movs	r5, #0
 8009b30:	f7fe b98e 	b.w	8007e50 <dwt_ioctl+0x154>
 8009b34:	2500      	movs	r5, #0
 8009b36:	f7fe b98b 	b.w	8007e50 <dwt_ioctl+0x154>
 8009b3a:	2500      	movs	r5, #0
 8009b3c:	f7fe b988 	b.w	8007e50 <dwt_ioctl+0x154>
 8009b40:	2500      	movs	r5, #0
 8009b42:	f7fe b985 	b.w	8007e50 <dwt_ioctl+0x154>
 8009b46:	2500      	movs	r5, #0
 8009b48:	f7fe b982 	b.w	8007e50 <dwt_ioctl+0x154>
 8009b4c:	2500      	movs	r5, #0
 8009b4e:	f7fe b97f 	b.w	8007e50 <dwt_ioctl+0x154>
 8009b52:	2500      	movs	r5, #0
 8009b54:	f7fe b97c 	b.w	8007e50 <dwt_ioctl+0x154>
 8009b58:	2500      	movs	r5, #0
 8009b5a:	f7fe b979 	b.w	8007e50 <dwt_ioctl+0x154>
 8009b5e:	f899 3011 	ldrb.w	r3, [r9, #17]
 8009b62:	1e5a      	subs	r2, r3, #1
 8009b64:	b2d2      	uxtb	r2, r2
 8009b66:	2a01      	cmp	r2, #1
 8009b68:	f67f a801 	bls.w	8008b6e <dwt_ioctl+0xe72>
 8009b6c:	2202      	movs	r2, #2
 8009b6e:	f7fe bf88 	b.w	8008a82 <dwt_ioctl+0xd86>
 8009b72:	2f00      	cmp	r7, #0
 8009b74:	f43f ac62 	beq.w	800943c <dwt_ioctl+0x1740>
 8009b78:	f819 1000 	ldrb.w	r1, [r9, r0]
 8009b7c:	1a5b      	subs	r3, r3, r1
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	e481      	b.n	8009486 <dwt_ioctl+0x178a>
 8009b82:	283f      	cmp	r0, #63	; 0x3f
 8009b84:	d027      	beq.n	8009bd6 <dwt_ioctl+0x1eda>
 8009b86:	2e00      	cmp	r6, #0
 8009b88:	f47f ac5e 	bne.w	8009448 <dwt_ioctl+0x174c>
 8009b8c:	3001      	adds	r0, #1
 8009b8e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8009b92:	f819 1000 	ldrb.w	r1, [r9, r0]
 8009b96:	440b      	add	r3, r1
 8009b98:	b29b      	uxth	r3, r3
 8009b9a:	459c      	cmp	ip, r3
 8009b9c:	f43f ac71 	beq.w	8009482 <dwt_ioctl+0x1786>
 8009ba0:	3d01      	subs	r5, #1
 8009ba2:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8009ba6:	f43f ac32 	beq.w	800940e <dwt_ioctl+0x1712>
 8009baa:	459e      	cmp	lr, r3
 8009bac:	f4bf ac40 	bcs.w	8009430 <dwt_ioctl+0x1734>
 8009bb0:	4598      	cmp	r8, r3
 8009bb2:	d9de      	bls.n	8009b72 <dwt_ioctl+0x1e76>
 8009bb4:	ebac 0103 	sub.w	r1, ip, r3
 8009bb8:	b209      	sxth	r1, r1
 8009bba:	2900      	cmp	r1, #0
 8009bbc:	bfb8      	it	lt
 8009bbe:	4249      	neglt	r1, r1
 8009bc0:	4559      	cmp	r1, fp
 8009bc2:	f77f ac2e 	ble.w	8009422 <dwt_ioctl+0x1726>
 8009bc6:	2f00      	cmp	r7, #0
 8009bc8:	f47f ac70 	bne.w	80094ac <dwt_ioctl+0x17b0>
 8009bcc:	283f      	cmp	r0, #63	; 0x3f
 8009bce:	d1da      	bne.n	8009b86 <dwt_ioctl+0x1e8a>
 8009bd0:	2f00      	cmp	r7, #0
 8009bd2:	f47f ac70 	bne.w	80094b6 <dwt_ioctl+0x17ba>
 8009bd6:	2a03      	cmp	r2, #3
 8009bd8:	f43f ac70 	beq.w	80094bc <dwt_ioctl+0x17c0>
 8009bdc:	2a02      	cmp	r2, #2
 8009bde:	f43f ac3f 	beq.w	8009460 <dwt_ioctl+0x1764>
 8009be2:	f81a 1002 	ldrb.w	r1, [sl, r2]
 8009be6:	185e      	adds	r6, r3, r1
 8009be8:	4566      	cmp	r6, ip
 8009bea:	f77f ac40 	ble.w	800946e <dwt_ioctl+0x1772>
 8009bee:	440b      	add	r3, r1
 8009bf0:	b29b      	uxth	r3, r3
 8009bf2:	3201      	adds	r2, #1
 8009bf4:	b2d2      	uxtb	r2, r2
 8009bf6:	2700      	movs	r7, #0
 8009bf8:	e426      	b.n	8009448 <dwt_ioctl+0x174c>
 8009bfa:	bf00      	nop

08009bfc <ull_initialise>:
 8009bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c00:	4605      	mov	r5, r0
 8009c02:	460e      	mov	r6, r1
 8009c04:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d05c      	beq.n	8009cc4 <ull_initialise+0xc8>
 8009c0a:	6d2c      	ldr	r4, [r5, #80]	; 0x50
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	73e3      	strb	r3, [r4, #15]
 8009c10:	2202      	movs	r2, #2
 8009c12:	8262      	strh	r2, [r4, #18]
 8009c14:	75a3      	strb	r3, [r4, #22]
 8009c16:	75e3      	strb	r3, [r4, #23]
 8009c18:	7423      	strb	r3, [r4, #16]
 8009c1a:	72a3      	strb	r3, [r4, #10]
 8009c1c:	72e3      	strb	r3, [r4, #11]
 8009c1e:	2104      	movs	r1, #4
 8009c20:	4628      	mov	r0, r5
 8009c22:	f7fc fd33 	bl	800668c <_dwt_otpread>
 8009c26:	4607      	mov	r7, r0
 8009c28:	2105      	movs	r1, #5
 8009c2a:	4628      	mov	r0, r5
 8009c2c:	f7fc fd2e 	bl	800668c <_dwt_otpread>
 8009c30:	4680      	mov	r8, r0
 8009c32:	210a      	movs	r1, #10
 8009c34:	4628      	mov	r0, r5
 8009c36:	f7fc fd29 	bl	800668c <_dwt_otpread>
 8009c3a:	f3c0 4004 	ubfx	r0, r0, #16, #5
 8009c3e:	7220      	strb	r0, [r4, #8]
 8009c40:	b127      	cbz	r7, 8009c4c <ull_initialise+0x50>
 8009c42:	f1b8 0f00 	cmp.w	r8, #0
 8009c46:	d001      	beq.n	8009c4c <ull_initialise+0x50>
 8009c48:	2800      	cmp	r0, #0
 8009c4a:	d140      	bne.n	8009cce <ull_initialise+0xd2>
 8009c4c:	2120      	movs	r1, #32
 8009c4e:	4628      	mov	r0, r5
 8009c50:	f7fc fd1c 	bl	800668c <_dwt_otpread>
 8009c54:	4b2f      	ldr	r3, [pc, #188]	; (8009d14 <ull_initialise+0x118>)
 8009c56:	4298      	cmp	r0, r3
 8009c58:	bf0c      	ite	eq
 8009c5a:	2301      	moveq	r3, #1
 8009c5c:	2300      	movne	r3, #0
 8009c5e:	7263      	strb	r3, [r4, #9]
 8009c60:	f016 0f10 	tst.w	r6, #16
 8009c64:	d137      	bne.n	8009cd6 <ull_initialise+0xda>
 8009c66:	f016 0f20 	tst.w	r6, #32
 8009c6a:	d13a      	bne.n	8009ce2 <ull_initialise+0xe6>
 8009c6c:	f016 0f40 	tst.w	r6, #64	; 0x40
 8009c70:	d13d      	bne.n	8009cee <ull_initialise+0xf2>
 8009c72:	f016 0f80 	tst.w	r6, #128	; 0x80
 8009c76:	d141      	bne.n	8009cfc <ull_initialise+0x100>
 8009c78:	7ae3      	ldrb	r3, [r4, #11]
 8009c7a:	b90b      	cbnz	r3, 8009c80 <ull_initialise+0x84>
 8009c7c:	2385      	movs	r3, #133	; 0x85
 8009c7e:	72e3      	strb	r3, [r4, #11]
 8009c80:	7aa3      	ldrb	r3, [r4, #10]
 8009c82:	b90b      	cbnz	r3, 8009c88 <ull_initialise+0x8c>
 8009c84:	2374      	movs	r3, #116	; 0x74
 8009c86:	72a3      	strb	r3, [r4, #10]
 8009c88:	211f      	movs	r1, #31
 8009c8a:	4628      	mov	r0, r5
 8009c8c:	f7fc fcfe 	bl	800668c <_dwt_otpread>
 8009c90:	7360      	strb	r0, [r4, #13]
 8009c92:	211e      	movs	r1, #30
 8009c94:	4628      	mov	r0, r5
 8009c96:	f7fc fcf9 	bl	800668c <_dwt_otpread>
 8009c9a:	f010 003f 	ands.w	r0, r0, #63	; 0x3f
 8009c9e:	bf12      	itee	ne
 8009ca0:	73a0      	strbne	r0, [r4, #14]
 8009ca2:	232e      	moveq	r3, #46	; 0x2e
 8009ca4:	73a3      	strbeq	r3, [r4, #14]
 8009ca6:	7ba3      	ldrb	r3, [r4, #14]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	491b      	ldr	r1, [pc, #108]	; (8009d18 <ull_initialise+0x11c>)
 8009cac:	4628      	mov	r0, r5
 8009cae:	f7fc fc40 	bl	8006532 <dwt_write8bitoffsetreg>
 8009cb2:	2135      	movs	r1, #53	; 0x35
 8009cb4:	4628      	mov	r0, r5
 8009cb6:	f7fc fce9 	bl	800668c <_dwt_otpread>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	bb20      	cbnz	r0, 8009d08 <ull_initialise+0x10c>
 8009cbe:	2000      	movs	r0, #0
 8009cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cc4:	202c      	movs	r0, #44	; 0x2c
 8009cc6:	f009 f903 	bl	8012ed0 <malloc>
 8009cca:	6528      	str	r0, [r5, #80]	; 0x50
 8009ccc:	e79d      	b.n	8009c0a <ull_initialise+0xe>
 8009cce:	4628      	mov	r0, r5
 8009cd0:	f7fd fcca 	bl	8007668 <_dwt_prog_ldo_and_bias_tune>
 8009cd4:	e7ba      	b.n	8009c4c <ull_initialise+0x50>
 8009cd6:	2106      	movs	r1, #6
 8009cd8:	4628      	mov	r0, r5
 8009cda:	f7fc fcd7 	bl	800668c <_dwt_otpread>
 8009cde:	6020      	str	r0, [r4, #0]
 8009ce0:	e7c1      	b.n	8009c66 <ull_initialise+0x6a>
 8009ce2:	2107      	movs	r1, #7
 8009ce4:	4628      	mov	r0, r5
 8009ce6:	f7fc fcd1 	bl	800668c <_dwt_otpread>
 8009cea:	6060      	str	r0, [r4, #4]
 8009cec:	e7be      	b.n	8009c6c <ull_initialise+0x70>
 8009cee:	2108      	movs	r1, #8
 8009cf0:	4628      	mov	r0, r5
 8009cf2:	f7fc fccb 	bl	800668c <_dwt_otpread>
 8009cf6:	0c00      	lsrs	r0, r0, #16
 8009cf8:	72a0      	strb	r0, [r4, #10]
 8009cfa:	e7ba      	b.n	8009c72 <ull_initialise+0x76>
 8009cfc:	2109      	movs	r1, #9
 8009cfe:	4628      	mov	r0, r5
 8009d00:	f7fc fcc4 	bl	800668c <_dwt_otpread>
 8009d04:	72e0      	strb	r0, [r4, #11]
 8009d06:	e7b7      	b.n	8009c78 <ull_initialise+0x7c>
 8009d08:	2200      	movs	r2, #0
 8009d0a:	4904      	ldr	r1, [pc, #16]	; (8009d1c <ull_initialise+0x120>)
 8009d0c:	4628      	mov	r0, r5
 8009d0e:	f7fc fd63 	bl	80067d8 <dwt_write32bitoffsetreg>
 8009d12:	e7d4      	b.n	8009cbe <ull_initialise+0xc2>
 8009d14:	10000240 	.word	0x10000240
 8009d18:	00090014 	.word	0x00090014
 8009d1c:	00090004 	.word	0x00090004

08009d20 <_init>:
 8009d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d22:	b085      	sub	sp, #20
 8009d24:	4604      	mov	r4, r0
 8009d26:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009d28:	6819      	ldr	r1, [r3, #0]
 8009d2a:	f7ff ff67 	bl	8009bfc <ull_initialise>
 8009d2e:	4606      	mov	r6, r0
 8009d30:	6823      	ldr	r3, [r4, #0]
 8009d32:	691b      	ldr	r3, [r3, #16]
 8009d34:	4798      	blx	r3
 8009d36:	ab03      	add	r3, sp, #12
 8009d38:	2200      	movs	r2, #0
 8009d3a:	4611      	mov	r1, r2
 8009d3c:	4620      	mov	r0, r4
 8009d3e:	f7fd ffdd 	bl	8007cfc <dwt_ioctl>
 8009d42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d46:	6819      	ldr	r1, [r3, #0]
 8009d48:	4620      	mov	r0, r4
 8009d4a:	f7fd fdad 	bl	80078a8 <ull_configure>
 8009d4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d52:	6859      	ldr	r1, [r3, #4]
 8009d54:	4620      	mov	r0, r4
 8009d56:	f7fd fb47 	bl	80073e8 <ull_configuretxrf>
 8009d5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d5e:	89db      	ldrh	r3, [r3, #14]
 8009d60:	2200      	movs	r2, #0
 8009d62:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 8009d66:	4620      	mov	r0, r4
 8009d68:	f7fc fc35 	bl	80065d6 <dwt_write16bitoffsetreg>
 8009d6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d70:	899b      	ldrh	r3, [r3, #12]
 8009d72:	2200      	movs	r2, #0
 8009d74:	4952      	ldr	r1, [pc, #328]	; (8009ec0 <_init+0x1a0>)
 8009d76:	4620      	mov	r0, r4
 8009d78:	f7fc fc2d 	bl	80065d6 <dwt_write16bitoffsetreg>
 8009d7c:	2100      	movs	r1, #0
 8009d7e:	4620      	mov	r0, r4
 8009d80:	f7fc fec6 	bl	8006b10 <ull_setrxaftertxdelay>
 8009d84:	2500      	movs	r5, #0
 8009d86:	9500      	str	r5, [sp, #0]
 8009d88:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 8009d8c:	462a      	mov	r2, r5
 8009d8e:	2110      	movs	r1, #16
 8009d90:	4620      	mov	r0, r4
 8009d92:	f7fd fc4f 	bl	8007634 <dwt_modify16bitoffsetreg>
 8009d96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d9a:	895a      	ldrh	r2, [r3, #10]
 8009d9c:	8919      	ldrh	r1, [r3, #8]
 8009d9e:	4620      	mov	r0, r4
 8009da0:	f7fd fbb2 	bl	8007508 <ull_configureframefilter>
 8009da4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009da8:	8a1b      	ldrh	r3, [r3, #16]
 8009daa:	2202      	movs	r2, #2
 8009dac:	210c      	movs	r1, #12
 8009dae:	4620      	mov	r0, r4
 8009db0:	f7fc fc11 	bl	80065d6 <dwt_write16bitoffsetreg>
 8009db4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009db8:	8a5b      	ldrh	r3, [r3, #18]
 8009dba:	462a      	mov	r2, r5
 8009dbc:	210c      	movs	r1, #12
 8009dbe:	4620      	mov	r0, r4
 8009dc0:	f7fc fc09 	bl	80065d6 <dwt_write16bitoffsetreg>
 8009dc4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009dc6:	7a19      	ldrb	r1, [r3, #8]
 8009dc8:	4620      	mov	r0, r4
 8009dca:	f7fd fc69 	bl	80076a0 <ull_setleds>
 8009dce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009dd0:	68d9      	ldr	r1, [r3, #12]
 8009dd2:	4620      	mov	r0, r4
 8009dd4:	f7fc feb2 	bl	8006b3c <ull_setlnapamode>
 8009dd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009dda:	7e0b      	ldrb	r3, [r1, #24]
 8009ddc:	694a      	ldr	r2, [r1, #20]
 8009dde:	6909      	ldr	r1, [r1, #16]
 8009de0:	4620      	mov	r0, r4
 8009de2:	f7fd f9e9 	bl	80071b8 <ull_setinterrupt>
 8009de6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009de8:	7f9a      	ldrb	r2, [r3, #30]
 8009dea:	8b99      	ldrh	r1, [r3, #28]
 8009dec:	4620      	mov	r0, r4
 8009dee:	f7fc fcb7 	bl	8006760 <ull_configuresleep>
 8009df2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8009df4:	7b93      	ldrb	r3, [r2, #14]
 8009df6:	2b2e      	cmp	r3, #46	; 0x2e
 8009df8:	d005      	beq.n	8009e06 <_init+0xe6>
 8009dfa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009dfc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009e00:	f033 033f 	bics.w	r3, r3, #63	; 0x3f
 8009e04:	d00a      	beq.n	8009e1c <_init+0xfc>
 8009e06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009e08:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009e0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e10:	7393      	strb	r3, [r2, #14]
 8009e12:	2200      	movs	r2, #0
 8009e14:	492b      	ldr	r1, [pc, #172]	; (8009ec4 <_init+0x1a4>)
 8009e16:	4620      	mov	r0, r4
 8009e18:	f7fc fb8b 	bl	8006532 <dwt_write8bitoffsetreg>
 8009e1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009e1e:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 8009e22:	4620      	mov	r0, r4
 8009e24:	f7fd fa68 	bl	80072f8 <ull_configciadiag>
 8009e28:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009e2a:	6a19      	ldr	r1, [r3, #32]
 8009e2c:	4620      	mov	r0, r4
 8009e2e:	f7fc fea7 	bl	8006b80 <ull_configurestskey>
 8009e32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009e34:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009e36:	4620      	mov	r0, r4
 8009e38:	f7fc fec6 	bl	8006bc8 <ull_configurestsiv>
 8009e3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009e3e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8009e42:	bba3      	cbnz	r3, 8009eae <_init+0x18e>
 8009e44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009e46:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 8009e4a:	4620      	mov	r0, r4
 8009e4c:	f7fc fbb0 	bl	80065b0 <ull_configeventcounters>
 8009e50:	f994 504c 	ldrsb.w	r5, [r4, #76]	; 0x4c
 8009e54:	2d00      	cmp	r5, #0
 8009e56:	db27      	blt.n	8009ea8 <_init+0x188>
 8009e58:	2301      	movs	r3, #1
 8009e5a:	fa03 f505 	lsl.w	r5, r3, r5
 8009e5e:	b2af      	uxth	r7, r5
 8009e60:	f04f 7290 	mov.w	r2, #18874368	; 0x1200000
 8009e64:	4639      	mov	r1, r7
 8009e66:	4620      	mov	r0, r4
 8009e68:	f7fd f988 	bl	800717c <ull_setgpiomode>
 8009e6c:	f10d 030a 	add.w	r3, sp, #10
 8009e70:	9300      	str	r3, [sp, #0]
 8009e72:	2302      	movs	r3, #2
 8009e74:	2200      	movs	r2, #0
 8009e76:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8009e7a:	4620      	mov	r0, r4
 8009e7c:	f7fb ff60 	bl	8005d40 <dwt_readfromdevice>
 8009e80:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8009e84:	ea23 0305 	bic.w	r3, r3, r5
 8009e88:	f8ad 300a 	strh.w	r3, [sp, #10]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	490e      	ldr	r1, [pc, #56]	; (8009ec8 <_init+0x1a8>)
 8009e90:	4620      	mov	r0, r4
 8009e92:	f7fc fba0 	bl	80065d6 <dwt_write16bitoffsetreg>
 8009e96:	f994 204d 	ldrsb.w	r2, [r4, #77]	; 0x4d
 8009e9a:	fab2 f282 	clz	r2, r2
 8009e9e:	0952      	lsrs	r2, r2, #5
 8009ea0:	4639      	mov	r1, r7
 8009ea2:	4620      	mov	r0, r4
 8009ea4:	f7fd fc7a 	bl	800779c <ull_setgpiovalue>
 8009ea8:	4630      	mov	r0, r6
 8009eaa:	b005      	add	sp, #20
 8009eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009eae:	2301      	movs	r3, #1
 8009eb0:	9300      	str	r3, [sp, #0]
 8009eb2:	23ff      	movs	r3, #255	; 0xff
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	4905      	ldr	r1, [pc, #20]	; (8009ecc <_init+0x1ac>)
 8009eb8:	4620      	mov	r0, r4
 8009eba:	f7fd fa09 	bl	80072d0 <dwt_modify8bitoffsetreg>
 8009ebe:	e7c1      	b.n	8009e44 <_init+0x124>
 8009ec0:	00010004 	.word	0x00010004
 8009ec4:	00090014 	.word	0x00090014
 8009ec8:	00050008 	.word	0x00050008
 8009ecc:	00020004 	.word	0x00020004

08009ed0 <dwt_dbg_fn>:
 8009ed0:	2998      	cmp	r1, #152	; 0x98
 8009ed2:	4802      	ldr	r0, [pc, #8]	; (8009edc <dwt_dbg_fn+0xc>)
 8009ed4:	bf18      	it	ne
 8009ed6:	2000      	movne	r0, #0
 8009ed8:	4770      	bx	lr
 8009eda:	bf00      	nop
 8009edc:	08013478 	.word	0x08013478

08009ee0 <_deinit>:
 8009ee0:	4770      	bx	lr

08009ee2 <dwt_xfer3xxx>:
 8009ee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ee6:	b084      	sub	sp, #16
 8009ee8:	4605      	mov	r5, r0
 8009eea:	460f      	mov	r7, r1
 8009eec:	461e      	mov	r6, r3
 8009eee:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8009ef2:	1e59      	subs	r1, r3, #1
 8009ef4:	b289      	uxth	r1, r1
 8009ef6:	2901      	cmp	r1, #1
 8009ef8:	d91c      	bls.n	8009f34 <dwt_xfer3xxx+0x52>
 8009efa:	19d0      	adds	r0, r2, r7
 8009efc:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8009f00:	443a      	add	r2, r7
 8009f02:	f3c2 4104 	ubfx	r1, r2, #16, #5
 8009f06:	0082      	lsls	r2, r0, #2
 8009f08:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8009f0c:	ea43 0102 	orr.w	r1, r3, r2
 8009f10:	0a09      	lsrs	r1, r1, #8
 8009f12:	f88d 100c 	strb.w	r1, [sp, #12]
 8009f16:	b920      	cbnz	r0, 8009f22 <dwt_xfer3xxx+0x40>
 8009f18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f1c:	d018      	beq.n	8009f50 <dwt_xfer3xxx+0x6e>
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d037      	beq.n	8009f92 <dwt_xfer3xxx+0xb0>
 8009f22:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8009f26:	f88d 100c 	strb.w	r1, [sp, #12]
 8009f2a:	431a      	orrs	r2, r3
 8009f2c:	f88d 200d 	strb.w	r2, [sp, #13]
 8009f30:	2402      	movs	r4, #2
 8009f32:	e005      	b.n	8009f40 <dwt_xfer3xxx+0x5e>
 8009f34:	007a      	lsls	r2, r7, #1
 8009f36:	f062 027e 	orn	r2, r2, #126	; 0x7e
 8009f3a:	f88d 200c 	strb.w	r2, [sp, #12]
 8009f3e:	2401      	movs	r4, #1
 8009f40:	2b02      	cmp	r3, #2
 8009f42:	d006      	beq.n	8009f52 <dwt_xfer3xxx+0x70>
 8009f44:	d326      	bcc.n	8009f94 <dwt_xfer3xxx+0xb2>
 8009f46:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8009f4a:	2b03      	cmp	r3, #3
 8009f4c:	d901      	bls.n	8009f52 <dwt_xfer3xxx+0x70>
 8009f4e:	e7fe      	b.n	8009f4e <dwt_xfer3xxx+0x6c>
 8009f50:	2401      	movs	r4, #1
 8009f52:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8009f54:	7d1b      	ldrb	r3, [r3, #20]
 8009f56:	b94b      	cbnz	r3, 8009f6c <dwt_xfer3xxx+0x8a>
 8009f58:	682b      	ldr	r3, [r5, #0]
 8009f5a:	685d      	ldr	r5, [r3, #4]
 8009f5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f5e:	4632      	mov	r2, r6
 8009f60:	a903      	add	r1, sp, #12
 8009f62:	4620      	mov	r0, r4
 8009f64:	47a8      	blx	r5
 8009f66:	b004      	add	sp, #16
 8009f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	4621      	mov	r1, r4
 8009f70:	a803      	add	r0, sp, #12
 8009f72:	f7fb fdfd 	bl	8005b70 <dwt_generatecrc8>
 8009f76:	4602      	mov	r2, r0
 8009f78:	4631      	mov	r1, r6
 8009f7a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009f7c:	f7fb fdf8 	bl	8005b70 <dwt_generatecrc8>
 8009f80:	682b      	ldr	r3, [r5, #0]
 8009f82:	9000      	str	r0, [sp, #0]
 8009f84:	689d      	ldr	r5, [r3, #8]
 8009f86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f88:	4632      	mov	r2, r6
 8009f8a:	a903      	add	r1, sp, #12
 8009f8c:	4620      	mov	r0, r4
 8009f8e:	47a8      	blx	r5
 8009f90:	e7e9      	b.n	8009f66 <dwt_xfer3xxx+0x84>
 8009f92:	2401      	movs	r4, #1
 8009f94:	682b      	ldr	r3, [r5, #0]
 8009f96:	f8d3 8000 	ldr.w	r8, [r3]
 8009f9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f9c:	4632      	mov	r2, r6
 8009f9e:	a903      	add	r1, sp, #12
 8009fa0:	4620      	mov	r0, r4
 8009fa2:	47c0      	blx	r8
 8009fa4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8009fa6:	7d1b      	ldrb	r3, [r3, #20]
 8009fa8:	2b02      	cmp	r3, #2
 8009faa:	d1dc      	bne.n	8009f66 <dwt_xfer3xxx+0x84>
 8009fac:	2f18      	cmp	r7, #24
 8009fae:	d0da      	beq.n	8009f66 <dwt_xfer3xxx+0x84>
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	4621      	mov	r1, r4
 8009fb4:	a803      	add	r0, sp, #12
 8009fb6:	f7fb fddb 	bl	8005b70 <dwt_generatecrc8>
 8009fba:	4602      	mov	r2, r0
 8009fbc:	4631      	mov	r1, r6
 8009fbe:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009fc0:	f7fb fdd6 	bl	8005b70 <dwt_generatecrc8>
 8009fc4:	4604      	mov	r4, r0
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	2118      	movs	r1, #24
 8009fca:	4628      	mov	r0, r5
 8009fcc:	f000 f839 	bl	800a042 <dwt_read8bitoffsetreg>
 8009fd0:	4284      	cmp	r4, r0
 8009fd2:	d0c8      	beq.n	8009f66 <dwt_xfer3xxx+0x84>
 8009fd4:	68eb      	ldr	r3, [r5, #12]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d0c5      	beq.n	8009f66 <dwt_xfer3xxx+0x84>
 8009fda:	4798      	blx	r3
 8009fdc:	e7c3      	b.n	8009f66 <dwt_xfer3xxx+0x84>

08009fde <dwt_readfromdevice>:
 8009fde:	b510      	push	{r4, lr}
 8009fe0:	b082      	sub	sp, #8
 8009fe2:	2400      	movs	r4, #0
 8009fe4:	9401      	str	r4, [sp, #4]
 8009fe6:	9c04      	ldr	r4, [sp, #16]
 8009fe8:	9400      	str	r4, [sp, #0]
 8009fea:	f7ff ff7a 	bl	8009ee2 <dwt_xfer3xxx>
 8009fee:	b002      	add	sp, #8
 8009ff0:	bd10      	pop	{r4, pc}

08009ff2 <dwt_read32bitoffsetreg>:
 8009ff2:	b500      	push	{lr}
 8009ff4:	b085      	sub	sp, #20
 8009ff6:	ab03      	add	r3, sp, #12
 8009ff8:	9300      	str	r3, [sp, #0]
 8009ffa:	2304      	movs	r3, #4
 8009ffc:	b292      	uxth	r2, r2
 8009ffe:	f7ff ffee 	bl	8009fde <dwt_readfromdevice>
 800a002:	f10d 030f 	add.w	r3, sp, #15
 800a006:	f10d 010b 	add.w	r1, sp, #11
 800a00a:	2000      	movs	r0, #0
 800a00c:	f813 2901 	ldrb.w	r2, [r3], #-1
 800a010:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 800a014:	428b      	cmp	r3, r1
 800a016:	d1f9      	bne.n	800a00c <dwt_read32bitoffsetreg+0x1a>
 800a018:	b005      	add	sp, #20
 800a01a:	f85d fb04 	ldr.w	pc, [sp], #4

0800a01e <dwt_read16bitoffsetreg>:
 800a01e:	b500      	push	{lr}
 800a020:	b085      	sub	sp, #20
 800a022:	ab03      	add	r3, sp, #12
 800a024:	9300      	str	r3, [sp, #0]
 800a026:	2302      	movs	r3, #2
 800a028:	b292      	uxth	r2, r2
 800a02a:	f7ff ffd8 	bl	8009fde <dwt_readfromdevice>
 800a02e:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800a032:	f89d 000c 	ldrb.w	r0, [sp, #12]
 800a036:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 800a03a:	b280      	uxth	r0, r0
 800a03c:	b005      	add	sp, #20
 800a03e:	f85d fb04 	ldr.w	pc, [sp], #4

0800a042 <dwt_read8bitoffsetreg>:
 800a042:	b500      	push	{lr}
 800a044:	b085      	sub	sp, #20
 800a046:	f10d 030f 	add.w	r3, sp, #15
 800a04a:	9300      	str	r3, [sp, #0]
 800a04c:	2301      	movs	r3, #1
 800a04e:	b292      	uxth	r2, r2
 800a050:	f7ff ffc5 	bl	8009fde <dwt_readfromdevice>
 800a054:	f89d 000f 	ldrb.w	r0, [sp, #15]
 800a058:	b005      	add	sp, #20
 800a05a:	f85d fb04 	ldr.w	pc, [sp], #4

0800a05e <ull_readdiagnostics>:
 800a05e:	b530      	push	{r4, r5, lr}
 800a060:	b0bd      	sub	sp, #244	; 0xf4
 800a062:	4605      	mov	r5, r0
 800a064:	460c      	mov	r4, r1
 800a066:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800a068:	7b9a      	ldrb	r2, [r3, #14]
 800a06a:	2a01      	cmp	r2, #1
 800a06c:	d01c      	beq.n	800a0a8 <ull_readdiagnostics+0x4a>
 800a06e:	2a03      	cmp	r2, #3
 800a070:	f040 81e8 	bne.w	800a444 <ull_readdiagnostics+0x3e6>
 800a074:	7d9b      	ldrb	r3, [r3, #22]
 800a076:	f013 0f08 	tst.w	r3, #8
 800a07a:	d10c      	bne.n	800a096 <ull_readdiagnostics+0x38>
 800a07c:	f013 0f04 	tst.w	r3, #4
 800a080:	ab02      	add	r3, sp, #8
 800a082:	9300      	str	r3, [sp, #0]
 800a084:	bf14      	ite	ne
 800a086:	2338      	movne	r3, #56	; 0x38
 800a088:	2320      	moveq	r3, #32
 800a08a:	2200      	movs	r2, #0
 800a08c:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800a090:	f7ff ffa5 	bl	8009fde <dwt_readfromdevice>
 800a094:	e019      	b.n	800a0ca <ull_readdiagnostics+0x6c>
 800a096:	ab02      	add	r3, sp, #8
 800a098:	9300      	str	r3, [sp, #0]
 800a09a:	23e8      	movs	r3, #232	; 0xe8
 800a09c:	2200      	movs	r2, #0
 800a09e:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800a0a2:	f7ff ff9c 	bl	8009fde <dwt_readfromdevice>
 800a0a6:	e010      	b.n	800a0ca <ull_readdiagnostics+0x6c>
 800a0a8:	7d9b      	ldrb	r3, [r3, #22]
 800a0aa:	f013 0f08 	tst.w	r3, #8
 800a0ae:	f040 81c0 	bne.w	800a432 <ull_readdiagnostics+0x3d4>
 800a0b2:	f013 0f04 	tst.w	r3, #4
 800a0b6:	ab02      	add	r3, sp, #8
 800a0b8:	9300      	str	r3, [sp, #0]
 800a0ba:	bf14      	ite	ne
 800a0bc:	2338      	movne	r3, #56	; 0x38
 800a0be:	2320      	moveq	r3, #32
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 800a0c6:	f7ff ff8a 	bl	8009fde <dwt_readfromdevice>
 800a0ca:	f10d 0217 	add.w	r2, sp, #23
 800a0ce:	f104 031a 	add.w	r3, r4, #26
 800a0d2:	f104 0020 	add.w	r0, r4, #32
 800a0d6:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800a0da:	f803 1b01 	strb.w	r1, [r3], #1
 800a0de:	4283      	cmp	r3, r0
 800a0e0:	d1f9      	bne.n	800a0d6 <ull_readdiagnostics+0x78>
 800a0e2:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800a0e6:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800a0ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a0ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a0f2:	8463      	strh	r3, [r4, #34]	; 0x22
 800a0f4:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800a0f8:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800a0fc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a100:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a104:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800a108:	bf1c      	itt	ne
 800a10a:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 800a10e:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 800a112:	8423      	strh	r3, [r4, #32]
 800a114:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 800a118:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800a11c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a120:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a124:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800a126:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800a128:	7d9b      	ldrb	r3, [r3, #22]
 800a12a:	f013 0f02 	tst.w	r3, #2
 800a12e:	f040 817e 	bne.w	800a42e <ull_readdiagnostics+0x3d0>
 800a132:	aa0a      	add	r2, sp, #40	; 0x28
 800a134:	1e63      	subs	r3, r4, #1
 800a136:	1d20      	adds	r0, r4, #4
 800a138:	f812 1b01 	ldrb.w	r1, [r2], #1
 800a13c:	f803 1f01 	strb.w	r1, [r3, #1]!
 800a140:	79d1      	ldrb	r1, [r2, #7]
 800a142:	7219      	strb	r1, [r3, #8]
 800a144:	7bd1      	ldrb	r1, [r2, #15]
 800a146:	7459      	strb	r1, [r3, #17]
 800a148:	4283      	cmp	r3, r0
 800a14a:	d1f5      	bne.n	800a138 <ull_readdiagnostics+0xda>
 800a14c:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 800a150:	7163      	strb	r3, [r4, #5]
 800a152:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 800a156:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 800a15a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a15e:	80e3      	strh	r3, [r4, #6]
 800a160:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 800a164:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 800a168:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800a16c:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 800a170:	f8a4 300d 	strh.w	r3, [r4, #13]
 800a174:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 800a178:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 800a17c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a180:	f8a4 300f 	strh.w	r3, [r4, #15]
 800a184:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 800a188:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 800a18c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800a190:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 800a194:	82e3      	strh	r3, [r4, #22]
 800a196:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
 800a19a:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 800a19e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a1a2:	8323      	strh	r3, [r4, #24]
 800a1a4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800a1a6:	7d9b      	ldrb	r3, [r3, #22]
 800a1a8:	f013 0f04 	tst.w	r3, #4
 800a1ac:	f040 813f 	bne.w	800a42e <ull_readdiagnostics+0x3d0>
 800a1b0:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 800a1b4:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800a1b8:	041b      	lsls	r3, r3, #16
 800a1ba:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a1be:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 800a1c2:	4313      	orrs	r3, r2
 800a1c4:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 800a1c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a1cc:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800a1d0:	6263      	str	r3, [r4, #36]	; 0x24
 800a1d2:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
 800a1d6:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
 800a1da:	041b      	lsls	r3, r3, #16
 800a1dc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a1e0:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800a1e4:	4313      	orrs	r3, r2
 800a1e6:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
 800a1ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a1ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a1f2:	62a3      	str	r3, [r4, #40]	; 0x28
 800a1f4:	f89d 204b 	ldrb.w	r2, [sp, #75]	; 0x4b
 800a1f8:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 800a1fc:	041b      	lsls	r3, r3, #16
 800a1fe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a202:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 800a206:	4313      	orrs	r3, r2
 800a208:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 800a20c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a210:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a214:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a216:	f89d 204f 	ldrb.w	r2, [sp, #79]	; 0x4f
 800a21a:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
 800a21e:	041b      	lsls	r3, r3, #16
 800a220:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a224:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 800a228:	4313      	orrs	r3, r2
 800a22a:	f89d 204d 	ldrb.w	r2, [sp, #77]	; 0x4d
 800a22e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a232:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a236:	6323      	str	r3, [r4, #48]	; 0x30
 800a238:	f89d 2053 	ldrb.w	r2, [sp, #83]	; 0x53
 800a23c:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
 800a240:	041b      	lsls	r3, r3, #16
 800a242:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a246:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 800a24a:	4313      	orrs	r3, r2
 800a24c:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 800a250:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a254:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a258:	6363      	str	r3, [r4, #52]	; 0x34
 800a25a:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
 800a25e:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
 800a262:	041b      	lsls	r3, r3, #16
 800a264:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a268:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 800a26c:	4313      	orrs	r3, r2
 800a26e:	f89d 2055 	ldrb.w	r2, [sp, #85]	; 0x55
 800a272:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a276:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a27a:	63a3      	str	r3, [r4, #56]	; 0x38
 800a27c:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 800a280:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 800a284:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a288:	87a3      	strh	r3, [r4, #60]	; 0x3c
 800a28a:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 800a28e:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 800a292:	041b      	lsls	r3, r3, #16
 800a294:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a298:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 800a29c:	4313      	orrs	r3, r2
 800a29e:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 800a2a2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a2a6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800a2aa:	6423      	str	r3, [r4, #64]	; 0x40
 800a2ac:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
 800a2b0:	f89d 307a 	ldrb.w	r3, [sp, #122]	; 0x7a
 800a2b4:	041b      	lsls	r3, r3, #16
 800a2b6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a2ba:	f89d 2078 	ldrb.w	r2, [sp, #120]	; 0x78
 800a2be:	4313      	orrs	r3, r2
 800a2c0:	f89d 2079 	ldrb.w	r2, [sp, #121]	; 0x79
 800a2c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a2c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a2cc:	6463      	str	r3, [r4, #68]	; 0x44
 800a2ce:	f89d 207f 	ldrb.w	r2, [sp, #127]	; 0x7f
 800a2d2:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
 800a2d6:	041b      	lsls	r3, r3, #16
 800a2d8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a2dc:	f89d 207c 	ldrb.w	r2, [sp, #124]	; 0x7c
 800a2e0:	4313      	orrs	r3, r2
 800a2e2:	f89d 207d 	ldrb.w	r2, [sp, #125]	; 0x7d
 800a2e6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a2ea:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a2ee:	64a3      	str	r3, [r4, #72]	; 0x48
 800a2f0:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
 800a2f4:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
 800a2f8:	041b      	lsls	r3, r3, #16
 800a2fa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a2fe:	f89d 2080 	ldrb.w	r2, [sp, #128]	; 0x80
 800a302:	4313      	orrs	r3, r2
 800a304:	f89d 2081 	ldrb.w	r2, [sp, #129]	; 0x81
 800a308:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a30c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a310:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a312:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
 800a316:	f89d 3086 	ldrb.w	r3, [sp, #134]	; 0x86
 800a31a:	041b      	lsls	r3, r3, #16
 800a31c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a320:	f89d 2084 	ldrb.w	r2, [sp, #132]	; 0x84
 800a324:	4313      	orrs	r3, r2
 800a326:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 800a32a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a32e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a332:	6523      	str	r3, [r4, #80]	; 0x50
 800a334:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 800a338:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 800a33c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a340:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800a344:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 800a348:	f89d 20a5 	ldrb.w	r2, [sp, #165]	; 0xa5
 800a34c:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 800a350:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a354:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a358:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 800a35c:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 800a360:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 800a364:	041b      	lsls	r3, r3, #16
 800a366:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a36a:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 800a36e:	4313      	orrs	r3, r2
 800a370:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 800a374:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a378:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800a37c:	65a3      	str	r3, [r4, #88]	; 0x58
 800a37e:	f89d 20c3 	ldrb.w	r2, [sp, #195]	; 0xc3
 800a382:	f89d 30c2 	ldrb.w	r3, [sp, #194]	; 0xc2
 800a386:	041b      	lsls	r3, r3, #16
 800a388:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a38c:	f89d 20c0 	ldrb.w	r2, [sp, #192]	; 0xc0
 800a390:	4313      	orrs	r3, r2
 800a392:	f89d 20c1 	ldrb.w	r2, [sp, #193]	; 0xc1
 800a396:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a39a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a39e:	65e3      	str	r3, [r4, #92]	; 0x5c
 800a3a0:	f89d 20c7 	ldrb.w	r2, [sp, #199]	; 0xc7
 800a3a4:	f89d 30c6 	ldrb.w	r3, [sp, #198]	; 0xc6
 800a3a8:	041b      	lsls	r3, r3, #16
 800a3aa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a3ae:	f89d 20c4 	ldrb.w	r2, [sp, #196]	; 0xc4
 800a3b2:	4313      	orrs	r3, r2
 800a3b4:	f89d 20c5 	ldrb.w	r2, [sp, #197]	; 0xc5
 800a3b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a3bc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a3c0:	6623      	str	r3, [r4, #96]	; 0x60
 800a3c2:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
 800a3c6:	f89d 30ca 	ldrb.w	r3, [sp, #202]	; 0xca
 800a3ca:	041b      	lsls	r3, r3, #16
 800a3cc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a3d0:	f89d 20c8 	ldrb.w	r2, [sp, #200]	; 0xc8
 800a3d4:	4313      	orrs	r3, r2
 800a3d6:	f89d 20c9 	ldrb.w	r2, [sp, #201]	; 0xc9
 800a3da:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a3de:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a3e2:	6663      	str	r3, [r4, #100]	; 0x64
 800a3e4:	f89d 20cf 	ldrb.w	r2, [sp, #207]	; 0xcf
 800a3e8:	f89d 30ce 	ldrb.w	r3, [sp, #206]	; 0xce
 800a3ec:	041b      	lsls	r3, r3, #16
 800a3ee:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a3f2:	f89d 20cc 	ldrb.w	r2, [sp, #204]	; 0xcc
 800a3f6:	4313      	orrs	r3, r2
 800a3f8:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 800a3fc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a400:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a404:	66a3      	str	r3, [r4, #104]	; 0x68
 800a406:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 800a40a:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 800a40e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a412:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800a416:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 800a41a:	f89d 20ed 	ldrb.w	r2, [sp, #237]	; 0xed
 800a41e:	f89d 30ec 	ldrb.w	r3, [sp, #236]	; 0xec
 800a422:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a426:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a42a:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 800a42e:	b03d      	add	sp, #244	; 0xf4
 800a430:	bd30      	pop	{r4, r5, pc}
 800a432:	ab02      	add	r3, sp, #8
 800a434:	9300      	str	r3, [sp, #0]
 800a436:	23e8      	movs	r3, #232	; 0xe8
 800a438:	2200      	movs	r2, #0
 800a43a:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 800a43e:	f7ff fdce 	bl	8009fde <dwt_readfromdevice>
 800a442:	e642      	b.n	800a0ca <ull_readdiagnostics+0x6c>
 800a444:	7d9b      	ldrb	r3, [r3, #22]
 800a446:	f013 0f01 	tst.w	r3, #1
 800a44a:	f000 81b3 	beq.w	800a7b4 <ull_readdiagnostics+0x756>
 800a44e:	ab02      	add	r3, sp, #8
 800a450:	9300      	str	r3, [sp, #0]
 800a452:	236c      	movs	r3, #108	; 0x6c
 800a454:	2200      	movs	r2, #0
 800a456:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 800a45a:	f7ff fdc0 	bl	8009fde <dwt_readfromdevice>
 800a45e:	ab1d      	add	r3, sp, #116	; 0x74
 800a460:	9300      	str	r3, [sp, #0]
 800a462:	236c      	movs	r3, #108	; 0x6c
 800a464:	2200      	movs	r2, #0
 800a466:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 800a46a:	4628      	mov	r0, r5
 800a46c:	f7ff fdb7 	bl	8009fde <dwt_readfromdevice>
 800a470:	aa02      	add	r2, sp, #8
 800a472:	1e63      	subs	r3, r4, #1
 800a474:	1d20      	adds	r0, r4, #4
 800a476:	f812 1b01 	ldrb.w	r1, [r2], #1
 800a47a:	f803 1f01 	strb.w	r1, [r3, #1]!
 800a47e:	79d1      	ldrb	r1, [r2, #7]
 800a480:	7219      	strb	r1, [r3, #8]
 800a482:	7bd1      	ldrb	r1, [r2, #15]
 800a484:	7459      	strb	r1, [r3, #17]
 800a486:	7dd1      	ldrb	r1, [r2, #23]
 800a488:	7699      	strb	r1, [r3, #26]
 800a48a:	4283      	cmp	r3, r0
 800a48c:	d1f3      	bne.n	800a476 <ull_readdiagnostics+0x418>
 800a48e:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800a492:	77e3      	strb	r3, [r4, #31]
 800a494:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800a498:	7163      	strb	r3, [r4, #5]
 800a49a:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800a49e:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800a4a2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a4a6:	80e3      	strh	r3, [r4, #6]
 800a4a8:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800a4ac:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800a4b0:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 800a4b4:	f3c2 12cf 	ubfx	r2, r2, #7, #16
 800a4b8:	f8a4 200d 	strh.w	r2, [r4, #13]
 800a4bc:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800a4c0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800a4c4:	f8a4 200f 	strh.w	r2, [r4, #15]
 800a4c8:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800a4cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a4d0:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 800a4d4:	82e3      	strh	r3, [r4, #22]
 800a4d6:	f89d 201e 	ldrb.w	r2, [sp, #30]
 800a4da:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800a4de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a4e2:	8323      	strh	r3, [r4, #24]
 800a4e4:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 800a4e8:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 800a4ec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a4f0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a4f4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800a4f8:	bf1c      	itt	ne
 800a4fa:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 800a4fe:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 800a502:	8423      	strh	r3, [r4, #32]
 800a504:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 800a508:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800a50c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a510:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a514:	8463      	strh	r3, [r4, #34]	; 0x22
 800a516:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 800a51a:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 800a51e:	041b      	lsls	r3, r3, #16
 800a520:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a524:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 800a528:	4313      	orrs	r3, r2
 800a52a:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 800a52e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a532:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800a536:	6263      	str	r3, [r4, #36]	; 0x24
 800a538:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800a53a:	7d9b      	ldrb	r3, [r3, #22]
 800a53c:	f013 0f01 	tst.w	r3, #1
 800a540:	f43f af75 	beq.w	800a42e <ull_readdiagnostics+0x3d0>
 800a544:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 800a548:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 800a54c:	041b      	lsls	r3, r3, #16
 800a54e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a552:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 800a556:	4313      	orrs	r3, r2
 800a558:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 800a55c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a560:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a564:	62a3      	str	r3, [r4, #40]	; 0x28
 800a566:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 800a56a:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 800a56e:	041b      	lsls	r3, r3, #16
 800a570:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a574:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 800a578:	4313      	orrs	r3, r2
 800a57a:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 800a57e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a582:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a586:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a588:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 800a58c:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 800a590:	041b      	lsls	r3, r3, #16
 800a592:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a596:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 800a59a:	4313      	orrs	r3, r2
 800a59c:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 800a5a0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a5a4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a5a8:	6323      	str	r3, [r4, #48]	; 0x30
 800a5aa:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 800a5ae:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 800a5b2:	041b      	lsls	r3, r3, #16
 800a5b4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a5b8:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 800a5bc:	4313      	orrs	r3, r2
 800a5be:	f89d 203d 	ldrb.w	r2, [sp, #61]	; 0x3d
 800a5c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a5c6:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a5ca:	6363      	str	r3, [r4, #52]	; 0x34
 800a5cc:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 800a5d0:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800a5d4:	041b      	lsls	r3, r3, #16
 800a5d6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a5da:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 800a5de:	4313      	orrs	r3, r2
 800a5e0:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 800a5e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a5e8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a5ec:	63a3      	str	r3, [r4, #56]	; 0x38
 800a5ee:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 800a5f2:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800a5f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a5fa:	87a3      	strh	r3, [r4, #60]	; 0x3c
 800a5fc:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
 800a600:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 800a604:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a608:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a60c:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800a60e:	f89d 2067 	ldrb.w	r2, [sp, #103]	; 0x67
 800a612:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
 800a616:	041b      	lsls	r3, r3, #16
 800a618:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a61c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 800a620:	4313      	orrs	r3, r2
 800a622:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 800a626:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a62a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800a62e:	6423      	str	r3, [r4, #64]	; 0x40
 800a630:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
 800a634:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
 800a638:	041b      	lsls	r3, r3, #16
 800a63a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a63e:	f89d 2068 	ldrb.w	r2, [sp, #104]	; 0x68
 800a642:	4313      	orrs	r3, r2
 800a644:	f89d 2069 	ldrb.w	r2, [sp, #105]	; 0x69
 800a648:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a64c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a650:	6463      	str	r3, [r4, #68]	; 0x44
 800a652:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
 800a656:	f89d 306e 	ldrb.w	r3, [sp, #110]	; 0x6e
 800a65a:	041b      	lsls	r3, r3, #16
 800a65c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a660:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 800a664:	4313      	orrs	r3, r2
 800a666:	f89d 206d 	ldrb.w	r2, [sp, #109]	; 0x6d
 800a66a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a66e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a672:	64a3      	str	r3, [r4, #72]	; 0x48
 800a674:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
 800a678:	f89d 3072 	ldrb.w	r3, [sp, #114]	; 0x72
 800a67c:	041b      	lsls	r3, r3, #16
 800a67e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a682:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
 800a686:	4313      	orrs	r3, r2
 800a688:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
 800a68c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a690:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a694:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a696:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 800a69a:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 800a69e:	041b      	lsls	r3, r3, #16
 800a6a0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a6a4:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 800a6a8:	4313      	orrs	r3, r2
 800a6aa:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 800a6ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a6b2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a6b6:	6523      	str	r3, [r4, #80]	; 0x50
 800a6b8:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 800a6bc:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 800a6c0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a6c4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800a6c8:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 800a6cc:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 800a6d0:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 800a6d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a6d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a6dc:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 800a6e0:	f89d 20af 	ldrb.w	r2, [sp, #175]	; 0xaf
 800a6e4:	f89d 30ae 	ldrb.w	r3, [sp, #174]	; 0xae
 800a6e8:	041b      	lsls	r3, r3, #16
 800a6ea:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a6ee:	f89d 20ac 	ldrb.w	r2, [sp, #172]	; 0xac
 800a6f2:	4313      	orrs	r3, r2
 800a6f4:	f89d 20ad 	ldrb.w	r2, [sp, #173]	; 0xad
 800a6f8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a6fc:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800a700:	65a3      	str	r3, [r4, #88]	; 0x58
 800a702:	f89d 20b3 	ldrb.w	r2, [sp, #179]	; 0xb3
 800a706:	f89d 30b2 	ldrb.w	r3, [sp, #178]	; 0xb2
 800a70a:	041b      	lsls	r3, r3, #16
 800a70c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a710:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
 800a714:	4313      	orrs	r3, r2
 800a716:	f89d 20b1 	ldrb.w	r2, [sp, #177]	; 0xb1
 800a71a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a71e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a722:	65e3      	str	r3, [r4, #92]	; 0x5c
 800a724:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
 800a728:	f89d 30b6 	ldrb.w	r3, [sp, #182]	; 0xb6
 800a72c:	041b      	lsls	r3, r3, #16
 800a72e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a732:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 800a736:	4313      	orrs	r3, r2
 800a738:	f89d 20b5 	ldrb.w	r2, [sp, #181]	; 0xb5
 800a73c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a740:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a744:	6623      	str	r3, [r4, #96]	; 0x60
 800a746:	f89d 20bb 	ldrb.w	r2, [sp, #187]	; 0xbb
 800a74a:	f89d 30ba 	ldrb.w	r3, [sp, #186]	; 0xba
 800a74e:	041b      	lsls	r3, r3, #16
 800a750:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a754:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 800a758:	4313      	orrs	r3, r2
 800a75a:	f89d 20b9 	ldrb.w	r2, [sp, #185]	; 0xb9
 800a75e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a762:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a766:	6663      	str	r3, [r4, #100]	; 0x64
 800a768:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 800a76c:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 800a770:	041b      	lsls	r3, r3, #16
 800a772:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a776:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 800a77a:	4313      	orrs	r3, r2
 800a77c:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 800a780:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a784:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a788:	66a3      	str	r3, [r4, #104]	; 0x68
 800a78a:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 800a78e:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 800a792:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a796:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800a79a:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 800a79e:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 800a7a2:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 800a7a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a7aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a7ae:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 800a7b2:	e63c      	b.n	800a42e <ull_readdiagnostics+0x3d0>
 800a7b4:	ab02      	add	r3, sp, #8
 800a7b6:	9300      	str	r3, [sp, #0]
 800a7b8:	2328      	movs	r3, #40	; 0x28
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 800a7c0:	f7ff fc0d 	bl	8009fde <dwt_readfromdevice>
 800a7c4:	e654      	b.n	800a470 <ull_readdiagnostics+0x412>
	...

0800a7c8 <ull_readrxtimestamp>:
 800a7c8:	b500      	push	{lr}
 800a7ca:	b083      	sub	sp, #12
 800a7cc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800a7ce:	7b9b      	ldrb	r3, [r3, #14]
 800a7d0:	2b01      	cmp	r3, #1
 800a7d2:	d00b      	beq.n	800a7ec <ull_readrxtimestamp+0x24>
 800a7d4:	2b03      	cmp	r3, #3
 800a7d6:	d110      	bne.n	800a7fa <ull_readrxtimestamp+0x32>
 800a7d8:	9100      	str	r1, [sp, #0]
 800a7da:	2305      	movs	r3, #5
 800a7dc:	2204      	movs	r2, #4
 800a7de:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800a7e2:	f7ff fbfc 	bl	8009fde <dwt_readfromdevice>
 800a7e6:	b003      	add	sp, #12
 800a7e8:	f85d fb04 	ldr.w	pc, [sp], #4
 800a7ec:	9100      	str	r1, [sp, #0]
 800a7ee:	2305      	movs	r3, #5
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	4905      	ldr	r1, [pc, #20]	; (800a808 <ull_readrxtimestamp+0x40>)
 800a7f4:	f7ff fbf3 	bl	8009fde <dwt_readfromdevice>
 800a7f8:	e7f5      	b.n	800a7e6 <ull_readrxtimestamp+0x1e>
 800a7fa:	9100      	str	r1, [sp, #0]
 800a7fc:	2305      	movs	r3, #5
 800a7fe:	2200      	movs	r2, #0
 800a800:	2160      	movs	r1, #96	; 0x60
 800a802:	f7ff fbec 	bl	8009fde <dwt_readfromdevice>
 800a806:	e7ee      	b.n	800a7e6 <ull_readrxtimestamp+0x1e>
 800a808:	00180004 	.word	0x00180004

0800a80c <dwt_writetodevice>:
 800a80c:	b510      	push	{r4, lr}
 800a80e:	b082      	sub	sp, #8
 800a810:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 800a814:	9401      	str	r4, [sp, #4]
 800a816:	9c04      	ldr	r4, [sp, #16]
 800a818:	9400      	str	r4, [sp, #0]
 800a81a:	f7ff fb62 	bl	8009ee2 <dwt_xfer3xxx>
 800a81e:	b002      	add	sp, #8
 800a820:	bd10      	pop	{r4, pc}

0800a822 <dwt_write16bitoffsetreg>:
 800a822:	b500      	push	{lr}
 800a824:	b085      	sub	sp, #20
 800a826:	f88d 300c 	strb.w	r3, [sp, #12]
 800a82a:	0a1b      	lsrs	r3, r3, #8
 800a82c:	f88d 300d 	strb.w	r3, [sp, #13]
 800a830:	ab03      	add	r3, sp, #12
 800a832:	9300      	str	r3, [sp, #0]
 800a834:	2302      	movs	r3, #2
 800a836:	b292      	uxth	r2, r2
 800a838:	f7ff ffe8 	bl	800a80c <dwt_writetodevice>
 800a83c:	b005      	add	sp, #20
 800a83e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800a844 <ull_force_clocks>:
 800a844:	b508      	push	{r3, lr}
 800a846:	2901      	cmp	r1, #1
 800a848:	d002      	beq.n	800a850 <ull_force_clocks+0xc>
 800a84a:	2905      	cmp	r1, #5
 800a84c:	d007      	beq.n	800a85e <ull_force_clocks+0x1a>
 800a84e:	bd08      	pop	{r3, pc}
 800a850:	f641 0322 	movw	r3, #6178	; 0x1822
 800a854:	2200      	movs	r2, #0
 800a856:	4905      	ldr	r1, [pc, #20]	; (800a86c <ull_force_clocks+0x28>)
 800a858:	f7ff ffe3 	bl	800a822 <dwt_write16bitoffsetreg>
 800a85c:	e7f7      	b.n	800a84e <ull_force_clocks+0xa>
 800a85e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a862:	2200      	movs	r2, #0
 800a864:	4901      	ldr	r1, [pc, #4]	; (800a86c <ull_force_clocks+0x28>)
 800a866:	f7ff ffdc 	bl	800a822 <dwt_write16bitoffsetreg>
 800a86a:	e7f0      	b.n	800a84e <ull_force_clocks+0xa>
 800a86c:	00110004 	.word	0x00110004

0800a870 <__dwt_otp_write_wdata_id_reg>:
 800a870:	b538      	push	{r3, r4, r5, lr}
 800a872:	4605      	mov	r5, r0
 800a874:	460c      	mov	r4, r1
 800a876:	f441 7300 	orr.w	r3, r1, #512	; 0x200
 800a87a:	b29b      	uxth	r3, r3
 800a87c:	2200      	movs	r2, #0
 800a87e:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800a882:	f7ff ffce 	bl	800a822 <dwt_write16bitoffsetreg>
 800a886:	b2a3      	uxth	r3, r4
 800a888:	2200      	movs	r2, #0
 800a88a:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800a88e:	4628      	mov	r0, r5
 800a890:	f7ff ffc7 	bl	800a822 <dwt_write16bitoffsetreg>
 800a894:	bd38      	pop	{r3, r4, r5, pc}
	...

0800a898 <_dwt_otpread>:
 800a898:	b570      	push	{r4, r5, r6, lr}
 800a89a:	4604      	mov	r4, r0
 800a89c:	460e      	mov	r6, r1
 800a89e:	4d0c      	ldr	r5, [pc, #48]	; (800a8d0 <_dwt_otpread+0x38>)
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	4629      	mov	r1, r5
 800a8a6:	f7ff ffbc 	bl	800a822 <dwt_write16bitoffsetreg>
 800a8aa:	4633      	mov	r3, r6
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	4909      	ldr	r1, [pc, #36]	; (800a8d4 <_dwt_otpread+0x3c>)
 800a8b0:	4620      	mov	r0, r4
 800a8b2:	f7ff ffb6 	bl	800a822 <dwt_write16bitoffsetreg>
 800a8b6:	2302      	movs	r3, #2
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	4629      	mov	r1, r5
 800a8bc:	4620      	mov	r0, r4
 800a8be:	f7ff ffb0 	bl	800a822 <dwt_write16bitoffsetreg>
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	4904      	ldr	r1, [pc, #16]	; (800a8d8 <_dwt_otpread+0x40>)
 800a8c6:	4620      	mov	r0, r4
 800a8c8:	f7ff fb93 	bl	8009ff2 <dwt_read32bitoffsetreg>
 800a8cc:	bd70      	pop	{r4, r5, r6, pc}
 800a8ce:	bf00      	nop
 800a8d0:	000b0008 	.word	0x000b0008
 800a8d4:	000b0004 	.word	0x000b0004
 800a8d8:	000b0010 	.word	0x000b0010

0800a8dc <dwt_write32bitoffsetreg>:
 800a8dc:	b510      	push	{r4, lr}
 800a8de:	b084      	sub	sp, #16
 800a8e0:	f88d 300c 	strb.w	r3, [sp, #12]
 800a8e4:	0a1c      	lsrs	r4, r3, #8
 800a8e6:	f88d 400d 	strb.w	r4, [sp, #13]
 800a8ea:	0c1c      	lsrs	r4, r3, #16
 800a8ec:	f88d 400e 	strb.w	r4, [sp, #14]
 800a8f0:	0e1b      	lsrs	r3, r3, #24
 800a8f2:	f88d 300f 	strb.w	r3, [sp, #15]
 800a8f6:	ab03      	add	r3, sp, #12
 800a8f8:	9300      	str	r3, [sp, #0]
 800a8fa:	2304      	movs	r3, #4
 800a8fc:	b292      	uxth	r2, r2
 800a8fe:	f7ff ff85 	bl	800a80c <dwt_writetodevice>
 800a902:	b004      	add	sp, #16
 800a904:	bd10      	pop	{r4, pc}

0800a906 <_dwt_adjust_delaytime>:
 800a906:	b538      	push	{r3, r4, r5, lr}
 800a908:	4604      	mov	r4, r0
 800a90a:	b989      	cbnz	r1, 800a930 <_dwt_adjust_delaytime+0x2a>
 800a90c:	2200      	movs	r2, #0
 800a90e:	2128      	movs	r1, #40	; 0x28
 800a910:	f7ff fb6f 	bl	8009ff2 <dwt_read32bitoffsetreg>
 800a914:	4605      	mov	r5, r0
 800a916:	2201      	movs	r2, #1
 800a918:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800a91c:	4620      	mov	r0, r4
 800a91e:	f7ff fb90 	bl	800a042 <dwt_read8bitoffsetreg>
 800a922:	1a2b      	subs	r3, r5, r0
 800a924:	2200      	movs	r2, #0
 800a926:	2128      	movs	r1, #40	; 0x28
 800a928:	4620      	mov	r0, r4
 800a92a:	f7ff ffd7 	bl	800a8dc <dwt_write32bitoffsetreg>
 800a92e:	bd38      	pop	{r3, r4, r5, pc}
 800a930:	2200      	movs	r2, #0
 800a932:	2128      	movs	r1, #40	; 0x28
 800a934:	f7ff fb5d 	bl	8009ff2 <dwt_read32bitoffsetreg>
 800a938:	4605      	mov	r5, r0
 800a93a:	2201      	movs	r2, #1
 800a93c:	217c      	movs	r1, #124	; 0x7c
 800a93e:	4620      	mov	r0, r4
 800a940:	f7ff fb7f 	bl	800a042 <dwt_read8bitoffsetreg>
 800a944:	1a2b      	subs	r3, r5, r0
 800a946:	2200      	movs	r2, #0
 800a948:	2128      	movs	r1, #40	; 0x28
 800a94a:	4620      	mov	r0, r4
 800a94c:	f7ff ffc6 	bl	800a8dc <dwt_write32bitoffsetreg>
 800a950:	e7ed      	b.n	800a92e <_dwt_adjust_delaytime+0x28>

0800a952 <ull_setrxaftertxdelay>:
 800a952:	b538      	push	{r3, r4, r5, lr}
 800a954:	4605      	mov	r5, r0
 800a956:	460c      	mov	r4, r1
 800a958:	2200      	movs	r2, #0
 800a95a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800a95e:	f7ff fb48 	bl	8009ff2 <dwt_read32bitoffsetreg>
 800a962:	0d00      	lsrs	r0, r0, #20
 800a964:	0500      	lsls	r0, r0, #20
 800a966:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800a96a:	4303      	orrs	r3, r0
 800a96c:	2200      	movs	r2, #0
 800a96e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800a972:	4628      	mov	r0, r5
 800a974:	f7ff ffb2 	bl	800a8dc <dwt_write32bitoffsetreg>
 800a978:	bd38      	pop	{r3, r4, r5, pc}

0800a97a <ull_setlnapamode>:
 800a97a:	b538      	push	{r3, r4, r5, lr}
 800a97c:	4605      	mov	r5, r0
 800a97e:	460c      	mov	r4, r1
 800a980:	2200      	movs	r2, #0
 800a982:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800a986:	f7ff fb34 	bl	8009ff2 <dwt_read32bitoffsetreg>
 800a98a:	f420 337c 	bic.w	r3, r0, #258048	; 0x3f000
 800a98e:	f014 0f01 	tst.w	r4, #1
 800a992:	bf18      	it	ne
 800a994:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
 800a998:	f014 0f02 	tst.w	r4, #2
 800a99c:	bf18      	it	ne
 800a99e:	f443 5300 	orrne.w	r3, r3, #8192	; 0x2000
 800a9a2:	f014 0f04 	tst.w	r4, #4
 800a9a6:	bf18      	it	ne
 800a9a8:	f443 3390 	orrne.w	r3, r3, #73728	; 0x12000
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800a9b2:	4628      	mov	r0, r5
 800a9b4:	f7ff ff92 	bl	800a8dc <dwt_write32bitoffsetreg>
 800a9b8:	bd38      	pop	{r3, r4, r5, pc}
	...

0800a9bc <ull_configurestskey>:
 800a9bc:	b538      	push	{r3, r4, r5, lr}
 800a9be:	4605      	mov	r5, r0
 800a9c0:	460c      	mov	r4, r1
 800a9c2:	680b      	ldr	r3, [r1, #0]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	490b      	ldr	r1, [pc, #44]	; (800a9f4 <ull_configurestskey+0x38>)
 800a9c8:	f7ff ff88 	bl	800a8dc <dwt_write32bitoffsetreg>
 800a9cc:	6863      	ldr	r3, [r4, #4]
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	4909      	ldr	r1, [pc, #36]	; (800a9f8 <ull_configurestskey+0x3c>)
 800a9d2:	4628      	mov	r0, r5
 800a9d4:	f7ff ff82 	bl	800a8dc <dwt_write32bitoffsetreg>
 800a9d8:	68a3      	ldr	r3, [r4, #8]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	4907      	ldr	r1, [pc, #28]	; (800a9fc <ull_configurestskey+0x40>)
 800a9de:	4628      	mov	r0, r5
 800a9e0:	f7ff ff7c 	bl	800a8dc <dwt_write32bitoffsetreg>
 800a9e4:	68e3      	ldr	r3, [r4, #12]
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	4905      	ldr	r1, [pc, #20]	; (800aa00 <ull_configurestskey+0x44>)
 800a9ea:	4628      	mov	r0, r5
 800a9ec:	f7ff ff76 	bl	800a8dc <dwt_write32bitoffsetreg>
 800a9f0:	bd38      	pop	{r3, r4, r5, pc}
 800a9f2:	bf00      	nop
 800a9f4:	0002000c 	.word	0x0002000c
 800a9f8:	00020010 	.word	0x00020010
 800a9fc:	00020014 	.word	0x00020014
 800aa00:	00020018 	.word	0x00020018

0800aa04 <ull_configurestsiv>:
 800aa04:	b538      	push	{r3, r4, r5, lr}
 800aa06:	4605      	mov	r5, r0
 800aa08:	460c      	mov	r4, r1
 800aa0a:	680b      	ldr	r3, [r1, #0]
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	490b      	ldr	r1, [pc, #44]	; (800aa3c <ull_configurestsiv+0x38>)
 800aa10:	f7ff ff64 	bl	800a8dc <dwt_write32bitoffsetreg>
 800aa14:	6863      	ldr	r3, [r4, #4]
 800aa16:	2200      	movs	r2, #0
 800aa18:	4909      	ldr	r1, [pc, #36]	; (800aa40 <ull_configurestsiv+0x3c>)
 800aa1a:	4628      	mov	r0, r5
 800aa1c:	f7ff ff5e 	bl	800a8dc <dwt_write32bitoffsetreg>
 800aa20:	68a3      	ldr	r3, [r4, #8]
 800aa22:	2200      	movs	r2, #0
 800aa24:	4907      	ldr	r1, [pc, #28]	; (800aa44 <ull_configurestsiv+0x40>)
 800aa26:	4628      	mov	r0, r5
 800aa28:	f7ff ff58 	bl	800a8dc <dwt_write32bitoffsetreg>
 800aa2c:	68e3      	ldr	r3, [r4, #12]
 800aa2e:	2200      	movs	r2, #0
 800aa30:	4905      	ldr	r1, [pc, #20]	; (800aa48 <ull_configurestsiv+0x44>)
 800aa32:	4628      	mov	r0, r5
 800aa34:	f7ff ff52 	bl	800a8dc <dwt_write32bitoffsetreg>
 800aa38:	bd38      	pop	{r3, r4, r5, pc}
 800aa3a:	bf00      	nop
 800aa3c:	0002001c 	.word	0x0002001c
 800aa40:	00020020 	.word	0x00020020
 800aa44:	00020024 	.word	0x00020024
 800aa48:	00020028 	.word	0x00020028

0800aa4c <ull_configmrxlut>:
 800aa4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa50:	4604      	mov	r4, r0
 800aa52:	2905      	cmp	r1, #5
 800aa54:	d03a      	beq.n	800aacc <ull_configmrxlut+0x80>
 800aa56:	4d23      	ldr	r5, [pc, #140]	; (800aae4 <ull_configmrxlut+0x98>)
 800aa58:	462e      	mov	r6, r5
 800aa5a:	4f23      	ldr	r7, [pc, #140]	; (800aae8 <ull_configmrxlut+0x9c>)
 800aa5c:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 800ab24 <ull_configmrxlut+0xd8>
 800aa60:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 800ab28 <ull_configmrxlut+0xdc>
 800aa64:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ab2c <ull_configmrxlut+0xe0>
 800aa68:	4b20      	ldr	r3, [pc, #128]	; (800aaec <ull_configmrxlut+0xa0>)
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	4920      	ldr	r1, [pc, #128]	; (800aaf0 <ull_configmrxlut+0xa4>)
 800aa6e:	4620      	mov	r0, r4
 800aa70:	f7ff ff34 	bl	800a8dc <dwt_write32bitoffsetreg>
 800aa74:	4653      	mov	r3, sl
 800aa76:	2200      	movs	r2, #0
 800aa78:	491e      	ldr	r1, [pc, #120]	; (800aaf4 <ull_configmrxlut+0xa8>)
 800aa7a:	4620      	mov	r0, r4
 800aa7c:	f7ff ff2e 	bl	800a8dc <dwt_write32bitoffsetreg>
 800aa80:	464b      	mov	r3, r9
 800aa82:	2200      	movs	r2, #0
 800aa84:	491c      	ldr	r1, [pc, #112]	; (800aaf8 <ull_configmrxlut+0xac>)
 800aa86:	4620      	mov	r0, r4
 800aa88:	f7ff ff28 	bl	800a8dc <dwt_write32bitoffsetreg>
 800aa8c:	4643      	mov	r3, r8
 800aa8e:	2200      	movs	r2, #0
 800aa90:	491a      	ldr	r1, [pc, #104]	; (800aafc <ull_configmrxlut+0xb0>)
 800aa92:	4620      	mov	r0, r4
 800aa94:	f7ff ff22 	bl	800a8dc <dwt_write32bitoffsetreg>
 800aa98:	463b      	mov	r3, r7
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	4918      	ldr	r1, [pc, #96]	; (800ab00 <ull_configmrxlut+0xb4>)
 800aa9e:	4620      	mov	r0, r4
 800aaa0:	f7ff ff1c 	bl	800a8dc <dwt_write32bitoffsetreg>
 800aaa4:	4633      	mov	r3, r6
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	4916      	ldr	r1, [pc, #88]	; (800ab04 <ull_configmrxlut+0xb8>)
 800aaaa:	4620      	mov	r0, r4
 800aaac:	f7ff ff16 	bl	800a8dc <dwt_write32bitoffsetreg>
 800aab0:	462b      	mov	r3, r5
 800aab2:	2200      	movs	r2, #0
 800aab4:	4914      	ldr	r1, [pc, #80]	; (800ab08 <ull_configmrxlut+0xbc>)
 800aab6:	4620      	mov	r0, r4
 800aab8:	f7ff ff10 	bl	800a8dc <dwt_write32bitoffsetreg>
 800aabc:	4b13      	ldr	r3, [pc, #76]	; (800ab0c <ull_configmrxlut+0xc0>)
 800aabe:	2200      	movs	r2, #0
 800aac0:	4913      	ldr	r1, [pc, #76]	; (800ab10 <ull_configmrxlut+0xc4>)
 800aac2:	4620      	mov	r0, r4
 800aac4:	f7ff ff0a 	bl	800a8dc <dwt_write32bitoffsetreg>
 800aac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aacc:	4d11      	ldr	r5, [pc, #68]	; (800ab14 <ull_configmrxlut+0xc8>)
 800aace:	4e12      	ldr	r6, [pc, #72]	; (800ab18 <ull_configmrxlut+0xcc>)
 800aad0:	4f12      	ldr	r7, [pc, #72]	; (800ab1c <ull_configmrxlut+0xd0>)
 800aad2:	f8df 805c 	ldr.w	r8, [pc, #92]	; 800ab30 <ull_configmrxlut+0xe4>
 800aad6:	f8df 905c 	ldr.w	r9, [pc, #92]	; 800ab34 <ull_configmrxlut+0xe8>
 800aada:	f8df a05c 	ldr.w	sl, [pc, #92]	; 800ab38 <ull_configmrxlut+0xec>
 800aade:	4b10      	ldr	r3, [pc, #64]	; (800ab20 <ull_configmrxlut+0xd4>)
 800aae0:	e7c3      	b.n	800aa6a <ull_configmrxlut+0x1e>
 800aae2:	bf00      	nop
 800aae4:	0002afb5 	.word	0x0002afb5
 800aae8:	0002af7d 	.word	0x0002af7d
 800aaec:	0002a8fe 	.word	0x0002a8fe
 800aaf0:	00030038 	.word	0x00030038
 800aaf4:	0003003c 	.word	0x0003003c
 800aaf8:	00030040 	.word	0x00030040
 800aafc:	00030044 	.word	0x00030044
 800ab00:	00030048 	.word	0x00030048
 800ab04:	0003004c 	.word	0x0003004c
 800ab08:	00030050 	.word	0x00030050
 800ab0c:	10000240 	.word	0x10000240
 800ab10:	0003001c 	.word	0x0003001c
 800ab14:	0001cff5 	.word	0x0001cff5
 800ab18:	0001cfb5 	.word	0x0001cfb5
 800ab1c:	0001cf36 	.word	0x0001cf36
 800ab20:	0001c0fd 	.word	0x0001c0fd
 800ab24:	0002af3e 	.word	0x0002af3e
 800ab28:	0002a5fe 	.word	0x0002a5fe
 800ab2c:	0002ac36 	.word	0x0002ac36
 800ab30:	0001c77e 	.word	0x0001c77e
 800ab34:	0001c6be 	.word	0x0001c6be
 800ab38:	0001c43e 	.word	0x0001c43e

0800ab3c <ull_disable_rftx_blocks>:
 800ab3c:	b508      	push	{r3, lr}
 800ab3e:	2300      	movs	r3, #0
 800ab40:	461a      	mov	r2, r3
 800ab42:	4902      	ldr	r1, [pc, #8]	; (800ab4c <ull_disable_rftx_blocks+0x10>)
 800ab44:	f7ff feca 	bl	800a8dc <dwt_write32bitoffsetreg>
 800ab48:	bd08      	pop	{r3, pc}
 800ab4a:	bf00      	nop
 800ab4c:	00070004 	.word	0x00070004

0800ab50 <ull_disable_rf_tx>:
 800ab50:	b538      	push	{r3, r4, r5, lr}
 800ab52:	4604      	mov	r4, r0
 800ab54:	460d      	mov	r5, r1
 800ab56:	2300      	movs	r3, #0
 800ab58:	461a      	mov	r2, r3
 800ab5a:	490a      	ldr	r1, [pc, #40]	; (800ab84 <ull_disable_rf_tx+0x34>)
 800ab5c:	f7ff febe 	bl	800a8dc <dwt_write32bitoffsetreg>
 800ab60:	2300      	movs	r3, #0
 800ab62:	461a      	mov	r2, r3
 800ab64:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 800ab68:	4620      	mov	r0, r4
 800ab6a:	f7ff feb7 	bl	800a8dc <dwt_write32bitoffsetreg>
 800ab6e:	b905      	cbnz	r5, 800ab72 <ull_disable_rf_tx+0x22>
 800ab70:	bd38      	pop	{r3, r4, r5, pc}
 800ab72:	f04f 53e0 	mov.w	r3, #469762048	; 0x1c000000
 800ab76:	2200      	movs	r2, #0
 800ab78:	4903      	ldr	r1, [pc, #12]	; (800ab88 <ull_disable_rf_tx+0x38>)
 800ab7a:	4620      	mov	r0, r4
 800ab7c:	f7ff feae 	bl	800a8dc <dwt_write32bitoffsetreg>
 800ab80:	e7f6      	b.n	800ab70 <ull_disable_rf_tx+0x20>
 800ab82:	bf00      	nop
 800ab84:	00070048 	.word	0x00070048
 800ab88:	00070014 	.word	0x00070014

0800ab8c <ull_readrxdata>:
 800ab8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab8e:	b083      	sub	sp, #12
 800ab90:	6d04      	ldr	r4, [r0, #80]	; 0x50
 800ab92:	7ba4      	ldrb	r4, [r4, #14]
 800ab94:	2c03      	cmp	r4, #3
 800ab96:	bf0c      	ite	eq
 800ab98:	f44f 1c98 	moveq.w	ip, #1245184	; 0x130000
 800ab9c:	f44f 1c90 	movne.w	ip, #1179648	; 0x120000
 800aba0:	189c      	adds	r4, r3, r2
 800aba2:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800aba6:	da19      	bge.n	800abdc <ull_readrxdata+0x50>
 800aba8:	461d      	mov	r5, r3
 800abaa:	4616      	mov	r6, r2
 800abac:	460f      	mov	r7, r1
 800abae:	4604      	mov	r4, r0
 800abb0:	2b7f      	cmp	r3, #127	; 0x7f
 800abb2:	d915      	bls.n	800abe0 <ull_readrxdata+0x54>
 800abb4:	ea4f 431c 	mov.w	r3, ip, lsr #16
 800abb8:	2200      	movs	r2, #0
 800abba:	490d      	ldr	r1, [pc, #52]	; (800abf0 <ull_readrxdata+0x64>)
 800abbc:	f7ff fe8e 	bl	800a8dc <dwt_write32bitoffsetreg>
 800abc0:	462b      	mov	r3, r5
 800abc2:	2200      	movs	r2, #0
 800abc4:	490b      	ldr	r1, [pc, #44]	; (800abf4 <ull_readrxdata+0x68>)
 800abc6:	4620      	mov	r0, r4
 800abc8:	f7ff fe88 	bl	800a8dc <dwt_write32bitoffsetreg>
 800abcc:	9700      	str	r7, [sp, #0]
 800abce:	4633      	mov	r3, r6
 800abd0:	2200      	movs	r2, #0
 800abd2:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800abd6:	4620      	mov	r0, r4
 800abd8:	f7ff fa01 	bl	8009fde <dwt_readfromdevice>
 800abdc:	b003      	add	sp, #12
 800abde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abe0:	9100      	str	r1, [sp, #0]
 800abe2:	4613      	mov	r3, r2
 800abe4:	462a      	mov	r2, r5
 800abe6:	4661      	mov	r1, ip
 800abe8:	f7ff f9f9 	bl	8009fde <dwt_readfromdevice>
 800abec:	e7f6      	b.n	800abdc <ull_readrxdata+0x50>
 800abee:	bf00      	nop
 800abf0:	001f0004 	.word	0x001f0004
 800abf4:	001f0008 	.word	0x001f0008

0800abf8 <dwt_write8bitoffsetreg>:
 800abf8:	b510      	push	{r4, lr}
 800abfa:	b084      	sub	sp, #16
 800abfc:	ac04      	add	r4, sp, #16
 800abfe:	f804 3d01 	strb.w	r3, [r4, #-1]!
 800ac02:	9400      	str	r4, [sp, #0]
 800ac04:	2301      	movs	r3, #1
 800ac06:	b292      	uxth	r2, r2
 800ac08:	f7ff fe00 	bl	800a80c <dwt_writetodevice>
 800ac0c:	b004      	add	sp, #16
 800ac0e:	bd10      	pop	{r4, pc}

0800ac10 <ull_getframelength>:
 800ac10:	b510      	push	{r4, lr}
 800ac12:	4604      	mov	r4, r0
 800ac14:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800ac16:	7b9b      	ldrb	r3, [r3, #14]
 800ac18:	2b01      	cmp	r3, #1
 800ac1a:	d013      	beq.n	800ac44 <ull_getframelength+0x34>
 800ac1c:	2b03      	cmp	r3, #3
 800ac1e:	d11d      	bne.n	800ac5c <ull_getframelength+0x4c>
 800ac20:	23f0      	movs	r3, #240	; 0xf0
 800ac22:	2200      	movs	r2, #0
 800ac24:	4912      	ldr	r1, [pc, #72]	; (800ac70 <ull_getframelength+0x60>)
 800ac26:	f7ff ffe7 	bl	800abf8 <dwt_write8bitoffsetreg>
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800ac30:	4620      	mov	r0, r4
 800ac32:	f7ff f9f4 	bl	800a01e <dwt_read16bitoffsetreg>
 800ac36:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ac38:	7ada      	ldrb	r2, [r3, #11]
 800ac3a:	b1a2      	cbz	r2, 800ac66 <ull_getframelength+0x56>
 800ac3c:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800ac40:	83d8      	strh	r0, [r3, #30]
 800ac42:	bd10      	pop	{r4, pc}
 800ac44:	230f      	movs	r3, #15
 800ac46:	2200      	movs	r2, #0
 800ac48:	4909      	ldr	r1, [pc, #36]	; (800ac70 <ull_getframelength+0x60>)
 800ac4a:	f7ff ffd5 	bl	800abf8 <dwt_write8bitoffsetreg>
 800ac4e:	2200      	movs	r2, #0
 800ac50:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 800ac54:	4620      	mov	r0, r4
 800ac56:	f7ff f9e2 	bl	800a01e <dwt_read16bitoffsetreg>
 800ac5a:	e7ec      	b.n	800ac36 <ull_getframelength+0x26>
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	214c      	movs	r1, #76	; 0x4c
 800ac60:	f7ff f9dd 	bl	800a01e <dwt_read16bitoffsetreg>
 800ac64:	e7e7      	b.n	800ac36 <ull_getframelength+0x26>
 800ac66:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800ac6a:	83d8      	strh	r0, [r3, #30]
 800ac6c:	e7e9      	b.n	800ac42 <ull_getframelength+0x32>
 800ac6e:	bf00      	nop
 800ac70:	00010018 	.word	0x00010018

0800ac74 <_dwt_clear_db_events>:
 800ac74:	b510      	push	{r4, lr}
 800ac76:	4604      	mov	r4, r0
 800ac78:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800ac7a:	7b9b      	ldrb	r3, [r3, #14]
 800ac7c:	2b01      	cmp	r3, #1
 800ac7e:	d004      	beq.n	800ac8a <_dwt_clear_db_events+0x16>
 800ac80:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ac82:	7b9b      	ldrb	r3, [r3, #14]
 800ac84:	2b03      	cmp	r3, #3
 800ac86:	d006      	beq.n	800ac96 <_dwt_clear_db_events+0x22>
 800ac88:	bd10      	pop	{r4, pc}
 800ac8a:	230f      	movs	r3, #15
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	4905      	ldr	r1, [pc, #20]	; (800aca4 <_dwt_clear_db_events+0x30>)
 800ac90:	f7ff ffb2 	bl	800abf8 <dwt_write8bitoffsetreg>
 800ac94:	e7f4      	b.n	800ac80 <_dwt_clear_db_events+0xc>
 800ac96:	23f0      	movs	r3, #240	; 0xf0
 800ac98:	2200      	movs	r2, #0
 800ac9a:	4902      	ldr	r1, [pc, #8]	; (800aca4 <_dwt_clear_db_events+0x30>)
 800ac9c:	4620      	mov	r0, r4
 800ac9e:	f7ff ffab 	bl	800abf8 <dwt_write8bitoffsetreg>
 800aca2:	e7f1      	b.n	800ac88 <_dwt_clear_db_events+0x14>
 800aca4:	00010018 	.word	0x00010018

0800aca8 <ull_clearaonconfig>:
 800aca8:	b538      	push	{r3, r4, r5, lr}
 800acaa:	4604      	mov	r4, r0
 800acac:	2300      	movs	r3, #0
 800acae:	461a      	mov	r2, r3
 800acb0:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 800acb4:	f7ff fdb5 	bl	800a822 <dwt_write16bitoffsetreg>
 800acb8:	2300      	movs	r3, #0
 800acba:	461a      	mov	r2, r3
 800acbc:	4908      	ldr	r1, [pc, #32]	; (800ace0 <ull_clearaonconfig+0x38>)
 800acbe:	4620      	mov	r0, r4
 800acc0:	f7ff ff9a 	bl	800abf8 <dwt_write8bitoffsetreg>
 800acc4:	4d07      	ldr	r5, [pc, #28]	; (800ace4 <ull_clearaonconfig+0x3c>)
 800acc6:	2300      	movs	r3, #0
 800acc8:	461a      	mov	r2, r3
 800acca:	4629      	mov	r1, r5
 800accc:	4620      	mov	r0, r4
 800acce:	f7ff ff93 	bl	800abf8 <dwt_write8bitoffsetreg>
 800acd2:	2302      	movs	r3, #2
 800acd4:	2200      	movs	r2, #0
 800acd6:	4629      	mov	r1, r5
 800acd8:	4620      	mov	r0, r4
 800acda:	f7ff ff8d 	bl	800abf8 <dwt_write8bitoffsetreg>
 800acde:	bd38      	pop	{r3, r4, r5, pc}
 800ace0:	000a0014 	.word	0x000a0014
 800ace4:	000a0004 	.word	0x000a0004

0800ace8 <ull_configeventcounters>:
 800ace8:	b538      	push	{r3, r4, r5, lr}
 800acea:	4605      	mov	r5, r0
 800acec:	460c      	mov	r4, r1
 800acee:	2302      	movs	r3, #2
 800acf0:	2200      	movs	r2, #0
 800acf2:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800acf6:	f7ff ff7f 	bl	800abf8 <dwt_write8bitoffsetreg>
 800acfa:	b904      	cbnz	r4, 800acfe <ull_configeventcounters+0x16>
 800acfc:	bd38      	pop	{r3, r4, r5, pc}
 800acfe:	2301      	movs	r3, #1
 800ad00:	2200      	movs	r2, #0
 800ad02:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800ad06:	4628      	mov	r0, r5
 800ad08:	f7ff ff76 	bl	800abf8 <dwt_write8bitoffsetreg>
 800ad0c:	e7f6      	b.n	800acfc <ull_configeventcounters+0x14>
	...

0800ad10 <ull_aon_read>:
 800ad10:	b538      	push	{r3, r4, r5, lr}
 800ad12:	4604      	mov	r4, r0
 800ad14:	460b      	mov	r3, r1
 800ad16:	2200      	movs	r2, #0
 800ad18:	490a      	ldr	r1, [pc, #40]	; (800ad44 <ull_aon_read+0x34>)
 800ad1a:	f7ff fd82 	bl	800a822 <dwt_write16bitoffsetreg>
 800ad1e:	4d0a      	ldr	r5, [pc, #40]	; (800ad48 <ull_aon_read+0x38>)
 800ad20:	2388      	movs	r3, #136	; 0x88
 800ad22:	2200      	movs	r2, #0
 800ad24:	4629      	mov	r1, r5
 800ad26:	4620      	mov	r0, r4
 800ad28:	f7ff ff66 	bl	800abf8 <dwt_write8bitoffsetreg>
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	461a      	mov	r2, r3
 800ad30:	4629      	mov	r1, r5
 800ad32:	4620      	mov	r0, r4
 800ad34:	f7ff ff60 	bl	800abf8 <dwt_write8bitoffsetreg>
 800ad38:	2200      	movs	r2, #0
 800ad3a:	4904      	ldr	r1, [pc, #16]	; (800ad4c <ull_aon_read+0x3c>)
 800ad3c:	4620      	mov	r0, r4
 800ad3e:	f7ff f980 	bl	800a042 <dwt_read8bitoffsetreg>
 800ad42:	bd38      	pop	{r3, r4, r5, pc}
 800ad44:	000a000c 	.word	0x000a000c
 800ad48:	000a0004 	.word	0x000a0004
 800ad4c:	000a0008 	.word	0x000a0008

0800ad50 <ull_aon_write>:
 800ad50:	b570      	push	{r4, r5, r6, lr}
 800ad52:	4604      	mov	r4, r0
 800ad54:	460b      	mov	r3, r1
 800ad56:	4615      	mov	r5, r2
 800ad58:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800ad5c:	bf34      	ite	cc
 800ad5e:	2600      	movcc	r6, #0
 800ad60:	2620      	movcs	r6, #32
 800ad62:	2200      	movs	r2, #0
 800ad64:	490b      	ldr	r1, [pc, #44]	; (800ad94 <ull_aon_write+0x44>)
 800ad66:	f7ff fd5c 	bl	800a822 <dwt_write16bitoffsetreg>
 800ad6a:	462b      	mov	r3, r5
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	490a      	ldr	r1, [pc, #40]	; (800ad98 <ull_aon_write+0x48>)
 800ad70:	4620      	mov	r0, r4
 800ad72:	f7ff ff41 	bl	800abf8 <dwt_write8bitoffsetreg>
 800ad76:	4d09      	ldr	r5, [pc, #36]	; (800ad9c <ull_aon_write+0x4c>)
 800ad78:	f046 0390 	orr.w	r3, r6, #144	; 0x90
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	4629      	mov	r1, r5
 800ad80:	4620      	mov	r0, r4
 800ad82:	f7ff ff39 	bl	800abf8 <dwt_write8bitoffsetreg>
 800ad86:	2300      	movs	r3, #0
 800ad88:	461a      	mov	r2, r3
 800ad8a:	4629      	mov	r1, r5
 800ad8c:	4620      	mov	r0, r4
 800ad8e:	f7ff ff33 	bl	800abf8 <dwt_write8bitoffsetreg>
 800ad92:	bd70      	pop	{r4, r5, r6, pc}
 800ad94:	000a000c 	.word	0x000a000c
 800ad98:	000a0010 	.word	0x000a0010
 800ad9c:	000a0004 	.word	0x000a0004

0800ada0 <ull_configuresleep>:
 800ada0:	b570      	push	{r4, r5, r6, lr}
 800ada2:	4604      	mov	r4, r0
 800ada4:	460d      	mov	r5, r1
 800ada6:	4616      	mov	r6, r2
 800ada8:	2200      	movs	r2, #0
 800adaa:	f240 110b 	movw	r1, #267	; 0x10b
 800adae:	f7ff ffcf 	bl	800ad50 <ull_aon_write>
 800adb2:	f44f 7182 	mov.w	r1, #260	; 0x104
 800adb6:	4620      	mov	r0, r4
 800adb8:	f7ff ffaa 	bl	800ad10 <ull_aon_read>
 800adbc:	f000 021f 	and.w	r2, r0, #31
 800adc0:	f44f 7182 	mov.w	r1, #260	; 0x104
 800adc4:	4620      	mov	r0, r4
 800adc6:	f7ff ffc3 	bl	800ad50 <ull_aon_write>
 800adca:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800adcc:	8a1a      	ldrh	r2, [r3, #16]
 800adce:	4315      	orrs	r5, r2
 800add0:	821d      	strh	r5, [r3, #16]
 800add2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800add4:	8a1b      	ldrh	r3, [r3, #16]
 800add6:	2200      	movs	r2, #0
 800add8:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 800addc:	4620      	mov	r0, r4
 800adde:	f7ff fd20 	bl	800a822 <dwt_write16bitoffsetreg>
 800ade2:	4633      	mov	r3, r6
 800ade4:	2200      	movs	r2, #0
 800ade6:	4902      	ldr	r1, [pc, #8]	; (800adf0 <ull_configuresleep+0x50>)
 800ade8:	4620      	mov	r0, r4
 800adea:	f7ff ff05 	bl	800abf8 <dwt_write8bitoffsetreg>
 800adee:	bd70      	pop	{r4, r5, r6, pc}
 800adf0:	000a0014 	.word	0x000a0014

0800adf4 <ull_writetxdata>:
 800adf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800adf6:	b083      	sub	sp, #12
 800adf8:	185c      	adds	r4, r3, r1
 800adfa:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800adfe:	da24      	bge.n	800ae4a <ull_writetxdata+0x56>
 800ae00:	461c      	mov	r4, r3
 800ae02:	4617      	mov	r7, r2
 800ae04:	460e      	mov	r6, r1
 800ae06:	4605      	mov	r5, r0
 800ae08:	2b7f      	cmp	r3, #127	; 0x7f
 800ae0a:	d915      	bls.n	800ae38 <ull_writetxdata+0x44>
 800ae0c:	2314      	movs	r3, #20
 800ae0e:	2200      	movs	r2, #0
 800ae10:	490f      	ldr	r1, [pc, #60]	; (800ae50 <ull_writetxdata+0x5c>)
 800ae12:	f7ff fd63 	bl	800a8dc <dwt_write32bitoffsetreg>
 800ae16:	4623      	mov	r3, r4
 800ae18:	2200      	movs	r2, #0
 800ae1a:	490e      	ldr	r1, [pc, #56]	; (800ae54 <ull_writetxdata+0x60>)
 800ae1c:	4628      	mov	r0, r5
 800ae1e:	f7ff fd5d 	bl	800a8dc <dwt_write32bitoffsetreg>
 800ae22:	9700      	str	r7, [sp, #0]
 800ae24:	4633      	mov	r3, r6
 800ae26:	2200      	movs	r2, #0
 800ae28:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800ae2c:	4628      	mov	r0, r5
 800ae2e:	f7ff fced 	bl	800a80c <dwt_writetodevice>
 800ae32:	2000      	movs	r0, #0
 800ae34:	b003      	add	sp, #12
 800ae36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae38:	9200      	str	r2, [sp, #0]
 800ae3a:	460b      	mov	r3, r1
 800ae3c:	4622      	mov	r2, r4
 800ae3e:	f44f 11a0 	mov.w	r1, #1310720	; 0x140000
 800ae42:	f7ff fce3 	bl	800a80c <dwt_writetodevice>
 800ae46:	2000      	movs	r0, #0
 800ae48:	e7f4      	b.n	800ae34 <ull_writetxdata+0x40>
 800ae4a:	f04f 30ff 	mov.w	r0, #4294967295
 800ae4e:	e7f1      	b.n	800ae34 <ull_writetxdata+0x40>
 800ae50:	001f0004 	.word	0x001f0004
 800ae54:	001f0008 	.word	0x001f0008

0800ae58 <ull_signal_rx_buff_free>:
 800ae58:	b510      	push	{r4, lr}
 800ae5a:	b082      	sub	sp, #8
 800ae5c:	4604      	mov	r4, r0
 800ae5e:	2302      	movs	r3, #2
 800ae60:	9301      	str	r3, [sp, #4]
 800ae62:	2200      	movs	r2, #0
 800ae64:	9200      	str	r2, [sp, #0]
 800ae66:	4613      	mov	r3, r2
 800ae68:	2113      	movs	r1, #19
 800ae6a:	f7ff f83a 	bl	8009ee2 <dwt_xfer3xxx>
 800ae6e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ae70:	7b9a      	ldrb	r2, [r3, #14]
 800ae72:	2a03      	cmp	r2, #3
 800ae74:	bf0c      	ite	eq
 800ae76:	2201      	moveq	r2, #1
 800ae78:	2203      	movne	r2, #3
 800ae7a:	739a      	strb	r2, [r3, #14]
 800ae7c:	b002      	add	sp, #8
 800ae7e:	bd10      	pop	{r4, pc}

0800ae80 <ull_isr>:
 800ae80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae84:	4604      	mov	r4, r0
 800ae86:	2200      	movs	r2, #0
 800ae88:	f44f 11f8 	mov.w	r1, #2031616	; 0x1f0000
 800ae8c:	f7ff f8d9 	bl	800a042 <dwt_read8bitoffsetreg>
 800ae90:	4605      	mov	r5, r0
 800ae92:	2200      	movs	r2, #0
 800ae94:	2144      	movs	r1, #68	; 0x44
 800ae96:	4620      	mov	r0, r4
 800ae98:	f7ff f8ab 	bl	8009ff2 <dwt_read32bitoffsetreg>
 800ae9c:	4606      	mov	r6, r0
 800ae9e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800aea0:	2200      	movs	r2, #0
 800aea2:	83da      	strh	r2, [r3, #30]
 800aea4:	f883 2020 	strb.w	r2, [r3, #32]
 800aea8:	619a      	str	r2, [r3, #24]
 800aeaa:	839a      	strh	r2, [r3, #28]
 800aeac:	625a      	str	r2, [r3, #36]	; 0x24
 800aeae:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800aeb0:	625c      	str	r4, [r3, #36]	; 0x24
 800aeb2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800aeb4:	7b9f      	ldrb	r7, [r3, #14]
 800aeb6:	2f00      	cmp	r7, #0
 800aeb8:	d17f      	bne.n	800afba <ull_isr+0x13a>
 800aeba:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800aebc:	619e      	str	r6, [r3, #24]
 800aebe:	f8d4 8050 	ldr.w	r8, [r4, #80]	; 0x50
 800aec2:	f898 3015 	ldrb.w	r3, [r8, #21]
 800aec6:	f003 0303 	and.w	r3, r3, #3
 800aeca:	2b03      	cmp	r3, #3
 800aecc:	f000 8090 	beq.w	800aff0 <ull_isr+0x170>
 800aed0:	f015 0f80 	tst.w	r5, #128	; 0x80
 800aed4:	f040 8093 	bne.w	800affe <ull_isr+0x17e>
 800aed8:	f015 0f01 	tst.w	r5, #1
 800aedc:	f040 80c1 	bne.w	800b062 <ull_isr+0x1e2>
 800aee0:	f015 0f40 	tst.w	r5, #64	; 0x40
 800aee4:	d00b      	beq.n	800aefe <ull_isr+0x7e>
 800aee6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aee8:	b113      	cbz	r3, 800aef0 <ull_isr+0x70>
 800aeea:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800aeec:	3018      	adds	r0, #24
 800aeee:	4798      	blx	r3
 800aef0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800aef4:	2202      	movs	r2, #2
 800aef6:	2144      	movs	r1, #68	; 0x44
 800aef8:	4620      	mov	r0, r4
 800aefa:	f7ff fc92 	bl	800a822 <dwt_write16bitoffsetreg>
 800aefe:	f015 0f08 	tst.w	r5, #8
 800af02:	d107      	bne.n	800af14 <ull_isr+0x94>
 800af04:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800af06:	7b9b      	ldrb	r3, [r3, #14]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	f000 80ea 	beq.w	800b0e2 <ull_isr+0x262>
 800af0e:	2f00      	cmp	r7, #0
 800af10:	f000 80e7 	beq.w	800b0e2 <ull_isr+0x262>
 800af14:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800af16:	2200      	movs	r2, #0
 800af18:	f883 2020 	strb.w	r2, [r3, #32]
 800af1c:	f416 2f80 	tst.w	r6, #262144	; 0x40000
 800af20:	f000 80ad 	beq.w	800b07e <ull_isr+0x1fe>
 800af24:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800af26:	f892 3020 	ldrb.w	r3, [r2, #32]
 800af2a:	f043 0308 	orr.w	r3, r3, #8
 800af2e:	f882 3020 	strb.w	r3, [r2, #32]
 800af32:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 800af36:	f016 5f80 	tst.w	r6, #268435456	; 0x10000000
 800af3a:	d008      	beq.n	800af4e <ull_isr+0xce>
 800af3c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800af3e:	f892 3020 	ldrb.w	r3, [r2, #32]
 800af42:	f043 0310 	orr.w	r3, r3, #16
 800af46:	f882 3020 	strb.w	r3, [r2, #32]
 800af4a:	f047 5780 	orr.w	r7, r7, #268435456	; 0x10000000
 800af4e:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 800af52:	d006      	beq.n	800af62 <ull_isr+0xe2>
 800af54:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800af56:	7d53      	ldrb	r3, [r2, #21]
 800af58:	f003 0303 	and.w	r3, r3, #3
 800af5c:	2b03      	cmp	r3, #3
 800af5e:	f000 809a 	beq.w	800b096 <ull_isr+0x216>
 800af62:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 800af66:	f040 80a2 	bne.w	800b0ae <ull_isr+0x22e>
 800af6a:	f447 43de 	orr.w	r3, r7, #28416	; 0x6f00
 800af6e:	2200      	movs	r2, #0
 800af70:	2144      	movs	r1, #68	; 0x44
 800af72:	4620      	mov	r0, r4
 800af74:	f7ff fcb2 	bl	800a8dc <dwt_write32bitoffsetreg>
 800af78:	4620      	mov	r0, r4
 800af7a:	f7ff fe7b 	bl	800ac74 <_dwt_clear_db_events>
 800af7e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800af80:	8bc3      	ldrh	r3, [r0, #30]
 800af82:	2b00      	cmp	r3, #0
 800af84:	f040 80a2 	bne.w	800b0cc <ull_isr+0x24c>
 800af88:	7d43      	ldrb	r3, [r0, #21]
 800af8a:	f003 0303 	and.w	r3, r3, #3
 800af8e:	2b03      	cmp	r3, #3
 800af90:	f000 809c 	beq.w	800b0cc <ull_isr+0x24c>
 800af94:	6983      	ldr	r3, [r0, #24]
 800af96:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800af9a:	6183      	str	r3, [r0, #24]
 800af9c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800af9e:	6993      	ldr	r3, [r2, #24]
 800afa0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800afa4:	6193      	str	r3, [r2, #24]
 800afa6:	69e3      	ldr	r3, [r4, #28]
 800afa8:	b113      	cbz	r3, 800afb0 <ull_isr+0x130>
 800afaa:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800afac:	3018      	adds	r0, #24
 800afae:	4798      	blx	r3
 800afb0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800afb2:	2200      	movs	r2, #0
 800afb4:	f883 2020 	strb.w	r2, [r3, #32]
 800afb8:	e08c      	b.n	800b0d4 <ull_isr+0x254>
 800afba:	496d      	ldr	r1, [pc, #436]	; (800b170 <ull_isr+0x2f0>)
 800afbc:	4620      	mov	r0, r4
 800afbe:	f7ff f840 	bl	800a042 <dwt_read8bitoffsetreg>
 800afc2:	4607      	mov	r7, r0
 800afc4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800afc6:	7b9b      	ldrb	r3, [r3, #14]
 800afc8:	2b03      	cmp	r3, #3
 800afca:	bf08      	it	eq
 800afcc:	f3c0 1707 	ubfxeq	r7, r0, #4, #8
 800afd0:	f017 0f01 	tst.w	r7, #1
 800afd4:	bf18      	it	ne
 800afd6:	f446 4680 	orrne.w	r6, r6, #16384	; 0x4000
 800afda:	f017 0f02 	tst.w	r7, #2
 800afde:	bf18      	it	ne
 800afe0:	f446 5600 	orrne.w	r6, r6, #8192	; 0x2000
 800afe4:	f017 0f04 	tst.w	r7, #4
 800afe8:	bf18      	it	ne
 800afea:	f446 6680 	orrne.w	r6, r6, #1024	; 0x400
 800afee:	e764      	b.n	800aeba <ull_isr+0x3a>
 800aff0:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 800aff4:	bf1c      	itt	ne
 800aff6:	f045 0508 	orrne.w	r5, r5, #8
 800affa:	b2ed      	uxtbne	r5, r5
 800affc:	e768      	b.n	800aed0 <ull_isr+0x50>
 800affe:	2200      	movs	r2, #0
 800b000:	2148      	movs	r1, #72	; 0x48
 800b002:	4620      	mov	r0, r4
 800b004:	f7ff f80b 	bl	800a01e <dwt_read16bitoffsetreg>
 800b008:	f8a8 001c 	strh.w	r0, [r8, #28]
 800b00c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800b00e:	7d1a      	ldrb	r2, [r3, #20]
 800b010:	b11a      	cbz	r2, 800b01a <ull_isr+0x19a>
 800b012:	699a      	ldr	r2, [r3, #24]
 800b014:	f012 0f04 	tst.w	r2, #4
 800b018:	d103      	bne.n	800b022 <ull_isr+0x1a2>
 800b01a:	8b9b      	ldrh	r3, [r3, #28]
 800b01c:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800b020:	b18b      	cbz	r3, 800b046 <ull_isr+0x1c6>
 800b022:	2304      	movs	r3, #4
 800b024:	2200      	movs	r2, #0
 800b026:	2144      	movs	r1, #68	; 0x44
 800b028:	4620      	mov	r0, r4
 800b02a:	f7ff fde5 	bl	800abf8 <dwt_write8bitoffsetreg>
 800b02e:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 800b032:	2200      	movs	r2, #0
 800b034:	2148      	movs	r1, #72	; 0x48
 800b036:	4620      	mov	r0, r4
 800b038:	f7ff fbf3 	bl	800a822 <dwt_write16bitoffsetreg>
 800b03c:	6a23      	ldr	r3, [r4, #32]
 800b03e:	b113      	cbz	r3, 800b046 <ull_isr+0x1c6>
 800b040:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800b042:	3018      	adds	r0, #24
 800b044:	4798      	blx	r3
 800b046:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800b048:	8b9b      	ldrh	r3, [r3, #28]
 800b04a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800b04e:	f43f af43 	beq.w	800aed8 <ull_isr+0x58>
 800b052:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b056:	2200      	movs	r2, #0
 800b058:	2148      	movs	r1, #72	; 0x48
 800b05a:	4620      	mov	r0, r4
 800b05c:	f7ff fbe1 	bl	800a822 <dwt_write16bitoffsetreg>
 800b060:	e73a      	b.n	800aed8 <ull_isr+0x58>
 800b062:	23f8      	movs	r3, #248	; 0xf8
 800b064:	2200      	movs	r2, #0
 800b066:	2144      	movs	r1, #68	; 0x44
 800b068:	4620      	mov	r0, r4
 800b06a:	f7ff fdc5 	bl	800abf8 <dwt_write8bitoffsetreg>
 800b06e:	6923      	ldr	r3, [r4, #16]
 800b070:	2b00      	cmp	r3, #0
 800b072:	f43f af35 	beq.w	800aee0 <ull_isr+0x60>
 800b076:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800b078:	3018      	adds	r0, #24
 800b07a:	4798      	blx	r3
 800b07c:	e730      	b.n	800aee0 <ull_isr+0x60>
 800b07e:	f416 6f80 	tst.w	r6, #1024	; 0x400
 800b082:	bf1f      	itttt	ne
 800b084:	6d22      	ldrne	r2, [r4, #80]	; 0x50
 800b086:	f892 3020 	ldrbne.w	r3, [r2, #32]
 800b08a:	f043 0304 	orrne.w	r3, r3, #4
 800b08e:	f882 3020 	strbne.w	r3, [r2, #32]
 800b092:	2700      	movs	r7, #0
 800b094:	e74f      	b.n	800af36 <ull_isr+0xb6>
 800b096:	f892 3020 	ldrb.w	r3, [r2, #32]
 800b09a:	f043 0302 	orr.w	r3, r3, #2
 800b09e:	f882 3020 	strb.w	r3, [r2, #32]
 800b0a2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	83da      	strh	r2, [r3, #30]
 800b0a8:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 800b0ac:	e75d      	b.n	800af6a <ull_isr+0xea>
 800b0ae:	4620      	mov	r0, r4
 800b0b0:	f7ff fdae 	bl	800ac10 <ull_getframelength>
 800b0b4:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 800b0b8:	f43f af57 	beq.w	800af6a <ull_isr+0xea>
 800b0bc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800b0be:	f892 3020 	ldrb.w	r3, [r2, #32]
 800b0c2:	f043 0301 	orr.w	r3, r3, #1
 800b0c6:	f882 3020 	strb.w	r3, [r2, #32]
 800b0ca:	e74e      	b.n	800af6a <ull_isr+0xea>
 800b0cc:	6963      	ldr	r3, [r4, #20]
 800b0ce:	b10b      	cbz	r3, 800b0d4 <ull_isr+0x254>
 800b0d0:	3018      	adds	r0, #24
 800b0d2:	4798      	blx	r3
 800b0d4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800b0d6:	7b9b      	ldrb	r3, [r3, #14]
 800b0d8:	bb03      	cbnz	r3, 800b11c <ull_isr+0x29c>
 800b0da:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800b0dc:	2200      	movs	r2, #0
 800b0de:	f883 2020 	strb.w	r2, [r3, #32]
 800b0e2:	f015 0f10 	tst.w	r5, #16
 800b0e6:	d11d      	bne.n	800b124 <ull_isr+0x2a4>
 800b0e8:	f015 0f20 	tst.w	r5, #32
 800b0ec:	d12d      	bne.n	800b14a <ull_isr+0x2ca>
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	4920      	ldr	r1, [pc, #128]	; (800b174 <ull_isr+0x2f4>)
 800b0f2:	4620      	mov	r0, r4
 800b0f4:	f7fe ffa5 	bl	800a042 <dwt_read8bitoffsetreg>
 800b0f8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800b0fa:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21
 800b0fe:	f010 0303 	ands.w	r3, r0, #3
 800b102:	d009      	beq.n	800b118 <ull_isr+0x298>
 800b104:	2200      	movs	r2, #0
 800b106:	491b      	ldr	r1, [pc, #108]	; (800b174 <ull_isr+0x2f4>)
 800b108:	4620      	mov	r0, r4
 800b10a:	f7ff fd75 	bl	800abf8 <dwt_write8bitoffsetreg>
 800b10e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b110:	b113      	cbz	r3, 800b118 <ull_isr+0x298>
 800b112:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800b114:	3018      	adds	r0, #24
 800b116:	4798      	blx	r3
 800b118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b11c:	4620      	mov	r0, r4
 800b11e:	f7ff fe9b 	bl	800ae58 <ull_signal_rx_buff_free>
 800b122:	e7da      	b.n	800b0da <ull_isr+0x25a>
 800b124:	4b14      	ldr	r3, [pc, #80]	; (800b178 <ull_isr+0x2f8>)
 800b126:	2200      	movs	r2, #0
 800b128:	2144      	movs	r1, #68	; 0x44
 800b12a:	4620      	mov	r0, r4
 800b12c:	f7ff fbd6 	bl	800a8dc <dwt_write32bitoffsetreg>
 800b130:	4620      	mov	r0, r4
 800b132:	f7ff fd9f 	bl	800ac74 <_dwt_clear_db_events>
 800b136:	69e3      	ldr	r3, [r4, #28]
 800b138:	b113      	cbz	r3, 800b140 <ull_isr+0x2c0>
 800b13a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800b13c:	3018      	adds	r0, #24
 800b13e:	4798      	blx	r3
 800b140:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800b142:	2200      	movs	r2, #0
 800b144:	f883 2020 	strb.w	r2, [r3, #32]
 800b148:	e7ce      	b.n	800b0e8 <ull_isr+0x268>
 800b14a:	4b0c      	ldr	r3, [pc, #48]	; (800b17c <ull_isr+0x2fc>)
 800b14c:	2200      	movs	r2, #0
 800b14e:	2144      	movs	r1, #68	; 0x44
 800b150:	4620      	mov	r0, r4
 800b152:	f7ff fbc3 	bl	800a8dc <dwt_write32bitoffsetreg>
 800b156:	4620      	mov	r0, r4
 800b158:	f7ff fd8c 	bl	800ac74 <_dwt_clear_db_events>
 800b15c:	69a3      	ldr	r3, [r4, #24]
 800b15e:	b113      	cbz	r3, 800b166 <ull_isr+0x2e6>
 800b160:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800b162:	3018      	adds	r0, #24
 800b164:	4798      	blx	r3
 800b166:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800b168:	2200      	movs	r2, #0
 800b16a:	f883 2020 	strb.w	r2, [r3, #32]
 800b16e:	e7be      	b.n	800b0ee <ull_isr+0x26e>
 800b170:	00010018 	.word	0x00010018
 800b174:	00110038 	.word	0x00110038
 800b178:	34059400 	.word	0x34059400
 800b17c:	10220400 	.word	0x10220400

0800b180 <dwt_modify32bitoffsetreg>:
 800b180:	b530      	push	{r4, r5, lr}
 800b182:	b085      	sub	sp, #20
 800b184:	9c08      	ldr	r4, [sp, #32]
 800b186:	f88d 3008 	strb.w	r3, [sp, #8]
 800b18a:	0a1d      	lsrs	r5, r3, #8
 800b18c:	f88d 5009 	strb.w	r5, [sp, #9]
 800b190:	0c1d      	lsrs	r5, r3, #16
 800b192:	f88d 500a 	strb.w	r5, [sp, #10]
 800b196:	0e1b      	lsrs	r3, r3, #24
 800b198:	f88d 300b 	strb.w	r3, [sp, #11]
 800b19c:	f88d 400c 	strb.w	r4, [sp, #12]
 800b1a0:	0a23      	lsrs	r3, r4, #8
 800b1a2:	f88d 300d 	strb.w	r3, [sp, #13]
 800b1a6:	0c23      	lsrs	r3, r4, #16
 800b1a8:	f88d 300e 	strb.w	r3, [sp, #14]
 800b1ac:	0e24      	lsrs	r4, r4, #24
 800b1ae:	f88d 400f 	strb.w	r4, [sp, #15]
 800b1b2:	f248 0303 	movw	r3, #32771	; 0x8003
 800b1b6:	9301      	str	r3, [sp, #4]
 800b1b8:	ab02      	add	r3, sp, #8
 800b1ba:	9300      	str	r3, [sp, #0]
 800b1bc:	2308      	movs	r3, #8
 800b1be:	b292      	uxth	r2, r2
 800b1c0:	f7fe fe8f 	bl	8009ee2 <dwt_xfer3xxx>
 800b1c4:	b005      	add	sp, #20
 800b1c6:	bd30      	pop	{r4, r5, pc}

0800b1c8 <ull_enable_rf_tx>:
 800b1c8:	b570      	push	{r4, r5, r6, lr}
 800b1ca:	b082      	sub	sp, #8
 800b1cc:	4604      	mov	r4, r0
 800b1ce:	460e      	mov	r6, r1
 800b1d0:	4d13      	ldr	r5, [pc, #76]	; (800b220 <ull_enable_rf_tx+0x58>)
 800b1d2:	f04f 2308 	mov.w	r3, #134219776	; 0x8000800
 800b1d6:	9300      	str	r3, [sp, #0]
 800b1d8:	f04f 33ff 	mov.w	r3, #4294967295
 800b1dc:	2200      	movs	r2, #0
 800b1de:	4629      	mov	r1, r5
 800b1e0:	f7ff ffce 	bl	800b180 <dwt_modify32bitoffsetreg>
 800b1e4:	f04f 1360 	mov.w	r3, #6291552	; 0x600060
 800b1e8:	9300      	str	r3, [sp, #0]
 800b1ea:	f04f 33ff 	mov.w	r3, #4294967295
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	4629      	mov	r1, r5
 800b1f2:	4620      	mov	r0, r4
 800b1f4:	f7ff ffc4 	bl	800b180 <dwt_modify32bitoffsetreg>
 800b1f8:	4b0a      	ldr	r3, [pc, #40]	; (800b224 <ull_enable_rf_tx+0x5c>)
 800b1fa:	9300      	str	r3, [sp, #0]
 800b1fc:	f04f 33ff 	mov.w	r3, #4294967295
 800b200:	2200      	movs	r2, #0
 800b202:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 800b206:	4620      	mov	r0, r4
 800b208:	f7ff ffba 	bl	800b180 <dwt_modify32bitoffsetreg>
 800b20c:	b90e      	cbnz	r6, 800b212 <ull_enable_rf_tx+0x4a>
 800b20e:	b002      	add	sp, #8
 800b210:	bd70      	pop	{r4, r5, r6, pc}
 800b212:	4b05      	ldr	r3, [pc, #20]	; (800b228 <ull_enable_rf_tx+0x60>)
 800b214:	2200      	movs	r2, #0
 800b216:	4905      	ldr	r1, [pc, #20]	; (800b22c <ull_enable_rf_tx+0x64>)
 800b218:	4620      	mov	r0, r4
 800b21a:	f7ff fb5f 	bl	800a8dc <dwt_write32bitoffsetreg>
 800b21e:	e7f6      	b.n	800b20e <ull_enable_rf_tx+0x46>
 800b220:	00070048 	.word	0x00070048
 800b224:	02003c00 	.word	0x02003c00
 800b228:	01011100 	.word	0x01011100
 800b22c:	00070014 	.word	0x00070014

0800b230 <ull_enable_rftx_blocks>:
 800b230:	b500      	push	{lr}
 800b232:	b083      	sub	sp, #12
 800b234:	4b05      	ldr	r3, [pc, #20]	; (800b24c <ull_enable_rftx_blocks+0x1c>)
 800b236:	9300      	str	r3, [sp, #0]
 800b238:	f04f 33ff 	mov.w	r3, #4294967295
 800b23c:	2200      	movs	r2, #0
 800b23e:	4904      	ldr	r1, [pc, #16]	; (800b250 <ull_enable_rftx_blocks+0x20>)
 800b240:	f7ff ff9e 	bl	800b180 <dwt_modify32bitoffsetreg>
 800b244:	b003      	add	sp, #12
 800b246:	f85d fb04 	ldr.w	pc, [sp], #4
 800b24a:	bf00      	nop
 800b24c:	02003c00 	.word	0x02003c00
 800b250:	00070004 	.word	0x00070004

0800b254 <_dwt_otpprogword32>:
 800b254:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b258:	b083      	sub	sp, #12
 800b25a:	4604      	mov	r4, r0
 800b25c:	460d      	mov	r5, r1
 800b25e:	4617      	mov	r7, r2
 800b260:	4e56      	ldr	r6, [pc, #344]	; (800b3bc <_dwt_otpprogword32+0x168>)
 800b262:	2200      	movs	r2, #0
 800b264:	4631      	mov	r1, r6
 800b266:	f7fe fec4 	bl	8009ff2 <dwt_read32bitoffsetreg>
 800b26a:	4681      	mov	r9, r0
 800b26c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800b270:	9300      	str	r3, [sp, #0]
 800b272:	f04f 33ff 	mov.w	r3, #4294967295
 800b276:	2200      	movs	r2, #0
 800b278:	4631      	mov	r1, r6
 800b27a:	4620      	mov	r0, r4
 800b27c:	f7ff ff80 	bl	800b180 <dwt_modify32bitoffsetreg>
 800b280:	f8df 813c 	ldr.w	r8, [pc, #316]	; 800b3c0 <_dwt_otpprogword32+0x16c>
 800b284:	2318      	movs	r3, #24
 800b286:	2200      	movs	r2, #0
 800b288:	4641      	mov	r1, r8
 800b28a:	4620      	mov	r0, r4
 800b28c:	f7ff fac9 	bl	800a822 <dwt_write16bitoffsetreg>
 800b290:	2125      	movs	r1, #37	; 0x25
 800b292:	4620      	mov	r0, r4
 800b294:	f7ff faec 	bl	800a870 <__dwt_otp_write_wdata_id_reg>
 800b298:	2102      	movs	r1, #2
 800b29a:	4620      	mov	r0, r4
 800b29c:	f7ff fae8 	bl	800a870 <__dwt_otp_write_wdata_id_reg>
 800b2a0:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
 800b2a4:	4620      	mov	r0, r4
 800b2a6:	f7ff fae3 	bl	800a870 <__dwt_otp_write_wdata_id_reg>
 800b2aa:	b2f9      	uxtb	r1, r7
 800b2ac:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800b2b0:	4620      	mov	r0, r4
 800b2b2:	f7ff fadd 	bl	800a870 <__dwt_otp_write_wdata_id_reg>
 800b2b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b2ba:	4620      	mov	r0, r4
 800b2bc:	f7ff fad8 	bl	800a870 <__dwt_otp_write_wdata_id_reg>
 800b2c0:	2100      	movs	r1, #0
 800b2c2:	4620      	mov	r0, r4
 800b2c4:	f7ff fad4 	bl	800a870 <__dwt_otp_write_wdata_id_reg>
 800b2c8:	2102      	movs	r1, #2
 800b2ca:	4620      	mov	r0, r4
 800b2cc:	f7ff fad0 	bl	800a870 <__dwt_otp_write_wdata_id_reg>
 800b2d0:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800b2d4:	4620      	mov	r0, r4
 800b2d6:	f7ff facb 	bl	800a870 <__dwt_otp_write_wdata_id_reg>
 800b2da:	b2e9      	uxtb	r1, r5
 800b2dc:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800b2e0:	4620      	mov	r0, r4
 800b2e2:	f7ff fac5 	bl	800a870 <__dwt_otp_write_wdata_id_reg>
 800b2e6:	f3c5 2107 	ubfx	r1, r5, #8, #8
 800b2ea:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800b2ee:	4620      	mov	r0, r4
 800b2f0:	f7ff fabe 	bl	800a870 <__dwt_otp_write_wdata_id_reg>
 800b2f4:	f3c5 4107 	ubfx	r1, r5, #16, #8
 800b2f8:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800b2fc:	4620      	mov	r0, r4
 800b2fe:	f7ff fab7 	bl	800a870 <__dwt_otp_write_wdata_id_reg>
 800b302:	0e29      	lsrs	r1, r5, #24
 800b304:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800b308:	4620      	mov	r0, r4
 800b30a:	f7ff fab1 	bl	800a870 <__dwt_otp_write_wdata_id_reg>
 800b30e:	2100      	movs	r1, #0
 800b310:	4620      	mov	r0, r4
 800b312:	f7ff faad 	bl	800a870 <__dwt_otp_write_wdata_id_reg>
 800b316:	213a      	movs	r1, #58	; 0x3a
 800b318:	4620      	mov	r0, r4
 800b31a:	f7ff faa9 	bl	800a870 <__dwt_otp_write_wdata_id_reg>
 800b31e:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b322:	4620      	mov	r0, r4
 800b324:	f7ff faa4 	bl	800a870 <__dwt_otp_write_wdata_id_reg>
 800b328:	f44f 7185 	mov.w	r1, #266	; 0x10a
 800b32c:	4620      	mov	r0, r4
 800b32e:	f7ff fa9f 	bl	800a870 <__dwt_otp_write_wdata_id_reg>
 800b332:	2100      	movs	r1, #0
 800b334:	4620      	mov	r0, r4
 800b336:	f7ff fa9b 	bl	800a870 <__dwt_otp_write_wdata_id_reg>
 800b33a:	213a      	movs	r1, #58	; 0x3a
 800b33c:	4620      	mov	r0, r4
 800b33e:	f7ff fa97 	bl	800a870 <__dwt_otp_write_wdata_id_reg>
 800b342:	f240 1101 	movw	r1, #257	; 0x101
 800b346:	4620      	mov	r0, r4
 800b348:	f7ff fa92 	bl	800a870 <__dwt_otp_write_wdata_id_reg>
 800b34c:	2302      	movs	r3, #2
 800b34e:	2200      	movs	r2, #0
 800b350:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800b354:	4620      	mov	r0, r4
 800b356:	f7ff fa64 	bl	800a822 <dwt_write16bitoffsetreg>
 800b35a:	2300      	movs	r3, #0
 800b35c:	461a      	mov	r2, r3
 800b35e:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800b362:	4620      	mov	r0, r4
 800b364:	f7ff fa5d 	bl	800a822 <dwt_write16bitoffsetreg>
 800b368:	2002      	movs	r0, #2
 800b36a:	f7f5 f8d5 	bl	8000518 <deca_sleep>
 800b36e:	213a      	movs	r1, #58	; 0x3a
 800b370:	4620      	mov	r0, r4
 800b372:	f7ff fa7d 	bl	800a870 <__dwt_otp_write_wdata_id_reg>
 800b376:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b37a:	4620      	mov	r0, r4
 800b37c:	f7ff fa78 	bl	800a870 <__dwt_otp_write_wdata_id_reg>
 800b380:	2302      	movs	r3, #2
 800b382:	2200      	movs	r2, #0
 800b384:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800b388:	4620      	mov	r0, r4
 800b38a:	f7ff fa4a 	bl	800a822 <dwt_write16bitoffsetreg>
 800b38e:	2300      	movs	r3, #0
 800b390:	461a      	mov	r2, r3
 800b392:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800b396:	4620      	mov	r0, r4
 800b398:	f7ff fa43 	bl	800a822 <dwt_write16bitoffsetreg>
 800b39c:	2300      	movs	r3, #0
 800b39e:	461a      	mov	r2, r3
 800b3a0:	4641      	mov	r1, r8
 800b3a2:	4620      	mov	r0, r4
 800b3a4:	f7ff fa3d 	bl	800a822 <dwt_write16bitoffsetreg>
 800b3a8:	464b      	mov	r3, r9
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	4631      	mov	r1, r6
 800b3ae:	4620      	mov	r0, r4
 800b3b0:	f7ff fa94 	bl	800a8dc <dwt_write32bitoffsetreg>
 800b3b4:	b003      	add	sp, #12
 800b3b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b3ba:	bf00      	nop
 800b3bc:	00070044 	.word	0x00070044
 800b3c0:	000b0008 	.word	0x000b0008

0800b3c4 <ull_setgpiomode>:
 800b3c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3c6:	b083      	sub	sp, #12
 800b3c8:	2400      	movs	r4, #0
 800b3ca:	4623      	mov	r3, r4
 800b3cc:	2601      	movs	r6, #1
 800b3ce:	2707      	movs	r7, #7
 800b3d0:	e002      	b.n	800b3d8 <ull_setgpiomode+0x14>
 800b3d2:	3401      	adds	r4, #1
 800b3d4:	2c09      	cmp	r4, #9
 800b3d6:	d009      	beq.n	800b3ec <ull_setgpiomode+0x28>
 800b3d8:	fa06 f504 	lsl.w	r5, r6, r4
 800b3dc:	420d      	tst	r5, r1
 800b3de:	d0f8      	beq.n	800b3d2 <ull_setgpiomode+0xe>
 800b3e0:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800b3e4:	fa07 f505 	lsl.w	r5, r7, r5
 800b3e8:	432b      	orrs	r3, r5
 800b3ea:	e7f2      	b.n	800b3d2 <ull_setgpiomode+0xe>
 800b3ec:	401a      	ands	r2, r3
 800b3ee:	9200      	str	r2, [sp, #0]
 800b3f0:	43db      	mvns	r3, r3
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800b3f8:	f7ff fec2 	bl	800b180 <dwt_modify32bitoffsetreg>
 800b3fc:	b003      	add	sp, #12
 800b3fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b400 <ull_writetxfctrl>:
 800b400:	b510      	push	{r4, lr}
 800b402:	b082      	sub	sp, #8
 800b404:	4604      	mov	r4, r0
 800b406:	2a7f      	cmp	r2, #127	; 0x7f
 800b408:	d912      	bls.n	800b430 <ull_writetxfctrl+0x30>
 800b40a:	3280      	adds	r2, #128	; 0x80
 800b40c:	ea41 21c3 	orr.w	r1, r1, r3, lsl #11
 800b410:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b414:	9100      	str	r1, [sp, #0]
 800b416:	4b0c      	ldr	r3, [pc, #48]	; (800b448 <ull_writetxfctrl+0x48>)
 800b418:	2200      	movs	r2, #0
 800b41a:	2120      	movs	r1, #32
 800b41c:	f7ff feb0 	bl	800b180 <dwt_modify32bitoffsetreg>
 800b420:	2200      	movs	r2, #0
 800b422:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b426:	4620      	mov	r0, r4
 800b428:	f7fe fe0b 	bl	800a042 <dwt_read8bitoffsetreg>
 800b42c:	b002      	add	sp, #8
 800b42e:	bd10      	pop	{r4, pc}
 800b430:	ea41 21c3 	orr.w	r1, r1, r3, lsl #11
 800b434:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b438:	9100      	str	r1, [sp, #0]
 800b43a:	4b03      	ldr	r3, [pc, #12]	; (800b448 <ull_writetxfctrl+0x48>)
 800b43c:	2200      	movs	r2, #0
 800b43e:	2120      	movs	r1, #32
 800b440:	f7ff fe9e 	bl	800b180 <dwt_modify32bitoffsetreg>
 800b444:	e7f2      	b.n	800b42c <ull_writetxfctrl+0x2c>
 800b446:	bf00      	nop
 800b448:	fc00f400 	.word	0xfc00f400

0800b44c <prs_sys_status_and_or>:
 800b44c:	b500      	push	{lr}
 800b44e:	b083      	sub	sp, #12
 800b450:	9200      	str	r2, [sp, #0]
 800b452:	460b      	mov	r3, r1
 800b454:	2200      	movs	r2, #0
 800b456:	2144      	movs	r1, #68	; 0x44
 800b458:	f7ff fe92 	bl	800b180 <dwt_modify32bitoffsetreg>
 800b45c:	2000      	movs	r0, #0
 800b45e:	b003      	add	sp, #12
 800b460:	f85d fb04 	ldr.w	pc, [sp], #4

0800b464 <dwt_modify8bitoffsetreg>:
 800b464:	b500      	push	{lr}
 800b466:	b085      	sub	sp, #20
 800b468:	f88d 300c 	strb.w	r3, [sp, #12]
 800b46c:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800b470:	f88d 300d 	strb.w	r3, [sp, #13]
 800b474:	f248 0301 	movw	r3, #32769	; 0x8001
 800b478:	9301      	str	r3, [sp, #4]
 800b47a:	ab03      	add	r3, sp, #12
 800b47c:	9300      	str	r3, [sp, #0]
 800b47e:	2302      	movs	r3, #2
 800b480:	b292      	uxth	r2, r2
 800b482:	f7fe fd2e 	bl	8009ee2 <dwt_xfer3xxx>
 800b486:	b005      	add	sp, #20
 800b488:	f85d fb04 	ldr.w	pc, [sp], #4

0800b48c <ull_configciadiag>:
 800b48c:	b530      	push	{r4, r5, lr}
 800b48e:	b083      	sub	sp, #12
 800b490:	4604      	mov	r4, r0
 800b492:	460d      	mov	r5, r1
 800b494:	f011 0f01 	tst.w	r1, #1
 800b498:	d015      	beq.n	800b4c6 <ull_configciadiag+0x3a>
 800b49a:	2300      	movs	r3, #0
 800b49c:	9300      	str	r3, [sp, #0]
 800b49e:	23ef      	movs	r3, #239	; 0xef
 800b4a0:	2202      	movs	r2, #2
 800b4a2:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800b4a6:	f7ff ffdd 	bl	800b464 <dwt_modify8bitoffsetreg>
 800b4aa:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800b4ac:	759d      	strb	r5, [r3, #22]
 800b4ae:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800b4b0:	7d9b      	ldrb	r3, [r3, #22]
 800b4b2:	085b      	lsrs	r3, r3, #1
 800b4b4:	d010      	beq.n	800b4d8 <ull_configciadiag+0x4c>
 800b4b6:	086b      	lsrs	r3, r5, #1
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	490e      	ldr	r1, [pc, #56]	; (800b4f4 <ull_configciadiag+0x68>)
 800b4bc:	4620      	mov	r0, r4
 800b4be:	f7ff fb9b 	bl	800abf8 <dwt_write8bitoffsetreg>
 800b4c2:	b003      	add	sp, #12
 800b4c4:	bd30      	pop	{r4, r5, pc}
 800b4c6:	2310      	movs	r3, #16
 800b4c8:	9300      	str	r3, [sp, #0]
 800b4ca:	23ff      	movs	r3, #255	; 0xff
 800b4cc:	2202      	movs	r2, #2
 800b4ce:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800b4d2:	f7ff ffc7 	bl	800b464 <dwt_modify8bitoffsetreg>
 800b4d6:	e7e8      	b.n	800b4aa <ull_configciadiag+0x1e>
 800b4d8:	2301      	movs	r3, #1
 800b4da:	9300      	str	r3, [sp, #0]
 800b4dc:	23ff      	movs	r3, #255	; 0xff
 800b4de:	2200      	movs	r2, #0
 800b4e0:	4904      	ldr	r1, [pc, #16]	; (800b4f4 <ull_configciadiag+0x68>)
 800b4e2:	4620      	mov	r0, r4
 800b4e4:	f7ff ffbe 	bl	800b464 <dwt_modify8bitoffsetreg>
 800b4e8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800b4ea:	7d93      	ldrb	r3, [r2, #22]
 800b4ec:	f043 0302 	orr.w	r3, r3, #2
 800b4f0:	7593      	strb	r3, [r2, #22]
 800b4f2:	e7e6      	b.n	800b4c2 <ull_configciadiag+0x36>
 800b4f4:	00010020 	.word	0x00010020

0800b4f8 <ull_calcbandwidthadj>:
 800b4f8:	b570      	push	{r4, r5, r6, lr}
 800b4fa:	b082      	sub	sp, #8
 800b4fc:	4604      	mov	r4, r0
 800b4fe:	460d      	mov	r5, r1
 800b500:	2101      	movs	r1, #1
 800b502:	f7ff f99f 	bl	800a844 <ull_force_clocks>
 800b506:	2100      	movs	r1, #0
 800b508:	4620      	mov	r0, r4
 800b50a:	f7ff fe5d 	bl	800b1c8 <ull_enable_rf_tx>
 800b50e:	4620      	mov	r0, r4
 800b510:	f7ff fe8e 	bl	800b230 <ull_enable_rftx_blocks>
 800b514:	f3c5 030b 	ubfx	r3, r5, #0, #12
 800b518:	2200      	movs	r2, #0
 800b51a:	4915      	ldr	r1, [pc, #84]	; (800b570 <ull_calcbandwidthadj+0x78>)
 800b51c:	4620      	mov	r0, r4
 800b51e:	f7ff f980 	bl	800a822 <dwt_write16bitoffsetreg>
 800b522:	2303      	movs	r3, #3
 800b524:	9300      	str	r3, [sp, #0]
 800b526:	23ff      	movs	r3, #255	; 0xff
 800b528:	2200      	movs	r2, #0
 800b52a:	4912      	ldr	r1, [pc, #72]	; (800b574 <ull_calcbandwidthadj+0x7c>)
 800b52c:	4620      	mov	r0, r4
 800b52e:	f7ff ff99 	bl	800b464 <dwt_modify8bitoffsetreg>
 800b532:	4e10      	ldr	r6, [pc, #64]	; (800b574 <ull_calcbandwidthadj+0x7c>)
 800b534:	2500      	movs	r5, #0
 800b536:	462a      	mov	r2, r5
 800b538:	4631      	mov	r1, r6
 800b53a:	4620      	mov	r0, r4
 800b53c:	f7fe fd81 	bl	800a042 <dwt_read8bitoffsetreg>
 800b540:	f010 0f01 	tst.w	r0, #1
 800b544:	d1f7      	bne.n	800b536 <ull_calcbandwidthadj+0x3e>
 800b546:	4620      	mov	r0, r4
 800b548:	f7ff faf8 	bl	800ab3c <ull_disable_rftx_blocks>
 800b54c:	2100      	movs	r1, #0
 800b54e:	4620      	mov	r0, r4
 800b550:	f7ff fafe 	bl	800ab50 <ull_disable_rf_tx>
 800b554:	2105      	movs	r1, #5
 800b556:	4620      	mov	r0, r4
 800b558:	f7ff f974 	bl	800a844 <ull_force_clocks>
 800b55c:	2200      	movs	r2, #0
 800b55e:	4906      	ldr	r1, [pc, #24]	; (800b578 <ull_calcbandwidthadj+0x80>)
 800b560:	4620      	mov	r0, r4
 800b562:	f7fe fd6e 	bl	800a042 <dwt_read8bitoffsetreg>
 800b566:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800b56a:	b002      	add	sp, #8
 800b56c:	bd70      	pop	{r4, r5, r6, pc}
 800b56e:	bf00      	nop
 800b570:	0008001c 	.word	0x0008001c
 800b574:	00080010 	.word	0x00080010
 800b578:	0007001c 	.word	0x0007001c

0800b57c <ull_configuretxrf>:
 800b57c:	b538      	push	{r3, r4, r5, lr}
 800b57e:	4605      	mov	r5, r0
 800b580:	460c      	mov	r4, r1
 800b582:	f8b1 1005 	ldrh.w	r1, [r1, #5]
 800b586:	b149      	cbz	r1, 800b59c <ull_configuretxrf+0x20>
 800b588:	f7ff ffb6 	bl	800b4f8 <ull_calcbandwidthadj>
 800b58c:	f8d4 3001 	ldr.w	r3, [r4, #1]
 800b590:	2200      	movs	r2, #0
 800b592:	4905      	ldr	r1, [pc, #20]	; (800b5a8 <ull_configuretxrf+0x2c>)
 800b594:	4628      	mov	r0, r5
 800b596:	f7ff f9a1 	bl	800a8dc <dwt_write32bitoffsetreg>
 800b59a:	bd38      	pop	{r3, r4, r5, pc}
 800b59c:	7823      	ldrb	r3, [r4, #0]
 800b59e:	2200      	movs	r2, #0
 800b5a0:	4902      	ldr	r1, [pc, #8]	; (800b5ac <ull_configuretxrf+0x30>)
 800b5a2:	f7ff fb29 	bl	800abf8 <dwt_write8bitoffsetreg>
 800b5a6:	e7f1      	b.n	800b58c <ull_configuretxrf+0x10>
 800b5a8:	00010004 	.word	0x00010004
 800b5ac:	0007001c 	.word	0x0007001c

0800b5b0 <ull_repeated_frames>:
 800b5b0:	b530      	push	{r4, r5, lr}
 800b5b2:	b083      	sub	sp, #12
 800b5b4:	4604      	mov	r4, r0
 800b5b6:	460d      	mov	r5, r1
 800b5b8:	2310      	movs	r3, #16
 800b5ba:	9300      	str	r3, [sp, #0]
 800b5bc:	23ff      	movs	r3, #255	; 0xff
 800b5be:	2200      	movs	r2, #0
 800b5c0:	4906      	ldr	r1, [pc, #24]	; (800b5dc <ull_repeated_frames+0x2c>)
 800b5c2:	f7ff ff4f 	bl	800b464 <dwt_modify8bitoffsetreg>
 800b5c6:	462b      	mov	r3, r5
 800b5c8:	2d02      	cmp	r5, #2
 800b5ca:	bf38      	it	cc
 800b5cc:	2302      	movcc	r3, #2
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	2128      	movs	r1, #40	; 0x28
 800b5d2:	4620      	mov	r0, r4
 800b5d4:	f7ff f982 	bl	800a8dc <dwt_write32bitoffsetreg>
 800b5d8:	b003      	add	sp, #12
 800b5da:	bd30      	pop	{r4, r5, pc}
 800b5dc:	000f0028 	.word	0x000f0028

0800b5e0 <ull_setdwstate>:
 800b5e0:	b530      	push	{r4, r5, lr}
 800b5e2:	b083      	sub	sp, #12
 800b5e4:	4604      	mov	r4, r0
 800b5e6:	2901      	cmp	r1, #1
 800b5e8:	d01d      	beq.n	800b626 <ull_setdwstate+0x46>
 800b5ea:	2902      	cmp	r1, #2
 800b5ec:	d02f      	beq.n	800b64e <ull_setdwstate+0x6e>
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	9300      	str	r3, [sp, #0]
 800b5f2:	23ff      	movs	r3, #255	; 0xff
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	4925      	ldr	r1, [pc, #148]	; (800b68c <ull_setdwstate+0xac>)
 800b5f8:	f7ff ff34 	bl	800b464 <dwt_modify8bitoffsetreg>
 800b5fc:	4d24      	ldr	r5, [pc, #144]	; (800b690 <ull_setdwstate+0xb0>)
 800b5fe:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b602:	9300      	str	r3, [sp, #0]
 800b604:	f46f 7380 	mvn.w	r3, #256	; 0x100
 800b608:	2200      	movs	r2, #0
 800b60a:	4629      	mov	r1, r5
 800b60c:	4620      	mov	r0, r4
 800b60e:	f7ff fdb7 	bl	800b180 <dwt_modify32bitoffsetreg>
 800b612:	2300      	movs	r3, #0
 800b614:	9300      	str	r3, [sp, #0]
 800b616:	237f      	movs	r3, #127	; 0x7f
 800b618:	2202      	movs	r2, #2
 800b61a:	4629      	mov	r1, r5
 800b61c:	4620      	mov	r0, r4
 800b61e:	f7ff ff21 	bl	800b464 <dwt_modify8bitoffsetreg>
 800b622:	b003      	add	sp, #12
 800b624:	bd30      	pop	{r4, r5, pc}
 800b626:	2105      	movs	r1, #5
 800b628:	f7ff f90c 	bl	800a844 <ull_force_clocks>
 800b62c:	2302      	movs	r3, #2
 800b62e:	9300      	str	r3, [sp, #0]
 800b630:	f04f 33ff 	mov.w	r3, #4294967295
 800b634:	2200      	movs	r2, #0
 800b636:	4917      	ldr	r1, [pc, #92]	; (800b694 <ull_setdwstate+0xb4>)
 800b638:	4620      	mov	r0, r4
 800b63a:	f7ff fda1 	bl	800b180 <dwt_modify32bitoffsetreg>
 800b63e:	2201      	movs	r2, #1
 800b640:	9200      	str	r2, [sp, #0]
 800b642:	23ff      	movs	r3, #255	; 0xff
 800b644:	4912      	ldr	r1, [pc, #72]	; (800b690 <ull_setdwstate+0xb0>)
 800b646:	4620      	mov	r0, r4
 800b648:	f7ff ff0c 	bl	800b464 <dwt_modify8bitoffsetreg>
 800b64c:	e7e9      	b.n	800b622 <ull_setdwstate+0x42>
 800b64e:	2303      	movs	r3, #3
 800b650:	9300      	str	r3, [sp, #0]
 800b652:	23ff      	movs	r3, #255	; 0xff
 800b654:	2200      	movs	r2, #0
 800b656:	490d      	ldr	r1, [pc, #52]	; (800b68c <ull_setdwstate+0xac>)
 800b658:	f7ff ff04 	bl	800b464 <dwt_modify8bitoffsetreg>
 800b65c:	4d0c      	ldr	r5, [pc, #48]	; (800b690 <ull_setdwstate+0xb0>)
 800b65e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b662:	9300      	str	r3, [sp, #0]
 800b664:	f46f 7380 	mvn.w	r3, #256	; 0x100
 800b668:	2200      	movs	r2, #0
 800b66a:	4629      	mov	r1, r5
 800b66c:	4620      	mov	r0, r4
 800b66e:	f7ff fd87 	bl	800b180 <dwt_modify32bitoffsetreg>
 800b672:	2300      	movs	r3, #0
 800b674:	9300      	str	r3, [sp, #0]
 800b676:	237f      	movs	r3, #127	; 0x7f
 800b678:	2202      	movs	r2, #2
 800b67a:	4629      	mov	r1, r5
 800b67c:	4620      	mov	r0, r4
 800b67e:	f7ff fef1 	bl	800b464 <dwt_modify8bitoffsetreg>
 800b682:	2105      	movs	r1, #5
 800b684:	4620      	mov	r0, r4
 800b686:	f7ff f8dd 	bl	800a844 <ull_force_clocks>
 800b68a:	e7ca      	b.n	800b622 <ull_setdwstate+0x42>
 800b68c:	00110004 	.word	0x00110004
 800b690:	00110008 	.word	0x00110008
 800b694:	00090008 	.word	0x00090008

0800b698 <ull_configureframefilter>:
 800b698:	b530      	push	{r4, r5, lr}
 800b69a:	b083      	sub	sp, #12
 800b69c:	4605      	mov	r5, r0
 800b69e:	2902      	cmp	r1, #2
 800b6a0:	d00e      	beq.n	800b6c0 <ull_configureframefilter+0x28>
 800b6a2:	2400      	movs	r4, #0
 800b6a4:	9400      	str	r4, [sp, #0]
 800b6a6:	23fe      	movs	r3, #254	; 0xfe
 800b6a8:	4622      	mov	r2, r4
 800b6aa:	2110      	movs	r1, #16
 800b6ac:	f7ff feda 	bl	800b464 <dwt_modify8bitoffsetreg>
 800b6b0:	4623      	mov	r3, r4
 800b6b2:	4622      	mov	r2, r4
 800b6b4:	2114      	movs	r1, #20
 800b6b6:	4628      	mov	r0, r5
 800b6b8:	f7ff f8b3 	bl	800a822 <dwt_write16bitoffsetreg>
 800b6bc:	b003      	add	sp, #12
 800b6be:	bd30      	pop	{r4, r5, pc}
 800b6c0:	4614      	mov	r4, r2
 800b6c2:	2301      	movs	r3, #1
 800b6c4:	9300      	str	r3, [sp, #0]
 800b6c6:	23ff      	movs	r3, #255	; 0xff
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	2110      	movs	r1, #16
 800b6cc:	f7ff feca 	bl	800b464 <dwt_modify8bitoffsetreg>
 800b6d0:	4623      	mov	r3, r4
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	2114      	movs	r1, #20
 800b6d6:	4628      	mov	r0, r5
 800b6d8:	f7ff f8a3 	bl	800a822 <dwt_write16bitoffsetreg>
 800b6dc:	e7ee      	b.n	800b6bc <ull_configureframefilter+0x24>
	...

0800b6e0 <ull_run_pgfcal>:
 800b6e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6e4:	b082      	sub	sp, #8
 800b6e6:	4605      	mov	r5, r0
 800b6e8:	4c29      	ldr	r4, [pc, #164]	; (800b790 <ull_run_pgfcal+0xb0>)
 800b6ea:	4b2a      	ldr	r3, [pc, #168]	; (800b794 <ull_run_pgfcal+0xb4>)
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	4621      	mov	r1, r4
 800b6f0:	f7ff f8f4 	bl	800a8dc <dwt_write32bitoffsetreg>
 800b6f4:	2310      	movs	r3, #16
 800b6f6:	9300      	str	r3, [sp, #0]
 800b6f8:	23ff      	movs	r3, #255	; 0xff
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	4621      	mov	r1, r4
 800b6fe:	4628      	mov	r0, r5
 800b700:	f7ff feb0 	bl	800b464 <dwt_modify8bitoffsetreg>
 800b704:	2403      	movs	r4, #3
 800b706:	f04f 0814 	mov.w	r8, #20
 800b70a:	4f23      	ldr	r7, [pc, #140]	; (800b798 <ull_run_pgfcal+0xb8>)
 800b70c:	2600      	movs	r6, #0
 800b70e:	4640      	mov	r0, r8
 800b710:	f7f4 ff0d 	bl	800052e <deca_usleep>
 800b714:	4632      	mov	r2, r6
 800b716:	4639      	mov	r1, r7
 800b718:	4628      	mov	r0, r5
 800b71a:	f7fe fc92 	bl	800a042 <dwt_read8bitoffsetreg>
 800b71e:	2801      	cmp	r0, #1
 800b720:	d034      	beq.n	800b78c <ull_run_pgfcal+0xac>
 800b722:	1e63      	subs	r3, r4, #1
 800b724:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 800b728:	d1f1      	bne.n	800b70e <ull_run_pgfcal+0x2e>
 800b72a:	f06f 0402 	mvn.w	r4, #2
 800b72e:	4e18      	ldr	r6, [pc, #96]	; (800b790 <ull_run_pgfcal+0xb0>)
 800b730:	2300      	movs	r3, #0
 800b732:	461a      	mov	r2, r3
 800b734:	4631      	mov	r1, r6
 800b736:	4628      	mov	r0, r5
 800b738:	f7ff fa5e 	bl	800abf8 <dwt_write8bitoffsetreg>
 800b73c:	2301      	movs	r3, #1
 800b73e:	2200      	movs	r2, #0
 800b740:	4915      	ldr	r1, [pc, #84]	; (800b798 <ull_run_pgfcal+0xb8>)
 800b742:	4628      	mov	r0, r5
 800b744:	f7ff fa58 	bl	800abf8 <dwt_write8bitoffsetreg>
 800b748:	2301      	movs	r3, #1
 800b74a:	9300      	str	r3, [sp, #0]
 800b74c:	23ff      	movs	r3, #255	; 0xff
 800b74e:	2202      	movs	r2, #2
 800b750:	4631      	mov	r1, r6
 800b752:	4628      	mov	r0, r5
 800b754:	f7ff fe86 	bl	800b464 <dwt_modify8bitoffsetreg>
 800b758:	2200      	movs	r2, #0
 800b75a:	4910      	ldr	r1, [pc, #64]	; (800b79c <ull_run_pgfcal+0xbc>)
 800b75c:	4628      	mov	r0, r5
 800b75e:	f7fe fc48 	bl	8009ff2 <dwt_read32bitoffsetreg>
 800b762:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800b766:	4298      	cmp	r0, r3
 800b768:	bf08      	it	eq
 800b76a:	f06f 0403 	mvneq.w	r4, #3
 800b76e:	2200      	movs	r2, #0
 800b770:	490b      	ldr	r1, [pc, #44]	; (800b7a0 <ull_run_pgfcal+0xc0>)
 800b772:	4628      	mov	r0, r5
 800b774:	f7fe fc3d 	bl	8009ff2 <dwt_read32bitoffsetreg>
 800b778:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800b77c:	4298      	cmp	r0, r3
 800b77e:	bf14      	ite	ne
 800b780:	4620      	movne	r0, r4
 800b782:	f06f 0004 	mvneq.w	r0, #4
 800b786:	b002      	add	sp, #8
 800b788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b78c:	2400      	movs	r4, #0
 800b78e:	e7ce      	b.n	800b72e <ull_run_pgfcal+0x4e>
 800b790:	0004000c 	.word	0x0004000c
 800b794:	00020001 	.word	0x00020001
 800b798:	00040020 	.word	0x00040020
 800b79c:	00040014 	.word	0x00040014
 800b7a0:	0004001c 	.word	0x0004001c

0800b7a4 <ull_setinterrupt>:
 800b7a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b7a8:	b083      	sub	sp, #12
 800b7aa:	4605      	mov	r5, r0
 800b7ac:	4688      	mov	r8, r1
 800b7ae:	4617      	mov	r7, r2
 800b7b0:	461c      	mov	r4, r3
 800b7b2:	f7f4 fe93 	bl	80004dc <decamutexon>
 800b7b6:	4606      	mov	r6, r0
 800b7b8:	2c02      	cmp	r4, #2
 800b7ba:	d019      	beq.n	800b7f0 <ull_setinterrupt+0x4c>
 800b7bc:	2c04      	cmp	r4, #4
 800b7be:	d017      	beq.n	800b7f0 <ull_setinterrupt+0x4c>
 800b7c0:	f004 03fd 	and.w	r3, r4, #253	; 0xfd
 800b7c4:	2b01      	cmp	r3, #1
 800b7c6:	d03f      	beq.n	800b848 <ull_setinterrupt+0xa4>
 800b7c8:	f04f 0900 	mov.w	r9, #0
 800b7cc:	f8cd 9000 	str.w	r9, [sp]
 800b7d0:	ea6f 0308 	mvn.w	r3, r8
 800b7d4:	464a      	mov	r2, r9
 800b7d6:	213c      	movs	r1, #60	; 0x3c
 800b7d8:	4628      	mov	r0, r5
 800b7da:	f7ff fcd1 	bl	800b180 <dwt_modify32bitoffsetreg>
 800b7de:	f8cd 9000 	str.w	r9, [sp]
 800b7e2:	43fb      	mvns	r3, r7
 800b7e4:	464a      	mov	r2, r9
 800b7e6:	2140      	movs	r1, #64	; 0x40
 800b7e8:	4628      	mov	r0, r5
 800b7ea:	f7ff fcc9 	bl	800b180 <dwt_modify32bitoffsetreg>
 800b7ee:	e00b      	b.n	800b808 <ull_setinterrupt+0x64>
 800b7f0:	4643      	mov	r3, r8
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	213c      	movs	r1, #60	; 0x3c
 800b7f6:	4628      	mov	r0, r5
 800b7f8:	f7ff f870 	bl	800a8dc <dwt_write32bitoffsetreg>
 800b7fc:	463b      	mov	r3, r7
 800b7fe:	2200      	movs	r2, #0
 800b800:	2140      	movs	r1, #64	; 0x40
 800b802:	4628      	mov	r0, r5
 800b804:	f7ff f86a 	bl	800a8dc <dwt_write32bitoffsetreg>
 800b808:	3c03      	subs	r4, #3
 800b80a:	b2e4      	uxtb	r4, r4
 800b80c:	2c01      	cmp	r4, #1
 800b80e:	d92d      	bls.n	800b86c <ull_setinterrupt+0xc8>
 800b810:	2200      	movs	r2, #0
 800b812:	213c      	movs	r1, #60	; 0x3c
 800b814:	4628      	mov	r0, r5
 800b816:	f7fe fbec 	bl	8009ff2 <dwt_read32bitoffsetreg>
 800b81a:	4603      	mov	r3, r0
 800b81c:	2200      	movs	r2, #0
 800b81e:	2144      	movs	r1, #68	; 0x44
 800b820:	4628      	mov	r0, r5
 800b822:	f7ff f85b 	bl	800a8dc <dwt_write32bitoffsetreg>
 800b826:	2200      	movs	r2, #0
 800b828:	2140      	movs	r1, #64	; 0x40
 800b82a:	4628      	mov	r0, r5
 800b82c:	f7fe fbe1 	bl	8009ff2 <dwt_read32bitoffsetreg>
 800b830:	4603      	mov	r3, r0
 800b832:	2200      	movs	r2, #0
 800b834:	2148      	movs	r1, #72	; 0x48
 800b836:	4628      	mov	r0, r5
 800b838:	f7ff f850 	bl	800a8dc <dwt_write32bitoffsetreg>
 800b83c:	4630      	mov	r0, r6
 800b83e:	f7f4 fe5e 	bl	80004fe <decamutexoff>
 800b842:	b003      	add	sp, #12
 800b844:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b848:	f8cd 8000 	str.w	r8, [sp]
 800b84c:	f04f 33ff 	mov.w	r3, #4294967295
 800b850:	2200      	movs	r2, #0
 800b852:	213c      	movs	r1, #60	; 0x3c
 800b854:	4628      	mov	r0, r5
 800b856:	f7ff fc93 	bl	800b180 <dwt_modify32bitoffsetreg>
 800b85a:	9700      	str	r7, [sp, #0]
 800b85c:	f04f 33ff 	mov.w	r3, #4294967295
 800b860:	2200      	movs	r2, #0
 800b862:	2140      	movs	r1, #64	; 0x40
 800b864:	4628      	mov	r0, r5
 800b866:	f7ff fc8b 	bl	800b180 <dwt_modify32bitoffsetreg>
 800b86a:	e7cd      	b.n	800b808 <ull_setinterrupt+0x64>
 800b86c:	2110      	movs	r1, #16
 800b86e:	9100      	str	r1, [sp, #0]
 800b870:	23ff      	movs	r3, #255	; 0xff
 800b872:	2202      	movs	r2, #2
 800b874:	4628      	mov	r0, r5
 800b876:	f7ff fdf5 	bl	800b464 <dwt_modify8bitoffsetreg>
 800b87a:	e7c9      	b.n	800b810 <ull_setinterrupt+0x6c>

0800b87c <prs_ack_enable>:
 800b87c:	b500      	push	{lr}
 800b87e:	b083      	sub	sp, #12
 800b880:	2900      	cmp	r1, #0
 800b882:	bf0b      	itete	eq
 800b884:	23ff      	moveq	r3, #255	; 0xff
 800b886:	23f7      	movne	r3, #247	; 0xf7
 800b888:	2200      	moveq	r2, #0
 800b88a:	2208      	movne	r2, #8
 800b88c:	9200      	str	r2, [sp, #0]
 800b88e:	2201      	movs	r2, #1
 800b890:	2110      	movs	r1, #16
 800b892:	f7ff fde7 	bl	800b464 <dwt_modify8bitoffsetreg>
 800b896:	b003      	add	sp, #12
 800b898:	f85d fb04 	ldr.w	pc, [sp], #4

0800b89c <dwt_modify16bitoffsetreg>:
 800b89c:	b510      	push	{r4, lr}
 800b89e:	b084      	sub	sp, #16
 800b8a0:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 800b8a4:	f88d 300c 	strb.w	r3, [sp, #12]
 800b8a8:	0a1b      	lsrs	r3, r3, #8
 800b8aa:	f88d 300d 	strb.w	r3, [sp, #13]
 800b8ae:	f88d 400e 	strb.w	r4, [sp, #14]
 800b8b2:	0a24      	lsrs	r4, r4, #8
 800b8b4:	f88d 400f 	strb.w	r4, [sp, #15]
 800b8b8:	f248 0302 	movw	r3, #32770	; 0x8002
 800b8bc:	9301      	str	r3, [sp, #4]
 800b8be:	ab03      	add	r3, sp, #12
 800b8c0:	9300      	str	r3, [sp, #0]
 800b8c2:	2304      	movs	r3, #4
 800b8c4:	b292      	uxth	r2, r2
 800b8c6:	f7fe fb0c 	bl	8009ee2 <dwt_xfer3xxx>
 800b8ca:	b004      	add	sp, #16
 800b8cc:	bd10      	pop	{r4, pc}
	...

0800b8d0 <ull_setleds>:
 800b8d0:	b530      	push	{r4, r5, lr}
 800b8d2:	b083      	sub	sp, #12
 800b8d4:	4604      	mov	r4, r0
 800b8d6:	f011 0f01 	tst.w	r1, #1
 800b8da:	d01f      	beq.n	800b91c <ull_setleds+0x4c>
 800b8dc:	460d      	mov	r5, r1
 800b8de:	f44f 7310 	mov.w	r3, #576	; 0x240
 800b8e2:	9300      	str	r3, [sp, #0]
 800b8e4:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800b8ee:	f7ff fc47 	bl	800b180 <dwt_modify32bitoffsetreg>
 800b8f2:	f44f 0304 	mov.w	r3, #8650752	; 0x840000
 800b8f6:	9300      	str	r3, [sp, #0]
 800b8f8:	f04f 33ff 	mov.w	r3, #4294967295
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	4918      	ldr	r1, [pc, #96]	; (800b960 <ull_setleds+0x90>)
 800b900:	4620      	mov	r0, r4
 800b902:	f7ff fc3d 	bl	800b180 <dwt_modify32bitoffsetreg>
 800b906:	f015 0f02 	tst.w	r5, #2
 800b90a:	d11a      	bne.n	800b942 <ull_setleds+0x72>
 800b90c:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b910:	2200      	movs	r2, #0
 800b912:	4914      	ldr	r1, [pc, #80]	; (800b964 <ull_setleds+0x94>)
 800b914:	4620      	mov	r0, r4
 800b916:	f7fe ffe1 	bl	800a8dc <dwt_write32bitoffsetreg>
 800b91a:	e010      	b.n	800b93e <ull_setleds+0x6e>
 800b91c:	2500      	movs	r5, #0
 800b91e:	9500      	str	r5, [sp, #0]
 800b920:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 800b924:	462a      	mov	r2, r5
 800b926:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800b92a:	f7ff fc29 	bl	800b180 <dwt_modify32bitoffsetreg>
 800b92e:	9500      	str	r5, [sp, #0]
 800b930:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800b934:	462a      	mov	r2, r5
 800b936:	490b      	ldr	r1, [pc, #44]	; (800b964 <ull_setleds+0x94>)
 800b938:	4620      	mov	r0, r4
 800b93a:	f7ff ffaf 	bl	800b89c <dwt_modify16bitoffsetreg>
 800b93e:	b003      	add	sp, #12
 800b940:	bd30      	pop	{r4, r5, pc}
 800b942:	4d08      	ldr	r5, [pc, #32]	; (800b964 <ull_setleds+0x94>)
 800b944:	4b08      	ldr	r3, [pc, #32]	; (800b968 <ull_setleds+0x98>)
 800b946:	2200      	movs	r2, #0
 800b948:	4629      	mov	r1, r5
 800b94a:	4620      	mov	r0, r4
 800b94c:	f7fe ffc6 	bl	800a8dc <dwt_write32bitoffsetreg>
 800b950:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b954:	2200      	movs	r2, #0
 800b956:	4629      	mov	r1, r5
 800b958:	4620      	mov	r0, r4
 800b95a:	f7fe ffbf 	bl	800a8dc <dwt_write32bitoffsetreg>
 800b95e:	e7ee      	b.n	800b93e <ull_setleds+0x6e>
 800b960:	00110004 	.word	0x00110004
 800b964:	00110018 	.word	0x00110018
 800b968:	000f0110 	.word	0x000f0110

0800b96c <ull_pgf_cal>:
 800b96c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b96e:	b083      	sub	sp, #12
 800b970:	4604      	mov	r4, r0
 800b972:	2901      	cmp	r1, #1
 800b974:	d009      	beq.n	800b98a <ull_pgf_cal+0x1e>
 800b976:	2014      	movs	r0, #20
 800b978:	f7f4 fdd9 	bl	800052e <deca_usleep>
 800b97c:	4620      	mov	r0, r4
 800b97e:	f7ff feaf 	bl	800b6e0 <ull_run_pgfcal>
 800b982:	4605      	mov	r5, r0
 800b984:	4628      	mov	r0, r5
 800b986:	b003      	add	sp, #12
 800b988:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b98a:	4e0f      	ldr	r6, [pc, #60]	; (800b9c8 <ull_pgf_cal+0x5c>)
 800b98c:	2200      	movs	r2, #0
 800b98e:	4631      	mov	r1, r6
 800b990:	f7fe fb45 	bl	800a01e <dwt_read16bitoffsetreg>
 800b994:	4607      	mov	r7, r0
 800b996:	f240 1307 	movw	r3, #263	; 0x107
 800b99a:	9300      	str	r3, [sp, #0]
 800b99c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	4631      	mov	r1, r6
 800b9a4:	4620      	mov	r0, r4
 800b9a6:	f7ff ff79 	bl	800b89c <dwt_modify16bitoffsetreg>
 800b9aa:	2014      	movs	r0, #20
 800b9ac:	f7f4 fdbf 	bl	800052e <deca_usleep>
 800b9b0:	4620      	mov	r0, r4
 800b9b2:	f7ff fe95 	bl	800b6e0 <ull_run_pgfcal>
 800b9b6:	4605      	mov	r5, r0
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	9200      	str	r2, [sp, #0]
 800b9bc:	463b      	mov	r3, r7
 800b9be:	4631      	mov	r1, r6
 800b9c0:	4620      	mov	r0, r4
 800b9c2:	f7ff ff6b 	bl	800b89c <dwt_modify16bitoffsetreg>
 800b9c6:	e7dd      	b.n	800b984 <ull_pgf_cal+0x18>
 800b9c8:	00070048 	.word	0x00070048

0800b9cc <ull_setgpiovalue>:
 800b9cc:	b500      	push	{lr}
 800b9ce:	b083      	sub	sp, #12
 800b9d0:	2a01      	cmp	r2, #1
 800b9d2:	d009      	beq.n	800b9e8 <ull_setgpiovalue+0x1c>
 800b9d4:	43cb      	mvns	r3, r1
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	9200      	str	r2, [sp, #0]
 800b9da:	b29b      	uxth	r3, r3
 800b9dc:	4906      	ldr	r1, [pc, #24]	; (800b9f8 <ull_setgpiovalue+0x2c>)
 800b9de:	f7ff ff5d 	bl	800b89c <dwt_modify16bitoffsetreg>
 800b9e2:	b003      	add	sp, #12
 800b9e4:	f85d fb04 	ldr.w	pc, [sp], #4
 800b9e8:	9100      	str	r1, [sp, #0]
 800b9ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	4901      	ldr	r1, [pc, #4]	; (800b9f8 <ull_setgpiovalue+0x2c>)
 800b9f2:	f7ff ff53 	bl	800b89c <dwt_modify16bitoffsetreg>
 800b9f6:	e7f4      	b.n	800b9e2 <ull_setgpiovalue+0x16>
 800b9f8:	0005000c 	.word	0x0005000c

0800b9fc <ull_readaccdata>:
 800b9fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9fe:	b083      	sub	sp, #12
 800ba00:	4604      	mov	r4, r0
 800ba02:	460f      	mov	r7, r1
 800ba04:	4616      	mov	r6, r2
 800ba06:	461d      	mov	r5, r3
 800ba08:	f248 0340 	movw	r3, #32832	; 0x8040
 800ba0c:	9300      	str	r3, [sp, #0]
 800ba0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ba12:	2200      	movs	r2, #0
 800ba14:	4918      	ldr	r1, [pc, #96]	; (800ba78 <ull_readaccdata+0x7c>)
 800ba16:	f7ff ff41 	bl	800b89c <dwt_modify16bitoffsetreg>
 800ba1a:	19aa      	adds	r2, r5, r6
 800ba1c:	f243 0301 	movw	r3, #12289	; 0x3001
 800ba20:	429a      	cmp	r2, r3
 800ba22:	dc15      	bgt.n	800ba50 <ull_readaccdata+0x54>
 800ba24:	2d7f      	cmp	r5, #127	; 0x7f
 800ba26:	d91d      	bls.n	800ba64 <ull_readaccdata+0x68>
 800ba28:	2315      	movs	r3, #21
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	4913      	ldr	r1, [pc, #76]	; (800ba7c <ull_readaccdata+0x80>)
 800ba2e:	4620      	mov	r0, r4
 800ba30:	f7fe ff54 	bl	800a8dc <dwt_write32bitoffsetreg>
 800ba34:	462b      	mov	r3, r5
 800ba36:	2200      	movs	r2, #0
 800ba38:	4911      	ldr	r1, [pc, #68]	; (800ba80 <ull_readaccdata+0x84>)
 800ba3a:	4620      	mov	r0, r4
 800ba3c:	f7fe ff4e 	bl	800a8dc <dwt_write32bitoffsetreg>
 800ba40:	9700      	str	r7, [sp, #0]
 800ba42:	4633      	mov	r3, r6
 800ba44:	2200      	movs	r2, #0
 800ba46:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800ba4a:	4620      	mov	r0, r4
 800ba4c:	f7fe fac7 	bl	8009fde <dwt_readfromdevice>
 800ba50:	2200      	movs	r2, #0
 800ba52:	9200      	str	r2, [sp, #0]
 800ba54:	f647 73bf 	movw	r3, #32703	; 0x7fbf
 800ba58:	4907      	ldr	r1, [pc, #28]	; (800ba78 <ull_readaccdata+0x7c>)
 800ba5a:	4620      	mov	r0, r4
 800ba5c:	f7ff ff1e 	bl	800b89c <dwt_modify16bitoffsetreg>
 800ba60:	b003      	add	sp, #12
 800ba62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba64:	9700      	str	r7, [sp, #0]
 800ba66:	4633      	mov	r3, r6
 800ba68:	462a      	mov	r2, r5
 800ba6a:	f44f 11a8 	mov.w	r1, #1376256	; 0x150000
 800ba6e:	4620      	mov	r0, r4
 800ba70:	f7fe fab5 	bl	8009fde <dwt_readfromdevice>
 800ba74:	e7ec      	b.n	800ba50 <ull_readaccdata+0x54>
 800ba76:	bf00      	nop
 800ba78:	00110004 	.word	0x00110004
 800ba7c:	001f0004 	.word	0x001f0004
 800ba80:	001f0008 	.word	0x001f0008

0800ba84 <ull_repeated_cw>:
 800ba84:	b570      	push	{r4, r5, r6, lr}
 800ba86:	4606      	mov	r6, r0
 800ba88:	460c      	mov	r4, r1
 800ba8a:	4615      	mov	r5, r2
 800ba8c:	4b0e      	ldr	r3, [pc, #56]	; (800bac8 <ull_repeated_cw+0x44>)
 800ba8e:	2202      	movs	r2, #2
 800ba90:	490e      	ldr	r1, [pc, #56]	; (800bacc <ull_repeated_cw+0x48>)
 800ba92:	f7fe ff23 	bl	800a8dc <dwt_write32bitoffsetreg>
 800ba96:	2d0f      	cmp	r5, #15
 800ba98:	bfa8      	it	ge
 800ba9a:	250f      	movge	r5, #15
 800ba9c:	1e63      	subs	r3, r4, #1
 800ba9e:	2b03      	cmp	r3, #3
 800baa0:	bf28      	it	cs
 800baa2:	2404      	movcs	r4, #4
 800baa4:	2310      	movs	r3, #16
 800baa6:	4123      	asrs	r3, r4
 800baa8:	2200      	movs	r2, #0
 800baaa:	4909      	ldr	r1, [pc, #36]	; (800bad0 <ull_repeated_cw+0x4c>)
 800baac:	4630      	mov	r0, r6
 800baae:	f7fe ff15 	bl	800a8dc <dwt_write32bitoffsetreg>
 800bab2:	1e63      	subs	r3, r4, #1
 800bab4:	009b      	lsls	r3, r3, #2
 800bab6:	fa05 f303 	lsl.w	r3, r5, r3
 800baba:	2200      	movs	r2, #0
 800babc:	4905      	ldr	r1, [pc, #20]	; (800bad4 <ull_repeated_cw+0x50>)
 800babe:	4630      	mov	r0, r6
 800bac0:	f7fe ff0c 	bl	800a8dc <dwt_write32bitoffsetreg>
 800bac4:	bd70      	pop	{r4, r5, r6, pc}
 800bac6:	bf00      	nop
 800bac8:	00d20874 	.word	0x00d20874
 800bacc:	00110010 	.word	0x00110010
 800bad0:	00070028 	.word	0x00070028
 800bad4:	00080018 	.word	0x00080018

0800bad8 <ull_configure>:
 800bad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800badc:	b083      	sub	sp, #12
 800bade:	4604      	mov	r4, r0
 800bae0:	460d      	mov	r5, r1
 800bae2:	f891 9000 	ldrb.w	r9, [r1]
 800bae6:	790b      	ldrb	r3, [r1, #4]
 800bae8:	2b18      	cmp	r3, #24
 800baea:	d814      	bhi.n	800bb16 <ull_configure+0x3e>
 800baec:	78cf      	ldrb	r7, [r1, #3]
 800baee:	2f18      	cmp	r7, #24
 800baf0:	bf94      	ite	ls
 800baf2:	2700      	movls	r7, #0
 800baf4:	2701      	movhi	r7, #1
 800baf6:	b2ff      	uxtb	r7, r7
 800baf8:	79eb      	ldrb	r3, [r5, #7]
 800bafa:	2b01      	cmp	r3, #1
 800bafc:	bf0c      	ite	eq
 800bafe:	2110      	moveq	r1, #16
 800bb00:	2100      	movne	r1, #0
 800bb02:	786b      	ldrb	r3, [r5, #1]
 800bb04:	3b01      	subs	r3, #1
 800bb06:	2b06      	cmp	r3, #6
 800bb08:	d810      	bhi.n	800bb2c <ull_configure+0x54>
 800bb0a:	e8df f003 	tbb	[pc, r3]
 800bb0e:	0f06      	.short	0x0f06
 800bb10:	0f0c120f 	.word	0x0f0c120f
 800bb14:	09          	.byte	0x09
 800bb15:	00          	.byte	0x00
 800bb16:	2701      	movs	r7, #1
 800bb18:	e7ed      	b.n	800baf6 <ull_configure+0x1e>
 800bb1a:	f04f 0a40 	mov.w	sl, #64	; 0x40
 800bb1e:	e00a      	b.n	800bb36 <ull_configure+0x5e>
 800bb20:	f04f 0a48 	mov.w	sl, #72	; 0x48
 800bb24:	e007      	b.n	800bb36 <ull_configure+0x5e>
 800bb26:	f04f 0a80 	mov.w	sl, #128	; 0x80
 800bb2a:	e004      	b.n	800bb36 <ull_configure+0x5e>
 800bb2c:	f44f 7a80 	mov.w	sl, #256	; 0x100
 800bb30:	e001      	b.n	800bb36 <ull_configure+0x5e>
 800bb32:	f04f 0a20 	mov.w	sl, #32
 800bb36:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800bb38:	8a13      	ldrh	r3, [r2, #16]
 800bb3a:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800bb3e:	8213      	strh	r3, [r2, #16]
 800bb40:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800bb42:	79ea      	ldrb	r2, [r5, #7]
 800bb44:	72da      	strb	r2, [r3, #11]
 800bb46:	7b2e      	ldrb	r6, [r5, #12]
 800bb48:	1cb3      	adds	r3, r6, #2
 800bb4a:	2601      	movs	r6, #1
 800bb4c:	409e      	lsls	r6, r3
 800bb4e:	fa1f f886 	uxth.w	r8, r6
 800bb52:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800bb54:	4bca      	ldr	r3, [pc, #808]	; (800be80 <ull_configure+0x3a8>)
 800bb56:	fb03 f308 	mul.w	r3, r3, r8
 800bb5a:	0bdb      	lsrs	r3, r3, #15
 800bb5c:	8253      	strh	r3, [r2, #18]
 800bb5e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800bb60:	7aea      	ldrb	r2, [r5, #11]
 800bb62:	755a      	strb	r2, [r3, #21]
 800bb64:	7a2b      	ldrb	r3, [r5, #8]
 800bb66:	015b      	lsls	r3, r3, #5
 800bb68:	f003 0320 	and.w	r3, r3, #32
 800bb6c:	7b6a      	ldrb	r2, [r5, #13]
 800bb6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bb72:	7aea      	ldrb	r2, [r5, #11]
 800bb74:	0312      	lsls	r2, r2, #12
 800bb76:	f402 4230 	and.w	r2, r2, #45056	; 0xb000
 800bb7a:	4313      	orrs	r3, r2
 800bb7c:	430b      	orrs	r3, r1
 800bb7e:	9300      	str	r3, [sp, #0]
 800bb80:	4bc0      	ldr	r3, [pc, #768]	; (800be84 <ull_configure+0x3ac>)
 800bb82:	2200      	movs	r2, #0
 800bb84:	2110      	movs	r1, #16
 800bb86:	4620      	mov	r0, r4
 800bb88:	f7ff fafa 	bl	800b180 <dwt_modify32bitoffsetreg>
 800bb8c:	2f00      	cmp	r7, #0
 800bb8e:	f040 80fc 	bne.w	800bd8a <ull_configure+0x2b2>
 800bb92:	7aeb      	ldrb	r3, [r5, #11]
 800bb94:	b1f3      	cbz	r3, 800bbd4 <ull_configure+0xfc>
 800bb96:	7b6b      	ldrb	r3, [r5, #13]
 800bb98:	2b01      	cmp	r3, #1
 800bb9a:	f240 8121 	bls.w	800bde0 <ull_configure+0x308>
 800bb9e:	7b2a      	ldrb	r2, [r5, #12]
 800bba0:	4bb9      	ldr	r3, [pc, #740]	; (800be88 <ull_configure+0x3b0>)
 800bba2:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800bba6:	0112      	lsls	r2, r2, #4
 800bba8:	0ad3      	lsrs	r3, r2, #11
 800bbaa:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800bbae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bbb2:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800bbb6:	bf28      	it	cs
 800bbb8:	3301      	addcs	r3, #1
 800bbba:	b29b      	uxth	r3, r3
 800bbbc:	eb0a 0ac8 	add.w	sl, sl, r8, lsl #3
 800bbc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbc4:	9300      	str	r3, [sp, #0]
 800bbc6:	f64f 7380 	movw	r3, #65408	; 0xff80
 800bbca:	2202      	movs	r2, #2
 800bbcc:	49af      	ldr	r1, [pc, #700]	; (800be8c <ull_configure+0x3b4>)
 800bbce:	4620      	mov	r0, r4
 800bbd0:	f7ff fe64 	bl	800b89c <dwt_modify16bitoffsetreg>
 800bbd4:	2394      	movs	r3, #148	; 0x94
 800bbd6:	9300      	str	r3, [sp, #0]
 800bbd8:	4bad      	ldr	r3, [pc, #692]	; (800be90 <ull_configure+0x3b8>)
 800bbda:	2200      	movs	r2, #0
 800bbdc:	49ad      	ldr	r1, [pc, #692]	; (800be94 <ull_configure+0x3bc>)
 800bbde:	4620      	mov	r0, r4
 800bbe0:	f7ff face 	bl	800b180 <dwt_modify32bitoffsetreg>
 800bbe4:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800bbe8:	f340 810d 	ble.w	800be06 <ull_configure+0x32e>
 800bbec:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800bbee:	8a13      	ldrh	r3, [r2, #16]
 800bbf0:	f043 0320 	orr.w	r3, r3, #32
 800bbf4:	8213      	strh	r3, [r2, #16]
 800bbf6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bbfa:	9300      	str	r3, [sp, #0]
 800bbfc:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 800bc00:	2200      	movs	r2, #0
 800bc02:	49a5      	ldr	r1, [pc, #660]	; (800be98 <ull_configure+0x3c0>)
 800bc04:	4620      	mov	r0, r4
 800bc06:	f7ff fe49 	bl	800b89c <dwt_modify16bitoffsetreg>
 800bc0a:	7b6b      	ldrb	r3, [r5, #13]
 800bc0c:	2b01      	cmp	r3, #1
 800bc0e:	f000 8105 	beq.w	800be1c <ull_configure+0x344>
 800bc12:	78ab      	ldrb	r3, [r5, #2]
 800bc14:	f043 0310 	orr.w	r3, r3, #16
 800bc18:	9300      	str	r3, [sp, #0]
 800bc1a:	23fc      	movs	r3, #252	; 0xfc
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800bc22:	4620      	mov	r0, r4
 800bc24:	f7ff fc1e 	bl	800b464 <dwt_modify8bitoffsetreg>
 800bc28:	1e73      	subs	r3, r6, #1
 800bc2a:	b2db      	uxtb	r3, r3
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800bc32:	4620      	mov	r0, r4
 800bc34:	f7fe ffe0 	bl	800abf8 <dwt_write8bitoffsetreg>
 800bc38:	786b      	ldrb	r3, [r5, #1]
 800bc3a:	2b07      	cmp	r3, #7
 800bc3c:	bf0c      	ite	eq
 800bc3e:	2308      	moveq	r3, #8
 800bc40:	2300      	movne	r3, #0
 800bc42:	2201      	movs	r2, #1
 800bc44:	2124      	movs	r1, #36	; 0x24
 800bc46:	4620      	mov	r0, r4
 800bc48:	f7fe ffd6 	bl	800abf8 <dwt_write8bitoffsetreg>
 800bc4c:	7aeb      	ldrb	r3, [r5, #11]
 800bc4e:	f003 0303 	and.w	r3, r3, #3
 800bc52:	2b03      	cmp	r3, #3
 800bc54:	bf0c      	ite	eq
 800bc56:	4b91      	ldreq	r3, [pc, #580]	; (800be9c <ull_configure+0x3c4>)
 800bc58:	4b91      	ldrne	r3, [pc, #580]	; (800bea0 <ull_configure+0x3c8>)
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	4991      	ldr	r1, [pc, #580]	; (800bea4 <ull_configure+0x3cc>)
 800bc5e:	4620      	mov	r0, r4
 800bc60:	f7fe fe3c 	bl	800a8dc <dwt_write32bitoffsetreg>
 800bc64:	2200      	movs	r2, #0
 800bc66:	4990      	ldr	r1, [pc, #576]	; (800bea8 <ull_configure+0x3d0>)
 800bc68:	4620      	mov	r0, r4
 800bc6a:	f7fe f9c2 	bl	8009ff2 <dwt_read32bitoffsetreg>
 800bc6e:	f420 50ff 	bic.w	r0, r0, #8160	; 0x1fe0
 800bc72:	f020 001f 	bic.w	r0, r0, #31
 800bc76:	f1b9 0f09 	cmp.w	r9, #9
 800bc7a:	bf08      	it	eq
 800bc7c:	f040 0001 	orreq.w	r0, r0, #1
 800bc80:	792a      	ldrb	r2, [r5, #4]
 800bc82:	0212      	lsls	r2, r2, #8
 800bc84:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
 800bc88:	78eb      	ldrb	r3, [r5, #3]
 800bc8a:	00db      	lsls	r3, r3, #3
 800bc8c:	b2db      	uxtb	r3, r3
 800bc8e:	431a      	orrs	r2, r3
 800bc90:	796b      	ldrb	r3, [r5, #5]
 800bc92:	005b      	lsls	r3, r3, #1
 800bc94:	f003 0306 	and.w	r3, r3, #6
 800bc98:	4313      	orrs	r3, r2
 800bc9a:	4303      	orrs	r3, r0
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	4982      	ldr	r1, [pc, #520]	; (800bea8 <ull_configure+0x3d0>)
 800bca0:	4620      	mov	r0, r4
 800bca2:	f7fe fe1b 	bl	800a8dc <dwt_write32bitoffsetreg>
 800bca6:	79aa      	ldrb	r2, [r5, #6]
 800bca8:	786b      	ldrb	r3, [r5, #1]
 800bcaa:	031b      	lsls	r3, r3, #12
 800bcac:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 800bcb0:	9300      	str	r3, [sp, #0]
 800bcb2:	f46f 4374 	mvn.w	r3, #62464	; 0xf400
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	2120      	movs	r1, #32
 800bcba:	4620      	mov	r0, r4
 800bcbc:	f7ff fa60 	bl	800b180 <dwt_modify32bitoffsetreg>
 800bcc0:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 800bcc4:	b923      	cbnz	r3, 800bcd0 <ull_configure+0x1f8>
 800bcc6:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 800bcca:	726b      	strb	r3, [r5, #9]
 800bccc:	2300      	movs	r3, #0
 800bcce:	72ab      	strb	r3, [r5, #10]
 800bcd0:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 800bcd4:	2202      	movs	r2, #2
 800bcd6:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800bcda:	4620      	mov	r0, r4
 800bcdc:	f7fe fda1 	bl	800a822 <dwt_write16bitoffsetreg>
 800bce0:	2202      	movs	r2, #2
 800bce2:	4972      	ldr	r1, [pc, #456]	; (800beac <ull_configure+0x3d4>)
 800bce4:	4620      	mov	r0, r4
 800bce6:	f7fe f9ac 	bl	800a042 <dwt_read8bitoffsetreg>
 800bcea:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800bcec:	7bdb      	ldrb	r3, [r3, #15]
 800bcee:	454b      	cmp	r3, r9
 800bcf0:	f000 809e 	beq.w	800be30 <ull_configure+0x358>
 800bcf4:	2803      	cmp	r0, #3
 800bcf6:	f000 809f 	beq.w	800be38 <ull_configure+0x360>
 800bcfa:	f1b9 0f09 	cmp.w	r9, #9
 800bcfe:	f000 80a0 	beq.w	800be42 <ull_configure+0x36a>
 800bd02:	4b6b      	ldr	r3, [pc, #428]	; (800beb0 <ull_configure+0x3d8>)
 800bd04:	2200      	movs	r2, #0
 800bd06:	496b      	ldr	r1, [pc, #428]	; (800beb4 <ull_configure+0x3dc>)
 800bd08:	4620      	mov	r0, r4
 800bd0a:	f7fe fde7 	bl	800a8dc <dwt_write32bitoffsetreg>
 800bd0e:	f641 733c 	movw	r3, #7996	; 0x1f3c
 800bd12:	2200      	movs	r2, #0
 800bd14:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 800bd18:	4620      	mov	r0, r4
 800bd1a:	f7fe fd82 	bl	800a822 <dwt_write16bitoffsetreg>
 800bd1e:	2314      	movs	r3, #20
 800bd20:	2201      	movs	r2, #1
 800bd22:	4965      	ldr	r1, [pc, #404]	; (800beb8 <ull_configure+0x3e0>)
 800bd24:	4620      	mov	r0, r4
 800bd26:	f7fe ff67 	bl	800abf8 <dwt_write8bitoffsetreg>
 800bd2a:	230e      	movs	r3, #14
 800bd2c:	2202      	movs	r2, #2
 800bd2e:	4963      	ldr	r1, [pc, #396]	; (800bebc <ull_configure+0x3e4>)
 800bd30:	4620      	mov	r0, r4
 800bd32:	f7fe ff61 	bl	800abf8 <dwt_write8bitoffsetreg>
 800bd36:	2381      	movs	r3, #129	; 0x81
 800bd38:	2200      	movs	r2, #0
 800bd3a:	4961      	ldr	r1, [pc, #388]	; (800bec0 <ull_configure+0x3e8>)
 800bd3c:	4620      	mov	r0, r4
 800bd3e:	f7fe ff5b 	bl	800abf8 <dwt_write8bitoffsetreg>
 800bd42:	2302      	movs	r3, #2
 800bd44:	2200      	movs	r2, #0
 800bd46:	2144      	movs	r1, #68	; 0x44
 800bd48:	4620      	mov	r0, r4
 800bd4a:	f7fe ff55 	bl	800abf8 <dwt_write8bitoffsetreg>
 800bd4e:	2101      	movs	r1, #1
 800bd50:	4620      	mov	r0, r4
 800bd52:	f7ff fc45 	bl	800b5e0 <ull_setdwstate>
 800bd56:	f04f 0b32 	mov.w	fp, #50	; 0x32
 800bd5a:	f04f 0814 	mov.w	r8, #20
 800bd5e:	2700      	movs	r7, #0
 800bd60:	2644      	movs	r6, #68	; 0x44
 800bd62:	4640      	mov	r0, r8
 800bd64:	f7f4 fbe3 	bl	800052e <deca_usleep>
 800bd68:	463a      	mov	r2, r7
 800bd6a:	4631      	mov	r1, r6
 800bd6c:	4620      	mov	r0, r4
 800bd6e:	f7fe f968 	bl	800a042 <dwt_read8bitoffsetreg>
 800bd72:	f010 0f02 	tst.w	r0, #2
 800bd76:	f040 80b5 	bne.w	800bee4 <ull_configure+0x40c>
 800bd7a:	f10b 33ff 	add.w	r3, fp, #4294967295
 800bd7e:	f013 0bff 	ands.w	fp, r3, #255	; 0xff
 800bd82:	d1ee      	bne.n	800bd62 <ull_configure+0x28a>
 800bd84:	f06f 0001 	mvn.w	r0, #1
 800bd88:	e0de      	b.n	800bf48 <ull_configure+0x470>
 800bd8a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800bd8c:	8a13      	ldrh	r3, [r2, #16]
 800bd8e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800bd92:	8213      	strh	r3, [r2, #16]
 800bd94:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800bd98:	9300      	str	r3, [sp, #0]
 800bd9a:	f46f 5340 	mvn.w	r3, #12288	; 0x3000
 800bd9e:	2200      	movs	r2, #0
 800bda0:	493d      	ldr	r1, [pc, #244]	; (800be98 <ull_configure+0x3c0>)
 800bda2:	4620      	mov	r0, r4
 800bda4:	f7ff f9ec 	bl	800b180 <dwt_modify32bitoffsetreg>
 800bda8:	f240 3306 	movw	r3, #774	; 0x306
 800bdac:	2200      	movs	r2, #0
 800bdae:	4945      	ldr	r1, [pc, #276]	; (800bec4 <ull_configure+0x3ec>)
 800bdb0:	4620      	mov	r0, r4
 800bdb2:	f7fe fd93 	bl	800a8dc <dwt_write32bitoffsetreg>
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	461a      	mov	r2, r3
 800bdba:	4943      	ldr	r1, [pc, #268]	; (800bec8 <ull_configure+0x3f0>)
 800bdbc:	4620      	mov	r0, r4
 800bdbe:	f7fe fd8d 	bl	800a8dc <dwt_write32bitoffsetreg>
 800bdc2:	4b42      	ldr	r3, [pc, #264]	; (800becc <ull_configure+0x3f4>)
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	4931      	ldr	r1, [pc, #196]	; (800be8c <ull_configure+0x3b4>)
 800bdc8:	4620      	mov	r0, r4
 800bdca:	f7fe fd87 	bl	800a8dc <dwt_write32bitoffsetreg>
 800bdce:	239d      	movs	r3, #157	; 0x9d
 800bdd0:	9300      	str	r3, [sp, #0]
 800bdd2:	4b2f      	ldr	r3, [pc, #188]	; (800be90 <ull_configure+0x3b8>)
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	492f      	ldr	r1, [pc, #188]	; (800be94 <ull_configure+0x3bc>)
 800bdd8:	4620      	mov	r0, r4
 800bdda:	f7ff f9d1 	bl	800b180 <dwt_modify32bitoffsetreg>
 800bdde:	e714      	b.n	800bc0a <ull_configure+0x132>
 800bde0:	7b2a      	ldrb	r2, [r5, #12]
 800bde2:	4b29      	ldr	r3, [pc, #164]	; (800be88 <ull_configure+0x3b0>)
 800bde4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800bde8:	f44f 6235 	mov.w	r2, #2896	; 0xb50
 800bdec:	fb02 f203 	mul.w	r2, r2, r3
 800bdf0:	0c93      	lsrs	r3, r2, #18
 800bdf2:	f3c2 12ca 	ubfx	r2, r2, #7, #11
 800bdf6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bdfa:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800bdfe:	bf28      	it	cs
 800be00:	3301      	addcs	r3, #1
 800be02:	b29b      	uxth	r3, r3
 800be04:	e6da      	b.n	800bbbc <ull_configure+0xe4>
 800be06:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800be0a:	9300      	str	r3, [sp, #0]
 800be0c:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 800be10:	2200      	movs	r2, #0
 800be12:	4921      	ldr	r1, [pc, #132]	; (800be98 <ull_configure+0x3c0>)
 800be14:	4620      	mov	r0, r4
 800be16:	f7ff fd41 	bl	800b89c <dwt_modify16bitoffsetreg>
 800be1a:	e6f6      	b.n	800bc0a <ull_configure+0x132>
 800be1c:	78ab      	ldrb	r3, [r5, #2]
 800be1e:	9300      	str	r3, [sp, #0]
 800be20:	23ec      	movs	r3, #236	; 0xec
 800be22:	2200      	movs	r2, #0
 800be24:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800be28:	4620      	mov	r0, r4
 800be2a:	f7ff fb1b 	bl	800b464 <dwt_modify8bitoffsetreg>
 800be2e:	e6fb      	b.n	800bc28 <ull_configure+0x150>
 800be30:	2803      	cmp	r0, #3
 800be32:	f47f af62 	bne.w	800bcfa <ull_configure+0x222>
 800be36:	e058      	b.n	800beea <ull_configure+0x412>
 800be38:	2102      	movs	r1, #2
 800be3a:	4620      	mov	r0, r4
 800be3c:	f7ff fbd0 	bl	800b5e0 <ull_setdwstate>
 800be40:	e75b      	b.n	800bcfa <ull_configure+0x222>
 800be42:	4b23      	ldr	r3, [pc, #140]	; (800bed0 <ull_configure+0x3f8>)
 800be44:	2200      	movs	r2, #0
 800be46:	491b      	ldr	r1, [pc, #108]	; (800beb4 <ull_configure+0x3dc>)
 800be48:	4620      	mov	r0, r4
 800be4a:	f7fe fd47 	bl	800a8dc <dwt_write32bitoffsetreg>
 800be4e:	f640 733c 	movw	r3, #3900	; 0xf3c
 800be52:	2200      	movs	r2, #0
 800be54:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 800be58:	4620      	mov	r0, r4
 800be5a:	f7fe fce2 	bl	800a822 <dwt_write16bitoffsetreg>
 800be5e:	e75e      	b.n	800bd1e <ull_configure+0x246>
 800be60:	f44f 7380 	mov.w	r3, #256	; 0x100
 800be64:	9300      	str	r3, [sp, #0]
 800be66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800be6a:	2200      	movs	r2, #0
 800be6c:	490a      	ldr	r1, [pc, #40]	; (800be98 <ull_configure+0x3c0>)
 800be6e:	4620      	mov	r0, r4
 800be70:	f7ff fd14 	bl	800b89c <dwt_modify16bitoffsetreg>
 800be74:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800be76:	8a13      	ldrh	r3, [r2, #16]
 800be78:	f043 0308 	orr.w	r3, r3, #8
 800be7c:	8213      	strh	r3, [r2, #16]
 800be7e:	e046      	b.n	800bf0e <ull_configure+0x436>
 800be80:	00026668 	.word	0x00026668
 800be84:	fffc4fcf 	.word	0xfffc4fcf
 800be88:	08013480 	.word	0x08013480
 800be8c:	000e0014 	.word	0x000e0014
 800be90:	bfffff00 	.word	0xbfffff00
 800be94:	000e0018 	.word	0x000e0018
 800be98:	000b0008 	.word	0x000b0008
 800be9c:	af5f35cc 	.word	0xaf5f35cc
 800bea0:	af5f584c 	.word	0xaf5f584c
 800bea4:	0006000c 	.word	0x0006000c
 800bea8:	00010008 	.word	0x00010008
 800beac:	000f0030 	.word	0x000f0030
 800beb0:	1c071134 	.word	0x1c071134
 800beb4:	0007001c 	.word	0x0007001c
 800beb8:	00070050 	.word	0x00070050
 800bebc:	00070018 	.word	0x00070018
 800bec0:	00090008 	.word	0x00090008
 800bec4:	000e000c 	.word	0x000e000c
 800bec8:	000e0010 	.word	0x000e0010
 800becc:	000c5a0a 	.word	0x000c5a0a
 800bed0:	1c010034 	.word	0x1c010034
 800bed4:	2200      	movs	r2, #0
 800bed6:	9200      	str	r2, [sp, #0]
 800bed8:	23fe      	movs	r3, #254	; 0xfe
 800beda:	491d      	ldr	r1, [pc, #116]	; (800bf50 <ull_configure+0x478>)
 800bedc:	4620      	mov	r0, r4
 800bede:	f7ff fac1 	bl	800b464 <dwt_modify8bitoffsetreg>
 800bee2:	e01e      	b.n	800bf22 <ull_configure+0x44a>
 800bee4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800bee6:	f883 900f 	strb.w	r9, [r3, #15]
 800beea:	792b      	ldrb	r3, [r5, #4]
 800beec:	3b09      	subs	r3, #9
 800beee:	b2db      	uxtb	r3, r3
 800bef0:	2b0f      	cmp	r3, #15
 800bef2:	d8ef      	bhi.n	800bed4 <ull_configure+0x3fc>
 800bef4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800bef6:	7a1b      	ldrb	r3, [r3, #8]
 800bef8:	2b01      	cmp	r3, #1
 800befa:	d0b1      	beq.n	800be60 <ull_configure+0x388>
 800befc:	4649      	mov	r1, r9
 800befe:	4620      	mov	r0, r4
 800bf00:	f7fe fda4 	bl	800aa4c <ull_configmrxlut>
 800bf04:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800bf06:	8a13      	ldrh	r3, [r2, #16]
 800bf08:	f023 0308 	bic.w	r3, r3, #8
 800bf0c:	8213      	strh	r3, [r2, #16]
 800bf0e:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800bf12:	9300      	str	r3, [sp, #0]
 800bf14:	f248 13ff 	movw	r3, #33279	; 0x81ff
 800bf18:	2200      	movs	r2, #0
 800bf1a:	490d      	ldr	r1, [pc, #52]	; (800bf50 <ull_configure+0x478>)
 800bf1c:	4620      	mov	r0, r4
 800bf1e:	f7ff fcbd 	bl	800b89c <dwt_modify16bitoffsetreg>
 800bf22:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 800bf26:	bfcc      	ite	gt
 800bf28:	f04f 5300 	movgt.w	r3, #536870912	; 0x20000000
 800bf2c:	f04f 53a0 	movle.w	r3, #335544320	; 0x14000000
 800bf30:	9300      	str	r3, [sp, #0]
 800bf32:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800bf36:	2200      	movs	r2, #0
 800bf38:	4906      	ldr	r1, [pc, #24]	; (800bf54 <ull_configure+0x47c>)
 800bf3a:	4620      	mov	r0, r4
 800bf3c:	f7ff f920 	bl	800b180 <dwt_modify32bitoffsetreg>
 800bf40:	2101      	movs	r1, #1
 800bf42:	4620      	mov	r0, r4
 800bf44:	f7ff fd12 	bl	800b96c <ull_pgf_cal>
 800bf48:	b003      	add	sp, #12
 800bf4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf4e:	bf00      	nop
 800bf50:	00030018 	.word	0x00030018
 800bf54:	00060010 	.word	0x00060010

0800bf58 <ull_initialise>:
 800bf58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf5a:	b083      	sub	sp, #12
 800bf5c:	4605      	mov	r5, r0
 800bf5e:	460e      	mov	r6, r1
 800bf60:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d051      	beq.n	800c00a <ull_initialise+0xb2>
 800bf66:	6d2c      	ldr	r4, [r5, #80]	; 0x50
 800bf68:	2300      	movs	r3, #0
 800bf6a:	73a3      	strb	r3, [r4, #14]
 800bf6c:	2202      	movs	r2, #2
 800bf6e:	8222      	strh	r2, [r4, #16]
 800bf70:	7523      	strb	r3, [r4, #20]
 800bf72:	7563      	strb	r3, [r4, #21]
 800bf74:	73e3      	strb	r3, [r4, #15]
 800bf76:	7263      	strb	r3, [r4, #9]
 800bf78:	72a3      	strb	r3, [r4, #10]
 800bf7a:	2104      	movs	r1, #4
 800bf7c:	4628      	mov	r0, r5
 800bf7e:	f7fe fc8b 	bl	800a898 <_dwt_otpread>
 800bf82:	4607      	mov	r7, r0
 800bf84:	2105      	movs	r1, #5
 800bf86:	4628      	mov	r0, r5
 800bf88:	f7fe fc86 	bl	800a898 <_dwt_otpread>
 800bf8c:	b10f      	cbz	r7, 800bf92 <ull_initialise+0x3a>
 800bf8e:	2800      	cmp	r0, #0
 800bf90:	d140      	bne.n	800c014 <ull_initialise+0xbc>
 800bf92:	2120      	movs	r1, #32
 800bf94:	4628      	mov	r0, r5
 800bf96:	f7fe fc7f 	bl	800a898 <_dwt_otpread>
 800bf9a:	4b35      	ldr	r3, [pc, #212]	; (800c070 <ull_initialise+0x118>)
 800bf9c:	4298      	cmp	r0, r3
 800bf9e:	bf0c      	ite	eq
 800bfa0:	2301      	moveq	r3, #1
 800bfa2:	2300      	movne	r3, #0
 800bfa4:	7223      	strb	r3, [r4, #8]
 800bfa6:	f016 0f10 	tst.w	r6, #16
 800bfaa:	d142      	bne.n	800c032 <ull_initialise+0xda>
 800bfac:	f016 0f20 	tst.w	r6, #32
 800bfb0:	d145      	bne.n	800c03e <ull_initialise+0xe6>
 800bfb2:	f016 0f40 	tst.w	r6, #64	; 0x40
 800bfb6:	d148      	bne.n	800c04a <ull_initialise+0xf2>
 800bfb8:	f016 0f80 	tst.w	r6, #128	; 0x80
 800bfbc:	d14c      	bne.n	800c058 <ull_initialise+0x100>
 800bfbe:	7aa3      	ldrb	r3, [r4, #10]
 800bfc0:	b90b      	cbnz	r3, 800bfc6 <ull_initialise+0x6e>
 800bfc2:	2385      	movs	r3, #133	; 0x85
 800bfc4:	72a3      	strb	r3, [r4, #10]
 800bfc6:	7a63      	ldrb	r3, [r4, #9]
 800bfc8:	b90b      	cbnz	r3, 800bfce <ull_initialise+0x76>
 800bfca:	2374      	movs	r3, #116	; 0x74
 800bfcc:	7263      	strb	r3, [r4, #9]
 800bfce:	211f      	movs	r1, #31
 800bfd0:	4628      	mov	r0, r5
 800bfd2:	f7fe fc61 	bl	800a898 <_dwt_otpread>
 800bfd6:	7320      	strb	r0, [r4, #12]
 800bfd8:	211e      	movs	r1, #30
 800bfda:	4628      	mov	r0, r5
 800bfdc:	f7fe fc5c 	bl	800a898 <_dwt_otpread>
 800bfe0:	f010 003f 	ands.w	r0, r0, #63	; 0x3f
 800bfe4:	bf12      	itee	ne
 800bfe6:	7360      	strbne	r0, [r4, #13]
 800bfe8:	232e      	moveq	r3, #46	; 0x2e
 800bfea:	7363      	strbeq	r3, [r4, #13]
 800bfec:	7b63      	ldrb	r3, [r4, #13]
 800bfee:	2200      	movs	r2, #0
 800bff0:	4920      	ldr	r1, [pc, #128]	; (800c074 <ull_initialise+0x11c>)
 800bff2:	4628      	mov	r0, r5
 800bff4:	f7fe fe00 	bl	800abf8 <dwt_write8bitoffsetreg>
 800bff8:	2135      	movs	r1, #53	; 0x35
 800bffa:	4628      	mov	r0, r5
 800bffc:	f7fe fc4c 	bl	800a898 <_dwt_otpread>
 800c000:	4603      	mov	r3, r0
 800c002:	bb78      	cbnz	r0, 800c064 <ull_initialise+0x10c>
 800c004:	2000      	movs	r0, #0
 800c006:	b003      	add	sp, #12
 800c008:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c00a:	2028      	movs	r0, #40	; 0x28
 800c00c:	f006 ff60 	bl	8012ed0 <malloc>
 800c010:	6528      	str	r0, [r5, #80]	; 0x50
 800c012:	e7a8      	b.n	800bf66 <ull_initialise+0xe>
 800c014:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c018:	9300      	str	r3, [sp, #0]
 800c01a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c01e:	2200      	movs	r2, #0
 800c020:	4915      	ldr	r1, [pc, #84]	; (800c078 <ull_initialise+0x120>)
 800c022:	4628      	mov	r0, r5
 800c024:	f7ff fc3a 	bl	800b89c <dwt_modify16bitoffsetreg>
 800c028:	8a23      	ldrh	r3, [r4, #16]
 800c02a:	f043 0310 	orr.w	r3, r3, #16
 800c02e:	8223      	strh	r3, [r4, #16]
 800c030:	e7af      	b.n	800bf92 <ull_initialise+0x3a>
 800c032:	2106      	movs	r1, #6
 800c034:	4628      	mov	r0, r5
 800c036:	f7fe fc2f 	bl	800a898 <_dwt_otpread>
 800c03a:	6020      	str	r0, [r4, #0]
 800c03c:	e7b6      	b.n	800bfac <ull_initialise+0x54>
 800c03e:	2107      	movs	r1, #7
 800c040:	4628      	mov	r0, r5
 800c042:	f7fe fc29 	bl	800a898 <_dwt_otpread>
 800c046:	6060      	str	r0, [r4, #4]
 800c048:	e7b3      	b.n	800bfb2 <ull_initialise+0x5a>
 800c04a:	2108      	movs	r1, #8
 800c04c:	4628      	mov	r0, r5
 800c04e:	f7fe fc23 	bl	800a898 <_dwt_otpread>
 800c052:	0c00      	lsrs	r0, r0, #16
 800c054:	7260      	strb	r0, [r4, #9]
 800c056:	e7af      	b.n	800bfb8 <ull_initialise+0x60>
 800c058:	2109      	movs	r1, #9
 800c05a:	4628      	mov	r0, r5
 800c05c:	f7fe fc1c 	bl	800a898 <_dwt_otpread>
 800c060:	72a0      	strb	r0, [r4, #10]
 800c062:	e7ac      	b.n	800bfbe <ull_initialise+0x66>
 800c064:	2200      	movs	r2, #0
 800c066:	4905      	ldr	r1, [pc, #20]	; (800c07c <ull_initialise+0x124>)
 800c068:	4628      	mov	r0, r5
 800c06a:	f7fe fc37 	bl	800a8dc <dwt_write32bitoffsetreg>
 800c06e:	e7c9      	b.n	800c004 <ull_initialise+0xac>
 800c070:	10000240 	.word	0x10000240
 800c074:	00090014 	.word	0x00090014
 800c078:	000b0008 	.word	0x000b0008
 800c07c:	00090004 	.word	0x00090004

0800c080 <ull_rxenable>:
 800c080:	b530      	push	{r4, r5, lr}
 800c082:	b083      	sub	sp, #12
 800c084:	4605      	mov	r5, r0
 800c086:	460c      	mov	r4, r1
 800c088:	b171      	cbz	r1, 800c0a8 <ull_rxenable+0x28>
 800c08a:	f021 0302 	bic.w	r3, r1, #2
 800c08e:	3b01      	subs	r3, #1
 800c090:	2b0f      	cmp	r3, #15
 800c092:	d862      	bhi.n	800c15a <ull_rxenable+0xda>
 800c094:	e8df f003 	tbb	[pc, r3]
 800c098:	24616111 	.word	0x24616111
 800c09c:	2d616161 	.word	0x2d616161
 800c0a0:	61616161 	.word	0x61616161
 800c0a4:	3a616161 	.word	0x3a616161
 800c0a8:	2102      	movs	r1, #2
 800c0aa:	9101      	str	r1, [sp, #4]
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	9200      	str	r2, [sp, #0]
 800c0b0:	4613      	mov	r3, r2
 800c0b2:	f7fd ff16 	bl	8009ee2 <dwt_xfer3xxx>
 800c0b6:	4620      	mov	r0, r4
 800c0b8:	e010      	b.n	800c0dc <ull_rxenable+0x5c>
 800c0ba:	2302      	movs	r3, #2
 800c0bc:	9301      	str	r3, [sp, #4]
 800c0be:	2200      	movs	r2, #0
 800c0c0:	9200      	str	r2, [sp, #0]
 800c0c2:	4613      	mov	r3, r2
 800c0c4:	2104      	movs	r1, #4
 800c0c6:	f7fd ff0c 	bl	8009ee2 <dwt_xfer3xxx>
 800c0ca:	2203      	movs	r2, #3
 800c0cc:	2144      	movs	r1, #68	; 0x44
 800c0ce:	4628      	mov	r0, r5
 800c0d0:	f7fd ffb7 	bl	800a042 <dwt_read8bitoffsetreg>
 800c0d4:	f010 0f08 	tst.w	r0, #8
 800c0d8:	d125      	bne.n	800c126 <ull_rxenable+0xa6>
 800c0da:	2000      	movs	r0, #0
 800c0dc:	b003      	add	sp, #12
 800c0de:	bd30      	pop	{r4, r5, pc}
 800c0e0:	2302      	movs	r3, #2
 800c0e2:	9301      	str	r3, [sp, #4]
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	9200      	str	r2, [sp, #0]
 800c0e8:	4613      	mov	r3, r2
 800c0ea:	210a      	movs	r1, #10
 800c0ec:	f7fd fef9 	bl	8009ee2 <dwt_xfer3xxx>
 800c0f0:	e7eb      	b.n	800c0ca <ull_rxenable+0x4a>
 800c0f2:	2100      	movs	r1, #0
 800c0f4:	f7fe fc07 	bl	800a906 <_dwt_adjust_delaytime>
 800c0f8:	2302      	movs	r3, #2
 800c0fa:	9301      	str	r3, [sp, #4]
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	9200      	str	r2, [sp, #0]
 800c100:	4613      	mov	r3, r2
 800c102:	2108      	movs	r1, #8
 800c104:	4628      	mov	r0, r5
 800c106:	f7fd feec 	bl	8009ee2 <dwt_xfer3xxx>
 800c10a:	e7de      	b.n	800c0ca <ull_rxenable+0x4a>
 800c10c:	2101      	movs	r1, #1
 800c10e:	f7fe fbfa 	bl	800a906 <_dwt_adjust_delaytime>
 800c112:	2302      	movs	r3, #2
 800c114:	9301      	str	r3, [sp, #4]
 800c116:	2200      	movs	r2, #0
 800c118:	9200      	str	r2, [sp, #0]
 800c11a:	4613      	mov	r3, r2
 800c11c:	2106      	movs	r1, #6
 800c11e:	4628      	mov	r0, r5
 800c120:	f7fd fedf 	bl	8009ee2 <dwt_xfer3xxx>
 800c124:	e7d1      	b.n	800c0ca <ull_rxenable+0x4a>
 800c126:	2302      	movs	r3, #2
 800c128:	9301      	str	r3, [sp, #4]
 800c12a:	2100      	movs	r1, #0
 800c12c:	9100      	str	r1, [sp, #0]
 800c12e:	460b      	mov	r3, r1
 800c130:	460a      	mov	r2, r1
 800c132:	4628      	mov	r0, r5
 800c134:	f7fd fed5 	bl	8009ee2 <dwt_xfer3xxx>
 800c138:	f014 0f02 	tst.w	r4, #2
 800c13c:	d002      	beq.n	800c144 <ull_rxenable+0xc4>
 800c13e:	f04f 30ff 	mov.w	r0, #4294967295
 800c142:	e7cb      	b.n	800c0dc <ull_rxenable+0x5c>
 800c144:	2102      	movs	r1, #2
 800c146:	9101      	str	r1, [sp, #4]
 800c148:	2200      	movs	r2, #0
 800c14a:	9200      	str	r2, [sp, #0]
 800c14c:	4613      	mov	r3, r2
 800c14e:	4628      	mov	r0, r5
 800c150:	f7fd fec7 	bl	8009ee2 <dwt_xfer3xxx>
 800c154:	f04f 30ff 	mov.w	r0, #4294967295
 800c158:	e7c0      	b.n	800c0dc <ull_rxenable+0x5c>
 800c15a:	f04f 30ff 	mov.w	r0, #4294967295
 800c15e:	e7bd      	b.n	800c0dc <ull_rxenable+0x5c>

0800c160 <ull_softreset_no_sema_fcmd>:
 800c160:	b570      	push	{r4, r5, r6, lr}
 800c162:	b082      	sub	sp, #8
 800c164:	4606      	mov	r6, r0
 800c166:	2502      	movs	r5, #2
 800c168:	9501      	str	r5, [sp, #4]
 800c16a:	2400      	movs	r4, #0
 800c16c:	9400      	str	r4, [sp, #0]
 800c16e:	4623      	mov	r3, r4
 800c170:	4622      	mov	r2, r4
 800c172:	2119      	movs	r1, #25
 800c174:	f7fd feb5 	bl	8009ee2 <dwt_xfer3xxx>
 800c178:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800c17a:	739c      	strb	r4, [r3, #14]
 800c17c:	821d      	strh	r5, [r3, #16]
 800c17e:	751c      	strb	r4, [r3, #20]
 800c180:	755c      	strb	r4, [r3, #21]
 800c182:	73dc      	strb	r4, [r3, #15]
 800c184:	b002      	add	sp, #8
 800c186:	bd70      	pop	{r4, r5, r6, pc}

0800c188 <ull_softreset_fcmd>:
 800c188:	b570      	push	{r4, r5, r6, lr}
 800c18a:	b082      	sub	sp, #8
 800c18c:	4606      	mov	r6, r0
 800c18e:	2502      	movs	r5, #2
 800c190:	9501      	str	r5, [sp, #4]
 800c192:	2400      	movs	r4, #0
 800c194:	9400      	str	r4, [sp, #0]
 800c196:	4623      	mov	r3, r4
 800c198:	4622      	mov	r2, r4
 800c19a:	2118      	movs	r1, #24
 800c19c:	f7fd fea1 	bl	8009ee2 <dwt_xfer3xxx>
 800c1a0:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800c1a2:	739c      	strb	r4, [r3, #14]
 800c1a4:	821d      	strh	r5, [r3, #16]
 800c1a6:	751c      	strb	r4, [r3, #20]
 800c1a8:	755c      	strb	r4, [r3, #21]
 800c1aa:	73dc      	strb	r4, [r3, #15]
 800c1ac:	b002      	add	sp, #8
 800c1ae:	bd70      	pop	{r4, r5, r6, pc}

0800c1b0 <dwt_ioctl>:
 800c1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1b4:	b091      	sub	sp, #68	; 0x44
 800c1b6:	4606      	mov	r6, r0
 800c1b8:	4615      	mov	r5, r2
 800c1ba:	461c      	mov	r4, r3
 800c1bc:	299c      	cmp	r1, #156	; 0x9c
 800c1be:	f200 809f 	bhi.w	800c300 <dwt_ioctl+0x150>
 800c1c2:	e8df f011 	tbh	[pc, r1, lsl #1]
 800c1c6:	0a54      	.short	0x0a54
 800c1c8:	00a30a5f 	.word	0x00a30a5f
 800c1cc:	00c000a7 	.word	0x00c000a7
 800c1d0:	0192014c 	.word	0x0192014c
 800c1d4:	0156016f 	.word	0x0156016f
 800c1d8:	01ad01a2 	.word	0x01ad01a2
 800c1dc:	01bd01b5 	.word	0x01bd01b5
 800c1e0:	01cd01c5 	.word	0x01cd01c5
 800c1e4:	01d901d5 	.word	0x01d901d5
 800c1e8:	027201e1 	.word	0x027201e1
 800c1ec:	02850280 	.word	0x02850280
 800c1f0:	0294028f 	.word	0x0294028f
 800c1f4:	02a20299 	.word	0x02a20299
 800c1f8:	02dd02a7 	.word	0x02dd02a7
 800c1fc:	030502fa 	.word	0x030502fa
 800c200:	031a0310 	.word	0x031a0310
 800c204:	03480352 	.word	0x03480352
 800c208:	0324033e 	.word	0x0324033e
 800c20c:	03810331 	.word	0x03810331
 800c210:	022f01fc 	.word	0x022f01fc
 800c214:	0245023d 	.word	0x0245023d
 800c218:	097d0259 	.word	0x097d0259
 800c21c:	03610982 	.word	0x03610982
 800c220:	03a3039f 	.word	0x03a3039f
 800c224:	03b103ac 	.word	0x03b103ac
 800c228:	03e503db 	.word	0x03e503db
 800c22c:	041703ed 	.word	0x041703ed
 800c230:	042e0423 	.word	0x042e0423
 800c234:	04390357 	.word	0x04390357
 800c238:	04540442 	.word	0x04540442
 800c23c:	047e046d 	.word	0x047e046d
 800c240:	04ca04c0 	.word	0x04ca04c0
 800c244:	04ff04f0 	.word	0x04ff04f0
 800c248:	0508051a 	.word	0x0508051a
 800c24c:	056a0524 	.word	0x056a0524
 800c250:	05a20582 	.word	0x05a20582
 800c254:	05e505d1 	.word	0x05e505d1
 800c258:	060a05ee 	.word	0x060a05ee
 800c25c:	074305f7 	.word	0x074305f7
 800c260:	07d30785 	.word	0x07d30785
 800c264:	07e407d9 	.word	0x07e407d9
 800c268:	081d07fd 	.word	0x081d07fd
 800c26c:	08310827 	.word	0x08310827
 800c270:	0868085f 	.word	0x0868085f
 800c274:	0877086e 	.word	0x0877086e
 800c278:	08910884 	.word	0x08910884
 800c27c:	08a4089b 	.word	0x08a4089b
 800c280:	08b808ad 	.word	0x08b808ad
 800c284:	08c908c3 	.word	0x08c908c3
 800c288:	08f708ec 	.word	0x08f708ec
 800c28c:	090d0902 	.word	0x090d0902
 800c290:	0959094e 	.word	0x0959094e
 800c294:	09880972 	.word	0x09880972
 800c298:	0a0709fd 	.word	0x0a0709fd
 800c29c:	0a670a12 	.word	0x0a670a12
 800c2a0:	0a490a1c 	.word	0x0a490a1c
 800c2a4:	09c60777 	.word	0x09c60777
 800c2a8:	0ad509e7 	.word	0x0ad509e7
 800c2ac:	0a740aca 	.word	0x0a740aca
 800c2b0:	0a8a0a7f 	.word	0x0a8a0a7f
 800c2b4:	0aa00a95 	.word	0x0aa00a95
 800c2b8:	0ab60aab 	.word	0x0ab60aab
 800c2bc:	0cb50abf 	.word	0x0cb50abf
 800c2c0:	0d2a0cef 	.word	0x0d2a0cef
 800c2c4:	0df90d4d 	.word	0x0df90d4d
 800c2c8:	0afd0e0e 	.word	0x0afd0e0e
 800c2cc:	0bf40bc1 	.word	0x0bf40bc1
 800c2d0:	0c040bff 	.word	0x0c040bff
 800c2d4:	0c140c09 	.word	0x0c140c09
 800c2d8:	0c320c27 	.word	0x0c320c27
 800c2dc:	0c5c0c47 	.word	0x0c5c0c47
 800c2e0:	009d0c98 	.word	0x009d0c98
 800c2e4:	009d009d 	.word	0x009d009d
 800c2e8:	009d009d 	.word	0x009d009d
 800c2ec:	009d009d 	.word	0x009d009d
 800c2f0:	0d64009d 	.word	0x0d64009d
 800c2f4:	0ec20d75 	.word	0x0ec20d75
 800c2f8:	0db40dbf 	.word	0x0db40dbf
 800c2fc:	0dca0dd3 	.word	0x0dca0dd3
 800c300:	f04f 35ff 	mov.w	r5, #4294967295
 800c304:	4628      	mov	r0, r5
 800c306:	b011      	add	sp, #68	; 0x44
 800c308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c30c:	6843      	ldr	r3, [r0, #4]
 800c30e:	4798      	blx	r3
 800c310:	2500      	movs	r5, #0
 800c312:	e7f7      	b.n	800c304 <dwt_ioctl+0x154>
 800c314:	2202      	movs	r2, #2
 800c316:	49b4      	ldr	r1, [pc, #720]	; (800c5e8 <dwt_ioctl+0x438>)
 800c318:	f7fd fe93 	bl	800a042 <dwt_read8bitoffsetreg>
 800c31c:	2803      	cmp	r0, #3
 800c31e:	d801      	bhi.n	800c324 <dwt_ioctl+0x174>
 800c320:	2500      	movs	r5, #0
 800c322:	e7ef      	b.n	800c304 <dwt_ioctl+0x154>
 800c324:	f7f4 f8da 	bl	80004dc <decamutexon>
 800c328:	4604      	mov	r4, r0
 800c32a:	2302      	movs	r3, #2
 800c32c:	9301      	str	r3, [sp, #4]
 800c32e:	2500      	movs	r5, #0
 800c330:	9500      	str	r5, [sp, #0]
 800c332:	462b      	mov	r3, r5
 800c334:	462a      	mov	r2, r5
 800c336:	4629      	mov	r1, r5
 800c338:	4630      	mov	r0, r6
 800c33a:	f7fd fdd2 	bl	8009ee2 <dwt_xfer3xxx>
 800c33e:	4620      	mov	r0, r4
 800c340:	f7f4 f8dd 	bl	80004fe <decamutexoff>
 800c344:	e7de      	b.n	800c304 <dwt_ioctl+0x154>
 800c346:	2c00      	cmp	r4, #0
 800c348:	f001 8602 	beq.w	800df50 <dwt_ioctl+0x1da0>
 800c34c:	7824      	ldrb	r4, [r4, #0]
 800c34e:	f014 0f1d 	tst.w	r4, #29
 800c352:	d061      	beq.n	800c418 <dwt_ioctl+0x268>
 800c354:	f014 0f01 	tst.w	r4, #1
 800c358:	d023      	beq.n	800c3a2 <dwt_ioctl+0x1f2>
 800c35a:	f014 0f02 	tst.w	r4, #2
 800c35e:	f04f 0302 	mov.w	r3, #2
 800c362:	9301      	str	r3, [sp, #4]
 800c364:	f04f 0200 	mov.w	r2, #0
 800c368:	9200      	str	r2, [sp, #0]
 800c36a:	4613      	mov	r3, r2
 800c36c:	bf14      	ite	ne
 800c36e:	210d      	movne	r1, #13
 800c370:	2103      	moveq	r1, #3
 800c372:	f7fd fdb6 	bl	8009ee2 <dwt_xfer3xxx>
 800c376:	2203      	movs	r2, #3
 800c378:	2144      	movs	r1, #68	; 0x44
 800c37a:	4630      	mov	r0, r6
 800c37c:	f7fd fe61 	bl	800a042 <dwt_read8bitoffsetreg>
 800c380:	f010 0f08 	tst.w	r0, #8
 800c384:	bf08      	it	eq
 800c386:	2500      	moveq	r5, #0
 800c388:	d0bc      	beq.n	800c304 <dwt_ioctl+0x154>
 800c38a:	2302      	movs	r3, #2
 800c38c:	9301      	str	r3, [sp, #4]
 800c38e:	2100      	movs	r1, #0
 800c390:	9100      	str	r1, [sp, #0]
 800c392:	460b      	mov	r3, r1
 800c394:	460a      	mov	r2, r1
 800c396:	4630      	mov	r0, r6
 800c398:	f7fd fda3 	bl	8009ee2 <dwt_xfer3xxx>
 800c39c:	f04f 35ff 	mov.w	r5, #4294967295
 800c3a0:	e7b0      	b.n	800c304 <dwt_ioctl+0x154>
 800c3a2:	f014 0f08 	tst.w	r4, #8
 800c3a6:	d111      	bne.n	800c3cc <dwt_ioctl+0x21c>
 800c3a8:	f014 0f10 	tst.w	r4, #16
 800c3ac:	d121      	bne.n	800c3f2 <dwt_ioctl+0x242>
 800c3ae:	f014 0f02 	tst.w	r4, #2
 800c3b2:	f04f 0302 	mov.w	r3, #2
 800c3b6:	9301      	str	r3, [sp, #4]
 800c3b8:	f04f 0200 	mov.w	r2, #0
 800c3bc:	9200      	str	r2, [sp, #0]
 800c3be:	4613      	mov	r3, r2
 800c3c0:	bf14      	ite	ne
 800c3c2:	2110      	movne	r1, #16
 800c3c4:	2109      	moveq	r1, #9
 800c3c6:	f7fd fd8c 	bl	8009ee2 <dwt_xfer3xxx>
 800c3ca:	e7d4      	b.n	800c376 <dwt_ioctl+0x1c6>
 800c3cc:	2100      	movs	r1, #0
 800c3ce:	f7fe fa9a 	bl	800a906 <_dwt_adjust_delaytime>
 800c3d2:	f014 0f02 	tst.w	r4, #2
 800c3d6:	f04f 0302 	mov.w	r3, #2
 800c3da:	9301      	str	r3, [sp, #4]
 800c3dc:	f04f 0200 	mov.w	r2, #0
 800c3e0:	9200      	str	r2, [sp, #0]
 800c3e2:	4613      	mov	r3, r2
 800c3e4:	bf14      	ite	ne
 800c3e6:	210f      	movne	r1, #15
 800c3e8:	2107      	moveq	r1, #7
 800c3ea:	4630      	mov	r0, r6
 800c3ec:	f7fd fd79 	bl	8009ee2 <dwt_xfer3xxx>
 800c3f0:	e7c1      	b.n	800c376 <dwt_ioctl+0x1c6>
 800c3f2:	2101      	movs	r1, #1
 800c3f4:	f7fe fa87 	bl	800a906 <_dwt_adjust_delaytime>
 800c3f8:	f014 0f02 	tst.w	r4, #2
 800c3fc:	f04f 0302 	mov.w	r3, #2
 800c400:	9301      	str	r3, [sp, #4]
 800c402:	f04f 0200 	mov.w	r2, #0
 800c406:	9200      	str	r2, [sp, #0]
 800c408:	4613      	mov	r3, r2
 800c40a:	bf14      	ite	ne
 800c40c:	210e      	movne	r1, #14
 800c40e:	2105      	moveq	r1, #5
 800c410:	4630      	mov	r0, r6
 800c412:	f7fd fd66 	bl	8009ee2 <dwt_xfer3xxx>
 800c416:	e7ae      	b.n	800c376 <dwt_ioctl+0x1c6>
 800c418:	f014 0f20 	tst.w	r4, #32
 800c41c:	d00f      	beq.n	800c43e <dwt_ioctl+0x28e>
 800c41e:	f014 0f02 	tst.w	r4, #2
 800c422:	f04f 0302 	mov.w	r3, #2
 800c426:	9301      	str	r3, [sp, #4]
 800c428:	f04f 0500 	mov.w	r5, #0
 800c42c:	9500      	str	r5, [sp, #0]
 800c42e:	462b      	mov	r3, r5
 800c430:	462a      	mov	r2, r5
 800c432:	bf14      	ite	ne
 800c434:	2111      	movne	r1, #17
 800c436:	210b      	moveq	r1, #11
 800c438:	f7fd fd53 	bl	8009ee2 <dwt_xfer3xxx>
 800c43c:	e762      	b.n	800c304 <dwt_ioctl+0x154>
 800c43e:	f014 0f02 	tst.w	r4, #2
 800c442:	f04f 0302 	mov.w	r3, #2
 800c446:	9301      	str	r3, [sp, #4]
 800c448:	f04f 0500 	mov.w	r5, #0
 800c44c:	9500      	str	r5, [sp, #0]
 800c44e:	462b      	mov	r3, r5
 800c450:	462a      	mov	r2, r5
 800c452:	bf14      	ite	ne
 800c454:	210c      	movne	r1, #12
 800c456:	2101      	moveq	r1, #1
 800c458:	f7fd fd43 	bl	8009ee2 <dwt_xfer3xxx>
 800c45c:	e752      	b.n	800c304 <dwt_ioctl+0x154>
 800c45e:	2c00      	cmp	r4, #0
 800c460:	f001 8579 	beq.w	800df56 <dwt_ioctl+0x1da6>
 800c464:	6823      	ldr	r3, [r4, #0]
 800c466:	2200      	movs	r2, #0
 800c468:	2128      	movs	r1, #40	; 0x28
 800c46a:	f7fe fa37 	bl	800a8dc <dwt_write32bitoffsetreg>
 800c46e:	2500      	movs	r5, #0
 800c470:	e748      	b.n	800c304 <dwt_ioctl+0x154>
 800c472:	6823      	ldr	r3, [r4, #0]
 800c474:	2200      	movs	r2, #0
 800c476:	495d      	ldr	r1, [pc, #372]	; (800c5ec <dwt_ioctl+0x43c>)
 800c478:	f7fe fa30 	bl	800a8dc <dwt_write32bitoffsetreg>
 800c47c:	6863      	ldr	r3, [r4, #4]
 800c47e:	2200      	movs	r2, #0
 800c480:	495b      	ldr	r1, [pc, #364]	; (800c5f0 <dwt_ioctl+0x440>)
 800c482:	4630      	mov	r0, r6
 800c484:	f7fe fa2a 	bl	800a8dc <dwt_write32bitoffsetreg>
 800c488:	68a3      	ldr	r3, [r4, #8]
 800c48a:	2200      	movs	r2, #0
 800c48c:	4959      	ldr	r1, [pc, #356]	; (800c5f4 <dwt_ioctl+0x444>)
 800c48e:	4630      	mov	r0, r6
 800c490:	f7fe fa24 	bl	800a8dc <dwt_write32bitoffsetreg>
 800c494:	68e3      	ldr	r3, [r4, #12]
 800c496:	2200      	movs	r2, #0
 800c498:	4957      	ldr	r1, [pc, #348]	; (800c5f8 <dwt_ioctl+0x448>)
 800c49a:	4630      	mov	r0, r6
 800c49c:	f7fe fa1e 	bl	800a8dc <dwt_write32bitoffsetreg>
 800c4a0:	2500      	movs	r5, #0
 800c4a2:	e72f      	b.n	800c304 <dwt_ioctl+0x154>
 800c4a4:	2c00      	cmp	r4, #0
 800c4a6:	f001 8559 	beq.w	800df5c <dwt_ioctl+0x1dac>
 800c4aa:	8823      	ldrh	r3, [r4, #0]
 800c4ac:	6865      	ldr	r5, [r4, #4]
 800c4ae:	2d03      	cmp	r5, #3
 800c4b0:	f201 8557 	bhi.w	800df62 <dwt_ioctl+0x1db2>
 800c4b4:	e8df f005 	tbb	[pc, r5]
 800c4b8:	130d0702 	.word	0x130d0702
 800c4bc:	2200      	movs	r2, #0
 800c4be:	494f      	ldr	r1, [pc, #316]	; (800c5fc <dwt_ioctl+0x44c>)
 800c4c0:	f7fe f9af 	bl	800a822 <dwt_write16bitoffsetreg>
 800c4c4:	e71e      	b.n	800c304 <dwt_ioctl+0x154>
 800c4c6:	2202      	movs	r2, #2
 800c4c8:	494c      	ldr	r1, [pc, #304]	; (800c5fc <dwt_ioctl+0x44c>)
 800c4ca:	f7fe f9aa 	bl	800a822 <dwt_write16bitoffsetreg>
 800c4ce:	2500      	movs	r5, #0
 800c4d0:	e718      	b.n	800c304 <dwt_ioctl+0x154>
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	494a      	ldr	r1, [pc, #296]	; (800c600 <dwt_ioctl+0x450>)
 800c4d6:	f7fe f9a4 	bl	800a822 <dwt_write16bitoffsetreg>
 800c4da:	2500      	movs	r5, #0
 800c4dc:	e712      	b.n	800c304 <dwt_ioctl+0x154>
 800c4de:	2202      	movs	r2, #2
 800c4e0:	4947      	ldr	r1, [pc, #284]	; (800c600 <dwt_ioctl+0x450>)
 800c4e2:	f7fe f99e 	bl	800a822 <dwt_write16bitoffsetreg>
 800c4e6:	2500      	movs	r5, #0
 800c4e8:	e70c      	b.n	800c304 <dwt_ioctl+0x154>
 800c4ea:	2c00      	cmp	r4, #0
 800c4ec:	f001 853c 	beq.w	800df68 <dwt_ioctl+0x1db8>
 800c4f0:	7823      	ldrb	r3, [r4, #0]
 800c4f2:	005b      	lsls	r3, r3, #1
 800c4f4:	f003 0306 	and.w	r3, r3, #6
 800c4f8:	9300      	str	r3, [sp, #0]
 800c4fa:	f06f 0306 	mvn.w	r3, #6
 800c4fe:	2200      	movs	r2, #0
 800c500:	4940      	ldr	r1, [pc, #256]	; (800c604 <dwt_ioctl+0x454>)
 800c502:	f7fe fe3d 	bl	800b180 <dwt_modify32bitoffsetreg>
 800c506:	2500      	movs	r5, #0
 800c508:	e6fc      	b.n	800c304 <dwt_ioctl+0x154>
 800c50a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c50e:	9300      	str	r3, [sp, #0]
 800c510:	f04f 33ff 	mov.w	r3, #4294967295
 800c514:	2200      	movs	r2, #0
 800c516:	493c      	ldr	r1, [pc, #240]	; (800c608 <dwt_ioctl+0x458>)
 800c518:	f7fe fe32 	bl	800b180 <dwt_modify32bitoffsetreg>
 800c51c:	2500      	movs	r5, #0
 800c51e:	e6f1      	b.n	800c304 <dwt_ioctl+0x154>
 800c520:	2c00      	cmp	r4, #0
 800c522:	f001 8524 	beq.w	800df6e <dwt_ioctl+0x1dbe>
 800c526:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800c528:	7b1b      	ldrb	r3, [r3, #12]
 800c52a:	7023      	strb	r3, [r4, #0]
 800c52c:	2500      	movs	r5, #0
 800c52e:	e6e9      	b.n	800c304 <dwt_ioctl+0x154>
 800c530:	2c00      	cmp	r4, #0
 800c532:	f001 851f 	beq.w	800df74 <dwt_ioctl+0x1dc4>
 800c536:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800c538:	7a5b      	ldrb	r3, [r3, #9]
 800c53a:	7023      	strb	r3, [r4, #0]
 800c53c:	2500      	movs	r5, #0
 800c53e:	e6e1      	b.n	800c304 <dwt_ioctl+0x154>
 800c540:	2c00      	cmp	r4, #0
 800c542:	f001 851a 	beq.w	800df7a <dwt_ioctl+0x1dca>
 800c546:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800c548:	7a9b      	ldrb	r3, [r3, #10]
 800c54a:	7023      	strb	r3, [r4, #0]
 800c54c:	2500      	movs	r5, #0
 800c54e:	e6d9      	b.n	800c304 <dwt_ioctl+0x154>
 800c550:	2c00      	cmp	r4, #0
 800c552:	f001 8515 	beq.w	800df80 <dwt_ioctl+0x1dd0>
 800c556:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	6023      	str	r3, [r4, #0]
 800c55c:	2500      	movs	r5, #0
 800c55e:	e6d1      	b.n	800c304 <dwt_ioctl+0x154>
 800c560:	2c00      	cmp	r4, #0
 800c562:	f001 8510 	beq.w	800df86 <dwt_ioctl+0x1dd6>
 800c566:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800c568:	685b      	ldr	r3, [r3, #4]
 800c56a:	6023      	str	r3, [r4, #0]
 800c56c:	2500      	movs	r5, #0
 800c56e:	e6c9      	b.n	800c304 <dwt_ioctl+0x154>
 800c570:	f7fe fc72 	bl	800ae58 <ull_signal_rx_buff_free>
 800c574:	2500      	movs	r5, #0
 800c576:	e6c5      	b.n	800c304 <dwt_ioctl+0x154>
 800c578:	2c00      	cmp	r4, #0
 800c57a:	f001 8507 	beq.w	800df8c <dwt_ioctl+0x1ddc>
 800c57e:	6821      	ldr	r1, [r4, #0]
 800c580:	f7fe f9e7 	bl	800a952 <ull_setrxaftertxdelay>
 800c584:	2500      	movs	r5, #0
 800c586:	e6bd      	b.n	800c304 <dwt_ioctl+0x154>
 800c588:	2c00      	cmp	r4, #0
 800c58a:	f001 8502 	beq.w	800df92 <dwt_ioctl+0x1de2>
 800c58e:	7825      	ldrb	r5, [r4, #0]
 800c590:	b15d      	cbz	r5, 800c5aa <dwt_ioctl+0x3fa>
 800c592:	6864      	ldr	r4, [r4, #4]
 800c594:	2340      	movs	r3, #64	; 0x40
 800c596:	9300      	str	r3, [sp, #0]
 800c598:	23ff      	movs	r3, #255	; 0xff
 800c59a:	2200      	movs	r2, #0
 800c59c:	2110      	movs	r1, #16
 800c59e:	f7fe ff61 	bl	800b464 <dwt_modify8bitoffsetreg>
 800c5a2:	2d02      	cmp	r5, #2
 800c5a4:	d107      	bne.n	800c5b6 <dwt_ioctl+0x406>
 800c5a6:	60f4      	str	r4, [r6, #12]
 800c5a8:	e005      	b.n	800c5b6 <dwt_ioctl+0x406>
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	9200      	str	r2, [sp, #0]
 800c5ae:	23bf      	movs	r3, #191	; 0xbf
 800c5b0:	2110      	movs	r1, #16
 800c5b2:	f7fe ff57 	bl	800b464 <dwt_modify8bitoffsetreg>
 800c5b6:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800c5b8:	751d      	strb	r5, [r3, #20]
 800c5ba:	2500      	movs	r5, #0
 800c5bc:	e6a2      	b.n	800c304 <dwt_ioctl+0x154>
 800c5be:	2c00      	cmp	r4, #0
 800c5c0:	f001 84ea 	beq.w	800df98 <dwt_ioctl+0x1de8>
 800c5c4:	6865      	ldr	r5, [r4, #4]
 800c5c6:	7823      	ldrb	r3, [r4, #0]
 800c5c8:	2203      	movs	r2, #3
 800c5ca:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800c5ce:	f7fe fb13 	bl	800abf8 <dwt_write8bitoffsetreg>
 800c5d2:	b9dd      	cbnz	r5, 800c60c <dwt_ioctl+0x45c>
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	9200      	str	r2, [sp, #0]
 800c5d8:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 800c5dc:	2110      	movs	r1, #16
 800c5de:	4630      	mov	r0, r6
 800c5e0:	f7ff f95c 	bl	800b89c <dwt_modify16bitoffsetreg>
 800c5e4:	e68e      	b.n	800c304 <dwt_ioctl+0x154>
 800c5e6:	bf00      	nop
 800c5e8:	000f0030 	.word	0x000f0030
 800c5ec:	00010054 	.word	0x00010054
 800c5f0:	00010058 	.word	0x00010058
 800c5f4:	0001005c 	.word	0x0001005c
 800c5f8:	00010060 	.word	0x00010060
 800c5fc:	0001000c 	.word	0x0001000c
 800c600:	00010010 	.word	0x00010010
 800c604:	00010008 	.word	0x00010008
 800c608:	00110004 	.word	0x00110004
 800c60c:	f44f 2381 	mov.w	r3, #264192	; 0x40800
 800c610:	9300      	str	r3, [sp, #0]
 800c612:	f04f 33ff 	mov.w	r3, #4294967295
 800c616:	2200      	movs	r2, #0
 800c618:	2110      	movs	r1, #16
 800c61a:	4630      	mov	r0, r6
 800c61c:	f7fe fdb0 	bl	800b180 <dwt_modify32bitoffsetreg>
 800c620:	2500      	movs	r5, #0
 800c622:	e66f      	b.n	800c304 <dwt_ioctl+0x154>
 800c624:	2200      	movs	r2, #0
 800c626:	4611      	mov	r1, r2
 800c628:	f7fd fce3 	bl	8009ff2 <dwt_read32bitoffsetreg>
 800c62c:	68b2      	ldr	r2, [r6, #8]
 800c62e:	6813      	ldr	r3, [r2, #0]
 800c630:	4043      	eors	r3, r0
 800c632:	6852      	ldr	r2, [r2, #4]
 800c634:	4213      	tst	r3, r2
 800c636:	bf14      	ite	ne
 800c638:	f04f 35ff 	movne.w	r5, #4294967295
 800c63c:	2500      	moveq	r5, #0
 800c63e:	e661      	b.n	800c304 <dwt_ioctl+0x154>
 800c640:	2c00      	cmp	r4, #0
 800c642:	f001 84ac 	beq.w	800df9e <dwt_ioctl+0x1dee>
 800c646:	7821      	ldrb	r1, [r4, #0]
 800c648:	f7fe ff20 	bl	800b48c <ull_configciadiag>
 800c64c:	2500      	movs	r5, #0
 800c64e:	e659      	b.n	800c304 <dwt_ioctl+0x154>
 800c650:	b93a      	cbnz	r2, 800c662 <dwt_ioctl+0x4b2>
 800c652:	2200      	movs	r2, #0
 800c654:	9200      	str	r2, [sp, #0]
 800c656:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 800c65a:	49b8      	ldr	r1, [pc, #736]	; (800c93c <dwt_ioctl+0x78c>)
 800c65c:	f7ff f91e 	bl	800b89c <dwt_modify16bitoffsetreg>
 800c660:	e650      	b.n	800c304 <dwt_ioctl+0x154>
 800c662:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c666:	9300      	str	r3, [sp, #0]
 800c668:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c66c:	2200      	movs	r2, #0
 800c66e:	49b3      	ldr	r1, [pc, #716]	; (800c93c <dwt_ioctl+0x78c>)
 800c670:	f7ff f914 	bl	800b89c <dwt_modify16bitoffsetreg>
 800c674:	2500      	movs	r5, #0
 800c676:	e645      	b.n	800c304 <dwt_ioctl+0x154>
 800c678:	f002 0201 	and.w	r2, r2, #1
 800c67c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c680:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 800c684:	2a00      	cmp	r2, #0
 800c686:	bf08      	it	eq
 800c688:	460b      	moveq	r3, r1
 800c68a:	02d2      	lsls	r2, r2, #11
 800c68c:	f015 0f02 	tst.w	r5, #2
 800c690:	bf12      	itee	ne
 800c692:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 800c696:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c69a:	b29b      	uxtheq	r3, r3
 800c69c:	9200      	str	r2, [sp, #0]
 800c69e:	2200      	movs	r2, #0
 800c6a0:	49a6      	ldr	r1, [pc, #664]	; (800c93c <dwt_ioctl+0x78c>)
 800c6a2:	f7ff f8fb 	bl	800b89c <dwt_modify16bitoffsetreg>
 800c6a6:	2500      	movs	r5, #0
 800c6a8:	e62c      	b.n	800c304 <dwt_ioctl+0x154>
 800c6aa:	b92a      	cbnz	r2, 800c6b8 <dwt_ioctl+0x508>
 800c6ac:	4ba4      	ldr	r3, [pc, #656]	; (800c940 <dwt_ioctl+0x790>)
 800c6ae:	2202      	movs	r2, #2
 800c6b0:	49a4      	ldr	r1, [pc, #656]	; (800c944 <dwt_ioctl+0x794>)
 800c6b2:	f7fe f913 	bl	800a8dc <dwt_write32bitoffsetreg>
 800c6b6:	e625      	b.n	800c304 <dwt_ioctl+0x154>
 800c6b8:	4ba3      	ldr	r3, [pc, #652]	; (800c948 <dwt_ioctl+0x798>)
 800c6ba:	2202      	movs	r2, #2
 800c6bc:	49a1      	ldr	r1, [pc, #644]	; (800c944 <dwt_ioctl+0x794>)
 800c6be:	f7fe f90d 	bl	800a8dc <dwt_write32bitoffsetreg>
 800c6c2:	2500      	movs	r5, #0
 800c6c4:	e61e      	b.n	800c304 <dwt_ioctl+0x154>
 800c6c6:	4611      	mov	r1, r2
 800c6c8:	f7fe f957 	bl	800a97a <ull_setlnapamode>
 800c6cc:	2500      	movs	r5, #0
 800c6ce:	e619      	b.n	800c304 <dwt_ioctl+0x154>
 800c6d0:	2c00      	cmp	r4, #0
 800c6d2:	f001 8467 	beq.w	800dfa4 <dwt_ioctl+0x1df4>
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	499c      	ldr	r1, [pc, #624]	; (800c94c <dwt_ioctl+0x79c>)
 800c6da:	f7fd fcb2 	bl	800a042 <dwt_read8bitoffsetreg>
 800c6de:	7020      	strb	r0, [r4, #0]
 800c6e0:	2500      	movs	r5, #0
 800c6e2:	e60f      	b.n	800c304 <dwt_ioctl+0x154>
 800c6e4:	4621      	mov	r1, r4
 800c6e6:	f7fe f969 	bl	800a9bc <ull_configurestskey>
 800c6ea:	2500      	movs	r5, #0
 800c6ec:	e60a      	b.n	800c304 <dwt_ioctl+0x154>
 800c6ee:	4621      	mov	r1, r4
 800c6f0:	f7fe f988 	bl	800aa04 <ull_configurestsiv>
 800c6f4:	2500      	movs	r5, #0
 800c6f6:	e605      	b.n	800c304 <dwt_ioctl+0x154>
 800c6f8:	2301      	movs	r3, #1
 800c6fa:	9300      	str	r3, [sp, #0]
 800c6fc:	23ff      	movs	r3, #255	; 0xff
 800c6fe:	2200      	movs	r2, #0
 800c700:	4993      	ldr	r1, [pc, #588]	; (800c950 <dwt_ioctl+0x7a0>)
 800c702:	f7fe feaf 	bl	800b464 <dwt_modify8bitoffsetreg>
 800c706:	2500      	movs	r5, #0
 800c708:	e5fc      	b.n	800c304 <dwt_ioctl+0x154>
 800c70a:	4611      	mov	r1, r2
 800c70c:	f7fe f99e 	bl	800aa4c <ull_configmrxlut>
 800c710:	2500      	movs	r5, #0
 800c712:	e5f7      	b.n	800c304 <dwt_ioctl+0x154>
 800c714:	2318      	movs	r3, #24
 800c716:	2200      	movs	r2, #0
 800c718:	498e      	ldr	r1, [pc, #568]	; (800c954 <dwt_ioctl+0x7a4>)
 800c71a:	f7fe f8df 	bl	800a8dc <dwt_write32bitoffsetreg>
 800c71e:	23e8      	movs	r3, #232	; 0xe8
 800c720:	2200      	movs	r2, #0
 800c722:	498d      	ldr	r1, [pc, #564]	; (800c958 <dwt_ioctl+0x7a8>)
 800c724:	4630      	mov	r0, r6
 800c726:	f7fe f8d9 	bl	800a8dc <dwt_write32bitoffsetreg>
 800c72a:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800c72c:	7d9b      	ldrb	r3, [r3, #22]
 800c72e:	085b      	lsrs	r3, r3, #1
 800c730:	d01a      	beq.n	800c768 <dwt_ioctl+0x5b8>
 800c732:	2200      	movs	r2, #0
 800c734:	4989      	ldr	r1, [pc, #548]	; (800c95c <dwt_ioctl+0x7ac>)
 800c736:	4630      	mov	r0, r6
 800c738:	f7fd fc71 	bl	800a01e <dwt_read16bitoffsetreg>
 800c73c:	f3c0 03c4 	ubfx	r3, r0, #3, #5
 800c740:	3b09      	subs	r3, #9
 800c742:	2b0f      	cmp	r3, #15
 800c744:	f201 8431 	bhi.w	800dfaa <dwt_ioctl+0x1dfa>
 800c748:	f000 0001 	and.w	r0, r0, #1
 800c74c:	2800      	cmp	r0, #0
 800c74e:	bf0c      	ite	eq
 800c750:	2105      	moveq	r1, #5
 800c752:	2109      	movne	r1, #9
 800c754:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800c756:	7a1b      	ldrb	r3, [r3, #8]
 800c758:	2b01      	cmp	r3, #1
 800c75a:	f001 8429 	beq.w	800dfb0 <dwt_ioctl+0x1e00>
 800c75e:	4630      	mov	r0, r6
 800c760:	f7fe f974 	bl	800aa4c <ull_configmrxlut>
 800c764:	2500      	movs	r5, #0
 800c766:	e5cd      	b.n	800c304 <dwt_ioctl+0x154>
 800c768:	2301      	movs	r3, #1
 800c76a:	2200      	movs	r2, #0
 800c76c:	497c      	ldr	r1, [pc, #496]	; (800c960 <dwt_ioctl+0x7b0>)
 800c76e:	4630      	mov	r0, r6
 800c770:	f7fe fa42 	bl	800abf8 <dwt_write8bitoffsetreg>
 800c774:	6d32      	ldr	r2, [r6, #80]	; 0x50
 800c776:	7d93      	ldrb	r3, [r2, #22]
 800c778:	f043 0302 	orr.w	r3, r3, #2
 800c77c:	7593      	strb	r3, [r2, #22]
 800c77e:	e7d8      	b.n	800c732 <dwt_ioctl+0x582>
 800c780:	2c00      	cmp	r4, #0
 800c782:	f001 8418 	beq.w	800dfb6 <dwt_ioctl+0x1e06>
 800c786:	7824      	ldrb	r4, [r4, #0]
 800c788:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800c78a:	755c      	strb	r4, [r3, #21]
 800c78c:	0323      	lsls	r3, r4, #12
 800c78e:	f403 4330 	and.w	r3, r3, #45056	; 0xb000
 800c792:	9300      	str	r3, [sp, #0]
 800c794:	f644 73ff 	movw	r3, #20479	; 0x4fff
 800c798:	2200      	movs	r2, #0
 800c79a:	2110      	movs	r1, #16
 800c79c:	f7ff f87e 	bl	800b89c <dwt_modify16bitoffsetreg>
 800c7a0:	f004 0403 	and.w	r4, r4, #3
 800c7a4:	2c03      	cmp	r4, #3
 800c7a6:	bf0c      	ite	eq
 800c7a8:	4b6e      	ldreq	r3, [pc, #440]	; (800c964 <dwt_ioctl+0x7b4>)
 800c7aa:	4b6f      	ldrne	r3, [pc, #444]	; (800c968 <dwt_ioctl+0x7b8>)
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	496f      	ldr	r1, [pc, #444]	; (800c96c <dwt_ioctl+0x7bc>)
 800c7b0:	4630      	mov	r0, r6
 800c7b2:	f7fe f893 	bl	800a8dc <dwt_write32bitoffsetreg>
 800c7b6:	2500      	movs	r5, #0
 800c7b8:	e5a4      	b.n	800c304 <dwt_ioctl+0x154>
 800c7ba:	2c00      	cmp	r4, #0
 800c7bc:	f001 83fe 	beq.w	800dfbc <dwt_ioctl+0x1e0c>
 800c7c0:	8823      	ldrh	r3, [r4, #0]
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800c7c8:	f7fe f82b 	bl	800a822 <dwt_write16bitoffsetreg>
 800c7cc:	2500      	movs	r5, #0
 800c7ce:	e599      	b.n	800c304 <dwt_ioctl+0x154>
 800c7d0:	2c00      	cmp	r4, #0
 800c7d2:	f001 83f6 	beq.w	800dfc2 <dwt_ioctl+0x1e12>
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800c7dc:	f7fd fc1f 	bl	800a01e <dwt_read16bitoffsetreg>
 800c7e0:	8020      	strh	r0, [r4, #0]
 800c7e2:	2500      	movs	r5, #0
 800c7e4:	e58e      	b.n	800c304 <dwt_ioctl+0x154>
 800c7e6:	2c00      	cmp	r4, #0
 800c7e8:	f001 83ee 	beq.w	800dfc8 <dwt_ioctl+0x1e18>
 800c7ec:	8823      	ldrh	r3, [r4, #0]
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	217c      	movs	r1, #124	; 0x7c
 800c7f2:	f7fe f816 	bl	800a822 <dwt_write16bitoffsetreg>
 800c7f6:	2500      	movs	r5, #0
 800c7f8:	e584      	b.n	800c304 <dwt_ioctl+0x154>
 800c7fa:	2c00      	cmp	r4, #0
 800c7fc:	f001 83e7 	beq.w	800dfce <dwt_ioctl+0x1e1e>
 800c800:	2200      	movs	r2, #0
 800c802:	217c      	movs	r1, #124	; 0x7c
 800c804:	f7fd fc0b 	bl	800a01e <dwt_read16bitoffsetreg>
 800c808:	8020      	strh	r0, [r4, #0]
 800c80a:	2500      	movs	r5, #0
 800c80c:	e57a      	b.n	800c304 <dwt_ioctl+0x154>
 800c80e:	2c00      	cmp	r4, #0
 800c810:	f001 83e0 	beq.w	800dfd4 <dwt_ioctl+0x1e24>
 800c814:	88a3      	ldrh	r3, [r4, #4]
 800c816:	88e2      	ldrh	r2, [r4, #6]
 800c818:	6821      	ldr	r1, [r4, #0]
 800c81a:	9100      	str	r1, [sp, #0]
 800c81c:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 800c820:	f7fd fff4 	bl	800a80c <dwt_writetodevice>
 800c824:	2500      	movs	r5, #0
 800c826:	e56d      	b.n	800c304 <dwt_ioctl+0x154>
 800c828:	2c00      	cmp	r4, #0
 800c82a:	f001 83d6 	beq.w	800dfda <dwt_ioctl+0x1e2a>
 800c82e:	88a3      	ldrh	r3, [r4, #4]
 800c830:	88e2      	ldrh	r2, [r4, #6]
 800c832:	6821      	ldr	r1, [r4, #0]
 800c834:	9100      	str	r1, [sp, #0]
 800c836:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 800c83a:	f7fd fbd0 	bl	8009fde <dwt_readfromdevice>
 800c83e:	2500      	movs	r5, #0
 800c840:	e560      	b.n	800c304 <dwt_ioctl+0x154>
 800c842:	2c00      	cmp	r4, #0
 800c844:	f001 83cc 	beq.w	800dfe0 <dwt_ioctl+0x1e30>
 800c848:	88e3      	ldrh	r3, [r4, #6]
 800c84a:	88a2      	ldrh	r2, [r4, #4]
 800c84c:	6821      	ldr	r1, [r4, #0]
 800c84e:	f7fe f99d 	bl	800ab8c <ull_readrxdata>
 800c852:	2500      	movs	r5, #0
 800c854:	e556      	b.n	800c304 <dwt_ioctl+0x154>
 800c856:	2c00      	cmp	r4, #0
 800c858:	f001 83c5 	beq.w	800dfe6 <dwt_ioctl+0x1e36>
 800c85c:	88e3      	ldrh	r3, [r4, #6]
 800c85e:	6822      	ldr	r2, [r4, #0]
 800c860:	88a1      	ldrh	r1, [r4, #4]
 800c862:	f7fe fac7 	bl	800adf4 <ull_writetxdata>
 800c866:	2500      	movs	r5, #0
 800c868:	e54c      	b.n	800c304 <dwt_ioctl+0x154>
 800c86a:	4611      	mov	r1, r2
 800c86c:	f7ff fc08 	bl	800c080 <ull_rxenable>
 800c870:	2500      	movs	r5, #0
 800c872:	e547      	b.n	800c304 <dwt_ioctl+0x154>
 800c874:	2c00      	cmp	r4, #0
 800c876:	f001 83b9 	beq.w	800dfec <dwt_ioctl+0x1e3c>
 800c87a:	7923      	ldrb	r3, [r4, #4]
 800c87c:	8862      	ldrh	r2, [r4, #2]
 800c87e:	8821      	ldrh	r1, [r4, #0]
 800c880:	f7fe fdbe 	bl	800b400 <ull_writetxfctrl>
 800c884:	2500      	movs	r5, #0
 800c886:	e53d      	b.n	800c304 <dwt_ioctl+0x154>
 800c888:	2c00      	cmp	r4, #0
 800c88a:	f001 83b2 	beq.w	800dff2 <dwt_ioctl+0x1e42>
 800c88e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800c890:	7b9b      	ldrb	r3, [r3, #14]
 800c892:	2b01      	cmp	r3, #1
 800c894:	d00c      	beq.n	800c8b0 <dwt_ioctl+0x700>
 800c896:	2b03      	cmp	r3, #3
 800c898:	d110      	bne.n	800c8bc <dwt_ioctl+0x70c>
 800c89a:	220c      	movs	r2, #12
 800c89c:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800c8a0:	f7fd fbbd 	bl	800a01e <dwt_read16bitoffsetreg>
 800c8a4:	b200      	sxth	r0, r0
 800c8a6:	f340 030c 	sbfx	r3, r0, #0, #13
 800c8aa:	8023      	strh	r3, [r4, #0]
 800c8ac:	2500      	movs	r5, #0
 800c8ae:	e529      	b.n	800c304 <dwt_ioctl+0x154>
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	492f      	ldr	r1, [pc, #188]	; (800c970 <dwt_ioctl+0x7c0>)
 800c8b4:	f7fd fbb3 	bl	800a01e <dwt_read16bitoffsetreg>
 800c8b8:	b200      	sxth	r0, r0
 800c8ba:	e7f4      	b.n	800c8a6 <dwt_ioctl+0x6f6>
 800c8bc:	2200      	movs	r2, #0
 800c8be:	492d      	ldr	r1, [pc, #180]	; (800c974 <dwt_ioctl+0x7c4>)
 800c8c0:	f7fd fbad 	bl	800a01e <dwt_read16bitoffsetreg>
 800c8c4:	b200      	sxth	r0, r0
 800c8c6:	e7ee      	b.n	800c8a6 <dwt_ioctl+0x6f6>
 800c8c8:	2c00      	cmp	r4, #0
 800c8ca:	f001 8395 	beq.w	800dff8 <dwt_ioctl+0x1e48>
 800c8ce:	ab0c      	add	r3, sp, #48	; 0x30
 800c8d0:	9300      	str	r3, [sp, #0]
 800c8d2:	2303      	movs	r3, #3
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	4928      	ldr	r1, [pc, #160]	; (800c978 <dwt_ioctl+0x7c8>)
 800c8d8:	f7fd fb81 	bl	8009fde <dwt_readfromdevice>
 800c8dc:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 800c8e0:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 800c8e4:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 800c8e8:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800c8ec:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800c8f0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800c8f4:	bf1c      	itt	ne
 800c8f6:	ea6f 3303 	mvnne.w	r3, r3, lsl #12
 800c8fa:	ea6f 3313 	mvnne.w	r3, r3, lsr #12
 800c8fe:	6023      	str	r3, [r4, #0]
 800c900:	2500      	movs	r5, #0
 800c902:	e4ff      	b.n	800c304 <dwt_ioctl+0x154>
 800c904:	f7fe f9d0 	bl	800aca8 <ull_clearaonconfig>
 800c908:	2500      	movs	r5, #0
 800c90a:	e4fb      	b.n	800c304 <dwt_ioctl+0x154>
 800c90c:	2c00      	cmp	r4, #0
 800c90e:	f001 8376 	beq.w	800dffe <dwt_ioctl+0x1e4e>
 800c912:	8861      	ldrh	r1, [r4, #2]
 800c914:	f7fe fdf0 	bl	800b4f8 <ull_calcbandwidthadj>
 800c918:	7020      	strb	r0, [r4, #0]
 800c91a:	2500      	movs	r5, #0
 800c91c:	e4f2      	b.n	800c304 <dwt_ioctl+0x154>
 800c91e:	4621      	mov	r1, r4
 800c920:	f7fd fb9d 	bl	800a05e <ull_readdiagnostics>
 800c924:	2500      	movs	r5, #0
 800c926:	e4ed      	b.n	800c304 <dwt_ioctl+0x154>
 800c928:	2c00      	cmp	r4, #0
 800c92a:	f001 836b 	beq.w	800e004 <dwt_ioctl+0x1e54>
 800c92e:	2201      	movs	r2, #1
 800c930:	2170      	movs	r1, #112	; 0x70
 800c932:	f7fd fb5e 	bl	8009ff2 <dwt_read32bitoffsetreg>
 800c936:	6020      	str	r0, [r4, #0]
 800c938:	2500      	movs	r5, #0
 800c93a:	e4e3      	b.n	800c304 <dwt_ioctl+0x154>
 800c93c:	00110008 	.word	0x00110008
 800c940:	00d20874 	.word	0x00d20874
 800c944:	00110010 	.word	0x00110010
 800c948:	04d28874 	.word	0x04d28874
 800c94c:	0007001c 	.word	0x0007001c
 800c950:	00020004 	.word	0x00020004
 800c954:	001f000c 	.word	0x001f000c
 800c958:	001f0010 	.word	0x001f0010
 800c95c:	00010008 	.word	0x00010008
 800c960:	00010020 	.word	0x00010020
 800c964:	af5f35cc 	.word	0xaf5f35cc
 800c968:	af5f584c 	.word	0xaf5f584c
 800c96c:	0006000c 	.word	0x0006000c
 800c970:	0018000c 	.word	0x0018000c
 800c974:	000c0020 	.word	0x000c0020
 800c978:	00060029 	.word	0x00060029
 800c97c:	2c00      	cmp	r4, #0
 800c97e:	f001 8344 	beq.w	800e00a <dwt_ioctl+0x1e5a>
 800c982:	2200      	movs	r2, #0
 800c984:	2170      	movs	r1, #112	; 0x70
 800c986:	f7fd fb34 	bl	8009ff2 <dwt_read32bitoffsetreg>
 800c98a:	6020      	str	r0, [r4, #0]
 800c98c:	2500      	movs	r5, #0
 800c98e:	e4b9      	b.n	800c304 <dwt_ioctl+0x154>
 800c990:	9400      	str	r4, [sp, #0]
 800c992:	2305      	movs	r3, #5
 800c994:	2200      	movs	r2, #0
 800c996:	2170      	movs	r1, #112	; 0x70
 800c998:	f7fd fb21 	bl	8009fde <dwt_readfromdevice>
 800c99c:	2500      	movs	r5, #0
 800c99e:	e4b1      	b.n	800c304 <dwt_ioctl+0x154>
 800c9a0:	2c00      	cmp	r4, #0
 800c9a2:	f001 8335 	beq.w	800e010 <dwt_ioctl+0x1e60>
 800c9a6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800c9a8:	7b9b      	ldrb	r3, [r3, #14]
 800c9aa:	2b01      	cmp	r3, #1
 800c9ac:	d014      	beq.n	800c9d8 <dwt_ioctl+0x828>
 800c9ae:	2b03      	cmp	r3, #3
 800c9b0:	d119      	bne.n	800c9e6 <dwt_ioctl+0x836>
 800c9b2:	2216      	movs	r2, #22
 800c9b4:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800c9b8:	f7fd fb31 	bl	800a01e <dwt_read16bitoffsetreg>
 800c9bc:	f3c0 000d 	ubfx	r0, r0, #0, #14
 800c9c0:	b283      	uxth	r3, r0
 800c9c2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800c9c6:	d004      	beq.n	800c9d2 <dwt_ioctl+0x822>
 800c9c8:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 800c9cc:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 800c9d0:	b218      	sxth	r0, r3
 800c9d2:	8020      	strh	r0, [r4, #0]
 800c9d4:	2500      	movs	r5, #0
 800c9d6:	e495      	b.n	800c304 <dwt_ioctl+0x154>
 800c9d8:	2202      	movs	r2, #2
 800c9da:	49d6      	ldr	r1, [pc, #856]	; (800cd34 <dwt_ioctl+0xb84>)
 800c9dc:	f7fd fb1f 	bl	800a01e <dwt_read16bitoffsetreg>
 800c9e0:	f3c0 000d 	ubfx	r0, r0, #0, #14
 800c9e4:	e7ec      	b.n	800c9c0 <dwt_ioctl+0x810>
 800c9e6:	2202      	movs	r2, #2
 800c9e8:	49d3      	ldr	r1, [pc, #844]	; (800cd38 <dwt_ioctl+0xb88>)
 800c9ea:	f7fd fb18 	bl	800a01e <dwt_read16bitoffsetreg>
 800c9ee:	f3c0 000d 	ubfx	r0, r0, #0, #14
 800c9f2:	e7e5      	b.n	800c9c0 <dwt_ioctl+0x810>
 800c9f4:	9400      	str	r4, [sp, #0]
 800c9f6:	2306      	movs	r3, #6
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	49d0      	ldr	r1, [pc, #832]	; (800cd3c <dwt_ioctl+0xb8c>)
 800c9fc:	f7fd faef 	bl	8009fde <dwt_readfromdevice>
 800ca00:	7963      	ldrb	r3, [r4, #5]
 800ca02:	f003 0301 	and.w	r3, r3, #1
 800ca06:	7163      	strb	r3, [r4, #5]
 800ca08:	2500      	movs	r5, #0
 800ca0a:	e47b      	b.n	800c304 <dwt_ioctl+0x154>
 800ca0c:	2c00      	cmp	r4, #0
 800ca0e:	f001 8302 	beq.w	800e016 <dwt_ioctl+0x1e66>
 800ca12:	2201      	movs	r2, #1
 800ca14:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 800ca18:	f7fd fb13 	bl	800a042 <dwt_read8bitoffsetreg>
 800ca1c:	7020      	strb	r0, [r4, #0]
 800ca1e:	2500      	movs	r5, #0
 800ca20:	e470      	b.n	800c304 <dwt_ioctl+0x154>
 800ca22:	2c00      	cmp	r4, #0
 800ca24:	f001 82fa 	beq.w	800e01c <dwt_ioctl+0x1e6c>
 800ca28:	2200      	movs	r2, #0
 800ca2a:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 800ca2e:	f7fd fb08 	bl	800a042 <dwt_read8bitoffsetreg>
 800ca32:	7020      	strb	r0, [r4, #0]
 800ca34:	2500      	movs	r5, #0
 800ca36:	e465      	b.n	800c304 <dwt_ioctl+0x154>
 800ca38:	2c00      	cmp	r4, #0
 800ca3a:	f001 82f2 	beq.w	800e022 <dwt_ioctl+0x1e72>
 800ca3e:	88a2      	ldrh	r2, [r4, #4]
 800ca40:	6821      	ldr	r1, [r4, #0]
 800ca42:	f7fe fc07 	bl	800b254 <_dwt_otpprogword32>
 800ca46:	2500      	movs	r5, #0
 800ca48:	e45c      	b.n	800c304 <dwt_ioctl+0x154>
 800ca4a:	2c00      	cmp	r4, #0
 800ca4c:	f001 82ec 	beq.w	800e028 <dwt_ioctl+0x1e78>
 800ca50:	6825      	ldr	r5, [r4, #0]
 800ca52:	88a4      	ldrh	r4, [r4, #4]
 800ca54:	4622      	mov	r2, r4
 800ca56:	4629      	mov	r1, r5
 800ca58:	f7fe fbfc 	bl	800b254 <_dwt_otpprogword32>
 800ca5c:	4621      	mov	r1, r4
 800ca5e:	4630      	mov	r0, r6
 800ca60:	f7fd ff1a 	bl	800a898 <_dwt_otpread>
 800ca64:	1a2d      	subs	r5, r5, r0
 800ca66:	bf18      	it	ne
 800ca68:	f04f 35ff 	movne.w	r5, #4294967295
 800ca6c:	e44a      	b.n	800c304 <dwt_ioctl+0x154>
 800ca6e:	2a02      	cmp	r2, #2
 800ca70:	d00e      	beq.n	800ca90 <dwt_ioctl+0x8e0>
 800ca72:	4cb3      	ldr	r4, [pc, #716]	; (800cd40 <dwt_ioctl+0xb90>)
 800ca74:	2300      	movs	r3, #0
 800ca76:	461a      	mov	r2, r3
 800ca78:	4621      	mov	r1, r4
 800ca7a:	4630      	mov	r0, r6
 800ca7c:	f7fe f8bc 	bl	800abf8 <dwt_write8bitoffsetreg>
 800ca80:	2302      	movs	r3, #2
 800ca82:	2200      	movs	r2, #0
 800ca84:	4621      	mov	r1, r4
 800ca86:	4630      	mov	r0, r6
 800ca88:	f7fe f8b6 	bl	800abf8 <dwt_write8bitoffsetreg>
 800ca8c:	2500      	movs	r5, #0
 800ca8e:	e439      	b.n	800c304 <dwt_ioctl+0x154>
 800ca90:	2300      	movs	r3, #0
 800ca92:	9300      	str	r3, [sp, #0]
 800ca94:	23fe      	movs	r3, #254	; 0xfe
 800ca96:	2201      	movs	r2, #1
 800ca98:	49aa      	ldr	r1, [pc, #680]	; (800cd44 <dwt_ioctl+0xb94>)
 800ca9a:	f7fe fce3 	bl	800b464 <dwt_modify8bitoffsetreg>
 800ca9e:	e7e8      	b.n	800ca72 <dwt_ioctl+0x8c2>
 800caa0:	2c00      	cmp	r4, #0
 800caa2:	f001 82c4 	beq.w	800e02e <dwt_ioctl+0x1e7e>
 800caa6:	8824      	ldrh	r4, [r4, #0]
 800caa8:	b2e2      	uxtb	r2, r4
 800caaa:	f44f 7181 	mov.w	r1, #258	; 0x102
 800caae:	f7fe f94f 	bl	800ad50 <ull_aon_write>
 800cab2:	0a22      	lsrs	r2, r4, #8
 800cab4:	f240 1103 	movw	r1, #259	; 0x103
 800cab8:	4630      	mov	r0, r6
 800caba:	f7fe f949 	bl	800ad50 <ull_aon_write>
 800cabe:	2500      	movs	r5, #0
 800cac0:	e420      	b.n	800c304 <dwt_ioctl+0x154>
 800cac2:	2c00      	cmp	r4, #0
 800cac4:	f001 82b6 	beq.w	800e034 <dwt_ioctl+0x1e84>
 800cac8:	f8df 8284 	ldr.w	r8, [pc, #644]	; 800cd50 <dwt_ioctl+0xba0>
 800cacc:	2310      	movs	r3, #16
 800cace:	9300      	str	r3, [sp, #0]
 800cad0:	23ff      	movs	r3, #255	; 0xff
 800cad2:	2200      	movs	r2, #0
 800cad4:	4641      	mov	r1, r8
 800cad6:	f7fe fcc5 	bl	800b464 <dwt_modify8bitoffsetreg>
 800cada:	f44f 7182 	mov.w	r1, #260	; 0x104
 800cade:	4630      	mov	r0, r6
 800cae0:	f7fe f916 	bl	800ad10 <ull_aon_read>
 800cae4:	f000 05e0 	and.w	r5, r0, #224	; 0xe0
 800cae8:	462a      	mov	r2, r5
 800caea:	f44f 7182 	mov.w	r1, #260	; 0x104
 800caee:	4630      	mov	r0, r6
 800caf0:	f7fe f92e 	bl	800ad50 <ull_aon_write>
 800caf4:	f045 0204 	orr.w	r2, r5, #4
 800caf8:	f44f 7182 	mov.w	r1, #260	; 0x104
 800cafc:	4630      	mov	r0, r6
 800cafe:	f7fe f927 	bl	800ad50 <ull_aon_write>
 800cb02:	2002      	movs	r0, #2
 800cb04:	f7f3 fd08 	bl	8000518 <deca_sleep>
 800cb08:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800cb0c:	4630      	mov	r0, r6
 800cb0e:	f7fe f8ff 	bl	800ad10 <ull_aon_read>
 800cb12:	4607      	mov	r7, r0
 800cb14:	f240 110f 	movw	r1, #271	; 0x10f
 800cb18:	4630      	mov	r0, r6
 800cb1a:	f7fe f8f9 	bl	800ad10 <ull_aon_read>
 800cb1e:	4681      	mov	r9, r0
 800cb20:	462a      	mov	r2, r5
 800cb22:	f44f 7182 	mov.w	r1, #260	; 0x104
 800cb26:	4630      	mov	r0, r6
 800cb28:	f7fe f912 	bl	800ad50 <ull_aon_write>
 800cb2c:	2500      	movs	r5, #0
 800cb2e:	9500      	str	r5, [sp, #0]
 800cb30:	23ef      	movs	r3, #239	; 0xef
 800cb32:	462a      	mov	r2, r5
 800cb34:	4641      	mov	r1, r8
 800cb36:	4630      	mov	r0, r6
 800cb38:	f7fe fc94 	bl	800b464 <dwt_modify8bitoffsetreg>
 800cb3c:	ea47 2709 	orr.w	r7, r7, r9, lsl #8
 800cb40:	8027      	strh	r7, [r4, #0]
 800cb42:	f7ff bbdf 	b.w	800c304 <dwt_ioctl+0x154>
 800cb46:	2c00      	cmp	r4, #0
 800cb48:	f001 8277 	beq.w	800e03a <dwt_ioctl+0x1e8a>
 800cb4c:	78a2      	ldrb	r2, [r4, #2]
 800cb4e:	8821      	ldrh	r1, [r4, #0]
 800cb50:	f7fe f926 	bl	800ada0 <ull_configuresleep>
 800cb54:	2500      	movs	r5, #0
 800cb56:	f7ff bbd5 	b.w	800c304 <dwt_ioctl+0x154>
 800cb5a:	2c00      	cmp	r4, #0
 800cb5c:	f001 8270 	beq.w	800e040 <dwt_ioctl+0x1e90>
 800cb60:	6824      	ldr	r4, [r4, #0]
 800cb62:	f7fe f8a1 	bl	800aca8 <ull_clearaonconfig>
 800cb66:	2001      	movs	r0, #1
 800cb68:	f7f3 fcd6 	bl	8000518 <deca_sleep>
 800cb6c:	2303      	movs	r3, #3
 800cb6e:	9300      	str	r3, [sp, #0]
 800cb70:	23ff      	movs	r3, #255	; 0xff
 800cb72:	2200      	movs	r2, #0
 800cb74:	4974      	ldr	r1, [pc, #464]	; (800cd48 <dwt_ioctl+0xb98>)
 800cb76:	4630      	mov	r0, r6
 800cb78:	f7fe fc74 	bl	800b464 <dwt_modify8bitoffsetreg>
 800cb7c:	b97c      	cbnz	r4, 800cb9e <dwt_ioctl+0x9ee>
 800cb7e:	4630      	mov	r0, r6
 800cb80:	f7ff faee 	bl	800c160 <ull_softreset_no_sema_fcmd>
 800cb84:	2001      	movs	r0, #1
 800cb86:	f7f3 fcc7 	bl	8000518 <deca_sleep>
 800cb8a:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800cb8c:	2500      	movs	r5, #0
 800cb8e:	739d      	strb	r5, [r3, #14]
 800cb90:	2202      	movs	r2, #2
 800cb92:	821a      	strh	r2, [r3, #16]
 800cb94:	751d      	strb	r5, [r3, #20]
 800cb96:	755d      	strb	r5, [r3, #21]
 800cb98:	73dd      	strb	r5, [r3, #15]
 800cb9a:	f7ff bbb3 	b.w	800c304 <dwt_ioctl+0x154>
 800cb9e:	4630      	mov	r0, r6
 800cba0:	f7ff faf2 	bl	800c188 <ull_softreset_fcmd>
 800cba4:	e7ee      	b.n	800cb84 <dwt_ioctl+0x9d4>
 800cba6:	2c00      	cmp	r4, #0
 800cba8:	f001 824d 	beq.w	800e046 <dwt_ioctl+0x1e96>
 800cbac:	7823      	ldrb	r3, [r4, #0]
 800cbae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cbb2:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800cbb4:	7353      	strb	r3, [r2, #13]
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	4964      	ldr	r1, [pc, #400]	; (800cd4c <dwt_ioctl+0xb9c>)
 800cbba:	f7fe f81d 	bl	800abf8 <dwt_write8bitoffsetreg>
 800cbbe:	2500      	movs	r5, #0
 800cbc0:	f7ff bba0 	b.w	800c304 <dwt_ioctl+0x154>
 800cbc4:	2c00      	cmp	r4, #0
 800cbc6:	f001 8241 	beq.w	800e04c <dwt_ioctl+0x1e9c>
 800cbca:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800cbcc:	7b5b      	ldrb	r3, [r3, #13]
 800cbce:	7023      	strb	r3, [r4, #0]
 800cbd0:	2500      	movs	r5, #0
 800cbd2:	f7ff bb97 	b.w	800c304 <dwt_ioctl+0x154>
 800cbd6:	2101      	movs	r1, #1
 800cbd8:	f7fe faf6 	bl	800b1c8 <ull_enable_rf_tx>
 800cbdc:	4630      	mov	r0, r6
 800cbde:	f7fe fb27 	bl	800b230 <ull_enable_rftx_blocks>
 800cbe2:	2101      	movs	r1, #1
 800cbe4:	4630      	mov	r0, r6
 800cbe6:	f7fd fe2d 	bl	800a844 <ull_force_clocks>
 800cbea:	220f      	movs	r2, #15
 800cbec:	2101      	movs	r1, #1
 800cbee:	4630      	mov	r0, r6
 800cbf0:	f7fe ff48 	bl	800ba84 <ull_repeated_cw>
 800cbf4:	2500      	movs	r5, #0
 800cbf6:	f7ff bb85 	b.w	800c304 <dwt_ioctl+0x154>
 800cbfa:	2c00      	cmp	r4, #0
 800cbfc:	f001 8229 	beq.w	800e052 <dwt_ioctl+0x1ea2>
 800cc00:	6862      	ldr	r2, [r4, #4]
 800cc02:	6821      	ldr	r1, [r4, #0]
 800cc04:	f7fe ff3e 	bl	800ba84 <ull_repeated_cw>
 800cc08:	2500      	movs	r5, #0
 800cc0a:	f7ff bb7b 	b.w	800c304 <dwt_ioctl+0x154>
 800cc0e:	2c00      	cmp	r4, #0
 800cc10:	f001 8222 	beq.w	800e058 <dwt_ioctl+0x1ea8>
 800cc14:	4d4e      	ldr	r5, [pc, #312]	; (800cd50 <dwt_ioctl+0xba0>)
 800cc16:	2200      	movs	r2, #0
 800cc18:	4629      	mov	r1, r5
 800cc1a:	f7fd fa12 	bl	800a042 <dwt_read8bitoffsetreg>
 800cc1e:	4680      	mov	r8, r0
 800cc20:	2302      	movs	r3, #2
 800cc22:	9300      	str	r3, [sp, #0]
 800cc24:	23ff      	movs	r3, #255	; 0xff
 800cc26:	2200      	movs	r2, #0
 800cc28:	4629      	mov	r1, r5
 800cc2a:	4630      	mov	r0, r6
 800cc2c:	f7fe fc1a 	bl	800b464 <dwt_modify8bitoffsetreg>
 800cc30:	2304      	movs	r3, #4
 800cc32:	2200      	movs	r2, #0
 800cc34:	4947      	ldr	r1, [pc, #284]	; (800cd54 <dwt_ioctl+0xba4>)
 800cc36:	4630      	mov	r0, r6
 800cc38:	f7fd ffde 	bl	800abf8 <dwt_write8bitoffsetreg>
 800cc3c:	2301      	movs	r3, #1
 800cc3e:	2200      	movs	r2, #0
 800cc40:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800cc44:	4630      	mov	r0, r6
 800cc46:	f7fd ffd7 	bl	800abf8 <dwt_write8bitoffsetreg>
 800cc4a:	4f43      	ldr	r7, [pc, #268]	; (800cd58 <dwt_ioctl+0xba8>)
 800cc4c:	2500      	movs	r5, #0
 800cc4e:	462a      	mov	r2, r5
 800cc50:	4639      	mov	r1, r7
 800cc52:	4630      	mov	r0, r6
 800cc54:	f7fd f9f5 	bl	800a042 <dwt_read8bitoffsetreg>
 800cc58:	f010 0f01 	tst.w	r0, #1
 800cc5c:	d0f7      	beq.n	800cc4e <dwt_ioctl+0xa9e>
 800cc5e:	2200      	movs	r2, #0
 800cc60:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 800cc64:	4630      	mov	r0, r6
 800cc66:	f7fd f9da 	bl	800a01e <dwt_read16bitoffsetreg>
 800cc6a:	4605      	mov	r5, r0
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	461a      	mov	r2, r3
 800cc70:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800cc74:	4630      	mov	r0, r6
 800cc76:	f7fd ffbf 	bl	800abf8 <dwt_write8bitoffsetreg>
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	461a      	mov	r2, r3
 800cc7e:	4935      	ldr	r1, [pc, #212]	; (800cd54 <dwt_ioctl+0xba4>)
 800cc80:	4630      	mov	r0, r6
 800cc82:	f7fd ffb9 	bl	800abf8 <dwt_write8bitoffsetreg>
 800cc86:	4643      	mov	r3, r8
 800cc88:	2200      	movs	r2, #0
 800cc8a:	4931      	ldr	r1, [pc, #196]	; (800cd50 <dwt_ioctl+0xba0>)
 800cc8c:	4630      	mov	r0, r6
 800cc8e:	f7fd ffb3 	bl	800abf8 <dwt_write8bitoffsetreg>
 800cc92:	8025      	strh	r5, [r4, #0]
 800cc94:	2500      	movs	r5, #0
 800cc96:	f7ff bb35 	b.w	800c304 <dwt_ioctl+0x154>
 800cc9a:	2c00      	cmp	r4, #0
 800cc9c:	f001 81df 	beq.w	800e05e <dwt_ioctl+0x1eae>
 800cca0:	7923      	ldrb	r3, [r4, #4]
 800cca2:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800cca4:	7a92      	ldrb	r2, [r2, #10]
 800cca6:	1a9b      	subs	r3, r3, r2
 800cca8:	ee07 3a90 	vmov	s15, r3
 800ccac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ccb0:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800cd5c <dwt_ioctl+0xbac>
 800ccb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ccb8:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 800ccbc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ccc0:	edc4 7a00 	vstr	s15, [r4]
 800ccc4:	2500      	movs	r5, #0
 800ccc6:	f7ff bb1d 	b.w	800c304 <dwt_ioctl+0x154>
 800ccca:	2c00      	cmp	r4, #0
 800cccc:	f001 81ca 	beq.w	800e064 <dwt_ioctl+0x1eb4>
 800ccd0:	7923      	ldrb	r3, [r4, #4]
 800ccd2:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800ccd4:	7a52      	ldrb	r2, [r2, #9]
 800ccd6:	1a9b      	subs	r3, r3, r2
 800ccd8:	ee07 3a90 	vmov	s15, r3
 800ccdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cce0:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800cd60 <dwt_ioctl+0xbb0>
 800cce4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cce8:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800ccec:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ccf0:	eddf 6a1c 	vldr	s13, [pc, #112]	; 800cd64 <dwt_ioctl+0xbb4>
 800ccf4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800ccf8:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 800ccfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cd00:	edc4 7a00 	vstr	s15, [r4]
 800cd04:	2500      	movs	r5, #0
 800cd06:	f7ff bafd 	b.w	800c304 <dwt_ioctl+0x154>
 800cd0a:	2c00      	cmp	r4, #0
 800cd0c:	f001 81ad 	beq.w	800e06a <dwt_ioctl+0x1eba>
 800cd10:	6824      	ldr	r4, [r4, #0]
 800cd12:	2101      	movs	r1, #1
 800cd14:	f7fe fa58 	bl	800b1c8 <ull_enable_rf_tx>
 800cd18:	4630      	mov	r0, r6
 800cd1a:	f7fe fa89 	bl	800b230 <ull_enable_rftx_blocks>
 800cd1e:	2101      	movs	r1, #1
 800cd20:	4630      	mov	r0, r6
 800cd22:	f7fd fd8f 	bl	800a844 <ull_force_clocks>
 800cd26:	4621      	mov	r1, r4
 800cd28:	4630      	mov	r0, r6
 800cd2a:	f7fe fc41 	bl	800b5b0 <ull_repeated_frames>
 800cd2e:	2500      	movs	r5, #0
 800cd30:	f7ff bae8 	b.w	800c304 <dwt_ioctl+0x154>
 800cd34:	00180014 	.word	0x00180014
 800cd38:	000c001c 	.word	0x000c001c
 800cd3c:	000c0018 	.word	0x000c0018
 800cd40:	000a0004 	.word	0x000a0004
 800cd44:	00110008 	.word	0x00110008
 800cd48:	00110004 	.word	0x00110004
 800cd4c:	00090014 	.word	0x00090014
 800cd50:	00070048 	.word	0x00070048
 800cd54:	00070034 	.word	0x00070034
 800cd58:	00080004 	.word	0x00080004
 800cd5c:	3f866666 	.word	0x3f866666
 800cd60:	3ecccccd 	.word	0x3ecccccd
 800cd64:	437f0000 	.word	0x437f0000
 800cd68:	2500      	movs	r5, #0
 800cd6a:	9500      	str	r5, [sp, #0]
 800cd6c:	23ef      	movs	r3, #239	; 0xef
 800cd6e:	462a      	mov	r2, r5
 800cd70:	49c7      	ldr	r1, [pc, #796]	; (800d090 <dwt_ioctl+0xee0>)
 800cd72:	f7fe fb77 	bl	800b464 <dwt_modify8bitoffsetreg>
 800cd76:	2105      	movs	r1, #5
 800cd78:	4630      	mov	r0, r6
 800cd7a:	f7fd fd63 	bl	800a844 <ull_force_clocks>
 800cd7e:	2101      	movs	r1, #1
 800cd80:	4630      	mov	r0, r6
 800cd82:	f7fd fee5 	bl	800ab50 <ull_disable_rf_tx>
 800cd86:	4630      	mov	r0, r6
 800cd88:	f7fd fed8 	bl	800ab3c <ull_disable_rftx_blocks>
 800cd8c:	f7ff baba 	b.w	800c304 <dwt_ioctl+0x154>
 800cd90:	2500      	movs	r5, #0
 800cd92:	9500      	str	r5, [sp, #0]
 800cd94:	23ef      	movs	r3, #239	; 0xef
 800cd96:	462a      	mov	r2, r5
 800cd98:	49bd      	ldr	r1, [pc, #756]	; (800d090 <dwt_ioctl+0xee0>)
 800cd9a:	f7fe fb63 	bl	800b464 <dwt_modify8bitoffsetreg>
 800cd9e:	f7ff bab1 	b.w	800c304 <dwt_ioctl+0x154>
 800cda2:	2c00      	cmp	r4, #0
 800cda4:	f001 8164 	beq.w	800e070 <dwt_ioctl+0x1ec0>
 800cda8:	6821      	ldr	r1, [r4, #0]
 800cdaa:	f7fe fc01 	bl	800b5b0 <ull_repeated_frames>
 800cdae:	2500      	movs	r5, #0
 800cdb0:	f7ff baa8 	b.w	800c304 <dwt_ioctl+0x154>
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	49b7      	ldr	r1, [pc, #732]	; (800d094 <dwt_ioctl+0xee4>)
 800cdb8:	f7fd f931 	bl	800a01e <dwt_read16bitoffsetreg>
 800cdbc:	f3c0 050b 	ubfx	r5, r0, #0, #12
 800cdc0:	f410 6f00 	tst.w	r0, #2048	; 0x800
 800cdc4:	bf18      	it	ne
 800cdc6:	f445 4570 	orrne.w	r5, r5, #61440	; 0xf000
 800cdca:	b22d      	sxth	r5, r5
 800cdcc:	8025      	strh	r5, [r4, #0]
 800cdce:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800cdd0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800cdd4:	1aed      	subs	r5, r5, r3
 800cdd6:	f7ff ba95 	b.w	800c304 <dwt_ioctl+0x154>
 800cdda:	2c00      	cmp	r4, #0
 800cddc:	f001 814b 	beq.w	800e076 <dwt_ioctl+0x1ec6>
 800cde0:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800cde4:	7a23      	ldrb	r3, [r4, #8]
 800cde6:	f899 2013 	ldrb.w	r2, [r9, #19]
 800cdea:	2aff      	cmp	r2, #255	; 0xff
 800cdec:	f000 8122 	beq.w	800d034 <dwt_ioctl+0xe84>
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d136      	bne.n	800ce62 <dwt_ioctl+0xcb2>
 800cdf4:	f8d9 3000 	ldr.w	r3, [r9]
 800cdf8:	9300      	str	r3, [sp, #0]
 800cdfa:	230c      	movs	r3, #12
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	49a6      	ldr	r1, [pc, #664]	; (800d098 <dwt_ioctl+0xee8>)
 800ce00:	f7fd fd04 	bl	800a80c <dwt_writetodevice>
 800ce04:	f899 300c 	ldrb.w	r3, [r9, #12]
 800ce08:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 800ce0c:	18d1      	adds	r1, r2, r3
 800ce0e:	f899 2012 	ldrb.w	r2, [r9, #18]
 800ce12:	2a00      	cmp	r2, #0
 800ce14:	d15f      	bne.n	800ced6 <dwt_ioctl+0xd26>
 800ce16:	f899 0010 	ldrb.w	r0, [r9, #16]
 800ce1a:	2800      	cmp	r0, #0
 800ce1c:	bf0b      	itete	eq
 800ce1e:	227f      	moveq	r2, #127	; 0x7f
 800ce20:	f44f 6280 	movne.w	r2, #1024	; 0x400
 800ce24:	f44f 15b0 	moveq.w	r5, #1441792	; 0x160000
 800ce28:	f44f 15a0 	movne.w	r5, #1310720	; 0x140000
 800ce2c:	f899 0013 	ldrb.w	r0, [r9, #19]
 800ce30:	1a12      	subs	r2, r2, r0
 800ce32:	3a02      	subs	r2, #2
 800ce34:	4291      	cmp	r1, r2
 800ce36:	f200 8103 	bhi.w	800d040 <dwt_ioctl+0xe90>
 800ce3a:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800ce3e:	9200      	str	r2, [sp, #0]
 800ce40:	2200      	movs	r2, #0
 800ce42:	4629      	mov	r1, r5
 800ce44:	4630      	mov	r0, r6
 800ce46:	f7fd fce1 	bl	800a80c <dwt_writetodevice>
 800ce4a:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 800ce4e:	f899 200c 	ldrb.w	r2, [r9, #12]
 800ce52:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800ce56:	9100      	str	r1, [sp, #0]
 800ce58:	4629      	mov	r1, r5
 800ce5a:	4630      	mov	r0, r6
 800ce5c:	f7fd fcd6 	bl	800a80c <dwt_writetodevice>
 800ce60:	e04a      	b.n	800cef8 <dwt_ioctl+0xd48>
 800ce62:	f8d9 3000 	ldr.w	r3, [r9]
 800ce66:	f8b9 100e 	ldrh.w	r1, [r9, #14]
 800ce6a:	7a9a      	ldrb	r2, [r3, #10]
 800ce6c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
 800ce70:	7a5a      	ldrb	r2, [r3, #9]
 800ce72:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
 800ce76:	7a1a      	ldrb	r2, [r3, #8]
 800ce78:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
 800ce7c:	79da      	ldrb	r2, [r3, #7]
 800ce7e:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 800ce82:	799a      	ldrb	r2, [r3, #6]
 800ce84:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 800ce88:	795a      	ldrb	r2, [r3, #5]
 800ce8a:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
 800ce8e:	791a      	ldrb	r2, [r3, #4]
 800ce90:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 800ce94:	78da      	ldrb	r2, [r3, #3]
 800ce96:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
 800ce9a:	789a      	ldrb	r2, [r3, #2]
 800ce9c:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
 800cea0:	785a      	ldrb	r2, [r3, #1]
 800cea2:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
 800cea6:	781a      	ldrb	r2, [r3, #0]
 800cea8:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 800ceac:	2200      	movs	r2, #0
 800ceae:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
 800ceb2:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 800ceb6:	0a09      	lsrs	r1, r1, #8
 800ceb8:	f88d 103d 	strb.w	r1, [sp, #61]	; 0x3d
 800cebc:	7b19      	ldrb	r1, [r3, #12]
 800cebe:	f88d 103e 	strb.w	r1, [sp, #62]	; 0x3e
 800cec2:	7adb      	ldrb	r3, [r3, #11]
 800cec4:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 800cec8:	ab0c      	add	r3, sp, #48	; 0x30
 800ceca:	9300      	str	r3, [sp, #0]
 800cecc:	2310      	movs	r3, #16
 800cece:	4972      	ldr	r1, [pc, #456]	; (800d098 <dwt_ioctl+0xee8>)
 800ced0:	f7fd fc9c 	bl	800a80c <dwt_writetodevice>
 800ced4:	e796      	b.n	800ce04 <dwt_ioctl+0xc54>
 800ced6:	2a01      	cmp	r2, #1
 800ced8:	f040 80af 	bne.w	800d03a <dwt_ioctl+0xe8a>
 800cedc:	f899 3011 	ldrb.w	r3, [r9, #17]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800cee6:	bf08      	it	eq
 800cee8:	237f      	moveq	r3, #127	; 0x7f
 800ceea:	f899 2013 	ldrb.w	r2, [r9, #19]
 800ceee:	1a9b      	subs	r3, r3, r2
 800cef0:	3b02      	subs	r3, #2
 800cef2:	4299      	cmp	r1, r3
 800cef4:	f200 80a7 	bhi.w	800d046 <dwt_ioctl+0xe96>
 800cef8:	f899 2010 	ldrb.w	r2, [r9, #16]
 800cefc:	1e53      	subs	r3, r2, #1
 800cefe:	b2db      	uxtb	r3, r3
 800cf00:	2b01      	cmp	r3, #1
 800cf02:	d940      	bls.n	800cf86 <dwt_ioctl+0xdd6>
 800cf04:	f899 3011 	ldrb.w	r3, [r9, #17]
 800cf08:	1e59      	subs	r1, r3, #1
 800cf0a:	b2c9      	uxtb	r1, r1
 800cf0c:	2901      	cmp	r1, #1
 800cf0e:	d947      	bls.n	800cfa0 <dwt_ioctl+0xdf0>
 800cf10:	2b04      	cmp	r3, #4
 800cf12:	d04c      	beq.n	800cfae <dwt_ioctl+0xdfe>
 800cf14:	ea42 3343 	orr.w	r3, r2, r3, lsl #13
 800cf18:	2200      	movs	r2, #0
 800cf1a:	4960      	ldr	r1, [pc, #384]	; (800d09c <dwt_ioctl+0xeec>)
 800cf1c:	4630      	mov	r0, r6
 800cf1e:	f7fd fcdd 	bl	800a8dc <dwt_write32bitoffsetreg>
 800cf22:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 800cf26:	4a5e      	ldr	r2, [pc, #376]	; (800d0a0 <dwt_ioctl+0xef0>)
 800cf28:	ea02 12c3 	and.w	r2, r2, r3, lsl #7
 800cf2c:	f899 300c 	ldrb.w	r3, [r9, #12]
 800cf30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf34:	4313      	orrs	r3, r2
 800cf36:	2200      	movs	r2, #0
 800cf38:	495a      	ldr	r1, [pc, #360]	; (800d0a4 <dwt_ioctl+0xef4>)
 800cf3a:	4630      	mov	r0, r6
 800cf3c:	f7fd fcce 	bl	800a8dc <dwt_write32bitoffsetreg>
 800cf40:	2301      	movs	r3, #1
 800cf42:	2200      	movs	r2, #0
 800cf44:	4958      	ldr	r1, [pc, #352]	; (800d0a8 <dwt_ioctl+0xef8>)
 800cf46:	4630      	mov	r0, r6
 800cf48:	f7fd fe56 	bl	800abf8 <dwt_write8bitoffsetreg>
 800cf4c:	f8df 815c 	ldr.w	r8, [pc, #348]	; 800d0ac <dwt_ioctl+0xefc>
 800cf50:	2700      	movs	r7, #0
 800cf52:	463a      	mov	r2, r7
 800cf54:	4641      	mov	r1, r8
 800cf56:	4630      	mov	r0, r6
 800cf58:	f7fd f873 	bl	800a042 <dwt_read8bitoffsetreg>
 800cf5c:	f010 0f05 	tst.w	r0, #5
 800cf60:	d0f7      	beq.n	800cf52 <dwt_ioctl+0xda2>
 800cf62:	4605      	mov	r5, r0
 800cf64:	4603      	mov	r3, r0
 800cf66:	2200      	movs	r2, #0
 800cf68:	4950      	ldr	r1, [pc, #320]	; (800d0ac <dwt_ioctl+0xefc>)
 800cf6a:	4630      	mov	r0, r6
 800cf6c:	f7fd fe44 	bl	800abf8 <dwt_write8bitoffsetreg>
 800cf70:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 800cf74:	f025 0330 	bic.w	r3, r5, #48	; 0x30
 800cf78:	2b01      	cmp	r3, #1
 800cf7a:	d025      	beq.n	800cfc8 <dwt_ioctl+0xe18>
 800cf7c:	b26b      	sxtb	r3, r5
 800cf7e:	7023      	strb	r3, [r4, #0]
 800cf80:	2500      	movs	r5, #0
 800cf82:	f7ff b9bf 	b.w	800c304 <dwt_ioctl+0x154>
 800cf86:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800cf88:	7b9b      	ldrb	r3, [r3, #14]
 800cf8a:	2b03      	cmp	r3, #3
 800cf8c:	f001 8123 	beq.w	800e1d6 <dwt_ioctl+0x2026>
 800cf90:	f899 3011 	ldrb.w	r3, [r9, #17]
 800cf94:	1e5a      	subs	r2, r3, #1
 800cf96:	b2d2      	uxtb	r2, r2
 800cf98:	2a01      	cmp	r2, #1
 800cf9a:	d912      	bls.n	800cfc2 <dwt_ioctl+0xe12>
 800cf9c:	2201      	movs	r2, #1
 800cf9e:	e7b7      	b.n	800cf10 <dwt_ioctl+0xd60>
 800cfa0:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800cfa2:	7b9b      	ldrb	r3, [r3, #14]
 800cfa4:	2b03      	cmp	r3, #3
 800cfa6:	bf0c      	ite	eq
 800cfa8:	2302      	moveq	r3, #2
 800cfaa:	2301      	movne	r3, #1
 800cfac:	e7b2      	b.n	800cf14 <dwt_ioctl+0xd64>
 800cfae:	f8b9 100e 	ldrh.w	r1, [r9, #14]
 800cfb2:	2910      	cmp	r1, #16
 800cfb4:	d9ae      	bls.n	800cf14 <dwt_ioctl+0xd64>
 800cfb6:	f06f 0303 	mvn.w	r3, #3
 800cfba:	e7e0      	b.n	800cf7e <dwt_ioctl+0xdce>
 800cfbc:	2202      	movs	r2, #2
 800cfbe:	4613      	mov	r3, r2
 800cfc0:	e7a8      	b.n	800cf14 <dwt_ioctl+0xd64>
 800cfc2:	2201      	movs	r2, #1
 800cfc4:	4613      	mov	r3, r2
 800cfc6:	e7a5      	b.n	800cf14 <dwt_ioctl+0xd64>
 800cfc8:	f899 3012 	ldrb.w	r3, [r9, #18]
 800cfcc:	2b01      	cmp	r3, #1
 800cfce:	d1d5      	bne.n	800cf7c <dwt_ioctl+0xdcc>
 800cfd0:	f899 2011 	ldrb.w	r2, [r9, #17]
 800cfd4:	1e53      	subs	r3, r2, #1
 800cfd6:	b2db      	uxtb	r3, r3
 800cfd8:	2b01      	cmp	r3, #1
 800cfda:	d91b      	bls.n	800d014 <dwt_ioctl+0xe64>
 800cfdc:	2a03      	cmp	r2, #3
 800cfde:	bf0c      	ite	eq
 800cfe0:	f44f 17a0 	moveq.w	r7, #1310720	; 0x140000
 800cfe4:	f44f 17b0 	movne.w	r7, #1441792	; 0x160000
 800cfe8:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800cfec:	b112      	cbz	r2, 800cff4 <dwt_ioctl+0xe44>
 800cfee:	f899 300c 	ldrb.w	r3, [r9, #12]
 800cff2:	b9c3      	cbnz	r3, 800d026 <dwt_ioctl+0xe76>
 800cff4:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800cff8:	2900      	cmp	r1, #0
 800cffa:	d0bf      	beq.n	800cf7c <dwt_ioctl+0xdcc>
 800cffc:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d0bb      	beq.n	800cf7c <dwt_ioctl+0xdcc>
 800d004:	f899 200c 	ldrb.w	r2, [r9, #12]
 800d008:	9100      	str	r1, [sp, #0]
 800d00a:	4639      	mov	r1, r7
 800d00c:	4630      	mov	r0, r6
 800d00e:	f7fc ffe6 	bl	8009fde <dwt_readfromdevice>
 800d012:	e7b3      	b.n	800cf7c <dwt_ioctl+0xdcc>
 800d014:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800d016:	7b9b      	ldrb	r3, [r3, #14]
 800d018:	2b03      	cmp	r3, #3
 800d01a:	bf0c      	ite	eq
 800d01c:	f44f 1798 	moveq.w	r7, #1245184	; 0x130000
 800d020:	f44f 1790 	movne.w	r7, #1179648	; 0x120000
 800d024:	e7e0      	b.n	800cfe8 <dwt_ioctl+0xe38>
 800d026:	9200      	str	r2, [sp, #0]
 800d028:	2200      	movs	r2, #0
 800d02a:	4639      	mov	r1, r7
 800d02c:	4630      	mov	r0, r6
 800d02e:	f7fc ffd6 	bl	8009fde <dwt_readfromdevice>
 800d032:	e7df      	b.n	800cff4 <dwt_ioctl+0xe44>
 800d034:	f06f 0302 	mvn.w	r3, #2
 800d038:	e7a1      	b.n	800cf7e <dwt_ioctl+0xdce>
 800d03a:	f06f 0301 	mvn.w	r3, #1
 800d03e:	e79e      	b.n	800cf7e <dwt_ioctl+0xdce>
 800d040:	f04f 33ff 	mov.w	r3, #4294967295
 800d044:	e79b      	b.n	800cf7e <dwt_ioctl+0xdce>
 800d046:	f04f 33ff 	mov.w	r3, #4294967295
 800d04a:	e798      	b.n	800cf7e <dwt_ioctl+0xdce>
 800d04c:	7a23      	ldrb	r3, [r4, #8]
 800d04e:	79e1      	ldrb	r1, [r4, #7]
 800d050:	79a2      	ldrb	r2, [r4, #6]
 800d052:	00d2      	lsls	r2, r2, #3
 800d054:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800d058:	4313      	orrs	r3, r2
 800d05a:	7962      	ldrb	r2, [r4, #5]
 800d05c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800d060:	7922      	ldrb	r2, [r4, #4]
 800d062:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800d066:	78e2      	ldrb	r2, [r4, #3]
 800d068:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d06c:	78a2      	ldrb	r2, [r4, #2]
 800d06e:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 800d072:	7862      	ldrb	r2, [r4, #1]
 800d074:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800d078:	7822      	ldrb	r2, [r4, #0]
 800d07a:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 800d07e:	b29b      	uxth	r3, r3
 800d080:	2200      	movs	r2, #0
 800d082:	490b      	ldr	r1, [pc, #44]	; (800d0b0 <dwt_ioctl+0xf00>)
 800d084:	f7fd fbcd 	bl	800a822 <dwt_write16bitoffsetreg>
 800d088:	2500      	movs	r5, #0
 800d08a:	f7ff b93b 	b.w	800c304 <dwt_ioctl+0x154>
 800d08e:	bf00      	nop
 800d090:	000f0028 	.word	0x000f0028
 800d094:	00020008 	.word	0x00020008
 800d098:	00010034 	.word	0x00010034
 800d09c:	00010044 	.word	0x00010044
 800d0a0:	0001ff80 	.word	0x0001ff80
 800d0a4:	00010048 	.word	0x00010048
 800d0a8:	0001004c 	.word	0x0001004c
 800d0ac:	00010050 	.word	0x00010050
 800d0b0:	00010030 	.word	0x00010030
 800d0b4:	2c00      	cmp	r4, #0
 800d0b6:	f000 87e1 	beq.w	800e07c <dwt_ioctl+0x1ecc>
 800d0ba:	7863      	ldrb	r3, [r4, #1]
 800d0bc:	b133      	cbz	r3, 800d0cc <dwt_ioctl+0xf1c>
 800d0be:	085b      	lsrs	r3, r3, #1
 800d0c0:	3b01      	subs	r3, #1
 800d0c2:	b2db      	uxtb	r3, r3
 800d0c4:	7023      	strb	r3, [r4, #0]
 800d0c6:	2500      	movs	r5, #0
 800d0c8:	f7ff b91c 	b.w	800c304 <dwt_ioctl+0x154>
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	e7f9      	b.n	800d0c4 <dwt_ioctl+0xf14>
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	49d0      	ldr	r1, [pc, #832]	; (800d414 <dwt_ioctl+0x1264>)
 800d0d4:	f7fc ff8d 	bl	8009ff2 <dwt_read32bitoffsetreg>
 800d0d8:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800d0dc:	8023      	strh	r3, [r4, #0]
 800d0de:	f3c0 400b 	ubfx	r0, r0, #16, #12
 800d0e2:	8060      	strh	r0, [r4, #2]
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	49cc      	ldr	r1, [pc, #816]	; (800d418 <dwt_ioctl+0x1268>)
 800d0e8:	4630      	mov	r0, r6
 800d0ea:	f7fc ff82 	bl	8009ff2 <dwt_read32bitoffsetreg>
 800d0ee:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800d0f2:	80a3      	strh	r3, [r4, #4]
 800d0f4:	f3c0 400b 	ubfx	r0, r0, #16, #12
 800d0f8:	80e0      	strh	r0, [r4, #6]
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	49c7      	ldr	r1, [pc, #796]	; (800d41c <dwt_ioctl+0x126c>)
 800d0fe:	4630      	mov	r0, r6
 800d100:	f7fc ff77 	bl	8009ff2 <dwt_read32bitoffsetreg>
 800d104:	7220      	strb	r0, [r4, #8]
 800d106:	0c00      	lsrs	r0, r0, #16
 800d108:	7260      	strb	r0, [r4, #9]
 800d10a:	2200      	movs	r2, #0
 800d10c:	49c4      	ldr	r1, [pc, #784]	; (800d420 <dwt_ioctl+0x1270>)
 800d10e:	4630      	mov	r0, r6
 800d110:	f7fc ff6f 	bl	8009ff2 <dwt_read32bitoffsetreg>
 800d114:	f3c0 430b 	ubfx	r3, r0, #16, #12
 800d118:	81a3      	strh	r3, [r4, #12]
 800d11a:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800d11e:	8160      	strh	r0, [r4, #10]
 800d120:	2200      	movs	r2, #0
 800d122:	49c0      	ldr	r1, [pc, #768]	; (800d424 <dwt_ioctl+0x1274>)
 800d124:	4630      	mov	r0, r6
 800d126:	f7fc ff64 	bl	8009ff2 <dwt_read32bitoffsetreg>
 800d12a:	f3c0 430b 	ubfx	r3, r0, #16, #12
 800d12e:	f8a4 300f 	strh.w	r3, [r4, #15]
 800d132:	73a0      	strb	r0, [r4, #14]
 800d134:	2200      	movs	r2, #0
 800d136:	49bc      	ldr	r1, [pc, #752]	; (800d428 <dwt_ioctl+0x1278>)
 800d138:	4630      	mov	r0, r6
 800d13a:	f7fc ff5a 	bl	8009ff2 <dwt_read32bitoffsetreg>
 800d13e:	7460      	strb	r0, [r4, #17]
 800d140:	0c00      	lsrs	r0, r0, #16
 800d142:	74a0      	strb	r0, [r4, #18]
 800d144:	2200      	movs	r2, #0
 800d146:	49b9      	ldr	r1, [pc, #740]	; (800d42c <dwt_ioctl+0x127c>)
 800d148:	4630      	mov	r0, r6
 800d14a:	f7fc ff52 	bl	8009ff2 <dwt_read32bitoffsetreg>
 800d14e:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800d152:	f8a4 0013 	strh.w	r0, [r4, #19]
 800d156:	2500      	movs	r5, #0
 800d158:	7565      	strb	r5, [r4, #21]
 800d15a:	75a5      	strb	r5, [r4, #22]
 800d15c:	462a      	mov	r2, r5
 800d15e:	49b4      	ldr	r1, [pc, #720]	; (800d430 <dwt_ioctl+0x1280>)
 800d160:	4630      	mov	r0, r6
 800d162:	f7fc ff6e 	bl	800a042 <dwt_read8bitoffsetreg>
 800d166:	75e0      	strb	r0, [r4, #23]
 800d168:	f7ff b8cc 	b.w	800c304 <dwt_ioctl+0x154>
 800d16c:	4611      	mov	r1, r2
 800d16e:	f7fd fdbb 	bl	800ace8 <ull_configeventcounters>
 800d172:	2500      	movs	r5, #0
 800d174:	f7ff b8c6 	b.w	800c304 <dwt_ioctl+0x154>
 800d178:	2c00      	cmp	r4, #0
 800d17a:	f000 8782 	beq.w	800e082 <dwt_ioctl+0x1ed2>
 800d17e:	8823      	ldrh	r3, [r4, #0]
 800d180:	2200      	movs	r2, #0
 800d182:	49ac      	ldr	r1, [pc, #688]	; (800d434 <dwt_ioctl+0x1284>)
 800d184:	f7fd fb4d 	bl	800a822 <dwt_write16bitoffsetreg>
 800d188:	2500      	movs	r5, #0
 800d18a:	f7ff b8bb 	b.w	800c304 <dwt_ioctl+0x154>
 800d18e:	2c00      	cmp	r4, #0
 800d190:	f000 877a 	beq.w	800e088 <dwt_ioctl+0x1ed8>
 800d194:	6825      	ldr	r5, [r4, #0]
 800d196:	b935      	cbnz	r5, 800d1a6 <dwt_ioctl+0xff6>
 800d198:	2300      	movs	r3, #0
 800d19a:	461a      	mov	r2, r3
 800d19c:	49a6      	ldr	r1, [pc, #664]	; (800d438 <dwt_ioctl+0x1288>)
 800d19e:	f7fd fb40 	bl	800a822 <dwt_write16bitoffsetreg>
 800d1a2:	f7ff b8af 	b.w	800c304 <dwt_ioctl+0x154>
 800d1a6:	7962      	ldrb	r2, [r4, #5]
 800d1a8:	7923      	ldrb	r3, [r4, #4]
 800d1aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d1ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	49a0      	ldr	r1, [pc, #640]	; (800d438 <dwt_ioctl+0x1288>)
 800d1b6:	f7fd fb34 	bl	800a822 <dwt_write16bitoffsetreg>
 800d1ba:	2500      	movs	r5, #0
 800d1bc:	f7ff b8a2 	b.w	800c304 <dwt_ioctl+0x154>
 800d1c0:	2c00      	cmp	r4, #0
 800d1c2:	f000 8764 	beq.w	800e08e <dwt_ioctl+0x1ede>
 800d1c6:	6823      	ldr	r3, [r4, #0]
 800d1c8:	b94b      	cbnz	r3, 800d1de <dwt_ioctl+0x102e>
 800d1ca:	2500      	movs	r5, #0
 800d1cc:	9500      	str	r5, [sp, #0]
 800d1ce:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 800d1d2:	462a      	mov	r2, r5
 800d1d4:	2110      	movs	r1, #16
 800d1d6:	f7fe fb61 	bl	800b89c <dwt_modify16bitoffsetreg>
 800d1da:	f7ff b893 	b.w	800c304 <dwt_ioctl+0x154>
 800d1de:	2200      	movs	r2, #0
 800d1e0:	2134      	movs	r1, #52	; 0x34
 800d1e2:	f7fd fb7b 	bl	800a8dc <dwt_write32bitoffsetreg>
 800d1e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d1ea:	9300      	str	r3, [sp, #0]
 800d1ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	2110      	movs	r1, #16
 800d1f4:	4630      	mov	r0, r6
 800d1f6:	f7fe fb51 	bl	800b89c <dwt_modify16bitoffsetreg>
 800d1fa:	2500      	movs	r5, #0
 800d1fc:	f7ff b882 	b.w	800c304 <dwt_ioctl+0x154>
 800d200:	2c00      	cmp	r4, #0
 800d202:	f000 8747 	beq.w	800e094 <dwt_ioctl+0x1ee4>
 800d206:	8861      	ldrh	r1, [r4, #2]
 800d208:	f7fd fd82 	bl	800ad10 <ull_aon_read>
 800d20c:	7020      	strb	r0, [r4, #0]
 800d20e:	2500      	movs	r5, #0
 800d210:	f7ff b878 	b.w	800c304 <dwt_ioctl+0x154>
 800d214:	2c00      	cmp	r4, #0
 800d216:	f000 8740 	beq.w	800e09a <dwt_ioctl+0x1eea>
 800d21a:	78a2      	ldrb	r2, [r4, #2]
 800d21c:	8821      	ldrh	r1, [r4, #0]
 800d21e:	f7fd fd97 	bl	800ad50 <ull_aon_write>
 800d222:	2500      	movs	r5, #0
 800d224:	f7ff b86e 	b.w	800c304 <dwt_ioctl+0x154>
 800d228:	4b84      	ldr	r3, [pc, #528]	; (800d43c <dwt_ioctl+0x128c>)
 800d22a:	4a85      	ldr	r2, [pc, #532]	; (800d440 <dwt_ioctl+0x1290>)
 800d22c:	2d01      	cmp	r5, #1
 800d22e:	bf18      	it	ne
 800d230:	4613      	movne	r3, r2
 800d232:	2d01      	cmp	r5, #1
 800d234:	4983      	ldr	r1, [pc, #524]	; (800d444 <dwt_ioctl+0x1294>)
 800d236:	bf18      	it	ne
 800d238:	f04f 110c 	movne.w	r1, #786444	; 0xc000c
 800d23c:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800d23e:	7b92      	ldrb	r2, [r2, #14]
 800d240:	2a01      	cmp	r2, #1
 800d242:	d012      	beq.n	800d26a <dwt_ioctl+0x10ba>
 800d244:	2a03      	cmp	r2, #3
 800d246:	d117      	bne.n	800d278 <dwt_ioctl+0x10c8>
 800d248:	f5a2 12c0 	sub.w	r2, r2, #1572864	; 0x180000
 800d24c:	3a01      	subs	r2, #1
 800d24e:	441a      	add	r2, r3
 800d250:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800d254:	f7fc fee3 	bl	800a01e <dwt_read16bitoffsetreg>
 800d258:	09c0      	lsrs	r0, r0, #7
 800d25a:	8020      	strh	r0, [r4, #0]
 800d25c:	8825      	ldrh	r5, [r4, #0]
 800d25e:	3500      	adds	r5, #0
 800d260:	bf18      	it	ne
 800d262:	2501      	movne	r5, #1
 800d264:	426d      	negs	r5, r5
 800d266:	f7ff b84d 	b.w	800c304 <dwt_ioctl+0x154>
 800d26a:	2202      	movs	r2, #2
 800d26c:	4619      	mov	r1, r3
 800d26e:	f7fc fed6 	bl	800a01e <dwt_read16bitoffsetreg>
 800d272:	09c0      	lsrs	r0, r0, #7
 800d274:	8020      	strh	r0, [r4, #0]
 800d276:	e7f1      	b.n	800d25c <dwt_ioctl+0x10ac>
 800d278:	2202      	movs	r2, #2
 800d27a:	f7fc fed0 	bl	800a01e <dwt_read16bitoffsetreg>
 800d27e:	09c0      	lsrs	r0, r0, #7
 800d280:	8020      	strh	r0, [r4, #0]
 800d282:	e7eb      	b.n	800d25c <dwt_ioctl+0x10ac>
 800d284:	2c00      	cmp	r4, #0
 800d286:	f000 870b 	beq.w	800e0a0 <dwt_ioctl+0x1ef0>
 800d28a:	7821      	ldrb	r1, [r4, #0]
 800d28c:	f7fe fb20 	bl	800b8d0 <ull_setleds>
 800d290:	2500      	movs	r5, #0
 800d292:	f7ff b837 	b.w	800c304 <dwt_ioctl+0x154>
 800d296:	4611      	mov	r1, r2
 800d298:	f7fe f9a2 	bl	800b5e0 <ull_setdwstate>
 800d29c:	2500      	movs	r5, #0
 800d29e:	f7ff b831 	b.w	800c304 <dwt_ioctl+0x154>
 800d2a2:	9400      	str	r4, [sp, #0]
 800d2a4:	2304      	movs	r3, #4
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	211c      	movs	r1, #28
 800d2aa:	f7fc fe98 	bl	8009fde <dwt_readfromdevice>
 800d2ae:	2500      	movs	r5, #0
 800d2b0:	f7ff b828 	b.w	800c304 <dwt_ioctl+0x154>
 800d2b4:	2c00      	cmp	r4, #0
 800d2b6:	f000 86f6 	beq.w	800e0a6 <dwt_ioctl+0x1ef6>
 800d2ba:	2202      	movs	r2, #2
 800d2bc:	2144      	movs	r1, #68	; 0x44
 800d2be:	f7fc feae 	bl	800a01e <dwt_read16bitoffsetreg>
 800d2c2:	f3c0 2000 	ubfx	r0, r0, #8, #1
 800d2c6:	7020      	strb	r0, [r4, #0]
 800d2c8:	2500      	movs	r5, #0
 800d2ca:	f7ff b81b 	b.w	800c304 <dwt_ioctl+0x154>
 800d2ce:	2c00      	cmp	r4, #0
 800d2d0:	f000 86ec 	beq.w	800e0ac <dwt_ioctl+0x1efc>
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	2144      	movs	r1, #68	; 0x44
 800d2d8:	f7fc feb3 	bl	800a042 <dwt_read8bitoffsetreg>
 800d2dc:	f000 0001 	and.w	r0, r0, #1
 800d2e0:	7020      	strb	r0, [r4, #0]
 800d2e2:	2500      	movs	r5, #0
 800d2e4:	f7ff b80e 	b.w	800c304 <dwt_ioctl+0x154>
 800d2e8:	2c00      	cmp	r4, #0
 800d2ea:	f000 86e2 	beq.w	800e0b2 <dwt_ioctl+0x1f02>
 800d2ee:	8862      	ldrh	r2, [r4, #2]
 800d2f0:	8821      	ldrh	r1, [r4, #0]
 800d2f2:	f7fe f9d1 	bl	800b698 <ull_configureframefilter>
 800d2f6:	2500      	movs	r5, #0
 800d2f8:	f7ff b804 	b.w	800c304 <dwt_ioctl+0x154>
 800d2fc:	9400      	str	r4, [sp, #0]
 800d2fe:	2308      	movs	r3, #8
 800d300:	2200      	movs	r2, #0
 800d302:	2104      	movs	r1, #4
 800d304:	f7fd fa82 	bl	800a80c <dwt_writetodevice>
 800d308:	2500      	movs	r5, #0
 800d30a:	f7fe bffb 	b.w	800c304 <dwt_ioctl+0x154>
 800d30e:	9400      	str	r4, [sp, #0]
 800d310:	2308      	movs	r3, #8
 800d312:	2200      	movs	r2, #0
 800d314:	2104      	movs	r1, #4
 800d316:	f7fc fe62 	bl	8009fde <dwt_readfromdevice>
 800d31a:	2500      	movs	r5, #0
 800d31c:	f7fe bff2 	b.w	800c304 <dwt_ioctl+0x154>
 800d320:	2c00      	cmp	r4, #0
 800d322:	f000 86c9 	beq.w	800e0b8 <dwt_ioctl+0x1f08>
 800d326:	8823      	ldrh	r3, [r4, #0]
 800d328:	2202      	movs	r2, #2
 800d32a:	210c      	movs	r1, #12
 800d32c:	f7fd fa79 	bl	800a822 <dwt_write16bitoffsetreg>
 800d330:	2500      	movs	r5, #0
 800d332:	f7fe bfe7 	b.w	800c304 <dwt_ioctl+0x154>
 800d336:	2c00      	cmp	r4, #0
 800d338:	f000 86c1 	beq.w	800e0be <dwt_ioctl+0x1f0e>
 800d33c:	8823      	ldrh	r3, [r4, #0]
 800d33e:	2200      	movs	r2, #0
 800d340:	210c      	movs	r1, #12
 800d342:	f7fd fa6e 	bl	800a822 <dwt_write16bitoffsetreg>
 800d346:	2500      	movs	r5, #0
 800d348:	f7fe bfdc 	b.w	800c304 <dwt_ioctl+0x154>
 800d34c:	4621      	mov	r1, r4
 800d34e:	f7fd fa3b 	bl	800a7c8 <ull_readrxtimestamp>
 800d352:	2500      	movs	r5, #0
 800d354:	f7fe bfd6 	b.w	800c304 <dwt_ioctl+0x154>
 800d358:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800d35a:	7b9b      	ldrb	r3, [r3, #14]
 800d35c:	2b01      	cmp	r3, #1
 800d35e:	d00b      	beq.n	800d378 <dwt_ioctl+0x11c8>
 800d360:	2b03      	cmp	r3, #3
 800d362:	d112      	bne.n	800d38a <dwt_ioctl+0x11da>
 800d364:	9400      	str	r4, [sp, #0]
 800d366:	2305      	movs	r3, #5
 800d368:	2220      	movs	r2, #32
 800d36a:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800d36e:	f7fc fe36 	bl	8009fde <dwt_readfromdevice>
 800d372:	2500      	movs	r5, #0
 800d374:	f7fe bfc6 	b.w	800c304 <dwt_ioctl+0x154>
 800d378:	9400      	str	r4, [sp, #0]
 800d37a:	2305      	movs	r3, #5
 800d37c:	2200      	movs	r2, #0
 800d37e:	4932      	ldr	r1, [pc, #200]	; (800d448 <dwt_ioctl+0x1298>)
 800d380:	f7fc fe2d 	bl	8009fde <dwt_readfromdevice>
 800d384:	2500      	movs	r5, #0
 800d386:	f7fe bfbd 	b.w	800c304 <dwt_ioctl+0x154>
 800d38a:	9400      	str	r4, [sp, #0]
 800d38c:	2305      	movs	r3, #5
 800d38e:	2200      	movs	r2, #0
 800d390:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 800d394:	f7fc fe23 	bl	8009fde <dwt_readfromdevice>
 800d398:	2500      	movs	r5, #0
 800d39a:	f7fe bfb3 	b.w	800c304 <dwt_ioctl+0x154>
 800d39e:	2500      	movs	r5, #0
 800d3a0:	f804 5b01 	strb.w	r5, [r4], #1
 800d3a4:	9400      	str	r4, [sp, #0]
 800d3a6:	2304      	movs	r3, #4
 800d3a8:	462a      	mov	r2, r5
 800d3aa:	216c      	movs	r1, #108	; 0x6c
 800d3ac:	f7fc fe17 	bl	8009fde <dwt_readfromdevice>
 800d3b0:	f7fe bfa8 	b.w	800c304 <dwt_ioctl+0x154>
 800d3b4:	2c00      	cmp	r4, #0
 800d3b6:	f000 8685 	beq.w	800e0c4 <dwt_ioctl+0x1f14>
 800d3ba:	2201      	movs	r2, #1
 800d3bc:	2160      	movs	r1, #96	; 0x60
 800d3be:	f7fc fe18 	bl	8009ff2 <dwt_read32bitoffsetreg>
 800d3c2:	6020      	str	r0, [r4, #0]
 800d3c4:	2500      	movs	r5, #0
 800d3c6:	f7fe bf9d 	b.w	800c304 <dwt_ioctl+0x154>
 800d3ca:	2c00      	cmp	r4, #0
 800d3cc:	f000 867d 	beq.w	800e0ca <dwt_ioctl+0x1f1a>
 800d3d0:	2200      	movs	r2, #0
 800d3d2:	2160      	movs	r1, #96	; 0x60
 800d3d4:	f7fc fe0d 	bl	8009ff2 <dwt_read32bitoffsetreg>
 800d3d8:	6020      	str	r0, [r4, #0]
 800d3da:	2500      	movs	r5, #0
 800d3dc:	f7fe bf92 	b.w	800c304 <dwt_ioctl+0x154>
 800d3e0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800d3e2:	7b9b      	ldrb	r3, [r3, #14]
 800d3e4:	2b01      	cmp	r3, #1
 800d3e6:	d00b      	beq.n	800d400 <dwt_ioctl+0x1250>
 800d3e8:	2b03      	cmp	r3, #3
 800d3ea:	d131      	bne.n	800d450 <dwt_ioctl+0x12a0>
 800d3ec:	9400      	str	r4, [sp, #0]
 800d3ee:	2305      	movs	r3, #5
 800d3f0:	2228      	movs	r2, #40	; 0x28
 800d3f2:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800d3f6:	f7fc fdf2 	bl	8009fde <dwt_readfromdevice>
 800d3fa:	2500      	movs	r5, #0
 800d3fc:	f7fe bf82 	b.w	800c304 <dwt_ioctl+0x154>
 800d400:	9400      	str	r4, [sp, #0]
 800d402:	2305      	movs	r3, #5
 800d404:	2200      	movs	r2, #0
 800d406:	4911      	ldr	r1, [pc, #68]	; (800d44c <dwt_ioctl+0x129c>)
 800d408:	f7fc fde9 	bl	8009fde <dwt_readfromdevice>
 800d40c:	2500      	movs	r5, #0
 800d40e:	f7fe bf79 	b.w	800c304 <dwt_ioctl+0x154>
 800d412:	bf00      	nop
 800d414:	000f0004 	.word	0x000f0004
 800d418:	000f0008 	.word	0x000f0008
 800d41c:	000f000c 	.word	0x000f000c
 800d420:	000f0010 	.word	0x000f0010
 800d424:	000f0014 	.word	0x000f0014
 800d428:	000f0018 	.word	0x000f0018
 800d42c:	000f001c 	.word	0x000f001c
 800d430:	000f0020 	.word	0x000f0020
 800d434:	00060004 	.word	0x00060004
 800d438:	0011001c 	.word	0x0011001c
 800d43c:	00180034 	.word	0x00180034
 800d440:	0018002c 	.word	0x0018002c
 800d444:	000c0014 	.word	0x000c0014
 800d448:	00180020 	.word	0x00180020
 800d44c:	00180028 	.word	0x00180028
 800d450:	9400      	str	r4, [sp, #0]
 800d452:	2305      	movs	r3, #5
 800d454:	2200      	movs	r2, #0
 800d456:	49ce      	ldr	r1, [pc, #824]	; (800d790 <dwt_ioctl+0x15e0>)
 800d458:	f7fc fdc1 	bl	8009fde <dwt_readfromdevice>
 800d45c:	2500      	movs	r5, #0
 800d45e:	f7fe bf51 	b.w	800c304 <dwt_ioctl+0x154>
 800d462:	2c00      	cmp	r4, #0
 800d464:	f000 8634 	beq.w	800e0d0 <dwt_ioctl+0x1f20>
 800d468:	2200      	movs	r2, #0
 800d46a:	211c      	movs	r1, #28
 800d46c:	f7fc fdc1 	bl	8009ff2 <dwt_read32bitoffsetreg>
 800d470:	6020      	str	r0, [r4, #0]
 800d472:	2500      	movs	r5, #0
 800d474:	f7fe bf46 	b.w	800c304 <dwt_ioctl+0x154>
 800d478:	2c00      	cmp	r4, #0
 800d47a:	f000 862c 	beq.w	800e0d6 <dwt_ioctl+0x1f26>
 800d47e:	8825      	ldrh	r5, [r4, #0]
 800d480:	6867      	ldr	r7, [r4, #4]
 800d482:	7a23      	ldrb	r3, [r4, #8]
 800d484:	2b00      	cmp	r3, #0
 800d486:	f000 8629 	beq.w	800e0dc <dwt_ioctl+0x1f2c>
 800d48a:	463c      	mov	r4, r7
 800d48c:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 800d490:	4629      	mov	r1, r5
 800d492:	4630      	mov	r0, r6
 800d494:	f7fd fa00 	bl	800a898 <_dwt_otpread>
 800d498:	f844 0b04 	str.w	r0, [r4], #4
 800d49c:	3501      	adds	r5, #1
 800d49e:	b2ad      	uxth	r5, r5
 800d4a0:	42bc      	cmp	r4, r7
 800d4a2:	d1f5      	bne.n	800d490 <dwt_ioctl+0x12e0>
 800d4a4:	2500      	movs	r5, #0
 800d4a6:	f7fe bf2d 	b.w	800c304 <dwt_ioctl+0x154>
 800d4aa:	2c00      	cmp	r4, #0
 800d4ac:	f000 8619 	beq.w	800e0e2 <dwt_ioctl+0x1f32>
 800d4b0:	7823      	ldrb	r3, [r4, #0]
 800d4b2:	2201      	movs	r2, #1
 800d4b4:	2124      	movs	r1, #36	; 0x24
 800d4b6:	f7fd fb9f 	bl	800abf8 <dwt_write8bitoffsetreg>
 800d4ba:	2500      	movs	r5, #0
 800d4bc:	f7fe bf22 	b.w	800c304 <dwt_ioctl+0x154>
 800d4c0:	f7fe f90e 	bl	800b6e0 <ull_run_pgfcal>
 800d4c4:	4605      	mov	r5, r0
 800d4c6:	f7fe bf1d 	b.w	800c304 <dwt_ioctl+0x154>
 800d4ca:	4611      	mov	r1, r2
 800d4cc:	f7fe fa4e 	bl	800b96c <ull_pgf_cal>
 800d4d0:	4605      	mov	r5, r0
 800d4d2:	f7fe bf17 	b.w	800c304 <dwt_ioctl+0x154>
 800d4d6:	2c00      	cmp	r4, #0
 800d4d8:	f000 8606 	beq.w	800e0e8 <dwt_ioctl+0x1f38>
 800d4dc:	78a5      	ldrb	r5, [r4, #2]
 800d4de:	2101      	movs	r1, #1
 800d4e0:	f7fd f9b0 	bl	800a844 <ull_force_clocks>
 800d4e4:	2100      	movs	r1, #0
 800d4e6:	4630      	mov	r0, r6
 800d4e8:	f7fd fe6e 	bl	800b1c8 <ull_enable_rf_tx>
 800d4ec:	4630      	mov	r0, r6
 800d4ee:	f7fd fe9f 	bl	800b230 <ull_enable_rftx_blocks>
 800d4f2:	f005 033f 	and.w	r3, r5, #63	; 0x3f
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	49a6      	ldr	r1, [pc, #664]	; (800d794 <dwt_ioctl+0x15e4>)
 800d4fa:	4630      	mov	r0, r6
 800d4fc:	f7fd fb7c 	bl	800abf8 <dwt_write8bitoffsetreg>
 800d500:	2301      	movs	r3, #1
 800d502:	9300      	str	r3, [sp, #0]
 800d504:	23ff      	movs	r3, #255	; 0xff
 800d506:	2200      	movs	r2, #0
 800d508:	49a3      	ldr	r1, [pc, #652]	; (800d798 <dwt_ioctl+0x15e8>)
 800d50a:	4630      	mov	r0, r6
 800d50c:	f7fd ffaa 	bl	800b464 <dwt_modify8bitoffsetreg>
 800d510:	4fa1      	ldr	r7, [pc, #644]	; (800d798 <dwt_ioctl+0x15e8>)
 800d512:	2500      	movs	r5, #0
 800d514:	462a      	mov	r2, r5
 800d516:	4639      	mov	r1, r7
 800d518:	4630      	mov	r0, r6
 800d51a:	f7fc fd92 	bl	800a042 <dwt_read8bitoffsetreg>
 800d51e:	f010 0f01 	tst.w	r0, #1
 800d522:	d1f7      	bne.n	800d514 <dwt_ioctl+0x1364>
 800d524:	2200      	movs	r2, #0
 800d526:	499d      	ldr	r1, [pc, #628]	; (800d79c <dwt_ioctl+0x15ec>)
 800d528:	4630      	mov	r0, r6
 800d52a:	f7fc fd78 	bl	800a01e <dwt_read16bitoffsetreg>
 800d52e:	4605      	mov	r5, r0
 800d530:	4630      	mov	r0, r6
 800d532:	f7fd fb03 	bl	800ab3c <ull_disable_rftx_blocks>
 800d536:	2100      	movs	r1, #0
 800d538:	4630      	mov	r0, r6
 800d53a:	f7fd fb09 	bl	800ab50 <ull_disable_rf_tx>
 800d53e:	2105      	movs	r1, #5
 800d540:	4630      	mov	r0, r6
 800d542:	f7fd f97f 	bl	800a844 <ull_force_clocks>
 800d546:	f3c5 050b 	ubfx	r5, r5, #0, #12
 800d54a:	8025      	strh	r5, [r4, #0]
 800d54c:	2500      	movs	r5, #0
 800d54e:	f7fe bed9 	b.w	800c304 <dwt_ioctl+0x154>
 800d552:	2102      	movs	r1, #2
 800d554:	f7fe f844 	bl	800b5e0 <ull_setdwstate>
 800d558:	2101      	movs	r1, #1
 800d55a:	4630      	mov	r0, r6
 800d55c:	f7fe f840 	bl	800b5e0 <ull_setdwstate>
 800d560:	2432      	movs	r4, #50	; 0x32
 800d562:	f04f 0814 	mov.w	r8, #20
 800d566:	2700      	movs	r7, #0
 800d568:	2544      	movs	r5, #68	; 0x44
 800d56a:	4640      	mov	r0, r8
 800d56c:	f7f2 ffdf 	bl	800052e <deca_usleep>
 800d570:	463a      	mov	r2, r7
 800d572:	4629      	mov	r1, r5
 800d574:	4630      	mov	r0, r6
 800d576:	f7fc fd64 	bl	800a042 <dwt_read8bitoffsetreg>
 800d57a:	f010 0f02 	tst.w	r0, #2
 800d57e:	d105      	bne.n	800d58c <dwt_ioctl+0x13dc>
 800d580:	1e63      	subs	r3, r4, #1
 800d582:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 800d586:	d1f0      	bne.n	800d56a <dwt_ioctl+0x13ba>
 800d588:	2501      	movs	r5, #1
 800d58a:	e000      	b.n	800d58e <dwt_ioctl+0x13de>
 800d58c:	2500      	movs	r5, #0
 800d58e:	426d      	negs	r5, r5
 800d590:	f7fe beb8 	b.w	800c304 <dwt_ioctl+0x154>
 800d594:	2c00      	cmp	r4, #0
 800d596:	f000 85aa 	beq.w	800e0ee <dwt_ioctl+0x1f3e>
 800d59a:	7823      	ldrb	r3, [r4, #0]
 800d59c:	031b      	lsls	r3, r3, #12
 800d59e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800d5a2:	7862      	ldrb	r2, [r4, #1]
 800d5a4:	2a01      	cmp	r2, #1
 800d5a6:	bf08      	it	eq
 800d5a8:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
 800d5ac:	9300      	str	r3, [sp, #0]
 800d5ae:	f46f 43e2 	mvn.w	r3, #28928	; 0x7100
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	497a      	ldr	r1, [pc, #488]	; (800d7a0 <dwt_ioctl+0x15f0>)
 800d5b6:	f7fd fde3 	bl	800b180 <dwt_modify32bitoffsetreg>
 800d5ba:	2500      	movs	r5, #0
 800d5bc:	f7fe bea2 	b.w	800c304 <dwt_ioctl+0x154>
 800d5c0:	2c00      	cmp	r4, #0
 800d5c2:	f000 8597 	beq.w	800e0f4 <dwt_ioctl+0x1f44>
 800d5c6:	6862      	ldr	r2, [r4, #4]
 800d5c8:	6821      	ldr	r1, [r4, #0]
 800d5ca:	f7fd fefb 	bl	800b3c4 <ull_setgpiomode>
 800d5ce:	2500      	movs	r5, #0
 800d5d0:	f7fe be98 	b.w	800c304 <dwt_ioctl+0x154>
 800d5d4:	2c00      	cmp	r4, #0
 800d5d6:	f000 8590 	beq.w	800e0fa <dwt_ioctl+0x1f4a>
 800d5da:	8823      	ldrh	r3, [r4, #0]
 800d5dc:	2200      	movs	r2, #0
 800d5de:	4971      	ldr	r1, [pc, #452]	; (800d7a4 <dwt_ioctl+0x15f4>)
 800d5e0:	f7fd f91f 	bl	800a822 <dwt_write16bitoffsetreg>
 800d5e4:	2500      	movs	r5, #0
 800d5e6:	f7fe be8d 	b.w	800c304 <dwt_ioctl+0x154>
 800d5ea:	2c00      	cmp	r4, #0
 800d5ec:	f000 8588 	beq.w	800e100 <dwt_ioctl+0x1f50>
 800d5f0:	6862      	ldr	r2, [r4, #4]
 800d5f2:	8821      	ldrh	r1, [r4, #0]
 800d5f4:	f7fe f9ea 	bl	800b9cc <ull_setgpiovalue>
 800d5f8:	2500      	movs	r5, #0
 800d5fa:	f7fe be83 	b.w	800c304 <dwt_ioctl+0x154>
 800d5fe:	2c00      	cmp	r4, #0
 800d600:	f000 8581 	beq.w	800e106 <dwt_ioctl+0x1f56>
 800d604:	7865      	ldrb	r5, [r4, #1]
 800d606:	7823      	ldrb	r3, [r4, #0]
 800d608:	b18b      	cbz	r3, 800d62e <dwt_ioctl+0x147e>
 800d60a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800d60c:	2200      	movs	r2, #0
 800d60e:	739a      	strb	r2, [r3, #14]
 800d610:	f04f 33ff 	mov.w	r3, #4294967295
 800d614:	2208      	movs	r2, #8
 800d616:	b1e5      	cbz	r5, 800d652 <dwt_ioctl+0x14a2>
 800d618:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d61c:	9200      	str	r2, [sp, #0]
 800d61e:	2200      	movs	r2, #0
 800d620:	2110      	movs	r1, #16
 800d622:	4630      	mov	r0, r6
 800d624:	f7fd fdac 	bl	800b180 <dwt_modify32bitoffsetreg>
 800d628:	2500      	movs	r5, #0
 800d62a:	f7fe be6b 	b.w	800c304 <dwt_ioctl+0x154>
 800d62e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800d630:	2201      	movs	r2, #1
 800d632:	739a      	strb	r2, [r3, #14]
 800d634:	2318      	movs	r3, #24
 800d636:	2200      	movs	r2, #0
 800d638:	495b      	ldr	r1, [pc, #364]	; (800d7a8 <dwt_ioctl+0x15f8>)
 800d63a:	f7fd f94f 	bl	800a8dc <dwt_write32bitoffsetreg>
 800d63e:	23e8      	movs	r3, #232	; 0xe8
 800d640:	2200      	movs	r2, #0
 800d642:	495a      	ldr	r1, [pc, #360]	; (800d7ac <dwt_ioctl+0x15fc>)
 800d644:	4630      	mov	r0, r6
 800d646:	f7fd f949 	bl	800a8dc <dwt_write32bitoffsetreg>
 800d64a:	f06f 0308 	mvn.w	r3, #8
 800d64e:	2200      	movs	r2, #0
 800d650:	e7e1      	b.n	800d616 <dwt_ioctl+0x1466>
 800d652:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d656:	e7e1      	b.n	800d61c <dwt_ioctl+0x146c>
 800d658:	2c00      	cmp	r4, #0
 800d65a:	f000 8557 	beq.w	800e10c <dwt_ioctl+0x1f5c>
 800d65e:	6823      	ldr	r3, [r4, #0]
 800d660:	2200      	movs	r2, #0
 800d662:	2130      	movs	r1, #48	; 0x30
 800d664:	f7fd f93a 	bl	800a8dc <dwt_write32bitoffsetreg>
 800d668:	2500      	movs	r5, #0
 800d66a:	f7fe be4b 	b.w	800c304 <dwt_ioctl+0x154>
 800d66e:	2c00      	cmp	r4, #0
 800d670:	f000 854f 	beq.w	800e112 <dwt_ioctl+0x1f62>
 800d674:	2200      	movs	r2, #0
 800d676:	4629      	mov	r1, r5
 800d678:	f7fc fcbb 	bl	8009ff2 <dwt_read32bitoffsetreg>
 800d67c:	6020      	str	r0, [r4, #0]
 800d67e:	2500      	movs	r5, #0
 800d680:	f7fe be40 	b.w	800c304 <dwt_ioctl+0x154>
 800d684:	4623      	mov	r3, r4
 800d686:	2200      	movs	r2, #0
 800d688:	4629      	mov	r1, r5
 800d68a:	f7fd f927 	bl	800a8dc <dwt_write32bitoffsetreg>
 800d68e:	2500      	movs	r5, #0
 800d690:	f7fe be38 	b.w	800c304 <dwt_ioctl+0x154>
 800d694:	2c00      	cmp	r4, #0
 800d696:	f000 853f 	beq.w	800e118 <dwt_ioctl+0x1f68>
 800d69a:	2203      	movs	r2, #3
 800d69c:	4944      	ldr	r1, [pc, #272]	; (800d7b0 <dwt_ioctl+0x1600>)
 800d69e:	f7fc fcd0 	bl	800a042 <dwt_read8bitoffsetreg>
 800d6a2:	f3c0 1002 	ubfx	r0, r0, #4, #3
 800d6a6:	7020      	strb	r0, [r4, #0]
 800d6a8:	2500      	movs	r5, #0
 800d6aa:	f7fe be2b 	b.w	800c304 <dwt_ioctl+0x154>
 800d6ae:	2c00      	cmp	r4, #0
 800d6b0:	f000 8535 	beq.w	800e11e <dwt_ioctl+0x1f6e>
 800d6b4:	6823      	ldr	r3, [r4, #0]
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	2144      	movs	r1, #68	; 0x44
 800d6ba:	f7fd f90f 	bl	800a8dc <dwt_write32bitoffsetreg>
 800d6be:	2500      	movs	r5, #0
 800d6c0:	f7fe be20 	b.w	800c304 <dwt_ioctl+0x154>
 800d6c4:	2c00      	cmp	r4, #0
 800d6c6:	f000 852d 	beq.w	800e124 <dwt_ioctl+0x1f74>
 800d6ca:	8823      	ldrh	r3, [r4, #0]
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	2148      	movs	r1, #72	; 0x48
 800d6d0:	f7fd f8a7 	bl	800a822 <dwt_write16bitoffsetreg>
 800d6d4:	2500      	movs	r5, #0
 800d6d6:	f7fe be15 	b.w	800c304 <dwt_ioctl+0x154>
 800d6da:	2c00      	cmp	r4, #0
 800d6dc:	f000 8525 	beq.w	800e12a <dwt_ioctl+0x1f7a>
 800d6e0:	2200      	movs	r2, #0
 800d6e2:	2144      	movs	r1, #68	; 0x44
 800d6e4:	f7fc fc85 	bl	8009ff2 <dwt_read32bitoffsetreg>
 800d6e8:	6020      	str	r0, [r4, #0]
 800d6ea:	2500      	movs	r5, #0
 800d6ec:	f7fe be0a 	b.w	800c304 <dwt_ioctl+0x154>
 800d6f0:	2c00      	cmp	r4, #0
 800d6f2:	f000 851d 	beq.w	800e130 <dwt_ioctl+0x1f80>
 800d6f6:	2200      	movs	r2, #0
 800d6f8:	2148      	movs	r1, #72	; 0x48
 800d6fa:	f7fc fc90 	bl	800a01e <dwt_read16bitoffsetreg>
 800d6fe:	6020      	str	r0, [r4, #0]
 800d700:	2500      	movs	r5, #0
 800d702:	f7fe bdff 	b.w	800c304 <dwt_ioctl+0x154>
 800d706:	2c00      	cmp	r4, #0
 800d708:	f000 8515 	beq.w	800e136 <dwt_ioctl+0x1f86>
 800d70c:	7823      	ldrb	r3, [r4, #0]
 800d70e:	2200      	movs	r2, #0
 800d710:	4928      	ldr	r1, [pc, #160]	; (800d7b4 <dwt_ioctl+0x1604>)
 800d712:	f7fd fa71 	bl	800abf8 <dwt_write8bitoffsetreg>
 800d716:	2500      	movs	r5, #0
 800d718:	f7fe bdf4 	b.w	800c304 <dwt_ioctl+0x154>
 800d71c:	2c00      	cmp	r4, #0
 800d71e:	f000 850d 	beq.w	800e13c <dwt_ioctl+0x1f8c>
 800d722:	2200      	movs	r2, #0
 800d724:	2144      	movs	r1, #68	; 0x44
 800d726:	f7fc fc8c 	bl	800a042 <dwt_read8bitoffsetreg>
 800d72a:	7020      	strb	r0, [r4, #0]
 800d72c:	2500      	movs	r5, #0
 800d72e:	f7fe bde9 	b.w	800c304 <dwt_ioctl+0x154>
 800d732:	2c00      	cmp	r4, #0
 800d734:	f000 8505 	beq.w	800e142 <dwt_ioctl+0x1f92>
 800d738:	f7fd fa6a 	bl	800ac10 <ull_getframelength>
 800d73c:	6020      	str	r0, [r4, #0]
 800d73e:	2500      	movs	r5, #0
 800d740:	f7fe bde0 	b.w	800c304 <dwt_ioctl+0x154>
 800d744:	2c00      	cmp	r4, #0
 800d746:	f000 84ff 	beq.w	800e148 <dwt_ioctl+0x1f98>
 800d74a:	2200      	movs	r2, #0
 800d74c:	491a      	ldr	r1, [pc, #104]	; (800d7b8 <dwt_ioctl+0x1608>)
 800d74e:	f7fc fc66 	bl	800a01e <dwt_read16bitoffsetreg>
 800d752:	8020      	strh	r0, [r4, #0]
 800d754:	2500      	movs	r5, #0
 800d756:	f7fe bdd5 	b.w	800c304 <dwt_ioctl+0x154>
 800d75a:	2c00      	cmp	r4, #0
 800d75c:	f000 84f7 	beq.w	800e14e <dwt_ioctl+0x1f9e>
 800d760:	2200      	movs	r2, #0
 800d762:	4916      	ldr	r1, [pc, #88]	; (800d7bc <dwt_ioctl+0x160c>)
 800d764:	f7fc fc45 	bl	8009ff2 <dwt_read32bitoffsetreg>
 800d768:	6020      	str	r0, [r4, #0]
 800d76a:	2500      	movs	r5, #0
 800d76c:	f7fe bdca 	b.w	800c304 <dwt_ioctl+0x154>
 800d770:	2c00      	cmp	r4, #0
 800d772:	f000 84ef 	beq.w	800e154 <dwt_ioctl+0x1fa4>
 800d776:	8823      	ldrh	r3, [r4, #0]
 800d778:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d77c:	9300      	str	r3, [sp, #0]
 800d77e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800d782:	2200      	movs	r2, #0
 800d784:	490d      	ldr	r1, [pc, #52]	; (800d7bc <dwt_ioctl+0x160c>)
 800d786:	f7fe f889 	bl	800b89c <dwt_modify16bitoffsetreg>
 800d78a:	2500      	movs	r5, #0
 800d78c:	f7fe bdba 	b.w	800c304 <dwt_ioctl+0x154>
 800d790:	000c0008 	.word	0x000c0008
 800d794:	0007001c 	.word	0x0007001c
 800d798:	00080010 	.word	0x00080010
 800d79c:	00080014 	.word	0x00080014
 800d7a0:	00070014 	.word	0x00070014
 800d7a4:	00050008 	.word	0x00050008
 800d7a8:	001f000c 	.word	0x001f000c
 800d7ac:	001f0010 	.word	0x001f0010
 800d7b0:	00030060 	.word	0x00030060
 800d7b4:	00010018 	.word	0x00010018
 800d7b8:	0005002c 	.word	0x0005002c
 800d7bc:	000e001c 	.word	0x000e001c
 800d7c0:	2c00      	cmp	r4, #0
 800d7c2:	f000 84ca 	beq.w	800e15a <dwt_ioctl+0x1faa>
 800d7c6:	88a7      	ldrh	r7, [r4, #4]
 800d7c8:	f8d4 b008 	ldr.w	fp, [r4, #8]
 800d7cc:	7b23      	ldrb	r3, [r4, #12]
 800d7ce:	9306      	str	r3, [sp, #24]
 800d7d0:	6922      	ldr	r2, [r4, #16]
 800d7d2:	9204      	str	r2, [sp, #16]
 800d7d4:	6962      	ldr	r2, [r4, #20]
 800d7d6:	9205      	str	r2, [sp, #20]
 800d7d8:	f00b 0203 	and.w	r2, fp, #3
 800d7dc:	f3cb 0085 	ubfx	r0, fp, #2, #6
 800d7e0:	2b05      	cmp	r3, #5
 800d7e2:	d145      	bne.n	800d870 <dwt_ioctl+0x16c0>
 800d7e4:	f5b7 7fb1 	cmp.w	r7, #354	; 0x162
 800d7e8:	bf28      	it	cs
 800d7ea:	f44f 77b1 	movcs.w	r7, #354	; 0x162
 800d7ee:	f8df 9338 	ldr.w	r9, [pc, #824]	; 800db28 <dwt_ioctl+0x1978>
 800d7f2:	2f04      	cmp	r7, #4
 800d7f4:	d805      	bhi.n	800d802 <dwt_ioctl+0x1652>
 800d7f6:	eb09 0300 	add.w	r3, r9, r0
 800d7fa:	785b      	ldrb	r3, [r3, #1]
 800d7fc:	3b05      	subs	r3, #5
 800d7fe:	429f      	cmp	r7, r3
 800d800:	db3e      	blt.n	800d880 <dwt_ioctl+0x16d0>
 800d802:	2a01      	cmp	r2, #1
 800d804:	d87c      	bhi.n	800d900 <dwt_ioctl+0x1750>
 800d806:	4bc4      	ldr	r3, [pc, #784]	; (800db18 <dwt_ioctl+0x1968>)
 800d808:	5c99      	ldrb	r1, [r3, r2]
 800d80a:	463e      	mov	r6, r7
 800d80c:	42b9      	cmp	r1, r7
 800d80e:	da79      	bge.n	800d904 <dwt_ioctl+0x1754>
 800d810:	1c55      	adds	r5, r2, #1
 800d812:	fa53 f585 	uxtab	r5, r3, r5
 800d816:	2300      	movs	r3, #0
 800d818:	440b      	add	r3, r1
 800d81a:	b29b      	uxth	r3, r3
 800d81c:	3201      	adds	r2, #1
 800d81e:	b2d2      	uxtb	r2, r2
 800d820:	2a02      	cmp	r2, #2
 800d822:	d005      	beq.n	800d830 <dwt_ioctl+0x1680>
 800d824:	f815 1b01 	ldrb.w	r1, [r5], #1
 800d828:	eba6 0c03 	sub.w	ip, r6, r3
 800d82c:	4561      	cmp	r1, ip
 800d82e:	dbf3      	blt.n	800d818 <dwt_ioctl+0x1668>
 800d830:	429f      	cmp	r7, r3
 800d832:	bf08      	it	eq
 800d834:	9003      	streq	r0, [sp, #12]
 800d836:	d069      	beq.n	800d90c <dwt_ioctl+0x175c>
 800d838:	f107 0805 	add.w	r8, r7, #5
 800d83c:	fa1f f888 	uxth.w	r8, r8
 800d840:	2580      	movs	r5, #128	; 0x80
 800d842:	2100      	movs	r1, #0
 800d844:	9107      	str	r1, [sp, #28]
 800d846:	9103      	str	r1, [sp, #12]
 800d848:	9108      	str	r1, [sp, #32]
 800d84a:	460e      	mov	r6, r1
 800d84c:	2105      	movs	r1, #5
 800d84e:	46be      	mov	lr, r7
 800d850:	428f      	cmp	r7, r1
 800d852:	bf38      	it	cc
 800d854:	468e      	movcc	lr, r1
 800d856:	f1ae 0e05 	sub.w	lr, lr, #5
 800d85a:	fa1f fe8e 	uxth.w	lr, lr
 800d85e:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 800db18 <dwt_ioctl+0x1968>
 800d862:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800d866:	468b      	mov	fp, r1
 800d868:	46bc      	mov	ip, r7
 800d86a:	4637      	mov	r7, r6
 800d86c:	f000 bcec 	b.w	800e248 <dwt_ioctl+0x2098>
 800d870:	f240 1331 	movw	r3, #305	; 0x131
 800d874:	429f      	cmp	r7, r3
 800d876:	bf28      	it	cs
 800d878:	461f      	movcs	r7, r3
 800d87a:	f8df 92b0 	ldr.w	r9, [pc, #688]	; 800db2c <dwt_ioctl+0x197c>
 800d87e:	e7b8      	b.n	800d7f2 <dwt_ioctl+0x1642>
 800d880:	2300      	movs	r3, #0
 800d882:	9a05      	ldr	r2, [sp, #20]
 800d884:	8013      	strh	r3, [r2, #0]
 800d886:	9a04      	ldr	r2, [sp, #16]
 800d888:	f8c2 b000 	str.w	fp, [r2]
 800d88c:	e04d      	b.n	800d92a <dwt_ioctl+0x177a>
 800d88e:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 800d892:	2300      	movs	r3, #0
 800d894:	9a05      	ldr	r2, [sp, #20]
 800d896:	8013      	strh	r3, [r2, #0]
 800d898:	9b04      	ldr	r3, [sp, #16]
 800d89a:	f8c3 b000 	str.w	fp, [r3]
 800d89e:	f04f 33ff 	mov.w	r3, #4294967295
 800d8a2:	e042      	b.n	800d92a <dwt_ioctl+0x177a>
 800d8a4:	fa1f fb81 	uxth.w	fp, r1
 800d8a8:	9207      	str	r2, [sp, #28]
 800d8aa:	9003      	str	r0, [sp, #12]
 800d8ac:	9308      	str	r3, [sp, #32]
 800d8ae:	2701      	movs	r7, #1
 800d8b0:	f000 bcdb 	b.w	800e26a <dwt_ioctl+0x20ba>
 800d8b4:	2f00      	cmp	r7, #0
 800d8b6:	f040 849b 	bne.w	800e1f0 <dwt_ioctl+0x2040>
 800d8ba:	4598      	cmp	r8, r3
 800d8bc:	f200 84b0 	bhi.w	800e220 <dwt_ioctl+0x2070>
 800d8c0:	2e00      	cmp	r6, #0
 800d8c2:	d039      	beq.n	800d938 <dwt_ioctl+0x1788>
 800d8c4:	283f      	cmp	r0, #63	; 0x3f
 800d8c6:	f000 84d5 	beq.w	800e274 <dwt_ioctl+0x20c4>
 800d8ca:	2700      	movs	r7, #0
 800d8cc:	f819 1000 	ldrb.w	r1, [r9, r0]
 800d8d0:	1a5b      	subs	r3, r3, r1
 800d8d2:	b29b      	uxth	r3, r3
 800d8d4:	1e46      	subs	r6, r0, #1
 800d8d6:	f006 003f 	and.w	r0, r6, #63	; 0x3f
 800d8da:	f016 063f 	ands.w	r6, r6, #63	; 0x3f
 800d8de:	bf18      	it	ne
 800d8e0:	2601      	movne	r6, #1
 800d8e2:	f000 bca9 	b.w	800e238 <dwt_ioctl+0x2088>
 800d8e6:	9906      	ldr	r1, [sp, #24]
 800d8e8:	2909      	cmp	r1, #9
 800d8ea:	f040 84c9 	bne.w	800e280 <dwt_ioctl+0x20d0>
 800d8ee:	213f      	movs	r1, #63	; 0x3f
 800d8f0:	9103      	str	r1, [sp, #12]
 800d8f2:	e00b      	b.n	800d90c <dwt_ioctl+0x175c>
 800d8f4:	b2b3      	uxth	r3, r6
 800d8f6:	3201      	adds	r2, #1
 800d8f8:	b2d2      	uxtb	r2, r2
 800d8fa:	213f      	movs	r1, #63	; 0x3f
 800d8fc:	9103      	str	r1, [sp, #12]
 800d8fe:	e005      	b.n	800d90c <dwt_ioctl+0x175c>
 800d900:	2300      	movs	r3, #0
 800d902:	e795      	b.n	800d830 <dwt_ioctl+0x1680>
 800d904:	2300      	movs	r3, #0
 800d906:	e793      	b.n	800d830 <dwt_ioctl+0x1680>
 800d908:	9003      	str	r0, [sp, #12]
 800d90a:	4663      	mov	r3, ip
 800d90c:	9905      	ldr	r1, [sp, #20]
 800d90e:	800b      	strh	r3, [r1, #0]
 800d910:	9b03      	ldr	r3, [sp, #12]
 800d912:	ea42 0283 	orr.w	r2, r2, r3, lsl #2
 800d916:	b2d2      	uxtb	r2, r2
 800d918:	0413      	lsls	r3, r2, #16
 800d91a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d91e:	4313      	orrs	r3, r2
 800d920:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d924:	9a04      	ldr	r2, [sp, #16]
 800d926:	6013      	str	r3, [r2, #0]
 800d928:	2300      	movs	r3, #0
 800d92a:	6023      	str	r3, [r4, #0]
 800d92c:	2500      	movs	r5, #0
 800d92e:	f7fe bce9 	b.w	800c304 <dwt_ioctl+0x154>
 800d932:	9a07      	ldr	r2, [sp, #28]
 800d934:	9b08      	ldr	r3, [sp, #32]
 800d936:	e7e9      	b.n	800d90c <dwt_ioctl+0x175c>
 800d938:	9003      	str	r0, [sp, #12]
 800d93a:	e7e7      	b.n	800d90c <dwt_ioctl+0x175c>
 800d93c:	9a07      	ldr	r2, [sp, #28]
 800d93e:	9b08      	ldr	r3, [sp, #32]
 800d940:	e7e4      	b.n	800d90c <dwt_ioctl+0x175c>
 800d942:	213f      	movs	r1, #63	; 0x3f
 800d944:	9103      	str	r1, [sp, #12]
 800d946:	e7e1      	b.n	800d90c <dwt_ioctl+0x175c>
 800d948:	2c00      	cmp	r4, #0
 800d94a:	f000 8409 	beq.w	800e160 <dwt_ioctl+0x1fb0>
 800d94e:	7827      	ldrb	r7, [r4, #0]
 800d950:	7864      	ldrb	r4, [r4, #1]
 800d952:	f7f2 fdc3 	bl	80004dc <decamutexon>
 800d956:	4605      	mov	r5, r0
 800d958:	2c02      	cmp	r4, #2
 800d95a:	d00e      	beq.n	800d97a <dwt_ioctl+0x17ca>
 800d95c:	2c04      	cmp	r4, #4
 800d95e:	d00c      	beq.n	800d97a <dwt_ioctl+0x17ca>
 800d960:	f004 04fd 	and.w	r4, r4, #253	; 0xfd
 800d964:	2c01      	cmp	r4, #1
 800d966:	d01a      	beq.n	800d99e <dwt_ioctl+0x17ee>
 800d968:	43fb      	mvns	r3, r7
 800d96a:	2200      	movs	r2, #0
 800d96c:	9200      	str	r2, [sp, #0]
 800d96e:	b2db      	uxtb	r3, r3
 800d970:	496a      	ldr	r1, [pc, #424]	; (800db1c <dwt_ioctl+0x196c>)
 800d972:	4630      	mov	r0, r6
 800d974:	f7fd fd76 	bl	800b464 <dwt_modify8bitoffsetreg>
 800d978:	e005      	b.n	800d986 <dwt_ioctl+0x17d6>
 800d97a:	463b      	mov	r3, r7
 800d97c:	2200      	movs	r2, #0
 800d97e:	4967      	ldr	r1, [pc, #412]	; (800db1c <dwt_ioctl+0x196c>)
 800d980:	4630      	mov	r0, r6
 800d982:	f7fd f939 	bl	800abf8 <dwt_write8bitoffsetreg>
 800d986:	463b      	mov	r3, r7
 800d988:	2200      	movs	r2, #0
 800d98a:	4965      	ldr	r1, [pc, #404]	; (800db20 <dwt_ioctl+0x1970>)
 800d98c:	4630      	mov	r0, r6
 800d98e:	f7fc ffa5 	bl	800a8dc <dwt_write32bitoffsetreg>
 800d992:	4628      	mov	r0, r5
 800d994:	f7f2 fdb3 	bl	80004fe <decamutexoff>
 800d998:	2500      	movs	r5, #0
 800d99a:	f7fe bcb3 	b.w	800c304 <dwt_ioctl+0x154>
 800d99e:	9700      	str	r7, [sp, #0]
 800d9a0:	23ff      	movs	r3, #255	; 0xff
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	495d      	ldr	r1, [pc, #372]	; (800db1c <dwt_ioctl+0x196c>)
 800d9a6:	4630      	mov	r0, r6
 800d9a8:	f7fd fd5c 	bl	800b464 <dwt_modify8bitoffsetreg>
 800d9ac:	e7eb      	b.n	800d986 <dwt_ioctl+0x17d6>
 800d9ae:	2302      	movs	r3, #2
 800d9b0:	9301      	str	r3, [sp, #4]
 800d9b2:	2500      	movs	r5, #0
 800d9b4:	9500      	str	r5, [sp, #0]
 800d9b6:	462b      	mov	r3, r5
 800d9b8:	462a      	mov	r2, r5
 800d9ba:	211a      	movs	r1, #26
 800d9bc:	f7fc fa91 	bl	8009ee2 <dwt_xfer3xxx>
 800d9c0:	f7fe bca0 	b.w	800c304 <dwt_ioctl+0x154>
 800d9c4:	f7fe fbe0 	bl	800c188 <ull_softreset_fcmd>
 800d9c8:	2500      	movs	r5, #0
 800d9ca:	f7fe bc9b 	b.w	800c304 <dwt_ioctl+0x154>
 800d9ce:	f7fe fbc7 	bl	800c160 <ull_softreset_no_sema_fcmd>
 800d9d2:	2500      	movs	r5, #0
 800d9d4:	f7fe bc96 	b.w	800c304 <dwt_ioctl+0x154>
 800d9d8:	2302      	movs	r3, #2
 800d9da:	9301      	str	r3, [sp, #4]
 800d9dc:	2500      	movs	r5, #0
 800d9de:	9500      	str	r5, [sp, #0]
 800d9e0:	462b      	mov	r3, r5
 800d9e2:	462a      	mov	r2, r5
 800d9e4:	2114      	movs	r1, #20
 800d9e6:	f7fc fa7c 	bl	8009ee2 <dwt_xfer3xxx>
 800d9ea:	f7fe bc8b 	b.w	800c304 <dwt_ioctl+0x154>
 800d9ee:	2402      	movs	r4, #2
 800d9f0:	9401      	str	r4, [sp, #4]
 800d9f2:	2500      	movs	r5, #0
 800d9f4:	9500      	str	r5, [sp, #0]
 800d9f6:	462b      	mov	r3, r5
 800d9f8:	462a      	mov	r2, r5
 800d9fa:	2115      	movs	r1, #21
 800d9fc:	f7fc fa71 	bl	8009ee2 <dwt_xfer3xxx>
 800da00:	9401      	str	r4, [sp, #4]
 800da02:	9500      	str	r5, [sp, #0]
 800da04:	462b      	mov	r3, r5
 800da06:	462a      	mov	r2, r5
 800da08:	2115      	movs	r1, #21
 800da0a:	4630      	mov	r0, r6
 800da0c:	f7fc fa69 	bl	8009ee2 <dwt_xfer3xxx>
 800da10:	f7fe bc78 	b.w	800c304 <dwt_ioctl+0x154>
 800da14:	2302      	movs	r3, #2
 800da16:	9301      	str	r3, [sp, #4]
 800da18:	2500      	movs	r5, #0
 800da1a:	9500      	str	r5, [sp, #0]
 800da1c:	462b      	mov	r3, r5
 800da1e:	462a      	mov	r2, r5
 800da20:	2116      	movs	r1, #22
 800da22:	f7fc fa5e 	bl	8009ee2 <dwt_xfer3xxx>
 800da26:	f7fe bc6d 	b.w	800c304 <dwt_ioctl+0x154>
 800da2a:	2c00      	cmp	r4, #0
 800da2c:	f000 839b 	beq.w	800e166 <dwt_ioctl+0x1fb6>
 800da30:	b93a      	cbnz	r2, 800da42 <dwt_ioctl+0x1892>
 800da32:	2200      	movs	r2, #0
 800da34:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 800da38:	f7fc fb03 	bl	800a042 <dwt_read8bitoffsetreg>
 800da3c:	7020      	strb	r0, [r4, #0]
 800da3e:	f7fe bc61 	b.w	800c304 <dwt_ioctl+0x154>
 800da42:	2201      	movs	r2, #1
 800da44:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 800da48:	f7fc fafb 	bl	800a042 <dwt_read8bitoffsetreg>
 800da4c:	7020      	strb	r0, [r4, #0]
 800da4e:	2500      	movs	r5, #0
 800da50:	f7fe bc58 	b.w	800c304 <dwt_ioctl+0x154>
 800da54:	2c00      	cmp	r4, #0
 800da56:	f000 8389 	beq.w	800e16c <dwt_ioctl+0x1fbc>
 800da5a:	7824      	ldrb	r4, [r4, #0]
 800da5c:	2200      	movs	r2, #0
 800da5e:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 800da62:	f7fc faee 	bl	800a042 <dwt_read8bitoffsetreg>
 800da66:	f000 039f 	and.w	r3, r0, #159	; 0x9f
 800da6a:	4323      	orrs	r3, r4
 800da6c:	2200      	movs	r2, #0
 800da6e:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 800da72:	4630      	mov	r0, r6
 800da74:	f7fd f8c0 	bl	800abf8 <dwt_write8bitoffsetreg>
 800da78:	2500      	movs	r5, #0
 800da7a:	f7fe bc43 	b.w	800c304 <dwt_ioctl+0x154>
 800da7e:	2c00      	cmp	r4, #0
 800da80:	f000 8377 	beq.w	800e172 <dwt_ioctl+0x1fc2>
 800da84:	7824      	ldrb	r4, [r4, #0]
 800da86:	f012 05ff 	ands.w	r5, r2, #255	; 0xff
 800da8a:	d01e      	beq.n	800daca <dwt_ioctl+0x191a>
 800da8c:	2d01      	cmp	r5, #1
 800da8e:	f040 8373 	bne.w	800e178 <dwt_ioctl+0x1fc8>
 800da92:	2502      	movs	r5, #2
 800da94:	2201      	movs	r2, #1
 800da96:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 800da9a:	4630      	mov	r0, r6
 800da9c:	f7fc fad1 	bl	800a042 <dwt_read8bitoffsetreg>
 800daa0:	b9ac      	cbnz	r4, 800dace <dwt_ioctl+0x191e>
 800daa2:	ea20 0305 	bic.w	r3, r0, r5
 800daa6:	b2db      	uxtb	r3, r3
 800daa8:	2201      	movs	r2, #1
 800daaa:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 800daae:	4630      	mov	r0, r6
 800dab0:	f7fd f8a2 	bl	800abf8 <dwt_write8bitoffsetreg>
 800dab4:	2200      	movs	r2, #0
 800dab6:	2110      	movs	r1, #16
 800dab8:	4630      	mov	r0, r6
 800daba:	f7fc fa9a 	bl	8009ff2 <dwt_read32bitoffsetreg>
 800dabe:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 800dac2:	d00b      	beq.n	800dadc <dwt_ioctl+0x192c>
 800dac4:	2500      	movs	r5, #0
 800dac6:	f7fe bc1d 	b.w	800c304 <dwt_ioctl+0x154>
 800daca:	2504      	movs	r5, #4
 800dacc:	e7e2      	b.n	800da94 <dwt_ioctl+0x18e4>
 800dace:	2c01      	cmp	r4, #1
 800dad0:	f040 8356 	bne.w	800e180 <dwt_ioctl+0x1fd0>
 800dad4:	ea40 0305 	orr.w	r3, r0, r5
 800dad8:	b2db      	uxtb	r3, r3
 800dada:	e7e5      	b.n	800daa8 <dwt_ioctl+0x18f8>
 800dadc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800dae0:	9300      	str	r3, [sp, #0]
 800dae2:	f04f 33ff 	mov.w	r3, #4294967295
 800dae6:	2200      	movs	r2, #0
 800dae8:	2110      	movs	r1, #16
 800daea:	4630      	mov	r0, r6
 800daec:	f7fd fb48 	bl	800b180 <dwt_modify32bitoffsetreg>
 800daf0:	2500      	movs	r5, #0
 800daf2:	f7fe bc07 	b.w	800c304 <dwt_ioctl+0x154>
 800daf6:	2c00      	cmp	r4, #0
 800daf8:	f000 8346 	beq.w	800e188 <dwt_ioctl+0x1fd8>
 800dafc:	7823      	ldrb	r3, [r4, #0]
 800dafe:	035b      	lsls	r3, r3, #13
 800db00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800db04:	9300      	str	r3, [sp, #0]
 800db06:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 800db0a:	2200      	movs	r2, #0
 800db0c:	4905      	ldr	r1, [pc, #20]	; (800db24 <dwt_ioctl+0x1974>)
 800db0e:	f7fd fec5 	bl	800b89c <dwt_modify16bitoffsetreg>
 800db12:	2500      	movs	r5, #0
 800db14:	f7fe bbf6 	b.w	800c304 <dwt_ioctl+0x154>
 800db18:	08013474 	.word	0x08013474
 800db1c:	0001001c 	.word	0x0001001c
 800db20:	00010018 	.word	0x00010018
 800db24:	000e000c 	.word	0x000e000c
 800db28:	080133f4 	.word	0x080133f4
 800db2c:	08013434 	.word	0x08013434
 800db30:	2c00      	cmp	r4, #0
 800db32:	f000 832c 	beq.w	800e18e <dwt_ioctl+0x1fde>
 800db36:	7825      	ldrb	r5, [r4, #0]
 800db38:	6862      	ldr	r2, [r4, #4]
 800db3a:	2a01      	cmp	r2, #1
 800db3c:	bf15      	itete	ne
 800db3e:	f46f 3360 	mvnne.w	r3, #229376	; 0x38000
 800db42:	f46f 43e0 	mvneq.w	r3, #28672	; 0x7000
 800db46:	27df      	movne	r7, #223	; 0xdf
 800db48:	27ef      	moveq	r7, #239	; 0xef
 800db4a:	bf14      	ite	ne
 800db4c:	f04f 0820 	movne.w	r8, #32
 800db50:	f04f 0810 	moveq.w	r8, #16
 800db54:	2400      	movs	r4, #0
 800db56:	9400      	str	r4, [sp, #0]
 800db58:	4622      	mov	r2, r4
 800db5a:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800db5e:	f7fd fb0f 	bl	800b180 <dwt_modify32bitoffsetreg>
 800db62:	9400      	str	r4, [sp, #0]
 800db64:	463b      	mov	r3, r7
 800db66:	4622      	mov	r2, r4
 800db68:	49be      	ldr	r1, [pc, #760]	; (800de64 <dwt_ioctl+0x1cb4>)
 800db6a:	4630      	mov	r0, r6
 800db6c:	f7fd fc7a 	bl	800b464 <dwt_modify8bitoffsetreg>
 800db70:	2d01      	cmp	r5, #1
 800db72:	d003      	beq.n	800db7c <dwt_ioctl+0x19cc>
 800db74:	b165      	cbz	r5, 800db90 <dwt_ioctl+0x19e0>
 800db76:	2500      	movs	r5, #0
 800db78:	f7fe bbc4 	b.w	800c304 <dwt_ioctl+0x154>
 800db7c:	4625      	mov	r5, r4
 800db7e:	9400      	str	r4, [sp, #0]
 800db80:	463b      	mov	r3, r7
 800db82:	4622      	mov	r2, r4
 800db84:	49b8      	ldr	r1, [pc, #736]	; (800de68 <dwt_ioctl+0x1cb8>)
 800db86:	4630      	mov	r0, r6
 800db88:	f7fd fc6c 	bl	800b464 <dwt_modify8bitoffsetreg>
 800db8c:	f7fe bbba 	b.w	800c304 <dwt_ioctl+0x154>
 800db90:	f8cd 8000 	str.w	r8, [sp]
 800db94:	23ff      	movs	r3, #255	; 0xff
 800db96:	2200      	movs	r2, #0
 800db98:	49b3      	ldr	r1, [pc, #716]	; (800de68 <dwt_ioctl+0x1cb8>)
 800db9a:	4630      	mov	r0, r6
 800db9c:	f7fd fc62 	bl	800b464 <dwt_modify8bitoffsetreg>
 800dba0:	f7fe bbb0 	b.w	800c304 <dwt_ioctl+0x154>
 800dba4:	2c00      	cmp	r4, #0
 800dba6:	f000 82f5 	beq.w	800e194 <dwt_ioctl+0x1fe4>
 800dbaa:	7822      	ldrb	r2, [r4, #0]
 800dbac:	f012 0f01 	tst.w	r2, #1
 800dbb0:	d02d      	beq.n	800dc0e <dwt_ioctl+0x1a5e>
 800dbb2:	0157      	lsls	r7, r2, #5
 800dbb4:	f007 0740 	and.w	r7, r7, #64	; 0x40
 800dbb8:	2440      	movs	r4, #64	; 0x40
 800dbba:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800dbbe:	f012 0f04 	tst.w	r2, #4
 800dbc2:	d028      	beq.n	800dc16 <dwt_ioctl+0x1a66>
 800dbc4:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
 800dbc8:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800dbcc:	0112      	lsls	r2, r2, #4
 800dbce:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800dbd2:	4317      	orrs	r7, r2
 800dbd4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800dbd8:	9200      	str	r2, [sp, #0]
 800dbda:	43db      	mvns	r3, r3
 800dbdc:	2200      	movs	r2, #0
 800dbde:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800dbe2:	4630      	mov	r0, r6
 800dbe4:	f7fd facc 	bl	800b180 <dwt_modify32bitoffsetreg>
 800dbe8:	43e4      	mvns	r4, r4
 800dbea:	b2a4      	uxth	r4, r4
 800dbec:	2500      	movs	r5, #0
 800dbee:	9500      	str	r5, [sp, #0]
 800dbf0:	4623      	mov	r3, r4
 800dbf2:	462a      	mov	r2, r5
 800dbf4:	499b      	ldr	r1, [pc, #620]	; (800de64 <dwt_ioctl+0x1cb4>)
 800dbf6:	4630      	mov	r0, r6
 800dbf8:	f7fd fe50 	bl	800b89c <dwt_modify16bitoffsetreg>
 800dbfc:	9700      	str	r7, [sp, #0]
 800dbfe:	4623      	mov	r3, r4
 800dc00:	462a      	mov	r2, r5
 800dc02:	4999      	ldr	r1, [pc, #612]	; (800de68 <dwt_ioctl+0x1cb8>)
 800dc04:	4630      	mov	r0, r6
 800dc06:	f7fd fe49 	bl	800b89c <dwt_modify16bitoffsetreg>
 800dc0a:	f7fe bb7b 	b.w	800c304 <dwt_ioctl+0x154>
 800dc0e:	2700      	movs	r7, #0
 800dc10:	463c      	mov	r4, r7
 800dc12:	463b      	mov	r3, r7
 800dc14:	e7d3      	b.n	800dbbe <dwt_ioctl+0x1a0e>
 800dc16:	2200      	movs	r2, #0
 800dc18:	e7de      	b.n	800dbd8 <dwt_ioctl+0x1a28>
 800dc1a:	2308      	movs	r3, #8
 800dc1c:	9300      	str	r3, [sp, #0]
 800dc1e:	23ff      	movs	r3, #255	; 0xff
 800dc20:	2201      	movs	r2, #1
 800dc22:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800dc26:	f7fd fc1d 	bl	800b464 <dwt_modify8bitoffsetreg>
 800dc2a:	4c90      	ldr	r4, [pc, #576]	; (800de6c <dwt_ioctl+0x1cbc>)
 800dc2c:	2302      	movs	r3, #2
 800dc2e:	9300      	str	r3, [sp, #0]
 800dc30:	23ff      	movs	r3, #255	; 0xff
 800dc32:	2203      	movs	r2, #3
 800dc34:	4621      	mov	r1, r4
 800dc36:	4630      	mov	r0, r6
 800dc38:	f7fd fc14 	bl	800b464 <dwt_modify8bitoffsetreg>
 800dc3c:	2500      	movs	r5, #0
 800dc3e:	9500      	str	r5, [sp, #0]
 800dc40:	23f7      	movs	r3, #247	; 0xf7
 800dc42:	2201      	movs	r2, #1
 800dc44:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800dc48:	4630      	mov	r0, r6
 800dc4a:	f7fd fc0b 	bl	800b464 <dwt_modify8bitoffsetreg>
 800dc4e:	9500      	str	r5, [sp, #0]
 800dc50:	23fd      	movs	r3, #253	; 0xfd
 800dc52:	2203      	movs	r2, #3
 800dc54:	4621      	mov	r1, r4
 800dc56:	4630      	mov	r0, r6
 800dc58:	f7fd fc04 	bl	800b464 <dwt_modify8bitoffsetreg>
 800dc5c:	f7fe bb52 	b.w	800c304 <dwt_ioctl+0x154>
 800dc60:	2c00      	cmp	r4, #0
 800dc62:	f000 829a 	beq.w	800e19a <dwt_ioctl+0x1fea>
 800dc66:	8863      	ldrh	r3, [r4, #2]
 800dc68:	00db      	lsls	r3, r3, #3
 800dc6a:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800dc6e:	7822      	ldrb	r2, [r4, #0]
 800dc70:	b10a      	cbz	r2, 800dc76 <dwt_ioctl+0x1ac6>
 800dc72:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800dc76:	9300      	str	r3, [sp, #0]
 800dc78:	f24f 0307 	movw	r3, #61447	; 0xf007
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800dc82:	4630      	mov	r0, r6
 800dc84:	f7fd fe0a 	bl	800b89c <dwt_modify16bitoffsetreg>
 800dc88:	2500      	movs	r5, #0
 800dc8a:	f7fe bb3b 	b.w	800c304 <dwt_ioctl+0x154>
 800dc8e:	2c00      	cmp	r4, #0
 800dc90:	f000 8286 	beq.w	800e1a0 <dwt_ioctl+0x1ff0>
 800dc94:	b2e3      	uxtb	r3, r4
 800dc96:	1c9a      	adds	r2, r3, #2
 800dc98:	2301      	movs	r3, #1
 800dc9a:	4093      	lsls	r3, r2
 800dc9c:	3b01      	subs	r3, #1
 800dc9e:	b2db      	uxtb	r3, r3
 800dca0:	2200      	movs	r2, #0
 800dca2:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800dca6:	f7fc ffa7 	bl	800abf8 <dwt_write8bitoffsetreg>
 800dcaa:	2500      	movs	r5, #0
 800dcac:	f7fe bb2a 	b.w	800c304 <dwt_ioctl+0x154>
 800dcb0:	2c00      	cmp	r4, #0
 800dcb2:	f000 8278 	beq.w	800e1a6 <dwt_ioctl+0x1ff6>
 800dcb6:	7ae3      	ldrb	r3, [r4, #11]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	f000 8277 	beq.w	800e1ac <dwt_ioctl+0x1ffc>
 800dcbe:	7b63      	ldrb	r3, [r4, #13]
 800dcc0:	2b01      	cmp	r3, #1
 800dcc2:	d921      	bls.n	800dd08 <dwt_ioctl+0x1b58>
 800dcc4:	7b22      	ldrb	r2, [r4, #12]
 800dcc6:	4b6a      	ldr	r3, [pc, #424]	; (800de70 <dwt_ioctl+0x1cc0>)
 800dcc8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800dccc:	0112      	lsls	r2, r2, #4
 800dcce:	0ad3      	lsrs	r3, r2, #11
 800dcd0:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800dcd4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800dcd8:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800dcdc:	bf28      	it	cs
 800dcde:	3301      	addcs	r3, #1
 800dce0:	b29b      	uxth	r3, r3
 800dce2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dce6:	9300      	str	r3, [sp, #0]
 800dce8:	f64f 7380 	movw	r3, #65408	; 0xff80
 800dcec:	2202      	movs	r2, #2
 800dcee:	4961      	ldr	r1, [pc, #388]	; (800de74 <dwt_ioctl+0x1cc4>)
 800dcf0:	4630      	mov	r0, r6
 800dcf2:	f7fd fdd3 	bl	800b89c <dwt_modify16bitoffsetreg>
 800dcf6:	2394      	movs	r3, #148	; 0x94
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	495f      	ldr	r1, [pc, #380]	; (800de78 <dwt_ioctl+0x1cc8>)
 800dcfc:	4630      	mov	r0, r6
 800dcfe:	f7fc ff7b 	bl	800abf8 <dwt_write8bitoffsetreg>
 800dd02:	2500      	movs	r5, #0
 800dd04:	f7fe bafe 	b.w	800c304 <dwt_ioctl+0x154>
 800dd08:	7b22      	ldrb	r2, [r4, #12]
 800dd0a:	4b59      	ldr	r3, [pc, #356]	; (800de70 <dwt_ioctl+0x1cc0>)
 800dd0c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800dd10:	f44f 6235 	mov.w	r2, #2896	; 0xb50
 800dd14:	fb02 f203 	mul.w	r2, r2, r3
 800dd18:	0c93      	lsrs	r3, r2, #18
 800dd1a:	f3c2 12ca 	ubfx	r2, r2, #7, #11
 800dd1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800dd22:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800dd26:	bf28      	it	cs
 800dd28:	3301      	addcs	r3, #1
 800dd2a:	b29b      	uxth	r3, r3
 800dd2c:	e7d9      	b.n	800dce2 <dwt_ioctl+0x1b32>
 800dd2e:	2c00      	cmp	r4, #0
 800dd30:	f000 823f 	beq.w	800e1b2 <dwt_ioctl+0x2002>
 800dd34:	2200      	movs	r2, #0
 800dd36:	4951      	ldr	r1, [pc, #324]	; (800de7c <dwt_ioctl+0x1ccc>)
 800dd38:	f7fc f95b 	bl	8009ff2 <dwt_read32bitoffsetreg>
 800dd3c:	6020      	str	r0, [r4, #0]
 800dd3e:	2500      	movs	r5, #0
 800dd40:	f7fe bae0 	b.w	800c304 <dwt_ioctl+0x154>
 800dd44:	2c00      	cmp	r4, #0
 800dd46:	f000 8237 	beq.w	800e1b8 <dwt_ioctl+0x2008>
 800dd4a:	2200      	movs	r2, #0
 800dd4c:	494c      	ldr	r1, [pc, #304]	; (800de80 <dwt_ioctl+0x1cd0>)
 800dd4e:	f7fc f950 	bl	8009ff2 <dwt_read32bitoffsetreg>
 800dd52:	6020      	str	r0, [r4, #0]
 800dd54:	2500      	movs	r5, #0
 800dd56:	f7fe bad5 	b.w	800c304 <dwt_ioctl+0x154>
 800dd5a:	2c00      	cmp	r4, #0
 800dd5c:	f000 822f 	beq.w	800e1be <dwt_ioctl+0x200e>
 800dd60:	f44f 13a8 	mov.w	r3, #1376256	; 0x150000
 800dd64:	6023      	str	r3, [r4, #0]
 800dd66:	2500      	movs	r5, #0
 800dd68:	f7fe bacc 	b.w	800c304 <dwt_ioctl+0x154>
 800dd6c:	2c00      	cmp	r4, #0
 800dd6e:	f000 8229 	beq.w	800e1c4 <dwt_ioctl+0x2014>
 800dd72:	2500      	movs	r5, #0
 800dd74:	950b      	str	r5, [sp, #44]	; 0x2c
 800dd76:	af10      	add	r7, sp, #64	; 0x40
 800dd78:	2319      	movs	r3, #25
 800dd7a:	f847 3d10 	str.w	r3, [r7, #-16]!
 800dd7e:	9700      	str	r7, [sp, #0]
 800dd80:	2304      	movs	r3, #4
 800dd82:	462a      	mov	r2, r5
 800dd84:	493f      	ldr	r1, [pc, #252]	; (800de84 <dwt_ioctl+0x1cd4>)
 800dd86:	f7fc fd41 	bl	800a80c <dwt_writetodevice>
 800dd8a:	f641 7348 	movw	r3, #8008	; 0x1f48
 800dd8e:	930c      	str	r3, [sp, #48]	; 0x30
 800dd90:	9700      	str	r7, [sp, #0]
 800dd92:	2304      	movs	r3, #4
 800dd94:	462a      	mov	r2, r5
 800dd96:	493c      	ldr	r1, [pc, #240]	; (800de88 <dwt_ioctl+0x1cd8>)
 800dd98:	4630      	mov	r0, r6
 800dd9a:	f7fc fd37 	bl	800a80c <dwt_writetodevice>
 800dd9e:	ab0b      	add	r3, sp, #44	; 0x2c
 800dda0:	9300      	str	r3, [sp, #0]
 800dda2:	2304      	movs	r3, #4
 800dda4:	462a      	mov	r2, r5
 800dda6:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800ddaa:	4630      	mov	r0, r6
 800ddac:	f7fc f917 	bl	8009fde <dwt_readfromdevice>
 800ddb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ddb2:	6023      	str	r3, [r4, #0]
 800ddb4:	f7fe baa6 	b.w	800c304 <dwt_ioctl+0x154>
 800ddb8:	2c00      	cmp	r4, #0
 800ddba:	f000 8206 	beq.w	800e1ca <dwt_ioctl+0x201a>
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	4932      	ldr	r1, [pc, #200]	; (800de8c <dwt_ioctl+0x1cdc>)
 800ddc2:	f7fc f916 	bl	8009ff2 <dwt_read32bitoffsetreg>
 800ddc6:	b280      	uxth	r0, r0
 800ddc8:	6020      	str	r0, [r4, #0]
 800ddca:	2200      	movs	r2, #0
 800ddcc:	4930      	ldr	r1, [pc, #192]	; (800de90 <dwt_ioctl+0x1ce0>)
 800ddce:	4630      	mov	r0, r6
 800ddd0:	f7fc f90f 	bl	8009ff2 <dwt_read32bitoffsetreg>
 800ddd4:	0d43      	lsrs	r3, r0, #21
 800ddd6:	019b      	lsls	r3, r3, #6
 800ddd8:	b29b      	uxth	r3, r3
 800ddda:	6063      	str	r3, [r4, #4]
 800dddc:	2500      	movs	r5, #0
 800ddde:	f7fe ba91 	b.w	800c304 <dwt_ioctl+0x154>
 800dde2:	2c00      	cmp	r4, #0
 800dde4:	f000 81f4 	beq.w	800e1d0 <dwt_ioctl+0x2020>
 800dde8:	7d63      	ldrb	r3, [r4, #21]
 800ddea:	b133      	cbz	r3, 800ddfa <dwt_ioctl+0x1c4a>
 800ddec:	2b01      	cmp	r3, #1
 800ddee:	d05b      	beq.n	800dea8 <dwt_ioctl+0x1cf8>
 800ddf0:	2b02      	cmp	r3, #2
 800ddf2:	f000 8082 	beq.w	800defa <dwt_ioctl+0x1d4a>
 800ddf6:	23ff      	movs	r3, #255	; 0xff
 800ddf8:	e02f      	b.n	800de5a <dwt_ioctl+0x1caa>
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	4925      	ldr	r1, [pc, #148]	; (800de94 <dwt_ioctl+0x1ce4>)
 800ddfe:	f7fc f8f8 	bl	8009ff2 <dwt_read32bitoffsetreg>
 800de02:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800de06:	6020      	str	r0, [r4, #0]
 800de08:	2200      	movs	r2, #0
 800de0a:	4923      	ldr	r1, [pc, #140]	; (800de98 <dwt_ioctl+0x1ce8>)
 800de0c:	4630      	mov	r0, r6
 800de0e:	f7fc f8f0 	bl	8009ff2 <dwt_read32bitoffsetreg>
 800de12:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800de16:	6060      	str	r0, [r4, #4]
 800de18:	2200      	movs	r2, #0
 800de1a:	4920      	ldr	r1, [pc, #128]	; (800de9c <dwt_ioctl+0x1cec>)
 800de1c:	4630      	mov	r0, r6
 800de1e:	f7fc f8e8 	bl	8009ff2 <dwt_read32bitoffsetreg>
 800de22:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800de26:	60a0      	str	r0, [r4, #8]
 800de28:	2200      	movs	r2, #0
 800de2a:	491d      	ldr	r1, [pc, #116]	; (800dea0 <dwt_ioctl+0x1cf0>)
 800de2c:	4630      	mov	r0, r6
 800de2e:	f7fc f8e0 	bl	8009ff2 <dwt_read32bitoffsetreg>
 800de32:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800de36:	60e0      	str	r0, [r4, #12]
 800de38:	2200      	movs	r2, #0
 800de3a:	491a      	ldr	r1, [pc, #104]	; (800dea4 <dwt_ioctl+0x1cf4>)
 800de3c:	4630      	mov	r0, r6
 800de3e:	f7fc f8d8 	bl	8009ff2 <dwt_read32bitoffsetreg>
 800de42:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800de46:	6120      	str	r0, [r4, #16]
 800de48:	2203      	movs	r2, #3
 800de4a:	490c      	ldr	r1, [pc, #48]	; (800de7c <dwt_ioctl+0x1ccc>)
 800de4c:	4630      	mov	r0, r6
 800de4e:	f7fc f8f8 	bl	800a042 <dwt_read8bitoffsetreg>
 800de52:	f3c0 1002 	ubfx	r0, r0, #4, #3
 800de56:	7520      	strb	r0, [r4, #20]
 800de58:	2300      	movs	r3, #0
 800de5a:	75a3      	strb	r3, [r4, #22]
 800de5c:	2500      	movs	r5, #0
 800de5e:	f7fe ba51 	b.w	800c304 <dwt_ioctl+0x154>
 800de62:	bf00      	nop
 800de64:	00050008 	.word	0x00050008
 800de68:	0005000c 	.word	0x0005000c
 800de6c:	00110008 	.word	0x00110008
 800de70:	08013480 	.word	0x08013480
 800de74:	000e0014 	.word	0x000e0014
 800de78:	000e0018 	.word	0x000e0018
 800de7c:	00030060 	.word	0x00030060
 800de80:	000f004c 	.word	0x000f004c
 800de84:	001f0004 	.word	0x001f0004
 800de88:	001f0008 	.word	0x001f0008
 800de8c:	000c0048 	.word	0x000c0048
 800de90:	000c0028 	.word	0x000c0028
 800de94:	000c0058 	.word	0x000c0058
 800de98:	000c0030 	.word	0x000c0030
 800de9c:	000c0034 	.word	0x000c0034
 800dea0:	000c0038 	.word	0x000c0038
 800dea4:	000c002c 	.word	0x000c002c
 800dea8:	2200      	movs	r2, #0
 800deaa:	49d4      	ldr	r1, [pc, #848]	; (800e1fc <dwt_ioctl+0x204c>)
 800deac:	f7fc f8a1 	bl	8009ff2 <dwt_read32bitoffsetreg>
 800deb0:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800deb4:	6020      	str	r0, [r4, #0]
 800deb6:	2200      	movs	r2, #0
 800deb8:	49d1      	ldr	r1, [pc, #836]	; (800e200 <dwt_ioctl+0x2050>)
 800deba:	4630      	mov	r0, r6
 800debc:	f7fc f899 	bl	8009ff2 <dwt_read32bitoffsetreg>
 800dec0:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800dec4:	6060      	str	r0, [r4, #4]
 800dec6:	2200      	movs	r2, #0
 800dec8:	49ce      	ldr	r1, [pc, #824]	; (800e204 <dwt_ioctl+0x2054>)
 800deca:	4630      	mov	r0, r6
 800decc:	f7fc f891 	bl	8009ff2 <dwt_read32bitoffsetreg>
 800ded0:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800ded4:	60a0      	str	r0, [r4, #8]
 800ded6:	2200      	movs	r2, #0
 800ded8:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 800dedc:	4630      	mov	r0, r6
 800dede:	f7fc f888 	bl	8009ff2 <dwt_read32bitoffsetreg>
 800dee2:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800dee6:	60e0      	str	r0, [r4, #12]
 800dee8:	2200      	movs	r2, #0
 800deea:	49c7      	ldr	r1, [pc, #796]	; (800e208 <dwt_ioctl+0x2058>)
 800deec:	4630      	mov	r0, r6
 800deee:	f7fc f880 	bl	8009ff2 <dwt_read32bitoffsetreg>
 800def2:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800def6:	6120      	str	r0, [r4, #16]
 800def8:	e7a6      	b.n	800de48 <dwt_ioctl+0x1c98>
 800defa:	2200      	movs	r2, #0
 800defc:	49c3      	ldr	r1, [pc, #780]	; (800e20c <dwt_ioctl+0x205c>)
 800defe:	f7fc f878 	bl	8009ff2 <dwt_read32bitoffsetreg>
 800df02:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800df06:	6020      	str	r0, [r4, #0]
 800df08:	2200      	movs	r2, #0
 800df0a:	49c1      	ldr	r1, [pc, #772]	; (800e210 <dwt_ioctl+0x2060>)
 800df0c:	4630      	mov	r0, r6
 800df0e:	f7fc f870 	bl	8009ff2 <dwt_read32bitoffsetreg>
 800df12:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800df16:	6060      	str	r0, [r4, #4]
 800df18:	2200      	movs	r2, #0
 800df1a:	49be      	ldr	r1, [pc, #760]	; (800e214 <dwt_ioctl+0x2064>)
 800df1c:	4630      	mov	r0, r6
 800df1e:	f7fc f868 	bl	8009ff2 <dwt_read32bitoffsetreg>
 800df22:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800df26:	60a0      	str	r0, [r4, #8]
 800df28:	2200      	movs	r2, #0
 800df2a:	49bb      	ldr	r1, [pc, #748]	; (800e218 <dwt_ioctl+0x2068>)
 800df2c:	4630      	mov	r0, r6
 800df2e:	f7fc f860 	bl	8009ff2 <dwt_read32bitoffsetreg>
 800df32:	f3c0 0015 	ubfx	r0, r0, #0, #22
 800df36:	60e0      	str	r0, [r4, #12]
 800df38:	2200      	movs	r2, #0
 800df3a:	49b8      	ldr	r1, [pc, #736]	; (800e21c <dwt_ioctl+0x206c>)
 800df3c:	4630      	mov	r0, r6
 800df3e:	f7fc f858 	bl	8009ff2 <dwt_read32bitoffsetreg>
 800df42:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800df46:	6120      	str	r0, [r4, #16]
 800df48:	e77e      	b.n	800de48 <dwt_ioctl+0x1c98>
 800df4a:	2500      	movs	r5, #0
 800df4c:	f7fe b9da 	b.w	800c304 <dwt_ioctl+0x154>
 800df50:	2500      	movs	r5, #0
 800df52:	f7fe b9d7 	b.w	800c304 <dwt_ioctl+0x154>
 800df56:	2500      	movs	r5, #0
 800df58:	f7fe b9d4 	b.w	800c304 <dwt_ioctl+0x154>
 800df5c:	2500      	movs	r5, #0
 800df5e:	f7fe b9d1 	b.w	800c304 <dwt_ioctl+0x154>
 800df62:	2500      	movs	r5, #0
 800df64:	f7fe b9ce 	b.w	800c304 <dwt_ioctl+0x154>
 800df68:	2500      	movs	r5, #0
 800df6a:	f7fe b9cb 	b.w	800c304 <dwt_ioctl+0x154>
 800df6e:	2500      	movs	r5, #0
 800df70:	f7fe b9c8 	b.w	800c304 <dwt_ioctl+0x154>
 800df74:	2500      	movs	r5, #0
 800df76:	f7fe b9c5 	b.w	800c304 <dwt_ioctl+0x154>
 800df7a:	2500      	movs	r5, #0
 800df7c:	f7fe b9c2 	b.w	800c304 <dwt_ioctl+0x154>
 800df80:	2500      	movs	r5, #0
 800df82:	f7fe b9bf 	b.w	800c304 <dwt_ioctl+0x154>
 800df86:	2500      	movs	r5, #0
 800df88:	f7fe b9bc 	b.w	800c304 <dwt_ioctl+0x154>
 800df8c:	2500      	movs	r5, #0
 800df8e:	f7fe b9b9 	b.w	800c304 <dwt_ioctl+0x154>
 800df92:	2500      	movs	r5, #0
 800df94:	f7fe b9b6 	b.w	800c304 <dwt_ioctl+0x154>
 800df98:	2500      	movs	r5, #0
 800df9a:	f7fe b9b3 	b.w	800c304 <dwt_ioctl+0x154>
 800df9e:	2500      	movs	r5, #0
 800dfa0:	f7fe b9b0 	b.w	800c304 <dwt_ioctl+0x154>
 800dfa4:	2500      	movs	r5, #0
 800dfa6:	f7fe b9ad 	b.w	800c304 <dwt_ioctl+0x154>
 800dfaa:	2500      	movs	r5, #0
 800dfac:	f7fe b9aa 	b.w	800c304 <dwt_ioctl+0x154>
 800dfb0:	2500      	movs	r5, #0
 800dfb2:	f7fe b9a7 	b.w	800c304 <dwt_ioctl+0x154>
 800dfb6:	2500      	movs	r5, #0
 800dfb8:	f7fe b9a4 	b.w	800c304 <dwt_ioctl+0x154>
 800dfbc:	2500      	movs	r5, #0
 800dfbe:	f7fe b9a1 	b.w	800c304 <dwt_ioctl+0x154>
 800dfc2:	2500      	movs	r5, #0
 800dfc4:	f7fe b99e 	b.w	800c304 <dwt_ioctl+0x154>
 800dfc8:	2500      	movs	r5, #0
 800dfca:	f7fe b99b 	b.w	800c304 <dwt_ioctl+0x154>
 800dfce:	2500      	movs	r5, #0
 800dfd0:	f7fe b998 	b.w	800c304 <dwt_ioctl+0x154>
 800dfd4:	2500      	movs	r5, #0
 800dfd6:	f7fe b995 	b.w	800c304 <dwt_ioctl+0x154>
 800dfda:	2500      	movs	r5, #0
 800dfdc:	f7fe b992 	b.w	800c304 <dwt_ioctl+0x154>
 800dfe0:	2500      	movs	r5, #0
 800dfe2:	f7fe b98f 	b.w	800c304 <dwt_ioctl+0x154>
 800dfe6:	2500      	movs	r5, #0
 800dfe8:	f7fe b98c 	b.w	800c304 <dwt_ioctl+0x154>
 800dfec:	2500      	movs	r5, #0
 800dfee:	f7fe b989 	b.w	800c304 <dwt_ioctl+0x154>
 800dff2:	2500      	movs	r5, #0
 800dff4:	f7fe b986 	b.w	800c304 <dwt_ioctl+0x154>
 800dff8:	2500      	movs	r5, #0
 800dffa:	f7fe b983 	b.w	800c304 <dwt_ioctl+0x154>
 800dffe:	2500      	movs	r5, #0
 800e000:	f7fe b980 	b.w	800c304 <dwt_ioctl+0x154>
 800e004:	2500      	movs	r5, #0
 800e006:	f7fe b97d 	b.w	800c304 <dwt_ioctl+0x154>
 800e00a:	2500      	movs	r5, #0
 800e00c:	f7fe b97a 	b.w	800c304 <dwt_ioctl+0x154>
 800e010:	2500      	movs	r5, #0
 800e012:	f7fe b977 	b.w	800c304 <dwt_ioctl+0x154>
 800e016:	2500      	movs	r5, #0
 800e018:	f7fe b974 	b.w	800c304 <dwt_ioctl+0x154>
 800e01c:	2500      	movs	r5, #0
 800e01e:	f7fe b971 	b.w	800c304 <dwt_ioctl+0x154>
 800e022:	2500      	movs	r5, #0
 800e024:	f7fe b96e 	b.w	800c304 <dwt_ioctl+0x154>
 800e028:	2500      	movs	r5, #0
 800e02a:	f7fe b96b 	b.w	800c304 <dwt_ioctl+0x154>
 800e02e:	2500      	movs	r5, #0
 800e030:	f7fe b968 	b.w	800c304 <dwt_ioctl+0x154>
 800e034:	2500      	movs	r5, #0
 800e036:	f7fe b965 	b.w	800c304 <dwt_ioctl+0x154>
 800e03a:	2500      	movs	r5, #0
 800e03c:	f7fe b962 	b.w	800c304 <dwt_ioctl+0x154>
 800e040:	2500      	movs	r5, #0
 800e042:	f7fe b95f 	b.w	800c304 <dwt_ioctl+0x154>
 800e046:	2500      	movs	r5, #0
 800e048:	f7fe b95c 	b.w	800c304 <dwt_ioctl+0x154>
 800e04c:	2500      	movs	r5, #0
 800e04e:	f7fe b959 	b.w	800c304 <dwt_ioctl+0x154>
 800e052:	2500      	movs	r5, #0
 800e054:	f7fe b956 	b.w	800c304 <dwt_ioctl+0x154>
 800e058:	2500      	movs	r5, #0
 800e05a:	f7fe b953 	b.w	800c304 <dwt_ioctl+0x154>
 800e05e:	2500      	movs	r5, #0
 800e060:	f7fe b950 	b.w	800c304 <dwt_ioctl+0x154>
 800e064:	2500      	movs	r5, #0
 800e066:	f7fe b94d 	b.w	800c304 <dwt_ioctl+0x154>
 800e06a:	2500      	movs	r5, #0
 800e06c:	f7fe b94a 	b.w	800c304 <dwt_ioctl+0x154>
 800e070:	2500      	movs	r5, #0
 800e072:	f7fe b947 	b.w	800c304 <dwt_ioctl+0x154>
 800e076:	2500      	movs	r5, #0
 800e078:	f7fe b944 	b.w	800c304 <dwt_ioctl+0x154>
 800e07c:	2500      	movs	r5, #0
 800e07e:	f7fe b941 	b.w	800c304 <dwt_ioctl+0x154>
 800e082:	2500      	movs	r5, #0
 800e084:	f7fe b93e 	b.w	800c304 <dwt_ioctl+0x154>
 800e088:	2500      	movs	r5, #0
 800e08a:	f7fe b93b 	b.w	800c304 <dwt_ioctl+0x154>
 800e08e:	2500      	movs	r5, #0
 800e090:	f7fe b938 	b.w	800c304 <dwt_ioctl+0x154>
 800e094:	2500      	movs	r5, #0
 800e096:	f7fe b935 	b.w	800c304 <dwt_ioctl+0x154>
 800e09a:	2500      	movs	r5, #0
 800e09c:	f7fe b932 	b.w	800c304 <dwt_ioctl+0x154>
 800e0a0:	2500      	movs	r5, #0
 800e0a2:	f7fe b92f 	b.w	800c304 <dwt_ioctl+0x154>
 800e0a6:	2500      	movs	r5, #0
 800e0a8:	f7fe b92c 	b.w	800c304 <dwt_ioctl+0x154>
 800e0ac:	2500      	movs	r5, #0
 800e0ae:	f7fe b929 	b.w	800c304 <dwt_ioctl+0x154>
 800e0b2:	2500      	movs	r5, #0
 800e0b4:	f7fe b926 	b.w	800c304 <dwt_ioctl+0x154>
 800e0b8:	2500      	movs	r5, #0
 800e0ba:	f7fe b923 	b.w	800c304 <dwt_ioctl+0x154>
 800e0be:	2500      	movs	r5, #0
 800e0c0:	f7fe b920 	b.w	800c304 <dwt_ioctl+0x154>
 800e0c4:	2500      	movs	r5, #0
 800e0c6:	f7fe b91d 	b.w	800c304 <dwt_ioctl+0x154>
 800e0ca:	2500      	movs	r5, #0
 800e0cc:	f7fe b91a 	b.w	800c304 <dwt_ioctl+0x154>
 800e0d0:	2500      	movs	r5, #0
 800e0d2:	f7fe b917 	b.w	800c304 <dwt_ioctl+0x154>
 800e0d6:	2500      	movs	r5, #0
 800e0d8:	f7fe b914 	b.w	800c304 <dwt_ioctl+0x154>
 800e0dc:	2500      	movs	r5, #0
 800e0de:	f7fe b911 	b.w	800c304 <dwt_ioctl+0x154>
 800e0e2:	2500      	movs	r5, #0
 800e0e4:	f7fe b90e 	b.w	800c304 <dwt_ioctl+0x154>
 800e0e8:	2500      	movs	r5, #0
 800e0ea:	f7fe b90b 	b.w	800c304 <dwt_ioctl+0x154>
 800e0ee:	2500      	movs	r5, #0
 800e0f0:	f7fe b908 	b.w	800c304 <dwt_ioctl+0x154>
 800e0f4:	2500      	movs	r5, #0
 800e0f6:	f7fe b905 	b.w	800c304 <dwt_ioctl+0x154>
 800e0fa:	2500      	movs	r5, #0
 800e0fc:	f7fe b902 	b.w	800c304 <dwt_ioctl+0x154>
 800e100:	2500      	movs	r5, #0
 800e102:	f7fe b8ff 	b.w	800c304 <dwt_ioctl+0x154>
 800e106:	2500      	movs	r5, #0
 800e108:	f7fe b8fc 	b.w	800c304 <dwt_ioctl+0x154>
 800e10c:	2500      	movs	r5, #0
 800e10e:	f7fe b8f9 	b.w	800c304 <dwt_ioctl+0x154>
 800e112:	2500      	movs	r5, #0
 800e114:	f7fe b8f6 	b.w	800c304 <dwt_ioctl+0x154>
 800e118:	2500      	movs	r5, #0
 800e11a:	f7fe b8f3 	b.w	800c304 <dwt_ioctl+0x154>
 800e11e:	2500      	movs	r5, #0
 800e120:	f7fe b8f0 	b.w	800c304 <dwt_ioctl+0x154>
 800e124:	2500      	movs	r5, #0
 800e126:	f7fe b8ed 	b.w	800c304 <dwt_ioctl+0x154>
 800e12a:	2500      	movs	r5, #0
 800e12c:	f7fe b8ea 	b.w	800c304 <dwt_ioctl+0x154>
 800e130:	2500      	movs	r5, #0
 800e132:	f7fe b8e7 	b.w	800c304 <dwt_ioctl+0x154>
 800e136:	2500      	movs	r5, #0
 800e138:	f7fe b8e4 	b.w	800c304 <dwt_ioctl+0x154>
 800e13c:	2500      	movs	r5, #0
 800e13e:	f7fe b8e1 	b.w	800c304 <dwt_ioctl+0x154>
 800e142:	2500      	movs	r5, #0
 800e144:	f7fe b8de 	b.w	800c304 <dwt_ioctl+0x154>
 800e148:	2500      	movs	r5, #0
 800e14a:	f7fe b8db 	b.w	800c304 <dwt_ioctl+0x154>
 800e14e:	2500      	movs	r5, #0
 800e150:	f7fe b8d8 	b.w	800c304 <dwt_ioctl+0x154>
 800e154:	2500      	movs	r5, #0
 800e156:	f7fe b8d5 	b.w	800c304 <dwt_ioctl+0x154>
 800e15a:	2500      	movs	r5, #0
 800e15c:	f7fe b8d2 	b.w	800c304 <dwt_ioctl+0x154>
 800e160:	2500      	movs	r5, #0
 800e162:	f7fe b8cf 	b.w	800c304 <dwt_ioctl+0x154>
 800e166:	2500      	movs	r5, #0
 800e168:	f7fe b8cc 	b.w	800c304 <dwt_ioctl+0x154>
 800e16c:	2500      	movs	r5, #0
 800e16e:	f7fe b8c9 	b.w	800c304 <dwt_ioctl+0x154>
 800e172:	2500      	movs	r5, #0
 800e174:	f7fe b8c6 	b.w	800c304 <dwt_ioctl+0x154>
 800e178:	f04f 35ff 	mov.w	r5, #4294967295
 800e17c:	f7fe b8c2 	b.w	800c304 <dwt_ioctl+0x154>
 800e180:	f04f 35ff 	mov.w	r5, #4294967295
 800e184:	f7fe b8be 	b.w	800c304 <dwt_ioctl+0x154>
 800e188:	2500      	movs	r5, #0
 800e18a:	f7fe b8bb 	b.w	800c304 <dwt_ioctl+0x154>
 800e18e:	2500      	movs	r5, #0
 800e190:	f7fe b8b8 	b.w	800c304 <dwt_ioctl+0x154>
 800e194:	2500      	movs	r5, #0
 800e196:	f7fe b8b5 	b.w	800c304 <dwt_ioctl+0x154>
 800e19a:	2500      	movs	r5, #0
 800e19c:	f7fe b8b2 	b.w	800c304 <dwt_ioctl+0x154>
 800e1a0:	2500      	movs	r5, #0
 800e1a2:	f7fe b8af 	b.w	800c304 <dwt_ioctl+0x154>
 800e1a6:	2500      	movs	r5, #0
 800e1a8:	f7fe b8ac 	b.w	800c304 <dwt_ioctl+0x154>
 800e1ac:	2500      	movs	r5, #0
 800e1ae:	f7fe b8a9 	b.w	800c304 <dwt_ioctl+0x154>
 800e1b2:	2500      	movs	r5, #0
 800e1b4:	f7fe b8a6 	b.w	800c304 <dwt_ioctl+0x154>
 800e1b8:	2500      	movs	r5, #0
 800e1ba:	f7fe b8a3 	b.w	800c304 <dwt_ioctl+0x154>
 800e1be:	2500      	movs	r5, #0
 800e1c0:	f7fe b8a0 	b.w	800c304 <dwt_ioctl+0x154>
 800e1c4:	2500      	movs	r5, #0
 800e1c6:	f7fe b89d 	b.w	800c304 <dwt_ioctl+0x154>
 800e1ca:	2500      	movs	r5, #0
 800e1cc:	f7fe b89a 	b.w	800c304 <dwt_ioctl+0x154>
 800e1d0:	2500      	movs	r5, #0
 800e1d2:	f7fe b897 	b.w	800c304 <dwt_ioctl+0x154>
 800e1d6:	f899 3011 	ldrb.w	r3, [r9, #17]
 800e1da:	1e5a      	subs	r2, r3, #1
 800e1dc:	b2d2      	uxtb	r2, r2
 800e1de:	2a01      	cmp	r2, #1
 800e1e0:	f67e aeec 	bls.w	800cfbc <dwt_ioctl+0xe0c>
 800e1e4:	2202      	movs	r2, #2
 800e1e6:	f7fe be93 	b.w	800cf10 <dwt_ioctl+0xd60>
 800e1ea:	2f00      	cmp	r7, #0
 800e1ec:	f43f ab68 	beq.w	800d8c0 <dwt_ioctl+0x1710>
 800e1f0:	f819 1000 	ldrb.w	r1, [r9, r0]
 800e1f4:	1a5b      	subs	r3, r3, r1
 800e1f6:	b29b      	uxth	r3, r3
 800e1f8:	f7ff bb88 	b.w	800d90c <dwt_ioctl+0x175c>
 800e1fc:	000d0020 	.word	0x000d0020
 800e200:	000c0064 	.word	0x000c0064
 800e204:	000c0068 	.word	0x000c0068
 800e208:	000c0060 	.word	0x000c0060
 800e20c:	000d0068 	.word	0x000d0068
 800e210:	000d0040 	.word	0x000d0040
 800e214:	000d0044 	.word	0x000d0044
 800e218:	000d0048 	.word	0x000d0048
 800e21c:	000d003c 	.word	0x000d003c
 800e220:	283f      	cmp	r0, #63	; 0x3f
 800e222:	d027      	beq.n	800e274 <dwt_ioctl+0x20c4>
 800e224:	2e00      	cmp	r6, #0
 800e226:	f47f ab51 	bne.w	800d8cc <dwt_ioctl+0x171c>
 800e22a:	3001      	adds	r0, #1
 800e22c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800e230:	f819 1000 	ldrb.w	r1, [r9, r0]
 800e234:	440b      	add	r3, r1
 800e236:	b29b      	uxth	r3, r3
 800e238:	459c      	cmp	ip, r3
 800e23a:	f43f ab65 	beq.w	800d908 <dwt_ioctl+0x1758>
 800e23e:	3d01      	subs	r5, #1
 800e240:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 800e244:	f43f ab23 	beq.w	800d88e <dwt_ioctl+0x16de>
 800e248:	459e      	cmp	lr, r3
 800e24a:	f4bf ab33 	bcs.w	800d8b4 <dwt_ioctl+0x1704>
 800e24e:	4598      	cmp	r8, r3
 800e250:	d9cb      	bls.n	800e1ea <dwt_ioctl+0x203a>
 800e252:	ebac 0103 	sub.w	r1, ip, r3
 800e256:	b209      	sxth	r1, r1
 800e258:	2900      	cmp	r1, #0
 800e25a:	bfb8      	it	lt
 800e25c:	4249      	neglt	r1, r1
 800e25e:	4559      	cmp	r1, fp
 800e260:	f77f ab20 	ble.w	800d8a4 <dwt_ioctl+0x16f4>
 800e264:	2f00      	cmp	r7, #0
 800e266:	f47f ab64 	bne.w	800d932 <dwt_ioctl+0x1782>
 800e26a:	283f      	cmp	r0, #63	; 0x3f
 800e26c:	d1da      	bne.n	800e224 <dwt_ioctl+0x2074>
 800e26e:	2f00      	cmp	r7, #0
 800e270:	f47f ab64 	bne.w	800d93c <dwt_ioctl+0x178c>
 800e274:	2a03      	cmp	r2, #3
 800e276:	f43f ab64 	beq.w	800d942 <dwt_ioctl+0x1792>
 800e27a:	2a02      	cmp	r2, #2
 800e27c:	f43f ab33 	beq.w	800d8e6 <dwt_ioctl+0x1736>
 800e280:	f81a 1002 	ldrb.w	r1, [sl, r2]
 800e284:	185e      	adds	r6, r3, r1
 800e286:	4566      	cmp	r6, ip
 800e288:	f77f ab34 	ble.w	800d8f4 <dwt_ioctl+0x1744>
 800e28c:	440b      	add	r3, r1
 800e28e:	b29b      	uxth	r3, r3
 800e290:	3201      	adds	r2, #1
 800e292:	b2d2      	uxtb	r2, r2
 800e294:	2700      	movs	r7, #0
 800e296:	f7ff bb19 	b.w	800d8cc <dwt_ioctl+0x171c>
 800e29a:	bf00      	nop

0800e29c <_init>:
 800e29c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e29e:	b085      	sub	sp, #20
 800e2a0:	4604      	mov	r4, r0
 800e2a2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e2a4:	6819      	ldr	r1, [r3, #0]
 800e2a6:	f7fd fe57 	bl	800bf58 <ull_initialise>
 800e2aa:	4606      	mov	r6, r0
 800e2ac:	6823      	ldr	r3, [r4, #0]
 800e2ae:	691b      	ldr	r3, [r3, #16]
 800e2b0:	4798      	blx	r3
 800e2b2:	ab03      	add	r3, sp, #12
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	4611      	mov	r1, r2
 800e2b8:	4620      	mov	r0, r4
 800e2ba:	f7fd ff79 	bl	800c1b0 <dwt_ioctl>
 800e2be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e2c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2c2:	6819      	ldr	r1, [r3, #0]
 800e2c4:	4620      	mov	r0, r4
 800e2c6:	f7fd fc07 	bl	800bad8 <ull_configure>
 800e2ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e2cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2ce:	6859      	ldr	r1, [r3, #4]
 800e2d0:	4620      	mov	r0, r4
 800e2d2:	f7fd f953 	bl	800b57c <ull_configuretxrf>
 800e2d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e2d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2da:	89db      	ldrh	r3, [r3, #14]
 800e2dc:	2200      	movs	r2, #0
 800e2de:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800e2e2:	4620      	mov	r0, r4
 800e2e4:	f7fc fa9d 	bl	800a822 <dwt_write16bitoffsetreg>
 800e2e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e2ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2ec:	899b      	ldrh	r3, [r3, #12]
 800e2ee:	2200      	movs	r2, #0
 800e2f0:	217c      	movs	r1, #124	; 0x7c
 800e2f2:	4620      	mov	r0, r4
 800e2f4:	f7fc fa95 	bl	800a822 <dwt_write16bitoffsetreg>
 800e2f8:	2100      	movs	r1, #0
 800e2fa:	4620      	mov	r0, r4
 800e2fc:	f7fc fb29 	bl	800a952 <ull_setrxaftertxdelay>
 800e300:	2500      	movs	r5, #0
 800e302:	9500      	str	r5, [sp, #0]
 800e304:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 800e308:	462a      	mov	r2, r5
 800e30a:	2110      	movs	r1, #16
 800e30c:	4620      	mov	r0, r4
 800e30e:	f7fd fac5 	bl	800b89c <dwt_modify16bitoffsetreg>
 800e312:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e316:	895a      	ldrh	r2, [r3, #10]
 800e318:	8919      	ldrh	r1, [r3, #8]
 800e31a:	4620      	mov	r0, r4
 800e31c:	f7fd f9bc 	bl	800b698 <ull_configureframefilter>
 800e320:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e324:	8a1b      	ldrh	r3, [r3, #16]
 800e326:	2202      	movs	r2, #2
 800e328:	210c      	movs	r1, #12
 800e32a:	4620      	mov	r0, r4
 800e32c:	f7fc fa79 	bl	800a822 <dwt_write16bitoffsetreg>
 800e330:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e334:	8a5b      	ldrh	r3, [r3, #18]
 800e336:	462a      	mov	r2, r5
 800e338:	210c      	movs	r1, #12
 800e33a:	4620      	mov	r0, r4
 800e33c:	f7fc fa71 	bl	800a822 <dwt_write16bitoffsetreg>
 800e340:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e342:	7a19      	ldrb	r1, [r3, #8]
 800e344:	4620      	mov	r0, r4
 800e346:	f7fd fac3 	bl	800b8d0 <ull_setleds>
 800e34a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e34c:	68d9      	ldr	r1, [r3, #12]
 800e34e:	4620      	mov	r0, r4
 800e350:	f7fc fb13 	bl	800a97a <ull_setlnapamode>
 800e354:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e356:	7e0b      	ldrb	r3, [r1, #24]
 800e358:	694a      	ldr	r2, [r1, #20]
 800e35a:	6909      	ldr	r1, [r1, #16]
 800e35c:	4620      	mov	r0, r4
 800e35e:	f7fd fa21 	bl	800b7a4 <ull_setinterrupt>
 800e362:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e364:	7f9a      	ldrb	r2, [r3, #30]
 800e366:	8b99      	ldrh	r1, [r3, #28]
 800e368:	4620      	mov	r0, r4
 800e36a:	f7fc fd19 	bl	800ada0 <ull_configuresleep>
 800e36e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800e370:	7b53      	ldrb	r3, [r2, #13]
 800e372:	2b2e      	cmp	r3, #46	; 0x2e
 800e374:	d005      	beq.n	800e382 <_init+0xe6>
 800e376:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e378:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e37c:	f033 033f 	bics.w	r3, r3, #63	; 0x3f
 800e380:	d00a      	beq.n	800e398 <_init+0xfc>
 800e382:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e384:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e388:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e38c:	7353      	strb	r3, [r2, #13]
 800e38e:	2200      	movs	r2, #0
 800e390:	492a      	ldr	r1, [pc, #168]	; (800e43c <_init+0x1a0>)
 800e392:	4620      	mov	r0, r4
 800e394:	f7fc fc30 	bl	800abf8 <dwt_write8bitoffsetreg>
 800e398:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e39a:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 800e39e:	4620      	mov	r0, r4
 800e3a0:	f7fd f874 	bl	800b48c <ull_configciadiag>
 800e3a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e3a6:	6a19      	ldr	r1, [r3, #32]
 800e3a8:	4620      	mov	r0, r4
 800e3aa:	f7fc fb07 	bl	800a9bc <ull_configurestskey>
 800e3ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e3b0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800e3b2:	4620      	mov	r0, r4
 800e3b4:	f7fc fb26 	bl	800aa04 <ull_configurestsiv>
 800e3b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e3ba:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800e3be:	bb9b      	cbnz	r3, 800e428 <_init+0x18c>
 800e3c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e3c2:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 800e3c6:	4620      	mov	r0, r4
 800e3c8:	f7fc fc8e 	bl	800ace8 <ull_configeventcounters>
 800e3cc:	f994 504c 	ldrsb.w	r5, [r4, #76]	; 0x4c
 800e3d0:	2d00      	cmp	r5, #0
 800e3d2:	db26      	blt.n	800e422 <_init+0x186>
 800e3d4:	2301      	movs	r3, #1
 800e3d6:	fa03 f505 	lsl.w	r5, r3, r5
 800e3da:	b2af      	uxth	r7, r5
 800e3dc:	4a18      	ldr	r2, [pc, #96]	; (800e440 <_init+0x1a4>)
 800e3de:	4639      	mov	r1, r7
 800e3e0:	4620      	mov	r0, r4
 800e3e2:	f7fc ffef 	bl	800b3c4 <ull_setgpiomode>
 800e3e6:	f10d 030a 	add.w	r3, sp, #10
 800e3ea:	9300      	str	r3, [sp, #0]
 800e3ec:	2302      	movs	r3, #2
 800e3ee:	2200      	movs	r2, #0
 800e3f0:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800e3f4:	4620      	mov	r0, r4
 800e3f6:	f7fb fdf2 	bl	8009fde <dwt_readfromdevice>
 800e3fa:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800e3fe:	ea23 0305 	bic.w	r3, r3, r5
 800e402:	f8ad 300a 	strh.w	r3, [sp, #10]
 800e406:	2200      	movs	r2, #0
 800e408:	490e      	ldr	r1, [pc, #56]	; (800e444 <_init+0x1a8>)
 800e40a:	4620      	mov	r0, r4
 800e40c:	f7fc fa09 	bl	800a822 <dwt_write16bitoffsetreg>
 800e410:	f994 204d 	ldrsb.w	r2, [r4, #77]	; 0x4d
 800e414:	fab2 f282 	clz	r2, r2
 800e418:	0952      	lsrs	r2, r2, #5
 800e41a:	4639      	mov	r1, r7
 800e41c:	4620      	mov	r0, r4
 800e41e:	f7fd fad5 	bl	800b9cc <ull_setgpiovalue>
 800e422:	4630      	mov	r0, r6
 800e424:	b005      	add	sp, #20
 800e426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e428:	2301      	movs	r3, #1
 800e42a:	9300      	str	r3, [sp, #0]
 800e42c:	23ff      	movs	r3, #255	; 0xff
 800e42e:	2200      	movs	r2, #0
 800e430:	4905      	ldr	r1, [pc, #20]	; (800e448 <_init+0x1ac>)
 800e432:	4620      	mov	r0, r4
 800e434:	f7fd f816 	bl	800b464 <dwt_modify8bitoffsetreg>
 800e438:	e7c2      	b.n	800e3c0 <_init+0x124>
 800e43a:	bf00      	nop
 800e43c:	00090014 	.word	0x00090014
 800e440:	01200492 	.word	0x01200492
 800e444:	00050008 	.word	0x00050008
 800e448:	00020004 	.word	0x00020004

0800e44c <ull_wakeup_ic>:
 800e44c:	b508      	push	{r3, lr}
 800e44e:	6843      	ldr	r3, [r0, #4]
 800e450:	4798      	blx	r3
 800e452:	bd08      	pop	{r3, pc}

0800e454 <get_sts_mnth>:
 800e454:	fb01 f100 	mul.w	r1, r1, r0
 800e458:	2a03      	cmp	r2, #3
 800e45a:	d00a      	beq.n	800e472 <get_sts_mnth+0x1e>
 800e45c:	0ac8      	lsrs	r0, r1, #11
 800e45e:	f3c1 010a 	ubfx	r1, r1, #0, #11
 800e462:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e466:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800e46a:	bf28      	it	cs
 800e46c:	3001      	addcs	r0, #1
 800e46e:	b280      	uxth	r0, r0
 800e470:	4770      	bx	lr
 800e472:	20b5      	movs	r0, #181	; 0xb5
 800e474:	fb00 f101 	mul.w	r1, r0, r1
 800e478:	09c9      	lsrs	r1, r1, #7
 800e47a:	e7ef      	b.n	800e45c <get_sts_mnth+0x8>

0800e47c <dwt_dbg_fn>:
 800e47c:	2998      	cmp	r1, #152	; 0x98
 800e47e:	4802      	ldr	r0, [pc, #8]	; (800e488 <dwt_dbg_fn+0xc>)
 800e480:	bf18      	it	ne
 800e482:	2000      	movne	r0, #0
 800e484:	4770      	bx	lr
 800e486:	bf00      	nop
 800e488:	08013588 	.word	0x08013588

0800e48c <_deinit>:
 800e48c:	4770      	bx	lr

0800e48e <dwt_xfer3xxx>:
 800e48e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e492:	b084      	sub	sp, #16
 800e494:	4605      	mov	r5, r0
 800e496:	460f      	mov	r7, r1
 800e498:	461e      	mov	r6, r3
 800e49a:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800e49e:	1e59      	subs	r1, r3, #1
 800e4a0:	b289      	uxth	r1, r1
 800e4a2:	2901      	cmp	r1, #1
 800e4a4:	d91c      	bls.n	800e4e0 <dwt_xfer3xxx+0x52>
 800e4a6:	19d0      	adds	r0, r2, r7
 800e4a8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800e4ac:	443a      	add	r2, r7
 800e4ae:	f3c2 4104 	ubfx	r1, r2, #16, #5
 800e4b2:	0082      	lsls	r2, r0, #2
 800e4b4:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 800e4b8:	ea43 0102 	orr.w	r1, r3, r2
 800e4bc:	0a09      	lsrs	r1, r1, #8
 800e4be:	f88d 100c 	strb.w	r1, [sp, #12]
 800e4c2:	b920      	cbnz	r0, 800e4ce <dwt_xfer3xxx+0x40>
 800e4c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e4c8:	d018      	beq.n	800e4fc <dwt_xfer3xxx+0x6e>
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d037      	beq.n	800e53e <dwt_xfer3xxx+0xb0>
 800e4ce:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800e4d2:	f88d 100c 	strb.w	r1, [sp, #12]
 800e4d6:	431a      	orrs	r2, r3
 800e4d8:	f88d 200d 	strb.w	r2, [sp, #13]
 800e4dc:	2402      	movs	r4, #2
 800e4de:	e005      	b.n	800e4ec <dwt_xfer3xxx+0x5e>
 800e4e0:	007a      	lsls	r2, r7, #1
 800e4e2:	f062 027e 	orn	r2, r2, #126	; 0x7e
 800e4e6:	f88d 200c 	strb.w	r2, [sp, #12]
 800e4ea:	2401      	movs	r4, #1
 800e4ec:	2b02      	cmp	r3, #2
 800e4ee:	d006      	beq.n	800e4fe <dwt_xfer3xxx+0x70>
 800e4f0:	d326      	bcc.n	800e540 <dwt_xfer3xxx+0xb2>
 800e4f2:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800e4f6:	2b03      	cmp	r3, #3
 800e4f8:	d901      	bls.n	800e4fe <dwt_xfer3xxx+0x70>
 800e4fa:	e7fe      	b.n	800e4fa <dwt_xfer3xxx+0x6c>
 800e4fc:	2401      	movs	r4, #1
 800e4fe:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800e500:	7d1b      	ldrb	r3, [r3, #20]
 800e502:	b94b      	cbnz	r3, 800e518 <dwt_xfer3xxx+0x8a>
 800e504:	682b      	ldr	r3, [r5, #0]
 800e506:	685d      	ldr	r5, [r3, #4]
 800e508:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e50a:	4632      	mov	r2, r6
 800e50c:	a903      	add	r1, sp, #12
 800e50e:	4620      	mov	r0, r4
 800e510:	47a8      	blx	r5
 800e512:	b004      	add	sp, #16
 800e514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e518:	2200      	movs	r2, #0
 800e51a:	4621      	mov	r1, r4
 800e51c:	a803      	add	r0, sp, #12
 800e51e:	f7f7 fb27 	bl	8005b70 <dwt_generatecrc8>
 800e522:	4602      	mov	r2, r0
 800e524:	4631      	mov	r1, r6
 800e526:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e528:	f7f7 fb22 	bl	8005b70 <dwt_generatecrc8>
 800e52c:	682b      	ldr	r3, [r5, #0]
 800e52e:	9000      	str	r0, [sp, #0]
 800e530:	689d      	ldr	r5, [r3, #8]
 800e532:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e534:	4632      	mov	r2, r6
 800e536:	a903      	add	r1, sp, #12
 800e538:	4620      	mov	r0, r4
 800e53a:	47a8      	blx	r5
 800e53c:	e7e9      	b.n	800e512 <dwt_xfer3xxx+0x84>
 800e53e:	2401      	movs	r4, #1
 800e540:	682b      	ldr	r3, [r5, #0]
 800e542:	f8d3 8000 	ldr.w	r8, [r3]
 800e546:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e548:	4632      	mov	r2, r6
 800e54a:	a903      	add	r1, sp, #12
 800e54c:	4620      	mov	r0, r4
 800e54e:	47c0      	blx	r8
 800e550:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800e552:	7d1b      	ldrb	r3, [r3, #20]
 800e554:	2b02      	cmp	r3, #2
 800e556:	d1dc      	bne.n	800e512 <dwt_xfer3xxx+0x84>
 800e558:	2f18      	cmp	r7, #24
 800e55a:	d0da      	beq.n	800e512 <dwt_xfer3xxx+0x84>
 800e55c:	2200      	movs	r2, #0
 800e55e:	4621      	mov	r1, r4
 800e560:	a803      	add	r0, sp, #12
 800e562:	f7f7 fb05 	bl	8005b70 <dwt_generatecrc8>
 800e566:	4602      	mov	r2, r0
 800e568:	4631      	mov	r1, r6
 800e56a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e56c:	f7f7 fb00 	bl	8005b70 <dwt_generatecrc8>
 800e570:	4604      	mov	r4, r0
 800e572:	2200      	movs	r2, #0
 800e574:	2118      	movs	r1, #24
 800e576:	4628      	mov	r0, r5
 800e578:	f000 f866 	bl	800e648 <dwt_read8bitoffsetreg>
 800e57c:	4284      	cmp	r4, r0
 800e57e:	d0c8      	beq.n	800e512 <dwt_xfer3xxx+0x84>
 800e580:	68eb      	ldr	r3, [r5, #12]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d0c5      	beq.n	800e512 <dwt_xfer3xxx+0x84>
 800e586:	4798      	blx	r3
 800e588:	e7c3      	b.n	800e512 <dwt_xfer3xxx+0x84>

0800e58a <dwt_readfromdevice>:
 800e58a:	b510      	push	{r4, lr}
 800e58c:	b082      	sub	sp, #8
 800e58e:	2400      	movs	r4, #0
 800e590:	9401      	str	r4, [sp, #4]
 800e592:	9c04      	ldr	r4, [sp, #16]
 800e594:	9400      	str	r4, [sp, #0]
 800e596:	f7ff ff7a 	bl	800e48e <dwt_xfer3xxx>
 800e59a:	b002      	add	sp, #8
 800e59c:	bd10      	pop	{r4, pc}

0800e59e <dwt_read32bitoffsetreg>:
 800e59e:	b500      	push	{lr}
 800e5a0:	b085      	sub	sp, #20
 800e5a2:	ab03      	add	r3, sp, #12
 800e5a4:	9300      	str	r3, [sp, #0]
 800e5a6:	2304      	movs	r3, #4
 800e5a8:	b292      	uxth	r2, r2
 800e5aa:	f7ff ffee 	bl	800e58a <dwt_readfromdevice>
 800e5ae:	f10d 030f 	add.w	r3, sp, #15
 800e5b2:	f10d 010b 	add.w	r1, sp, #11
 800e5b6:	2000      	movs	r0, #0
 800e5b8:	f813 2901 	ldrb.w	r2, [r3], #-1
 800e5bc:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 800e5c0:	428b      	cmp	r3, r1
 800e5c2:	d1f9      	bne.n	800e5b8 <dwt_read32bitoffsetreg+0x1a>
 800e5c4:	b005      	add	sp, #20
 800e5c6:	f85d fb04 	ldr.w	pc, [sp], #4

0800e5ca <dwt_read16bitoffsetreg>:
 800e5ca:	b500      	push	{lr}
 800e5cc:	b085      	sub	sp, #20
 800e5ce:	ab03      	add	r3, sp, #12
 800e5d0:	9300      	str	r3, [sp, #0]
 800e5d2:	2302      	movs	r3, #2
 800e5d4:	b292      	uxth	r2, r2
 800e5d6:	f7ff ffd8 	bl	800e58a <dwt_readfromdevice>
 800e5da:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800e5de:	f89d 000c 	ldrb.w	r0, [sp, #12]
 800e5e2:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 800e5e6:	b280      	uxth	r0, r0
 800e5e8:	b005      	add	sp, #20
 800e5ea:	f85d fb04 	ldr.w	pc, [sp], #4

0800e5ee <ull_getrxantennadelay>:
 800e5ee:	b508      	push	{r3, lr}
 800e5f0:	2200      	movs	r2, #0
 800e5f2:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800e5f6:	f7ff ffe8 	bl	800e5ca <dwt_read16bitoffsetreg>
 800e5fa:	bd08      	pop	{r3, pc}

0800e5fc <ull_gettxantennadelay>:
 800e5fc:	b508      	push	{r3, lr}
 800e5fe:	2200      	movs	r2, #0
 800e600:	217c      	movs	r1, #124	; 0x7c
 800e602:	f7ff ffe2 	bl	800e5ca <dwt_read16bitoffsetreg>
 800e606:	bd08      	pop	{r3, pc}

0800e608 <ull_readclockoffset>:
 800e608:	b508      	push	{r3, lr}
 800e60a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800e60c:	7b9b      	ldrb	r3, [r3, #14]
 800e60e:	2b01      	cmp	r3, #1
 800e610:	d00a      	beq.n	800e628 <ull_readclockoffset+0x20>
 800e612:	2b03      	cmp	r3, #3
 800e614:	d10e      	bne.n	800e634 <ull_readclockoffset+0x2c>
 800e616:	220c      	movs	r2, #12
 800e618:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800e61c:	f7ff ffd5 	bl	800e5ca <dwt_read16bitoffsetreg>
 800e620:	b200      	sxth	r0, r0
 800e622:	f340 000c 	sbfx	r0, r0, #0, #13
 800e626:	bd08      	pop	{r3, pc}
 800e628:	2200      	movs	r2, #0
 800e62a:	4905      	ldr	r1, [pc, #20]	; (800e640 <ull_readclockoffset+0x38>)
 800e62c:	f7ff ffcd 	bl	800e5ca <dwt_read16bitoffsetreg>
 800e630:	b200      	sxth	r0, r0
 800e632:	e7f6      	b.n	800e622 <ull_readclockoffset+0x1a>
 800e634:	2200      	movs	r2, #0
 800e636:	4903      	ldr	r1, [pc, #12]	; (800e644 <ull_readclockoffset+0x3c>)
 800e638:	f7ff ffc7 	bl	800e5ca <dwt_read16bitoffsetreg>
 800e63c:	b200      	sxth	r0, r0
 800e63e:	e7f0      	b.n	800e622 <ull_readclockoffset+0x1a>
 800e640:	0018000c 	.word	0x0018000c
 800e644:	000c0020 	.word	0x000c0020

0800e648 <dwt_read8bitoffsetreg>:
 800e648:	b500      	push	{lr}
 800e64a:	b085      	sub	sp, #20
 800e64c:	f10d 030f 	add.w	r3, sp, #15
 800e650:	9300      	str	r3, [sp, #0]
 800e652:	2301      	movs	r3, #1
 800e654:	b292      	uxth	r2, r2
 800e656:	f7ff ff98 	bl	800e58a <dwt_readfromdevice>
 800e65a:	f89d 000f 	ldrb.w	r0, [sp, #15]
 800e65e:	b005      	add	sp, #20
 800e660:	f85d fb04 	ldr.w	pc, [sp], #4

0800e664 <ull_readcarrierintegrator>:
 800e664:	b500      	push	{lr}
 800e666:	b085      	sub	sp, #20
 800e668:	ab03      	add	r3, sp, #12
 800e66a:	9300      	str	r3, [sp, #0]
 800e66c:	2303      	movs	r3, #3
 800e66e:	2200      	movs	r2, #0
 800e670:	490b      	ldr	r1, [pc, #44]	; (800e6a0 <ull_readcarrierintegrator+0x3c>)
 800e672:	f7ff ff8a 	bl	800e58a <dwt_readfromdevice>
 800e676:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800e67a:	f89d 000d 	ldrb.w	r0, [sp, #13]
 800e67e:	eb00 2303 	add.w	r3, r0, r3, lsl #8
 800e682:	f89d 000c 	ldrb.w	r0, [sp, #12]
 800e686:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 800e68a:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 800e68e:	bf1c      	itt	ne
 800e690:	ea6f 3000 	mvnne.w	r0, r0, lsl #12
 800e694:	ea6f 3010 	mvnne.w	r0, r0, lsr #12
 800e698:	b005      	add	sp, #20
 800e69a:	f85d fb04 	ldr.w	pc, [sp], #4
 800e69e:	bf00      	nop
 800e6a0:	00060029 	.word	0x00060029

0800e6a4 <ull_readdiagnostics>:
 800e6a4:	b530      	push	{r4, r5, lr}
 800e6a6:	b0bd      	sub	sp, #244	; 0xf4
 800e6a8:	4605      	mov	r5, r0
 800e6aa:	460c      	mov	r4, r1
 800e6ac:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800e6ae:	7b9a      	ldrb	r2, [r3, #14]
 800e6b0:	2a01      	cmp	r2, #1
 800e6b2:	d01c      	beq.n	800e6ee <ull_readdiagnostics+0x4a>
 800e6b4:	2a03      	cmp	r2, #3
 800e6b6:	f040 81f1 	bne.w	800ea9c <ull_readdiagnostics+0x3f8>
 800e6ba:	7d9b      	ldrb	r3, [r3, #22]
 800e6bc:	f013 0f08 	tst.w	r3, #8
 800e6c0:	d10c      	bne.n	800e6dc <ull_readdiagnostics+0x38>
 800e6c2:	f013 0f04 	tst.w	r3, #4
 800e6c6:	ab02      	add	r3, sp, #8
 800e6c8:	9300      	str	r3, [sp, #0]
 800e6ca:	bf14      	ite	ne
 800e6cc:	2338      	movne	r3, #56	; 0x38
 800e6ce:	2320      	moveq	r3, #32
 800e6d0:	2200      	movs	r2, #0
 800e6d2:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800e6d6:	f7ff ff58 	bl	800e58a <dwt_readfromdevice>
 800e6da:	e019      	b.n	800e710 <ull_readdiagnostics+0x6c>
 800e6dc:	ab02      	add	r3, sp, #8
 800e6de:	9300      	str	r3, [sp, #0]
 800e6e0:	23e8      	movs	r3, #232	; 0xe8
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800e6e8:	f7ff ff4f 	bl	800e58a <dwt_readfromdevice>
 800e6ec:	e010      	b.n	800e710 <ull_readdiagnostics+0x6c>
 800e6ee:	7d9b      	ldrb	r3, [r3, #22]
 800e6f0:	f013 0f08 	tst.w	r3, #8
 800e6f4:	f040 81c9 	bne.w	800ea8a <ull_readdiagnostics+0x3e6>
 800e6f8:	f013 0f04 	tst.w	r3, #4
 800e6fc:	ab02      	add	r3, sp, #8
 800e6fe:	9300      	str	r3, [sp, #0]
 800e700:	bf14      	ite	ne
 800e702:	2338      	movne	r3, #56	; 0x38
 800e704:	2320      	moveq	r3, #32
 800e706:	2200      	movs	r2, #0
 800e708:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 800e70c:	f7ff ff3d 	bl	800e58a <dwt_readfromdevice>
 800e710:	f10d 0217 	add.w	r2, sp, #23
 800e714:	f104 031a 	add.w	r3, r4, #26
 800e718:	f104 0020 	add.w	r0, r4, #32
 800e71c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800e720:	f803 1b01 	strb.w	r1, [r3], #1
 800e724:	4283      	cmp	r3, r0
 800e726:	d1f9      	bne.n	800e71c <ull_readdiagnostics+0x78>
 800e728:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800e72c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800e730:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e734:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e738:	8463      	strh	r3, [r4, #34]	; 0x22
 800e73a:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800e73e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800e742:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e746:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e74a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800e74e:	bf1c      	itt	ne
 800e750:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 800e754:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 800e758:	8423      	strh	r3, [r4, #32]
 800e75a:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 800e75e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800e762:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e766:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e76a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800e76c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800e76e:	7d9b      	ldrb	r3, [r3, #22]
 800e770:	f013 0f02 	tst.w	r3, #2
 800e774:	f040 817e 	bne.w	800ea74 <ull_readdiagnostics+0x3d0>
 800e778:	aa0a      	add	r2, sp, #40	; 0x28
 800e77a:	1e63      	subs	r3, r4, #1
 800e77c:	1d20      	adds	r0, r4, #4
 800e77e:	f812 1b01 	ldrb.w	r1, [r2], #1
 800e782:	f803 1f01 	strb.w	r1, [r3, #1]!
 800e786:	79d1      	ldrb	r1, [r2, #7]
 800e788:	7219      	strb	r1, [r3, #8]
 800e78a:	7bd1      	ldrb	r1, [r2, #15]
 800e78c:	7459      	strb	r1, [r3, #17]
 800e78e:	4283      	cmp	r3, r0
 800e790:	d1f5      	bne.n	800e77e <ull_readdiagnostics+0xda>
 800e792:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 800e796:	7163      	strb	r3, [r4, #5]
 800e798:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 800e79c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 800e7a0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e7a4:	80e3      	strh	r3, [r4, #6]
 800e7a6:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 800e7aa:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 800e7ae:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800e7b2:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 800e7b6:	f8a4 300d 	strh.w	r3, [r4, #13]
 800e7ba:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 800e7be:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 800e7c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e7c6:	f8a4 300f 	strh.w	r3, [r4, #15]
 800e7ca:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 800e7ce:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 800e7d2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800e7d6:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 800e7da:	82e3      	strh	r3, [r4, #22]
 800e7dc:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
 800e7e0:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 800e7e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e7e8:	8323      	strh	r3, [r4, #24]
 800e7ea:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800e7ec:	7d9b      	ldrb	r3, [r3, #22]
 800e7ee:	f013 0f04 	tst.w	r3, #4
 800e7f2:	f040 813f 	bne.w	800ea74 <ull_readdiagnostics+0x3d0>
 800e7f6:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 800e7fa:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800e7fe:	041b      	lsls	r3, r3, #16
 800e800:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e804:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 800e808:	4313      	orrs	r3, r2
 800e80a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 800e80e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e812:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800e816:	6263      	str	r3, [r4, #36]	; 0x24
 800e818:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
 800e81c:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
 800e820:	041b      	lsls	r3, r3, #16
 800e822:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e826:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800e82a:	4313      	orrs	r3, r2
 800e82c:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
 800e830:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e834:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e838:	62a3      	str	r3, [r4, #40]	; 0x28
 800e83a:	f89d 204b 	ldrb.w	r2, [sp, #75]	; 0x4b
 800e83e:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 800e842:	041b      	lsls	r3, r3, #16
 800e844:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e848:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 800e84c:	4313      	orrs	r3, r2
 800e84e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
 800e852:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e856:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e85a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e85c:	f89d 204f 	ldrb.w	r2, [sp, #79]	; 0x4f
 800e860:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
 800e864:	041b      	lsls	r3, r3, #16
 800e866:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e86a:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 800e86e:	4313      	orrs	r3, r2
 800e870:	f89d 204d 	ldrb.w	r2, [sp, #77]	; 0x4d
 800e874:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e878:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e87c:	6323      	str	r3, [r4, #48]	; 0x30
 800e87e:	f89d 2053 	ldrb.w	r2, [sp, #83]	; 0x53
 800e882:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
 800e886:	041b      	lsls	r3, r3, #16
 800e888:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e88c:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 800e890:	4313      	orrs	r3, r2
 800e892:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 800e896:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e89a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e89e:	6363      	str	r3, [r4, #52]	; 0x34
 800e8a0:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
 800e8a4:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
 800e8a8:	041b      	lsls	r3, r3, #16
 800e8aa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e8ae:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 800e8b2:	4313      	orrs	r3, r2
 800e8b4:	f89d 2055 	ldrb.w	r2, [sp, #85]	; 0x55
 800e8b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e8bc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e8c0:	63a3      	str	r3, [r4, #56]	; 0x38
 800e8c2:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 800e8c6:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 800e8ca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e8ce:	87a3      	strh	r3, [r4, #60]	; 0x3c
 800e8d0:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 800e8d4:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 800e8d8:	041b      	lsls	r3, r3, #16
 800e8da:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e8de:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 800e8e2:	4313      	orrs	r3, r2
 800e8e4:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 800e8e8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e8ec:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800e8f0:	6423      	str	r3, [r4, #64]	; 0x40
 800e8f2:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
 800e8f6:	f89d 307a 	ldrb.w	r3, [sp, #122]	; 0x7a
 800e8fa:	041b      	lsls	r3, r3, #16
 800e8fc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e900:	f89d 2078 	ldrb.w	r2, [sp, #120]	; 0x78
 800e904:	4313      	orrs	r3, r2
 800e906:	f89d 2079 	ldrb.w	r2, [sp, #121]	; 0x79
 800e90a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e90e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e912:	6463      	str	r3, [r4, #68]	; 0x44
 800e914:	f89d 207f 	ldrb.w	r2, [sp, #127]	; 0x7f
 800e918:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
 800e91c:	041b      	lsls	r3, r3, #16
 800e91e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e922:	f89d 207c 	ldrb.w	r2, [sp, #124]	; 0x7c
 800e926:	4313      	orrs	r3, r2
 800e928:	f89d 207d 	ldrb.w	r2, [sp, #125]	; 0x7d
 800e92c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e930:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e934:	64a3      	str	r3, [r4, #72]	; 0x48
 800e936:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
 800e93a:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
 800e93e:	041b      	lsls	r3, r3, #16
 800e940:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e944:	f89d 2080 	ldrb.w	r2, [sp, #128]	; 0x80
 800e948:	4313      	orrs	r3, r2
 800e94a:	f89d 2081 	ldrb.w	r2, [sp, #129]	; 0x81
 800e94e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e952:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e956:	64e3      	str	r3, [r4, #76]	; 0x4c
 800e958:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
 800e95c:	f89d 3086 	ldrb.w	r3, [sp, #134]	; 0x86
 800e960:	041b      	lsls	r3, r3, #16
 800e962:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e966:	f89d 2084 	ldrb.w	r2, [sp, #132]	; 0x84
 800e96a:	4313      	orrs	r3, r2
 800e96c:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 800e970:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e974:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e978:	6523      	str	r3, [r4, #80]	; 0x50
 800e97a:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 800e97e:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 800e982:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e986:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800e98a:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 800e98e:	f89d 20a5 	ldrb.w	r2, [sp, #165]	; 0xa5
 800e992:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 800e996:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e99a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e99e:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 800e9a2:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 800e9a6:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 800e9aa:	041b      	lsls	r3, r3, #16
 800e9ac:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e9b0:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 800e9b4:	4313      	orrs	r3, r2
 800e9b6:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 800e9ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e9be:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800e9c2:	65a3      	str	r3, [r4, #88]	; 0x58
 800e9c4:	f89d 20c3 	ldrb.w	r2, [sp, #195]	; 0xc3
 800e9c8:	f89d 30c2 	ldrb.w	r3, [sp, #194]	; 0xc2
 800e9cc:	041b      	lsls	r3, r3, #16
 800e9ce:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e9d2:	f89d 20c0 	ldrb.w	r2, [sp, #192]	; 0xc0
 800e9d6:	4313      	orrs	r3, r2
 800e9d8:	f89d 20c1 	ldrb.w	r2, [sp, #193]	; 0xc1
 800e9dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e9e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e9e4:	65e3      	str	r3, [r4, #92]	; 0x5c
 800e9e6:	f89d 20c7 	ldrb.w	r2, [sp, #199]	; 0xc7
 800e9ea:	f89d 30c6 	ldrb.w	r3, [sp, #198]	; 0xc6
 800e9ee:	041b      	lsls	r3, r3, #16
 800e9f0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e9f4:	f89d 20c4 	ldrb.w	r2, [sp, #196]	; 0xc4
 800e9f8:	4313      	orrs	r3, r2
 800e9fa:	f89d 20c5 	ldrb.w	r2, [sp, #197]	; 0xc5
 800e9fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ea02:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ea06:	6623      	str	r3, [r4, #96]	; 0x60
 800ea08:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
 800ea0c:	f89d 30ca 	ldrb.w	r3, [sp, #202]	; 0xca
 800ea10:	041b      	lsls	r3, r3, #16
 800ea12:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ea16:	f89d 20c8 	ldrb.w	r2, [sp, #200]	; 0xc8
 800ea1a:	4313      	orrs	r3, r2
 800ea1c:	f89d 20c9 	ldrb.w	r2, [sp, #201]	; 0xc9
 800ea20:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ea24:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ea28:	6663      	str	r3, [r4, #100]	; 0x64
 800ea2a:	f89d 20cf 	ldrb.w	r2, [sp, #207]	; 0xcf
 800ea2e:	f89d 30ce 	ldrb.w	r3, [sp, #206]	; 0xce
 800ea32:	041b      	lsls	r3, r3, #16
 800ea34:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ea38:	f89d 20cc 	ldrb.w	r2, [sp, #204]	; 0xcc
 800ea3c:	4313      	orrs	r3, r2
 800ea3e:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 800ea42:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ea46:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ea4a:	66a3      	str	r3, [r4, #104]	; 0x68
 800ea4c:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 800ea50:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 800ea54:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ea58:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800ea5c:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 800ea60:	f89d 20ed 	ldrb.w	r2, [sp, #237]	; 0xed
 800ea64:	f89d 30ec 	ldrb.w	r3, [sp, #236]	; 0xec
 800ea68:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ea6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ea70:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 800ea74:	f994 301b 	ldrsb.w	r3, [r4, #27]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	f2c0 81d0 	blt.w	800ee1e <ull_readdiagnostics+0x77a>
 800ea7e:	7fe3      	ldrb	r3, [r4, #31]
 800ea80:	f003 0301 	and.w	r3, r3, #1
 800ea84:	77e3      	strb	r3, [r4, #31]
 800ea86:	b03d      	add	sp, #244	; 0xf4
 800ea88:	bd30      	pop	{r4, r5, pc}
 800ea8a:	ab02      	add	r3, sp, #8
 800ea8c:	9300      	str	r3, [sp, #0]
 800ea8e:	23e8      	movs	r3, #232	; 0xe8
 800ea90:	2200      	movs	r2, #0
 800ea92:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 800ea96:	f7ff fd78 	bl	800e58a <dwt_readfromdevice>
 800ea9a:	e639      	b.n	800e710 <ull_readdiagnostics+0x6c>
 800ea9c:	7d9b      	ldrb	r3, [r3, #22]
 800ea9e:	f013 0f01 	tst.w	r3, #1
 800eaa2:	f000 81b3 	beq.w	800ee0c <ull_readdiagnostics+0x768>
 800eaa6:	ab02      	add	r3, sp, #8
 800eaa8:	9300      	str	r3, [sp, #0]
 800eaaa:	236c      	movs	r3, #108	; 0x6c
 800eaac:	2200      	movs	r2, #0
 800eaae:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 800eab2:	f7ff fd6a 	bl	800e58a <dwt_readfromdevice>
 800eab6:	ab1d      	add	r3, sp, #116	; 0x74
 800eab8:	9300      	str	r3, [sp, #0]
 800eaba:	236c      	movs	r3, #108	; 0x6c
 800eabc:	2200      	movs	r2, #0
 800eabe:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 800eac2:	4628      	mov	r0, r5
 800eac4:	f7ff fd61 	bl	800e58a <dwt_readfromdevice>
 800eac8:	aa02      	add	r2, sp, #8
 800eaca:	1e63      	subs	r3, r4, #1
 800eacc:	1d20      	adds	r0, r4, #4
 800eace:	f812 1b01 	ldrb.w	r1, [r2], #1
 800ead2:	f803 1f01 	strb.w	r1, [r3, #1]!
 800ead6:	79d1      	ldrb	r1, [r2, #7]
 800ead8:	7219      	strb	r1, [r3, #8]
 800eada:	7bd1      	ldrb	r1, [r2, #15]
 800eadc:	7459      	strb	r1, [r3, #17]
 800eade:	7dd1      	ldrb	r1, [r2, #23]
 800eae0:	7699      	strb	r1, [r3, #26]
 800eae2:	4283      	cmp	r3, r0
 800eae4:	d1f3      	bne.n	800eace <ull_readdiagnostics+0x42a>
 800eae6:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800eaea:	77e3      	strb	r3, [r4, #31]
 800eaec:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800eaf0:	7163      	strb	r3, [r4, #5]
 800eaf2:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800eaf6:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800eafa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800eafe:	80e3      	strh	r3, [r4, #6]
 800eb00:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800eb04:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800eb08:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 800eb0c:	f3c2 12cf 	ubfx	r2, r2, #7, #16
 800eb10:	f8a4 200d 	strh.w	r2, [r4, #13]
 800eb14:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800eb18:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800eb1c:	f8a4 200f 	strh.w	r2, [r4, #15]
 800eb20:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800eb24:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800eb28:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 800eb2c:	82e3      	strh	r3, [r4, #22]
 800eb2e:	f89d 201e 	ldrb.w	r2, [sp, #30]
 800eb32:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800eb36:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800eb3a:	8323      	strh	r3, [r4, #24]
 800eb3c:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 800eb40:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 800eb44:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800eb48:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800eb4c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800eb50:	bf1c      	itt	ne
 800eb52:	ea6f 4383 	mvnne.w	r3, r3, lsl #18
 800eb56:	ea6f 4393 	mvnne.w	r3, r3, lsr #18
 800eb5a:	8423      	strh	r3, [r4, #32]
 800eb5c:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 800eb60:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800eb64:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800eb68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800eb6c:	8463      	strh	r3, [r4, #34]	; 0x22
 800eb6e:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 800eb72:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 800eb76:	041b      	lsls	r3, r3, #16
 800eb78:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800eb7c:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 800eb80:	4313      	orrs	r3, r2
 800eb82:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 800eb86:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800eb8a:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800eb8e:	6263      	str	r3, [r4, #36]	; 0x24
 800eb90:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800eb92:	7d9b      	ldrb	r3, [r3, #22]
 800eb94:	f013 0f01 	tst.w	r3, #1
 800eb98:	f43f af6c 	beq.w	800ea74 <ull_readdiagnostics+0x3d0>
 800eb9c:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 800eba0:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 800eba4:	041b      	lsls	r3, r3, #16
 800eba6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ebaa:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 800ebae:	4313      	orrs	r3, r2
 800ebb0:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 800ebb4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ebb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ebbc:	62a3      	str	r3, [r4, #40]	; 0x28
 800ebbe:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 800ebc2:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 800ebc6:	041b      	lsls	r3, r3, #16
 800ebc8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ebcc:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 800ebd0:	4313      	orrs	r3, r2
 800ebd2:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 800ebd6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ebda:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ebde:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ebe0:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 800ebe4:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 800ebe8:	041b      	lsls	r3, r3, #16
 800ebea:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ebee:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 800ebf2:	4313      	orrs	r3, r2
 800ebf4:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 800ebf8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ebfc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ec00:	6323      	str	r3, [r4, #48]	; 0x30
 800ec02:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 800ec06:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 800ec0a:	041b      	lsls	r3, r3, #16
 800ec0c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ec10:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 800ec14:	4313      	orrs	r3, r2
 800ec16:	f89d 203d 	ldrb.w	r2, [sp, #61]	; 0x3d
 800ec1a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ec1e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ec22:	6363      	str	r3, [r4, #52]	; 0x34
 800ec24:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 800ec28:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800ec2c:	041b      	lsls	r3, r3, #16
 800ec2e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ec32:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 800ec36:	4313      	orrs	r3, r2
 800ec38:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 800ec3c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ec40:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ec44:	63a3      	str	r3, [r4, #56]	; 0x38
 800ec46:	f89d 2051 	ldrb.w	r2, [sp, #81]	; 0x51
 800ec4a:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800ec4e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ec52:	87a3      	strh	r3, [r4, #60]	; 0x3c
 800ec54:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
 800ec58:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 800ec5c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ec60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ec64:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800ec66:	f89d 2067 	ldrb.w	r2, [sp, #103]	; 0x67
 800ec6a:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
 800ec6e:	041b      	lsls	r3, r3, #16
 800ec70:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ec74:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 800ec78:	4313      	orrs	r3, r2
 800ec7a:	f89d 2065 	ldrb.w	r2, [sp, #101]	; 0x65
 800ec7e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ec82:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800ec86:	6423      	str	r3, [r4, #64]	; 0x40
 800ec88:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
 800ec8c:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
 800ec90:	041b      	lsls	r3, r3, #16
 800ec92:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ec96:	f89d 2068 	ldrb.w	r2, [sp, #104]	; 0x68
 800ec9a:	4313      	orrs	r3, r2
 800ec9c:	f89d 2069 	ldrb.w	r2, [sp, #105]	; 0x69
 800eca0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800eca4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eca8:	6463      	str	r3, [r4, #68]	; 0x44
 800ecaa:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
 800ecae:	f89d 306e 	ldrb.w	r3, [sp, #110]	; 0x6e
 800ecb2:	041b      	lsls	r3, r3, #16
 800ecb4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ecb8:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 800ecbc:	4313      	orrs	r3, r2
 800ecbe:	f89d 206d 	ldrb.w	r2, [sp, #109]	; 0x6d
 800ecc2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ecc6:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ecca:	64a3      	str	r3, [r4, #72]	; 0x48
 800eccc:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
 800ecd0:	f89d 3072 	ldrb.w	r3, [sp, #114]	; 0x72
 800ecd4:	041b      	lsls	r3, r3, #16
 800ecd6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ecda:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
 800ecde:	4313      	orrs	r3, r2
 800ece0:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
 800ece4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ece8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ecec:	64e3      	str	r3, [r4, #76]	; 0x4c
 800ecee:	f89d 2077 	ldrb.w	r2, [sp, #119]	; 0x77
 800ecf2:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 800ecf6:	041b      	lsls	r3, r3, #16
 800ecf8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ecfc:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 800ed00:	4313      	orrs	r3, r2
 800ed02:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 800ed06:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ed0a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ed0e:	6523      	str	r3, [r4, #80]	; 0x50
 800ed10:	f89d 2085 	ldrb.w	r2, [sp, #133]	; 0x85
 800ed14:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 800ed18:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ed1c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800ed20:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 800ed24:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
 800ed28:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 800ed2c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ed30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ed34:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 800ed38:	f89d 20af 	ldrb.w	r2, [sp, #175]	; 0xaf
 800ed3c:	f89d 30ae 	ldrb.w	r3, [sp, #174]	; 0xae
 800ed40:	041b      	lsls	r3, r3, #16
 800ed42:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ed46:	f89d 20ac 	ldrb.w	r2, [sp, #172]	; 0xac
 800ed4a:	4313      	orrs	r3, r2
 800ed4c:	f89d 20ad 	ldrb.w	r2, [sp, #173]	; 0xad
 800ed50:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ed54:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800ed58:	65a3      	str	r3, [r4, #88]	; 0x58
 800ed5a:	f89d 20b3 	ldrb.w	r2, [sp, #179]	; 0xb3
 800ed5e:	f89d 30b2 	ldrb.w	r3, [sp, #178]	; 0xb2
 800ed62:	041b      	lsls	r3, r3, #16
 800ed64:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ed68:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
 800ed6c:	4313      	orrs	r3, r2
 800ed6e:	f89d 20b1 	ldrb.w	r2, [sp, #177]	; 0xb1
 800ed72:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ed76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ed7a:	65e3      	str	r3, [r4, #92]	; 0x5c
 800ed7c:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
 800ed80:	f89d 30b6 	ldrb.w	r3, [sp, #182]	; 0xb6
 800ed84:	041b      	lsls	r3, r3, #16
 800ed86:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ed8a:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 800ed8e:	4313      	orrs	r3, r2
 800ed90:	f89d 20b5 	ldrb.w	r2, [sp, #181]	; 0xb5
 800ed94:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ed98:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ed9c:	6623      	str	r3, [r4, #96]	; 0x60
 800ed9e:	f89d 20bb 	ldrb.w	r2, [sp, #187]	; 0xbb
 800eda2:	f89d 30ba 	ldrb.w	r3, [sp, #186]	; 0xba
 800eda6:	041b      	lsls	r3, r3, #16
 800eda8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800edac:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 800edb0:	4313      	orrs	r3, r2
 800edb2:	f89d 20b9 	ldrb.w	r2, [sp, #185]	; 0xb9
 800edb6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800edba:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800edbe:	6663      	str	r3, [r4, #100]	; 0x64
 800edc0:	f89d 20bf 	ldrb.w	r2, [sp, #191]	; 0xbf
 800edc4:	f89d 30be 	ldrb.w	r3, [sp, #190]	; 0xbe
 800edc8:	041b      	lsls	r3, r3, #16
 800edca:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800edce:	f89d 20bc 	ldrb.w	r2, [sp, #188]	; 0xbc
 800edd2:	4313      	orrs	r3, r2
 800edd4:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 800edd8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800eddc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ede0:	66a3      	str	r3, [r4, #104]	; 0x68
 800ede2:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
 800ede6:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 800edea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800edee:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800edf2:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 800edf6:	f89d 20dd 	ldrb.w	r2, [sp, #221]	; 0xdd
 800edfa:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 800edfe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ee02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ee06:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 800ee0a:	e633      	b.n	800ea74 <ull_readdiagnostics+0x3d0>
 800ee0c:	ab02      	add	r3, sp, #8
 800ee0e:	9300      	str	r3, [sp, #0]
 800ee10:	2328      	movs	r3, #40	; 0x28
 800ee12:	2200      	movs	r2, #0
 800ee14:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 800ee18:	f7ff fbb7 	bl	800e58a <dwt_readfromdevice>
 800ee1c:	e654      	b.n	800eac8 <ull_readdiagnostics+0x424>
 800ee1e:	23ff      	movs	r3, #255	; 0xff
 800ee20:	7723      	strb	r3, [r4, #28]
 800ee22:	7763      	strb	r3, [r4, #29]
 800ee24:	77a3      	strb	r3, [r4, #30]
 800ee26:	77e3      	strb	r3, [r4, #31]
 800ee28:	e629      	b.n	800ea7e <ull_readdiagnostics+0x3da>
	...

0800ee2c <ull_readrxtimestamp>:
 800ee2c:	b500      	push	{lr}
 800ee2e:	b083      	sub	sp, #12
 800ee30:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800ee32:	7b9b      	ldrb	r3, [r3, #14]
 800ee34:	2b01      	cmp	r3, #1
 800ee36:	d00b      	beq.n	800ee50 <ull_readrxtimestamp+0x24>
 800ee38:	2b03      	cmp	r3, #3
 800ee3a:	d110      	bne.n	800ee5e <ull_readrxtimestamp+0x32>
 800ee3c:	9100      	str	r1, [sp, #0]
 800ee3e:	2305      	movs	r3, #5
 800ee40:	2204      	movs	r2, #4
 800ee42:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800ee46:	f7ff fba0 	bl	800e58a <dwt_readfromdevice>
 800ee4a:	b003      	add	sp, #12
 800ee4c:	f85d fb04 	ldr.w	pc, [sp], #4
 800ee50:	9100      	str	r1, [sp, #0]
 800ee52:	2305      	movs	r3, #5
 800ee54:	2200      	movs	r2, #0
 800ee56:	4905      	ldr	r1, [pc, #20]	; (800ee6c <ull_readrxtimestamp+0x40>)
 800ee58:	f7ff fb97 	bl	800e58a <dwt_readfromdevice>
 800ee5c:	e7f5      	b.n	800ee4a <ull_readrxtimestamp+0x1e>
 800ee5e:	9100      	str	r1, [sp, #0]
 800ee60:	2305      	movs	r3, #5
 800ee62:	2200      	movs	r2, #0
 800ee64:	2160      	movs	r1, #96	; 0x60
 800ee66:	f7ff fb90 	bl	800e58a <dwt_readfromdevice>
 800ee6a:	e7ee      	b.n	800ee4a <ull_readrxtimestamp+0x1e>
 800ee6c:	00180004 	.word	0x00180004

0800ee70 <dwt_writetodevice>:
 800ee70:	b510      	push	{r4, lr}
 800ee72:	b082      	sub	sp, #8
 800ee74:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 800ee78:	9401      	str	r4, [sp, #4]
 800ee7a:	9c04      	ldr	r4, [sp, #16]
 800ee7c:	9400      	str	r4, [sp, #0]
 800ee7e:	f7ff fb06 	bl	800e48e <dwt_xfer3xxx>
 800ee82:	b002      	add	sp, #8
 800ee84:	bd10      	pop	{r4, pc}

0800ee86 <dwt_write16bitoffsetreg>:
 800ee86:	b500      	push	{lr}
 800ee88:	b085      	sub	sp, #20
 800ee8a:	f88d 300c 	strb.w	r3, [sp, #12]
 800ee8e:	0a1b      	lsrs	r3, r3, #8
 800ee90:	f88d 300d 	strb.w	r3, [sp, #13]
 800ee94:	ab03      	add	r3, sp, #12
 800ee96:	9300      	str	r3, [sp, #0]
 800ee98:	2302      	movs	r3, #2
 800ee9a:	b292      	uxth	r2, r2
 800ee9c:	f7ff ffe8 	bl	800ee70 <dwt_writetodevice>
 800eea0:	b005      	add	sp, #20
 800eea2:	f85d fb04 	ldr.w	pc, [sp], #4

0800eea6 <ull_setrxantennadelay>:
 800eea6:	b508      	push	{r3, lr}
 800eea8:	460b      	mov	r3, r1
 800eeaa:	2200      	movs	r2, #0
 800eeac:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800eeb0:	f7ff ffe9 	bl	800ee86 <dwt_write16bitoffsetreg>
 800eeb4:	bd08      	pop	{r3, pc}

0800eeb6 <ull_settxantennadelay>:
 800eeb6:	b508      	push	{r3, lr}
 800eeb8:	460b      	mov	r3, r1
 800eeba:	2200      	movs	r2, #0
 800eebc:	217c      	movs	r1, #124	; 0x7c
 800eebe:	f7ff ffe2 	bl	800ee86 <dwt_write16bitoffsetreg>
 800eec2:	bd08      	pop	{r3, pc}

0800eec4 <ull_force_clocks>:
 800eec4:	b508      	push	{r3, lr}
 800eec6:	2901      	cmp	r1, #1
 800eec8:	d002      	beq.n	800eed0 <ull_force_clocks+0xc>
 800eeca:	2905      	cmp	r1, #5
 800eecc:	d007      	beq.n	800eede <ull_force_clocks+0x1a>
 800eece:	bd08      	pop	{r3, pc}
 800eed0:	f641 0322 	movw	r3, #6178	; 0x1822
 800eed4:	2200      	movs	r2, #0
 800eed6:	4905      	ldr	r1, [pc, #20]	; (800eeec <ull_force_clocks+0x28>)
 800eed8:	f7ff ffd5 	bl	800ee86 <dwt_write16bitoffsetreg>
 800eedc:	e7f7      	b.n	800eece <ull_force_clocks+0xa>
 800eede:	f44f 7300 	mov.w	r3, #512	; 0x200
 800eee2:	2200      	movs	r2, #0
 800eee4:	4901      	ldr	r1, [pc, #4]	; (800eeec <ull_force_clocks+0x28>)
 800eee6:	f7ff ffce 	bl	800ee86 <dwt_write16bitoffsetreg>
 800eeea:	e7f0      	b.n	800eece <ull_force_clocks+0xa>
 800eeec:	00110004 	.word	0x00110004

0800eef0 <__dwt_otp_write_wdata_id_reg>:
 800eef0:	b538      	push	{r3, r4, r5, lr}
 800eef2:	4605      	mov	r5, r0
 800eef4:	460c      	mov	r4, r1
 800eef6:	f441 7300 	orr.w	r3, r1, #512	; 0x200
 800eefa:	b29b      	uxth	r3, r3
 800eefc:	2200      	movs	r2, #0
 800eefe:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800ef02:	f7ff ffc0 	bl	800ee86 <dwt_write16bitoffsetreg>
 800ef06:	b2a3      	uxth	r3, r4
 800ef08:	2200      	movs	r2, #0
 800ef0a:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800ef0e:	4628      	mov	r0, r5
 800ef10:	f7ff ffb9 	bl	800ee86 <dwt_write16bitoffsetreg>
 800ef14:	bd38      	pop	{r3, r4, r5, pc}
	...

0800ef18 <_dwt_otpread>:
 800ef18:	b570      	push	{r4, r5, r6, lr}
 800ef1a:	4604      	mov	r4, r0
 800ef1c:	460e      	mov	r6, r1
 800ef1e:	4d0c      	ldr	r5, [pc, #48]	; (800ef50 <_dwt_otpread+0x38>)
 800ef20:	2301      	movs	r3, #1
 800ef22:	2200      	movs	r2, #0
 800ef24:	4629      	mov	r1, r5
 800ef26:	f7ff ffae 	bl	800ee86 <dwt_write16bitoffsetreg>
 800ef2a:	4633      	mov	r3, r6
 800ef2c:	2200      	movs	r2, #0
 800ef2e:	4909      	ldr	r1, [pc, #36]	; (800ef54 <_dwt_otpread+0x3c>)
 800ef30:	4620      	mov	r0, r4
 800ef32:	f7ff ffa8 	bl	800ee86 <dwt_write16bitoffsetreg>
 800ef36:	2302      	movs	r3, #2
 800ef38:	2200      	movs	r2, #0
 800ef3a:	4629      	mov	r1, r5
 800ef3c:	4620      	mov	r0, r4
 800ef3e:	f7ff ffa2 	bl	800ee86 <dwt_write16bitoffsetreg>
 800ef42:	2200      	movs	r2, #0
 800ef44:	4904      	ldr	r1, [pc, #16]	; (800ef58 <_dwt_otpread+0x40>)
 800ef46:	4620      	mov	r0, r4
 800ef48:	f7ff fb29 	bl	800e59e <dwt_read32bitoffsetreg>
 800ef4c:	bd70      	pop	{r4, r5, r6, pc}
 800ef4e:	bf00      	nop
 800ef50:	000b0008 	.word	0x000b0008
 800ef54:	000b0004 	.word	0x000b0004
 800ef58:	000b0010 	.word	0x000b0010

0800ef5c <dwt_write32bitoffsetreg>:
 800ef5c:	b510      	push	{r4, lr}
 800ef5e:	b084      	sub	sp, #16
 800ef60:	f88d 300c 	strb.w	r3, [sp, #12]
 800ef64:	0a1c      	lsrs	r4, r3, #8
 800ef66:	f88d 400d 	strb.w	r4, [sp, #13]
 800ef6a:	0c1c      	lsrs	r4, r3, #16
 800ef6c:	f88d 400e 	strb.w	r4, [sp, #14]
 800ef70:	0e1b      	lsrs	r3, r3, #24
 800ef72:	f88d 300f 	strb.w	r3, [sp, #15]
 800ef76:	ab03      	add	r3, sp, #12
 800ef78:	9300      	str	r3, [sp, #0]
 800ef7a:	2304      	movs	r3, #4
 800ef7c:	b292      	uxth	r2, r2
 800ef7e:	f7ff ff77 	bl	800ee70 <dwt_writetodevice>
 800ef82:	b004      	add	sp, #16
 800ef84:	bd10      	pop	{r4, pc}

0800ef86 <_dwt_adjust_delaytime>:
 800ef86:	b538      	push	{r3, r4, r5, lr}
 800ef88:	4604      	mov	r4, r0
 800ef8a:	b989      	cbnz	r1, 800efb0 <_dwt_adjust_delaytime+0x2a>
 800ef8c:	2200      	movs	r2, #0
 800ef8e:	2128      	movs	r1, #40	; 0x28
 800ef90:	f7ff fb05 	bl	800e59e <dwt_read32bitoffsetreg>
 800ef94:	4605      	mov	r5, r0
 800ef96:	2201      	movs	r2, #1
 800ef98:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800ef9c:	4620      	mov	r0, r4
 800ef9e:	f7ff fb53 	bl	800e648 <dwt_read8bitoffsetreg>
 800efa2:	1a2b      	subs	r3, r5, r0
 800efa4:	2200      	movs	r2, #0
 800efa6:	2128      	movs	r1, #40	; 0x28
 800efa8:	4620      	mov	r0, r4
 800efaa:	f7ff ffd7 	bl	800ef5c <dwt_write32bitoffsetreg>
 800efae:	bd38      	pop	{r3, r4, r5, pc}
 800efb0:	2200      	movs	r2, #0
 800efb2:	2128      	movs	r1, #40	; 0x28
 800efb4:	f7ff faf3 	bl	800e59e <dwt_read32bitoffsetreg>
 800efb8:	4605      	mov	r5, r0
 800efba:	2201      	movs	r2, #1
 800efbc:	217c      	movs	r1, #124	; 0x7c
 800efbe:	4620      	mov	r0, r4
 800efc0:	f7ff fb42 	bl	800e648 <dwt_read8bitoffsetreg>
 800efc4:	1a2b      	subs	r3, r5, r0
 800efc6:	2200      	movs	r2, #0
 800efc8:	2128      	movs	r1, #40	; 0x28
 800efca:	4620      	mov	r0, r4
 800efcc:	f7ff ffc6 	bl	800ef5c <dwt_write32bitoffsetreg>
 800efd0:	e7ed      	b.n	800efae <_dwt_adjust_delaytime+0x28>

0800efd2 <ull_setrxaftertxdelay>:
 800efd2:	b538      	push	{r3, r4, r5, lr}
 800efd4:	4605      	mov	r5, r0
 800efd6:	460c      	mov	r4, r1
 800efd8:	2200      	movs	r2, #0
 800efda:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800efde:	f7ff fade 	bl	800e59e <dwt_read32bitoffsetreg>
 800efe2:	0d00      	lsrs	r0, r0, #20
 800efe4:	0500      	lsls	r0, r0, #20
 800efe6:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800efea:	4303      	orrs	r3, r0
 800efec:	2200      	movs	r2, #0
 800efee:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800eff2:	4628      	mov	r0, r5
 800eff4:	f7ff ffb2 	bl	800ef5c <dwt_write32bitoffsetreg>
 800eff8:	bd38      	pop	{r3, r4, r5, pc}
	...

0800effc <ull_setfinegraintxseq>:
 800effc:	b508      	push	{r3, lr}
 800effe:	b929      	cbnz	r1, 800f00c <ull_setfinegraintxseq+0x10>
 800f000:	4b05      	ldr	r3, [pc, #20]	; (800f018 <ull_setfinegraintxseq+0x1c>)
 800f002:	2202      	movs	r2, #2
 800f004:	4905      	ldr	r1, [pc, #20]	; (800f01c <ull_setfinegraintxseq+0x20>)
 800f006:	f7ff ffa9 	bl	800ef5c <dwt_write32bitoffsetreg>
 800f00a:	bd08      	pop	{r3, pc}
 800f00c:	4b04      	ldr	r3, [pc, #16]	; (800f020 <ull_setfinegraintxseq+0x24>)
 800f00e:	2202      	movs	r2, #2
 800f010:	4902      	ldr	r1, [pc, #8]	; (800f01c <ull_setfinegraintxseq+0x20>)
 800f012:	f7ff ffa3 	bl	800ef5c <dwt_write32bitoffsetreg>
 800f016:	e7f8      	b.n	800f00a <ull_setfinegraintxseq+0xe>
 800f018:	00d20874 	.word	0x00d20874
 800f01c:	00110010 	.word	0x00110010
 800f020:	04d28874 	.word	0x04d28874

0800f024 <ull_setlnapamode>:
 800f024:	b538      	push	{r3, r4, r5, lr}
 800f026:	4605      	mov	r5, r0
 800f028:	460c      	mov	r4, r1
 800f02a:	2200      	movs	r2, #0
 800f02c:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800f030:	f7ff fab5 	bl	800e59e <dwt_read32bitoffsetreg>
 800f034:	f420 337c 	bic.w	r3, r0, #258048	; 0x3f000
 800f038:	f014 0f01 	tst.w	r4, #1
 800f03c:	bf18      	it	ne
 800f03e:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
 800f042:	f014 0f02 	tst.w	r4, #2
 800f046:	bf18      	it	ne
 800f048:	f443 5300 	orrne.w	r3, r3, #8192	; 0x2000
 800f04c:	f014 0f04 	tst.w	r4, #4
 800f050:	bf18      	it	ne
 800f052:	f443 3390 	orrne.w	r3, r3, #73728	; 0x12000
 800f056:	2200      	movs	r2, #0
 800f058:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800f05c:	4628      	mov	r0, r5
 800f05e:	f7ff ff7d 	bl	800ef5c <dwt_write32bitoffsetreg>
 800f062:	bd38      	pop	{r3, r4, r5, pc}

0800f064 <ull_configurestskey>:
 800f064:	b538      	push	{r3, r4, r5, lr}
 800f066:	4605      	mov	r5, r0
 800f068:	460c      	mov	r4, r1
 800f06a:	680b      	ldr	r3, [r1, #0]
 800f06c:	2200      	movs	r2, #0
 800f06e:	490b      	ldr	r1, [pc, #44]	; (800f09c <ull_configurestskey+0x38>)
 800f070:	f7ff ff74 	bl	800ef5c <dwt_write32bitoffsetreg>
 800f074:	6863      	ldr	r3, [r4, #4]
 800f076:	2200      	movs	r2, #0
 800f078:	4909      	ldr	r1, [pc, #36]	; (800f0a0 <ull_configurestskey+0x3c>)
 800f07a:	4628      	mov	r0, r5
 800f07c:	f7ff ff6e 	bl	800ef5c <dwt_write32bitoffsetreg>
 800f080:	68a3      	ldr	r3, [r4, #8]
 800f082:	2200      	movs	r2, #0
 800f084:	4907      	ldr	r1, [pc, #28]	; (800f0a4 <ull_configurestskey+0x40>)
 800f086:	4628      	mov	r0, r5
 800f088:	f7ff ff68 	bl	800ef5c <dwt_write32bitoffsetreg>
 800f08c:	68e3      	ldr	r3, [r4, #12]
 800f08e:	2200      	movs	r2, #0
 800f090:	4905      	ldr	r1, [pc, #20]	; (800f0a8 <ull_configurestskey+0x44>)
 800f092:	4628      	mov	r0, r5
 800f094:	f7ff ff62 	bl	800ef5c <dwt_write32bitoffsetreg>
 800f098:	bd38      	pop	{r3, r4, r5, pc}
 800f09a:	bf00      	nop
 800f09c:	0002000c 	.word	0x0002000c
 800f0a0:	00020010 	.word	0x00020010
 800f0a4:	00020014 	.word	0x00020014
 800f0a8:	00020018 	.word	0x00020018

0800f0ac <ull_configurestsiv>:
 800f0ac:	b538      	push	{r3, r4, r5, lr}
 800f0ae:	4605      	mov	r5, r0
 800f0b0:	460c      	mov	r4, r1
 800f0b2:	680b      	ldr	r3, [r1, #0]
 800f0b4:	2200      	movs	r2, #0
 800f0b6:	490b      	ldr	r1, [pc, #44]	; (800f0e4 <ull_configurestsiv+0x38>)
 800f0b8:	f7ff ff50 	bl	800ef5c <dwt_write32bitoffsetreg>
 800f0bc:	6863      	ldr	r3, [r4, #4]
 800f0be:	2200      	movs	r2, #0
 800f0c0:	4909      	ldr	r1, [pc, #36]	; (800f0e8 <ull_configurestsiv+0x3c>)
 800f0c2:	4628      	mov	r0, r5
 800f0c4:	f7ff ff4a 	bl	800ef5c <dwt_write32bitoffsetreg>
 800f0c8:	68a3      	ldr	r3, [r4, #8]
 800f0ca:	2200      	movs	r2, #0
 800f0cc:	4907      	ldr	r1, [pc, #28]	; (800f0ec <ull_configurestsiv+0x40>)
 800f0ce:	4628      	mov	r0, r5
 800f0d0:	f7ff ff44 	bl	800ef5c <dwt_write32bitoffsetreg>
 800f0d4:	68e3      	ldr	r3, [r4, #12]
 800f0d6:	2200      	movs	r2, #0
 800f0d8:	4905      	ldr	r1, [pc, #20]	; (800f0f0 <ull_configurestsiv+0x44>)
 800f0da:	4628      	mov	r0, r5
 800f0dc:	f7ff ff3e 	bl	800ef5c <dwt_write32bitoffsetreg>
 800f0e0:	bd38      	pop	{r3, r4, r5, pc}
 800f0e2:	bf00      	nop
 800f0e4:	0002001c 	.word	0x0002001c
 800f0e8:	00020020 	.word	0x00020020
 800f0ec:	00020024 	.word	0x00020024
 800f0f0:	00020028 	.word	0x00020028

0800f0f4 <ull_configmrxlut>:
 800f0f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0f8:	4604      	mov	r4, r0
 800f0fa:	4d35      	ldr	r5, [pc, #212]	; (800f1d0 <ull_configmrxlut+0xdc>)
 800f0fc:	4b35      	ldr	r3, [pc, #212]	; (800f1d4 <ull_configmrxlut+0xe0>)
 800f0fe:	2905      	cmp	r1, #5
 800f100:	bf18      	it	ne
 800f102:	461d      	movne	r5, r3
 800f104:	4e34      	ldr	r6, [pc, #208]	; (800f1d8 <ull_configmrxlut+0xe4>)
 800f106:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800f10a:	2905      	cmp	r1, #5
 800f10c:	bf18      	it	ne
 800f10e:	461e      	movne	r6, r3
 800f110:	4f32      	ldr	r7, [pc, #200]	; (800f1dc <ull_configmrxlut+0xe8>)
 800f112:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800f116:	2905      	cmp	r1, #5
 800f118:	bf18      	it	ne
 800f11a:	461f      	movne	r7, r3
 800f11c:	4a30      	ldr	r2, [pc, #192]	; (800f1e0 <ull_configmrxlut+0xec>)
 800f11e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800f122:	2905      	cmp	r1, #5
 800f124:	bf0c      	ite	eq
 800f126:	4690      	moveq	r8, r2
 800f128:	4698      	movne	r8, r3
 800f12a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f12e:	f5a3 5388 	sub.w	r3, r3, #4352	; 0x1100
 800f132:	2905      	cmp	r1, #5
 800f134:	bf0c      	ite	eq
 800f136:	4691      	moveq	r9, r2
 800f138:	4699      	movne	r9, r3
 800f13a:	4a2a      	ldr	r2, [pc, #168]	; (800f1e4 <ull_configmrxlut+0xf0>)
 800f13c:	f5a3 63af 	sub.w	r3, r3, #1400	; 0x578
 800f140:	2905      	cmp	r1, #5
 800f142:	bf0c      	ite	eq
 800f144:	4692      	moveq	sl, r2
 800f146:	469a      	movne	sl, r3
 800f148:	4b27      	ldr	r3, [pc, #156]	; (800f1e8 <ull_configmrxlut+0xf4>)
 800f14a:	4a28      	ldr	r2, [pc, #160]	; (800f1ec <ull_configmrxlut+0xf8>)
 800f14c:	2905      	cmp	r1, #5
 800f14e:	bf0c      	ite	eq
 800f150:	469b      	moveq	fp, r3
 800f152:	4693      	movne	fp, r2
 800f154:	f44f 7310 	mov.w	r3, #576	; 0x240
 800f158:	2200      	movs	r2, #0
 800f15a:	4925      	ldr	r1, [pc, #148]	; (800f1f0 <ull_configmrxlut+0xfc>)
 800f15c:	f7ff fefe 	bl	800ef5c <dwt_write32bitoffsetreg>
 800f160:	4b24      	ldr	r3, [pc, #144]	; (800f1f4 <ull_configmrxlut+0x100>)
 800f162:	2200      	movs	r2, #0
 800f164:	4924      	ldr	r1, [pc, #144]	; (800f1f8 <ull_configmrxlut+0x104>)
 800f166:	4620      	mov	r0, r4
 800f168:	f7ff fef8 	bl	800ef5c <dwt_write32bitoffsetreg>
 800f16c:	4b23      	ldr	r3, [pc, #140]	; (800f1fc <ull_configmrxlut+0x108>)
 800f16e:	2200      	movs	r2, #0
 800f170:	4923      	ldr	r1, [pc, #140]	; (800f200 <ull_configmrxlut+0x10c>)
 800f172:	4620      	mov	r0, r4
 800f174:	f7ff fef2 	bl	800ef5c <dwt_write32bitoffsetreg>
 800f178:	465b      	mov	r3, fp
 800f17a:	2200      	movs	r2, #0
 800f17c:	4921      	ldr	r1, [pc, #132]	; (800f204 <ull_configmrxlut+0x110>)
 800f17e:	4620      	mov	r0, r4
 800f180:	f7ff feec 	bl	800ef5c <dwt_write32bitoffsetreg>
 800f184:	4653      	mov	r3, sl
 800f186:	2200      	movs	r2, #0
 800f188:	491f      	ldr	r1, [pc, #124]	; (800f208 <ull_configmrxlut+0x114>)
 800f18a:	4620      	mov	r0, r4
 800f18c:	f7ff fee6 	bl	800ef5c <dwt_write32bitoffsetreg>
 800f190:	464b      	mov	r3, r9
 800f192:	2200      	movs	r2, #0
 800f194:	491d      	ldr	r1, [pc, #116]	; (800f20c <ull_configmrxlut+0x118>)
 800f196:	4620      	mov	r0, r4
 800f198:	f7ff fee0 	bl	800ef5c <dwt_write32bitoffsetreg>
 800f19c:	4643      	mov	r3, r8
 800f19e:	2200      	movs	r2, #0
 800f1a0:	491b      	ldr	r1, [pc, #108]	; (800f210 <ull_configmrxlut+0x11c>)
 800f1a2:	4620      	mov	r0, r4
 800f1a4:	f7ff feda 	bl	800ef5c <dwt_write32bitoffsetreg>
 800f1a8:	463b      	mov	r3, r7
 800f1aa:	2200      	movs	r2, #0
 800f1ac:	4919      	ldr	r1, [pc, #100]	; (800f214 <ull_configmrxlut+0x120>)
 800f1ae:	4620      	mov	r0, r4
 800f1b0:	f7ff fed4 	bl	800ef5c <dwt_write32bitoffsetreg>
 800f1b4:	4633      	mov	r3, r6
 800f1b6:	2200      	movs	r2, #0
 800f1b8:	4917      	ldr	r1, [pc, #92]	; (800f218 <ull_configmrxlut+0x124>)
 800f1ba:	4620      	mov	r0, r4
 800f1bc:	f7ff fece 	bl	800ef5c <dwt_write32bitoffsetreg>
 800f1c0:	462b      	mov	r3, r5
 800f1c2:	2200      	movs	r2, #0
 800f1c4:	4915      	ldr	r1, [pc, #84]	; (800f21c <ull_configmrxlut+0x128>)
 800f1c6:	4620      	mov	r0, r4
 800f1c8:	f7ff fec8 	bl	800ef5c <dwt_write32bitoffsetreg>
 800f1cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1d0:	00039ff6 	.word	0x00039ff6
 800f1d4:	00055ffe 	.word	0x00055ffe
 800f1d8:	00039dfe 	.word	0x00039dfe
 800f1dc:	00039c7e 	.word	0x00039c7e
 800f1e0:	00038efe 	.word	0x00038efe
 800f1e4:	0003876e 	.word	0x0003876e
 800f1e8:	0003803e 	.word	0x0003803e
 800f1ec:	0005407e 	.word	0x0005407e
 800f1f0:	0003001c 	.word	0x0003001c
 800f1f4:	1a491248 	.word	0x1a491248
 800f1f8:	00030020 	.word	0x00030020
 800f1fc:	2db248db 	.word	0x2db248db
 800f200:	00030024 	.word	0x00030024
 800f204:	0003002c 	.word	0x0003002c
 800f208:	00030030 	.word	0x00030030
 800f20c:	00030034 	.word	0x00030034
 800f210:	00030038 	.word	0x00030038
 800f214:	0003003c 	.word	0x0003003c
 800f218:	00030040 	.word	0x00030040
 800f21c:	00030044 	.word	0x00030044

0800f220 <ull_disable_rftx_blocks>:
 800f220:	b508      	push	{r3, lr}
 800f222:	2300      	movs	r3, #0
 800f224:	461a      	mov	r2, r3
 800f226:	4902      	ldr	r1, [pc, #8]	; (800f230 <ull_disable_rftx_blocks+0x10>)
 800f228:	f7ff fe98 	bl	800ef5c <dwt_write32bitoffsetreg>
 800f22c:	bd08      	pop	{r3, pc}
 800f22e:	bf00      	nop
 800f230:	00070004 	.word	0x00070004

0800f234 <ull_disable_rf_tx>:
 800f234:	b538      	push	{r3, r4, r5, lr}
 800f236:	4604      	mov	r4, r0
 800f238:	460d      	mov	r5, r1
 800f23a:	2300      	movs	r3, #0
 800f23c:	461a      	mov	r2, r3
 800f23e:	490a      	ldr	r1, [pc, #40]	; (800f268 <ull_disable_rf_tx+0x34>)
 800f240:	f7ff fe8c 	bl	800ef5c <dwt_write32bitoffsetreg>
 800f244:	2300      	movs	r3, #0
 800f246:	461a      	mov	r2, r3
 800f248:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 800f24c:	4620      	mov	r0, r4
 800f24e:	f7ff fe85 	bl	800ef5c <dwt_write32bitoffsetreg>
 800f252:	b905      	cbnz	r5, 800f256 <ull_disable_rf_tx+0x22>
 800f254:	bd38      	pop	{r3, r4, r5, pc}
 800f256:	f04f 53e0 	mov.w	r3, #469762048	; 0x1c000000
 800f25a:	2200      	movs	r2, #0
 800f25c:	4903      	ldr	r1, [pc, #12]	; (800f26c <ull_disable_rf_tx+0x38>)
 800f25e:	4620      	mov	r0, r4
 800f260:	f7ff fe7c 	bl	800ef5c <dwt_write32bitoffsetreg>
 800f264:	e7f6      	b.n	800f254 <ull_disable_rf_tx+0x20>
 800f266:	bf00      	nop
 800f268:	00070048 	.word	0x00070048
 800f26c:	00070014 	.word	0x00070014

0800f270 <ull_repeated_cw>:
 800f270:	b570      	push	{r4, r5, r6, lr}
 800f272:	4606      	mov	r6, r0
 800f274:	460c      	mov	r4, r1
 800f276:	4615      	mov	r5, r2
 800f278:	2100      	movs	r1, #0
 800f27a:	f7ff febf 	bl	800effc <ull_setfinegraintxseq>
 800f27e:	2d0f      	cmp	r5, #15
 800f280:	bfa8      	it	ge
 800f282:	250f      	movge	r5, #15
 800f284:	1e63      	subs	r3, r4, #1
 800f286:	2b03      	cmp	r3, #3
 800f288:	bf28      	it	cs
 800f28a:	2404      	movcs	r4, #4
 800f28c:	2310      	movs	r3, #16
 800f28e:	4123      	asrs	r3, r4
 800f290:	2200      	movs	r2, #0
 800f292:	4907      	ldr	r1, [pc, #28]	; (800f2b0 <ull_repeated_cw+0x40>)
 800f294:	4630      	mov	r0, r6
 800f296:	f7ff fe61 	bl	800ef5c <dwt_write32bitoffsetreg>
 800f29a:	1e63      	subs	r3, r4, #1
 800f29c:	009b      	lsls	r3, r3, #2
 800f29e:	fa05 f303 	lsl.w	r3, r5, r3
 800f2a2:	2200      	movs	r2, #0
 800f2a4:	4903      	ldr	r1, [pc, #12]	; (800f2b4 <ull_repeated_cw+0x44>)
 800f2a6:	4630      	mov	r0, r6
 800f2a8:	f7ff fe58 	bl	800ef5c <dwt_write32bitoffsetreg>
 800f2ac:	bd70      	pop	{r4, r5, r6, pc}
 800f2ae:	bf00      	nop
 800f2b0:	00070028 	.word	0x00070028
 800f2b4:	00080018 	.word	0x00080018

0800f2b8 <ull_readrxdata>:
 800f2b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f2ba:	b083      	sub	sp, #12
 800f2bc:	6d04      	ldr	r4, [r0, #80]	; 0x50
 800f2be:	7ba4      	ldrb	r4, [r4, #14]
 800f2c0:	2c03      	cmp	r4, #3
 800f2c2:	bf0c      	ite	eq
 800f2c4:	f44f 1c98 	moveq.w	ip, #1245184	; 0x130000
 800f2c8:	f44f 1c90 	movne.w	ip, #1179648	; 0x120000
 800f2cc:	189c      	adds	r4, r3, r2
 800f2ce:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800f2d2:	da19      	bge.n	800f308 <ull_readrxdata+0x50>
 800f2d4:	461d      	mov	r5, r3
 800f2d6:	4616      	mov	r6, r2
 800f2d8:	460f      	mov	r7, r1
 800f2da:	4604      	mov	r4, r0
 800f2dc:	2b7f      	cmp	r3, #127	; 0x7f
 800f2de:	d915      	bls.n	800f30c <ull_readrxdata+0x54>
 800f2e0:	ea4f 431c 	mov.w	r3, ip, lsr #16
 800f2e4:	2200      	movs	r2, #0
 800f2e6:	490d      	ldr	r1, [pc, #52]	; (800f31c <ull_readrxdata+0x64>)
 800f2e8:	f7ff fe38 	bl	800ef5c <dwt_write32bitoffsetreg>
 800f2ec:	462b      	mov	r3, r5
 800f2ee:	2200      	movs	r2, #0
 800f2f0:	490b      	ldr	r1, [pc, #44]	; (800f320 <ull_readrxdata+0x68>)
 800f2f2:	4620      	mov	r0, r4
 800f2f4:	f7ff fe32 	bl	800ef5c <dwt_write32bitoffsetreg>
 800f2f8:	9700      	str	r7, [sp, #0]
 800f2fa:	4633      	mov	r3, r6
 800f2fc:	2200      	movs	r2, #0
 800f2fe:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800f302:	4620      	mov	r0, r4
 800f304:	f7ff f941 	bl	800e58a <dwt_readfromdevice>
 800f308:	b003      	add	sp, #12
 800f30a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f30c:	9100      	str	r1, [sp, #0]
 800f30e:	4613      	mov	r3, r2
 800f310:	462a      	mov	r2, r5
 800f312:	4661      	mov	r1, ip
 800f314:	f7ff f939 	bl	800e58a <dwt_readfromdevice>
 800f318:	e7f6      	b.n	800f308 <ull_readrxdata+0x50>
 800f31a:	bf00      	nop
 800f31c:	001f0004 	.word	0x001f0004
 800f320:	001f0008 	.word	0x001f0008

0800f324 <dwt_write8bitoffsetreg>:
 800f324:	b510      	push	{r4, lr}
 800f326:	b084      	sub	sp, #16
 800f328:	ac04      	add	r4, sp, #16
 800f32a:	f804 3d01 	strb.w	r3, [r4, #-1]!
 800f32e:	9400      	str	r4, [sp, #0]
 800f330:	2301      	movs	r3, #1
 800f332:	b292      	uxth	r2, r2
 800f334:	f7ff fd9c 	bl	800ee70 <dwt_writetodevice>
 800f338:	b004      	add	sp, #16
 800f33a:	bd10      	pop	{r4, pc}

0800f33c <ull_getframelength>:
 800f33c:	b510      	push	{r4, lr}
 800f33e:	4604      	mov	r4, r0
 800f340:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800f342:	7b9b      	ldrb	r3, [r3, #14]
 800f344:	2b01      	cmp	r3, #1
 800f346:	d013      	beq.n	800f370 <ull_getframelength+0x34>
 800f348:	2b03      	cmp	r3, #3
 800f34a:	d11d      	bne.n	800f388 <ull_getframelength+0x4c>
 800f34c:	23f0      	movs	r3, #240	; 0xf0
 800f34e:	2200      	movs	r2, #0
 800f350:	4912      	ldr	r1, [pc, #72]	; (800f39c <ull_getframelength+0x60>)
 800f352:	f7ff ffe7 	bl	800f324 <dwt_write8bitoffsetreg>
 800f356:	2200      	movs	r2, #0
 800f358:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 800f35c:	4620      	mov	r0, r4
 800f35e:	f7ff f934 	bl	800e5ca <dwt_read16bitoffsetreg>
 800f362:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f364:	7ada      	ldrb	r2, [r3, #11]
 800f366:	b1a2      	cbz	r2, 800f392 <ull_getframelength+0x56>
 800f368:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800f36c:	83d8      	strh	r0, [r3, #30]
 800f36e:	bd10      	pop	{r4, pc}
 800f370:	230f      	movs	r3, #15
 800f372:	2200      	movs	r2, #0
 800f374:	4909      	ldr	r1, [pc, #36]	; (800f39c <ull_getframelength+0x60>)
 800f376:	f7ff ffd5 	bl	800f324 <dwt_write8bitoffsetreg>
 800f37a:	2200      	movs	r2, #0
 800f37c:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
 800f380:	4620      	mov	r0, r4
 800f382:	f7ff f922 	bl	800e5ca <dwt_read16bitoffsetreg>
 800f386:	e7ec      	b.n	800f362 <ull_getframelength+0x26>
 800f388:	2200      	movs	r2, #0
 800f38a:	214c      	movs	r1, #76	; 0x4c
 800f38c:	f7ff f91d 	bl	800e5ca <dwt_read16bitoffsetreg>
 800f390:	e7e7      	b.n	800f362 <ull_getframelength+0x26>
 800f392:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800f396:	83d8      	strh	r0, [r3, #30]
 800f398:	e7e9      	b.n	800f36e <ull_getframelength+0x32>
 800f39a:	bf00      	nop
 800f39c:	00010018 	.word	0x00010018

0800f3a0 <_dwt_clear_db_events>:
 800f3a0:	b510      	push	{r4, lr}
 800f3a2:	4604      	mov	r4, r0
 800f3a4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800f3a6:	7b9b      	ldrb	r3, [r3, #14]
 800f3a8:	2b01      	cmp	r3, #1
 800f3aa:	d004      	beq.n	800f3b6 <_dwt_clear_db_events+0x16>
 800f3ac:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f3ae:	7b9b      	ldrb	r3, [r3, #14]
 800f3b0:	2b03      	cmp	r3, #3
 800f3b2:	d006      	beq.n	800f3c2 <_dwt_clear_db_events+0x22>
 800f3b4:	bd10      	pop	{r4, pc}
 800f3b6:	230f      	movs	r3, #15
 800f3b8:	2200      	movs	r2, #0
 800f3ba:	4905      	ldr	r1, [pc, #20]	; (800f3d0 <_dwt_clear_db_events+0x30>)
 800f3bc:	f7ff ffb2 	bl	800f324 <dwt_write8bitoffsetreg>
 800f3c0:	e7f4      	b.n	800f3ac <_dwt_clear_db_events+0xc>
 800f3c2:	23f0      	movs	r3, #240	; 0xf0
 800f3c4:	2200      	movs	r2, #0
 800f3c6:	4902      	ldr	r1, [pc, #8]	; (800f3d0 <_dwt_clear_db_events+0x30>)
 800f3c8:	4620      	mov	r0, r4
 800f3ca:	f7ff ffab 	bl	800f324 <dwt_write8bitoffsetreg>
 800f3ce:	e7f1      	b.n	800f3b4 <_dwt_clear_db_events+0x14>
 800f3d0:	00010018 	.word	0x00010018

0800f3d4 <ull_clearaonconfig>:
 800f3d4:	b538      	push	{r3, r4, r5, lr}
 800f3d6:	4604      	mov	r4, r0
 800f3d8:	2300      	movs	r3, #0
 800f3da:	461a      	mov	r2, r3
 800f3dc:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 800f3e0:	f7ff fd51 	bl	800ee86 <dwt_write16bitoffsetreg>
 800f3e4:	2300      	movs	r3, #0
 800f3e6:	461a      	mov	r2, r3
 800f3e8:	4908      	ldr	r1, [pc, #32]	; (800f40c <ull_clearaonconfig+0x38>)
 800f3ea:	4620      	mov	r0, r4
 800f3ec:	f7ff ff9a 	bl	800f324 <dwt_write8bitoffsetreg>
 800f3f0:	4d07      	ldr	r5, [pc, #28]	; (800f410 <ull_clearaonconfig+0x3c>)
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	461a      	mov	r2, r3
 800f3f6:	4629      	mov	r1, r5
 800f3f8:	4620      	mov	r0, r4
 800f3fa:	f7ff ff93 	bl	800f324 <dwt_write8bitoffsetreg>
 800f3fe:	2302      	movs	r3, #2
 800f400:	2200      	movs	r2, #0
 800f402:	4629      	mov	r1, r5
 800f404:	4620      	mov	r0, r4
 800f406:	f7ff ff8d 	bl	800f324 <dwt_write8bitoffsetreg>
 800f40a:	bd38      	pop	{r3, r4, r5, pc}
 800f40c:	000a0014 	.word	0x000a0014
 800f410:	000a0004 	.word	0x000a0004

0800f414 <ull_configeventcounters>:
 800f414:	b538      	push	{r3, r4, r5, lr}
 800f416:	4605      	mov	r5, r0
 800f418:	460c      	mov	r4, r1
 800f41a:	2302      	movs	r3, #2
 800f41c:	2200      	movs	r2, #0
 800f41e:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800f422:	f7ff ff7f 	bl	800f324 <dwt_write8bitoffsetreg>
 800f426:	b904      	cbnz	r4, 800f42a <ull_configeventcounters+0x16>
 800f428:	bd38      	pop	{r3, r4, r5, pc}
 800f42a:	2301      	movs	r3, #1
 800f42c:	2200      	movs	r2, #0
 800f42e:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800f432:	4628      	mov	r0, r5
 800f434:	f7ff ff76 	bl	800f324 <dwt_write8bitoffsetreg>
 800f438:	e7f6      	b.n	800f428 <ull_configeventcounters+0x14>
	...

0800f43c <ull_aon_read>:
 800f43c:	b538      	push	{r3, r4, r5, lr}
 800f43e:	4604      	mov	r4, r0
 800f440:	460b      	mov	r3, r1
 800f442:	2200      	movs	r2, #0
 800f444:	490a      	ldr	r1, [pc, #40]	; (800f470 <ull_aon_read+0x34>)
 800f446:	f7ff fd1e 	bl	800ee86 <dwt_write16bitoffsetreg>
 800f44a:	4d0a      	ldr	r5, [pc, #40]	; (800f474 <ull_aon_read+0x38>)
 800f44c:	2388      	movs	r3, #136	; 0x88
 800f44e:	2200      	movs	r2, #0
 800f450:	4629      	mov	r1, r5
 800f452:	4620      	mov	r0, r4
 800f454:	f7ff ff66 	bl	800f324 <dwt_write8bitoffsetreg>
 800f458:	2300      	movs	r3, #0
 800f45a:	461a      	mov	r2, r3
 800f45c:	4629      	mov	r1, r5
 800f45e:	4620      	mov	r0, r4
 800f460:	f7ff ff60 	bl	800f324 <dwt_write8bitoffsetreg>
 800f464:	2200      	movs	r2, #0
 800f466:	4904      	ldr	r1, [pc, #16]	; (800f478 <ull_aon_read+0x3c>)
 800f468:	4620      	mov	r0, r4
 800f46a:	f7ff f8ed 	bl	800e648 <dwt_read8bitoffsetreg>
 800f46e:	bd38      	pop	{r3, r4, r5, pc}
 800f470:	000a000c 	.word	0x000a000c
 800f474:	000a0004 	.word	0x000a0004
 800f478:	000a0008 	.word	0x000a0008

0800f47c <ull_aon_write>:
 800f47c:	b570      	push	{r4, r5, r6, lr}
 800f47e:	4604      	mov	r4, r0
 800f480:	460b      	mov	r3, r1
 800f482:	4615      	mov	r5, r2
 800f484:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800f488:	bf34      	ite	cc
 800f48a:	2600      	movcc	r6, #0
 800f48c:	2620      	movcs	r6, #32
 800f48e:	2200      	movs	r2, #0
 800f490:	490b      	ldr	r1, [pc, #44]	; (800f4c0 <ull_aon_write+0x44>)
 800f492:	f7ff fcf8 	bl	800ee86 <dwt_write16bitoffsetreg>
 800f496:	462b      	mov	r3, r5
 800f498:	2200      	movs	r2, #0
 800f49a:	490a      	ldr	r1, [pc, #40]	; (800f4c4 <ull_aon_write+0x48>)
 800f49c:	4620      	mov	r0, r4
 800f49e:	f7ff ff41 	bl	800f324 <dwt_write8bitoffsetreg>
 800f4a2:	4d09      	ldr	r5, [pc, #36]	; (800f4c8 <ull_aon_write+0x4c>)
 800f4a4:	f046 0390 	orr.w	r3, r6, #144	; 0x90
 800f4a8:	2200      	movs	r2, #0
 800f4aa:	4629      	mov	r1, r5
 800f4ac:	4620      	mov	r0, r4
 800f4ae:	f7ff ff39 	bl	800f324 <dwt_write8bitoffsetreg>
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	461a      	mov	r2, r3
 800f4b6:	4629      	mov	r1, r5
 800f4b8:	4620      	mov	r0, r4
 800f4ba:	f7ff ff33 	bl	800f324 <dwt_write8bitoffsetreg>
 800f4be:	bd70      	pop	{r4, r5, r6, pc}
 800f4c0:	000a000c 	.word	0x000a000c
 800f4c4:	000a0010 	.word	0x000a0010
 800f4c8:	000a0004 	.word	0x000a0004

0800f4cc <ull_configuresleep>:
 800f4cc:	b570      	push	{r4, r5, r6, lr}
 800f4ce:	4604      	mov	r4, r0
 800f4d0:	460d      	mov	r5, r1
 800f4d2:	4616      	mov	r6, r2
 800f4d4:	2200      	movs	r2, #0
 800f4d6:	f240 110b 	movw	r1, #267	; 0x10b
 800f4da:	f7ff ffcf 	bl	800f47c <ull_aon_write>
 800f4de:	f44f 7182 	mov.w	r1, #260	; 0x104
 800f4e2:	4620      	mov	r0, r4
 800f4e4:	f7ff ffaa 	bl	800f43c <ull_aon_read>
 800f4e8:	f000 021f 	and.w	r2, r0, #31
 800f4ec:	f44f 7182 	mov.w	r1, #260	; 0x104
 800f4f0:	4620      	mov	r0, r4
 800f4f2:	f7ff ffc3 	bl	800f47c <ull_aon_write>
 800f4f6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f4f8:	8a1a      	ldrh	r2, [r3, #16]
 800f4fa:	4315      	orrs	r5, r2
 800f4fc:	821d      	strh	r5, [r3, #16]
 800f4fe:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f500:	8a13      	ldrh	r3, [r2, #16]
 800f502:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800f506:	bf1c      	itt	ne
 800f508:	f423 6300 	bicne.w	r3, r3, #2048	; 0x800
 800f50c:	8213      	strhne	r3, [r2, #16]
 800f50e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f510:	8a1b      	ldrh	r3, [r3, #16]
 800f512:	2200      	movs	r2, #0
 800f514:	f44f 2120 	mov.w	r1, #655360	; 0xa0000
 800f518:	4620      	mov	r0, r4
 800f51a:	f7ff fcb4 	bl	800ee86 <dwt_write16bitoffsetreg>
 800f51e:	4633      	mov	r3, r6
 800f520:	2200      	movs	r2, #0
 800f522:	4902      	ldr	r1, [pc, #8]	; (800f52c <ull_configuresleep+0x60>)
 800f524:	4620      	mov	r0, r4
 800f526:	f7ff fefd 	bl	800f324 <dwt_write8bitoffsetreg>
 800f52a:	bd70      	pop	{r4, r5, r6, pc}
 800f52c:	000a0014 	.word	0x000a0014

0800f530 <ull_setplenfine>:
 800f530:	b508      	push	{r3, lr}
 800f532:	460b      	mov	r3, r1
 800f534:	2201      	movs	r2, #1
 800f536:	2124      	movs	r1, #36	; 0x24
 800f538:	f7ff fef4 	bl	800f324 <dwt_write8bitoffsetreg>
 800f53c:	bd08      	pop	{r3, pc}
	...

0800f540 <ull_update_nonce_GCM>:
 800f540:	b500      	push	{lr}
 800f542:	b083      	sub	sp, #12
 800f544:	9100      	str	r1, [sp, #0]
 800f546:	230c      	movs	r3, #12
 800f548:	2200      	movs	r2, #0
 800f54a:	4903      	ldr	r1, [pc, #12]	; (800f558 <ull_update_nonce_GCM+0x18>)
 800f54c:	f7ff fc90 	bl	800ee70 <dwt_writetodevice>
 800f550:	b003      	add	sp, #12
 800f552:	f85d fb04 	ldr.w	pc, [sp], #4
 800f556:	bf00      	nop
 800f558:	00010034 	.word	0x00010034

0800f55c <ull_update_nonce_CCM>:
 800f55c:	b500      	push	{lr}
 800f55e:	b087      	sub	sp, #28
 800f560:	4613      	mov	r3, r2
 800f562:	7a8a      	ldrb	r2, [r1, #10]
 800f564:	f88d 2008 	strb.w	r2, [sp, #8]
 800f568:	7a4a      	ldrb	r2, [r1, #9]
 800f56a:	f88d 2009 	strb.w	r2, [sp, #9]
 800f56e:	7a0a      	ldrb	r2, [r1, #8]
 800f570:	f88d 200a 	strb.w	r2, [sp, #10]
 800f574:	79ca      	ldrb	r2, [r1, #7]
 800f576:	f88d 200b 	strb.w	r2, [sp, #11]
 800f57a:	798a      	ldrb	r2, [r1, #6]
 800f57c:	f88d 200c 	strb.w	r2, [sp, #12]
 800f580:	794a      	ldrb	r2, [r1, #5]
 800f582:	f88d 200d 	strb.w	r2, [sp, #13]
 800f586:	790a      	ldrb	r2, [r1, #4]
 800f588:	f88d 200e 	strb.w	r2, [sp, #14]
 800f58c:	78ca      	ldrb	r2, [r1, #3]
 800f58e:	f88d 200f 	strb.w	r2, [sp, #15]
 800f592:	788a      	ldrb	r2, [r1, #2]
 800f594:	f88d 2010 	strb.w	r2, [sp, #16]
 800f598:	784a      	ldrb	r2, [r1, #1]
 800f59a:	f88d 2011 	strb.w	r2, [sp, #17]
 800f59e:	780a      	ldrb	r2, [r1, #0]
 800f5a0:	f88d 2012 	strb.w	r2, [sp, #18]
 800f5a4:	2200      	movs	r2, #0
 800f5a6:	f88d 2013 	strb.w	r2, [sp, #19]
 800f5aa:	f88d 3014 	strb.w	r3, [sp, #20]
 800f5ae:	0a1b      	lsrs	r3, r3, #8
 800f5b0:	f88d 3015 	strb.w	r3, [sp, #21]
 800f5b4:	7b0b      	ldrb	r3, [r1, #12]
 800f5b6:	f88d 3016 	strb.w	r3, [sp, #22]
 800f5ba:	7acb      	ldrb	r3, [r1, #11]
 800f5bc:	f88d 3017 	strb.w	r3, [sp, #23]
 800f5c0:	ab02      	add	r3, sp, #8
 800f5c2:	9300      	str	r3, [sp, #0]
 800f5c4:	2310      	movs	r3, #16
 800f5c6:	4903      	ldr	r1, [pc, #12]	; (800f5d4 <ull_update_nonce_CCM+0x78>)
 800f5c8:	f7ff fc52 	bl	800ee70 <dwt_writetodevice>
 800f5cc:	b007      	add	sp, #28
 800f5ce:	f85d fb04 	ldr.w	pc, [sp], #4
 800f5d2:	bf00      	nop
 800f5d4:	00010034 	.word	0x00010034

0800f5d8 <ull_writetxdata>:
 800f5d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f5da:	b083      	sub	sp, #12
 800f5dc:	185c      	adds	r4, r3, r1
 800f5de:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800f5e2:	da24      	bge.n	800f62e <ull_writetxdata+0x56>
 800f5e4:	461c      	mov	r4, r3
 800f5e6:	4617      	mov	r7, r2
 800f5e8:	460e      	mov	r6, r1
 800f5ea:	4605      	mov	r5, r0
 800f5ec:	2b7f      	cmp	r3, #127	; 0x7f
 800f5ee:	d915      	bls.n	800f61c <ull_writetxdata+0x44>
 800f5f0:	2314      	movs	r3, #20
 800f5f2:	2200      	movs	r2, #0
 800f5f4:	490f      	ldr	r1, [pc, #60]	; (800f634 <ull_writetxdata+0x5c>)
 800f5f6:	f7ff fcb1 	bl	800ef5c <dwt_write32bitoffsetreg>
 800f5fa:	4623      	mov	r3, r4
 800f5fc:	2200      	movs	r2, #0
 800f5fe:	490e      	ldr	r1, [pc, #56]	; (800f638 <ull_writetxdata+0x60>)
 800f600:	4628      	mov	r0, r5
 800f602:	f7ff fcab 	bl	800ef5c <dwt_write32bitoffsetreg>
 800f606:	9700      	str	r7, [sp, #0]
 800f608:	4633      	mov	r3, r6
 800f60a:	2200      	movs	r2, #0
 800f60c:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 800f610:	4628      	mov	r0, r5
 800f612:	f7ff fc2d 	bl	800ee70 <dwt_writetodevice>
 800f616:	2000      	movs	r0, #0
 800f618:	b003      	add	sp, #12
 800f61a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f61c:	9200      	str	r2, [sp, #0]
 800f61e:	460b      	mov	r3, r1
 800f620:	4622      	mov	r2, r4
 800f622:	f44f 11a0 	mov.w	r1, #1310720	; 0x140000
 800f626:	f7ff fc23 	bl	800ee70 <dwt_writetodevice>
 800f62a:	2000      	movs	r0, #0
 800f62c:	e7f4      	b.n	800f618 <ull_writetxdata+0x40>
 800f62e:	f04f 30ff 	mov.w	r0, #4294967295
 800f632:	e7f1      	b.n	800f618 <ull_writetxdata+0x40>
 800f634:	001f0004 	.word	0x001f0004
 800f638:	001f0008 	.word	0x001f0008

0800f63c <ull_signal_rx_buff_free>:
 800f63c:	b510      	push	{r4, lr}
 800f63e:	b082      	sub	sp, #8
 800f640:	4604      	mov	r4, r0
 800f642:	2302      	movs	r3, #2
 800f644:	9301      	str	r3, [sp, #4]
 800f646:	2200      	movs	r2, #0
 800f648:	9200      	str	r2, [sp, #0]
 800f64a:	4613      	mov	r3, r2
 800f64c:	2113      	movs	r1, #19
 800f64e:	f7fe ff1e 	bl	800e48e <dwt_xfer3xxx>
 800f652:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f654:	7b9a      	ldrb	r2, [r3, #14]
 800f656:	2a03      	cmp	r2, #3
 800f658:	bf0c      	ite	eq
 800f65a:	2201      	moveq	r2, #1
 800f65c:	2203      	movne	r2, #3
 800f65e:	739a      	strb	r2, [r3, #14]
 800f660:	b002      	add	sp, #8
 800f662:	bd10      	pop	{r4, pc}

0800f664 <ull_isr>:
 800f664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f668:	4604      	mov	r4, r0
 800f66a:	2200      	movs	r2, #0
 800f66c:	f44f 11f8 	mov.w	r1, #2031616	; 0x1f0000
 800f670:	f7fe ffea 	bl	800e648 <dwt_read8bitoffsetreg>
 800f674:	4605      	mov	r5, r0
 800f676:	2200      	movs	r2, #0
 800f678:	2144      	movs	r1, #68	; 0x44
 800f67a:	4620      	mov	r0, r4
 800f67c:	f7fe ff8f 	bl	800e59e <dwt_read32bitoffsetreg>
 800f680:	4606      	mov	r6, r0
 800f682:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f684:	2200      	movs	r2, #0
 800f686:	83da      	strh	r2, [r3, #30]
 800f688:	f883 2020 	strb.w	r2, [r3, #32]
 800f68c:	619a      	str	r2, [r3, #24]
 800f68e:	839a      	strh	r2, [r3, #28]
 800f690:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800f694:	625a      	str	r2, [r3, #36]	; 0x24
 800f696:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f698:	625c      	str	r4, [r3, #36]	; 0x24
 800f69a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f69c:	7b9f      	ldrb	r7, [r3, #14]
 800f69e:	2f00      	cmp	r7, #0
 800f6a0:	d17f      	bne.n	800f7a2 <ull_isr+0x13e>
 800f6a2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f6a4:	619e      	str	r6, [r3, #24]
 800f6a6:	f8d4 8050 	ldr.w	r8, [r4, #80]	; 0x50
 800f6aa:	f898 3015 	ldrb.w	r3, [r8, #21]
 800f6ae:	f003 0303 	and.w	r3, r3, #3
 800f6b2:	2b03      	cmp	r3, #3
 800f6b4:	f000 8090 	beq.w	800f7d8 <ull_isr+0x174>
 800f6b8:	f015 0f80 	tst.w	r5, #128	; 0x80
 800f6bc:	f040 8093 	bne.w	800f7e6 <ull_isr+0x182>
 800f6c0:	f015 0f01 	tst.w	r5, #1
 800f6c4:	f040 80c1 	bne.w	800f84a <ull_isr+0x1e6>
 800f6c8:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f6cc:	d00b      	beq.n	800f6e6 <ull_isr+0x82>
 800f6ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f6d0:	b113      	cbz	r3, 800f6d8 <ull_isr+0x74>
 800f6d2:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800f6d4:	3018      	adds	r0, #24
 800f6d6:	4798      	blx	r3
 800f6d8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800f6dc:	2202      	movs	r2, #2
 800f6de:	2144      	movs	r1, #68	; 0x44
 800f6e0:	4620      	mov	r0, r4
 800f6e2:	f7ff fbd0 	bl	800ee86 <dwt_write16bitoffsetreg>
 800f6e6:	f015 0f08 	tst.w	r5, #8
 800f6ea:	d107      	bne.n	800f6fc <ull_isr+0x98>
 800f6ec:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f6ee:	7b9b      	ldrb	r3, [r3, #14]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	f000 80ea 	beq.w	800f8ca <ull_isr+0x266>
 800f6f6:	2f00      	cmp	r7, #0
 800f6f8:	f000 80e7 	beq.w	800f8ca <ull_isr+0x266>
 800f6fc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f6fe:	2200      	movs	r2, #0
 800f700:	f883 2020 	strb.w	r2, [r3, #32]
 800f704:	f416 2f80 	tst.w	r6, #262144	; 0x40000
 800f708:	f000 80ad 	beq.w	800f866 <ull_isr+0x202>
 800f70c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f70e:	f892 3020 	ldrb.w	r3, [r2, #32]
 800f712:	f043 0308 	orr.w	r3, r3, #8
 800f716:	f882 3020 	strb.w	r3, [r2, #32]
 800f71a:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 800f71e:	f016 5f80 	tst.w	r6, #268435456	; 0x10000000
 800f722:	d008      	beq.n	800f736 <ull_isr+0xd2>
 800f724:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f726:	f892 3020 	ldrb.w	r3, [r2, #32]
 800f72a:	f043 0310 	orr.w	r3, r3, #16
 800f72e:	f882 3020 	strb.w	r3, [r2, #32]
 800f732:	f047 5780 	orr.w	r7, r7, #268435456	; 0x10000000
 800f736:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 800f73a:	d006      	beq.n	800f74a <ull_isr+0xe6>
 800f73c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f73e:	7d53      	ldrb	r3, [r2, #21]
 800f740:	f003 0303 	and.w	r3, r3, #3
 800f744:	2b03      	cmp	r3, #3
 800f746:	f000 809a 	beq.w	800f87e <ull_isr+0x21a>
 800f74a:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 800f74e:	f040 80a2 	bne.w	800f896 <ull_isr+0x232>
 800f752:	f447 43de 	orr.w	r3, r7, #28416	; 0x6f00
 800f756:	2200      	movs	r2, #0
 800f758:	2144      	movs	r1, #68	; 0x44
 800f75a:	4620      	mov	r0, r4
 800f75c:	f7ff fbfe 	bl	800ef5c <dwt_write32bitoffsetreg>
 800f760:	4620      	mov	r0, r4
 800f762:	f7ff fe1d 	bl	800f3a0 <_dwt_clear_db_events>
 800f766:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800f768:	8bc3      	ldrh	r3, [r0, #30]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	f040 80a2 	bne.w	800f8b4 <ull_isr+0x250>
 800f770:	7d43      	ldrb	r3, [r0, #21]
 800f772:	f003 0303 	and.w	r3, r3, #3
 800f776:	2b03      	cmp	r3, #3
 800f778:	f000 809c 	beq.w	800f8b4 <ull_isr+0x250>
 800f77c:	6983      	ldr	r3, [r0, #24]
 800f77e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800f782:	6183      	str	r3, [r0, #24]
 800f784:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f786:	6993      	ldr	r3, [r2, #24]
 800f788:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f78c:	6193      	str	r3, [r2, #24]
 800f78e:	69e3      	ldr	r3, [r4, #28]
 800f790:	b113      	cbz	r3, 800f798 <ull_isr+0x134>
 800f792:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800f794:	3018      	adds	r0, #24
 800f796:	4798      	blx	r3
 800f798:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f79a:	2200      	movs	r2, #0
 800f79c:	f883 2020 	strb.w	r2, [r3, #32]
 800f7a0:	e08c      	b.n	800f8bc <ull_isr+0x258>
 800f7a2:	496d      	ldr	r1, [pc, #436]	; (800f958 <ull_isr+0x2f4>)
 800f7a4:	4620      	mov	r0, r4
 800f7a6:	f7fe ff4f 	bl	800e648 <dwt_read8bitoffsetreg>
 800f7aa:	4607      	mov	r7, r0
 800f7ac:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f7ae:	7b9b      	ldrb	r3, [r3, #14]
 800f7b0:	2b03      	cmp	r3, #3
 800f7b2:	bf08      	it	eq
 800f7b4:	f3c0 1707 	ubfxeq	r7, r0, #4, #8
 800f7b8:	f017 0f01 	tst.w	r7, #1
 800f7bc:	bf18      	it	ne
 800f7be:	f446 4680 	orrne.w	r6, r6, #16384	; 0x4000
 800f7c2:	f017 0f02 	tst.w	r7, #2
 800f7c6:	bf18      	it	ne
 800f7c8:	f446 5600 	orrne.w	r6, r6, #8192	; 0x2000
 800f7cc:	f017 0f04 	tst.w	r7, #4
 800f7d0:	bf18      	it	ne
 800f7d2:	f446 6680 	orrne.w	r6, r6, #1024	; 0x400
 800f7d6:	e764      	b.n	800f6a2 <ull_isr+0x3e>
 800f7d8:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 800f7dc:	bf1c      	itt	ne
 800f7de:	f045 0508 	orrne.w	r5, r5, #8
 800f7e2:	b2ed      	uxtbne	r5, r5
 800f7e4:	e768      	b.n	800f6b8 <ull_isr+0x54>
 800f7e6:	2200      	movs	r2, #0
 800f7e8:	2148      	movs	r1, #72	; 0x48
 800f7ea:	4620      	mov	r0, r4
 800f7ec:	f7fe feed 	bl	800e5ca <dwt_read16bitoffsetreg>
 800f7f0:	f8a8 001c 	strh.w	r0, [r8, #28]
 800f7f4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f7f6:	7d1a      	ldrb	r2, [r3, #20]
 800f7f8:	b11a      	cbz	r2, 800f802 <ull_isr+0x19e>
 800f7fa:	699a      	ldr	r2, [r3, #24]
 800f7fc:	f012 0f04 	tst.w	r2, #4
 800f800:	d103      	bne.n	800f80a <ull_isr+0x1a6>
 800f802:	8b9b      	ldrh	r3, [r3, #28]
 800f804:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800f808:	b18b      	cbz	r3, 800f82e <ull_isr+0x1ca>
 800f80a:	2304      	movs	r3, #4
 800f80c:	2200      	movs	r2, #0
 800f80e:	2144      	movs	r1, #68	; 0x44
 800f810:	4620      	mov	r0, r4
 800f812:	f7ff fd87 	bl	800f324 <dwt_write8bitoffsetreg>
 800f816:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 800f81a:	2200      	movs	r2, #0
 800f81c:	2148      	movs	r1, #72	; 0x48
 800f81e:	4620      	mov	r0, r4
 800f820:	f7ff fb31 	bl	800ee86 <dwt_write16bitoffsetreg>
 800f824:	6a23      	ldr	r3, [r4, #32]
 800f826:	b113      	cbz	r3, 800f82e <ull_isr+0x1ca>
 800f828:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800f82a:	3018      	adds	r0, #24
 800f82c:	4798      	blx	r3
 800f82e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f830:	8b9b      	ldrh	r3, [r3, #28]
 800f832:	f413 7f80 	tst.w	r3, #256	; 0x100
 800f836:	f43f af43 	beq.w	800f6c0 <ull_isr+0x5c>
 800f83a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f83e:	2200      	movs	r2, #0
 800f840:	2148      	movs	r1, #72	; 0x48
 800f842:	4620      	mov	r0, r4
 800f844:	f7ff fb1f 	bl	800ee86 <dwt_write16bitoffsetreg>
 800f848:	e73a      	b.n	800f6c0 <ull_isr+0x5c>
 800f84a:	23f8      	movs	r3, #248	; 0xf8
 800f84c:	2200      	movs	r2, #0
 800f84e:	2144      	movs	r1, #68	; 0x44
 800f850:	4620      	mov	r0, r4
 800f852:	f7ff fd67 	bl	800f324 <dwt_write8bitoffsetreg>
 800f856:	6923      	ldr	r3, [r4, #16]
 800f858:	2b00      	cmp	r3, #0
 800f85a:	f43f af35 	beq.w	800f6c8 <ull_isr+0x64>
 800f85e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800f860:	3018      	adds	r0, #24
 800f862:	4798      	blx	r3
 800f864:	e730      	b.n	800f6c8 <ull_isr+0x64>
 800f866:	f416 6f80 	tst.w	r6, #1024	; 0x400
 800f86a:	bf1f      	itttt	ne
 800f86c:	6d22      	ldrne	r2, [r4, #80]	; 0x50
 800f86e:	f892 3020 	ldrbne.w	r3, [r2, #32]
 800f872:	f043 0304 	orrne.w	r3, r3, #4
 800f876:	f882 3020 	strbne.w	r3, [r2, #32]
 800f87a:	2700      	movs	r7, #0
 800f87c:	e74f      	b.n	800f71e <ull_isr+0xba>
 800f87e:	f892 3020 	ldrb.w	r3, [r2, #32]
 800f882:	f043 0302 	orr.w	r3, r3, #2
 800f886:	f882 3020 	strb.w	r3, [r2, #32]
 800f88a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f88c:	2200      	movs	r2, #0
 800f88e:	83da      	strh	r2, [r3, #30]
 800f890:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 800f894:	e75d      	b.n	800f752 <ull_isr+0xee>
 800f896:	4620      	mov	r0, r4
 800f898:	f7ff fd50 	bl	800f33c <ull_getframelength>
 800f89c:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 800f8a0:	f43f af57 	beq.w	800f752 <ull_isr+0xee>
 800f8a4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f8a6:	f892 3020 	ldrb.w	r3, [r2, #32]
 800f8aa:	f043 0301 	orr.w	r3, r3, #1
 800f8ae:	f882 3020 	strb.w	r3, [r2, #32]
 800f8b2:	e74e      	b.n	800f752 <ull_isr+0xee>
 800f8b4:	6963      	ldr	r3, [r4, #20]
 800f8b6:	b10b      	cbz	r3, 800f8bc <ull_isr+0x258>
 800f8b8:	3018      	adds	r0, #24
 800f8ba:	4798      	blx	r3
 800f8bc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f8be:	7b9b      	ldrb	r3, [r3, #14]
 800f8c0:	bb03      	cbnz	r3, 800f904 <ull_isr+0x2a0>
 800f8c2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f8c4:	2200      	movs	r2, #0
 800f8c6:	f883 2020 	strb.w	r2, [r3, #32]
 800f8ca:	f015 0f10 	tst.w	r5, #16
 800f8ce:	d11d      	bne.n	800f90c <ull_isr+0x2a8>
 800f8d0:	f015 0f20 	tst.w	r5, #32
 800f8d4:	d12d      	bne.n	800f932 <ull_isr+0x2ce>
 800f8d6:	2200      	movs	r2, #0
 800f8d8:	4920      	ldr	r1, [pc, #128]	; (800f95c <ull_isr+0x2f8>)
 800f8da:	4620      	mov	r0, r4
 800f8dc:	f7fe feb4 	bl	800e648 <dwt_read8bitoffsetreg>
 800f8e0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f8e2:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21
 800f8e6:	f010 0303 	ands.w	r3, r0, #3
 800f8ea:	d009      	beq.n	800f900 <ull_isr+0x29c>
 800f8ec:	2200      	movs	r2, #0
 800f8ee:	491b      	ldr	r1, [pc, #108]	; (800f95c <ull_isr+0x2f8>)
 800f8f0:	4620      	mov	r0, r4
 800f8f2:	f7ff fd17 	bl	800f324 <dwt_write8bitoffsetreg>
 800f8f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f8f8:	b113      	cbz	r3, 800f900 <ull_isr+0x29c>
 800f8fa:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800f8fc:	3018      	adds	r0, #24
 800f8fe:	4798      	blx	r3
 800f900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f904:	4620      	mov	r0, r4
 800f906:	f7ff fe99 	bl	800f63c <ull_signal_rx_buff_free>
 800f90a:	e7da      	b.n	800f8c2 <ull_isr+0x25e>
 800f90c:	4b14      	ldr	r3, [pc, #80]	; (800f960 <ull_isr+0x2fc>)
 800f90e:	2200      	movs	r2, #0
 800f910:	2144      	movs	r1, #68	; 0x44
 800f912:	4620      	mov	r0, r4
 800f914:	f7ff fb22 	bl	800ef5c <dwt_write32bitoffsetreg>
 800f918:	4620      	mov	r0, r4
 800f91a:	f7ff fd41 	bl	800f3a0 <_dwt_clear_db_events>
 800f91e:	69e3      	ldr	r3, [r4, #28]
 800f920:	b113      	cbz	r3, 800f928 <ull_isr+0x2c4>
 800f922:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800f924:	3018      	adds	r0, #24
 800f926:	4798      	blx	r3
 800f928:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f92a:	2200      	movs	r2, #0
 800f92c:	f883 2020 	strb.w	r2, [r3, #32]
 800f930:	e7ce      	b.n	800f8d0 <ull_isr+0x26c>
 800f932:	4b0c      	ldr	r3, [pc, #48]	; (800f964 <ull_isr+0x300>)
 800f934:	2200      	movs	r2, #0
 800f936:	2144      	movs	r1, #68	; 0x44
 800f938:	4620      	mov	r0, r4
 800f93a:	f7ff fb0f 	bl	800ef5c <dwt_write32bitoffsetreg>
 800f93e:	4620      	mov	r0, r4
 800f940:	f7ff fd2e 	bl	800f3a0 <_dwt_clear_db_events>
 800f944:	69a3      	ldr	r3, [r4, #24]
 800f946:	b113      	cbz	r3, 800f94e <ull_isr+0x2ea>
 800f948:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800f94a:	3018      	adds	r0, #24
 800f94c:	4798      	blx	r3
 800f94e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f950:	2200      	movs	r2, #0
 800f952:	f883 2020 	strb.w	r2, [r3, #32]
 800f956:	e7be      	b.n	800f8d6 <ull_isr+0x272>
 800f958:	00010018 	.word	0x00010018
 800f95c:	00110038 	.word	0x00110038
 800f960:	34059400 	.word	0x34059400
 800f964:	10220400 	.word	0x10220400

0800f968 <dwt_modify32bitoffsetreg>:
 800f968:	b530      	push	{r4, r5, lr}
 800f96a:	b085      	sub	sp, #20
 800f96c:	9c08      	ldr	r4, [sp, #32]
 800f96e:	f88d 3008 	strb.w	r3, [sp, #8]
 800f972:	0a1d      	lsrs	r5, r3, #8
 800f974:	f88d 5009 	strb.w	r5, [sp, #9]
 800f978:	0c1d      	lsrs	r5, r3, #16
 800f97a:	f88d 500a 	strb.w	r5, [sp, #10]
 800f97e:	0e1b      	lsrs	r3, r3, #24
 800f980:	f88d 300b 	strb.w	r3, [sp, #11]
 800f984:	f88d 400c 	strb.w	r4, [sp, #12]
 800f988:	0a23      	lsrs	r3, r4, #8
 800f98a:	f88d 300d 	strb.w	r3, [sp, #13]
 800f98e:	0c23      	lsrs	r3, r4, #16
 800f990:	f88d 300e 	strb.w	r3, [sp, #14]
 800f994:	0e24      	lsrs	r4, r4, #24
 800f996:	f88d 400f 	strb.w	r4, [sp, #15]
 800f99a:	f248 0303 	movw	r3, #32771	; 0x8003
 800f99e:	9301      	str	r3, [sp, #4]
 800f9a0:	ab02      	add	r3, sp, #8
 800f9a2:	9300      	str	r3, [sp, #0]
 800f9a4:	2308      	movs	r3, #8
 800f9a6:	b292      	uxth	r2, r2
 800f9a8:	f7fe fd71 	bl	800e48e <dwt_xfer3xxx>
 800f9ac:	b005      	add	sp, #20
 800f9ae:	bd30      	pop	{r4, r5, pc}

0800f9b0 <ull_enablegpioclocks>:
 800f9b0:	b500      	push	{lr}
 800f9b2:	b083      	sub	sp, #12
 800f9b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800f9b8:	9300      	str	r3, [sp, #0]
 800f9ba:	f04f 33ff 	mov.w	r3, #4294967295
 800f9be:	2200      	movs	r2, #0
 800f9c0:	4902      	ldr	r1, [pc, #8]	; (800f9cc <ull_enablegpioclocks+0x1c>)
 800f9c2:	f7ff ffd1 	bl	800f968 <dwt_modify32bitoffsetreg>
 800f9c6:	b003      	add	sp, #12
 800f9c8:	f85d fb04 	ldr.w	pc, [sp], #4
 800f9cc:	00110004 	.word	0x00110004

0800f9d0 <ull_enable_rf_tx>:
 800f9d0:	b570      	push	{r4, r5, r6, lr}
 800f9d2:	b082      	sub	sp, #8
 800f9d4:	4604      	mov	r4, r0
 800f9d6:	460e      	mov	r6, r1
 800f9d8:	4d13      	ldr	r5, [pc, #76]	; (800fa28 <ull_enable_rf_tx+0x58>)
 800f9da:	f04f 2308 	mov.w	r3, #134219776	; 0x8000800
 800f9de:	9300      	str	r3, [sp, #0]
 800f9e0:	f04f 33ff 	mov.w	r3, #4294967295
 800f9e4:	2200      	movs	r2, #0
 800f9e6:	4629      	mov	r1, r5
 800f9e8:	f7ff ffbe 	bl	800f968 <dwt_modify32bitoffsetreg>
 800f9ec:	f04f 1360 	mov.w	r3, #6291552	; 0x600060
 800f9f0:	9300      	str	r3, [sp, #0]
 800f9f2:	f04f 33ff 	mov.w	r3, #4294967295
 800f9f6:	2200      	movs	r2, #0
 800f9f8:	4629      	mov	r1, r5
 800f9fa:	4620      	mov	r0, r4
 800f9fc:	f7ff ffb4 	bl	800f968 <dwt_modify32bitoffsetreg>
 800fa00:	4b0a      	ldr	r3, [pc, #40]	; (800fa2c <ull_enable_rf_tx+0x5c>)
 800fa02:	9300      	str	r3, [sp, #0]
 800fa04:	f04f 33ff 	mov.w	r3, #4294967295
 800fa08:	2200      	movs	r2, #0
 800fa0a:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 800fa0e:	4620      	mov	r0, r4
 800fa10:	f7ff ffaa 	bl	800f968 <dwt_modify32bitoffsetreg>
 800fa14:	b90e      	cbnz	r6, 800fa1a <ull_enable_rf_tx+0x4a>
 800fa16:	b002      	add	sp, #8
 800fa18:	bd70      	pop	{r4, r5, r6, pc}
 800fa1a:	4b05      	ldr	r3, [pc, #20]	; (800fa30 <ull_enable_rf_tx+0x60>)
 800fa1c:	2200      	movs	r2, #0
 800fa1e:	4905      	ldr	r1, [pc, #20]	; (800fa34 <ull_enable_rf_tx+0x64>)
 800fa20:	4620      	mov	r0, r4
 800fa22:	f7ff fa9b 	bl	800ef5c <dwt_write32bitoffsetreg>
 800fa26:	e7f6      	b.n	800fa16 <ull_enable_rf_tx+0x46>
 800fa28:	00070048 	.word	0x00070048
 800fa2c:	02003c00 	.word	0x02003c00
 800fa30:	01011100 	.word	0x01011100
 800fa34:	00070014 	.word	0x00070014

0800fa38 <ull_enable_rftx_blocks>:
 800fa38:	b500      	push	{lr}
 800fa3a:	b083      	sub	sp, #12
 800fa3c:	4b05      	ldr	r3, [pc, #20]	; (800fa54 <ull_enable_rftx_blocks+0x1c>)
 800fa3e:	9300      	str	r3, [sp, #0]
 800fa40:	f04f 33ff 	mov.w	r3, #4294967295
 800fa44:	2200      	movs	r2, #0
 800fa46:	4904      	ldr	r1, [pc, #16]	; (800fa58 <ull_enable_rftx_blocks+0x20>)
 800fa48:	f7ff ff8e 	bl	800f968 <dwt_modify32bitoffsetreg>
 800fa4c:	b003      	add	sp, #12
 800fa4e:	f85d fb04 	ldr.w	pc, [sp], #4
 800fa52:	bf00      	nop
 800fa54:	02003c00 	.word	0x02003c00
 800fa58:	00070004 	.word	0x00070004

0800fa5c <_dwt_otpprogword32>:
 800fa5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fa60:	b083      	sub	sp, #12
 800fa62:	4604      	mov	r4, r0
 800fa64:	460d      	mov	r5, r1
 800fa66:	4617      	mov	r7, r2
 800fa68:	4e56      	ldr	r6, [pc, #344]	; (800fbc4 <_dwt_otpprogword32+0x168>)
 800fa6a:	2200      	movs	r2, #0
 800fa6c:	4631      	mov	r1, r6
 800fa6e:	f7fe fd96 	bl	800e59e <dwt_read32bitoffsetreg>
 800fa72:	4681      	mov	r9, r0
 800fa74:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800fa78:	9300      	str	r3, [sp, #0]
 800fa7a:	f04f 33ff 	mov.w	r3, #4294967295
 800fa7e:	2200      	movs	r2, #0
 800fa80:	4631      	mov	r1, r6
 800fa82:	4620      	mov	r0, r4
 800fa84:	f7ff ff70 	bl	800f968 <dwt_modify32bitoffsetreg>
 800fa88:	f8df 813c 	ldr.w	r8, [pc, #316]	; 800fbc8 <_dwt_otpprogword32+0x16c>
 800fa8c:	2318      	movs	r3, #24
 800fa8e:	2200      	movs	r2, #0
 800fa90:	4641      	mov	r1, r8
 800fa92:	4620      	mov	r0, r4
 800fa94:	f7ff f9f7 	bl	800ee86 <dwt_write16bitoffsetreg>
 800fa98:	2125      	movs	r1, #37	; 0x25
 800fa9a:	4620      	mov	r0, r4
 800fa9c:	f7ff fa28 	bl	800eef0 <__dwt_otp_write_wdata_id_reg>
 800faa0:	2102      	movs	r1, #2
 800faa2:	4620      	mov	r0, r4
 800faa4:	f7ff fa24 	bl	800eef0 <__dwt_otp_write_wdata_id_reg>
 800faa8:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
 800faac:	4620      	mov	r0, r4
 800faae:	f7ff fa1f 	bl	800eef0 <__dwt_otp_write_wdata_id_reg>
 800fab2:	b2f9      	uxtb	r1, r7
 800fab4:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800fab8:	4620      	mov	r0, r4
 800faba:	f7ff fa19 	bl	800eef0 <__dwt_otp_write_wdata_id_reg>
 800fabe:	f44f 7180 	mov.w	r1, #256	; 0x100
 800fac2:	4620      	mov	r0, r4
 800fac4:	f7ff fa14 	bl	800eef0 <__dwt_otp_write_wdata_id_reg>
 800fac8:	2100      	movs	r1, #0
 800faca:	4620      	mov	r0, r4
 800facc:	f7ff fa10 	bl	800eef0 <__dwt_otp_write_wdata_id_reg>
 800fad0:	2102      	movs	r1, #2
 800fad2:	4620      	mov	r0, r4
 800fad4:	f7ff fa0c 	bl	800eef0 <__dwt_otp_write_wdata_id_reg>
 800fad8:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800fadc:	4620      	mov	r0, r4
 800fade:	f7ff fa07 	bl	800eef0 <__dwt_otp_write_wdata_id_reg>
 800fae2:	b2e9      	uxtb	r1, r5
 800fae4:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800fae8:	4620      	mov	r0, r4
 800faea:	f7ff fa01 	bl	800eef0 <__dwt_otp_write_wdata_id_reg>
 800faee:	f3c5 2107 	ubfx	r1, r5, #8, #8
 800faf2:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800faf6:	4620      	mov	r0, r4
 800faf8:	f7ff f9fa 	bl	800eef0 <__dwt_otp_write_wdata_id_reg>
 800fafc:	f3c5 4107 	ubfx	r1, r5, #16, #8
 800fb00:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800fb04:	4620      	mov	r0, r4
 800fb06:	f7ff f9f3 	bl	800eef0 <__dwt_otp_write_wdata_id_reg>
 800fb0a:	0e29      	lsrs	r1, r5, #24
 800fb0c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800fb10:	4620      	mov	r0, r4
 800fb12:	f7ff f9ed 	bl	800eef0 <__dwt_otp_write_wdata_id_reg>
 800fb16:	2100      	movs	r1, #0
 800fb18:	4620      	mov	r0, r4
 800fb1a:	f7ff f9e9 	bl	800eef0 <__dwt_otp_write_wdata_id_reg>
 800fb1e:	213a      	movs	r1, #58	; 0x3a
 800fb20:	4620      	mov	r0, r4
 800fb22:	f7ff f9e5 	bl	800eef0 <__dwt_otp_write_wdata_id_reg>
 800fb26:	f240 11ff 	movw	r1, #511	; 0x1ff
 800fb2a:	4620      	mov	r0, r4
 800fb2c:	f7ff f9e0 	bl	800eef0 <__dwt_otp_write_wdata_id_reg>
 800fb30:	f44f 7185 	mov.w	r1, #266	; 0x10a
 800fb34:	4620      	mov	r0, r4
 800fb36:	f7ff f9db 	bl	800eef0 <__dwt_otp_write_wdata_id_reg>
 800fb3a:	2100      	movs	r1, #0
 800fb3c:	4620      	mov	r0, r4
 800fb3e:	f7ff f9d7 	bl	800eef0 <__dwt_otp_write_wdata_id_reg>
 800fb42:	213a      	movs	r1, #58	; 0x3a
 800fb44:	4620      	mov	r0, r4
 800fb46:	f7ff f9d3 	bl	800eef0 <__dwt_otp_write_wdata_id_reg>
 800fb4a:	f240 1101 	movw	r1, #257	; 0x101
 800fb4e:	4620      	mov	r0, r4
 800fb50:	f7ff f9ce 	bl	800eef0 <__dwt_otp_write_wdata_id_reg>
 800fb54:	2302      	movs	r3, #2
 800fb56:	2200      	movs	r2, #0
 800fb58:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800fb5c:	4620      	mov	r0, r4
 800fb5e:	f7ff f992 	bl	800ee86 <dwt_write16bitoffsetreg>
 800fb62:	2300      	movs	r3, #0
 800fb64:	461a      	mov	r2, r3
 800fb66:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800fb6a:	4620      	mov	r0, r4
 800fb6c:	f7ff f98b 	bl	800ee86 <dwt_write16bitoffsetreg>
 800fb70:	2002      	movs	r0, #2
 800fb72:	f7f0 fcd1 	bl	8000518 <deca_sleep>
 800fb76:	213a      	movs	r1, #58	; 0x3a
 800fb78:	4620      	mov	r0, r4
 800fb7a:	f7ff f9b9 	bl	800eef0 <__dwt_otp_write_wdata_id_reg>
 800fb7e:	f44f 7181 	mov.w	r1, #258	; 0x102
 800fb82:	4620      	mov	r0, r4
 800fb84:	f7ff f9b4 	bl	800eef0 <__dwt_otp_write_wdata_id_reg>
 800fb88:	2302      	movs	r3, #2
 800fb8a:	2200      	movs	r2, #0
 800fb8c:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800fb90:	4620      	mov	r0, r4
 800fb92:	f7ff f978 	bl	800ee86 <dwt_write16bitoffsetreg>
 800fb96:	2300      	movs	r3, #0
 800fb98:	461a      	mov	r2, r3
 800fb9a:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
 800fb9e:	4620      	mov	r0, r4
 800fba0:	f7ff f971 	bl	800ee86 <dwt_write16bitoffsetreg>
 800fba4:	2300      	movs	r3, #0
 800fba6:	461a      	mov	r2, r3
 800fba8:	4641      	mov	r1, r8
 800fbaa:	4620      	mov	r0, r4
 800fbac:	f7ff f96b 	bl	800ee86 <dwt_write16bitoffsetreg>
 800fbb0:	464b      	mov	r3, r9
 800fbb2:	2200      	movs	r2, #0
 800fbb4:	4631      	mov	r1, r6
 800fbb6:	4620      	mov	r0, r4
 800fbb8:	f7ff f9d0 	bl	800ef5c <dwt_write32bitoffsetreg>
 800fbbc:	b003      	add	sp, #12
 800fbbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fbc2:	bf00      	nop
 800fbc4:	00070044 	.word	0x00070044
 800fbc8:	000b0008 	.word	0x000b0008

0800fbcc <ull_setgpiomode>:
 800fbcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbce:	b083      	sub	sp, #12
 800fbd0:	2400      	movs	r4, #0
 800fbd2:	4623      	mov	r3, r4
 800fbd4:	2601      	movs	r6, #1
 800fbd6:	2707      	movs	r7, #7
 800fbd8:	e002      	b.n	800fbe0 <ull_setgpiomode+0x14>
 800fbda:	3401      	adds	r4, #1
 800fbdc:	2c09      	cmp	r4, #9
 800fbde:	d009      	beq.n	800fbf4 <ull_setgpiomode+0x28>
 800fbe0:	fa06 f504 	lsl.w	r5, r6, r4
 800fbe4:	420d      	tst	r5, r1
 800fbe6:	d0f8      	beq.n	800fbda <ull_setgpiomode+0xe>
 800fbe8:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800fbec:	fa07 f505 	lsl.w	r5, r7, r5
 800fbf0:	432b      	orrs	r3, r5
 800fbf2:	e7f2      	b.n	800fbda <ull_setgpiomode+0xe>
 800fbf4:	401a      	ands	r2, r3
 800fbf6:	9200      	str	r2, [sp, #0]
 800fbf8:	43db      	mvns	r3, r3
 800fbfa:	2200      	movs	r2, #0
 800fbfc:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 800fc00:	f7ff feb2 	bl	800f968 <dwt_modify32bitoffsetreg>
 800fc04:	b003      	add	sp, #12
 800fc06:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fc08 <ull_writetxfctrl>:
 800fc08:	b500      	push	{lr}
 800fc0a:	b083      	sub	sp, #12
 800fc0c:	2a7f      	cmp	r2, #127	; 0x7f
 800fc0e:	bf88      	it	hi
 800fc10:	3280      	addhi	r2, #128	; 0x80
 800fc12:	ea41 21c3 	orr.w	r1, r1, r3, lsl #11
 800fc16:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800fc1a:	9100      	str	r1, [sp, #0]
 800fc1c:	4b03      	ldr	r3, [pc, #12]	; (800fc2c <ull_writetxfctrl+0x24>)
 800fc1e:	2200      	movs	r2, #0
 800fc20:	2120      	movs	r1, #32
 800fc22:	f7ff fea1 	bl	800f968 <dwt_modify32bitoffsetreg>
 800fc26:	b003      	add	sp, #12
 800fc28:	f85d fb04 	ldr.w	pc, [sp], #4
 800fc2c:	fc00f400 	.word	0xfc00f400

0800fc30 <prs_sys_status_and_or>:
 800fc30:	b500      	push	{lr}
 800fc32:	b083      	sub	sp, #12
 800fc34:	9200      	str	r2, [sp, #0]
 800fc36:	460b      	mov	r3, r1
 800fc38:	2200      	movs	r2, #0
 800fc3a:	2144      	movs	r1, #68	; 0x44
 800fc3c:	f7ff fe94 	bl	800f968 <dwt_modify32bitoffsetreg>
 800fc40:	2000      	movs	r0, #0
 800fc42:	b003      	add	sp, #12
 800fc44:	f85d fb04 	ldr.w	pc, [sp], #4

0800fc48 <dwt_modify8bitoffsetreg>:
 800fc48:	b500      	push	{lr}
 800fc4a:	b085      	sub	sp, #20
 800fc4c:	f88d 300c 	strb.w	r3, [sp, #12]
 800fc50:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800fc54:	f88d 300d 	strb.w	r3, [sp, #13]
 800fc58:	f248 0301 	movw	r3, #32769	; 0x8001
 800fc5c:	9301      	str	r3, [sp, #4]
 800fc5e:	ab03      	add	r3, sp, #12
 800fc60:	9300      	str	r3, [sp, #0]
 800fc62:	2302      	movs	r3, #2
 800fc64:	b292      	uxth	r2, r2
 800fc66:	f7fe fc12 	bl	800e48e <dwt_xfer3xxx>
 800fc6a:	b005      	add	sp, #20
 800fc6c:	f85d fb04 	ldr.w	pc, [sp], #4

0800fc70 <ull_enablespicrccheck>:
 800fc70:	b570      	push	{r4, r5, r6, lr}
 800fc72:	b082      	sub	sp, #8
 800fc74:	4604      	mov	r4, r0
 800fc76:	460d      	mov	r5, r1
 800fc78:	b159      	cbz	r1, 800fc92 <ull_enablespicrccheck+0x22>
 800fc7a:	4616      	mov	r6, r2
 800fc7c:	2340      	movs	r3, #64	; 0x40
 800fc7e:	9300      	str	r3, [sp, #0]
 800fc80:	23ff      	movs	r3, #255	; 0xff
 800fc82:	2200      	movs	r2, #0
 800fc84:	2110      	movs	r1, #16
 800fc86:	f7ff ffdf 	bl	800fc48 <dwt_modify8bitoffsetreg>
 800fc8a:	2d02      	cmp	r5, #2
 800fc8c:	d107      	bne.n	800fc9e <ull_enablespicrccheck+0x2e>
 800fc8e:	60e6      	str	r6, [r4, #12]
 800fc90:	e005      	b.n	800fc9e <ull_enablespicrccheck+0x2e>
 800fc92:	2200      	movs	r2, #0
 800fc94:	9200      	str	r2, [sp, #0]
 800fc96:	23bf      	movs	r3, #191	; 0xbf
 800fc98:	2110      	movs	r1, #16
 800fc9a:	f7ff ffd5 	bl	800fc48 <dwt_modify8bitoffsetreg>
 800fc9e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800fca0:	751d      	strb	r5, [r3, #20]
 800fca2:	b002      	add	sp, #8
 800fca4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fca8 <ull_configciadiag>:
 800fca8:	b530      	push	{r4, r5, lr}
 800fcaa:	b083      	sub	sp, #12
 800fcac:	4604      	mov	r4, r0
 800fcae:	460d      	mov	r5, r1
 800fcb0:	f011 0f01 	tst.w	r1, #1
 800fcb4:	d015      	beq.n	800fce2 <ull_configciadiag+0x3a>
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	9300      	str	r3, [sp, #0]
 800fcba:	23ef      	movs	r3, #239	; 0xef
 800fcbc:	2202      	movs	r2, #2
 800fcbe:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800fcc2:	f7ff ffc1 	bl	800fc48 <dwt_modify8bitoffsetreg>
 800fcc6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800fcc8:	759d      	strb	r5, [r3, #22]
 800fcca:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800fccc:	7d9b      	ldrb	r3, [r3, #22]
 800fcce:	085b      	lsrs	r3, r3, #1
 800fcd0:	d010      	beq.n	800fcf4 <ull_configciadiag+0x4c>
 800fcd2:	086b      	lsrs	r3, r5, #1
 800fcd4:	2200      	movs	r2, #0
 800fcd6:	490e      	ldr	r1, [pc, #56]	; (800fd10 <ull_configciadiag+0x68>)
 800fcd8:	4620      	mov	r0, r4
 800fcda:	f7ff fb23 	bl	800f324 <dwt_write8bitoffsetreg>
 800fcde:	b003      	add	sp, #12
 800fce0:	bd30      	pop	{r4, r5, pc}
 800fce2:	2310      	movs	r3, #16
 800fce4:	9300      	str	r3, [sp, #0]
 800fce6:	23ff      	movs	r3, #255	; 0xff
 800fce8:	2202      	movs	r2, #2
 800fcea:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800fcee:	f7ff ffab 	bl	800fc48 <dwt_modify8bitoffsetreg>
 800fcf2:	e7e8      	b.n	800fcc6 <ull_configciadiag+0x1e>
 800fcf4:	2301      	movs	r3, #1
 800fcf6:	9300      	str	r3, [sp, #0]
 800fcf8:	23ff      	movs	r3, #255	; 0xff
 800fcfa:	2200      	movs	r2, #0
 800fcfc:	4904      	ldr	r1, [pc, #16]	; (800fd10 <ull_configciadiag+0x68>)
 800fcfe:	4620      	mov	r0, r4
 800fd00:	f7ff ffa2 	bl	800fc48 <dwt_modify8bitoffsetreg>
 800fd04:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800fd06:	7d93      	ldrb	r3, [r2, #22]
 800fd08:	f043 0302 	orr.w	r3, r3, #2
 800fd0c:	7593      	strb	r3, [r2, #22]
 800fd0e:	e7e6      	b.n	800fcde <ull_configciadiag+0x36>
 800fd10:	00010020 	.word	0x00010020

0800fd14 <ull_configurestsloadiv>:
 800fd14:	b500      	push	{lr}
 800fd16:	b083      	sub	sp, #12
 800fd18:	2301      	movs	r3, #1
 800fd1a:	9300      	str	r3, [sp, #0]
 800fd1c:	23ff      	movs	r3, #255	; 0xff
 800fd1e:	2200      	movs	r2, #0
 800fd20:	4902      	ldr	r1, [pc, #8]	; (800fd2c <ull_configurestsloadiv+0x18>)
 800fd22:	f7ff ff91 	bl	800fc48 <dwt_modify8bitoffsetreg>
 800fd26:	b003      	add	sp, #12
 800fd28:	f85d fb04 	ldr.w	pc, [sp], #4
 800fd2c:	00020004 	.word	0x00020004

0800fd30 <ull_adcoffsetscalibration>:
 800fd30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd34:	b08b      	sub	sp, #44	; 0x2c
 800fd36:	4607      	mov	r7, r0
 800fd38:	f8df 8220 	ldr.w	r8, [pc, #544]	; 800ff5c <ull_adcoffsetscalibration+0x22c>
 800fd3c:	2200      	movs	r2, #0
 800fd3e:	4641      	mov	r1, r8
 800fd40:	f7fe fc2d 	bl	800e59e <dwt_read32bitoffsetreg>
 800fd44:	9004      	str	r0, [sp, #16]
 800fd46:	4c7d      	ldr	r4, [pc, #500]	; (800ff3c <ull_adcoffsetscalibration+0x20c>)
 800fd48:	2200      	movs	r2, #0
 800fd4a:	4621      	mov	r1, r4
 800fd4c:	4638      	mov	r0, r7
 800fd4e:	f7fe fc26 	bl	800e59e <dwt_read32bitoffsetreg>
 800fd52:	9005      	str	r0, [sp, #20]
 800fd54:	4d7a      	ldr	r5, [pc, #488]	; (800ff40 <ull_adcoffsetscalibration+0x210>)
 800fd56:	2200      	movs	r2, #0
 800fd58:	4629      	mov	r1, r5
 800fd5a:	4638      	mov	r0, r7
 800fd5c:	f7fe fc74 	bl	800e648 <dwt_read8bitoffsetreg>
 800fd60:	9006      	str	r0, [sp, #24]
 800fd62:	4e78      	ldr	r6, [pc, #480]	; (800ff44 <ull_adcoffsetscalibration+0x214>)
 800fd64:	2200      	movs	r2, #0
 800fd66:	4631      	mov	r1, r6
 800fd68:	4638      	mov	r0, r7
 800fd6a:	f7fe fc18 	bl	800e59e <dwt_read32bitoffsetreg>
 800fd6e:	4682      	mov	sl, r0
 800fd70:	9007      	str	r0, [sp, #28]
 800fd72:	2200      	movs	r2, #0
 800fd74:	4974      	ldr	r1, [pc, #464]	; (800ff48 <ull_adcoffsetscalibration+0x218>)
 800fd76:	4638      	mov	r0, r7
 800fd78:	f7fe fc11 	bl	800e59e <dwt_read32bitoffsetreg>
 800fd7c:	4681      	mov	r9, r0
 800fd7e:	4b73      	ldr	r3, [pc, #460]	; (800ff4c <ull_adcoffsetscalibration+0x21c>)
 800fd80:	9300      	str	r3, [sp, #0]
 800fd82:	f06f 537c 	mvn.w	r3, #1056964608	; 0x3f000000
 800fd86:	2200      	movs	r2, #0
 800fd88:	4641      	mov	r1, r8
 800fd8a:	4638      	mov	r0, r7
 800fd8c:	f7ff fdec 	bl	800f968 <dwt_modify32bitoffsetreg>
 800fd90:	464b      	mov	r3, r9
 800fd92:	2200      	movs	r2, #0
 800fd94:	4631      	mov	r1, r6
 800fd96:	4638      	mov	r0, r7
 800fd98:	f7ff f8e0 	bl	800ef5c <dwt_write32bitoffsetreg>
 800fd9c:	4653      	mov	r3, sl
 800fd9e:	00db      	lsls	r3, r3, #3
 800fda0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fda4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fda8:	9300      	str	r3, [sp, #0]
 800fdaa:	2386      	movs	r3, #134	; 0x86
 800fdac:	2200      	movs	r2, #0
 800fdae:	4621      	mov	r1, r4
 800fdb0:	4638      	mov	r0, r7
 800fdb2:	f7ff ff49 	bl	800fc48 <dwt_modify8bitoffsetreg>
 800fdb6:	2300      	movs	r3, #0
 800fdb8:	2203      	movs	r2, #3
 800fdba:	4621      	mov	r1, r4
 800fdbc:	4638      	mov	r0, r7
 800fdbe:	f7ff fab1 	bl	800f324 <dwt_write8bitoffsetreg>
 800fdc2:	f04f 0900 	mov.w	r9, #0
 800fdc6:	f8cd 9000 	str.w	r9, [sp]
 800fdca:	23fe      	movs	r3, #254	; 0xfe
 800fdcc:	464a      	mov	r2, r9
 800fdce:	4629      	mov	r1, r5
 800fdd0:	4638      	mov	r0, r7
 800fdd2:	f7ff ff39 	bl	800fc48 <dwt_modify8bitoffsetreg>
 800fdd6:	464a      	mov	r2, r9
 800fdd8:	213c      	movs	r1, #60	; 0x3c
 800fdda:	4638      	mov	r0, r7
 800fddc:	f7fe fbdf 	bl	800e59e <dwt_read32bitoffsetreg>
 800fde0:	9008      	str	r0, [sp, #32]
 800fde2:	464a      	mov	r2, r9
 800fde4:	2140      	movs	r1, #64	; 0x40
 800fde6:	4638      	mov	r0, r7
 800fde8:	f7fe fbd9 	bl	800e59e <dwt_read32bitoffsetreg>
 800fdec:	9009      	str	r0, [sp, #36]	; 0x24
 800fdee:	464b      	mov	r3, r9
 800fdf0:	464a      	mov	r2, r9
 800fdf2:	213c      	movs	r1, #60	; 0x3c
 800fdf4:	4638      	mov	r0, r7
 800fdf6:	f7ff f8b1 	bl	800ef5c <dwt_write32bitoffsetreg>
 800fdfa:	464b      	mov	r3, r9
 800fdfc:	464a      	mov	r2, r9
 800fdfe:	2140      	movs	r1, #64	; 0x40
 800fe00:	4638      	mov	r0, r7
 800fe02:	f7ff f8ab 	bl	800ef5c <dwt_write32bitoffsetreg>
 800fe06:	f7f5 fe85 	bl	8005b14 <dwt_forcetrxoff>
 800fe0a:	f04f 0b02 	mov.w	fp, #2
 800fe0e:	464c      	mov	r4, r9
 800fe10:	464d      	mov	r5, r9
 800fe12:	464e      	mov	r6, r9
 800fe14:	46c8      	mov	r8, r9
 800fe16:	f8cd 900c 	str.w	r9, [sp, #12]
 800fe1a:	46ca      	mov	sl, r9
 800fe1c:	e00e      	b.n	800fe3c <ull_adcoffsetscalibration+0x10c>
 800fe1e:	f7f5 fe79 	bl	8005b14 <dwt_forcetrxoff>
 800fe22:	9b03      	ldr	r3, [sp, #12]
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	f000 8082 	beq.w	800ff2e <ull_adcoffsetscalibration+0x1fe>
 800fe2a:	f1bb 0f01 	cmp.w	fp, #1
 800fe2e:	f000 8081 	beq.w	800ff34 <ull_adcoffsetscalibration+0x204>
 800fe32:	2301      	movs	r3, #1
 800fe34:	9303      	str	r3, [sp, #12]
 800fe36:	f1bb 0b01 	subs.w	fp, fp, #1
 800fe3a:	d043      	beq.n	800fec4 <ull_adcoffsetscalibration+0x194>
 800fe3c:	4650      	mov	r0, sl
 800fe3e:	f7f5 fe77 	bl	8005b30 <dwt_rxenable>
 800fe42:	2014      	movs	r0, #20
 800fe44:	f7f0 fb73 	bl	800052e <deca_usleep>
 800fe48:	f04f 0904 	mov.w	r9, #4
 800fe4c:	f8cd a000 	str.w	sl, [sp]
 800fe50:	23fe      	movs	r3, #254	; 0xfe
 800fe52:	4652      	mov	r2, sl
 800fe54:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 800fe58:	4638      	mov	r0, r7
 800fe5a:	f7ff fef5 	bl	800fc48 <dwt_modify8bitoffsetreg>
 800fe5e:	2301      	movs	r3, #1
 800fe60:	9300      	str	r3, [sp, #0]
 800fe62:	23fe      	movs	r3, #254	; 0xfe
 800fe64:	4652      	mov	r2, sl
 800fe66:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 800fe6a:	4638      	mov	r0, r7
 800fe6c:	f7ff feec 	bl	800fc48 <dwt_modify8bitoffsetreg>
 800fe70:	4652      	mov	r2, sl
 800fe72:	4937      	ldr	r1, [pc, #220]	; (800ff50 <ull_adcoffsetscalibration+0x220>)
 800fe74:	4638      	mov	r0, r7
 800fe76:	f7fe fb92 	bl	800e59e <dwt_read32bitoffsetreg>
 800fe7a:	fa58 f880 	uxtab	r8, r8, r0
 800fe7e:	fa1f f888 	uxth.w	r8, r8
 800fe82:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800fe86:	441e      	add	r6, r3
 800fe88:	b2b6      	uxth	r6, r6
 800fe8a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800fe8e:	441d      	add	r5, r3
 800fe90:	b2ad      	uxth	r5, r5
 800fe92:	eb04 6410 	add.w	r4, r4, r0, lsr #24
 800fe96:	b2a4      	uxth	r4, r4
 800fe98:	f1b9 0901 	subs.w	r9, r9, #1
 800fe9c:	d1d6      	bne.n	800fe4c <ull_adcoffsetscalibration+0x11c>
 800fe9e:	f3c8 0887 	ubfx	r8, r8, #2, #8
 800fea2:	f3c6 0687 	ubfx	r6, r6, #2, #8
 800fea6:	f3c5 0587 	ubfx	r5, r5, #2, #8
 800feaa:	f3c4 0487 	ubfx	r4, r4, #2, #8
 800feae:	4652      	mov	r2, sl
 800feb0:	2144      	movs	r1, #68	; 0x44
 800feb2:	4638      	mov	r0, r7
 800feb4:	f7fe fb73 	bl	800e59e <dwt_read32bitoffsetreg>
 800feb8:	4b26      	ldr	r3, [pc, #152]	; (800ff54 <ull_adcoffsetscalibration+0x224>)
 800feba:	4218      	tst	r0, r3
 800febc:	d0af      	beq.n	800fe1e <ull_adcoffsetscalibration+0xee>
 800febe:	f7f5 fe29 	bl	8005b14 <dwt_forcetrxoff>
 800fec2:	e7b2      	b.n	800fe2a <ull_adcoffsetscalibration+0xfa>
 800fec4:	f04f 0900 	mov.w	r9, #0
 800fec8:	9b08      	ldr	r3, [sp, #32]
 800feca:	2200      	movs	r2, #0
 800fecc:	213c      	movs	r1, #60	; 0x3c
 800fece:	4638      	mov	r0, r7
 800fed0:	f7ff f844 	bl	800ef5c <dwt_write32bitoffsetreg>
 800fed4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fed6:	2200      	movs	r2, #0
 800fed8:	2140      	movs	r1, #64	; 0x40
 800feda:	4638      	mov	r0, r7
 800fedc:	f7ff f83e 	bl	800ef5c <dwt_write32bitoffsetreg>
 800fee0:	042b      	lsls	r3, r5, #16
 800fee2:	eb03 6304 	add.w	r3, r3, r4, lsl #24
 800fee6:	eb03 2306 	add.w	r3, r3, r6, lsl #8
 800feea:	4443      	add	r3, r8
 800feec:	2200      	movs	r2, #0
 800feee:	491a      	ldr	r1, [pc, #104]	; (800ff58 <ull_adcoffsetscalibration+0x228>)
 800fef0:	4638      	mov	r0, r7
 800fef2:	f7ff f833 	bl	800ef5c <dwt_write32bitoffsetreg>
 800fef6:	9b04      	ldr	r3, [sp, #16]
 800fef8:	2200      	movs	r2, #0
 800fefa:	4918      	ldr	r1, [pc, #96]	; (800ff5c <ull_adcoffsetscalibration+0x22c>)
 800fefc:	4638      	mov	r0, r7
 800fefe:	f7ff f82d 	bl	800ef5c <dwt_write32bitoffsetreg>
 800ff02:	9b05      	ldr	r3, [sp, #20]
 800ff04:	2200      	movs	r2, #0
 800ff06:	490d      	ldr	r1, [pc, #52]	; (800ff3c <ull_adcoffsetscalibration+0x20c>)
 800ff08:	4638      	mov	r0, r7
 800ff0a:	f7ff f827 	bl	800ef5c <dwt_write32bitoffsetreg>
 800ff0e:	9b06      	ldr	r3, [sp, #24]
 800ff10:	2200      	movs	r2, #0
 800ff12:	490b      	ldr	r1, [pc, #44]	; (800ff40 <ull_adcoffsetscalibration+0x210>)
 800ff14:	4638      	mov	r0, r7
 800ff16:	f7ff fa05 	bl	800f324 <dwt_write8bitoffsetreg>
 800ff1a:	9b07      	ldr	r3, [sp, #28]
 800ff1c:	2200      	movs	r2, #0
 800ff1e:	4909      	ldr	r1, [pc, #36]	; (800ff44 <ull_adcoffsetscalibration+0x214>)
 800ff20:	4638      	mov	r0, r7
 800ff22:	f7ff f81b 	bl	800ef5c <dwt_write32bitoffsetreg>
 800ff26:	4648      	mov	r0, r9
 800ff28:	b00b      	add	sp, #44	; 0x2c
 800ff2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff2e:	f04f 0900 	mov.w	r9, #0
 800ff32:	e7c9      	b.n	800fec8 <ull_adcoffsetscalibration+0x198>
 800ff34:	f06f 0905 	mvn.w	r9, #5
 800ff38:	e7c6      	b.n	800fec8 <ull_adcoffsetscalibration+0x198>
 800ff3a:	bf00      	nop
 800ff3c:	00030014 	.word	0x00030014
 800ff40:	00030018 	.word	0x00030018
 800ff44:	0003002c 	.word	0x0003002c
 800ff48:	00030044 	.word	0x00030044
 800ff4c:	38010000 	.word	0x38010000
 800ff50:	0003004c 	.word	0x0003004c
 800ff54:	3427ff00 	.word	0x3427ff00
 800ff58:	00030010 	.word	0x00030010
 800ff5c:	00070014 	.word	0x00070014

0800ff60 <ull_restoreconfig>:
 800ff60:	b510      	push	{r4, lr}
 800ff62:	4604      	mov	r4, r0
 800ff64:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800ff66:	7d9b      	ldrb	r3, [r3, #22]
 800ff68:	085b      	lsrs	r3, r3, #1
 800ff6a:	d01a      	beq.n	800ffa2 <ull_restoreconfig+0x42>
 800ff6c:	2200      	movs	r2, #0
 800ff6e:	4912      	ldr	r1, [pc, #72]	; (800ffb8 <ull_restoreconfig+0x58>)
 800ff70:	4620      	mov	r0, r4
 800ff72:	f7fe fb2a 	bl	800e5ca <dwt_read16bitoffsetreg>
 800ff76:	f3c0 03c4 	ubfx	r3, r0, #3, #5
 800ff7a:	3b09      	subs	r3, #9
 800ff7c:	2b0f      	cmp	r3, #15
 800ff7e:	d80c      	bhi.n	800ff9a <ull_restoreconfig+0x3a>
 800ff80:	f000 0001 	and.w	r0, r0, #1
 800ff84:	2800      	cmp	r0, #0
 800ff86:	bf0c      	ite	eq
 800ff88:	2105      	moveq	r1, #5
 800ff8a:	2109      	movne	r1, #9
 800ff8c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ff8e:	7a1b      	ldrb	r3, [r3, #8]
 800ff90:	2b01      	cmp	r3, #1
 800ff92:	d002      	beq.n	800ff9a <ull_restoreconfig+0x3a>
 800ff94:	4620      	mov	r0, r4
 800ff96:	f7ff f8ad 	bl	800f0f4 <ull_configmrxlut>
 800ff9a:	4620      	mov	r0, r4
 800ff9c:	f7ff fec8 	bl	800fd30 <ull_adcoffsetscalibration>
 800ffa0:	bd10      	pop	{r4, pc}
 800ffa2:	2301      	movs	r3, #1
 800ffa4:	2200      	movs	r2, #0
 800ffa6:	4905      	ldr	r1, [pc, #20]	; (800ffbc <ull_restoreconfig+0x5c>)
 800ffa8:	f7ff f9bc 	bl	800f324 <dwt_write8bitoffsetreg>
 800ffac:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800ffae:	7d93      	ldrb	r3, [r2, #22]
 800ffb0:	f043 0302 	orr.w	r3, r3, #2
 800ffb4:	7593      	strb	r3, [r2, #22]
 800ffb6:	e7d9      	b.n	800ff6c <ull_restoreconfig+0xc>
 800ffb8:	00010008 	.word	0x00010008
 800ffbc:	00010020 	.word	0x00010020

0800ffc0 <ull_calcbandwidthadj>:
 800ffc0:	b570      	push	{r4, r5, r6, lr}
 800ffc2:	b082      	sub	sp, #8
 800ffc4:	4604      	mov	r4, r0
 800ffc6:	460d      	mov	r5, r1
 800ffc8:	2101      	movs	r1, #1
 800ffca:	f7fe ff7b 	bl	800eec4 <ull_force_clocks>
 800ffce:	2100      	movs	r1, #0
 800ffd0:	4620      	mov	r0, r4
 800ffd2:	f7ff fcfd 	bl	800f9d0 <ull_enable_rf_tx>
 800ffd6:	4620      	mov	r0, r4
 800ffd8:	f7ff fd2e 	bl	800fa38 <ull_enable_rftx_blocks>
 800ffdc:	f3c5 030b 	ubfx	r3, r5, #0, #12
 800ffe0:	2200      	movs	r2, #0
 800ffe2:	4915      	ldr	r1, [pc, #84]	; (8010038 <ull_calcbandwidthadj+0x78>)
 800ffe4:	4620      	mov	r0, r4
 800ffe6:	f7fe ff4e 	bl	800ee86 <dwt_write16bitoffsetreg>
 800ffea:	2303      	movs	r3, #3
 800ffec:	9300      	str	r3, [sp, #0]
 800ffee:	23ff      	movs	r3, #255	; 0xff
 800fff0:	2200      	movs	r2, #0
 800fff2:	4912      	ldr	r1, [pc, #72]	; (801003c <ull_calcbandwidthadj+0x7c>)
 800fff4:	4620      	mov	r0, r4
 800fff6:	f7ff fe27 	bl	800fc48 <dwt_modify8bitoffsetreg>
 800fffa:	4e10      	ldr	r6, [pc, #64]	; (801003c <ull_calcbandwidthadj+0x7c>)
 800fffc:	2500      	movs	r5, #0
 800fffe:	462a      	mov	r2, r5
 8010000:	4631      	mov	r1, r6
 8010002:	4620      	mov	r0, r4
 8010004:	f7fe fb20 	bl	800e648 <dwt_read8bitoffsetreg>
 8010008:	f010 0f01 	tst.w	r0, #1
 801000c:	d1f7      	bne.n	800fffe <ull_calcbandwidthadj+0x3e>
 801000e:	4620      	mov	r0, r4
 8010010:	f7ff f906 	bl	800f220 <ull_disable_rftx_blocks>
 8010014:	2100      	movs	r1, #0
 8010016:	4620      	mov	r0, r4
 8010018:	f7ff f90c 	bl	800f234 <ull_disable_rf_tx>
 801001c:	2105      	movs	r1, #5
 801001e:	4620      	mov	r0, r4
 8010020:	f7fe ff50 	bl	800eec4 <ull_force_clocks>
 8010024:	2200      	movs	r2, #0
 8010026:	4906      	ldr	r1, [pc, #24]	; (8010040 <ull_calcbandwidthadj+0x80>)
 8010028:	4620      	mov	r0, r4
 801002a:	f7fe fb0d 	bl	800e648 <dwt_read8bitoffsetreg>
 801002e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8010032:	b002      	add	sp, #8
 8010034:	bd70      	pop	{r4, r5, r6, pc}
 8010036:	bf00      	nop
 8010038:	0008001c 	.word	0x0008001c
 801003c:	00080010 	.word	0x00080010
 8010040:	0007001c 	.word	0x0007001c

08010044 <ull_configuretxrf>:
 8010044:	b538      	push	{r3, r4, r5, lr}
 8010046:	4605      	mov	r5, r0
 8010048:	460c      	mov	r4, r1
 801004a:	f8b1 1005 	ldrh.w	r1, [r1, #5]
 801004e:	b149      	cbz	r1, 8010064 <ull_configuretxrf+0x20>
 8010050:	f7ff ffb6 	bl	800ffc0 <ull_calcbandwidthadj>
 8010054:	f8d4 3001 	ldr.w	r3, [r4, #1]
 8010058:	2200      	movs	r2, #0
 801005a:	4905      	ldr	r1, [pc, #20]	; (8010070 <ull_configuretxrf+0x2c>)
 801005c:	4628      	mov	r0, r5
 801005e:	f7fe ff7d 	bl	800ef5c <dwt_write32bitoffsetreg>
 8010062:	bd38      	pop	{r3, r4, r5, pc}
 8010064:	7823      	ldrb	r3, [r4, #0]
 8010066:	2200      	movs	r2, #0
 8010068:	4902      	ldr	r1, [pc, #8]	; (8010074 <ull_configuretxrf+0x30>)
 801006a:	f7ff f95b 	bl	800f324 <dwt_write8bitoffsetreg>
 801006e:	e7f1      	b.n	8010054 <ull_configuretxrf+0x10>
 8010070:	00010004 	.word	0x00010004
 8010074:	0007001c 	.word	0x0007001c

08010078 <ull_repeated_frames>:
 8010078:	b530      	push	{r4, r5, lr}
 801007a:	b083      	sub	sp, #12
 801007c:	4604      	mov	r4, r0
 801007e:	460d      	mov	r5, r1
 8010080:	2310      	movs	r3, #16
 8010082:	9300      	str	r3, [sp, #0]
 8010084:	23ff      	movs	r3, #255	; 0xff
 8010086:	2200      	movs	r2, #0
 8010088:	4906      	ldr	r1, [pc, #24]	; (80100a4 <ull_repeated_frames+0x2c>)
 801008a:	f7ff fddd 	bl	800fc48 <dwt_modify8bitoffsetreg>
 801008e:	462b      	mov	r3, r5
 8010090:	2d02      	cmp	r5, #2
 8010092:	bf38      	it	cc
 8010094:	2302      	movcc	r3, #2
 8010096:	2200      	movs	r2, #0
 8010098:	2128      	movs	r1, #40	; 0x28
 801009a:	4620      	mov	r0, r4
 801009c:	f7fe ff5e 	bl	800ef5c <dwt_write32bitoffsetreg>
 80100a0:	b003      	add	sp, #12
 80100a2:	bd30      	pop	{r4, r5, pc}
 80100a4:	000f0028 	.word	0x000f0028

080100a8 <ull_setdwstate>:
 80100a8:	b530      	push	{r4, r5, lr}
 80100aa:	b083      	sub	sp, #12
 80100ac:	4604      	mov	r4, r0
 80100ae:	2901      	cmp	r1, #1
 80100b0:	d01d      	beq.n	80100ee <ull_setdwstate+0x46>
 80100b2:	2902      	cmp	r1, #2
 80100b4:	d030      	beq.n	8010118 <ull_setdwstate+0x70>
 80100b6:	2301      	movs	r3, #1
 80100b8:	9300      	str	r3, [sp, #0]
 80100ba:	23ff      	movs	r3, #255	; 0xff
 80100bc:	2200      	movs	r2, #0
 80100be:	4926      	ldr	r1, [pc, #152]	; (8010158 <ull_setdwstate+0xb0>)
 80100c0:	f7ff fdc2 	bl	800fc48 <dwt_modify8bitoffsetreg>
 80100c4:	4d25      	ldr	r5, [pc, #148]	; (801015c <ull_setdwstate+0xb4>)
 80100c6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80100ca:	9300      	str	r3, [sp, #0]
 80100cc:	f46f 7380 	mvn.w	r3, #256	; 0x100
 80100d0:	2200      	movs	r2, #0
 80100d2:	4629      	mov	r1, r5
 80100d4:	4620      	mov	r0, r4
 80100d6:	f7ff fc47 	bl	800f968 <dwt_modify32bitoffsetreg>
 80100da:	2300      	movs	r3, #0
 80100dc:	9300      	str	r3, [sp, #0]
 80100de:	237f      	movs	r3, #127	; 0x7f
 80100e0:	2202      	movs	r2, #2
 80100e2:	4629      	mov	r1, r5
 80100e4:	4620      	mov	r0, r4
 80100e6:	f7ff fdaf 	bl	800fc48 <dwt_modify8bitoffsetreg>
 80100ea:	b003      	add	sp, #12
 80100ec:	bd30      	pop	{r4, r5, pc}
 80100ee:	2105      	movs	r1, #5
 80100f0:	f7fe fee8 	bl	800eec4 <ull_force_clocks>
 80100f4:	f44f 7381 	mov.w	r3, #258	; 0x102
 80100f8:	9300      	str	r3, [sp, #0]
 80100fa:	f04f 33ff 	mov.w	r3, #4294967295
 80100fe:	2200      	movs	r2, #0
 8010100:	4917      	ldr	r1, [pc, #92]	; (8010160 <ull_setdwstate+0xb8>)
 8010102:	4620      	mov	r0, r4
 8010104:	f7ff fc30 	bl	800f968 <dwt_modify32bitoffsetreg>
 8010108:	2201      	movs	r2, #1
 801010a:	9200      	str	r2, [sp, #0]
 801010c:	23ff      	movs	r3, #255	; 0xff
 801010e:	4913      	ldr	r1, [pc, #76]	; (801015c <ull_setdwstate+0xb4>)
 8010110:	4620      	mov	r0, r4
 8010112:	f7ff fd99 	bl	800fc48 <dwt_modify8bitoffsetreg>
 8010116:	e7e8      	b.n	80100ea <ull_setdwstate+0x42>
 8010118:	2303      	movs	r3, #3
 801011a:	9300      	str	r3, [sp, #0]
 801011c:	23ff      	movs	r3, #255	; 0xff
 801011e:	2200      	movs	r2, #0
 8010120:	490d      	ldr	r1, [pc, #52]	; (8010158 <ull_setdwstate+0xb0>)
 8010122:	f7ff fd91 	bl	800fc48 <dwt_modify8bitoffsetreg>
 8010126:	4d0d      	ldr	r5, [pc, #52]	; (801015c <ull_setdwstate+0xb4>)
 8010128:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801012c:	9300      	str	r3, [sp, #0]
 801012e:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8010132:	2200      	movs	r2, #0
 8010134:	4629      	mov	r1, r5
 8010136:	4620      	mov	r0, r4
 8010138:	f7ff fc16 	bl	800f968 <dwt_modify32bitoffsetreg>
 801013c:	2300      	movs	r3, #0
 801013e:	9300      	str	r3, [sp, #0]
 8010140:	237f      	movs	r3, #127	; 0x7f
 8010142:	2202      	movs	r2, #2
 8010144:	4629      	mov	r1, r5
 8010146:	4620      	mov	r0, r4
 8010148:	f7ff fd7e 	bl	800fc48 <dwt_modify8bitoffsetreg>
 801014c:	2105      	movs	r1, #5
 801014e:	4620      	mov	r0, r4
 8010150:	f7fe feb8 	bl	800eec4 <ull_force_clocks>
 8010154:	e7c9      	b.n	80100ea <ull_setdwstate+0x42>
 8010156:	bf00      	nop
 8010158:	00110004 	.word	0x00110004
 801015c:	00110008 	.word	0x00110008
 8010160:	00090008 	.word	0x00090008

08010164 <ull_configureframefilter>:
 8010164:	b530      	push	{r4, r5, lr}
 8010166:	b083      	sub	sp, #12
 8010168:	4605      	mov	r5, r0
 801016a:	2902      	cmp	r1, #2
 801016c:	d00e      	beq.n	801018c <ull_configureframefilter+0x28>
 801016e:	2400      	movs	r4, #0
 8010170:	9400      	str	r4, [sp, #0]
 8010172:	23fe      	movs	r3, #254	; 0xfe
 8010174:	4622      	mov	r2, r4
 8010176:	2110      	movs	r1, #16
 8010178:	f7ff fd66 	bl	800fc48 <dwt_modify8bitoffsetreg>
 801017c:	4623      	mov	r3, r4
 801017e:	4622      	mov	r2, r4
 8010180:	2114      	movs	r1, #20
 8010182:	4628      	mov	r0, r5
 8010184:	f7fe fe7f 	bl	800ee86 <dwt_write16bitoffsetreg>
 8010188:	b003      	add	sp, #12
 801018a:	bd30      	pop	{r4, r5, pc}
 801018c:	4614      	mov	r4, r2
 801018e:	2301      	movs	r3, #1
 8010190:	9300      	str	r3, [sp, #0]
 8010192:	23ff      	movs	r3, #255	; 0xff
 8010194:	2200      	movs	r2, #0
 8010196:	2110      	movs	r1, #16
 8010198:	f7ff fd56 	bl	800fc48 <dwt_modify8bitoffsetreg>
 801019c:	4623      	mov	r3, r4
 801019e:	2200      	movs	r2, #0
 80101a0:	2114      	movs	r1, #20
 80101a2:	4628      	mov	r0, r5
 80101a4:	f7fe fe6f 	bl	800ee86 <dwt_write16bitoffsetreg>
 80101a8:	e7ee      	b.n	8010188 <ull_configureframefilter+0x24>
	...

080101ac <ull_run_pgfcal>:
 80101ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101b0:	b082      	sub	sp, #8
 80101b2:	4605      	mov	r5, r0
 80101b4:	4c2a      	ldr	r4, [pc, #168]	; (8010260 <ull_run_pgfcal+0xb4>)
 80101b6:	2301      	movs	r3, #1
 80101b8:	9300      	str	r3, [sp, #0]
 80101ba:	23ff      	movs	r3, #255	; 0xff
 80101bc:	2200      	movs	r2, #0
 80101be:	4621      	mov	r1, r4
 80101c0:	f7ff fd42 	bl	800fc48 <dwt_modify8bitoffsetreg>
 80101c4:	2310      	movs	r3, #16
 80101c6:	9300      	str	r3, [sp, #0]
 80101c8:	23ff      	movs	r3, #255	; 0xff
 80101ca:	2200      	movs	r2, #0
 80101cc:	4621      	mov	r1, r4
 80101ce:	4628      	mov	r0, r5
 80101d0:	f7ff fd3a 	bl	800fc48 <dwt_modify8bitoffsetreg>
 80101d4:	2403      	movs	r4, #3
 80101d6:	f04f 0814 	mov.w	r8, #20
 80101da:	4f22      	ldr	r7, [pc, #136]	; (8010264 <ull_run_pgfcal+0xb8>)
 80101dc:	2600      	movs	r6, #0
 80101de:	4640      	mov	r0, r8
 80101e0:	f7f0 f9a5 	bl	800052e <deca_usleep>
 80101e4:	4632      	mov	r2, r6
 80101e6:	4639      	mov	r1, r7
 80101e8:	4628      	mov	r0, r5
 80101ea:	f7fe fa2d 	bl	800e648 <dwt_read8bitoffsetreg>
 80101ee:	2801      	cmp	r0, #1
 80101f0:	d034      	beq.n	801025c <ull_run_pgfcal+0xb0>
 80101f2:	1e63      	subs	r3, r4, #1
 80101f4:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 80101f8:	d1f1      	bne.n	80101de <ull_run_pgfcal+0x32>
 80101fa:	f06f 0402 	mvn.w	r4, #2
 80101fe:	4e18      	ldr	r6, [pc, #96]	; (8010260 <ull_run_pgfcal+0xb4>)
 8010200:	2300      	movs	r3, #0
 8010202:	461a      	mov	r2, r3
 8010204:	4631      	mov	r1, r6
 8010206:	4628      	mov	r0, r5
 8010208:	f7ff f88c 	bl	800f324 <dwt_write8bitoffsetreg>
 801020c:	2301      	movs	r3, #1
 801020e:	2200      	movs	r2, #0
 8010210:	4914      	ldr	r1, [pc, #80]	; (8010264 <ull_run_pgfcal+0xb8>)
 8010212:	4628      	mov	r0, r5
 8010214:	f7ff f886 	bl	800f324 <dwt_write8bitoffsetreg>
 8010218:	2301      	movs	r3, #1
 801021a:	9300      	str	r3, [sp, #0]
 801021c:	23ff      	movs	r3, #255	; 0xff
 801021e:	2202      	movs	r2, #2
 8010220:	4631      	mov	r1, r6
 8010222:	4628      	mov	r0, r5
 8010224:	f7ff fd10 	bl	800fc48 <dwt_modify8bitoffsetreg>
 8010228:	2200      	movs	r2, #0
 801022a:	490f      	ldr	r1, [pc, #60]	; (8010268 <ull_run_pgfcal+0xbc>)
 801022c:	4628      	mov	r0, r5
 801022e:	f7fe f9b6 	bl	800e59e <dwt_read32bitoffsetreg>
 8010232:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8010236:	4298      	cmp	r0, r3
 8010238:	bf08      	it	eq
 801023a:	f06f 0403 	mvneq.w	r4, #3
 801023e:	2200      	movs	r2, #0
 8010240:	490a      	ldr	r1, [pc, #40]	; (801026c <ull_run_pgfcal+0xc0>)
 8010242:	4628      	mov	r0, r5
 8010244:	f7fe f9ab 	bl	800e59e <dwt_read32bitoffsetreg>
 8010248:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 801024c:	4298      	cmp	r0, r3
 801024e:	bf14      	ite	ne
 8010250:	4620      	movne	r0, r4
 8010252:	f06f 0004 	mvneq.w	r0, #4
 8010256:	b002      	add	sp, #8
 8010258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801025c:	2400      	movs	r4, #0
 801025e:	e7ce      	b.n	80101fe <ull_run_pgfcal+0x52>
 8010260:	0004000c 	.word	0x0004000c
 8010264:	00040020 	.word	0x00040020
 8010268:	00040014 	.word	0x00040014
 801026c:	0004001c 	.word	0x0004001c

08010270 <ull_setinterrupt>:
 8010270:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010274:	b083      	sub	sp, #12
 8010276:	4605      	mov	r5, r0
 8010278:	4688      	mov	r8, r1
 801027a:	4617      	mov	r7, r2
 801027c:	461c      	mov	r4, r3
 801027e:	f7f0 f92d 	bl	80004dc <decamutexon>
 8010282:	4606      	mov	r6, r0
 8010284:	2c02      	cmp	r4, #2
 8010286:	d019      	beq.n	80102bc <ull_setinterrupt+0x4c>
 8010288:	2c04      	cmp	r4, #4
 801028a:	d017      	beq.n	80102bc <ull_setinterrupt+0x4c>
 801028c:	f004 03fd 	and.w	r3, r4, #253	; 0xfd
 8010290:	2b01      	cmp	r3, #1
 8010292:	d03f      	beq.n	8010314 <ull_setinterrupt+0xa4>
 8010294:	f04f 0900 	mov.w	r9, #0
 8010298:	f8cd 9000 	str.w	r9, [sp]
 801029c:	ea6f 0308 	mvn.w	r3, r8
 80102a0:	464a      	mov	r2, r9
 80102a2:	213c      	movs	r1, #60	; 0x3c
 80102a4:	4628      	mov	r0, r5
 80102a6:	f7ff fb5f 	bl	800f968 <dwt_modify32bitoffsetreg>
 80102aa:	f8cd 9000 	str.w	r9, [sp]
 80102ae:	43fb      	mvns	r3, r7
 80102b0:	464a      	mov	r2, r9
 80102b2:	2140      	movs	r1, #64	; 0x40
 80102b4:	4628      	mov	r0, r5
 80102b6:	f7ff fb57 	bl	800f968 <dwt_modify32bitoffsetreg>
 80102ba:	e00b      	b.n	80102d4 <ull_setinterrupt+0x64>
 80102bc:	4643      	mov	r3, r8
 80102be:	2200      	movs	r2, #0
 80102c0:	213c      	movs	r1, #60	; 0x3c
 80102c2:	4628      	mov	r0, r5
 80102c4:	f7fe fe4a 	bl	800ef5c <dwt_write32bitoffsetreg>
 80102c8:	463b      	mov	r3, r7
 80102ca:	2200      	movs	r2, #0
 80102cc:	2140      	movs	r1, #64	; 0x40
 80102ce:	4628      	mov	r0, r5
 80102d0:	f7fe fe44 	bl	800ef5c <dwt_write32bitoffsetreg>
 80102d4:	3c03      	subs	r4, #3
 80102d6:	b2e4      	uxtb	r4, r4
 80102d8:	2c01      	cmp	r4, #1
 80102da:	d92d      	bls.n	8010338 <ull_setinterrupt+0xc8>
 80102dc:	2200      	movs	r2, #0
 80102de:	213c      	movs	r1, #60	; 0x3c
 80102e0:	4628      	mov	r0, r5
 80102e2:	f7fe f95c 	bl	800e59e <dwt_read32bitoffsetreg>
 80102e6:	4603      	mov	r3, r0
 80102e8:	2200      	movs	r2, #0
 80102ea:	2144      	movs	r1, #68	; 0x44
 80102ec:	4628      	mov	r0, r5
 80102ee:	f7fe fe35 	bl	800ef5c <dwt_write32bitoffsetreg>
 80102f2:	2200      	movs	r2, #0
 80102f4:	2140      	movs	r1, #64	; 0x40
 80102f6:	4628      	mov	r0, r5
 80102f8:	f7fe f951 	bl	800e59e <dwt_read32bitoffsetreg>
 80102fc:	4603      	mov	r3, r0
 80102fe:	2200      	movs	r2, #0
 8010300:	2148      	movs	r1, #72	; 0x48
 8010302:	4628      	mov	r0, r5
 8010304:	f7fe fe2a 	bl	800ef5c <dwt_write32bitoffsetreg>
 8010308:	4630      	mov	r0, r6
 801030a:	f7f0 f8f8 	bl	80004fe <decamutexoff>
 801030e:	b003      	add	sp, #12
 8010310:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010314:	f8cd 8000 	str.w	r8, [sp]
 8010318:	f04f 33ff 	mov.w	r3, #4294967295
 801031c:	2200      	movs	r2, #0
 801031e:	213c      	movs	r1, #60	; 0x3c
 8010320:	4628      	mov	r0, r5
 8010322:	f7ff fb21 	bl	800f968 <dwt_modify32bitoffsetreg>
 8010326:	9700      	str	r7, [sp, #0]
 8010328:	f04f 33ff 	mov.w	r3, #4294967295
 801032c:	2200      	movs	r2, #0
 801032e:	2140      	movs	r1, #64	; 0x40
 8010330:	4628      	mov	r0, r5
 8010332:	f7ff fb19 	bl	800f968 <dwt_modify32bitoffsetreg>
 8010336:	e7cd      	b.n	80102d4 <ull_setinterrupt+0x64>
 8010338:	2110      	movs	r1, #16
 801033a:	9100      	str	r1, [sp, #0]
 801033c:	23ff      	movs	r3, #255	; 0xff
 801033e:	2202      	movs	r2, #2
 8010340:	4628      	mov	r0, r5
 8010342:	f7ff fc81 	bl	800fc48 <dwt_modify8bitoffsetreg>
 8010346:	e7c9      	b.n	80102dc <ull_setinterrupt+0x6c>

08010348 <prs_ack_enable>:
 8010348:	b500      	push	{lr}
 801034a:	b083      	sub	sp, #12
 801034c:	2900      	cmp	r1, #0
 801034e:	bf0b      	itete	eq
 8010350:	23ff      	moveq	r3, #255	; 0xff
 8010352:	23f7      	movne	r3, #247	; 0xf7
 8010354:	2200      	moveq	r2, #0
 8010356:	2208      	movne	r2, #8
 8010358:	9200      	str	r2, [sp, #0]
 801035a:	2201      	movs	r2, #1
 801035c:	2110      	movs	r1, #16
 801035e:	f7ff fc73 	bl	800fc48 <dwt_modify8bitoffsetreg>
 8010362:	b003      	add	sp, #12
 8010364:	f85d fb04 	ldr.w	pc, [sp], #4

08010368 <dwt_modify16bitoffsetreg>:
 8010368:	b510      	push	{r4, lr}
 801036a:	b084      	sub	sp, #16
 801036c:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8010370:	f88d 300c 	strb.w	r3, [sp, #12]
 8010374:	0a1b      	lsrs	r3, r3, #8
 8010376:	f88d 300d 	strb.w	r3, [sp, #13]
 801037a:	f88d 400e 	strb.w	r4, [sp, #14]
 801037e:	0a24      	lsrs	r4, r4, #8
 8010380:	f88d 400f 	strb.w	r4, [sp, #15]
 8010384:	f248 0302 	movw	r3, #32770	; 0x8002
 8010388:	9301      	str	r3, [sp, #4]
 801038a:	ab03      	add	r3, sp, #12
 801038c:	9300      	str	r3, [sp, #0]
 801038e:	2304      	movs	r3, #4
 8010390:	b292      	uxth	r2, r2
 8010392:	f7fe f87c 	bl	800e48e <dwt_xfer3xxx>
 8010396:	b004      	add	sp, #16
 8010398:	bd10      	pop	{r4, pc}
	...

0801039c <ull_configurestsmode>:
 801039c:	b530      	push	{r4, r5, lr}
 801039e:	b083      	sub	sp, #12
 80103a0:	4605      	mov	r5, r0
 80103a2:	460c      	mov	r4, r1
 80103a4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80103a6:	7559      	strb	r1, [r3, #21]
 80103a8:	030b      	lsls	r3, r1, #12
 80103aa:	f403 4330 	and.w	r3, r3, #45056	; 0xb000
 80103ae:	9300      	str	r3, [sp, #0]
 80103b0:	f644 73ff 	movw	r3, #20479	; 0x4fff
 80103b4:	2200      	movs	r2, #0
 80103b6:	2110      	movs	r1, #16
 80103b8:	f7ff ffd6 	bl	8010368 <dwt_modify16bitoffsetreg>
 80103bc:	f004 0403 	and.w	r4, r4, #3
 80103c0:	2c03      	cmp	r4, #3
 80103c2:	bf0c      	ite	eq
 80103c4:	4b04      	ldreq	r3, [pc, #16]	; (80103d8 <ull_configurestsmode+0x3c>)
 80103c6:	4b05      	ldrne	r3, [pc, #20]	; (80103dc <ull_configurestsmode+0x40>)
 80103c8:	2200      	movs	r2, #0
 80103ca:	4905      	ldr	r1, [pc, #20]	; (80103e0 <ull_configurestsmode+0x44>)
 80103cc:	4628      	mov	r0, r5
 80103ce:	f7fe fdc5 	bl	800ef5c <dwt_write32bitoffsetreg>
 80103d2:	b003      	add	sp, #12
 80103d4:	bd30      	pop	{r4, r5, pc}
 80103d6:	bf00      	nop
 80103d8:	af5f35cc 	.word	0xaf5f35cc
 80103dc:	af5f584c 	.word	0xaf5f584c
 80103e0:	0006000c 	.word	0x0006000c

080103e4 <ull_setleds>:
 80103e4:	b530      	push	{r4, r5, lr}
 80103e6:	b083      	sub	sp, #12
 80103e8:	4604      	mov	r4, r0
 80103ea:	f011 0f01 	tst.w	r1, #1
 80103ee:	d01f      	beq.n	8010430 <ull_setleds+0x4c>
 80103f0:	460d      	mov	r5, r1
 80103f2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80103f6:	9300      	str	r3, [sp, #0]
 80103f8:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 80103fc:	2200      	movs	r2, #0
 80103fe:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8010402:	f7ff fab1 	bl	800f968 <dwt_modify32bitoffsetreg>
 8010406:	f44f 0304 	mov.w	r3, #8650752	; 0x840000
 801040a:	9300      	str	r3, [sp, #0]
 801040c:	f04f 33ff 	mov.w	r3, #4294967295
 8010410:	2200      	movs	r2, #0
 8010412:	4918      	ldr	r1, [pc, #96]	; (8010474 <ull_setleds+0x90>)
 8010414:	4620      	mov	r0, r4
 8010416:	f7ff faa7 	bl	800f968 <dwt_modify32bitoffsetreg>
 801041a:	f015 0f02 	tst.w	r5, #2
 801041e:	d11a      	bne.n	8010456 <ull_setleds+0x72>
 8010420:	f44f 7388 	mov.w	r3, #272	; 0x110
 8010424:	2200      	movs	r2, #0
 8010426:	4914      	ldr	r1, [pc, #80]	; (8010478 <ull_setleds+0x94>)
 8010428:	4620      	mov	r0, r4
 801042a:	f7fe fd97 	bl	800ef5c <dwt_write32bitoffsetreg>
 801042e:	e010      	b.n	8010452 <ull_setleds+0x6e>
 8010430:	2500      	movs	r5, #0
 8010432:	9500      	str	r5, [sp, #0]
 8010434:	f46f 637c 	mvn.w	r3, #4032	; 0xfc0
 8010438:	462a      	mov	r2, r5
 801043a:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801043e:	f7ff fa93 	bl	800f968 <dwt_modify32bitoffsetreg>
 8010442:	9500      	str	r5, [sp, #0]
 8010444:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8010448:	462a      	mov	r2, r5
 801044a:	490b      	ldr	r1, [pc, #44]	; (8010478 <ull_setleds+0x94>)
 801044c:	4620      	mov	r0, r4
 801044e:	f7ff ff8b 	bl	8010368 <dwt_modify16bitoffsetreg>
 8010452:	b003      	add	sp, #12
 8010454:	bd30      	pop	{r4, r5, pc}
 8010456:	4d08      	ldr	r5, [pc, #32]	; (8010478 <ull_setleds+0x94>)
 8010458:	4b08      	ldr	r3, [pc, #32]	; (801047c <ull_setleds+0x98>)
 801045a:	2200      	movs	r2, #0
 801045c:	4629      	mov	r1, r5
 801045e:	4620      	mov	r0, r4
 8010460:	f7fe fd7c 	bl	800ef5c <dwt_write32bitoffsetreg>
 8010464:	f44f 7388 	mov.w	r3, #272	; 0x110
 8010468:	2200      	movs	r2, #0
 801046a:	4629      	mov	r1, r5
 801046c:	4620      	mov	r0, r4
 801046e:	f7fe fd75 	bl	800ef5c <dwt_write32bitoffsetreg>
 8010472:	e7ee      	b.n	8010452 <ull_setleds+0x6e>
 8010474:	00110004 	.word	0x00110004
 8010478:	00110018 	.word	0x00110018
 801047c:	000f0110 	.word	0x000f0110

08010480 <ull_pgf_cal>:
 8010480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010482:	b083      	sub	sp, #12
 8010484:	4604      	mov	r4, r0
 8010486:	2901      	cmp	r1, #1
 8010488:	d009      	beq.n	801049e <ull_pgf_cal+0x1e>
 801048a:	2014      	movs	r0, #20
 801048c:	f7f0 f84f 	bl	800052e <deca_usleep>
 8010490:	4620      	mov	r0, r4
 8010492:	f7ff fe8b 	bl	80101ac <ull_run_pgfcal>
 8010496:	4605      	mov	r5, r0
 8010498:	4628      	mov	r0, r5
 801049a:	b003      	add	sp, #12
 801049c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801049e:	4e0f      	ldr	r6, [pc, #60]	; (80104dc <ull_pgf_cal+0x5c>)
 80104a0:	2200      	movs	r2, #0
 80104a2:	4631      	mov	r1, r6
 80104a4:	f7fe f891 	bl	800e5ca <dwt_read16bitoffsetreg>
 80104a8:	4607      	mov	r7, r0
 80104aa:	f240 1307 	movw	r3, #263	; 0x107
 80104ae:	9300      	str	r3, [sp, #0]
 80104b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80104b4:	2200      	movs	r2, #0
 80104b6:	4631      	mov	r1, r6
 80104b8:	4620      	mov	r0, r4
 80104ba:	f7ff ff55 	bl	8010368 <dwt_modify16bitoffsetreg>
 80104be:	2014      	movs	r0, #20
 80104c0:	f7f0 f835 	bl	800052e <deca_usleep>
 80104c4:	4620      	mov	r0, r4
 80104c6:	f7ff fe71 	bl	80101ac <ull_run_pgfcal>
 80104ca:	4605      	mov	r5, r0
 80104cc:	2200      	movs	r2, #0
 80104ce:	9200      	str	r2, [sp, #0]
 80104d0:	463b      	mov	r3, r7
 80104d2:	4631      	mov	r1, r6
 80104d4:	4620      	mov	r0, r4
 80104d6:	f7ff ff47 	bl	8010368 <dwt_modify16bitoffsetreg>
 80104da:	e7dd      	b.n	8010498 <ull_pgf_cal+0x18>
 80104dc:	00070048 	.word	0x00070048

080104e0 <ull_setgpiovalue>:
 80104e0:	b500      	push	{lr}
 80104e2:	b083      	sub	sp, #12
 80104e4:	2a01      	cmp	r2, #1
 80104e6:	d009      	beq.n	80104fc <ull_setgpiovalue+0x1c>
 80104e8:	43cb      	mvns	r3, r1
 80104ea:	2200      	movs	r2, #0
 80104ec:	9200      	str	r2, [sp, #0]
 80104ee:	b29b      	uxth	r3, r3
 80104f0:	4906      	ldr	r1, [pc, #24]	; (801050c <ull_setgpiovalue+0x2c>)
 80104f2:	f7ff ff39 	bl	8010368 <dwt_modify16bitoffsetreg>
 80104f6:	b003      	add	sp, #12
 80104f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80104fc:	9100      	str	r1, [sp, #0]
 80104fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010502:	2200      	movs	r2, #0
 8010504:	4901      	ldr	r1, [pc, #4]	; (801050c <ull_setgpiovalue+0x2c>)
 8010506:	f7ff ff2f 	bl	8010368 <dwt_modify16bitoffsetreg>
 801050a:	e7f4      	b.n	80104f6 <ull_setgpiovalue+0x16>
 801050c:	0005000c 	.word	0x0005000c

08010510 <ull_readaccdata>:
 8010510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010512:	b083      	sub	sp, #12
 8010514:	4604      	mov	r4, r0
 8010516:	460f      	mov	r7, r1
 8010518:	4616      	mov	r6, r2
 801051a:	461d      	mov	r5, r3
 801051c:	f248 0340 	movw	r3, #32832	; 0x8040
 8010520:	9300      	str	r3, [sp, #0]
 8010522:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010526:	2200      	movs	r2, #0
 8010528:	4918      	ldr	r1, [pc, #96]	; (801058c <ull_readaccdata+0x7c>)
 801052a:	f7ff ff1d 	bl	8010368 <dwt_modify16bitoffsetreg>
 801052e:	19aa      	adds	r2, r5, r6
 8010530:	f243 0301 	movw	r3, #12289	; 0x3001
 8010534:	429a      	cmp	r2, r3
 8010536:	dc15      	bgt.n	8010564 <ull_readaccdata+0x54>
 8010538:	2d7f      	cmp	r5, #127	; 0x7f
 801053a:	d91d      	bls.n	8010578 <ull_readaccdata+0x68>
 801053c:	2315      	movs	r3, #21
 801053e:	2200      	movs	r2, #0
 8010540:	4913      	ldr	r1, [pc, #76]	; (8010590 <ull_readaccdata+0x80>)
 8010542:	4620      	mov	r0, r4
 8010544:	f7fe fd0a 	bl	800ef5c <dwt_write32bitoffsetreg>
 8010548:	462b      	mov	r3, r5
 801054a:	2200      	movs	r2, #0
 801054c:	4911      	ldr	r1, [pc, #68]	; (8010594 <ull_readaccdata+0x84>)
 801054e:	4620      	mov	r0, r4
 8010550:	f7fe fd04 	bl	800ef5c <dwt_write32bitoffsetreg>
 8010554:	9700      	str	r7, [sp, #0]
 8010556:	4633      	mov	r3, r6
 8010558:	2200      	movs	r2, #0
 801055a:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 801055e:	4620      	mov	r0, r4
 8010560:	f7fe f813 	bl	800e58a <dwt_readfromdevice>
 8010564:	2200      	movs	r2, #0
 8010566:	9200      	str	r2, [sp, #0]
 8010568:	f647 73bf 	movw	r3, #32703	; 0x7fbf
 801056c:	4907      	ldr	r1, [pc, #28]	; (801058c <ull_readaccdata+0x7c>)
 801056e:	4620      	mov	r0, r4
 8010570:	f7ff fefa 	bl	8010368 <dwt_modify16bitoffsetreg>
 8010574:	b003      	add	sp, #12
 8010576:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010578:	9700      	str	r7, [sp, #0]
 801057a:	4633      	mov	r3, r6
 801057c:	462a      	mov	r2, r5
 801057e:	f44f 11a8 	mov.w	r1, #1376256	; 0x150000
 8010582:	4620      	mov	r0, r4
 8010584:	f7fe f801 	bl	800e58a <dwt_readfromdevice>
 8010588:	e7ec      	b.n	8010564 <ull_readaccdata+0x54>
 801058a:	bf00      	nop
 801058c:	00110004 	.word	0x00110004
 8010590:	001f0004 	.word	0x001f0004
 8010594:	001f0008 	.word	0x001f0008

08010598 <ull_configure>:
 8010598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801059c:	b083      	sub	sp, #12
 801059e:	4604      	mov	r4, r0
 80105a0:	460d      	mov	r5, r1
 80105a2:	f891 9000 	ldrb.w	r9, [r1]
 80105a6:	790b      	ldrb	r3, [r1, #4]
 80105a8:	2b18      	cmp	r3, #24
 80105aa:	d814      	bhi.n	80105d6 <ull_configure+0x3e>
 80105ac:	78cf      	ldrb	r7, [r1, #3]
 80105ae:	2f18      	cmp	r7, #24
 80105b0:	bf94      	ite	ls
 80105b2:	2700      	movls	r7, #0
 80105b4:	2701      	movhi	r7, #1
 80105b6:	b2ff      	uxtb	r7, r7
 80105b8:	79eb      	ldrb	r3, [r5, #7]
 80105ba:	2b01      	cmp	r3, #1
 80105bc:	bf0c      	ite	eq
 80105be:	2110      	moveq	r1, #16
 80105c0:	2100      	movne	r1, #0
 80105c2:	786b      	ldrb	r3, [r5, #1]
 80105c4:	3b01      	subs	r3, #1
 80105c6:	2b06      	cmp	r3, #6
 80105c8:	d810      	bhi.n	80105ec <ull_configure+0x54>
 80105ca:	e8df f003 	tbb	[pc, r3]
 80105ce:	0f06      	.short	0x0f06
 80105d0:	0f0c120f 	.word	0x0f0c120f
 80105d4:	09          	.byte	0x09
 80105d5:	00          	.byte	0x00
 80105d6:	2701      	movs	r7, #1
 80105d8:	e7ed      	b.n	80105b6 <ull_configure+0x1e>
 80105da:	f04f 0a40 	mov.w	sl, #64	; 0x40
 80105de:	e00a      	b.n	80105f6 <ull_configure+0x5e>
 80105e0:	f04f 0a48 	mov.w	sl, #72	; 0x48
 80105e4:	e007      	b.n	80105f6 <ull_configure+0x5e>
 80105e6:	f04f 0a80 	mov.w	sl, #128	; 0x80
 80105ea:	e004      	b.n	80105f6 <ull_configure+0x5e>
 80105ec:	f44f 7a80 	mov.w	sl, #256	; 0x100
 80105f0:	e001      	b.n	80105f6 <ull_configure+0x5e>
 80105f2:	f04f 0a20 	mov.w	sl, #32
 80105f6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80105f8:	8a13      	ldrh	r3, [r2, #16]
 80105fa:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80105fe:	8213      	strh	r3, [r2, #16]
 8010600:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8010602:	79ea      	ldrb	r2, [r5, #7]
 8010604:	72da      	strb	r2, [r3, #11]
 8010606:	7b2e      	ldrb	r6, [r5, #12]
 8010608:	1cb3      	adds	r3, r6, #2
 801060a:	2601      	movs	r6, #1
 801060c:	409e      	lsls	r6, r3
 801060e:	fa1f f886 	uxth.w	r8, r6
 8010612:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8010614:	4bca      	ldr	r3, [pc, #808]	; (8010940 <ull_configure+0x3a8>)
 8010616:	fb03 f308 	mul.w	r3, r3, r8
 801061a:	0bdb      	lsrs	r3, r3, #15
 801061c:	8253      	strh	r3, [r2, #18]
 801061e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8010620:	7aea      	ldrb	r2, [r5, #11]
 8010622:	755a      	strb	r2, [r3, #21]
 8010624:	7a2b      	ldrb	r3, [r5, #8]
 8010626:	015b      	lsls	r3, r3, #5
 8010628:	f003 0320 	and.w	r3, r3, #32
 801062c:	7b6a      	ldrb	r2, [r5, #13]
 801062e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010632:	7aea      	ldrb	r2, [r5, #11]
 8010634:	0312      	lsls	r2, r2, #12
 8010636:	f402 4230 	and.w	r2, r2, #45056	; 0xb000
 801063a:	4313      	orrs	r3, r2
 801063c:	430b      	orrs	r3, r1
 801063e:	9300      	str	r3, [sp, #0]
 8010640:	4bc0      	ldr	r3, [pc, #768]	; (8010944 <ull_configure+0x3ac>)
 8010642:	2200      	movs	r2, #0
 8010644:	2110      	movs	r1, #16
 8010646:	4620      	mov	r0, r4
 8010648:	f7ff f98e 	bl	800f968 <dwt_modify32bitoffsetreg>
 801064c:	2f00      	cmp	r7, #0
 801064e:	f040 80fe 	bne.w	801084e <ull_configure+0x2b6>
 8010652:	7aeb      	ldrb	r3, [r5, #11]
 8010654:	b1bb      	cbz	r3, 8010686 <ull_configure+0xee>
 8010656:	7b6b      	ldrb	r3, [r5, #13]
 8010658:	2b01      	cmp	r3, #1
 801065a:	7b28      	ldrb	r0, [r5, #12]
 801065c:	bf94      	ite	ls
 801065e:	2203      	movls	r2, #3
 8010660:	2204      	movhi	r2, #4
 8010662:	2110      	movs	r1, #16
 8010664:	4bb8      	ldr	r3, [pc, #736]	; (8010948 <ull_configure+0x3b0>)
 8010666:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801066a:	f7fd fef3 	bl	800e454 <get_sts_mnth>
 801066e:	eb0a 0ac8 	add.w	sl, sl, r8, lsl #3
 8010672:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8010676:	9000      	str	r0, [sp, #0]
 8010678:	f64f 7380 	movw	r3, #65408	; 0xff80
 801067c:	2202      	movs	r2, #2
 801067e:	49b3      	ldr	r1, [pc, #716]	; (801094c <ull_configure+0x3b4>)
 8010680:	4620      	mov	r0, r4
 8010682:	f7ff fe71 	bl	8010368 <dwt_modify16bitoffsetreg>
 8010686:	2394      	movs	r3, #148	; 0x94
 8010688:	9300      	str	r3, [sp, #0]
 801068a:	4bb1      	ldr	r3, [pc, #708]	; (8010950 <ull_configure+0x3b8>)
 801068c:	2200      	movs	r2, #0
 801068e:	49b1      	ldr	r1, [pc, #708]	; (8010954 <ull_configure+0x3bc>)
 8010690:	4620      	mov	r0, r4
 8010692:	f7ff f969 	bl	800f968 <dwt_modify32bitoffsetreg>
 8010696:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801069a:	f340 8103 	ble.w	80108a4 <ull_configure+0x30c>
 801069e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80106a0:	8a13      	ldrh	r3, [r2, #16]
 80106a2:	f043 0320 	orr.w	r3, r3, #32
 80106a6:	8213      	strh	r3, [r2, #16]
 80106a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80106ac:	9300      	str	r3, [sp, #0]
 80106ae:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 80106b2:	2200      	movs	r2, #0
 80106b4:	49a8      	ldr	r1, [pc, #672]	; (8010958 <ull_configure+0x3c0>)
 80106b6:	4620      	mov	r0, r4
 80106b8:	f7ff fe56 	bl	8010368 <dwt_modify16bitoffsetreg>
 80106bc:	7b6b      	ldrb	r3, [r5, #13]
 80106be:	2b01      	cmp	r3, #1
 80106c0:	f000 80fb 	beq.w	80108ba <ull_configure+0x322>
 80106c4:	78ab      	ldrb	r3, [r5, #2]
 80106c6:	f043 0310 	orr.w	r3, r3, #16
 80106ca:	9300      	str	r3, [sp, #0]
 80106cc:	23fc      	movs	r3, #252	; 0xfc
 80106ce:	2200      	movs	r2, #0
 80106d0:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 80106d4:	4620      	mov	r0, r4
 80106d6:	f7ff fab7 	bl	800fc48 <dwt_modify8bitoffsetreg>
 80106da:	1e73      	subs	r3, r6, #1
 80106dc:	b2db      	uxtb	r3, r3
 80106de:	2200      	movs	r2, #0
 80106e0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80106e4:	4620      	mov	r0, r4
 80106e6:	f7fe fe1d 	bl	800f324 <dwt_write8bitoffsetreg>
 80106ea:	786b      	ldrb	r3, [r5, #1]
 80106ec:	2b07      	cmp	r3, #7
 80106ee:	bf0c      	ite	eq
 80106f0:	2108      	moveq	r1, #8
 80106f2:	2100      	movne	r1, #0
 80106f4:	4620      	mov	r0, r4
 80106f6:	f7fe ff1b 	bl	800f530 <ull_setplenfine>
 80106fa:	7aeb      	ldrb	r3, [r5, #11]
 80106fc:	f003 0303 	and.w	r3, r3, #3
 8010700:	2b03      	cmp	r3, #3
 8010702:	bf0c      	ite	eq
 8010704:	4b95      	ldreq	r3, [pc, #596]	; (801095c <ull_configure+0x3c4>)
 8010706:	4b96      	ldrne	r3, [pc, #600]	; (8010960 <ull_configure+0x3c8>)
 8010708:	2200      	movs	r2, #0
 801070a:	4996      	ldr	r1, [pc, #600]	; (8010964 <ull_configure+0x3cc>)
 801070c:	4620      	mov	r0, r4
 801070e:	f7fe fc25 	bl	800ef5c <dwt_write32bitoffsetreg>
 8010712:	2200      	movs	r2, #0
 8010714:	4994      	ldr	r1, [pc, #592]	; (8010968 <ull_configure+0x3d0>)
 8010716:	4620      	mov	r0, r4
 8010718:	f7fd ff41 	bl	800e59e <dwt_read32bitoffsetreg>
 801071c:	f420 50ff 	bic.w	r0, r0, #8160	; 0x1fe0
 8010720:	f020 001f 	bic.w	r0, r0, #31
 8010724:	f1b9 0f09 	cmp.w	r9, #9
 8010728:	bf08      	it	eq
 801072a:	f040 0001 	orreq.w	r0, r0, #1
 801072e:	792a      	ldrb	r2, [r5, #4]
 8010730:	0212      	lsls	r2, r2, #8
 8010732:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
 8010736:	78eb      	ldrb	r3, [r5, #3]
 8010738:	00db      	lsls	r3, r3, #3
 801073a:	b2db      	uxtb	r3, r3
 801073c:	431a      	orrs	r2, r3
 801073e:	796b      	ldrb	r3, [r5, #5]
 8010740:	005b      	lsls	r3, r3, #1
 8010742:	f003 0306 	and.w	r3, r3, #6
 8010746:	4313      	orrs	r3, r2
 8010748:	4303      	orrs	r3, r0
 801074a:	2200      	movs	r2, #0
 801074c:	4986      	ldr	r1, [pc, #536]	; (8010968 <ull_configure+0x3d0>)
 801074e:	4620      	mov	r0, r4
 8010750:	f7fe fc04 	bl	800ef5c <dwt_write32bitoffsetreg>
 8010754:	79aa      	ldrb	r2, [r5, #6]
 8010756:	786b      	ldrb	r3, [r5, #1]
 8010758:	031b      	lsls	r3, r3, #12
 801075a:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 801075e:	9300      	str	r3, [sp, #0]
 8010760:	f46f 4374 	mvn.w	r3, #62464	; 0xf400
 8010764:	2200      	movs	r2, #0
 8010766:	2120      	movs	r1, #32
 8010768:	4620      	mov	r0, r4
 801076a:	f7ff f8fd 	bl	800f968 <dwt_modify32bitoffsetreg>
 801076e:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 8010772:	b923      	cbnz	r3, 801077e <ull_configure+0x1e6>
 8010774:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8010778:	726b      	strb	r3, [r5, #9]
 801077a:	2300      	movs	r3, #0
 801077c:	72ab      	strb	r3, [r5, #10]
 801077e:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 8010782:	2202      	movs	r2, #2
 8010784:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 8010788:	4620      	mov	r0, r4
 801078a:	f7fe fb7c 	bl	800ee86 <dwt_write16bitoffsetreg>
 801078e:	2202      	movs	r2, #2
 8010790:	4976      	ldr	r1, [pc, #472]	; (801096c <ull_configure+0x3d4>)
 8010792:	4620      	mov	r0, r4
 8010794:	f7fd ff58 	bl	800e648 <dwt_read8bitoffsetreg>
 8010798:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801079a:	7bdb      	ldrb	r3, [r3, #15]
 801079c:	454b      	cmp	r3, r9
 801079e:	f000 8096 	beq.w	80108ce <ull_configure+0x336>
 80107a2:	2803      	cmp	r0, #3
 80107a4:	f000 8097 	beq.w	80108d6 <ull_configure+0x33e>
 80107a8:	f1b9 0f09 	cmp.w	r9, #9
 80107ac:	f000 8098 	beq.w	80108e0 <ull_configure+0x348>
 80107b0:	4b6f      	ldr	r3, [pc, #444]	; (8010970 <ull_configure+0x3d8>)
 80107b2:	9300      	str	r3, [sp, #0]
 80107b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80107b8:	2200      	movs	r2, #0
 80107ba:	496e      	ldr	r1, [pc, #440]	; (8010974 <ull_configure+0x3dc>)
 80107bc:	4620      	mov	r0, r4
 80107be:	f7ff f8d3 	bl	800f968 <dwt_modify32bitoffsetreg>
 80107c2:	f641 733c 	movw	r3, #7996	; 0x1f3c
 80107c6:	2200      	movs	r2, #0
 80107c8:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 80107cc:	4620      	mov	r0, r4
 80107ce:	f7fe fb5a 	bl	800ee86 <dwt_write16bitoffsetreg>
 80107d2:	2314      	movs	r3, #20
 80107d4:	2201      	movs	r2, #1
 80107d6:	4968      	ldr	r1, [pc, #416]	; (8010978 <ull_configure+0x3e0>)
 80107d8:	4620      	mov	r0, r4
 80107da:	f7fe fda3 	bl	800f324 <dwt_write8bitoffsetreg>
 80107de:	230e      	movs	r3, #14
 80107e0:	2202      	movs	r2, #2
 80107e2:	4966      	ldr	r1, [pc, #408]	; (801097c <ull_configure+0x3e4>)
 80107e4:	4620      	mov	r0, r4
 80107e6:	f7fe fd9d 	bl	800f324 <dwt_write8bitoffsetreg>
 80107ea:	2381      	movs	r3, #129	; 0x81
 80107ec:	2200      	movs	r2, #0
 80107ee:	4964      	ldr	r1, [pc, #400]	; (8010980 <ull_configure+0x3e8>)
 80107f0:	4620      	mov	r0, r4
 80107f2:	f7fe fd97 	bl	800f324 <dwt_write8bitoffsetreg>
 80107f6:	2600      	movs	r6, #0
 80107f8:	9600      	str	r6, [sp, #0]
 80107fa:	23fc      	movs	r3, #252	; 0xfc
 80107fc:	2203      	movs	r2, #3
 80107fe:	4961      	ldr	r1, [pc, #388]	; (8010984 <ull_configure+0x3ec>)
 8010800:	4620      	mov	r0, r4
 8010802:	f7ff fa21 	bl	800fc48 <dwt_modify8bitoffsetreg>
 8010806:	2302      	movs	r3, #2
 8010808:	4632      	mov	r2, r6
 801080a:	2144      	movs	r1, #68	; 0x44
 801080c:	4620      	mov	r0, r4
 801080e:	f7fe fd89 	bl	800f324 <dwt_write8bitoffsetreg>
 8010812:	2101      	movs	r1, #1
 8010814:	4620      	mov	r0, r4
 8010816:	f7ff fc47 	bl	80100a8 <ull_setdwstate>
 801081a:	f04f 0b32 	mov.w	fp, #50	; 0x32
 801081e:	f04f 0814 	mov.w	r8, #20
 8010822:	4637      	mov	r7, r6
 8010824:	2644      	movs	r6, #68	; 0x44
 8010826:	4640      	mov	r0, r8
 8010828:	f7ef fe81 	bl	800052e <deca_usleep>
 801082c:	463a      	mov	r2, r7
 801082e:	4631      	mov	r1, r6
 8010830:	4620      	mov	r0, r4
 8010832:	f7fd ff09 	bl	800e648 <dwt_read8bitoffsetreg>
 8010836:	f010 0f02 	tst.w	r0, #2
 801083a:	f040 80af 	bne.w	801099c <ull_configure+0x404>
 801083e:	f10b 33ff 	add.w	r3, fp, #4294967295
 8010842:	f013 0bff 	ands.w	fp, r3, #255	; 0xff
 8010846:	d1ee      	bne.n	8010826 <ull_configure+0x28e>
 8010848:	f06f 0001 	mvn.w	r0, #1
 801084c:	e0e6      	b.n	8010a1c <ull_configure+0x484>
 801084e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8010850:	8a13      	ldrh	r3, [r2, #16]
 8010852:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8010856:	8213      	strh	r3, [r2, #16]
 8010858:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801085c:	9300      	str	r3, [sp, #0]
 801085e:	f46f 5340 	mvn.w	r3, #12288	; 0x3000
 8010862:	2200      	movs	r2, #0
 8010864:	493c      	ldr	r1, [pc, #240]	; (8010958 <ull_configure+0x3c0>)
 8010866:	4620      	mov	r0, r4
 8010868:	f7ff f87e 	bl	800f968 <dwt_modify32bitoffsetreg>
 801086c:	f240 3306 	movw	r3, #774	; 0x306
 8010870:	2200      	movs	r2, #0
 8010872:	4945      	ldr	r1, [pc, #276]	; (8010988 <ull_configure+0x3f0>)
 8010874:	4620      	mov	r0, r4
 8010876:	f7fe fb71 	bl	800ef5c <dwt_write32bitoffsetreg>
 801087a:	2300      	movs	r3, #0
 801087c:	461a      	mov	r2, r3
 801087e:	4943      	ldr	r1, [pc, #268]	; (801098c <ull_configure+0x3f4>)
 8010880:	4620      	mov	r0, r4
 8010882:	f7fe fb6b 	bl	800ef5c <dwt_write32bitoffsetreg>
 8010886:	4b42      	ldr	r3, [pc, #264]	; (8010990 <ull_configure+0x3f8>)
 8010888:	2200      	movs	r2, #0
 801088a:	4930      	ldr	r1, [pc, #192]	; (801094c <ull_configure+0x3b4>)
 801088c:	4620      	mov	r0, r4
 801088e:	f7fe fb65 	bl	800ef5c <dwt_write32bitoffsetreg>
 8010892:	239d      	movs	r3, #157	; 0x9d
 8010894:	9300      	str	r3, [sp, #0]
 8010896:	4b2e      	ldr	r3, [pc, #184]	; (8010950 <ull_configure+0x3b8>)
 8010898:	2200      	movs	r2, #0
 801089a:	492e      	ldr	r1, [pc, #184]	; (8010954 <ull_configure+0x3bc>)
 801089c:	4620      	mov	r0, r4
 801089e:	f7ff f863 	bl	800f968 <dwt_modify32bitoffsetreg>
 80108a2:	e70b      	b.n	80106bc <ull_configure+0x124>
 80108a4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80108a8:	9300      	str	r3, [sp, #0]
 80108aa:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 80108ae:	2200      	movs	r2, #0
 80108b0:	4929      	ldr	r1, [pc, #164]	; (8010958 <ull_configure+0x3c0>)
 80108b2:	4620      	mov	r0, r4
 80108b4:	f7ff fd58 	bl	8010368 <dwt_modify16bitoffsetreg>
 80108b8:	e700      	b.n	80106bc <ull_configure+0x124>
 80108ba:	78ab      	ldrb	r3, [r5, #2]
 80108bc:	9300      	str	r3, [sp, #0]
 80108be:	23ec      	movs	r3, #236	; 0xec
 80108c0:	2200      	movs	r2, #0
 80108c2:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 80108c6:	4620      	mov	r0, r4
 80108c8:	f7ff f9be 	bl	800fc48 <dwt_modify8bitoffsetreg>
 80108cc:	e705      	b.n	80106da <ull_configure+0x142>
 80108ce:	2803      	cmp	r0, #3
 80108d0:	f47f af6a 	bne.w	80107a8 <ull_configure+0x210>
 80108d4:	e065      	b.n	80109a2 <ull_configure+0x40a>
 80108d6:	2102      	movs	r1, #2
 80108d8:	4620      	mov	r0, r4
 80108da:	f7ff fbe5 	bl	80100a8 <ull_setdwstate>
 80108de:	e763      	b.n	80107a8 <ull_configure+0x210>
 80108e0:	4b2c      	ldr	r3, [pc, #176]	; (8010994 <ull_configure+0x3fc>)
 80108e2:	9300      	str	r3, [sp, #0]
 80108e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80108e8:	2200      	movs	r2, #0
 80108ea:	4922      	ldr	r1, [pc, #136]	; (8010974 <ull_configure+0x3dc>)
 80108ec:	4620      	mov	r0, r4
 80108ee:	f7ff f83b 	bl	800f968 <dwt_modify32bitoffsetreg>
 80108f2:	f640 733c 	movw	r3, #3900	; 0xf3c
 80108f6:	2200      	movs	r2, #0
 80108f8:	f44f 2110 	mov.w	r1, #589824	; 0x90000
 80108fc:	4620      	mov	r0, r4
 80108fe:	f7fe fac2 	bl	800ee86 <dwt_write16bitoffsetreg>
 8010902:	e766      	b.n	80107d2 <ull_configure+0x23a>
 8010904:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010908:	9300      	str	r3, [sp, #0]
 801090a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801090e:	2200      	movs	r2, #0
 8010910:	4911      	ldr	r1, [pc, #68]	; (8010958 <ull_configure+0x3c0>)
 8010912:	4620      	mov	r0, r4
 8010914:	f7ff fd28 	bl	8010368 <dwt_modify16bitoffsetreg>
 8010918:	6d22      	ldr	r2, [r4, #80]	; 0x50
 801091a:	8a13      	ldrh	r3, [r2, #16]
 801091c:	f043 0308 	orr.w	r3, r3, #8
 8010920:	8213      	strh	r3, [r2, #16]
 8010922:	e050      	b.n	80109c6 <ull_configure+0x42e>
 8010924:	2200      	movs	r2, #0
 8010926:	9200      	str	r2, [sp, #0]
 8010928:	23fe      	movs	r3, #254	; 0xfe
 801092a:	491b      	ldr	r1, [pc, #108]	; (8010998 <ull_configure+0x400>)
 801092c:	4620      	mov	r0, r4
 801092e:	f7ff f98b 	bl	800fc48 <dwt_modify8bitoffsetreg>
 8010932:	e052      	b.n	80109da <ull_configure+0x442>
 8010934:	2101      	movs	r1, #1
 8010936:	4620      	mov	r0, r4
 8010938:	f7ff fda2 	bl	8010480 <ull_pgf_cal>
 801093c:	e06b      	b.n	8010a16 <ull_configure+0x47e>
 801093e:	bf00      	nop
 8010940:	00026668 	.word	0x00026668
 8010944:	fffc4fcf 	.word	0xfffc4fcf
 8010948:	08013590 	.word	0x08013590
 801094c:	000e0014 	.word	0x000e0014
 8010950:	bfffff00 	.word	0xbfffff00
 8010954:	000e0018 	.word	0x000e0018
 8010958:	000b0008 	.word	0x000b0008
 801095c:	af5f35cc 	.word	0xaf5f35cc
 8010960:	af5f584c 	.word	0xaf5f584c
 8010964:	0006000c 	.word	0x0006000c
 8010968:	00010008 	.word	0x00010008
 801096c:	000f0030 	.word	0x000f0030
 8010970:	1c071134 	.word	0x1c071134
 8010974:	0007001c 	.word	0x0007001c
 8010978:	00070050 	.word	0x00070050
 801097c:	00070018 	.word	0x00070018
 8010980:	00090008 	.word	0x00090008
 8010984:	00090004 	.word	0x00090004
 8010988:	000e000c 	.word	0x000e000c
 801098c:	000e0010 	.word	0x000e0010
 8010990:	000c5a0a 	.word	0x000c5a0a
 8010994:	1c010034 	.word	0x1c010034
 8010998:	00030018 	.word	0x00030018
 801099c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801099e:	f883 900f 	strb.w	r9, [r3, #15]
 80109a2:	792b      	ldrb	r3, [r5, #4]
 80109a4:	3b09      	subs	r3, #9
 80109a6:	b2db      	uxtb	r3, r3
 80109a8:	2b0f      	cmp	r3, #15
 80109aa:	d8bb      	bhi.n	8010924 <ull_configure+0x38c>
 80109ac:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80109ae:	7a1b      	ldrb	r3, [r3, #8]
 80109b0:	2b01      	cmp	r3, #1
 80109b2:	d0a7      	beq.n	8010904 <ull_configure+0x36c>
 80109b4:	4649      	mov	r1, r9
 80109b6:	4620      	mov	r0, r4
 80109b8:	f7fe fb9c 	bl	800f0f4 <ull_configmrxlut>
 80109bc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80109be:	8a13      	ldrh	r3, [r2, #16]
 80109c0:	f023 0308 	bic.w	r3, r3, #8
 80109c4:	8213      	strh	r3, [r2, #16]
 80109c6:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80109ca:	9300      	str	r3, [sp, #0]
 80109cc:	f248 13ff 	movw	r3, #33279	; 0x81ff
 80109d0:	2200      	movs	r2, #0
 80109d2:	4914      	ldr	r1, [pc, #80]	; (8010a24 <ull_configure+0x48c>)
 80109d4:	4620      	mov	r0, r4
 80109d6:	f7ff fcc7 	bl	8010368 <dwt_modify16bitoffsetreg>
 80109da:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 80109de:	bfcc      	ite	gt
 80109e0:	f04f 5300 	movgt.w	r3, #536870912	; 0x20000000
 80109e4:	f04f 53a0 	movle.w	r3, #335544320	; 0x14000000
 80109e8:	9300      	str	r3, [sp, #0]
 80109ea:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80109ee:	2200      	movs	r2, #0
 80109f0:	490d      	ldr	r1, [pc, #52]	; (8010a28 <ull_configure+0x490>)
 80109f2:	4620      	mov	r0, r4
 80109f4:	f7fe ffb8 	bl	800f968 <dwt_modify32bitoffsetreg>
 80109f8:	2301      	movs	r3, #1
 80109fa:	9300      	str	r3, [sp, #0]
 80109fc:	23ff      	movs	r3, #255	; 0xff
 80109fe:	2202      	movs	r2, #2
 8010a00:	490a      	ldr	r1, [pc, #40]	; (8010a2c <ull_configure+0x494>)
 8010a02:	4620      	mov	r0, r4
 8010a04:	f7ff f920 	bl	800fc48 <dwt_modify8bitoffsetreg>
 8010a08:	2200      	movs	r2, #0
 8010a0a:	4909      	ldr	r1, [pc, #36]	; (8010a30 <ull_configure+0x498>)
 8010a0c:	4620      	mov	r0, r4
 8010a0e:	f7fd fdc6 	bl	800e59e <dwt_read32bitoffsetreg>
 8010a12:	2800      	cmp	r0, #0
 8010a14:	d08e      	beq.n	8010934 <ull_configure+0x39c>
 8010a16:	4620      	mov	r0, r4
 8010a18:	f7ff f98a 	bl	800fd30 <ull_adcoffsetscalibration>
 8010a1c:	b003      	add	sp, #12
 8010a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a22:	bf00      	nop
 8010a24:	00030018 	.word	0x00030018
 8010a28:	00060010 	.word	0x00060010
 8010a2c:	0004000c 	.word	0x0004000c
 8010a30:	00040014 	.word	0x00040014

08010a34 <ull_initialise>:
 8010a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a38:	b082      	sub	sp, #8
 8010a3a:	4605      	mov	r5, r0
 8010a3c:	460e      	mov	r6, r1
 8010a3e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d05b      	beq.n	8010afc <ull_initialise+0xc8>
 8010a44:	6d2c      	ldr	r4, [r5, #80]	; 0x50
 8010a46:	2300      	movs	r3, #0
 8010a48:	73a3      	strb	r3, [r4, #14]
 8010a4a:	2202      	movs	r2, #2
 8010a4c:	8222      	strh	r2, [r4, #16]
 8010a4e:	7523      	strb	r3, [r4, #20]
 8010a50:	7563      	strb	r3, [r4, #21]
 8010a52:	73e3      	strb	r3, [r4, #15]
 8010a54:	7263      	strb	r3, [r4, #9]
 8010a56:	72a3      	strb	r3, [r4, #10]
 8010a58:	2104      	movs	r1, #4
 8010a5a:	4628      	mov	r0, r5
 8010a5c:	f7fe fa5c 	bl	800ef18 <_dwt_otpread>
 8010a60:	4607      	mov	r7, r0
 8010a62:	2105      	movs	r1, #5
 8010a64:	4628      	mov	r0, r5
 8010a66:	f7fe fa57 	bl	800ef18 <_dwt_otpread>
 8010a6a:	4680      	mov	r8, r0
 8010a6c:	210a      	movs	r1, #10
 8010a6e:	4628      	mov	r0, r5
 8010a70:	f7fe fa52 	bl	800ef18 <_dwt_otpread>
 8010a74:	b12f      	cbz	r7, 8010a82 <ull_initialise+0x4e>
 8010a76:	f1b8 0f00 	cmp.w	r8, #0
 8010a7a:	d002      	beq.n	8010a82 <ull_initialise+0x4e>
 8010a7c:	b280      	uxth	r0, r0
 8010a7e:	2800      	cmp	r0, #0
 8010a80:	d141      	bne.n	8010b06 <ull_initialise+0xd2>
 8010a82:	2120      	movs	r1, #32
 8010a84:	4628      	mov	r0, r5
 8010a86:	f7fe fa47 	bl	800ef18 <_dwt_otpread>
 8010a8a:	f5b0 7f10 	cmp.w	r0, #576	; 0x240
 8010a8e:	bf0c      	ite	eq
 8010a90:	2301      	moveq	r3, #1
 8010a92:	2300      	movne	r3, #0
 8010a94:	7223      	strb	r3, [r4, #8]
 8010a96:	f016 0f10 	tst.w	r6, #16
 8010a9a:	d143      	bne.n	8010b24 <ull_initialise+0xf0>
 8010a9c:	f016 0f20 	tst.w	r6, #32
 8010aa0:	d146      	bne.n	8010b30 <ull_initialise+0xfc>
 8010aa2:	f016 0f40 	tst.w	r6, #64	; 0x40
 8010aa6:	d149      	bne.n	8010b3c <ull_initialise+0x108>
 8010aa8:	f016 0f80 	tst.w	r6, #128	; 0x80
 8010aac:	d14d      	bne.n	8010b4a <ull_initialise+0x116>
 8010aae:	7aa3      	ldrb	r3, [r4, #10]
 8010ab0:	b90b      	cbnz	r3, 8010ab6 <ull_initialise+0x82>
 8010ab2:	2385      	movs	r3, #133	; 0x85
 8010ab4:	72a3      	strb	r3, [r4, #10]
 8010ab6:	7a63      	ldrb	r3, [r4, #9]
 8010ab8:	b90b      	cbnz	r3, 8010abe <ull_initialise+0x8a>
 8010aba:	2374      	movs	r3, #116	; 0x74
 8010abc:	7263      	strb	r3, [r4, #9]
 8010abe:	211f      	movs	r1, #31
 8010ac0:	4628      	mov	r0, r5
 8010ac2:	f7fe fa29 	bl	800ef18 <_dwt_otpread>
 8010ac6:	7320      	strb	r0, [r4, #12]
 8010ac8:	211e      	movs	r1, #30
 8010aca:	4628      	mov	r0, r5
 8010acc:	f7fe fa24 	bl	800ef18 <_dwt_otpread>
 8010ad0:	f010 003f 	ands.w	r0, r0, #63	; 0x3f
 8010ad4:	bf12      	itee	ne
 8010ad6:	7360      	strbne	r0, [r4, #13]
 8010ad8:	232e      	moveq	r3, #46	; 0x2e
 8010ada:	7363      	strbeq	r3, [r4, #13]
 8010adc:	7b63      	ldrb	r3, [r4, #13]
 8010ade:	2200      	movs	r2, #0
 8010ae0:	4920      	ldr	r1, [pc, #128]	; (8010b64 <ull_initialise+0x130>)
 8010ae2:	4628      	mov	r0, r5
 8010ae4:	f7fe fc1e 	bl	800f324 <dwt_write8bitoffsetreg>
 8010ae8:	2135      	movs	r1, #53	; 0x35
 8010aea:	4628      	mov	r0, r5
 8010aec:	f7fe fa14 	bl	800ef18 <_dwt_otpread>
 8010af0:	4603      	mov	r3, r0
 8010af2:	bb80      	cbnz	r0, 8010b56 <ull_initialise+0x122>
 8010af4:	2000      	movs	r0, #0
 8010af6:	b002      	add	sp, #8
 8010af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010afc:	2028      	movs	r0, #40	; 0x28
 8010afe:	f002 f9e7 	bl	8012ed0 <malloc>
 8010b02:	6528      	str	r0, [r5, #80]	; 0x50
 8010b04:	e79e      	b.n	8010a44 <ull_initialise+0x10>
 8010b06:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8010b0a:	9300      	str	r3, [sp, #0]
 8010b0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010b10:	2200      	movs	r2, #0
 8010b12:	4915      	ldr	r1, [pc, #84]	; (8010b68 <ull_initialise+0x134>)
 8010b14:	4628      	mov	r0, r5
 8010b16:	f7ff fc27 	bl	8010368 <dwt_modify16bitoffsetreg>
 8010b1a:	8a23      	ldrh	r3, [r4, #16]
 8010b1c:	f043 0314 	orr.w	r3, r3, #20
 8010b20:	8223      	strh	r3, [r4, #16]
 8010b22:	e7ae      	b.n	8010a82 <ull_initialise+0x4e>
 8010b24:	2106      	movs	r1, #6
 8010b26:	4628      	mov	r0, r5
 8010b28:	f7fe f9f6 	bl	800ef18 <_dwt_otpread>
 8010b2c:	6020      	str	r0, [r4, #0]
 8010b2e:	e7b5      	b.n	8010a9c <ull_initialise+0x68>
 8010b30:	2107      	movs	r1, #7
 8010b32:	4628      	mov	r0, r5
 8010b34:	f7fe f9f0 	bl	800ef18 <_dwt_otpread>
 8010b38:	6060      	str	r0, [r4, #4]
 8010b3a:	e7b2      	b.n	8010aa2 <ull_initialise+0x6e>
 8010b3c:	2108      	movs	r1, #8
 8010b3e:	4628      	mov	r0, r5
 8010b40:	f7fe f9ea 	bl	800ef18 <_dwt_otpread>
 8010b44:	0c00      	lsrs	r0, r0, #16
 8010b46:	7260      	strb	r0, [r4, #9]
 8010b48:	e7ae      	b.n	8010aa8 <ull_initialise+0x74>
 8010b4a:	2109      	movs	r1, #9
 8010b4c:	4628      	mov	r0, r5
 8010b4e:	f7fe f9e3 	bl	800ef18 <_dwt_otpread>
 8010b52:	72a0      	strb	r0, [r4, #10]
 8010b54:	e7ab      	b.n	8010aae <ull_initialise+0x7a>
 8010b56:	2200      	movs	r2, #0
 8010b58:	4904      	ldr	r1, [pc, #16]	; (8010b6c <ull_initialise+0x138>)
 8010b5a:	4628      	mov	r0, r5
 8010b5c:	f7fe f9fe 	bl	800ef5c <dwt_write32bitoffsetreg>
 8010b60:	e7c8      	b.n	8010af4 <ull_initialise+0xc0>
 8010b62:	bf00      	nop
 8010b64:	00090014 	.word	0x00090014
 8010b68:	000b0008 	.word	0x000b0008
 8010b6c:	00090004 	.word	0x00090004

08010b70 <ull_rxenable>:
 8010b70:	b530      	push	{r4, r5, lr}
 8010b72:	b083      	sub	sp, #12
 8010b74:	4605      	mov	r5, r0
 8010b76:	460c      	mov	r4, r1
 8010b78:	b171      	cbz	r1, 8010b98 <ull_rxenable+0x28>
 8010b7a:	f021 0302 	bic.w	r3, r1, #2
 8010b7e:	3b01      	subs	r3, #1
 8010b80:	2b0f      	cmp	r3, #15
 8010b82:	d862      	bhi.n	8010c4a <ull_rxenable+0xda>
 8010b84:	e8df f003 	tbb	[pc, r3]
 8010b88:	24616111 	.word	0x24616111
 8010b8c:	2d616161 	.word	0x2d616161
 8010b90:	61616161 	.word	0x61616161
 8010b94:	3a616161 	.word	0x3a616161
 8010b98:	2102      	movs	r1, #2
 8010b9a:	9101      	str	r1, [sp, #4]
 8010b9c:	2200      	movs	r2, #0
 8010b9e:	9200      	str	r2, [sp, #0]
 8010ba0:	4613      	mov	r3, r2
 8010ba2:	f7fd fc74 	bl	800e48e <dwt_xfer3xxx>
 8010ba6:	4620      	mov	r0, r4
 8010ba8:	e010      	b.n	8010bcc <ull_rxenable+0x5c>
 8010baa:	2302      	movs	r3, #2
 8010bac:	9301      	str	r3, [sp, #4]
 8010bae:	2200      	movs	r2, #0
 8010bb0:	9200      	str	r2, [sp, #0]
 8010bb2:	4613      	mov	r3, r2
 8010bb4:	2104      	movs	r1, #4
 8010bb6:	f7fd fc6a 	bl	800e48e <dwt_xfer3xxx>
 8010bba:	2203      	movs	r2, #3
 8010bbc:	2144      	movs	r1, #68	; 0x44
 8010bbe:	4628      	mov	r0, r5
 8010bc0:	f7fd fd42 	bl	800e648 <dwt_read8bitoffsetreg>
 8010bc4:	f010 0f08 	tst.w	r0, #8
 8010bc8:	d125      	bne.n	8010c16 <ull_rxenable+0xa6>
 8010bca:	2000      	movs	r0, #0
 8010bcc:	b003      	add	sp, #12
 8010bce:	bd30      	pop	{r4, r5, pc}
 8010bd0:	2302      	movs	r3, #2
 8010bd2:	9301      	str	r3, [sp, #4]
 8010bd4:	2200      	movs	r2, #0
 8010bd6:	9200      	str	r2, [sp, #0]
 8010bd8:	4613      	mov	r3, r2
 8010bda:	210a      	movs	r1, #10
 8010bdc:	f7fd fc57 	bl	800e48e <dwt_xfer3xxx>
 8010be0:	e7eb      	b.n	8010bba <ull_rxenable+0x4a>
 8010be2:	2100      	movs	r1, #0
 8010be4:	f7fe f9cf 	bl	800ef86 <_dwt_adjust_delaytime>
 8010be8:	2302      	movs	r3, #2
 8010bea:	9301      	str	r3, [sp, #4]
 8010bec:	2200      	movs	r2, #0
 8010bee:	9200      	str	r2, [sp, #0]
 8010bf0:	4613      	mov	r3, r2
 8010bf2:	2108      	movs	r1, #8
 8010bf4:	4628      	mov	r0, r5
 8010bf6:	f7fd fc4a 	bl	800e48e <dwt_xfer3xxx>
 8010bfa:	e7de      	b.n	8010bba <ull_rxenable+0x4a>
 8010bfc:	2101      	movs	r1, #1
 8010bfe:	f7fe f9c2 	bl	800ef86 <_dwt_adjust_delaytime>
 8010c02:	2302      	movs	r3, #2
 8010c04:	9301      	str	r3, [sp, #4]
 8010c06:	2200      	movs	r2, #0
 8010c08:	9200      	str	r2, [sp, #0]
 8010c0a:	4613      	mov	r3, r2
 8010c0c:	2106      	movs	r1, #6
 8010c0e:	4628      	mov	r0, r5
 8010c10:	f7fd fc3d 	bl	800e48e <dwt_xfer3xxx>
 8010c14:	e7d1      	b.n	8010bba <ull_rxenable+0x4a>
 8010c16:	2302      	movs	r3, #2
 8010c18:	9301      	str	r3, [sp, #4]
 8010c1a:	2100      	movs	r1, #0
 8010c1c:	9100      	str	r1, [sp, #0]
 8010c1e:	460b      	mov	r3, r1
 8010c20:	460a      	mov	r2, r1
 8010c22:	4628      	mov	r0, r5
 8010c24:	f7fd fc33 	bl	800e48e <dwt_xfer3xxx>
 8010c28:	f014 0f02 	tst.w	r4, #2
 8010c2c:	d002      	beq.n	8010c34 <ull_rxenable+0xc4>
 8010c2e:	f04f 30ff 	mov.w	r0, #4294967295
 8010c32:	e7cb      	b.n	8010bcc <ull_rxenable+0x5c>
 8010c34:	2102      	movs	r1, #2
 8010c36:	9101      	str	r1, [sp, #4]
 8010c38:	2200      	movs	r2, #0
 8010c3a:	9200      	str	r2, [sp, #0]
 8010c3c:	4613      	mov	r3, r2
 8010c3e:	4628      	mov	r0, r5
 8010c40:	f7fd fc25 	bl	800e48e <dwt_xfer3xxx>
 8010c44:	f04f 30ff 	mov.w	r0, #4294967295
 8010c48:	e7c0      	b.n	8010bcc <ull_rxenable+0x5c>
 8010c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8010c4e:	e7bd      	b.n	8010bcc <ull_rxenable+0x5c>

08010c50 <ull_softreset_no_sema_fcmd>:
 8010c50:	b570      	push	{r4, r5, r6, lr}
 8010c52:	b082      	sub	sp, #8
 8010c54:	4606      	mov	r6, r0
 8010c56:	2502      	movs	r5, #2
 8010c58:	9501      	str	r5, [sp, #4]
 8010c5a:	2400      	movs	r4, #0
 8010c5c:	9400      	str	r4, [sp, #0]
 8010c5e:	4623      	mov	r3, r4
 8010c60:	4622      	mov	r2, r4
 8010c62:	2119      	movs	r1, #25
 8010c64:	f7fd fc13 	bl	800e48e <dwt_xfer3xxx>
 8010c68:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8010c6a:	739c      	strb	r4, [r3, #14]
 8010c6c:	821d      	strh	r5, [r3, #16]
 8010c6e:	751c      	strb	r4, [r3, #20]
 8010c70:	755c      	strb	r4, [r3, #21]
 8010c72:	73dc      	strb	r4, [r3, #15]
 8010c74:	b002      	add	sp, #8
 8010c76:	bd70      	pop	{r4, r5, r6, pc}

08010c78 <ull_softreset_fcmd>:
 8010c78:	b570      	push	{r4, r5, r6, lr}
 8010c7a:	b082      	sub	sp, #8
 8010c7c:	4606      	mov	r6, r0
 8010c7e:	2502      	movs	r5, #2
 8010c80:	9501      	str	r5, [sp, #4]
 8010c82:	2400      	movs	r4, #0
 8010c84:	9400      	str	r4, [sp, #0]
 8010c86:	4623      	mov	r3, r4
 8010c88:	4622      	mov	r2, r4
 8010c8a:	2118      	movs	r1, #24
 8010c8c:	f7fd fbff 	bl	800e48e <dwt_xfer3xxx>
 8010c90:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8010c92:	739c      	strb	r4, [r3, #14]
 8010c94:	821d      	strh	r5, [r3, #16]
 8010c96:	751c      	strb	r4, [r3, #20]
 8010c98:	755c      	strb	r4, [r3, #21]
 8010c9a:	73dc      	strb	r4, [r3, #15]
 8010c9c:	b002      	add	sp, #8
 8010c9e:	bd70      	pop	{r4, r5, r6, pc}

08010ca0 <dwt_ioctl>:
 8010ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ca4:	b08d      	sub	sp, #52	; 0x34
 8010ca6:	4606      	mov	r6, r0
 8010ca8:	4615      	mov	r5, r2
 8010caa:	461c      	mov	r4, r3
 8010cac:	299c      	cmp	r1, #156	; 0x9c
 8010cae:	f200 809f 	bhi.w	8010df0 <dwt_ioctl+0x150>
 8010cb2:	e8df f011 	tbh	[pc, r1, lsl #1]
 8010cb6:	09b9      	.short	0x09b9
 8010cb8:	00a109c4 	.word	0x00a109c4
 8010cbc:	00c100a6 	.word	0x00c100a6
 8010cc0:	019d0151 	.word	0x019d0151
 8010cc4:	015c0176 	.word	0x015c0176
 8010cc8:	01b301ae 	.word	0x01b301ae
 8010ccc:	01c501bc 	.word	0x01c501bc
 8010cd0:	01d701ce 	.word	0x01d701ce
 8010cd4:	01e501e0 	.word	0x01e501e0
 8010cd8:	027201ee 	.word	0x027201ee
 8010cdc:	027e0278 	.word	0x027e0278
 8010ce0:	028f0289 	.word	0x028f0289
 8010ce4:	029a0295 	.word	0x029a0295
 8010ce8:	02a502a0 	.word	0x02a502a0
 8010cec:	02b702ae 	.word	0x02b702ae
 8010cf0:	02c902c0 	.word	0x02c902c0
 8010cf4:	02f90304 	.word	0x02f90304
 8010cf8:	02d202ee 	.word	0x02d202ee
 8010cfc:	031e02e0 	.word	0x031e02e0
 8010d00:	021a01f8 	.word	0x021a01f8
 8010d04:	02420239 	.word	0x02420239
 8010d08:	08ba0258 	.word	0x08ba0258
 8010d0c:	031508bf 	.word	0x031508bf
 8010d10:	032c0327 	.word	0x032c0327
 8010d14:	033c0336 	.word	0x033c0336
 8010d18:	03520347 	.word	0x03520347
 8010d1c:	0386035b 	.word	0x0386035b
 8010d20:	03a9039d 	.word	0x03a9039d
 8010d24:	03b5030a 	.word	0x03b5030a
 8010d28:	03d203bf 	.word	0x03d203bf
 8010d2c:	040b03f9 	.word	0x040b03f9
 8010d30:	0457044d 	.word	0x0457044d
 8010d34:	048c047d 	.word	0x048c047d
 8010d38:	049504a7 	.word	0x049504a7
 8010d3c:	04f704b1 	.word	0x04f704b1
 8010d40:	052f050f 	.word	0x052f050f
 8010d44:	05580544 	.word	0x05580544
 8010d48:	057d0561 	.word	0x057d0561
 8010d4c:	0692056a 	.word	0x0692056a
 8010d50:	071106c1 	.word	0x071106c1
 8010d54:	07220717 	.word	0x07220717
 8010d58:	075b073b 	.word	0x075b073b
 8010d5c:	078f0765 	.word	0x078f0765
 8010d60:	07c607bd 	.word	0x07c607bd
 8010d64:	07d507cc 	.word	0x07d507cc
 8010d68:	07ef07e2 	.word	0x07ef07e2
 8010d6c:	080207f9 	.word	0x080207f9
 8010d70:	0816080b 	.word	0x0816080b
 8010d74:	08270821 	.word	0x08270821
 8010d78:	0855084a 	.word	0x0855084a
 8010d7c:	086b0860 	.word	0x086b0860
 8010d80:	0898088d 	.word	0x0898088d
 8010d84:	08c508b1 	.word	0x08c508b1
 8010d88:	0959094f 	.word	0x0959094f
 8010d8c:	09cc0964 	.word	0x09cc0964
 8010d90:	09ae096e 	.word	0x09ae096e
 8010d94:	090306b3 	.word	0x090306b3
 8010d98:	0a3a0924 	.word	0x0a3a0924
 8010d9c:	09d90a2f 	.word	0x09d90a2f
 8010da0:	09ef09e4 	.word	0x09ef09e4
 8010da4:	0a0509fa 	.word	0x0a0509fa
 8010da8:	0a1b0a10 	.word	0x0a1b0a10
 8010dac:	0c320a24 	.word	0x0c320a24
 8010db0:	0ca30c69 	.word	0x0ca30c69
 8010db4:	0e2d0cc5 	.word	0x0e2d0cc5
 8010db8:	0a4a0e41 	.word	0x0a4a0e41
 8010dbc:	0b890b57 	.word	0x0b890b57
 8010dc0:	0b970b93 	.word	0x0b970b93
 8010dc4:	0ba50b9b 	.word	0x0ba50b9b
 8010dc8:	0bc10bb7 	.word	0x0bc10bb7
 8010dcc:	0be80bd4 	.word	0x0be80bd4
 8010dd0:	0cdb0c22 	.word	0x0cdb0c22
 8010dd4:	0cfd0ce5 	.word	0x0cfd0ce5
 8010dd8:	0d2d0d18 	.word	0x0d2d0d18
 8010ddc:	0d890d4d 	.word	0x0d890d4d
 8010de0:	0db70da1 	.word	0x0db70da1
 8010de4:	0efc0dc7 	.word	0x0efc0dc7
 8010de8:	0dec0df6 	.word	0x0dec0df6
 8010dec:	0e000e08 	.word	0x0e000e08
 8010df0:	f04f 35ff 	mov.w	r5, #4294967295
 8010df4:	f001 be5c 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8010df8:	f7fd fb28 	bl	800e44c <ull_wakeup_ic>
 8010dfc:	2500      	movs	r5, #0
 8010dfe:	f001 be57 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8010e02:	2202      	movs	r2, #2
 8010e04:	49c0      	ldr	r1, [pc, #768]	; (8011108 <dwt_ioctl+0x468>)
 8010e06:	f7fd fc1f 	bl	800e648 <dwt_read8bitoffsetreg>
 8010e0a:	2803      	cmp	r0, #3
 8010e0c:	d802      	bhi.n	8010e14 <dwt_ioctl+0x174>
 8010e0e:	2500      	movs	r5, #0
 8010e10:	f001 be4e 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8010e14:	f7ef fb62 	bl	80004dc <decamutexon>
 8010e18:	4604      	mov	r4, r0
 8010e1a:	2302      	movs	r3, #2
 8010e1c:	9301      	str	r3, [sp, #4]
 8010e1e:	2500      	movs	r5, #0
 8010e20:	9500      	str	r5, [sp, #0]
 8010e22:	462b      	mov	r3, r5
 8010e24:	462a      	mov	r2, r5
 8010e26:	4629      	mov	r1, r5
 8010e28:	4630      	mov	r0, r6
 8010e2a:	f7fd fb30 	bl	800e48e <dwt_xfer3xxx>
 8010e2e:	4620      	mov	r0, r4
 8010e30:	f7ef fb65 	bl	80004fe <decamutexoff>
 8010e34:	f001 be3c 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8010e38:	2c00      	cmp	r4, #0
 8010e3a:	f001 863d 	beq.w	8012ab8 <dwt_ioctl+0x1e18>
 8010e3e:	7824      	ldrb	r4, [r4, #0]
 8010e40:	f014 0f1d 	tst.w	r4, #29
 8010e44:	d063      	beq.n	8010f0e <dwt_ioctl+0x26e>
 8010e46:	f014 0f01 	tst.w	r4, #1
 8010e4a:	d025      	beq.n	8010e98 <dwt_ioctl+0x1f8>
 8010e4c:	f014 0f02 	tst.w	r4, #2
 8010e50:	f04f 0302 	mov.w	r3, #2
 8010e54:	9301      	str	r3, [sp, #4]
 8010e56:	f04f 0200 	mov.w	r2, #0
 8010e5a:	9200      	str	r2, [sp, #0]
 8010e5c:	4613      	mov	r3, r2
 8010e5e:	bf14      	ite	ne
 8010e60:	210d      	movne	r1, #13
 8010e62:	2103      	moveq	r1, #3
 8010e64:	f7fd fb13 	bl	800e48e <dwt_xfer3xxx>
 8010e68:	2203      	movs	r2, #3
 8010e6a:	2144      	movs	r1, #68	; 0x44
 8010e6c:	4630      	mov	r0, r6
 8010e6e:	f7fd fbeb 	bl	800e648 <dwt_read8bitoffsetreg>
 8010e72:	f010 0f08 	tst.w	r0, #8
 8010e76:	bf08      	it	eq
 8010e78:	2500      	moveq	r5, #0
 8010e7a:	f001 8619 	beq.w	8012ab0 <dwt_ioctl+0x1e10>
 8010e7e:	2302      	movs	r3, #2
 8010e80:	9301      	str	r3, [sp, #4]
 8010e82:	2100      	movs	r1, #0
 8010e84:	9100      	str	r1, [sp, #0]
 8010e86:	460b      	mov	r3, r1
 8010e88:	460a      	mov	r2, r1
 8010e8a:	4630      	mov	r0, r6
 8010e8c:	f7fd faff 	bl	800e48e <dwt_xfer3xxx>
 8010e90:	f04f 35ff 	mov.w	r5, #4294967295
 8010e94:	f001 be0c 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8010e98:	f014 0f08 	tst.w	r4, #8
 8010e9c:	d111      	bne.n	8010ec2 <dwt_ioctl+0x222>
 8010e9e:	f014 0f10 	tst.w	r4, #16
 8010ea2:	d121      	bne.n	8010ee8 <dwt_ioctl+0x248>
 8010ea4:	f014 0f02 	tst.w	r4, #2
 8010ea8:	f04f 0302 	mov.w	r3, #2
 8010eac:	9301      	str	r3, [sp, #4]
 8010eae:	f04f 0200 	mov.w	r2, #0
 8010eb2:	9200      	str	r2, [sp, #0]
 8010eb4:	4613      	mov	r3, r2
 8010eb6:	bf14      	ite	ne
 8010eb8:	2110      	movne	r1, #16
 8010eba:	2109      	moveq	r1, #9
 8010ebc:	f7fd fae7 	bl	800e48e <dwt_xfer3xxx>
 8010ec0:	e7d2      	b.n	8010e68 <dwt_ioctl+0x1c8>
 8010ec2:	2100      	movs	r1, #0
 8010ec4:	f7fe f85f 	bl	800ef86 <_dwt_adjust_delaytime>
 8010ec8:	f014 0f02 	tst.w	r4, #2
 8010ecc:	f04f 0302 	mov.w	r3, #2
 8010ed0:	9301      	str	r3, [sp, #4]
 8010ed2:	f04f 0200 	mov.w	r2, #0
 8010ed6:	9200      	str	r2, [sp, #0]
 8010ed8:	4613      	mov	r3, r2
 8010eda:	bf14      	ite	ne
 8010edc:	210f      	movne	r1, #15
 8010ede:	2107      	moveq	r1, #7
 8010ee0:	4630      	mov	r0, r6
 8010ee2:	f7fd fad4 	bl	800e48e <dwt_xfer3xxx>
 8010ee6:	e7bf      	b.n	8010e68 <dwt_ioctl+0x1c8>
 8010ee8:	2101      	movs	r1, #1
 8010eea:	f7fe f84c 	bl	800ef86 <_dwt_adjust_delaytime>
 8010eee:	f014 0f02 	tst.w	r4, #2
 8010ef2:	f04f 0302 	mov.w	r3, #2
 8010ef6:	9301      	str	r3, [sp, #4]
 8010ef8:	f04f 0200 	mov.w	r2, #0
 8010efc:	9200      	str	r2, [sp, #0]
 8010efe:	4613      	mov	r3, r2
 8010f00:	bf14      	ite	ne
 8010f02:	210e      	movne	r1, #14
 8010f04:	2105      	moveq	r1, #5
 8010f06:	4630      	mov	r0, r6
 8010f08:	f7fd fac1 	bl	800e48e <dwt_xfer3xxx>
 8010f0c:	e7ac      	b.n	8010e68 <dwt_ioctl+0x1c8>
 8010f0e:	f014 0f20 	tst.w	r4, #32
 8010f12:	d010      	beq.n	8010f36 <dwt_ioctl+0x296>
 8010f14:	f014 0f02 	tst.w	r4, #2
 8010f18:	f04f 0302 	mov.w	r3, #2
 8010f1c:	9301      	str	r3, [sp, #4]
 8010f1e:	f04f 0500 	mov.w	r5, #0
 8010f22:	9500      	str	r5, [sp, #0]
 8010f24:	462b      	mov	r3, r5
 8010f26:	462a      	mov	r2, r5
 8010f28:	bf14      	ite	ne
 8010f2a:	2111      	movne	r1, #17
 8010f2c:	210b      	moveq	r1, #11
 8010f2e:	f7fd faae 	bl	800e48e <dwt_xfer3xxx>
 8010f32:	f001 bdbd 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8010f36:	f014 0f02 	tst.w	r4, #2
 8010f3a:	f04f 0302 	mov.w	r3, #2
 8010f3e:	9301      	str	r3, [sp, #4]
 8010f40:	f04f 0500 	mov.w	r5, #0
 8010f44:	9500      	str	r5, [sp, #0]
 8010f46:	462b      	mov	r3, r5
 8010f48:	462a      	mov	r2, r5
 8010f4a:	bf14      	ite	ne
 8010f4c:	210c      	movne	r1, #12
 8010f4e:	2101      	moveq	r1, #1
 8010f50:	f7fd fa9d 	bl	800e48e <dwt_xfer3xxx>
 8010f54:	f001 bdac 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8010f58:	2c00      	cmp	r4, #0
 8010f5a:	f001 85af 	beq.w	8012abc <dwt_ioctl+0x1e1c>
 8010f5e:	6823      	ldr	r3, [r4, #0]
 8010f60:	2200      	movs	r2, #0
 8010f62:	2128      	movs	r1, #40	; 0x28
 8010f64:	f7fd fffa 	bl	800ef5c <dwt_write32bitoffsetreg>
 8010f68:	2500      	movs	r5, #0
 8010f6a:	f001 bda1 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8010f6e:	6823      	ldr	r3, [r4, #0]
 8010f70:	2200      	movs	r2, #0
 8010f72:	4966      	ldr	r1, [pc, #408]	; (801110c <dwt_ioctl+0x46c>)
 8010f74:	f7fd fff2 	bl	800ef5c <dwt_write32bitoffsetreg>
 8010f78:	6863      	ldr	r3, [r4, #4]
 8010f7a:	2200      	movs	r2, #0
 8010f7c:	4964      	ldr	r1, [pc, #400]	; (8011110 <dwt_ioctl+0x470>)
 8010f7e:	4630      	mov	r0, r6
 8010f80:	f7fd ffec 	bl	800ef5c <dwt_write32bitoffsetreg>
 8010f84:	68a3      	ldr	r3, [r4, #8]
 8010f86:	2200      	movs	r2, #0
 8010f88:	4962      	ldr	r1, [pc, #392]	; (8011114 <dwt_ioctl+0x474>)
 8010f8a:	4630      	mov	r0, r6
 8010f8c:	f7fd ffe6 	bl	800ef5c <dwt_write32bitoffsetreg>
 8010f90:	68e3      	ldr	r3, [r4, #12]
 8010f92:	2200      	movs	r2, #0
 8010f94:	4960      	ldr	r1, [pc, #384]	; (8011118 <dwt_ioctl+0x478>)
 8010f96:	4630      	mov	r0, r6
 8010f98:	f7fd ffe0 	bl	800ef5c <dwt_write32bitoffsetreg>
 8010f9c:	2500      	movs	r5, #0
 8010f9e:	f001 bd87 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8010fa2:	2c00      	cmp	r4, #0
 8010fa4:	f001 858c 	beq.w	8012ac0 <dwt_ioctl+0x1e20>
 8010fa8:	8823      	ldrh	r3, [r4, #0]
 8010faa:	6865      	ldr	r5, [r4, #4]
 8010fac:	2d03      	cmp	r5, #3
 8010fae:	f201 8589 	bhi.w	8012ac4 <dwt_ioctl+0x1e24>
 8010fb2:	e8df f005 	tbb	[pc, r5]
 8010fb6:	0802      	.short	0x0802
 8010fb8:	160f      	.short	0x160f
 8010fba:	2200      	movs	r2, #0
 8010fbc:	4957      	ldr	r1, [pc, #348]	; (801111c <dwt_ioctl+0x47c>)
 8010fbe:	f7fd ff62 	bl	800ee86 <dwt_write16bitoffsetreg>
 8010fc2:	f001 bd75 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8010fc6:	2202      	movs	r2, #2
 8010fc8:	4954      	ldr	r1, [pc, #336]	; (801111c <dwt_ioctl+0x47c>)
 8010fca:	f7fd ff5c 	bl	800ee86 <dwt_write16bitoffsetreg>
 8010fce:	2500      	movs	r5, #0
 8010fd0:	f001 bd6e 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8010fd4:	2200      	movs	r2, #0
 8010fd6:	4952      	ldr	r1, [pc, #328]	; (8011120 <dwt_ioctl+0x480>)
 8010fd8:	f7fd ff55 	bl	800ee86 <dwt_write16bitoffsetreg>
 8010fdc:	2500      	movs	r5, #0
 8010fde:	f001 bd67 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8010fe2:	2202      	movs	r2, #2
 8010fe4:	494e      	ldr	r1, [pc, #312]	; (8011120 <dwt_ioctl+0x480>)
 8010fe6:	f7fd ff4e 	bl	800ee86 <dwt_write16bitoffsetreg>
 8010fea:	2500      	movs	r5, #0
 8010fec:	f001 bd60 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8010ff0:	2c00      	cmp	r4, #0
 8010ff2:	f001 8569 	beq.w	8012ac8 <dwt_ioctl+0x1e28>
 8010ff6:	7823      	ldrb	r3, [r4, #0]
 8010ff8:	005b      	lsls	r3, r3, #1
 8010ffa:	f003 0306 	and.w	r3, r3, #6
 8010ffe:	9300      	str	r3, [sp, #0]
 8011000:	f06f 0306 	mvn.w	r3, #6
 8011004:	2200      	movs	r2, #0
 8011006:	4947      	ldr	r1, [pc, #284]	; (8011124 <dwt_ioctl+0x484>)
 8011008:	f7fe fcae 	bl	800f968 <dwt_modify32bitoffsetreg>
 801100c:	2500      	movs	r5, #0
 801100e:	f001 bd4f 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011012:	f7fe fccd 	bl	800f9b0 <ull_enablegpioclocks>
 8011016:	2500      	movs	r5, #0
 8011018:	f001 bd4a 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 801101c:	2c00      	cmp	r4, #0
 801101e:	f001 8555 	beq.w	8012acc <dwt_ioctl+0x1e2c>
 8011022:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8011024:	7b1b      	ldrb	r3, [r3, #12]
 8011026:	7023      	strb	r3, [r4, #0]
 8011028:	2500      	movs	r5, #0
 801102a:	f001 bd41 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 801102e:	2c00      	cmp	r4, #0
 8011030:	f001 854e 	beq.w	8012ad0 <dwt_ioctl+0x1e30>
 8011034:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8011036:	7a5b      	ldrb	r3, [r3, #9]
 8011038:	7023      	strb	r3, [r4, #0]
 801103a:	2500      	movs	r5, #0
 801103c:	f001 bd38 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011040:	2c00      	cmp	r4, #0
 8011042:	f001 8547 	beq.w	8012ad4 <dwt_ioctl+0x1e34>
 8011046:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8011048:	7a9b      	ldrb	r3, [r3, #10]
 801104a:	7023      	strb	r3, [r4, #0]
 801104c:	2500      	movs	r5, #0
 801104e:	f001 bd2f 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011052:	2c00      	cmp	r4, #0
 8011054:	f001 8540 	beq.w	8012ad8 <dwt_ioctl+0x1e38>
 8011058:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	6023      	str	r3, [r4, #0]
 801105e:	2500      	movs	r5, #0
 8011060:	f001 bd26 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011064:	2c00      	cmp	r4, #0
 8011066:	f001 8539 	beq.w	8012adc <dwt_ioctl+0x1e3c>
 801106a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801106c:	685b      	ldr	r3, [r3, #4]
 801106e:	6023      	str	r3, [r4, #0]
 8011070:	2500      	movs	r5, #0
 8011072:	f001 bd1d 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011076:	f7fe fae1 	bl	800f63c <ull_signal_rx_buff_free>
 801107a:	2500      	movs	r5, #0
 801107c:	f001 bd18 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011080:	2c00      	cmp	r4, #0
 8011082:	f001 852d 	beq.w	8012ae0 <dwt_ioctl+0x1e40>
 8011086:	6821      	ldr	r1, [r4, #0]
 8011088:	f7fd ffa3 	bl	800efd2 <ull_setrxaftertxdelay>
 801108c:	2500      	movs	r5, #0
 801108e:	f001 bd0f 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011092:	2c00      	cmp	r4, #0
 8011094:	f001 8526 	beq.w	8012ae4 <dwt_ioctl+0x1e44>
 8011098:	6862      	ldr	r2, [r4, #4]
 801109a:	7821      	ldrb	r1, [r4, #0]
 801109c:	f7fe fde8 	bl	800fc70 <ull_enablespicrccheck>
 80110a0:	2500      	movs	r5, #0
 80110a2:	f001 bd05 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 80110a6:	2c00      	cmp	r4, #0
 80110a8:	f001 851e 	beq.w	8012ae8 <dwt_ioctl+0x1e48>
 80110ac:	6865      	ldr	r5, [r4, #4]
 80110ae:	7823      	ldrb	r3, [r4, #0]
 80110b0:	2203      	movs	r2, #3
 80110b2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80110b6:	f7fe f935 	bl	800f324 <dwt_write8bitoffsetreg>
 80110ba:	b94d      	cbnz	r5, 80110d0 <dwt_ioctl+0x430>
 80110bc:	2200      	movs	r2, #0
 80110be:	9200      	str	r2, [sp, #0]
 80110c0:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 80110c4:	2110      	movs	r1, #16
 80110c6:	4630      	mov	r0, r6
 80110c8:	f7ff f94e 	bl	8010368 <dwt_modify16bitoffsetreg>
 80110cc:	f001 bcf0 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 80110d0:	f44f 2381 	mov.w	r3, #264192	; 0x40800
 80110d4:	9300      	str	r3, [sp, #0]
 80110d6:	f04f 33ff 	mov.w	r3, #4294967295
 80110da:	2200      	movs	r2, #0
 80110dc:	2110      	movs	r1, #16
 80110de:	4630      	mov	r0, r6
 80110e0:	f7fe fc42 	bl	800f968 <dwt_modify32bitoffsetreg>
 80110e4:	2500      	movs	r5, #0
 80110e6:	f001 bce3 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 80110ea:	2200      	movs	r2, #0
 80110ec:	4611      	mov	r1, r2
 80110ee:	f7fd fa56 	bl	800e59e <dwt_read32bitoffsetreg>
 80110f2:	68b2      	ldr	r2, [r6, #8]
 80110f4:	6813      	ldr	r3, [r2, #0]
 80110f6:	4043      	eors	r3, r0
 80110f8:	6852      	ldr	r2, [r2, #4]
 80110fa:	4213      	tst	r3, r2
 80110fc:	bf14      	ite	ne
 80110fe:	f04f 35ff 	movne.w	r5, #4294967295
 8011102:	2500      	moveq	r5, #0
 8011104:	f001 bcd4 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011108:	000f0030 	.word	0x000f0030
 801110c:	00010054 	.word	0x00010054
 8011110:	00010058 	.word	0x00010058
 8011114:	0001005c 	.word	0x0001005c
 8011118:	00010060 	.word	0x00010060
 801111c:	0001000c 	.word	0x0001000c
 8011120:	00010010 	.word	0x00010010
 8011124:	00010008 	.word	0x00010008
 8011128:	2c00      	cmp	r4, #0
 801112a:	f001 84df 	beq.w	8012aec <dwt_ioctl+0x1e4c>
 801112e:	7821      	ldrb	r1, [r4, #0]
 8011130:	f7fe fdba 	bl	800fca8 <ull_configciadiag>
 8011134:	2500      	movs	r5, #0
 8011136:	f001 bcbb 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 801113a:	b942      	cbnz	r2, 801114e <dwt_ioctl+0x4ae>
 801113c:	2200      	movs	r2, #0
 801113e:	9200      	str	r2, [sp, #0]
 8011140:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8011144:	49d2      	ldr	r1, [pc, #840]	; (8011490 <dwt_ioctl+0x7f0>)
 8011146:	f7ff f90f 	bl	8010368 <dwt_modify16bitoffsetreg>
 801114a:	f001 bcb1 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 801114e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011152:	9300      	str	r3, [sp, #0]
 8011154:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011158:	2200      	movs	r2, #0
 801115a:	49cd      	ldr	r1, [pc, #820]	; (8011490 <dwt_ioctl+0x7f0>)
 801115c:	f7ff f904 	bl	8010368 <dwt_modify16bitoffsetreg>
 8011160:	2500      	movs	r5, #0
 8011162:	f001 bca5 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011166:	f002 0201 	and.w	r2, r2, #1
 801116a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801116e:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 8011172:	2a00      	cmp	r2, #0
 8011174:	bf08      	it	eq
 8011176:	460b      	moveq	r3, r1
 8011178:	02d2      	lsls	r2, r2, #11
 801117a:	f015 0f02 	tst.w	r5, #2
 801117e:	bf12      	itee	ne
 8011180:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
 8011184:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011188:	b29b      	uxtheq	r3, r3
 801118a:	9200      	str	r2, [sp, #0]
 801118c:	2200      	movs	r2, #0
 801118e:	49c0      	ldr	r1, [pc, #768]	; (8011490 <dwt_ioctl+0x7f0>)
 8011190:	f7ff f8ea 	bl	8010368 <dwt_modify16bitoffsetreg>
 8011194:	2500      	movs	r5, #0
 8011196:	f001 bc8b 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 801119a:	4611      	mov	r1, r2
 801119c:	f7fd ff2e 	bl	800effc <ull_setfinegraintxseq>
 80111a0:	2500      	movs	r5, #0
 80111a2:	f001 bc85 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 80111a6:	4611      	mov	r1, r2
 80111a8:	f7fd ff3c 	bl	800f024 <ull_setlnapamode>
 80111ac:	2500      	movs	r5, #0
 80111ae:	f001 bc7f 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 80111b2:	2c00      	cmp	r4, #0
 80111b4:	f001 849c 	beq.w	8012af0 <dwt_ioctl+0x1e50>
 80111b8:	2200      	movs	r2, #0
 80111ba:	49b6      	ldr	r1, [pc, #728]	; (8011494 <dwt_ioctl+0x7f4>)
 80111bc:	f7fd fa44 	bl	800e648 <dwt_read8bitoffsetreg>
 80111c0:	7020      	strb	r0, [r4, #0]
 80111c2:	2500      	movs	r5, #0
 80111c4:	f001 bc74 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 80111c8:	4621      	mov	r1, r4
 80111ca:	f7fd ff4b 	bl	800f064 <ull_configurestskey>
 80111ce:	2500      	movs	r5, #0
 80111d0:	f001 bc6e 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 80111d4:	4621      	mov	r1, r4
 80111d6:	f7fd ff69 	bl	800f0ac <ull_configurestsiv>
 80111da:	2500      	movs	r5, #0
 80111dc:	f001 bc68 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 80111e0:	f7fe fd98 	bl	800fd14 <ull_configurestsloadiv>
 80111e4:	2500      	movs	r5, #0
 80111e6:	f001 bc63 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 80111ea:	4611      	mov	r1, r2
 80111ec:	f7fd ff82 	bl	800f0f4 <ull_configmrxlut>
 80111f0:	2500      	movs	r5, #0
 80111f2:	f001 bc5d 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 80111f6:	f7fe feb3 	bl	800ff60 <ull_restoreconfig>
 80111fa:	2500      	movs	r5, #0
 80111fc:	f001 bc58 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011200:	2c00      	cmp	r4, #0
 8011202:	f001 8477 	beq.w	8012af4 <dwt_ioctl+0x1e54>
 8011206:	7821      	ldrb	r1, [r4, #0]
 8011208:	f7ff f8c8 	bl	801039c <ull_configurestsmode>
 801120c:	2500      	movs	r5, #0
 801120e:	f001 bc4f 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011212:	2c00      	cmp	r4, #0
 8011214:	f001 8470 	beq.w	8012af8 <dwt_ioctl+0x1e58>
 8011218:	8821      	ldrh	r1, [r4, #0]
 801121a:	f7fd fe44 	bl	800eea6 <ull_setrxantennadelay>
 801121e:	2500      	movs	r5, #0
 8011220:	f001 bc46 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011224:	2c00      	cmp	r4, #0
 8011226:	f001 8469 	beq.w	8012afc <dwt_ioctl+0x1e5c>
 801122a:	f7fd f9e0 	bl	800e5ee <ull_getrxantennadelay>
 801122e:	8020      	strh	r0, [r4, #0]
 8011230:	2500      	movs	r5, #0
 8011232:	f001 bc3d 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011236:	2c00      	cmp	r4, #0
 8011238:	f001 8462 	beq.w	8012b00 <dwt_ioctl+0x1e60>
 801123c:	8821      	ldrh	r1, [r4, #0]
 801123e:	f7fd fe3a 	bl	800eeb6 <ull_settxantennadelay>
 8011242:	2500      	movs	r5, #0
 8011244:	f001 bc34 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011248:	2c00      	cmp	r4, #0
 801124a:	f001 845b 	beq.w	8012b04 <dwt_ioctl+0x1e64>
 801124e:	f7fd f9d5 	bl	800e5fc <ull_gettxantennadelay>
 8011252:	8020      	strh	r0, [r4, #0]
 8011254:	2500      	movs	r5, #0
 8011256:	f001 bc2b 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 801125a:	2c00      	cmp	r4, #0
 801125c:	f001 8454 	beq.w	8012b08 <dwt_ioctl+0x1e68>
 8011260:	88a3      	ldrh	r3, [r4, #4]
 8011262:	88e2      	ldrh	r2, [r4, #6]
 8011264:	6821      	ldr	r1, [r4, #0]
 8011266:	9100      	str	r1, [sp, #0]
 8011268:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 801126c:	f7fd fe00 	bl	800ee70 <dwt_writetodevice>
 8011270:	2500      	movs	r5, #0
 8011272:	f001 bc1d 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011276:	2c00      	cmp	r4, #0
 8011278:	f001 8448 	beq.w	8012b0c <dwt_ioctl+0x1e6c>
 801127c:	88a3      	ldrh	r3, [r4, #4]
 801127e:	88e2      	ldrh	r2, [r4, #6]
 8011280:	6821      	ldr	r1, [r4, #0]
 8011282:	9100      	str	r1, [sp, #0]
 8011284:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
 8011288:	f7fd f97f 	bl	800e58a <dwt_readfromdevice>
 801128c:	2500      	movs	r5, #0
 801128e:	f001 bc0f 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011292:	2c00      	cmp	r4, #0
 8011294:	f001 843c 	beq.w	8012b10 <dwt_ioctl+0x1e70>
 8011298:	88e3      	ldrh	r3, [r4, #6]
 801129a:	88a2      	ldrh	r2, [r4, #4]
 801129c:	6821      	ldr	r1, [r4, #0]
 801129e:	f7fe f80b 	bl	800f2b8 <ull_readrxdata>
 80112a2:	2500      	movs	r5, #0
 80112a4:	f001 bc04 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 80112a8:	2c00      	cmp	r4, #0
 80112aa:	f001 8433 	beq.w	8012b14 <dwt_ioctl+0x1e74>
 80112ae:	88e3      	ldrh	r3, [r4, #6]
 80112b0:	6822      	ldr	r2, [r4, #0]
 80112b2:	88a1      	ldrh	r1, [r4, #4]
 80112b4:	f7fe f990 	bl	800f5d8 <ull_writetxdata>
 80112b8:	2500      	movs	r5, #0
 80112ba:	f001 bbf9 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 80112be:	4611      	mov	r1, r2
 80112c0:	f7ff fc56 	bl	8010b70 <ull_rxenable>
 80112c4:	2500      	movs	r5, #0
 80112c6:	f001 bbf3 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 80112ca:	2c00      	cmp	r4, #0
 80112cc:	f001 8424 	beq.w	8012b18 <dwt_ioctl+0x1e78>
 80112d0:	7923      	ldrb	r3, [r4, #4]
 80112d2:	8862      	ldrh	r2, [r4, #2]
 80112d4:	8821      	ldrh	r1, [r4, #0]
 80112d6:	f7fe fc97 	bl	800fc08 <ull_writetxfctrl>
 80112da:	2500      	movs	r5, #0
 80112dc:	f001 bbe8 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 80112e0:	2c00      	cmp	r4, #0
 80112e2:	f001 841b 	beq.w	8012b1c <dwt_ioctl+0x1e7c>
 80112e6:	f7fd f98f 	bl	800e608 <ull_readclockoffset>
 80112ea:	8020      	strh	r0, [r4, #0]
 80112ec:	2500      	movs	r5, #0
 80112ee:	f001 bbdf 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 80112f2:	2c00      	cmp	r4, #0
 80112f4:	f001 8414 	beq.w	8012b20 <dwt_ioctl+0x1e80>
 80112f8:	f7fd f9b4 	bl	800e664 <ull_readcarrierintegrator>
 80112fc:	6020      	str	r0, [r4, #0]
 80112fe:	2500      	movs	r5, #0
 8011300:	f001 bbd6 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011304:	f7fe f866 	bl	800f3d4 <ull_clearaonconfig>
 8011308:	2500      	movs	r5, #0
 801130a:	f001 bbd1 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 801130e:	2c00      	cmp	r4, #0
 8011310:	f001 8408 	beq.w	8012b24 <dwt_ioctl+0x1e84>
 8011314:	8861      	ldrh	r1, [r4, #2]
 8011316:	f7fe fe53 	bl	800ffc0 <ull_calcbandwidthadj>
 801131a:	7020      	strb	r0, [r4, #0]
 801131c:	2500      	movs	r5, #0
 801131e:	f001 bbc7 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011322:	4621      	mov	r1, r4
 8011324:	f7fd f9be 	bl	800e6a4 <ull_readdiagnostics>
 8011328:	2500      	movs	r5, #0
 801132a:	f001 bbc1 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 801132e:	2c00      	cmp	r4, #0
 8011330:	f001 83fa 	beq.w	8012b28 <dwt_ioctl+0x1e88>
 8011334:	2201      	movs	r2, #1
 8011336:	2170      	movs	r1, #112	; 0x70
 8011338:	f7fd f931 	bl	800e59e <dwt_read32bitoffsetreg>
 801133c:	6020      	str	r0, [r4, #0]
 801133e:	2500      	movs	r5, #0
 8011340:	f001 bbb6 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011344:	2c00      	cmp	r4, #0
 8011346:	f001 83f1 	beq.w	8012b2c <dwt_ioctl+0x1e8c>
 801134a:	2200      	movs	r2, #0
 801134c:	2170      	movs	r1, #112	; 0x70
 801134e:	f7fd f926 	bl	800e59e <dwt_read32bitoffsetreg>
 8011352:	6020      	str	r0, [r4, #0]
 8011354:	2500      	movs	r5, #0
 8011356:	f001 bbab 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 801135a:	9400      	str	r4, [sp, #0]
 801135c:	2305      	movs	r3, #5
 801135e:	2200      	movs	r2, #0
 8011360:	2170      	movs	r1, #112	; 0x70
 8011362:	f7fd f912 	bl	800e58a <dwt_readfromdevice>
 8011366:	2500      	movs	r5, #0
 8011368:	f001 bba2 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 801136c:	2c00      	cmp	r4, #0
 801136e:	f001 83df 	beq.w	8012b30 <dwt_ioctl+0x1e90>
 8011372:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8011374:	7b9b      	ldrb	r3, [r3, #14]
 8011376:	2b01      	cmp	r3, #1
 8011378:	d015      	beq.n	80113a6 <dwt_ioctl+0x706>
 801137a:	2b03      	cmp	r3, #3
 801137c:	d11a      	bne.n	80113b4 <dwt_ioctl+0x714>
 801137e:	2216      	movs	r2, #22
 8011380:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8011384:	f7fd f921 	bl	800e5ca <dwt_read16bitoffsetreg>
 8011388:	f3c0 000d 	ubfx	r0, r0, #0, #14
 801138c:	b283      	uxth	r3, r0
 801138e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8011392:	d004      	beq.n	801139e <dwt_ioctl+0x6fe>
 8011394:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 8011398:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 801139c:	b218      	sxth	r0, r3
 801139e:	8020      	strh	r0, [r4, #0]
 80113a0:	2500      	movs	r5, #0
 80113a2:	f001 bb85 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 80113a6:	2202      	movs	r2, #2
 80113a8:	493b      	ldr	r1, [pc, #236]	; (8011498 <dwt_ioctl+0x7f8>)
 80113aa:	f7fd f90e 	bl	800e5ca <dwt_read16bitoffsetreg>
 80113ae:	f3c0 000d 	ubfx	r0, r0, #0, #14
 80113b2:	e7eb      	b.n	801138c <dwt_ioctl+0x6ec>
 80113b4:	2202      	movs	r2, #2
 80113b6:	4939      	ldr	r1, [pc, #228]	; (801149c <dwt_ioctl+0x7fc>)
 80113b8:	f7fd f907 	bl	800e5ca <dwt_read16bitoffsetreg>
 80113bc:	f3c0 000d 	ubfx	r0, r0, #0, #14
 80113c0:	e7e4      	b.n	801138c <dwt_ioctl+0x6ec>
 80113c2:	9400      	str	r4, [sp, #0]
 80113c4:	2306      	movs	r3, #6
 80113c6:	2200      	movs	r2, #0
 80113c8:	4935      	ldr	r1, [pc, #212]	; (80114a0 <dwt_ioctl+0x800>)
 80113ca:	f7fd f8de 	bl	800e58a <dwt_readfromdevice>
 80113ce:	f994 3001 	ldrsb.w	r3, [r4, #1]
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	db06      	blt.n	80113e4 <dwt_ioctl+0x744>
 80113d6:	7963      	ldrb	r3, [r4, #5]
 80113d8:	f003 0301 	and.w	r3, r3, #1
 80113dc:	7163      	strb	r3, [r4, #5]
 80113de:	2500      	movs	r5, #0
 80113e0:	f001 bb66 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 80113e4:	23ff      	movs	r3, #255	; 0xff
 80113e6:	70a3      	strb	r3, [r4, #2]
 80113e8:	70e3      	strb	r3, [r4, #3]
 80113ea:	7123      	strb	r3, [r4, #4]
 80113ec:	7163      	strb	r3, [r4, #5]
 80113ee:	e7f2      	b.n	80113d6 <dwt_ioctl+0x736>
 80113f0:	2c00      	cmp	r4, #0
 80113f2:	f001 839f 	beq.w	8012b34 <dwt_ioctl+0x1e94>
 80113f6:	2201      	movs	r2, #1
 80113f8:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 80113fc:	f7fd f924 	bl	800e648 <dwt_read8bitoffsetreg>
 8011400:	7020      	strb	r0, [r4, #0]
 8011402:	2500      	movs	r5, #0
 8011404:	f001 bb54 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011408:	2c00      	cmp	r4, #0
 801140a:	f001 8395 	beq.w	8012b38 <dwt_ioctl+0x1e98>
 801140e:	2200      	movs	r2, #0
 8011410:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 8011414:	f7fd f918 	bl	800e648 <dwt_read8bitoffsetreg>
 8011418:	7020      	strb	r0, [r4, #0]
 801141a:	2500      	movs	r5, #0
 801141c:	f001 bb48 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011420:	2c00      	cmp	r4, #0
 8011422:	f001 838b 	beq.w	8012b3c <dwt_ioctl+0x1e9c>
 8011426:	88a2      	ldrh	r2, [r4, #4]
 8011428:	6821      	ldr	r1, [r4, #0]
 801142a:	f7fe fb17 	bl	800fa5c <_dwt_otpprogword32>
 801142e:	2500      	movs	r5, #0
 8011430:	f001 bb3e 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011434:	2c00      	cmp	r4, #0
 8011436:	f001 8383 	beq.w	8012b40 <dwt_ioctl+0x1ea0>
 801143a:	6825      	ldr	r5, [r4, #0]
 801143c:	88a4      	ldrh	r4, [r4, #4]
 801143e:	4622      	mov	r2, r4
 8011440:	4629      	mov	r1, r5
 8011442:	f7fe fb0b 	bl	800fa5c <_dwt_otpprogword32>
 8011446:	4621      	mov	r1, r4
 8011448:	4630      	mov	r0, r6
 801144a:	f7fd fd65 	bl	800ef18 <_dwt_otpread>
 801144e:	1a2d      	subs	r5, r5, r0
 8011450:	bf18      	it	ne
 8011452:	f04f 35ff 	movne.w	r5, #4294967295
 8011456:	f001 bb2b 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 801145a:	2a02      	cmp	r2, #2
 801145c:	d00f      	beq.n	801147e <dwt_ioctl+0x7de>
 801145e:	4c11      	ldr	r4, [pc, #68]	; (80114a4 <dwt_ioctl+0x804>)
 8011460:	2300      	movs	r3, #0
 8011462:	461a      	mov	r2, r3
 8011464:	4621      	mov	r1, r4
 8011466:	4630      	mov	r0, r6
 8011468:	f7fd ff5c 	bl	800f324 <dwt_write8bitoffsetreg>
 801146c:	2302      	movs	r3, #2
 801146e:	2200      	movs	r2, #0
 8011470:	4621      	mov	r1, r4
 8011472:	4630      	mov	r0, r6
 8011474:	f7fd ff56 	bl	800f324 <dwt_write8bitoffsetreg>
 8011478:	2500      	movs	r5, #0
 801147a:	f001 bb19 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 801147e:	2300      	movs	r3, #0
 8011480:	9300      	str	r3, [sp, #0]
 8011482:	23fe      	movs	r3, #254	; 0xfe
 8011484:	2201      	movs	r2, #1
 8011486:	4902      	ldr	r1, [pc, #8]	; (8011490 <dwt_ioctl+0x7f0>)
 8011488:	f7fe fbde 	bl	800fc48 <dwt_modify8bitoffsetreg>
 801148c:	e7e7      	b.n	801145e <dwt_ioctl+0x7be>
 801148e:	bf00      	nop
 8011490:	00110008 	.word	0x00110008
 8011494:	0007001c 	.word	0x0007001c
 8011498:	00180014 	.word	0x00180014
 801149c:	000c001c 	.word	0x000c001c
 80114a0:	000c0018 	.word	0x000c0018
 80114a4:	000a0004 	.word	0x000a0004
 80114a8:	2c00      	cmp	r4, #0
 80114aa:	f001 834b 	beq.w	8012b44 <dwt_ioctl+0x1ea4>
 80114ae:	8824      	ldrh	r4, [r4, #0]
 80114b0:	b2e2      	uxtb	r2, r4
 80114b2:	f44f 7181 	mov.w	r1, #258	; 0x102
 80114b6:	f7fd ffe1 	bl	800f47c <ull_aon_write>
 80114ba:	0a22      	lsrs	r2, r4, #8
 80114bc:	f240 1103 	movw	r1, #259	; 0x103
 80114c0:	4630      	mov	r0, r6
 80114c2:	f7fd ffdb 	bl	800f47c <ull_aon_write>
 80114c6:	2500      	movs	r5, #0
 80114c8:	f001 baf2 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 80114cc:	2c00      	cmp	r4, #0
 80114ce:	f001 833b 	beq.w	8012b48 <dwt_ioctl+0x1ea8>
 80114d2:	f8df 8370 	ldr.w	r8, [pc, #880]	; 8011844 <dwt_ioctl+0xba4>
 80114d6:	2310      	movs	r3, #16
 80114d8:	9300      	str	r3, [sp, #0]
 80114da:	23ff      	movs	r3, #255	; 0xff
 80114dc:	2200      	movs	r2, #0
 80114de:	4641      	mov	r1, r8
 80114e0:	f7fe fbb2 	bl	800fc48 <dwt_modify8bitoffsetreg>
 80114e4:	f44f 7182 	mov.w	r1, #260	; 0x104
 80114e8:	4630      	mov	r0, r6
 80114ea:	f7fd ffa7 	bl	800f43c <ull_aon_read>
 80114ee:	f000 05e0 	and.w	r5, r0, #224	; 0xe0
 80114f2:	462a      	mov	r2, r5
 80114f4:	f44f 7182 	mov.w	r1, #260	; 0x104
 80114f8:	4630      	mov	r0, r6
 80114fa:	f7fd ffbf 	bl	800f47c <ull_aon_write>
 80114fe:	f045 0204 	orr.w	r2, r5, #4
 8011502:	f44f 7182 	mov.w	r1, #260	; 0x104
 8011506:	4630      	mov	r0, r6
 8011508:	f7fd ffb8 	bl	800f47c <ull_aon_write>
 801150c:	2002      	movs	r0, #2
 801150e:	f7ef f803 	bl	8000518 <deca_sleep>
 8011512:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8011516:	4630      	mov	r0, r6
 8011518:	f7fd ff90 	bl	800f43c <ull_aon_read>
 801151c:	4607      	mov	r7, r0
 801151e:	f240 110f 	movw	r1, #271	; 0x10f
 8011522:	4630      	mov	r0, r6
 8011524:	f7fd ff8a 	bl	800f43c <ull_aon_read>
 8011528:	4681      	mov	r9, r0
 801152a:	462a      	mov	r2, r5
 801152c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8011530:	4630      	mov	r0, r6
 8011532:	f7fd ffa3 	bl	800f47c <ull_aon_write>
 8011536:	2500      	movs	r5, #0
 8011538:	9500      	str	r5, [sp, #0]
 801153a:	23ef      	movs	r3, #239	; 0xef
 801153c:	462a      	mov	r2, r5
 801153e:	4641      	mov	r1, r8
 8011540:	4630      	mov	r0, r6
 8011542:	f7fe fb81 	bl	800fc48 <dwt_modify8bitoffsetreg>
 8011546:	ea47 2709 	orr.w	r7, r7, r9, lsl #8
 801154a:	8027      	strh	r7, [r4, #0]
 801154c:	f001 bab0 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011550:	2c00      	cmp	r4, #0
 8011552:	f001 82fb 	beq.w	8012b4c <dwt_ioctl+0x1eac>
 8011556:	78a2      	ldrb	r2, [r4, #2]
 8011558:	8821      	ldrh	r1, [r4, #0]
 801155a:	f7fd ffb7 	bl	800f4cc <ull_configuresleep>
 801155e:	2500      	movs	r5, #0
 8011560:	f001 baa6 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011564:	2c00      	cmp	r4, #0
 8011566:	f001 82f3 	beq.w	8012b50 <dwt_ioctl+0x1eb0>
 801156a:	6824      	ldr	r4, [r4, #0]
 801156c:	f7fd ff32 	bl	800f3d4 <ull_clearaonconfig>
 8011570:	2001      	movs	r0, #1
 8011572:	f7ee ffd1 	bl	8000518 <deca_sleep>
 8011576:	2303      	movs	r3, #3
 8011578:	9300      	str	r3, [sp, #0]
 801157a:	23ff      	movs	r3, #255	; 0xff
 801157c:	2200      	movs	r2, #0
 801157e:	49af      	ldr	r1, [pc, #700]	; (801183c <dwt_ioctl+0xb9c>)
 8011580:	4630      	mov	r0, r6
 8011582:	f7fe fb61 	bl	800fc48 <dwt_modify8bitoffsetreg>
 8011586:	b97c      	cbnz	r4, 80115a8 <dwt_ioctl+0x908>
 8011588:	4630      	mov	r0, r6
 801158a:	f7ff fb61 	bl	8010c50 <ull_softreset_no_sema_fcmd>
 801158e:	2001      	movs	r0, #1
 8011590:	f7ee ffc2 	bl	8000518 <deca_sleep>
 8011594:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8011596:	2500      	movs	r5, #0
 8011598:	739d      	strb	r5, [r3, #14]
 801159a:	2202      	movs	r2, #2
 801159c:	821a      	strh	r2, [r3, #16]
 801159e:	751d      	strb	r5, [r3, #20]
 80115a0:	755d      	strb	r5, [r3, #21]
 80115a2:	73dd      	strb	r5, [r3, #15]
 80115a4:	f001 ba84 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 80115a8:	4630      	mov	r0, r6
 80115aa:	f7ff fb65 	bl	8010c78 <ull_softreset_fcmd>
 80115ae:	e7ee      	b.n	801158e <dwt_ioctl+0x8ee>
 80115b0:	2c00      	cmp	r4, #0
 80115b2:	f001 82cf 	beq.w	8012b54 <dwt_ioctl+0x1eb4>
 80115b6:	7823      	ldrb	r3, [r4, #0]
 80115b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80115bc:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80115be:	7353      	strb	r3, [r2, #13]
 80115c0:	2200      	movs	r2, #0
 80115c2:	499f      	ldr	r1, [pc, #636]	; (8011840 <dwt_ioctl+0xba0>)
 80115c4:	f7fd feae 	bl	800f324 <dwt_write8bitoffsetreg>
 80115c8:	2500      	movs	r5, #0
 80115ca:	f001 ba71 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 80115ce:	2c00      	cmp	r4, #0
 80115d0:	f001 82c2 	beq.w	8012b58 <dwt_ioctl+0x1eb8>
 80115d4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80115d6:	7b5b      	ldrb	r3, [r3, #13]
 80115d8:	7023      	strb	r3, [r4, #0]
 80115da:	2500      	movs	r5, #0
 80115dc:	f001 ba68 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 80115e0:	2101      	movs	r1, #1
 80115e2:	f7fe f9f5 	bl	800f9d0 <ull_enable_rf_tx>
 80115e6:	4630      	mov	r0, r6
 80115e8:	f7fe fa26 	bl	800fa38 <ull_enable_rftx_blocks>
 80115ec:	2101      	movs	r1, #1
 80115ee:	4630      	mov	r0, r6
 80115f0:	f7fd fc68 	bl	800eec4 <ull_force_clocks>
 80115f4:	220f      	movs	r2, #15
 80115f6:	2101      	movs	r1, #1
 80115f8:	4630      	mov	r0, r6
 80115fa:	f7fd fe39 	bl	800f270 <ull_repeated_cw>
 80115fe:	2500      	movs	r5, #0
 8011600:	f001 ba56 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011604:	2c00      	cmp	r4, #0
 8011606:	f001 82a9 	beq.w	8012b5c <dwt_ioctl+0x1ebc>
 801160a:	6862      	ldr	r2, [r4, #4]
 801160c:	6821      	ldr	r1, [r4, #0]
 801160e:	f7fd fe2f 	bl	800f270 <ull_repeated_cw>
 8011612:	2500      	movs	r5, #0
 8011614:	f001 ba4c 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011618:	2c00      	cmp	r4, #0
 801161a:	f001 82a1 	beq.w	8012b60 <dwt_ioctl+0x1ec0>
 801161e:	4d89      	ldr	r5, [pc, #548]	; (8011844 <dwt_ioctl+0xba4>)
 8011620:	2200      	movs	r2, #0
 8011622:	4629      	mov	r1, r5
 8011624:	f7fd f810 	bl	800e648 <dwt_read8bitoffsetreg>
 8011628:	4680      	mov	r8, r0
 801162a:	2302      	movs	r3, #2
 801162c:	9300      	str	r3, [sp, #0]
 801162e:	23ff      	movs	r3, #255	; 0xff
 8011630:	2200      	movs	r2, #0
 8011632:	4629      	mov	r1, r5
 8011634:	4630      	mov	r0, r6
 8011636:	f7fe fb07 	bl	800fc48 <dwt_modify8bitoffsetreg>
 801163a:	2304      	movs	r3, #4
 801163c:	2200      	movs	r2, #0
 801163e:	4982      	ldr	r1, [pc, #520]	; (8011848 <dwt_ioctl+0xba8>)
 8011640:	4630      	mov	r0, r6
 8011642:	f7fd fe6f 	bl	800f324 <dwt_write8bitoffsetreg>
 8011646:	2301      	movs	r3, #1
 8011648:	2200      	movs	r2, #0
 801164a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801164e:	4630      	mov	r0, r6
 8011650:	f7fd fe68 	bl	800f324 <dwt_write8bitoffsetreg>
 8011654:	4f7d      	ldr	r7, [pc, #500]	; (801184c <dwt_ioctl+0xbac>)
 8011656:	2500      	movs	r5, #0
 8011658:	462a      	mov	r2, r5
 801165a:	4639      	mov	r1, r7
 801165c:	4630      	mov	r0, r6
 801165e:	f7fc fff3 	bl	800e648 <dwt_read8bitoffsetreg>
 8011662:	f010 0f01 	tst.w	r0, #1
 8011666:	d0f7      	beq.n	8011658 <dwt_ioctl+0x9b8>
 8011668:	2200      	movs	r2, #0
 801166a:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 801166e:	4630      	mov	r0, r6
 8011670:	f7fc ffab 	bl	800e5ca <dwt_read16bitoffsetreg>
 8011674:	4605      	mov	r5, r0
 8011676:	2300      	movs	r3, #0
 8011678:	461a      	mov	r2, r3
 801167a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801167e:	4630      	mov	r0, r6
 8011680:	f7fd fe50 	bl	800f324 <dwt_write8bitoffsetreg>
 8011684:	2300      	movs	r3, #0
 8011686:	461a      	mov	r2, r3
 8011688:	496f      	ldr	r1, [pc, #444]	; (8011848 <dwt_ioctl+0xba8>)
 801168a:	4630      	mov	r0, r6
 801168c:	f7fd fe4a 	bl	800f324 <dwt_write8bitoffsetreg>
 8011690:	4643      	mov	r3, r8
 8011692:	2200      	movs	r2, #0
 8011694:	496b      	ldr	r1, [pc, #428]	; (8011844 <dwt_ioctl+0xba4>)
 8011696:	4630      	mov	r0, r6
 8011698:	f7fd fe44 	bl	800f324 <dwt_write8bitoffsetreg>
 801169c:	8025      	strh	r5, [r4, #0]
 801169e:	2500      	movs	r5, #0
 80116a0:	f001 ba06 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 80116a4:	2c00      	cmp	r4, #0
 80116a6:	f001 825d 	beq.w	8012b64 <dwt_ioctl+0x1ec4>
 80116aa:	7923      	ldrb	r3, [r4, #4]
 80116ac:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80116ae:	7a92      	ldrb	r2, [r2, #10]
 80116b0:	1a9b      	subs	r3, r3, r2
 80116b2:	ee07 3a90 	vmov	s15, r3
 80116b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80116ba:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8011850 <dwt_ioctl+0xbb0>
 80116be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80116c2:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 80116c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80116ca:	edc4 7a00 	vstr	s15, [r4]
 80116ce:	2500      	movs	r5, #0
 80116d0:	f001 b9ee 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 80116d4:	2c00      	cmp	r4, #0
 80116d6:	f001 8247 	beq.w	8012b68 <dwt_ioctl+0x1ec8>
 80116da:	7923      	ldrb	r3, [r4, #4]
 80116dc:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80116de:	7a52      	ldrb	r2, [r2, #9]
 80116e0:	1a9b      	subs	r3, r3, r2
 80116e2:	ee07 3a90 	vmov	s15, r3
 80116e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80116ea:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8011854 <dwt_ioctl+0xbb4>
 80116ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80116f2:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80116f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80116fa:	eddf 6a57 	vldr	s13, [pc, #348]	; 8011858 <dwt_ioctl+0xbb8>
 80116fe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8011702:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8011706:	ee77 7a27 	vadd.f32	s15, s14, s15
 801170a:	edc4 7a00 	vstr	s15, [r4]
 801170e:	2500      	movs	r5, #0
 8011710:	f001 b9ce 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011714:	2c00      	cmp	r4, #0
 8011716:	f001 8229 	beq.w	8012b6c <dwt_ioctl+0x1ecc>
 801171a:	6824      	ldr	r4, [r4, #0]
 801171c:	2101      	movs	r1, #1
 801171e:	f7fe f957 	bl	800f9d0 <ull_enable_rf_tx>
 8011722:	4630      	mov	r0, r6
 8011724:	f7fe f988 	bl	800fa38 <ull_enable_rftx_blocks>
 8011728:	2101      	movs	r1, #1
 801172a:	4630      	mov	r0, r6
 801172c:	f7fd fbca 	bl	800eec4 <ull_force_clocks>
 8011730:	4621      	mov	r1, r4
 8011732:	4630      	mov	r0, r6
 8011734:	f7fe fca0 	bl	8010078 <ull_repeated_frames>
 8011738:	2500      	movs	r5, #0
 801173a:	f001 b9b9 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 801173e:	2500      	movs	r5, #0
 8011740:	9500      	str	r5, [sp, #0]
 8011742:	23ef      	movs	r3, #239	; 0xef
 8011744:	462a      	mov	r2, r5
 8011746:	4945      	ldr	r1, [pc, #276]	; (801185c <dwt_ioctl+0xbbc>)
 8011748:	f7fe fa7e 	bl	800fc48 <dwt_modify8bitoffsetreg>
 801174c:	2105      	movs	r1, #5
 801174e:	4630      	mov	r0, r6
 8011750:	f7fd fbb8 	bl	800eec4 <ull_force_clocks>
 8011754:	2101      	movs	r1, #1
 8011756:	4630      	mov	r0, r6
 8011758:	f7fd fd6c 	bl	800f234 <ull_disable_rf_tx>
 801175c:	4630      	mov	r0, r6
 801175e:	f7fd fd5f 	bl	800f220 <ull_disable_rftx_blocks>
 8011762:	f001 b9a5 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011766:	2500      	movs	r5, #0
 8011768:	9500      	str	r5, [sp, #0]
 801176a:	23ef      	movs	r3, #239	; 0xef
 801176c:	462a      	mov	r2, r5
 801176e:	493b      	ldr	r1, [pc, #236]	; (801185c <dwt_ioctl+0xbbc>)
 8011770:	f7fe fa6a 	bl	800fc48 <dwt_modify8bitoffsetreg>
 8011774:	f001 b99c 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011778:	2c00      	cmp	r4, #0
 801177a:	f001 81f9 	beq.w	8012b70 <dwt_ioctl+0x1ed0>
 801177e:	6821      	ldr	r1, [r4, #0]
 8011780:	f7fe fc7a 	bl	8010078 <ull_repeated_frames>
 8011784:	2500      	movs	r5, #0
 8011786:	f001 b993 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 801178a:	2200      	movs	r2, #0
 801178c:	4934      	ldr	r1, [pc, #208]	; (8011860 <dwt_ioctl+0xbc0>)
 801178e:	f7fc ff1c 	bl	800e5ca <dwt_read16bitoffsetreg>
 8011792:	f3c0 050b 	ubfx	r5, r0, #0, #12
 8011796:	f410 6f00 	tst.w	r0, #2048	; 0x800
 801179a:	bf18      	it	ne
 801179c:	f445 4570 	orrne.w	r5, r5, #61440	; 0xf000
 80117a0:	b22d      	sxth	r5, r5
 80117a2:	8025      	strh	r5, [r4, #0]
 80117a4:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80117a6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80117aa:	1aed      	subs	r5, r5, r3
 80117ac:	f001 b980 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 80117b0:	2c00      	cmp	r4, #0
 80117b2:	f001 81df 	beq.w	8012b74 <dwt_ioctl+0x1ed4>
 80117b6:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80117ba:	7a23      	ldrb	r3, [r4, #8]
 80117bc:	f899 2013 	ldrb.w	r2, [r9, #19]
 80117c0:	2aff      	cmp	r2, #255	; 0xff
 80117c2:	f000 80fe 	beq.w	80119c2 <dwt_ioctl+0xd22>
 80117c6:	bb93      	cbnz	r3, 801182e <dwt_ioctl+0xb8e>
 80117c8:	f8d9 1000 	ldr.w	r1, [r9]
 80117cc:	f7fd feb8 	bl	800f540 <ull_update_nonce_GCM>
 80117d0:	f899 300c 	ldrb.w	r3, [r9, #12]
 80117d4:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 80117d8:	18d1      	adds	r1, r2, r3
 80117da:	f899 2012 	ldrb.w	r2, [r9, #18]
 80117de:	2a00      	cmp	r2, #0
 80117e0:	d140      	bne.n	8011864 <dwt_ioctl+0xbc4>
 80117e2:	f899 0010 	ldrb.w	r0, [r9, #16]
 80117e6:	2800      	cmp	r0, #0
 80117e8:	bf0b      	itete	eq
 80117ea:	227f      	moveq	r2, #127	; 0x7f
 80117ec:	f44f 6280 	movne.w	r2, #1024	; 0x400
 80117f0:	f44f 15b0 	moveq.w	r5, #1441792	; 0x160000
 80117f4:	f44f 15a0 	movne.w	r5, #1310720	; 0x140000
 80117f8:	f899 0013 	ldrb.w	r0, [r9, #19]
 80117fc:	1a12      	subs	r2, r2, r0
 80117fe:	3a02      	subs	r2, #2
 8011800:	4291      	cmp	r1, r2
 8011802:	f200 80e7 	bhi.w	80119d4 <dwt_ioctl+0xd34>
 8011806:	f8d9 2004 	ldr.w	r2, [r9, #4]
 801180a:	9200      	str	r2, [sp, #0]
 801180c:	2200      	movs	r2, #0
 801180e:	4629      	mov	r1, r5
 8011810:	4630      	mov	r0, r6
 8011812:	f7fd fb2d 	bl	800ee70 <dwt_writetodevice>
 8011816:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 801181a:	f899 200c 	ldrb.w	r2, [r9, #12]
 801181e:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8011822:	9100      	str	r1, [sp, #0]
 8011824:	4629      	mov	r1, r5
 8011826:	4630      	mov	r0, r6
 8011828:	f7fd fb22 	bl	800ee70 <dwt_writetodevice>
 801182c:	e02b      	b.n	8011886 <dwt_ioctl+0xbe6>
 801182e:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 8011832:	f8d9 1000 	ldr.w	r1, [r9]
 8011836:	f7fd fe91 	bl	800f55c <ull_update_nonce_CCM>
 801183a:	e7c9      	b.n	80117d0 <dwt_ioctl+0xb30>
 801183c:	00110004 	.word	0x00110004
 8011840:	00090014 	.word	0x00090014
 8011844:	00070048 	.word	0x00070048
 8011848:	00070034 	.word	0x00070034
 801184c:	00080004 	.word	0x00080004
 8011850:	3f866666 	.word	0x3f866666
 8011854:	3ecccccd 	.word	0x3ecccccd
 8011858:	437f0000 	.word	0x437f0000
 801185c:	000f0028 	.word	0x000f0028
 8011860:	00020008 	.word	0x00020008
 8011864:	2a01      	cmp	r2, #1
 8011866:	f040 80af 	bne.w	80119c8 <dwt_ioctl+0xd28>
 801186a:	f899 3011 	ldrb.w	r3, [r9, #17]
 801186e:	2b00      	cmp	r3, #0
 8011870:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8011874:	bf08      	it	eq
 8011876:	237f      	moveq	r3, #127	; 0x7f
 8011878:	f899 2013 	ldrb.w	r2, [r9, #19]
 801187c:	1a9b      	subs	r3, r3, r2
 801187e:	3b02      	subs	r3, #2
 8011880:	4299      	cmp	r1, r3
 8011882:	f200 80a4 	bhi.w	80119ce <dwt_ioctl+0xd2e>
 8011886:	f899 2010 	ldrb.w	r2, [r9, #16]
 801188a:	1e53      	subs	r3, r2, #1
 801188c:	b2db      	uxtb	r3, r3
 801188e:	2b01      	cmp	r3, #1
 8011890:	d940      	bls.n	8011914 <dwt_ioctl+0xc74>
 8011892:	f899 3011 	ldrb.w	r3, [r9, #17]
 8011896:	1e59      	subs	r1, r3, #1
 8011898:	b2c9      	uxtb	r1, r1
 801189a:	2901      	cmp	r1, #1
 801189c:	d947      	bls.n	801192e <dwt_ioctl+0xc8e>
 801189e:	2b04      	cmp	r3, #4
 80118a0:	d04c      	beq.n	801193c <dwt_ioctl+0xc9c>
 80118a2:	ea42 3343 	orr.w	r3, r2, r3, lsl #13
 80118a6:	2200      	movs	r2, #0
 80118a8:	49ba      	ldr	r1, [pc, #744]	; (8011b94 <dwt_ioctl+0xef4>)
 80118aa:	4630      	mov	r0, r6
 80118ac:	f7fd fb56 	bl	800ef5c <dwt_write32bitoffsetreg>
 80118b0:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 80118b4:	4ab8      	ldr	r2, [pc, #736]	; (8011b98 <dwt_ioctl+0xef8>)
 80118b6:	ea02 12c3 	and.w	r2, r2, r3, lsl #7
 80118ba:	f899 300c 	ldrb.w	r3, [r9, #12]
 80118be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80118c2:	4313      	orrs	r3, r2
 80118c4:	2200      	movs	r2, #0
 80118c6:	49b5      	ldr	r1, [pc, #724]	; (8011b9c <dwt_ioctl+0xefc>)
 80118c8:	4630      	mov	r0, r6
 80118ca:	f7fd fb47 	bl	800ef5c <dwt_write32bitoffsetreg>
 80118ce:	2301      	movs	r3, #1
 80118d0:	2200      	movs	r2, #0
 80118d2:	49b3      	ldr	r1, [pc, #716]	; (8011ba0 <dwt_ioctl+0xf00>)
 80118d4:	4630      	mov	r0, r6
 80118d6:	f7fd fd25 	bl	800f324 <dwt_write8bitoffsetreg>
 80118da:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 8011ba4 <dwt_ioctl+0xf04>
 80118de:	2700      	movs	r7, #0
 80118e0:	463a      	mov	r2, r7
 80118e2:	4641      	mov	r1, r8
 80118e4:	4630      	mov	r0, r6
 80118e6:	f7fc feaf 	bl	800e648 <dwt_read8bitoffsetreg>
 80118ea:	f010 0f05 	tst.w	r0, #5
 80118ee:	d0f7      	beq.n	80118e0 <dwt_ioctl+0xc40>
 80118f0:	4605      	mov	r5, r0
 80118f2:	4603      	mov	r3, r0
 80118f4:	2200      	movs	r2, #0
 80118f6:	49ab      	ldr	r1, [pc, #684]	; (8011ba4 <dwt_ioctl+0xf04>)
 80118f8:	4630      	mov	r0, r6
 80118fa:	f7fd fd13 	bl	800f324 <dwt_write8bitoffsetreg>
 80118fe:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 8011902:	f025 0330 	bic.w	r3, r5, #48	; 0x30
 8011906:	2b01      	cmp	r3, #1
 8011908:	d025      	beq.n	8011956 <dwt_ioctl+0xcb6>
 801190a:	b26b      	sxtb	r3, r5
 801190c:	7023      	strb	r3, [r4, #0]
 801190e:	2500      	movs	r5, #0
 8011910:	f001 b8ce 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011914:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8011916:	7b9b      	ldrb	r3, [r3, #14]
 8011918:	2b03      	cmp	r3, #3
 801191a:	f001 81af 	beq.w	8012c7c <dwt_ioctl+0x1fdc>
 801191e:	f899 3011 	ldrb.w	r3, [r9, #17]
 8011922:	1e5a      	subs	r2, r3, #1
 8011924:	b2d2      	uxtb	r2, r2
 8011926:	2a01      	cmp	r2, #1
 8011928:	d912      	bls.n	8011950 <dwt_ioctl+0xcb0>
 801192a:	2201      	movs	r2, #1
 801192c:	e7b7      	b.n	801189e <dwt_ioctl+0xbfe>
 801192e:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8011930:	7b9b      	ldrb	r3, [r3, #14]
 8011932:	2b03      	cmp	r3, #3
 8011934:	bf0c      	ite	eq
 8011936:	2302      	moveq	r3, #2
 8011938:	2301      	movne	r3, #1
 801193a:	e7b2      	b.n	80118a2 <dwt_ioctl+0xc02>
 801193c:	f8b9 100e 	ldrh.w	r1, [r9, #14]
 8011940:	2910      	cmp	r1, #16
 8011942:	d9ae      	bls.n	80118a2 <dwt_ioctl+0xc02>
 8011944:	f06f 0303 	mvn.w	r3, #3
 8011948:	e7e0      	b.n	801190c <dwt_ioctl+0xc6c>
 801194a:	2202      	movs	r2, #2
 801194c:	4613      	mov	r3, r2
 801194e:	e7a8      	b.n	80118a2 <dwt_ioctl+0xc02>
 8011950:	2201      	movs	r2, #1
 8011952:	4613      	mov	r3, r2
 8011954:	e7a5      	b.n	80118a2 <dwt_ioctl+0xc02>
 8011956:	f899 3012 	ldrb.w	r3, [r9, #18]
 801195a:	2b01      	cmp	r3, #1
 801195c:	d1d5      	bne.n	801190a <dwt_ioctl+0xc6a>
 801195e:	f899 2011 	ldrb.w	r2, [r9, #17]
 8011962:	1e53      	subs	r3, r2, #1
 8011964:	b2db      	uxtb	r3, r3
 8011966:	2b01      	cmp	r3, #1
 8011968:	d91b      	bls.n	80119a2 <dwt_ioctl+0xd02>
 801196a:	2a03      	cmp	r2, #3
 801196c:	bf0c      	ite	eq
 801196e:	f44f 17a0 	moveq.w	r7, #1310720	; 0x140000
 8011972:	f44f 17b0 	movne.w	r7, #1441792	; 0x160000
 8011976:	f8d9 2004 	ldr.w	r2, [r9, #4]
 801197a:	b112      	cbz	r2, 8011982 <dwt_ioctl+0xce2>
 801197c:	f899 300c 	ldrb.w	r3, [r9, #12]
 8011980:	b9c3      	cbnz	r3, 80119b4 <dwt_ioctl+0xd14>
 8011982:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8011986:	2900      	cmp	r1, #0
 8011988:	d0bf      	beq.n	801190a <dwt_ioctl+0xc6a>
 801198a:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 801198e:	2b00      	cmp	r3, #0
 8011990:	d0bb      	beq.n	801190a <dwt_ioctl+0xc6a>
 8011992:	f899 200c 	ldrb.w	r2, [r9, #12]
 8011996:	9100      	str	r1, [sp, #0]
 8011998:	4639      	mov	r1, r7
 801199a:	4630      	mov	r0, r6
 801199c:	f7fc fdf5 	bl	800e58a <dwt_readfromdevice>
 80119a0:	e7b3      	b.n	801190a <dwt_ioctl+0xc6a>
 80119a2:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80119a4:	7b9b      	ldrb	r3, [r3, #14]
 80119a6:	2b03      	cmp	r3, #3
 80119a8:	bf0c      	ite	eq
 80119aa:	f44f 1798 	moveq.w	r7, #1245184	; 0x130000
 80119ae:	f44f 1790 	movne.w	r7, #1179648	; 0x120000
 80119b2:	e7e0      	b.n	8011976 <dwt_ioctl+0xcd6>
 80119b4:	9200      	str	r2, [sp, #0]
 80119b6:	2200      	movs	r2, #0
 80119b8:	4639      	mov	r1, r7
 80119ba:	4630      	mov	r0, r6
 80119bc:	f7fc fde5 	bl	800e58a <dwt_readfromdevice>
 80119c0:	e7df      	b.n	8011982 <dwt_ioctl+0xce2>
 80119c2:	f06f 0302 	mvn.w	r3, #2
 80119c6:	e7a1      	b.n	801190c <dwt_ioctl+0xc6c>
 80119c8:	f06f 0301 	mvn.w	r3, #1
 80119cc:	e79e      	b.n	801190c <dwt_ioctl+0xc6c>
 80119ce:	f04f 33ff 	mov.w	r3, #4294967295
 80119d2:	e79b      	b.n	801190c <dwt_ioctl+0xc6c>
 80119d4:	f04f 33ff 	mov.w	r3, #4294967295
 80119d8:	e798      	b.n	801190c <dwt_ioctl+0xc6c>
 80119da:	7a23      	ldrb	r3, [r4, #8]
 80119dc:	79e1      	ldrb	r1, [r4, #7]
 80119de:	79a2      	ldrb	r2, [r4, #6]
 80119e0:	00d2      	lsls	r2, r2, #3
 80119e2:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80119e6:	4313      	orrs	r3, r2
 80119e8:	7962      	ldrb	r2, [r4, #5]
 80119ea:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80119ee:	7922      	ldrb	r2, [r4, #4]
 80119f0:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80119f4:	78e2      	ldrb	r2, [r4, #3]
 80119f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80119fa:	78a2      	ldrb	r2, [r4, #2]
 80119fc:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 8011a00:	7862      	ldrb	r2, [r4, #1]
 8011a02:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8011a06:	7822      	ldrb	r2, [r4, #0]
 8011a08:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8011a0c:	b29b      	uxth	r3, r3
 8011a0e:	2200      	movs	r2, #0
 8011a10:	4965      	ldr	r1, [pc, #404]	; (8011ba8 <dwt_ioctl+0xf08>)
 8011a12:	f7fd fa38 	bl	800ee86 <dwt_write16bitoffsetreg>
 8011a16:	2500      	movs	r5, #0
 8011a18:	f001 b84a 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011a1c:	2c00      	cmp	r4, #0
 8011a1e:	f001 80ab 	beq.w	8012b78 <dwt_ioctl+0x1ed8>
 8011a22:	7863      	ldrb	r3, [r4, #1]
 8011a24:	b133      	cbz	r3, 8011a34 <dwt_ioctl+0xd94>
 8011a26:	085b      	lsrs	r3, r3, #1
 8011a28:	3b01      	subs	r3, #1
 8011a2a:	b2db      	uxtb	r3, r3
 8011a2c:	7023      	strb	r3, [r4, #0]
 8011a2e:	2500      	movs	r5, #0
 8011a30:	f001 b83e 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011a34:	2300      	movs	r3, #0
 8011a36:	e7f9      	b.n	8011a2c <dwt_ioctl+0xd8c>
 8011a38:	2200      	movs	r2, #0
 8011a3a:	495c      	ldr	r1, [pc, #368]	; (8011bac <dwt_ioctl+0xf0c>)
 8011a3c:	f7fc fdaf 	bl	800e59e <dwt_read32bitoffsetreg>
 8011a40:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8011a44:	8023      	strh	r3, [r4, #0]
 8011a46:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8011a4a:	8060      	strh	r0, [r4, #2]
 8011a4c:	2200      	movs	r2, #0
 8011a4e:	4958      	ldr	r1, [pc, #352]	; (8011bb0 <dwt_ioctl+0xf10>)
 8011a50:	4630      	mov	r0, r6
 8011a52:	f7fc fda4 	bl	800e59e <dwt_read32bitoffsetreg>
 8011a56:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8011a5a:	80a3      	strh	r3, [r4, #4]
 8011a5c:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8011a60:	80e0      	strh	r0, [r4, #6]
 8011a62:	2200      	movs	r2, #0
 8011a64:	4953      	ldr	r1, [pc, #332]	; (8011bb4 <dwt_ioctl+0xf14>)
 8011a66:	4630      	mov	r0, r6
 8011a68:	f7fc fd99 	bl	800e59e <dwt_read32bitoffsetreg>
 8011a6c:	7220      	strb	r0, [r4, #8]
 8011a6e:	0c00      	lsrs	r0, r0, #16
 8011a70:	7260      	strb	r0, [r4, #9]
 8011a72:	2200      	movs	r2, #0
 8011a74:	4950      	ldr	r1, [pc, #320]	; (8011bb8 <dwt_ioctl+0xf18>)
 8011a76:	4630      	mov	r0, r6
 8011a78:	f7fc fd91 	bl	800e59e <dwt_read32bitoffsetreg>
 8011a7c:	f3c0 430b 	ubfx	r3, r0, #16, #12
 8011a80:	81a3      	strh	r3, [r4, #12]
 8011a82:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8011a86:	8160      	strh	r0, [r4, #10]
 8011a88:	2200      	movs	r2, #0
 8011a8a:	494c      	ldr	r1, [pc, #304]	; (8011bbc <dwt_ioctl+0xf1c>)
 8011a8c:	4630      	mov	r0, r6
 8011a8e:	f7fc fd86 	bl	800e59e <dwt_read32bitoffsetreg>
 8011a92:	f3c0 430b 	ubfx	r3, r0, #16, #12
 8011a96:	f8a4 300f 	strh.w	r3, [r4, #15]
 8011a9a:	73a0      	strb	r0, [r4, #14]
 8011a9c:	2200      	movs	r2, #0
 8011a9e:	4948      	ldr	r1, [pc, #288]	; (8011bc0 <dwt_ioctl+0xf20>)
 8011aa0:	4630      	mov	r0, r6
 8011aa2:	f7fc fd7c 	bl	800e59e <dwt_read32bitoffsetreg>
 8011aa6:	7460      	strb	r0, [r4, #17]
 8011aa8:	0c00      	lsrs	r0, r0, #16
 8011aaa:	74a0      	strb	r0, [r4, #18]
 8011aac:	2200      	movs	r2, #0
 8011aae:	4945      	ldr	r1, [pc, #276]	; (8011bc4 <dwt_ioctl+0xf24>)
 8011ab0:	4630      	mov	r0, r6
 8011ab2:	f7fc fd74 	bl	800e59e <dwt_read32bitoffsetreg>
 8011ab6:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8011aba:	f8a4 3013 	strh.w	r3, [r4, #19]
 8011abe:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8011ac2:	f8a4 0015 	strh.w	r0, [r4, #21]
 8011ac6:	2200      	movs	r2, #0
 8011ac8:	493f      	ldr	r1, [pc, #252]	; (8011bc8 <dwt_ioctl+0xf28>)
 8011aca:	4630      	mov	r0, r6
 8011acc:	f7fc fdbc 	bl	800e648 <dwt_read8bitoffsetreg>
 8011ad0:	75e0      	strb	r0, [r4, #23]
 8011ad2:	2500      	movs	r5, #0
 8011ad4:	f000 bfec 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011ad8:	4611      	mov	r1, r2
 8011ada:	f7fd fc9b 	bl	800f414 <ull_configeventcounters>
 8011ade:	2500      	movs	r5, #0
 8011ae0:	f000 bfe6 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011ae4:	2c00      	cmp	r4, #0
 8011ae6:	f001 8049 	beq.w	8012b7c <dwt_ioctl+0x1edc>
 8011aea:	8823      	ldrh	r3, [r4, #0]
 8011aec:	2200      	movs	r2, #0
 8011aee:	4937      	ldr	r1, [pc, #220]	; (8011bcc <dwt_ioctl+0xf2c>)
 8011af0:	f7fd f9c9 	bl	800ee86 <dwt_write16bitoffsetreg>
 8011af4:	2500      	movs	r5, #0
 8011af6:	f000 bfdb 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011afa:	2c00      	cmp	r4, #0
 8011afc:	f001 8040 	beq.w	8012b80 <dwt_ioctl+0x1ee0>
 8011b00:	6825      	ldr	r5, [r4, #0]
 8011b02:	b935      	cbnz	r5, 8011b12 <dwt_ioctl+0xe72>
 8011b04:	2300      	movs	r3, #0
 8011b06:	461a      	mov	r2, r3
 8011b08:	4931      	ldr	r1, [pc, #196]	; (8011bd0 <dwt_ioctl+0xf30>)
 8011b0a:	f7fd f9bc 	bl	800ee86 <dwt_write16bitoffsetreg>
 8011b0e:	f000 bfcf 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011b12:	7962      	ldrb	r2, [r4, #5]
 8011b14:	7923      	ldrb	r3, [r4, #4]
 8011b16:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8011b1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8011b1e:	2200      	movs	r2, #0
 8011b20:	492b      	ldr	r1, [pc, #172]	; (8011bd0 <dwt_ioctl+0xf30>)
 8011b22:	f7fd f9b0 	bl	800ee86 <dwt_write16bitoffsetreg>
 8011b26:	2500      	movs	r5, #0
 8011b28:	f000 bfc2 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011b2c:	2c00      	cmp	r4, #0
 8011b2e:	f001 8029 	beq.w	8012b84 <dwt_ioctl+0x1ee4>
 8011b32:	6823      	ldr	r3, [r4, #0]
 8011b34:	b94b      	cbnz	r3, 8011b4a <dwt_ioctl+0xeaa>
 8011b36:	2500      	movs	r5, #0
 8011b38:	9500      	str	r5, [sp, #0]
 8011b3a:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 8011b3e:	462a      	mov	r2, r5
 8011b40:	2110      	movs	r1, #16
 8011b42:	f7fe fc11 	bl	8010368 <dwt_modify16bitoffsetreg>
 8011b46:	f000 bfb3 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011b4a:	2200      	movs	r2, #0
 8011b4c:	2134      	movs	r1, #52	; 0x34
 8011b4e:	f7fd fa05 	bl	800ef5c <dwt_write32bitoffsetreg>
 8011b52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011b56:	9300      	str	r3, [sp, #0]
 8011b58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011b5c:	2200      	movs	r2, #0
 8011b5e:	2110      	movs	r1, #16
 8011b60:	4630      	mov	r0, r6
 8011b62:	f7fe fc01 	bl	8010368 <dwt_modify16bitoffsetreg>
 8011b66:	2500      	movs	r5, #0
 8011b68:	f000 bfa2 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011b6c:	2c00      	cmp	r4, #0
 8011b6e:	f001 800b 	beq.w	8012b88 <dwt_ioctl+0x1ee8>
 8011b72:	8861      	ldrh	r1, [r4, #2]
 8011b74:	f7fd fc62 	bl	800f43c <ull_aon_read>
 8011b78:	7020      	strb	r0, [r4, #0]
 8011b7a:	2500      	movs	r5, #0
 8011b7c:	f000 bf98 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011b80:	2c00      	cmp	r4, #0
 8011b82:	f001 8003 	beq.w	8012b8c <dwt_ioctl+0x1eec>
 8011b86:	78a2      	ldrb	r2, [r4, #2]
 8011b88:	8821      	ldrh	r1, [r4, #0]
 8011b8a:	f7fd fc77 	bl	800f47c <ull_aon_write>
 8011b8e:	2500      	movs	r5, #0
 8011b90:	f000 bf8e 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011b94:	00010044 	.word	0x00010044
 8011b98:	0001ff80 	.word	0x0001ff80
 8011b9c:	00010048 	.word	0x00010048
 8011ba0:	0001004c 	.word	0x0001004c
 8011ba4:	00010050 	.word	0x00010050
 8011ba8:	00010030 	.word	0x00010030
 8011bac:	000f0004 	.word	0x000f0004
 8011bb0:	000f0008 	.word	0x000f0008
 8011bb4:	000f000c 	.word	0x000f000c
 8011bb8:	000f0010 	.word	0x000f0010
 8011bbc:	000f0014 	.word	0x000f0014
 8011bc0:	000f0018 	.word	0x000f0018
 8011bc4:	000f001c 	.word	0x000f001c
 8011bc8:	000f0020 	.word	0x000f0020
 8011bcc:	00060004 	.word	0x00060004
 8011bd0:	0011001c 	.word	0x0011001c
 8011bd4:	4bd5      	ldr	r3, [pc, #852]	; (8011f2c <dwt_ioctl+0x128c>)
 8011bd6:	4ad6      	ldr	r2, [pc, #856]	; (8011f30 <dwt_ioctl+0x1290>)
 8011bd8:	2d01      	cmp	r5, #1
 8011bda:	bf18      	it	ne
 8011bdc:	4613      	movne	r3, r2
 8011bde:	2d01      	cmp	r5, #1
 8011be0:	49d4      	ldr	r1, [pc, #848]	; (8011f34 <dwt_ioctl+0x1294>)
 8011be2:	bf18      	it	ne
 8011be4:	f04f 110c 	movne.w	r1, #786444	; 0xc000c
 8011be8:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8011bea:	7b92      	ldrb	r2, [r2, #14]
 8011bec:	2a01      	cmp	r2, #1
 8011bee:	d012      	beq.n	8011c16 <dwt_ioctl+0xf76>
 8011bf0:	2a03      	cmp	r2, #3
 8011bf2:	d117      	bne.n	8011c24 <dwt_ioctl+0xf84>
 8011bf4:	f5a2 12c0 	sub.w	r2, r2, #1572864	; 0x180000
 8011bf8:	3a01      	subs	r2, #1
 8011bfa:	441a      	add	r2, r3
 8011bfc:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8011c00:	f7fc fce3 	bl	800e5ca <dwt_read16bitoffsetreg>
 8011c04:	09c0      	lsrs	r0, r0, #7
 8011c06:	8020      	strh	r0, [r4, #0]
 8011c08:	8825      	ldrh	r5, [r4, #0]
 8011c0a:	3500      	adds	r5, #0
 8011c0c:	bf18      	it	ne
 8011c0e:	2501      	movne	r5, #1
 8011c10:	426d      	negs	r5, r5
 8011c12:	f000 bf4d 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011c16:	2202      	movs	r2, #2
 8011c18:	4619      	mov	r1, r3
 8011c1a:	f7fc fcd6 	bl	800e5ca <dwt_read16bitoffsetreg>
 8011c1e:	09c0      	lsrs	r0, r0, #7
 8011c20:	8020      	strh	r0, [r4, #0]
 8011c22:	e7f1      	b.n	8011c08 <dwt_ioctl+0xf68>
 8011c24:	2202      	movs	r2, #2
 8011c26:	f7fc fcd0 	bl	800e5ca <dwt_read16bitoffsetreg>
 8011c2a:	09c0      	lsrs	r0, r0, #7
 8011c2c:	8020      	strh	r0, [r4, #0]
 8011c2e:	e7eb      	b.n	8011c08 <dwt_ioctl+0xf68>
 8011c30:	2c00      	cmp	r4, #0
 8011c32:	f000 87ad 	beq.w	8012b90 <dwt_ioctl+0x1ef0>
 8011c36:	7821      	ldrb	r1, [r4, #0]
 8011c38:	f7fe fbd4 	bl	80103e4 <ull_setleds>
 8011c3c:	2500      	movs	r5, #0
 8011c3e:	f000 bf37 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011c42:	4611      	mov	r1, r2
 8011c44:	f7fe fa30 	bl	80100a8 <ull_setdwstate>
 8011c48:	2500      	movs	r5, #0
 8011c4a:	f000 bf31 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011c4e:	9400      	str	r4, [sp, #0]
 8011c50:	2304      	movs	r3, #4
 8011c52:	2200      	movs	r2, #0
 8011c54:	211c      	movs	r1, #28
 8011c56:	f7fc fc98 	bl	800e58a <dwt_readfromdevice>
 8011c5a:	2500      	movs	r5, #0
 8011c5c:	f000 bf28 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011c60:	2c00      	cmp	r4, #0
 8011c62:	f000 8797 	beq.w	8012b94 <dwt_ioctl+0x1ef4>
 8011c66:	2202      	movs	r2, #2
 8011c68:	2144      	movs	r1, #68	; 0x44
 8011c6a:	f7fc fcae 	bl	800e5ca <dwt_read16bitoffsetreg>
 8011c6e:	f3c0 2000 	ubfx	r0, r0, #8, #1
 8011c72:	7020      	strb	r0, [r4, #0]
 8011c74:	2500      	movs	r5, #0
 8011c76:	f000 bf1b 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011c7a:	2c00      	cmp	r4, #0
 8011c7c:	f000 878c 	beq.w	8012b98 <dwt_ioctl+0x1ef8>
 8011c80:	2200      	movs	r2, #0
 8011c82:	2144      	movs	r1, #68	; 0x44
 8011c84:	f7fc fce0 	bl	800e648 <dwt_read8bitoffsetreg>
 8011c88:	f000 0001 	and.w	r0, r0, #1
 8011c8c:	7020      	strb	r0, [r4, #0]
 8011c8e:	2500      	movs	r5, #0
 8011c90:	f000 bf0e 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011c94:	2c00      	cmp	r4, #0
 8011c96:	f000 8781 	beq.w	8012b9c <dwt_ioctl+0x1efc>
 8011c9a:	8862      	ldrh	r2, [r4, #2]
 8011c9c:	8821      	ldrh	r1, [r4, #0]
 8011c9e:	f7fe fa61 	bl	8010164 <ull_configureframefilter>
 8011ca2:	2500      	movs	r5, #0
 8011ca4:	f000 bf04 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011ca8:	9400      	str	r4, [sp, #0]
 8011caa:	2308      	movs	r3, #8
 8011cac:	2200      	movs	r2, #0
 8011cae:	2104      	movs	r1, #4
 8011cb0:	f7fd f8de 	bl	800ee70 <dwt_writetodevice>
 8011cb4:	2500      	movs	r5, #0
 8011cb6:	f000 befb 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011cba:	9400      	str	r4, [sp, #0]
 8011cbc:	2308      	movs	r3, #8
 8011cbe:	2200      	movs	r2, #0
 8011cc0:	2104      	movs	r1, #4
 8011cc2:	f7fc fc62 	bl	800e58a <dwt_readfromdevice>
 8011cc6:	2500      	movs	r5, #0
 8011cc8:	f000 bef2 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011ccc:	2c00      	cmp	r4, #0
 8011cce:	f000 8767 	beq.w	8012ba0 <dwt_ioctl+0x1f00>
 8011cd2:	8823      	ldrh	r3, [r4, #0]
 8011cd4:	2202      	movs	r2, #2
 8011cd6:	210c      	movs	r1, #12
 8011cd8:	f7fd f8d5 	bl	800ee86 <dwt_write16bitoffsetreg>
 8011cdc:	2500      	movs	r5, #0
 8011cde:	f000 bee7 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011ce2:	2c00      	cmp	r4, #0
 8011ce4:	f000 875e 	beq.w	8012ba4 <dwt_ioctl+0x1f04>
 8011ce8:	8823      	ldrh	r3, [r4, #0]
 8011cea:	2200      	movs	r2, #0
 8011cec:	210c      	movs	r1, #12
 8011cee:	f7fd f8ca 	bl	800ee86 <dwt_write16bitoffsetreg>
 8011cf2:	2500      	movs	r5, #0
 8011cf4:	f000 bedc 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011cf8:	4621      	mov	r1, r4
 8011cfa:	f7fd f897 	bl	800ee2c <ull_readrxtimestamp>
 8011cfe:	2500      	movs	r5, #0
 8011d00:	f000 bed6 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011d04:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8011d06:	7b9b      	ldrb	r3, [r3, #14]
 8011d08:	2b01      	cmp	r3, #1
 8011d0a:	d00b      	beq.n	8011d24 <dwt_ioctl+0x1084>
 8011d0c:	2b03      	cmp	r3, #3
 8011d0e:	d112      	bne.n	8011d36 <dwt_ioctl+0x1096>
 8011d10:	9400      	str	r4, [sp, #0]
 8011d12:	2305      	movs	r3, #5
 8011d14:	2220      	movs	r2, #32
 8011d16:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8011d1a:	f7fc fc36 	bl	800e58a <dwt_readfromdevice>
 8011d1e:	2500      	movs	r5, #0
 8011d20:	f000 bec6 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011d24:	9400      	str	r4, [sp, #0]
 8011d26:	2305      	movs	r3, #5
 8011d28:	2200      	movs	r2, #0
 8011d2a:	4983      	ldr	r1, [pc, #524]	; (8011f38 <dwt_ioctl+0x1298>)
 8011d2c:	f7fc fc2d 	bl	800e58a <dwt_readfromdevice>
 8011d30:	2500      	movs	r5, #0
 8011d32:	f000 bebd 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011d36:	9400      	str	r4, [sp, #0]
 8011d38:	2305      	movs	r3, #5
 8011d3a:	2200      	movs	r2, #0
 8011d3c:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 8011d40:	f7fc fc23 	bl	800e58a <dwt_readfromdevice>
 8011d44:	2500      	movs	r5, #0
 8011d46:	f000 beb3 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011d4a:	2500      	movs	r5, #0
 8011d4c:	f804 5b01 	strb.w	r5, [r4], #1
 8011d50:	9400      	str	r4, [sp, #0]
 8011d52:	2304      	movs	r3, #4
 8011d54:	462a      	mov	r2, r5
 8011d56:	216c      	movs	r1, #108	; 0x6c
 8011d58:	f7fc fc17 	bl	800e58a <dwt_readfromdevice>
 8011d5c:	f000 bea8 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011d60:	2c00      	cmp	r4, #0
 8011d62:	f000 8721 	beq.w	8012ba8 <dwt_ioctl+0x1f08>
 8011d66:	2201      	movs	r2, #1
 8011d68:	2160      	movs	r1, #96	; 0x60
 8011d6a:	f7fc fc18 	bl	800e59e <dwt_read32bitoffsetreg>
 8011d6e:	6020      	str	r0, [r4, #0]
 8011d70:	2500      	movs	r5, #0
 8011d72:	f000 be9d 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011d76:	2c00      	cmp	r4, #0
 8011d78:	f000 8718 	beq.w	8012bac <dwt_ioctl+0x1f0c>
 8011d7c:	2200      	movs	r2, #0
 8011d7e:	2160      	movs	r1, #96	; 0x60
 8011d80:	f7fc fc0d 	bl	800e59e <dwt_read32bitoffsetreg>
 8011d84:	6020      	str	r0, [r4, #0]
 8011d86:	2500      	movs	r5, #0
 8011d88:	f000 be92 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011d8c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8011d8e:	7b9b      	ldrb	r3, [r3, #14]
 8011d90:	2b01      	cmp	r3, #1
 8011d92:	d00b      	beq.n	8011dac <dwt_ioctl+0x110c>
 8011d94:	2b03      	cmp	r3, #3
 8011d96:	d112      	bne.n	8011dbe <dwt_ioctl+0x111e>
 8011d98:	9400      	str	r4, [sp, #0]
 8011d9a:	2305      	movs	r3, #5
 8011d9c:	2228      	movs	r2, #40	; 0x28
 8011d9e:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
 8011da2:	f7fc fbf2 	bl	800e58a <dwt_readfromdevice>
 8011da6:	2500      	movs	r5, #0
 8011da8:	f000 be82 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011dac:	9400      	str	r4, [sp, #0]
 8011dae:	2305      	movs	r3, #5
 8011db0:	2200      	movs	r2, #0
 8011db2:	4962      	ldr	r1, [pc, #392]	; (8011f3c <dwt_ioctl+0x129c>)
 8011db4:	f7fc fbe9 	bl	800e58a <dwt_readfromdevice>
 8011db8:	2500      	movs	r5, #0
 8011dba:	f000 be79 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011dbe:	9400      	str	r4, [sp, #0]
 8011dc0:	2305      	movs	r3, #5
 8011dc2:	2200      	movs	r2, #0
 8011dc4:	495e      	ldr	r1, [pc, #376]	; (8011f40 <dwt_ioctl+0x12a0>)
 8011dc6:	f7fc fbe0 	bl	800e58a <dwt_readfromdevice>
 8011dca:	2500      	movs	r5, #0
 8011dcc:	f000 be70 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011dd0:	2c00      	cmp	r4, #0
 8011dd2:	f000 86ed 	beq.w	8012bb0 <dwt_ioctl+0x1f10>
 8011dd6:	2200      	movs	r2, #0
 8011dd8:	211c      	movs	r1, #28
 8011dda:	f7fc fbe0 	bl	800e59e <dwt_read32bitoffsetreg>
 8011dde:	6020      	str	r0, [r4, #0]
 8011de0:	2500      	movs	r5, #0
 8011de2:	f000 be65 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011de6:	2c00      	cmp	r4, #0
 8011de8:	f000 86e4 	beq.w	8012bb4 <dwt_ioctl+0x1f14>
 8011dec:	8825      	ldrh	r5, [r4, #0]
 8011dee:	6867      	ldr	r7, [r4, #4]
 8011df0:	7a23      	ldrb	r3, [r4, #8]
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	f000 86e0 	beq.w	8012bb8 <dwt_ioctl+0x1f18>
 8011df8:	463c      	mov	r4, r7
 8011dfa:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 8011dfe:	4629      	mov	r1, r5
 8011e00:	4630      	mov	r0, r6
 8011e02:	f7fd f889 	bl	800ef18 <_dwt_otpread>
 8011e06:	f844 0b04 	str.w	r0, [r4], #4
 8011e0a:	3501      	adds	r5, #1
 8011e0c:	b2ad      	uxth	r5, r5
 8011e0e:	42bc      	cmp	r4, r7
 8011e10:	d1f5      	bne.n	8011dfe <dwt_ioctl+0x115e>
 8011e12:	2500      	movs	r5, #0
 8011e14:	f000 be4c 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011e18:	2c00      	cmp	r4, #0
 8011e1a:	f000 86cf 	beq.w	8012bbc <dwt_ioctl+0x1f1c>
 8011e1e:	7821      	ldrb	r1, [r4, #0]
 8011e20:	f7fd fb86 	bl	800f530 <ull_setplenfine>
 8011e24:	2500      	movs	r5, #0
 8011e26:	f000 be43 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011e2a:	f7fe f9bf 	bl	80101ac <ull_run_pgfcal>
 8011e2e:	4605      	mov	r5, r0
 8011e30:	f000 be3e 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011e34:	4611      	mov	r1, r2
 8011e36:	f7fe fb23 	bl	8010480 <ull_pgf_cal>
 8011e3a:	4605      	mov	r5, r0
 8011e3c:	f000 be38 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011e40:	2c00      	cmp	r4, #0
 8011e42:	f000 86bd 	beq.w	8012bc0 <dwt_ioctl+0x1f20>
 8011e46:	78a5      	ldrb	r5, [r4, #2]
 8011e48:	2101      	movs	r1, #1
 8011e4a:	f7fd f83b 	bl	800eec4 <ull_force_clocks>
 8011e4e:	2100      	movs	r1, #0
 8011e50:	4630      	mov	r0, r6
 8011e52:	f7fd fdbd 	bl	800f9d0 <ull_enable_rf_tx>
 8011e56:	4630      	mov	r0, r6
 8011e58:	f7fd fdee 	bl	800fa38 <ull_enable_rftx_blocks>
 8011e5c:	f005 033f 	and.w	r3, r5, #63	; 0x3f
 8011e60:	2200      	movs	r2, #0
 8011e62:	4938      	ldr	r1, [pc, #224]	; (8011f44 <dwt_ioctl+0x12a4>)
 8011e64:	4630      	mov	r0, r6
 8011e66:	f7fd fa5d 	bl	800f324 <dwt_write8bitoffsetreg>
 8011e6a:	2301      	movs	r3, #1
 8011e6c:	9300      	str	r3, [sp, #0]
 8011e6e:	23ff      	movs	r3, #255	; 0xff
 8011e70:	2200      	movs	r2, #0
 8011e72:	4935      	ldr	r1, [pc, #212]	; (8011f48 <dwt_ioctl+0x12a8>)
 8011e74:	4630      	mov	r0, r6
 8011e76:	f7fd fee7 	bl	800fc48 <dwt_modify8bitoffsetreg>
 8011e7a:	4f33      	ldr	r7, [pc, #204]	; (8011f48 <dwt_ioctl+0x12a8>)
 8011e7c:	2500      	movs	r5, #0
 8011e7e:	462a      	mov	r2, r5
 8011e80:	4639      	mov	r1, r7
 8011e82:	4630      	mov	r0, r6
 8011e84:	f7fc fbe0 	bl	800e648 <dwt_read8bitoffsetreg>
 8011e88:	f010 0f01 	tst.w	r0, #1
 8011e8c:	d1f7      	bne.n	8011e7e <dwt_ioctl+0x11de>
 8011e8e:	2200      	movs	r2, #0
 8011e90:	492e      	ldr	r1, [pc, #184]	; (8011f4c <dwt_ioctl+0x12ac>)
 8011e92:	4630      	mov	r0, r6
 8011e94:	f7fc fb99 	bl	800e5ca <dwt_read16bitoffsetreg>
 8011e98:	4605      	mov	r5, r0
 8011e9a:	4630      	mov	r0, r6
 8011e9c:	f7fd f9c0 	bl	800f220 <ull_disable_rftx_blocks>
 8011ea0:	2100      	movs	r1, #0
 8011ea2:	4630      	mov	r0, r6
 8011ea4:	f7fd f9c6 	bl	800f234 <ull_disable_rf_tx>
 8011ea8:	2105      	movs	r1, #5
 8011eaa:	4630      	mov	r0, r6
 8011eac:	f7fd f80a 	bl	800eec4 <ull_force_clocks>
 8011eb0:	f3c5 050b 	ubfx	r5, r5, #0, #12
 8011eb4:	8025      	strh	r5, [r4, #0]
 8011eb6:	2500      	movs	r5, #0
 8011eb8:	f000 bdfa 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011ebc:	2102      	movs	r1, #2
 8011ebe:	f7fe f8f3 	bl	80100a8 <ull_setdwstate>
 8011ec2:	2101      	movs	r1, #1
 8011ec4:	4630      	mov	r0, r6
 8011ec6:	f7fe f8ef 	bl	80100a8 <ull_setdwstate>
 8011eca:	2432      	movs	r4, #50	; 0x32
 8011ecc:	f04f 0814 	mov.w	r8, #20
 8011ed0:	2700      	movs	r7, #0
 8011ed2:	2544      	movs	r5, #68	; 0x44
 8011ed4:	4640      	mov	r0, r8
 8011ed6:	f7ee fb2a 	bl	800052e <deca_usleep>
 8011eda:	463a      	mov	r2, r7
 8011edc:	4629      	mov	r1, r5
 8011ede:	4630      	mov	r0, r6
 8011ee0:	f7fc fbb2 	bl	800e648 <dwt_read8bitoffsetreg>
 8011ee4:	f010 0f02 	tst.w	r0, #2
 8011ee8:	d105      	bne.n	8011ef6 <dwt_ioctl+0x1256>
 8011eea:	1e63      	subs	r3, r4, #1
 8011eec:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8011ef0:	d1f0      	bne.n	8011ed4 <dwt_ioctl+0x1234>
 8011ef2:	2501      	movs	r5, #1
 8011ef4:	e000      	b.n	8011ef8 <dwt_ioctl+0x1258>
 8011ef6:	2500      	movs	r5, #0
 8011ef8:	426d      	negs	r5, r5
 8011efa:	f000 bdd9 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011efe:	2c00      	cmp	r4, #0
 8011f00:	f000 8660 	beq.w	8012bc4 <dwt_ioctl+0x1f24>
 8011f04:	7823      	ldrb	r3, [r4, #0]
 8011f06:	031b      	lsls	r3, r3, #12
 8011f08:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8011f0c:	7862      	ldrb	r2, [r4, #1]
 8011f0e:	2a01      	cmp	r2, #1
 8011f10:	bf08      	it	eq
 8011f12:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
 8011f16:	9300      	str	r3, [sp, #0]
 8011f18:	f46f 43e2 	mvn.w	r3, #28928	; 0x7100
 8011f1c:	2200      	movs	r2, #0
 8011f1e:	490c      	ldr	r1, [pc, #48]	; (8011f50 <dwt_ioctl+0x12b0>)
 8011f20:	f7fd fd22 	bl	800f968 <dwt_modify32bitoffsetreg>
 8011f24:	2500      	movs	r5, #0
 8011f26:	f000 bdc3 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011f2a:	bf00      	nop
 8011f2c:	00180034 	.word	0x00180034
 8011f30:	0018002c 	.word	0x0018002c
 8011f34:	000c0014 	.word	0x000c0014
 8011f38:	00180020 	.word	0x00180020
 8011f3c:	00180028 	.word	0x00180028
 8011f40:	000c0008 	.word	0x000c0008
 8011f44:	0007001c 	.word	0x0007001c
 8011f48:	00080010 	.word	0x00080010
 8011f4c:	00080014 	.word	0x00080014
 8011f50:	00070014 	.word	0x00070014
 8011f54:	2c00      	cmp	r4, #0
 8011f56:	f000 8637 	beq.w	8012bc8 <dwt_ioctl+0x1f28>
 8011f5a:	6862      	ldr	r2, [r4, #4]
 8011f5c:	6821      	ldr	r1, [r4, #0]
 8011f5e:	f7fd fe35 	bl	800fbcc <ull_setgpiomode>
 8011f62:	2500      	movs	r5, #0
 8011f64:	f000 bda4 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011f68:	2c00      	cmp	r4, #0
 8011f6a:	f000 862f 	beq.w	8012bcc <dwt_ioctl+0x1f2c>
 8011f6e:	8823      	ldrh	r3, [r4, #0]
 8011f70:	2200      	movs	r2, #0
 8011f72:	49c4      	ldr	r1, [pc, #784]	; (8012284 <dwt_ioctl+0x15e4>)
 8011f74:	f7fc ff87 	bl	800ee86 <dwt_write16bitoffsetreg>
 8011f78:	2500      	movs	r5, #0
 8011f7a:	f000 bd99 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011f7e:	2c00      	cmp	r4, #0
 8011f80:	f000 8626 	beq.w	8012bd0 <dwt_ioctl+0x1f30>
 8011f84:	6862      	ldr	r2, [r4, #4]
 8011f86:	8821      	ldrh	r1, [r4, #0]
 8011f88:	f7fe faaa 	bl	80104e0 <ull_setgpiovalue>
 8011f8c:	2500      	movs	r5, #0
 8011f8e:	f000 bd8f 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011f92:	2c00      	cmp	r4, #0
 8011f94:	f000 861e 	beq.w	8012bd4 <dwt_ioctl+0x1f34>
 8011f98:	7865      	ldrb	r5, [r4, #1]
 8011f9a:	7823      	ldrb	r3, [r4, #0]
 8011f9c:	b18b      	cbz	r3, 8011fc2 <dwt_ioctl+0x1322>
 8011f9e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8011fa0:	2200      	movs	r2, #0
 8011fa2:	739a      	strb	r2, [r3, #14]
 8011fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8011fa8:	2208      	movs	r2, #8
 8011faa:	b37d      	cbz	r5, 801200c <dwt_ioctl+0x136c>
 8011fac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011fb0:	9200      	str	r2, [sp, #0]
 8011fb2:	2200      	movs	r2, #0
 8011fb4:	2110      	movs	r1, #16
 8011fb6:	4630      	mov	r0, r6
 8011fb8:	f7fd fcd6 	bl	800f968 <dwt_modify32bitoffsetreg>
 8011fbc:	2500      	movs	r5, #0
 8011fbe:	f000 bd77 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8011fc2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8011fc4:	2201      	movs	r2, #1
 8011fc6:	739a      	strb	r2, [r3, #14]
 8011fc8:	2318      	movs	r3, #24
 8011fca:	2200      	movs	r2, #0
 8011fcc:	49ae      	ldr	r1, [pc, #696]	; (8012288 <dwt_ioctl+0x15e8>)
 8011fce:	f7fc ffc5 	bl	800ef5c <dwt_write32bitoffsetreg>
 8011fd2:	23e8      	movs	r3, #232	; 0xe8
 8011fd4:	2200      	movs	r2, #0
 8011fd6:	49ad      	ldr	r1, [pc, #692]	; (801228c <dwt_ioctl+0x15ec>)
 8011fd8:	4630      	mov	r0, r6
 8011fda:	f7fc ffbf 	bl	800ef5c <dwt_write32bitoffsetreg>
 8011fde:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8011fe0:	7d9b      	ldrb	r3, [r3, #22]
 8011fe2:	085b      	lsrs	r3, r3, #1
 8011fe4:	d003      	beq.n	8011fee <dwt_ioctl+0x134e>
 8011fe6:	f06f 0308 	mvn.w	r3, #8
 8011fea:	2200      	movs	r2, #0
 8011fec:	e7dd      	b.n	8011faa <dwt_ioctl+0x130a>
 8011fee:	2301      	movs	r3, #1
 8011ff0:	2200      	movs	r2, #0
 8011ff2:	49a7      	ldr	r1, [pc, #668]	; (8012290 <dwt_ioctl+0x15f0>)
 8011ff4:	4630      	mov	r0, r6
 8011ff6:	f7fd f995 	bl	800f324 <dwt_write8bitoffsetreg>
 8011ffa:	6d32      	ldr	r2, [r6, #80]	; 0x50
 8011ffc:	7d93      	ldrb	r3, [r2, #22]
 8011ffe:	f043 0302 	orr.w	r3, r3, #2
 8012002:	7593      	strb	r3, [r2, #22]
 8012004:	f06f 0308 	mvn.w	r3, #8
 8012008:	2200      	movs	r2, #0
 801200a:	e7ce      	b.n	8011faa <dwt_ioctl+0x130a>
 801200c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8012010:	e7ce      	b.n	8011fb0 <dwt_ioctl+0x1310>
 8012012:	2c00      	cmp	r4, #0
 8012014:	f000 85e0 	beq.w	8012bd8 <dwt_ioctl+0x1f38>
 8012018:	6823      	ldr	r3, [r4, #0]
 801201a:	2200      	movs	r2, #0
 801201c:	2130      	movs	r1, #48	; 0x30
 801201e:	f7fc ff9d 	bl	800ef5c <dwt_write32bitoffsetreg>
 8012022:	2500      	movs	r5, #0
 8012024:	f000 bd44 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8012028:	2c00      	cmp	r4, #0
 801202a:	f000 85d7 	beq.w	8012bdc <dwt_ioctl+0x1f3c>
 801202e:	2200      	movs	r2, #0
 8012030:	4629      	mov	r1, r5
 8012032:	f7fc fab4 	bl	800e59e <dwt_read32bitoffsetreg>
 8012036:	6020      	str	r0, [r4, #0]
 8012038:	2500      	movs	r5, #0
 801203a:	f000 bd39 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 801203e:	4623      	mov	r3, r4
 8012040:	2200      	movs	r2, #0
 8012042:	4629      	mov	r1, r5
 8012044:	f7fc ff8a 	bl	800ef5c <dwt_write32bitoffsetreg>
 8012048:	2500      	movs	r5, #0
 801204a:	f000 bd31 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 801204e:	2c00      	cmp	r4, #0
 8012050:	f000 85c6 	beq.w	8012be0 <dwt_ioctl+0x1f40>
 8012054:	2203      	movs	r2, #3
 8012056:	498f      	ldr	r1, [pc, #572]	; (8012294 <dwt_ioctl+0x15f4>)
 8012058:	f7fc faf6 	bl	800e648 <dwt_read8bitoffsetreg>
 801205c:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8012060:	7020      	strb	r0, [r4, #0]
 8012062:	2500      	movs	r5, #0
 8012064:	f000 bd24 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8012068:	2c00      	cmp	r4, #0
 801206a:	f000 85bb 	beq.w	8012be4 <dwt_ioctl+0x1f44>
 801206e:	6823      	ldr	r3, [r4, #0]
 8012070:	2200      	movs	r2, #0
 8012072:	2144      	movs	r1, #68	; 0x44
 8012074:	f7fc ff72 	bl	800ef5c <dwt_write32bitoffsetreg>
 8012078:	2500      	movs	r5, #0
 801207a:	f000 bd19 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 801207e:	2c00      	cmp	r4, #0
 8012080:	f000 85b2 	beq.w	8012be8 <dwt_ioctl+0x1f48>
 8012084:	8823      	ldrh	r3, [r4, #0]
 8012086:	2200      	movs	r2, #0
 8012088:	2148      	movs	r1, #72	; 0x48
 801208a:	f7fc fefc 	bl	800ee86 <dwt_write16bitoffsetreg>
 801208e:	2500      	movs	r5, #0
 8012090:	f000 bd0e 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8012094:	2c00      	cmp	r4, #0
 8012096:	f000 85a9 	beq.w	8012bec <dwt_ioctl+0x1f4c>
 801209a:	2200      	movs	r2, #0
 801209c:	2144      	movs	r1, #68	; 0x44
 801209e:	f7fc fa7e 	bl	800e59e <dwt_read32bitoffsetreg>
 80120a2:	6020      	str	r0, [r4, #0]
 80120a4:	2500      	movs	r5, #0
 80120a6:	f000 bd03 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 80120aa:	2c00      	cmp	r4, #0
 80120ac:	f000 85a0 	beq.w	8012bf0 <dwt_ioctl+0x1f50>
 80120b0:	2200      	movs	r2, #0
 80120b2:	2148      	movs	r1, #72	; 0x48
 80120b4:	f7fc fa89 	bl	800e5ca <dwt_read16bitoffsetreg>
 80120b8:	6020      	str	r0, [r4, #0]
 80120ba:	2500      	movs	r5, #0
 80120bc:	f000 bcf8 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 80120c0:	2c00      	cmp	r4, #0
 80120c2:	f000 8597 	beq.w	8012bf4 <dwt_ioctl+0x1f54>
 80120c6:	7823      	ldrb	r3, [r4, #0]
 80120c8:	2200      	movs	r2, #0
 80120ca:	4973      	ldr	r1, [pc, #460]	; (8012298 <dwt_ioctl+0x15f8>)
 80120cc:	f7fd f92a 	bl	800f324 <dwt_write8bitoffsetreg>
 80120d0:	2500      	movs	r5, #0
 80120d2:	f000 bced 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 80120d6:	2c00      	cmp	r4, #0
 80120d8:	f000 858e 	beq.w	8012bf8 <dwt_ioctl+0x1f58>
 80120dc:	2200      	movs	r2, #0
 80120de:	2144      	movs	r1, #68	; 0x44
 80120e0:	f7fc fab2 	bl	800e648 <dwt_read8bitoffsetreg>
 80120e4:	7020      	strb	r0, [r4, #0]
 80120e6:	2500      	movs	r5, #0
 80120e8:	f000 bce2 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 80120ec:	2c00      	cmp	r4, #0
 80120ee:	f000 8585 	beq.w	8012bfc <dwt_ioctl+0x1f5c>
 80120f2:	f7fd f923 	bl	800f33c <ull_getframelength>
 80120f6:	6020      	str	r0, [r4, #0]
 80120f8:	2500      	movs	r5, #0
 80120fa:	f000 bcd9 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 80120fe:	2c00      	cmp	r4, #0
 8012100:	f000 857e 	beq.w	8012c00 <dwt_ioctl+0x1f60>
 8012104:	2200      	movs	r2, #0
 8012106:	4965      	ldr	r1, [pc, #404]	; (801229c <dwt_ioctl+0x15fc>)
 8012108:	f7fc fa5f 	bl	800e5ca <dwt_read16bitoffsetreg>
 801210c:	8020      	strh	r0, [r4, #0]
 801210e:	2500      	movs	r5, #0
 8012110:	f000 bcce 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 8012114:	2c00      	cmp	r4, #0
 8012116:	f000 8575 	beq.w	8012c04 <dwt_ioctl+0x1f64>
 801211a:	2200      	movs	r2, #0
 801211c:	4960      	ldr	r1, [pc, #384]	; (80122a0 <dwt_ioctl+0x1600>)
 801211e:	f7fc fa3e 	bl	800e59e <dwt_read32bitoffsetreg>
 8012122:	6020      	str	r0, [r4, #0]
 8012124:	2500      	movs	r5, #0
 8012126:	f000 bcc3 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 801212a:	2c00      	cmp	r4, #0
 801212c:	f000 856c 	beq.w	8012c08 <dwt_ioctl+0x1f68>
 8012130:	8823      	ldrh	r3, [r4, #0]
 8012132:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012136:	9300      	str	r3, [sp, #0]
 8012138:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 801213c:	2200      	movs	r2, #0
 801213e:	4958      	ldr	r1, [pc, #352]	; (80122a0 <dwt_ioctl+0x1600>)
 8012140:	f7fe f912 	bl	8010368 <dwt_modify16bitoffsetreg>
 8012144:	2500      	movs	r5, #0
 8012146:	f000 bcb3 	b.w	8012ab0 <dwt_ioctl+0x1e10>
 801214a:	2c00      	cmp	r4, #0
 801214c:	f000 855e 	beq.w	8012c0c <dwt_ioctl+0x1f6c>
 8012150:	88a7      	ldrh	r7, [r4, #4]
 8012152:	f8d4 b008 	ldr.w	fp, [r4, #8]
 8012156:	7b23      	ldrb	r3, [r4, #12]
 8012158:	9306      	str	r3, [sp, #24]
 801215a:	6922      	ldr	r2, [r4, #16]
 801215c:	9204      	str	r2, [sp, #16]
 801215e:	6962      	ldr	r2, [r4, #20]
 8012160:	9205      	str	r2, [sp, #20]
 8012162:	f00b 0203 	and.w	r2, fp, #3
 8012166:	f3cb 0585 	ubfx	r5, fp, #2, #6
 801216a:	2b05      	cmp	r3, #5
 801216c:	d147      	bne.n	80121fe <dwt_ioctl+0x155e>
 801216e:	f5b7 7fb1 	cmp.w	r7, #354	; 0x162
 8012172:	bf28      	it	cs
 8012174:	f44f 77b1 	movcs.w	r7, #354	; 0x162
 8012178:	f8df 912c 	ldr.w	r9, [pc, #300]	; 80122a8 <dwt_ioctl+0x1608>
 801217c:	2f04      	cmp	r7, #4
 801217e:	d805      	bhi.n	801218c <dwt_ioctl+0x14ec>
 8012180:	eb09 0305 	add.w	r3, r9, r5
 8012184:	785b      	ldrb	r3, [r3, #1]
 8012186:	3b05      	subs	r3, #5
 8012188:	429f      	cmp	r7, r3
 801218a:	db40      	blt.n	801220e <dwt_ioctl+0x156e>
 801218c:	2a01      	cmp	r2, #1
 801218e:	f200 80c8 	bhi.w	8012322 <dwt_ioctl+0x1682>
 8012192:	4b44      	ldr	r3, [pc, #272]	; (80122a4 <dwt_ioctl+0x1604>)
 8012194:	5c99      	ldrb	r1, [r3, r2]
 8012196:	463e      	mov	r6, r7
 8012198:	42b9      	cmp	r1, r7
 801219a:	f280 80c4 	bge.w	8012326 <dwt_ioctl+0x1686>
 801219e:	1c50      	adds	r0, r2, #1
 80121a0:	fa53 f080 	uxtab	r0, r3, r0
 80121a4:	2300      	movs	r3, #0
 80121a6:	440b      	add	r3, r1
 80121a8:	b29b      	uxth	r3, r3
 80121aa:	3201      	adds	r2, #1
 80121ac:	b2d2      	uxtb	r2, r2
 80121ae:	2a02      	cmp	r2, #2
 80121b0:	d005      	beq.n	80121be <dwt_ioctl+0x151e>
 80121b2:	f810 1b01 	ldrb.w	r1, [r0], #1
 80121b6:	eba6 0c03 	sub.w	ip, r6, r3
 80121ba:	4561      	cmp	r1, ip
 80121bc:	dbf3      	blt.n	80121a6 <dwt_ioctl+0x1506>
 80121be:	429f      	cmp	r7, r3
 80121c0:	bf08      	it	eq
 80121c2:	9503      	streq	r5, [sp, #12]
 80121c4:	f000 80b4 	beq.w	8012330 <dwt_ioctl+0x1690>
 80121c8:	f107 0c05 	add.w	ip, r7, #5
 80121cc:	fa1f fc8c 	uxth.w	ip, ip
 80121d0:	2680      	movs	r6, #128	; 0x80
 80121d2:	2100      	movs	r1, #0
 80121d4:	9107      	str	r1, [sp, #28]
 80121d6:	9103      	str	r1, [sp, #12]
 80121d8:	9108      	str	r1, [sp, #32]
 80121da:	2005      	movs	r0, #5
 80121dc:	46b8      	mov	r8, r7
 80121de:	4287      	cmp	r7, r0
 80121e0:	bf38      	it	cc
 80121e2:	4680      	movcc	r8, r0
 80121e4:	f1a8 0805 	sub.w	r8, r8, #5
 80121e8:	fa1f f888 	uxth.w	r8, r8
 80121ec:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 80122a4 <dwt_ioctl+0x1604>
 80121f0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80121f4:	4683      	mov	fp, r0
 80121f6:	4620      	mov	r0, r4
 80121f8:	460c      	mov	r4, r1
 80121fa:	4686      	mov	lr, r0
 80121fc:	e031      	b.n	8012262 <dwt_ioctl+0x15c2>
 80121fe:	f240 1331 	movw	r3, #305	; 0x131
 8012202:	429f      	cmp	r7, r3
 8012204:	bf28      	it	cs
 8012206:	461f      	movcs	r7, r3
 8012208:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 80122ac <dwt_ioctl+0x160c>
 801220c:	e7b6      	b.n	801217c <dwt_ioctl+0x14dc>
 801220e:	2300      	movs	r3, #0
 8012210:	9a05      	ldr	r2, [sp, #20]
 8012212:	8013      	strh	r3, [r2, #0]
 8012214:	9a04      	ldr	r2, [sp, #16]
 8012216:	f8c2 b000 	str.w	fp, [r2]
 801221a:	e098      	b.n	801234e <dwt_ioctl+0x16ae>
 801221c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8012220:	4674      	mov	r4, lr
 8012222:	2300      	movs	r3, #0
 8012224:	9a05      	ldr	r2, [sp, #20]
 8012226:	8013      	strh	r3, [r2, #0]
 8012228:	9b04      	ldr	r3, [sp, #16]
 801222a:	f8c3 b000 	str.w	fp, [r3]
 801222e:	f04f 33ff 	mov.w	r3, #4294967295
 8012232:	e08c      	b.n	801234e <dwt_ioctl+0x16ae>
 8012234:	fa1f fb80 	uxth.w	fp, r0
 8012238:	9207      	str	r2, [sp, #28]
 801223a:	9503      	str	r5, [sp, #12]
 801223c:	9308      	str	r3, [sp, #32]
 801223e:	2401      	movs	r4, #1
 8012240:	2d3f      	cmp	r5, #63	; 0x3f
 8012242:	d050      	beq.n	80122e6 <dwt_ioctl+0x1646>
 8012244:	2900      	cmp	r1, #0
 8012246:	d139      	bne.n	80122bc <dwt_ioctl+0x161c>
 8012248:	3501      	adds	r5, #1
 801224a:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 801224e:	f819 0005 	ldrb.w	r0, [r9, r5]
 8012252:	4403      	add	r3, r0
 8012254:	b29b      	uxth	r3, r3
 8012256:	429f      	cmp	r7, r3
 8012258:	d067      	beq.n	801232a <dwt_ioctl+0x168a>
 801225a:	3e01      	subs	r6, #1
 801225c:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 8012260:	d0dc      	beq.n	801221c <dwt_ioctl+0x157c>
 8012262:	4543      	cmp	r3, r8
 8012264:	d924      	bls.n	80122b0 <dwt_ioctl+0x1610>
 8012266:	4563      	cmp	r3, ip
 8012268:	d222      	bcs.n	80122b0 <dwt_ioctl+0x1610>
 801226a:	1af8      	subs	r0, r7, r3
 801226c:	b200      	sxth	r0, r0
 801226e:	2800      	cmp	r0, #0
 8012270:	bfb8      	it	lt
 8012272:	4240      	neglt	r0, r0
 8012274:	4558      	cmp	r0, fp
 8012276:	dddd      	ble.n	8012234 <dwt_ioctl+0x1594>
 8012278:	2c00      	cmp	r4, #0
 801227a:	d0e1      	beq.n	8012240 <dwt_ioctl+0x15a0>
 801227c:	4674      	mov	r4, lr
 801227e:	9a07      	ldr	r2, [sp, #28]
 8012280:	9b08      	ldr	r3, [sp, #32]
 8012282:	e055      	b.n	8012330 <dwt_ioctl+0x1690>
 8012284:	00050008 	.word	0x00050008
 8012288:	001f000c 	.word	0x001f000c
 801228c:	001f0010 	.word	0x001f0010
 8012290:	00010020 	.word	0x00010020
 8012294:	00030054 	.word	0x00030054
 8012298:	00010018 	.word	0x00010018
 801229c:	0005002c 	.word	0x0005002c
 80122a0:	000e001c 	.word	0x000e001c
 80122a4:	08013584 	.word	0x08013584
 80122a8:	08013504 	.word	0x08013504
 80122ac:	08013544 	.word	0x08013544
 80122b0:	b984      	cbnz	r4, 80122d4 <dwt_ioctl+0x1634>
 80122b2:	4563      	cmp	r3, ip
 80122b4:	d3c4      	bcc.n	8012240 <dwt_ioctl+0x15a0>
 80122b6:	b199      	cbz	r1, 80122e0 <dwt_ioctl+0x1640>
 80122b8:	2d3f      	cmp	r5, #63	; 0x3f
 80122ba:	d014      	beq.n	80122e6 <dwt_ioctl+0x1646>
 80122bc:	f819 1005 	ldrb.w	r1, [r9, r5]
 80122c0:	1a5b      	subs	r3, r3, r1
 80122c2:	b29b      	uxth	r3, r3
 80122c4:	1e69      	subs	r1, r5, #1
 80122c6:	f001 053f 	and.w	r5, r1, #63	; 0x3f
 80122ca:	f011 013f 	ands.w	r1, r1, #63	; 0x3f
 80122ce:	bf18      	it	ne
 80122d0:	2101      	movne	r1, #1
 80122d2:	e7c0      	b.n	8012256 <dwt_ioctl+0x15b6>
 80122d4:	4674      	mov	r4, lr
 80122d6:	f819 1005 	ldrb.w	r1, [r9, r5]
 80122da:	1a5b      	subs	r3, r3, r1
 80122dc:	b29b      	uxth	r3, r3
 80122de:	e027      	b.n	8012330 <dwt_ioctl+0x1690>
 80122e0:	4674      	mov	r4, lr
 80122e2:	9503      	str	r5, [sp, #12]
 80122e4:	e024      	b.n	8012330 <dwt_ioctl+0x1690>
 80122e6:	2c00      	cmp	r4, #0
 80122e8:	d134      	bne.n	8012354 <dwt_ioctl+0x16b4>
 80122ea:	2a03      	cmp	r2, #3
 80122ec:	d036      	beq.n	801235c <dwt_ioctl+0x16bc>
 80122ee:	2a02      	cmp	r2, #2
 80122f0:	d009      	beq.n	8012306 <dwt_ioctl+0x1666>
 80122f2:	f81a 1002 	ldrb.w	r1, [sl, r2]
 80122f6:	1858      	adds	r0, r3, r1
 80122f8:	42b8      	cmp	r0, r7
 80122fa:	dd0b      	ble.n	8012314 <dwt_ioctl+0x1674>
 80122fc:	440b      	add	r3, r1
 80122fe:	b29b      	uxth	r3, r3
 8012300:	3201      	adds	r2, #1
 8012302:	b2d2      	uxtb	r2, r2
 8012304:	e7da      	b.n	80122bc <dwt_ioctl+0x161c>
 8012306:	9906      	ldr	r1, [sp, #24]
 8012308:	2909      	cmp	r1, #9
 801230a:	d1f2      	bne.n	80122f2 <dwt_ioctl+0x1652>
 801230c:	4674      	mov	r4, lr
 801230e:	213f      	movs	r1, #63	; 0x3f
 8012310:	9103      	str	r1, [sp, #12]
 8012312:	e00d      	b.n	8012330 <dwt_ioctl+0x1690>
 8012314:	4674      	mov	r4, lr
 8012316:	b283      	uxth	r3, r0
 8012318:	3201      	adds	r2, #1
 801231a:	b2d2      	uxtb	r2, r2
 801231c:	213f      	movs	r1, #63	; 0x3f
 801231e:	9103      	str	r1, [sp, #12]
 8012320:	e006      	b.n	8012330 <dwt_ioctl+0x1690>
 8012322:	2300      	movs	r3, #0
 8012324:	e74b      	b.n	80121be <dwt_ioctl+0x151e>
 8012326:	2300      	movs	r3, #0
 8012328:	e749      	b.n	80121be <dwt_ioctl+0x151e>
 801232a:	4674      	mov	r4, lr
 801232c:	9503      	str	r5, [sp, #12]
 801232e:	463b      	mov	r3, r7
 8012330:	9905      	ldr	r1, [sp, #20]
 8012332:	800b      	strh	r3, [r1, #0]
 8012334:	9b03      	ldr	r3, [sp, #12]
 8012336:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
 801233a:	b2db      	uxtb	r3, r3
 801233c:	041a      	lsls	r2, r3, #16
 801233e:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 8012342:	431a      	orrs	r2, r3
 8012344:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8012348:	9a04      	ldr	r2, [sp, #16]
 801234a:	6013      	str	r3, [r2, #0]
 801234c:	2300      	movs	r3, #0
 801234e:	6023      	str	r3, [r4, #0]
 8012350:	2500      	movs	r5, #0
 8012352:	e3ad      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012354:	4674      	mov	r4, lr
 8012356:	9a07      	ldr	r2, [sp, #28]
 8012358:	9b08      	ldr	r3, [sp, #32]
 801235a:	e7e9      	b.n	8012330 <dwt_ioctl+0x1690>
 801235c:	4674      	mov	r4, lr
 801235e:	213f      	movs	r1, #63	; 0x3f
 8012360:	9103      	str	r1, [sp, #12]
 8012362:	e7e5      	b.n	8012330 <dwt_ioctl+0x1690>
 8012364:	2c00      	cmp	r4, #0
 8012366:	f000 8453 	beq.w	8012c10 <dwt_ioctl+0x1f70>
 801236a:	7827      	ldrb	r7, [r4, #0]
 801236c:	7864      	ldrb	r4, [r4, #1]
 801236e:	f7ee f8b5 	bl	80004dc <decamutexon>
 8012372:	4605      	mov	r5, r0
 8012374:	2c02      	cmp	r4, #2
 8012376:	d00e      	beq.n	8012396 <dwt_ioctl+0x16f6>
 8012378:	2c04      	cmp	r4, #4
 801237a:	d00c      	beq.n	8012396 <dwt_ioctl+0x16f6>
 801237c:	f004 04fd 	and.w	r4, r4, #253	; 0xfd
 8012380:	2c01      	cmp	r4, #1
 8012382:	d019      	beq.n	80123b8 <dwt_ioctl+0x1718>
 8012384:	43fb      	mvns	r3, r7
 8012386:	2200      	movs	r2, #0
 8012388:	9200      	str	r2, [sp, #0]
 801238a:	b2db      	uxtb	r3, r3
 801238c:	49c1      	ldr	r1, [pc, #772]	; (8012694 <dwt_ioctl+0x19f4>)
 801238e:	4630      	mov	r0, r6
 8012390:	f7fd fc5a 	bl	800fc48 <dwt_modify8bitoffsetreg>
 8012394:	e005      	b.n	80123a2 <dwt_ioctl+0x1702>
 8012396:	463b      	mov	r3, r7
 8012398:	2200      	movs	r2, #0
 801239a:	49be      	ldr	r1, [pc, #760]	; (8012694 <dwt_ioctl+0x19f4>)
 801239c:	4630      	mov	r0, r6
 801239e:	f7fc ffc1 	bl	800f324 <dwt_write8bitoffsetreg>
 80123a2:	463b      	mov	r3, r7
 80123a4:	2200      	movs	r2, #0
 80123a6:	49bc      	ldr	r1, [pc, #752]	; (8012698 <dwt_ioctl+0x19f8>)
 80123a8:	4630      	mov	r0, r6
 80123aa:	f7fc fdd7 	bl	800ef5c <dwt_write32bitoffsetreg>
 80123ae:	4628      	mov	r0, r5
 80123b0:	f7ee f8a5 	bl	80004fe <decamutexoff>
 80123b4:	2500      	movs	r5, #0
 80123b6:	e37b      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 80123b8:	9700      	str	r7, [sp, #0]
 80123ba:	23ff      	movs	r3, #255	; 0xff
 80123bc:	2200      	movs	r2, #0
 80123be:	49b5      	ldr	r1, [pc, #724]	; (8012694 <dwt_ioctl+0x19f4>)
 80123c0:	4630      	mov	r0, r6
 80123c2:	f7fd fc41 	bl	800fc48 <dwt_modify8bitoffsetreg>
 80123c6:	e7ec      	b.n	80123a2 <dwt_ioctl+0x1702>
 80123c8:	2302      	movs	r3, #2
 80123ca:	9301      	str	r3, [sp, #4]
 80123cc:	2500      	movs	r5, #0
 80123ce:	9500      	str	r5, [sp, #0]
 80123d0:	462b      	mov	r3, r5
 80123d2:	462a      	mov	r2, r5
 80123d4:	211a      	movs	r1, #26
 80123d6:	f7fc f85a 	bl	800e48e <dwt_xfer3xxx>
 80123da:	e369      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 80123dc:	f7fe fc4c 	bl	8010c78 <ull_softreset_fcmd>
 80123e0:	2500      	movs	r5, #0
 80123e2:	e365      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 80123e4:	f7fe fc34 	bl	8010c50 <ull_softreset_no_sema_fcmd>
 80123e8:	2500      	movs	r5, #0
 80123ea:	e361      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 80123ec:	2302      	movs	r3, #2
 80123ee:	9301      	str	r3, [sp, #4]
 80123f0:	2500      	movs	r5, #0
 80123f2:	9500      	str	r5, [sp, #0]
 80123f4:	462b      	mov	r3, r5
 80123f6:	462a      	mov	r2, r5
 80123f8:	2114      	movs	r1, #20
 80123fa:	f7fc f848 	bl	800e48e <dwt_xfer3xxx>
 80123fe:	e357      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012400:	2402      	movs	r4, #2
 8012402:	9401      	str	r4, [sp, #4]
 8012404:	2500      	movs	r5, #0
 8012406:	9500      	str	r5, [sp, #0]
 8012408:	462b      	mov	r3, r5
 801240a:	462a      	mov	r2, r5
 801240c:	2115      	movs	r1, #21
 801240e:	f7fc f83e 	bl	800e48e <dwt_xfer3xxx>
 8012412:	9401      	str	r4, [sp, #4]
 8012414:	9500      	str	r5, [sp, #0]
 8012416:	462b      	mov	r3, r5
 8012418:	462a      	mov	r2, r5
 801241a:	2115      	movs	r1, #21
 801241c:	4630      	mov	r0, r6
 801241e:	f7fc f836 	bl	800e48e <dwt_xfer3xxx>
 8012422:	e345      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012424:	2302      	movs	r3, #2
 8012426:	9301      	str	r3, [sp, #4]
 8012428:	2500      	movs	r5, #0
 801242a:	9500      	str	r5, [sp, #0]
 801242c:	462b      	mov	r3, r5
 801242e:	462a      	mov	r2, r5
 8012430:	2116      	movs	r1, #22
 8012432:	f7fc f82c 	bl	800e48e <dwt_xfer3xxx>
 8012436:	e33b      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012438:	2c00      	cmp	r4, #0
 801243a:	f000 83eb 	beq.w	8012c14 <dwt_ioctl+0x1f74>
 801243e:	b932      	cbnz	r2, 801244e <dwt_ioctl+0x17ae>
 8012440:	2200      	movs	r2, #0
 8012442:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 8012446:	f7fc f8ff 	bl	800e648 <dwt_read8bitoffsetreg>
 801244a:	7020      	strb	r0, [r4, #0]
 801244c:	e330      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 801244e:	2201      	movs	r2, #1
 8012450:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 8012454:	f7fc f8f8 	bl	800e648 <dwt_read8bitoffsetreg>
 8012458:	7020      	strb	r0, [r4, #0]
 801245a:	2500      	movs	r5, #0
 801245c:	e328      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 801245e:	2c00      	cmp	r4, #0
 8012460:	f000 83da 	beq.w	8012c18 <dwt_ioctl+0x1f78>
 8012464:	7824      	ldrb	r4, [r4, #0]
 8012466:	2200      	movs	r2, #0
 8012468:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 801246c:	f7fc f8ec 	bl	800e648 <dwt_read8bitoffsetreg>
 8012470:	f000 039f 	and.w	r3, r0, #159	; 0x9f
 8012474:	4323      	orrs	r3, r4
 8012476:	2200      	movs	r2, #0
 8012478:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 801247c:	4630      	mov	r0, r6
 801247e:	f7fc ff51 	bl	800f324 <dwt_write8bitoffsetreg>
 8012482:	2500      	movs	r5, #0
 8012484:	e314      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012486:	2c00      	cmp	r4, #0
 8012488:	f000 83c8 	beq.w	8012c1c <dwt_ioctl+0x1f7c>
 801248c:	7824      	ldrb	r4, [r4, #0]
 801248e:	f012 05ff 	ands.w	r5, r2, #255	; 0xff
 8012492:	d01d      	beq.n	80124d0 <dwt_ioctl+0x1830>
 8012494:	2d01      	cmp	r5, #1
 8012496:	f040 83c3 	bne.w	8012c20 <dwt_ioctl+0x1f80>
 801249a:	2502      	movs	r5, #2
 801249c:	2201      	movs	r2, #1
 801249e:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 80124a2:	4630      	mov	r0, r6
 80124a4:	f7fc f8d0 	bl	800e648 <dwt_read8bitoffsetreg>
 80124a8:	b9a4      	cbnz	r4, 80124d4 <dwt_ioctl+0x1834>
 80124aa:	ea20 0305 	bic.w	r3, r0, r5
 80124ae:	b2db      	uxtb	r3, r3
 80124b0:	2201      	movs	r2, #1
 80124b2:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
 80124b6:	4630      	mov	r0, r6
 80124b8:	f7fc ff34 	bl	800f324 <dwt_write8bitoffsetreg>
 80124bc:	2200      	movs	r2, #0
 80124be:	2110      	movs	r1, #16
 80124c0:	4630      	mov	r0, r6
 80124c2:	f7fc f86c 	bl	800e59e <dwt_read32bitoffsetreg>
 80124c6:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 80124ca:	d00a      	beq.n	80124e2 <dwt_ioctl+0x1842>
 80124cc:	2500      	movs	r5, #0
 80124ce:	e2ef      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 80124d0:	2504      	movs	r5, #4
 80124d2:	e7e3      	b.n	801249c <dwt_ioctl+0x17fc>
 80124d4:	2c01      	cmp	r4, #1
 80124d6:	f040 83a6 	bne.w	8012c26 <dwt_ioctl+0x1f86>
 80124da:	ea40 0305 	orr.w	r3, r0, r5
 80124de:	b2db      	uxtb	r3, r3
 80124e0:	e7e6      	b.n	80124b0 <dwt_ioctl+0x1810>
 80124e2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80124e6:	9300      	str	r3, [sp, #0]
 80124e8:	f04f 33ff 	mov.w	r3, #4294967295
 80124ec:	2200      	movs	r2, #0
 80124ee:	2110      	movs	r1, #16
 80124f0:	4630      	mov	r0, r6
 80124f2:	f7fd fa39 	bl	800f968 <dwt_modify32bitoffsetreg>
 80124f6:	2500      	movs	r5, #0
 80124f8:	e2da      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 80124fa:	2c00      	cmp	r4, #0
 80124fc:	f000 8396 	beq.w	8012c2c <dwt_ioctl+0x1f8c>
 8012500:	7823      	ldrb	r3, [r4, #0]
 8012502:	035b      	lsls	r3, r3, #13
 8012504:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012508:	9300      	str	r3, [sp, #0]
 801250a:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 801250e:	2200      	movs	r2, #0
 8012510:	4962      	ldr	r1, [pc, #392]	; (801269c <dwt_ioctl+0x19fc>)
 8012512:	f7fd ff29 	bl	8010368 <dwt_modify16bitoffsetreg>
 8012516:	2500      	movs	r5, #0
 8012518:	e2ca      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 801251a:	2c00      	cmp	r4, #0
 801251c:	f000 8388 	beq.w	8012c30 <dwt_ioctl+0x1f90>
 8012520:	7825      	ldrb	r5, [r4, #0]
 8012522:	6862      	ldr	r2, [r4, #4]
 8012524:	2a01      	cmp	r2, #1
 8012526:	bf15      	itete	ne
 8012528:	f46f 3360 	mvnne.w	r3, #229376	; 0x38000
 801252c:	f46f 43e0 	mvneq.w	r3, #28672	; 0x7000
 8012530:	27df      	movne	r7, #223	; 0xdf
 8012532:	27ef      	moveq	r7, #239	; 0xef
 8012534:	bf14      	ite	ne
 8012536:	f04f 0820 	movne.w	r8, #32
 801253a:	f04f 0810 	moveq.w	r8, #16
 801253e:	2400      	movs	r4, #0
 8012540:	9400      	str	r4, [sp, #0]
 8012542:	4622      	mov	r2, r4
 8012544:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8012548:	f7fd fa0e 	bl	800f968 <dwt_modify32bitoffsetreg>
 801254c:	9400      	str	r4, [sp, #0]
 801254e:	463b      	mov	r3, r7
 8012550:	4622      	mov	r2, r4
 8012552:	4953      	ldr	r1, [pc, #332]	; (80126a0 <dwt_ioctl+0x1a00>)
 8012554:	4630      	mov	r0, r6
 8012556:	f7fd fb77 	bl	800fc48 <dwt_modify8bitoffsetreg>
 801255a:	2d01      	cmp	r5, #1
 801255c:	d002      	beq.n	8012564 <dwt_ioctl+0x18c4>
 801255e:	b155      	cbz	r5, 8012576 <dwt_ioctl+0x18d6>
 8012560:	2500      	movs	r5, #0
 8012562:	e2a5      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012564:	4625      	mov	r5, r4
 8012566:	9400      	str	r4, [sp, #0]
 8012568:	463b      	mov	r3, r7
 801256a:	4622      	mov	r2, r4
 801256c:	494d      	ldr	r1, [pc, #308]	; (80126a4 <dwt_ioctl+0x1a04>)
 801256e:	4630      	mov	r0, r6
 8012570:	f7fd fb6a 	bl	800fc48 <dwt_modify8bitoffsetreg>
 8012574:	e29c      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012576:	f8cd 8000 	str.w	r8, [sp]
 801257a:	23ff      	movs	r3, #255	; 0xff
 801257c:	2200      	movs	r2, #0
 801257e:	4949      	ldr	r1, [pc, #292]	; (80126a4 <dwt_ioctl+0x1a04>)
 8012580:	4630      	mov	r0, r6
 8012582:	f7fd fb61 	bl	800fc48 <dwt_modify8bitoffsetreg>
 8012586:	e293      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012588:	2c00      	cmp	r4, #0
 801258a:	f000 8353 	beq.w	8012c34 <dwt_ioctl+0x1f94>
 801258e:	7822      	ldrb	r2, [r4, #0]
 8012590:	f012 0f01 	tst.w	r2, #1
 8012594:	d02c      	beq.n	80125f0 <dwt_ioctl+0x1950>
 8012596:	0157      	lsls	r7, r2, #5
 8012598:	f007 0740 	and.w	r7, r7, #64	; 0x40
 801259c:	2440      	movs	r4, #64	; 0x40
 801259e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80125a2:	f012 0f04 	tst.w	r2, #4
 80125a6:	d027      	beq.n	80125f8 <dwt_ioctl+0x1958>
 80125a8:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
 80125ac:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 80125b0:	0112      	lsls	r2, r2, #4
 80125b2:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80125b6:	4317      	orrs	r7, r2
 80125b8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80125bc:	9200      	str	r2, [sp, #0]
 80125be:	43db      	mvns	r3, r3
 80125c0:	2200      	movs	r2, #0
 80125c2:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80125c6:	4630      	mov	r0, r6
 80125c8:	f7fd f9ce 	bl	800f968 <dwt_modify32bitoffsetreg>
 80125cc:	43e4      	mvns	r4, r4
 80125ce:	b2a4      	uxth	r4, r4
 80125d0:	2500      	movs	r5, #0
 80125d2:	9500      	str	r5, [sp, #0]
 80125d4:	4623      	mov	r3, r4
 80125d6:	462a      	mov	r2, r5
 80125d8:	4931      	ldr	r1, [pc, #196]	; (80126a0 <dwt_ioctl+0x1a00>)
 80125da:	4630      	mov	r0, r6
 80125dc:	f7fd fec4 	bl	8010368 <dwt_modify16bitoffsetreg>
 80125e0:	9700      	str	r7, [sp, #0]
 80125e2:	4623      	mov	r3, r4
 80125e4:	462a      	mov	r2, r5
 80125e6:	492f      	ldr	r1, [pc, #188]	; (80126a4 <dwt_ioctl+0x1a04>)
 80125e8:	4630      	mov	r0, r6
 80125ea:	f7fd febd 	bl	8010368 <dwt_modify16bitoffsetreg>
 80125ee:	e25f      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 80125f0:	2700      	movs	r7, #0
 80125f2:	463c      	mov	r4, r7
 80125f4:	463b      	mov	r3, r7
 80125f6:	e7d4      	b.n	80125a2 <dwt_ioctl+0x1902>
 80125f8:	2200      	movs	r2, #0
 80125fa:	e7df      	b.n	80125bc <dwt_ioctl+0x191c>
 80125fc:	2308      	movs	r3, #8
 80125fe:	9300      	str	r3, [sp, #0]
 8012600:	23ff      	movs	r3, #255	; 0xff
 8012602:	2201      	movs	r2, #1
 8012604:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8012608:	f7fd fb1e 	bl	800fc48 <dwt_modify8bitoffsetreg>
 801260c:	4c26      	ldr	r4, [pc, #152]	; (80126a8 <dwt_ioctl+0x1a08>)
 801260e:	2302      	movs	r3, #2
 8012610:	9300      	str	r3, [sp, #0]
 8012612:	23ff      	movs	r3, #255	; 0xff
 8012614:	2203      	movs	r2, #3
 8012616:	4621      	mov	r1, r4
 8012618:	4630      	mov	r0, r6
 801261a:	f7fd fb15 	bl	800fc48 <dwt_modify8bitoffsetreg>
 801261e:	2500      	movs	r5, #0
 8012620:	9500      	str	r5, [sp, #0]
 8012622:	23f7      	movs	r3, #247	; 0xf7
 8012624:	2201      	movs	r2, #1
 8012626:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 801262a:	4630      	mov	r0, r6
 801262c:	f7fd fb0c 	bl	800fc48 <dwt_modify8bitoffsetreg>
 8012630:	9500      	str	r5, [sp, #0]
 8012632:	23fd      	movs	r3, #253	; 0xfd
 8012634:	2203      	movs	r2, #3
 8012636:	4621      	mov	r1, r4
 8012638:	4630      	mov	r0, r6
 801263a:	f7fd fb05 	bl	800fc48 <dwt_modify8bitoffsetreg>
 801263e:	e237      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012640:	2c00      	cmp	r4, #0
 8012642:	f000 82f9 	beq.w	8012c38 <dwt_ioctl+0x1f98>
 8012646:	8863      	ldrh	r3, [r4, #2]
 8012648:	00db      	lsls	r3, r3, #3
 801264a:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 801264e:	7822      	ldrb	r2, [r4, #0]
 8012650:	b10a      	cbz	r2, 8012656 <dwt_ioctl+0x19b6>
 8012652:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012656:	9300      	str	r3, [sp, #0]
 8012658:	f24f 0307 	movw	r3, #61447	; 0xf007
 801265c:	2200      	movs	r2, #0
 801265e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8012662:	4630      	mov	r0, r6
 8012664:	f7fd fe80 	bl	8010368 <dwt_modify16bitoffsetreg>
 8012668:	2500      	movs	r5, #0
 801266a:	e221      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 801266c:	2500      	movs	r5, #0
 801266e:	9500      	str	r5, [sp, #0]
 8012670:	f64f 33ff 	movw	r3, #64511	; 0xfbff
 8012674:	462a      	mov	r2, r5
 8012676:	f44f 1188 	mov.w	r1, #1114112	; 0x110000
 801267a:	f7fd fe75 	bl	8010368 <dwt_modify16bitoffsetreg>
 801267e:	e217      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012680:	2c00      	cmp	r4, #0
 8012682:	f000 82db 	beq.w	8012c3c <dwt_ioctl+0x1f9c>
 8012686:	2200      	movs	r2, #0
 8012688:	4908      	ldr	r1, [pc, #32]	; (80126ac <dwt_ioctl+0x1a0c>)
 801268a:	f7fb ff9e 	bl	800e5ca <dwt_read16bitoffsetreg>
 801268e:	8020      	strh	r0, [r4, #0]
 8012690:	2500      	movs	r5, #0
 8012692:	e20d      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012694:	0001001c 	.word	0x0001001c
 8012698:	00010018 	.word	0x00010018
 801269c:	000e000c 	.word	0x000e000c
 80126a0:	00050008 	.word	0x00050008
 80126a4:	0005000c 	.word	0x0005000c
 80126a8:	00110008 	.word	0x00110008
 80126ac:	00110048 	.word	0x00110048
 80126b0:	2c00      	cmp	r4, #0
 80126b2:	f000 82c5 	beq.w	8012c40 <dwt_ioctl+0x1fa0>
 80126b6:	7823      	ldrb	r3, [r4, #0]
 80126b8:	2b01      	cmp	r3, #1
 80126ba:	7862      	ldrb	r2, [r4, #1]
 80126bc:	78a3      	ldrb	r3, [r4, #2]
 80126be:	ea4f 23c3 	mov.w	r3, r3, lsl #11
 80126c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80126c6:	78e2      	ldrb	r2, [r4, #3]
 80126c8:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 80126cc:	7922      	ldrb	r2, [r4, #4]
 80126ce:	ea43 3382 	orr.w	r3, r3, r2, lsl #14
 80126d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80126d6:	bf0c      	ite	eq
 80126d8:	2202      	moveq	r2, #2
 80126da:	2200      	movne	r2, #0
 80126dc:	49b6      	ldr	r1, [pc, #728]	; (80129b8 <dwt_ioctl+0x1d18>)
 80126de:	f7fc fbd2 	bl	800ee86 <dwt_write16bitoffsetreg>
 80126e2:	2500      	movs	r5, #0
 80126e4:	e1e4      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 80126e6:	2c00      	cmp	r4, #0
 80126e8:	f000 82ac 	beq.w	8012c44 <dwt_ioctl+0x1fa4>
 80126ec:	6863      	ldr	r3, [r4, #4]
 80126ee:	7822      	ldrb	r2, [r4, #0]
 80126f0:	b13a      	cbz	r2, 8012702 <dwt_ioctl+0x1a62>
 80126f2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80126f6:	2200      	movs	r2, #0
 80126f8:	49b0      	ldr	r1, [pc, #704]	; (80129bc <dwt_ioctl+0x1d1c>)
 80126fa:	f7fc fc2f 	bl	800ef5c <dwt_write32bitoffsetreg>
 80126fe:	2500      	movs	r5, #0
 8012700:	e1d6      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012702:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012706:	49ae      	ldr	r1, [pc, #696]	; (80129c0 <dwt_ioctl+0x1d20>)
 8012708:	f7fc fc28 	bl	800ef5c <dwt_write32bitoffsetreg>
 801270c:	2500      	movs	r5, #0
 801270e:	e1cf      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012710:	2c00      	cmp	r4, #0
 8012712:	f000 8299 	beq.w	8012c48 <dwt_ioctl+0x1fa8>
 8012716:	7823      	ldrb	r3, [r4, #0]
 8012718:	2401      	movs	r4, #1
 801271a:	409c      	lsls	r4, r3
 801271c:	b2e4      	uxtb	r4, r4
 801271e:	2310      	movs	r3, #16
 8012720:	9300      	str	r3, [sp, #0]
 8012722:	23ff      	movs	r3, #255	; 0xff
 8012724:	2200      	movs	r2, #0
 8012726:	49a7      	ldr	r1, [pc, #668]	; (80129c4 <dwt_ioctl+0x1d24>)
 8012728:	f7fd fa8e 	bl	800fc48 <dwt_modify8bitoffsetreg>
 801272c:	43e3      	mvns	r3, r4
 801272e:	4fa2      	ldr	r7, [pc, #648]	; (80129b8 <dwt_ioctl+0x1d18>)
 8012730:	2500      	movs	r5, #0
 8012732:	9500      	str	r5, [sp, #0]
 8012734:	b2db      	uxtb	r3, r3
 8012736:	462a      	mov	r2, r5
 8012738:	4639      	mov	r1, r7
 801273a:	4630      	mov	r0, r6
 801273c:	f7fd fa84 	bl	800fc48 <dwt_modify8bitoffsetreg>
 8012740:	9400      	str	r4, [sp, #0]
 8012742:	23ff      	movs	r3, #255	; 0xff
 8012744:	462a      	mov	r2, r5
 8012746:	4639      	mov	r1, r7
 8012748:	4630      	mov	r0, r6
 801274a:	f7fd fa7d 	bl	800fc48 <dwt_modify8bitoffsetreg>
 801274e:	e1af      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012750:	2c00      	cmp	r4, #0
 8012752:	f000 827b 	beq.w	8012c4c <dwt_ioctl+0x1fac>
 8012756:	7822      	ldrb	r2, [r4, #0]
 8012758:	7863      	ldrb	r3, [r4, #1]
 801275a:	b19b      	cbz	r3, 8012784 <dwt_ioctl+0x1ae4>
 801275c:	2a00      	cmp	r2, #0
 801275e:	f040 8297 	bne.w	8012c90 <dwt_ioctl+0x1ff0>
 8012762:	2400      	movs	r4, #0
 8012764:	9400      	str	r4, [sp, #0]
 8012766:	f06f 73c0 	mvn.w	r3, #25165824	; 0x1800000
 801276a:	4622      	mov	r2, r4
 801276c:	2110      	movs	r1, #16
 801276e:	f7fd f8fb 	bl	800f968 <dwt_modify32bitoffsetreg>
 8012772:	9400      	str	r4, [sp, #0]
 8012774:	4b94      	ldr	r3, [pc, #592]	; (80129c8 <dwt_ioctl+0x1d28>)
 8012776:	4622      	mov	r2, r4
 8012778:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 801277c:	4630      	mov	r0, r6
 801277e:	f7fd f8f3 	bl	800f968 <dwt_modify32bitoffsetreg>
 8012782:	e017      	b.n	80127b4 <dwt_ioctl+0x1b14>
 8012784:	2a00      	cmp	r2, #0
 8012786:	f000 8285 	beq.w	8012c94 <dwt_ioctl+0x1ff4>
 801278a:	f44f 4500 	mov.w	r5, #32768	; 0x8000
 801278e:	2400      	movs	r4, #0
 8012790:	9400      	str	r4, [sp, #0]
 8012792:	f06f 73c0 	mvn.w	r3, #25165824	; 0x1800000
 8012796:	4622      	mov	r2, r4
 8012798:	2110      	movs	r1, #16
 801279a:	4630      	mov	r0, r6
 801279c:	f7fd f8e4 	bl	800f968 <dwt_modify32bitoffsetreg>
 80127a0:	9500      	str	r5, [sp, #0]
 80127a2:	4b89      	ldr	r3, [pc, #548]	; (80129c8 <dwt_ioctl+0x1d28>)
 80127a4:	4622      	mov	r2, r4
 80127a6:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 80127aa:	4630      	mov	r0, r6
 80127ac:	f7fd f8dc 	bl	800f968 <dwt_modify32bitoffsetreg>
 80127b0:	f04f 74c0 	mov.w	r4, #25165824	; 0x1800000
 80127b4:	9400      	str	r4, [sp, #0]
 80127b6:	f04f 33ff 	mov.w	r3, #4294967295
 80127ba:	2200      	movs	r2, #0
 80127bc:	2110      	movs	r1, #16
 80127be:	4630      	mov	r0, r6
 80127c0:	f7fd f8d2 	bl	800f968 <dwt_modify32bitoffsetreg>
 80127c4:	2500      	movs	r5, #0
 80127c6:	e173      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 80127c8:	2c00      	cmp	r4, #0
 80127ca:	f000 8241 	beq.w	8012c50 <dwt_ioctl+0x1fb0>
 80127ce:	7823      	ldrb	r3, [r4, #0]
 80127d0:	b93b      	cbnz	r3, 80127e2 <dwt_ioctl+0x1b42>
 80127d2:	2500      	movs	r5, #0
 80127d4:	9500      	str	r5, [sp, #0]
 80127d6:	23df      	movs	r3, #223	; 0xdf
 80127d8:	2203      	movs	r2, #3
 80127da:	497c      	ldr	r1, [pc, #496]	; (80129cc <dwt_ioctl+0x1d2c>)
 80127dc:	f7fd fa34 	bl	800fc48 <dwt_modify8bitoffsetreg>
 80127e0:	e166      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 80127e2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80127e6:	9300      	str	r3, [sp, #0]
 80127e8:	f04f 33ff 	mov.w	r3, #4294967295
 80127ec:	2200      	movs	r2, #0
 80127ee:	4977      	ldr	r1, [pc, #476]	; (80129cc <dwt_ioctl+0x1d2c>)
 80127f0:	f7fd f8ba 	bl	800f968 <dwt_modify32bitoffsetreg>
 80127f4:	2500      	movs	r5, #0
 80127f6:	e15b      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 80127f8:	2c00      	cmp	r4, #0
 80127fa:	f000 822b 	beq.w	8012c54 <dwt_ioctl+0x1fb4>
 80127fe:	7823      	ldrb	r3, [r4, #0]
 8012800:	b93b      	cbnz	r3, 8012812 <dwt_ioctl+0x1b72>
 8012802:	2500      	movs	r5, #0
 8012804:	9500      	str	r5, [sp, #0]
 8012806:	237f      	movs	r3, #127	; 0x7f
 8012808:	2203      	movs	r2, #3
 801280a:	4971      	ldr	r1, [pc, #452]	; (80129d0 <dwt_ioctl+0x1d30>)
 801280c:	f7fd fa1c 	bl	800fc48 <dwt_modify8bitoffsetreg>
 8012810:	e14e      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012812:	2380      	movs	r3, #128	; 0x80
 8012814:	9300      	str	r3, [sp, #0]
 8012816:	23ff      	movs	r3, #255	; 0xff
 8012818:	2203      	movs	r2, #3
 801281a:	496d      	ldr	r1, [pc, #436]	; (80129d0 <dwt_ioctl+0x1d30>)
 801281c:	f7fd fa14 	bl	800fc48 <dwt_modify8bitoffsetreg>
 8012820:	2500      	movs	r5, #0
 8012822:	e145      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012824:	2c00      	cmp	r4, #0
 8012826:	f000 8217 	beq.w	8012c58 <dwt_ioctl+0x1fb8>
 801282a:	b2e3      	uxtb	r3, r4
 801282c:	1c9a      	adds	r2, r3, #2
 801282e:	2301      	movs	r3, #1
 8012830:	4093      	lsls	r3, r2
 8012832:	3b01      	subs	r3, #1
 8012834:	b2db      	uxtb	r3, r3
 8012836:	2200      	movs	r2, #0
 8012838:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 801283c:	f7fc fd72 	bl	800f324 <dwt_write8bitoffsetreg>
 8012840:	2500      	movs	r5, #0
 8012842:	e135      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012844:	2c00      	cmp	r4, #0
 8012846:	f000 8209 	beq.w	8012c5c <dwt_ioctl+0x1fbc>
 801284a:	7ae3      	ldrb	r3, [r4, #11]
 801284c:	2b00      	cmp	r3, #0
 801284e:	f000 8207 	beq.w	8012c60 <dwt_ioctl+0x1fc0>
 8012852:	7b63      	ldrb	r3, [r4, #13]
 8012854:	2b01      	cmp	r3, #1
 8012856:	7b20      	ldrb	r0, [r4, #12]
 8012858:	bf94      	ite	ls
 801285a:	2203      	movls	r2, #3
 801285c:	2204      	movhi	r2, #4
 801285e:	2110      	movs	r1, #16
 8012860:	4b5c      	ldr	r3, [pc, #368]	; (80129d4 <dwt_ioctl+0x1d34>)
 8012862:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8012866:	f7fb fdf5 	bl	800e454 <get_sts_mnth>
 801286a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801286e:	9000      	str	r0, [sp, #0]
 8012870:	f64f 7380 	movw	r3, #65408	; 0xff80
 8012874:	2202      	movs	r2, #2
 8012876:	4958      	ldr	r1, [pc, #352]	; (80129d8 <dwt_ioctl+0x1d38>)
 8012878:	4630      	mov	r0, r6
 801287a:	f7fd fd75 	bl	8010368 <dwt_modify16bitoffsetreg>
 801287e:	2394      	movs	r3, #148	; 0x94
 8012880:	2200      	movs	r2, #0
 8012882:	4956      	ldr	r1, [pc, #344]	; (80129dc <dwt_ioctl+0x1d3c>)
 8012884:	4630      	mov	r0, r6
 8012886:	f7fc fd4d 	bl	800f324 <dwt_write8bitoffsetreg>
 801288a:	2500      	movs	r5, #0
 801288c:	e110      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 801288e:	2c00      	cmp	r4, #0
 8012890:	f000 81e8 	beq.w	8012c64 <dwt_ioctl+0x1fc4>
 8012894:	2200      	movs	r2, #0
 8012896:	4952      	ldr	r1, [pc, #328]	; (80129e0 <dwt_ioctl+0x1d40>)
 8012898:	f7fb fe81 	bl	800e59e <dwt_read32bitoffsetreg>
 801289c:	6020      	str	r0, [r4, #0]
 801289e:	2500      	movs	r5, #0
 80128a0:	e106      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 80128a2:	2c00      	cmp	r4, #0
 80128a4:	f000 81e0 	beq.w	8012c68 <dwt_ioctl+0x1fc8>
 80128a8:	2200      	movs	r2, #0
 80128aa:	494e      	ldr	r1, [pc, #312]	; (80129e4 <dwt_ioctl+0x1d44>)
 80128ac:	f7fb fe77 	bl	800e59e <dwt_read32bitoffsetreg>
 80128b0:	6020      	str	r0, [r4, #0]
 80128b2:	2500      	movs	r5, #0
 80128b4:	e0fc      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 80128b6:	2c00      	cmp	r4, #0
 80128b8:	f000 81d8 	beq.w	8012c6c <dwt_ioctl+0x1fcc>
 80128bc:	f44f 13a8 	mov.w	r3, #1376256	; 0x150000
 80128c0:	6023      	str	r3, [r4, #0]
 80128c2:	2500      	movs	r5, #0
 80128c4:	e0f4      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 80128c6:	2c00      	cmp	r4, #0
 80128c8:	f000 81d2 	beq.w	8012c70 <dwt_ioctl+0x1fd0>
 80128cc:	2500      	movs	r5, #0
 80128ce:	950a      	str	r5, [sp, #40]	; 0x28
 80128d0:	af0c      	add	r7, sp, #48	; 0x30
 80128d2:	2319      	movs	r3, #25
 80128d4:	f847 3d04 	str.w	r3, [r7, #-4]!
 80128d8:	9700      	str	r7, [sp, #0]
 80128da:	2304      	movs	r3, #4
 80128dc:	462a      	mov	r2, r5
 80128de:	4942      	ldr	r1, [pc, #264]	; (80129e8 <dwt_ioctl+0x1d48>)
 80128e0:	f7fc fac6 	bl	800ee70 <dwt_writetodevice>
 80128e4:	f641 7348 	movw	r3, #8008	; 0x1f48
 80128e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80128ea:	9700      	str	r7, [sp, #0]
 80128ec:	2304      	movs	r3, #4
 80128ee:	462a      	mov	r2, r5
 80128f0:	493e      	ldr	r1, [pc, #248]	; (80129ec <dwt_ioctl+0x1d4c>)
 80128f2:	4630      	mov	r0, r6
 80128f4:	f7fc fabc 	bl	800ee70 <dwt_writetodevice>
 80128f8:	ab0a      	add	r3, sp, #40	; 0x28
 80128fa:	9300      	str	r3, [sp, #0]
 80128fc:	2304      	movs	r3, #4
 80128fe:	462a      	mov	r2, r5
 8012900:	f44f 11e8 	mov.w	r1, #1900544	; 0x1d0000
 8012904:	4630      	mov	r0, r6
 8012906:	f7fb fe40 	bl	800e58a <dwt_readfromdevice>
 801290a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801290c:	6023      	str	r3, [r4, #0]
 801290e:	e0cf      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012910:	2c00      	cmp	r4, #0
 8012912:	f000 81af 	beq.w	8012c74 <dwt_ioctl+0x1fd4>
 8012916:	2200      	movs	r2, #0
 8012918:	4935      	ldr	r1, [pc, #212]	; (80129f0 <dwt_ioctl+0x1d50>)
 801291a:	f7fb fe40 	bl	800e59e <dwt_read32bitoffsetreg>
 801291e:	b280      	uxth	r0, r0
 8012920:	6020      	str	r0, [r4, #0]
 8012922:	2200      	movs	r2, #0
 8012924:	4933      	ldr	r1, [pc, #204]	; (80129f4 <dwt_ioctl+0x1d54>)
 8012926:	4630      	mov	r0, r6
 8012928:	f7fb fe39 	bl	800e59e <dwt_read32bitoffsetreg>
 801292c:	0d43      	lsrs	r3, r0, #21
 801292e:	019b      	lsls	r3, r3, #6
 8012930:	b29b      	uxth	r3, r3
 8012932:	6063      	str	r3, [r4, #4]
 8012934:	2500      	movs	r5, #0
 8012936:	e0bb      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012938:	2c00      	cmp	r4, #0
 801293a:	f000 819d 	beq.w	8012c78 <dwt_ioctl+0x1fd8>
 801293e:	7d63      	ldrb	r3, [r4, #21]
 8012940:	b133      	cbz	r3, 8012950 <dwt_ioctl+0x1cb0>
 8012942:	2b01      	cmp	r3, #1
 8012944:	d062      	beq.n	8012a0c <dwt_ioctl+0x1d6c>
 8012946:	2b02      	cmp	r3, #2
 8012948:	f000 8089 	beq.w	8012a5e <dwt_ioctl+0x1dbe>
 801294c:	23ff      	movs	r3, #255	; 0xff
 801294e:	e02f      	b.n	80129b0 <dwt_ioctl+0x1d10>
 8012950:	2200      	movs	r2, #0
 8012952:	4929      	ldr	r1, [pc, #164]	; (80129f8 <dwt_ioctl+0x1d58>)
 8012954:	f7fb fe23 	bl	800e59e <dwt_read32bitoffsetreg>
 8012958:	f3c0 000b 	ubfx	r0, r0, #0, #12
 801295c:	6020      	str	r0, [r4, #0]
 801295e:	2200      	movs	r2, #0
 8012960:	4926      	ldr	r1, [pc, #152]	; (80129fc <dwt_ioctl+0x1d5c>)
 8012962:	4630      	mov	r0, r6
 8012964:	f7fb fe1b 	bl	800e59e <dwt_read32bitoffsetreg>
 8012968:	f3c0 0015 	ubfx	r0, r0, #0, #22
 801296c:	6060      	str	r0, [r4, #4]
 801296e:	2200      	movs	r2, #0
 8012970:	4923      	ldr	r1, [pc, #140]	; (8012a00 <dwt_ioctl+0x1d60>)
 8012972:	4630      	mov	r0, r6
 8012974:	f7fb fe13 	bl	800e59e <dwt_read32bitoffsetreg>
 8012978:	f3c0 0015 	ubfx	r0, r0, #0, #22
 801297c:	60a0      	str	r0, [r4, #8]
 801297e:	2200      	movs	r2, #0
 8012980:	4920      	ldr	r1, [pc, #128]	; (8012a04 <dwt_ioctl+0x1d64>)
 8012982:	4630      	mov	r0, r6
 8012984:	f7fb fe0b 	bl	800e59e <dwt_read32bitoffsetreg>
 8012988:	f3c0 0015 	ubfx	r0, r0, #0, #22
 801298c:	60e0      	str	r0, [r4, #12]
 801298e:	2200      	movs	r2, #0
 8012990:	491d      	ldr	r1, [pc, #116]	; (8012a08 <dwt_ioctl+0x1d68>)
 8012992:	4630      	mov	r0, r6
 8012994:	f7fb fe03 	bl	800e59e <dwt_read32bitoffsetreg>
 8012998:	f3c0 0013 	ubfx	r0, r0, #0, #20
 801299c:	6120      	str	r0, [r4, #16]
 801299e:	2203      	movs	r2, #3
 80129a0:	490f      	ldr	r1, [pc, #60]	; (80129e0 <dwt_ioctl+0x1d40>)
 80129a2:	4630      	mov	r0, r6
 80129a4:	f7fb fe50 	bl	800e648 <dwt_read8bitoffsetreg>
 80129a8:	f3c0 1002 	ubfx	r0, r0, #4, #3
 80129ac:	7520      	strb	r0, [r4, #20]
 80129ae:	2300      	movs	r3, #0
 80129b0:	75a3      	strb	r3, [r4, #22]
 80129b2:	2500      	movs	r5, #0
 80129b4:	e07c      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 80129b6:	bf00      	nop
 80129b8:	0011003c 	.word	0x0011003c
 80129bc:	00110044 	.word	0x00110044
 80129c0:	00110040 	.word	0x00110040
 80129c4:	00070048 	.word	0x00070048
 80129c8:	f7fc0fff 	.word	0xf7fc0fff
 80129cc:	000f0028 	.word	0x000f0028
 80129d0:	0007001c 	.word	0x0007001c
 80129d4:	08013590 	.word	0x08013590
 80129d8:	000e0014 	.word	0x000e0014
 80129dc:	000e0018 	.word	0x000e0018
 80129e0:	00030054 	.word	0x00030054
 80129e4:	000f004c 	.word	0x000f004c
 80129e8:	001f0004 	.word	0x001f0004
 80129ec:	001f0008 	.word	0x001f0008
 80129f0:	000c0048 	.word	0x000c0048
 80129f4:	000c0028 	.word	0x000c0028
 80129f8:	000c0058 	.word	0x000c0058
 80129fc:	000c0030 	.word	0x000c0030
 8012a00:	000c0034 	.word	0x000c0034
 8012a04:	000c0038 	.word	0x000c0038
 8012a08:	000c002c 	.word	0x000c002c
 8012a0c:	2200      	movs	r2, #0
 8012a0e:	49aa      	ldr	r1, [pc, #680]	; (8012cb8 <dwt_ioctl+0x2018>)
 8012a10:	f7fb fdc5 	bl	800e59e <dwt_read32bitoffsetreg>
 8012a14:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8012a18:	6020      	str	r0, [r4, #0]
 8012a1a:	2200      	movs	r2, #0
 8012a1c:	49a7      	ldr	r1, [pc, #668]	; (8012cbc <dwt_ioctl+0x201c>)
 8012a1e:	4630      	mov	r0, r6
 8012a20:	f7fb fdbd 	bl	800e59e <dwt_read32bitoffsetreg>
 8012a24:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8012a28:	6060      	str	r0, [r4, #4]
 8012a2a:	2200      	movs	r2, #0
 8012a2c:	49a4      	ldr	r1, [pc, #656]	; (8012cc0 <dwt_ioctl+0x2020>)
 8012a2e:	4630      	mov	r0, r6
 8012a30:	f7fb fdb5 	bl	800e59e <dwt_read32bitoffsetreg>
 8012a34:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8012a38:	60a0      	str	r0, [r4, #8]
 8012a3a:	2200      	movs	r2, #0
 8012a3c:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
 8012a40:	4630      	mov	r0, r6
 8012a42:	f7fb fdac 	bl	800e59e <dwt_read32bitoffsetreg>
 8012a46:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8012a4a:	60e0      	str	r0, [r4, #12]
 8012a4c:	2200      	movs	r2, #0
 8012a4e:	499d      	ldr	r1, [pc, #628]	; (8012cc4 <dwt_ioctl+0x2024>)
 8012a50:	4630      	mov	r0, r6
 8012a52:	f7fb fda4 	bl	800e59e <dwt_read32bitoffsetreg>
 8012a56:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8012a5a:	6120      	str	r0, [r4, #16]
 8012a5c:	e79f      	b.n	801299e <dwt_ioctl+0x1cfe>
 8012a5e:	2200      	movs	r2, #0
 8012a60:	4999      	ldr	r1, [pc, #612]	; (8012cc8 <dwt_ioctl+0x2028>)
 8012a62:	f7fb fd9c 	bl	800e59e <dwt_read32bitoffsetreg>
 8012a66:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8012a6a:	6020      	str	r0, [r4, #0]
 8012a6c:	2200      	movs	r2, #0
 8012a6e:	4997      	ldr	r1, [pc, #604]	; (8012ccc <dwt_ioctl+0x202c>)
 8012a70:	4630      	mov	r0, r6
 8012a72:	f7fb fd94 	bl	800e59e <dwt_read32bitoffsetreg>
 8012a76:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8012a7a:	6060      	str	r0, [r4, #4]
 8012a7c:	2200      	movs	r2, #0
 8012a7e:	4994      	ldr	r1, [pc, #592]	; (8012cd0 <dwt_ioctl+0x2030>)
 8012a80:	4630      	mov	r0, r6
 8012a82:	f7fb fd8c 	bl	800e59e <dwt_read32bitoffsetreg>
 8012a86:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8012a8a:	60a0      	str	r0, [r4, #8]
 8012a8c:	2200      	movs	r2, #0
 8012a8e:	4991      	ldr	r1, [pc, #580]	; (8012cd4 <dwt_ioctl+0x2034>)
 8012a90:	4630      	mov	r0, r6
 8012a92:	f7fb fd84 	bl	800e59e <dwt_read32bitoffsetreg>
 8012a96:	f3c0 0015 	ubfx	r0, r0, #0, #22
 8012a9a:	60e0      	str	r0, [r4, #12]
 8012a9c:	2200      	movs	r2, #0
 8012a9e:	498e      	ldr	r1, [pc, #568]	; (8012cd8 <dwt_ioctl+0x2038>)
 8012aa0:	4630      	mov	r0, r6
 8012aa2:	f7fb fd7c 	bl	800e59e <dwt_read32bitoffsetreg>
 8012aa6:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8012aaa:	6120      	str	r0, [r4, #16]
 8012aac:	e777      	b.n	801299e <dwt_ioctl+0x1cfe>
 8012aae:	2500      	movs	r5, #0
 8012ab0:	4628      	mov	r0, r5
 8012ab2:	b00d      	add	sp, #52	; 0x34
 8012ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ab8:	2500      	movs	r5, #0
 8012aba:	e7f9      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012abc:	2500      	movs	r5, #0
 8012abe:	e7f7      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012ac0:	2500      	movs	r5, #0
 8012ac2:	e7f5      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012ac4:	2500      	movs	r5, #0
 8012ac6:	e7f3      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012ac8:	2500      	movs	r5, #0
 8012aca:	e7f1      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012acc:	2500      	movs	r5, #0
 8012ace:	e7ef      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012ad0:	2500      	movs	r5, #0
 8012ad2:	e7ed      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012ad4:	2500      	movs	r5, #0
 8012ad6:	e7eb      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012ad8:	2500      	movs	r5, #0
 8012ada:	e7e9      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012adc:	2500      	movs	r5, #0
 8012ade:	e7e7      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012ae0:	2500      	movs	r5, #0
 8012ae2:	e7e5      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012ae4:	2500      	movs	r5, #0
 8012ae6:	e7e3      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012ae8:	2500      	movs	r5, #0
 8012aea:	e7e1      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012aec:	2500      	movs	r5, #0
 8012aee:	e7df      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012af0:	2500      	movs	r5, #0
 8012af2:	e7dd      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012af4:	2500      	movs	r5, #0
 8012af6:	e7db      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012af8:	2500      	movs	r5, #0
 8012afa:	e7d9      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012afc:	2500      	movs	r5, #0
 8012afe:	e7d7      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012b00:	2500      	movs	r5, #0
 8012b02:	e7d5      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012b04:	2500      	movs	r5, #0
 8012b06:	e7d3      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012b08:	2500      	movs	r5, #0
 8012b0a:	e7d1      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012b0c:	2500      	movs	r5, #0
 8012b0e:	e7cf      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012b10:	2500      	movs	r5, #0
 8012b12:	e7cd      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012b14:	2500      	movs	r5, #0
 8012b16:	e7cb      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012b18:	2500      	movs	r5, #0
 8012b1a:	e7c9      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012b1c:	2500      	movs	r5, #0
 8012b1e:	e7c7      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012b20:	2500      	movs	r5, #0
 8012b22:	e7c5      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012b24:	2500      	movs	r5, #0
 8012b26:	e7c3      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012b28:	2500      	movs	r5, #0
 8012b2a:	e7c1      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012b2c:	2500      	movs	r5, #0
 8012b2e:	e7bf      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012b30:	2500      	movs	r5, #0
 8012b32:	e7bd      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012b34:	2500      	movs	r5, #0
 8012b36:	e7bb      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012b38:	2500      	movs	r5, #0
 8012b3a:	e7b9      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012b3c:	2500      	movs	r5, #0
 8012b3e:	e7b7      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012b40:	2500      	movs	r5, #0
 8012b42:	e7b5      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012b44:	2500      	movs	r5, #0
 8012b46:	e7b3      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012b48:	2500      	movs	r5, #0
 8012b4a:	e7b1      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012b4c:	2500      	movs	r5, #0
 8012b4e:	e7af      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012b50:	2500      	movs	r5, #0
 8012b52:	e7ad      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012b54:	2500      	movs	r5, #0
 8012b56:	e7ab      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012b58:	2500      	movs	r5, #0
 8012b5a:	e7a9      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012b5c:	2500      	movs	r5, #0
 8012b5e:	e7a7      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012b60:	2500      	movs	r5, #0
 8012b62:	e7a5      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012b64:	2500      	movs	r5, #0
 8012b66:	e7a3      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012b68:	2500      	movs	r5, #0
 8012b6a:	e7a1      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012b6c:	2500      	movs	r5, #0
 8012b6e:	e79f      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012b70:	2500      	movs	r5, #0
 8012b72:	e79d      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012b74:	2500      	movs	r5, #0
 8012b76:	e79b      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012b78:	2500      	movs	r5, #0
 8012b7a:	e799      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012b7c:	2500      	movs	r5, #0
 8012b7e:	e797      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012b80:	2500      	movs	r5, #0
 8012b82:	e795      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012b84:	2500      	movs	r5, #0
 8012b86:	e793      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012b88:	2500      	movs	r5, #0
 8012b8a:	e791      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012b8c:	2500      	movs	r5, #0
 8012b8e:	e78f      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012b90:	2500      	movs	r5, #0
 8012b92:	e78d      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012b94:	2500      	movs	r5, #0
 8012b96:	e78b      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012b98:	2500      	movs	r5, #0
 8012b9a:	e789      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012b9c:	2500      	movs	r5, #0
 8012b9e:	e787      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012ba0:	2500      	movs	r5, #0
 8012ba2:	e785      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012ba4:	2500      	movs	r5, #0
 8012ba6:	e783      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012ba8:	2500      	movs	r5, #0
 8012baa:	e781      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012bac:	2500      	movs	r5, #0
 8012bae:	e77f      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012bb0:	2500      	movs	r5, #0
 8012bb2:	e77d      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012bb4:	2500      	movs	r5, #0
 8012bb6:	e77b      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012bb8:	2500      	movs	r5, #0
 8012bba:	e779      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012bbc:	2500      	movs	r5, #0
 8012bbe:	e777      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012bc0:	2500      	movs	r5, #0
 8012bc2:	e775      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012bc4:	2500      	movs	r5, #0
 8012bc6:	e773      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012bc8:	2500      	movs	r5, #0
 8012bca:	e771      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012bcc:	2500      	movs	r5, #0
 8012bce:	e76f      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012bd0:	2500      	movs	r5, #0
 8012bd2:	e76d      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012bd4:	2500      	movs	r5, #0
 8012bd6:	e76b      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012bd8:	2500      	movs	r5, #0
 8012bda:	e769      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012bdc:	2500      	movs	r5, #0
 8012bde:	e767      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012be0:	2500      	movs	r5, #0
 8012be2:	e765      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012be4:	2500      	movs	r5, #0
 8012be6:	e763      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012be8:	2500      	movs	r5, #0
 8012bea:	e761      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012bec:	2500      	movs	r5, #0
 8012bee:	e75f      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012bf0:	2500      	movs	r5, #0
 8012bf2:	e75d      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012bf4:	2500      	movs	r5, #0
 8012bf6:	e75b      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012bf8:	2500      	movs	r5, #0
 8012bfa:	e759      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012bfc:	2500      	movs	r5, #0
 8012bfe:	e757      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012c00:	2500      	movs	r5, #0
 8012c02:	e755      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012c04:	2500      	movs	r5, #0
 8012c06:	e753      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012c08:	2500      	movs	r5, #0
 8012c0a:	e751      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012c0c:	2500      	movs	r5, #0
 8012c0e:	e74f      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012c10:	2500      	movs	r5, #0
 8012c12:	e74d      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012c14:	2500      	movs	r5, #0
 8012c16:	e74b      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012c18:	2500      	movs	r5, #0
 8012c1a:	e749      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012c1c:	2500      	movs	r5, #0
 8012c1e:	e747      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012c20:	f04f 35ff 	mov.w	r5, #4294967295
 8012c24:	e744      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012c26:	f04f 35ff 	mov.w	r5, #4294967295
 8012c2a:	e741      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012c2c:	2500      	movs	r5, #0
 8012c2e:	e73f      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012c30:	2500      	movs	r5, #0
 8012c32:	e73d      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012c34:	2500      	movs	r5, #0
 8012c36:	e73b      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012c38:	2500      	movs	r5, #0
 8012c3a:	e739      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012c3c:	2500      	movs	r5, #0
 8012c3e:	e737      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012c40:	2500      	movs	r5, #0
 8012c42:	e735      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012c44:	2500      	movs	r5, #0
 8012c46:	e733      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012c48:	2500      	movs	r5, #0
 8012c4a:	e731      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012c4c:	2500      	movs	r5, #0
 8012c4e:	e72f      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012c50:	2500      	movs	r5, #0
 8012c52:	e72d      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012c54:	2500      	movs	r5, #0
 8012c56:	e72b      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012c58:	2500      	movs	r5, #0
 8012c5a:	e729      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012c5c:	2500      	movs	r5, #0
 8012c5e:	e727      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012c60:	2500      	movs	r5, #0
 8012c62:	e725      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012c64:	2500      	movs	r5, #0
 8012c66:	e723      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012c68:	2500      	movs	r5, #0
 8012c6a:	e721      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012c6c:	2500      	movs	r5, #0
 8012c6e:	e71f      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012c70:	2500      	movs	r5, #0
 8012c72:	e71d      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012c74:	2500      	movs	r5, #0
 8012c76:	e71b      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012c78:	2500      	movs	r5, #0
 8012c7a:	e719      	b.n	8012ab0 <dwt_ioctl+0x1e10>
 8012c7c:	f899 3011 	ldrb.w	r3, [r9, #17]
 8012c80:	1e5a      	subs	r2, r3, #1
 8012c82:	b2d2      	uxtb	r2, r2
 8012c84:	2a01      	cmp	r2, #1
 8012c86:	f67e ae60 	bls.w	801194a <dwt_ioctl+0xcaa>
 8012c8a:	2202      	movs	r2, #2
 8012c8c:	f7fe be07 	b.w	801189e <dwt_ioctl+0xbfe>
 8012c90:	4d12      	ldr	r5, [pc, #72]	; (8012cdc <dwt_ioctl+0x203c>)
 8012c92:	e57c      	b.n	801278e <dwt_ioctl+0x1aee>
 8012c94:	2400      	movs	r4, #0
 8012c96:	9400      	str	r4, [sp, #0]
 8012c98:	f06f 73c0 	mvn.w	r3, #25165824	; 0x1800000
 8012c9c:	4622      	mov	r2, r4
 8012c9e:	2110      	movs	r1, #16
 8012ca0:	f7fc fe62 	bl	800f968 <dwt_modify32bitoffsetreg>
 8012ca4:	9400      	str	r4, [sp, #0]
 8012ca6:	4b0e      	ldr	r3, [pc, #56]	; (8012ce0 <dwt_ioctl+0x2040>)
 8012ca8:	4622      	mov	r2, r4
 8012caa:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8012cae:	4630      	mov	r0, r6
 8012cb0:	f7fc fe5a 	bl	800f968 <dwt_modify32bitoffsetreg>
 8012cb4:	e57e      	b.n	80127b4 <dwt_ioctl+0x1b14>
 8012cb6:	bf00      	nop
 8012cb8:	000d0020 	.word	0x000d0020
 8012cbc:	000c0064 	.word	0x000c0064
 8012cc0:	000c0068 	.word	0x000c0068
 8012cc4:	000c0060 	.word	0x000c0060
 8012cc8:	000d0068 	.word	0x000d0068
 8012ccc:	000d0040 	.word	0x000d0040
 8012cd0:	000d0044 	.word	0x000d0044
 8012cd4:	000d0048 	.word	0x000d0048
 8012cd8:	000d003c 	.word	0x000d003c
 8012cdc:	08001000 	.word	0x08001000
 8012ce0:	f7fc0fff 	.word	0xf7fc0fff

08012ce4 <_init>:
 8012ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012ce6:	b085      	sub	sp, #20
 8012ce8:	4604      	mov	r4, r0
 8012cea:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012cec:	6819      	ldr	r1, [r3, #0]
 8012cee:	f7fd fea1 	bl	8010a34 <ull_initialise>
 8012cf2:	4606      	mov	r6, r0
 8012cf4:	6823      	ldr	r3, [r4, #0]
 8012cf6:	691b      	ldr	r3, [r3, #16]
 8012cf8:	4798      	blx	r3
 8012cfa:	ab03      	add	r3, sp, #12
 8012cfc:	2200      	movs	r2, #0
 8012cfe:	4611      	mov	r1, r2
 8012d00:	4620      	mov	r0, r4
 8012d02:	f7fd ffcd 	bl	8010ca0 <dwt_ioctl>
 8012d06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d0a:	6819      	ldr	r1, [r3, #0]
 8012d0c:	4620      	mov	r0, r4
 8012d0e:	f7fd fc43 	bl	8010598 <ull_configure>
 8012d12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d16:	6859      	ldr	r1, [r3, #4]
 8012d18:	4620      	mov	r0, r4
 8012d1a:	f7fd f993 	bl	8010044 <ull_configuretxrf>
 8012d1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d22:	89d9      	ldrh	r1, [r3, #14]
 8012d24:	4620      	mov	r0, r4
 8012d26:	f7fc f8be 	bl	800eea6 <ull_setrxantennadelay>
 8012d2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d2e:	8999      	ldrh	r1, [r3, #12]
 8012d30:	4620      	mov	r0, r4
 8012d32:	f7fc f8c0 	bl	800eeb6 <ull_settxantennadelay>
 8012d36:	2100      	movs	r1, #0
 8012d38:	4620      	mov	r0, r4
 8012d3a:	f7fc f94a 	bl	800efd2 <ull_setrxaftertxdelay>
 8012d3e:	2500      	movs	r5, #0
 8012d40:	9500      	str	r5, [sp, #0]
 8012d42:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 8012d46:	462a      	mov	r2, r5
 8012d48:	2110      	movs	r1, #16
 8012d4a:	4620      	mov	r0, r4
 8012d4c:	f7fd fb0c 	bl	8010368 <dwt_modify16bitoffsetreg>
 8012d50:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d54:	895a      	ldrh	r2, [r3, #10]
 8012d56:	8919      	ldrh	r1, [r3, #8]
 8012d58:	4620      	mov	r0, r4
 8012d5a:	f7fd fa03 	bl	8010164 <ull_configureframefilter>
 8012d5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d62:	8a1b      	ldrh	r3, [r3, #16]
 8012d64:	2202      	movs	r2, #2
 8012d66:	210c      	movs	r1, #12
 8012d68:	4620      	mov	r0, r4
 8012d6a:	f7fc f88c 	bl	800ee86 <dwt_write16bitoffsetreg>
 8012d6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d72:	8a5b      	ldrh	r3, [r3, #18]
 8012d74:	462a      	mov	r2, r5
 8012d76:	210c      	movs	r1, #12
 8012d78:	4620      	mov	r0, r4
 8012d7a:	f7fc f884 	bl	800ee86 <dwt_write16bitoffsetreg>
 8012d7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012d80:	7a19      	ldrb	r1, [r3, #8]
 8012d82:	4620      	mov	r0, r4
 8012d84:	f7fd fb2e 	bl	80103e4 <ull_setleds>
 8012d88:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012d8a:	68d9      	ldr	r1, [r3, #12]
 8012d8c:	4620      	mov	r0, r4
 8012d8e:	f7fc f949 	bl	800f024 <ull_setlnapamode>
 8012d92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012d94:	7e0b      	ldrb	r3, [r1, #24]
 8012d96:	694a      	ldr	r2, [r1, #20]
 8012d98:	6909      	ldr	r1, [r1, #16]
 8012d9a:	4620      	mov	r0, r4
 8012d9c:	f7fd fa68 	bl	8010270 <ull_setinterrupt>
 8012da0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012da2:	7f9a      	ldrb	r2, [r3, #30]
 8012da4:	8b99      	ldrh	r1, [r3, #28]
 8012da6:	4620      	mov	r0, r4
 8012da8:	f7fc fb90 	bl	800f4cc <ull_configuresleep>
 8012dac:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8012dae:	7b53      	ldrb	r3, [r2, #13]
 8012db0:	2b2e      	cmp	r3, #46	; 0x2e
 8012db2:	d005      	beq.n	8012dc0 <_init+0xdc>
 8012db4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012db6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012dba:	f033 033f 	bics.w	r3, r3, #63	; 0x3f
 8012dbe:	d00a      	beq.n	8012dd6 <_init+0xf2>
 8012dc0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012dc2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012dc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012dca:	7353      	strb	r3, [r2, #13]
 8012dcc:	2200      	movs	r2, #0
 8012dce:	4928      	ldr	r1, [pc, #160]	; (8012e70 <_init+0x18c>)
 8012dd0:	4620      	mov	r0, r4
 8012dd2:	f7fc faa7 	bl	800f324 <dwt_write8bitoffsetreg>
 8012dd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012dd8:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 8012ddc:	4620      	mov	r0, r4
 8012dde:	f7fc ff63 	bl	800fca8 <ull_configciadiag>
 8012de2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012de4:	6a19      	ldr	r1, [r3, #32]
 8012de6:	4620      	mov	r0, r4
 8012de8:	f7fc f93c 	bl	800f064 <ull_configurestskey>
 8012dec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012dee:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8012df0:	4620      	mov	r0, r4
 8012df2:	f7fc f95b 	bl	800f0ac <ull_configurestsiv>
 8012df6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012df8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8012dfc:	bb9b      	cbnz	r3, 8012e66 <_init+0x182>
 8012dfe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012e00:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 8012e04:	4620      	mov	r0, r4
 8012e06:	f7fc fb05 	bl	800f414 <ull_configeventcounters>
 8012e0a:	f994 504c 	ldrsb.w	r5, [r4, #76]	; 0x4c
 8012e0e:	2d00      	cmp	r5, #0
 8012e10:	db26      	blt.n	8012e60 <_init+0x17c>
 8012e12:	2301      	movs	r3, #1
 8012e14:	fa03 f505 	lsl.w	r5, r3, r5
 8012e18:	b2af      	uxth	r7, r5
 8012e1a:	4a16      	ldr	r2, [pc, #88]	; (8012e74 <_init+0x190>)
 8012e1c:	4639      	mov	r1, r7
 8012e1e:	4620      	mov	r0, r4
 8012e20:	f7fc fed4 	bl	800fbcc <ull_setgpiomode>
 8012e24:	f10d 030a 	add.w	r3, sp, #10
 8012e28:	9300      	str	r3, [sp, #0]
 8012e2a:	2302      	movs	r3, #2
 8012e2c:	2200      	movs	r2, #0
 8012e2e:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8012e32:	4620      	mov	r0, r4
 8012e34:	f7fb fba9 	bl	800e58a <dwt_readfromdevice>
 8012e38:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8012e3c:	ea23 0305 	bic.w	r3, r3, r5
 8012e40:	f8ad 300a 	strh.w	r3, [sp, #10]
 8012e44:	2200      	movs	r2, #0
 8012e46:	490c      	ldr	r1, [pc, #48]	; (8012e78 <_init+0x194>)
 8012e48:	4620      	mov	r0, r4
 8012e4a:	f7fc f81c 	bl	800ee86 <dwt_write16bitoffsetreg>
 8012e4e:	f994 204d 	ldrsb.w	r2, [r4, #77]	; 0x4d
 8012e52:	fab2 f282 	clz	r2, r2
 8012e56:	0952      	lsrs	r2, r2, #5
 8012e58:	4639      	mov	r1, r7
 8012e5a:	4620      	mov	r0, r4
 8012e5c:	f7fd fb40 	bl	80104e0 <ull_setgpiovalue>
 8012e60:	4630      	mov	r0, r6
 8012e62:	b005      	add	sp, #20
 8012e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012e66:	4620      	mov	r0, r4
 8012e68:	f7fc ff54 	bl	800fd14 <ull_configurestsloadiv>
 8012e6c:	e7c7      	b.n	8012dfe <_init+0x11a>
 8012e6e:	bf00      	nop
 8012e70:	00090014 	.word	0x00090014
 8012e74:	01200492 	.word	0x01200492
 8012e78:	00050008 	.word	0x00050008

08012e7c <__errno>:
 8012e7c:	4b01      	ldr	r3, [pc, #4]	; (8012e84 <__errno+0x8>)
 8012e7e:	6818      	ldr	r0, [r3, #0]
 8012e80:	4770      	bx	lr
 8012e82:	bf00      	nop
 8012e84:	20000038 	.word	0x20000038

08012e88 <__libc_init_array>:
 8012e88:	b570      	push	{r4, r5, r6, lr}
 8012e8a:	4d0d      	ldr	r5, [pc, #52]	; (8012ec0 <__libc_init_array+0x38>)
 8012e8c:	4c0d      	ldr	r4, [pc, #52]	; (8012ec4 <__libc_init_array+0x3c>)
 8012e8e:	1b64      	subs	r4, r4, r5
 8012e90:	10a4      	asrs	r4, r4, #2
 8012e92:	2600      	movs	r6, #0
 8012e94:	42a6      	cmp	r6, r4
 8012e96:	d109      	bne.n	8012eac <__libc_init_array+0x24>
 8012e98:	4d0b      	ldr	r5, [pc, #44]	; (8012ec8 <__libc_init_array+0x40>)
 8012e9a:	4c0c      	ldr	r4, [pc, #48]	; (8012ecc <__libc_init_array+0x44>)
 8012e9c:	f000 f8da 	bl	8013054 <_init>
 8012ea0:	1b64      	subs	r4, r4, r5
 8012ea2:	10a4      	asrs	r4, r4, #2
 8012ea4:	2600      	movs	r6, #0
 8012ea6:	42a6      	cmp	r6, r4
 8012ea8:	d105      	bne.n	8012eb6 <__libc_init_array+0x2e>
 8012eaa:	bd70      	pop	{r4, r5, r6, pc}
 8012eac:	f855 3b04 	ldr.w	r3, [r5], #4
 8012eb0:	4798      	blx	r3
 8012eb2:	3601      	adds	r6, #1
 8012eb4:	e7ee      	b.n	8012e94 <__libc_init_array+0xc>
 8012eb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8012eba:	4798      	blx	r3
 8012ebc:	3601      	adds	r6, #1
 8012ebe:	e7f2      	b.n	8012ea6 <__libc_init_array+0x1e>
 8012ec0:	080135a8 	.word	0x080135a8
 8012ec4:	080135a8 	.word	0x080135a8
 8012ec8:	080135a8 	.word	0x080135a8
 8012ecc:	080135ac 	.word	0x080135ac

08012ed0 <malloc>:
 8012ed0:	4b02      	ldr	r3, [pc, #8]	; (8012edc <malloc+0xc>)
 8012ed2:	4601      	mov	r1, r0
 8012ed4:	6818      	ldr	r0, [r3, #0]
 8012ed6:	f000 b82b 	b.w	8012f30 <_malloc_r>
 8012eda:	bf00      	nop
 8012edc:	20000038 	.word	0x20000038

08012ee0 <memset>:
 8012ee0:	4402      	add	r2, r0
 8012ee2:	4603      	mov	r3, r0
 8012ee4:	4293      	cmp	r3, r2
 8012ee6:	d100      	bne.n	8012eea <memset+0xa>
 8012ee8:	4770      	bx	lr
 8012eea:	f803 1b01 	strb.w	r1, [r3], #1
 8012eee:	e7f9      	b.n	8012ee4 <memset+0x4>

08012ef0 <sbrk_aligned>:
 8012ef0:	b570      	push	{r4, r5, r6, lr}
 8012ef2:	4e0e      	ldr	r6, [pc, #56]	; (8012f2c <sbrk_aligned+0x3c>)
 8012ef4:	460c      	mov	r4, r1
 8012ef6:	6831      	ldr	r1, [r6, #0]
 8012ef8:	4605      	mov	r5, r0
 8012efa:	b911      	cbnz	r1, 8012f02 <sbrk_aligned+0x12>
 8012efc:	f000 f88c 	bl	8013018 <_sbrk_r>
 8012f00:	6030      	str	r0, [r6, #0]
 8012f02:	4621      	mov	r1, r4
 8012f04:	4628      	mov	r0, r5
 8012f06:	f000 f887 	bl	8013018 <_sbrk_r>
 8012f0a:	1c43      	adds	r3, r0, #1
 8012f0c:	d00a      	beq.n	8012f24 <sbrk_aligned+0x34>
 8012f0e:	1cc4      	adds	r4, r0, #3
 8012f10:	f024 0403 	bic.w	r4, r4, #3
 8012f14:	42a0      	cmp	r0, r4
 8012f16:	d007      	beq.n	8012f28 <sbrk_aligned+0x38>
 8012f18:	1a21      	subs	r1, r4, r0
 8012f1a:	4628      	mov	r0, r5
 8012f1c:	f000 f87c 	bl	8013018 <_sbrk_r>
 8012f20:	3001      	adds	r0, #1
 8012f22:	d101      	bne.n	8012f28 <sbrk_aligned+0x38>
 8012f24:	f04f 34ff 	mov.w	r4, #4294967295
 8012f28:	4620      	mov	r0, r4
 8012f2a:	bd70      	pop	{r4, r5, r6, pc}
 8012f2c:	20000210 	.word	0x20000210

08012f30 <_malloc_r>:
 8012f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f34:	1ccd      	adds	r5, r1, #3
 8012f36:	f025 0503 	bic.w	r5, r5, #3
 8012f3a:	3508      	adds	r5, #8
 8012f3c:	2d0c      	cmp	r5, #12
 8012f3e:	bf38      	it	cc
 8012f40:	250c      	movcc	r5, #12
 8012f42:	2d00      	cmp	r5, #0
 8012f44:	4607      	mov	r7, r0
 8012f46:	db01      	blt.n	8012f4c <_malloc_r+0x1c>
 8012f48:	42a9      	cmp	r1, r5
 8012f4a:	d905      	bls.n	8012f58 <_malloc_r+0x28>
 8012f4c:	230c      	movs	r3, #12
 8012f4e:	603b      	str	r3, [r7, #0]
 8012f50:	2600      	movs	r6, #0
 8012f52:	4630      	mov	r0, r6
 8012f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f58:	4e2e      	ldr	r6, [pc, #184]	; (8013014 <_malloc_r+0xe4>)
 8012f5a:	f000 f86d 	bl	8013038 <__malloc_lock>
 8012f5e:	6833      	ldr	r3, [r6, #0]
 8012f60:	461c      	mov	r4, r3
 8012f62:	bb34      	cbnz	r4, 8012fb2 <_malloc_r+0x82>
 8012f64:	4629      	mov	r1, r5
 8012f66:	4638      	mov	r0, r7
 8012f68:	f7ff ffc2 	bl	8012ef0 <sbrk_aligned>
 8012f6c:	1c43      	adds	r3, r0, #1
 8012f6e:	4604      	mov	r4, r0
 8012f70:	d14d      	bne.n	801300e <_malloc_r+0xde>
 8012f72:	6834      	ldr	r4, [r6, #0]
 8012f74:	4626      	mov	r6, r4
 8012f76:	2e00      	cmp	r6, #0
 8012f78:	d140      	bne.n	8012ffc <_malloc_r+0xcc>
 8012f7a:	6823      	ldr	r3, [r4, #0]
 8012f7c:	4631      	mov	r1, r6
 8012f7e:	4638      	mov	r0, r7
 8012f80:	eb04 0803 	add.w	r8, r4, r3
 8012f84:	f000 f848 	bl	8013018 <_sbrk_r>
 8012f88:	4580      	cmp	r8, r0
 8012f8a:	d13a      	bne.n	8013002 <_malloc_r+0xd2>
 8012f8c:	6821      	ldr	r1, [r4, #0]
 8012f8e:	3503      	adds	r5, #3
 8012f90:	1a6d      	subs	r5, r5, r1
 8012f92:	f025 0503 	bic.w	r5, r5, #3
 8012f96:	3508      	adds	r5, #8
 8012f98:	2d0c      	cmp	r5, #12
 8012f9a:	bf38      	it	cc
 8012f9c:	250c      	movcc	r5, #12
 8012f9e:	4629      	mov	r1, r5
 8012fa0:	4638      	mov	r0, r7
 8012fa2:	f7ff ffa5 	bl	8012ef0 <sbrk_aligned>
 8012fa6:	3001      	adds	r0, #1
 8012fa8:	d02b      	beq.n	8013002 <_malloc_r+0xd2>
 8012faa:	6823      	ldr	r3, [r4, #0]
 8012fac:	442b      	add	r3, r5
 8012fae:	6023      	str	r3, [r4, #0]
 8012fb0:	e00e      	b.n	8012fd0 <_malloc_r+0xa0>
 8012fb2:	6822      	ldr	r2, [r4, #0]
 8012fb4:	1b52      	subs	r2, r2, r5
 8012fb6:	d41e      	bmi.n	8012ff6 <_malloc_r+0xc6>
 8012fb8:	2a0b      	cmp	r2, #11
 8012fba:	d916      	bls.n	8012fea <_malloc_r+0xba>
 8012fbc:	1961      	adds	r1, r4, r5
 8012fbe:	42a3      	cmp	r3, r4
 8012fc0:	6025      	str	r5, [r4, #0]
 8012fc2:	bf18      	it	ne
 8012fc4:	6059      	strne	r1, [r3, #4]
 8012fc6:	6863      	ldr	r3, [r4, #4]
 8012fc8:	bf08      	it	eq
 8012fca:	6031      	streq	r1, [r6, #0]
 8012fcc:	5162      	str	r2, [r4, r5]
 8012fce:	604b      	str	r3, [r1, #4]
 8012fd0:	4638      	mov	r0, r7
 8012fd2:	f104 060b 	add.w	r6, r4, #11
 8012fd6:	f000 f835 	bl	8013044 <__malloc_unlock>
 8012fda:	f026 0607 	bic.w	r6, r6, #7
 8012fde:	1d23      	adds	r3, r4, #4
 8012fe0:	1af2      	subs	r2, r6, r3
 8012fe2:	d0b6      	beq.n	8012f52 <_malloc_r+0x22>
 8012fe4:	1b9b      	subs	r3, r3, r6
 8012fe6:	50a3      	str	r3, [r4, r2]
 8012fe8:	e7b3      	b.n	8012f52 <_malloc_r+0x22>
 8012fea:	6862      	ldr	r2, [r4, #4]
 8012fec:	42a3      	cmp	r3, r4
 8012fee:	bf0c      	ite	eq
 8012ff0:	6032      	streq	r2, [r6, #0]
 8012ff2:	605a      	strne	r2, [r3, #4]
 8012ff4:	e7ec      	b.n	8012fd0 <_malloc_r+0xa0>
 8012ff6:	4623      	mov	r3, r4
 8012ff8:	6864      	ldr	r4, [r4, #4]
 8012ffa:	e7b2      	b.n	8012f62 <_malloc_r+0x32>
 8012ffc:	4634      	mov	r4, r6
 8012ffe:	6876      	ldr	r6, [r6, #4]
 8013000:	e7b9      	b.n	8012f76 <_malloc_r+0x46>
 8013002:	230c      	movs	r3, #12
 8013004:	603b      	str	r3, [r7, #0]
 8013006:	4638      	mov	r0, r7
 8013008:	f000 f81c 	bl	8013044 <__malloc_unlock>
 801300c:	e7a1      	b.n	8012f52 <_malloc_r+0x22>
 801300e:	6025      	str	r5, [r4, #0]
 8013010:	e7de      	b.n	8012fd0 <_malloc_r+0xa0>
 8013012:	bf00      	nop
 8013014:	2000020c 	.word	0x2000020c

08013018 <_sbrk_r>:
 8013018:	b538      	push	{r3, r4, r5, lr}
 801301a:	4d06      	ldr	r5, [pc, #24]	; (8013034 <_sbrk_r+0x1c>)
 801301c:	2300      	movs	r3, #0
 801301e:	4604      	mov	r4, r0
 8013020:	4608      	mov	r0, r1
 8013022:	602b      	str	r3, [r5, #0]
 8013024:	f7ee f81a 	bl	800105c <_sbrk>
 8013028:	1c43      	adds	r3, r0, #1
 801302a:	d102      	bne.n	8013032 <_sbrk_r+0x1a>
 801302c:	682b      	ldr	r3, [r5, #0]
 801302e:	b103      	cbz	r3, 8013032 <_sbrk_r+0x1a>
 8013030:	6023      	str	r3, [r4, #0]
 8013032:	bd38      	pop	{r3, r4, r5, pc}
 8013034:	20000214 	.word	0x20000214

08013038 <__malloc_lock>:
 8013038:	4801      	ldr	r0, [pc, #4]	; (8013040 <__malloc_lock+0x8>)
 801303a:	f000 b809 	b.w	8013050 <__retarget_lock_acquire_recursive>
 801303e:	bf00      	nop
 8013040:	20000218 	.word	0x20000218

08013044 <__malloc_unlock>:
 8013044:	4801      	ldr	r0, [pc, #4]	; (801304c <__malloc_unlock+0x8>)
 8013046:	f000 b804 	b.w	8013052 <__retarget_lock_release_recursive>
 801304a:	bf00      	nop
 801304c:	20000218 	.word	0x20000218

08013050 <__retarget_lock_acquire_recursive>:
 8013050:	4770      	bx	lr

08013052 <__retarget_lock_release_recursive>:
 8013052:	4770      	bx	lr

08013054 <_init>:
 8013054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013056:	bf00      	nop
 8013058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801305a:	bc08      	pop	{r3}
 801305c:	469e      	mov	lr, r3
 801305e:	4770      	bx	lr

08013060 <_fini>:
 8013060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013062:	bf00      	nop
 8013064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013066:	bc08      	pop	{r3}
 8013068:	469e      	mov	lr, r3
 801306a:	4770      	bx	lr

0801306c <dw3000_driver>:
 801306c:	0312 deca ff0f ffff 3340 0801 3348 0801     ........@3..H3..
 801307c:	327c 0801 3240 0801 0007 0006               |2..@2......

08013088 <dw3700_driver>:
 8013088:	0313 deca ff0f ffff 3340 0801 3348 0801     ........@3..H3..
 8013098:	33bc 0801 3380 0801 0007 0006               .3...3......

080130a4 <dw3720_driver>:
 80130a4:	0314 deca ff0f ffff 3340 0801 3348 0801     ........@3..H3..
 80130b4:	34cc 0801 3490 0801 0007 0006               .4...4......
