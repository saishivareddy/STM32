
dwm1000-tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fe4  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08005120  08005120  00015120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800529c  0800529c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800529c  0800529c  0001529c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052a4  080052a4  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052a4  080052a4  000152a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052a8  080052a8  000152a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080052ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  20000090  0800533c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  0800533c  000201a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001573b  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003184  00000000  00000000  000357f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e70  00000000  00000000  00038978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d20  00000000  00000000  000397e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a6f7  00000000  00000000  0003a508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011173  00000000  00000000  00054bff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fa59  00000000  00000000  00065d72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f57cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ff4  00000000  00000000  000f5820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000090 	.word	0x20000090
 8000158:	00000000 	.word	0x00000000
 800015c:	08005108 	.word	0x08005108

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000094 	.word	0x20000094
 8000178:	08005108 	.word	0x08005108

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b96e 	b.w	8000470 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	468e      	mov	lr, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	f040 8083 	bne.w	80002c4 <__udivmoddi4+0x118>
 80001be:	428a      	cmp	r2, r1
 80001c0:	4617      	mov	r7, r2
 80001c2:	d947      	bls.n	8000254 <__udivmoddi4+0xa8>
 80001c4:	fab2 f382 	clz	r3, r2
 80001c8:	b14b      	cbz	r3, 80001de <__udivmoddi4+0x32>
 80001ca:	f1c3 0120 	rsb	r1, r3, #32
 80001ce:	fa05 fe03 	lsl.w	lr, r5, r3
 80001d2:	fa20 f101 	lsr.w	r1, r0, r1
 80001d6:	409f      	lsls	r7, r3
 80001d8:	ea41 0e0e 	orr.w	lr, r1, lr
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001e2:	fbbe fcf8 	udiv	ip, lr, r8
 80001e6:	fa1f f987 	uxth.w	r9, r7
 80001ea:	fb08 e21c 	mls	r2, r8, ip, lr
 80001ee:	fb0c f009 	mul.w	r0, ip, r9
 80001f2:	0c21      	lsrs	r1, r4, #16
 80001f4:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	18ba      	adds	r2, r7, r2
 80001fe:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000202:	f080 8118 	bcs.w	8000436 <__udivmoddi4+0x28a>
 8000206:	4290      	cmp	r0, r2
 8000208:	f240 8115 	bls.w	8000436 <__udivmoddi4+0x28a>
 800020c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000210:	443a      	add	r2, r7
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	fbb2 f0f8 	udiv	r0, r2, r8
 8000218:	fb08 2210 	mls	r2, r8, r0, r2
 800021c:	fb00 f109 	mul.w	r1, r0, r9
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000226:	42a1      	cmp	r1, r4
 8000228:	d909      	bls.n	800023e <__udivmoddi4+0x92>
 800022a:	193c      	adds	r4, r7, r4
 800022c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000230:	f080 8103 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000234:	42a1      	cmp	r1, r4
 8000236:	f240 8100 	bls.w	800043a <__udivmoddi4+0x28e>
 800023a:	3802      	subs	r0, #2
 800023c:	443c      	add	r4, r7
 800023e:	1a64      	subs	r4, r4, r1
 8000240:	2100      	movs	r1, #0
 8000242:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa4>
 8000248:	2200      	movs	r2, #0
 800024a:	40dc      	lsrs	r4, r3
 800024c:	e9c6 4200 	strd	r4, r2, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	b902      	cbnz	r2, 8000258 <__udivmoddi4+0xac>
 8000256:	deff      	udf	#255	; 0xff
 8000258:	fab2 f382 	clz	r3, r2
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14f      	bne.n	8000300 <__udivmoddi4+0x154>
 8000260:	1a8d      	subs	r5, r1, r2
 8000262:	2101      	movs	r1, #1
 8000264:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000268:	fa1f f882 	uxth.w	r8, r2
 800026c:	fbb5 fcfe 	udiv	ip, r5, lr
 8000270:	fb0e 551c 	mls	r5, lr, ip, r5
 8000274:	fb08 f00c 	mul.w	r0, r8, ip
 8000278:	0c22      	lsrs	r2, r4, #16
 800027a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800027e:	42a8      	cmp	r0, r5
 8000280:	d907      	bls.n	8000292 <__udivmoddi4+0xe6>
 8000282:	197d      	adds	r5, r7, r5
 8000284:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000288:	d202      	bcs.n	8000290 <__udivmoddi4+0xe4>
 800028a:	42a8      	cmp	r0, r5
 800028c:	f200 80e9 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 8000290:	4694      	mov	ip, r2
 8000292:	1a2d      	subs	r5, r5, r0
 8000294:	fbb5 f0fe 	udiv	r0, r5, lr
 8000298:	fb0e 5510 	mls	r5, lr, r0, r5
 800029c:	fb08 f800 	mul.w	r8, r8, r0
 80002a0:	b2a4      	uxth	r4, r4
 80002a2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002a6:	45a0      	cmp	r8, r4
 80002a8:	d907      	bls.n	80002ba <__udivmoddi4+0x10e>
 80002aa:	193c      	adds	r4, r7, r4
 80002ac:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b0:	d202      	bcs.n	80002b8 <__udivmoddi4+0x10c>
 80002b2:	45a0      	cmp	r8, r4
 80002b4:	f200 80d9 	bhi.w	800046a <__udivmoddi4+0x2be>
 80002b8:	4610      	mov	r0, r2
 80002ba:	eba4 0408 	sub.w	r4, r4, r8
 80002be:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002c2:	e7c0      	b.n	8000246 <__udivmoddi4+0x9a>
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d908      	bls.n	80002da <__udivmoddi4+0x12e>
 80002c8:	2e00      	cmp	r6, #0
 80002ca:	f000 80b1 	beq.w	8000430 <__udivmoddi4+0x284>
 80002ce:	2100      	movs	r1, #0
 80002d0:	e9c6 0500 	strd	r0, r5, [r6]
 80002d4:	4608      	mov	r0, r1
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d14b      	bne.n	800037a <__udivmoddi4+0x1ce>
 80002e2:	42ab      	cmp	r3, r5
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0x140>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80b9 	bhi.w	800045e <__udivmoddi4+0x2b2>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb65 0303 	sbc.w	r3, r5, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	469e      	mov	lr, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0aa      	beq.n	8000250 <__udivmoddi4+0xa4>
 80002fa:	e9c6 4e00 	strd	r4, lr, [r6]
 80002fe:	e7a7      	b.n	8000250 <__udivmoddi4+0xa4>
 8000300:	409f      	lsls	r7, r3
 8000302:	f1c3 0220 	rsb	r2, r3, #32
 8000306:	40d1      	lsrs	r1, r2
 8000308:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800030c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000310:	fa1f f887 	uxth.w	r8, r7
 8000314:	fb0e 1110 	mls	r1, lr, r0, r1
 8000318:	fa24 f202 	lsr.w	r2, r4, r2
 800031c:	409d      	lsls	r5, r3
 800031e:	fb00 fc08 	mul.w	ip, r0, r8
 8000322:	432a      	orrs	r2, r5
 8000324:	0c15      	lsrs	r5, r2, #16
 8000326:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800032a:	45ac      	cmp	ip, r5
 800032c:	fa04 f403 	lsl.w	r4, r4, r3
 8000330:	d909      	bls.n	8000346 <__udivmoddi4+0x19a>
 8000332:	197d      	adds	r5, r7, r5
 8000334:	f100 31ff 	add.w	r1, r0, #4294967295
 8000338:	f080 808f 	bcs.w	800045a <__udivmoddi4+0x2ae>
 800033c:	45ac      	cmp	ip, r5
 800033e:	f240 808c 	bls.w	800045a <__udivmoddi4+0x2ae>
 8000342:	3802      	subs	r0, #2
 8000344:	443d      	add	r5, r7
 8000346:	eba5 050c 	sub.w	r5, r5, ip
 800034a:	fbb5 f1fe 	udiv	r1, r5, lr
 800034e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000352:	fb01 f908 	mul.w	r9, r1, r8
 8000356:	b295      	uxth	r5, r2
 8000358:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800035c:	45a9      	cmp	r9, r5
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x1c4>
 8000360:	197d      	adds	r5, r7, r5
 8000362:	f101 32ff 	add.w	r2, r1, #4294967295
 8000366:	d274      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000368:	45a9      	cmp	r9, r5
 800036a:	d972      	bls.n	8000452 <__udivmoddi4+0x2a6>
 800036c:	3902      	subs	r1, #2
 800036e:	443d      	add	r5, r7
 8000370:	eba5 0509 	sub.w	r5, r5, r9
 8000374:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000378:	e778      	b.n	800026c <__udivmoddi4+0xc0>
 800037a:	f1c1 0720 	rsb	r7, r1, #32
 800037e:	408b      	lsls	r3, r1
 8000380:	fa22 fc07 	lsr.w	ip, r2, r7
 8000384:	ea4c 0c03 	orr.w	ip, ip, r3
 8000388:	fa25 f407 	lsr.w	r4, r5, r7
 800038c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000390:	fbb4 f9fe 	udiv	r9, r4, lr
 8000394:	fa1f f88c 	uxth.w	r8, ip
 8000398:	fb0e 4419 	mls	r4, lr, r9, r4
 800039c:	fa20 f307 	lsr.w	r3, r0, r7
 80003a0:	fb09 fa08 	mul.w	sl, r9, r8
 80003a4:	408d      	lsls	r5, r1
 80003a6:	431d      	orrs	r5, r3
 80003a8:	0c2b      	lsrs	r3, r5, #16
 80003aa:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003ae:	45a2      	cmp	sl, r4
 80003b0:	fa02 f201 	lsl.w	r2, r2, r1
 80003b4:	fa00 f301 	lsl.w	r3, r0, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x222>
 80003ba:	eb1c 0404 	adds.w	r4, ip, r4
 80003be:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c2:	d248      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d946      	bls.n	8000456 <__udivmoddi4+0x2aa>
 80003c8:	f1a9 0902 	sub.w	r9, r9, #2
 80003cc:	4464      	add	r4, ip
 80003ce:	eba4 040a 	sub.w	r4, r4, sl
 80003d2:	fbb4 f0fe 	udiv	r0, r4, lr
 80003d6:	fb0e 4410 	mls	r4, lr, r0, r4
 80003da:	fb00 fa08 	mul.w	sl, r0, r8
 80003de:	b2ad      	uxth	r5, r5
 80003e0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x24e>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f100 35ff 	add.w	r5, r0, #4294967295
 80003f0:	d22d      	bcs.n	800044e <__udivmoddi4+0x2a2>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d92b      	bls.n	800044e <__udivmoddi4+0x2a2>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c6      	mov	lr, r8
 800040a:	464d      	mov	r5, r9
 800040c:	d319      	bcc.n	8000442 <__udivmoddi4+0x296>
 800040e:	d016      	beq.n	800043e <__udivmoddi4+0x292>
 8000410:	b15e      	cbz	r6, 800042a <__udivmoddi4+0x27e>
 8000412:	ebb3 020e 	subs.w	r2, r3, lr
 8000416:	eb64 0405 	sbc.w	r4, r4, r5
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	fa22 f301 	lsr.w	r3, r2, r1
 8000422:	431f      	orrs	r7, r3
 8000424:	40cc      	lsrs	r4, r1
 8000426:	e9c6 7400 	strd	r7, r4, [r6]
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	4631      	mov	r1, r6
 8000432:	4630      	mov	r0, r6
 8000434:	e70c      	b.n	8000250 <__udivmoddi4+0xa4>
 8000436:	468c      	mov	ip, r1
 8000438:	e6eb      	b.n	8000212 <__udivmoddi4+0x66>
 800043a:	4610      	mov	r0, r2
 800043c:	e6ff      	b.n	800023e <__udivmoddi4+0x92>
 800043e:	4543      	cmp	r3, r8
 8000440:	d2e6      	bcs.n	8000410 <__udivmoddi4+0x264>
 8000442:	ebb8 0e02 	subs.w	lr, r8, r2
 8000446:	eb69 050c 	sbc.w	r5, r9, ip
 800044a:	3801      	subs	r0, #1
 800044c:	e7e0      	b.n	8000410 <__udivmoddi4+0x264>
 800044e:	4628      	mov	r0, r5
 8000450:	e7d3      	b.n	80003fa <__udivmoddi4+0x24e>
 8000452:	4611      	mov	r1, r2
 8000454:	e78c      	b.n	8000370 <__udivmoddi4+0x1c4>
 8000456:	4681      	mov	r9, r0
 8000458:	e7b9      	b.n	80003ce <__udivmoddi4+0x222>
 800045a:	4608      	mov	r0, r1
 800045c:	e773      	b.n	8000346 <__udivmoddi4+0x19a>
 800045e:	4608      	mov	r0, r1
 8000460:	e749      	b.n	80002f6 <__udivmoddi4+0x14a>
 8000462:	f1ac 0c02 	sub.w	ip, ip, #2
 8000466:	443d      	add	r5, r7
 8000468:	e713      	b.n	8000292 <__udivmoddi4+0xe6>
 800046a:	3802      	subs	r0, #2
 800046c:	443c      	add	r4, r7
 800046e:	e724      	b.n	80002ba <__udivmoddi4+0x10e>

08000470 <__aeabi_idiv0>:
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop

08000474 <dwt_initialise>:
#define VBAT_ADDRESS   (0x08)
#define VTEMP_ADDRESS  (0x09)
#define XTRIM_ADDRESS  (0x1E)

int dwt_initialise(int config)
{
 8000474:	b590      	push	{r4, r7, lr}
 8000476:	b087      	sub	sp, #28
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
    uint16 otp_xtaltrim_and_rev = 0;
 800047c:	2300      	movs	r3, #0
 800047e:	82fb      	strh	r3, [r7, #22]
    uint32 ldo_tune = 0;
 8000480:	2300      	movs	r3, #0
 8000482:	613b      	str	r3, [r7, #16]

    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
 8000484:	4b9f      	ldr	r3, [pc, #636]	; (8000704 <dwt_initialise+0x290>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	2200      	movs	r2, #0
 800048a:	751a      	strb	r2, [r3, #20]
    pdw1000local->wait4resp = 0; // - set to 0 - meaning wait for response not active
 800048c:	4b9d      	ldr	r3, [pc, #628]	; (8000704 <dwt_initialise+0x290>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	2200      	movs	r2, #0
 8000492:	755a      	strb	r2, [r3, #21]
    pdw1000local->sleep_mode = 0; // - set to 0 - meaning sleep mode has not been configured
 8000494:	4b9b      	ldr	r3, [pc, #620]	; (8000704 <dwt_initialise+0x290>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	2200      	movs	r2, #0
 800049a:	82da      	strh	r2, [r3, #22]

    pdw1000local->cbTxDone = NULL;
 800049c:	4b99      	ldr	r3, [pc, #612]	; (8000704 <dwt_initialise+0x290>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	2200      	movs	r2, #0
 80004a2:	629a      	str	r2, [r3, #40]	; 0x28
    pdw1000local->cbRxOk = NULL;
 80004a4:	4b97      	ldr	r3, [pc, #604]	; (8000704 <dwt_initialise+0x290>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	2200      	movs	r2, #0
 80004aa:	62da      	str	r2, [r3, #44]	; 0x2c
    pdw1000local->cbRxTo = NULL;
 80004ac:	4b95      	ldr	r3, [pc, #596]	; (8000704 <dwt_initialise+0x290>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	2200      	movs	r2, #0
 80004b2:	631a      	str	r2, [r3, #48]	; 0x30
    pdw1000local->cbRxErr = NULL;
 80004b4:	4b93      	ldr	r3, [pc, #588]	; (8000704 <dwt_initialise+0x290>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	2200      	movs	r2, #0
 80004ba:	635a      	str	r2, [r3, #52]	; 0x34
#if DWT_API_ERROR_CHECK
    pdw1000local->otp_mask = config ; // Save the READ_OTP config mask
#endif

    // Read and validate device ID, return -1 if not recognised
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
 80004bc:	f000 f926 	bl	800070c <dwt_readdevid>
 80004c0:	4603      	mov	r3, r0
 80004c2:	4a91      	ldr	r2, [pc, #580]	; (8000708 <dwt_initialise+0x294>)
 80004c4:	4293      	cmp	r3, r2
 80004c6:	d002      	beq.n	80004ce <dwt_initialise+0x5a>
    {
        return DWT_ERROR ;
 80004c8:	f04f 33ff 	mov.w	r3, #4294967295
 80004cc:	e115      	b.n	80006fa <dwt_initialise+0x286>
    }

    if(!(DWT_DW_WAKE_UP & config)) // Don't reset the device if DWT_DW_WAKE_UP bit is set, e.g. when calling this API after wake up
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	f003 0302 	and.w	r3, r3, #2
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d101      	bne.n	80004dc <dwt_initialise+0x68>
    {
        dwt_softreset(); // Make sure the device is completely reset before starting initialisation
 80004d8:	f000 fd6e 	bl	8000fb8 <dwt_softreset>
    }

    if(!((DWT_DW_WAKE_UP & config) && ((DWT_READ_OTP_TMP | DWT_READ_OTP_BAT | DWT_READ_OTP_LID | DWT_READ_OTP_PID | DWT_DW_WUP_RD_OTPREV)& config)))
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	f003 0302 	and.w	r3, r3, #2
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d004      	beq.n	80004f0 <dwt_initialise+0x7c>
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d102      	bne.n	80004f6 <dwt_initialise+0x82>
    {
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 80004f0:	2000      	movs	r0, #0
 80004f2:	f000 fc6d 	bl	8000dd0 <_dwt_enableclocks>
    }                                  // when not reading from OTP, clocks don't need to change.

    // Configure the CPLL lock detect
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
 80004f6:	2204      	movs	r2, #4
 80004f8:	2100      	movs	r1, #0
 80004fa:	2024      	movs	r0, #36	; 0x24
 80004fc:	f000 fbb1 	bl	8000c62 <dwt_write8bitoffsetreg>

    // When DW1000 IC is initialised from power up, then the LDO value should be kicked from OTP, otherwise if this API is called after
    // DW1000 IC has been woken up (DWT_DW_WAKE_UP bit is set) this can be skipped as LDO would have already been automatically
    // kicked/loaded on wake up
    if(!(DWT_DW_WAKE_UP & config))
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	f003 0302 	and.w	r3, r3, #2
 8000506:	2b00      	cmp	r3, #0
 8000508:	d116      	bne.n	8000538 <dwt_initialise+0xc4>
    {
        // Load LDO tune from OTP and kick it if there is a value actually programmed.
        ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
 800050a:	2004      	movs	r0, #4
 800050c:	f000 fbff 	bl	8000d0e <_dwt_otpread>
 8000510:	6138      	str	r0, [r7, #16]
        if((ldo_tune & 0xFF) != 0)
 8000512:	693b      	ldr	r3, [r7, #16]
 8000514:	b2db      	uxtb	r3, r3
 8000516:	2b00      	cmp	r3, #0
 8000518:	d01f      	beq.n	800055a <dwt_initialise+0xe6>
        {
            // Kick LDO tune
            dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDO kick bit
 800051a:	2202      	movs	r2, #2
 800051c:	2112      	movs	r1, #18
 800051e:	202d      	movs	r0, #45	; 0x2d
 8000520:	f000 fb9f 	bl	8000c62 <dwt_write8bitoffsetreg>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 8000524:	4b77      	ldr	r3, [pc, #476]	; (8000704 <dwt_initialise+0x290>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	8ada      	ldrh	r2, [r3, #22]
 800052a:	4b76      	ldr	r3, [pc, #472]	; (8000704 <dwt_initialise+0x290>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000532:	b292      	uxth	r2, r2
 8000534:	82da      	strh	r2, [r3, #22]
 8000536:	e010      	b.n	800055a <dwt_initialise+0xe6>
        }
    }
    else
    {   //if LDOTUNE reg contains value different from default it means it was kicked from OTP and thus set AON_WCFG_ONW_LLDO.
        if(dwt_read32bitoffsetreg(RF_CONF_ID, LDOTUNE) != LDOTUNE_DEFAULT)
 8000538:	2130      	movs	r1, #48	; 0x30
 800053a:	2028      	movs	r0, #40	; 0x28
 800053c:	f000 fb4d 	bl	8000bda <dwt_read32bitoffsetreg>
 8000540:	4603      	mov	r3, r0
 8000542:	f1b3 3f88 	cmp.w	r3, #2290649224	; 0x88888888
 8000546:	d008      	beq.n	800055a <dwt_initialise+0xe6>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO;
 8000548:	4b6e      	ldr	r3, [pc, #440]	; (8000704 <dwt_initialise+0x290>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	8ada      	ldrh	r2, [r3, #22]
 800054e:	4b6d      	ldr	r3, [pc, #436]	; (8000704 <dwt_initialise+0x290>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000556:	b292      	uxth	r2, r2
 8000558:	82da      	strh	r2, [r3, #22]
    }

    if((!(DWT_DW_WAKE_UP & config)) || ((DWT_DW_WAKE_UP & config) && (DWT_DW_WUP_RD_OTPREV & config)))
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	f003 0302 	and.w	r3, r3, #2
 8000560:	2b00      	cmp	r3, #0
 8000562:	d009      	beq.n	8000578 <dwt_initialise+0x104>
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	f003 0302 	and.w	r3, r3, #2
 800056a:	2b00      	cmp	r3, #0
 800056c:	d011      	beq.n	8000592 <dwt_initialise+0x11e>
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	f003 0308 	and.w	r3, r3, #8
 8000574:	2b00      	cmp	r3, #0
 8000576:	d00c      	beq.n	8000592 <dwt_initialise+0x11e>
    {
        // Read OTP revision number
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 8000578:	201e      	movs	r0, #30
 800057a:	f000 fbc8 	bl	8000d0e <_dwt_otpread>
 800057e:	4603      	mov	r3, r0
 8000580:	82fb      	strh	r3, [r7, #22]
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 8000582:	8afb      	ldrh	r3, [r7, #22]
 8000584:	0a1b      	lsrs	r3, r3, #8
 8000586:	b29a      	uxth	r2, r3
 8000588:	4b5e      	ldr	r3, [pc, #376]	; (8000704 <dwt_initialise+0x290>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	b2d2      	uxtb	r2, r2
 800058e:	72da      	strb	r2, [r3, #11]
 8000590:	e003      	b.n	800059a <dwt_initialise+0x126>
    }
    else
        pdw1000local->otprev = 0; // If OTP valuse are not used, if this API is called after DW1000 IC has been woken up
 8000592:	4b5c      	ldr	r3, [pc, #368]	; (8000704 <dwt_initialise+0x290>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	2200      	movs	r2, #0
 8000598:	72da      	strb	r2, [r3, #11]
                                  // (DWT_DW_WAKE_UP bit is set), set otprev to 0

    if(!(DWT_DW_WAKE_UP & config))
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	f003 0302 	and.w	r3, r3, #2
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d10b      	bne.n	80005bc <dwt_initialise+0x148>
    {
        // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
        if ((otp_xtaltrim_and_rev & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
 80005a4:	8afb      	ldrh	r3, [r7, #22]
 80005a6:	f003 031f 	and.w	r3, r3, #31
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d101      	bne.n	80005b2 <dwt_initialise+0x13e>
        {
            otp_xtaltrim_and_rev = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
 80005ae:	2310      	movs	r3, #16
 80005b0:	82fb      	strh	r3, [r7, #22]
        }
        // Configure XTAL trim
        dwt_setxtaltrim((uint8)otp_xtaltrim_and_rev);
 80005b2:	8afb      	ldrh	r3, [r7, #22]
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 fd24 	bl	8001004 <dwt_setxtaltrim>
    }

    if(DWT_READ_OTP_PID & config)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	f003 0310 	and.w	r3, r3, #16
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d007      	beq.n	80005d6 <dwt_initialise+0x162>
    {
        // Load Part from OTP
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
 80005c6:	4b4f      	ldr	r3, [pc, #316]	; (8000704 <dwt_initialise+0x290>)
 80005c8:	681c      	ldr	r4, [r3, #0]
 80005ca:	2006      	movs	r0, #6
 80005cc:	f000 fb9f 	bl	8000d0e <_dwt_otpread>
 80005d0:	4603      	mov	r3, r0
 80005d2:	6023      	str	r3, [r4, #0]
 80005d4:	e003      	b.n	80005de <dwt_initialise+0x16a>
    }
    else
    {
        pdw1000local->partID = 0;
 80005d6:	4b4b      	ldr	r3, [pc, #300]	; (8000704 <dwt_initialise+0x290>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
    }

    if(DWT_READ_OTP_LID & config)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	f003 0320 	and.w	r3, r3, #32
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d007      	beq.n	80005f8 <dwt_initialise+0x184>
    {
        // Load Lot ID from OTP
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 80005e8:	4b46      	ldr	r3, [pc, #280]	; (8000704 <dwt_initialise+0x290>)
 80005ea:	681c      	ldr	r4, [r3, #0]
 80005ec:	2007      	movs	r0, #7
 80005ee:	f000 fb8e 	bl	8000d0e <_dwt_otpread>
 80005f2:	4603      	mov	r3, r0
 80005f4:	6063      	str	r3, [r4, #4]
 80005f6:	e003      	b.n	8000600 <dwt_initialise+0x18c>
    }
    else
    {
        pdw1000local->lotID = 0;
 80005f8:	4b42      	ldr	r3, [pc, #264]	; (8000704 <dwt_initialise+0x290>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	2200      	movs	r2, #0
 80005fe:	605a      	str	r2, [r3, #4]
    }

    if(DWT_READ_OTP_BAT & config)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000606:	2b00      	cmp	r3, #0
 8000608:	d008      	beq.n	800061c <dwt_initialise+0x1a8>
    {
        // Load VBAT from OTP
        pdw1000local->vBatP = _dwt_otpread(VBAT_ADDRESS) & 0xff;
 800060a:	2008      	movs	r0, #8
 800060c:	f000 fb7f 	bl	8000d0e <_dwt_otpread>
 8000610:	4602      	mov	r2, r0
 8000612:	4b3c      	ldr	r3, [pc, #240]	; (8000704 <dwt_initialise+0x290>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	b2d2      	uxtb	r2, r2
 8000618:	721a      	strb	r2, [r3, #8]
 800061a:	e003      	b.n	8000624 <dwt_initialise+0x1b0>
    }
    else
    {
        pdw1000local->vBatP = 0;
 800061c:	4b39      	ldr	r3, [pc, #228]	; (8000704 <dwt_initialise+0x290>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2200      	movs	r2, #0
 8000622:	721a      	strb	r2, [r3, #8]
    }

    if(DWT_READ_OTP_TMP & config)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800062a:	2b00      	cmp	r3, #0
 800062c:	d008      	beq.n	8000640 <dwt_initialise+0x1cc>
    {
        // Load TEMP from OTP
        pdw1000local->tempP = _dwt_otpread(VTEMP_ADDRESS) & 0xff;
 800062e:	2009      	movs	r0, #9
 8000630:	f000 fb6d 	bl	8000d0e <_dwt_otpread>
 8000634:	4602      	mov	r2, r0
 8000636:	4b33      	ldr	r3, [pc, #204]	; (8000704 <dwt_initialise+0x290>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	b2d2      	uxtb	r2, r2
 800063c:	725a      	strb	r2, [r3, #9]
 800063e:	e003      	b.n	8000648 <dwt_initialise+0x1d4>
    }
    else
    {
        pdw1000local->tempP = 0;
 8000640:	4b30      	ldr	r3, [pc, #192]	; (8000704 <dwt_initialise+0x290>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2200      	movs	r2, #0
 8000646:	725a      	strb	r2, [r3, #9]
    }

    // Load leading edge detect code (LDE/microcode)
    if(!(DWT_DW_WAKE_UP & config))
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	f003 0302 	and.w	r3, r3, #2
 800064e:	2b00      	cmp	r3, #0
 8000650:	d121      	bne.n	8000696 <dwt_initialise+0x222>
    {
        if(DWT_LOADUCODE & config)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	f003 0301 	and.w	r3, r3, #1
 8000658:	2b00      	cmp	r3, #0
 800065a:	d00b      	beq.n	8000674 <dwt_initialise+0x200>
        {
            _dwt_loaducodefromrom();
 800065c:	f000 fba4 	bl	8000da8 <_dwt_loaducodefromrom>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up if loaded on initialisation
 8000660:	4b28      	ldr	r3, [pc, #160]	; (8000704 <dwt_initialise+0x290>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	8ada      	ldrh	r2, [r3, #22]
 8000666:	4b27      	ldr	r3, [pc, #156]	; (8000704 <dwt_initialise+0x290>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800066e:	b292      	uxth	r2, r2
 8000670:	82da      	strh	r2, [r3, #22]
 8000672:	e01e      	b.n	80006b2 <dwt_initialise+0x23e>
        }
        else // Should disable the LDERUN bit enable if LDE has not been loaded
        {
            uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
 8000674:	2105      	movs	r1, #5
 8000676:	2036      	movs	r0, #54	; 0x36
 8000678:	f000 fad6 	bl	8000c28 <dwt_read16bitoffsetreg>
 800067c:	4603      	mov	r3, r0
 800067e:	81fb      	strh	r3, [r7, #14]
            rega &= 0xFDFF ; // Clear LDERUN bit
 8000680:	89fb      	ldrh	r3, [r7, #14]
 8000682:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000686:	81fb      	strh	r3, [r7, #14]
            dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
 8000688:	89fb      	ldrh	r3, [r7, #14]
 800068a:	461a      	mov	r2, r3
 800068c:	2105      	movs	r1, #5
 800068e:	2036      	movs	r0, #54	; 0x36
 8000690:	f000 fafa 	bl	8000c88 <dwt_write16bitoffsetreg>
 8000694:	e00d      	b.n	80006b2 <dwt_initialise+0x23e>
        }
    }
    else //if DWT_DW_WUP_NO_UCODE is set then assume that the UCODE was loaded from ROM (i.e. DWT_LOADUCODE was set on power up),
    {     //thus set AON_WCFG_ONW_LLDE, otherwise don't set the AON_WCFG_ONW_LLDE bit in the sleep_mode configuration
        if((DWT_DW_WUP_NO_UCODE & config) == 0)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	f003 0304 	and.w	r3, r3, #4
 800069c:	2b00      	cmp	r3, #0
 800069e:	d108      	bne.n	80006b2 <dwt_initialise+0x23e>
        {
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE;
 80006a0:	4b18      	ldr	r3, [pc, #96]	; (8000704 <dwt_initialise+0x290>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	8ada      	ldrh	r2, [r3, #22]
 80006a6:	4b17      	ldr	r3, [pc, #92]	; (8000704 <dwt_initialise+0x290>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80006ae:	b292      	uxth	r2, r2
 80006b0:	82da      	strh	r2, [r3, #22]
        }
    }

    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 80006b2:	2001      	movs	r0, #1
 80006b4:	f000 fb8c 	bl	8000dd0 <_dwt_enableclocks>

    // The 3 bits in AON CFG1 register must be cleared to ensure proper operation of the DW1000 in DEEPSLEEP mode.
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
 80006b8:	2200      	movs	r2, #0
 80006ba:	210a      	movs	r1, #10
 80006bc:	202c      	movs	r0, #44	; 0x2c
 80006be:	f000 fad0 	bl	8000c62 <dwt_write8bitoffsetreg>

    // Read system register / store local copy
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 80006c2:	4b10      	ldr	r3, [pc, #64]	; (8000704 <dwt_initialise+0x290>)
 80006c4:	681c      	ldr	r4, [r3, #0]
 80006c6:	2100      	movs	r1, #0
 80006c8:	2004      	movs	r0, #4
 80006ca:	f000 fa86 	bl	8000bda <dwt_read32bitoffsetreg>
 80006ce:	4603      	mov	r3, r0
 80006d0:	6123      	str	r3, [r4, #16]
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 80006d2:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <dwt_initialise+0x290>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	691b      	ldr	r3, [r3, #16]
 80006d8:	0c1b      	lsrs	r3, r3, #16
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	4b09      	ldr	r3, [pc, #36]	; (8000704 <dwt_initialise+0x290>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f002 0203 	and.w	r2, r2, #3
 80006e4:	b2d2      	uxtb	r2, r2
 80006e6:	729a      	strb	r2, [r3, #10]

    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID) ;
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <dwt_initialise+0x290>)
 80006ea:	681c      	ldr	r4, [r3, #0]
 80006ec:	2100      	movs	r1, #0
 80006ee:	2008      	movs	r0, #8
 80006f0:	f000 fa73 	bl	8000bda <dwt_read32bitoffsetreg>
 80006f4:	4603      	mov	r3, r0
 80006f6:	60e3      	str	r3, [r4, #12]

    return DWT_SUCCESS ;
 80006f8:	2300      	movs	r3, #0

} // end dwt_initialise()
 80006fa:	4618      	mov	r0, r3
 80006fc:	371c      	adds	r7, #28
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd90      	pop	{r4, r7, pc}
 8000702:	bf00      	nop
 8000704:	20000000 	.word	0x20000000
 8000708:	deca0130 	.word	0xdeca0130

0800070c <dwt_readdevid>:
 * output parameters
 *
 * returns the read value which for DW1000 is 0xDECA0130
 */
uint32 dwt_readdevid(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
 8000710:	2100      	movs	r1, #0
 8000712:	2000      	movs	r0, #0
 8000714:	f000 fa61 	bl	8000bda <dwt_read32bitoffsetreg>
 8000718:	4603      	mov	r3, r0
}
 800071a:	4618      	mov	r0, r3
 800071c:	bd80      	pop	{r7, pc}
	...

08000720 <dwt_configure>:
 * output parameters
 *
 * no return value
 */
void dwt_configure(dwt_config_t *config)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b086      	sub	sp, #24
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
    uint8 nsSfd_result  = 0;
 8000728:	2300      	movs	r3, #0
 800072a:	75fb      	strb	r3, [r7, #23]
    uint8 useDWnsSFD = 0;
 800072c:	2300      	movs	r3, #0
 800072e:	75bb      	strb	r3, [r7, #22]
    uint8 chan = config->chan ;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	74fb      	strb	r3, [r7, #19]
    uint32 regval ;
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	795b      	ldrb	r3, [r3, #5]
 800073a:	461a      	mov	r2, r3
 800073c:	4ba1      	ldr	r3, [pc, #644]	; (80009c4 <dwt_configure+0x2a4>)
 800073e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000742:	82bb      	strh	r3, [r7, #20]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	785b      	ldrb	r3, [r3, #1]
 8000748:	3b01      	subs	r3, #1
 800074a:	74bb      	strb	r3, [r7, #18]
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 800074c:	7cfb      	ldrb	r3, [r7, #19]
 800074e:	2b04      	cmp	r3, #4
 8000750:	d002      	beq.n	8000758 <dwt_configure+0x38>
 8000752:	7cfb      	ldrb	r3, [r7, #19]
 8000754:	2b07      	cmp	r3, #7
 8000756:	d101      	bne.n	800075c <dwt_configure+0x3c>
 8000758:	2301      	movs	r3, #1
 800075a:	e000      	b.n	800075e <dwt_configure+0x3e>
 800075c:	2300      	movs	r3, #0
 800075e:	747b      	strb	r3, [r7, #17]
           || (config->txPreambLength == DWT_PLEN_2048) || (config->txPreambLength == DWT_PLEN_4096));
    assert((config->phrMode == DWT_PHRMODE_STD) || (config->phrMode == DWT_PHRMODE_EXT));
#endif

    // For 110 kbps we need a special setup
    if(DWT_BR_110K == config->dataRate)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	79db      	ldrb	r3, [r3, #7]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d10b      	bne.n	8000780 <dwt_configure+0x60>
    {
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 8000768:	4b97      	ldr	r3, [pc, #604]	; (80009c8 <dwt_configure+0x2a8>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	691a      	ldr	r2, [r3, #16]
 800076e:	4b96      	ldr	r3, [pc, #600]	; (80009c8 <dwt_configure+0x2a8>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000776:	611a      	str	r2, [r3, #16]
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
 8000778:	8abb      	ldrh	r3, [r7, #20]
 800077a:	08db      	lsrs	r3, r3, #3
 800077c:	82bb      	strh	r3, [r7, #20]
 800077e:	e007      	b.n	8000790 <dwt_configure+0x70>
    }
    else
    {
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
 8000780:	4b91      	ldr	r3, [pc, #580]	; (80009c8 <dwt_configure+0x2a8>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	691a      	ldr	r2, [r3, #16]
 8000786:	4b90      	ldr	r3, [pc, #576]	; (80009c8 <dwt_configure+0x2a8>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 800078e:	611a      	str	r2, [r3, #16]
    }

    pdw1000local->longFrames = config->phrMode ;
 8000790:	4b8d      	ldr	r3, [pc, #564]	; (80009c8 <dwt_configure+0x2a8>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	687a      	ldr	r2, [r7, #4]
 8000796:	7a12      	ldrb	r2, [r2, #8]
 8000798:	729a      	strb	r2, [r3, #10]

    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
 800079a:	4b8b      	ldr	r3, [pc, #556]	; (80009c8 <dwt_configure+0x2a8>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	691a      	ldr	r2, [r3, #16]
 80007a0:	4b89      	ldr	r3, [pc, #548]	; (80009c8 <dwt_configure+0x2a8>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80007a8:	611a      	str	r2, [r3, #16]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 80007aa:	4b87      	ldr	r3, [pc, #540]	; (80009c8 <dwt_configure+0x2a8>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	6919      	ldr	r1, [r3, #16]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	7a1b      	ldrb	r3, [r3, #8]
 80007b4:	041b      	lsls	r3, r3, #16
 80007b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80007ba:	4b83      	ldr	r3, [pc, #524]	; (80009c8 <dwt_configure+0x2a8>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	430a      	orrs	r2, r1
 80007c0:	611a      	str	r2, [r3, #16]

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 80007c2:	4b81      	ldr	r3, [pc, #516]	; (80009c8 <dwt_configure+0x2a8>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	691b      	ldr	r3, [r3, #16]
 80007c8:	461a      	mov	r2, r3
 80007ca:	2100      	movs	r1, #0
 80007cc:	2004      	movs	r0, #4
 80007ce:	f000 fa77 	bl	8000cc0 <dwt_write32bitoffsetreg>
    // Set the lde_replicaCoeff
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16) ;
 80007d2:	8abb      	ldrh	r3, [r7, #20]
 80007d4:	461a      	mov	r2, r3
 80007d6:	f642 0104 	movw	r1, #10244	; 0x2804
 80007da:	202e      	movs	r0, #46	; 0x2e
 80007dc:	f000 fa54 	bl	8000c88 <dwt_write16bitoffsetreg>

    _dwt_configlde(prfIndex);
 80007e0:	7cbb      	ldrb	r3, [r7, #18]
 80007e2:	4618      	mov	r0, r3
 80007e4:	f000 fac0 	bl	8000d68 <_dwt_configlde>

    // Configure PLL2/RF PLL block CFG/TUNE (for a given channel)
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
 80007e8:	7cfb      	ldrb	r3, [r7, #19]
 80007ea:	4a78      	ldr	r2, [pc, #480]	; (80009cc <dwt_configure+0x2ac>)
 80007ec:	5cd3      	ldrb	r3, [r2, r3]
 80007ee:	461a      	mov	r2, r3
 80007f0:	4b77      	ldr	r3, [pc, #476]	; (80009d0 <dwt_configure+0x2b0>)
 80007f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007f6:	461a      	mov	r2, r3
 80007f8:	2107      	movs	r1, #7
 80007fa:	202b      	movs	r0, #43	; 0x2b
 80007fc:	f000 fa60 	bl	8000cc0 <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
 8000800:	7cfb      	ldrb	r3, [r7, #19]
 8000802:	4a72      	ldr	r2, [pc, #456]	; (80009cc <dwt_configure+0x2ac>)
 8000804:	5cd3      	ldrb	r3, [r2, r3]
 8000806:	461a      	mov	r2, r3
 8000808:	4b72      	ldr	r3, [pc, #456]	; (80009d4 <dwt_configure+0x2b4>)
 800080a:	5c9b      	ldrb	r3, [r3, r2]
 800080c:	461a      	mov	r2, r3
 800080e:	210b      	movs	r1, #11
 8000810:	202b      	movs	r0, #43	; 0x2b
 8000812:	f000 fa26 	bl	8000c62 <dwt_write8bitoffsetreg>

    // Configure RF RX blocks (for specified channel/bandwidth)
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
 8000816:	7c7b      	ldrb	r3, [r7, #17]
 8000818:	4a6f      	ldr	r2, [pc, #444]	; (80009d8 <dwt_configure+0x2b8>)
 800081a:	5cd3      	ldrb	r3, [r2, r3]
 800081c:	461a      	mov	r2, r3
 800081e:	210b      	movs	r1, #11
 8000820:	2028      	movs	r0, #40	; 0x28
 8000822:	f000 fa1e 	bl	8000c62 <dwt_write8bitoffsetreg>

    // Configure RF TX blocks (for specified channel and PRF)
    // Configure RF TX control
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
 8000826:	7cfb      	ldrb	r3, [r7, #19]
 8000828:	4a68      	ldr	r2, [pc, #416]	; (80009cc <dwt_configure+0x2ac>)
 800082a:	5cd3      	ldrb	r3, [r2, r3]
 800082c:	461a      	mov	r2, r3
 800082e:	4b6b      	ldr	r3, [pc, #428]	; (80009dc <dwt_configure+0x2bc>)
 8000830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000834:	461a      	mov	r2, r3
 8000836:	210c      	movs	r1, #12
 8000838:	2028      	movs	r0, #40	; 0x28
 800083a:	f000 fa41 	bl	8000cc0 <dwt_write32bitoffsetreg>

    // Configure the baseband parameters (for specified PRF, bit rate, PAC, and SFD settings)
    // DTUNE0
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	79db      	ldrb	r3, [r3, #7]
 8000842:	4618      	mov	r0, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	799b      	ldrb	r3, [r3, #6]
 8000848:	4619      	mov	r1, r3
 800084a:	4a65      	ldr	r2, [pc, #404]	; (80009e0 <dwt_configure+0x2c0>)
 800084c:	0043      	lsls	r3, r0, #1
 800084e:	440b      	add	r3, r1
 8000850:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000854:	461a      	mov	r2, r3
 8000856:	2102      	movs	r1, #2
 8000858:	2027      	movs	r0, #39	; 0x27
 800085a:	f000 fa15 	bl	8000c88 <dwt_write16bitoffsetreg>

    // DTUNE1
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
 800085e:	7cbb      	ldrb	r3, [r7, #18]
 8000860:	4a60      	ldr	r2, [pc, #384]	; (80009e4 <dwt_configure+0x2c4>)
 8000862:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000866:	461a      	mov	r2, r3
 8000868:	2104      	movs	r1, #4
 800086a:	2027      	movs	r0, #39	; 0x27
 800086c:	f000 fa0c 	bl	8000c88 <dwt_write16bitoffsetreg>

    if(config->dataRate == DWT_BR_110K)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	79db      	ldrb	r3, [r3, #7]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d105      	bne.n	8000884 <dwt_configure+0x164>
    {
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K);
 8000878:	2264      	movs	r2, #100	; 0x64
 800087a:	2106      	movs	r1, #6
 800087c:	2027      	movs	r0, #39	; 0x27
 800087e:	f000 fa03 	bl	8000c88 <dwt_write16bitoffsetreg>
 8000882:	e018      	b.n	80008b6 <dwt_configure+0x196>
    }
    else
    {
        if(config->txPreambLength == DWT_PLEN_64)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	789b      	ldrb	r3, [r3, #2]
 8000888:	2b04      	cmp	r3, #4
 800088a:	d10a      	bne.n	80008a2 <dwt_configure+0x182>
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64);
 800088c:	2210      	movs	r2, #16
 800088e:	2106      	movs	r1, #6
 8000890:	2027      	movs	r0, #39	; 0x27
 8000892:	f000 f9f9 	bl	8000c88 <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
 8000896:	2210      	movs	r2, #16
 8000898:	2126      	movs	r1, #38	; 0x26
 800089a:	2027      	movs	r0, #39	; 0x27
 800089c:	f000 f9e1 	bl	8000c62 <dwt_write8bitoffsetreg>
 80008a0:	e009      	b.n	80008b6 <dwt_configure+0x196>
        }
        else
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8);
 80008a2:	2220      	movs	r2, #32
 80008a4:	2106      	movs	r1, #6
 80008a6:	2027      	movs	r0, #39	; 0x27
 80008a8:	f000 f9ee 	bl	8000c88 <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
 80008ac:	2228      	movs	r2, #40	; 0x28
 80008ae:	2126      	movs	r1, #38	; 0x26
 80008b0:	2027      	movs	r0, #39	; 0x27
 80008b2:	f000 f9d6 	bl	8000c62 <dwt_write8bitoffsetreg>
        }
    }

    // DTUNE2
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
 80008b6:	7cbb      	ldrb	r3, [r7, #18]
 80008b8:	687a      	ldr	r2, [r7, #4]
 80008ba:	78d2      	ldrb	r2, [r2, #3]
 80008bc:	4611      	mov	r1, r2
 80008be:	4a4a      	ldr	r2, [pc, #296]	; (80009e8 <dwt_configure+0x2c8>)
 80008c0:	009b      	lsls	r3, r3, #2
 80008c2:	440b      	add	r3, r1
 80008c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008c8:	461a      	mov	r2, r3
 80008ca:	2108      	movs	r1, #8
 80008cc:	2027      	movs	r0, #39	; 0x27
 80008ce:	f000 f9f7 	bl	8000cc0 <dwt_write32bitoffsetreg>

    // DTUNE3 (SFD timeout)
    // Don't allow 0 - SFD timeout will always be enabled
    if(config->sfdTO == 0)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	895b      	ldrh	r3, [r3, #10]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d103      	bne.n	80008e2 <dwt_configure+0x1c2>
    {
        config->sfdTO = DWT_SFDTOC_DEF;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	f241 0241 	movw	r2, #4161	; 0x1041
 80008e0:	815a      	strh	r2, [r3, #10]
    }
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	895b      	ldrh	r3, [r3, #10]
 80008e6:	461a      	mov	r2, r3
 80008e8:	2120      	movs	r1, #32
 80008ea:	2027      	movs	r0, #39	; 0x27
 80008ec:	f000 f9cc 	bl	8000c88 <dwt_write16bitoffsetreg>

    // Configure AGC parameters
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
 80008f0:	4b3e      	ldr	r3, [pc, #248]	; (80009ec <dwt_configure+0x2cc>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	461a      	mov	r2, r3
 80008f6:	210c      	movs	r1, #12
 80008f8:	2023      	movs	r0, #35	; 0x23
 80008fa:	f000 f9e1 	bl	8000cc0 <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
 80008fe:	7cbb      	ldrb	r3, [r7, #18]
 8000900:	4a3a      	ldr	r2, [pc, #232]	; (80009ec <dwt_configure+0x2cc>)
 8000902:	005b      	lsls	r3, r3, #1
 8000904:	4413      	add	r3, r2
 8000906:	889b      	ldrh	r3, [r3, #4]
 8000908:	461a      	mov	r2, r3
 800090a:	2104      	movs	r1, #4
 800090c:	2023      	movs	r0, #35	; 0x23
 800090e:	f000 f9bb 	bl	8000c88 <dwt_write16bitoffsetreg>

    // Set (non-standard) user SFD for improved performance,
    if(config->nsSFD)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	799b      	ldrb	r3, [r3, #6]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d00d      	beq.n	8000936 <dwt_configure+0x216>
    {
        // Write non standard (DW) SFD length
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	79db      	ldrb	r3, [r3, #7]
 800091e:	461a      	mov	r2, r3
 8000920:	4b33      	ldr	r3, [pc, #204]	; (80009f0 <dwt_configure+0x2d0>)
 8000922:	5c9b      	ldrb	r3, [r3, r2]
 8000924:	461a      	mov	r2, r3
 8000926:	2100      	movs	r1, #0
 8000928:	2021      	movs	r0, #33	; 0x21
 800092a:	f000 f99a 	bl	8000c62 <dwt_write8bitoffsetreg>
        nsSfd_result = 3 ;
 800092e:	2303      	movs	r3, #3
 8000930:	75fb      	strb	r3, [r7, #23]
        useDWnsSFD = 1 ;
 8000932:	2301      	movs	r3, #1
 8000934:	75bb      	strb	r3, [r7, #22]
    }
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8000936:	7cfb      	ldrb	r3, [r7, #19]
 8000938:	f003 020f 	and.w	r2, r3, #15
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 800093c:	7cfb      	ldrb	r3, [r7, #19]
 800093e:	011b      	lsls	r3, r3, #4
 8000940:	b2db      	uxtb	r3, r3
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8000942:	431a      	orrs	r2, r3
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	785b      	ldrb	r3, [r3, #1]
 8000948:	049b      	lsls	r3, r3, #18
 800094a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 800094e:	431a      	orrs	r2, r3
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 8000950:	7dfb      	ldrb	r3, [r7, #23]
 8000952:	051b      	lsls	r3, r3, #20
 8000954:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 8000958:	431a      	orrs	r2, r3
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 800095a:	7dbb      	ldrb	r3, [r7, #22]
 800095c:	045b      	lsls	r3, r3, #17
 800095e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 8000962:	431a      	orrs	r2, r3
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	791b      	ldrb	r3, [r3, #4]
 8000968:	059b      	lsls	r3, r3, #22
 800096a:	f003 63f8 	and.w	r3, r3, #130023424	; 0x7c00000
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 800096e:	431a      	orrs	r2, r3
              (CHAN_CTRL_RX_PCOD_MASK & ((uint32)config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	795b      	ldrb	r3, [r3, #5]
 8000974:	06db      	lsls	r3, r3, #27
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8000976:	4313      	orrs	r3, r2
 8000978:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(CHAN_CTRL_ID,regval) ;
 800097a:	68fa      	ldr	r2, [r7, #12]
 800097c:	2100      	movs	r1, #0
 800097e:	201f      	movs	r0, #31
 8000980:	f000 f99e 	bl	8000cc0 <dwt_write32bitoffsetreg>

    // Set up TX Preamble Size, PRF and Data Rate
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	789a      	ldrb	r2, [r3, #2]
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	785b      	ldrb	r3, [r3, #1]
 800098c:	4313      	orrs	r3, r2
 800098e:	b2db      	uxtb	r3, r3
 8000990:	0419      	lsls	r1, r3, #16
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	79db      	ldrb	r3, [r3, #7]
 8000996:	035a      	lsls	r2, r3, #13
 8000998:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <dwt_configure+0x2a8>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	430a      	orrs	r2, r1
 800099e:	60da      	str	r2, [r3, #12]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
 80009a0:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <dwt_configure+0x2a8>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	68db      	ldr	r3, [r3, #12]
 80009a6:	461a      	mov	r2, r3
 80009a8:	2100      	movs	r1, #0
 80009aa:	2008      	movs	r0, #8
 80009ac:	f000 f988 	bl	8000cc0 <dwt_write32bitoffsetreg>

    // The SFD transmit pattern is initialised by the DW1000 upon a user TX request, but (due to an IC issue) it is not done for an auto-ACK TX. The
    // SYS_CTRL write below works around this issue, by simultaneously initiating and aborting a transmission, which correctly initialises the SFD
    // after its configuration or reconfiguration.
    // This issue is not documented at the time of writing this code. It should be in next release of DW1000 User Manual (v2.09, from July 2016).
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
 80009b0:	2242      	movs	r2, #66	; 0x42
 80009b2:	2100      	movs	r1, #0
 80009b4:	200d      	movs	r0, #13
 80009b6:	f000 f954 	bl	8000c62 <dwt_write8bitoffsetreg>
} // end dwt_configure()
 80009ba:	bf00      	nop
 80009bc:	3718      	adds	r7, #24
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	080051ac 	.word	0x080051ac
 80009c8:	20000000 	.word	0x20000000
 80009cc:	0800512c 	.word	0x0800512c
 80009d0:	0800514c 	.word	0x0800514c
 80009d4:	08005164 	.word	0x08005164
 80009d8:	0800516c 	.word	0x0800516c
 80009dc:	08005134 	.word	0x08005134
 80009e0:	0800517c 	.word	0x0800517c
 80009e4:	08005188 	.word	0x08005188
 80009e8:	0800518c 	.word	0x0800518c
 80009ec:	08005170 	.word	0x08005170
 80009f0:	08005178 	.word	0x08005178

080009f4 <dwt_writetxdata>:
 * output parameters
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error
 */
int dwt_writetxdata(uint16 txFrameLength, uint8 *txFrameBytes, uint16 txBufferOffset)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	6039      	str	r1, [r7, #0]
 80009fe:	80fb      	strh	r3, [r7, #6]
 8000a00:	4613      	mov	r3, r2
 8000a02:	80bb      	strh	r3, [r7, #4]
    assert(txFrameLength >= 2);
    assert((pdw1000local->longFrames && (txFrameLength <= 1023)) || (txFrameLength <= 127));
    assert((txBufferOffset + txFrameLength) <= 1024);
#endif

    if ((txBufferOffset + txFrameLength) <= 1024)
 8000a04:	88ba      	ldrh	r2, [r7, #4]
 8000a06:	88fb      	ldrh	r3, [r7, #6]
 8000a08:	4413      	add	r3, r2
 8000a0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a0e:	dc09      	bgt.n	8000a24 <dwt_writetxdata+0x30>
    {
        // Write the data to the IC TX buffer, (-2 bytes for auto generated CRC)
        dwt_writetodevice( TX_BUFFER_ID, txBufferOffset, txFrameLength-2, txFrameBytes);
 8000a10:	88fb      	ldrh	r3, [r7, #6]
 8000a12:	3b02      	subs	r3, #2
 8000a14:	461a      	mov	r2, r3
 8000a16:	88b9      	ldrh	r1, [r7, #4]
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	2009      	movs	r0, #9
 8000a1c:	f000 f828 	bl	8000a70 <dwt_writetodevice>
        return DWT_SUCCESS;
 8000a20:	2300      	movs	r3, #0
 8000a22:	e001      	b.n	8000a28 <dwt_writetxdata+0x34>
    }
    else
    {
        return DWT_ERROR;
 8000a24:	f04f 33ff 	mov.w	r3, #4294967295
    }
} // end dwt_writetxdata()
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <dwt_writetxfctrl>:
 * output parameters
 *
 * no return value
 */
void dwt_writetxfctrl(uint16 txFrameLength, uint16 txBufferOffset, int ranging)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	603a      	str	r2, [r7, #0]
 8000a3a:	80fb      	strh	r3, [r7, #6]
 8000a3c:	460b      	mov	r3, r1
 8000a3e:	80bb      	strh	r3, [r7, #4]
    assert((ranging == 0) || (ranging == 1))
#endif

    // Write the frame length to the TX frame control register
    // pdw1000local->txFCTRL has kept configured bit rate information
    uint32 reg32 = pdw1000local->txFCTRL | txFrameLength | ((uint32)txBufferOffset << TX_FCTRL_TXBOFFS_SHFT) | ((uint32)ranging << TX_FCTRL_TR_SHFT);
 8000a40:	4b0a      	ldr	r3, [pc, #40]	; (8000a6c <dwt_writetxfctrl+0x3c>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	68da      	ldr	r2, [r3, #12]
 8000a46:	88fb      	ldrh	r3, [r7, #6]
 8000a48:	431a      	orrs	r2, r3
 8000a4a:	88bb      	ldrh	r3, [r7, #4]
 8000a4c:	059b      	lsls	r3, r3, #22
 8000a4e:	431a      	orrs	r2, r3
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	03db      	lsls	r3, r3, #15
 8000a54:	4313      	orrs	r3, r2
 8000a56:	60fb      	str	r3, [r7, #12]
    dwt_write32bitreg(TX_FCTRL_ID, reg32);
 8000a58:	68fa      	ldr	r2, [r7, #12]
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	2008      	movs	r0, #8
 8000a5e:	f000 f92f 	bl	8000cc0 <dwt_write32bitoffsetreg>
} // end dwt_writetxfctrl()
 8000a62:	bf00      	nop
 8000a64:	3710      	adds	r7, #16
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000000 	.word	0x20000000

08000a70 <dwt_writetodevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    const uint8   *buffer
)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60ba      	str	r2, [r7, #8]
 8000a78:	607b      	str	r3, [r7, #4]
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	81fb      	strh	r3, [r7, #14]
 8000a7e:	460b      	mov	r3, r1
 8000a80:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8000a82:	2300      	movs	r3, #0
 8000a84:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting WRITE operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8000a86:	89bb      	ldrh	r3, [r7, #12]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d10d      	bne.n	8000aa8 <dwt_writetodevice+0x38>
    {
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8000a8c:	89fb      	ldrh	r3, [r7, #14]
 8000a8e:	b2da      	uxtb	r2, r3
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	1c59      	adds	r1, r3, #1
 8000a94:	6179      	str	r1, [r7, #20]
 8000a96:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000a9a:	b2d2      	uxtb	r2, r2
 8000a9c:	f107 0118 	add.w	r1, r7, #24
 8000aa0:	440b      	add	r3, r1
 8000aa2:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000aa6:	e033      	b.n	8000b10 <dwt_writetodevice+0xa0>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8000aa8:	89fb      	ldrh	r3, [r7, #14]
 8000aaa:	b2da      	uxtb	r2, r3
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	1c59      	adds	r1, r3, #1
 8000ab0:	6179      	str	r1, [r7, #20]
 8000ab2:	f062 023f 	orn	r2, r2, #63	; 0x3f
 8000ab6:	b2d2      	uxtb	r2, r2
 8000ab8:	f107 0118 	add.w	r1, r7, #24
 8000abc:	440b      	add	r3, r1
 8000abe:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8000ac2:	89bb      	ldrh	r3, [r7, #12]
 8000ac4:	2b7f      	cmp	r3, #127	; 0x7f
 8000ac6:	d80a      	bhi.n	8000ade <dwt_writetodevice+0x6e>
        {
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	1c5a      	adds	r2, r3, #1
 8000acc:	617a      	str	r2, [r7, #20]
 8000ace:	89ba      	ldrh	r2, [r7, #12]
 8000ad0:	b2d2      	uxtb	r2, r2
 8000ad2:	f107 0118 	add.w	r1, r7, #24
 8000ad6:	440b      	add	r3, r1
 8000ad8:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000adc:	e018      	b.n	8000b10 <dwt_writetodevice+0xa0>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8000ade:	89bb      	ldrh	r3, [r7, #12]
 8000ae0:	b2da      	uxtb	r2, r3
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	1c59      	adds	r1, r3, #1
 8000ae6:	6179      	str	r1, [r7, #20]
 8000ae8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000aec:	b2d2      	uxtb	r2, r2
 8000aee:	f107 0118 	add.w	r1, r7, #24
 8000af2:	440b      	add	r3, r1
 8000af4:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8000af8:	89bb      	ldrh	r3, [r7, #12]
 8000afa:	09db      	lsrs	r3, r3, #7
 8000afc:	b299      	uxth	r1, r3
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	1c5a      	adds	r2, r3, #1
 8000b02:	617a      	str	r2, [r7, #20]
 8000b04:	b2ca      	uxtb	r2, r1
 8000b06:	f107 0118 	add.w	r1, r7, #24
 8000b0a:	440b      	add	r3, r1
 8000b0c:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Write it to the SPI
    writetospi(cnt,header,length,buffer);
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	b298      	uxth	r0, r3
 8000b14:	f107 0110 	add.w	r1, r7, #16
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	68ba      	ldr	r2, [r7, #8]
 8000b1c:	f000 fab4 	bl	8001088 <writetospi>
} // end dwt_writetodevice()
 8000b20:	bf00      	nop
 8000b22:	3718      	adds	r7, #24
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <dwt_readfromdevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    uint8         *buffer
)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60ba      	str	r2, [r7, #8]
 8000b30:	607b      	str	r3, [r7, #4]
 8000b32:	4603      	mov	r3, r0
 8000b34:	81fb      	strh	r3, [r7, #14]
 8000b36:	460b      	mov	r3, r1
 8000b38:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting READ operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8000b3e:	89bb      	ldrh	r3, [r7, #12]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d10a      	bne.n	8000b5a <dwt_readfromdevice+0x32>
    {
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	1c5a      	adds	r2, r3, #1
 8000b48:	617a      	str	r2, [r7, #20]
 8000b4a:	89fa      	ldrh	r2, [r7, #14]
 8000b4c:	b2d2      	uxtb	r2, r2
 8000b4e:	f107 0118 	add.w	r1, r7, #24
 8000b52:	440b      	add	r3, r1
 8000b54:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000b58:	e033      	b.n	8000bc2 <dwt_readfromdevice+0x9a>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8000b5a:	89fb      	ldrh	r3, [r7, #14]
 8000b5c:	b2da      	uxtb	r2, r3
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	1c59      	adds	r1, r3, #1
 8000b62:	6179      	str	r1, [r7, #20]
 8000b64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000b68:	b2d2      	uxtb	r2, r2
 8000b6a:	f107 0118 	add.w	r1, r7, #24
 8000b6e:	440b      	add	r3, r1
 8000b70:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8000b74:	89bb      	ldrh	r3, [r7, #12]
 8000b76:	2b7f      	cmp	r3, #127	; 0x7f
 8000b78:	d80a      	bhi.n	8000b90 <dwt_readfromdevice+0x68>
        {
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	1c5a      	adds	r2, r3, #1
 8000b7e:	617a      	str	r2, [r7, #20]
 8000b80:	89ba      	ldrh	r2, [r7, #12]
 8000b82:	b2d2      	uxtb	r2, r2
 8000b84:	f107 0118 	add.w	r1, r7, #24
 8000b88:	440b      	add	r3, r1
 8000b8a:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000b8e:	e018      	b.n	8000bc2 <dwt_readfromdevice+0x9a>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8000b90:	89bb      	ldrh	r3, [r7, #12]
 8000b92:	b2da      	uxtb	r2, r3
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	1c59      	adds	r1, r3, #1
 8000b98:	6179      	str	r1, [r7, #20]
 8000b9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000b9e:	b2d2      	uxtb	r2, r2
 8000ba0:	f107 0118 	add.w	r1, r7, #24
 8000ba4:	440b      	add	r3, r1
 8000ba6:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8000baa:	89bb      	ldrh	r3, [r7, #12]
 8000bac:	09db      	lsrs	r3, r3, #7
 8000bae:	b299      	uxth	r1, r3
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	1c5a      	adds	r2, r3, #1
 8000bb4:	617a      	str	r2, [r7, #20]
 8000bb6:	b2ca      	uxtb	r2, r1
 8000bb8:	f107 0118 	add.w	r1, r7, #24
 8000bbc:	440b      	add	r3, r1
 8000bbe:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Do the read from the SPI
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	b298      	uxth	r0, r3
 8000bc6:	f107 0110 	add.w	r1, r7, #16
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	68ba      	ldr	r2, [r7, #8]
 8000bce:	f000 fa8f 	bl	80010f0 <readfromspi>
} // end dwt_readfromdevice()
 8000bd2:	bf00      	nop
 8000bd4:	3718      	adds	r7, #24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <dwt_read32bitoffsetreg>:
 * output parameters
 *
 * returns 32 bit register value
 */
uint32 dwt_read32bitoffsetreg(int regFileID, int regOffset)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b086      	sub	sp, #24
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
 8000be2:	6039      	str	r1, [r7, #0]
    uint32  regval = 0 ;
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]
    int     j ;
    uint8   buffer[4] ;

    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	b298      	uxth	r0, r3
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	b299      	uxth	r1, r3
 8000bf0:	f107 030c 	add.w	r3, r7, #12
 8000bf4:	2204      	movs	r2, #4
 8000bf6:	f7ff ff97 	bl	8000b28 <dwt_readfromdevice>

    for (j = 3 ; j >= 0 ; j --)
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	613b      	str	r3, [r7, #16]
 8000bfe:	e00b      	b.n	8000c18 <dwt_read32bitoffsetreg+0x3e>
    {
        regval = (regval << 8) + buffer[j] ;
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	021b      	lsls	r3, r3, #8
 8000c04:	f107 010c 	add.w	r1, r7, #12
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	440a      	add	r2, r1
 8000c0c:	7812      	ldrb	r2, [r2, #0]
 8000c0e:	4413      	add	r3, r2
 8000c10:	617b      	str	r3, [r7, #20]
    for (j = 3 ; j >= 0 ; j --)
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	3b01      	subs	r3, #1
 8000c16:	613b      	str	r3, [r7, #16]
 8000c18:	693b      	ldr	r3, [r7, #16]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	daf0      	bge.n	8000c00 <dwt_read32bitoffsetreg+0x26>
    }
    return regval ;
 8000c1e:	697b      	ldr	r3, [r7, #20]

} // end dwt_read32bitoffsetreg()
 8000c20:	4618      	mov	r0, r3
 8000c22:	3718      	adds	r7, #24
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <dwt_read16bitoffsetreg>:
 * output parameters
 *
 * returns 16 bit register value
 */
uint16 dwt_read16bitoffsetreg(int regFileID, int regOffset)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	6039      	str	r1, [r7, #0]
    uint16  regval = 0 ;
 8000c32:	2300      	movs	r3, #0
 8000c34:	81fb      	strh	r3, [r7, #14]
    uint8   buffer[2] ;

    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	b298      	uxth	r0, r3
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	b299      	uxth	r1, r3
 8000c3e:	f107 030c 	add.w	r3, r7, #12
 8000c42:	2202      	movs	r2, #2
 8000c44:	f7ff ff70 	bl	8000b28 <dwt_readfromdevice>

    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
 8000c48:	7b7b      	ldrb	r3, [r7, #13]
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	021b      	lsls	r3, r3, #8
 8000c4e:	b29a      	uxth	r2, r3
 8000c50:	7b3b      	ldrb	r3, [r7, #12]
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	4413      	add	r3, r2
 8000c56:	81fb      	strh	r3, [r7, #14]
    return regval ;
 8000c58:	89fb      	ldrh	r3, [r7, #14]

} // end dwt_read16bitoffsetreg()
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <dwt_write8bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write8bitoffsetreg(int regFileID, int regOffset, uint8 regval)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b084      	sub	sp, #16
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	60f8      	str	r0, [r7, #12]
 8000c6a:	60b9      	str	r1, [r7, #8]
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	71fb      	strb	r3, [r7, #7]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	b298      	uxth	r0, r3
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	b299      	uxth	r1, r3
 8000c78:	1dfb      	adds	r3, r7, #7
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	f7ff fef8 	bl	8000a70 <dwt_writetodevice>
}
 8000c80:	bf00      	nop
 8000c82:	3710      	adds	r7, #16
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <dwt_write16bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write16bitoffsetreg(int regFileID, int regOffset, uint16 regval)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	4613      	mov	r3, r2
 8000c94:	80fb      	strh	r3, [r7, #6]
    uint8   buffer[2] ;

    buffer[0] = regval & 0xFF;
 8000c96:	88fb      	ldrh	r3, [r7, #6]
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	753b      	strb	r3, [r7, #20]
    buffer[1] = regval >> 8 ;
 8000c9c:	88fb      	ldrh	r3, [r7, #6]
 8000c9e:	0a1b      	lsrs	r3, r3, #8
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	757b      	strb	r3, [r7, #21]

    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	b298      	uxth	r0, r3
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	b299      	uxth	r1, r3
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	2202      	movs	r2, #2
 8000cb4:	f7ff fedc 	bl	8000a70 <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 8000cb8:	bf00      	nop
 8000cba:	3718      	adds	r7, #24
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <dwt_write32bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write32bitoffsetreg(int regFileID, int regOffset, uint32 regval)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	607a      	str	r2, [r7, #4]
    int     j ;
    uint8   buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
 8000ccc:	2300      	movs	r3, #0
 8000cce:	617b      	str	r3, [r7, #20]
 8000cd0:	e00d      	b.n	8000cee <dwt_write32bitoffsetreg+0x2e>
    {
        buffer[j] = regval & 0xff ;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	b2d9      	uxtb	r1, r3
 8000cd6:	f107 0210 	add.w	r2, r7, #16
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	4413      	add	r3, r2
 8000cde:	460a      	mov	r2, r1
 8000ce0:	701a      	strb	r2, [r3, #0]
        regval >>= 8 ;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	0a1b      	lsrs	r3, r3, #8
 8000ce6:	607b      	str	r3, [r7, #4]
    for ( j = 0 ; j < 4 ; j++ )
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	3301      	adds	r3, #1
 8000cec:	617b      	str	r3, [r7, #20]
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	2b03      	cmp	r3, #3
 8000cf2:	ddee      	ble.n	8000cd2 <dwt_write32bitoffsetreg+0x12>
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	b298      	uxth	r0, r3
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	b299      	uxth	r1, r3
 8000cfc:	f107 0310 	add.w	r3, r7, #16
 8000d00:	2204      	movs	r2, #4
 8000d02:	f7ff feb5 	bl	8000a70 <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 8000d06:	bf00      	nop
 8000d08:	3718      	adds	r7, #24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <_dwt_otpread>:
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32 _dwt_otpread(uint16 address)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b084      	sub	sp, #16
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	4603      	mov	r3, r0
 8000d16:	80fb      	strh	r3, [r7, #6]
    uint32 ret_data;

    // Write the address
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);
 8000d18:	88fb      	ldrh	r3, [r7, #6]
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	2104      	movs	r1, #4
 8000d1e:	202d      	movs	r0, #45	; 0x2d
 8000d20:	f7ff ffb2 	bl	8000c88 <dwt_write16bitoffsetreg>

    // Perform OTP Read - Manual read mode has to be set
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
 8000d24:	2203      	movs	r2, #3
 8000d26:	2106      	movs	r1, #6
 8000d28:	202d      	movs	r0, #45	; 0x2d
 8000d2a:	f7ff ff9a 	bl	8000c62 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2106      	movs	r1, #6
 8000d32:	202d      	movs	r0, #45	; 0x2d
 8000d34:	f7ff ff95 	bl	8000c62 <dwt_write8bitoffsetreg>

    // Read read data, available 40ns after rising edge of OTP_READ
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
 8000d38:	210a      	movs	r1, #10
 8000d3a:	202d      	movs	r0, #45	; 0x2d
 8000d3c:	f7ff ff4d 	bl	8000bda <dwt_read32bitoffsetreg>
 8000d40:	60f8      	str	r0, [r7, #12]

    // Return the 32bit of read data
    return ret_data;
 8000d42:	68fb      	ldr	r3, [r7, #12]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3710      	adds	r7, #16
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <_dwt_aonarrayupload>:
 * output parameters
 *
 * no return value
 */
void _dwt_aonarrayupload(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
 8000d50:	2200      	movs	r2, #0
 8000d52:	2102      	movs	r1, #2
 8000d54:	202c      	movs	r0, #44	; 0x2c
 8000d56:	f7ff ff84 	bl	8000c62 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
 8000d5a:	2202      	movs	r2, #2
 8000d5c:	2102      	movs	r1, #2
 8000d5e:	202c      	movs	r0, #44	; 0x2c
 8000d60:	f7ff ff7f 	bl	8000c62 <dwt_write8bitoffsetreg>
}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <_dwt_configlde>:
 * output parameters
 *
 * no return value
 */
void _dwt_configlde(int prfIndex)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
 8000d70:	226d      	movs	r2, #109	; 0x6d
 8000d72:	f640 0106 	movw	r1, #2054	; 0x806
 8000d76:	202e      	movs	r0, #46	; 0x2e
 8000d78:	f7ff ff73 	bl	8000c62 <dwt_write8bitoffsetreg>

    if(prfIndex)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d007      	beq.n	8000d92 <_dwt_configlde+0x2a>
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
 8000d82:	f240 6207 	movw	r2, #1543	; 0x607
 8000d86:	f641 0106 	movw	r1, #6150	; 0x1806
 8000d8a:	202e      	movs	r0, #46	; 0x2e
 8000d8c:	f7ff ff7c 	bl	8000c88 <dwt_write16bitoffsetreg>
    }
    else
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
    }
}
 8000d90:	e006      	b.n	8000da0 <_dwt_configlde+0x38>
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
 8000d92:	f241 6207 	movw	r2, #5639	; 0x1607
 8000d96:	f641 0106 	movw	r1, #6150	; 0x1806
 8000d9a:	202e      	movs	r0, #46	; 0x2e
 8000d9c:	f7ff ff74 	bl	8000c88 <dwt_write16bitoffsetreg>
}
 8000da0:	bf00      	nop
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <_dwt_loaducodefromrom>:
 * output parameters
 *
 * no return value
 */
void _dwt_loaducodefromrom(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
    // Set up clocks
    _dwt_enableclocks(FORCE_LDE);
 8000dac:	200e      	movs	r0, #14
 8000dae:	f000 f80f 	bl	8000dd0 <_dwt_enableclocks>

    // Kick off the LDE load
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
 8000db2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000db6:	2106      	movs	r1, #6
 8000db8:	202d      	movs	r0, #45	; 0x2d
 8000dba:	f7ff ff65 	bl	8000c88 <dwt_write16bitoffsetreg>

    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	f000 f956 	bl	8001070 <deca_sleep>

    // Default clocks (ENABLE_ALL_SEQ)
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	f000 f803 	bl	8000dd0 <_dwt_enableclocks>
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
	...

08000dd0 <_dwt_enableclocks>:
 * output parameters none
 *
 * no return value
 */
void _dwt_enableclocks(int clocks)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
    uint8 reg[2];

    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
 8000dd8:	f107 030c 	add.w	r3, r7, #12
 8000ddc:	2202      	movs	r2, #2
 8000dde:	2100      	movs	r1, #0
 8000de0:	2036      	movs	r0, #54	; 0x36
 8000de2:	f7ff fea1 	bl	8000b28 <dwt_readfromdevice>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2b0e      	cmp	r3, #14
 8000dea:	d876      	bhi.n	8000eda <_dwt_enableclocks+0x10a>
 8000dec:	a201      	add	r2, pc, #4	; (adr r2, 8000df4 <_dwt_enableclocks+0x24>)
 8000dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000df2:	bf00      	nop
 8000df4:	08000e41 	.word	0x08000e41
 8000df8:	08000e31 	.word	0x08000e31
 8000dfc:	08000e57 	.word	0x08000e57
 8000e00:	08000edb 	.word	0x08000edb
 8000e04:	08000edb 	.word	0x08000edb
 8000e08:	08000edb 	.word	0x08000edb
 8000e0c:	08000edb 	.word	0x08000edb
 8000e10:	08000e6d 	.word	0x08000e6d
 8000e14:	08000e8d 	.word	0x08000e8d
 8000e18:	08000edb 	.word	0x08000edb
 8000e1c:	08000edb 	.word	0x08000edb
 8000e20:	08000ea3 	.word	0x08000ea3
 8000e24:	08000eaf 	.word	0x08000eaf
 8000e28:	08000ebb 	.word	0x08000ebb
 8000e2c:	08000ed1 	.word	0x08000ed1
    switch(clocks)
    {
        case ENABLE_ALL_SEQ:
        {
            reg[0] = 0x00 ;
 8000e30:	2300      	movs	r3, #0
 8000e32:	733b      	strb	r3, [r7, #12]
            reg[1] = reg[1] & 0xfe;
 8000e34:	7b7b      	ldrb	r3, [r7, #13]
 8000e36:	f023 0301 	bic.w	r3, r3, #1
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000e3e:	e04d      	b.n	8000edc <_dwt_enableclocks+0x10c>
        case FORCE_SYS_XTI:
        {
            // System and RX
            reg[0] = 0x01 | (reg[0] & 0xfc);
 8000e40:	7b3b      	ldrb	r3, [r7, #12]
 8000e42:	b25b      	sxtb	r3, r3
 8000e44:	f023 0303 	bic.w	r3, r3, #3
 8000e48:	b25b      	sxtb	r3, r3
 8000e4a:	f043 0301 	orr.w	r3, r3, #1
 8000e4e:	b25b      	sxtb	r3, r3
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	733b      	strb	r3, [r7, #12]
        }
        break;
 8000e54:	e042      	b.n	8000edc <_dwt_enableclocks+0x10c>
        case FORCE_SYS_PLL:
        {
            // System
            reg[0] = 0x02 | (reg[0] & 0xfc);
 8000e56:	7b3b      	ldrb	r3, [r7, #12]
 8000e58:	b25b      	sxtb	r3, r3
 8000e5a:	f023 0303 	bic.w	r3, r3, #3
 8000e5e:	b25b      	sxtb	r3, r3
 8000e60:	f043 0302 	orr.w	r3, r3, #2
 8000e64:	b25b      	sxtb	r3, r3
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	733b      	strb	r3, [r7, #12]
        }
        break;
 8000e6a:	e037      	b.n	8000edc <_dwt_enableclocks+0x10c>
        case READ_ACC_ON:
        {
            reg[0] = 0x48 | (reg[0] & 0xb3);
 8000e6c:	7b3b      	ldrb	r3, [r7, #12]
 8000e6e:	b25b      	sxtb	r3, r3
 8000e70:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8000e74:	b25b      	sxtb	r3, r3
 8000e76:	f043 0348 	orr.w	r3, r3, #72	; 0x48
 8000e7a:	b25b      	sxtb	r3, r3
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x80 | reg[1];
 8000e80:	7b7b      	ldrb	r3, [r7, #13]
 8000e82:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000e8a:	e027      	b.n	8000edc <_dwt_enableclocks+0x10c>
        case READ_ACC_OFF:
        {
            reg[0] = reg[0] & 0xb3;
 8000e8c:	7b3b      	ldrb	r3, [r7, #12]
 8000e8e:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x7f & reg[1];
 8000e96:	7b7b      	ldrb	r3, [r7, #13]
 8000e98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000ea0:	e01c      	b.n	8000edc <_dwt_enableclocks+0x10c>
        case FORCE_OTP_ON:
        {
            reg[1] = 0x02 | reg[1];
 8000ea2:	7b7b      	ldrb	r3, [r7, #13]
 8000ea4:	f043 0302 	orr.w	r3, r3, #2
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000eac:	e016      	b.n	8000edc <_dwt_enableclocks+0x10c>
        case FORCE_OTP_OFF:
        {
            reg[1] = reg[1] & 0xfd;
 8000eae:	7b7b      	ldrb	r3, [r7, #13]
 8000eb0:	f023 0302 	bic.w	r3, r3, #2
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000eb8:	e010      	b.n	8000edc <_dwt_enableclocks+0x10c>
        case FORCE_TX_PLL:
        {
            reg[0] = 0x20 | (reg[0] & 0xcf);
 8000eba:	7b3b      	ldrb	r3, [r7, #12]
 8000ebc:	b25b      	sxtb	r3, r3
 8000ebe:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000ec2:	b25b      	sxtb	r3, r3
 8000ec4:	f043 0320 	orr.w	r3, r3, #32
 8000ec8:	b25b      	sxtb	r3, r3
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	733b      	strb	r3, [r7, #12]
        }
        break;
 8000ece:	e005      	b.n	8000edc <_dwt_enableclocks+0x10c>
        case FORCE_LDE:
        {
            reg[0] = 0x01;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x03;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000ed8:	e000      	b.n	8000edc <_dwt_enableclocks+0x10c>
        default:
        break;
 8000eda:	bf00      	nop
    }


    // Need to write lower byte separately before setting the higher byte(s)
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
 8000edc:	f107 030c 	add.w	r3, r7, #12
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	2036      	movs	r0, #54	; 0x36
 8000ee6:	f7ff fdc3 	bl	8000a70 <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
 8000eea:	f107 030c 	add.w	r3, r7, #12
 8000eee:	3301      	adds	r3, #1
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	2036      	movs	r0, #54	; 0x36
 8000ef6:	f7ff fdbb 	bl	8000a70 <dwt_writetodevice>

} // end _dwt_enableclocks()
 8000efa:	bf00      	nop
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop

08000f04 <_dwt_disablesequencing>:
 * output parameters none
 *
 * no return value
 */
void _dwt_disablesequencing(void) // Disable sequencing and go to state "INIT"
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 8000f08:	2000      	movs	r0, #0
 8000f0a:	f7ff ff61 	bl	8000dd0 <_dwt_enableclocks>

    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2104      	movs	r1, #4
 8000f12:	2036      	movs	r0, #54	; 0x36
 8000f14:	f7ff feb8 	bl	8000c88 <dwt_write16bitoffsetreg>
}
 8000f18:	bf00      	nop
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <dwt_starttx>:
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed transmission will be cancelled if the delayed time has passed)
 */

int dwt_starttx(uint8 mode)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
    int retval = DWT_SUCCESS ;
 8000f26:	2300      	movs	r3, #0
 8000f28:	60fb      	str	r3, [r7, #12]
    uint8 temp  = 0x00;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	72fb      	strb	r3, [r7, #11]
    uint16 checkTxOK = 0 ;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	813b      	strh	r3, [r7, #8]

    if(mode & DWT_RESPONSE_EXPECTED)
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	f003 0302 	and.w	r3, r3, #2
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d005      	beq.n	8000f48 <dwt_starttx+0x2c>
    {
        temp = (uint8)SYS_CTRL_WAIT4RESP ; // Set wait4response bit
 8000f3c:	2380      	movs	r3, #128	; 0x80
 8000f3e:	72fb      	strb	r3, [r7, #11]
        pdw1000local->wait4resp = 1;
 8000f40:	4b1c      	ldr	r3, [pc, #112]	; (8000fb4 <dwt_starttx+0x98>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2201      	movs	r2, #1
 8000f46:	755a      	strb	r2, [r3, #21]
    }

    if (mode & DWT_START_TX_DELAYED)
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d020      	beq.n	8000f94 <dwt_starttx+0x78>
    {
        // Both SYS_CTRL_TXSTRT and SYS_CTRL_TXDLYS to correctly enable TX
        temp |= (uint8)(SYS_CTRL_TXDLYS | SYS_CTRL_TXSTRT) ;
 8000f52:	7afb      	ldrb	r3, [r7, #11]
 8000f54:	f043 0306 	orr.w	r3, r3, #6
 8000f58:	72fb      	strb	r3, [r7, #11]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8000f5a:	7afb      	ldrb	r3, [r7, #11]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	2100      	movs	r1, #0
 8000f60:	200d      	movs	r0, #13
 8000f62:	f7ff fe7e 	bl	8000c62 <dwt_write8bitoffsetreg>
        checkTxOK = dwt_read16bitoffsetreg(SYS_STATUS_ID, 3); // Read at offset 3 to get the upper 2 bytes out of 5
 8000f66:	2103      	movs	r1, #3
 8000f68:	200f      	movs	r0, #15
 8000f6a:	f7ff fe5d 	bl	8000c28 <dwt_read16bitoffsetreg>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	813b      	strh	r3, [r7, #8]
        if ((checkTxOK & SYS_STATUS_TXERR) == 0) // Transmit Delayed Send set over Half a Period away or Power Up error (there is enough time to send but not to power up individual blocks).
 8000f72:	893b      	ldrh	r3, [r7, #8]
 8000f74:	f403 6381 	and.w	r3, r3, #1032	; 0x408
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d102      	bne.n	8000f82 <dwt_starttx+0x66>
        {
            retval = DWT_SUCCESS ; // All okay
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	e012      	b.n	8000fa8 <dwt_starttx+0x8c>
        }
        else
        {
            // If HPDWARN or TXPUTE are set this indicates that the TXDLYS was set too late for the specified DX_TIME.
            // remedial action is to cancel delayed send and report error
            dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF);
 8000f82:	2240      	movs	r2, #64	; 0x40
 8000f84:	2100      	movs	r1, #0
 8000f86:	200d      	movs	r0, #13
 8000f88:	f7ff fe6b 	bl	8000c62 <dwt_write8bitoffsetreg>
            retval = DWT_ERROR ; // Failed !
 8000f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	e009      	b.n	8000fa8 <dwt_starttx+0x8c>
        }
    }
    else
    {
        temp |= (uint8)SYS_CTRL_TXSTRT ;
 8000f94:	7afb      	ldrb	r3, [r7, #11]
 8000f96:	f043 0302 	orr.w	r3, r3, #2
 8000f9a:	72fb      	strb	r3, [r7, #11]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8000f9c:	7afb      	ldrb	r3, [r7, #11]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	200d      	movs	r0, #13
 8000fa4:	f7ff fe5d 	bl	8000c62 <dwt_write8bitoffsetreg>
    }

    return retval;
 8000fa8:	68fb      	ldr	r3, [r7, #12]

} // end dwt_starttx()
 8000faa:	4618      	mov	r0, r3
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000000 	.word	0x20000000

08000fb8 <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
    _dwt_disablesequencing();
 8000fbc:	f7ff ffa2 	bl	8000f04 <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	202c      	movs	r0, #44	; 0x2c
 8000fc6:	f7ff fe5f 	bl	8000c88 <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2106      	movs	r1, #6
 8000fce:	202c      	movs	r0, #44	; 0x2c
 8000fd0:	f7ff fe47 	bl	8000c62 <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
 8000fd4:	f7ff feba 	bl	8000d4c <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC (set the reset bits)
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2103      	movs	r1, #3
 8000fdc:	2036      	movs	r0, #54	; 0x36
 8000fde:	f7ff fe40 	bl	8000c62 <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
 8000fe2:	2001      	movs	r0, #1
 8000fe4:	f000 f844 	bl	8001070 <deca_sleep>

    // Clear the reset bits
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 8000fe8:	22f0      	movs	r2, #240	; 0xf0
 8000fea:	2103      	movs	r1, #3
 8000fec:	2036      	movs	r0, #54	; 0x36
 8000fee:	f7ff fe38 	bl	8000c62 <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
 8000ff2:	4b03      	ldr	r3, [pc, #12]	; (8001000 <dwt_softreset+0x48>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	755a      	strb	r2, [r3, #21]
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000000 	.word	0x20000000

08001004 <dwt_setxtaltrim>:
 * output parameters
 *
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	f003 031f 	and.w	r3, r3, #31
 8001016:	b25b      	sxtb	r3, r3
 8001018:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800101c:	b25b      	sxtb	r3, r3
 800101e:	73fb      	strb	r3, [r7, #15]
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
 8001020:	7bfb      	ldrb	r3, [r7, #15]
 8001022:	461a      	mov	r2, r3
 8001024:	210e      	movs	r1, #14
 8001026:	202b      	movs	r0, #43	; 0x2b
 8001028:	f7ff fe1b 	bl	8000c62 <dwt_write8bitoffsetreg>
}
 800102c:	bf00      	nop
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
	decaIrqStatus_t s = port_GetEXT_IRQStatus();
 800103a:	f000 f98d 	bl	8001358 <port_GetEXT_IRQStatus>
 800103e:	4603      	mov	r3, r0
 8001040:	607b      	str	r3, [r7, #4]

	if(s) {
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <decamutexon+0x18>
		port_DisableEXT_IRQ(); //disable the external interrupt line
 8001048:	f000 f978 	bl	800133c <port_DisableEXT_IRQ>
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
 800104c:	687b      	ldr	r3, [r7, #4]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <decamutexoff+0x12>
		port_EnableEXT_IRQ();
 8001064:	f000 f971 	bl	800134a <port_EnableEXT_IRQ>
	}
}
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <deca_sleep>:
#include "sleep.h"
#include "port.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
__INLINE void deca_sleep(unsigned int time_ms)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
	Sleep(time_ms);
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f000 f8c3 	bl	8001204 <Sleep>
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
	...

08001088 <writetospi>:
#pragma GCC optimize ("O3")
int writetospi(uint16_t headerLength,
               const    uint8_t *headerBuffer,
               uint32_t bodyLength,
               const    uint8_t *bodyBuffer)
{
 8001088:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 800108c:	4683      	mov	fp, r0
 800108e:	468a      	mov	sl, r1
 8001090:	4691      	mov	r9, r2
 8001092:	4698      	mov	r8, r3
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 8001094:	f7ff ffce 	bl	8001034 <decamutexon>
 8001098:	4606      	mov	r6, r0

    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800109a:	4d13      	ldr	r5, [pc, #76]	; (80010e8 <writetospi+0x60>)
 800109c:	4628      	mov	r0, r5
 800109e:	f002 f93c 	bl	800331a <HAL_SPI_GetState>
 80010a2:	2801      	cmp	r0, #1
 80010a4:	4604      	mov	r4, r0
 80010a6:	d1f9      	bne.n	800109c <writetospi+0x14>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 80010a8:	2200      	movs	r2, #0
 80010aa:	2140      	movs	r1, #64	; 0x40
 80010ac:	480f      	ldr	r0, [pc, #60]	; (80010ec <writetospi+0x64>)
 80010ae:	f001 f883 	bl	80021b8 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&headerBuffer[0], headerLength, HAL_MAX_DELAY);    /* Send header in polling mode */
 80010b2:	465a      	mov	r2, fp
 80010b4:	4651      	mov	r1, sl
 80010b6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ba:	480b      	ldr	r0, [pc, #44]	; (80010e8 <writetospi+0x60>)
 80010bc:	f001 fee1 	bl	8002e82 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&bodyBuffer[0], bodyLength, HAL_MAX_DELAY);        /* Send data in polling mode */
 80010c0:	f04f 33ff 	mov.w	r3, #4294967295
 80010c4:	4641      	mov	r1, r8
 80010c6:	fa1f f289 	uxth.w	r2, r9
 80010ca:	4807      	ldr	r0, [pc, #28]	; (80010e8 <writetospi+0x60>)
 80010cc:	f001 fed9 	bl	8002e82 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 80010d0:	4622      	mov	r2, r4
 80010d2:	2140      	movs	r1, #64	; 0x40
 80010d4:	4805      	ldr	r0, [pc, #20]	; (80010ec <writetospi+0x64>)
 80010d6:	f001 f86f 	bl	80021b8 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 80010da:	4630      	mov	r0, r6
 80010dc:	f7ff ffbb 	bl	8001056 <decamutexoff>

    return 0;
} // end writetospi()
 80010e0:	2000      	movs	r0, #0
 80010e2:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
 80010e6:	bf00      	nop
 80010e8:	200000f0 	.word	0x200000f0
 80010ec:	40020400 	.word	0x40020400

080010f0 <readfromspi>:
#pragma GCC optimize ("O3")
int readfromspi(uint16_t headerLength,
                const uint8_t *headerBuffer,
                uint32_t readlength,
                uint8_t *readBuffer)
{
 80010f0:	e92d 4778 	stmdb	sp!, {r3, r4, r5, r6, r8, r9, sl, lr}
 80010f4:	4681      	mov	r9, r0
 80010f6:	460c      	mov	r4, r1
 80010f8:	4690      	mov	r8, r2
 80010fa:	461d      	mov	r5, r3
    int i;
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 80010fc:	f7ff ff9a 	bl	8001034 <decamutexon>
 8001100:	4606      	mov	r6, r0

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001102:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8001180 <readfromspi+0x90>
 8001106:	4650      	mov	r0, sl
 8001108:	f002 f907 	bl	800331a <HAL_SPI_GetState>
 800110c:	2801      	cmp	r0, #1
 800110e:	d1fa      	bne.n	8001106 <readfromspi+0x16>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 8001110:	2200      	movs	r2, #0
 8001112:	2140      	movs	r1, #64	; 0x40
 8001114:	4819      	ldr	r0, [pc, #100]	; (800117c <readfromspi+0x8c>)
 8001116:	f001 f84f 	bl	80021b8 <HAL_GPIO_WritePin>

    /* Send header */
    for(i=0; i<headerLength; i++)
 800111a:	f1b9 0f00 	cmp.w	r9, #0
 800111e:	d00c      	beq.n	800113a <readfromspi+0x4a>
    {
        HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 8001120:	f8df a05c 	ldr.w	sl, [pc, #92]	; 8001180 <readfromspi+0x90>
 8001124:	44a1      	add	r9, r4
 8001126:	2201      	movs	r2, #1
 8001128:	4621      	mov	r1, r4
 800112a:	f04f 33ff 	mov.w	r3, #4294967295
 800112e:	4414      	add	r4, r2
 8001130:	4650      	mov	r0, sl
 8001132:	f001 fea6 	bl	8002e82 <HAL_SPI_Transmit>
    for(i=0; i<headerLength; i++)
 8001136:	454c      	cmp	r4, r9
 8001138:	d1f5      	bne.n	8001126 <readfromspi+0x36>
    }

    /* for the data buffer use LL functions directly as the HAL SPI read function
     * has issue reading single bytes */
    while(readlength-- > 0)
 800113a:	f1b8 0f00 	cmp.w	r8, #0
 800113e:	d012      	beq.n	8001166 <readfromspi+0x76>
        /* Wait until TXE flag is set to send data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
        {
        }

        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 8001140:	2400      	movs	r4, #0
 8001142:	f8df c03c 	ldr.w	ip, [pc, #60]	; 8001180 <readfromspi+0x90>
 8001146:	eb05 0008 	add.w	r0, r5, r8
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
 800114a:	f8dc 2000 	ldr.w	r2, [ip]
 800114e:	6891      	ldr	r1, [r2, #8]
 8001150:	0789      	lsls	r1, r1, #30
 8001152:	d5fc      	bpl.n	800114e <readfromspi+0x5e>
        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 8001154:	60d4      	str	r4, [r2, #12]
        e.g. when waking up DW1000 from DEEPSLEEP via dwt_spicswakeup() function.
        */

        /* Wait until RXNE flag is set to read data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET)
 8001156:	6891      	ldr	r1, [r2, #8]
 8001158:	07cb      	lsls	r3, r1, #31
 800115a:	d5fc      	bpl.n	8001156 <readfromspi+0x66>
        {
        }

        (*readBuffer++) = hspi1.Instance->DR;  //copy data read form (MISO)
 800115c:	68d3      	ldr	r3, [r2, #12]
 800115e:	f805 3b01 	strb.w	r3, [r5], #1
    while(readlength-- > 0)
 8001162:	4285      	cmp	r5, r0
 8001164:	d1f1      	bne.n	800114a <readfromspi+0x5a>
    }

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 8001166:	2201      	movs	r2, #1
 8001168:	2140      	movs	r1, #64	; 0x40
 800116a:	4804      	ldr	r0, [pc, #16]	; (800117c <readfromspi+0x8c>)
 800116c:	f001 f824 	bl	80021b8 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 8001170:	4630      	mov	r0, r6
 8001172:	f7ff ff70 	bl	8001056 <decamutexoff>

    return 0;
} // end readfromspi()
 8001176:	2000      	movs	r0, #0
 8001178:	e8bd 8778 	ldmia.w	sp!, {r3, r4, r5, r6, r8, r9, sl, pc}
 800117c:	40020400 	.word	0x40020400
 8001180:	200000f0 	.word	0x200000f0

08001184 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800118e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001192:	2b00      	cmp	r3, #0
 8001194:	db0b      	blt.n	80011ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	f003 021f 	and.w	r2, r3, #31
 800119c:	4906      	ldr	r1, [pc, #24]	; (80011b8 <__NVIC_EnableIRQ+0x34>)
 800119e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a2:	095b      	lsrs	r3, r3, #5
 80011a4:	2001      	movs	r0, #1
 80011a6:	fa00 f202 	lsl.w	r2, r0, r2
 80011aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011ae:	bf00      	nop
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bc80      	pop	{r7}
 80011b6:	4770      	bx	lr
 80011b8:	e000e100 	.word	0xe000e100

080011bc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	db12      	blt.n	80011f4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	f003 021f 	and.w	r2, r3, #31
 80011d4:	490a      	ldr	r1, [pc, #40]	; (8001200 <__NVIC_DisableIRQ+0x44>)
 80011d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011da:	095b      	lsrs	r3, r3, #5
 80011dc:	2001      	movs	r0, #1
 80011de:	fa00 f202 	lsl.w	r2, r0, r2
 80011e2:	3320      	adds	r3, #32
 80011e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80011e8:	f3bf 8f4f 	dsb	sy
}
 80011ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011ee:	f3bf 8f6f 	isb	sy
}
 80011f2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bc80      	pop	{r7}
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	e000e100 	.word	0xe000e100

08001204 <Sleep>:
/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void
Sleep(uint32_t x)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f000 fc63 	bl	8001ad8 <HAL_Delay>
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
	...

0800121c <EXTI_GetITEnStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The "enable" state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITEnStatus(uint32_t x)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
    return ((NVIC->ISER[(((uint32_t)x) >> 5UL)] &\
 8001224:	4a0a      	ldr	r2, [pc, #40]	; (8001250 <EXTI_GetITEnStatus+0x34>)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	095b      	lsrs	r3, r3, #5
 800122a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            (uint32_t)(1UL << (((uint32_t)x) & 0x1FUL)) ) == (uint32_t)RESET)?(RESET):(SET);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f003 031f 	and.w	r3, r3, #31
 8001234:	fa22 f303 	lsr.w	r3, r2, r3
 8001238:	f003 0301 	and.w	r3, r3, #1
 800123c:	2b00      	cmp	r3, #0
 800123e:	bf14      	ite	ne
 8001240:	2301      	movne	r3, #1
 8001242:	2300      	moveq	r3, #0
 8001244:	b2db      	uxtb	r3, r3
}
 8001246:	4618      	mov	r0, r3
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr
 8001250:	e000e100 	.word	0xe000e100

08001254 <reset_DW1000>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW1000 by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DW1000(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef    GPIO_InitStruct;

    // Enable GPIO used for DW1000 reset as open collector output
    GPIO_InitStruct.Pin = DW_RST_Pin;
 800125a:	2301      	movs	r3, #1
 800125c:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800125e:	2311      	movs	r3, #17
 8001260:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001262:	2300      	movs	r3, #0
 8001264:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	4619      	mov	r1, r3
 800126a:	480a      	ldr	r0, [pc, #40]	; (8001294 <reset_DW1000+0x40>)
 800126c:	f000 fe14 	bl	8001e98 <HAL_GPIO_Init>

    //drive the RSTn pin low
    HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_RESET);
 8001270:	2200      	movs	r2, #0
 8001272:	2101      	movs	r1, #1
 8001274:	4807      	ldr	r0, [pc, #28]	; (8001294 <reset_DW1000+0x40>)
 8001276:	f000 ff9f 	bl	80021b8 <HAL_GPIO_WritePin>

    Sleep(1);
 800127a:	2001      	movs	r0, #1
 800127c:	f7ff ffc2 	bl	8001204 <Sleep>

    //put the pin back to output open-drain (not active)
    setup_DW1000RSTnIRQ(0);
 8001280:	2000      	movs	r0, #0
 8001282:	f000 f809 	bl	8001298 <setup_DW1000RSTnIRQ>



    Sleep(2);
 8001286:	2002      	movs	r0, #2
 8001288:	f7ff ffbc 	bl	8001204 <Sleep>
}
 800128c:	bf00      	nop
 800128e:	3718      	adds	r7, #24
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40020000 	.word	0x40020000

08001298 <setup_DW1000RSTnIRQ>:
 * @brief   setup the DW_RESET pin mode
 *          0 - output Open collector mode
 *          !0 - input mode with connected EXTI0 IRQ
 * */
void setup_DW1000RSTnIRQ(int enable)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b088      	sub	sp, #32
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    if(enable)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d015      	beq.n	80012d2 <setup_DW1000RSTnIRQ+0x3a>
    {
        // Enable GPIO used as DECA RESET for interrupt
        GPIO_InitStruct.Pin = DW_RST_Pin;
 80012a6:	2301      	movs	r3, #1
 80012a8:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012aa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012ae:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 80012b4:	f107 030c 	add.w	r3, r7, #12
 80012b8:	4619      	mov	r1, r3
 80012ba:	4813      	ldr	r0, [pc, #76]	; (8001308 <setup_DW1000RSTnIRQ+0x70>)
 80012bc:	f000 fdec 	bl	8001e98 <HAL_GPIO_Init>

        HAL_NVIC_EnableIRQ(EXTI0_IRQn);     //pin #0 -> EXTI #0
 80012c0:	2006      	movs	r0, #6
 80012c2:	f000 fd42 	bl	8001d4a <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80012c6:	2200      	movs	r2, #0
 80012c8:	2105      	movs	r1, #5
 80012ca:	2006      	movs	r0, #6
 80012cc:	f000 fd21 	bl	8001d12 <HAL_NVIC_SetPriority>
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
        HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_SET);
    }
}
 80012d0:	e015      	b.n	80012fe <setup_DW1000RSTnIRQ+0x66>
        HAL_NVIC_DisableIRQ(EXTI0_IRQn);    //pin #0 -> EXTI #0
 80012d2:	2006      	movs	r0, #6
 80012d4:	f000 fd47 	bl	8001d66 <HAL_NVIC_DisableIRQ>
        GPIO_InitStruct.Pin = DW_RST_Pin;
 80012d8:	2301      	movs	r3, #1
 80012da:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80012dc:	2311      	movs	r3, #17
 80012de:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012e4:	2302      	movs	r3, #2
 80012e6:	61bb      	str	r3, [r7, #24]
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 80012e8:	f107 030c 	add.w	r3, r7, #12
 80012ec:	4619      	mov	r1, r3
 80012ee:	4806      	ldr	r0, [pc, #24]	; (8001308 <setup_DW1000RSTnIRQ+0x70>)
 80012f0:	f000 fdd2 	bl	8001e98 <HAL_GPIO_Init>
        HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_SET);
 80012f4:	2201      	movs	r2, #1
 80012f6:	2101      	movs	r1, #1
 80012f8:	4803      	ldr	r0, [pc, #12]	; (8001308 <setup_DW1000RSTnIRQ+0x70>)
 80012fa:	f000 ff5d 	bl	80021b8 <HAL_GPIO_WritePin>
}
 80012fe:	bf00      	nop
 8001300:	3720      	adds	r7, #32
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40020000 	.word	0x40020000

0800130c <port_set_dw1000_slowrate>:
/* @fn      port_set_dw1000_slowrate
 * @brief   set 2.25MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_slowrate(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001310:	4b03      	ldr	r3, [pc, #12]	; (8001320 <port_set_dw1000_slowrate+0x14>)
 8001312:	2220      	movs	r2, #32
 8001314:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 8001316:	4802      	ldr	r0, [pc, #8]	; (8001320 <port_set_dw1000_slowrate+0x14>)
 8001318:	f001 fd2a 	bl	8002d70 <HAL_SPI_Init>
}
 800131c:	bf00      	nop
 800131e:	bd80      	pop	{r7, pc}
 8001320:	200000f0 	.word	0x200000f0

08001324 <port_set_dw1000_fastrate>:
/* @fn      port_set_dw1000_fastrate
 * @brief   set 18MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_fastrate(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001328:	4b03      	ldr	r3, [pc, #12]	; (8001338 <port_set_dw1000_fastrate+0x14>)
 800132a:	2208      	movs	r2, #8
 800132c:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 800132e:	4802      	ldr	r0, [pc, #8]	; (8001338 <port_set_dw1000_fastrate+0x14>)
 8001330:	f001 fd1e 	bl	8002d70 <HAL_SPI_Init>
}
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}
 8001338:	200000f0 	.word	0x200000f0

0800133c <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
    NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 8001340:	2017      	movs	r0, #23
 8001342:	f7ff ff3b 	bl	80011bc <__NVIC_DisableIRQ>
}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}

0800134a <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	af00      	add	r7, sp, #0
    NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 800134e:	2017      	movs	r0, #23
 8001350:	f7ff ff18 	bl	8001184 <__NVIC_EnableIRQ>
}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}

08001358 <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
    return EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 800135c:	2017      	movs	r0, #23
 800135e:	f7ff ff5d 	bl	800121c <EXTI_GetITEnStatus>
 8001362:	4603      	mov	r3, r0
}
 8001364:	4618      	mov	r0, r3
 8001366:	bd80      	pop	{r7, pc}

08001368 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b08a      	sub	sp, #40	; 0x28
 800136c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136e:	f107 0314 	add.w	r3, r7, #20
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]
 800137a:	60da      	str	r2, [r3, #12]
 800137c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800137e:	4b33      	ldr	r3, [pc, #204]	; (800144c <MX_GPIO_Init+0xe4>)
 8001380:	69db      	ldr	r3, [r3, #28]
 8001382:	4a32      	ldr	r2, [pc, #200]	; (800144c <MX_GPIO_Init+0xe4>)
 8001384:	f043 0304 	orr.w	r3, r3, #4
 8001388:	61d3      	str	r3, [r2, #28]
 800138a:	4b30      	ldr	r3, [pc, #192]	; (800144c <MX_GPIO_Init+0xe4>)
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	f003 0304 	and.w	r3, r3, #4
 8001392:	613b      	str	r3, [r7, #16]
 8001394:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001396:	4b2d      	ldr	r3, [pc, #180]	; (800144c <MX_GPIO_Init+0xe4>)
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	4a2c      	ldr	r2, [pc, #176]	; (800144c <MX_GPIO_Init+0xe4>)
 800139c:	f043 0320 	orr.w	r3, r3, #32
 80013a0:	61d3      	str	r3, [r2, #28]
 80013a2:	4b2a      	ldr	r3, [pc, #168]	; (800144c <MX_GPIO_Init+0xe4>)
 80013a4:	69db      	ldr	r3, [r3, #28]
 80013a6:	f003 0320 	and.w	r3, r3, #32
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ae:	4b27      	ldr	r3, [pc, #156]	; (800144c <MX_GPIO_Init+0xe4>)
 80013b0:	69db      	ldr	r3, [r3, #28]
 80013b2:	4a26      	ldr	r2, [pc, #152]	; (800144c <MX_GPIO_Init+0xe4>)
 80013b4:	f043 0301 	orr.w	r3, r3, #1
 80013b8:	61d3      	str	r3, [r2, #28]
 80013ba:	4b24      	ldr	r3, [pc, #144]	; (800144c <MX_GPIO_Init+0xe4>)
 80013bc:	69db      	ldr	r3, [r3, #28]
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	60bb      	str	r3, [r7, #8]
 80013c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c6:	4b21      	ldr	r3, [pc, #132]	; (800144c <MX_GPIO_Init+0xe4>)
 80013c8:	69db      	ldr	r3, [r3, #28]
 80013ca:	4a20      	ldr	r2, [pc, #128]	; (800144c <MX_GPIO_Init+0xe4>)
 80013cc:	f043 0302 	orr.w	r3, r3, #2
 80013d0:	61d3      	str	r3, [r2, #28]
 80013d2:	4b1e      	ldr	r3, [pc, #120]	; (800144c <MX_GPIO_Init+0xe4>)
 80013d4:	69db      	ldr	r3, [r3, #28]
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	607b      	str	r3, [r7, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_RESET);
 80013de:	2200      	movs	r2, #0
 80013e0:	2101      	movs	r1, #1
 80013e2:	481b      	ldr	r0, [pc, #108]	; (8001450 <MX_GPIO_Init+0xe8>)
 80013e4:	f000 fee8 	bl	80021b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET);
 80013e8:	2200      	movs	r2, #0
 80013ea:	2140      	movs	r1, #64	; 0x40
 80013ec:	4819      	ldr	r0, [pc, #100]	; (8001454 <MX_GPIO_Init+0xec>)
 80013ee:	f000 fee3 	bl	80021b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DW_RST_Pin;
 80013f2:	2301      	movs	r3, #1
 80013f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f6:	2301      	movs	r3, #1
 80013f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fe:	2300      	movs	r3, #0
 8001400:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 8001402:	f107 0314 	add.w	r3, r7, #20
 8001406:	4619      	mov	r1, r3
 8001408:	4811      	ldr	r0, [pc, #68]	; (8001450 <MX_GPIO_Init+0xe8>)
 800140a:	f000 fd45 	bl	8001e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DW_IRQ_Pin;
 800140e:	2302      	movs	r3, #2
 8001410:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001412:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001416:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DW_IRQ_GPIO_Port, &GPIO_InitStruct);
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	4619      	mov	r1, r3
 8001422:	480b      	ldr	r0, [pc, #44]	; (8001450 <MX_GPIO_Init+0xe8>)
 8001424:	f000 fd38 	bl	8001e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DW_CS_Pin;
 8001428:	2340      	movs	r3, #64	; 0x40
 800142a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142c:	2301      	movs	r3, #1
 800142e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001434:	2300      	movs	r3, #0
 8001436:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DW_CS_GPIO_Port, &GPIO_InitStruct);
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	4619      	mov	r1, r3
 800143e:	4805      	ldr	r0, [pc, #20]	; (8001454 <MX_GPIO_Init+0xec>)
 8001440:	f000 fd2a 	bl	8001e98 <HAL_GPIO_Init>

}
 8001444:	bf00      	nop
 8001446:	3728      	adds	r7, #40	; 0x28
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40023800 	.word	0x40023800
 8001450:	40020000 	.word	0x40020000
 8001454:	40020400 	.word	0x40020400

08001458 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800145c:	f000 facd 	bl	80019fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001460:	f000 f80c 	bl	800147c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001464:	f7ff ff80 	bl	8001368 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001468:	f000 f85c 	bl	8001524 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800146c:	f000 fa2a 	bl	80018c4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  setup_DW1000RSTnIRQ(0);
 8001470:	2000      	movs	r0, #0
 8001472:	f7ff ff11 	bl	8001298 <setup_DW1000RSTnIRQ>

  dw_main();
 8001476:	f000 f9cd 	bl	8001814 <dw_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800147a:	e7fe      	b.n	800147a <main+0x22>

0800147c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b092      	sub	sp, #72	; 0x48
 8001480:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001482:	f107 0314 	add.w	r3, r7, #20
 8001486:	2234      	movs	r2, #52	; 0x34
 8001488:	2100      	movs	r1, #0
 800148a:	4618      	mov	r0, r3
 800148c:	f002 fed4 	bl	8004238 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001490:	463b      	mov	r3, r7
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	605a      	str	r2, [r3, #4]
 8001498:	609a      	str	r2, [r3, #8]
 800149a:	60da      	str	r2, [r3, #12]
 800149c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800149e:	4b1d      	ldr	r3, [pc, #116]	; (8001514 <SystemClock_Config+0x98>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80014a6:	4a1b      	ldr	r2, [pc, #108]	; (8001514 <SystemClock_Config+0x98>)
 80014a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014ac:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014ae:	2302      	movs	r3, #2
 80014b0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014b2:	2301      	movs	r3, #1
 80014b4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014b6:	2310      	movs	r3, #16
 80014b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ba:	2302      	movs	r3, #2
 80014bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014be:	2300      	movs	r3, #0
 80014c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80014c2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80014c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80014c8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80014cc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ce:	f107 0314 	add.w	r3, r7, #20
 80014d2:	4618      	mov	r0, r3
 80014d4:	f000 fe88 	bl	80021e8 <HAL_RCC_OscConfig>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80014de:	f000 f81b 	bl	8001518 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014e2:	230f      	movs	r3, #15
 80014e4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014e6:	2303      	movs	r3, #3
 80014e8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014ea:	2300      	movs	r3, #0
 80014ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014f2:	2300      	movs	r3, #0
 80014f4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80014f6:	463b      	mov	r3, r7
 80014f8:	2101      	movs	r1, #1
 80014fa:	4618      	mov	r0, r3
 80014fc:	f001 f9a4 	bl	8002848 <HAL_RCC_ClockConfig>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001506:	f000 f807 	bl	8001518 <Error_Handler>
  }
}
 800150a:	bf00      	nop
 800150c:	3748      	adds	r7, #72	; 0x48
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40007000 	.word	0x40007000

08001518 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800151c:	b672      	cpsid	i
}
 800151e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001520:	e7fe      	b.n	8001520 <Error_Handler+0x8>
	...

08001524 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001528:	4b17      	ldr	r3, [pc, #92]	; (8001588 <MX_SPI1_Init+0x64>)
 800152a:	4a18      	ldr	r2, [pc, #96]	; (800158c <MX_SPI1_Init+0x68>)
 800152c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800152e:	4b16      	ldr	r3, [pc, #88]	; (8001588 <MX_SPI1_Init+0x64>)
 8001530:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001534:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001536:	4b14      	ldr	r3, [pc, #80]	; (8001588 <MX_SPI1_Init+0x64>)
 8001538:	2200      	movs	r2, #0
 800153a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800153c:	4b12      	ldr	r3, [pc, #72]	; (8001588 <MX_SPI1_Init+0x64>)
 800153e:	2200      	movs	r2, #0
 8001540:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001542:	4b11      	ldr	r3, [pc, #68]	; (8001588 <MX_SPI1_Init+0x64>)
 8001544:	2200      	movs	r2, #0
 8001546:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001548:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <MX_SPI1_Init+0x64>)
 800154a:	2200      	movs	r2, #0
 800154c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800154e:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <MX_SPI1_Init+0x64>)
 8001550:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001554:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001556:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <MX_SPI1_Init+0x64>)
 8001558:	2200      	movs	r2, #0
 800155a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800155c:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <MX_SPI1_Init+0x64>)
 800155e:	2200      	movs	r2, #0
 8001560:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001562:	4b09      	ldr	r3, [pc, #36]	; (8001588 <MX_SPI1_Init+0x64>)
 8001564:	2200      	movs	r2, #0
 8001566:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001568:	4b07      	ldr	r3, [pc, #28]	; (8001588 <MX_SPI1_Init+0x64>)
 800156a:	2200      	movs	r2, #0
 800156c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800156e:	4b06      	ldr	r3, [pc, #24]	; (8001588 <MX_SPI1_Init+0x64>)
 8001570:	220a      	movs	r2, #10
 8001572:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001574:	4804      	ldr	r0, [pc, #16]	; (8001588 <MX_SPI1_Init+0x64>)
 8001576:	f001 fbfb 	bl	8002d70 <HAL_SPI_Init>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001580:	f7ff ffca 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001584:	bf00      	nop
 8001586:	bd80      	pop	{r7, pc}
 8001588:	200000f0 	.word	0x200000f0
 800158c:	40013000 	.word	0x40013000

08001590 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b08a      	sub	sp, #40	; 0x28
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
 80015a6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a1b      	ldr	r2, [pc, #108]	; (800161c <HAL_SPI_MspInit+0x8c>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d12f      	bne.n	8001612 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015b2:	4b1b      	ldr	r3, [pc, #108]	; (8001620 <HAL_SPI_MspInit+0x90>)
 80015b4:	6a1b      	ldr	r3, [r3, #32]
 80015b6:	4a1a      	ldr	r2, [pc, #104]	; (8001620 <HAL_SPI_MspInit+0x90>)
 80015b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015bc:	6213      	str	r3, [r2, #32]
 80015be:	4b18      	ldr	r3, [pc, #96]	; (8001620 <HAL_SPI_MspInit+0x90>)
 80015c0:	6a1b      	ldr	r3, [r3, #32]
 80015c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015c6:	613b      	str	r3, [r7, #16]
 80015c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ca:	4b15      	ldr	r3, [pc, #84]	; (8001620 <HAL_SPI_MspInit+0x90>)
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	4a14      	ldr	r2, [pc, #80]	; (8001620 <HAL_SPI_MspInit+0x90>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	61d3      	str	r3, [r2, #28]
 80015d6:	4b12      	ldr	r3, [pc, #72]	; (8001620 <HAL_SPI_MspInit+0x90>)
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80015e2:	23e0      	movs	r3, #224	; 0xe0
 80015e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e6:	2302      	movs	r3, #2
 80015e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ee:	2303      	movs	r3, #3
 80015f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015f2:	2305      	movs	r3, #5
 80015f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f6:	f107 0314 	add.w	r3, r7, #20
 80015fa:	4619      	mov	r1, r3
 80015fc:	4809      	ldr	r0, [pc, #36]	; (8001624 <HAL_SPI_MspInit+0x94>)
 80015fe:	f000 fc4b 	bl	8001e98 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001602:	2200      	movs	r2, #0
 8001604:	2100      	movs	r1, #0
 8001606:	2023      	movs	r0, #35	; 0x23
 8001608:	f000 fb83 	bl	8001d12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800160c:	2023      	movs	r0, #35	; 0x23
 800160e:	f000 fb9c 	bl	8001d4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001612:	bf00      	nop
 8001614:	3728      	adds	r7, #40	; 0x28
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40013000 	.word	0x40013000
 8001620:	40023800 	.word	0x40023800
 8001624:	40020000 	.word	0x40020000

08001628 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800162e:	4b15      	ldr	r3, [pc, #84]	; (8001684 <HAL_MspInit+0x5c>)
 8001630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001632:	4a14      	ldr	r2, [pc, #80]	; (8001684 <HAL_MspInit+0x5c>)
 8001634:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001638:	6253      	str	r3, [r2, #36]	; 0x24
 800163a:	4b12      	ldr	r3, [pc, #72]	; (8001684 <HAL_MspInit+0x5c>)
 800163c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001646:	4b0f      	ldr	r3, [pc, #60]	; (8001684 <HAL_MspInit+0x5c>)
 8001648:	6a1b      	ldr	r3, [r3, #32]
 800164a:	4a0e      	ldr	r2, [pc, #56]	; (8001684 <HAL_MspInit+0x5c>)
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	6213      	str	r3, [r2, #32]
 8001652:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <HAL_MspInit+0x5c>)
 8001654:	6a1b      	ldr	r3, [r3, #32]
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	60bb      	str	r3, [r7, #8]
 800165c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800165e:	4b09      	ldr	r3, [pc, #36]	; (8001684 <HAL_MspInit+0x5c>)
 8001660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001662:	4a08      	ldr	r2, [pc, #32]	; (8001684 <HAL_MspInit+0x5c>)
 8001664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001668:	6253      	str	r3, [r2, #36]	; 0x24
 800166a:	4b06      	ldr	r3, [pc, #24]	; (8001684 <HAL_MspInit+0x5c>)
 800166c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001672:	607b      	str	r3, [r7, #4]
 8001674:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001676:	2007      	movs	r0, #7
 8001678:	f000 fb40 	bl	8001cfc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800167c:	bf00      	nop
 800167e:	3710      	adds	r7, #16
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40023800 	.word	0x40023800

08001688 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800168c:	e7fe      	b.n	800168c <NMI_Handler+0x4>

0800168e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800168e:	b480      	push	{r7}
 8001690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001692:	e7fe      	b.n	8001692 <HardFault_Handler+0x4>

08001694 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001698:	e7fe      	b.n	8001698 <MemManage_Handler+0x4>

0800169a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800169e:	e7fe      	b.n	800169e <BusFault_Handler+0x4>

080016a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016a4:	e7fe      	b.n	80016a4 <UsageFault_Handler+0x4>

080016a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc80      	pop	{r7}
 80016b0:	4770      	bx	lr

080016b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bc80      	pop	{r7}
 80016bc:	4770      	bx	lr

080016be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr

080016ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016ce:	f000 f9e7 	bl	8001aa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
	...

080016d8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80016dc:	4802      	ldr	r0, [pc, #8]	; (80016e8 <SPI1_IRQHandler+0x10>)
 80016de:	f001 fd13 	bl	8003108 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	200000f0 	.word	0x200000f0

080016ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80016f0:	4802      	ldr	r0, [pc, #8]	; (80016fc <USART2_IRQHandler+0x10>)
 80016f2:	f001 ffd1 	bl	8003698 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20000148 	.word	0x20000148

08001700 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]
 8001710:	e00a      	b.n	8001728 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001712:	f3af 8000 	nop.w
 8001716:	4601      	mov	r1, r0
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	1c5a      	adds	r2, r3, #1
 800171c:	60ba      	str	r2, [r7, #8]
 800171e:	b2ca      	uxtb	r2, r1
 8001720:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	3301      	adds	r3, #1
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	697a      	ldr	r2, [r7, #20]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	429a      	cmp	r2, r3
 800172e:	dbf0      	blt.n	8001712 <_read+0x12>
  }

  return len;
 8001730:	687b      	ldr	r3, [r7, #4]
}
 8001732:	4618      	mov	r0, r3
 8001734:	3718      	adds	r7, #24
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <_close>:
  }
  return len;
}

int _close(int file)
{
 800173a:	b480      	push	{r7}
 800173c:	b083      	sub	sp, #12
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001742:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001746:	4618      	mov	r0, r3
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	bc80      	pop	{r7}
 800174e:	4770      	bx	lr

08001750 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001760:	605a      	str	r2, [r3, #4]
  return 0;
 8001762:	2300      	movs	r3, #0
}
 8001764:	4618      	mov	r0, r3
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	bc80      	pop	{r7}
 800176c:	4770      	bx	lr

0800176e <_isatty>:

int _isatty(int file)
{
 800176e:	b480      	push	{r7}
 8001770:	b083      	sub	sp, #12
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001776:	2301      	movs	r3, #1
}
 8001778:	4618      	mov	r0, r3
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	bc80      	pop	{r7}
 8001780:	4770      	bx	lr

08001782 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001782:	b480      	push	{r7}
 8001784:	b085      	sub	sp, #20
 8001786:	af00      	add	r7, sp, #0
 8001788:	60f8      	str	r0, [r7, #12]
 800178a:	60b9      	str	r1, [r7, #8]
 800178c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800178e:	2300      	movs	r3, #0
}
 8001790:	4618      	mov	r0, r3
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	bc80      	pop	{r7}
 8001798:	4770      	bx	lr
	...

0800179c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017a4:	4a14      	ldr	r2, [pc, #80]	; (80017f8 <_sbrk+0x5c>)
 80017a6:	4b15      	ldr	r3, [pc, #84]	; (80017fc <_sbrk+0x60>)
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017b0:	4b13      	ldr	r3, [pc, #76]	; (8001800 <_sbrk+0x64>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d102      	bne.n	80017be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017b8:	4b11      	ldr	r3, [pc, #68]	; (8001800 <_sbrk+0x64>)
 80017ba:	4a12      	ldr	r2, [pc, #72]	; (8001804 <_sbrk+0x68>)
 80017bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017be:	4b10      	ldr	r3, [pc, #64]	; (8001800 <_sbrk+0x64>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4413      	add	r3, r2
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d207      	bcs.n	80017dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017cc:	f002 fd0a 	bl	80041e4 <__errno>
 80017d0:	4603      	mov	r3, r0
 80017d2:	220c      	movs	r2, #12
 80017d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017d6:	f04f 33ff 	mov.w	r3, #4294967295
 80017da:	e009      	b.n	80017f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017dc:	4b08      	ldr	r3, [pc, #32]	; (8001800 <_sbrk+0x64>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017e2:	4b07      	ldr	r3, [pc, #28]	; (8001800 <_sbrk+0x64>)
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4413      	add	r3, r2
 80017ea:	4a05      	ldr	r2, [pc, #20]	; (8001800 <_sbrk+0x64>)
 80017ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ee:	68fb      	ldr	r3, [r7, #12]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3718      	adds	r7, #24
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	20014000 	.word	0x20014000
 80017fc:	00000400 	.word	0x00000400
 8001800:	200000e4 	.word	0x200000e4
 8001804:	200001a8 	.word	0x200001a8

08001808 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	bc80      	pop	{r7}
 8001812:	4770      	bx	lr

08001814 <dw_main>:

/**
 * Application entry point.
 */
int dw_main(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
//dwt

    /* Reset and initialise DW1000. See NOTE 2 below.
     * For initialisation, DW1000 clocks must be temporarily set to crystal speed. After initialisation SPI rate can be increased for optimum
     * performance. */
    reset_DW1000(); /* Target specific drive of RSTn line into DW1000 low for a period. */
 8001818:	f7ff fd1c 	bl	8001254 <reset_DW1000>
    port_set_dw1000_slowrate();
 800181c:	f7ff fd76 	bl	800130c <port_set_dw1000_slowrate>
    if (dwt_initialise(DWT_LOADNONE) == DWT_ERROR)
 8001820:	2000      	movs	r0, #0
 8001822:	f7fe fe27 	bl	8000474 <dwt_initialise>
 8001826:	4603      	mov	r3, r0
 8001828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800182c:	d103      	bne.n	8001836 <dw_main+0x22>
    {
        printf("INIT FAILED");
 800182e:	4816      	ldr	r0, [pc, #88]	; (8001888 <dw_main+0x74>)
 8001830:	f002 fd0a 	bl	8004248 <iprintf>
        while (1)
 8001834:	e7fe      	b.n	8001834 <dw_main+0x20>
        { };
    }
    port_set_dw1000_fastrate();
 8001836:	f7ff fd75 	bl	8001324 <port_set_dw1000_fastrate>

    /* Configure DW1000. See NOTE 3 below. */
    dwt_configure(&config);
 800183a:	4814      	ldr	r0, [pc, #80]	; (800188c <dw_main+0x78>)
 800183c:	f7fe ff70 	bl	8000720 <dwt_configure>

    /* Loop forever sending frames periodically. */
    while(1)
    {
        /* Write frame data to DW1000 and prepare transmission. See NOTE 4 below.*/
        dwt_writetxdata(sizeof(tx_msg), tx_msg, 0); /* Zero offset in TX buffer. */
 8001840:	2200      	movs	r2, #0
 8001842:	4913      	ldr	r1, [pc, #76]	; (8001890 <dw_main+0x7c>)
 8001844:	200f      	movs	r0, #15
 8001846:	f7ff f8d5 	bl	80009f4 <dwt_writetxdata>
        dwt_writetxfctrl(sizeof(tx_msg), 0, 0); /* Zero offset in TX buffer, no ranging. */
 800184a:	2200      	movs	r2, #0
 800184c:	2100      	movs	r1, #0
 800184e:	200f      	movs	r0, #15
 8001850:	f7ff f8ee 	bl	8000a30 <dwt_writetxfctrl>

        /* Start transmission. */
        dwt_starttx(DWT_START_TX_IMMEDIATE);
 8001854:	2000      	movs	r0, #0
 8001856:	f7ff fb61 	bl	8000f1c <dwt_starttx>
         * function to access it.*/
//        while (!(dwt_read32bitreg(SYS_STATUS_ID) & SYS_STATUS_TXFRS))
//        { };

        /* Clear TX frame sent event. */
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_TXFRS);
 800185a:	2280      	movs	r2, #128	; 0x80
 800185c:	2100      	movs	r1, #0
 800185e:	200f      	movs	r0, #15
 8001860:	f7ff fa2e 	bl	8000cc0 <dwt_write32bitoffsetreg>

        /* Execute a delay between transmissions. */
        Sleep(TX_DELAY_MS);
 8001864:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001868:	f7ff fccc 	bl	8001204 <Sleep>
        HAL_UART_Transmit(&huart2, tx_msg, sizeof(tx_msg), HAL_MAX_DELAY);
 800186c:	f04f 33ff 	mov.w	r3, #4294967295
 8001870:	220f      	movs	r2, #15
 8001872:	4907      	ldr	r1, [pc, #28]	; (8001890 <dw_main+0x7c>)
 8001874:	4807      	ldr	r0, [pc, #28]	; (8001894 <dw_main+0x80>)
 8001876:	f001 fe8b 	bl	8003590 <HAL_UART_Transmit>
        /* Increment the blink frame sequence number (modulo 256). */
        tx_msg[BLINK_FRAME_SN_IDX]++;
 800187a:	4b05      	ldr	r3, [pc, #20]	; (8001890 <dw_main+0x7c>)
 800187c:	785b      	ldrb	r3, [r3, #1]
 800187e:	3301      	adds	r3, #1
 8001880:	b2da      	uxtb	r2, r3
 8001882:	4b03      	ldr	r3, [pc, #12]	; (8001890 <dw_main+0x7c>)
 8001884:	705a      	strb	r2, [r3, #1]
        dwt_writetxdata(sizeof(tx_msg), tx_msg, 0); /* Zero offset in TX buffer. */
 8001886:	e7db      	b.n	8001840 <dw_main+0x2c>
 8001888:	08005120 	.word	0x08005120
 800188c:	20000008 	.word	0x20000008
 8001890:	20000014 	.word	0x20000014
 8001894:	20000148 	.word	0x20000148

08001898 <_write>:
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "usart.h"

/* USER CODE BEGIN 0 */
int _write(int fd, char* ptr, int len) {
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	f04f 33ff 	mov.w	r3, #4294967295
 80018ac:	68b9      	ldr	r1, [r7, #8]
 80018ae:	4804      	ldr	r0, [pc, #16]	; (80018c0 <_write+0x28>)
 80018b0:	f001 fe6e 	bl	8003590 <HAL_UART_Transmit>
    return len;
 80018b4:	687b      	ldr	r3, [r7, #4]
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000148 	.word	0x20000148

080018c4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018c8:	4b11      	ldr	r3, [pc, #68]	; (8001910 <MX_USART2_UART_Init+0x4c>)
 80018ca:	4a12      	ldr	r2, [pc, #72]	; (8001914 <MX_USART2_UART_Init+0x50>)
 80018cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018ce:	4b10      	ldr	r3, [pc, #64]	; (8001910 <MX_USART2_UART_Init+0x4c>)
 80018d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018d6:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <MX_USART2_UART_Init+0x4c>)
 80018d8:	2200      	movs	r2, #0
 80018da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018dc:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <MX_USART2_UART_Init+0x4c>)
 80018de:	2200      	movs	r2, #0
 80018e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018e2:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <MX_USART2_UART_Init+0x4c>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018e8:	4b09      	ldr	r3, [pc, #36]	; (8001910 <MX_USART2_UART_Init+0x4c>)
 80018ea:	220c      	movs	r2, #12
 80018ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ee:	4b08      	ldr	r3, [pc, #32]	; (8001910 <MX_USART2_UART_Init+0x4c>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <MX_USART2_UART_Init+0x4c>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018fa:	4805      	ldr	r0, [pc, #20]	; (8001910 <MX_USART2_UART_Init+0x4c>)
 80018fc:	f001 fdf8 	bl	80034f0 <HAL_UART_Init>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001906:	f7ff fe07 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000148 	.word	0x20000148
 8001914:	40004400 	.word	0x40004400

08001918 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b08a      	sub	sp, #40	; 0x28
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001920:	f107 0314 	add.w	r3, r7, #20
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	60da      	str	r2, [r3, #12]
 800192e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a1b      	ldr	r2, [pc, #108]	; (80019a4 <HAL_UART_MspInit+0x8c>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d12f      	bne.n	800199a <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800193a:	4b1b      	ldr	r3, [pc, #108]	; (80019a8 <HAL_UART_MspInit+0x90>)
 800193c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193e:	4a1a      	ldr	r2, [pc, #104]	; (80019a8 <HAL_UART_MspInit+0x90>)
 8001940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001944:	6253      	str	r3, [r2, #36]	; 0x24
 8001946:	4b18      	ldr	r3, [pc, #96]	; (80019a8 <HAL_UART_MspInit+0x90>)
 8001948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194e:	613b      	str	r3, [r7, #16]
 8001950:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001952:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <HAL_UART_MspInit+0x90>)
 8001954:	69db      	ldr	r3, [r3, #28]
 8001956:	4a14      	ldr	r2, [pc, #80]	; (80019a8 <HAL_UART_MspInit+0x90>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	61d3      	str	r3, [r2, #28]
 800195e:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <HAL_UART_MspInit+0x90>)
 8001960:	69db      	ldr	r3, [r3, #28]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800196a:	230c      	movs	r3, #12
 800196c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196e:	2302      	movs	r3, #2
 8001970:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001976:	2303      	movs	r3, #3
 8001978:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800197a:	2307      	movs	r3, #7
 800197c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197e:	f107 0314 	add.w	r3, r7, #20
 8001982:	4619      	mov	r1, r3
 8001984:	4809      	ldr	r0, [pc, #36]	; (80019ac <HAL_UART_MspInit+0x94>)
 8001986:	f000 fa87 	bl	8001e98 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800198a:	2200      	movs	r2, #0
 800198c:	2100      	movs	r1, #0
 800198e:	2026      	movs	r0, #38	; 0x26
 8001990:	f000 f9bf 	bl	8001d12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001994:	2026      	movs	r0, #38	; 0x26
 8001996:	f000 f9d8 	bl	8001d4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800199a:	bf00      	nop
 800199c:	3728      	adds	r7, #40	; 0x28
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40004400 	.word	0x40004400
 80019a8:	40023800 	.word	0x40023800
 80019ac:	40020000 	.word	0x40020000

080019b0 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 80019b0:	f7ff ff2a 	bl	8001808 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019b4:	480b      	ldr	r0, [pc, #44]	; (80019e4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80019b6:	490c      	ldr	r1, [pc, #48]	; (80019e8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80019b8:	4a0c      	ldr	r2, [pc, #48]	; (80019ec <LoopFillZerobss+0x16>)
  movs r3, #0
 80019ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019bc:	e002      	b.n	80019c4 <LoopCopyDataInit>

080019be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019c2:	3304      	adds	r3, #4

080019c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019c8:	d3f9      	bcc.n	80019be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ca:	4a09      	ldr	r2, [pc, #36]	; (80019f0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80019cc:	4c09      	ldr	r4, [pc, #36]	; (80019f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019d0:	e001      	b.n	80019d6 <LoopFillZerobss>

080019d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019d4:	3204      	adds	r2, #4

080019d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019d8:	d3fb      	bcc.n	80019d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019da:	f002 fc09 	bl	80041f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019de:	f7ff fd3b 	bl	8001458 <main>
  bx lr
 80019e2:	4770      	bx	lr
  ldr r0, =_sdata
 80019e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019e8:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80019ec:	080052ac 	.word	0x080052ac
  ldr r2, =_sbss
 80019f0:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80019f4:	200001a4 	.word	0x200001a4

080019f8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019f8:	e7fe      	b.n	80019f8 <ADC1_IRQHandler>

080019fa <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b082      	sub	sp, #8
 80019fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a00:	2300      	movs	r3, #0
 8001a02:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a04:	2003      	movs	r0, #3
 8001a06:	f000 f979 	bl	8001cfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a0a:	2000      	movs	r0, #0
 8001a0c:	f000 f80e 	bl	8001a2c <HAL_InitTick>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d002      	beq.n	8001a1c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	71fb      	strb	r3, [r7, #7]
 8001a1a:	e001      	b.n	8001a20 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a1c:	f7ff fe04 	bl	8001628 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a20:	79fb      	ldrb	r3, [r7, #7]
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
	...

08001a2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a34:	2300      	movs	r3, #0
 8001a36:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001a38:	4b16      	ldr	r3, [pc, #88]	; (8001a94 <HAL_InitTick+0x68>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d022      	beq.n	8001a86 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001a40:	4b15      	ldr	r3, [pc, #84]	; (8001a98 <HAL_InitTick+0x6c>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	4b13      	ldr	r3, [pc, #76]	; (8001a94 <HAL_InitTick+0x68>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a54:	4618      	mov	r0, r3
 8001a56:	f000 f994 	bl	8001d82 <HAL_SYSTICK_Config>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d10f      	bne.n	8001a80 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2b0f      	cmp	r3, #15
 8001a64:	d809      	bhi.n	8001a7a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a66:	2200      	movs	r2, #0
 8001a68:	6879      	ldr	r1, [r7, #4]
 8001a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8001a6e:	f000 f950 	bl	8001d12 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a72:	4a0a      	ldr	r2, [pc, #40]	; (8001a9c <HAL_InitTick+0x70>)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6013      	str	r3, [r2, #0]
 8001a78:	e007      	b.n	8001a8a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	73fb      	strb	r3, [r7, #15]
 8001a7e:	e004      	b.n	8001a8a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	73fb      	strb	r3, [r7, #15]
 8001a84:	e001      	b.n	8001a8a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3710      	adds	r7, #16
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	20000028 	.word	0x20000028
 8001a98:	20000004 	.word	0x20000004
 8001a9c:	20000024 	.word	0x20000024

08001aa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aa4:	4b05      	ldr	r3, [pc, #20]	; (8001abc <HAL_IncTick+0x1c>)
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <HAL_IncTick+0x20>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4413      	add	r3, r2
 8001aae:	4a03      	ldr	r2, [pc, #12]	; (8001abc <HAL_IncTick+0x1c>)
 8001ab0:	6013      	str	r3, [r2, #0]
}
 8001ab2:	bf00      	nop
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bc80      	pop	{r7}
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	20000190 	.word	0x20000190
 8001ac0:	20000028 	.word	0x20000028

08001ac4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ac8:	4b02      	ldr	r3, [pc, #8]	; (8001ad4 <HAL_GetTick+0x10>)
 8001aca:	681b      	ldr	r3, [r3, #0]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bc80      	pop	{r7}
 8001ad2:	4770      	bx	lr
 8001ad4:	20000190 	.word	0x20000190

08001ad8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ae0:	f7ff fff0 	bl	8001ac4 <HAL_GetTick>
 8001ae4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af0:	d004      	beq.n	8001afc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001af2:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <HAL_Delay+0x40>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	68fa      	ldr	r2, [r7, #12]
 8001af8:	4413      	add	r3, r2
 8001afa:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001afc:	bf00      	nop
 8001afe:	f7ff ffe1 	bl	8001ac4 <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	68fa      	ldr	r2, [r7, #12]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d8f7      	bhi.n	8001afe <HAL_Delay+0x26>
  {
  }
}
 8001b0e:	bf00      	nop
 8001b10:	bf00      	nop
 8001b12:	3710      	adds	r7, #16
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20000028 	.word	0x20000028

08001b1c <__NVIC_SetPriorityGrouping>:
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b2c:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <__NVIC_SetPriorityGrouping+0x44>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b32:	68ba      	ldr	r2, [r7, #8]
 8001b34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b38:	4013      	ands	r3, r2
 8001b3a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b4e:	4a04      	ldr	r2, [pc, #16]	; (8001b60 <__NVIC_SetPriorityGrouping+0x44>)
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	60d3      	str	r3, [r2, #12]
}
 8001b54:	bf00      	nop
 8001b56:	3714      	adds	r7, #20
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	e000ed00 	.word	0xe000ed00

08001b64 <__NVIC_GetPriorityGrouping>:
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b68:	4b04      	ldr	r3, [pc, #16]	; (8001b7c <__NVIC_GetPriorityGrouping+0x18>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	0a1b      	lsrs	r3, r3, #8
 8001b6e:	f003 0307 	and.w	r3, r3, #7
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bc80      	pop	{r7}
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	e000ed00 	.word	0xe000ed00

08001b80 <__NVIC_EnableIRQ>:
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	db0b      	blt.n	8001baa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b92:	79fb      	ldrb	r3, [r7, #7]
 8001b94:	f003 021f 	and.w	r2, r3, #31
 8001b98:	4906      	ldr	r1, [pc, #24]	; (8001bb4 <__NVIC_EnableIRQ+0x34>)
 8001b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9e:	095b      	lsrs	r3, r3, #5
 8001ba0:	2001      	movs	r0, #1
 8001ba2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr
 8001bb4:	e000e100 	.word	0xe000e100

08001bb8 <__NVIC_DisableIRQ>:
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	db12      	blt.n	8001bf0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bca:	79fb      	ldrb	r3, [r7, #7]
 8001bcc:	f003 021f 	and.w	r2, r3, #31
 8001bd0:	490a      	ldr	r1, [pc, #40]	; (8001bfc <__NVIC_DisableIRQ+0x44>)
 8001bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd6:	095b      	lsrs	r3, r3, #5
 8001bd8:	2001      	movs	r0, #1
 8001bda:	fa00 f202 	lsl.w	r2, r0, r2
 8001bde:	3320      	adds	r3, #32
 8001be0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001be4:	f3bf 8f4f 	dsb	sy
}
 8001be8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bea:	f3bf 8f6f 	isb	sy
}
 8001bee:	bf00      	nop
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bc80      	pop	{r7}
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	e000e100 	.word	0xe000e100

08001c00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	6039      	str	r1, [r7, #0]
 8001c0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	db0a      	blt.n	8001c2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	b2da      	uxtb	r2, r3
 8001c18:	490c      	ldr	r1, [pc, #48]	; (8001c4c <__NVIC_SetPriority+0x4c>)
 8001c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1e:	0112      	lsls	r2, r2, #4
 8001c20:	b2d2      	uxtb	r2, r2
 8001c22:	440b      	add	r3, r1
 8001c24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c28:	e00a      	b.n	8001c40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	b2da      	uxtb	r2, r3
 8001c2e:	4908      	ldr	r1, [pc, #32]	; (8001c50 <__NVIC_SetPriority+0x50>)
 8001c30:	79fb      	ldrb	r3, [r7, #7]
 8001c32:	f003 030f 	and.w	r3, r3, #15
 8001c36:	3b04      	subs	r3, #4
 8001c38:	0112      	lsls	r2, r2, #4
 8001c3a:	b2d2      	uxtb	r2, r2
 8001c3c:	440b      	add	r3, r1
 8001c3e:	761a      	strb	r2, [r3, #24]
}
 8001c40:	bf00      	nop
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bc80      	pop	{r7}
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	e000e100 	.word	0xe000e100
 8001c50:	e000ed00 	.word	0xe000ed00

08001c54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b089      	sub	sp, #36	; 0x24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	60b9      	str	r1, [r7, #8]
 8001c5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	f1c3 0307 	rsb	r3, r3, #7
 8001c6e:	2b04      	cmp	r3, #4
 8001c70:	bf28      	it	cs
 8001c72:	2304      	movcs	r3, #4
 8001c74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	3304      	adds	r3, #4
 8001c7a:	2b06      	cmp	r3, #6
 8001c7c:	d902      	bls.n	8001c84 <NVIC_EncodePriority+0x30>
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	3b03      	subs	r3, #3
 8001c82:	e000      	b.n	8001c86 <NVIC_EncodePriority+0x32>
 8001c84:	2300      	movs	r3, #0
 8001c86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c88:	f04f 32ff 	mov.w	r2, #4294967295
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	43da      	mvns	r2, r3
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	401a      	ands	r2, r3
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca6:	43d9      	mvns	r1, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cac:	4313      	orrs	r3, r2
         );
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3724      	adds	r7, #36	; 0x24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc80      	pop	{r7}
 8001cb6:	4770      	bx	lr

08001cb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cc8:	d301      	bcc.n	8001cce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e00f      	b.n	8001cee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cce:	4a0a      	ldr	r2, [pc, #40]	; (8001cf8 <SysTick_Config+0x40>)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cd6:	210f      	movs	r1, #15
 8001cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cdc:	f7ff ff90 	bl	8001c00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ce0:	4b05      	ldr	r3, [pc, #20]	; (8001cf8 <SysTick_Config+0x40>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ce6:	4b04      	ldr	r3, [pc, #16]	; (8001cf8 <SysTick_Config+0x40>)
 8001ce8:	2207      	movs	r2, #7
 8001cea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	e000e010 	.word	0xe000e010

08001cfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f7ff ff09 	bl	8001b1c <__NVIC_SetPriorityGrouping>
}
 8001d0a:	bf00      	nop
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b086      	sub	sp, #24
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	4603      	mov	r3, r0
 8001d1a:	60b9      	str	r1, [r7, #8]
 8001d1c:	607a      	str	r2, [r7, #4]
 8001d1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d20:	2300      	movs	r3, #0
 8001d22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d24:	f7ff ff1e 	bl	8001b64 <__NVIC_GetPriorityGrouping>
 8001d28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	68b9      	ldr	r1, [r7, #8]
 8001d2e:	6978      	ldr	r0, [r7, #20]
 8001d30:	f7ff ff90 	bl	8001c54 <NVIC_EncodePriority>
 8001d34:	4602      	mov	r2, r0
 8001d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d3a:	4611      	mov	r1, r2
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff ff5f 	bl	8001c00 <__NVIC_SetPriority>
}
 8001d42:	bf00      	nop
 8001d44:	3718      	adds	r7, #24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b082      	sub	sp, #8
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	4603      	mov	r3, r0
 8001d52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff ff11 	bl	8001b80 <__NVIC_EnableIRQ>
}
 8001d5e:	bf00      	nop
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xxxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b082      	sub	sp, #8
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff ff1f 	bl	8001bb8 <__NVIC_DisableIRQ>
}
 8001d7a:	bf00      	nop
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b082      	sub	sp, #8
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f7ff ff94 	bl	8001cb8 <SysTick_Config>
 8001d90:	4603      	mov	r3, r0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b085      	sub	sp, #20
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001da2:	2300      	movs	r3, #0
 8001da4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d008      	beq.n	8001dc4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2204      	movs	r2, #4
 8001db6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e022      	b.n	8001e0a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f022 020e 	bic.w	r2, r2, #14
 8001dd2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f022 0201 	bic.w	r2, r2, #1
 8001de2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de8:	f003 021c 	and.w	r2, r3, #28
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001df0:	2101      	movs	r1, #1
 8001df2:	fa01 f202 	lsl.w	r2, r1, r2
 8001df6:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8001e08:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3714      	adds	r7, #20
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr

08001e14 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d005      	beq.n	8001e38 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2204      	movs	r2, #4
 8001e30:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	73fb      	strb	r3, [r7, #15]
 8001e36:	e029      	b.n	8001e8c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f022 020e 	bic.w	r2, r2, #14
 8001e46:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f022 0201 	bic.w	r2, r2, #1
 8001e56:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5c:	f003 021c 	and.w	r2, r3, #28
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e64:	2101      	movs	r1, #1
 8001e66:	fa01 f202 	lsl.w	r2, r1, r2
 8001e6a:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	4798      	blx	r3
    }
  }
  return status;
 8001e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
	...

08001e98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b087      	sub	sp, #28
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001eae:	e160      	b.n	8002172 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f000 8152 	beq.w	800216c <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f003 0303 	and.w	r3, r3, #3
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d005      	beq.n	8001ee0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d130      	bne.n	8001f42 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	2203      	movs	r2, #3
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	68da      	ldr	r2, [r3, #12]
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001f16:	2201      	movs	r2, #1
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	4013      	ands	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	091b      	lsrs	r3, r3, #4
 8001f2c:	f003 0201 	and.w	r2, r3, #1
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f003 0303 	and.w	r3, r3, #3
 8001f4a:	2b03      	cmp	r3, #3
 8001f4c:	d017      	beq.n	8001f7e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	2203      	movs	r2, #3
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	4013      	ands	r3, r2
 8001f64:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	689a      	ldr	r2, [r3, #8]
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f003 0303 	and.w	r3, r3, #3
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d123      	bne.n	8001fd2 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	08da      	lsrs	r2, r3, #3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	3208      	adds	r2, #8
 8001f92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f96:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	220f      	movs	r2, #15
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	4013      	ands	r3, r2
 8001fac:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	691a      	ldr	r2, [r3, #16]
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	f003 0307 	and.w	r3, r3, #7
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	08da      	lsrs	r2, r3, #3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3208      	adds	r2, #8
 8001fcc:	6939      	ldr	r1, [r7, #16]
 8001fce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	2203      	movs	r2, #3
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f003 0203 	and.w	r2, r3, #3
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800200e:	2b00      	cmp	r3, #0
 8002010:	f000 80ac 	beq.w	800216c <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002014:	4b5e      	ldr	r3, [pc, #376]	; (8002190 <HAL_GPIO_Init+0x2f8>)
 8002016:	6a1b      	ldr	r3, [r3, #32]
 8002018:	4a5d      	ldr	r2, [pc, #372]	; (8002190 <HAL_GPIO_Init+0x2f8>)
 800201a:	f043 0301 	orr.w	r3, r3, #1
 800201e:	6213      	str	r3, [r2, #32]
 8002020:	4b5b      	ldr	r3, [pc, #364]	; (8002190 <HAL_GPIO_Init+0x2f8>)
 8002022:	6a1b      	ldr	r3, [r3, #32]
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	60bb      	str	r3, [r7, #8]
 800202a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 800202c:	4a59      	ldr	r2, [pc, #356]	; (8002194 <HAL_GPIO_Init+0x2fc>)
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	089b      	lsrs	r3, r3, #2
 8002032:	3302      	adds	r3, #2
 8002034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002038:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	f003 0303 	and.w	r3, r3, #3
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	220f      	movs	r2, #15
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	43db      	mvns	r3, r3
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	4013      	ands	r3, r2
 800204e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a51      	ldr	r2, [pc, #324]	; (8002198 <HAL_GPIO_Init+0x300>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d025      	beq.n	80020a4 <HAL_GPIO_Init+0x20c>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a50      	ldr	r2, [pc, #320]	; (800219c <HAL_GPIO_Init+0x304>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d01f      	beq.n	80020a0 <HAL_GPIO_Init+0x208>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a4f      	ldr	r2, [pc, #316]	; (80021a0 <HAL_GPIO_Init+0x308>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d019      	beq.n	800209c <HAL_GPIO_Init+0x204>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a4e      	ldr	r2, [pc, #312]	; (80021a4 <HAL_GPIO_Init+0x30c>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d013      	beq.n	8002098 <HAL_GPIO_Init+0x200>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a4d      	ldr	r2, [pc, #308]	; (80021a8 <HAL_GPIO_Init+0x310>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d00d      	beq.n	8002094 <HAL_GPIO_Init+0x1fc>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a4c      	ldr	r2, [pc, #304]	; (80021ac <HAL_GPIO_Init+0x314>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d007      	beq.n	8002090 <HAL_GPIO_Init+0x1f8>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a4b      	ldr	r2, [pc, #300]	; (80021b0 <HAL_GPIO_Init+0x318>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d101      	bne.n	800208c <HAL_GPIO_Init+0x1f4>
 8002088:	2306      	movs	r3, #6
 800208a:	e00c      	b.n	80020a6 <HAL_GPIO_Init+0x20e>
 800208c:	2307      	movs	r3, #7
 800208e:	e00a      	b.n	80020a6 <HAL_GPIO_Init+0x20e>
 8002090:	2305      	movs	r3, #5
 8002092:	e008      	b.n	80020a6 <HAL_GPIO_Init+0x20e>
 8002094:	2304      	movs	r3, #4
 8002096:	e006      	b.n	80020a6 <HAL_GPIO_Init+0x20e>
 8002098:	2303      	movs	r3, #3
 800209a:	e004      	b.n	80020a6 <HAL_GPIO_Init+0x20e>
 800209c:	2302      	movs	r3, #2
 800209e:	e002      	b.n	80020a6 <HAL_GPIO_Init+0x20e>
 80020a0:	2301      	movs	r3, #1
 80020a2:	e000      	b.n	80020a6 <HAL_GPIO_Init+0x20e>
 80020a4:	2300      	movs	r3, #0
 80020a6:	697a      	ldr	r2, [r7, #20]
 80020a8:	f002 0203 	and.w	r2, r2, #3
 80020ac:	0092      	lsls	r2, r2, #2
 80020ae:	4093      	lsls	r3, r2
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80020b6:	4937      	ldr	r1, [pc, #220]	; (8002194 <HAL_GPIO_Init+0x2fc>)
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	089b      	lsrs	r3, r3, #2
 80020bc:	3302      	adds	r3, #2
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020c4:	4b3b      	ldr	r3, [pc, #236]	; (80021b4 <HAL_GPIO_Init+0x31c>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	43db      	mvns	r3, r3
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	4013      	ands	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d003      	beq.n	80020e8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80020e8:	4a32      	ldr	r2, [pc, #200]	; (80021b4 <HAL_GPIO_Init+0x31c>)
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020ee:	4b31      	ldr	r3, [pc, #196]	; (80021b4 <HAL_GPIO_Init+0x31c>)
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	43db      	mvns	r3, r3
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	4013      	ands	r3, r2
 80020fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d003      	beq.n	8002112 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	4313      	orrs	r3, r2
 8002110:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002112:	4a28      	ldr	r2, [pc, #160]	; (80021b4 <HAL_GPIO_Init+0x31c>)
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002118:	4b26      	ldr	r3, [pc, #152]	; (80021b4 <HAL_GPIO_Init+0x31c>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	43db      	mvns	r3, r3
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	4013      	ands	r3, r2
 8002126:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d003      	beq.n	800213c <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	4313      	orrs	r3, r2
 800213a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800213c:	4a1d      	ldr	r2, [pc, #116]	; (80021b4 <HAL_GPIO_Init+0x31c>)
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002142:	4b1c      	ldr	r3, [pc, #112]	; (80021b4 <HAL_GPIO_Init+0x31c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	43db      	mvns	r3, r3
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	4013      	ands	r3, r2
 8002150:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4313      	orrs	r3, r2
 8002164:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002166:	4a13      	ldr	r2, [pc, #76]	; (80021b4 <HAL_GPIO_Init+0x31c>)
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	3301      	adds	r3, #1
 8002170:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	fa22 f303 	lsr.w	r3, r2, r3
 800217c:	2b00      	cmp	r3, #0
 800217e:	f47f ae97 	bne.w	8001eb0 <HAL_GPIO_Init+0x18>
  }
}
 8002182:	bf00      	nop
 8002184:	bf00      	nop
 8002186:	371c      	adds	r7, #28
 8002188:	46bd      	mov	sp, r7
 800218a:	bc80      	pop	{r7}
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	40023800 	.word	0x40023800
 8002194:	40010000 	.word	0x40010000
 8002198:	40020000 	.word	0x40020000
 800219c:	40020400 	.word	0x40020400
 80021a0:	40020800 	.word	0x40020800
 80021a4:	40020c00 	.word	0x40020c00
 80021a8:	40021000 	.word	0x40021000
 80021ac:	40021400 	.word	0x40021400
 80021b0:	40021800 	.word	0x40021800
 80021b4:	40010400 	.word	0x40010400

080021b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	460b      	mov	r3, r1
 80021c2:	807b      	strh	r3, [r7, #2]
 80021c4:	4613      	mov	r3, r2
 80021c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021c8:	787b      	ldrb	r3, [r7, #1]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d003      	beq.n	80021d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021ce:	887a      	ldrh	r2, [r7, #2]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80021d4:	e003      	b.n	80021de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80021d6:	887b      	ldrh	r3, [r7, #2]
 80021d8:	041a      	lsls	r2, r3, #16
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	619a      	str	r2, [r3, #24]
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bc80      	pop	{r7}
 80021e6:	4770      	bx	lr

080021e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b088      	sub	sp, #32
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d101      	bne.n	80021fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e31d      	b.n	8002836 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021fa:	4b94      	ldr	r3, [pc, #592]	; (800244c <HAL_RCC_OscConfig+0x264>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 030c 	and.w	r3, r3, #12
 8002202:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002204:	4b91      	ldr	r3, [pc, #580]	; (800244c <HAL_RCC_OscConfig+0x264>)
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800220c:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	2b00      	cmp	r3, #0
 8002218:	d07b      	beq.n	8002312 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	2b08      	cmp	r3, #8
 800221e:	d006      	beq.n	800222e <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	2b0c      	cmp	r3, #12
 8002224:	d10f      	bne.n	8002246 <HAL_RCC_OscConfig+0x5e>
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800222c:	d10b      	bne.n	8002246 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800222e:	4b87      	ldr	r3, [pc, #540]	; (800244c <HAL_RCC_OscConfig+0x264>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d06a      	beq.n	8002310 <HAL_RCC_OscConfig+0x128>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d166      	bne.n	8002310 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e2f7      	b.n	8002836 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d106      	bne.n	800225c <HAL_RCC_OscConfig+0x74>
 800224e:	4b7f      	ldr	r3, [pc, #508]	; (800244c <HAL_RCC_OscConfig+0x264>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a7e      	ldr	r2, [pc, #504]	; (800244c <HAL_RCC_OscConfig+0x264>)
 8002254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002258:	6013      	str	r3, [r2, #0]
 800225a:	e02d      	b.n	80022b8 <HAL_RCC_OscConfig+0xd0>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d10c      	bne.n	800227e <HAL_RCC_OscConfig+0x96>
 8002264:	4b79      	ldr	r3, [pc, #484]	; (800244c <HAL_RCC_OscConfig+0x264>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a78      	ldr	r2, [pc, #480]	; (800244c <HAL_RCC_OscConfig+0x264>)
 800226a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800226e:	6013      	str	r3, [r2, #0]
 8002270:	4b76      	ldr	r3, [pc, #472]	; (800244c <HAL_RCC_OscConfig+0x264>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a75      	ldr	r2, [pc, #468]	; (800244c <HAL_RCC_OscConfig+0x264>)
 8002276:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800227a:	6013      	str	r3, [r2, #0]
 800227c:	e01c      	b.n	80022b8 <HAL_RCC_OscConfig+0xd0>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	2b05      	cmp	r3, #5
 8002284:	d10c      	bne.n	80022a0 <HAL_RCC_OscConfig+0xb8>
 8002286:	4b71      	ldr	r3, [pc, #452]	; (800244c <HAL_RCC_OscConfig+0x264>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a70      	ldr	r2, [pc, #448]	; (800244c <HAL_RCC_OscConfig+0x264>)
 800228c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002290:	6013      	str	r3, [r2, #0]
 8002292:	4b6e      	ldr	r3, [pc, #440]	; (800244c <HAL_RCC_OscConfig+0x264>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a6d      	ldr	r2, [pc, #436]	; (800244c <HAL_RCC_OscConfig+0x264>)
 8002298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800229c:	6013      	str	r3, [r2, #0]
 800229e:	e00b      	b.n	80022b8 <HAL_RCC_OscConfig+0xd0>
 80022a0:	4b6a      	ldr	r3, [pc, #424]	; (800244c <HAL_RCC_OscConfig+0x264>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a69      	ldr	r2, [pc, #420]	; (800244c <HAL_RCC_OscConfig+0x264>)
 80022a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022aa:	6013      	str	r3, [r2, #0]
 80022ac:	4b67      	ldr	r3, [pc, #412]	; (800244c <HAL_RCC_OscConfig+0x264>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a66      	ldr	r2, [pc, #408]	; (800244c <HAL_RCC_OscConfig+0x264>)
 80022b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d013      	beq.n	80022e8 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c0:	f7ff fc00 	bl	8001ac4 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022c8:	f7ff fbfc 	bl	8001ac4 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b64      	cmp	r3, #100	; 0x64
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e2ad      	b.n	8002836 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022da:	4b5c      	ldr	r3, [pc, #368]	; (800244c <HAL_RCC_OscConfig+0x264>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d0f0      	beq.n	80022c8 <HAL_RCC_OscConfig+0xe0>
 80022e6:	e014      	b.n	8002312 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e8:	f7ff fbec 	bl	8001ac4 <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022f0:	f7ff fbe8 	bl	8001ac4 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b64      	cmp	r3, #100	; 0x64
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e299      	b.n	8002836 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002302:	4b52      	ldr	r3, [pc, #328]	; (800244c <HAL_RCC_OscConfig+0x264>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1f0      	bne.n	80022f0 <HAL_RCC_OscConfig+0x108>
 800230e:	e000      	b.n	8002312 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002310:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d05a      	beq.n	80023d4 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	2b04      	cmp	r3, #4
 8002322:	d005      	beq.n	8002330 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	2b0c      	cmp	r3, #12
 8002328:	d119      	bne.n	800235e <HAL_RCC_OscConfig+0x176>
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d116      	bne.n	800235e <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002330:	4b46      	ldr	r3, [pc, #280]	; (800244c <HAL_RCC_OscConfig+0x264>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d005      	beq.n	8002348 <HAL_RCC_OscConfig+0x160>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d001      	beq.n	8002348 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e276      	b.n	8002836 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002348:	4b40      	ldr	r3, [pc, #256]	; (800244c <HAL_RCC_OscConfig+0x264>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	021b      	lsls	r3, r3, #8
 8002356:	493d      	ldr	r1, [pc, #244]	; (800244c <HAL_RCC_OscConfig+0x264>)
 8002358:	4313      	orrs	r3, r2
 800235a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800235c:	e03a      	b.n	80023d4 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d020      	beq.n	80023a8 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002366:	4b3a      	ldr	r3, [pc, #232]	; (8002450 <HAL_RCC_OscConfig+0x268>)
 8002368:	2201      	movs	r2, #1
 800236a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236c:	f7ff fbaa 	bl	8001ac4 <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002372:	e008      	b.n	8002386 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002374:	f7ff fba6 	bl	8001ac4 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e257      	b.n	8002836 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002386:	4b31      	ldr	r3, [pc, #196]	; (800244c <HAL_RCC_OscConfig+0x264>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d0f0      	beq.n	8002374 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002392:	4b2e      	ldr	r3, [pc, #184]	; (800244c <HAL_RCC_OscConfig+0x264>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	021b      	lsls	r3, r3, #8
 80023a0:	492a      	ldr	r1, [pc, #168]	; (800244c <HAL_RCC_OscConfig+0x264>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	604b      	str	r3, [r1, #4]
 80023a6:	e015      	b.n	80023d4 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023a8:	4b29      	ldr	r3, [pc, #164]	; (8002450 <HAL_RCC_OscConfig+0x268>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ae:	f7ff fb89 	bl	8001ac4 <HAL_GetTick>
 80023b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80023b4:	e008      	b.n	80023c8 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023b6:	f7ff fb85 	bl	8001ac4 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e236      	b.n	8002836 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80023c8:	4b20      	ldr	r3, [pc, #128]	; (800244c <HAL_RCC_OscConfig+0x264>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1f0      	bne.n	80023b6 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0310 	and.w	r3, r3, #16
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f000 80b8 	beq.w	8002552 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d170      	bne.n	80024ca <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023e8:	4b18      	ldr	r3, [pc, #96]	; (800244c <HAL_RCC_OscConfig+0x264>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d005      	beq.n	8002400 <HAL_RCC_OscConfig+0x218>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d101      	bne.n	8002400 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e21a      	b.n	8002836 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a1a      	ldr	r2, [r3, #32]
 8002404:	4b11      	ldr	r3, [pc, #68]	; (800244c <HAL_RCC_OscConfig+0x264>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800240c:	429a      	cmp	r2, r3
 800240e:	d921      	bls.n	8002454 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	4618      	mov	r0, r3
 8002416:	f000 fc4b 	bl	8002cb0 <RCC_SetFlashLatencyFromMSIRange>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e208      	b.n	8002836 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002424:	4b09      	ldr	r3, [pc, #36]	; (800244c <HAL_RCC_OscConfig+0x264>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a1b      	ldr	r3, [r3, #32]
 8002430:	4906      	ldr	r1, [pc, #24]	; (800244c <HAL_RCC_OscConfig+0x264>)
 8002432:	4313      	orrs	r3, r2
 8002434:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002436:	4b05      	ldr	r3, [pc, #20]	; (800244c <HAL_RCC_OscConfig+0x264>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	061b      	lsls	r3, r3, #24
 8002444:	4901      	ldr	r1, [pc, #4]	; (800244c <HAL_RCC_OscConfig+0x264>)
 8002446:	4313      	orrs	r3, r2
 8002448:	604b      	str	r3, [r1, #4]
 800244a:	e020      	b.n	800248e <HAL_RCC_OscConfig+0x2a6>
 800244c:	40023800 	.word	0x40023800
 8002450:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002454:	4ba4      	ldr	r3, [pc, #656]	; (80026e8 <HAL_RCC_OscConfig+0x500>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a1b      	ldr	r3, [r3, #32]
 8002460:	49a1      	ldr	r1, [pc, #644]	; (80026e8 <HAL_RCC_OscConfig+0x500>)
 8002462:	4313      	orrs	r3, r2
 8002464:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002466:	4ba0      	ldr	r3, [pc, #640]	; (80026e8 <HAL_RCC_OscConfig+0x500>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	061b      	lsls	r3, r3, #24
 8002474:	499c      	ldr	r1, [pc, #624]	; (80026e8 <HAL_RCC_OscConfig+0x500>)
 8002476:	4313      	orrs	r3, r2
 8002478:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a1b      	ldr	r3, [r3, #32]
 800247e:	4618      	mov	r0, r3
 8002480:	f000 fc16 	bl	8002cb0 <RCC_SetFlashLatencyFromMSIRange>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e1d3      	b.n	8002836 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	0b5b      	lsrs	r3, r3, #13
 8002494:	3301      	adds	r3, #1
 8002496:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800249e:	4a92      	ldr	r2, [pc, #584]	; (80026e8 <HAL_RCC_OscConfig+0x500>)
 80024a0:	6892      	ldr	r2, [r2, #8]
 80024a2:	0912      	lsrs	r2, r2, #4
 80024a4:	f002 020f 	and.w	r2, r2, #15
 80024a8:	4990      	ldr	r1, [pc, #576]	; (80026ec <HAL_RCC_OscConfig+0x504>)
 80024aa:	5c8a      	ldrb	r2, [r1, r2]
 80024ac:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80024ae:	4a90      	ldr	r2, [pc, #576]	; (80026f0 <HAL_RCC_OscConfig+0x508>)
 80024b0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80024b2:	4b90      	ldr	r3, [pc, #576]	; (80026f4 <HAL_RCC_OscConfig+0x50c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7ff fab8 	bl	8001a2c <HAL_InitTick>
 80024bc:	4603      	mov	r3, r0
 80024be:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80024c0:	7bfb      	ldrb	r3, [r7, #15]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d045      	beq.n	8002552 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80024c6:	7bfb      	ldrb	r3, [r7, #15]
 80024c8:	e1b5      	b.n	8002836 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d029      	beq.n	8002526 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80024d2:	4b89      	ldr	r3, [pc, #548]	; (80026f8 <HAL_RCC_OscConfig+0x510>)
 80024d4:	2201      	movs	r2, #1
 80024d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d8:	f7ff faf4 	bl	8001ac4 <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024e0:	f7ff faf0 	bl	8001ac4 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e1a1      	b.n	8002836 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80024f2:	4b7d      	ldr	r3, [pc, #500]	; (80026e8 <HAL_RCC_OscConfig+0x500>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0f0      	beq.n	80024e0 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024fe:	4b7a      	ldr	r3, [pc, #488]	; (80026e8 <HAL_RCC_OscConfig+0x500>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	4977      	ldr	r1, [pc, #476]	; (80026e8 <HAL_RCC_OscConfig+0x500>)
 800250c:	4313      	orrs	r3, r2
 800250e:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002510:	4b75      	ldr	r3, [pc, #468]	; (80026e8 <HAL_RCC_OscConfig+0x500>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	69db      	ldr	r3, [r3, #28]
 800251c:	061b      	lsls	r3, r3, #24
 800251e:	4972      	ldr	r1, [pc, #456]	; (80026e8 <HAL_RCC_OscConfig+0x500>)
 8002520:	4313      	orrs	r3, r2
 8002522:	604b      	str	r3, [r1, #4]
 8002524:	e015      	b.n	8002552 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002526:	4b74      	ldr	r3, [pc, #464]	; (80026f8 <HAL_RCC_OscConfig+0x510>)
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252c:	f7ff faca 	bl	8001ac4 <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002534:	f7ff fac6 	bl	8001ac4 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e177      	b.n	8002836 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002546:	4b68      	ldr	r3, [pc, #416]	; (80026e8 <HAL_RCC_OscConfig+0x500>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1f0      	bne.n	8002534 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0308 	and.w	r3, r3, #8
 800255a:	2b00      	cmp	r3, #0
 800255c:	d030      	beq.n	80025c0 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d016      	beq.n	8002594 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002566:	4b65      	ldr	r3, [pc, #404]	; (80026fc <HAL_RCC_OscConfig+0x514>)
 8002568:	2201      	movs	r2, #1
 800256a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800256c:	f7ff faaa 	bl	8001ac4 <HAL_GetTick>
 8002570:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002574:	f7ff faa6 	bl	8001ac4 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e157      	b.n	8002836 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002586:	4b58      	ldr	r3, [pc, #352]	; (80026e8 <HAL_RCC_OscConfig+0x500>)
 8002588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d0f0      	beq.n	8002574 <HAL_RCC_OscConfig+0x38c>
 8002592:	e015      	b.n	80025c0 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002594:	4b59      	ldr	r3, [pc, #356]	; (80026fc <HAL_RCC_OscConfig+0x514>)
 8002596:	2200      	movs	r2, #0
 8002598:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800259a:	f7ff fa93 	bl	8001ac4 <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80025a0:	e008      	b.n	80025b4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025a2:	f7ff fa8f 	bl	8001ac4 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e140      	b.n	8002836 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80025b4:	4b4c      	ldr	r3, [pc, #304]	; (80026e8 <HAL_RCC_OscConfig+0x500>)
 80025b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1f0      	bne.n	80025a2 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 80b5 	beq.w	8002738 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ce:	2300      	movs	r3, #0
 80025d0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025d2:	4b45      	ldr	r3, [pc, #276]	; (80026e8 <HAL_RCC_OscConfig+0x500>)
 80025d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d10d      	bne.n	80025fa <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025de:	4b42      	ldr	r3, [pc, #264]	; (80026e8 <HAL_RCC_OscConfig+0x500>)
 80025e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e2:	4a41      	ldr	r2, [pc, #260]	; (80026e8 <HAL_RCC_OscConfig+0x500>)
 80025e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025e8:	6253      	str	r3, [r2, #36]	; 0x24
 80025ea:	4b3f      	ldr	r3, [pc, #252]	; (80026e8 <HAL_RCC_OscConfig+0x500>)
 80025ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f2:	60bb      	str	r3, [r7, #8]
 80025f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025f6:	2301      	movs	r3, #1
 80025f8:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025fa:	4b41      	ldr	r3, [pc, #260]	; (8002700 <HAL_RCC_OscConfig+0x518>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002602:	2b00      	cmp	r3, #0
 8002604:	d118      	bne.n	8002638 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002606:	4b3e      	ldr	r3, [pc, #248]	; (8002700 <HAL_RCC_OscConfig+0x518>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a3d      	ldr	r2, [pc, #244]	; (8002700 <HAL_RCC_OscConfig+0x518>)
 800260c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002610:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002612:	f7ff fa57 	bl	8001ac4 <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002618:	e008      	b.n	800262c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800261a:	f7ff fa53 	bl	8001ac4 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b64      	cmp	r3, #100	; 0x64
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e104      	b.n	8002836 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800262c:	4b34      	ldr	r3, [pc, #208]	; (8002700 <HAL_RCC_OscConfig+0x518>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002634:	2b00      	cmp	r3, #0
 8002636:	d0f0      	beq.n	800261a <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d106      	bne.n	800264e <HAL_RCC_OscConfig+0x466>
 8002640:	4b29      	ldr	r3, [pc, #164]	; (80026e8 <HAL_RCC_OscConfig+0x500>)
 8002642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002644:	4a28      	ldr	r2, [pc, #160]	; (80026e8 <HAL_RCC_OscConfig+0x500>)
 8002646:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800264a:	6353      	str	r3, [r2, #52]	; 0x34
 800264c:	e02d      	b.n	80026aa <HAL_RCC_OscConfig+0x4c2>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d10c      	bne.n	8002670 <HAL_RCC_OscConfig+0x488>
 8002656:	4b24      	ldr	r3, [pc, #144]	; (80026e8 <HAL_RCC_OscConfig+0x500>)
 8002658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800265a:	4a23      	ldr	r2, [pc, #140]	; (80026e8 <HAL_RCC_OscConfig+0x500>)
 800265c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002660:	6353      	str	r3, [r2, #52]	; 0x34
 8002662:	4b21      	ldr	r3, [pc, #132]	; (80026e8 <HAL_RCC_OscConfig+0x500>)
 8002664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002666:	4a20      	ldr	r2, [pc, #128]	; (80026e8 <HAL_RCC_OscConfig+0x500>)
 8002668:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800266c:	6353      	str	r3, [r2, #52]	; 0x34
 800266e:	e01c      	b.n	80026aa <HAL_RCC_OscConfig+0x4c2>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	2b05      	cmp	r3, #5
 8002676:	d10c      	bne.n	8002692 <HAL_RCC_OscConfig+0x4aa>
 8002678:	4b1b      	ldr	r3, [pc, #108]	; (80026e8 <HAL_RCC_OscConfig+0x500>)
 800267a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800267c:	4a1a      	ldr	r2, [pc, #104]	; (80026e8 <HAL_RCC_OscConfig+0x500>)
 800267e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002682:	6353      	str	r3, [r2, #52]	; 0x34
 8002684:	4b18      	ldr	r3, [pc, #96]	; (80026e8 <HAL_RCC_OscConfig+0x500>)
 8002686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002688:	4a17      	ldr	r2, [pc, #92]	; (80026e8 <HAL_RCC_OscConfig+0x500>)
 800268a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800268e:	6353      	str	r3, [r2, #52]	; 0x34
 8002690:	e00b      	b.n	80026aa <HAL_RCC_OscConfig+0x4c2>
 8002692:	4b15      	ldr	r3, [pc, #84]	; (80026e8 <HAL_RCC_OscConfig+0x500>)
 8002694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002696:	4a14      	ldr	r2, [pc, #80]	; (80026e8 <HAL_RCC_OscConfig+0x500>)
 8002698:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800269c:	6353      	str	r3, [r2, #52]	; 0x34
 800269e:	4b12      	ldr	r3, [pc, #72]	; (80026e8 <HAL_RCC_OscConfig+0x500>)
 80026a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026a2:	4a11      	ldr	r2, [pc, #68]	; (80026e8 <HAL_RCC_OscConfig+0x500>)
 80026a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80026a8:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d015      	beq.n	80026de <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b2:	f7ff fa07 	bl	8001ac4 <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026b8:	e00a      	b.n	80026d0 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026ba:	f7ff fa03 	bl	8001ac4 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e0b2      	b.n	8002836 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026d0:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <HAL_RCC_OscConfig+0x500>)
 80026d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d0ee      	beq.n	80026ba <HAL_RCC_OscConfig+0x4d2>
 80026dc:	e023      	b.n	8002726 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026de:	f7ff f9f1 	bl	8001ac4 <HAL_GetTick>
 80026e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80026e4:	e019      	b.n	800271a <HAL_RCC_OscConfig+0x532>
 80026e6:	bf00      	nop
 80026e8:	40023800 	.word	0x40023800
 80026ec:	080051ec 	.word	0x080051ec
 80026f0:	20000004 	.word	0x20000004
 80026f4:	20000024 	.word	0x20000024
 80026f8:	42470020 	.word	0x42470020
 80026fc:	42470680 	.word	0x42470680
 8002700:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002704:	f7ff f9de 	bl	8001ac4 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002712:	4293      	cmp	r3, r2
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e08d      	b.n	8002836 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800271a:	4b49      	ldr	r3, [pc, #292]	; (8002840 <HAL_RCC_OscConfig+0x658>)
 800271c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800271e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1ee      	bne.n	8002704 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002726:	7ffb      	ldrb	r3, [r7, #31]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d105      	bne.n	8002738 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800272c:	4b44      	ldr	r3, [pc, #272]	; (8002840 <HAL_RCC_OscConfig+0x658>)
 800272e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002730:	4a43      	ldr	r2, [pc, #268]	; (8002840 <HAL_RCC_OscConfig+0x658>)
 8002732:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002736:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273c:	2b00      	cmp	r3, #0
 800273e:	d079      	beq.n	8002834 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	2b0c      	cmp	r3, #12
 8002744:	d056      	beq.n	80027f4 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274a:	2b02      	cmp	r3, #2
 800274c:	d13b      	bne.n	80027c6 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800274e:	4b3d      	ldr	r3, [pc, #244]	; (8002844 <HAL_RCC_OscConfig+0x65c>)
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002754:	f7ff f9b6 	bl	8001ac4 <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800275c:	f7ff f9b2 	bl	8001ac4 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e063      	b.n	8002836 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800276e:	4b34      	ldr	r3, [pc, #208]	; (8002840 <HAL_RCC_OscConfig+0x658>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1f0      	bne.n	800275c <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800277a:	4b31      	ldr	r3, [pc, #196]	; (8002840 <HAL_RCC_OscConfig+0x658>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278a:	4319      	orrs	r1, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002790:	430b      	orrs	r3, r1
 8002792:	492b      	ldr	r1, [pc, #172]	; (8002840 <HAL_RCC_OscConfig+0x658>)
 8002794:	4313      	orrs	r3, r2
 8002796:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002798:	4b2a      	ldr	r3, [pc, #168]	; (8002844 <HAL_RCC_OscConfig+0x65c>)
 800279a:	2201      	movs	r2, #1
 800279c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800279e:	f7ff f991 	bl	8001ac4 <HAL_GetTick>
 80027a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80027a4:	e008      	b.n	80027b8 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027a6:	f7ff f98d 	bl	8001ac4 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e03e      	b.n	8002836 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80027b8:	4b21      	ldr	r3, [pc, #132]	; (8002840 <HAL_RCC_OscConfig+0x658>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d0f0      	beq.n	80027a6 <HAL_RCC_OscConfig+0x5be>
 80027c4:	e036      	b.n	8002834 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027c6:	4b1f      	ldr	r3, [pc, #124]	; (8002844 <HAL_RCC_OscConfig+0x65c>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027cc:	f7ff f97a 	bl	8001ac4 <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027d4:	f7ff f976 	bl	8001ac4 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e027      	b.n	8002836 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80027e6:	4b16      	ldr	r3, [pc, #88]	; (8002840 <HAL_RCC_OscConfig+0x658>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1f0      	bne.n	80027d4 <HAL_RCC_OscConfig+0x5ec>
 80027f2:	e01f      	b.n	8002834 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d101      	bne.n	8002800 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e01a      	b.n	8002836 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002800:	4b0f      	ldr	r3, [pc, #60]	; (8002840 <HAL_RCC_OscConfig+0x658>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002810:	429a      	cmp	r2, r3
 8002812:	d10d      	bne.n	8002830 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800281e:	429a      	cmp	r2, r3
 8002820:	d106      	bne.n	8002830 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800282c:	429a      	cmp	r2, r3
 800282e:	d001      	beq.n	8002834 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e000      	b.n	8002836 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3720      	adds	r7, #32
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	40023800 	.word	0x40023800
 8002844:	42470060 	.word	0x42470060

08002848 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d101      	bne.n	800285c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e11a      	b.n	8002a92 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800285c:	4b8f      	ldr	r3, [pc, #572]	; (8002a9c <HAL_RCC_ClockConfig+0x254>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	683a      	ldr	r2, [r7, #0]
 8002866:	429a      	cmp	r2, r3
 8002868:	d919      	bls.n	800289e <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d105      	bne.n	800287c <HAL_RCC_ClockConfig+0x34>
 8002870:	4b8a      	ldr	r3, [pc, #552]	; (8002a9c <HAL_RCC_ClockConfig+0x254>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a89      	ldr	r2, [pc, #548]	; (8002a9c <HAL_RCC_ClockConfig+0x254>)
 8002876:	f043 0304 	orr.w	r3, r3, #4
 800287a:	6013      	str	r3, [r2, #0]
 800287c:	4b87      	ldr	r3, [pc, #540]	; (8002a9c <HAL_RCC_ClockConfig+0x254>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f023 0201 	bic.w	r2, r3, #1
 8002884:	4985      	ldr	r1, [pc, #532]	; (8002a9c <HAL_RCC_ClockConfig+0x254>)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	4313      	orrs	r3, r2
 800288a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800288c:	4b83      	ldr	r3, [pc, #524]	; (8002a9c <HAL_RCC_ClockConfig+0x254>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	429a      	cmp	r2, r3
 8002898:	d001      	beq.n	800289e <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e0f9      	b.n	8002a92 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d008      	beq.n	80028bc <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028aa:	4b7d      	ldr	r3, [pc, #500]	; (8002aa0 <HAL_RCC_ClockConfig+0x258>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	497a      	ldr	r1, [pc, #488]	; (8002aa0 <HAL_RCC_ClockConfig+0x258>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f000 808e 	beq.w	80029e6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d107      	bne.n	80028e2 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028d2:	4b73      	ldr	r3, [pc, #460]	; (8002aa0 <HAL_RCC_ClockConfig+0x258>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d121      	bne.n	8002922 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e0d7      	b.n	8002a92 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	2b03      	cmp	r3, #3
 80028e8:	d107      	bne.n	80028fa <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80028ea:	4b6d      	ldr	r3, [pc, #436]	; (8002aa0 <HAL_RCC_ClockConfig+0x258>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d115      	bne.n	8002922 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e0cb      	b.n	8002a92 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d107      	bne.n	8002912 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002902:	4b67      	ldr	r3, [pc, #412]	; (8002aa0 <HAL_RCC_ClockConfig+0x258>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d109      	bne.n	8002922 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e0bf      	b.n	8002a92 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002912:	4b63      	ldr	r3, [pc, #396]	; (8002aa0 <HAL_RCC_ClockConfig+0x258>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e0b7      	b.n	8002a92 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002922:	4b5f      	ldr	r3, [pc, #380]	; (8002aa0 <HAL_RCC_ClockConfig+0x258>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f023 0203 	bic.w	r2, r3, #3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	495c      	ldr	r1, [pc, #368]	; (8002aa0 <HAL_RCC_ClockConfig+0x258>)
 8002930:	4313      	orrs	r3, r2
 8002932:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002934:	f7ff f8c6 	bl	8001ac4 <HAL_GetTick>
 8002938:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	2b02      	cmp	r3, #2
 8002940:	d112      	bne.n	8002968 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002942:	e00a      	b.n	800295a <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002944:	f7ff f8be 	bl	8001ac4 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002952:	4293      	cmp	r3, r2
 8002954:	d901      	bls.n	800295a <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e09b      	b.n	8002a92 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800295a:	4b51      	ldr	r3, [pc, #324]	; (8002aa0 <HAL_RCC_ClockConfig+0x258>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f003 030c 	and.w	r3, r3, #12
 8002962:	2b08      	cmp	r3, #8
 8002964:	d1ee      	bne.n	8002944 <HAL_RCC_ClockConfig+0xfc>
 8002966:	e03e      	b.n	80029e6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	2b03      	cmp	r3, #3
 800296e:	d112      	bne.n	8002996 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002970:	e00a      	b.n	8002988 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002972:	f7ff f8a7 	bl	8001ac4 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002980:	4293      	cmp	r3, r2
 8002982:	d901      	bls.n	8002988 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e084      	b.n	8002a92 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002988:	4b45      	ldr	r3, [pc, #276]	; (8002aa0 <HAL_RCC_ClockConfig+0x258>)
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f003 030c 	and.w	r3, r3, #12
 8002990:	2b0c      	cmp	r3, #12
 8002992:	d1ee      	bne.n	8002972 <HAL_RCC_ClockConfig+0x12a>
 8002994:	e027      	b.n	80029e6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d11d      	bne.n	80029da <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800299e:	e00a      	b.n	80029b6 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029a0:	f7ff f890 	bl	8001ac4 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e06d      	b.n	8002a92 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80029b6:	4b3a      	ldr	r3, [pc, #232]	; (8002aa0 <HAL_RCC_ClockConfig+0x258>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 030c 	and.w	r3, r3, #12
 80029be:	2b04      	cmp	r3, #4
 80029c0:	d1ee      	bne.n	80029a0 <HAL_RCC_ClockConfig+0x158>
 80029c2:	e010      	b.n	80029e6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029c4:	f7ff f87e 	bl	8001ac4 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e05b      	b.n	8002a92 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80029da:	4b31      	ldr	r3, [pc, #196]	; (8002aa0 <HAL_RCC_ClockConfig+0x258>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f003 030c 	and.w	r3, r3, #12
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1ee      	bne.n	80029c4 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029e6:	4b2d      	ldr	r3, [pc, #180]	; (8002a9c <HAL_RCC_ClockConfig+0x254>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d219      	bcs.n	8002a28 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d105      	bne.n	8002a06 <HAL_RCC_ClockConfig+0x1be>
 80029fa:	4b28      	ldr	r3, [pc, #160]	; (8002a9c <HAL_RCC_ClockConfig+0x254>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a27      	ldr	r2, [pc, #156]	; (8002a9c <HAL_RCC_ClockConfig+0x254>)
 8002a00:	f043 0304 	orr.w	r3, r3, #4
 8002a04:	6013      	str	r3, [r2, #0]
 8002a06:	4b25      	ldr	r3, [pc, #148]	; (8002a9c <HAL_RCC_ClockConfig+0x254>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f023 0201 	bic.w	r2, r3, #1
 8002a0e:	4923      	ldr	r1, [pc, #140]	; (8002a9c <HAL_RCC_ClockConfig+0x254>)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a16:	4b21      	ldr	r3, [pc, #132]	; (8002a9c <HAL_RCC_ClockConfig+0x254>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d001      	beq.n	8002a28 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e034      	b.n	8002a92 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0304 	and.w	r3, r3, #4
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d008      	beq.n	8002a46 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a34:	4b1a      	ldr	r3, [pc, #104]	; (8002aa0 <HAL_RCC_ClockConfig+0x258>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	4917      	ldr	r1, [pc, #92]	; (8002aa0 <HAL_RCC_ClockConfig+0x258>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0308 	and.w	r3, r3, #8
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d009      	beq.n	8002a66 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a52:	4b13      	ldr	r3, [pc, #76]	; (8002aa0 <HAL_RCC_ClockConfig+0x258>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	490f      	ldr	r1, [pc, #60]	; (8002aa0 <HAL_RCC_ClockConfig+0x258>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a66:	f000 f823 	bl	8002ab0 <HAL_RCC_GetSysClockFreq>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	4b0c      	ldr	r3, [pc, #48]	; (8002aa0 <HAL_RCC_ClockConfig+0x258>)
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	091b      	lsrs	r3, r3, #4
 8002a72:	f003 030f 	and.w	r3, r3, #15
 8002a76:	490b      	ldr	r1, [pc, #44]	; (8002aa4 <HAL_RCC_ClockConfig+0x25c>)
 8002a78:	5ccb      	ldrb	r3, [r1, r3]
 8002a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a7e:	4a0a      	ldr	r2, [pc, #40]	; (8002aa8 <HAL_RCC_ClockConfig+0x260>)
 8002a80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a82:	4b0a      	ldr	r3, [pc, #40]	; (8002aac <HAL_RCC_ClockConfig+0x264>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7fe ffd0 	bl	8001a2c <HAL_InitTick>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002a90:	7afb      	ldrb	r3, [r7, #11]
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40023c00 	.word	0x40023c00
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	080051ec 	.word	0x080051ec
 8002aa8:	20000004 	.word	0x20000004
 8002aac:	20000024 	.word	0x20000024

08002ab0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ab0:	b5b0      	push	{r4, r5, r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002ab6:	4b61      	ldr	r3, [pc, #388]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x18c>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f003 030c 	and.w	r3, r3, #12
 8002ac2:	2b0c      	cmp	r3, #12
 8002ac4:	d00d      	beq.n	8002ae2 <HAL_RCC_GetSysClockFreq+0x32>
 8002ac6:	2b0c      	cmp	r3, #12
 8002ac8:	f200 80a4 	bhi.w	8002c14 <HAL_RCC_GetSysClockFreq+0x164>
 8002acc:	2b04      	cmp	r3, #4
 8002ace:	d002      	beq.n	8002ad6 <HAL_RCC_GetSysClockFreq+0x26>
 8002ad0:	2b08      	cmp	r3, #8
 8002ad2:	d003      	beq.n	8002adc <HAL_RCC_GetSysClockFreq+0x2c>
 8002ad4:	e09e      	b.n	8002c14 <HAL_RCC_GetSysClockFreq+0x164>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ad6:	4b5a      	ldr	r3, [pc, #360]	; (8002c40 <HAL_RCC_GetSysClockFreq+0x190>)
 8002ad8:	613b      	str	r3, [r7, #16]
      break;
 8002ada:	e0a9      	b.n	8002c30 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002adc:	4b59      	ldr	r3, [pc, #356]	; (8002c44 <HAL_RCC_GetSysClockFreq+0x194>)
 8002ade:	613b      	str	r3, [r7, #16]
      break;
 8002ae0:	e0a6      	b.n	8002c30 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	0c9b      	lsrs	r3, r3, #18
 8002ae6:	f003 030f 	and.w	r3, r3, #15
 8002aea:	4a57      	ldr	r2, [pc, #348]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x198>)
 8002aec:	5cd3      	ldrb	r3, [r2, r3]
 8002aee:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	0d9b      	lsrs	r3, r3, #22
 8002af4:	f003 0303 	and.w	r3, r3, #3
 8002af8:	3301      	adds	r3, #1
 8002afa:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002afc:	4b4f      	ldr	r3, [pc, #316]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x18c>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d041      	beq.n	8002b8c <HAL_RCC_GetSysClockFreq+0xdc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	461c      	mov	r4, r3
 8002b0c:	f04f 0500 	mov.w	r5, #0
 8002b10:	4620      	mov	r0, r4
 8002b12:	4629      	mov	r1, r5
 8002b14:	f04f 0200 	mov.w	r2, #0
 8002b18:	f04f 0300 	mov.w	r3, #0
 8002b1c:	014b      	lsls	r3, r1, #5
 8002b1e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002b22:	0142      	lsls	r2, r0, #5
 8002b24:	4610      	mov	r0, r2
 8002b26:	4619      	mov	r1, r3
 8002b28:	1b00      	subs	r0, r0, r4
 8002b2a:	eb61 0105 	sbc.w	r1, r1, r5
 8002b2e:	f04f 0200 	mov.w	r2, #0
 8002b32:	f04f 0300 	mov.w	r3, #0
 8002b36:	018b      	lsls	r3, r1, #6
 8002b38:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002b3c:	0182      	lsls	r2, r0, #6
 8002b3e:	1a12      	subs	r2, r2, r0
 8002b40:	eb63 0301 	sbc.w	r3, r3, r1
 8002b44:	f04f 0000 	mov.w	r0, #0
 8002b48:	f04f 0100 	mov.w	r1, #0
 8002b4c:	00d9      	lsls	r1, r3, #3
 8002b4e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b52:	00d0      	lsls	r0, r2, #3
 8002b54:	4602      	mov	r2, r0
 8002b56:	460b      	mov	r3, r1
 8002b58:	1912      	adds	r2, r2, r4
 8002b5a:	eb45 0303 	adc.w	r3, r5, r3
 8002b5e:	f04f 0000 	mov.w	r0, #0
 8002b62:	f04f 0100 	mov.w	r1, #0
 8002b66:	0259      	lsls	r1, r3, #9
 8002b68:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002b6c:	0250      	lsls	r0, r2, #9
 8002b6e:	4602      	mov	r2, r0
 8002b70:	460b      	mov	r3, r1
 8002b72:	4610      	mov	r0, r2
 8002b74:	4619      	mov	r1, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	461a      	mov	r2, r3
 8002b7a:	f04f 0300 	mov.w	r3, #0
 8002b7e:	f7fd fafd 	bl	800017c <__aeabi_uldivmod>
 8002b82:	4602      	mov	r2, r0
 8002b84:	460b      	mov	r3, r1
 8002b86:	4613      	mov	r3, r2
 8002b88:	617b      	str	r3, [r7, #20]
 8002b8a:	e040      	b.n	8002c0e <HAL_RCC_GetSysClockFreq+0x15e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	461c      	mov	r4, r3
 8002b90:	f04f 0500 	mov.w	r5, #0
 8002b94:	4620      	mov	r0, r4
 8002b96:	4629      	mov	r1, r5
 8002b98:	f04f 0200 	mov.w	r2, #0
 8002b9c:	f04f 0300 	mov.w	r3, #0
 8002ba0:	014b      	lsls	r3, r1, #5
 8002ba2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002ba6:	0142      	lsls	r2, r0, #5
 8002ba8:	4610      	mov	r0, r2
 8002baa:	4619      	mov	r1, r3
 8002bac:	1b00      	subs	r0, r0, r4
 8002bae:	eb61 0105 	sbc.w	r1, r1, r5
 8002bb2:	f04f 0200 	mov.w	r2, #0
 8002bb6:	f04f 0300 	mov.w	r3, #0
 8002bba:	018b      	lsls	r3, r1, #6
 8002bbc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002bc0:	0182      	lsls	r2, r0, #6
 8002bc2:	1a12      	subs	r2, r2, r0
 8002bc4:	eb63 0301 	sbc.w	r3, r3, r1
 8002bc8:	f04f 0000 	mov.w	r0, #0
 8002bcc:	f04f 0100 	mov.w	r1, #0
 8002bd0:	00d9      	lsls	r1, r3, #3
 8002bd2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002bd6:	00d0      	lsls	r0, r2, #3
 8002bd8:	4602      	mov	r2, r0
 8002bda:	460b      	mov	r3, r1
 8002bdc:	1912      	adds	r2, r2, r4
 8002bde:	eb45 0303 	adc.w	r3, r5, r3
 8002be2:	f04f 0000 	mov.w	r0, #0
 8002be6:	f04f 0100 	mov.w	r1, #0
 8002bea:	0299      	lsls	r1, r3, #10
 8002bec:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002bf0:	0290      	lsls	r0, r2, #10
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	4610      	mov	r0, r2
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	f04f 0300 	mov.w	r3, #0
 8002c02:	f7fd fabb 	bl	800017c <__aeabi_uldivmod>
 8002c06:	4602      	mov	r2, r0
 8002c08:	460b      	mov	r3, r1
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	613b      	str	r3, [r7, #16]
      break;
 8002c12:	e00d      	b.n	8002c30 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002c14:	4b09      	ldr	r3, [pc, #36]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x18c>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	0b5b      	lsrs	r3, r3, #13
 8002c1a:	f003 0307 	and.w	r3, r3, #7
 8002c1e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	3301      	adds	r3, #1
 8002c24:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	613b      	str	r3, [r7, #16]
      break;
 8002c2e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c30:	693b      	ldr	r3, [r7, #16]
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3718      	adds	r7, #24
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bdb0      	pop	{r4, r5, r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	40023800 	.word	0x40023800
 8002c40:	00f42400 	.word	0x00f42400
 8002c44:	007a1200 	.word	0x007a1200
 8002c48:	080051e0 	.word	0x080051e0

08002c4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c50:	4b02      	ldr	r3, [pc, #8]	; (8002c5c <HAL_RCC_GetHCLKFreq+0x10>)
 8002c52:	681b      	ldr	r3, [r3, #0]
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bc80      	pop	{r7}
 8002c5a:	4770      	bx	lr
 8002c5c:	20000004 	.word	0x20000004

08002c60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c64:	f7ff fff2 	bl	8002c4c <HAL_RCC_GetHCLKFreq>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	4b05      	ldr	r3, [pc, #20]	; (8002c80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	0a1b      	lsrs	r3, r3, #8
 8002c70:	f003 0307 	and.w	r3, r3, #7
 8002c74:	4903      	ldr	r1, [pc, #12]	; (8002c84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c76:	5ccb      	ldrb	r3, [r1, r3]
 8002c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	40023800 	.word	0x40023800
 8002c84:	080051fc 	.word	0x080051fc

08002c88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c8c:	f7ff ffde 	bl	8002c4c <HAL_RCC_GetHCLKFreq>
 8002c90:	4602      	mov	r2, r0
 8002c92:	4b05      	ldr	r3, [pc, #20]	; (8002ca8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	0adb      	lsrs	r3, r3, #11
 8002c98:	f003 0307 	and.w	r3, r3, #7
 8002c9c:	4903      	ldr	r1, [pc, #12]	; (8002cac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c9e:	5ccb      	ldrb	r3, [r1, r3]
 8002ca0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	080051fc 	.word	0x080051fc

08002cb0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b087      	sub	sp, #28
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002cb8:	2300      	movs	r3, #0
 8002cba:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002cbc:	4b29      	ldr	r3, [pc, #164]	; (8002d64 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d12c      	bne.n	8002d22 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002cc8:	4b26      	ldr	r3, [pc, #152]	; (8002d64 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d005      	beq.n	8002ce0 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002cd4:	4b24      	ldr	r3, [pc, #144]	; (8002d68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002cdc:	617b      	str	r3, [r7, #20]
 8002cde:	e016      	b.n	8002d0e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ce0:	4b20      	ldr	r3, [pc, #128]	; (8002d64 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce4:	4a1f      	ldr	r2, [pc, #124]	; (8002d64 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002ce6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cea:	6253      	str	r3, [r2, #36]	; 0x24
 8002cec:	4b1d      	ldr	r3, [pc, #116]	; (8002d64 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf4:	60fb      	str	r3, [r7, #12]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002cf8:	4b1b      	ldr	r3, [pc, #108]	; (8002d68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002d00:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d02:	4b18      	ldr	r3, [pc, #96]	; (8002d64 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d06:	4a17      	ldr	r2, [pc, #92]	; (8002d64 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002d08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d0c:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002d14:	d105      	bne.n	8002d22 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002d1c:	d101      	bne.n	8002d22 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8002d1e:	2301      	movs	r3, #1
 8002d20:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d105      	bne.n	8002d34 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8002d28:	4b10      	ldr	r3, [pc, #64]	; (8002d6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a0f      	ldr	r2, [pc, #60]	; (8002d6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d2e:	f043 0304 	orr.w	r3, r3, #4
 8002d32:	6013      	str	r3, [r2, #0]
 8002d34:	4b0d      	ldr	r3, [pc, #52]	; (8002d6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f023 0201 	bic.w	r2, r3, #1
 8002d3c:	490b      	ldr	r1, [pc, #44]	; (8002d6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002d44:	4b09      	ldr	r3, [pc, #36]	; (8002d6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0301 	and.w	r3, r3, #1
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d001      	beq.n	8002d56 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e000      	b.n	8002d58 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	371c      	adds	r7, #28
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bc80      	pop	{r7}
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	40023800 	.word	0x40023800
 8002d68:	40007000 	.word	0x40007000
 8002d6c:	40023c00 	.word	0x40023c00

08002d70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e07b      	b.n	8002e7a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d108      	bne.n	8002d9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d92:	d009      	beq.n	8002da8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	61da      	str	r2, [r3, #28]
 8002d9a:	e005      	b.n	8002da8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d106      	bne.n	8002dc8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f7fe fbe4 	bl	8001590 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2202      	movs	r2, #2
 8002dcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dde:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002df0:	431a      	orrs	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	431a      	orrs	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e18:	431a      	orrs	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	69db      	ldr	r3, [r3, #28]
 8002e1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e22:	431a      	orrs	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a1b      	ldr	r3, [r3, #32]
 8002e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e2c:	ea42 0103 	orr.w	r1, r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e34:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	0c1b      	lsrs	r3, r3, #16
 8002e46:	f003 0104 	and.w	r1, r3, #4
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4e:	f003 0210 	and.w	r2, r3, #16
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	430a      	orrs	r2, r1
 8002e58:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	69da      	ldr	r2, [r3, #28]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b088      	sub	sp, #32
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	60f8      	str	r0, [r7, #12]
 8002e8a:	60b9      	str	r1, [r7, #8]
 8002e8c:	603b      	str	r3, [r7, #0]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e92:	2300      	movs	r3, #0
 8002e94:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d101      	bne.n	8002ea4 <HAL_SPI_Transmit+0x22>
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	e12d      	b.n	8003100 <HAL_SPI_Transmit+0x27e>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002eac:	f7fe fe0a 	bl	8001ac4 <HAL_GetTick>
 8002eb0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002eb2:	88fb      	ldrh	r3, [r7, #6]
 8002eb4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d002      	beq.n	8002ec8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ec6:	e116      	b.n	80030f6 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d002      	beq.n	8002ed4 <HAL_SPI_Transmit+0x52>
 8002ece:	88fb      	ldrh	r3, [r7, #6]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d102      	bne.n	8002eda <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ed8:	e10d      	b.n	80030f6 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2203      	movs	r2, #3
 8002ede:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	68ba      	ldr	r2, [r7, #8]
 8002eec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	88fa      	ldrh	r2, [r7, #6]
 8002ef2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	88fa      	ldrh	r2, [r7, #6]
 8002ef8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f20:	d10f      	bne.n	8002f42 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f30:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f40:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f4c:	2b40      	cmp	r3, #64	; 0x40
 8002f4e:	d007      	beq.n	8002f60 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f5e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f68:	d14f      	bne.n	800300a <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d002      	beq.n	8002f78 <HAL_SPI_Transmit+0xf6>
 8002f72:	8afb      	ldrh	r3, [r7, #22]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d142      	bne.n	8002ffe <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7c:	881a      	ldrh	r2, [r3, #0]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f88:	1c9a      	adds	r2, r3, #2
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	3b01      	subs	r3, #1
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002f9c:	e02f      	b.n	8002ffe <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d112      	bne.n	8002fd2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb0:	881a      	ldrh	r2, [r3, #0]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbc:	1c9a      	adds	r2, r3, #2
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	86da      	strh	r2, [r3, #54]	; 0x36
 8002fd0:	e015      	b.n	8002ffe <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fd2:	f7fe fd77 	bl	8001ac4 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d803      	bhi.n	8002fea <HAL_SPI_Transmit+0x168>
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe8:	d102      	bne.n	8002ff0 <HAL_SPI_Transmit+0x16e>
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d106      	bne.n	8002ffe <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002ffc:	e07b      	b.n	80030f6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003002:	b29b      	uxth	r3, r3
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1ca      	bne.n	8002f9e <HAL_SPI_Transmit+0x11c>
 8003008:	e050      	b.n	80030ac <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d002      	beq.n	8003018 <HAL_SPI_Transmit+0x196>
 8003012:	8afb      	ldrh	r3, [r7, #22]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d144      	bne.n	80030a2 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	330c      	adds	r3, #12
 8003022:	7812      	ldrb	r2, [r2, #0]
 8003024:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302a:	1c5a      	adds	r2, r3, #1
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003034:	b29b      	uxth	r3, r3
 8003036:	3b01      	subs	r3, #1
 8003038:	b29a      	uxth	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800303e:	e030      	b.n	80030a2 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b02      	cmp	r3, #2
 800304c:	d113      	bne.n	8003076 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	330c      	adds	r3, #12
 8003058:	7812      	ldrb	r2, [r2, #0]
 800305a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003060:	1c5a      	adds	r2, r3, #1
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800306a:	b29b      	uxth	r3, r3
 800306c:	3b01      	subs	r3, #1
 800306e:	b29a      	uxth	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	86da      	strh	r2, [r3, #54]	; 0x36
 8003074:	e015      	b.n	80030a2 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003076:	f7fe fd25 	bl	8001ac4 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	429a      	cmp	r2, r3
 8003084:	d803      	bhi.n	800308e <HAL_SPI_Transmit+0x20c>
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800308c:	d102      	bne.n	8003094 <HAL_SPI_Transmit+0x212>
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d106      	bne.n	80030a2 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80030a0:	e029      	b.n	80030f6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1c9      	bne.n	8003040 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	6839      	ldr	r1, [r7, #0]
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f000 f9db 	bl	800346c <SPI_EndRxTxTransaction>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d002      	beq.n	80030c2 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2220      	movs	r2, #32
 80030c0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10a      	bne.n	80030e0 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030ca:	2300      	movs	r3, #0
 80030cc:	613b      	str	r3, [r7, #16]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	613b      	str	r3, [r7, #16]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	613b      	str	r3, [r7, #16]
 80030de:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d002      	beq.n	80030ee <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	77fb      	strb	r3, [r7, #31]
 80030ec:	e003      	b.n	80030f6 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80030fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8003100:	4618      	mov	r0, r3
 8003102:	3720      	adds	r7, #32
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b088      	sub	sp, #32
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	099b      	lsrs	r3, r3, #6
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	2b00      	cmp	r3, #0
 800312a:	d10f      	bne.n	800314c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00a      	beq.n	800314c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	099b      	lsrs	r3, r3, #6
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	2b00      	cmp	r3, #0
 8003140:	d004      	beq.n	800314c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	4798      	blx	r3
    return;
 800314a:	e0d7      	b.n	80032fc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	085b      	lsrs	r3, r3, #1
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00a      	beq.n	800316e <HAL_SPI_IRQHandler+0x66>
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	09db      	lsrs	r3, r3, #7
 800315c:	f003 0301 	and.w	r3, r3, #1
 8003160:	2b00      	cmp	r3, #0
 8003162:	d004      	beq.n	800316e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	4798      	blx	r3
    return;
 800316c:	e0c6      	b.n	80032fc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
#if defined(SPI_CR2_FRF)
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	095b      	lsrs	r3, r3, #5
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10c      	bne.n	8003194 <HAL_SPI_IRQHandler+0x8c>
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	099b      	lsrs	r3, r3, #6
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b00      	cmp	r3, #0
 8003184:	d106      	bne.n	8003194 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	0a1b      	lsrs	r3, r3, #8
 800318a:	f003 0301 	and.w	r3, r3, #1
 800318e:	2b00      	cmp	r3, #0
 8003190:	f000 80b4 	beq.w	80032fc <HAL_SPI_IRQHandler+0x1f4>
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	095b      	lsrs	r3, r3, #5
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	2b00      	cmp	r3, #0
 800319e:	f000 80ad 	beq.w	80032fc <HAL_SPI_IRQHandler+0x1f4>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
#endif /* SPI_CR2_FRF */
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	099b      	lsrs	r3, r3, #6
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d023      	beq.n	80031f6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b03      	cmp	r3, #3
 80031b8:	d011      	beq.n	80031de <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031be:	f043 0204 	orr.w	r2, r3, #4
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80031c6:	2300      	movs	r3, #0
 80031c8:	617b      	str	r3, [r7, #20]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	617b      	str	r3, [r7, #20]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	617b      	str	r3, [r7, #20]
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	e00b      	b.n	80031f6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80031de:	2300      	movs	r3, #0
 80031e0:	613b      	str	r3, [r7, #16]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	613b      	str	r3, [r7, #16]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	613b      	str	r3, [r7, #16]
 80031f2:	693b      	ldr	r3, [r7, #16]
        return;
 80031f4:	e082      	b.n	80032fc <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	095b      	lsrs	r3, r3, #5
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d014      	beq.n	800322c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003206:	f043 0201 	orr.w	r2, r3, #1
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800320e:	2300      	movs	r3, #0
 8003210:	60fb      	str	r3, [r7, #12]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	60fb      	str	r3, [r7, #12]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003228:	601a      	str	r2, [r3, #0]
 800322a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
#if defined(SPI_CR2_FRF)
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	0a1b      	lsrs	r3, r3, #8
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00c      	beq.n	8003252 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800323c:	f043 0208 	orr.w	r2, r3, #8
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003244:	2300      	movs	r3, #0
 8003246:	60bb      	str	r3, [r7, #8]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	60bb      	str	r3, [r7, #8]
 8003250:	68bb      	ldr	r3, [r7, #8]
    }
#endif /* SPI_CR2_FRF */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003256:	2b00      	cmp	r3, #0
 8003258:	d04f      	beq.n	80032fa <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003268:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2201      	movs	r2, #1
 800326e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d104      	bne.n	8003286 <HAL_SPI_IRQHandler+0x17e>
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b00      	cmp	r3, #0
 8003284:	d034      	beq.n	80032f0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	685a      	ldr	r2, [r3, #4]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f022 0203 	bic.w	r2, r2, #3
 8003294:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800329a:	2b00      	cmp	r3, #0
 800329c:	d011      	beq.n	80032c2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032a2:	4a18      	ldr	r2, [pc, #96]	; (8003304 <HAL_SPI_IRQHandler+0x1fc>)
 80032a4:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7fe fdb2 	bl	8001e14 <HAL_DMA_Abort_IT>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d005      	beq.n	80032c2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d016      	beq.n	80032f8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032ce:	4a0d      	ldr	r2, [pc, #52]	; (8003304 <HAL_SPI_IRQHandler+0x1fc>)
 80032d0:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7fe fd9c 	bl	8001e14 <HAL_DMA_Abort_IT>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00a      	beq.n	80032f8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80032ee:	e003      	b.n	80032f8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 f809 	bl	8003308 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80032f6:	e000      	b.n	80032fa <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80032f8:	bf00      	nop
    return;
 80032fa:	bf00      	nop
  }
}
 80032fc:	3720      	adds	r7, #32
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	08003335 	.word	0x08003335

08003308 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	bc80      	pop	{r7}
 8003318:	4770      	bx	lr

0800331a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800331a:	b480      	push	{r7}
 800331c:	b083      	sub	sp, #12
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003328:	b2db      	uxtb	r3, r3
}
 800332a:	4618      	mov	r0, r3
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	bc80      	pop	{r7}
 8003332:	4770      	bx	lr

08003334 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003340:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f7ff ffda 	bl	8003308 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003354:	bf00      	nop
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b088      	sub	sp, #32
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	603b      	str	r3, [r7, #0]
 8003368:	4613      	mov	r3, r2
 800336a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800336c:	f7fe fbaa 	bl	8001ac4 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003374:	1a9b      	subs	r3, r3, r2
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	4413      	add	r3, r2
 800337a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800337c:	f7fe fba2 	bl	8001ac4 <HAL_GetTick>
 8003380:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003382:	4b39      	ldr	r3, [pc, #228]	; (8003468 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	015b      	lsls	r3, r3, #5
 8003388:	0d1b      	lsrs	r3, r3, #20
 800338a:	69fa      	ldr	r2, [r7, #28]
 800338c:	fb02 f303 	mul.w	r3, r2, r3
 8003390:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003392:	e054      	b.n	800343e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800339a:	d050      	beq.n	800343e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800339c:	f7fe fb92 	bl	8001ac4 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	69fa      	ldr	r2, [r7, #28]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d902      	bls.n	80033b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d13d      	bne.n	800342e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80033c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033ca:	d111      	bne.n	80033f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033d4:	d004      	beq.n	80033e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033de:	d107      	bne.n	80033f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033f8:	d10f      	bne.n	800341a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003408:	601a      	str	r2, [r3, #0]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003418:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2201      	movs	r2, #1
 800341e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e017      	b.n	800345e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d101      	bne.n	8003438 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003434:	2300      	movs	r3, #0
 8003436:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	3b01      	subs	r3, #1
 800343c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	4013      	ands	r3, r2
 8003448:	68ba      	ldr	r2, [r7, #8]
 800344a:	429a      	cmp	r2, r3
 800344c:	bf0c      	ite	eq
 800344e:	2301      	moveq	r3, #1
 8003450:	2300      	movne	r3, #0
 8003452:	b2db      	uxtb	r3, r3
 8003454:	461a      	mov	r2, r3
 8003456:	79fb      	ldrb	r3, [r7, #7]
 8003458:	429a      	cmp	r2, r3
 800345a:	d19b      	bne.n	8003394 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3720      	adds	r7, #32
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	20000004 	.word	0x20000004

0800346c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b088      	sub	sp, #32
 8003470:	af02      	add	r7, sp, #8
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003478:	4b1b      	ldr	r3, [pc, #108]	; (80034e8 <SPI_EndRxTxTransaction+0x7c>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a1b      	ldr	r2, [pc, #108]	; (80034ec <SPI_EndRxTxTransaction+0x80>)
 800347e:	fba2 2303 	umull	r2, r3, r2, r3
 8003482:	0d5b      	lsrs	r3, r3, #21
 8003484:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003488:	fb02 f303 	mul.w	r3, r2, r3
 800348c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003496:	d112      	bne.n	80034be <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	9300      	str	r3, [sp, #0]
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	2200      	movs	r2, #0
 80034a0:	2180      	movs	r1, #128	; 0x80
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	f7ff ff5a 	bl	800335c <SPI_WaitFlagStateUntilTimeout>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d016      	beq.n	80034dc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b2:	f043 0220 	orr.w	r2, r3, #32
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e00f      	b.n	80034de <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00a      	beq.n	80034da <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	3b01      	subs	r3, #1
 80034c8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d4:	2b80      	cmp	r3, #128	; 0x80
 80034d6:	d0f2      	beq.n	80034be <SPI_EndRxTxTransaction+0x52>
 80034d8:	e000      	b.n	80034dc <SPI_EndRxTxTransaction+0x70>
        break;
 80034da:	bf00      	nop
  }

  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3718      	adds	r7, #24
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	20000004 	.word	0x20000004
 80034ec:	165e9f81 	.word	0x165e9f81

080034f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e042      	b.n	8003588 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d106      	bne.n	800351c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f7fe f9fe 	bl	8001918 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2224      	movs	r2, #36	; 0x24
 8003520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68da      	ldr	r2, [r3, #12]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003532:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f000 fd71 	bl	800401c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	691a      	ldr	r2, [r3, #16]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003548:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	695a      	ldr	r2, [r3, #20]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003558:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68da      	ldr	r2, [r3, #12]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003568:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2220      	movs	r2, #32
 8003574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2220      	movs	r2, #32
 800357c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	3708      	adds	r7, #8
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b08a      	sub	sp, #40	; 0x28
 8003594:	af02      	add	r7, sp, #8
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	603b      	str	r3, [r7, #0]
 800359c:	4613      	mov	r3, r2
 800359e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80035a0:	2300      	movs	r3, #0
 80035a2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	2b20      	cmp	r3, #32
 80035ae:	d16d      	bne.n	800368c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d002      	beq.n	80035bc <HAL_UART_Transmit+0x2c>
 80035b6:	88fb      	ldrh	r3, [r7, #6]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d101      	bne.n	80035c0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e066      	b.n	800368e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2221      	movs	r2, #33	; 0x21
 80035ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035ce:	f7fe fa79 	bl	8001ac4 <HAL_GetTick>
 80035d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	88fa      	ldrh	r2, [r7, #6]
 80035d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	88fa      	ldrh	r2, [r7, #6]
 80035de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035e8:	d108      	bne.n	80035fc <HAL_UART_Transmit+0x6c>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d104      	bne.n	80035fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80035f2:	2300      	movs	r3, #0
 80035f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	61bb      	str	r3, [r7, #24]
 80035fa:	e003      	b.n	8003604 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003600:	2300      	movs	r3, #0
 8003602:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003604:	e02a      	b.n	800365c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	9300      	str	r3, [sp, #0]
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	2200      	movs	r2, #0
 800360e:	2180      	movs	r1, #128	; 0x80
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	f000 faf9 	bl	8003c08 <UART_WaitOnFlagUntilTimeout>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d001      	beq.n	8003620 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e036      	b.n	800368e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10b      	bne.n	800363e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	881b      	ldrh	r3, [r3, #0]
 800362a:	461a      	mov	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003634:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	3302      	adds	r3, #2
 800363a:	61bb      	str	r3, [r7, #24]
 800363c:	e007      	b.n	800364e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	781a      	ldrb	r2, [r3, #0]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	3301      	adds	r3, #1
 800364c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003652:	b29b      	uxth	r3, r3
 8003654:	3b01      	subs	r3, #1
 8003656:	b29a      	uxth	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003660:	b29b      	uxth	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1cf      	bne.n	8003606 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	9300      	str	r3, [sp, #0]
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	2200      	movs	r2, #0
 800366e:	2140      	movs	r1, #64	; 0x40
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f000 fac9 	bl	8003c08 <UART_WaitOnFlagUntilTimeout>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d001      	beq.n	8003680 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e006      	b.n	800368e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2220      	movs	r2, #32
 8003684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003688:	2300      	movs	r3, #0
 800368a:	e000      	b.n	800368e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800368c:	2302      	movs	r3, #2
  }
}
 800368e:	4618      	mov	r0, r3
 8003690:	3720      	adds	r7, #32
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
	...

08003698 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b0ba      	sub	sp, #232	; 0xe8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80036be:	2300      	movs	r3, #0
 80036c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80036c4:	2300      	movs	r3, #0
 80036c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80036ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036ce:	f003 030f 	and.w	r3, r3, #15
 80036d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80036d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10f      	bne.n	80036fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036e2:	f003 0320 	and.w	r3, r3, #32
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d009      	beq.n	80036fe <HAL_UART_IRQHandler+0x66>
 80036ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036ee:	f003 0320 	and.w	r3, r3, #32
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d003      	beq.n	80036fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 fbd1 	bl	8003e9e <UART_Receive_IT>
      return;
 80036fc:	e25b      	b.n	8003bb6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80036fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003702:	2b00      	cmp	r3, #0
 8003704:	f000 80de 	beq.w	80038c4 <HAL_UART_IRQHandler+0x22c>
 8003708:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800370c:	f003 0301 	and.w	r3, r3, #1
 8003710:	2b00      	cmp	r3, #0
 8003712:	d106      	bne.n	8003722 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003718:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800371c:	2b00      	cmp	r3, #0
 800371e:	f000 80d1 	beq.w	80038c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00b      	beq.n	8003746 <HAL_UART_IRQHandler+0xae>
 800372e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003736:	2b00      	cmp	r3, #0
 8003738:	d005      	beq.n	8003746 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373e:	f043 0201 	orr.w	r2, r3, #1
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800374a:	f003 0304 	and.w	r3, r3, #4
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00b      	beq.n	800376a <HAL_UART_IRQHandler+0xd2>
 8003752:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b00      	cmp	r3, #0
 800375c:	d005      	beq.n	800376a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003762:	f043 0202 	orr.w	r2, r3, #2
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800376a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00b      	beq.n	800378e <HAL_UART_IRQHandler+0xf6>
 8003776:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b00      	cmp	r3, #0
 8003780:	d005      	beq.n	800378e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003786:	f043 0204 	orr.w	r2, r3, #4
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800378e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003792:	f003 0308 	and.w	r3, r3, #8
 8003796:	2b00      	cmp	r3, #0
 8003798:	d011      	beq.n	80037be <HAL_UART_IRQHandler+0x126>
 800379a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800379e:	f003 0320 	and.w	r3, r3, #32
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d105      	bne.n	80037b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80037a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d005      	beq.n	80037be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b6:	f043 0208 	orr.w	r2, r3, #8
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f000 81f2 	beq.w	8003bac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037cc:	f003 0320 	and.w	r3, r3, #32
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d008      	beq.n	80037e6 <HAL_UART_IRQHandler+0x14e>
 80037d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037d8:	f003 0320 	and.w	r3, r3, #32
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d002      	beq.n	80037e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 fb5c 	bl	8003e9e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f0:	2b40      	cmp	r3, #64	; 0x40
 80037f2:	bf0c      	ite	eq
 80037f4:	2301      	moveq	r3, #1
 80037f6:	2300      	movne	r3, #0
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003802:	f003 0308 	and.w	r3, r3, #8
 8003806:	2b00      	cmp	r3, #0
 8003808:	d103      	bne.n	8003812 <HAL_UART_IRQHandler+0x17a>
 800380a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800380e:	2b00      	cmp	r3, #0
 8003810:	d04f      	beq.n	80038b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 fa66 	bl	8003ce4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003822:	2b40      	cmp	r3, #64	; 0x40
 8003824:	d141      	bne.n	80038aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	3314      	adds	r3, #20
 800382c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003830:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003834:	e853 3f00 	ldrex	r3, [r3]
 8003838:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800383c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003840:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003844:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	3314      	adds	r3, #20
 800384e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003852:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003856:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800385e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003862:	e841 2300 	strex	r3, r2, [r1]
 8003866:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800386a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1d9      	bne.n	8003826 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003876:	2b00      	cmp	r3, #0
 8003878:	d013      	beq.n	80038a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800387e:	4a7e      	ldr	r2, [pc, #504]	; (8003a78 <HAL_UART_IRQHandler+0x3e0>)
 8003880:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003886:	4618      	mov	r0, r3
 8003888:	f7fe fac4 	bl	8001e14 <HAL_DMA_Abort_IT>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d016      	beq.n	80038c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800389c:	4610      	mov	r0, r2
 800389e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038a0:	e00e      	b.n	80038c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 f99c 	bl	8003be0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038a8:	e00a      	b.n	80038c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 f998 	bl	8003be0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038b0:	e006      	b.n	80038c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 f994 	bl	8003be0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80038be:	e175      	b.n	8003bac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038c0:	bf00      	nop
    return;
 80038c2:	e173      	b.n	8003bac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	f040 814f 	bne.w	8003b6c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80038ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038d2:	f003 0310 	and.w	r3, r3, #16
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	f000 8148 	beq.w	8003b6c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80038dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038e0:	f003 0310 	and.w	r3, r3, #16
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f000 8141 	beq.w	8003b6c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038ea:	2300      	movs	r3, #0
 80038ec:	60bb      	str	r3, [r7, #8]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	60bb      	str	r3, [r7, #8]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	60bb      	str	r3, [r7, #8]
 80038fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800390a:	2b40      	cmp	r3, #64	; 0x40
 800390c:	f040 80b6 	bne.w	8003a7c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800391c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 8145 	beq.w	8003bb0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800392a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800392e:	429a      	cmp	r2, r3
 8003930:	f080 813e 	bcs.w	8003bb0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800393a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	2b20      	cmp	r3, #32
 8003944:	f000 8088 	beq.w	8003a58 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	330c      	adds	r3, #12
 800394e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003952:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003956:	e853 3f00 	ldrex	r3, [r3]
 800395a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800395e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003962:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003966:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	330c      	adds	r3, #12
 8003970:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003974:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003978:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800397c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003980:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003984:	e841 2300 	strex	r3, r2, [r1]
 8003988:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800398c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1d9      	bne.n	8003948 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	3314      	adds	r3, #20
 800399a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800399c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800399e:	e853 3f00 	ldrex	r3, [r3]
 80039a2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80039a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039a6:	f023 0301 	bic.w	r3, r3, #1
 80039aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	3314      	adds	r3, #20
 80039b4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80039b8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80039bc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039be:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80039c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80039c4:	e841 2300 	strex	r3, r2, [r1]
 80039c8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80039ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d1e1      	bne.n	8003994 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	3314      	adds	r3, #20
 80039d6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039da:	e853 3f00 	ldrex	r3, [r3]
 80039de:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80039e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	3314      	adds	r3, #20
 80039f0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80039f4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80039f6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80039fa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80039fc:	e841 2300 	strex	r3, r2, [r1]
 8003a00:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003a02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d1e3      	bne.n	80039d0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	330c      	adds	r3, #12
 8003a1c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a20:	e853 3f00 	ldrex	r3, [r3]
 8003a24:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003a26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a28:	f023 0310 	bic.w	r3, r3, #16
 8003a2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	330c      	adds	r3, #12
 8003a36:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003a3a:	65ba      	str	r2, [r7, #88]	; 0x58
 8003a3c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a3e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a42:	e841 2300 	strex	r3, r2, [r1]
 8003a46:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003a48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1e3      	bne.n	8003a16 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7fe f9a1 	bl	8001d9a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 f8bf 	bl	8003bf2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a74:	e09c      	b.n	8003bb0 <HAL_UART_IRQHandler+0x518>
 8003a76:	bf00      	nop
 8003a78:	08003da9 	.word	0x08003da9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	f000 808e 	beq.w	8003bb4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003a98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f000 8089 	beq.w	8003bb4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	330c      	adds	r3, #12
 8003aa8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aac:	e853 3f00 	ldrex	r3, [r3]
 8003ab0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ab4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ab8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	330c      	adds	r3, #12
 8003ac2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003ac6:	647a      	str	r2, [r7, #68]	; 0x44
 8003ac8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003acc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ace:	e841 2300 	strex	r3, r2, [r1]
 8003ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1e3      	bne.n	8003aa2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	3314      	adds	r3, #20
 8003ae0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae4:	e853 3f00 	ldrex	r3, [r3]
 8003ae8:	623b      	str	r3, [r7, #32]
   return(result);
 8003aea:	6a3b      	ldr	r3, [r7, #32]
 8003aec:	f023 0301 	bic.w	r3, r3, #1
 8003af0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	3314      	adds	r3, #20
 8003afa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003afe:	633a      	str	r2, [r7, #48]	; 0x30
 8003b00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b06:	e841 2300 	strex	r3, r2, [r1]
 8003b0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1e3      	bne.n	8003ada <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2220      	movs	r2, #32
 8003b16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	330c      	adds	r3, #12
 8003b26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	e853 3f00 	ldrex	r3, [r3]
 8003b2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f023 0310 	bic.w	r3, r3, #16
 8003b36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	330c      	adds	r3, #12
 8003b40:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003b44:	61fa      	str	r2, [r7, #28]
 8003b46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b48:	69b9      	ldr	r1, [r7, #24]
 8003b4a:	69fa      	ldr	r2, [r7, #28]
 8003b4c:	e841 2300 	strex	r3, r2, [r1]
 8003b50:	617b      	str	r3, [r7, #20]
   return(result);
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1e3      	bne.n	8003b20 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2202      	movs	r2, #2
 8003b5c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b5e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b62:	4619      	mov	r1, r3
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 f844 	bl	8003bf2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b6a:	e023      	b.n	8003bb4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d009      	beq.n	8003b8c <HAL_UART_IRQHandler+0x4f4>
 8003b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d003      	beq.n	8003b8c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f000 f923 	bl	8003dd0 <UART_Transmit_IT>
    return;
 8003b8a:	e014      	b.n	8003bb6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d00e      	beq.n	8003bb6 <HAL_UART_IRQHandler+0x51e>
 8003b98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d008      	beq.n	8003bb6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 f962 	bl	8003e6e <UART_EndTransmit_IT>
    return;
 8003baa:	e004      	b.n	8003bb6 <HAL_UART_IRQHandler+0x51e>
    return;
 8003bac:	bf00      	nop
 8003bae:	e002      	b.n	8003bb6 <HAL_UART_IRQHandler+0x51e>
      return;
 8003bb0:	bf00      	nop
 8003bb2:	e000      	b.n	8003bb6 <HAL_UART_IRQHandler+0x51e>
      return;
 8003bb4:	bf00      	nop
  }
}
 8003bb6:	37e8      	adds	r7, #232	; 0xe8
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bc80      	pop	{r7}
 8003bcc:	4770      	bx	lr

08003bce <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b083      	sub	sp, #12
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003bd6:	bf00      	nop
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bc80      	pop	{r7}
 8003bde:	4770      	bx	lr

08003be0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bc80      	pop	{r7}
 8003bf0:	4770      	bx	lr

08003bf2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	b083      	sub	sp, #12
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003bfe:	bf00      	nop
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bc80      	pop	{r7}
 8003c06:	4770      	bx	lr

08003c08 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b090      	sub	sp, #64	; 0x40
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	603b      	str	r3, [r7, #0]
 8003c14:	4613      	mov	r3, r2
 8003c16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c18:	e050      	b.n	8003cbc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c20:	d04c      	beq.n	8003cbc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d007      	beq.n	8003c38 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c28:	f7fd ff4c 	bl	8001ac4 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d241      	bcs.n	8003cbc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	330c      	adds	r3, #12
 8003c3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c42:	e853 3f00 	ldrex	r3, [r3]
 8003c46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	330c      	adds	r3, #12
 8003c56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c58:	637a      	str	r2, [r7, #52]	; 0x34
 8003c5a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c60:	e841 2300 	strex	r3, r2, [r1]
 8003c64:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1e5      	bne.n	8003c38 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	3314      	adds	r3, #20
 8003c72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	e853 3f00 	ldrex	r3, [r3]
 8003c7a:	613b      	str	r3, [r7, #16]
   return(result);
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	f023 0301 	bic.w	r3, r3, #1
 8003c82:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	3314      	adds	r3, #20
 8003c8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c8c:	623a      	str	r2, [r7, #32]
 8003c8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c90:	69f9      	ldr	r1, [r7, #28]
 8003c92:	6a3a      	ldr	r2, [r7, #32]
 8003c94:	e841 2300 	strex	r3, r2, [r1]
 8003c98:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d1e5      	bne.n	8003c6c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2220      	movs	r2, #32
 8003cac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e00f      	b.n	8003cdc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	68ba      	ldr	r2, [r7, #8]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	bf0c      	ite	eq
 8003ccc:	2301      	moveq	r3, #1
 8003cce:	2300      	movne	r3, #0
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	79fb      	ldrb	r3, [r7, #7]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d09f      	beq.n	8003c1a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3740      	adds	r7, #64	; 0x40
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b095      	sub	sp, #84	; 0x54
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	330c      	adds	r3, #12
 8003cf2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cf6:	e853 3f00 	ldrex	r3, [r3]
 8003cfa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	330c      	adds	r3, #12
 8003d0a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d0c:	643a      	str	r2, [r7, #64]	; 0x40
 8003d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d10:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d14:	e841 2300 	strex	r3, r2, [r1]
 8003d18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1e5      	bne.n	8003cec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	3314      	adds	r3, #20
 8003d26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d28:	6a3b      	ldr	r3, [r7, #32]
 8003d2a:	e853 3f00 	ldrex	r3, [r3]
 8003d2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	f023 0301 	bic.w	r3, r3, #1
 8003d36:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	3314      	adds	r3, #20
 8003d3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d40:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d48:	e841 2300 	strex	r3, r2, [r1]
 8003d4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1e5      	bne.n	8003d20 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d119      	bne.n	8003d90 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	330c      	adds	r3, #12
 8003d62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	e853 3f00 	ldrex	r3, [r3]
 8003d6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	f023 0310 	bic.w	r3, r3, #16
 8003d72:	647b      	str	r3, [r7, #68]	; 0x44
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	330c      	adds	r3, #12
 8003d7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d7c:	61ba      	str	r2, [r7, #24]
 8003d7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d80:	6979      	ldr	r1, [r7, #20]
 8003d82:	69ba      	ldr	r2, [r7, #24]
 8003d84:	e841 2300 	strex	r3, r2, [r1]
 8003d88:	613b      	str	r3, [r7, #16]
   return(result);
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1e5      	bne.n	8003d5c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2220      	movs	r2, #32
 8003d94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003d9e:	bf00      	nop
 8003da0:	3754      	adds	r7, #84	; 0x54
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bc80      	pop	{r7}
 8003da6:	4770      	bx	lr

08003da8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f7ff ff0c 	bl	8003be0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dc8:	bf00      	nop
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	2b21      	cmp	r3, #33	; 0x21
 8003de2:	d13e      	bne.n	8003e62 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dec:	d114      	bne.n	8003e18 <UART_Transmit_IT+0x48>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d110      	bne.n	8003e18 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	881b      	ldrh	r3, [r3, #0]
 8003e00:	461a      	mov	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e0a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a1b      	ldr	r3, [r3, #32]
 8003e10:	1c9a      	adds	r2, r3, #2
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	621a      	str	r2, [r3, #32]
 8003e16:	e008      	b.n	8003e2a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a1b      	ldr	r3, [r3, #32]
 8003e1c:	1c59      	adds	r1, r3, #1
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	6211      	str	r1, [r2, #32]
 8003e22:	781a      	ldrb	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	3b01      	subs	r3, #1
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	4619      	mov	r1, r3
 8003e38:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10f      	bne.n	8003e5e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68da      	ldr	r2, [r3, #12]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e4c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68da      	ldr	r2, [r3, #12]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e5c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	e000      	b.n	8003e64 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e62:	2302      	movs	r3, #2
  }
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3714      	adds	r7, #20
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bc80      	pop	{r7}
 8003e6c:	4770      	bx	lr

08003e6e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b082      	sub	sp, #8
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68da      	ldr	r2, [r3, #12]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e84:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2220      	movs	r2, #32
 8003e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f7ff fe94 	bl	8003bbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b08c      	sub	sp, #48	; 0x30
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b22      	cmp	r3, #34	; 0x22
 8003eb0:	f040 80ae 	bne.w	8004010 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ebc:	d117      	bne.n	8003eee <UART_Receive_IT+0x50>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d113      	bne.n	8003eee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ece:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee6:	1c9a      	adds	r2, r3, #2
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	629a      	str	r2, [r3, #40]	; 0x28
 8003eec:	e026      	b.n	8003f3c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f00:	d007      	beq.n	8003f12 <UART_Receive_IT+0x74>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10a      	bne.n	8003f20 <UART_Receive_IT+0x82>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d106      	bne.n	8003f20 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	b2da      	uxtb	r2, r3
 8003f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f1c:	701a      	strb	r2, [r3, #0]
 8003f1e:	e008      	b.n	8003f32 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f2c:	b2da      	uxtb	r2, r3
 8003f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f30:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f36:	1c5a      	adds	r2, r3, #1
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	3b01      	subs	r3, #1
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	4619      	mov	r1, r3
 8003f4a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d15d      	bne.n	800400c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68da      	ldr	r2, [r3, #12]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f022 0220 	bic.w	r2, r2, #32
 8003f5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68da      	ldr	r2, [r3, #12]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	695a      	ldr	r2, [r3, #20]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f022 0201 	bic.w	r2, r2, #1
 8003f7e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2220      	movs	r2, #32
 8003f84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d135      	bne.n	8004002 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	330c      	adds	r3, #12
 8003fa2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	e853 3f00 	ldrex	r3, [r3]
 8003faa:	613b      	str	r3, [r7, #16]
   return(result);
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	f023 0310 	bic.w	r3, r3, #16
 8003fb2:	627b      	str	r3, [r7, #36]	; 0x24
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	330c      	adds	r3, #12
 8003fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fbc:	623a      	str	r2, [r7, #32]
 8003fbe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc0:	69f9      	ldr	r1, [r7, #28]
 8003fc2:	6a3a      	ldr	r2, [r7, #32]
 8003fc4:	e841 2300 	strex	r3, r2, [r1]
 8003fc8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1e5      	bne.n	8003f9c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0310 	and.w	r3, r3, #16
 8003fda:	2b10      	cmp	r3, #16
 8003fdc:	d10a      	bne.n	8003ff4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fde:	2300      	movs	r3, #0
 8003fe0:	60fb      	str	r3, [r7, #12]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	60fb      	str	r3, [r7, #12]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	60fb      	str	r3, [r7, #12]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f7ff fdf9 	bl	8003bf2 <HAL_UARTEx_RxEventCallback>
 8004000:	e002      	b.n	8004008 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f7ff fde3 	bl	8003bce <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004008:	2300      	movs	r3, #0
 800400a:	e002      	b.n	8004012 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800400c:	2300      	movs	r3, #0
 800400e:	e000      	b.n	8004012 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004010:	2302      	movs	r3, #2
  }
}
 8004012:	4618      	mov	r0, r3
 8004014:	3730      	adds	r7, #48	; 0x30
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
	...

0800401c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	68da      	ldr	r2, [r3, #12]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	430a      	orrs	r2, r1
 8004038:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	689a      	ldr	r2, [r3, #8]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	431a      	orrs	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	695b      	ldr	r3, [r3, #20]
 8004048:	431a      	orrs	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	69db      	ldr	r3, [r3, #28]
 800404e:	4313      	orrs	r3, r2
 8004050:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800405c:	f023 030c 	bic.w	r3, r3, #12
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	6812      	ldr	r2, [r2, #0]
 8004064:	68b9      	ldr	r1, [r7, #8]
 8004066:	430b      	orrs	r3, r1
 8004068:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	695b      	ldr	r3, [r3, #20]
 8004070:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	699a      	ldr	r2, [r3, #24]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	430a      	orrs	r2, r1
 800407e:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a55      	ldr	r2, [pc, #340]	; (80041dc <UART_SetConfig+0x1c0>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d103      	bne.n	8004092 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800408a:	f7fe fdfd 	bl	8002c88 <HAL_RCC_GetPCLK2Freq>
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	e002      	b.n	8004098 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004092:	f7fe fde5 	bl	8002c60 <HAL_RCC_GetPCLK1Freq>
 8004096:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	69db      	ldr	r3, [r3, #28]
 800409c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040a0:	d14c      	bne.n	800413c <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	4613      	mov	r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	4413      	add	r3, r2
 80040aa:	009a      	lsls	r2, r3, #2
 80040ac:	441a      	add	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	005b      	lsls	r3, r3, #1
 80040b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b8:	4a49      	ldr	r2, [pc, #292]	; (80041e0 <UART_SetConfig+0x1c4>)
 80040ba:	fba2 2303 	umull	r2, r3, r2, r3
 80040be:	095b      	lsrs	r3, r3, #5
 80040c0:	0119      	lsls	r1, r3, #4
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	4613      	mov	r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	4413      	add	r3, r2
 80040ca:	009a      	lsls	r2, r3, #2
 80040cc:	441a      	add	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	005b      	lsls	r3, r3, #1
 80040d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80040d8:	4b41      	ldr	r3, [pc, #260]	; (80041e0 <UART_SetConfig+0x1c4>)
 80040da:	fba3 0302 	umull	r0, r3, r3, r2
 80040de:	095b      	lsrs	r3, r3, #5
 80040e0:	2064      	movs	r0, #100	; 0x64
 80040e2:	fb00 f303 	mul.w	r3, r0, r3
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	00db      	lsls	r3, r3, #3
 80040ea:	3332      	adds	r3, #50	; 0x32
 80040ec:	4a3c      	ldr	r2, [pc, #240]	; (80041e0 <UART_SetConfig+0x1c4>)
 80040ee:	fba2 2303 	umull	r2, r3, r2, r3
 80040f2:	095b      	lsrs	r3, r3, #5
 80040f4:	005b      	lsls	r3, r3, #1
 80040f6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80040fa:	4419      	add	r1, r3
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	4613      	mov	r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	4413      	add	r3, r2
 8004104:	009a      	lsls	r2, r3, #2
 8004106:	441a      	add	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004112:	4b33      	ldr	r3, [pc, #204]	; (80041e0 <UART_SetConfig+0x1c4>)
 8004114:	fba3 0302 	umull	r0, r3, r3, r2
 8004118:	095b      	lsrs	r3, r3, #5
 800411a:	2064      	movs	r0, #100	; 0x64
 800411c:	fb00 f303 	mul.w	r3, r0, r3
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	00db      	lsls	r3, r3, #3
 8004124:	3332      	adds	r3, #50	; 0x32
 8004126:	4a2e      	ldr	r2, [pc, #184]	; (80041e0 <UART_SetConfig+0x1c4>)
 8004128:	fba2 2303 	umull	r2, r3, r2, r3
 800412c:	095b      	lsrs	r3, r3, #5
 800412e:	f003 0207 	and.w	r2, r3, #7
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	440a      	add	r2, r1
 8004138:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800413a:	e04a      	b.n	80041d2 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	4613      	mov	r3, r2
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	4413      	add	r3, r2
 8004144:	009a      	lsls	r2, r3, #2
 8004146:	441a      	add	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004152:	4a23      	ldr	r2, [pc, #140]	; (80041e0 <UART_SetConfig+0x1c4>)
 8004154:	fba2 2303 	umull	r2, r3, r2, r3
 8004158:	095b      	lsrs	r3, r3, #5
 800415a:	0119      	lsls	r1, r3, #4
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	4613      	mov	r3, r2
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	4413      	add	r3, r2
 8004164:	009a      	lsls	r2, r3, #2
 8004166:	441a      	add	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004172:	4b1b      	ldr	r3, [pc, #108]	; (80041e0 <UART_SetConfig+0x1c4>)
 8004174:	fba3 0302 	umull	r0, r3, r3, r2
 8004178:	095b      	lsrs	r3, r3, #5
 800417a:	2064      	movs	r0, #100	; 0x64
 800417c:	fb00 f303 	mul.w	r3, r0, r3
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	011b      	lsls	r3, r3, #4
 8004184:	3332      	adds	r3, #50	; 0x32
 8004186:	4a16      	ldr	r2, [pc, #88]	; (80041e0 <UART_SetConfig+0x1c4>)
 8004188:	fba2 2303 	umull	r2, r3, r2, r3
 800418c:	095b      	lsrs	r3, r3, #5
 800418e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004192:	4419      	add	r1, r3
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	4613      	mov	r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	4413      	add	r3, r2
 800419c:	009a      	lsls	r2, r3, #2
 800419e:	441a      	add	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80041aa:	4b0d      	ldr	r3, [pc, #52]	; (80041e0 <UART_SetConfig+0x1c4>)
 80041ac:	fba3 0302 	umull	r0, r3, r3, r2
 80041b0:	095b      	lsrs	r3, r3, #5
 80041b2:	2064      	movs	r0, #100	; 0x64
 80041b4:	fb00 f303 	mul.w	r3, r0, r3
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	011b      	lsls	r3, r3, #4
 80041bc:	3332      	adds	r3, #50	; 0x32
 80041be:	4a08      	ldr	r2, [pc, #32]	; (80041e0 <UART_SetConfig+0x1c4>)
 80041c0:	fba2 2303 	umull	r2, r3, r2, r3
 80041c4:	095b      	lsrs	r3, r3, #5
 80041c6:	f003 020f 	and.w	r2, r3, #15
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	440a      	add	r2, r1
 80041d0:	609a      	str	r2, [r3, #8]
}
 80041d2:	bf00      	nop
 80041d4:	3710      	adds	r7, #16
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	40013800 	.word	0x40013800
 80041e0:	51eb851f 	.word	0x51eb851f

080041e4 <__errno>:
 80041e4:	4b01      	ldr	r3, [pc, #4]	; (80041ec <__errno+0x8>)
 80041e6:	6818      	ldr	r0, [r3, #0]
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	2000002c 	.word	0x2000002c

080041f0 <__libc_init_array>:
 80041f0:	b570      	push	{r4, r5, r6, lr}
 80041f2:	2600      	movs	r6, #0
 80041f4:	4d0c      	ldr	r5, [pc, #48]	; (8004228 <__libc_init_array+0x38>)
 80041f6:	4c0d      	ldr	r4, [pc, #52]	; (800422c <__libc_init_array+0x3c>)
 80041f8:	1b64      	subs	r4, r4, r5
 80041fa:	10a4      	asrs	r4, r4, #2
 80041fc:	42a6      	cmp	r6, r4
 80041fe:	d109      	bne.n	8004214 <__libc_init_array+0x24>
 8004200:	f000 ff82 	bl	8005108 <_init>
 8004204:	2600      	movs	r6, #0
 8004206:	4d0a      	ldr	r5, [pc, #40]	; (8004230 <__libc_init_array+0x40>)
 8004208:	4c0a      	ldr	r4, [pc, #40]	; (8004234 <__libc_init_array+0x44>)
 800420a:	1b64      	subs	r4, r4, r5
 800420c:	10a4      	asrs	r4, r4, #2
 800420e:	42a6      	cmp	r6, r4
 8004210:	d105      	bne.n	800421e <__libc_init_array+0x2e>
 8004212:	bd70      	pop	{r4, r5, r6, pc}
 8004214:	f855 3b04 	ldr.w	r3, [r5], #4
 8004218:	4798      	blx	r3
 800421a:	3601      	adds	r6, #1
 800421c:	e7ee      	b.n	80041fc <__libc_init_array+0xc>
 800421e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004222:	4798      	blx	r3
 8004224:	3601      	adds	r6, #1
 8004226:	e7f2      	b.n	800420e <__libc_init_array+0x1e>
 8004228:	080052a4 	.word	0x080052a4
 800422c:	080052a4 	.word	0x080052a4
 8004230:	080052a4 	.word	0x080052a4
 8004234:	080052a8 	.word	0x080052a8

08004238 <memset>:
 8004238:	4603      	mov	r3, r0
 800423a:	4402      	add	r2, r0
 800423c:	4293      	cmp	r3, r2
 800423e:	d100      	bne.n	8004242 <memset+0xa>
 8004240:	4770      	bx	lr
 8004242:	f803 1b01 	strb.w	r1, [r3], #1
 8004246:	e7f9      	b.n	800423c <memset+0x4>

08004248 <iprintf>:
 8004248:	b40f      	push	{r0, r1, r2, r3}
 800424a:	4b0a      	ldr	r3, [pc, #40]	; (8004274 <iprintf+0x2c>)
 800424c:	b513      	push	{r0, r1, r4, lr}
 800424e:	681c      	ldr	r4, [r3, #0]
 8004250:	b124      	cbz	r4, 800425c <iprintf+0x14>
 8004252:	69a3      	ldr	r3, [r4, #24]
 8004254:	b913      	cbnz	r3, 800425c <iprintf+0x14>
 8004256:	4620      	mov	r0, r4
 8004258:	f000 f866 	bl	8004328 <__sinit>
 800425c:	ab05      	add	r3, sp, #20
 800425e:	4620      	mov	r0, r4
 8004260:	9a04      	ldr	r2, [sp, #16]
 8004262:	68a1      	ldr	r1, [r4, #8]
 8004264:	9301      	str	r3, [sp, #4]
 8004266:	f000 f981 	bl	800456c <_vfiprintf_r>
 800426a:	b002      	add	sp, #8
 800426c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004270:	b004      	add	sp, #16
 8004272:	4770      	bx	lr
 8004274:	2000002c 	.word	0x2000002c

08004278 <std>:
 8004278:	2300      	movs	r3, #0
 800427a:	b510      	push	{r4, lr}
 800427c:	4604      	mov	r4, r0
 800427e:	e9c0 3300 	strd	r3, r3, [r0]
 8004282:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004286:	6083      	str	r3, [r0, #8]
 8004288:	8181      	strh	r1, [r0, #12]
 800428a:	6643      	str	r3, [r0, #100]	; 0x64
 800428c:	81c2      	strh	r2, [r0, #14]
 800428e:	6183      	str	r3, [r0, #24]
 8004290:	4619      	mov	r1, r3
 8004292:	2208      	movs	r2, #8
 8004294:	305c      	adds	r0, #92	; 0x5c
 8004296:	f7ff ffcf 	bl	8004238 <memset>
 800429a:	4b05      	ldr	r3, [pc, #20]	; (80042b0 <std+0x38>)
 800429c:	6224      	str	r4, [r4, #32]
 800429e:	6263      	str	r3, [r4, #36]	; 0x24
 80042a0:	4b04      	ldr	r3, [pc, #16]	; (80042b4 <std+0x3c>)
 80042a2:	62a3      	str	r3, [r4, #40]	; 0x28
 80042a4:	4b04      	ldr	r3, [pc, #16]	; (80042b8 <std+0x40>)
 80042a6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80042a8:	4b04      	ldr	r3, [pc, #16]	; (80042bc <std+0x44>)
 80042aa:	6323      	str	r3, [r4, #48]	; 0x30
 80042ac:	bd10      	pop	{r4, pc}
 80042ae:	bf00      	nop
 80042b0:	08004b19 	.word	0x08004b19
 80042b4:	08004b3b 	.word	0x08004b3b
 80042b8:	08004b73 	.word	0x08004b73
 80042bc:	08004b97 	.word	0x08004b97

080042c0 <_cleanup_r>:
 80042c0:	4901      	ldr	r1, [pc, #4]	; (80042c8 <_cleanup_r+0x8>)
 80042c2:	f000 b8af 	b.w	8004424 <_fwalk_reent>
 80042c6:	bf00      	nop
 80042c8:	08004e71 	.word	0x08004e71

080042cc <__sfmoreglue>:
 80042cc:	b570      	push	{r4, r5, r6, lr}
 80042ce:	2568      	movs	r5, #104	; 0x68
 80042d0:	1e4a      	subs	r2, r1, #1
 80042d2:	4355      	muls	r5, r2
 80042d4:	460e      	mov	r6, r1
 80042d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80042da:	f000 f8c5 	bl	8004468 <_malloc_r>
 80042de:	4604      	mov	r4, r0
 80042e0:	b140      	cbz	r0, 80042f4 <__sfmoreglue+0x28>
 80042e2:	2100      	movs	r1, #0
 80042e4:	e9c0 1600 	strd	r1, r6, [r0]
 80042e8:	300c      	adds	r0, #12
 80042ea:	60a0      	str	r0, [r4, #8]
 80042ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80042f0:	f7ff ffa2 	bl	8004238 <memset>
 80042f4:	4620      	mov	r0, r4
 80042f6:	bd70      	pop	{r4, r5, r6, pc}

080042f8 <__sfp_lock_acquire>:
 80042f8:	4801      	ldr	r0, [pc, #4]	; (8004300 <__sfp_lock_acquire+0x8>)
 80042fa:	f000 b8b3 	b.w	8004464 <__retarget_lock_acquire_recursive>
 80042fe:	bf00      	nop
 8004300:	2000019c 	.word	0x2000019c

08004304 <__sfp_lock_release>:
 8004304:	4801      	ldr	r0, [pc, #4]	; (800430c <__sfp_lock_release+0x8>)
 8004306:	f000 b8ae 	b.w	8004466 <__retarget_lock_release_recursive>
 800430a:	bf00      	nop
 800430c:	2000019c 	.word	0x2000019c

08004310 <__sinit_lock_acquire>:
 8004310:	4801      	ldr	r0, [pc, #4]	; (8004318 <__sinit_lock_acquire+0x8>)
 8004312:	f000 b8a7 	b.w	8004464 <__retarget_lock_acquire_recursive>
 8004316:	bf00      	nop
 8004318:	20000197 	.word	0x20000197

0800431c <__sinit_lock_release>:
 800431c:	4801      	ldr	r0, [pc, #4]	; (8004324 <__sinit_lock_release+0x8>)
 800431e:	f000 b8a2 	b.w	8004466 <__retarget_lock_release_recursive>
 8004322:	bf00      	nop
 8004324:	20000197 	.word	0x20000197

08004328 <__sinit>:
 8004328:	b510      	push	{r4, lr}
 800432a:	4604      	mov	r4, r0
 800432c:	f7ff fff0 	bl	8004310 <__sinit_lock_acquire>
 8004330:	69a3      	ldr	r3, [r4, #24]
 8004332:	b11b      	cbz	r3, 800433c <__sinit+0x14>
 8004334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004338:	f7ff bff0 	b.w	800431c <__sinit_lock_release>
 800433c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004340:	6523      	str	r3, [r4, #80]	; 0x50
 8004342:	4b13      	ldr	r3, [pc, #76]	; (8004390 <__sinit+0x68>)
 8004344:	4a13      	ldr	r2, [pc, #76]	; (8004394 <__sinit+0x6c>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	62a2      	str	r2, [r4, #40]	; 0x28
 800434a:	42a3      	cmp	r3, r4
 800434c:	bf08      	it	eq
 800434e:	2301      	moveq	r3, #1
 8004350:	4620      	mov	r0, r4
 8004352:	bf08      	it	eq
 8004354:	61a3      	streq	r3, [r4, #24]
 8004356:	f000 f81f 	bl	8004398 <__sfp>
 800435a:	6060      	str	r0, [r4, #4]
 800435c:	4620      	mov	r0, r4
 800435e:	f000 f81b 	bl	8004398 <__sfp>
 8004362:	60a0      	str	r0, [r4, #8]
 8004364:	4620      	mov	r0, r4
 8004366:	f000 f817 	bl	8004398 <__sfp>
 800436a:	2200      	movs	r2, #0
 800436c:	2104      	movs	r1, #4
 800436e:	60e0      	str	r0, [r4, #12]
 8004370:	6860      	ldr	r0, [r4, #4]
 8004372:	f7ff ff81 	bl	8004278 <std>
 8004376:	2201      	movs	r2, #1
 8004378:	2109      	movs	r1, #9
 800437a:	68a0      	ldr	r0, [r4, #8]
 800437c:	f7ff ff7c 	bl	8004278 <std>
 8004380:	2202      	movs	r2, #2
 8004382:	2112      	movs	r1, #18
 8004384:	68e0      	ldr	r0, [r4, #12]
 8004386:	f7ff ff77 	bl	8004278 <std>
 800438a:	2301      	movs	r3, #1
 800438c:	61a3      	str	r3, [r4, #24]
 800438e:	e7d1      	b.n	8004334 <__sinit+0xc>
 8004390:	08005204 	.word	0x08005204
 8004394:	080042c1 	.word	0x080042c1

08004398 <__sfp>:
 8004398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800439a:	4607      	mov	r7, r0
 800439c:	f7ff ffac 	bl	80042f8 <__sfp_lock_acquire>
 80043a0:	4b1e      	ldr	r3, [pc, #120]	; (800441c <__sfp+0x84>)
 80043a2:	681e      	ldr	r6, [r3, #0]
 80043a4:	69b3      	ldr	r3, [r6, #24]
 80043a6:	b913      	cbnz	r3, 80043ae <__sfp+0x16>
 80043a8:	4630      	mov	r0, r6
 80043aa:	f7ff ffbd 	bl	8004328 <__sinit>
 80043ae:	3648      	adds	r6, #72	; 0x48
 80043b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80043b4:	3b01      	subs	r3, #1
 80043b6:	d503      	bpl.n	80043c0 <__sfp+0x28>
 80043b8:	6833      	ldr	r3, [r6, #0]
 80043ba:	b30b      	cbz	r3, 8004400 <__sfp+0x68>
 80043bc:	6836      	ldr	r6, [r6, #0]
 80043be:	e7f7      	b.n	80043b0 <__sfp+0x18>
 80043c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80043c4:	b9d5      	cbnz	r5, 80043fc <__sfp+0x64>
 80043c6:	4b16      	ldr	r3, [pc, #88]	; (8004420 <__sfp+0x88>)
 80043c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80043cc:	60e3      	str	r3, [r4, #12]
 80043ce:	6665      	str	r5, [r4, #100]	; 0x64
 80043d0:	f000 f847 	bl	8004462 <__retarget_lock_init_recursive>
 80043d4:	f7ff ff96 	bl	8004304 <__sfp_lock_release>
 80043d8:	2208      	movs	r2, #8
 80043da:	4629      	mov	r1, r5
 80043dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80043e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80043e4:	6025      	str	r5, [r4, #0]
 80043e6:	61a5      	str	r5, [r4, #24]
 80043e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80043ec:	f7ff ff24 	bl	8004238 <memset>
 80043f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80043f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80043f8:	4620      	mov	r0, r4
 80043fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043fc:	3468      	adds	r4, #104	; 0x68
 80043fe:	e7d9      	b.n	80043b4 <__sfp+0x1c>
 8004400:	2104      	movs	r1, #4
 8004402:	4638      	mov	r0, r7
 8004404:	f7ff ff62 	bl	80042cc <__sfmoreglue>
 8004408:	4604      	mov	r4, r0
 800440a:	6030      	str	r0, [r6, #0]
 800440c:	2800      	cmp	r0, #0
 800440e:	d1d5      	bne.n	80043bc <__sfp+0x24>
 8004410:	f7ff ff78 	bl	8004304 <__sfp_lock_release>
 8004414:	230c      	movs	r3, #12
 8004416:	603b      	str	r3, [r7, #0]
 8004418:	e7ee      	b.n	80043f8 <__sfp+0x60>
 800441a:	bf00      	nop
 800441c:	08005204 	.word	0x08005204
 8004420:	ffff0001 	.word	0xffff0001

08004424 <_fwalk_reent>:
 8004424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004428:	4606      	mov	r6, r0
 800442a:	4688      	mov	r8, r1
 800442c:	2700      	movs	r7, #0
 800442e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004432:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004436:	f1b9 0901 	subs.w	r9, r9, #1
 800443a:	d505      	bpl.n	8004448 <_fwalk_reent+0x24>
 800443c:	6824      	ldr	r4, [r4, #0]
 800443e:	2c00      	cmp	r4, #0
 8004440:	d1f7      	bne.n	8004432 <_fwalk_reent+0xe>
 8004442:	4638      	mov	r0, r7
 8004444:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004448:	89ab      	ldrh	r3, [r5, #12]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d907      	bls.n	800445e <_fwalk_reent+0x3a>
 800444e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004452:	3301      	adds	r3, #1
 8004454:	d003      	beq.n	800445e <_fwalk_reent+0x3a>
 8004456:	4629      	mov	r1, r5
 8004458:	4630      	mov	r0, r6
 800445a:	47c0      	blx	r8
 800445c:	4307      	orrs	r7, r0
 800445e:	3568      	adds	r5, #104	; 0x68
 8004460:	e7e9      	b.n	8004436 <_fwalk_reent+0x12>

08004462 <__retarget_lock_init_recursive>:
 8004462:	4770      	bx	lr

08004464 <__retarget_lock_acquire_recursive>:
 8004464:	4770      	bx	lr

08004466 <__retarget_lock_release_recursive>:
 8004466:	4770      	bx	lr

08004468 <_malloc_r>:
 8004468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800446a:	1ccd      	adds	r5, r1, #3
 800446c:	f025 0503 	bic.w	r5, r5, #3
 8004470:	3508      	adds	r5, #8
 8004472:	2d0c      	cmp	r5, #12
 8004474:	bf38      	it	cc
 8004476:	250c      	movcc	r5, #12
 8004478:	2d00      	cmp	r5, #0
 800447a:	4606      	mov	r6, r0
 800447c:	db01      	blt.n	8004482 <_malloc_r+0x1a>
 800447e:	42a9      	cmp	r1, r5
 8004480:	d903      	bls.n	800448a <_malloc_r+0x22>
 8004482:	230c      	movs	r3, #12
 8004484:	6033      	str	r3, [r6, #0]
 8004486:	2000      	movs	r0, #0
 8004488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800448a:	f000 fdb1 	bl	8004ff0 <__malloc_lock>
 800448e:	4921      	ldr	r1, [pc, #132]	; (8004514 <_malloc_r+0xac>)
 8004490:	680a      	ldr	r2, [r1, #0]
 8004492:	4614      	mov	r4, r2
 8004494:	b99c      	cbnz	r4, 80044be <_malloc_r+0x56>
 8004496:	4f20      	ldr	r7, [pc, #128]	; (8004518 <_malloc_r+0xb0>)
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	b923      	cbnz	r3, 80044a6 <_malloc_r+0x3e>
 800449c:	4621      	mov	r1, r4
 800449e:	4630      	mov	r0, r6
 80044a0:	f000 fb2a 	bl	8004af8 <_sbrk_r>
 80044a4:	6038      	str	r0, [r7, #0]
 80044a6:	4629      	mov	r1, r5
 80044a8:	4630      	mov	r0, r6
 80044aa:	f000 fb25 	bl	8004af8 <_sbrk_r>
 80044ae:	1c43      	adds	r3, r0, #1
 80044b0:	d123      	bne.n	80044fa <_malloc_r+0x92>
 80044b2:	230c      	movs	r3, #12
 80044b4:	4630      	mov	r0, r6
 80044b6:	6033      	str	r3, [r6, #0]
 80044b8:	f000 fda0 	bl	8004ffc <__malloc_unlock>
 80044bc:	e7e3      	b.n	8004486 <_malloc_r+0x1e>
 80044be:	6823      	ldr	r3, [r4, #0]
 80044c0:	1b5b      	subs	r3, r3, r5
 80044c2:	d417      	bmi.n	80044f4 <_malloc_r+0x8c>
 80044c4:	2b0b      	cmp	r3, #11
 80044c6:	d903      	bls.n	80044d0 <_malloc_r+0x68>
 80044c8:	6023      	str	r3, [r4, #0]
 80044ca:	441c      	add	r4, r3
 80044cc:	6025      	str	r5, [r4, #0]
 80044ce:	e004      	b.n	80044da <_malloc_r+0x72>
 80044d0:	6863      	ldr	r3, [r4, #4]
 80044d2:	42a2      	cmp	r2, r4
 80044d4:	bf0c      	ite	eq
 80044d6:	600b      	streq	r3, [r1, #0]
 80044d8:	6053      	strne	r3, [r2, #4]
 80044da:	4630      	mov	r0, r6
 80044dc:	f000 fd8e 	bl	8004ffc <__malloc_unlock>
 80044e0:	f104 000b 	add.w	r0, r4, #11
 80044e4:	1d23      	adds	r3, r4, #4
 80044e6:	f020 0007 	bic.w	r0, r0, #7
 80044ea:	1ac2      	subs	r2, r0, r3
 80044ec:	d0cc      	beq.n	8004488 <_malloc_r+0x20>
 80044ee:	1a1b      	subs	r3, r3, r0
 80044f0:	50a3      	str	r3, [r4, r2]
 80044f2:	e7c9      	b.n	8004488 <_malloc_r+0x20>
 80044f4:	4622      	mov	r2, r4
 80044f6:	6864      	ldr	r4, [r4, #4]
 80044f8:	e7cc      	b.n	8004494 <_malloc_r+0x2c>
 80044fa:	1cc4      	adds	r4, r0, #3
 80044fc:	f024 0403 	bic.w	r4, r4, #3
 8004500:	42a0      	cmp	r0, r4
 8004502:	d0e3      	beq.n	80044cc <_malloc_r+0x64>
 8004504:	1a21      	subs	r1, r4, r0
 8004506:	4630      	mov	r0, r6
 8004508:	f000 faf6 	bl	8004af8 <_sbrk_r>
 800450c:	3001      	adds	r0, #1
 800450e:	d1dd      	bne.n	80044cc <_malloc_r+0x64>
 8004510:	e7cf      	b.n	80044b2 <_malloc_r+0x4a>
 8004512:	bf00      	nop
 8004514:	200000e8 	.word	0x200000e8
 8004518:	200000ec 	.word	0x200000ec

0800451c <__sfputc_r>:
 800451c:	6893      	ldr	r3, [r2, #8]
 800451e:	b410      	push	{r4}
 8004520:	3b01      	subs	r3, #1
 8004522:	2b00      	cmp	r3, #0
 8004524:	6093      	str	r3, [r2, #8]
 8004526:	da07      	bge.n	8004538 <__sfputc_r+0x1c>
 8004528:	6994      	ldr	r4, [r2, #24]
 800452a:	42a3      	cmp	r3, r4
 800452c:	db01      	blt.n	8004532 <__sfputc_r+0x16>
 800452e:	290a      	cmp	r1, #10
 8004530:	d102      	bne.n	8004538 <__sfputc_r+0x1c>
 8004532:	bc10      	pop	{r4}
 8004534:	f000 bb34 	b.w	8004ba0 <__swbuf_r>
 8004538:	6813      	ldr	r3, [r2, #0]
 800453a:	1c58      	adds	r0, r3, #1
 800453c:	6010      	str	r0, [r2, #0]
 800453e:	7019      	strb	r1, [r3, #0]
 8004540:	4608      	mov	r0, r1
 8004542:	bc10      	pop	{r4}
 8004544:	4770      	bx	lr

08004546 <__sfputs_r>:
 8004546:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004548:	4606      	mov	r6, r0
 800454a:	460f      	mov	r7, r1
 800454c:	4614      	mov	r4, r2
 800454e:	18d5      	adds	r5, r2, r3
 8004550:	42ac      	cmp	r4, r5
 8004552:	d101      	bne.n	8004558 <__sfputs_r+0x12>
 8004554:	2000      	movs	r0, #0
 8004556:	e007      	b.n	8004568 <__sfputs_r+0x22>
 8004558:	463a      	mov	r2, r7
 800455a:	4630      	mov	r0, r6
 800455c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004560:	f7ff ffdc 	bl	800451c <__sfputc_r>
 8004564:	1c43      	adds	r3, r0, #1
 8004566:	d1f3      	bne.n	8004550 <__sfputs_r+0xa>
 8004568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800456c <_vfiprintf_r>:
 800456c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004570:	460d      	mov	r5, r1
 8004572:	4614      	mov	r4, r2
 8004574:	4698      	mov	r8, r3
 8004576:	4606      	mov	r6, r0
 8004578:	b09d      	sub	sp, #116	; 0x74
 800457a:	b118      	cbz	r0, 8004584 <_vfiprintf_r+0x18>
 800457c:	6983      	ldr	r3, [r0, #24]
 800457e:	b90b      	cbnz	r3, 8004584 <_vfiprintf_r+0x18>
 8004580:	f7ff fed2 	bl	8004328 <__sinit>
 8004584:	4b89      	ldr	r3, [pc, #548]	; (80047ac <_vfiprintf_r+0x240>)
 8004586:	429d      	cmp	r5, r3
 8004588:	d11b      	bne.n	80045c2 <_vfiprintf_r+0x56>
 800458a:	6875      	ldr	r5, [r6, #4]
 800458c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800458e:	07d9      	lsls	r1, r3, #31
 8004590:	d405      	bmi.n	800459e <_vfiprintf_r+0x32>
 8004592:	89ab      	ldrh	r3, [r5, #12]
 8004594:	059a      	lsls	r2, r3, #22
 8004596:	d402      	bmi.n	800459e <_vfiprintf_r+0x32>
 8004598:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800459a:	f7ff ff63 	bl	8004464 <__retarget_lock_acquire_recursive>
 800459e:	89ab      	ldrh	r3, [r5, #12]
 80045a0:	071b      	lsls	r3, r3, #28
 80045a2:	d501      	bpl.n	80045a8 <_vfiprintf_r+0x3c>
 80045a4:	692b      	ldr	r3, [r5, #16]
 80045a6:	b9eb      	cbnz	r3, 80045e4 <_vfiprintf_r+0x78>
 80045a8:	4629      	mov	r1, r5
 80045aa:	4630      	mov	r0, r6
 80045ac:	f000 fb5c 	bl	8004c68 <__swsetup_r>
 80045b0:	b1c0      	cbz	r0, 80045e4 <_vfiprintf_r+0x78>
 80045b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80045b4:	07dc      	lsls	r4, r3, #31
 80045b6:	d50e      	bpl.n	80045d6 <_vfiprintf_r+0x6a>
 80045b8:	f04f 30ff 	mov.w	r0, #4294967295
 80045bc:	b01d      	add	sp, #116	; 0x74
 80045be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045c2:	4b7b      	ldr	r3, [pc, #492]	; (80047b0 <_vfiprintf_r+0x244>)
 80045c4:	429d      	cmp	r5, r3
 80045c6:	d101      	bne.n	80045cc <_vfiprintf_r+0x60>
 80045c8:	68b5      	ldr	r5, [r6, #8]
 80045ca:	e7df      	b.n	800458c <_vfiprintf_r+0x20>
 80045cc:	4b79      	ldr	r3, [pc, #484]	; (80047b4 <_vfiprintf_r+0x248>)
 80045ce:	429d      	cmp	r5, r3
 80045d0:	bf08      	it	eq
 80045d2:	68f5      	ldreq	r5, [r6, #12]
 80045d4:	e7da      	b.n	800458c <_vfiprintf_r+0x20>
 80045d6:	89ab      	ldrh	r3, [r5, #12]
 80045d8:	0598      	lsls	r0, r3, #22
 80045da:	d4ed      	bmi.n	80045b8 <_vfiprintf_r+0x4c>
 80045dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80045de:	f7ff ff42 	bl	8004466 <__retarget_lock_release_recursive>
 80045e2:	e7e9      	b.n	80045b8 <_vfiprintf_r+0x4c>
 80045e4:	2300      	movs	r3, #0
 80045e6:	9309      	str	r3, [sp, #36]	; 0x24
 80045e8:	2320      	movs	r3, #32
 80045ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80045ee:	2330      	movs	r3, #48	; 0x30
 80045f0:	f04f 0901 	mov.w	r9, #1
 80045f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80045f8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80047b8 <_vfiprintf_r+0x24c>
 80045fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004600:	4623      	mov	r3, r4
 8004602:	469a      	mov	sl, r3
 8004604:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004608:	b10a      	cbz	r2, 800460e <_vfiprintf_r+0xa2>
 800460a:	2a25      	cmp	r2, #37	; 0x25
 800460c:	d1f9      	bne.n	8004602 <_vfiprintf_r+0x96>
 800460e:	ebba 0b04 	subs.w	fp, sl, r4
 8004612:	d00b      	beq.n	800462c <_vfiprintf_r+0xc0>
 8004614:	465b      	mov	r3, fp
 8004616:	4622      	mov	r2, r4
 8004618:	4629      	mov	r1, r5
 800461a:	4630      	mov	r0, r6
 800461c:	f7ff ff93 	bl	8004546 <__sfputs_r>
 8004620:	3001      	adds	r0, #1
 8004622:	f000 80aa 	beq.w	800477a <_vfiprintf_r+0x20e>
 8004626:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004628:	445a      	add	r2, fp
 800462a:	9209      	str	r2, [sp, #36]	; 0x24
 800462c:	f89a 3000 	ldrb.w	r3, [sl]
 8004630:	2b00      	cmp	r3, #0
 8004632:	f000 80a2 	beq.w	800477a <_vfiprintf_r+0x20e>
 8004636:	2300      	movs	r3, #0
 8004638:	f04f 32ff 	mov.w	r2, #4294967295
 800463c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004640:	f10a 0a01 	add.w	sl, sl, #1
 8004644:	9304      	str	r3, [sp, #16]
 8004646:	9307      	str	r3, [sp, #28]
 8004648:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800464c:	931a      	str	r3, [sp, #104]	; 0x68
 800464e:	4654      	mov	r4, sl
 8004650:	2205      	movs	r2, #5
 8004652:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004656:	4858      	ldr	r0, [pc, #352]	; (80047b8 <_vfiprintf_r+0x24c>)
 8004658:	f000 fcbc 	bl	8004fd4 <memchr>
 800465c:	9a04      	ldr	r2, [sp, #16]
 800465e:	b9d8      	cbnz	r0, 8004698 <_vfiprintf_r+0x12c>
 8004660:	06d1      	lsls	r1, r2, #27
 8004662:	bf44      	itt	mi
 8004664:	2320      	movmi	r3, #32
 8004666:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800466a:	0713      	lsls	r3, r2, #28
 800466c:	bf44      	itt	mi
 800466e:	232b      	movmi	r3, #43	; 0x2b
 8004670:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004674:	f89a 3000 	ldrb.w	r3, [sl]
 8004678:	2b2a      	cmp	r3, #42	; 0x2a
 800467a:	d015      	beq.n	80046a8 <_vfiprintf_r+0x13c>
 800467c:	4654      	mov	r4, sl
 800467e:	2000      	movs	r0, #0
 8004680:	f04f 0c0a 	mov.w	ip, #10
 8004684:	9a07      	ldr	r2, [sp, #28]
 8004686:	4621      	mov	r1, r4
 8004688:	f811 3b01 	ldrb.w	r3, [r1], #1
 800468c:	3b30      	subs	r3, #48	; 0x30
 800468e:	2b09      	cmp	r3, #9
 8004690:	d94e      	bls.n	8004730 <_vfiprintf_r+0x1c4>
 8004692:	b1b0      	cbz	r0, 80046c2 <_vfiprintf_r+0x156>
 8004694:	9207      	str	r2, [sp, #28]
 8004696:	e014      	b.n	80046c2 <_vfiprintf_r+0x156>
 8004698:	eba0 0308 	sub.w	r3, r0, r8
 800469c:	fa09 f303 	lsl.w	r3, r9, r3
 80046a0:	4313      	orrs	r3, r2
 80046a2:	46a2      	mov	sl, r4
 80046a4:	9304      	str	r3, [sp, #16]
 80046a6:	e7d2      	b.n	800464e <_vfiprintf_r+0xe2>
 80046a8:	9b03      	ldr	r3, [sp, #12]
 80046aa:	1d19      	adds	r1, r3, #4
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	9103      	str	r1, [sp, #12]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	bfbb      	ittet	lt
 80046b4:	425b      	neglt	r3, r3
 80046b6:	f042 0202 	orrlt.w	r2, r2, #2
 80046ba:	9307      	strge	r3, [sp, #28]
 80046bc:	9307      	strlt	r3, [sp, #28]
 80046be:	bfb8      	it	lt
 80046c0:	9204      	strlt	r2, [sp, #16]
 80046c2:	7823      	ldrb	r3, [r4, #0]
 80046c4:	2b2e      	cmp	r3, #46	; 0x2e
 80046c6:	d10c      	bne.n	80046e2 <_vfiprintf_r+0x176>
 80046c8:	7863      	ldrb	r3, [r4, #1]
 80046ca:	2b2a      	cmp	r3, #42	; 0x2a
 80046cc:	d135      	bne.n	800473a <_vfiprintf_r+0x1ce>
 80046ce:	9b03      	ldr	r3, [sp, #12]
 80046d0:	3402      	adds	r4, #2
 80046d2:	1d1a      	adds	r2, r3, #4
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	9203      	str	r2, [sp, #12]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	bfb8      	it	lt
 80046dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80046e0:	9305      	str	r3, [sp, #20]
 80046e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80047c8 <_vfiprintf_r+0x25c>
 80046e6:	2203      	movs	r2, #3
 80046e8:	4650      	mov	r0, sl
 80046ea:	7821      	ldrb	r1, [r4, #0]
 80046ec:	f000 fc72 	bl	8004fd4 <memchr>
 80046f0:	b140      	cbz	r0, 8004704 <_vfiprintf_r+0x198>
 80046f2:	2340      	movs	r3, #64	; 0x40
 80046f4:	eba0 000a 	sub.w	r0, r0, sl
 80046f8:	fa03 f000 	lsl.w	r0, r3, r0
 80046fc:	9b04      	ldr	r3, [sp, #16]
 80046fe:	3401      	adds	r4, #1
 8004700:	4303      	orrs	r3, r0
 8004702:	9304      	str	r3, [sp, #16]
 8004704:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004708:	2206      	movs	r2, #6
 800470a:	482c      	ldr	r0, [pc, #176]	; (80047bc <_vfiprintf_r+0x250>)
 800470c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004710:	f000 fc60 	bl	8004fd4 <memchr>
 8004714:	2800      	cmp	r0, #0
 8004716:	d03f      	beq.n	8004798 <_vfiprintf_r+0x22c>
 8004718:	4b29      	ldr	r3, [pc, #164]	; (80047c0 <_vfiprintf_r+0x254>)
 800471a:	bb1b      	cbnz	r3, 8004764 <_vfiprintf_r+0x1f8>
 800471c:	9b03      	ldr	r3, [sp, #12]
 800471e:	3307      	adds	r3, #7
 8004720:	f023 0307 	bic.w	r3, r3, #7
 8004724:	3308      	adds	r3, #8
 8004726:	9303      	str	r3, [sp, #12]
 8004728:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800472a:	443b      	add	r3, r7
 800472c:	9309      	str	r3, [sp, #36]	; 0x24
 800472e:	e767      	b.n	8004600 <_vfiprintf_r+0x94>
 8004730:	460c      	mov	r4, r1
 8004732:	2001      	movs	r0, #1
 8004734:	fb0c 3202 	mla	r2, ip, r2, r3
 8004738:	e7a5      	b.n	8004686 <_vfiprintf_r+0x11a>
 800473a:	2300      	movs	r3, #0
 800473c:	f04f 0c0a 	mov.w	ip, #10
 8004740:	4619      	mov	r1, r3
 8004742:	3401      	adds	r4, #1
 8004744:	9305      	str	r3, [sp, #20]
 8004746:	4620      	mov	r0, r4
 8004748:	f810 2b01 	ldrb.w	r2, [r0], #1
 800474c:	3a30      	subs	r2, #48	; 0x30
 800474e:	2a09      	cmp	r2, #9
 8004750:	d903      	bls.n	800475a <_vfiprintf_r+0x1ee>
 8004752:	2b00      	cmp	r3, #0
 8004754:	d0c5      	beq.n	80046e2 <_vfiprintf_r+0x176>
 8004756:	9105      	str	r1, [sp, #20]
 8004758:	e7c3      	b.n	80046e2 <_vfiprintf_r+0x176>
 800475a:	4604      	mov	r4, r0
 800475c:	2301      	movs	r3, #1
 800475e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004762:	e7f0      	b.n	8004746 <_vfiprintf_r+0x1da>
 8004764:	ab03      	add	r3, sp, #12
 8004766:	9300      	str	r3, [sp, #0]
 8004768:	462a      	mov	r2, r5
 800476a:	4630      	mov	r0, r6
 800476c:	4b15      	ldr	r3, [pc, #84]	; (80047c4 <_vfiprintf_r+0x258>)
 800476e:	a904      	add	r1, sp, #16
 8004770:	f3af 8000 	nop.w
 8004774:	4607      	mov	r7, r0
 8004776:	1c78      	adds	r0, r7, #1
 8004778:	d1d6      	bne.n	8004728 <_vfiprintf_r+0x1bc>
 800477a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800477c:	07d9      	lsls	r1, r3, #31
 800477e:	d405      	bmi.n	800478c <_vfiprintf_r+0x220>
 8004780:	89ab      	ldrh	r3, [r5, #12]
 8004782:	059a      	lsls	r2, r3, #22
 8004784:	d402      	bmi.n	800478c <_vfiprintf_r+0x220>
 8004786:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004788:	f7ff fe6d 	bl	8004466 <__retarget_lock_release_recursive>
 800478c:	89ab      	ldrh	r3, [r5, #12]
 800478e:	065b      	lsls	r3, r3, #25
 8004790:	f53f af12 	bmi.w	80045b8 <_vfiprintf_r+0x4c>
 8004794:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004796:	e711      	b.n	80045bc <_vfiprintf_r+0x50>
 8004798:	ab03      	add	r3, sp, #12
 800479a:	9300      	str	r3, [sp, #0]
 800479c:	462a      	mov	r2, r5
 800479e:	4630      	mov	r0, r6
 80047a0:	4b08      	ldr	r3, [pc, #32]	; (80047c4 <_vfiprintf_r+0x258>)
 80047a2:	a904      	add	r1, sp, #16
 80047a4:	f000 f882 	bl	80048ac <_printf_i>
 80047a8:	e7e4      	b.n	8004774 <_vfiprintf_r+0x208>
 80047aa:	bf00      	nop
 80047ac:	08005228 	.word	0x08005228
 80047b0:	08005248 	.word	0x08005248
 80047b4:	08005208 	.word	0x08005208
 80047b8:	08005268 	.word	0x08005268
 80047bc:	08005272 	.word	0x08005272
 80047c0:	00000000 	.word	0x00000000
 80047c4:	08004547 	.word	0x08004547
 80047c8:	0800526e 	.word	0x0800526e

080047cc <_printf_common>:
 80047cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047d0:	4616      	mov	r6, r2
 80047d2:	4699      	mov	r9, r3
 80047d4:	688a      	ldr	r2, [r1, #8]
 80047d6:	690b      	ldr	r3, [r1, #16]
 80047d8:	4607      	mov	r7, r0
 80047da:	4293      	cmp	r3, r2
 80047dc:	bfb8      	it	lt
 80047de:	4613      	movlt	r3, r2
 80047e0:	6033      	str	r3, [r6, #0]
 80047e2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80047e6:	460c      	mov	r4, r1
 80047e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047ec:	b10a      	cbz	r2, 80047f2 <_printf_common+0x26>
 80047ee:	3301      	adds	r3, #1
 80047f0:	6033      	str	r3, [r6, #0]
 80047f2:	6823      	ldr	r3, [r4, #0]
 80047f4:	0699      	lsls	r1, r3, #26
 80047f6:	bf42      	ittt	mi
 80047f8:	6833      	ldrmi	r3, [r6, #0]
 80047fa:	3302      	addmi	r3, #2
 80047fc:	6033      	strmi	r3, [r6, #0]
 80047fe:	6825      	ldr	r5, [r4, #0]
 8004800:	f015 0506 	ands.w	r5, r5, #6
 8004804:	d106      	bne.n	8004814 <_printf_common+0x48>
 8004806:	f104 0a19 	add.w	sl, r4, #25
 800480a:	68e3      	ldr	r3, [r4, #12]
 800480c:	6832      	ldr	r2, [r6, #0]
 800480e:	1a9b      	subs	r3, r3, r2
 8004810:	42ab      	cmp	r3, r5
 8004812:	dc28      	bgt.n	8004866 <_printf_common+0x9a>
 8004814:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004818:	1e13      	subs	r3, r2, #0
 800481a:	6822      	ldr	r2, [r4, #0]
 800481c:	bf18      	it	ne
 800481e:	2301      	movne	r3, #1
 8004820:	0692      	lsls	r2, r2, #26
 8004822:	d42d      	bmi.n	8004880 <_printf_common+0xb4>
 8004824:	4649      	mov	r1, r9
 8004826:	4638      	mov	r0, r7
 8004828:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800482c:	47c0      	blx	r8
 800482e:	3001      	adds	r0, #1
 8004830:	d020      	beq.n	8004874 <_printf_common+0xa8>
 8004832:	6823      	ldr	r3, [r4, #0]
 8004834:	68e5      	ldr	r5, [r4, #12]
 8004836:	f003 0306 	and.w	r3, r3, #6
 800483a:	2b04      	cmp	r3, #4
 800483c:	bf18      	it	ne
 800483e:	2500      	movne	r5, #0
 8004840:	6832      	ldr	r2, [r6, #0]
 8004842:	f04f 0600 	mov.w	r6, #0
 8004846:	68a3      	ldr	r3, [r4, #8]
 8004848:	bf08      	it	eq
 800484a:	1aad      	subeq	r5, r5, r2
 800484c:	6922      	ldr	r2, [r4, #16]
 800484e:	bf08      	it	eq
 8004850:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004854:	4293      	cmp	r3, r2
 8004856:	bfc4      	itt	gt
 8004858:	1a9b      	subgt	r3, r3, r2
 800485a:	18ed      	addgt	r5, r5, r3
 800485c:	341a      	adds	r4, #26
 800485e:	42b5      	cmp	r5, r6
 8004860:	d11a      	bne.n	8004898 <_printf_common+0xcc>
 8004862:	2000      	movs	r0, #0
 8004864:	e008      	b.n	8004878 <_printf_common+0xac>
 8004866:	2301      	movs	r3, #1
 8004868:	4652      	mov	r2, sl
 800486a:	4649      	mov	r1, r9
 800486c:	4638      	mov	r0, r7
 800486e:	47c0      	blx	r8
 8004870:	3001      	adds	r0, #1
 8004872:	d103      	bne.n	800487c <_printf_common+0xb0>
 8004874:	f04f 30ff 	mov.w	r0, #4294967295
 8004878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800487c:	3501      	adds	r5, #1
 800487e:	e7c4      	b.n	800480a <_printf_common+0x3e>
 8004880:	2030      	movs	r0, #48	; 0x30
 8004882:	18e1      	adds	r1, r4, r3
 8004884:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004888:	1c5a      	adds	r2, r3, #1
 800488a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800488e:	4422      	add	r2, r4
 8004890:	3302      	adds	r3, #2
 8004892:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004896:	e7c5      	b.n	8004824 <_printf_common+0x58>
 8004898:	2301      	movs	r3, #1
 800489a:	4622      	mov	r2, r4
 800489c:	4649      	mov	r1, r9
 800489e:	4638      	mov	r0, r7
 80048a0:	47c0      	blx	r8
 80048a2:	3001      	adds	r0, #1
 80048a4:	d0e6      	beq.n	8004874 <_printf_common+0xa8>
 80048a6:	3601      	adds	r6, #1
 80048a8:	e7d9      	b.n	800485e <_printf_common+0x92>
	...

080048ac <_printf_i>:
 80048ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048b0:	460c      	mov	r4, r1
 80048b2:	7e27      	ldrb	r7, [r4, #24]
 80048b4:	4691      	mov	r9, r2
 80048b6:	2f78      	cmp	r7, #120	; 0x78
 80048b8:	4680      	mov	r8, r0
 80048ba:	469a      	mov	sl, r3
 80048bc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80048be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048c2:	d807      	bhi.n	80048d4 <_printf_i+0x28>
 80048c4:	2f62      	cmp	r7, #98	; 0x62
 80048c6:	d80a      	bhi.n	80048de <_printf_i+0x32>
 80048c8:	2f00      	cmp	r7, #0
 80048ca:	f000 80d9 	beq.w	8004a80 <_printf_i+0x1d4>
 80048ce:	2f58      	cmp	r7, #88	; 0x58
 80048d0:	f000 80a4 	beq.w	8004a1c <_printf_i+0x170>
 80048d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80048d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80048dc:	e03a      	b.n	8004954 <_printf_i+0xa8>
 80048de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80048e2:	2b15      	cmp	r3, #21
 80048e4:	d8f6      	bhi.n	80048d4 <_printf_i+0x28>
 80048e6:	a001      	add	r0, pc, #4	; (adr r0, 80048ec <_printf_i+0x40>)
 80048e8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80048ec:	08004945 	.word	0x08004945
 80048f0:	08004959 	.word	0x08004959
 80048f4:	080048d5 	.word	0x080048d5
 80048f8:	080048d5 	.word	0x080048d5
 80048fc:	080048d5 	.word	0x080048d5
 8004900:	080048d5 	.word	0x080048d5
 8004904:	08004959 	.word	0x08004959
 8004908:	080048d5 	.word	0x080048d5
 800490c:	080048d5 	.word	0x080048d5
 8004910:	080048d5 	.word	0x080048d5
 8004914:	080048d5 	.word	0x080048d5
 8004918:	08004a67 	.word	0x08004a67
 800491c:	08004989 	.word	0x08004989
 8004920:	08004a49 	.word	0x08004a49
 8004924:	080048d5 	.word	0x080048d5
 8004928:	080048d5 	.word	0x080048d5
 800492c:	08004a89 	.word	0x08004a89
 8004930:	080048d5 	.word	0x080048d5
 8004934:	08004989 	.word	0x08004989
 8004938:	080048d5 	.word	0x080048d5
 800493c:	080048d5 	.word	0x080048d5
 8004940:	08004a51 	.word	0x08004a51
 8004944:	680b      	ldr	r3, [r1, #0]
 8004946:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800494a:	1d1a      	adds	r2, r3, #4
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	600a      	str	r2, [r1, #0]
 8004950:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004954:	2301      	movs	r3, #1
 8004956:	e0a4      	b.n	8004aa2 <_printf_i+0x1f6>
 8004958:	6825      	ldr	r5, [r4, #0]
 800495a:	6808      	ldr	r0, [r1, #0]
 800495c:	062e      	lsls	r6, r5, #24
 800495e:	f100 0304 	add.w	r3, r0, #4
 8004962:	d50a      	bpl.n	800497a <_printf_i+0xce>
 8004964:	6805      	ldr	r5, [r0, #0]
 8004966:	600b      	str	r3, [r1, #0]
 8004968:	2d00      	cmp	r5, #0
 800496a:	da03      	bge.n	8004974 <_printf_i+0xc8>
 800496c:	232d      	movs	r3, #45	; 0x2d
 800496e:	426d      	negs	r5, r5
 8004970:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004974:	230a      	movs	r3, #10
 8004976:	485e      	ldr	r0, [pc, #376]	; (8004af0 <_printf_i+0x244>)
 8004978:	e019      	b.n	80049ae <_printf_i+0x102>
 800497a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800497e:	6805      	ldr	r5, [r0, #0]
 8004980:	600b      	str	r3, [r1, #0]
 8004982:	bf18      	it	ne
 8004984:	b22d      	sxthne	r5, r5
 8004986:	e7ef      	b.n	8004968 <_printf_i+0xbc>
 8004988:	680b      	ldr	r3, [r1, #0]
 800498a:	6825      	ldr	r5, [r4, #0]
 800498c:	1d18      	adds	r0, r3, #4
 800498e:	6008      	str	r0, [r1, #0]
 8004990:	0628      	lsls	r0, r5, #24
 8004992:	d501      	bpl.n	8004998 <_printf_i+0xec>
 8004994:	681d      	ldr	r5, [r3, #0]
 8004996:	e002      	b.n	800499e <_printf_i+0xf2>
 8004998:	0669      	lsls	r1, r5, #25
 800499a:	d5fb      	bpl.n	8004994 <_printf_i+0xe8>
 800499c:	881d      	ldrh	r5, [r3, #0]
 800499e:	2f6f      	cmp	r7, #111	; 0x6f
 80049a0:	bf0c      	ite	eq
 80049a2:	2308      	moveq	r3, #8
 80049a4:	230a      	movne	r3, #10
 80049a6:	4852      	ldr	r0, [pc, #328]	; (8004af0 <_printf_i+0x244>)
 80049a8:	2100      	movs	r1, #0
 80049aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80049ae:	6866      	ldr	r6, [r4, #4]
 80049b0:	2e00      	cmp	r6, #0
 80049b2:	bfa8      	it	ge
 80049b4:	6821      	ldrge	r1, [r4, #0]
 80049b6:	60a6      	str	r6, [r4, #8]
 80049b8:	bfa4      	itt	ge
 80049ba:	f021 0104 	bicge.w	r1, r1, #4
 80049be:	6021      	strge	r1, [r4, #0]
 80049c0:	b90d      	cbnz	r5, 80049c6 <_printf_i+0x11a>
 80049c2:	2e00      	cmp	r6, #0
 80049c4:	d04d      	beq.n	8004a62 <_printf_i+0x1b6>
 80049c6:	4616      	mov	r6, r2
 80049c8:	fbb5 f1f3 	udiv	r1, r5, r3
 80049cc:	fb03 5711 	mls	r7, r3, r1, r5
 80049d0:	5dc7      	ldrb	r7, [r0, r7]
 80049d2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80049d6:	462f      	mov	r7, r5
 80049d8:	42bb      	cmp	r3, r7
 80049da:	460d      	mov	r5, r1
 80049dc:	d9f4      	bls.n	80049c8 <_printf_i+0x11c>
 80049de:	2b08      	cmp	r3, #8
 80049e0:	d10b      	bne.n	80049fa <_printf_i+0x14e>
 80049e2:	6823      	ldr	r3, [r4, #0]
 80049e4:	07df      	lsls	r7, r3, #31
 80049e6:	d508      	bpl.n	80049fa <_printf_i+0x14e>
 80049e8:	6923      	ldr	r3, [r4, #16]
 80049ea:	6861      	ldr	r1, [r4, #4]
 80049ec:	4299      	cmp	r1, r3
 80049ee:	bfde      	ittt	le
 80049f0:	2330      	movle	r3, #48	; 0x30
 80049f2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80049f6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80049fa:	1b92      	subs	r2, r2, r6
 80049fc:	6122      	str	r2, [r4, #16]
 80049fe:	464b      	mov	r3, r9
 8004a00:	4621      	mov	r1, r4
 8004a02:	4640      	mov	r0, r8
 8004a04:	f8cd a000 	str.w	sl, [sp]
 8004a08:	aa03      	add	r2, sp, #12
 8004a0a:	f7ff fedf 	bl	80047cc <_printf_common>
 8004a0e:	3001      	adds	r0, #1
 8004a10:	d14c      	bne.n	8004aac <_printf_i+0x200>
 8004a12:	f04f 30ff 	mov.w	r0, #4294967295
 8004a16:	b004      	add	sp, #16
 8004a18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a1c:	4834      	ldr	r0, [pc, #208]	; (8004af0 <_printf_i+0x244>)
 8004a1e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004a22:	680e      	ldr	r6, [r1, #0]
 8004a24:	6823      	ldr	r3, [r4, #0]
 8004a26:	f856 5b04 	ldr.w	r5, [r6], #4
 8004a2a:	061f      	lsls	r7, r3, #24
 8004a2c:	600e      	str	r6, [r1, #0]
 8004a2e:	d514      	bpl.n	8004a5a <_printf_i+0x1ae>
 8004a30:	07d9      	lsls	r1, r3, #31
 8004a32:	bf44      	itt	mi
 8004a34:	f043 0320 	orrmi.w	r3, r3, #32
 8004a38:	6023      	strmi	r3, [r4, #0]
 8004a3a:	b91d      	cbnz	r5, 8004a44 <_printf_i+0x198>
 8004a3c:	6823      	ldr	r3, [r4, #0]
 8004a3e:	f023 0320 	bic.w	r3, r3, #32
 8004a42:	6023      	str	r3, [r4, #0]
 8004a44:	2310      	movs	r3, #16
 8004a46:	e7af      	b.n	80049a8 <_printf_i+0xfc>
 8004a48:	6823      	ldr	r3, [r4, #0]
 8004a4a:	f043 0320 	orr.w	r3, r3, #32
 8004a4e:	6023      	str	r3, [r4, #0]
 8004a50:	2378      	movs	r3, #120	; 0x78
 8004a52:	4828      	ldr	r0, [pc, #160]	; (8004af4 <_printf_i+0x248>)
 8004a54:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a58:	e7e3      	b.n	8004a22 <_printf_i+0x176>
 8004a5a:	065e      	lsls	r6, r3, #25
 8004a5c:	bf48      	it	mi
 8004a5e:	b2ad      	uxthmi	r5, r5
 8004a60:	e7e6      	b.n	8004a30 <_printf_i+0x184>
 8004a62:	4616      	mov	r6, r2
 8004a64:	e7bb      	b.n	80049de <_printf_i+0x132>
 8004a66:	680b      	ldr	r3, [r1, #0]
 8004a68:	6826      	ldr	r6, [r4, #0]
 8004a6a:	1d1d      	adds	r5, r3, #4
 8004a6c:	6960      	ldr	r0, [r4, #20]
 8004a6e:	600d      	str	r5, [r1, #0]
 8004a70:	0635      	lsls	r5, r6, #24
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	d501      	bpl.n	8004a7a <_printf_i+0x1ce>
 8004a76:	6018      	str	r0, [r3, #0]
 8004a78:	e002      	b.n	8004a80 <_printf_i+0x1d4>
 8004a7a:	0671      	lsls	r1, r6, #25
 8004a7c:	d5fb      	bpl.n	8004a76 <_printf_i+0x1ca>
 8004a7e:	8018      	strh	r0, [r3, #0]
 8004a80:	2300      	movs	r3, #0
 8004a82:	4616      	mov	r6, r2
 8004a84:	6123      	str	r3, [r4, #16]
 8004a86:	e7ba      	b.n	80049fe <_printf_i+0x152>
 8004a88:	680b      	ldr	r3, [r1, #0]
 8004a8a:	1d1a      	adds	r2, r3, #4
 8004a8c:	600a      	str	r2, [r1, #0]
 8004a8e:	681e      	ldr	r6, [r3, #0]
 8004a90:	2100      	movs	r1, #0
 8004a92:	4630      	mov	r0, r6
 8004a94:	6862      	ldr	r2, [r4, #4]
 8004a96:	f000 fa9d 	bl	8004fd4 <memchr>
 8004a9a:	b108      	cbz	r0, 8004aa0 <_printf_i+0x1f4>
 8004a9c:	1b80      	subs	r0, r0, r6
 8004a9e:	6060      	str	r0, [r4, #4]
 8004aa0:	6863      	ldr	r3, [r4, #4]
 8004aa2:	6123      	str	r3, [r4, #16]
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004aaa:	e7a8      	b.n	80049fe <_printf_i+0x152>
 8004aac:	4632      	mov	r2, r6
 8004aae:	4649      	mov	r1, r9
 8004ab0:	4640      	mov	r0, r8
 8004ab2:	6923      	ldr	r3, [r4, #16]
 8004ab4:	47d0      	blx	sl
 8004ab6:	3001      	adds	r0, #1
 8004ab8:	d0ab      	beq.n	8004a12 <_printf_i+0x166>
 8004aba:	6823      	ldr	r3, [r4, #0]
 8004abc:	079b      	lsls	r3, r3, #30
 8004abe:	d413      	bmi.n	8004ae8 <_printf_i+0x23c>
 8004ac0:	68e0      	ldr	r0, [r4, #12]
 8004ac2:	9b03      	ldr	r3, [sp, #12]
 8004ac4:	4298      	cmp	r0, r3
 8004ac6:	bfb8      	it	lt
 8004ac8:	4618      	movlt	r0, r3
 8004aca:	e7a4      	b.n	8004a16 <_printf_i+0x16a>
 8004acc:	2301      	movs	r3, #1
 8004ace:	4632      	mov	r2, r6
 8004ad0:	4649      	mov	r1, r9
 8004ad2:	4640      	mov	r0, r8
 8004ad4:	47d0      	blx	sl
 8004ad6:	3001      	adds	r0, #1
 8004ad8:	d09b      	beq.n	8004a12 <_printf_i+0x166>
 8004ada:	3501      	adds	r5, #1
 8004adc:	68e3      	ldr	r3, [r4, #12]
 8004ade:	9903      	ldr	r1, [sp, #12]
 8004ae0:	1a5b      	subs	r3, r3, r1
 8004ae2:	42ab      	cmp	r3, r5
 8004ae4:	dcf2      	bgt.n	8004acc <_printf_i+0x220>
 8004ae6:	e7eb      	b.n	8004ac0 <_printf_i+0x214>
 8004ae8:	2500      	movs	r5, #0
 8004aea:	f104 0619 	add.w	r6, r4, #25
 8004aee:	e7f5      	b.n	8004adc <_printf_i+0x230>
 8004af0:	08005279 	.word	0x08005279
 8004af4:	0800528a 	.word	0x0800528a

08004af8 <_sbrk_r>:
 8004af8:	b538      	push	{r3, r4, r5, lr}
 8004afa:	2300      	movs	r3, #0
 8004afc:	4d05      	ldr	r5, [pc, #20]	; (8004b14 <_sbrk_r+0x1c>)
 8004afe:	4604      	mov	r4, r0
 8004b00:	4608      	mov	r0, r1
 8004b02:	602b      	str	r3, [r5, #0]
 8004b04:	f7fc fe4a 	bl	800179c <_sbrk>
 8004b08:	1c43      	adds	r3, r0, #1
 8004b0a:	d102      	bne.n	8004b12 <_sbrk_r+0x1a>
 8004b0c:	682b      	ldr	r3, [r5, #0]
 8004b0e:	b103      	cbz	r3, 8004b12 <_sbrk_r+0x1a>
 8004b10:	6023      	str	r3, [r4, #0]
 8004b12:	bd38      	pop	{r3, r4, r5, pc}
 8004b14:	200001a0 	.word	0x200001a0

08004b18 <__sread>:
 8004b18:	b510      	push	{r4, lr}
 8004b1a:	460c      	mov	r4, r1
 8004b1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b20:	f000 fabe 	bl	80050a0 <_read_r>
 8004b24:	2800      	cmp	r0, #0
 8004b26:	bfab      	itete	ge
 8004b28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004b2a:	89a3      	ldrhlt	r3, [r4, #12]
 8004b2c:	181b      	addge	r3, r3, r0
 8004b2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004b32:	bfac      	ite	ge
 8004b34:	6563      	strge	r3, [r4, #84]	; 0x54
 8004b36:	81a3      	strhlt	r3, [r4, #12]
 8004b38:	bd10      	pop	{r4, pc}

08004b3a <__swrite>:
 8004b3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b3e:	461f      	mov	r7, r3
 8004b40:	898b      	ldrh	r3, [r1, #12]
 8004b42:	4605      	mov	r5, r0
 8004b44:	05db      	lsls	r3, r3, #23
 8004b46:	460c      	mov	r4, r1
 8004b48:	4616      	mov	r6, r2
 8004b4a:	d505      	bpl.n	8004b58 <__swrite+0x1e>
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b54:	f000 f9c8 	bl	8004ee8 <_lseek_r>
 8004b58:	89a3      	ldrh	r3, [r4, #12]
 8004b5a:	4632      	mov	r2, r6
 8004b5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b60:	81a3      	strh	r3, [r4, #12]
 8004b62:	4628      	mov	r0, r5
 8004b64:	463b      	mov	r3, r7
 8004b66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b6e:	f000 b869 	b.w	8004c44 <_write_r>

08004b72 <__sseek>:
 8004b72:	b510      	push	{r4, lr}
 8004b74:	460c      	mov	r4, r1
 8004b76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b7a:	f000 f9b5 	bl	8004ee8 <_lseek_r>
 8004b7e:	1c43      	adds	r3, r0, #1
 8004b80:	89a3      	ldrh	r3, [r4, #12]
 8004b82:	bf15      	itete	ne
 8004b84:	6560      	strne	r0, [r4, #84]	; 0x54
 8004b86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004b8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004b8e:	81a3      	strheq	r3, [r4, #12]
 8004b90:	bf18      	it	ne
 8004b92:	81a3      	strhne	r3, [r4, #12]
 8004b94:	bd10      	pop	{r4, pc}

08004b96 <__sclose>:
 8004b96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b9a:	f000 b8d3 	b.w	8004d44 <_close_r>
	...

08004ba0 <__swbuf_r>:
 8004ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ba2:	460e      	mov	r6, r1
 8004ba4:	4614      	mov	r4, r2
 8004ba6:	4605      	mov	r5, r0
 8004ba8:	b118      	cbz	r0, 8004bb2 <__swbuf_r+0x12>
 8004baa:	6983      	ldr	r3, [r0, #24]
 8004bac:	b90b      	cbnz	r3, 8004bb2 <__swbuf_r+0x12>
 8004bae:	f7ff fbbb 	bl	8004328 <__sinit>
 8004bb2:	4b21      	ldr	r3, [pc, #132]	; (8004c38 <__swbuf_r+0x98>)
 8004bb4:	429c      	cmp	r4, r3
 8004bb6:	d12b      	bne.n	8004c10 <__swbuf_r+0x70>
 8004bb8:	686c      	ldr	r4, [r5, #4]
 8004bba:	69a3      	ldr	r3, [r4, #24]
 8004bbc:	60a3      	str	r3, [r4, #8]
 8004bbe:	89a3      	ldrh	r3, [r4, #12]
 8004bc0:	071a      	lsls	r2, r3, #28
 8004bc2:	d52f      	bpl.n	8004c24 <__swbuf_r+0x84>
 8004bc4:	6923      	ldr	r3, [r4, #16]
 8004bc6:	b36b      	cbz	r3, 8004c24 <__swbuf_r+0x84>
 8004bc8:	6923      	ldr	r3, [r4, #16]
 8004bca:	6820      	ldr	r0, [r4, #0]
 8004bcc:	b2f6      	uxtb	r6, r6
 8004bce:	1ac0      	subs	r0, r0, r3
 8004bd0:	6963      	ldr	r3, [r4, #20]
 8004bd2:	4637      	mov	r7, r6
 8004bd4:	4283      	cmp	r3, r0
 8004bd6:	dc04      	bgt.n	8004be2 <__swbuf_r+0x42>
 8004bd8:	4621      	mov	r1, r4
 8004bda:	4628      	mov	r0, r5
 8004bdc:	f000 f948 	bl	8004e70 <_fflush_r>
 8004be0:	bb30      	cbnz	r0, 8004c30 <__swbuf_r+0x90>
 8004be2:	68a3      	ldr	r3, [r4, #8]
 8004be4:	3001      	adds	r0, #1
 8004be6:	3b01      	subs	r3, #1
 8004be8:	60a3      	str	r3, [r4, #8]
 8004bea:	6823      	ldr	r3, [r4, #0]
 8004bec:	1c5a      	adds	r2, r3, #1
 8004bee:	6022      	str	r2, [r4, #0]
 8004bf0:	701e      	strb	r6, [r3, #0]
 8004bf2:	6963      	ldr	r3, [r4, #20]
 8004bf4:	4283      	cmp	r3, r0
 8004bf6:	d004      	beq.n	8004c02 <__swbuf_r+0x62>
 8004bf8:	89a3      	ldrh	r3, [r4, #12]
 8004bfa:	07db      	lsls	r3, r3, #31
 8004bfc:	d506      	bpl.n	8004c0c <__swbuf_r+0x6c>
 8004bfe:	2e0a      	cmp	r6, #10
 8004c00:	d104      	bne.n	8004c0c <__swbuf_r+0x6c>
 8004c02:	4621      	mov	r1, r4
 8004c04:	4628      	mov	r0, r5
 8004c06:	f000 f933 	bl	8004e70 <_fflush_r>
 8004c0a:	b988      	cbnz	r0, 8004c30 <__swbuf_r+0x90>
 8004c0c:	4638      	mov	r0, r7
 8004c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c10:	4b0a      	ldr	r3, [pc, #40]	; (8004c3c <__swbuf_r+0x9c>)
 8004c12:	429c      	cmp	r4, r3
 8004c14:	d101      	bne.n	8004c1a <__swbuf_r+0x7a>
 8004c16:	68ac      	ldr	r4, [r5, #8]
 8004c18:	e7cf      	b.n	8004bba <__swbuf_r+0x1a>
 8004c1a:	4b09      	ldr	r3, [pc, #36]	; (8004c40 <__swbuf_r+0xa0>)
 8004c1c:	429c      	cmp	r4, r3
 8004c1e:	bf08      	it	eq
 8004c20:	68ec      	ldreq	r4, [r5, #12]
 8004c22:	e7ca      	b.n	8004bba <__swbuf_r+0x1a>
 8004c24:	4621      	mov	r1, r4
 8004c26:	4628      	mov	r0, r5
 8004c28:	f000 f81e 	bl	8004c68 <__swsetup_r>
 8004c2c:	2800      	cmp	r0, #0
 8004c2e:	d0cb      	beq.n	8004bc8 <__swbuf_r+0x28>
 8004c30:	f04f 37ff 	mov.w	r7, #4294967295
 8004c34:	e7ea      	b.n	8004c0c <__swbuf_r+0x6c>
 8004c36:	bf00      	nop
 8004c38:	08005228 	.word	0x08005228
 8004c3c:	08005248 	.word	0x08005248
 8004c40:	08005208 	.word	0x08005208

08004c44 <_write_r>:
 8004c44:	b538      	push	{r3, r4, r5, lr}
 8004c46:	4604      	mov	r4, r0
 8004c48:	4608      	mov	r0, r1
 8004c4a:	4611      	mov	r1, r2
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	4d05      	ldr	r5, [pc, #20]	; (8004c64 <_write_r+0x20>)
 8004c50:	602a      	str	r2, [r5, #0]
 8004c52:	461a      	mov	r2, r3
 8004c54:	f7fc fe20 	bl	8001898 <_write>
 8004c58:	1c43      	adds	r3, r0, #1
 8004c5a:	d102      	bne.n	8004c62 <_write_r+0x1e>
 8004c5c:	682b      	ldr	r3, [r5, #0]
 8004c5e:	b103      	cbz	r3, 8004c62 <_write_r+0x1e>
 8004c60:	6023      	str	r3, [r4, #0]
 8004c62:	bd38      	pop	{r3, r4, r5, pc}
 8004c64:	200001a0 	.word	0x200001a0

08004c68 <__swsetup_r>:
 8004c68:	4b32      	ldr	r3, [pc, #200]	; (8004d34 <__swsetup_r+0xcc>)
 8004c6a:	b570      	push	{r4, r5, r6, lr}
 8004c6c:	681d      	ldr	r5, [r3, #0]
 8004c6e:	4606      	mov	r6, r0
 8004c70:	460c      	mov	r4, r1
 8004c72:	b125      	cbz	r5, 8004c7e <__swsetup_r+0x16>
 8004c74:	69ab      	ldr	r3, [r5, #24]
 8004c76:	b913      	cbnz	r3, 8004c7e <__swsetup_r+0x16>
 8004c78:	4628      	mov	r0, r5
 8004c7a:	f7ff fb55 	bl	8004328 <__sinit>
 8004c7e:	4b2e      	ldr	r3, [pc, #184]	; (8004d38 <__swsetup_r+0xd0>)
 8004c80:	429c      	cmp	r4, r3
 8004c82:	d10f      	bne.n	8004ca4 <__swsetup_r+0x3c>
 8004c84:	686c      	ldr	r4, [r5, #4]
 8004c86:	89a3      	ldrh	r3, [r4, #12]
 8004c88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c8c:	0719      	lsls	r1, r3, #28
 8004c8e:	d42c      	bmi.n	8004cea <__swsetup_r+0x82>
 8004c90:	06dd      	lsls	r5, r3, #27
 8004c92:	d411      	bmi.n	8004cb8 <__swsetup_r+0x50>
 8004c94:	2309      	movs	r3, #9
 8004c96:	6033      	str	r3, [r6, #0]
 8004c98:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004ca0:	81a3      	strh	r3, [r4, #12]
 8004ca2:	e03e      	b.n	8004d22 <__swsetup_r+0xba>
 8004ca4:	4b25      	ldr	r3, [pc, #148]	; (8004d3c <__swsetup_r+0xd4>)
 8004ca6:	429c      	cmp	r4, r3
 8004ca8:	d101      	bne.n	8004cae <__swsetup_r+0x46>
 8004caa:	68ac      	ldr	r4, [r5, #8]
 8004cac:	e7eb      	b.n	8004c86 <__swsetup_r+0x1e>
 8004cae:	4b24      	ldr	r3, [pc, #144]	; (8004d40 <__swsetup_r+0xd8>)
 8004cb0:	429c      	cmp	r4, r3
 8004cb2:	bf08      	it	eq
 8004cb4:	68ec      	ldreq	r4, [r5, #12]
 8004cb6:	e7e6      	b.n	8004c86 <__swsetup_r+0x1e>
 8004cb8:	0758      	lsls	r0, r3, #29
 8004cba:	d512      	bpl.n	8004ce2 <__swsetup_r+0x7a>
 8004cbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004cbe:	b141      	cbz	r1, 8004cd2 <__swsetup_r+0x6a>
 8004cc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004cc4:	4299      	cmp	r1, r3
 8004cc6:	d002      	beq.n	8004cce <__swsetup_r+0x66>
 8004cc8:	4630      	mov	r0, r6
 8004cca:	f000 f99d 	bl	8005008 <_free_r>
 8004cce:	2300      	movs	r3, #0
 8004cd0:	6363      	str	r3, [r4, #52]	; 0x34
 8004cd2:	89a3      	ldrh	r3, [r4, #12]
 8004cd4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004cd8:	81a3      	strh	r3, [r4, #12]
 8004cda:	2300      	movs	r3, #0
 8004cdc:	6063      	str	r3, [r4, #4]
 8004cde:	6923      	ldr	r3, [r4, #16]
 8004ce0:	6023      	str	r3, [r4, #0]
 8004ce2:	89a3      	ldrh	r3, [r4, #12]
 8004ce4:	f043 0308 	orr.w	r3, r3, #8
 8004ce8:	81a3      	strh	r3, [r4, #12]
 8004cea:	6923      	ldr	r3, [r4, #16]
 8004cec:	b94b      	cbnz	r3, 8004d02 <__swsetup_r+0x9a>
 8004cee:	89a3      	ldrh	r3, [r4, #12]
 8004cf0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004cf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cf8:	d003      	beq.n	8004d02 <__swsetup_r+0x9a>
 8004cfa:	4621      	mov	r1, r4
 8004cfc:	4630      	mov	r0, r6
 8004cfe:	f000 f929 	bl	8004f54 <__smakebuf_r>
 8004d02:	89a0      	ldrh	r0, [r4, #12]
 8004d04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d08:	f010 0301 	ands.w	r3, r0, #1
 8004d0c:	d00a      	beq.n	8004d24 <__swsetup_r+0xbc>
 8004d0e:	2300      	movs	r3, #0
 8004d10:	60a3      	str	r3, [r4, #8]
 8004d12:	6963      	ldr	r3, [r4, #20]
 8004d14:	425b      	negs	r3, r3
 8004d16:	61a3      	str	r3, [r4, #24]
 8004d18:	6923      	ldr	r3, [r4, #16]
 8004d1a:	b943      	cbnz	r3, 8004d2e <__swsetup_r+0xc6>
 8004d1c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004d20:	d1ba      	bne.n	8004c98 <__swsetup_r+0x30>
 8004d22:	bd70      	pop	{r4, r5, r6, pc}
 8004d24:	0781      	lsls	r1, r0, #30
 8004d26:	bf58      	it	pl
 8004d28:	6963      	ldrpl	r3, [r4, #20]
 8004d2a:	60a3      	str	r3, [r4, #8]
 8004d2c:	e7f4      	b.n	8004d18 <__swsetup_r+0xb0>
 8004d2e:	2000      	movs	r0, #0
 8004d30:	e7f7      	b.n	8004d22 <__swsetup_r+0xba>
 8004d32:	bf00      	nop
 8004d34:	2000002c 	.word	0x2000002c
 8004d38:	08005228 	.word	0x08005228
 8004d3c:	08005248 	.word	0x08005248
 8004d40:	08005208 	.word	0x08005208

08004d44 <_close_r>:
 8004d44:	b538      	push	{r3, r4, r5, lr}
 8004d46:	2300      	movs	r3, #0
 8004d48:	4d05      	ldr	r5, [pc, #20]	; (8004d60 <_close_r+0x1c>)
 8004d4a:	4604      	mov	r4, r0
 8004d4c:	4608      	mov	r0, r1
 8004d4e:	602b      	str	r3, [r5, #0]
 8004d50:	f7fc fcf3 	bl	800173a <_close>
 8004d54:	1c43      	adds	r3, r0, #1
 8004d56:	d102      	bne.n	8004d5e <_close_r+0x1a>
 8004d58:	682b      	ldr	r3, [r5, #0]
 8004d5a:	b103      	cbz	r3, 8004d5e <_close_r+0x1a>
 8004d5c:	6023      	str	r3, [r4, #0]
 8004d5e:	bd38      	pop	{r3, r4, r5, pc}
 8004d60:	200001a0 	.word	0x200001a0

08004d64 <__sflush_r>:
 8004d64:	898a      	ldrh	r2, [r1, #12]
 8004d66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d6a:	4605      	mov	r5, r0
 8004d6c:	0710      	lsls	r0, r2, #28
 8004d6e:	460c      	mov	r4, r1
 8004d70:	d458      	bmi.n	8004e24 <__sflush_r+0xc0>
 8004d72:	684b      	ldr	r3, [r1, #4]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	dc05      	bgt.n	8004d84 <__sflush_r+0x20>
 8004d78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	dc02      	bgt.n	8004d84 <__sflush_r+0x20>
 8004d7e:	2000      	movs	r0, #0
 8004d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d86:	2e00      	cmp	r6, #0
 8004d88:	d0f9      	beq.n	8004d7e <__sflush_r+0x1a>
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004d90:	682f      	ldr	r7, [r5, #0]
 8004d92:	602b      	str	r3, [r5, #0]
 8004d94:	d032      	beq.n	8004dfc <__sflush_r+0x98>
 8004d96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004d98:	89a3      	ldrh	r3, [r4, #12]
 8004d9a:	075a      	lsls	r2, r3, #29
 8004d9c:	d505      	bpl.n	8004daa <__sflush_r+0x46>
 8004d9e:	6863      	ldr	r3, [r4, #4]
 8004da0:	1ac0      	subs	r0, r0, r3
 8004da2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004da4:	b10b      	cbz	r3, 8004daa <__sflush_r+0x46>
 8004da6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004da8:	1ac0      	subs	r0, r0, r3
 8004daa:	2300      	movs	r3, #0
 8004dac:	4602      	mov	r2, r0
 8004dae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004db0:	4628      	mov	r0, r5
 8004db2:	6a21      	ldr	r1, [r4, #32]
 8004db4:	47b0      	blx	r6
 8004db6:	1c43      	adds	r3, r0, #1
 8004db8:	89a3      	ldrh	r3, [r4, #12]
 8004dba:	d106      	bne.n	8004dca <__sflush_r+0x66>
 8004dbc:	6829      	ldr	r1, [r5, #0]
 8004dbe:	291d      	cmp	r1, #29
 8004dc0:	d82c      	bhi.n	8004e1c <__sflush_r+0xb8>
 8004dc2:	4a2a      	ldr	r2, [pc, #168]	; (8004e6c <__sflush_r+0x108>)
 8004dc4:	40ca      	lsrs	r2, r1
 8004dc6:	07d6      	lsls	r6, r2, #31
 8004dc8:	d528      	bpl.n	8004e1c <__sflush_r+0xb8>
 8004dca:	2200      	movs	r2, #0
 8004dcc:	6062      	str	r2, [r4, #4]
 8004dce:	6922      	ldr	r2, [r4, #16]
 8004dd0:	04d9      	lsls	r1, r3, #19
 8004dd2:	6022      	str	r2, [r4, #0]
 8004dd4:	d504      	bpl.n	8004de0 <__sflush_r+0x7c>
 8004dd6:	1c42      	adds	r2, r0, #1
 8004dd8:	d101      	bne.n	8004dde <__sflush_r+0x7a>
 8004dda:	682b      	ldr	r3, [r5, #0]
 8004ddc:	b903      	cbnz	r3, 8004de0 <__sflush_r+0x7c>
 8004dde:	6560      	str	r0, [r4, #84]	; 0x54
 8004de0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004de2:	602f      	str	r7, [r5, #0]
 8004de4:	2900      	cmp	r1, #0
 8004de6:	d0ca      	beq.n	8004d7e <__sflush_r+0x1a>
 8004de8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004dec:	4299      	cmp	r1, r3
 8004dee:	d002      	beq.n	8004df6 <__sflush_r+0x92>
 8004df0:	4628      	mov	r0, r5
 8004df2:	f000 f909 	bl	8005008 <_free_r>
 8004df6:	2000      	movs	r0, #0
 8004df8:	6360      	str	r0, [r4, #52]	; 0x34
 8004dfa:	e7c1      	b.n	8004d80 <__sflush_r+0x1c>
 8004dfc:	6a21      	ldr	r1, [r4, #32]
 8004dfe:	2301      	movs	r3, #1
 8004e00:	4628      	mov	r0, r5
 8004e02:	47b0      	blx	r6
 8004e04:	1c41      	adds	r1, r0, #1
 8004e06:	d1c7      	bne.n	8004d98 <__sflush_r+0x34>
 8004e08:	682b      	ldr	r3, [r5, #0]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d0c4      	beq.n	8004d98 <__sflush_r+0x34>
 8004e0e:	2b1d      	cmp	r3, #29
 8004e10:	d001      	beq.n	8004e16 <__sflush_r+0xb2>
 8004e12:	2b16      	cmp	r3, #22
 8004e14:	d101      	bne.n	8004e1a <__sflush_r+0xb6>
 8004e16:	602f      	str	r7, [r5, #0]
 8004e18:	e7b1      	b.n	8004d7e <__sflush_r+0x1a>
 8004e1a:	89a3      	ldrh	r3, [r4, #12]
 8004e1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e20:	81a3      	strh	r3, [r4, #12]
 8004e22:	e7ad      	b.n	8004d80 <__sflush_r+0x1c>
 8004e24:	690f      	ldr	r7, [r1, #16]
 8004e26:	2f00      	cmp	r7, #0
 8004e28:	d0a9      	beq.n	8004d7e <__sflush_r+0x1a>
 8004e2a:	0793      	lsls	r3, r2, #30
 8004e2c:	bf18      	it	ne
 8004e2e:	2300      	movne	r3, #0
 8004e30:	680e      	ldr	r6, [r1, #0]
 8004e32:	bf08      	it	eq
 8004e34:	694b      	ldreq	r3, [r1, #20]
 8004e36:	eba6 0807 	sub.w	r8, r6, r7
 8004e3a:	600f      	str	r7, [r1, #0]
 8004e3c:	608b      	str	r3, [r1, #8]
 8004e3e:	f1b8 0f00 	cmp.w	r8, #0
 8004e42:	dd9c      	ble.n	8004d7e <__sflush_r+0x1a>
 8004e44:	4643      	mov	r3, r8
 8004e46:	463a      	mov	r2, r7
 8004e48:	4628      	mov	r0, r5
 8004e4a:	6a21      	ldr	r1, [r4, #32]
 8004e4c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004e4e:	47b0      	blx	r6
 8004e50:	2800      	cmp	r0, #0
 8004e52:	dc06      	bgt.n	8004e62 <__sflush_r+0xfe>
 8004e54:	89a3      	ldrh	r3, [r4, #12]
 8004e56:	f04f 30ff 	mov.w	r0, #4294967295
 8004e5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e5e:	81a3      	strh	r3, [r4, #12]
 8004e60:	e78e      	b.n	8004d80 <__sflush_r+0x1c>
 8004e62:	4407      	add	r7, r0
 8004e64:	eba8 0800 	sub.w	r8, r8, r0
 8004e68:	e7e9      	b.n	8004e3e <__sflush_r+0xda>
 8004e6a:	bf00      	nop
 8004e6c:	20400001 	.word	0x20400001

08004e70 <_fflush_r>:
 8004e70:	b538      	push	{r3, r4, r5, lr}
 8004e72:	690b      	ldr	r3, [r1, #16]
 8004e74:	4605      	mov	r5, r0
 8004e76:	460c      	mov	r4, r1
 8004e78:	b913      	cbnz	r3, 8004e80 <_fflush_r+0x10>
 8004e7a:	2500      	movs	r5, #0
 8004e7c:	4628      	mov	r0, r5
 8004e7e:	bd38      	pop	{r3, r4, r5, pc}
 8004e80:	b118      	cbz	r0, 8004e8a <_fflush_r+0x1a>
 8004e82:	6983      	ldr	r3, [r0, #24]
 8004e84:	b90b      	cbnz	r3, 8004e8a <_fflush_r+0x1a>
 8004e86:	f7ff fa4f 	bl	8004328 <__sinit>
 8004e8a:	4b14      	ldr	r3, [pc, #80]	; (8004edc <_fflush_r+0x6c>)
 8004e8c:	429c      	cmp	r4, r3
 8004e8e:	d11b      	bne.n	8004ec8 <_fflush_r+0x58>
 8004e90:	686c      	ldr	r4, [r5, #4]
 8004e92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d0ef      	beq.n	8004e7a <_fflush_r+0xa>
 8004e9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004e9c:	07d0      	lsls	r0, r2, #31
 8004e9e:	d404      	bmi.n	8004eaa <_fflush_r+0x3a>
 8004ea0:	0599      	lsls	r1, r3, #22
 8004ea2:	d402      	bmi.n	8004eaa <_fflush_r+0x3a>
 8004ea4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ea6:	f7ff fadd 	bl	8004464 <__retarget_lock_acquire_recursive>
 8004eaa:	4628      	mov	r0, r5
 8004eac:	4621      	mov	r1, r4
 8004eae:	f7ff ff59 	bl	8004d64 <__sflush_r>
 8004eb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004eb4:	4605      	mov	r5, r0
 8004eb6:	07da      	lsls	r2, r3, #31
 8004eb8:	d4e0      	bmi.n	8004e7c <_fflush_r+0xc>
 8004eba:	89a3      	ldrh	r3, [r4, #12]
 8004ebc:	059b      	lsls	r3, r3, #22
 8004ebe:	d4dd      	bmi.n	8004e7c <_fflush_r+0xc>
 8004ec0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ec2:	f7ff fad0 	bl	8004466 <__retarget_lock_release_recursive>
 8004ec6:	e7d9      	b.n	8004e7c <_fflush_r+0xc>
 8004ec8:	4b05      	ldr	r3, [pc, #20]	; (8004ee0 <_fflush_r+0x70>)
 8004eca:	429c      	cmp	r4, r3
 8004ecc:	d101      	bne.n	8004ed2 <_fflush_r+0x62>
 8004ece:	68ac      	ldr	r4, [r5, #8]
 8004ed0:	e7df      	b.n	8004e92 <_fflush_r+0x22>
 8004ed2:	4b04      	ldr	r3, [pc, #16]	; (8004ee4 <_fflush_r+0x74>)
 8004ed4:	429c      	cmp	r4, r3
 8004ed6:	bf08      	it	eq
 8004ed8:	68ec      	ldreq	r4, [r5, #12]
 8004eda:	e7da      	b.n	8004e92 <_fflush_r+0x22>
 8004edc:	08005228 	.word	0x08005228
 8004ee0:	08005248 	.word	0x08005248
 8004ee4:	08005208 	.word	0x08005208

08004ee8 <_lseek_r>:
 8004ee8:	b538      	push	{r3, r4, r5, lr}
 8004eea:	4604      	mov	r4, r0
 8004eec:	4608      	mov	r0, r1
 8004eee:	4611      	mov	r1, r2
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	4d05      	ldr	r5, [pc, #20]	; (8004f08 <_lseek_r+0x20>)
 8004ef4:	602a      	str	r2, [r5, #0]
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	f7fc fc43 	bl	8001782 <_lseek>
 8004efc:	1c43      	adds	r3, r0, #1
 8004efe:	d102      	bne.n	8004f06 <_lseek_r+0x1e>
 8004f00:	682b      	ldr	r3, [r5, #0]
 8004f02:	b103      	cbz	r3, 8004f06 <_lseek_r+0x1e>
 8004f04:	6023      	str	r3, [r4, #0]
 8004f06:	bd38      	pop	{r3, r4, r5, pc}
 8004f08:	200001a0 	.word	0x200001a0

08004f0c <__swhatbuf_r>:
 8004f0c:	b570      	push	{r4, r5, r6, lr}
 8004f0e:	460e      	mov	r6, r1
 8004f10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f14:	4614      	mov	r4, r2
 8004f16:	2900      	cmp	r1, #0
 8004f18:	461d      	mov	r5, r3
 8004f1a:	b096      	sub	sp, #88	; 0x58
 8004f1c:	da07      	bge.n	8004f2e <__swhatbuf_r+0x22>
 8004f1e:	2300      	movs	r3, #0
 8004f20:	602b      	str	r3, [r5, #0]
 8004f22:	89b3      	ldrh	r3, [r6, #12]
 8004f24:	061a      	lsls	r2, r3, #24
 8004f26:	d410      	bmi.n	8004f4a <__swhatbuf_r+0x3e>
 8004f28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f2c:	e00e      	b.n	8004f4c <__swhatbuf_r+0x40>
 8004f2e:	466a      	mov	r2, sp
 8004f30:	f000 f8c8 	bl	80050c4 <_fstat_r>
 8004f34:	2800      	cmp	r0, #0
 8004f36:	dbf2      	blt.n	8004f1e <__swhatbuf_r+0x12>
 8004f38:	9a01      	ldr	r2, [sp, #4]
 8004f3a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004f3e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004f42:	425a      	negs	r2, r3
 8004f44:	415a      	adcs	r2, r3
 8004f46:	602a      	str	r2, [r5, #0]
 8004f48:	e7ee      	b.n	8004f28 <__swhatbuf_r+0x1c>
 8004f4a:	2340      	movs	r3, #64	; 0x40
 8004f4c:	2000      	movs	r0, #0
 8004f4e:	6023      	str	r3, [r4, #0]
 8004f50:	b016      	add	sp, #88	; 0x58
 8004f52:	bd70      	pop	{r4, r5, r6, pc}

08004f54 <__smakebuf_r>:
 8004f54:	898b      	ldrh	r3, [r1, #12]
 8004f56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004f58:	079d      	lsls	r5, r3, #30
 8004f5a:	4606      	mov	r6, r0
 8004f5c:	460c      	mov	r4, r1
 8004f5e:	d507      	bpl.n	8004f70 <__smakebuf_r+0x1c>
 8004f60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004f64:	6023      	str	r3, [r4, #0]
 8004f66:	6123      	str	r3, [r4, #16]
 8004f68:	2301      	movs	r3, #1
 8004f6a:	6163      	str	r3, [r4, #20]
 8004f6c:	b002      	add	sp, #8
 8004f6e:	bd70      	pop	{r4, r5, r6, pc}
 8004f70:	466a      	mov	r2, sp
 8004f72:	ab01      	add	r3, sp, #4
 8004f74:	f7ff ffca 	bl	8004f0c <__swhatbuf_r>
 8004f78:	9900      	ldr	r1, [sp, #0]
 8004f7a:	4605      	mov	r5, r0
 8004f7c:	4630      	mov	r0, r6
 8004f7e:	f7ff fa73 	bl	8004468 <_malloc_r>
 8004f82:	b948      	cbnz	r0, 8004f98 <__smakebuf_r+0x44>
 8004f84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f88:	059a      	lsls	r2, r3, #22
 8004f8a:	d4ef      	bmi.n	8004f6c <__smakebuf_r+0x18>
 8004f8c:	f023 0303 	bic.w	r3, r3, #3
 8004f90:	f043 0302 	orr.w	r3, r3, #2
 8004f94:	81a3      	strh	r3, [r4, #12]
 8004f96:	e7e3      	b.n	8004f60 <__smakebuf_r+0xc>
 8004f98:	4b0d      	ldr	r3, [pc, #52]	; (8004fd0 <__smakebuf_r+0x7c>)
 8004f9a:	62b3      	str	r3, [r6, #40]	; 0x28
 8004f9c:	89a3      	ldrh	r3, [r4, #12]
 8004f9e:	6020      	str	r0, [r4, #0]
 8004fa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fa4:	81a3      	strh	r3, [r4, #12]
 8004fa6:	9b00      	ldr	r3, [sp, #0]
 8004fa8:	6120      	str	r0, [r4, #16]
 8004faa:	6163      	str	r3, [r4, #20]
 8004fac:	9b01      	ldr	r3, [sp, #4]
 8004fae:	b15b      	cbz	r3, 8004fc8 <__smakebuf_r+0x74>
 8004fb0:	4630      	mov	r0, r6
 8004fb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fb6:	f000 f897 	bl	80050e8 <_isatty_r>
 8004fba:	b128      	cbz	r0, 8004fc8 <__smakebuf_r+0x74>
 8004fbc:	89a3      	ldrh	r3, [r4, #12]
 8004fbe:	f023 0303 	bic.w	r3, r3, #3
 8004fc2:	f043 0301 	orr.w	r3, r3, #1
 8004fc6:	81a3      	strh	r3, [r4, #12]
 8004fc8:	89a0      	ldrh	r0, [r4, #12]
 8004fca:	4305      	orrs	r5, r0
 8004fcc:	81a5      	strh	r5, [r4, #12]
 8004fce:	e7cd      	b.n	8004f6c <__smakebuf_r+0x18>
 8004fd0:	080042c1 	.word	0x080042c1

08004fd4 <memchr>:
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	b510      	push	{r4, lr}
 8004fd8:	b2c9      	uxtb	r1, r1
 8004fda:	4402      	add	r2, r0
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	4618      	mov	r0, r3
 8004fe0:	d101      	bne.n	8004fe6 <memchr+0x12>
 8004fe2:	2000      	movs	r0, #0
 8004fe4:	e003      	b.n	8004fee <memchr+0x1a>
 8004fe6:	7804      	ldrb	r4, [r0, #0]
 8004fe8:	3301      	adds	r3, #1
 8004fea:	428c      	cmp	r4, r1
 8004fec:	d1f6      	bne.n	8004fdc <memchr+0x8>
 8004fee:	bd10      	pop	{r4, pc}

08004ff0 <__malloc_lock>:
 8004ff0:	4801      	ldr	r0, [pc, #4]	; (8004ff8 <__malloc_lock+0x8>)
 8004ff2:	f7ff ba37 	b.w	8004464 <__retarget_lock_acquire_recursive>
 8004ff6:	bf00      	nop
 8004ff8:	20000198 	.word	0x20000198

08004ffc <__malloc_unlock>:
 8004ffc:	4801      	ldr	r0, [pc, #4]	; (8005004 <__malloc_unlock+0x8>)
 8004ffe:	f7ff ba32 	b.w	8004466 <__retarget_lock_release_recursive>
 8005002:	bf00      	nop
 8005004:	20000198 	.word	0x20000198

08005008 <_free_r>:
 8005008:	b538      	push	{r3, r4, r5, lr}
 800500a:	4605      	mov	r5, r0
 800500c:	2900      	cmp	r1, #0
 800500e:	d043      	beq.n	8005098 <_free_r+0x90>
 8005010:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005014:	1f0c      	subs	r4, r1, #4
 8005016:	2b00      	cmp	r3, #0
 8005018:	bfb8      	it	lt
 800501a:	18e4      	addlt	r4, r4, r3
 800501c:	f7ff ffe8 	bl	8004ff0 <__malloc_lock>
 8005020:	4a1e      	ldr	r2, [pc, #120]	; (800509c <_free_r+0x94>)
 8005022:	6813      	ldr	r3, [r2, #0]
 8005024:	4610      	mov	r0, r2
 8005026:	b933      	cbnz	r3, 8005036 <_free_r+0x2e>
 8005028:	6063      	str	r3, [r4, #4]
 800502a:	6014      	str	r4, [r2, #0]
 800502c:	4628      	mov	r0, r5
 800502e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005032:	f7ff bfe3 	b.w	8004ffc <__malloc_unlock>
 8005036:	42a3      	cmp	r3, r4
 8005038:	d90a      	bls.n	8005050 <_free_r+0x48>
 800503a:	6821      	ldr	r1, [r4, #0]
 800503c:	1862      	adds	r2, r4, r1
 800503e:	4293      	cmp	r3, r2
 8005040:	bf01      	itttt	eq
 8005042:	681a      	ldreq	r2, [r3, #0]
 8005044:	685b      	ldreq	r3, [r3, #4]
 8005046:	1852      	addeq	r2, r2, r1
 8005048:	6022      	streq	r2, [r4, #0]
 800504a:	6063      	str	r3, [r4, #4]
 800504c:	6004      	str	r4, [r0, #0]
 800504e:	e7ed      	b.n	800502c <_free_r+0x24>
 8005050:	461a      	mov	r2, r3
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	b10b      	cbz	r3, 800505a <_free_r+0x52>
 8005056:	42a3      	cmp	r3, r4
 8005058:	d9fa      	bls.n	8005050 <_free_r+0x48>
 800505a:	6811      	ldr	r1, [r2, #0]
 800505c:	1850      	adds	r0, r2, r1
 800505e:	42a0      	cmp	r0, r4
 8005060:	d10b      	bne.n	800507a <_free_r+0x72>
 8005062:	6820      	ldr	r0, [r4, #0]
 8005064:	4401      	add	r1, r0
 8005066:	1850      	adds	r0, r2, r1
 8005068:	4283      	cmp	r3, r0
 800506a:	6011      	str	r1, [r2, #0]
 800506c:	d1de      	bne.n	800502c <_free_r+0x24>
 800506e:	6818      	ldr	r0, [r3, #0]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	4401      	add	r1, r0
 8005074:	6011      	str	r1, [r2, #0]
 8005076:	6053      	str	r3, [r2, #4]
 8005078:	e7d8      	b.n	800502c <_free_r+0x24>
 800507a:	d902      	bls.n	8005082 <_free_r+0x7a>
 800507c:	230c      	movs	r3, #12
 800507e:	602b      	str	r3, [r5, #0]
 8005080:	e7d4      	b.n	800502c <_free_r+0x24>
 8005082:	6820      	ldr	r0, [r4, #0]
 8005084:	1821      	adds	r1, r4, r0
 8005086:	428b      	cmp	r3, r1
 8005088:	bf01      	itttt	eq
 800508a:	6819      	ldreq	r1, [r3, #0]
 800508c:	685b      	ldreq	r3, [r3, #4]
 800508e:	1809      	addeq	r1, r1, r0
 8005090:	6021      	streq	r1, [r4, #0]
 8005092:	6063      	str	r3, [r4, #4]
 8005094:	6054      	str	r4, [r2, #4]
 8005096:	e7c9      	b.n	800502c <_free_r+0x24>
 8005098:	bd38      	pop	{r3, r4, r5, pc}
 800509a:	bf00      	nop
 800509c:	200000e8 	.word	0x200000e8

080050a0 <_read_r>:
 80050a0:	b538      	push	{r3, r4, r5, lr}
 80050a2:	4604      	mov	r4, r0
 80050a4:	4608      	mov	r0, r1
 80050a6:	4611      	mov	r1, r2
 80050a8:	2200      	movs	r2, #0
 80050aa:	4d05      	ldr	r5, [pc, #20]	; (80050c0 <_read_r+0x20>)
 80050ac:	602a      	str	r2, [r5, #0]
 80050ae:	461a      	mov	r2, r3
 80050b0:	f7fc fb26 	bl	8001700 <_read>
 80050b4:	1c43      	adds	r3, r0, #1
 80050b6:	d102      	bne.n	80050be <_read_r+0x1e>
 80050b8:	682b      	ldr	r3, [r5, #0]
 80050ba:	b103      	cbz	r3, 80050be <_read_r+0x1e>
 80050bc:	6023      	str	r3, [r4, #0]
 80050be:	bd38      	pop	{r3, r4, r5, pc}
 80050c0:	200001a0 	.word	0x200001a0

080050c4 <_fstat_r>:
 80050c4:	b538      	push	{r3, r4, r5, lr}
 80050c6:	2300      	movs	r3, #0
 80050c8:	4d06      	ldr	r5, [pc, #24]	; (80050e4 <_fstat_r+0x20>)
 80050ca:	4604      	mov	r4, r0
 80050cc:	4608      	mov	r0, r1
 80050ce:	4611      	mov	r1, r2
 80050d0:	602b      	str	r3, [r5, #0]
 80050d2:	f7fc fb3d 	bl	8001750 <_fstat>
 80050d6:	1c43      	adds	r3, r0, #1
 80050d8:	d102      	bne.n	80050e0 <_fstat_r+0x1c>
 80050da:	682b      	ldr	r3, [r5, #0]
 80050dc:	b103      	cbz	r3, 80050e0 <_fstat_r+0x1c>
 80050de:	6023      	str	r3, [r4, #0]
 80050e0:	bd38      	pop	{r3, r4, r5, pc}
 80050e2:	bf00      	nop
 80050e4:	200001a0 	.word	0x200001a0

080050e8 <_isatty_r>:
 80050e8:	b538      	push	{r3, r4, r5, lr}
 80050ea:	2300      	movs	r3, #0
 80050ec:	4d05      	ldr	r5, [pc, #20]	; (8005104 <_isatty_r+0x1c>)
 80050ee:	4604      	mov	r4, r0
 80050f0:	4608      	mov	r0, r1
 80050f2:	602b      	str	r3, [r5, #0]
 80050f4:	f7fc fb3b 	bl	800176e <_isatty>
 80050f8:	1c43      	adds	r3, r0, #1
 80050fa:	d102      	bne.n	8005102 <_isatty_r+0x1a>
 80050fc:	682b      	ldr	r3, [r5, #0]
 80050fe:	b103      	cbz	r3, 8005102 <_isatty_r+0x1a>
 8005100:	6023      	str	r3, [r4, #0]
 8005102:	bd38      	pop	{r3, r4, r5, pc}
 8005104:	200001a0 	.word	0x200001a0

08005108 <_init>:
 8005108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800510a:	bf00      	nop
 800510c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800510e:	bc08      	pop	{r3}
 8005110:	469e      	mov	lr, r3
 8005112:	4770      	bx	lr

08005114 <_fini>:
 8005114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005116:	bf00      	nop
 8005118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800511a:	bc08      	pop	{r3}
 800511c:	469e      	mov	lr, r3
 800511e:	4770      	bx	lr
