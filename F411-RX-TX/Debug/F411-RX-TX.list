
F411-RX-TX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b4c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008cc  08006cec  08006cec  00016cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075b8  080075b8  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  080075b8  080075b8  000175b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075c0  080075c0  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075c0  080075c0  000175c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075c4  080075c4  000175c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  080075c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005f4  200000b4  0800767c  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006a8  0800767c  000206a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aad0  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003892  00000000  00000000  0003abb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c0  00000000  00000000  0003e448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001068  00000000  00000000  0003f608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ae4f  00000000  00000000  00040670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016a74  00000000  00000000  0005b4bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009269b  00000000  00000000  00071f33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001045ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ab8  00000000  00000000  00104624  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000b4 	.word	0x200000b4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006cd4 	.word	0x08006cd4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000b8 	.word	0x200000b8
 80001dc:	08006cd4 	.word	0x08006cd4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <dwt_initialise>:
#define VBAT_ADDRESS   (0x08)
#define VTEMP_ADDRESS  (0x09)
#define XTRIM_ADDRESS  (0x1E)

int dwt_initialise(int config)
{
 8000588:	b590      	push	{r4, r7, lr}
 800058a:	b087      	sub	sp, #28
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
    uint16 otp_xtaltrim_and_rev = 0;
 8000590:	2300      	movs	r3, #0
 8000592:	82fb      	strh	r3, [r7, #22]
    uint32 ldo_tune = 0;
 8000594:	2300      	movs	r3, #0
 8000596:	613b      	str	r3, [r7, #16]

    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
 8000598:	4b9f      	ldr	r3, [pc, #636]	; (8000818 <dwt_initialise+0x290>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	2200      	movs	r2, #0
 800059e:	751a      	strb	r2, [r3, #20]
    pdw1000local->wait4resp = 0; // - set to 0 - meaning wait for response not active
 80005a0:	4b9d      	ldr	r3, [pc, #628]	; (8000818 <dwt_initialise+0x290>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	2200      	movs	r2, #0
 80005a6:	755a      	strb	r2, [r3, #21]
    pdw1000local->sleep_mode = 0; // - set to 0 - meaning sleep mode has not been configured
 80005a8:	4b9b      	ldr	r3, [pc, #620]	; (8000818 <dwt_initialise+0x290>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	2200      	movs	r2, #0
 80005ae:	82da      	strh	r2, [r3, #22]

    pdw1000local->cbTxDone = NULL;
 80005b0:	4b99      	ldr	r3, [pc, #612]	; (8000818 <dwt_initialise+0x290>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	2200      	movs	r2, #0
 80005b6:	629a      	str	r2, [r3, #40]	; 0x28
    pdw1000local->cbRxOk = NULL;
 80005b8:	4b97      	ldr	r3, [pc, #604]	; (8000818 <dwt_initialise+0x290>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	2200      	movs	r2, #0
 80005be:	62da      	str	r2, [r3, #44]	; 0x2c
    pdw1000local->cbRxTo = NULL;
 80005c0:	4b95      	ldr	r3, [pc, #596]	; (8000818 <dwt_initialise+0x290>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	2200      	movs	r2, #0
 80005c6:	631a      	str	r2, [r3, #48]	; 0x30
    pdw1000local->cbRxErr = NULL;
 80005c8:	4b93      	ldr	r3, [pc, #588]	; (8000818 <dwt_initialise+0x290>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2200      	movs	r2, #0
 80005ce:	635a      	str	r2, [r3, #52]	; 0x34
#if DWT_API_ERROR_CHECK
    pdw1000local->otp_mask = config ; // Save the READ_OTP config mask
#endif

    // Read and validate device ID, return -1 if not recognised
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
 80005d0:	f000 f926 	bl	8000820 <dwt_readdevid>
 80005d4:	4603      	mov	r3, r0
 80005d6:	4a91      	ldr	r2, [pc, #580]	; (800081c <dwt_initialise+0x294>)
 80005d8:	4293      	cmp	r3, r2
 80005da:	d002      	beq.n	80005e2 <dwt_initialise+0x5a>
    {
        return DWT_ERROR ;
 80005dc:	f04f 33ff 	mov.w	r3, #4294967295
 80005e0:	e115      	b.n	800080e <dwt_initialise+0x286>
    }

    if(!(DWT_DW_WAKE_UP & config)) // Don't reset the device if DWT_DW_WAKE_UP bit is set, e.g. when calling this API after wake up
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	f003 0302 	and.w	r3, r3, #2
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d101      	bne.n	80005f0 <dwt_initialise+0x68>
    {
        dwt_softreset(); // Make sure the device is completely reset before starting initialisation
 80005ec:	f000 fe1e 	bl	800122c <dwt_softreset>
    }

    if(!((DWT_DW_WAKE_UP & config) && ((DWT_READ_OTP_TMP | DWT_READ_OTP_BAT | DWT_READ_OTP_LID | DWT_READ_OTP_PID | DWT_DW_WUP_RD_OTPREV)& config)))
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	f003 0302 	and.w	r3, r3, #2
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d004      	beq.n	8000604 <dwt_initialise+0x7c>
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8000600:	2b00      	cmp	r3, #0
 8000602:	d102      	bne.n	800060a <dwt_initialise+0x82>
    {
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 8000604:	2000      	movs	r0, #0
 8000606:	f000 fc91 	bl	8000f2c <_dwt_enableclocks>
    }                                  // when not reading from OTP, clocks don't need to change.

    // Configure the CPLL lock detect
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
 800060a:	2204      	movs	r2, #4
 800060c:	2100      	movs	r1, #0
 800060e:	2024      	movs	r0, #36	; 0x24
 8000610:	f000 fbd6 	bl	8000dc0 <dwt_write8bitoffsetreg>

    // When DW1000 IC is initialised from power up, then the LDO value should be kicked from OTP, otherwise if this API is called after
    // DW1000 IC has been woken up (DWT_DW_WAKE_UP bit is set) this can be skipped as LDO would have already been automatically
    // kicked/loaded on wake up
    if(!(DWT_DW_WAKE_UP & config))
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	f003 0302 	and.w	r3, r3, #2
 800061a:	2b00      	cmp	r3, #0
 800061c:	d116      	bne.n	800064c <dwt_initialise+0xc4>
    {
        // Load LDO tune from OTP and kick it if there is a value actually programmed.
        ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
 800061e:	2004      	movs	r0, #4
 8000620:	f000 fc24 	bl	8000e6c <_dwt_otpread>
 8000624:	6138      	str	r0, [r7, #16]
        if((ldo_tune & 0xFF) != 0)
 8000626:	693b      	ldr	r3, [r7, #16]
 8000628:	b2db      	uxtb	r3, r3
 800062a:	2b00      	cmp	r3, #0
 800062c:	d01f      	beq.n	800066e <dwt_initialise+0xe6>
        {
            // Kick LDO tune
            dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDO kick bit
 800062e:	2202      	movs	r2, #2
 8000630:	2112      	movs	r1, #18
 8000632:	202d      	movs	r0, #45	; 0x2d
 8000634:	f000 fbc4 	bl	8000dc0 <dwt_write8bitoffsetreg>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 8000638:	4b77      	ldr	r3, [pc, #476]	; (8000818 <dwt_initialise+0x290>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	8ada      	ldrh	r2, [r3, #22]
 800063e:	4b76      	ldr	r3, [pc, #472]	; (8000818 <dwt_initialise+0x290>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000646:	b292      	uxth	r2, r2
 8000648:	82da      	strh	r2, [r3, #22]
 800064a:	e010      	b.n	800066e <dwt_initialise+0xe6>
        }
    }
    else
    {   //if LDOTUNE reg contains value different from default it means it was kicked from OTP and thus set AON_WCFG_ONW_LLDO.
        if(dwt_read32bitoffsetreg(RF_CONF_ID, LDOTUNE) != LDOTUNE_DEFAULT)
 800064c:	2130      	movs	r1, #48	; 0x30
 800064e:	2028      	movs	r0, #40	; 0x28
 8000650:	f000 fb5f 	bl	8000d12 <dwt_read32bitoffsetreg>
 8000654:	4603      	mov	r3, r0
 8000656:	f1b3 3f88 	cmp.w	r3, #2290649224	; 0x88888888
 800065a:	d008      	beq.n	800066e <dwt_initialise+0xe6>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO;
 800065c:	4b6e      	ldr	r3, [pc, #440]	; (8000818 <dwt_initialise+0x290>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	8ada      	ldrh	r2, [r3, #22]
 8000662:	4b6d      	ldr	r3, [pc, #436]	; (8000818 <dwt_initialise+0x290>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800066a:	b292      	uxth	r2, r2
 800066c:	82da      	strh	r2, [r3, #22]
    }

    if((!(DWT_DW_WAKE_UP & config)) || ((DWT_DW_WAKE_UP & config) && (DWT_DW_WUP_RD_OTPREV & config)))
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	f003 0302 	and.w	r3, r3, #2
 8000674:	2b00      	cmp	r3, #0
 8000676:	d009      	beq.n	800068c <dwt_initialise+0x104>
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	f003 0302 	and.w	r3, r3, #2
 800067e:	2b00      	cmp	r3, #0
 8000680:	d011      	beq.n	80006a6 <dwt_initialise+0x11e>
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	f003 0308 	and.w	r3, r3, #8
 8000688:	2b00      	cmp	r3, #0
 800068a:	d00c      	beq.n	80006a6 <dwt_initialise+0x11e>
    {
        // Read OTP revision number
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 800068c:	201e      	movs	r0, #30
 800068e:	f000 fbed 	bl	8000e6c <_dwt_otpread>
 8000692:	4603      	mov	r3, r0
 8000694:	82fb      	strh	r3, [r7, #22]
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 8000696:	8afb      	ldrh	r3, [r7, #22]
 8000698:	0a1b      	lsrs	r3, r3, #8
 800069a:	b29a      	uxth	r2, r3
 800069c:	4b5e      	ldr	r3, [pc, #376]	; (8000818 <dwt_initialise+0x290>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	b2d2      	uxtb	r2, r2
 80006a2:	72da      	strb	r2, [r3, #11]
 80006a4:	e003      	b.n	80006ae <dwt_initialise+0x126>
    }
    else
        pdw1000local->otprev = 0; // If OTP valuse are not used, if this API is called after DW1000 IC has been woken up
 80006a6:	4b5c      	ldr	r3, [pc, #368]	; (8000818 <dwt_initialise+0x290>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	2200      	movs	r2, #0
 80006ac:	72da      	strb	r2, [r3, #11]
                                  // (DWT_DW_WAKE_UP bit is set), set otprev to 0

    if(!(DWT_DW_WAKE_UP & config))
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	f003 0302 	and.w	r3, r3, #2
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d10b      	bne.n	80006d0 <dwt_initialise+0x148>
    {
        // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
        if ((otp_xtaltrim_and_rev & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
 80006b8:	8afb      	ldrh	r3, [r7, #22]
 80006ba:	f003 031f 	and.w	r3, r3, #31
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d101      	bne.n	80006c6 <dwt_initialise+0x13e>
        {
            otp_xtaltrim_and_rev = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
 80006c2:	2310      	movs	r3, #16
 80006c4:	82fb      	strh	r3, [r7, #22]
        }
        // Configure XTAL trim
        dwt_setxtaltrim((uint8)otp_xtaltrim_and_rev);
 80006c6:	8afb      	ldrh	r3, [r7, #22]
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 fdd4 	bl	8001278 <dwt_setxtaltrim>
    }

    if(DWT_READ_OTP_PID & config)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	f003 0310 	and.w	r3, r3, #16
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d007      	beq.n	80006ea <dwt_initialise+0x162>
    {
        // Load Part from OTP
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
 80006da:	4b4f      	ldr	r3, [pc, #316]	; (8000818 <dwt_initialise+0x290>)
 80006dc:	681c      	ldr	r4, [r3, #0]
 80006de:	2006      	movs	r0, #6
 80006e0:	f000 fbc4 	bl	8000e6c <_dwt_otpread>
 80006e4:	4603      	mov	r3, r0
 80006e6:	6023      	str	r3, [r4, #0]
 80006e8:	e003      	b.n	80006f2 <dwt_initialise+0x16a>
    }
    else
    {
        pdw1000local->partID = 0;
 80006ea:	4b4b      	ldr	r3, [pc, #300]	; (8000818 <dwt_initialise+0x290>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
    }

    if(DWT_READ_OTP_LID & config)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	f003 0320 	and.w	r3, r3, #32
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d007      	beq.n	800070c <dwt_initialise+0x184>
    {
        // Load Lot ID from OTP
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 80006fc:	4b46      	ldr	r3, [pc, #280]	; (8000818 <dwt_initialise+0x290>)
 80006fe:	681c      	ldr	r4, [r3, #0]
 8000700:	2007      	movs	r0, #7
 8000702:	f000 fbb3 	bl	8000e6c <_dwt_otpread>
 8000706:	4603      	mov	r3, r0
 8000708:	6063      	str	r3, [r4, #4]
 800070a:	e003      	b.n	8000714 <dwt_initialise+0x18c>
    }
    else
    {
        pdw1000local->lotID = 0;
 800070c:	4b42      	ldr	r3, [pc, #264]	; (8000818 <dwt_initialise+0x290>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	2200      	movs	r2, #0
 8000712:	605a      	str	r2, [r3, #4]
    }

    if(DWT_READ_OTP_BAT & config)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800071a:	2b00      	cmp	r3, #0
 800071c:	d008      	beq.n	8000730 <dwt_initialise+0x1a8>
    {
        // Load VBAT from OTP
        pdw1000local->vBatP = _dwt_otpread(VBAT_ADDRESS) & 0xff;
 800071e:	2008      	movs	r0, #8
 8000720:	f000 fba4 	bl	8000e6c <_dwt_otpread>
 8000724:	4602      	mov	r2, r0
 8000726:	4b3c      	ldr	r3, [pc, #240]	; (8000818 <dwt_initialise+0x290>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	b2d2      	uxtb	r2, r2
 800072c:	721a      	strb	r2, [r3, #8]
 800072e:	e003      	b.n	8000738 <dwt_initialise+0x1b0>
    }
    else
    {
        pdw1000local->vBatP = 0;
 8000730:	4b39      	ldr	r3, [pc, #228]	; (8000818 <dwt_initialise+0x290>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	2200      	movs	r2, #0
 8000736:	721a      	strb	r2, [r3, #8]
    }

    if(DWT_READ_OTP_TMP & config)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800073e:	2b00      	cmp	r3, #0
 8000740:	d008      	beq.n	8000754 <dwt_initialise+0x1cc>
    {
        // Load TEMP from OTP
        pdw1000local->tempP = _dwt_otpread(VTEMP_ADDRESS) & 0xff;
 8000742:	2009      	movs	r0, #9
 8000744:	f000 fb92 	bl	8000e6c <_dwt_otpread>
 8000748:	4602      	mov	r2, r0
 800074a:	4b33      	ldr	r3, [pc, #204]	; (8000818 <dwt_initialise+0x290>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	b2d2      	uxtb	r2, r2
 8000750:	725a      	strb	r2, [r3, #9]
 8000752:	e003      	b.n	800075c <dwt_initialise+0x1d4>
    }
    else
    {
        pdw1000local->tempP = 0;
 8000754:	4b30      	ldr	r3, [pc, #192]	; (8000818 <dwt_initialise+0x290>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2200      	movs	r2, #0
 800075a:	725a      	strb	r2, [r3, #9]
    }

    // Load leading edge detect code (LDE/microcode)
    if(!(DWT_DW_WAKE_UP & config))
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	f003 0302 	and.w	r3, r3, #2
 8000762:	2b00      	cmp	r3, #0
 8000764:	d121      	bne.n	80007aa <dwt_initialise+0x222>
    {
        if(DWT_LOADUCODE & config)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	f003 0301 	and.w	r3, r3, #1
 800076c:	2b00      	cmp	r3, #0
 800076e:	d00b      	beq.n	8000788 <dwt_initialise+0x200>
        {
            _dwt_loaducodefromrom();
 8000770:	f000 fbc9 	bl	8000f06 <_dwt_loaducodefromrom>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up if loaded on initialisation
 8000774:	4b28      	ldr	r3, [pc, #160]	; (8000818 <dwt_initialise+0x290>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	8ada      	ldrh	r2, [r3, #22]
 800077a:	4b27      	ldr	r3, [pc, #156]	; (8000818 <dwt_initialise+0x290>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000782:	b292      	uxth	r2, r2
 8000784:	82da      	strh	r2, [r3, #22]
 8000786:	e01e      	b.n	80007c6 <dwt_initialise+0x23e>
        }
        else // Should disable the LDERUN bit enable if LDE has not been loaded
        {
            uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
 8000788:	2105      	movs	r1, #5
 800078a:	2036      	movs	r0, #54	; 0x36
 800078c:	f000 fae8 	bl	8000d60 <dwt_read16bitoffsetreg>
 8000790:	4603      	mov	r3, r0
 8000792:	81fb      	strh	r3, [r7, #14]
            rega &= 0xFDFF ; // Clear LDERUN bit
 8000794:	89fb      	ldrh	r3, [r7, #14]
 8000796:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800079a:	81fb      	strh	r3, [r7, #14]
            dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
 800079c:	89fb      	ldrh	r3, [r7, #14]
 800079e:	461a      	mov	r2, r3
 80007a0:	2105      	movs	r1, #5
 80007a2:	2036      	movs	r0, #54	; 0x36
 80007a4:	f000 fb1f 	bl	8000de6 <dwt_write16bitoffsetreg>
 80007a8:	e00d      	b.n	80007c6 <dwt_initialise+0x23e>
        }
    }
    else //if DWT_DW_WUP_NO_UCODE is set then assume that the UCODE was loaded from ROM (i.e. DWT_LOADUCODE was set on power up),
    {     //thus set AON_WCFG_ONW_LLDE, otherwise don't set the AON_WCFG_ONW_LLDE bit in the sleep_mode configuration
        if((DWT_DW_WUP_NO_UCODE & config) == 0)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	f003 0304 	and.w	r3, r3, #4
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d108      	bne.n	80007c6 <dwt_initialise+0x23e>
        {
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE;
 80007b4:	4b18      	ldr	r3, [pc, #96]	; (8000818 <dwt_initialise+0x290>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	8ada      	ldrh	r2, [r3, #22]
 80007ba:	4b17      	ldr	r3, [pc, #92]	; (8000818 <dwt_initialise+0x290>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80007c2:	b292      	uxth	r2, r2
 80007c4:	82da      	strh	r2, [r3, #22]
        }
    }

    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 80007c6:	2001      	movs	r0, #1
 80007c8:	f000 fbb0 	bl	8000f2c <_dwt_enableclocks>

    // The 3 bits in AON CFG1 register must be cleared to ensure proper operation of the DW1000 in DEEPSLEEP mode.
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
 80007cc:	2200      	movs	r2, #0
 80007ce:	210a      	movs	r1, #10
 80007d0:	202c      	movs	r0, #44	; 0x2c
 80007d2:	f000 faf5 	bl	8000dc0 <dwt_write8bitoffsetreg>

    // Read system register / store local copy
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 80007d6:	4b10      	ldr	r3, [pc, #64]	; (8000818 <dwt_initialise+0x290>)
 80007d8:	681c      	ldr	r4, [r3, #0]
 80007da:	2100      	movs	r1, #0
 80007dc:	2004      	movs	r0, #4
 80007de:	f000 fa98 	bl	8000d12 <dwt_read32bitoffsetreg>
 80007e2:	4603      	mov	r3, r0
 80007e4:	6123      	str	r3, [r4, #16]
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 80007e6:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <dwt_initialise+0x290>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	691b      	ldr	r3, [r3, #16]
 80007ec:	0c1b      	lsrs	r3, r3, #16
 80007ee:	b2da      	uxtb	r2, r3
 80007f0:	4b09      	ldr	r3, [pc, #36]	; (8000818 <dwt_initialise+0x290>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f002 0203 	and.w	r2, r2, #3
 80007f8:	b2d2      	uxtb	r2, r2
 80007fa:	729a      	strb	r2, [r3, #10]

    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID) ;
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <dwt_initialise+0x290>)
 80007fe:	681c      	ldr	r4, [r3, #0]
 8000800:	2100      	movs	r1, #0
 8000802:	2008      	movs	r0, #8
 8000804:	f000 fa85 	bl	8000d12 <dwt_read32bitoffsetreg>
 8000808:	4603      	mov	r3, r0
 800080a:	60e3      	str	r3, [r4, #12]

    return DWT_SUCCESS ;
 800080c:	2300      	movs	r3, #0

} // end dwt_initialise()
 800080e:	4618      	mov	r0, r3
 8000810:	371c      	adds	r7, #28
 8000812:	46bd      	mov	sp, r7
 8000814:	bd90      	pop	{r4, r7, pc}
 8000816:	bf00      	nop
 8000818:	20000000 	.word	0x20000000
 800081c:	deca0130 	.word	0xdeca0130

08000820 <dwt_readdevid>:
 * output parameters
 *
 * returns the read value which for DW1000 is 0xDECA0130
 */
uint32 dwt_readdevid(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
 8000824:	2100      	movs	r1, #0
 8000826:	2000      	movs	r0, #0
 8000828:	f000 fa73 	bl	8000d12 <dwt_read32bitoffsetreg>
 800082c:	4603      	mov	r3, r0
}
 800082e:	4618      	mov	r0, r3
 8000830:	bd80      	pop	{r7, pc}
	...

08000834 <dwt_configure>:
 * output parameters
 *
 * no return value
 */
void dwt_configure(dwt_config_t *config)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b086      	sub	sp, #24
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
    uint8 nsSfd_result  = 0;
 800083c:	2300      	movs	r3, #0
 800083e:	75fb      	strb	r3, [r7, #23]
    uint8 useDWnsSFD = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	75bb      	strb	r3, [r7, #22]
    uint8 chan = config->chan ;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	74fb      	strb	r3, [r7, #19]
    uint32 regval ;
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	795b      	ldrb	r3, [r3, #5]
 800084e:	461a      	mov	r2, r3
 8000850:	4ba1      	ldr	r3, [pc, #644]	; (8000ad8 <dwt_configure+0x2a4>)
 8000852:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000856:	82bb      	strh	r3, [r7, #20]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	785b      	ldrb	r3, [r3, #1]
 800085c:	3b01      	subs	r3, #1
 800085e:	74bb      	strb	r3, [r7, #18]
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 8000860:	7cfb      	ldrb	r3, [r7, #19]
 8000862:	2b04      	cmp	r3, #4
 8000864:	d002      	beq.n	800086c <dwt_configure+0x38>
 8000866:	7cfb      	ldrb	r3, [r7, #19]
 8000868:	2b07      	cmp	r3, #7
 800086a:	d101      	bne.n	8000870 <dwt_configure+0x3c>
 800086c:	2301      	movs	r3, #1
 800086e:	e000      	b.n	8000872 <dwt_configure+0x3e>
 8000870:	2300      	movs	r3, #0
 8000872:	747b      	strb	r3, [r7, #17]
           || (config->txPreambLength == DWT_PLEN_2048) || (config->txPreambLength == DWT_PLEN_4096));
    assert((config->phrMode == DWT_PHRMODE_STD) || (config->phrMode == DWT_PHRMODE_EXT));
#endif

    // For 110 kbps we need a special setup
    if(DWT_BR_110K == config->dataRate)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	79db      	ldrb	r3, [r3, #7]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d10b      	bne.n	8000894 <dwt_configure+0x60>
    {
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 800087c:	4b97      	ldr	r3, [pc, #604]	; (8000adc <dwt_configure+0x2a8>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	691a      	ldr	r2, [r3, #16]
 8000882:	4b96      	ldr	r3, [pc, #600]	; (8000adc <dwt_configure+0x2a8>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800088a:	611a      	str	r2, [r3, #16]
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
 800088c:	8abb      	ldrh	r3, [r7, #20]
 800088e:	08db      	lsrs	r3, r3, #3
 8000890:	82bb      	strh	r3, [r7, #20]
 8000892:	e007      	b.n	80008a4 <dwt_configure+0x70>
    }
    else
    {
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
 8000894:	4b91      	ldr	r3, [pc, #580]	; (8000adc <dwt_configure+0x2a8>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	691a      	ldr	r2, [r3, #16]
 800089a:	4b90      	ldr	r3, [pc, #576]	; (8000adc <dwt_configure+0x2a8>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80008a2:	611a      	str	r2, [r3, #16]
    }

    pdw1000local->longFrames = config->phrMode ;
 80008a4:	4b8d      	ldr	r3, [pc, #564]	; (8000adc <dwt_configure+0x2a8>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	7a12      	ldrb	r2, [r2, #8]
 80008ac:	729a      	strb	r2, [r3, #10]

    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
 80008ae:	4b8b      	ldr	r3, [pc, #556]	; (8000adc <dwt_configure+0x2a8>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	691a      	ldr	r2, [r3, #16]
 80008b4:	4b89      	ldr	r3, [pc, #548]	; (8000adc <dwt_configure+0x2a8>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80008bc:	611a      	str	r2, [r3, #16]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 80008be:	4b87      	ldr	r3, [pc, #540]	; (8000adc <dwt_configure+0x2a8>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	6919      	ldr	r1, [r3, #16]
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	7a1b      	ldrb	r3, [r3, #8]
 80008c8:	041b      	lsls	r3, r3, #16
 80008ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80008ce:	4b83      	ldr	r3, [pc, #524]	; (8000adc <dwt_configure+0x2a8>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	430a      	orrs	r2, r1
 80008d4:	611a      	str	r2, [r3, #16]

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 80008d6:	4b81      	ldr	r3, [pc, #516]	; (8000adc <dwt_configure+0x2a8>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	691b      	ldr	r3, [r3, #16]
 80008dc:	461a      	mov	r2, r3
 80008de:	2100      	movs	r1, #0
 80008e0:	2004      	movs	r0, #4
 80008e2:	f000 fa9c 	bl	8000e1e <dwt_write32bitoffsetreg>
    // Set the lde_replicaCoeff
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16) ;
 80008e6:	8abb      	ldrh	r3, [r7, #20]
 80008e8:	461a      	mov	r2, r3
 80008ea:	f642 0104 	movw	r1, #10244	; 0x2804
 80008ee:	202e      	movs	r0, #46	; 0x2e
 80008f0:	f000 fa79 	bl	8000de6 <dwt_write16bitoffsetreg>

    _dwt_configlde(prfIndex);
 80008f4:	7cbb      	ldrb	r3, [r7, #18]
 80008f6:	4618      	mov	r0, r3
 80008f8:	f000 fae5 	bl	8000ec6 <_dwt_configlde>

    // Configure PLL2/RF PLL block CFG/TUNE (for a given channel)
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
 80008fc:	7cfb      	ldrb	r3, [r7, #19]
 80008fe:	4a78      	ldr	r2, [pc, #480]	; (8000ae0 <dwt_configure+0x2ac>)
 8000900:	5cd3      	ldrb	r3, [r2, r3]
 8000902:	461a      	mov	r2, r3
 8000904:	4b77      	ldr	r3, [pc, #476]	; (8000ae4 <dwt_configure+0x2b0>)
 8000906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800090a:	461a      	mov	r2, r3
 800090c:	2107      	movs	r1, #7
 800090e:	202b      	movs	r0, #43	; 0x2b
 8000910:	f000 fa85 	bl	8000e1e <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
 8000914:	7cfb      	ldrb	r3, [r7, #19]
 8000916:	4a72      	ldr	r2, [pc, #456]	; (8000ae0 <dwt_configure+0x2ac>)
 8000918:	5cd3      	ldrb	r3, [r2, r3]
 800091a:	461a      	mov	r2, r3
 800091c:	4b72      	ldr	r3, [pc, #456]	; (8000ae8 <dwt_configure+0x2b4>)
 800091e:	5c9b      	ldrb	r3, [r3, r2]
 8000920:	461a      	mov	r2, r3
 8000922:	210b      	movs	r1, #11
 8000924:	202b      	movs	r0, #43	; 0x2b
 8000926:	f000 fa4b 	bl	8000dc0 <dwt_write8bitoffsetreg>

    // Configure RF RX blocks (for specified channel/bandwidth)
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
 800092a:	7c7b      	ldrb	r3, [r7, #17]
 800092c:	4a6f      	ldr	r2, [pc, #444]	; (8000aec <dwt_configure+0x2b8>)
 800092e:	5cd3      	ldrb	r3, [r2, r3]
 8000930:	461a      	mov	r2, r3
 8000932:	210b      	movs	r1, #11
 8000934:	2028      	movs	r0, #40	; 0x28
 8000936:	f000 fa43 	bl	8000dc0 <dwt_write8bitoffsetreg>

    // Configure RF TX blocks (for specified channel and PRF)
    // Configure RF TX control
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
 800093a:	7cfb      	ldrb	r3, [r7, #19]
 800093c:	4a68      	ldr	r2, [pc, #416]	; (8000ae0 <dwt_configure+0x2ac>)
 800093e:	5cd3      	ldrb	r3, [r2, r3]
 8000940:	461a      	mov	r2, r3
 8000942:	4b6b      	ldr	r3, [pc, #428]	; (8000af0 <dwt_configure+0x2bc>)
 8000944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000948:	461a      	mov	r2, r3
 800094a:	210c      	movs	r1, #12
 800094c:	2028      	movs	r0, #40	; 0x28
 800094e:	f000 fa66 	bl	8000e1e <dwt_write32bitoffsetreg>

    // Configure the baseband parameters (for specified PRF, bit rate, PAC, and SFD settings)
    // DTUNE0
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	79db      	ldrb	r3, [r3, #7]
 8000956:	4618      	mov	r0, r3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	799b      	ldrb	r3, [r3, #6]
 800095c:	4619      	mov	r1, r3
 800095e:	4a65      	ldr	r2, [pc, #404]	; (8000af4 <dwt_configure+0x2c0>)
 8000960:	0043      	lsls	r3, r0, #1
 8000962:	440b      	add	r3, r1
 8000964:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000968:	461a      	mov	r2, r3
 800096a:	2102      	movs	r1, #2
 800096c:	2027      	movs	r0, #39	; 0x27
 800096e:	f000 fa3a 	bl	8000de6 <dwt_write16bitoffsetreg>

    // DTUNE1
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
 8000972:	7cbb      	ldrb	r3, [r7, #18]
 8000974:	4a60      	ldr	r2, [pc, #384]	; (8000af8 <dwt_configure+0x2c4>)
 8000976:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800097a:	461a      	mov	r2, r3
 800097c:	2104      	movs	r1, #4
 800097e:	2027      	movs	r0, #39	; 0x27
 8000980:	f000 fa31 	bl	8000de6 <dwt_write16bitoffsetreg>

    if(config->dataRate == DWT_BR_110K)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	79db      	ldrb	r3, [r3, #7]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d105      	bne.n	8000998 <dwt_configure+0x164>
    {
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K);
 800098c:	2264      	movs	r2, #100	; 0x64
 800098e:	2106      	movs	r1, #6
 8000990:	2027      	movs	r0, #39	; 0x27
 8000992:	f000 fa28 	bl	8000de6 <dwt_write16bitoffsetreg>
 8000996:	e018      	b.n	80009ca <dwt_configure+0x196>
    }
    else
    {
        if(config->txPreambLength == DWT_PLEN_64)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	789b      	ldrb	r3, [r3, #2]
 800099c:	2b04      	cmp	r3, #4
 800099e:	d10a      	bne.n	80009b6 <dwt_configure+0x182>
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64);
 80009a0:	2210      	movs	r2, #16
 80009a2:	2106      	movs	r1, #6
 80009a4:	2027      	movs	r0, #39	; 0x27
 80009a6:	f000 fa1e 	bl	8000de6 <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
 80009aa:	2210      	movs	r2, #16
 80009ac:	2126      	movs	r1, #38	; 0x26
 80009ae:	2027      	movs	r0, #39	; 0x27
 80009b0:	f000 fa06 	bl	8000dc0 <dwt_write8bitoffsetreg>
 80009b4:	e009      	b.n	80009ca <dwt_configure+0x196>
        }
        else
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8);
 80009b6:	2220      	movs	r2, #32
 80009b8:	2106      	movs	r1, #6
 80009ba:	2027      	movs	r0, #39	; 0x27
 80009bc:	f000 fa13 	bl	8000de6 <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
 80009c0:	2228      	movs	r2, #40	; 0x28
 80009c2:	2126      	movs	r1, #38	; 0x26
 80009c4:	2027      	movs	r0, #39	; 0x27
 80009c6:	f000 f9fb 	bl	8000dc0 <dwt_write8bitoffsetreg>
        }
    }

    // DTUNE2
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
 80009ca:	7cbb      	ldrb	r3, [r7, #18]
 80009cc:	687a      	ldr	r2, [r7, #4]
 80009ce:	78d2      	ldrb	r2, [r2, #3]
 80009d0:	4611      	mov	r1, r2
 80009d2:	4a4a      	ldr	r2, [pc, #296]	; (8000afc <dwt_configure+0x2c8>)
 80009d4:	009b      	lsls	r3, r3, #2
 80009d6:	440b      	add	r3, r1
 80009d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009dc:	461a      	mov	r2, r3
 80009de:	2108      	movs	r1, #8
 80009e0:	2027      	movs	r0, #39	; 0x27
 80009e2:	f000 fa1c 	bl	8000e1e <dwt_write32bitoffsetreg>

    // DTUNE3 (SFD timeout)
    // Don't allow 0 - SFD timeout will always be enabled
    if(config->sfdTO == 0)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	895b      	ldrh	r3, [r3, #10]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d103      	bne.n	80009f6 <dwt_configure+0x1c2>
    {
        config->sfdTO = DWT_SFDTOC_DEF;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	f241 0241 	movw	r2, #4161	; 0x1041
 80009f4:	815a      	strh	r2, [r3, #10]
    }
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	895b      	ldrh	r3, [r3, #10]
 80009fa:	461a      	mov	r2, r3
 80009fc:	2120      	movs	r1, #32
 80009fe:	2027      	movs	r0, #39	; 0x27
 8000a00:	f000 f9f1 	bl	8000de6 <dwt_write16bitoffsetreg>

    // Configure AGC parameters
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
 8000a04:	4b3e      	ldr	r3, [pc, #248]	; (8000b00 <dwt_configure+0x2cc>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	461a      	mov	r2, r3
 8000a0a:	210c      	movs	r1, #12
 8000a0c:	2023      	movs	r0, #35	; 0x23
 8000a0e:	f000 fa06 	bl	8000e1e <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
 8000a12:	7cbb      	ldrb	r3, [r7, #18]
 8000a14:	4a3a      	ldr	r2, [pc, #232]	; (8000b00 <dwt_configure+0x2cc>)
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	4413      	add	r3, r2
 8000a1a:	889b      	ldrh	r3, [r3, #4]
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	2104      	movs	r1, #4
 8000a20:	2023      	movs	r0, #35	; 0x23
 8000a22:	f000 f9e0 	bl	8000de6 <dwt_write16bitoffsetreg>

    // Set (non-standard) user SFD for improved performance,
    if(config->nsSFD)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	799b      	ldrb	r3, [r3, #6]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d00d      	beq.n	8000a4a <dwt_configure+0x216>
    {
        // Write non standard (DW) SFD length
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	79db      	ldrb	r3, [r3, #7]
 8000a32:	461a      	mov	r2, r3
 8000a34:	4b33      	ldr	r3, [pc, #204]	; (8000b04 <dwt_configure+0x2d0>)
 8000a36:	5c9b      	ldrb	r3, [r3, r2]
 8000a38:	461a      	mov	r2, r3
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	2021      	movs	r0, #33	; 0x21
 8000a3e:	f000 f9bf 	bl	8000dc0 <dwt_write8bitoffsetreg>
        nsSfd_result = 3 ;
 8000a42:	2303      	movs	r3, #3
 8000a44:	75fb      	strb	r3, [r7, #23]
        useDWnsSFD = 1 ;
 8000a46:	2301      	movs	r3, #1
 8000a48:	75bb      	strb	r3, [r7, #22]
    }
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8000a4a:	7cfb      	ldrb	r3, [r7, #19]
 8000a4c:	f003 020f 	and.w	r2, r3, #15
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 8000a50:	7cfb      	ldrb	r3, [r7, #19]
 8000a52:	011b      	lsls	r3, r3, #4
 8000a54:	b2db      	uxtb	r3, r3
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8000a56:	431a      	orrs	r2, r3
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	785b      	ldrb	r3, [r3, #1]
 8000a5c:	049b      	lsls	r3, r3, #18
 8000a5e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 8000a62:	431a      	orrs	r2, r3
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 8000a64:	7dfb      	ldrb	r3, [r7, #23]
 8000a66:	051b      	lsls	r3, r3, #20
 8000a68:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 8000a6c:	431a      	orrs	r2, r3
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 8000a6e:	7dbb      	ldrb	r3, [r7, #22]
 8000a70:	045b      	lsls	r3, r3, #17
 8000a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 8000a76:	431a      	orrs	r2, r3
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	791b      	ldrb	r3, [r3, #4]
 8000a7c:	059b      	lsls	r3, r3, #22
 8000a7e:	f003 63f8 	and.w	r3, r3, #130023424	; 0x7c00000
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 8000a82:	431a      	orrs	r2, r3
              (CHAN_CTRL_RX_PCOD_MASK & ((uint32)config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	795b      	ldrb	r3, [r3, #5]
 8000a88:	06db      	lsls	r3, r3, #27
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(CHAN_CTRL_ID,regval) ;
 8000a8e:	68fa      	ldr	r2, [r7, #12]
 8000a90:	2100      	movs	r1, #0
 8000a92:	201f      	movs	r0, #31
 8000a94:	f000 f9c3 	bl	8000e1e <dwt_write32bitoffsetreg>

    // Set up TX Preamble Size, PRF and Data Rate
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	789a      	ldrb	r2, [r3, #2]
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	785b      	ldrb	r3, [r3, #1]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	0419      	lsls	r1, r3, #16
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	79db      	ldrb	r3, [r3, #7]
 8000aaa:	035a      	lsls	r2, r3, #13
 8000aac:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <dwt_configure+0x2a8>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	430a      	orrs	r2, r1
 8000ab2:	60da      	str	r2, [r3, #12]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
 8000ab4:	4b09      	ldr	r3, [pc, #36]	; (8000adc <dwt_configure+0x2a8>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	68db      	ldr	r3, [r3, #12]
 8000aba:	461a      	mov	r2, r3
 8000abc:	2100      	movs	r1, #0
 8000abe:	2008      	movs	r0, #8
 8000ac0:	f000 f9ad 	bl	8000e1e <dwt_write32bitoffsetreg>

    // The SFD transmit pattern is initialised by the DW1000 upon a user TX request, but (due to an IC issue) it is not done for an auto-ACK TX. The
    // SYS_CTRL write below works around this issue, by simultaneously initiating and aborting a transmission, which correctly initialises the SFD
    // after its configuration or reconfiguration.
    // This issue is not documented at the time of writing this code. It should be in next release of DW1000 User Manual (v2.09, from July 2016).
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
 8000ac4:	2242      	movs	r2, #66	; 0x42
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	200d      	movs	r0, #13
 8000aca:	f000 f979 	bl	8000dc0 <dwt_write8bitoffsetreg>
} // end dwt_configure()
 8000ace:	bf00      	nop
 8000ad0:	3718      	adds	r7, #24
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	08006dcc 	.word	0x08006dcc
 8000adc:	20000000 	.word	0x20000000
 8000ae0:	08006d4c 	.word	0x08006d4c
 8000ae4:	08006d6c 	.word	0x08006d6c
 8000ae8:	08006d84 	.word	0x08006d84
 8000aec:	08006d8c 	.word	0x08006d8c
 8000af0:	08006d54 	.word	0x08006d54
 8000af4:	08006d9c 	.word	0x08006d9c
 8000af8:	08006da8 	.word	0x08006da8
 8000afc:	08006dac 	.word	0x08006dac
 8000b00:	08006d90 	.word	0x08006d90
 8000b04:	08006d98 	.word	0x08006d98

08000b08 <dwt_writetxdata>:
 * output parameters
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error
 */
int dwt_writetxdata(uint16 txFrameLength, uint8 *txFrameBytes, uint16 txBufferOffset)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	6039      	str	r1, [r7, #0]
 8000b12:	80fb      	strh	r3, [r7, #6]
 8000b14:	4613      	mov	r3, r2
 8000b16:	80bb      	strh	r3, [r7, #4]
    assert(txFrameLength >= 2);
    assert((pdw1000local->longFrames && (txFrameLength <= 1023)) || (txFrameLength <= 127));
    assert((txBufferOffset + txFrameLength) <= 1024);
#endif

    if ((txBufferOffset + txFrameLength) <= 1024)
 8000b18:	88ba      	ldrh	r2, [r7, #4]
 8000b1a:	88fb      	ldrh	r3, [r7, #6]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b22:	dc09      	bgt.n	8000b38 <dwt_writetxdata+0x30>
    {
        // Write the data to the IC TX buffer, (-2 bytes for auto generated CRC)
        dwt_writetodevice( TX_BUFFER_ID, txBufferOffset, txFrameLength-2, txFrameBytes);
 8000b24:	88fb      	ldrh	r3, [r7, #6]
 8000b26:	3b02      	subs	r3, #2
 8000b28:	461a      	mov	r2, r3
 8000b2a:	88b9      	ldrh	r1, [r7, #4]
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	2009      	movs	r0, #9
 8000b30:	f000 f83a 	bl	8000ba8 <dwt_writetodevice>
        return DWT_SUCCESS;
 8000b34:	2300      	movs	r3, #0
 8000b36:	e001      	b.n	8000b3c <dwt_writetxdata+0x34>
    }
    else
    {
        return DWT_ERROR;
 8000b38:	f04f 33ff 	mov.w	r3, #4294967295
    }
} // end dwt_writetxdata()
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <dwt_writetxfctrl>:
 * output parameters
 *
 * no return value
 */
void dwt_writetxfctrl(uint16 txFrameLength, uint16 txBufferOffset, int ranging)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	603a      	str	r2, [r7, #0]
 8000b4e:	80fb      	strh	r3, [r7, #6]
 8000b50:	460b      	mov	r3, r1
 8000b52:	80bb      	strh	r3, [r7, #4]
    assert((ranging == 0) || (ranging == 1))
#endif

    // Write the frame length to the TX frame control register
    // pdw1000local->txFCTRL has kept configured bit rate information
    uint32 reg32 = pdw1000local->txFCTRL | txFrameLength | ((uint32)txBufferOffset << TX_FCTRL_TXBOFFS_SHFT) | ((uint32)ranging << TX_FCTRL_TR_SHFT);
 8000b54:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <dwt_writetxfctrl+0x3c>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	68da      	ldr	r2, [r3, #12]
 8000b5a:	88fb      	ldrh	r3, [r7, #6]
 8000b5c:	431a      	orrs	r2, r3
 8000b5e:	88bb      	ldrh	r3, [r7, #4]
 8000b60:	059b      	lsls	r3, r3, #22
 8000b62:	431a      	orrs	r2, r3
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	03db      	lsls	r3, r3, #15
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	60fb      	str	r3, [r7, #12]
    dwt_write32bitreg(TX_FCTRL_ID, reg32);
 8000b6c:	68fa      	ldr	r2, [r7, #12]
 8000b6e:	2100      	movs	r1, #0
 8000b70:	2008      	movs	r0, #8
 8000b72:	f000 f954 	bl	8000e1e <dwt_write32bitoffsetreg>
} // end dwt_writetxfctrl()
 8000b76:	bf00      	nop
 8000b78:	3710      	adds	r7, #16
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000000 	.word	0x20000000

08000b84 <dwt_readrxdata>:
 * output parameters
 *
 * no return value
 */
void dwt_readrxdata(uint8 *buffer, uint16 length, uint16 rxBufferOffset)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	460b      	mov	r3, r1
 8000b8e:	807b      	strh	r3, [r7, #2]
 8000b90:	4613      	mov	r3, r2
 8000b92:	803b      	strh	r3, [r7, #0]
    dwt_readfromdevice(RX_BUFFER_ID,rxBufferOffset,length,buffer) ;
 8000b94:	887a      	ldrh	r2, [r7, #2]
 8000b96:	8839      	ldrh	r1, [r7, #0]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2011      	movs	r0, #17
 8000b9c:	f000 f860 	bl	8000c60 <dwt_readfromdevice>
}
 8000ba0:	bf00      	nop
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <dwt_writetodevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    const uint8   *buffer
)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60ba      	str	r2, [r7, #8]
 8000bb0:	607b      	str	r3, [r7, #4]
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	81fb      	strh	r3, [r7, #14]
 8000bb6:	460b      	mov	r3, r1
 8000bb8:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8000bba:	2300      	movs	r3, #0
 8000bbc:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting WRITE operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8000bbe:	89bb      	ldrh	r3, [r7, #12]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d10d      	bne.n	8000be0 <dwt_writetodevice+0x38>
    {
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8000bc4:	89fb      	ldrh	r3, [r7, #14]
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	1c59      	adds	r1, r3, #1
 8000bcc:	6179      	str	r1, [r7, #20]
 8000bce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000bd2:	b2d2      	uxtb	r2, r2
 8000bd4:	f107 0118 	add.w	r1, r7, #24
 8000bd8:	440b      	add	r3, r1
 8000bda:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000bde:	e033      	b.n	8000c48 <dwt_writetodevice+0xa0>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8000be0:	89fb      	ldrh	r3, [r7, #14]
 8000be2:	b2da      	uxtb	r2, r3
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	1c59      	adds	r1, r3, #1
 8000be8:	6179      	str	r1, [r7, #20]
 8000bea:	f062 023f 	orn	r2, r2, #63	; 0x3f
 8000bee:	b2d2      	uxtb	r2, r2
 8000bf0:	f107 0118 	add.w	r1, r7, #24
 8000bf4:	440b      	add	r3, r1
 8000bf6:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8000bfa:	89bb      	ldrh	r3, [r7, #12]
 8000bfc:	2b7f      	cmp	r3, #127	; 0x7f
 8000bfe:	d80a      	bhi.n	8000c16 <dwt_writetodevice+0x6e>
        {
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	1c5a      	adds	r2, r3, #1
 8000c04:	617a      	str	r2, [r7, #20]
 8000c06:	89ba      	ldrh	r2, [r7, #12]
 8000c08:	b2d2      	uxtb	r2, r2
 8000c0a:	f107 0118 	add.w	r1, r7, #24
 8000c0e:	440b      	add	r3, r1
 8000c10:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000c14:	e018      	b.n	8000c48 <dwt_writetodevice+0xa0>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8000c16:	89bb      	ldrh	r3, [r7, #12]
 8000c18:	b2da      	uxtb	r2, r3
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	1c59      	adds	r1, r3, #1
 8000c1e:	6179      	str	r1, [r7, #20]
 8000c20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000c24:	b2d2      	uxtb	r2, r2
 8000c26:	f107 0118 	add.w	r1, r7, #24
 8000c2a:	440b      	add	r3, r1
 8000c2c:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8000c30:	89bb      	ldrh	r3, [r7, #12]
 8000c32:	09db      	lsrs	r3, r3, #7
 8000c34:	b299      	uxth	r1, r3
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	1c5a      	adds	r2, r3, #1
 8000c3a:	617a      	str	r2, [r7, #20]
 8000c3c:	b2ca      	uxtb	r2, r1
 8000c3e:	f107 0118 	add.w	r1, r7, #24
 8000c42:	440b      	add	r3, r1
 8000c44:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Write it to the SPI
    writetospi(cnt,header,length,buffer);
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	b298      	uxth	r0, r3
 8000c4c:	f107 0110 	add.w	r1, r7, #16
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	68ba      	ldr	r2, [r7, #8]
 8000c54:	f000 fb52 	bl	80012fc <writetospi>
} // end dwt_writetodevice()
 8000c58:	bf00      	nop
 8000c5a:	3718      	adds	r7, #24
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <dwt_readfromdevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    uint8         *buffer
)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60ba      	str	r2, [r7, #8]
 8000c68:	607b      	str	r3, [r7, #4]
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	81fb      	strh	r3, [r7, #14]
 8000c6e:	460b      	mov	r3, r1
 8000c70:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8000c72:	2300      	movs	r3, #0
 8000c74:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting READ operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8000c76:	89bb      	ldrh	r3, [r7, #12]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d10a      	bne.n	8000c92 <dwt_readfromdevice+0x32>
    {
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	1c5a      	adds	r2, r3, #1
 8000c80:	617a      	str	r2, [r7, #20]
 8000c82:	89fa      	ldrh	r2, [r7, #14]
 8000c84:	b2d2      	uxtb	r2, r2
 8000c86:	f107 0118 	add.w	r1, r7, #24
 8000c8a:	440b      	add	r3, r1
 8000c8c:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000c90:	e033      	b.n	8000cfa <dwt_readfromdevice+0x9a>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8000c92:	89fb      	ldrh	r3, [r7, #14]
 8000c94:	b2da      	uxtb	r2, r3
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	1c59      	adds	r1, r3, #1
 8000c9a:	6179      	str	r1, [r7, #20]
 8000c9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ca0:	b2d2      	uxtb	r2, r2
 8000ca2:	f107 0118 	add.w	r1, r7, #24
 8000ca6:	440b      	add	r3, r1
 8000ca8:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8000cac:	89bb      	ldrh	r3, [r7, #12]
 8000cae:	2b7f      	cmp	r3, #127	; 0x7f
 8000cb0:	d80a      	bhi.n	8000cc8 <dwt_readfromdevice+0x68>
        {
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	1c5a      	adds	r2, r3, #1
 8000cb6:	617a      	str	r2, [r7, #20]
 8000cb8:	89ba      	ldrh	r2, [r7, #12]
 8000cba:	b2d2      	uxtb	r2, r2
 8000cbc:	f107 0118 	add.w	r1, r7, #24
 8000cc0:	440b      	add	r3, r1
 8000cc2:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000cc6:	e018      	b.n	8000cfa <dwt_readfromdevice+0x9a>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8000cc8:	89bb      	ldrh	r3, [r7, #12]
 8000cca:	b2da      	uxtb	r2, r3
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	1c59      	adds	r1, r3, #1
 8000cd0:	6179      	str	r1, [r7, #20]
 8000cd2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000cd6:	b2d2      	uxtb	r2, r2
 8000cd8:	f107 0118 	add.w	r1, r7, #24
 8000cdc:	440b      	add	r3, r1
 8000cde:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8000ce2:	89bb      	ldrh	r3, [r7, #12]
 8000ce4:	09db      	lsrs	r3, r3, #7
 8000ce6:	b299      	uxth	r1, r3
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	1c5a      	adds	r2, r3, #1
 8000cec:	617a      	str	r2, [r7, #20]
 8000cee:	b2ca      	uxtb	r2, r1
 8000cf0:	f107 0118 	add.w	r1, r7, #24
 8000cf4:	440b      	add	r3, r1
 8000cf6:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Do the read from the SPI
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	b298      	uxth	r0, r3
 8000cfe:	f107 0110 	add.w	r1, r7, #16
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	68ba      	ldr	r2, [r7, #8]
 8000d06:	f000 fb2d 	bl	8001364 <readfromspi>
} // end dwt_readfromdevice()
 8000d0a:	bf00      	nop
 8000d0c:	3718      	adds	r7, #24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <dwt_read32bitoffsetreg>:
 * output parameters
 *
 * returns 32 bit register value
 */
uint32 dwt_read32bitoffsetreg(int regFileID, int regOffset)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b086      	sub	sp, #24
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
 8000d1a:	6039      	str	r1, [r7, #0]
    uint32  regval = 0 ;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]
    int     j ;
    uint8   buffer[4] ;

    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	b298      	uxth	r0, r3
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	b299      	uxth	r1, r3
 8000d28:	f107 030c 	add.w	r3, r7, #12
 8000d2c:	2204      	movs	r2, #4
 8000d2e:	f7ff ff97 	bl	8000c60 <dwt_readfromdevice>

    for (j = 3 ; j >= 0 ; j --)
 8000d32:	2303      	movs	r3, #3
 8000d34:	613b      	str	r3, [r7, #16]
 8000d36:	e00b      	b.n	8000d50 <dwt_read32bitoffsetreg+0x3e>
    {
        regval = (regval << 8) + buffer[j] ;
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	021b      	lsls	r3, r3, #8
 8000d3c:	f107 010c 	add.w	r1, r7, #12
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	440a      	add	r2, r1
 8000d44:	7812      	ldrb	r2, [r2, #0]
 8000d46:	4413      	add	r3, r2
 8000d48:	617b      	str	r3, [r7, #20]
    for (j = 3 ; j >= 0 ; j --)
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	3b01      	subs	r3, #1
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	daf0      	bge.n	8000d38 <dwt_read32bitoffsetreg+0x26>
    }
    return regval ;
 8000d56:	697b      	ldr	r3, [r7, #20]

} // end dwt_read32bitoffsetreg()
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3718      	adds	r7, #24
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <dwt_read16bitoffsetreg>:
 * output parameters
 *
 * returns 16 bit register value
 */
uint16 dwt_read16bitoffsetreg(int regFileID, int regOffset)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	6039      	str	r1, [r7, #0]
    uint16  regval = 0 ;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	81fb      	strh	r3, [r7, #14]
    uint8   buffer[2] ;

    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	b298      	uxth	r0, r3
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	b299      	uxth	r1, r3
 8000d76:	f107 030c 	add.w	r3, r7, #12
 8000d7a:	2202      	movs	r2, #2
 8000d7c:	f7ff ff70 	bl	8000c60 <dwt_readfromdevice>

    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
 8000d80:	7b7b      	ldrb	r3, [r7, #13]
 8000d82:	b29b      	uxth	r3, r3
 8000d84:	021b      	lsls	r3, r3, #8
 8000d86:	b29a      	uxth	r2, r3
 8000d88:	7b3b      	ldrb	r3, [r7, #12]
 8000d8a:	b29b      	uxth	r3, r3
 8000d8c:	4413      	add	r3, r2
 8000d8e:	81fb      	strh	r3, [r7, #14]
    return regval ;
 8000d90:	89fb      	ldrh	r3, [r7, #14]

} // end dwt_read16bitoffsetreg()
 8000d92:	4618      	mov	r0, r3
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <dwt_read8bitoffsetreg>:
 * output parameters
 *
 * returns 8-bit register value
 */
uint8 dwt_read8bitoffsetreg(int regFileID, int regOffset)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b084      	sub	sp, #16
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
 8000da2:	6039      	str	r1, [r7, #0]
    uint8 regval;

    dwt_readfromdevice(regFileID, regOffset, 1, &regval);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	b298      	uxth	r0, r3
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	b299      	uxth	r1, r3
 8000dac:	f107 030f 	add.w	r3, r7, #15
 8000db0:	2201      	movs	r2, #1
 8000db2:	f7ff ff55 	bl	8000c60 <dwt_readfromdevice>

    return regval ;
 8000db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3710      	adds	r7, #16
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <dwt_write8bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write8bitoffsetreg(int regFileID, int regOffset, uint8 regval)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	4613      	mov	r3, r2
 8000dcc:	71fb      	strb	r3, [r7, #7]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	b298      	uxth	r0, r3
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	b299      	uxth	r1, r3
 8000dd6:	1dfb      	adds	r3, r7, #7
 8000dd8:	2201      	movs	r2, #1
 8000dda:	f7ff fee5 	bl	8000ba8 <dwt_writetodevice>
}
 8000dde:	bf00      	nop
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <dwt_write16bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write16bitoffsetreg(int regFileID, int regOffset, uint16 regval)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b086      	sub	sp, #24
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	60f8      	str	r0, [r7, #12]
 8000dee:	60b9      	str	r1, [r7, #8]
 8000df0:	4613      	mov	r3, r2
 8000df2:	80fb      	strh	r3, [r7, #6]
    uint8   buffer[2] ;

    buffer[0] = regval & 0xFF;
 8000df4:	88fb      	ldrh	r3, [r7, #6]
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	753b      	strb	r3, [r7, #20]
    buffer[1] = regval >> 8 ;
 8000dfa:	88fb      	ldrh	r3, [r7, #6]
 8000dfc:	0a1b      	lsrs	r3, r3, #8
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	757b      	strb	r3, [r7, #21]

    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	b298      	uxth	r0, r3
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	b299      	uxth	r1, r3
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	2202      	movs	r2, #2
 8000e12:	f7ff fec9 	bl	8000ba8 <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 8000e16:	bf00      	nop
 8000e18:	3718      	adds	r7, #24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <dwt_write32bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write32bitoffsetreg(int regFileID, int regOffset, uint32 regval)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b086      	sub	sp, #24
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	60f8      	str	r0, [r7, #12]
 8000e26:	60b9      	str	r1, [r7, #8]
 8000e28:	607a      	str	r2, [r7, #4]
    int     j ;
    uint8   buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	617b      	str	r3, [r7, #20]
 8000e2e:	e00d      	b.n	8000e4c <dwt_write32bitoffsetreg+0x2e>
    {
        buffer[j] = regval & 0xff ;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	b2d9      	uxtb	r1, r3
 8000e34:	f107 0210 	add.w	r2, r7, #16
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	460a      	mov	r2, r1
 8000e3e:	701a      	strb	r2, [r3, #0]
        regval >>= 8 ;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	0a1b      	lsrs	r3, r3, #8
 8000e44:	607b      	str	r3, [r7, #4]
    for ( j = 0 ; j < 4 ; j++ )
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	617b      	str	r3, [r7, #20]
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	2b03      	cmp	r3, #3
 8000e50:	ddee      	ble.n	8000e30 <dwt_write32bitoffsetreg+0x12>
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	b298      	uxth	r0, r3
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	b299      	uxth	r1, r3
 8000e5a:	f107 0310 	add.w	r3, r7, #16
 8000e5e:	2204      	movs	r2, #4
 8000e60:	f7ff fea2 	bl	8000ba8 <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 8000e64:	bf00      	nop
 8000e66:	3718      	adds	r7, #24
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <_dwt_otpread>:
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32 _dwt_otpread(uint16 address)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	80fb      	strh	r3, [r7, #6]
    uint32 ret_data;

    // Write the address
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);
 8000e76:	88fb      	ldrh	r3, [r7, #6]
 8000e78:	461a      	mov	r2, r3
 8000e7a:	2104      	movs	r1, #4
 8000e7c:	202d      	movs	r0, #45	; 0x2d
 8000e7e:	f7ff ffb2 	bl	8000de6 <dwt_write16bitoffsetreg>

    // Perform OTP Read - Manual read mode has to be set
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
 8000e82:	2203      	movs	r2, #3
 8000e84:	2106      	movs	r1, #6
 8000e86:	202d      	movs	r0, #45	; 0x2d
 8000e88:	f7ff ff9a 	bl	8000dc0 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2106      	movs	r1, #6
 8000e90:	202d      	movs	r0, #45	; 0x2d
 8000e92:	f7ff ff95 	bl	8000dc0 <dwt_write8bitoffsetreg>

    // Read read data, available 40ns after rising edge of OTP_READ
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
 8000e96:	210a      	movs	r1, #10
 8000e98:	202d      	movs	r0, #45	; 0x2d
 8000e9a:	f7ff ff3a 	bl	8000d12 <dwt_read32bitoffsetreg>
 8000e9e:	60f8      	str	r0, [r7, #12]

    // Return the 32bit of read data
    return ret_data;
 8000ea0:	68fb      	ldr	r3, [r7, #12]
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <_dwt_aonarrayupload>:
 * output parameters
 *
 * no return value
 */
void _dwt_aonarrayupload(void)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	af00      	add	r7, sp, #0
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2102      	movs	r1, #2
 8000eb2:	202c      	movs	r0, #44	; 0x2c
 8000eb4:	f7ff ff84 	bl	8000dc0 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
 8000eb8:	2202      	movs	r2, #2
 8000eba:	2102      	movs	r1, #2
 8000ebc:	202c      	movs	r0, #44	; 0x2c
 8000ebe:	f7ff ff7f 	bl	8000dc0 <dwt_write8bitoffsetreg>
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <_dwt_configlde>:
 * output parameters
 *
 * no return value
 */
void _dwt_configlde(int prfIndex)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b082      	sub	sp, #8
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
 8000ece:	226d      	movs	r2, #109	; 0x6d
 8000ed0:	f640 0106 	movw	r1, #2054	; 0x806
 8000ed4:	202e      	movs	r0, #46	; 0x2e
 8000ed6:	f7ff ff73 	bl	8000dc0 <dwt_write8bitoffsetreg>

    if(prfIndex)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d007      	beq.n	8000ef0 <_dwt_configlde+0x2a>
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
 8000ee0:	f240 6207 	movw	r2, #1543	; 0x607
 8000ee4:	f641 0106 	movw	r1, #6150	; 0x1806
 8000ee8:	202e      	movs	r0, #46	; 0x2e
 8000eea:	f7ff ff7c 	bl	8000de6 <dwt_write16bitoffsetreg>
    }
    else
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
    }
}
 8000eee:	e006      	b.n	8000efe <_dwt_configlde+0x38>
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
 8000ef0:	f241 6207 	movw	r2, #5639	; 0x1607
 8000ef4:	f641 0106 	movw	r1, #6150	; 0x1806
 8000ef8:	202e      	movs	r0, #46	; 0x2e
 8000efa:	f7ff ff74 	bl	8000de6 <dwt_write16bitoffsetreg>
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <_dwt_loaducodefromrom>:
 * output parameters
 *
 * no return value
 */
void _dwt_loaducodefromrom(void)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	af00      	add	r7, sp, #0
    // Set up clocks
    _dwt_enableclocks(FORCE_LDE);
 8000f0a:	200e      	movs	r0, #14
 8000f0c:	f000 f80e 	bl	8000f2c <_dwt_enableclocks>

    // Kick off the LDE load
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
 8000f10:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f14:	2106      	movs	r1, #6
 8000f16:	202d      	movs	r0, #45	; 0x2d
 8000f18:	f7ff ff65 	bl	8000de6 <dwt_write16bitoffsetreg>

    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 8000f1c:	2001      	movs	r0, #1
 8000f1e:	f000 f9e1 	bl	80012e4 <deca_sleep>

    // Default clocks (ENABLE_ALL_SEQ)
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 8000f22:	2001      	movs	r0, #1
 8000f24:	f000 f802 	bl	8000f2c <_dwt_enableclocks>
}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <_dwt_enableclocks>:
 * output parameters none
 *
 * no return value
 */
void _dwt_enableclocks(int clocks)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
    uint8 reg[2];

    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
 8000f34:	f107 030c 	add.w	r3, r7, #12
 8000f38:	2202      	movs	r2, #2
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	2036      	movs	r0, #54	; 0x36
 8000f3e:	f7ff fe8f 	bl	8000c60 <dwt_readfromdevice>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2b0e      	cmp	r3, #14
 8000f46:	d876      	bhi.n	8001036 <_dwt_enableclocks+0x10a>
 8000f48:	a201      	add	r2, pc, #4	; (adr r2, 8000f50 <_dwt_enableclocks+0x24>)
 8000f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f4e:	bf00      	nop
 8000f50:	08000f9d 	.word	0x08000f9d
 8000f54:	08000f8d 	.word	0x08000f8d
 8000f58:	08000fb3 	.word	0x08000fb3
 8000f5c:	08001037 	.word	0x08001037
 8000f60:	08001037 	.word	0x08001037
 8000f64:	08001037 	.word	0x08001037
 8000f68:	08001037 	.word	0x08001037
 8000f6c:	08000fc9 	.word	0x08000fc9
 8000f70:	08000fe9 	.word	0x08000fe9
 8000f74:	08001037 	.word	0x08001037
 8000f78:	08001037 	.word	0x08001037
 8000f7c:	08000fff 	.word	0x08000fff
 8000f80:	0800100b 	.word	0x0800100b
 8000f84:	08001017 	.word	0x08001017
 8000f88:	0800102d 	.word	0x0800102d
    switch(clocks)
    {
        case ENABLE_ALL_SEQ:
        {
            reg[0] = 0x00 ;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	733b      	strb	r3, [r7, #12]
            reg[1] = reg[1] & 0xfe;
 8000f90:	7b7b      	ldrb	r3, [r7, #13]
 8000f92:	f023 0301 	bic.w	r3, r3, #1
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000f9a:	e04d      	b.n	8001038 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_XTI:
        {
            // System and RX
            reg[0] = 0x01 | (reg[0] & 0xfc);
 8000f9c:	7b3b      	ldrb	r3, [r7, #12]
 8000f9e:	b25b      	sxtb	r3, r3
 8000fa0:	f023 0303 	bic.w	r3, r3, #3
 8000fa4:	b25b      	sxtb	r3, r3
 8000fa6:	f043 0301 	orr.w	r3, r3, #1
 8000faa:	b25b      	sxtb	r3, r3
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	733b      	strb	r3, [r7, #12]
        }
        break;
 8000fb0:	e042      	b.n	8001038 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_PLL:
        {
            // System
            reg[0] = 0x02 | (reg[0] & 0xfc);
 8000fb2:	7b3b      	ldrb	r3, [r7, #12]
 8000fb4:	b25b      	sxtb	r3, r3
 8000fb6:	f023 0303 	bic.w	r3, r3, #3
 8000fba:	b25b      	sxtb	r3, r3
 8000fbc:	f043 0302 	orr.w	r3, r3, #2
 8000fc0:	b25b      	sxtb	r3, r3
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	733b      	strb	r3, [r7, #12]
        }
        break;
 8000fc6:	e037      	b.n	8001038 <_dwt_enableclocks+0x10c>
        case READ_ACC_ON:
        {
            reg[0] = 0x48 | (reg[0] & 0xb3);
 8000fc8:	7b3b      	ldrb	r3, [r7, #12]
 8000fca:	b25b      	sxtb	r3, r3
 8000fcc:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8000fd0:	b25b      	sxtb	r3, r3
 8000fd2:	f043 0348 	orr.w	r3, r3, #72	; 0x48
 8000fd6:	b25b      	sxtb	r3, r3
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x80 | reg[1];
 8000fdc:	7b7b      	ldrb	r3, [r7, #13]
 8000fde:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000fe6:	e027      	b.n	8001038 <_dwt_enableclocks+0x10c>
        case READ_ACC_OFF:
        {
            reg[0] = reg[0] & 0xb3;
 8000fe8:	7b3b      	ldrb	r3, [r7, #12]
 8000fea:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x7f & reg[1];
 8000ff2:	7b7b      	ldrb	r3, [r7, #13]
 8000ff4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000ffc:	e01c      	b.n	8001038 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_ON:
        {
            reg[1] = 0x02 | reg[1];
 8000ffe:	7b7b      	ldrb	r3, [r7, #13]
 8001000:	f043 0302 	orr.w	r3, r3, #2
 8001004:	b2db      	uxtb	r3, r3
 8001006:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001008:	e016      	b.n	8001038 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_OFF:
        {
            reg[1] = reg[1] & 0xfd;
 800100a:	7b7b      	ldrb	r3, [r7, #13]
 800100c:	f023 0302 	bic.w	r3, r3, #2
 8001010:	b2db      	uxtb	r3, r3
 8001012:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001014:	e010      	b.n	8001038 <_dwt_enableclocks+0x10c>
        case FORCE_TX_PLL:
        {
            reg[0] = 0x20 | (reg[0] & 0xcf);
 8001016:	7b3b      	ldrb	r3, [r7, #12]
 8001018:	b25b      	sxtb	r3, r3
 800101a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800101e:	b25b      	sxtb	r3, r3
 8001020:	f043 0320 	orr.w	r3, r3, #32
 8001024:	b25b      	sxtb	r3, r3
 8001026:	b2db      	uxtb	r3, r3
 8001028:	733b      	strb	r3, [r7, #12]
        }
        break;
 800102a:	e005      	b.n	8001038 <_dwt_enableclocks+0x10c>
        case FORCE_LDE:
        {
            reg[0] = 0x01;
 800102c:	2301      	movs	r3, #1
 800102e:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x03;
 8001030:	2303      	movs	r3, #3
 8001032:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001034:	e000      	b.n	8001038 <_dwt_enableclocks+0x10c>
        default:
        break;
 8001036:	bf00      	nop
    }


    // Need to write lower byte separately before setting the higher byte(s)
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
 8001038:	f107 030c 	add.w	r3, r7, #12
 800103c:	2201      	movs	r2, #1
 800103e:	2100      	movs	r1, #0
 8001040:	2036      	movs	r0, #54	; 0x36
 8001042:	f7ff fdb1 	bl	8000ba8 <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
 8001046:	f107 030c 	add.w	r3, r7, #12
 800104a:	3301      	adds	r3, #1
 800104c:	2201      	movs	r2, #1
 800104e:	2101      	movs	r1, #1
 8001050:	2036      	movs	r0, #54	; 0x36
 8001052:	f7ff fda9 	bl	8000ba8 <dwt_writetodevice>

} // end _dwt_enableclocks()
 8001056:	bf00      	nop
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop

08001060 <_dwt_disablesequencing>:
 * output parameters none
 *
 * no return value
 */
void _dwt_disablesequencing(void) // Disable sequencing and go to state "INIT"
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 8001064:	2000      	movs	r0, #0
 8001066:	f7ff ff61 	bl	8000f2c <_dwt_enableclocks>

    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
 800106a:	2200      	movs	r2, #0
 800106c:	2104      	movs	r1, #4
 800106e:	2036      	movs	r0, #54	; 0x36
 8001070:	f7ff feb9 	bl	8000de6 <dwt_write16bitoffsetreg>
}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}

08001078 <dwt_starttx>:
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed transmission will be cancelled if the delayed time has passed)
 */

int dwt_starttx(uint8 mode)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	71fb      	strb	r3, [r7, #7]
    int retval = DWT_SUCCESS ;
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
    uint8 temp  = 0x00;
 8001086:	2300      	movs	r3, #0
 8001088:	72fb      	strb	r3, [r7, #11]
    uint16 checkTxOK = 0 ;
 800108a:	2300      	movs	r3, #0
 800108c:	813b      	strh	r3, [r7, #8]

    if(mode & DWT_RESPONSE_EXPECTED)
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	f003 0302 	and.w	r3, r3, #2
 8001094:	2b00      	cmp	r3, #0
 8001096:	d005      	beq.n	80010a4 <dwt_starttx+0x2c>
    {
        temp = (uint8)SYS_CTRL_WAIT4RESP ; // Set wait4response bit
 8001098:	2380      	movs	r3, #128	; 0x80
 800109a:	72fb      	strb	r3, [r7, #11]
        pdw1000local->wait4resp = 1;
 800109c:	4b1c      	ldr	r3, [pc, #112]	; (8001110 <dwt_starttx+0x98>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2201      	movs	r2, #1
 80010a2:	755a      	strb	r2, [r3, #21]
    }

    if (mode & DWT_START_TX_DELAYED)
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d020      	beq.n	80010f0 <dwt_starttx+0x78>
    {
        // Both SYS_CTRL_TXSTRT and SYS_CTRL_TXDLYS to correctly enable TX
        temp |= (uint8)(SYS_CTRL_TXDLYS | SYS_CTRL_TXSTRT) ;
 80010ae:	7afb      	ldrb	r3, [r7, #11]
 80010b0:	f043 0306 	orr.w	r3, r3, #6
 80010b4:	72fb      	strb	r3, [r7, #11]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 80010b6:	7afb      	ldrb	r3, [r7, #11]
 80010b8:	461a      	mov	r2, r3
 80010ba:	2100      	movs	r1, #0
 80010bc:	200d      	movs	r0, #13
 80010be:	f7ff fe7f 	bl	8000dc0 <dwt_write8bitoffsetreg>
        checkTxOK = dwt_read16bitoffsetreg(SYS_STATUS_ID, 3); // Read at offset 3 to get the upper 2 bytes out of 5
 80010c2:	2103      	movs	r1, #3
 80010c4:	200f      	movs	r0, #15
 80010c6:	f7ff fe4b 	bl	8000d60 <dwt_read16bitoffsetreg>
 80010ca:	4603      	mov	r3, r0
 80010cc:	813b      	strh	r3, [r7, #8]
        if ((checkTxOK & SYS_STATUS_TXERR) == 0) // Transmit Delayed Send set over Half a Period away or Power Up error (there is enough time to send but not to power up individual blocks).
 80010ce:	893b      	ldrh	r3, [r7, #8]
 80010d0:	f403 6381 	and.w	r3, r3, #1032	; 0x408
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d102      	bne.n	80010de <dwt_starttx+0x66>
        {
            retval = DWT_SUCCESS ; // All okay
 80010d8:	2300      	movs	r3, #0
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	e012      	b.n	8001104 <dwt_starttx+0x8c>
        }
        else
        {
            // If HPDWARN or TXPUTE are set this indicates that the TXDLYS was set too late for the specified DX_TIME.
            // remedial action is to cancel delayed send and report error
            dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF);
 80010de:	2240      	movs	r2, #64	; 0x40
 80010e0:	2100      	movs	r1, #0
 80010e2:	200d      	movs	r0, #13
 80010e4:	f7ff fe6c 	bl	8000dc0 <dwt_write8bitoffsetreg>
            retval = DWT_ERROR ; // Failed !
 80010e8:	f04f 33ff 	mov.w	r3, #4294967295
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	e009      	b.n	8001104 <dwt_starttx+0x8c>
        }
    }
    else
    {
        temp |= (uint8)SYS_CTRL_TXSTRT ;
 80010f0:	7afb      	ldrb	r3, [r7, #11]
 80010f2:	f043 0302 	orr.w	r3, r3, #2
 80010f6:	72fb      	strb	r3, [r7, #11]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 80010f8:	7afb      	ldrb	r3, [r7, #11]
 80010fa:	461a      	mov	r2, r3
 80010fc:	2100      	movs	r1, #0
 80010fe:	200d      	movs	r0, #13
 8001100:	f7ff fe5e 	bl	8000dc0 <dwt_write8bitoffsetreg>
    }

    return retval;
 8001104:	68fb      	ldr	r3, [r7, #12]

} // end dwt_starttx()
 8001106:	4618      	mov	r0, r3
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000000 	.word	0x20000000

08001114 <dwt_forcetrxoff>:
 * output parameters
 *
 * no return value
 */
void dwt_forcetrxoff(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
    decaIrqStatus_t stat ;
    uint32 mask;

    mask = dwt_read32bitreg(SYS_MASK_ID) ; // Read set interrupt mask
 800111a:	2100      	movs	r1, #0
 800111c:	200e      	movs	r0, #14
 800111e:	f7ff fdf8 	bl	8000d12 <dwt_read32bitoffsetreg>
 8001122:	6078      	str	r0, [r7, #4]

    // Need to beware of interrupts occurring in the middle of following read modify write cycle
    // We can disable the radio, but before the status is cleared an interrupt can be set (e.g. the
    // event has just happened before the radio was disabled)
    // thus we need to disable interrupt during this operation
    stat = decamutexon() ;
 8001124:	f000 f8c0 	bl	80012a8 <decamutexon>
 8001128:	6038      	str	r0, [r7, #0]

    dwt_write32bitreg(SYS_MASK_ID, 0) ; // Clear interrupt mask - so we don't get any unwanted events
 800112a:	2200      	movs	r2, #0
 800112c:	2100      	movs	r1, #0
 800112e:	200e      	movs	r0, #14
 8001130:	f7ff fe75 	bl	8000e1e <dwt_write32bitoffsetreg>

    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF) ; // Disable the radio
 8001134:	2240      	movs	r2, #64	; 0x40
 8001136:	2100      	movs	r1, #0
 8001138:	200d      	movs	r0, #13
 800113a:	f7ff fe41 	bl	8000dc0 <dwt_write8bitoffsetreg>

    // Forcing Transceiver off - so we do not want to see any new events that may have happened
    dwt_write32bitreg(SYS_STATUS_ID, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_GOOD));
 800113e:	4a0b      	ldr	r2, [pc, #44]	; (800116c <dwt_forcetrxoff+0x58>)
 8001140:	2100      	movs	r1, #0
 8001142:	200f      	movs	r0, #15
 8001144:	f7ff fe6b 	bl	8000e1e <dwt_write32bitoffsetreg>

    dwt_syncrxbufptrs();
 8001148:	f000 f814 	bl	8001174 <dwt_syncrxbufptrs>

    dwt_write32bitreg(SYS_MASK_ID, mask) ; // Set interrupt mask to what it was
 800114c:	687a      	ldr	r2, [r7, #4]
 800114e:	2100      	movs	r1, #0
 8001150:	200e      	movs	r0, #14
 8001152:	f7ff fe64 	bl	8000e1e <dwt_write32bitoffsetreg>

    // Enable/restore interrupts again...
    decamutexoff(stat) ;
 8001156:	6838      	ldr	r0, [r7, #0]
 8001158:	f000 f8b7 	bl	80012ca <decamutexoff>
    pdw1000local->wait4resp = 0;
 800115c:	4b04      	ldr	r3, [pc, #16]	; (8001170 <dwt_forcetrxoff+0x5c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2200      	movs	r2, #0
 8001162:	755a      	strb	r2, [r3, #21]

} // end deviceforcetrxoff()
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	2427fff8 	.word	0x2427fff8
 8001170:	20000000 	.word	0x20000000

08001174 <dwt_syncrxbufptrs>:
 * output parameters
 *
 * no return value
 */
void dwt_syncrxbufptrs(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
    uint8  buff ;
    // Need to make sure that the host/IC buffer pointers are aligned before starting RX
    buff = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 800117a:	2103      	movs	r1, #3
 800117c:	200f      	movs	r0, #15
 800117e:	f7ff fe0c 	bl	8000d9a <dwt_read8bitoffsetreg>
 8001182:	4603      	mov	r3, r0
 8001184:	71fb      	strb	r3, [r7, #7]

    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 8001186:	79fa      	ldrb	r2, [r7, #7]
       ((buff & (SYS_STATUS_HSRBP>>24)) << 1) ) // Host Side Receive Buffer Pointer
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	005b      	lsls	r3, r3, #1
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 800118c:	4053      	eors	r3, r2
 800118e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001192:	2b00      	cmp	r3, #0
 8001194:	d004      	beq.n	80011a0 <dwt_syncrxbufptrs+0x2c>
    {
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 0x01) ; // We need to swap RX buffer status reg (write one to toggle internally)
 8001196:	2201      	movs	r2, #1
 8001198:	2103      	movs	r1, #3
 800119a:	200d      	movs	r0, #13
 800119c:	f7ff fe10 	bl	8000dc0 <dwt_write8bitoffsetreg>
    }
}
 80011a0:	bf00      	nop
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <dwt_rxenable>:
 *                                               performing manual RX re-enabling in double buffering mode
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed receive enable will be too far in the future if delayed time has passed)
 */
int dwt_rxenable(int mode)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
    uint16 temp ;
    uint8 temp1 ;

    if ((mode & DWT_NO_SYNC_PTRS) == 0)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f003 0304 	and.w	r3, r3, #4
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d101      	bne.n	80011be <dwt_rxenable+0x16>
    {
        dwt_syncrxbufptrs();
 80011ba:	f7ff ffdb 	bl	8001174 <dwt_syncrxbufptrs>
    }

    temp = (uint16)SYS_CTRL_RXENAB ;
 80011be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011c2:	81fb      	strh	r3, [r7, #14]

    if (mode & DWT_START_RX_DELAYED)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d003      	beq.n	80011d6 <dwt_rxenable+0x2e>
    {
        temp |= (uint16)SYS_CTRL_RXDLYE ;
 80011ce:	89fb      	ldrh	r3, [r7, #14]
 80011d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011d4:	81fb      	strh	r3, [r7, #14]
    }

    dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 80011d6:	89fb      	ldrh	r3, [r7, #14]
 80011d8:	461a      	mov	r2, r3
 80011da:	2100      	movs	r1, #0
 80011dc:	200d      	movs	r0, #13
 80011de:	f7ff fe02 	bl	8000de6 <dwt_write16bitoffsetreg>

    if (mode & DWT_START_RX_DELAYED) // check for errors
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f003 0301 	and.w	r3, r3, #1
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d01a      	beq.n	8001222 <dwt_rxenable+0x7a>
    {
        temp1 = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 80011ec:	2103      	movs	r1, #3
 80011ee:	200f      	movs	r0, #15
 80011f0:	f7ff fdd3 	bl	8000d9a <dwt_read8bitoffsetreg>
 80011f4:	4603      	mov	r3, r0
 80011f6:	737b      	strb	r3, [r7, #13]
        if ((temp1 & (SYS_STATUS_HPDWARN >> 24)) != 0) // if delay has passed do immediate RX on unless DWT_IDLE_ON_DLY_ERR is true
 80011f8:	7b7b      	ldrb	r3, [r7, #13]
 80011fa:	f003 0308 	and.w	r3, r3, #8
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d00f      	beq.n	8001222 <dwt_rxenable+0x7a>
        {
            dwt_forcetrxoff(); // turn the delayed receive off
 8001202:	f7ff ff87 	bl	8001114 <dwt_forcetrxoff>

            if((mode & DWT_IDLE_ON_DLY_ERR) == 0) // if DWT_IDLE_ON_DLY_ERR not set then re-enable receiver
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f003 0302 	and.w	r3, r3, #2
 800120c:	2b00      	cmp	r3, #0
 800120e:	d105      	bne.n	800121c <dwt_rxenable+0x74>
            {
                dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_RXENAB);
 8001210:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001214:	2100      	movs	r1, #0
 8001216:	200d      	movs	r0, #13
 8001218:	f7ff fde5 	bl	8000de6 <dwt_write16bitoffsetreg>
            }
            return DWT_ERROR; // return warning indication
 800121c:	f04f 33ff 	mov.w	r3, #4294967295
 8001220:	e000      	b.n	8001224 <dwt_rxenable+0x7c>
        }
    }

    return DWT_SUCCESS;
 8001222:	2300      	movs	r3, #0
} // end dwt_rxenable()
 8001224:	4618      	mov	r0, r3
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
    _dwt_disablesequencing();
 8001230:	f7ff ff16 	bl	8001060 <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
 8001234:	2200      	movs	r2, #0
 8001236:	2100      	movs	r1, #0
 8001238:	202c      	movs	r0, #44	; 0x2c
 800123a:	f7ff fdd4 	bl	8000de6 <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
 800123e:	2200      	movs	r2, #0
 8001240:	2106      	movs	r1, #6
 8001242:	202c      	movs	r0, #44	; 0x2c
 8001244:	f7ff fdbc 	bl	8000dc0 <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
 8001248:	f7ff fe2f 	bl	8000eaa <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC (set the reset bits)
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
 800124c:	2200      	movs	r2, #0
 800124e:	2103      	movs	r1, #3
 8001250:	2036      	movs	r0, #54	; 0x36
 8001252:	f7ff fdb5 	bl	8000dc0 <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
 8001256:	2001      	movs	r0, #1
 8001258:	f000 f844 	bl	80012e4 <deca_sleep>

    // Clear the reset bits
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 800125c:	22f0      	movs	r2, #240	; 0xf0
 800125e:	2103      	movs	r1, #3
 8001260:	2036      	movs	r0, #54	; 0x36
 8001262:	f7ff fdad 	bl	8000dc0 <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
 8001266:	4b03      	ldr	r3, [pc, #12]	; (8001274 <dwt_softreset+0x48>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2200      	movs	r2, #0
 800126c:	755a      	strb	r2, [r3, #21]
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000000 	.word	0x20000000

08001278 <dwt_setxtaltrim>:
 * output parameters
 *
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	71fb      	strb	r3, [r7, #7]
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
 8001282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001286:	f003 031f 	and.w	r3, r3, #31
 800128a:	b25b      	sxtb	r3, r3
 800128c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001290:	b25b      	sxtb	r3, r3
 8001292:	73fb      	strb	r3, [r7, #15]
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
 8001294:	7bfb      	ldrb	r3, [r7, #15]
 8001296:	461a      	mov	r2, r3
 8001298:	210e      	movs	r1, #14
 800129a:	202b      	movs	r0, #43	; 0x2b
 800129c:	f7ff fd90 	bl	8000dc0 <dwt_write8bitoffsetreg>
}
 80012a0:	bf00      	nop
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
	decaIrqStatus_t s = port_GetEXT_IRQStatus();
 80012ae:	f000 f991 	bl	80015d4 <port_GetEXT_IRQStatus>
 80012b2:	4603      	mov	r3, r0
 80012b4:	607b      	str	r3, [r7, #4]

	if(s) {
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <decamutexon+0x18>
		port_DisableEXT_IRQ(); //disable the external interrupt line
 80012bc:	f000 f97c 	bl	80015b8 <port_DisableEXT_IRQ>
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
 80012c0:	687b      	ldr	r3, [r7, #4]
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b082      	sub	sp, #8
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <decamutexoff+0x12>
		port_EnableEXT_IRQ();
 80012d8:	f000 f975 	bl	80015c6 <port_EnableEXT_IRQ>
	}
}
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <deca_sleep>:
#include "sleep.h"
#include "port.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
__INLINE void deca_sleep(unsigned int time_ms)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
	Sleep(time_ms);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f000 f8c5 	bl	800147c <Sleep>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
	...

080012fc <writetospi>:
#pragma GCC optimize ("O3")
int writetospi(uint16_t headerLength,
               const    uint8_t *headerBuffer,
               uint32_t bodyLength,
               const    uint8_t *bodyBuffer)
{
 80012fc:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8001300:	4683      	mov	fp, r0
 8001302:	468a      	mov	sl, r1
 8001304:	4691      	mov	r9, r2
 8001306:	4698      	mov	r8, r3
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 8001308:	f7ff ffce 	bl	80012a8 <decamutexon>

    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800130c:	4d13      	ldr	r5, [pc, #76]	; (800135c <writetospi+0x60>)
    stat = decamutexon() ;
 800130e:	4606      	mov	r6, r0
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001310:	4628      	mov	r0, r5
 8001312:	f004 fc7d 	bl	8005c10 <HAL_SPI_GetState>
 8001316:	2801      	cmp	r0, #1
 8001318:	4604      	mov	r4, r0
 800131a:	d1f9      	bne.n	8001310 <writetospi+0x14>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 800131c:	4810      	ldr	r0, [pc, #64]	; (8001360 <writetospi+0x64>)
 800131e:	2200      	movs	r2, #0
 8001320:	2140      	movs	r1, #64	; 0x40
 8001322:	f001 fc0f 	bl	8002b44 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&headerBuffer[0], headerLength, HAL_MAX_DELAY);    /* Send header in polling mode */
 8001326:	465a      	mov	r2, fp
 8001328:	4651      	mov	r1, sl
 800132a:	f04f 33ff 	mov.w	r3, #4294967295
 800132e:	480b      	ldr	r0, [pc, #44]	; (800135c <writetospi+0x60>)
 8001330:	f004 fa27 	bl	8005782 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&bodyBuffer[0], bodyLength, HAL_MAX_DELAY);        /* Send data in polling mode */
 8001334:	f04f 33ff 	mov.w	r3, #4294967295
 8001338:	fa1f f289 	uxth.w	r2, r9
 800133c:	4641      	mov	r1, r8
 800133e:	4807      	ldr	r0, [pc, #28]	; (800135c <writetospi+0x60>)
 8001340:	f004 fa1f 	bl	8005782 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 8001344:	4622      	mov	r2, r4
 8001346:	2140      	movs	r1, #64	; 0x40
 8001348:	4805      	ldr	r0, [pc, #20]	; (8001360 <writetospi+0x64>)
 800134a:	f001 fbfb 	bl	8002b44 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 800134e:	4630      	mov	r0, r6
 8001350:	f7ff ffbb 	bl	80012ca <decamutexoff>

    return 0;
} // end writetospi()
 8001354:	2000      	movs	r0, #0
 8001356:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
 800135a:	bf00      	nop
 800135c:	200005f8 	.word	0x200005f8
 8001360:	40020400 	.word	0x40020400

08001364 <readfromspi>:
#pragma GCC optimize ("O3")
int readfromspi(uint16_t headerLength,
                const uint8_t *headerBuffer,
                uint32_t readlength,
                uint8_t *readBuffer)
{
 8001364:	e92d 4778 	stmdb	sp!, {r3, r4, r5, r6, r8, r9, sl, lr}
 8001368:	4681      	mov	r9, r0
 800136a:	460c      	mov	r4, r1
 800136c:	4690      	mov	r8, r2
 800136e:	461d      	mov	r5, r3
    int i;
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 8001370:	f7ff ff9a 	bl	80012a8 <decamutexon>

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001374:	f8df a07c 	ldr.w	sl, [pc, #124]	; 80013f4 <readfromspi+0x90>
    stat = decamutexon() ;
 8001378:	4606      	mov	r6, r0
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800137a:	4650      	mov	r0, sl
 800137c:	f004 fc48 	bl	8005c10 <HAL_SPI_GetState>
 8001380:	2801      	cmp	r0, #1
 8001382:	d1fa      	bne.n	800137a <readfromspi+0x16>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 8001384:	481a      	ldr	r0, [pc, #104]	; (80013f0 <readfromspi+0x8c>)
 8001386:	2200      	movs	r2, #0
 8001388:	2140      	movs	r1, #64	; 0x40
 800138a:	f001 fbdb 	bl	8002b44 <HAL_GPIO_WritePin>

    /* Send header */
    for(i=0; i<headerLength; i++)
 800138e:	f1b9 0f00 	cmp.w	r9, #0
 8001392:	d00c      	beq.n	80013ae <readfromspi+0x4a>
    {
        HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 8001394:	f8df a05c 	ldr.w	sl, [pc, #92]	; 80013f4 <readfromspi+0x90>
 8001398:	44a1      	add	r9, r4
 800139a:	2201      	movs	r2, #1
 800139c:	4621      	mov	r1, r4
 800139e:	f04f 33ff 	mov.w	r3, #4294967295
 80013a2:	4414      	add	r4, r2
 80013a4:	4650      	mov	r0, sl
 80013a6:	f004 f9ec 	bl	8005782 <HAL_SPI_Transmit>
    for(i=0; i<headerLength; i++)
 80013aa:	454c      	cmp	r4, r9
 80013ac:	d1f5      	bne.n	800139a <readfromspi+0x36>
    }

    /* for the data buffer use LL functions directly as the HAL SPI read function
     * has issue reading single bytes */
    while(readlength-- > 0)
 80013ae:	f1b8 0f00 	cmp.w	r8, #0
 80013b2:	d012      	beq.n	80013da <readfromspi+0x76>
 80013b4:	f8df c03c 	ldr.w	ip, [pc, #60]	; 80013f4 <readfromspi+0x90>
 80013b8:	eb05 0008 	add.w	r0, r5, r8
        /* Wait until TXE flag is set to send data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
        {
        }

        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 80013bc:	2400      	movs	r4, #0
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
 80013be:	f8dc 2000 	ldr.w	r2, [ip]
 80013c2:	6891      	ldr	r1, [r2, #8]
 80013c4:	0789      	lsls	r1, r1, #30
 80013c6:	d5fc      	bpl.n	80013c2 <readfromspi+0x5e>
        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 80013c8:	60d4      	str	r4, [r2, #12]
        e.g. when waking up DW1000 from DEEPSLEEP via dwt_spicswakeup() function.
        */

        /* Wait until RXNE flag is set to read data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET)
 80013ca:	6891      	ldr	r1, [r2, #8]
 80013cc:	07cb      	lsls	r3, r1, #31
 80013ce:	d5fc      	bpl.n	80013ca <readfromspi+0x66>
        {
        }

        (*readBuffer++) = hspi1.Instance->DR;  //copy data read form (MISO)
 80013d0:	68d3      	ldr	r3, [r2, #12]
 80013d2:	f805 3b01 	strb.w	r3, [r5], #1
    while(readlength-- > 0)
 80013d6:	4285      	cmp	r5, r0
 80013d8:	d1f1      	bne.n	80013be <readfromspi+0x5a>
    }

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 80013da:	2201      	movs	r2, #1
 80013dc:	2140      	movs	r1, #64	; 0x40
 80013de:	4804      	ldr	r0, [pc, #16]	; (80013f0 <readfromspi+0x8c>)
 80013e0:	f001 fbb0 	bl	8002b44 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 80013e4:	4630      	mov	r0, r6
 80013e6:	f7ff ff70 	bl	80012ca <decamutexoff>

    return 0;
} // end readfromspi()
 80013ea:	2000      	movs	r0, #0
 80013ec:	e8bd 8778 	ldmia.w	sp!, {r3, r4, r5, r6, r8, r9, sl, pc}
 80013f0:	40020400 	.word	0x40020400
 80013f4:	200005f8 	.word	0x200005f8

080013f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001406:	2b00      	cmp	r3, #0
 8001408:	db0b      	blt.n	8001422 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	f003 021f 	and.w	r2, r3, #31
 8001410:	4907      	ldr	r1, [pc, #28]	; (8001430 <__NVIC_EnableIRQ+0x38>)
 8001412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001416:	095b      	lsrs	r3, r3, #5
 8001418:	2001      	movs	r0, #1
 800141a:	fa00 f202 	lsl.w	r2, r0, r2
 800141e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	e000e100 	.word	0xe000e100

08001434 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800143e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001442:	2b00      	cmp	r3, #0
 8001444:	db12      	blt.n	800146c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	f003 021f 	and.w	r2, r3, #31
 800144c:	490a      	ldr	r1, [pc, #40]	; (8001478 <__NVIC_DisableIRQ+0x44>)
 800144e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001452:	095b      	lsrs	r3, r3, #5
 8001454:	2001      	movs	r0, #1
 8001456:	fa00 f202 	lsl.w	r2, r0, r2
 800145a:	3320      	adds	r3, #32
 800145c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001460:	f3bf 8f4f 	dsb	sy
}
 8001464:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001466:	f3bf 8f6f 	isb	sy
}
 800146a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	e000e100 	.word	0xe000e100

0800147c <Sleep>:
/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void
Sleep(uint32_t x)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f001 f841 	bl	800250c <HAL_Delay>
}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
	...

08001494 <EXTI_GetITEnStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The "enable" state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITEnStatus(uint32_t x)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
    return ((NVIC->ISER[(((uint32_t)x) >> 5UL)] &\
 800149c:	4a0b      	ldr	r2, [pc, #44]	; (80014cc <EXTI_GetITEnStatus+0x38>)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	095b      	lsrs	r3, r3, #5
 80014a2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            (uint32_t)(1UL << (((uint32_t)x) & 0x1FUL)) ) == (uint32_t)RESET)?(RESET):(SET);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f003 031f 	and.w	r3, r3, #31
 80014ac:	fa22 f303 	lsr.w	r3, r2, r3
 80014b0:	f003 0301 	and.w	r3, r3, #1
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	bf14      	ite	ne
 80014b8:	2301      	movne	r3, #1
 80014ba:	2300      	moveq	r3, #0
 80014bc:	b2db      	uxtb	r3, r3
}
 80014be:	4618      	mov	r0, r3
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	e000e100 	.word	0xe000e100

080014d0 <reset_DW1000>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW1000 by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DW1000(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef    GPIO_InitStruct;

    // Enable GPIO used for DW1000 reset as open collector output
    GPIO_InitStruct.Pin = DW_RST_Pin;
 80014d6:	2301      	movs	r3, #1
 80014d8:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80014da:	2311      	movs	r3, #17
 80014dc:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014de:	2300      	movs	r3, #0
 80014e0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 80014e2:	1d3b      	adds	r3, r7, #4
 80014e4:	4619      	mov	r1, r3
 80014e6:	480a      	ldr	r0, [pc, #40]	; (8001510 <reset_DW1000+0x40>)
 80014e8:	f001 f9a8 	bl	800283c <HAL_GPIO_Init>

    //drive the RSTn pin low
    HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_RESET);
 80014ec:	2200      	movs	r2, #0
 80014ee:	2101      	movs	r1, #1
 80014f0:	4807      	ldr	r0, [pc, #28]	; (8001510 <reset_DW1000+0x40>)
 80014f2:	f001 fb27 	bl	8002b44 <HAL_GPIO_WritePin>

    Sleep(1);
 80014f6:	2001      	movs	r0, #1
 80014f8:	f7ff ffc0 	bl	800147c <Sleep>

    //put the pin back to output open-drain (not active)
    setup_DW1000RSTnIRQ(0);
 80014fc:	2000      	movs	r0, #0
 80014fe:	f000 f809 	bl	8001514 <setup_DW1000RSTnIRQ>



    Sleep(2);
 8001502:	2002      	movs	r0, #2
 8001504:	f7ff ffba 	bl	800147c <Sleep>
}
 8001508:	bf00      	nop
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40020000 	.word	0x40020000

08001514 <setup_DW1000RSTnIRQ>:
 * @brief   setup the DW_RESET pin mode
 *          0 - output Open collector mode
 *          !0 - input mode with connected EXTI0 IRQ
 * */
void setup_DW1000RSTnIRQ(int enable)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b088      	sub	sp, #32
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    if(enable)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d015      	beq.n	800154e <setup_DW1000RSTnIRQ+0x3a>
    {
        // Enable GPIO used as DECA RESET for interrupt
        GPIO_InitStruct.Pin = DW_RST_Pin;
 8001522:	2301      	movs	r3, #1
 8001524:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001526:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800152a:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 8001530:	f107 030c 	add.w	r3, r7, #12
 8001534:	4619      	mov	r1, r3
 8001536:	4813      	ldr	r0, [pc, #76]	; (8001584 <setup_DW1000RSTnIRQ+0x70>)
 8001538:	f001 f980 	bl	800283c <HAL_GPIO_Init>

        HAL_NVIC_EnableIRQ(EXTI0_IRQn);     //pin #0 -> EXTI #0
 800153c:	2006      	movs	r0, #6
 800153e:	f001 f924 	bl	800278a <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001542:	2200      	movs	r2, #0
 8001544:	2105      	movs	r1, #5
 8001546:	2006      	movs	r0, #6
 8001548:	f001 f903 	bl	8002752 <HAL_NVIC_SetPriority>
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
        HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_SET);
    }
}
 800154c:	e015      	b.n	800157a <setup_DW1000RSTnIRQ+0x66>
        HAL_NVIC_DisableIRQ(EXTI0_IRQn);    //pin #0 -> EXTI #0
 800154e:	2006      	movs	r0, #6
 8001550:	f001 f929 	bl	80027a6 <HAL_NVIC_DisableIRQ>
        GPIO_InitStruct.Pin = DW_RST_Pin;
 8001554:	2301      	movs	r3, #1
 8001556:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001558:	2311      	movs	r3, #17
 800155a:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001560:	2302      	movs	r3, #2
 8001562:	61bb      	str	r3, [r7, #24]
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 8001564:	f107 030c 	add.w	r3, r7, #12
 8001568:	4619      	mov	r1, r3
 800156a:	4806      	ldr	r0, [pc, #24]	; (8001584 <setup_DW1000RSTnIRQ+0x70>)
 800156c:	f001 f966 	bl	800283c <HAL_GPIO_Init>
        HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_SET);
 8001570:	2201      	movs	r2, #1
 8001572:	2101      	movs	r1, #1
 8001574:	4803      	ldr	r0, [pc, #12]	; (8001584 <setup_DW1000RSTnIRQ+0x70>)
 8001576:	f001 fae5 	bl	8002b44 <HAL_GPIO_WritePin>
}
 800157a:	bf00      	nop
 800157c:	3720      	adds	r7, #32
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40020000 	.word	0x40020000

08001588 <port_set_dw1000_slowrate>:
/* @fn      port_set_dw1000_slowrate
 * @brief   set 2.25MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_slowrate(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800158c:	4b03      	ldr	r3, [pc, #12]	; (800159c <port_set_dw1000_slowrate+0x14>)
 800158e:	2220      	movs	r2, #32
 8001590:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 8001592:	4802      	ldr	r0, [pc, #8]	; (800159c <port_set_dw1000_slowrate+0x14>)
 8001594:	f004 f86c 	bl	8005670 <HAL_SPI_Init>
}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}
 800159c:	200005f8 	.word	0x200005f8

080015a0 <port_set_dw1000_fastrate>:
/* @fn      port_set_dw1000_fastrate
 * @brief   set 18MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_fastrate(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80015a4:	4b03      	ldr	r3, [pc, #12]	; (80015b4 <port_set_dw1000_fastrate+0x14>)
 80015a6:	2208      	movs	r2, #8
 80015a8:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 80015aa:	4802      	ldr	r0, [pc, #8]	; (80015b4 <port_set_dw1000_fastrate+0x14>)
 80015ac:	f004 f860 	bl	8005670 <HAL_SPI_Init>
}
 80015b0:	bf00      	nop
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	200005f8 	.word	0x200005f8

080015b8 <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
    NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 80015bc:	2017      	movs	r0, #23
 80015be:	f7ff ff39 	bl	8001434 <__NVIC_DisableIRQ>
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	af00      	add	r7, sp, #0
    NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 80015ca:	2017      	movs	r0, #23
 80015cc:	f7ff ff14 	bl	80013f8 <__NVIC_EnableIRQ>
}
 80015d0:	bf00      	nop
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
    return EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 80015d8:	2017      	movs	r0, #23
 80015da:	f7ff ff5b 	bl	8001494 <EXTI_GetITEnStatus>
 80015de:	4603      	mov	r3, r0
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80015ea:	f000 fa29 	bl	8001a40 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80015ee:	f644 6320 	movw	r3, #20000	; 0x4e20
 80015f2:	2201      	movs	r2, #1
 80015f4:	2178      	movs	r1, #120	; 0x78
 80015f6:	485b      	ldr	r0, [pc, #364]	; (8001764 <SSD1306_Init+0x180>)
 80015f8:	f001 fd00 	bl	8002ffc <HAL_I2C_IsDeviceReady>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001602:	2300      	movs	r3, #0
 8001604:	e0a9      	b.n	800175a <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001606:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800160a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800160c:	e002      	b.n	8001614 <SSD1306_Init+0x30>
		p--;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	3b01      	subs	r3, #1
 8001612:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1f9      	bne.n	800160e <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800161a:	22ae      	movs	r2, #174	; 0xae
 800161c:	2100      	movs	r1, #0
 800161e:	2078      	movs	r0, #120	; 0x78
 8001620:	f000 fa6c 	bl	8001afc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001624:	2220      	movs	r2, #32
 8001626:	2100      	movs	r1, #0
 8001628:	2078      	movs	r0, #120	; 0x78
 800162a:	f000 fa67 	bl	8001afc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800162e:	2210      	movs	r2, #16
 8001630:	2100      	movs	r1, #0
 8001632:	2078      	movs	r0, #120	; 0x78
 8001634:	f000 fa62 	bl	8001afc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001638:	22b0      	movs	r2, #176	; 0xb0
 800163a:	2100      	movs	r1, #0
 800163c:	2078      	movs	r0, #120	; 0x78
 800163e:	f000 fa5d 	bl	8001afc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001642:	22c8      	movs	r2, #200	; 0xc8
 8001644:	2100      	movs	r1, #0
 8001646:	2078      	movs	r0, #120	; 0x78
 8001648:	f000 fa58 	bl	8001afc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800164c:	2200      	movs	r2, #0
 800164e:	2100      	movs	r1, #0
 8001650:	2078      	movs	r0, #120	; 0x78
 8001652:	f000 fa53 	bl	8001afc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001656:	2210      	movs	r2, #16
 8001658:	2100      	movs	r1, #0
 800165a:	2078      	movs	r0, #120	; 0x78
 800165c:	f000 fa4e 	bl	8001afc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001660:	2240      	movs	r2, #64	; 0x40
 8001662:	2100      	movs	r1, #0
 8001664:	2078      	movs	r0, #120	; 0x78
 8001666:	f000 fa49 	bl	8001afc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800166a:	2281      	movs	r2, #129	; 0x81
 800166c:	2100      	movs	r1, #0
 800166e:	2078      	movs	r0, #120	; 0x78
 8001670:	f000 fa44 	bl	8001afc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001674:	22ff      	movs	r2, #255	; 0xff
 8001676:	2100      	movs	r1, #0
 8001678:	2078      	movs	r0, #120	; 0x78
 800167a:	f000 fa3f 	bl	8001afc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800167e:	22a1      	movs	r2, #161	; 0xa1
 8001680:	2100      	movs	r1, #0
 8001682:	2078      	movs	r0, #120	; 0x78
 8001684:	f000 fa3a 	bl	8001afc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001688:	22a6      	movs	r2, #166	; 0xa6
 800168a:	2100      	movs	r1, #0
 800168c:	2078      	movs	r0, #120	; 0x78
 800168e:	f000 fa35 	bl	8001afc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001692:	22a8      	movs	r2, #168	; 0xa8
 8001694:	2100      	movs	r1, #0
 8001696:	2078      	movs	r0, #120	; 0x78
 8001698:	f000 fa30 	bl	8001afc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800169c:	223f      	movs	r2, #63	; 0x3f
 800169e:	2100      	movs	r1, #0
 80016a0:	2078      	movs	r0, #120	; 0x78
 80016a2:	f000 fa2b 	bl	8001afc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80016a6:	22a4      	movs	r2, #164	; 0xa4
 80016a8:	2100      	movs	r1, #0
 80016aa:	2078      	movs	r0, #120	; 0x78
 80016ac:	f000 fa26 	bl	8001afc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80016b0:	22d3      	movs	r2, #211	; 0xd3
 80016b2:	2100      	movs	r1, #0
 80016b4:	2078      	movs	r0, #120	; 0x78
 80016b6:	f000 fa21 	bl	8001afc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80016ba:	2200      	movs	r2, #0
 80016bc:	2100      	movs	r1, #0
 80016be:	2078      	movs	r0, #120	; 0x78
 80016c0:	f000 fa1c 	bl	8001afc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80016c4:	22d5      	movs	r2, #213	; 0xd5
 80016c6:	2100      	movs	r1, #0
 80016c8:	2078      	movs	r0, #120	; 0x78
 80016ca:	f000 fa17 	bl	8001afc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80016ce:	22f0      	movs	r2, #240	; 0xf0
 80016d0:	2100      	movs	r1, #0
 80016d2:	2078      	movs	r0, #120	; 0x78
 80016d4:	f000 fa12 	bl	8001afc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80016d8:	22d9      	movs	r2, #217	; 0xd9
 80016da:	2100      	movs	r1, #0
 80016dc:	2078      	movs	r0, #120	; 0x78
 80016de:	f000 fa0d 	bl	8001afc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80016e2:	2222      	movs	r2, #34	; 0x22
 80016e4:	2100      	movs	r1, #0
 80016e6:	2078      	movs	r0, #120	; 0x78
 80016e8:	f000 fa08 	bl	8001afc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80016ec:	22da      	movs	r2, #218	; 0xda
 80016ee:	2100      	movs	r1, #0
 80016f0:	2078      	movs	r0, #120	; 0x78
 80016f2:	f000 fa03 	bl	8001afc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80016f6:	2212      	movs	r2, #18
 80016f8:	2100      	movs	r1, #0
 80016fa:	2078      	movs	r0, #120	; 0x78
 80016fc:	f000 f9fe 	bl	8001afc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001700:	22db      	movs	r2, #219	; 0xdb
 8001702:	2100      	movs	r1, #0
 8001704:	2078      	movs	r0, #120	; 0x78
 8001706:	f000 f9f9 	bl	8001afc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800170a:	2220      	movs	r2, #32
 800170c:	2100      	movs	r1, #0
 800170e:	2078      	movs	r0, #120	; 0x78
 8001710:	f000 f9f4 	bl	8001afc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001714:	228d      	movs	r2, #141	; 0x8d
 8001716:	2100      	movs	r1, #0
 8001718:	2078      	movs	r0, #120	; 0x78
 800171a:	f000 f9ef 	bl	8001afc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800171e:	2214      	movs	r2, #20
 8001720:	2100      	movs	r1, #0
 8001722:	2078      	movs	r0, #120	; 0x78
 8001724:	f000 f9ea 	bl	8001afc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001728:	22af      	movs	r2, #175	; 0xaf
 800172a:	2100      	movs	r1, #0
 800172c:	2078      	movs	r0, #120	; 0x78
 800172e:	f000 f9e5 	bl	8001afc <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001732:	222e      	movs	r2, #46	; 0x2e
 8001734:	2100      	movs	r1, #0
 8001736:	2078      	movs	r0, #120	; 0x78
 8001738:	f000 f9e0 	bl	8001afc <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800173c:	2000      	movs	r0, #0
 800173e:	f000 f843 	bl	80017c8 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001742:	f000 f813 	bl	800176c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001746:	4b08      	ldr	r3, [pc, #32]	; (8001768 <SSD1306_Init+0x184>)
 8001748:	2200      	movs	r2, #0
 800174a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <SSD1306_Init+0x184>)
 800174e:	2200      	movs	r2, #0
 8001750:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001752:	4b05      	ldr	r3, [pc, #20]	; (8001768 <SSD1306_Init+0x184>)
 8001754:	2201      	movs	r2, #1
 8001756:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001758:	2301      	movs	r3, #1
}
 800175a:	4618      	mov	r0, r3
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	200005a4 	.word	0x200005a4
 8001768:	20000508 	.word	0x20000508

0800176c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001772:	2300      	movs	r3, #0
 8001774:	71fb      	strb	r3, [r7, #7]
 8001776:	e01d      	b.n	80017b4 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	3b50      	subs	r3, #80	; 0x50
 800177c:	b2db      	uxtb	r3, r3
 800177e:	461a      	mov	r2, r3
 8001780:	2100      	movs	r1, #0
 8001782:	2078      	movs	r0, #120	; 0x78
 8001784:	f000 f9ba 	bl	8001afc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001788:	2200      	movs	r2, #0
 800178a:	2100      	movs	r1, #0
 800178c:	2078      	movs	r0, #120	; 0x78
 800178e:	f000 f9b5 	bl	8001afc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001792:	2210      	movs	r2, #16
 8001794:	2100      	movs	r1, #0
 8001796:	2078      	movs	r0, #120	; 0x78
 8001798:	f000 f9b0 	bl	8001afc <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	01db      	lsls	r3, r3, #7
 80017a0:	4a08      	ldr	r2, [pc, #32]	; (80017c4 <SSD1306_UpdateScreen+0x58>)
 80017a2:	441a      	add	r2, r3
 80017a4:	2380      	movs	r3, #128	; 0x80
 80017a6:	2140      	movs	r1, #64	; 0x40
 80017a8:	2078      	movs	r0, #120	; 0x78
 80017aa:	f000 f95f 	bl	8001a6c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80017ae:	79fb      	ldrb	r3, [r7, #7]
 80017b0:	3301      	adds	r3, #1
 80017b2:	71fb      	strb	r3, [r7, #7]
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	2b07      	cmp	r3, #7
 80017b8:	d9de      	bls.n	8001778 <SSD1306_UpdateScreen+0xc>
	}
}
 80017ba:	bf00      	nop
 80017bc:	bf00      	nop
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20000108 	.word	0x20000108

080017c8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d101      	bne.n	80017dc <SSD1306_Fill+0x14>
 80017d8:	2300      	movs	r3, #0
 80017da:	e000      	b.n	80017de <SSD1306_Fill+0x16>
 80017dc:	23ff      	movs	r3, #255	; 0xff
 80017de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017e2:	4619      	mov	r1, r3
 80017e4:	4803      	ldr	r0, [pc, #12]	; (80017f4 <SSD1306_Fill+0x2c>)
 80017e6:	f004 fe3f 	bl	8006468 <memset>
}
 80017ea:	bf00      	nop
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20000108 	.word	0x20000108

080017f8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	80fb      	strh	r3, [r7, #6]
 8001802:	460b      	mov	r3, r1
 8001804:	80bb      	strh	r3, [r7, #4]
 8001806:	4613      	mov	r3, r2
 8001808:	70fb      	strb	r3, [r7, #3]
	if (
 800180a:	88fb      	ldrh	r3, [r7, #6]
 800180c:	2b7f      	cmp	r3, #127	; 0x7f
 800180e:	d848      	bhi.n	80018a2 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001810:	88bb      	ldrh	r3, [r7, #4]
 8001812:	2b3f      	cmp	r3, #63	; 0x3f
 8001814:	d845      	bhi.n	80018a2 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001816:	4b26      	ldr	r3, [pc, #152]	; (80018b0 <SSD1306_DrawPixel+0xb8>)
 8001818:	791b      	ldrb	r3, [r3, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d006      	beq.n	800182c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800181e:	78fb      	ldrb	r3, [r7, #3]
 8001820:	2b00      	cmp	r3, #0
 8001822:	bf0c      	ite	eq
 8001824:	2301      	moveq	r3, #1
 8001826:	2300      	movne	r3, #0
 8001828:	b2db      	uxtb	r3, r3
 800182a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800182c:	78fb      	ldrb	r3, [r7, #3]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d11a      	bne.n	8001868 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001832:	88fa      	ldrh	r2, [r7, #6]
 8001834:	88bb      	ldrh	r3, [r7, #4]
 8001836:	08db      	lsrs	r3, r3, #3
 8001838:	b298      	uxth	r0, r3
 800183a:	4603      	mov	r3, r0
 800183c:	01db      	lsls	r3, r3, #7
 800183e:	4413      	add	r3, r2
 8001840:	4a1c      	ldr	r2, [pc, #112]	; (80018b4 <SSD1306_DrawPixel+0xbc>)
 8001842:	5cd3      	ldrb	r3, [r2, r3]
 8001844:	b25a      	sxtb	r2, r3
 8001846:	88bb      	ldrh	r3, [r7, #4]
 8001848:	f003 0307 	and.w	r3, r3, #7
 800184c:	2101      	movs	r1, #1
 800184e:	fa01 f303 	lsl.w	r3, r1, r3
 8001852:	b25b      	sxtb	r3, r3
 8001854:	4313      	orrs	r3, r2
 8001856:	b259      	sxtb	r1, r3
 8001858:	88fa      	ldrh	r2, [r7, #6]
 800185a:	4603      	mov	r3, r0
 800185c:	01db      	lsls	r3, r3, #7
 800185e:	4413      	add	r3, r2
 8001860:	b2c9      	uxtb	r1, r1
 8001862:	4a14      	ldr	r2, [pc, #80]	; (80018b4 <SSD1306_DrawPixel+0xbc>)
 8001864:	54d1      	strb	r1, [r2, r3]
 8001866:	e01d      	b.n	80018a4 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001868:	88fa      	ldrh	r2, [r7, #6]
 800186a:	88bb      	ldrh	r3, [r7, #4]
 800186c:	08db      	lsrs	r3, r3, #3
 800186e:	b298      	uxth	r0, r3
 8001870:	4603      	mov	r3, r0
 8001872:	01db      	lsls	r3, r3, #7
 8001874:	4413      	add	r3, r2
 8001876:	4a0f      	ldr	r2, [pc, #60]	; (80018b4 <SSD1306_DrawPixel+0xbc>)
 8001878:	5cd3      	ldrb	r3, [r2, r3]
 800187a:	b25a      	sxtb	r2, r3
 800187c:	88bb      	ldrh	r3, [r7, #4]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	2101      	movs	r1, #1
 8001884:	fa01 f303 	lsl.w	r3, r1, r3
 8001888:	b25b      	sxtb	r3, r3
 800188a:	43db      	mvns	r3, r3
 800188c:	b25b      	sxtb	r3, r3
 800188e:	4013      	ands	r3, r2
 8001890:	b259      	sxtb	r1, r3
 8001892:	88fa      	ldrh	r2, [r7, #6]
 8001894:	4603      	mov	r3, r0
 8001896:	01db      	lsls	r3, r3, #7
 8001898:	4413      	add	r3, r2
 800189a:	b2c9      	uxtb	r1, r1
 800189c:	4a05      	ldr	r2, [pc, #20]	; (80018b4 <SSD1306_DrawPixel+0xbc>)
 800189e:	54d1      	strb	r1, [r2, r3]
 80018a0:	e000      	b.n	80018a4 <SSD1306_DrawPixel+0xac>
		return;
 80018a2:	bf00      	nop
	}
}
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	20000508 	.word	0x20000508
 80018b4:	20000108 	.word	0x20000108

080018b8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	460a      	mov	r2, r1
 80018c2:	80fb      	strh	r3, [r7, #6]
 80018c4:	4613      	mov	r3, r2
 80018c6:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80018c8:	4a05      	ldr	r2, [pc, #20]	; (80018e0 <SSD1306_GotoXY+0x28>)
 80018ca:	88fb      	ldrh	r3, [r7, #6]
 80018cc:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80018ce:	4a04      	ldr	r2, [pc, #16]	; (80018e0 <SSD1306_GotoXY+0x28>)
 80018d0:	88bb      	ldrh	r3, [r7, #4]
 80018d2:	8053      	strh	r3, [r2, #2]
}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	20000508 	.word	0x20000508

080018e4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	6039      	str	r1, [r7, #0]
 80018ee:	71fb      	strb	r3, [r7, #7]
 80018f0:	4613      	mov	r3, r2
 80018f2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80018f4:	4b3a      	ldr	r3, [pc, #232]	; (80019e0 <SSD1306_Putc+0xfc>)
 80018f6:	881b      	ldrh	r3, [r3, #0]
 80018f8:	461a      	mov	r2, r3
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	4413      	add	r3, r2
	if (
 8001900:	2b7f      	cmp	r3, #127	; 0x7f
 8001902:	dc07      	bgt.n	8001914 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001904:	4b36      	ldr	r3, [pc, #216]	; (80019e0 <SSD1306_Putc+0xfc>)
 8001906:	885b      	ldrh	r3, [r3, #2]
 8001908:	461a      	mov	r2, r3
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	785b      	ldrb	r3, [r3, #1]
 800190e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001910:	2b3f      	cmp	r3, #63	; 0x3f
 8001912:	dd01      	ble.n	8001918 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001914:	2300      	movs	r3, #0
 8001916:	e05e      	b.n	80019d6 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]
 800191c:	e04b      	b.n	80019b6 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685a      	ldr	r2, [r3, #4]
 8001922:	79fb      	ldrb	r3, [r7, #7]
 8001924:	3b20      	subs	r3, #32
 8001926:	6839      	ldr	r1, [r7, #0]
 8001928:	7849      	ldrb	r1, [r1, #1]
 800192a:	fb01 f303 	mul.w	r3, r1, r3
 800192e:	4619      	mov	r1, r3
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	440b      	add	r3, r1
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	4413      	add	r3, r2
 8001938:	881b      	ldrh	r3, [r3, #0]
 800193a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800193c:	2300      	movs	r3, #0
 800193e:	613b      	str	r3, [r7, #16]
 8001940:	e030      	b.n	80019a4 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001942:	68fa      	ldr	r2, [r7, #12]
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d010      	beq.n	8001974 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001952:	4b23      	ldr	r3, [pc, #140]	; (80019e0 <SSD1306_Putc+0xfc>)
 8001954:	881a      	ldrh	r2, [r3, #0]
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	b29b      	uxth	r3, r3
 800195a:	4413      	add	r3, r2
 800195c:	b298      	uxth	r0, r3
 800195e:	4b20      	ldr	r3, [pc, #128]	; (80019e0 <SSD1306_Putc+0xfc>)
 8001960:	885a      	ldrh	r2, [r3, #2]
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	b29b      	uxth	r3, r3
 8001966:	4413      	add	r3, r2
 8001968:	b29b      	uxth	r3, r3
 800196a:	79ba      	ldrb	r2, [r7, #6]
 800196c:	4619      	mov	r1, r3
 800196e:	f7ff ff43 	bl	80017f8 <SSD1306_DrawPixel>
 8001972:	e014      	b.n	800199e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001974:	4b1a      	ldr	r3, [pc, #104]	; (80019e0 <SSD1306_Putc+0xfc>)
 8001976:	881a      	ldrh	r2, [r3, #0]
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	b29b      	uxth	r3, r3
 800197c:	4413      	add	r3, r2
 800197e:	b298      	uxth	r0, r3
 8001980:	4b17      	ldr	r3, [pc, #92]	; (80019e0 <SSD1306_Putc+0xfc>)
 8001982:	885a      	ldrh	r2, [r3, #2]
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	b29b      	uxth	r3, r3
 8001988:	4413      	add	r3, r2
 800198a:	b299      	uxth	r1, r3
 800198c:	79bb      	ldrb	r3, [r7, #6]
 800198e:	2b00      	cmp	r3, #0
 8001990:	bf0c      	ite	eq
 8001992:	2301      	moveq	r3, #1
 8001994:	2300      	movne	r3, #0
 8001996:	b2db      	uxtb	r3, r3
 8001998:	461a      	mov	r2, r3
 800199a:	f7ff ff2d 	bl	80017f8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	3301      	adds	r3, #1
 80019a2:	613b      	str	r3, [r7, #16]
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	461a      	mov	r2, r3
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d3c8      	bcc.n	8001942 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	3301      	adds	r3, #1
 80019b4:	617b      	str	r3, [r7, #20]
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	785b      	ldrb	r3, [r3, #1]
 80019ba:	461a      	mov	r2, r3
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	4293      	cmp	r3, r2
 80019c0:	d3ad      	bcc.n	800191e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80019c2:	4b07      	ldr	r3, [pc, #28]	; (80019e0 <SSD1306_Putc+0xfc>)
 80019c4:	881a      	ldrh	r2, [r3, #0]
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	4413      	add	r3, r2
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	4b03      	ldr	r3, [pc, #12]	; (80019e0 <SSD1306_Putc+0xfc>)
 80019d2:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80019d4:	79fb      	ldrb	r3, [r7, #7]
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3718      	adds	r7, #24
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	20000508 	.word	0x20000508

080019e4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	4613      	mov	r3, r2
 80019f0:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80019f2:	e012      	b.n	8001a1a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	79fa      	ldrb	r2, [r7, #7]
 80019fa:	68b9      	ldr	r1, [r7, #8]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff ff71 	bl	80018e4 <SSD1306_Putc>
 8001a02:	4603      	mov	r3, r0
 8001a04:	461a      	mov	r2, r3
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d002      	beq.n	8001a14 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	e008      	b.n	8001a26 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	3301      	adds	r3, #1
 8001a18:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1e8      	bne.n	80019f4 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	781b      	ldrb	r3, [r3, #0]
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001a32:	2000      	movs	r0, #0
 8001a34:	f7ff fec8 	bl	80017c8 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001a38:	f7ff fe98 	bl	800176c <SSD1306_UpdateScreen>
}
 8001a3c:	bf00      	nop
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001a46:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <ssd1306_I2C_Init+0x28>)
 8001a48:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001a4a:	e002      	b.n	8001a52 <ssd1306_I2C_Init+0x12>
		p--;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d1f9      	bne.n	8001a4c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001a58:	bf00      	nop
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	0003d090 	.word	0x0003d090

08001a6c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001a6c:	b590      	push	{r4, r7, lr}
 8001a6e:	b0c7      	sub	sp, #284	; 0x11c
 8001a70:	af02      	add	r7, sp, #8
 8001a72:	4604      	mov	r4, r0
 8001a74:	4608      	mov	r0, r1
 8001a76:	4639      	mov	r1, r7
 8001a78:	600a      	str	r2, [r1, #0]
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	1dfb      	adds	r3, r7, #7
 8001a7e:	4622      	mov	r2, r4
 8001a80:	701a      	strb	r2, [r3, #0]
 8001a82:	1dbb      	adds	r3, r7, #6
 8001a84:	4602      	mov	r2, r0
 8001a86:	701a      	strb	r2, [r3, #0]
 8001a88:	1d3b      	adds	r3, r7, #4
 8001a8a:	460a      	mov	r2, r1
 8001a8c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001a8e:	f107 030c 	add.w	r3, r7, #12
 8001a92:	1dba      	adds	r2, r7, #6
 8001a94:	7812      	ldrb	r2, [r2, #0]
 8001a96:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001a98:	2300      	movs	r3, #0
 8001a9a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001a9e:	e010      	b.n	8001ac2 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8001aa0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001aa4:	463a      	mov	r2, r7
 8001aa6:	6812      	ldr	r2, [r2, #0]
 8001aa8:	441a      	add	r2, r3
 8001aaa:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001aae:	3301      	adds	r3, #1
 8001ab0:	7811      	ldrb	r1, [r2, #0]
 8001ab2:	f107 020c 	add.w	r2, r7, #12
 8001ab6:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001ab8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001abc:	3301      	adds	r3, #1
 8001abe:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001ac2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	1d3a      	adds	r2, r7, #4
 8001aca:	8812      	ldrh	r2, [r2, #0]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d8e7      	bhi.n	8001aa0 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001ad0:	1dfb      	adds	r3, r7, #7
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	b299      	uxth	r1, r3
 8001ad6:	1d3b      	adds	r3, r7, #4
 8001ad8:	881b      	ldrh	r3, [r3, #0]
 8001ada:	3301      	adds	r3, #1
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	f107 020c 	add.w	r2, r7, #12
 8001ae2:	200a      	movs	r0, #10
 8001ae4:	9000      	str	r0, [sp, #0]
 8001ae6:	4804      	ldr	r0, [pc, #16]	; (8001af8 <ssd1306_I2C_WriteMulti+0x8c>)
 8001ae8:	f001 f98a 	bl	8002e00 <HAL_I2C_Master_Transmit>
}
 8001aec:	bf00      	nop
 8001aee:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd90      	pop	{r4, r7, pc}
 8001af6:	bf00      	nop
 8001af8:	200005a4 	.word	0x200005a4

08001afc <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af02      	add	r7, sp, #8
 8001b02:	4603      	mov	r3, r0
 8001b04:	71fb      	strb	r3, [r7, #7]
 8001b06:	460b      	mov	r3, r1
 8001b08:	71bb      	strb	r3, [r7, #6]
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001b0e:	79bb      	ldrb	r3, [r7, #6]
 8001b10:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001b12:	797b      	ldrb	r3, [r7, #5]
 8001b14:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001b16:	79fb      	ldrb	r3, [r7, #7]
 8001b18:	b299      	uxth	r1, r3
 8001b1a:	f107 020c 	add.w	r2, r7, #12
 8001b1e:	230a      	movs	r3, #10
 8001b20:	9300      	str	r3, [sp, #0]
 8001b22:	2302      	movs	r3, #2
 8001b24:	4803      	ldr	r0, [pc, #12]	; (8001b34 <ssd1306_I2C_Write+0x38>)
 8001b26:	f001 f96b 	bl	8002e00 <HAL_I2C_Master_Transmit>
}
 8001b2a:	bf00      	nop
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	200005a4 	.word	0x200005a4

08001b38 <ssd1306_write>:

void ssd1306_write(uint32_t buff, FontDef_t Font)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	1d3b      	adds	r3, r7, #4
 8001b42:	e883 0006 	stmia.w	r3, {r1, r2}
//	SSD1306_Clear ();
//	SSD1306_Fill(SSD1306_COLOR_BLACK);
	SSD1306_Puts(buff, &Font, 1);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	1d39      	adds	r1, r7, #4
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff ff49 	bl	80019e4 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001b52:	f7ff fe0b 	bl	800176c <SSD1306_UpdateScreen>
}
 8001b56:	bf00      	nop
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
	...

08001b60 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b08a      	sub	sp, #40	; 0x28
 8001b64:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b66:	f107 0314 	add.w	r3, r7, #20
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	605a      	str	r2, [r3, #4]
 8001b70:	609a      	str	r2, [r3, #8]
 8001b72:	60da      	str	r2, [r3, #12]
 8001b74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	613b      	str	r3, [r7, #16]
 8001b7a:	4b30      	ldr	r3, [pc, #192]	; (8001c3c <MX_GPIO_Init+0xdc>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	4a2f      	ldr	r2, [pc, #188]	; (8001c3c <MX_GPIO_Init+0xdc>)
 8001b80:	f043 0304 	orr.w	r3, r3, #4
 8001b84:	6313      	str	r3, [r2, #48]	; 0x30
 8001b86:	4b2d      	ldr	r3, [pc, #180]	; (8001c3c <MX_GPIO_Init+0xdc>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	f003 0304 	and.w	r3, r3, #4
 8001b8e:	613b      	str	r3, [r7, #16]
 8001b90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	4b29      	ldr	r3, [pc, #164]	; (8001c3c <MX_GPIO_Init+0xdc>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	4a28      	ldr	r2, [pc, #160]	; (8001c3c <MX_GPIO_Init+0xdc>)
 8001b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba2:	4b26      	ldr	r3, [pc, #152]	; (8001c3c <MX_GPIO_Init+0xdc>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60bb      	str	r3, [r7, #8]
 8001bb2:	4b22      	ldr	r3, [pc, #136]	; (8001c3c <MX_GPIO_Init+0xdc>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	4a21      	ldr	r2, [pc, #132]	; (8001c3c <MX_GPIO_Init+0xdc>)
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bbe:	4b1f      	ldr	r3, [pc, #124]	; (8001c3c <MX_GPIO_Init+0xdc>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	60bb      	str	r3, [r7, #8]
 8001bc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	607b      	str	r3, [r7, #4]
 8001bce:	4b1b      	ldr	r3, [pc, #108]	; (8001c3c <MX_GPIO_Init+0xdc>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	4a1a      	ldr	r2, [pc, #104]	; (8001c3c <MX_GPIO_Init+0xdc>)
 8001bd4:	f043 0302 	orr.w	r3, r3, #2
 8001bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bda:	4b18      	ldr	r3, [pc, #96]	; (8001c3c <MX_GPIO_Init+0xdc>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	607b      	str	r3, [r7, #4]
 8001be4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DW_RST_Pin|DW_IRQ_Pin, GPIO_PIN_RESET);
 8001be6:	2200      	movs	r2, #0
 8001be8:	2103      	movs	r1, #3
 8001bea:	4815      	ldr	r0, [pc, #84]	; (8001c40 <MX_GPIO_Init+0xe0>)
 8001bec:	f000 ffaa 	bl	8002b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	2140      	movs	r1, #64	; 0x40
 8001bf4:	4813      	ldr	r0, [pc, #76]	; (8001c44 <MX_GPIO_Init+0xe4>)
 8001bf6:	f000 ffa5 	bl	8002b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DW_RST_Pin|DW_IRQ_Pin;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c02:	2300      	movs	r3, #0
 8001c04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c06:	2300      	movs	r3, #0
 8001c08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c0a:	f107 0314 	add.w	r3, r7, #20
 8001c0e:	4619      	mov	r1, r3
 8001c10:	480b      	ldr	r0, [pc, #44]	; (8001c40 <MX_GPIO_Init+0xe0>)
 8001c12:	f000 fe13 	bl	800283c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DW_CS_Pin;
 8001c16:	2340      	movs	r3, #64	; 0x40
 8001c18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c22:	2300      	movs	r3, #0
 8001c24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DW_CS_GPIO_Port, &GPIO_InitStruct);
 8001c26:	f107 0314 	add.w	r3, r7, #20
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4805      	ldr	r0, [pc, #20]	; (8001c44 <MX_GPIO_Init+0xe4>)
 8001c2e:	f000 fe05 	bl	800283c <HAL_GPIO_Init>

}
 8001c32:	bf00      	nop
 8001c34:	3728      	adds	r7, #40	; 0x28
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	40020000 	.word	0x40020000
 8001c44:	40020400 	.word	0x40020400

08001c48 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c4c:	4b12      	ldr	r3, [pc, #72]	; (8001c98 <MX_I2C1_Init+0x50>)
 8001c4e:	4a13      	ldr	r2, [pc, #76]	; (8001c9c <MX_I2C1_Init+0x54>)
 8001c50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001c52:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <MX_I2C1_Init+0x50>)
 8001c54:	4a12      	ldr	r2, [pc, #72]	; (8001ca0 <MX_I2C1_Init+0x58>)
 8001c56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c58:	4b0f      	ldr	r3, [pc, #60]	; (8001c98 <MX_I2C1_Init+0x50>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c5e:	4b0e      	ldr	r3, [pc, #56]	; (8001c98 <MX_I2C1_Init+0x50>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c64:	4b0c      	ldr	r3, [pc, #48]	; (8001c98 <MX_I2C1_Init+0x50>)
 8001c66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c6a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c6c:	4b0a      	ldr	r3, [pc, #40]	; (8001c98 <MX_I2C1_Init+0x50>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c72:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <MX_I2C1_Init+0x50>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c78:	4b07      	ldr	r3, [pc, #28]	; (8001c98 <MX_I2C1_Init+0x50>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8001c7e:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <MX_I2C1_Init+0x50>)
 8001c80:	2280      	movs	r2, #128	; 0x80
 8001c82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c84:	4804      	ldr	r0, [pc, #16]	; (8001c98 <MX_I2C1_Init+0x50>)
 8001c86:	f000 ff77 	bl	8002b78 <HAL_I2C_Init>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c90:	f000 f8d4 	bl	8001e3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c94:	bf00      	nop
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	200005a4 	.word	0x200005a4
 8001c9c:	40005400 	.word	0x40005400
 8001ca0:	00061a80 	.word	0x00061a80

08001ca4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b08a      	sub	sp, #40	; 0x28
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cac:	f107 0314 	add.w	r3, r7, #20
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	605a      	str	r2, [r3, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	60da      	str	r2, [r3, #12]
 8001cba:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a1d      	ldr	r2, [pc, #116]	; (8001d38 <HAL_I2C_MspInit+0x94>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d134      	bne.n	8001d30 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	613b      	str	r3, [r7, #16]
 8001cca:	4b1c      	ldr	r3, [pc, #112]	; (8001d3c <HAL_I2C_MspInit+0x98>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	4a1b      	ldr	r2, [pc, #108]	; (8001d3c <HAL_I2C_MspInit+0x98>)
 8001cd0:	f043 0302 	orr.w	r3, r3, #2
 8001cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd6:	4b19      	ldr	r3, [pc, #100]	; (8001d3c <HAL_I2C_MspInit+0x98>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	613b      	str	r3, [r7, #16]
 8001ce0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ce2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ce6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ce8:	2312      	movs	r3, #18
 8001cea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cf4:	2304      	movs	r3, #4
 8001cf6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf8:	f107 0314 	add.w	r3, r7, #20
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4810      	ldr	r0, [pc, #64]	; (8001d40 <HAL_I2C_MspInit+0x9c>)
 8001d00:	f000 fd9c 	bl	800283c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d04:	2300      	movs	r3, #0
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <HAL_I2C_MspInit+0x98>)
 8001d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0c:	4a0b      	ldr	r2, [pc, #44]	; (8001d3c <HAL_I2C_MspInit+0x98>)
 8001d0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d12:	6413      	str	r3, [r2, #64]	; 0x40
 8001d14:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <HAL_I2C_MspInit+0x98>)
 8001d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001d20:	2200      	movs	r2, #0
 8001d22:	2100      	movs	r1, #0
 8001d24:	201f      	movs	r0, #31
 8001d26:	f000 fd14 	bl	8002752 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001d2a:	201f      	movs	r0, #31
 8001d2c:	f000 fd2d 	bl	800278a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001d30:	bf00      	nop
 8001d32:	3728      	adds	r7, #40	; 0x28
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40005400 	.word	0x40005400
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	40020400 	.word	0x40020400

08001d44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d48:	f000 fb6e 	bl	8002428 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d4c:	f000 f80e 	bl	8001d6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d50:	f7ff ff06 	bl	8001b60 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001d54:	f000 f998 	bl	8002088 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001d58:	f000 faca 	bl	80022f0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001d5c:	f7ff ff74 	bl	8001c48 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
//  setup_DW1000RSTnIRQ(0);
  SSD1306_Init();
 8001d60:	f7ff fc40 	bl	80015e4 <SSD1306_Init>
      dw_main();
 8001d64:	f000 f870 	bl	8001e48 <dw_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d68:	e7fe      	b.n	8001d68 <main+0x24>
	...

08001d6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b094      	sub	sp, #80	; 0x50
 8001d70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d72:	f107 0320 	add.w	r3, r7, #32
 8001d76:	2230      	movs	r2, #48	; 0x30
 8001d78:	2100      	movs	r1, #0
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f004 fb74 	bl	8006468 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d80:	f107 030c 	add.w	r3, r7, #12
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
 8001d8c:	60da      	str	r2, [r3, #12]
 8001d8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d90:	2300      	movs	r3, #0
 8001d92:	60bb      	str	r3, [r7, #8]
 8001d94:	4b27      	ldr	r3, [pc, #156]	; (8001e34 <SystemClock_Config+0xc8>)
 8001d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d98:	4a26      	ldr	r2, [pc, #152]	; (8001e34 <SystemClock_Config+0xc8>)
 8001d9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d9e:	6413      	str	r3, [r2, #64]	; 0x40
 8001da0:	4b24      	ldr	r3, [pc, #144]	; (8001e34 <SystemClock_Config+0xc8>)
 8001da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da8:	60bb      	str	r3, [r7, #8]
 8001daa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dac:	2300      	movs	r3, #0
 8001dae:	607b      	str	r3, [r7, #4]
 8001db0:	4b21      	ldr	r3, [pc, #132]	; (8001e38 <SystemClock_Config+0xcc>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a20      	ldr	r2, [pc, #128]	; (8001e38 <SystemClock_Config+0xcc>)
 8001db6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001dba:	6013      	str	r3, [r2, #0]
 8001dbc:	4b1e      	ldr	r3, [pc, #120]	; (8001e38 <SystemClock_Config+0xcc>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001dc4:	607b      	str	r3, [r7, #4]
 8001dc6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001dcc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001dd0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001dd6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001dda:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001ddc:	230c      	movs	r3, #12
 8001dde:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001de0:	2360      	movs	r3, #96	; 0x60
 8001de2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001de4:	2302      	movs	r3, #2
 8001de6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001de8:	2304      	movs	r3, #4
 8001dea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dec:	f107 0320 	add.w	r3, r7, #32
 8001df0:	4618      	mov	r0, r3
 8001df2:	f002 fff5 	bl	8004de0 <HAL_RCC_OscConfig>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001dfc:	f000 f81e 	bl	8001e3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e00:	230f      	movs	r3, #15
 8001e02:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e04:	2302      	movs	r3, #2
 8001e06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e10:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e12:	2300      	movs	r3, #0
 8001e14:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001e16:	f107 030c 	add.w	r3, r7, #12
 8001e1a:	2103      	movs	r1, #3
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f003 fa57 	bl	80052d0 <HAL_RCC_ClockConfig>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001e28:	f000 f808 	bl	8001e3c <Error_Handler>
  }
}
 8001e2c:	bf00      	nop
 8001e2e:	3750      	adds	r7, #80	; 0x50
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40023800 	.word	0x40023800
 8001e38:	40007000 	.word	0x40007000

08001e3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001e40:	b672      	cpsid	i
}
 8001e42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e44:	e7fe      	b.n	8001e44 <Error_Handler+0x8>
	...

08001e48 <dw_main>:

/**
 * Application entry point.
 */
int dw_main(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
	int le6n = strlen(buff);
 8001e4e:	487d      	ldr	r0, [pc, #500]	; (8002044 <dw_main+0x1fc>)
 8001e50:	f7fe f9c6 	bl	80001e0 <strlen>
 8001e54:	4603      	mov	r3, r0
 8001e56:	603b      	str	r3, [r7, #0]
    /* Display application name on LCD. */
	HAL_UART_Transmit(&huart2,buff, strlen(buff), 100);
 8001e58:	487a      	ldr	r0, [pc, #488]	; (8002044 <dw_main+0x1fc>)
 8001e5a:	f7fe f9c1 	bl	80001e0 <strlen>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	2364      	movs	r3, #100	; 0x64
 8001e64:	4977      	ldr	r1, [pc, #476]	; (8002044 <dw_main+0x1fc>)
 8001e66:	4878      	ldr	r0, [pc, #480]	; (8002048 <dw_main+0x200>)
 8001e68:	f004 f80b 	bl	8005e82 <HAL_UART_Transmit>
	ssd1306_write(buff, Font_7x10);
 8001e6c:	4875      	ldr	r0, [pc, #468]	; (8002044 <dw_main+0x1fc>)
 8001e6e:	4b77      	ldr	r3, [pc, #476]	; (800204c <dw_main+0x204>)
 8001e70:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001e74:	f7ff fe60 	bl	8001b38 <ssd1306_write>
    /* Reset and initialise DW1000. See NOTE 2 below.
     * For initialisation, DW1000 clocks must be temporarily set to crystal speed. After initialisation SPI rate can be increased for optimum
     * performance. */
    reset_DW1000(); /* Target specific drive of RSTn line into DW1000 low for a period. */
 8001e78:	f7ff fb2a 	bl	80014d0 <reset_DW1000>
    port_set_dw1000_slowrate();
 8001e7c:	f7ff fb84 	bl	8001588 <port_set_dw1000_slowrate>
    if (dwt_initialise(DWT_LOADNONE) == DWT_ERROR)
 8001e80:	2000      	movs	r0, #0
 8001e82:	f7fe fb81 	bl	8000588 <dwt_initialise>
 8001e86:	4603      	mov	r3, r0
 8001e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e8c:	d110      	bne.n	8001eb0 <dw_main+0x68>
    {
    	HAL_UART_Transmit(&huart2,"Init failed!!!\n", 16, 100);
 8001e8e:	2364      	movs	r3, #100	; 0x64
 8001e90:	2210      	movs	r2, #16
 8001e92:	496f      	ldr	r1, [pc, #444]	; (8002050 <dw_main+0x208>)
 8001e94:	486c      	ldr	r0, [pc, #432]	; (8002048 <dw_main+0x200>)
 8001e96:	f003 fff4 	bl	8005e82 <HAL_UART_Transmit>
    	SSD1306_GotoXY(0, 10);
 8001e9a:	210a      	movs	r1, #10
 8001e9c:	2000      	movs	r0, #0
 8001e9e:	f7ff fd0b 	bl	80018b8 <SSD1306_GotoXY>
    	ssd1306_write("INIT FAILED!!!", Font_7x10);
 8001ea2:	486c      	ldr	r0, [pc, #432]	; (8002054 <dw_main+0x20c>)
 8001ea4:	4b69      	ldr	r3, [pc, #420]	; (800204c <dw_main+0x204>)
 8001ea6:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001eaa:	f7ff fe45 	bl	8001b38 <ssd1306_write>

        while (1)
 8001eae:	e7fe      	b.n	8001eae <dw_main+0x66>
        { };
    }
    port_set_dw1000_fastrate();
 8001eb0:	f7ff fb76 	bl	80015a0 <port_set_dw1000_fastrate>

    /* Configure DW1000. See NOTE 3 below. */
    dwt_configure(&config);
 8001eb4:	4868      	ldr	r0, [pc, #416]	; (8002058 <dw_main+0x210>)
 8001eb6:	f7fe fcbd 	bl	8000834 <dwt_configure>

    /* Loop forever sending and receiving frames periodically. */
    while (1)
    {
    	SSD1306_Clear ();
 8001eba:	f7ff fdb8 	bl	8001a2e <SSD1306_Clear>
    	SSD1306_GotoXY(0, 0);  ssd1306_write("Received :", Font_7x10);
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	2000      	movs	r0, #0
 8001ec2:	f7ff fcf9 	bl	80018b8 <SSD1306_GotoXY>
 8001ec6:	4865      	ldr	r0, [pc, #404]	; (800205c <dw_main+0x214>)
 8001ec8:	4b60      	ldr	r3, [pc, #384]	; (800204c <dw_main+0x204>)
 8001eca:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001ece:	f7ff fe33 	bl	8001b38 <ssd1306_write>
    	SSD1306_GotoXY(0, 30);  ssd1306_write("Transmitted :", Font_7x10);
 8001ed2:	211e      	movs	r1, #30
 8001ed4:	2000      	movs	r0, #0
 8001ed6:	f7ff fcef 	bl	80018b8 <SSD1306_GotoXY>
 8001eda:	4861      	ldr	r0, [pc, #388]	; (8002060 <dw_main+0x218>)
 8001edc:	4b5b      	ldr	r3, [pc, #364]	; (800204c <dw_main+0x204>)
 8001ede:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001ee2:	f7ff fe29 	bl	8001b38 <ssd1306_write>
        /* Activate reception immediately. See NOTE 4 below. */
        dwt_rxenable(DWT_START_RX_IMMEDIATE);
 8001ee6:	2000      	movs	r0, #0
 8001ee8:	f7ff f95e 	bl	80011a8 <dwt_rxenable>

        /* Poll until a frame is properly received or an error occurs. See NOTE 5 below.
         * STATUS register is 5 bytes long but, as the events we are looking at are in the lower bytes of the register, we can use this simplest API
         * function to access it. */
        while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_ERR)))
 8001eec:	bf00      	nop
 8001eee:	2100      	movs	r1, #0
 8001ef0:	200f      	movs	r0, #15
 8001ef2:	f7fe ff0e 	bl	8000d12 <dwt_read32bitoffsetreg>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	4a5a      	ldr	r2, [pc, #360]	; (8002064 <dw_main+0x21c>)
 8001efa:	6013      	str	r3, [r2, #0]
 8001efc:	4b59      	ldr	r3, [pc, #356]	; (8002064 <dw_main+0x21c>)
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	4b59      	ldr	r3, [pc, #356]	; (8002068 <dw_main+0x220>)
 8001f02:	4013      	ands	r3, r2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d0f2      	beq.n	8001eee <dw_main+0xa6>
        { };

        if (status_reg & SYS_STATUS_RXFCG)
 8001f08:	4b56      	ldr	r3, [pc, #344]	; (8002064 <dw_main+0x21c>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	f000 8091 	beq.w	8002038 <dw_main+0x1f0>
        {
            /* A frame has been received, read it into the local buffer. */
            frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFL_MASK_1023;
 8001f16:	2100      	movs	r1, #0
 8001f18:	2010      	movs	r0, #16
 8001f1a:	f7fe fefa 	bl	8000d12 <dwt_read32bitoffsetreg>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	4b50      	ldr	r3, [pc, #320]	; (800206c <dw_main+0x224>)
 8001f2a:	801a      	strh	r2, [r3, #0]
            if (frame_len <= FRAME_LEN_MAX)
 8001f2c:	4b4f      	ldr	r3, [pc, #316]	; (800206c <dw_main+0x224>)
 8001f2e:	881b      	ldrh	r3, [r3, #0]
 8001f30:	2b7f      	cmp	r3, #127	; 0x7f
 8001f32:	d806      	bhi.n	8001f42 <dw_main+0xfa>
            {
                dwt_readrxdata(rx_buffer, frame_len, 0);
 8001f34:	4b4d      	ldr	r3, [pc, #308]	; (800206c <dw_main+0x224>)
 8001f36:	881b      	ldrh	r3, [r3, #0]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	484c      	ldr	r0, [pc, #304]	; (8002070 <dw_main+0x228>)
 8001f3e:	f7fe fe21 	bl	8000b84 <dwt_readrxdata>
            }
            sprintf(buff, "Received : %s\n", rx_buffer);
 8001f42:	4a4b      	ldr	r2, [pc, #300]	; (8002070 <dw_main+0x228>)
 8001f44:	494b      	ldr	r1, [pc, #300]	; (8002074 <dw_main+0x22c>)
 8001f46:	483f      	ldr	r0, [pc, #252]	; (8002044 <dw_main+0x1fc>)
 8001f48:	f004 fa96 	bl	8006478 <siprintf>
            HAL_UART_Transmit(&huart2,buff, sizeof(buff), 100);
 8001f4c:	2364      	movs	r3, #100	; 0x64
 8001f4e:	2211      	movs	r2, #17
 8001f50:	493c      	ldr	r1, [pc, #240]	; (8002044 <dw_main+0x1fc>)
 8001f52:	483d      	ldr	r0, [pc, #244]	; (8002048 <dw_main+0x200>)
 8001f54:	f003 ff95 	bl	8005e82 <HAL_UART_Transmit>


            SSD1306_GotoXY(0, 10); ssd1306_write(rx_buffer, Font_7x10);
 8001f58:	210a      	movs	r1, #10
 8001f5a:	2000      	movs	r0, #0
 8001f5c:	f7ff fcac 	bl	80018b8 <SSD1306_GotoXY>
 8001f60:	4843      	ldr	r0, [pc, #268]	; (8002070 <dw_main+0x228>)
 8001f62:	4b3a      	ldr	r3, [pc, #232]	; (800204c <dw_main+0x204>)
 8001f64:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001f68:	f7ff fde6 	bl	8001b38 <ssd1306_write>

            /* TESTING BREAKPOINT LOCATION #1 */

            /* Clear good RX frame event in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG);
 8001f6c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f70:	2100      	movs	r1, #0
 8001f72:	200f      	movs	r0, #15
 8001f74:	f7fe ff53 	bl	8000e1e <dwt_write32bitoffsetreg>

            /* Validate the frame is the one expected as sent by "TX then wait for a response" example. */
            if ((frame_len == 14) && (rx_buffer[0] == 0xC5) && (rx_buffer[10] == 0x43) && (rx_buffer[11] == 0x2))
 8001f78:	4b3c      	ldr	r3, [pc, #240]	; (800206c <dw_main+0x224>)
 8001f7a:	881b      	ldrh	r3, [r3, #0]
 8001f7c:	2b0e      	cmp	r3, #14
 8001f7e:	d19c      	bne.n	8001eba <dw_main+0x72>
 8001f80:	4b3b      	ldr	r3, [pc, #236]	; (8002070 <dw_main+0x228>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	2bc5      	cmp	r3, #197	; 0xc5
 8001f86:	d198      	bne.n	8001eba <dw_main+0x72>
 8001f88:	4b39      	ldr	r3, [pc, #228]	; (8002070 <dw_main+0x228>)
 8001f8a:	7a9b      	ldrb	r3, [r3, #10]
 8001f8c:	2b43      	cmp	r3, #67	; 0x43
 8001f8e:	d194      	bne.n	8001eba <dw_main+0x72>
 8001f90:	4b37      	ldr	r3, [pc, #220]	; (8002070 <dw_main+0x228>)
 8001f92:	7adb      	ldrb	r3, [r3, #11]
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d190      	bne.n	8001eba <dw_main+0x72>
            {
                int i;

                /* Copy source address of blink in response destination address. */
                for (i = 0; i < 8; i++)
 8001f98:	2300      	movs	r3, #0
 8001f9a:	607b      	str	r3, [r7, #4]
 8001f9c:	e00a      	b.n	8001fb4 <dw_main+0x16c>
                {
                    tx_msg[DATA_FRAME_DEST_IDX + i] = rx_buffer[BLINK_FRAME_SRC_IDX + i];
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	1c9a      	adds	r2, r3, #2
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	3305      	adds	r3, #5
 8001fa6:	4932      	ldr	r1, [pc, #200]	; (8002070 <dw_main+0x228>)
 8001fa8:	5c89      	ldrb	r1, [r1, r2]
 8001faa:	4a33      	ldr	r2, [pc, #204]	; (8002078 <dw_main+0x230>)
 8001fac:	54d1      	strb	r1, [r2, r3]
                for (i = 0; i < 8; i++)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	607b      	str	r3, [r7, #4]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2b07      	cmp	r3, #7
 8001fb8:	ddf1      	ble.n	8001f9e <dw_main+0x156>
                }

                /* Write response frame data to DW1000 and prepare transmission. See NOTE 6 below.*/
                dwt_writetxdata(sizeof(tx_msg), tx_msg, 0); /* Zero offset in TX buffer. */
 8001fba:	2200      	movs	r2, #0
 8001fbc:	492e      	ldr	r1, [pc, #184]	; (8002078 <dw_main+0x230>)
 8001fbe:	2015      	movs	r0, #21
 8001fc0:	f7fe fda2 	bl	8000b08 <dwt_writetxdata>
                dwt_writetxfctrl(sizeof(tx_msg), 0, 0); /* Zero offset in TX buffer, no ranging. */
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	2015      	movs	r0, #21
 8001fca:	f7fe fdbb 	bl	8000b44 <dwt_writetxfctrl>

                /* Send the response. */
                dwt_starttx(DWT_START_TX_IMMEDIATE);
 8001fce:	2000      	movs	r0, #0
 8001fd0:	f7ff f852 	bl	8001078 <dwt_starttx>
                HAL_UART_Transmit(&huart2,"Transmitted : ", 14, 100);
 8001fd4:	2364      	movs	r3, #100	; 0x64
 8001fd6:	220e      	movs	r2, #14
 8001fd8:	4928      	ldr	r1, [pc, #160]	; (800207c <dw_main+0x234>)
 8001fda:	481b      	ldr	r0, [pc, #108]	; (8002048 <dw_main+0x200>)
 8001fdc:	f003 ff51 	bl	8005e82 <HAL_UART_Transmit>
                HAL_UART_Transmit(&huart2,tx_msg, sizeof(tx_msg), 100);
 8001fe0:	2364      	movs	r3, #100	; 0x64
 8001fe2:	2215      	movs	r2, #21
 8001fe4:	4924      	ldr	r1, [pc, #144]	; (8002078 <dw_main+0x230>)
 8001fe6:	4818      	ldr	r0, [pc, #96]	; (8002048 <dw_main+0x200>)
 8001fe8:	f003 ff4b 	bl	8005e82 <HAL_UART_Transmit>
                HAL_UART_Transmit(&huart2,"\n", 1, 100);
 8001fec:	2364      	movs	r3, #100	; 0x64
 8001fee:	2201      	movs	r2, #1
 8001ff0:	4923      	ldr	r1, [pc, #140]	; (8002080 <dw_main+0x238>)
 8001ff2:	4815      	ldr	r0, [pc, #84]	; (8002048 <dw_main+0x200>)
 8001ff4:	f003 ff45 	bl	8005e82 <HAL_UART_Transmit>

                SSD1306_GotoXY(0, 40); ssd1306_write(tx_msg, Font_7x10);
 8001ff8:	2128      	movs	r1, #40	; 0x28
 8001ffa:	2000      	movs	r0, #0
 8001ffc:	f7ff fc5c 	bl	80018b8 <SSD1306_GotoXY>
 8002000:	481d      	ldr	r0, [pc, #116]	; (8002078 <dw_main+0x230>)
 8002002:	4b12      	ldr	r3, [pc, #72]	; (800204c <dw_main+0x204>)
 8002004:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002008:	f7ff fd96 	bl	8001b38 <ssd1306_write>
                /* Poll DW1000 until TX frame sent event set. */
                while (!(dwt_read32bitreg(SYS_STATUS_ID) & SYS_STATUS_TXFRS))
 800200c:	bf00      	nop
 800200e:	2100      	movs	r1, #0
 8002010:	200f      	movs	r0, #15
 8002012:	f7fe fe7e 	bl	8000d12 <dwt_read32bitoffsetreg>
 8002016:	4603      	mov	r3, r0
 8002018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800201c:	2b00      	cmp	r3, #0
 800201e:	d0f6      	beq.n	800200e <dw_main+0x1c6>
                { };

                /* Clear TX frame sent event. */
                dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_TXFRS);
 8002020:	2280      	movs	r2, #128	; 0x80
 8002022:	2100      	movs	r1, #0
 8002024:	200f      	movs	r0, #15
 8002026:	f7fe fefa 	bl	8000e1e <dwt_write32bitoffsetreg>

                /* Increment the data frame sequence number (modulo 256). */
                tx_msg[DATA_FRAME_SN_IDX]++;
 800202a:	4b13      	ldr	r3, [pc, #76]	; (8002078 <dw_main+0x230>)
 800202c:	789b      	ldrb	r3, [r3, #2]
 800202e:	3301      	adds	r3, #1
 8002030:	b2da      	uxtb	r2, r3
 8002032:	4b11      	ldr	r3, [pc, #68]	; (8002078 <dw_main+0x230>)
 8002034:	709a      	strb	r2, [r3, #2]
 8002036:	e740      	b.n	8001eba <dw_main+0x72>
            }
        }
        else
        {
            /* Clear RX error events in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_ERR);
 8002038:	4a12      	ldr	r2, [pc, #72]	; (8002084 <dw_main+0x23c>)
 800203a:	2100      	movs	r1, #0
 800203c:	200f      	movs	r0, #15
 800203e:	f7fe feee 	bl	8000e1e <dwt_write32bitoffsetreg>
    	SSD1306_Clear ();
 8002042:	e73a      	b.n	8001eba <dw_main+0x72>
 8002044:	2000000c 	.word	0x2000000c
 8002048:	20000650 	.word	0x20000650
 800204c:	20000004 	.word	0x20000004
 8002050:	08006cec 	.word	0x08006cec
 8002054:	08006cfc 	.word	0x08006cfc
 8002058:	20000020 	.word	0x20000020
 800205c:	08006d0c 	.word	0x08006d0c
 8002060:	08006d18 	.word	0x08006d18
 8002064:	20000590 	.word	0x20000590
 8002068:	2405d000 	.word	0x2405d000
 800206c:	20000594 	.word	0x20000594
 8002070:	20000510 	.word	0x20000510
 8002074:	08006d28 	.word	0x08006d28
 8002078:	2000002c 	.word	0x2000002c
 800207c:	08006d38 	.word	0x08006d38
 8002080:	08006d48 	.word	0x08006d48
 8002084:	24059000 	.word	0x24059000

08002088 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800208c:	4b17      	ldr	r3, [pc, #92]	; (80020ec <MX_SPI1_Init+0x64>)
 800208e:	4a18      	ldr	r2, [pc, #96]	; (80020f0 <MX_SPI1_Init+0x68>)
 8002090:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002092:	4b16      	ldr	r3, [pc, #88]	; (80020ec <MX_SPI1_Init+0x64>)
 8002094:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002098:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800209a:	4b14      	ldr	r3, [pc, #80]	; (80020ec <MX_SPI1_Init+0x64>)
 800209c:	2200      	movs	r2, #0
 800209e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80020a0:	4b12      	ldr	r3, [pc, #72]	; (80020ec <MX_SPI1_Init+0x64>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020a6:	4b11      	ldr	r3, [pc, #68]	; (80020ec <MX_SPI1_Init+0x64>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020ac:	4b0f      	ldr	r3, [pc, #60]	; (80020ec <MX_SPI1_Init+0x64>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80020b2:	4b0e      	ldr	r3, [pc, #56]	; (80020ec <MX_SPI1_Init+0x64>)
 80020b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020b8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020ba:	4b0c      	ldr	r3, [pc, #48]	; (80020ec <MX_SPI1_Init+0x64>)
 80020bc:	2200      	movs	r2, #0
 80020be:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020c0:	4b0a      	ldr	r3, [pc, #40]	; (80020ec <MX_SPI1_Init+0x64>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80020c6:	4b09      	ldr	r3, [pc, #36]	; (80020ec <MX_SPI1_Init+0x64>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020cc:	4b07      	ldr	r3, [pc, #28]	; (80020ec <MX_SPI1_Init+0x64>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80020d2:	4b06      	ldr	r3, [pc, #24]	; (80020ec <MX_SPI1_Init+0x64>)
 80020d4:	220a      	movs	r2, #10
 80020d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80020d8:	4804      	ldr	r0, [pc, #16]	; (80020ec <MX_SPI1_Init+0x64>)
 80020da:	f003 fac9 	bl	8005670 <HAL_SPI_Init>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80020e4:	f7ff feaa 	bl	8001e3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80020e8:	bf00      	nop
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	200005f8 	.word	0x200005f8
 80020f0:	40013000 	.word	0x40013000

080020f4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b08a      	sub	sp, #40	; 0x28
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020fc:	f107 0314 	add.w	r3, r7, #20
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	605a      	str	r2, [r3, #4]
 8002106:	609a      	str	r2, [r3, #8]
 8002108:	60da      	str	r2, [r3, #12]
 800210a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a1d      	ldr	r2, [pc, #116]	; (8002188 <HAL_SPI_MspInit+0x94>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d133      	bne.n	800217e <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002116:	2300      	movs	r3, #0
 8002118:	613b      	str	r3, [r7, #16]
 800211a:	4b1c      	ldr	r3, [pc, #112]	; (800218c <HAL_SPI_MspInit+0x98>)
 800211c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211e:	4a1b      	ldr	r2, [pc, #108]	; (800218c <HAL_SPI_MspInit+0x98>)
 8002120:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002124:	6453      	str	r3, [r2, #68]	; 0x44
 8002126:	4b19      	ldr	r3, [pc, #100]	; (800218c <HAL_SPI_MspInit+0x98>)
 8002128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800212e:	613b      	str	r3, [r7, #16]
 8002130:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	4b15      	ldr	r3, [pc, #84]	; (800218c <HAL_SPI_MspInit+0x98>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	4a14      	ldr	r2, [pc, #80]	; (800218c <HAL_SPI_MspInit+0x98>)
 800213c:	f043 0301 	orr.w	r3, r3, #1
 8002140:	6313      	str	r3, [r2, #48]	; 0x30
 8002142:	4b12      	ldr	r3, [pc, #72]	; (800218c <HAL_SPI_MspInit+0x98>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800214e:	23e0      	movs	r3, #224	; 0xe0
 8002150:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002152:	2302      	movs	r3, #2
 8002154:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002156:	2300      	movs	r3, #0
 8002158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800215a:	2303      	movs	r3, #3
 800215c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800215e:	2305      	movs	r3, #5
 8002160:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002162:	f107 0314 	add.w	r3, r7, #20
 8002166:	4619      	mov	r1, r3
 8002168:	4809      	ldr	r0, [pc, #36]	; (8002190 <HAL_SPI_MspInit+0x9c>)
 800216a:	f000 fb67 	bl	800283c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800216e:	2200      	movs	r2, #0
 8002170:	2100      	movs	r1, #0
 8002172:	2023      	movs	r0, #35	; 0x23
 8002174:	f000 faed 	bl	8002752 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002178:	2023      	movs	r0, #35	; 0x23
 800217a:	f000 fb06 	bl	800278a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800217e:	bf00      	nop
 8002180:	3728      	adds	r7, #40	; 0x28
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40013000 	.word	0x40013000
 800218c:	40023800 	.word	0x40023800
 8002190:	40020000 	.word	0x40020000

08002194 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	607b      	str	r3, [r7, #4]
 800219e:	4b10      	ldr	r3, [pc, #64]	; (80021e0 <HAL_MspInit+0x4c>)
 80021a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a2:	4a0f      	ldr	r2, [pc, #60]	; (80021e0 <HAL_MspInit+0x4c>)
 80021a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021a8:	6453      	str	r3, [r2, #68]	; 0x44
 80021aa:	4b0d      	ldr	r3, [pc, #52]	; (80021e0 <HAL_MspInit+0x4c>)
 80021ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021b2:	607b      	str	r3, [r7, #4]
 80021b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021b6:	2300      	movs	r3, #0
 80021b8:	603b      	str	r3, [r7, #0]
 80021ba:	4b09      	ldr	r3, [pc, #36]	; (80021e0 <HAL_MspInit+0x4c>)
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	4a08      	ldr	r2, [pc, #32]	; (80021e0 <HAL_MspInit+0x4c>)
 80021c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021c4:	6413      	str	r3, [r2, #64]	; 0x40
 80021c6:	4b06      	ldr	r3, [pc, #24]	; (80021e0 <HAL_MspInit+0x4c>)
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ce:	603b      	str	r3, [r7, #0]
 80021d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	40023800 	.word	0x40023800

080021e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021e8:	e7fe      	b.n	80021e8 <NMI_Handler+0x4>

080021ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021ea:	b480      	push	{r7}
 80021ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021ee:	e7fe      	b.n	80021ee <HardFault_Handler+0x4>

080021f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021f4:	e7fe      	b.n	80021f4 <MemManage_Handler+0x4>

080021f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021f6:	b480      	push	{r7}
 80021f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021fa:	e7fe      	b.n	80021fa <BusFault_Handler+0x4>

080021fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002200:	e7fe      	b.n	8002200 <UsageFault_Handler+0x4>

08002202 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002202:	b480      	push	{r7}
 8002204:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002206:	bf00      	nop
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002214:	bf00      	nop
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800221e:	b480      	push	{r7}
 8002220:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002222:	bf00      	nop
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002230:	f000 f94c 	bl	80024cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002234:	bf00      	nop
 8002236:	bd80      	pop	{r7, pc}

08002238 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800223c:	4802      	ldr	r0, [pc, #8]	; (8002248 <I2C1_EV_IRQHandler+0x10>)
 800223e:	f001 f80b 	bl	8003258 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002242:	bf00      	nop
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	200005a4 	.word	0x200005a4

0800224c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002250:	4802      	ldr	r0, [pc, #8]	; (800225c <SPI1_IRQHandler+0x10>)
 8002252:	f003 fbd3 	bl	80059fc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002256:	bf00      	nop
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	200005f8 	.word	0x200005f8

08002260 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002268:	4a14      	ldr	r2, [pc, #80]	; (80022bc <_sbrk+0x5c>)
 800226a:	4b15      	ldr	r3, [pc, #84]	; (80022c0 <_sbrk+0x60>)
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002274:	4b13      	ldr	r3, [pc, #76]	; (80022c4 <_sbrk+0x64>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d102      	bne.n	8002282 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800227c:	4b11      	ldr	r3, [pc, #68]	; (80022c4 <_sbrk+0x64>)
 800227e:	4a12      	ldr	r2, [pc, #72]	; (80022c8 <_sbrk+0x68>)
 8002280:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002282:	4b10      	ldr	r3, [pc, #64]	; (80022c4 <_sbrk+0x64>)
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4413      	add	r3, r2
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	429a      	cmp	r2, r3
 800228e:	d207      	bcs.n	80022a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002290:	f004 f8c0 	bl	8006414 <__errno>
 8002294:	4603      	mov	r3, r0
 8002296:	220c      	movs	r2, #12
 8002298:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800229a:	f04f 33ff 	mov.w	r3, #4294967295
 800229e:	e009      	b.n	80022b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022a0:	4b08      	ldr	r3, [pc, #32]	; (80022c4 <_sbrk+0x64>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022a6:	4b07      	ldr	r3, [pc, #28]	; (80022c4 <_sbrk+0x64>)
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4413      	add	r3, r2
 80022ae:	4a05      	ldr	r2, [pc, #20]	; (80022c4 <_sbrk+0x64>)
 80022b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022b2:	68fb      	ldr	r3, [r7, #12]
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3718      	adds	r7, #24
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	20020000 	.word	0x20020000
 80022c0:	00000400 	.word	0x00000400
 80022c4:	20000598 	.word	0x20000598
 80022c8:	200006a8 	.word	0x200006a8

080022cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022d0:	4b06      	ldr	r3, [pc, #24]	; (80022ec <SystemInit+0x20>)
 80022d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d6:	4a05      	ldr	r2, [pc, #20]	; (80022ec <SystemInit+0x20>)
 80022d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022e0:	bf00      	nop
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	e000ed00 	.word	0xe000ed00

080022f0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022f4:	4b11      	ldr	r3, [pc, #68]	; (800233c <MX_USART2_UART_Init+0x4c>)
 80022f6:	4a12      	ldr	r2, [pc, #72]	; (8002340 <MX_USART2_UART_Init+0x50>)
 80022f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80022fa:	4b10      	ldr	r3, [pc, #64]	; (800233c <MX_USART2_UART_Init+0x4c>)
 80022fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002300:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002302:	4b0e      	ldr	r3, [pc, #56]	; (800233c <MX_USART2_UART_Init+0x4c>)
 8002304:	2200      	movs	r2, #0
 8002306:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002308:	4b0c      	ldr	r3, [pc, #48]	; (800233c <MX_USART2_UART_Init+0x4c>)
 800230a:	2200      	movs	r2, #0
 800230c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800230e:	4b0b      	ldr	r3, [pc, #44]	; (800233c <MX_USART2_UART_Init+0x4c>)
 8002310:	2200      	movs	r2, #0
 8002312:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002314:	4b09      	ldr	r3, [pc, #36]	; (800233c <MX_USART2_UART_Init+0x4c>)
 8002316:	220c      	movs	r2, #12
 8002318:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800231a:	4b08      	ldr	r3, [pc, #32]	; (800233c <MX_USART2_UART_Init+0x4c>)
 800231c:	2200      	movs	r2, #0
 800231e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002320:	4b06      	ldr	r3, [pc, #24]	; (800233c <MX_USART2_UART_Init+0x4c>)
 8002322:	2200      	movs	r2, #0
 8002324:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002326:	4805      	ldr	r0, [pc, #20]	; (800233c <MX_USART2_UART_Init+0x4c>)
 8002328:	f003 fd5e 	bl	8005de8 <HAL_UART_Init>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002332:	f7ff fd83 	bl	8001e3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002336:	bf00      	nop
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	20000650 	.word	0x20000650
 8002340:	40004400 	.word	0x40004400

08002344 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b08a      	sub	sp, #40	; 0x28
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800234c:	f107 0314 	add.w	r3, r7, #20
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	605a      	str	r2, [r3, #4]
 8002356:	609a      	str	r2, [r3, #8]
 8002358:	60da      	str	r2, [r3, #12]
 800235a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a19      	ldr	r2, [pc, #100]	; (80023c8 <HAL_UART_MspInit+0x84>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d12b      	bne.n	80023be <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002366:	2300      	movs	r3, #0
 8002368:	613b      	str	r3, [r7, #16]
 800236a:	4b18      	ldr	r3, [pc, #96]	; (80023cc <HAL_UART_MspInit+0x88>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	4a17      	ldr	r2, [pc, #92]	; (80023cc <HAL_UART_MspInit+0x88>)
 8002370:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002374:	6413      	str	r3, [r2, #64]	; 0x40
 8002376:	4b15      	ldr	r3, [pc, #84]	; (80023cc <HAL_UART_MspInit+0x88>)
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237e:	613b      	str	r3, [r7, #16]
 8002380:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002382:	2300      	movs	r3, #0
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	4b11      	ldr	r3, [pc, #68]	; (80023cc <HAL_UART_MspInit+0x88>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	4a10      	ldr	r2, [pc, #64]	; (80023cc <HAL_UART_MspInit+0x88>)
 800238c:	f043 0301 	orr.w	r3, r3, #1
 8002390:	6313      	str	r3, [r2, #48]	; 0x30
 8002392:	4b0e      	ldr	r3, [pc, #56]	; (80023cc <HAL_UART_MspInit+0x88>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800239e:	230c      	movs	r3, #12
 80023a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a2:	2302      	movs	r3, #2
 80023a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a6:	2300      	movs	r3, #0
 80023a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023aa:	2303      	movs	r3, #3
 80023ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023ae:	2307      	movs	r3, #7
 80023b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b2:	f107 0314 	add.w	r3, r7, #20
 80023b6:	4619      	mov	r1, r3
 80023b8:	4805      	ldr	r0, [pc, #20]	; (80023d0 <HAL_UART_MspInit+0x8c>)
 80023ba:	f000 fa3f 	bl	800283c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80023be:	bf00      	nop
 80023c0:	3728      	adds	r7, #40	; 0x28
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40004400 	.word	0x40004400
 80023cc:	40023800 	.word	0x40023800
 80023d0:	40020000 	.word	0x40020000

080023d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80023d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800240c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023d8:	480d      	ldr	r0, [pc, #52]	; (8002410 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023da:	490e      	ldr	r1, [pc, #56]	; (8002414 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023dc:	4a0e      	ldr	r2, [pc, #56]	; (8002418 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023e0:	e002      	b.n	80023e8 <LoopCopyDataInit>

080023e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023e6:	3304      	adds	r3, #4

080023e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023ec:	d3f9      	bcc.n	80023e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023ee:	4a0b      	ldr	r2, [pc, #44]	; (800241c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023f0:	4c0b      	ldr	r4, [pc, #44]	; (8002420 <LoopFillZerobss+0x26>)
  movs r3, #0
 80023f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023f4:	e001      	b.n	80023fa <LoopFillZerobss>

080023f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023f8:	3204      	adds	r2, #4

080023fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023fc:	d3fb      	bcc.n	80023f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80023fe:	f7ff ff65 	bl	80022cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002402:	f004 f80d 	bl	8006420 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002406:	f7ff fc9d 	bl	8001d44 <main>
  bx  lr    
 800240a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800240c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002410:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002414:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8002418:	080075c8 	.word	0x080075c8
  ldr r2, =_sbss
 800241c:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8002420:	200006a8 	.word	0x200006a8

08002424 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002424:	e7fe      	b.n	8002424 <ADC_IRQHandler>
	...

08002428 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800242c:	4b0e      	ldr	r3, [pc, #56]	; (8002468 <HAL_Init+0x40>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a0d      	ldr	r2, [pc, #52]	; (8002468 <HAL_Init+0x40>)
 8002432:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002436:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002438:	4b0b      	ldr	r3, [pc, #44]	; (8002468 <HAL_Init+0x40>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a0a      	ldr	r2, [pc, #40]	; (8002468 <HAL_Init+0x40>)
 800243e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002442:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002444:	4b08      	ldr	r3, [pc, #32]	; (8002468 <HAL_Init+0x40>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a07      	ldr	r2, [pc, #28]	; (8002468 <HAL_Init+0x40>)
 800244a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800244e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002450:	2003      	movs	r0, #3
 8002452:	f000 f973 	bl	800273c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002456:	200f      	movs	r0, #15
 8002458:	f000 f808 	bl	800246c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800245c:	f7ff fe9a 	bl	8002194 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	40023c00 	.word	0x40023c00

0800246c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002474:	4b12      	ldr	r3, [pc, #72]	; (80024c0 <HAL_InitTick+0x54>)
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	4b12      	ldr	r3, [pc, #72]	; (80024c4 <HAL_InitTick+0x58>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	4619      	mov	r1, r3
 800247e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002482:	fbb3 f3f1 	udiv	r3, r3, r1
 8002486:	fbb2 f3f3 	udiv	r3, r2, r3
 800248a:	4618      	mov	r0, r3
 800248c:	f000 f999 	bl	80027c2 <HAL_SYSTICK_Config>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e00e      	b.n	80024b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b0f      	cmp	r3, #15
 800249e:	d80a      	bhi.n	80024b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024a0:	2200      	movs	r2, #0
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	f04f 30ff 	mov.w	r0, #4294967295
 80024a8:	f000 f953 	bl	8002752 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024ac:	4a06      	ldr	r2, [pc, #24]	; (80024c8 <HAL_InitTick+0x5c>)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
 80024b4:	e000      	b.n	80024b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	20000044 	.word	0x20000044
 80024c4:	2000004c 	.word	0x2000004c
 80024c8:	20000048 	.word	0x20000048

080024cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024d0:	4b06      	ldr	r3, [pc, #24]	; (80024ec <HAL_IncTick+0x20>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	461a      	mov	r2, r3
 80024d6:	4b06      	ldr	r3, [pc, #24]	; (80024f0 <HAL_IncTick+0x24>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4413      	add	r3, r2
 80024dc:	4a04      	ldr	r2, [pc, #16]	; (80024f0 <HAL_IncTick+0x24>)
 80024de:	6013      	str	r3, [r2, #0]
}
 80024e0:	bf00      	nop
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	2000004c 	.word	0x2000004c
 80024f0:	20000694 	.word	0x20000694

080024f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  return uwTick;
 80024f8:	4b03      	ldr	r3, [pc, #12]	; (8002508 <HAL_GetTick+0x14>)
 80024fa:	681b      	ldr	r3, [r3, #0]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	20000694 	.word	0x20000694

0800250c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002514:	f7ff ffee 	bl	80024f4 <HAL_GetTick>
 8002518:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002524:	d005      	beq.n	8002532 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002526:	4b0a      	ldr	r3, [pc, #40]	; (8002550 <HAL_Delay+0x44>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	461a      	mov	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	4413      	add	r3, r2
 8002530:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002532:	bf00      	nop
 8002534:	f7ff ffde 	bl	80024f4 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	429a      	cmp	r2, r3
 8002542:	d8f7      	bhi.n	8002534 <HAL_Delay+0x28>
  {
  }
}
 8002544:	bf00      	nop
 8002546:	bf00      	nop
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	2000004c 	.word	0x2000004c

08002554 <__NVIC_SetPriorityGrouping>:
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f003 0307 	and.w	r3, r3, #7
 8002562:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002564:	4b0c      	ldr	r3, [pc, #48]	; (8002598 <__NVIC_SetPriorityGrouping+0x44>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800256a:	68ba      	ldr	r2, [r7, #8]
 800256c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002570:	4013      	ands	r3, r2
 8002572:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800257c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002584:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002586:	4a04      	ldr	r2, [pc, #16]	; (8002598 <__NVIC_SetPriorityGrouping+0x44>)
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	60d3      	str	r3, [r2, #12]
}
 800258c:	bf00      	nop
 800258e:	3714      	adds	r7, #20
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	e000ed00 	.word	0xe000ed00

0800259c <__NVIC_GetPriorityGrouping>:
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025a0:	4b04      	ldr	r3, [pc, #16]	; (80025b4 <__NVIC_GetPriorityGrouping+0x18>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	0a1b      	lsrs	r3, r3, #8
 80025a6:	f003 0307 	and.w	r3, r3, #7
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	e000ed00 	.word	0xe000ed00

080025b8 <__NVIC_EnableIRQ>:
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4603      	mov	r3, r0
 80025c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	db0b      	blt.n	80025e2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ca:	79fb      	ldrb	r3, [r7, #7]
 80025cc:	f003 021f 	and.w	r2, r3, #31
 80025d0:	4907      	ldr	r1, [pc, #28]	; (80025f0 <__NVIC_EnableIRQ+0x38>)
 80025d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d6:	095b      	lsrs	r3, r3, #5
 80025d8:	2001      	movs	r0, #1
 80025da:	fa00 f202 	lsl.w	r2, r0, r2
 80025de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	e000e100 	.word	0xe000e100

080025f4 <__NVIC_DisableIRQ>:
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4603      	mov	r3, r0
 80025fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002602:	2b00      	cmp	r3, #0
 8002604:	db12      	blt.n	800262c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002606:	79fb      	ldrb	r3, [r7, #7]
 8002608:	f003 021f 	and.w	r2, r3, #31
 800260c:	490a      	ldr	r1, [pc, #40]	; (8002638 <__NVIC_DisableIRQ+0x44>)
 800260e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002612:	095b      	lsrs	r3, r3, #5
 8002614:	2001      	movs	r0, #1
 8002616:	fa00 f202 	lsl.w	r2, r0, r2
 800261a:	3320      	adds	r3, #32
 800261c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002620:	f3bf 8f4f 	dsb	sy
}
 8002624:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002626:	f3bf 8f6f 	isb	sy
}
 800262a:	bf00      	nop
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	e000e100 	.word	0xe000e100

0800263c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	4603      	mov	r3, r0
 8002644:	6039      	str	r1, [r7, #0]
 8002646:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264c:	2b00      	cmp	r3, #0
 800264e:	db0a      	blt.n	8002666 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	b2da      	uxtb	r2, r3
 8002654:	490c      	ldr	r1, [pc, #48]	; (8002688 <__NVIC_SetPriority+0x4c>)
 8002656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265a:	0112      	lsls	r2, r2, #4
 800265c:	b2d2      	uxtb	r2, r2
 800265e:	440b      	add	r3, r1
 8002660:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002664:	e00a      	b.n	800267c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	b2da      	uxtb	r2, r3
 800266a:	4908      	ldr	r1, [pc, #32]	; (800268c <__NVIC_SetPriority+0x50>)
 800266c:	79fb      	ldrb	r3, [r7, #7]
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	3b04      	subs	r3, #4
 8002674:	0112      	lsls	r2, r2, #4
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	440b      	add	r3, r1
 800267a:	761a      	strb	r2, [r3, #24]
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	e000e100 	.word	0xe000e100
 800268c:	e000ed00 	.word	0xe000ed00

08002690 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002690:	b480      	push	{r7}
 8002692:	b089      	sub	sp, #36	; 0x24
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	f1c3 0307 	rsb	r3, r3, #7
 80026aa:	2b04      	cmp	r3, #4
 80026ac:	bf28      	it	cs
 80026ae:	2304      	movcs	r3, #4
 80026b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	3304      	adds	r3, #4
 80026b6:	2b06      	cmp	r3, #6
 80026b8:	d902      	bls.n	80026c0 <NVIC_EncodePriority+0x30>
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	3b03      	subs	r3, #3
 80026be:	e000      	b.n	80026c2 <NVIC_EncodePriority+0x32>
 80026c0:	2300      	movs	r3, #0
 80026c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c4:	f04f 32ff 	mov.w	r2, #4294967295
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	43da      	mvns	r2, r3
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	401a      	ands	r2, r3
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026d8:	f04f 31ff 	mov.w	r1, #4294967295
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	fa01 f303 	lsl.w	r3, r1, r3
 80026e2:	43d9      	mvns	r1, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e8:	4313      	orrs	r3, r2
         );
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3724      	adds	r7, #36	; 0x24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
	...

080026f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3b01      	subs	r3, #1
 8002704:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002708:	d301      	bcc.n	800270e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800270a:	2301      	movs	r3, #1
 800270c:	e00f      	b.n	800272e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800270e:	4a0a      	ldr	r2, [pc, #40]	; (8002738 <SysTick_Config+0x40>)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	3b01      	subs	r3, #1
 8002714:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002716:	210f      	movs	r1, #15
 8002718:	f04f 30ff 	mov.w	r0, #4294967295
 800271c:	f7ff ff8e 	bl	800263c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002720:	4b05      	ldr	r3, [pc, #20]	; (8002738 <SysTick_Config+0x40>)
 8002722:	2200      	movs	r2, #0
 8002724:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002726:	4b04      	ldr	r3, [pc, #16]	; (8002738 <SysTick_Config+0x40>)
 8002728:	2207      	movs	r2, #7
 800272a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	e000e010 	.word	0xe000e010

0800273c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f7ff ff05 	bl	8002554 <__NVIC_SetPriorityGrouping>
}
 800274a:	bf00      	nop
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002752:	b580      	push	{r7, lr}
 8002754:	b086      	sub	sp, #24
 8002756:	af00      	add	r7, sp, #0
 8002758:	4603      	mov	r3, r0
 800275a:	60b9      	str	r1, [r7, #8]
 800275c:	607a      	str	r2, [r7, #4]
 800275e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002760:	2300      	movs	r3, #0
 8002762:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002764:	f7ff ff1a 	bl	800259c <__NVIC_GetPriorityGrouping>
 8002768:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	68b9      	ldr	r1, [r7, #8]
 800276e:	6978      	ldr	r0, [r7, #20]
 8002770:	f7ff ff8e 	bl	8002690 <NVIC_EncodePriority>
 8002774:	4602      	mov	r2, r0
 8002776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800277a:	4611      	mov	r1, r2
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff ff5d 	bl	800263c <__NVIC_SetPriority>
}
 8002782:	bf00      	nop
 8002784:	3718      	adds	r7, #24
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b082      	sub	sp, #8
 800278e:	af00      	add	r7, sp, #0
 8002790:	4603      	mov	r3, r0
 8002792:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff ff0d 	bl	80025b8 <__NVIC_EnableIRQ>
}
 800279e:	bf00      	nop
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b082      	sub	sp, #8
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	4603      	mov	r3, r0
 80027ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80027b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff ff1d 	bl	80025f4 <__NVIC_DisableIRQ>
}
 80027ba:	bf00      	nop
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b082      	sub	sp, #8
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f7ff ff94 	bl	80026f8 <SysTick_Config>
 80027d0:	4603      	mov	r3, r0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027da:	b480      	push	{r7}
 80027dc:	b083      	sub	sp, #12
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d004      	beq.n	80027f8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2280      	movs	r2, #128	; 0x80
 80027f2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e00c      	b.n	8002812 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2205      	movs	r2, #5
 80027fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f022 0201 	bic.w	r2, r2, #1
 800280e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800281e:	b480      	push	{r7}
 8002820:	b083      	sub	sp, #12
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800282c:	b2db      	uxtb	r3, r3
}
 800282e:	4618      	mov	r0, r3
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
	...

0800283c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800283c:	b480      	push	{r7}
 800283e:	b089      	sub	sp, #36	; 0x24
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002846:	2300      	movs	r3, #0
 8002848:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800284a:	2300      	movs	r3, #0
 800284c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800284e:	2300      	movs	r3, #0
 8002850:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002852:	2300      	movs	r3, #0
 8002854:	61fb      	str	r3, [r7, #28]
 8002856:	e159      	b.n	8002b0c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002858:	2201      	movs	r2, #1
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	4013      	ands	r3, r2
 800286a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	429a      	cmp	r2, r3
 8002872:	f040 8148 	bne.w	8002b06 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f003 0303 	and.w	r3, r3, #3
 800287e:	2b01      	cmp	r3, #1
 8002880:	d005      	beq.n	800288e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800288a:	2b02      	cmp	r3, #2
 800288c:	d130      	bne.n	80028f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	2203      	movs	r2, #3
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	43db      	mvns	r3, r3
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	4013      	ands	r3, r2
 80028a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	68da      	ldr	r2, [r3, #12]
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	fa02 f303 	lsl.w	r3, r2, r3
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028c4:	2201      	movs	r2, #1
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	43db      	mvns	r3, r3
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	4013      	ands	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	091b      	lsrs	r3, r3, #4
 80028da:	f003 0201 	and.w	r2, r3, #1
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f003 0303 	and.w	r3, r3, #3
 80028f8:	2b03      	cmp	r3, #3
 80028fa:	d017      	beq.n	800292c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	2203      	movs	r2, #3
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	43db      	mvns	r3, r3
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	4013      	ands	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	689a      	ldr	r2, [r3, #8]
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	4313      	orrs	r3, r2
 8002924:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f003 0303 	and.w	r3, r3, #3
 8002934:	2b02      	cmp	r3, #2
 8002936:	d123      	bne.n	8002980 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	08da      	lsrs	r2, r3, #3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	3208      	adds	r2, #8
 8002940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002944:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	f003 0307 	and.w	r3, r3, #7
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	220f      	movs	r2, #15
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	43db      	mvns	r3, r3
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	4013      	ands	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	691a      	ldr	r2, [r3, #16]
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	f003 0307 	and.w	r3, r3, #7
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	4313      	orrs	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	08da      	lsrs	r2, r3, #3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	3208      	adds	r2, #8
 800297a:	69b9      	ldr	r1, [r7, #24]
 800297c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	2203      	movs	r2, #3
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	43db      	mvns	r3, r3
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	4013      	ands	r3, r2
 8002996:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f003 0203 	and.w	r2, r3, #3
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f000 80a2 	beq.w	8002b06 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029c2:	2300      	movs	r3, #0
 80029c4:	60fb      	str	r3, [r7, #12]
 80029c6:	4b57      	ldr	r3, [pc, #348]	; (8002b24 <HAL_GPIO_Init+0x2e8>)
 80029c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ca:	4a56      	ldr	r2, [pc, #344]	; (8002b24 <HAL_GPIO_Init+0x2e8>)
 80029cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029d0:	6453      	str	r3, [r2, #68]	; 0x44
 80029d2:	4b54      	ldr	r3, [pc, #336]	; (8002b24 <HAL_GPIO_Init+0x2e8>)
 80029d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029da:	60fb      	str	r3, [r7, #12]
 80029dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029de:	4a52      	ldr	r2, [pc, #328]	; (8002b28 <HAL_GPIO_Init+0x2ec>)
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	089b      	lsrs	r3, r3, #2
 80029e4:	3302      	adds	r3, #2
 80029e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	f003 0303 	and.w	r3, r3, #3
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	220f      	movs	r2, #15
 80029f6:	fa02 f303 	lsl.w	r3, r2, r3
 80029fa:	43db      	mvns	r3, r3
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	4013      	ands	r3, r2
 8002a00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a49      	ldr	r2, [pc, #292]	; (8002b2c <HAL_GPIO_Init+0x2f0>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d019      	beq.n	8002a3e <HAL_GPIO_Init+0x202>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a48      	ldr	r2, [pc, #288]	; (8002b30 <HAL_GPIO_Init+0x2f4>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d013      	beq.n	8002a3a <HAL_GPIO_Init+0x1fe>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a47      	ldr	r2, [pc, #284]	; (8002b34 <HAL_GPIO_Init+0x2f8>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d00d      	beq.n	8002a36 <HAL_GPIO_Init+0x1fa>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a46      	ldr	r2, [pc, #280]	; (8002b38 <HAL_GPIO_Init+0x2fc>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d007      	beq.n	8002a32 <HAL_GPIO_Init+0x1f6>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a45      	ldr	r2, [pc, #276]	; (8002b3c <HAL_GPIO_Init+0x300>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d101      	bne.n	8002a2e <HAL_GPIO_Init+0x1f2>
 8002a2a:	2304      	movs	r3, #4
 8002a2c:	e008      	b.n	8002a40 <HAL_GPIO_Init+0x204>
 8002a2e:	2307      	movs	r3, #7
 8002a30:	e006      	b.n	8002a40 <HAL_GPIO_Init+0x204>
 8002a32:	2303      	movs	r3, #3
 8002a34:	e004      	b.n	8002a40 <HAL_GPIO_Init+0x204>
 8002a36:	2302      	movs	r3, #2
 8002a38:	e002      	b.n	8002a40 <HAL_GPIO_Init+0x204>
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e000      	b.n	8002a40 <HAL_GPIO_Init+0x204>
 8002a3e:	2300      	movs	r3, #0
 8002a40:	69fa      	ldr	r2, [r7, #28]
 8002a42:	f002 0203 	and.w	r2, r2, #3
 8002a46:	0092      	lsls	r2, r2, #2
 8002a48:	4093      	lsls	r3, r2
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a50:	4935      	ldr	r1, [pc, #212]	; (8002b28 <HAL_GPIO_Init+0x2ec>)
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	089b      	lsrs	r3, r3, #2
 8002a56:	3302      	adds	r3, #2
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a5e:	4b38      	ldr	r3, [pc, #224]	; (8002b40 <HAL_GPIO_Init+0x304>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	43db      	mvns	r3, r3
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d003      	beq.n	8002a82 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a82:	4a2f      	ldr	r2, [pc, #188]	; (8002b40 <HAL_GPIO_Init+0x304>)
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a88:	4b2d      	ldr	r3, [pc, #180]	; (8002b40 <HAL_GPIO_Init+0x304>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	43db      	mvns	r3, r3
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	4013      	ands	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d003      	beq.n	8002aac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002aac:	4a24      	ldr	r2, [pc, #144]	; (8002b40 <HAL_GPIO_Init+0x304>)
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ab2:	4b23      	ldr	r3, [pc, #140]	; (8002b40 <HAL_GPIO_Init+0x304>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	43db      	mvns	r3, r3
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d003      	beq.n	8002ad6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ad6:	4a1a      	ldr	r2, [pc, #104]	; (8002b40 <HAL_GPIO_Init+0x304>)
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002adc:	4b18      	ldr	r3, [pc, #96]	; (8002b40 <HAL_GPIO_Init+0x304>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	43db      	mvns	r3, r3
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d003      	beq.n	8002b00 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b00:	4a0f      	ldr	r2, [pc, #60]	; (8002b40 <HAL_GPIO_Init+0x304>)
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	3301      	adds	r3, #1
 8002b0a:	61fb      	str	r3, [r7, #28]
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	2b0f      	cmp	r3, #15
 8002b10:	f67f aea2 	bls.w	8002858 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b14:	bf00      	nop
 8002b16:	bf00      	nop
 8002b18:	3724      	adds	r7, #36	; 0x24
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	40023800 	.word	0x40023800
 8002b28:	40013800 	.word	0x40013800
 8002b2c:	40020000 	.word	0x40020000
 8002b30:	40020400 	.word	0x40020400
 8002b34:	40020800 	.word	0x40020800
 8002b38:	40020c00 	.word	0x40020c00
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	40013c00 	.word	0x40013c00

08002b44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	807b      	strh	r3, [r7, #2]
 8002b50:	4613      	mov	r3, r2
 8002b52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b54:	787b      	ldrb	r3, [r7, #1]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b5a:	887a      	ldrh	r2, [r7, #2]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b60:	e003      	b.n	8002b6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b62:	887b      	ldrh	r3, [r7, #2]
 8002b64:	041a      	lsls	r2, r3, #16
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	619a      	str	r2, [r3, #24]
}
 8002b6a:	bf00      	nop
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
	...

08002b78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e12b      	b.n	8002de2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d106      	bne.n	8002ba4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7ff f880 	bl	8001ca4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2224      	movs	r2, #36	; 0x24
 8002ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f022 0201 	bic.w	r2, r2, #1
 8002bba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bda:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002bdc:	f002 fd20 	bl	8005620 <HAL_RCC_GetPCLK1Freq>
 8002be0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	4a81      	ldr	r2, [pc, #516]	; (8002dec <HAL_I2C_Init+0x274>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d807      	bhi.n	8002bfc <HAL_I2C_Init+0x84>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	4a80      	ldr	r2, [pc, #512]	; (8002df0 <HAL_I2C_Init+0x278>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	bf94      	ite	ls
 8002bf4:	2301      	movls	r3, #1
 8002bf6:	2300      	movhi	r3, #0
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	e006      	b.n	8002c0a <HAL_I2C_Init+0x92>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	4a7d      	ldr	r2, [pc, #500]	; (8002df4 <HAL_I2C_Init+0x27c>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	bf94      	ite	ls
 8002c04:	2301      	movls	r3, #1
 8002c06:	2300      	movhi	r3, #0
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e0e7      	b.n	8002de2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	4a78      	ldr	r2, [pc, #480]	; (8002df8 <HAL_I2C_Init+0x280>)
 8002c16:	fba2 2303 	umull	r2, r3, r2, r3
 8002c1a:	0c9b      	lsrs	r3, r3, #18
 8002c1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68ba      	ldr	r2, [r7, #8]
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	4a6a      	ldr	r2, [pc, #424]	; (8002dec <HAL_I2C_Init+0x274>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d802      	bhi.n	8002c4c <HAL_I2C_Init+0xd4>
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	e009      	b.n	8002c60 <HAL_I2C_Init+0xe8>
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c52:	fb02 f303 	mul.w	r3, r2, r3
 8002c56:	4a69      	ldr	r2, [pc, #420]	; (8002dfc <HAL_I2C_Init+0x284>)
 8002c58:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5c:	099b      	lsrs	r3, r3, #6
 8002c5e:	3301      	adds	r3, #1
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	6812      	ldr	r2, [r2, #0]
 8002c64:	430b      	orrs	r3, r1
 8002c66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	69db      	ldr	r3, [r3, #28]
 8002c6e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002c72:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	495c      	ldr	r1, [pc, #368]	; (8002dec <HAL_I2C_Init+0x274>)
 8002c7c:	428b      	cmp	r3, r1
 8002c7e:	d819      	bhi.n	8002cb4 <HAL_I2C_Init+0x13c>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	1e59      	subs	r1, r3, #1
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c8e:	1c59      	adds	r1, r3, #1
 8002c90:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002c94:	400b      	ands	r3, r1
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00a      	beq.n	8002cb0 <HAL_I2C_Init+0x138>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	1e59      	subs	r1, r3, #1
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ca8:	3301      	adds	r3, #1
 8002caa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cae:	e051      	b.n	8002d54 <HAL_I2C_Init+0x1dc>
 8002cb0:	2304      	movs	r3, #4
 8002cb2:	e04f      	b.n	8002d54 <HAL_I2C_Init+0x1dc>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d111      	bne.n	8002ce0 <HAL_I2C_Init+0x168>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	1e58      	subs	r0, r3, #1
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6859      	ldr	r1, [r3, #4]
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	440b      	add	r3, r1
 8002cca:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cce:	3301      	adds	r3, #1
 8002cd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	bf0c      	ite	eq
 8002cd8:	2301      	moveq	r3, #1
 8002cda:	2300      	movne	r3, #0
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	e012      	b.n	8002d06 <HAL_I2C_Init+0x18e>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	1e58      	subs	r0, r3, #1
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6859      	ldr	r1, [r3, #4]
 8002ce8:	460b      	mov	r3, r1
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	440b      	add	r3, r1
 8002cee:	0099      	lsls	r1, r3, #2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	bf0c      	ite	eq
 8002d00:	2301      	moveq	r3, #1
 8002d02:	2300      	movne	r3, #0
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <HAL_I2C_Init+0x196>
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e022      	b.n	8002d54 <HAL_I2C_Init+0x1dc>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10e      	bne.n	8002d34 <HAL_I2C_Init+0x1bc>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	1e58      	subs	r0, r3, #1
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6859      	ldr	r1, [r3, #4]
 8002d1e:	460b      	mov	r3, r1
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	440b      	add	r3, r1
 8002d24:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d28:	3301      	adds	r3, #1
 8002d2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d32:	e00f      	b.n	8002d54 <HAL_I2C_Init+0x1dc>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	1e58      	subs	r0, r3, #1
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6859      	ldr	r1, [r3, #4]
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	440b      	add	r3, r1
 8002d42:	0099      	lsls	r1, r3, #2
 8002d44:	440b      	add	r3, r1
 8002d46:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d54:	6879      	ldr	r1, [r7, #4]
 8002d56:	6809      	ldr	r1, [r1, #0]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	69da      	ldr	r2, [r3, #28]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	430a      	orrs	r2, r1
 8002d76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002d82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	6911      	ldr	r1, [r2, #16]
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	68d2      	ldr	r2, [r2, #12]
 8002d8e:	4311      	orrs	r1, r2
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	6812      	ldr	r2, [r2, #0]
 8002d94:	430b      	orrs	r3, r1
 8002d96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	695a      	ldr	r2, [r3, #20]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	431a      	orrs	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	430a      	orrs	r2, r1
 8002db2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f042 0201 	orr.w	r2, r2, #1
 8002dc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2220      	movs	r2, #32
 8002dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	000186a0 	.word	0x000186a0
 8002df0:	001e847f 	.word	0x001e847f
 8002df4:	003d08ff 	.word	0x003d08ff
 8002df8:	431bde83 	.word	0x431bde83
 8002dfc:	10624dd3 	.word	0x10624dd3

08002e00 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b088      	sub	sp, #32
 8002e04:	af02      	add	r7, sp, #8
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	607a      	str	r2, [r7, #4]
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	817b      	strh	r3, [r7, #10]
 8002e10:	4613      	mov	r3, r2
 8002e12:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e14:	f7ff fb6e 	bl	80024f4 <HAL_GetTick>
 8002e18:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b20      	cmp	r3, #32
 8002e24:	f040 80e0 	bne.w	8002fe8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	9300      	str	r3, [sp, #0]
 8002e2c:	2319      	movs	r3, #25
 8002e2e:	2201      	movs	r2, #1
 8002e30:	4970      	ldr	r1, [pc, #448]	; (8002ff4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002e32:	68f8      	ldr	r0, [r7, #12]
 8002e34:	f001 fe00 	bl	8004a38 <I2C_WaitOnFlagUntilTimeout>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002e3e:	2302      	movs	r3, #2
 8002e40:	e0d3      	b.n	8002fea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d101      	bne.n	8002e50 <HAL_I2C_Master_Transmit+0x50>
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	e0cc      	b.n	8002fea <HAL_I2C_Master_Transmit+0x1ea>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d007      	beq.n	8002e76 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f042 0201 	orr.w	r2, r2, #1
 8002e74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e84:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2221      	movs	r2, #33	; 0x21
 8002e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2210      	movs	r2, #16
 8002e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	893a      	ldrh	r2, [r7, #8]
 8002ea6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	4a50      	ldr	r2, [pc, #320]	; (8002ff8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002eb6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002eb8:	8979      	ldrh	r1, [r7, #10]
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	6a3a      	ldr	r2, [r7, #32]
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f001 fc90 	bl	80047e4 <I2C_MasterRequestWrite>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e08d      	b.n	8002fea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ece:	2300      	movs	r3, #0
 8002ed0:	613b      	str	r3, [r7, #16]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	695b      	ldr	r3, [r3, #20]
 8002ed8:	613b      	str	r3, [r7, #16]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	613b      	str	r3, [r7, #16]
 8002ee2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002ee4:	e066      	b.n	8002fb4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	6a39      	ldr	r1, [r7, #32]
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f001 fe7a 	bl	8004be4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00d      	beq.n	8002f12 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	2b04      	cmp	r3, #4
 8002efc:	d107      	bne.n	8002f0e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f0c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e06b      	b.n	8002fea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f16:	781a      	ldrb	r2, [r3, #0]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f22:	1c5a      	adds	r2, r3, #1
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	695b      	ldr	r3, [r3, #20]
 8002f48:	f003 0304 	and.w	r3, r3, #4
 8002f4c:	2b04      	cmp	r3, #4
 8002f4e:	d11b      	bne.n	8002f88 <HAL_I2C_Master_Transmit+0x188>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d017      	beq.n	8002f88 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5c:	781a      	ldrb	r2, [r3, #0]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f68:	1c5a      	adds	r2, r3, #1
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	3b01      	subs	r3, #1
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f80:	3b01      	subs	r3, #1
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f88:	697a      	ldr	r2, [r7, #20]
 8002f8a:	6a39      	ldr	r1, [r7, #32]
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f001 fe6a 	bl	8004c66 <I2C_WaitOnBTFFlagUntilTimeout>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00d      	beq.n	8002fb4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9c:	2b04      	cmp	r3, #4
 8002f9e:	d107      	bne.n	8002fb0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e01a      	b.n	8002fea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d194      	bne.n	8002ee6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2220      	movs	r2, #32
 8002fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	e000      	b.n	8002fea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002fe8:	2302      	movs	r3, #2
  }
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3718      	adds	r7, #24
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	00100002 	.word	0x00100002
 8002ff8:	ffff0000 	.word	0xffff0000

08002ffc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b08a      	sub	sp, #40	; 0x28
 8003000:	af02      	add	r7, sp, #8
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	607a      	str	r2, [r7, #4]
 8003006:	603b      	str	r3, [r7, #0]
 8003008:	460b      	mov	r3, r1
 800300a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800300c:	f7ff fa72 	bl	80024f4 <HAL_GetTick>
 8003010:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003012:	2301      	movs	r3, #1
 8003014:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b20      	cmp	r3, #32
 8003020:	f040 8111 	bne.w	8003246 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	9300      	str	r3, [sp, #0]
 8003028:	2319      	movs	r3, #25
 800302a:	2201      	movs	r2, #1
 800302c:	4988      	ldr	r1, [pc, #544]	; (8003250 <HAL_I2C_IsDeviceReady+0x254>)
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f001 fd02 	bl	8004a38 <I2C_WaitOnFlagUntilTimeout>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800303a:	2302      	movs	r3, #2
 800303c:	e104      	b.n	8003248 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003044:	2b01      	cmp	r3, #1
 8003046:	d101      	bne.n	800304c <HAL_I2C_IsDeviceReady+0x50>
 8003048:	2302      	movs	r3, #2
 800304a:	e0fd      	b.n	8003248 <HAL_I2C_IsDeviceReady+0x24c>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b01      	cmp	r3, #1
 8003060:	d007      	beq.n	8003072 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f042 0201 	orr.w	r2, r2, #1
 8003070:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003080:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2224      	movs	r2, #36	; 0x24
 8003086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	4a70      	ldr	r2, [pc, #448]	; (8003254 <HAL_I2C_IsDeviceReady+0x258>)
 8003094:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030a4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f001 fcc0 	bl	8004a38 <I2C_WaitOnFlagUntilTimeout>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00d      	beq.n	80030da <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030cc:	d103      	bne.n	80030d6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030d4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e0b6      	b.n	8003248 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030da:	897b      	ldrh	r3, [r7, #10]
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	461a      	mov	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80030e8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80030ea:	f7ff fa03 	bl	80024f4 <HAL_GetTick>
 80030ee:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	bf0c      	ite	eq
 80030fe:	2301      	moveq	r3, #1
 8003100:	2300      	movne	r3, #0
 8003102:	b2db      	uxtb	r3, r3
 8003104:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	695b      	ldr	r3, [r3, #20]
 800310c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003110:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003114:	bf0c      	ite	eq
 8003116:	2301      	moveq	r3, #1
 8003118:	2300      	movne	r3, #0
 800311a:	b2db      	uxtb	r3, r3
 800311c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800311e:	e025      	b.n	800316c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003120:	f7ff f9e8 	bl	80024f4 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	683a      	ldr	r2, [r7, #0]
 800312c:	429a      	cmp	r2, r3
 800312e:	d302      	bcc.n	8003136 <HAL_I2C_IsDeviceReady+0x13a>
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d103      	bne.n	800313e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	22a0      	movs	r2, #160	; 0xa0
 800313a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	695b      	ldr	r3, [r3, #20]
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b02      	cmp	r3, #2
 800314a:	bf0c      	ite	eq
 800314c:	2301      	moveq	r3, #1
 800314e:	2300      	movne	r3, #0
 8003150:	b2db      	uxtb	r3, r3
 8003152:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800315e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003162:	bf0c      	ite	eq
 8003164:	2301      	moveq	r3, #1
 8003166:	2300      	movne	r3, #0
 8003168:	b2db      	uxtb	r3, r3
 800316a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2ba0      	cmp	r3, #160	; 0xa0
 8003176:	d005      	beq.n	8003184 <HAL_I2C_IsDeviceReady+0x188>
 8003178:	7dfb      	ldrb	r3, [r7, #23]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d102      	bne.n	8003184 <HAL_I2C_IsDeviceReady+0x188>
 800317e:	7dbb      	ldrb	r3, [r7, #22]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d0cd      	beq.n	8003120 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2220      	movs	r2, #32
 8003188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b02      	cmp	r3, #2
 8003198:	d129      	bne.n	80031ee <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031a8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031aa:	2300      	movs	r3, #0
 80031ac:	613b      	str	r3, [r7, #16]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	695b      	ldr	r3, [r3, #20]
 80031b4:	613b      	str	r3, [r7, #16]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	613b      	str	r3, [r7, #16]
 80031be:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	9300      	str	r3, [sp, #0]
 80031c4:	2319      	movs	r3, #25
 80031c6:	2201      	movs	r2, #1
 80031c8:	4921      	ldr	r1, [pc, #132]	; (8003250 <HAL_I2C_IsDeviceReady+0x254>)
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f001 fc34 	bl	8004a38 <I2C_WaitOnFlagUntilTimeout>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e036      	b.n	8003248 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2220      	movs	r2, #32
 80031de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80031ea:	2300      	movs	r3, #0
 80031ec:	e02c      	b.n	8003248 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031fc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003206:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	9300      	str	r3, [sp, #0]
 800320c:	2319      	movs	r3, #25
 800320e:	2201      	movs	r2, #1
 8003210:	490f      	ldr	r1, [pc, #60]	; (8003250 <HAL_I2C_IsDeviceReady+0x254>)
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	f001 fc10 	bl	8004a38 <I2C_WaitOnFlagUntilTimeout>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e012      	b.n	8003248 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	3301      	adds	r3, #1
 8003226:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	429a      	cmp	r2, r3
 800322e:	f4ff af32 	bcc.w	8003096 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2220      	movs	r2, #32
 8003236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e000      	b.n	8003248 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003246:	2302      	movs	r3, #2
  }
}
 8003248:	4618      	mov	r0, r3
 800324a:	3720      	adds	r7, #32
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	00100002 	.word	0x00100002
 8003254:	ffff0000 	.word	0xffff0000

08003258 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b088      	sub	sp, #32
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003260:	2300      	movs	r3, #0
 8003262:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003270:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003278:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003280:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003282:	7bfb      	ldrb	r3, [r7, #15]
 8003284:	2b10      	cmp	r3, #16
 8003286:	d003      	beq.n	8003290 <HAL_I2C_EV_IRQHandler+0x38>
 8003288:	7bfb      	ldrb	r3, [r7, #15]
 800328a:	2b40      	cmp	r3, #64	; 0x40
 800328c:	f040 80c1 	bne.w	8003412 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10d      	bne.n	80032c6 <HAL_I2C_EV_IRQHandler+0x6e>
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80032b0:	d003      	beq.n	80032ba <HAL_I2C_EV_IRQHandler+0x62>
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80032b8:	d101      	bne.n	80032be <HAL_I2C_EV_IRQHandler+0x66>
 80032ba:	2301      	movs	r3, #1
 80032bc:	e000      	b.n	80032c0 <HAL_I2C_EV_IRQHandler+0x68>
 80032be:	2300      	movs	r3, #0
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	f000 8132 	beq.w	800352a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00c      	beq.n	80032ea <HAL_I2C_EV_IRQHandler+0x92>
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	0a5b      	lsrs	r3, r3, #9
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d006      	beq.n	80032ea <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f001 fd64 	bl	8004daa <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 fcd2 	bl	8003c8c <I2C_Master_SB>
 80032e8:	e092      	b.n	8003410 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	08db      	lsrs	r3, r3, #3
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d009      	beq.n	800330a <HAL_I2C_EV_IRQHandler+0xb2>
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	0a5b      	lsrs	r3, r3, #9
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d003      	beq.n	800330a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 fd48 	bl	8003d98 <I2C_Master_ADD10>
 8003308:	e082      	b.n	8003410 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	085b      	lsrs	r3, r3, #1
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	2b00      	cmp	r3, #0
 8003314:	d009      	beq.n	800332a <HAL_I2C_EV_IRQHandler+0xd2>
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	0a5b      	lsrs	r3, r3, #9
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 fd62 	bl	8003dec <I2C_Master_ADDR>
 8003328:	e072      	b.n	8003410 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	089b      	lsrs	r3, r3, #2
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	d03b      	beq.n	80033ae <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003340:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003344:	f000 80f3 	beq.w	800352e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	09db      	lsrs	r3, r3, #7
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00f      	beq.n	8003374 <HAL_I2C_EV_IRQHandler+0x11c>
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	0a9b      	lsrs	r3, r3, #10
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	2b00      	cmp	r3, #0
 800335e:	d009      	beq.n	8003374 <HAL_I2C_EV_IRQHandler+0x11c>
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	089b      	lsrs	r3, r3, #2
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	2b00      	cmp	r3, #0
 800336a:	d103      	bne.n	8003374 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f000 f94c 	bl	800360a <I2C_MasterTransmit_TXE>
 8003372:	e04d      	b.n	8003410 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	089b      	lsrs	r3, r3, #2
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	2b00      	cmp	r3, #0
 800337e:	f000 80d6 	beq.w	800352e <HAL_I2C_EV_IRQHandler+0x2d6>
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	0a5b      	lsrs	r3, r3, #9
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b00      	cmp	r3, #0
 800338c:	f000 80cf 	beq.w	800352e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003390:	7bbb      	ldrb	r3, [r7, #14]
 8003392:	2b21      	cmp	r3, #33	; 0x21
 8003394:	d103      	bne.n	800339e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 f9d3 	bl	8003742 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800339c:	e0c7      	b.n	800352e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800339e:	7bfb      	ldrb	r3, [r7, #15]
 80033a0:	2b40      	cmp	r3, #64	; 0x40
 80033a2:	f040 80c4 	bne.w	800352e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 fa41 	bl	800382e <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033ac:	e0bf      	b.n	800352e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033bc:	f000 80b7 	beq.w	800352e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	099b      	lsrs	r3, r3, #6
 80033c4:	f003 0301 	and.w	r3, r3, #1
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00f      	beq.n	80033ec <HAL_I2C_EV_IRQHandler+0x194>
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	0a9b      	lsrs	r3, r3, #10
 80033d0:	f003 0301 	and.w	r3, r3, #1
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d009      	beq.n	80033ec <HAL_I2C_EV_IRQHandler+0x194>
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	089b      	lsrs	r3, r3, #2
 80033dc:	f003 0301 	and.w	r3, r3, #1
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d103      	bne.n	80033ec <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 fab6 	bl	8003956 <I2C_MasterReceive_RXNE>
 80033ea:	e011      	b.n	8003410 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	089b      	lsrs	r3, r3, #2
 80033f0:	f003 0301 	and.w	r3, r3, #1
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f000 809a 	beq.w	800352e <HAL_I2C_EV_IRQHandler+0x2d6>
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	0a5b      	lsrs	r3, r3, #9
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b00      	cmp	r3, #0
 8003404:	f000 8093 	beq.w	800352e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 fb55 	bl	8003ab8 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800340e:	e08e      	b.n	800352e <HAL_I2C_EV_IRQHandler+0x2d6>
 8003410:	e08d      	b.n	800352e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003416:	2b00      	cmp	r3, #0
 8003418:	d004      	beq.n	8003424 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	695b      	ldr	r3, [r3, #20]
 8003420:	61fb      	str	r3, [r7, #28]
 8003422:	e007      	b.n	8003434 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	085b      	lsrs	r3, r3, #1
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	2b00      	cmp	r3, #0
 800343e:	d012      	beq.n	8003466 <HAL_I2C_EV_IRQHandler+0x20e>
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	0a5b      	lsrs	r3, r3, #9
 8003444:	f003 0301 	and.w	r3, r3, #1
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00c      	beq.n	8003466 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003450:	2b00      	cmp	r3, #0
 8003452:	d003      	beq.n	800345c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800345c:	69b9      	ldr	r1, [r7, #24]
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 ff13 	bl	800428a <I2C_Slave_ADDR>
 8003464:	e066      	b.n	8003534 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	091b      	lsrs	r3, r3, #4
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b00      	cmp	r3, #0
 8003470:	d009      	beq.n	8003486 <HAL_I2C_EV_IRQHandler+0x22e>
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	0a5b      	lsrs	r3, r3, #9
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b00      	cmp	r3, #0
 800347c:	d003      	beq.n	8003486 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 ff4e 	bl	8004320 <I2C_Slave_STOPF>
 8003484:	e056      	b.n	8003534 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003486:	7bbb      	ldrb	r3, [r7, #14]
 8003488:	2b21      	cmp	r3, #33	; 0x21
 800348a:	d002      	beq.n	8003492 <HAL_I2C_EV_IRQHandler+0x23a>
 800348c:	7bbb      	ldrb	r3, [r7, #14]
 800348e:	2b29      	cmp	r3, #41	; 0x29
 8003490:	d125      	bne.n	80034de <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	09db      	lsrs	r3, r3, #7
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00f      	beq.n	80034be <HAL_I2C_EV_IRQHandler+0x266>
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	0a9b      	lsrs	r3, r3, #10
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d009      	beq.n	80034be <HAL_I2C_EV_IRQHandler+0x266>
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	089b      	lsrs	r3, r3, #2
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d103      	bne.n	80034be <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 fe29 	bl	800410e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034bc:	e039      	b.n	8003532 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	089b      	lsrs	r3, r3, #2
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d033      	beq.n	8003532 <HAL_I2C_EV_IRQHandler+0x2da>
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	0a5b      	lsrs	r3, r3, #9
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d02d      	beq.n	8003532 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 fe56 	bl	8004188 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034dc:	e029      	b.n	8003532 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	099b      	lsrs	r3, r3, #6
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00f      	beq.n	800350a <HAL_I2C_EV_IRQHandler+0x2b2>
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	0a9b      	lsrs	r3, r3, #10
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d009      	beq.n	800350a <HAL_I2C_EV_IRQHandler+0x2b2>
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	089b      	lsrs	r3, r3, #2
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d103      	bne.n	800350a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 fe61 	bl	80041ca <I2C_SlaveReceive_RXNE>
 8003508:	e014      	b.n	8003534 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	089b      	lsrs	r3, r3, #2
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00e      	beq.n	8003534 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	0a5b      	lsrs	r3, r3, #9
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b00      	cmp	r3, #0
 8003520:	d008      	beq.n	8003534 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 fe8f 	bl	8004246 <I2C_SlaveReceive_BTF>
 8003528:	e004      	b.n	8003534 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800352a:	bf00      	nop
 800352c:	e002      	b.n	8003534 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800352e:	bf00      	nop
 8003530:	e000      	b.n	8003534 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003532:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003534:	3720      	adds	r7, #32
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800353a:	b480      	push	{r7}
 800353c:	b083      	sub	sp, #12
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003542:	bf00      	nop
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr

0800354e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800354e:	b480      	push	{r7}
 8003550:	b083      	sub	sp, #12
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003556:	bf00      	nop
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr

08003562 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003562:	b480      	push	{r7}
 8003564:	b083      	sub	sp, #12
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800356a:	bf00      	nop
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr

08003576 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003576:	b480      	push	{r7}
 8003578:	b083      	sub	sp, #12
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800357e:	bf00      	nop
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr

0800358a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800358a:	b480      	push	{r7}
 800358c:	b083      	sub	sp, #12
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
 8003592:	460b      	mov	r3, r1
 8003594:	70fb      	strb	r3, [r7, #3]
 8003596:	4613      	mov	r3, r2
 8003598:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800359a:	bf00      	nop
 800359c:	370c      	adds	r7, #12
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr

080035a6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035a6:	b480      	push	{r7}
 80035a8:	b083      	sub	sp, #12
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80035ae:	bf00      	nop
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr

080035ba <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b083      	sub	sp, #12
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80035c2:	bf00      	nop
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr

080035ce <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035ce:	b480      	push	{r7}
 80035d0:	b083      	sub	sp, #12
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80035d6:	bf00      	nop
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr

080035e2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80035e2:	b480      	push	{r7}
 80035e4:	b083      	sub	sp, #12
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80035ea:	bf00      	nop
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035f6:	b480      	push	{r7}
 80035f8:	b083      	sub	sp, #12
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80035fe:	bf00      	nop
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr

0800360a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b084      	sub	sp, #16
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003618:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003620:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003626:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800362c:	2b00      	cmp	r3, #0
 800362e:	d150      	bne.n	80036d2 <I2C_MasterTransmit_TXE+0xc8>
 8003630:	7bfb      	ldrb	r3, [r7, #15]
 8003632:	2b21      	cmp	r3, #33	; 0x21
 8003634:	d14d      	bne.n	80036d2 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	2b08      	cmp	r3, #8
 800363a:	d01d      	beq.n	8003678 <I2C_MasterTransmit_TXE+0x6e>
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	2b20      	cmp	r3, #32
 8003640:	d01a      	beq.n	8003678 <I2C_MasterTransmit_TXE+0x6e>
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003648:	d016      	beq.n	8003678 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	685a      	ldr	r2, [r3, #4]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003658:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2211      	movs	r2, #17
 800365e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2220      	movs	r2, #32
 800366c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f7ff ff62 	bl	800353a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003676:	e060      	b.n	800373a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	685a      	ldr	r2, [r3, #4]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003686:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003696:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2220      	movs	r2, #32
 80036a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b40      	cmp	r3, #64	; 0x40
 80036b0:	d107      	bne.n	80036c2 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f7ff ff7d 	bl	80035ba <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80036c0:	e03b      	b.n	800373a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f7ff ff35 	bl	800353a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80036d0:	e033      	b.n	800373a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80036d2:	7bfb      	ldrb	r3, [r7, #15]
 80036d4:	2b21      	cmp	r3, #33	; 0x21
 80036d6:	d005      	beq.n	80036e4 <I2C_MasterTransmit_TXE+0xda>
 80036d8:	7bbb      	ldrb	r3, [r7, #14]
 80036da:	2b40      	cmp	r3, #64	; 0x40
 80036dc:	d12d      	bne.n	800373a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80036de:	7bfb      	ldrb	r3, [r7, #15]
 80036e0:	2b22      	cmp	r3, #34	; 0x22
 80036e2:	d12a      	bne.n	800373a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d108      	bne.n	8003700 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	685a      	ldr	r2, [r3, #4]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036fc:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80036fe:	e01c      	b.n	800373a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b40      	cmp	r3, #64	; 0x40
 800370a:	d103      	bne.n	8003714 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 f88e 	bl	800382e <I2C_MemoryTransmit_TXE_BTF>
}
 8003712:	e012      	b.n	800373a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003718:	781a      	ldrb	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003724:	1c5a      	adds	r2, r3, #1
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800372e:	b29b      	uxth	r3, r3
 8003730:	3b01      	subs	r3, #1
 8003732:	b29a      	uxth	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003738:	e7ff      	b.n	800373a <I2C_MasterTransmit_TXE+0x130>
 800373a:	bf00      	nop
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	b084      	sub	sp, #16
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2b21      	cmp	r3, #33	; 0x21
 800375a:	d164      	bne.n	8003826 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003760:	b29b      	uxth	r3, r3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d012      	beq.n	800378c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376a:	781a      	ldrb	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003776:	1c5a      	adds	r2, r3, #1
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003780:	b29b      	uxth	r3, r3
 8003782:	3b01      	subs	r3, #1
 8003784:	b29a      	uxth	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800378a:	e04c      	b.n	8003826 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2b08      	cmp	r3, #8
 8003790:	d01d      	beq.n	80037ce <I2C_MasterTransmit_BTF+0x8c>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2b20      	cmp	r3, #32
 8003796:	d01a      	beq.n	80037ce <I2C_MasterTransmit_BTF+0x8c>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800379e:	d016      	beq.n	80037ce <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	685a      	ldr	r2, [r3, #4]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037ae:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2211      	movs	r2, #17
 80037b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2220      	movs	r2, #32
 80037c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f7ff feb7 	bl	800353a <HAL_I2C_MasterTxCpltCallback>
}
 80037cc:	e02b      	b.n	8003826 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	685a      	ldr	r2, [r3, #4]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037dc:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ec:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2220      	movs	r2, #32
 80037f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003802:	b2db      	uxtb	r3, r3
 8003804:	2b40      	cmp	r3, #64	; 0x40
 8003806:	d107      	bne.n	8003818 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f7ff fed2 	bl	80035ba <HAL_I2C_MemTxCpltCallback>
}
 8003816:	e006      	b.n	8003826 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f7ff fe8a 	bl	800353a <HAL_I2C_MasterTxCpltCallback>
}
 8003826:	bf00      	nop
 8003828:	3710      	adds	r7, #16
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b084      	sub	sp, #16
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800383c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003842:	2b00      	cmp	r3, #0
 8003844:	d11d      	bne.n	8003882 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800384a:	2b01      	cmp	r3, #1
 800384c:	d10b      	bne.n	8003866 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003852:	b2da      	uxtb	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800385e:	1c9a      	adds	r2, r3, #2
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003864:	e073      	b.n	800394e <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800386a:	b29b      	uxth	r3, r3
 800386c:	121b      	asrs	r3, r3, #8
 800386e:	b2da      	uxtb	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800387a:	1c5a      	adds	r2, r3, #1
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003880:	e065      	b.n	800394e <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003886:	2b01      	cmp	r3, #1
 8003888:	d10b      	bne.n	80038a2 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800388e:	b2da      	uxtb	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800389a:	1c5a      	adds	r2, r3, #1
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	651a      	str	r2, [r3, #80]	; 0x50
}
 80038a0:	e055      	b.n	800394e <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d151      	bne.n	800394e <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80038aa:	7bfb      	ldrb	r3, [r7, #15]
 80038ac:	2b22      	cmp	r3, #34	; 0x22
 80038ae:	d10d      	bne.n	80038cc <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038be:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038c4:	1c5a      	adds	r2, r3, #1
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80038ca:	e040      	b.n	800394e <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d015      	beq.n	8003902 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80038d6:	7bfb      	ldrb	r3, [r7, #15]
 80038d8:	2b21      	cmp	r3, #33	; 0x21
 80038da:	d112      	bne.n	8003902 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e0:	781a      	ldrb	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ec:	1c5a      	adds	r2, r3, #1
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	3b01      	subs	r3, #1
 80038fa:	b29a      	uxth	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003900:	e025      	b.n	800394e <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003906:	b29b      	uxth	r3, r3
 8003908:	2b00      	cmp	r3, #0
 800390a:	d120      	bne.n	800394e <I2C_MemoryTransmit_TXE_BTF+0x120>
 800390c:	7bfb      	ldrb	r3, [r7, #15]
 800390e:	2b21      	cmp	r3, #33	; 0x21
 8003910:	d11d      	bne.n	800394e <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003920:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003930:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2220      	movs	r2, #32
 800393c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f7ff fe36 	bl	80035ba <HAL_I2C_MemTxCpltCallback>
}
 800394e:	bf00      	nop
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b084      	sub	sp, #16
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b22      	cmp	r3, #34	; 0x22
 8003968:	f040 80a2 	bne.w	8003ab0 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003970:	b29b      	uxth	r3, r3
 8003972:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2b03      	cmp	r3, #3
 8003978:	d921      	bls.n	80039be <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	691a      	ldr	r2, [r3, #16]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003984:	b2d2      	uxtb	r2, r2
 8003986:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398c:	1c5a      	adds	r2, r3, #1
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003996:	b29b      	uxth	r3, r3
 8003998:	3b01      	subs	r3, #1
 800399a:	b29a      	uxth	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	2b03      	cmp	r3, #3
 80039a8:	f040 8082 	bne.w	8003ab0 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	685a      	ldr	r2, [r3, #4]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039ba:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80039bc:	e078      	b.n	8003ab0 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d074      	beq.n	8003ab0 <I2C_MasterReceive_RXNE+0x15a>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d002      	beq.n	80039d2 <I2C_MasterReceive_RXNE+0x7c>
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d16e      	bne.n	8003ab0 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f001 f988 	bl	8004ce8 <I2C_WaitOnSTOPRequestThroughIT>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d142      	bne.n	8003a64 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039ec:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	685a      	ldr	r2, [r3, #4]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80039fc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	691a      	ldr	r2, [r3, #16]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a08:	b2d2      	uxtb	r2, r2
 8003a0a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a10:	1c5a      	adds	r2, r3, #1
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2220      	movs	r2, #32
 8003a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	2b40      	cmp	r3, #64	; 0x40
 8003a36:	d10a      	bne.n	8003a4e <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f7ff fdc1 	bl	80035ce <HAL_I2C_MemRxCpltCallback>
}
 8003a4c:	e030      	b.n	8003ab0 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2212      	movs	r2, #18
 8003a5a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f7ff fd76 	bl	800354e <HAL_I2C_MasterRxCpltCallback>
}
 8003a62:	e025      	b.n	8003ab0 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	685a      	ldr	r2, [r3, #4]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a72:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	691a      	ldr	r2, [r3, #16]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7e:	b2d2      	uxtb	r2, r2
 8003a80:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a86:	1c5a      	adds	r2, r3, #1
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	3b01      	subs	r3, #1
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2220      	movs	r2, #32
 8003a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f7ff fd99 	bl	80035e2 <HAL_I2C_ErrorCallback>
}
 8003ab0:	bf00      	nop
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	2b04      	cmp	r3, #4
 8003ace:	d11b      	bne.n	8003b08 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	685a      	ldr	r2, [r3, #4]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ade:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	691a      	ldr	r2, [r3, #16]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aea:	b2d2      	uxtb	r2, r2
 8003aec:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af2:	1c5a      	adds	r2, r3, #1
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	3b01      	subs	r3, #1
 8003b00:	b29a      	uxth	r2, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003b06:	e0bd      	b.n	8003c84 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	2b03      	cmp	r3, #3
 8003b10:	d129      	bne.n	8003b66 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	685a      	ldr	r2, [r3, #4]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b20:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2b04      	cmp	r3, #4
 8003b26:	d00a      	beq.n	8003b3e <I2C_MasterReceive_BTF+0x86>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d007      	beq.n	8003b3e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b3c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	691a      	ldr	r2, [r3, #16]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b48:	b2d2      	uxtb	r2, r2
 8003b4a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b50:	1c5a      	adds	r2, r3, #1
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003b64:	e08e      	b.n	8003c84 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d176      	bne.n	8003c5e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d002      	beq.n	8003b7c <I2C_MasterReceive_BTF+0xc4>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2b10      	cmp	r3, #16
 8003b7a:	d108      	bne.n	8003b8e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b8a:	601a      	str	r2, [r3, #0]
 8003b8c:	e019      	b.n	8003bc2 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2b04      	cmp	r3, #4
 8003b92:	d002      	beq.n	8003b9a <I2C_MasterReceive_BTF+0xe2>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d108      	bne.n	8003bac <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ba8:	601a      	str	r2, [r3, #0]
 8003baa:	e00a      	b.n	8003bc2 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2b10      	cmp	r3, #16
 8003bb0:	d007      	beq.n	8003bc2 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bc0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	691a      	ldr	r2, [r3, #16]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bcc:	b2d2      	uxtb	r2, r2
 8003bce:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd4:	1c5a      	adds	r2, r3, #1
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	3b01      	subs	r3, #1
 8003be2:	b29a      	uxth	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	691a      	ldr	r2, [r3, #16]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf2:	b2d2      	uxtb	r2, r2
 8003bf4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfa:	1c5a      	adds	r2, r3, #1
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	3b01      	subs	r3, #1
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	685a      	ldr	r2, [r3, #4]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003c1c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2220      	movs	r2, #32
 8003c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b40      	cmp	r3, #64	; 0x40
 8003c30:	d10a      	bne.n	8003c48 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f7ff fcc4 	bl	80035ce <HAL_I2C_MemRxCpltCallback>
}
 8003c46:	e01d      	b.n	8003c84 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2212      	movs	r2, #18
 8003c54:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f7ff fc79 	bl	800354e <HAL_I2C_MasterRxCpltCallback>
}
 8003c5c:	e012      	b.n	8003c84 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	691a      	ldr	r2, [r3, #16]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c68:	b2d2      	uxtb	r2, r2
 8003c6a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c70:	1c5a      	adds	r2, r3, #1
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	3b01      	subs	r3, #1
 8003c7e:	b29a      	uxth	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003c84:	bf00      	nop
 8003c86:	3710      	adds	r7, #16
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	2b40      	cmp	r3, #64	; 0x40
 8003c9e:	d117      	bne.n	8003cd0 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d109      	bne.n	8003cbc <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	461a      	mov	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003cb8:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003cba:	e067      	b.n	8003d8c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	f043 0301 	orr.w	r3, r3, #1
 8003cc6:	b2da      	uxtb	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	611a      	str	r2, [r3, #16]
}
 8003cce:	e05d      	b.n	8003d8c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cd8:	d133      	bne.n	8003d42 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b21      	cmp	r3, #33	; 0x21
 8003ce4:	d109      	bne.n	8003cfa <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	461a      	mov	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003cf6:	611a      	str	r2, [r3, #16]
 8003cf8:	e008      	b.n	8003d0c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	f043 0301 	orr.w	r3, r3, #1
 8003d04:	b2da      	uxtb	r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d004      	beq.n	8003d1e <I2C_Master_SB+0x92>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d108      	bne.n	8003d30 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d032      	beq.n	8003d8c <I2C_Master_SB+0x100>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d02d      	beq.n	8003d8c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	685a      	ldr	r2, [r3, #4]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d3e:	605a      	str	r2, [r3, #4]
}
 8003d40:	e024      	b.n	8003d8c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10e      	bne.n	8003d68 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	11db      	asrs	r3, r3, #7
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	f003 0306 	and.w	r3, r3, #6
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	f063 030f 	orn	r3, r3, #15
 8003d5e:	b2da      	uxtb	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	611a      	str	r2, [r3, #16]
}
 8003d66:	e011      	b.n	8003d8c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d10d      	bne.n	8003d8c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	11db      	asrs	r3, r3, #7
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	f003 0306 	and.w	r3, r3, #6
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	f063 030e 	orn	r3, r3, #14
 8003d84:	b2da      	uxtb	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	611a      	str	r2, [r3, #16]
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da4:	b2da      	uxtb	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d004      	beq.n	8003dbe <I2C_Master_ADD10+0x26>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d108      	bne.n	8003dd0 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00c      	beq.n	8003de0 <I2C_Master_ADD10+0x48>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d007      	beq.n	8003de0 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	685a      	ldr	r2, [r3, #4]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dde:	605a      	str	r2, [r3, #4]
  }
}
 8003de0:	bf00      	nop
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b091      	sub	sp, #68	; 0x44
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dfa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e02:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e08:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	2b22      	cmp	r3, #34	; 0x22
 8003e14:	f040 8169 	bne.w	80040ea <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d10f      	bne.n	8003e40 <I2C_Master_ADDR+0x54>
 8003e20:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003e24:	2b40      	cmp	r3, #64	; 0x40
 8003e26:	d10b      	bne.n	8003e40 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e28:	2300      	movs	r3, #0
 8003e2a:	633b      	str	r3, [r7, #48]	; 0x30
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	633b      	str	r3, [r7, #48]	; 0x30
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	633b      	str	r3, [r7, #48]	; 0x30
 8003e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e3e:	e160      	b.n	8004102 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d11d      	bne.n	8003e84 <I2C_Master_ADDR+0x98>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003e50:	d118      	bne.n	8003e84 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e52:	2300      	movs	r3, #0
 8003e54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	695b      	ldr	r3, [r3, #20]
 8003e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e76:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e7c:	1c5a      	adds	r2, r3, #1
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	651a      	str	r2, [r3, #80]	; 0x50
 8003e82:	e13e      	b.n	8004102 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d113      	bne.n	8003eb6 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e8e:	2300      	movs	r3, #0
 8003e90:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	695b      	ldr	r3, [r3, #20]
 8003e98:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eb2:	601a      	str	r2, [r3, #0]
 8003eb4:	e115      	b.n	80040e2 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	f040 808a 	bne.w	8003fd6 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ec8:	d137      	bne.n	8003f3a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ed8:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ee4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ee8:	d113      	bne.n	8003f12 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ef8:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003efa:	2300      	movs	r3, #0
 8003efc:	627b      	str	r3, [r7, #36]	; 0x24
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	695b      	ldr	r3, [r3, #20]
 8003f04:	627b      	str	r3, [r7, #36]	; 0x24
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f10:	e0e7      	b.n	80040e2 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f12:	2300      	movs	r3, #0
 8003f14:	623b      	str	r3, [r7, #32]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	695b      	ldr	r3, [r3, #20]
 8003f1c:	623b      	str	r3, [r7, #32]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	623b      	str	r3, [r7, #32]
 8003f26:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f36:	601a      	str	r2, [r3, #0]
 8003f38:	e0d3      	b.n	80040e2 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f3c:	2b08      	cmp	r3, #8
 8003f3e:	d02e      	beq.n	8003f9e <I2C_Master_ADDR+0x1b2>
 8003f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f42:	2b20      	cmp	r3, #32
 8003f44:	d02b      	beq.n	8003f9e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f48:	2b12      	cmp	r3, #18
 8003f4a:	d102      	bne.n	8003f52 <I2C_Master_ADDR+0x166>
 8003f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d125      	bne.n	8003f9e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f54:	2b04      	cmp	r3, #4
 8003f56:	d00e      	beq.n	8003f76 <I2C_Master_ADDR+0x18a>
 8003f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d00b      	beq.n	8003f76 <I2C_Master_ADDR+0x18a>
 8003f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f60:	2b10      	cmp	r3, #16
 8003f62:	d008      	beq.n	8003f76 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f72:	601a      	str	r2, [r3, #0]
 8003f74:	e007      	b.n	8003f86 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f84:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f86:	2300      	movs	r3, #0
 8003f88:	61fb      	str	r3, [r7, #28]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	695b      	ldr	r3, [r3, #20]
 8003f90:	61fb      	str	r3, [r7, #28]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	61fb      	str	r3, [r7, #28]
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	e0a1      	b.n	80040e2 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fac:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fae:	2300      	movs	r3, #0
 8003fb0:	61bb      	str	r3, [r7, #24]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	695b      	ldr	r3, [r3, #20]
 8003fb8:	61bb      	str	r3, [r7, #24]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	61bb      	str	r3, [r7, #24]
 8003fc2:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fd2:	601a      	str	r2, [r3, #0]
 8003fd4:	e085      	b.n	80040e2 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d14d      	bne.n	800407c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe2:	2b04      	cmp	r3, #4
 8003fe4:	d016      	beq.n	8004014 <I2C_Master_ADDR+0x228>
 8003fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d013      	beq.n	8004014 <I2C_Master_ADDR+0x228>
 8003fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fee:	2b10      	cmp	r3, #16
 8003ff0:	d010      	beq.n	8004014 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004000:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004010:	601a      	str	r2, [r3, #0]
 8004012:	e007      	b.n	8004024 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004022:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800402e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004032:	d117      	bne.n	8004064 <I2C_Master_ADDR+0x278>
 8004034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004036:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800403a:	d00b      	beq.n	8004054 <I2C_Master_ADDR+0x268>
 800403c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800403e:	2b01      	cmp	r3, #1
 8004040:	d008      	beq.n	8004054 <I2C_Master_ADDR+0x268>
 8004042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004044:	2b08      	cmp	r3, #8
 8004046:	d005      	beq.n	8004054 <I2C_Master_ADDR+0x268>
 8004048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800404a:	2b10      	cmp	r3, #16
 800404c:	d002      	beq.n	8004054 <I2C_Master_ADDR+0x268>
 800404e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004050:	2b20      	cmp	r3, #32
 8004052:	d107      	bne.n	8004064 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004062:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004064:	2300      	movs	r3, #0
 8004066:	617b      	str	r3, [r7, #20]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	617b      	str	r3, [r7, #20]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	617b      	str	r3, [r7, #20]
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	e032      	b.n	80040e2 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800408a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004096:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800409a:	d117      	bne.n	80040cc <I2C_Master_ADDR+0x2e0>
 800409c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800409e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040a2:	d00b      	beq.n	80040bc <I2C_Master_ADDR+0x2d0>
 80040a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d008      	beq.n	80040bc <I2C_Master_ADDR+0x2d0>
 80040aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ac:	2b08      	cmp	r3, #8
 80040ae:	d005      	beq.n	80040bc <I2C_Master_ADDR+0x2d0>
 80040b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b2:	2b10      	cmp	r3, #16
 80040b4:	d002      	beq.n	80040bc <I2C_Master_ADDR+0x2d0>
 80040b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b8:	2b20      	cmp	r3, #32
 80040ba:	d107      	bne.n	80040cc <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	685a      	ldr	r2, [r3, #4]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80040ca:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040cc:	2300      	movs	r3, #0
 80040ce:	613b      	str	r3, [r7, #16]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	613b      	str	r3, [r7, #16]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	613b      	str	r3, [r7, #16]
 80040e0:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80040e8:	e00b      	b.n	8004102 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ea:	2300      	movs	r3, #0
 80040ec:	60fb      	str	r3, [r7, #12]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	695b      	ldr	r3, [r3, #20]
 80040f4:	60fb      	str	r3, [r7, #12]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	60fb      	str	r3, [r7, #12]
 80040fe:	68fb      	ldr	r3, [r7, #12]
}
 8004100:	e7ff      	b.n	8004102 <I2C_Master_ADDR+0x316>
 8004102:	bf00      	nop
 8004104:	3744      	adds	r7, #68	; 0x44
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800410e:	b580      	push	{r7, lr}
 8004110:	b084      	sub	sp, #16
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800411c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004122:	b29b      	uxth	r3, r3
 8004124:	2b00      	cmp	r3, #0
 8004126:	d02b      	beq.n	8004180 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412c:	781a      	ldrb	r2, [r3, #0]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004138:	1c5a      	adds	r2, r3, #1
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004142:	b29b      	uxth	r3, r3
 8004144:	3b01      	subs	r3, #1
 8004146:	b29a      	uxth	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004150:	b29b      	uxth	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d114      	bne.n	8004180 <I2C_SlaveTransmit_TXE+0x72>
 8004156:	7bfb      	ldrb	r3, [r7, #15]
 8004158:	2b29      	cmp	r3, #41	; 0x29
 800415a:	d111      	bne.n	8004180 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	685a      	ldr	r2, [r3, #4]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800416a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2221      	movs	r2, #33	; 0x21
 8004170:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2228      	movs	r2, #40	; 0x28
 8004176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f7ff f9f1 	bl	8003562 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004180:	bf00      	nop
 8004182:	3710      	adds	r7, #16
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004194:	b29b      	uxth	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d011      	beq.n	80041be <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419e:	781a      	ldrb	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041aa:	1c5a      	adds	r2, r3, #1
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	3b01      	subs	r3, #1
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80041be:	bf00      	nop
 80041c0:	370c      	adds	r7, #12
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr

080041ca <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b084      	sub	sp, #16
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041d8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041de:	b29b      	uxth	r3, r3
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d02c      	beq.n	800423e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	691a      	ldr	r2, [r3, #16]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ee:	b2d2      	uxtb	r2, r2
 80041f0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f6:	1c5a      	adds	r2, r3, #1
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004200:	b29b      	uxth	r3, r3
 8004202:	3b01      	subs	r3, #1
 8004204:	b29a      	uxth	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800420e:	b29b      	uxth	r3, r3
 8004210:	2b00      	cmp	r3, #0
 8004212:	d114      	bne.n	800423e <I2C_SlaveReceive_RXNE+0x74>
 8004214:	7bfb      	ldrb	r3, [r7, #15]
 8004216:	2b2a      	cmp	r3, #42	; 0x2a
 8004218:	d111      	bne.n	800423e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	685a      	ldr	r2, [r3, #4]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004228:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2222      	movs	r2, #34	; 0x22
 800422e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2228      	movs	r2, #40	; 0x28
 8004234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f7ff f99c 	bl	8003576 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800423e:	bf00      	nop
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004246:	b480      	push	{r7}
 8004248:	b083      	sub	sp, #12
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004252:	b29b      	uxth	r3, r3
 8004254:	2b00      	cmp	r3, #0
 8004256:	d012      	beq.n	800427e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	691a      	ldr	r2, [r3, #16]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004262:	b2d2      	uxtb	r2, r2
 8004264:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426a:	1c5a      	adds	r2, r3, #1
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004274:	b29b      	uxth	r3, r3
 8004276:	3b01      	subs	r3, #1
 8004278:	b29a      	uxth	r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800427e:	bf00      	nop
 8004280:	370c      	adds	r7, #12
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr

0800428a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800428a:	b580      	push	{r7, lr}
 800428c:	b084      	sub	sp, #16
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
 8004292:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004294:	2300      	movs	r3, #0
 8004296:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80042a4:	2b28      	cmp	r3, #40	; 0x28
 80042a6:	d127      	bne.n	80042f8 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	685a      	ldr	r2, [r3, #4]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042b6:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	089b      	lsrs	r3, r3, #2
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d101      	bne.n	80042c8 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80042c4:	2301      	movs	r3, #1
 80042c6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	09db      	lsrs	r3, r3, #7
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d103      	bne.n	80042dc <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	81bb      	strh	r3, [r7, #12]
 80042da:	e002      	b.n	80042e2 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80042ea:	89ba      	ldrh	r2, [r7, #12]
 80042ec:	7bfb      	ldrb	r3, [r7, #15]
 80042ee:	4619      	mov	r1, r3
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f7ff f94a 	bl	800358a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80042f6:	e00e      	b.n	8004316 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042f8:	2300      	movs	r3, #0
 80042fa:	60bb      	str	r3, [r7, #8]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	60bb      	str	r3, [r7, #8]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	60bb      	str	r3, [r7, #8]
 800430c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004316:	bf00      	nop
 8004318:	3710      	adds	r7, #16
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
	...

08004320 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800432e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	685a      	ldr	r2, [r3, #4]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800433e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004340:	2300      	movs	r3, #0
 8004342:	60bb      	str	r3, [r7, #8]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	695b      	ldr	r3, [r3, #20]
 800434a:	60bb      	str	r3, [r7, #8]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f042 0201 	orr.w	r2, r2, #1
 800435a:	601a      	str	r2, [r3, #0]
 800435c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800436c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004378:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800437c:	d172      	bne.n	8004464 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800437e:	7bfb      	ldrb	r3, [r7, #15]
 8004380:	2b22      	cmp	r3, #34	; 0x22
 8004382:	d002      	beq.n	800438a <I2C_Slave_STOPF+0x6a>
 8004384:	7bfb      	ldrb	r3, [r7, #15]
 8004386:	2b2a      	cmp	r3, #42	; 0x2a
 8004388:	d135      	bne.n	80043f6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	b29a      	uxth	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800439c:	b29b      	uxth	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d005      	beq.n	80043ae <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a6:	f043 0204 	orr.w	r2, r3, #4
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	685a      	ldr	r2, [r3, #4]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043bc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c2:	4618      	mov	r0, r3
 80043c4:	f7fe fa2b 	bl	800281e <HAL_DMA_GetState>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d049      	beq.n	8004462 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d2:	4a69      	ldr	r2, [pc, #420]	; (8004578 <I2C_Slave_STOPF+0x258>)
 80043d4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043da:	4618      	mov	r0, r3
 80043dc:	f7fe f9fd 	bl	80027da <HAL_DMA_Abort_IT>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d03d      	beq.n	8004462 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80043f0:	4610      	mov	r0, r2
 80043f2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80043f4:	e035      	b.n	8004462 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	b29a      	uxth	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004408:	b29b      	uxth	r3, r3
 800440a:	2b00      	cmp	r3, #0
 800440c:	d005      	beq.n	800441a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004412:	f043 0204 	orr.w	r2, r3, #4
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	685a      	ldr	r2, [r3, #4]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004428:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800442e:	4618      	mov	r0, r3
 8004430:	f7fe f9f5 	bl	800281e <HAL_DMA_GetState>
 8004434:	4603      	mov	r3, r0
 8004436:	2b01      	cmp	r3, #1
 8004438:	d014      	beq.n	8004464 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800443e:	4a4e      	ldr	r2, [pc, #312]	; (8004578 <I2C_Slave_STOPF+0x258>)
 8004440:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004446:	4618      	mov	r0, r3
 8004448:	f7fe f9c7 	bl	80027da <HAL_DMA_Abort_IT>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d008      	beq.n	8004464 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004456:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800445c:	4610      	mov	r0, r2
 800445e:	4798      	blx	r3
 8004460:	e000      	b.n	8004464 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004462:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004468:	b29b      	uxth	r3, r3
 800446a:	2b00      	cmp	r3, #0
 800446c:	d03e      	beq.n	80044ec <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	695b      	ldr	r3, [r3, #20]
 8004474:	f003 0304 	and.w	r3, r3, #4
 8004478:	2b04      	cmp	r3, #4
 800447a:	d112      	bne.n	80044a2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	691a      	ldr	r2, [r3, #16]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004486:	b2d2      	uxtb	r2, r2
 8004488:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448e:	1c5a      	adds	r2, r3, #1
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004498:	b29b      	uxth	r3, r3
 800449a:	3b01      	subs	r3, #1
 800449c:	b29a      	uxth	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	695b      	ldr	r3, [r3, #20]
 80044a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ac:	2b40      	cmp	r3, #64	; 0x40
 80044ae:	d112      	bne.n	80044d6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	691a      	ldr	r2, [r3, #16]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ba:	b2d2      	uxtb	r2, r2
 80044bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c2:	1c5a      	adds	r2, r3, #1
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	3b01      	subs	r3, #1
 80044d0:	b29a      	uxth	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044da:	b29b      	uxth	r3, r3
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d005      	beq.n	80044ec <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e4:	f043 0204 	orr.w	r2, r3, #4
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d003      	beq.n	80044fc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 f843 	bl	8004580 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80044fa:	e039      	b.n	8004570 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80044fc:	7bfb      	ldrb	r3, [r7, #15]
 80044fe:	2b2a      	cmp	r3, #42	; 0x2a
 8004500:	d109      	bne.n	8004516 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2228      	movs	r2, #40	; 0x28
 800450c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f7ff f830 	bl	8003576 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b28      	cmp	r3, #40	; 0x28
 8004520:	d111      	bne.n	8004546 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a15      	ldr	r2, [pc, #84]	; (800457c <I2C_Slave_STOPF+0x25c>)
 8004526:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2220      	movs	r2, #32
 8004532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f7ff f831 	bl	80035a6 <HAL_I2C_ListenCpltCallback>
}
 8004544:	e014      	b.n	8004570 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454a:	2b22      	cmp	r3, #34	; 0x22
 800454c:	d002      	beq.n	8004554 <I2C_Slave_STOPF+0x234>
 800454e:	7bfb      	ldrb	r3, [r7, #15]
 8004550:	2b22      	cmp	r3, #34	; 0x22
 8004552:	d10d      	bne.n	8004570 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2220      	movs	r2, #32
 800455e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f7ff f803 	bl	8003576 <HAL_I2C_SlaveRxCpltCallback>
}
 8004570:	bf00      	nop
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	080048e9 	.word	0x080048e9
 800457c:	ffff0000 	.word	0xffff0000

08004580 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800458e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004596:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004598:	7bbb      	ldrb	r3, [r7, #14]
 800459a:	2b10      	cmp	r3, #16
 800459c:	d002      	beq.n	80045a4 <I2C_ITError+0x24>
 800459e:	7bbb      	ldrb	r3, [r7, #14]
 80045a0:	2b40      	cmp	r3, #64	; 0x40
 80045a2:	d10a      	bne.n	80045ba <I2C_ITError+0x3a>
 80045a4:	7bfb      	ldrb	r3, [r7, #15]
 80045a6:	2b22      	cmp	r3, #34	; 0x22
 80045a8:	d107      	bne.n	80045ba <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045b8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80045ba:	7bfb      	ldrb	r3, [r7, #15]
 80045bc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80045c0:	2b28      	cmp	r3, #40	; 0x28
 80045c2:	d107      	bne.n	80045d4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2228      	movs	r2, #40	; 0x28
 80045ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80045d2:	e015      	b.n	8004600 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045e2:	d00a      	beq.n	80045fa <I2C_ITError+0x7a>
 80045e4:	7bfb      	ldrb	r3, [r7, #15]
 80045e6:	2b60      	cmp	r3, #96	; 0x60
 80045e8:	d007      	beq.n	80045fa <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2220      	movs	r2, #32
 80045ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800460a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800460e:	d162      	bne.n	80046d6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	685a      	ldr	r2, [r3, #4]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800461e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004624:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b01      	cmp	r3, #1
 800462c:	d020      	beq.n	8004670 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004632:	4a6a      	ldr	r2, [pc, #424]	; (80047dc <I2C_ITError+0x25c>)
 8004634:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800463a:	4618      	mov	r0, r3
 800463c:	f7fe f8cd 	bl	80027da <HAL_DMA_Abort_IT>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	f000 8089 	beq.w	800475a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f022 0201 	bic.w	r2, r2, #1
 8004656:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2220      	movs	r2, #32
 800465c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800466a:	4610      	mov	r0, r2
 800466c:	4798      	blx	r3
 800466e:	e074      	b.n	800475a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004674:	4a59      	ldr	r2, [pc, #356]	; (80047dc <I2C_ITError+0x25c>)
 8004676:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800467c:	4618      	mov	r0, r3
 800467e:	f7fe f8ac 	bl	80027da <HAL_DMA_Abort_IT>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d068      	beq.n	800475a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004692:	2b40      	cmp	r3, #64	; 0x40
 8004694:	d10b      	bne.n	80046ae <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	691a      	ldr	r2, [r3, #16]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a0:	b2d2      	uxtb	r2, r2
 80046a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a8:	1c5a      	adds	r2, r3, #1
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f022 0201 	bic.w	r2, r2, #1
 80046bc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2220      	movs	r2, #32
 80046c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046d0:	4610      	mov	r0, r2
 80046d2:	4798      	blx	r3
 80046d4:	e041      	b.n	800475a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b60      	cmp	r3, #96	; 0x60
 80046e0:	d125      	bne.n	800472e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2220      	movs	r2, #32
 80046e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046fa:	2b40      	cmp	r3, #64	; 0x40
 80046fc:	d10b      	bne.n	8004716 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	691a      	ldr	r2, [r3, #16]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004708:	b2d2      	uxtb	r2, r2
 800470a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004710:	1c5a      	adds	r2, r3, #1
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f022 0201 	bic.w	r2, r2, #1
 8004724:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f7fe ff65 	bl	80035f6 <HAL_I2C_AbortCpltCallback>
 800472c:	e015      	b.n	800475a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	695b      	ldr	r3, [r3, #20]
 8004734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004738:	2b40      	cmp	r3, #64	; 0x40
 800473a:	d10b      	bne.n	8004754 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	691a      	ldr	r2, [r3, #16]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004746:	b2d2      	uxtb	r2, r2
 8004748:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474e:	1c5a      	adds	r2, r3, #1
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f7fe ff44 	bl	80035e2 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	2b00      	cmp	r3, #0
 8004768:	d10e      	bne.n	8004788 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004770:	2b00      	cmp	r3, #0
 8004772:	d109      	bne.n	8004788 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800477a:	2b00      	cmp	r3, #0
 800477c:	d104      	bne.n	8004788 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004784:	2b00      	cmp	r3, #0
 8004786:	d007      	beq.n	8004798 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	685a      	ldr	r2, [r3, #4]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004796:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800479e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a4:	f003 0304 	and.w	r3, r3, #4
 80047a8:	2b04      	cmp	r3, #4
 80047aa:	d113      	bne.n	80047d4 <I2C_ITError+0x254>
 80047ac:	7bfb      	ldrb	r3, [r7, #15]
 80047ae:	2b28      	cmp	r3, #40	; 0x28
 80047b0:	d110      	bne.n	80047d4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a0a      	ldr	r2, [pc, #40]	; (80047e0 <I2C_ITError+0x260>)
 80047b6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2220      	movs	r2, #32
 80047c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f7fe fee9 	bl	80035a6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80047d4:	bf00      	nop
 80047d6:	3710      	adds	r7, #16
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	080048e9 	.word	0x080048e9
 80047e0:	ffff0000 	.word	0xffff0000

080047e4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b088      	sub	sp, #32
 80047e8:	af02      	add	r7, sp, #8
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	607a      	str	r2, [r7, #4]
 80047ee:	603b      	str	r3, [r7, #0]
 80047f0:	460b      	mov	r3, r1
 80047f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	2b08      	cmp	r3, #8
 80047fe:	d006      	beq.n	800480e <I2C_MasterRequestWrite+0x2a>
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d003      	beq.n	800480e <I2C_MasterRequestWrite+0x2a>
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800480c:	d108      	bne.n	8004820 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800481c:	601a      	str	r2, [r3, #0]
 800481e:	e00b      	b.n	8004838 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004824:	2b12      	cmp	r3, #18
 8004826:	d107      	bne.n	8004838 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004836:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	9300      	str	r3, [sp, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004844:	68f8      	ldr	r0, [r7, #12]
 8004846:	f000 f8f7 	bl	8004a38 <I2C_WaitOnFlagUntilTimeout>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00d      	beq.n	800486c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800485a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800485e:	d103      	bne.n	8004868 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004866:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e035      	b.n	80048d8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	691b      	ldr	r3, [r3, #16]
 8004870:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004874:	d108      	bne.n	8004888 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004876:	897b      	ldrh	r3, [r7, #10]
 8004878:	b2db      	uxtb	r3, r3
 800487a:	461a      	mov	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004884:	611a      	str	r2, [r3, #16]
 8004886:	e01b      	b.n	80048c0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004888:	897b      	ldrh	r3, [r7, #10]
 800488a:	11db      	asrs	r3, r3, #7
 800488c:	b2db      	uxtb	r3, r3
 800488e:	f003 0306 	and.w	r3, r3, #6
 8004892:	b2db      	uxtb	r3, r3
 8004894:	f063 030f 	orn	r3, r3, #15
 8004898:	b2da      	uxtb	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	490e      	ldr	r1, [pc, #56]	; (80048e0 <I2C_MasterRequestWrite+0xfc>)
 80048a6:	68f8      	ldr	r0, [r7, #12]
 80048a8:	f000 f91d 	bl	8004ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d001      	beq.n	80048b6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e010      	b.n	80048d8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80048b6:	897b      	ldrh	r3, [r7, #10]
 80048b8:	b2da      	uxtb	r2, r3
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	4907      	ldr	r1, [pc, #28]	; (80048e4 <I2C_MasterRequestWrite+0x100>)
 80048c6:	68f8      	ldr	r0, [r7, #12]
 80048c8:	f000 f90d 	bl	8004ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d001      	beq.n	80048d6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e000      	b.n	80048d8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3718      	adds	r7, #24
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	00010008 	.word	0x00010008
 80048e4:	00010002 	.word	0x00010002

080048e8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b086      	sub	sp, #24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80048f0:	2300      	movs	r3, #0
 80048f2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004900:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004902:	4b4b      	ldr	r3, [pc, #300]	; (8004a30 <I2C_DMAAbort+0x148>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	08db      	lsrs	r3, r3, #3
 8004908:	4a4a      	ldr	r2, [pc, #296]	; (8004a34 <I2C_DMAAbort+0x14c>)
 800490a:	fba2 2303 	umull	r2, r3, r2, r3
 800490e:	0a1a      	lsrs	r2, r3, #8
 8004910:	4613      	mov	r3, r2
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	4413      	add	r3, r2
 8004916:	00da      	lsls	r2, r3, #3
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d106      	bne.n	8004930 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004926:	f043 0220 	orr.w	r2, r3, #32
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800492e:	e00a      	b.n	8004946 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	3b01      	subs	r3, #1
 8004934:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004940:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004944:	d0ea      	beq.n	800491c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800494a:	2b00      	cmp	r3, #0
 800494c:	d003      	beq.n	8004956 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004952:	2200      	movs	r2, #0
 8004954:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495a:	2b00      	cmp	r3, #0
 800495c:	d003      	beq.n	8004966 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004962:	2200      	movs	r2, #0
 8004964:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004974:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	2200      	movs	r2, #0
 800497a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004980:	2b00      	cmp	r3, #0
 8004982:	d003      	beq.n	800498c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004988:	2200      	movs	r2, #0
 800498a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004990:	2b00      	cmp	r3, #0
 8004992:	d003      	beq.n	800499c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004998:	2200      	movs	r2, #0
 800499a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f022 0201 	bic.w	r2, r2, #1
 80049aa:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	2b60      	cmp	r3, #96	; 0x60
 80049b6:	d10e      	bne.n	80049d6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	2220      	movs	r2, #32
 80049bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	2200      	movs	r2, #0
 80049cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80049ce:	6978      	ldr	r0, [r7, #20]
 80049d0:	f7fe fe11 	bl	80035f6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80049d4:	e027      	b.n	8004a26 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80049d6:	7cfb      	ldrb	r3, [r7, #19]
 80049d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80049dc:	2b28      	cmp	r3, #40	; 0x28
 80049de:	d117      	bne.n	8004a10 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f042 0201 	orr.w	r2, r2, #1
 80049ee:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049fe:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	2200      	movs	r2, #0
 8004a04:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	2228      	movs	r2, #40	; 0x28
 8004a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004a0e:	e007      	b.n	8004a20 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	2220      	movs	r2, #32
 8004a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004a20:	6978      	ldr	r0, [r7, #20]
 8004a22:	f7fe fdde 	bl	80035e2 <HAL_I2C_ErrorCallback>
}
 8004a26:	bf00      	nop
 8004a28:	3718      	adds	r7, #24
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	20000044 	.word	0x20000044
 8004a34:	14f8b589 	.word	0x14f8b589

08004a38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	603b      	str	r3, [r7, #0]
 8004a44:	4613      	mov	r3, r2
 8004a46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a48:	e025      	b.n	8004a96 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a50:	d021      	beq.n	8004a96 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a52:	f7fd fd4f 	bl	80024f4 <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	683a      	ldr	r2, [r7, #0]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d302      	bcc.n	8004a68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d116      	bne.n	8004a96 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2220      	movs	r2, #32
 8004a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a82:	f043 0220 	orr.w	r2, r3, #32
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e023      	b.n	8004ade <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	0c1b      	lsrs	r3, r3, #16
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d10d      	bne.n	8004abc <I2C_WaitOnFlagUntilTimeout+0x84>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	43da      	mvns	r2, r3
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	4013      	ands	r3, r2
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	bf0c      	ite	eq
 8004ab2:	2301      	moveq	r3, #1
 8004ab4:	2300      	movne	r3, #0
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	461a      	mov	r2, r3
 8004aba:	e00c      	b.n	8004ad6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	43da      	mvns	r2, r3
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	bf0c      	ite	eq
 8004ace:	2301      	moveq	r3, #1
 8004ad0:	2300      	movne	r3, #0
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	79fb      	ldrb	r3, [r7, #7]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d0b6      	beq.n	8004a4a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}

08004ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004ae6:	b580      	push	{r7, lr}
 8004ae8:	b084      	sub	sp, #16
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	60f8      	str	r0, [r7, #12]
 8004aee:	60b9      	str	r1, [r7, #8]
 8004af0:	607a      	str	r2, [r7, #4]
 8004af2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004af4:	e051      	b.n	8004b9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	695b      	ldr	r3, [r3, #20]
 8004afc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b04:	d123      	bne.n	8004b4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b14:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b1e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2220      	movs	r2, #32
 8004b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3a:	f043 0204 	orr.w	r2, r3, #4
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e046      	b.n	8004bdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b54:	d021      	beq.n	8004b9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b56:	f7fd fccd 	bl	80024f4 <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d302      	bcc.n	8004b6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d116      	bne.n	8004b9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2220      	movs	r2, #32
 8004b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b86:	f043 0220 	orr.w	r2, r3, #32
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e020      	b.n	8004bdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	0c1b      	lsrs	r3, r3, #16
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d10c      	bne.n	8004bbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	695b      	ldr	r3, [r3, #20]
 8004baa:	43da      	mvns	r2, r3
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	4013      	ands	r3, r2
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	bf14      	ite	ne
 8004bb6:	2301      	movne	r3, #1
 8004bb8:	2300      	moveq	r3, #0
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	e00b      	b.n	8004bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	43da      	mvns	r2, r3
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	4013      	ands	r3, r2
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	bf14      	ite	ne
 8004bd0:	2301      	movne	r3, #1
 8004bd2:	2300      	moveq	r3, #0
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d18d      	bne.n	8004af6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3710      	adds	r7, #16
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bf0:	e02d      	b.n	8004c4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004bf2:	68f8      	ldr	r0, [r7, #12]
 8004bf4:	f000 f8aa 	bl	8004d4c <I2C_IsAcknowledgeFailed>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d001      	beq.n	8004c02 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e02d      	b.n	8004c5e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c08:	d021      	beq.n	8004c4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c0a:	f7fd fc73 	bl	80024f4 <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	68ba      	ldr	r2, [r7, #8]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d302      	bcc.n	8004c20 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d116      	bne.n	8004c4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2220      	movs	r2, #32
 8004c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3a:	f043 0220 	orr.w	r2, r3, #32
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e007      	b.n	8004c5e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	695b      	ldr	r3, [r3, #20]
 8004c54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c58:	2b80      	cmp	r3, #128	; 0x80
 8004c5a:	d1ca      	bne.n	8004bf2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}

08004c66 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c66:	b580      	push	{r7, lr}
 8004c68:	b084      	sub	sp, #16
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	60f8      	str	r0, [r7, #12]
 8004c6e:	60b9      	str	r1, [r7, #8]
 8004c70:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c72:	e02d      	b.n	8004cd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c74:	68f8      	ldr	r0, [r7, #12]
 8004c76:	f000 f869 	bl	8004d4c <I2C_IsAcknowledgeFailed>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d001      	beq.n	8004c84 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e02d      	b.n	8004ce0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c8a:	d021      	beq.n	8004cd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c8c:	f7fd fc32 	bl	80024f4 <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	68ba      	ldr	r2, [r7, #8]
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d302      	bcc.n	8004ca2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d116      	bne.n	8004cd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2220      	movs	r2, #32
 8004cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbc:	f043 0220 	orr.w	r2, r3, #32
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e007      	b.n	8004ce0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	695b      	ldr	r3, [r3, #20]
 8004cd6:	f003 0304 	and.w	r3, r3, #4
 8004cda:	2b04      	cmp	r3, #4
 8004cdc:	d1ca      	bne.n	8004c74 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3710      	adds	r7, #16
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004cf4:	4b13      	ldr	r3, [pc, #76]	; (8004d44 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	08db      	lsrs	r3, r3, #3
 8004cfa:	4a13      	ldr	r2, [pc, #76]	; (8004d48 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8004d00:	0a1a      	lsrs	r2, r3, #8
 8004d02:	4613      	mov	r3, r2
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	4413      	add	r3, r2
 8004d08:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	3b01      	subs	r3, #1
 8004d0e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d107      	bne.n	8004d26 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1a:	f043 0220 	orr.w	r2, r3, #32
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e008      	b.n	8004d38 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d34:	d0e9      	beq.n	8004d0a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004d36:	2300      	movs	r3, #0
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3714      	adds	r7, #20
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr
 8004d44:	20000044 	.word	0x20000044
 8004d48:	14f8b589 	.word	0x14f8b589

08004d4c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d62:	d11b      	bne.n	8004d9c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d6c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2220      	movs	r2, #32
 8004d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d88:	f043 0204 	orr.w	r2, r3, #4
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e000      	b.n	8004d9e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	370c      	adds	r7, #12
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr

08004daa <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004daa:	b480      	push	{r7}
 8004dac:	b083      	sub	sp, #12
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db6:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004dba:	d103      	bne.n	8004dc4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004dc2:	e007      	b.n	8004dd4 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004dcc:	d102      	bne.n	8004dd4 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2208      	movs	r2, #8
 8004dd2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b086      	sub	sp, #24
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d101      	bne.n	8004df2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e264      	b.n	80052bc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0301 	and.w	r3, r3, #1
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d075      	beq.n	8004eea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004dfe:	4ba3      	ldr	r3, [pc, #652]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	f003 030c 	and.w	r3, r3, #12
 8004e06:	2b04      	cmp	r3, #4
 8004e08:	d00c      	beq.n	8004e24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e0a:	4ba0      	ldr	r3, [pc, #640]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e12:	2b08      	cmp	r3, #8
 8004e14:	d112      	bne.n	8004e3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e16:	4b9d      	ldr	r3, [pc, #628]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e22:	d10b      	bne.n	8004e3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e24:	4b99      	ldr	r3, [pc, #612]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d05b      	beq.n	8004ee8 <HAL_RCC_OscConfig+0x108>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d157      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e23f      	b.n	80052bc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e44:	d106      	bne.n	8004e54 <HAL_RCC_OscConfig+0x74>
 8004e46:	4b91      	ldr	r3, [pc, #580]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a90      	ldr	r2, [pc, #576]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e50:	6013      	str	r3, [r2, #0]
 8004e52:	e01d      	b.n	8004e90 <HAL_RCC_OscConfig+0xb0>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e5c:	d10c      	bne.n	8004e78 <HAL_RCC_OscConfig+0x98>
 8004e5e:	4b8b      	ldr	r3, [pc, #556]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a8a      	ldr	r2, [pc, #552]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004e64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e68:	6013      	str	r3, [r2, #0]
 8004e6a:	4b88      	ldr	r3, [pc, #544]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a87      	ldr	r2, [pc, #540]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e74:	6013      	str	r3, [r2, #0]
 8004e76:	e00b      	b.n	8004e90 <HAL_RCC_OscConfig+0xb0>
 8004e78:	4b84      	ldr	r3, [pc, #528]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a83      	ldr	r2, [pc, #524]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004e7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e82:	6013      	str	r3, [r2, #0]
 8004e84:	4b81      	ldr	r3, [pc, #516]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a80      	ldr	r2, [pc, #512]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004e8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d013      	beq.n	8004ec0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e98:	f7fd fb2c 	bl	80024f4 <HAL_GetTick>
 8004e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e9e:	e008      	b.n	8004eb2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ea0:	f7fd fb28 	bl	80024f4 <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	2b64      	cmp	r3, #100	; 0x64
 8004eac:	d901      	bls.n	8004eb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e204      	b.n	80052bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eb2:	4b76      	ldr	r3, [pc, #472]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d0f0      	beq.n	8004ea0 <HAL_RCC_OscConfig+0xc0>
 8004ebe:	e014      	b.n	8004eea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ec0:	f7fd fb18 	bl	80024f4 <HAL_GetTick>
 8004ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ec6:	e008      	b.n	8004eda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ec8:	f7fd fb14 	bl	80024f4 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	2b64      	cmp	r3, #100	; 0x64
 8004ed4:	d901      	bls.n	8004eda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e1f0      	b.n	80052bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eda:	4b6c      	ldr	r3, [pc, #432]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d1f0      	bne.n	8004ec8 <HAL_RCC_OscConfig+0xe8>
 8004ee6:	e000      	b.n	8004eea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ee8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0302 	and.w	r3, r3, #2
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d063      	beq.n	8004fbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ef6:	4b65      	ldr	r3, [pc, #404]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f003 030c 	and.w	r3, r3, #12
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00b      	beq.n	8004f1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f02:	4b62      	ldr	r3, [pc, #392]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f0a:	2b08      	cmp	r3, #8
 8004f0c:	d11c      	bne.n	8004f48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f0e:	4b5f      	ldr	r3, [pc, #380]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d116      	bne.n	8004f48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f1a:	4b5c      	ldr	r3, [pc, #368]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0302 	and.w	r3, r3, #2
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d005      	beq.n	8004f32 <HAL_RCC_OscConfig+0x152>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d001      	beq.n	8004f32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e1c4      	b.n	80052bc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f32:	4b56      	ldr	r3, [pc, #344]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	00db      	lsls	r3, r3, #3
 8004f40:	4952      	ldr	r1, [pc, #328]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f46:	e03a      	b.n	8004fbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d020      	beq.n	8004f92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f50:	4b4f      	ldr	r3, [pc, #316]	; (8005090 <HAL_RCC_OscConfig+0x2b0>)
 8004f52:	2201      	movs	r2, #1
 8004f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f56:	f7fd facd 	bl	80024f4 <HAL_GetTick>
 8004f5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f5c:	e008      	b.n	8004f70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f5e:	f7fd fac9 	bl	80024f4 <HAL_GetTick>
 8004f62:	4602      	mov	r2, r0
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d901      	bls.n	8004f70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e1a5      	b.n	80052bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f70:	4b46      	ldr	r3, [pc, #280]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0302 	and.w	r3, r3, #2
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d0f0      	beq.n	8004f5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f7c:	4b43      	ldr	r3, [pc, #268]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	691b      	ldr	r3, [r3, #16]
 8004f88:	00db      	lsls	r3, r3, #3
 8004f8a:	4940      	ldr	r1, [pc, #256]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	600b      	str	r3, [r1, #0]
 8004f90:	e015      	b.n	8004fbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f92:	4b3f      	ldr	r3, [pc, #252]	; (8005090 <HAL_RCC_OscConfig+0x2b0>)
 8004f94:	2200      	movs	r2, #0
 8004f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f98:	f7fd faac 	bl	80024f4 <HAL_GetTick>
 8004f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f9e:	e008      	b.n	8004fb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fa0:	f7fd faa8 	bl	80024f4 <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	2b02      	cmp	r3, #2
 8004fac:	d901      	bls.n	8004fb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e184      	b.n	80052bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fb2:	4b36      	ldr	r3, [pc, #216]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0302 	and.w	r3, r3, #2
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1f0      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0308 	and.w	r3, r3, #8
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d030      	beq.n	800502c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d016      	beq.n	8005000 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fd2:	4b30      	ldr	r3, [pc, #192]	; (8005094 <HAL_RCC_OscConfig+0x2b4>)
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fd8:	f7fd fa8c 	bl	80024f4 <HAL_GetTick>
 8004fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fde:	e008      	b.n	8004ff2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fe0:	f7fd fa88 	bl	80024f4 <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d901      	bls.n	8004ff2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e164      	b.n	80052bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ff2:	4b26      	ldr	r3, [pc, #152]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8004ff4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ff6:	f003 0302 	and.w	r3, r3, #2
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d0f0      	beq.n	8004fe0 <HAL_RCC_OscConfig+0x200>
 8004ffe:	e015      	b.n	800502c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005000:	4b24      	ldr	r3, [pc, #144]	; (8005094 <HAL_RCC_OscConfig+0x2b4>)
 8005002:	2200      	movs	r2, #0
 8005004:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005006:	f7fd fa75 	bl	80024f4 <HAL_GetTick>
 800500a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800500c:	e008      	b.n	8005020 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800500e:	f7fd fa71 	bl	80024f4 <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	2b02      	cmp	r3, #2
 800501a:	d901      	bls.n	8005020 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e14d      	b.n	80052bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005020:	4b1a      	ldr	r3, [pc, #104]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8005022:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005024:	f003 0302 	and.w	r3, r3, #2
 8005028:	2b00      	cmp	r3, #0
 800502a:	d1f0      	bne.n	800500e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0304 	and.w	r3, r3, #4
 8005034:	2b00      	cmp	r3, #0
 8005036:	f000 80a0 	beq.w	800517a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800503a:	2300      	movs	r3, #0
 800503c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800503e:	4b13      	ldr	r3, [pc, #76]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8005040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d10f      	bne.n	800506a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800504a:	2300      	movs	r3, #0
 800504c:	60bb      	str	r3, [r7, #8]
 800504e:	4b0f      	ldr	r3, [pc, #60]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8005050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005052:	4a0e      	ldr	r2, [pc, #56]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 8005054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005058:	6413      	str	r3, [r2, #64]	; 0x40
 800505a:	4b0c      	ldr	r3, [pc, #48]	; (800508c <HAL_RCC_OscConfig+0x2ac>)
 800505c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005062:	60bb      	str	r3, [r7, #8]
 8005064:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005066:	2301      	movs	r3, #1
 8005068:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800506a:	4b0b      	ldr	r3, [pc, #44]	; (8005098 <HAL_RCC_OscConfig+0x2b8>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005072:	2b00      	cmp	r3, #0
 8005074:	d121      	bne.n	80050ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005076:	4b08      	ldr	r3, [pc, #32]	; (8005098 <HAL_RCC_OscConfig+0x2b8>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a07      	ldr	r2, [pc, #28]	; (8005098 <HAL_RCC_OscConfig+0x2b8>)
 800507c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005080:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005082:	f7fd fa37 	bl	80024f4 <HAL_GetTick>
 8005086:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005088:	e011      	b.n	80050ae <HAL_RCC_OscConfig+0x2ce>
 800508a:	bf00      	nop
 800508c:	40023800 	.word	0x40023800
 8005090:	42470000 	.word	0x42470000
 8005094:	42470e80 	.word	0x42470e80
 8005098:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800509c:	f7fd fa2a 	bl	80024f4 <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d901      	bls.n	80050ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e106      	b.n	80052bc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050ae:	4b85      	ldr	r3, [pc, #532]	; (80052c4 <HAL_RCC_OscConfig+0x4e4>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d0f0      	beq.n	800509c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d106      	bne.n	80050d0 <HAL_RCC_OscConfig+0x2f0>
 80050c2:	4b81      	ldr	r3, [pc, #516]	; (80052c8 <HAL_RCC_OscConfig+0x4e8>)
 80050c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c6:	4a80      	ldr	r2, [pc, #512]	; (80052c8 <HAL_RCC_OscConfig+0x4e8>)
 80050c8:	f043 0301 	orr.w	r3, r3, #1
 80050cc:	6713      	str	r3, [r2, #112]	; 0x70
 80050ce:	e01c      	b.n	800510a <HAL_RCC_OscConfig+0x32a>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	2b05      	cmp	r3, #5
 80050d6:	d10c      	bne.n	80050f2 <HAL_RCC_OscConfig+0x312>
 80050d8:	4b7b      	ldr	r3, [pc, #492]	; (80052c8 <HAL_RCC_OscConfig+0x4e8>)
 80050da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050dc:	4a7a      	ldr	r2, [pc, #488]	; (80052c8 <HAL_RCC_OscConfig+0x4e8>)
 80050de:	f043 0304 	orr.w	r3, r3, #4
 80050e2:	6713      	str	r3, [r2, #112]	; 0x70
 80050e4:	4b78      	ldr	r3, [pc, #480]	; (80052c8 <HAL_RCC_OscConfig+0x4e8>)
 80050e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e8:	4a77      	ldr	r2, [pc, #476]	; (80052c8 <HAL_RCC_OscConfig+0x4e8>)
 80050ea:	f043 0301 	orr.w	r3, r3, #1
 80050ee:	6713      	str	r3, [r2, #112]	; 0x70
 80050f0:	e00b      	b.n	800510a <HAL_RCC_OscConfig+0x32a>
 80050f2:	4b75      	ldr	r3, [pc, #468]	; (80052c8 <HAL_RCC_OscConfig+0x4e8>)
 80050f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f6:	4a74      	ldr	r2, [pc, #464]	; (80052c8 <HAL_RCC_OscConfig+0x4e8>)
 80050f8:	f023 0301 	bic.w	r3, r3, #1
 80050fc:	6713      	str	r3, [r2, #112]	; 0x70
 80050fe:	4b72      	ldr	r3, [pc, #456]	; (80052c8 <HAL_RCC_OscConfig+0x4e8>)
 8005100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005102:	4a71      	ldr	r2, [pc, #452]	; (80052c8 <HAL_RCC_OscConfig+0x4e8>)
 8005104:	f023 0304 	bic.w	r3, r3, #4
 8005108:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d015      	beq.n	800513e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005112:	f7fd f9ef 	bl	80024f4 <HAL_GetTick>
 8005116:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005118:	e00a      	b.n	8005130 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800511a:	f7fd f9eb 	bl	80024f4 <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	f241 3288 	movw	r2, #5000	; 0x1388
 8005128:	4293      	cmp	r3, r2
 800512a:	d901      	bls.n	8005130 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	e0c5      	b.n	80052bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005130:	4b65      	ldr	r3, [pc, #404]	; (80052c8 <HAL_RCC_OscConfig+0x4e8>)
 8005132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005134:	f003 0302 	and.w	r3, r3, #2
 8005138:	2b00      	cmp	r3, #0
 800513a:	d0ee      	beq.n	800511a <HAL_RCC_OscConfig+0x33a>
 800513c:	e014      	b.n	8005168 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800513e:	f7fd f9d9 	bl	80024f4 <HAL_GetTick>
 8005142:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005144:	e00a      	b.n	800515c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005146:	f7fd f9d5 	bl	80024f4 <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	f241 3288 	movw	r2, #5000	; 0x1388
 8005154:	4293      	cmp	r3, r2
 8005156:	d901      	bls.n	800515c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	e0af      	b.n	80052bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800515c:	4b5a      	ldr	r3, [pc, #360]	; (80052c8 <HAL_RCC_OscConfig+0x4e8>)
 800515e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005160:	f003 0302 	and.w	r3, r3, #2
 8005164:	2b00      	cmp	r3, #0
 8005166:	d1ee      	bne.n	8005146 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005168:	7dfb      	ldrb	r3, [r7, #23]
 800516a:	2b01      	cmp	r3, #1
 800516c:	d105      	bne.n	800517a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800516e:	4b56      	ldr	r3, [pc, #344]	; (80052c8 <HAL_RCC_OscConfig+0x4e8>)
 8005170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005172:	4a55      	ldr	r2, [pc, #340]	; (80052c8 <HAL_RCC_OscConfig+0x4e8>)
 8005174:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005178:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	699b      	ldr	r3, [r3, #24]
 800517e:	2b00      	cmp	r3, #0
 8005180:	f000 809b 	beq.w	80052ba <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005184:	4b50      	ldr	r3, [pc, #320]	; (80052c8 <HAL_RCC_OscConfig+0x4e8>)
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f003 030c 	and.w	r3, r3, #12
 800518c:	2b08      	cmp	r3, #8
 800518e:	d05c      	beq.n	800524a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	2b02      	cmp	r3, #2
 8005196:	d141      	bne.n	800521c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005198:	4b4c      	ldr	r3, [pc, #304]	; (80052cc <HAL_RCC_OscConfig+0x4ec>)
 800519a:	2200      	movs	r2, #0
 800519c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800519e:	f7fd f9a9 	bl	80024f4 <HAL_GetTick>
 80051a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051a4:	e008      	b.n	80051b8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051a6:	f7fd f9a5 	bl	80024f4 <HAL_GetTick>
 80051aa:	4602      	mov	r2, r0
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d901      	bls.n	80051b8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e081      	b.n	80052bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051b8:	4b43      	ldr	r3, [pc, #268]	; (80052c8 <HAL_RCC_OscConfig+0x4e8>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d1f0      	bne.n	80051a6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	69da      	ldr	r2, [r3, #28]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a1b      	ldr	r3, [r3, #32]
 80051cc:	431a      	orrs	r2, r3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d2:	019b      	lsls	r3, r3, #6
 80051d4:	431a      	orrs	r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051da:	085b      	lsrs	r3, r3, #1
 80051dc:	3b01      	subs	r3, #1
 80051de:	041b      	lsls	r3, r3, #16
 80051e0:	431a      	orrs	r2, r3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e6:	061b      	lsls	r3, r3, #24
 80051e8:	4937      	ldr	r1, [pc, #220]	; (80052c8 <HAL_RCC_OscConfig+0x4e8>)
 80051ea:	4313      	orrs	r3, r2
 80051ec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051ee:	4b37      	ldr	r3, [pc, #220]	; (80052cc <HAL_RCC_OscConfig+0x4ec>)
 80051f0:	2201      	movs	r2, #1
 80051f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051f4:	f7fd f97e 	bl	80024f4 <HAL_GetTick>
 80051f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051fa:	e008      	b.n	800520e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051fc:	f7fd f97a 	bl	80024f4 <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	2b02      	cmp	r3, #2
 8005208:	d901      	bls.n	800520e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e056      	b.n	80052bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800520e:	4b2e      	ldr	r3, [pc, #184]	; (80052c8 <HAL_RCC_OscConfig+0x4e8>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d0f0      	beq.n	80051fc <HAL_RCC_OscConfig+0x41c>
 800521a:	e04e      	b.n	80052ba <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800521c:	4b2b      	ldr	r3, [pc, #172]	; (80052cc <HAL_RCC_OscConfig+0x4ec>)
 800521e:	2200      	movs	r2, #0
 8005220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005222:	f7fd f967 	bl	80024f4 <HAL_GetTick>
 8005226:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005228:	e008      	b.n	800523c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800522a:	f7fd f963 	bl	80024f4 <HAL_GetTick>
 800522e:	4602      	mov	r2, r0
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	2b02      	cmp	r3, #2
 8005236:	d901      	bls.n	800523c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005238:	2303      	movs	r3, #3
 800523a:	e03f      	b.n	80052bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800523c:	4b22      	ldr	r3, [pc, #136]	; (80052c8 <HAL_RCC_OscConfig+0x4e8>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d1f0      	bne.n	800522a <HAL_RCC_OscConfig+0x44a>
 8005248:	e037      	b.n	80052ba <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	699b      	ldr	r3, [r3, #24]
 800524e:	2b01      	cmp	r3, #1
 8005250:	d101      	bne.n	8005256 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e032      	b.n	80052bc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005256:	4b1c      	ldr	r3, [pc, #112]	; (80052c8 <HAL_RCC_OscConfig+0x4e8>)
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	699b      	ldr	r3, [r3, #24]
 8005260:	2b01      	cmp	r3, #1
 8005262:	d028      	beq.n	80052b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800526e:	429a      	cmp	r2, r3
 8005270:	d121      	bne.n	80052b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800527c:	429a      	cmp	r2, r3
 800527e:	d11a      	bne.n	80052b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005286:	4013      	ands	r3, r2
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800528c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800528e:	4293      	cmp	r3, r2
 8005290:	d111      	bne.n	80052b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800529c:	085b      	lsrs	r3, r3, #1
 800529e:	3b01      	subs	r3, #1
 80052a0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d107      	bne.n	80052b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d001      	beq.n	80052ba <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e000      	b.n	80052bc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3718      	adds	r7, #24
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	40007000 	.word	0x40007000
 80052c8:	40023800 	.word	0x40023800
 80052cc:	42470060 	.word	0x42470060

080052d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d101      	bne.n	80052e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e0cc      	b.n	800547e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052e4:	4b68      	ldr	r3, [pc, #416]	; (8005488 <HAL_RCC_ClockConfig+0x1b8>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0307 	and.w	r3, r3, #7
 80052ec:	683a      	ldr	r2, [r7, #0]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d90c      	bls.n	800530c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052f2:	4b65      	ldr	r3, [pc, #404]	; (8005488 <HAL_RCC_ClockConfig+0x1b8>)
 80052f4:	683a      	ldr	r2, [r7, #0]
 80052f6:	b2d2      	uxtb	r2, r2
 80052f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052fa:	4b63      	ldr	r3, [pc, #396]	; (8005488 <HAL_RCC_ClockConfig+0x1b8>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0307 	and.w	r3, r3, #7
 8005302:	683a      	ldr	r2, [r7, #0]
 8005304:	429a      	cmp	r2, r3
 8005306:	d001      	beq.n	800530c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e0b8      	b.n	800547e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0302 	and.w	r3, r3, #2
 8005314:	2b00      	cmp	r3, #0
 8005316:	d020      	beq.n	800535a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0304 	and.w	r3, r3, #4
 8005320:	2b00      	cmp	r3, #0
 8005322:	d005      	beq.n	8005330 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005324:	4b59      	ldr	r3, [pc, #356]	; (800548c <HAL_RCC_ClockConfig+0x1bc>)
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	4a58      	ldr	r2, [pc, #352]	; (800548c <HAL_RCC_ClockConfig+0x1bc>)
 800532a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800532e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 0308 	and.w	r3, r3, #8
 8005338:	2b00      	cmp	r3, #0
 800533a:	d005      	beq.n	8005348 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800533c:	4b53      	ldr	r3, [pc, #332]	; (800548c <HAL_RCC_ClockConfig+0x1bc>)
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	4a52      	ldr	r2, [pc, #328]	; (800548c <HAL_RCC_ClockConfig+0x1bc>)
 8005342:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005346:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005348:	4b50      	ldr	r3, [pc, #320]	; (800548c <HAL_RCC_ClockConfig+0x1bc>)
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	494d      	ldr	r1, [pc, #308]	; (800548c <HAL_RCC_ClockConfig+0x1bc>)
 8005356:	4313      	orrs	r3, r2
 8005358:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0301 	and.w	r3, r3, #1
 8005362:	2b00      	cmp	r3, #0
 8005364:	d044      	beq.n	80053f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	2b01      	cmp	r3, #1
 800536c:	d107      	bne.n	800537e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800536e:	4b47      	ldr	r3, [pc, #284]	; (800548c <HAL_RCC_ClockConfig+0x1bc>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005376:	2b00      	cmp	r3, #0
 8005378:	d119      	bne.n	80053ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e07f      	b.n	800547e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	2b02      	cmp	r3, #2
 8005384:	d003      	beq.n	800538e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800538a:	2b03      	cmp	r3, #3
 800538c:	d107      	bne.n	800539e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800538e:	4b3f      	ldr	r3, [pc, #252]	; (800548c <HAL_RCC_ClockConfig+0x1bc>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005396:	2b00      	cmp	r3, #0
 8005398:	d109      	bne.n	80053ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e06f      	b.n	800547e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800539e:	4b3b      	ldr	r3, [pc, #236]	; (800548c <HAL_RCC_ClockConfig+0x1bc>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0302 	and.w	r3, r3, #2
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d101      	bne.n	80053ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e067      	b.n	800547e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053ae:	4b37      	ldr	r3, [pc, #220]	; (800548c <HAL_RCC_ClockConfig+0x1bc>)
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	f023 0203 	bic.w	r2, r3, #3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	4934      	ldr	r1, [pc, #208]	; (800548c <HAL_RCC_ClockConfig+0x1bc>)
 80053bc:	4313      	orrs	r3, r2
 80053be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053c0:	f7fd f898 	bl	80024f4 <HAL_GetTick>
 80053c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053c6:	e00a      	b.n	80053de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053c8:	f7fd f894 	bl	80024f4 <HAL_GetTick>
 80053cc:	4602      	mov	r2, r0
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d901      	bls.n	80053de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	e04f      	b.n	800547e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053de:	4b2b      	ldr	r3, [pc, #172]	; (800548c <HAL_RCC_ClockConfig+0x1bc>)
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	f003 020c 	and.w	r2, r3, #12
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d1eb      	bne.n	80053c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053f0:	4b25      	ldr	r3, [pc, #148]	; (8005488 <HAL_RCC_ClockConfig+0x1b8>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0307 	and.w	r3, r3, #7
 80053f8:	683a      	ldr	r2, [r7, #0]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d20c      	bcs.n	8005418 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053fe:	4b22      	ldr	r3, [pc, #136]	; (8005488 <HAL_RCC_ClockConfig+0x1b8>)
 8005400:	683a      	ldr	r2, [r7, #0]
 8005402:	b2d2      	uxtb	r2, r2
 8005404:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005406:	4b20      	ldr	r3, [pc, #128]	; (8005488 <HAL_RCC_ClockConfig+0x1b8>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 0307 	and.w	r3, r3, #7
 800540e:	683a      	ldr	r2, [r7, #0]
 8005410:	429a      	cmp	r2, r3
 8005412:	d001      	beq.n	8005418 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e032      	b.n	800547e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0304 	and.w	r3, r3, #4
 8005420:	2b00      	cmp	r3, #0
 8005422:	d008      	beq.n	8005436 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005424:	4b19      	ldr	r3, [pc, #100]	; (800548c <HAL_RCC_ClockConfig+0x1bc>)
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	4916      	ldr	r1, [pc, #88]	; (800548c <HAL_RCC_ClockConfig+0x1bc>)
 8005432:	4313      	orrs	r3, r2
 8005434:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0308 	and.w	r3, r3, #8
 800543e:	2b00      	cmp	r3, #0
 8005440:	d009      	beq.n	8005456 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005442:	4b12      	ldr	r3, [pc, #72]	; (800548c <HAL_RCC_ClockConfig+0x1bc>)
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	00db      	lsls	r3, r3, #3
 8005450:	490e      	ldr	r1, [pc, #56]	; (800548c <HAL_RCC_ClockConfig+0x1bc>)
 8005452:	4313      	orrs	r3, r2
 8005454:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005456:	f000 f821 	bl	800549c <HAL_RCC_GetSysClockFreq>
 800545a:	4602      	mov	r2, r0
 800545c:	4b0b      	ldr	r3, [pc, #44]	; (800548c <HAL_RCC_ClockConfig+0x1bc>)
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	091b      	lsrs	r3, r3, #4
 8005462:	f003 030f 	and.w	r3, r3, #15
 8005466:	490a      	ldr	r1, [pc, #40]	; (8005490 <HAL_RCC_ClockConfig+0x1c0>)
 8005468:	5ccb      	ldrb	r3, [r1, r3]
 800546a:	fa22 f303 	lsr.w	r3, r2, r3
 800546e:	4a09      	ldr	r2, [pc, #36]	; (8005494 <HAL_RCC_ClockConfig+0x1c4>)
 8005470:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005472:	4b09      	ldr	r3, [pc, #36]	; (8005498 <HAL_RCC_ClockConfig+0x1c8>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4618      	mov	r0, r3
 8005478:	f7fc fff8 	bl	800246c <HAL_InitTick>

  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3710      	adds	r7, #16
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	40023c00 	.word	0x40023c00
 800548c:	40023800 	.word	0x40023800
 8005490:	0800756c 	.word	0x0800756c
 8005494:	20000044 	.word	0x20000044
 8005498:	20000048 	.word	0x20000048

0800549c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800549c:	b5b0      	push	{r4, r5, r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80054a2:	2100      	movs	r1, #0
 80054a4:	6079      	str	r1, [r7, #4]
 80054a6:	2100      	movs	r1, #0
 80054a8:	60f9      	str	r1, [r7, #12]
 80054aa:	2100      	movs	r1, #0
 80054ac:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80054ae:	2100      	movs	r1, #0
 80054b0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054b2:	4952      	ldr	r1, [pc, #328]	; (80055fc <HAL_RCC_GetSysClockFreq+0x160>)
 80054b4:	6889      	ldr	r1, [r1, #8]
 80054b6:	f001 010c 	and.w	r1, r1, #12
 80054ba:	2908      	cmp	r1, #8
 80054bc:	d00d      	beq.n	80054da <HAL_RCC_GetSysClockFreq+0x3e>
 80054be:	2908      	cmp	r1, #8
 80054c0:	f200 8094 	bhi.w	80055ec <HAL_RCC_GetSysClockFreq+0x150>
 80054c4:	2900      	cmp	r1, #0
 80054c6:	d002      	beq.n	80054ce <HAL_RCC_GetSysClockFreq+0x32>
 80054c8:	2904      	cmp	r1, #4
 80054ca:	d003      	beq.n	80054d4 <HAL_RCC_GetSysClockFreq+0x38>
 80054cc:	e08e      	b.n	80055ec <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054ce:	4b4c      	ldr	r3, [pc, #304]	; (8005600 <HAL_RCC_GetSysClockFreq+0x164>)
 80054d0:	60bb      	str	r3, [r7, #8]
       break;
 80054d2:	e08e      	b.n	80055f2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054d4:	4b4b      	ldr	r3, [pc, #300]	; (8005604 <HAL_RCC_GetSysClockFreq+0x168>)
 80054d6:	60bb      	str	r3, [r7, #8]
      break;
 80054d8:	e08b      	b.n	80055f2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054da:	4948      	ldr	r1, [pc, #288]	; (80055fc <HAL_RCC_GetSysClockFreq+0x160>)
 80054dc:	6849      	ldr	r1, [r1, #4]
 80054de:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80054e2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054e4:	4945      	ldr	r1, [pc, #276]	; (80055fc <HAL_RCC_GetSysClockFreq+0x160>)
 80054e6:	6849      	ldr	r1, [r1, #4]
 80054e8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80054ec:	2900      	cmp	r1, #0
 80054ee:	d024      	beq.n	800553a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054f0:	4942      	ldr	r1, [pc, #264]	; (80055fc <HAL_RCC_GetSysClockFreq+0x160>)
 80054f2:	6849      	ldr	r1, [r1, #4]
 80054f4:	0989      	lsrs	r1, r1, #6
 80054f6:	4608      	mov	r0, r1
 80054f8:	f04f 0100 	mov.w	r1, #0
 80054fc:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005500:	f04f 0500 	mov.w	r5, #0
 8005504:	ea00 0204 	and.w	r2, r0, r4
 8005508:	ea01 0305 	and.w	r3, r1, r5
 800550c:	493d      	ldr	r1, [pc, #244]	; (8005604 <HAL_RCC_GetSysClockFreq+0x168>)
 800550e:	fb01 f003 	mul.w	r0, r1, r3
 8005512:	2100      	movs	r1, #0
 8005514:	fb01 f102 	mul.w	r1, r1, r2
 8005518:	1844      	adds	r4, r0, r1
 800551a:	493a      	ldr	r1, [pc, #232]	; (8005604 <HAL_RCC_GetSysClockFreq+0x168>)
 800551c:	fba2 0101 	umull	r0, r1, r2, r1
 8005520:	1863      	adds	r3, r4, r1
 8005522:	4619      	mov	r1, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	461a      	mov	r2, r3
 8005528:	f04f 0300 	mov.w	r3, #0
 800552c:	f7fa feb0 	bl	8000290 <__aeabi_uldivmod>
 8005530:	4602      	mov	r2, r0
 8005532:	460b      	mov	r3, r1
 8005534:	4613      	mov	r3, r2
 8005536:	60fb      	str	r3, [r7, #12]
 8005538:	e04a      	b.n	80055d0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800553a:	4b30      	ldr	r3, [pc, #192]	; (80055fc <HAL_RCC_GetSysClockFreq+0x160>)
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	099b      	lsrs	r3, r3, #6
 8005540:	461a      	mov	r2, r3
 8005542:	f04f 0300 	mov.w	r3, #0
 8005546:	f240 10ff 	movw	r0, #511	; 0x1ff
 800554a:	f04f 0100 	mov.w	r1, #0
 800554e:	ea02 0400 	and.w	r4, r2, r0
 8005552:	ea03 0501 	and.w	r5, r3, r1
 8005556:	4620      	mov	r0, r4
 8005558:	4629      	mov	r1, r5
 800555a:	f04f 0200 	mov.w	r2, #0
 800555e:	f04f 0300 	mov.w	r3, #0
 8005562:	014b      	lsls	r3, r1, #5
 8005564:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005568:	0142      	lsls	r2, r0, #5
 800556a:	4610      	mov	r0, r2
 800556c:	4619      	mov	r1, r3
 800556e:	1b00      	subs	r0, r0, r4
 8005570:	eb61 0105 	sbc.w	r1, r1, r5
 8005574:	f04f 0200 	mov.w	r2, #0
 8005578:	f04f 0300 	mov.w	r3, #0
 800557c:	018b      	lsls	r3, r1, #6
 800557e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005582:	0182      	lsls	r2, r0, #6
 8005584:	1a12      	subs	r2, r2, r0
 8005586:	eb63 0301 	sbc.w	r3, r3, r1
 800558a:	f04f 0000 	mov.w	r0, #0
 800558e:	f04f 0100 	mov.w	r1, #0
 8005592:	00d9      	lsls	r1, r3, #3
 8005594:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005598:	00d0      	lsls	r0, r2, #3
 800559a:	4602      	mov	r2, r0
 800559c:	460b      	mov	r3, r1
 800559e:	1912      	adds	r2, r2, r4
 80055a0:	eb45 0303 	adc.w	r3, r5, r3
 80055a4:	f04f 0000 	mov.w	r0, #0
 80055a8:	f04f 0100 	mov.w	r1, #0
 80055ac:	0299      	lsls	r1, r3, #10
 80055ae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80055b2:	0290      	lsls	r0, r2, #10
 80055b4:	4602      	mov	r2, r0
 80055b6:	460b      	mov	r3, r1
 80055b8:	4610      	mov	r0, r2
 80055ba:	4619      	mov	r1, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	461a      	mov	r2, r3
 80055c0:	f04f 0300 	mov.w	r3, #0
 80055c4:	f7fa fe64 	bl	8000290 <__aeabi_uldivmod>
 80055c8:	4602      	mov	r2, r0
 80055ca:	460b      	mov	r3, r1
 80055cc:	4613      	mov	r3, r2
 80055ce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80055d0:	4b0a      	ldr	r3, [pc, #40]	; (80055fc <HAL_RCC_GetSysClockFreq+0x160>)
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	0c1b      	lsrs	r3, r3, #16
 80055d6:	f003 0303 	and.w	r3, r3, #3
 80055da:	3301      	adds	r3, #1
 80055dc:	005b      	lsls	r3, r3, #1
 80055de:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055e8:	60bb      	str	r3, [r7, #8]
      break;
 80055ea:	e002      	b.n	80055f2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80055ec:	4b04      	ldr	r3, [pc, #16]	; (8005600 <HAL_RCC_GetSysClockFreq+0x164>)
 80055ee:	60bb      	str	r3, [r7, #8]
      break;
 80055f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055f2:	68bb      	ldr	r3, [r7, #8]
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3710      	adds	r7, #16
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bdb0      	pop	{r4, r5, r7, pc}
 80055fc:	40023800 	.word	0x40023800
 8005600:	00f42400 	.word	0x00f42400
 8005604:	017d7840 	.word	0x017d7840

08005608 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005608:	b480      	push	{r7}
 800560a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800560c:	4b03      	ldr	r3, [pc, #12]	; (800561c <HAL_RCC_GetHCLKFreq+0x14>)
 800560e:	681b      	ldr	r3, [r3, #0]
}
 8005610:	4618      	mov	r0, r3
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	20000044 	.word	0x20000044

08005620 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005624:	f7ff fff0 	bl	8005608 <HAL_RCC_GetHCLKFreq>
 8005628:	4602      	mov	r2, r0
 800562a:	4b05      	ldr	r3, [pc, #20]	; (8005640 <HAL_RCC_GetPCLK1Freq+0x20>)
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	0a9b      	lsrs	r3, r3, #10
 8005630:	f003 0307 	and.w	r3, r3, #7
 8005634:	4903      	ldr	r1, [pc, #12]	; (8005644 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005636:	5ccb      	ldrb	r3, [r1, r3]
 8005638:	fa22 f303 	lsr.w	r3, r2, r3
}
 800563c:	4618      	mov	r0, r3
 800563e:	bd80      	pop	{r7, pc}
 8005640:	40023800 	.word	0x40023800
 8005644:	0800757c 	.word	0x0800757c

08005648 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800564c:	f7ff ffdc 	bl	8005608 <HAL_RCC_GetHCLKFreq>
 8005650:	4602      	mov	r2, r0
 8005652:	4b05      	ldr	r3, [pc, #20]	; (8005668 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	0b5b      	lsrs	r3, r3, #13
 8005658:	f003 0307 	and.w	r3, r3, #7
 800565c:	4903      	ldr	r1, [pc, #12]	; (800566c <HAL_RCC_GetPCLK2Freq+0x24>)
 800565e:	5ccb      	ldrb	r3, [r1, r3]
 8005660:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005664:	4618      	mov	r0, r3
 8005666:	bd80      	pop	{r7, pc}
 8005668:	40023800 	.word	0x40023800
 800566c:	0800757c 	.word	0x0800757c

08005670 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d101      	bne.n	8005682 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e07b      	b.n	800577a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005686:	2b00      	cmp	r3, #0
 8005688:	d108      	bne.n	800569c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005692:	d009      	beq.n	80056a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	61da      	str	r2, [r3, #28]
 800569a:	e005      	b.n	80056a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d106      	bne.n	80056c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f7fc fd16 	bl	80020f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2202      	movs	r2, #2
 80056cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80056f0:	431a      	orrs	r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056fa:	431a      	orrs	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	f003 0302 	and.w	r3, r3, #2
 8005704:	431a      	orrs	r2, r3
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	f003 0301 	and.w	r3, r3, #1
 800570e:	431a      	orrs	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	699b      	ldr	r3, [r3, #24]
 8005714:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005718:	431a      	orrs	r2, r3
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	69db      	ldr	r3, [r3, #28]
 800571e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005722:	431a      	orrs	r2, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a1b      	ldr	r3, [r3, #32]
 8005728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800572c:	ea42 0103 	orr.w	r1, r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005734:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	430a      	orrs	r2, r1
 800573e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	699b      	ldr	r3, [r3, #24]
 8005744:	0c1b      	lsrs	r3, r3, #16
 8005746:	f003 0104 	and.w	r1, r3, #4
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574e:	f003 0210 	and.w	r2, r3, #16
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	430a      	orrs	r2, r1
 8005758:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	69da      	ldr	r2, [r3, #28]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005768:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005778:	2300      	movs	r3, #0
}
 800577a:	4618      	mov	r0, r3
 800577c:	3708      	adds	r7, #8
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}

08005782 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005782:	b580      	push	{r7, lr}
 8005784:	b088      	sub	sp, #32
 8005786:	af00      	add	r7, sp, #0
 8005788:	60f8      	str	r0, [r7, #12]
 800578a:	60b9      	str	r1, [r7, #8]
 800578c:	603b      	str	r3, [r7, #0]
 800578e:	4613      	mov	r3, r2
 8005790:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005792:	2300      	movs	r3, #0
 8005794:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800579c:	2b01      	cmp	r3, #1
 800579e:	d101      	bne.n	80057a4 <HAL_SPI_Transmit+0x22>
 80057a0:	2302      	movs	r3, #2
 80057a2:	e126      	b.n	80059f2 <HAL_SPI_Transmit+0x270>
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057ac:	f7fc fea2 	bl	80024f4 <HAL_GetTick>
 80057b0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80057b2:	88fb      	ldrh	r3, [r7, #6]
 80057b4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d002      	beq.n	80057c8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80057c2:	2302      	movs	r3, #2
 80057c4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80057c6:	e10b      	b.n	80059e0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d002      	beq.n	80057d4 <HAL_SPI_Transmit+0x52>
 80057ce:	88fb      	ldrh	r3, [r7, #6]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d102      	bne.n	80057da <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80057d8:	e102      	b.n	80059e0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2203      	movs	r2, #3
 80057de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	68ba      	ldr	r2, [r7, #8]
 80057ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	88fa      	ldrh	r2, [r7, #6]
 80057f2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	88fa      	ldrh	r2, [r7, #6]
 80057f8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2200      	movs	r2, #0
 80057fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2200      	movs	r2, #0
 8005804:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2200      	movs	r2, #0
 800580a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2200      	movs	r2, #0
 8005816:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005820:	d10f      	bne.n	8005842 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005830:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005840:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800584c:	2b40      	cmp	r3, #64	; 0x40
 800584e:	d007      	beq.n	8005860 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800585e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005868:	d14b      	bne.n	8005902 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d002      	beq.n	8005878 <HAL_SPI_Transmit+0xf6>
 8005872:	8afb      	ldrh	r3, [r7, #22]
 8005874:	2b01      	cmp	r3, #1
 8005876:	d13e      	bne.n	80058f6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800587c:	881a      	ldrh	r2, [r3, #0]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005888:	1c9a      	adds	r2, r3, #2
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005892:	b29b      	uxth	r3, r3
 8005894:	3b01      	subs	r3, #1
 8005896:	b29a      	uxth	r2, r3
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800589c:	e02b      	b.n	80058f6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	f003 0302 	and.w	r3, r3, #2
 80058a8:	2b02      	cmp	r3, #2
 80058aa:	d112      	bne.n	80058d2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b0:	881a      	ldrh	r2, [r3, #0]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058bc:	1c9a      	adds	r2, r3, #2
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	3b01      	subs	r3, #1
 80058ca:	b29a      	uxth	r2, r3
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	86da      	strh	r2, [r3, #54]	; 0x36
 80058d0:	e011      	b.n	80058f6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058d2:	f7fc fe0f 	bl	80024f4 <HAL_GetTick>
 80058d6:	4602      	mov	r2, r0
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	1ad3      	subs	r3, r2, r3
 80058dc:	683a      	ldr	r2, [r7, #0]
 80058de:	429a      	cmp	r2, r3
 80058e0:	d803      	bhi.n	80058ea <HAL_SPI_Transmit+0x168>
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e8:	d102      	bne.n	80058f0 <HAL_SPI_Transmit+0x16e>
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d102      	bne.n	80058f6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80058f4:	e074      	b.n	80059e0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d1ce      	bne.n	800589e <HAL_SPI_Transmit+0x11c>
 8005900:	e04c      	b.n	800599c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d002      	beq.n	8005910 <HAL_SPI_Transmit+0x18e>
 800590a:	8afb      	ldrh	r3, [r7, #22]
 800590c:	2b01      	cmp	r3, #1
 800590e:	d140      	bne.n	8005992 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	330c      	adds	r3, #12
 800591a:	7812      	ldrb	r2, [r2, #0]
 800591c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005922:	1c5a      	adds	r2, r3, #1
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800592c:	b29b      	uxth	r3, r3
 800592e:	3b01      	subs	r3, #1
 8005930:	b29a      	uxth	r2, r3
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005936:	e02c      	b.n	8005992 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	f003 0302 	and.w	r3, r3, #2
 8005942:	2b02      	cmp	r3, #2
 8005944:	d113      	bne.n	800596e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	330c      	adds	r3, #12
 8005950:	7812      	ldrb	r2, [r2, #0]
 8005952:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005958:	1c5a      	adds	r2, r3, #1
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005962:	b29b      	uxth	r3, r3
 8005964:	3b01      	subs	r3, #1
 8005966:	b29a      	uxth	r2, r3
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	86da      	strh	r2, [r3, #54]	; 0x36
 800596c:	e011      	b.n	8005992 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800596e:	f7fc fdc1 	bl	80024f4 <HAL_GetTick>
 8005972:	4602      	mov	r2, r0
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	683a      	ldr	r2, [r7, #0]
 800597a:	429a      	cmp	r2, r3
 800597c:	d803      	bhi.n	8005986 <HAL_SPI_Transmit+0x204>
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005984:	d102      	bne.n	800598c <HAL_SPI_Transmit+0x20a>
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d102      	bne.n	8005992 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800598c:	2303      	movs	r3, #3
 800598e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005990:	e026      	b.n	80059e0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005996:	b29b      	uxth	r3, r3
 8005998:	2b00      	cmp	r3, #0
 800599a:	d1cd      	bne.n	8005938 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800599c:	69ba      	ldr	r2, [r7, #24]
 800599e:	6839      	ldr	r1, [r7, #0]
 80059a0:	68f8      	ldr	r0, [r7, #12]
 80059a2:	f000 f9df 	bl	8005d64 <SPI_EndRxTxTransaction>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d002      	beq.n	80059b2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2220      	movs	r2, #32
 80059b0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d10a      	bne.n	80059d0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80059ba:	2300      	movs	r3, #0
 80059bc:	613b      	str	r3, [r7, #16]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	613b      	str	r3, [r7, #16]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	613b      	str	r3, [r7, #16]
 80059ce:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d002      	beq.n	80059de <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	77fb      	strb	r3, [r7, #31]
 80059dc:	e000      	b.n	80059e0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80059de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80059f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3720      	adds	r7, #32
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
	...

080059fc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b088      	sub	sp, #32
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	099b      	lsrs	r3, r3, #6
 8005a18:	f003 0301 	and.w	r3, r3, #1
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d10f      	bne.n	8005a40 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00a      	beq.n	8005a40 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	099b      	lsrs	r3, r3, #6
 8005a2e:	f003 0301 	and.w	r3, r3, #1
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d004      	beq.n	8005a40 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	4798      	blx	r3
    return;
 8005a3e:	e0d7      	b.n	8005bf0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	085b      	lsrs	r3, r3, #1
 8005a44:	f003 0301 	and.w	r3, r3, #1
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d00a      	beq.n	8005a62 <HAL_SPI_IRQHandler+0x66>
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	09db      	lsrs	r3, r3, #7
 8005a50:	f003 0301 	and.w	r3, r3, #1
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d004      	beq.n	8005a62 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	4798      	blx	r3
    return;
 8005a60:	e0c6      	b.n	8005bf0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	095b      	lsrs	r3, r3, #5
 8005a66:	f003 0301 	and.w	r3, r3, #1
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d10c      	bne.n	8005a88 <HAL_SPI_IRQHandler+0x8c>
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	099b      	lsrs	r3, r3, #6
 8005a72:	f003 0301 	and.w	r3, r3, #1
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d106      	bne.n	8005a88 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	0a1b      	lsrs	r3, r3, #8
 8005a7e:	f003 0301 	and.w	r3, r3, #1
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f000 80b4 	beq.w	8005bf0 <HAL_SPI_IRQHandler+0x1f4>
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	095b      	lsrs	r3, r3, #5
 8005a8c:	f003 0301 	and.w	r3, r3, #1
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	f000 80ad 	beq.w	8005bf0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	099b      	lsrs	r3, r3, #6
 8005a9a:	f003 0301 	and.w	r3, r3, #1
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d023      	beq.n	8005aea <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	2b03      	cmp	r3, #3
 8005aac:	d011      	beq.n	8005ad2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ab2:	f043 0204 	orr.w	r2, r3, #4
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005aba:	2300      	movs	r3, #0
 8005abc:	617b      	str	r3, [r7, #20]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	617b      	str	r3, [r7, #20]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	617b      	str	r3, [r7, #20]
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	e00b      	b.n	8005aea <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	613b      	str	r3, [r7, #16]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	613b      	str	r3, [r7, #16]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	613b      	str	r3, [r7, #16]
 8005ae6:	693b      	ldr	r3, [r7, #16]
        return;
 8005ae8:	e082      	b.n	8005bf0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	095b      	lsrs	r3, r3, #5
 8005aee:	f003 0301 	and.w	r3, r3, #1
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d014      	beq.n	8005b20 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005afa:	f043 0201 	orr.w	r2, r3, #1
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005b02:	2300      	movs	r3, #0
 8005b04:	60fb      	str	r3, [r7, #12]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	60fb      	str	r3, [r7, #12]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b1c:	601a      	str	r2, [r3, #0]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	0a1b      	lsrs	r3, r3, #8
 8005b24:	f003 0301 	and.w	r3, r3, #1
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d00c      	beq.n	8005b46 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b30:	f043 0208 	orr.w	r2, r3, #8
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005b38:	2300      	movs	r3, #0
 8005b3a:	60bb      	str	r3, [r7, #8]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	60bb      	str	r3, [r7, #8]
 8005b44:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d04f      	beq.n	8005bee <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	685a      	ldr	r2, [r3, #4]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005b5c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2201      	movs	r2, #1
 8005b62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	f003 0302 	and.w	r3, r3, #2
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d104      	bne.n	8005b7a <HAL_SPI_IRQHandler+0x17e>
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	f003 0301 	and.w	r3, r3, #1
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d034      	beq.n	8005be4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	685a      	ldr	r2, [r3, #4]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f022 0203 	bic.w	r2, r2, #3
 8005b88:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d011      	beq.n	8005bb6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b96:	4a18      	ldr	r2, [pc, #96]	; (8005bf8 <HAL_SPI_IRQHandler+0x1fc>)
 8005b98:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f7fc fe1b 	bl	80027da <HAL_DMA_Abort_IT>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d005      	beq.n	8005bb6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d016      	beq.n	8005bec <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bc2:	4a0d      	ldr	r2, [pc, #52]	; (8005bf8 <HAL_SPI_IRQHandler+0x1fc>)
 8005bc4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f7fc fe05 	bl	80027da <HAL_DMA_Abort_IT>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00a      	beq.n	8005bec <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bda:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005be2:	e003      	b.n	8005bec <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f000 f809 	bl	8005bfc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005bea:	e000      	b.n	8005bee <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005bec:	bf00      	nop
    return;
 8005bee:	bf00      	nop
  }
}
 8005bf0:	3720      	adds	r7, #32
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	08005c2d 	.word	0x08005c2d

08005bfc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005c04:	bf00      	nop
 8005c06:	370c      	adds	r7, #12
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c1e:	b2db      	uxtb	r3, r3
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c38:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005c46:	68f8      	ldr	r0, [r7, #12]
 8005c48:	f7ff ffd8 	bl	8005bfc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005c4c:	bf00      	nop
 8005c4e:	3710      	adds	r7, #16
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b088      	sub	sp, #32
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	603b      	str	r3, [r7, #0]
 8005c60:	4613      	mov	r3, r2
 8005c62:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005c64:	f7fc fc46 	bl	80024f4 <HAL_GetTick>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c6c:	1a9b      	subs	r3, r3, r2
 8005c6e:	683a      	ldr	r2, [r7, #0]
 8005c70:	4413      	add	r3, r2
 8005c72:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005c74:	f7fc fc3e 	bl	80024f4 <HAL_GetTick>
 8005c78:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005c7a:	4b39      	ldr	r3, [pc, #228]	; (8005d60 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	015b      	lsls	r3, r3, #5
 8005c80:	0d1b      	lsrs	r3, r3, #20
 8005c82:	69fa      	ldr	r2, [r7, #28]
 8005c84:	fb02 f303 	mul.w	r3, r2, r3
 8005c88:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c8a:	e054      	b.n	8005d36 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c92:	d050      	beq.n	8005d36 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c94:	f7fc fc2e 	bl	80024f4 <HAL_GetTick>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	69fa      	ldr	r2, [r7, #28]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d902      	bls.n	8005caa <SPI_WaitFlagStateUntilTimeout+0x56>
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d13d      	bne.n	8005d26 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	685a      	ldr	r2, [r3, #4]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005cb8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cc2:	d111      	bne.n	8005ce8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ccc:	d004      	beq.n	8005cd8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cd6:	d107      	bne.n	8005ce8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ce6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cf0:	d10f      	bne.n	8005d12 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d00:	601a      	str	r2, [r3, #0]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2201      	movs	r2, #1
 8005d16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005d22:	2303      	movs	r3, #3
 8005d24:	e017      	b.n	8005d56 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d101      	bne.n	8005d30 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	3b01      	subs	r3, #1
 8005d34:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	689a      	ldr	r2, [r3, #8]
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	4013      	ands	r3, r2
 8005d40:	68ba      	ldr	r2, [r7, #8]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	bf0c      	ite	eq
 8005d46:	2301      	moveq	r3, #1
 8005d48:	2300      	movne	r3, #0
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	79fb      	ldrb	r3, [r7, #7]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d19b      	bne.n	8005c8c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3720      	adds	r7, #32
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	20000044 	.word	0x20000044

08005d64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b088      	sub	sp, #32
 8005d68:	af02      	add	r7, sp, #8
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005d70:	4b1b      	ldr	r3, [pc, #108]	; (8005de0 <SPI_EndRxTxTransaction+0x7c>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a1b      	ldr	r2, [pc, #108]	; (8005de4 <SPI_EndRxTxTransaction+0x80>)
 8005d76:	fba2 2303 	umull	r2, r3, r2, r3
 8005d7a:	0d5b      	lsrs	r3, r3, #21
 8005d7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005d80:	fb02 f303 	mul.w	r3, r2, r3
 8005d84:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d8e:	d112      	bne.n	8005db6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	9300      	str	r3, [sp, #0]
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	2200      	movs	r2, #0
 8005d98:	2180      	movs	r1, #128	; 0x80
 8005d9a:	68f8      	ldr	r0, [r7, #12]
 8005d9c:	f7ff ff5a 	bl	8005c54 <SPI_WaitFlagStateUntilTimeout>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d016      	beq.n	8005dd4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005daa:	f043 0220 	orr.w	r2, r3, #32
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005db2:	2303      	movs	r3, #3
 8005db4:	e00f      	b.n	8005dd6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d00a      	beq.n	8005dd2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	3b01      	subs	r3, #1
 8005dc0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dcc:	2b80      	cmp	r3, #128	; 0x80
 8005dce:	d0f2      	beq.n	8005db6 <SPI_EndRxTxTransaction+0x52>
 8005dd0:	e000      	b.n	8005dd4 <SPI_EndRxTxTransaction+0x70>
        break;
 8005dd2:	bf00      	nop
  }

  return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3718      	adds	r7, #24
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	20000044 	.word	0x20000044
 8005de4:	165e9f81 	.word	0x165e9f81

08005de8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d101      	bne.n	8005dfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e03f      	b.n	8005e7a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d106      	bne.n	8005e14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f7fc fa98 	bl	8002344 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2224      	movs	r2, #36	; 0x24
 8005e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	68da      	ldr	r2, [r3, #12]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f000 f929 	bl	8006084 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	691a      	ldr	r2, [r3, #16]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	695a      	ldr	r2, [r3, #20]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68da      	ldr	r2, [r3, #12]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2220      	movs	r2, #32
 8005e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2220      	movs	r2, #32
 8005e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3708      	adds	r7, #8
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}

08005e82 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e82:	b580      	push	{r7, lr}
 8005e84:	b08a      	sub	sp, #40	; 0x28
 8005e86:	af02      	add	r7, sp, #8
 8005e88:	60f8      	str	r0, [r7, #12]
 8005e8a:	60b9      	str	r1, [r7, #8]
 8005e8c:	603b      	str	r3, [r7, #0]
 8005e8e:	4613      	mov	r3, r2
 8005e90:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005e92:	2300      	movs	r3, #0
 8005e94:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	2b20      	cmp	r3, #32
 8005ea0:	d17c      	bne.n	8005f9c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d002      	beq.n	8005eae <HAL_UART_Transmit+0x2c>
 8005ea8:	88fb      	ldrh	r3, [r7, #6]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d101      	bne.n	8005eb2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e075      	b.n	8005f9e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d101      	bne.n	8005ec0 <HAL_UART_Transmit+0x3e>
 8005ebc:	2302      	movs	r3, #2
 8005ebe:	e06e      	b.n	8005f9e <HAL_UART_Transmit+0x11c>
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2221      	movs	r2, #33	; 0x21
 8005ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ed6:	f7fc fb0d 	bl	80024f4 <HAL_GetTick>
 8005eda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	88fa      	ldrh	r2, [r7, #6]
 8005ee0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	88fa      	ldrh	r2, [r7, #6]
 8005ee6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ef0:	d108      	bne.n	8005f04 <HAL_UART_Transmit+0x82>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d104      	bne.n	8005f04 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005efa:	2300      	movs	r3, #0
 8005efc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	61bb      	str	r3, [r7, #24]
 8005f02:	e003      	b.n	8005f0c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005f14:	e02a      	b.n	8005f6c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	9300      	str	r3, [sp, #0]
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	2180      	movs	r1, #128	; 0x80
 8005f20:	68f8      	ldr	r0, [r7, #12]
 8005f22:	f000 f840 	bl	8005fa6 <UART_WaitOnFlagUntilTimeout>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d001      	beq.n	8005f30 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005f2c:	2303      	movs	r3, #3
 8005f2e:	e036      	b.n	8005f9e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d10b      	bne.n	8005f4e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	881b      	ldrh	r3, [r3, #0]
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	3302      	adds	r3, #2
 8005f4a:	61bb      	str	r3, [r7, #24]
 8005f4c:	e007      	b.n	8005f5e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	781a      	ldrb	r2, [r3, #0]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	3b01      	subs	r3, #1
 8005f66:	b29a      	uxth	r2, r3
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d1cf      	bne.n	8005f16 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	9300      	str	r3, [sp, #0]
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	2140      	movs	r1, #64	; 0x40
 8005f80:	68f8      	ldr	r0, [r7, #12]
 8005f82:	f000 f810 	bl	8005fa6 <UART_WaitOnFlagUntilTimeout>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d001      	beq.n	8005f90 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	e006      	b.n	8005f9e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2220      	movs	r2, #32
 8005f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	e000      	b.n	8005f9e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005f9c:	2302      	movs	r3, #2
  }
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3720      	adds	r7, #32
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}

08005fa6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005fa6:	b580      	push	{r7, lr}
 8005fa8:	b090      	sub	sp, #64	; 0x40
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	60f8      	str	r0, [r7, #12]
 8005fae:	60b9      	str	r1, [r7, #8]
 8005fb0:	603b      	str	r3, [r7, #0]
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fb6:	e050      	b.n	800605a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fbe:	d04c      	beq.n	800605a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005fc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d007      	beq.n	8005fd6 <UART_WaitOnFlagUntilTimeout+0x30>
 8005fc6:	f7fc fa95 	bl	80024f4 <HAL_GetTick>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d241      	bcs.n	800605a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	330c      	adds	r3, #12
 8005fdc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe0:	e853 3f00 	ldrex	r3, [r3]
 8005fe4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005fec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	330c      	adds	r3, #12
 8005ff4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ff6:	637a      	str	r2, [r7, #52]	; 0x34
 8005ff8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ffc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ffe:	e841 2300 	strex	r3, r2, [r1]
 8006002:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006006:	2b00      	cmp	r3, #0
 8006008:	d1e5      	bne.n	8005fd6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	3314      	adds	r3, #20
 8006010:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	e853 3f00 	ldrex	r3, [r3]
 8006018:	613b      	str	r3, [r7, #16]
   return(result);
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	f023 0301 	bic.w	r3, r3, #1
 8006020:	63bb      	str	r3, [r7, #56]	; 0x38
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	3314      	adds	r3, #20
 8006028:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800602a:	623a      	str	r2, [r7, #32]
 800602c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602e:	69f9      	ldr	r1, [r7, #28]
 8006030:	6a3a      	ldr	r2, [r7, #32]
 8006032:	e841 2300 	strex	r3, r2, [r1]
 8006036:	61bb      	str	r3, [r7, #24]
   return(result);
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d1e5      	bne.n	800600a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2220      	movs	r2, #32
 8006042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2220      	movs	r2, #32
 800604a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2200      	movs	r2, #0
 8006052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006056:	2303      	movs	r3, #3
 8006058:	e00f      	b.n	800607a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	4013      	ands	r3, r2
 8006064:	68ba      	ldr	r2, [r7, #8]
 8006066:	429a      	cmp	r2, r3
 8006068:	bf0c      	ite	eq
 800606a:	2301      	moveq	r3, #1
 800606c:	2300      	movne	r3, #0
 800606e:	b2db      	uxtb	r3, r3
 8006070:	461a      	mov	r2, r3
 8006072:	79fb      	ldrb	r3, [r7, #7]
 8006074:	429a      	cmp	r2, r3
 8006076:	d09f      	beq.n	8005fb8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3740      	adds	r7, #64	; 0x40
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
	...

08006084 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006088:	b09f      	sub	sp, #124	; 0x7c
 800608a:	af00      	add	r7, sp, #0
 800608c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800608e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	691b      	ldr	r3, [r3, #16]
 8006094:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800609a:	68d9      	ldr	r1, [r3, #12]
 800609c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	ea40 0301 	orr.w	r3, r0, r1
 80060a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80060a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060a8:	689a      	ldr	r2, [r3, #8]
 80060aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	431a      	orrs	r2, r3
 80060b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060b2:	695b      	ldr	r3, [r3, #20]
 80060b4:	431a      	orrs	r2, r3
 80060b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060b8:	69db      	ldr	r3, [r3, #28]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80060be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80060c8:	f021 010c 	bic.w	r1, r1, #12
 80060cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060d2:	430b      	orrs	r3, r1
 80060d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80060d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	695b      	ldr	r3, [r3, #20]
 80060dc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80060e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060e2:	6999      	ldr	r1, [r3, #24]
 80060e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	ea40 0301 	orr.w	r3, r0, r1
 80060ec:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80060ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	4bc5      	ldr	r3, [pc, #788]	; (8006408 <UART_SetConfig+0x384>)
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d004      	beq.n	8006102 <UART_SetConfig+0x7e>
 80060f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	4bc3      	ldr	r3, [pc, #780]	; (800640c <UART_SetConfig+0x388>)
 80060fe:	429a      	cmp	r2, r3
 8006100:	d103      	bne.n	800610a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006102:	f7ff faa1 	bl	8005648 <HAL_RCC_GetPCLK2Freq>
 8006106:	6778      	str	r0, [r7, #116]	; 0x74
 8006108:	e002      	b.n	8006110 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800610a:	f7ff fa89 	bl	8005620 <HAL_RCC_GetPCLK1Freq>
 800610e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006110:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006112:	69db      	ldr	r3, [r3, #28]
 8006114:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006118:	f040 80b6 	bne.w	8006288 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800611c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800611e:	461c      	mov	r4, r3
 8006120:	f04f 0500 	mov.w	r5, #0
 8006124:	4622      	mov	r2, r4
 8006126:	462b      	mov	r3, r5
 8006128:	1891      	adds	r1, r2, r2
 800612a:	6439      	str	r1, [r7, #64]	; 0x40
 800612c:	415b      	adcs	r3, r3
 800612e:	647b      	str	r3, [r7, #68]	; 0x44
 8006130:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006134:	1912      	adds	r2, r2, r4
 8006136:	eb45 0303 	adc.w	r3, r5, r3
 800613a:	f04f 0000 	mov.w	r0, #0
 800613e:	f04f 0100 	mov.w	r1, #0
 8006142:	00d9      	lsls	r1, r3, #3
 8006144:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006148:	00d0      	lsls	r0, r2, #3
 800614a:	4602      	mov	r2, r0
 800614c:	460b      	mov	r3, r1
 800614e:	1911      	adds	r1, r2, r4
 8006150:	6639      	str	r1, [r7, #96]	; 0x60
 8006152:	416b      	adcs	r3, r5
 8006154:	667b      	str	r3, [r7, #100]	; 0x64
 8006156:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	461a      	mov	r2, r3
 800615c:	f04f 0300 	mov.w	r3, #0
 8006160:	1891      	adds	r1, r2, r2
 8006162:	63b9      	str	r1, [r7, #56]	; 0x38
 8006164:	415b      	adcs	r3, r3
 8006166:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006168:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800616c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006170:	f7fa f88e 	bl	8000290 <__aeabi_uldivmod>
 8006174:	4602      	mov	r2, r0
 8006176:	460b      	mov	r3, r1
 8006178:	4ba5      	ldr	r3, [pc, #660]	; (8006410 <UART_SetConfig+0x38c>)
 800617a:	fba3 2302 	umull	r2, r3, r3, r2
 800617e:	095b      	lsrs	r3, r3, #5
 8006180:	011e      	lsls	r6, r3, #4
 8006182:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006184:	461c      	mov	r4, r3
 8006186:	f04f 0500 	mov.w	r5, #0
 800618a:	4622      	mov	r2, r4
 800618c:	462b      	mov	r3, r5
 800618e:	1891      	adds	r1, r2, r2
 8006190:	6339      	str	r1, [r7, #48]	; 0x30
 8006192:	415b      	adcs	r3, r3
 8006194:	637b      	str	r3, [r7, #52]	; 0x34
 8006196:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800619a:	1912      	adds	r2, r2, r4
 800619c:	eb45 0303 	adc.w	r3, r5, r3
 80061a0:	f04f 0000 	mov.w	r0, #0
 80061a4:	f04f 0100 	mov.w	r1, #0
 80061a8:	00d9      	lsls	r1, r3, #3
 80061aa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80061ae:	00d0      	lsls	r0, r2, #3
 80061b0:	4602      	mov	r2, r0
 80061b2:	460b      	mov	r3, r1
 80061b4:	1911      	adds	r1, r2, r4
 80061b6:	65b9      	str	r1, [r7, #88]	; 0x58
 80061b8:	416b      	adcs	r3, r5
 80061ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	461a      	mov	r2, r3
 80061c2:	f04f 0300 	mov.w	r3, #0
 80061c6:	1891      	adds	r1, r2, r2
 80061c8:	62b9      	str	r1, [r7, #40]	; 0x28
 80061ca:	415b      	adcs	r3, r3
 80061cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80061d2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80061d6:	f7fa f85b 	bl	8000290 <__aeabi_uldivmod>
 80061da:	4602      	mov	r2, r0
 80061dc:	460b      	mov	r3, r1
 80061de:	4b8c      	ldr	r3, [pc, #560]	; (8006410 <UART_SetConfig+0x38c>)
 80061e0:	fba3 1302 	umull	r1, r3, r3, r2
 80061e4:	095b      	lsrs	r3, r3, #5
 80061e6:	2164      	movs	r1, #100	; 0x64
 80061e8:	fb01 f303 	mul.w	r3, r1, r3
 80061ec:	1ad3      	subs	r3, r2, r3
 80061ee:	00db      	lsls	r3, r3, #3
 80061f0:	3332      	adds	r3, #50	; 0x32
 80061f2:	4a87      	ldr	r2, [pc, #540]	; (8006410 <UART_SetConfig+0x38c>)
 80061f4:	fba2 2303 	umull	r2, r3, r2, r3
 80061f8:	095b      	lsrs	r3, r3, #5
 80061fa:	005b      	lsls	r3, r3, #1
 80061fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006200:	441e      	add	r6, r3
 8006202:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006204:	4618      	mov	r0, r3
 8006206:	f04f 0100 	mov.w	r1, #0
 800620a:	4602      	mov	r2, r0
 800620c:	460b      	mov	r3, r1
 800620e:	1894      	adds	r4, r2, r2
 8006210:	623c      	str	r4, [r7, #32]
 8006212:	415b      	adcs	r3, r3
 8006214:	627b      	str	r3, [r7, #36]	; 0x24
 8006216:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800621a:	1812      	adds	r2, r2, r0
 800621c:	eb41 0303 	adc.w	r3, r1, r3
 8006220:	f04f 0400 	mov.w	r4, #0
 8006224:	f04f 0500 	mov.w	r5, #0
 8006228:	00dd      	lsls	r5, r3, #3
 800622a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800622e:	00d4      	lsls	r4, r2, #3
 8006230:	4622      	mov	r2, r4
 8006232:	462b      	mov	r3, r5
 8006234:	1814      	adds	r4, r2, r0
 8006236:	653c      	str	r4, [r7, #80]	; 0x50
 8006238:	414b      	adcs	r3, r1
 800623a:	657b      	str	r3, [r7, #84]	; 0x54
 800623c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	461a      	mov	r2, r3
 8006242:	f04f 0300 	mov.w	r3, #0
 8006246:	1891      	adds	r1, r2, r2
 8006248:	61b9      	str	r1, [r7, #24]
 800624a:	415b      	adcs	r3, r3
 800624c:	61fb      	str	r3, [r7, #28]
 800624e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006252:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006256:	f7fa f81b 	bl	8000290 <__aeabi_uldivmod>
 800625a:	4602      	mov	r2, r0
 800625c:	460b      	mov	r3, r1
 800625e:	4b6c      	ldr	r3, [pc, #432]	; (8006410 <UART_SetConfig+0x38c>)
 8006260:	fba3 1302 	umull	r1, r3, r3, r2
 8006264:	095b      	lsrs	r3, r3, #5
 8006266:	2164      	movs	r1, #100	; 0x64
 8006268:	fb01 f303 	mul.w	r3, r1, r3
 800626c:	1ad3      	subs	r3, r2, r3
 800626e:	00db      	lsls	r3, r3, #3
 8006270:	3332      	adds	r3, #50	; 0x32
 8006272:	4a67      	ldr	r2, [pc, #412]	; (8006410 <UART_SetConfig+0x38c>)
 8006274:	fba2 2303 	umull	r2, r3, r2, r3
 8006278:	095b      	lsrs	r3, r3, #5
 800627a:	f003 0207 	and.w	r2, r3, #7
 800627e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4432      	add	r2, r6
 8006284:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006286:	e0b9      	b.n	80063fc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006288:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800628a:	461c      	mov	r4, r3
 800628c:	f04f 0500 	mov.w	r5, #0
 8006290:	4622      	mov	r2, r4
 8006292:	462b      	mov	r3, r5
 8006294:	1891      	adds	r1, r2, r2
 8006296:	6139      	str	r1, [r7, #16]
 8006298:	415b      	adcs	r3, r3
 800629a:	617b      	str	r3, [r7, #20]
 800629c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80062a0:	1912      	adds	r2, r2, r4
 80062a2:	eb45 0303 	adc.w	r3, r5, r3
 80062a6:	f04f 0000 	mov.w	r0, #0
 80062aa:	f04f 0100 	mov.w	r1, #0
 80062ae:	00d9      	lsls	r1, r3, #3
 80062b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80062b4:	00d0      	lsls	r0, r2, #3
 80062b6:	4602      	mov	r2, r0
 80062b8:	460b      	mov	r3, r1
 80062ba:	eb12 0804 	adds.w	r8, r2, r4
 80062be:	eb43 0905 	adc.w	r9, r3, r5
 80062c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	4618      	mov	r0, r3
 80062c8:	f04f 0100 	mov.w	r1, #0
 80062cc:	f04f 0200 	mov.w	r2, #0
 80062d0:	f04f 0300 	mov.w	r3, #0
 80062d4:	008b      	lsls	r3, r1, #2
 80062d6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80062da:	0082      	lsls	r2, r0, #2
 80062dc:	4640      	mov	r0, r8
 80062de:	4649      	mov	r1, r9
 80062e0:	f7f9 ffd6 	bl	8000290 <__aeabi_uldivmod>
 80062e4:	4602      	mov	r2, r0
 80062e6:	460b      	mov	r3, r1
 80062e8:	4b49      	ldr	r3, [pc, #292]	; (8006410 <UART_SetConfig+0x38c>)
 80062ea:	fba3 2302 	umull	r2, r3, r3, r2
 80062ee:	095b      	lsrs	r3, r3, #5
 80062f0:	011e      	lsls	r6, r3, #4
 80062f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062f4:	4618      	mov	r0, r3
 80062f6:	f04f 0100 	mov.w	r1, #0
 80062fa:	4602      	mov	r2, r0
 80062fc:	460b      	mov	r3, r1
 80062fe:	1894      	adds	r4, r2, r2
 8006300:	60bc      	str	r4, [r7, #8]
 8006302:	415b      	adcs	r3, r3
 8006304:	60fb      	str	r3, [r7, #12]
 8006306:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800630a:	1812      	adds	r2, r2, r0
 800630c:	eb41 0303 	adc.w	r3, r1, r3
 8006310:	f04f 0400 	mov.w	r4, #0
 8006314:	f04f 0500 	mov.w	r5, #0
 8006318:	00dd      	lsls	r5, r3, #3
 800631a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800631e:	00d4      	lsls	r4, r2, #3
 8006320:	4622      	mov	r2, r4
 8006322:	462b      	mov	r3, r5
 8006324:	1814      	adds	r4, r2, r0
 8006326:	64bc      	str	r4, [r7, #72]	; 0x48
 8006328:	414b      	adcs	r3, r1
 800632a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800632c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	4618      	mov	r0, r3
 8006332:	f04f 0100 	mov.w	r1, #0
 8006336:	f04f 0200 	mov.w	r2, #0
 800633a:	f04f 0300 	mov.w	r3, #0
 800633e:	008b      	lsls	r3, r1, #2
 8006340:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006344:	0082      	lsls	r2, r0, #2
 8006346:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800634a:	f7f9 ffa1 	bl	8000290 <__aeabi_uldivmod>
 800634e:	4602      	mov	r2, r0
 8006350:	460b      	mov	r3, r1
 8006352:	4b2f      	ldr	r3, [pc, #188]	; (8006410 <UART_SetConfig+0x38c>)
 8006354:	fba3 1302 	umull	r1, r3, r3, r2
 8006358:	095b      	lsrs	r3, r3, #5
 800635a:	2164      	movs	r1, #100	; 0x64
 800635c:	fb01 f303 	mul.w	r3, r1, r3
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	011b      	lsls	r3, r3, #4
 8006364:	3332      	adds	r3, #50	; 0x32
 8006366:	4a2a      	ldr	r2, [pc, #168]	; (8006410 <UART_SetConfig+0x38c>)
 8006368:	fba2 2303 	umull	r2, r3, r2, r3
 800636c:	095b      	lsrs	r3, r3, #5
 800636e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006372:	441e      	add	r6, r3
 8006374:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006376:	4618      	mov	r0, r3
 8006378:	f04f 0100 	mov.w	r1, #0
 800637c:	4602      	mov	r2, r0
 800637e:	460b      	mov	r3, r1
 8006380:	1894      	adds	r4, r2, r2
 8006382:	603c      	str	r4, [r7, #0]
 8006384:	415b      	adcs	r3, r3
 8006386:	607b      	str	r3, [r7, #4]
 8006388:	e9d7 2300 	ldrd	r2, r3, [r7]
 800638c:	1812      	adds	r2, r2, r0
 800638e:	eb41 0303 	adc.w	r3, r1, r3
 8006392:	f04f 0400 	mov.w	r4, #0
 8006396:	f04f 0500 	mov.w	r5, #0
 800639a:	00dd      	lsls	r5, r3, #3
 800639c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80063a0:	00d4      	lsls	r4, r2, #3
 80063a2:	4622      	mov	r2, r4
 80063a4:	462b      	mov	r3, r5
 80063a6:	eb12 0a00 	adds.w	sl, r2, r0
 80063aa:	eb43 0b01 	adc.w	fp, r3, r1
 80063ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	4618      	mov	r0, r3
 80063b4:	f04f 0100 	mov.w	r1, #0
 80063b8:	f04f 0200 	mov.w	r2, #0
 80063bc:	f04f 0300 	mov.w	r3, #0
 80063c0:	008b      	lsls	r3, r1, #2
 80063c2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80063c6:	0082      	lsls	r2, r0, #2
 80063c8:	4650      	mov	r0, sl
 80063ca:	4659      	mov	r1, fp
 80063cc:	f7f9 ff60 	bl	8000290 <__aeabi_uldivmod>
 80063d0:	4602      	mov	r2, r0
 80063d2:	460b      	mov	r3, r1
 80063d4:	4b0e      	ldr	r3, [pc, #56]	; (8006410 <UART_SetConfig+0x38c>)
 80063d6:	fba3 1302 	umull	r1, r3, r3, r2
 80063da:	095b      	lsrs	r3, r3, #5
 80063dc:	2164      	movs	r1, #100	; 0x64
 80063de:	fb01 f303 	mul.w	r3, r1, r3
 80063e2:	1ad3      	subs	r3, r2, r3
 80063e4:	011b      	lsls	r3, r3, #4
 80063e6:	3332      	adds	r3, #50	; 0x32
 80063e8:	4a09      	ldr	r2, [pc, #36]	; (8006410 <UART_SetConfig+0x38c>)
 80063ea:	fba2 2303 	umull	r2, r3, r2, r3
 80063ee:	095b      	lsrs	r3, r3, #5
 80063f0:	f003 020f 	and.w	r2, r3, #15
 80063f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4432      	add	r2, r6
 80063fa:	609a      	str	r2, [r3, #8]
}
 80063fc:	bf00      	nop
 80063fe:	377c      	adds	r7, #124	; 0x7c
 8006400:	46bd      	mov	sp, r7
 8006402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006406:	bf00      	nop
 8006408:	40011000 	.word	0x40011000
 800640c:	40011400 	.word	0x40011400
 8006410:	51eb851f 	.word	0x51eb851f

08006414 <__errno>:
 8006414:	4b01      	ldr	r3, [pc, #4]	; (800641c <__errno+0x8>)
 8006416:	6818      	ldr	r0, [r3, #0]
 8006418:	4770      	bx	lr
 800641a:	bf00      	nop
 800641c:	20000050 	.word	0x20000050

08006420 <__libc_init_array>:
 8006420:	b570      	push	{r4, r5, r6, lr}
 8006422:	4d0d      	ldr	r5, [pc, #52]	; (8006458 <__libc_init_array+0x38>)
 8006424:	4c0d      	ldr	r4, [pc, #52]	; (800645c <__libc_init_array+0x3c>)
 8006426:	1b64      	subs	r4, r4, r5
 8006428:	10a4      	asrs	r4, r4, #2
 800642a:	2600      	movs	r6, #0
 800642c:	42a6      	cmp	r6, r4
 800642e:	d109      	bne.n	8006444 <__libc_init_array+0x24>
 8006430:	4d0b      	ldr	r5, [pc, #44]	; (8006460 <__libc_init_array+0x40>)
 8006432:	4c0c      	ldr	r4, [pc, #48]	; (8006464 <__libc_init_array+0x44>)
 8006434:	f000 fc4e 	bl	8006cd4 <_init>
 8006438:	1b64      	subs	r4, r4, r5
 800643a:	10a4      	asrs	r4, r4, #2
 800643c:	2600      	movs	r6, #0
 800643e:	42a6      	cmp	r6, r4
 8006440:	d105      	bne.n	800644e <__libc_init_array+0x2e>
 8006442:	bd70      	pop	{r4, r5, r6, pc}
 8006444:	f855 3b04 	ldr.w	r3, [r5], #4
 8006448:	4798      	blx	r3
 800644a:	3601      	adds	r6, #1
 800644c:	e7ee      	b.n	800642c <__libc_init_array+0xc>
 800644e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006452:	4798      	blx	r3
 8006454:	3601      	adds	r6, #1
 8006456:	e7f2      	b.n	800643e <__libc_init_array+0x1e>
 8006458:	080075c0 	.word	0x080075c0
 800645c:	080075c0 	.word	0x080075c0
 8006460:	080075c0 	.word	0x080075c0
 8006464:	080075c4 	.word	0x080075c4

08006468 <memset>:
 8006468:	4402      	add	r2, r0
 800646a:	4603      	mov	r3, r0
 800646c:	4293      	cmp	r3, r2
 800646e:	d100      	bne.n	8006472 <memset+0xa>
 8006470:	4770      	bx	lr
 8006472:	f803 1b01 	strb.w	r1, [r3], #1
 8006476:	e7f9      	b.n	800646c <memset+0x4>

08006478 <siprintf>:
 8006478:	b40e      	push	{r1, r2, r3}
 800647a:	b500      	push	{lr}
 800647c:	b09c      	sub	sp, #112	; 0x70
 800647e:	ab1d      	add	r3, sp, #116	; 0x74
 8006480:	9002      	str	r0, [sp, #8]
 8006482:	9006      	str	r0, [sp, #24]
 8006484:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006488:	4809      	ldr	r0, [pc, #36]	; (80064b0 <siprintf+0x38>)
 800648a:	9107      	str	r1, [sp, #28]
 800648c:	9104      	str	r1, [sp, #16]
 800648e:	4909      	ldr	r1, [pc, #36]	; (80064b4 <siprintf+0x3c>)
 8006490:	f853 2b04 	ldr.w	r2, [r3], #4
 8006494:	9105      	str	r1, [sp, #20]
 8006496:	6800      	ldr	r0, [r0, #0]
 8006498:	9301      	str	r3, [sp, #4]
 800649a:	a902      	add	r1, sp, #8
 800649c:	f000 f868 	bl	8006570 <_svfiprintf_r>
 80064a0:	9b02      	ldr	r3, [sp, #8]
 80064a2:	2200      	movs	r2, #0
 80064a4:	701a      	strb	r2, [r3, #0]
 80064a6:	b01c      	add	sp, #112	; 0x70
 80064a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80064ac:	b003      	add	sp, #12
 80064ae:	4770      	bx	lr
 80064b0:	20000050 	.word	0x20000050
 80064b4:	ffff0208 	.word	0xffff0208

080064b8 <__ssputs_r>:
 80064b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064bc:	688e      	ldr	r6, [r1, #8]
 80064be:	429e      	cmp	r6, r3
 80064c0:	4682      	mov	sl, r0
 80064c2:	460c      	mov	r4, r1
 80064c4:	4690      	mov	r8, r2
 80064c6:	461f      	mov	r7, r3
 80064c8:	d838      	bhi.n	800653c <__ssputs_r+0x84>
 80064ca:	898a      	ldrh	r2, [r1, #12]
 80064cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80064d0:	d032      	beq.n	8006538 <__ssputs_r+0x80>
 80064d2:	6825      	ldr	r5, [r4, #0]
 80064d4:	6909      	ldr	r1, [r1, #16]
 80064d6:	eba5 0901 	sub.w	r9, r5, r1
 80064da:	6965      	ldr	r5, [r4, #20]
 80064dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80064e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80064e4:	3301      	adds	r3, #1
 80064e6:	444b      	add	r3, r9
 80064e8:	106d      	asrs	r5, r5, #1
 80064ea:	429d      	cmp	r5, r3
 80064ec:	bf38      	it	cc
 80064ee:	461d      	movcc	r5, r3
 80064f0:	0553      	lsls	r3, r2, #21
 80064f2:	d531      	bpl.n	8006558 <__ssputs_r+0xa0>
 80064f4:	4629      	mov	r1, r5
 80064f6:	f000 fb47 	bl	8006b88 <_malloc_r>
 80064fa:	4606      	mov	r6, r0
 80064fc:	b950      	cbnz	r0, 8006514 <__ssputs_r+0x5c>
 80064fe:	230c      	movs	r3, #12
 8006500:	f8ca 3000 	str.w	r3, [sl]
 8006504:	89a3      	ldrh	r3, [r4, #12]
 8006506:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800650a:	81a3      	strh	r3, [r4, #12]
 800650c:	f04f 30ff 	mov.w	r0, #4294967295
 8006510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006514:	6921      	ldr	r1, [r4, #16]
 8006516:	464a      	mov	r2, r9
 8006518:	f000 fabe 	bl	8006a98 <memcpy>
 800651c:	89a3      	ldrh	r3, [r4, #12]
 800651e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006526:	81a3      	strh	r3, [r4, #12]
 8006528:	6126      	str	r6, [r4, #16]
 800652a:	6165      	str	r5, [r4, #20]
 800652c:	444e      	add	r6, r9
 800652e:	eba5 0509 	sub.w	r5, r5, r9
 8006532:	6026      	str	r6, [r4, #0]
 8006534:	60a5      	str	r5, [r4, #8]
 8006536:	463e      	mov	r6, r7
 8006538:	42be      	cmp	r6, r7
 800653a:	d900      	bls.n	800653e <__ssputs_r+0x86>
 800653c:	463e      	mov	r6, r7
 800653e:	4632      	mov	r2, r6
 8006540:	6820      	ldr	r0, [r4, #0]
 8006542:	4641      	mov	r1, r8
 8006544:	f000 fab6 	bl	8006ab4 <memmove>
 8006548:	68a3      	ldr	r3, [r4, #8]
 800654a:	6822      	ldr	r2, [r4, #0]
 800654c:	1b9b      	subs	r3, r3, r6
 800654e:	4432      	add	r2, r6
 8006550:	60a3      	str	r3, [r4, #8]
 8006552:	6022      	str	r2, [r4, #0]
 8006554:	2000      	movs	r0, #0
 8006556:	e7db      	b.n	8006510 <__ssputs_r+0x58>
 8006558:	462a      	mov	r2, r5
 800655a:	f000 fb6f 	bl	8006c3c <_realloc_r>
 800655e:	4606      	mov	r6, r0
 8006560:	2800      	cmp	r0, #0
 8006562:	d1e1      	bne.n	8006528 <__ssputs_r+0x70>
 8006564:	6921      	ldr	r1, [r4, #16]
 8006566:	4650      	mov	r0, sl
 8006568:	f000 fabe 	bl	8006ae8 <_free_r>
 800656c:	e7c7      	b.n	80064fe <__ssputs_r+0x46>
	...

08006570 <_svfiprintf_r>:
 8006570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006574:	4698      	mov	r8, r3
 8006576:	898b      	ldrh	r3, [r1, #12]
 8006578:	061b      	lsls	r3, r3, #24
 800657a:	b09d      	sub	sp, #116	; 0x74
 800657c:	4607      	mov	r7, r0
 800657e:	460d      	mov	r5, r1
 8006580:	4614      	mov	r4, r2
 8006582:	d50e      	bpl.n	80065a2 <_svfiprintf_r+0x32>
 8006584:	690b      	ldr	r3, [r1, #16]
 8006586:	b963      	cbnz	r3, 80065a2 <_svfiprintf_r+0x32>
 8006588:	2140      	movs	r1, #64	; 0x40
 800658a:	f000 fafd 	bl	8006b88 <_malloc_r>
 800658e:	6028      	str	r0, [r5, #0]
 8006590:	6128      	str	r0, [r5, #16]
 8006592:	b920      	cbnz	r0, 800659e <_svfiprintf_r+0x2e>
 8006594:	230c      	movs	r3, #12
 8006596:	603b      	str	r3, [r7, #0]
 8006598:	f04f 30ff 	mov.w	r0, #4294967295
 800659c:	e0d1      	b.n	8006742 <_svfiprintf_r+0x1d2>
 800659e:	2340      	movs	r3, #64	; 0x40
 80065a0:	616b      	str	r3, [r5, #20]
 80065a2:	2300      	movs	r3, #0
 80065a4:	9309      	str	r3, [sp, #36]	; 0x24
 80065a6:	2320      	movs	r3, #32
 80065a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80065ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80065b0:	2330      	movs	r3, #48	; 0x30
 80065b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800675c <_svfiprintf_r+0x1ec>
 80065b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80065ba:	f04f 0901 	mov.w	r9, #1
 80065be:	4623      	mov	r3, r4
 80065c0:	469a      	mov	sl, r3
 80065c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065c6:	b10a      	cbz	r2, 80065cc <_svfiprintf_r+0x5c>
 80065c8:	2a25      	cmp	r2, #37	; 0x25
 80065ca:	d1f9      	bne.n	80065c0 <_svfiprintf_r+0x50>
 80065cc:	ebba 0b04 	subs.w	fp, sl, r4
 80065d0:	d00b      	beq.n	80065ea <_svfiprintf_r+0x7a>
 80065d2:	465b      	mov	r3, fp
 80065d4:	4622      	mov	r2, r4
 80065d6:	4629      	mov	r1, r5
 80065d8:	4638      	mov	r0, r7
 80065da:	f7ff ff6d 	bl	80064b8 <__ssputs_r>
 80065de:	3001      	adds	r0, #1
 80065e0:	f000 80aa 	beq.w	8006738 <_svfiprintf_r+0x1c8>
 80065e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065e6:	445a      	add	r2, fp
 80065e8:	9209      	str	r2, [sp, #36]	; 0x24
 80065ea:	f89a 3000 	ldrb.w	r3, [sl]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	f000 80a2 	beq.w	8006738 <_svfiprintf_r+0x1c8>
 80065f4:	2300      	movs	r3, #0
 80065f6:	f04f 32ff 	mov.w	r2, #4294967295
 80065fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065fe:	f10a 0a01 	add.w	sl, sl, #1
 8006602:	9304      	str	r3, [sp, #16]
 8006604:	9307      	str	r3, [sp, #28]
 8006606:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800660a:	931a      	str	r3, [sp, #104]	; 0x68
 800660c:	4654      	mov	r4, sl
 800660e:	2205      	movs	r2, #5
 8006610:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006614:	4851      	ldr	r0, [pc, #324]	; (800675c <_svfiprintf_r+0x1ec>)
 8006616:	f7f9 fdeb 	bl	80001f0 <memchr>
 800661a:	9a04      	ldr	r2, [sp, #16]
 800661c:	b9d8      	cbnz	r0, 8006656 <_svfiprintf_r+0xe6>
 800661e:	06d0      	lsls	r0, r2, #27
 8006620:	bf44      	itt	mi
 8006622:	2320      	movmi	r3, #32
 8006624:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006628:	0711      	lsls	r1, r2, #28
 800662a:	bf44      	itt	mi
 800662c:	232b      	movmi	r3, #43	; 0x2b
 800662e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006632:	f89a 3000 	ldrb.w	r3, [sl]
 8006636:	2b2a      	cmp	r3, #42	; 0x2a
 8006638:	d015      	beq.n	8006666 <_svfiprintf_r+0xf6>
 800663a:	9a07      	ldr	r2, [sp, #28]
 800663c:	4654      	mov	r4, sl
 800663e:	2000      	movs	r0, #0
 8006640:	f04f 0c0a 	mov.w	ip, #10
 8006644:	4621      	mov	r1, r4
 8006646:	f811 3b01 	ldrb.w	r3, [r1], #1
 800664a:	3b30      	subs	r3, #48	; 0x30
 800664c:	2b09      	cmp	r3, #9
 800664e:	d94e      	bls.n	80066ee <_svfiprintf_r+0x17e>
 8006650:	b1b0      	cbz	r0, 8006680 <_svfiprintf_r+0x110>
 8006652:	9207      	str	r2, [sp, #28]
 8006654:	e014      	b.n	8006680 <_svfiprintf_r+0x110>
 8006656:	eba0 0308 	sub.w	r3, r0, r8
 800665a:	fa09 f303 	lsl.w	r3, r9, r3
 800665e:	4313      	orrs	r3, r2
 8006660:	9304      	str	r3, [sp, #16]
 8006662:	46a2      	mov	sl, r4
 8006664:	e7d2      	b.n	800660c <_svfiprintf_r+0x9c>
 8006666:	9b03      	ldr	r3, [sp, #12]
 8006668:	1d19      	adds	r1, r3, #4
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	9103      	str	r1, [sp, #12]
 800666e:	2b00      	cmp	r3, #0
 8006670:	bfbb      	ittet	lt
 8006672:	425b      	neglt	r3, r3
 8006674:	f042 0202 	orrlt.w	r2, r2, #2
 8006678:	9307      	strge	r3, [sp, #28]
 800667a:	9307      	strlt	r3, [sp, #28]
 800667c:	bfb8      	it	lt
 800667e:	9204      	strlt	r2, [sp, #16]
 8006680:	7823      	ldrb	r3, [r4, #0]
 8006682:	2b2e      	cmp	r3, #46	; 0x2e
 8006684:	d10c      	bne.n	80066a0 <_svfiprintf_r+0x130>
 8006686:	7863      	ldrb	r3, [r4, #1]
 8006688:	2b2a      	cmp	r3, #42	; 0x2a
 800668a:	d135      	bne.n	80066f8 <_svfiprintf_r+0x188>
 800668c:	9b03      	ldr	r3, [sp, #12]
 800668e:	1d1a      	adds	r2, r3, #4
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	9203      	str	r2, [sp, #12]
 8006694:	2b00      	cmp	r3, #0
 8006696:	bfb8      	it	lt
 8006698:	f04f 33ff 	movlt.w	r3, #4294967295
 800669c:	3402      	adds	r4, #2
 800669e:	9305      	str	r3, [sp, #20]
 80066a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800676c <_svfiprintf_r+0x1fc>
 80066a4:	7821      	ldrb	r1, [r4, #0]
 80066a6:	2203      	movs	r2, #3
 80066a8:	4650      	mov	r0, sl
 80066aa:	f7f9 fda1 	bl	80001f0 <memchr>
 80066ae:	b140      	cbz	r0, 80066c2 <_svfiprintf_r+0x152>
 80066b0:	2340      	movs	r3, #64	; 0x40
 80066b2:	eba0 000a 	sub.w	r0, r0, sl
 80066b6:	fa03 f000 	lsl.w	r0, r3, r0
 80066ba:	9b04      	ldr	r3, [sp, #16]
 80066bc:	4303      	orrs	r3, r0
 80066be:	3401      	adds	r4, #1
 80066c0:	9304      	str	r3, [sp, #16]
 80066c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066c6:	4826      	ldr	r0, [pc, #152]	; (8006760 <_svfiprintf_r+0x1f0>)
 80066c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80066cc:	2206      	movs	r2, #6
 80066ce:	f7f9 fd8f 	bl	80001f0 <memchr>
 80066d2:	2800      	cmp	r0, #0
 80066d4:	d038      	beq.n	8006748 <_svfiprintf_r+0x1d8>
 80066d6:	4b23      	ldr	r3, [pc, #140]	; (8006764 <_svfiprintf_r+0x1f4>)
 80066d8:	bb1b      	cbnz	r3, 8006722 <_svfiprintf_r+0x1b2>
 80066da:	9b03      	ldr	r3, [sp, #12]
 80066dc:	3307      	adds	r3, #7
 80066de:	f023 0307 	bic.w	r3, r3, #7
 80066e2:	3308      	adds	r3, #8
 80066e4:	9303      	str	r3, [sp, #12]
 80066e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066e8:	4433      	add	r3, r6
 80066ea:	9309      	str	r3, [sp, #36]	; 0x24
 80066ec:	e767      	b.n	80065be <_svfiprintf_r+0x4e>
 80066ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80066f2:	460c      	mov	r4, r1
 80066f4:	2001      	movs	r0, #1
 80066f6:	e7a5      	b.n	8006644 <_svfiprintf_r+0xd4>
 80066f8:	2300      	movs	r3, #0
 80066fa:	3401      	adds	r4, #1
 80066fc:	9305      	str	r3, [sp, #20]
 80066fe:	4619      	mov	r1, r3
 8006700:	f04f 0c0a 	mov.w	ip, #10
 8006704:	4620      	mov	r0, r4
 8006706:	f810 2b01 	ldrb.w	r2, [r0], #1
 800670a:	3a30      	subs	r2, #48	; 0x30
 800670c:	2a09      	cmp	r2, #9
 800670e:	d903      	bls.n	8006718 <_svfiprintf_r+0x1a8>
 8006710:	2b00      	cmp	r3, #0
 8006712:	d0c5      	beq.n	80066a0 <_svfiprintf_r+0x130>
 8006714:	9105      	str	r1, [sp, #20]
 8006716:	e7c3      	b.n	80066a0 <_svfiprintf_r+0x130>
 8006718:	fb0c 2101 	mla	r1, ip, r1, r2
 800671c:	4604      	mov	r4, r0
 800671e:	2301      	movs	r3, #1
 8006720:	e7f0      	b.n	8006704 <_svfiprintf_r+0x194>
 8006722:	ab03      	add	r3, sp, #12
 8006724:	9300      	str	r3, [sp, #0]
 8006726:	462a      	mov	r2, r5
 8006728:	4b0f      	ldr	r3, [pc, #60]	; (8006768 <_svfiprintf_r+0x1f8>)
 800672a:	a904      	add	r1, sp, #16
 800672c:	4638      	mov	r0, r7
 800672e:	f3af 8000 	nop.w
 8006732:	1c42      	adds	r2, r0, #1
 8006734:	4606      	mov	r6, r0
 8006736:	d1d6      	bne.n	80066e6 <_svfiprintf_r+0x176>
 8006738:	89ab      	ldrh	r3, [r5, #12]
 800673a:	065b      	lsls	r3, r3, #25
 800673c:	f53f af2c 	bmi.w	8006598 <_svfiprintf_r+0x28>
 8006740:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006742:	b01d      	add	sp, #116	; 0x74
 8006744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006748:	ab03      	add	r3, sp, #12
 800674a:	9300      	str	r3, [sp, #0]
 800674c:	462a      	mov	r2, r5
 800674e:	4b06      	ldr	r3, [pc, #24]	; (8006768 <_svfiprintf_r+0x1f8>)
 8006750:	a904      	add	r1, sp, #16
 8006752:	4638      	mov	r0, r7
 8006754:	f000 f87a 	bl	800684c <_printf_i>
 8006758:	e7eb      	b.n	8006732 <_svfiprintf_r+0x1c2>
 800675a:	bf00      	nop
 800675c:	08007584 	.word	0x08007584
 8006760:	0800758e 	.word	0x0800758e
 8006764:	00000000 	.word	0x00000000
 8006768:	080064b9 	.word	0x080064b9
 800676c:	0800758a 	.word	0x0800758a

08006770 <_printf_common>:
 8006770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006774:	4616      	mov	r6, r2
 8006776:	4699      	mov	r9, r3
 8006778:	688a      	ldr	r2, [r1, #8]
 800677a:	690b      	ldr	r3, [r1, #16]
 800677c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006780:	4293      	cmp	r3, r2
 8006782:	bfb8      	it	lt
 8006784:	4613      	movlt	r3, r2
 8006786:	6033      	str	r3, [r6, #0]
 8006788:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800678c:	4607      	mov	r7, r0
 800678e:	460c      	mov	r4, r1
 8006790:	b10a      	cbz	r2, 8006796 <_printf_common+0x26>
 8006792:	3301      	adds	r3, #1
 8006794:	6033      	str	r3, [r6, #0]
 8006796:	6823      	ldr	r3, [r4, #0]
 8006798:	0699      	lsls	r1, r3, #26
 800679a:	bf42      	ittt	mi
 800679c:	6833      	ldrmi	r3, [r6, #0]
 800679e:	3302      	addmi	r3, #2
 80067a0:	6033      	strmi	r3, [r6, #0]
 80067a2:	6825      	ldr	r5, [r4, #0]
 80067a4:	f015 0506 	ands.w	r5, r5, #6
 80067a8:	d106      	bne.n	80067b8 <_printf_common+0x48>
 80067aa:	f104 0a19 	add.w	sl, r4, #25
 80067ae:	68e3      	ldr	r3, [r4, #12]
 80067b0:	6832      	ldr	r2, [r6, #0]
 80067b2:	1a9b      	subs	r3, r3, r2
 80067b4:	42ab      	cmp	r3, r5
 80067b6:	dc26      	bgt.n	8006806 <_printf_common+0x96>
 80067b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80067bc:	1e13      	subs	r3, r2, #0
 80067be:	6822      	ldr	r2, [r4, #0]
 80067c0:	bf18      	it	ne
 80067c2:	2301      	movne	r3, #1
 80067c4:	0692      	lsls	r2, r2, #26
 80067c6:	d42b      	bmi.n	8006820 <_printf_common+0xb0>
 80067c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80067cc:	4649      	mov	r1, r9
 80067ce:	4638      	mov	r0, r7
 80067d0:	47c0      	blx	r8
 80067d2:	3001      	adds	r0, #1
 80067d4:	d01e      	beq.n	8006814 <_printf_common+0xa4>
 80067d6:	6823      	ldr	r3, [r4, #0]
 80067d8:	68e5      	ldr	r5, [r4, #12]
 80067da:	6832      	ldr	r2, [r6, #0]
 80067dc:	f003 0306 	and.w	r3, r3, #6
 80067e0:	2b04      	cmp	r3, #4
 80067e2:	bf08      	it	eq
 80067e4:	1aad      	subeq	r5, r5, r2
 80067e6:	68a3      	ldr	r3, [r4, #8]
 80067e8:	6922      	ldr	r2, [r4, #16]
 80067ea:	bf0c      	ite	eq
 80067ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067f0:	2500      	movne	r5, #0
 80067f2:	4293      	cmp	r3, r2
 80067f4:	bfc4      	itt	gt
 80067f6:	1a9b      	subgt	r3, r3, r2
 80067f8:	18ed      	addgt	r5, r5, r3
 80067fa:	2600      	movs	r6, #0
 80067fc:	341a      	adds	r4, #26
 80067fe:	42b5      	cmp	r5, r6
 8006800:	d11a      	bne.n	8006838 <_printf_common+0xc8>
 8006802:	2000      	movs	r0, #0
 8006804:	e008      	b.n	8006818 <_printf_common+0xa8>
 8006806:	2301      	movs	r3, #1
 8006808:	4652      	mov	r2, sl
 800680a:	4649      	mov	r1, r9
 800680c:	4638      	mov	r0, r7
 800680e:	47c0      	blx	r8
 8006810:	3001      	adds	r0, #1
 8006812:	d103      	bne.n	800681c <_printf_common+0xac>
 8006814:	f04f 30ff 	mov.w	r0, #4294967295
 8006818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800681c:	3501      	adds	r5, #1
 800681e:	e7c6      	b.n	80067ae <_printf_common+0x3e>
 8006820:	18e1      	adds	r1, r4, r3
 8006822:	1c5a      	adds	r2, r3, #1
 8006824:	2030      	movs	r0, #48	; 0x30
 8006826:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800682a:	4422      	add	r2, r4
 800682c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006830:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006834:	3302      	adds	r3, #2
 8006836:	e7c7      	b.n	80067c8 <_printf_common+0x58>
 8006838:	2301      	movs	r3, #1
 800683a:	4622      	mov	r2, r4
 800683c:	4649      	mov	r1, r9
 800683e:	4638      	mov	r0, r7
 8006840:	47c0      	blx	r8
 8006842:	3001      	adds	r0, #1
 8006844:	d0e6      	beq.n	8006814 <_printf_common+0xa4>
 8006846:	3601      	adds	r6, #1
 8006848:	e7d9      	b.n	80067fe <_printf_common+0x8e>
	...

0800684c <_printf_i>:
 800684c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006850:	460c      	mov	r4, r1
 8006852:	4691      	mov	r9, r2
 8006854:	7e27      	ldrb	r7, [r4, #24]
 8006856:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006858:	2f78      	cmp	r7, #120	; 0x78
 800685a:	4680      	mov	r8, r0
 800685c:	469a      	mov	sl, r3
 800685e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006862:	d807      	bhi.n	8006874 <_printf_i+0x28>
 8006864:	2f62      	cmp	r7, #98	; 0x62
 8006866:	d80a      	bhi.n	800687e <_printf_i+0x32>
 8006868:	2f00      	cmp	r7, #0
 800686a:	f000 80d8 	beq.w	8006a1e <_printf_i+0x1d2>
 800686e:	2f58      	cmp	r7, #88	; 0x58
 8006870:	f000 80a3 	beq.w	80069ba <_printf_i+0x16e>
 8006874:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006878:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800687c:	e03a      	b.n	80068f4 <_printf_i+0xa8>
 800687e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006882:	2b15      	cmp	r3, #21
 8006884:	d8f6      	bhi.n	8006874 <_printf_i+0x28>
 8006886:	a001      	add	r0, pc, #4	; (adr r0, 800688c <_printf_i+0x40>)
 8006888:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800688c:	080068e5 	.word	0x080068e5
 8006890:	080068f9 	.word	0x080068f9
 8006894:	08006875 	.word	0x08006875
 8006898:	08006875 	.word	0x08006875
 800689c:	08006875 	.word	0x08006875
 80068a0:	08006875 	.word	0x08006875
 80068a4:	080068f9 	.word	0x080068f9
 80068a8:	08006875 	.word	0x08006875
 80068ac:	08006875 	.word	0x08006875
 80068b0:	08006875 	.word	0x08006875
 80068b4:	08006875 	.word	0x08006875
 80068b8:	08006a05 	.word	0x08006a05
 80068bc:	08006929 	.word	0x08006929
 80068c0:	080069e7 	.word	0x080069e7
 80068c4:	08006875 	.word	0x08006875
 80068c8:	08006875 	.word	0x08006875
 80068cc:	08006a27 	.word	0x08006a27
 80068d0:	08006875 	.word	0x08006875
 80068d4:	08006929 	.word	0x08006929
 80068d8:	08006875 	.word	0x08006875
 80068dc:	08006875 	.word	0x08006875
 80068e0:	080069ef 	.word	0x080069ef
 80068e4:	680b      	ldr	r3, [r1, #0]
 80068e6:	1d1a      	adds	r2, r3, #4
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	600a      	str	r2, [r1, #0]
 80068ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80068f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80068f4:	2301      	movs	r3, #1
 80068f6:	e0a3      	b.n	8006a40 <_printf_i+0x1f4>
 80068f8:	6825      	ldr	r5, [r4, #0]
 80068fa:	6808      	ldr	r0, [r1, #0]
 80068fc:	062e      	lsls	r6, r5, #24
 80068fe:	f100 0304 	add.w	r3, r0, #4
 8006902:	d50a      	bpl.n	800691a <_printf_i+0xce>
 8006904:	6805      	ldr	r5, [r0, #0]
 8006906:	600b      	str	r3, [r1, #0]
 8006908:	2d00      	cmp	r5, #0
 800690a:	da03      	bge.n	8006914 <_printf_i+0xc8>
 800690c:	232d      	movs	r3, #45	; 0x2d
 800690e:	426d      	negs	r5, r5
 8006910:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006914:	485e      	ldr	r0, [pc, #376]	; (8006a90 <_printf_i+0x244>)
 8006916:	230a      	movs	r3, #10
 8006918:	e019      	b.n	800694e <_printf_i+0x102>
 800691a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800691e:	6805      	ldr	r5, [r0, #0]
 8006920:	600b      	str	r3, [r1, #0]
 8006922:	bf18      	it	ne
 8006924:	b22d      	sxthne	r5, r5
 8006926:	e7ef      	b.n	8006908 <_printf_i+0xbc>
 8006928:	680b      	ldr	r3, [r1, #0]
 800692a:	6825      	ldr	r5, [r4, #0]
 800692c:	1d18      	adds	r0, r3, #4
 800692e:	6008      	str	r0, [r1, #0]
 8006930:	0628      	lsls	r0, r5, #24
 8006932:	d501      	bpl.n	8006938 <_printf_i+0xec>
 8006934:	681d      	ldr	r5, [r3, #0]
 8006936:	e002      	b.n	800693e <_printf_i+0xf2>
 8006938:	0669      	lsls	r1, r5, #25
 800693a:	d5fb      	bpl.n	8006934 <_printf_i+0xe8>
 800693c:	881d      	ldrh	r5, [r3, #0]
 800693e:	4854      	ldr	r0, [pc, #336]	; (8006a90 <_printf_i+0x244>)
 8006940:	2f6f      	cmp	r7, #111	; 0x6f
 8006942:	bf0c      	ite	eq
 8006944:	2308      	moveq	r3, #8
 8006946:	230a      	movne	r3, #10
 8006948:	2100      	movs	r1, #0
 800694a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800694e:	6866      	ldr	r6, [r4, #4]
 8006950:	60a6      	str	r6, [r4, #8]
 8006952:	2e00      	cmp	r6, #0
 8006954:	bfa2      	ittt	ge
 8006956:	6821      	ldrge	r1, [r4, #0]
 8006958:	f021 0104 	bicge.w	r1, r1, #4
 800695c:	6021      	strge	r1, [r4, #0]
 800695e:	b90d      	cbnz	r5, 8006964 <_printf_i+0x118>
 8006960:	2e00      	cmp	r6, #0
 8006962:	d04d      	beq.n	8006a00 <_printf_i+0x1b4>
 8006964:	4616      	mov	r6, r2
 8006966:	fbb5 f1f3 	udiv	r1, r5, r3
 800696a:	fb03 5711 	mls	r7, r3, r1, r5
 800696e:	5dc7      	ldrb	r7, [r0, r7]
 8006970:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006974:	462f      	mov	r7, r5
 8006976:	42bb      	cmp	r3, r7
 8006978:	460d      	mov	r5, r1
 800697a:	d9f4      	bls.n	8006966 <_printf_i+0x11a>
 800697c:	2b08      	cmp	r3, #8
 800697e:	d10b      	bne.n	8006998 <_printf_i+0x14c>
 8006980:	6823      	ldr	r3, [r4, #0]
 8006982:	07df      	lsls	r7, r3, #31
 8006984:	d508      	bpl.n	8006998 <_printf_i+0x14c>
 8006986:	6923      	ldr	r3, [r4, #16]
 8006988:	6861      	ldr	r1, [r4, #4]
 800698a:	4299      	cmp	r1, r3
 800698c:	bfde      	ittt	le
 800698e:	2330      	movle	r3, #48	; 0x30
 8006990:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006994:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006998:	1b92      	subs	r2, r2, r6
 800699a:	6122      	str	r2, [r4, #16]
 800699c:	f8cd a000 	str.w	sl, [sp]
 80069a0:	464b      	mov	r3, r9
 80069a2:	aa03      	add	r2, sp, #12
 80069a4:	4621      	mov	r1, r4
 80069a6:	4640      	mov	r0, r8
 80069a8:	f7ff fee2 	bl	8006770 <_printf_common>
 80069ac:	3001      	adds	r0, #1
 80069ae:	d14c      	bne.n	8006a4a <_printf_i+0x1fe>
 80069b0:	f04f 30ff 	mov.w	r0, #4294967295
 80069b4:	b004      	add	sp, #16
 80069b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069ba:	4835      	ldr	r0, [pc, #212]	; (8006a90 <_printf_i+0x244>)
 80069bc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80069c0:	6823      	ldr	r3, [r4, #0]
 80069c2:	680e      	ldr	r6, [r1, #0]
 80069c4:	061f      	lsls	r7, r3, #24
 80069c6:	f856 5b04 	ldr.w	r5, [r6], #4
 80069ca:	600e      	str	r6, [r1, #0]
 80069cc:	d514      	bpl.n	80069f8 <_printf_i+0x1ac>
 80069ce:	07d9      	lsls	r1, r3, #31
 80069d0:	bf44      	itt	mi
 80069d2:	f043 0320 	orrmi.w	r3, r3, #32
 80069d6:	6023      	strmi	r3, [r4, #0]
 80069d8:	b91d      	cbnz	r5, 80069e2 <_printf_i+0x196>
 80069da:	6823      	ldr	r3, [r4, #0]
 80069dc:	f023 0320 	bic.w	r3, r3, #32
 80069e0:	6023      	str	r3, [r4, #0]
 80069e2:	2310      	movs	r3, #16
 80069e4:	e7b0      	b.n	8006948 <_printf_i+0xfc>
 80069e6:	6823      	ldr	r3, [r4, #0]
 80069e8:	f043 0320 	orr.w	r3, r3, #32
 80069ec:	6023      	str	r3, [r4, #0]
 80069ee:	2378      	movs	r3, #120	; 0x78
 80069f0:	4828      	ldr	r0, [pc, #160]	; (8006a94 <_printf_i+0x248>)
 80069f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80069f6:	e7e3      	b.n	80069c0 <_printf_i+0x174>
 80069f8:	065e      	lsls	r6, r3, #25
 80069fa:	bf48      	it	mi
 80069fc:	b2ad      	uxthmi	r5, r5
 80069fe:	e7e6      	b.n	80069ce <_printf_i+0x182>
 8006a00:	4616      	mov	r6, r2
 8006a02:	e7bb      	b.n	800697c <_printf_i+0x130>
 8006a04:	680b      	ldr	r3, [r1, #0]
 8006a06:	6826      	ldr	r6, [r4, #0]
 8006a08:	6960      	ldr	r0, [r4, #20]
 8006a0a:	1d1d      	adds	r5, r3, #4
 8006a0c:	600d      	str	r5, [r1, #0]
 8006a0e:	0635      	lsls	r5, r6, #24
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	d501      	bpl.n	8006a18 <_printf_i+0x1cc>
 8006a14:	6018      	str	r0, [r3, #0]
 8006a16:	e002      	b.n	8006a1e <_printf_i+0x1d2>
 8006a18:	0671      	lsls	r1, r6, #25
 8006a1a:	d5fb      	bpl.n	8006a14 <_printf_i+0x1c8>
 8006a1c:	8018      	strh	r0, [r3, #0]
 8006a1e:	2300      	movs	r3, #0
 8006a20:	6123      	str	r3, [r4, #16]
 8006a22:	4616      	mov	r6, r2
 8006a24:	e7ba      	b.n	800699c <_printf_i+0x150>
 8006a26:	680b      	ldr	r3, [r1, #0]
 8006a28:	1d1a      	adds	r2, r3, #4
 8006a2a:	600a      	str	r2, [r1, #0]
 8006a2c:	681e      	ldr	r6, [r3, #0]
 8006a2e:	6862      	ldr	r2, [r4, #4]
 8006a30:	2100      	movs	r1, #0
 8006a32:	4630      	mov	r0, r6
 8006a34:	f7f9 fbdc 	bl	80001f0 <memchr>
 8006a38:	b108      	cbz	r0, 8006a3e <_printf_i+0x1f2>
 8006a3a:	1b80      	subs	r0, r0, r6
 8006a3c:	6060      	str	r0, [r4, #4]
 8006a3e:	6863      	ldr	r3, [r4, #4]
 8006a40:	6123      	str	r3, [r4, #16]
 8006a42:	2300      	movs	r3, #0
 8006a44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a48:	e7a8      	b.n	800699c <_printf_i+0x150>
 8006a4a:	6923      	ldr	r3, [r4, #16]
 8006a4c:	4632      	mov	r2, r6
 8006a4e:	4649      	mov	r1, r9
 8006a50:	4640      	mov	r0, r8
 8006a52:	47d0      	blx	sl
 8006a54:	3001      	adds	r0, #1
 8006a56:	d0ab      	beq.n	80069b0 <_printf_i+0x164>
 8006a58:	6823      	ldr	r3, [r4, #0]
 8006a5a:	079b      	lsls	r3, r3, #30
 8006a5c:	d413      	bmi.n	8006a86 <_printf_i+0x23a>
 8006a5e:	68e0      	ldr	r0, [r4, #12]
 8006a60:	9b03      	ldr	r3, [sp, #12]
 8006a62:	4298      	cmp	r0, r3
 8006a64:	bfb8      	it	lt
 8006a66:	4618      	movlt	r0, r3
 8006a68:	e7a4      	b.n	80069b4 <_printf_i+0x168>
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	4632      	mov	r2, r6
 8006a6e:	4649      	mov	r1, r9
 8006a70:	4640      	mov	r0, r8
 8006a72:	47d0      	blx	sl
 8006a74:	3001      	adds	r0, #1
 8006a76:	d09b      	beq.n	80069b0 <_printf_i+0x164>
 8006a78:	3501      	adds	r5, #1
 8006a7a:	68e3      	ldr	r3, [r4, #12]
 8006a7c:	9903      	ldr	r1, [sp, #12]
 8006a7e:	1a5b      	subs	r3, r3, r1
 8006a80:	42ab      	cmp	r3, r5
 8006a82:	dcf2      	bgt.n	8006a6a <_printf_i+0x21e>
 8006a84:	e7eb      	b.n	8006a5e <_printf_i+0x212>
 8006a86:	2500      	movs	r5, #0
 8006a88:	f104 0619 	add.w	r6, r4, #25
 8006a8c:	e7f5      	b.n	8006a7a <_printf_i+0x22e>
 8006a8e:	bf00      	nop
 8006a90:	08007595 	.word	0x08007595
 8006a94:	080075a6 	.word	0x080075a6

08006a98 <memcpy>:
 8006a98:	440a      	add	r2, r1
 8006a9a:	4291      	cmp	r1, r2
 8006a9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006aa0:	d100      	bne.n	8006aa4 <memcpy+0xc>
 8006aa2:	4770      	bx	lr
 8006aa4:	b510      	push	{r4, lr}
 8006aa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006aaa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006aae:	4291      	cmp	r1, r2
 8006ab0:	d1f9      	bne.n	8006aa6 <memcpy+0xe>
 8006ab2:	bd10      	pop	{r4, pc}

08006ab4 <memmove>:
 8006ab4:	4288      	cmp	r0, r1
 8006ab6:	b510      	push	{r4, lr}
 8006ab8:	eb01 0402 	add.w	r4, r1, r2
 8006abc:	d902      	bls.n	8006ac4 <memmove+0x10>
 8006abe:	4284      	cmp	r4, r0
 8006ac0:	4623      	mov	r3, r4
 8006ac2:	d807      	bhi.n	8006ad4 <memmove+0x20>
 8006ac4:	1e43      	subs	r3, r0, #1
 8006ac6:	42a1      	cmp	r1, r4
 8006ac8:	d008      	beq.n	8006adc <memmove+0x28>
 8006aca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ace:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006ad2:	e7f8      	b.n	8006ac6 <memmove+0x12>
 8006ad4:	4402      	add	r2, r0
 8006ad6:	4601      	mov	r1, r0
 8006ad8:	428a      	cmp	r2, r1
 8006ada:	d100      	bne.n	8006ade <memmove+0x2a>
 8006adc:	bd10      	pop	{r4, pc}
 8006ade:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006ae2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006ae6:	e7f7      	b.n	8006ad8 <memmove+0x24>

08006ae8 <_free_r>:
 8006ae8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006aea:	2900      	cmp	r1, #0
 8006aec:	d048      	beq.n	8006b80 <_free_r+0x98>
 8006aee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006af2:	9001      	str	r0, [sp, #4]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	f1a1 0404 	sub.w	r4, r1, #4
 8006afa:	bfb8      	it	lt
 8006afc:	18e4      	addlt	r4, r4, r3
 8006afe:	f000 f8d3 	bl	8006ca8 <__malloc_lock>
 8006b02:	4a20      	ldr	r2, [pc, #128]	; (8006b84 <_free_r+0x9c>)
 8006b04:	9801      	ldr	r0, [sp, #4]
 8006b06:	6813      	ldr	r3, [r2, #0]
 8006b08:	4615      	mov	r5, r2
 8006b0a:	b933      	cbnz	r3, 8006b1a <_free_r+0x32>
 8006b0c:	6063      	str	r3, [r4, #4]
 8006b0e:	6014      	str	r4, [r2, #0]
 8006b10:	b003      	add	sp, #12
 8006b12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b16:	f000 b8cd 	b.w	8006cb4 <__malloc_unlock>
 8006b1a:	42a3      	cmp	r3, r4
 8006b1c:	d90b      	bls.n	8006b36 <_free_r+0x4e>
 8006b1e:	6821      	ldr	r1, [r4, #0]
 8006b20:	1862      	adds	r2, r4, r1
 8006b22:	4293      	cmp	r3, r2
 8006b24:	bf04      	itt	eq
 8006b26:	681a      	ldreq	r2, [r3, #0]
 8006b28:	685b      	ldreq	r3, [r3, #4]
 8006b2a:	6063      	str	r3, [r4, #4]
 8006b2c:	bf04      	itt	eq
 8006b2e:	1852      	addeq	r2, r2, r1
 8006b30:	6022      	streq	r2, [r4, #0]
 8006b32:	602c      	str	r4, [r5, #0]
 8006b34:	e7ec      	b.n	8006b10 <_free_r+0x28>
 8006b36:	461a      	mov	r2, r3
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	b10b      	cbz	r3, 8006b40 <_free_r+0x58>
 8006b3c:	42a3      	cmp	r3, r4
 8006b3e:	d9fa      	bls.n	8006b36 <_free_r+0x4e>
 8006b40:	6811      	ldr	r1, [r2, #0]
 8006b42:	1855      	adds	r5, r2, r1
 8006b44:	42a5      	cmp	r5, r4
 8006b46:	d10b      	bne.n	8006b60 <_free_r+0x78>
 8006b48:	6824      	ldr	r4, [r4, #0]
 8006b4a:	4421      	add	r1, r4
 8006b4c:	1854      	adds	r4, r2, r1
 8006b4e:	42a3      	cmp	r3, r4
 8006b50:	6011      	str	r1, [r2, #0]
 8006b52:	d1dd      	bne.n	8006b10 <_free_r+0x28>
 8006b54:	681c      	ldr	r4, [r3, #0]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	6053      	str	r3, [r2, #4]
 8006b5a:	4421      	add	r1, r4
 8006b5c:	6011      	str	r1, [r2, #0]
 8006b5e:	e7d7      	b.n	8006b10 <_free_r+0x28>
 8006b60:	d902      	bls.n	8006b68 <_free_r+0x80>
 8006b62:	230c      	movs	r3, #12
 8006b64:	6003      	str	r3, [r0, #0]
 8006b66:	e7d3      	b.n	8006b10 <_free_r+0x28>
 8006b68:	6825      	ldr	r5, [r4, #0]
 8006b6a:	1961      	adds	r1, r4, r5
 8006b6c:	428b      	cmp	r3, r1
 8006b6e:	bf04      	itt	eq
 8006b70:	6819      	ldreq	r1, [r3, #0]
 8006b72:	685b      	ldreq	r3, [r3, #4]
 8006b74:	6063      	str	r3, [r4, #4]
 8006b76:	bf04      	itt	eq
 8006b78:	1949      	addeq	r1, r1, r5
 8006b7a:	6021      	streq	r1, [r4, #0]
 8006b7c:	6054      	str	r4, [r2, #4]
 8006b7e:	e7c7      	b.n	8006b10 <_free_r+0x28>
 8006b80:	b003      	add	sp, #12
 8006b82:	bd30      	pop	{r4, r5, pc}
 8006b84:	2000059c 	.word	0x2000059c

08006b88 <_malloc_r>:
 8006b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b8a:	1ccd      	adds	r5, r1, #3
 8006b8c:	f025 0503 	bic.w	r5, r5, #3
 8006b90:	3508      	adds	r5, #8
 8006b92:	2d0c      	cmp	r5, #12
 8006b94:	bf38      	it	cc
 8006b96:	250c      	movcc	r5, #12
 8006b98:	2d00      	cmp	r5, #0
 8006b9a:	4606      	mov	r6, r0
 8006b9c:	db01      	blt.n	8006ba2 <_malloc_r+0x1a>
 8006b9e:	42a9      	cmp	r1, r5
 8006ba0:	d903      	bls.n	8006baa <_malloc_r+0x22>
 8006ba2:	230c      	movs	r3, #12
 8006ba4:	6033      	str	r3, [r6, #0]
 8006ba6:	2000      	movs	r0, #0
 8006ba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006baa:	f000 f87d 	bl	8006ca8 <__malloc_lock>
 8006bae:	4921      	ldr	r1, [pc, #132]	; (8006c34 <_malloc_r+0xac>)
 8006bb0:	680a      	ldr	r2, [r1, #0]
 8006bb2:	4614      	mov	r4, r2
 8006bb4:	b99c      	cbnz	r4, 8006bde <_malloc_r+0x56>
 8006bb6:	4f20      	ldr	r7, [pc, #128]	; (8006c38 <_malloc_r+0xb0>)
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	b923      	cbnz	r3, 8006bc6 <_malloc_r+0x3e>
 8006bbc:	4621      	mov	r1, r4
 8006bbe:	4630      	mov	r0, r6
 8006bc0:	f000 f862 	bl	8006c88 <_sbrk_r>
 8006bc4:	6038      	str	r0, [r7, #0]
 8006bc6:	4629      	mov	r1, r5
 8006bc8:	4630      	mov	r0, r6
 8006bca:	f000 f85d 	bl	8006c88 <_sbrk_r>
 8006bce:	1c43      	adds	r3, r0, #1
 8006bd0:	d123      	bne.n	8006c1a <_malloc_r+0x92>
 8006bd2:	230c      	movs	r3, #12
 8006bd4:	6033      	str	r3, [r6, #0]
 8006bd6:	4630      	mov	r0, r6
 8006bd8:	f000 f86c 	bl	8006cb4 <__malloc_unlock>
 8006bdc:	e7e3      	b.n	8006ba6 <_malloc_r+0x1e>
 8006bde:	6823      	ldr	r3, [r4, #0]
 8006be0:	1b5b      	subs	r3, r3, r5
 8006be2:	d417      	bmi.n	8006c14 <_malloc_r+0x8c>
 8006be4:	2b0b      	cmp	r3, #11
 8006be6:	d903      	bls.n	8006bf0 <_malloc_r+0x68>
 8006be8:	6023      	str	r3, [r4, #0]
 8006bea:	441c      	add	r4, r3
 8006bec:	6025      	str	r5, [r4, #0]
 8006bee:	e004      	b.n	8006bfa <_malloc_r+0x72>
 8006bf0:	6863      	ldr	r3, [r4, #4]
 8006bf2:	42a2      	cmp	r2, r4
 8006bf4:	bf0c      	ite	eq
 8006bf6:	600b      	streq	r3, [r1, #0]
 8006bf8:	6053      	strne	r3, [r2, #4]
 8006bfa:	4630      	mov	r0, r6
 8006bfc:	f000 f85a 	bl	8006cb4 <__malloc_unlock>
 8006c00:	f104 000b 	add.w	r0, r4, #11
 8006c04:	1d23      	adds	r3, r4, #4
 8006c06:	f020 0007 	bic.w	r0, r0, #7
 8006c0a:	1ac2      	subs	r2, r0, r3
 8006c0c:	d0cc      	beq.n	8006ba8 <_malloc_r+0x20>
 8006c0e:	1a1b      	subs	r3, r3, r0
 8006c10:	50a3      	str	r3, [r4, r2]
 8006c12:	e7c9      	b.n	8006ba8 <_malloc_r+0x20>
 8006c14:	4622      	mov	r2, r4
 8006c16:	6864      	ldr	r4, [r4, #4]
 8006c18:	e7cc      	b.n	8006bb4 <_malloc_r+0x2c>
 8006c1a:	1cc4      	adds	r4, r0, #3
 8006c1c:	f024 0403 	bic.w	r4, r4, #3
 8006c20:	42a0      	cmp	r0, r4
 8006c22:	d0e3      	beq.n	8006bec <_malloc_r+0x64>
 8006c24:	1a21      	subs	r1, r4, r0
 8006c26:	4630      	mov	r0, r6
 8006c28:	f000 f82e 	bl	8006c88 <_sbrk_r>
 8006c2c:	3001      	adds	r0, #1
 8006c2e:	d1dd      	bne.n	8006bec <_malloc_r+0x64>
 8006c30:	e7cf      	b.n	8006bd2 <_malloc_r+0x4a>
 8006c32:	bf00      	nop
 8006c34:	2000059c 	.word	0x2000059c
 8006c38:	200005a0 	.word	0x200005a0

08006c3c <_realloc_r>:
 8006c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c3e:	4607      	mov	r7, r0
 8006c40:	4614      	mov	r4, r2
 8006c42:	460e      	mov	r6, r1
 8006c44:	b921      	cbnz	r1, 8006c50 <_realloc_r+0x14>
 8006c46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006c4a:	4611      	mov	r1, r2
 8006c4c:	f7ff bf9c 	b.w	8006b88 <_malloc_r>
 8006c50:	b922      	cbnz	r2, 8006c5c <_realloc_r+0x20>
 8006c52:	f7ff ff49 	bl	8006ae8 <_free_r>
 8006c56:	4625      	mov	r5, r4
 8006c58:	4628      	mov	r0, r5
 8006c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c5c:	f000 f830 	bl	8006cc0 <_malloc_usable_size_r>
 8006c60:	42a0      	cmp	r0, r4
 8006c62:	d20f      	bcs.n	8006c84 <_realloc_r+0x48>
 8006c64:	4621      	mov	r1, r4
 8006c66:	4638      	mov	r0, r7
 8006c68:	f7ff ff8e 	bl	8006b88 <_malloc_r>
 8006c6c:	4605      	mov	r5, r0
 8006c6e:	2800      	cmp	r0, #0
 8006c70:	d0f2      	beq.n	8006c58 <_realloc_r+0x1c>
 8006c72:	4631      	mov	r1, r6
 8006c74:	4622      	mov	r2, r4
 8006c76:	f7ff ff0f 	bl	8006a98 <memcpy>
 8006c7a:	4631      	mov	r1, r6
 8006c7c:	4638      	mov	r0, r7
 8006c7e:	f7ff ff33 	bl	8006ae8 <_free_r>
 8006c82:	e7e9      	b.n	8006c58 <_realloc_r+0x1c>
 8006c84:	4635      	mov	r5, r6
 8006c86:	e7e7      	b.n	8006c58 <_realloc_r+0x1c>

08006c88 <_sbrk_r>:
 8006c88:	b538      	push	{r3, r4, r5, lr}
 8006c8a:	4d06      	ldr	r5, [pc, #24]	; (8006ca4 <_sbrk_r+0x1c>)
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	4604      	mov	r4, r0
 8006c90:	4608      	mov	r0, r1
 8006c92:	602b      	str	r3, [r5, #0]
 8006c94:	f7fb fae4 	bl	8002260 <_sbrk>
 8006c98:	1c43      	adds	r3, r0, #1
 8006c9a:	d102      	bne.n	8006ca2 <_sbrk_r+0x1a>
 8006c9c:	682b      	ldr	r3, [r5, #0]
 8006c9e:	b103      	cbz	r3, 8006ca2 <_sbrk_r+0x1a>
 8006ca0:	6023      	str	r3, [r4, #0]
 8006ca2:	bd38      	pop	{r3, r4, r5, pc}
 8006ca4:	20000698 	.word	0x20000698

08006ca8 <__malloc_lock>:
 8006ca8:	4801      	ldr	r0, [pc, #4]	; (8006cb0 <__malloc_lock+0x8>)
 8006caa:	f000 b811 	b.w	8006cd0 <__retarget_lock_acquire_recursive>
 8006cae:	bf00      	nop
 8006cb0:	200006a0 	.word	0x200006a0

08006cb4 <__malloc_unlock>:
 8006cb4:	4801      	ldr	r0, [pc, #4]	; (8006cbc <__malloc_unlock+0x8>)
 8006cb6:	f000 b80c 	b.w	8006cd2 <__retarget_lock_release_recursive>
 8006cba:	bf00      	nop
 8006cbc:	200006a0 	.word	0x200006a0

08006cc0 <_malloc_usable_size_r>:
 8006cc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cc4:	1f18      	subs	r0, r3, #4
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	bfbc      	itt	lt
 8006cca:	580b      	ldrlt	r3, [r1, r0]
 8006ccc:	18c0      	addlt	r0, r0, r3
 8006cce:	4770      	bx	lr

08006cd0 <__retarget_lock_acquire_recursive>:
 8006cd0:	4770      	bx	lr

08006cd2 <__retarget_lock_release_recursive>:
 8006cd2:	4770      	bx	lr

08006cd4 <_init>:
 8006cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cd6:	bf00      	nop
 8006cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cda:	bc08      	pop	{r3}
 8006cdc:	469e      	mov	lr, r3
 8006cde:	4770      	bx	lr

08006ce0 <_fini>:
 8006ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ce2:	bf00      	nop
 8006ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ce6:	bc08      	pop	{r3}
 8006ce8:	469e      	mov	lr, r3
 8006cea:	4770      	bx	lr
