
dwm1000- f411re-twr-resp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6e0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a84  0800a880  0800a880  0001a880  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c304  0800c304  00020248  2**0
                  CONTENTS
  4 .ARM          00000008  0800c304  0800c304  0001c304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c30c  0800c30c  00020248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c30c  0800c30c  0001c30c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c310  0800c310  0001c310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000248  20000000  0800c314  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c0  20000248  0800c55c  00020248  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000808  0800c55c  00020808  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013cc1  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033d4  00000000  00000000  00033f39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001278  00000000  00000000  00037310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001140  00000000  00000000  00038588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b3ee  00000000  00000000  000396c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000174b2  00000000  00000000  00054ab6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000936b9  00000000  00000000  0006bf68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ff621  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fdc  00000000  00000000  000ff674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000248 	.word	0x20000248
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a868 	.word	0x0800a868

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000024c 	.word	0x2000024c
 80001dc:	0800a868 	.word	0x0800a868

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <dwt_initialise>:
#define VBAT_ADDRESS   (0x08)
#define VTEMP_ADDRESS  (0x09)
#define XTRIM_ADDRESS  (0x1E)

int dwt_initialise(int config)
{
 8001008:	b590      	push	{r4, r7, lr}
 800100a:	b087      	sub	sp, #28
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
    uint16 otp_xtaltrim_and_rev = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	82fb      	strh	r3, [r7, #22]
    uint32 ldo_tune = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	613b      	str	r3, [r7, #16]

    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
 8001018:	4b9f      	ldr	r3, [pc, #636]	; (8001298 <dwt_initialise+0x290>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2200      	movs	r2, #0
 800101e:	751a      	strb	r2, [r3, #20]
    pdw1000local->wait4resp = 0; // - set to 0 - meaning wait for response not active
 8001020:	4b9d      	ldr	r3, [pc, #628]	; (8001298 <dwt_initialise+0x290>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2200      	movs	r2, #0
 8001026:	755a      	strb	r2, [r3, #21]
    pdw1000local->sleep_mode = 0; // - set to 0 - meaning sleep mode has not been configured
 8001028:	4b9b      	ldr	r3, [pc, #620]	; (8001298 <dwt_initialise+0x290>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2200      	movs	r2, #0
 800102e:	82da      	strh	r2, [r3, #22]

    pdw1000local->cbTxDone = NULL;
 8001030:	4b99      	ldr	r3, [pc, #612]	; (8001298 <dwt_initialise+0x290>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2200      	movs	r2, #0
 8001036:	629a      	str	r2, [r3, #40]	; 0x28
    pdw1000local->cbRxOk = NULL;
 8001038:	4b97      	ldr	r3, [pc, #604]	; (8001298 <dwt_initialise+0x290>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2200      	movs	r2, #0
 800103e:	62da      	str	r2, [r3, #44]	; 0x2c
    pdw1000local->cbRxTo = NULL;
 8001040:	4b95      	ldr	r3, [pc, #596]	; (8001298 <dwt_initialise+0x290>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2200      	movs	r2, #0
 8001046:	631a      	str	r2, [r3, #48]	; 0x30
    pdw1000local->cbRxErr = NULL;
 8001048:	4b93      	ldr	r3, [pc, #588]	; (8001298 <dwt_initialise+0x290>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2200      	movs	r2, #0
 800104e:	635a      	str	r2, [r3, #52]	; 0x34
#if DWT_API_ERROR_CHECK
    pdw1000local->otp_mask = config ; // Save the READ_OTP config mask
#endif

    // Read and validate device ID, return -1 if not recognised
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
 8001050:	f000 f926 	bl	80012a0 <dwt_readdevid>
 8001054:	4603      	mov	r3, r0
 8001056:	4a91      	ldr	r2, [pc, #580]	; (800129c <dwt_initialise+0x294>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d002      	beq.n	8001062 <dwt_initialise+0x5a>
    {
        return DWT_ERROR ;
 800105c:	f04f 33ff 	mov.w	r3, #4294967295
 8001060:	e115      	b.n	800128e <dwt_initialise+0x286>
    }

    if(!(DWT_DW_WAKE_UP & config)) // Don't reset the device if DWT_DW_WAKE_UP bit is set, e.g. when calling this API after wake up
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	f003 0302 	and.w	r3, r3, #2
 8001068:	2b00      	cmp	r3, #0
 800106a:	d101      	bne.n	8001070 <dwt_initialise+0x68>
    {
        dwt_softreset(); // Make sure the device is completely reset before starting initialisation
 800106c:	f000 fed8 	bl	8001e20 <dwt_softreset>
    }

    if(!((DWT_DW_WAKE_UP & config) && ((DWT_READ_OTP_TMP | DWT_READ_OTP_BAT | DWT_READ_OTP_LID | DWT_READ_OTP_PID | DWT_DW_WUP_RD_OTPREV)& config)))
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f003 0302 	and.w	r3, r3, #2
 8001076:	2b00      	cmp	r3, #0
 8001078:	d004      	beq.n	8001084 <dwt_initialise+0x7c>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8001080:	2b00      	cmp	r3, #0
 8001082:	d102      	bne.n	800108a <dwt_initialise+0x82>
    {
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 8001084:	2000      	movs	r0, #0
 8001086:	f000 fcdf 	bl	8001a48 <_dwt_enableclocks>
    }                                  // when not reading from OTP, clocks don't need to change.

    // Configure the CPLL lock detect
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
 800108a:	2204      	movs	r2, #4
 800108c:	2100      	movs	r1, #0
 800108e:	2024      	movs	r0, #36	; 0x24
 8001090:	f000 fc08 	bl	80018a4 <dwt_write8bitoffsetreg>

    // When DW1000 IC is initialised from power up, then the LDO value should be kicked from OTP, otherwise if this API is called after
    // DW1000 IC has been woken up (DWT_DW_WAKE_UP bit is set) this can be skipped as LDO would have already been automatically
    // kicked/loaded on wake up
    if(!(DWT_DW_WAKE_UP & config))
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	2b00      	cmp	r3, #0
 800109c:	d116      	bne.n	80010cc <dwt_initialise+0xc4>
    {
        // Load LDO tune from OTP and kick it if there is a value actually programmed.
        ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
 800109e:	2004      	movs	r0, #4
 80010a0:	f000 fc56 	bl	8001950 <_dwt_otpread>
 80010a4:	6138      	str	r0, [r7, #16]
        if((ldo_tune & 0xFF) != 0)
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d01f      	beq.n	80010ee <dwt_initialise+0xe6>
        {
            // Kick LDO tune
            dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDO kick bit
 80010ae:	2202      	movs	r2, #2
 80010b0:	2112      	movs	r1, #18
 80010b2:	202d      	movs	r0, #45	; 0x2d
 80010b4:	f000 fbf6 	bl	80018a4 <dwt_write8bitoffsetreg>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 80010b8:	4b77      	ldr	r3, [pc, #476]	; (8001298 <dwt_initialise+0x290>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	8ada      	ldrh	r2, [r3, #22]
 80010be:	4b76      	ldr	r3, [pc, #472]	; (8001298 <dwt_initialise+0x290>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80010c6:	b292      	uxth	r2, r2
 80010c8:	82da      	strh	r2, [r3, #22]
 80010ca:	e010      	b.n	80010ee <dwt_initialise+0xe6>
        }
    }
    else
    {   //if LDOTUNE reg contains value different from default it means it was kicked from OTP and thus set AON_WCFG_ONW_LLDO.
        if(dwt_read32bitoffsetreg(RF_CONF_ID, LDOTUNE) != LDOTUNE_DEFAULT)
 80010cc:	2130      	movs	r1, #48	; 0x30
 80010ce:	2028      	movs	r0, #40	; 0x28
 80010d0:	f000 fb91 	bl	80017f6 <dwt_read32bitoffsetreg>
 80010d4:	4603      	mov	r3, r0
 80010d6:	f1b3 3f88 	cmp.w	r3, #2290649224	; 0x88888888
 80010da:	d008      	beq.n	80010ee <dwt_initialise+0xe6>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO;
 80010dc:	4b6e      	ldr	r3, [pc, #440]	; (8001298 <dwt_initialise+0x290>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	8ada      	ldrh	r2, [r3, #22]
 80010e2:	4b6d      	ldr	r3, [pc, #436]	; (8001298 <dwt_initialise+0x290>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80010ea:	b292      	uxth	r2, r2
 80010ec:	82da      	strh	r2, [r3, #22]
    }

    if((!(DWT_DW_WAKE_UP & config)) || ((DWT_DW_WAKE_UP & config) && (DWT_DW_WUP_RD_OTPREV & config)))
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f003 0302 	and.w	r3, r3, #2
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d009      	beq.n	800110c <dwt_initialise+0x104>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d011      	beq.n	8001126 <dwt_initialise+0x11e>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f003 0308 	and.w	r3, r3, #8
 8001108:	2b00      	cmp	r3, #0
 800110a:	d00c      	beq.n	8001126 <dwt_initialise+0x11e>
    {
        // Read OTP revision number
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 800110c:	201e      	movs	r0, #30
 800110e:	f000 fc1f 	bl	8001950 <_dwt_otpread>
 8001112:	4603      	mov	r3, r0
 8001114:	82fb      	strh	r3, [r7, #22]
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 8001116:	8afb      	ldrh	r3, [r7, #22]
 8001118:	0a1b      	lsrs	r3, r3, #8
 800111a:	b29a      	uxth	r2, r3
 800111c:	4b5e      	ldr	r3, [pc, #376]	; (8001298 <dwt_initialise+0x290>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	b2d2      	uxtb	r2, r2
 8001122:	72da      	strb	r2, [r3, #11]
 8001124:	e003      	b.n	800112e <dwt_initialise+0x126>
    }
    else
        pdw1000local->otprev = 0; // If OTP valuse are not used, if this API is called after DW1000 IC has been woken up
 8001126:	4b5c      	ldr	r3, [pc, #368]	; (8001298 <dwt_initialise+0x290>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2200      	movs	r2, #0
 800112c:	72da      	strb	r2, [r3, #11]
                                  // (DWT_DW_WAKE_UP bit is set), set otprev to 0

    if(!(DWT_DW_WAKE_UP & config))
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f003 0302 	and.w	r3, r3, #2
 8001134:	2b00      	cmp	r3, #0
 8001136:	d10b      	bne.n	8001150 <dwt_initialise+0x148>
    {
        // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
        if ((otp_xtaltrim_and_rev & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
 8001138:	8afb      	ldrh	r3, [r7, #22]
 800113a:	f003 031f 	and.w	r3, r3, #31
 800113e:	2b00      	cmp	r3, #0
 8001140:	d101      	bne.n	8001146 <dwt_initialise+0x13e>
        {
            otp_xtaltrim_and_rev = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
 8001142:	2310      	movs	r3, #16
 8001144:	82fb      	strh	r3, [r7, #22]
        }
        // Configure XTAL trim
        dwt_setxtaltrim((uint8)otp_xtaltrim_and_rev);
 8001146:	8afb      	ldrh	r3, [r7, #22]
 8001148:	b2db      	uxtb	r3, r3
 800114a:	4618      	mov	r0, r3
 800114c:	f000 fe8e 	bl	8001e6c <dwt_setxtaltrim>
    }

    if(DWT_READ_OTP_PID & config)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f003 0310 	and.w	r3, r3, #16
 8001156:	2b00      	cmp	r3, #0
 8001158:	d007      	beq.n	800116a <dwt_initialise+0x162>
    {
        // Load Part from OTP
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
 800115a:	4b4f      	ldr	r3, [pc, #316]	; (8001298 <dwt_initialise+0x290>)
 800115c:	681c      	ldr	r4, [r3, #0]
 800115e:	2006      	movs	r0, #6
 8001160:	f000 fbf6 	bl	8001950 <_dwt_otpread>
 8001164:	4603      	mov	r3, r0
 8001166:	6023      	str	r3, [r4, #0]
 8001168:	e003      	b.n	8001172 <dwt_initialise+0x16a>
    }
    else
    {
        pdw1000local->partID = 0;
 800116a:	4b4b      	ldr	r3, [pc, #300]	; (8001298 <dwt_initialise+0x290>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
    }

    if(DWT_READ_OTP_LID & config)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f003 0320 	and.w	r3, r3, #32
 8001178:	2b00      	cmp	r3, #0
 800117a:	d007      	beq.n	800118c <dwt_initialise+0x184>
    {
        // Load Lot ID from OTP
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 800117c:	4b46      	ldr	r3, [pc, #280]	; (8001298 <dwt_initialise+0x290>)
 800117e:	681c      	ldr	r4, [r3, #0]
 8001180:	2007      	movs	r0, #7
 8001182:	f000 fbe5 	bl	8001950 <_dwt_otpread>
 8001186:	4603      	mov	r3, r0
 8001188:	6063      	str	r3, [r4, #4]
 800118a:	e003      	b.n	8001194 <dwt_initialise+0x18c>
    }
    else
    {
        pdw1000local->lotID = 0;
 800118c:	4b42      	ldr	r3, [pc, #264]	; (8001298 <dwt_initialise+0x290>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2200      	movs	r2, #0
 8001192:	605a      	str	r2, [r3, #4]
    }

    if(DWT_READ_OTP_BAT & config)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800119a:	2b00      	cmp	r3, #0
 800119c:	d008      	beq.n	80011b0 <dwt_initialise+0x1a8>
    {
        // Load VBAT from OTP
        pdw1000local->vBatP = _dwt_otpread(VBAT_ADDRESS) & 0xff;
 800119e:	2008      	movs	r0, #8
 80011a0:	f000 fbd6 	bl	8001950 <_dwt_otpread>
 80011a4:	4602      	mov	r2, r0
 80011a6:	4b3c      	ldr	r3, [pc, #240]	; (8001298 <dwt_initialise+0x290>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	721a      	strb	r2, [r3, #8]
 80011ae:	e003      	b.n	80011b8 <dwt_initialise+0x1b0>
    }
    else
    {
        pdw1000local->vBatP = 0;
 80011b0:	4b39      	ldr	r3, [pc, #228]	; (8001298 <dwt_initialise+0x290>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2200      	movs	r2, #0
 80011b6:	721a      	strb	r2, [r3, #8]
    }

    if(DWT_READ_OTP_TMP & config)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d008      	beq.n	80011d4 <dwt_initialise+0x1cc>
    {
        // Load TEMP from OTP
        pdw1000local->tempP = _dwt_otpread(VTEMP_ADDRESS) & 0xff;
 80011c2:	2009      	movs	r0, #9
 80011c4:	f000 fbc4 	bl	8001950 <_dwt_otpread>
 80011c8:	4602      	mov	r2, r0
 80011ca:	4b33      	ldr	r3, [pc, #204]	; (8001298 <dwt_initialise+0x290>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	b2d2      	uxtb	r2, r2
 80011d0:	725a      	strb	r2, [r3, #9]
 80011d2:	e003      	b.n	80011dc <dwt_initialise+0x1d4>
    }
    else
    {
        pdw1000local->tempP = 0;
 80011d4:	4b30      	ldr	r3, [pc, #192]	; (8001298 <dwt_initialise+0x290>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2200      	movs	r2, #0
 80011da:	725a      	strb	r2, [r3, #9]
    }

    // Load leading edge detect code (LDE/microcode)
    if(!(DWT_DW_WAKE_UP & config))
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d121      	bne.n	800122a <dwt_initialise+0x222>
    {
        if(DWT_LOADUCODE & config)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d00b      	beq.n	8001208 <dwt_initialise+0x200>
        {
            _dwt_loaducodefromrom();
 80011f0:	f000 fbfb 	bl	80019ea <_dwt_loaducodefromrom>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up if loaded on initialisation
 80011f4:	4b28      	ldr	r3, [pc, #160]	; (8001298 <dwt_initialise+0x290>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	8ada      	ldrh	r2, [r3, #22]
 80011fa:	4b27      	ldr	r3, [pc, #156]	; (8001298 <dwt_initialise+0x290>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001202:	b292      	uxth	r2, r2
 8001204:	82da      	strh	r2, [r3, #22]
 8001206:	e01e      	b.n	8001246 <dwt_initialise+0x23e>
        }
        else // Should disable the LDERUN bit enable if LDE has not been loaded
        {
            uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
 8001208:	2105      	movs	r1, #5
 800120a:	2036      	movs	r0, #54	; 0x36
 800120c:	f000 fb1a 	bl	8001844 <dwt_read16bitoffsetreg>
 8001210:	4603      	mov	r3, r0
 8001212:	81fb      	strh	r3, [r7, #14]
            rega &= 0xFDFF ; // Clear LDERUN bit
 8001214:	89fb      	ldrh	r3, [r7, #14]
 8001216:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800121a:	81fb      	strh	r3, [r7, #14]
            dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
 800121c:	89fb      	ldrh	r3, [r7, #14]
 800121e:	461a      	mov	r2, r3
 8001220:	2105      	movs	r1, #5
 8001222:	2036      	movs	r0, #54	; 0x36
 8001224:	f000 fb51 	bl	80018ca <dwt_write16bitoffsetreg>
 8001228:	e00d      	b.n	8001246 <dwt_initialise+0x23e>
        }
    }
    else //if DWT_DW_WUP_NO_UCODE is set then assume that the UCODE was loaded from ROM (i.e. DWT_LOADUCODE was set on power up),
    {     //thus set AON_WCFG_ONW_LLDE, otherwise don't set the AON_WCFG_ONW_LLDE bit in the sleep_mode configuration
        if((DWT_DW_WUP_NO_UCODE & config) == 0)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f003 0304 	and.w	r3, r3, #4
 8001230:	2b00      	cmp	r3, #0
 8001232:	d108      	bne.n	8001246 <dwt_initialise+0x23e>
        {
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE;
 8001234:	4b18      	ldr	r3, [pc, #96]	; (8001298 <dwt_initialise+0x290>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	8ada      	ldrh	r2, [r3, #22]
 800123a:	4b17      	ldr	r3, [pc, #92]	; (8001298 <dwt_initialise+0x290>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001242:	b292      	uxth	r2, r2
 8001244:	82da      	strh	r2, [r3, #22]
        }
    }

    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 8001246:	2001      	movs	r0, #1
 8001248:	f000 fbfe 	bl	8001a48 <_dwt_enableclocks>

    // The 3 bits in AON CFG1 register must be cleared to ensure proper operation of the DW1000 in DEEPSLEEP mode.
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
 800124c:	2200      	movs	r2, #0
 800124e:	210a      	movs	r1, #10
 8001250:	202c      	movs	r0, #44	; 0x2c
 8001252:	f000 fb27 	bl	80018a4 <dwt_write8bitoffsetreg>

    // Read system register / store local copy
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 8001256:	4b10      	ldr	r3, [pc, #64]	; (8001298 <dwt_initialise+0x290>)
 8001258:	681c      	ldr	r4, [r3, #0]
 800125a:	2100      	movs	r1, #0
 800125c:	2004      	movs	r0, #4
 800125e:	f000 faca 	bl	80017f6 <dwt_read32bitoffsetreg>
 8001262:	4603      	mov	r3, r0
 8001264:	6123      	str	r3, [r4, #16]
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 8001266:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <dwt_initialise+0x290>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	691b      	ldr	r3, [r3, #16]
 800126c:	0c1b      	lsrs	r3, r3, #16
 800126e:	b2da      	uxtb	r2, r3
 8001270:	4b09      	ldr	r3, [pc, #36]	; (8001298 <dwt_initialise+0x290>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f002 0203 	and.w	r2, r2, #3
 8001278:	b2d2      	uxtb	r2, r2
 800127a:	729a      	strb	r2, [r3, #10]

    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID) ;
 800127c:	4b06      	ldr	r3, [pc, #24]	; (8001298 <dwt_initialise+0x290>)
 800127e:	681c      	ldr	r4, [r3, #0]
 8001280:	2100      	movs	r1, #0
 8001282:	2008      	movs	r0, #8
 8001284:	f000 fab7 	bl	80017f6 <dwt_read32bitoffsetreg>
 8001288:	4603      	mov	r3, r0
 800128a:	60e3      	str	r3, [r4, #12]

    return DWT_SUCCESS ;
 800128c:	2300      	movs	r3, #0

} // end dwt_initialise()
 800128e:	4618      	mov	r0, r3
 8001290:	371c      	adds	r7, #28
 8001292:	46bd      	mov	sp, r7
 8001294:	bd90      	pop	{r4, r7, pc}
 8001296:	bf00      	nop
 8001298:	20000000 	.word	0x20000000
 800129c:	deca0130 	.word	0xdeca0130

080012a0 <dwt_readdevid>:
 * output parameters
 *
 * returns the read value which for DW1000 is 0xDECA0130
 */
uint32 dwt_readdevid(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
 80012a4:	2100      	movs	r1, #0
 80012a6:	2000      	movs	r0, #0
 80012a8:	f000 faa5 	bl	80017f6 <dwt_read32bitoffsetreg>
 80012ac:	4603      	mov	r3, r0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	bd80      	pop	{r7, pc}
	...

080012b4 <dwt_configure>:
 * output parameters
 *
 * no return value
 */
void dwt_configure(dwt_config_t *config)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
    uint8 nsSfd_result  = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	75fb      	strb	r3, [r7, #23]
    uint8 useDWnsSFD = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	75bb      	strb	r3, [r7, #22]
    uint8 chan = config->chan ;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	74fb      	strb	r3, [r7, #19]
    uint32 regval ;
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	795b      	ldrb	r3, [r3, #5]
 80012ce:	461a      	mov	r2, r3
 80012d0:	4ba1      	ldr	r3, [pc, #644]	; (8001558 <dwt_configure+0x2a4>)
 80012d2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80012d6:	82bb      	strh	r3, [r7, #20]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	785b      	ldrb	r3, [r3, #1]
 80012dc:	3b01      	subs	r3, #1
 80012de:	74bb      	strb	r3, [r7, #18]
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 80012e0:	7cfb      	ldrb	r3, [r7, #19]
 80012e2:	2b04      	cmp	r3, #4
 80012e4:	d002      	beq.n	80012ec <dwt_configure+0x38>
 80012e6:	7cfb      	ldrb	r3, [r7, #19]
 80012e8:	2b07      	cmp	r3, #7
 80012ea:	d101      	bne.n	80012f0 <dwt_configure+0x3c>
 80012ec:	2301      	movs	r3, #1
 80012ee:	e000      	b.n	80012f2 <dwt_configure+0x3e>
 80012f0:	2300      	movs	r3, #0
 80012f2:	747b      	strb	r3, [r7, #17]
           || (config->txPreambLength == DWT_PLEN_2048) || (config->txPreambLength == DWT_PLEN_4096));
    assert((config->phrMode == DWT_PHRMODE_STD) || (config->phrMode == DWT_PHRMODE_EXT));
#endif

    // For 110 kbps we need a special setup
    if(DWT_BR_110K == config->dataRate)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	79db      	ldrb	r3, [r3, #7]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d10b      	bne.n	8001314 <dwt_configure+0x60>
    {
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 80012fc:	4b97      	ldr	r3, [pc, #604]	; (800155c <dwt_configure+0x2a8>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	691a      	ldr	r2, [r3, #16]
 8001302:	4b96      	ldr	r3, [pc, #600]	; (800155c <dwt_configure+0x2a8>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800130a:	611a      	str	r2, [r3, #16]
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
 800130c:	8abb      	ldrh	r3, [r7, #20]
 800130e:	08db      	lsrs	r3, r3, #3
 8001310:	82bb      	strh	r3, [r7, #20]
 8001312:	e007      	b.n	8001324 <dwt_configure+0x70>
    }
    else
    {
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
 8001314:	4b91      	ldr	r3, [pc, #580]	; (800155c <dwt_configure+0x2a8>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	691a      	ldr	r2, [r3, #16]
 800131a:	4b90      	ldr	r3, [pc, #576]	; (800155c <dwt_configure+0x2a8>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8001322:	611a      	str	r2, [r3, #16]
    }

    pdw1000local->longFrames = config->phrMode ;
 8001324:	4b8d      	ldr	r3, [pc, #564]	; (800155c <dwt_configure+0x2a8>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	7a12      	ldrb	r2, [r2, #8]
 800132c:	729a      	strb	r2, [r3, #10]

    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
 800132e:	4b8b      	ldr	r3, [pc, #556]	; (800155c <dwt_configure+0x2a8>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	691a      	ldr	r2, [r3, #16]
 8001334:	4b89      	ldr	r3, [pc, #548]	; (800155c <dwt_configure+0x2a8>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800133c:	611a      	str	r2, [r3, #16]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 800133e:	4b87      	ldr	r3, [pc, #540]	; (800155c <dwt_configure+0x2a8>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	6919      	ldr	r1, [r3, #16]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	7a1b      	ldrb	r3, [r3, #8]
 8001348:	041b      	lsls	r3, r3, #16
 800134a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800134e:	4b83      	ldr	r3, [pc, #524]	; (800155c <dwt_configure+0x2a8>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	430a      	orrs	r2, r1
 8001354:	611a      	str	r2, [r3, #16]

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 8001356:	4b81      	ldr	r3, [pc, #516]	; (800155c <dwt_configure+0x2a8>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	691b      	ldr	r3, [r3, #16]
 800135c:	461a      	mov	r2, r3
 800135e:	2100      	movs	r1, #0
 8001360:	2004      	movs	r0, #4
 8001362:	f000 face 	bl	8001902 <dwt_write32bitoffsetreg>
    // Set the lde_replicaCoeff
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16) ;
 8001366:	8abb      	ldrh	r3, [r7, #20]
 8001368:	461a      	mov	r2, r3
 800136a:	f642 0104 	movw	r1, #10244	; 0x2804
 800136e:	202e      	movs	r0, #46	; 0x2e
 8001370:	f000 faab 	bl	80018ca <dwt_write16bitoffsetreg>

    _dwt_configlde(prfIndex);
 8001374:	7cbb      	ldrb	r3, [r7, #18]
 8001376:	4618      	mov	r0, r3
 8001378:	f000 fb17 	bl	80019aa <_dwt_configlde>

    // Configure PLL2/RF PLL block CFG/TUNE (for a given channel)
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
 800137c:	7cfb      	ldrb	r3, [r7, #19]
 800137e:	4a78      	ldr	r2, [pc, #480]	; (8001560 <dwt_configure+0x2ac>)
 8001380:	5cd3      	ldrb	r3, [r2, r3]
 8001382:	461a      	mov	r2, r3
 8001384:	4b77      	ldr	r3, [pc, #476]	; (8001564 <dwt_configure+0x2b0>)
 8001386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800138a:	461a      	mov	r2, r3
 800138c:	2107      	movs	r1, #7
 800138e:	202b      	movs	r0, #43	; 0x2b
 8001390:	f000 fab7 	bl	8001902 <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
 8001394:	7cfb      	ldrb	r3, [r7, #19]
 8001396:	4a72      	ldr	r2, [pc, #456]	; (8001560 <dwt_configure+0x2ac>)
 8001398:	5cd3      	ldrb	r3, [r2, r3]
 800139a:	461a      	mov	r2, r3
 800139c:	4b72      	ldr	r3, [pc, #456]	; (8001568 <dwt_configure+0x2b4>)
 800139e:	5c9b      	ldrb	r3, [r3, r2]
 80013a0:	461a      	mov	r2, r3
 80013a2:	210b      	movs	r1, #11
 80013a4:	202b      	movs	r0, #43	; 0x2b
 80013a6:	f000 fa7d 	bl	80018a4 <dwt_write8bitoffsetreg>

    // Configure RF RX blocks (for specified channel/bandwidth)
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
 80013aa:	7c7b      	ldrb	r3, [r7, #17]
 80013ac:	4a6f      	ldr	r2, [pc, #444]	; (800156c <dwt_configure+0x2b8>)
 80013ae:	5cd3      	ldrb	r3, [r2, r3]
 80013b0:	461a      	mov	r2, r3
 80013b2:	210b      	movs	r1, #11
 80013b4:	2028      	movs	r0, #40	; 0x28
 80013b6:	f000 fa75 	bl	80018a4 <dwt_write8bitoffsetreg>

    // Configure RF TX blocks (for specified channel and PRF)
    // Configure RF TX control
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
 80013ba:	7cfb      	ldrb	r3, [r7, #19]
 80013bc:	4a68      	ldr	r2, [pc, #416]	; (8001560 <dwt_configure+0x2ac>)
 80013be:	5cd3      	ldrb	r3, [r2, r3]
 80013c0:	461a      	mov	r2, r3
 80013c2:	4b6b      	ldr	r3, [pc, #428]	; (8001570 <dwt_configure+0x2bc>)
 80013c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013c8:	461a      	mov	r2, r3
 80013ca:	210c      	movs	r1, #12
 80013cc:	2028      	movs	r0, #40	; 0x28
 80013ce:	f000 fa98 	bl	8001902 <dwt_write32bitoffsetreg>

    // Configure the baseband parameters (for specified PRF, bit rate, PAC, and SFD settings)
    // DTUNE0
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	79db      	ldrb	r3, [r3, #7]
 80013d6:	4618      	mov	r0, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	799b      	ldrb	r3, [r3, #6]
 80013dc:	4619      	mov	r1, r3
 80013de:	4a65      	ldr	r2, [pc, #404]	; (8001574 <dwt_configure+0x2c0>)
 80013e0:	0043      	lsls	r3, r0, #1
 80013e2:	440b      	add	r3, r1
 80013e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013e8:	461a      	mov	r2, r3
 80013ea:	2102      	movs	r1, #2
 80013ec:	2027      	movs	r0, #39	; 0x27
 80013ee:	f000 fa6c 	bl	80018ca <dwt_write16bitoffsetreg>

    // DTUNE1
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
 80013f2:	7cbb      	ldrb	r3, [r7, #18]
 80013f4:	4a60      	ldr	r2, [pc, #384]	; (8001578 <dwt_configure+0x2c4>)
 80013f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013fa:	461a      	mov	r2, r3
 80013fc:	2104      	movs	r1, #4
 80013fe:	2027      	movs	r0, #39	; 0x27
 8001400:	f000 fa63 	bl	80018ca <dwt_write16bitoffsetreg>

    if(config->dataRate == DWT_BR_110K)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	79db      	ldrb	r3, [r3, #7]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d105      	bne.n	8001418 <dwt_configure+0x164>
    {
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K);
 800140c:	2264      	movs	r2, #100	; 0x64
 800140e:	2106      	movs	r1, #6
 8001410:	2027      	movs	r0, #39	; 0x27
 8001412:	f000 fa5a 	bl	80018ca <dwt_write16bitoffsetreg>
 8001416:	e018      	b.n	800144a <dwt_configure+0x196>
    }
    else
    {
        if(config->txPreambLength == DWT_PLEN_64)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	789b      	ldrb	r3, [r3, #2]
 800141c:	2b04      	cmp	r3, #4
 800141e:	d10a      	bne.n	8001436 <dwt_configure+0x182>
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64);
 8001420:	2210      	movs	r2, #16
 8001422:	2106      	movs	r1, #6
 8001424:	2027      	movs	r0, #39	; 0x27
 8001426:	f000 fa50 	bl	80018ca <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
 800142a:	2210      	movs	r2, #16
 800142c:	2126      	movs	r1, #38	; 0x26
 800142e:	2027      	movs	r0, #39	; 0x27
 8001430:	f000 fa38 	bl	80018a4 <dwt_write8bitoffsetreg>
 8001434:	e009      	b.n	800144a <dwt_configure+0x196>
        }
        else
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8);
 8001436:	2220      	movs	r2, #32
 8001438:	2106      	movs	r1, #6
 800143a:	2027      	movs	r0, #39	; 0x27
 800143c:	f000 fa45 	bl	80018ca <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
 8001440:	2228      	movs	r2, #40	; 0x28
 8001442:	2126      	movs	r1, #38	; 0x26
 8001444:	2027      	movs	r0, #39	; 0x27
 8001446:	f000 fa2d 	bl	80018a4 <dwt_write8bitoffsetreg>
        }
    }

    // DTUNE2
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
 800144a:	7cbb      	ldrb	r3, [r7, #18]
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	78d2      	ldrb	r2, [r2, #3]
 8001450:	4611      	mov	r1, r2
 8001452:	4a4a      	ldr	r2, [pc, #296]	; (800157c <dwt_configure+0x2c8>)
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	440b      	add	r3, r1
 8001458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800145c:	461a      	mov	r2, r3
 800145e:	2108      	movs	r1, #8
 8001460:	2027      	movs	r0, #39	; 0x27
 8001462:	f000 fa4e 	bl	8001902 <dwt_write32bitoffsetreg>

    // DTUNE3 (SFD timeout)
    // Don't allow 0 - SFD timeout will always be enabled
    if(config->sfdTO == 0)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	895b      	ldrh	r3, [r3, #10]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d103      	bne.n	8001476 <dwt_configure+0x1c2>
    {
        config->sfdTO = DWT_SFDTOC_DEF;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f241 0241 	movw	r2, #4161	; 0x1041
 8001474:	815a      	strh	r2, [r3, #10]
    }
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	895b      	ldrh	r3, [r3, #10]
 800147a:	461a      	mov	r2, r3
 800147c:	2120      	movs	r1, #32
 800147e:	2027      	movs	r0, #39	; 0x27
 8001480:	f000 fa23 	bl	80018ca <dwt_write16bitoffsetreg>

    // Configure AGC parameters
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
 8001484:	4b3e      	ldr	r3, [pc, #248]	; (8001580 <dwt_configure+0x2cc>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	461a      	mov	r2, r3
 800148a:	210c      	movs	r1, #12
 800148c:	2023      	movs	r0, #35	; 0x23
 800148e:	f000 fa38 	bl	8001902 <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
 8001492:	7cbb      	ldrb	r3, [r7, #18]
 8001494:	4a3a      	ldr	r2, [pc, #232]	; (8001580 <dwt_configure+0x2cc>)
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	4413      	add	r3, r2
 800149a:	889b      	ldrh	r3, [r3, #4]
 800149c:	461a      	mov	r2, r3
 800149e:	2104      	movs	r1, #4
 80014a0:	2023      	movs	r0, #35	; 0x23
 80014a2:	f000 fa12 	bl	80018ca <dwt_write16bitoffsetreg>

    // Set (non-standard) user SFD for improved performance,
    if(config->nsSFD)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	799b      	ldrb	r3, [r3, #6]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d00d      	beq.n	80014ca <dwt_configure+0x216>
    {
        // Write non standard (DW) SFD length
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	79db      	ldrb	r3, [r3, #7]
 80014b2:	461a      	mov	r2, r3
 80014b4:	4b33      	ldr	r3, [pc, #204]	; (8001584 <dwt_configure+0x2d0>)
 80014b6:	5c9b      	ldrb	r3, [r3, r2]
 80014b8:	461a      	mov	r2, r3
 80014ba:	2100      	movs	r1, #0
 80014bc:	2021      	movs	r0, #33	; 0x21
 80014be:	f000 f9f1 	bl	80018a4 <dwt_write8bitoffsetreg>
        nsSfd_result = 3 ;
 80014c2:	2303      	movs	r3, #3
 80014c4:	75fb      	strb	r3, [r7, #23]
        useDWnsSFD = 1 ;
 80014c6:	2301      	movs	r3, #1
 80014c8:	75bb      	strb	r3, [r7, #22]
    }
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 80014ca:	7cfb      	ldrb	r3, [r7, #19]
 80014cc:	f003 020f 	and.w	r2, r3, #15
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 80014d0:	7cfb      	ldrb	r3, [r7, #19]
 80014d2:	011b      	lsls	r3, r3, #4
 80014d4:	b2db      	uxtb	r3, r3
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 80014d6:	431a      	orrs	r2, r3
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	785b      	ldrb	r3, [r3, #1]
 80014dc:	049b      	lsls	r3, r3, #18
 80014de:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 80014e2:	431a      	orrs	r2, r3
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 80014e4:	7dfb      	ldrb	r3, [r7, #23]
 80014e6:	051b      	lsls	r3, r3, #20
 80014e8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 80014ec:	431a      	orrs	r2, r3
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 80014ee:	7dbb      	ldrb	r3, [r7, #22]
 80014f0:	045b      	lsls	r3, r3, #17
 80014f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 80014f6:	431a      	orrs	r2, r3
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	791b      	ldrb	r3, [r3, #4]
 80014fc:	059b      	lsls	r3, r3, #22
 80014fe:	f003 63f8 	and.w	r3, r3, #130023424	; 0x7c00000
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 8001502:	431a      	orrs	r2, r3
              (CHAN_CTRL_RX_PCOD_MASK & ((uint32)config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	795b      	ldrb	r3, [r3, #5]
 8001508:	06db      	lsls	r3, r3, #27
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 800150a:	4313      	orrs	r3, r2
 800150c:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(CHAN_CTRL_ID,regval) ;
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	2100      	movs	r1, #0
 8001512:	201f      	movs	r0, #31
 8001514:	f000 f9f5 	bl	8001902 <dwt_write32bitoffsetreg>

    // Set up TX Preamble Size, PRF and Data Rate
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	789a      	ldrb	r2, [r3, #2]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	785b      	ldrb	r3, [r3, #1]
 8001520:	4313      	orrs	r3, r2
 8001522:	b2db      	uxtb	r3, r3
 8001524:	0419      	lsls	r1, r3, #16
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	79db      	ldrb	r3, [r3, #7]
 800152a:	035a      	lsls	r2, r3, #13
 800152c:	4b0b      	ldr	r3, [pc, #44]	; (800155c <dwt_configure+0x2a8>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	430a      	orrs	r2, r1
 8001532:	60da      	str	r2, [r3, #12]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
 8001534:	4b09      	ldr	r3, [pc, #36]	; (800155c <dwt_configure+0x2a8>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	461a      	mov	r2, r3
 800153c:	2100      	movs	r1, #0
 800153e:	2008      	movs	r0, #8
 8001540:	f000 f9df 	bl	8001902 <dwt_write32bitoffsetreg>

    // The SFD transmit pattern is initialised by the DW1000 upon a user TX request, but (due to an IC issue) it is not done for an auto-ACK TX. The
    // SYS_CTRL write below works around this issue, by simultaneously initiating and aborting a transmission, which correctly initialises the SFD
    // after its configuration or reconfiguration.
    // This issue is not documented at the time of writing this code. It should be in next release of DW1000 User Manual (v2.09, from July 2016).
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
 8001544:	2242      	movs	r2, #66	; 0x42
 8001546:	2100      	movs	r1, #0
 8001548:	200d      	movs	r0, #13
 800154a:	f000 f9ab 	bl	80018a4 <dwt_write8bitoffsetreg>
} // end dwt_configure()
 800154e:	bf00      	nop
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	0800a94c 	.word	0x0800a94c
 800155c:	20000000 	.word	0x20000000
 8001560:	0800a8cc 	.word	0x0800a8cc
 8001564:	0800a8ec 	.word	0x0800a8ec
 8001568:	0800a904 	.word	0x0800a904
 800156c:	0800a90c 	.word	0x0800a90c
 8001570:	0800a8d4 	.word	0x0800a8d4
 8001574:	0800a91c 	.word	0x0800a91c
 8001578:	0800a928 	.word	0x0800a928
 800157c:	0800a92c 	.word	0x0800a92c
 8001580:	0800a910 	.word	0x0800a910
 8001584:	0800a918 	.word	0x0800a918

08001588 <dwt_setrxantennadelay>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxantennadelay(uint16 rxDelay)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	80fb      	strh	r3, [r7, #6]
    // Set the RX antenna delay for auto TX timestamp adjustment
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_RXANTD_OFFSET, rxDelay);
 8001592:	88fb      	ldrh	r3, [r7, #6]
 8001594:	461a      	mov	r2, r3
 8001596:	f641 0104 	movw	r1, #6148	; 0x1804
 800159a:	202e      	movs	r0, #46	; 0x2e
 800159c:	f000 f995 	bl	80018ca <dwt_write16bitoffsetreg>
}
 80015a0:	bf00      	nop
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <dwt_settxantennadelay>:
 * output parameters
 *
 * no return value
 */
void dwt_settxantennadelay(uint16 txDelay)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	80fb      	strh	r3, [r7, #6]
    // Set the TX antenna delay for auto TX timestamp adjustment
    dwt_write16bitoffsetreg(TX_ANTD_ID, TX_ANTD_OFFSET, txDelay);
 80015b2:	88fb      	ldrh	r3, [r7, #6]
 80015b4:	461a      	mov	r2, r3
 80015b6:	2100      	movs	r1, #0
 80015b8:	2018      	movs	r0, #24
 80015ba:	f000 f986 	bl	80018ca <dwt_write16bitoffsetreg>
}
 80015be:	bf00      	nop
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <dwt_writetxdata>:
 * output parameters
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error
 */
int dwt_writetxdata(uint16 txFrameLength, uint8 *txFrameBytes, uint16 txBufferOffset)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b082      	sub	sp, #8
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	4603      	mov	r3, r0
 80015ce:	6039      	str	r1, [r7, #0]
 80015d0:	80fb      	strh	r3, [r7, #6]
 80015d2:	4613      	mov	r3, r2
 80015d4:	80bb      	strh	r3, [r7, #4]
    assert(txFrameLength >= 2);
    assert((pdw1000local->longFrames && (txFrameLength <= 1023)) || (txFrameLength <= 127));
    assert((txBufferOffset + txFrameLength) <= 1024);
#endif

    if ((txBufferOffset + txFrameLength) <= 1024)
 80015d6:	88ba      	ldrh	r2, [r7, #4]
 80015d8:	88fb      	ldrh	r3, [r7, #6]
 80015da:	4413      	add	r3, r2
 80015dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015e0:	dc09      	bgt.n	80015f6 <dwt_writetxdata+0x30>
    {
        // Write the data to the IC TX buffer, (-2 bytes for auto generated CRC)
        dwt_writetodevice( TX_BUFFER_ID, txBufferOffset, txFrameLength-2, txFrameBytes);
 80015e2:	88fb      	ldrh	r3, [r7, #6]
 80015e4:	3b02      	subs	r3, #2
 80015e6:	461a      	mov	r2, r3
 80015e8:	88b9      	ldrh	r1, [r7, #4]
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	2009      	movs	r0, #9
 80015ee:	f000 f857 	bl	80016a0 <dwt_writetodevice>
        return DWT_SUCCESS;
 80015f2:	2300      	movs	r3, #0
 80015f4:	e001      	b.n	80015fa <dwt_writetxdata+0x34>
    }
    else
    {
        return DWT_ERROR;
 80015f6:	f04f 33ff 	mov.w	r3, #4294967295
    }
} // end dwt_writetxdata()
 80015fa:	4618      	mov	r0, r3
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
	...

08001604 <dwt_writetxfctrl>:
 * output parameters
 *
 * no return value
 */
void dwt_writetxfctrl(uint16 txFrameLength, uint16 txBufferOffset, int ranging)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	603a      	str	r2, [r7, #0]
 800160e:	80fb      	strh	r3, [r7, #6]
 8001610:	460b      	mov	r3, r1
 8001612:	80bb      	strh	r3, [r7, #4]
    assert((ranging == 0) || (ranging == 1))
#endif

    // Write the frame length to the TX frame control register
    // pdw1000local->txFCTRL has kept configured bit rate information
    uint32 reg32 = pdw1000local->txFCTRL | txFrameLength | ((uint32)txBufferOffset << TX_FCTRL_TXBOFFS_SHFT) | ((uint32)ranging << TX_FCTRL_TR_SHFT);
 8001614:	4b0a      	ldr	r3, [pc, #40]	; (8001640 <dwt_writetxfctrl+0x3c>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	68da      	ldr	r2, [r3, #12]
 800161a:	88fb      	ldrh	r3, [r7, #6]
 800161c:	431a      	orrs	r2, r3
 800161e:	88bb      	ldrh	r3, [r7, #4]
 8001620:	059b      	lsls	r3, r3, #22
 8001622:	431a      	orrs	r2, r3
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	03db      	lsls	r3, r3, #15
 8001628:	4313      	orrs	r3, r2
 800162a:	60fb      	str	r3, [r7, #12]
    dwt_write32bitreg(TX_FCTRL_ID, reg32);
 800162c:	68fa      	ldr	r2, [r7, #12]
 800162e:	2100      	movs	r1, #0
 8001630:	2008      	movs	r0, #8
 8001632:	f000 f966 	bl	8001902 <dwt_write32bitoffsetreg>
} // end dwt_writetxfctrl()
 8001636:	bf00      	nop
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000000 	.word	0x20000000

08001644 <dwt_readrxdata>:
 * output parameters
 *
 * no return value
 */
void dwt_readrxdata(uint8 *buffer, uint16 length, uint16 rxBufferOffset)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	460b      	mov	r3, r1
 800164e:	807b      	strh	r3, [r7, #2]
 8001650:	4613      	mov	r3, r2
 8001652:	803b      	strh	r3, [r7, #0]
    dwt_readfromdevice(RX_BUFFER_ID,rxBufferOffset,length,buffer) ;
 8001654:	887a      	ldrh	r2, [r7, #2]
 8001656:	8839      	ldrh	r1, [r7, #0]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2011      	movs	r0, #17
 800165c:	f000 f877 	bl	800174e <dwt_readfromdevice>
}
 8001660:	bf00      	nop
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <dwt_readtxtimestamp>:
 * output parameters - the timestamp buffer will contain the value after the function call
 *
 * no return value
 */
void dwt_readtxtimestamp(uint8 * timestamp)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
    dwt_readfromdevice(TX_TIME_ID, TX_TIME_TX_STAMP_OFFSET, TX_TIME_TX_STAMP_LEN, timestamp) ; // Read bytes directly into buffer
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2205      	movs	r2, #5
 8001674:	2100      	movs	r1, #0
 8001676:	2017      	movs	r0, #23
 8001678:	f000 f869 	bl	800174e <dwt_readfromdevice>
}
 800167c:	bf00      	nop
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <dwt_readrxtimestamp>:
 * output parameters - the timestamp buffer will contain the value after the function call
 *
 * no return value
 */
void dwt_readrxtimestamp(uint8 * timestamp)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
    dwt_readfromdevice(RX_TIME_ID, RX_TIME_RX_STAMP_OFFSET, RX_TIME_RX_STAMP_LEN, timestamp) ; // Get the adjusted time of arrival
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2205      	movs	r2, #5
 8001690:	2100      	movs	r1, #0
 8001692:	2015      	movs	r0, #21
 8001694:	f000 f85b 	bl	800174e <dwt_readfromdevice>
}
 8001698:	bf00      	nop
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <dwt_writetodevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    const uint8   *buffer
)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60ba      	str	r2, [r7, #8]
 80016a8:	607b      	str	r3, [r7, #4]
 80016aa:	4603      	mov	r3, r0
 80016ac:	81fb      	strh	r3, [r7, #14]
 80016ae:	460b      	mov	r3, r1
 80016b0:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting WRITE operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 80016b6:	89bb      	ldrh	r3, [r7, #12]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d10c      	bne.n	80016d6 <dwt_writetodevice+0x36>
    {
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 80016bc:	89fb      	ldrh	r3, [r7, #14]
 80016be:	b2da      	uxtb	r2, r3
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	1c59      	adds	r1, r3, #1
 80016c4:	6179      	str	r1, [r7, #20]
 80016c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	3318      	adds	r3, #24
 80016ce:	443b      	add	r3, r7
 80016d0:	f803 2c08 	strb.w	r2, [r3, #-8]
 80016d4:	e02f      	b.n	8001736 <dwt_writetodevice+0x96>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 80016d6:	89fb      	ldrh	r3, [r7, #14]
 80016d8:	b2da      	uxtb	r2, r3
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	1c59      	adds	r1, r3, #1
 80016de:	6179      	str	r1, [r7, #20]
 80016e0:	f062 023f 	orn	r2, r2, #63	; 0x3f
 80016e4:	b2d2      	uxtb	r2, r2
 80016e6:	3318      	adds	r3, #24
 80016e8:	443b      	add	r3, r7
 80016ea:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 80016ee:	89bb      	ldrh	r3, [r7, #12]
 80016f0:	2b7f      	cmp	r3, #127	; 0x7f
 80016f2:	d809      	bhi.n	8001708 <dwt_writetodevice+0x68>
        {
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	1c5a      	adds	r2, r3, #1
 80016f8:	617a      	str	r2, [r7, #20]
 80016fa:	89ba      	ldrh	r2, [r7, #12]
 80016fc:	b2d2      	uxtb	r2, r2
 80016fe:	3318      	adds	r3, #24
 8001700:	443b      	add	r3, r7
 8001702:	f803 2c08 	strb.w	r2, [r3, #-8]
 8001706:	e016      	b.n	8001736 <dwt_writetodevice+0x96>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8001708:	89bb      	ldrh	r3, [r7, #12]
 800170a:	b2da      	uxtb	r2, r3
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	1c59      	adds	r1, r3, #1
 8001710:	6179      	str	r1, [r7, #20]
 8001712:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001716:	b2d2      	uxtb	r2, r2
 8001718:	3318      	adds	r3, #24
 800171a:	443b      	add	r3, r7
 800171c:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8001720:	89bb      	ldrh	r3, [r7, #12]
 8001722:	09db      	lsrs	r3, r3, #7
 8001724:	b299      	uxth	r1, r3
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	1c5a      	adds	r2, r3, #1
 800172a:	617a      	str	r2, [r7, #20]
 800172c:	b2ca      	uxtb	r2, r1
 800172e:	3318      	adds	r3, #24
 8001730:	443b      	add	r3, r7
 8001732:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Write it to the SPI
    writetospi(cnt,header,length,buffer);
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	b298      	uxth	r0, r3
 800173a:	f107 0110 	add.w	r1, r7, #16
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	68ba      	ldr	r2, [r7, #8]
 8001742:	f000 fbd5 	bl	8001ef0 <writetospi>
} // end dwt_writetodevice()
 8001746:	bf00      	nop
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <dwt_readfromdevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    uint8         *buffer
)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b086      	sub	sp, #24
 8001752:	af00      	add	r7, sp, #0
 8001754:	60ba      	str	r2, [r7, #8]
 8001756:	607b      	str	r3, [r7, #4]
 8001758:	4603      	mov	r3, r0
 800175a:	81fb      	strh	r3, [r7, #14]
 800175c:	460b      	mov	r3, r1
 800175e:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8001760:	2300      	movs	r3, #0
 8001762:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting READ operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8001764:	89bb      	ldrh	r3, [r7, #12]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d109      	bne.n	800177e <dwt_readfromdevice+0x30>
    {
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	1c5a      	adds	r2, r3, #1
 800176e:	617a      	str	r2, [r7, #20]
 8001770:	89fa      	ldrh	r2, [r7, #14]
 8001772:	b2d2      	uxtb	r2, r2
 8001774:	3318      	adds	r3, #24
 8001776:	443b      	add	r3, r7
 8001778:	f803 2c08 	strb.w	r2, [r3, #-8]
 800177c:	e02f      	b.n	80017de <dwt_readfromdevice+0x90>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 800177e:	89fb      	ldrh	r3, [r7, #14]
 8001780:	b2da      	uxtb	r2, r3
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	1c59      	adds	r1, r3, #1
 8001786:	6179      	str	r1, [r7, #20]
 8001788:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800178c:	b2d2      	uxtb	r2, r2
 800178e:	3318      	adds	r3, #24
 8001790:	443b      	add	r3, r7
 8001792:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8001796:	89bb      	ldrh	r3, [r7, #12]
 8001798:	2b7f      	cmp	r3, #127	; 0x7f
 800179a:	d809      	bhi.n	80017b0 <dwt_readfromdevice+0x62>
        {
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	1c5a      	adds	r2, r3, #1
 80017a0:	617a      	str	r2, [r7, #20]
 80017a2:	89ba      	ldrh	r2, [r7, #12]
 80017a4:	b2d2      	uxtb	r2, r2
 80017a6:	3318      	adds	r3, #24
 80017a8:	443b      	add	r3, r7
 80017aa:	f803 2c08 	strb.w	r2, [r3, #-8]
 80017ae:	e016      	b.n	80017de <dwt_readfromdevice+0x90>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 80017b0:	89bb      	ldrh	r3, [r7, #12]
 80017b2:	b2da      	uxtb	r2, r3
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	1c59      	adds	r1, r3, #1
 80017b8:	6179      	str	r1, [r7, #20]
 80017ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80017be:	b2d2      	uxtb	r2, r2
 80017c0:	3318      	adds	r3, #24
 80017c2:	443b      	add	r3, r7
 80017c4:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 80017c8:	89bb      	ldrh	r3, [r7, #12]
 80017ca:	09db      	lsrs	r3, r3, #7
 80017cc:	b299      	uxth	r1, r3
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	1c5a      	adds	r2, r3, #1
 80017d2:	617a      	str	r2, [r7, #20]
 80017d4:	b2ca      	uxtb	r2, r1
 80017d6:	3318      	adds	r3, #24
 80017d8:	443b      	add	r3, r7
 80017da:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Do the read from the SPI
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	b298      	uxth	r0, r3
 80017e2:	f107 0110 	add.w	r1, r7, #16
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	68ba      	ldr	r2, [r7, #8]
 80017ea:	f000 fbb5 	bl	8001f58 <readfromspi>
} // end dwt_readfromdevice()
 80017ee:	bf00      	nop
 80017f0:	3718      	adds	r7, #24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <dwt_read32bitoffsetreg>:
 * output parameters
 *
 * returns 32 bit register value
 */
uint32 dwt_read32bitoffsetreg(int regFileID, int regOffset)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b086      	sub	sp, #24
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
 80017fe:	6039      	str	r1, [r7, #0]
    uint32  regval = 0 ;
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]
    int     j ;
    uint8   buffer[4] ;

    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	b298      	uxth	r0, r3
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	b299      	uxth	r1, r3
 800180c:	f107 030c 	add.w	r3, r7, #12
 8001810:	2204      	movs	r2, #4
 8001812:	f7ff ff9c 	bl	800174e <dwt_readfromdevice>

    for (j = 3 ; j >= 0 ; j --)
 8001816:	2303      	movs	r3, #3
 8001818:	613b      	str	r3, [r7, #16]
 800181a:	e00b      	b.n	8001834 <dwt_read32bitoffsetreg+0x3e>
    {
        regval = (regval << 8) + buffer[j] ;
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	021b      	lsls	r3, r3, #8
 8001820:	f107 010c 	add.w	r1, r7, #12
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	440a      	add	r2, r1
 8001828:	7812      	ldrb	r2, [r2, #0]
 800182a:	4413      	add	r3, r2
 800182c:	617b      	str	r3, [r7, #20]
    for (j = 3 ; j >= 0 ; j --)
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	3b01      	subs	r3, #1
 8001832:	613b      	str	r3, [r7, #16]
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	2b00      	cmp	r3, #0
 8001838:	daf0      	bge.n	800181c <dwt_read32bitoffsetreg+0x26>
    }
    return regval ;
 800183a:	697b      	ldr	r3, [r7, #20]

} // end dwt_read32bitoffsetreg()
 800183c:	4618      	mov	r0, r3
 800183e:	3718      	adds	r7, #24
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <dwt_read16bitoffsetreg>:
 * output parameters
 *
 * returns 16 bit register value
 */
uint16 dwt_read16bitoffsetreg(int regFileID, int regOffset)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
    uint16  regval = 0 ;
 800184e:	2300      	movs	r3, #0
 8001850:	81fb      	strh	r3, [r7, #14]
    uint8   buffer[2] ;

    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	b298      	uxth	r0, r3
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	b299      	uxth	r1, r3
 800185a:	f107 030c 	add.w	r3, r7, #12
 800185e:	2202      	movs	r2, #2
 8001860:	f7ff ff75 	bl	800174e <dwt_readfromdevice>

    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
 8001864:	7b7b      	ldrb	r3, [r7, #13]
 8001866:	b29b      	uxth	r3, r3
 8001868:	021b      	lsls	r3, r3, #8
 800186a:	b29a      	uxth	r2, r3
 800186c:	7b3b      	ldrb	r3, [r7, #12]
 800186e:	b29b      	uxth	r3, r3
 8001870:	4413      	add	r3, r2
 8001872:	81fb      	strh	r3, [r7, #14]
    return regval ;
 8001874:	89fb      	ldrh	r3, [r7, #14]

} // end dwt_read16bitoffsetreg()
 8001876:	4618      	mov	r0, r3
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <dwt_read8bitoffsetreg>:
 * output parameters
 *
 * returns 8-bit register value
 */
uint8 dwt_read8bitoffsetreg(int regFileID, int regOffset)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b084      	sub	sp, #16
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
 8001886:	6039      	str	r1, [r7, #0]
    uint8 regval;

    dwt_readfromdevice(regFileID, regOffset, 1, &regval);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	b298      	uxth	r0, r3
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	b299      	uxth	r1, r3
 8001890:	f107 030f 	add.w	r3, r7, #15
 8001894:	2201      	movs	r2, #1
 8001896:	f7ff ff5a 	bl	800174e <dwt_readfromdevice>

    return regval ;
 800189a:	7bfb      	ldrb	r3, [r7, #15]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3710      	adds	r7, #16
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <dwt_write8bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write8bitoffsetreg(int regFileID, int regOffset, uint8 regval)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	4613      	mov	r3, r2
 80018b0:	71fb      	strb	r3, [r7, #7]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	b298      	uxth	r0, r3
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	b299      	uxth	r1, r3
 80018ba:	1dfb      	adds	r3, r7, #7
 80018bc:	2201      	movs	r2, #1
 80018be:	f7ff feef 	bl	80016a0 <dwt_writetodevice>
}
 80018c2:	bf00      	nop
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <dwt_write16bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write16bitoffsetreg(int regFileID, int regOffset, uint16 regval)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b086      	sub	sp, #24
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	60f8      	str	r0, [r7, #12]
 80018d2:	60b9      	str	r1, [r7, #8]
 80018d4:	4613      	mov	r3, r2
 80018d6:	80fb      	strh	r3, [r7, #6]
    uint8   buffer[2] ;

    buffer[0] = regval & 0xFF;
 80018d8:	88fb      	ldrh	r3, [r7, #6]
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	753b      	strb	r3, [r7, #20]
    buffer[1] = regval >> 8 ;
 80018de:	88fb      	ldrh	r3, [r7, #6]
 80018e0:	0a1b      	lsrs	r3, r3, #8
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	757b      	strb	r3, [r7, #21]

    dwt_writetodevice(regFileID,regOffset,2,buffer);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	b298      	uxth	r0, r3
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	b299      	uxth	r1, r3
 80018f0:	f107 0314 	add.w	r3, r7, #20
 80018f4:	2202      	movs	r2, #2
 80018f6:	f7ff fed3 	bl	80016a0 <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 80018fa:	bf00      	nop
 80018fc:	3718      	adds	r7, #24
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <dwt_write32bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write32bitoffsetreg(int regFileID, int regOffset, uint32 regval)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b086      	sub	sp, #24
 8001906:	af00      	add	r7, sp, #0
 8001908:	60f8      	str	r0, [r7, #12]
 800190a:	60b9      	str	r1, [r7, #8]
 800190c:	607a      	str	r2, [r7, #4]
    int     j ;
    uint8   buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
 800190e:	2300      	movs	r3, #0
 8001910:	617b      	str	r3, [r7, #20]
 8001912:	e00d      	b.n	8001930 <dwt_write32bitoffsetreg+0x2e>
    {
        buffer[j] = regval & 0xff ;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	b2d9      	uxtb	r1, r3
 8001918:	f107 0210 	add.w	r2, r7, #16
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	4413      	add	r3, r2
 8001920:	460a      	mov	r2, r1
 8001922:	701a      	strb	r2, [r3, #0]
        regval >>= 8 ;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	0a1b      	lsrs	r3, r3, #8
 8001928:	607b      	str	r3, [r7, #4]
    for ( j = 0 ; j < 4 ; j++ )
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	3301      	adds	r3, #1
 800192e:	617b      	str	r3, [r7, #20]
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	2b03      	cmp	r3, #3
 8001934:	ddee      	ble.n	8001914 <dwt_write32bitoffsetreg+0x12>
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	b298      	uxth	r0, r3
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	b299      	uxth	r1, r3
 800193e:	f107 0310 	add.w	r3, r7, #16
 8001942:	2204      	movs	r2, #4
 8001944:	f7ff feac 	bl	80016a0 <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 8001948:	bf00      	nop
 800194a:	3718      	adds	r7, #24
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <_dwt_otpread>:
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32 _dwt_otpread(uint16 address)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	80fb      	strh	r3, [r7, #6]
    uint32 ret_data;

    // Write the address
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);
 800195a:	88fb      	ldrh	r3, [r7, #6]
 800195c:	461a      	mov	r2, r3
 800195e:	2104      	movs	r1, #4
 8001960:	202d      	movs	r0, #45	; 0x2d
 8001962:	f7ff ffb2 	bl	80018ca <dwt_write16bitoffsetreg>

    // Perform OTP Read - Manual read mode has to be set
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
 8001966:	2203      	movs	r2, #3
 8001968:	2106      	movs	r1, #6
 800196a:	202d      	movs	r0, #45	; 0x2d
 800196c:	f7ff ff9a 	bl	80018a4 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
 8001970:	2200      	movs	r2, #0
 8001972:	2106      	movs	r1, #6
 8001974:	202d      	movs	r0, #45	; 0x2d
 8001976:	f7ff ff95 	bl	80018a4 <dwt_write8bitoffsetreg>

    // Read read data, available 40ns after rising edge of OTP_READ
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
 800197a:	210a      	movs	r1, #10
 800197c:	202d      	movs	r0, #45	; 0x2d
 800197e:	f7ff ff3a 	bl	80017f6 <dwt_read32bitoffsetreg>
 8001982:	60f8      	str	r0, [r7, #12]

    // Return the 32bit of read data
    return ret_data;
 8001984:	68fb      	ldr	r3, [r7, #12]
}
 8001986:	4618      	mov	r0, r3
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <_dwt_aonarrayupload>:
 * output parameters
 *
 * no return value
 */
void _dwt_aonarrayupload(void)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	af00      	add	r7, sp, #0
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
 8001992:	2200      	movs	r2, #0
 8001994:	2102      	movs	r1, #2
 8001996:	202c      	movs	r0, #44	; 0x2c
 8001998:	f7ff ff84 	bl	80018a4 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
 800199c:	2202      	movs	r2, #2
 800199e:	2102      	movs	r1, #2
 80019a0:	202c      	movs	r0, #44	; 0x2c
 80019a2:	f7ff ff7f 	bl	80018a4 <dwt_write8bitoffsetreg>
}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}

080019aa <_dwt_configlde>:
 * output parameters
 *
 * no return value
 */
void _dwt_configlde(int prfIndex)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b082      	sub	sp, #8
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
 80019b2:	226d      	movs	r2, #109	; 0x6d
 80019b4:	f640 0106 	movw	r1, #2054	; 0x806
 80019b8:	202e      	movs	r0, #46	; 0x2e
 80019ba:	f7ff ff73 	bl	80018a4 <dwt_write8bitoffsetreg>

    if(prfIndex)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d007      	beq.n	80019d4 <_dwt_configlde+0x2a>
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
 80019c4:	f240 6207 	movw	r2, #1543	; 0x607
 80019c8:	f641 0106 	movw	r1, #6150	; 0x1806
 80019cc:	202e      	movs	r0, #46	; 0x2e
 80019ce:	f7ff ff7c 	bl	80018ca <dwt_write16bitoffsetreg>
    }
    else
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
    }
}
 80019d2:	e006      	b.n	80019e2 <_dwt_configlde+0x38>
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
 80019d4:	f241 6207 	movw	r2, #5639	; 0x1607
 80019d8:	f641 0106 	movw	r1, #6150	; 0x1806
 80019dc:	202e      	movs	r0, #46	; 0x2e
 80019de:	f7ff ff74 	bl	80018ca <dwt_write16bitoffsetreg>
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <_dwt_loaducodefromrom>:
 * output parameters
 *
 * no return value
 */
void _dwt_loaducodefromrom(void)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	af00      	add	r7, sp, #0
    // Set up clocks
    _dwt_enableclocks(FORCE_LDE);
 80019ee:	200e      	movs	r0, #14
 80019f0:	f000 f82a 	bl	8001a48 <_dwt_enableclocks>

    // Kick off the LDE load
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
 80019f4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80019f8:	2106      	movs	r1, #6
 80019fa:	202d      	movs	r0, #45	; 0x2d
 80019fc:	f7ff ff65 	bl	80018ca <dwt_write16bitoffsetreg>

    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 8001a00:	2001      	movs	r0, #1
 8001a02:	f000 fa69 	bl	8001ed8 <deca_sleep>

    // Default clocks (ENABLE_ALL_SEQ)
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 8001a06:	2001      	movs	r0, #1
 8001a08:	f000 f81e 	bl	8001a48 <_dwt_enableclocks>
}
 8001a0c:	bf00      	nop
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <dwt_setrxaftertxdelay>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxaftertxdelay(uint32 rxDelayTime)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
    uint32 val = dwt_read32bitreg(ACK_RESP_T_ID) ; // Read ACK_RESP_T_ID register
 8001a18:	2100      	movs	r1, #0
 8001a1a:	201a      	movs	r0, #26
 8001a1c:	f7ff feeb 	bl	80017f6 <dwt_read32bitoffsetreg>
 8001a20:	60f8      	str	r0, [r7, #12]

    val &= ~(ACK_RESP_T_W4R_TIM_MASK) ; // Clear the timer (19:0)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	0d1b      	lsrs	r3, r3, #20
 8001a26:	051b      	lsls	r3, r3, #20
 8001a28:	60fb      	str	r3, [r7, #12]

    val |= (rxDelayTime & ACK_RESP_T_W4R_TIM_MASK) ; // In UWB microseconds (e.g. turn the receiver on 20uus after TX)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(ACK_RESP_T_ID, val) ;
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	2100      	movs	r1, #0
 8001a3a:	201a      	movs	r0, #26
 8001a3c:	f7ff ff61 	bl	8001902 <dwt_write32bitoffsetreg>
}
 8001a40:	bf00      	nop
 8001a42:	3710      	adds	r7, #16
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <_dwt_enableclocks>:
 * output parameters none
 *
 * no return value
 */
void _dwt_enableclocks(int clocks)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
    uint8 reg[2];

    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
 8001a50:	f107 030c 	add.w	r3, r7, #12
 8001a54:	2202      	movs	r2, #2
 8001a56:	2100      	movs	r1, #0
 8001a58:	2036      	movs	r0, #54	; 0x36
 8001a5a:	f7ff fe78 	bl	800174e <dwt_readfromdevice>
    switch(clocks)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2b0e      	cmp	r3, #14
 8001a62:	d876      	bhi.n	8001b52 <_dwt_enableclocks+0x10a>
 8001a64:	a201      	add	r2, pc, #4	; (adr r2, 8001a6c <_dwt_enableclocks+0x24>)
 8001a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a6a:	bf00      	nop
 8001a6c:	08001ab9 	.word	0x08001ab9
 8001a70:	08001aa9 	.word	0x08001aa9
 8001a74:	08001acf 	.word	0x08001acf
 8001a78:	08001b53 	.word	0x08001b53
 8001a7c:	08001b53 	.word	0x08001b53
 8001a80:	08001b53 	.word	0x08001b53
 8001a84:	08001b53 	.word	0x08001b53
 8001a88:	08001ae5 	.word	0x08001ae5
 8001a8c:	08001b05 	.word	0x08001b05
 8001a90:	08001b53 	.word	0x08001b53
 8001a94:	08001b53 	.word	0x08001b53
 8001a98:	08001b1b 	.word	0x08001b1b
 8001a9c:	08001b27 	.word	0x08001b27
 8001aa0:	08001b33 	.word	0x08001b33
 8001aa4:	08001b49 	.word	0x08001b49
    {
        case ENABLE_ALL_SEQ:
        {
            reg[0] = 0x00 ;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	733b      	strb	r3, [r7, #12]
            reg[1] = reg[1] & 0xfe;
 8001aac:	7b7b      	ldrb	r3, [r7, #13]
 8001aae:	f023 0301 	bic.w	r3, r3, #1
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001ab6:	e04d      	b.n	8001b54 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_XTI:
        {
            // System and RX
            reg[0] = 0x01 | (reg[0] & 0xfc);
 8001ab8:	7b3b      	ldrb	r3, [r7, #12]
 8001aba:	b25b      	sxtb	r3, r3
 8001abc:	f023 0303 	bic.w	r3, r3, #3
 8001ac0:	b25b      	sxtb	r3, r3
 8001ac2:	f043 0301 	orr.w	r3, r3, #1
 8001ac6:	b25b      	sxtb	r3, r3
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	733b      	strb	r3, [r7, #12]
        }
        break;
 8001acc:	e042      	b.n	8001b54 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_PLL:
        {
            // System
            reg[0] = 0x02 | (reg[0] & 0xfc);
 8001ace:	7b3b      	ldrb	r3, [r7, #12]
 8001ad0:	b25b      	sxtb	r3, r3
 8001ad2:	f023 0303 	bic.w	r3, r3, #3
 8001ad6:	b25b      	sxtb	r3, r3
 8001ad8:	f043 0302 	orr.w	r3, r3, #2
 8001adc:	b25b      	sxtb	r3, r3
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	733b      	strb	r3, [r7, #12]
        }
        break;
 8001ae2:	e037      	b.n	8001b54 <_dwt_enableclocks+0x10c>
        case READ_ACC_ON:
        {
            reg[0] = 0x48 | (reg[0] & 0xb3);
 8001ae4:	7b3b      	ldrb	r3, [r7, #12]
 8001ae6:	b25b      	sxtb	r3, r3
 8001ae8:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8001aec:	b25b      	sxtb	r3, r3
 8001aee:	f043 0348 	orr.w	r3, r3, #72	; 0x48
 8001af2:	b25b      	sxtb	r3, r3
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x80 | reg[1];
 8001af8:	7b7b      	ldrb	r3, [r7, #13]
 8001afa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001b02:	e027      	b.n	8001b54 <_dwt_enableclocks+0x10c>
        case READ_ACC_OFF:
        {
            reg[0] = reg[0] & 0xb3;
 8001b04:	7b3b      	ldrb	r3, [r7, #12]
 8001b06:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x7f & reg[1];
 8001b0e:	7b7b      	ldrb	r3, [r7, #13]
 8001b10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001b18:	e01c      	b.n	8001b54 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_ON:
        {
            reg[1] = 0x02 | reg[1];
 8001b1a:	7b7b      	ldrb	r3, [r7, #13]
 8001b1c:	f043 0302 	orr.w	r3, r3, #2
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001b24:	e016      	b.n	8001b54 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_OFF:
        {
            reg[1] = reg[1] & 0xfd;
 8001b26:	7b7b      	ldrb	r3, [r7, #13]
 8001b28:	f023 0302 	bic.w	r3, r3, #2
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001b30:	e010      	b.n	8001b54 <_dwt_enableclocks+0x10c>
        case FORCE_TX_PLL:
        {
            reg[0] = 0x20 | (reg[0] & 0xcf);
 8001b32:	7b3b      	ldrb	r3, [r7, #12]
 8001b34:	b25b      	sxtb	r3, r3
 8001b36:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001b3a:	b25b      	sxtb	r3, r3
 8001b3c:	f043 0320 	orr.w	r3, r3, #32
 8001b40:	b25b      	sxtb	r3, r3
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	733b      	strb	r3, [r7, #12]
        }
        break;
 8001b46:	e005      	b.n	8001b54 <_dwt_enableclocks+0x10c>
        case FORCE_LDE:
        {
            reg[0] = 0x01;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x03;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001b50:	e000      	b.n	8001b54 <_dwt_enableclocks+0x10c>
        default:
        break;
 8001b52:	bf00      	nop
    }


    // Need to write lower byte separately before setting the higher byte(s)
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
 8001b54:	f107 030c 	add.w	r3, r7, #12
 8001b58:	2201      	movs	r2, #1
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	2036      	movs	r0, #54	; 0x36
 8001b5e:	f7ff fd9f 	bl	80016a0 <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
 8001b62:	f107 030c 	add.w	r3, r7, #12
 8001b66:	3301      	adds	r3, #1
 8001b68:	2201      	movs	r2, #1
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	2036      	movs	r0, #54	; 0x36
 8001b6e:	f7ff fd97 	bl	80016a0 <dwt_writetodevice>

} // end _dwt_enableclocks()
 8001b72:	bf00      	nop
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop

08001b7c <_dwt_disablesequencing>:
 * output parameters none
 *
 * no return value
 */
void _dwt_disablesequencing(void) // Disable sequencing and go to state "INIT"
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 8001b80:	2000      	movs	r0, #0
 8001b82:	f7ff ff61 	bl	8001a48 <_dwt_enableclocks>

    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
 8001b86:	2200      	movs	r2, #0
 8001b88:	2104      	movs	r1, #4
 8001b8a:	2036      	movs	r0, #54	; 0x36
 8001b8c:	f7ff fe9d 	bl	80018ca <dwt_write16bitoffsetreg>
}
 8001b90:	bf00      	nop
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <dwt_setdelayedtrxtime>:
 * output parameters none
 *
 * no return value
 */
void dwt_setdelayedtrxtime(uint32 starttime)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
    dwt_write32bitoffsetreg(DX_TIME_ID, 1, starttime); // Write at offset 1 as the lower 9 bits of this register are ignored
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	2101      	movs	r1, #1
 8001ba0:	200a      	movs	r0, #10
 8001ba2:	f7ff feae 	bl	8001902 <dwt_write32bitoffsetreg>

} // end dwt_setdelayedtrxtime()
 8001ba6:	bf00      	nop
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
	...

08001bb0 <dwt_starttx>:
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed transmission will be cancelled if the delayed time has passed)
 */

int dwt_starttx(uint8 mode)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	71fb      	strb	r3, [r7, #7]
    int retval = DWT_SUCCESS ;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60fb      	str	r3, [r7, #12]
    uint8 temp  = 0x00;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	72fb      	strb	r3, [r7, #11]
    uint16 checkTxOK = 0 ;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	813b      	strh	r3, [r7, #8]

    if(mode & DWT_RESPONSE_EXPECTED)
 8001bc6:	79fb      	ldrb	r3, [r7, #7]
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d005      	beq.n	8001bdc <dwt_starttx+0x2c>
    {
        temp = (uint8)SYS_CTRL_WAIT4RESP ; // Set wait4response bit
 8001bd0:	2380      	movs	r3, #128	; 0x80
 8001bd2:	72fb      	strb	r3, [r7, #11]
        pdw1000local->wait4resp = 1;
 8001bd4:	4b1c      	ldr	r3, [pc, #112]	; (8001c48 <dwt_starttx+0x98>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	755a      	strb	r2, [r3, #21]
    }

    if (mode & DWT_START_TX_DELAYED)
 8001bdc:	79fb      	ldrb	r3, [r7, #7]
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d020      	beq.n	8001c28 <dwt_starttx+0x78>
    {
        // Both SYS_CTRL_TXSTRT and SYS_CTRL_TXDLYS to correctly enable TX
        temp |= (uint8)(SYS_CTRL_TXDLYS | SYS_CTRL_TXSTRT) ;
 8001be6:	7afb      	ldrb	r3, [r7, #11]
 8001be8:	f043 0306 	orr.w	r3, r3, #6
 8001bec:	72fb      	strb	r3, [r7, #11]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8001bee:	7afb      	ldrb	r3, [r7, #11]
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	200d      	movs	r0, #13
 8001bf6:	f7ff fe55 	bl	80018a4 <dwt_write8bitoffsetreg>
        checkTxOK = dwt_read16bitoffsetreg(SYS_STATUS_ID, 3); // Read at offset 3 to get the upper 2 bytes out of 5
 8001bfa:	2103      	movs	r1, #3
 8001bfc:	200f      	movs	r0, #15
 8001bfe:	f7ff fe21 	bl	8001844 <dwt_read16bitoffsetreg>
 8001c02:	4603      	mov	r3, r0
 8001c04:	813b      	strh	r3, [r7, #8]
        if ((checkTxOK & SYS_STATUS_TXERR) == 0) // Transmit Delayed Send set over Half a Period away or Power Up error (there is enough time to send but not to power up individual blocks).
 8001c06:	893b      	ldrh	r3, [r7, #8]
 8001c08:	f403 6381 	and.w	r3, r3, #1032	; 0x408
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d102      	bne.n	8001c16 <dwt_starttx+0x66>
        {
            retval = DWT_SUCCESS ; // All okay
 8001c10:	2300      	movs	r3, #0
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	e012      	b.n	8001c3c <dwt_starttx+0x8c>
        }
        else
        {
            // If HPDWARN or TXPUTE are set this indicates that the TXDLYS was set too late for the specified DX_TIME.
            // remedial action is to cancel delayed send and report error
            dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF);
 8001c16:	2240      	movs	r2, #64	; 0x40
 8001c18:	2100      	movs	r1, #0
 8001c1a:	200d      	movs	r0, #13
 8001c1c:	f7ff fe42 	bl	80018a4 <dwt_write8bitoffsetreg>
            retval = DWT_ERROR ; // Failed !
 8001c20:	f04f 33ff 	mov.w	r3, #4294967295
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	e009      	b.n	8001c3c <dwt_starttx+0x8c>
        }
    }
    else
    {
        temp |= (uint8)SYS_CTRL_TXSTRT ;
 8001c28:	7afb      	ldrb	r3, [r7, #11]
 8001c2a:	f043 0302 	orr.w	r3, r3, #2
 8001c2e:	72fb      	strb	r3, [r7, #11]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8001c30:	7afb      	ldrb	r3, [r7, #11]
 8001c32:	461a      	mov	r2, r3
 8001c34:	2100      	movs	r1, #0
 8001c36:	200d      	movs	r0, #13
 8001c38:	f7ff fe34 	bl	80018a4 <dwt_write8bitoffsetreg>
    }

    return retval;
 8001c3c:	68fb      	ldr	r3, [r7, #12]

} // end dwt_starttx()
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20000000 	.word	0x20000000

08001c4c <dwt_forcetrxoff>:
 * output parameters
 *
 * no return value
 */
void dwt_forcetrxoff(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
    decaIrqStatus_t stat ;
    uint32 mask;

    mask = dwt_read32bitreg(SYS_MASK_ID) ; // Read set interrupt mask
 8001c52:	2100      	movs	r1, #0
 8001c54:	200e      	movs	r0, #14
 8001c56:	f7ff fdce 	bl	80017f6 <dwt_read32bitoffsetreg>
 8001c5a:	6078      	str	r0, [r7, #4]

    // Need to beware of interrupts occurring in the middle of following read modify write cycle
    // We can disable the radio, but before the status is cleared an interrupt can be set (e.g. the
    // event has just happened before the radio was disabled)
    // thus we need to disable interrupt during this operation
    stat = decamutexon() ;
 8001c5c:	f000 f91e 	bl	8001e9c <decamutexon>
 8001c60:	6038      	str	r0, [r7, #0]

    dwt_write32bitreg(SYS_MASK_ID, 0) ; // Clear interrupt mask - so we don't get any unwanted events
 8001c62:	2200      	movs	r2, #0
 8001c64:	2100      	movs	r1, #0
 8001c66:	200e      	movs	r0, #14
 8001c68:	f7ff fe4b 	bl	8001902 <dwt_write32bitoffsetreg>

    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF) ; // Disable the radio
 8001c6c:	2240      	movs	r2, #64	; 0x40
 8001c6e:	2100      	movs	r1, #0
 8001c70:	200d      	movs	r0, #13
 8001c72:	f7ff fe17 	bl	80018a4 <dwt_write8bitoffsetreg>

    // Forcing Transceiver off - so we do not want to see any new events that may have happened
    dwt_write32bitreg(SYS_STATUS_ID, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_GOOD));
 8001c76:	4a0b      	ldr	r2, [pc, #44]	; (8001ca4 <dwt_forcetrxoff+0x58>)
 8001c78:	2100      	movs	r1, #0
 8001c7a:	200f      	movs	r0, #15
 8001c7c:	f7ff fe41 	bl	8001902 <dwt_write32bitoffsetreg>

    dwt_syncrxbufptrs();
 8001c80:	f000 f814 	bl	8001cac <dwt_syncrxbufptrs>

    dwt_write32bitreg(SYS_MASK_ID, mask) ; // Set interrupt mask to what it was
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	2100      	movs	r1, #0
 8001c88:	200e      	movs	r0, #14
 8001c8a:	f7ff fe3a 	bl	8001902 <dwt_write32bitoffsetreg>

    // Enable/restore interrupts again...
    decamutexoff(stat) ;
 8001c8e:	6838      	ldr	r0, [r7, #0]
 8001c90:	f000 f915 	bl	8001ebe <decamutexoff>
    pdw1000local->wait4resp = 0;
 8001c94:	4b04      	ldr	r3, [pc, #16]	; (8001ca8 <dwt_forcetrxoff+0x5c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	755a      	strb	r2, [r3, #21]

} // end deviceforcetrxoff()
 8001c9c:	bf00      	nop
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	2427fff8 	.word	0x2427fff8
 8001ca8:	20000000 	.word	0x20000000

08001cac <dwt_syncrxbufptrs>:
 * output parameters
 *
 * no return value
 */
void dwt_syncrxbufptrs(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
    uint8  buff ;
    // Need to make sure that the host/IC buffer pointers are aligned before starting RX
    buff = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 8001cb2:	2103      	movs	r1, #3
 8001cb4:	200f      	movs	r0, #15
 8001cb6:	f7ff fde2 	bl	800187e <dwt_read8bitoffsetreg>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	71fb      	strb	r3, [r7, #7]

    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 8001cbe:	79fa      	ldrb	r2, [r7, #7]
       ((buff & (SYS_STATUS_HSRBP>>24)) << 1) ) // Host Side Receive Buffer Pointer
 8001cc0:	79fb      	ldrb	r3, [r7, #7]
 8001cc2:	005b      	lsls	r3, r3, #1
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 8001cc4:	4053      	eors	r3, r2
 8001cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d004      	beq.n	8001cd8 <dwt_syncrxbufptrs+0x2c>
    {
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 0x01) ; // We need to swap RX buffer status reg (write one to toggle internally)
 8001cce:	2201      	movs	r2, #1
 8001cd0:	2103      	movs	r1, #3
 8001cd2:	200d      	movs	r0, #13
 8001cd4:	f7ff fde6 	bl	80018a4 <dwt_write8bitoffsetreg>
    }
}
 8001cd8:	bf00      	nop
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <dwt_rxenable>:
 *                                               performing manual RX re-enabling in double buffering mode
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed receive enable will be too far in the future if delayed time has passed)
 */
int dwt_rxenable(int mode)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
    uint16 temp ;
    uint8 temp1 ;

    if ((mode & DWT_NO_SYNC_PTRS) == 0)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f003 0304 	and.w	r3, r3, #4
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <dwt_rxenable+0x16>
    {
        dwt_syncrxbufptrs();
 8001cf2:	f7ff ffdb 	bl	8001cac <dwt_syncrxbufptrs>
    }

    temp = (uint16)SYS_CTRL_RXENAB ;
 8001cf6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cfa:	81fb      	strh	r3, [r7, #14]

    if (mode & DWT_START_RX_DELAYED)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d003      	beq.n	8001d0e <dwt_rxenable+0x2e>
    {
        temp |= (uint16)SYS_CTRL_RXDLYE ;
 8001d06:	89fb      	ldrh	r3, [r7, #14]
 8001d08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d0c:	81fb      	strh	r3, [r7, #14]
    }

    dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8001d0e:	89fb      	ldrh	r3, [r7, #14]
 8001d10:	461a      	mov	r2, r3
 8001d12:	2100      	movs	r1, #0
 8001d14:	200d      	movs	r0, #13
 8001d16:	f7ff fdd8 	bl	80018ca <dwt_write16bitoffsetreg>

    if (mode & DWT_START_RX_DELAYED) // check for errors
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d01a      	beq.n	8001d5a <dwt_rxenable+0x7a>
    {
        temp1 = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 8001d24:	2103      	movs	r1, #3
 8001d26:	200f      	movs	r0, #15
 8001d28:	f7ff fda9 	bl	800187e <dwt_read8bitoffsetreg>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	737b      	strb	r3, [r7, #13]
        if ((temp1 & (SYS_STATUS_HPDWARN >> 24)) != 0) // if delay has passed do immediate RX on unless DWT_IDLE_ON_DLY_ERR is true
 8001d30:	7b7b      	ldrb	r3, [r7, #13]
 8001d32:	f003 0308 	and.w	r3, r3, #8
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d00f      	beq.n	8001d5a <dwt_rxenable+0x7a>
        {
            dwt_forcetrxoff(); // turn the delayed receive off
 8001d3a:	f7ff ff87 	bl	8001c4c <dwt_forcetrxoff>

            if((mode & DWT_IDLE_ON_DLY_ERR) == 0) // if DWT_IDLE_ON_DLY_ERR not set then re-enable receiver
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d105      	bne.n	8001d54 <dwt_rxenable+0x74>
            {
                dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_RXENAB);
 8001d48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	200d      	movs	r0, #13
 8001d50:	f7ff fdbb 	bl	80018ca <dwt_write16bitoffsetreg>
            }
            return DWT_ERROR; // return warning indication
 8001d54:	f04f 33ff 	mov.w	r3, #4294967295
 8001d58:	e000      	b.n	8001d5c <dwt_rxenable+0x7c>
        }
    }

    return DWT_SUCCESS;
 8001d5a:	2300      	movs	r3, #0
} // end dwt_rxenable()
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3710      	adds	r7, #16
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <dwt_setrxtimeout>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxtimeout(uint16 time)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	80fb      	strh	r3, [r7, #6]
    uint8 temp ;

    temp = dwt_read8bitoffsetreg(SYS_CFG_ID, 3); // Read at offset 3 to get the upper byte only
 8001d6e:	2103      	movs	r1, #3
 8001d70:	2004      	movs	r0, #4
 8001d72:	f7ff fd84 	bl	800187e <dwt_read8bitoffsetreg>
 8001d76:	4603      	mov	r3, r0
 8001d78:	73fb      	strb	r3, [r7, #15]

    if(time > 0)
 8001d7a:	88fb      	ldrh	r3, [r7, #6]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d018      	beq.n	8001db2 <dwt_setrxtimeout+0x4e>
    {
        dwt_write16bitoffsetreg(RX_FWTO_ID, RX_FWTO_OFFSET, time) ;
 8001d80:	88fb      	ldrh	r3, [r7, #6]
 8001d82:	461a      	mov	r2, r3
 8001d84:	2100      	movs	r1, #0
 8001d86:	200c      	movs	r0, #12
 8001d88:	f7ff fd9f 	bl	80018ca <dwt_write16bitoffsetreg>

        temp |= (uint8)(SYS_CFG_RXWTOE>>24); // Shift RXWTOE mask as we read the upper byte only
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
 8001d8e:	f043 0310 	orr.w	r3, r3, #16
 8001d92:	73fb      	strb	r3, [r7, #15]
        // OR in 32bit value (1 bit set), I know this is in high byte.
        pdw1000local->sysCFGreg |= SYS_CFG_RXWTOE;
 8001d94:	4b12      	ldr	r3, [pc, #72]	; (8001de0 <dwt_setrxtimeout+0x7c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	691a      	ldr	r2, [r3, #16]
 8001d9a:	4b11      	ldr	r3, [pc, #68]	; (8001de0 <dwt_setrxtimeout+0x7c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001da2:	611a      	str	r2, [r3, #16]

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
 8001da4:	7bfb      	ldrb	r3, [r7, #15]
 8001da6:	461a      	mov	r2, r3
 8001da8:	2103      	movs	r1, #3
 8001daa:	2004      	movs	r0, #4
 8001dac:	f7ff fd7a 	bl	80018a4 <dwt_write8bitoffsetreg>
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
    }

} // end dwt_setrxtimeout()
 8001db0:	e011      	b.n	8001dd6 <dwt_setrxtimeout+0x72>
        temp &= ~((uint8)(SYS_CFG_RXWTOE>>24)); // Shift RXWTOE mask as we read the upper byte only
 8001db2:	7bfb      	ldrb	r3, [r7, #15]
 8001db4:	f023 0310 	bic.w	r3, r3, #16
 8001db8:	73fb      	strb	r3, [r7, #15]
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);
 8001dba:	4b09      	ldr	r3, [pc, #36]	; (8001de0 <dwt_setrxtimeout+0x7c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	691a      	ldr	r2, [r3, #16]
 8001dc0:	4b07      	ldr	r3, [pc, #28]	; (8001de0 <dwt_setrxtimeout+0x7c>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001dc8:	611a      	str	r2, [r3, #16]
        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
 8001dcc:	461a      	mov	r2, r3
 8001dce:	2103      	movs	r1, #3
 8001dd0:	2004      	movs	r0, #4
 8001dd2:	f7ff fd67 	bl	80018a4 <dwt_write8bitoffsetreg>
} // end dwt_setrxtimeout()
 8001dd6:	bf00      	nop
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20000000 	.word	0x20000000

08001de4 <dwt_setpreambledetecttimeout>:
 * output parameters
 *
 * no return value
 */
void dwt_setpreambledetecttimeout(uint16 timeout)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	4603      	mov	r3, r0
 8001dec:	80fb      	strh	r3, [r7, #6]
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_PRETOC_OFFSET, timeout);
 8001dee:	88fb      	ldrh	r3, [r7, #6]
 8001df0:	461a      	mov	r2, r3
 8001df2:	2124      	movs	r1, #36	; 0x24
 8001df4:	2027      	movs	r0, #39	; 0x27
 8001df6:	f7ff fd68 	bl	80018ca <dwt_write16bitoffsetreg>
}
 8001dfa:	bf00      	nop
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <dwt_rxreset>:
 * output parameters
 *
 * no return value
 */
void dwt_rxreset(void)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	af00      	add	r7, sp, #0
    // Set RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_RX);
 8001e06:	22e0      	movs	r2, #224	; 0xe0
 8001e08:	2103      	movs	r1, #3
 8001e0a:	2036      	movs	r0, #54	; 0x36
 8001e0c:	f7ff fd4a 	bl	80018a4 <dwt_write8bitoffsetreg>

    // Clear RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 8001e10:	22f0      	movs	r2, #240	; 0xf0
 8001e12:	2103      	movs	r1, #3
 8001e14:	2036      	movs	r0, #54	; 0x36
 8001e16:	f7ff fd45 	bl	80018a4 <dwt_write8bitoffsetreg>
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
	...

08001e20 <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
    _dwt_disablesequencing();
 8001e24:	f7ff feaa 	bl	8001b7c <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
 8001e28:	2200      	movs	r2, #0
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	202c      	movs	r0, #44	; 0x2c
 8001e2e:	f7ff fd4c 	bl	80018ca <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
 8001e32:	2200      	movs	r2, #0
 8001e34:	2106      	movs	r1, #6
 8001e36:	202c      	movs	r0, #44	; 0x2c
 8001e38:	f7ff fd34 	bl	80018a4 <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
 8001e3c:	f7ff fda7 	bl	800198e <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC (set the reset bits)
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
 8001e40:	2200      	movs	r2, #0
 8001e42:	2103      	movs	r1, #3
 8001e44:	2036      	movs	r0, #54	; 0x36
 8001e46:	f7ff fd2d 	bl	80018a4 <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
 8001e4a:	2001      	movs	r0, #1
 8001e4c:	f000 f844 	bl	8001ed8 <deca_sleep>

    // Clear the reset bits
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 8001e50:	22f0      	movs	r2, #240	; 0xf0
 8001e52:	2103      	movs	r1, #3
 8001e54:	2036      	movs	r0, #54	; 0x36
 8001e56:	f7ff fd25 	bl	80018a4 <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
 8001e5a:	4b03      	ldr	r3, [pc, #12]	; (8001e68 <dwt_softreset+0x48>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	755a      	strb	r2, [r3, #21]
}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20000000 	.word	0x20000000

08001e6c <dwt_setxtaltrim>:
 * output parameters
 *
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	71fb      	strb	r3, [r7, #7]
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
 8001e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7a:	f003 031f 	and.w	r3, r3, #31
 8001e7e:	b25b      	sxtb	r3, r3
 8001e80:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e84:	b25b      	sxtb	r3, r3
 8001e86:	73fb      	strb	r3, [r7, #15]
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
 8001e88:	7bfb      	ldrb	r3, [r7, #15]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	210e      	movs	r1, #14
 8001e8e:	202b      	movs	r0, #43	; 0x2b
 8001e90:	f7ff fd08 	bl	80018a4 <dwt_write8bitoffsetreg>
}
 8001e94:	bf00      	nop
 8001e96:	3710      	adds	r7, #16
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
	decaIrqStatus_t s = port_GetEXT_IRQStatus();
 8001ea2:	f000 f991 	bl	80021c8 <port_GetEXT_IRQStatus>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	607b      	str	r3, [r7, #4]

	if(s) {
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <decamutexon+0x18>
		port_DisableEXT_IRQ(); //disable the external interrupt line
 8001eb0:	f000 f97c 	bl	80021ac <port_DisableEXT_IRQ>
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
 8001eb4:	687b      	ldr	r3, [r7, #4]
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <decamutexoff+0x12>
		port_EnableEXT_IRQ();
 8001ecc:	f000 f975 	bl	80021ba <port_EnableEXT_IRQ>
	}
}
 8001ed0:	bf00      	nop
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <deca_sleep>:
#include "sleep.h"
#include "port.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
__INLINE void deca_sleep(unsigned int time_ms)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
	Sleep(time_ms);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f000 f8c5 	bl	8002070 <Sleep>
}
 8001ee6:	bf00      	nop
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
	...

08001ef0 <writetospi>:
#pragma GCC optimize ("O3")
int writetospi(uint16_t headerLength,
               const    uint8_t *headerBuffer,
               uint32_t bodyLength,
               const    uint8_t *bodyBuffer)
{
 8001ef0:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8001ef4:	4683      	mov	fp, r0
 8001ef6:	468a      	mov	sl, r1
 8001ef8:	4690      	mov	r8, r2
 8001efa:	4699      	mov	r9, r3
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 8001efc:	f7ff ffce 	bl	8001e9c <decamutexon>

    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001f00:	4d13      	ldr	r5, [pc, #76]	; (8001f50 <writetospi+0x60>)
    stat = decamutexon() ;
 8001f02:	4606      	mov	r6, r0
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001f04:	4628      	mov	r0, r5
 8001f06:	f003 fb4d 	bl	80055a4 <HAL_SPI_GetState>
 8001f0a:	2801      	cmp	r0, #1
 8001f0c:	4604      	mov	r4, r0
 8001f0e:	d1f9      	bne.n	8001f04 <writetospi+0x14>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 8001f10:	4810      	ldr	r0, [pc, #64]	; (8001f54 <writetospi+0x64>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	2140      	movs	r1, #64	; 0x40
 8001f16:	f001 fe89 	bl	8003c2c <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&headerBuffer[0], headerLength, HAL_MAX_DELAY);    /* Send header in polling mode */
 8001f1a:	465a      	mov	r2, fp
 8001f1c:	4651      	mov	r1, sl
 8001f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f22:	480b      	ldr	r0, [pc, #44]	; (8001f50 <writetospi+0x60>)
 8001f24:	f003 f8f7 	bl	8005116 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&bodyBuffer[0], bodyLength, HAL_MAX_DELAY);        /* Send data in polling mode */
 8001f28:	f04f 33ff 	mov.w	r3, #4294967295
 8001f2c:	4649      	mov	r1, r9
 8001f2e:	fa1f f288 	uxth.w	r2, r8
 8001f32:	4807      	ldr	r0, [pc, #28]	; (8001f50 <writetospi+0x60>)
 8001f34:	f003 f8ef 	bl	8005116 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 8001f38:	4622      	mov	r2, r4
 8001f3a:	2140      	movs	r1, #64	; 0x40
 8001f3c:	4805      	ldr	r0, [pc, #20]	; (8001f54 <writetospi+0x64>)
 8001f3e:	f001 fe75 	bl	8003c2c <HAL_GPIO_WritePin>

    decamutexoff(stat);
 8001f42:	4630      	mov	r0, r6
 8001f44:	f7ff ffbb 	bl	8001ebe <decamutexoff>

    return 0;
} // end writetospi()
 8001f48:	2000      	movs	r0, #0
 8001f4a:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
 8001f4e:	bf00      	nop
 8001f50:	200006f8 	.word	0x200006f8
 8001f54:	40020400 	.word	0x40020400

08001f58 <readfromspi>:
#pragma GCC optimize ("O3")
int readfromspi(uint16_t headerLength,
                const uint8_t *headerBuffer,
                uint32_t readlength,
                uint8_t *readBuffer)
{
 8001f58:	e92d 4778 	stmdb	sp!, {r3, r4, r5, r6, r8, r9, sl, lr}
 8001f5c:	4681      	mov	r9, r0
 8001f5e:	460c      	mov	r4, r1
 8001f60:	4690      	mov	r8, r2
 8001f62:	461d      	mov	r5, r3
    int i;
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 8001f64:	f7ff ff9a 	bl	8001e9c <decamutexon>

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001f68:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8001fe8 <readfromspi+0x90>
    stat = decamutexon() ;
 8001f6c:	4606      	mov	r6, r0
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001f6e:	4650      	mov	r0, sl
 8001f70:	f003 fb18 	bl	80055a4 <HAL_SPI_GetState>
 8001f74:	2801      	cmp	r0, #1
 8001f76:	d1fa      	bne.n	8001f6e <readfromspi+0x16>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 8001f78:	481a      	ldr	r0, [pc, #104]	; (8001fe4 <readfromspi+0x8c>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	2140      	movs	r1, #64	; 0x40
 8001f7e:	f001 fe55 	bl	8003c2c <HAL_GPIO_WritePin>

    /* Send header */
    for(i=0; i<headerLength; i++)
 8001f82:	f1b9 0f00 	cmp.w	r9, #0
 8001f86:	d00c      	beq.n	8001fa2 <readfromspi+0x4a>
    {
        HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 8001f88:	f8df a05c 	ldr.w	sl, [pc, #92]	; 8001fe8 <readfromspi+0x90>
 8001f8c:	44a1      	add	r9, r4
 8001f8e:	2201      	movs	r2, #1
 8001f90:	4621      	mov	r1, r4
 8001f92:	f04f 33ff 	mov.w	r3, #4294967295
    for(i=0; i<headerLength; i++)
 8001f96:	4414      	add	r4, r2
        HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 8001f98:	4650      	mov	r0, sl
 8001f9a:	f003 f8bc 	bl	8005116 <HAL_SPI_Transmit>
    for(i=0; i<headerLength; i++)
 8001f9e:	454c      	cmp	r4, r9
 8001fa0:	d1f5      	bne.n	8001f8e <readfromspi+0x36>
    }

    /* for the data buffer use LL functions directly as the HAL SPI read function
     * has issue reading single bytes */
    while(readlength-- > 0)
 8001fa2:	f1b8 0f00 	cmp.w	r8, #0
 8001fa6:	d012      	beq.n	8001fce <readfromspi+0x76>
 8001fa8:	f8df c03c 	ldr.w	ip, [pc, #60]	; 8001fe8 <readfromspi+0x90>
 8001fac:	eb05 0008 	add.w	r0, r5, r8
        /* Wait until TXE flag is set to send data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
        {
        }

        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 8001fb0:	2400      	movs	r4, #0
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
 8001fb2:	f8dc 2000 	ldr.w	r2, [ip]
 8001fb6:	6891      	ldr	r1, [r2, #8]
 8001fb8:	0789      	lsls	r1, r1, #30
 8001fba:	d5fc      	bpl.n	8001fb6 <readfromspi+0x5e>
        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 8001fbc:	60d4      	str	r4, [r2, #12]
        e.g. when waking up DW1000 from DEEPSLEEP via dwt_spicswakeup() function.
        */

        /* Wait until RXNE flag is set to read data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET)
 8001fbe:	6891      	ldr	r1, [r2, #8]
 8001fc0:	07cb      	lsls	r3, r1, #31
 8001fc2:	d5fc      	bpl.n	8001fbe <readfromspi+0x66>
        {
        }

        (*readBuffer++) = hspi1.Instance->DR;  //copy data read form (MISO)
 8001fc4:	68d3      	ldr	r3, [r2, #12]
 8001fc6:	f805 3b01 	strb.w	r3, [r5], #1
    while(readlength-- > 0)
 8001fca:	4285      	cmp	r5, r0
 8001fcc:	d1f1      	bne.n	8001fb2 <readfromspi+0x5a>
    }

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 8001fce:	2201      	movs	r2, #1
 8001fd0:	2140      	movs	r1, #64	; 0x40
 8001fd2:	4804      	ldr	r0, [pc, #16]	; (8001fe4 <readfromspi+0x8c>)
 8001fd4:	f001 fe2a 	bl	8003c2c <HAL_GPIO_WritePin>

    decamutexoff(stat);
 8001fd8:	4630      	mov	r0, r6
 8001fda:	f7ff ff70 	bl	8001ebe <decamutexoff>

    return 0;
} // end readfromspi()
 8001fde:	2000      	movs	r0, #0
 8001fe0:	e8bd 8778 	ldmia.w	sp!, {r3, r4, r5, r6, r8, r9, sl, pc}
 8001fe4:	40020400 	.word	0x40020400
 8001fe8:	200006f8 	.word	0x200006f8

08001fec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	db0b      	blt.n	8002016 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ffe:	79fb      	ldrb	r3, [r7, #7]
 8002000:	f003 021f 	and.w	r2, r3, #31
 8002004:	4907      	ldr	r1, [pc, #28]	; (8002024 <__NVIC_EnableIRQ+0x38>)
 8002006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200a:	095b      	lsrs	r3, r3, #5
 800200c:	2001      	movs	r0, #1
 800200e:	fa00 f202 	lsl.w	r2, r0, r2
 8002012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	e000e100 	.word	0xe000e100

08002028 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002036:	2b00      	cmp	r3, #0
 8002038:	db12      	blt.n	8002060 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800203a:	79fb      	ldrb	r3, [r7, #7]
 800203c:	f003 021f 	and.w	r2, r3, #31
 8002040:	490a      	ldr	r1, [pc, #40]	; (800206c <__NVIC_DisableIRQ+0x44>)
 8002042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002046:	095b      	lsrs	r3, r3, #5
 8002048:	2001      	movs	r0, #1
 800204a:	fa00 f202 	lsl.w	r2, r0, r2
 800204e:	3320      	adds	r3, #32
 8002050:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002054:	f3bf 8f4f 	dsb	sy
}
 8002058:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800205a:	f3bf 8f6f 	isb	sy
}
 800205e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	e000e100 	.word	0xe000e100

08002070 <Sleep>:
/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void
Sleep(uint32_t x)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f001 fac9 	bl	8003610 <HAL_Delay>
}
 800207e:	bf00      	nop
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
	...

08002088 <EXTI_GetITEnStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The "enable" state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITEnStatus(uint32_t x)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
    return ((NVIC->ISER[(((uint32_t)x) >> 5UL)] &\
 8002090:	4a0b      	ldr	r2, [pc, #44]	; (80020c0 <EXTI_GetITEnStatus+0x38>)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	095b      	lsrs	r3, r3, #5
 8002096:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            (uint32_t)(1UL << (((uint32_t)x) & 0x1FUL)) ) == (uint32_t)RESET)?(RESET):(SET);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f003 031f 	and.w	r3, r3, #31
 80020a0:	fa22 f303 	lsr.w	r3, r2, r3
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	bf14      	ite	ne
 80020ac:	2301      	movne	r3, #1
 80020ae:	2300      	moveq	r3, #0
 80020b0:	b2db      	uxtb	r3, r3
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	e000e100 	.word	0xe000e100

080020c4 <reset_DW1000>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW1000 by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DW1000(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef    GPIO_InitStruct;

    // Enable GPIO used for DW1000 reset as open collector output
    GPIO_InitStruct.Pin = DW_RST_Pin;
 80020ca:	2301      	movs	r3, #1
 80020cc:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80020ce:	2311      	movs	r3, #17
 80020d0:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d2:	2300      	movs	r3, #0
 80020d4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 80020d6:	1d3b      	adds	r3, r7, #4
 80020d8:	4619      	mov	r1, r3
 80020da:	480a      	ldr	r0, [pc, #40]	; (8002104 <reset_DW1000+0x40>)
 80020dc:	f001 fc22 	bl	8003924 <HAL_GPIO_Init>

    //drive the RSTn pin low
    HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_RESET);
 80020e0:	2200      	movs	r2, #0
 80020e2:	2101      	movs	r1, #1
 80020e4:	4807      	ldr	r0, [pc, #28]	; (8002104 <reset_DW1000+0x40>)
 80020e6:	f001 fda1 	bl	8003c2c <HAL_GPIO_WritePin>

    Sleep(1);
 80020ea:	2001      	movs	r0, #1
 80020ec:	f7ff ffc0 	bl	8002070 <Sleep>

    //put the pin back to output open-drain (not active)
    setup_DW1000RSTnIRQ(0);
 80020f0:	2000      	movs	r0, #0
 80020f2:	f000 f809 	bl	8002108 <setup_DW1000RSTnIRQ>



    Sleep(2);
 80020f6:	2002      	movs	r0, #2
 80020f8:	f7ff ffba 	bl	8002070 <Sleep>
}
 80020fc:	bf00      	nop
 80020fe:	3718      	adds	r7, #24
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40020000 	.word	0x40020000

08002108 <setup_DW1000RSTnIRQ>:
 * @brief   setup the DW_RESET pin mode
 *          0 - output Open collector mode
 *          !0 - input mode with connected EXTI0 IRQ
 * */
void setup_DW1000RSTnIRQ(int enable)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b088      	sub	sp, #32
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    if(enable)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d015      	beq.n	8002142 <setup_DW1000RSTnIRQ+0x3a>
    {
        // Enable GPIO used as DECA RESET for interrupt
        GPIO_InitStruct.Pin = DW_RST_Pin;
 8002116:	2301      	movs	r3, #1
 8002118:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800211a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800211e:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002120:	2300      	movs	r3, #0
 8002122:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 8002124:	f107 030c 	add.w	r3, r7, #12
 8002128:	4619      	mov	r1, r3
 800212a:	4813      	ldr	r0, [pc, #76]	; (8002178 <setup_DW1000RSTnIRQ+0x70>)
 800212c:	f001 fbfa 	bl	8003924 <HAL_GPIO_Init>

        HAL_NVIC_EnableIRQ(EXTI0_IRQn);     //pin #0 -> EXTI #0
 8002130:	2006      	movs	r0, #6
 8002132:	f001 fbac 	bl	800388e <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8002136:	2200      	movs	r2, #0
 8002138:	2105      	movs	r1, #5
 800213a:	2006      	movs	r0, #6
 800213c:	f001 fb8b 	bl	8003856 <HAL_NVIC_SetPriority>
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
        HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_SET);
    }
}
 8002140:	e015      	b.n	800216e <setup_DW1000RSTnIRQ+0x66>
        HAL_NVIC_DisableIRQ(EXTI0_IRQn);    //pin #0 -> EXTI #0
 8002142:	2006      	movs	r0, #6
 8002144:	f001 fbb1 	bl	80038aa <HAL_NVIC_DisableIRQ>
        GPIO_InitStruct.Pin = DW_RST_Pin;
 8002148:	2301      	movs	r3, #1
 800214a:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800214c:	2311      	movs	r3, #17
 800214e:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002150:	2300      	movs	r3, #0
 8002152:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002154:	2302      	movs	r3, #2
 8002156:	61bb      	str	r3, [r7, #24]
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 8002158:	f107 030c 	add.w	r3, r7, #12
 800215c:	4619      	mov	r1, r3
 800215e:	4806      	ldr	r0, [pc, #24]	; (8002178 <setup_DW1000RSTnIRQ+0x70>)
 8002160:	f001 fbe0 	bl	8003924 <HAL_GPIO_Init>
        HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_SET);
 8002164:	2201      	movs	r2, #1
 8002166:	2101      	movs	r1, #1
 8002168:	4803      	ldr	r0, [pc, #12]	; (8002178 <setup_DW1000RSTnIRQ+0x70>)
 800216a:	f001 fd5f 	bl	8003c2c <HAL_GPIO_WritePin>
}
 800216e:	bf00      	nop
 8002170:	3720      	adds	r7, #32
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	40020000 	.word	0x40020000

0800217c <port_set_dw1000_slowrate>:
/* @fn      port_set_dw1000_slowrate
 * @brief   set 2.25MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_slowrate(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002180:	4b03      	ldr	r3, [pc, #12]	; (8002190 <port_set_dw1000_slowrate+0x14>)
 8002182:	2220      	movs	r2, #32
 8002184:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 8002186:	4802      	ldr	r0, [pc, #8]	; (8002190 <port_set_dw1000_slowrate+0x14>)
 8002188:	f002 ff3c 	bl	8005004 <HAL_SPI_Init>
}
 800218c:	bf00      	nop
 800218e:	bd80      	pop	{r7, pc}
 8002190:	200006f8 	.word	0x200006f8

08002194 <port_set_dw1000_fastrate>:
/* @fn      port_set_dw1000_fastrate
 * @brief   set 18MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_fastrate(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002198:	4b03      	ldr	r3, [pc, #12]	; (80021a8 <port_set_dw1000_fastrate+0x14>)
 800219a:	2208      	movs	r2, #8
 800219c:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 800219e:	4802      	ldr	r0, [pc, #8]	; (80021a8 <port_set_dw1000_fastrate+0x14>)
 80021a0:	f002 ff30 	bl	8005004 <HAL_SPI_Init>
}
 80021a4:	bf00      	nop
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	200006f8 	.word	0x200006f8

080021ac <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
    NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 80021b0:	2017      	movs	r0, #23
 80021b2:	f7ff ff39 	bl	8002028 <__NVIC_DisableIRQ>
}
 80021b6:	bf00      	nop
 80021b8:	bd80      	pop	{r7, pc}

080021ba <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	af00      	add	r7, sp, #0
    NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 80021be:	2017      	movs	r0, #23
 80021c0:	f7ff ff14 	bl	8001fec <__NVIC_EnableIRQ>
}
 80021c4:	bf00      	nop
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
    return EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 80021cc:	2017      	movs	r0, #23
 80021ce:	f7ff ff5b 	bl	8002088 <EXTI_GetITEnStatus>
 80021d2:	4603      	mov	r3, r0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <SSD1306_InvertDisplay>:
}



void SSD1306_InvertDisplay (int i)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  if (i) SSD1306_WRITECOMMAND (SSD1306_INVERTDISPLAY);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d005      	beq.n	80021f2 <SSD1306_InvertDisplay+0x1a>
 80021e6:	22a7      	movs	r2, #167	; 0xa7
 80021e8:	2100      	movs	r1, #0
 80021ea:	2078      	movs	r0, #120	; 0x78
 80021ec:	f000 fab4 	bl	8002758 <ssd1306_I2C_Write>

  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);

}
 80021f0:	e004      	b.n	80021fc <SSD1306_InvertDisplay+0x24>
  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);
 80021f2:	22a6      	movs	r2, #166	; 0xa6
 80021f4:	2100      	movs	r1, #0
 80021f6:	2078      	movs	r0, #120	; 0x78
 80021f8:	f000 faae 	bl	8002758 <ssd1306_I2C_Write>
}
 80021fc:	bf00      	nop
 80021fe:	3708      	adds	r7, #8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800220a:	f000 fa29 	bl	8002660 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800220e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002212:	2201      	movs	r2, #1
 8002214:	2178      	movs	r1, #120	; 0x78
 8002216:	485b      	ldr	r0, [pc, #364]	; (8002384 <SSD1306_Init+0x180>)
 8002218:	f001 ff64 	bl	80040e4 <HAL_I2C_IsDeviceReady>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8002222:	2300      	movs	r3, #0
 8002224:	e0a9      	b.n	800237a <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8002226:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800222a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800222c:	e002      	b.n	8002234 <SSD1306_Init+0x30>
		p--;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	3b01      	subs	r3, #1
 8002232:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1f9      	bne.n	800222e <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800223a:	22ae      	movs	r2, #174	; 0xae
 800223c:	2100      	movs	r1, #0
 800223e:	2078      	movs	r0, #120	; 0x78
 8002240:	f000 fa8a 	bl	8002758 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8002244:	2220      	movs	r2, #32
 8002246:	2100      	movs	r1, #0
 8002248:	2078      	movs	r0, #120	; 0x78
 800224a:	f000 fa85 	bl	8002758 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800224e:	2210      	movs	r2, #16
 8002250:	2100      	movs	r1, #0
 8002252:	2078      	movs	r0, #120	; 0x78
 8002254:	f000 fa80 	bl	8002758 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002258:	22b0      	movs	r2, #176	; 0xb0
 800225a:	2100      	movs	r1, #0
 800225c:	2078      	movs	r0, #120	; 0x78
 800225e:	f000 fa7b 	bl	8002758 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8002262:	22c8      	movs	r2, #200	; 0xc8
 8002264:	2100      	movs	r1, #0
 8002266:	2078      	movs	r0, #120	; 0x78
 8002268:	f000 fa76 	bl	8002758 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800226c:	2200      	movs	r2, #0
 800226e:	2100      	movs	r1, #0
 8002270:	2078      	movs	r0, #120	; 0x78
 8002272:	f000 fa71 	bl	8002758 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8002276:	2210      	movs	r2, #16
 8002278:	2100      	movs	r1, #0
 800227a:	2078      	movs	r0, #120	; 0x78
 800227c:	f000 fa6c 	bl	8002758 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002280:	2240      	movs	r2, #64	; 0x40
 8002282:	2100      	movs	r1, #0
 8002284:	2078      	movs	r0, #120	; 0x78
 8002286:	f000 fa67 	bl	8002758 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800228a:	2281      	movs	r2, #129	; 0x81
 800228c:	2100      	movs	r1, #0
 800228e:	2078      	movs	r0, #120	; 0x78
 8002290:	f000 fa62 	bl	8002758 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002294:	22ff      	movs	r2, #255	; 0xff
 8002296:	2100      	movs	r1, #0
 8002298:	2078      	movs	r0, #120	; 0x78
 800229a:	f000 fa5d 	bl	8002758 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800229e:	22a1      	movs	r2, #161	; 0xa1
 80022a0:	2100      	movs	r1, #0
 80022a2:	2078      	movs	r0, #120	; 0x78
 80022a4:	f000 fa58 	bl	8002758 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80022a8:	22a6      	movs	r2, #166	; 0xa6
 80022aa:	2100      	movs	r1, #0
 80022ac:	2078      	movs	r0, #120	; 0x78
 80022ae:	f000 fa53 	bl	8002758 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80022b2:	22a8      	movs	r2, #168	; 0xa8
 80022b4:	2100      	movs	r1, #0
 80022b6:	2078      	movs	r0, #120	; 0x78
 80022b8:	f000 fa4e 	bl	8002758 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80022bc:	223f      	movs	r2, #63	; 0x3f
 80022be:	2100      	movs	r1, #0
 80022c0:	2078      	movs	r0, #120	; 0x78
 80022c2:	f000 fa49 	bl	8002758 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80022c6:	22a4      	movs	r2, #164	; 0xa4
 80022c8:	2100      	movs	r1, #0
 80022ca:	2078      	movs	r0, #120	; 0x78
 80022cc:	f000 fa44 	bl	8002758 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80022d0:	22d3      	movs	r2, #211	; 0xd3
 80022d2:	2100      	movs	r1, #0
 80022d4:	2078      	movs	r0, #120	; 0x78
 80022d6:	f000 fa3f 	bl	8002758 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80022da:	2200      	movs	r2, #0
 80022dc:	2100      	movs	r1, #0
 80022de:	2078      	movs	r0, #120	; 0x78
 80022e0:	f000 fa3a 	bl	8002758 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80022e4:	22d5      	movs	r2, #213	; 0xd5
 80022e6:	2100      	movs	r1, #0
 80022e8:	2078      	movs	r0, #120	; 0x78
 80022ea:	f000 fa35 	bl	8002758 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80022ee:	22f0      	movs	r2, #240	; 0xf0
 80022f0:	2100      	movs	r1, #0
 80022f2:	2078      	movs	r0, #120	; 0x78
 80022f4:	f000 fa30 	bl	8002758 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80022f8:	22d9      	movs	r2, #217	; 0xd9
 80022fa:	2100      	movs	r1, #0
 80022fc:	2078      	movs	r0, #120	; 0x78
 80022fe:	f000 fa2b 	bl	8002758 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002302:	2222      	movs	r2, #34	; 0x22
 8002304:	2100      	movs	r1, #0
 8002306:	2078      	movs	r0, #120	; 0x78
 8002308:	f000 fa26 	bl	8002758 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800230c:	22da      	movs	r2, #218	; 0xda
 800230e:	2100      	movs	r1, #0
 8002310:	2078      	movs	r0, #120	; 0x78
 8002312:	f000 fa21 	bl	8002758 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8002316:	2212      	movs	r2, #18
 8002318:	2100      	movs	r1, #0
 800231a:	2078      	movs	r0, #120	; 0x78
 800231c:	f000 fa1c 	bl	8002758 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002320:	22db      	movs	r2, #219	; 0xdb
 8002322:	2100      	movs	r1, #0
 8002324:	2078      	movs	r0, #120	; 0x78
 8002326:	f000 fa17 	bl	8002758 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800232a:	2220      	movs	r2, #32
 800232c:	2100      	movs	r1, #0
 800232e:	2078      	movs	r0, #120	; 0x78
 8002330:	f000 fa12 	bl	8002758 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002334:	228d      	movs	r2, #141	; 0x8d
 8002336:	2100      	movs	r1, #0
 8002338:	2078      	movs	r0, #120	; 0x78
 800233a:	f000 fa0d 	bl	8002758 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800233e:	2214      	movs	r2, #20
 8002340:	2100      	movs	r1, #0
 8002342:	2078      	movs	r0, #120	; 0x78
 8002344:	f000 fa08 	bl	8002758 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002348:	22af      	movs	r2, #175	; 0xaf
 800234a:	2100      	movs	r1, #0
 800234c:	2078      	movs	r0, #120	; 0x78
 800234e:	f000 fa03 	bl	8002758 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002352:	222e      	movs	r2, #46	; 0x2e
 8002354:	2100      	movs	r1, #0
 8002356:	2078      	movs	r0, #120	; 0x78
 8002358:	f000 f9fe 	bl	8002758 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800235c:	2000      	movs	r0, #0
 800235e:	f000 f843 	bl	80023e8 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8002362:	f000 f813 	bl	800238c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8002366:	4b08      	ldr	r3, [pc, #32]	; (8002388 <SSD1306_Init+0x184>)
 8002368:	2200      	movs	r2, #0
 800236a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800236c:	4b06      	ldr	r3, [pc, #24]	; (8002388 <SSD1306_Init+0x184>)
 800236e:	2200      	movs	r2, #0
 8002370:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8002372:	4b05      	ldr	r3, [pc, #20]	; (8002388 <SSD1306_Init+0x184>)
 8002374:	2201      	movs	r2, #1
 8002376:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8002378:	2301      	movs	r3, #1
}
 800237a:	4618      	mov	r0, r3
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	200006a4 	.word	0x200006a4
 8002388:	2000069c 	.word	0x2000069c

0800238c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8002392:	2300      	movs	r3, #0
 8002394:	71fb      	strb	r3, [r7, #7]
 8002396:	e01d      	b.n	80023d4 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002398:	79fb      	ldrb	r3, [r7, #7]
 800239a:	3b50      	subs	r3, #80	; 0x50
 800239c:	b2db      	uxtb	r3, r3
 800239e:	461a      	mov	r2, r3
 80023a0:	2100      	movs	r1, #0
 80023a2:	2078      	movs	r0, #120	; 0x78
 80023a4:	f000 f9d8 	bl	8002758 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80023a8:	2200      	movs	r2, #0
 80023aa:	2100      	movs	r1, #0
 80023ac:	2078      	movs	r0, #120	; 0x78
 80023ae:	f000 f9d3 	bl	8002758 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80023b2:	2210      	movs	r2, #16
 80023b4:	2100      	movs	r1, #0
 80023b6:	2078      	movs	r0, #120	; 0x78
 80023b8:	f000 f9ce 	bl	8002758 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80023bc:	79fb      	ldrb	r3, [r7, #7]
 80023be:	01db      	lsls	r3, r3, #7
 80023c0:	4a08      	ldr	r2, [pc, #32]	; (80023e4 <SSD1306_UpdateScreen+0x58>)
 80023c2:	441a      	add	r2, r3
 80023c4:	2380      	movs	r3, #128	; 0x80
 80023c6:	2140      	movs	r1, #64	; 0x40
 80023c8:	2078      	movs	r0, #120	; 0x78
 80023ca:	f000 f95f 	bl	800268c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80023ce:	79fb      	ldrb	r3, [r7, #7]
 80023d0:	3301      	adds	r3, #1
 80023d2:	71fb      	strb	r3, [r7, #7]
 80023d4:	79fb      	ldrb	r3, [r7, #7]
 80023d6:	2b07      	cmp	r3, #7
 80023d8:	d9de      	bls.n	8002398 <SSD1306_UpdateScreen+0xc>
	}
}
 80023da:	bf00      	nop
 80023dc:	bf00      	nop
 80023de:	3708      	adds	r7, #8
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	2000029c 	.word	0x2000029c

080023e8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80023f2:	79fb      	ldrb	r3, [r7, #7]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d101      	bne.n	80023fc <SSD1306_Fill+0x14>
 80023f8:	2300      	movs	r3, #0
 80023fa:	e000      	b.n	80023fe <SSD1306_Fill+0x16>
 80023fc:	23ff      	movs	r3, #255	; 0xff
 80023fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002402:	4619      	mov	r1, r3
 8002404:	4803      	ldr	r0, [pc, #12]	; (8002414 <SSD1306_Fill+0x2c>)
 8002406:	f003 fdb5 	bl	8005f74 <memset>
}
 800240a:	bf00      	nop
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	2000029c 	.word	0x2000029c

08002418 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	4603      	mov	r3, r0
 8002420:	80fb      	strh	r3, [r7, #6]
 8002422:	460b      	mov	r3, r1
 8002424:	80bb      	strh	r3, [r7, #4]
 8002426:	4613      	mov	r3, r2
 8002428:	70fb      	strb	r3, [r7, #3]
	if (
 800242a:	88fb      	ldrh	r3, [r7, #6]
 800242c:	2b7f      	cmp	r3, #127	; 0x7f
 800242e:	d848      	bhi.n	80024c2 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002430:	88bb      	ldrh	r3, [r7, #4]
 8002432:	2b3f      	cmp	r3, #63	; 0x3f
 8002434:	d845      	bhi.n	80024c2 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8002436:	4b26      	ldr	r3, [pc, #152]	; (80024d0 <SSD1306_DrawPixel+0xb8>)
 8002438:	791b      	ldrb	r3, [r3, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d006      	beq.n	800244c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800243e:	78fb      	ldrb	r3, [r7, #3]
 8002440:	2b00      	cmp	r3, #0
 8002442:	bf0c      	ite	eq
 8002444:	2301      	moveq	r3, #1
 8002446:	2300      	movne	r3, #0
 8002448:	b2db      	uxtb	r3, r3
 800244a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800244c:	78fb      	ldrb	r3, [r7, #3]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d11a      	bne.n	8002488 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002452:	88fa      	ldrh	r2, [r7, #6]
 8002454:	88bb      	ldrh	r3, [r7, #4]
 8002456:	08db      	lsrs	r3, r3, #3
 8002458:	b298      	uxth	r0, r3
 800245a:	4603      	mov	r3, r0
 800245c:	01db      	lsls	r3, r3, #7
 800245e:	4413      	add	r3, r2
 8002460:	4a1c      	ldr	r2, [pc, #112]	; (80024d4 <SSD1306_DrawPixel+0xbc>)
 8002462:	5cd3      	ldrb	r3, [r2, r3]
 8002464:	b25a      	sxtb	r2, r3
 8002466:	88bb      	ldrh	r3, [r7, #4]
 8002468:	f003 0307 	and.w	r3, r3, #7
 800246c:	2101      	movs	r1, #1
 800246e:	fa01 f303 	lsl.w	r3, r1, r3
 8002472:	b25b      	sxtb	r3, r3
 8002474:	4313      	orrs	r3, r2
 8002476:	b259      	sxtb	r1, r3
 8002478:	88fa      	ldrh	r2, [r7, #6]
 800247a:	4603      	mov	r3, r0
 800247c:	01db      	lsls	r3, r3, #7
 800247e:	4413      	add	r3, r2
 8002480:	b2c9      	uxtb	r1, r1
 8002482:	4a14      	ldr	r2, [pc, #80]	; (80024d4 <SSD1306_DrawPixel+0xbc>)
 8002484:	54d1      	strb	r1, [r2, r3]
 8002486:	e01d      	b.n	80024c4 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002488:	88fa      	ldrh	r2, [r7, #6]
 800248a:	88bb      	ldrh	r3, [r7, #4]
 800248c:	08db      	lsrs	r3, r3, #3
 800248e:	b298      	uxth	r0, r3
 8002490:	4603      	mov	r3, r0
 8002492:	01db      	lsls	r3, r3, #7
 8002494:	4413      	add	r3, r2
 8002496:	4a0f      	ldr	r2, [pc, #60]	; (80024d4 <SSD1306_DrawPixel+0xbc>)
 8002498:	5cd3      	ldrb	r3, [r2, r3]
 800249a:	b25a      	sxtb	r2, r3
 800249c:	88bb      	ldrh	r3, [r7, #4]
 800249e:	f003 0307 	and.w	r3, r3, #7
 80024a2:	2101      	movs	r1, #1
 80024a4:	fa01 f303 	lsl.w	r3, r1, r3
 80024a8:	b25b      	sxtb	r3, r3
 80024aa:	43db      	mvns	r3, r3
 80024ac:	b25b      	sxtb	r3, r3
 80024ae:	4013      	ands	r3, r2
 80024b0:	b259      	sxtb	r1, r3
 80024b2:	88fa      	ldrh	r2, [r7, #6]
 80024b4:	4603      	mov	r3, r0
 80024b6:	01db      	lsls	r3, r3, #7
 80024b8:	4413      	add	r3, r2
 80024ba:	b2c9      	uxtb	r1, r1
 80024bc:	4a05      	ldr	r2, [pc, #20]	; (80024d4 <SSD1306_DrawPixel+0xbc>)
 80024be:	54d1      	strb	r1, [r2, r3]
 80024c0:	e000      	b.n	80024c4 <SSD1306_DrawPixel+0xac>
		return;
 80024c2:	bf00      	nop
	}
}
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	2000069c 	.word	0x2000069c
 80024d4:	2000029c 	.word	0x2000029c

080024d8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	4603      	mov	r3, r0
 80024e0:	460a      	mov	r2, r1
 80024e2:	80fb      	strh	r3, [r7, #6]
 80024e4:	4613      	mov	r3, r2
 80024e6:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80024e8:	4a05      	ldr	r2, [pc, #20]	; (8002500 <SSD1306_GotoXY+0x28>)
 80024ea:	88fb      	ldrh	r3, [r7, #6]
 80024ec:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80024ee:	4a04      	ldr	r2, [pc, #16]	; (8002500 <SSD1306_GotoXY+0x28>)
 80024f0:	88bb      	ldrh	r3, [r7, #4]
 80024f2:	8053      	strh	r3, [r2, #2]
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr
 8002500:	2000069c 	.word	0x2000069c

08002504 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
 800250a:	4603      	mov	r3, r0
 800250c:	6039      	str	r1, [r7, #0]
 800250e:	71fb      	strb	r3, [r7, #7]
 8002510:	4613      	mov	r3, r2
 8002512:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002514:	4b3a      	ldr	r3, [pc, #232]	; (8002600 <SSD1306_Putc+0xfc>)
 8002516:	881b      	ldrh	r3, [r3, #0]
 8002518:	461a      	mov	r2, r3
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	4413      	add	r3, r2
	if (
 8002520:	2b7f      	cmp	r3, #127	; 0x7f
 8002522:	dc07      	bgt.n	8002534 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8002524:	4b36      	ldr	r3, [pc, #216]	; (8002600 <SSD1306_Putc+0xfc>)
 8002526:	885b      	ldrh	r3, [r3, #2]
 8002528:	461a      	mov	r2, r3
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	785b      	ldrb	r3, [r3, #1]
 800252e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002530:	2b3f      	cmp	r3, #63	; 0x3f
 8002532:	dd01      	ble.n	8002538 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8002534:	2300      	movs	r3, #0
 8002536:	e05e      	b.n	80025f6 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002538:	2300      	movs	r3, #0
 800253a:	617b      	str	r3, [r7, #20]
 800253c:	e04b      	b.n	80025d6 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685a      	ldr	r2, [r3, #4]
 8002542:	79fb      	ldrb	r3, [r7, #7]
 8002544:	3b20      	subs	r3, #32
 8002546:	6839      	ldr	r1, [r7, #0]
 8002548:	7849      	ldrb	r1, [r1, #1]
 800254a:	fb01 f303 	mul.w	r3, r1, r3
 800254e:	4619      	mov	r1, r3
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	440b      	add	r3, r1
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	4413      	add	r3, r2
 8002558:	881b      	ldrh	r3, [r3, #0]
 800255a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800255c:	2300      	movs	r3, #0
 800255e:	613b      	str	r3, [r7, #16]
 8002560:	e030      	b.n	80025c4 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d010      	beq.n	8002594 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002572:	4b23      	ldr	r3, [pc, #140]	; (8002600 <SSD1306_Putc+0xfc>)
 8002574:	881a      	ldrh	r2, [r3, #0]
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	b29b      	uxth	r3, r3
 800257a:	4413      	add	r3, r2
 800257c:	b298      	uxth	r0, r3
 800257e:	4b20      	ldr	r3, [pc, #128]	; (8002600 <SSD1306_Putc+0xfc>)
 8002580:	885a      	ldrh	r2, [r3, #2]
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	b29b      	uxth	r3, r3
 8002586:	4413      	add	r3, r2
 8002588:	b29b      	uxth	r3, r3
 800258a:	79ba      	ldrb	r2, [r7, #6]
 800258c:	4619      	mov	r1, r3
 800258e:	f7ff ff43 	bl	8002418 <SSD1306_DrawPixel>
 8002592:	e014      	b.n	80025be <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002594:	4b1a      	ldr	r3, [pc, #104]	; (8002600 <SSD1306_Putc+0xfc>)
 8002596:	881a      	ldrh	r2, [r3, #0]
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	b29b      	uxth	r3, r3
 800259c:	4413      	add	r3, r2
 800259e:	b298      	uxth	r0, r3
 80025a0:	4b17      	ldr	r3, [pc, #92]	; (8002600 <SSD1306_Putc+0xfc>)
 80025a2:	885a      	ldrh	r2, [r3, #2]
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	4413      	add	r3, r2
 80025aa:	b299      	uxth	r1, r3
 80025ac:	79bb      	ldrb	r3, [r7, #6]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	bf0c      	ite	eq
 80025b2:	2301      	moveq	r3, #1
 80025b4:	2300      	movne	r3, #0
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	461a      	mov	r2, r3
 80025ba:	f7ff ff2d 	bl	8002418 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	3301      	adds	r3, #1
 80025c2:	613b      	str	r3, [r7, #16]
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	461a      	mov	r2, r3
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d3c8      	bcc.n	8002562 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	3301      	adds	r3, #1
 80025d4:	617b      	str	r3, [r7, #20]
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	785b      	ldrb	r3, [r3, #1]
 80025da:	461a      	mov	r2, r3
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	4293      	cmp	r3, r2
 80025e0:	d3ad      	bcc.n	800253e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80025e2:	4b07      	ldr	r3, [pc, #28]	; (8002600 <SSD1306_Putc+0xfc>)
 80025e4:	881a      	ldrh	r2, [r3, #0]
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	4413      	add	r3, r2
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	4b03      	ldr	r3, [pc, #12]	; (8002600 <SSD1306_Putc+0xfc>)
 80025f2:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80025f4:	79fb      	ldrb	r3, [r7, #7]
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	2000069c 	.word	0x2000069c

08002604 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	4613      	mov	r3, r2
 8002610:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8002612:	e012      	b.n	800263a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	79fa      	ldrb	r2, [r7, #7]
 800261a:	68b9      	ldr	r1, [r7, #8]
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff ff71 	bl	8002504 <SSD1306_Putc>
 8002622:	4603      	mov	r3, r0
 8002624:	461a      	mov	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	429a      	cmp	r2, r3
 800262c:	d002      	beq.n	8002634 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	e008      	b.n	8002646 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	3301      	adds	r3, #1
 8002638:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1e8      	bne.n	8002614 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	781b      	ldrb	r3, [r3, #0]
}
 8002646:	4618      	mov	r0, r3
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8002652:	2000      	movs	r0, #0
 8002654:	f7ff fec8 	bl	80023e8 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8002658:	f7ff fe98 	bl	800238c <SSD1306_UpdateScreen>
}
 800265c:	bf00      	nop
 800265e:	bd80      	pop	{r7, pc}

08002660 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8002666:	4b08      	ldr	r3, [pc, #32]	; (8002688 <ssd1306_I2C_Init+0x28>)
 8002668:	607b      	str	r3, [r7, #4]
	while(p>0)
 800266a:	e002      	b.n	8002672 <ssd1306_I2C_Init+0x12>
		p--;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	3b01      	subs	r3, #1
 8002670:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1f9      	bne.n	800266c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002678:	bf00      	nop
 800267a:	bf00      	nop
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	0003d090 	.word	0x0003d090

0800268c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800268c:	b590      	push	{r4, r7, lr}
 800268e:	b0c7      	sub	sp, #284	; 0x11c
 8002690:	af02      	add	r7, sp, #8
 8002692:	4604      	mov	r4, r0
 8002694:	4608      	mov	r0, r1
 8002696:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800269a:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800269e:	600a      	str	r2, [r1, #0]
 80026a0:	4619      	mov	r1, r3
 80026a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80026a6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80026aa:	4622      	mov	r2, r4
 80026ac:	701a      	strb	r2, [r3, #0]
 80026ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80026b2:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80026b6:	4602      	mov	r2, r0
 80026b8:	701a      	strb	r2, [r3, #0]
 80026ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80026be:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80026c2:	460a      	mov	r2, r1
 80026c4:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80026c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80026ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80026ce:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80026d2:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80026d6:	7812      	ldrb	r2, [r2, #0]
 80026d8:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80026da:	2300      	movs	r3, #0
 80026dc:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80026e0:	e015      	b.n	800270e <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80026e2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80026e6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80026ea:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80026ee:	6812      	ldr	r2, [r2, #0]
 80026f0:	441a      	add	r2, r3
 80026f2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80026f6:	3301      	adds	r3, #1
 80026f8:	7811      	ldrb	r1, [r2, #0]
 80026fa:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80026fe:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8002702:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002704:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002708:	3301      	adds	r3, #1
 800270a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800270e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002712:	b29b      	uxth	r3, r3
 8002714:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002718:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800271c:	8812      	ldrh	r2, [r2, #0]
 800271e:	429a      	cmp	r2, r3
 8002720:	d8df      	bhi.n	80026e2 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8002722:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002726:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	b299      	uxth	r1, r3
 800272e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002732:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002736:	881b      	ldrh	r3, [r3, #0]
 8002738:	3301      	adds	r3, #1
 800273a:	b29b      	uxth	r3, r3
 800273c:	f107 020c 	add.w	r2, r7, #12
 8002740:	200a      	movs	r0, #10
 8002742:	9000      	str	r0, [sp, #0]
 8002744:	4803      	ldr	r0, [pc, #12]	; (8002754 <ssd1306_I2C_WriteMulti+0xc8>)
 8002746:	f001 fbcf 	bl	8003ee8 <HAL_I2C_Master_Transmit>
}
 800274a:	bf00      	nop
 800274c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002750:	46bd      	mov	sp, r7
 8002752:	bd90      	pop	{r4, r7, pc}
 8002754:	200006a4 	.word	0x200006a4

08002758 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af02      	add	r7, sp, #8
 800275e:	4603      	mov	r3, r0
 8002760:	71fb      	strb	r3, [r7, #7]
 8002762:	460b      	mov	r3, r1
 8002764:	71bb      	strb	r3, [r7, #6]
 8002766:	4613      	mov	r3, r2
 8002768:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800276a:	79bb      	ldrb	r3, [r7, #6]
 800276c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800276e:	797b      	ldrb	r3, [r7, #5]
 8002770:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8002772:	79fb      	ldrb	r3, [r7, #7]
 8002774:	b299      	uxth	r1, r3
 8002776:	f107 020c 	add.w	r2, r7, #12
 800277a:	230a      	movs	r3, #10
 800277c:	9300      	str	r3, [sp, #0]
 800277e:	2302      	movs	r3, #2
 8002780:	4803      	ldr	r0, [pc, #12]	; (8002790 <ssd1306_I2C_Write+0x38>)
 8002782:	f001 fbb1 	bl	8003ee8 <HAL_I2C_Master_Transmit>
}
 8002786:	bf00      	nop
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	200006a4 	.word	0x200006a4

08002794 <ssd1306_write>:

void ssd1306_write(uint32_t buff, FontDef_t Font)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	1d3b      	adds	r3, r7, #4
 800279e:	e883 0006 	stmia.w	r3, {r1, r2}
//	SSD1306_Clear ();
//	SSD1306_Fill(SSD1306_COLOR_BLACK);
	SSD1306_Puts(buff, &Font, 1);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	1d39      	adds	r1, r7, #4
 80027a6:	2201      	movs	r2, #1
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff ff2b 	bl	8002604 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 80027ae:	f7ff fded 	bl	800238c <SSD1306_UpdateScreen>
}
 80027b2:	bf00      	nop
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
	...

080027bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b08a      	sub	sp, #40	; 0x28
 80027c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c2:	f107 0314 	add.w	r3, r7, #20
 80027c6:	2200      	movs	r2, #0
 80027c8:	601a      	str	r2, [r3, #0]
 80027ca:	605a      	str	r2, [r3, #4]
 80027cc:	609a      	str	r2, [r3, #8]
 80027ce:	60da      	str	r2, [r3, #12]
 80027d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027d2:	2300      	movs	r3, #0
 80027d4:	613b      	str	r3, [r7, #16]
 80027d6:	4b30      	ldr	r3, [pc, #192]	; (8002898 <MX_GPIO_Init+0xdc>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027da:	4a2f      	ldr	r2, [pc, #188]	; (8002898 <MX_GPIO_Init+0xdc>)
 80027dc:	f043 0304 	orr.w	r3, r3, #4
 80027e0:	6313      	str	r3, [r2, #48]	; 0x30
 80027e2:	4b2d      	ldr	r3, [pc, #180]	; (8002898 <MX_GPIO_Init+0xdc>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	f003 0304 	and.w	r3, r3, #4
 80027ea:	613b      	str	r3, [r7, #16]
 80027ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80027ee:	2300      	movs	r3, #0
 80027f0:	60fb      	str	r3, [r7, #12]
 80027f2:	4b29      	ldr	r3, [pc, #164]	; (8002898 <MX_GPIO_Init+0xdc>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	4a28      	ldr	r2, [pc, #160]	; (8002898 <MX_GPIO_Init+0xdc>)
 80027f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027fc:	6313      	str	r3, [r2, #48]	; 0x30
 80027fe:	4b26      	ldr	r3, [pc, #152]	; (8002898 <MX_GPIO_Init+0xdc>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002806:	60fb      	str	r3, [r7, #12]
 8002808:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800280a:	2300      	movs	r3, #0
 800280c:	60bb      	str	r3, [r7, #8]
 800280e:	4b22      	ldr	r3, [pc, #136]	; (8002898 <MX_GPIO_Init+0xdc>)
 8002810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002812:	4a21      	ldr	r2, [pc, #132]	; (8002898 <MX_GPIO_Init+0xdc>)
 8002814:	f043 0301 	orr.w	r3, r3, #1
 8002818:	6313      	str	r3, [r2, #48]	; 0x30
 800281a:	4b1f      	ldr	r3, [pc, #124]	; (8002898 <MX_GPIO_Init+0xdc>)
 800281c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	60bb      	str	r3, [r7, #8]
 8002824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002826:	2300      	movs	r3, #0
 8002828:	607b      	str	r3, [r7, #4]
 800282a:	4b1b      	ldr	r3, [pc, #108]	; (8002898 <MX_GPIO_Init+0xdc>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	4a1a      	ldr	r2, [pc, #104]	; (8002898 <MX_GPIO_Init+0xdc>)
 8002830:	f043 0302 	orr.w	r3, r3, #2
 8002834:	6313      	str	r3, [r2, #48]	; 0x30
 8002836:	4b18      	ldr	r3, [pc, #96]	; (8002898 <MX_GPIO_Init+0xdc>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	607b      	str	r3, [r7, #4]
 8002840:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DW_RST_Pin|DW_IRQ_Pin, GPIO_PIN_RESET);
 8002842:	2200      	movs	r2, #0
 8002844:	2103      	movs	r1, #3
 8002846:	4815      	ldr	r0, [pc, #84]	; (800289c <MX_GPIO_Init+0xe0>)
 8002848:	f001 f9f0 	bl	8003c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET);
 800284c:	2200      	movs	r2, #0
 800284e:	2140      	movs	r1, #64	; 0x40
 8002850:	4813      	ldr	r0, [pc, #76]	; (80028a0 <MX_GPIO_Init+0xe4>)
 8002852:	f001 f9eb 	bl	8003c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DW_RST_Pin|DW_IRQ_Pin;
 8002856:	2303      	movs	r3, #3
 8002858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800285a:	2301      	movs	r3, #1
 800285c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285e:	2300      	movs	r3, #0
 8002860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002862:	2300      	movs	r3, #0
 8002864:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002866:	f107 0314 	add.w	r3, r7, #20
 800286a:	4619      	mov	r1, r3
 800286c:	480b      	ldr	r0, [pc, #44]	; (800289c <MX_GPIO_Init+0xe0>)
 800286e:	f001 f859 	bl	8003924 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DW_CS_Pin;
 8002872:	2340      	movs	r3, #64	; 0x40
 8002874:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002876:	2301      	movs	r3, #1
 8002878:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287a:	2300      	movs	r3, #0
 800287c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800287e:	2300      	movs	r3, #0
 8002880:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DW_CS_GPIO_Port, &GPIO_InitStruct);
 8002882:	f107 0314 	add.w	r3, r7, #20
 8002886:	4619      	mov	r1, r3
 8002888:	4805      	ldr	r0, [pc, #20]	; (80028a0 <MX_GPIO_Init+0xe4>)
 800288a:	f001 f84b 	bl	8003924 <HAL_GPIO_Init>

}
 800288e:	bf00      	nop
 8002890:	3728      	adds	r7, #40	; 0x28
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	40023800 	.word	0x40023800
 800289c:	40020000 	.word	0x40020000
 80028a0:	40020400 	.word	0x40020400

080028a4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80028a8:	4b12      	ldr	r3, [pc, #72]	; (80028f4 <MX_I2C1_Init+0x50>)
 80028aa:	4a13      	ldr	r2, [pc, #76]	; (80028f8 <MX_I2C1_Init+0x54>)
 80028ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80028ae:	4b11      	ldr	r3, [pc, #68]	; (80028f4 <MX_I2C1_Init+0x50>)
 80028b0:	4a12      	ldr	r2, [pc, #72]	; (80028fc <MX_I2C1_Init+0x58>)
 80028b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80028b4:	4b0f      	ldr	r3, [pc, #60]	; (80028f4 <MX_I2C1_Init+0x50>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80028ba:	4b0e      	ldr	r3, [pc, #56]	; (80028f4 <MX_I2C1_Init+0x50>)
 80028bc:	2200      	movs	r2, #0
 80028be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028c0:	4b0c      	ldr	r3, [pc, #48]	; (80028f4 <MX_I2C1_Init+0x50>)
 80028c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028c8:	4b0a      	ldr	r3, [pc, #40]	; (80028f4 <MX_I2C1_Init+0x50>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80028ce:	4b09      	ldr	r3, [pc, #36]	; (80028f4 <MX_I2C1_Init+0x50>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028d4:	4b07      	ldr	r3, [pc, #28]	; (80028f4 <MX_I2C1_Init+0x50>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028da:	4b06      	ldr	r3, [pc, #24]	; (80028f4 <MX_I2C1_Init+0x50>)
 80028dc:	2200      	movs	r2, #0
 80028de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80028e0:	4804      	ldr	r0, [pc, #16]	; (80028f4 <MX_I2C1_Init+0x50>)
 80028e2:	f001 f9bd 	bl	8003c60 <HAL_I2C_Init>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80028ec:	f000 f8c4 	bl	8002a78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80028f0:	bf00      	nop
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	200006a4 	.word	0x200006a4
 80028f8:	40005400 	.word	0x40005400
 80028fc:	00061a80 	.word	0x00061a80

08002900 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b08a      	sub	sp, #40	; 0x28
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002908:	f107 0314 	add.w	r3, r7, #20
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	605a      	str	r2, [r3, #4]
 8002912:	609a      	str	r2, [r3, #8]
 8002914:	60da      	str	r2, [r3, #12]
 8002916:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a19      	ldr	r2, [pc, #100]	; (8002984 <HAL_I2C_MspInit+0x84>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d12c      	bne.n	800297c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002922:	2300      	movs	r3, #0
 8002924:	613b      	str	r3, [r7, #16]
 8002926:	4b18      	ldr	r3, [pc, #96]	; (8002988 <HAL_I2C_MspInit+0x88>)
 8002928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292a:	4a17      	ldr	r2, [pc, #92]	; (8002988 <HAL_I2C_MspInit+0x88>)
 800292c:	f043 0302 	orr.w	r3, r3, #2
 8002930:	6313      	str	r3, [r2, #48]	; 0x30
 8002932:	4b15      	ldr	r3, [pc, #84]	; (8002988 <HAL_I2C_MspInit+0x88>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	613b      	str	r3, [r7, #16]
 800293c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800293e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002942:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002944:	2312      	movs	r3, #18
 8002946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002948:	2300      	movs	r3, #0
 800294a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800294c:	2303      	movs	r3, #3
 800294e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002950:	2304      	movs	r3, #4
 8002952:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002954:	f107 0314 	add.w	r3, r7, #20
 8002958:	4619      	mov	r1, r3
 800295a:	480c      	ldr	r0, [pc, #48]	; (800298c <HAL_I2C_MspInit+0x8c>)
 800295c:	f000 ffe2 	bl	8003924 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002960:	2300      	movs	r3, #0
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	4b08      	ldr	r3, [pc, #32]	; (8002988 <HAL_I2C_MspInit+0x88>)
 8002966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002968:	4a07      	ldr	r2, [pc, #28]	; (8002988 <HAL_I2C_MspInit+0x88>)
 800296a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800296e:	6413      	str	r3, [r2, #64]	; 0x40
 8002970:	4b05      	ldr	r3, [pc, #20]	; (8002988 <HAL_I2C_MspInit+0x88>)
 8002972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002974:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002978:	60fb      	str	r3, [r7, #12]
 800297a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800297c:	bf00      	nop
 800297e:	3728      	adds	r7, #40	; 0x28
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	40005400 	.word	0x40005400
 8002988:	40023800 	.word	0x40023800
 800298c:	40020400 	.word	0x40020400

08002990 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002994:	f000 fdca 	bl	800352c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002998:	f000 f810 	bl	80029bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800299c:	f7ff ff0e 	bl	80027bc <MX_GPIO_Init>
  MX_SPI1_Init();
 80029a0:	f000 f870 	bl	8002a84 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80029a4:	f000 fd26 	bl	80033f4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80029a8:	f7ff ff7c 	bl	80028a4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  setup_DW1000RSTnIRQ(0);
 80029ac:	2000      	movs	r0, #0
 80029ae:	f7ff fbab 	bl	8002108 <setup_DW1000RSTnIRQ>
  SSD1306_Init();
 80029b2:	f7ff fc27 	bl	8002204 <SSD1306_Init>
  dw_main();
 80029b6:	f000 fa1f 	bl	8002df8 <dw_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80029ba:	e7fe      	b.n	80029ba <main+0x2a>

080029bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b094      	sub	sp, #80	; 0x50
 80029c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029c2:	f107 0320 	add.w	r3, r7, #32
 80029c6:	2230      	movs	r2, #48	; 0x30
 80029c8:	2100      	movs	r1, #0
 80029ca:	4618      	mov	r0, r3
 80029cc:	f003 fad2 	bl	8005f74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029d0:	f107 030c 	add.w	r3, r7, #12
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]
 80029d8:	605a      	str	r2, [r3, #4]
 80029da:	609a      	str	r2, [r3, #8]
 80029dc:	60da      	str	r2, [r3, #12]
 80029de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80029e0:	2300      	movs	r3, #0
 80029e2:	60bb      	str	r3, [r7, #8]
 80029e4:	4b22      	ldr	r3, [pc, #136]	; (8002a70 <SystemClock_Config+0xb4>)
 80029e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e8:	4a21      	ldr	r2, [pc, #132]	; (8002a70 <SystemClock_Config+0xb4>)
 80029ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029ee:	6413      	str	r3, [r2, #64]	; 0x40
 80029f0:	4b1f      	ldr	r3, [pc, #124]	; (8002a70 <SystemClock_Config+0xb4>)
 80029f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f8:	60bb      	str	r3, [r7, #8]
 80029fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80029fc:	2300      	movs	r3, #0
 80029fe:	607b      	str	r3, [r7, #4]
 8002a00:	4b1c      	ldr	r3, [pc, #112]	; (8002a74 <SystemClock_Config+0xb8>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a1b      	ldr	r2, [pc, #108]	; (8002a74 <SystemClock_Config+0xb8>)
 8002a06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a0a:	6013      	str	r3, [r2, #0]
 8002a0c:	4b19      	ldr	r3, [pc, #100]	; (8002a74 <SystemClock_Config+0xb8>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a14:	607b      	str	r3, [r7, #4]
 8002a16:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a18:	2302      	movs	r3, #2
 8002a1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a20:	2310      	movs	r3, #16
 8002a22:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002a24:	2300      	movs	r3, #0
 8002a26:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a28:	f107 0320 	add.w	r3, r7, #32
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f001 fe91 	bl	8004754 <HAL_RCC_OscConfig>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8002a38:	f000 f81e 	bl	8002a78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a3c:	230f      	movs	r3, #15
 8002a3e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002a40:	2300      	movs	r3, #0
 8002a42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a44:	2300      	movs	r3, #0
 8002a46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002a50:	f107 030c 	add.w	r3, r7, #12
 8002a54:	2100      	movs	r1, #0
 8002a56:	4618      	mov	r0, r3
 8002a58:	f002 f8f4 	bl	8004c44 <HAL_RCC_ClockConfig>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002a62:	f000 f809 	bl	8002a78 <Error_Handler>
  }
}
 8002a66:	bf00      	nop
 8002a68:	3750      	adds	r7, #80	; 0x50
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	40023800 	.word	0x40023800
 8002a74:	40007000 	.word	0x40007000

08002a78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002a7c:	b672      	cpsid	i
}
 8002a7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a80:	e7fe      	b.n	8002a80 <Error_Handler+0x8>
	...

08002a84 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002a88:	4b17      	ldr	r3, [pc, #92]	; (8002ae8 <MX_SPI1_Init+0x64>)
 8002a8a:	4a18      	ldr	r2, [pc, #96]	; (8002aec <MX_SPI1_Init+0x68>)
 8002a8c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a8e:	4b16      	ldr	r3, [pc, #88]	; (8002ae8 <MX_SPI1_Init+0x64>)
 8002a90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a94:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a96:	4b14      	ldr	r3, [pc, #80]	; (8002ae8 <MX_SPI1_Init+0x64>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a9c:	4b12      	ldr	r3, [pc, #72]	; (8002ae8 <MX_SPI1_Init+0x64>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002aa2:	4b11      	ldr	r3, [pc, #68]	; (8002ae8 <MX_SPI1_Init+0x64>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002aa8:	4b0f      	ldr	r3, [pc, #60]	; (8002ae8 <MX_SPI1_Init+0x64>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002aae:	4b0e      	ldr	r3, [pc, #56]	; (8002ae8 <MX_SPI1_Init+0x64>)
 8002ab0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ab4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ab6:	4b0c      	ldr	r3, [pc, #48]	; (8002ae8 <MX_SPI1_Init+0x64>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002abc:	4b0a      	ldr	r3, [pc, #40]	; (8002ae8 <MX_SPI1_Init+0x64>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ac2:	4b09      	ldr	r3, [pc, #36]	; (8002ae8 <MX_SPI1_Init+0x64>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ac8:	4b07      	ldr	r3, [pc, #28]	; (8002ae8 <MX_SPI1_Init+0x64>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002ace:	4b06      	ldr	r3, [pc, #24]	; (8002ae8 <MX_SPI1_Init+0x64>)
 8002ad0:	220a      	movs	r2, #10
 8002ad2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002ad4:	4804      	ldr	r0, [pc, #16]	; (8002ae8 <MX_SPI1_Init+0x64>)
 8002ad6:	f002 fa95 	bl	8005004 <HAL_SPI_Init>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002ae0:	f7ff ffca 	bl	8002a78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002ae4:	bf00      	nop
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	200006f8 	.word	0x200006f8
 8002aec:	40013000 	.word	0x40013000

08002af0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b08a      	sub	sp, #40	; 0x28
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af8:	f107 0314 	add.w	r3, r7, #20
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	605a      	str	r2, [r3, #4]
 8002b02:	609a      	str	r2, [r3, #8]
 8002b04:	60da      	str	r2, [r3, #12]
 8002b06:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a1d      	ldr	r2, [pc, #116]	; (8002b84 <HAL_SPI_MspInit+0x94>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d133      	bne.n	8002b7a <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b12:	2300      	movs	r3, #0
 8002b14:	613b      	str	r3, [r7, #16]
 8002b16:	4b1c      	ldr	r3, [pc, #112]	; (8002b88 <HAL_SPI_MspInit+0x98>)
 8002b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1a:	4a1b      	ldr	r2, [pc, #108]	; (8002b88 <HAL_SPI_MspInit+0x98>)
 8002b1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b20:	6453      	str	r3, [r2, #68]	; 0x44
 8002b22:	4b19      	ldr	r3, [pc, #100]	; (8002b88 <HAL_SPI_MspInit+0x98>)
 8002b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b2a:	613b      	str	r3, [r7, #16]
 8002b2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b2e:	2300      	movs	r3, #0
 8002b30:	60fb      	str	r3, [r7, #12]
 8002b32:	4b15      	ldr	r3, [pc, #84]	; (8002b88 <HAL_SPI_MspInit+0x98>)
 8002b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b36:	4a14      	ldr	r2, [pc, #80]	; (8002b88 <HAL_SPI_MspInit+0x98>)
 8002b38:	f043 0301 	orr.w	r3, r3, #1
 8002b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b3e:	4b12      	ldr	r3, [pc, #72]	; (8002b88 <HAL_SPI_MspInit+0x98>)
 8002b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	60fb      	str	r3, [r7, #12]
 8002b48:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002b4a:	23e0      	movs	r3, #224	; 0xe0
 8002b4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4e:	2302      	movs	r3, #2
 8002b50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b52:	2300      	movs	r3, #0
 8002b54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b56:	2303      	movs	r3, #3
 8002b58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b5a:	2305      	movs	r3, #5
 8002b5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b5e:	f107 0314 	add.w	r3, r7, #20
 8002b62:	4619      	mov	r1, r3
 8002b64:	4809      	ldr	r0, [pc, #36]	; (8002b8c <HAL_SPI_MspInit+0x9c>)
 8002b66:	f000 fedd 	bl	8003924 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	2023      	movs	r0, #35	; 0x23
 8002b70:	f000 fe71 	bl	8003856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002b74:	2023      	movs	r0, #35	; 0x23
 8002b76:	f000 fe8a 	bl	800388e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002b7a:	bf00      	nop
 8002b7c:	3728      	adds	r7, #40	; 0x28
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	40013000 	.word	0x40013000
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	40020000 	.word	0x40020000

08002b90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b96:	2300      	movs	r3, #0
 8002b98:	607b      	str	r3, [r7, #4]
 8002b9a:	4b10      	ldr	r3, [pc, #64]	; (8002bdc <HAL_MspInit+0x4c>)
 8002b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9e:	4a0f      	ldr	r2, [pc, #60]	; (8002bdc <HAL_MspInit+0x4c>)
 8002ba0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ba4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ba6:	4b0d      	ldr	r3, [pc, #52]	; (8002bdc <HAL_MspInit+0x4c>)
 8002ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002baa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bae:	607b      	str	r3, [r7, #4]
 8002bb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	603b      	str	r3, [r7, #0]
 8002bb6:	4b09      	ldr	r3, [pc, #36]	; (8002bdc <HAL_MspInit+0x4c>)
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	4a08      	ldr	r2, [pc, #32]	; (8002bdc <HAL_MspInit+0x4c>)
 8002bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8002bc2:	4b06      	ldr	r3, [pc, #24]	; (8002bdc <HAL_MspInit+0x4c>)
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bca:	603b      	str	r3, [r7, #0]
 8002bcc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bce:	bf00      	nop
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	40023800 	.word	0x40023800

08002be0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002be4:	e7fe      	b.n	8002be4 <NMI_Handler+0x4>

08002be6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002be6:	b480      	push	{r7}
 8002be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bea:	e7fe      	b.n	8002bea <HardFault_Handler+0x4>

08002bec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bf0:	e7fe      	b.n	8002bf0 <MemManage_Handler+0x4>

08002bf2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bf6:	e7fe      	b.n	8002bf6 <BusFault_Handler+0x4>

08002bf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bfc:	e7fe      	b.n	8002bfc <UsageFault_Handler+0x4>

08002bfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c02:	bf00      	nop
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c10:	bf00      	nop
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c1e:	bf00      	nop
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c2c:	f000 fcd0 	bl	80035d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c30:	bf00      	nop
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002c38:	4802      	ldr	r0, [pc, #8]	; (8002c44 <SPI1_IRQHandler+0x10>)
 8002c3a:	f002 fba9 	bl	8005390 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002c3e:	bf00      	nop
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	200006f8 	.word	0x200006f8

08002c48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
	return 1;
 8002c4c:	2301      	movs	r3, #1
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <_kill>:

int _kill(int pid, int sig)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002c62:	f003 f94d 	bl	8005f00 <__errno>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2216      	movs	r2, #22
 8002c6a:	601a      	str	r2, [r3, #0]
	return -1;
 8002c6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3708      	adds	r7, #8
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <_exit>:

void _exit (int status)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002c80:	f04f 31ff 	mov.w	r1, #4294967295
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f7ff ffe7 	bl	8002c58 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002c8a:	e7fe      	b.n	8002c8a <_exit+0x12>

08002c8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c98:	2300      	movs	r3, #0
 8002c9a:	617b      	str	r3, [r7, #20]
 8002c9c:	e00a      	b.n	8002cb4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002c9e:	f3af 8000 	nop.w
 8002ca2:	4601      	mov	r1, r0
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	1c5a      	adds	r2, r3, #1
 8002ca8:	60ba      	str	r2, [r7, #8]
 8002caa:	b2ca      	uxtb	r2, r1
 8002cac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	617b      	str	r3, [r7, #20]
 8002cb4:	697a      	ldr	r2, [r7, #20]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	dbf0      	blt.n	8002c9e <_read+0x12>
	}

return len;
 8002cbc:	687b      	ldr	r3, [r7, #4]
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3718      	adds	r7, #24
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b086      	sub	sp, #24
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	60f8      	str	r0, [r7, #12]
 8002cce:	60b9      	str	r1, [r7, #8]
 8002cd0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	617b      	str	r3, [r7, #20]
 8002cd6:	e009      	b.n	8002cec <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	1c5a      	adds	r2, r3, #1
 8002cdc:	60ba      	str	r2, [r7, #8]
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	617b      	str	r3, [r7, #20]
 8002cec:	697a      	ldr	r2, [r7, #20]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	dbf1      	blt.n	8002cd8 <_write+0x12>
	}
	return len;
 8002cf4:	687b      	ldr	r3, [r7, #4]
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3718      	adds	r7, #24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <_close>:

int _close(int file)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	b083      	sub	sp, #12
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
	return -1;
 8002d06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d16:	b480      	push	{r7}
 8002d18:	b083      	sub	sp, #12
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
 8002d1e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d26:	605a      	str	r2, [r3, #4]
	return 0;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr

08002d36 <_isatty>:

int _isatty(int file)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b083      	sub	sp, #12
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
	return 1;
 8002d3e:	2301      	movs	r3, #1
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
	return 0;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3714      	adds	r7, #20
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
	...

08002d68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d70:	4a14      	ldr	r2, [pc, #80]	; (8002dc4 <_sbrk+0x5c>)
 8002d72:	4b15      	ldr	r3, [pc, #84]	; (8002dc8 <_sbrk+0x60>)
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d7c:	4b13      	ldr	r3, [pc, #76]	; (8002dcc <_sbrk+0x64>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d102      	bne.n	8002d8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d84:	4b11      	ldr	r3, [pc, #68]	; (8002dcc <_sbrk+0x64>)
 8002d86:	4a12      	ldr	r2, [pc, #72]	; (8002dd0 <_sbrk+0x68>)
 8002d88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d8a:	4b10      	ldr	r3, [pc, #64]	; (8002dcc <_sbrk+0x64>)
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4413      	add	r3, r2
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d207      	bcs.n	8002da8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d98:	f003 f8b2 	bl	8005f00 <__errno>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	220c      	movs	r2, #12
 8002da0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002da2:	f04f 33ff 	mov.w	r3, #4294967295
 8002da6:	e009      	b.n	8002dbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002da8:	4b08      	ldr	r3, [pc, #32]	; (8002dcc <_sbrk+0x64>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dae:	4b07      	ldr	r3, [pc, #28]	; (8002dcc <_sbrk+0x64>)
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4413      	add	r3, r2
 8002db6:	4a05      	ldr	r2, [pc, #20]	; (8002dcc <_sbrk+0x64>)
 8002db8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dba:	68fb      	ldr	r3, [r7, #12]
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3718      	adds	r7, #24
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	20020000 	.word	0x20020000
 8002dc8:	00000400 	.word	0x00000400
 8002dcc:	20000750 	.word	0x20000750
 8002dd0:	20000808 	.word	0x20000808

08002dd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002dd8:	4b06      	ldr	r3, [pc, #24]	; (8002df4 <SystemInit+0x20>)
 8002dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dde:	4a05      	ldr	r2, [pc, #20]	; (8002df4 <SystemInit+0x20>)
 8002de0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002de4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002de8:	bf00      	nop
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	e000ed00 	.word	0xe000ed00

08002df8 <dw_main>:
 * @param  none
 *
 * @return none
 */
int dw_main(void)
{
 8002df8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002dfc:	b094      	sub	sp, #80	; 0x50
 8002dfe:	af00      	add	r7, sp, #0
    /* Display application name on LCD. */
//    lcd_display_str(APP_NAME);
ssd1306_write(buff, Font_7x10);
 8002e00:	4812      	ldr	r0, [pc, #72]	; (8002e4c <dw_main+0x54>)
 8002e02:	4b13      	ldr	r3, [pc, #76]	; (8002e50 <dw_main+0x58>)
 8002e04:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002e08:	f7ff fcc4 	bl	8002794 <ssd1306_write>
    /* Reset and initialise DW1000.
     * For initialisation, DW1000 clocks must be temporarily set to crystal speed. After initialisation SPI rate can be increased for optimum
     * performance. */
    reset_DW1000(); /* Target specific drive of RSTn line into DW1000 low for a period. */
 8002e0c:	f7ff f95a 	bl	80020c4 <reset_DW1000>
    port_set_dw1000_slowrate();
 8002e10:	f7ff f9b4 	bl	800217c <port_set_dw1000_slowrate>
    if (dwt_initialise(DWT_LOADUCODE) == DWT_ERROR)
 8002e14:	2001      	movs	r0, #1
 8002e16:	f7fe f8f7 	bl	8001008 <dwt_initialise>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e20:	d11e      	bne.n	8002e60 <dw_main+0x68>
    {
        HAL_UART_Transmit(&huart2, "INIT FAILED\n", 12, 100);
 8002e22:	2364      	movs	r3, #100	; 0x64
 8002e24:	220c      	movs	r2, #12
 8002e26:	490b      	ldr	r1, [pc, #44]	; (8002e54 <dw_main+0x5c>)
 8002e28:	480b      	ldr	r0, [pc, #44]	; (8002e58 <dw_main+0x60>)
 8002e2a:	f002 fcf4 	bl	8005816 <HAL_UART_Transmit>
        SSD1306_GotoXY(0 ,10);SSD1306_InvertDisplay(1);
 8002e2e:	210a      	movs	r1, #10
 8002e30:	2000      	movs	r0, #0
 8002e32:	f7ff fb51 	bl	80024d8 <SSD1306_GotoXY>
 8002e36:	2001      	movs	r0, #1
 8002e38:	f7ff f9ce 	bl	80021d8 <SSD1306_InvertDisplay>
        ssd1306_write("Init Failed!!!", Font_7x10);
 8002e3c:	4807      	ldr	r0, [pc, #28]	; (8002e5c <dw_main+0x64>)
 8002e3e:	4b04      	ldr	r3, [pc, #16]	; (8002e50 <dw_main+0x58>)
 8002e40:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002e44:	f7ff fca6 	bl	8002794 <ssd1306_write>
        while (1)
 8002e48:	e7fe      	b.n	8002e48 <dw_main+0x50>
 8002e4a:	bf00      	nop
 8002e4c:	20000018 	.word	0x20000018
 8002e50:	20000004 	.word	0x20000004
 8002e54:	0800a880 	.word	0x0800a880
 8002e58:	200007b0 	.word	0x200007b0
 8002e5c:	0800a890 	.word	0x0800a890
        { };
    }
    port_set_dw1000_fastrate();
 8002e60:	f7ff f998 	bl	8002194 <port_set_dw1000_fastrate>

    /* Configure DW1000. See NOTE 7 below. */
    dwt_configure(&config);
 8002e64:	48c3      	ldr	r0, [pc, #780]	; (8003174 <dw_main+0x37c>)
 8002e66:	f7fe fa25 	bl	80012b4 <dwt_configure>

    /* Apply default antenna delay value. See NOTE 1 below. */
    dwt_setrxantennadelay(RX_ANT_DLY);
 8002e6a:	f244 0092 	movw	r0, #16530	; 0x4092
 8002e6e:	f7fe fb8b 	bl	8001588 <dwt_setrxantennadelay>
    dwt_settxantennadelay(TX_ANT_DLY);
 8002e72:	f244 0092 	movw	r0, #16530	; 0x4092
 8002e76:	f7fe fb97 	bl	80015a8 <dwt_settxantennadelay>

    /* Set preamble timeout for expected frames. See NOTE 6 below. */
    dwt_setpreambledetecttimeout(PRE_TIMEOUT);
 8002e7a:	2008      	movs	r0, #8
 8002e7c:	f7fe ffb2 	bl	8001de4 <dwt_setpreambledetecttimeout>

    /* Loop forever responding to ranging requests. */
    while (1)
    {

    	SSD1306_Clear ();
 8002e80:	f7ff fbe5 	bl	800264e <SSD1306_Clear>
    	SSD1306_GotoXY(0, 0);  ssd1306_write("Received :", Font_7x10);
 8002e84:	2100      	movs	r1, #0
 8002e86:	2000      	movs	r0, #0
 8002e88:	f7ff fb26 	bl	80024d8 <SSD1306_GotoXY>
 8002e8c:	48ba      	ldr	r0, [pc, #744]	; (8003178 <dw_main+0x380>)
 8002e8e:	4bbb      	ldr	r3, [pc, #748]	; (800317c <dw_main+0x384>)
 8002e90:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002e94:	f7ff fc7e 	bl	8002794 <ssd1306_write>
    	SSD1306_GotoXY(0, 20);  ssd1306_write("Transmitted :", Font_7x10);
 8002e98:	2114      	movs	r1, #20
 8002e9a:	2000      	movs	r0, #0
 8002e9c:	f7ff fb1c 	bl	80024d8 <SSD1306_GotoXY>
 8002ea0:	48b7      	ldr	r0, [pc, #732]	; (8003180 <dw_main+0x388>)
 8002ea2:	4bb6      	ldr	r3, [pc, #728]	; (800317c <dw_main+0x384>)
 8002ea4:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002ea8:	f7ff fc74 	bl	8002794 <ssd1306_write>
        /* Clear reception timeout to start next ranging process. */
        dwt_setrxtimeout(1);
 8002eac:	2001      	movs	r0, #1
 8002eae:	f7fe ff59 	bl	8001d64 <dwt_setrxtimeout>

        /* Activate reception immediately. */
        dwt_rxenable(DWT_START_RX_IMMEDIATE);
 8002eb2:	2000      	movs	r0, #0
 8002eb4:	f7fe ff14 	bl	8001ce0 <dwt_rxenable>

        /* Poll for reception of a frame or error/timeout. See NOTE 8 below. */
        while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
 8002eb8:	bf00      	nop
 8002eba:	2100      	movs	r1, #0
 8002ebc:	200f      	movs	r0, #15
 8002ebe:	f7fe fc9a 	bl	80017f6 <dwt_read32bitoffsetreg>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	4aaf      	ldr	r2, [pc, #700]	; (8003184 <dw_main+0x38c>)
 8002ec6:	6013      	str	r3, [r2, #0]
 8002ec8:	4bae      	ldr	r3, [pc, #696]	; (8003184 <dw_main+0x38c>)
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	4bae      	ldr	r3, [pc, #696]	; (8003188 <dw_main+0x390>)
 8002ece:	4013      	ands	r3, r2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d0f2      	beq.n	8002eba <dw_main+0xc2>
        { };

        if (status_reg & SYS_STATUS_RXFCG)
 8002ed4:	4bab      	ldr	r3, [pc, #684]	; (8003184 <dw_main+0x38c>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f000 81cb 	beq.w	8003278 <dw_main+0x480>
        {
            uint32 frame_len;

            /* Clear good RX frame event in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG);
 8002ee2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ee6:	2100      	movs	r1, #0
 8002ee8:	200f      	movs	r0, #15
 8002eea:	f7fe fd0a 	bl	8001902 <dwt_write32bitoffsetreg>

            /* A frame has been received, read it into the local buffer. */
            frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFL_MASK_1023;
 8002eee:	2100      	movs	r1, #0
 8002ef0:	2010      	movs	r0, #16
 8002ef2:	f7fe fc80 	bl	80017f6 <dwt_read32bitoffsetreg>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002efc:	64fb      	str	r3, [r7, #76]	; 0x4c
            if (frame_len <= RX_BUFFER_LEN)
 8002efe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f04:	d806      	bhi.n	8002f14 <dw_main+0x11c>
            {
                dwt_readrxdata(rx_buffer, frame_len, 0);
 8002f06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	489f      	ldr	r0, [pc, #636]	; (800318c <dw_main+0x394>)
 8002f10:	f7fe fb98 	bl	8001644 <dwt_readrxdata>
            }
            SSD1306_GotoXY(0, 10); ssd1306_write(rx_buffer, Font_7x10);
 8002f14:	210a      	movs	r1, #10
 8002f16:	2000      	movs	r0, #0
 8002f18:	f7ff fade 	bl	80024d8 <SSD1306_GotoXY>
 8002f1c:	489b      	ldr	r0, [pc, #620]	; (800318c <dw_main+0x394>)
 8002f1e:	4b97      	ldr	r3, [pc, #604]	; (800317c <dw_main+0x384>)
 8002f20:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002f24:	f7ff fc36 	bl	8002794 <ssd1306_write>
            HAL_UART_Transmit(&huart2, rx_buffer, sizeof(rx_buffer), 100);
 8002f28:	2364      	movs	r3, #100	; 0x64
 8002f2a:	2218      	movs	r2, #24
 8002f2c:	4997      	ldr	r1, [pc, #604]	; (800318c <dw_main+0x394>)
 8002f2e:	4898      	ldr	r0, [pc, #608]	; (8003190 <dw_main+0x398>)
 8002f30:	f002 fc71 	bl	8005816 <HAL_UART_Transmit>
            /* Check that the frame is a poll sent by "DS TWR initiator" example.
             * As the sequence number field of the frame is not relevant, it is cleared to simplify the validation of the frame. */
            rx_buffer[ALL_MSG_SN_IDX] = 0;
 8002f34:	4b95      	ldr	r3, [pc, #596]	; (800318c <dw_main+0x394>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	709a      	strb	r2, [r3, #2]
            if (memcmp(rx_buffer, rx_poll_msg, ALL_MSG_COMMON_LEN) == 0)
 8002f3a:	220a      	movs	r2, #10
 8002f3c:	4995      	ldr	r1, [pc, #596]	; (8003194 <dw_main+0x39c>)
 8002f3e:	4893      	ldr	r0, [pc, #588]	; (800318c <dw_main+0x394>)
 8002f40:	f003 f808 	bl	8005f54 <memcmp>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d19a      	bne.n	8002e80 <dw_main+0x88>
            {
                uint32 resp_tx_time;
                int ret;

                /* Retrieve poll reception timestamp. */
                poll_rx_ts = get_rx_timestamp_u64();
 8002f4a:	f000 f9f2 	bl	8003332 <get_rx_timestamp_u64>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	460b      	mov	r3, r1
 8002f52:	4991      	ldr	r1, [pc, #580]	; (8003198 <dw_main+0x3a0>)
 8002f54:	e9c1 2300 	strd	r2, r3, [r1]

                /* Set send time for response. See NOTE 9 below. */
                resp_tx_time = (poll_rx_ts + (POLL_RX_TO_RESP_TX_DLY_UUS * UUS_TO_DWT_TIME)) >> 8;
 8002f58:	4b8f      	ldr	r3, [pc, #572]	; (8003198 <dw_main+0x3a0>)
 8002f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f5e:	498f      	ldr	r1, [pc, #572]	; (800319c <dw_main+0x3a4>)
 8002f60:	1854      	adds	r4, r2, r1
 8002f62:	f143 0500 	adc.w	r5, r3, #0
 8002f66:	f04f 0200 	mov.w	r2, #0
 8002f6a:	f04f 0300 	mov.w	r3, #0
 8002f6e:	0a22      	lsrs	r2, r4, #8
 8002f70:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
 8002f74:	0a2b      	lsrs	r3, r5, #8
 8002f76:	4613      	mov	r3, r2
 8002f78:	64bb      	str	r3, [r7, #72]	; 0x48
                dwt_setdelayedtrxtime(resp_tx_time);
 8002f7a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002f7c:	f7fe fe0a 	bl	8001b94 <dwt_setdelayedtrxtime>

                /* Set expected delay and timeout for final message reception. See NOTE 4 and 5 below. */
                dwt_setrxaftertxdelay(RESP_TX_TO_FINAL_RX_DLY_UUS);
 8002f80:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002f84:	f7fe fd44 	bl	8001a10 <dwt_setrxaftertxdelay>
                dwt_setrxtimeout(FINAL_RX_TIMEOUT_UUS);
 8002f88:	f640 40e4 	movw	r0, #3300	; 0xce4
 8002f8c:	f7fe feea 	bl	8001d64 <dwt_setrxtimeout>

                /* Write and send the response message. See NOTE 10 below.*/
                tx_resp_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 8002f90:	4b83      	ldr	r3, [pc, #524]	; (80031a0 <dw_main+0x3a8>)
 8002f92:	781a      	ldrb	r2, [r3, #0]
 8002f94:	4b83      	ldr	r3, [pc, #524]	; (80031a4 <dw_main+0x3ac>)
 8002f96:	709a      	strb	r2, [r3, #2]
                dwt_writetxdata(sizeof(tx_resp_msg), tx_resp_msg, 0); /* Zero offset in TX buffer. */
 8002f98:	2200      	movs	r2, #0
 8002f9a:	4982      	ldr	r1, [pc, #520]	; (80031a4 <dw_main+0x3ac>)
 8002f9c:	200f      	movs	r0, #15
 8002f9e:	f7fe fb12 	bl	80015c6 <dwt_writetxdata>
                dwt_writetxfctrl(sizeof(tx_resp_msg), 0, 1); /* Zero offset in TX buffer, ranging. */
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	2100      	movs	r1, #0
 8002fa6:	200f      	movs	r0, #15
 8002fa8:	f7fe fb2c 	bl	8001604 <dwt_writetxfctrl>
                ret = dwt_starttx(DWT_START_TX_DELAYED | DWT_RESPONSE_EXPECTED);
 8002fac:	2003      	movs	r0, #3
 8002fae:	f7fe fdff 	bl	8001bb0 <dwt_starttx>
 8002fb2:	6478      	str	r0, [r7, #68]	; 0x44
                HAL_UART_Transmit(&huart2, tx_resp_msg, sizeof(tx_resp_msg), 100);
 8002fb4:	2364      	movs	r3, #100	; 0x64
 8002fb6:	220f      	movs	r2, #15
 8002fb8:	497a      	ldr	r1, [pc, #488]	; (80031a4 <dw_main+0x3ac>)
 8002fba:	4875      	ldr	r0, [pc, #468]	; (8003190 <dw_main+0x398>)
 8002fbc:	f002 fc2b 	bl	8005816 <HAL_UART_Transmit>
                SSD1306_GotoXY(0, 30); ssd1306_write(rx_buffer, Font_7x10);
 8002fc0:	211e      	movs	r1, #30
 8002fc2:	2000      	movs	r0, #0
 8002fc4:	f7ff fa88 	bl	80024d8 <SSD1306_GotoXY>
 8002fc8:	4870      	ldr	r0, [pc, #448]	; (800318c <dw_main+0x394>)
 8002fca:	4b6c      	ldr	r3, [pc, #432]	; (800317c <dw_main+0x384>)
 8002fcc:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002fd0:	f7ff fbe0 	bl	8002794 <ssd1306_write>
                /* If dwt_starttx() returns an error, abandon this ranging exchange and proceed to the next one. See NOTE 11 below. */
                if (ret == DWT_ERROR)
 8002fd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fda:	f000 8155 	beq.w	8003288 <dw_main+0x490>
                {
                    continue;
                }

                /* Poll for reception of expected "final" frame or error/timeout. See NOTE 8 below. */
                while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
 8002fde:	bf00      	nop
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	200f      	movs	r0, #15
 8002fe4:	f7fe fc07 	bl	80017f6 <dwt_read32bitoffsetreg>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	4a66      	ldr	r2, [pc, #408]	; (8003184 <dw_main+0x38c>)
 8002fec:	6013      	str	r3, [r2, #0]
 8002fee:	4b65      	ldr	r3, [pc, #404]	; (8003184 <dw_main+0x38c>)
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	4b65      	ldr	r3, [pc, #404]	; (8003188 <dw_main+0x390>)
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d0f2      	beq.n	8002fe0 <dw_main+0x1e8>
                { };

                /* Increment frame sequence number after transmission of the response message (modulo 256). */
                frame_seq_nb++;
 8002ffa:	4b69      	ldr	r3, [pc, #420]	; (80031a0 <dw_main+0x3a8>)
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	3301      	adds	r3, #1
 8003000:	b2da      	uxtb	r2, r3
 8003002:	4b67      	ldr	r3, [pc, #412]	; (80031a0 <dw_main+0x3a8>)
 8003004:	701a      	strb	r2, [r3, #0]

                if (status_reg & SYS_STATUS_RXFCG)
 8003006:	4b5f      	ldr	r3, [pc, #380]	; (8003184 <dw_main+0x38c>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800300e:	2b00      	cmp	r3, #0
 8003010:	f000 812a 	beq.w	8003268 <dw_main+0x470>
                {
                    /* Clear good RX frame event and TX frame sent in the DW1000 status register. */
                    dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG | SYS_STATUS_TXFRS);
 8003014:	f44f 4281 	mov.w	r2, #16512	; 0x4080
 8003018:	2100      	movs	r1, #0
 800301a:	200f      	movs	r0, #15
 800301c:	f7fe fc71 	bl	8001902 <dwt_write32bitoffsetreg>

                    /* A frame has been received, read it into the local buffer. */
                    frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFLEN_MASK;
 8003020:	2100      	movs	r1, #0
 8003022:	2010      	movs	r0, #16
 8003024:	f7fe fbe7 	bl	80017f6 <dwt_read32bitoffsetreg>
 8003028:	4603      	mov	r3, r0
 800302a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800302e:	64fb      	str	r3, [r7, #76]	; 0x4c
                    if (frame_len <= RX_BUF_LEN)
 8003030:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003032:	2b18      	cmp	r3, #24
 8003034:	d806      	bhi.n	8003044 <dw_main+0x24c>
                    {
                        dwt_readrxdata(rx_buffer, frame_len, 0);
 8003036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003038:	b29b      	uxth	r3, r3
 800303a:	2200      	movs	r2, #0
 800303c:	4619      	mov	r1, r3
 800303e:	4853      	ldr	r0, [pc, #332]	; (800318c <dw_main+0x394>)
 8003040:	f7fe fb00 	bl	8001644 <dwt_readrxdata>
                    }
                    HAL_UART_Transmit(&huart2, rx_buffer, sizeof(rx_buffer), 100);
 8003044:	2364      	movs	r3, #100	; 0x64
 8003046:	2218      	movs	r2, #24
 8003048:	4950      	ldr	r1, [pc, #320]	; (800318c <dw_main+0x394>)
 800304a:	4851      	ldr	r0, [pc, #324]	; (8003190 <dw_main+0x398>)
 800304c:	f002 fbe3 	bl	8005816 <HAL_UART_Transmit>
                    SSD1306_GotoXY(0, 50); ssd1306_write(rx_buffer, Font_7x10);
 8003050:	2132      	movs	r1, #50	; 0x32
 8003052:	2000      	movs	r0, #0
 8003054:	f7ff fa40 	bl	80024d8 <SSD1306_GotoXY>
 8003058:	484c      	ldr	r0, [pc, #304]	; (800318c <dw_main+0x394>)
 800305a:	4b48      	ldr	r3, [pc, #288]	; (800317c <dw_main+0x384>)
 800305c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003060:	f7ff fb98 	bl	8002794 <ssd1306_write>
                    /* Check that the frame is a final message sent by "DS TWR initiator" example.
                     * As the sequence number field of the frame is not used in this example, it can be zeroed to ease the validation of the frame. */
                    rx_buffer[ALL_MSG_SN_IDX] = 0;
 8003064:	4b49      	ldr	r3, [pc, #292]	; (800318c <dw_main+0x394>)
 8003066:	2200      	movs	r2, #0
 8003068:	709a      	strb	r2, [r3, #2]
                    if (memcmp(rx_buffer, rx_final_msg, ALL_MSG_COMMON_LEN) == 0)
 800306a:	220a      	movs	r2, #10
 800306c:	494e      	ldr	r1, [pc, #312]	; (80031a8 <dw_main+0x3b0>)
 800306e:	4847      	ldr	r0, [pc, #284]	; (800318c <dw_main+0x394>)
 8003070:	f002 ff70 	bl	8005f54 <memcmp>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	f47f af02 	bne.w	8002e80 <dw_main+0x88>
                        uint32 poll_rx_ts_32, resp_tx_ts_32, final_rx_ts_32;
                        double Ra, Rb, Da, Db;
                        int64 tof_dtu;

                        /* Retrieve response transmission and final reception timestamps. */
                        resp_tx_ts = get_tx_timestamp_u64();
 800307c:	f000 f91e 	bl	80032bc <get_tx_timestamp_u64>
 8003080:	4602      	mov	r2, r0
 8003082:	460b      	mov	r3, r1
 8003084:	4949      	ldr	r1, [pc, #292]	; (80031ac <dw_main+0x3b4>)
 8003086:	e9c1 2300 	strd	r2, r3, [r1]
                        final_rx_ts = get_rx_timestamp_u64();
 800308a:	f000 f952 	bl	8003332 <get_rx_timestamp_u64>
 800308e:	4602      	mov	r2, r0
 8003090:	460b      	mov	r3, r1
 8003092:	4947      	ldr	r1, [pc, #284]	; (80031b0 <dw_main+0x3b8>)
 8003094:	e9c1 2300 	strd	r2, r3, [r1]

                        /* Get timestamps embedded in the final message. */
                        final_msg_get_ts(&rx_buffer[FINAL_MSG_POLL_TX_TS_IDX], &poll_tx_ts);
 8003098:	f107 030c 	add.w	r3, r7, #12
 800309c:	4619      	mov	r1, r3
 800309e:	4845      	ldr	r0, [pc, #276]	; (80031b4 <dw_main+0x3bc>)
 80030a0:	f000 f982 	bl	80033a8 <final_msg_get_ts>
                        final_msg_get_ts(&rx_buffer[FINAL_MSG_RESP_RX_TS_IDX], &resp_rx_ts);
 80030a4:	f107 0308 	add.w	r3, r7, #8
 80030a8:	4619      	mov	r1, r3
 80030aa:	4843      	ldr	r0, [pc, #268]	; (80031b8 <dw_main+0x3c0>)
 80030ac:	f000 f97c 	bl	80033a8 <final_msg_get_ts>
                        final_msg_get_ts(&rx_buffer[FINAL_MSG_FINAL_TX_TS_IDX], &final_tx_ts);
 80030b0:	1d3b      	adds	r3, r7, #4
 80030b2:	4619      	mov	r1, r3
 80030b4:	4841      	ldr	r0, [pc, #260]	; (80031bc <dw_main+0x3c4>)
 80030b6:	f000 f977 	bl	80033a8 <final_msg_get_ts>

                        /* Compute time of flight. 32-bit subtractions give correct answers even if clock has wrapped. See NOTE 12 below. */
                        poll_rx_ts_32 = (uint32)poll_rx_ts;
 80030ba:	4b37      	ldr	r3, [pc, #220]	; (8003198 <dw_main+0x3a0>)
 80030bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c0:	4613      	mov	r3, r2
 80030c2:	643b      	str	r3, [r7, #64]	; 0x40
                        resp_tx_ts_32 = (uint32)resp_tx_ts;
 80030c4:	4b39      	ldr	r3, [pc, #228]	; (80031ac <dw_main+0x3b4>)
 80030c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ca:	4613      	mov	r3, r2
 80030cc:	63fb      	str	r3, [r7, #60]	; 0x3c
                        final_rx_ts_32 = (uint32)final_rx_ts;
 80030ce:	4b38      	ldr	r3, [pc, #224]	; (80031b0 <dw_main+0x3b8>)
 80030d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d4:	4613      	mov	r3, r2
 80030d6:	63bb      	str	r3, [r7, #56]	; 0x38
                        Ra = (double)(resp_rx_ts - poll_tx_ts);
 80030d8:	68ba      	ldr	r2, [r7, #8]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	4618      	mov	r0, r3
 80030e0:	f7fd fa18 	bl	8000514 <__aeabi_ui2d>
 80030e4:	4602      	mov	r2, r0
 80030e6:	460b      	mov	r3, r1
 80030e8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
                        Rb = (double)(final_rx_ts_32 - resp_tx_ts_32);
 80030ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7fd fa0e 	bl	8000514 <__aeabi_ui2d>
 80030f8:	4602      	mov	r2, r0
 80030fa:	460b      	mov	r3, r1
 80030fc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
                        Da = (double)(final_tx_ts - resp_rx_ts);
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	4618      	mov	r0, r3
 8003108:	f7fd fa04 	bl	8000514 <__aeabi_ui2d>
 800310c:	4602      	mov	r2, r0
 800310e:	460b      	mov	r3, r1
 8003110:	e9c7 2308 	strd	r2, r3, [r7, #32]
                        Db = (double)(resp_tx_ts_32 - poll_rx_ts_32);
 8003114:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003116:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	4618      	mov	r0, r3
 800311c:	f7fd f9fa 	bl	8000514 <__aeabi_ui2d>
 8003120:	4602      	mov	r2, r0
 8003122:	460b      	mov	r3, r1
 8003124:	e9c7 2306 	strd	r2, r3, [r7, #24]
                        tof_dtu = (int64)((Ra * Rb - Da * Db) / (Ra + Rb + Da + Db));
 8003128:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800312c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003130:	f7fd fa6a 	bl	8000608 <__aeabi_dmul>
 8003134:	4602      	mov	r2, r0
 8003136:	460b      	mov	r3, r1
 8003138:	4690      	mov	r8, r2
 800313a:	4699      	mov	r9, r3
 800313c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003140:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003144:	f7fd fa60 	bl	8000608 <__aeabi_dmul>
 8003148:	4602      	mov	r2, r0
 800314a:	460b      	mov	r3, r1
 800314c:	4640      	mov	r0, r8
 800314e:	4649      	mov	r1, r9
 8003150:	f7fd f8a2 	bl	8000298 <__aeabi_dsub>
 8003154:	4602      	mov	r2, r0
 8003156:	460b      	mov	r3, r1
 8003158:	4690      	mov	r8, r2
 800315a:	4699      	mov	r9, r3
 800315c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003160:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003164:	f7fd f89a 	bl	800029c <__adddf3>
 8003168:	4602      	mov	r2, r0
 800316a:	460b      	mov	r3, r1
 800316c:	4610      	mov	r0, r2
 800316e:	4619      	mov	r1, r3
 8003170:	e026      	b.n	80031c0 <dw_main+0x3c8>
 8003172:	bf00      	nop
 8003174:	2000002c 	.word	0x2000002c
 8003178:	0800a8a0 	.word	0x0800a8a0
 800317c:	20000004 	.word	0x20000004
 8003180:	0800a8ac 	.word	0x0800a8ac
 8003184:	20000770 	.word	0x20000770
 8003188:	2427d000 	.word	0x2427d000
 800318c:	20000758 	.word	0x20000758
 8003190:	200007b0 	.word	0x200007b0
 8003194:	20000038 	.word	0x20000038
 8003198:	20000778 	.word	0x20000778
 800319c:	0abe0000 	.word	0x0abe0000
 80031a0:	20000754 	.word	0x20000754
 80031a4:	20000044 	.word	0x20000044
 80031a8:	20000054 	.word	0x20000054
 80031ac:	20000780 	.word	0x20000780
 80031b0:	20000788 	.word	0x20000788
 80031b4:	20000762 	.word	0x20000762
 80031b8:	20000766 	.word	0x20000766
 80031bc:	2000076a 	.word	0x2000076a
 80031c0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80031c4:	f7fd f86a 	bl	800029c <__adddf3>
 80031c8:	4602      	mov	r2, r0
 80031ca:	460b      	mov	r3, r1
 80031cc:	4610      	mov	r0, r2
 80031ce:	4619      	mov	r1, r3
 80031d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031d4:	f7fd f862 	bl	800029c <__adddf3>
 80031d8:	4602      	mov	r2, r0
 80031da:	460b      	mov	r3, r1
 80031dc:	4640      	mov	r0, r8
 80031de:	4649      	mov	r1, r9
 80031e0:	f7fd fb3c 	bl	800085c <__aeabi_ddiv>
 80031e4:	4602      	mov	r2, r0
 80031e6:	460b      	mov	r3, r1
 80031e8:	4610      	mov	r0, r2
 80031ea:	4619      	mov	r1, r3
 80031ec:	f7fd fd6c 	bl	8000cc8 <__aeabi_d2lz>
 80031f0:	4602      	mov	r2, r0
 80031f2:	460b      	mov	r3, r1
 80031f4:	e9c7 2304 	strd	r2, r3, [r7, #16]

                        tof = tof_dtu * DWT_TIME_UNITS;
 80031f8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80031fc:	f7fd f9d6 	bl	80005ac <__aeabi_l2d>
 8003200:	a32c      	add	r3, pc, #176	; (adr r3, 80032b4 <dw_main+0x4bc>)
 8003202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003206:	f7fd f9ff 	bl	8000608 <__aeabi_dmul>
 800320a:	4602      	mov	r2, r0
 800320c:	460b      	mov	r3, r1
 800320e:	4922      	ldr	r1, [pc, #136]	; (8003298 <dw_main+0x4a0>)
 8003210:	e9c1 2300 	strd	r2, r3, [r1]
                        distance = tof * SPEED_OF_LIGHT;
 8003214:	4b20      	ldr	r3, [pc, #128]	; (8003298 <dw_main+0x4a0>)
 8003216:	e9d3 0100 	ldrd	r0, r1, [r3]
 800321a:	a31d      	add	r3, pc, #116	; (adr r3, 8003290 <dw_main+0x498>)
 800321c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003220:	f7fd f9f2 	bl	8000608 <__aeabi_dmul>
 8003224:	4602      	mov	r2, r0
 8003226:	460b      	mov	r3, r1
 8003228:	491c      	ldr	r1, [pc, #112]	; (800329c <dw_main+0x4a4>)
 800322a:	e9c1 2300 	strd	r2, r3, [r1]

                        /* Display computed distance on LCD. */
                        sprintf(dist_str, "DIST: %3.2f m", distance);
 800322e:	4b1b      	ldr	r3, [pc, #108]	; (800329c <dw_main+0x4a4>)
 8003230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003234:	491a      	ldr	r1, [pc, #104]	; (80032a0 <dw_main+0x4a8>)
 8003236:	481b      	ldr	r0, [pc, #108]	; (80032a4 <dw_main+0x4ac>)
 8003238:	f003 fd24 	bl	8006c84 <siprintf>
//                        lcd_display_str(dist_str);
                        HAL_UART_Transmit(&huart2, dist_str, sizeof(dist_str), 100);
 800323c:	2364      	movs	r3, #100	; 0x64
 800323e:	2210      	movs	r2, #16
 8003240:	4918      	ldr	r1, [pc, #96]	; (80032a4 <dw_main+0x4ac>)
 8003242:	4819      	ldr	r0, [pc, #100]	; (80032a8 <dw_main+0x4b0>)
 8003244:	f002 fae7 	bl	8005816 <HAL_UART_Transmit>
                        SSD1306_Clear(); SSD1306_InvertDisplay(0);
 8003248:	f7ff fa01 	bl	800264e <SSD1306_Clear>
 800324c:	2000      	movs	r0, #0
 800324e:	f7fe ffc3 	bl	80021d8 <SSD1306_InvertDisplay>
                        SSD1306_GotoXY(0, 20); ssd1306_write(dist_str, Font_11x18);
 8003252:	2114      	movs	r1, #20
 8003254:	2000      	movs	r0, #0
 8003256:	f7ff f93f 	bl	80024d8 <SSD1306_GotoXY>
 800325a:	4812      	ldr	r0, [pc, #72]	; (80032a4 <dw_main+0x4ac>)
 800325c:	4b13      	ldr	r3, [pc, #76]	; (80032ac <dw_main+0x4b4>)
 800325e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003262:	f7ff fa97 	bl	8002794 <ssd1306_write>
 8003266:	e60b      	b.n	8002e80 <dw_main+0x88>
                    }
                }
                else
                {
                    /* Clear RX error/timeout events in the DW1000 status register. */
                    dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
 8003268:	4a11      	ldr	r2, [pc, #68]	; (80032b0 <dw_main+0x4b8>)
 800326a:	2100      	movs	r1, #0
 800326c:	200f      	movs	r0, #15
 800326e:	f7fe fb48 	bl	8001902 <dwt_write32bitoffsetreg>

                    /* Reset RX to properly reinitialise LDE operation. */
                    dwt_rxreset();
 8003272:	f7fe fdc6 	bl	8001e02 <dwt_rxreset>
 8003276:	e603      	b.n	8002e80 <dw_main+0x88>
            }
        }
        else
        {
            /* Clear RX error/timeout events in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
 8003278:	4a0d      	ldr	r2, [pc, #52]	; (80032b0 <dw_main+0x4b8>)
 800327a:	2100      	movs	r1, #0
 800327c:	200f      	movs	r0, #15
 800327e:	f7fe fb40 	bl	8001902 <dwt_write32bitoffsetreg>

            /* Reset RX to properly reinitialise LDE operation. */
            dwt_rxreset();
 8003282:	f7fe fdbe 	bl	8001e02 <dwt_rxreset>
 8003286:	e5fb      	b.n	8002e80 <dw_main+0x88>
                    continue;
 8003288:	bf00      	nop
    	SSD1306_Clear ();
 800328a:	e5f9      	b.n	8002e80 <dw_main+0x88>
 800328c:	f3af 8000 	nop.w
 8003290:	13000000 	.word	0x13000000
 8003294:	41b1dd19 	.word	0x41b1dd19
 8003298:	20000790 	.word	0x20000790
 800329c:	20000798 	.word	0x20000798
 80032a0:	0800a8bc 	.word	0x0800a8bc
 80032a4:	200007a0 	.word	0x200007a0
 80032a8:	200007b0 	.word	0x200007b0
 80032ac:	2000000c 	.word	0x2000000c
 80032b0:	24279000 	.word	0x24279000
 80032b4:	3bce48fa 	.word	0x3bce48fa
 80032b8:	3db13518 	.word	0x3db13518

080032bc <get_tx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
static uint64 get_tx_timestamp_u64(void)
{
 80032bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80032c0:	b086      	sub	sp, #24
 80032c2:	af00      	add	r7, sp, #0
    uint8 ts_tab[5];
    uint64 ts = 0;
 80032c4:	f04f 0200 	mov.w	r2, #0
 80032c8:	f04f 0300 	mov.w	r3, #0
 80032cc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    int i;
    dwt_readtxtimestamp(ts_tab);
 80032d0:	1d3b      	adds	r3, r7, #4
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7fe f9c8 	bl	8001668 <dwt_readtxtimestamp>
    for (i = 4; i >= 0; i--)
 80032d8:	2304      	movs	r3, #4
 80032da:	60fb      	str	r3, [r7, #12]
 80032dc:	e01e      	b.n	800331c <get_tx_timestamp_u64+0x60>
    {
        ts <<= 8;
 80032de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80032e2:	f04f 0200 	mov.w	r2, #0
 80032e6:	f04f 0300 	mov.w	r3, #0
 80032ea:	020b      	lsls	r3, r1, #8
 80032ec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80032f0:	0202      	lsls	r2, r0, #8
 80032f2:	e9c7 2304 	strd	r2, r3, [r7, #16]
        ts |= ts_tab[i];
 80032f6:	1d3a      	adds	r2, r7, #4
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	4413      	add	r3, r2
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2200      	movs	r2, #0
 8003302:	461c      	mov	r4, r3
 8003304:	4615      	mov	r5, r2
 8003306:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800330a:	ea42 0804 	orr.w	r8, r2, r4
 800330e:	ea43 0905 	orr.w	r9, r3, r5
 8003312:	e9c7 8904 	strd	r8, r9, [r7, #16]
    for (i = 4; i >= 0; i--)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	3b01      	subs	r3, #1
 800331a:	60fb      	str	r3, [r7, #12]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2b00      	cmp	r3, #0
 8003320:	dadd      	bge.n	80032de <get_tx_timestamp_u64+0x22>
    }
    return ts;
 8003322:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8003326:	4610      	mov	r0, r2
 8003328:	4619      	mov	r1, r3
 800332a:	3718      	adds	r7, #24
 800332c:	46bd      	mov	sp, r7
 800332e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08003332 <get_rx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
static uint64 get_rx_timestamp_u64(void)
{
 8003332:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
    uint8 ts_tab[5];
    uint64 ts = 0;
 800333a:	f04f 0200 	mov.w	r2, #0
 800333e:	f04f 0300 	mov.w	r3, #0
 8003342:	e9c7 2304 	strd	r2, r3, [r7, #16]
    int i;
    dwt_readrxtimestamp(ts_tab);
 8003346:	1d3b      	adds	r3, r7, #4
 8003348:	4618      	mov	r0, r3
 800334a:	f7fe f99b 	bl	8001684 <dwt_readrxtimestamp>
    for (i = 4; i >= 0; i--)
 800334e:	2304      	movs	r3, #4
 8003350:	60fb      	str	r3, [r7, #12]
 8003352:	e01e      	b.n	8003392 <get_rx_timestamp_u64+0x60>
    {
        ts <<= 8;
 8003354:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003358:	f04f 0200 	mov.w	r2, #0
 800335c:	f04f 0300 	mov.w	r3, #0
 8003360:	020b      	lsls	r3, r1, #8
 8003362:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003366:	0202      	lsls	r2, r0, #8
 8003368:	e9c7 2304 	strd	r2, r3, [r7, #16]
        ts |= ts_tab[i];
 800336c:	1d3a      	adds	r2, r7, #4
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	4413      	add	r3, r2
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2200      	movs	r2, #0
 8003378:	461c      	mov	r4, r3
 800337a:	4615      	mov	r5, r2
 800337c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003380:	ea42 0804 	orr.w	r8, r2, r4
 8003384:	ea43 0905 	orr.w	r9, r3, r5
 8003388:	e9c7 8904 	strd	r8, r9, [r7, #16]
    for (i = 4; i >= 0; i--)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	3b01      	subs	r3, #1
 8003390:	60fb      	str	r3, [r7, #12]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2b00      	cmp	r3, #0
 8003396:	dadd      	bge.n	8003354 <get_rx_timestamp_u64+0x22>
    }
    return ts;
 8003398:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 800339c:	4610      	mov	r0, r2
 800339e:	4619      	mov	r1, r3
 80033a0:	3718      	adds	r7, #24
 80033a2:	46bd      	mov	sp, r7
 80033a4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080033a8 <final_msg_get_ts>:
 *         ts  timestamp value
 *
 * @return none
 */
static void final_msg_get_ts(const uint8 *ts_field, uint32 *ts)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b085      	sub	sp, #20
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
    int i;
    *ts = 0;
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	2200      	movs	r2, #0
 80033b6:	601a      	str	r2, [r3, #0]
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 80033b8:	2300      	movs	r3, #0
 80033ba:	60fb      	str	r3, [r7, #12]
 80033bc:	e010      	b.n	80033e0 <final_msg_get_ts+0x38>
    {
        *ts += ts_field[i] << (i * 8);
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	6879      	ldr	r1, [r7, #4]
 80033c6:	440a      	add	r2, r1
 80033c8:	7812      	ldrb	r2, [r2, #0]
 80033ca:	4611      	mov	r1, r2
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	00d2      	lsls	r2, r2, #3
 80033d0:	fa01 f202 	lsl.w	r2, r1, r2
 80033d4:	441a      	add	r2, r3
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	601a      	str	r2, [r3, #0]
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	3301      	adds	r3, #1
 80033de:	60fb      	str	r3, [r7, #12]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2b03      	cmp	r3, #3
 80033e4:	ddeb      	ble.n	80033be <final_msg_get_ts+0x16>
    }
}
 80033e6:	bf00      	nop
 80033e8:	bf00      	nop
 80033ea:	3714      	adds	r7, #20
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80033f8:	4b11      	ldr	r3, [pc, #68]	; (8003440 <MX_USART2_UART_Init+0x4c>)
 80033fa:	4a12      	ldr	r2, [pc, #72]	; (8003444 <MX_USART2_UART_Init+0x50>)
 80033fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80033fe:	4b10      	ldr	r3, [pc, #64]	; (8003440 <MX_USART2_UART_Init+0x4c>)
 8003400:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003404:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003406:	4b0e      	ldr	r3, [pc, #56]	; (8003440 <MX_USART2_UART_Init+0x4c>)
 8003408:	2200      	movs	r2, #0
 800340a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800340c:	4b0c      	ldr	r3, [pc, #48]	; (8003440 <MX_USART2_UART_Init+0x4c>)
 800340e:	2200      	movs	r2, #0
 8003410:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003412:	4b0b      	ldr	r3, [pc, #44]	; (8003440 <MX_USART2_UART_Init+0x4c>)
 8003414:	2200      	movs	r2, #0
 8003416:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003418:	4b09      	ldr	r3, [pc, #36]	; (8003440 <MX_USART2_UART_Init+0x4c>)
 800341a:	220c      	movs	r2, #12
 800341c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800341e:	4b08      	ldr	r3, [pc, #32]	; (8003440 <MX_USART2_UART_Init+0x4c>)
 8003420:	2200      	movs	r2, #0
 8003422:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003424:	4b06      	ldr	r3, [pc, #24]	; (8003440 <MX_USART2_UART_Init+0x4c>)
 8003426:	2200      	movs	r2, #0
 8003428:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800342a:	4805      	ldr	r0, [pc, #20]	; (8003440 <MX_USART2_UART_Init+0x4c>)
 800342c:	f002 f9a6 	bl	800577c <HAL_UART_Init>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d001      	beq.n	800343a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003436:	f7ff fb1f 	bl	8002a78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800343a:	bf00      	nop
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	200007b0 	.word	0x200007b0
 8003444:	40004400 	.word	0x40004400

08003448 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b08a      	sub	sp, #40	; 0x28
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003450:	f107 0314 	add.w	r3, r7, #20
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]
 8003458:	605a      	str	r2, [r3, #4]
 800345a:	609a      	str	r2, [r3, #8]
 800345c:	60da      	str	r2, [r3, #12]
 800345e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a19      	ldr	r2, [pc, #100]	; (80034cc <HAL_UART_MspInit+0x84>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d12b      	bne.n	80034c2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800346a:	2300      	movs	r3, #0
 800346c:	613b      	str	r3, [r7, #16]
 800346e:	4b18      	ldr	r3, [pc, #96]	; (80034d0 <HAL_UART_MspInit+0x88>)
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	4a17      	ldr	r2, [pc, #92]	; (80034d0 <HAL_UART_MspInit+0x88>)
 8003474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003478:	6413      	str	r3, [r2, #64]	; 0x40
 800347a:	4b15      	ldr	r3, [pc, #84]	; (80034d0 <HAL_UART_MspInit+0x88>)
 800347c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003482:	613b      	str	r3, [r7, #16]
 8003484:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003486:	2300      	movs	r3, #0
 8003488:	60fb      	str	r3, [r7, #12]
 800348a:	4b11      	ldr	r3, [pc, #68]	; (80034d0 <HAL_UART_MspInit+0x88>)
 800348c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348e:	4a10      	ldr	r2, [pc, #64]	; (80034d0 <HAL_UART_MspInit+0x88>)
 8003490:	f043 0301 	orr.w	r3, r3, #1
 8003494:	6313      	str	r3, [r2, #48]	; 0x30
 8003496:	4b0e      	ldr	r3, [pc, #56]	; (80034d0 <HAL_UART_MspInit+0x88>)
 8003498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	60fb      	str	r3, [r7, #12]
 80034a0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80034a2:	230c      	movs	r3, #12
 80034a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a6:	2302      	movs	r3, #2
 80034a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034aa:	2300      	movs	r3, #0
 80034ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ae:	2303      	movs	r3, #3
 80034b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80034b2:	2307      	movs	r3, #7
 80034b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034b6:	f107 0314 	add.w	r3, r7, #20
 80034ba:	4619      	mov	r1, r3
 80034bc:	4805      	ldr	r0, [pc, #20]	; (80034d4 <HAL_UART_MspInit+0x8c>)
 80034be:	f000 fa31 	bl	8003924 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80034c2:	bf00      	nop
 80034c4:	3728      	adds	r7, #40	; 0x28
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	40004400 	.word	0x40004400
 80034d0:	40023800 	.word	0x40023800
 80034d4:	40020000 	.word	0x40020000

080034d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80034d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003510 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80034dc:	480d      	ldr	r0, [pc, #52]	; (8003514 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80034de:	490e      	ldr	r1, [pc, #56]	; (8003518 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80034e0:	4a0e      	ldr	r2, [pc, #56]	; (800351c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80034e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034e4:	e002      	b.n	80034ec <LoopCopyDataInit>

080034e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034ea:	3304      	adds	r3, #4

080034ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034f0:	d3f9      	bcc.n	80034e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034f2:	4a0b      	ldr	r2, [pc, #44]	; (8003520 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80034f4:	4c0b      	ldr	r4, [pc, #44]	; (8003524 <LoopFillZerobss+0x26>)
  movs r3, #0
 80034f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034f8:	e001      	b.n	80034fe <LoopFillZerobss>

080034fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034fc:	3204      	adds	r2, #4

080034fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003500:	d3fb      	bcc.n	80034fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003502:	f7ff fc67 	bl	8002dd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003506:	f002 fd01 	bl	8005f0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800350a:	f7ff fa41 	bl	8002990 <main>
  bx  lr    
 800350e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003510:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003514:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003518:	20000248 	.word	0x20000248
  ldr r2, =_sidata
 800351c:	0800c314 	.word	0x0800c314
  ldr r2, =_sbss
 8003520:	20000248 	.word	0x20000248
  ldr r4, =_ebss
 8003524:	20000808 	.word	0x20000808

08003528 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003528:	e7fe      	b.n	8003528 <ADC_IRQHandler>
	...

0800352c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003530:	4b0e      	ldr	r3, [pc, #56]	; (800356c <HAL_Init+0x40>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a0d      	ldr	r2, [pc, #52]	; (800356c <HAL_Init+0x40>)
 8003536:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800353a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800353c:	4b0b      	ldr	r3, [pc, #44]	; (800356c <HAL_Init+0x40>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a0a      	ldr	r2, [pc, #40]	; (800356c <HAL_Init+0x40>)
 8003542:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003546:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003548:	4b08      	ldr	r3, [pc, #32]	; (800356c <HAL_Init+0x40>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a07      	ldr	r2, [pc, #28]	; (800356c <HAL_Init+0x40>)
 800354e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003552:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003554:	2003      	movs	r0, #3
 8003556:	f000 f973 	bl	8003840 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800355a:	200f      	movs	r0, #15
 800355c:	f000 f808 	bl	8003570 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003560:	f7ff fb16 	bl	8002b90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	40023c00 	.word	0x40023c00

08003570 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003578:	4b12      	ldr	r3, [pc, #72]	; (80035c4 <HAL_InitTick+0x54>)
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	4b12      	ldr	r3, [pc, #72]	; (80035c8 <HAL_InitTick+0x58>)
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	4619      	mov	r1, r3
 8003582:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003586:	fbb3 f3f1 	udiv	r3, r3, r1
 800358a:	fbb2 f3f3 	udiv	r3, r2, r3
 800358e:	4618      	mov	r0, r3
 8003590:	f000 f999 	bl	80038c6 <HAL_SYSTICK_Config>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e00e      	b.n	80035bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b0f      	cmp	r3, #15
 80035a2:	d80a      	bhi.n	80035ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035a4:	2200      	movs	r2, #0
 80035a6:	6879      	ldr	r1, [r7, #4]
 80035a8:	f04f 30ff 	mov.w	r0, #4294967295
 80035ac:	f000 f953 	bl	8003856 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80035b0:	4a06      	ldr	r2, [pc, #24]	; (80035cc <HAL_InitTick+0x5c>)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
 80035b8:	e000      	b.n	80035bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3708      	adds	r7, #8
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	20000014 	.word	0x20000014
 80035c8:	20000070 	.word	0x20000070
 80035cc:	2000006c 	.word	0x2000006c

080035d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035d4:	4b06      	ldr	r3, [pc, #24]	; (80035f0 <HAL_IncTick+0x20>)
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	461a      	mov	r2, r3
 80035da:	4b06      	ldr	r3, [pc, #24]	; (80035f4 <HAL_IncTick+0x24>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4413      	add	r3, r2
 80035e0:	4a04      	ldr	r2, [pc, #16]	; (80035f4 <HAL_IncTick+0x24>)
 80035e2:	6013      	str	r3, [r2, #0]
}
 80035e4:	bf00      	nop
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	20000070 	.word	0x20000070
 80035f4:	200007f4 	.word	0x200007f4

080035f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0
  return uwTick;
 80035fc:	4b03      	ldr	r3, [pc, #12]	; (800360c <HAL_GetTick+0x14>)
 80035fe:	681b      	ldr	r3, [r3, #0]
}
 8003600:	4618      	mov	r0, r3
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	200007f4 	.word	0x200007f4

08003610 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003618:	f7ff ffee 	bl	80035f8 <HAL_GetTick>
 800361c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003628:	d005      	beq.n	8003636 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800362a:	4b0a      	ldr	r3, [pc, #40]	; (8003654 <HAL_Delay+0x44>)
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	461a      	mov	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	4413      	add	r3, r2
 8003634:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003636:	bf00      	nop
 8003638:	f7ff ffde 	bl	80035f8 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	429a      	cmp	r2, r3
 8003646:	d8f7      	bhi.n	8003638 <HAL_Delay+0x28>
  {
  }
}
 8003648:	bf00      	nop
 800364a:	bf00      	nop
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	20000070 	.word	0x20000070

08003658 <__NVIC_SetPriorityGrouping>:
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f003 0307 	and.w	r3, r3, #7
 8003666:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003668:	4b0c      	ldr	r3, [pc, #48]	; (800369c <__NVIC_SetPriorityGrouping+0x44>)
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003674:	4013      	ands	r3, r2
 8003676:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003680:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003688:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800368a:	4a04      	ldr	r2, [pc, #16]	; (800369c <__NVIC_SetPriorityGrouping+0x44>)
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	60d3      	str	r3, [r2, #12]
}
 8003690:	bf00      	nop
 8003692:	3714      	adds	r7, #20
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr
 800369c:	e000ed00 	.word	0xe000ed00

080036a0 <__NVIC_GetPriorityGrouping>:
{
 80036a0:	b480      	push	{r7}
 80036a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036a4:	4b04      	ldr	r3, [pc, #16]	; (80036b8 <__NVIC_GetPriorityGrouping+0x18>)
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	0a1b      	lsrs	r3, r3, #8
 80036aa:	f003 0307 	and.w	r3, r3, #7
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr
 80036b8:	e000ed00 	.word	0xe000ed00

080036bc <__NVIC_EnableIRQ>:
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	4603      	mov	r3, r0
 80036c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	db0b      	blt.n	80036e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036ce:	79fb      	ldrb	r3, [r7, #7]
 80036d0:	f003 021f 	and.w	r2, r3, #31
 80036d4:	4907      	ldr	r1, [pc, #28]	; (80036f4 <__NVIC_EnableIRQ+0x38>)
 80036d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036da:	095b      	lsrs	r3, r3, #5
 80036dc:	2001      	movs	r0, #1
 80036de:	fa00 f202 	lsl.w	r2, r0, r2
 80036e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80036e6:	bf00      	nop
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	e000e100 	.word	0xe000e100

080036f8 <__NVIC_DisableIRQ>:
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	4603      	mov	r3, r0
 8003700:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003706:	2b00      	cmp	r3, #0
 8003708:	db12      	blt.n	8003730 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800370a:	79fb      	ldrb	r3, [r7, #7]
 800370c:	f003 021f 	and.w	r2, r3, #31
 8003710:	490a      	ldr	r1, [pc, #40]	; (800373c <__NVIC_DisableIRQ+0x44>)
 8003712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003716:	095b      	lsrs	r3, r3, #5
 8003718:	2001      	movs	r0, #1
 800371a:	fa00 f202 	lsl.w	r2, r0, r2
 800371e:	3320      	adds	r3, #32
 8003720:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003724:	f3bf 8f4f 	dsb	sy
}
 8003728:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800372a:	f3bf 8f6f 	isb	sy
}
 800372e:	bf00      	nop
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr
 800373c:	e000e100 	.word	0xe000e100

08003740 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	4603      	mov	r3, r0
 8003748:	6039      	str	r1, [r7, #0]
 800374a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800374c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003750:	2b00      	cmp	r3, #0
 8003752:	db0a      	blt.n	800376a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	b2da      	uxtb	r2, r3
 8003758:	490c      	ldr	r1, [pc, #48]	; (800378c <__NVIC_SetPriority+0x4c>)
 800375a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800375e:	0112      	lsls	r2, r2, #4
 8003760:	b2d2      	uxtb	r2, r2
 8003762:	440b      	add	r3, r1
 8003764:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003768:	e00a      	b.n	8003780 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	b2da      	uxtb	r2, r3
 800376e:	4908      	ldr	r1, [pc, #32]	; (8003790 <__NVIC_SetPriority+0x50>)
 8003770:	79fb      	ldrb	r3, [r7, #7]
 8003772:	f003 030f 	and.w	r3, r3, #15
 8003776:	3b04      	subs	r3, #4
 8003778:	0112      	lsls	r2, r2, #4
 800377a:	b2d2      	uxtb	r2, r2
 800377c:	440b      	add	r3, r1
 800377e:	761a      	strb	r2, [r3, #24]
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr
 800378c:	e000e100 	.word	0xe000e100
 8003790:	e000ed00 	.word	0xe000ed00

08003794 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003794:	b480      	push	{r7}
 8003796:	b089      	sub	sp, #36	; 0x24
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f003 0307 	and.w	r3, r3, #7
 80037a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	f1c3 0307 	rsb	r3, r3, #7
 80037ae:	2b04      	cmp	r3, #4
 80037b0:	bf28      	it	cs
 80037b2:	2304      	movcs	r3, #4
 80037b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	3304      	adds	r3, #4
 80037ba:	2b06      	cmp	r3, #6
 80037bc:	d902      	bls.n	80037c4 <NVIC_EncodePriority+0x30>
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	3b03      	subs	r3, #3
 80037c2:	e000      	b.n	80037c6 <NVIC_EncodePriority+0x32>
 80037c4:	2300      	movs	r3, #0
 80037c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037c8:	f04f 32ff 	mov.w	r2, #4294967295
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	fa02 f303 	lsl.w	r3, r2, r3
 80037d2:	43da      	mvns	r2, r3
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	401a      	ands	r2, r3
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037dc:	f04f 31ff 	mov.w	r1, #4294967295
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	fa01 f303 	lsl.w	r3, r1, r3
 80037e6:	43d9      	mvns	r1, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037ec:	4313      	orrs	r3, r2
         );
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3724      	adds	r7, #36	; 0x24
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
	...

080037fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	3b01      	subs	r3, #1
 8003808:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800380c:	d301      	bcc.n	8003812 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800380e:	2301      	movs	r3, #1
 8003810:	e00f      	b.n	8003832 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003812:	4a0a      	ldr	r2, [pc, #40]	; (800383c <SysTick_Config+0x40>)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3b01      	subs	r3, #1
 8003818:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800381a:	210f      	movs	r1, #15
 800381c:	f04f 30ff 	mov.w	r0, #4294967295
 8003820:	f7ff ff8e 	bl	8003740 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003824:	4b05      	ldr	r3, [pc, #20]	; (800383c <SysTick_Config+0x40>)
 8003826:	2200      	movs	r2, #0
 8003828:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800382a:	4b04      	ldr	r3, [pc, #16]	; (800383c <SysTick_Config+0x40>)
 800382c:	2207      	movs	r2, #7
 800382e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3708      	adds	r7, #8
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	e000e010 	.word	0xe000e010

08003840 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f7ff ff05 	bl	8003658 <__NVIC_SetPriorityGrouping>
}
 800384e:	bf00      	nop
 8003850:	3708      	adds	r7, #8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003856:	b580      	push	{r7, lr}
 8003858:	b086      	sub	sp, #24
 800385a:	af00      	add	r7, sp, #0
 800385c:	4603      	mov	r3, r0
 800385e:	60b9      	str	r1, [r7, #8]
 8003860:	607a      	str	r2, [r7, #4]
 8003862:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003864:	2300      	movs	r3, #0
 8003866:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003868:	f7ff ff1a 	bl	80036a0 <__NVIC_GetPriorityGrouping>
 800386c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	68b9      	ldr	r1, [r7, #8]
 8003872:	6978      	ldr	r0, [r7, #20]
 8003874:	f7ff ff8e 	bl	8003794 <NVIC_EncodePriority>
 8003878:	4602      	mov	r2, r0
 800387a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800387e:	4611      	mov	r1, r2
 8003880:	4618      	mov	r0, r3
 8003882:	f7ff ff5d 	bl	8003740 <__NVIC_SetPriority>
}
 8003886:	bf00      	nop
 8003888:	3718      	adds	r7, #24
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}

0800388e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800388e:	b580      	push	{r7, lr}
 8003890:	b082      	sub	sp, #8
 8003892:	af00      	add	r7, sp, #0
 8003894:	4603      	mov	r3, r0
 8003896:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800389c:	4618      	mov	r0, r3
 800389e:	f7ff ff0d 	bl	80036bc <__NVIC_EnableIRQ>
}
 80038a2:	bf00      	nop
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}

080038aa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80038aa:	b580      	push	{r7, lr}
 80038ac:	b082      	sub	sp, #8
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	4603      	mov	r3, r0
 80038b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80038b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7ff ff1d 	bl	80036f8 <__NVIC_DisableIRQ>
}
 80038be:	bf00      	nop
 80038c0:	3708      	adds	r7, #8
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b082      	sub	sp, #8
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f7ff ff94 	bl	80037fc <SysTick_Config>
 80038d4:	4603      	mov	r3, r0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3708      	adds	r7, #8
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80038de:	b480      	push	{r7}
 80038e0:	b083      	sub	sp, #12
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d004      	beq.n	80038fc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2280      	movs	r2, #128	; 0x80
 80038f6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e00c      	b.n	8003916 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2205      	movs	r2, #5
 8003900:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f022 0201 	bic.w	r2, r2, #1
 8003912:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
	...

08003924 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003924:	b480      	push	{r7}
 8003926:	b089      	sub	sp, #36	; 0x24
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800392e:	2300      	movs	r3, #0
 8003930:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003932:	2300      	movs	r3, #0
 8003934:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003936:	2300      	movs	r3, #0
 8003938:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800393a:	2300      	movs	r3, #0
 800393c:	61fb      	str	r3, [r7, #28]
 800393e:	e159      	b.n	8003bf4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003940:	2201      	movs	r2, #1
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	fa02 f303 	lsl.w	r3, r2, r3
 8003948:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	697a      	ldr	r2, [r7, #20]
 8003950:	4013      	ands	r3, r2
 8003952:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	429a      	cmp	r2, r3
 800395a:	f040 8148 	bne.w	8003bee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f003 0303 	and.w	r3, r3, #3
 8003966:	2b01      	cmp	r3, #1
 8003968:	d005      	beq.n	8003976 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003972:	2b02      	cmp	r3, #2
 8003974:	d130      	bne.n	80039d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	005b      	lsls	r3, r3, #1
 8003980:	2203      	movs	r2, #3
 8003982:	fa02 f303 	lsl.w	r3, r2, r3
 8003986:	43db      	mvns	r3, r3
 8003988:	69ba      	ldr	r2, [r7, #24]
 800398a:	4013      	ands	r3, r2
 800398c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	68da      	ldr	r2, [r3, #12]
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	fa02 f303 	lsl.w	r3, r2, r3
 800399a:	69ba      	ldr	r2, [r7, #24]
 800399c:	4313      	orrs	r3, r2
 800399e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	69ba      	ldr	r2, [r7, #24]
 80039a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039ac:	2201      	movs	r2, #1
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	fa02 f303 	lsl.w	r3, r2, r3
 80039b4:	43db      	mvns	r3, r3
 80039b6:	69ba      	ldr	r2, [r7, #24]
 80039b8:	4013      	ands	r3, r2
 80039ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	091b      	lsrs	r3, r3, #4
 80039c2:	f003 0201 	and.w	r2, r3, #1
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	fa02 f303 	lsl.w	r3, r2, r3
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	69ba      	ldr	r2, [r7, #24]
 80039d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f003 0303 	and.w	r3, r3, #3
 80039e0:	2b03      	cmp	r3, #3
 80039e2:	d017      	beq.n	8003a14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	2203      	movs	r2, #3
 80039f0:	fa02 f303 	lsl.w	r3, r2, r3
 80039f4:	43db      	mvns	r3, r3
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	4013      	ands	r3, r2
 80039fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	689a      	ldr	r2, [r3, #8]
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	005b      	lsls	r3, r3, #1
 8003a04:	fa02 f303 	lsl.w	r3, r2, r3
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	69ba      	ldr	r2, [r7, #24]
 8003a12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f003 0303 	and.w	r3, r3, #3
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d123      	bne.n	8003a68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	08da      	lsrs	r2, r3, #3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	3208      	adds	r2, #8
 8003a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	f003 0307 	and.w	r3, r3, #7
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	220f      	movs	r2, #15
 8003a38:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3c:	43db      	mvns	r3, r3
 8003a3e:	69ba      	ldr	r2, [r7, #24]
 8003a40:	4013      	ands	r3, r2
 8003a42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	691a      	ldr	r2, [r3, #16]
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	f003 0307 	and.w	r3, r3, #7
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	fa02 f303 	lsl.w	r3, r2, r3
 8003a54:	69ba      	ldr	r2, [r7, #24]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	08da      	lsrs	r2, r3, #3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	3208      	adds	r2, #8
 8003a62:	69b9      	ldr	r1, [r7, #24]
 8003a64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	2203      	movs	r2, #3
 8003a74:	fa02 f303 	lsl.w	r3, r2, r3
 8003a78:	43db      	mvns	r3, r3
 8003a7a:	69ba      	ldr	r2, [r7, #24]
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f003 0203 	and.w	r2, r3, #3
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f000 80a2 	beq.w	8003bee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aaa:	2300      	movs	r3, #0
 8003aac:	60fb      	str	r3, [r7, #12]
 8003aae:	4b57      	ldr	r3, [pc, #348]	; (8003c0c <HAL_GPIO_Init+0x2e8>)
 8003ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab2:	4a56      	ldr	r2, [pc, #344]	; (8003c0c <HAL_GPIO_Init+0x2e8>)
 8003ab4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8003aba:	4b54      	ldr	r3, [pc, #336]	; (8003c0c <HAL_GPIO_Init+0x2e8>)
 8003abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ac2:	60fb      	str	r3, [r7, #12]
 8003ac4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ac6:	4a52      	ldr	r2, [pc, #328]	; (8003c10 <HAL_GPIO_Init+0x2ec>)
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	089b      	lsrs	r3, r3, #2
 8003acc:	3302      	adds	r3, #2
 8003ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	f003 0303 	and.w	r3, r3, #3
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	220f      	movs	r2, #15
 8003ade:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae2:	43db      	mvns	r3, r3
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a49      	ldr	r2, [pc, #292]	; (8003c14 <HAL_GPIO_Init+0x2f0>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d019      	beq.n	8003b26 <HAL_GPIO_Init+0x202>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a48      	ldr	r2, [pc, #288]	; (8003c18 <HAL_GPIO_Init+0x2f4>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d013      	beq.n	8003b22 <HAL_GPIO_Init+0x1fe>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a47      	ldr	r2, [pc, #284]	; (8003c1c <HAL_GPIO_Init+0x2f8>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d00d      	beq.n	8003b1e <HAL_GPIO_Init+0x1fa>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a46      	ldr	r2, [pc, #280]	; (8003c20 <HAL_GPIO_Init+0x2fc>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d007      	beq.n	8003b1a <HAL_GPIO_Init+0x1f6>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a45      	ldr	r2, [pc, #276]	; (8003c24 <HAL_GPIO_Init+0x300>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d101      	bne.n	8003b16 <HAL_GPIO_Init+0x1f2>
 8003b12:	2304      	movs	r3, #4
 8003b14:	e008      	b.n	8003b28 <HAL_GPIO_Init+0x204>
 8003b16:	2307      	movs	r3, #7
 8003b18:	e006      	b.n	8003b28 <HAL_GPIO_Init+0x204>
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e004      	b.n	8003b28 <HAL_GPIO_Init+0x204>
 8003b1e:	2302      	movs	r3, #2
 8003b20:	e002      	b.n	8003b28 <HAL_GPIO_Init+0x204>
 8003b22:	2301      	movs	r3, #1
 8003b24:	e000      	b.n	8003b28 <HAL_GPIO_Init+0x204>
 8003b26:	2300      	movs	r3, #0
 8003b28:	69fa      	ldr	r2, [r7, #28]
 8003b2a:	f002 0203 	and.w	r2, r2, #3
 8003b2e:	0092      	lsls	r2, r2, #2
 8003b30:	4093      	lsls	r3, r2
 8003b32:	69ba      	ldr	r2, [r7, #24]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b38:	4935      	ldr	r1, [pc, #212]	; (8003c10 <HAL_GPIO_Init+0x2ec>)
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	089b      	lsrs	r3, r3, #2
 8003b3e:	3302      	adds	r3, #2
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b46:	4b38      	ldr	r3, [pc, #224]	; (8003c28 <HAL_GPIO_Init+0x304>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	43db      	mvns	r3, r3
 8003b50:	69ba      	ldr	r2, [r7, #24]
 8003b52:	4013      	ands	r3, r2
 8003b54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d003      	beq.n	8003b6a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003b62:	69ba      	ldr	r2, [r7, #24]
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b6a:	4a2f      	ldr	r2, [pc, #188]	; (8003c28 <HAL_GPIO_Init+0x304>)
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003b70:	4b2d      	ldr	r3, [pc, #180]	; (8003c28 <HAL_GPIO_Init+0x304>)
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	43db      	mvns	r3, r3
 8003b7a:	69ba      	ldr	r2, [r7, #24]
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d003      	beq.n	8003b94 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b94:	4a24      	ldr	r2, [pc, #144]	; (8003c28 <HAL_GPIO_Init+0x304>)
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b9a:	4b23      	ldr	r3, [pc, #140]	; (8003c28 <HAL_GPIO_Init+0x304>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	43db      	mvns	r3, r3
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d003      	beq.n	8003bbe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003bb6:	69ba      	ldr	r2, [r7, #24]
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003bbe:	4a1a      	ldr	r2, [pc, #104]	; (8003c28 <HAL_GPIO_Init+0x304>)
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003bc4:	4b18      	ldr	r3, [pc, #96]	; (8003c28 <HAL_GPIO_Init+0x304>)
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	43db      	mvns	r3, r3
 8003bce:	69ba      	ldr	r2, [r7, #24]
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d003      	beq.n	8003be8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003be8:	4a0f      	ldr	r2, [pc, #60]	; (8003c28 <HAL_GPIO_Init+0x304>)
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	61fb      	str	r3, [r7, #28]
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	2b0f      	cmp	r3, #15
 8003bf8:	f67f aea2 	bls.w	8003940 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003bfc:	bf00      	nop
 8003bfe:	bf00      	nop
 8003c00:	3724      	adds	r7, #36	; 0x24
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	40023800 	.word	0x40023800
 8003c10:	40013800 	.word	0x40013800
 8003c14:	40020000 	.word	0x40020000
 8003c18:	40020400 	.word	0x40020400
 8003c1c:	40020800 	.word	0x40020800
 8003c20:	40020c00 	.word	0x40020c00
 8003c24:	40021000 	.word	0x40021000
 8003c28:	40013c00 	.word	0x40013c00

08003c2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	460b      	mov	r3, r1
 8003c36:	807b      	strh	r3, [r7, #2]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c3c:	787b      	ldrb	r3, [r7, #1]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c42:	887a      	ldrh	r2, [r7, #2]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c48:	e003      	b.n	8003c52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c4a:	887b      	ldrh	r3, [r7, #2]
 8003c4c:	041a      	lsls	r2, r3, #16
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	619a      	str	r2, [r3, #24]
}
 8003c52:	bf00      	nop
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
	...

08003c60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d101      	bne.n	8003c72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e12b      	b.n	8003eca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d106      	bne.n	8003c8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f7fe fe3a 	bl	8002900 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2224      	movs	r2, #36	; 0x24
 8003c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f022 0201 	bic.w	r2, r2, #1
 8003ca2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cb2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003cc2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003cc4:	f001 f976 	bl	8004fb4 <HAL_RCC_GetPCLK1Freq>
 8003cc8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	4a81      	ldr	r2, [pc, #516]	; (8003ed4 <HAL_I2C_Init+0x274>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d807      	bhi.n	8003ce4 <HAL_I2C_Init+0x84>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	4a80      	ldr	r2, [pc, #512]	; (8003ed8 <HAL_I2C_Init+0x278>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	bf94      	ite	ls
 8003cdc:	2301      	movls	r3, #1
 8003cde:	2300      	movhi	r3, #0
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	e006      	b.n	8003cf2 <HAL_I2C_Init+0x92>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	4a7d      	ldr	r2, [pc, #500]	; (8003edc <HAL_I2C_Init+0x27c>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	bf94      	ite	ls
 8003cec:	2301      	movls	r3, #1
 8003cee:	2300      	movhi	r3, #0
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d001      	beq.n	8003cfa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e0e7      	b.n	8003eca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	4a78      	ldr	r2, [pc, #480]	; (8003ee0 <HAL_I2C_Init+0x280>)
 8003cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8003d02:	0c9b      	lsrs	r3, r3, #18
 8003d04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68ba      	ldr	r2, [r7, #8]
 8003d16:	430a      	orrs	r2, r1
 8003d18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	6a1b      	ldr	r3, [r3, #32]
 8003d20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	4a6a      	ldr	r2, [pc, #424]	; (8003ed4 <HAL_I2C_Init+0x274>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d802      	bhi.n	8003d34 <HAL_I2C_Init+0xd4>
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	3301      	adds	r3, #1
 8003d32:	e009      	b.n	8003d48 <HAL_I2C_Init+0xe8>
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003d3a:	fb02 f303 	mul.w	r3, r2, r3
 8003d3e:	4a69      	ldr	r2, [pc, #420]	; (8003ee4 <HAL_I2C_Init+0x284>)
 8003d40:	fba2 2303 	umull	r2, r3, r2, r3
 8003d44:	099b      	lsrs	r3, r3, #6
 8003d46:	3301      	adds	r3, #1
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	6812      	ldr	r2, [r2, #0]
 8003d4c:	430b      	orrs	r3, r1
 8003d4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	69db      	ldr	r3, [r3, #28]
 8003d56:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003d5a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	495c      	ldr	r1, [pc, #368]	; (8003ed4 <HAL_I2C_Init+0x274>)
 8003d64:	428b      	cmp	r3, r1
 8003d66:	d819      	bhi.n	8003d9c <HAL_I2C_Init+0x13c>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	1e59      	subs	r1, r3, #1
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	005b      	lsls	r3, r3, #1
 8003d72:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d76:	1c59      	adds	r1, r3, #1
 8003d78:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d7c:	400b      	ands	r3, r1
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00a      	beq.n	8003d98 <HAL_I2C_Init+0x138>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	1e59      	subs	r1, r3, #1
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d90:	3301      	adds	r3, #1
 8003d92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d96:	e051      	b.n	8003e3c <HAL_I2C_Init+0x1dc>
 8003d98:	2304      	movs	r3, #4
 8003d9a:	e04f      	b.n	8003e3c <HAL_I2C_Init+0x1dc>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d111      	bne.n	8003dc8 <HAL_I2C_Init+0x168>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	1e58      	subs	r0, r3, #1
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6859      	ldr	r1, [r3, #4]
 8003dac:	460b      	mov	r3, r1
 8003dae:	005b      	lsls	r3, r3, #1
 8003db0:	440b      	add	r3, r1
 8003db2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003db6:	3301      	adds	r3, #1
 8003db8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	bf0c      	ite	eq
 8003dc0:	2301      	moveq	r3, #1
 8003dc2:	2300      	movne	r3, #0
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	e012      	b.n	8003dee <HAL_I2C_Init+0x18e>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	1e58      	subs	r0, r3, #1
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6859      	ldr	r1, [r3, #4]
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	440b      	add	r3, r1
 8003dd6:	0099      	lsls	r1, r3, #2
 8003dd8:	440b      	add	r3, r1
 8003dda:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dde:	3301      	adds	r3, #1
 8003de0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	bf0c      	ite	eq
 8003de8:	2301      	moveq	r3, #1
 8003dea:	2300      	movne	r3, #0
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <HAL_I2C_Init+0x196>
 8003df2:	2301      	movs	r3, #1
 8003df4:	e022      	b.n	8003e3c <HAL_I2C_Init+0x1dc>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10e      	bne.n	8003e1c <HAL_I2C_Init+0x1bc>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	1e58      	subs	r0, r3, #1
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6859      	ldr	r1, [r3, #4]
 8003e06:	460b      	mov	r3, r1
 8003e08:	005b      	lsls	r3, r3, #1
 8003e0a:	440b      	add	r3, r1
 8003e0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e10:	3301      	adds	r3, #1
 8003e12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e1a:	e00f      	b.n	8003e3c <HAL_I2C_Init+0x1dc>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	1e58      	subs	r0, r3, #1
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6859      	ldr	r1, [r3, #4]
 8003e24:	460b      	mov	r3, r1
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	440b      	add	r3, r1
 8003e2a:	0099      	lsls	r1, r3, #2
 8003e2c:	440b      	add	r3, r1
 8003e2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e32:	3301      	adds	r3, #1
 8003e34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e3c:	6879      	ldr	r1, [r7, #4]
 8003e3e:	6809      	ldr	r1, [r1, #0]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	69da      	ldr	r2, [r3, #28]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	431a      	orrs	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003e6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	6911      	ldr	r1, [r2, #16]
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	68d2      	ldr	r2, [r2, #12]
 8003e76:	4311      	orrs	r1, r2
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	6812      	ldr	r2, [r2, #0]
 8003e7c:	430b      	orrs	r3, r1
 8003e7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	695a      	ldr	r2, [r3, #20]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	431a      	orrs	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f042 0201 	orr.w	r2, r2, #1
 8003eaa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2220      	movs	r2, #32
 8003eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3710      	adds	r7, #16
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	000186a0 	.word	0x000186a0
 8003ed8:	001e847f 	.word	0x001e847f
 8003edc:	003d08ff 	.word	0x003d08ff
 8003ee0:	431bde83 	.word	0x431bde83
 8003ee4:	10624dd3 	.word	0x10624dd3

08003ee8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b088      	sub	sp, #32
 8003eec:	af02      	add	r7, sp, #8
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	607a      	str	r2, [r7, #4]
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	817b      	strh	r3, [r7, #10]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003efc:	f7ff fb7c 	bl	80035f8 <HAL_GetTick>
 8003f00:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	2b20      	cmp	r3, #32
 8003f0c:	f040 80e0 	bne.w	80040d0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	9300      	str	r3, [sp, #0]
 8003f14:	2319      	movs	r3, #25
 8003f16:	2201      	movs	r2, #1
 8003f18:	4970      	ldr	r1, [pc, #448]	; (80040dc <HAL_I2C_Master_Transmit+0x1f4>)
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f000 fa92 	bl	8004444 <I2C_WaitOnFlagUntilTimeout>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003f26:	2302      	movs	r3, #2
 8003f28:	e0d3      	b.n	80040d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d101      	bne.n	8003f38 <HAL_I2C_Master_Transmit+0x50>
 8003f34:	2302      	movs	r3, #2
 8003f36:	e0cc      	b.n	80040d2 <HAL_I2C_Master_Transmit+0x1ea>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d007      	beq.n	8003f5e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f042 0201 	orr.w	r2, r2, #1
 8003f5c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f6c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2221      	movs	r2, #33	; 0x21
 8003f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2210      	movs	r2, #16
 8003f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	893a      	ldrh	r2, [r7, #8]
 8003f8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f94:	b29a      	uxth	r2, r3
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	4a50      	ldr	r2, [pc, #320]	; (80040e0 <HAL_I2C_Master_Transmit+0x1f8>)
 8003f9e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003fa0:	8979      	ldrh	r1, [r7, #10]
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	6a3a      	ldr	r2, [r7, #32]
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	f000 f9ca 	bl	8004340 <I2C_MasterRequestWrite>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d001      	beq.n	8003fb6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e08d      	b.n	80040d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	613b      	str	r3, [r7, #16]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	695b      	ldr	r3, [r3, #20]
 8003fc0:	613b      	str	r3, [r7, #16]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	613b      	str	r3, [r7, #16]
 8003fca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003fcc:	e066      	b.n	800409c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fce:	697a      	ldr	r2, [r7, #20]
 8003fd0:	6a39      	ldr	r1, [r7, #32]
 8003fd2:	68f8      	ldr	r0, [r7, #12]
 8003fd4:	f000 fb0c 	bl	80045f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00d      	beq.n	8003ffa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe2:	2b04      	cmp	r3, #4
 8003fe4:	d107      	bne.n	8003ff6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ff4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e06b      	b.n	80040d2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffe:	781a      	ldrb	r2, [r3, #0]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400a:	1c5a      	adds	r2, r3, #1
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004014:	b29b      	uxth	r3, r3
 8004016:	3b01      	subs	r3, #1
 8004018:	b29a      	uxth	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004022:	3b01      	subs	r3, #1
 8004024:	b29a      	uxth	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	695b      	ldr	r3, [r3, #20]
 8004030:	f003 0304 	and.w	r3, r3, #4
 8004034:	2b04      	cmp	r3, #4
 8004036:	d11b      	bne.n	8004070 <HAL_I2C_Master_Transmit+0x188>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800403c:	2b00      	cmp	r3, #0
 800403e:	d017      	beq.n	8004070 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004044:	781a      	ldrb	r2, [r3, #0]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004050:	1c5a      	adds	r2, r3, #1
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800405a:	b29b      	uxth	r3, r3
 800405c:	3b01      	subs	r3, #1
 800405e:	b29a      	uxth	r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004068:	3b01      	subs	r3, #1
 800406a:	b29a      	uxth	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004070:	697a      	ldr	r2, [r7, #20]
 8004072:	6a39      	ldr	r1, [r7, #32]
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f000 fafc 	bl	8004672 <I2C_WaitOnBTFFlagUntilTimeout>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00d      	beq.n	800409c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004084:	2b04      	cmp	r3, #4
 8004086:	d107      	bne.n	8004098 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004096:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e01a      	b.n	80040d2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d194      	bne.n	8003fce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2220      	movs	r2, #32
 80040b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80040cc:	2300      	movs	r3, #0
 80040ce:	e000      	b.n	80040d2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80040d0:	2302      	movs	r3, #2
  }
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3718      	adds	r7, #24
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	00100002 	.word	0x00100002
 80040e0:	ffff0000 	.word	0xffff0000

080040e4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b08a      	sub	sp, #40	; 0x28
 80040e8:	af02      	add	r7, sp, #8
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	607a      	str	r2, [r7, #4]
 80040ee:	603b      	str	r3, [r7, #0]
 80040f0:	460b      	mov	r3, r1
 80040f2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80040f4:	f7ff fa80 	bl	80035f8 <HAL_GetTick>
 80040f8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80040fa:	2301      	movs	r3, #1
 80040fc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b20      	cmp	r3, #32
 8004108:	f040 8111 	bne.w	800432e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	9300      	str	r3, [sp, #0]
 8004110:	2319      	movs	r3, #25
 8004112:	2201      	movs	r2, #1
 8004114:	4988      	ldr	r1, [pc, #544]	; (8004338 <HAL_I2C_IsDeviceReady+0x254>)
 8004116:	68f8      	ldr	r0, [r7, #12]
 8004118:	f000 f994 	bl	8004444 <I2C_WaitOnFlagUntilTimeout>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d001      	beq.n	8004126 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004122:	2302      	movs	r3, #2
 8004124:	e104      	b.n	8004330 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800412c:	2b01      	cmp	r3, #1
 800412e:	d101      	bne.n	8004134 <HAL_I2C_IsDeviceReady+0x50>
 8004130:	2302      	movs	r3, #2
 8004132:	e0fd      	b.n	8004330 <HAL_I2C_IsDeviceReady+0x24c>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	2b01      	cmp	r3, #1
 8004148:	d007      	beq.n	800415a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f042 0201 	orr.w	r2, r2, #1
 8004158:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004168:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2224      	movs	r2, #36	; 0x24
 800416e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	4a70      	ldr	r2, [pc, #448]	; (800433c <HAL_I2C_IsDeviceReady+0x258>)
 800417c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800418c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	9300      	str	r3, [sp, #0]
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	2200      	movs	r2, #0
 8004196:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f000 f952 	bl	8004444 <I2C_WaitOnFlagUntilTimeout>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00d      	beq.n	80041c2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041b4:	d103      	bne.n	80041be <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041bc:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e0b6      	b.n	8004330 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041c2:	897b      	ldrh	r3, [r7, #10]
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	461a      	mov	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80041d0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80041d2:	f7ff fa11 	bl	80035f8 <HAL_GetTick>
 80041d6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	bf0c      	ite	eq
 80041e6:	2301      	moveq	r3, #1
 80041e8:	2300      	movne	r3, #0
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	695b      	ldr	r3, [r3, #20]
 80041f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041fc:	bf0c      	ite	eq
 80041fe:	2301      	moveq	r3, #1
 8004200:	2300      	movne	r3, #0
 8004202:	b2db      	uxtb	r3, r3
 8004204:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004206:	e025      	b.n	8004254 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004208:	f7ff f9f6 	bl	80035f8 <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	683a      	ldr	r2, [r7, #0]
 8004214:	429a      	cmp	r2, r3
 8004216:	d302      	bcc.n	800421e <HAL_I2C_IsDeviceReady+0x13a>
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d103      	bne.n	8004226 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	22a0      	movs	r2, #160	; 0xa0
 8004222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	695b      	ldr	r3, [r3, #20]
 800422c:	f003 0302 	and.w	r3, r3, #2
 8004230:	2b02      	cmp	r3, #2
 8004232:	bf0c      	ite	eq
 8004234:	2301      	moveq	r3, #1
 8004236:	2300      	movne	r3, #0
 8004238:	b2db      	uxtb	r3, r3
 800423a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004246:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800424a:	bf0c      	ite	eq
 800424c:	2301      	moveq	r3, #1
 800424e:	2300      	movne	r3, #0
 8004250:	b2db      	uxtb	r3, r3
 8004252:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800425a:	b2db      	uxtb	r3, r3
 800425c:	2ba0      	cmp	r3, #160	; 0xa0
 800425e:	d005      	beq.n	800426c <HAL_I2C_IsDeviceReady+0x188>
 8004260:	7dfb      	ldrb	r3, [r7, #23]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d102      	bne.n	800426c <HAL_I2C_IsDeviceReady+0x188>
 8004266:	7dbb      	ldrb	r3, [r7, #22]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d0cd      	beq.n	8004208 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2220      	movs	r2, #32
 8004270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b02      	cmp	r3, #2
 8004280:	d129      	bne.n	80042d6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004290:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004292:	2300      	movs	r3, #0
 8004294:	613b      	str	r3, [r7, #16]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	695b      	ldr	r3, [r3, #20]
 800429c:	613b      	str	r3, [r7, #16]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	613b      	str	r3, [r7, #16]
 80042a6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	9300      	str	r3, [sp, #0]
 80042ac:	2319      	movs	r3, #25
 80042ae:	2201      	movs	r2, #1
 80042b0:	4921      	ldr	r1, [pc, #132]	; (8004338 <HAL_I2C_IsDeviceReady+0x254>)
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	f000 f8c6 	bl	8004444 <I2C_WaitOnFlagUntilTimeout>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d001      	beq.n	80042c2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e036      	b.n	8004330 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2220      	movs	r2, #32
 80042c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80042d2:	2300      	movs	r3, #0
 80042d4:	e02c      	b.n	8004330 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042e4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042ee:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	9300      	str	r3, [sp, #0]
 80042f4:	2319      	movs	r3, #25
 80042f6:	2201      	movs	r2, #1
 80042f8:	490f      	ldr	r1, [pc, #60]	; (8004338 <HAL_I2C_IsDeviceReady+0x254>)
 80042fa:	68f8      	ldr	r0, [r7, #12]
 80042fc:	f000 f8a2 	bl	8004444 <I2C_WaitOnFlagUntilTimeout>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d001      	beq.n	800430a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e012      	b.n	8004330 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	3301      	adds	r3, #1
 800430e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004310:	69ba      	ldr	r2, [r7, #24]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	429a      	cmp	r2, r3
 8004316:	f4ff af32 	bcc.w	800417e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2220      	movs	r2, #32
 800431e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e000      	b.n	8004330 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800432e:	2302      	movs	r3, #2
  }
}
 8004330:	4618      	mov	r0, r3
 8004332:	3720      	adds	r7, #32
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}
 8004338:	00100002 	.word	0x00100002
 800433c:	ffff0000 	.word	0xffff0000

08004340 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b088      	sub	sp, #32
 8004344:	af02      	add	r7, sp, #8
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	607a      	str	r2, [r7, #4]
 800434a:	603b      	str	r3, [r7, #0]
 800434c:	460b      	mov	r3, r1
 800434e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004354:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	2b08      	cmp	r3, #8
 800435a:	d006      	beq.n	800436a <I2C_MasterRequestWrite+0x2a>
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d003      	beq.n	800436a <I2C_MasterRequestWrite+0x2a>
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004368:	d108      	bne.n	800437c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004378:	601a      	str	r2, [r3, #0]
 800437a:	e00b      	b.n	8004394 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004380:	2b12      	cmp	r3, #18
 8004382:	d107      	bne.n	8004394 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004392:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	9300      	str	r3, [sp, #0]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043a0:	68f8      	ldr	r0, [r7, #12]
 80043a2:	f000 f84f 	bl	8004444 <I2C_WaitOnFlagUntilTimeout>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d00d      	beq.n	80043c8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043ba:	d103      	bne.n	80043c4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e035      	b.n	8004434 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043d0:	d108      	bne.n	80043e4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80043d2:	897b      	ldrh	r3, [r7, #10]
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	461a      	mov	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80043e0:	611a      	str	r2, [r3, #16]
 80043e2:	e01b      	b.n	800441c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80043e4:	897b      	ldrh	r3, [r7, #10]
 80043e6:	11db      	asrs	r3, r3, #7
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	f003 0306 	and.w	r3, r3, #6
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	f063 030f 	orn	r3, r3, #15
 80043f4:	b2da      	uxtb	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	490e      	ldr	r1, [pc, #56]	; (800443c <I2C_MasterRequestWrite+0xfc>)
 8004402:	68f8      	ldr	r0, [r7, #12]
 8004404:	f000 f875 	bl	80044f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d001      	beq.n	8004412 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e010      	b.n	8004434 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004412:	897b      	ldrh	r3, [r7, #10]
 8004414:	b2da      	uxtb	r2, r3
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	4907      	ldr	r1, [pc, #28]	; (8004440 <I2C_MasterRequestWrite+0x100>)
 8004422:	68f8      	ldr	r0, [r7, #12]
 8004424:	f000 f865 	bl	80044f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d001      	beq.n	8004432 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e000      	b.n	8004434 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3718      	adds	r7, #24
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	00010008 	.word	0x00010008
 8004440:	00010002 	.word	0x00010002

08004444 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	603b      	str	r3, [r7, #0]
 8004450:	4613      	mov	r3, r2
 8004452:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004454:	e025      	b.n	80044a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800445c:	d021      	beq.n	80044a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800445e:	f7ff f8cb 	bl	80035f8 <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	683a      	ldr	r2, [r7, #0]
 800446a:	429a      	cmp	r2, r3
 800446c:	d302      	bcc.n	8004474 <I2C_WaitOnFlagUntilTimeout+0x30>
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d116      	bne.n	80044a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2220      	movs	r2, #32
 800447e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448e:	f043 0220 	orr.w	r2, r3, #32
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e023      	b.n	80044ea <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	0c1b      	lsrs	r3, r3, #16
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d10d      	bne.n	80044c8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	43da      	mvns	r2, r3
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	4013      	ands	r3, r2
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	bf0c      	ite	eq
 80044be:	2301      	moveq	r3, #1
 80044c0:	2300      	movne	r3, #0
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	461a      	mov	r2, r3
 80044c6:	e00c      	b.n	80044e2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	43da      	mvns	r2, r3
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	4013      	ands	r3, r2
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	bf0c      	ite	eq
 80044da:	2301      	moveq	r3, #1
 80044dc:	2300      	movne	r3, #0
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	461a      	mov	r2, r3
 80044e2:	79fb      	ldrb	r3, [r7, #7]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d0b6      	beq.n	8004456 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3710      	adds	r7, #16
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b084      	sub	sp, #16
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	60f8      	str	r0, [r7, #12]
 80044fa:	60b9      	str	r1, [r7, #8]
 80044fc:	607a      	str	r2, [r7, #4]
 80044fe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004500:	e051      	b.n	80045a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	695b      	ldr	r3, [r3, #20]
 8004508:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800450c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004510:	d123      	bne.n	800455a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004520:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800452a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2220      	movs	r2, #32
 8004536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004546:	f043 0204 	orr.w	r2, r3, #4
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e046      	b.n	80045e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004560:	d021      	beq.n	80045a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004562:	f7ff f849 	bl	80035f8 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	429a      	cmp	r2, r3
 8004570:	d302      	bcc.n	8004578 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d116      	bne.n	80045a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2220      	movs	r2, #32
 8004582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004592:	f043 0220 	orr.w	r2, r3, #32
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e020      	b.n	80045e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	0c1b      	lsrs	r3, r3, #16
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d10c      	bne.n	80045ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	695b      	ldr	r3, [r3, #20]
 80045b6:	43da      	mvns	r2, r3
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	4013      	ands	r3, r2
 80045bc:	b29b      	uxth	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	bf14      	ite	ne
 80045c2:	2301      	movne	r3, #1
 80045c4:	2300      	moveq	r3, #0
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	e00b      	b.n	80045e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	43da      	mvns	r2, r3
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	4013      	ands	r3, r2
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	2b00      	cmp	r3, #0
 80045da:	bf14      	ite	ne
 80045dc:	2301      	movne	r3, #1
 80045de:	2300      	moveq	r3, #0
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d18d      	bne.n	8004502 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3710      	adds	r7, #16
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045fc:	e02d      	b.n	800465a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f000 f878 	bl	80046f4 <I2C_IsAcknowledgeFailed>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d001      	beq.n	800460e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e02d      	b.n	800466a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004614:	d021      	beq.n	800465a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004616:	f7fe ffef 	bl	80035f8 <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	68ba      	ldr	r2, [r7, #8]
 8004622:	429a      	cmp	r2, r3
 8004624:	d302      	bcc.n	800462c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d116      	bne.n	800465a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2220      	movs	r2, #32
 8004636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004646:	f043 0220 	orr.w	r2, r3, #32
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e007      	b.n	800466a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	695b      	ldr	r3, [r3, #20]
 8004660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004664:	2b80      	cmp	r3, #128	; 0x80
 8004666:	d1ca      	bne.n	80045fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3710      	adds	r7, #16
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004672:	b580      	push	{r7, lr}
 8004674:	b084      	sub	sp, #16
 8004676:	af00      	add	r7, sp, #0
 8004678:	60f8      	str	r0, [r7, #12]
 800467a:	60b9      	str	r1, [r7, #8]
 800467c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800467e:	e02d      	b.n	80046dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004680:	68f8      	ldr	r0, [r7, #12]
 8004682:	f000 f837 	bl	80046f4 <I2C_IsAcknowledgeFailed>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d001      	beq.n	8004690 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e02d      	b.n	80046ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004696:	d021      	beq.n	80046dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004698:	f7fe ffae 	bl	80035f8 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	68ba      	ldr	r2, [r7, #8]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d302      	bcc.n	80046ae <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d116      	bne.n	80046dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2220      	movs	r2, #32
 80046b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c8:	f043 0220 	orr.w	r2, r3, #32
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e007      	b.n	80046ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	f003 0304 	and.w	r3, r3, #4
 80046e6:	2b04      	cmp	r3, #4
 80046e8:	d1ca      	bne.n	8004680 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3710      	adds	r7, #16
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800470a:	d11b      	bne.n	8004744 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004714:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2220      	movs	r2, #32
 8004720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004730:	f043 0204 	orr.w	r2, r3, #4
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e000      	b.n	8004746 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	370c      	adds	r7, #12
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
	...

08004754 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b086      	sub	sp, #24
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d101      	bne.n	8004766 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e267      	b.n	8004c36 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0301 	and.w	r3, r3, #1
 800476e:	2b00      	cmp	r3, #0
 8004770:	d075      	beq.n	800485e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004772:	4b88      	ldr	r3, [pc, #544]	; (8004994 <HAL_RCC_OscConfig+0x240>)
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	f003 030c 	and.w	r3, r3, #12
 800477a:	2b04      	cmp	r3, #4
 800477c:	d00c      	beq.n	8004798 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800477e:	4b85      	ldr	r3, [pc, #532]	; (8004994 <HAL_RCC_OscConfig+0x240>)
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004786:	2b08      	cmp	r3, #8
 8004788:	d112      	bne.n	80047b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800478a:	4b82      	ldr	r3, [pc, #520]	; (8004994 <HAL_RCC_OscConfig+0x240>)
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004792:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004796:	d10b      	bne.n	80047b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004798:	4b7e      	ldr	r3, [pc, #504]	; (8004994 <HAL_RCC_OscConfig+0x240>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d05b      	beq.n	800485c <HAL_RCC_OscConfig+0x108>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d157      	bne.n	800485c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e242      	b.n	8004c36 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047b8:	d106      	bne.n	80047c8 <HAL_RCC_OscConfig+0x74>
 80047ba:	4b76      	ldr	r3, [pc, #472]	; (8004994 <HAL_RCC_OscConfig+0x240>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a75      	ldr	r2, [pc, #468]	; (8004994 <HAL_RCC_OscConfig+0x240>)
 80047c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047c4:	6013      	str	r3, [r2, #0]
 80047c6:	e01d      	b.n	8004804 <HAL_RCC_OscConfig+0xb0>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047d0:	d10c      	bne.n	80047ec <HAL_RCC_OscConfig+0x98>
 80047d2:	4b70      	ldr	r3, [pc, #448]	; (8004994 <HAL_RCC_OscConfig+0x240>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a6f      	ldr	r2, [pc, #444]	; (8004994 <HAL_RCC_OscConfig+0x240>)
 80047d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047dc:	6013      	str	r3, [r2, #0]
 80047de:	4b6d      	ldr	r3, [pc, #436]	; (8004994 <HAL_RCC_OscConfig+0x240>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a6c      	ldr	r2, [pc, #432]	; (8004994 <HAL_RCC_OscConfig+0x240>)
 80047e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047e8:	6013      	str	r3, [r2, #0]
 80047ea:	e00b      	b.n	8004804 <HAL_RCC_OscConfig+0xb0>
 80047ec:	4b69      	ldr	r3, [pc, #420]	; (8004994 <HAL_RCC_OscConfig+0x240>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a68      	ldr	r2, [pc, #416]	; (8004994 <HAL_RCC_OscConfig+0x240>)
 80047f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047f6:	6013      	str	r3, [r2, #0]
 80047f8:	4b66      	ldr	r3, [pc, #408]	; (8004994 <HAL_RCC_OscConfig+0x240>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a65      	ldr	r2, [pc, #404]	; (8004994 <HAL_RCC_OscConfig+0x240>)
 80047fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004802:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d013      	beq.n	8004834 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800480c:	f7fe fef4 	bl	80035f8 <HAL_GetTick>
 8004810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004812:	e008      	b.n	8004826 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004814:	f7fe fef0 	bl	80035f8 <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	2b64      	cmp	r3, #100	; 0x64
 8004820:	d901      	bls.n	8004826 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e207      	b.n	8004c36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004826:	4b5b      	ldr	r3, [pc, #364]	; (8004994 <HAL_RCC_OscConfig+0x240>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d0f0      	beq.n	8004814 <HAL_RCC_OscConfig+0xc0>
 8004832:	e014      	b.n	800485e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004834:	f7fe fee0 	bl	80035f8 <HAL_GetTick>
 8004838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800483a:	e008      	b.n	800484e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800483c:	f7fe fedc 	bl	80035f8 <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	2b64      	cmp	r3, #100	; 0x64
 8004848:	d901      	bls.n	800484e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e1f3      	b.n	8004c36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800484e:	4b51      	ldr	r3, [pc, #324]	; (8004994 <HAL_RCC_OscConfig+0x240>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1f0      	bne.n	800483c <HAL_RCC_OscConfig+0xe8>
 800485a:	e000      	b.n	800485e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800485c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d063      	beq.n	8004932 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800486a:	4b4a      	ldr	r3, [pc, #296]	; (8004994 <HAL_RCC_OscConfig+0x240>)
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f003 030c 	and.w	r3, r3, #12
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00b      	beq.n	800488e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004876:	4b47      	ldr	r3, [pc, #284]	; (8004994 <HAL_RCC_OscConfig+0x240>)
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800487e:	2b08      	cmp	r3, #8
 8004880:	d11c      	bne.n	80048bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004882:	4b44      	ldr	r3, [pc, #272]	; (8004994 <HAL_RCC_OscConfig+0x240>)
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d116      	bne.n	80048bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800488e:	4b41      	ldr	r3, [pc, #260]	; (8004994 <HAL_RCC_OscConfig+0x240>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0302 	and.w	r3, r3, #2
 8004896:	2b00      	cmp	r3, #0
 8004898:	d005      	beq.n	80048a6 <HAL_RCC_OscConfig+0x152>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d001      	beq.n	80048a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e1c7      	b.n	8004c36 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048a6:	4b3b      	ldr	r3, [pc, #236]	; (8004994 <HAL_RCC_OscConfig+0x240>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	00db      	lsls	r3, r3, #3
 80048b4:	4937      	ldr	r1, [pc, #220]	; (8004994 <HAL_RCC_OscConfig+0x240>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048ba:	e03a      	b.n	8004932 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d020      	beq.n	8004906 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048c4:	4b34      	ldr	r3, [pc, #208]	; (8004998 <HAL_RCC_OscConfig+0x244>)
 80048c6:	2201      	movs	r2, #1
 80048c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ca:	f7fe fe95 	bl	80035f8 <HAL_GetTick>
 80048ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048d0:	e008      	b.n	80048e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048d2:	f7fe fe91 	bl	80035f8 <HAL_GetTick>
 80048d6:	4602      	mov	r2, r0
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d901      	bls.n	80048e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e1a8      	b.n	8004c36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048e4:	4b2b      	ldr	r3, [pc, #172]	; (8004994 <HAL_RCC_OscConfig+0x240>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0302 	and.w	r3, r3, #2
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d0f0      	beq.n	80048d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048f0:	4b28      	ldr	r3, [pc, #160]	; (8004994 <HAL_RCC_OscConfig+0x240>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	00db      	lsls	r3, r3, #3
 80048fe:	4925      	ldr	r1, [pc, #148]	; (8004994 <HAL_RCC_OscConfig+0x240>)
 8004900:	4313      	orrs	r3, r2
 8004902:	600b      	str	r3, [r1, #0]
 8004904:	e015      	b.n	8004932 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004906:	4b24      	ldr	r3, [pc, #144]	; (8004998 <HAL_RCC_OscConfig+0x244>)
 8004908:	2200      	movs	r2, #0
 800490a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800490c:	f7fe fe74 	bl	80035f8 <HAL_GetTick>
 8004910:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004912:	e008      	b.n	8004926 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004914:	f7fe fe70 	bl	80035f8 <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	2b02      	cmp	r3, #2
 8004920:	d901      	bls.n	8004926 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e187      	b.n	8004c36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004926:	4b1b      	ldr	r3, [pc, #108]	; (8004994 <HAL_RCC_OscConfig+0x240>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1f0      	bne.n	8004914 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0308 	and.w	r3, r3, #8
 800493a:	2b00      	cmp	r3, #0
 800493c:	d036      	beq.n	80049ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	695b      	ldr	r3, [r3, #20]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d016      	beq.n	8004974 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004946:	4b15      	ldr	r3, [pc, #84]	; (800499c <HAL_RCC_OscConfig+0x248>)
 8004948:	2201      	movs	r2, #1
 800494a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800494c:	f7fe fe54 	bl	80035f8 <HAL_GetTick>
 8004950:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004952:	e008      	b.n	8004966 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004954:	f7fe fe50 	bl	80035f8 <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	2b02      	cmp	r3, #2
 8004960:	d901      	bls.n	8004966 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e167      	b.n	8004c36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004966:	4b0b      	ldr	r3, [pc, #44]	; (8004994 <HAL_RCC_OscConfig+0x240>)
 8004968:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d0f0      	beq.n	8004954 <HAL_RCC_OscConfig+0x200>
 8004972:	e01b      	b.n	80049ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004974:	4b09      	ldr	r3, [pc, #36]	; (800499c <HAL_RCC_OscConfig+0x248>)
 8004976:	2200      	movs	r2, #0
 8004978:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800497a:	f7fe fe3d 	bl	80035f8 <HAL_GetTick>
 800497e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004980:	e00e      	b.n	80049a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004982:	f7fe fe39 	bl	80035f8 <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	2b02      	cmp	r3, #2
 800498e:	d907      	bls.n	80049a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e150      	b.n	8004c36 <HAL_RCC_OscConfig+0x4e2>
 8004994:	40023800 	.word	0x40023800
 8004998:	42470000 	.word	0x42470000
 800499c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049a0:	4b88      	ldr	r3, [pc, #544]	; (8004bc4 <HAL_RCC_OscConfig+0x470>)
 80049a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049a4:	f003 0302 	and.w	r3, r3, #2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d1ea      	bne.n	8004982 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0304 	and.w	r3, r3, #4
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f000 8097 	beq.w	8004ae8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049ba:	2300      	movs	r3, #0
 80049bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049be:	4b81      	ldr	r3, [pc, #516]	; (8004bc4 <HAL_RCC_OscConfig+0x470>)
 80049c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d10f      	bne.n	80049ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049ca:	2300      	movs	r3, #0
 80049cc:	60bb      	str	r3, [r7, #8]
 80049ce:	4b7d      	ldr	r3, [pc, #500]	; (8004bc4 <HAL_RCC_OscConfig+0x470>)
 80049d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d2:	4a7c      	ldr	r2, [pc, #496]	; (8004bc4 <HAL_RCC_OscConfig+0x470>)
 80049d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049d8:	6413      	str	r3, [r2, #64]	; 0x40
 80049da:	4b7a      	ldr	r3, [pc, #488]	; (8004bc4 <HAL_RCC_OscConfig+0x470>)
 80049dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049e2:	60bb      	str	r3, [r7, #8]
 80049e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049e6:	2301      	movs	r3, #1
 80049e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049ea:	4b77      	ldr	r3, [pc, #476]	; (8004bc8 <HAL_RCC_OscConfig+0x474>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d118      	bne.n	8004a28 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049f6:	4b74      	ldr	r3, [pc, #464]	; (8004bc8 <HAL_RCC_OscConfig+0x474>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a73      	ldr	r2, [pc, #460]	; (8004bc8 <HAL_RCC_OscConfig+0x474>)
 80049fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a02:	f7fe fdf9 	bl	80035f8 <HAL_GetTick>
 8004a06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a08:	e008      	b.n	8004a1c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a0a:	f7fe fdf5 	bl	80035f8 <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d901      	bls.n	8004a1c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e10c      	b.n	8004c36 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a1c:	4b6a      	ldr	r3, [pc, #424]	; (8004bc8 <HAL_RCC_OscConfig+0x474>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d0f0      	beq.n	8004a0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d106      	bne.n	8004a3e <HAL_RCC_OscConfig+0x2ea>
 8004a30:	4b64      	ldr	r3, [pc, #400]	; (8004bc4 <HAL_RCC_OscConfig+0x470>)
 8004a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a34:	4a63      	ldr	r2, [pc, #396]	; (8004bc4 <HAL_RCC_OscConfig+0x470>)
 8004a36:	f043 0301 	orr.w	r3, r3, #1
 8004a3a:	6713      	str	r3, [r2, #112]	; 0x70
 8004a3c:	e01c      	b.n	8004a78 <HAL_RCC_OscConfig+0x324>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	2b05      	cmp	r3, #5
 8004a44:	d10c      	bne.n	8004a60 <HAL_RCC_OscConfig+0x30c>
 8004a46:	4b5f      	ldr	r3, [pc, #380]	; (8004bc4 <HAL_RCC_OscConfig+0x470>)
 8004a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a4a:	4a5e      	ldr	r2, [pc, #376]	; (8004bc4 <HAL_RCC_OscConfig+0x470>)
 8004a4c:	f043 0304 	orr.w	r3, r3, #4
 8004a50:	6713      	str	r3, [r2, #112]	; 0x70
 8004a52:	4b5c      	ldr	r3, [pc, #368]	; (8004bc4 <HAL_RCC_OscConfig+0x470>)
 8004a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a56:	4a5b      	ldr	r2, [pc, #364]	; (8004bc4 <HAL_RCC_OscConfig+0x470>)
 8004a58:	f043 0301 	orr.w	r3, r3, #1
 8004a5c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a5e:	e00b      	b.n	8004a78 <HAL_RCC_OscConfig+0x324>
 8004a60:	4b58      	ldr	r3, [pc, #352]	; (8004bc4 <HAL_RCC_OscConfig+0x470>)
 8004a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a64:	4a57      	ldr	r2, [pc, #348]	; (8004bc4 <HAL_RCC_OscConfig+0x470>)
 8004a66:	f023 0301 	bic.w	r3, r3, #1
 8004a6a:	6713      	str	r3, [r2, #112]	; 0x70
 8004a6c:	4b55      	ldr	r3, [pc, #340]	; (8004bc4 <HAL_RCC_OscConfig+0x470>)
 8004a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a70:	4a54      	ldr	r2, [pc, #336]	; (8004bc4 <HAL_RCC_OscConfig+0x470>)
 8004a72:	f023 0304 	bic.w	r3, r3, #4
 8004a76:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d015      	beq.n	8004aac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a80:	f7fe fdba 	bl	80035f8 <HAL_GetTick>
 8004a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a86:	e00a      	b.n	8004a9e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a88:	f7fe fdb6 	bl	80035f8 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d901      	bls.n	8004a9e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e0cb      	b.n	8004c36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a9e:	4b49      	ldr	r3, [pc, #292]	; (8004bc4 <HAL_RCC_OscConfig+0x470>)
 8004aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa2:	f003 0302 	and.w	r3, r3, #2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d0ee      	beq.n	8004a88 <HAL_RCC_OscConfig+0x334>
 8004aaa:	e014      	b.n	8004ad6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aac:	f7fe fda4 	bl	80035f8 <HAL_GetTick>
 8004ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ab2:	e00a      	b.n	8004aca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ab4:	f7fe fda0 	bl	80035f8 <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d901      	bls.n	8004aca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e0b5      	b.n	8004c36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004aca:	4b3e      	ldr	r3, [pc, #248]	; (8004bc4 <HAL_RCC_OscConfig+0x470>)
 8004acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ace:	f003 0302 	and.w	r3, r3, #2
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d1ee      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ad6:	7dfb      	ldrb	r3, [r7, #23]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d105      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004adc:	4b39      	ldr	r3, [pc, #228]	; (8004bc4 <HAL_RCC_OscConfig+0x470>)
 8004ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae0:	4a38      	ldr	r2, [pc, #224]	; (8004bc4 <HAL_RCC_OscConfig+0x470>)
 8004ae2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ae6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	699b      	ldr	r3, [r3, #24]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	f000 80a1 	beq.w	8004c34 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004af2:	4b34      	ldr	r3, [pc, #208]	; (8004bc4 <HAL_RCC_OscConfig+0x470>)
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f003 030c 	and.w	r3, r3, #12
 8004afa:	2b08      	cmp	r3, #8
 8004afc:	d05c      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d141      	bne.n	8004b8a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b06:	4b31      	ldr	r3, [pc, #196]	; (8004bcc <HAL_RCC_OscConfig+0x478>)
 8004b08:	2200      	movs	r2, #0
 8004b0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b0c:	f7fe fd74 	bl	80035f8 <HAL_GetTick>
 8004b10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b12:	e008      	b.n	8004b26 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b14:	f7fe fd70 	bl	80035f8 <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d901      	bls.n	8004b26 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e087      	b.n	8004c36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b26:	4b27      	ldr	r3, [pc, #156]	; (8004bc4 <HAL_RCC_OscConfig+0x470>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1f0      	bne.n	8004b14 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	69da      	ldr	r2, [r3, #28]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a1b      	ldr	r3, [r3, #32]
 8004b3a:	431a      	orrs	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b40:	019b      	lsls	r3, r3, #6
 8004b42:	431a      	orrs	r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b48:	085b      	lsrs	r3, r3, #1
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	041b      	lsls	r3, r3, #16
 8004b4e:	431a      	orrs	r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b54:	061b      	lsls	r3, r3, #24
 8004b56:	491b      	ldr	r1, [pc, #108]	; (8004bc4 <HAL_RCC_OscConfig+0x470>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b5c:	4b1b      	ldr	r3, [pc, #108]	; (8004bcc <HAL_RCC_OscConfig+0x478>)
 8004b5e:	2201      	movs	r2, #1
 8004b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b62:	f7fe fd49 	bl	80035f8 <HAL_GetTick>
 8004b66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b68:	e008      	b.n	8004b7c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b6a:	f7fe fd45 	bl	80035f8 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d901      	bls.n	8004b7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e05c      	b.n	8004c36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b7c:	4b11      	ldr	r3, [pc, #68]	; (8004bc4 <HAL_RCC_OscConfig+0x470>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d0f0      	beq.n	8004b6a <HAL_RCC_OscConfig+0x416>
 8004b88:	e054      	b.n	8004c34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b8a:	4b10      	ldr	r3, [pc, #64]	; (8004bcc <HAL_RCC_OscConfig+0x478>)
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b90:	f7fe fd32 	bl	80035f8 <HAL_GetTick>
 8004b94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b96:	e008      	b.n	8004baa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b98:	f7fe fd2e 	bl	80035f8 <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d901      	bls.n	8004baa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e045      	b.n	8004c36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004baa:	4b06      	ldr	r3, [pc, #24]	; (8004bc4 <HAL_RCC_OscConfig+0x470>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1f0      	bne.n	8004b98 <HAL_RCC_OscConfig+0x444>
 8004bb6:	e03d      	b.n	8004c34 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	699b      	ldr	r3, [r3, #24]
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d107      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e038      	b.n	8004c36 <HAL_RCC_OscConfig+0x4e2>
 8004bc4:	40023800 	.word	0x40023800
 8004bc8:	40007000 	.word	0x40007000
 8004bcc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004bd0:	4b1b      	ldr	r3, [pc, #108]	; (8004c40 <HAL_RCC_OscConfig+0x4ec>)
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d028      	beq.n	8004c30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d121      	bne.n	8004c30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d11a      	bne.n	8004c30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c00:	4013      	ands	r3, r2
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d111      	bne.n	8004c30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c16:	085b      	lsrs	r3, r3, #1
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d107      	bne.n	8004c30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d001      	beq.n	8004c34 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e000      	b.n	8004c36 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3718      	adds	r7, #24
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	40023800 	.word	0x40023800

08004c44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d101      	bne.n	8004c58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e0cc      	b.n	8004df2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c58:	4b68      	ldr	r3, [pc, #416]	; (8004dfc <HAL_RCC_ClockConfig+0x1b8>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0307 	and.w	r3, r3, #7
 8004c60:	683a      	ldr	r2, [r7, #0]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d90c      	bls.n	8004c80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c66:	4b65      	ldr	r3, [pc, #404]	; (8004dfc <HAL_RCC_ClockConfig+0x1b8>)
 8004c68:	683a      	ldr	r2, [r7, #0]
 8004c6a:	b2d2      	uxtb	r2, r2
 8004c6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c6e:	4b63      	ldr	r3, [pc, #396]	; (8004dfc <HAL_RCC_ClockConfig+0x1b8>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0307 	and.w	r3, r3, #7
 8004c76:	683a      	ldr	r2, [r7, #0]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d001      	beq.n	8004c80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e0b8      	b.n	8004df2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0302 	and.w	r3, r3, #2
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d020      	beq.n	8004cce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0304 	and.w	r3, r3, #4
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d005      	beq.n	8004ca4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c98:	4b59      	ldr	r3, [pc, #356]	; (8004e00 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	4a58      	ldr	r2, [pc, #352]	; (8004e00 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ca2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0308 	and.w	r3, r3, #8
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d005      	beq.n	8004cbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004cb0:	4b53      	ldr	r3, [pc, #332]	; (8004e00 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	4a52      	ldr	r2, [pc, #328]	; (8004e00 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004cba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cbc:	4b50      	ldr	r3, [pc, #320]	; (8004e00 <HAL_RCC_ClockConfig+0x1bc>)
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	494d      	ldr	r1, [pc, #308]	; (8004e00 <HAL_RCC_ClockConfig+0x1bc>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d044      	beq.n	8004d64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d107      	bne.n	8004cf2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ce2:	4b47      	ldr	r3, [pc, #284]	; (8004e00 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d119      	bne.n	8004d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e07f      	b.n	8004df2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d003      	beq.n	8004d02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cfe:	2b03      	cmp	r3, #3
 8004d00:	d107      	bne.n	8004d12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d02:	4b3f      	ldr	r3, [pc, #252]	; (8004e00 <HAL_RCC_ClockConfig+0x1bc>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d109      	bne.n	8004d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e06f      	b.n	8004df2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d12:	4b3b      	ldr	r3, [pc, #236]	; (8004e00 <HAL_RCC_ClockConfig+0x1bc>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d101      	bne.n	8004d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e067      	b.n	8004df2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d22:	4b37      	ldr	r3, [pc, #220]	; (8004e00 <HAL_RCC_ClockConfig+0x1bc>)
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f023 0203 	bic.w	r2, r3, #3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	4934      	ldr	r1, [pc, #208]	; (8004e00 <HAL_RCC_ClockConfig+0x1bc>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d34:	f7fe fc60 	bl	80035f8 <HAL_GetTick>
 8004d38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d3a:	e00a      	b.n	8004d52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d3c:	f7fe fc5c 	bl	80035f8 <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d901      	bls.n	8004d52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e04f      	b.n	8004df2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d52:	4b2b      	ldr	r3, [pc, #172]	; (8004e00 <HAL_RCC_ClockConfig+0x1bc>)
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f003 020c 	and.w	r2, r3, #12
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d1eb      	bne.n	8004d3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d64:	4b25      	ldr	r3, [pc, #148]	; (8004dfc <HAL_RCC_ClockConfig+0x1b8>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0307 	and.w	r3, r3, #7
 8004d6c:	683a      	ldr	r2, [r7, #0]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d20c      	bcs.n	8004d8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d72:	4b22      	ldr	r3, [pc, #136]	; (8004dfc <HAL_RCC_ClockConfig+0x1b8>)
 8004d74:	683a      	ldr	r2, [r7, #0]
 8004d76:	b2d2      	uxtb	r2, r2
 8004d78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d7a:	4b20      	ldr	r3, [pc, #128]	; (8004dfc <HAL_RCC_ClockConfig+0x1b8>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0307 	and.w	r3, r3, #7
 8004d82:	683a      	ldr	r2, [r7, #0]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d001      	beq.n	8004d8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e032      	b.n	8004df2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0304 	and.w	r3, r3, #4
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d008      	beq.n	8004daa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d98:	4b19      	ldr	r3, [pc, #100]	; (8004e00 <HAL_RCC_ClockConfig+0x1bc>)
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	4916      	ldr	r1, [pc, #88]	; (8004e00 <HAL_RCC_ClockConfig+0x1bc>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0308 	and.w	r3, r3, #8
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d009      	beq.n	8004dca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004db6:	4b12      	ldr	r3, [pc, #72]	; (8004e00 <HAL_RCC_ClockConfig+0x1bc>)
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	00db      	lsls	r3, r3, #3
 8004dc4:	490e      	ldr	r1, [pc, #56]	; (8004e00 <HAL_RCC_ClockConfig+0x1bc>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004dca:	f000 f821 	bl	8004e10 <HAL_RCC_GetSysClockFreq>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	4b0b      	ldr	r3, [pc, #44]	; (8004e00 <HAL_RCC_ClockConfig+0x1bc>)
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	091b      	lsrs	r3, r3, #4
 8004dd6:	f003 030f 	and.w	r3, r3, #15
 8004dda:	490a      	ldr	r1, [pc, #40]	; (8004e04 <HAL_RCC_ClockConfig+0x1c0>)
 8004ddc:	5ccb      	ldrb	r3, [r1, r3]
 8004dde:	fa22 f303 	lsr.w	r3, r2, r3
 8004de2:	4a09      	ldr	r2, [pc, #36]	; (8004e08 <HAL_RCC_ClockConfig+0x1c4>)
 8004de4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004de6:	4b09      	ldr	r3, [pc, #36]	; (8004e0c <HAL_RCC_ClockConfig+0x1c8>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4618      	mov	r0, r3
 8004dec:	f7fe fbc0 	bl	8003570 <HAL_InitTick>

  return HAL_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3710      	adds	r7, #16
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	40023c00 	.word	0x40023c00
 8004e00:	40023800 	.word	0x40023800
 8004e04:	0800be48 	.word	0x0800be48
 8004e08:	20000014 	.word	0x20000014
 8004e0c:	2000006c 	.word	0x2000006c

08004e10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e14:	b090      	sub	sp, #64	; 0x40
 8004e16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	637b      	str	r3, [r7, #52]	; 0x34
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e20:	2300      	movs	r3, #0
 8004e22:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004e24:	2300      	movs	r3, #0
 8004e26:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e28:	4b59      	ldr	r3, [pc, #356]	; (8004f90 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f003 030c 	and.w	r3, r3, #12
 8004e30:	2b08      	cmp	r3, #8
 8004e32:	d00d      	beq.n	8004e50 <HAL_RCC_GetSysClockFreq+0x40>
 8004e34:	2b08      	cmp	r3, #8
 8004e36:	f200 80a1 	bhi.w	8004f7c <HAL_RCC_GetSysClockFreq+0x16c>
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d002      	beq.n	8004e44 <HAL_RCC_GetSysClockFreq+0x34>
 8004e3e:	2b04      	cmp	r3, #4
 8004e40:	d003      	beq.n	8004e4a <HAL_RCC_GetSysClockFreq+0x3a>
 8004e42:	e09b      	b.n	8004f7c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e44:	4b53      	ldr	r3, [pc, #332]	; (8004f94 <HAL_RCC_GetSysClockFreq+0x184>)
 8004e46:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004e48:	e09b      	b.n	8004f82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e4a:	4b53      	ldr	r3, [pc, #332]	; (8004f98 <HAL_RCC_GetSysClockFreq+0x188>)
 8004e4c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004e4e:	e098      	b.n	8004f82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e50:	4b4f      	ldr	r3, [pc, #316]	; (8004f90 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e58:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e5a:	4b4d      	ldr	r3, [pc, #308]	; (8004f90 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d028      	beq.n	8004eb8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e66:	4b4a      	ldr	r3, [pc, #296]	; (8004f90 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	099b      	lsrs	r3, r3, #6
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	623b      	str	r3, [r7, #32]
 8004e70:	627a      	str	r2, [r7, #36]	; 0x24
 8004e72:	6a3b      	ldr	r3, [r7, #32]
 8004e74:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004e78:	2100      	movs	r1, #0
 8004e7a:	4b47      	ldr	r3, [pc, #284]	; (8004f98 <HAL_RCC_GetSysClockFreq+0x188>)
 8004e7c:	fb03 f201 	mul.w	r2, r3, r1
 8004e80:	2300      	movs	r3, #0
 8004e82:	fb00 f303 	mul.w	r3, r0, r3
 8004e86:	4413      	add	r3, r2
 8004e88:	4a43      	ldr	r2, [pc, #268]	; (8004f98 <HAL_RCC_GetSysClockFreq+0x188>)
 8004e8a:	fba0 1202 	umull	r1, r2, r0, r2
 8004e8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e90:	460a      	mov	r2, r1
 8004e92:	62ba      	str	r2, [r7, #40]	; 0x28
 8004e94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e96:	4413      	add	r3, r2
 8004e98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	61bb      	str	r3, [r7, #24]
 8004ea0:	61fa      	str	r2, [r7, #28]
 8004ea2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ea6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004eaa:	f7fb fef5 	bl	8000c98 <__aeabi_uldivmod>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004eb6:	e053      	b.n	8004f60 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004eb8:	4b35      	ldr	r3, [pc, #212]	; (8004f90 <HAL_RCC_GetSysClockFreq+0x180>)
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	099b      	lsrs	r3, r3, #6
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	613b      	str	r3, [r7, #16]
 8004ec2:	617a      	str	r2, [r7, #20]
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004eca:	f04f 0b00 	mov.w	fp, #0
 8004ece:	4652      	mov	r2, sl
 8004ed0:	465b      	mov	r3, fp
 8004ed2:	f04f 0000 	mov.w	r0, #0
 8004ed6:	f04f 0100 	mov.w	r1, #0
 8004eda:	0159      	lsls	r1, r3, #5
 8004edc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ee0:	0150      	lsls	r0, r2, #5
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	ebb2 080a 	subs.w	r8, r2, sl
 8004eea:	eb63 090b 	sbc.w	r9, r3, fp
 8004eee:	f04f 0200 	mov.w	r2, #0
 8004ef2:	f04f 0300 	mov.w	r3, #0
 8004ef6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004efa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004efe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004f02:	ebb2 0408 	subs.w	r4, r2, r8
 8004f06:	eb63 0509 	sbc.w	r5, r3, r9
 8004f0a:	f04f 0200 	mov.w	r2, #0
 8004f0e:	f04f 0300 	mov.w	r3, #0
 8004f12:	00eb      	lsls	r3, r5, #3
 8004f14:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f18:	00e2      	lsls	r2, r4, #3
 8004f1a:	4614      	mov	r4, r2
 8004f1c:	461d      	mov	r5, r3
 8004f1e:	eb14 030a 	adds.w	r3, r4, sl
 8004f22:	603b      	str	r3, [r7, #0]
 8004f24:	eb45 030b 	adc.w	r3, r5, fp
 8004f28:	607b      	str	r3, [r7, #4]
 8004f2a:	f04f 0200 	mov.w	r2, #0
 8004f2e:	f04f 0300 	mov.w	r3, #0
 8004f32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f36:	4629      	mov	r1, r5
 8004f38:	028b      	lsls	r3, r1, #10
 8004f3a:	4621      	mov	r1, r4
 8004f3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f40:	4621      	mov	r1, r4
 8004f42:	028a      	lsls	r2, r1, #10
 8004f44:	4610      	mov	r0, r2
 8004f46:	4619      	mov	r1, r3
 8004f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	60bb      	str	r3, [r7, #8]
 8004f4e:	60fa      	str	r2, [r7, #12]
 8004f50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f54:	f7fb fea0 	bl	8000c98 <__aeabi_uldivmod>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f60:	4b0b      	ldr	r3, [pc, #44]	; (8004f90 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	0c1b      	lsrs	r3, r3, #16
 8004f66:	f003 0303 	and.w	r3, r3, #3
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	005b      	lsls	r3, r3, #1
 8004f6e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004f70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f78:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004f7a:	e002      	b.n	8004f82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f7c:	4b05      	ldr	r3, [pc, #20]	; (8004f94 <HAL_RCC_GetSysClockFreq+0x184>)
 8004f7e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004f80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3740      	adds	r7, #64	; 0x40
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f8e:	bf00      	nop
 8004f90:	40023800 	.word	0x40023800
 8004f94:	00f42400 	.word	0x00f42400
 8004f98:	017d7840 	.word	0x017d7840

08004f9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fa0:	4b03      	ldr	r3, [pc, #12]	; (8004fb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr
 8004fae:	bf00      	nop
 8004fb0:	20000014 	.word	0x20000014

08004fb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004fb8:	f7ff fff0 	bl	8004f9c <HAL_RCC_GetHCLKFreq>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	4b05      	ldr	r3, [pc, #20]	; (8004fd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	0a9b      	lsrs	r3, r3, #10
 8004fc4:	f003 0307 	and.w	r3, r3, #7
 8004fc8:	4903      	ldr	r1, [pc, #12]	; (8004fd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fca:	5ccb      	ldrb	r3, [r1, r3]
 8004fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	40023800 	.word	0x40023800
 8004fd8:	0800be58 	.word	0x0800be58

08004fdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004fe0:	f7ff ffdc 	bl	8004f9c <HAL_RCC_GetHCLKFreq>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	4b05      	ldr	r3, [pc, #20]	; (8004ffc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	0b5b      	lsrs	r3, r3, #13
 8004fec:	f003 0307 	and.w	r3, r3, #7
 8004ff0:	4903      	ldr	r1, [pc, #12]	; (8005000 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ff2:	5ccb      	ldrb	r3, [r1, r3]
 8004ff4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	40023800 	.word	0x40023800
 8005000:	0800be58 	.word	0x0800be58

08005004 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d101      	bne.n	8005016 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e07b      	b.n	800510e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501a:	2b00      	cmp	r3, #0
 800501c:	d108      	bne.n	8005030 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005026:	d009      	beq.n	800503c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	61da      	str	r2, [r3, #28]
 800502e:	e005      	b.n	800503c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005048:	b2db      	uxtb	r3, r3
 800504a:	2b00      	cmp	r3, #0
 800504c:	d106      	bne.n	800505c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f7fd fd4a 	bl	8002af0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2202      	movs	r2, #2
 8005060:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005072:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005084:	431a      	orrs	r2, r3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800508e:	431a      	orrs	r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	f003 0302 	and.w	r3, r3, #2
 8005098:	431a      	orrs	r2, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	f003 0301 	and.w	r3, r3, #1
 80050a2:	431a      	orrs	r2, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	699b      	ldr	r3, [r3, #24]
 80050a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050ac:	431a      	orrs	r2, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	69db      	ldr	r3, [r3, #28]
 80050b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050b6:	431a      	orrs	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a1b      	ldr	r3, [r3, #32]
 80050bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050c0:	ea42 0103 	orr.w	r1, r2, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	430a      	orrs	r2, r1
 80050d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	699b      	ldr	r3, [r3, #24]
 80050d8:	0c1b      	lsrs	r3, r3, #16
 80050da:	f003 0104 	and.w	r1, r3, #4
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e2:	f003 0210 	and.w	r2, r3, #16
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	430a      	orrs	r2, r1
 80050ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	69da      	ldr	r2, [r3, #28]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3708      	adds	r7, #8
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005116:	b580      	push	{r7, lr}
 8005118:	b088      	sub	sp, #32
 800511a:	af00      	add	r7, sp, #0
 800511c:	60f8      	str	r0, [r7, #12]
 800511e:	60b9      	str	r1, [r7, #8]
 8005120:	603b      	str	r3, [r7, #0]
 8005122:	4613      	mov	r3, r2
 8005124:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005126:	2300      	movs	r3, #0
 8005128:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005130:	2b01      	cmp	r3, #1
 8005132:	d101      	bne.n	8005138 <HAL_SPI_Transmit+0x22>
 8005134:	2302      	movs	r3, #2
 8005136:	e126      	b.n	8005386 <HAL_SPI_Transmit+0x270>
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005140:	f7fe fa5a 	bl	80035f8 <HAL_GetTick>
 8005144:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005146:	88fb      	ldrh	r3, [r7, #6]
 8005148:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005150:	b2db      	uxtb	r3, r3
 8005152:	2b01      	cmp	r3, #1
 8005154:	d002      	beq.n	800515c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005156:	2302      	movs	r3, #2
 8005158:	77fb      	strb	r3, [r7, #31]
    goto error;
 800515a:	e10b      	b.n	8005374 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d002      	beq.n	8005168 <HAL_SPI_Transmit+0x52>
 8005162:	88fb      	ldrh	r3, [r7, #6]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d102      	bne.n	800516e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800516c:	e102      	b.n	8005374 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2203      	movs	r2, #3
 8005172:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2200      	movs	r2, #0
 800517a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	68ba      	ldr	r2, [r7, #8]
 8005180:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	88fa      	ldrh	r2, [r7, #6]
 8005186:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	88fa      	ldrh	r2, [r7, #6]
 800518c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2200      	movs	r2, #0
 8005192:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2200      	movs	r2, #0
 8005198:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2200      	movs	r2, #0
 80051a4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2200      	movs	r2, #0
 80051aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051b4:	d10f      	bne.n	80051d6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051d4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e0:	2b40      	cmp	r3, #64	; 0x40
 80051e2:	d007      	beq.n	80051f4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051fc:	d14b      	bne.n	8005296 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d002      	beq.n	800520c <HAL_SPI_Transmit+0xf6>
 8005206:	8afb      	ldrh	r3, [r7, #22]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d13e      	bne.n	800528a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005210:	881a      	ldrh	r2, [r3, #0]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521c:	1c9a      	adds	r2, r3, #2
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005226:	b29b      	uxth	r3, r3
 8005228:	3b01      	subs	r3, #1
 800522a:	b29a      	uxth	r2, r3
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005230:	e02b      	b.n	800528a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f003 0302 	and.w	r3, r3, #2
 800523c:	2b02      	cmp	r3, #2
 800523e:	d112      	bne.n	8005266 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005244:	881a      	ldrh	r2, [r3, #0]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005250:	1c9a      	adds	r2, r3, #2
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800525a:	b29b      	uxth	r3, r3
 800525c:	3b01      	subs	r3, #1
 800525e:	b29a      	uxth	r2, r3
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	86da      	strh	r2, [r3, #54]	; 0x36
 8005264:	e011      	b.n	800528a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005266:	f7fe f9c7 	bl	80035f8 <HAL_GetTick>
 800526a:	4602      	mov	r2, r0
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	683a      	ldr	r2, [r7, #0]
 8005272:	429a      	cmp	r2, r3
 8005274:	d803      	bhi.n	800527e <HAL_SPI_Transmit+0x168>
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800527c:	d102      	bne.n	8005284 <HAL_SPI_Transmit+0x16e>
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d102      	bne.n	800528a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005284:	2303      	movs	r3, #3
 8005286:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005288:	e074      	b.n	8005374 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800528e:	b29b      	uxth	r3, r3
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1ce      	bne.n	8005232 <HAL_SPI_Transmit+0x11c>
 8005294:	e04c      	b.n	8005330 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d002      	beq.n	80052a4 <HAL_SPI_Transmit+0x18e>
 800529e:	8afb      	ldrh	r3, [r7, #22]
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d140      	bne.n	8005326 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	330c      	adds	r3, #12
 80052ae:	7812      	ldrb	r2, [r2, #0]
 80052b0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b6:	1c5a      	adds	r2, r3, #1
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	3b01      	subs	r3, #1
 80052c4:	b29a      	uxth	r2, r3
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80052ca:	e02c      	b.n	8005326 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	f003 0302 	and.w	r3, r3, #2
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d113      	bne.n	8005302 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	330c      	adds	r3, #12
 80052e4:	7812      	ldrb	r2, [r2, #0]
 80052e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ec:	1c5a      	adds	r2, r3, #1
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	3b01      	subs	r3, #1
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	86da      	strh	r2, [r3, #54]	; 0x36
 8005300:	e011      	b.n	8005326 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005302:	f7fe f979 	bl	80035f8 <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	683a      	ldr	r2, [r7, #0]
 800530e:	429a      	cmp	r2, r3
 8005310:	d803      	bhi.n	800531a <HAL_SPI_Transmit+0x204>
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005318:	d102      	bne.n	8005320 <HAL_SPI_Transmit+0x20a>
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d102      	bne.n	8005326 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005324:	e026      	b.n	8005374 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800532a:	b29b      	uxth	r3, r3
 800532c:	2b00      	cmp	r3, #0
 800532e:	d1cd      	bne.n	80052cc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005330:	69ba      	ldr	r2, [r7, #24]
 8005332:	6839      	ldr	r1, [r7, #0]
 8005334:	68f8      	ldr	r0, [r7, #12]
 8005336:	f000 f9df 	bl	80056f8 <SPI_EndRxTxTransaction>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d002      	beq.n	8005346 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2220      	movs	r2, #32
 8005344:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d10a      	bne.n	8005364 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800534e:	2300      	movs	r3, #0
 8005350:	613b      	str	r3, [r7, #16]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	613b      	str	r3, [r7, #16]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	613b      	str	r3, [r7, #16]
 8005362:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005368:	2b00      	cmp	r3, #0
 800536a:	d002      	beq.n	8005372 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	77fb      	strb	r3, [r7, #31]
 8005370:	e000      	b.n	8005374 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005372:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2200      	movs	r2, #0
 8005380:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005384:	7ffb      	ldrb	r3, [r7, #31]
}
 8005386:	4618      	mov	r0, r3
 8005388:	3720      	adds	r7, #32
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
	...

08005390 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b088      	sub	sp, #32
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	099b      	lsrs	r3, r3, #6
 80053ac:	f003 0301 	and.w	r3, r3, #1
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d10f      	bne.n	80053d4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00a      	beq.n	80053d4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	099b      	lsrs	r3, r3, #6
 80053c2:	f003 0301 	and.w	r3, r3, #1
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d004      	beq.n	80053d4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	4798      	blx	r3
    return;
 80053d2:	e0d7      	b.n	8005584 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	085b      	lsrs	r3, r3, #1
 80053d8:	f003 0301 	and.w	r3, r3, #1
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d00a      	beq.n	80053f6 <HAL_SPI_IRQHandler+0x66>
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	09db      	lsrs	r3, r3, #7
 80053e4:	f003 0301 	and.w	r3, r3, #1
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d004      	beq.n	80053f6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	4798      	blx	r3
    return;
 80053f4:	e0c6      	b.n	8005584 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	095b      	lsrs	r3, r3, #5
 80053fa:	f003 0301 	and.w	r3, r3, #1
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d10c      	bne.n	800541c <HAL_SPI_IRQHandler+0x8c>
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	099b      	lsrs	r3, r3, #6
 8005406:	f003 0301 	and.w	r3, r3, #1
 800540a:	2b00      	cmp	r3, #0
 800540c:	d106      	bne.n	800541c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	0a1b      	lsrs	r3, r3, #8
 8005412:	f003 0301 	and.w	r3, r3, #1
 8005416:	2b00      	cmp	r3, #0
 8005418:	f000 80b4 	beq.w	8005584 <HAL_SPI_IRQHandler+0x1f4>
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	095b      	lsrs	r3, r3, #5
 8005420:	f003 0301 	and.w	r3, r3, #1
 8005424:	2b00      	cmp	r3, #0
 8005426:	f000 80ad 	beq.w	8005584 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	099b      	lsrs	r3, r3, #6
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	2b00      	cmp	r3, #0
 8005434:	d023      	beq.n	800547e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800543c:	b2db      	uxtb	r3, r3
 800543e:	2b03      	cmp	r3, #3
 8005440:	d011      	beq.n	8005466 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005446:	f043 0204 	orr.w	r2, r3, #4
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800544e:	2300      	movs	r3, #0
 8005450:	617b      	str	r3, [r7, #20]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	617b      	str	r3, [r7, #20]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	617b      	str	r3, [r7, #20]
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	e00b      	b.n	800547e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005466:	2300      	movs	r3, #0
 8005468:	613b      	str	r3, [r7, #16]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	613b      	str	r3, [r7, #16]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	613b      	str	r3, [r7, #16]
 800547a:	693b      	ldr	r3, [r7, #16]
        return;
 800547c:	e082      	b.n	8005584 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	095b      	lsrs	r3, r3, #5
 8005482:	f003 0301 	and.w	r3, r3, #1
 8005486:	2b00      	cmp	r3, #0
 8005488:	d014      	beq.n	80054b4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800548e:	f043 0201 	orr.w	r2, r3, #1
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005496:	2300      	movs	r3, #0
 8005498:	60fb      	str	r3, [r7, #12]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	60fb      	str	r3, [r7, #12]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054b0:	601a      	str	r2, [r3, #0]
 80054b2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	0a1b      	lsrs	r3, r3, #8
 80054b8:	f003 0301 	and.w	r3, r3, #1
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d00c      	beq.n	80054da <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054c4:	f043 0208 	orr.w	r2, r3, #8
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80054cc:	2300      	movs	r3, #0
 80054ce:	60bb      	str	r3, [r7, #8]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	60bb      	str	r3, [r7, #8]
 80054d8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d04f      	beq.n	8005582 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	685a      	ldr	r2, [r3, #4]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80054f0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2201      	movs	r2, #1
 80054f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	f003 0302 	and.w	r3, r3, #2
 8005500:	2b00      	cmp	r3, #0
 8005502:	d104      	bne.n	800550e <HAL_SPI_IRQHandler+0x17e>
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	f003 0301 	and.w	r3, r3, #1
 800550a:	2b00      	cmp	r3, #0
 800550c:	d034      	beq.n	8005578 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	685a      	ldr	r2, [r3, #4]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f022 0203 	bic.w	r2, r2, #3
 800551c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005522:	2b00      	cmp	r3, #0
 8005524:	d011      	beq.n	800554a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800552a:	4a18      	ldr	r2, [pc, #96]	; (800558c <HAL_SPI_IRQHandler+0x1fc>)
 800552c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005532:	4618      	mov	r0, r3
 8005534:	f7fe f9d3 	bl	80038de <HAL_DMA_Abort_IT>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d005      	beq.n	800554a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005542:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800554e:	2b00      	cmp	r3, #0
 8005550:	d016      	beq.n	8005580 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005556:	4a0d      	ldr	r2, [pc, #52]	; (800558c <HAL_SPI_IRQHandler+0x1fc>)
 8005558:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800555e:	4618      	mov	r0, r3
 8005560:	f7fe f9bd 	bl	80038de <HAL_DMA_Abort_IT>
 8005564:	4603      	mov	r3, r0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00a      	beq.n	8005580 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800556e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005576:	e003      	b.n	8005580 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 f809 	bl	8005590 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800557e:	e000      	b.n	8005582 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005580:	bf00      	nop
    return;
 8005582:	bf00      	nop
  }
}
 8005584:	3720      	adds	r7, #32
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	080055c1 	.word	0x080055c1

08005590 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005598:	bf00      	nop
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055b2:	b2db      	uxtb	r3, r3
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055cc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2200      	movs	r2, #0
 80055d2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2200      	movs	r2, #0
 80055d8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80055da:	68f8      	ldr	r0, [r7, #12]
 80055dc:	f7ff ffd8 	bl	8005590 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80055e0:	bf00      	nop
 80055e2:	3710      	adds	r7, #16
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b088      	sub	sp, #32
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	603b      	str	r3, [r7, #0]
 80055f4:	4613      	mov	r3, r2
 80055f6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80055f8:	f7fd fffe 	bl	80035f8 <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005600:	1a9b      	subs	r3, r3, r2
 8005602:	683a      	ldr	r2, [r7, #0]
 8005604:	4413      	add	r3, r2
 8005606:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005608:	f7fd fff6 	bl	80035f8 <HAL_GetTick>
 800560c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800560e:	4b39      	ldr	r3, [pc, #228]	; (80056f4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	015b      	lsls	r3, r3, #5
 8005614:	0d1b      	lsrs	r3, r3, #20
 8005616:	69fa      	ldr	r2, [r7, #28]
 8005618:	fb02 f303 	mul.w	r3, r2, r3
 800561c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800561e:	e054      	b.n	80056ca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005626:	d050      	beq.n	80056ca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005628:	f7fd ffe6 	bl	80035f8 <HAL_GetTick>
 800562c:	4602      	mov	r2, r0
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	69fa      	ldr	r2, [r7, #28]
 8005634:	429a      	cmp	r2, r3
 8005636:	d902      	bls.n	800563e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d13d      	bne.n	80056ba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	685a      	ldr	r2, [r3, #4]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800564c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005656:	d111      	bne.n	800567c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005660:	d004      	beq.n	800566c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800566a:	d107      	bne.n	800567c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800567a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005680:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005684:	d10f      	bne.n	80056a6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005694:	601a      	str	r2, [r3, #0]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e017      	b.n	80056ea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d101      	bne.n	80056c4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80056c0:	2300      	movs	r3, #0
 80056c2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	3b01      	subs	r3, #1
 80056c8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	689a      	ldr	r2, [r3, #8]
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	4013      	ands	r3, r2
 80056d4:	68ba      	ldr	r2, [r7, #8]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	bf0c      	ite	eq
 80056da:	2301      	moveq	r3, #1
 80056dc:	2300      	movne	r3, #0
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	461a      	mov	r2, r3
 80056e2:	79fb      	ldrb	r3, [r7, #7]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d19b      	bne.n	8005620 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3720      	adds	r7, #32
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	20000014 	.word	0x20000014

080056f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b088      	sub	sp, #32
 80056fc:	af02      	add	r7, sp, #8
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005704:	4b1b      	ldr	r3, [pc, #108]	; (8005774 <SPI_EndRxTxTransaction+0x7c>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a1b      	ldr	r2, [pc, #108]	; (8005778 <SPI_EndRxTxTransaction+0x80>)
 800570a:	fba2 2303 	umull	r2, r3, r2, r3
 800570e:	0d5b      	lsrs	r3, r3, #21
 8005710:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005714:	fb02 f303 	mul.w	r3, r2, r3
 8005718:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005722:	d112      	bne.n	800574a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	9300      	str	r3, [sp, #0]
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	2200      	movs	r2, #0
 800572c:	2180      	movs	r1, #128	; 0x80
 800572e:	68f8      	ldr	r0, [r7, #12]
 8005730:	f7ff ff5a 	bl	80055e8 <SPI_WaitFlagStateUntilTimeout>
 8005734:	4603      	mov	r3, r0
 8005736:	2b00      	cmp	r3, #0
 8005738:	d016      	beq.n	8005768 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800573e:	f043 0220 	orr.w	r2, r3, #32
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e00f      	b.n	800576a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d00a      	beq.n	8005766 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	3b01      	subs	r3, #1
 8005754:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005760:	2b80      	cmp	r3, #128	; 0x80
 8005762:	d0f2      	beq.n	800574a <SPI_EndRxTxTransaction+0x52>
 8005764:	e000      	b.n	8005768 <SPI_EndRxTxTransaction+0x70>
        break;
 8005766:	bf00      	nop
  }

  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3718      	adds	r7, #24
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	20000014 	.word	0x20000014
 8005778:	165e9f81 	.word	0x165e9f81

0800577c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d101      	bne.n	800578e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e03f      	b.n	800580e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005794:	b2db      	uxtb	r3, r3
 8005796:	2b00      	cmp	r3, #0
 8005798:	d106      	bne.n	80057a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f7fd fe50 	bl	8003448 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2224      	movs	r2, #36	; 0x24
 80057ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68da      	ldr	r2, [r3, #12]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f000 f929 	bl	8005a18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	691a      	ldr	r2, [r3, #16]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	695a      	ldr	r2, [r3, #20]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68da      	ldr	r2, [r3, #12]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2220      	movs	r2, #32
 8005800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2220      	movs	r2, #32
 8005808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3708      	adds	r7, #8
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}

08005816 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005816:	b580      	push	{r7, lr}
 8005818:	b08a      	sub	sp, #40	; 0x28
 800581a:	af02      	add	r7, sp, #8
 800581c:	60f8      	str	r0, [r7, #12]
 800581e:	60b9      	str	r1, [r7, #8]
 8005820:	603b      	str	r3, [r7, #0]
 8005822:	4613      	mov	r3, r2
 8005824:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005826:	2300      	movs	r3, #0
 8005828:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005830:	b2db      	uxtb	r3, r3
 8005832:	2b20      	cmp	r3, #32
 8005834:	d17c      	bne.n	8005930 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d002      	beq.n	8005842 <HAL_UART_Transmit+0x2c>
 800583c:	88fb      	ldrh	r3, [r7, #6]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d101      	bne.n	8005846 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e075      	b.n	8005932 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800584c:	2b01      	cmp	r3, #1
 800584e:	d101      	bne.n	8005854 <HAL_UART_Transmit+0x3e>
 8005850:	2302      	movs	r3, #2
 8005852:	e06e      	b.n	8005932 <HAL_UART_Transmit+0x11c>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2221      	movs	r2, #33	; 0x21
 8005866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800586a:	f7fd fec5 	bl	80035f8 <HAL_GetTick>
 800586e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	88fa      	ldrh	r2, [r7, #6]
 8005874:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	88fa      	ldrh	r2, [r7, #6]
 800587a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005884:	d108      	bne.n	8005898 <HAL_UART_Transmit+0x82>
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d104      	bne.n	8005898 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800588e:	2300      	movs	r3, #0
 8005890:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	61bb      	str	r3, [r7, #24]
 8005896:	e003      	b.n	80058a0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800589c:	2300      	movs	r3, #0
 800589e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80058a8:	e02a      	b.n	8005900 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	9300      	str	r3, [sp, #0]
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	2200      	movs	r2, #0
 80058b2:	2180      	movs	r1, #128	; 0x80
 80058b4:	68f8      	ldr	r0, [r7, #12]
 80058b6:	f000 f840 	bl	800593a <UART_WaitOnFlagUntilTimeout>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d001      	beq.n	80058c4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	e036      	b.n	8005932 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d10b      	bne.n	80058e2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	881b      	ldrh	r3, [r3, #0]
 80058ce:	461a      	mov	r2, r3
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	3302      	adds	r3, #2
 80058de:	61bb      	str	r3, [r7, #24]
 80058e0:	e007      	b.n	80058f2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	781a      	ldrb	r2, [r3, #0]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	3301      	adds	r3, #1
 80058f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	3b01      	subs	r3, #1
 80058fa:	b29a      	uxth	r2, r3
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005904:	b29b      	uxth	r3, r3
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1cf      	bne.n	80058aa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	9300      	str	r3, [sp, #0]
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	2200      	movs	r2, #0
 8005912:	2140      	movs	r1, #64	; 0x40
 8005914:	68f8      	ldr	r0, [r7, #12]
 8005916:	f000 f810 	bl	800593a <UART_WaitOnFlagUntilTimeout>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d001      	beq.n	8005924 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005920:	2303      	movs	r3, #3
 8005922:	e006      	b.n	8005932 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2220      	movs	r2, #32
 8005928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800592c:	2300      	movs	r3, #0
 800592e:	e000      	b.n	8005932 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005930:	2302      	movs	r3, #2
  }
}
 8005932:	4618      	mov	r0, r3
 8005934:	3720      	adds	r7, #32
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800593a:	b580      	push	{r7, lr}
 800593c:	b090      	sub	sp, #64	; 0x40
 800593e:	af00      	add	r7, sp, #0
 8005940:	60f8      	str	r0, [r7, #12]
 8005942:	60b9      	str	r1, [r7, #8]
 8005944:	603b      	str	r3, [r7, #0]
 8005946:	4613      	mov	r3, r2
 8005948:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800594a:	e050      	b.n	80059ee <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800594c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800594e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005952:	d04c      	beq.n	80059ee <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005954:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005956:	2b00      	cmp	r3, #0
 8005958:	d007      	beq.n	800596a <UART_WaitOnFlagUntilTimeout+0x30>
 800595a:	f7fd fe4d 	bl	80035f8 <HAL_GetTick>
 800595e:	4602      	mov	r2, r0
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005966:	429a      	cmp	r2, r3
 8005968:	d241      	bcs.n	80059ee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	330c      	adds	r3, #12
 8005970:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005974:	e853 3f00 	ldrex	r3, [r3]
 8005978:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800597a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005980:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	330c      	adds	r3, #12
 8005988:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800598a:	637a      	str	r2, [r7, #52]	; 0x34
 800598c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800598e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005990:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005992:	e841 2300 	strex	r3, r2, [r1]
 8005996:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800599a:	2b00      	cmp	r3, #0
 800599c:	d1e5      	bne.n	800596a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	3314      	adds	r3, #20
 80059a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	e853 3f00 	ldrex	r3, [r3]
 80059ac:	613b      	str	r3, [r7, #16]
   return(result);
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	f023 0301 	bic.w	r3, r3, #1
 80059b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	3314      	adds	r3, #20
 80059bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059be:	623a      	str	r2, [r7, #32]
 80059c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c2:	69f9      	ldr	r1, [r7, #28]
 80059c4:	6a3a      	ldr	r2, [r7, #32]
 80059c6:	e841 2300 	strex	r3, r2, [r1]
 80059ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d1e5      	bne.n	800599e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2220      	movs	r2, #32
 80059d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2220      	movs	r2, #32
 80059de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e00f      	b.n	8005a0e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	4013      	ands	r3, r2
 80059f8:	68ba      	ldr	r2, [r7, #8]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	bf0c      	ite	eq
 80059fe:	2301      	moveq	r3, #1
 8005a00:	2300      	movne	r3, #0
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	461a      	mov	r2, r3
 8005a06:	79fb      	ldrb	r3, [r7, #7]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d09f      	beq.n	800594c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3740      	adds	r7, #64	; 0x40
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
	...

08005a18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a1c:	b0c0      	sub	sp, #256	; 0x100
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a34:	68d9      	ldr	r1, [r3, #12]
 8005a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	ea40 0301 	orr.w	r3, r0, r1
 8005a40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a46:	689a      	ldr	r2, [r3, #8]
 8005a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	431a      	orrs	r2, r3
 8005a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a54:	695b      	ldr	r3, [r3, #20]
 8005a56:	431a      	orrs	r2, r3
 8005a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a5c:	69db      	ldr	r3, [r3, #28]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005a70:	f021 010c 	bic.w	r1, r1, #12
 8005a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005a7e:	430b      	orrs	r3, r1
 8005a80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	695b      	ldr	r3, [r3, #20]
 8005a8a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a92:	6999      	ldr	r1, [r3, #24]
 8005a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	ea40 0301 	orr.w	r3, r0, r1
 8005a9e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	4b8f      	ldr	r3, [pc, #572]	; (8005ce4 <UART_SetConfig+0x2cc>)
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d005      	beq.n	8005ab8 <UART_SetConfig+0xa0>
 8005aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	4b8d      	ldr	r3, [pc, #564]	; (8005ce8 <UART_SetConfig+0x2d0>)
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d104      	bne.n	8005ac2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ab8:	f7ff fa90 	bl	8004fdc <HAL_RCC_GetPCLK2Freq>
 8005abc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005ac0:	e003      	b.n	8005aca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005ac2:	f7ff fa77 	bl	8004fb4 <HAL_RCC_GetPCLK1Freq>
 8005ac6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ace:	69db      	ldr	r3, [r3, #28]
 8005ad0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ad4:	f040 810c 	bne.w	8005cf0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ad8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005adc:	2200      	movs	r2, #0
 8005ade:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ae2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005ae6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005aea:	4622      	mov	r2, r4
 8005aec:	462b      	mov	r3, r5
 8005aee:	1891      	adds	r1, r2, r2
 8005af0:	65b9      	str	r1, [r7, #88]	; 0x58
 8005af2:	415b      	adcs	r3, r3
 8005af4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005af6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005afa:	4621      	mov	r1, r4
 8005afc:	eb12 0801 	adds.w	r8, r2, r1
 8005b00:	4629      	mov	r1, r5
 8005b02:	eb43 0901 	adc.w	r9, r3, r1
 8005b06:	f04f 0200 	mov.w	r2, #0
 8005b0a:	f04f 0300 	mov.w	r3, #0
 8005b0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b1a:	4690      	mov	r8, r2
 8005b1c:	4699      	mov	r9, r3
 8005b1e:	4623      	mov	r3, r4
 8005b20:	eb18 0303 	adds.w	r3, r8, r3
 8005b24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005b28:	462b      	mov	r3, r5
 8005b2a:	eb49 0303 	adc.w	r3, r9, r3
 8005b2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005b3e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005b42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005b46:	460b      	mov	r3, r1
 8005b48:	18db      	adds	r3, r3, r3
 8005b4a:	653b      	str	r3, [r7, #80]	; 0x50
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	eb42 0303 	adc.w	r3, r2, r3
 8005b52:	657b      	str	r3, [r7, #84]	; 0x54
 8005b54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005b58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005b5c:	f7fb f89c 	bl	8000c98 <__aeabi_uldivmod>
 8005b60:	4602      	mov	r2, r0
 8005b62:	460b      	mov	r3, r1
 8005b64:	4b61      	ldr	r3, [pc, #388]	; (8005cec <UART_SetConfig+0x2d4>)
 8005b66:	fba3 2302 	umull	r2, r3, r3, r2
 8005b6a:	095b      	lsrs	r3, r3, #5
 8005b6c:	011c      	lsls	r4, r3, #4
 8005b6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b72:	2200      	movs	r2, #0
 8005b74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b78:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005b7c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005b80:	4642      	mov	r2, r8
 8005b82:	464b      	mov	r3, r9
 8005b84:	1891      	adds	r1, r2, r2
 8005b86:	64b9      	str	r1, [r7, #72]	; 0x48
 8005b88:	415b      	adcs	r3, r3
 8005b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005b90:	4641      	mov	r1, r8
 8005b92:	eb12 0a01 	adds.w	sl, r2, r1
 8005b96:	4649      	mov	r1, r9
 8005b98:	eb43 0b01 	adc.w	fp, r3, r1
 8005b9c:	f04f 0200 	mov.w	r2, #0
 8005ba0:	f04f 0300 	mov.w	r3, #0
 8005ba4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ba8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005bac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005bb0:	4692      	mov	sl, r2
 8005bb2:	469b      	mov	fp, r3
 8005bb4:	4643      	mov	r3, r8
 8005bb6:	eb1a 0303 	adds.w	r3, sl, r3
 8005bba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005bbe:	464b      	mov	r3, r9
 8005bc0:	eb4b 0303 	adc.w	r3, fp, r3
 8005bc4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005bd4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005bd8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005bdc:	460b      	mov	r3, r1
 8005bde:	18db      	adds	r3, r3, r3
 8005be0:	643b      	str	r3, [r7, #64]	; 0x40
 8005be2:	4613      	mov	r3, r2
 8005be4:	eb42 0303 	adc.w	r3, r2, r3
 8005be8:	647b      	str	r3, [r7, #68]	; 0x44
 8005bea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005bee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005bf2:	f7fb f851 	bl	8000c98 <__aeabi_uldivmod>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	4611      	mov	r1, r2
 8005bfc:	4b3b      	ldr	r3, [pc, #236]	; (8005cec <UART_SetConfig+0x2d4>)
 8005bfe:	fba3 2301 	umull	r2, r3, r3, r1
 8005c02:	095b      	lsrs	r3, r3, #5
 8005c04:	2264      	movs	r2, #100	; 0x64
 8005c06:	fb02 f303 	mul.w	r3, r2, r3
 8005c0a:	1acb      	subs	r3, r1, r3
 8005c0c:	00db      	lsls	r3, r3, #3
 8005c0e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005c12:	4b36      	ldr	r3, [pc, #216]	; (8005cec <UART_SetConfig+0x2d4>)
 8005c14:	fba3 2302 	umull	r2, r3, r3, r2
 8005c18:	095b      	lsrs	r3, r3, #5
 8005c1a:	005b      	lsls	r3, r3, #1
 8005c1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c20:	441c      	add	r4, r3
 8005c22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c26:	2200      	movs	r2, #0
 8005c28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c2c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005c30:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005c34:	4642      	mov	r2, r8
 8005c36:	464b      	mov	r3, r9
 8005c38:	1891      	adds	r1, r2, r2
 8005c3a:	63b9      	str	r1, [r7, #56]	; 0x38
 8005c3c:	415b      	adcs	r3, r3
 8005c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005c44:	4641      	mov	r1, r8
 8005c46:	1851      	adds	r1, r2, r1
 8005c48:	6339      	str	r1, [r7, #48]	; 0x30
 8005c4a:	4649      	mov	r1, r9
 8005c4c:	414b      	adcs	r3, r1
 8005c4e:	637b      	str	r3, [r7, #52]	; 0x34
 8005c50:	f04f 0200 	mov.w	r2, #0
 8005c54:	f04f 0300 	mov.w	r3, #0
 8005c58:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005c5c:	4659      	mov	r1, fp
 8005c5e:	00cb      	lsls	r3, r1, #3
 8005c60:	4651      	mov	r1, sl
 8005c62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c66:	4651      	mov	r1, sl
 8005c68:	00ca      	lsls	r2, r1, #3
 8005c6a:	4610      	mov	r0, r2
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	4603      	mov	r3, r0
 8005c70:	4642      	mov	r2, r8
 8005c72:	189b      	adds	r3, r3, r2
 8005c74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c78:	464b      	mov	r3, r9
 8005c7a:	460a      	mov	r2, r1
 8005c7c:	eb42 0303 	adc.w	r3, r2, r3
 8005c80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005c90:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005c94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005c98:	460b      	mov	r3, r1
 8005c9a:	18db      	adds	r3, r3, r3
 8005c9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c9e:	4613      	mov	r3, r2
 8005ca0:	eb42 0303 	adc.w	r3, r2, r3
 8005ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ca6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005caa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005cae:	f7fa fff3 	bl	8000c98 <__aeabi_uldivmod>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	4b0d      	ldr	r3, [pc, #52]	; (8005cec <UART_SetConfig+0x2d4>)
 8005cb8:	fba3 1302 	umull	r1, r3, r3, r2
 8005cbc:	095b      	lsrs	r3, r3, #5
 8005cbe:	2164      	movs	r1, #100	; 0x64
 8005cc0:	fb01 f303 	mul.w	r3, r1, r3
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	00db      	lsls	r3, r3, #3
 8005cc8:	3332      	adds	r3, #50	; 0x32
 8005cca:	4a08      	ldr	r2, [pc, #32]	; (8005cec <UART_SetConfig+0x2d4>)
 8005ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd0:	095b      	lsrs	r3, r3, #5
 8005cd2:	f003 0207 	and.w	r2, r3, #7
 8005cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4422      	add	r2, r4
 8005cde:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ce0:	e105      	b.n	8005eee <UART_SetConfig+0x4d6>
 8005ce2:	bf00      	nop
 8005ce4:	40011000 	.word	0x40011000
 8005ce8:	40011400 	.word	0x40011400
 8005cec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005cf0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005cfa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005cfe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005d02:	4642      	mov	r2, r8
 8005d04:	464b      	mov	r3, r9
 8005d06:	1891      	adds	r1, r2, r2
 8005d08:	6239      	str	r1, [r7, #32]
 8005d0a:	415b      	adcs	r3, r3
 8005d0c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d12:	4641      	mov	r1, r8
 8005d14:	1854      	adds	r4, r2, r1
 8005d16:	4649      	mov	r1, r9
 8005d18:	eb43 0501 	adc.w	r5, r3, r1
 8005d1c:	f04f 0200 	mov.w	r2, #0
 8005d20:	f04f 0300 	mov.w	r3, #0
 8005d24:	00eb      	lsls	r3, r5, #3
 8005d26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d2a:	00e2      	lsls	r2, r4, #3
 8005d2c:	4614      	mov	r4, r2
 8005d2e:	461d      	mov	r5, r3
 8005d30:	4643      	mov	r3, r8
 8005d32:	18e3      	adds	r3, r4, r3
 8005d34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005d38:	464b      	mov	r3, r9
 8005d3a:	eb45 0303 	adc.w	r3, r5, r3
 8005d3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005d4e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005d52:	f04f 0200 	mov.w	r2, #0
 8005d56:	f04f 0300 	mov.w	r3, #0
 8005d5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005d5e:	4629      	mov	r1, r5
 8005d60:	008b      	lsls	r3, r1, #2
 8005d62:	4621      	mov	r1, r4
 8005d64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d68:	4621      	mov	r1, r4
 8005d6a:	008a      	lsls	r2, r1, #2
 8005d6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005d70:	f7fa ff92 	bl	8000c98 <__aeabi_uldivmod>
 8005d74:	4602      	mov	r2, r0
 8005d76:	460b      	mov	r3, r1
 8005d78:	4b60      	ldr	r3, [pc, #384]	; (8005efc <UART_SetConfig+0x4e4>)
 8005d7a:	fba3 2302 	umull	r2, r3, r3, r2
 8005d7e:	095b      	lsrs	r3, r3, #5
 8005d80:	011c      	lsls	r4, r3, #4
 8005d82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d86:	2200      	movs	r2, #0
 8005d88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005d8c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005d90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005d94:	4642      	mov	r2, r8
 8005d96:	464b      	mov	r3, r9
 8005d98:	1891      	adds	r1, r2, r2
 8005d9a:	61b9      	str	r1, [r7, #24]
 8005d9c:	415b      	adcs	r3, r3
 8005d9e:	61fb      	str	r3, [r7, #28]
 8005da0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005da4:	4641      	mov	r1, r8
 8005da6:	1851      	adds	r1, r2, r1
 8005da8:	6139      	str	r1, [r7, #16]
 8005daa:	4649      	mov	r1, r9
 8005dac:	414b      	adcs	r3, r1
 8005dae:	617b      	str	r3, [r7, #20]
 8005db0:	f04f 0200 	mov.w	r2, #0
 8005db4:	f04f 0300 	mov.w	r3, #0
 8005db8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005dbc:	4659      	mov	r1, fp
 8005dbe:	00cb      	lsls	r3, r1, #3
 8005dc0:	4651      	mov	r1, sl
 8005dc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005dc6:	4651      	mov	r1, sl
 8005dc8:	00ca      	lsls	r2, r1, #3
 8005dca:	4610      	mov	r0, r2
 8005dcc:	4619      	mov	r1, r3
 8005dce:	4603      	mov	r3, r0
 8005dd0:	4642      	mov	r2, r8
 8005dd2:	189b      	adds	r3, r3, r2
 8005dd4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005dd8:	464b      	mov	r3, r9
 8005dda:	460a      	mov	r2, r1
 8005ddc:	eb42 0303 	adc.w	r3, r2, r3
 8005de0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	67bb      	str	r3, [r7, #120]	; 0x78
 8005dee:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005df0:	f04f 0200 	mov.w	r2, #0
 8005df4:	f04f 0300 	mov.w	r3, #0
 8005df8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005dfc:	4649      	mov	r1, r9
 8005dfe:	008b      	lsls	r3, r1, #2
 8005e00:	4641      	mov	r1, r8
 8005e02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e06:	4641      	mov	r1, r8
 8005e08:	008a      	lsls	r2, r1, #2
 8005e0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005e0e:	f7fa ff43 	bl	8000c98 <__aeabi_uldivmod>
 8005e12:	4602      	mov	r2, r0
 8005e14:	460b      	mov	r3, r1
 8005e16:	4b39      	ldr	r3, [pc, #228]	; (8005efc <UART_SetConfig+0x4e4>)
 8005e18:	fba3 1302 	umull	r1, r3, r3, r2
 8005e1c:	095b      	lsrs	r3, r3, #5
 8005e1e:	2164      	movs	r1, #100	; 0x64
 8005e20:	fb01 f303 	mul.w	r3, r1, r3
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	011b      	lsls	r3, r3, #4
 8005e28:	3332      	adds	r3, #50	; 0x32
 8005e2a:	4a34      	ldr	r2, [pc, #208]	; (8005efc <UART_SetConfig+0x4e4>)
 8005e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e30:	095b      	lsrs	r3, r3, #5
 8005e32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e36:	441c      	add	r4, r3
 8005e38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	673b      	str	r3, [r7, #112]	; 0x70
 8005e40:	677a      	str	r2, [r7, #116]	; 0x74
 8005e42:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005e46:	4642      	mov	r2, r8
 8005e48:	464b      	mov	r3, r9
 8005e4a:	1891      	adds	r1, r2, r2
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	415b      	adcs	r3, r3
 8005e50:	60fb      	str	r3, [r7, #12]
 8005e52:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e56:	4641      	mov	r1, r8
 8005e58:	1851      	adds	r1, r2, r1
 8005e5a:	6039      	str	r1, [r7, #0]
 8005e5c:	4649      	mov	r1, r9
 8005e5e:	414b      	adcs	r3, r1
 8005e60:	607b      	str	r3, [r7, #4]
 8005e62:	f04f 0200 	mov.w	r2, #0
 8005e66:	f04f 0300 	mov.w	r3, #0
 8005e6a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005e6e:	4659      	mov	r1, fp
 8005e70:	00cb      	lsls	r3, r1, #3
 8005e72:	4651      	mov	r1, sl
 8005e74:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e78:	4651      	mov	r1, sl
 8005e7a:	00ca      	lsls	r2, r1, #3
 8005e7c:	4610      	mov	r0, r2
 8005e7e:	4619      	mov	r1, r3
 8005e80:	4603      	mov	r3, r0
 8005e82:	4642      	mov	r2, r8
 8005e84:	189b      	adds	r3, r3, r2
 8005e86:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e88:	464b      	mov	r3, r9
 8005e8a:	460a      	mov	r2, r1
 8005e8c:	eb42 0303 	adc.w	r3, r2, r3
 8005e90:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	663b      	str	r3, [r7, #96]	; 0x60
 8005e9c:	667a      	str	r2, [r7, #100]	; 0x64
 8005e9e:	f04f 0200 	mov.w	r2, #0
 8005ea2:	f04f 0300 	mov.w	r3, #0
 8005ea6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005eaa:	4649      	mov	r1, r9
 8005eac:	008b      	lsls	r3, r1, #2
 8005eae:	4641      	mov	r1, r8
 8005eb0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005eb4:	4641      	mov	r1, r8
 8005eb6:	008a      	lsls	r2, r1, #2
 8005eb8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005ebc:	f7fa feec 	bl	8000c98 <__aeabi_uldivmod>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	460b      	mov	r3, r1
 8005ec4:	4b0d      	ldr	r3, [pc, #52]	; (8005efc <UART_SetConfig+0x4e4>)
 8005ec6:	fba3 1302 	umull	r1, r3, r3, r2
 8005eca:	095b      	lsrs	r3, r3, #5
 8005ecc:	2164      	movs	r1, #100	; 0x64
 8005ece:	fb01 f303 	mul.w	r3, r1, r3
 8005ed2:	1ad3      	subs	r3, r2, r3
 8005ed4:	011b      	lsls	r3, r3, #4
 8005ed6:	3332      	adds	r3, #50	; 0x32
 8005ed8:	4a08      	ldr	r2, [pc, #32]	; (8005efc <UART_SetConfig+0x4e4>)
 8005eda:	fba2 2303 	umull	r2, r3, r2, r3
 8005ede:	095b      	lsrs	r3, r3, #5
 8005ee0:	f003 020f 	and.w	r2, r3, #15
 8005ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4422      	add	r2, r4
 8005eec:	609a      	str	r2, [r3, #8]
}
 8005eee:	bf00      	nop
 8005ef0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005efa:	bf00      	nop
 8005efc:	51eb851f 	.word	0x51eb851f

08005f00 <__errno>:
 8005f00:	4b01      	ldr	r3, [pc, #4]	; (8005f08 <__errno+0x8>)
 8005f02:	6818      	ldr	r0, [r3, #0]
 8005f04:	4770      	bx	lr
 8005f06:	bf00      	nop
 8005f08:	20000074 	.word	0x20000074

08005f0c <__libc_init_array>:
 8005f0c:	b570      	push	{r4, r5, r6, lr}
 8005f0e:	4d0d      	ldr	r5, [pc, #52]	; (8005f44 <__libc_init_array+0x38>)
 8005f10:	4c0d      	ldr	r4, [pc, #52]	; (8005f48 <__libc_init_array+0x3c>)
 8005f12:	1b64      	subs	r4, r4, r5
 8005f14:	10a4      	asrs	r4, r4, #2
 8005f16:	2600      	movs	r6, #0
 8005f18:	42a6      	cmp	r6, r4
 8005f1a:	d109      	bne.n	8005f30 <__libc_init_array+0x24>
 8005f1c:	4d0b      	ldr	r5, [pc, #44]	; (8005f4c <__libc_init_array+0x40>)
 8005f1e:	4c0c      	ldr	r4, [pc, #48]	; (8005f50 <__libc_init_array+0x44>)
 8005f20:	f004 fca2 	bl	800a868 <_init>
 8005f24:	1b64      	subs	r4, r4, r5
 8005f26:	10a4      	asrs	r4, r4, #2
 8005f28:	2600      	movs	r6, #0
 8005f2a:	42a6      	cmp	r6, r4
 8005f2c:	d105      	bne.n	8005f3a <__libc_init_array+0x2e>
 8005f2e:	bd70      	pop	{r4, r5, r6, pc}
 8005f30:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f34:	4798      	blx	r3
 8005f36:	3601      	adds	r6, #1
 8005f38:	e7ee      	b.n	8005f18 <__libc_init_array+0xc>
 8005f3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f3e:	4798      	blx	r3
 8005f40:	3601      	adds	r6, #1
 8005f42:	e7f2      	b.n	8005f2a <__libc_init_array+0x1e>
 8005f44:	0800c30c 	.word	0x0800c30c
 8005f48:	0800c30c 	.word	0x0800c30c
 8005f4c:	0800c30c 	.word	0x0800c30c
 8005f50:	0800c310 	.word	0x0800c310

08005f54 <memcmp>:
 8005f54:	b510      	push	{r4, lr}
 8005f56:	3901      	subs	r1, #1
 8005f58:	4402      	add	r2, r0
 8005f5a:	4290      	cmp	r0, r2
 8005f5c:	d101      	bne.n	8005f62 <memcmp+0xe>
 8005f5e:	2000      	movs	r0, #0
 8005f60:	e005      	b.n	8005f6e <memcmp+0x1a>
 8005f62:	7803      	ldrb	r3, [r0, #0]
 8005f64:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005f68:	42a3      	cmp	r3, r4
 8005f6a:	d001      	beq.n	8005f70 <memcmp+0x1c>
 8005f6c:	1b18      	subs	r0, r3, r4
 8005f6e:	bd10      	pop	{r4, pc}
 8005f70:	3001      	adds	r0, #1
 8005f72:	e7f2      	b.n	8005f5a <memcmp+0x6>

08005f74 <memset>:
 8005f74:	4402      	add	r2, r0
 8005f76:	4603      	mov	r3, r0
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d100      	bne.n	8005f7e <memset+0xa>
 8005f7c:	4770      	bx	lr
 8005f7e:	f803 1b01 	strb.w	r1, [r3], #1
 8005f82:	e7f9      	b.n	8005f78 <memset+0x4>

08005f84 <__cvt>:
 8005f84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f88:	ec55 4b10 	vmov	r4, r5, d0
 8005f8c:	2d00      	cmp	r5, #0
 8005f8e:	460e      	mov	r6, r1
 8005f90:	4619      	mov	r1, r3
 8005f92:	462b      	mov	r3, r5
 8005f94:	bfbb      	ittet	lt
 8005f96:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005f9a:	461d      	movlt	r5, r3
 8005f9c:	2300      	movge	r3, #0
 8005f9e:	232d      	movlt	r3, #45	; 0x2d
 8005fa0:	700b      	strb	r3, [r1, #0]
 8005fa2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fa4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005fa8:	4691      	mov	r9, r2
 8005faa:	f023 0820 	bic.w	r8, r3, #32
 8005fae:	bfbc      	itt	lt
 8005fb0:	4622      	movlt	r2, r4
 8005fb2:	4614      	movlt	r4, r2
 8005fb4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005fb8:	d005      	beq.n	8005fc6 <__cvt+0x42>
 8005fba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005fbe:	d100      	bne.n	8005fc2 <__cvt+0x3e>
 8005fc0:	3601      	adds	r6, #1
 8005fc2:	2102      	movs	r1, #2
 8005fc4:	e000      	b.n	8005fc8 <__cvt+0x44>
 8005fc6:	2103      	movs	r1, #3
 8005fc8:	ab03      	add	r3, sp, #12
 8005fca:	9301      	str	r3, [sp, #4]
 8005fcc:	ab02      	add	r3, sp, #8
 8005fce:	9300      	str	r3, [sp, #0]
 8005fd0:	ec45 4b10 	vmov	d0, r4, r5
 8005fd4:	4653      	mov	r3, sl
 8005fd6:	4632      	mov	r2, r6
 8005fd8:	f001 fdae 	bl	8007b38 <_dtoa_r>
 8005fdc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005fe0:	4607      	mov	r7, r0
 8005fe2:	d102      	bne.n	8005fea <__cvt+0x66>
 8005fe4:	f019 0f01 	tst.w	r9, #1
 8005fe8:	d022      	beq.n	8006030 <__cvt+0xac>
 8005fea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005fee:	eb07 0906 	add.w	r9, r7, r6
 8005ff2:	d110      	bne.n	8006016 <__cvt+0x92>
 8005ff4:	783b      	ldrb	r3, [r7, #0]
 8005ff6:	2b30      	cmp	r3, #48	; 0x30
 8005ff8:	d10a      	bne.n	8006010 <__cvt+0x8c>
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	4620      	mov	r0, r4
 8006000:	4629      	mov	r1, r5
 8006002:	f7fa fd69 	bl	8000ad8 <__aeabi_dcmpeq>
 8006006:	b918      	cbnz	r0, 8006010 <__cvt+0x8c>
 8006008:	f1c6 0601 	rsb	r6, r6, #1
 800600c:	f8ca 6000 	str.w	r6, [sl]
 8006010:	f8da 3000 	ldr.w	r3, [sl]
 8006014:	4499      	add	r9, r3
 8006016:	2200      	movs	r2, #0
 8006018:	2300      	movs	r3, #0
 800601a:	4620      	mov	r0, r4
 800601c:	4629      	mov	r1, r5
 800601e:	f7fa fd5b 	bl	8000ad8 <__aeabi_dcmpeq>
 8006022:	b108      	cbz	r0, 8006028 <__cvt+0xa4>
 8006024:	f8cd 900c 	str.w	r9, [sp, #12]
 8006028:	2230      	movs	r2, #48	; 0x30
 800602a:	9b03      	ldr	r3, [sp, #12]
 800602c:	454b      	cmp	r3, r9
 800602e:	d307      	bcc.n	8006040 <__cvt+0xbc>
 8006030:	9b03      	ldr	r3, [sp, #12]
 8006032:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006034:	1bdb      	subs	r3, r3, r7
 8006036:	4638      	mov	r0, r7
 8006038:	6013      	str	r3, [r2, #0]
 800603a:	b004      	add	sp, #16
 800603c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006040:	1c59      	adds	r1, r3, #1
 8006042:	9103      	str	r1, [sp, #12]
 8006044:	701a      	strb	r2, [r3, #0]
 8006046:	e7f0      	b.n	800602a <__cvt+0xa6>

08006048 <__exponent>:
 8006048:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800604a:	4603      	mov	r3, r0
 800604c:	2900      	cmp	r1, #0
 800604e:	bfb8      	it	lt
 8006050:	4249      	neglt	r1, r1
 8006052:	f803 2b02 	strb.w	r2, [r3], #2
 8006056:	bfb4      	ite	lt
 8006058:	222d      	movlt	r2, #45	; 0x2d
 800605a:	222b      	movge	r2, #43	; 0x2b
 800605c:	2909      	cmp	r1, #9
 800605e:	7042      	strb	r2, [r0, #1]
 8006060:	dd2a      	ble.n	80060b8 <__exponent+0x70>
 8006062:	f10d 0407 	add.w	r4, sp, #7
 8006066:	46a4      	mov	ip, r4
 8006068:	270a      	movs	r7, #10
 800606a:	46a6      	mov	lr, r4
 800606c:	460a      	mov	r2, r1
 800606e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006072:	fb07 1516 	mls	r5, r7, r6, r1
 8006076:	3530      	adds	r5, #48	; 0x30
 8006078:	2a63      	cmp	r2, #99	; 0x63
 800607a:	f104 34ff 	add.w	r4, r4, #4294967295
 800607e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006082:	4631      	mov	r1, r6
 8006084:	dcf1      	bgt.n	800606a <__exponent+0x22>
 8006086:	3130      	adds	r1, #48	; 0x30
 8006088:	f1ae 0502 	sub.w	r5, lr, #2
 800608c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006090:	1c44      	adds	r4, r0, #1
 8006092:	4629      	mov	r1, r5
 8006094:	4561      	cmp	r1, ip
 8006096:	d30a      	bcc.n	80060ae <__exponent+0x66>
 8006098:	f10d 0209 	add.w	r2, sp, #9
 800609c:	eba2 020e 	sub.w	r2, r2, lr
 80060a0:	4565      	cmp	r5, ip
 80060a2:	bf88      	it	hi
 80060a4:	2200      	movhi	r2, #0
 80060a6:	4413      	add	r3, r2
 80060a8:	1a18      	subs	r0, r3, r0
 80060aa:	b003      	add	sp, #12
 80060ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80060b2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80060b6:	e7ed      	b.n	8006094 <__exponent+0x4c>
 80060b8:	2330      	movs	r3, #48	; 0x30
 80060ba:	3130      	adds	r1, #48	; 0x30
 80060bc:	7083      	strb	r3, [r0, #2]
 80060be:	70c1      	strb	r1, [r0, #3]
 80060c0:	1d03      	adds	r3, r0, #4
 80060c2:	e7f1      	b.n	80060a8 <__exponent+0x60>

080060c4 <_printf_float>:
 80060c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060c8:	ed2d 8b02 	vpush	{d8}
 80060cc:	b08d      	sub	sp, #52	; 0x34
 80060ce:	460c      	mov	r4, r1
 80060d0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80060d4:	4616      	mov	r6, r2
 80060d6:	461f      	mov	r7, r3
 80060d8:	4605      	mov	r5, r0
 80060da:	f002 fe8b 	bl	8008df4 <_localeconv_r>
 80060de:	f8d0 a000 	ldr.w	sl, [r0]
 80060e2:	4650      	mov	r0, sl
 80060e4:	f7fa f87c 	bl	80001e0 <strlen>
 80060e8:	2300      	movs	r3, #0
 80060ea:	930a      	str	r3, [sp, #40]	; 0x28
 80060ec:	6823      	ldr	r3, [r4, #0]
 80060ee:	9305      	str	r3, [sp, #20]
 80060f0:	f8d8 3000 	ldr.w	r3, [r8]
 80060f4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80060f8:	3307      	adds	r3, #7
 80060fa:	f023 0307 	bic.w	r3, r3, #7
 80060fe:	f103 0208 	add.w	r2, r3, #8
 8006102:	f8c8 2000 	str.w	r2, [r8]
 8006106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800610a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800610e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006112:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006116:	9307      	str	r3, [sp, #28]
 8006118:	f8cd 8018 	str.w	r8, [sp, #24]
 800611c:	ee08 0a10 	vmov	s16, r0
 8006120:	4b9f      	ldr	r3, [pc, #636]	; (80063a0 <_printf_float+0x2dc>)
 8006122:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006126:	f04f 32ff 	mov.w	r2, #4294967295
 800612a:	f7fa fd07 	bl	8000b3c <__aeabi_dcmpun>
 800612e:	bb88      	cbnz	r0, 8006194 <_printf_float+0xd0>
 8006130:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006134:	4b9a      	ldr	r3, [pc, #616]	; (80063a0 <_printf_float+0x2dc>)
 8006136:	f04f 32ff 	mov.w	r2, #4294967295
 800613a:	f7fa fce1 	bl	8000b00 <__aeabi_dcmple>
 800613e:	bb48      	cbnz	r0, 8006194 <_printf_float+0xd0>
 8006140:	2200      	movs	r2, #0
 8006142:	2300      	movs	r3, #0
 8006144:	4640      	mov	r0, r8
 8006146:	4649      	mov	r1, r9
 8006148:	f7fa fcd0 	bl	8000aec <__aeabi_dcmplt>
 800614c:	b110      	cbz	r0, 8006154 <_printf_float+0x90>
 800614e:	232d      	movs	r3, #45	; 0x2d
 8006150:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006154:	4b93      	ldr	r3, [pc, #588]	; (80063a4 <_printf_float+0x2e0>)
 8006156:	4894      	ldr	r0, [pc, #592]	; (80063a8 <_printf_float+0x2e4>)
 8006158:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800615c:	bf94      	ite	ls
 800615e:	4698      	movls	r8, r3
 8006160:	4680      	movhi	r8, r0
 8006162:	2303      	movs	r3, #3
 8006164:	6123      	str	r3, [r4, #16]
 8006166:	9b05      	ldr	r3, [sp, #20]
 8006168:	f023 0204 	bic.w	r2, r3, #4
 800616c:	6022      	str	r2, [r4, #0]
 800616e:	f04f 0900 	mov.w	r9, #0
 8006172:	9700      	str	r7, [sp, #0]
 8006174:	4633      	mov	r3, r6
 8006176:	aa0b      	add	r2, sp, #44	; 0x2c
 8006178:	4621      	mov	r1, r4
 800617a:	4628      	mov	r0, r5
 800617c:	f000 f9d8 	bl	8006530 <_printf_common>
 8006180:	3001      	adds	r0, #1
 8006182:	f040 8090 	bne.w	80062a6 <_printf_float+0x1e2>
 8006186:	f04f 30ff 	mov.w	r0, #4294967295
 800618a:	b00d      	add	sp, #52	; 0x34
 800618c:	ecbd 8b02 	vpop	{d8}
 8006190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006194:	4642      	mov	r2, r8
 8006196:	464b      	mov	r3, r9
 8006198:	4640      	mov	r0, r8
 800619a:	4649      	mov	r1, r9
 800619c:	f7fa fcce 	bl	8000b3c <__aeabi_dcmpun>
 80061a0:	b140      	cbz	r0, 80061b4 <_printf_float+0xf0>
 80061a2:	464b      	mov	r3, r9
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	bfbc      	itt	lt
 80061a8:	232d      	movlt	r3, #45	; 0x2d
 80061aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80061ae:	487f      	ldr	r0, [pc, #508]	; (80063ac <_printf_float+0x2e8>)
 80061b0:	4b7f      	ldr	r3, [pc, #508]	; (80063b0 <_printf_float+0x2ec>)
 80061b2:	e7d1      	b.n	8006158 <_printf_float+0x94>
 80061b4:	6863      	ldr	r3, [r4, #4]
 80061b6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80061ba:	9206      	str	r2, [sp, #24]
 80061bc:	1c5a      	adds	r2, r3, #1
 80061be:	d13f      	bne.n	8006240 <_printf_float+0x17c>
 80061c0:	2306      	movs	r3, #6
 80061c2:	6063      	str	r3, [r4, #4]
 80061c4:	9b05      	ldr	r3, [sp, #20]
 80061c6:	6861      	ldr	r1, [r4, #4]
 80061c8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80061cc:	2300      	movs	r3, #0
 80061ce:	9303      	str	r3, [sp, #12]
 80061d0:	ab0a      	add	r3, sp, #40	; 0x28
 80061d2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80061d6:	ab09      	add	r3, sp, #36	; 0x24
 80061d8:	ec49 8b10 	vmov	d0, r8, r9
 80061dc:	9300      	str	r3, [sp, #0]
 80061de:	6022      	str	r2, [r4, #0]
 80061e0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80061e4:	4628      	mov	r0, r5
 80061e6:	f7ff fecd 	bl	8005f84 <__cvt>
 80061ea:	9b06      	ldr	r3, [sp, #24]
 80061ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80061ee:	2b47      	cmp	r3, #71	; 0x47
 80061f0:	4680      	mov	r8, r0
 80061f2:	d108      	bne.n	8006206 <_printf_float+0x142>
 80061f4:	1cc8      	adds	r0, r1, #3
 80061f6:	db02      	blt.n	80061fe <_printf_float+0x13a>
 80061f8:	6863      	ldr	r3, [r4, #4]
 80061fa:	4299      	cmp	r1, r3
 80061fc:	dd41      	ble.n	8006282 <_printf_float+0x1be>
 80061fe:	f1ab 0b02 	sub.w	fp, fp, #2
 8006202:	fa5f fb8b 	uxtb.w	fp, fp
 8006206:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800620a:	d820      	bhi.n	800624e <_printf_float+0x18a>
 800620c:	3901      	subs	r1, #1
 800620e:	465a      	mov	r2, fp
 8006210:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006214:	9109      	str	r1, [sp, #36]	; 0x24
 8006216:	f7ff ff17 	bl	8006048 <__exponent>
 800621a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800621c:	1813      	adds	r3, r2, r0
 800621e:	2a01      	cmp	r2, #1
 8006220:	4681      	mov	r9, r0
 8006222:	6123      	str	r3, [r4, #16]
 8006224:	dc02      	bgt.n	800622c <_printf_float+0x168>
 8006226:	6822      	ldr	r2, [r4, #0]
 8006228:	07d2      	lsls	r2, r2, #31
 800622a:	d501      	bpl.n	8006230 <_printf_float+0x16c>
 800622c:	3301      	adds	r3, #1
 800622e:	6123      	str	r3, [r4, #16]
 8006230:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006234:	2b00      	cmp	r3, #0
 8006236:	d09c      	beq.n	8006172 <_printf_float+0xae>
 8006238:	232d      	movs	r3, #45	; 0x2d
 800623a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800623e:	e798      	b.n	8006172 <_printf_float+0xae>
 8006240:	9a06      	ldr	r2, [sp, #24]
 8006242:	2a47      	cmp	r2, #71	; 0x47
 8006244:	d1be      	bne.n	80061c4 <_printf_float+0x100>
 8006246:	2b00      	cmp	r3, #0
 8006248:	d1bc      	bne.n	80061c4 <_printf_float+0x100>
 800624a:	2301      	movs	r3, #1
 800624c:	e7b9      	b.n	80061c2 <_printf_float+0xfe>
 800624e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006252:	d118      	bne.n	8006286 <_printf_float+0x1c2>
 8006254:	2900      	cmp	r1, #0
 8006256:	6863      	ldr	r3, [r4, #4]
 8006258:	dd0b      	ble.n	8006272 <_printf_float+0x1ae>
 800625a:	6121      	str	r1, [r4, #16]
 800625c:	b913      	cbnz	r3, 8006264 <_printf_float+0x1a0>
 800625e:	6822      	ldr	r2, [r4, #0]
 8006260:	07d0      	lsls	r0, r2, #31
 8006262:	d502      	bpl.n	800626a <_printf_float+0x1a6>
 8006264:	3301      	adds	r3, #1
 8006266:	440b      	add	r3, r1
 8006268:	6123      	str	r3, [r4, #16]
 800626a:	65a1      	str	r1, [r4, #88]	; 0x58
 800626c:	f04f 0900 	mov.w	r9, #0
 8006270:	e7de      	b.n	8006230 <_printf_float+0x16c>
 8006272:	b913      	cbnz	r3, 800627a <_printf_float+0x1b6>
 8006274:	6822      	ldr	r2, [r4, #0]
 8006276:	07d2      	lsls	r2, r2, #31
 8006278:	d501      	bpl.n	800627e <_printf_float+0x1ba>
 800627a:	3302      	adds	r3, #2
 800627c:	e7f4      	b.n	8006268 <_printf_float+0x1a4>
 800627e:	2301      	movs	r3, #1
 8006280:	e7f2      	b.n	8006268 <_printf_float+0x1a4>
 8006282:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006286:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006288:	4299      	cmp	r1, r3
 800628a:	db05      	blt.n	8006298 <_printf_float+0x1d4>
 800628c:	6823      	ldr	r3, [r4, #0]
 800628e:	6121      	str	r1, [r4, #16]
 8006290:	07d8      	lsls	r0, r3, #31
 8006292:	d5ea      	bpl.n	800626a <_printf_float+0x1a6>
 8006294:	1c4b      	adds	r3, r1, #1
 8006296:	e7e7      	b.n	8006268 <_printf_float+0x1a4>
 8006298:	2900      	cmp	r1, #0
 800629a:	bfd4      	ite	le
 800629c:	f1c1 0202 	rsble	r2, r1, #2
 80062a0:	2201      	movgt	r2, #1
 80062a2:	4413      	add	r3, r2
 80062a4:	e7e0      	b.n	8006268 <_printf_float+0x1a4>
 80062a6:	6823      	ldr	r3, [r4, #0]
 80062a8:	055a      	lsls	r2, r3, #21
 80062aa:	d407      	bmi.n	80062bc <_printf_float+0x1f8>
 80062ac:	6923      	ldr	r3, [r4, #16]
 80062ae:	4642      	mov	r2, r8
 80062b0:	4631      	mov	r1, r6
 80062b2:	4628      	mov	r0, r5
 80062b4:	47b8      	blx	r7
 80062b6:	3001      	adds	r0, #1
 80062b8:	d12c      	bne.n	8006314 <_printf_float+0x250>
 80062ba:	e764      	b.n	8006186 <_printf_float+0xc2>
 80062bc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80062c0:	f240 80e0 	bls.w	8006484 <_printf_float+0x3c0>
 80062c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80062c8:	2200      	movs	r2, #0
 80062ca:	2300      	movs	r3, #0
 80062cc:	f7fa fc04 	bl	8000ad8 <__aeabi_dcmpeq>
 80062d0:	2800      	cmp	r0, #0
 80062d2:	d034      	beq.n	800633e <_printf_float+0x27a>
 80062d4:	4a37      	ldr	r2, [pc, #220]	; (80063b4 <_printf_float+0x2f0>)
 80062d6:	2301      	movs	r3, #1
 80062d8:	4631      	mov	r1, r6
 80062da:	4628      	mov	r0, r5
 80062dc:	47b8      	blx	r7
 80062de:	3001      	adds	r0, #1
 80062e0:	f43f af51 	beq.w	8006186 <_printf_float+0xc2>
 80062e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80062e8:	429a      	cmp	r2, r3
 80062ea:	db02      	blt.n	80062f2 <_printf_float+0x22e>
 80062ec:	6823      	ldr	r3, [r4, #0]
 80062ee:	07d8      	lsls	r0, r3, #31
 80062f0:	d510      	bpl.n	8006314 <_printf_float+0x250>
 80062f2:	ee18 3a10 	vmov	r3, s16
 80062f6:	4652      	mov	r2, sl
 80062f8:	4631      	mov	r1, r6
 80062fa:	4628      	mov	r0, r5
 80062fc:	47b8      	blx	r7
 80062fe:	3001      	adds	r0, #1
 8006300:	f43f af41 	beq.w	8006186 <_printf_float+0xc2>
 8006304:	f04f 0800 	mov.w	r8, #0
 8006308:	f104 091a 	add.w	r9, r4, #26
 800630c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800630e:	3b01      	subs	r3, #1
 8006310:	4543      	cmp	r3, r8
 8006312:	dc09      	bgt.n	8006328 <_printf_float+0x264>
 8006314:	6823      	ldr	r3, [r4, #0]
 8006316:	079b      	lsls	r3, r3, #30
 8006318:	f100 8105 	bmi.w	8006526 <_printf_float+0x462>
 800631c:	68e0      	ldr	r0, [r4, #12]
 800631e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006320:	4298      	cmp	r0, r3
 8006322:	bfb8      	it	lt
 8006324:	4618      	movlt	r0, r3
 8006326:	e730      	b.n	800618a <_printf_float+0xc6>
 8006328:	2301      	movs	r3, #1
 800632a:	464a      	mov	r2, r9
 800632c:	4631      	mov	r1, r6
 800632e:	4628      	mov	r0, r5
 8006330:	47b8      	blx	r7
 8006332:	3001      	adds	r0, #1
 8006334:	f43f af27 	beq.w	8006186 <_printf_float+0xc2>
 8006338:	f108 0801 	add.w	r8, r8, #1
 800633c:	e7e6      	b.n	800630c <_printf_float+0x248>
 800633e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006340:	2b00      	cmp	r3, #0
 8006342:	dc39      	bgt.n	80063b8 <_printf_float+0x2f4>
 8006344:	4a1b      	ldr	r2, [pc, #108]	; (80063b4 <_printf_float+0x2f0>)
 8006346:	2301      	movs	r3, #1
 8006348:	4631      	mov	r1, r6
 800634a:	4628      	mov	r0, r5
 800634c:	47b8      	blx	r7
 800634e:	3001      	adds	r0, #1
 8006350:	f43f af19 	beq.w	8006186 <_printf_float+0xc2>
 8006354:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006358:	4313      	orrs	r3, r2
 800635a:	d102      	bne.n	8006362 <_printf_float+0x29e>
 800635c:	6823      	ldr	r3, [r4, #0]
 800635e:	07d9      	lsls	r1, r3, #31
 8006360:	d5d8      	bpl.n	8006314 <_printf_float+0x250>
 8006362:	ee18 3a10 	vmov	r3, s16
 8006366:	4652      	mov	r2, sl
 8006368:	4631      	mov	r1, r6
 800636a:	4628      	mov	r0, r5
 800636c:	47b8      	blx	r7
 800636e:	3001      	adds	r0, #1
 8006370:	f43f af09 	beq.w	8006186 <_printf_float+0xc2>
 8006374:	f04f 0900 	mov.w	r9, #0
 8006378:	f104 0a1a 	add.w	sl, r4, #26
 800637c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800637e:	425b      	negs	r3, r3
 8006380:	454b      	cmp	r3, r9
 8006382:	dc01      	bgt.n	8006388 <_printf_float+0x2c4>
 8006384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006386:	e792      	b.n	80062ae <_printf_float+0x1ea>
 8006388:	2301      	movs	r3, #1
 800638a:	4652      	mov	r2, sl
 800638c:	4631      	mov	r1, r6
 800638e:	4628      	mov	r0, r5
 8006390:	47b8      	blx	r7
 8006392:	3001      	adds	r0, #1
 8006394:	f43f aef7 	beq.w	8006186 <_printf_float+0xc2>
 8006398:	f109 0901 	add.w	r9, r9, #1
 800639c:	e7ee      	b.n	800637c <_printf_float+0x2b8>
 800639e:	bf00      	nop
 80063a0:	7fefffff 	.word	0x7fefffff
 80063a4:	0800be64 	.word	0x0800be64
 80063a8:	0800be68 	.word	0x0800be68
 80063ac:	0800be70 	.word	0x0800be70
 80063b0:	0800be6c 	.word	0x0800be6c
 80063b4:	0800be74 	.word	0x0800be74
 80063b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80063ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80063bc:	429a      	cmp	r2, r3
 80063be:	bfa8      	it	ge
 80063c0:	461a      	movge	r2, r3
 80063c2:	2a00      	cmp	r2, #0
 80063c4:	4691      	mov	r9, r2
 80063c6:	dc37      	bgt.n	8006438 <_printf_float+0x374>
 80063c8:	f04f 0b00 	mov.w	fp, #0
 80063cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80063d0:	f104 021a 	add.w	r2, r4, #26
 80063d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80063d6:	9305      	str	r3, [sp, #20]
 80063d8:	eba3 0309 	sub.w	r3, r3, r9
 80063dc:	455b      	cmp	r3, fp
 80063de:	dc33      	bgt.n	8006448 <_printf_float+0x384>
 80063e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80063e4:	429a      	cmp	r2, r3
 80063e6:	db3b      	blt.n	8006460 <_printf_float+0x39c>
 80063e8:	6823      	ldr	r3, [r4, #0]
 80063ea:	07da      	lsls	r2, r3, #31
 80063ec:	d438      	bmi.n	8006460 <_printf_float+0x39c>
 80063ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063f0:	9a05      	ldr	r2, [sp, #20]
 80063f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80063f4:	1a9a      	subs	r2, r3, r2
 80063f6:	eba3 0901 	sub.w	r9, r3, r1
 80063fa:	4591      	cmp	r9, r2
 80063fc:	bfa8      	it	ge
 80063fe:	4691      	movge	r9, r2
 8006400:	f1b9 0f00 	cmp.w	r9, #0
 8006404:	dc35      	bgt.n	8006472 <_printf_float+0x3ae>
 8006406:	f04f 0800 	mov.w	r8, #0
 800640a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800640e:	f104 0a1a 	add.w	sl, r4, #26
 8006412:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006416:	1a9b      	subs	r3, r3, r2
 8006418:	eba3 0309 	sub.w	r3, r3, r9
 800641c:	4543      	cmp	r3, r8
 800641e:	f77f af79 	ble.w	8006314 <_printf_float+0x250>
 8006422:	2301      	movs	r3, #1
 8006424:	4652      	mov	r2, sl
 8006426:	4631      	mov	r1, r6
 8006428:	4628      	mov	r0, r5
 800642a:	47b8      	blx	r7
 800642c:	3001      	adds	r0, #1
 800642e:	f43f aeaa 	beq.w	8006186 <_printf_float+0xc2>
 8006432:	f108 0801 	add.w	r8, r8, #1
 8006436:	e7ec      	b.n	8006412 <_printf_float+0x34e>
 8006438:	4613      	mov	r3, r2
 800643a:	4631      	mov	r1, r6
 800643c:	4642      	mov	r2, r8
 800643e:	4628      	mov	r0, r5
 8006440:	47b8      	blx	r7
 8006442:	3001      	adds	r0, #1
 8006444:	d1c0      	bne.n	80063c8 <_printf_float+0x304>
 8006446:	e69e      	b.n	8006186 <_printf_float+0xc2>
 8006448:	2301      	movs	r3, #1
 800644a:	4631      	mov	r1, r6
 800644c:	4628      	mov	r0, r5
 800644e:	9205      	str	r2, [sp, #20]
 8006450:	47b8      	blx	r7
 8006452:	3001      	adds	r0, #1
 8006454:	f43f ae97 	beq.w	8006186 <_printf_float+0xc2>
 8006458:	9a05      	ldr	r2, [sp, #20]
 800645a:	f10b 0b01 	add.w	fp, fp, #1
 800645e:	e7b9      	b.n	80063d4 <_printf_float+0x310>
 8006460:	ee18 3a10 	vmov	r3, s16
 8006464:	4652      	mov	r2, sl
 8006466:	4631      	mov	r1, r6
 8006468:	4628      	mov	r0, r5
 800646a:	47b8      	blx	r7
 800646c:	3001      	adds	r0, #1
 800646e:	d1be      	bne.n	80063ee <_printf_float+0x32a>
 8006470:	e689      	b.n	8006186 <_printf_float+0xc2>
 8006472:	9a05      	ldr	r2, [sp, #20]
 8006474:	464b      	mov	r3, r9
 8006476:	4442      	add	r2, r8
 8006478:	4631      	mov	r1, r6
 800647a:	4628      	mov	r0, r5
 800647c:	47b8      	blx	r7
 800647e:	3001      	adds	r0, #1
 8006480:	d1c1      	bne.n	8006406 <_printf_float+0x342>
 8006482:	e680      	b.n	8006186 <_printf_float+0xc2>
 8006484:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006486:	2a01      	cmp	r2, #1
 8006488:	dc01      	bgt.n	800648e <_printf_float+0x3ca>
 800648a:	07db      	lsls	r3, r3, #31
 800648c:	d538      	bpl.n	8006500 <_printf_float+0x43c>
 800648e:	2301      	movs	r3, #1
 8006490:	4642      	mov	r2, r8
 8006492:	4631      	mov	r1, r6
 8006494:	4628      	mov	r0, r5
 8006496:	47b8      	blx	r7
 8006498:	3001      	adds	r0, #1
 800649a:	f43f ae74 	beq.w	8006186 <_printf_float+0xc2>
 800649e:	ee18 3a10 	vmov	r3, s16
 80064a2:	4652      	mov	r2, sl
 80064a4:	4631      	mov	r1, r6
 80064a6:	4628      	mov	r0, r5
 80064a8:	47b8      	blx	r7
 80064aa:	3001      	adds	r0, #1
 80064ac:	f43f ae6b 	beq.w	8006186 <_printf_float+0xc2>
 80064b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80064b4:	2200      	movs	r2, #0
 80064b6:	2300      	movs	r3, #0
 80064b8:	f7fa fb0e 	bl	8000ad8 <__aeabi_dcmpeq>
 80064bc:	b9d8      	cbnz	r0, 80064f6 <_printf_float+0x432>
 80064be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064c0:	f108 0201 	add.w	r2, r8, #1
 80064c4:	3b01      	subs	r3, #1
 80064c6:	4631      	mov	r1, r6
 80064c8:	4628      	mov	r0, r5
 80064ca:	47b8      	blx	r7
 80064cc:	3001      	adds	r0, #1
 80064ce:	d10e      	bne.n	80064ee <_printf_float+0x42a>
 80064d0:	e659      	b.n	8006186 <_printf_float+0xc2>
 80064d2:	2301      	movs	r3, #1
 80064d4:	4652      	mov	r2, sl
 80064d6:	4631      	mov	r1, r6
 80064d8:	4628      	mov	r0, r5
 80064da:	47b8      	blx	r7
 80064dc:	3001      	adds	r0, #1
 80064de:	f43f ae52 	beq.w	8006186 <_printf_float+0xc2>
 80064e2:	f108 0801 	add.w	r8, r8, #1
 80064e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064e8:	3b01      	subs	r3, #1
 80064ea:	4543      	cmp	r3, r8
 80064ec:	dcf1      	bgt.n	80064d2 <_printf_float+0x40e>
 80064ee:	464b      	mov	r3, r9
 80064f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80064f4:	e6dc      	b.n	80062b0 <_printf_float+0x1ec>
 80064f6:	f04f 0800 	mov.w	r8, #0
 80064fa:	f104 0a1a 	add.w	sl, r4, #26
 80064fe:	e7f2      	b.n	80064e6 <_printf_float+0x422>
 8006500:	2301      	movs	r3, #1
 8006502:	4642      	mov	r2, r8
 8006504:	e7df      	b.n	80064c6 <_printf_float+0x402>
 8006506:	2301      	movs	r3, #1
 8006508:	464a      	mov	r2, r9
 800650a:	4631      	mov	r1, r6
 800650c:	4628      	mov	r0, r5
 800650e:	47b8      	blx	r7
 8006510:	3001      	adds	r0, #1
 8006512:	f43f ae38 	beq.w	8006186 <_printf_float+0xc2>
 8006516:	f108 0801 	add.w	r8, r8, #1
 800651a:	68e3      	ldr	r3, [r4, #12]
 800651c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800651e:	1a5b      	subs	r3, r3, r1
 8006520:	4543      	cmp	r3, r8
 8006522:	dcf0      	bgt.n	8006506 <_printf_float+0x442>
 8006524:	e6fa      	b.n	800631c <_printf_float+0x258>
 8006526:	f04f 0800 	mov.w	r8, #0
 800652a:	f104 0919 	add.w	r9, r4, #25
 800652e:	e7f4      	b.n	800651a <_printf_float+0x456>

08006530 <_printf_common>:
 8006530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006534:	4616      	mov	r6, r2
 8006536:	4699      	mov	r9, r3
 8006538:	688a      	ldr	r2, [r1, #8]
 800653a:	690b      	ldr	r3, [r1, #16]
 800653c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006540:	4293      	cmp	r3, r2
 8006542:	bfb8      	it	lt
 8006544:	4613      	movlt	r3, r2
 8006546:	6033      	str	r3, [r6, #0]
 8006548:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800654c:	4607      	mov	r7, r0
 800654e:	460c      	mov	r4, r1
 8006550:	b10a      	cbz	r2, 8006556 <_printf_common+0x26>
 8006552:	3301      	adds	r3, #1
 8006554:	6033      	str	r3, [r6, #0]
 8006556:	6823      	ldr	r3, [r4, #0]
 8006558:	0699      	lsls	r1, r3, #26
 800655a:	bf42      	ittt	mi
 800655c:	6833      	ldrmi	r3, [r6, #0]
 800655e:	3302      	addmi	r3, #2
 8006560:	6033      	strmi	r3, [r6, #0]
 8006562:	6825      	ldr	r5, [r4, #0]
 8006564:	f015 0506 	ands.w	r5, r5, #6
 8006568:	d106      	bne.n	8006578 <_printf_common+0x48>
 800656a:	f104 0a19 	add.w	sl, r4, #25
 800656e:	68e3      	ldr	r3, [r4, #12]
 8006570:	6832      	ldr	r2, [r6, #0]
 8006572:	1a9b      	subs	r3, r3, r2
 8006574:	42ab      	cmp	r3, r5
 8006576:	dc26      	bgt.n	80065c6 <_printf_common+0x96>
 8006578:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800657c:	1e13      	subs	r3, r2, #0
 800657e:	6822      	ldr	r2, [r4, #0]
 8006580:	bf18      	it	ne
 8006582:	2301      	movne	r3, #1
 8006584:	0692      	lsls	r2, r2, #26
 8006586:	d42b      	bmi.n	80065e0 <_printf_common+0xb0>
 8006588:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800658c:	4649      	mov	r1, r9
 800658e:	4638      	mov	r0, r7
 8006590:	47c0      	blx	r8
 8006592:	3001      	adds	r0, #1
 8006594:	d01e      	beq.n	80065d4 <_printf_common+0xa4>
 8006596:	6823      	ldr	r3, [r4, #0]
 8006598:	68e5      	ldr	r5, [r4, #12]
 800659a:	6832      	ldr	r2, [r6, #0]
 800659c:	f003 0306 	and.w	r3, r3, #6
 80065a0:	2b04      	cmp	r3, #4
 80065a2:	bf08      	it	eq
 80065a4:	1aad      	subeq	r5, r5, r2
 80065a6:	68a3      	ldr	r3, [r4, #8]
 80065a8:	6922      	ldr	r2, [r4, #16]
 80065aa:	bf0c      	ite	eq
 80065ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065b0:	2500      	movne	r5, #0
 80065b2:	4293      	cmp	r3, r2
 80065b4:	bfc4      	itt	gt
 80065b6:	1a9b      	subgt	r3, r3, r2
 80065b8:	18ed      	addgt	r5, r5, r3
 80065ba:	2600      	movs	r6, #0
 80065bc:	341a      	adds	r4, #26
 80065be:	42b5      	cmp	r5, r6
 80065c0:	d11a      	bne.n	80065f8 <_printf_common+0xc8>
 80065c2:	2000      	movs	r0, #0
 80065c4:	e008      	b.n	80065d8 <_printf_common+0xa8>
 80065c6:	2301      	movs	r3, #1
 80065c8:	4652      	mov	r2, sl
 80065ca:	4649      	mov	r1, r9
 80065cc:	4638      	mov	r0, r7
 80065ce:	47c0      	blx	r8
 80065d0:	3001      	adds	r0, #1
 80065d2:	d103      	bne.n	80065dc <_printf_common+0xac>
 80065d4:	f04f 30ff 	mov.w	r0, #4294967295
 80065d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065dc:	3501      	adds	r5, #1
 80065de:	e7c6      	b.n	800656e <_printf_common+0x3e>
 80065e0:	18e1      	adds	r1, r4, r3
 80065e2:	1c5a      	adds	r2, r3, #1
 80065e4:	2030      	movs	r0, #48	; 0x30
 80065e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80065ea:	4422      	add	r2, r4
 80065ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80065f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80065f4:	3302      	adds	r3, #2
 80065f6:	e7c7      	b.n	8006588 <_printf_common+0x58>
 80065f8:	2301      	movs	r3, #1
 80065fa:	4622      	mov	r2, r4
 80065fc:	4649      	mov	r1, r9
 80065fe:	4638      	mov	r0, r7
 8006600:	47c0      	blx	r8
 8006602:	3001      	adds	r0, #1
 8006604:	d0e6      	beq.n	80065d4 <_printf_common+0xa4>
 8006606:	3601      	adds	r6, #1
 8006608:	e7d9      	b.n	80065be <_printf_common+0x8e>
	...

0800660c <_printf_i>:
 800660c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006610:	7e0f      	ldrb	r7, [r1, #24]
 8006612:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006614:	2f78      	cmp	r7, #120	; 0x78
 8006616:	4691      	mov	r9, r2
 8006618:	4680      	mov	r8, r0
 800661a:	460c      	mov	r4, r1
 800661c:	469a      	mov	sl, r3
 800661e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006622:	d807      	bhi.n	8006634 <_printf_i+0x28>
 8006624:	2f62      	cmp	r7, #98	; 0x62
 8006626:	d80a      	bhi.n	800663e <_printf_i+0x32>
 8006628:	2f00      	cmp	r7, #0
 800662a:	f000 80d8 	beq.w	80067de <_printf_i+0x1d2>
 800662e:	2f58      	cmp	r7, #88	; 0x58
 8006630:	f000 80a3 	beq.w	800677a <_printf_i+0x16e>
 8006634:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006638:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800663c:	e03a      	b.n	80066b4 <_printf_i+0xa8>
 800663e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006642:	2b15      	cmp	r3, #21
 8006644:	d8f6      	bhi.n	8006634 <_printf_i+0x28>
 8006646:	a101      	add	r1, pc, #4	; (adr r1, 800664c <_printf_i+0x40>)
 8006648:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800664c:	080066a5 	.word	0x080066a5
 8006650:	080066b9 	.word	0x080066b9
 8006654:	08006635 	.word	0x08006635
 8006658:	08006635 	.word	0x08006635
 800665c:	08006635 	.word	0x08006635
 8006660:	08006635 	.word	0x08006635
 8006664:	080066b9 	.word	0x080066b9
 8006668:	08006635 	.word	0x08006635
 800666c:	08006635 	.word	0x08006635
 8006670:	08006635 	.word	0x08006635
 8006674:	08006635 	.word	0x08006635
 8006678:	080067c5 	.word	0x080067c5
 800667c:	080066e9 	.word	0x080066e9
 8006680:	080067a7 	.word	0x080067a7
 8006684:	08006635 	.word	0x08006635
 8006688:	08006635 	.word	0x08006635
 800668c:	080067e7 	.word	0x080067e7
 8006690:	08006635 	.word	0x08006635
 8006694:	080066e9 	.word	0x080066e9
 8006698:	08006635 	.word	0x08006635
 800669c:	08006635 	.word	0x08006635
 80066a0:	080067af 	.word	0x080067af
 80066a4:	682b      	ldr	r3, [r5, #0]
 80066a6:	1d1a      	adds	r2, r3, #4
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	602a      	str	r2, [r5, #0]
 80066ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80066b4:	2301      	movs	r3, #1
 80066b6:	e0a3      	b.n	8006800 <_printf_i+0x1f4>
 80066b8:	6820      	ldr	r0, [r4, #0]
 80066ba:	6829      	ldr	r1, [r5, #0]
 80066bc:	0606      	lsls	r6, r0, #24
 80066be:	f101 0304 	add.w	r3, r1, #4
 80066c2:	d50a      	bpl.n	80066da <_printf_i+0xce>
 80066c4:	680e      	ldr	r6, [r1, #0]
 80066c6:	602b      	str	r3, [r5, #0]
 80066c8:	2e00      	cmp	r6, #0
 80066ca:	da03      	bge.n	80066d4 <_printf_i+0xc8>
 80066cc:	232d      	movs	r3, #45	; 0x2d
 80066ce:	4276      	negs	r6, r6
 80066d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066d4:	485e      	ldr	r0, [pc, #376]	; (8006850 <_printf_i+0x244>)
 80066d6:	230a      	movs	r3, #10
 80066d8:	e019      	b.n	800670e <_printf_i+0x102>
 80066da:	680e      	ldr	r6, [r1, #0]
 80066dc:	602b      	str	r3, [r5, #0]
 80066de:	f010 0f40 	tst.w	r0, #64	; 0x40
 80066e2:	bf18      	it	ne
 80066e4:	b236      	sxthne	r6, r6
 80066e6:	e7ef      	b.n	80066c8 <_printf_i+0xbc>
 80066e8:	682b      	ldr	r3, [r5, #0]
 80066ea:	6820      	ldr	r0, [r4, #0]
 80066ec:	1d19      	adds	r1, r3, #4
 80066ee:	6029      	str	r1, [r5, #0]
 80066f0:	0601      	lsls	r1, r0, #24
 80066f2:	d501      	bpl.n	80066f8 <_printf_i+0xec>
 80066f4:	681e      	ldr	r6, [r3, #0]
 80066f6:	e002      	b.n	80066fe <_printf_i+0xf2>
 80066f8:	0646      	lsls	r6, r0, #25
 80066fa:	d5fb      	bpl.n	80066f4 <_printf_i+0xe8>
 80066fc:	881e      	ldrh	r6, [r3, #0]
 80066fe:	4854      	ldr	r0, [pc, #336]	; (8006850 <_printf_i+0x244>)
 8006700:	2f6f      	cmp	r7, #111	; 0x6f
 8006702:	bf0c      	ite	eq
 8006704:	2308      	moveq	r3, #8
 8006706:	230a      	movne	r3, #10
 8006708:	2100      	movs	r1, #0
 800670a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800670e:	6865      	ldr	r5, [r4, #4]
 8006710:	60a5      	str	r5, [r4, #8]
 8006712:	2d00      	cmp	r5, #0
 8006714:	bfa2      	ittt	ge
 8006716:	6821      	ldrge	r1, [r4, #0]
 8006718:	f021 0104 	bicge.w	r1, r1, #4
 800671c:	6021      	strge	r1, [r4, #0]
 800671e:	b90e      	cbnz	r6, 8006724 <_printf_i+0x118>
 8006720:	2d00      	cmp	r5, #0
 8006722:	d04d      	beq.n	80067c0 <_printf_i+0x1b4>
 8006724:	4615      	mov	r5, r2
 8006726:	fbb6 f1f3 	udiv	r1, r6, r3
 800672a:	fb03 6711 	mls	r7, r3, r1, r6
 800672e:	5dc7      	ldrb	r7, [r0, r7]
 8006730:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006734:	4637      	mov	r7, r6
 8006736:	42bb      	cmp	r3, r7
 8006738:	460e      	mov	r6, r1
 800673a:	d9f4      	bls.n	8006726 <_printf_i+0x11a>
 800673c:	2b08      	cmp	r3, #8
 800673e:	d10b      	bne.n	8006758 <_printf_i+0x14c>
 8006740:	6823      	ldr	r3, [r4, #0]
 8006742:	07de      	lsls	r6, r3, #31
 8006744:	d508      	bpl.n	8006758 <_printf_i+0x14c>
 8006746:	6923      	ldr	r3, [r4, #16]
 8006748:	6861      	ldr	r1, [r4, #4]
 800674a:	4299      	cmp	r1, r3
 800674c:	bfde      	ittt	le
 800674e:	2330      	movle	r3, #48	; 0x30
 8006750:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006754:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006758:	1b52      	subs	r2, r2, r5
 800675a:	6122      	str	r2, [r4, #16]
 800675c:	f8cd a000 	str.w	sl, [sp]
 8006760:	464b      	mov	r3, r9
 8006762:	aa03      	add	r2, sp, #12
 8006764:	4621      	mov	r1, r4
 8006766:	4640      	mov	r0, r8
 8006768:	f7ff fee2 	bl	8006530 <_printf_common>
 800676c:	3001      	adds	r0, #1
 800676e:	d14c      	bne.n	800680a <_printf_i+0x1fe>
 8006770:	f04f 30ff 	mov.w	r0, #4294967295
 8006774:	b004      	add	sp, #16
 8006776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800677a:	4835      	ldr	r0, [pc, #212]	; (8006850 <_printf_i+0x244>)
 800677c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006780:	6829      	ldr	r1, [r5, #0]
 8006782:	6823      	ldr	r3, [r4, #0]
 8006784:	f851 6b04 	ldr.w	r6, [r1], #4
 8006788:	6029      	str	r1, [r5, #0]
 800678a:	061d      	lsls	r5, r3, #24
 800678c:	d514      	bpl.n	80067b8 <_printf_i+0x1ac>
 800678e:	07df      	lsls	r7, r3, #31
 8006790:	bf44      	itt	mi
 8006792:	f043 0320 	orrmi.w	r3, r3, #32
 8006796:	6023      	strmi	r3, [r4, #0]
 8006798:	b91e      	cbnz	r6, 80067a2 <_printf_i+0x196>
 800679a:	6823      	ldr	r3, [r4, #0]
 800679c:	f023 0320 	bic.w	r3, r3, #32
 80067a0:	6023      	str	r3, [r4, #0]
 80067a2:	2310      	movs	r3, #16
 80067a4:	e7b0      	b.n	8006708 <_printf_i+0xfc>
 80067a6:	6823      	ldr	r3, [r4, #0]
 80067a8:	f043 0320 	orr.w	r3, r3, #32
 80067ac:	6023      	str	r3, [r4, #0]
 80067ae:	2378      	movs	r3, #120	; 0x78
 80067b0:	4828      	ldr	r0, [pc, #160]	; (8006854 <_printf_i+0x248>)
 80067b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80067b6:	e7e3      	b.n	8006780 <_printf_i+0x174>
 80067b8:	0659      	lsls	r1, r3, #25
 80067ba:	bf48      	it	mi
 80067bc:	b2b6      	uxthmi	r6, r6
 80067be:	e7e6      	b.n	800678e <_printf_i+0x182>
 80067c0:	4615      	mov	r5, r2
 80067c2:	e7bb      	b.n	800673c <_printf_i+0x130>
 80067c4:	682b      	ldr	r3, [r5, #0]
 80067c6:	6826      	ldr	r6, [r4, #0]
 80067c8:	6961      	ldr	r1, [r4, #20]
 80067ca:	1d18      	adds	r0, r3, #4
 80067cc:	6028      	str	r0, [r5, #0]
 80067ce:	0635      	lsls	r5, r6, #24
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	d501      	bpl.n	80067d8 <_printf_i+0x1cc>
 80067d4:	6019      	str	r1, [r3, #0]
 80067d6:	e002      	b.n	80067de <_printf_i+0x1d2>
 80067d8:	0670      	lsls	r0, r6, #25
 80067da:	d5fb      	bpl.n	80067d4 <_printf_i+0x1c8>
 80067dc:	8019      	strh	r1, [r3, #0]
 80067de:	2300      	movs	r3, #0
 80067e0:	6123      	str	r3, [r4, #16]
 80067e2:	4615      	mov	r5, r2
 80067e4:	e7ba      	b.n	800675c <_printf_i+0x150>
 80067e6:	682b      	ldr	r3, [r5, #0]
 80067e8:	1d1a      	adds	r2, r3, #4
 80067ea:	602a      	str	r2, [r5, #0]
 80067ec:	681d      	ldr	r5, [r3, #0]
 80067ee:	6862      	ldr	r2, [r4, #4]
 80067f0:	2100      	movs	r1, #0
 80067f2:	4628      	mov	r0, r5
 80067f4:	f7f9 fcfc 	bl	80001f0 <memchr>
 80067f8:	b108      	cbz	r0, 80067fe <_printf_i+0x1f2>
 80067fa:	1b40      	subs	r0, r0, r5
 80067fc:	6060      	str	r0, [r4, #4]
 80067fe:	6863      	ldr	r3, [r4, #4]
 8006800:	6123      	str	r3, [r4, #16]
 8006802:	2300      	movs	r3, #0
 8006804:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006808:	e7a8      	b.n	800675c <_printf_i+0x150>
 800680a:	6923      	ldr	r3, [r4, #16]
 800680c:	462a      	mov	r2, r5
 800680e:	4649      	mov	r1, r9
 8006810:	4640      	mov	r0, r8
 8006812:	47d0      	blx	sl
 8006814:	3001      	adds	r0, #1
 8006816:	d0ab      	beq.n	8006770 <_printf_i+0x164>
 8006818:	6823      	ldr	r3, [r4, #0]
 800681a:	079b      	lsls	r3, r3, #30
 800681c:	d413      	bmi.n	8006846 <_printf_i+0x23a>
 800681e:	68e0      	ldr	r0, [r4, #12]
 8006820:	9b03      	ldr	r3, [sp, #12]
 8006822:	4298      	cmp	r0, r3
 8006824:	bfb8      	it	lt
 8006826:	4618      	movlt	r0, r3
 8006828:	e7a4      	b.n	8006774 <_printf_i+0x168>
 800682a:	2301      	movs	r3, #1
 800682c:	4632      	mov	r2, r6
 800682e:	4649      	mov	r1, r9
 8006830:	4640      	mov	r0, r8
 8006832:	47d0      	blx	sl
 8006834:	3001      	adds	r0, #1
 8006836:	d09b      	beq.n	8006770 <_printf_i+0x164>
 8006838:	3501      	adds	r5, #1
 800683a:	68e3      	ldr	r3, [r4, #12]
 800683c:	9903      	ldr	r1, [sp, #12]
 800683e:	1a5b      	subs	r3, r3, r1
 8006840:	42ab      	cmp	r3, r5
 8006842:	dcf2      	bgt.n	800682a <_printf_i+0x21e>
 8006844:	e7eb      	b.n	800681e <_printf_i+0x212>
 8006846:	2500      	movs	r5, #0
 8006848:	f104 0619 	add.w	r6, r4, #25
 800684c:	e7f5      	b.n	800683a <_printf_i+0x22e>
 800684e:	bf00      	nop
 8006850:	0800be76 	.word	0x0800be76
 8006854:	0800be87 	.word	0x0800be87

08006858 <_scanf_float>:
 8006858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800685c:	b087      	sub	sp, #28
 800685e:	4617      	mov	r7, r2
 8006860:	9303      	str	r3, [sp, #12]
 8006862:	688b      	ldr	r3, [r1, #8]
 8006864:	1e5a      	subs	r2, r3, #1
 8006866:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800686a:	bf83      	ittte	hi
 800686c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006870:	195b      	addhi	r3, r3, r5
 8006872:	9302      	strhi	r3, [sp, #8]
 8006874:	2300      	movls	r3, #0
 8006876:	bf86      	itte	hi
 8006878:	f240 135d 	movwhi	r3, #349	; 0x15d
 800687c:	608b      	strhi	r3, [r1, #8]
 800687e:	9302      	strls	r3, [sp, #8]
 8006880:	680b      	ldr	r3, [r1, #0]
 8006882:	468b      	mov	fp, r1
 8006884:	2500      	movs	r5, #0
 8006886:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800688a:	f84b 3b1c 	str.w	r3, [fp], #28
 800688e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006892:	4680      	mov	r8, r0
 8006894:	460c      	mov	r4, r1
 8006896:	465e      	mov	r6, fp
 8006898:	46aa      	mov	sl, r5
 800689a:	46a9      	mov	r9, r5
 800689c:	9501      	str	r5, [sp, #4]
 800689e:	68a2      	ldr	r2, [r4, #8]
 80068a0:	b152      	cbz	r2, 80068b8 <_scanf_float+0x60>
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	2b4e      	cmp	r3, #78	; 0x4e
 80068a8:	d864      	bhi.n	8006974 <_scanf_float+0x11c>
 80068aa:	2b40      	cmp	r3, #64	; 0x40
 80068ac:	d83c      	bhi.n	8006928 <_scanf_float+0xd0>
 80068ae:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80068b2:	b2c8      	uxtb	r0, r1
 80068b4:	280e      	cmp	r0, #14
 80068b6:	d93a      	bls.n	800692e <_scanf_float+0xd6>
 80068b8:	f1b9 0f00 	cmp.w	r9, #0
 80068bc:	d003      	beq.n	80068c6 <_scanf_float+0x6e>
 80068be:	6823      	ldr	r3, [r4, #0]
 80068c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068c4:	6023      	str	r3, [r4, #0]
 80068c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80068ca:	f1ba 0f01 	cmp.w	sl, #1
 80068ce:	f200 8113 	bhi.w	8006af8 <_scanf_float+0x2a0>
 80068d2:	455e      	cmp	r6, fp
 80068d4:	f200 8105 	bhi.w	8006ae2 <_scanf_float+0x28a>
 80068d8:	2501      	movs	r5, #1
 80068da:	4628      	mov	r0, r5
 80068dc:	b007      	add	sp, #28
 80068de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068e2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80068e6:	2a0d      	cmp	r2, #13
 80068e8:	d8e6      	bhi.n	80068b8 <_scanf_float+0x60>
 80068ea:	a101      	add	r1, pc, #4	; (adr r1, 80068f0 <_scanf_float+0x98>)
 80068ec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80068f0:	08006a2f 	.word	0x08006a2f
 80068f4:	080068b9 	.word	0x080068b9
 80068f8:	080068b9 	.word	0x080068b9
 80068fc:	080068b9 	.word	0x080068b9
 8006900:	08006a8f 	.word	0x08006a8f
 8006904:	08006a67 	.word	0x08006a67
 8006908:	080068b9 	.word	0x080068b9
 800690c:	080068b9 	.word	0x080068b9
 8006910:	08006a3d 	.word	0x08006a3d
 8006914:	080068b9 	.word	0x080068b9
 8006918:	080068b9 	.word	0x080068b9
 800691c:	080068b9 	.word	0x080068b9
 8006920:	080068b9 	.word	0x080068b9
 8006924:	080069f5 	.word	0x080069f5
 8006928:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800692c:	e7db      	b.n	80068e6 <_scanf_float+0x8e>
 800692e:	290e      	cmp	r1, #14
 8006930:	d8c2      	bhi.n	80068b8 <_scanf_float+0x60>
 8006932:	a001      	add	r0, pc, #4	; (adr r0, 8006938 <_scanf_float+0xe0>)
 8006934:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006938:	080069e7 	.word	0x080069e7
 800693c:	080068b9 	.word	0x080068b9
 8006940:	080069e7 	.word	0x080069e7
 8006944:	08006a7b 	.word	0x08006a7b
 8006948:	080068b9 	.word	0x080068b9
 800694c:	08006995 	.word	0x08006995
 8006950:	080069d1 	.word	0x080069d1
 8006954:	080069d1 	.word	0x080069d1
 8006958:	080069d1 	.word	0x080069d1
 800695c:	080069d1 	.word	0x080069d1
 8006960:	080069d1 	.word	0x080069d1
 8006964:	080069d1 	.word	0x080069d1
 8006968:	080069d1 	.word	0x080069d1
 800696c:	080069d1 	.word	0x080069d1
 8006970:	080069d1 	.word	0x080069d1
 8006974:	2b6e      	cmp	r3, #110	; 0x6e
 8006976:	d809      	bhi.n	800698c <_scanf_float+0x134>
 8006978:	2b60      	cmp	r3, #96	; 0x60
 800697a:	d8b2      	bhi.n	80068e2 <_scanf_float+0x8a>
 800697c:	2b54      	cmp	r3, #84	; 0x54
 800697e:	d077      	beq.n	8006a70 <_scanf_float+0x218>
 8006980:	2b59      	cmp	r3, #89	; 0x59
 8006982:	d199      	bne.n	80068b8 <_scanf_float+0x60>
 8006984:	2d07      	cmp	r5, #7
 8006986:	d197      	bne.n	80068b8 <_scanf_float+0x60>
 8006988:	2508      	movs	r5, #8
 800698a:	e029      	b.n	80069e0 <_scanf_float+0x188>
 800698c:	2b74      	cmp	r3, #116	; 0x74
 800698e:	d06f      	beq.n	8006a70 <_scanf_float+0x218>
 8006990:	2b79      	cmp	r3, #121	; 0x79
 8006992:	e7f6      	b.n	8006982 <_scanf_float+0x12a>
 8006994:	6821      	ldr	r1, [r4, #0]
 8006996:	05c8      	lsls	r0, r1, #23
 8006998:	d51a      	bpl.n	80069d0 <_scanf_float+0x178>
 800699a:	9b02      	ldr	r3, [sp, #8]
 800699c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80069a0:	6021      	str	r1, [r4, #0]
 80069a2:	f109 0901 	add.w	r9, r9, #1
 80069a6:	b11b      	cbz	r3, 80069b0 <_scanf_float+0x158>
 80069a8:	3b01      	subs	r3, #1
 80069aa:	3201      	adds	r2, #1
 80069ac:	9302      	str	r3, [sp, #8]
 80069ae:	60a2      	str	r2, [r4, #8]
 80069b0:	68a3      	ldr	r3, [r4, #8]
 80069b2:	3b01      	subs	r3, #1
 80069b4:	60a3      	str	r3, [r4, #8]
 80069b6:	6923      	ldr	r3, [r4, #16]
 80069b8:	3301      	adds	r3, #1
 80069ba:	6123      	str	r3, [r4, #16]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	3b01      	subs	r3, #1
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	607b      	str	r3, [r7, #4]
 80069c4:	f340 8084 	ble.w	8006ad0 <_scanf_float+0x278>
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	3301      	adds	r3, #1
 80069cc:	603b      	str	r3, [r7, #0]
 80069ce:	e766      	b.n	800689e <_scanf_float+0x46>
 80069d0:	eb1a 0f05 	cmn.w	sl, r5
 80069d4:	f47f af70 	bne.w	80068b8 <_scanf_float+0x60>
 80069d8:	6822      	ldr	r2, [r4, #0]
 80069da:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80069de:	6022      	str	r2, [r4, #0]
 80069e0:	f806 3b01 	strb.w	r3, [r6], #1
 80069e4:	e7e4      	b.n	80069b0 <_scanf_float+0x158>
 80069e6:	6822      	ldr	r2, [r4, #0]
 80069e8:	0610      	lsls	r0, r2, #24
 80069ea:	f57f af65 	bpl.w	80068b8 <_scanf_float+0x60>
 80069ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069f2:	e7f4      	b.n	80069de <_scanf_float+0x186>
 80069f4:	f1ba 0f00 	cmp.w	sl, #0
 80069f8:	d10e      	bne.n	8006a18 <_scanf_float+0x1c0>
 80069fa:	f1b9 0f00 	cmp.w	r9, #0
 80069fe:	d10e      	bne.n	8006a1e <_scanf_float+0x1c6>
 8006a00:	6822      	ldr	r2, [r4, #0]
 8006a02:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006a06:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006a0a:	d108      	bne.n	8006a1e <_scanf_float+0x1c6>
 8006a0c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006a10:	6022      	str	r2, [r4, #0]
 8006a12:	f04f 0a01 	mov.w	sl, #1
 8006a16:	e7e3      	b.n	80069e0 <_scanf_float+0x188>
 8006a18:	f1ba 0f02 	cmp.w	sl, #2
 8006a1c:	d055      	beq.n	8006aca <_scanf_float+0x272>
 8006a1e:	2d01      	cmp	r5, #1
 8006a20:	d002      	beq.n	8006a28 <_scanf_float+0x1d0>
 8006a22:	2d04      	cmp	r5, #4
 8006a24:	f47f af48 	bne.w	80068b8 <_scanf_float+0x60>
 8006a28:	3501      	adds	r5, #1
 8006a2a:	b2ed      	uxtb	r5, r5
 8006a2c:	e7d8      	b.n	80069e0 <_scanf_float+0x188>
 8006a2e:	f1ba 0f01 	cmp.w	sl, #1
 8006a32:	f47f af41 	bne.w	80068b8 <_scanf_float+0x60>
 8006a36:	f04f 0a02 	mov.w	sl, #2
 8006a3a:	e7d1      	b.n	80069e0 <_scanf_float+0x188>
 8006a3c:	b97d      	cbnz	r5, 8006a5e <_scanf_float+0x206>
 8006a3e:	f1b9 0f00 	cmp.w	r9, #0
 8006a42:	f47f af3c 	bne.w	80068be <_scanf_float+0x66>
 8006a46:	6822      	ldr	r2, [r4, #0]
 8006a48:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006a4c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006a50:	f47f af39 	bne.w	80068c6 <_scanf_float+0x6e>
 8006a54:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006a58:	6022      	str	r2, [r4, #0]
 8006a5a:	2501      	movs	r5, #1
 8006a5c:	e7c0      	b.n	80069e0 <_scanf_float+0x188>
 8006a5e:	2d03      	cmp	r5, #3
 8006a60:	d0e2      	beq.n	8006a28 <_scanf_float+0x1d0>
 8006a62:	2d05      	cmp	r5, #5
 8006a64:	e7de      	b.n	8006a24 <_scanf_float+0x1cc>
 8006a66:	2d02      	cmp	r5, #2
 8006a68:	f47f af26 	bne.w	80068b8 <_scanf_float+0x60>
 8006a6c:	2503      	movs	r5, #3
 8006a6e:	e7b7      	b.n	80069e0 <_scanf_float+0x188>
 8006a70:	2d06      	cmp	r5, #6
 8006a72:	f47f af21 	bne.w	80068b8 <_scanf_float+0x60>
 8006a76:	2507      	movs	r5, #7
 8006a78:	e7b2      	b.n	80069e0 <_scanf_float+0x188>
 8006a7a:	6822      	ldr	r2, [r4, #0]
 8006a7c:	0591      	lsls	r1, r2, #22
 8006a7e:	f57f af1b 	bpl.w	80068b8 <_scanf_float+0x60>
 8006a82:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006a86:	6022      	str	r2, [r4, #0]
 8006a88:	f8cd 9004 	str.w	r9, [sp, #4]
 8006a8c:	e7a8      	b.n	80069e0 <_scanf_float+0x188>
 8006a8e:	6822      	ldr	r2, [r4, #0]
 8006a90:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006a94:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006a98:	d006      	beq.n	8006aa8 <_scanf_float+0x250>
 8006a9a:	0550      	lsls	r0, r2, #21
 8006a9c:	f57f af0c 	bpl.w	80068b8 <_scanf_float+0x60>
 8006aa0:	f1b9 0f00 	cmp.w	r9, #0
 8006aa4:	f43f af0f 	beq.w	80068c6 <_scanf_float+0x6e>
 8006aa8:	0591      	lsls	r1, r2, #22
 8006aaa:	bf58      	it	pl
 8006aac:	9901      	ldrpl	r1, [sp, #4]
 8006aae:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006ab2:	bf58      	it	pl
 8006ab4:	eba9 0101 	subpl.w	r1, r9, r1
 8006ab8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006abc:	bf58      	it	pl
 8006abe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006ac2:	6022      	str	r2, [r4, #0]
 8006ac4:	f04f 0900 	mov.w	r9, #0
 8006ac8:	e78a      	b.n	80069e0 <_scanf_float+0x188>
 8006aca:	f04f 0a03 	mov.w	sl, #3
 8006ace:	e787      	b.n	80069e0 <_scanf_float+0x188>
 8006ad0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006ad4:	4639      	mov	r1, r7
 8006ad6:	4640      	mov	r0, r8
 8006ad8:	4798      	blx	r3
 8006ada:	2800      	cmp	r0, #0
 8006adc:	f43f aedf 	beq.w	800689e <_scanf_float+0x46>
 8006ae0:	e6ea      	b.n	80068b8 <_scanf_float+0x60>
 8006ae2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ae6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006aea:	463a      	mov	r2, r7
 8006aec:	4640      	mov	r0, r8
 8006aee:	4798      	blx	r3
 8006af0:	6923      	ldr	r3, [r4, #16]
 8006af2:	3b01      	subs	r3, #1
 8006af4:	6123      	str	r3, [r4, #16]
 8006af6:	e6ec      	b.n	80068d2 <_scanf_float+0x7a>
 8006af8:	1e6b      	subs	r3, r5, #1
 8006afa:	2b06      	cmp	r3, #6
 8006afc:	d825      	bhi.n	8006b4a <_scanf_float+0x2f2>
 8006afe:	2d02      	cmp	r5, #2
 8006b00:	d836      	bhi.n	8006b70 <_scanf_float+0x318>
 8006b02:	455e      	cmp	r6, fp
 8006b04:	f67f aee8 	bls.w	80068d8 <_scanf_float+0x80>
 8006b08:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b0c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006b10:	463a      	mov	r2, r7
 8006b12:	4640      	mov	r0, r8
 8006b14:	4798      	blx	r3
 8006b16:	6923      	ldr	r3, [r4, #16]
 8006b18:	3b01      	subs	r3, #1
 8006b1a:	6123      	str	r3, [r4, #16]
 8006b1c:	e7f1      	b.n	8006b02 <_scanf_float+0x2aa>
 8006b1e:	9802      	ldr	r0, [sp, #8]
 8006b20:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b24:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006b28:	9002      	str	r0, [sp, #8]
 8006b2a:	463a      	mov	r2, r7
 8006b2c:	4640      	mov	r0, r8
 8006b2e:	4798      	blx	r3
 8006b30:	6923      	ldr	r3, [r4, #16]
 8006b32:	3b01      	subs	r3, #1
 8006b34:	6123      	str	r3, [r4, #16]
 8006b36:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b3a:	fa5f fa8a 	uxtb.w	sl, sl
 8006b3e:	f1ba 0f02 	cmp.w	sl, #2
 8006b42:	d1ec      	bne.n	8006b1e <_scanf_float+0x2c6>
 8006b44:	3d03      	subs	r5, #3
 8006b46:	b2ed      	uxtb	r5, r5
 8006b48:	1b76      	subs	r6, r6, r5
 8006b4a:	6823      	ldr	r3, [r4, #0]
 8006b4c:	05da      	lsls	r2, r3, #23
 8006b4e:	d52f      	bpl.n	8006bb0 <_scanf_float+0x358>
 8006b50:	055b      	lsls	r3, r3, #21
 8006b52:	d510      	bpl.n	8006b76 <_scanf_float+0x31e>
 8006b54:	455e      	cmp	r6, fp
 8006b56:	f67f aebf 	bls.w	80068d8 <_scanf_float+0x80>
 8006b5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b5e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006b62:	463a      	mov	r2, r7
 8006b64:	4640      	mov	r0, r8
 8006b66:	4798      	blx	r3
 8006b68:	6923      	ldr	r3, [r4, #16]
 8006b6a:	3b01      	subs	r3, #1
 8006b6c:	6123      	str	r3, [r4, #16]
 8006b6e:	e7f1      	b.n	8006b54 <_scanf_float+0x2fc>
 8006b70:	46aa      	mov	sl, r5
 8006b72:	9602      	str	r6, [sp, #8]
 8006b74:	e7df      	b.n	8006b36 <_scanf_float+0x2de>
 8006b76:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006b7a:	6923      	ldr	r3, [r4, #16]
 8006b7c:	2965      	cmp	r1, #101	; 0x65
 8006b7e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006b82:	f106 35ff 	add.w	r5, r6, #4294967295
 8006b86:	6123      	str	r3, [r4, #16]
 8006b88:	d00c      	beq.n	8006ba4 <_scanf_float+0x34c>
 8006b8a:	2945      	cmp	r1, #69	; 0x45
 8006b8c:	d00a      	beq.n	8006ba4 <_scanf_float+0x34c>
 8006b8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b92:	463a      	mov	r2, r7
 8006b94:	4640      	mov	r0, r8
 8006b96:	4798      	blx	r3
 8006b98:	6923      	ldr	r3, [r4, #16]
 8006b9a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006b9e:	3b01      	subs	r3, #1
 8006ba0:	1eb5      	subs	r5, r6, #2
 8006ba2:	6123      	str	r3, [r4, #16]
 8006ba4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ba8:	463a      	mov	r2, r7
 8006baa:	4640      	mov	r0, r8
 8006bac:	4798      	blx	r3
 8006bae:	462e      	mov	r6, r5
 8006bb0:	6825      	ldr	r5, [r4, #0]
 8006bb2:	f015 0510 	ands.w	r5, r5, #16
 8006bb6:	d159      	bne.n	8006c6c <_scanf_float+0x414>
 8006bb8:	7035      	strb	r5, [r6, #0]
 8006bba:	6823      	ldr	r3, [r4, #0]
 8006bbc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006bc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bc4:	d11b      	bne.n	8006bfe <_scanf_float+0x3a6>
 8006bc6:	9b01      	ldr	r3, [sp, #4]
 8006bc8:	454b      	cmp	r3, r9
 8006bca:	eba3 0209 	sub.w	r2, r3, r9
 8006bce:	d123      	bne.n	8006c18 <_scanf_float+0x3c0>
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	4659      	mov	r1, fp
 8006bd4:	4640      	mov	r0, r8
 8006bd6:	f000 fe99 	bl	800790c <_strtod_r>
 8006bda:	6822      	ldr	r2, [r4, #0]
 8006bdc:	9b03      	ldr	r3, [sp, #12]
 8006bde:	f012 0f02 	tst.w	r2, #2
 8006be2:	ec57 6b10 	vmov	r6, r7, d0
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	d021      	beq.n	8006c2e <_scanf_float+0x3d6>
 8006bea:	9903      	ldr	r1, [sp, #12]
 8006bec:	1d1a      	adds	r2, r3, #4
 8006bee:	600a      	str	r2, [r1, #0]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	e9c3 6700 	strd	r6, r7, [r3]
 8006bf6:	68e3      	ldr	r3, [r4, #12]
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	60e3      	str	r3, [r4, #12]
 8006bfc:	e66d      	b.n	80068da <_scanf_float+0x82>
 8006bfe:	9b04      	ldr	r3, [sp, #16]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d0e5      	beq.n	8006bd0 <_scanf_float+0x378>
 8006c04:	9905      	ldr	r1, [sp, #20]
 8006c06:	230a      	movs	r3, #10
 8006c08:	462a      	mov	r2, r5
 8006c0a:	3101      	adds	r1, #1
 8006c0c:	4640      	mov	r0, r8
 8006c0e:	f000 ff05 	bl	8007a1c <_strtol_r>
 8006c12:	9b04      	ldr	r3, [sp, #16]
 8006c14:	9e05      	ldr	r6, [sp, #20]
 8006c16:	1ac2      	subs	r2, r0, r3
 8006c18:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006c1c:	429e      	cmp	r6, r3
 8006c1e:	bf28      	it	cs
 8006c20:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006c24:	4912      	ldr	r1, [pc, #72]	; (8006c70 <_scanf_float+0x418>)
 8006c26:	4630      	mov	r0, r6
 8006c28:	f000 f82c 	bl	8006c84 <siprintf>
 8006c2c:	e7d0      	b.n	8006bd0 <_scanf_float+0x378>
 8006c2e:	9903      	ldr	r1, [sp, #12]
 8006c30:	f012 0f04 	tst.w	r2, #4
 8006c34:	f103 0204 	add.w	r2, r3, #4
 8006c38:	600a      	str	r2, [r1, #0]
 8006c3a:	d1d9      	bne.n	8006bf0 <_scanf_float+0x398>
 8006c3c:	f8d3 8000 	ldr.w	r8, [r3]
 8006c40:	ee10 2a10 	vmov	r2, s0
 8006c44:	ee10 0a10 	vmov	r0, s0
 8006c48:	463b      	mov	r3, r7
 8006c4a:	4639      	mov	r1, r7
 8006c4c:	f7f9 ff76 	bl	8000b3c <__aeabi_dcmpun>
 8006c50:	b128      	cbz	r0, 8006c5e <_scanf_float+0x406>
 8006c52:	4808      	ldr	r0, [pc, #32]	; (8006c74 <_scanf_float+0x41c>)
 8006c54:	f000 f810 	bl	8006c78 <nanf>
 8006c58:	ed88 0a00 	vstr	s0, [r8]
 8006c5c:	e7cb      	b.n	8006bf6 <_scanf_float+0x39e>
 8006c5e:	4630      	mov	r0, r6
 8006c60:	4639      	mov	r1, r7
 8006c62:	f7f9 ffc9 	bl	8000bf8 <__aeabi_d2f>
 8006c66:	f8c8 0000 	str.w	r0, [r8]
 8006c6a:	e7c4      	b.n	8006bf6 <_scanf_float+0x39e>
 8006c6c:	2500      	movs	r5, #0
 8006c6e:	e634      	b.n	80068da <_scanf_float+0x82>
 8006c70:	0800be98 	.word	0x0800be98
 8006c74:	0800c2a0 	.word	0x0800c2a0

08006c78 <nanf>:
 8006c78:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006c80 <nanf+0x8>
 8006c7c:	4770      	bx	lr
 8006c7e:	bf00      	nop
 8006c80:	7fc00000 	.word	0x7fc00000

08006c84 <siprintf>:
 8006c84:	b40e      	push	{r1, r2, r3}
 8006c86:	b500      	push	{lr}
 8006c88:	b09c      	sub	sp, #112	; 0x70
 8006c8a:	ab1d      	add	r3, sp, #116	; 0x74
 8006c8c:	9002      	str	r0, [sp, #8]
 8006c8e:	9006      	str	r0, [sp, #24]
 8006c90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006c94:	4809      	ldr	r0, [pc, #36]	; (8006cbc <siprintf+0x38>)
 8006c96:	9107      	str	r1, [sp, #28]
 8006c98:	9104      	str	r1, [sp, #16]
 8006c9a:	4909      	ldr	r1, [pc, #36]	; (8006cc0 <siprintf+0x3c>)
 8006c9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ca0:	9105      	str	r1, [sp, #20]
 8006ca2:	6800      	ldr	r0, [r0, #0]
 8006ca4:	9301      	str	r3, [sp, #4]
 8006ca6:	a902      	add	r1, sp, #8
 8006ca8:	f002 fee4 	bl	8009a74 <_svfiprintf_r>
 8006cac:	9b02      	ldr	r3, [sp, #8]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	701a      	strb	r2, [r3, #0]
 8006cb2:	b01c      	add	sp, #112	; 0x70
 8006cb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006cb8:	b003      	add	sp, #12
 8006cba:	4770      	bx	lr
 8006cbc:	20000074 	.word	0x20000074
 8006cc0:	ffff0208 	.word	0xffff0208

08006cc4 <sulp>:
 8006cc4:	b570      	push	{r4, r5, r6, lr}
 8006cc6:	4604      	mov	r4, r0
 8006cc8:	460d      	mov	r5, r1
 8006cca:	ec45 4b10 	vmov	d0, r4, r5
 8006cce:	4616      	mov	r6, r2
 8006cd0:	f002 fc2e 	bl	8009530 <__ulp>
 8006cd4:	ec51 0b10 	vmov	r0, r1, d0
 8006cd8:	b17e      	cbz	r6, 8006cfa <sulp+0x36>
 8006cda:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006cde:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	dd09      	ble.n	8006cfa <sulp+0x36>
 8006ce6:	051b      	lsls	r3, r3, #20
 8006ce8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006cec:	2400      	movs	r4, #0
 8006cee:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006cf2:	4622      	mov	r2, r4
 8006cf4:	462b      	mov	r3, r5
 8006cf6:	f7f9 fc87 	bl	8000608 <__aeabi_dmul>
 8006cfa:	bd70      	pop	{r4, r5, r6, pc}
 8006cfc:	0000      	movs	r0, r0
	...

08006d00 <_strtod_l>:
 8006d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d04:	ed2d 8b02 	vpush	{d8}
 8006d08:	b09d      	sub	sp, #116	; 0x74
 8006d0a:	461f      	mov	r7, r3
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	9318      	str	r3, [sp, #96]	; 0x60
 8006d10:	4ba2      	ldr	r3, [pc, #648]	; (8006f9c <_strtod_l+0x29c>)
 8006d12:	9213      	str	r2, [sp, #76]	; 0x4c
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	9305      	str	r3, [sp, #20]
 8006d18:	4604      	mov	r4, r0
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	4688      	mov	r8, r1
 8006d1e:	f7f9 fa5f 	bl	80001e0 <strlen>
 8006d22:	f04f 0a00 	mov.w	sl, #0
 8006d26:	4605      	mov	r5, r0
 8006d28:	f04f 0b00 	mov.w	fp, #0
 8006d2c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006d30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006d32:	781a      	ldrb	r2, [r3, #0]
 8006d34:	2a2b      	cmp	r2, #43	; 0x2b
 8006d36:	d04e      	beq.n	8006dd6 <_strtod_l+0xd6>
 8006d38:	d83b      	bhi.n	8006db2 <_strtod_l+0xb2>
 8006d3a:	2a0d      	cmp	r2, #13
 8006d3c:	d834      	bhi.n	8006da8 <_strtod_l+0xa8>
 8006d3e:	2a08      	cmp	r2, #8
 8006d40:	d834      	bhi.n	8006dac <_strtod_l+0xac>
 8006d42:	2a00      	cmp	r2, #0
 8006d44:	d03e      	beq.n	8006dc4 <_strtod_l+0xc4>
 8006d46:	2300      	movs	r3, #0
 8006d48:	930a      	str	r3, [sp, #40]	; 0x28
 8006d4a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006d4c:	7833      	ldrb	r3, [r6, #0]
 8006d4e:	2b30      	cmp	r3, #48	; 0x30
 8006d50:	f040 80b0 	bne.w	8006eb4 <_strtod_l+0x1b4>
 8006d54:	7873      	ldrb	r3, [r6, #1]
 8006d56:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006d5a:	2b58      	cmp	r3, #88	; 0x58
 8006d5c:	d168      	bne.n	8006e30 <_strtod_l+0x130>
 8006d5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d60:	9301      	str	r3, [sp, #4]
 8006d62:	ab18      	add	r3, sp, #96	; 0x60
 8006d64:	9702      	str	r7, [sp, #8]
 8006d66:	9300      	str	r3, [sp, #0]
 8006d68:	4a8d      	ldr	r2, [pc, #564]	; (8006fa0 <_strtod_l+0x2a0>)
 8006d6a:	ab19      	add	r3, sp, #100	; 0x64
 8006d6c:	a917      	add	r1, sp, #92	; 0x5c
 8006d6e:	4620      	mov	r0, r4
 8006d70:	f001 fd38 	bl	80087e4 <__gethex>
 8006d74:	f010 0707 	ands.w	r7, r0, #7
 8006d78:	4605      	mov	r5, r0
 8006d7a:	d005      	beq.n	8006d88 <_strtod_l+0x88>
 8006d7c:	2f06      	cmp	r7, #6
 8006d7e:	d12c      	bne.n	8006dda <_strtod_l+0xda>
 8006d80:	3601      	adds	r6, #1
 8006d82:	2300      	movs	r3, #0
 8006d84:	9617      	str	r6, [sp, #92]	; 0x5c
 8006d86:	930a      	str	r3, [sp, #40]	; 0x28
 8006d88:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	f040 8590 	bne.w	80078b0 <_strtod_l+0xbb0>
 8006d90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d92:	b1eb      	cbz	r3, 8006dd0 <_strtod_l+0xd0>
 8006d94:	4652      	mov	r2, sl
 8006d96:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006d9a:	ec43 2b10 	vmov	d0, r2, r3
 8006d9e:	b01d      	add	sp, #116	; 0x74
 8006da0:	ecbd 8b02 	vpop	{d8}
 8006da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006da8:	2a20      	cmp	r2, #32
 8006daa:	d1cc      	bne.n	8006d46 <_strtod_l+0x46>
 8006dac:	3301      	adds	r3, #1
 8006dae:	9317      	str	r3, [sp, #92]	; 0x5c
 8006db0:	e7be      	b.n	8006d30 <_strtod_l+0x30>
 8006db2:	2a2d      	cmp	r2, #45	; 0x2d
 8006db4:	d1c7      	bne.n	8006d46 <_strtod_l+0x46>
 8006db6:	2201      	movs	r2, #1
 8006db8:	920a      	str	r2, [sp, #40]	; 0x28
 8006dba:	1c5a      	adds	r2, r3, #1
 8006dbc:	9217      	str	r2, [sp, #92]	; 0x5c
 8006dbe:	785b      	ldrb	r3, [r3, #1]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d1c2      	bne.n	8006d4a <_strtod_l+0x4a>
 8006dc4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006dc6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	f040 856e 	bne.w	80078ac <_strtod_l+0xbac>
 8006dd0:	4652      	mov	r2, sl
 8006dd2:	465b      	mov	r3, fp
 8006dd4:	e7e1      	b.n	8006d9a <_strtod_l+0x9a>
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	e7ee      	b.n	8006db8 <_strtod_l+0xb8>
 8006dda:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006ddc:	b13a      	cbz	r2, 8006dee <_strtod_l+0xee>
 8006dde:	2135      	movs	r1, #53	; 0x35
 8006de0:	a81a      	add	r0, sp, #104	; 0x68
 8006de2:	f002 fcb0 	bl	8009746 <__copybits>
 8006de6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006de8:	4620      	mov	r0, r4
 8006dea:	f002 f86f 	bl	8008ecc <_Bfree>
 8006dee:	3f01      	subs	r7, #1
 8006df0:	2f04      	cmp	r7, #4
 8006df2:	d806      	bhi.n	8006e02 <_strtod_l+0x102>
 8006df4:	e8df f007 	tbb	[pc, r7]
 8006df8:	1714030a 	.word	0x1714030a
 8006dfc:	0a          	.byte	0x0a
 8006dfd:	00          	.byte	0x00
 8006dfe:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8006e02:	0728      	lsls	r0, r5, #28
 8006e04:	d5c0      	bpl.n	8006d88 <_strtod_l+0x88>
 8006e06:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006e0a:	e7bd      	b.n	8006d88 <_strtod_l+0x88>
 8006e0c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006e10:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006e12:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006e16:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006e1a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006e1e:	e7f0      	b.n	8006e02 <_strtod_l+0x102>
 8006e20:	f8df b180 	ldr.w	fp, [pc, #384]	; 8006fa4 <_strtod_l+0x2a4>
 8006e24:	e7ed      	b.n	8006e02 <_strtod_l+0x102>
 8006e26:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006e2a:	f04f 3aff 	mov.w	sl, #4294967295
 8006e2e:	e7e8      	b.n	8006e02 <_strtod_l+0x102>
 8006e30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006e32:	1c5a      	adds	r2, r3, #1
 8006e34:	9217      	str	r2, [sp, #92]	; 0x5c
 8006e36:	785b      	ldrb	r3, [r3, #1]
 8006e38:	2b30      	cmp	r3, #48	; 0x30
 8006e3a:	d0f9      	beq.n	8006e30 <_strtod_l+0x130>
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d0a3      	beq.n	8006d88 <_strtod_l+0x88>
 8006e40:	2301      	movs	r3, #1
 8006e42:	f04f 0900 	mov.w	r9, #0
 8006e46:	9304      	str	r3, [sp, #16]
 8006e48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006e4a:	9308      	str	r3, [sp, #32]
 8006e4c:	f8cd 901c 	str.w	r9, [sp, #28]
 8006e50:	464f      	mov	r7, r9
 8006e52:	220a      	movs	r2, #10
 8006e54:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006e56:	7806      	ldrb	r6, [r0, #0]
 8006e58:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006e5c:	b2d9      	uxtb	r1, r3
 8006e5e:	2909      	cmp	r1, #9
 8006e60:	d92a      	bls.n	8006eb8 <_strtod_l+0x1b8>
 8006e62:	9905      	ldr	r1, [sp, #20]
 8006e64:	462a      	mov	r2, r5
 8006e66:	f002 ff1f 	bl	8009ca8 <strncmp>
 8006e6a:	b398      	cbz	r0, 8006ed4 <_strtod_l+0x1d4>
 8006e6c:	2000      	movs	r0, #0
 8006e6e:	4632      	mov	r2, r6
 8006e70:	463d      	mov	r5, r7
 8006e72:	9005      	str	r0, [sp, #20]
 8006e74:	4603      	mov	r3, r0
 8006e76:	2a65      	cmp	r2, #101	; 0x65
 8006e78:	d001      	beq.n	8006e7e <_strtod_l+0x17e>
 8006e7a:	2a45      	cmp	r2, #69	; 0x45
 8006e7c:	d118      	bne.n	8006eb0 <_strtod_l+0x1b0>
 8006e7e:	b91d      	cbnz	r5, 8006e88 <_strtod_l+0x188>
 8006e80:	9a04      	ldr	r2, [sp, #16]
 8006e82:	4302      	orrs	r2, r0
 8006e84:	d09e      	beq.n	8006dc4 <_strtod_l+0xc4>
 8006e86:	2500      	movs	r5, #0
 8006e88:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8006e8c:	f108 0201 	add.w	r2, r8, #1
 8006e90:	9217      	str	r2, [sp, #92]	; 0x5c
 8006e92:	f898 2001 	ldrb.w	r2, [r8, #1]
 8006e96:	2a2b      	cmp	r2, #43	; 0x2b
 8006e98:	d075      	beq.n	8006f86 <_strtod_l+0x286>
 8006e9a:	2a2d      	cmp	r2, #45	; 0x2d
 8006e9c:	d07b      	beq.n	8006f96 <_strtod_l+0x296>
 8006e9e:	f04f 0c00 	mov.w	ip, #0
 8006ea2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006ea6:	2909      	cmp	r1, #9
 8006ea8:	f240 8082 	bls.w	8006fb0 <_strtod_l+0x2b0>
 8006eac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006eb0:	2600      	movs	r6, #0
 8006eb2:	e09d      	b.n	8006ff0 <_strtod_l+0x2f0>
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	e7c4      	b.n	8006e42 <_strtod_l+0x142>
 8006eb8:	2f08      	cmp	r7, #8
 8006eba:	bfd8      	it	le
 8006ebc:	9907      	ldrle	r1, [sp, #28]
 8006ebe:	f100 0001 	add.w	r0, r0, #1
 8006ec2:	bfda      	itte	le
 8006ec4:	fb02 3301 	mlale	r3, r2, r1, r3
 8006ec8:	9307      	strle	r3, [sp, #28]
 8006eca:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006ece:	3701      	adds	r7, #1
 8006ed0:	9017      	str	r0, [sp, #92]	; 0x5c
 8006ed2:	e7bf      	b.n	8006e54 <_strtod_l+0x154>
 8006ed4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006ed6:	195a      	adds	r2, r3, r5
 8006ed8:	9217      	str	r2, [sp, #92]	; 0x5c
 8006eda:	5d5a      	ldrb	r2, [r3, r5]
 8006edc:	2f00      	cmp	r7, #0
 8006ede:	d037      	beq.n	8006f50 <_strtod_l+0x250>
 8006ee0:	9005      	str	r0, [sp, #20]
 8006ee2:	463d      	mov	r5, r7
 8006ee4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006ee8:	2b09      	cmp	r3, #9
 8006eea:	d912      	bls.n	8006f12 <_strtod_l+0x212>
 8006eec:	2301      	movs	r3, #1
 8006eee:	e7c2      	b.n	8006e76 <_strtod_l+0x176>
 8006ef0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006ef2:	1c5a      	adds	r2, r3, #1
 8006ef4:	9217      	str	r2, [sp, #92]	; 0x5c
 8006ef6:	785a      	ldrb	r2, [r3, #1]
 8006ef8:	3001      	adds	r0, #1
 8006efa:	2a30      	cmp	r2, #48	; 0x30
 8006efc:	d0f8      	beq.n	8006ef0 <_strtod_l+0x1f0>
 8006efe:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006f02:	2b08      	cmp	r3, #8
 8006f04:	f200 84d9 	bhi.w	80078ba <_strtod_l+0xbba>
 8006f08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006f0a:	9005      	str	r0, [sp, #20]
 8006f0c:	2000      	movs	r0, #0
 8006f0e:	9308      	str	r3, [sp, #32]
 8006f10:	4605      	mov	r5, r0
 8006f12:	3a30      	subs	r2, #48	; 0x30
 8006f14:	f100 0301 	add.w	r3, r0, #1
 8006f18:	d014      	beq.n	8006f44 <_strtod_l+0x244>
 8006f1a:	9905      	ldr	r1, [sp, #20]
 8006f1c:	4419      	add	r1, r3
 8006f1e:	9105      	str	r1, [sp, #20]
 8006f20:	462b      	mov	r3, r5
 8006f22:	eb00 0e05 	add.w	lr, r0, r5
 8006f26:	210a      	movs	r1, #10
 8006f28:	4573      	cmp	r3, lr
 8006f2a:	d113      	bne.n	8006f54 <_strtod_l+0x254>
 8006f2c:	182b      	adds	r3, r5, r0
 8006f2e:	2b08      	cmp	r3, #8
 8006f30:	f105 0501 	add.w	r5, r5, #1
 8006f34:	4405      	add	r5, r0
 8006f36:	dc1c      	bgt.n	8006f72 <_strtod_l+0x272>
 8006f38:	9907      	ldr	r1, [sp, #28]
 8006f3a:	230a      	movs	r3, #10
 8006f3c:	fb03 2301 	mla	r3, r3, r1, r2
 8006f40:	9307      	str	r3, [sp, #28]
 8006f42:	2300      	movs	r3, #0
 8006f44:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006f46:	1c51      	adds	r1, r2, #1
 8006f48:	9117      	str	r1, [sp, #92]	; 0x5c
 8006f4a:	7852      	ldrb	r2, [r2, #1]
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	e7c9      	b.n	8006ee4 <_strtod_l+0x1e4>
 8006f50:	4638      	mov	r0, r7
 8006f52:	e7d2      	b.n	8006efa <_strtod_l+0x1fa>
 8006f54:	2b08      	cmp	r3, #8
 8006f56:	dc04      	bgt.n	8006f62 <_strtod_l+0x262>
 8006f58:	9e07      	ldr	r6, [sp, #28]
 8006f5a:	434e      	muls	r6, r1
 8006f5c:	9607      	str	r6, [sp, #28]
 8006f5e:	3301      	adds	r3, #1
 8006f60:	e7e2      	b.n	8006f28 <_strtod_l+0x228>
 8006f62:	f103 0c01 	add.w	ip, r3, #1
 8006f66:	f1bc 0f10 	cmp.w	ip, #16
 8006f6a:	bfd8      	it	le
 8006f6c:	fb01 f909 	mulle.w	r9, r1, r9
 8006f70:	e7f5      	b.n	8006f5e <_strtod_l+0x25e>
 8006f72:	2d10      	cmp	r5, #16
 8006f74:	bfdc      	itt	le
 8006f76:	230a      	movle	r3, #10
 8006f78:	fb03 2909 	mlale	r9, r3, r9, r2
 8006f7c:	e7e1      	b.n	8006f42 <_strtod_l+0x242>
 8006f7e:	2300      	movs	r3, #0
 8006f80:	9305      	str	r3, [sp, #20]
 8006f82:	2301      	movs	r3, #1
 8006f84:	e77c      	b.n	8006e80 <_strtod_l+0x180>
 8006f86:	f04f 0c00 	mov.w	ip, #0
 8006f8a:	f108 0202 	add.w	r2, r8, #2
 8006f8e:	9217      	str	r2, [sp, #92]	; 0x5c
 8006f90:	f898 2002 	ldrb.w	r2, [r8, #2]
 8006f94:	e785      	b.n	8006ea2 <_strtod_l+0x1a2>
 8006f96:	f04f 0c01 	mov.w	ip, #1
 8006f9a:	e7f6      	b.n	8006f8a <_strtod_l+0x28a>
 8006f9c:	0800c0e8 	.word	0x0800c0e8
 8006fa0:	0800bea0 	.word	0x0800bea0
 8006fa4:	7ff00000 	.word	0x7ff00000
 8006fa8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006faa:	1c51      	adds	r1, r2, #1
 8006fac:	9117      	str	r1, [sp, #92]	; 0x5c
 8006fae:	7852      	ldrb	r2, [r2, #1]
 8006fb0:	2a30      	cmp	r2, #48	; 0x30
 8006fb2:	d0f9      	beq.n	8006fa8 <_strtod_l+0x2a8>
 8006fb4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006fb8:	2908      	cmp	r1, #8
 8006fba:	f63f af79 	bhi.w	8006eb0 <_strtod_l+0x1b0>
 8006fbe:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006fc2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006fc4:	9206      	str	r2, [sp, #24]
 8006fc6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006fc8:	1c51      	adds	r1, r2, #1
 8006fca:	9117      	str	r1, [sp, #92]	; 0x5c
 8006fcc:	7852      	ldrb	r2, [r2, #1]
 8006fce:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8006fd2:	2e09      	cmp	r6, #9
 8006fd4:	d937      	bls.n	8007046 <_strtod_l+0x346>
 8006fd6:	9e06      	ldr	r6, [sp, #24]
 8006fd8:	1b89      	subs	r1, r1, r6
 8006fda:	2908      	cmp	r1, #8
 8006fdc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006fe0:	dc02      	bgt.n	8006fe8 <_strtod_l+0x2e8>
 8006fe2:	4576      	cmp	r6, lr
 8006fe4:	bfa8      	it	ge
 8006fe6:	4676      	movge	r6, lr
 8006fe8:	f1bc 0f00 	cmp.w	ip, #0
 8006fec:	d000      	beq.n	8006ff0 <_strtod_l+0x2f0>
 8006fee:	4276      	negs	r6, r6
 8006ff0:	2d00      	cmp	r5, #0
 8006ff2:	d14d      	bne.n	8007090 <_strtod_l+0x390>
 8006ff4:	9904      	ldr	r1, [sp, #16]
 8006ff6:	4301      	orrs	r1, r0
 8006ff8:	f47f aec6 	bne.w	8006d88 <_strtod_l+0x88>
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	f47f aee1 	bne.w	8006dc4 <_strtod_l+0xc4>
 8007002:	2a69      	cmp	r2, #105	; 0x69
 8007004:	d027      	beq.n	8007056 <_strtod_l+0x356>
 8007006:	dc24      	bgt.n	8007052 <_strtod_l+0x352>
 8007008:	2a49      	cmp	r2, #73	; 0x49
 800700a:	d024      	beq.n	8007056 <_strtod_l+0x356>
 800700c:	2a4e      	cmp	r2, #78	; 0x4e
 800700e:	f47f aed9 	bne.w	8006dc4 <_strtod_l+0xc4>
 8007012:	499f      	ldr	r1, [pc, #636]	; (8007290 <_strtod_l+0x590>)
 8007014:	a817      	add	r0, sp, #92	; 0x5c
 8007016:	f001 fe3d 	bl	8008c94 <__match>
 800701a:	2800      	cmp	r0, #0
 800701c:	f43f aed2 	beq.w	8006dc4 <_strtod_l+0xc4>
 8007020:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	2b28      	cmp	r3, #40	; 0x28
 8007026:	d12d      	bne.n	8007084 <_strtod_l+0x384>
 8007028:	499a      	ldr	r1, [pc, #616]	; (8007294 <_strtod_l+0x594>)
 800702a:	aa1a      	add	r2, sp, #104	; 0x68
 800702c:	a817      	add	r0, sp, #92	; 0x5c
 800702e:	f001 fe45 	bl	8008cbc <__hexnan>
 8007032:	2805      	cmp	r0, #5
 8007034:	d126      	bne.n	8007084 <_strtod_l+0x384>
 8007036:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007038:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800703c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007040:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007044:	e6a0      	b.n	8006d88 <_strtod_l+0x88>
 8007046:	210a      	movs	r1, #10
 8007048:	fb01 2e0e 	mla	lr, r1, lr, r2
 800704c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007050:	e7b9      	b.n	8006fc6 <_strtod_l+0x2c6>
 8007052:	2a6e      	cmp	r2, #110	; 0x6e
 8007054:	e7db      	b.n	800700e <_strtod_l+0x30e>
 8007056:	4990      	ldr	r1, [pc, #576]	; (8007298 <_strtod_l+0x598>)
 8007058:	a817      	add	r0, sp, #92	; 0x5c
 800705a:	f001 fe1b 	bl	8008c94 <__match>
 800705e:	2800      	cmp	r0, #0
 8007060:	f43f aeb0 	beq.w	8006dc4 <_strtod_l+0xc4>
 8007064:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007066:	498d      	ldr	r1, [pc, #564]	; (800729c <_strtod_l+0x59c>)
 8007068:	3b01      	subs	r3, #1
 800706a:	a817      	add	r0, sp, #92	; 0x5c
 800706c:	9317      	str	r3, [sp, #92]	; 0x5c
 800706e:	f001 fe11 	bl	8008c94 <__match>
 8007072:	b910      	cbnz	r0, 800707a <_strtod_l+0x37a>
 8007074:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007076:	3301      	adds	r3, #1
 8007078:	9317      	str	r3, [sp, #92]	; 0x5c
 800707a:	f8df b230 	ldr.w	fp, [pc, #560]	; 80072ac <_strtod_l+0x5ac>
 800707e:	f04f 0a00 	mov.w	sl, #0
 8007082:	e681      	b.n	8006d88 <_strtod_l+0x88>
 8007084:	4886      	ldr	r0, [pc, #536]	; (80072a0 <_strtod_l+0x5a0>)
 8007086:	f002 fdf7 	bl	8009c78 <nan>
 800708a:	ec5b ab10 	vmov	sl, fp, d0
 800708e:	e67b      	b.n	8006d88 <_strtod_l+0x88>
 8007090:	9b05      	ldr	r3, [sp, #20]
 8007092:	9807      	ldr	r0, [sp, #28]
 8007094:	1af3      	subs	r3, r6, r3
 8007096:	2f00      	cmp	r7, #0
 8007098:	bf08      	it	eq
 800709a:	462f      	moveq	r7, r5
 800709c:	2d10      	cmp	r5, #16
 800709e:	9306      	str	r3, [sp, #24]
 80070a0:	46a8      	mov	r8, r5
 80070a2:	bfa8      	it	ge
 80070a4:	f04f 0810 	movge.w	r8, #16
 80070a8:	f7f9 fa34 	bl	8000514 <__aeabi_ui2d>
 80070ac:	2d09      	cmp	r5, #9
 80070ae:	4682      	mov	sl, r0
 80070b0:	468b      	mov	fp, r1
 80070b2:	dd13      	ble.n	80070dc <_strtod_l+0x3dc>
 80070b4:	4b7b      	ldr	r3, [pc, #492]	; (80072a4 <_strtod_l+0x5a4>)
 80070b6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80070ba:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80070be:	f7f9 faa3 	bl	8000608 <__aeabi_dmul>
 80070c2:	4682      	mov	sl, r0
 80070c4:	4648      	mov	r0, r9
 80070c6:	468b      	mov	fp, r1
 80070c8:	f7f9 fa24 	bl	8000514 <__aeabi_ui2d>
 80070cc:	4602      	mov	r2, r0
 80070ce:	460b      	mov	r3, r1
 80070d0:	4650      	mov	r0, sl
 80070d2:	4659      	mov	r1, fp
 80070d4:	f7f9 f8e2 	bl	800029c <__adddf3>
 80070d8:	4682      	mov	sl, r0
 80070da:	468b      	mov	fp, r1
 80070dc:	2d0f      	cmp	r5, #15
 80070de:	dc38      	bgt.n	8007152 <_strtod_l+0x452>
 80070e0:	9b06      	ldr	r3, [sp, #24]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	f43f ae50 	beq.w	8006d88 <_strtod_l+0x88>
 80070e8:	dd24      	ble.n	8007134 <_strtod_l+0x434>
 80070ea:	2b16      	cmp	r3, #22
 80070ec:	dc0b      	bgt.n	8007106 <_strtod_l+0x406>
 80070ee:	496d      	ldr	r1, [pc, #436]	; (80072a4 <_strtod_l+0x5a4>)
 80070f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80070f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070f8:	4652      	mov	r2, sl
 80070fa:	465b      	mov	r3, fp
 80070fc:	f7f9 fa84 	bl	8000608 <__aeabi_dmul>
 8007100:	4682      	mov	sl, r0
 8007102:	468b      	mov	fp, r1
 8007104:	e640      	b.n	8006d88 <_strtod_l+0x88>
 8007106:	9a06      	ldr	r2, [sp, #24]
 8007108:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800710c:	4293      	cmp	r3, r2
 800710e:	db20      	blt.n	8007152 <_strtod_l+0x452>
 8007110:	4c64      	ldr	r4, [pc, #400]	; (80072a4 <_strtod_l+0x5a4>)
 8007112:	f1c5 050f 	rsb	r5, r5, #15
 8007116:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800711a:	4652      	mov	r2, sl
 800711c:	465b      	mov	r3, fp
 800711e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007122:	f7f9 fa71 	bl	8000608 <__aeabi_dmul>
 8007126:	9b06      	ldr	r3, [sp, #24]
 8007128:	1b5d      	subs	r5, r3, r5
 800712a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800712e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007132:	e7e3      	b.n	80070fc <_strtod_l+0x3fc>
 8007134:	9b06      	ldr	r3, [sp, #24]
 8007136:	3316      	adds	r3, #22
 8007138:	db0b      	blt.n	8007152 <_strtod_l+0x452>
 800713a:	9b05      	ldr	r3, [sp, #20]
 800713c:	1b9e      	subs	r6, r3, r6
 800713e:	4b59      	ldr	r3, [pc, #356]	; (80072a4 <_strtod_l+0x5a4>)
 8007140:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007144:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007148:	4650      	mov	r0, sl
 800714a:	4659      	mov	r1, fp
 800714c:	f7f9 fb86 	bl	800085c <__aeabi_ddiv>
 8007150:	e7d6      	b.n	8007100 <_strtod_l+0x400>
 8007152:	9b06      	ldr	r3, [sp, #24]
 8007154:	eba5 0808 	sub.w	r8, r5, r8
 8007158:	4498      	add	r8, r3
 800715a:	f1b8 0f00 	cmp.w	r8, #0
 800715e:	dd74      	ble.n	800724a <_strtod_l+0x54a>
 8007160:	f018 030f 	ands.w	r3, r8, #15
 8007164:	d00a      	beq.n	800717c <_strtod_l+0x47c>
 8007166:	494f      	ldr	r1, [pc, #316]	; (80072a4 <_strtod_l+0x5a4>)
 8007168:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800716c:	4652      	mov	r2, sl
 800716e:	465b      	mov	r3, fp
 8007170:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007174:	f7f9 fa48 	bl	8000608 <__aeabi_dmul>
 8007178:	4682      	mov	sl, r0
 800717a:	468b      	mov	fp, r1
 800717c:	f038 080f 	bics.w	r8, r8, #15
 8007180:	d04f      	beq.n	8007222 <_strtod_l+0x522>
 8007182:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007186:	dd22      	ble.n	80071ce <_strtod_l+0x4ce>
 8007188:	2500      	movs	r5, #0
 800718a:	462e      	mov	r6, r5
 800718c:	9507      	str	r5, [sp, #28]
 800718e:	9505      	str	r5, [sp, #20]
 8007190:	2322      	movs	r3, #34	; 0x22
 8007192:	f8df b118 	ldr.w	fp, [pc, #280]	; 80072ac <_strtod_l+0x5ac>
 8007196:	6023      	str	r3, [r4, #0]
 8007198:	f04f 0a00 	mov.w	sl, #0
 800719c:	9b07      	ldr	r3, [sp, #28]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	f43f adf2 	beq.w	8006d88 <_strtod_l+0x88>
 80071a4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80071a6:	4620      	mov	r0, r4
 80071a8:	f001 fe90 	bl	8008ecc <_Bfree>
 80071ac:	9905      	ldr	r1, [sp, #20]
 80071ae:	4620      	mov	r0, r4
 80071b0:	f001 fe8c 	bl	8008ecc <_Bfree>
 80071b4:	4631      	mov	r1, r6
 80071b6:	4620      	mov	r0, r4
 80071b8:	f001 fe88 	bl	8008ecc <_Bfree>
 80071bc:	9907      	ldr	r1, [sp, #28]
 80071be:	4620      	mov	r0, r4
 80071c0:	f001 fe84 	bl	8008ecc <_Bfree>
 80071c4:	4629      	mov	r1, r5
 80071c6:	4620      	mov	r0, r4
 80071c8:	f001 fe80 	bl	8008ecc <_Bfree>
 80071cc:	e5dc      	b.n	8006d88 <_strtod_l+0x88>
 80071ce:	4b36      	ldr	r3, [pc, #216]	; (80072a8 <_strtod_l+0x5a8>)
 80071d0:	9304      	str	r3, [sp, #16]
 80071d2:	2300      	movs	r3, #0
 80071d4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80071d8:	4650      	mov	r0, sl
 80071da:	4659      	mov	r1, fp
 80071dc:	4699      	mov	r9, r3
 80071de:	f1b8 0f01 	cmp.w	r8, #1
 80071e2:	dc21      	bgt.n	8007228 <_strtod_l+0x528>
 80071e4:	b10b      	cbz	r3, 80071ea <_strtod_l+0x4ea>
 80071e6:	4682      	mov	sl, r0
 80071e8:	468b      	mov	fp, r1
 80071ea:	4b2f      	ldr	r3, [pc, #188]	; (80072a8 <_strtod_l+0x5a8>)
 80071ec:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80071f0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80071f4:	4652      	mov	r2, sl
 80071f6:	465b      	mov	r3, fp
 80071f8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80071fc:	f7f9 fa04 	bl	8000608 <__aeabi_dmul>
 8007200:	4b2a      	ldr	r3, [pc, #168]	; (80072ac <_strtod_l+0x5ac>)
 8007202:	460a      	mov	r2, r1
 8007204:	400b      	ands	r3, r1
 8007206:	492a      	ldr	r1, [pc, #168]	; (80072b0 <_strtod_l+0x5b0>)
 8007208:	428b      	cmp	r3, r1
 800720a:	4682      	mov	sl, r0
 800720c:	d8bc      	bhi.n	8007188 <_strtod_l+0x488>
 800720e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007212:	428b      	cmp	r3, r1
 8007214:	bf86      	itte	hi
 8007216:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80072b4 <_strtod_l+0x5b4>
 800721a:	f04f 3aff 	movhi.w	sl, #4294967295
 800721e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007222:	2300      	movs	r3, #0
 8007224:	9304      	str	r3, [sp, #16]
 8007226:	e084      	b.n	8007332 <_strtod_l+0x632>
 8007228:	f018 0f01 	tst.w	r8, #1
 800722c:	d005      	beq.n	800723a <_strtod_l+0x53a>
 800722e:	9b04      	ldr	r3, [sp, #16]
 8007230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007234:	f7f9 f9e8 	bl	8000608 <__aeabi_dmul>
 8007238:	2301      	movs	r3, #1
 800723a:	9a04      	ldr	r2, [sp, #16]
 800723c:	3208      	adds	r2, #8
 800723e:	f109 0901 	add.w	r9, r9, #1
 8007242:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007246:	9204      	str	r2, [sp, #16]
 8007248:	e7c9      	b.n	80071de <_strtod_l+0x4de>
 800724a:	d0ea      	beq.n	8007222 <_strtod_l+0x522>
 800724c:	f1c8 0800 	rsb	r8, r8, #0
 8007250:	f018 020f 	ands.w	r2, r8, #15
 8007254:	d00a      	beq.n	800726c <_strtod_l+0x56c>
 8007256:	4b13      	ldr	r3, [pc, #76]	; (80072a4 <_strtod_l+0x5a4>)
 8007258:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800725c:	4650      	mov	r0, sl
 800725e:	4659      	mov	r1, fp
 8007260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007264:	f7f9 fafa 	bl	800085c <__aeabi_ddiv>
 8007268:	4682      	mov	sl, r0
 800726a:	468b      	mov	fp, r1
 800726c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007270:	d0d7      	beq.n	8007222 <_strtod_l+0x522>
 8007272:	f1b8 0f1f 	cmp.w	r8, #31
 8007276:	dd1f      	ble.n	80072b8 <_strtod_l+0x5b8>
 8007278:	2500      	movs	r5, #0
 800727a:	462e      	mov	r6, r5
 800727c:	9507      	str	r5, [sp, #28]
 800727e:	9505      	str	r5, [sp, #20]
 8007280:	2322      	movs	r3, #34	; 0x22
 8007282:	f04f 0a00 	mov.w	sl, #0
 8007286:	f04f 0b00 	mov.w	fp, #0
 800728a:	6023      	str	r3, [r4, #0]
 800728c:	e786      	b.n	800719c <_strtod_l+0x49c>
 800728e:	bf00      	nop
 8007290:	0800be71 	.word	0x0800be71
 8007294:	0800beb4 	.word	0x0800beb4
 8007298:	0800be69 	.word	0x0800be69
 800729c:	0800bff4 	.word	0x0800bff4
 80072a0:	0800c2a0 	.word	0x0800c2a0
 80072a4:	0800c180 	.word	0x0800c180
 80072a8:	0800c158 	.word	0x0800c158
 80072ac:	7ff00000 	.word	0x7ff00000
 80072b0:	7ca00000 	.word	0x7ca00000
 80072b4:	7fefffff 	.word	0x7fefffff
 80072b8:	f018 0310 	ands.w	r3, r8, #16
 80072bc:	bf18      	it	ne
 80072be:	236a      	movne	r3, #106	; 0x6a
 80072c0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007670 <_strtod_l+0x970>
 80072c4:	9304      	str	r3, [sp, #16]
 80072c6:	4650      	mov	r0, sl
 80072c8:	4659      	mov	r1, fp
 80072ca:	2300      	movs	r3, #0
 80072cc:	f018 0f01 	tst.w	r8, #1
 80072d0:	d004      	beq.n	80072dc <_strtod_l+0x5dc>
 80072d2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80072d6:	f7f9 f997 	bl	8000608 <__aeabi_dmul>
 80072da:	2301      	movs	r3, #1
 80072dc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80072e0:	f109 0908 	add.w	r9, r9, #8
 80072e4:	d1f2      	bne.n	80072cc <_strtod_l+0x5cc>
 80072e6:	b10b      	cbz	r3, 80072ec <_strtod_l+0x5ec>
 80072e8:	4682      	mov	sl, r0
 80072ea:	468b      	mov	fp, r1
 80072ec:	9b04      	ldr	r3, [sp, #16]
 80072ee:	b1c3      	cbz	r3, 8007322 <_strtod_l+0x622>
 80072f0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80072f4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	4659      	mov	r1, fp
 80072fc:	dd11      	ble.n	8007322 <_strtod_l+0x622>
 80072fe:	2b1f      	cmp	r3, #31
 8007300:	f340 8124 	ble.w	800754c <_strtod_l+0x84c>
 8007304:	2b34      	cmp	r3, #52	; 0x34
 8007306:	bfde      	ittt	le
 8007308:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800730c:	f04f 33ff 	movle.w	r3, #4294967295
 8007310:	fa03 f202 	lslle.w	r2, r3, r2
 8007314:	f04f 0a00 	mov.w	sl, #0
 8007318:	bfcc      	ite	gt
 800731a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800731e:	ea02 0b01 	andle.w	fp, r2, r1
 8007322:	2200      	movs	r2, #0
 8007324:	2300      	movs	r3, #0
 8007326:	4650      	mov	r0, sl
 8007328:	4659      	mov	r1, fp
 800732a:	f7f9 fbd5 	bl	8000ad8 <__aeabi_dcmpeq>
 800732e:	2800      	cmp	r0, #0
 8007330:	d1a2      	bne.n	8007278 <_strtod_l+0x578>
 8007332:	9b07      	ldr	r3, [sp, #28]
 8007334:	9300      	str	r3, [sp, #0]
 8007336:	9908      	ldr	r1, [sp, #32]
 8007338:	462b      	mov	r3, r5
 800733a:	463a      	mov	r2, r7
 800733c:	4620      	mov	r0, r4
 800733e:	f001 fe2d 	bl	8008f9c <__s2b>
 8007342:	9007      	str	r0, [sp, #28]
 8007344:	2800      	cmp	r0, #0
 8007346:	f43f af1f 	beq.w	8007188 <_strtod_l+0x488>
 800734a:	9b05      	ldr	r3, [sp, #20]
 800734c:	1b9e      	subs	r6, r3, r6
 800734e:	9b06      	ldr	r3, [sp, #24]
 8007350:	2b00      	cmp	r3, #0
 8007352:	bfb4      	ite	lt
 8007354:	4633      	movlt	r3, r6
 8007356:	2300      	movge	r3, #0
 8007358:	930c      	str	r3, [sp, #48]	; 0x30
 800735a:	9b06      	ldr	r3, [sp, #24]
 800735c:	2500      	movs	r5, #0
 800735e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007362:	9312      	str	r3, [sp, #72]	; 0x48
 8007364:	462e      	mov	r6, r5
 8007366:	9b07      	ldr	r3, [sp, #28]
 8007368:	4620      	mov	r0, r4
 800736a:	6859      	ldr	r1, [r3, #4]
 800736c:	f001 fd6e 	bl	8008e4c <_Balloc>
 8007370:	9005      	str	r0, [sp, #20]
 8007372:	2800      	cmp	r0, #0
 8007374:	f43f af0c 	beq.w	8007190 <_strtod_l+0x490>
 8007378:	9b07      	ldr	r3, [sp, #28]
 800737a:	691a      	ldr	r2, [r3, #16]
 800737c:	3202      	adds	r2, #2
 800737e:	f103 010c 	add.w	r1, r3, #12
 8007382:	0092      	lsls	r2, r2, #2
 8007384:	300c      	adds	r0, #12
 8007386:	f001 fd53 	bl	8008e30 <memcpy>
 800738a:	ec4b ab10 	vmov	d0, sl, fp
 800738e:	aa1a      	add	r2, sp, #104	; 0x68
 8007390:	a919      	add	r1, sp, #100	; 0x64
 8007392:	4620      	mov	r0, r4
 8007394:	f002 f948 	bl	8009628 <__d2b>
 8007398:	ec4b ab18 	vmov	d8, sl, fp
 800739c:	9018      	str	r0, [sp, #96]	; 0x60
 800739e:	2800      	cmp	r0, #0
 80073a0:	f43f aef6 	beq.w	8007190 <_strtod_l+0x490>
 80073a4:	2101      	movs	r1, #1
 80073a6:	4620      	mov	r0, r4
 80073a8:	f001 fe92 	bl	80090d0 <__i2b>
 80073ac:	4606      	mov	r6, r0
 80073ae:	2800      	cmp	r0, #0
 80073b0:	f43f aeee 	beq.w	8007190 <_strtod_l+0x490>
 80073b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80073b6:	9904      	ldr	r1, [sp, #16]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	bfab      	itete	ge
 80073bc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80073be:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80073c0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80073c2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80073c6:	bfac      	ite	ge
 80073c8:	eb03 0902 	addge.w	r9, r3, r2
 80073cc:	1ad7      	sublt	r7, r2, r3
 80073ce:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80073d0:	eba3 0801 	sub.w	r8, r3, r1
 80073d4:	4490      	add	r8, r2
 80073d6:	4ba1      	ldr	r3, [pc, #644]	; (800765c <_strtod_l+0x95c>)
 80073d8:	f108 38ff 	add.w	r8, r8, #4294967295
 80073dc:	4598      	cmp	r8, r3
 80073de:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80073e2:	f280 80c7 	bge.w	8007574 <_strtod_l+0x874>
 80073e6:	eba3 0308 	sub.w	r3, r3, r8
 80073ea:	2b1f      	cmp	r3, #31
 80073ec:	eba2 0203 	sub.w	r2, r2, r3
 80073f0:	f04f 0101 	mov.w	r1, #1
 80073f4:	f300 80b1 	bgt.w	800755a <_strtod_l+0x85a>
 80073f8:	fa01 f303 	lsl.w	r3, r1, r3
 80073fc:	930d      	str	r3, [sp, #52]	; 0x34
 80073fe:	2300      	movs	r3, #0
 8007400:	9308      	str	r3, [sp, #32]
 8007402:	eb09 0802 	add.w	r8, r9, r2
 8007406:	9b04      	ldr	r3, [sp, #16]
 8007408:	45c1      	cmp	r9, r8
 800740a:	4417      	add	r7, r2
 800740c:	441f      	add	r7, r3
 800740e:	464b      	mov	r3, r9
 8007410:	bfa8      	it	ge
 8007412:	4643      	movge	r3, r8
 8007414:	42bb      	cmp	r3, r7
 8007416:	bfa8      	it	ge
 8007418:	463b      	movge	r3, r7
 800741a:	2b00      	cmp	r3, #0
 800741c:	bfc2      	ittt	gt
 800741e:	eba8 0803 	subgt.w	r8, r8, r3
 8007422:	1aff      	subgt	r7, r7, r3
 8007424:	eba9 0903 	subgt.w	r9, r9, r3
 8007428:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800742a:	2b00      	cmp	r3, #0
 800742c:	dd17      	ble.n	800745e <_strtod_l+0x75e>
 800742e:	4631      	mov	r1, r6
 8007430:	461a      	mov	r2, r3
 8007432:	4620      	mov	r0, r4
 8007434:	f001 ff0c 	bl	8009250 <__pow5mult>
 8007438:	4606      	mov	r6, r0
 800743a:	2800      	cmp	r0, #0
 800743c:	f43f aea8 	beq.w	8007190 <_strtod_l+0x490>
 8007440:	4601      	mov	r1, r0
 8007442:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007444:	4620      	mov	r0, r4
 8007446:	f001 fe59 	bl	80090fc <__multiply>
 800744a:	900b      	str	r0, [sp, #44]	; 0x2c
 800744c:	2800      	cmp	r0, #0
 800744e:	f43f ae9f 	beq.w	8007190 <_strtod_l+0x490>
 8007452:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007454:	4620      	mov	r0, r4
 8007456:	f001 fd39 	bl	8008ecc <_Bfree>
 800745a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800745c:	9318      	str	r3, [sp, #96]	; 0x60
 800745e:	f1b8 0f00 	cmp.w	r8, #0
 8007462:	f300 808c 	bgt.w	800757e <_strtod_l+0x87e>
 8007466:	9b06      	ldr	r3, [sp, #24]
 8007468:	2b00      	cmp	r3, #0
 800746a:	dd08      	ble.n	800747e <_strtod_l+0x77e>
 800746c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800746e:	9905      	ldr	r1, [sp, #20]
 8007470:	4620      	mov	r0, r4
 8007472:	f001 feed 	bl	8009250 <__pow5mult>
 8007476:	9005      	str	r0, [sp, #20]
 8007478:	2800      	cmp	r0, #0
 800747a:	f43f ae89 	beq.w	8007190 <_strtod_l+0x490>
 800747e:	2f00      	cmp	r7, #0
 8007480:	dd08      	ble.n	8007494 <_strtod_l+0x794>
 8007482:	9905      	ldr	r1, [sp, #20]
 8007484:	463a      	mov	r2, r7
 8007486:	4620      	mov	r0, r4
 8007488:	f001 ff3c 	bl	8009304 <__lshift>
 800748c:	9005      	str	r0, [sp, #20]
 800748e:	2800      	cmp	r0, #0
 8007490:	f43f ae7e 	beq.w	8007190 <_strtod_l+0x490>
 8007494:	f1b9 0f00 	cmp.w	r9, #0
 8007498:	dd08      	ble.n	80074ac <_strtod_l+0x7ac>
 800749a:	4631      	mov	r1, r6
 800749c:	464a      	mov	r2, r9
 800749e:	4620      	mov	r0, r4
 80074a0:	f001 ff30 	bl	8009304 <__lshift>
 80074a4:	4606      	mov	r6, r0
 80074a6:	2800      	cmp	r0, #0
 80074a8:	f43f ae72 	beq.w	8007190 <_strtod_l+0x490>
 80074ac:	9a05      	ldr	r2, [sp, #20]
 80074ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 80074b0:	4620      	mov	r0, r4
 80074b2:	f001 ffb3 	bl	800941c <__mdiff>
 80074b6:	4605      	mov	r5, r0
 80074b8:	2800      	cmp	r0, #0
 80074ba:	f43f ae69 	beq.w	8007190 <_strtod_l+0x490>
 80074be:	68c3      	ldr	r3, [r0, #12]
 80074c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80074c2:	2300      	movs	r3, #0
 80074c4:	60c3      	str	r3, [r0, #12]
 80074c6:	4631      	mov	r1, r6
 80074c8:	f001 ff8c 	bl	80093e4 <__mcmp>
 80074cc:	2800      	cmp	r0, #0
 80074ce:	da60      	bge.n	8007592 <_strtod_l+0x892>
 80074d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074d2:	ea53 030a 	orrs.w	r3, r3, sl
 80074d6:	f040 8082 	bne.w	80075de <_strtod_l+0x8de>
 80074da:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d17d      	bne.n	80075de <_strtod_l+0x8de>
 80074e2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80074e6:	0d1b      	lsrs	r3, r3, #20
 80074e8:	051b      	lsls	r3, r3, #20
 80074ea:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80074ee:	d976      	bls.n	80075de <_strtod_l+0x8de>
 80074f0:	696b      	ldr	r3, [r5, #20]
 80074f2:	b913      	cbnz	r3, 80074fa <_strtod_l+0x7fa>
 80074f4:	692b      	ldr	r3, [r5, #16]
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	dd71      	ble.n	80075de <_strtod_l+0x8de>
 80074fa:	4629      	mov	r1, r5
 80074fc:	2201      	movs	r2, #1
 80074fe:	4620      	mov	r0, r4
 8007500:	f001 ff00 	bl	8009304 <__lshift>
 8007504:	4631      	mov	r1, r6
 8007506:	4605      	mov	r5, r0
 8007508:	f001 ff6c 	bl	80093e4 <__mcmp>
 800750c:	2800      	cmp	r0, #0
 800750e:	dd66      	ble.n	80075de <_strtod_l+0x8de>
 8007510:	9904      	ldr	r1, [sp, #16]
 8007512:	4a53      	ldr	r2, [pc, #332]	; (8007660 <_strtod_l+0x960>)
 8007514:	465b      	mov	r3, fp
 8007516:	2900      	cmp	r1, #0
 8007518:	f000 8081 	beq.w	800761e <_strtod_l+0x91e>
 800751c:	ea02 010b 	and.w	r1, r2, fp
 8007520:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007524:	dc7b      	bgt.n	800761e <_strtod_l+0x91e>
 8007526:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800752a:	f77f aea9 	ble.w	8007280 <_strtod_l+0x580>
 800752e:	4b4d      	ldr	r3, [pc, #308]	; (8007664 <_strtod_l+0x964>)
 8007530:	4650      	mov	r0, sl
 8007532:	4659      	mov	r1, fp
 8007534:	2200      	movs	r2, #0
 8007536:	f7f9 f867 	bl	8000608 <__aeabi_dmul>
 800753a:	460b      	mov	r3, r1
 800753c:	4303      	orrs	r3, r0
 800753e:	bf08      	it	eq
 8007540:	2322      	moveq	r3, #34	; 0x22
 8007542:	4682      	mov	sl, r0
 8007544:	468b      	mov	fp, r1
 8007546:	bf08      	it	eq
 8007548:	6023      	streq	r3, [r4, #0]
 800754a:	e62b      	b.n	80071a4 <_strtod_l+0x4a4>
 800754c:	f04f 32ff 	mov.w	r2, #4294967295
 8007550:	fa02 f303 	lsl.w	r3, r2, r3
 8007554:	ea03 0a0a 	and.w	sl, r3, sl
 8007558:	e6e3      	b.n	8007322 <_strtod_l+0x622>
 800755a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800755e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007562:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007566:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800756a:	fa01 f308 	lsl.w	r3, r1, r8
 800756e:	9308      	str	r3, [sp, #32]
 8007570:	910d      	str	r1, [sp, #52]	; 0x34
 8007572:	e746      	b.n	8007402 <_strtod_l+0x702>
 8007574:	2300      	movs	r3, #0
 8007576:	9308      	str	r3, [sp, #32]
 8007578:	2301      	movs	r3, #1
 800757a:	930d      	str	r3, [sp, #52]	; 0x34
 800757c:	e741      	b.n	8007402 <_strtod_l+0x702>
 800757e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007580:	4642      	mov	r2, r8
 8007582:	4620      	mov	r0, r4
 8007584:	f001 febe 	bl	8009304 <__lshift>
 8007588:	9018      	str	r0, [sp, #96]	; 0x60
 800758a:	2800      	cmp	r0, #0
 800758c:	f47f af6b 	bne.w	8007466 <_strtod_l+0x766>
 8007590:	e5fe      	b.n	8007190 <_strtod_l+0x490>
 8007592:	465f      	mov	r7, fp
 8007594:	d16e      	bne.n	8007674 <_strtod_l+0x974>
 8007596:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007598:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800759c:	b342      	cbz	r2, 80075f0 <_strtod_l+0x8f0>
 800759e:	4a32      	ldr	r2, [pc, #200]	; (8007668 <_strtod_l+0x968>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d128      	bne.n	80075f6 <_strtod_l+0x8f6>
 80075a4:	9b04      	ldr	r3, [sp, #16]
 80075a6:	4651      	mov	r1, sl
 80075a8:	b1eb      	cbz	r3, 80075e6 <_strtod_l+0x8e6>
 80075aa:	4b2d      	ldr	r3, [pc, #180]	; (8007660 <_strtod_l+0x960>)
 80075ac:	403b      	ands	r3, r7
 80075ae:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80075b2:	f04f 32ff 	mov.w	r2, #4294967295
 80075b6:	d819      	bhi.n	80075ec <_strtod_l+0x8ec>
 80075b8:	0d1b      	lsrs	r3, r3, #20
 80075ba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80075be:	fa02 f303 	lsl.w	r3, r2, r3
 80075c2:	4299      	cmp	r1, r3
 80075c4:	d117      	bne.n	80075f6 <_strtod_l+0x8f6>
 80075c6:	4b29      	ldr	r3, [pc, #164]	; (800766c <_strtod_l+0x96c>)
 80075c8:	429f      	cmp	r7, r3
 80075ca:	d102      	bne.n	80075d2 <_strtod_l+0x8d2>
 80075cc:	3101      	adds	r1, #1
 80075ce:	f43f addf 	beq.w	8007190 <_strtod_l+0x490>
 80075d2:	4b23      	ldr	r3, [pc, #140]	; (8007660 <_strtod_l+0x960>)
 80075d4:	403b      	ands	r3, r7
 80075d6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80075da:	f04f 0a00 	mov.w	sl, #0
 80075de:	9b04      	ldr	r3, [sp, #16]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d1a4      	bne.n	800752e <_strtod_l+0x82e>
 80075e4:	e5de      	b.n	80071a4 <_strtod_l+0x4a4>
 80075e6:	f04f 33ff 	mov.w	r3, #4294967295
 80075ea:	e7ea      	b.n	80075c2 <_strtod_l+0x8c2>
 80075ec:	4613      	mov	r3, r2
 80075ee:	e7e8      	b.n	80075c2 <_strtod_l+0x8c2>
 80075f0:	ea53 030a 	orrs.w	r3, r3, sl
 80075f4:	d08c      	beq.n	8007510 <_strtod_l+0x810>
 80075f6:	9b08      	ldr	r3, [sp, #32]
 80075f8:	b1db      	cbz	r3, 8007632 <_strtod_l+0x932>
 80075fa:	423b      	tst	r3, r7
 80075fc:	d0ef      	beq.n	80075de <_strtod_l+0x8de>
 80075fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007600:	9a04      	ldr	r2, [sp, #16]
 8007602:	4650      	mov	r0, sl
 8007604:	4659      	mov	r1, fp
 8007606:	b1c3      	cbz	r3, 800763a <_strtod_l+0x93a>
 8007608:	f7ff fb5c 	bl	8006cc4 <sulp>
 800760c:	4602      	mov	r2, r0
 800760e:	460b      	mov	r3, r1
 8007610:	ec51 0b18 	vmov	r0, r1, d8
 8007614:	f7f8 fe42 	bl	800029c <__adddf3>
 8007618:	4682      	mov	sl, r0
 800761a:	468b      	mov	fp, r1
 800761c:	e7df      	b.n	80075de <_strtod_l+0x8de>
 800761e:	4013      	ands	r3, r2
 8007620:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007624:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007628:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800762c:	f04f 3aff 	mov.w	sl, #4294967295
 8007630:	e7d5      	b.n	80075de <_strtod_l+0x8de>
 8007632:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007634:	ea13 0f0a 	tst.w	r3, sl
 8007638:	e7e0      	b.n	80075fc <_strtod_l+0x8fc>
 800763a:	f7ff fb43 	bl	8006cc4 <sulp>
 800763e:	4602      	mov	r2, r0
 8007640:	460b      	mov	r3, r1
 8007642:	ec51 0b18 	vmov	r0, r1, d8
 8007646:	f7f8 fe27 	bl	8000298 <__aeabi_dsub>
 800764a:	2200      	movs	r2, #0
 800764c:	2300      	movs	r3, #0
 800764e:	4682      	mov	sl, r0
 8007650:	468b      	mov	fp, r1
 8007652:	f7f9 fa41 	bl	8000ad8 <__aeabi_dcmpeq>
 8007656:	2800      	cmp	r0, #0
 8007658:	d0c1      	beq.n	80075de <_strtod_l+0x8de>
 800765a:	e611      	b.n	8007280 <_strtod_l+0x580>
 800765c:	fffffc02 	.word	0xfffffc02
 8007660:	7ff00000 	.word	0x7ff00000
 8007664:	39500000 	.word	0x39500000
 8007668:	000fffff 	.word	0x000fffff
 800766c:	7fefffff 	.word	0x7fefffff
 8007670:	0800bec8 	.word	0x0800bec8
 8007674:	4631      	mov	r1, r6
 8007676:	4628      	mov	r0, r5
 8007678:	f002 f832 	bl	80096e0 <__ratio>
 800767c:	ec59 8b10 	vmov	r8, r9, d0
 8007680:	ee10 0a10 	vmov	r0, s0
 8007684:	2200      	movs	r2, #0
 8007686:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800768a:	4649      	mov	r1, r9
 800768c:	f7f9 fa38 	bl	8000b00 <__aeabi_dcmple>
 8007690:	2800      	cmp	r0, #0
 8007692:	d07a      	beq.n	800778a <_strtod_l+0xa8a>
 8007694:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007696:	2b00      	cmp	r3, #0
 8007698:	d04a      	beq.n	8007730 <_strtod_l+0xa30>
 800769a:	4b95      	ldr	r3, [pc, #596]	; (80078f0 <_strtod_l+0xbf0>)
 800769c:	2200      	movs	r2, #0
 800769e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80076a2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80078f0 <_strtod_l+0xbf0>
 80076a6:	f04f 0800 	mov.w	r8, #0
 80076aa:	4b92      	ldr	r3, [pc, #584]	; (80078f4 <_strtod_l+0xbf4>)
 80076ac:	403b      	ands	r3, r7
 80076ae:	930d      	str	r3, [sp, #52]	; 0x34
 80076b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80076b2:	4b91      	ldr	r3, [pc, #580]	; (80078f8 <_strtod_l+0xbf8>)
 80076b4:	429a      	cmp	r2, r3
 80076b6:	f040 80b0 	bne.w	800781a <_strtod_l+0xb1a>
 80076ba:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80076be:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80076c2:	ec4b ab10 	vmov	d0, sl, fp
 80076c6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80076ca:	f001 ff31 	bl	8009530 <__ulp>
 80076ce:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80076d2:	ec53 2b10 	vmov	r2, r3, d0
 80076d6:	f7f8 ff97 	bl	8000608 <__aeabi_dmul>
 80076da:	4652      	mov	r2, sl
 80076dc:	465b      	mov	r3, fp
 80076de:	f7f8 fddd 	bl	800029c <__adddf3>
 80076e2:	460b      	mov	r3, r1
 80076e4:	4983      	ldr	r1, [pc, #524]	; (80078f4 <_strtod_l+0xbf4>)
 80076e6:	4a85      	ldr	r2, [pc, #532]	; (80078fc <_strtod_l+0xbfc>)
 80076e8:	4019      	ands	r1, r3
 80076ea:	4291      	cmp	r1, r2
 80076ec:	4682      	mov	sl, r0
 80076ee:	d960      	bls.n	80077b2 <_strtod_l+0xab2>
 80076f0:	ee18 3a90 	vmov	r3, s17
 80076f4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d104      	bne.n	8007706 <_strtod_l+0xa06>
 80076fc:	ee18 3a10 	vmov	r3, s16
 8007700:	3301      	adds	r3, #1
 8007702:	f43f ad45 	beq.w	8007190 <_strtod_l+0x490>
 8007706:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007908 <_strtod_l+0xc08>
 800770a:	f04f 3aff 	mov.w	sl, #4294967295
 800770e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007710:	4620      	mov	r0, r4
 8007712:	f001 fbdb 	bl	8008ecc <_Bfree>
 8007716:	9905      	ldr	r1, [sp, #20]
 8007718:	4620      	mov	r0, r4
 800771a:	f001 fbd7 	bl	8008ecc <_Bfree>
 800771e:	4631      	mov	r1, r6
 8007720:	4620      	mov	r0, r4
 8007722:	f001 fbd3 	bl	8008ecc <_Bfree>
 8007726:	4629      	mov	r1, r5
 8007728:	4620      	mov	r0, r4
 800772a:	f001 fbcf 	bl	8008ecc <_Bfree>
 800772e:	e61a      	b.n	8007366 <_strtod_l+0x666>
 8007730:	f1ba 0f00 	cmp.w	sl, #0
 8007734:	d11b      	bne.n	800776e <_strtod_l+0xa6e>
 8007736:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800773a:	b9f3      	cbnz	r3, 800777a <_strtod_l+0xa7a>
 800773c:	4b6c      	ldr	r3, [pc, #432]	; (80078f0 <_strtod_l+0xbf0>)
 800773e:	2200      	movs	r2, #0
 8007740:	4640      	mov	r0, r8
 8007742:	4649      	mov	r1, r9
 8007744:	f7f9 f9d2 	bl	8000aec <__aeabi_dcmplt>
 8007748:	b9d0      	cbnz	r0, 8007780 <_strtod_l+0xa80>
 800774a:	4640      	mov	r0, r8
 800774c:	4649      	mov	r1, r9
 800774e:	4b6c      	ldr	r3, [pc, #432]	; (8007900 <_strtod_l+0xc00>)
 8007750:	2200      	movs	r2, #0
 8007752:	f7f8 ff59 	bl	8000608 <__aeabi_dmul>
 8007756:	4680      	mov	r8, r0
 8007758:	4689      	mov	r9, r1
 800775a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800775e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8007762:	9315      	str	r3, [sp, #84]	; 0x54
 8007764:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007768:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800776c:	e79d      	b.n	80076aa <_strtod_l+0x9aa>
 800776e:	f1ba 0f01 	cmp.w	sl, #1
 8007772:	d102      	bne.n	800777a <_strtod_l+0xa7a>
 8007774:	2f00      	cmp	r7, #0
 8007776:	f43f ad83 	beq.w	8007280 <_strtod_l+0x580>
 800777a:	4b62      	ldr	r3, [pc, #392]	; (8007904 <_strtod_l+0xc04>)
 800777c:	2200      	movs	r2, #0
 800777e:	e78e      	b.n	800769e <_strtod_l+0x99e>
 8007780:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007900 <_strtod_l+0xc00>
 8007784:	f04f 0800 	mov.w	r8, #0
 8007788:	e7e7      	b.n	800775a <_strtod_l+0xa5a>
 800778a:	4b5d      	ldr	r3, [pc, #372]	; (8007900 <_strtod_l+0xc00>)
 800778c:	4640      	mov	r0, r8
 800778e:	4649      	mov	r1, r9
 8007790:	2200      	movs	r2, #0
 8007792:	f7f8 ff39 	bl	8000608 <__aeabi_dmul>
 8007796:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007798:	4680      	mov	r8, r0
 800779a:	4689      	mov	r9, r1
 800779c:	b933      	cbnz	r3, 80077ac <_strtod_l+0xaac>
 800779e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80077a2:	900e      	str	r0, [sp, #56]	; 0x38
 80077a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80077a6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80077aa:	e7dd      	b.n	8007768 <_strtod_l+0xa68>
 80077ac:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80077b0:	e7f9      	b.n	80077a6 <_strtod_l+0xaa6>
 80077b2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80077b6:	9b04      	ldr	r3, [sp, #16]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d1a8      	bne.n	800770e <_strtod_l+0xa0e>
 80077bc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80077c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80077c2:	0d1b      	lsrs	r3, r3, #20
 80077c4:	051b      	lsls	r3, r3, #20
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d1a1      	bne.n	800770e <_strtod_l+0xa0e>
 80077ca:	4640      	mov	r0, r8
 80077cc:	4649      	mov	r1, r9
 80077ce:	f7f9 fa7b 	bl	8000cc8 <__aeabi_d2lz>
 80077d2:	f7f8 feeb 	bl	80005ac <__aeabi_l2d>
 80077d6:	4602      	mov	r2, r0
 80077d8:	460b      	mov	r3, r1
 80077da:	4640      	mov	r0, r8
 80077dc:	4649      	mov	r1, r9
 80077de:	f7f8 fd5b 	bl	8000298 <__aeabi_dsub>
 80077e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80077e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80077e8:	ea43 030a 	orr.w	r3, r3, sl
 80077ec:	4313      	orrs	r3, r2
 80077ee:	4680      	mov	r8, r0
 80077f0:	4689      	mov	r9, r1
 80077f2:	d055      	beq.n	80078a0 <_strtod_l+0xba0>
 80077f4:	a336      	add	r3, pc, #216	; (adr r3, 80078d0 <_strtod_l+0xbd0>)
 80077f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077fa:	f7f9 f977 	bl	8000aec <__aeabi_dcmplt>
 80077fe:	2800      	cmp	r0, #0
 8007800:	f47f acd0 	bne.w	80071a4 <_strtod_l+0x4a4>
 8007804:	a334      	add	r3, pc, #208	; (adr r3, 80078d8 <_strtod_l+0xbd8>)
 8007806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800780a:	4640      	mov	r0, r8
 800780c:	4649      	mov	r1, r9
 800780e:	f7f9 f98b 	bl	8000b28 <__aeabi_dcmpgt>
 8007812:	2800      	cmp	r0, #0
 8007814:	f43f af7b 	beq.w	800770e <_strtod_l+0xa0e>
 8007818:	e4c4      	b.n	80071a4 <_strtod_l+0x4a4>
 800781a:	9b04      	ldr	r3, [sp, #16]
 800781c:	b333      	cbz	r3, 800786c <_strtod_l+0xb6c>
 800781e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007820:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007824:	d822      	bhi.n	800786c <_strtod_l+0xb6c>
 8007826:	a32e      	add	r3, pc, #184	; (adr r3, 80078e0 <_strtod_l+0xbe0>)
 8007828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782c:	4640      	mov	r0, r8
 800782e:	4649      	mov	r1, r9
 8007830:	f7f9 f966 	bl	8000b00 <__aeabi_dcmple>
 8007834:	b1a0      	cbz	r0, 8007860 <_strtod_l+0xb60>
 8007836:	4649      	mov	r1, r9
 8007838:	4640      	mov	r0, r8
 800783a:	f7f9 f9bd 	bl	8000bb8 <__aeabi_d2uiz>
 800783e:	2801      	cmp	r0, #1
 8007840:	bf38      	it	cc
 8007842:	2001      	movcc	r0, #1
 8007844:	f7f8 fe66 	bl	8000514 <__aeabi_ui2d>
 8007848:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800784a:	4680      	mov	r8, r0
 800784c:	4689      	mov	r9, r1
 800784e:	bb23      	cbnz	r3, 800789a <_strtod_l+0xb9a>
 8007850:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007854:	9010      	str	r0, [sp, #64]	; 0x40
 8007856:	9311      	str	r3, [sp, #68]	; 0x44
 8007858:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800785c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007860:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007862:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007864:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007868:	1a9b      	subs	r3, r3, r2
 800786a:	9309      	str	r3, [sp, #36]	; 0x24
 800786c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007870:	eeb0 0a48 	vmov.f32	s0, s16
 8007874:	eef0 0a68 	vmov.f32	s1, s17
 8007878:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800787c:	f001 fe58 	bl	8009530 <__ulp>
 8007880:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007884:	ec53 2b10 	vmov	r2, r3, d0
 8007888:	f7f8 febe 	bl	8000608 <__aeabi_dmul>
 800788c:	ec53 2b18 	vmov	r2, r3, d8
 8007890:	f7f8 fd04 	bl	800029c <__adddf3>
 8007894:	4682      	mov	sl, r0
 8007896:	468b      	mov	fp, r1
 8007898:	e78d      	b.n	80077b6 <_strtod_l+0xab6>
 800789a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800789e:	e7db      	b.n	8007858 <_strtod_l+0xb58>
 80078a0:	a311      	add	r3, pc, #68	; (adr r3, 80078e8 <_strtod_l+0xbe8>)
 80078a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a6:	f7f9 f921 	bl	8000aec <__aeabi_dcmplt>
 80078aa:	e7b2      	b.n	8007812 <_strtod_l+0xb12>
 80078ac:	2300      	movs	r3, #0
 80078ae:	930a      	str	r3, [sp, #40]	; 0x28
 80078b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80078b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80078b4:	6013      	str	r3, [r2, #0]
 80078b6:	f7ff ba6b 	b.w	8006d90 <_strtod_l+0x90>
 80078ba:	2a65      	cmp	r2, #101	; 0x65
 80078bc:	f43f ab5f 	beq.w	8006f7e <_strtod_l+0x27e>
 80078c0:	2a45      	cmp	r2, #69	; 0x45
 80078c2:	f43f ab5c 	beq.w	8006f7e <_strtod_l+0x27e>
 80078c6:	2301      	movs	r3, #1
 80078c8:	f7ff bb94 	b.w	8006ff4 <_strtod_l+0x2f4>
 80078cc:	f3af 8000 	nop.w
 80078d0:	94a03595 	.word	0x94a03595
 80078d4:	3fdfffff 	.word	0x3fdfffff
 80078d8:	35afe535 	.word	0x35afe535
 80078dc:	3fe00000 	.word	0x3fe00000
 80078e0:	ffc00000 	.word	0xffc00000
 80078e4:	41dfffff 	.word	0x41dfffff
 80078e8:	94a03595 	.word	0x94a03595
 80078ec:	3fcfffff 	.word	0x3fcfffff
 80078f0:	3ff00000 	.word	0x3ff00000
 80078f4:	7ff00000 	.word	0x7ff00000
 80078f8:	7fe00000 	.word	0x7fe00000
 80078fc:	7c9fffff 	.word	0x7c9fffff
 8007900:	3fe00000 	.word	0x3fe00000
 8007904:	bff00000 	.word	0xbff00000
 8007908:	7fefffff 	.word	0x7fefffff

0800790c <_strtod_r>:
 800790c:	4b01      	ldr	r3, [pc, #4]	; (8007914 <_strtod_r+0x8>)
 800790e:	f7ff b9f7 	b.w	8006d00 <_strtod_l>
 8007912:	bf00      	nop
 8007914:	200000dc 	.word	0x200000dc

08007918 <_strtol_l.constprop.0>:
 8007918:	2b01      	cmp	r3, #1
 800791a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800791e:	d001      	beq.n	8007924 <_strtol_l.constprop.0+0xc>
 8007920:	2b24      	cmp	r3, #36	; 0x24
 8007922:	d906      	bls.n	8007932 <_strtol_l.constprop.0+0x1a>
 8007924:	f7fe faec 	bl	8005f00 <__errno>
 8007928:	2316      	movs	r3, #22
 800792a:	6003      	str	r3, [r0, #0]
 800792c:	2000      	movs	r0, #0
 800792e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007932:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007a18 <_strtol_l.constprop.0+0x100>
 8007936:	460d      	mov	r5, r1
 8007938:	462e      	mov	r6, r5
 800793a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800793e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007942:	f017 0708 	ands.w	r7, r7, #8
 8007946:	d1f7      	bne.n	8007938 <_strtol_l.constprop.0+0x20>
 8007948:	2c2d      	cmp	r4, #45	; 0x2d
 800794a:	d132      	bne.n	80079b2 <_strtol_l.constprop.0+0x9a>
 800794c:	782c      	ldrb	r4, [r5, #0]
 800794e:	2701      	movs	r7, #1
 8007950:	1cb5      	adds	r5, r6, #2
 8007952:	2b00      	cmp	r3, #0
 8007954:	d05b      	beq.n	8007a0e <_strtol_l.constprop.0+0xf6>
 8007956:	2b10      	cmp	r3, #16
 8007958:	d109      	bne.n	800796e <_strtol_l.constprop.0+0x56>
 800795a:	2c30      	cmp	r4, #48	; 0x30
 800795c:	d107      	bne.n	800796e <_strtol_l.constprop.0+0x56>
 800795e:	782c      	ldrb	r4, [r5, #0]
 8007960:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007964:	2c58      	cmp	r4, #88	; 0x58
 8007966:	d14d      	bne.n	8007a04 <_strtol_l.constprop.0+0xec>
 8007968:	786c      	ldrb	r4, [r5, #1]
 800796a:	2310      	movs	r3, #16
 800796c:	3502      	adds	r5, #2
 800796e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007972:	f108 38ff 	add.w	r8, r8, #4294967295
 8007976:	f04f 0c00 	mov.w	ip, #0
 800797a:	fbb8 f9f3 	udiv	r9, r8, r3
 800797e:	4666      	mov	r6, ip
 8007980:	fb03 8a19 	mls	sl, r3, r9, r8
 8007984:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007988:	f1be 0f09 	cmp.w	lr, #9
 800798c:	d816      	bhi.n	80079bc <_strtol_l.constprop.0+0xa4>
 800798e:	4674      	mov	r4, lr
 8007990:	42a3      	cmp	r3, r4
 8007992:	dd24      	ble.n	80079de <_strtol_l.constprop.0+0xc6>
 8007994:	f1bc 0f00 	cmp.w	ip, #0
 8007998:	db1e      	blt.n	80079d8 <_strtol_l.constprop.0+0xc0>
 800799a:	45b1      	cmp	r9, r6
 800799c:	d31c      	bcc.n	80079d8 <_strtol_l.constprop.0+0xc0>
 800799e:	d101      	bne.n	80079a4 <_strtol_l.constprop.0+0x8c>
 80079a0:	45a2      	cmp	sl, r4
 80079a2:	db19      	blt.n	80079d8 <_strtol_l.constprop.0+0xc0>
 80079a4:	fb06 4603 	mla	r6, r6, r3, r4
 80079a8:	f04f 0c01 	mov.w	ip, #1
 80079ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80079b0:	e7e8      	b.n	8007984 <_strtol_l.constprop.0+0x6c>
 80079b2:	2c2b      	cmp	r4, #43	; 0x2b
 80079b4:	bf04      	itt	eq
 80079b6:	782c      	ldrbeq	r4, [r5, #0]
 80079b8:	1cb5      	addeq	r5, r6, #2
 80079ba:	e7ca      	b.n	8007952 <_strtol_l.constprop.0+0x3a>
 80079bc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80079c0:	f1be 0f19 	cmp.w	lr, #25
 80079c4:	d801      	bhi.n	80079ca <_strtol_l.constprop.0+0xb2>
 80079c6:	3c37      	subs	r4, #55	; 0x37
 80079c8:	e7e2      	b.n	8007990 <_strtol_l.constprop.0+0x78>
 80079ca:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80079ce:	f1be 0f19 	cmp.w	lr, #25
 80079d2:	d804      	bhi.n	80079de <_strtol_l.constprop.0+0xc6>
 80079d4:	3c57      	subs	r4, #87	; 0x57
 80079d6:	e7db      	b.n	8007990 <_strtol_l.constprop.0+0x78>
 80079d8:	f04f 3cff 	mov.w	ip, #4294967295
 80079dc:	e7e6      	b.n	80079ac <_strtol_l.constprop.0+0x94>
 80079de:	f1bc 0f00 	cmp.w	ip, #0
 80079e2:	da05      	bge.n	80079f0 <_strtol_l.constprop.0+0xd8>
 80079e4:	2322      	movs	r3, #34	; 0x22
 80079e6:	6003      	str	r3, [r0, #0]
 80079e8:	4646      	mov	r6, r8
 80079ea:	b942      	cbnz	r2, 80079fe <_strtol_l.constprop.0+0xe6>
 80079ec:	4630      	mov	r0, r6
 80079ee:	e79e      	b.n	800792e <_strtol_l.constprop.0+0x16>
 80079f0:	b107      	cbz	r7, 80079f4 <_strtol_l.constprop.0+0xdc>
 80079f2:	4276      	negs	r6, r6
 80079f4:	2a00      	cmp	r2, #0
 80079f6:	d0f9      	beq.n	80079ec <_strtol_l.constprop.0+0xd4>
 80079f8:	f1bc 0f00 	cmp.w	ip, #0
 80079fc:	d000      	beq.n	8007a00 <_strtol_l.constprop.0+0xe8>
 80079fe:	1e69      	subs	r1, r5, #1
 8007a00:	6011      	str	r1, [r2, #0]
 8007a02:	e7f3      	b.n	80079ec <_strtol_l.constprop.0+0xd4>
 8007a04:	2430      	movs	r4, #48	; 0x30
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d1b1      	bne.n	800796e <_strtol_l.constprop.0+0x56>
 8007a0a:	2308      	movs	r3, #8
 8007a0c:	e7af      	b.n	800796e <_strtol_l.constprop.0+0x56>
 8007a0e:	2c30      	cmp	r4, #48	; 0x30
 8007a10:	d0a5      	beq.n	800795e <_strtol_l.constprop.0+0x46>
 8007a12:	230a      	movs	r3, #10
 8007a14:	e7ab      	b.n	800796e <_strtol_l.constprop.0+0x56>
 8007a16:	bf00      	nop
 8007a18:	0800bef1 	.word	0x0800bef1

08007a1c <_strtol_r>:
 8007a1c:	f7ff bf7c 	b.w	8007918 <_strtol_l.constprop.0>

08007a20 <quorem>:
 8007a20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a24:	6903      	ldr	r3, [r0, #16]
 8007a26:	690c      	ldr	r4, [r1, #16]
 8007a28:	42a3      	cmp	r3, r4
 8007a2a:	4607      	mov	r7, r0
 8007a2c:	f2c0 8081 	blt.w	8007b32 <quorem+0x112>
 8007a30:	3c01      	subs	r4, #1
 8007a32:	f101 0814 	add.w	r8, r1, #20
 8007a36:	f100 0514 	add.w	r5, r0, #20
 8007a3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a3e:	9301      	str	r3, [sp, #4]
 8007a40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007a44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a48:	3301      	adds	r3, #1
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007a50:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007a54:	fbb2 f6f3 	udiv	r6, r2, r3
 8007a58:	d331      	bcc.n	8007abe <quorem+0x9e>
 8007a5a:	f04f 0e00 	mov.w	lr, #0
 8007a5e:	4640      	mov	r0, r8
 8007a60:	46ac      	mov	ip, r5
 8007a62:	46f2      	mov	sl, lr
 8007a64:	f850 2b04 	ldr.w	r2, [r0], #4
 8007a68:	b293      	uxth	r3, r2
 8007a6a:	fb06 e303 	mla	r3, r6, r3, lr
 8007a6e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	ebaa 0303 	sub.w	r3, sl, r3
 8007a78:	f8dc a000 	ldr.w	sl, [ip]
 8007a7c:	0c12      	lsrs	r2, r2, #16
 8007a7e:	fa13 f38a 	uxtah	r3, r3, sl
 8007a82:	fb06 e202 	mla	r2, r6, r2, lr
 8007a86:	9300      	str	r3, [sp, #0]
 8007a88:	9b00      	ldr	r3, [sp, #0]
 8007a8a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007a8e:	b292      	uxth	r2, r2
 8007a90:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007a94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a98:	f8bd 3000 	ldrh.w	r3, [sp]
 8007a9c:	4581      	cmp	r9, r0
 8007a9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007aa2:	f84c 3b04 	str.w	r3, [ip], #4
 8007aa6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007aaa:	d2db      	bcs.n	8007a64 <quorem+0x44>
 8007aac:	f855 300b 	ldr.w	r3, [r5, fp]
 8007ab0:	b92b      	cbnz	r3, 8007abe <quorem+0x9e>
 8007ab2:	9b01      	ldr	r3, [sp, #4]
 8007ab4:	3b04      	subs	r3, #4
 8007ab6:	429d      	cmp	r5, r3
 8007ab8:	461a      	mov	r2, r3
 8007aba:	d32e      	bcc.n	8007b1a <quorem+0xfa>
 8007abc:	613c      	str	r4, [r7, #16]
 8007abe:	4638      	mov	r0, r7
 8007ac0:	f001 fc90 	bl	80093e4 <__mcmp>
 8007ac4:	2800      	cmp	r0, #0
 8007ac6:	db24      	blt.n	8007b12 <quorem+0xf2>
 8007ac8:	3601      	adds	r6, #1
 8007aca:	4628      	mov	r0, r5
 8007acc:	f04f 0c00 	mov.w	ip, #0
 8007ad0:	f858 2b04 	ldr.w	r2, [r8], #4
 8007ad4:	f8d0 e000 	ldr.w	lr, [r0]
 8007ad8:	b293      	uxth	r3, r2
 8007ada:	ebac 0303 	sub.w	r3, ip, r3
 8007ade:	0c12      	lsrs	r2, r2, #16
 8007ae0:	fa13 f38e 	uxtah	r3, r3, lr
 8007ae4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007ae8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007af2:	45c1      	cmp	r9, r8
 8007af4:	f840 3b04 	str.w	r3, [r0], #4
 8007af8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007afc:	d2e8      	bcs.n	8007ad0 <quorem+0xb0>
 8007afe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b06:	b922      	cbnz	r2, 8007b12 <quorem+0xf2>
 8007b08:	3b04      	subs	r3, #4
 8007b0a:	429d      	cmp	r5, r3
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	d30a      	bcc.n	8007b26 <quorem+0x106>
 8007b10:	613c      	str	r4, [r7, #16]
 8007b12:	4630      	mov	r0, r6
 8007b14:	b003      	add	sp, #12
 8007b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b1a:	6812      	ldr	r2, [r2, #0]
 8007b1c:	3b04      	subs	r3, #4
 8007b1e:	2a00      	cmp	r2, #0
 8007b20:	d1cc      	bne.n	8007abc <quorem+0x9c>
 8007b22:	3c01      	subs	r4, #1
 8007b24:	e7c7      	b.n	8007ab6 <quorem+0x96>
 8007b26:	6812      	ldr	r2, [r2, #0]
 8007b28:	3b04      	subs	r3, #4
 8007b2a:	2a00      	cmp	r2, #0
 8007b2c:	d1f0      	bne.n	8007b10 <quorem+0xf0>
 8007b2e:	3c01      	subs	r4, #1
 8007b30:	e7eb      	b.n	8007b0a <quorem+0xea>
 8007b32:	2000      	movs	r0, #0
 8007b34:	e7ee      	b.n	8007b14 <quorem+0xf4>
	...

08007b38 <_dtoa_r>:
 8007b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b3c:	ed2d 8b04 	vpush	{d8-d9}
 8007b40:	ec57 6b10 	vmov	r6, r7, d0
 8007b44:	b093      	sub	sp, #76	; 0x4c
 8007b46:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007b48:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007b4c:	9106      	str	r1, [sp, #24]
 8007b4e:	ee10 aa10 	vmov	sl, s0
 8007b52:	4604      	mov	r4, r0
 8007b54:	9209      	str	r2, [sp, #36]	; 0x24
 8007b56:	930c      	str	r3, [sp, #48]	; 0x30
 8007b58:	46bb      	mov	fp, r7
 8007b5a:	b975      	cbnz	r5, 8007b7a <_dtoa_r+0x42>
 8007b5c:	2010      	movs	r0, #16
 8007b5e:	f001 f94d 	bl	8008dfc <malloc>
 8007b62:	4602      	mov	r2, r0
 8007b64:	6260      	str	r0, [r4, #36]	; 0x24
 8007b66:	b920      	cbnz	r0, 8007b72 <_dtoa_r+0x3a>
 8007b68:	4ba7      	ldr	r3, [pc, #668]	; (8007e08 <_dtoa_r+0x2d0>)
 8007b6a:	21ea      	movs	r1, #234	; 0xea
 8007b6c:	48a7      	ldr	r0, [pc, #668]	; (8007e0c <_dtoa_r+0x2d4>)
 8007b6e:	f002 f8bd 	bl	8009cec <__assert_func>
 8007b72:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007b76:	6005      	str	r5, [r0, #0]
 8007b78:	60c5      	str	r5, [r0, #12]
 8007b7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b7c:	6819      	ldr	r1, [r3, #0]
 8007b7e:	b151      	cbz	r1, 8007b96 <_dtoa_r+0x5e>
 8007b80:	685a      	ldr	r2, [r3, #4]
 8007b82:	604a      	str	r2, [r1, #4]
 8007b84:	2301      	movs	r3, #1
 8007b86:	4093      	lsls	r3, r2
 8007b88:	608b      	str	r3, [r1, #8]
 8007b8a:	4620      	mov	r0, r4
 8007b8c:	f001 f99e 	bl	8008ecc <_Bfree>
 8007b90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b92:	2200      	movs	r2, #0
 8007b94:	601a      	str	r2, [r3, #0]
 8007b96:	1e3b      	subs	r3, r7, #0
 8007b98:	bfaa      	itet	ge
 8007b9a:	2300      	movge	r3, #0
 8007b9c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007ba0:	f8c8 3000 	strge.w	r3, [r8]
 8007ba4:	4b9a      	ldr	r3, [pc, #616]	; (8007e10 <_dtoa_r+0x2d8>)
 8007ba6:	bfbc      	itt	lt
 8007ba8:	2201      	movlt	r2, #1
 8007baa:	f8c8 2000 	strlt.w	r2, [r8]
 8007bae:	ea33 030b 	bics.w	r3, r3, fp
 8007bb2:	d11b      	bne.n	8007bec <_dtoa_r+0xb4>
 8007bb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007bb6:	f242 730f 	movw	r3, #9999	; 0x270f
 8007bba:	6013      	str	r3, [r2, #0]
 8007bbc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007bc0:	4333      	orrs	r3, r6
 8007bc2:	f000 8592 	beq.w	80086ea <_dtoa_r+0xbb2>
 8007bc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007bc8:	b963      	cbnz	r3, 8007be4 <_dtoa_r+0xac>
 8007bca:	4b92      	ldr	r3, [pc, #584]	; (8007e14 <_dtoa_r+0x2dc>)
 8007bcc:	e022      	b.n	8007c14 <_dtoa_r+0xdc>
 8007bce:	4b92      	ldr	r3, [pc, #584]	; (8007e18 <_dtoa_r+0x2e0>)
 8007bd0:	9301      	str	r3, [sp, #4]
 8007bd2:	3308      	adds	r3, #8
 8007bd4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007bd6:	6013      	str	r3, [r2, #0]
 8007bd8:	9801      	ldr	r0, [sp, #4]
 8007bda:	b013      	add	sp, #76	; 0x4c
 8007bdc:	ecbd 8b04 	vpop	{d8-d9}
 8007be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007be4:	4b8b      	ldr	r3, [pc, #556]	; (8007e14 <_dtoa_r+0x2dc>)
 8007be6:	9301      	str	r3, [sp, #4]
 8007be8:	3303      	adds	r3, #3
 8007bea:	e7f3      	b.n	8007bd4 <_dtoa_r+0x9c>
 8007bec:	2200      	movs	r2, #0
 8007bee:	2300      	movs	r3, #0
 8007bf0:	4650      	mov	r0, sl
 8007bf2:	4659      	mov	r1, fp
 8007bf4:	f7f8 ff70 	bl	8000ad8 <__aeabi_dcmpeq>
 8007bf8:	ec4b ab19 	vmov	d9, sl, fp
 8007bfc:	4680      	mov	r8, r0
 8007bfe:	b158      	cbz	r0, 8007c18 <_dtoa_r+0xe0>
 8007c00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c02:	2301      	movs	r3, #1
 8007c04:	6013      	str	r3, [r2, #0]
 8007c06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	f000 856b 	beq.w	80086e4 <_dtoa_r+0xbac>
 8007c0e:	4883      	ldr	r0, [pc, #524]	; (8007e1c <_dtoa_r+0x2e4>)
 8007c10:	6018      	str	r0, [r3, #0]
 8007c12:	1e43      	subs	r3, r0, #1
 8007c14:	9301      	str	r3, [sp, #4]
 8007c16:	e7df      	b.n	8007bd8 <_dtoa_r+0xa0>
 8007c18:	ec4b ab10 	vmov	d0, sl, fp
 8007c1c:	aa10      	add	r2, sp, #64	; 0x40
 8007c1e:	a911      	add	r1, sp, #68	; 0x44
 8007c20:	4620      	mov	r0, r4
 8007c22:	f001 fd01 	bl	8009628 <__d2b>
 8007c26:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007c2a:	ee08 0a10 	vmov	s16, r0
 8007c2e:	2d00      	cmp	r5, #0
 8007c30:	f000 8084 	beq.w	8007d3c <_dtoa_r+0x204>
 8007c34:	ee19 3a90 	vmov	r3, s19
 8007c38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c3c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007c40:	4656      	mov	r6, sl
 8007c42:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007c46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007c4a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007c4e:	4b74      	ldr	r3, [pc, #464]	; (8007e20 <_dtoa_r+0x2e8>)
 8007c50:	2200      	movs	r2, #0
 8007c52:	4630      	mov	r0, r6
 8007c54:	4639      	mov	r1, r7
 8007c56:	f7f8 fb1f 	bl	8000298 <__aeabi_dsub>
 8007c5a:	a365      	add	r3, pc, #404	; (adr r3, 8007df0 <_dtoa_r+0x2b8>)
 8007c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c60:	f7f8 fcd2 	bl	8000608 <__aeabi_dmul>
 8007c64:	a364      	add	r3, pc, #400	; (adr r3, 8007df8 <_dtoa_r+0x2c0>)
 8007c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6a:	f7f8 fb17 	bl	800029c <__adddf3>
 8007c6e:	4606      	mov	r6, r0
 8007c70:	4628      	mov	r0, r5
 8007c72:	460f      	mov	r7, r1
 8007c74:	f7f8 fc5e 	bl	8000534 <__aeabi_i2d>
 8007c78:	a361      	add	r3, pc, #388	; (adr r3, 8007e00 <_dtoa_r+0x2c8>)
 8007c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7e:	f7f8 fcc3 	bl	8000608 <__aeabi_dmul>
 8007c82:	4602      	mov	r2, r0
 8007c84:	460b      	mov	r3, r1
 8007c86:	4630      	mov	r0, r6
 8007c88:	4639      	mov	r1, r7
 8007c8a:	f7f8 fb07 	bl	800029c <__adddf3>
 8007c8e:	4606      	mov	r6, r0
 8007c90:	460f      	mov	r7, r1
 8007c92:	f7f8 ff69 	bl	8000b68 <__aeabi_d2iz>
 8007c96:	2200      	movs	r2, #0
 8007c98:	9000      	str	r0, [sp, #0]
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	4630      	mov	r0, r6
 8007c9e:	4639      	mov	r1, r7
 8007ca0:	f7f8 ff24 	bl	8000aec <__aeabi_dcmplt>
 8007ca4:	b150      	cbz	r0, 8007cbc <_dtoa_r+0x184>
 8007ca6:	9800      	ldr	r0, [sp, #0]
 8007ca8:	f7f8 fc44 	bl	8000534 <__aeabi_i2d>
 8007cac:	4632      	mov	r2, r6
 8007cae:	463b      	mov	r3, r7
 8007cb0:	f7f8 ff12 	bl	8000ad8 <__aeabi_dcmpeq>
 8007cb4:	b910      	cbnz	r0, 8007cbc <_dtoa_r+0x184>
 8007cb6:	9b00      	ldr	r3, [sp, #0]
 8007cb8:	3b01      	subs	r3, #1
 8007cba:	9300      	str	r3, [sp, #0]
 8007cbc:	9b00      	ldr	r3, [sp, #0]
 8007cbe:	2b16      	cmp	r3, #22
 8007cc0:	d85a      	bhi.n	8007d78 <_dtoa_r+0x240>
 8007cc2:	9a00      	ldr	r2, [sp, #0]
 8007cc4:	4b57      	ldr	r3, [pc, #348]	; (8007e24 <_dtoa_r+0x2ec>)
 8007cc6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cce:	ec51 0b19 	vmov	r0, r1, d9
 8007cd2:	f7f8 ff0b 	bl	8000aec <__aeabi_dcmplt>
 8007cd6:	2800      	cmp	r0, #0
 8007cd8:	d050      	beq.n	8007d7c <_dtoa_r+0x244>
 8007cda:	9b00      	ldr	r3, [sp, #0]
 8007cdc:	3b01      	subs	r3, #1
 8007cde:	9300      	str	r3, [sp, #0]
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ce4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007ce6:	1b5d      	subs	r5, r3, r5
 8007ce8:	1e6b      	subs	r3, r5, #1
 8007cea:	9305      	str	r3, [sp, #20]
 8007cec:	bf45      	ittet	mi
 8007cee:	f1c5 0301 	rsbmi	r3, r5, #1
 8007cf2:	9304      	strmi	r3, [sp, #16]
 8007cf4:	2300      	movpl	r3, #0
 8007cf6:	2300      	movmi	r3, #0
 8007cf8:	bf4c      	ite	mi
 8007cfa:	9305      	strmi	r3, [sp, #20]
 8007cfc:	9304      	strpl	r3, [sp, #16]
 8007cfe:	9b00      	ldr	r3, [sp, #0]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	db3d      	blt.n	8007d80 <_dtoa_r+0x248>
 8007d04:	9b05      	ldr	r3, [sp, #20]
 8007d06:	9a00      	ldr	r2, [sp, #0]
 8007d08:	920a      	str	r2, [sp, #40]	; 0x28
 8007d0a:	4413      	add	r3, r2
 8007d0c:	9305      	str	r3, [sp, #20]
 8007d0e:	2300      	movs	r3, #0
 8007d10:	9307      	str	r3, [sp, #28]
 8007d12:	9b06      	ldr	r3, [sp, #24]
 8007d14:	2b09      	cmp	r3, #9
 8007d16:	f200 8089 	bhi.w	8007e2c <_dtoa_r+0x2f4>
 8007d1a:	2b05      	cmp	r3, #5
 8007d1c:	bfc4      	itt	gt
 8007d1e:	3b04      	subgt	r3, #4
 8007d20:	9306      	strgt	r3, [sp, #24]
 8007d22:	9b06      	ldr	r3, [sp, #24]
 8007d24:	f1a3 0302 	sub.w	r3, r3, #2
 8007d28:	bfcc      	ite	gt
 8007d2a:	2500      	movgt	r5, #0
 8007d2c:	2501      	movle	r5, #1
 8007d2e:	2b03      	cmp	r3, #3
 8007d30:	f200 8087 	bhi.w	8007e42 <_dtoa_r+0x30a>
 8007d34:	e8df f003 	tbb	[pc, r3]
 8007d38:	59383a2d 	.word	0x59383a2d
 8007d3c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007d40:	441d      	add	r5, r3
 8007d42:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007d46:	2b20      	cmp	r3, #32
 8007d48:	bfc1      	itttt	gt
 8007d4a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007d4e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007d52:	fa0b f303 	lslgt.w	r3, fp, r3
 8007d56:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007d5a:	bfda      	itte	le
 8007d5c:	f1c3 0320 	rsble	r3, r3, #32
 8007d60:	fa06 f003 	lslle.w	r0, r6, r3
 8007d64:	4318      	orrgt	r0, r3
 8007d66:	f7f8 fbd5 	bl	8000514 <__aeabi_ui2d>
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	4606      	mov	r6, r0
 8007d6e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007d72:	3d01      	subs	r5, #1
 8007d74:	930e      	str	r3, [sp, #56]	; 0x38
 8007d76:	e76a      	b.n	8007c4e <_dtoa_r+0x116>
 8007d78:	2301      	movs	r3, #1
 8007d7a:	e7b2      	b.n	8007ce2 <_dtoa_r+0x1aa>
 8007d7c:	900b      	str	r0, [sp, #44]	; 0x2c
 8007d7e:	e7b1      	b.n	8007ce4 <_dtoa_r+0x1ac>
 8007d80:	9b04      	ldr	r3, [sp, #16]
 8007d82:	9a00      	ldr	r2, [sp, #0]
 8007d84:	1a9b      	subs	r3, r3, r2
 8007d86:	9304      	str	r3, [sp, #16]
 8007d88:	4253      	negs	r3, r2
 8007d8a:	9307      	str	r3, [sp, #28]
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	930a      	str	r3, [sp, #40]	; 0x28
 8007d90:	e7bf      	b.n	8007d12 <_dtoa_r+0x1da>
 8007d92:	2300      	movs	r3, #0
 8007d94:	9308      	str	r3, [sp, #32]
 8007d96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	dc55      	bgt.n	8007e48 <_dtoa_r+0x310>
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007da2:	461a      	mov	r2, r3
 8007da4:	9209      	str	r2, [sp, #36]	; 0x24
 8007da6:	e00c      	b.n	8007dc2 <_dtoa_r+0x28a>
 8007da8:	2301      	movs	r3, #1
 8007daa:	e7f3      	b.n	8007d94 <_dtoa_r+0x25c>
 8007dac:	2300      	movs	r3, #0
 8007dae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007db0:	9308      	str	r3, [sp, #32]
 8007db2:	9b00      	ldr	r3, [sp, #0]
 8007db4:	4413      	add	r3, r2
 8007db6:	9302      	str	r3, [sp, #8]
 8007db8:	3301      	adds	r3, #1
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	9303      	str	r3, [sp, #12]
 8007dbe:	bfb8      	it	lt
 8007dc0:	2301      	movlt	r3, #1
 8007dc2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	6042      	str	r2, [r0, #4]
 8007dc8:	2204      	movs	r2, #4
 8007dca:	f102 0614 	add.w	r6, r2, #20
 8007dce:	429e      	cmp	r6, r3
 8007dd0:	6841      	ldr	r1, [r0, #4]
 8007dd2:	d93d      	bls.n	8007e50 <_dtoa_r+0x318>
 8007dd4:	4620      	mov	r0, r4
 8007dd6:	f001 f839 	bl	8008e4c <_Balloc>
 8007dda:	9001      	str	r0, [sp, #4]
 8007ddc:	2800      	cmp	r0, #0
 8007dde:	d13b      	bne.n	8007e58 <_dtoa_r+0x320>
 8007de0:	4b11      	ldr	r3, [pc, #68]	; (8007e28 <_dtoa_r+0x2f0>)
 8007de2:	4602      	mov	r2, r0
 8007de4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007de8:	e6c0      	b.n	8007b6c <_dtoa_r+0x34>
 8007dea:	2301      	movs	r3, #1
 8007dec:	e7df      	b.n	8007dae <_dtoa_r+0x276>
 8007dee:	bf00      	nop
 8007df0:	636f4361 	.word	0x636f4361
 8007df4:	3fd287a7 	.word	0x3fd287a7
 8007df8:	8b60c8b3 	.word	0x8b60c8b3
 8007dfc:	3fc68a28 	.word	0x3fc68a28
 8007e00:	509f79fb 	.word	0x509f79fb
 8007e04:	3fd34413 	.word	0x3fd34413
 8007e08:	0800bffe 	.word	0x0800bffe
 8007e0c:	0800c015 	.word	0x0800c015
 8007e10:	7ff00000 	.word	0x7ff00000
 8007e14:	0800bffa 	.word	0x0800bffa
 8007e18:	0800bff1 	.word	0x0800bff1
 8007e1c:	0800be75 	.word	0x0800be75
 8007e20:	3ff80000 	.word	0x3ff80000
 8007e24:	0800c180 	.word	0x0800c180
 8007e28:	0800c070 	.word	0x0800c070
 8007e2c:	2501      	movs	r5, #1
 8007e2e:	2300      	movs	r3, #0
 8007e30:	9306      	str	r3, [sp, #24]
 8007e32:	9508      	str	r5, [sp, #32]
 8007e34:	f04f 33ff 	mov.w	r3, #4294967295
 8007e38:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	2312      	movs	r3, #18
 8007e40:	e7b0      	b.n	8007da4 <_dtoa_r+0x26c>
 8007e42:	2301      	movs	r3, #1
 8007e44:	9308      	str	r3, [sp, #32]
 8007e46:	e7f5      	b.n	8007e34 <_dtoa_r+0x2fc>
 8007e48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e4a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007e4e:	e7b8      	b.n	8007dc2 <_dtoa_r+0x28a>
 8007e50:	3101      	adds	r1, #1
 8007e52:	6041      	str	r1, [r0, #4]
 8007e54:	0052      	lsls	r2, r2, #1
 8007e56:	e7b8      	b.n	8007dca <_dtoa_r+0x292>
 8007e58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e5a:	9a01      	ldr	r2, [sp, #4]
 8007e5c:	601a      	str	r2, [r3, #0]
 8007e5e:	9b03      	ldr	r3, [sp, #12]
 8007e60:	2b0e      	cmp	r3, #14
 8007e62:	f200 809d 	bhi.w	8007fa0 <_dtoa_r+0x468>
 8007e66:	2d00      	cmp	r5, #0
 8007e68:	f000 809a 	beq.w	8007fa0 <_dtoa_r+0x468>
 8007e6c:	9b00      	ldr	r3, [sp, #0]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	dd32      	ble.n	8007ed8 <_dtoa_r+0x3a0>
 8007e72:	4ab7      	ldr	r2, [pc, #732]	; (8008150 <_dtoa_r+0x618>)
 8007e74:	f003 030f 	and.w	r3, r3, #15
 8007e78:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007e7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007e80:	9b00      	ldr	r3, [sp, #0]
 8007e82:	05d8      	lsls	r0, r3, #23
 8007e84:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007e88:	d516      	bpl.n	8007eb8 <_dtoa_r+0x380>
 8007e8a:	4bb2      	ldr	r3, [pc, #712]	; (8008154 <_dtoa_r+0x61c>)
 8007e8c:	ec51 0b19 	vmov	r0, r1, d9
 8007e90:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007e94:	f7f8 fce2 	bl	800085c <__aeabi_ddiv>
 8007e98:	f007 070f 	and.w	r7, r7, #15
 8007e9c:	4682      	mov	sl, r0
 8007e9e:	468b      	mov	fp, r1
 8007ea0:	2503      	movs	r5, #3
 8007ea2:	4eac      	ldr	r6, [pc, #688]	; (8008154 <_dtoa_r+0x61c>)
 8007ea4:	b957      	cbnz	r7, 8007ebc <_dtoa_r+0x384>
 8007ea6:	4642      	mov	r2, r8
 8007ea8:	464b      	mov	r3, r9
 8007eaa:	4650      	mov	r0, sl
 8007eac:	4659      	mov	r1, fp
 8007eae:	f7f8 fcd5 	bl	800085c <__aeabi_ddiv>
 8007eb2:	4682      	mov	sl, r0
 8007eb4:	468b      	mov	fp, r1
 8007eb6:	e028      	b.n	8007f0a <_dtoa_r+0x3d2>
 8007eb8:	2502      	movs	r5, #2
 8007eba:	e7f2      	b.n	8007ea2 <_dtoa_r+0x36a>
 8007ebc:	07f9      	lsls	r1, r7, #31
 8007ebe:	d508      	bpl.n	8007ed2 <_dtoa_r+0x39a>
 8007ec0:	4640      	mov	r0, r8
 8007ec2:	4649      	mov	r1, r9
 8007ec4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007ec8:	f7f8 fb9e 	bl	8000608 <__aeabi_dmul>
 8007ecc:	3501      	adds	r5, #1
 8007ece:	4680      	mov	r8, r0
 8007ed0:	4689      	mov	r9, r1
 8007ed2:	107f      	asrs	r7, r7, #1
 8007ed4:	3608      	adds	r6, #8
 8007ed6:	e7e5      	b.n	8007ea4 <_dtoa_r+0x36c>
 8007ed8:	f000 809b 	beq.w	8008012 <_dtoa_r+0x4da>
 8007edc:	9b00      	ldr	r3, [sp, #0]
 8007ede:	4f9d      	ldr	r7, [pc, #628]	; (8008154 <_dtoa_r+0x61c>)
 8007ee0:	425e      	negs	r6, r3
 8007ee2:	4b9b      	ldr	r3, [pc, #620]	; (8008150 <_dtoa_r+0x618>)
 8007ee4:	f006 020f 	and.w	r2, r6, #15
 8007ee8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef0:	ec51 0b19 	vmov	r0, r1, d9
 8007ef4:	f7f8 fb88 	bl	8000608 <__aeabi_dmul>
 8007ef8:	1136      	asrs	r6, r6, #4
 8007efa:	4682      	mov	sl, r0
 8007efc:	468b      	mov	fp, r1
 8007efe:	2300      	movs	r3, #0
 8007f00:	2502      	movs	r5, #2
 8007f02:	2e00      	cmp	r6, #0
 8007f04:	d17a      	bne.n	8007ffc <_dtoa_r+0x4c4>
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d1d3      	bne.n	8007eb2 <_dtoa_r+0x37a>
 8007f0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	f000 8082 	beq.w	8008016 <_dtoa_r+0x4de>
 8007f12:	4b91      	ldr	r3, [pc, #580]	; (8008158 <_dtoa_r+0x620>)
 8007f14:	2200      	movs	r2, #0
 8007f16:	4650      	mov	r0, sl
 8007f18:	4659      	mov	r1, fp
 8007f1a:	f7f8 fde7 	bl	8000aec <__aeabi_dcmplt>
 8007f1e:	2800      	cmp	r0, #0
 8007f20:	d079      	beq.n	8008016 <_dtoa_r+0x4de>
 8007f22:	9b03      	ldr	r3, [sp, #12]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d076      	beq.n	8008016 <_dtoa_r+0x4de>
 8007f28:	9b02      	ldr	r3, [sp, #8]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	dd36      	ble.n	8007f9c <_dtoa_r+0x464>
 8007f2e:	9b00      	ldr	r3, [sp, #0]
 8007f30:	4650      	mov	r0, sl
 8007f32:	4659      	mov	r1, fp
 8007f34:	1e5f      	subs	r7, r3, #1
 8007f36:	2200      	movs	r2, #0
 8007f38:	4b88      	ldr	r3, [pc, #544]	; (800815c <_dtoa_r+0x624>)
 8007f3a:	f7f8 fb65 	bl	8000608 <__aeabi_dmul>
 8007f3e:	9e02      	ldr	r6, [sp, #8]
 8007f40:	4682      	mov	sl, r0
 8007f42:	468b      	mov	fp, r1
 8007f44:	3501      	adds	r5, #1
 8007f46:	4628      	mov	r0, r5
 8007f48:	f7f8 faf4 	bl	8000534 <__aeabi_i2d>
 8007f4c:	4652      	mov	r2, sl
 8007f4e:	465b      	mov	r3, fp
 8007f50:	f7f8 fb5a 	bl	8000608 <__aeabi_dmul>
 8007f54:	4b82      	ldr	r3, [pc, #520]	; (8008160 <_dtoa_r+0x628>)
 8007f56:	2200      	movs	r2, #0
 8007f58:	f7f8 f9a0 	bl	800029c <__adddf3>
 8007f5c:	46d0      	mov	r8, sl
 8007f5e:	46d9      	mov	r9, fp
 8007f60:	4682      	mov	sl, r0
 8007f62:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007f66:	2e00      	cmp	r6, #0
 8007f68:	d158      	bne.n	800801c <_dtoa_r+0x4e4>
 8007f6a:	4b7e      	ldr	r3, [pc, #504]	; (8008164 <_dtoa_r+0x62c>)
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	4640      	mov	r0, r8
 8007f70:	4649      	mov	r1, r9
 8007f72:	f7f8 f991 	bl	8000298 <__aeabi_dsub>
 8007f76:	4652      	mov	r2, sl
 8007f78:	465b      	mov	r3, fp
 8007f7a:	4680      	mov	r8, r0
 8007f7c:	4689      	mov	r9, r1
 8007f7e:	f7f8 fdd3 	bl	8000b28 <__aeabi_dcmpgt>
 8007f82:	2800      	cmp	r0, #0
 8007f84:	f040 8295 	bne.w	80084b2 <_dtoa_r+0x97a>
 8007f88:	4652      	mov	r2, sl
 8007f8a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007f8e:	4640      	mov	r0, r8
 8007f90:	4649      	mov	r1, r9
 8007f92:	f7f8 fdab 	bl	8000aec <__aeabi_dcmplt>
 8007f96:	2800      	cmp	r0, #0
 8007f98:	f040 8289 	bne.w	80084ae <_dtoa_r+0x976>
 8007f9c:	ec5b ab19 	vmov	sl, fp, d9
 8007fa0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	f2c0 8148 	blt.w	8008238 <_dtoa_r+0x700>
 8007fa8:	9a00      	ldr	r2, [sp, #0]
 8007faa:	2a0e      	cmp	r2, #14
 8007fac:	f300 8144 	bgt.w	8008238 <_dtoa_r+0x700>
 8007fb0:	4b67      	ldr	r3, [pc, #412]	; (8008150 <_dtoa_r+0x618>)
 8007fb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fb6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007fba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	f280 80d5 	bge.w	800816c <_dtoa_r+0x634>
 8007fc2:	9b03      	ldr	r3, [sp, #12]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	f300 80d1 	bgt.w	800816c <_dtoa_r+0x634>
 8007fca:	f040 826f 	bne.w	80084ac <_dtoa_r+0x974>
 8007fce:	4b65      	ldr	r3, [pc, #404]	; (8008164 <_dtoa_r+0x62c>)
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	4640      	mov	r0, r8
 8007fd4:	4649      	mov	r1, r9
 8007fd6:	f7f8 fb17 	bl	8000608 <__aeabi_dmul>
 8007fda:	4652      	mov	r2, sl
 8007fdc:	465b      	mov	r3, fp
 8007fde:	f7f8 fd99 	bl	8000b14 <__aeabi_dcmpge>
 8007fe2:	9e03      	ldr	r6, [sp, #12]
 8007fe4:	4637      	mov	r7, r6
 8007fe6:	2800      	cmp	r0, #0
 8007fe8:	f040 8245 	bne.w	8008476 <_dtoa_r+0x93e>
 8007fec:	9d01      	ldr	r5, [sp, #4]
 8007fee:	2331      	movs	r3, #49	; 0x31
 8007ff0:	f805 3b01 	strb.w	r3, [r5], #1
 8007ff4:	9b00      	ldr	r3, [sp, #0]
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	9300      	str	r3, [sp, #0]
 8007ffa:	e240      	b.n	800847e <_dtoa_r+0x946>
 8007ffc:	07f2      	lsls	r2, r6, #31
 8007ffe:	d505      	bpl.n	800800c <_dtoa_r+0x4d4>
 8008000:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008004:	f7f8 fb00 	bl	8000608 <__aeabi_dmul>
 8008008:	3501      	adds	r5, #1
 800800a:	2301      	movs	r3, #1
 800800c:	1076      	asrs	r6, r6, #1
 800800e:	3708      	adds	r7, #8
 8008010:	e777      	b.n	8007f02 <_dtoa_r+0x3ca>
 8008012:	2502      	movs	r5, #2
 8008014:	e779      	b.n	8007f0a <_dtoa_r+0x3d2>
 8008016:	9f00      	ldr	r7, [sp, #0]
 8008018:	9e03      	ldr	r6, [sp, #12]
 800801a:	e794      	b.n	8007f46 <_dtoa_r+0x40e>
 800801c:	9901      	ldr	r1, [sp, #4]
 800801e:	4b4c      	ldr	r3, [pc, #304]	; (8008150 <_dtoa_r+0x618>)
 8008020:	4431      	add	r1, r6
 8008022:	910d      	str	r1, [sp, #52]	; 0x34
 8008024:	9908      	ldr	r1, [sp, #32]
 8008026:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800802a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800802e:	2900      	cmp	r1, #0
 8008030:	d043      	beq.n	80080ba <_dtoa_r+0x582>
 8008032:	494d      	ldr	r1, [pc, #308]	; (8008168 <_dtoa_r+0x630>)
 8008034:	2000      	movs	r0, #0
 8008036:	f7f8 fc11 	bl	800085c <__aeabi_ddiv>
 800803a:	4652      	mov	r2, sl
 800803c:	465b      	mov	r3, fp
 800803e:	f7f8 f92b 	bl	8000298 <__aeabi_dsub>
 8008042:	9d01      	ldr	r5, [sp, #4]
 8008044:	4682      	mov	sl, r0
 8008046:	468b      	mov	fp, r1
 8008048:	4649      	mov	r1, r9
 800804a:	4640      	mov	r0, r8
 800804c:	f7f8 fd8c 	bl	8000b68 <__aeabi_d2iz>
 8008050:	4606      	mov	r6, r0
 8008052:	f7f8 fa6f 	bl	8000534 <__aeabi_i2d>
 8008056:	4602      	mov	r2, r0
 8008058:	460b      	mov	r3, r1
 800805a:	4640      	mov	r0, r8
 800805c:	4649      	mov	r1, r9
 800805e:	f7f8 f91b 	bl	8000298 <__aeabi_dsub>
 8008062:	3630      	adds	r6, #48	; 0x30
 8008064:	f805 6b01 	strb.w	r6, [r5], #1
 8008068:	4652      	mov	r2, sl
 800806a:	465b      	mov	r3, fp
 800806c:	4680      	mov	r8, r0
 800806e:	4689      	mov	r9, r1
 8008070:	f7f8 fd3c 	bl	8000aec <__aeabi_dcmplt>
 8008074:	2800      	cmp	r0, #0
 8008076:	d163      	bne.n	8008140 <_dtoa_r+0x608>
 8008078:	4642      	mov	r2, r8
 800807a:	464b      	mov	r3, r9
 800807c:	4936      	ldr	r1, [pc, #216]	; (8008158 <_dtoa_r+0x620>)
 800807e:	2000      	movs	r0, #0
 8008080:	f7f8 f90a 	bl	8000298 <__aeabi_dsub>
 8008084:	4652      	mov	r2, sl
 8008086:	465b      	mov	r3, fp
 8008088:	f7f8 fd30 	bl	8000aec <__aeabi_dcmplt>
 800808c:	2800      	cmp	r0, #0
 800808e:	f040 80b5 	bne.w	80081fc <_dtoa_r+0x6c4>
 8008092:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008094:	429d      	cmp	r5, r3
 8008096:	d081      	beq.n	8007f9c <_dtoa_r+0x464>
 8008098:	4b30      	ldr	r3, [pc, #192]	; (800815c <_dtoa_r+0x624>)
 800809a:	2200      	movs	r2, #0
 800809c:	4650      	mov	r0, sl
 800809e:	4659      	mov	r1, fp
 80080a0:	f7f8 fab2 	bl	8000608 <__aeabi_dmul>
 80080a4:	4b2d      	ldr	r3, [pc, #180]	; (800815c <_dtoa_r+0x624>)
 80080a6:	4682      	mov	sl, r0
 80080a8:	468b      	mov	fp, r1
 80080aa:	4640      	mov	r0, r8
 80080ac:	4649      	mov	r1, r9
 80080ae:	2200      	movs	r2, #0
 80080b0:	f7f8 faaa 	bl	8000608 <__aeabi_dmul>
 80080b4:	4680      	mov	r8, r0
 80080b6:	4689      	mov	r9, r1
 80080b8:	e7c6      	b.n	8008048 <_dtoa_r+0x510>
 80080ba:	4650      	mov	r0, sl
 80080bc:	4659      	mov	r1, fp
 80080be:	f7f8 faa3 	bl	8000608 <__aeabi_dmul>
 80080c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080c4:	9d01      	ldr	r5, [sp, #4]
 80080c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80080c8:	4682      	mov	sl, r0
 80080ca:	468b      	mov	fp, r1
 80080cc:	4649      	mov	r1, r9
 80080ce:	4640      	mov	r0, r8
 80080d0:	f7f8 fd4a 	bl	8000b68 <__aeabi_d2iz>
 80080d4:	4606      	mov	r6, r0
 80080d6:	f7f8 fa2d 	bl	8000534 <__aeabi_i2d>
 80080da:	3630      	adds	r6, #48	; 0x30
 80080dc:	4602      	mov	r2, r0
 80080de:	460b      	mov	r3, r1
 80080e0:	4640      	mov	r0, r8
 80080e2:	4649      	mov	r1, r9
 80080e4:	f7f8 f8d8 	bl	8000298 <__aeabi_dsub>
 80080e8:	f805 6b01 	strb.w	r6, [r5], #1
 80080ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080ee:	429d      	cmp	r5, r3
 80080f0:	4680      	mov	r8, r0
 80080f2:	4689      	mov	r9, r1
 80080f4:	f04f 0200 	mov.w	r2, #0
 80080f8:	d124      	bne.n	8008144 <_dtoa_r+0x60c>
 80080fa:	4b1b      	ldr	r3, [pc, #108]	; (8008168 <_dtoa_r+0x630>)
 80080fc:	4650      	mov	r0, sl
 80080fe:	4659      	mov	r1, fp
 8008100:	f7f8 f8cc 	bl	800029c <__adddf3>
 8008104:	4602      	mov	r2, r0
 8008106:	460b      	mov	r3, r1
 8008108:	4640      	mov	r0, r8
 800810a:	4649      	mov	r1, r9
 800810c:	f7f8 fd0c 	bl	8000b28 <__aeabi_dcmpgt>
 8008110:	2800      	cmp	r0, #0
 8008112:	d173      	bne.n	80081fc <_dtoa_r+0x6c4>
 8008114:	4652      	mov	r2, sl
 8008116:	465b      	mov	r3, fp
 8008118:	4913      	ldr	r1, [pc, #76]	; (8008168 <_dtoa_r+0x630>)
 800811a:	2000      	movs	r0, #0
 800811c:	f7f8 f8bc 	bl	8000298 <__aeabi_dsub>
 8008120:	4602      	mov	r2, r0
 8008122:	460b      	mov	r3, r1
 8008124:	4640      	mov	r0, r8
 8008126:	4649      	mov	r1, r9
 8008128:	f7f8 fce0 	bl	8000aec <__aeabi_dcmplt>
 800812c:	2800      	cmp	r0, #0
 800812e:	f43f af35 	beq.w	8007f9c <_dtoa_r+0x464>
 8008132:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008134:	1e6b      	subs	r3, r5, #1
 8008136:	930f      	str	r3, [sp, #60]	; 0x3c
 8008138:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800813c:	2b30      	cmp	r3, #48	; 0x30
 800813e:	d0f8      	beq.n	8008132 <_dtoa_r+0x5fa>
 8008140:	9700      	str	r7, [sp, #0]
 8008142:	e049      	b.n	80081d8 <_dtoa_r+0x6a0>
 8008144:	4b05      	ldr	r3, [pc, #20]	; (800815c <_dtoa_r+0x624>)
 8008146:	f7f8 fa5f 	bl	8000608 <__aeabi_dmul>
 800814a:	4680      	mov	r8, r0
 800814c:	4689      	mov	r9, r1
 800814e:	e7bd      	b.n	80080cc <_dtoa_r+0x594>
 8008150:	0800c180 	.word	0x0800c180
 8008154:	0800c158 	.word	0x0800c158
 8008158:	3ff00000 	.word	0x3ff00000
 800815c:	40240000 	.word	0x40240000
 8008160:	401c0000 	.word	0x401c0000
 8008164:	40140000 	.word	0x40140000
 8008168:	3fe00000 	.word	0x3fe00000
 800816c:	9d01      	ldr	r5, [sp, #4]
 800816e:	4656      	mov	r6, sl
 8008170:	465f      	mov	r7, fp
 8008172:	4642      	mov	r2, r8
 8008174:	464b      	mov	r3, r9
 8008176:	4630      	mov	r0, r6
 8008178:	4639      	mov	r1, r7
 800817a:	f7f8 fb6f 	bl	800085c <__aeabi_ddiv>
 800817e:	f7f8 fcf3 	bl	8000b68 <__aeabi_d2iz>
 8008182:	4682      	mov	sl, r0
 8008184:	f7f8 f9d6 	bl	8000534 <__aeabi_i2d>
 8008188:	4642      	mov	r2, r8
 800818a:	464b      	mov	r3, r9
 800818c:	f7f8 fa3c 	bl	8000608 <__aeabi_dmul>
 8008190:	4602      	mov	r2, r0
 8008192:	460b      	mov	r3, r1
 8008194:	4630      	mov	r0, r6
 8008196:	4639      	mov	r1, r7
 8008198:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800819c:	f7f8 f87c 	bl	8000298 <__aeabi_dsub>
 80081a0:	f805 6b01 	strb.w	r6, [r5], #1
 80081a4:	9e01      	ldr	r6, [sp, #4]
 80081a6:	9f03      	ldr	r7, [sp, #12]
 80081a8:	1bae      	subs	r6, r5, r6
 80081aa:	42b7      	cmp	r7, r6
 80081ac:	4602      	mov	r2, r0
 80081ae:	460b      	mov	r3, r1
 80081b0:	d135      	bne.n	800821e <_dtoa_r+0x6e6>
 80081b2:	f7f8 f873 	bl	800029c <__adddf3>
 80081b6:	4642      	mov	r2, r8
 80081b8:	464b      	mov	r3, r9
 80081ba:	4606      	mov	r6, r0
 80081bc:	460f      	mov	r7, r1
 80081be:	f7f8 fcb3 	bl	8000b28 <__aeabi_dcmpgt>
 80081c2:	b9d0      	cbnz	r0, 80081fa <_dtoa_r+0x6c2>
 80081c4:	4642      	mov	r2, r8
 80081c6:	464b      	mov	r3, r9
 80081c8:	4630      	mov	r0, r6
 80081ca:	4639      	mov	r1, r7
 80081cc:	f7f8 fc84 	bl	8000ad8 <__aeabi_dcmpeq>
 80081d0:	b110      	cbz	r0, 80081d8 <_dtoa_r+0x6a0>
 80081d2:	f01a 0f01 	tst.w	sl, #1
 80081d6:	d110      	bne.n	80081fa <_dtoa_r+0x6c2>
 80081d8:	4620      	mov	r0, r4
 80081da:	ee18 1a10 	vmov	r1, s16
 80081de:	f000 fe75 	bl	8008ecc <_Bfree>
 80081e2:	2300      	movs	r3, #0
 80081e4:	9800      	ldr	r0, [sp, #0]
 80081e6:	702b      	strb	r3, [r5, #0]
 80081e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80081ea:	3001      	adds	r0, #1
 80081ec:	6018      	str	r0, [r3, #0]
 80081ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	f43f acf1 	beq.w	8007bd8 <_dtoa_r+0xa0>
 80081f6:	601d      	str	r5, [r3, #0]
 80081f8:	e4ee      	b.n	8007bd8 <_dtoa_r+0xa0>
 80081fa:	9f00      	ldr	r7, [sp, #0]
 80081fc:	462b      	mov	r3, r5
 80081fe:	461d      	mov	r5, r3
 8008200:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008204:	2a39      	cmp	r2, #57	; 0x39
 8008206:	d106      	bne.n	8008216 <_dtoa_r+0x6de>
 8008208:	9a01      	ldr	r2, [sp, #4]
 800820a:	429a      	cmp	r2, r3
 800820c:	d1f7      	bne.n	80081fe <_dtoa_r+0x6c6>
 800820e:	9901      	ldr	r1, [sp, #4]
 8008210:	2230      	movs	r2, #48	; 0x30
 8008212:	3701      	adds	r7, #1
 8008214:	700a      	strb	r2, [r1, #0]
 8008216:	781a      	ldrb	r2, [r3, #0]
 8008218:	3201      	adds	r2, #1
 800821a:	701a      	strb	r2, [r3, #0]
 800821c:	e790      	b.n	8008140 <_dtoa_r+0x608>
 800821e:	4ba6      	ldr	r3, [pc, #664]	; (80084b8 <_dtoa_r+0x980>)
 8008220:	2200      	movs	r2, #0
 8008222:	f7f8 f9f1 	bl	8000608 <__aeabi_dmul>
 8008226:	2200      	movs	r2, #0
 8008228:	2300      	movs	r3, #0
 800822a:	4606      	mov	r6, r0
 800822c:	460f      	mov	r7, r1
 800822e:	f7f8 fc53 	bl	8000ad8 <__aeabi_dcmpeq>
 8008232:	2800      	cmp	r0, #0
 8008234:	d09d      	beq.n	8008172 <_dtoa_r+0x63a>
 8008236:	e7cf      	b.n	80081d8 <_dtoa_r+0x6a0>
 8008238:	9a08      	ldr	r2, [sp, #32]
 800823a:	2a00      	cmp	r2, #0
 800823c:	f000 80d7 	beq.w	80083ee <_dtoa_r+0x8b6>
 8008240:	9a06      	ldr	r2, [sp, #24]
 8008242:	2a01      	cmp	r2, #1
 8008244:	f300 80ba 	bgt.w	80083bc <_dtoa_r+0x884>
 8008248:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800824a:	2a00      	cmp	r2, #0
 800824c:	f000 80b2 	beq.w	80083b4 <_dtoa_r+0x87c>
 8008250:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008254:	9e07      	ldr	r6, [sp, #28]
 8008256:	9d04      	ldr	r5, [sp, #16]
 8008258:	9a04      	ldr	r2, [sp, #16]
 800825a:	441a      	add	r2, r3
 800825c:	9204      	str	r2, [sp, #16]
 800825e:	9a05      	ldr	r2, [sp, #20]
 8008260:	2101      	movs	r1, #1
 8008262:	441a      	add	r2, r3
 8008264:	4620      	mov	r0, r4
 8008266:	9205      	str	r2, [sp, #20]
 8008268:	f000 ff32 	bl	80090d0 <__i2b>
 800826c:	4607      	mov	r7, r0
 800826e:	2d00      	cmp	r5, #0
 8008270:	dd0c      	ble.n	800828c <_dtoa_r+0x754>
 8008272:	9b05      	ldr	r3, [sp, #20]
 8008274:	2b00      	cmp	r3, #0
 8008276:	dd09      	ble.n	800828c <_dtoa_r+0x754>
 8008278:	42ab      	cmp	r3, r5
 800827a:	9a04      	ldr	r2, [sp, #16]
 800827c:	bfa8      	it	ge
 800827e:	462b      	movge	r3, r5
 8008280:	1ad2      	subs	r2, r2, r3
 8008282:	9204      	str	r2, [sp, #16]
 8008284:	9a05      	ldr	r2, [sp, #20]
 8008286:	1aed      	subs	r5, r5, r3
 8008288:	1ad3      	subs	r3, r2, r3
 800828a:	9305      	str	r3, [sp, #20]
 800828c:	9b07      	ldr	r3, [sp, #28]
 800828e:	b31b      	cbz	r3, 80082d8 <_dtoa_r+0x7a0>
 8008290:	9b08      	ldr	r3, [sp, #32]
 8008292:	2b00      	cmp	r3, #0
 8008294:	f000 80af 	beq.w	80083f6 <_dtoa_r+0x8be>
 8008298:	2e00      	cmp	r6, #0
 800829a:	dd13      	ble.n	80082c4 <_dtoa_r+0x78c>
 800829c:	4639      	mov	r1, r7
 800829e:	4632      	mov	r2, r6
 80082a0:	4620      	mov	r0, r4
 80082a2:	f000 ffd5 	bl	8009250 <__pow5mult>
 80082a6:	ee18 2a10 	vmov	r2, s16
 80082aa:	4601      	mov	r1, r0
 80082ac:	4607      	mov	r7, r0
 80082ae:	4620      	mov	r0, r4
 80082b0:	f000 ff24 	bl	80090fc <__multiply>
 80082b4:	ee18 1a10 	vmov	r1, s16
 80082b8:	4680      	mov	r8, r0
 80082ba:	4620      	mov	r0, r4
 80082bc:	f000 fe06 	bl	8008ecc <_Bfree>
 80082c0:	ee08 8a10 	vmov	s16, r8
 80082c4:	9b07      	ldr	r3, [sp, #28]
 80082c6:	1b9a      	subs	r2, r3, r6
 80082c8:	d006      	beq.n	80082d8 <_dtoa_r+0x7a0>
 80082ca:	ee18 1a10 	vmov	r1, s16
 80082ce:	4620      	mov	r0, r4
 80082d0:	f000 ffbe 	bl	8009250 <__pow5mult>
 80082d4:	ee08 0a10 	vmov	s16, r0
 80082d8:	2101      	movs	r1, #1
 80082da:	4620      	mov	r0, r4
 80082dc:	f000 fef8 	bl	80090d0 <__i2b>
 80082e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	4606      	mov	r6, r0
 80082e6:	f340 8088 	ble.w	80083fa <_dtoa_r+0x8c2>
 80082ea:	461a      	mov	r2, r3
 80082ec:	4601      	mov	r1, r0
 80082ee:	4620      	mov	r0, r4
 80082f0:	f000 ffae 	bl	8009250 <__pow5mult>
 80082f4:	9b06      	ldr	r3, [sp, #24]
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	4606      	mov	r6, r0
 80082fa:	f340 8081 	ble.w	8008400 <_dtoa_r+0x8c8>
 80082fe:	f04f 0800 	mov.w	r8, #0
 8008302:	6933      	ldr	r3, [r6, #16]
 8008304:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008308:	6918      	ldr	r0, [r3, #16]
 800830a:	f000 fe91 	bl	8009030 <__hi0bits>
 800830e:	f1c0 0020 	rsb	r0, r0, #32
 8008312:	9b05      	ldr	r3, [sp, #20]
 8008314:	4418      	add	r0, r3
 8008316:	f010 001f 	ands.w	r0, r0, #31
 800831a:	f000 8092 	beq.w	8008442 <_dtoa_r+0x90a>
 800831e:	f1c0 0320 	rsb	r3, r0, #32
 8008322:	2b04      	cmp	r3, #4
 8008324:	f340 808a 	ble.w	800843c <_dtoa_r+0x904>
 8008328:	f1c0 001c 	rsb	r0, r0, #28
 800832c:	9b04      	ldr	r3, [sp, #16]
 800832e:	4403      	add	r3, r0
 8008330:	9304      	str	r3, [sp, #16]
 8008332:	9b05      	ldr	r3, [sp, #20]
 8008334:	4403      	add	r3, r0
 8008336:	4405      	add	r5, r0
 8008338:	9305      	str	r3, [sp, #20]
 800833a:	9b04      	ldr	r3, [sp, #16]
 800833c:	2b00      	cmp	r3, #0
 800833e:	dd07      	ble.n	8008350 <_dtoa_r+0x818>
 8008340:	ee18 1a10 	vmov	r1, s16
 8008344:	461a      	mov	r2, r3
 8008346:	4620      	mov	r0, r4
 8008348:	f000 ffdc 	bl	8009304 <__lshift>
 800834c:	ee08 0a10 	vmov	s16, r0
 8008350:	9b05      	ldr	r3, [sp, #20]
 8008352:	2b00      	cmp	r3, #0
 8008354:	dd05      	ble.n	8008362 <_dtoa_r+0x82a>
 8008356:	4631      	mov	r1, r6
 8008358:	461a      	mov	r2, r3
 800835a:	4620      	mov	r0, r4
 800835c:	f000 ffd2 	bl	8009304 <__lshift>
 8008360:	4606      	mov	r6, r0
 8008362:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008364:	2b00      	cmp	r3, #0
 8008366:	d06e      	beq.n	8008446 <_dtoa_r+0x90e>
 8008368:	ee18 0a10 	vmov	r0, s16
 800836c:	4631      	mov	r1, r6
 800836e:	f001 f839 	bl	80093e4 <__mcmp>
 8008372:	2800      	cmp	r0, #0
 8008374:	da67      	bge.n	8008446 <_dtoa_r+0x90e>
 8008376:	9b00      	ldr	r3, [sp, #0]
 8008378:	3b01      	subs	r3, #1
 800837a:	ee18 1a10 	vmov	r1, s16
 800837e:	9300      	str	r3, [sp, #0]
 8008380:	220a      	movs	r2, #10
 8008382:	2300      	movs	r3, #0
 8008384:	4620      	mov	r0, r4
 8008386:	f000 fdc3 	bl	8008f10 <__multadd>
 800838a:	9b08      	ldr	r3, [sp, #32]
 800838c:	ee08 0a10 	vmov	s16, r0
 8008390:	2b00      	cmp	r3, #0
 8008392:	f000 81b1 	beq.w	80086f8 <_dtoa_r+0xbc0>
 8008396:	2300      	movs	r3, #0
 8008398:	4639      	mov	r1, r7
 800839a:	220a      	movs	r2, #10
 800839c:	4620      	mov	r0, r4
 800839e:	f000 fdb7 	bl	8008f10 <__multadd>
 80083a2:	9b02      	ldr	r3, [sp, #8]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	4607      	mov	r7, r0
 80083a8:	f300 808e 	bgt.w	80084c8 <_dtoa_r+0x990>
 80083ac:	9b06      	ldr	r3, [sp, #24]
 80083ae:	2b02      	cmp	r3, #2
 80083b0:	dc51      	bgt.n	8008456 <_dtoa_r+0x91e>
 80083b2:	e089      	b.n	80084c8 <_dtoa_r+0x990>
 80083b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80083b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80083ba:	e74b      	b.n	8008254 <_dtoa_r+0x71c>
 80083bc:	9b03      	ldr	r3, [sp, #12]
 80083be:	1e5e      	subs	r6, r3, #1
 80083c0:	9b07      	ldr	r3, [sp, #28]
 80083c2:	42b3      	cmp	r3, r6
 80083c4:	bfbf      	itttt	lt
 80083c6:	9b07      	ldrlt	r3, [sp, #28]
 80083c8:	9607      	strlt	r6, [sp, #28]
 80083ca:	1af2      	sublt	r2, r6, r3
 80083cc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80083ce:	bfb6      	itet	lt
 80083d0:	189b      	addlt	r3, r3, r2
 80083d2:	1b9e      	subge	r6, r3, r6
 80083d4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80083d6:	9b03      	ldr	r3, [sp, #12]
 80083d8:	bfb8      	it	lt
 80083da:	2600      	movlt	r6, #0
 80083dc:	2b00      	cmp	r3, #0
 80083de:	bfb7      	itett	lt
 80083e0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80083e4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80083e8:	1a9d      	sublt	r5, r3, r2
 80083ea:	2300      	movlt	r3, #0
 80083ec:	e734      	b.n	8008258 <_dtoa_r+0x720>
 80083ee:	9e07      	ldr	r6, [sp, #28]
 80083f0:	9d04      	ldr	r5, [sp, #16]
 80083f2:	9f08      	ldr	r7, [sp, #32]
 80083f4:	e73b      	b.n	800826e <_dtoa_r+0x736>
 80083f6:	9a07      	ldr	r2, [sp, #28]
 80083f8:	e767      	b.n	80082ca <_dtoa_r+0x792>
 80083fa:	9b06      	ldr	r3, [sp, #24]
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	dc18      	bgt.n	8008432 <_dtoa_r+0x8fa>
 8008400:	f1ba 0f00 	cmp.w	sl, #0
 8008404:	d115      	bne.n	8008432 <_dtoa_r+0x8fa>
 8008406:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800840a:	b993      	cbnz	r3, 8008432 <_dtoa_r+0x8fa>
 800840c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008410:	0d1b      	lsrs	r3, r3, #20
 8008412:	051b      	lsls	r3, r3, #20
 8008414:	b183      	cbz	r3, 8008438 <_dtoa_r+0x900>
 8008416:	9b04      	ldr	r3, [sp, #16]
 8008418:	3301      	adds	r3, #1
 800841a:	9304      	str	r3, [sp, #16]
 800841c:	9b05      	ldr	r3, [sp, #20]
 800841e:	3301      	adds	r3, #1
 8008420:	9305      	str	r3, [sp, #20]
 8008422:	f04f 0801 	mov.w	r8, #1
 8008426:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008428:	2b00      	cmp	r3, #0
 800842a:	f47f af6a 	bne.w	8008302 <_dtoa_r+0x7ca>
 800842e:	2001      	movs	r0, #1
 8008430:	e76f      	b.n	8008312 <_dtoa_r+0x7da>
 8008432:	f04f 0800 	mov.w	r8, #0
 8008436:	e7f6      	b.n	8008426 <_dtoa_r+0x8ee>
 8008438:	4698      	mov	r8, r3
 800843a:	e7f4      	b.n	8008426 <_dtoa_r+0x8ee>
 800843c:	f43f af7d 	beq.w	800833a <_dtoa_r+0x802>
 8008440:	4618      	mov	r0, r3
 8008442:	301c      	adds	r0, #28
 8008444:	e772      	b.n	800832c <_dtoa_r+0x7f4>
 8008446:	9b03      	ldr	r3, [sp, #12]
 8008448:	2b00      	cmp	r3, #0
 800844a:	dc37      	bgt.n	80084bc <_dtoa_r+0x984>
 800844c:	9b06      	ldr	r3, [sp, #24]
 800844e:	2b02      	cmp	r3, #2
 8008450:	dd34      	ble.n	80084bc <_dtoa_r+0x984>
 8008452:	9b03      	ldr	r3, [sp, #12]
 8008454:	9302      	str	r3, [sp, #8]
 8008456:	9b02      	ldr	r3, [sp, #8]
 8008458:	b96b      	cbnz	r3, 8008476 <_dtoa_r+0x93e>
 800845a:	4631      	mov	r1, r6
 800845c:	2205      	movs	r2, #5
 800845e:	4620      	mov	r0, r4
 8008460:	f000 fd56 	bl	8008f10 <__multadd>
 8008464:	4601      	mov	r1, r0
 8008466:	4606      	mov	r6, r0
 8008468:	ee18 0a10 	vmov	r0, s16
 800846c:	f000 ffba 	bl	80093e4 <__mcmp>
 8008470:	2800      	cmp	r0, #0
 8008472:	f73f adbb 	bgt.w	8007fec <_dtoa_r+0x4b4>
 8008476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008478:	9d01      	ldr	r5, [sp, #4]
 800847a:	43db      	mvns	r3, r3
 800847c:	9300      	str	r3, [sp, #0]
 800847e:	f04f 0800 	mov.w	r8, #0
 8008482:	4631      	mov	r1, r6
 8008484:	4620      	mov	r0, r4
 8008486:	f000 fd21 	bl	8008ecc <_Bfree>
 800848a:	2f00      	cmp	r7, #0
 800848c:	f43f aea4 	beq.w	80081d8 <_dtoa_r+0x6a0>
 8008490:	f1b8 0f00 	cmp.w	r8, #0
 8008494:	d005      	beq.n	80084a2 <_dtoa_r+0x96a>
 8008496:	45b8      	cmp	r8, r7
 8008498:	d003      	beq.n	80084a2 <_dtoa_r+0x96a>
 800849a:	4641      	mov	r1, r8
 800849c:	4620      	mov	r0, r4
 800849e:	f000 fd15 	bl	8008ecc <_Bfree>
 80084a2:	4639      	mov	r1, r7
 80084a4:	4620      	mov	r0, r4
 80084a6:	f000 fd11 	bl	8008ecc <_Bfree>
 80084aa:	e695      	b.n	80081d8 <_dtoa_r+0x6a0>
 80084ac:	2600      	movs	r6, #0
 80084ae:	4637      	mov	r7, r6
 80084b0:	e7e1      	b.n	8008476 <_dtoa_r+0x93e>
 80084b2:	9700      	str	r7, [sp, #0]
 80084b4:	4637      	mov	r7, r6
 80084b6:	e599      	b.n	8007fec <_dtoa_r+0x4b4>
 80084b8:	40240000 	.word	0x40240000
 80084bc:	9b08      	ldr	r3, [sp, #32]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	f000 80ca 	beq.w	8008658 <_dtoa_r+0xb20>
 80084c4:	9b03      	ldr	r3, [sp, #12]
 80084c6:	9302      	str	r3, [sp, #8]
 80084c8:	2d00      	cmp	r5, #0
 80084ca:	dd05      	ble.n	80084d8 <_dtoa_r+0x9a0>
 80084cc:	4639      	mov	r1, r7
 80084ce:	462a      	mov	r2, r5
 80084d0:	4620      	mov	r0, r4
 80084d2:	f000 ff17 	bl	8009304 <__lshift>
 80084d6:	4607      	mov	r7, r0
 80084d8:	f1b8 0f00 	cmp.w	r8, #0
 80084dc:	d05b      	beq.n	8008596 <_dtoa_r+0xa5e>
 80084de:	6879      	ldr	r1, [r7, #4]
 80084e0:	4620      	mov	r0, r4
 80084e2:	f000 fcb3 	bl	8008e4c <_Balloc>
 80084e6:	4605      	mov	r5, r0
 80084e8:	b928      	cbnz	r0, 80084f6 <_dtoa_r+0x9be>
 80084ea:	4b87      	ldr	r3, [pc, #540]	; (8008708 <_dtoa_r+0xbd0>)
 80084ec:	4602      	mov	r2, r0
 80084ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 80084f2:	f7ff bb3b 	b.w	8007b6c <_dtoa_r+0x34>
 80084f6:	693a      	ldr	r2, [r7, #16]
 80084f8:	3202      	adds	r2, #2
 80084fa:	0092      	lsls	r2, r2, #2
 80084fc:	f107 010c 	add.w	r1, r7, #12
 8008500:	300c      	adds	r0, #12
 8008502:	f000 fc95 	bl	8008e30 <memcpy>
 8008506:	2201      	movs	r2, #1
 8008508:	4629      	mov	r1, r5
 800850a:	4620      	mov	r0, r4
 800850c:	f000 fefa 	bl	8009304 <__lshift>
 8008510:	9b01      	ldr	r3, [sp, #4]
 8008512:	f103 0901 	add.w	r9, r3, #1
 8008516:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800851a:	4413      	add	r3, r2
 800851c:	9305      	str	r3, [sp, #20]
 800851e:	f00a 0301 	and.w	r3, sl, #1
 8008522:	46b8      	mov	r8, r7
 8008524:	9304      	str	r3, [sp, #16]
 8008526:	4607      	mov	r7, r0
 8008528:	4631      	mov	r1, r6
 800852a:	ee18 0a10 	vmov	r0, s16
 800852e:	f7ff fa77 	bl	8007a20 <quorem>
 8008532:	4641      	mov	r1, r8
 8008534:	9002      	str	r0, [sp, #8]
 8008536:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800853a:	ee18 0a10 	vmov	r0, s16
 800853e:	f000 ff51 	bl	80093e4 <__mcmp>
 8008542:	463a      	mov	r2, r7
 8008544:	9003      	str	r0, [sp, #12]
 8008546:	4631      	mov	r1, r6
 8008548:	4620      	mov	r0, r4
 800854a:	f000 ff67 	bl	800941c <__mdiff>
 800854e:	68c2      	ldr	r2, [r0, #12]
 8008550:	f109 3bff 	add.w	fp, r9, #4294967295
 8008554:	4605      	mov	r5, r0
 8008556:	bb02      	cbnz	r2, 800859a <_dtoa_r+0xa62>
 8008558:	4601      	mov	r1, r0
 800855a:	ee18 0a10 	vmov	r0, s16
 800855e:	f000 ff41 	bl	80093e4 <__mcmp>
 8008562:	4602      	mov	r2, r0
 8008564:	4629      	mov	r1, r5
 8008566:	4620      	mov	r0, r4
 8008568:	9207      	str	r2, [sp, #28]
 800856a:	f000 fcaf 	bl	8008ecc <_Bfree>
 800856e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008572:	ea43 0102 	orr.w	r1, r3, r2
 8008576:	9b04      	ldr	r3, [sp, #16]
 8008578:	430b      	orrs	r3, r1
 800857a:	464d      	mov	r5, r9
 800857c:	d10f      	bne.n	800859e <_dtoa_r+0xa66>
 800857e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008582:	d02a      	beq.n	80085da <_dtoa_r+0xaa2>
 8008584:	9b03      	ldr	r3, [sp, #12]
 8008586:	2b00      	cmp	r3, #0
 8008588:	dd02      	ble.n	8008590 <_dtoa_r+0xa58>
 800858a:	9b02      	ldr	r3, [sp, #8]
 800858c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008590:	f88b a000 	strb.w	sl, [fp]
 8008594:	e775      	b.n	8008482 <_dtoa_r+0x94a>
 8008596:	4638      	mov	r0, r7
 8008598:	e7ba      	b.n	8008510 <_dtoa_r+0x9d8>
 800859a:	2201      	movs	r2, #1
 800859c:	e7e2      	b.n	8008564 <_dtoa_r+0xa2c>
 800859e:	9b03      	ldr	r3, [sp, #12]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	db04      	blt.n	80085ae <_dtoa_r+0xa76>
 80085a4:	9906      	ldr	r1, [sp, #24]
 80085a6:	430b      	orrs	r3, r1
 80085a8:	9904      	ldr	r1, [sp, #16]
 80085aa:	430b      	orrs	r3, r1
 80085ac:	d122      	bne.n	80085f4 <_dtoa_r+0xabc>
 80085ae:	2a00      	cmp	r2, #0
 80085b0:	ddee      	ble.n	8008590 <_dtoa_r+0xa58>
 80085b2:	ee18 1a10 	vmov	r1, s16
 80085b6:	2201      	movs	r2, #1
 80085b8:	4620      	mov	r0, r4
 80085ba:	f000 fea3 	bl	8009304 <__lshift>
 80085be:	4631      	mov	r1, r6
 80085c0:	ee08 0a10 	vmov	s16, r0
 80085c4:	f000 ff0e 	bl	80093e4 <__mcmp>
 80085c8:	2800      	cmp	r0, #0
 80085ca:	dc03      	bgt.n	80085d4 <_dtoa_r+0xa9c>
 80085cc:	d1e0      	bne.n	8008590 <_dtoa_r+0xa58>
 80085ce:	f01a 0f01 	tst.w	sl, #1
 80085d2:	d0dd      	beq.n	8008590 <_dtoa_r+0xa58>
 80085d4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80085d8:	d1d7      	bne.n	800858a <_dtoa_r+0xa52>
 80085da:	2339      	movs	r3, #57	; 0x39
 80085dc:	f88b 3000 	strb.w	r3, [fp]
 80085e0:	462b      	mov	r3, r5
 80085e2:	461d      	mov	r5, r3
 80085e4:	3b01      	subs	r3, #1
 80085e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80085ea:	2a39      	cmp	r2, #57	; 0x39
 80085ec:	d071      	beq.n	80086d2 <_dtoa_r+0xb9a>
 80085ee:	3201      	adds	r2, #1
 80085f0:	701a      	strb	r2, [r3, #0]
 80085f2:	e746      	b.n	8008482 <_dtoa_r+0x94a>
 80085f4:	2a00      	cmp	r2, #0
 80085f6:	dd07      	ble.n	8008608 <_dtoa_r+0xad0>
 80085f8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80085fc:	d0ed      	beq.n	80085da <_dtoa_r+0xaa2>
 80085fe:	f10a 0301 	add.w	r3, sl, #1
 8008602:	f88b 3000 	strb.w	r3, [fp]
 8008606:	e73c      	b.n	8008482 <_dtoa_r+0x94a>
 8008608:	9b05      	ldr	r3, [sp, #20]
 800860a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800860e:	4599      	cmp	r9, r3
 8008610:	d047      	beq.n	80086a2 <_dtoa_r+0xb6a>
 8008612:	ee18 1a10 	vmov	r1, s16
 8008616:	2300      	movs	r3, #0
 8008618:	220a      	movs	r2, #10
 800861a:	4620      	mov	r0, r4
 800861c:	f000 fc78 	bl	8008f10 <__multadd>
 8008620:	45b8      	cmp	r8, r7
 8008622:	ee08 0a10 	vmov	s16, r0
 8008626:	f04f 0300 	mov.w	r3, #0
 800862a:	f04f 020a 	mov.w	r2, #10
 800862e:	4641      	mov	r1, r8
 8008630:	4620      	mov	r0, r4
 8008632:	d106      	bne.n	8008642 <_dtoa_r+0xb0a>
 8008634:	f000 fc6c 	bl	8008f10 <__multadd>
 8008638:	4680      	mov	r8, r0
 800863a:	4607      	mov	r7, r0
 800863c:	f109 0901 	add.w	r9, r9, #1
 8008640:	e772      	b.n	8008528 <_dtoa_r+0x9f0>
 8008642:	f000 fc65 	bl	8008f10 <__multadd>
 8008646:	4639      	mov	r1, r7
 8008648:	4680      	mov	r8, r0
 800864a:	2300      	movs	r3, #0
 800864c:	220a      	movs	r2, #10
 800864e:	4620      	mov	r0, r4
 8008650:	f000 fc5e 	bl	8008f10 <__multadd>
 8008654:	4607      	mov	r7, r0
 8008656:	e7f1      	b.n	800863c <_dtoa_r+0xb04>
 8008658:	9b03      	ldr	r3, [sp, #12]
 800865a:	9302      	str	r3, [sp, #8]
 800865c:	9d01      	ldr	r5, [sp, #4]
 800865e:	ee18 0a10 	vmov	r0, s16
 8008662:	4631      	mov	r1, r6
 8008664:	f7ff f9dc 	bl	8007a20 <quorem>
 8008668:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800866c:	9b01      	ldr	r3, [sp, #4]
 800866e:	f805 ab01 	strb.w	sl, [r5], #1
 8008672:	1aea      	subs	r2, r5, r3
 8008674:	9b02      	ldr	r3, [sp, #8]
 8008676:	4293      	cmp	r3, r2
 8008678:	dd09      	ble.n	800868e <_dtoa_r+0xb56>
 800867a:	ee18 1a10 	vmov	r1, s16
 800867e:	2300      	movs	r3, #0
 8008680:	220a      	movs	r2, #10
 8008682:	4620      	mov	r0, r4
 8008684:	f000 fc44 	bl	8008f10 <__multadd>
 8008688:	ee08 0a10 	vmov	s16, r0
 800868c:	e7e7      	b.n	800865e <_dtoa_r+0xb26>
 800868e:	9b02      	ldr	r3, [sp, #8]
 8008690:	2b00      	cmp	r3, #0
 8008692:	bfc8      	it	gt
 8008694:	461d      	movgt	r5, r3
 8008696:	9b01      	ldr	r3, [sp, #4]
 8008698:	bfd8      	it	le
 800869a:	2501      	movle	r5, #1
 800869c:	441d      	add	r5, r3
 800869e:	f04f 0800 	mov.w	r8, #0
 80086a2:	ee18 1a10 	vmov	r1, s16
 80086a6:	2201      	movs	r2, #1
 80086a8:	4620      	mov	r0, r4
 80086aa:	f000 fe2b 	bl	8009304 <__lshift>
 80086ae:	4631      	mov	r1, r6
 80086b0:	ee08 0a10 	vmov	s16, r0
 80086b4:	f000 fe96 	bl	80093e4 <__mcmp>
 80086b8:	2800      	cmp	r0, #0
 80086ba:	dc91      	bgt.n	80085e0 <_dtoa_r+0xaa8>
 80086bc:	d102      	bne.n	80086c4 <_dtoa_r+0xb8c>
 80086be:	f01a 0f01 	tst.w	sl, #1
 80086c2:	d18d      	bne.n	80085e0 <_dtoa_r+0xaa8>
 80086c4:	462b      	mov	r3, r5
 80086c6:	461d      	mov	r5, r3
 80086c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80086cc:	2a30      	cmp	r2, #48	; 0x30
 80086ce:	d0fa      	beq.n	80086c6 <_dtoa_r+0xb8e>
 80086d0:	e6d7      	b.n	8008482 <_dtoa_r+0x94a>
 80086d2:	9a01      	ldr	r2, [sp, #4]
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d184      	bne.n	80085e2 <_dtoa_r+0xaaa>
 80086d8:	9b00      	ldr	r3, [sp, #0]
 80086da:	3301      	adds	r3, #1
 80086dc:	9300      	str	r3, [sp, #0]
 80086de:	2331      	movs	r3, #49	; 0x31
 80086e0:	7013      	strb	r3, [r2, #0]
 80086e2:	e6ce      	b.n	8008482 <_dtoa_r+0x94a>
 80086e4:	4b09      	ldr	r3, [pc, #36]	; (800870c <_dtoa_r+0xbd4>)
 80086e6:	f7ff ba95 	b.w	8007c14 <_dtoa_r+0xdc>
 80086ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	f47f aa6e 	bne.w	8007bce <_dtoa_r+0x96>
 80086f2:	4b07      	ldr	r3, [pc, #28]	; (8008710 <_dtoa_r+0xbd8>)
 80086f4:	f7ff ba8e 	b.w	8007c14 <_dtoa_r+0xdc>
 80086f8:	9b02      	ldr	r3, [sp, #8]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	dcae      	bgt.n	800865c <_dtoa_r+0xb24>
 80086fe:	9b06      	ldr	r3, [sp, #24]
 8008700:	2b02      	cmp	r3, #2
 8008702:	f73f aea8 	bgt.w	8008456 <_dtoa_r+0x91e>
 8008706:	e7a9      	b.n	800865c <_dtoa_r+0xb24>
 8008708:	0800c070 	.word	0x0800c070
 800870c:	0800be74 	.word	0x0800be74
 8008710:	0800bff1 	.word	0x0800bff1

08008714 <rshift>:
 8008714:	6903      	ldr	r3, [r0, #16]
 8008716:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800871a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800871e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008722:	f100 0414 	add.w	r4, r0, #20
 8008726:	dd45      	ble.n	80087b4 <rshift+0xa0>
 8008728:	f011 011f 	ands.w	r1, r1, #31
 800872c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008730:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008734:	d10c      	bne.n	8008750 <rshift+0x3c>
 8008736:	f100 0710 	add.w	r7, r0, #16
 800873a:	4629      	mov	r1, r5
 800873c:	42b1      	cmp	r1, r6
 800873e:	d334      	bcc.n	80087aa <rshift+0x96>
 8008740:	1a9b      	subs	r3, r3, r2
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	1eea      	subs	r2, r5, #3
 8008746:	4296      	cmp	r6, r2
 8008748:	bf38      	it	cc
 800874a:	2300      	movcc	r3, #0
 800874c:	4423      	add	r3, r4
 800874e:	e015      	b.n	800877c <rshift+0x68>
 8008750:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008754:	f1c1 0820 	rsb	r8, r1, #32
 8008758:	40cf      	lsrs	r7, r1
 800875a:	f105 0e04 	add.w	lr, r5, #4
 800875e:	46a1      	mov	r9, r4
 8008760:	4576      	cmp	r6, lr
 8008762:	46f4      	mov	ip, lr
 8008764:	d815      	bhi.n	8008792 <rshift+0x7e>
 8008766:	1a9a      	subs	r2, r3, r2
 8008768:	0092      	lsls	r2, r2, #2
 800876a:	3a04      	subs	r2, #4
 800876c:	3501      	adds	r5, #1
 800876e:	42ae      	cmp	r6, r5
 8008770:	bf38      	it	cc
 8008772:	2200      	movcc	r2, #0
 8008774:	18a3      	adds	r3, r4, r2
 8008776:	50a7      	str	r7, [r4, r2]
 8008778:	b107      	cbz	r7, 800877c <rshift+0x68>
 800877a:	3304      	adds	r3, #4
 800877c:	1b1a      	subs	r2, r3, r4
 800877e:	42a3      	cmp	r3, r4
 8008780:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008784:	bf08      	it	eq
 8008786:	2300      	moveq	r3, #0
 8008788:	6102      	str	r2, [r0, #16]
 800878a:	bf08      	it	eq
 800878c:	6143      	streq	r3, [r0, #20]
 800878e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008792:	f8dc c000 	ldr.w	ip, [ip]
 8008796:	fa0c fc08 	lsl.w	ip, ip, r8
 800879a:	ea4c 0707 	orr.w	r7, ip, r7
 800879e:	f849 7b04 	str.w	r7, [r9], #4
 80087a2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80087a6:	40cf      	lsrs	r7, r1
 80087a8:	e7da      	b.n	8008760 <rshift+0x4c>
 80087aa:	f851 cb04 	ldr.w	ip, [r1], #4
 80087ae:	f847 cf04 	str.w	ip, [r7, #4]!
 80087b2:	e7c3      	b.n	800873c <rshift+0x28>
 80087b4:	4623      	mov	r3, r4
 80087b6:	e7e1      	b.n	800877c <rshift+0x68>

080087b8 <__hexdig_fun>:
 80087b8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80087bc:	2b09      	cmp	r3, #9
 80087be:	d802      	bhi.n	80087c6 <__hexdig_fun+0xe>
 80087c0:	3820      	subs	r0, #32
 80087c2:	b2c0      	uxtb	r0, r0
 80087c4:	4770      	bx	lr
 80087c6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80087ca:	2b05      	cmp	r3, #5
 80087cc:	d801      	bhi.n	80087d2 <__hexdig_fun+0x1a>
 80087ce:	3847      	subs	r0, #71	; 0x47
 80087d0:	e7f7      	b.n	80087c2 <__hexdig_fun+0xa>
 80087d2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80087d6:	2b05      	cmp	r3, #5
 80087d8:	d801      	bhi.n	80087de <__hexdig_fun+0x26>
 80087da:	3827      	subs	r0, #39	; 0x27
 80087dc:	e7f1      	b.n	80087c2 <__hexdig_fun+0xa>
 80087de:	2000      	movs	r0, #0
 80087e0:	4770      	bx	lr
	...

080087e4 <__gethex>:
 80087e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087e8:	ed2d 8b02 	vpush	{d8}
 80087ec:	b089      	sub	sp, #36	; 0x24
 80087ee:	ee08 0a10 	vmov	s16, r0
 80087f2:	9304      	str	r3, [sp, #16]
 80087f4:	4bb4      	ldr	r3, [pc, #720]	; (8008ac8 <__gethex+0x2e4>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	9301      	str	r3, [sp, #4]
 80087fa:	4618      	mov	r0, r3
 80087fc:	468b      	mov	fp, r1
 80087fe:	4690      	mov	r8, r2
 8008800:	f7f7 fcee 	bl	80001e0 <strlen>
 8008804:	9b01      	ldr	r3, [sp, #4]
 8008806:	f8db 2000 	ldr.w	r2, [fp]
 800880a:	4403      	add	r3, r0
 800880c:	4682      	mov	sl, r0
 800880e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008812:	9305      	str	r3, [sp, #20]
 8008814:	1c93      	adds	r3, r2, #2
 8008816:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800881a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800881e:	32fe      	adds	r2, #254	; 0xfe
 8008820:	18d1      	adds	r1, r2, r3
 8008822:	461f      	mov	r7, r3
 8008824:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008828:	9100      	str	r1, [sp, #0]
 800882a:	2830      	cmp	r0, #48	; 0x30
 800882c:	d0f8      	beq.n	8008820 <__gethex+0x3c>
 800882e:	f7ff ffc3 	bl	80087b8 <__hexdig_fun>
 8008832:	4604      	mov	r4, r0
 8008834:	2800      	cmp	r0, #0
 8008836:	d13a      	bne.n	80088ae <__gethex+0xca>
 8008838:	9901      	ldr	r1, [sp, #4]
 800883a:	4652      	mov	r2, sl
 800883c:	4638      	mov	r0, r7
 800883e:	f001 fa33 	bl	8009ca8 <strncmp>
 8008842:	4605      	mov	r5, r0
 8008844:	2800      	cmp	r0, #0
 8008846:	d168      	bne.n	800891a <__gethex+0x136>
 8008848:	f817 000a 	ldrb.w	r0, [r7, sl]
 800884c:	eb07 060a 	add.w	r6, r7, sl
 8008850:	f7ff ffb2 	bl	80087b8 <__hexdig_fun>
 8008854:	2800      	cmp	r0, #0
 8008856:	d062      	beq.n	800891e <__gethex+0x13a>
 8008858:	4633      	mov	r3, r6
 800885a:	7818      	ldrb	r0, [r3, #0]
 800885c:	2830      	cmp	r0, #48	; 0x30
 800885e:	461f      	mov	r7, r3
 8008860:	f103 0301 	add.w	r3, r3, #1
 8008864:	d0f9      	beq.n	800885a <__gethex+0x76>
 8008866:	f7ff ffa7 	bl	80087b8 <__hexdig_fun>
 800886a:	2301      	movs	r3, #1
 800886c:	fab0 f480 	clz	r4, r0
 8008870:	0964      	lsrs	r4, r4, #5
 8008872:	4635      	mov	r5, r6
 8008874:	9300      	str	r3, [sp, #0]
 8008876:	463a      	mov	r2, r7
 8008878:	4616      	mov	r6, r2
 800887a:	3201      	adds	r2, #1
 800887c:	7830      	ldrb	r0, [r6, #0]
 800887e:	f7ff ff9b 	bl	80087b8 <__hexdig_fun>
 8008882:	2800      	cmp	r0, #0
 8008884:	d1f8      	bne.n	8008878 <__gethex+0x94>
 8008886:	9901      	ldr	r1, [sp, #4]
 8008888:	4652      	mov	r2, sl
 800888a:	4630      	mov	r0, r6
 800888c:	f001 fa0c 	bl	8009ca8 <strncmp>
 8008890:	b980      	cbnz	r0, 80088b4 <__gethex+0xd0>
 8008892:	b94d      	cbnz	r5, 80088a8 <__gethex+0xc4>
 8008894:	eb06 050a 	add.w	r5, r6, sl
 8008898:	462a      	mov	r2, r5
 800889a:	4616      	mov	r6, r2
 800889c:	3201      	adds	r2, #1
 800889e:	7830      	ldrb	r0, [r6, #0]
 80088a0:	f7ff ff8a 	bl	80087b8 <__hexdig_fun>
 80088a4:	2800      	cmp	r0, #0
 80088a6:	d1f8      	bne.n	800889a <__gethex+0xb6>
 80088a8:	1bad      	subs	r5, r5, r6
 80088aa:	00ad      	lsls	r5, r5, #2
 80088ac:	e004      	b.n	80088b8 <__gethex+0xd4>
 80088ae:	2400      	movs	r4, #0
 80088b0:	4625      	mov	r5, r4
 80088b2:	e7e0      	b.n	8008876 <__gethex+0x92>
 80088b4:	2d00      	cmp	r5, #0
 80088b6:	d1f7      	bne.n	80088a8 <__gethex+0xc4>
 80088b8:	7833      	ldrb	r3, [r6, #0]
 80088ba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80088be:	2b50      	cmp	r3, #80	; 0x50
 80088c0:	d13b      	bne.n	800893a <__gethex+0x156>
 80088c2:	7873      	ldrb	r3, [r6, #1]
 80088c4:	2b2b      	cmp	r3, #43	; 0x2b
 80088c6:	d02c      	beq.n	8008922 <__gethex+0x13e>
 80088c8:	2b2d      	cmp	r3, #45	; 0x2d
 80088ca:	d02e      	beq.n	800892a <__gethex+0x146>
 80088cc:	1c71      	adds	r1, r6, #1
 80088ce:	f04f 0900 	mov.w	r9, #0
 80088d2:	7808      	ldrb	r0, [r1, #0]
 80088d4:	f7ff ff70 	bl	80087b8 <__hexdig_fun>
 80088d8:	1e43      	subs	r3, r0, #1
 80088da:	b2db      	uxtb	r3, r3
 80088dc:	2b18      	cmp	r3, #24
 80088de:	d82c      	bhi.n	800893a <__gethex+0x156>
 80088e0:	f1a0 0210 	sub.w	r2, r0, #16
 80088e4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80088e8:	f7ff ff66 	bl	80087b8 <__hexdig_fun>
 80088ec:	1e43      	subs	r3, r0, #1
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	2b18      	cmp	r3, #24
 80088f2:	d91d      	bls.n	8008930 <__gethex+0x14c>
 80088f4:	f1b9 0f00 	cmp.w	r9, #0
 80088f8:	d000      	beq.n	80088fc <__gethex+0x118>
 80088fa:	4252      	negs	r2, r2
 80088fc:	4415      	add	r5, r2
 80088fe:	f8cb 1000 	str.w	r1, [fp]
 8008902:	b1e4      	cbz	r4, 800893e <__gethex+0x15a>
 8008904:	9b00      	ldr	r3, [sp, #0]
 8008906:	2b00      	cmp	r3, #0
 8008908:	bf14      	ite	ne
 800890a:	2700      	movne	r7, #0
 800890c:	2706      	moveq	r7, #6
 800890e:	4638      	mov	r0, r7
 8008910:	b009      	add	sp, #36	; 0x24
 8008912:	ecbd 8b02 	vpop	{d8}
 8008916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800891a:	463e      	mov	r6, r7
 800891c:	4625      	mov	r5, r4
 800891e:	2401      	movs	r4, #1
 8008920:	e7ca      	b.n	80088b8 <__gethex+0xd4>
 8008922:	f04f 0900 	mov.w	r9, #0
 8008926:	1cb1      	adds	r1, r6, #2
 8008928:	e7d3      	b.n	80088d2 <__gethex+0xee>
 800892a:	f04f 0901 	mov.w	r9, #1
 800892e:	e7fa      	b.n	8008926 <__gethex+0x142>
 8008930:	230a      	movs	r3, #10
 8008932:	fb03 0202 	mla	r2, r3, r2, r0
 8008936:	3a10      	subs	r2, #16
 8008938:	e7d4      	b.n	80088e4 <__gethex+0x100>
 800893a:	4631      	mov	r1, r6
 800893c:	e7df      	b.n	80088fe <__gethex+0x11a>
 800893e:	1bf3      	subs	r3, r6, r7
 8008940:	3b01      	subs	r3, #1
 8008942:	4621      	mov	r1, r4
 8008944:	2b07      	cmp	r3, #7
 8008946:	dc0b      	bgt.n	8008960 <__gethex+0x17c>
 8008948:	ee18 0a10 	vmov	r0, s16
 800894c:	f000 fa7e 	bl	8008e4c <_Balloc>
 8008950:	4604      	mov	r4, r0
 8008952:	b940      	cbnz	r0, 8008966 <__gethex+0x182>
 8008954:	4b5d      	ldr	r3, [pc, #372]	; (8008acc <__gethex+0x2e8>)
 8008956:	4602      	mov	r2, r0
 8008958:	21de      	movs	r1, #222	; 0xde
 800895a:	485d      	ldr	r0, [pc, #372]	; (8008ad0 <__gethex+0x2ec>)
 800895c:	f001 f9c6 	bl	8009cec <__assert_func>
 8008960:	3101      	adds	r1, #1
 8008962:	105b      	asrs	r3, r3, #1
 8008964:	e7ee      	b.n	8008944 <__gethex+0x160>
 8008966:	f100 0914 	add.w	r9, r0, #20
 800896a:	f04f 0b00 	mov.w	fp, #0
 800896e:	f1ca 0301 	rsb	r3, sl, #1
 8008972:	f8cd 9008 	str.w	r9, [sp, #8]
 8008976:	f8cd b000 	str.w	fp, [sp]
 800897a:	9306      	str	r3, [sp, #24]
 800897c:	42b7      	cmp	r7, r6
 800897e:	d340      	bcc.n	8008a02 <__gethex+0x21e>
 8008980:	9802      	ldr	r0, [sp, #8]
 8008982:	9b00      	ldr	r3, [sp, #0]
 8008984:	f840 3b04 	str.w	r3, [r0], #4
 8008988:	eba0 0009 	sub.w	r0, r0, r9
 800898c:	1080      	asrs	r0, r0, #2
 800898e:	0146      	lsls	r6, r0, #5
 8008990:	6120      	str	r0, [r4, #16]
 8008992:	4618      	mov	r0, r3
 8008994:	f000 fb4c 	bl	8009030 <__hi0bits>
 8008998:	1a30      	subs	r0, r6, r0
 800899a:	f8d8 6000 	ldr.w	r6, [r8]
 800899e:	42b0      	cmp	r0, r6
 80089a0:	dd63      	ble.n	8008a6a <__gethex+0x286>
 80089a2:	1b87      	subs	r7, r0, r6
 80089a4:	4639      	mov	r1, r7
 80089a6:	4620      	mov	r0, r4
 80089a8:	f000 fef0 	bl	800978c <__any_on>
 80089ac:	4682      	mov	sl, r0
 80089ae:	b1a8      	cbz	r0, 80089dc <__gethex+0x1f8>
 80089b0:	1e7b      	subs	r3, r7, #1
 80089b2:	1159      	asrs	r1, r3, #5
 80089b4:	f003 021f 	and.w	r2, r3, #31
 80089b8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80089bc:	f04f 0a01 	mov.w	sl, #1
 80089c0:	fa0a f202 	lsl.w	r2, sl, r2
 80089c4:	420a      	tst	r2, r1
 80089c6:	d009      	beq.n	80089dc <__gethex+0x1f8>
 80089c8:	4553      	cmp	r3, sl
 80089ca:	dd05      	ble.n	80089d8 <__gethex+0x1f4>
 80089cc:	1eb9      	subs	r1, r7, #2
 80089ce:	4620      	mov	r0, r4
 80089d0:	f000 fedc 	bl	800978c <__any_on>
 80089d4:	2800      	cmp	r0, #0
 80089d6:	d145      	bne.n	8008a64 <__gethex+0x280>
 80089d8:	f04f 0a02 	mov.w	sl, #2
 80089dc:	4639      	mov	r1, r7
 80089de:	4620      	mov	r0, r4
 80089e0:	f7ff fe98 	bl	8008714 <rshift>
 80089e4:	443d      	add	r5, r7
 80089e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80089ea:	42ab      	cmp	r3, r5
 80089ec:	da4c      	bge.n	8008a88 <__gethex+0x2a4>
 80089ee:	ee18 0a10 	vmov	r0, s16
 80089f2:	4621      	mov	r1, r4
 80089f4:	f000 fa6a 	bl	8008ecc <_Bfree>
 80089f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80089fa:	2300      	movs	r3, #0
 80089fc:	6013      	str	r3, [r2, #0]
 80089fe:	27a3      	movs	r7, #163	; 0xa3
 8008a00:	e785      	b.n	800890e <__gethex+0x12a>
 8008a02:	1e73      	subs	r3, r6, #1
 8008a04:	9a05      	ldr	r2, [sp, #20]
 8008a06:	9303      	str	r3, [sp, #12]
 8008a08:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d019      	beq.n	8008a44 <__gethex+0x260>
 8008a10:	f1bb 0f20 	cmp.w	fp, #32
 8008a14:	d107      	bne.n	8008a26 <__gethex+0x242>
 8008a16:	9b02      	ldr	r3, [sp, #8]
 8008a18:	9a00      	ldr	r2, [sp, #0]
 8008a1a:	f843 2b04 	str.w	r2, [r3], #4
 8008a1e:	9302      	str	r3, [sp, #8]
 8008a20:	2300      	movs	r3, #0
 8008a22:	9300      	str	r3, [sp, #0]
 8008a24:	469b      	mov	fp, r3
 8008a26:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008a2a:	f7ff fec5 	bl	80087b8 <__hexdig_fun>
 8008a2e:	9b00      	ldr	r3, [sp, #0]
 8008a30:	f000 000f 	and.w	r0, r0, #15
 8008a34:	fa00 f00b 	lsl.w	r0, r0, fp
 8008a38:	4303      	orrs	r3, r0
 8008a3a:	9300      	str	r3, [sp, #0]
 8008a3c:	f10b 0b04 	add.w	fp, fp, #4
 8008a40:	9b03      	ldr	r3, [sp, #12]
 8008a42:	e00d      	b.n	8008a60 <__gethex+0x27c>
 8008a44:	9b03      	ldr	r3, [sp, #12]
 8008a46:	9a06      	ldr	r2, [sp, #24]
 8008a48:	4413      	add	r3, r2
 8008a4a:	42bb      	cmp	r3, r7
 8008a4c:	d3e0      	bcc.n	8008a10 <__gethex+0x22c>
 8008a4e:	4618      	mov	r0, r3
 8008a50:	9901      	ldr	r1, [sp, #4]
 8008a52:	9307      	str	r3, [sp, #28]
 8008a54:	4652      	mov	r2, sl
 8008a56:	f001 f927 	bl	8009ca8 <strncmp>
 8008a5a:	9b07      	ldr	r3, [sp, #28]
 8008a5c:	2800      	cmp	r0, #0
 8008a5e:	d1d7      	bne.n	8008a10 <__gethex+0x22c>
 8008a60:	461e      	mov	r6, r3
 8008a62:	e78b      	b.n	800897c <__gethex+0x198>
 8008a64:	f04f 0a03 	mov.w	sl, #3
 8008a68:	e7b8      	b.n	80089dc <__gethex+0x1f8>
 8008a6a:	da0a      	bge.n	8008a82 <__gethex+0x29e>
 8008a6c:	1a37      	subs	r7, r6, r0
 8008a6e:	4621      	mov	r1, r4
 8008a70:	ee18 0a10 	vmov	r0, s16
 8008a74:	463a      	mov	r2, r7
 8008a76:	f000 fc45 	bl	8009304 <__lshift>
 8008a7a:	1bed      	subs	r5, r5, r7
 8008a7c:	4604      	mov	r4, r0
 8008a7e:	f100 0914 	add.w	r9, r0, #20
 8008a82:	f04f 0a00 	mov.w	sl, #0
 8008a86:	e7ae      	b.n	80089e6 <__gethex+0x202>
 8008a88:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008a8c:	42a8      	cmp	r0, r5
 8008a8e:	dd72      	ble.n	8008b76 <__gethex+0x392>
 8008a90:	1b45      	subs	r5, r0, r5
 8008a92:	42ae      	cmp	r6, r5
 8008a94:	dc36      	bgt.n	8008b04 <__gethex+0x320>
 8008a96:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008a9a:	2b02      	cmp	r3, #2
 8008a9c:	d02a      	beq.n	8008af4 <__gethex+0x310>
 8008a9e:	2b03      	cmp	r3, #3
 8008aa0:	d02c      	beq.n	8008afc <__gethex+0x318>
 8008aa2:	2b01      	cmp	r3, #1
 8008aa4:	d11c      	bne.n	8008ae0 <__gethex+0x2fc>
 8008aa6:	42ae      	cmp	r6, r5
 8008aa8:	d11a      	bne.n	8008ae0 <__gethex+0x2fc>
 8008aaa:	2e01      	cmp	r6, #1
 8008aac:	d112      	bne.n	8008ad4 <__gethex+0x2f0>
 8008aae:	9a04      	ldr	r2, [sp, #16]
 8008ab0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008ab4:	6013      	str	r3, [r2, #0]
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	6123      	str	r3, [r4, #16]
 8008aba:	f8c9 3000 	str.w	r3, [r9]
 8008abe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008ac0:	2762      	movs	r7, #98	; 0x62
 8008ac2:	601c      	str	r4, [r3, #0]
 8008ac4:	e723      	b.n	800890e <__gethex+0x12a>
 8008ac6:	bf00      	nop
 8008ac8:	0800c0e8 	.word	0x0800c0e8
 8008acc:	0800c070 	.word	0x0800c070
 8008ad0:	0800c081 	.word	0x0800c081
 8008ad4:	1e71      	subs	r1, r6, #1
 8008ad6:	4620      	mov	r0, r4
 8008ad8:	f000 fe58 	bl	800978c <__any_on>
 8008adc:	2800      	cmp	r0, #0
 8008ade:	d1e6      	bne.n	8008aae <__gethex+0x2ca>
 8008ae0:	ee18 0a10 	vmov	r0, s16
 8008ae4:	4621      	mov	r1, r4
 8008ae6:	f000 f9f1 	bl	8008ecc <_Bfree>
 8008aea:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008aec:	2300      	movs	r3, #0
 8008aee:	6013      	str	r3, [r2, #0]
 8008af0:	2750      	movs	r7, #80	; 0x50
 8008af2:	e70c      	b.n	800890e <__gethex+0x12a>
 8008af4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d1f2      	bne.n	8008ae0 <__gethex+0x2fc>
 8008afa:	e7d8      	b.n	8008aae <__gethex+0x2ca>
 8008afc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d1d5      	bne.n	8008aae <__gethex+0x2ca>
 8008b02:	e7ed      	b.n	8008ae0 <__gethex+0x2fc>
 8008b04:	1e6f      	subs	r7, r5, #1
 8008b06:	f1ba 0f00 	cmp.w	sl, #0
 8008b0a:	d131      	bne.n	8008b70 <__gethex+0x38c>
 8008b0c:	b127      	cbz	r7, 8008b18 <__gethex+0x334>
 8008b0e:	4639      	mov	r1, r7
 8008b10:	4620      	mov	r0, r4
 8008b12:	f000 fe3b 	bl	800978c <__any_on>
 8008b16:	4682      	mov	sl, r0
 8008b18:	117b      	asrs	r3, r7, #5
 8008b1a:	2101      	movs	r1, #1
 8008b1c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008b20:	f007 071f 	and.w	r7, r7, #31
 8008b24:	fa01 f707 	lsl.w	r7, r1, r7
 8008b28:	421f      	tst	r7, r3
 8008b2a:	4629      	mov	r1, r5
 8008b2c:	4620      	mov	r0, r4
 8008b2e:	bf18      	it	ne
 8008b30:	f04a 0a02 	orrne.w	sl, sl, #2
 8008b34:	1b76      	subs	r6, r6, r5
 8008b36:	f7ff fded 	bl	8008714 <rshift>
 8008b3a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008b3e:	2702      	movs	r7, #2
 8008b40:	f1ba 0f00 	cmp.w	sl, #0
 8008b44:	d048      	beq.n	8008bd8 <__gethex+0x3f4>
 8008b46:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008b4a:	2b02      	cmp	r3, #2
 8008b4c:	d015      	beq.n	8008b7a <__gethex+0x396>
 8008b4e:	2b03      	cmp	r3, #3
 8008b50:	d017      	beq.n	8008b82 <__gethex+0x39e>
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	d109      	bne.n	8008b6a <__gethex+0x386>
 8008b56:	f01a 0f02 	tst.w	sl, #2
 8008b5a:	d006      	beq.n	8008b6a <__gethex+0x386>
 8008b5c:	f8d9 0000 	ldr.w	r0, [r9]
 8008b60:	ea4a 0a00 	orr.w	sl, sl, r0
 8008b64:	f01a 0f01 	tst.w	sl, #1
 8008b68:	d10e      	bne.n	8008b88 <__gethex+0x3a4>
 8008b6a:	f047 0710 	orr.w	r7, r7, #16
 8008b6e:	e033      	b.n	8008bd8 <__gethex+0x3f4>
 8008b70:	f04f 0a01 	mov.w	sl, #1
 8008b74:	e7d0      	b.n	8008b18 <__gethex+0x334>
 8008b76:	2701      	movs	r7, #1
 8008b78:	e7e2      	b.n	8008b40 <__gethex+0x35c>
 8008b7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b7c:	f1c3 0301 	rsb	r3, r3, #1
 8008b80:	9315      	str	r3, [sp, #84]	; 0x54
 8008b82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d0f0      	beq.n	8008b6a <__gethex+0x386>
 8008b88:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008b8c:	f104 0314 	add.w	r3, r4, #20
 8008b90:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008b94:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008b98:	f04f 0c00 	mov.w	ip, #0
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ba2:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008ba6:	d01c      	beq.n	8008be2 <__gethex+0x3fe>
 8008ba8:	3201      	adds	r2, #1
 8008baa:	6002      	str	r2, [r0, #0]
 8008bac:	2f02      	cmp	r7, #2
 8008bae:	f104 0314 	add.w	r3, r4, #20
 8008bb2:	d13f      	bne.n	8008c34 <__gethex+0x450>
 8008bb4:	f8d8 2000 	ldr.w	r2, [r8]
 8008bb8:	3a01      	subs	r2, #1
 8008bba:	42b2      	cmp	r2, r6
 8008bbc:	d10a      	bne.n	8008bd4 <__gethex+0x3f0>
 8008bbe:	1171      	asrs	r1, r6, #5
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008bc6:	f006 061f 	and.w	r6, r6, #31
 8008bca:	fa02 f606 	lsl.w	r6, r2, r6
 8008bce:	421e      	tst	r6, r3
 8008bd0:	bf18      	it	ne
 8008bd2:	4617      	movne	r7, r2
 8008bd4:	f047 0720 	orr.w	r7, r7, #32
 8008bd8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008bda:	601c      	str	r4, [r3, #0]
 8008bdc:	9b04      	ldr	r3, [sp, #16]
 8008bde:	601d      	str	r5, [r3, #0]
 8008be0:	e695      	b.n	800890e <__gethex+0x12a>
 8008be2:	4299      	cmp	r1, r3
 8008be4:	f843 cc04 	str.w	ip, [r3, #-4]
 8008be8:	d8d8      	bhi.n	8008b9c <__gethex+0x3b8>
 8008bea:	68a3      	ldr	r3, [r4, #8]
 8008bec:	459b      	cmp	fp, r3
 8008bee:	db19      	blt.n	8008c24 <__gethex+0x440>
 8008bf0:	6861      	ldr	r1, [r4, #4]
 8008bf2:	ee18 0a10 	vmov	r0, s16
 8008bf6:	3101      	adds	r1, #1
 8008bf8:	f000 f928 	bl	8008e4c <_Balloc>
 8008bfc:	4681      	mov	r9, r0
 8008bfe:	b918      	cbnz	r0, 8008c08 <__gethex+0x424>
 8008c00:	4b1a      	ldr	r3, [pc, #104]	; (8008c6c <__gethex+0x488>)
 8008c02:	4602      	mov	r2, r0
 8008c04:	2184      	movs	r1, #132	; 0x84
 8008c06:	e6a8      	b.n	800895a <__gethex+0x176>
 8008c08:	6922      	ldr	r2, [r4, #16]
 8008c0a:	3202      	adds	r2, #2
 8008c0c:	f104 010c 	add.w	r1, r4, #12
 8008c10:	0092      	lsls	r2, r2, #2
 8008c12:	300c      	adds	r0, #12
 8008c14:	f000 f90c 	bl	8008e30 <memcpy>
 8008c18:	4621      	mov	r1, r4
 8008c1a:	ee18 0a10 	vmov	r0, s16
 8008c1e:	f000 f955 	bl	8008ecc <_Bfree>
 8008c22:	464c      	mov	r4, r9
 8008c24:	6923      	ldr	r3, [r4, #16]
 8008c26:	1c5a      	adds	r2, r3, #1
 8008c28:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008c2c:	6122      	str	r2, [r4, #16]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	615a      	str	r2, [r3, #20]
 8008c32:	e7bb      	b.n	8008bac <__gethex+0x3c8>
 8008c34:	6922      	ldr	r2, [r4, #16]
 8008c36:	455a      	cmp	r2, fp
 8008c38:	dd0b      	ble.n	8008c52 <__gethex+0x46e>
 8008c3a:	2101      	movs	r1, #1
 8008c3c:	4620      	mov	r0, r4
 8008c3e:	f7ff fd69 	bl	8008714 <rshift>
 8008c42:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008c46:	3501      	adds	r5, #1
 8008c48:	42ab      	cmp	r3, r5
 8008c4a:	f6ff aed0 	blt.w	80089ee <__gethex+0x20a>
 8008c4e:	2701      	movs	r7, #1
 8008c50:	e7c0      	b.n	8008bd4 <__gethex+0x3f0>
 8008c52:	f016 061f 	ands.w	r6, r6, #31
 8008c56:	d0fa      	beq.n	8008c4e <__gethex+0x46a>
 8008c58:	4453      	add	r3, sl
 8008c5a:	f1c6 0620 	rsb	r6, r6, #32
 8008c5e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008c62:	f000 f9e5 	bl	8009030 <__hi0bits>
 8008c66:	42b0      	cmp	r0, r6
 8008c68:	dbe7      	blt.n	8008c3a <__gethex+0x456>
 8008c6a:	e7f0      	b.n	8008c4e <__gethex+0x46a>
 8008c6c:	0800c070 	.word	0x0800c070

08008c70 <L_shift>:
 8008c70:	f1c2 0208 	rsb	r2, r2, #8
 8008c74:	0092      	lsls	r2, r2, #2
 8008c76:	b570      	push	{r4, r5, r6, lr}
 8008c78:	f1c2 0620 	rsb	r6, r2, #32
 8008c7c:	6843      	ldr	r3, [r0, #4]
 8008c7e:	6804      	ldr	r4, [r0, #0]
 8008c80:	fa03 f506 	lsl.w	r5, r3, r6
 8008c84:	432c      	orrs	r4, r5
 8008c86:	40d3      	lsrs	r3, r2
 8008c88:	6004      	str	r4, [r0, #0]
 8008c8a:	f840 3f04 	str.w	r3, [r0, #4]!
 8008c8e:	4288      	cmp	r0, r1
 8008c90:	d3f4      	bcc.n	8008c7c <L_shift+0xc>
 8008c92:	bd70      	pop	{r4, r5, r6, pc}

08008c94 <__match>:
 8008c94:	b530      	push	{r4, r5, lr}
 8008c96:	6803      	ldr	r3, [r0, #0]
 8008c98:	3301      	adds	r3, #1
 8008c9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c9e:	b914      	cbnz	r4, 8008ca6 <__match+0x12>
 8008ca0:	6003      	str	r3, [r0, #0]
 8008ca2:	2001      	movs	r0, #1
 8008ca4:	bd30      	pop	{r4, r5, pc}
 8008ca6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008caa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008cae:	2d19      	cmp	r5, #25
 8008cb0:	bf98      	it	ls
 8008cb2:	3220      	addls	r2, #32
 8008cb4:	42a2      	cmp	r2, r4
 8008cb6:	d0f0      	beq.n	8008c9a <__match+0x6>
 8008cb8:	2000      	movs	r0, #0
 8008cba:	e7f3      	b.n	8008ca4 <__match+0x10>

08008cbc <__hexnan>:
 8008cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cc0:	680b      	ldr	r3, [r1, #0]
 8008cc2:	115e      	asrs	r6, r3, #5
 8008cc4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008cc8:	f013 031f 	ands.w	r3, r3, #31
 8008ccc:	b087      	sub	sp, #28
 8008cce:	bf18      	it	ne
 8008cd0:	3604      	addne	r6, #4
 8008cd2:	2500      	movs	r5, #0
 8008cd4:	1f37      	subs	r7, r6, #4
 8008cd6:	4690      	mov	r8, r2
 8008cd8:	6802      	ldr	r2, [r0, #0]
 8008cda:	9301      	str	r3, [sp, #4]
 8008cdc:	4682      	mov	sl, r0
 8008cde:	f846 5c04 	str.w	r5, [r6, #-4]
 8008ce2:	46b9      	mov	r9, r7
 8008ce4:	463c      	mov	r4, r7
 8008ce6:	9502      	str	r5, [sp, #8]
 8008ce8:	46ab      	mov	fp, r5
 8008cea:	7851      	ldrb	r1, [r2, #1]
 8008cec:	1c53      	adds	r3, r2, #1
 8008cee:	9303      	str	r3, [sp, #12]
 8008cf0:	b341      	cbz	r1, 8008d44 <__hexnan+0x88>
 8008cf2:	4608      	mov	r0, r1
 8008cf4:	9205      	str	r2, [sp, #20]
 8008cf6:	9104      	str	r1, [sp, #16]
 8008cf8:	f7ff fd5e 	bl	80087b8 <__hexdig_fun>
 8008cfc:	2800      	cmp	r0, #0
 8008cfe:	d14f      	bne.n	8008da0 <__hexnan+0xe4>
 8008d00:	9904      	ldr	r1, [sp, #16]
 8008d02:	9a05      	ldr	r2, [sp, #20]
 8008d04:	2920      	cmp	r1, #32
 8008d06:	d818      	bhi.n	8008d3a <__hexnan+0x7e>
 8008d08:	9b02      	ldr	r3, [sp, #8]
 8008d0a:	459b      	cmp	fp, r3
 8008d0c:	dd13      	ble.n	8008d36 <__hexnan+0x7a>
 8008d0e:	454c      	cmp	r4, r9
 8008d10:	d206      	bcs.n	8008d20 <__hexnan+0x64>
 8008d12:	2d07      	cmp	r5, #7
 8008d14:	dc04      	bgt.n	8008d20 <__hexnan+0x64>
 8008d16:	462a      	mov	r2, r5
 8008d18:	4649      	mov	r1, r9
 8008d1a:	4620      	mov	r0, r4
 8008d1c:	f7ff ffa8 	bl	8008c70 <L_shift>
 8008d20:	4544      	cmp	r4, r8
 8008d22:	d950      	bls.n	8008dc6 <__hexnan+0x10a>
 8008d24:	2300      	movs	r3, #0
 8008d26:	f1a4 0904 	sub.w	r9, r4, #4
 8008d2a:	f844 3c04 	str.w	r3, [r4, #-4]
 8008d2e:	f8cd b008 	str.w	fp, [sp, #8]
 8008d32:	464c      	mov	r4, r9
 8008d34:	461d      	mov	r5, r3
 8008d36:	9a03      	ldr	r2, [sp, #12]
 8008d38:	e7d7      	b.n	8008cea <__hexnan+0x2e>
 8008d3a:	2929      	cmp	r1, #41	; 0x29
 8008d3c:	d156      	bne.n	8008dec <__hexnan+0x130>
 8008d3e:	3202      	adds	r2, #2
 8008d40:	f8ca 2000 	str.w	r2, [sl]
 8008d44:	f1bb 0f00 	cmp.w	fp, #0
 8008d48:	d050      	beq.n	8008dec <__hexnan+0x130>
 8008d4a:	454c      	cmp	r4, r9
 8008d4c:	d206      	bcs.n	8008d5c <__hexnan+0xa0>
 8008d4e:	2d07      	cmp	r5, #7
 8008d50:	dc04      	bgt.n	8008d5c <__hexnan+0xa0>
 8008d52:	462a      	mov	r2, r5
 8008d54:	4649      	mov	r1, r9
 8008d56:	4620      	mov	r0, r4
 8008d58:	f7ff ff8a 	bl	8008c70 <L_shift>
 8008d5c:	4544      	cmp	r4, r8
 8008d5e:	d934      	bls.n	8008dca <__hexnan+0x10e>
 8008d60:	f1a8 0204 	sub.w	r2, r8, #4
 8008d64:	4623      	mov	r3, r4
 8008d66:	f853 1b04 	ldr.w	r1, [r3], #4
 8008d6a:	f842 1f04 	str.w	r1, [r2, #4]!
 8008d6e:	429f      	cmp	r7, r3
 8008d70:	d2f9      	bcs.n	8008d66 <__hexnan+0xaa>
 8008d72:	1b3b      	subs	r3, r7, r4
 8008d74:	f023 0303 	bic.w	r3, r3, #3
 8008d78:	3304      	adds	r3, #4
 8008d7a:	3401      	adds	r4, #1
 8008d7c:	3e03      	subs	r6, #3
 8008d7e:	42b4      	cmp	r4, r6
 8008d80:	bf88      	it	hi
 8008d82:	2304      	movhi	r3, #4
 8008d84:	4443      	add	r3, r8
 8008d86:	2200      	movs	r2, #0
 8008d88:	f843 2b04 	str.w	r2, [r3], #4
 8008d8c:	429f      	cmp	r7, r3
 8008d8e:	d2fb      	bcs.n	8008d88 <__hexnan+0xcc>
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	b91b      	cbnz	r3, 8008d9c <__hexnan+0xe0>
 8008d94:	4547      	cmp	r7, r8
 8008d96:	d127      	bne.n	8008de8 <__hexnan+0x12c>
 8008d98:	2301      	movs	r3, #1
 8008d9a:	603b      	str	r3, [r7, #0]
 8008d9c:	2005      	movs	r0, #5
 8008d9e:	e026      	b.n	8008dee <__hexnan+0x132>
 8008da0:	3501      	adds	r5, #1
 8008da2:	2d08      	cmp	r5, #8
 8008da4:	f10b 0b01 	add.w	fp, fp, #1
 8008da8:	dd06      	ble.n	8008db8 <__hexnan+0xfc>
 8008daa:	4544      	cmp	r4, r8
 8008dac:	d9c3      	bls.n	8008d36 <__hexnan+0x7a>
 8008dae:	2300      	movs	r3, #0
 8008db0:	f844 3c04 	str.w	r3, [r4, #-4]
 8008db4:	2501      	movs	r5, #1
 8008db6:	3c04      	subs	r4, #4
 8008db8:	6822      	ldr	r2, [r4, #0]
 8008dba:	f000 000f 	and.w	r0, r0, #15
 8008dbe:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008dc2:	6022      	str	r2, [r4, #0]
 8008dc4:	e7b7      	b.n	8008d36 <__hexnan+0x7a>
 8008dc6:	2508      	movs	r5, #8
 8008dc8:	e7b5      	b.n	8008d36 <__hexnan+0x7a>
 8008dca:	9b01      	ldr	r3, [sp, #4]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d0df      	beq.n	8008d90 <__hexnan+0xd4>
 8008dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8008dd4:	f1c3 0320 	rsb	r3, r3, #32
 8008dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8008ddc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008de0:	401a      	ands	r2, r3
 8008de2:	f846 2c04 	str.w	r2, [r6, #-4]
 8008de6:	e7d3      	b.n	8008d90 <__hexnan+0xd4>
 8008de8:	3f04      	subs	r7, #4
 8008dea:	e7d1      	b.n	8008d90 <__hexnan+0xd4>
 8008dec:	2004      	movs	r0, #4
 8008dee:	b007      	add	sp, #28
 8008df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008df4 <_localeconv_r>:
 8008df4:	4800      	ldr	r0, [pc, #0]	; (8008df8 <_localeconv_r+0x4>)
 8008df6:	4770      	bx	lr
 8008df8:	200001cc 	.word	0x200001cc

08008dfc <malloc>:
 8008dfc:	4b02      	ldr	r3, [pc, #8]	; (8008e08 <malloc+0xc>)
 8008dfe:	4601      	mov	r1, r0
 8008e00:	6818      	ldr	r0, [r3, #0]
 8008e02:	f000 bd67 	b.w	80098d4 <_malloc_r>
 8008e06:	bf00      	nop
 8008e08:	20000074 	.word	0x20000074

08008e0c <__ascii_mbtowc>:
 8008e0c:	b082      	sub	sp, #8
 8008e0e:	b901      	cbnz	r1, 8008e12 <__ascii_mbtowc+0x6>
 8008e10:	a901      	add	r1, sp, #4
 8008e12:	b142      	cbz	r2, 8008e26 <__ascii_mbtowc+0x1a>
 8008e14:	b14b      	cbz	r3, 8008e2a <__ascii_mbtowc+0x1e>
 8008e16:	7813      	ldrb	r3, [r2, #0]
 8008e18:	600b      	str	r3, [r1, #0]
 8008e1a:	7812      	ldrb	r2, [r2, #0]
 8008e1c:	1e10      	subs	r0, r2, #0
 8008e1e:	bf18      	it	ne
 8008e20:	2001      	movne	r0, #1
 8008e22:	b002      	add	sp, #8
 8008e24:	4770      	bx	lr
 8008e26:	4610      	mov	r0, r2
 8008e28:	e7fb      	b.n	8008e22 <__ascii_mbtowc+0x16>
 8008e2a:	f06f 0001 	mvn.w	r0, #1
 8008e2e:	e7f8      	b.n	8008e22 <__ascii_mbtowc+0x16>

08008e30 <memcpy>:
 8008e30:	440a      	add	r2, r1
 8008e32:	4291      	cmp	r1, r2
 8008e34:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e38:	d100      	bne.n	8008e3c <memcpy+0xc>
 8008e3a:	4770      	bx	lr
 8008e3c:	b510      	push	{r4, lr}
 8008e3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e46:	4291      	cmp	r1, r2
 8008e48:	d1f9      	bne.n	8008e3e <memcpy+0xe>
 8008e4a:	bd10      	pop	{r4, pc}

08008e4c <_Balloc>:
 8008e4c:	b570      	push	{r4, r5, r6, lr}
 8008e4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008e50:	4604      	mov	r4, r0
 8008e52:	460d      	mov	r5, r1
 8008e54:	b976      	cbnz	r6, 8008e74 <_Balloc+0x28>
 8008e56:	2010      	movs	r0, #16
 8008e58:	f7ff ffd0 	bl	8008dfc <malloc>
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	6260      	str	r0, [r4, #36]	; 0x24
 8008e60:	b920      	cbnz	r0, 8008e6c <_Balloc+0x20>
 8008e62:	4b18      	ldr	r3, [pc, #96]	; (8008ec4 <_Balloc+0x78>)
 8008e64:	4818      	ldr	r0, [pc, #96]	; (8008ec8 <_Balloc+0x7c>)
 8008e66:	2166      	movs	r1, #102	; 0x66
 8008e68:	f000 ff40 	bl	8009cec <__assert_func>
 8008e6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e70:	6006      	str	r6, [r0, #0]
 8008e72:	60c6      	str	r6, [r0, #12]
 8008e74:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008e76:	68f3      	ldr	r3, [r6, #12]
 8008e78:	b183      	cbz	r3, 8008e9c <_Balloc+0x50>
 8008e7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e7c:	68db      	ldr	r3, [r3, #12]
 8008e7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008e82:	b9b8      	cbnz	r0, 8008eb4 <_Balloc+0x68>
 8008e84:	2101      	movs	r1, #1
 8008e86:	fa01 f605 	lsl.w	r6, r1, r5
 8008e8a:	1d72      	adds	r2, r6, #5
 8008e8c:	0092      	lsls	r2, r2, #2
 8008e8e:	4620      	mov	r0, r4
 8008e90:	f000 fc9d 	bl	80097ce <_calloc_r>
 8008e94:	b160      	cbz	r0, 8008eb0 <_Balloc+0x64>
 8008e96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008e9a:	e00e      	b.n	8008eba <_Balloc+0x6e>
 8008e9c:	2221      	movs	r2, #33	; 0x21
 8008e9e:	2104      	movs	r1, #4
 8008ea0:	4620      	mov	r0, r4
 8008ea2:	f000 fc94 	bl	80097ce <_calloc_r>
 8008ea6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ea8:	60f0      	str	r0, [r6, #12]
 8008eaa:	68db      	ldr	r3, [r3, #12]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d1e4      	bne.n	8008e7a <_Balloc+0x2e>
 8008eb0:	2000      	movs	r0, #0
 8008eb2:	bd70      	pop	{r4, r5, r6, pc}
 8008eb4:	6802      	ldr	r2, [r0, #0]
 8008eb6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008eba:	2300      	movs	r3, #0
 8008ebc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008ec0:	e7f7      	b.n	8008eb2 <_Balloc+0x66>
 8008ec2:	bf00      	nop
 8008ec4:	0800bffe 	.word	0x0800bffe
 8008ec8:	0800c0fc 	.word	0x0800c0fc

08008ecc <_Bfree>:
 8008ecc:	b570      	push	{r4, r5, r6, lr}
 8008ece:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008ed0:	4605      	mov	r5, r0
 8008ed2:	460c      	mov	r4, r1
 8008ed4:	b976      	cbnz	r6, 8008ef4 <_Bfree+0x28>
 8008ed6:	2010      	movs	r0, #16
 8008ed8:	f7ff ff90 	bl	8008dfc <malloc>
 8008edc:	4602      	mov	r2, r0
 8008ede:	6268      	str	r0, [r5, #36]	; 0x24
 8008ee0:	b920      	cbnz	r0, 8008eec <_Bfree+0x20>
 8008ee2:	4b09      	ldr	r3, [pc, #36]	; (8008f08 <_Bfree+0x3c>)
 8008ee4:	4809      	ldr	r0, [pc, #36]	; (8008f0c <_Bfree+0x40>)
 8008ee6:	218a      	movs	r1, #138	; 0x8a
 8008ee8:	f000 ff00 	bl	8009cec <__assert_func>
 8008eec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ef0:	6006      	str	r6, [r0, #0]
 8008ef2:	60c6      	str	r6, [r0, #12]
 8008ef4:	b13c      	cbz	r4, 8008f06 <_Bfree+0x3a>
 8008ef6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008ef8:	6862      	ldr	r2, [r4, #4]
 8008efa:	68db      	ldr	r3, [r3, #12]
 8008efc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008f00:	6021      	str	r1, [r4, #0]
 8008f02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008f06:	bd70      	pop	{r4, r5, r6, pc}
 8008f08:	0800bffe 	.word	0x0800bffe
 8008f0c:	0800c0fc 	.word	0x0800c0fc

08008f10 <__multadd>:
 8008f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f14:	690d      	ldr	r5, [r1, #16]
 8008f16:	4607      	mov	r7, r0
 8008f18:	460c      	mov	r4, r1
 8008f1a:	461e      	mov	r6, r3
 8008f1c:	f101 0c14 	add.w	ip, r1, #20
 8008f20:	2000      	movs	r0, #0
 8008f22:	f8dc 3000 	ldr.w	r3, [ip]
 8008f26:	b299      	uxth	r1, r3
 8008f28:	fb02 6101 	mla	r1, r2, r1, r6
 8008f2c:	0c1e      	lsrs	r6, r3, #16
 8008f2e:	0c0b      	lsrs	r3, r1, #16
 8008f30:	fb02 3306 	mla	r3, r2, r6, r3
 8008f34:	b289      	uxth	r1, r1
 8008f36:	3001      	adds	r0, #1
 8008f38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008f3c:	4285      	cmp	r5, r0
 8008f3e:	f84c 1b04 	str.w	r1, [ip], #4
 8008f42:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008f46:	dcec      	bgt.n	8008f22 <__multadd+0x12>
 8008f48:	b30e      	cbz	r6, 8008f8e <__multadd+0x7e>
 8008f4a:	68a3      	ldr	r3, [r4, #8]
 8008f4c:	42ab      	cmp	r3, r5
 8008f4e:	dc19      	bgt.n	8008f84 <__multadd+0x74>
 8008f50:	6861      	ldr	r1, [r4, #4]
 8008f52:	4638      	mov	r0, r7
 8008f54:	3101      	adds	r1, #1
 8008f56:	f7ff ff79 	bl	8008e4c <_Balloc>
 8008f5a:	4680      	mov	r8, r0
 8008f5c:	b928      	cbnz	r0, 8008f6a <__multadd+0x5a>
 8008f5e:	4602      	mov	r2, r0
 8008f60:	4b0c      	ldr	r3, [pc, #48]	; (8008f94 <__multadd+0x84>)
 8008f62:	480d      	ldr	r0, [pc, #52]	; (8008f98 <__multadd+0x88>)
 8008f64:	21b5      	movs	r1, #181	; 0xb5
 8008f66:	f000 fec1 	bl	8009cec <__assert_func>
 8008f6a:	6922      	ldr	r2, [r4, #16]
 8008f6c:	3202      	adds	r2, #2
 8008f6e:	f104 010c 	add.w	r1, r4, #12
 8008f72:	0092      	lsls	r2, r2, #2
 8008f74:	300c      	adds	r0, #12
 8008f76:	f7ff ff5b 	bl	8008e30 <memcpy>
 8008f7a:	4621      	mov	r1, r4
 8008f7c:	4638      	mov	r0, r7
 8008f7e:	f7ff ffa5 	bl	8008ecc <_Bfree>
 8008f82:	4644      	mov	r4, r8
 8008f84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008f88:	3501      	adds	r5, #1
 8008f8a:	615e      	str	r6, [r3, #20]
 8008f8c:	6125      	str	r5, [r4, #16]
 8008f8e:	4620      	mov	r0, r4
 8008f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f94:	0800c070 	.word	0x0800c070
 8008f98:	0800c0fc 	.word	0x0800c0fc

08008f9c <__s2b>:
 8008f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fa0:	460c      	mov	r4, r1
 8008fa2:	4615      	mov	r5, r2
 8008fa4:	461f      	mov	r7, r3
 8008fa6:	2209      	movs	r2, #9
 8008fa8:	3308      	adds	r3, #8
 8008faa:	4606      	mov	r6, r0
 8008fac:	fb93 f3f2 	sdiv	r3, r3, r2
 8008fb0:	2100      	movs	r1, #0
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	db09      	blt.n	8008fcc <__s2b+0x30>
 8008fb8:	4630      	mov	r0, r6
 8008fba:	f7ff ff47 	bl	8008e4c <_Balloc>
 8008fbe:	b940      	cbnz	r0, 8008fd2 <__s2b+0x36>
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	4b19      	ldr	r3, [pc, #100]	; (8009028 <__s2b+0x8c>)
 8008fc4:	4819      	ldr	r0, [pc, #100]	; (800902c <__s2b+0x90>)
 8008fc6:	21ce      	movs	r1, #206	; 0xce
 8008fc8:	f000 fe90 	bl	8009cec <__assert_func>
 8008fcc:	0052      	lsls	r2, r2, #1
 8008fce:	3101      	adds	r1, #1
 8008fd0:	e7f0      	b.n	8008fb4 <__s2b+0x18>
 8008fd2:	9b08      	ldr	r3, [sp, #32]
 8008fd4:	6143      	str	r3, [r0, #20]
 8008fd6:	2d09      	cmp	r5, #9
 8008fd8:	f04f 0301 	mov.w	r3, #1
 8008fdc:	6103      	str	r3, [r0, #16]
 8008fde:	dd16      	ble.n	800900e <__s2b+0x72>
 8008fe0:	f104 0909 	add.w	r9, r4, #9
 8008fe4:	46c8      	mov	r8, r9
 8008fe6:	442c      	add	r4, r5
 8008fe8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008fec:	4601      	mov	r1, r0
 8008fee:	3b30      	subs	r3, #48	; 0x30
 8008ff0:	220a      	movs	r2, #10
 8008ff2:	4630      	mov	r0, r6
 8008ff4:	f7ff ff8c 	bl	8008f10 <__multadd>
 8008ff8:	45a0      	cmp	r8, r4
 8008ffa:	d1f5      	bne.n	8008fe8 <__s2b+0x4c>
 8008ffc:	f1a5 0408 	sub.w	r4, r5, #8
 8009000:	444c      	add	r4, r9
 8009002:	1b2d      	subs	r5, r5, r4
 8009004:	1963      	adds	r3, r4, r5
 8009006:	42bb      	cmp	r3, r7
 8009008:	db04      	blt.n	8009014 <__s2b+0x78>
 800900a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800900e:	340a      	adds	r4, #10
 8009010:	2509      	movs	r5, #9
 8009012:	e7f6      	b.n	8009002 <__s2b+0x66>
 8009014:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009018:	4601      	mov	r1, r0
 800901a:	3b30      	subs	r3, #48	; 0x30
 800901c:	220a      	movs	r2, #10
 800901e:	4630      	mov	r0, r6
 8009020:	f7ff ff76 	bl	8008f10 <__multadd>
 8009024:	e7ee      	b.n	8009004 <__s2b+0x68>
 8009026:	bf00      	nop
 8009028:	0800c070 	.word	0x0800c070
 800902c:	0800c0fc 	.word	0x0800c0fc

08009030 <__hi0bits>:
 8009030:	0c03      	lsrs	r3, r0, #16
 8009032:	041b      	lsls	r3, r3, #16
 8009034:	b9d3      	cbnz	r3, 800906c <__hi0bits+0x3c>
 8009036:	0400      	lsls	r0, r0, #16
 8009038:	2310      	movs	r3, #16
 800903a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800903e:	bf04      	itt	eq
 8009040:	0200      	lsleq	r0, r0, #8
 8009042:	3308      	addeq	r3, #8
 8009044:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009048:	bf04      	itt	eq
 800904a:	0100      	lsleq	r0, r0, #4
 800904c:	3304      	addeq	r3, #4
 800904e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009052:	bf04      	itt	eq
 8009054:	0080      	lsleq	r0, r0, #2
 8009056:	3302      	addeq	r3, #2
 8009058:	2800      	cmp	r0, #0
 800905a:	db05      	blt.n	8009068 <__hi0bits+0x38>
 800905c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009060:	f103 0301 	add.w	r3, r3, #1
 8009064:	bf08      	it	eq
 8009066:	2320      	moveq	r3, #32
 8009068:	4618      	mov	r0, r3
 800906a:	4770      	bx	lr
 800906c:	2300      	movs	r3, #0
 800906e:	e7e4      	b.n	800903a <__hi0bits+0xa>

08009070 <__lo0bits>:
 8009070:	6803      	ldr	r3, [r0, #0]
 8009072:	f013 0207 	ands.w	r2, r3, #7
 8009076:	4601      	mov	r1, r0
 8009078:	d00b      	beq.n	8009092 <__lo0bits+0x22>
 800907a:	07da      	lsls	r2, r3, #31
 800907c:	d423      	bmi.n	80090c6 <__lo0bits+0x56>
 800907e:	0798      	lsls	r0, r3, #30
 8009080:	bf49      	itett	mi
 8009082:	085b      	lsrmi	r3, r3, #1
 8009084:	089b      	lsrpl	r3, r3, #2
 8009086:	2001      	movmi	r0, #1
 8009088:	600b      	strmi	r3, [r1, #0]
 800908a:	bf5c      	itt	pl
 800908c:	600b      	strpl	r3, [r1, #0]
 800908e:	2002      	movpl	r0, #2
 8009090:	4770      	bx	lr
 8009092:	b298      	uxth	r0, r3
 8009094:	b9a8      	cbnz	r0, 80090c2 <__lo0bits+0x52>
 8009096:	0c1b      	lsrs	r3, r3, #16
 8009098:	2010      	movs	r0, #16
 800909a:	b2da      	uxtb	r2, r3
 800909c:	b90a      	cbnz	r2, 80090a2 <__lo0bits+0x32>
 800909e:	3008      	adds	r0, #8
 80090a0:	0a1b      	lsrs	r3, r3, #8
 80090a2:	071a      	lsls	r2, r3, #28
 80090a4:	bf04      	itt	eq
 80090a6:	091b      	lsreq	r3, r3, #4
 80090a8:	3004      	addeq	r0, #4
 80090aa:	079a      	lsls	r2, r3, #30
 80090ac:	bf04      	itt	eq
 80090ae:	089b      	lsreq	r3, r3, #2
 80090b0:	3002      	addeq	r0, #2
 80090b2:	07da      	lsls	r2, r3, #31
 80090b4:	d403      	bmi.n	80090be <__lo0bits+0x4e>
 80090b6:	085b      	lsrs	r3, r3, #1
 80090b8:	f100 0001 	add.w	r0, r0, #1
 80090bc:	d005      	beq.n	80090ca <__lo0bits+0x5a>
 80090be:	600b      	str	r3, [r1, #0]
 80090c0:	4770      	bx	lr
 80090c2:	4610      	mov	r0, r2
 80090c4:	e7e9      	b.n	800909a <__lo0bits+0x2a>
 80090c6:	2000      	movs	r0, #0
 80090c8:	4770      	bx	lr
 80090ca:	2020      	movs	r0, #32
 80090cc:	4770      	bx	lr
	...

080090d0 <__i2b>:
 80090d0:	b510      	push	{r4, lr}
 80090d2:	460c      	mov	r4, r1
 80090d4:	2101      	movs	r1, #1
 80090d6:	f7ff feb9 	bl	8008e4c <_Balloc>
 80090da:	4602      	mov	r2, r0
 80090dc:	b928      	cbnz	r0, 80090ea <__i2b+0x1a>
 80090de:	4b05      	ldr	r3, [pc, #20]	; (80090f4 <__i2b+0x24>)
 80090e0:	4805      	ldr	r0, [pc, #20]	; (80090f8 <__i2b+0x28>)
 80090e2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80090e6:	f000 fe01 	bl	8009cec <__assert_func>
 80090ea:	2301      	movs	r3, #1
 80090ec:	6144      	str	r4, [r0, #20]
 80090ee:	6103      	str	r3, [r0, #16]
 80090f0:	bd10      	pop	{r4, pc}
 80090f2:	bf00      	nop
 80090f4:	0800c070 	.word	0x0800c070
 80090f8:	0800c0fc 	.word	0x0800c0fc

080090fc <__multiply>:
 80090fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009100:	4691      	mov	r9, r2
 8009102:	690a      	ldr	r2, [r1, #16]
 8009104:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009108:	429a      	cmp	r2, r3
 800910a:	bfb8      	it	lt
 800910c:	460b      	movlt	r3, r1
 800910e:	460c      	mov	r4, r1
 8009110:	bfbc      	itt	lt
 8009112:	464c      	movlt	r4, r9
 8009114:	4699      	movlt	r9, r3
 8009116:	6927      	ldr	r7, [r4, #16]
 8009118:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800911c:	68a3      	ldr	r3, [r4, #8]
 800911e:	6861      	ldr	r1, [r4, #4]
 8009120:	eb07 060a 	add.w	r6, r7, sl
 8009124:	42b3      	cmp	r3, r6
 8009126:	b085      	sub	sp, #20
 8009128:	bfb8      	it	lt
 800912a:	3101      	addlt	r1, #1
 800912c:	f7ff fe8e 	bl	8008e4c <_Balloc>
 8009130:	b930      	cbnz	r0, 8009140 <__multiply+0x44>
 8009132:	4602      	mov	r2, r0
 8009134:	4b44      	ldr	r3, [pc, #272]	; (8009248 <__multiply+0x14c>)
 8009136:	4845      	ldr	r0, [pc, #276]	; (800924c <__multiply+0x150>)
 8009138:	f240 115d 	movw	r1, #349	; 0x15d
 800913c:	f000 fdd6 	bl	8009cec <__assert_func>
 8009140:	f100 0514 	add.w	r5, r0, #20
 8009144:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009148:	462b      	mov	r3, r5
 800914a:	2200      	movs	r2, #0
 800914c:	4543      	cmp	r3, r8
 800914e:	d321      	bcc.n	8009194 <__multiply+0x98>
 8009150:	f104 0314 	add.w	r3, r4, #20
 8009154:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009158:	f109 0314 	add.w	r3, r9, #20
 800915c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009160:	9202      	str	r2, [sp, #8]
 8009162:	1b3a      	subs	r2, r7, r4
 8009164:	3a15      	subs	r2, #21
 8009166:	f022 0203 	bic.w	r2, r2, #3
 800916a:	3204      	adds	r2, #4
 800916c:	f104 0115 	add.w	r1, r4, #21
 8009170:	428f      	cmp	r7, r1
 8009172:	bf38      	it	cc
 8009174:	2204      	movcc	r2, #4
 8009176:	9201      	str	r2, [sp, #4]
 8009178:	9a02      	ldr	r2, [sp, #8]
 800917a:	9303      	str	r3, [sp, #12]
 800917c:	429a      	cmp	r2, r3
 800917e:	d80c      	bhi.n	800919a <__multiply+0x9e>
 8009180:	2e00      	cmp	r6, #0
 8009182:	dd03      	ble.n	800918c <__multiply+0x90>
 8009184:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009188:	2b00      	cmp	r3, #0
 800918a:	d05a      	beq.n	8009242 <__multiply+0x146>
 800918c:	6106      	str	r6, [r0, #16]
 800918e:	b005      	add	sp, #20
 8009190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009194:	f843 2b04 	str.w	r2, [r3], #4
 8009198:	e7d8      	b.n	800914c <__multiply+0x50>
 800919a:	f8b3 a000 	ldrh.w	sl, [r3]
 800919e:	f1ba 0f00 	cmp.w	sl, #0
 80091a2:	d024      	beq.n	80091ee <__multiply+0xf2>
 80091a4:	f104 0e14 	add.w	lr, r4, #20
 80091a8:	46a9      	mov	r9, r5
 80091aa:	f04f 0c00 	mov.w	ip, #0
 80091ae:	f85e 2b04 	ldr.w	r2, [lr], #4
 80091b2:	f8d9 1000 	ldr.w	r1, [r9]
 80091b6:	fa1f fb82 	uxth.w	fp, r2
 80091ba:	b289      	uxth	r1, r1
 80091bc:	fb0a 110b 	mla	r1, sl, fp, r1
 80091c0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80091c4:	f8d9 2000 	ldr.w	r2, [r9]
 80091c8:	4461      	add	r1, ip
 80091ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80091ce:	fb0a c20b 	mla	r2, sl, fp, ip
 80091d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80091d6:	b289      	uxth	r1, r1
 80091d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80091dc:	4577      	cmp	r7, lr
 80091de:	f849 1b04 	str.w	r1, [r9], #4
 80091e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80091e6:	d8e2      	bhi.n	80091ae <__multiply+0xb2>
 80091e8:	9a01      	ldr	r2, [sp, #4]
 80091ea:	f845 c002 	str.w	ip, [r5, r2]
 80091ee:	9a03      	ldr	r2, [sp, #12]
 80091f0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80091f4:	3304      	adds	r3, #4
 80091f6:	f1b9 0f00 	cmp.w	r9, #0
 80091fa:	d020      	beq.n	800923e <__multiply+0x142>
 80091fc:	6829      	ldr	r1, [r5, #0]
 80091fe:	f104 0c14 	add.w	ip, r4, #20
 8009202:	46ae      	mov	lr, r5
 8009204:	f04f 0a00 	mov.w	sl, #0
 8009208:	f8bc b000 	ldrh.w	fp, [ip]
 800920c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009210:	fb09 220b 	mla	r2, r9, fp, r2
 8009214:	4492      	add	sl, r2
 8009216:	b289      	uxth	r1, r1
 8009218:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800921c:	f84e 1b04 	str.w	r1, [lr], #4
 8009220:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009224:	f8be 1000 	ldrh.w	r1, [lr]
 8009228:	0c12      	lsrs	r2, r2, #16
 800922a:	fb09 1102 	mla	r1, r9, r2, r1
 800922e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009232:	4567      	cmp	r7, ip
 8009234:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009238:	d8e6      	bhi.n	8009208 <__multiply+0x10c>
 800923a:	9a01      	ldr	r2, [sp, #4]
 800923c:	50a9      	str	r1, [r5, r2]
 800923e:	3504      	adds	r5, #4
 8009240:	e79a      	b.n	8009178 <__multiply+0x7c>
 8009242:	3e01      	subs	r6, #1
 8009244:	e79c      	b.n	8009180 <__multiply+0x84>
 8009246:	bf00      	nop
 8009248:	0800c070 	.word	0x0800c070
 800924c:	0800c0fc 	.word	0x0800c0fc

08009250 <__pow5mult>:
 8009250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009254:	4615      	mov	r5, r2
 8009256:	f012 0203 	ands.w	r2, r2, #3
 800925a:	4606      	mov	r6, r0
 800925c:	460f      	mov	r7, r1
 800925e:	d007      	beq.n	8009270 <__pow5mult+0x20>
 8009260:	4c25      	ldr	r4, [pc, #148]	; (80092f8 <__pow5mult+0xa8>)
 8009262:	3a01      	subs	r2, #1
 8009264:	2300      	movs	r3, #0
 8009266:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800926a:	f7ff fe51 	bl	8008f10 <__multadd>
 800926e:	4607      	mov	r7, r0
 8009270:	10ad      	asrs	r5, r5, #2
 8009272:	d03d      	beq.n	80092f0 <__pow5mult+0xa0>
 8009274:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009276:	b97c      	cbnz	r4, 8009298 <__pow5mult+0x48>
 8009278:	2010      	movs	r0, #16
 800927a:	f7ff fdbf 	bl	8008dfc <malloc>
 800927e:	4602      	mov	r2, r0
 8009280:	6270      	str	r0, [r6, #36]	; 0x24
 8009282:	b928      	cbnz	r0, 8009290 <__pow5mult+0x40>
 8009284:	4b1d      	ldr	r3, [pc, #116]	; (80092fc <__pow5mult+0xac>)
 8009286:	481e      	ldr	r0, [pc, #120]	; (8009300 <__pow5mult+0xb0>)
 8009288:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800928c:	f000 fd2e 	bl	8009cec <__assert_func>
 8009290:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009294:	6004      	str	r4, [r0, #0]
 8009296:	60c4      	str	r4, [r0, #12]
 8009298:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800929c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80092a0:	b94c      	cbnz	r4, 80092b6 <__pow5mult+0x66>
 80092a2:	f240 2171 	movw	r1, #625	; 0x271
 80092a6:	4630      	mov	r0, r6
 80092a8:	f7ff ff12 	bl	80090d0 <__i2b>
 80092ac:	2300      	movs	r3, #0
 80092ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80092b2:	4604      	mov	r4, r0
 80092b4:	6003      	str	r3, [r0, #0]
 80092b6:	f04f 0900 	mov.w	r9, #0
 80092ba:	07eb      	lsls	r3, r5, #31
 80092bc:	d50a      	bpl.n	80092d4 <__pow5mult+0x84>
 80092be:	4639      	mov	r1, r7
 80092c0:	4622      	mov	r2, r4
 80092c2:	4630      	mov	r0, r6
 80092c4:	f7ff ff1a 	bl	80090fc <__multiply>
 80092c8:	4639      	mov	r1, r7
 80092ca:	4680      	mov	r8, r0
 80092cc:	4630      	mov	r0, r6
 80092ce:	f7ff fdfd 	bl	8008ecc <_Bfree>
 80092d2:	4647      	mov	r7, r8
 80092d4:	106d      	asrs	r5, r5, #1
 80092d6:	d00b      	beq.n	80092f0 <__pow5mult+0xa0>
 80092d8:	6820      	ldr	r0, [r4, #0]
 80092da:	b938      	cbnz	r0, 80092ec <__pow5mult+0x9c>
 80092dc:	4622      	mov	r2, r4
 80092de:	4621      	mov	r1, r4
 80092e0:	4630      	mov	r0, r6
 80092e2:	f7ff ff0b 	bl	80090fc <__multiply>
 80092e6:	6020      	str	r0, [r4, #0]
 80092e8:	f8c0 9000 	str.w	r9, [r0]
 80092ec:	4604      	mov	r4, r0
 80092ee:	e7e4      	b.n	80092ba <__pow5mult+0x6a>
 80092f0:	4638      	mov	r0, r7
 80092f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092f6:	bf00      	nop
 80092f8:	0800c248 	.word	0x0800c248
 80092fc:	0800bffe 	.word	0x0800bffe
 8009300:	0800c0fc 	.word	0x0800c0fc

08009304 <__lshift>:
 8009304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009308:	460c      	mov	r4, r1
 800930a:	6849      	ldr	r1, [r1, #4]
 800930c:	6923      	ldr	r3, [r4, #16]
 800930e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009312:	68a3      	ldr	r3, [r4, #8]
 8009314:	4607      	mov	r7, r0
 8009316:	4691      	mov	r9, r2
 8009318:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800931c:	f108 0601 	add.w	r6, r8, #1
 8009320:	42b3      	cmp	r3, r6
 8009322:	db0b      	blt.n	800933c <__lshift+0x38>
 8009324:	4638      	mov	r0, r7
 8009326:	f7ff fd91 	bl	8008e4c <_Balloc>
 800932a:	4605      	mov	r5, r0
 800932c:	b948      	cbnz	r0, 8009342 <__lshift+0x3e>
 800932e:	4602      	mov	r2, r0
 8009330:	4b2a      	ldr	r3, [pc, #168]	; (80093dc <__lshift+0xd8>)
 8009332:	482b      	ldr	r0, [pc, #172]	; (80093e0 <__lshift+0xdc>)
 8009334:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009338:	f000 fcd8 	bl	8009cec <__assert_func>
 800933c:	3101      	adds	r1, #1
 800933e:	005b      	lsls	r3, r3, #1
 8009340:	e7ee      	b.n	8009320 <__lshift+0x1c>
 8009342:	2300      	movs	r3, #0
 8009344:	f100 0114 	add.w	r1, r0, #20
 8009348:	f100 0210 	add.w	r2, r0, #16
 800934c:	4618      	mov	r0, r3
 800934e:	4553      	cmp	r3, sl
 8009350:	db37      	blt.n	80093c2 <__lshift+0xbe>
 8009352:	6920      	ldr	r0, [r4, #16]
 8009354:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009358:	f104 0314 	add.w	r3, r4, #20
 800935c:	f019 091f 	ands.w	r9, r9, #31
 8009360:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009364:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009368:	d02f      	beq.n	80093ca <__lshift+0xc6>
 800936a:	f1c9 0e20 	rsb	lr, r9, #32
 800936e:	468a      	mov	sl, r1
 8009370:	f04f 0c00 	mov.w	ip, #0
 8009374:	681a      	ldr	r2, [r3, #0]
 8009376:	fa02 f209 	lsl.w	r2, r2, r9
 800937a:	ea42 020c 	orr.w	r2, r2, ip
 800937e:	f84a 2b04 	str.w	r2, [sl], #4
 8009382:	f853 2b04 	ldr.w	r2, [r3], #4
 8009386:	4298      	cmp	r0, r3
 8009388:	fa22 fc0e 	lsr.w	ip, r2, lr
 800938c:	d8f2      	bhi.n	8009374 <__lshift+0x70>
 800938e:	1b03      	subs	r3, r0, r4
 8009390:	3b15      	subs	r3, #21
 8009392:	f023 0303 	bic.w	r3, r3, #3
 8009396:	3304      	adds	r3, #4
 8009398:	f104 0215 	add.w	r2, r4, #21
 800939c:	4290      	cmp	r0, r2
 800939e:	bf38      	it	cc
 80093a0:	2304      	movcc	r3, #4
 80093a2:	f841 c003 	str.w	ip, [r1, r3]
 80093a6:	f1bc 0f00 	cmp.w	ip, #0
 80093aa:	d001      	beq.n	80093b0 <__lshift+0xac>
 80093ac:	f108 0602 	add.w	r6, r8, #2
 80093b0:	3e01      	subs	r6, #1
 80093b2:	4638      	mov	r0, r7
 80093b4:	612e      	str	r6, [r5, #16]
 80093b6:	4621      	mov	r1, r4
 80093b8:	f7ff fd88 	bl	8008ecc <_Bfree>
 80093bc:	4628      	mov	r0, r5
 80093be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80093c6:	3301      	adds	r3, #1
 80093c8:	e7c1      	b.n	800934e <__lshift+0x4a>
 80093ca:	3904      	subs	r1, #4
 80093cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80093d0:	f841 2f04 	str.w	r2, [r1, #4]!
 80093d4:	4298      	cmp	r0, r3
 80093d6:	d8f9      	bhi.n	80093cc <__lshift+0xc8>
 80093d8:	e7ea      	b.n	80093b0 <__lshift+0xac>
 80093da:	bf00      	nop
 80093dc:	0800c070 	.word	0x0800c070
 80093e0:	0800c0fc 	.word	0x0800c0fc

080093e4 <__mcmp>:
 80093e4:	b530      	push	{r4, r5, lr}
 80093e6:	6902      	ldr	r2, [r0, #16]
 80093e8:	690c      	ldr	r4, [r1, #16]
 80093ea:	1b12      	subs	r2, r2, r4
 80093ec:	d10e      	bne.n	800940c <__mcmp+0x28>
 80093ee:	f100 0314 	add.w	r3, r0, #20
 80093f2:	3114      	adds	r1, #20
 80093f4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80093f8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80093fc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009400:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009404:	42a5      	cmp	r5, r4
 8009406:	d003      	beq.n	8009410 <__mcmp+0x2c>
 8009408:	d305      	bcc.n	8009416 <__mcmp+0x32>
 800940a:	2201      	movs	r2, #1
 800940c:	4610      	mov	r0, r2
 800940e:	bd30      	pop	{r4, r5, pc}
 8009410:	4283      	cmp	r3, r0
 8009412:	d3f3      	bcc.n	80093fc <__mcmp+0x18>
 8009414:	e7fa      	b.n	800940c <__mcmp+0x28>
 8009416:	f04f 32ff 	mov.w	r2, #4294967295
 800941a:	e7f7      	b.n	800940c <__mcmp+0x28>

0800941c <__mdiff>:
 800941c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009420:	460c      	mov	r4, r1
 8009422:	4606      	mov	r6, r0
 8009424:	4611      	mov	r1, r2
 8009426:	4620      	mov	r0, r4
 8009428:	4690      	mov	r8, r2
 800942a:	f7ff ffdb 	bl	80093e4 <__mcmp>
 800942e:	1e05      	subs	r5, r0, #0
 8009430:	d110      	bne.n	8009454 <__mdiff+0x38>
 8009432:	4629      	mov	r1, r5
 8009434:	4630      	mov	r0, r6
 8009436:	f7ff fd09 	bl	8008e4c <_Balloc>
 800943a:	b930      	cbnz	r0, 800944a <__mdiff+0x2e>
 800943c:	4b3a      	ldr	r3, [pc, #232]	; (8009528 <__mdiff+0x10c>)
 800943e:	4602      	mov	r2, r0
 8009440:	f240 2132 	movw	r1, #562	; 0x232
 8009444:	4839      	ldr	r0, [pc, #228]	; (800952c <__mdiff+0x110>)
 8009446:	f000 fc51 	bl	8009cec <__assert_func>
 800944a:	2301      	movs	r3, #1
 800944c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009450:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009454:	bfa4      	itt	ge
 8009456:	4643      	movge	r3, r8
 8009458:	46a0      	movge	r8, r4
 800945a:	4630      	mov	r0, r6
 800945c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009460:	bfa6      	itte	ge
 8009462:	461c      	movge	r4, r3
 8009464:	2500      	movge	r5, #0
 8009466:	2501      	movlt	r5, #1
 8009468:	f7ff fcf0 	bl	8008e4c <_Balloc>
 800946c:	b920      	cbnz	r0, 8009478 <__mdiff+0x5c>
 800946e:	4b2e      	ldr	r3, [pc, #184]	; (8009528 <__mdiff+0x10c>)
 8009470:	4602      	mov	r2, r0
 8009472:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009476:	e7e5      	b.n	8009444 <__mdiff+0x28>
 8009478:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800947c:	6926      	ldr	r6, [r4, #16]
 800947e:	60c5      	str	r5, [r0, #12]
 8009480:	f104 0914 	add.w	r9, r4, #20
 8009484:	f108 0514 	add.w	r5, r8, #20
 8009488:	f100 0e14 	add.w	lr, r0, #20
 800948c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009490:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009494:	f108 0210 	add.w	r2, r8, #16
 8009498:	46f2      	mov	sl, lr
 800949a:	2100      	movs	r1, #0
 800949c:	f859 3b04 	ldr.w	r3, [r9], #4
 80094a0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80094a4:	fa1f f883 	uxth.w	r8, r3
 80094a8:	fa11 f18b 	uxtah	r1, r1, fp
 80094ac:	0c1b      	lsrs	r3, r3, #16
 80094ae:	eba1 0808 	sub.w	r8, r1, r8
 80094b2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80094b6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80094ba:	fa1f f888 	uxth.w	r8, r8
 80094be:	1419      	asrs	r1, r3, #16
 80094c0:	454e      	cmp	r6, r9
 80094c2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80094c6:	f84a 3b04 	str.w	r3, [sl], #4
 80094ca:	d8e7      	bhi.n	800949c <__mdiff+0x80>
 80094cc:	1b33      	subs	r3, r6, r4
 80094ce:	3b15      	subs	r3, #21
 80094d0:	f023 0303 	bic.w	r3, r3, #3
 80094d4:	3304      	adds	r3, #4
 80094d6:	3415      	adds	r4, #21
 80094d8:	42a6      	cmp	r6, r4
 80094da:	bf38      	it	cc
 80094dc:	2304      	movcc	r3, #4
 80094de:	441d      	add	r5, r3
 80094e0:	4473      	add	r3, lr
 80094e2:	469e      	mov	lr, r3
 80094e4:	462e      	mov	r6, r5
 80094e6:	4566      	cmp	r6, ip
 80094e8:	d30e      	bcc.n	8009508 <__mdiff+0xec>
 80094ea:	f10c 0203 	add.w	r2, ip, #3
 80094ee:	1b52      	subs	r2, r2, r5
 80094f0:	f022 0203 	bic.w	r2, r2, #3
 80094f4:	3d03      	subs	r5, #3
 80094f6:	45ac      	cmp	ip, r5
 80094f8:	bf38      	it	cc
 80094fa:	2200      	movcc	r2, #0
 80094fc:	441a      	add	r2, r3
 80094fe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009502:	b17b      	cbz	r3, 8009524 <__mdiff+0x108>
 8009504:	6107      	str	r7, [r0, #16]
 8009506:	e7a3      	b.n	8009450 <__mdiff+0x34>
 8009508:	f856 8b04 	ldr.w	r8, [r6], #4
 800950c:	fa11 f288 	uxtah	r2, r1, r8
 8009510:	1414      	asrs	r4, r2, #16
 8009512:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009516:	b292      	uxth	r2, r2
 8009518:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800951c:	f84e 2b04 	str.w	r2, [lr], #4
 8009520:	1421      	asrs	r1, r4, #16
 8009522:	e7e0      	b.n	80094e6 <__mdiff+0xca>
 8009524:	3f01      	subs	r7, #1
 8009526:	e7ea      	b.n	80094fe <__mdiff+0xe2>
 8009528:	0800c070 	.word	0x0800c070
 800952c:	0800c0fc 	.word	0x0800c0fc

08009530 <__ulp>:
 8009530:	b082      	sub	sp, #8
 8009532:	ed8d 0b00 	vstr	d0, [sp]
 8009536:	9b01      	ldr	r3, [sp, #4]
 8009538:	4912      	ldr	r1, [pc, #72]	; (8009584 <__ulp+0x54>)
 800953a:	4019      	ands	r1, r3
 800953c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009540:	2900      	cmp	r1, #0
 8009542:	dd05      	ble.n	8009550 <__ulp+0x20>
 8009544:	2200      	movs	r2, #0
 8009546:	460b      	mov	r3, r1
 8009548:	ec43 2b10 	vmov	d0, r2, r3
 800954c:	b002      	add	sp, #8
 800954e:	4770      	bx	lr
 8009550:	4249      	negs	r1, r1
 8009552:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009556:	ea4f 5021 	mov.w	r0, r1, asr #20
 800955a:	f04f 0200 	mov.w	r2, #0
 800955e:	f04f 0300 	mov.w	r3, #0
 8009562:	da04      	bge.n	800956e <__ulp+0x3e>
 8009564:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009568:	fa41 f300 	asr.w	r3, r1, r0
 800956c:	e7ec      	b.n	8009548 <__ulp+0x18>
 800956e:	f1a0 0114 	sub.w	r1, r0, #20
 8009572:	291e      	cmp	r1, #30
 8009574:	bfda      	itte	le
 8009576:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800957a:	fa20 f101 	lsrle.w	r1, r0, r1
 800957e:	2101      	movgt	r1, #1
 8009580:	460a      	mov	r2, r1
 8009582:	e7e1      	b.n	8009548 <__ulp+0x18>
 8009584:	7ff00000 	.word	0x7ff00000

08009588 <__b2d>:
 8009588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800958a:	6905      	ldr	r5, [r0, #16]
 800958c:	f100 0714 	add.w	r7, r0, #20
 8009590:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009594:	1f2e      	subs	r6, r5, #4
 8009596:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800959a:	4620      	mov	r0, r4
 800959c:	f7ff fd48 	bl	8009030 <__hi0bits>
 80095a0:	f1c0 0320 	rsb	r3, r0, #32
 80095a4:	280a      	cmp	r0, #10
 80095a6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009624 <__b2d+0x9c>
 80095aa:	600b      	str	r3, [r1, #0]
 80095ac:	dc14      	bgt.n	80095d8 <__b2d+0x50>
 80095ae:	f1c0 0e0b 	rsb	lr, r0, #11
 80095b2:	fa24 f10e 	lsr.w	r1, r4, lr
 80095b6:	42b7      	cmp	r7, r6
 80095b8:	ea41 030c 	orr.w	r3, r1, ip
 80095bc:	bf34      	ite	cc
 80095be:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80095c2:	2100      	movcs	r1, #0
 80095c4:	3015      	adds	r0, #21
 80095c6:	fa04 f000 	lsl.w	r0, r4, r0
 80095ca:	fa21 f10e 	lsr.w	r1, r1, lr
 80095ce:	ea40 0201 	orr.w	r2, r0, r1
 80095d2:	ec43 2b10 	vmov	d0, r2, r3
 80095d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095d8:	42b7      	cmp	r7, r6
 80095da:	bf3a      	itte	cc
 80095dc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80095e0:	f1a5 0608 	subcc.w	r6, r5, #8
 80095e4:	2100      	movcs	r1, #0
 80095e6:	380b      	subs	r0, #11
 80095e8:	d017      	beq.n	800961a <__b2d+0x92>
 80095ea:	f1c0 0c20 	rsb	ip, r0, #32
 80095ee:	fa04 f500 	lsl.w	r5, r4, r0
 80095f2:	42be      	cmp	r6, r7
 80095f4:	fa21 f40c 	lsr.w	r4, r1, ip
 80095f8:	ea45 0504 	orr.w	r5, r5, r4
 80095fc:	bf8c      	ite	hi
 80095fe:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009602:	2400      	movls	r4, #0
 8009604:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009608:	fa01 f000 	lsl.w	r0, r1, r0
 800960c:	fa24 f40c 	lsr.w	r4, r4, ip
 8009610:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009614:	ea40 0204 	orr.w	r2, r0, r4
 8009618:	e7db      	b.n	80095d2 <__b2d+0x4a>
 800961a:	ea44 030c 	orr.w	r3, r4, ip
 800961e:	460a      	mov	r2, r1
 8009620:	e7d7      	b.n	80095d2 <__b2d+0x4a>
 8009622:	bf00      	nop
 8009624:	3ff00000 	.word	0x3ff00000

08009628 <__d2b>:
 8009628:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800962c:	4689      	mov	r9, r1
 800962e:	2101      	movs	r1, #1
 8009630:	ec57 6b10 	vmov	r6, r7, d0
 8009634:	4690      	mov	r8, r2
 8009636:	f7ff fc09 	bl	8008e4c <_Balloc>
 800963a:	4604      	mov	r4, r0
 800963c:	b930      	cbnz	r0, 800964c <__d2b+0x24>
 800963e:	4602      	mov	r2, r0
 8009640:	4b25      	ldr	r3, [pc, #148]	; (80096d8 <__d2b+0xb0>)
 8009642:	4826      	ldr	r0, [pc, #152]	; (80096dc <__d2b+0xb4>)
 8009644:	f240 310a 	movw	r1, #778	; 0x30a
 8009648:	f000 fb50 	bl	8009cec <__assert_func>
 800964c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009650:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009654:	bb35      	cbnz	r5, 80096a4 <__d2b+0x7c>
 8009656:	2e00      	cmp	r6, #0
 8009658:	9301      	str	r3, [sp, #4]
 800965a:	d028      	beq.n	80096ae <__d2b+0x86>
 800965c:	4668      	mov	r0, sp
 800965e:	9600      	str	r6, [sp, #0]
 8009660:	f7ff fd06 	bl	8009070 <__lo0bits>
 8009664:	9900      	ldr	r1, [sp, #0]
 8009666:	b300      	cbz	r0, 80096aa <__d2b+0x82>
 8009668:	9a01      	ldr	r2, [sp, #4]
 800966a:	f1c0 0320 	rsb	r3, r0, #32
 800966e:	fa02 f303 	lsl.w	r3, r2, r3
 8009672:	430b      	orrs	r3, r1
 8009674:	40c2      	lsrs	r2, r0
 8009676:	6163      	str	r3, [r4, #20]
 8009678:	9201      	str	r2, [sp, #4]
 800967a:	9b01      	ldr	r3, [sp, #4]
 800967c:	61a3      	str	r3, [r4, #24]
 800967e:	2b00      	cmp	r3, #0
 8009680:	bf14      	ite	ne
 8009682:	2202      	movne	r2, #2
 8009684:	2201      	moveq	r2, #1
 8009686:	6122      	str	r2, [r4, #16]
 8009688:	b1d5      	cbz	r5, 80096c0 <__d2b+0x98>
 800968a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800968e:	4405      	add	r5, r0
 8009690:	f8c9 5000 	str.w	r5, [r9]
 8009694:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009698:	f8c8 0000 	str.w	r0, [r8]
 800969c:	4620      	mov	r0, r4
 800969e:	b003      	add	sp, #12
 80096a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80096a8:	e7d5      	b.n	8009656 <__d2b+0x2e>
 80096aa:	6161      	str	r1, [r4, #20]
 80096ac:	e7e5      	b.n	800967a <__d2b+0x52>
 80096ae:	a801      	add	r0, sp, #4
 80096b0:	f7ff fcde 	bl	8009070 <__lo0bits>
 80096b4:	9b01      	ldr	r3, [sp, #4]
 80096b6:	6163      	str	r3, [r4, #20]
 80096b8:	2201      	movs	r2, #1
 80096ba:	6122      	str	r2, [r4, #16]
 80096bc:	3020      	adds	r0, #32
 80096be:	e7e3      	b.n	8009688 <__d2b+0x60>
 80096c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80096c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80096c8:	f8c9 0000 	str.w	r0, [r9]
 80096cc:	6918      	ldr	r0, [r3, #16]
 80096ce:	f7ff fcaf 	bl	8009030 <__hi0bits>
 80096d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80096d6:	e7df      	b.n	8009698 <__d2b+0x70>
 80096d8:	0800c070 	.word	0x0800c070
 80096dc:	0800c0fc 	.word	0x0800c0fc

080096e0 <__ratio>:
 80096e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096e4:	4688      	mov	r8, r1
 80096e6:	4669      	mov	r1, sp
 80096e8:	4681      	mov	r9, r0
 80096ea:	f7ff ff4d 	bl	8009588 <__b2d>
 80096ee:	a901      	add	r1, sp, #4
 80096f0:	4640      	mov	r0, r8
 80096f2:	ec55 4b10 	vmov	r4, r5, d0
 80096f6:	f7ff ff47 	bl	8009588 <__b2d>
 80096fa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80096fe:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009702:	eba3 0c02 	sub.w	ip, r3, r2
 8009706:	e9dd 3200 	ldrd	r3, r2, [sp]
 800970a:	1a9b      	subs	r3, r3, r2
 800970c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009710:	ec51 0b10 	vmov	r0, r1, d0
 8009714:	2b00      	cmp	r3, #0
 8009716:	bfd6      	itet	le
 8009718:	460a      	movle	r2, r1
 800971a:	462a      	movgt	r2, r5
 800971c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009720:	468b      	mov	fp, r1
 8009722:	462f      	mov	r7, r5
 8009724:	bfd4      	ite	le
 8009726:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800972a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800972e:	4620      	mov	r0, r4
 8009730:	ee10 2a10 	vmov	r2, s0
 8009734:	465b      	mov	r3, fp
 8009736:	4639      	mov	r1, r7
 8009738:	f7f7 f890 	bl	800085c <__aeabi_ddiv>
 800973c:	ec41 0b10 	vmov	d0, r0, r1
 8009740:	b003      	add	sp, #12
 8009742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009746 <__copybits>:
 8009746:	3901      	subs	r1, #1
 8009748:	b570      	push	{r4, r5, r6, lr}
 800974a:	1149      	asrs	r1, r1, #5
 800974c:	6914      	ldr	r4, [r2, #16]
 800974e:	3101      	adds	r1, #1
 8009750:	f102 0314 	add.w	r3, r2, #20
 8009754:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009758:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800975c:	1f05      	subs	r5, r0, #4
 800975e:	42a3      	cmp	r3, r4
 8009760:	d30c      	bcc.n	800977c <__copybits+0x36>
 8009762:	1aa3      	subs	r3, r4, r2
 8009764:	3b11      	subs	r3, #17
 8009766:	f023 0303 	bic.w	r3, r3, #3
 800976a:	3211      	adds	r2, #17
 800976c:	42a2      	cmp	r2, r4
 800976e:	bf88      	it	hi
 8009770:	2300      	movhi	r3, #0
 8009772:	4418      	add	r0, r3
 8009774:	2300      	movs	r3, #0
 8009776:	4288      	cmp	r0, r1
 8009778:	d305      	bcc.n	8009786 <__copybits+0x40>
 800977a:	bd70      	pop	{r4, r5, r6, pc}
 800977c:	f853 6b04 	ldr.w	r6, [r3], #4
 8009780:	f845 6f04 	str.w	r6, [r5, #4]!
 8009784:	e7eb      	b.n	800975e <__copybits+0x18>
 8009786:	f840 3b04 	str.w	r3, [r0], #4
 800978a:	e7f4      	b.n	8009776 <__copybits+0x30>

0800978c <__any_on>:
 800978c:	f100 0214 	add.w	r2, r0, #20
 8009790:	6900      	ldr	r0, [r0, #16]
 8009792:	114b      	asrs	r3, r1, #5
 8009794:	4298      	cmp	r0, r3
 8009796:	b510      	push	{r4, lr}
 8009798:	db11      	blt.n	80097be <__any_on+0x32>
 800979a:	dd0a      	ble.n	80097b2 <__any_on+0x26>
 800979c:	f011 011f 	ands.w	r1, r1, #31
 80097a0:	d007      	beq.n	80097b2 <__any_on+0x26>
 80097a2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80097a6:	fa24 f001 	lsr.w	r0, r4, r1
 80097aa:	fa00 f101 	lsl.w	r1, r0, r1
 80097ae:	428c      	cmp	r4, r1
 80097b0:	d10b      	bne.n	80097ca <__any_on+0x3e>
 80097b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d803      	bhi.n	80097c2 <__any_on+0x36>
 80097ba:	2000      	movs	r0, #0
 80097bc:	bd10      	pop	{r4, pc}
 80097be:	4603      	mov	r3, r0
 80097c0:	e7f7      	b.n	80097b2 <__any_on+0x26>
 80097c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80097c6:	2900      	cmp	r1, #0
 80097c8:	d0f5      	beq.n	80097b6 <__any_on+0x2a>
 80097ca:	2001      	movs	r0, #1
 80097cc:	e7f6      	b.n	80097bc <__any_on+0x30>

080097ce <_calloc_r>:
 80097ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097d0:	fba1 2402 	umull	r2, r4, r1, r2
 80097d4:	b94c      	cbnz	r4, 80097ea <_calloc_r+0x1c>
 80097d6:	4611      	mov	r1, r2
 80097d8:	9201      	str	r2, [sp, #4]
 80097da:	f000 f87b 	bl	80098d4 <_malloc_r>
 80097de:	9a01      	ldr	r2, [sp, #4]
 80097e0:	4605      	mov	r5, r0
 80097e2:	b930      	cbnz	r0, 80097f2 <_calloc_r+0x24>
 80097e4:	4628      	mov	r0, r5
 80097e6:	b003      	add	sp, #12
 80097e8:	bd30      	pop	{r4, r5, pc}
 80097ea:	220c      	movs	r2, #12
 80097ec:	6002      	str	r2, [r0, #0]
 80097ee:	2500      	movs	r5, #0
 80097f0:	e7f8      	b.n	80097e4 <_calloc_r+0x16>
 80097f2:	4621      	mov	r1, r4
 80097f4:	f7fc fbbe 	bl	8005f74 <memset>
 80097f8:	e7f4      	b.n	80097e4 <_calloc_r+0x16>
	...

080097fc <_free_r>:
 80097fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097fe:	2900      	cmp	r1, #0
 8009800:	d044      	beq.n	800988c <_free_r+0x90>
 8009802:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009806:	9001      	str	r0, [sp, #4]
 8009808:	2b00      	cmp	r3, #0
 800980a:	f1a1 0404 	sub.w	r4, r1, #4
 800980e:	bfb8      	it	lt
 8009810:	18e4      	addlt	r4, r4, r3
 8009812:	f000 fab5 	bl	8009d80 <__malloc_lock>
 8009816:	4a1e      	ldr	r2, [pc, #120]	; (8009890 <_free_r+0x94>)
 8009818:	9801      	ldr	r0, [sp, #4]
 800981a:	6813      	ldr	r3, [r2, #0]
 800981c:	b933      	cbnz	r3, 800982c <_free_r+0x30>
 800981e:	6063      	str	r3, [r4, #4]
 8009820:	6014      	str	r4, [r2, #0]
 8009822:	b003      	add	sp, #12
 8009824:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009828:	f000 bab0 	b.w	8009d8c <__malloc_unlock>
 800982c:	42a3      	cmp	r3, r4
 800982e:	d908      	bls.n	8009842 <_free_r+0x46>
 8009830:	6825      	ldr	r5, [r4, #0]
 8009832:	1961      	adds	r1, r4, r5
 8009834:	428b      	cmp	r3, r1
 8009836:	bf01      	itttt	eq
 8009838:	6819      	ldreq	r1, [r3, #0]
 800983a:	685b      	ldreq	r3, [r3, #4]
 800983c:	1949      	addeq	r1, r1, r5
 800983e:	6021      	streq	r1, [r4, #0]
 8009840:	e7ed      	b.n	800981e <_free_r+0x22>
 8009842:	461a      	mov	r2, r3
 8009844:	685b      	ldr	r3, [r3, #4]
 8009846:	b10b      	cbz	r3, 800984c <_free_r+0x50>
 8009848:	42a3      	cmp	r3, r4
 800984a:	d9fa      	bls.n	8009842 <_free_r+0x46>
 800984c:	6811      	ldr	r1, [r2, #0]
 800984e:	1855      	adds	r5, r2, r1
 8009850:	42a5      	cmp	r5, r4
 8009852:	d10b      	bne.n	800986c <_free_r+0x70>
 8009854:	6824      	ldr	r4, [r4, #0]
 8009856:	4421      	add	r1, r4
 8009858:	1854      	adds	r4, r2, r1
 800985a:	42a3      	cmp	r3, r4
 800985c:	6011      	str	r1, [r2, #0]
 800985e:	d1e0      	bne.n	8009822 <_free_r+0x26>
 8009860:	681c      	ldr	r4, [r3, #0]
 8009862:	685b      	ldr	r3, [r3, #4]
 8009864:	6053      	str	r3, [r2, #4]
 8009866:	4421      	add	r1, r4
 8009868:	6011      	str	r1, [r2, #0]
 800986a:	e7da      	b.n	8009822 <_free_r+0x26>
 800986c:	d902      	bls.n	8009874 <_free_r+0x78>
 800986e:	230c      	movs	r3, #12
 8009870:	6003      	str	r3, [r0, #0]
 8009872:	e7d6      	b.n	8009822 <_free_r+0x26>
 8009874:	6825      	ldr	r5, [r4, #0]
 8009876:	1961      	adds	r1, r4, r5
 8009878:	428b      	cmp	r3, r1
 800987a:	bf04      	itt	eq
 800987c:	6819      	ldreq	r1, [r3, #0]
 800987e:	685b      	ldreq	r3, [r3, #4]
 8009880:	6063      	str	r3, [r4, #4]
 8009882:	bf04      	itt	eq
 8009884:	1949      	addeq	r1, r1, r5
 8009886:	6021      	streq	r1, [r4, #0]
 8009888:	6054      	str	r4, [r2, #4]
 800988a:	e7ca      	b.n	8009822 <_free_r+0x26>
 800988c:	b003      	add	sp, #12
 800988e:	bd30      	pop	{r4, r5, pc}
 8009890:	200007f8 	.word	0x200007f8

08009894 <sbrk_aligned>:
 8009894:	b570      	push	{r4, r5, r6, lr}
 8009896:	4e0e      	ldr	r6, [pc, #56]	; (80098d0 <sbrk_aligned+0x3c>)
 8009898:	460c      	mov	r4, r1
 800989a:	6831      	ldr	r1, [r6, #0]
 800989c:	4605      	mov	r5, r0
 800989e:	b911      	cbnz	r1, 80098a6 <sbrk_aligned+0x12>
 80098a0:	f000 f9f2 	bl	8009c88 <_sbrk_r>
 80098a4:	6030      	str	r0, [r6, #0]
 80098a6:	4621      	mov	r1, r4
 80098a8:	4628      	mov	r0, r5
 80098aa:	f000 f9ed 	bl	8009c88 <_sbrk_r>
 80098ae:	1c43      	adds	r3, r0, #1
 80098b0:	d00a      	beq.n	80098c8 <sbrk_aligned+0x34>
 80098b2:	1cc4      	adds	r4, r0, #3
 80098b4:	f024 0403 	bic.w	r4, r4, #3
 80098b8:	42a0      	cmp	r0, r4
 80098ba:	d007      	beq.n	80098cc <sbrk_aligned+0x38>
 80098bc:	1a21      	subs	r1, r4, r0
 80098be:	4628      	mov	r0, r5
 80098c0:	f000 f9e2 	bl	8009c88 <_sbrk_r>
 80098c4:	3001      	adds	r0, #1
 80098c6:	d101      	bne.n	80098cc <sbrk_aligned+0x38>
 80098c8:	f04f 34ff 	mov.w	r4, #4294967295
 80098cc:	4620      	mov	r0, r4
 80098ce:	bd70      	pop	{r4, r5, r6, pc}
 80098d0:	200007fc 	.word	0x200007fc

080098d4 <_malloc_r>:
 80098d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098d8:	1ccd      	adds	r5, r1, #3
 80098da:	f025 0503 	bic.w	r5, r5, #3
 80098de:	3508      	adds	r5, #8
 80098e0:	2d0c      	cmp	r5, #12
 80098e2:	bf38      	it	cc
 80098e4:	250c      	movcc	r5, #12
 80098e6:	2d00      	cmp	r5, #0
 80098e8:	4607      	mov	r7, r0
 80098ea:	db01      	blt.n	80098f0 <_malloc_r+0x1c>
 80098ec:	42a9      	cmp	r1, r5
 80098ee:	d905      	bls.n	80098fc <_malloc_r+0x28>
 80098f0:	230c      	movs	r3, #12
 80098f2:	603b      	str	r3, [r7, #0]
 80098f4:	2600      	movs	r6, #0
 80098f6:	4630      	mov	r0, r6
 80098f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098fc:	4e2e      	ldr	r6, [pc, #184]	; (80099b8 <_malloc_r+0xe4>)
 80098fe:	f000 fa3f 	bl	8009d80 <__malloc_lock>
 8009902:	6833      	ldr	r3, [r6, #0]
 8009904:	461c      	mov	r4, r3
 8009906:	bb34      	cbnz	r4, 8009956 <_malloc_r+0x82>
 8009908:	4629      	mov	r1, r5
 800990a:	4638      	mov	r0, r7
 800990c:	f7ff ffc2 	bl	8009894 <sbrk_aligned>
 8009910:	1c43      	adds	r3, r0, #1
 8009912:	4604      	mov	r4, r0
 8009914:	d14d      	bne.n	80099b2 <_malloc_r+0xde>
 8009916:	6834      	ldr	r4, [r6, #0]
 8009918:	4626      	mov	r6, r4
 800991a:	2e00      	cmp	r6, #0
 800991c:	d140      	bne.n	80099a0 <_malloc_r+0xcc>
 800991e:	6823      	ldr	r3, [r4, #0]
 8009920:	4631      	mov	r1, r6
 8009922:	4638      	mov	r0, r7
 8009924:	eb04 0803 	add.w	r8, r4, r3
 8009928:	f000 f9ae 	bl	8009c88 <_sbrk_r>
 800992c:	4580      	cmp	r8, r0
 800992e:	d13a      	bne.n	80099a6 <_malloc_r+0xd2>
 8009930:	6821      	ldr	r1, [r4, #0]
 8009932:	3503      	adds	r5, #3
 8009934:	1a6d      	subs	r5, r5, r1
 8009936:	f025 0503 	bic.w	r5, r5, #3
 800993a:	3508      	adds	r5, #8
 800993c:	2d0c      	cmp	r5, #12
 800993e:	bf38      	it	cc
 8009940:	250c      	movcc	r5, #12
 8009942:	4629      	mov	r1, r5
 8009944:	4638      	mov	r0, r7
 8009946:	f7ff ffa5 	bl	8009894 <sbrk_aligned>
 800994a:	3001      	adds	r0, #1
 800994c:	d02b      	beq.n	80099a6 <_malloc_r+0xd2>
 800994e:	6823      	ldr	r3, [r4, #0]
 8009950:	442b      	add	r3, r5
 8009952:	6023      	str	r3, [r4, #0]
 8009954:	e00e      	b.n	8009974 <_malloc_r+0xa0>
 8009956:	6822      	ldr	r2, [r4, #0]
 8009958:	1b52      	subs	r2, r2, r5
 800995a:	d41e      	bmi.n	800999a <_malloc_r+0xc6>
 800995c:	2a0b      	cmp	r2, #11
 800995e:	d916      	bls.n	800998e <_malloc_r+0xba>
 8009960:	1961      	adds	r1, r4, r5
 8009962:	42a3      	cmp	r3, r4
 8009964:	6025      	str	r5, [r4, #0]
 8009966:	bf18      	it	ne
 8009968:	6059      	strne	r1, [r3, #4]
 800996a:	6863      	ldr	r3, [r4, #4]
 800996c:	bf08      	it	eq
 800996e:	6031      	streq	r1, [r6, #0]
 8009970:	5162      	str	r2, [r4, r5]
 8009972:	604b      	str	r3, [r1, #4]
 8009974:	4638      	mov	r0, r7
 8009976:	f104 060b 	add.w	r6, r4, #11
 800997a:	f000 fa07 	bl	8009d8c <__malloc_unlock>
 800997e:	f026 0607 	bic.w	r6, r6, #7
 8009982:	1d23      	adds	r3, r4, #4
 8009984:	1af2      	subs	r2, r6, r3
 8009986:	d0b6      	beq.n	80098f6 <_malloc_r+0x22>
 8009988:	1b9b      	subs	r3, r3, r6
 800998a:	50a3      	str	r3, [r4, r2]
 800998c:	e7b3      	b.n	80098f6 <_malloc_r+0x22>
 800998e:	6862      	ldr	r2, [r4, #4]
 8009990:	42a3      	cmp	r3, r4
 8009992:	bf0c      	ite	eq
 8009994:	6032      	streq	r2, [r6, #0]
 8009996:	605a      	strne	r2, [r3, #4]
 8009998:	e7ec      	b.n	8009974 <_malloc_r+0xa0>
 800999a:	4623      	mov	r3, r4
 800999c:	6864      	ldr	r4, [r4, #4]
 800999e:	e7b2      	b.n	8009906 <_malloc_r+0x32>
 80099a0:	4634      	mov	r4, r6
 80099a2:	6876      	ldr	r6, [r6, #4]
 80099a4:	e7b9      	b.n	800991a <_malloc_r+0x46>
 80099a6:	230c      	movs	r3, #12
 80099a8:	603b      	str	r3, [r7, #0]
 80099aa:	4638      	mov	r0, r7
 80099ac:	f000 f9ee 	bl	8009d8c <__malloc_unlock>
 80099b0:	e7a1      	b.n	80098f6 <_malloc_r+0x22>
 80099b2:	6025      	str	r5, [r4, #0]
 80099b4:	e7de      	b.n	8009974 <_malloc_r+0xa0>
 80099b6:	bf00      	nop
 80099b8:	200007f8 	.word	0x200007f8

080099bc <__ssputs_r>:
 80099bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099c0:	688e      	ldr	r6, [r1, #8]
 80099c2:	429e      	cmp	r6, r3
 80099c4:	4682      	mov	sl, r0
 80099c6:	460c      	mov	r4, r1
 80099c8:	4690      	mov	r8, r2
 80099ca:	461f      	mov	r7, r3
 80099cc:	d838      	bhi.n	8009a40 <__ssputs_r+0x84>
 80099ce:	898a      	ldrh	r2, [r1, #12]
 80099d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80099d4:	d032      	beq.n	8009a3c <__ssputs_r+0x80>
 80099d6:	6825      	ldr	r5, [r4, #0]
 80099d8:	6909      	ldr	r1, [r1, #16]
 80099da:	eba5 0901 	sub.w	r9, r5, r1
 80099de:	6965      	ldr	r5, [r4, #20]
 80099e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80099e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80099e8:	3301      	adds	r3, #1
 80099ea:	444b      	add	r3, r9
 80099ec:	106d      	asrs	r5, r5, #1
 80099ee:	429d      	cmp	r5, r3
 80099f0:	bf38      	it	cc
 80099f2:	461d      	movcc	r5, r3
 80099f4:	0553      	lsls	r3, r2, #21
 80099f6:	d531      	bpl.n	8009a5c <__ssputs_r+0xa0>
 80099f8:	4629      	mov	r1, r5
 80099fa:	f7ff ff6b 	bl	80098d4 <_malloc_r>
 80099fe:	4606      	mov	r6, r0
 8009a00:	b950      	cbnz	r0, 8009a18 <__ssputs_r+0x5c>
 8009a02:	230c      	movs	r3, #12
 8009a04:	f8ca 3000 	str.w	r3, [sl]
 8009a08:	89a3      	ldrh	r3, [r4, #12]
 8009a0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a0e:	81a3      	strh	r3, [r4, #12]
 8009a10:	f04f 30ff 	mov.w	r0, #4294967295
 8009a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a18:	6921      	ldr	r1, [r4, #16]
 8009a1a:	464a      	mov	r2, r9
 8009a1c:	f7ff fa08 	bl	8008e30 <memcpy>
 8009a20:	89a3      	ldrh	r3, [r4, #12]
 8009a22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009a26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a2a:	81a3      	strh	r3, [r4, #12]
 8009a2c:	6126      	str	r6, [r4, #16]
 8009a2e:	6165      	str	r5, [r4, #20]
 8009a30:	444e      	add	r6, r9
 8009a32:	eba5 0509 	sub.w	r5, r5, r9
 8009a36:	6026      	str	r6, [r4, #0]
 8009a38:	60a5      	str	r5, [r4, #8]
 8009a3a:	463e      	mov	r6, r7
 8009a3c:	42be      	cmp	r6, r7
 8009a3e:	d900      	bls.n	8009a42 <__ssputs_r+0x86>
 8009a40:	463e      	mov	r6, r7
 8009a42:	6820      	ldr	r0, [r4, #0]
 8009a44:	4632      	mov	r2, r6
 8009a46:	4641      	mov	r1, r8
 8009a48:	f000 f980 	bl	8009d4c <memmove>
 8009a4c:	68a3      	ldr	r3, [r4, #8]
 8009a4e:	1b9b      	subs	r3, r3, r6
 8009a50:	60a3      	str	r3, [r4, #8]
 8009a52:	6823      	ldr	r3, [r4, #0]
 8009a54:	4433      	add	r3, r6
 8009a56:	6023      	str	r3, [r4, #0]
 8009a58:	2000      	movs	r0, #0
 8009a5a:	e7db      	b.n	8009a14 <__ssputs_r+0x58>
 8009a5c:	462a      	mov	r2, r5
 8009a5e:	f000 f99b 	bl	8009d98 <_realloc_r>
 8009a62:	4606      	mov	r6, r0
 8009a64:	2800      	cmp	r0, #0
 8009a66:	d1e1      	bne.n	8009a2c <__ssputs_r+0x70>
 8009a68:	6921      	ldr	r1, [r4, #16]
 8009a6a:	4650      	mov	r0, sl
 8009a6c:	f7ff fec6 	bl	80097fc <_free_r>
 8009a70:	e7c7      	b.n	8009a02 <__ssputs_r+0x46>
	...

08009a74 <_svfiprintf_r>:
 8009a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a78:	4698      	mov	r8, r3
 8009a7a:	898b      	ldrh	r3, [r1, #12]
 8009a7c:	061b      	lsls	r3, r3, #24
 8009a7e:	b09d      	sub	sp, #116	; 0x74
 8009a80:	4607      	mov	r7, r0
 8009a82:	460d      	mov	r5, r1
 8009a84:	4614      	mov	r4, r2
 8009a86:	d50e      	bpl.n	8009aa6 <_svfiprintf_r+0x32>
 8009a88:	690b      	ldr	r3, [r1, #16]
 8009a8a:	b963      	cbnz	r3, 8009aa6 <_svfiprintf_r+0x32>
 8009a8c:	2140      	movs	r1, #64	; 0x40
 8009a8e:	f7ff ff21 	bl	80098d4 <_malloc_r>
 8009a92:	6028      	str	r0, [r5, #0]
 8009a94:	6128      	str	r0, [r5, #16]
 8009a96:	b920      	cbnz	r0, 8009aa2 <_svfiprintf_r+0x2e>
 8009a98:	230c      	movs	r3, #12
 8009a9a:	603b      	str	r3, [r7, #0]
 8009a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009aa0:	e0d1      	b.n	8009c46 <_svfiprintf_r+0x1d2>
 8009aa2:	2340      	movs	r3, #64	; 0x40
 8009aa4:	616b      	str	r3, [r5, #20]
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	9309      	str	r3, [sp, #36]	; 0x24
 8009aaa:	2320      	movs	r3, #32
 8009aac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ab0:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ab4:	2330      	movs	r3, #48	; 0x30
 8009ab6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009c60 <_svfiprintf_r+0x1ec>
 8009aba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009abe:	f04f 0901 	mov.w	r9, #1
 8009ac2:	4623      	mov	r3, r4
 8009ac4:	469a      	mov	sl, r3
 8009ac6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009aca:	b10a      	cbz	r2, 8009ad0 <_svfiprintf_r+0x5c>
 8009acc:	2a25      	cmp	r2, #37	; 0x25
 8009ace:	d1f9      	bne.n	8009ac4 <_svfiprintf_r+0x50>
 8009ad0:	ebba 0b04 	subs.w	fp, sl, r4
 8009ad4:	d00b      	beq.n	8009aee <_svfiprintf_r+0x7a>
 8009ad6:	465b      	mov	r3, fp
 8009ad8:	4622      	mov	r2, r4
 8009ada:	4629      	mov	r1, r5
 8009adc:	4638      	mov	r0, r7
 8009ade:	f7ff ff6d 	bl	80099bc <__ssputs_r>
 8009ae2:	3001      	adds	r0, #1
 8009ae4:	f000 80aa 	beq.w	8009c3c <_svfiprintf_r+0x1c8>
 8009ae8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009aea:	445a      	add	r2, fp
 8009aec:	9209      	str	r2, [sp, #36]	; 0x24
 8009aee:	f89a 3000 	ldrb.w	r3, [sl]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	f000 80a2 	beq.w	8009c3c <_svfiprintf_r+0x1c8>
 8009af8:	2300      	movs	r3, #0
 8009afa:	f04f 32ff 	mov.w	r2, #4294967295
 8009afe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b02:	f10a 0a01 	add.w	sl, sl, #1
 8009b06:	9304      	str	r3, [sp, #16]
 8009b08:	9307      	str	r3, [sp, #28]
 8009b0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b0e:	931a      	str	r3, [sp, #104]	; 0x68
 8009b10:	4654      	mov	r4, sl
 8009b12:	2205      	movs	r2, #5
 8009b14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b18:	4851      	ldr	r0, [pc, #324]	; (8009c60 <_svfiprintf_r+0x1ec>)
 8009b1a:	f7f6 fb69 	bl	80001f0 <memchr>
 8009b1e:	9a04      	ldr	r2, [sp, #16]
 8009b20:	b9d8      	cbnz	r0, 8009b5a <_svfiprintf_r+0xe6>
 8009b22:	06d0      	lsls	r0, r2, #27
 8009b24:	bf44      	itt	mi
 8009b26:	2320      	movmi	r3, #32
 8009b28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b2c:	0711      	lsls	r1, r2, #28
 8009b2e:	bf44      	itt	mi
 8009b30:	232b      	movmi	r3, #43	; 0x2b
 8009b32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b36:	f89a 3000 	ldrb.w	r3, [sl]
 8009b3a:	2b2a      	cmp	r3, #42	; 0x2a
 8009b3c:	d015      	beq.n	8009b6a <_svfiprintf_r+0xf6>
 8009b3e:	9a07      	ldr	r2, [sp, #28]
 8009b40:	4654      	mov	r4, sl
 8009b42:	2000      	movs	r0, #0
 8009b44:	f04f 0c0a 	mov.w	ip, #10
 8009b48:	4621      	mov	r1, r4
 8009b4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b4e:	3b30      	subs	r3, #48	; 0x30
 8009b50:	2b09      	cmp	r3, #9
 8009b52:	d94e      	bls.n	8009bf2 <_svfiprintf_r+0x17e>
 8009b54:	b1b0      	cbz	r0, 8009b84 <_svfiprintf_r+0x110>
 8009b56:	9207      	str	r2, [sp, #28]
 8009b58:	e014      	b.n	8009b84 <_svfiprintf_r+0x110>
 8009b5a:	eba0 0308 	sub.w	r3, r0, r8
 8009b5e:	fa09 f303 	lsl.w	r3, r9, r3
 8009b62:	4313      	orrs	r3, r2
 8009b64:	9304      	str	r3, [sp, #16]
 8009b66:	46a2      	mov	sl, r4
 8009b68:	e7d2      	b.n	8009b10 <_svfiprintf_r+0x9c>
 8009b6a:	9b03      	ldr	r3, [sp, #12]
 8009b6c:	1d19      	adds	r1, r3, #4
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	9103      	str	r1, [sp, #12]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	bfbb      	ittet	lt
 8009b76:	425b      	neglt	r3, r3
 8009b78:	f042 0202 	orrlt.w	r2, r2, #2
 8009b7c:	9307      	strge	r3, [sp, #28]
 8009b7e:	9307      	strlt	r3, [sp, #28]
 8009b80:	bfb8      	it	lt
 8009b82:	9204      	strlt	r2, [sp, #16]
 8009b84:	7823      	ldrb	r3, [r4, #0]
 8009b86:	2b2e      	cmp	r3, #46	; 0x2e
 8009b88:	d10c      	bne.n	8009ba4 <_svfiprintf_r+0x130>
 8009b8a:	7863      	ldrb	r3, [r4, #1]
 8009b8c:	2b2a      	cmp	r3, #42	; 0x2a
 8009b8e:	d135      	bne.n	8009bfc <_svfiprintf_r+0x188>
 8009b90:	9b03      	ldr	r3, [sp, #12]
 8009b92:	1d1a      	adds	r2, r3, #4
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	9203      	str	r2, [sp, #12]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	bfb8      	it	lt
 8009b9c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ba0:	3402      	adds	r4, #2
 8009ba2:	9305      	str	r3, [sp, #20]
 8009ba4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009c70 <_svfiprintf_r+0x1fc>
 8009ba8:	7821      	ldrb	r1, [r4, #0]
 8009baa:	2203      	movs	r2, #3
 8009bac:	4650      	mov	r0, sl
 8009bae:	f7f6 fb1f 	bl	80001f0 <memchr>
 8009bb2:	b140      	cbz	r0, 8009bc6 <_svfiprintf_r+0x152>
 8009bb4:	2340      	movs	r3, #64	; 0x40
 8009bb6:	eba0 000a 	sub.w	r0, r0, sl
 8009bba:	fa03 f000 	lsl.w	r0, r3, r0
 8009bbe:	9b04      	ldr	r3, [sp, #16]
 8009bc0:	4303      	orrs	r3, r0
 8009bc2:	3401      	adds	r4, #1
 8009bc4:	9304      	str	r3, [sp, #16]
 8009bc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bca:	4826      	ldr	r0, [pc, #152]	; (8009c64 <_svfiprintf_r+0x1f0>)
 8009bcc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009bd0:	2206      	movs	r2, #6
 8009bd2:	f7f6 fb0d 	bl	80001f0 <memchr>
 8009bd6:	2800      	cmp	r0, #0
 8009bd8:	d038      	beq.n	8009c4c <_svfiprintf_r+0x1d8>
 8009bda:	4b23      	ldr	r3, [pc, #140]	; (8009c68 <_svfiprintf_r+0x1f4>)
 8009bdc:	bb1b      	cbnz	r3, 8009c26 <_svfiprintf_r+0x1b2>
 8009bde:	9b03      	ldr	r3, [sp, #12]
 8009be0:	3307      	adds	r3, #7
 8009be2:	f023 0307 	bic.w	r3, r3, #7
 8009be6:	3308      	adds	r3, #8
 8009be8:	9303      	str	r3, [sp, #12]
 8009bea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bec:	4433      	add	r3, r6
 8009bee:	9309      	str	r3, [sp, #36]	; 0x24
 8009bf0:	e767      	b.n	8009ac2 <_svfiprintf_r+0x4e>
 8009bf2:	fb0c 3202 	mla	r2, ip, r2, r3
 8009bf6:	460c      	mov	r4, r1
 8009bf8:	2001      	movs	r0, #1
 8009bfa:	e7a5      	b.n	8009b48 <_svfiprintf_r+0xd4>
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	3401      	adds	r4, #1
 8009c00:	9305      	str	r3, [sp, #20]
 8009c02:	4619      	mov	r1, r3
 8009c04:	f04f 0c0a 	mov.w	ip, #10
 8009c08:	4620      	mov	r0, r4
 8009c0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c0e:	3a30      	subs	r2, #48	; 0x30
 8009c10:	2a09      	cmp	r2, #9
 8009c12:	d903      	bls.n	8009c1c <_svfiprintf_r+0x1a8>
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d0c5      	beq.n	8009ba4 <_svfiprintf_r+0x130>
 8009c18:	9105      	str	r1, [sp, #20]
 8009c1a:	e7c3      	b.n	8009ba4 <_svfiprintf_r+0x130>
 8009c1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c20:	4604      	mov	r4, r0
 8009c22:	2301      	movs	r3, #1
 8009c24:	e7f0      	b.n	8009c08 <_svfiprintf_r+0x194>
 8009c26:	ab03      	add	r3, sp, #12
 8009c28:	9300      	str	r3, [sp, #0]
 8009c2a:	462a      	mov	r2, r5
 8009c2c:	4b0f      	ldr	r3, [pc, #60]	; (8009c6c <_svfiprintf_r+0x1f8>)
 8009c2e:	a904      	add	r1, sp, #16
 8009c30:	4638      	mov	r0, r7
 8009c32:	f7fc fa47 	bl	80060c4 <_printf_float>
 8009c36:	1c42      	adds	r2, r0, #1
 8009c38:	4606      	mov	r6, r0
 8009c3a:	d1d6      	bne.n	8009bea <_svfiprintf_r+0x176>
 8009c3c:	89ab      	ldrh	r3, [r5, #12]
 8009c3e:	065b      	lsls	r3, r3, #25
 8009c40:	f53f af2c 	bmi.w	8009a9c <_svfiprintf_r+0x28>
 8009c44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c46:	b01d      	add	sp, #116	; 0x74
 8009c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c4c:	ab03      	add	r3, sp, #12
 8009c4e:	9300      	str	r3, [sp, #0]
 8009c50:	462a      	mov	r2, r5
 8009c52:	4b06      	ldr	r3, [pc, #24]	; (8009c6c <_svfiprintf_r+0x1f8>)
 8009c54:	a904      	add	r1, sp, #16
 8009c56:	4638      	mov	r0, r7
 8009c58:	f7fc fcd8 	bl	800660c <_printf_i>
 8009c5c:	e7eb      	b.n	8009c36 <_svfiprintf_r+0x1c2>
 8009c5e:	bf00      	nop
 8009c60:	0800c254 	.word	0x0800c254
 8009c64:	0800c25e 	.word	0x0800c25e
 8009c68:	080060c5 	.word	0x080060c5
 8009c6c:	080099bd 	.word	0x080099bd
 8009c70:	0800c25a 	.word	0x0800c25a
 8009c74:	00000000 	.word	0x00000000

08009c78 <nan>:
 8009c78:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009c80 <nan+0x8>
 8009c7c:	4770      	bx	lr
 8009c7e:	bf00      	nop
 8009c80:	00000000 	.word	0x00000000
 8009c84:	7ff80000 	.word	0x7ff80000

08009c88 <_sbrk_r>:
 8009c88:	b538      	push	{r3, r4, r5, lr}
 8009c8a:	4d06      	ldr	r5, [pc, #24]	; (8009ca4 <_sbrk_r+0x1c>)
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	4604      	mov	r4, r0
 8009c90:	4608      	mov	r0, r1
 8009c92:	602b      	str	r3, [r5, #0]
 8009c94:	f7f9 f868 	bl	8002d68 <_sbrk>
 8009c98:	1c43      	adds	r3, r0, #1
 8009c9a:	d102      	bne.n	8009ca2 <_sbrk_r+0x1a>
 8009c9c:	682b      	ldr	r3, [r5, #0]
 8009c9e:	b103      	cbz	r3, 8009ca2 <_sbrk_r+0x1a>
 8009ca0:	6023      	str	r3, [r4, #0]
 8009ca2:	bd38      	pop	{r3, r4, r5, pc}
 8009ca4:	20000800 	.word	0x20000800

08009ca8 <strncmp>:
 8009ca8:	b510      	push	{r4, lr}
 8009caa:	b17a      	cbz	r2, 8009ccc <strncmp+0x24>
 8009cac:	4603      	mov	r3, r0
 8009cae:	3901      	subs	r1, #1
 8009cb0:	1884      	adds	r4, r0, r2
 8009cb2:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009cb6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009cba:	4290      	cmp	r0, r2
 8009cbc:	d101      	bne.n	8009cc2 <strncmp+0x1a>
 8009cbe:	42a3      	cmp	r3, r4
 8009cc0:	d101      	bne.n	8009cc6 <strncmp+0x1e>
 8009cc2:	1a80      	subs	r0, r0, r2
 8009cc4:	bd10      	pop	{r4, pc}
 8009cc6:	2800      	cmp	r0, #0
 8009cc8:	d1f3      	bne.n	8009cb2 <strncmp+0xa>
 8009cca:	e7fa      	b.n	8009cc2 <strncmp+0x1a>
 8009ccc:	4610      	mov	r0, r2
 8009cce:	e7f9      	b.n	8009cc4 <strncmp+0x1c>

08009cd0 <__ascii_wctomb>:
 8009cd0:	b149      	cbz	r1, 8009ce6 <__ascii_wctomb+0x16>
 8009cd2:	2aff      	cmp	r2, #255	; 0xff
 8009cd4:	bf85      	ittet	hi
 8009cd6:	238a      	movhi	r3, #138	; 0x8a
 8009cd8:	6003      	strhi	r3, [r0, #0]
 8009cda:	700a      	strbls	r2, [r1, #0]
 8009cdc:	f04f 30ff 	movhi.w	r0, #4294967295
 8009ce0:	bf98      	it	ls
 8009ce2:	2001      	movls	r0, #1
 8009ce4:	4770      	bx	lr
 8009ce6:	4608      	mov	r0, r1
 8009ce8:	4770      	bx	lr
	...

08009cec <__assert_func>:
 8009cec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009cee:	4614      	mov	r4, r2
 8009cf0:	461a      	mov	r2, r3
 8009cf2:	4b09      	ldr	r3, [pc, #36]	; (8009d18 <__assert_func+0x2c>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	4605      	mov	r5, r0
 8009cf8:	68d8      	ldr	r0, [r3, #12]
 8009cfa:	b14c      	cbz	r4, 8009d10 <__assert_func+0x24>
 8009cfc:	4b07      	ldr	r3, [pc, #28]	; (8009d1c <__assert_func+0x30>)
 8009cfe:	9100      	str	r1, [sp, #0]
 8009d00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009d04:	4906      	ldr	r1, [pc, #24]	; (8009d20 <__assert_func+0x34>)
 8009d06:	462b      	mov	r3, r5
 8009d08:	f000 f80e 	bl	8009d28 <fiprintf>
 8009d0c:	f000 fa8c 	bl	800a228 <abort>
 8009d10:	4b04      	ldr	r3, [pc, #16]	; (8009d24 <__assert_func+0x38>)
 8009d12:	461c      	mov	r4, r3
 8009d14:	e7f3      	b.n	8009cfe <__assert_func+0x12>
 8009d16:	bf00      	nop
 8009d18:	20000074 	.word	0x20000074
 8009d1c:	0800c265 	.word	0x0800c265
 8009d20:	0800c272 	.word	0x0800c272
 8009d24:	0800c2a0 	.word	0x0800c2a0

08009d28 <fiprintf>:
 8009d28:	b40e      	push	{r1, r2, r3}
 8009d2a:	b503      	push	{r0, r1, lr}
 8009d2c:	4601      	mov	r1, r0
 8009d2e:	ab03      	add	r3, sp, #12
 8009d30:	4805      	ldr	r0, [pc, #20]	; (8009d48 <fiprintf+0x20>)
 8009d32:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d36:	6800      	ldr	r0, [r0, #0]
 8009d38:	9301      	str	r3, [sp, #4]
 8009d3a:	f000 f885 	bl	8009e48 <_vfiprintf_r>
 8009d3e:	b002      	add	sp, #8
 8009d40:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d44:	b003      	add	sp, #12
 8009d46:	4770      	bx	lr
 8009d48:	20000074 	.word	0x20000074

08009d4c <memmove>:
 8009d4c:	4288      	cmp	r0, r1
 8009d4e:	b510      	push	{r4, lr}
 8009d50:	eb01 0402 	add.w	r4, r1, r2
 8009d54:	d902      	bls.n	8009d5c <memmove+0x10>
 8009d56:	4284      	cmp	r4, r0
 8009d58:	4623      	mov	r3, r4
 8009d5a:	d807      	bhi.n	8009d6c <memmove+0x20>
 8009d5c:	1e43      	subs	r3, r0, #1
 8009d5e:	42a1      	cmp	r1, r4
 8009d60:	d008      	beq.n	8009d74 <memmove+0x28>
 8009d62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d6a:	e7f8      	b.n	8009d5e <memmove+0x12>
 8009d6c:	4402      	add	r2, r0
 8009d6e:	4601      	mov	r1, r0
 8009d70:	428a      	cmp	r2, r1
 8009d72:	d100      	bne.n	8009d76 <memmove+0x2a>
 8009d74:	bd10      	pop	{r4, pc}
 8009d76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d7e:	e7f7      	b.n	8009d70 <memmove+0x24>

08009d80 <__malloc_lock>:
 8009d80:	4801      	ldr	r0, [pc, #4]	; (8009d88 <__malloc_lock+0x8>)
 8009d82:	f000 bc11 	b.w	800a5a8 <__retarget_lock_acquire_recursive>
 8009d86:	bf00      	nop
 8009d88:	20000804 	.word	0x20000804

08009d8c <__malloc_unlock>:
 8009d8c:	4801      	ldr	r0, [pc, #4]	; (8009d94 <__malloc_unlock+0x8>)
 8009d8e:	f000 bc0c 	b.w	800a5aa <__retarget_lock_release_recursive>
 8009d92:	bf00      	nop
 8009d94:	20000804 	.word	0x20000804

08009d98 <_realloc_r>:
 8009d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d9c:	4680      	mov	r8, r0
 8009d9e:	4614      	mov	r4, r2
 8009da0:	460e      	mov	r6, r1
 8009da2:	b921      	cbnz	r1, 8009dae <_realloc_r+0x16>
 8009da4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009da8:	4611      	mov	r1, r2
 8009daa:	f7ff bd93 	b.w	80098d4 <_malloc_r>
 8009dae:	b92a      	cbnz	r2, 8009dbc <_realloc_r+0x24>
 8009db0:	f7ff fd24 	bl	80097fc <_free_r>
 8009db4:	4625      	mov	r5, r4
 8009db6:	4628      	mov	r0, r5
 8009db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dbc:	f000 fc5c 	bl	800a678 <_malloc_usable_size_r>
 8009dc0:	4284      	cmp	r4, r0
 8009dc2:	4607      	mov	r7, r0
 8009dc4:	d802      	bhi.n	8009dcc <_realloc_r+0x34>
 8009dc6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009dca:	d812      	bhi.n	8009df2 <_realloc_r+0x5a>
 8009dcc:	4621      	mov	r1, r4
 8009dce:	4640      	mov	r0, r8
 8009dd0:	f7ff fd80 	bl	80098d4 <_malloc_r>
 8009dd4:	4605      	mov	r5, r0
 8009dd6:	2800      	cmp	r0, #0
 8009dd8:	d0ed      	beq.n	8009db6 <_realloc_r+0x1e>
 8009dda:	42bc      	cmp	r4, r7
 8009ddc:	4622      	mov	r2, r4
 8009dde:	4631      	mov	r1, r6
 8009de0:	bf28      	it	cs
 8009de2:	463a      	movcs	r2, r7
 8009de4:	f7ff f824 	bl	8008e30 <memcpy>
 8009de8:	4631      	mov	r1, r6
 8009dea:	4640      	mov	r0, r8
 8009dec:	f7ff fd06 	bl	80097fc <_free_r>
 8009df0:	e7e1      	b.n	8009db6 <_realloc_r+0x1e>
 8009df2:	4635      	mov	r5, r6
 8009df4:	e7df      	b.n	8009db6 <_realloc_r+0x1e>

08009df6 <__sfputc_r>:
 8009df6:	6893      	ldr	r3, [r2, #8]
 8009df8:	3b01      	subs	r3, #1
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	b410      	push	{r4}
 8009dfe:	6093      	str	r3, [r2, #8]
 8009e00:	da08      	bge.n	8009e14 <__sfputc_r+0x1e>
 8009e02:	6994      	ldr	r4, [r2, #24]
 8009e04:	42a3      	cmp	r3, r4
 8009e06:	db01      	blt.n	8009e0c <__sfputc_r+0x16>
 8009e08:	290a      	cmp	r1, #10
 8009e0a:	d103      	bne.n	8009e14 <__sfputc_r+0x1e>
 8009e0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e10:	f000 b94a 	b.w	800a0a8 <__swbuf_r>
 8009e14:	6813      	ldr	r3, [r2, #0]
 8009e16:	1c58      	adds	r0, r3, #1
 8009e18:	6010      	str	r0, [r2, #0]
 8009e1a:	7019      	strb	r1, [r3, #0]
 8009e1c:	4608      	mov	r0, r1
 8009e1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e22:	4770      	bx	lr

08009e24 <__sfputs_r>:
 8009e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e26:	4606      	mov	r6, r0
 8009e28:	460f      	mov	r7, r1
 8009e2a:	4614      	mov	r4, r2
 8009e2c:	18d5      	adds	r5, r2, r3
 8009e2e:	42ac      	cmp	r4, r5
 8009e30:	d101      	bne.n	8009e36 <__sfputs_r+0x12>
 8009e32:	2000      	movs	r0, #0
 8009e34:	e007      	b.n	8009e46 <__sfputs_r+0x22>
 8009e36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e3a:	463a      	mov	r2, r7
 8009e3c:	4630      	mov	r0, r6
 8009e3e:	f7ff ffda 	bl	8009df6 <__sfputc_r>
 8009e42:	1c43      	adds	r3, r0, #1
 8009e44:	d1f3      	bne.n	8009e2e <__sfputs_r+0xa>
 8009e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009e48 <_vfiprintf_r>:
 8009e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e4c:	460d      	mov	r5, r1
 8009e4e:	b09d      	sub	sp, #116	; 0x74
 8009e50:	4614      	mov	r4, r2
 8009e52:	4698      	mov	r8, r3
 8009e54:	4606      	mov	r6, r0
 8009e56:	b118      	cbz	r0, 8009e60 <_vfiprintf_r+0x18>
 8009e58:	6983      	ldr	r3, [r0, #24]
 8009e5a:	b90b      	cbnz	r3, 8009e60 <_vfiprintf_r+0x18>
 8009e5c:	f000 fb06 	bl	800a46c <__sinit>
 8009e60:	4b89      	ldr	r3, [pc, #548]	; (800a088 <_vfiprintf_r+0x240>)
 8009e62:	429d      	cmp	r5, r3
 8009e64:	d11b      	bne.n	8009e9e <_vfiprintf_r+0x56>
 8009e66:	6875      	ldr	r5, [r6, #4]
 8009e68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e6a:	07d9      	lsls	r1, r3, #31
 8009e6c:	d405      	bmi.n	8009e7a <_vfiprintf_r+0x32>
 8009e6e:	89ab      	ldrh	r3, [r5, #12]
 8009e70:	059a      	lsls	r2, r3, #22
 8009e72:	d402      	bmi.n	8009e7a <_vfiprintf_r+0x32>
 8009e74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e76:	f000 fb97 	bl	800a5a8 <__retarget_lock_acquire_recursive>
 8009e7a:	89ab      	ldrh	r3, [r5, #12]
 8009e7c:	071b      	lsls	r3, r3, #28
 8009e7e:	d501      	bpl.n	8009e84 <_vfiprintf_r+0x3c>
 8009e80:	692b      	ldr	r3, [r5, #16]
 8009e82:	b9eb      	cbnz	r3, 8009ec0 <_vfiprintf_r+0x78>
 8009e84:	4629      	mov	r1, r5
 8009e86:	4630      	mov	r0, r6
 8009e88:	f000 f960 	bl	800a14c <__swsetup_r>
 8009e8c:	b1c0      	cbz	r0, 8009ec0 <_vfiprintf_r+0x78>
 8009e8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e90:	07dc      	lsls	r4, r3, #31
 8009e92:	d50e      	bpl.n	8009eb2 <_vfiprintf_r+0x6a>
 8009e94:	f04f 30ff 	mov.w	r0, #4294967295
 8009e98:	b01d      	add	sp, #116	; 0x74
 8009e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e9e:	4b7b      	ldr	r3, [pc, #492]	; (800a08c <_vfiprintf_r+0x244>)
 8009ea0:	429d      	cmp	r5, r3
 8009ea2:	d101      	bne.n	8009ea8 <_vfiprintf_r+0x60>
 8009ea4:	68b5      	ldr	r5, [r6, #8]
 8009ea6:	e7df      	b.n	8009e68 <_vfiprintf_r+0x20>
 8009ea8:	4b79      	ldr	r3, [pc, #484]	; (800a090 <_vfiprintf_r+0x248>)
 8009eaa:	429d      	cmp	r5, r3
 8009eac:	bf08      	it	eq
 8009eae:	68f5      	ldreq	r5, [r6, #12]
 8009eb0:	e7da      	b.n	8009e68 <_vfiprintf_r+0x20>
 8009eb2:	89ab      	ldrh	r3, [r5, #12]
 8009eb4:	0598      	lsls	r0, r3, #22
 8009eb6:	d4ed      	bmi.n	8009e94 <_vfiprintf_r+0x4c>
 8009eb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009eba:	f000 fb76 	bl	800a5aa <__retarget_lock_release_recursive>
 8009ebe:	e7e9      	b.n	8009e94 <_vfiprintf_r+0x4c>
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	9309      	str	r3, [sp, #36]	; 0x24
 8009ec4:	2320      	movs	r3, #32
 8009ec6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009eca:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ece:	2330      	movs	r3, #48	; 0x30
 8009ed0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a094 <_vfiprintf_r+0x24c>
 8009ed4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ed8:	f04f 0901 	mov.w	r9, #1
 8009edc:	4623      	mov	r3, r4
 8009ede:	469a      	mov	sl, r3
 8009ee0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ee4:	b10a      	cbz	r2, 8009eea <_vfiprintf_r+0xa2>
 8009ee6:	2a25      	cmp	r2, #37	; 0x25
 8009ee8:	d1f9      	bne.n	8009ede <_vfiprintf_r+0x96>
 8009eea:	ebba 0b04 	subs.w	fp, sl, r4
 8009eee:	d00b      	beq.n	8009f08 <_vfiprintf_r+0xc0>
 8009ef0:	465b      	mov	r3, fp
 8009ef2:	4622      	mov	r2, r4
 8009ef4:	4629      	mov	r1, r5
 8009ef6:	4630      	mov	r0, r6
 8009ef8:	f7ff ff94 	bl	8009e24 <__sfputs_r>
 8009efc:	3001      	adds	r0, #1
 8009efe:	f000 80aa 	beq.w	800a056 <_vfiprintf_r+0x20e>
 8009f02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f04:	445a      	add	r2, fp
 8009f06:	9209      	str	r2, [sp, #36]	; 0x24
 8009f08:	f89a 3000 	ldrb.w	r3, [sl]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	f000 80a2 	beq.w	800a056 <_vfiprintf_r+0x20e>
 8009f12:	2300      	movs	r3, #0
 8009f14:	f04f 32ff 	mov.w	r2, #4294967295
 8009f18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f1c:	f10a 0a01 	add.w	sl, sl, #1
 8009f20:	9304      	str	r3, [sp, #16]
 8009f22:	9307      	str	r3, [sp, #28]
 8009f24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f28:	931a      	str	r3, [sp, #104]	; 0x68
 8009f2a:	4654      	mov	r4, sl
 8009f2c:	2205      	movs	r2, #5
 8009f2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f32:	4858      	ldr	r0, [pc, #352]	; (800a094 <_vfiprintf_r+0x24c>)
 8009f34:	f7f6 f95c 	bl	80001f0 <memchr>
 8009f38:	9a04      	ldr	r2, [sp, #16]
 8009f3a:	b9d8      	cbnz	r0, 8009f74 <_vfiprintf_r+0x12c>
 8009f3c:	06d1      	lsls	r1, r2, #27
 8009f3e:	bf44      	itt	mi
 8009f40:	2320      	movmi	r3, #32
 8009f42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f46:	0713      	lsls	r3, r2, #28
 8009f48:	bf44      	itt	mi
 8009f4a:	232b      	movmi	r3, #43	; 0x2b
 8009f4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f50:	f89a 3000 	ldrb.w	r3, [sl]
 8009f54:	2b2a      	cmp	r3, #42	; 0x2a
 8009f56:	d015      	beq.n	8009f84 <_vfiprintf_r+0x13c>
 8009f58:	9a07      	ldr	r2, [sp, #28]
 8009f5a:	4654      	mov	r4, sl
 8009f5c:	2000      	movs	r0, #0
 8009f5e:	f04f 0c0a 	mov.w	ip, #10
 8009f62:	4621      	mov	r1, r4
 8009f64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f68:	3b30      	subs	r3, #48	; 0x30
 8009f6a:	2b09      	cmp	r3, #9
 8009f6c:	d94e      	bls.n	800a00c <_vfiprintf_r+0x1c4>
 8009f6e:	b1b0      	cbz	r0, 8009f9e <_vfiprintf_r+0x156>
 8009f70:	9207      	str	r2, [sp, #28]
 8009f72:	e014      	b.n	8009f9e <_vfiprintf_r+0x156>
 8009f74:	eba0 0308 	sub.w	r3, r0, r8
 8009f78:	fa09 f303 	lsl.w	r3, r9, r3
 8009f7c:	4313      	orrs	r3, r2
 8009f7e:	9304      	str	r3, [sp, #16]
 8009f80:	46a2      	mov	sl, r4
 8009f82:	e7d2      	b.n	8009f2a <_vfiprintf_r+0xe2>
 8009f84:	9b03      	ldr	r3, [sp, #12]
 8009f86:	1d19      	adds	r1, r3, #4
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	9103      	str	r1, [sp, #12]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	bfbb      	ittet	lt
 8009f90:	425b      	neglt	r3, r3
 8009f92:	f042 0202 	orrlt.w	r2, r2, #2
 8009f96:	9307      	strge	r3, [sp, #28]
 8009f98:	9307      	strlt	r3, [sp, #28]
 8009f9a:	bfb8      	it	lt
 8009f9c:	9204      	strlt	r2, [sp, #16]
 8009f9e:	7823      	ldrb	r3, [r4, #0]
 8009fa0:	2b2e      	cmp	r3, #46	; 0x2e
 8009fa2:	d10c      	bne.n	8009fbe <_vfiprintf_r+0x176>
 8009fa4:	7863      	ldrb	r3, [r4, #1]
 8009fa6:	2b2a      	cmp	r3, #42	; 0x2a
 8009fa8:	d135      	bne.n	800a016 <_vfiprintf_r+0x1ce>
 8009faa:	9b03      	ldr	r3, [sp, #12]
 8009fac:	1d1a      	adds	r2, r3, #4
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	9203      	str	r2, [sp, #12]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	bfb8      	it	lt
 8009fb6:	f04f 33ff 	movlt.w	r3, #4294967295
 8009fba:	3402      	adds	r4, #2
 8009fbc:	9305      	str	r3, [sp, #20]
 8009fbe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a0a4 <_vfiprintf_r+0x25c>
 8009fc2:	7821      	ldrb	r1, [r4, #0]
 8009fc4:	2203      	movs	r2, #3
 8009fc6:	4650      	mov	r0, sl
 8009fc8:	f7f6 f912 	bl	80001f0 <memchr>
 8009fcc:	b140      	cbz	r0, 8009fe0 <_vfiprintf_r+0x198>
 8009fce:	2340      	movs	r3, #64	; 0x40
 8009fd0:	eba0 000a 	sub.w	r0, r0, sl
 8009fd4:	fa03 f000 	lsl.w	r0, r3, r0
 8009fd8:	9b04      	ldr	r3, [sp, #16]
 8009fda:	4303      	orrs	r3, r0
 8009fdc:	3401      	adds	r4, #1
 8009fde:	9304      	str	r3, [sp, #16]
 8009fe0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fe4:	482c      	ldr	r0, [pc, #176]	; (800a098 <_vfiprintf_r+0x250>)
 8009fe6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009fea:	2206      	movs	r2, #6
 8009fec:	f7f6 f900 	bl	80001f0 <memchr>
 8009ff0:	2800      	cmp	r0, #0
 8009ff2:	d03f      	beq.n	800a074 <_vfiprintf_r+0x22c>
 8009ff4:	4b29      	ldr	r3, [pc, #164]	; (800a09c <_vfiprintf_r+0x254>)
 8009ff6:	bb1b      	cbnz	r3, 800a040 <_vfiprintf_r+0x1f8>
 8009ff8:	9b03      	ldr	r3, [sp, #12]
 8009ffa:	3307      	adds	r3, #7
 8009ffc:	f023 0307 	bic.w	r3, r3, #7
 800a000:	3308      	adds	r3, #8
 800a002:	9303      	str	r3, [sp, #12]
 800a004:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a006:	443b      	add	r3, r7
 800a008:	9309      	str	r3, [sp, #36]	; 0x24
 800a00a:	e767      	b.n	8009edc <_vfiprintf_r+0x94>
 800a00c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a010:	460c      	mov	r4, r1
 800a012:	2001      	movs	r0, #1
 800a014:	e7a5      	b.n	8009f62 <_vfiprintf_r+0x11a>
 800a016:	2300      	movs	r3, #0
 800a018:	3401      	adds	r4, #1
 800a01a:	9305      	str	r3, [sp, #20]
 800a01c:	4619      	mov	r1, r3
 800a01e:	f04f 0c0a 	mov.w	ip, #10
 800a022:	4620      	mov	r0, r4
 800a024:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a028:	3a30      	subs	r2, #48	; 0x30
 800a02a:	2a09      	cmp	r2, #9
 800a02c:	d903      	bls.n	800a036 <_vfiprintf_r+0x1ee>
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d0c5      	beq.n	8009fbe <_vfiprintf_r+0x176>
 800a032:	9105      	str	r1, [sp, #20]
 800a034:	e7c3      	b.n	8009fbe <_vfiprintf_r+0x176>
 800a036:	fb0c 2101 	mla	r1, ip, r1, r2
 800a03a:	4604      	mov	r4, r0
 800a03c:	2301      	movs	r3, #1
 800a03e:	e7f0      	b.n	800a022 <_vfiprintf_r+0x1da>
 800a040:	ab03      	add	r3, sp, #12
 800a042:	9300      	str	r3, [sp, #0]
 800a044:	462a      	mov	r2, r5
 800a046:	4b16      	ldr	r3, [pc, #88]	; (800a0a0 <_vfiprintf_r+0x258>)
 800a048:	a904      	add	r1, sp, #16
 800a04a:	4630      	mov	r0, r6
 800a04c:	f7fc f83a 	bl	80060c4 <_printf_float>
 800a050:	4607      	mov	r7, r0
 800a052:	1c78      	adds	r0, r7, #1
 800a054:	d1d6      	bne.n	800a004 <_vfiprintf_r+0x1bc>
 800a056:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a058:	07d9      	lsls	r1, r3, #31
 800a05a:	d405      	bmi.n	800a068 <_vfiprintf_r+0x220>
 800a05c:	89ab      	ldrh	r3, [r5, #12]
 800a05e:	059a      	lsls	r2, r3, #22
 800a060:	d402      	bmi.n	800a068 <_vfiprintf_r+0x220>
 800a062:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a064:	f000 faa1 	bl	800a5aa <__retarget_lock_release_recursive>
 800a068:	89ab      	ldrh	r3, [r5, #12]
 800a06a:	065b      	lsls	r3, r3, #25
 800a06c:	f53f af12 	bmi.w	8009e94 <_vfiprintf_r+0x4c>
 800a070:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a072:	e711      	b.n	8009e98 <_vfiprintf_r+0x50>
 800a074:	ab03      	add	r3, sp, #12
 800a076:	9300      	str	r3, [sp, #0]
 800a078:	462a      	mov	r2, r5
 800a07a:	4b09      	ldr	r3, [pc, #36]	; (800a0a0 <_vfiprintf_r+0x258>)
 800a07c:	a904      	add	r1, sp, #16
 800a07e:	4630      	mov	r0, r6
 800a080:	f7fc fac4 	bl	800660c <_printf_i>
 800a084:	e7e4      	b.n	800a050 <_vfiprintf_r+0x208>
 800a086:	bf00      	nop
 800a088:	0800c2c4 	.word	0x0800c2c4
 800a08c:	0800c2e4 	.word	0x0800c2e4
 800a090:	0800c2a4 	.word	0x0800c2a4
 800a094:	0800c254 	.word	0x0800c254
 800a098:	0800c25e 	.word	0x0800c25e
 800a09c:	080060c5 	.word	0x080060c5
 800a0a0:	08009e25 	.word	0x08009e25
 800a0a4:	0800c25a 	.word	0x0800c25a

0800a0a8 <__swbuf_r>:
 800a0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0aa:	460e      	mov	r6, r1
 800a0ac:	4614      	mov	r4, r2
 800a0ae:	4605      	mov	r5, r0
 800a0b0:	b118      	cbz	r0, 800a0ba <__swbuf_r+0x12>
 800a0b2:	6983      	ldr	r3, [r0, #24]
 800a0b4:	b90b      	cbnz	r3, 800a0ba <__swbuf_r+0x12>
 800a0b6:	f000 f9d9 	bl	800a46c <__sinit>
 800a0ba:	4b21      	ldr	r3, [pc, #132]	; (800a140 <__swbuf_r+0x98>)
 800a0bc:	429c      	cmp	r4, r3
 800a0be:	d12b      	bne.n	800a118 <__swbuf_r+0x70>
 800a0c0:	686c      	ldr	r4, [r5, #4]
 800a0c2:	69a3      	ldr	r3, [r4, #24]
 800a0c4:	60a3      	str	r3, [r4, #8]
 800a0c6:	89a3      	ldrh	r3, [r4, #12]
 800a0c8:	071a      	lsls	r2, r3, #28
 800a0ca:	d52f      	bpl.n	800a12c <__swbuf_r+0x84>
 800a0cc:	6923      	ldr	r3, [r4, #16]
 800a0ce:	b36b      	cbz	r3, 800a12c <__swbuf_r+0x84>
 800a0d0:	6923      	ldr	r3, [r4, #16]
 800a0d2:	6820      	ldr	r0, [r4, #0]
 800a0d4:	1ac0      	subs	r0, r0, r3
 800a0d6:	6963      	ldr	r3, [r4, #20]
 800a0d8:	b2f6      	uxtb	r6, r6
 800a0da:	4283      	cmp	r3, r0
 800a0dc:	4637      	mov	r7, r6
 800a0de:	dc04      	bgt.n	800a0ea <__swbuf_r+0x42>
 800a0e0:	4621      	mov	r1, r4
 800a0e2:	4628      	mov	r0, r5
 800a0e4:	f000 f92e 	bl	800a344 <_fflush_r>
 800a0e8:	bb30      	cbnz	r0, 800a138 <__swbuf_r+0x90>
 800a0ea:	68a3      	ldr	r3, [r4, #8]
 800a0ec:	3b01      	subs	r3, #1
 800a0ee:	60a3      	str	r3, [r4, #8]
 800a0f0:	6823      	ldr	r3, [r4, #0]
 800a0f2:	1c5a      	adds	r2, r3, #1
 800a0f4:	6022      	str	r2, [r4, #0]
 800a0f6:	701e      	strb	r6, [r3, #0]
 800a0f8:	6963      	ldr	r3, [r4, #20]
 800a0fa:	3001      	adds	r0, #1
 800a0fc:	4283      	cmp	r3, r0
 800a0fe:	d004      	beq.n	800a10a <__swbuf_r+0x62>
 800a100:	89a3      	ldrh	r3, [r4, #12]
 800a102:	07db      	lsls	r3, r3, #31
 800a104:	d506      	bpl.n	800a114 <__swbuf_r+0x6c>
 800a106:	2e0a      	cmp	r6, #10
 800a108:	d104      	bne.n	800a114 <__swbuf_r+0x6c>
 800a10a:	4621      	mov	r1, r4
 800a10c:	4628      	mov	r0, r5
 800a10e:	f000 f919 	bl	800a344 <_fflush_r>
 800a112:	b988      	cbnz	r0, 800a138 <__swbuf_r+0x90>
 800a114:	4638      	mov	r0, r7
 800a116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a118:	4b0a      	ldr	r3, [pc, #40]	; (800a144 <__swbuf_r+0x9c>)
 800a11a:	429c      	cmp	r4, r3
 800a11c:	d101      	bne.n	800a122 <__swbuf_r+0x7a>
 800a11e:	68ac      	ldr	r4, [r5, #8]
 800a120:	e7cf      	b.n	800a0c2 <__swbuf_r+0x1a>
 800a122:	4b09      	ldr	r3, [pc, #36]	; (800a148 <__swbuf_r+0xa0>)
 800a124:	429c      	cmp	r4, r3
 800a126:	bf08      	it	eq
 800a128:	68ec      	ldreq	r4, [r5, #12]
 800a12a:	e7ca      	b.n	800a0c2 <__swbuf_r+0x1a>
 800a12c:	4621      	mov	r1, r4
 800a12e:	4628      	mov	r0, r5
 800a130:	f000 f80c 	bl	800a14c <__swsetup_r>
 800a134:	2800      	cmp	r0, #0
 800a136:	d0cb      	beq.n	800a0d0 <__swbuf_r+0x28>
 800a138:	f04f 37ff 	mov.w	r7, #4294967295
 800a13c:	e7ea      	b.n	800a114 <__swbuf_r+0x6c>
 800a13e:	bf00      	nop
 800a140:	0800c2c4 	.word	0x0800c2c4
 800a144:	0800c2e4 	.word	0x0800c2e4
 800a148:	0800c2a4 	.word	0x0800c2a4

0800a14c <__swsetup_r>:
 800a14c:	4b32      	ldr	r3, [pc, #200]	; (800a218 <__swsetup_r+0xcc>)
 800a14e:	b570      	push	{r4, r5, r6, lr}
 800a150:	681d      	ldr	r5, [r3, #0]
 800a152:	4606      	mov	r6, r0
 800a154:	460c      	mov	r4, r1
 800a156:	b125      	cbz	r5, 800a162 <__swsetup_r+0x16>
 800a158:	69ab      	ldr	r3, [r5, #24]
 800a15a:	b913      	cbnz	r3, 800a162 <__swsetup_r+0x16>
 800a15c:	4628      	mov	r0, r5
 800a15e:	f000 f985 	bl	800a46c <__sinit>
 800a162:	4b2e      	ldr	r3, [pc, #184]	; (800a21c <__swsetup_r+0xd0>)
 800a164:	429c      	cmp	r4, r3
 800a166:	d10f      	bne.n	800a188 <__swsetup_r+0x3c>
 800a168:	686c      	ldr	r4, [r5, #4]
 800a16a:	89a3      	ldrh	r3, [r4, #12]
 800a16c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a170:	0719      	lsls	r1, r3, #28
 800a172:	d42c      	bmi.n	800a1ce <__swsetup_r+0x82>
 800a174:	06dd      	lsls	r5, r3, #27
 800a176:	d411      	bmi.n	800a19c <__swsetup_r+0x50>
 800a178:	2309      	movs	r3, #9
 800a17a:	6033      	str	r3, [r6, #0]
 800a17c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a180:	81a3      	strh	r3, [r4, #12]
 800a182:	f04f 30ff 	mov.w	r0, #4294967295
 800a186:	e03e      	b.n	800a206 <__swsetup_r+0xba>
 800a188:	4b25      	ldr	r3, [pc, #148]	; (800a220 <__swsetup_r+0xd4>)
 800a18a:	429c      	cmp	r4, r3
 800a18c:	d101      	bne.n	800a192 <__swsetup_r+0x46>
 800a18e:	68ac      	ldr	r4, [r5, #8]
 800a190:	e7eb      	b.n	800a16a <__swsetup_r+0x1e>
 800a192:	4b24      	ldr	r3, [pc, #144]	; (800a224 <__swsetup_r+0xd8>)
 800a194:	429c      	cmp	r4, r3
 800a196:	bf08      	it	eq
 800a198:	68ec      	ldreq	r4, [r5, #12]
 800a19a:	e7e6      	b.n	800a16a <__swsetup_r+0x1e>
 800a19c:	0758      	lsls	r0, r3, #29
 800a19e:	d512      	bpl.n	800a1c6 <__swsetup_r+0x7a>
 800a1a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a1a2:	b141      	cbz	r1, 800a1b6 <__swsetup_r+0x6a>
 800a1a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a1a8:	4299      	cmp	r1, r3
 800a1aa:	d002      	beq.n	800a1b2 <__swsetup_r+0x66>
 800a1ac:	4630      	mov	r0, r6
 800a1ae:	f7ff fb25 	bl	80097fc <_free_r>
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	6363      	str	r3, [r4, #52]	; 0x34
 800a1b6:	89a3      	ldrh	r3, [r4, #12]
 800a1b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a1bc:	81a3      	strh	r3, [r4, #12]
 800a1be:	2300      	movs	r3, #0
 800a1c0:	6063      	str	r3, [r4, #4]
 800a1c2:	6923      	ldr	r3, [r4, #16]
 800a1c4:	6023      	str	r3, [r4, #0]
 800a1c6:	89a3      	ldrh	r3, [r4, #12]
 800a1c8:	f043 0308 	orr.w	r3, r3, #8
 800a1cc:	81a3      	strh	r3, [r4, #12]
 800a1ce:	6923      	ldr	r3, [r4, #16]
 800a1d0:	b94b      	cbnz	r3, 800a1e6 <__swsetup_r+0x9a>
 800a1d2:	89a3      	ldrh	r3, [r4, #12]
 800a1d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a1d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1dc:	d003      	beq.n	800a1e6 <__swsetup_r+0x9a>
 800a1de:	4621      	mov	r1, r4
 800a1e0:	4630      	mov	r0, r6
 800a1e2:	f000 fa09 	bl	800a5f8 <__smakebuf_r>
 800a1e6:	89a0      	ldrh	r0, [r4, #12]
 800a1e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a1ec:	f010 0301 	ands.w	r3, r0, #1
 800a1f0:	d00a      	beq.n	800a208 <__swsetup_r+0xbc>
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	60a3      	str	r3, [r4, #8]
 800a1f6:	6963      	ldr	r3, [r4, #20]
 800a1f8:	425b      	negs	r3, r3
 800a1fa:	61a3      	str	r3, [r4, #24]
 800a1fc:	6923      	ldr	r3, [r4, #16]
 800a1fe:	b943      	cbnz	r3, 800a212 <__swsetup_r+0xc6>
 800a200:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a204:	d1ba      	bne.n	800a17c <__swsetup_r+0x30>
 800a206:	bd70      	pop	{r4, r5, r6, pc}
 800a208:	0781      	lsls	r1, r0, #30
 800a20a:	bf58      	it	pl
 800a20c:	6963      	ldrpl	r3, [r4, #20]
 800a20e:	60a3      	str	r3, [r4, #8]
 800a210:	e7f4      	b.n	800a1fc <__swsetup_r+0xb0>
 800a212:	2000      	movs	r0, #0
 800a214:	e7f7      	b.n	800a206 <__swsetup_r+0xba>
 800a216:	bf00      	nop
 800a218:	20000074 	.word	0x20000074
 800a21c:	0800c2c4 	.word	0x0800c2c4
 800a220:	0800c2e4 	.word	0x0800c2e4
 800a224:	0800c2a4 	.word	0x0800c2a4

0800a228 <abort>:
 800a228:	b508      	push	{r3, lr}
 800a22a:	2006      	movs	r0, #6
 800a22c:	f000 fa54 	bl	800a6d8 <raise>
 800a230:	2001      	movs	r0, #1
 800a232:	f7f8 fd21 	bl	8002c78 <_exit>
	...

0800a238 <__sflush_r>:
 800a238:	898a      	ldrh	r2, [r1, #12]
 800a23a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a23e:	4605      	mov	r5, r0
 800a240:	0710      	lsls	r0, r2, #28
 800a242:	460c      	mov	r4, r1
 800a244:	d458      	bmi.n	800a2f8 <__sflush_r+0xc0>
 800a246:	684b      	ldr	r3, [r1, #4]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	dc05      	bgt.n	800a258 <__sflush_r+0x20>
 800a24c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a24e:	2b00      	cmp	r3, #0
 800a250:	dc02      	bgt.n	800a258 <__sflush_r+0x20>
 800a252:	2000      	movs	r0, #0
 800a254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a258:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a25a:	2e00      	cmp	r6, #0
 800a25c:	d0f9      	beq.n	800a252 <__sflush_r+0x1a>
 800a25e:	2300      	movs	r3, #0
 800a260:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a264:	682f      	ldr	r7, [r5, #0]
 800a266:	602b      	str	r3, [r5, #0]
 800a268:	d032      	beq.n	800a2d0 <__sflush_r+0x98>
 800a26a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a26c:	89a3      	ldrh	r3, [r4, #12]
 800a26e:	075a      	lsls	r2, r3, #29
 800a270:	d505      	bpl.n	800a27e <__sflush_r+0x46>
 800a272:	6863      	ldr	r3, [r4, #4]
 800a274:	1ac0      	subs	r0, r0, r3
 800a276:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a278:	b10b      	cbz	r3, 800a27e <__sflush_r+0x46>
 800a27a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a27c:	1ac0      	subs	r0, r0, r3
 800a27e:	2300      	movs	r3, #0
 800a280:	4602      	mov	r2, r0
 800a282:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a284:	6a21      	ldr	r1, [r4, #32]
 800a286:	4628      	mov	r0, r5
 800a288:	47b0      	blx	r6
 800a28a:	1c43      	adds	r3, r0, #1
 800a28c:	89a3      	ldrh	r3, [r4, #12]
 800a28e:	d106      	bne.n	800a29e <__sflush_r+0x66>
 800a290:	6829      	ldr	r1, [r5, #0]
 800a292:	291d      	cmp	r1, #29
 800a294:	d82c      	bhi.n	800a2f0 <__sflush_r+0xb8>
 800a296:	4a2a      	ldr	r2, [pc, #168]	; (800a340 <__sflush_r+0x108>)
 800a298:	40ca      	lsrs	r2, r1
 800a29a:	07d6      	lsls	r6, r2, #31
 800a29c:	d528      	bpl.n	800a2f0 <__sflush_r+0xb8>
 800a29e:	2200      	movs	r2, #0
 800a2a0:	6062      	str	r2, [r4, #4]
 800a2a2:	04d9      	lsls	r1, r3, #19
 800a2a4:	6922      	ldr	r2, [r4, #16]
 800a2a6:	6022      	str	r2, [r4, #0]
 800a2a8:	d504      	bpl.n	800a2b4 <__sflush_r+0x7c>
 800a2aa:	1c42      	adds	r2, r0, #1
 800a2ac:	d101      	bne.n	800a2b2 <__sflush_r+0x7a>
 800a2ae:	682b      	ldr	r3, [r5, #0]
 800a2b0:	b903      	cbnz	r3, 800a2b4 <__sflush_r+0x7c>
 800a2b2:	6560      	str	r0, [r4, #84]	; 0x54
 800a2b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2b6:	602f      	str	r7, [r5, #0]
 800a2b8:	2900      	cmp	r1, #0
 800a2ba:	d0ca      	beq.n	800a252 <__sflush_r+0x1a>
 800a2bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a2c0:	4299      	cmp	r1, r3
 800a2c2:	d002      	beq.n	800a2ca <__sflush_r+0x92>
 800a2c4:	4628      	mov	r0, r5
 800a2c6:	f7ff fa99 	bl	80097fc <_free_r>
 800a2ca:	2000      	movs	r0, #0
 800a2cc:	6360      	str	r0, [r4, #52]	; 0x34
 800a2ce:	e7c1      	b.n	800a254 <__sflush_r+0x1c>
 800a2d0:	6a21      	ldr	r1, [r4, #32]
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	4628      	mov	r0, r5
 800a2d6:	47b0      	blx	r6
 800a2d8:	1c41      	adds	r1, r0, #1
 800a2da:	d1c7      	bne.n	800a26c <__sflush_r+0x34>
 800a2dc:	682b      	ldr	r3, [r5, #0]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d0c4      	beq.n	800a26c <__sflush_r+0x34>
 800a2e2:	2b1d      	cmp	r3, #29
 800a2e4:	d001      	beq.n	800a2ea <__sflush_r+0xb2>
 800a2e6:	2b16      	cmp	r3, #22
 800a2e8:	d101      	bne.n	800a2ee <__sflush_r+0xb6>
 800a2ea:	602f      	str	r7, [r5, #0]
 800a2ec:	e7b1      	b.n	800a252 <__sflush_r+0x1a>
 800a2ee:	89a3      	ldrh	r3, [r4, #12]
 800a2f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2f4:	81a3      	strh	r3, [r4, #12]
 800a2f6:	e7ad      	b.n	800a254 <__sflush_r+0x1c>
 800a2f8:	690f      	ldr	r7, [r1, #16]
 800a2fa:	2f00      	cmp	r7, #0
 800a2fc:	d0a9      	beq.n	800a252 <__sflush_r+0x1a>
 800a2fe:	0793      	lsls	r3, r2, #30
 800a300:	680e      	ldr	r6, [r1, #0]
 800a302:	bf08      	it	eq
 800a304:	694b      	ldreq	r3, [r1, #20]
 800a306:	600f      	str	r7, [r1, #0]
 800a308:	bf18      	it	ne
 800a30a:	2300      	movne	r3, #0
 800a30c:	eba6 0807 	sub.w	r8, r6, r7
 800a310:	608b      	str	r3, [r1, #8]
 800a312:	f1b8 0f00 	cmp.w	r8, #0
 800a316:	dd9c      	ble.n	800a252 <__sflush_r+0x1a>
 800a318:	6a21      	ldr	r1, [r4, #32]
 800a31a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a31c:	4643      	mov	r3, r8
 800a31e:	463a      	mov	r2, r7
 800a320:	4628      	mov	r0, r5
 800a322:	47b0      	blx	r6
 800a324:	2800      	cmp	r0, #0
 800a326:	dc06      	bgt.n	800a336 <__sflush_r+0xfe>
 800a328:	89a3      	ldrh	r3, [r4, #12]
 800a32a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a32e:	81a3      	strh	r3, [r4, #12]
 800a330:	f04f 30ff 	mov.w	r0, #4294967295
 800a334:	e78e      	b.n	800a254 <__sflush_r+0x1c>
 800a336:	4407      	add	r7, r0
 800a338:	eba8 0800 	sub.w	r8, r8, r0
 800a33c:	e7e9      	b.n	800a312 <__sflush_r+0xda>
 800a33e:	bf00      	nop
 800a340:	20400001 	.word	0x20400001

0800a344 <_fflush_r>:
 800a344:	b538      	push	{r3, r4, r5, lr}
 800a346:	690b      	ldr	r3, [r1, #16]
 800a348:	4605      	mov	r5, r0
 800a34a:	460c      	mov	r4, r1
 800a34c:	b913      	cbnz	r3, 800a354 <_fflush_r+0x10>
 800a34e:	2500      	movs	r5, #0
 800a350:	4628      	mov	r0, r5
 800a352:	bd38      	pop	{r3, r4, r5, pc}
 800a354:	b118      	cbz	r0, 800a35e <_fflush_r+0x1a>
 800a356:	6983      	ldr	r3, [r0, #24]
 800a358:	b90b      	cbnz	r3, 800a35e <_fflush_r+0x1a>
 800a35a:	f000 f887 	bl	800a46c <__sinit>
 800a35e:	4b14      	ldr	r3, [pc, #80]	; (800a3b0 <_fflush_r+0x6c>)
 800a360:	429c      	cmp	r4, r3
 800a362:	d11b      	bne.n	800a39c <_fflush_r+0x58>
 800a364:	686c      	ldr	r4, [r5, #4]
 800a366:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d0ef      	beq.n	800a34e <_fflush_r+0xa>
 800a36e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a370:	07d0      	lsls	r0, r2, #31
 800a372:	d404      	bmi.n	800a37e <_fflush_r+0x3a>
 800a374:	0599      	lsls	r1, r3, #22
 800a376:	d402      	bmi.n	800a37e <_fflush_r+0x3a>
 800a378:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a37a:	f000 f915 	bl	800a5a8 <__retarget_lock_acquire_recursive>
 800a37e:	4628      	mov	r0, r5
 800a380:	4621      	mov	r1, r4
 800a382:	f7ff ff59 	bl	800a238 <__sflush_r>
 800a386:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a388:	07da      	lsls	r2, r3, #31
 800a38a:	4605      	mov	r5, r0
 800a38c:	d4e0      	bmi.n	800a350 <_fflush_r+0xc>
 800a38e:	89a3      	ldrh	r3, [r4, #12]
 800a390:	059b      	lsls	r3, r3, #22
 800a392:	d4dd      	bmi.n	800a350 <_fflush_r+0xc>
 800a394:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a396:	f000 f908 	bl	800a5aa <__retarget_lock_release_recursive>
 800a39a:	e7d9      	b.n	800a350 <_fflush_r+0xc>
 800a39c:	4b05      	ldr	r3, [pc, #20]	; (800a3b4 <_fflush_r+0x70>)
 800a39e:	429c      	cmp	r4, r3
 800a3a0:	d101      	bne.n	800a3a6 <_fflush_r+0x62>
 800a3a2:	68ac      	ldr	r4, [r5, #8]
 800a3a4:	e7df      	b.n	800a366 <_fflush_r+0x22>
 800a3a6:	4b04      	ldr	r3, [pc, #16]	; (800a3b8 <_fflush_r+0x74>)
 800a3a8:	429c      	cmp	r4, r3
 800a3aa:	bf08      	it	eq
 800a3ac:	68ec      	ldreq	r4, [r5, #12]
 800a3ae:	e7da      	b.n	800a366 <_fflush_r+0x22>
 800a3b0:	0800c2c4 	.word	0x0800c2c4
 800a3b4:	0800c2e4 	.word	0x0800c2e4
 800a3b8:	0800c2a4 	.word	0x0800c2a4

0800a3bc <std>:
 800a3bc:	2300      	movs	r3, #0
 800a3be:	b510      	push	{r4, lr}
 800a3c0:	4604      	mov	r4, r0
 800a3c2:	e9c0 3300 	strd	r3, r3, [r0]
 800a3c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a3ca:	6083      	str	r3, [r0, #8]
 800a3cc:	8181      	strh	r1, [r0, #12]
 800a3ce:	6643      	str	r3, [r0, #100]	; 0x64
 800a3d0:	81c2      	strh	r2, [r0, #14]
 800a3d2:	6183      	str	r3, [r0, #24]
 800a3d4:	4619      	mov	r1, r3
 800a3d6:	2208      	movs	r2, #8
 800a3d8:	305c      	adds	r0, #92	; 0x5c
 800a3da:	f7fb fdcb 	bl	8005f74 <memset>
 800a3de:	4b05      	ldr	r3, [pc, #20]	; (800a3f4 <std+0x38>)
 800a3e0:	6263      	str	r3, [r4, #36]	; 0x24
 800a3e2:	4b05      	ldr	r3, [pc, #20]	; (800a3f8 <std+0x3c>)
 800a3e4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a3e6:	4b05      	ldr	r3, [pc, #20]	; (800a3fc <std+0x40>)
 800a3e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a3ea:	4b05      	ldr	r3, [pc, #20]	; (800a400 <std+0x44>)
 800a3ec:	6224      	str	r4, [r4, #32]
 800a3ee:	6323      	str	r3, [r4, #48]	; 0x30
 800a3f0:	bd10      	pop	{r4, pc}
 800a3f2:	bf00      	nop
 800a3f4:	0800a711 	.word	0x0800a711
 800a3f8:	0800a733 	.word	0x0800a733
 800a3fc:	0800a76b 	.word	0x0800a76b
 800a400:	0800a78f 	.word	0x0800a78f

0800a404 <_cleanup_r>:
 800a404:	4901      	ldr	r1, [pc, #4]	; (800a40c <_cleanup_r+0x8>)
 800a406:	f000 b8af 	b.w	800a568 <_fwalk_reent>
 800a40a:	bf00      	nop
 800a40c:	0800a345 	.word	0x0800a345

0800a410 <__sfmoreglue>:
 800a410:	b570      	push	{r4, r5, r6, lr}
 800a412:	2268      	movs	r2, #104	; 0x68
 800a414:	1e4d      	subs	r5, r1, #1
 800a416:	4355      	muls	r5, r2
 800a418:	460e      	mov	r6, r1
 800a41a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a41e:	f7ff fa59 	bl	80098d4 <_malloc_r>
 800a422:	4604      	mov	r4, r0
 800a424:	b140      	cbz	r0, 800a438 <__sfmoreglue+0x28>
 800a426:	2100      	movs	r1, #0
 800a428:	e9c0 1600 	strd	r1, r6, [r0]
 800a42c:	300c      	adds	r0, #12
 800a42e:	60a0      	str	r0, [r4, #8]
 800a430:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a434:	f7fb fd9e 	bl	8005f74 <memset>
 800a438:	4620      	mov	r0, r4
 800a43a:	bd70      	pop	{r4, r5, r6, pc}

0800a43c <__sfp_lock_acquire>:
 800a43c:	4801      	ldr	r0, [pc, #4]	; (800a444 <__sfp_lock_acquire+0x8>)
 800a43e:	f000 b8b3 	b.w	800a5a8 <__retarget_lock_acquire_recursive>
 800a442:	bf00      	nop
 800a444:	20000805 	.word	0x20000805

0800a448 <__sfp_lock_release>:
 800a448:	4801      	ldr	r0, [pc, #4]	; (800a450 <__sfp_lock_release+0x8>)
 800a44a:	f000 b8ae 	b.w	800a5aa <__retarget_lock_release_recursive>
 800a44e:	bf00      	nop
 800a450:	20000805 	.word	0x20000805

0800a454 <__sinit_lock_acquire>:
 800a454:	4801      	ldr	r0, [pc, #4]	; (800a45c <__sinit_lock_acquire+0x8>)
 800a456:	f000 b8a7 	b.w	800a5a8 <__retarget_lock_acquire_recursive>
 800a45a:	bf00      	nop
 800a45c:	20000806 	.word	0x20000806

0800a460 <__sinit_lock_release>:
 800a460:	4801      	ldr	r0, [pc, #4]	; (800a468 <__sinit_lock_release+0x8>)
 800a462:	f000 b8a2 	b.w	800a5aa <__retarget_lock_release_recursive>
 800a466:	bf00      	nop
 800a468:	20000806 	.word	0x20000806

0800a46c <__sinit>:
 800a46c:	b510      	push	{r4, lr}
 800a46e:	4604      	mov	r4, r0
 800a470:	f7ff fff0 	bl	800a454 <__sinit_lock_acquire>
 800a474:	69a3      	ldr	r3, [r4, #24]
 800a476:	b11b      	cbz	r3, 800a480 <__sinit+0x14>
 800a478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a47c:	f7ff bff0 	b.w	800a460 <__sinit_lock_release>
 800a480:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a484:	6523      	str	r3, [r4, #80]	; 0x50
 800a486:	4b13      	ldr	r3, [pc, #76]	; (800a4d4 <__sinit+0x68>)
 800a488:	4a13      	ldr	r2, [pc, #76]	; (800a4d8 <__sinit+0x6c>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a48e:	42a3      	cmp	r3, r4
 800a490:	bf04      	itt	eq
 800a492:	2301      	moveq	r3, #1
 800a494:	61a3      	streq	r3, [r4, #24]
 800a496:	4620      	mov	r0, r4
 800a498:	f000 f820 	bl	800a4dc <__sfp>
 800a49c:	6060      	str	r0, [r4, #4]
 800a49e:	4620      	mov	r0, r4
 800a4a0:	f000 f81c 	bl	800a4dc <__sfp>
 800a4a4:	60a0      	str	r0, [r4, #8]
 800a4a6:	4620      	mov	r0, r4
 800a4a8:	f000 f818 	bl	800a4dc <__sfp>
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	60e0      	str	r0, [r4, #12]
 800a4b0:	2104      	movs	r1, #4
 800a4b2:	6860      	ldr	r0, [r4, #4]
 800a4b4:	f7ff ff82 	bl	800a3bc <std>
 800a4b8:	68a0      	ldr	r0, [r4, #8]
 800a4ba:	2201      	movs	r2, #1
 800a4bc:	2109      	movs	r1, #9
 800a4be:	f7ff ff7d 	bl	800a3bc <std>
 800a4c2:	68e0      	ldr	r0, [r4, #12]
 800a4c4:	2202      	movs	r2, #2
 800a4c6:	2112      	movs	r1, #18
 800a4c8:	f7ff ff78 	bl	800a3bc <std>
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	61a3      	str	r3, [r4, #24]
 800a4d0:	e7d2      	b.n	800a478 <__sinit+0xc>
 800a4d2:	bf00      	nop
 800a4d4:	0800be60 	.word	0x0800be60
 800a4d8:	0800a405 	.word	0x0800a405

0800a4dc <__sfp>:
 800a4dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4de:	4607      	mov	r7, r0
 800a4e0:	f7ff ffac 	bl	800a43c <__sfp_lock_acquire>
 800a4e4:	4b1e      	ldr	r3, [pc, #120]	; (800a560 <__sfp+0x84>)
 800a4e6:	681e      	ldr	r6, [r3, #0]
 800a4e8:	69b3      	ldr	r3, [r6, #24]
 800a4ea:	b913      	cbnz	r3, 800a4f2 <__sfp+0x16>
 800a4ec:	4630      	mov	r0, r6
 800a4ee:	f7ff ffbd 	bl	800a46c <__sinit>
 800a4f2:	3648      	adds	r6, #72	; 0x48
 800a4f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a4f8:	3b01      	subs	r3, #1
 800a4fa:	d503      	bpl.n	800a504 <__sfp+0x28>
 800a4fc:	6833      	ldr	r3, [r6, #0]
 800a4fe:	b30b      	cbz	r3, 800a544 <__sfp+0x68>
 800a500:	6836      	ldr	r6, [r6, #0]
 800a502:	e7f7      	b.n	800a4f4 <__sfp+0x18>
 800a504:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a508:	b9d5      	cbnz	r5, 800a540 <__sfp+0x64>
 800a50a:	4b16      	ldr	r3, [pc, #88]	; (800a564 <__sfp+0x88>)
 800a50c:	60e3      	str	r3, [r4, #12]
 800a50e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a512:	6665      	str	r5, [r4, #100]	; 0x64
 800a514:	f000 f847 	bl	800a5a6 <__retarget_lock_init_recursive>
 800a518:	f7ff ff96 	bl	800a448 <__sfp_lock_release>
 800a51c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a520:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a524:	6025      	str	r5, [r4, #0]
 800a526:	61a5      	str	r5, [r4, #24]
 800a528:	2208      	movs	r2, #8
 800a52a:	4629      	mov	r1, r5
 800a52c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a530:	f7fb fd20 	bl	8005f74 <memset>
 800a534:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a538:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a53c:	4620      	mov	r0, r4
 800a53e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a540:	3468      	adds	r4, #104	; 0x68
 800a542:	e7d9      	b.n	800a4f8 <__sfp+0x1c>
 800a544:	2104      	movs	r1, #4
 800a546:	4638      	mov	r0, r7
 800a548:	f7ff ff62 	bl	800a410 <__sfmoreglue>
 800a54c:	4604      	mov	r4, r0
 800a54e:	6030      	str	r0, [r6, #0]
 800a550:	2800      	cmp	r0, #0
 800a552:	d1d5      	bne.n	800a500 <__sfp+0x24>
 800a554:	f7ff ff78 	bl	800a448 <__sfp_lock_release>
 800a558:	230c      	movs	r3, #12
 800a55a:	603b      	str	r3, [r7, #0]
 800a55c:	e7ee      	b.n	800a53c <__sfp+0x60>
 800a55e:	bf00      	nop
 800a560:	0800be60 	.word	0x0800be60
 800a564:	ffff0001 	.word	0xffff0001

0800a568 <_fwalk_reent>:
 800a568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a56c:	4606      	mov	r6, r0
 800a56e:	4688      	mov	r8, r1
 800a570:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a574:	2700      	movs	r7, #0
 800a576:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a57a:	f1b9 0901 	subs.w	r9, r9, #1
 800a57e:	d505      	bpl.n	800a58c <_fwalk_reent+0x24>
 800a580:	6824      	ldr	r4, [r4, #0]
 800a582:	2c00      	cmp	r4, #0
 800a584:	d1f7      	bne.n	800a576 <_fwalk_reent+0xe>
 800a586:	4638      	mov	r0, r7
 800a588:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a58c:	89ab      	ldrh	r3, [r5, #12]
 800a58e:	2b01      	cmp	r3, #1
 800a590:	d907      	bls.n	800a5a2 <_fwalk_reent+0x3a>
 800a592:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a596:	3301      	adds	r3, #1
 800a598:	d003      	beq.n	800a5a2 <_fwalk_reent+0x3a>
 800a59a:	4629      	mov	r1, r5
 800a59c:	4630      	mov	r0, r6
 800a59e:	47c0      	blx	r8
 800a5a0:	4307      	orrs	r7, r0
 800a5a2:	3568      	adds	r5, #104	; 0x68
 800a5a4:	e7e9      	b.n	800a57a <_fwalk_reent+0x12>

0800a5a6 <__retarget_lock_init_recursive>:
 800a5a6:	4770      	bx	lr

0800a5a8 <__retarget_lock_acquire_recursive>:
 800a5a8:	4770      	bx	lr

0800a5aa <__retarget_lock_release_recursive>:
 800a5aa:	4770      	bx	lr

0800a5ac <__swhatbuf_r>:
 800a5ac:	b570      	push	{r4, r5, r6, lr}
 800a5ae:	460e      	mov	r6, r1
 800a5b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5b4:	2900      	cmp	r1, #0
 800a5b6:	b096      	sub	sp, #88	; 0x58
 800a5b8:	4614      	mov	r4, r2
 800a5ba:	461d      	mov	r5, r3
 800a5bc:	da08      	bge.n	800a5d0 <__swhatbuf_r+0x24>
 800a5be:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	602a      	str	r2, [r5, #0]
 800a5c6:	061a      	lsls	r2, r3, #24
 800a5c8:	d410      	bmi.n	800a5ec <__swhatbuf_r+0x40>
 800a5ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5ce:	e00e      	b.n	800a5ee <__swhatbuf_r+0x42>
 800a5d0:	466a      	mov	r2, sp
 800a5d2:	f000 f903 	bl	800a7dc <_fstat_r>
 800a5d6:	2800      	cmp	r0, #0
 800a5d8:	dbf1      	blt.n	800a5be <__swhatbuf_r+0x12>
 800a5da:	9a01      	ldr	r2, [sp, #4]
 800a5dc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a5e0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a5e4:	425a      	negs	r2, r3
 800a5e6:	415a      	adcs	r2, r3
 800a5e8:	602a      	str	r2, [r5, #0]
 800a5ea:	e7ee      	b.n	800a5ca <__swhatbuf_r+0x1e>
 800a5ec:	2340      	movs	r3, #64	; 0x40
 800a5ee:	2000      	movs	r0, #0
 800a5f0:	6023      	str	r3, [r4, #0]
 800a5f2:	b016      	add	sp, #88	; 0x58
 800a5f4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a5f8 <__smakebuf_r>:
 800a5f8:	898b      	ldrh	r3, [r1, #12]
 800a5fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a5fc:	079d      	lsls	r5, r3, #30
 800a5fe:	4606      	mov	r6, r0
 800a600:	460c      	mov	r4, r1
 800a602:	d507      	bpl.n	800a614 <__smakebuf_r+0x1c>
 800a604:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a608:	6023      	str	r3, [r4, #0]
 800a60a:	6123      	str	r3, [r4, #16]
 800a60c:	2301      	movs	r3, #1
 800a60e:	6163      	str	r3, [r4, #20]
 800a610:	b002      	add	sp, #8
 800a612:	bd70      	pop	{r4, r5, r6, pc}
 800a614:	ab01      	add	r3, sp, #4
 800a616:	466a      	mov	r2, sp
 800a618:	f7ff ffc8 	bl	800a5ac <__swhatbuf_r>
 800a61c:	9900      	ldr	r1, [sp, #0]
 800a61e:	4605      	mov	r5, r0
 800a620:	4630      	mov	r0, r6
 800a622:	f7ff f957 	bl	80098d4 <_malloc_r>
 800a626:	b948      	cbnz	r0, 800a63c <__smakebuf_r+0x44>
 800a628:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a62c:	059a      	lsls	r2, r3, #22
 800a62e:	d4ef      	bmi.n	800a610 <__smakebuf_r+0x18>
 800a630:	f023 0303 	bic.w	r3, r3, #3
 800a634:	f043 0302 	orr.w	r3, r3, #2
 800a638:	81a3      	strh	r3, [r4, #12]
 800a63a:	e7e3      	b.n	800a604 <__smakebuf_r+0xc>
 800a63c:	4b0d      	ldr	r3, [pc, #52]	; (800a674 <__smakebuf_r+0x7c>)
 800a63e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a640:	89a3      	ldrh	r3, [r4, #12]
 800a642:	6020      	str	r0, [r4, #0]
 800a644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a648:	81a3      	strh	r3, [r4, #12]
 800a64a:	9b00      	ldr	r3, [sp, #0]
 800a64c:	6163      	str	r3, [r4, #20]
 800a64e:	9b01      	ldr	r3, [sp, #4]
 800a650:	6120      	str	r0, [r4, #16]
 800a652:	b15b      	cbz	r3, 800a66c <__smakebuf_r+0x74>
 800a654:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a658:	4630      	mov	r0, r6
 800a65a:	f000 f8d1 	bl	800a800 <_isatty_r>
 800a65e:	b128      	cbz	r0, 800a66c <__smakebuf_r+0x74>
 800a660:	89a3      	ldrh	r3, [r4, #12]
 800a662:	f023 0303 	bic.w	r3, r3, #3
 800a666:	f043 0301 	orr.w	r3, r3, #1
 800a66a:	81a3      	strh	r3, [r4, #12]
 800a66c:	89a0      	ldrh	r0, [r4, #12]
 800a66e:	4305      	orrs	r5, r0
 800a670:	81a5      	strh	r5, [r4, #12]
 800a672:	e7cd      	b.n	800a610 <__smakebuf_r+0x18>
 800a674:	0800a405 	.word	0x0800a405

0800a678 <_malloc_usable_size_r>:
 800a678:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a67c:	1f18      	subs	r0, r3, #4
 800a67e:	2b00      	cmp	r3, #0
 800a680:	bfbc      	itt	lt
 800a682:	580b      	ldrlt	r3, [r1, r0]
 800a684:	18c0      	addlt	r0, r0, r3
 800a686:	4770      	bx	lr

0800a688 <_raise_r>:
 800a688:	291f      	cmp	r1, #31
 800a68a:	b538      	push	{r3, r4, r5, lr}
 800a68c:	4604      	mov	r4, r0
 800a68e:	460d      	mov	r5, r1
 800a690:	d904      	bls.n	800a69c <_raise_r+0x14>
 800a692:	2316      	movs	r3, #22
 800a694:	6003      	str	r3, [r0, #0]
 800a696:	f04f 30ff 	mov.w	r0, #4294967295
 800a69a:	bd38      	pop	{r3, r4, r5, pc}
 800a69c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a69e:	b112      	cbz	r2, 800a6a6 <_raise_r+0x1e>
 800a6a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a6a4:	b94b      	cbnz	r3, 800a6ba <_raise_r+0x32>
 800a6a6:	4620      	mov	r0, r4
 800a6a8:	f000 f830 	bl	800a70c <_getpid_r>
 800a6ac:	462a      	mov	r2, r5
 800a6ae:	4601      	mov	r1, r0
 800a6b0:	4620      	mov	r0, r4
 800a6b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a6b6:	f000 b817 	b.w	800a6e8 <_kill_r>
 800a6ba:	2b01      	cmp	r3, #1
 800a6bc:	d00a      	beq.n	800a6d4 <_raise_r+0x4c>
 800a6be:	1c59      	adds	r1, r3, #1
 800a6c0:	d103      	bne.n	800a6ca <_raise_r+0x42>
 800a6c2:	2316      	movs	r3, #22
 800a6c4:	6003      	str	r3, [r0, #0]
 800a6c6:	2001      	movs	r0, #1
 800a6c8:	e7e7      	b.n	800a69a <_raise_r+0x12>
 800a6ca:	2400      	movs	r4, #0
 800a6cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a6d0:	4628      	mov	r0, r5
 800a6d2:	4798      	blx	r3
 800a6d4:	2000      	movs	r0, #0
 800a6d6:	e7e0      	b.n	800a69a <_raise_r+0x12>

0800a6d8 <raise>:
 800a6d8:	4b02      	ldr	r3, [pc, #8]	; (800a6e4 <raise+0xc>)
 800a6da:	4601      	mov	r1, r0
 800a6dc:	6818      	ldr	r0, [r3, #0]
 800a6de:	f7ff bfd3 	b.w	800a688 <_raise_r>
 800a6e2:	bf00      	nop
 800a6e4:	20000074 	.word	0x20000074

0800a6e8 <_kill_r>:
 800a6e8:	b538      	push	{r3, r4, r5, lr}
 800a6ea:	4d07      	ldr	r5, [pc, #28]	; (800a708 <_kill_r+0x20>)
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	4604      	mov	r4, r0
 800a6f0:	4608      	mov	r0, r1
 800a6f2:	4611      	mov	r1, r2
 800a6f4:	602b      	str	r3, [r5, #0]
 800a6f6:	f7f8 faaf 	bl	8002c58 <_kill>
 800a6fa:	1c43      	adds	r3, r0, #1
 800a6fc:	d102      	bne.n	800a704 <_kill_r+0x1c>
 800a6fe:	682b      	ldr	r3, [r5, #0]
 800a700:	b103      	cbz	r3, 800a704 <_kill_r+0x1c>
 800a702:	6023      	str	r3, [r4, #0]
 800a704:	bd38      	pop	{r3, r4, r5, pc}
 800a706:	bf00      	nop
 800a708:	20000800 	.word	0x20000800

0800a70c <_getpid_r>:
 800a70c:	f7f8 ba9c 	b.w	8002c48 <_getpid>

0800a710 <__sread>:
 800a710:	b510      	push	{r4, lr}
 800a712:	460c      	mov	r4, r1
 800a714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a718:	f000 f894 	bl	800a844 <_read_r>
 800a71c:	2800      	cmp	r0, #0
 800a71e:	bfab      	itete	ge
 800a720:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a722:	89a3      	ldrhlt	r3, [r4, #12]
 800a724:	181b      	addge	r3, r3, r0
 800a726:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a72a:	bfac      	ite	ge
 800a72c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a72e:	81a3      	strhlt	r3, [r4, #12]
 800a730:	bd10      	pop	{r4, pc}

0800a732 <__swrite>:
 800a732:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a736:	461f      	mov	r7, r3
 800a738:	898b      	ldrh	r3, [r1, #12]
 800a73a:	05db      	lsls	r3, r3, #23
 800a73c:	4605      	mov	r5, r0
 800a73e:	460c      	mov	r4, r1
 800a740:	4616      	mov	r6, r2
 800a742:	d505      	bpl.n	800a750 <__swrite+0x1e>
 800a744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a748:	2302      	movs	r3, #2
 800a74a:	2200      	movs	r2, #0
 800a74c:	f000 f868 	bl	800a820 <_lseek_r>
 800a750:	89a3      	ldrh	r3, [r4, #12]
 800a752:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a756:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a75a:	81a3      	strh	r3, [r4, #12]
 800a75c:	4632      	mov	r2, r6
 800a75e:	463b      	mov	r3, r7
 800a760:	4628      	mov	r0, r5
 800a762:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a766:	f000 b817 	b.w	800a798 <_write_r>

0800a76a <__sseek>:
 800a76a:	b510      	push	{r4, lr}
 800a76c:	460c      	mov	r4, r1
 800a76e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a772:	f000 f855 	bl	800a820 <_lseek_r>
 800a776:	1c43      	adds	r3, r0, #1
 800a778:	89a3      	ldrh	r3, [r4, #12]
 800a77a:	bf15      	itete	ne
 800a77c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a77e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a782:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a786:	81a3      	strheq	r3, [r4, #12]
 800a788:	bf18      	it	ne
 800a78a:	81a3      	strhne	r3, [r4, #12]
 800a78c:	bd10      	pop	{r4, pc}

0800a78e <__sclose>:
 800a78e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a792:	f000 b813 	b.w	800a7bc <_close_r>
	...

0800a798 <_write_r>:
 800a798:	b538      	push	{r3, r4, r5, lr}
 800a79a:	4d07      	ldr	r5, [pc, #28]	; (800a7b8 <_write_r+0x20>)
 800a79c:	4604      	mov	r4, r0
 800a79e:	4608      	mov	r0, r1
 800a7a0:	4611      	mov	r1, r2
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	602a      	str	r2, [r5, #0]
 800a7a6:	461a      	mov	r2, r3
 800a7a8:	f7f8 fa8d 	bl	8002cc6 <_write>
 800a7ac:	1c43      	adds	r3, r0, #1
 800a7ae:	d102      	bne.n	800a7b6 <_write_r+0x1e>
 800a7b0:	682b      	ldr	r3, [r5, #0]
 800a7b2:	b103      	cbz	r3, 800a7b6 <_write_r+0x1e>
 800a7b4:	6023      	str	r3, [r4, #0]
 800a7b6:	bd38      	pop	{r3, r4, r5, pc}
 800a7b8:	20000800 	.word	0x20000800

0800a7bc <_close_r>:
 800a7bc:	b538      	push	{r3, r4, r5, lr}
 800a7be:	4d06      	ldr	r5, [pc, #24]	; (800a7d8 <_close_r+0x1c>)
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	4604      	mov	r4, r0
 800a7c4:	4608      	mov	r0, r1
 800a7c6:	602b      	str	r3, [r5, #0]
 800a7c8:	f7f8 fa99 	bl	8002cfe <_close>
 800a7cc:	1c43      	adds	r3, r0, #1
 800a7ce:	d102      	bne.n	800a7d6 <_close_r+0x1a>
 800a7d0:	682b      	ldr	r3, [r5, #0]
 800a7d2:	b103      	cbz	r3, 800a7d6 <_close_r+0x1a>
 800a7d4:	6023      	str	r3, [r4, #0]
 800a7d6:	bd38      	pop	{r3, r4, r5, pc}
 800a7d8:	20000800 	.word	0x20000800

0800a7dc <_fstat_r>:
 800a7dc:	b538      	push	{r3, r4, r5, lr}
 800a7de:	4d07      	ldr	r5, [pc, #28]	; (800a7fc <_fstat_r+0x20>)
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	4604      	mov	r4, r0
 800a7e4:	4608      	mov	r0, r1
 800a7e6:	4611      	mov	r1, r2
 800a7e8:	602b      	str	r3, [r5, #0]
 800a7ea:	f7f8 fa94 	bl	8002d16 <_fstat>
 800a7ee:	1c43      	adds	r3, r0, #1
 800a7f0:	d102      	bne.n	800a7f8 <_fstat_r+0x1c>
 800a7f2:	682b      	ldr	r3, [r5, #0]
 800a7f4:	b103      	cbz	r3, 800a7f8 <_fstat_r+0x1c>
 800a7f6:	6023      	str	r3, [r4, #0]
 800a7f8:	bd38      	pop	{r3, r4, r5, pc}
 800a7fa:	bf00      	nop
 800a7fc:	20000800 	.word	0x20000800

0800a800 <_isatty_r>:
 800a800:	b538      	push	{r3, r4, r5, lr}
 800a802:	4d06      	ldr	r5, [pc, #24]	; (800a81c <_isatty_r+0x1c>)
 800a804:	2300      	movs	r3, #0
 800a806:	4604      	mov	r4, r0
 800a808:	4608      	mov	r0, r1
 800a80a:	602b      	str	r3, [r5, #0]
 800a80c:	f7f8 fa93 	bl	8002d36 <_isatty>
 800a810:	1c43      	adds	r3, r0, #1
 800a812:	d102      	bne.n	800a81a <_isatty_r+0x1a>
 800a814:	682b      	ldr	r3, [r5, #0]
 800a816:	b103      	cbz	r3, 800a81a <_isatty_r+0x1a>
 800a818:	6023      	str	r3, [r4, #0]
 800a81a:	bd38      	pop	{r3, r4, r5, pc}
 800a81c:	20000800 	.word	0x20000800

0800a820 <_lseek_r>:
 800a820:	b538      	push	{r3, r4, r5, lr}
 800a822:	4d07      	ldr	r5, [pc, #28]	; (800a840 <_lseek_r+0x20>)
 800a824:	4604      	mov	r4, r0
 800a826:	4608      	mov	r0, r1
 800a828:	4611      	mov	r1, r2
 800a82a:	2200      	movs	r2, #0
 800a82c:	602a      	str	r2, [r5, #0]
 800a82e:	461a      	mov	r2, r3
 800a830:	f7f8 fa8c 	bl	8002d4c <_lseek>
 800a834:	1c43      	adds	r3, r0, #1
 800a836:	d102      	bne.n	800a83e <_lseek_r+0x1e>
 800a838:	682b      	ldr	r3, [r5, #0]
 800a83a:	b103      	cbz	r3, 800a83e <_lseek_r+0x1e>
 800a83c:	6023      	str	r3, [r4, #0]
 800a83e:	bd38      	pop	{r3, r4, r5, pc}
 800a840:	20000800 	.word	0x20000800

0800a844 <_read_r>:
 800a844:	b538      	push	{r3, r4, r5, lr}
 800a846:	4d07      	ldr	r5, [pc, #28]	; (800a864 <_read_r+0x20>)
 800a848:	4604      	mov	r4, r0
 800a84a:	4608      	mov	r0, r1
 800a84c:	4611      	mov	r1, r2
 800a84e:	2200      	movs	r2, #0
 800a850:	602a      	str	r2, [r5, #0]
 800a852:	461a      	mov	r2, r3
 800a854:	f7f8 fa1a 	bl	8002c8c <_read>
 800a858:	1c43      	adds	r3, r0, #1
 800a85a:	d102      	bne.n	800a862 <_read_r+0x1e>
 800a85c:	682b      	ldr	r3, [r5, #0]
 800a85e:	b103      	cbz	r3, 800a862 <_read_r+0x1e>
 800a860:	6023      	str	r3, [r4, #0]
 800a862:	bd38      	pop	{r3, r4, r5, pc}
 800a864:	20000800 	.word	0x20000800

0800a868 <_init>:
 800a868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a86a:	bf00      	nop
 800a86c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a86e:	bc08      	pop	{r3}
 800a870:	469e      	mov	lr, r3
 800a872:	4770      	bx	lr

0800a874 <_fini>:
 800a874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a876:	bf00      	nop
 800a878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a87a:	bc08      	pop	{r3}
 800a87c:	469e      	mov	lr, r3
 800a87e:	4770      	bx	lr
