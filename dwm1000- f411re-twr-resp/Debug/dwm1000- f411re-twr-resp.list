
dwm1000- f411re-twr-resp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a488  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a94  0800a628  0800a628  0001a628  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c0bc  0800c0bc  00020248  2**0
                  CONTENTS
  4 .ARM          00000008  0800c0bc  0800c0bc  0001c0bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c0c4  0800c0c4  00020248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c0c4  0800c0c4  0001c0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c0c8  0800c0c8  0001c0c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000248  20000000  0800c0cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c4  20000248  0800c314  00020248  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000080c  0800c314  0002080c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b8ba  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b90  00000000  00000000  0003bb32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001278  00000000  00000000  0003f6c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001140  00000000  00000000  00040940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b810  00000000  00000000  00041a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017477  00000000  00000000  0005d290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093a56  00000000  00000000  00074707  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010815d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f94  00000000  00000000  001081b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000248 	.word	0x20000248
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a610 	.word	0x0800a610

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000024c 	.word	0x2000024c
 80001dc:	0800a610 	.word	0x0800a610

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a4 	b.w	8000ff8 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468c      	mov	ip, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f040 8083 	bne.w	8000e4a <__udivmoddi4+0x116>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d947      	bls.n	8000dda <__udivmoddi4+0xa6>
 8000d4a:	fab2 f282 	clz	r2, r2
 8000d4e:	b142      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	f1c2 0020 	rsb	r0, r2, #32
 8000d54:	fa24 f000 	lsr.w	r0, r4, r0
 8000d58:	4091      	lsls	r1, r2
 8000d5a:	4097      	lsls	r7, r2
 8000d5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d60:	4094      	lsls	r4, r2
 8000d62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d66:	0c23      	lsrs	r3, r4, #16
 8000d68:	fbbc f6f8 	udiv	r6, ip, r8
 8000d6c:	fa1f fe87 	uxth.w	lr, r7
 8000d70:	fb08 c116 	mls	r1, r8, r6, ip
 8000d74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d78:	fb06 f10e 	mul.w	r1, r6, lr
 8000d7c:	4299      	cmp	r1, r3
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x60>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d86:	f080 8119 	bcs.w	8000fbc <__udivmoddi4+0x288>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 8116 	bls.w	8000fbc <__udivmoddi4+0x288>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000da0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d909      	bls.n	8000dc0 <__udivmoddi4+0x8c>
 8000dac:	193c      	adds	r4, r7, r4
 8000dae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db2:	f080 8105 	bcs.w	8000fc0 <__udivmoddi4+0x28c>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	f240 8102 	bls.w	8000fc0 <__udivmoddi4+0x28c>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	443c      	add	r4, r7
 8000dc0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	2600      	movs	r6, #0
 8000dca:	b11d      	cbz	r5, 8000dd4 <__udivmoddi4+0xa0>
 8000dcc:	40d4      	lsrs	r4, r2
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xaa>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f282 	clz	r2, r2
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d150      	bne.n	8000e88 <__udivmoddi4+0x154>
 8000de6:	1bcb      	subs	r3, r1, r7
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	fa1f f887 	uxth.w	r8, r7
 8000df0:	2601      	movs	r6, #1
 8000df2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000df6:	0c21      	lsrs	r1, r4, #16
 8000df8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e00:	fb08 f30c 	mul.w	r3, r8, ip
 8000e04:	428b      	cmp	r3, r1
 8000e06:	d907      	bls.n	8000e18 <__udivmoddi4+0xe4>
 8000e08:	1879      	adds	r1, r7, r1
 8000e0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0xe2>
 8000e10:	428b      	cmp	r3, r1
 8000e12:	f200 80e9 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e16:	4684      	mov	ip, r0
 8000e18:	1ac9      	subs	r1, r1, r3
 8000e1a:	b2a3      	uxth	r3, r4
 8000e1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e28:	fb08 f800 	mul.w	r8, r8, r0
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	d907      	bls.n	8000e40 <__udivmoddi4+0x10c>
 8000e30:	193c      	adds	r4, r7, r4
 8000e32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x10a>
 8000e38:	45a0      	cmp	r8, r4
 8000e3a:	f200 80d9 	bhi.w	8000ff0 <__udivmoddi4+0x2bc>
 8000e3e:	4618      	mov	r0, r3
 8000e40:	eba4 0408 	sub.w	r4, r4, r8
 8000e44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e48:	e7bf      	b.n	8000dca <__udivmoddi4+0x96>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d909      	bls.n	8000e62 <__udivmoddi4+0x12e>
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	f000 80b1 	beq.w	8000fb6 <__udivmoddi4+0x282>
 8000e54:	2600      	movs	r6, #0
 8000e56:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	fab3 f683 	clz	r6, r3
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	d14a      	bne.n	8000f00 <__udivmoddi4+0x1cc>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d302      	bcc.n	8000e74 <__udivmoddi4+0x140>
 8000e6e:	4282      	cmp	r2, r0
 8000e70:	f200 80b8 	bhi.w	8000fe4 <__udivmoddi4+0x2b0>
 8000e74:	1a84      	subs	r4, r0, r2
 8000e76:	eb61 0103 	sbc.w	r1, r1, r3
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	468c      	mov	ip, r1
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	d0a8      	beq.n	8000dd4 <__udivmoddi4+0xa0>
 8000e82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e86:	e7a5      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e90:	4097      	lsls	r7, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9a:	40d9      	lsrs	r1, r3
 8000e9c:	4330      	orrs	r0, r6
 8000e9e:	0c03      	lsrs	r3, r0, #16
 8000ea0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ea4:	fa1f f887 	uxth.w	r8, r7
 8000ea8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb0:	fb06 f108 	mul.w	r1, r6, r8
 8000eb4:	4299      	cmp	r1, r3
 8000eb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eba:	d909      	bls.n	8000ed0 <__udivmoddi4+0x19c>
 8000ebc:	18fb      	adds	r3, r7, r3
 8000ebe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ec2:	f080 808d 	bcs.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ec6:	4299      	cmp	r1, r3
 8000ec8:	f240 808a 	bls.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	443b      	add	r3, r7
 8000ed0:	1a5b      	subs	r3, r3, r1
 8000ed2:	b281      	uxth	r1, r0
 8000ed4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000edc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee0:	fb00 f308 	mul.w	r3, r0, r8
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	d907      	bls.n	8000ef8 <__udivmoddi4+0x1c4>
 8000ee8:	1879      	adds	r1, r7, r1
 8000eea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eee:	d273      	bcs.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef0:	428b      	cmp	r3, r1
 8000ef2:	d971      	bls.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4439      	add	r1, r7
 8000ef8:	1acb      	subs	r3, r1, r3
 8000efa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000efe:	e778      	b.n	8000df2 <__udivmoddi4+0xbe>
 8000f00:	f1c6 0c20 	rsb	ip, r6, #32
 8000f04:	fa03 f406 	lsl.w	r4, r3, r6
 8000f08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f0c:	431c      	orrs	r4, r3
 8000f0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f12:	fa01 f306 	lsl.w	r3, r1, r6
 8000f16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f1e:	431f      	orrs	r7, r3
 8000f20:	0c3b      	lsrs	r3, r7, #16
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fa1f f884 	uxth.w	r8, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f32:	fb09 fa08 	mul.w	sl, r9, r8
 8000f36:	458a      	cmp	sl, r1
 8000f38:	fa02 f206 	lsl.w	r2, r2, r6
 8000f3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x220>
 8000f42:	1861      	adds	r1, r4, r1
 8000f44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f48:	d248      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4a:	458a      	cmp	sl, r1
 8000f4c:	d946      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f52:	4421      	add	r1, r4
 8000f54:	eba1 010a 	sub.w	r1, r1, sl
 8000f58:	b2bf      	uxth	r7, r7
 8000f5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f66:	fb00 f808 	mul.w	r8, r0, r8
 8000f6a:	45b8      	cmp	r8, r7
 8000f6c:	d907      	bls.n	8000f7e <__udivmoddi4+0x24a>
 8000f6e:	19e7      	adds	r7, r4, r7
 8000f70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f74:	d22e      	bcs.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f76:	45b8      	cmp	r8, r7
 8000f78:	d92c      	bls.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	4427      	add	r7, r4
 8000f7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f82:	eba7 0708 	sub.w	r7, r7, r8
 8000f86:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8a:	454f      	cmp	r7, r9
 8000f8c:	46c6      	mov	lr, r8
 8000f8e:	4649      	mov	r1, r9
 8000f90:	d31a      	bcc.n	8000fc8 <__udivmoddi4+0x294>
 8000f92:	d017      	beq.n	8000fc4 <__udivmoddi4+0x290>
 8000f94:	b15d      	cbz	r5, 8000fae <__udivmoddi4+0x27a>
 8000f96:	ebb3 020e 	subs.w	r2, r3, lr
 8000f9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fa2:	40f2      	lsrs	r2, r6
 8000fa4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fa8:	40f7      	lsrs	r7, r6
 8000faa:	e9c5 2700 	strd	r2, r7, [r5]
 8000fae:	2600      	movs	r6, #0
 8000fb0:	4631      	mov	r1, r6
 8000fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e70b      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e9      	b.n	8000d94 <__udivmoddi4+0x60>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6fd      	b.n	8000dc0 <__udivmoddi4+0x8c>
 8000fc4:	4543      	cmp	r3, r8
 8000fc6:	d2e5      	bcs.n	8000f94 <__udivmoddi4+0x260>
 8000fc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fcc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7df      	b.n	8000f94 <__udivmoddi4+0x260>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e7d2      	b.n	8000f7e <__udivmoddi4+0x24a>
 8000fd8:	4660      	mov	r0, ip
 8000fda:	e78d      	b.n	8000ef8 <__udivmoddi4+0x1c4>
 8000fdc:	4681      	mov	r9, r0
 8000fde:	e7b9      	b.n	8000f54 <__udivmoddi4+0x220>
 8000fe0:	4666      	mov	r6, ip
 8000fe2:	e775      	b.n	8000ed0 <__udivmoddi4+0x19c>
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e74a      	b.n	8000e7e <__udivmoddi4+0x14a>
 8000fe8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fec:	4439      	add	r1, r7
 8000fee:	e713      	b.n	8000e18 <__udivmoddi4+0xe4>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	443c      	add	r4, r7
 8000ff4:	e724      	b.n	8000e40 <__udivmoddi4+0x10c>
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <dwt_initialise>:
#define VBAT_ADDRESS   (0x08)
#define VTEMP_ADDRESS  (0x09)
#define XTRIM_ADDRESS  (0x1E)

int dwt_initialise(int config)
{
 8000ffc:	b590      	push	{r4, r7, lr}
 8000ffe:	b087      	sub	sp, #28
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
    uint16 otp_xtaltrim_and_rev = 0;
 8001004:	2300      	movs	r3, #0
 8001006:	82fb      	strh	r3, [r7, #22]
    uint32 ldo_tune = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	613b      	str	r3, [r7, #16]

    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
 800100c:	4b9f      	ldr	r3, [pc, #636]	; (800128c <dwt_initialise+0x290>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2200      	movs	r2, #0
 8001012:	751a      	strb	r2, [r3, #20]
    pdw1000local->wait4resp = 0; // - set to 0 - meaning wait for response not active
 8001014:	4b9d      	ldr	r3, [pc, #628]	; (800128c <dwt_initialise+0x290>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2200      	movs	r2, #0
 800101a:	755a      	strb	r2, [r3, #21]
    pdw1000local->sleep_mode = 0; // - set to 0 - meaning sleep mode has not been configured
 800101c:	4b9b      	ldr	r3, [pc, #620]	; (800128c <dwt_initialise+0x290>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2200      	movs	r2, #0
 8001022:	82da      	strh	r2, [r3, #22]

    pdw1000local->cbTxDone = NULL;
 8001024:	4b99      	ldr	r3, [pc, #612]	; (800128c <dwt_initialise+0x290>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2200      	movs	r2, #0
 800102a:	629a      	str	r2, [r3, #40]	; 0x28
    pdw1000local->cbRxOk = NULL;
 800102c:	4b97      	ldr	r3, [pc, #604]	; (800128c <dwt_initialise+0x290>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2200      	movs	r2, #0
 8001032:	62da      	str	r2, [r3, #44]	; 0x2c
    pdw1000local->cbRxTo = NULL;
 8001034:	4b95      	ldr	r3, [pc, #596]	; (800128c <dwt_initialise+0x290>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2200      	movs	r2, #0
 800103a:	631a      	str	r2, [r3, #48]	; 0x30
    pdw1000local->cbRxErr = NULL;
 800103c:	4b93      	ldr	r3, [pc, #588]	; (800128c <dwt_initialise+0x290>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2200      	movs	r2, #0
 8001042:	635a      	str	r2, [r3, #52]	; 0x34
#if DWT_API_ERROR_CHECK
    pdw1000local->otp_mask = config ; // Save the READ_OTP config mask
#endif

    // Read and validate device ID, return -1 if not recognised
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
 8001044:	f000 f926 	bl	8001294 <dwt_readdevid>
 8001048:	4603      	mov	r3, r0
 800104a:	4a91      	ldr	r2, [pc, #580]	; (8001290 <dwt_initialise+0x294>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d002      	beq.n	8001056 <dwt_initialise+0x5a>
    {
        return DWT_ERROR ;
 8001050:	f04f 33ff 	mov.w	r3, #4294967295
 8001054:	e115      	b.n	8001282 <dwt_initialise+0x286>
    }

    if(!(DWT_DW_WAKE_UP & config)) // Don't reset the device if DWT_DW_WAKE_UP bit is set, e.g. when calling this API after wake up
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f003 0302 	and.w	r3, r3, #2
 800105c:	2b00      	cmp	r3, #0
 800105e:	d101      	bne.n	8001064 <dwt_initialise+0x68>
    {
        dwt_softreset(); // Make sure the device is completely reset before starting initialisation
 8001060:	f000 fee2 	bl	8001e28 <dwt_softreset>
    }

    if(!((DWT_DW_WAKE_UP & config) && ((DWT_READ_OTP_TMP | DWT_READ_OTP_BAT | DWT_READ_OTP_LID | DWT_READ_OTP_PID | DWT_DW_WUP_RD_OTPREV)& config)))
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f003 0302 	and.w	r3, r3, #2
 800106a:	2b00      	cmp	r3, #0
 800106c:	d004      	beq.n	8001078 <dwt_initialise+0x7c>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8001074:	2b00      	cmp	r3, #0
 8001076:	d102      	bne.n	800107e <dwt_initialise+0x82>
    {
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 8001078:	2000      	movs	r0, #0
 800107a:	f000 fce9 	bl	8001a50 <_dwt_enableclocks>
    }                                  // when not reading from OTP, clocks don't need to change.

    // Configure the CPLL lock detect
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
 800107e:	2204      	movs	r2, #4
 8001080:	2100      	movs	r1, #0
 8001082:	2024      	movs	r0, #36	; 0x24
 8001084:	f000 fc12 	bl	80018ac <dwt_write8bitoffsetreg>

    // When DW1000 IC is initialised from power up, then the LDO value should be kicked from OTP, otherwise if this API is called after
    // DW1000 IC has been woken up (DWT_DW_WAKE_UP bit is set) this can be skipped as LDO would have already been automatically
    // kicked/loaded on wake up
    if(!(DWT_DW_WAKE_UP & config))
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	2b00      	cmp	r3, #0
 8001090:	d116      	bne.n	80010c0 <dwt_initialise+0xc4>
    {
        // Load LDO tune from OTP and kick it if there is a value actually programmed.
        ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
 8001092:	2004      	movs	r0, #4
 8001094:	f000 fc60 	bl	8001958 <_dwt_otpread>
 8001098:	6138      	str	r0, [r7, #16]
        if((ldo_tune & 0xFF) != 0)
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d01f      	beq.n	80010e2 <dwt_initialise+0xe6>
        {
            // Kick LDO tune
            dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDO kick bit
 80010a2:	2202      	movs	r2, #2
 80010a4:	2112      	movs	r1, #18
 80010a6:	202d      	movs	r0, #45	; 0x2d
 80010a8:	f000 fc00 	bl	80018ac <dwt_write8bitoffsetreg>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 80010ac:	4b77      	ldr	r3, [pc, #476]	; (800128c <dwt_initialise+0x290>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	8ada      	ldrh	r2, [r3, #22]
 80010b2:	4b76      	ldr	r3, [pc, #472]	; (800128c <dwt_initialise+0x290>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80010ba:	b292      	uxth	r2, r2
 80010bc:	82da      	strh	r2, [r3, #22]
 80010be:	e010      	b.n	80010e2 <dwt_initialise+0xe6>
        }
    }
    else
    {   //if LDOTUNE reg contains value different from default it means it was kicked from OTP and thus set AON_WCFG_ONW_LLDO.
        if(dwt_read32bitoffsetreg(RF_CONF_ID, LDOTUNE) != LDOTUNE_DEFAULT)
 80010c0:	2130      	movs	r1, #48	; 0x30
 80010c2:	2028      	movs	r0, #40	; 0x28
 80010c4:	f000 fb9b 	bl	80017fe <dwt_read32bitoffsetreg>
 80010c8:	4603      	mov	r3, r0
 80010ca:	f1b3 3f88 	cmp.w	r3, #2290649224	; 0x88888888
 80010ce:	d008      	beq.n	80010e2 <dwt_initialise+0xe6>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO;
 80010d0:	4b6e      	ldr	r3, [pc, #440]	; (800128c <dwt_initialise+0x290>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	8ada      	ldrh	r2, [r3, #22]
 80010d6:	4b6d      	ldr	r3, [pc, #436]	; (800128c <dwt_initialise+0x290>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80010de:	b292      	uxth	r2, r2
 80010e0:	82da      	strh	r2, [r3, #22]
    }

    if((!(DWT_DW_WAKE_UP & config)) || ((DWT_DW_WAKE_UP & config) && (DWT_DW_WUP_RD_OTPREV & config)))
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f003 0302 	and.w	r3, r3, #2
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d009      	beq.n	8001100 <dwt_initialise+0x104>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d011      	beq.n	800111a <dwt_initialise+0x11e>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f003 0308 	and.w	r3, r3, #8
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d00c      	beq.n	800111a <dwt_initialise+0x11e>
    {
        // Read OTP revision number
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 8001100:	201e      	movs	r0, #30
 8001102:	f000 fc29 	bl	8001958 <_dwt_otpread>
 8001106:	4603      	mov	r3, r0
 8001108:	82fb      	strh	r3, [r7, #22]
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 800110a:	8afb      	ldrh	r3, [r7, #22]
 800110c:	0a1b      	lsrs	r3, r3, #8
 800110e:	b29a      	uxth	r2, r3
 8001110:	4b5e      	ldr	r3, [pc, #376]	; (800128c <dwt_initialise+0x290>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	b2d2      	uxtb	r2, r2
 8001116:	72da      	strb	r2, [r3, #11]
 8001118:	e003      	b.n	8001122 <dwt_initialise+0x126>
    }
    else
        pdw1000local->otprev = 0; // If OTP valuse are not used, if this API is called after DW1000 IC has been woken up
 800111a:	4b5c      	ldr	r3, [pc, #368]	; (800128c <dwt_initialise+0x290>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2200      	movs	r2, #0
 8001120:	72da      	strb	r2, [r3, #11]
                                  // (DWT_DW_WAKE_UP bit is set), set otprev to 0

    if(!(DWT_DW_WAKE_UP & config))
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f003 0302 	and.w	r3, r3, #2
 8001128:	2b00      	cmp	r3, #0
 800112a:	d10b      	bne.n	8001144 <dwt_initialise+0x148>
    {
        // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
        if ((otp_xtaltrim_and_rev & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
 800112c:	8afb      	ldrh	r3, [r7, #22]
 800112e:	f003 031f 	and.w	r3, r3, #31
 8001132:	2b00      	cmp	r3, #0
 8001134:	d101      	bne.n	800113a <dwt_initialise+0x13e>
        {
            otp_xtaltrim_and_rev = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
 8001136:	2310      	movs	r3, #16
 8001138:	82fb      	strh	r3, [r7, #22]
        }
        // Configure XTAL trim
        dwt_setxtaltrim((uint8)otp_xtaltrim_and_rev);
 800113a:	8afb      	ldrh	r3, [r7, #22]
 800113c:	b2db      	uxtb	r3, r3
 800113e:	4618      	mov	r0, r3
 8001140:	f000 fe98 	bl	8001e74 <dwt_setxtaltrim>
    }

    if(DWT_READ_OTP_PID & config)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f003 0310 	and.w	r3, r3, #16
 800114a:	2b00      	cmp	r3, #0
 800114c:	d007      	beq.n	800115e <dwt_initialise+0x162>
    {
        // Load Part from OTP
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
 800114e:	4b4f      	ldr	r3, [pc, #316]	; (800128c <dwt_initialise+0x290>)
 8001150:	681c      	ldr	r4, [r3, #0]
 8001152:	2006      	movs	r0, #6
 8001154:	f000 fc00 	bl	8001958 <_dwt_otpread>
 8001158:	4603      	mov	r3, r0
 800115a:	6023      	str	r3, [r4, #0]
 800115c:	e003      	b.n	8001166 <dwt_initialise+0x16a>
    }
    else
    {
        pdw1000local->partID = 0;
 800115e:	4b4b      	ldr	r3, [pc, #300]	; (800128c <dwt_initialise+0x290>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
    }

    if(DWT_READ_OTP_LID & config)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f003 0320 	and.w	r3, r3, #32
 800116c:	2b00      	cmp	r3, #0
 800116e:	d007      	beq.n	8001180 <dwt_initialise+0x184>
    {
        // Load Lot ID from OTP
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 8001170:	4b46      	ldr	r3, [pc, #280]	; (800128c <dwt_initialise+0x290>)
 8001172:	681c      	ldr	r4, [r3, #0]
 8001174:	2007      	movs	r0, #7
 8001176:	f000 fbef 	bl	8001958 <_dwt_otpread>
 800117a:	4603      	mov	r3, r0
 800117c:	6063      	str	r3, [r4, #4]
 800117e:	e003      	b.n	8001188 <dwt_initialise+0x18c>
    }
    else
    {
        pdw1000local->lotID = 0;
 8001180:	4b42      	ldr	r3, [pc, #264]	; (800128c <dwt_initialise+0x290>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2200      	movs	r2, #0
 8001186:	605a      	str	r2, [r3, #4]
    }

    if(DWT_READ_OTP_BAT & config)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800118e:	2b00      	cmp	r3, #0
 8001190:	d008      	beq.n	80011a4 <dwt_initialise+0x1a8>
    {
        // Load VBAT from OTP
        pdw1000local->vBatP = _dwt_otpread(VBAT_ADDRESS) & 0xff;
 8001192:	2008      	movs	r0, #8
 8001194:	f000 fbe0 	bl	8001958 <_dwt_otpread>
 8001198:	4602      	mov	r2, r0
 800119a:	4b3c      	ldr	r3, [pc, #240]	; (800128c <dwt_initialise+0x290>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	b2d2      	uxtb	r2, r2
 80011a0:	721a      	strb	r2, [r3, #8]
 80011a2:	e003      	b.n	80011ac <dwt_initialise+0x1b0>
    }
    else
    {
        pdw1000local->vBatP = 0;
 80011a4:	4b39      	ldr	r3, [pc, #228]	; (800128c <dwt_initialise+0x290>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2200      	movs	r2, #0
 80011aa:	721a      	strb	r2, [r3, #8]
    }

    if(DWT_READ_OTP_TMP & config)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d008      	beq.n	80011c8 <dwt_initialise+0x1cc>
    {
        // Load TEMP from OTP
        pdw1000local->tempP = _dwt_otpread(VTEMP_ADDRESS) & 0xff;
 80011b6:	2009      	movs	r0, #9
 80011b8:	f000 fbce 	bl	8001958 <_dwt_otpread>
 80011bc:	4602      	mov	r2, r0
 80011be:	4b33      	ldr	r3, [pc, #204]	; (800128c <dwt_initialise+0x290>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	b2d2      	uxtb	r2, r2
 80011c4:	725a      	strb	r2, [r3, #9]
 80011c6:	e003      	b.n	80011d0 <dwt_initialise+0x1d4>
    }
    else
    {
        pdw1000local->tempP = 0;
 80011c8:	4b30      	ldr	r3, [pc, #192]	; (800128c <dwt_initialise+0x290>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2200      	movs	r2, #0
 80011ce:	725a      	strb	r2, [r3, #9]
    }

    // Load leading edge detect code (LDE/microcode)
    if(!(DWT_DW_WAKE_UP & config))
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d121      	bne.n	800121e <dwt_initialise+0x222>
    {
        if(DWT_LOADUCODE & config)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f003 0301 	and.w	r3, r3, #1
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d00b      	beq.n	80011fc <dwt_initialise+0x200>
        {
            _dwt_loaducodefromrom();
 80011e4:	f000 fc05 	bl	80019f2 <_dwt_loaducodefromrom>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up if loaded on initialisation
 80011e8:	4b28      	ldr	r3, [pc, #160]	; (800128c <dwt_initialise+0x290>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	8ada      	ldrh	r2, [r3, #22]
 80011ee:	4b27      	ldr	r3, [pc, #156]	; (800128c <dwt_initialise+0x290>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80011f6:	b292      	uxth	r2, r2
 80011f8:	82da      	strh	r2, [r3, #22]
 80011fa:	e01e      	b.n	800123a <dwt_initialise+0x23e>
        }
        else // Should disable the LDERUN bit enable if LDE has not been loaded
        {
            uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
 80011fc:	2105      	movs	r1, #5
 80011fe:	2036      	movs	r0, #54	; 0x36
 8001200:	f000 fb24 	bl	800184c <dwt_read16bitoffsetreg>
 8001204:	4603      	mov	r3, r0
 8001206:	81fb      	strh	r3, [r7, #14]
            rega &= 0xFDFF ; // Clear LDERUN bit
 8001208:	89fb      	ldrh	r3, [r7, #14]
 800120a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800120e:	81fb      	strh	r3, [r7, #14]
            dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
 8001210:	89fb      	ldrh	r3, [r7, #14]
 8001212:	461a      	mov	r2, r3
 8001214:	2105      	movs	r1, #5
 8001216:	2036      	movs	r0, #54	; 0x36
 8001218:	f000 fb5b 	bl	80018d2 <dwt_write16bitoffsetreg>
 800121c:	e00d      	b.n	800123a <dwt_initialise+0x23e>
        }
    }
    else //if DWT_DW_WUP_NO_UCODE is set then assume that the UCODE was loaded from ROM (i.e. DWT_LOADUCODE was set on power up),
    {     //thus set AON_WCFG_ONW_LLDE, otherwise don't set the AON_WCFG_ONW_LLDE bit in the sleep_mode configuration
        if((DWT_DW_WUP_NO_UCODE & config) == 0)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	f003 0304 	and.w	r3, r3, #4
 8001224:	2b00      	cmp	r3, #0
 8001226:	d108      	bne.n	800123a <dwt_initialise+0x23e>
        {
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE;
 8001228:	4b18      	ldr	r3, [pc, #96]	; (800128c <dwt_initialise+0x290>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	8ada      	ldrh	r2, [r3, #22]
 800122e:	4b17      	ldr	r3, [pc, #92]	; (800128c <dwt_initialise+0x290>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001236:	b292      	uxth	r2, r2
 8001238:	82da      	strh	r2, [r3, #22]
        }
    }

    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 800123a:	2001      	movs	r0, #1
 800123c:	f000 fc08 	bl	8001a50 <_dwt_enableclocks>

    // The 3 bits in AON CFG1 register must be cleared to ensure proper operation of the DW1000 in DEEPSLEEP mode.
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
 8001240:	2200      	movs	r2, #0
 8001242:	210a      	movs	r1, #10
 8001244:	202c      	movs	r0, #44	; 0x2c
 8001246:	f000 fb31 	bl	80018ac <dwt_write8bitoffsetreg>

    // Read system register / store local copy
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 800124a:	4b10      	ldr	r3, [pc, #64]	; (800128c <dwt_initialise+0x290>)
 800124c:	681c      	ldr	r4, [r3, #0]
 800124e:	2100      	movs	r1, #0
 8001250:	2004      	movs	r0, #4
 8001252:	f000 fad4 	bl	80017fe <dwt_read32bitoffsetreg>
 8001256:	4603      	mov	r3, r0
 8001258:	6123      	str	r3, [r4, #16]
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 800125a:	4b0c      	ldr	r3, [pc, #48]	; (800128c <dwt_initialise+0x290>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	691b      	ldr	r3, [r3, #16]
 8001260:	0c1b      	lsrs	r3, r3, #16
 8001262:	b2da      	uxtb	r2, r3
 8001264:	4b09      	ldr	r3, [pc, #36]	; (800128c <dwt_initialise+0x290>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f002 0203 	and.w	r2, r2, #3
 800126c:	b2d2      	uxtb	r2, r2
 800126e:	729a      	strb	r2, [r3, #10]

    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID) ;
 8001270:	4b06      	ldr	r3, [pc, #24]	; (800128c <dwt_initialise+0x290>)
 8001272:	681c      	ldr	r4, [r3, #0]
 8001274:	2100      	movs	r1, #0
 8001276:	2008      	movs	r0, #8
 8001278:	f000 fac1 	bl	80017fe <dwt_read32bitoffsetreg>
 800127c:	4603      	mov	r3, r0
 800127e:	60e3      	str	r3, [r4, #12]

    return DWT_SUCCESS ;
 8001280:	2300      	movs	r3, #0

} // end dwt_initialise()
 8001282:	4618      	mov	r0, r3
 8001284:	371c      	adds	r7, #28
 8001286:	46bd      	mov	sp, r7
 8001288:	bd90      	pop	{r4, r7, pc}
 800128a:	bf00      	nop
 800128c:	20000000 	.word	0x20000000
 8001290:	deca0130 	.word	0xdeca0130

08001294 <dwt_readdevid>:
 * output parameters
 *
 * returns the read value which for DW1000 is 0xDECA0130
 */
uint32 dwt_readdevid(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
 8001298:	2100      	movs	r1, #0
 800129a:	2000      	movs	r0, #0
 800129c:	f000 faaf 	bl	80017fe <dwt_read32bitoffsetreg>
 80012a0:	4603      	mov	r3, r0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	bd80      	pop	{r7, pc}
	...

080012a8 <dwt_configure>:
 * output parameters
 *
 * no return value
 */
void dwt_configure(dwt_config_t *config)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
    uint8 nsSfd_result  = 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	75fb      	strb	r3, [r7, #23]
    uint8 useDWnsSFD = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	75bb      	strb	r3, [r7, #22]
    uint8 chan = config->chan ;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	74fb      	strb	r3, [r7, #19]
    uint32 regval ;
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	795b      	ldrb	r3, [r3, #5]
 80012c2:	461a      	mov	r2, r3
 80012c4:	4ba1      	ldr	r3, [pc, #644]	; (800154c <dwt_configure+0x2a4>)
 80012c6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80012ca:	82bb      	strh	r3, [r7, #20]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	785b      	ldrb	r3, [r3, #1]
 80012d0:	3b01      	subs	r3, #1
 80012d2:	74bb      	strb	r3, [r7, #18]
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 80012d4:	7cfb      	ldrb	r3, [r7, #19]
 80012d6:	2b04      	cmp	r3, #4
 80012d8:	d002      	beq.n	80012e0 <dwt_configure+0x38>
 80012da:	7cfb      	ldrb	r3, [r7, #19]
 80012dc:	2b07      	cmp	r3, #7
 80012de:	d101      	bne.n	80012e4 <dwt_configure+0x3c>
 80012e0:	2301      	movs	r3, #1
 80012e2:	e000      	b.n	80012e6 <dwt_configure+0x3e>
 80012e4:	2300      	movs	r3, #0
 80012e6:	747b      	strb	r3, [r7, #17]
           || (config->txPreambLength == DWT_PLEN_2048) || (config->txPreambLength == DWT_PLEN_4096));
    assert((config->phrMode == DWT_PHRMODE_STD) || (config->phrMode == DWT_PHRMODE_EXT));
#endif

    // For 110 kbps we need a special setup
    if(DWT_BR_110K == config->dataRate)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	79db      	ldrb	r3, [r3, #7]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d10b      	bne.n	8001308 <dwt_configure+0x60>
    {
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 80012f0:	4b97      	ldr	r3, [pc, #604]	; (8001550 <dwt_configure+0x2a8>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	691a      	ldr	r2, [r3, #16]
 80012f6:	4b96      	ldr	r3, [pc, #600]	; (8001550 <dwt_configure+0x2a8>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80012fe:	611a      	str	r2, [r3, #16]
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
 8001300:	8abb      	ldrh	r3, [r7, #20]
 8001302:	08db      	lsrs	r3, r3, #3
 8001304:	82bb      	strh	r3, [r7, #20]
 8001306:	e007      	b.n	8001318 <dwt_configure+0x70>
    }
    else
    {
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
 8001308:	4b91      	ldr	r3, [pc, #580]	; (8001550 <dwt_configure+0x2a8>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	691a      	ldr	r2, [r3, #16]
 800130e:	4b90      	ldr	r3, [pc, #576]	; (8001550 <dwt_configure+0x2a8>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8001316:	611a      	str	r2, [r3, #16]
    }

    pdw1000local->longFrames = config->phrMode ;
 8001318:	4b8d      	ldr	r3, [pc, #564]	; (8001550 <dwt_configure+0x2a8>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	7a12      	ldrb	r2, [r2, #8]
 8001320:	729a      	strb	r2, [r3, #10]

    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
 8001322:	4b8b      	ldr	r3, [pc, #556]	; (8001550 <dwt_configure+0x2a8>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	691a      	ldr	r2, [r3, #16]
 8001328:	4b89      	ldr	r3, [pc, #548]	; (8001550 <dwt_configure+0x2a8>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001330:	611a      	str	r2, [r3, #16]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 8001332:	4b87      	ldr	r3, [pc, #540]	; (8001550 <dwt_configure+0x2a8>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	6919      	ldr	r1, [r3, #16]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	7a1b      	ldrb	r3, [r3, #8]
 800133c:	041b      	lsls	r3, r3, #16
 800133e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001342:	4b83      	ldr	r3, [pc, #524]	; (8001550 <dwt_configure+0x2a8>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	430a      	orrs	r2, r1
 8001348:	611a      	str	r2, [r3, #16]

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 800134a:	4b81      	ldr	r3, [pc, #516]	; (8001550 <dwt_configure+0x2a8>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	691b      	ldr	r3, [r3, #16]
 8001350:	461a      	mov	r2, r3
 8001352:	2100      	movs	r1, #0
 8001354:	2004      	movs	r0, #4
 8001356:	f000 fad8 	bl	800190a <dwt_write32bitoffsetreg>
    // Set the lde_replicaCoeff
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16) ;
 800135a:	8abb      	ldrh	r3, [r7, #20]
 800135c:	461a      	mov	r2, r3
 800135e:	f642 0104 	movw	r1, #10244	; 0x2804
 8001362:	202e      	movs	r0, #46	; 0x2e
 8001364:	f000 fab5 	bl	80018d2 <dwt_write16bitoffsetreg>

    _dwt_configlde(prfIndex);
 8001368:	7cbb      	ldrb	r3, [r7, #18]
 800136a:	4618      	mov	r0, r3
 800136c:	f000 fb21 	bl	80019b2 <_dwt_configlde>

    // Configure PLL2/RF PLL block CFG/TUNE (for a given channel)
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
 8001370:	7cfb      	ldrb	r3, [r7, #19]
 8001372:	4a78      	ldr	r2, [pc, #480]	; (8001554 <dwt_configure+0x2ac>)
 8001374:	5cd3      	ldrb	r3, [r2, r3]
 8001376:	461a      	mov	r2, r3
 8001378:	4b77      	ldr	r3, [pc, #476]	; (8001558 <dwt_configure+0x2b0>)
 800137a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800137e:	461a      	mov	r2, r3
 8001380:	2107      	movs	r1, #7
 8001382:	202b      	movs	r0, #43	; 0x2b
 8001384:	f000 fac1 	bl	800190a <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
 8001388:	7cfb      	ldrb	r3, [r7, #19]
 800138a:	4a72      	ldr	r2, [pc, #456]	; (8001554 <dwt_configure+0x2ac>)
 800138c:	5cd3      	ldrb	r3, [r2, r3]
 800138e:	461a      	mov	r2, r3
 8001390:	4b72      	ldr	r3, [pc, #456]	; (800155c <dwt_configure+0x2b4>)
 8001392:	5c9b      	ldrb	r3, [r3, r2]
 8001394:	461a      	mov	r2, r3
 8001396:	210b      	movs	r1, #11
 8001398:	202b      	movs	r0, #43	; 0x2b
 800139a:	f000 fa87 	bl	80018ac <dwt_write8bitoffsetreg>

    // Configure RF RX blocks (for specified channel/bandwidth)
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
 800139e:	7c7b      	ldrb	r3, [r7, #17]
 80013a0:	4a6f      	ldr	r2, [pc, #444]	; (8001560 <dwt_configure+0x2b8>)
 80013a2:	5cd3      	ldrb	r3, [r2, r3]
 80013a4:	461a      	mov	r2, r3
 80013a6:	210b      	movs	r1, #11
 80013a8:	2028      	movs	r0, #40	; 0x28
 80013aa:	f000 fa7f 	bl	80018ac <dwt_write8bitoffsetreg>

    // Configure RF TX blocks (for specified channel and PRF)
    // Configure RF TX control
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
 80013ae:	7cfb      	ldrb	r3, [r7, #19]
 80013b0:	4a68      	ldr	r2, [pc, #416]	; (8001554 <dwt_configure+0x2ac>)
 80013b2:	5cd3      	ldrb	r3, [r2, r3]
 80013b4:	461a      	mov	r2, r3
 80013b6:	4b6b      	ldr	r3, [pc, #428]	; (8001564 <dwt_configure+0x2bc>)
 80013b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013bc:	461a      	mov	r2, r3
 80013be:	210c      	movs	r1, #12
 80013c0:	2028      	movs	r0, #40	; 0x28
 80013c2:	f000 faa2 	bl	800190a <dwt_write32bitoffsetreg>

    // Configure the baseband parameters (for specified PRF, bit rate, PAC, and SFD settings)
    // DTUNE0
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	79db      	ldrb	r3, [r3, #7]
 80013ca:	4618      	mov	r0, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	799b      	ldrb	r3, [r3, #6]
 80013d0:	4619      	mov	r1, r3
 80013d2:	4a65      	ldr	r2, [pc, #404]	; (8001568 <dwt_configure+0x2c0>)
 80013d4:	0043      	lsls	r3, r0, #1
 80013d6:	440b      	add	r3, r1
 80013d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013dc:	461a      	mov	r2, r3
 80013de:	2102      	movs	r1, #2
 80013e0:	2027      	movs	r0, #39	; 0x27
 80013e2:	f000 fa76 	bl	80018d2 <dwt_write16bitoffsetreg>

    // DTUNE1
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
 80013e6:	7cbb      	ldrb	r3, [r7, #18]
 80013e8:	4a60      	ldr	r2, [pc, #384]	; (800156c <dwt_configure+0x2c4>)
 80013ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013ee:	461a      	mov	r2, r3
 80013f0:	2104      	movs	r1, #4
 80013f2:	2027      	movs	r0, #39	; 0x27
 80013f4:	f000 fa6d 	bl	80018d2 <dwt_write16bitoffsetreg>

    if(config->dataRate == DWT_BR_110K)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	79db      	ldrb	r3, [r3, #7]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d105      	bne.n	800140c <dwt_configure+0x164>
    {
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K);
 8001400:	2264      	movs	r2, #100	; 0x64
 8001402:	2106      	movs	r1, #6
 8001404:	2027      	movs	r0, #39	; 0x27
 8001406:	f000 fa64 	bl	80018d2 <dwt_write16bitoffsetreg>
 800140a:	e018      	b.n	800143e <dwt_configure+0x196>
    }
    else
    {
        if(config->txPreambLength == DWT_PLEN_64)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	789b      	ldrb	r3, [r3, #2]
 8001410:	2b04      	cmp	r3, #4
 8001412:	d10a      	bne.n	800142a <dwt_configure+0x182>
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64);
 8001414:	2210      	movs	r2, #16
 8001416:	2106      	movs	r1, #6
 8001418:	2027      	movs	r0, #39	; 0x27
 800141a:	f000 fa5a 	bl	80018d2 <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
 800141e:	2210      	movs	r2, #16
 8001420:	2126      	movs	r1, #38	; 0x26
 8001422:	2027      	movs	r0, #39	; 0x27
 8001424:	f000 fa42 	bl	80018ac <dwt_write8bitoffsetreg>
 8001428:	e009      	b.n	800143e <dwt_configure+0x196>
        }
        else
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8);
 800142a:	2220      	movs	r2, #32
 800142c:	2106      	movs	r1, #6
 800142e:	2027      	movs	r0, #39	; 0x27
 8001430:	f000 fa4f 	bl	80018d2 <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
 8001434:	2228      	movs	r2, #40	; 0x28
 8001436:	2126      	movs	r1, #38	; 0x26
 8001438:	2027      	movs	r0, #39	; 0x27
 800143a:	f000 fa37 	bl	80018ac <dwt_write8bitoffsetreg>
        }
    }

    // DTUNE2
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
 800143e:	7cbb      	ldrb	r3, [r7, #18]
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	78d2      	ldrb	r2, [r2, #3]
 8001444:	4611      	mov	r1, r2
 8001446:	4a4a      	ldr	r2, [pc, #296]	; (8001570 <dwt_configure+0x2c8>)
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	440b      	add	r3, r1
 800144c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001450:	461a      	mov	r2, r3
 8001452:	2108      	movs	r1, #8
 8001454:	2027      	movs	r0, #39	; 0x27
 8001456:	f000 fa58 	bl	800190a <dwt_write32bitoffsetreg>

    // DTUNE3 (SFD timeout)
    // Don't allow 0 - SFD timeout will always be enabled
    if(config->sfdTO == 0)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	895b      	ldrh	r3, [r3, #10]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d103      	bne.n	800146a <dwt_configure+0x1c2>
    {
        config->sfdTO = DWT_SFDTOC_DEF;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f241 0241 	movw	r2, #4161	; 0x1041
 8001468:	815a      	strh	r2, [r3, #10]
    }
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	895b      	ldrh	r3, [r3, #10]
 800146e:	461a      	mov	r2, r3
 8001470:	2120      	movs	r1, #32
 8001472:	2027      	movs	r0, #39	; 0x27
 8001474:	f000 fa2d 	bl	80018d2 <dwt_write16bitoffsetreg>

    // Configure AGC parameters
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
 8001478:	4b3e      	ldr	r3, [pc, #248]	; (8001574 <dwt_configure+0x2cc>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	461a      	mov	r2, r3
 800147e:	210c      	movs	r1, #12
 8001480:	2023      	movs	r0, #35	; 0x23
 8001482:	f000 fa42 	bl	800190a <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
 8001486:	7cbb      	ldrb	r3, [r7, #18]
 8001488:	4a3a      	ldr	r2, [pc, #232]	; (8001574 <dwt_configure+0x2cc>)
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	4413      	add	r3, r2
 800148e:	889b      	ldrh	r3, [r3, #4]
 8001490:	461a      	mov	r2, r3
 8001492:	2104      	movs	r1, #4
 8001494:	2023      	movs	r0, #35	; 0x23
 8001496:	f000 fa1c 	bl	80018d2 <dwt_write16bitoffsetreg>

    // Set (non-standard) user SFD for improved performance,
    if(config->nsSFD)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	799b      	ldrb	r3, [r3, #6]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d00d      	beq.n	80014be <dwt_configure+0x216>
    {
        // Write non standard (DW) SFD length
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	79db      	ldrb	r3, [r3, #7]
 80014a6:	461a      	mov	r2, r3
 80014a8:	4b33      	ldr	r3, [pc, #204]	; (8001578 <dwt_configure+0x2d0>)
 80014aa:	5c9b      	ldrb	r3, [r3, r2]
 80014ac:	461a      	mov	r2, r3
 80014ae:	2100      	movs	r1, #0
 80014b0:	2021      	movs	r0, #33	; 0x21
 80014b2:	f000 f9fb 	bl	80018ac <dwt_write8bitoffsetreg>
        nsSfd_result = 3 ;
 80014b6:	2303      	movs	r3, #3
 80014b8:	75fb      	strb	r3, [r7, #23]
        useDWnsSFD = 1 ;
 80014ba:	2301      	movs	r3, #1
 80014bc:	75bb      	strb	r3, [r7, #22]
    }
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 80014be:	7cfb      	ldrb	r3, [r7, #19]
 80014c0:	f003 020f 	and.w	r2, r3, #15
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 80014c4:	7cfb      	ldrb	r3, [r7, #19]
 80014c6:	011b      	lsls	r3, r3, #4
 80014c8:	b2db      	uxtb	r3, r3
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 80014ca:	431a      	orrs	r2, r3
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	785b      	ldrb	r3, [r3, #1]
 80014d0:	049b      	lsls	r3, r3, #18
 80014d2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 80014d6:	431a      	orrs	r2, r3
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 80014d8:	7dfb      	ldrb	r3, [r7, #23]
 80014da:	051b      	lsls	r3, r3, #20
 80014dc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 80014e0:	431a      	orrs	r2, r3
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 80014e2:	7dbb      	ldrb	r3, [r7, #22]
 80014e4:	045b      	lsls	r3, r3, #17
 80014e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 80014ea:	431a      	orrs	r2, r3
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	791b      	ldrb	r3, [r3, #4]
 80014f0:	059b      	lsls	r3, r3, #22
 80014f2:	f003 63f8 	and.w	r3, r3, #130023424	; 0x7c00000
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 80014f6:	431a      	orrs	r2, r3
              (CHAN_CTRL_RX_PCOD_MASK & ((uint32)config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	795b      	ldrb	r3, [r3, #5]
 80014fc:	06db      	lsls	r3, r3, #27
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 80014fe:	4313      	orrs	r3, r2
 8001500:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(CHAN_CTRL_ID,regval) ;
 8001502:	68fa      	ldr	r2, [r7, #12]
 8001504:	2100      	movs	r1, #0
 8001506:	201f      	movs	r0, #31
 8001508:	f000 f9ff 	bl	800190a <dwt_write32bitoffsetreg>

    // Set up TX Preamble Size, PRF and Data Rate
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	789a      	ldrb	r2, [r3, #2]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	785b      	ldrb	r3, [r3, #1]
 8001514:	4313      	orrs	r3, r2
 8001516:	b2db      	uxtb	r3, r3
 8001518:	0419      	lsls	r1, r3, #16
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	79db      	ldrb	r3, [r3, #7]
 800151e:	035a      	lsls	r2, r3, #13
 8001520:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <dwt_configure+0x2a8>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	430a      	orrs	r2, r1
 8001526:	60da      	str	r2, [r3, #12]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
 8001528:	4b09      	ldr	r3, [pc, #36]	; (8001550 <dwt_configure+0x2a8>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	68db      	ldr	r3, [r3, #12]
 800152e:	461a      	mov	r2, r3
 8001530:	2100      	movs	r1, #0
 8001532:	2008      	movs	r0, #8
 8001534:	f000 f9e9 	bl	800190a <dwt_write32bitoffsetreg>

    // The SFD transmit pattern is initialised by the DW1000 upon a user TX request, but (due to an IC issue) it is not done for an auto-ACK TX. The
    // SYS_CTRL write below works around this issue, by simultaneously initiating and aborting a transmission, which correctly initialises the SFD
    // after its configuration or reconfiguration.
    // This issue is not documented at the time of writing this code. It should be in next release of DW1000 User Manual (v2.09, from July 2016).
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
 8001538:	2242      	movs	r2, #66	; 0x42
 800153a:	2100      	movs	r1, #0
 800153c:	200d      	movs	r0, #13
 800153e:	f000 f9b5 	bl	80018ac <dwt_write8bitoffsetreg>
} // end dwt_configure()
 8001542:	bf00      	nop
 8001544:	3718      	adds	r7, #24
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	0800a6f4 	.word	0x0800a6f4
 8001550:	20000000 	.word	0x20000000
 8001554:	0800a674 	.word	0x0800a674
 8001558:	0800a694 	.word	0x0800a694
 800155c:	0800a6ac 	.word	0x0800a6ac
 8001560:	0800a6b4 	.word	0x0800a6b4
 8001564:	0800a67c 	.word	0x0800a67c
 8001568:	0800a6c4 	.word	0x0800a6c4
 800156c:	0800a6d0 	.word	0x0800a6d0
 8001570:	0800a6d4 	.word	0x0800a6d4
 8001574:	0800a6b8 	.word	0x0800a6b8
 8001578:	0800a6c0 	.word	0x0800a6c0

0800157c <dwt_setrxantennadelay>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxantennadelay(uint16 rxDelay)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	80fb      	strh	r3, [r7, #6]
    // Set the RX antenna delay for auto TX timestamp adjustment
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_RXANTD_OFFSET, rxDelay);
 8001586:	88fb      	ldrh	r3, [r7, #6]
 8001588:	461a      	mov	r2, r3
 800158a:	f641 0104 	movw	r1, #6148	; 0x1804
 800158e:	202e      	movs	r0, #46	; 0x2e
 8001590:	f000 f99f 	bl	80018d2 <dwt_write16bitoffsetreg>
}
 8001594:	bf00      	nop
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <dwt_settxantennadelay>:
 * output parameters
 *
 * no return value
 */
void dwt_settxantennadelay(uint16 txDelay)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	80fb      	strh	r3, [r7, #6]
    // Set the TX antenna delay for auto TX timestamp adjustment
    dwt_write16bitoffsetreg(TX_ANTD_ID, TX_ANTD_OFFSET, txDelay);
 80015a6:	88fb      	ldrh	r3, [r7, #6]
 80015a8:	461a      	mov	r2, r3
 80015aa:	2100      	movs	r1, #0
 80015ac:	2018      	movs	r0, #24
 80015ae:	f000 f990 	bl	80018d2 <dwt_write16bitoffsetreg>
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <dwt_writetxdata>:
 * output parameters
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error
 */
int dwt_writetxdata(uint16 txFrameLength, uint8 *txFrameBytes, uint16 txBufferOffset)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	4603      	mov	r3, r0
 80015c2:	6039      	str	r1, [r7, #0]
 80015c4:	80fb      	strh	r3, [r7, #6]
 80015c6:	4613      	mov	r3, r2
 80015c8:	80bb      	strh	r3, [r7, #4]
    assert(txFrameLength >= 2);
    assert((pdw1000local->longFrames && (txFrameLength <= 1023)) || (txFrameLength <= 127));
    assert((txBufferOffset + txFrameLength) <= 1024);
#endif

    if ((txBufferOffset + txFrameLength) <= 1024)
 80015ca:	88ba      	ldrh	r2, [r7, #4]
 80015cc:	88fb      	ldrh	r3, [r7, #6]
 80015ce:	4413      	add	r3, r2
 80015d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015d4:	dc09      	bgt.n	80015ea <dwt_writetxdata+0x30>
    {
        // Write the data to the IC TX buffer, (-2 bytes for auto generated CRC)
        dwt_writetodevice( TX_BUFFER_ID, txBufferOffset, txFrameLength-2, txFrameBytes);
 80015d6:	88fb      	ldrh	r3, [r7, #6]
 80015d8:	3b02      	subs	r3, #2
 80015da:	461a      	mov	r2, r3
 80015dc:	88b9      	ldrh	r1, [r7, #4]
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	2009      	movs	r0, #9
 80015e2:	f000 f857 	bl	8001694 <dwt_writetodevice>
        return DWT_SUCCESS;
 80015e6:	2300      	movs	r3, #0
 80015e8:	e001      	b.n	80015ee <dwt_writetxdata+0x34>
    }
    else
    {
        return DWT_ERROR;
 80015ea:	f04f 33ff 	mov.w	r3, #4294967295
    }
} // end dwt_writetxdata()
 80015ee:	4618      	mov	r0, r3
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
	...

080015f8 <dwt_writetxfctrl>:
 * output parameters
 *
 * no return value
 */
void dwt_writetxfctrl(uint16 txFrameLength, uint16 txBufferOffset, int ranging)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	603a      	str	r2, [r7, #0]
 8001602:	80fb      	strh	r3, [r7, #6]
 8001604:	460b      	mov	r3, r1
 8001606:	80bb      	strh	r3, [r7, #4]
    assert((ranging == 0) || (ranging == 1))
#endif

    // Write the frame length to the TX frame control register
    // pdw1000local->txFCTRL has kept configured bit rate information
    uint32 reg32 = pdw1000local->txFCTRL | txFrameLength | ((uint32)txBufferOffset << TX_FCTRL_TXBOFFS_SHFT) | ((uint32)ranging << TX_FCTRL_TR_SHFT);
 8001608:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <dwt_writetxfctrl+0x3c>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	68da      	ldr	r2, [r3, #12]
 800160e:	88fb      	ldrh	r3, [r7, #6]
 8001610:	431a      	orrs	r2, r3
 8001612:	88bb      	ldrh	r3, [r7, #4]
 8001614:	059b      	lsls	r3, r3, #22
 8001616:	431a      	orrs	r2, r3
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	03db      	lsls	r3, r3, #15
 800161c:	4313      	orrs	r3, r2
 800161e:	60fb      	str	r3, [r7, #12]
    dwt_write32bitreg(TX_FCTRL_ID, reg32);
 8001620:	68fa      	ldr	r2, [r7, #12]
 8001622:	2100      	movs	r1, #0
 8001624:	2008      	movs	r0, #8
 8001626:	f000 f970 	bl	800190a <dwt_write32bitoffsetreg>
} // end dwt_writetxfctrl()
 800162a:	bf00      	nop
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20000000 	.word	0x20000000

08001638 <dwt_readrxdata>:
 * output parameters
 *
 * no return value
 */
void dwt_readrxdata(uint8 *buffer, uint16 length, uint16 rxBufferOffset)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	460b      	mov	r3, r1
 8001642:	807b      	strh	r3, [r7, #2]
 8001644:	4613      	mov	r3, r2
 8001646:	803b      	strh	r3, [r7, #0]
    dwt_readfromdevice(RX_BUFFER_ID,rxBufferOffset,length,buffer) ;
 8001648:	887a      	ldrh	r2, [r7, #2]
 800164a:	8839      	ldrh	r1, [r7, #0]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2011      	movs	r0, #17
 8001650:	f000 f87c 	bl	800174c <dwt_readfromdevice>
}
 8001654:	bf00      	nop
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <dwt_readtxtimestamp>:
 * output parameters - the timestamp buffer will contain the value after the function call
 *
 * no return value
 */
void dwt_readtxtimestamp(uint8 * timestamp)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
    dwt_readfromdevice(TX_TIME_ID, TX_TIME_TX_STAMP_OFFSET, TX_TIME_TX_STAMP_LEN, timestamp) ; // Read bytes directly into buffer
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2205      	movs	r2, #5
 8001668:	2100      	movs	r1, #0
 800166a:	2017      	movs	r0, #23
 800166c:	f000 f86e 	bl	800174c <dwt_readfromdevice>
}
 8001670:	bf00      	nop
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <dwt_readrxtimestamp>:
 * output parameters - the timestamp buffer will contain the value after the function call
 *
 * no return value
 */
void dwt_readrxtimestamp(uint8 * timestamp)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
    dwt_readfromdevice(RX_TIME_ID, RX_TIME_RX_STAMP_OFFSET, RX_TIME_RX_STAMP_LEN, timestamp) ; // Get the adjusted time of arrival
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2205      	movs	r2, #5
 8001684:	2100      	movs	r1, #0
 8001686:	2015      	movs	r0, #21
 8001688:	f000 f860 	bl	800174c <dwt_readfromdevice>
}
 800168c:	bf00      	nop
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <dwt_writetodevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    const uint8   *buffer
)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
 800169a:	60ba      	str	r2, [r7, #8]
 800169c:	607b      	str	r3, [r7, #4]
 800169e:	4603      	mov	r3, r0
 80016a0:	81fb      	strh	r3, [r7, #14]
 80016a2:	460b      	mov	r3, r1
 80016a4:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 80016a6:	2300      	movs	r3, #0
 80016a8:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting WRITE operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 80016aa:	89bb      	ldrh	r3, [r7, #12]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d10d      	bne.n	80016cc <dwt_writetodevice+0x38>
    {
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 80016b0:	89fb      	ldrh	r3, [r7, #14]
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	1c59      	adds	r1, r3, #1
 80016b8:	6179      	str	r1, [r7, #20]
 80016ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80016be:	b2d2      	uxtb	r2, r2
 80016c0:	f107 0118 	add.w	r1, r7, #24
 80016c4:	440b      	add	r3, r1
 80016c6:	f803 2c08 	strb.w	r2, [r3, #-8]
 80016ca:	e033      	b.n	8001734 <dwt_writetodevice+0xa0>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 80016cc:	89fb      	ldrh	r3, [r7, #14]
 80016ce:	b2da      	uxtb	r2, r3
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	1c59      	adds	r1, r3, #1
 80016d4:	6179      	str	r1, [r7, #20]
 80016d6:	f062 023f 	orn	r2, r2, #63	; 0x3f
 80016da:	b2d2      	uxtb	r2, r2
 80016dc:	f107 0118 	add.w	r1, r7, #24
 80016e0:	440b      	add	r3, r1
 80016e2:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 80016e6:	89bb      	ldrh	r3, [r7, #12]
 80016e8:	2b7f      	cmp	r3, #127	; 0x7f
 80016ea:	d80a      	bhi.n	8001702 <dwt_writetodevice+0x6e>
        {
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	1c5a      	adds	r2, r3, #1
 80016f0:	617a      	str	r2, [r7, #20]
 80016f2:	89ba      	ldrh	r2, [r7, #12]
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	f107 0118 	add.w	r1, r7, #24
 80016fa:	440b      	add	r3, r1
 80016fc:	f803 2c08 	strb.w	r2, [r3, #-8]
 8001700:	e018      	b.n	8001734 <dwt_writetodevice+0xa0>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8001702:	89bb      	ldrh	r3, [r7, #12]
 8001704:	b2da      	uxtb	r2, r3
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	1c59      	adds	r1, r3, #1
 800170a:	6179      	str	r1, [r7, #20]
 800170c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001710:	b2d2      	uxtb	r2, r2
 8001712:	f107 0118 	add.w	r1, r7, #24
 8001716:	440b      	add	r3, r1
 8001718:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 800171c:	89bb      	ldrh	r3, [r7, #12]
 800171e:	09db      	lsrs	r3, r3, #7
 8001720:	b299      	uxth	r1, r3
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	1c5a      	adds	r2, r3, #1
 8001726:	617a      	str	r2, [r7, #20]
 8001728:	b2ca      	uxtb	r2, r1
 800172a:	f107 0118 	add.w	r1, r7, #24
 800172e:	440b      	add	r3, r1
 8001730:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Write it to the SPI
    writetospi(cnt,header,length,buffer);
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	b298      	uxth	r0, r3
 8001738:	f107 0110 	add.w	r1, r7, #16
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68ba      	ldr	r2, [r7, #8]
 8001740:	f000 fbda 	bl	8001ef8 <writetospi>
} // end dwt_writetodevice()
 8001744:	bf00      	nop
 8001746:	3718      	adds	r7, #24
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <dwt_readfromdevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    uint8         *buffer
)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	60ba      	str	r2, [r7, #8]
 8001754:	607b      	str	r3, [r7, #4]
 8001756:	4603      	mov	r3, r0
 8001758:	81fb      	strh	r3, [r7, #14]
 800175a:	460b      	mov	r3, r1
 800175c:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 800175e:	2300      	movs	r3, #0
 8001760:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting READ operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8001762:	89bb      	ldrh	r3, [r7, #12]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d10a      	bne.n	800177e <dwt_readfromdevice+0x32>
    {
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	1c5a      	adds	r2, r3, #1
 800176c:	617a      	str	r2, [r7, #20]
 800176e:	89fa      	ldrh	r2, [r7, #14]
 8001770:	b2d2      	uxtb	r2, r2
 8001772:	f107 0118 	add.w	r1, r7, #24
 8001776:	440b      	add	r3, r1
 8001778:	f803 2c08 	strb.w	r2, [r3, #-8]
 800177c:	e033      	b.n	80017e6 <dwt_readfromdevice+0x9a>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 800177e:	89fb      	ldrh	r3, [r7, #14]
 8001780:	b2da      	uxtb	r2, r3
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	1c59      	adds	r1, r3, #1
 8001786:	6179      	str	r1, [r7, #20]
 8001788:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800178c:	b2d2      	uxtb	r2, r2
 800178e:	f107 0118 	add.w	r1, r7, #24
 8001792:	440b      	add	r3, r1
 8001794:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8001798:	89bb      	ldrh	r3, [r7, #12]
 800179a:	2b7f      	cmp	r3, #127	; 0x7f
 800179c:	d80a      	bhi.n	80017b4 <dwt_readfromdevice+0x68>
        {
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	1c5a      	adds	r2, r3, #1
 80017a2:	617a      	str	r2, [r7, #20]
 80017a4:	89ba      	ldrh	r2, [r7, #12]
 80017a6:	b2d2      	uxtb	r2, r2
 80017a8:	f107 0118 	add.w	r1, r7, #24
 80017ac:	440b      	add	r3, r1
 80017ae:	f803 2c08 	strb.w	r2, [r3, #-8]
 80017b2:	e018      	b.n	80017e6 <dwt_readfromdevice+0x9a>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 80017b4:	89bb      	ldrh	r3, [r7, #12]
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	1c59      	adds	r1, r3, #1
 80017bc:	6179      	str	r1, [r7, #20]
 80017be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80017c2:	b2d2      	uxtb	r2, r2
 80017c4:	f107 0118 	add.w	r1, r7, #24
 80017c8:	440b      	add	r3, r1
 80017ca:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 80017ce:	89bb      	ldrh	r3, [r7, #12]
 80017d0:	09db      	lsrs	r3, r3, #7
 80017d2:	b299      	uxth	r1, r3
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	1c5a      	adds	r2, r3, #1
 80017d8:	617a      	str	r2, [r7, #20]
 80017da:	b2ca      	uxtb	r2, r1
 80017dc:	f107 0118 	add.w	r1, r7, #24
 80017e0:	440b      	add	r3, r1
 80017e2:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Do the read from the SPI
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	b298      	uxth	r0, r3
 80017ea:	f107 0110 	add.w	r1, r7, #16
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	68ba      	ldr	r2, [r7, #8]
 80017f2:	f000 fbb5 	bl	8001f60 <readfromspi>
} // end dwt_readfromdevice()
 80017f6:	bf00      	nop
 80017f8:	3718      	adds	r7, #24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <dwt_read32bitoffsetreg>:
 * output parameters
 *
 * returns 32 bit register value
 */
uint32 dwt_read32bitoffsetreg(int regFileID, int regOffset)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b086      	sub	sp, #24
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
 8001806:	6039      	str	r1, [r7, #0]
    uint32  regval = 0 ;
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]
    int     j ;
    uint8   buffer[4] ;

    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	b298      	uxth	r0, r3
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	b299      	uxth	r1, r3
 8001814:	f107 030c 	add.w	r3, r7, #12
 8001818:	2204      	movs	r2, #4
 800181a:	f7ff ff97 	bl	800174c <dwt_readfromdevice>

    for (j = 3 ; j >= 0 ; j --)
 800181e:	2303      	movs	r3, #3
 8001820:	613b      	str	r3, [r7, #16]
 8001822:	e00b      	b.n	800183c <dwt_read32bitoffsetreg+0x3e>
    {
        regval = (regval << 8) + buffer[j] ;
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	021b      	lsls	r3, r3, #8
 8001828:	f107 010c 	add.w	r1, r7, #12
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	440a      	add	r2, r1
 8001830:	7812      	ldrb	r2, [r2, #0]
 8001832:	4413      	add	r3, r2
 8001834:	617b      	str	r3, [r7, #20]
    for (j = 3 ; j >= 0 ; j --)
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	3b01      	subs	r3, #1
 800183a:	613b      	str	r3, [r7, #16]
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	2b00      	cmp	r3, #0
 8001840:	daf0      	bge.n	8001824 <dwt_read32bitoffsetreg+0x26>
    }
    return regval ;
 8001842:	697b      	ldr	r3, [r7, #20]

} // end dwt_read32bitoffsetreg()
 8001844:	4618      	mov	r0, r3
 8001846:	3718      	adds	r7, #24
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <dwt_read16bitoffsetreg>:
 * output parameters
 *
 * returns 16 bit register value
 */
uint16 dwt_read16bitoffsetreg(int regFileID, int regOffset)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
    uint16  regval = 0 ;
 8001856:	2300      	movs	r3, #0
 8001858:	81fb      	strh	r3, [r7, #14]
    uint8   buffer[2] ;

    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	b298      	uxth	r0, r3
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	b299      	uxth	r1, r3
 8001862:	f107 030c 	add.w	r3, r7, #12
 8001866:	2202      	movs	r2, #2
 8001868:	f7ff ff70 	bl	800174c <dwt_readfromdevice>

    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
 800186c:	7b7b      	ldrb	r3, [r7, #13]
 800186e:	b29b      	uxth	r3, r3
 8001870:	021b      	lsls	r3, r3, #8
 8001872:	b29a      	uxth	r2, r3
 8001874:	7b3b      	ldrb	r3, [r7, #12]
 8001876:	b29b      	uxth	r3, r3
 8001878:	4413      	add	r3, r2
 800187a:	81fb      	strh	r3, [r7, #14]
    return regval ;
 800187c:	89fb      	ldrh	r3, [r7, #14]

} // end dwt_read16bitoffsetreg()
 800187e:	4618      	mov	r0, r3
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <dwt_read8bitoffsetreg>:
 * output parameters
 *
 * returns 8-bit register value
 */
uint8 dwt_read8bitoffsetreg(int regFileID, int regOffset)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b084      	sub	sp, #16
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
 800188e:	6039      	str	r1, [r7, #0]
    uint8 regval;

    dwt_readfromdevice(regFileID, regOffset, 1, &regval);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	b298      	uxth	r0, r3
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	b299      	uxth	r1, r3
 8001898:	f107 030f 	add.w	r3, r7, #15
 800189c:	2201      	movs	r2, #1
 800189e:	f7ff ff55 	bl	800174c <dwt_readfromdevice>

    return regval ;
 80018a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3710      	adds	r7, #16
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <dwt_write8bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write8bitoffsetreg(int regFileID, int regOffset, uint8 regval)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	4613      	mov	r3, r2
 80018b8:	71fb      	strb	r3, [r7, #7]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	b298      	uxth	r0, r3
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	b299      	uxth	r1, r3
 80018c2:	1dfb      	adds	r3, r7, #7
 80018c4:	2201      	movs	r2, #1
 80018c6:	f7ff fee5 	bl	8001694 <dwt_writetodevice>
}
 80018ca:	bf00      	nop
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <dwt_write16bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write16bitoffsetreg(int regFileID, int regOffset, uint16 regval)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b086      	sub	sp, #24
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	60f8      	str	r0, [r7, #12]
 80018da:	60b9      	str	r1, [r7, #8]
 80018dc:	4613      	mov	r3, r2
 80018de:	80fb      	strh	r3, [r7, #6]
    uint8   buffer[2] ;

    buffer[0] = regval & 0xFF;
 80018e0:	88fb      	ldrh	r3, [r7, #6]
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	753b      	strb	r3, [r7, #20]
    buffer[1] = regval >> 8 ;
 80018e6:	88fb      	ldrh	r3, [r7, #6]
 80018e8:	0a1b      	lsrs	r3, r3, #8
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	757b      	strb	r3, [r7, #21]

    dwt_writetodevice(regFileID,regOffset,2,buffer);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	b298      	uxth	r0, r3
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	b299      	uxth	r1, r3
 80018f8:	f107 0314 	add.w	r3, r7, #20
 80018fc:	2202      	movs	r2, #2
 80018fe:	f7ff fec9 	bl	8001694 <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 8001902:	bf00      	nop
 8001904:	3718      	adds	r7, #24
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <dwt_write32bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write32bitoffsetreg(int regFileID, int regOffset, uint32 regval)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b086      	sub	sp, #24
 800190e:	af00      	add	r7, sp, #0
 8001910:	60f8      	str	r0, [r7, #12]
 8001912:	60b9      	str	r1, [r7, #8]
 8001914:	607a      	str	r2, [r7, #4]
    int     j ;
    uint8   buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
 8001916:	2300      	movs	r3, #0
 8001918:	617b      	str	r3, [r7, #20]
 800191a:	e00d      	b.n	8001938 <dwt_write32bitoffsetreg+0x2e>
    {
        buffer[j] = regval & 0xff ;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	b2d9      	uxtb	r1, r3
 8001920:	f107 0210 	add.w	r2, r7, #16
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	4413      	add	r3, r2
 8001928:	460a      	mov	r2, r1
 800192a:	701a      	strb	r2, [r3, #0]
        regval >>= 8 ;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	0a1b      	lsrs	r3, r3, #8
 8001930:	607b      	str	r3, [r7, #4]
    for ( j = 0 ; j < 4 ; j++ )
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	3301      	adds	r3, #1
 8001936:	617b      	str	r3, [r7, #20]
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	2b03      	cmp	r3, #3
 800193c:	ddee      	ble.n	800191c <dwt_write32bitoffsetreg+0x12>
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	b298      	uxth	r0, r3
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	b299      	uxth	r1, r3
 8001946:	f107 0310 	add.w	r3, r7, #16
 800194a:	2204      	movs	r2, #4
 800194c:	f7ff fea2 	bl	8001694 <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 8001950:	bf00      	nop
 8001952:	3718      	adds	r7, #24
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <_dwt_otpread>:
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32 _dwt_otpread(uint16 address)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	80fb      	strh	r3, [r7, #6]
    uint32 ret_data;

    // Write the address
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);
 8001962:	88fb      	ldrh	r3, [r7, #6]
 8001964:	461a      	mov	r2, r3
 8001966:	2104      	movs	r1, #4
 8001968:	202d      	movs	r0, #45	; 0x2d
 800196a:	f7ff ffb2 	bl	80018d2 <dwt_write16bitoffsetreg>

    // Perform OTP Read - Manual read mode has to be set
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
 800196e:	2203      	movs	r2, #3
 8001970:	2106      	movs	r1, #6
 8001972:	202d      	movs	r0, #45	; 0x2d
 8001974:	f7ff ff9a 	bl	80018ac <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
 8001978:	2200      	movs	r2, #0
 800197a:	2106      	movs	r1, #6
 800197c:	202d      	movs	r0, #45	; 0x2d
 800197e:	f7ff ff95 	bl	80018ac <dwt_write8bitoffsetreg>

    // Read read data, available 40ns after rising edge of OTP_READ
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
 8001982:	210a      	movs	r1, #10
 8001984:	202d      	movs	r0, #45	; 0x2d
 8001986:	f7ff ff3a 	bl	80017fe <dwt_read32bitoffsetreg>
 800198a:	60f8      	str	r0, [r7, #12]

    // Return the 32bit of read data
    return ret_data;
 800198c:	68fb      	ldr	r3, [r7, #12]
}
 800198e:	4618      	mov	r0, r3
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <_dwt_aonarrayupload>:
 * output parameters
 *
 * no return value
 */
void _dwt_aonarrayupload(void)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	af00      	add	r7, sp, #0
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
 800199a:	2200      	movs	r2, #0
 800199c:	2102      	movs	r1, #2
 800199e:	202c      	movs	r0, #44	; 0x2c
 80019a0:	f7ff ff84 	bl	80018ac <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
 80019a4:	2202      	movs	r2, #2
 80019a6:	2102      	movs	r1, #2
 80019a8:	202c      	movs	r0, #44	; 0x2c
 80019aa:	f7ff ff7f 	bl	80018ac <dwt_write8bitoffsetreg>
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <_dwt_configlde>:
 * output parameters
 *
 * no return value
 */
void _dwt_configlde(int prfIndex)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b082      	sub	sp, #8
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
 80019ba:	226d      	movs	r2, #109	; 0x6d
 80019bc:	f640 0106 	movw	r1, #2054	; 0x806
 80019c0:	202e      	movs	r0, #46	; 0x2e
 80019c2:	f7ff ff73 	bl	80018ac <dwt_write8bitoffsetreg>

    if(prfIndex)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d007      	beq.n	80019dc <_dwt_configlde+0x2a>
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
 80019cc:	f240 6207 	movw	r2, #1543	; 0x607
 80019d0:	f641 0106 	movw	r1, #6150	; 0x1806
 80019d4:	202e      	movs	r0, #46	; 0x2e
 80019d6:	f7ff ff7c 	bl	80018d2 <dwt_write16bitoffsetreg>
    }
    else
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
    }
}
 80019da:	e006      	b.n	80019ea <_dwt_configlde+0x38>
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
 80019dc:	f241 6207 	movw	r2, #5639	; 0x1607
 80019e0:	f641 0106 	movw	r1, #6150	; 0x1806
 80019e4:	202e      	movs	r0, #46	; 0x2e
 80019e6:	f7ff ff74 	bl	80018d2 <dwt_write16bitoffsetreg>
}
 80019ea:	bf00      	nop
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <_dwt_loaducodefromrom>:
 * output parameters
 *
 * no return value
 */
void _dwt_loaducodefromrom(void)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	af00      	add	r7, sp, #0
    // Set up clocks
    _dwt_enableclocks(FORCE_LDE);
 80019f6:	200e      	movs	r0, #14
 80019f8:	f000 f82a 	bl	8001a50 <_dwt_enableclocks>

    // Kick off the LDE load
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
 80019fc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001a00:	2106      	movs	r1, #6
 8001a02:	202d      	movs	r0, #45	; 0x2d
 8001a04:	f7ff ff65 	bl	80018d2 <dwt_write16bitoffsetreg>

    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 8001a08:	2001      	movs	r0, #1
 8001a0a:	f000 fa69 	bl	8001ee0 <deca_sleep>

    // Default clocks (ENABLE_ALL_SEQ)
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 8001a0e:	2001      	movs	r0, #1
 8001a10:	f000 f81e 	bl	8001a50 <_dwt_enableclocks>
}
 8001a14:	bf00      	nop
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <dwt_setrxaftertxdelay>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxaftertxdelay(uint32 rxDelayTime)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
    uint32 val = dwt_read32bitreg(ACK_RESP_T_ID) ; // Read ACK_RESP_T_ID register
 8001a20:	2100      	movs	r1, #0
 8001a22:	201a      	movs	r0, #26
 8001a24:	f7ff feeb 	bl	80017fe <dwt_read32bitoffsetreg>
 8001a28:	60f8      	str	r0, [r7, #12]

    val &= ~(ACK_RESP_T_W4R_TIM_MASK) ; // Clear the timer (19:0)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	0d1b      	lsrs	r3, r3, #20
 8001a2e:	051b      	lsls	r3, r3, #20
 8001a30:	60fb      	str	r3, [r7, #12]

    val |= (rxDelayTime & ACK_RESP_T_W4R_TIM_MASK) ; // In UWB microseconds (e.g. turn the receiver on 20uus after TX)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a38:	68fa      	ldr	r2, [r7, #12]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(ACK_RESP_T_ID, val) ;
 8001a3e:	68fa      	ldr	r2, [r7, #12]
 8001a40:	2100      	movs	r1, #0
 8001a42:	201a      	movs	r0, #26
 8001a44:	f7ff ff61 	bl	800190a <dwt_write32bitoffsetreg>
}
 8001a48:	bf00      	nop
 8001a4a:	3710      	adds	r7, #16
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <_dwt_enableclocks>:
 * output parameters none
 *
 * no return value
 */
void _dwt_enableclocks(int clocks)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
    uint8 reg[2];

    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
 8001a58:	f107 030c 	add.w	r3, r7, #12
 8001a5c:	2202      	movs	r2, #2
 8001a5e:	2100      	movs	r1, #0
 8001a60:	2036      	movs	r0, #54	; 0x36
 8001a62:	f7ff fe73 	bl	800174c <dwt_readfromdevice>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2b0e      	cmp	r3, #14
 8001a6a:	d876      	bhi.n	8001b5a <_dwt_enableclocks+0x10a>
 8001a6c:	a201      	add	r2, pc, #4	; (adr r2, 8001a74 <_dwt_enableclocks+0x24>)
 8001a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a72:	bf00      	nop
 8001a74:	08001ac1 	.word	0x08001ac1
 8001a78:	08001ab1 	.word	0x08001ab1
 8001a7c:	08001ad7 	.word	0x08001ad7
 8001a80:	08001b5b 	.word	0x08001b5b
 8001a84:	08001b5b 	.word	0x08001b5b
 8001a88:	08001b5b 	.word	0x08001b5b
 8001a8c:	08001b5b 	.word	0x08001b5b
 8001a90:	08001aed 	.word	0x08001aed
 8001a94:	08001b0d 	.word	0x08001b0d
 8001a98:	08001b5b 	.word	0x08001b5b
 8001a9c:	08001b5b 	.word	0x08001b5b
 8001aa0:	08001b23 	.word	0x08001b23
 8001aa4:	08001b2f 	.word	0x08001b2f
 8001aa8:	08001b3b 	.word	0x08001b3b
 8001aac:	08001b51 	.word	0x08001b51
    switch(clocks)
    {
        case ENABLE_ALL_SEQ:
        {
            reg[0] = 0x00 ;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	733b      	strb	r3, [r7, #12]
            reg[1] = reg[1] & 0xfe;
 8001ab4:	7b7b      	ldrb	r3, [r7, #13]
 8001ab6:	f023 0301 	bic.w	r3, r3, #1
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001abe:	e04d      	b.n	8001b5c <_dwt_enableclocks+0x10c>
        case FORCE_SYS_XTI:
        {
            // System and RX
            reg[0] = 0x01 | (reg[0] & 0xfc);
 8001ac0:	7b3b      	ldrb	r3, [r7, #12]
 8001ac2:	b25b      	sxtb	r3, r3
 8001ac4:	f023 0303 	bic.w	r3, r3, #3
 8001ac8:	b25b      	sxtb	r3, r3
 8001aca:	f043 0301 	orr.w	r3, r3, #1
 8001ace:	b25b      	sxtb	r3, r3
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	733b      	strb	r3, [r7, #12]
        }
        break;
 8001ad4:	e042      	b.n	8001b5c <_dwt_enableclocks+0x10c>
        case FORCE_SYS_PLL:
        {
            // System
            reg[0] = 0x02 | (reg[0] & 0xfc);
 8001ad6:	7b3b      	ldrb	r3, [r7, #12]
 8001ad8:	b25b      	sxtb	r3, r3
 8001ada:	f023 0303 	bic.w	r3, r3, #3
 8001ade:	b25b      	sxtb	r3, r3
 8001ae0:	f043 0302 	orr.w	r3, r3, #2
 8001ae4:	b25b      	sxtb	r3, r3
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	733b      	strb	r3, [r7, #12]
        }
        break;
 8001aea:	e037      	b.n	8001b5c <_dwt_enableclocks+0x10c>
        case READ_ACC_ON:
        {
            reg[0] = 0x48 | (reg[0] & 0xb3);
 8001aec:	7b3b      	ldrb	r3, [r7, #12]
 8001aee:	b25b      	sxtb	r3, r3
 8001af0:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8001af4:	b25b      	sxtb	r3, r3
 8001af6:	f043 0348 	orr.w	r3, r3, #72	; 0x48
 8001afa:	b25b      	sxtb	r3, r3
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x80 | reg[1];
 8001b00:	7b7b      	ldrb	r3, [r7, #13]
 8001b02:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001b0a:	e027      	b.n	8001b5c <_dwt_enableclocks+0x10c>
        case READ_ACC_OFF:
        {
            reg[0] = reg[0] & 0xb3;
 8001b0c:	7b3b      	ldrb	r3, [r7, #12]
 8001b0e:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x7f & reg[1];
 8001b16:	7b7b      	ldrb	r3, [r7, #13]
 8001b18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001b20:	e01c      	b.n	8001b5c <_dwt_enableclocks+0x10c>
        case FORCE_OTP_ON:
        {
            reg[1] = 0x02 | reg[1];
 8001b22:	7b7b      	ldrb	r3, [r7, #13]
 8001b24:	f043 0302 	orr.w	r3, r3, #2
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001b2c:	e016      	b.n	8001b5c <_dwt_enableclocks+0x10c>
        case FORCE_OTP_OFF:
        {
            reg[1] = reg[1] & 0xfd;
 8001b2e:	7b7b      	ldrb	r3, [r7, #13]
 8001b30:	f023 0302 	bic.w	r3, r3, #2
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001b38:	e010      	b.n	8001b5c <_dwt_enableclocks+0x10c>
        case FORCE_TX_PLL:
        {
            reg[0] = 0x20 | (reg[0] & 0xcf);
 8001b3a:	7b3b      	ldrb	r3, [r7, #12]
 8001b3c:	b25b      	sxtb	r3, r3
 8001b3e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001b42:	b25b      	sxtb	r3, r3
 8001b44:	f043 0320 	orr.w	r3, r3, #32
 8001b48:	b25b      	sxtb	r3, r3
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	733b      	strb	r3, [r7, #12]
        }
        break;
 8001b4e:	e005      	b.n	8001b5c <_dwt_enableclocks+0x10c>
        case FORCE_LDE:
        {
            reg[0] = 0x01;
 8001b50:	2301      	movs	r3, #1
 8001b52:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x03;
 8001b54:	2303      	movs	r3, #3
 8001b56:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001b58:	e000      	b.n	8001b5c <_dwt_enableclocks+0x10c>
        default:
        break;
 8001b5a:	bf00      	nop
    }


    // Need to write lower byte separately before setting the higher byte(s)
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
 8001b5c:	f107 030c 	add.w	r3, r7, #12
 8001b60:	2201      	movs	r2, #1
 8001b62:	2100      	movs	r1, #0
 8001b64:	2036      	movs	r0, #54	; 0x36
 8001b66:	f7ff fd95 	bl	8001694 <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
 8001b6a:	f107 030c 	add.w	r3, r7, #12
 8001b6e:	3301      	adds	r3, #1
 8001b70:	2201      	movs	r2, #1
 8001b72:	2101      	movs	r1, #1
 8001b74:	2036      	movs	r0, #54	; 0x36
 8001b76:	f7ff fd8d 	bl	8001694 <dwt_writetodevice>

} // end _dwt_enableclocks()
 8001b7a:	bf00      	nop
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop

08001b84 <_dwt_disablesequencing>:
 * output parameters none
 *
 * no return value
 */
void _dwt_disablesequencing(void) // Disable sequencing and go to state "INIT"
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 8001b88:	2000      	movs	r0, #0
 8001b8a:	f7ff ff61 	bl	8001a50 <_dwt_enableclocks>

    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
 8001b8e:	2200      	movs	r2, #0
 8001b90:	2104      	movs	r1, #4
 8001b92:	2036      	movs	r0, #54	; 0x36
 8001b94:	f7ff fe9d 	bl	80018d2 <dwt_write16bitoffsetreg>
}
 8001b98:	bf00      	nop
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <dwt_setdelayedtrxtime>:
 * output parameters none
 *
 * no return value
 */
void dwt_setdelayedtrxtime(uint32 starttime)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
    dwt_write32bitoffsetreg(DX_TIME_ID, 1, starttime); // Write at offset 1 as the lower 9 bits of this register are ignored
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	200a      	movs	r0, #10
 8001baa:	f7ff feae 	bl	800190a <dwt_write32bitoffsetreg>

} // end dwt_setdelayedtrxtime()
 8001bae:	bf00      	nop
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
	...

08001bb8 <dwt_starttx>:
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed transmission will be cancelled if the delayed time has passed)
 */

int dwt_starttx(uint8 mode)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	71fb      	strb	r3, [r7, #7]
    int retval = DWT_SUCCESS ;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60fb      	str	r3, [r7, #12]
    uint8 temp  = 0x00;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	72fb      	strb	r3, [r7, #11]
    uint16 checkTxOK = 0 ;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	813b      	strh	r3, [r7, #8]

    if(mode & DWT_RESPONSE_EXPECTED)
 8001bce:	79fb      	ldrb	r3, [r7, #7]
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d005      	beq.n	8001be4 <dwt_starttx+0x2c>
    {
        temp = (uint8)SYS_CTRL_WAIT4RESP ; // Set wait4response bit
 8001bd8:	2380      	movs	r3, #128	; 0x80
 8001bda:	72fb      	strb	r3, [r7, #11]
        pdw1000local->wait4resp = 1;
 8001bdc:	4b1c      	ldr	r3, [pc, #112]	; (8001c50 <dwt_starttx+0x98>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2201      	movs	r2, #1
 8001be2:	755a      	strb	r2, [r3, #21]
    }

    if (mode & DWT_START_TX_DELAYED)
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d020      	beq.n	8001c30 <dwt_starttx+0x78>
    {
        // Both SYS_CTRL_TXSTRT and SYS_CTRL_TXDLYS to correctly enable TX
        temp |= (uint8)(SYS_CTRL_TXDLYS | SYS_CTRL_TXSTRT) ;
 8001bee:	7afb      	ldrb	r3, [r7, #11]
 8001bf0:	f043 0306 	orr.w	r3, r3, #6
 8001bf4:	72fb      	strb	r3, [r7, #11]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8001bf6:	7afb      	ldrb	r3, [r7, #11]
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	200d      	movs	r0, #13
 8001bfe:	f7ff fe55 	bl	80018ac <dwt_write8bitoffsetreg>
        checkTxOK = dwt_read16bitoffsetreg(SYS_STATUS_ID, 3); // Read at offset 3 to get the upper 2 bytes out of 5
 8001c02:	2103      	movs	r1, #3
 8001c04:	200f      	movs	r0, #15
 8001c06:	f7ff fe21 	bl	800184c <dwt_read16bitoffsetreg>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	813b      	strh	r3, [r7, #8]
        if ((checkTxOK & SYS_STATUS_TXERR) == 0) // Transmit Delayed Send set over Half a Period away or Power Up error (there is enough time to send but not to power up individual blocks).
 8001c0e:	893b      	ldrh	r3, [r7, #8]
 8001c10:	f403 6381 	and.w	r3, r3, #1032	; 0x408
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d102      	bne.n	8001c1e <dwt_starttx+0x66>
        {
            retval = DWT_SUCCESS ; // All okay
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	e012      	b.n	8001c44 <dwt_starttx+0x8c>
        }
        else
        {
            // If HPDWARN or TXPUTE are set this indicates that the TXDLYS was set too late for the specified DX_TIME.
            // remedial action is to cancel delayed send and report error
            dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF);
 8001c1e:	2240      	movs	r2, #64	; 0x40
 8001c20:	2100      	movs	r1, #0
 8001c22:	200d      	movs	r0, #13
 8001c24:	f7ff fe42 	bl	80018ac <dwt_write8bitoffsetreg>
            retval = DWT_ERROR ; // Failed !
 8001c28:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	e009      	b.n	8001c44 <dwt_starttx+0x8c>
        }
    }
    else
    {
        temp |= (uint8)SYS_CTRL_TXSTRT ;
 8001c30:	7afb      	ldrb	r3, [r7, #11]
 8001c32:	f043 0302 	orr.w	r3, r3, #2
 8001c36:	72fb      	strb	r3, [r7, #11]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8001c38:	7afb      	ldrb	r3, [r7, #11]
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	200d      	movs	r0, #13
 8001c40:	f7ff fe34 	bl	80018ac <dwt_write8bitoffsetreg>
    }

    return retval;
 8001c44:	68fb      	ldr	r3, [r7, #12]

} // end dwt_starttx()
 8001c46:	4618      	mov	r0, r3
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	20000000 	.word	0x20000000

08001c54 <dwt_forcetrxoff>:
 * output parameters
 *
 * no return value
 */
void dwt_forcetrxoff(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
    decaIrqStatus_t stat ;
    uint32 mask;

    mask = dwt_read32bitreg(SYS_MASK_ID) ; // Read set interrupt mask
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	200e      	movs	r0, #14
 8001c5e:	f7ff fdce 	bl	80017fe <dwt_read32bitoffsetreg>
 8001c62:	6078      	str	r0, [r7, #4]

    // Need to beware of interrupts occurring in the middle of following read modify write cycle
    // We can disable the radio, but before the status is cleared an interrupt can be set (e.g. the
    // event has just happened before the radio was disabled)
    // thus we need to disable interrupt during this operation
    stat = decamutexon() ;
 8001c64:	f000 f91e 	bl	8001ea4 <decamutexon>
 8001c68:	6038      	str	r0, [r7, #0]

    dwt_write32bitreg(SYS_MASK_ID, 0) ; // Clear interrupt mask - so we don't get any unwanted events
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	200e      	movs	r0, #14
 8001c70:	f7ff fe4b 	bl	800190a <dwt_write32bitoffsetreg>

    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF) ; // Disable the radio
 8001c74:	2240      	movs	r2, #64	; 0x40
 8001c76:	2100      	movs	r1, #0
 8001c78:	200d      	movs	r0, #13
 8001c7a:	f7ff fe17 	bl	80018ac <dwt_write8bitoffsetreg>

    // Forcing Transceiver off - so we do not want to see any new events that may have happened
    dwt_write32bitreg(SYS_STATUS_ID, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_GOOD));
 8001c7e:	4a0b      	ldr	r2, [pc, #44]	; (8001cac <dwt_forcetrxoff+0x58>)
 8001c80:	2100      	movs	r1, #0
 8001c82:	200f      	movs	r0, #15
 8001c84:	f7ff fe41 	bl	800190a <dwt_write32bitoffsetreg>

    dwt_syncrxbufptrs();
 8001c88:	f000 f814 	bl	8001cb4 <dwt_syncrxbufptrs>

    dwt_write32bitreg(SYS_MASK_ID, mask) ; // Set interrupt mask to what it was
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	2100      	movs	r1, #0
 8001c90:	200e      	movs	r0, #14
 8001c92:	f7ff fe3a 	bl	800190a <dwt_write32bitoffsetreg>

    // Enable/restore interrupts again...
    decamutexoff(stat) ;
 8001c96:	6838      	ldr	r0, [r7, #0]
 8001c98:	f000 f915 	bl	8001ec6 <decamutexoff>
    pdw1000local->wait4resp = 0;
 8001c9c:	4b04      	ldr	r3, [pc, #16]	; (8001cb0 <dwt_forcetrxoff+0x5c>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	755a      	strb	r2, [r3, #21]

} // end deviceforcetrxoff()
 8001ca4:	bf00      	nop
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	2427fff8 	.word	0x2427fff8
 8001cb0:	20000000 	.word	0x20000000

08001cb4 <dwt_syncrxbufptrs>:
 * output parameters
 *
 * no return value
 */
void dwt_syncrxbufptrs(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
    uint8  buff ;
    // Need to make sure that the host/IC buffer pointers are aligned before starting RX
    buff = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 8001cba:	2103      	movs	r1, #3
 8001cbc:	200f      	movs	r0, #15
 8001cbe:	f7ff fde2 	bl	8001886 <dwt_read8bitoffsetreg>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	71fb      	strb	r3, [r7, #7]

    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 8001cc6:	79fa      	ldrb	r2, [r7, #7]
       ((buff & (SYS_STATUS_HSRBP>>24)) << 1) ) // Host Side Receive Buffer Pointer
 8001cc8:	79fb      	ldrb	r3, [r7, #7]
 8001cca:	005b      	lsls	r3, r3, #1
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 8001ccc:	4053      	eors	r3, r2
 8001cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d004      	beq.n	8001ce0 <dwt_syncrxbufptrs+0x2c>
    {
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 0x01) ; // We need to swap RX buffer status reg (write one to toggle internally)
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	2103      	movs	r1, #3
 8001cda:	200d      	movs	r0, #13
 8001cdc:	f7ff fde6 	bl	80018ac <dwt_write8bitoffsetreg>
    }
}
 8001ce0:	bf00      	nop
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <dwt_rxenable>:
 *                                               performing manual RX re-enabling in double buffering mode
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed receive enable will be too far in the future if delayed time has passed)
 */
int dwt_rxenable(int mode)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
    uint16 temp ;
    uint8 temp1 ;

    if ((mode & DWT_NO_SYNC_PTRS) == 0)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f003 0304 	and.w	r3, r3, #4
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <dwt_rxenable+0x16>
    {
        dwt_syncrxbufptrs();
 8001cfa:	f7ff ffdb 	bl	8001cb4 <dwt_syncrxbufptrs>
    }

    temp = (uint16)SYS_CTRL_RXENAB ;
 8001cfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d02:	81fb      	strh	r3, [r7, #14]

    if (mode & DWT_START_RX_DELAYED)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d003      	beq.n	8001d16 <dwt_rxenable+0x2e>
    {
        temp |= (uint16)SYS_CTRL_RXDLYE ;
 8001d0e:	89fb      	ldrh	r3, [r7, #14]
 8001d10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d14:	81fb      	strh	r3, [r7, #14]
    }

    dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8001d16:	89fb      	ldrh	r3, [r7, #14]
 8001d18:	461a      	mov	r2, r3
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	200d      	movs	r0, #13
 8001d1e:	f7ff fdd8 	bl	80018d2 <dwt_write16bitoffsetreg>

    if (mode & DWT_START_RX_DELAYED) // check for errors
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d01a      	beq.n	8001d62 <dwt_rxenable+0x7a>
    {
        temp1 = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 8001d2c:	2103      	movs	r1, #3
 8001d2e:	200f      	movs	r0, #15
 8001d30:	f7ff fda9 	bl	8001886 <dwt_read8bitoffsetreg>
 8001d34:	4603      	mov	r3, r0
 8001d36:	737b      	strb	r3, [r7, #13]
        if ((temp1 & (SYS_STATUS_HPDWARN >> 24)) != 0) // if delay has passed do immediate RX on unless DWT_IDLE_ON_DLY_ERR is true
 8001d38:	7b7b      	ldrb	r3, [r7, #13]
 8001d3a:	f003 0308 	and.w	r3, r3, #8
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d00f      	beq.n	8001d62 <dwt_rxenable+0x7a>
        {
            dwt_forcetrxoff(); // turn the delayed receive off
 8001d42:	f7ff ff87 	bl	8001c54 <dwt_forcetrxoff>

            if((mode & DWT_IDLE_ON_DLY_ERR) == 0) // if DWT_IDLE_ON_DLY_ERR not set then re-enable receiver
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d105      	bne.n	8001d5c <dwt_rxenable+0x74>
            {
                dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_RXENAB);
 8001d50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d54:	2100      	movs	r1, #0
 8001d56:	200d      	movs	r0, #13
 8001d58:	f7ff fdbb 	bl	80018d2 <dwt_write16bitoffsetreg>
            }
            return DWT_ERROR; // return warning indication
 8001d5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d60:	e000      	b.n	8001d64 <dwt_rxenable+0x7c>
        }
    }

    return DWT_SUCCESS;
 8001d62:	2300      	movs	r3, #0
} // end dwt_rxenable()
 8001d64:	4618      	mov	r0, r3
 8001d66:	3710      	adds	r7, #16
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <dwt_setrxtimeout>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxtimeout(uint16 time)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	80fb      	strh	r3, [r7, #6]
    uint8 temp ;

    temp = dwt_read8bitoffsetreg(SYS_CFG_ID, 3); // Read at offset 3 to get the upper byte only
 8001d76:	2103      	movs	r1, #3
 8001d78:	2004      	movs	r0, #4
 8001d7a:	f7ff fd84 	bl	8001886 <dwt_read8bitoffsetreg>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	73fb      	strb	r3, [r7, #15]

    if(time > 0)
 8001d82:	88fb      	ldrh	r3, [r7, #6]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d018      	beq.n	8001dba <dwt_setrxtimeout+0x4e>
    {
        dwt_write16bitoffsetreg(RX_FWTO_ID, RX_FWTO_OFFSET, time) ;
 8001d88:	88fb      	ldrh	r3, [r7, #6]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	200c      	movs	r0, #12
 8001d90:	f7ff fd9f 	bl	80018d2 <dwt_write16bitoffsetreg>

        temp |= (uint8)(SYS_CFG_RXWTOE>>24); // Shift RXWTOE mask as we read the upper byte only
 8001d94:	7bfb      	ldrb	r3, [r7, #15]
 8001d96:	f043 0310 	orr.w	r3, r3, #16
 8001d9a:	73fb      	strb	r3, [r7, #15]
        // OR in 32bit value (1 bit set), I know this is in high byte.
        pdw1000local->sysCFGreg |= SYS_CFG_RXWTOE;
 8001d9c:	4b12      	ldr	r3, [pc, #72]	; (8001de8 <dwt_setrxtimeout+0x7c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	691a      	ldr	r2, [r3, #16]
 8001da2:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <dwt_setrxtimeout+0x7c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001daa:	611a      	str	r2, [r3, #16]

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
 8001dac:	7bfb      	ldrb	r3, [r7, #15]
 8001dae:	461a      	mov	r2, r3
 8001db0:	2103      	movs	r1, #3
 8001db2:	2004      	movs	r0, #4
 8001db4:	f7ff fd7a 	bl	80018ac <dwt_write8bitoffsetreg>
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
    }

} // end dwt_setrxtimeout()
 8001db8:	e011      	b.n	8001dde <dwt_setrxtimeout+0x72>
        temp &= ~((uint8)(SYS_CFG_RXWTOE>>24)); // Shift RXWTOE mask as we read the upper byte only
 8001dba:	7bfb      	ldrb	r3, [r7, #15]
 8001dbc:	f023 0310 	bic.w	r3, r3, #16
 8001dc0:	73fb      	strb	r3, [r7, #15]
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);
 8001dc2:	4b09      	ldr	r3, [pc, #36]	; (8001de8 <dwt_setrxtimeout+0x7c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	691a      	ldr	r2, [r3, #16]
 8001dc8:	4b07      	ldr	r3, [pc, #28]	; (8001de8 <dwt_setrxtimeout+0x7c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001dd0:	611a      	str	r2, [r3, #16]
        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
 8001dd2:	7bfb      	ldrb	r3, [r7, #15]
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	2103      	movs	r1, #3
 8001dd8:	2004      	movs	r0, #4
 8001dda:	f7ff fd67 	bl	80018ac <dwt_write8bitoffsetreg>
} // end dwt_setrxtimeout()
 8001dde:	bf00      	nop
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20000000 	.word	0x20000000

08001dec <dwt_setpreambledetecttimeout>:
 * output parameters
 *
 * no return value
 */
void dwt_setpreambledetecttimeout(uint16 timeout)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	80fb      	strh	r3, [r7, #6]
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_PRETOC_OFFSET, timeout);
 8001df6:	88fb      	ldrh	r3, [r7, #6]
 8001df8:	461a      	mov	r2, r3
 8001dfa:	2124      	movs	r1, #36	; 0x24
 8001dfc:	2027      	movs	r0, #39	; 0x27
 8001dfe:	f7ff fd68 	bl	80018d2 <dwt_write16bitoffsetreg>
}
 8001e02:	bf00      	nop
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <dwt_rxreset>:
 * output parameters
 *
 * no return value
 */
void dwt_rxreset(void)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	af00      	add	r7, sp, #0
    // Set RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_RX);
 8001e0e:	22e0      	movs	r2, #224	; 0xe0
 8001e10:	2103      	movs	r1, #3
 8001e12:	2036      	movs	r0, #54	; 0x36
 8001e14:	f7ff fd4a 	bl	80018ac <dwt_write8bitoffsetreg>

    // Clear RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 8001e18:	22f0      	movs	r2, #240	; 0xf0
 8001e1a:	2103      	movs	r1, #3
 8001e1c:	2036      	movs	r0, #54	; 0x36
 8001e1e:	f7ff fd45 	bl	80018ac <dwt_write8bitoffsetreg>
}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
	...

08001e28 <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
    _dwt_disablesequencing();
 8001e2c:	f7ff feaa 	bl	8001b84 <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
 8001e30:	2200      	movs	r2, #0
 8001e32:	2100      	movs	r1, #0
 8001e34:	202c      	movs	r0, #44	; 0x2c
 8001e36:	f7ff fd4c 	bl	80018d2 <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	2106      	movs	r1, #6
 8001e3e:	202c      	movs	r0, #44	; 0x2c
 8001e40:	f7ff fd34 	bl	80018ac <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
 8001e44:	f7ff fda7 	bl	8001996 <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC (set the reset bits)
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
 8001e48:	2200      	movs	r2, #0
 8001e4a:	2103      	movs	r1, #3
 8001e4c:	2036      	movs	r0, #54	; 0x36
 8001e4e:	f7ff fd2d 	bl	80018ac <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
 8001e52:	2001      	movs	r0, #1
 8001e54:	f000 f844 	bl	8001ee0 <deca_sleep>

    // Clear the reset bits
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 8001e58:	22f0      	movs	r2, #240	; 0xf0
 8001e5a:	2103      	movs	r1, #3
 8001e5c:	2036      	movs	r0, #54	; 0x36
 8001e5e:	f7ff fd25 	bl	80018ac <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
 8001e62:	4b03      	ldr	r3, [pc, #12]	; (8001e70 <dwt_softreset+0x48>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2200      	movs	r2, #0
 8001e68:	755a      	strb	r2, [r3, #21]
}
 8001e6a:	bf00      	nop
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	20000000 	.word	0x20000000

08001e74 <dwt_setxtaltrim>:
 * output parameters
 *
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	71fb      	strb	r3, [r7, #7]
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
 8001e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e82:	f003 031f 	and.w	r3, r3, #31
 8001e86:	b25b      	sxtb	r3, r3
 8001e88:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e8c:	b25b      	sxtb	r3, r3
 8001e8e:	73fb      	strb	r3, [r7, #15]
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
 8001e90:	7bfb      	ldrb	r3, [r7, #15]
 8001e92:	461a      	mov	r2, r3
 8001e94:	210e      	movs	r1, #14
 8001e96:	202b      	movs	r0, #43	; 0x2b
 8001e98:	f7ff fd08 	bl	80018ac <dwt_write8bitoffsetreg>
}
 8001e9c:	bf00      	nop
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
	decaIrqStatus_t s = port_GetEXT_IRQStatus();
 8001eaa:	f000 f991 	bl	80021d0 <port_GetEXT_IRQStatus>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	607b      	str	r3, [r7, #4]

	if(s) {
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <decamutexon+0x18>
		port_DisableEXT_IRQ(); //disable the external interrupt line
 8001eb8:	f000 f97c 	bl	80021b4 <port_DisableEXT_IRQ>
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
 8001ebc:	687b      	ldr	r3, [r7, #4]
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b082      	sub	sp, #8
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <decamutexoff+0x12>
		port_EnableEXT_IRQ();
 8001ed4:	f000 f975 	bl	80021c2 <port_EnableEXT_IRQ>
	}
}
 8001ed8:	bf00      	nop
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <deca_sleep>:
#include "sleep.h"
#include "port.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
__INLINE void deca_sleep(unsigned int time_ms)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
	Sleep(time_ms);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 f8c5 	bl	8002078 <Sleep>
}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <writetospi>:
#pragma GCC optimize ("O3")
int writetospi(uint16_t headerLength,
               const    uint8_t *headerBuffer,
               uint32_t bodyLength,
               const    uint8_t *bodyBuffer)
{
 8001ef8:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8001efc:	4683      	mov	fp, r0
 8001efe:	468a      	mov	sl, r1
 8001f00:	4691      	mov	r9, r2
 8001f02:	4698      	mov	r8, r3
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 8001f04:	f7ff ffce 	bl	8001ea4 <decamutexon>

    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001f08:	4d13      	ldr	r5, [pc, #76]	; (8001f58 <writetospi+0x60>)
    stat = decamutexon() ;
 8001f0a:	4606      	mov	r6, r0
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001f0c:	4628      	mov	r0, r5
 8001f0e:	f003 fb17 	bl	8005540 <HAL_SPI_GetState>
 8001f12:	2801      	cmp	r0, #1
 8001f14:	4604      	mov	r4, r0
 8001f16:	d1f9      	bne.n	8001f0c <writetospi+0x14>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 8001f18:	4810      	ldr	r0, [pc, #64]	; (8001f5c <writetospi+0x64>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	2140      	movs	r1, #64	; 0x40
 8001f1e:	f001 fe63 	bl	8003be8 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&headerBuffer[0], headerLength, HAL_MAX_DELAY);    /* Send header in polling mode */
 8001f22:	465a      	mov	r2, fp
 8001f24:	4651      	mov	r1, sl
 8001f26:	f04f 33ff 	mov.w	r3, #4294967295
 8001f2a:	480b      	ldr	r0, [pc, #44]	; (8001f58 <writetospi+0x60>)
 8001f2c:	f003 f8c1 	bl	80050b2 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&bodyBuffer[0], bodyLength, HAL_MAX_DELAY);        /* Send data in polling mode */
 8001f30:	f04f 33ff 	mov.w	r3, #4294967295
 8001f34:	fa1f f289 	uxth.w	r2, r9
 8001f38:	4641      	mov	r1, r8
 8001f3a:	4807      	ldr	r0, [pc, #28]	; (8001f58 <writetospi+0x60>)
 8001f3c:	f003 f8b9 	bl	80050b2 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 8001f40:	4622      	mov	r2, r4
 8001f42:	2140      	movs	r1, #64	; 0x40
 8001f44:	4805      	ldr	r0, [pc, #20]	; (8001f5c <writetospi+0x64>)
 8001f46:	f001 fe4f 	bl	8003be8 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 8001f4a:	4630      	mov	r0, r6
 8001f4c:	f7ff ffbb 	bl	8001ec6 <decamutexoff>

    return 0;
} // end writetospi()
 8001f50:	2000      	movs	r0, #0
 8001f52:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
 8001f56:	bf00      	nop
 8001f58:	2000075c 	.word	0x2000075c
 8001f5c:	40020400 	.word	0x40020400

08001f60 <readfromspi>:
#pragma GCC optimize ("O3")
int readfromspi(uint16_t headerLength,
                const uint8_t *headerBuffer,
                uint32_t readlength,
                uint8_t *readBuffer)
{
 8001f60:	e92d 4778 	stmdb	sp!, {r3, r4, r5, r6, r8, r9, sl, lr}
 8001f64:	4681      	mov	r9, r0
 8001f66:	460c      	mov	r4, r1
 8001f68:	4690      	mov	r8, r2
 8001f6a:	461d      	mov	r5, r3
    int i;
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 8001f6c:	f7ff ff9a 	bl	8001ea4 <decamutexon>

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001f70:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8001ff0 <readfromspi+0x90>
    stat = decamutexon() ;
 8001f74:	4606      	mov	r6, r0
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001f76:	4650      	mov	r0, sl
 8001f78:	f003 fae2 	bl	8005540 <HAL_SPI_GetState>
 8001f7c:	2801      	cmp	r0, #1
 8001f7e:	d1fa      	bne.n	8001f76 <readfromspi+0x16>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 8001f80:	481a      	ldr	r0, [pc, #104]	; (8001fec <readfromspi+0x8c>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	2140      	movs	r1, #64	; 0x40
 8001f86:	f001 fe2f 	bl	8003be8 <HAL_GPIO_WritePin>

    /* Send header */
    for(i=0; i<headerLength; i++)
 8001f8a:	f1b9 0f00 	cmp.w	r9, #0
 8001f8e:	d00c      	beq.n	8001faa <readfromspi+0x4a>
    {
        HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 8001f90:	f8df a05c 	ldr.w	sl, [pc, #92]	; 8001ff0 <readfromspi+0x90>
 8001f94:	44a1      	add	r9, r4
 8001f96:	2201      	movs	r2, #1
 8001f98:	4621      	mov	r1, r4
 8001f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f9e:	4414      	add	r4, r2
 8001fa0:	4650      	mov	r0, sl
 8001fa2:	f003 f886 	bl	80050b2 <HAL_SPI_Transmit>
    for(i=0; i<headerLength; i++)
 8001fa6:	454c      	cmp	r4, r9
 8001fa8:	d1f5      	bne.n	8001f96 <readfromspi+0x36>
    }

    /* for the data buffer use LL functions directly as the HAL SPI read function
     * has issue reading single bytes */
    while(readlength-- > 0)
 8001faa:	f1b8 0f00 	cmp.w	r8, #0
 8001fae:	d012      	beq.n	8001fd6 <readfromspi+0x76>
 8001fb0:	f8df c03c 	ldr.w	ip, [pc, #60]	; 8001ff0 <readfromspi+0x90>
 8001fb4:	eb05 0008 	add.w	r0, r5, r8
        /* Wait until TXE flag is set to send data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
        {
        }

        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 8001fb8:	2400      	movs	r4, #0
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
 8001fba:	f8dc 2000 	ldr.w	r2, [ip]
 8001fbe:	6891      	ldr	r1, [r2, #8]
 8001fc0:	0789      	lsls	r1, r1, #30
 8001fc2:	d5fc      	bpl.n	8001fbe <readfromspi+0x5e>
        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 8001fc4:	60d4      	str	r4, [r2, #12]
        e.g. when waking up DW1000 from DEEPSLEEP via dwt_spicswakeup() function.
        */

        /* Wait until RXNE flag is set to read data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET)
 8001fc6:	6891      	ldr	r1, [r2, #8]
 8001fc8:	07cb      	lsls	r3, r1, #31
 8001fca:	d5fc      	bpl.n	8001fc6 <readfromspi+0x66>
        {
        }

        (*readBuffer++) = hspi1.Instance->DR;  //copy data read form (MISO)
 8001fcc:	68d3      	ldr	r3, [r2, #12]
 8001fce:	f805 3b01 	strb.w	r3, [r5], #1
    while(readlength-- > 0)
 8001fd2:	4285      	cmp	r5, r0
 8001fd4:	d1f1      	bne.n	8001fba <readfromspi+0x5a>
    }

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	2140      	movs	r1, #64	; 0x40
 8001fda:	4804      	ldr	r0, [pc, #16]	; (8001fec <readfromspi+0x8c>)
 8001fdc:	f001 fe04 	bl	8003be8 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 8001fe0:	4630      	mov	r0, r6
 8001fe2:	f7ff ff70 	bl	8001ec6 <decamutexoff>

    return 0;
} // end readfromspi()
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	e8bd 8778 	ldmia.w	sp!, {r3, r4, r5, r6, r8, r9, sl, pc}
 8001fec:	40020400 	.word	0x40020400
 8001ff0:	2000075c 	.word	0x2000075c

08001ff4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002002:	2b00      	cmp	r3, #0
 8002004:	db0b      	blt.n	800201e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002006:	79fb      	ldrb	r3, [r7, #7]
 8002008:	f003 021f 	and.w	r2, r3, #31
 800200c:	4907      	ldr	r1, [pc, #28]	; (800202c <__NVIC_EnableIRQ+0x38>)
 800200e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002012:	095b      	lsrs	r3, r3, #5
 8002014:	2001      	movs	r0, #1
 8002016:	fa00 f202 	lsl.w	r2, r0, r2
 800201a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800201e:	bf00      	nop
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	e000e100 	.word	0xe000e100

08002030 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800203a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203e:	2b00      	cmp	r3, #0
 8002040:	db12      	blt.n	8002068 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002042:	79fb      	ldrb	r3, [r7, #7]
 8002044:	f003 021f 	and.w	r2, r3, #31
 8002048:	490a      	ldr	r1, [pc, #40]	; (8002074 <__NVIC_DisableIRQ+0x44>)
 800204a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204e:	095b      	lsrs	r3, r3, #5
 8002050:	2001      	movs	r0, #1
 8002052:	fa00 f202 	lsl.w	r2, r0, r2
 8002056:	3320      	adds	r3, #32
 8002058:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800205c:	f3bf 8f4f 	dsb	sy
}
 8002060:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002062:	f3bf 8f6f 	isb	sy
}
 8002066:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	e000e100 	.word	0xe000e100

08002078 <Sleep>:
/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void
Sleep(uint32_t x)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f001 faa3 	bl	80035cc <HAL_Delay>
}
 8002086:	bf00      	nop
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
	...

08002090 <EXTI_GetITEnStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The "enable" state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITEnStatus(uint32_t x)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
    return ((NVIC->ISER[(((uint32_t)x) >> 5UL)] &\
 8002098:	4a0b      	ldr	r2, [pc, #44]	; (80020c8 <EXTI_GetITEnStatus+0x38>)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	095b      	lsrs	r3, r3, #5
 800209e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            (uint32_t)(1UL << (((uint32_t)x) & 0x1FUL)) ) == (uint32_t)RESET)?(RESET):(SET);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f003 031f 	and.w	r3, r3, #31
 80020a8:	fa22 f303 	lsr.w	r3, r2, r3
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	bf14      	ite	ne
 80020b4:	2301      	movne	r3, #1
 80020b6:	2300      	moveq	r3, #0
 80020b8:	b2db      	uxtb	r3, r3
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	e000e100 	.word	0xe000e100

080020cc <reset_DW1000>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW1000 by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DW1000(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef    GPIO_InitStruct;

    // Enable GPIO used for DW1000 reset as open collector output
    GPIO_InitStruct.Pin = DW_RST_Pin;
 80020d2:	2301      	movs	r3, #1
 80020d4:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80020d6:	2311      	movs	r3, #17
 80020d8:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020da:	2300      	movs	r3, #0
 80020dc:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 80020de:	1d3b      	adds	r3, r7, #4
 80020e0:	4619      	mov	r1, r3
 80020e2:	480a      	ldr	r0, [pc, #40]	; (800210c <reset_DW1000+0x40>)
 80020e4:	f001 fbfc 	bl	80038e0 <HAL_GPIO_Init>

    //drive the RSTn pin low
    HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_RESET);
 80020e8:	2200      	movs	r2, #0
 80020ea:	2101      	movs	r1, #1
 80020ec:	4807      	ldr	r0, [pc, #28]	; (800210c <reset_DW1000+0x40>)
 80020ee:	f001 fd7b 	bl	8003be8 <HAL_GPIO_WritePin>

    Sleep(1);
 80020f2:	2001      	movs	r0, #1
 80020f4:	f7ff ffc0 	bl	8002078 <Sleep>

    //put the pin back to output open-drain (not active)
    setup_DW1000RSTnIRQ(0);
 80020f8:	2000      	movs	r0, #0
 80020fa:	f000 f809 	bl	8002110 <setup_DW1000RSTnIRQ>



    Sleep(2);
 80020fe:	2002      	movs	r0, #2
 8002100:	f7ff ffba 	bl	8002078 <Sleep>
}
 8002104:	bf00      	nop
 8002106:	3718      	adds	r7, #24
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40020000 	.word	0x40020000

08002110 <setup_DW1000RSTnIRQ>:
 * @brief   setup the DW_RESET pin mode
 *          0 - output Open collector mode
 *          !0 - input mode with connected EXTI0 IRQ
 * */
void setup_DW1000RSTnIRQ(int enable)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b088      	sub	sp, #32
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    if(enable)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d015      	beq.n	800214a <setup_DW1000RSTnIRQ+0x3a>
    {
        // Enable GPIO used as DECA RESET for interrupt
        GPIO_InitStruct.Pin = DW_RST_Pin;
 800211e:	2301      	movs	r3, #1
 8002120:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002122:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002126:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002128:	2300      	movs	r3, #0
 800212a:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 800212c:	f107 030c 	add.w	r3, r7, #12
 8002130:	4619      	mov	r1, r3
 8002132:	4813      	ldr	r0, [pc, #76]	; (8002180 <setup_DW1000RSTnIRQ+0x70>)
 8002134:	f001 fbd4 	bl	80038e0 <HAL_GPIO_Init>

        HAL_NVIC_EnableIRQ(EXTI0_IRQn);     //pin #0 -> EXTI #0
 8002138:	2006      	movs	r0, #6
 800213a:	f001 fb86 	bl	800384a <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800213e:	2200      	movs	r2, #0
 8002140:	2105      	movs	r1, #5
 8002142:	2006      	movs	r0, #6
 8002144:	f001 fb65 	bl	8003812 <HAL_NVIC_SetPriority>
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
        HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_SET);
    }
}
 8002148:	e015      	b.n	8002176 <setup_DW1000RSTnIRQ+0x66>
        HAL_NVIC_DisableIRQ(EXTI0_IRQn);    //pin #0 -> EXTI #0
 800214a:	2006      	movs	r0, #6
 800214c:	f001 fb8b 	bl	8003866 <HAL_NVIC_DisableIRQ>
        GPIO_InitStruct.Pin = DW_RST_Pin;
 8002150:	2301      	movs	r3, #1
 8002152:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002154:	2311      	movs	r3, #17
 8002156:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002158:	2300      	movs	r3, #0
 800215a:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800215c:	2302      	movs	r3, #2
 800215e:	61bb      	str	r3, [r7, #24]
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 8002160:	f107 030c 	add.w	r3, r7, #12
 8002164:	4619      	mov	r1, r3
 8002166:	4806      	ldr	r0, [pc, #24]	; (8002180 <setup_DW1000RSTnIRQ+0x70>)
 8002168:	f001 fbba 	bl	80038e0 <HAL_GPIO_Init>
        HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_SET);
 800216c:	2201      	movs	r2, #1
 800216e:	2101      	movs	r1, #1
 8002170:	4803      	ldr	r0, [pc, #12]	; (8002180 <setup_DW1000RSTnIRQ+0x70>)
 8002172:	f001 fd39 	bl	8003be8 <HAL_GPIO_WritePin>
}
 8002176:	bf00      	nop
 8002178:	3720      	adds	r7, #32
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	40020000 	.word	0x40020000

08002184 <port_set_dw1000_slowrate>:
/* @fn      port_set_dw1000_slowrate
 * @brief   set 2.25MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_slowrate(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002188:	4b03      	ldr	r3, [pc, #12]	; (8002198 <port_set_dw1000_slowrate+0x14>)
 800218a:	2220      	movs	r2, #32
 800218c:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 800218e:	4802      	ldr	r0, [pc, #8]	; (8002198 <port_set_dw1000_slowrate+0x14>)
 8002190:	f002 ff06 	bl	8004fa0 <HAL_SPI_Init>
}
 8002194:	bf00      	nop
 8002196:	bd80      	pop	{r7, pc}
 8002198:	2000075c 	.word	0x2000075c

0800219c <port_set_dw1000_fastrate>:
/* @fn      port_set_dw1000_fastrate
 * @brief   set 18MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_fastrate(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80021a0:	4b03      	ldr	r3, [pc, #12]	; (80021b0 <port_set_dw1000_fastrate+0x14>)
 80021a2:	2208      	movs	r2, #8
 80021a4:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 80021a6:	4802      	ldr	r0, [pc, #8]	; (80021b0 <port_set_dw1000_fastrate+0x14>)
 80021a8:	f002 fefa 	bl	8004fa0 <HAL_SPI_Init>
}
 80021ac:	bf00      	nop
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	2000075c 	.word	0x2000075c

080021b4 <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
    NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 80021b8:	2017      	movs	r0, #23
 80021ba:	f7ff ff39 	bl	8002030 <__NVIC_DisableIRQ>
}
 80021be:	bf00      	nop
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	af00      	add	r7, sp, #0
    NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 80021c6:	2017      	movs	r0, #23
 80021c8:	f7ff ff14 	bl	8001ff4 <__NVIC_EnableIRQ>
}
 80021cc:	bf00      	nop
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
    return EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 80021d4:	2017      	movs	r0, #23
 80021d6:	f7ff ff5b 	bl	8002090 <EXTI_GetITEnStatus>
 80021da:	4603      	mov	r3, r0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	bd80      	pop	{r7, pc}

080021e0 <SSD1306_InvertDisplay>:
}



void SSD1306_InvertDisplay (int i)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  if (i) SSD1306_WRITECOMMAND (SSD1306_INVERTDISPLAY);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d005      	beq.n	80021fa <SSD1306_InvertDisplay+0x1a>
 80021ee:	22a7      	movs	r2, #167	; 0xa7
 80021f0:	2100      	movs	r1, #0
 80021f2:	2078      	movs	r0, #120	; 0x78
 80021f4:	f000 fa96 	bl	8002724 <ssd1306_I2C_Write>

  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);

}
 80021f8:	e004      	b.n	8002204 <SSD1306_InvertDisplay+0x24>
  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);
 80021fa:	22a6      	movs	r2, #166	; 0xa6
 80021fc:	2100      	movs	r1, #0
 80021fe:	2078      	movs	r0, #120	; 0x78
 8002200:	f000 fa90 	bl	8002724 <ssd1306_I2C_Write>
}
 8002204:	bf00      	nop
 8002206:	3708      	adds	r7, #8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8002212:	f000 fa29 	bl	8002668 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8002216:	f644 6320 	movw	r3, #20000	; 0x4e20
 800221a:	2201      	movs	r2, #1
 800221c:	2178      	movs	r1, #120	; 0x78
 800221e:	485b      	ldr	r0, [pc, #364]	; (800238c <SSD1306_Init+0x180>)
 8002220:	f001 ff3e 	bl	80040a0 <HAL_I2C_IsDeviceReady>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800222a:	2300      	movs	r3, #0
 800222c:	e0a9      	b.n	8002382 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800222e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8002232:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002234:	e002      	b.n	800223c <SSD1306_Init+0x30>
		p--;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	3b01      	subs	r3, #1
 800223a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1f9      	bne.n	8002236 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8002242:	22ae      	movs	r2, #174	; 0xae
 8002244:	2100      	movs	r1, #0
 8002246:	2078      	movs	r0, #120	; 0x78
 8002248:	f000 fa6c 	bl	8002724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 800224c:	2220      	movs	r2, #32
 800224e:	2100      	movs	r1, #0
 8002250:	2078      	movs	r0, #120	; 0x78
 8002252:	f000 fa67 	bl	8002724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002256:	2210      	movs	r2, #16
 8002258:	2100      	movs	r1, #0
 800225a:	2078      	movs	r0, #120	; 0x78
 800225c:	f000 fa62 	bl	8002724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002260:	22b0      	movs	r2, #176	; 0xb0
 8002262:	2100      	movs	r1, #0
 8002264:	2078      	movs	r0, #120	; 0x78
 8002266:	f000 fa5d 	bl	8002724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800226a:	22c8      	movs	r2, #200	; 0xc8
 800226c:	2100      	movs	r1, #0
 800226e:	2078      	movs	r0, #120	; 0x78
 8002270:	f000 fa58 	bl	8002724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002274:	2200      	movs	r2, #0
 8002276:	2100      	movs	r1, #0
 8002278:	2078      	movs	r0, #120	; 0x78
 800227a:	f000 fa53 	bl	8002724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800227e:	2210      	movs	r2, #16
 8002280:	2100      	movs	r1, #0
 8002282:	2078      	movs	r0, #120	; 0x78
 8002284:	f000 fa4e 	bl	8002724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002288:	2240      	movs	r2, #64	; 0x40
 800228a:	2100      	movs	r1, #0
 800228c:	2078      	movs	r0, #120	; 0x78
 800228e:	f000 fa49 	bl	8002724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8002292:	2281      	movs	r2, #129	; 0x81
 8002294:	2100      	movs	r1, #0
 8002296:	2078      	movs	r0, #120	; 0x78
 8002298:	f000 fa44 	bl	8002724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800229c:	22ff      	movs	r2, #255	; 0xff
 800229e:	2100      	movs	r1, #0
 80022a0:	2078      	movs	r0, #120	; 0x78
 80022a2:	f000 fa3f 	bl	8002724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80022a6:	22a1      	movs	r2, #161	; 0xa1
 80022a8:	2100      	movs	r1, #0
 80022aa:	2078      	movs	r0, #120	; 0x78
 80022ac:	f000 fa3a 	bl	8002724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80022b0:	22a6      	movs	r2, #166	; 0xa6
 80022b2:	2100      	movs	r1, #0
 80022b4:	2078      	movs	r0, #120	; 0x78
 80022b6:	f000 fa35 	bl	8002724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80022ba:	22a8      	movs	r2, #168	; 0xa8
 80022bc:	2100      	movs	r1, #0
 80022be:	2078      	movs	r0, #120	; 0x78
 80022c0:	f000 fa30 	bl	8002724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80022c4:	223f      	movs	r2, #63	; 0x3f
 80022c6:	2100      	movs	r1, #0
 80022c8:	2078      	movs	r0, #120	; 0x78
 80022ca:	f000 fa2b 	bl	8002724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80022ce:	22a4      	movs	r2, #164	; 0xa4
 80022d0:	2100      	movs	r1, #0
 80022d2:	2078      	movs	r0, #120	; 0x78
 80022d4:	f000 fa26 	bl	8002724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80022d8:	22d3      	movs	r2, #211	; 0xd3
 80022da:	2100      	movs	r1, #0
 80022dc:	2078      	movs	r0, #120	; 0x78
 80022de:	f000 fa21 	bl	8002724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80022e2:	2200      	movs	r2, #0
 80022e4:	2100      	movs	r1, #0
 80022e6:	2078      	movs	r0, #120	; 0x78
 80022e8:	f000 fa1c 	bl	8002724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80022ec:	22d5      	movs	r2, #213	; 0xd5
 80022ee:	2100      	movs	r1, #0
 80022f0:	2078      	movs	r0, #120	; 0x78
 80022f2:	f000 fa17 	bl	8002724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80022f6:	22f0      	movs	r2, #240	; 0xf0
 80022f8:	2100      	movs	r1, #0
 80022fa:	2078      	movs	r0, #120	; 0x78
 80022fc:	f000 fa12 	bl	8002724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002300:	22d9      	movs	r2, #217	; 0xd9
 8002302:	2100      	movs	r1, #0
 8002304:	2078      	movs	r0, #120	; 0x78
 8002306:	f000 fa0d 	bl	8002724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800230a:	2222      	movs	r2, #34	; 0x22
 800230c:	2100      	movs	r1, #0
 800230e:	2078      	movs	r0, #120	; 0x78
 8002310:	f000 fa08 	bl	8002724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002314:	22da      	movs	r2, #218	; 0xda
 8002316:	2100      	movs	r1, #0
 8002318:	2078      	movs	r0, #120	; 0x78
 800231a:	f000 fa03 	bl	8002724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800231e:	2212      	movs	r2, #18
 8002320:	2100      	movs	r1, #0
 8002322:	2078      	movs	r0, #120	; 0x78
 8002324:	f000 f9fe 	bl	8002724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002328:	22db      	movs	r2, #219	; 0xdb
 800232a:	2100      	movs	r1, #0
 800232c:	2078      	movs	r0, #120	; 0x78
 800232e:	f000 f9f9 	bl	8002724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8002332:	2220      	movs	r2, #32
 8002334:	2100      	movs	r1, #0
 8002336:	2078      	movs	r0, #120	; 0x78
 8002338:	f000 f9f4 	bl	8002724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800233c:	228d      	movs	r2, #141	; 0x8d
 800233e:	2100      	movs	r1, #0
 8002340:	2078      	movs	r0, #120	; 0x78
 8002342:	f000 f9ef 	bl	8002724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8002346:	2214      	movs	r2, #20
 8002348:	2100      	movs	r1, #0
 800234a:	2078      	movs	r0, #120	; 0x78
 800234c:	f000 f9ea 	bl	8002724 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002350:	22af      	movs	r2, #175	; 0xaf
 8002352:	2100      	movs	r1, #0
 8002354:	2078      	movs	r0, #120	; 0x78
 8002356:	f000 f9e5 	bl	8002724 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800235a:	222e      	movs	r2, #46	; 0x2e
 800235c:	2100      	movs	r1, #0
 800235e:	2078      	movs	r0, #120	; 0x78
 8002360:	f000 f9e0 	bl	8002724 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002364:	2000      	movs	r0, #0
 8002366:	f000 f843 	bl	80023f0 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800236a:	f000 f813 	bl	8002394 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800236e:	4b08      	ldr	r3, [pc, #32]	; (8002390 <SSD1306_Init+0x184>)
 8002370:	2200      	movs	r2, #0
 8002372:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002374:	4b06      	ldr	r3, [pc, #24]	; (8002390 <SSD1306_Init+0x184>)
 8002376:	2200      	movs	r2, #0
 8002378:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800237a:	4b05      	ldr	r3, [pc, #20]	; (8002390 <SSD1306_Init+0x184>)
 800237c:	2201      	movs	r2, #1
 800237e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8002380:	2301      	movs	r3, #1
}
 8002382:	4618      	mov	r0, r3
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	20000708 	.word	0x20000708
 8002390:	2000069c 	.word	0x2000069c

08002394 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800239a:	2300      	movs	r3, #0
 800239c:	71fb      	strb	r3, [r7, #7]
 800239e:	e01d      	b.n	80023dc <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80023a0:	79fb      	ldrb	r3, [r7, #7]
 80023a2:	3b50      	subs	r3, #80	; 0x50
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	461a      	mov	r2, r3
 80023a8:	2100      	movs	r1, #0
 80023aa:	2078      	movs	r0, #120	; 0x78
 80023ac:	f000 f9ba 	bl	8002724 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80023b0:	2200      	movs	r2, #0
 80023b2:	2100      	movs	r1, #0
 80023b4:	2078      	movs	r0, #120	; 0x78
 80023b6:	f000 f9b5 	bl	8002724 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80023ba:	2210      	movs	r2, #16
 80023bc:	2100      	movs	r1, #0
 80023be:	2078      	movs	r0, #120	; 0x78
 80023c0:	f000 f9b0 	bl	8002724 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80023c4:	79fb      	ldrb	r3, [r7, #7]
 80023c6:	01db      	lsls	r3, r3, #7
 80023c8:	4a08      	ldr	r2, [pc, #32]	; (80023ec <SSD1306_UpdateScreen+0x58>)
 80023ca:	441a      	add	r2, r3
 80023cc:	2380      	movs	r3, #128	; 0x80
 80023ce:	2140      	movs	r1, #64	; 0x40
 80023d0:	2078      	movs	r0, #120	; 0x78
 80023d2:	f000 f95f 	bl	8002694 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80023d6:	79fb      	ldrb	r3, [r7, #7]
 80023d8:	3301      	adds	r3, #1
 80023da:	71fb      	strb	r3, [r7, #7]
 80023dc:	79fb      	ldrb	r3, [r7, #7]
 80023de:	2b07      	cmp	r3, #7
 80023e0:	d9de      	bls.n	80023a0 <SSD1306_UpdateScreen+0xc>
	}
}
 80023e2:	bf00      	nop
 80023e4:	bf00      	nop
 80023e6:	3708      	adds	r7, #8
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	2000029c 	.word	0x2000029c

080023f0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80023fa:	79fb      	ldrb	r3, [r7, #7]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d101      	bne.n	8002404 <SSD1306_Fill+0x14>
 8002400:	2300      	movs	r3, #0
 8002402:	e000      	b.n	8002406 <SSD1306_Fill+0x16>
 8002404:	23ff      	movs	r3, #255	; 0xff
 8002406:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800240a:	4619      	mov	r1, r3
 800240c:	4803      	ldr	r0, [pc, #12]	; (800241c <SSD1306_Fill+0x2c>)
 800240e:	f003 fcd1 	bl	8005db4 <memset>
}
 8002412:	bf00      	nop
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	2000029c 	.word	0x2000029c

08002420 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	80fb      	strh	r3, [r7, #6]
 800242a:	460b      	mov	r3, r1
 800242c:	80bb      	strh	r3, [r7, #4]
 800242e:	4613      	mov	r3, r2
 8002430:	70fb      	strb	r3, [r7, #3]
	if (
 8002432:	88fb      	ldrh	r3, [r7, #6]
 8002434:	2b7f      	cmp	r3, #127	; 0x7f
 8002436:	d848      	bhi.n	80024ca <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002438:	88bb      	ldrh	r3, [r7, #4]
 800243a:	2b3f      	cmp	r3, #63	; 0x3f
 800243c:	d845      	bhi.n	80024ca <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800243e:	4b26      	ldr	r3, [pc, #152]	; (80024d8 <SSD1306_DrawPixel+0xb8>)
 8002440:	791b      	ldrb	r3, [r3, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d006      	beq.n	8002454 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8002446:	78fb      	ldrb	r3, [r7, #3]
 8002448:	2b00      	cmp	r3, #0
 800244a:	bf0c      	ite	eq
 800244c:	2301      	moveq	r3, #1
 800244e:	2300      	movne	r3, #0
 8002450:	b2db      	uxtb	r3, r3
 8002452:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002454:	78fb      	ldrb	r3, [r7, #3]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d11a      	bne.n	8002490 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800245a:	88fa      	ldrh	r2, [r7, #6]
 800245c:	88bb      	ldrh	r3, [r7, #4]
 800245e:	08db      	lsrs	r3, r3, #3
 8002460:	b298      	uxth	r0, r3
 8002462:	4603      	mov	r3, r0
 8002464:	01db      	lsls	r3, r3, #7
 8002466:	4413      	add	r3, r2
 8002468:	4a1c      	ldr	r2, [pc, #112]	; (80024dc <SSD1306_DrawPixel+0xbc>)
 800246a:	5cd3      	ldrb	r3, [r2, r3]
 800246c:	b25a      	sxtb	r2, r3
 800246e:	88bb      	ldrh	r3, [r7, #4]
 8002470:	f003 0307 	and.w	r3, r3, #7
 8002474:	2101      	movs	r1, #1
 8002476:	fa01 f303 	lsl.w	r3, r1, r3
 800247a:	b25b      	sxtb	r3, r3
 800247c:	4313      	orrs	r3, r2
 800247e:	b259      	sxtb	r1, r3
 8002480:	88fa      	ldrh	r2, [r7, #6]
 8002482:	4603      	mov	r3, r0
 8002484:	01db      	lsls	r3, r3, #7
 8002486:	4413      	add	r3, r2
 8002488:	b2c9      	uxtb	r1, r1
 800248a:	4a14      	ldr	r2, [pc, #80]	; (80024dc <SSD1306_DrawPixel+0xbc>)
 800248c:	54d1      	strb	r1, [r2, r3]
 800248e:	e01d      	b.n	80024cc <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002490:	88fa      	ldrh	r2, [r7, #6]
 8002492:	88bb      	ldrh	r3, [r7, #4]
 8002494:	08db      	lsrs	r3, r3, #3
 8002496:	b298      	uxth	r0, r3
 8002498:	4603      	mov	r3, r0
 800249a:	01db      	lsls	r3, r3, #7
 800249c:	4413      	add	r3, r2
 800249e:	4a0f      	ldr	r2, [pc, #60]	; (80024dc <SSD1306_DrawPixel+0xbc>)
 80024a0:	5cd3      	ldrb	r3, [r2, r3]
 80024a2:	b25a      	sxtb	r2, r3
 80024a4:	88bb      	ldrh	r3, [r7, #4]
 80024a6:	f003 0307 	and.w	r3, r3, #7
 80024aa:	2101      	movs	r1, #1
 80024ac:	fa01 f303 	lsl.w	r3, r1, r3
 80024b0:	b25b      	sxtb	r3, r3
 80024b2:	43db      	mvns	r3, r3
 80024b4:	b25b      	sxtb	r3, r3
 80024b6:	4013      	ands	r3, r2
 80024b8:	b259      	sxtb	r1, r3
 80024ba:	88fa      	ldrh	r2, [r7, #6]
 80024bc:	4603      	mov	r3, r0
 80024be:	01db      	lsls	r3, r3, #7
 80024c0:	4413      	add	r3, r2
 80024c2:	b2c9      	uxtb	r1, r1
 80024c4:	4a05      	ldr	r2, [pc, #20]	; (80024dc <SSD1306_DrawPixel+0xbc>)
 80024c6:	54d1      	strb	r1, [r2, r3]
 80024c8:	e000      	b.n	80024cc <SSD1306_DrawPixel+0xac>
		return;
 80024ca:	bf00      	nop
	}
}
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	2000069c 	.word	0x2000069c
 80024dc:	2000029c 	.word	0x2000029c

080024e0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	4603      	mov	r3, r0
 80024e8:	460a      	mov	r2, r1
 80024ea:	80fb      	strh	r3, [r7, #6]
 80024ec:	4613      	mov	r3, r2
 80024ee:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80024f0:	4a05      	ldr	r2, [pc, #20]	; (8002508 <SSD1306_GotoXY+0x28>)
 80024f2:	88fb      	ldrh	r3, [r7, #6]
 80024f4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80024f6:	4a04      	ldr	r2, [pc, #16]	; (8002508 <SSD1306_GotoXY+0x28>)
 80024f8:	88bb      	ldrh	r3, [r7, #4]
 80024fa:	8053      	strh	r3, [r2, #2]
}
 80024fc:	bf00      	nop
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr
 8002508:	2000069c 	.word	0x2000069c

0800250c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800250c:	b580      	push	{r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af00      	add	r7, sp, #0
 8002512:	4603      	mov	r3, r0
 8002514:	6039      	str	r1, [r7, #0]
 8002516:	71fb      	strb	r3, [r7, #7]
 8002518:	4613      	mov	r3, r2
 800251a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800251c:	4b3a      	ldr	r3, [pc, #232]	; (8002608 <SSD1306_Putc+0xfc>)
 800251e:	881b      	ldrh	r3, [r3, #0]
 8002520:	461a      	mov	r2, r3
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	4413      	add	r3, r2
	if (
 8002528:	2b7f      	cmp	r3, #127	; 0x7f
 800252a:	dc07      	bgt.n	800253c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800252c:	4b36      	ldr	r3, [pc, #216]	; (8002608 <SSD1306_Putc+0xfc>)
 800252e:	885b      	ldrh	r3, [r3, #2]
 8002530:	461a      	mov	r2, r3
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	785b      	ldrb	r3, [r3, #1]
 8002536:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002538:	2b3f      	cmp	r3, #63	; 0x3f
 800253a:	dd01      	ble.n	8002540 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800253c:	2300      	movs	r3, #0
 800253e:	e05e      	b.n	80025fe <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002540:	2300      	movs	r3, #0
 8002542:	617b      	str	r3, [r7, #20]
 8002544:	e04b      	b.n	80025de <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685a      	ldr	r2, [r3, #4]
 800254a:	79fb      	ldrb	r3, [r7, #7]
 800254c:	3b20      	subs	r3, #32
 800254e:	6839      	ldr	r1, [r7, #0]
 8002550:	7849      	ldrb	r1, [r1, #1]
 8002552:	fb01 f303 	mul.w	r3, r1, r3
 8002556:	4619      	mov	r1, r3
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	440b      	add	r3, r1
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	4413      	add	r3, r2
 8002560:	881b      	ldrh	r3, [r3, #0]
 8002562:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8002564:	2300      	movs	r3, #0
 8002566:	613b      	str	r3, [r7, #16]
 8002568:	e030      	b.n	80025cc <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d010      	beq.n	800259c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800257a:	4b23      	ldr	r3, [pc, #140]	; (8002608 <SSD1306_Putc+0xfc>)
 800257c:	881a      	ldrh	r2, [r3, #0]
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	b29b      	uxth	r3, r3
 8002582:	4413      	add	r3, r2
 8002584:	b298      	uxth	r0, r3
 8002586:	4b20      	ldr	r3, [pc, #128]	; (8002608 <SSD1306_Putc+0xfc>)
 8002588:	885a      	ldrh	r2, [r3, #2]
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	b29b      	uxth	r3, r3
 800258e:	4413      	add	r3, r2
 8002590:	b29b      	uxth	r3, r3
 8002592:	79ba      	ldrb	r2, [r7, #6]
 8002594:	4619      	mov	r1, r3
 8002596:	f7ff ff43 	bl	8002420 <SSD1306_DrawPixel>
 800259a:	e014      	b.n	80025c6 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800259c:	4b1a      	ldr	r3, [pc, #104]	; (8002608 <SSD1306_Putc+0xfc>)
 800259e:	881a      	ldrh	r2, [r3, #0]
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	4413      	add	r3, r2
 80025a6:	b298      	uxth	r0, r3
 80025a8:	4b17      	ldr	r3, [pc, #92]	; (8002608 <SSD1306_Putc+0xfc>)
 80025aa:	885a      	ldrh	r2, [r3, #2]
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	4413      	add	r3, r2
 80025b2:	b299      	uxth	r1, r3
 80025b4:	79bb      	ldrb	r3, [r7, #6]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	bf0c      	ite	eq
 80025ba:	2301      	moveq	r3, #1
 80025bc:	2300      	movne	r3, #0
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	461a      	mov	r2, r3
 80025c2:	f7ff ff2d 	bl	8002420 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	3301      	adds	r3, #1
 80025ca:	613b      	str	r3, [r7, #16]
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	461a      	mov	r2, r3
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d3c8      	bcc.n	800256a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	3301      	adds	r3, #1
 80025dc:	617b      	str	r3, [r7, #20]
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	785b      	ldrb	r3, [r3, #1]
 80025e2:	461a      	mov	r2, r3
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d3ad      	bcc.n	8002546 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80025ea:	4b07      	ldr	r3, [pc, #28]	; (8002608 <SSD1306_Putc+0xfc>)
 80025ec:	881a      	ldrh	r2, [r3, #0]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	4413      	add	r3, r2
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	4b03      	ldr	r3, [pc, #12]	; (8002608 <SSD1306_Putc+0xfc>)
 80025fa:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80025fc:	79fb      	ldrb	r3, [r7, #7]
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3718      	adds	r7, #24
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	2000069c 	.word	0x2000069c

0800260c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	4613      	mov	r3, r2
 8002618:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800261a:	e012      	b.n	8002642 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	79fa      	ldrb	r2, [r7, #7]
 8002622:	68b9      	ldr	r1, [r7, #8]
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff ff71 	bl	800250c <SSD1306_Putc>
 800262a:	4603      	mov	r3, r0
 800262c:	461a      	mov	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	429a      	cmp	r2, r3
 8002634:	d002      	beq.n	800263c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	e008      	b.n	800264e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	3301      	adds	r3, #1
 8002640:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1e8      	bne.n	800261c <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	781b      	ldrb	r3, [r3, #0]
}
 800264e:	4618      	mov	r0, r3
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800265a:	2000      	movs	r0, #0
 800265c:	f7ff fec8 	bl	80023f0 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8002660:	f7ff fe98 	bl	8002394 <SSD1306_UpdateScreen>
}
 8002664:	bf00      	nop
 8002666:	bd80      	pop	{r7, pc}

08002668 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800266e:	4b08      	ldr	r3, [pc, #32]	; (8002690 <ssd1306_I2C_Init+0x28>)
 8002670:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002672:	e002      	b.n	800267a <ssd1306_I2C_Init+0x12>
		p--;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	3b01      	subs	r3, #1
 8002678:	607b      	str	r3, [r7, #4]
	while(p>0)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1f9      	bne.n	8002674 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002680:	bf00      	nop
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	0003d090 	.word	0x0003d090

08002694 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002694:	b590      	push	{r4, r7, lr}
 8002696:	b0c7      	sub	sp, #284	; 0x11c
 8002698:	af02      	add	r7, sp, #8
 800269a:	4604      	mov	r4, r0
 800269c:	4608      	mov	r0, r1
 800269e:	4639      	mov	r1, r7
 80026a0:	600a      	str	r2, [r1, #0]
 80026a2:	4619      	mov	r1, r3
 80026a4:	1dfb      	adds	r3, r7, #7
 80026a6:	4622      	mov	r2, r4
 80026a8:	701a      	strb	r2, [r3, #0]
 80026aa:	1dbb      	adds	r3, r7, #6
 80026ac:	4602      	mov	r2, r0
 80026ae:	701a      	strb	r2, [r3, #0]
 80026b0:	1d3b      	adds	r3, r7, #4
 80026b2:	460a      	mov	r2, r1
 80026b4:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80026b6:	f107 030c 	add.w	r3, r7, #12
 80026ba:	1dba      	adds	r2, r7, #6
 80026bc:	7812      	ldrb	r2, [r2, #0]
 80026be:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80026c0:	2300      	movs	r3, #0
 80026c2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80026c6:	e010      	b.n	80026ea <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 80026c8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80026cc:	463a      	mov	r2, r7
 80026ce:	6812      	ldr	r2, [r2, #0]
 80026d0:	441a      	add	r2, r3
 80026d2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80026d6:	3301      	adds	r3, #1
 80026d8:	7811      	ldrb	r1, [r2, #0]
 80026da:	f107 020c 	add.w	r2, r7, #12
 80026de:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80026e0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80026e4:	3301      	adds	r3, #1
 80026e6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80026ea:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	1d3a      	adds	r2, r7, #4
 80026f2:	8812      	ldrh	r2, [r2, #0]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d8e7      	bhi.n	80026c8 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80026f8:	1dfb      	adds	r3, r7, #7
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	b299      	uxth	r1, r3
 80026fe:	1d3b      	adds	r3, r7, #4
 8002700:	881b      	ldrh	r3, [r3, #0]
 8002702:	3301      	adds	r3, #1
 8002704:	b29b      	uxth	r3, r3
 8002706:	f107 020c 	add.w	r2, r7, #12
 800270a:	200a      	movs	r0, #10
 800270c:	9000      	str	r0, [sp, #0]
 800270e:	4804      	ldr	r0, [pc, #16]	; (8002720 <ssd1306_I2C_WriteMulti+0x8c>)
 8002710:	f001 fbc8 	bl	8003ea4 <HAL_I2C_Master_Transmit>
}
 8002714:	bf00      	nop
 8002716:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800271a:	46bd      	mov	sp, r7
 800271c:	bd90      	pop	{r4, r7, pc}
 800271e:	bf00      	nop
 8002720:	20000708 	.word	0x20000708

08002724 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af02      	add	r7, sp, #8
 800272a:	4603      	mov	r3, r0
 800272c:	71fb      	strb	r3, [r7, #7]
 800272e:	460b      	mov	r3, r1
 8002730:	71bb      	strb	r3, [r7, #6]
 8002732:	4613      	mov	r3, r2
 8002734:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8002736:	79bb      	ldrb	r3, [r7, #6]
 8002738:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800273a:	797b      	ldrb	r3, [r7, #5]
 800273c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800273e:	79fb      	ldrb	r3, [r7, #7]
 8002740:	b299      	uxth	r1, r3
 8002742:	f107 020c 	add.w	r2, r7, #12
 8002746:	230a      	movs	r3, #10
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	2302      	movs	r3, #2
 800274c:	4803      	ldr	r0, [pc, #12]	; (800275c <ssd1306_I2C_Write+0x38>)
 800274e:	f001 fba9 	bl	8003ea4 <HAL_I2C_Master_Transmit>
}
 8002752:	bf00      	nop
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	20000708 	.word	0x20000708

08002760 <ssd1306_write>:

void ssd1306_write(uint32_t buff, FontDef_t Font)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	1d3b      	adds	r3, r7, #4
 800276a:	e883 0006 	stmia.w	r3, {r1, r2}
//	SSD1306_Clear ();
//	SSD1306_Fill(SSD1306_COLOR_BLACK);
	SSD1306_Puts(buff, &Font, 1);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	1d39      	adds	r1, r7, #4
 8002772:	2201      	movs	r2, #1
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff ff49 	bl	800260c <SSD1306_Puts>
	SSD1306_UpdateScreen();
 800277a:	f7ff fe0b 	bl	8002394 <SSD1306_UpdateScreen>
}
 800277e:	bf00      	nop
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
	...

08002788 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b08a      	sub	sp, #40	; 0x28
 800278c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800278e:	f107 0314 	add.w	r3, r7, #20
 8002792:	2200      	movs	r2, #0
 8002794:	601a      	str	r2, [r3, #0]
 8002796:	605a      	str	r2, [r3, #4]
 8002798:	609a      	str	r2, [r3, #8]
 800279a:	60da      	str	r2, [r3, #12]
 800279c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800279e:	2300      	movs	r3, #0
 80027a0:	613b      	str	r3, [r7, #16]
 80027a2:	4b30      	ldr	r3, [pc, #192]	; (8002864 <MX_GPIO_Init+0xdc>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	4a2f      	ldr	r2, [pc, #188]	; (8002864 <MX_GPIO_Init+0xdc>)
 80027a8:	f043 0304 	orr.w	r3, r3, #4
 80027ac:	6313      	str	r3, [r2, #48]	; 0x30
 80027ae:	4b2d      	ldr	r3, [pc, #180]	; (8002864 <MX_GPIO_Init+0xdc>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	f003 0304 	and.w	r3, r3, #4
 80027b6:	613b      	str	r3, [r7, #16]
 80027b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80027ba:	2300      	movs	r3, #0
 80027bc:	60fb      	str	r3, [r7, #12]
 80027be:	4b29      	ldr	r3, [pc, #164]	; (8002864 <MX_GPIO_Init+0xdc>)
 80027c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c2:	4a28      	ldr	r2, [pc, #160]	; (8002864 <MX_GPIO_Init+0xdc>)
 80027c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027c8:	6313      	str	r3, [r2, #48]	; 0x30
 80027ca:	4b26      	ldr	r3, [pc, #152]	; (8002864 <MX_GPIO_Init+0xdc>)
 80027cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027d2:	60fb      	str	r3, [r7, #12]
 80027d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027d6:	2300      	movs	r3, #0
 80027d8:	60bb      	str	r3, [r7, #8]
 80027da:	4b22      	ldr	r3, [pc, #136]	; (8002864 <MX_GPIO_Init+0xdc>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	4a21      	ldr	r2, [pc, #132]	; (8002864 <MX_GPIO_Init+0xdc>)
 80027e0:	f043 0301 	orr.w	r3, r3, #1
 80027e4:	6313      	str	r3, [r2, #48]	; 0x30
 80027e6:	4b1f      	ldr	r3, [pc, #124]	; (8002864 <MX_GPIO_Init+0xdc>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	60bb      	str	r3, [r7, #8]
 80027f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027f2:	2300      	movs	r3, #0
 80027f4:	607b      	str	r3, [r7, #4]
 80027f6:	4b1b      	ldr	r3, [pc, #108]	; (8002864 <MX_GPIO_Init+0xdc>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fa:	4a1a      	ldr	r2, [pc, #104]	; (8002864 <MX_GPIO_Init+0xdc>)
 80027fc:	f043 0302 	orr.w	r3, r3, #2
 8002800:	6313      	str	r3, [r2, #48]	; 0x30
 8002802:	4b18      	ldr	r3, [pc, #96]	; (8002864 <MX_GPIO_Init+0xdc>)
 8002804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	607b      	str	r3, [r7, #4]
 800280c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DW_RST_Pin|DW_IRQ_Pin, GPIO_PIN_RESET);
 800280e:	2200      	movs	r2, #0
 8002810:	2103      	movs	r1, #3
 8002812:	4815      	ldr	r0, [pc, #84]	; (8002868 <MX_GPIO_Init+0xe0>)
 8002814:	f001 f9e8 	bl	8003be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET);
 8002818:	2200      	movs	r2, #0
 800281a:	2140      	movs	r1, #64	; 0x40
 800281c:	4813      	ldr	r0, [pc, #76]	; (800286c <MX_GPIO_Init+0xe4>)
 800281e:	f001 f9e3 	bl	8003be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DW_RST_Pin|DW_IRQ_Pin;
 8002822:	2303      	movs	r3, #3
 8002824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002826:	2301      	movs	r3, #1
 8002828:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282a:	2300      	movs	r3, #0
 800282c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800282e:	2300      	movs	r3, #0
 8002830:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002832:	f107 0314 	add.w	r3, r7, #20
 8002836:	4619      	mov	r1, r3
 8002838:	480b      	ldr	r0, [pc, #44]	; (8002868 <MX_GPIO_Init+0xe0>)
 800283a:	f001 f851 	bl	80038e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DW_CS_Pin;
 800283e:	2340      	movs	r3, #64	; 0x40
 8002840:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002842:	2301      	movs	r3, #1
 8002844:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002846:	2300      	movs	r3, #0
 8002848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800284a:	2300      	movs	r3, #0
 800284c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DW_CS_GPIO_Port, &GPIO_InitStruct);
 800284e:	f107 0314 	add.w	r3, r7, #20
 8002852:	4619      	mov	r1, r3
 8002854:	4805      	ldr	r0, [pc, #20]	; (800286c <MX_GPIO_Init+0xe4>)
 8002856:	f001 f843 	bl	80038e0 <HAL_GPIO_Init>

}
 800285a:	bf00      	nop
 800285c:	3728      	adds	r7, #40	; 0x28
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	40023800 	.word	0x40023800
 8002868:	40020000 	.word	0x40020000
 800286c:	40020400 	.word	0x40020400

08002870 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002874:	4b12      	ldr	r3, [pc, #72]	; (80028c0 <MX_I2C1_Init+0x50>)
 8002876:	4a13      	ldr	r2, [pc, #76]	; (80028c4 <MX_I2C1_Init+0x54>)
 8002878:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800287a:	4b11      	ldr	r3, [pc, #68]	; (80028c0 <MX_I2C1_Init+0x50>)
 800287c:	4a12      	ldr	r2, [pc, #72]	; (80028c8 <MX_I2C1_Init+0x58>)
 800287e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002880:	4b0f      	ldr	r3, [pc, #60]	; (80028c0 <MX_I2C1_Init+0x50>)
 8002882:	2200      	movs	r2, #0
 8002884:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002886:	4b0e      	ldr	r3, [pc, #56]	; (80028c0 <MX_I2C1_Init+0x50>)
 8002888:	2200      	movs	r2, #0
 800288a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800288c:	4b0c      	ldr	r3, [pc, #48]	; (80028c0 <MX_I2C1_Init+0x50>)
 800288e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002892:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002894:	4b0a      	ldr	r3, [pc, #40]	; (80028c0 <MX_I2C1_Init+0x50>)
 8002896:	2200      	movs	r2, #0
 8002898:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800289a:	4b09      	ldr	r3, [pc, #36]	; (80028c0 <MX_I2C1_Init+0x50>)
 800289c:	2200      	movs	r2, #0
 800289e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028a0:	4b07      	ldr	r3, [pc, #28]	; (80028c0 <MX_I2C1_Init+0x50>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028a6:	4b06      	ldr	r3, [pc, #24]	; (80028c0 <MX_I2C1_Init+0x50>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80028ac:	4804      	ldr	r0, [pc, #16]	; (80028c0 <MX_I2C1_Init+0x50>)
 80028ae:	f001 f9b5 	bl	8003c1c <HAL_I2C_Init>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80028b8:	f000 f8c4 	bl	8002a44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80028bc:	bf00      	nop
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	20000708 	.word	0x20000708
 80028c4:	40005400 	.word	0x40005400
 80028c8:	00061a80 	.word	0x00061a80

080028cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b08a      	sub	sp, #40	; 0x28
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d4:	f107 0314 	add.w	r3, r7, #20
 80028d8:	2200      	movs	r2, #0
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	605a      	str	r2, [r3, #4]
 80028de:	609a      	str	r2, [r3, #8]
 80028e0:	60da      	str	r2, [r3, #12]
 80028e2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a19      	ldr	r2, [pc, #100]	; (8002950 <HAL_I2C_MspInit+0x84>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d12c      	bne.n	8002948 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ee:	2300      	movs	r3, #0
 80028f0:	613b      	str	r3, [r7, #16]
 80028f2:	4b18      	ldr	r3, [pc, #96]	; (8002954 <HAL_I2C_MspInit+0x88>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f6:	4a17      	ldr	r2, [pc, #92]	; (8002954 <HAL_I2C_MspInit+0x88>)
 80028f8:	f043 0302 	orr.w	r3, r3, #2
 80028fc:	6313      	str	r3, [r2, #48]	; 0x30
 80028fe:	4b15      	ldr	r3, [pc, #84]	; (8002954 <HAL_I2C_MspInit+0x88>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	613b      	str	r3, [r7, #16]
 8002908:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800290a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800290e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002910:	2312      	movs	r3, #18
 8002912:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002914:	2300      	movs	r3, #0
 8002916:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002918:	2303      	movs	r3, #3
 800291a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800291c:	2304      	movs	r3, #4
 800291e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002920:	f107 0314 	add.w	r3, r7, #20
 8002924:	4619      	mov	r1, r3
 8002926:	480c      	ldr	r0, [pc, #48]	; (8002958 <HAL_I2C_MspInit+0x8c>)
 8002928:	f000 ffda 	bl	80038e0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800292c:	2300      	movs	r3, #0
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	4b08      	ldr	r3, [pc, #32]	; (8002954 <HAL_I2C_MspInit+0x88>)
 8002932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002934:	4a07      	ldr	r2, [pc, #28]	; (8002954 <HAL_I2C_MspInit+0x88>)
 8002936:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800293a:	6413      	str	r3, [r2, #64]	; 0x40
 800293c:	4b05      	ldr	r3, [pc, #20]	; (8002954 <HAL_I2C_MspInit+0x88>)
 800293e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002940:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002944:	60fb      	str	r3, [r7, #12]
 8002946:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002948:	bf00      	nop
 800294a:	3728      	adds	r7, #40	; 0x28
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40005400 	.word	0x40005400
 8002954:	40023800 	.word	0x40023800
 8002958:	40020400 	.word	0x40020400

0800295c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002960:	f000 fdc2 	bl	80034e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002964:	f000 f810 	bl	8002988 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002968:	f7ff ff0e 	bl	8002788 <MX_GPIO_Init>
  MX_SPI1_Init();
 800296c:	f000 f870 	bl	8002a50 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8002970:	f000 fd1e 	bl	80033b0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002974:	f7ff ff7c 	bl	8002870 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  setup_DW1000RSTnIRQ(0);
 8002978:	2000      	movs	r0, #0
 800297a:	f7ff fbc9 	bl	8002110 <setup_DW1000RSTnIRQ>
  SSD1306_Init();
 800297e:	f7ff fc45 	bl	800220c <SSD1306_Init>
  dw_main();
 8002982:	f000 fa21 	bl	8002dc8 <dw_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002986:	e7fe      	b.n	8002986 <main+0x2a>

08002988 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b094      	sub	sp, #80	; 0x50
 800298c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800298e:	f107 0320 	add.w	r3, r7, #32
 8002992:	2230      	movs	r2, #48	; 0x30
 8002994:	2100      	movs	r1, #0
 8002996:	4618      	mov	r0, r3
 8002998:	f003 fa0c 	bl	8005db4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800299c:	f107 030c 	add.w	r3, r7, #12
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]
 80029a4:	605a      	str	r2, [r3, #4]
 80029a6:	609a      	str	r2, [r3, #8]
 80029a8:	60da      	str	r2, [r3, #12]
 80029aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80029ac:	2300      	movs	r3, #0
 80029ae:	60bb      	str	r3, [r7, #8]
 80029b0:	4b22      	ldr	r3, [pc, #136]	; (8002a3c <SystemClock_Config+0xb4>)
 80029b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b4:	4a21      	ldr	r2, [pc, #132]	; (8002a3c <SystemClock_Config+0xb4>)
 80029b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029ba:	6413      	str	r3, [r2, #64]	; 0x40
 80029bc:	4b1f      	ldr	r3, [pc, #124]	; (8002a3c <SystemClock_Config+0xb4>)
 80029be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029c4:	60bb      	str	r3, [r7, #8]
 80029c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80029c8:	2300      	movs	r3, #0
 80029ca:	607b      	str	r3, [r7, #4]
 80029cc:	4b1c      	ldr	r3, [pc, #112]	; (8002a40 <SystemClock_Config+0xb8>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a1b      	ldr	r2, [pc, #108]	; (8002a40 <SystemClock_Config+0xb8>)
 80029d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029d6:	6013      	str	r3, [r2, #0]
 80029d8:	4b19      	ldr	r3, [pc, #100]	; (8002a40 <SystemClock_Config+0xb8>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80029e0:	607b      	str	r3, [r7, #4]
 80029e2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80029e4:	2302      	movs	r3, #2
 80029e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029e8:	2301      	movs	r3, #1
 80029ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80029ec:	2310      	movs	r3, #16
 80029ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80029f0:	2300      	movs	r3, #0
 80029f2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029f4:	f107 0320 	add.w	r3, r7, #32
 80029f8:	4618      	mov	r0, r3
 80029fa:	f001 fe89 	bl	8004710 <HAL_RCC_OscConfig>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8002a04:	f000 f81e 	bl	8002a44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a08:	230f      	movs	r3, #15
 8002a0a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a10:	2300      	movs	r3, #0
 8002a12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a14:	2300      	movs	r3, #0
 8002a16:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002a1c:	f107 030c 	add.w	r3, r7, #12
 8002a20:	2100      	movs	r1, #0
 8002a22:	4618      	mov	r0, r3
 8002a24:	f002 f8ec 	bl	8004c00 <HAL_RCC_ClockConfig>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002a2e:	f000 f809 	bl	8002a44 <Error_Handler>
  }
}
 8002a32:	bf00      	nop
 8002a34:	3750      	adds	r7, #80	; 0x50
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	40023800 	.word	0x40023800
 8002a40:	40007000 	.word	0x40007000

08002a44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002a48:	b672      	cpsid	i
}
 8002a4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a4c:	e7fe      	b.n	8002a4c <Error_Handler+0x8>
	...

08002a50 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002a54:	4b17      	ldr	r3, [pc, #92]	; (8002ab4 <MX_SPI1_Init+0x64>)
 8002a56:	4a18      	ldr	r2, [pc, #96]	; (8002ab8 <MX_SPI1_Init+0x68>)
 8002a58:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a5a:	4b16      	ldr	r3, [pc, #88]	; (8002ab4 <MX_SPI1_Init+0x64>)
 8002a5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a60:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a62:	4b14      	ldr	r3, [pc, #80]	; (8002ab4 <MX_SPI1_Init+0x64>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a68:	4b12      	ldr	r3, [pc, #72]	; (8002ab4 <MX_SPI1_Init+0x64>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a6e:	4b11      	ldr	r3, [pc, #68]	; (8002ab4 <MX_SPI1_Init+0x64>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a74:	4b0f      	ldr	r3, [pc, #60]	; (8002ab4 <MX_SPI1_Init+0x64>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a7a:	4b0e      	ldr	r3, [pc, #56]	; (8002ab4 <MX_SPI1_Init+0x64>)
 8002a7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a80:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a82:	4b0c      	ldr	r3, [pc, #48]	; (8002ab4 <MX_SPI1_Init+0x64>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a88:	4b0a      	ldr	r3, [pc, #40]	; (8002ab4 <MX_SPI1_Init+0x64>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a8e:	4b09      	ldr	r3, [pc, #36]	; (8002ab4 <MX_SPI1_Init+0x64>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a94:	4b07      	ldr	r3, [pc, #28]	; (8002ab4 <MX_SPI1_Init+0x64>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002a9a:	4b06      	ldr	r3, [pc, #24]	; (8002ab4 <MX_SPI1_Init+0x64>)
 8002a9c:	220a      	movs	r2, #10
 8002a9e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002aa0:	4804      	ldr	r0, [pc, #16]	; (8002ab4 <MX_SPI1_Init+0x64>)
 8002aa2:	f002 fa7d 	bl	8004fa0 <HAL_SPI_Init>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002aac:	f7ff ffca 	bl	8002a44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002ab0:	bf00      	nop
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	2000075c 	.word	0x2000075c
 8002ab8:	40013000 	.word	0x40013000

08002abc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b08a      	sub	sp, #40	; 0x28
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac4:	f107 0314 	add.w	r3, r7, #20
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	605a      	str	r2, [r3, #4]
 8002ace:	609a      	str	r2, [r3, #8]
 8002ad0:	60da      	str	r2, [r3, #12]
 8002ad2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a1d      	ldr	r2, [pc, #116]	; (8002b50 <HAL_SPI_MspInit+0x94>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d133      	bne.n	8002b46 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ade:	2300      	movs	r3, #0
 8002ae0:	613b      	str	r3, [r7, #16]
 8002ae2:	4b1c      	ldr	r3, [pc, #112]	; (8002b54 <HAL_SPI_MspInit+0x98>)
 8002ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae6:	4a1b      	ldr	r2, [pc, #108]	; (8002b54 <HAL_SPI_MspInit+0x98>)
 8002ae8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002aec:	6453      	str	r3, [r2, #68]	; 0x44
 8002aee:	4b19      	ldr	r3, [pc, #100]	; (8002b54 <HAL_SPI_MspInit+0x98>)
 8002af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002af6:	613b      	str	r3, [r7, #16]
 8002af8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002afa:	2300      	movs	r3, #0
 8002afc:	60fb      	str	r3, [r7, #12]
 8002afe:	4b15      	ldr	r3, [pc, #84]	; (8002b54 <HAL_SPI_MspInit+0x98>)
 8002b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b02:	4a14      	ldr	r2, [pc, #80]	; (8002b54 <HAL_SPI_MspInit+0x98>)
 8002b04:	f043 0301 	orr.w	r3, r3, #1
 8002b08:	6313      	str	r3, [r2, #48]	; 0x30
 8002b0a:	4b12      	ldr	r3, [pc, #72]	; (8002b54 <HAL_SPI_MspInit+0x98>)
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002b16:	23e0      	movs	r3, #224	; 0xe0
 8002b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b22:	2303      	movs	r3, #3
 8002b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b26:	2305      	movs	r3, #5
 8002b28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b2a:	f107 0314 	add.w	r3, r7, #20
 8002b2e:	4619      	mov	r1, r3
 8002b30:	4809      	ldr	r0, [pc, #36]	; (8002b58 <HAL_SPI_MspInit+0x9c>)
 8002b32:	f000 fed5 	bl	80038e0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002b36:	2200      	movs	r2, #0
 8002b38:	2100      	movs	r1, #0
 8002b3a:	2023      	movs	r0, #35	; 0x23
 8002b3c:	f000 fe69 	bl	8003812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002b40:	2023      	movs	r0, #35	; 0x23
 8002b42:	f000 fe82 	bl	800384a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002b46:	bf00      	nop
 8002b48:	3728      	adds	r7, #40	; 0x28
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	40013000 	.word	0x40013000
 8002b54:	40023800 	.word	0x40023800
 8002b58:	40020000 	.word	0x40020000

08002b5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b62:	2300      	movs	r3, #0
 8002b64:	607b      	str	r3, [r7, #4]
 8002b66:	4b10      	ldr	r3, [pc, #64]	; (8002ba8 <HAL_MspInit+0x4c>)
 8002b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6a:	4a0f      	ldr	r2, [pc, #60]	; (8002ba8 <HAL_MspInit+0x4c>)
 8002b6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b70:	6453      	str	r3, [r2, #68]	; 0x44
 8002b72:	4b0d      	ldr	r3, [pc, #52]	; (8002ba8 <HAL_MspInit+0x4c>)
 8002b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b7a:	607b      	str	r3, [r7, #4]
 8002b7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b7e:	2300      	movs	r3, #0
 8002b80:	603b      	str	r3, [r7, #0]
 8002b82:	4b09      	ldr	r3, [pc, #36]	; (8002ba8 <HAL_MspInit+0x4c>)
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	4a08      	ldr	r2, [pc, #32]	; (8002ba8 <HAL_MspInit+0x4c>)
 8002b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b8e:	4b06      	ldr	r3, [pc, #24]	; (8002ba8 <HAL_MspInit+0x4c>)
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b96:	603b      	str	r3, [r7, #0]
 8002b98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b9a:	bf00      	nop
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	40023800 	.word	0x40023800

08002bac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002bb0:	e7fe      	b.n	8002bb0 <NMI_Handler+0x4>

08002bb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bb6:	e7fe      	b.n	8002bb6 <HardFault_Handler+0x4>

08002bb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bbc:	e7fe      	b.n	8002bbc <MemManage_Handler+0x4>

08002bbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bc2:	e7fe      	b.n	8002bc2 <BusFault_Handler+0x4>

08002bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bc8:	e7fe      	b.n	8002bc8 <UsageFault_Handler+0x4>

08002bca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bce:	bf00      	nop
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bdc:	bf00      	nop
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002be6:	b480      	push	{r7}
 8002be8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bea:	bf00      	nop
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bf8:	f000 fcc8 	bl	800358c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bfc:	bf00      	nop
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002c04:	4802      	ldr	r0, [pc, #8]	; (8002c10 <SPI1_IRQHandler+0x10>)
 8002c06:	f002 fb91 	bl	800532c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002c0a:	bf00      	nop
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	2000075c 	.word	0x2000075c

08002c14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
	return 1;
 8002c18:	2301      	movs	r3, #1
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <_kill>:

int _kill(int pid, int sig)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002c2e:	f003 f889 	bl	8005d44 <__errno>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2216      	movs	r2, #22
 8002c36:	601a      	str	r2, [r3, #0]
	return -1;
 8002c38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3708      	adds	r7, #8
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <_exit>:

void _exit (int status)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f7ff ffe7 	bl	8002c24 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002c56:	e7fe      	b.n	8002c56 <_exit+0x12>

08002c58 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c64:	2300      	movs	r3, #0
 8002c66:	617b      	str	r3, [r7, #20]
 8002c68:	e00a      	b.n	8002c80 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002c6a:	f3af 8000 	nop.w
 8002c6e:	4601      	mov	r1, r0
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	1c5a      	adds	r2, r3, #1
 8002c74:	60ba      	str	r2, [r7, #8]
 8002c76:	b2ca      	uxtb	r2, r1
 8002c78:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	617b      	str	r3, [r7, #20]
 8002c80:	697a      	ldr	r2, [r7, #20]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	dbf0      	blt.n	8002c6a <_read+0x12>
	}

return len;
 8002c88:	687b      	ldr	r3, [r7, #4]
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3718      	adds	r7, #24
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b086      	sub	sp, #24
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	60f8      	str	r0, [r7, #12]
 8002c9a:	60b9      	str	r1, [r7, #8]
 8002c9c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	617b      	str	r3, [r7, #20]
 8002ca2:	e009      	b.n	8002cb8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	1c5a      	adds	r2, r3, #1
 8002ca8:	60ba      	str	r2, [r7, #8]
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	617b      	str	r3, [r7, #20]
 8002cb8:	697a      	ldr	r2, [r7, #20]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	dbf1      	blt.n	8002ca4 <_write+0x12>
	}
	return len;
 8002cc0:	687b      	ldr	r3, [r7, #4]
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3718      	adds	r7, #24
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <_close>:

int _close(int file)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b083      	sub	sp, #12
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
	return -1;
 8002cd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr

08002ce2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b083      	sub	sp, #12
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
 8002cea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cf2:	605a      	str	r2, [r3, #4]
	return 0;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <_isatty>:

int _isatty(int file)
{
 8002d02:	b480      	push	{r7}
 8002d04:	b083      	sub	sp, #12
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
	return 1;
 8002d0a:	2301      	movs	r3, #1
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
	return 0;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3714      	adds	r7, #20
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
	...

08002d34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b086      	sub	sp, #24
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d3c:	4a14      	ldr	r2, [pc, #80]	; (8002d90 <_sbrk+0x5c>)
 8002d3e:	4b15      	ldr	r3, [pc, #84]	; (8002d94 <_sbrk+0x60>)
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d48:	4b13      	ldr	r3, [pc, #76]	; (8002d98 <_sbrk+0x64>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d102      	bne.n	8002d56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d50:	4b11      	ldr	r3, [pc, #68]	; (8002d98 <_sbrk+0x64>)
 8002d52:	4a12      	ldr	r2, [pc, #72]	; (8002d9c <_sbrk+0x68>)
 8002d54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d56:	4b10      	ldr	r3, [pc, #64]	; (8002d98 <_sbrk+0x64>)
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d207      	bcs.n	8002d74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d64:	f002 ffee 	bl	8005d44 <__errno>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	220c      	movs	r2, #12
 8002d6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d72:	e009      	b.n	8002d88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d74:	4b08      	ldr	r3, [pc, #32]	; (8002d98 <_sbrk+0x64>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d7a:	4b07      	ldr	r3, [pc, #28]	; (8002d98 <_sbrk+0x64>)
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4413      	add	r3, r2
 8002d82:	4a05      	ldr	r2, [pc, #20]	; (8002d98 <_sbrk+0x64>)
 8002d84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d86:	68fb      	ldr	r3, [r7, #12]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3718      	adds	r7, #24
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	20020000 	.word	0x20020000
 8002d94:	00000400 	.word	0x00000400
 8002d98:	200006a4 	.word	0x200006a4
 8002d9c:	20000810 	.word	0x20000810

08002da0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002da4:	4b06      	ldr	r3, [pc, #24]	; (8002dc0 <SystemInit+0x20>)
 8002da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002daa:	4a05      	ldr	r2, [pc, #20]	; (8002dc0 <SystemInit+0x20>)
 8002dac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002db0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002db4:	bf00      	nop
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	e000ed00 	.word	0xe000ed00
 8002dc4:	00000000 	.word	0x00000000

08002dc8 <dw_main>:
 * @param  none
 *
 * @return none
 */
int dw_main(void)
{
 8002dc8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002dcc:	b094      	sub	sp, #80	; 0x50
 8002dce:	af00      	add	r7, sp, #0
    /* Display application name on LCD. */
//    lcd_display_str(APP_NAME);
ssd1306_write(buff, Font_7x10);
 8002dd0:	4810      	ldr	r0, [pc, #64]	; (8002e14 <dw_main+0x4c>)
 8002dd2:	4b11      	ldr	r3, [pc, #68]	; (8002e18 <dw_main+0x50>)
 8002dd4:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002dd8:	f7ff fcc2 	bl	8002760 <ssd1306_write>
    /* Reset and initialise DW1000.
     * For initialisation, DW1000 clocks must be temporarily set to crystal speed. After initialisation SPI rate can be increased for optimum
     * performance. */
    reset_DW1000(); /* Target specific drive of RSTn line into DW1000 low for a period. */
 8002ddc:	f7ff f976 	bl	80020cc <reset_DW1000>
    port_set_dw1000_slowrate();
 8002de0:	f7ff f9d0 	bl	8002184 <port_set_dw1000_slowrate>
    if (dwt_initialise(DWT_LOADUCODE) == DWT_ERROR)
 8002de4:	2001      	movs	r0, #1
 8002de6:	f7fe f909 	bl	8000ffc <dwt_initialise>
 8002dea:	4603      	mov	r3, r0
 8002dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df0:	d11a      	bne.n	8002e28 <dw_main+0x60>
    {
        HAL_UART_Transmit(&huart2, "INIT FAILED\n", 12, 100);
 8002df2:	2364      	movs	r3, #100	; 0x64
 8002df4:	220c      	movs	r2, #12
 8002df6:	4909      	ldr	r1, [pc, #36]	; (8002e1c <dw_main+0x54>)
 8002df8:	4809      	ldr	r0, [pc, #36]	; (8002e20 <dw_main+0x58>)
 8002dfa:	f002 fcda 	bl	80057b2 <HAL_UART_Transmit>
        SSD1306_GotoXY(0 ,10); ssd1306_write("Init Failed!!!", Font_7x10);
 8002dfe:	210a      	movs	r1, #10
 8002e00:	2000      	movs	r0, #0
 8002e02:	f7ff fb6d 	bl	80024e0 <SSD1306_GotoXY>
 8002e06:	4807      	ldr	r0, [pc, #28]	; (8002e24 <dw_main+0x5c>)
 8002e08:	4b03      	ldr	r3, [pc, #12]	; (8002e18 <dw_main+0x50>)
 8002e0a:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002e0e:	f7ff fca7 	bl	8002760 <ssd1306_write>
        while (1)
 8002e12:	e7fe      	b.n	8002e12 <dw_main+0x4a>
 8002e14:	20000018 	.word	0x20000018
 8002e18:	20000004 	.word	0x20000004
 8002e1c:	0800a628 	.word	0x0800a628
 8002e20:	200007b4 	.word	0x200007b4
 8002e24:	0800a638 	.word	0x0800a638
        { };
    }
    port_set_dw1000_fastrate();
 8002e28:	f7ff f9b8 	bl	800219c <port_set_dw1000_fastrate>

    /* Configure DW1000. See NOTE 7 below. */
    dwt_configure(&config);
 8002e2c:	48c6      	ldr	r0, [pc, #792]	; (8003148 <dw_main+0x380>)
 8002e2e:	f7fe fa3b 	bl	80012a8 <dwt_configure>

    /* Apply default antenna delay value. See NOTE 1 below. */
    dwt_setrxantennadelay(RX_ANT_DLY);
 8002e32:	f244 0092 	movw	r0, #16530	; 0x4092
 8002e36:	f7fe fba1 	bl	800157c <dwt_setrxantennadelay>
    dwt_settxantennadelay(TX_ANT_DLY);
 8002e3a:	f244 0092 	movw	r0, #16530	; 0x4092
 8002e3e:	f7fe fbad 	bl	800159c <dwt_settxantennadelay>

    /* Set preamble timeout for expected frames. See NOTE 6 below. */
    dwt_setpreambledetecttimeout(PRE_TIMEOUT);
 8002e42:	2008      	movs	r0, #8
 8002e44:	f7fe ffd2 	bl	8001dec <dwt_setpreambledetecttimeout>

    /* Loop forever responding to ranging requests. */
    while (1)
    {

    	SSD1306_Clear ();
 8002e48:	f7ff fc05 	bl	8002656 <SSD1306_Clear>
    	SSD1306_GotoXY(0, 0);  ssd1306_write("Received :", Font_7x10);
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	2000      	movs	r0, #0
 8002e50:	f7ff fb46 	bl	80024e0 <SSD1306_GotoXY>
 8002e54:	48bd      	ldr	r0, [pc, #756]	; (800314c <dw_main+0x384>)
 8002e56:	4bbe      	ldr	r3, [pc, #760]	; (8003150 <dw_main+0x388>)
 8002e58:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002e5c:	f7ff fc80 	bl	8002760 <ssd1306_write>
    	SSD1306_GotoXY(0, 20);  ssd1306_write("Transmitted :", Font_7x10);
 8002e60:	2114      	movs	r1, #20
 8002e62:	2000      	movs	r0, #0
 8002e64:	f7ff fb3c 	bl	80024e0 <SSD1306_GotoXY>
 8002e68:	48ba      	ldr	r0, [pc, #744]	; (8003154 <dw_main+0x38c>)
 8002e6a:	4bb9      	ldr	r3, [pc, #740]	; (8003150 <dw_main+0x388>)
 8002e6c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002e70:	f7ff fc76 	bl	8002760 <ssd1306_write>
        /* Clear reception timeout to start next ranging process. */
        dwt_setrxtimeout(1);
 8002e74:	2001      	movs	r0, #1
 8002e76:	f7fe ff79 	bl	8001d6c <dwt_setrxtimeout>

        /* Activate reception immediately. */
        dwt_rxenable(DWT_START_RX_IMMEDIATE);
 8002e7a:	2000      	movs	r0, #0
 8002e7c:	f7fe ff34 	bl	8001ce8 <dwt_rxenable>

        /* Poll for reception of a frame or error/timeout. See NOTE 8 below. */
        while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
 8002e80:	bf00      	nop
 8002e82:	2100      	movs	r1, #0
 8002e84:	200f      	movs	r0, #15
 8002e86:	f7fe fcba 	bl	80017fe <dwt_read32bitoffsetreg>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	4ab2      	ldr	r2, [pc, #712]	; (8003158 <dw_main+0x390>)
 8002e8e:	6013      	str	r3, [r2, #0]
 8002e90:	4bb1      	ldr	r3, [pc, #708]	; (8003158 <dw_main+0x390>)
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	4bb1      	ldr	r3, [pc, #708]	; (800315c <dw_main+0x394>)
 8002e96:	4013      	ands	r3, r2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d0f2      	beq.n	8002e82 <dw_main+0xba>
        { };

        if (status_reg & SYS_STATUS_RXFCG)
 8002e9c:	4bae      	ldr	r3, [pc, #696]	; (8003158 <dw_main+0x390>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f000 81cc 	beq.w	8003242 <dw_main+0x47a>
        {
            uint32 frame_len;

            /* Clear good RX frame event in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG);
 8002eaa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002eae:	2100      	movs	r1, #0
 8002eb0:	200f      	movs	r0, #15
 8002eb2:	f7fe fd2a 	bl	800190a <dwt_write32bitoffsetreg>

            /* A frame has been received, read it into the local buffer. */
            frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFL_MASK_1023;
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	2010      	movs	r0, #16
 8002eba:	f7fe fca0 	bl	80017fe <dwt_read32bitoffsetreg>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ec4:	64fb      	str	r3, [r7, #76]	; 0x4c
            if (frame_len <= RX_BUFFER_LEN)
 8002ec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ec8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ecc:	d806      	bhi.n	8002edc <dw_main+0x114>
            {
                dwt_readrxdata(rx_buffer, frame_len, 0);
 8002ece:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	48a2      	ldr	r0, [pc, #648]	; (8003160 <dw_main+0x398>)
 8002ed8:	f7fe fbae 	bl	8001638 <dwt_readrxdata>
            }
            SSD1306_GotoXY(0, 10); ssd1306_write(rx_buffer, Font_7x10);
 8002edc:	210a      	movs	r1, #10
 8002ede:	2000      	movs	r0, #0
 8002ee0:	f7ff fafe 	bl	80024e0 <SSD1306_GotoXY>
 8002ee4:	489e      	ldr	r0, [pc, #632]	; (8003160 <dw_main+0x398>)
 8002ee6:	4b9a      	ldr	r3, [pc, #616]	; (8003150 <dw_main+0x388>)
 8002ee8:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002eec:	f7ff fc38 	bl	8002760 <ssd1306_write>
            HAL_UART_Transmit(&huart2, rx_buffer, sizeof(rx_buffer), 100);
 8002ef0:	2364      	movs	r3, #100	; 0x64
 8002ef2:	2218      	movs	r2, #24
 8002ef4:	499a      	ldr	r1, [pc, #616]	; (8003160 <dw_main+0x398>)
 8002ef6:	489b      	ldr	r0, [pc, #620]	; (8003164 <dw_main+0x39c>)
 8002ef8:	f002 fc5b 	bl	80057b2 <HAL_UART_Transmit>
            /* Check that the frame is a poll sent by "DS TWR initiator" example.
             * As the sequence number field of the frame is not relevant, it is cleared to simplify the validation of the frame. */
            rx_buffer[ALL_MSG_SN_IDX] = 0;
 8002efc:	4b98      	ldr	r3, [pc, #608]	; (8003160 <dw_main+0x398>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	709a      	strb	r2, [r3, #2]
            if (memcmp(rx_buffer, rx_poll_msg, ALL_MSG_COMMON_LEN) == 0)
 8002f02:	220a      	movs	r2, #10
 8002f04:	4998      	ldr	r1, [pc, #608]	; (8003168 <dw_main+0x3a0>)
 8002f06:	4896      	ldr	r0, [pc, #600]	; (8003160 <dw_main+0x398>)
 8002f08:	f002 ff46 	bl	8005d98 <memcmp>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d19a      	bne.n	8002e48 <dw_main+0x80>
            {
                uint32 resp_tx_time;
                int ret;

                /* Retrieve poll reception timestamp. */
                poll_rx_ts = get_rx_timestamp_u64();
 8002f12:	f000 f9ef 	bl	80032f4 <get_rx_timestamp_u64>
 8002f16:	4602      	mov	r2, r0
 8002f18:	460b      	mov	r3, r1
 8002f1a:	4994      	ldr	r1, [pc, #592]	; (800316c <dw_main+0x3a4>)
 8002f1c:	e9c1 2300 	strd	r2, r3, [r1]

                /* Set send time for response. See NOTE 9 below. */
                resp_tx_time = (poll_rx_ts + (POLL_RX_TO_RESP_TX_DLY_UUS * UUS_TO_DWT_TIME)) >> 8;
 8002f20:	4b92      	ldr	r3, [pc, #584]	; (800316c <dw_main+0x3a4>)
 8002f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f26:	4892      	ldr	r0, [pc, #584]	; (8003170 <dw_main+0x3a8>)
 8002f28:	f04f 0100 	mov.w	r1, #0
 8002f2c:	1814      	adds	r4, r2, r0
 8002f2e:	eb43 0501 	adc.w	r5, r3, r1
 8002f32:	f04f 0200 	mov.w	r2, #0
 8002f36:	f04f 0300 	mov.w	r3, #0
 8002f3a:	0a22      	lsrs	r2, r4, #8
 8002f3c:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
 8002f40:	0a2b      	lsrs	r3, r5, #8
 8002f42:	4613      	mov	r3, r2
 8002f44:	64bb      	str	r3, [r7, #72]	; 0x48
                dwt_setdelayedtrxtime(resp_tx_time);
 8002f46:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002f48:	f7fe fe28 	bl	8001b9c <dwt_setdelayedtrxtime>

                /* Set expected delay and timeout for final message reception. See NOTE 4 and 5 below. */
                dwt_setrxaftertxdelay(RESP_TX_TO_FINAL_RX_DLY_UUS);
 8002f4c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002f50:	f7fe fd62 	bl	8001a18 <dwt_setrxaftertxdelay>
                dwt_setrxtimeout(FINAL_RX_TIMEOUT_UUS);
 8002f54:	f640 40e4 	movw	r0, #3300	; 0xce4
 8002f58:	f7fe ff08 	bl	8001d6c <dwt_setrxtimeout>

                /* Write and send the response message. See NOTE 10 below.*/
                tx_resp_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 8002f5c:	4b85      	ldr	r3, [pc, #532]	; (8003174 <dw_main+0x3ac>)
 8002f5e:	781a      	ldrb	r2, [r3, #0]
 8002f60:	4b85      	ldr	r3, [pc, #532]	; (8003178 <dw_main+0x3b0>)
 8002f62:	709a      	strb	r2, [r3, #2]
                dwt_writetxdata(sizeof(tx_resp_msg), tx_resp_msg, 0); /* Zero offset in TX buffer. */
 8002f64:	2200      	movs	r2, #0
 8002f66:	4984      	ldr	r1, [pc, #528]	; (8003178 <dw_main+0x3b0>)
 8002f68:	200f      	movs	r0, #15
 8002f6a:	f7fe fb26 	bl	80015ba <dwt_writetxdata>
                dwt_writetxfctrl(sizeof(tx_resp_msg), 0, 1); /* Zero offset in TX buffer, ranging. */
 8002f6e:	2201      	movs	r2, #1
 8002f70:	2100      	movs	r1, #0
 8002f72:	200f      	movs	r0, #15
 8002f74:	f7fe fb40 	bl	80015f8 <dwt_writetxfctrl>
                ret = dwt_starttx(DWT_START_TX_DELAYED | DWT_RESPONSE_EXPECTED);
 8002f78:	2003      	movs	r0, #3
 8002f7a:	f7fe fe1d 	bl	8001bb8 <dwt_starttx>
 8002f7e:	6478      	str	r0, [r7, #68]	; 0x44
                HAL_UART_Transmit(&huart2, tx_resp_msg, sizeof(tx_resp_msg), 100);
 8002f80:	2364      	movs	r3, #100	; 0x64
 8002f82:	220f      	movs	r2, #15
 8002f84:	497c      	ldr	r1, [pc, #496]	; (8003178 <dw_main+0x3b0>)
 8002f86:	4877      	ldr	r0, [pc, #476]	; (8003164 <dw_main+0x39c>)
 8002f88:	f002 fc13 	bl	80057b2 <HAL_UART_Transmit>
                SSD1306_GotoXY(0, 30); ssd1306_write(rx_buffer, Font_7x10);
 8002f8c:	211e      	movs	r1, #30
 8002f8e:	2000      	movs	r0, #0
 8002f90:	f7ff faa6 	bl	80024e0 <SSD1306_GotoXY>
 8002f94:	4872      	ldr	r0, [pc, #456]	; (8003160 <dw_main+0x398>)
 8002f96:	4b6e      	ldr	r3, [pc, #440]	; (8003150 <dw_main+0x388>)
 8002f98:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002f9c:	f7ff fbe0 	bl	8002760 <ssd1306_write>
                /* If dwt_starttx() returns an error, abandon this ranging exchange and proceed to the next one. See NOTE 11 below. */
                if (ret == DWT_ERROR)
 8002fa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa6:	f000 8154 	beq.w	8003252 <dw_main+0x48a>
                {
                    continue;
                }

                /* Poll for reception of expected "final" frame or error/timeout. See NOTE 8 below. */
                while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
 8002faa:	bf00      	nop
 8002fac:	2100      	movs	r1, #0
 8002fae:	200f      	movs	r0, #15
 8002fb0:	f7fe fc25 	bl	80017fe <dwt_read32bitoffsetreg>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	4a68      	ldr	r2, [pc, #416]	; (8003158 <dw_main+0x390>)
 8002fb8:	6013      	str	r3, [r2, #0]
 8002fba:	4b67      	ldr	r3, [pc, #412]	; (8003158 <dw_main+0x390>)
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	4b67      	ldr	r3, [pc, #412]	; (800315c <dw_main+0x394>)
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d0f2      	beq.n	8002fac <dw_main+0x1e4>
                { };

                /* Increment frame sequence number after transmission of the response message (modulo 256). */
                frame_seq_nb++;
 8002fc6:	4b6b      	ldr	r3, [pc, #428]	; (8003174 <dw_main+0x3ac>)
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	3301      	adds	r3, #1
 8002fcc:	b2da      	uxtb	r2, r3
 8002fce:	4b69      	ldr	r3, [pc, #420]	; (8003174 <dw_main+0x3ac>)
 8002fd0:	701a      	strb	r2, [r3, #0]

                if (status_reg & SYS_STATUS_RXFCG)
 8002fd2:	4b61      	ldr	r3, [pc, #388]	; (8003158 <dw_main+0x390>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f000 8129 	beq.w	8003232 <dw_main+0x46a>
                {
                    /* Clear good RX frame event and TX frame sent in the DW1000 status register. */
                    dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG | SYS_STATUS_TXFRS);
 8002fe0:	f44f 4281 	mov.w	r2, #16512	; 0x4080
 8002fe4:	2100      	movs	r1, #0
 8002fe6:	200f      	movs	r0, #15
 8002fe8:	f7fe fc8f 	bl	800190a <dwt_write32bitoffsetreg>

                    /* A frame has been received, read it into the local buffer. */
                    frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFLEN_MASK;
 8002fec:	2100      	movs	r1, #0
 8002fee:	2010      	movs	r0, #16
 8002ff0:	f7fe fc05 	bl	80017fe <dwt_read32bitoffsetreg>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
                    if (frame_len <= RX_BUF_LEN)
 8002ffc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ffe:	2b18      	cmp	r3, #24
 8003000:	d806      	bhi.n	8003010 <dw_main+0x248>
                    {
                        dwt_readrxdata(rx_buffer, frame_len, 0);
 8003002:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003004:	b29b      	uxth	r3, r3
 8003006:	2200      	movs	r2, #0
 8003008:	4619      	mov	r1, r3
 800300a:	4855      	ldr	r0, [pc, #340]	; (8003160 <dw_main+0x398>)
 800300c:	f7fe fb14 	bl	8001638 <dwt_readrxdata>
                    }
                    HAL_UART_Transmit(&huart2, rx_buffer, sizeof(rx_buffer), 100);
 8003010:	2364      	movs	r3, #100	; 0x64
 8003012:	2218      	movs	r2, #24
 8003014:	4952      	ldr	r1, [pc, #328]	; (8003160 <dw_main+0x398>)
 8003016:	4853      	ldr	r0, [pc, #332]	; (8003164 <dw_main+0x39c>)
 8003018:	f002 fbcb 	bl	80057b2 <HAL_UART_Transmit>
                    SSD1306_GotoXY(0, 50); ssd1306_write(rx_buffer, Font_7x10);
 800301c:	2132      	movs	r1, #50	; 0x32
 800301e:	2000      	movs	r0, #0
 8003020:	f7ff fa5e 	bl	80024e0 <SSD1306_GotoXY>
 8003024:	484e      	ldr	r0, [pc, #312]	; (8003160 <dw_main+0x398>)
 8003026:	4b4a      	ldr	r3, [pc, #296]	; (8003150 <dw_main+0x388>)
 8003028:	e893 0006 	ldmia.w	r3, {r1, r2}
 800302c:	f7ff fb98 	bl	8002760 <ssd1306_write>
                    /* Check that the frame is a final message sent by "DS TWR initiator" example.
                     * As the sequence number field of the frame is not used in this example, it can be zeroed to ease the validation of the frame. */
                    rx_buffer[ALL_MSG_SN_IDX] = 0;
 8003030:	4b4b      	ldr	r3, [pc, #300]	; (8003160 <dw_main+0x398>)
 8003032:	2200      	movs	r2, #0
 8003034:	709a      	strb	r2, [r3, #2]
                    if (memcmp(rx_buffer, rx_final_msg, ALL_MSG_COMMON_LEN) == 0)
 8003036:	220a      	movs	r2, #10
 8003038:	4950      	ldr	r1, [pc, #320]	; (800317c <dw_main+0x3b4>)
 800303a:	4849      	ldr	r0, [pc, #292]	; (8003160 <dw_main+0x398>)
 800303c:	f002 feac 	bl	8005d98 <memcmp>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	f47f af00 	bne.w	8002e48 <dw_main+0x80>
                        uint32 poll_rx_ts_32, resp_tx_ts_32, final_rx_ts_32;
                        double Ra, Rb, Da, Db;
                        int64 tof_dtu;

                        /* Retrieve response transmission and final reception timestamps. */
                        resp_tx_ts = get_tx_timestamp_u64();
 8003048:	f000 f91c 	bl	8003284 <get_tx_timestamp_u64>
 800304c:	4602      	mov	r2, r0
 800304e:	460b      	mov	r3, r1
 8003050:	494b      	ldr	r1, [pc, #300]	; (8003180 <dw_main+0x3b8>)
 8003052:	e9c1 2300 	strd	r2, r3, [r1]
                        final_rx_ts = get_rx_timestamp_u64();
 8003056:	f000 f94d 	bl	80032f4 <get_rx_timestamp_u64>
 800305a:	4602      	mov	r2, r0
 800305c:	460b      	mov	r3, r1
 800305e:	4949      	ldr	r1, [pc, #292]	; (8003184 <dw_main+0x3bc>)
 8003060:	e9c1 2300 	strd	r2, r3, [r1]

                        /* Get timestamps embedded in the final message. */
                        final_msg_get_ts(&rx_buffer[FINAL_MSG_POLL_TX_TS_IDX], &poll_tx_ts);
 8003064:	f107 030c 	add.w	r3, r7, #12
 8003068:	4619      	mov	r1, r3
 800306a:	4847      	ldr	r0, [pc, #284]	; (8003188 <dw_main+0x3c0>)
 800306c:	f000 f97a 	bl	8003364 <final_msg_get_ts>
                        final_msg_get_ts(&rx_buffer[FINAL_MSG_RESP_RX_TS_IDX], &resp_rx_ts);
 8003070:	f107 0308 	add.w	r3, r7, #8
 8003074:	4619      	mov	r1, r3
 8003076:	4845      	ldr	r0, [pc, #276]	; (800318c <dw_main+0x3c4>)
 8003078:	f000 f974 	bl	8003364 <final_msg_get_ts>
                        final_msg_get_ts(&rx_buffer[FINAL_MSG_FINAL_TX_TS_IDX], &final_tx_ts);
 800307c:	1d3b      	adds	r3, r7, #4
 800307e:	4619      	mov	r1, r3
 8003080:	4843      	ldr	r0, [pc, #268]	; (8003190 <dw_main+0x3c8>)
 8003082:	f000 f96f 	bl	8003364 <final_msg_get_ts>

                        /* Compute time of flight. 32-bit subtractions give correct answers even if clock has wrapped. See NOTE 12 below. */
                        poll_rx_ts_32 = (uint32)poll_rx_ts;
 8003086:	4b39      	ldr	r3, [pc, #228]	; (800316c <dw_main+0x3a4>)
 8003088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800308c:	4613      	mov	r3, r2
 800308e:	643b      	str	r3, [r7, #64]	; 0x40
                        resp_tx_ts_32 = (uint32)resp_tx_ts;
 8003090:	4b3b      	ldr	r3, [pc, #236]	; (8003180 <dw_main+0x3b8>)
 8003092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003096:	4613      	mov	r3, r2
 8003098:	63fb      	str	r3, [r7, #60]	; 0x3c
                        final_rx_ts_32 = (uint32)final_rx_ts;
 800309a:	4b3a      	ldr	r3, [pc, #232]	; (8003184 <dw_main+0x3bc>)
 800309c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a0:	4613      	mov	r3, r2
 80030a2:	63bb      	str	r3, [r7, #56]	; 0x38
                        Ra = (double)(resp_rx_ts - poll_tx_ts);
 80030a4:	68ba      	ldr	r2, [r7, #8]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7fd fa32 	bl	8000514 <__aeabi_ui2d>
 80030b0:	4602      	mov	r2, r0
 80030b2:	460b      	mov	r3, r1
 80030b4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
                        Rb = (double)(final_rx_ts_32 - resp_tx_ts_32);
 80030b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	4618      	mov	r0, r3
 80030c0:	f7fd fa28 	bl	8000514 <__aeabi_ui2d>
 80030c4:	4602      	mov	r2, r0
 80030c6:	460b      	mov	r3, r1
 80030c8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
                        Da = (double)(final_tx_ts - resp_rx_ts);
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7fd fa1e 	bl	8000514 <__aeabi_ui2d>
 80030d8:	4602      	mov	r2, r0
 80030da:	460b      	mov	r3, r1
 80030dc:	e9c7 2308 	strd	r2, r3, [r7, #32]
                        Db = (double)(resp_tx_ts_32 - poll_rx_ts_32);
 80030e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7fd fa14 	bl	8000514 <__aeabi_ui2d>
 80030ec:	4602      	mov	r2, r0
 80030ee:	460b      	mov	r3, r1
 80030f0:	e9c7 2306 	strd	r2, r3, [r7, #24]
                        tof_dtu = (int64)((Ra * Rb - Da * Db) / (Ra + Rb + Da + Db));
 80030f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030f8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80030fc:	f7fd fa84 	bl	8000608 <__aeabi_dmul>
 8003100:	4602      	mov	r2, r0
 8003102:	460b      	mov	r3, r1
 8003104:	4690      	mov	r8, r2
 8003106:	4699      	mov	r9, r3
 8003108:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800310c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003110:	f7fd fa7a 	bl	8000608 <__aeabi_dmul>
 8003114:	4602      	mov	r2, r0
 8003116:	460b      	mov	r3, r1
 8003118:	4640      	mov	r0, r8
 800311a:	4649      	mov	r1, r9
 800311c:	f7fd f8bc 	bl	8000298 <__aeabi_dsub>
 8003120:	4602      	mov	r2, r0
 8003122:	460b      	mov	r3, r1
 8003124:	4690      	mov	r8, r2
 8003126:	4699      	mov	r9, r3
 8003128:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800312c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003130:	f7fd f8b4 	bl	800029c <__adddf3>
 8003134:	4602      	mov	r2, r0
 8003136:	460b      	mov	r3, r1
 8003138:	4610      	mov	r0, r2
 800313a:	4619      	mov	r1, r3
 800313c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003140:	f7fd f8ac 	bl	800029c <__adddf3>
 8003144:	4602      	mov	r2, r0
 8003146:	e025      	b.n	8003194 <dw_main+0x3cc>
 8003148:	2000002c 	.word	0x2000002c
 800314c:	0800a648 	.word	0x0800a648
 8003150:	20000004 	.word	0x20000004
 8003154:	0800a654 	.word	0x0800a654
 8003158:	200006c4 	.word	0x200006c4
 800315c:	2427d000 	.word	0x2427d000
 8003160:	200006ac 	.word	0x200006ac
 8003164:	200007b4 	.word	0x200007b4
 8003168:	20000038 	.word	0x20000038
 800316c:	200006c8 	.word	0x200006c8
 8003170:	0abe0000 	.word	0x0abe0000
 8003174:	200006a8 	.word	0x200006a8
 8003178:	20000044 	.word	0x20000044
 800317c:	20000054 	.word	0x20000054
 8003180:	200006d0 	.word	0x200006d0
 8003184:	200006d8 	.word	0x200006d8
 8003188:	200006b6 	.word	0x200006b6
 800318c:	200006ba 	.word	0x200006ba
 8003190:	200006be 	.word	0x200006be
 8003194:	460b      	mov	r3, r1
 8003196:	4610      	mov	r0, r2
 8003198:	4619      	mov	r1, r3
 800319a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800319e:	f7fd f87d 	bl	800029c <__adddf3>
 80031a2:	4602      	mov	r2, r0
 80031a4:	460b      	mov	r3, r1
 80031a6:	4640      	mov	r0, r8
 80031a8:	4649      	mov	r1, r9
 80031aa:	f7fd fb57 	bl	800085c <__aeabi_ddiv>
 80031ae:	4602      	mov	r2, r0
 80031b0:	460b      	mov	r3, r1
 80031b2:	4610      	mov	r0, r2
 80031b4:	4619      	mov	r1, r3
 80031b6:	f7fd fd87 	bl	8000cc8 <__aeabi_d2lz>
 80031ba:	4602      	mov	r2, r0
 80031bc:	460b      	mov	r3, r1
 80031be:	e9c7 2304 	strd	r2, r3, [r7, #16]

                        tof = tof_dtu * DWT_TIME_UNITS;
 80031c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80031c6:	f7fd f9f1 	bl	80005ac <__aeabi_l2d>
 80031ca:	a32c      	add	r3, pc, #176	; (adr r3, 800327c <dw_main+0x4b4>)
 80031cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d0:	f7fd fa1a 	bl	8000608 <__aeabi_dmul>
 80031d4:	4602      	mov	r2, r0
 80031d6:	460b      	mov	r3, r1
 80031d8:	4921      	ldr	r1, [pc, #132]	; (8003260 <dw_main+0x498>)
 80031da:	e9c1 2300 	strd	r2, r3, [r1]
                        distance = tof * SPEED_OF_LIGHT;
 80031de:	4b20      	ldr	r3, [pc, #128]	; (8003260 <dw_main+0x498>)
 80031e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031e4:	a31c      	add	r3, pc, #112	; (adr r3, 8003258 <dw_main+0x490>)
 80031e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ea:	f7fd fa0d 	bl	8000608 <__aeabi_dmul>
 80031ee:	4602      	mov	r2, r0
 80031f0:	460b      	mov	r3, r1
 80031f2:	491c      	ldr	r1, [pc, #112]	; (8003264 <dw_main+0x49c>)
 80031f4:	e9c1 2300 	strd	r2, r3, [r1]

                        /* Display computed distance on LCD. */
                        sprintf(dist_str, "DIST: %3.2f m", distance);
 80031f8:	4b1a      	ldr	r3, [pc, #104]	; (8003264 <dw_main+0x49c>)
 80031fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031fe:	491a      	ldr	r1, [pc, #104]	; (8003268 <dw_main+0x4a0>)
 8003200:	481a      	ldr	r0, [pc, #104]	; (800326c <dw_main+0x4a4>)
 8003202:	f003 fc5f 	bl	8006ac4 <siprintf>
//                        lcd_display_str(dist_str);
                        HAL_UART_Transmit(&huart2, dist_str, sizeof(dist_str), 100);
 8003206:	2364      	movs	r3, #100	; 0x64
 8003208:	2210      	movs	r2, #16
 800320a:	4918      	ldr	r1, [pc, #96]	; (800326c <dw_main+0x4a4>)
 800320c:	4818      	ldr	r0, [pc, #96]	; (8003270 <dw_main+0x4a8>)
 800320e:	f002 fad0 	bl	80057b2 <HAL_UART_Transmit>
                        SSD1306_Clear(); SSD1306_InvertDisplay(0);
 8003212:	f7ff fa20 	bl	8002656 <SSD1306_Clear>
 8003216:	2000      	movs	r0, #0
 8003218:	f7fe ffe2 	bl	80021e0 <SSD1306_InvertDisplay>
                        SSD1306_GotoXY(0, 20); ssd1306_write(dist_str, Font_11x18);
 800321c:	2114      	movs	r1, #20
 800321e:	2000      	movs	r0, #0
 8003220:	f7ff f95e 	bl	80024e0 <SSD1306_GotoXY>
 8003224:	4811      	ldr	r0, [pc, #68]	; (800326c <dw_main+0x4a4>)
 8003226:	4b13      	ldr	r3, [pc, #76]	; (8003274 <dw_main+0x4ac>)
 8003228:	e893 0006 	ldmia.w	r3, {r1, r2}
 800322c:	f7ff fa98 	bl	8002760 <ssd1306_write>
 8003230:	e60a      	b.n	8002e48 <dw_main+0x80>
                    }
                }
                else
                {
                    /* Clear RX error/timeout events in the DW1000 status register. */
                    dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
 8003232:	4a11      	ldr	r2, [pc, #68]	; (8003278 <dw_main+0x4b0>)
 8003234:	2100      	movs	r1, #0
 8003236:	200f      	movs	r0, #15
 8003238:	f7fe fb67 	bl	800190a <dwt_write32bitoffsetreg>

                    /* Reset RX to properly reinitialise LDE operation. */
                    dwt_rxreset();
 800323c:	f7fe fde5 	bl	8001e0a <dwt_rxreset>
 8003240:	e602      	b.n	8002e48 <dw_main+0x80>
            }
        }
        else
        {
            /* Clear RX error/timeout events in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
 8003242:	4a0d      	ldr	r2, [pc, #52]	; (8003278 <dw_main+0x4b0>)
 8003244:	2100      	movs	r1, #0
 8003246:	200f      	movs	r0, #15
 8003248:	f7fe fb5f 	bl	800190a <dwt_write32bitoffsetreg>

            /* Reset RX to properly reinitialise LDE operation. */
            dwt_rxreset();
 800324c:	f7fe fddd 	bl	8001e0a <dwt_rxreset>
 8003250:	e5fa      	b.n	8002e48 <dw_main+0x80>
                    continue;
 8003252:	bf00      	nop
    	SSD1306_Clear ();
 8003254:	e5f8      	b.n	8002e48 <dw_main+0x80>
 8003256:	bf00      	nop
 8003258:	13000000 	.word	0x13000000
 800325c:	41b1dd19 	.word	0x41b1dd19
 8003260:	200006e0 	.word	0x200006e0
 8003264:	200006e8 	.word	0x200006e8
 8003268:	0800a664 	.word	0x0800a664
 800326c:	200006f0 	.word	0x200006f0
 8003270:	200007b4 	.word	0x200007b4
 8003274:	2000000c 	.word	0x2000000c
 8003278:	24279000 	.word	0x24279000
 800327c:	3bce48fa 	.word	0x3bce48fa
 8003280:	3db13518 	.word	0x3db13518

08003284 <get_tx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
static uint64 get_tx_timestamp_u64(void)
{
 8003284:	b5b0      	push	{r4, r5, r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
    uint8 ts_tab[5];
    uint64 ts = 0;
 800328a:	f04f 0200 	mov.w	r2, #0
 800328e:	f04f 0300 	mov.w	r3, #0
 8003292:	e9c7 2304 	strd	r2, r3, [r7, #16]
    int i;
    dwt_readtxtimestamp(ts_tab);
 8003296:	1d3b      	adds	r3, r7, #4
 8003298:	4618      	mov	r0, r3
 800329a:	f7fe f9df 	bl	800165c <dwt_readtxtimestamp>
    for (i = 4; i >= 0; i--)
 800329e:	2304      	movs	r3, #4
 80032a0:	60fb      	str	r3, [r7, #12]
 80032a2:	e01d      	b.n	80032e0 <get_tx_timestamp_u64+0x5c>
    {
        ts <<= 8;
 80032a4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80032a8:	f04f 0200 	mov.w	r2, #0
 80032ac:	f04f 0300 	mov.w	r3, #0
 80032b0:	020b      	lsls	r3, r1, #8
 80032b2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80032b6:	0202      	lsls	r2, r0, #8
 80032b8:	e9c7 2304 	strd	r2, r3, [r7, #16]
        ts |= ts_tab[i];
 80032bc:	1d3a      	adds	r2, r7, #4
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	4413      	add	r3, r2
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	b2da      	uxtb	r2, r3
 80032c6:	f04f 0300 	mov.w	r3, #0
 80032ca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80032ce:	ea40 0402 	orr.w	r4, r0, r2
 80032d2:	ea41 0503 	orr.w	r5, r1, r3
 80032d6:	e9c7 4504 	strd	r4, r5, [r7, #16]
    for (i = 4; i >= 0; i--)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	3b01      	subs	r3, #1
 80032de:	60fb      	str	r3, [r7, #12]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	dade      	bge.n	80032a4 <get_tx_timestamp_u64+0x20>
    }
    return ts;
 80032e6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 80032ea:	4610      	mov	r0, r2
 80032ec:	4619      	mov	r1, r3
 80032ee:	3718      	adds	r7, #24
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bdb0      	pop	{r4, r5, r7, pc}

080032f4 <get_rx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
static uint64 get_rx_timestamp_u64(void)
{
 80032f4:	b5b0      	push	{r4, r5, r7, lr}
 80032f6:	b086      	sub	sp, #24
 80032f8:	af00      	add	r7, sp, #0
    uint8 ts_tab[5];
    uint64 ts = 0;
 80032fa:	f04f 0200 	mov.w	r2, #0
 80032fe:	f04f 0300 	mov.w	r3, #0
 8003302:	e9c7 2304 	strd	r2, r3, [r7, #16]
    int i;
    dwt_readrxtimestamp(ts_tab);
 8003306:	1d3b      	adds	r3, r7, #4
 8003308:	4618      	mov	r0, r3
 800330a:	f7fe f9b5 	bl	8001678 <dwt_readrxtimestamp>
    for (i = 4; i >= 0; i--)
 800330e:	2304      	movs	r3, #4
 8003310:	60fb      	str	r3, [r7, #12]
 8003312:	e01d      	b.n	8003350 <get_rx_timestamp_u64+0x5c>
    {
        ts <<= 8;
 8003314:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003318:	f04f 0200 	mov.w	r2, #0
 800331c:	f04f 0300 	mov.w	r3, #0
 8003320:	020b      	lsls	r3, r1, #8
 8003322:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003326:	0202      	lsls	r2, r0, #8
 8003328:	e9c7 2304 	strd	r2, r3, [r7, #16]
        ts |= ts_tab[i];
 800332c:	1d3a      	adds	r2, r7, #4
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	4413      	add	r3, r2
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	b2da      	uxtb	r2, r3
 8003336:	f04f 0300 	mov.w	r3, #0
 800333a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800333e:	ea40 0402 	orr.w	r4, r0, r2
 8003342:	ea41 0503 	orr.w	r5, r1, r3
 8003346:	e9c7 4504 	strd	r4, r5, [r7, #16]
    for (i = 4; i >= 0; i--)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	3b01      	subs	r3, #1
 800334e:	60fb      	str	r3, [r7, #12]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2b00      	cmp	r3, #0
 8003354:	dade      	bge.n	8003314 <get_rx_timestamp_u64+0x20>
    }
    return ts;
 8003356:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 800335a:	4610      	mov	r0, r2
 800335c:	4619      	mov	r1, r3
 800335e:	3718      	adds	r7, #24
 8003360:	46bd      	mov	sp, r7
 8003362:	bdb0      	pop	{r4, r5, r7, pc}

08003364 <final_msg_get_ts>:
 *         ts  timestamp value
 *
 * @return none
 */
static void final_msg_get_ts(const uint8 *ts_field, uint32 *ts)
{
 8003364:	b480      	push	{r7}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
    int i;
    *ts = 0;
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	2200      	movs	r2, #0
 8003372:	601a      	str	r2, [r3, #0]
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 8003374:	2300      	movs	r3, #0
 8003376:	60fb      	str	r3, [r7, #12]
 8003378:	e010      	b.n	800339c <final_msg_get_ts+0x38>
    {
        *ts += ts_field[i] << (i * 8);
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	6879      	ldr	r1, [r7, #4]
 8003382:	440a      	add	r2, r1
 8003384:	7812      	ldrb	r2, [r2, #0]
 8003386:	4611      	mov	r1, r2
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	00d2      	lsls	r2, r2, #3
 800338c:	fa01 f202 	lsl.w	r2, r1, r2
 8003390:	441a      	add	r2, r3
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	601a      	str	r2, [r3, #0]
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	3301      	adds	r3, #1
 800339a:	60fb      	str	r3, [r7, #12]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2b03      	cmp	r3, #3
 80033a0:	ddeb      	ble.n	800337a <final_msg_get_ts+0x16>
    }
}
 80033a2:	bf00      	nop
 80033a4:	bf00      	nop
 80033a6:	3714      	adds	r7, #20
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80033b4:	4b11      	ldr	r3, [pc, #68]	; (80033fc <MX_USART2_UART_Init+0x4c>)
 80033b6:	4a12      	ldr	r2, [pc, #72]	; (8003400 <MX_USART2_UART_Init+0x50>)
 80033b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80033ba:	4b10      	ldr	r3, [pc, #64]	; (80033fc <MX_USART2_UART_Init+0x4c>)
 80033bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80033c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80033c2:	4b0e      	ldr	r3, [pc, #56]	; (80033fc <MX_USART2_UART_Init+0x4c>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80033c8:	4b0c      	ldr	r3, [pc, #48]	; (80033fc <MX_USART2_UART_Init+0x4c>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80033ce:	4b0b      	ldr	r3, [pc, #44]	; (80033fc <MX_USART2_UART_Init+0x4c>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80033d4:	4b09      	ldr	r3, [pc, #36]	; (80033fc <MX_USART2_UART_Init+0x4c>)
 80033d6:	220c      	movs	r2, #12
 80033d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033da:	4b08      	ldr	r3, [pc, #32]	; (80033fc <MX_USART2_UART_Init+0x4c>)
 80033dc:	2200      	movs	r2, #0
 80033de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80033e0:	4b06      	ldr	r3, [pc, #24]	; (80033fc <MX_USART2_UART_Init+0x4c>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80033e6:	4805      	ldr	r0, [pc, #20]	; (80033fc <MX_USART2_UART_Init+0x4c>)
 80033e8:	f002 f996 	bl	8005718 <HAL_UART_Init>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80033f2:	f7ff fb27 	bl	8002a44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80033f6:	bf00      	nop
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	200007b4 	.word	0x200007b4
 8003400:	40004400 	.word	0x40004400

08003404 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b08a      	sub	sp, #40	; 0x28
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800340c:	f107 0314 	add.w	r3, r7, #20
 8003410:	2200      	movs	r2, #0
 8003412:	601a      	str	r2, [r3, #0]
 8003414:	605a      	str	r2, [r3, #4]
 8003416:	609a      	str	r2, [r3, #8]
 8003418:	60da      	str	r2, [r3, #12]
 800341a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a19      	ldr	r2, [pc, #100]	; (8003488 <HAL_UART_MspInit+0x84>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d12b      	bne.n	800347e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003426:	2300      	movs	r3, #0
 8003428:	613b      	str	r3, [r7, #16]
 800342a:	4b18      	ldr	r3, [pc, #96]	; (800348c <HAL_UART_MspInit+0x88>)
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	4a17      	ldr	r2, [pc, #92]	; (800348c <HAL_UART_MspInit+0x88>)
 8003430:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003434:	6413      	str	r3, [r2, #64]	; 0x40
 8003436:	4b15      	ldr	r3, [pc, #84]	; (800348c <HAL_UART_MspInit+0x88>)
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800343e:	613b      	str	r3, [r7, #16]
 8003440:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003442:	2300      	movs	r3, #0
 8003444:	60fb      	str	r3, [r7, #12]
 8003446:	4b11      	ldr	r3, [pc, #68]	; (800348c <HAL_UART_MspInit+0x88>)
 8003448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344a:	4a10      	ldr	r2, [pc, #64]	; (800348c <HAL_UART_MspInit+0x88>)
 800344c:	f043 0301 	orr.w	r3, r3, #1
 8003450:	6313      	str	r3, [r2, #48]	; 0x30
 8003452:	4b0e      	ldr	r3, [pc, #56]	; (800348c <HAL_UART_MspInit+0x88>)
 8003454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	60fb      	str	r3, [r7, #12]
 800345c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800345e:	230c      	movs	r3, #12
 8003460:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003462:	2302      	movs	r3, #2
 8003464:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003466:	2300      	movs	r3, #0
 8003468:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800346a:	2303      	movs	r3, #3
 800346c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800346e:	2307      	movs	r3, #7
 8003470:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003472:	f107 0314 	add.w	r3, r7, #20
 8003476:	4619      	mov	r1, r3
 8003478:	4805      	ldr	r0, [pc, #20]	; (8003490 <HAL_UART_MspInit+0x8c>)
 800347a:	f000 fa31 	bl	80038e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800347e:	bf00      	nop
 8003480:	3728      	adds	r7, #40	; 0x28
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	40004400 	.word	0x40004400
 800348c:	40023800 	.word	0x40023800
 8003490:	40020000 	.word	0x40020000

08003494 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003494:	f8df d034 	ldr.w	sp, [pc, #52]	; 80034cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003498:	480d      	ldr	r0, [pc, #52]	; (80034d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800349a:	490e      	ldr	r1, [pc, #56]	; (80034d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800349c:	4a0e      	ldr	r2, [pc, #56]	; (80034d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800349e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034a0:	e002      	b.n	80034a8 <LoopCopyDataInit>

080034a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034a6:	3304      	adds	r3, #4

080034a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034ac:	d3f9      	bcc.n	80034a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034ae:	4a0b      	ldr	r2, [pc, #44]	; (80034dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80034b0:	4c0b      	ldr	r4, [pc, #44]	; (80034e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80034b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034b4:	e001      	b.n	80034ba <LoopFillZerobss>

080034b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034b8:	3204      	adds	r2, #4

080034ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034bc:	d3fb      	bcc.n	80034b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80034be:	f7ff fc6f 	bl	8002da0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80034c2:	f002 fc45 	bl	8005d50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80034c6:	f7ff fa49 	bl	800295c <main>
  bx  lr    
 80034ca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80034cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80034d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034d4:	20000248 	.word	0x20000248
  ldr r2, =_sidata
 80034d8:	0800c0cc 	.word	0x0800c0cc
  ldr r2, =_sbss
 80034dc:	20000248 	.word	0x20000248
  ldr r4, =_ebss
 80034e0:	2000080c 	.word	0x2000080c

080034e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80034e4:	e7fe      	b.n	80034e4 <ADC_IRQHandler>
	...

080034e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80034ec:	4b0e      	ldr	r3, [pc, #56]	; (8003528 <HAL_Init+0x40>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a0d      	ldr	r2, [pc, #52]	; (8003528 <HAL_Init+0x40>)
 80034f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80034f8:	4b0b      	ldr	r3, [pc, #44]	; (8003528 <HAL_Init+0x40>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a0a      	ldr	r2, [pc, #40]	; (8003528 <HAL_Init+0x40>)
 80034fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003502:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003504:	4b08      	ldr	r3, [pc, #32]	; (8003528 <HAL_Init+0x40>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a07      	ldr	r2, [pc, #28]	; (8003528 <HAL_Init+0x40>)
 800350a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800350e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003510:	2003      	movs	r0, #3
 8003512:	f000 f973 	bl	80037fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003516:	200f      	movs	r0, #15
 8003518:	f000 f808 	bl	800352c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800351c:	f7ff fb1e 	bl	8002b5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	40023c00 	.word	0x40023c00

0800352c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003534:	4b12      	ldr	r3, [pc, #72]	; (8003580 <HAL_InitTick+0x54>)
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	4b12      	ldr	r3, [pc, #72]	; (8003584 <HAL_InitTick+0x58>)
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	4619      	mov	r1, r3
 800353e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003542:	fbb3 f3f1 	udiv	r3, r3, r1
 8003546:	fbb2 f3f3 	udiv	r3, r2, r3
 800354a:	4618      	mov	r0, r3
 800354c:	f000 f999 	bl	8003882 <HAL_SYSTICK_Config>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e00e      	b.n	8003578 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2b0f      	cmp	r3, #15
 800355e:	d80a      	bhi.n	8003576 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003560:	2200      	movs	r2, #0
 8003562:	6879      	ldr	r1, [r7, #4]
 8003564:	f04f 30ff 	mov.w	r0, #4294967295
 8003568:	f000 f953 	bl	8003812 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800356c:	4a06      	ldr	r2, [pc, #24]	; (8003588 <HAL_InitTick+0x5c>)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003572:	2300      	movs	r3, #0
 8003574:	e000      	b.n	8003578 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
}
 8003578:	4618      	mov	r0, r3
 800357a:	3708      	adds	r7, #8
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	20000014 	.word	0x20000014
 8003584:	20000070 	.word	0x20000070
 8003588:	2000006c 	.word	0x2000006c

0800358c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003590:	4b06      	ldr	r3, [pc, #24]	; (80035ac <HAL_IncTick+0x20>)
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	461a      	mov	r2, r3
 8003596:	4b06      	ldr	r3, [pc, #24]	; (80035b0 <HAL_IncTick+0x24>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4413      	add	r3, r2
 800359c:	4a04      	ldr	r2, [pc, #16]	; (80035b0 <HAL_IncTick+0x24>)
 800359e:	6013      	str	r3, [r2, #0]
}
 80035a0:	bf00      	nop
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	20000070 	.word	0x20000070
 80035b0:	200007f8 	.word	0x200007f8

080035b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035b4:	b480      	push	{r7}
 80035b6:	af00      	add	r7, sp, #0
  return uwTick;
 80035b8:	4b03      	ldr	r3, [pc, #12]	; (80035c8 <HAL_GetTick+0x14>)
 80035ba:	681b      	ldr	r3, [r3, #0]
}
 80035bc:	4618      	mov	r0, r3
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	200007f8 	.word	0x200007f8

080035cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035d4:	f7ff ffee 	bl	80035b4 <HAL_GetTick>
 80035d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e4:	d005      	beq.n	80035f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80035e6:	4b0a      	ldr	r3, [pc, #40]	; (8003610 <HAL_Delay+0x44>)
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	461a      	mov	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	4413      	add	r3, r2
 80035f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80035f2:	bf00      	nop
 80035f4:	f7ff ffde 	bl	80035b4 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	429a      	cmp	r2, r3
 8003602:	d8f7      	bhi.n	80035f4 <HAL_Delay+0x28>
  {
  }
}
 8003604:	bf00      	nop
 8003606:	bf00      	nop
 8003608:	3710      	adds	r7, #16
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	20000070 	.word	0x20000070

08003614 <__NVIC_SetPriorityGrouping>:
{
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f003 0307 	and.w	r3, r3, #7
 8003622:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003624:	4b0c      	ldr	r3, [pc, #48]	; (8003658 <__NVIC_SetPriorityGrouping+0x44>)
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800362a:	68ba      	ldr	r2, [r7, #8]
 800362c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003630:	4013      	ands	r3, r2
 8003632:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800363c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003644:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003646:	4a04      	ldr	r2, [pc, #16]	; (8003658 <__NVIC_SetPriorityGrouping+0x44>)
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	60d3      	str	r3, [r2, #12]
}
 800364c:	bf00      	nop
 800364e:	3714      	adds	r7, #20
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr
 8003658:	e000ed00 	.word	0xe000ed00

0800365c <__NVIC_GetPriorityGrouping>:
{
 800365c:	b480      	push	{r7}
 800365e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003660:	4b04      	ldr	r3, [pc, #16]	; (8003674 <__NVIC_GetPriorityGrouping+0x18>)
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	0a1b      	lsrs	r3, r3, #8
 8003666:	f003 0307 	and.w	r3, r3, #7
}
 800366a:	4618      	mov	r0, r3
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr
 8003674:	e000ed00 	.word	0xe000ed00

08003678 <__NVIC_EnableIRQ>:
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	4603      	mov	r3, r0
 8003680:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003686:	2b00      	cmp	r3, #0
 8003688:	db0b      	blt.n	80036a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800368a:	79fb      	ldrb	r3, [r7, #7]
 800368c:	f003 021f 	and.w	r2, r3, #31
 8003690:	4907      	ldr	r1, [pc, #28]	; (80036b0 <__NVIC_EnableIRQ+0x38>)
 8003692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003696:	095b      	lsrs	r3, r3, #5
 8003698:	2001      	movs	r0, #1
 800369a:	fa00 f202 	lsl.w	r2, r0, r2
 800369e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80036a2:	bf00      	nop
 80036a4:	370c      	adds	r7, #12
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	e000e100 	.word	0xe000e100

080036b4 <__NVIC_DisableIRQ>:
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	4603      	mov	r3, r0
 80036bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	db12      	blt.n	80036ec <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036c6:	79fb      	ldrb	r3, [r7, #7]
 80036c8:	f003 021f 	and.w	r2, r3, #31
 80036cc:	490a      	ldr	r1, [pc, #40]	; (80036f8 <__NVIC_DisableIRQ+0x44>)
 80036ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d2:	095b      	lsrs	r3, r3, #5
 80036d4:	2001      	movs	r0, #1
 80036d6:	fa00 f202 	lsl.w	r2, r0, r2
 80036da:	3320      	adds	r3, #32
 80036dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80036e0:	f3bf 8f4f 	dsb	sy
}
 80036e4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80036e6:	f3bf 8f6f 	isb	sy
}
 80036ea:	bf00      	nop
}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr
 80036f8:	e000e100 	.word	0xe000e100

080036fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	4603      	mov	r3, r0
 8003704:	6039      	str	r1, [r7, #0]
 8003706:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800370c:	2b00      	cmp	r3, #0
 800370e:	db0a      	blt.n	8003726 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	b2da      	uxtb	r2, r3
 8003714:	490c      	ldr	r1, [pc, #48]	; (8003748 <__NVIC_SetPriority+0x4c>)
 8003716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800371a:	0112      	lsls	r2, r2, #4
 800371c:	b2d2      	uxtb	r2, r2
 800371e:	440b      	add	r3, r1
 8003720:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003724:	e00a      	b.n	800373c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	b2da      	uxtb	r2, r3
 800372a:	4908      	ldr	r1, [pc, #32]	; (800374c <__NVIC_SetPriority+0x50>)
 800372c:	79fb      	ldrb	r3, [r7, #7]
 800372e:	f003 030f 	and.w	r3, r3, #15
 8003732:	3b04      	subs	r3, #4
 8003734:	0112      	lsls	r2, r2, #4
 8003736:	b2d2      	uxtb	r2, r2
 8003738:	440b      	add	r3, r1
 800373a:	761a      	strb	r2, [r3, #24]
}
 800373c:	bf00      	nop
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr
 8003748:	e000e100 	.word	0xe000e100
 800374c:	e000ed00 	.word	0xe000ed00

08003750 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003750:	b480      	push	{r7}
 8003752:	b089      	sub	sp, #36	; 0x24
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f003 0307 	and.w	r3, r3, #7
 8003762:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	f1c3 0307 	rsb	r3, r3, #7
 800376a:	2b04      	cmp	r3, #4
 800376c:	bf28      	it	cs
 800376e:	2304      	movcs	r3, #4
 8003770:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	3304      	adds	r3, #4
 8003776:	2b06      	cmp	r3, #6
 8003778:	d902      	bls.n	8003780 <NVIC_EncodePriority+0x30>
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	3b03      	subs	r3, #3
 800377e:	e000      	b.n	8003782 <NVIC_EncodePriority+0x32>
 8003780:	2300      	movs	r3, #0
 8003782:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003784:	f04f 32ff 	mov.w	r2, #4294967295
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	fa02 f303 	lsl.w	r3, r2, r3
 800378e:	43da      	mvns	r2, r3
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	401a      	ands	r2, r3
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003798:	f04f 31ff 	mov.w	r1, #4294967295
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	fa01 f303 	lsl.w	r3, r1, r3
 80037a2:	43d9      	mvns	r1, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037a8:	4313      	orrs	r3, r2
         );
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3724      	adds	r7, #36	; 0x24
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
	...

080037b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	3b01      	subs	r3, #1
 80037c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037c8:	d301      	bcc.n	80037ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037ca:	2301      	movs	r3, #1
 80037cc:	e00f      	b.n	80037ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037ce:	4a0a      	ldr	r2, [pc, #40]	; (80037f8 <SysTick_Config+0x40>)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	3b01      	subs	r3, #1
 80037d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037d6:	210f      	movs	r1, #15
 80037d8:	f04f 30ff 	mov.w	r0, #4294967295
 80037dc:	f7ff ff8e 	bl	80036fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037e0:	4b05      	ldr	r3, [pc, #20]	; (80037f8 <SysTick_Config+0x40>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037e6:	4b04      	ldr	r3, [pc, #16]	; (80037f8 <SysTick_Config+0x40>)
 80037e8:	2207      	movs	r2, #7
 80037ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	e000e010 	.word	0xe000e010

080037fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f7ff ff05 	bl	8003614 <__NVIC_SetPriorityGrouping>
}
 800380a:	bf00      	nop
 800380c:	3708      	adds	r7, #8
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003812:	b580      	push	{r7, lr}
 8003814:	b086      	sub	sp, #24
 8003816:	af00      	add	r7, sp, #0
 8003818:	4603      	mov	r3, r0
 800381a:	60b9      	str	r1, [r7, #8]
 800381c:	607a      	str	r2, [r7, #4]
 800381e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003820:	2300      	movs	r3, #0
 8003822:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003824:	f7ff ff1a 	bl	800365c <__NVIC_GetPriorityGrouping>
 8003828:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	68b9      	ldr	r1, [r7, #8]
 800382e:	6978      	ldr	r0, [r7, #20]
 8003830:	f7ff ff8e 	bl	8003750 <NVIC_EncodePriority>
 8003834:	4602      	mov	r2, r0
 8003836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800383a:	4611      	mov	r1, r2
 800383c:	4618      	mov	r0, r3
 800383e:	f7ff ff5d 	bl	80036fc <__NVIC_SetPriority>
}
 8003842:	bf00      	nop
 8003844:	3718      	adds	r7, #24
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800384a:	b580      	push	{r7, lr}
 800384c:	b082      	sub	sp, #8
 800384e:	af00      	add	r7, sp, #0
 8003850:	4603      	mov	r3, r0
 8003852:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003858:	4618      	mov	r0, r3
 800385a:	f7ff ff0d 	bl	8003678 <__NVIC_EnableIRQ>
}
 800385e:	bf00      	nop
 8003860:	3708      	adds	r7, #8
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003866:	b580      	push	{r7, lr}
 8003868:	b082      	sub	sp, #8
 800386a:	af00      	add	r7, sp, #0
 800386c:	4603      	mov	r3, r0
 800386e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003874:	4618      	mov	r0, r3
 8003876:	f7ff ff1d 	bl	80036b4 <__NVIC_DisableIRQ>
}
 800387a:	bf00      	nop
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003882:	b580      	push	{r7, lr}
 8003884:	b082      	sub	sp, #8
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f7ff ff94 	bl	80037b8 <SysTick_Config>
 8003890:	4603      	mov	r3, r0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3708      	adds	r7, #8
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800389a:	b480      	push	{r7}
 800389c:	b083      	sub	sp, #12
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d004      	beq.n	80038b8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2280      	movs	r2, #128	; 0x80
 80038b2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e00c      	b.n	80038d2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2205      	movs	r2, #5
 80038bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f022 0201 	bic.w	r2, r2, #1
 80038ce:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
	...

080038e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b089      	sub	sp, #36	; 0x24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80038ea:	2300      	movs	r3, #0
 80038ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80038ee:	2300      	movs	r3, #0
 80038f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80038f2:	2300      	movs	r3, #0
 80038f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038f6:	2300      	movs	r3, #0
 80038f8:	61fb      	str	r3, [r7, #28]
 80038fa:	e159      	b.n	8003bb0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038fc:	2201      	movs	r2, #1
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
 8003904:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	4013      	ands	r3, r2
 800390e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	429a      	cmp	r2, r3
 8003916:	f040 8148 	bne.w	8003baa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f003 0303 	and.w	r3, r3, #3
 8003922:	2b01      	cmp	r3, #1
 8003924:	d005      	beq.n	8003932 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800392e:	2b02      	cmp	r3, #2
 8003930:	d130      	bne.n	8003994 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	2203      	movs	r2, #3
 800393e:	fa02 f303 	lsl.w	r3, r2, r3
 8003942:	43db      	mvns	r3, r3
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	4013      	ands	r3, r2
 8003948:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	68da      	ldr	r2, [r3, #12]
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	005b      	lsls	r3, r3, #1
 8003952:	fa02 f303 	lsl.w	r3, r2, r3
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	4313      	orrs	r3, r2
 800395a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	69ba      	ldr	r2, [r7, #24]
 8003960:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003968:	2201      	movs	r2, #1
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	fa02 f303 	lsl.w	r3, r2, r3
 8003970:	43db      	mvns	r3, r3
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	4013      	ands	r3, r2
 8003976:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	091b      	lsrs	r3, r3, #4
 800397e:	f003 0201 	and.w	r2, r3, #1
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	fa02 f303 	lsl.w	r3, r2, r3
 8003988:	69ba      	ldr	r2, [r7, #24]
 800398a:	4313      	orrs	r3, r2
 800398c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f003 0303 	and.w	r3, r3, #3
 800399c:	2b03      	cmp	r3, #3
 800399e:	d017      	beq.n	80039d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	005b      	lsls	r3, r3, #1
 80039aa:	2203      	movs	r2, #3
 80039ac:	fa02 f303 	lsl.w	r3, r2, r3
 80039b0:	43db      	mvns	r3, r3
 80039b2:	69ba      	ldr	r2, [r7, #24]
 80039b4:	4013      	ands	r3, r2
 80039b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	689a      	ldr	r2, [r3, #8]
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	005b      	lsls	r3, r3, #1
 80039c0:	fa02 f303 	lsl.w	r3, r2, r3
 80039c4:	69ba      	ldr	r2, [r7, #24]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f003 0303 	and.w	r3, r3, #3
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d123      	bne.n	8003a24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	08da      	lsrs	r2, r3, #3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	3208      	adds	r2, #8
 80039e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	f003 0307 	and.w	r3, r3, #7
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	220f      	movs	r2, #15
 80039f4:	fa02 f303 	lsl.w	r3, r2, r3
 80039f8:	43db      	mvns	r3, r3
 80039fa:	69ba      	ldr	r2, [r7, #24]
 80039fc:	4013      	ands	r3, r2
 80039fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	691a      	ldr	r2, [r3, #16]
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	f003 0307 	and.w	r3, r3, #7
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a10:	69ba      	ldr	r2, [r7, #24]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	08da      	lsrs	r2, r3, #3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	3208      	adds	r2, #8
 8003a1e:	69b9      	ldr	r1, [r7, #24]
 8003a20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	005b      	lsls	r3, r3, #1
 8003a2e:	2203      	movs	r2, #3
 8003a30:	fa02 f303 	lsl.w	r3, r2, r3
 8003a34:	43db      	mvns	r3, r3
 8003a36:	69ba      	ldr	r2, [r7, #24]
 8003a38:	4013      	ands	r3, r2
 8003a3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f003 0203 	and.w	r2, r3, #3
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	69ba      	ldr	r2, [r7, #24]
 8003a56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f000 80a2 	beq.w	8003baa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a66:	2300      	movs	r3, #0
 8003a68:	60fb      	str	r3, [r7, #12]
 8003a6a:	4b57      	ldr	r3, [pc, #348]	; (8003bc8 <HAL_GPIO_Init+0x2e8>)
 8003a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6e:	4a56      	ldr	r2, [pc, #344]	; (8003bc8 <HAL_GPIO_Init+0x2e8>)
 8003a70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a74:	6453      	str	r3, [r2, #68]	; 0x44
 8003a76:	4b54      	ldr	r3, [pc, #336]	; (8003bc8 <HAL_GPIO_Init+0x2e8>)
 8003a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a7e:	60fb      	str	r3, [r7, #12]
 8003a80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a82:	4a52      	ldr	r2, [pc, #328]	; (8003bcc <HAL_GPIO_Init+0x2ec>)
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	089b      	lsrs	r3, r3, #2
 8003a88:	3302      	adds	r3, #2
 8003a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	f003 0303 	and.w	r3, r3, #3
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	220f      	movs	r2, #15
 8003a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9e:	43db      	mvns	r3, r3
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a49      	ldr	r2, [pc, #292]	; (8003bd0 <HAL_GPIO_Init+0x2f0>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d019      	beq.n	8003ae2 <HAL_GPIO_Init+0x202>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a48      	ldr	r2, [pc, #288]	; (8003bd4 <HAL_GPIO_Init+0x2f4>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d013      	beq.n	8003ade <HAL_GPIO_Init+0x1fe>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a47      	ldr	r2, [pc, #284]	; (8003bd8 <HAL_GPIO_Init+0x2f8>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d00d      	beq.n	8003ada <HAL_GPIO_Init+0x1fa>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a46      	ldr	r2, [pc, #280]	; (8003bdc <HAL_GPIO_Init+0x2fc>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d007      	beq.n	8003ad6 <HAL_GPIO_Init+0x1f6>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a45      	ldr	r2, [pc, #276]	; (8003be0 <HAL_GPIO_Init+0x300>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d101      	bne.n	8003ad2 <HAL_GPIO_Init+0x1f2>
 8003ace:	2304      	movs	r3, #4
 8003ad0:	e008      	b.n	8003ae4 <HAL_GPIO_Init+0x204>
 8003ad2:	2307      	movs	r3, #7
 8003ad4:	e006      	b.n	8003ae4 <HAL_GPIO_Init+0x204>
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e004      	b.n	8003ae4 <HAL_GPIO_Init+0x204>
 8003ada:	2302      	movs	r3, #2
 8003adc:	e002      	b.n	8003ae4 <HAL_GPIO_Init+0x204>
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e000      	b.n	8003ae4 <HAL_GPIO_Init+0x204>
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	69fa      	ldr	r2, [r7, #28]
 8003ae6:	f002 0203 	and.w	r2, r2, #3
 8003aea:	0092      	lsls	r2, r2, #2
 8003aec:	4093      	lsls	r3, r2
 8003aee:	69ba      	ldr	r2, [r7, #24]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003af4:	4935      	ldr	r1, [pc, #212]	; (8003bcc <HAL_GPIO_Init+0x2ec>)
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	089b      	lsrs	r3, r3, #2
 8003afa:	3302      	adds	r3, #2
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b02:	4b38      	ldr	r3, [pc, #224]	; (8003be4 <HAL_GPIO_Init+0x304>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	43db      	mvns	r3, r3
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	4013      	ands	r3, r2
 8003b10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b26:	4a2f      	ldr	r2, [pc, #188]	; (8003be4 <HAL_GPIO_Init+0x304>)
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003b2c:	4b2d      	ldr	r3, [pc, #180]	; (8003be4 <HAL_GPIO_Init+0x304>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	43db      	mvns	r3, r3
 8003b36:	69ba      	ldr	r2, [r7, #24]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d003      	beq.n	8003b50 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b50:	4a24      	ldr	r2, [pc, #144]	; (8003be4 <HAL_GPIO_Init+0x304>)
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b56:	4b23      	ldr	r3, [pc, #140]	; (8003be4 <HAL_GPIO_Init+0x304>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	43db      	mvns	r3, r3
 8003b60:	69ba      	ldr	r2, [r7, #24]
 8003b62:	4013      	ands	r3, r2
 8003b64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d003      	beq.n	8003b7a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003b72:	69ba      	ldr	r2, [r7, #24]
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b7a:	4a1a      	ldr	r2, [pc, #104]	; (8003be4 <HAL_GPIO_Init+0x304>)
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b80:	4b18      	ldr	r3, [pc, #96]	; (8003be4 <HAL_GPIO_Init+0x304>)
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	43db      	mvns	r3, r3
 8003b8a:	69ba      	ldr	r2, [r7, #24]
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d003      	beq.n	8003ba4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ba4:	4a0f      	ldr	r2, [pc, #60]	; (8003be4 <HAL_GPIO_Init+0x304>)
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	3301      	adds	r3, #1
 8003bae:	61fb      	str	r3, [r7, #28]
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	2b0f      	cmp	r3, #15
 8003bb4:	f67f aea2 	bls.w	80038fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003bb8:	bf00      	nop
 8003bba:	bf00      	nop
 8003bbc:	3724      	adds	r7, #36	; 0x24
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	40023800 	.word	0x40023800
 8003bcc:	40013800 	.word	0x40013800
 8003bd0:	40020000 	.word	0x40020000
 8003bd4:	40020400 	.word	0x40020400
 8003bd8:	40020800 	.word	0x40020800
 8003bdc:	40020c00 	.word	0x40020c00
 8003be0:	40021000 	.word	0x40021000
 8003be4:	40013c00 	.word	0x40013c00

08003be8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	807b      	strh	r3, [r7, #2]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bf8:	787b      	ldrb	r3, [r7, #1]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d003      	beq.n	8003c06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bfe:	887a      	ldrh	r2, [r7, #2]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c04:	e003      	b.n	8003c0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c06:	887b      	ldrh	r3, [r7, #2]
 8003c08:	041a      	lsls	r2, r3, #16
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	619a      	str	r2, [r3, #24]
}
 8003c0e:	bf00      	nop
 8003c10:	370c      	adds	r7, #12
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
	...

08003c1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e12b      	b.n	8003e86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d106      	bne.n	8003c48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f7fe fe42 	bl	80028cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2224      	movs	r2, #36	; 0x24
 8003c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f022 0201 	bic.w	r2, r2, #1
 8003c5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c80:	f001 f966 	bl	8004f50 <HAL_RCC_GetPCLK1Freq>
 8003c84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	4a81      	ldr	r2, [pc, #516]	; (8003e90 <HAL_I2C_Init+0x274>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d807      	bhi.n	8003ca0 <HAL_I2C_Init+0x84>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	4a80      	ldr	r2, [pc, #512]	; (8003e94 <HAL_I2C_Init+0x278>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	bf94      	ite	ls
 8003c98:	2301      	movls	r3, #1
 8003c9a:	2300      	movhi	r3, #0
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	e006      	b.n	8003cae <HAL_I2C_Init+0x92>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	4a7d      	ldr	r2, [pc, #500]	; (8003e98 <HAL_I2C_Init+0x27c>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	bf94      	ite	ls
 8003ca8:	2301      	movls	r3, #1
 8003caa:	2300      	movhi	r3, #0
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e0e7      	b.n	8003e86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	4a78      	ldr	r2, [pc, #480]	; (8003e9c <HAL_I2C_Init+0x280>)
 8003cba:	fba2 2303 	umull	r2, r3, r2, r3
 8003cbe:	0c9b      	lsrs	r3, r3, #18
 8003cc0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68ba      	ldr	r2, [r7, #8]
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	6a1b      	ldr	r3, [r3, #32]
 8003cdc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	4a6a      	ldr	r2, [pc, #424]	; (8003e90 <HAL_I2C_Init+0x274>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d802      	bhi.n	8003cf0 <HAL_I2C_Init+0xd4>
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	3301      	adds	r3, #1
 8003cee:	e009      	b.n	8003d04 <HAL_I2C_Init+0xe8>
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003cf6:	fb02 f303 	mul.w	r3, r2, r3
 8003cfa:	4a69      	ldr	r2, [pc, #420]	; (8003ea0 <HAL_I2C_Init+0x284>)
 8003cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8003d00:	099b      	lsrs	r3, r3, #6
 8003d02:	3301      	adds	r3, #1
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	6812      	ldr	r2, [r2, #0]
 8003d08:	430b      	orrs	r3, r1
 8003d0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	69db      	ldr	r3, [r3, #28]
 8003d12:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003d16:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	495c      	ldr	r1, [pc, #368]	; (8003e90 <HAL_I2C_Init+0x274>)
 8003d20:	428b      	cmp	r3, r1
 8003d22:	d819      	bhi.n	8003d58 <HAL_I2C_Init+0x13c>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	1e59      	subs	r1, r3, #1
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	005b      	lsls	r3, r3, #1
 8003d2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d32:	1c59      	adds	r1, r3, #1
 8003d34:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d38:	400b      	ands	r3, r1
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00a      	beq.n	8003d54 <HAL_I2C_Init+0x138>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	1e59      	subs	r1, r3, #1
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	005b      	lsls	r3, r3, #1
 8003d48:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d52:	e051      	b.n	8003df8 <HAL_I2C_Init+0x1dc>
 8003d54:	2304      	movs	r3, #4
 8003d56:	e04f      	b.n	8003df8 <HAL_I2C_Init+0x1dc>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d111      	bne.n	8003d84 <HAL_I2C_Init+0x168>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	1e58      	subs	r0, r3, #1
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6859      	ldr	r1, [r3, #4]
 8003d68:	460b      	mov	r3, r1
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	440b      	add	r3, r1
 8003d6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d72:	3301      	adds	r3, #1
 8003d74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	bf0c      	ite	eq
 8003d7c:	2301      	moveq	r3, #1
 8003d7e:	2300      	movne	r3, #0
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	e012      	b.n	8003daa <HAL_I2C_Init+0x18e>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	1e58      	subs	r0, r3, #1
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6859      	ldr	r1, [r3, #4]
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	440b      	add	r3, r1
 8003d92:	0099      	lsls	r1, r3, #2
 8003d94:	440b      	add	r3, r1
 8003d96:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	bf0c      	ite	eq
 8003da4:	2301      	moveq	r3, #1
 8003da6:	2300      	movne	r3, #0
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d001      	beq.n	8003db2 <HAL_I2C_Init+0x196>
 8003dae:	2301      	movs	r3, #1
 8003db0:	e022      	b.n	8003df8 <HAL_I2C_Init+0x1dc>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d10e      	bne.n	8003dd8 <HAL_I2C_Init+0x1bc>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	1e58      	subs	r0, r3, #1
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6859      	ldr	r1, [r3, #4]
 8003dc2:	460b      	mov	r3, r1
 8003dc4:	005b      	lsls	r3, r3, #1
 8003dc6:	440b      	add	r3, r1
 8003dc8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dcc:	3301      	adds	r3, #1
 8003dce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dd6:	e00f      	b.n	8003df8 <HAL_I2C_Init+0x1dc>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	1e58      	subs	r0, r3, #1
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6859      	ldr	r1, [r3, #4]
 8003de0:	460b      	mov	r3, r1
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	440b      	add	r3, r1
 8003de6:	0099      	lsls	r1, r3, #2
 8003de8:	440b      	add	r3, r1
 8003dea:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dee:	3301      	adds	r3, #1
 8003df0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003df4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003df8:	6879      	ldr	r1, [r7, #4]
 8003dfa:	6809      	ldr	r1, [r1, #0]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	69da      	ldr	r2, [r3, #28]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	431a      	orrs	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003e26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	6911      	ldr	r1, [r2, #16]
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	68d2      	ldr	r2, [r2, #12]
 8003e32:	4311      	orrs	r1, r2
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	6812      	ldr	r2, [r2, #0]
 8003e38:	430b      	orrs	r3, r1
 8003e3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	695a      	ldr	r2, [r3, #20]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	430a      	orrs	r2, r1
 8003e56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f042 0201 	orr.w	r2, r2, #1
 8003e66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2220      	movs	r2, #32
 8003e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3710      	adds	r7, #16
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	000186a0 	.word	0x000186a0
 8003e94:	001e847f 	.word	0x001e847f
 8003e98:	003d08ff 	.word	0x003d08ff
 8003e9c:	431bde83 	.word	0x431bde83
 8003ea0:	10624dd3 	.word	0x10624dd3

08003ea4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b088      	sub	sp, #32
 8003ea8:	af02      	add	r7, sp, #8
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	607a      	str	r2, [r7, #4]
 8003eae:	461a      	mov	r2, r3
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	817b      	strh	r3, [r7, #10]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003eb8:	f7ff fb7c 	bl	80035b4 <HAL_GetTick>
 8003ebc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b20      	cmp	r3, #32
 8003ec8:	f040 80e0 	bne.w	800408c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	9300      	str	r3, [sp, #0]
 8003ed0:	2319      	movs	r3, #25
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	4970      	ldr	r1, [pc, #448]	; (8004098 <HAL_I2C_Master_Transmit+0x1f4>)
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f000 fa92 	bl	8004400 <I2C_WaitOnFlagUntilTimeout>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003ee2:	2302      	movs	r3, #2
 8003ee4:	e0d3      	b.n	800408e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d101      	bne.n	8003ef4 <HAL_I2C_Master_Transmit+0x50>
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	e0cc      	b.n	800408e <HAL_I2C_Master_Transmit+0x1ea>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d007      	beq.n	8003f1a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f042 0201 	orr.w	r2, r2, #1
 8003f18:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f28:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2221      	movs	r2, #33	; 0x21
 8003f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2210      	movs	r2, #16
 8003f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	893a      	ldrh	r2, [r7, #8]
 8003f4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	4a50      	ldr	r2, [pc, #320]	; (800409c <HAL_I2C_Master_Transmit+0x1f8>)
 8003f5a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003f5c:	8979      	ldrh	r1, [r7, #10]
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	6a3a      	ldr	r2, [r7, #32]
 8003f62:	68f8      	ldr	r0, [r7, #12]
 8003f64:	f000 f9ca 	bl	80042fc <I2C_MasterRequestWrite>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e08d      	b.n	800408e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f72:	2300      	movs	r3, #0
 8003f74:	613b      	str	r3, [r7, #16]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	695b      	ldr	r3, [r3, #20]
 8003f7c:	613b      	str	r3, [r7, #16]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	613b      	str	r3, [r7, #16]
 8003f86:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003f88:	e066      	b.n	8004058 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	6a39      	ldr	r1, [r7, #32]
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	f000 fb0c 	bl	80045ac <I2C_WaitOnTXEFlagUntilTimeout>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00d      	beq.n	8003fb6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9e:	2b04      	cmp	r3, #4
 8003fa0:	d107      	bne.n	8003fb2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fb0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e06b      	b.n	800408e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fba:	781a      	ldrb	r2, [r3, #0]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc6:	1c5a      	adds	r2, r3, #1
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	f003 0304 	and.w	r3, r3, #4
 8003ff0:	2b04      	cmp	r3, #4
 8003ff2:	d11b      	bne.n	800402c <HAL_I2C_Master_Transmit+0x188>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d017      	beq.n	800402c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004000:	781a      	ldrb	r2, [r3, #0]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400c:	1c5a      	adds	r2, r3, #1
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004016:	b29b      	uxth	r3, r3
 8004018:	3b01      	subs	r3, #1
 800401a:	b29a      	uxth	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004024:	3b01      	subs	r3, #1
 8004026:	b29a      	uxth	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800402c:	697a      	ldr	r2, [r7, #20]
 800402e:	6a39      	ldr	r1, [r7, #32]
 8004030:	68f8      	ldr	r0, [r7, #12]
 8004032:	f000 fafc 	bl	800462e <I2C_WaitOnBTFFlagUntilTimeout>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00d      	beq.n	8004058 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004040:	2b04      	cmp	r3, #4
 8004042:	d107      	bne.n	8004054 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004052:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e01a      	b.n	800408e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800405c:	2b00      	cmp	r3, #0
 800405e:	d194      	bne.n	8003f8a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800406e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2220      	movs	r2, #32
 8004074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2200      	movs	r2, #0
 800407c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004088:	2300      	movs	r3, #0
 800408a:	e000      	b.n	800408e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800408c:	2302      	movs	r3, #2
  }
}
 800408e:	4618      	mov	r0, r3
 8004090:	3718      	adds	r7, #24
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	00100002 	.word	0x00100002
 800409c:	ffff0000 	.word	0xffff0000

080040a0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b08a      	sub	sp, #40	; 0x28
 80040a4:	af02      	add	r7, sp, #8
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	607a      	str	r2, [r7, #4]
 80040aa:	603b      	str	r3, [r7, #0]
 80040ac:	460b      	mov	r3, r1
 80040ae:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80040b0:	f7ff fa80 	bl	80035b4 <HAL_GetTick>
 80040b4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80040b6:	2301      	movs	r3, #1
 80040b8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b20      	cmp	r3, #32
 80040c4:	f040 8111 	bne.w	80042ea <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	9300      	str	r3, [sp, #0]
 80040cc:	2319      	movs	r3, #25
 80040ce:	2201      	movs	r2, #1
 80040d0:	4988      	ldr	r1, [pc, #544]	; (80042f4 <HAL_I2C_IsDeviceReady+0x254>)
 80040d2:	68f8      	ldr	r0, [r7, #12]
 80040d4:	f000 f994 	bl	8004400 <I2C_WaitOnFlagUntilTimeout>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d001      	beq.n	80040e2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80040de:	2302      	movs	r3, #2
 80040e0:	e104      	b.n	80042ec <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d101      	bne.n	80040f0 <HAL_I2C_IsDeviceReady+0x50>
 80040ec:	2302      	movs	r3, #2
 80040ee:	e0fd      	b.n	80042ec <HAL_I2C_IsDeviceReady+0x24c>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0301 	and.w	r3, r3, #1
 8004102:	2b01      	cmp	r3, #1
 8004104:	d007      	beq.n	8004116 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f042 0201 	orr.w	r2, r2, #1
 8004114:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004124:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2224      	movs	r2, #36	; 0x24
 800412a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	4a70      	ldr	r2, [pc, #448]	; (80042f8 <HAL_I2C_IsDeviceReady+0x258>)
 8004138:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004148:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	9300      	str	r3, [sp, #0]
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	2200      	movs	r2, #0
 8004152:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004156:	68f8      	ldr	r0, [r7, #12]
 8004158:	f000 f952 	bl	8004400 <I2C_WaitOnFlagUntilTimeout>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00d      	beq.n	800417e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800416c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004170:	d103      	bne.n	800417a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004178:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e0b6      	b.n	80042ec <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800417e:	897b      	ldrh	r3, [r7, #10]
 8004180:	b2db      	uxtb	r3, r3
 8004182:	461a      	mov	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800418c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800418e:	f7ff fa11 	bl	80035b4 <HAL_GetTick>
 8004192:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	2b02      	cmp	r3, #2
 80041a0:	bf0c      	ite	eq
 80041a2:	2301      	moveq	r3, #1
 80041a4:	2300      	movne	r3, #0
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	695b      	ldr	r3, [r3, #20]
 80041b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041b8:	bf0c      	ite	eq
 80041ba:	2301      	moveq	r3, #1
 80041bc:	2300      	movne	r3, #0
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80041c2:	e025      	b.n	8004210 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80041c4:	f7ff f9f6 	bl	80035b4 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	683a      	ldr	r2, [r7, #0]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d302      	bcc.n	80041da <HAL_I2C_IsDeviceReady+0x13a>
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d103      	bne.n	80041e2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	22a0      	movs	r2, #160	; 0xa0
 80041de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	695b      	ldr	r3, [r3, #20]
 80041e8:	f003 0302 	and.w	r3, r3, #2
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	bf0c      	ite	eq
 80041f0:	2301      	moveq	r3, #1
 80041f2:	2300      	movne	r3, #0
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004202:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004206:	bf0c      	ite	eq
 8004208:	2301      	moveq	r3, #1
 800420a:	2300      	movne	r3, #0
 800420c:	b2db      	uxtb	r3, r3
 800420e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004216:	b2db      	uxtb	r3, r3
 8004218:	2ba0      	cmp	r3, #160	; 0xa0
 800421a:	d005      	beq.n	8004228 <HAL_I2C_IsDeviceReady+0x188>
 800421c:	7dfb      	ldrb	r3, [r7, #23]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d102      	bne.n	8004228 <HAL_I2C_IsDeviceReady+0x188>
 8004222:	7dbb      	ldrb	r3, [r7, #22]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d0cd      	beq.n	80041c4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2220      	movs	r2, #32
 800422c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b02      	cmp	r3, #2
 800423c:	d129      	bne.n	8004292 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800424c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800424e:	2300      	movs	r3, #0
 8004250:	613b      	str	r3, [r7, #16]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	695b      	ldr	r3, [r3, #20]
 8004258:	613b      	str	r3, [r7, #16]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	613b      	str	r3, [r7, #16]
 8004262:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	9300      	str	r3, [sp, #0]
 8004268:	2319      	movs	r3, #25
 800426a:	2201      	movs	r2, #1
 800426c:	4921      	ldr	r1, [pc, #132]	; (80042f4 <HAL_I2C_IsDeviceReady+0x254>)
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f000 f8c6 	bl	8004400 <I2C_WaitOnFlagUntilTimeout>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e036      	b.n	80042ec <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2220      	movs	r2, #32
 8004282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800428e:	2300      	movs	r3, #0
 8004290:	e02c      	b.n	80042ec <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042a0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042aa:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	9300      	str	r3, [sp, #0]
 80042b0:	2319      	movs	r3, #25
 80042b2:	2201      	movs	r2, #1
 80042b4:	490f      	ldr	r1, [pc, #60]	; (80042f4 <HAL_I2C_IsDeviceReady+0x254>)
 80042b6:	68f8      	ldr	r0, [r7, #12]
 80042b8:	f000 f8a2 	bl	8004400 <I2C_WaitOnFlagUntilTimeout>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d001      	beq.n	80042c6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e012      	b.n	80042ec <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	3301      	adds	r3, #1
 80042ca:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	f4ff af32 	bcc.w	800413a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2220      	movs	r2, #32
 80042da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e000      	b.n	80042ec <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80042ea:	2302      	movs	r3, #2
  }
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3720      	adds	r7, #32
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	00100002 	.word	0x00100002
 80042f8:	ffff0000 	.word	0xffff0000

080042fc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b088      	sub	sp, #32
 8004300:	af02      	add	r7, sp, #8
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	607a      	str	r2, [r7, #4]
 8004306:	603b      	str	r3, [r7, #0]
 8004308:	460b      	mov	r3, r1
 800430a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004310:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	2b08      	cmp	r3, #8
 8004316:	d006      	beq.n	8004326 <I2C_MasterRequestWrite+0x2a>
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d003      	beq.n	8004326 <I2C_MasterRequestWrite+0x2a>
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004324:	d108      	bne.n	8004338 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004334:	601a      	str	r2, [r3, #0]
 8004336:	e00b      	b.n	8004350 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433c:	2b12      	cmp	r3, #18
 800433e:	d107      	bne.n	8004350 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800434e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	9300      	str	r3, [sp, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800435c:	68f8      	ldr	r0, [r7, #12]
 800435e:	f000 f84f 	bl	8004400 <I2C_WaitOnFlagUntilTimeout>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00d      	beq.n	8004384 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004372:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004376:	d103      	bne.n	8004380 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800437e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e035      	b.n	80043f0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800438c:	d108      	bne.n	80043a0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800438e:	897b      	ldrh	r3, [r7, #10]
 8004390:	b2db      	uxtb	r3, r3
 8004392:	461a      	mov	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800439c:	611a      	str	r2, [r3, #16]
 800439e:	e01b      	b.n	80043d8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80043a0:	897b      	ldrh	r3, [r7, #10]
 80043a2:	11db      	asrs	r3, r3, #7
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	f003 0306 	and.w	r3, r3, #6
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	f063 030f 	orn	r3, r3, #15
 80043b0:	b2da      	uxtb	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	490e      	ldr	r1, [pc, #56]	; (80043f8 <I2C_MasterRequestWrite+0xfc>)
 80043be:	68f8      	ldr	r0, [r7, #12]
 80043c0:	f000 f875 	bl	80044ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d001      	beq.n	80043ce <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e010      	b.n	80043f0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80043ce:	897b      	ldrh	r3, [r7, #10]
 80043d0:	b2da      	uxtb	r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	4907      	ldr	r1, [pc, #28]	; (80043fc <I2C_MasterRequestWrite+0x100>)
 80043de:	68f8      	ldr	r0, [r7, #12]
 80043e0:	f000 f865 	bl	80044ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d001      	beq.n	80043ee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e000      	b.n	80043f0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3718      	adds	r7, #24
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	00010008 	.word	0x00010008
 80043fc:	00010002 	.word	0x00010002

08004400 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	603b      	str	r3, [r7, #0]
 800440c:	4613      	mov	r3, r2
 800440e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004410:	e025      	b.n	800445e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004418:	d021      	beq.n	800445e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800441a:	f7ff f8cb 	bl	80035b4 <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	683a      	ldr	r2, [r7, #0]
 8004426:	429a      	cmp	r2, r3
 8004428:	d302      	bcc.n	8004430 <I2C_WaitOnFlagUntilTimeout+0x30>
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d116      	bne.n	800445e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2200      	movs	r2, #0
 8004434:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2220      	movs	r2, #32
 800443a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444a:	f043 0220 	orr.w	r2, r3, #32
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e023      	b.n	80044a6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	0c1b      	lsrs	r3, r3, #16
 8004462:	b2db      	uxtb	r3, r3
 8004464:	2b01      	cmp	r3, #1
 8004466:	d10d      	bne.n	8004484 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	43da      	mvns	r2, r3
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	4013      	ands	r3, r2
 8004474:	b29b      	uxth	r3, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	bf0c      	ite	eq
 800447a:	2301      	moveq	r3, #1
 800447c:	2300      	movne	r3, #0
 800447e:	b2db      	uxtb	r3, r3
 8004480:	461a      	mov	r2, r3
 8004482:	e00c      	b.n	800449e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	43da      	mvns	r2, r3
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	4013      	ands	r3, r2
 8004490:	b29b      	uxth	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	bf0c      	ite	eq
 8004496:	2301      	moveq	r3, #1
 8004498:	2300      	movne	r3, #0
 800449a:	b2db      	uxtb	r3, r3
 800449c:	461a      	mov	r2, r3
 800449e:	79fb      	ldrb	r3, [r7, #7]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d0b6      	beq.n	8004412 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3710      	adds	r7, #16
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b084      	sub	sp, #16
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	60f8      	str	r0, [r7, #12]
 80044b6:	60b9      	str	r1, [r7, #8]
 80044b8:	607a      	str	r2, [r7, #4]
 80044ba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044bc:	e051      	b.n	8004562 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	695b      	ldr	r3, [r3, #20]
 80044c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044cc:	d123      	bne.n	8004516 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044dc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044e6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2220      	movs	r2, #32
 80044f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004502:	f043 0204 	orr.w	r2, r3, #4
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e046      	b.n	80045a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800451c:	d021      	beq.n	8004562 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800451e:	f7ff f849 	bl	80035b4 <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	429a      	cmp	r2, r3
 800452c:	d302      	bcc.n	8004534 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d116      	bne.n	8004562 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2220      	movs	r2, #32
 800453e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454e:	f043 0220 	orr.w	r2, r3, #32
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e020      	b.n	80045a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	0c1b      	lsrs	r3, r3, #16
 8004566:	b2db      	uxtb	r3, r3
 8004568:	2b01      	cmp	r3, #1
 800456a:	d10c      	bne.n	8004586 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	43da      	mvns	r2, r3
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	4013      	ands	r3, r2
 8004578:	b29b      	uxth	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	bf14      	ite	ne
 800457e:	2301      	movne	r3, #1
 8004580:	2300      	moveq	r3, #0
 8004582:	b2db      	uxtb	r3, r3
 8004584:	e00b      	b.n	800459e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	43da      	mvns	r2, r3
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	4013      	ands	r3, r2
 8004592:	b29b      	uxth	r3, r3
 8004594:	2b00      	cmp	r3, #0
 8004596:	bf14      	ite	ne
 8004598:	2301      	movne	r3, #1
 800459a:	2300      	moveq	r3, #0
 800459c:	b2db      	uxtb	r3, r3
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d18d      	bne.n	80044be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80045a2:	2300      	movs	r3, #0
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3710      	adds	r7, #16
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045b8:	e02d      	b.n	8004616 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045ba:	68f8      	ldr	r0, [r7, #12]
 80045bc:	f000 f878 	bl	80046b0 <I2C_IsAcknowledgeFailed>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d001      	beq.n	80045ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e02d      	b.n	8004626 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d0:	d021      	beq.n	8004616 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045d2:	f7fe ffef 	bl	80035b4 <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	68ba      	ldr	r2, [r7, #8]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d302      	bcc.n	80045e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d116      	bne.n	8004616 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2220      	movs	r2, #32
 80045f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004602:	f043 0220 	orr.w	r2, r3, #32
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e007      	b.n	8004626 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004620:	2b80      	cmp	r3, #128	; 0x80
 8004622:	d1ca      	bne.n	80045ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3710      	adds	r7, #16
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800462e:	b580      	push	{r7, lr}
 8004630:	b084      	sub	sp, #16
 8004632:	af00      	add	r7, sp, #0
 8004634:	60f8      	str	r0, [r7, #12]
 8004636:	60b9      	str	r1, [r7, #8]
 8004638:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800463a:	e02d      	b.n	8004698 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f000 f837 	bl	80046b0 <I2C_IsAcknowledgeFailed>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d001      	beq.n	800464c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e02d      	b.n	80046a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004652:	d021      	beq.n	8004698 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004654:	f7fe ffae 	bl	80035b4 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	68ba      	ldr	r2, [r7, #8]
 8004660:	429a      	cmp	r2, r3
 8004662:	d302      	bcc.n	800466a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d116      	bne.n	8004698 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2220      	movs	r2, #32
 8004674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004684:	f043 0220 	orr.w	r2, r3, #32
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2200      	movs	r2, #0
 8004690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e007      	b.n	80046a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	f003 0304 	and.w	r3, r3, #4
 80046a2:	2b04      	cmp	r3, #4
 80046a4:	d1ca      	bne.n	800463c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3710      	adds	r7, #16
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	695b      	ldr	r3, [r3, #20]
 80046be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046c6:	d11b      	bne.n	8004700 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046d0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2220      	movs	r2, #32
 80046dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ec:	f043 0204 	orr.w	r2, r3, #4
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e000      	b.n	8004702 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	370c      	adds	r7, #12
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
	...

08004710 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d101      	bne.n	8004722 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e264      	b.n	8004bec <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b00      	cmp	r3, #0
 800472c:	d075      	beq.n	800481a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800472e:	4ba3      	ldr	r3, [pc, #652]	; (80049bc <HAL_RCC_OscConfig+0x2ac>)
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f003 030c 	and.w	r3, r3, #12
 8004736:	2b04      	cmp	r3, #4
 8004738:	d00c      	beq.n	8004754 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800473a:	4ba0      	ldr	r3, [pc, #640]	; (80049bc <HAL_RCC_OscConfig+0x2ac>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004742:	2b08      	cmp	r3, #8
 8004744:	d112      	bne.n	800476c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004746:	4b9d      	ldr	r3, [pc, #628]	; (80049bc <HAL_RCC_OscConfig+0x2ac>)
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800474e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004752:	d10b      	bne.n	800476c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004754:	4b99      	ldr	r3, [pc, #612]	; (80049bc <HAL_RCC_OscConfig+0x2ac>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d05b      	beq.n	8004818 <HAL_RCC_OscConfig+0x108>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d157      	bne.n	8004818 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e23f      	b.n	8004bec <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004774:	d106      	bne.n	8004784 <HAL_RCC_OscConfig+0x74>
 8004776:	4b91      	ldr	r3, [pc, #580]	; (80049bc <HAL_RCC_OscConfig+0x2ac>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a90      	ldr	r2, [pc, #576]	; (80049bc <HAL_RCC_OscConfig+0x2ac>)
 800477c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004780:	6013      	str	r3, [r2, #0]
 8004782:	e01d      	b.n	80047c0 <HAL_RCC_OscConfig+0xb0>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800478c:	d10c      	bne.n	80047a8 <HAL_RCC_OscConfig+0x98>
 800478e:	4b8b      	ldr	r3, [pc, #556]	; (80049bc <HAL_RCC_OscConfig+0x2ac>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a8a      	ldr	r2, [pc, #552]	; (80049bc <HAL_RCC_OscConfig+0x2ac>)
 8004794:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004798:	6013      	str	r3, [r2, #0]
 800479a:	4b88      	ldr	r3, [pc, #544]	; (80049bc <HAL_RCC_OscConfig+0x2ac>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a87      	ldr	r2, [pc, #540]	; (80049bc <HAL_RCC_OscConfig+0x2ac>)
 80047a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047a4:	6013      	str	r3, [r2, #0]
 80047a6:	e00b      	b.n	80047c0 <HAL_RCC_OscConfig+0xb0>
 80047a8:	4b84      	ldr	r3, [pc, #528]	; (80049bc <HAL_RCC_OscConfig+0x2ac>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a83      	ldr	r2, [pc, #524]	; (80049bc <HAL_RCC_OscConfig+0x2ac>)
 80047ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047b2:	6013      	str	r3, [r2, #0]
 80047b4:	4b81      	ldr	r3, [pc, #516]	; (80049bc <HAL_RCC_OscConfig+0x2ac>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a80      	ldr	r2, [pc, #512]	; (80049bc <HAL_RCC_OscConfig+0x2ac>)
 80047ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d013      	beq.n	80047f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047c8:	f7fe fef4 	bl	80035b4 <HAL_GetTick>
 80047cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ce:	e008      	b.n	80047e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047d0:	f7fe fef0 	bl	80035b4 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b64      	cmp	r3, #100	; 0x64
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e204      	b.n	8004bec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047e2:	4b76      	ldr	r3, [pc, #472]	; (80049bc <HAL_RCC_OscConfig+0x2ac>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d0f0      	beq.n	80047d0 <HAL_RCC_OscConfig+0xc0>
 80047ee:	e014      	b.n	800481a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047f0:	f7fe fee0 	bl	80035b4 <HAL_GetTick>
 80047f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047f6:	e008      	b.n	800480a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047f8:	f7fe fedc 	bl	80035b4 <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	2b64      	cmp	r3, #100	; 0x64
 8004804:	d901      	bls.n	800480a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e1f0      	b.n	8004bec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800480a:	4b6c      	ldr	r3, [pc, #432]	; (80049bc <HAL_RCC_OscConfig+0x2ac>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d1f0      	bne.n	80047f8 <HAL_RCC_OscConfig+0xe8>
 8004816:	e000      	b.n	800481a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004818:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0302 	and.w	r3, r3, #2
 8004822:	2b00      	cmp	r3, #0
 8004824:	d063      	beq.n	80048ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004826:	4b65      	ldr	r3, [pc, #404]	; (80049bc <HAL_RCC_OscConfig+0x2ac>)
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f003 030c 	and.w	r3, r3, #12
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00b      	beq.n	800484a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004832:	4b62      	ldr	r3, [pc, #392]	; (80049bc <HAL_RCC_OscConfig+0x2ac>)
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800483a:	2b08      	cmp	r3, #8
 800483c:	d11c      	bne.n	8004878 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800483e:	4b5f      	ldr	r3, [pc, #380]	; (80049bc <HAL_RCC_OscConfig+0x2ac>)
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d116      	bne.n	8004878 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800484a:	4b5c      	ldr	r3, [pc, #368]	; (80049bc <HAL_RCC_OscConfig+0x2ac>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0302 	and.w	r3, r3, #2
 8004852:	2b00      	cmp	r3, #0
 8004854:	d005      	beq.n	8004862 <HAL_RCC_OscConfig+0x152>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	2b01      	cmp	r3, #1
 800485c:	d001      	beq.n	8004862 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e1c4      	b.n	8004bec <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004862:	4b56      	ldr	r3, [pc, #344]	; (80049bc <HAL_RCC_OscConfig+0x2ac>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	00db      	lsls	r3, r3, #3
 8004870:	4952      	ldr	r1, [pc, #328]	; (80049bc <HAL_RCC_OscConfig+0x2ac>)
 8004872:	4313      	orrs	r3, r2
 8004874:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004876:	e03a      	b.n	80048ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d020      	beq.n	80048c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004880:	4b4f      	ldr	r3, [pc, #316]	; (80049c0 <HAL_RCC_OscConfig+0x2b0>)
 8004882:	2201      	movs	r2, #1
 8004884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004886:	f7fe fe95 	bl	80035b4 <HAL_GetTick>
 800488a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800488c:	e008      	b.n	80048a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800488e:	f7fe fe91 	bl	80035b4 <HAL_GetTick>
 8004892:	4602      	mov	r2, r0
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	2b02      	cmp	r3, #2
 800489a:	d901      	bls.n	80048a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	e1a5      	b.n	8004bec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048a0:	4b46      	ldr	r3, [pc, #280]	; (80049bc <HAL_RCC_OscConfig+0x2ac>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0302 	and.w	r3, r3, #2
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d0f0      	beq.n	800488e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048ac:	4b43      	ldr	r3, [pc, #268]	; (80049bc <HAL_RCC_OscConfig+0x2ac>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	00db      	lsls	r3, r3, #3
 80048ba:	4940      	ldr	r1, [pc, #256]	; (80049bc <HAL_RCC_OscConfig+0x2ac>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	600b      	str	r3, [r1, #0]
 80048c0:	e015      	b.n	80048ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048c2:	4b3f      	ldr	r3, [pc, #252]	; (80049c0 <HAL_RCC_OscConfig+0x2b0>)
 80048c4:	2200      	movs	r2, #0
 80048c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c8:	f7fe fe74 	bl	80035b4 <HAL_GetTick>
 80048cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048ce:	e008      	b.n	80048e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048d0:	f7fe fe70 	bl	80035b4 <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d901      	bls.n	80048e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e184      	b.n	8004bec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048e2:	4b36      	ldr	r3, [pc, #216]	; (80049bc <HAL_RCC_OscConfig+0x2ac>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1f0      	bne.n	80048d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0308 	and.w	r3, r3, #8
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d030      	beq.n	800495c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d016      	beq.n	8004930 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004902:	4b30      	ldr	r3, [pc, #192]	; (80049c4 <HAL_RCC_OscConfig+0x2b4>)
 8004904:	2201      	movs	r2, #1
 8004906:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004908:	f7fe fe54 	bl	80035b4 <HAL_GetTick>
 800490c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800490e:	e008      	b.n	8004922 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004910:	f7fe fe50 	bl	80035b4 <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	2b02      	cmp	r3, #2
 800491c:	d901      	bls.n	8004922 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e164      	b.n	8004bec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004922:	4b26      	ldr	r3, [pc, #152]	; (80049bc <HAL_RCC_OscConfig+0x2ac>)
 8004924:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004926:	f003 0302 	and.w	r3, r3, #2
 800492a:	2b00      	cmp	r3, #0
 800492c:	d0f0      	beq.n	8004910 <HAL_RCC_OscConfig+0x200>
 800492e:	e015      	b.n	800495c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004930:	4b24      	ldr	r3, [pc, #144]	; (80049c4 <HAL_RCC_OscConfig+0x2b4>)
 8004932:	2200      	movs	r2, #0
 8004934:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004936:	f7fe fe3d 	bl	80035b4 <HAL_GetTick>
 800493a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800493c:	e008      	b.n	8004950 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800493e:	f7fe fe39 	bl	80035b4 <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	2b02      	cmp	r3, #2
 800494a:	d901      	bls.n	8004950 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	e14d      	b.n	8004bec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004950:	4b1a      	ldr	r3, [pc, #104]	; (80049bc <HAL_RCC_OscConfig+0x2ac>)
 8004952:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004954:	f003 0302 	and.w	r3, r3, #2
 8004958:	2b00      	cmp	r3, #0
 800495a:	d1f0      	bne.n	800493e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0304 	and.w	r3, r3, #4
 8004964:	2b00      	cmp	r3, #0
 8004966:	f000 80a0 	beq.w	8004aaa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800496a:	2300      	movs	r3, #0
 800496c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800496e:	4b13      	ldr	r3, [pc, #76]	; (80049bc <HAL_RCC_OscConfig+0x2ac>)
 8004970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d10f      	bne.n	800499a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800497a:	2300      	movs	r3, #0
 800497c:	60bb      	str	r3, [r7, #8]
 800497e:	4b0f      	ldr	r3, [pc, #60]	; (80049bc <HAL_RCC_OscConfig+0x2ac>)
 8004980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004982:	4a0e      	ldr	r2, [pc, #56]	; (80049bc <HAL_RCC_OscConfig+0x2ac>)
 8004984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004988:	6413      	str	r3, [r2, #64]	; 0x40
 800498a:	4b0c      	ldr	r3, [pc, #48]	; (80049bc <HAL_RCC_OscConfig+0x2ac>)
 800498c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004992:	60bb      	str	r3, [r7, #8]
 8004994:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004996:	2301      	movs	r3, #1
 8004998:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800499a:	4b0b      	ldr	r3, [pc, #44]	; (80049c8 <HAL_RCC_OscConfig+0x2b8>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d121      	bne.n	80049ea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049a6:	4b08      	ldr	r3, [pc, #32]	; (80049c8 <HAL_RCC_OscConfig+0x2b8>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a07      	ldr	r2, [pc, #28]	; (80049c8 <HAL_RCC_OscConfig+0x2b8>)
 80049ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049b2:	f7fe fdff 	bl	80035b4 <HAL_GetTick>
 80049b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049b8:	e011      	b.n	80049de <HAL_RCC_OscConfig+0x2ce>
 80049ba:	bf00      	nop
 80049bc:	40023800 	.word	0x40023800
 80049c0:	42470000 	.word	0x42470000
 80049c4:	42470e80 	.word	0x42470e80
 80049c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049cc:	f7fe fdf2 	bl	80035b4 <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d901      	bls.n	80049de <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e106      	b.n	8004bec <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049de:	4b85      	ldr	r3, [pc, #532]	; (8004bf4 <HAL_RCC_OscConfig+0x4e4>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d0f0      	beq.n	80049cc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d106      	bne.n	8004a00 <HAL_RCC_OscConfig+0x2f0>
 80049f2:	4b81      	ldr	r3, [pc, #516]	; (8004bf8 <HAL_RCC_OscConfig+0x4e8>)
 80049f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f6:	4a80      	ldr	r2, [pc, #512]	; (8004bf8 <HAL_RCC_OscConfig+0x4e8>)
 80049f8:	f043 0301 	orr.w	r3, r3, #1
 80049fc:	6713      	str	r3, [r2, #112]	; 0x70
 80049fe:	e01c      	b.n	8004a3a <HAL_RCC_OscConfig+0x32a>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	2b05      	cmp	r3, #5
 8004a06:	d10c      	bne.n	8004a22 <HAL_RCC_OscConfig+0x312>
 8004a08:	4b7b      	ldr	r3, [pc, #492]	; (8004bf8 <HAL_RCC_OscConfig+0x4e8>)
 8004a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a0c:	4a7a      	ldr	r2, [pc, #488]	; (8004bf8 <HAL_RCC_OscConfig+0x4e8>)
 8004a0e:	f043 0304 	orr.w	r3, r3, #4
 8004a12:	6713      	str	r3, [r2, #112]	; 0x70
 8004a14:	4b78      	ldr	r3, [pc, #480]	; (8004bf8 <HAL_RCC_OscConfig+0x4e8>)
 8004a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a18:	4a77      	ldr	r2, [pc, #476]	; (8004bf8 <HAL_RCC_OscConfig+0x4e8>)
 8004a1a:	f043 0301 	orr.w	r3, r3, #1
 8004a1e:	6713      	str	r3, [r2, #112]	; 0x70
 8004a20:	e00b      	b.n	8004a3a <HAL_RCC_OscConfig+0x32a>
 8004a22:	4b75      	ldr	r3, [pc, #468]	; (8004bf8 <HAL_RCC_OscConfig+0x4e8>)
 8004a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a26:	4a74      	ldr	r2, [pc, #464]	; (8004bf8 <HAL_RCC_OscConfig+0x4e8>)
 8004a28:	f023 0301 	bic.w	r3, r3, #1
 8004a2c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a2e:	4b72      	ldr	r3, [pc, #456]	; (8004bf8 <HAL_RCC_OscConfig+0x4e8>)
 8004a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a32:	4a71      	ldr	r2, [pc, #452]	; (8004bf8 <HAL_RCC_OscConfig+0x4e8>)
 8004a34:	f023 0304 	bic.w	r3, r3, #4
 8004a38:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d015      	beq.n	8004a6e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a42:	f7fe fdb7 	bl	80035b4 <HAL_GetTick>
 8004a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a48:	e00a      	b.n	8004a60 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a4a:	f7fe fdb3 	bl	80035b4 <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d901      	bls.n	8004a60 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e0c5      	b.n	8004bec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a60:	4b65      	ldr	r3, [pc, #404]	; (8004bf8 <HAL_RCC_OscConfig+0x4e8>)
 8004a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a64:	f003 0302 	and.w	r3, r3, #2
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d0ee      	beq.n	8004a4a <HAL_RCC_OscConfig+0x33a>
 8004a6c:	e014      	b.n	8004a98 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a6e:	f7fe fda1 	bl	80035b4 <HAL_GetTick>
 8004a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a74:	e00a      	b.n	8004a8c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a76:	f7fe fd9d 	bl	80035b4 <HAL_GetTick>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d901      	bls.n	8004a8c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e0af      	b.n	8004bec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a8c:	4b5a      	ldr	r3, [pc, #360]	; (8004bf8 <HAL_RCC_OscConfig+0x4e8>)
 8004a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a90:	f003 0302 	and.w	r3, r3, #2
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d1ee      	bne.n	8004a76 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a98:	7dfb      	ldrb	r3, [r7, #23]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d105      	bne.n	8004aaa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a9e:	4b56      	ldr	r3, [pc, #344]	; (8004bf8 <HAL_RCC_OscConfig+0x4e8>)
 8004aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa2:	4a55      	ldr	r2, [pc, #340]	; (8004bf8 <HAL_RCC_OscConfig+0x4e8>)
 8004aa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aa8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	699b      	ldr	r3, [r3, #24]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	f000 809b 	beq.w	8004bea <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ab4:	4b50      	ldr	r3, [pc, #320]	; (8004bf8 <HAL_RCC_OscConfig+0x4e8>)
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f003 030c 	and.w	r3, r3, #12
 8004abc:	2b08      	cmp	r3, #8
 8004abe:	d05c      	beq.n	8004b7a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d141      	bne.n	8004b4c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ac8:	4b4c      	ldr	r3, [pc, #304]	; (8004bfc <HAL_RCC_OscConfig+0x4ec>)
 8004aca:	2200      	movs	r2, #0
 8004acc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ace:	f7fe fd71 	bl	80035b4 <HAL_GetTick>
 8004ad2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ad4:	e008      	b.n	8004ae8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ad6:	f7fe fd6d 	bl	80035b4 <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d901      	bls.n	8004ae8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e081      	b.n	8004bec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ae8:	4b43      	ldr	r3, [pc, #268]	; (8004bf8 <HAL_RCC_OscConfig+0x4e8>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1f0      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	69da      	ldr	r2, [r3, #28]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a1b      	ldr	r3, [r3, #32]
 8004afc:	431a      	orrs	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b02:	019b      	lsls	r3, r3, #6
 8004b04:	431a      	orrs	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b0a:	085b      	lsrs	r3, r3, #1
 8004b0c:	3b01      	subs	r3, #1
 8004b0e:	041b      	lsls	r3, r3, #16
 8004b10:	431a      	orrs	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b16:	061b      	lsls	r3, r3, #24
 8004b18:	4937      	ldr	r1, [pc, #220]	; (8004bf8 <HAL_RCC_OscConfig+0x4e8>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b1e:	4b37      	ldr	r3, [pc, #220]	; (8004bfc <HAL_RCC_OscConfig+0x4ec>)
 8004b20:	2201      	movs	r2, #1
 8004b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b24:	f7fe fd46 	bl	80035b4 <HAL_GetTick>
 8004b28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b2a:	e008      	b.n	8004b3e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b2c:	f7fe fd42 	bl	80035b4 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d901      	bls.n	8004b3e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e056      	b.n	8004bec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b3e:	4b2e      	ldr	r3, [pc, #184]	; (8004bf8 <HAL_RCC_OscConfig+0x4e8>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d0f0      	beq.n	8004b2c <HAL_RCC_OscConfig+0x41c>
 8004b4a:	e04e      	b.n	8004bea <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b4c:	4b2b      	ldr	r3, [pc, #172]	; (8004bfc <HAL_RCC_OscConfig+0x4ec>)
 8004b4e:	2200      	movs	r2, #0
 8004b50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b52:	f7fe fd2f 	bl	80035b4 <HAL_GetTick>
 8004b56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b58:	e008      	b.n	8004b6c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b5a:	f7fe fd2b 	bl	80035b4 <HAL_GetTick>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d901      	bls.n	8004b6c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e03f      	b.n	8004bec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b6c:	4b22      	ldr	r3, [pc, #136]	; (8004bf8 <HAL_RCC_OscConfig+0x4e8>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1f0      	bne.n	8004b5a <HAL_RCC_OscConfig+0x44a>
 8004b78:	e037      	b.n	8004bea <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d101      	bne.n	8004b86 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e032      	b.n	8004bec <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b86:	4b1c      	ldr	r3, [pc, #112]	; (8004bf8 <HAL_RCC_OscConfig+0x4e8>)
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	699b      	ldr	r3, [r3, #24]
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d028      	beq.n	8004be6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d121      	bne.n	8004be6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d11a      	bne.n	8004be6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004bbc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d111      	bne.n	8004be6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bcc:	085b      	lsrs	r3, r3, #1
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d107      	bne.n	8004be6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d001      	beq.n	8004bea <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e000      	b.n	8004bec <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3718      	adds	r7, #24
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	40007000 	.word	0x40007000
 8004bf8:	40023800 	.word	0x40023800
 8004bfc:	42470060 	.word	0x42470060

08004c00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d101      	bne.n	8004c14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e0cc      	b.n	8004dae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c14:	4b68      	ldr	r3, [pc, #416]	; (8004db8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0307 	and.w	r3, r3, #7
 8004c1c:	683a      	ldr	r2, [r7, #0]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d90c      	bls.n	8004c3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c22:	4b65      	ldr	r3, [pc, #404]	; (8004db8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c24:	683a      	ldr	r2, [r7, #0]
 8004c26:	b2d2      	uxtb	r2, r2
 8004c28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c2a:	4b63      	ldr	r3, [pc, #396]	; (8004db8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0307 	and.w	r3, r3, #7
 8004c32:	683a      	ldr	r2, [r7, #0]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d001      	beq.n	8004c3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e0b8      	b.n	8004dae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0302 	and.w	r3, r3, #2
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d020      	beq.n	8004c8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0304 	and.w	r3, r3, #4
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d005      	beq.n	8004c60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c54:	4b59      	ldr	r3, [pc, #356]	; (8004dbc <HAL_RCC_ClockConfig+0x1bc>)
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	4a58      	ldr	r2, [pc, #352]	; (8004dbc <HAL_RCC_ClockConfig+0x1bc>)
 8004c5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0308 	and.w	r3, r3, #8
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d005      	beq.n	8004c78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c6c:	4b53      	ldr	r3, [pc, #332]	; (8004dbc <HAL_RCC_ClockConfig+0x1bc>)
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	4a52      	ldr	r2, [pc, #328]	; (8004dbc <HAL_RCC_ClockConfig+0x1bc>)
 8004c72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c78:	4b50      	ldr	r3, [pc, #320]	; (8004dbc <HAL_RCC_ClockConfig+0x1bc>)
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	494d      	ldr	r1, [pc, #308]	; (8004dbc <HAL_RCC_ClockConfig+0x1bc>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0301 	and.w	r3, r3, #1
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d044      	beq.n	8004d20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d107      	bne.n	8004cae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c9e:	4b47      	ldr	r3, [pc, #284]	; (8004dbc <HAL_RCC_ClockConfig+0x1bc>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d119      	bne.n	8004cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e07f      	b.n	8004dae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d003      	beq.n	8004cbe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cba:	2b03      	cmp	r3, #3
 8004cbc:	d107      	bne.n	8004cce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cbe:	4b3f      	ldr	r3, [pc, #252]	; (8004dbc <HAL_RCC_ClockConfig+0x1bc>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d109      	bne.n	8004cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e06f      	b.n	8004dae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cce:	4b3b      	ldr	r3, [pc, #236]	; (8004dbc <HAL_RCC_ClockConfig+0x1bc>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0302 	and.w	r3, r3, #2
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d101      	bne.n	8004cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e067      	b.n	8004dae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cde:	4b37      	ldr	r3, [pc, #220]	; (8004dbc <HAL_RCC_ClockConfig+0x1bc>)
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f023 0203 	bic.w	r2, r3, #3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	4934      	ldr	r1, [pc, #208]	; (8004dbc <HAL_RCC_ClockConfig+0x1bc>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cf0:	f7fe fc60 	bl	80035b4 <HAL_GetTick>
 8004cf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cf6:	e00a      	b.n	8004d0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cf8:	f7fe fc5c 	bl	80035b4 <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d901      	bls.n	8004d0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e04f      	b.n	8004dae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d0e:	4b2b      	ldr	r3, [pc, #172]	; (8004dbc <HAL_RCC_ClockConfig+0x1bc>)
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f003 020c 	and.w	r2, r3, #12
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d1eb      	bne.n	8004cf8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d20:	4b25      	ldr	r3, [pc, #148]	; (8004db8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0307 	and.w	r3, r3, #7
 8004d28:	683a      	ldr	r2, [r7, #0]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d20c      	bcs.n	8004d48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d2e:	4b22      	ldr	r3, [pc, #136]	; (8004db8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d30:	683a      	ldr	r2, [r7, #0]
 8004d32:	b2d2      	uxtb	r2, r2
 8004d34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d36:	4b20      	ldr	r3, [pc, #128]	; (8004db8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0307 	and.w	r3, r3, #7
 8004d3e:	683a      	ldr	r2, [r7, #0]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d001      	beq.n	8004d48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e032      	b.n	8004dae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0304 	and.w	r3, r3, #4
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d008      	beq.n	8004d66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d54:	4b19      	ldr	r3, [pc, #100]	; (8004dbc <HAL_RCC_ClockConfig+0x1bc>)
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	4916      	ldr	r1, [pc, #88]	; (8004dbc <HAL_RCC_ClockConfig+0x1bc>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0308 	and.w	r3, r3, #8
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d009      	beq.n	8004d86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d72:	4b12      	ldr	r3, [pc, #72]	; (8004dbc <HAL_RCC_ClockConfig+0x1bc>)
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	00db      	lsls	r3, r3, #3
 8004d80:	490e      	ldr	r1, [pc, #56]	; (8004dbc <HAL_RCC_ClockConfig+0x1bc>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d86:	f000 f821 	bl	8004dcc <HAL_RCC_GetSysClockFreq>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	4b0b      	ldr	r3, [pc, #44]	; (8004dbc <HAL_RCC_ClockConfig+0x1bc>)
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	091b      	lsrs	r3, r3, #4
 8004d92:	f003 030f 	and.w	r3, r3, #15
 8004d96:	490a      	ldr	r1, [pc, #40]	; (8004dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8004d98:	5ccb      	ldrb	r3, [r1, r3]
 8004d9a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d9e:	4a09      	ldr	r2, [pc, #36]	; (8004dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004da0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004da2:	4b09      	ldr	r3, [pc, #36]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7fe fbc0 	bl	800352c <HAL_InitTick>

  return HAL_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3710      	adds	r7, #16
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	40023c00 	.word	0x40023c00
 8004dbc:	40023800 	.word	0x40023800
 8004dc0:	0800bbf0 	.word	0x0800bbf0
 8004dc4:	20000014 	.word	0x20000014
 8004dc8:	2000006c 	.word	0x2000006c

08004dcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dcc:	b5b0      	push	{r4, r5, r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004dd2:	2100      	movs	r1, #0
 8004dd4:	6079      	str	r1, [r7, #4]
 8004dd6:	2100      	movs	r1, #0
 8004dd8:	60f9      	str	r1, [r7, #12]
 8004dda:	2100      	movs	r1, #0
 8004ddc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004dde:	2100      	movs	r1, #0
 8004de0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004de2:	4952      	ldr	r1, [pc, #328]	; (8004f2c <HAL_RCC_GetSysClockFreq+0x160>)
 8004de4:	6889      	ldr	r1, [r1, #8]
 8004de6:	f001 010c 	and.w	r1, r1, #12
 8004dea:	2908      	cmp	r1, #8
 8004dec:	d00d      	beq.n	8004e0a <HAL_RCC_GetSysClockFreq+0x3e>
 8004dee:	2908      	cmp	r1, #8
 8004df0:	f200 8094 	bhi.w	8004f1c <HAL_RCC_GetSysClockFreq+0x150>
 8004df4:	2900      	cmp	r1, #0
 8004df6:	d002      	beq.n	8004dfe <HAL_RCC_GetSysClockFreq+0x32>
 8004df8:	2904      	cmp	r1, #4
 8004dfa:	d003      	beq.n	8004e04 <HAL_RCC_GetSysClockFreq+0x38>
 8004dfc:	e08e      	b.n	8004f1c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004dfe:	4b4c      	ldr	r3, [pc, #304]	; (8004f30 <HAL_RCC_GetSysClockFreq+0x164>)
 8004e00:	60bb      	str	r3, [r7, #8]
       break;
 8004e02:	e08e      	b.n	8004f22 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e04:	4b4b      	ldr	r3, [pc, #300]	; (8004f34 <HAL_RCC_GetSysClockFreq+0x168>)
 8004e06:	60bb      	str	r3, [r7, #8]
      break;
 8004e08:	e08b      	b.n	8004f22 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e0a:	4948      	ldr	r1, [pc, #288]	; (8004f2c <HAL_RCC_GetSysClockFreq+0x160>)
 8004e0c:	6849      	ldr	r1, [r1, #4]
 8004e0e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004e12:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e14:	4945      	ldr	r1, [pc, #276]	; (8004f2c <HAL_RCC_GetSysClockFreq+0x160>)
 8004e16:	6849      	ldr	r1, [r1, #4]
 8004e18:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004e1c:	2900      	cmp	r1, #0
 8004e1e:	d024      	beq.n	8004e6a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e20:	4942      	ldr	r1, [pc, #264]	; (8004f2c <HAL_RCC_GetSysClockFreq+0x160>)
 8004e22:	6849      	ldr	r1, [r1, #4]
 8004e24:	0989      	lsrs	r1, r1, #6
 8004e26:	4608      	mov	r0, r1
 8004e28:	f04f 0100 	mov.w	r1, #0
 8004e2c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004e30:	f04f 0500 	mov.w	r5, #0
 8004e34:	ea00 0204 	and.w	r2, r0, r4
 8004e38:	ea01 0305 	and.w	r3, r1, r5
 8004e3c:	493d      	ldr	r1, [pc, #244]	; (8004f34 <HAL_RCC_GetSysClockFreq+0x168>)
 8004e3e:	fb01 f003 	mul.w	r0, r1, r3
 8004e42:	2100      	movs	r1, #0
 8004e44:	fb01 f102 	mul.w	r1, r1, r2
 8004e48:	1844      	adds	r4, r0, r1
 8004e4a:	493a      	ldr	r1, [pc, #232]	; (8004f34 <HAL_RCC_GetSysClockFreq+0x168>)
 8004e4c:	fba2 0101 	umull	r0, r1, r2, r1
 8004e50:	1863      	adds	r3, r4, r1
 8004e52:	4619      	mov	r1, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	461a      	mov	r2, r3
 8004e58:	f04f 0300 	mov.w	r3, #0
 8004e5c:	f7fb ff1c 	bl	8000c98 <__aeabi_uldivmod>
 8004e60:	4602      	mov	r2, r0
 8004e62:	460b      	mov	r3, r1
 8004e64:	4613      	mov	r3, r2
 8004e66:	60fb      	str	r3, [r7, #12]
 8004e68:	e04a      	b.n	8004f00 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e6a:	4b30      	ldr	r3, [pc, #192]	; (8004f2c <HAL_RCC_GetSysClockFreq+0x160>)
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	099b      	lsrs	r3, r3, #6
 8004e70:	461a      	mov	r2, r3
 8004e72:	f04f 0300 	mov.w	r3, #0
 8004e76:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004e7a:	f04f 0100 	mov.w	r1, #0
 8004e7e:	ea02 0400 	and.w	r4, r2, r0
 8004e82:	ea03 0501 	and.w	r5, r3, r1
 8004e86:	4620      	mov	r0, r4
 8004e88:	4629      	mov	r1, r5
 8004e8a:	f04f 0200 	mov.w	r2, #0
 8004e8e:	f04f 0300 	mov.w	r3, #0
 8004e92:	014b      	lsls	r3, r1, #5
 8004e94:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004e98:	0142      	lsls	r2, r0, #5
 8004e9a:	4610      	mov	r0, r2
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	1b00      	subs	r0, r0, r4
 8004ea0:	eb61 0105 	sbc.w	r1, r1, r5
 8004ea4:	f04f 0200 	mov.w	r2, #0
 8004ea8:	f04f 0300 	mov.w	r3, #0
 8004eac:	018b      	lsls	r3, r1, #6
 8004eae:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004eb2:	0182      	lsls	r2, r0, #6
 8004eb4:	1a12      	subs	r2, r2, r0
 8004eb6:	eb63 0301 	sbc.w	r3, r3, r1
 8004eba:	f04f 0000 	mov.w	r0, #0
 8004ebe:	f04f 0100 	mov.w	r1, #0
 8004ec2:	00d9      	lsls	r1, r3, #3
 8004ec4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ec8:	00d0      	lsls	r0, r2, #3
 8004eca:	4602      	mov	r2, r0
 8004ecc:	460b      	mov	r3, r1
 8004ece:	1912      	adds	r2, r2, r4
 8004ed0:	eb45 0303 	adc.w	r3, r5, r3
 8004ed4:	f04f 0000 	mov.w	r0, #0
 8004ed8:	f04f 0100 	mov.w	r1, #0
 8004edc:	0299      	lsls	r1, r3, #10
 8004ede:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004ee2:	0290      	lsls	r0, r2, #10
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	4610      	mov	r0, r2
 8004eea:	4619      	mov	r1, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	461a      	mov	r2, r3
 8004ef0:	f04f 0300 	mov.w	r3, #0
 8004ef4:	f7fb fed0 	bl	8000c98 <__aeabi_uldivmod>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	460b      	mov	r3, r1
 8004efc:	4613      	mov	r3, r2
 8004efe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f00:	4b0a      	ldr	r3, [pc, #40]	; (8004f2c <HAL_RCC_GetSysClockFreq+0x160>)
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	0c1b      	lsrs	r3, r3, #16
 8004f06:	f003 0303 	and.w	r3, r3, #3
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	005b      	lsls	r3, r3, #1
 8004f0e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f18:	60bb      	str	r3, [r7, #8]
      break;
 8004f1a:	e002      	b.n	8004f22 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f1c:	4b04      	ldr	r3, [pc, #16]	; (8004f30 <HAL_RCC_GetSysClockFreq+0x164>)
 8004f1e:	60bb      	str	r3, [r7, #8]
      break;
 8004f20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f22:	68bb      	ldr	r3, [r7, #8]
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3710      	adds	r7, #16
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bdb0      	pop	{r4, r5, r7, pc}
 8004f2c:	40023800 	.word	0x40023800
 8004f30:	00f42400 	.word	0x00f42400
 8004f34:	017d7840 	.word	0x017d7840

08004f38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f3c:	4b03      	ldr	r3, [pc, #12]	; (8004f4c <HAL_RCC_GetHCLKFreq+0x14>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	20000014 	.word	0x20000014

08004f50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f54:	f7ff fff0 	bl	8004f38 <HAL_RCC_GetHCLKFreq>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	4b05      	ldr	r3, [pc, #20]	; (8004f70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	0a9b      	lsrs	r3, r3, #10
 8004f60:	f003 0307 	and.w	r3, r3, #7
 8004f64:	4903      	ldr	r1, [pc, #12]	; (8004f74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f66:	5ccb      	ldrb	r3, [r1, r3]
 8004f68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	40023800 	.word	0x40023800
 8004f74:	0800bc00 	.word	0x0800bc00

08004f78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f7c:	f7ff ffdc 	bl	8004f38 <HAL_RCC_GetHCLKFreq>
 8004f80:	4602      	mov	r2, r0
 8004f82:	4b05      	ldr	r3, [pc, #20]	; (8004f98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	0b5b      	lsrs	r3, r3, #13
 8004f88:	f003 0307 	and.w	r3, r3, #7
 8004f8c:	4903      	ldr	r1, [pc, #12]	; (8004f9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f8e:	5ccb      	ldrb	r3, [r1, r3]
 8004f90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	40023800 	.word	0x40023800
 8004f9c:	0800bc00 	.word	0x0800bc00

08004fa0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d101      	bne.n	8004fb2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e07b      	b.n	80050aa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d108      	bne.n	8004fcc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fc2:	d009      	beq.n	8004fd8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	61da      	str	r2, [r3, #28]
 8004fca:	e005      	b.n	8004fd8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d106      	bne.n	8004ff8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f7fd fd62 	bl	8002abc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2202      	movs	r2, #2
 8004ffc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800500e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005020:	431a      	orrs	r2, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800502a:	431a      	orrs	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	f003 0302 	and.w	r3, r3, #2
 8005034:	431a      	orrs	r2, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	431a      	orrs	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005048:	431a      	orrs	r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	69db      	ldr	r3, [r3, #28]
 800504e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005052:	431a      	orrs	r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a1b      	ldr	r3, [r3, #32]
 8005058:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800505c:	ea42 0103 	orr.w	r1, r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005064:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	430a      	orrs	r2, r1
 800506e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	699b      	ldr	r3, [r3, #24]
 8005074:	0c1b      	lsrs	r3, r3, #16
 8005076:	f003 0104 	and.w	r1, r3, #4
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507e:	f003 0210 	and.w	r2, r3, #16
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	430a      	orrs	r2, r1
 8005088:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	69da      	ldr	r2, [r3, #28]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005098:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3708      	adds	r7, #8
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}

080050b2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050b2:	b580      	push	{r7, lr}
 80050b4:	b088      	sub	sp, #32
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	60f8      	str	r0, [r7, #12]
 80050ba:	60b9      	str	r1, [r7, #8]
 80050bc:	603b      	str	r3, [r7, #0]
 80050be:	4613      	mov	r3, r2
 80050c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80050c2:	2300      	movs	r3, #0
 80050c4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d101      	bne.n	80050d4 <HAL_SPI_Transmit+0x22>
 80050d0:	2302      	movs	r3, #2
 80050d2:	e126      	b.n	8005322 <HAL_SPI_Transmit+0x270>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050dc:	f7fe fa6a 	bl	80035b4 <HAL_GetTick>
 80050e0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80050e2:	88fb      	ldrh	r3, [r7, #6]
 80050e4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d002      	beq.n	80050f8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80050f2:	2302      	movs	r3, #2
 80050f4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80050f6:	e10b      	b.n	8005310 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d002      	beq.n	8005104 <HAL_SPI_Transmit+0x52>
 80050fe:	88fb      	ldrh	r3, [r7, #6]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d102      	bne.n	800510a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005108:	e102      	b.n	8005310 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2203      	movs	r2, #3
 800510e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2200      	movs	r2, #0
 8005116:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	68ba      	ldr	r2, [r7, #8]
 800511c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	88fa      	ldrh	r2, [r7, #6]
 8005122:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	88fa      	ldrh	r2, [r7, #6]
 8005128:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2200      	movs	r2, #0
 800512e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2200      	movs	r2, #0
 8005134:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2200      	movs	r2, #0
 800513a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2200      	movs	r2, #0
 8005140:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2200      	movs	r2, #0
 8005146:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005150:	d10f      	bne.n	8005172 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005160:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005170:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800517c:	2b40      	cmp	r3, #64	; 0x40
 800517e:	d007      	beq.n	8005190 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800518e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005198:	d14b      	bne.n	8005232 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d002      	beq.n	80051a8 <HAL_SPI_Transmit+0xf6>
 80051a2:	8afb      	ldrh	r3, [r7, #22]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d13e      	bne.n	8005226 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ac:	881a      	ldrh	r2, [r3, #0]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b8:	1c9a      	adds	r2, r3, #2
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	3b01      	subs	r3, #1
 80051c6:	b29a      	uxth	r2, r3
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80051cc:	e02b      	b.n	8005226 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	f003 0302 	and.w	r3, r3, #2
 80051d8:	2b02      	cmp	r3, #2
 80051da:	d112      	bne.n	8005202 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e0:	881a      	ldrh	r2, [r3, #0]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ec:	1c9a      	adds	r2, r3, #2
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	3b01      	subs	r3, #1
 80051fa:	b29a      	uxth	r2, r3
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	86da      	strh	r2, [r3, #54]	; 0x36
 8005200:	e011      	b.n	8005226 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005202:	f7fe f9d7 	bl	80035b4 <HAL_GetTick>
 8005206:	4602      	mov	r2, r0
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	683a      	ldr	r2, [r7, #0]
 800520e:	429a      	cmp	r2, r3
 8005210:	d803      	bhi.n	800521a <HAL_SPI_Transmit+0x168>
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005218:	d102      	bne.n	8005220 <HAL_SPI_Transmit+0x16e>
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d102      	bne.n	8005226 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005224:	e074      	b.n	8005310 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800522a:	b29b      	uxth	r3, r3
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1ce      	bne.n	80051ce <HAL_SPI_Transmit+0x11c>
 8005230:	e04c      	b.n	80052cc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d002      	beq.n	8005240 <HAL_SPI_Transmit+0x18e>
 800523a:	8afb      	ldrh	r3, [r7, #22]
 800523c:	2b01      	cmp	r3, #1
 800523e:	d140      	bne.n	80052c2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	330c      	adds	r3, #12
 800524a:	7812      	ldrb	r2, [r2, #0]
 800524c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005252:	1c5a      	adds	r2, r3, #1
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800525c:	b29b      	uxth	r3, r3
 800525e:	3b01      	subs	r3, #1
 8005260:	b29a      	uxth	r2, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005266:	e02c      	b.n	80052c2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	f003 0302 	and.w	r3, r3, #2
 8005272:	2b02      	cmp	r3, #2
 8005274:	d113      	bne.n	800529e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	330c      	adds	r3, #12
 8005280:	7812      	ldrb	r2, [r2, #0]
 8005282:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005288:	1c5a      	adds	r2, r3, #1
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005292:	b29b      	uxth	r3, r3
 8005294:	3b01      	subs	r3, #1
 8005296:	b29a      	uxth	r2, r3
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	86da      	strh	r2, [r3, #54]	; 0x36
 800529c:	e011      	b.n	80052c2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800529e:	f7fe f989 	bl	80035b4 <HAL_GetTick>
 80052a2:	4602      	mov	r2, r0
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	683a      	ldr	r2, [r7, #0]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d803      	bhi.n	80052b6 <HAL_SPI_Transmit+0x204>
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b4:	d102      	bne.n	80052bc <HAL_SPI_Transmit+0x20a>
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d102      	bne.n	80052c2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	77fb      	strb	r3, [r7, #31]
          goto error;
 80052c0:	e026      	b.n	8005310 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d1cd      	bne.n	8005268 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052cc:	69ba      	ldr	r2, [r7, #24]
 80052ce:	6839      	ldr	r1, [r7, #0]
 80052d0:	68f8      	ldr	r0, [r7, #12]
 80052d2:	f000 f9df 	bl	8005694 <SPI_EndRxTxTransaction>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d002      	beq.n	80052e2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2220      	movs	r2, #32
 80052e0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d10a      	bne.n	8005300 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052ea:	2300      	movs	r3, #0
 80052ec:	613b      	str	r3, [r7, #16]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	613b      	str	r3, [r7, #16]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	613b      	str	r3, [r7, #16]
 80052fe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005304:	2b00      	cmp	r3, #0
 8005306:	d002      	beq.n	800530e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	77fb      	strb	r3, [r7, #31]
 800530c:	e000      	b.n	8005310 <HAL_SPI_Transmit+0x25e>
  }

error:
 800530e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2200      	movs	r2, #0
 800531c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005320:	7ffb      	ldrb	r3, [r7, #31]
}
 8005322:	4618      	mov	r0, r3
 8005324:	3720      	adds	r7, #32
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
	...

0800532c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b088      	sub	sp, #32
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	099b      	lsrs	r3, r3, #6
 8005348:	f003 0301 	and.w	r3, r3, #1
 800534c:	2b00      	cmp	r3, #0
 800534e:	d10f      	bne.n	8005370 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005356:	2b00      	cmp	r3, #0
 8005358:	d00a      	beq.n	8005370 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	099b      	lsrs	r3, r3, #6
 800535e:	f003 0301 	and.w	r3, r3, #1
 8005362:	2b00      	cmp	r3, #0
 8005364:	d004      	beq.n	8005370 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	4798      	blx	r3
    return;
 800536e:	e0d7      	b.n	8005520 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	085b      	lsrs	r3, r3, #1
 8005374:	f003 0301 	and.w	r3, r3, #1
 8005378:	2b00      	cmp	r3, #0
 800537a:	d00a      	beq.n	8005392 <HAL_SPI_IRQHandler+0x66>
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	09db      	lsrs	r3, r3, #7
 8005380:	f003 0301 	and.w	r3, r3, #1
 8005384:	2b00      	cmp	r3, #0
 8005386:	d004      	beq.n	8005392 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	4798      	blx	r3
    return;
 8005390:	e0c6      	b.n	8005520 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	095b      	lsrs	r3, r3, #5
 8005396:	f003 0301 	and.w	r3, r3, #1
 800539a:	2b00      	cmp	r3, #0
 800539c:	d10c      	bne.n	80053b8 <HAL_SPI_IRQHandler+0x8c>
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	099b      	lsrs	r3, r3, #6
 80053a2:	f003 0301 	and.w	r3, r3, #1
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d106      	bne.n	80053b8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	0a1b      	lsrs	r3, r3, #8
 80053ae:	f003 0301 	and.w	r3, r3, #1
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	f000 80b4 	beq.w	8005520 <HAL_SPI_IRQHandler+0x1f4>
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	095b      	lsrs	r3, r3, #5
 80053bc:	f003 0301 	and.w	r3, r3, #1
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	f000 80ad 	beq.w	8005520 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	099b      	lsrs	r3, r3, #6
 80053ca:	f003 0301 	and.w	r3, r3, #1
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d023      	beq.n	800541a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	2b03      	cmp	r3, #3
 80053dc:	d011      	beq.n	8005402 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e2:	f043 0204 	orr.w	r2, r3, #4
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053ea:	2300      	movs	r3, #0
 80053ec:	617b      	str	r3, [r7, #20]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	617b      	str	r3, [r7, #20]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	617b      	str	r3, [r7, #20]
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	e00b      	b.n	800541a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005402:	2300      	movs	r3, #0
 8005404:	613b      	str	r3, [r7, #16]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	613b      	str	r3, [r7, #16]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	613b      	str	r3, [r7, #16]
 8005416:	693b      	ldr	r3, [r7, #16]
        return;
 8005418:	e082      	b.n	8005520 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	095b      	lsrs	r3, r3, #5
 800541e:	f003 0301 	and.w	r3, r3, #1
 8005422:	2b00      	cmp	r3, #0
 8005424:	d014      	beq.n	8005450 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800542a:	f043 0201 	orr.w	r2, r3, #1
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005432:	2300      	movs	r3, #0
 8005434:	60fb      	str	r3, [r7, #12]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	60fb      	str	r3, [r7, #12]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800544c:	601a      	str	r2, [r3, #0]
 800544e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	0a1b      	lsrs	r3, r3, #8
 8005454:	f003 0301 	and.w	r3, r3, #1
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00c      	beq.n	8005476 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005460:	f043 0208 	orr.w	r2, r3, #8
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005468:	2300      	movs	r3, #0
 800546a:	60bb      	str	r3, [r7, #8]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	60bb      	str	r3, [r7, #8]
 8005474:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800547a:	2b00      	cmp	r3, #0
 800547c:	d04f      	beq.n	800551e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	685a      	ldr	r2, [r3, #4]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800548c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2201      	movs	r2, #1
 8005492:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	f003 0302 	and.w	r3, r3, #2
 800549c:	2b00      	cmp	r3, #0
 800549e:	d104      	bne.n	80054aa <HAL_SPI_IRQHandler+0x17e>
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	f003 0301 	and.w	r3, r3, #1
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d034      	beq.n	8005514 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	685a      	ldr	r2, [r3, #4]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f022 0203 	bic.w	r2, r2, #3
 80054b8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d011      	beq.n	80054e6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054c6:	4a18      	ldr	r2, [pc, #96]	; (8005528 <HAL_SPI_IRQHandler+0x1fc>)
 80054c8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054ce:	4618      	mov	r0, r3
 80054d0:	f7fe f9e3 	bl	800389a <HAL_DMA_Abort_IT>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d005      	beq.n	80054e6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d016      	beq.n	800551c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054f2:	4a0d      	ldr	r2, [pc, #52]	; (8005528 <HAL_SPI_IRQHandler+0x1fc>)
 80054f4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054fa:	4618      	mov	r0, r3
 80054fc:	f7fe f9cd 	bl	800389a <HAL_DMA_Abort_IT>
 8005500:	4603      	mov	r3, r0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00a      	beq.n	800551c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800550a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005512:	e003      	b.n	800551c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f000 f809 	bl	800552c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800551a:	e000      	b.n	800551e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800551c:	bf00      	nop
    return;
 800551e:	bf00      	nop
  }
}
 8005520:	3720      	adds	r7, #32
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	0800555d 	.word	0x0800555d

0800552c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005534:	bf00      	nop
 8005536:	370c      	adds	r7, #12
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800554e:	b2db      	uxtb	r3, r3
}
 8005550:	4618      	mov	r0, r3
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005568:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2200      	movs	r2, #0
 8005574:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005576:	68f8      	ldr	r0, [r7, #12]
 8005578:	f7ff ffd8 	bl	800552c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800557c:	bf00      	nop
 800557e:	3710      	adds	r7, #16
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b088      	sub	sp, #32
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	603b      	str	r3, [r7, #0]
 8005590:	4613      	mov	r3, r2
 8005592:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005594:	f7fe f80e 	bl	80035b4 <HAL_GetTick>
 8005598:	4602      	mov	r2, r0
 800559a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800559c:	1a9b      	subs	r3, r3, r2
 800559e:	683a      	ldr	r2, [r7, #0]
 80055a0:	4413      	add	r3, r2
 80055a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80055a4:	f7fe f806 	bl	80035b4 <HAL_GetTick>
 80055a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80055aa:	4b39      	ldr	r3, [pc, #228]	; (8005690 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	015b      	lsls	r3, r3, #5
 80055b0:	0d1b      	lsrs	r3, r3, #20
 80055b2:	69fa      	ldr	r2, [r7, #28]
 80055b4:	fb02 f303 	mul.w	r3, r2, r3
 80055b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80055ba:	e054      	b.n	8005666 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c2:	d050      	beq.n	8005666 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80055c4:	f7fd fff6 	bl	80035b4 <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	69fa      	ldr	r2, [r7, #28]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d902      	bls.n	80055da <SPI_WaitFlagStateUntilTimeout+0x56>
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d13d      	bne.n	8005656 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	685a      	ldr	r2, [r3, #4]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80055e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055f2:	d111      	bne.n	8005618 <SPI_WaitFlagStateUntilTimeout+0x94>
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055fc:	d004      	beq.n	8005608 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005606:	d107      	bne.n	8005618 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005616:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800561c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005620:	d10f      	bne.n	8005642 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005630:	601a      	str	r2, [r3, #0]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005640:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2201      	movs	r2, #1
 8005646:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2200      	movs	r2, #0
 800564e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005652:	2303      	movs	r3, #3
 8005654:	e017      	b.n	8005686 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d101      	bne.n	8005660 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800565c:	2300      	movs	r3, #0
 800565e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	3b01      	subs	r3, #1
 8005664:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	689a      	ldr	r2, [r3, #8]
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	4013      	ands	r3, r2
 8005670:	68ba      	ldr	r2, [r7, #8]
 8005672:	429a      	cmp	r2, r3
 8005674:	bf0c      	ite	eq
 8005676:	2301      	moveq	r3, #1
 8005678:	2300      	movne	r3, #0
 800567a:	b2db      	uxtb	r3, r3
 800567c:	461a      	mov	r2, r3
 800567e:	79fb      	ldrb	r3, [r7, #7]
 8005680:	429a      	cmp	r2, r3
 8005682:	d19b      	bne.n	80055bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3720      	adds	r7, #32
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	20000014 	.word	0x20000014

08005694 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b088      	sub	sp, #32
 8005698:	af02      	add	r7, sp, #8
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80056a0:	4b1b      	ldr	r3, [pc, #108]	; (8005710 <SPI_EndRxTxTransaction+0x7c>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a1b      	ldr	r2, [pc, #108]	; (8005714 <SPI_EndRxTxTransaction+0x80>)
 80056a6:	fba2 2303 	umull	r2, r3, r2, r3
 80056aa:	0d5b      	lsrs	r3, r3, #21
 80056ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80056b0:	fb02 f303 	mul.w	r3, r2, r3
 80056b4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056be:	d112      	bne.n	80056e6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	9300      	str	r3, [sp, #0]
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	2200      	movs	r2, #0
 80056c8:	2180      	movs	r1, #128	; 0x80
 80056ca:	68f8      	ldr	r0, [r7, #12]
 80056cc:	f7ff ff5a 	bl	8005584 <SPI_WaitFlagStateUntilTimeout>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d016      	beq.n	8005704 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056da:	f043 0220 	orr.w	r2, r3, #32
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	e00f      	b.n	8005706 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d00a      	beq.n	8005702 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	3b01      	subs	r3, #1
 80056f0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056fc:	2b80      	cmp	r3, #128	; 0x80
 80056fe:	d0f2      	beq.n	80056e6 <SPI_EndRxTxTransaction+0x52>
 8005700:	e000      	b.n	8005704 <SPI_EndRxTxTransaction+0x70>
        break;
 8005702:	bf00      	nop
  }

  return HAL_OK;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3718      	adds	r7, #24
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	20000014 	.word	0x20000014
 8005714:	165e9f81 	.word	0x165e9f81

08005718 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d101      	bne.n	800572a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e03f      	b.n	80057aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005730:	b2db      	uxtb	r3, r3
 8005732:	2b00      	cmp	r3, #0
 8005734:	d106      	bne.n	8005744 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f7fd fe60 	bl	8003404 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2224      	movs	r2, #36	; 0x24
 8005748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68da      	ldr	r2, [r3, #12]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800575a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f000 f929 	bl	80059b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	691a      	ldr	r2, [r3, #16]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005770:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	695a      	ldr	r2, [r3, #20]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005780:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68da      	ldr	r2, [r3, #12]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005790:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2220      	movs	r2, #32
 800579c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2220      	movs	r2, #32
 80057a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3708      	adds	r7, #8
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}

080057b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057b2:	b580      	push	{r7, lr}
 80057b4:	b08a      	sub	sp, #40	; 0x28
 80057b6:	af02      	add	r7, sp, #8
 80057b8:	60f8      	str	r0, [r7, #12]
 80057ba:	60b9      	str	r1, [r7, #8]
 80057bc:	603b      	str	r3, [r7, #0]
 80057be:	4613      	mov	r3, r2
 80057c0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80057c2:	2300      	movs	r3, #0
 80057c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	2b20      	cmp	r3, #32
 80057d0:	d17c      	bne.n	80058cc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d002      	beq.n	80057de <HAL_UART_Transmit+0x2c>
 80057d8:	88fb      	ldrh	r3, [r7, #6]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d101      	bne.n	80057e2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e075      	b.n	80058ce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d101      	bne.n	80057f0 <HAL_UART_Transmit+0x3e>
 80057ec:	2302      	movs	r3, #2
 80057ee:	e06e      	b.n	80058ce <HAL_UART_Transmit+0x11c>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2200      	movs	r2, #0
 80057fc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2221      	movs	r2, #33	; 0x21
 8005802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005806:	f7fd fed5 	bl	80035b4 <HAL_GetTick>
 800580a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	88fa      	ldrh	r2, [r7, #6]
 8005810:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	88fa      	ldrh	r2, [r7, #6]
 8005816:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005820:	d108      	bne.n	8005834 <HAL_UART_Transmit+0x82>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d104      	bne.n	8005834 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800582a:	2300      	movs	r3, #0
 800582c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	61bb      	str	r3, [r7, #24]
 8005832:	e003      	b.n	800583c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005838:	2300      	movs	r3, #0
 800583a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2200      	movs	r2, #0
 8005840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005844:	e02a      	b.n	800589c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	9300      	str	r3, [sp, #0]
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	2200      	movs	r2, #0
 800584e:	2180      	movs	r1, #128	; 0x80
 8005850:	68f8      	ldr	r0, [r7, #12]
 8005852:	f000 f840 	bl	80058d6 <UART_WaitOnFlagUntilTimeout>
 8005856:	4603      	mov	r3, r0
 8005858:	2b00      	cmp	r3, #0
 800585a:	d001      	beq.n	8005860 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800585c:	2303      	movs	r3, #3
 800585e:	e036      	b.n	80058ce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d10b      	bne.n	800587e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	881b      	ldrh	r3, [r3, #0]
 800586a:	461a      	mov	r2, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005874:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	3302      	adds	r3, #2
 800587a:	61bb      	str	r3, [r7, #24]
 800587c:	e007      	b.n	800588e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	781a      	ldrb	r2, [r3, #0]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	3301      	adds	r3, #1
 800588c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005892:	b29b      	uxth	r3, r3
 8005894:	3b01      	subs	r3, #1
 8005896:	b29a      	uxth	r2, r3
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d1cf      	bne.n	8005846 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	9300      	str	r3, [sp, #0]
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	2200      	movs	r2, #0
 80058ae:	2140      	movs	r1, #64	; 0x40
 80058b0:	68f8      	ldr	r0, [r7, #12]
 80058b2:	f000 f810 	bl	80058d6 <UART_WaitOnFlagUntilTimeout>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d001      	beq.n	80058c0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80058bc:	2303      	movs	r3, #3
 80058be:	e006      	b.n	80058ce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2220      	movs	r2, #32
 80058c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80058c8:	2300      	movs	r3, #0
 80058ca:	e000      	b.n	80058ce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80058cc:	2302      	movs	r3, #2
  }
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3720      	adds	r7, #32
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}

080058d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80058d6:	b580      	push	{r7, lr}
 80058d8:	b090      	sub	sp, #64	; 0x40
 80058da:	af00      	add	r7, sp, #0
 80058dc:	60f8      	str	r0, [r7, #12]
 80058de:	60b9      	str	r1, [r7, #8]
 80058e0:	603b      	str	r3, [r7, #0]
 80058e2:	4613      	mov	r3, r2
 80058e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058e6:	e050      	b.n	800598a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ee:	d04c      	beq.n	800598a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80058f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d007      	beq.n	8005906 <UART_WaitOnFlagUntilTimeout+0x30>
 80058f6:	f7fd fe5d 	bl	80035b4 <HAL_GetTick>
 80058fa:	4602      	mov	r2, r0
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005902:	429a      	cmp	r2, r3
 8005904:	d241      	bcs.n	800598a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	330c      	adds	r3, #12
 800590c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800590e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005910:	e853 3f00 	ldrex	r3, [r3]
 8005914:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005918:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800591c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	330c      	adds	r3, #12
 8005924:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005926:	637a      	str	r2, [r7, #52]	; 0x34
 8005928:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800592a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800592c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800592e:	e841 2300 	strex	r3, r2, [r1]
 8005932:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005936:	2b00      	cmp	r3, #0
 8005938:	d1e5      	bne.n	8005906 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	3314      	adds	r3, #20
 8005940:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	e853 3f00 	ldrex	r3, [r3]
 8005948:	613b      	str	r3, [r7, #16]
   return(result);
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	f023 0301 	bic.w	r3, r3, #1
 8005950:	63bb      	str	r3, [r7, #56]	; 0x38
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	3314      	adds	r3, #20
 8005958:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800595a:	623a      	str	r2, [r7, #32]
 800595c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800595e:	69f9      	ldr	r1, [r7, #28]
 8005960:	6a3a      	ldr	r2, [r7, #32]
 8005962:	e841 2300 	strex	r3, r2, [r1]
 8005966:	61bb      	str	r3, [r7, #24]
   return(result);
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d1e5      	bne.n	800593a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2220      	movs	r2, #32
 8005972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2220      	movs	r2, #32
 800597a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005986:	2303      	movs	r3, #3
 8005988:	e00f      	b.n	80059aa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	4013      	ands	r3, r2
 8005994:	68ba      	ldr	r2, [r7, #8]
 8005996:	429a      	cmp	r2, r3
 8005998:	bf0c      	ite	eq
 800599a:	2301      	moveq	r3, #1
 800599c:	2300      	movne	r3, #0
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	461a      	mov	r2, r3
 80059a2:	79fb      	ldrb	r3, [r7, #7]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d09f      	beq.n	80058e8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3740      	adds	r7, #64	; 0x40
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
	...

080059b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059b8:	b09f      	sub	sp, #124	; 0x7c
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80059c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059ca:	68d9      	ldr	r1, [r3, #12]
 80059cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	ea40 0301 	orr.w	r3, r0, r1
 80059d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80059d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059d8:	689a      	ldr	r2, [r3, #8]
 80059da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	431a      	orrs	r2, r3
 80059e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059e2:	695b      	ldr	r3, [r3, #20]
 80059e4:	431a      	orrs	r2, r3
 80059e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059e8:	69db      	ldr	r3, [r3, #28]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80059ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80059f8:	f021 010c 	bic.w	r1, r1, #12
 80059fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a02:	430b      	orrs	r3, r1
 8005a04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	695b      	ldr	r3, [r3, #20]
 8005a0c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005a10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a12:	6999      	ldr	r1, [r3, #24]
 8005a14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	ea40 0301 	orr.w	r3, r0, r1
 8005a1c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	4bc5      	ldr	r3, [pc, #788]	; (8005d38 <UART_SetConfig+0x384>)
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d004      	beq.n	8005a32 <UART_SetConfig+0x7e>
 8005a28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	4bc3      	ldr	r3, [pc, #780]	; (8005d3c <UART_SetConfig+0x388>)
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d103      	bne.n	8005a3a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a32:	f7ff faa1 	bl	8004f78 <HAL_RCC_GetPCLK2Freq>
 8005a36:	6778      	str	r0, [r7, #116]	; 0x74
 8005a38:	e002      	b.n	8005a40 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a3a:	f7ff fa89 	bl	8004f50 <HAL_RCC_GetPCLK1Freq>
 8005a3e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a42:	69db      	ldr	r3, [r3, #28]
 8005a44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a48:	f040 80b6 	bne.w	8005bb8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a4e:	461c      	mov	r4, r3
 8005a50:	f04f 0500 	mov.w	r5, #0
 8005a54:	4622      	mov	r2, r4
 8005a56:	462b      	mov	r3, r5
 8005a58:	1891      	adds	r1, r2, r2
 8005a5a:	6439      	str	r1, [r7, #64]	; 0x40
 8005a5c:	415b      	adcs	r3, r3
 8005a5e:	647b      	str	r3, [r7, #68]	; 0x44
 8005a60:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005a64:	1912      	adds	r2, r2, r4
 8005a66:	eb45 0303 	adc.w	r3, r5, r3
 8005a6a:	f04f 0000 	mov.w	r0, #0
 8005a6e:	f04f 0100 	mov.w	r1, #0
 8005a72:	00d9      	lsls	r1, r3, #3
 8005a74:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a78:	00d0      	lsls	r0, r2, #3
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	460b      	mov	r3, r1
 8005a7e:	1911      	adds	r1, r2, r4
 8005a80:	6639      	str	r1, [r7, #96]	; 0x60
 8005a82:	416b      	adcs	r3, r5
 8005a84:	667b      	str	r3, [r7, #100]	; 0x64
 8005a86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	f04f 0300 	mov.w	r3, #0
 8005a90:	1891      	adds	r1, r2, r2
 8005a92:	63b9      	str	r1, [r7, #56]	; 0x38
 8005a94:	415b      	adcs	r3, r3
 8005a96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005a9c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005aa0:	f7fb f8fa 	bl	8000c98 <__aeabi_uldivmod>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	460b      	mov	r3, r1
 8005aa8:	4ba5      	ldr	r3, [pc, #660]	; (8005d40 <UART_SetConfig+0x38c>)
 8005aaa:	fba3 2302 	umull	r2, r3, r3, r2
 8005aae:	095b      	lsrs	r3, r3, #5
 8005ab0:	011e      	lsls	r6, r3, #4
 8005ab2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ab4:	461c      	mov	r4, r3
 8005ab6:	f04f 0500 	mov.w	r5, #0
 8005aba:	4622      	mov	r2, r4
 8005abc:	462b      	mov	r3, r5
 8005abe:	1891      	adds	r1, r2, r2
 8005ac0:	6339      	str	r1, [r7, #48]	; 0x30
 8005ac2:	415b      	adcs	r3, r3
 8005ac4:	637b      	str	r3, [r7, #52]	; 0x34
 8005ac6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005aca:	1912      	adds	r2, r2, r4
 8005acc:	eb45 0303 	adc.w	r3, r5, r3
 8005ad0:	f04f 0000 	mov.w	r0, #0
 8005ad4:	f04f 0100 	mov.w	r1, #0
 8005ad8:	00d9      	lsls	r1, r3, #3
 8005ada:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ade:	00d0      	lsls	r0, r2, #3
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	1911      	adds	r1, r2, r4
 8005ae6:	65b9      	str	r1, [r7, #88]	; 0x58
 8005ae8:	416b      	adcs	r3, r5
 8005aea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005aec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	461a      	mov	r2, r3
 8005af2:	f04f 0300 	mov.w	r3, #0
 8005af6:	1891      	adds	r1, r2, r2
 8005af8:	62b9      	str	r1, [r7, #40]	; 0x28
 8005afa:	415b      	adcs	r3, r3
 8005afc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005afe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b02:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005b06:	f7fb f8c7 	bl	8000c98 <__aeabi_uldivmod>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	4b8c      	ldr	r3, [pc, #560]	; (8005d40 <UART_SetConfig+0x38c>)
 8005b10:	fba3 1302 	umull	r1, r3, r3, r2
 8005b14:	095b      	lsrs	r3, r3, #5
 8005b16:	2164      	movs	r1, #100	; 0x64
 8005b18:	fb01 f303 	mul.w	r3, r1, r3
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	00db      	lsls	r3, r3, #3
 8005b20:	3332      	adds	r3, #50	; 0x32
 8005b22:	4a87      	ldr	r2, [pc, #540]	; (8005d40 <UART_SetConfig+0x38c>)
 8005b24:	fba2 2303 	umull	r2, r3, r2, r3
 8005b28:	095b      	lsrs	r3, r3, #5
 8005b2a:	005b      	lsls	r3, r3, #1
 8005b2c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005b30:	441e      	add	r6, r3
 8005b32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b34:	4618      	mov	r0, r3
 8005b36:	f04f 0100 	mov.w	r1, #0
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	460b      	mov	r3, r1
 8005b3e:	1894      	adds	r4, r2, r2
 8005b40:	623c      	str	r4, [r7, #32]
 8005b42:	415b      	adcs	r3, r3
 8005b44:	627b      	str	r3, [r7, #36]	; 0x24
 8005b46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b4a:	1812      	adds	r2, r2, r0
 8005b4c:	eb41 0303 	adc.w	r3, r1, r3
 8005b50:	f04f 0400 	mov.w	r4, #0
 8005b54:	f04f 0500 	mov.w	r5, #0
 8005b58:	00dd      	lsls	r5, r3, #3
 8005b5a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005b5e:	00d4      	lsls	r4, r2, #3
 8005b60:	4622      	mov	r2, r4
 8005b62:	462b      	mov	r3, r5
 8005b64:	1814      	adds	r4, r2, r0
 8005b66:	653c      	str	r4, [r7, #80]	; 0x50
 8005b68:	414b      	adcs	r3, r1
 8005b6a:	657b      	str	r3, [r7, #84]	; 0x54
 8005b6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	461a      	mov	r2, r3
 8005b72:	f04f 0300 	mov.w	r3, #0
 8005b76:	1891      	adds	r1, r2, r2
 8005b78:	61b9      	str	r1, [r7, #24]
 8005b7a:	415b      	adcs	r3, r3
 8005b7c:	61fb      	str	r3, [r7, #28]
 8005b7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b82:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005b86:	f7fb f887 	bl	8000c98 <__aeabi_uldivmod>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	4b6c      	ldr	r3, [pc, #432]	; (8005d40 <UART_SetConfig+0x38c>)
 8005b90:	fba3 1302 	umull	r1, r3, r3, r2
 8005b94:	095b      	lsrs	r3, r3, #5
 8005b96:	2164      	movs	r1, #100	; 0x64
 8005b98:	fb01 f303 	mul.w	r3, r1, r3
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	00db      	lsls	r3, r3, #3
 8005ba0:	3332      	adds	r3, #50	; 0x32
 8005ba2:	4a67      	ldr	r2, [pc, #412]	; (8005d40 <UART_SetConfig+0x38c>)
 8005ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba8:	095b      	lsrs	r3, r3, #5
 8005baa:	f003 0207 	and.w	r2, r3, #7
 8005bae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4432      	add	r2, r6
 8005bb4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005bb6:	e0b9      	b.n	8005d2c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005bb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bba:	461c      	mov	r4, r3
 8005bbc:	f04f 0500 	mov.w	r5, #0
 8005bc0:	4622      	mov	r2, r4
 8005bc2:	462b      	mov	r3, r5
 8005bc4:	1891      	adds	r1, r2, r2
 8005bc6:	6139      	str	r1, [r7, #16]
 8005bc8:	415b      	adcs	r3, r3
 8005bca:	617b      	str	r3, [r7, #20]
 8005bcc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005bd0:	1912      	adds	r2, r2, r4
 8005bd2:	eb45 0303 	adc.w	r3, r5, r3
 8005bd6:	f04f 0000 	mov.w	r0, #0
 8005bda:	f04f 0100 	mov.w	r1, #0
 8005bde:	00d9      	lsls	r1, r3, #3
 8005be0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005be4:	00d0      	lsls	r0, r2, #3
 8005be6:	4602      	mov	r2, r0
 8005be8:	460b      	mov	r3, r1
 8005bea:	eb12 0804 	adds.w	r8, r2, r4
 8005bee:	eb43 0905 	adc.w	r9, r3, r5
 8005bf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f04f 0100 	mov.w	r1, #0
 8005bfc:	f04f 0200 	mov.w	r2, #0
 8005c00:	f04f 0300 	mov.w	r3, #0
 8005c04:	008b      	lsls	r3, r1, #2
 8005c06:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005c0a:	0082      	lsls	r2, r0, #2
 8005c0c:	4640      	mov	r0, r8
 8005c0e:	4649      	mov	r1, r9
 8005c10:	f7fb f842 	bl	8000c98 <__aeabi_uldivmod>
 8005c14:	4602      	mov	r2, r0
 8005c16:	460b      	mov	r3, r1
 8005c18:	4b49      	ldr	r3, [pc, #292]	; (8005d40 <UART_SetConfig+0x38c>)
 8005c1a:	fba3 2302 	umull	r2, r3, r3, r2
 8005c1e:	095b      	lsrs	r3, r3, #5
 8005c20:	011e      	lsls	r6, r3, #4
 8005c22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c24:	4618      	mov	r0, r3
 8005c26:	f04f 0100 	mov.w	r1, #0
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	1894      	adds	r4, r2, r2
 8005c30:	60bc      	str	r4, [r7, #8]
 8005c32:	415b      	adcs	r3, r3
 8005c34:	60fb      	str	r3, [r7, #12]
 8005c36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c3a:	1812      	adds	r2, r2, r0
 8005c3c:	eb41 0303 	adc.w	r3, r1, r3
 8005c40:	f04f 0400 	mov.w	r4, #0
 8005c44:	f04f 0500 	mov.w	r5, #0
 8005c48:	00dd      	lsls	r5, r3, #3
 8005c4a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005c4e:	00d4      	lsls	r4, r2, #3
 8005c50:	4622      	mov	r2, r4
 8005c52:	462b      	mov	r3, r5
 8005c54:	1814      	adds	r4, r2, r0
 8005c56:	64bc      	str	r4, [r7, #72]	; 0x48
 8005c58:	414b      	adcs	r3, r1
 8005c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	4618      	mov	r0, r3
 8005c62:	f04f 0100 	mov.w	r1, #0
 8005c66:	f04f 0200 	mov.w	r2, #0
 8005c6a:	f04f 0300 	mov.w	r3, #0
 8005c6e:	008b      	lsls	r3, r1, #2
 8005c70:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005c74:	0082      	lsls	r2, r0, #2
 8005c76:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005c7a:	f7fb f80d 	bl	8000c98 <__aeabi_uldivmod>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	460b      	mov	r3, r1
 8005c82:	4b2f      	ldr	r3, [pc, #188]	; (8005d40 <UART_SetConfig+0x38c>)
 8005c84:	fba3 1302 	umull	r1, r3, r3, r2
 8005c88:	095b      	lsrs	r3, r3, #5
 8005c8a:	2164      	movs	r1, #100	; 0x64
 8005c8c:	fb01 f303 	mul.w	r3, r1, r3
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	011b      	lsls	r3, r3, #4
 8005c94:	3332      	adds	r3, #50	; 0x32
 8005c96:	4a2a      	ldr	r2, [pc, #168]	; (8005d40 <UART_SetConfig+0x38c>)
 8005c98:	fba2 2303 	umull	r2, r3, r2, r3
 8005c9c:	095b      	lsrs	r3, r3, #5
 8005c9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ca2:	441e      	add	r6, r3
 8005ca4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f04f 0100 	mov.w	r1, #0
 8005cac:	4602      	mov	r2, r0
 8005cae:	460b      	mov	r3, r1
 8005cb0:	1894      	adds	r4, r2, r2
 8005cb2:	603c      	str	r4, [r7, #0]
 8005cb4:	415b      	adcs	r3, r3
 8005cb6:	607b      	str	r3, [r7, #4]
 8005cb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cbc:	1812      	adds	r2, r2, r0
 8005cbe:	eb41 0303 	adc.w	r3, r1, r3
 8005cc2:	f04f 0400 	mov.w	r4, #0
 8005cc6:	f04f 0500 	mov.w	r5, #0
 8005cca:	00dd      	lsls	r5, r3, #3
 8005ccc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005cd0:	00d4      	lsls	r4, r2, #3
 8005cd2:	4622      	mov	r2, r4
 8005cd4:	462b      	mov	r3, r5
 8005cd6:	eb12 0a00 	adds.w	sl, r2, r0
 8005cda:	eb43 0b01 	adc.w	fp, r3, r1
 8005cde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f04f 0100 	mov.w	r1, #0
 8005ce8:	f04f 0200 	mov.w	r2, #0
 8005cec:	f04f 0300 	mov.w	r3, #0
 8005cf0:	008b      	lsls	r3, r1, #2
 8005cf2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005cf6:	0082      	lsls	r2, r0, #2
 8005cf8:	4650      	mov	r0, sl
 8005cfa:	4659      	mov	r1, fp
 8005cfc:	f7fa ffcc 	bl	8000c98 <__aeabi_uldivmod>
 8005d00:	4602      	mov	r2, r0
 8005d02:	460b      	mov	r3, r1
 8005d04:	4b0e      	ldr	r3, [pc, #56]	; (8005d40 <UART_SetConfig+0x38c>)
 8005d06:	fba3 1302 	umull	r1, r3, r3, r2
 8005d0a:	095b      	lsrs	r3, r3, #5
 8005d0c:	2164      	movs	r1, #100	; 0x64
 8005d0e:	fb01 f303 	mul.w	r3, r1, r3
 8005d12:	1ad3      	subs	r3, r2, r3
 8005d14:	011b      	lsls	r3, r3, #4
 8005d16:	3332      	adds	r3, #50	; 0x32
 8005d18:	4a09      	ldr	r2, [pc, #36]	; (8005d40 <UART_SetConfig+0x38c>)
 8005d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d1e:	095b      	lsrs	r3, r3, #5
 8005d20:	f003 020f 	and.w	r2, r3, #15
 8005d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4432      	add	r2, r6
 8005d2a:	609a      	str	r2, [r3, #8]
}
 8005d2c:	bf00      	nop
 8005d2e:	377c      	adds	r7, #124	; 0x7c
 8005d30:	46bd      	mov	sp, r7
 8005d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d36:	bf00      	nop
 8005d38:	40011000 	.word	0x40011000
 8005d3c:	40011400 	.word	0x40011400
 8005d40:	51eb851f 	.word	0x51eb851f

08005d44 <__errno>:
 8005d44:	4b01      	ldr	r3, [pc, #4]	; (8005d4c <__errno+0x8>)
 8005d46:	6818      	ldr	r0, [r3, #0]
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	20000074 	.word	0x20000074

08005d50 <__libc_init_array>:
 8005d50:	b570      	push	{r4, r5, r6, lr}
 8005d52:	4d0d      	ldr	r5, [pc, #52]	; (8005d88 <__libc_init_array+0x38>)
 8005d54:	4c0d      	ldr	r4, [pc, #52]	; (8005d8c <__libc_init_array+0x3c>)
 8005d56:	1b64      	subs	r4, r4, r5
 8005d58:	10a4      	asrs	r4, r4, #2
 8005d5a:	2600      	movs	r6, #0
 8005d5c:	42a6      	cmp	r6, r4
 8005d5e:	d109      	bne.n	8005d74 <__libc_init_array+0x24>
 8005d60:	4d0b      	ldr	r5, [pc, #44]	; (8005d90 <__libc_init_array+0x40>)
 8005d62:	4c0c      	ldr	r4, [pc, #48]	; (8005d94 <__libc_init_array+0x44>)
 8005d64:	f004 fc54 	bl	800a610 <_init>
 8005d68:	1b64      	subs	r4, r4, r5
 8005d6a:	10a4      	asrs	r4, r4, #2
 8005d6c:	2600      	movs	r6, #0
 8005d6e:	42a6      	cmp	r6, r4
 8005d70:	d105      	bne.n	8005d7e <__libc_init_array+0x2e>
 8005d72:	bd70      	pop	{r4, r5, r6, pc}
 8005d74:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d78:	4798      	blx	r3
 8005d7a:	3601      	adds	r6, #1
 8005d7c:	e7ee      	b.n	8005d5c <__libc_init_array+0xc>
 8005d7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d82:	4798      	blx	r3
 8005d84:	3601      	adds	r6, #1
 8005d86:	e7f2      	b.n	8005d6e <__libc_init_array+0x1e>
 8005d88:	0800c0c4 	.word	0x0800c0c4
 8005d8c:	0800c0c4 	.word	0x0800c0c4
 8005d90:	0800c0c4 	.word	0x0800c0c4
 8005d94:	0800c0c8 	.word	0x0800c0c8

08005d98 <memcmp>:
 8005d98:	b530      	push	{r4, r5, lr}
 8005d9a:	3901      	subs	r1, #1
 8005d9c:	2400      	movs	r4, #0
 8005d9e:	42a2      	cmp	r2, r4
 8005da0:	d101      	bne.n	8005da6 <memcmp+0xe>
 8005da2:	2000      	movs	r0, #0
 8005da4:	e005      	b.n	8005db2 <memcmp+0x1a>
 8005da6:	5d03      	ldrb	r3, [r0, r4]
 8005da8:	3401      	adds	r4, #1
 8005daa:	5d0d      	ldrb	r5, [r1, r4]
 8005dac:	42ab      	cmp	r3, r5
 8005dae:	d0f6      	beq.n	8005d9e <memcmp+0x6>
 8005db0:	1b58      	subs	r0, r3, r5
 8005db2:	bd30      	pop	{r4, r5, pc}

08005db4 <memset>:
 8005db4:	4402      	add	r2, r0
 8005db6:	4603      	mov	r3, r0
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d100      	bne.n	8005dbe <memset+0xa>
 8005dbc:	4770      	bx	lr
 8005dbe:	f803 1b01 	strb.w	r1, [r3], #1
 8005dc2:	e7f9      	b.n	8005db8 <memset+0x4>

08005dc4 <__cvt>:
 8005dc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005dc8:	ec55 4b10 	vmov	r4, r5, d0
 8005dcc:	2d00      	cmp	r5, #0
 8005dce:	460e      	mov	r6, r1
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	462b      	mov	r3, r5
 8005dd4:	bfbb      	ittet	lt
 8005dd6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005dda:	461d      	movlt	r5, r3
 8005ddc:	2300      	movge	r3, #0
 8005dde:	232d      	movlt	r3, #45	; 0x2d
 8005de0:	700b      	strb	r3, [r1, #0]
 8005de2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005de4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005de8:	4691      	mov	r9, r2
 8005dea:	f023 0820 	bic.w	r8, r3, #32
 8005dee:	bfbc      	itt	lt
 8005df0:	4622      	movlt	r2, r4
 8005df2:	4614      	movlt	r4, r2
 8005df4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005df8:	d005      	beq.n	8005e06 <__cvt+0x42>
 8005dfa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005dfe:	d100      	bne.n	8005e02 <__cvt+0x3e>
 8005e00:	3601      	adds	r6, #1
 8005e02:	2102      	movs	r1, #2
 8005e04:	e000      	b.n	8005e08 <__cvt+0x44>
 8005e06:	2103      	movs	r1, #3
 8005e08:	ab03      	add	r3, sp, #12
 8005e0a:	9301      	str	r3, [sp, #4]
 8005e0c:	ab02      	add	r3, sp, #8
 8005e0e:	9300      	str	r3, [sp, #0]
 8005e10:	ec45 4b10 	vmov	d0, r4, r5
 8005e14:	4653      	mov	r3, sl
 8005e16:	4632      	mov	r2, r6
 8005e18:	f001 fdb6 	bl	8007988 <_dtoa_r>
 8005e1c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005e20:	4607      	mov	r7, r0
 8005e22:	d102      	bne.n	8005e2a <__cvt+0x66>
 8005e24:	f019 0f01 	tst.w	r9, #1
 8005e28:	d022      	beq.n	8005e70 <__cvt+0xac>
 8005e2a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005e2e:	eb07 0906 	add.w	r9, r7, r6
 8005e32:	d110      	bne.n	8005e56 <__cvt+0x92>
 8005e34:	783b      	ldrb	r3, [r7, #0]
 8005e36:	2b30      	cmp	r3, #48	; 0x30
 8005e38:	d10a      	bne.n	8005e50 <__cvt+0x8c>
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	4620      	mov	r0, r4
 8005e40:	4629      	mov	r1, r5
 8005e42:	f7fa fe49 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e46:	b918      	cbnz	r0, 8005e50 <__cvt+0x8c>
 8005e48:	f1c6 0601 	rsb	r6, r6, #1
 8005e4c:	f8ca 6000 	str.w	r6, [sl]
 8005e50:	f8da 3000 	ldr.w	r3, [sl]
 8005e54:	4499      	add	r9, r3
 8005e56:	2200      	movs	r2, #0
 8005e58:	2300      	movs	r3, #0
 8005e5a:	4620      	mov	r0, r4
 8005e5c:	4629      	mov	r1, r5
 8005e5e:	f7fa fe3b 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e62:	b108      	cbz	r0, 8005e68 <__cvt+0xa4>
 8005e64:	f8cd 900c 	str.w	r9, [sp, #12]
 8005e68:	2230      	movs	r2, #48	; 0x30
 8005e6a:	9b03      	ldr	r3, [sp, #12]
 8005e6c:	454b      	cmp	r3, r9
 8005e6e:	d307      	bcc.n	8005e80 <__cvt+0xbc>
 8005e70:	9b03      	ldr	r3, [sp, #12]
 8005e72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005e74:	1bdb      	subs	r3, r3, r7
 8005e76:	4638      	mov	r0, r7
 8005e78:	6013      	str	r3, [r2, #0]
 8005e7a:	b004      	add	sp, #16
 8005e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e80:	1c59      	adds	r1, r3, #1
 8005e82:	9103      	str	r1, [sp, #12]
 8005e84:	701a      	strb	r2, [r3, #0]
 8005e86:	e7f0      	b.n	8005e6a <__cvt+0xa6>

08005e88 <__exponent>:
 8005e88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	2900      	cmp	r1, #0
 8005e8e:	bfb8      	it	lt
 8005e90:	4249      	neglt	r1, r1
 8005e92:	f803 2b02 	strb.w	r2, [r3], #2
 8005e96:	bfb4      	ite	lt
 8005e98:	222d      	movlt	r2, #45	; 0x2d
 8005e9a:	222b      	movge	r2, #43	; 0x2b
 8005e9c:	2909      	cmp	r1, #9
 8005e9e:	7042      	strb	r2, [r0, #1]
 8005ea0:	dd2a      	ble.n	8005ef8 <__exponent+0x70>
 8005ea2:	f10d 0407 	add.w	r4, sp, #7
 8005ea6:	46a4      	mov	ip, r4
 8005ea8:	270a      	movs	r7, #10
 8005eaa:	46a6      	mov	lr, r4
 8005eac:	460a      	mov	r2, r1
 8005eae:	fb91 f6f7 	sdiv	r6, r1, r7
 8005eb2:	fb07 1516 	mls	r5, r7, r6, r1
 8005eb6:	3530      	adds	r5, #48	; 0x30
 8005eb8:	2a63      	cmp	r2, #99	; 0x63
 8005eba:	f104 34ff 	add.w	r4, r4, #4294967295
 8005ebe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005ec2:	4631      	mov	r1, r6
 8005ec4:	dcf1      	bgt.n	8005eaa <__exponent+0x22>
 8005ec6:	3130      	adds	r1, #48	; 0x30
 8005ec8:	f1ae 0502 	sub.w	r5, lr, #2
 8005ecc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005ed0:	1c44      	adds	r4, r0, #1
 8005ed2:	4629      	mov	r1, r5
 8005ed4:	4561      	cmp	r1, ip
 8005ed6:	d30a      	bcc.n	8005eee <__exponent+0x66>
 8005ed8:	f10d 0209 	add.w	r2, sp, #9
 8005edc:	eba2 020e 	sub.w	r2, r2, lr
 8005ee0:	4565      	cmp	r5, ip
 8005ee2:	bf88      	it	hi
 8005ee4:	2200      	movhi	r2, #0
 8005ee6:	4413      	add	r3, r2
 8005ee8:	1a18      	subs	r0, r3, r0
 8005eea:	b003      	add	sp, #12
 8005eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005eee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ef2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005ef6:	e7ed      	b.n	8005ed4 <__exponent+0x4c>
 8005ef8:	2330      	movs	r3, #48	; 0x30
 8005efa:	3130      	adds	r1, #48	; 0x30
 8005efc:	7083      	strb	r3, [r0, #2]
 8005efe:	70c1      	strb	r1, [r0, #3]
 8005f00:	1d03      	adds	r3, r0, #4
 8005f02:	e7f1      	b.n	8005ee8 <__exponent+0x60>

08005f04 <_printf_float>:
 8005f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f08:	ed2d 8b02 	vpush	{d8}
 8005f0c:	b08d      	sub	sp, #52	; 0x34
 8005f0e:	460c      	mov	r4, r1
 8005f10:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005f14:	4616      	mov	r6, r2
 8005f16:	461f      	mov	r7, r3
 8005f18:	4605      	mov	r5, r0
 8005f1a:	f002 fe91 	bl	8008c40 <_localeconv_r>
 8005f1e:	f8d0 a000 	ldr.w	sl, [r0]
 8005f22:	4650      	mov	r0, sl
 8005f24:	f7fa f95c 	bl	80001e0 <strlen>
 8005f28:	2300      	movs	r3, #0
 8005f2a:	930a      	str	r3, [sp, #40]	; 0x28
 8005f2c:	6823      	ldr	r3, [r4, #0]
 8005f2e:	9305      	str	r3, [sp, #20]
 8005f30:	f8d8 3000 	ldr.w	r3, [r8]
 8005f34:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005f38:	3307      	adds	r3, #7
 8005f3a:	f023 0307 	bic.w	r3, r3, #7
 8005f3e:	f103 0208 	add.w	r2, r3, #8
 8005f42:	f8c8 2000 	str.w	r2, [r8]
 8005f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f4a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005f4e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005f52:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005f56:	9307      	str	r3, [sp, #28]
 8005f58:	f8cd 8018 	str.w	r8, [sp, #24]
 8005f5c:	ee08 0a10 	vmov	s16, r0
 8005f60:	4b9f      	ldr	r3, [pc, #636]	; (80061e0 <_printf_float+0x2dc>)
 8005f62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f66:	f04f 32ff 	mov.w	r2, #4294967295
 8005f6a:	f7fa fde7 	bl	8000b3c <__aeabi_dcmpun>
 8005f6e:	bb88      	cbnz	r0, 8005fd4 <_printf_float+0xd0>
 8005f70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f74:	4b9a      	ldr	r3, [pc, #616]	; (80061e0 <_printf_float+0x2dc>)
 8005f76:	f04f 32ff 	mov.w	r2, #4294967295
 8005f7a:	f7fa fdc1 	bl	8000b00 <__aeabi_dcmple>
 8005f7e:	bb48      	cbnz	r0, 8005fd4 <_printf_float+0xd0>
 8005f80:	2200      	movs	r2, #0
 8005f82:	2300      	movs	r3, #0
 8005f84:	4640      	mov	r0, r8
 8005f86:	4649      	mov	r1, r9
 8005f88:	f7fa fdb0 	bl	8000aec <__aeabi_dcmplt>
 8005f8c:	b110      	cbz	r0, 8005f94 <_printf_float+0x90>
 8005f8e:	232d      	movs	r3, #45	; 0x2d
 8005f90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f94:	4b93      	ldr	r3, [pc, #588]	; (80061e4 <_printf_float+0x2e0>)
 8005f96:	4894      	ldr	r0, [pc, #592]	; (80061e8 <_printf_float+0x2e4>)
 8005f98:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005f9c:	bf94      	ite	ls
 8005f9e:	4698      	movls	r8, r3
 8005fa0:	4680      	movhi	r8, r0
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	6123      	str	r3, [r4, #16]
 8005fa6:	9b05      	ldr	r3, [sp, #20]
 8005fa8:	f023 0204 	bic.w	r2, r3, #4
 8005fac:	6022      	str	r2, [r4, #0]
 8005fae:	f04f 0900 	mov.w	r9, #0
 8005fb2:	9700      	str	r7, [sp, #0]
 8005fb4:	4633      	mov	r3, r6
 8005fb6:	aa0b      	add	r2, sp, #44	; 0x2c
 8005fb8:	4621      	mov	r1, r4
 8005fba:	4628      	mov	r0, r5
 8005fbc:	f000 f9d8 	bl	8006370 <_printf_common>
 8005fc0:	3001      	adds	r0, #1
 8005fc2:	f040 8090 	bne.w	80060e6 <_printf_float+0x1e2>
 8005fc6:	f04f 30ff 	mov.w	r0, #4294967295
 8005fca:	b00d      	add	sp, #52	; 0x34
 8005fcc:	ecbd 8b02 	vpop	{d8}
 8005fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fd4:	4642      	mov	r2, r8
 8005fd6:	464b      	mov	r3, r9
 8005fd8:	4640      	mov	r0, r8
 8005fda:	4649      	mov	r1, r9
 8005fdc:	f7fa fdae 	bl	8000b3c <__aeabi_dcmpun>
 8005fe0:	b140      	cbz	r0, 8005ff4 <_printf_float+0xf0>
 8005fe2:	464b      	mov	r3, r9
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	bfbc      	itt	lt
 8005fe8:	232d      	movlt	r3, #45	; 0x2d
 8005fea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005fee:	487f      	ldr	r0, [pc, #508]	; (80061ec <_printf_float+0x2e8>)
 8005ff0:	4b7f      	ldr	r3, [pc, #508]	; (80061f0 <_printf_float+0x2ec>)
 8005ff2:	e7d1      	b.n	8005f98 <_printf_float+0x94>
 8005ff4:	6863      	ldr	r3, [r4, #4]
 8005ff6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005ffa:	9206      	str	r2, [sp, #24]
 8005ffc:	1c5a      	adds	r2, r3, #1
 8005ffe:	d13f      	bne.n	8006080 <_printf_float+0x17c>
 8006000:	2306      	movs	r3, #6
 8006002:	6063      	str	r3, [r4, #4]
 8006004:	9b05      	ldr	r3, [sp, #20]
 8006006:	6861      	ldr	r1, [r4, #4]
 8006008:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800600c:	2300      	movs	r3, #0
 800600e:	9303      	str	r3, [sp, #12]
 8006010:	ab0a      	add	r3, sp, #40	; 0x28
 8006012:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006016:	ab09      	add	r3, sp, #36	; 0x24
 8006018:	ec49 8b10 	vmov	d0, r8, r9
 800601c:	9300      	str	r3, [sp, #0]
 800601e:	6022      	str	r2, [r4, #0]
 8006020:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006024:	4628      	mov	r0, r5
 8006026:	f7ff fecd 	bl	8005dc4 <__cvt>
 800602a:	9b06      	ldr	r3, [sp, #24]
 800602c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800602e:	2b47      	cmp	r3, #71	; 0x47
 8006030:	4680      	mov	r8, r0
 8006032:	d108      	bne.n	8006046 <_printf_float+0x142>
 8006034:	1cc8      	adds	r0, r1, #3
 8006036:	db02      	blt.n	800603e <_printf_float+0x13a>
 8006038:	6863      	ldr	r3, [r4, #4]
 800603a:	4299      	cmp	r1, r3
 800603c:	dd41      	ble.n	80060c2 <_printf_float+0x1be>
 800603e:	f1ab 0b02 	sub.w	fp, fp, #2
 8006042:	fa5f fb8b 	uxtb.w	fp, fp
 8006046:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800604a:	d820      	bhi.n	800608e <_printf_float+0x18a>
 800604c:	3901      	subs	r1, #1
 800604e:	465a      	mov	r2, fp
 8006050:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006054:	9109      	str	r1, [sp, #36]	; 0x24
 8006056:	f7ff ff17 	bl	8005e88 <__exponent>
 800605a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800605c:	1813      	adds	r3, r2, r0
 800605e:	2a01      	cmp	r2, #1
 8006060:	4681      	mov	r9, r0
 8006062:	6123      	str	r3, [r4, #16]
 8006064:	dc02      	bgt.n	800606c <_printf_float+0x168>
 8006066:	6822      	ldr	r2, [r4, #0]
 8006068:	07d2      	lsls	r2, r2, #31
 800606a:	d501      	bpl.n	8006070 <_printf_float+0x16c>
 800606c:	3301      	adds	r3, #1
 800606e:	6123      	str	r3, [r4, #16]
 8006070:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006074:	2b00      	cmp	r3, #0
 8006076:	d09c      	beq.n	8005fb2 <_printf_float+0xae>
 8006078:	232d      	movs	r3, #45	; 0x2d
 800607a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800607e:	e798      	b.n	8005fb2 <_printf_float+0xae>
 8006080:	9a06      	ldr	r2, [sp, #24]
 8006082:	2a47      	cmp	r2, #71	; 0x47
 8006084:	d1be      	bne.n	8006004 <_printf_float+0x100>
 8006086:	2b00      	cmp	r3, #0
 8006088:	d1bc      	bne.n	8006004 <_printf_float+0x100>
 800608a:	2301      	movs	r3, #1
 800608c:	e7b9      	b.n	8006002 <_printf_float+0xfe>
 800608e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006092:	d118      	bne.n	80060c6 <_printf_float+0x1c2>
 8006094:	2900      	cmp	r1, #0
 8006096:	6863      	ldr	r3, [r4, #4]
 8006098:	dd0b      	ble.n	80060b2 <_printf_float+0x1ae>
 800609a:	6121      	str	r1, [r4, #16]
 800609c:	b913      	cbnz	r3, 80060a4 <_printf_float+0x1a0>
 800609e:	6822      	ldr	r2, [r4, #0]
 80060a0:	07d0      	lsls	r0, r2, #31
 80060a2:	d502      	bpl.n	80060aa <_printf_float+0x1a6>
 80060a4:	3301      	adds	r3, #1
 80060a6:	440b      	add	r3, r1
 80060a8:	6123      	str	r3, [r4, #16]
 80060aa:	65a1      	str	r1, [r4, #88]	; 0x58
 80060ac:	f04f 0900 	mov.w	r9, #0
 80060b0:	e7de      	b.n	8006070 <_printf_float+0x16c>
 80060b2:	b913      	cbnz	r3, 80060ba <_printf_float+0x1b6>
 80060b4:	6822      	ldr	r2, [r4, #0]
 80060b6:	07d2      	lsls	r2, r2, #31
 80060b8:	d501      	bpl.n	80060be <_printf_float+0x1ba>
 80060ba:	3302      	adds	r3, #2
 80060bc:	e7f4      	b.n	80060a8 <_printf_float+0x1a4>
 80060be:	2301      	movs	r3, #1
 80060c0:	e7f2      	b.n	80060a8 <_printf_float+0x1a4>
 80060c2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80060c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060c8:	4299      	cmp	r1, r3
 80060ca:	db05      	blt.n	80060d8 <_printf_float+0x1d4>
 80060cc:	6823      	ldr	r3, [r4, #0]
 80060ce:	6121      	str	r1, [r4, #16]
 80060d0:	07d8      	lsls	r0, r3, #31
 80060d2:	d5ea      	bpl.n	80060aa <_printf_float+0x1a6>
 80060d4:	1c4b      	adds	r3, r1, #1
 80060d6:	e7e7      	b.n	80060a8 <_printf_float+0x1a4>
 80060d8:	2900      	cmp	r1, #0
 80060da:	bfd4      	ite	le
 80060dc:	f1c1 0202 	rsble	r2, r1, #2
 80060e0:	2201      	movgt	r2, #1
 80060e2:	4413      	add	r3, r2
 80060e4:	e7e0      	b.n	80060a8 <_printf_float+0x1a4>
 80060e6:	6823      	ldr	r3, [r4, #0]
 80060e8:	055a      	lsls	r2, r3, #21
 80060ea:	d407      	bmi.n	80060fc <_printf_float+0x1f8>
 80060ec:	6923      	ldr	r3, [r4, #16]
 80060ee:	4642      	mov	r2, r8
 80060f0:	4631      	mov	r1, r6
 80060f2:	4628      	mov	r0, r5
 80060f4:	47b8      	blx	r7
 80060f6:	3001      	adds	r0, #1
 80060f8:	d12c      	bne.n	8006154 <_printf_float+0x250>
 80060fa:	e764      	b.n	8005fc6 <_printf_float+0xc2>
 80060fc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006100:	f240 80e0 	bls.w	80062c4 <_printf_float+0x3c0>
 8006104:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006108:	2200      	movs	r2, #0
 800610a:	2300      	movs	r3, #0
 800610c:	f7fa fce4 	bl	8000ad8 <__aeabi_dcmpeq>
 8006110:	2800      	cmp	r0, #0
 8006112:	d034      	beq.n	800617e <_printf_float+0x27a>
 8006114:	4a37      	ldr	r2, [pc, #220]	; (80061f4 <_printf_float+0x2f0>)
 8006116:	2301      	movs	r3, #1
 8006118:	4631      	mov	r1, r6
 800611a:	4628      	mov	r0, r5
 800611c:	47b8      	blx	r7
 800611e:	3001      	adds	r0, #1
 8006120:	f43f af51 	beq.w	8005fc6 <_printf_float+0xc2>
 8006124:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006128:	429a      	cmp	r2, r3
 800612a:	db02      	blt.n	8006132 <_printf_float+0x22e>
 800612c:	6823      	ldr	r3, [r4, #0]
 800612e:	07d8      	lsls	r0, r3, #31
 8006130:	d510      	bpl.n	8006154 <_printf_float+0x250>
 8006132:	ee18 3a10 	vmov	r3, s16
 8006136:	4652      	mov	r2, sl
 8006138:	4631      	mov	r1, r6
 800613a:	4628      	mov	r0, r5
 800613c:	47b8      	blx	r7
 800613e:	3001      	adds	r0, #1
 8006140:	f43f af41 	beq.w	8005fc6 <_printf_float+0xc2>
 8006144:	f04f 0800 	mov.w	r8, #0
 8006148:	f104 091a 	add.w	r9, r4, #26
 800614c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800614e:	3b01      	subs	r3, #1
 8006150:	4543      	cmp	r3, r8
 8006152:	dc09      	bgt.n	8006168 <_printf_float+0x264>
 8006154:	6823      	ldr	r3, [r4, #0]
 8006156:	079b      	lsls	r3, r3, #30
 8006158:	f100 8105 	bmi.w	8006366 <_printf_float+0x462>
 800615c:	68e0      	ldr	r0, [r4, #12]
 800615e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006160:	4298      	cmp	r0, r3
 8006162:	bfb8      	it	lt
 8006164:	4618      	movlt	r0, r3
 8006166:	e730      	b.n	8005fca <_printf_float+0xc6>
 8006168:	2301      	movs	r3, #1
 800616a:	464a      	mov	r2, r9
 800616c:	4631      	mov	r1, r6
 800616e:	4628      	mov	r0, r5
 8006170:	47b8      	blx	r7
 8006172:	3001      	adds	r0, #1
 8006174:	f43f af27 	beq.w	8005fc6 <_printf_float+0xc2>
 8006178:	f108 0801 	add.w	r8, r8, #1
 800617c:	e7e6      	b.n	800614c <_printf_float+0x248>
 800617e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006180:	2b00      	cmp	r3, #0
 8006182:	dc39      	bgt.n	80061f8 <_printf_float+0x2f4>
 8006184:	4a1b      	ldr	r2, [pc, #108]	; (80061f4 <_printf_float+0x2f0>)
 8006186:	2301      	movs	r3, #1
 8006188:	4631      	mov	r1, r6
 800618a:	4628      	mov	r0, r5
 800618c:	47b8      	blx	r7
 800618e:	3001      	adds	r0, #1
 8006190:	f43f af19 	beq.w	8005fc6 <_printf_float+0xc2>
 8006194:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006198:	4313      	orrs	r3, r2
 800619a:	d102      	bne.n	80061a2 <_printf_float+0x29e>
 800619c:	6823      	ldr	r3, [r4, #0]
 800619e:	07d9      	lsls	r1, r3, #31
 80061a0:	d5d8      	bpl.n	8006154 <_printf_float+0x250>
 80061a2:	ee18 3a10 	vmov	r3, s16
 80061a6:	4652      	mov	r2, sl
 80061a8:	4631      	mov	r1, r6
 80061aa:	4628      	mov	r0, r5
 80061ac:	47b8      	blx	r7
 80061ae:	3001      	adds	r0, #1
 80061b0:	f43f af09 	beq.w	8005fc6 <_printf_float+0xc2>
 80061b4:	f04f 0900 	mov.w	r9, #0
 80061b8:	f104 0a1a 	add.w	sl, r4, #26
 80061bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061be:	425b      	negs	r3, r3
 80061c0:	454b      	cmp	r3, r9
 80061c2:	dc01      	bgt.n	80061c8 <_printf_float+0x2c4>
 80061c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061c6:	e792      	b.n	80060ee <_printf_float+0x1ea>
 80061c8:	2301      	movs	r3, #1
 80061ca:	4652      	mov	r2, sl
 80061cc:	4631      	mov	r1, r6
 80061ce:	4628      	mov	r0, r5
 80061d0:	47b8      	blx	r7
 80061d2:	3001      	adds	r0, #1
 80061d4:	f43f aef7 	beq.w	8005fc6 <_printf_float+0xc2>
 80061d8:	f109 0901 	add.w	r9, r9, #1
 80061dc:	e7ee      	b.n	80061bc <_printf_float+0x2b8>
 80061de:	bf00      	nop
 80061e0:	7fefffff 	.word	0x7fefffff
 80061e4:	0800bc0c 	.word	0x0800bc0c
 80061e8:	0800bc10 	.word	0x0800bc10
 80061ec:	0800bc18 	.word	0x0800bc18
 80061f0:	0800bc14 	.word	0x0800bc14
 80061f4:	0800bc1c 	.word	0x0800bc1c
 80061f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80061fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80061fc:	429a      	cmp	r2, r3
 80061fe:	bfa8      	it	ge
 8006200:	461a      	movge	r2, r3
 8006202:	2a00      	cmp	r2, #0
 8006204:	4691      	mov	r9, r2
 8006206:	dc37      	bgt.n	8006278 <_printf_float+0x374>
 8006208:	f04f 0b00 	mov.w	fp, #0
 800620c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006210:	f104 021a 	add.w	r2, r4, #26
 8006214:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006216:	9305      	str	r3, [sp, #20]
 8006218:	eba3 0309 	sub.w	r3, r3, r9
 800621c:	455b      	cmp	r3, fp
 800621e:	dc33      	bgt.n	8006288 <_printf_float+0x384>
 8006220:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006224:	429a      	cmp	r2, r3
 8006226:	db3b      	blt.n	80062a0 <_printf_float+0x39c>
 8006228:	6823      	ldr	r3, [r4, #0]
 800622a:	07da      	lsls	r2, r3, #31
 800622c:	d438      	bmi.n	80062a0 <_printf_float+0x39c>
 800622e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006230:	9b05      	ldr	r3, [sp, #20]
 8006232:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006234:	1ad3      	subs	r3, r2, r3
 8006236:	eba2 0901 	sub.w	r9, r2, r1
 800623a:	4599      	cmp	r9, r3
 800623c:	bfa8      	it	ge
 800623e:	4699      	movge	r9, r3
 8006240:	f1b9 0f00 	cmp.w	r9, #0
 8006244:	dc35      	bgt.n	80062b2 <_printf_float+0x3ae>
 8006246:	f04f 0800 	mov.w	r8, #0
 800624a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800624e:	f104 0a1a 	add.w	sl, r4, #26
 8006252:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006256:	1a9b      	subs	r3, r3, r2
 8006258:	eba3 0309 	sub.w	r3, r3, r9
 800625c:	4543      	cmp	r3, r8
 800625e:	f77f af79 	ble.w	8006154 <_printf_float+0x250>
 8006262:	2301      	movs	r3, #1
 8006264:	4652      	mov	r2, sl
 8006266:	4631      	mov	r1, r6
 8006268:	4628      	mov	r0, r5
 800626a:	47b8      	blx	r7
 800626c:	3001      	adds	r0, #1
 800626e:	f43f aeaa 	beq.w	8005fc6 <_printf_float+0xc2>
 8006272:	f108 0801 	add.w	r8, r8, #1
 8006276:	e7ec      	b.n	8006252 <_printf_float+0x34e>
 8006278:	4613      	mov	r3, r2
 800627a:	4631      	mov	r1, r6
 800627c:	4642      	mov	r2, r8
 800627e:	4628      	mov	r0, r5
 8006280:	47b8      	blx	r7
 8006282:	3001      	adds	r0, #1
 8006284:	d1c0      	bne.n	8006208 <_printf_float+0x304>
 8006286:	e69e      	b.n	8005fc6 <_printf_float+0xc2>
 8006288:	2301      	movs	r3, #1
 800628a:	4631      	mov	r1, r6
 800628c:	4628      	mov	r0, r5
 800628e:	9205      	str	r2, [sp, #20]
 8006290:	47b8      	blx	r7
 8006292:	3001      	adds	r0, #1
 8006294:	f43f ae97 	beq.w	8005fc6 <_printf_float+0xc2>
 8006298:	9a05      	ldr	r2, [sp, #20]
 800629a:	f10b 0b01 	add.w	fp, fp, #1
 800629e:	e7b9      	b.n	8006214 <_printf_float+0x310>
 80062a0:	ee18 3a10 	vmov	r3, s16
 80062a4:	4652      	mov	r2, sl
 80062a6:	4631      	mov	r1, r6
 80062a8:	4628      	mov	r0, r5
 80062aa:	47b8      	blx	r7
 80062ac:	3001      	adds	r0, #1
 80062ae:	d1be      	bne.n	800622e <_printf_float+0x32a>
 80062b0:	e689      	b.n	8005fc6 <_printf_float+0xc2>
 80062b2:	9a05      	ldr	r2, [sp, #20]
 80062b4:	464b      	mov	r3, r9
 80062b6:	4442      	add	r2, r8
 80062b8:	4631      	mov	r1, r6
 80062ba:	4628      	mov	r0, r5
 80062bc:	47b8      	blx	r7
 80062be:	3001      	adds	r0, #1
 80062c0:	d1c1      	bne.n	8006246 <_printf_float+0x342>
 80062c2:	e680      	b.n	8005fc6 <_printf_float+0xc2>
 80062c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062c6:	2a01      	cmp	r2, #1
 80062c8:	dc01      	bgt.n	80062ce <_printf_float+0x3ca>
 80062ca:	07db      	lsls	r3, r3, #31
 80062cc:	d538      	bpl.n	8006340 <_printf_float+0x43c>
 80062ce:	2301      	movs	r3, #1
 80062d0:	4642      	mov	r2, r8
 80062d2:	4631      	mov	r1, r6
 80062d4:	4628      	mov	r0, r5
 80062d6:	47b8      	blx	r7
 80062d8:	3001      	adds	r0, #1
 80062da:	f43f ae74 	beq.w	8005fc6 <_printf_float+0xc2>
 80062de:	ee18 3a10 	vmov	r3, s16
 80062e2:	4652      	mov	r2, sl
 80062e4:	4631      	mov	r1, r6
 80062e6:	4628      	mov	r0, r5
 80062e8:	47b8      	blx	r7
 80062ea:	3001      	adds	r0, #1
 80062ec:	f43f ae6b 	beq.w	8005fc6 <_printf_float+0xc2>
 80062f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80062f4:	2200      	movs	r2, #0
 80062f6:	2300      	movs	r3, #0
 80062f8:	f7fa fbee 	bl	8000ad8 <__aeabi_dcmpeq>
 80062fc:	b9d8      	cbnz	r0, 8006336 <_printf_float+0x432>
 80062fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006300:	f108 0201 	add.w	r2, r8, #1
 8006304:	3b01      	subs	r3, #1
 8006306:	4631      	mov	r1, r6
 8006308:	4628      	mov	r0, r5
 800630a:	47b8      	blx	r7
 800630c:	3001      	adds	r0, #1
 800630e:	d10e      	bne.n	800632e <_printf_float+0x42a>
 8006310:	e659      	b.n	8005fc6 <_printf_float+0xc2>
 8006312:	2301      	movs	r3, #1
 8006314:	4652      	mov	r2, sl
 8006316:	4631      	mov	r1, r6
 8006318:	4628      	mov	r0, r5
 800631a:	47b8      	blx	r7
 800631c:	3001      	adds	r0, #1
 800631e:	f43f ae52 	beq.w	8005fc6 <_printf_float+0xc2>
 8006322:	f108 0801 	add.w	r8, r8, #1
 8006326:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006328:	3b01      	subs	r3, #1
 800632a:	4543      	cmp	r3, r8
 800632c:	dcf1      	bgt.n	8006312 <_printf_float+0x40e>
 800632e:	464b      	mov	r3, r9
 8006330:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006334:	e6dc      	b.n	80060f0 <_printf_float+0x1ec>
 8006336:	f04f 0800 	mov.w	r8, #0
 800633a:	f104 0a1a 	add.w	sl, r4, #26
 800633e:	e7f2      	b.n	8006326 <_printf_float+0x422>
 8006340:	2301      	movs	r3, #1
 8006342:	4642      	mov	r2, r8
 8006344:	e7df      	b.n	8006306 <_printf_float+0x402>
 8006346:	2301      	movs	r3, #1
 8006348:	464a      	mov	r2, r9
 800634a:	4631      	mov	r1, r6
 800634c:	4628      	mov	r0, r5
 800634e:	47b8      	blx	r7
 8006350:	3001      	adds	r0, #1
 8006352:	f43f ae38 	beq.w	8005fc6 <_printf_float+0xc2>
 8006356:	f108 0801 	add.w	r8, r8, #1
 800635a:	68e3      	ldr	r3, [r4, #12]
 800635c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800635e:	1a5b      	subs	r3, r3, r1
 8006360:	4543      	cmp	r3, r8
 8006362:	dcf0      	bgt.n	8006346 <_printf_float+0x442>
 8006364:	e6fa      	b.n	800615c <_printf_float+0x258>
 8006366:	f04f 0800 	mov.w	r8, #0
 800636a:	f104 0919 	add.w	r9, r4, #25
 800636e:	e7f4      	b.n	800635a <_printf_float+0x456>

08006370 <_printf_common>:
 8006370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006374:	4616      	mov	r6, r2
 8006376:	4699      	mov	r9, r3
 8006378:	688a      	ldr	r2, [r1, #8]
 800637a:	690b      	ldr	r3, [r1, #16]
 800637c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006380:	4293      	cmp	r3, r2
 8006382:	bfb8      	it	lt
 8006384:	4613      	movlt	r3, r2
 8006386:	6033      	str	r3, [r6, #0]
 8006388:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800638c:	4607      	mov	r7, r0
 800638e:	460c      	mov	r4, r1
 8006390:	b10a      	cbz	r2, 8006396 <_printf_common+0x26>
 8006392:	3301      	adds	r3, #1
 8006394:	6033      	str	r3, [r6, #0]
 8006396:	6823      	ldr	r3, [r4, #0]
 8006398:	0699      	lsls	r1, r3, #26
 800639a:	bf42      	ittt	mi
 800639c:	6833      	ldrmi	r3, [r6, #0]
 800639e:	3302      	addmi	r3, #2
 80063a0:	6033      	strmi	r3, [r6, #0]
 80063a2:	6825      	ldr	r5, [r4, #0]
 80063a4:	f015 0506 	ands.w	r5, r5, #6
 80063a8:	d106      	bne.n	80063b8 <_printf_common+0x48>
 80063aa:	f104 0a19 	add.w	sl, r4, #25
 80063ae:	68e3      	ldr	r3, [r4, #12]
 80063b0:	6832      	ldr	r2, [r6, #0]
 80063b2:	1a9b      	subs	r3, r3, r2
 80063b4:	42ab      	cmp	r3, r5
 80063b6:	dc26      	bgt.n	8006406 <_printf_common+0x96>
 80063b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80063bc:	1e13      	subs	r3, r2, #0
 80063be:	6822      	ldr	r2, [r4, #0]
 80063c0:	bf18      	it	ne
 80063c2:	2301      	movne	r3, #1
 80063c4:	0692      	lsls	r2, r2, #26
 80063c6:	d42b      	bmi.n	8006420 <_printf_common+0xb0>
 80063c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063cc:	4649      	mov	r1, r9
 80063ce:	4638      	mov	r0, r7
 80063d0:	47c0      	blx	r8
 80063d2:	3001      	adds	r0, #1
 80063d4:	d01e      	beq.n	8006414 <_printf_common+0xa4>
 80063d6:	6823      	ldr	r3, [r4, #0]
 80063d8:	68e5      	ldr	r5, [r4, #12]
 80063da:	6832      	ldr	r2, [r6, #0]
 80063dc:	f003 0306 	and.w	r3, r3, #6
 80063e0:	2b04      	cmp	r3, #4
 80063e2:	bf08      	it	eq
 80063e4:	1aad      	subeq	r5, r5, r2
 80063e6:	68a3      	ldr	r3, [r4, #8]
 80063e8:	6922      	ldr	r2, [r4, #16]
 80063ea:	bf0c      	ite	eq
 80063ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063f0:	2500      	movne	r5, #0
 80063f2:	4293      	cmp	r3, r2
 80063f4:	bfc4      	itt	gt
 80063f6:	1a9b      	subgt	r3, r3, r2
 80063f8:	18ed      	addgt	r5, r5, r3
 80063fa:	2600      	movs	r6, #0
 80063fc:	341a      	adds	r4, #26
 80063fe:	42b5      	cmp	r5, r6
 8006400:	d11a      	bne.n	8006438 <_printf_common+0xc8>
 8006402:	2000      	movs	r0, #0
 8006404:	e008      	b.n	8006418 <_printf_common+0xa8>
 8006406:	2301      	movs	r3, #1
 8006408:	4652      	mov	r2, sl
 800640a:	4649      	mov	r1, r9
 800640c:	4638      	mov	r0, r7
 800640e:	47c0      	blx	r8
 8006410:	3001      	adds	r0, #1
 8006412:	d103      	bne.n	800641c <_printf_common+0xac>
 8006414:	f04f 30ff 	mov.w	r0, #4294967295
 8006418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800641c:	3501      	adds	r5, #1
 800641e:	e7c6      	b.n	80063ae <_printf_common+0x3e>
 8006420:	18e1      	adds	r1, r4, r3
 8006422:	1c5a      	adds	r2, r3, #1
 8006424:	2030      	movs	r0, #48	; 0x30
 8006426:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800642a:	4422      	add	r2, r4
 800642c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006430:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006434:	3302      	adds	r3, #2
 8006436:	e7c7      	b.n	80063c8 <_printf_common+0x58>
 8006438:	2301      	movs	r3, #1
 800643a:	4622      	mov	r2, r4
 800643c:	4649      	mov	r1, r9
 800643e:	4638      	mov	r0, r7
 8006440:	47c0      	blx	r8
 8006442:	3001      	adds	r0, #1
 8006444:	d0e6      	beq.n	8006414 <_printf_common+0xa4>
 8006446:	3601      	adds	r6, #1
 8006448:	e7d9      	b.n	80063fe <_printf_common+0x8e>
	...

0800644c <_printf_i>:
 800644c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006450:	460c      	mov	r4, r1
 8006452:	4691      	mov	r9, r2
 8006454:	7e27      	ldrb	r7, [r4, #24]
 8006456:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006458:	2f78      	cmp	r7, #120	; 0x78
 800645a:	4680      	mov	r8, r0
 800645c:	469a      	mov	sl, r3
 800645e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006462:	d807      	bhi.n	8006474 <_printf_i+0x28>
 8006464:	2f62      	cmp	r7, #98	; 0x62
 8006466:	d80a      	bhi.n	800647e <_printf_i+0x32>
 8006468:	2f00      	cmp	r7, #0
 800646a:	f000 80d8 	beq.w	800661e <_printf_i+0x1d2>
 800646e:	2f58      	cmp	r7, #88	; 0x58
 8006470:	f000 80a3 	beq.w	80065ba <_printf_i+0x16e>
 8006474:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006478:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800647c:	e03a      	b.n	80064f4 <_printf_i+0xa8>
 800647e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006482:	2b15      	cmp	r3, #21
 8006484:	d8f6      	bhi.n	8006474 <_printf_i+0x28>
 8006486:	a001      	add	r0, pc, #4	; (adr r0, 800648c <_printf_i+0x40>)
 8006488:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800648c:	080064e5 	.word	0x080064e5
 8006490:	080064f9 	.word	0x080064f9
 8006494:	08006475 	.word	0x08006475
 8006498:	08006475 	.word	0x08006475
 800649c:	08006475 	.word	0x08006475
 80064a0:	08006475 	.word	0x08006475
 80064a4:	080064f9 	.word	0x080064f9
 80064a8:	08006475 	.word	0x08006475
 80064ac:	08006475 	.word	0x08006475
 80064b0:	08006475 	.word	0x08006475
 80064b4:	08006475 	.word	0x08006475
 80064b8:	08006605 	.word	0x08006605
 80064bc:	08006529 	.word	0x08006529
 80064c0:	080065e7 	.word	0x080065e7
 80064c4:	08006475 	.word	0x08006475
 80064c8:	08006475 	.word	0x08006475
 80064cc:	08006627 	.word	0x08006627
 80064d0:	08006475 	.word	0x08006475
 80064d4:	08006529 	.word	0x08006529
 80064d8:	08006475 	.word	0x08006475
 80064dc:	08006475 	.word	0x08006475
 80064e0:	080065ef 	.word	0x080065ef
 80064e4:	680b      	ldr	r3, [r1, #0]
 80064e6:	1d1a      	adds	r2, r3, #4
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	600a      	str	r2, [r1, #0]
 80064ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80064f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064f4:	2301      	movs	r3, #1
 80064f6:	e0a3      	b.n	8006640 <_printf_i+0x1f4>
 80064f8:	6825      	ldr	r5, [r4, #0]
 80064fa:	6808      	ldr	r0, [r1, #0]
 80064fc:	062e      	lsls	r6, r5, #24
 80064fe:	f100 0304 	add.w	r3, r0, #4
 8006502:	d50a      	bpl.n	800651a <_printf_i+0xce>
 8006504:	6805      	ldr	r5, [r0, #0]
 8006506:	600b      	str	r3, [r1, #0]
 8006508:	2d00      	cmp	r5, #0
 800650a:	da03      	bge.n	8006514 <_printf_i+0xc8>
 800650c:	232d      	movs	r3, #45	; 0x2d
 800650e:	426d      	negs	r5, r5
 8006510:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006514:	485e      	ldr	r0, [pc, #376]	; (8006690 <_printf_i+0x244>)
 8006516:	230a      	movs	r3, #10
 8006518:	e019      	b.n	800654e <_printf_i+0x102>
 800651a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800651e:	6805      	ldr	r5, [r0, #0]
 8006520:	600b      	str	r3, [r1, #0]
 8006522:	bf18      	it	ne
 8006524:	b22d      	sxthne	r5, r5
 8006526:	e7ef      	b.n	8006508 <_printf_i+0xbc>
 8006528:	680b      	ldr	r3, [r1, #0]
 800652a:	6825      	ldr	r5, [r4, #0]
 800652c:	1d18      	adds	r0, r3, #4
 800652e:	6008      	str	r0, [r1, #0]
 8006530:	0628      	lsls	r0, r5, #24
 8006532:	d501      	bpl.n	8006538 <_printf_i+0xec>
 8006534:	681d      	ldr	r5, [r3, #0]
 8006536:	e002      	b.n	800653e <_printf_i+0xf2>
 8006538:	0669      	lsls	r1, r5, #25
 800653a:	d5fb      	bpl.n	8006534 <_printf_i+0xe8>
 800653c:	881d      	ldrh	r5, [r3, #0]
 800653e:	4854      	ldr	r0, [pc, #336]	; (8006690 <_printf_i+0x244>)
 8006540:	2f6f      	cmp	r7, #111	; 0x6f
 8006542:	bf0c      	ite	eq
 8006544:	2308      	moveq	r3, #8
 8006546:	230a      	movne	r3, #10
 8006548:	2100      	movs	r1, #0
 800654a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800654e:	6866      	ldr	r6, [r4, #4]
 8006550:	60a6      	str	r6, [r4, #8]
 8006552:	2e00      	cmp	r6, #0
 8006554:	bfa2      	ittt	ge
 8006556:	6821      	ldrge	r1, [r4, #0]
 8006558:	f021 0104 	bicge.w	r1, r1, #4
 800655c:	6021      	strge	r1, [r4, #0]
 800655e:	b90d      	cbnz	r5, 8006564 <_printf_i+0x118>
 8006560:	2e00      	cmp	r6, #0
 8006562:	d04d      	beq.n	8006600 <_printf_i+0x1b4>
 8006564:	4616      	mov	r6, r2
 8006566:	fbb5 f1f3 	udiv	r1, r5, r3
 800656a:	fb03 5711 	mls	r7, r3, r1, r5
 800656e:	5dc7      	ldrb	r7, [r0, r7]
 8006570:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006574:	462f      	mov	r7, r5
 8006576:	42bb      	cmp	r3, r7
 8006578:	460d      	mov	r5, r1
 800657a:	d9f4      	bls.n	8006566 <_printf_i+0x11a>
 800657c:	2b08      	cmp	r3, #8
 800657e:	d10b      	bne.n	8006598 <_printf_i+0x14c>
 8006580:	6823      	ldr	r3, [r4, #0]
 8006582:	07df      	lsls	r7, r3, #31
 8006584:	d508      	bpl.n	8006598 <_printf_i+0x14c>
 8006586:	6923      	ldr	r3, [r4, #16]
 8006588:	6861      	ldr	r1, [r4, #4]
 800658a:	4299      	cmp	r1, r3
 800658c:	bfde      	ittt	le
 800658e:	2330      	movle	r3, #48	; 0x30
 8006590:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006594:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006598:	1b92      	subs	r2, r2, r6
 800659a:	6122      	str	r2, [r4, #16]
 800659c:	f8cd a000 	str.w	sl, [sp]
 80065a0:	464b      	mov	r3, r9
 80065a2:	aa03      	add	r2, sp, #12
 80065a4:	4621      	mov	r1, r4
 80065a6:	4640      	mov	r0, r8
 80065a8:	f7ff fee2 	bl	8006370 <_printf_common>
 80065ac:	3001      	adds	r0, #1
 80065ae:	d14c      	bne.n	800664a <_printf_i+0x1fe>
 80065b0:	f04f 30ff 	mov.w	r0, #4294967295
 80065b4:	b004      	add	sp, #16
 80065b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065ba:	4835      	ldr	r0, [pc, #212]	; (8006690 <_printf_i+0x244>)
 80065bc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80065c0:	6823      	ldr	r3, [r4, #0]
 80065c2:	680e      	ldr	r6, [r1, #0]
 80065c4:	061f      	lsls	r7, r3, #24
 80065c6:	f856 5b04 	ldr.w	r5, [r6], #4
 80065ca:	600e      	str	r6, [r1, #0]
 80065cc:	d514      	bpl.n	80065f8 <_printf_i+0x1ac>
 80065ce:	07d9      	lsls	r1, r3, #31
 80065d0:	bf44      	itt	mi
 80065d2:	f043 0320 	orrmi.w	r3, r3, #32
 80065d6:	6023      	strmi	r3, [r4, #0]
 80065d8:	b91d      	cbnz	r5, 80065e2 <_printf_i+0x196>
 80065da:	6823      	ldr	r3, [r4, #0]
 80065dc:	f023 0320 	bic.w	r3, r3, #32
 80065e0:	6023      	str	r3, [r4, #0]
 80065e2:	2310      	movs	r3, #16
 80065e4:	e7b0      	b.n	8006548 <_printf_i+0xfc>
 80065e6:	6823      	ldr	r3, [r4, #0]
 80065e8:	f043 0320 	orr.w	r3, r3, #32
 80065ec:	6023      	str	r3, [r4, #0]
 80065ee:	2378      	movs	r3, #120	; 0x78
 80065f0:	4828      	ldr	r0, [pc, #160]	; (8006694 <_printf_i+0x248>)
 80065f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80065f6:	e7e3      	b.n	80065c0 <_printf_i+0x174>
 80065f8:	065e      	lsls	r6, r3, #25
 80065fa:	bf48      	it	mi
 80065fc:	b2ad      	uxthmi	r5, r5
 80065fe:	e7e6      	b.n	80065ce <_printf_i+0x182>
 8006600:	4616      	mov	r6, r2
 8006602:	e7bb      	b.n	800657c <_printf_i+0x130>
 8006604:	680b      	ldr	r3, [r1, #0]
 8006606:	6826      	ldr	r6, [r4, #0]
 8006608:	6960      	ldr	r0, [r4, #20]
 800660a:	1d1d      	adds	r5, r3, #4
 800660c:	600d      	str	r5, [r1, #0]
 800660e:	0635      	lsls	r5, r6, #24
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	d501      	bpl.n	8006618 <_printf_i+0x1cc>
 8006614:	6018      	str	r0, [r3, #0]
 8006616:	e002      	b.n	800661e <_printf_i+0x1d2>
 8006618:	0671      	lsls	r1, r6, #25
 800661a:	d5fb      	bpl.n	8006614 <_printf_i+0x1c8>
 800661c:	8018      	strh	r0, [r3, #0]
 800661e:	2300      	movs	r3, #0
 8006620:	6123      	str	r3, [r4, #16]
 8006622:	4616      	mov	r6, r2
 8006624:	e7ba      	b.n	800659c <_printf_i+0x150>
 8006626:	680b      	ldr	r3, [r1, #0]
 8006628:	1d1a      	adds	r2, r3, #4
 800662a:	600a      	str	r2, [r1, #0]
 800662c:	681e      	ldr	r6, [r3, #0]
 800662e:	6862      	ldr	r2, [r4, #4]
 8006630:	2100      	movs	r1, #0
 8006632:	4630      	mov	r0, r6
 8006634:	f7f9 fddc 	bl	80001f0 <memchr>
 8006638:	b108      	cbz	r0, 800663e <_printf_i+0x1f2>
 800663a:	1b80      	subs	r0, r0, r6
 800663c:	6060      	str	r0, [r4, #4]
 800663e:	6863      	ldr	r3, [r4, #4]
 8006640:	6123      	str	r3, [r4, #16]
 8006642:	2300      	movs	r3, #0
 8006644:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006648:	e7a8      	b.n	800659c <_printf_i+0x150>
 800664a:	6923      	ldr	r3, [r4, #16]
 800664c:	4632      	mov	r2, r6
 800664e:	4649      	mov	r1, r9
 8006650:	4640      	mov	r0, r8
 8006652:	47d0      	blx	sl
 8006654:	3001      	adds	r0, #1
 8006656:	d0ab      	beq.n	80065b0 <_printf_i+0x164>
 8006658:	6823      	ldr	r3, [r4, #0]
 800665a:	079b      	lsls	r3, r3, #30
 800665c:	d413      	bmi.n	8006686 <_printf_i+0x23a>
 800665e:	68e0      	ldr	r0, [r4, #12]
 8006660:	9b03      	ldr	r3, [sp, #12]
 8006662:	4298      	cmp	r0, r3
 8006664:	bfb8      	it	lt
 8006666:	4618      	movlt	r0, r3
 8006668:	e7a4      	b.n	80065b4 <_printf_i+0x168>
 800666a:	2301      	movs	r3, #1
 800666c:	4632      	mov	r2, r6
 800666e:	4649      	mov	r1, r9
 8006670:	4640      	mov	r0, r8
 8006672:	47d0      	blx	sl
 8006674:	3001      	adds	r0, #1
 8006676:	d09b      	beq.n	80065b0 <_printf_i+0x164>
 8006678:	3501      	adds	r5, #1
 800667a:	68e3      	ldr	r3, [r4, #12]
 800667c:	9903      	ldr	r1, [sp, #12]
 800667e:	1a5b      	subs	r3, r3, r1
 8006680:	42ab      	cmp	r3, r5
 8006682:	dcf2      	bgt.n	800666a <_printf_i+0x21e>
 8006684:	e7eb      	b.n	800665e <_printf_i+0x212>
 8006686:	2500      	movs	r5, #0
 8006688:	f104 0619 	add.w	r6, r4, #25
 800668c:	e7f5      	b.n	800667a <_printf_i+0x22e>
 800668e:	bf00      	nop
 8006690:	0800bc1e 	.word	0x0800bc1e
 8006694:	0800bc2f 	.word	0x0800bc2f

08006698 <_scanf_float>:
 8006698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800669c:	b087      	sub	sp, #28
 800669e:	4617      	mov	r7, r2
 80066a0:	9303      	str	r3, [sp, #12]
 80066a2:	688b      	ldr	r3, [r1, #8]
 80066a4:	1e5a      	subs	r2, r3, #1
 80066a6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80066aa:	bf83      	ittte	hi
 80066ac:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80066b0:	195b      	addhi	r3, r3, r5
 80066b2:	9302      	strhi	r3, [sp, #8]
 80066b4:	2300      	movls	r3, #0
 80066b6:	bf86      	itte	hi
 80066b8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80066bc:	608b      	strhi	r3, [r1, #8]
 80066be:	9302      	strls	r3, [sp, #8]
 80066c0:	680b      	ldr	r3, [r1, #0]
 80066c2:	468b      	mov	fp, r1
 80066c4:	2500      	movs	r5, #0
 80066c6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80066ca:	f84b 3b1c 	str.w	r3, [fp], #28
 80066ce:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80066d2:	4680      	mov	r8, r0
 80066d4:	460c      	mov	r4, r1
 80066d6:	465e      	mov	r6, fp
 80066d8:	46aa      	mov	sl, r5
 80066da:	46a9      	mov	r9, r5
 80066dc:	9501      	str	r5, [sp, #4]
 80066de:	68a2      	ldr	r2, [r4, #8]
 80066e0:	b152      	cbz	r2, 80066f8 <_scanf_float+0x60>
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	2b4e      	cmp	r3, #78	; 0x4e
 80066e8:	d864      	bhi.n	80067b4 <_scanf_float+0x11c>
 80066ea:	2b40      	cmp	r3, #64	; 0x40
 80066ec:	d83c      	bhi.n	8006768 <_scanf_float+0xd0>
 80066ee:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80066f2:	b2c8      	uxtb	r0, r1
 80066f4:	280e      	cmp	r0, #14
 80066f6:	d93a      	bls.n	800676e <_scanf_float+0xd6>
 80066f8:	f1b9 0f00 	cmp.w	r9, #0
 80066fc:	d003      	beq.n	8006706 <_scanf_float+0x6e>
 80066fe:	6823      	ldr	r3, [r4, #0]
 8006700:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006704:	6023      	str	r3, [r4, #0]
 8006706:	f10a 3aff 	add.w	sl, sl, #4294967295
 800670a:	f1ba 0f01 	cmp.w	sl, #1
 800670e:	f200 8113 	bhi.w	8006938 <_scanf_float+0x2a0>
 8006712:	455e      	cmp	r6, fp
 8006714:	f200 8105 	bhi.w	8006922 <_scanf_float+0x28a>
 8006718:	2501      	movs	r5, #1
 800671a:	4628      	mov	r0, r5
 800671c:	b007      	add	sp, #28
 800671e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006722:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006726:	2a0d      	cmp	r2, #13
 8006728:	d8e6      	bhi.n	80066f8 <_scanf_float+0x60>
 800672a:	a101      	add	r1, pc, #4	; (adr r1, 8006730 <_scanf_float+0x98>)
 800672c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006730:	0800686f 	.word	0x0800686f
 8006734:	080066f9 	.word	0x080066f9
 8006738:	080066f9 	.word	0x080066f9
 800673c:	080066f9 	.word	0x080066f9
 8006740:	080068cf 	.word	0x080068cf
 8006744:	080068a7 	.word	0x080068a7
 8006748:	080066f9 	.word	0x080066f9
 800674c:	080066f9 	.word	0x080066f9
 8006750:	0800687d 	.word	0x0800687d
 8006754:	080066f9 	.word	0x080066f9
 8006758:	080066f9 	.word	0x080066f9
 800675c:	080066f9 	.word	0x080066f9
 8006760:	080066f9 	.word	0x080066f9
 8006764:	08006835 	.word	0x08006835
 8006768:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800676c:	e7db      	b.n	8006726 <_scanf_float+0x8e>
 800676e:	290e      	cmp	r1, #14
 8006770:	d8c2      	bhi.n	80066f8 <_scanf_float+0x60>
 8006772:	a001      	add	r0, pc, #4	; (adr r0, 8006778 <_scanf_float+0xe0>)
 8006774:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006778:	08006827 	.word	0x08006827
 800677c:	080066f9 	.word	0x080066f9
 8006780:	08006827 	.word	0x08006827
 8006784:	080068bb 	.word	0x080068bb
 8006788:	080066f9 	.word	0x080066f9
 800678c:	080067d5 	.word	0x080067d5
 8006790:	08006811 	.word	0x08006811
 8006794:	08006811 	.word	0x08006811
 8006798:	08006811 	.word	0x08006811
 800679c:	08006811 	.word	0x08006811
 80067a0:	08006811 	.word	0x08006811
 80067a4:	08006811 	.word	0x08006811
 80067a8:	08006811 	.word	0x08006811
 80067ac:	08006811 	.word	0x08006811
 80067b0:	08006811 	.word	0x08006811
 80067b4:	2b6e      	cmp	r3, #110	; 0x6e
 80067b6:	d809      	bhi.n	80067cc <_scanf_float+0x134>
 80067b8:	2b60      	cmp	r3, #96	; 0x60
 80067ba:	d8b2      	bhi.n	8006722 <_scanf_float+0x8a>
 80067bc:	2b54      	cmp	r3, #84	; 0x54
 80067be:	d077      	beq.n	80068b0 <_scanf_float+0x218>
 80067c0:	2b59      	cmp	r3, #89	; 0x59
 80067c2:	d199      	bne.n	80066f8 <_scanf_float+0x60>
 80067c4:	2d07      	cmp	r5, #7
 80067c6:	d197      	bne.n	80066f8 <_scanf_float+0x60>
 80067c8:	2508      	movs	r5, #8
 80067ca:	e029      	b.n	8006820 <_scanf_float+0x188>
 80067cc:	2b74      	cmp	r3, #116	; 0x74
 80067ce:	d06f      	beq.n	80068b0 <_scanf_float+0x218>
 80067d0:	2b79      	cmp	r3, #121	; 0x79
 80067d2:	e7f6      	b.n	80067c2 <_scanf_float+0x12a>
 80067d4:	6821      	ldr	r1, [r4, #0]
 80067d6:	05c8      	lsls	r0, r1, #23
 80067d8:	d51a      	bpl.n	8006810 <_scanf_float+0x178>
 80067da:	9b02      	ldr	r3, [sp, #8]
 80067dc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80067e0:	6021      	str	r1, [r4, #0]
 80067e2:	f109 0901 	add.w	r9, r9, #1
 80067e6:	b11b      	cbz	r3, 80067f0 <_scanf_float+0x158>
 80067e8:	3b01      	subs	r3, #1
 80067ea:	3201      	adds	r2, #1
 80067ec:	9302      	str	r3, [sp, #8]
 80067ee:	60a2      	str	r2, [r4, #8]
 80067f0:	68a3      	ldr	r3, [r4, #8]
 80067f2:	3b01      	subs	r3, #1
 80067f4:	60a3      	str	r3, [r4, #8]
 80067f6:	6923      	ldr	r3, [r4, #16]
 80067f8:	3301      	adds	r3, #1
 80067fa:	6123      	str	r3, [r4, #16]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	3b01      	subs	r3, #1
 8006800:	2b00      	cmp	r3, #0
 8006802:	607b      	str	r3, [r7, #4]
 8006804:	f340 8084 	ble.w	8006910 <_scanf_float+0x278>
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	3301      	adds	r3, #1
 800680c:	603b      	str	r3, [r7, #0]
 800680e:	e766      	b.n	80066de <_scanf_float+0x46>
 8006810:	eb1a 0f05 	cmn.w	sl, r5
 8006814:	f47f af70 	bne.w	80066f8 <_scanf_float+0x60>
 8006818:	6822      	ldr	r2, [r4, #0]
 800681a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800681e:	6022      	str	r2, [r4, #0]
 8006820:	f806 3b01 	strb.w	r3, [r6], #1
 8006824:	e7e4      	b.n	80067f0 <_scanf_float+0x158>
 8006826:	6822      	ldr	r2, [r4, #0]
 8006828:	0610      	lsls	r0, r2, #24
 800682a:	f57f af65 	bpl.w	80066f8 <_scanf_float+0x60>
 800682e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006832:	e7f4      	b.n	800681e <_scanf_float+0x186>
 8006834:	f1ba 0f00 	cmp.w	sl, #0
 8006838:	d10e      	bne.n	8006858 <_scanf_float+0x1c0>
 800683a:	f1b9 0f00 	cmp.w	r9, #0
 800683e:	d10e      	bne.n	800685e <_scanf_float+0x1c6>
 8006840:	6822      	ldr	r2, [r4, #0]
 8006842:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006846:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800684a:	d108      	bne.n	800685e <_scanf_float+0x1c6>
 800684c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006850:	6022      	str	r2, [r4, #0]
 8006852:	f04f 0a01 	mov.w	sl, #1
 8006856:	e7e3      	b.n	8006820 <_scanf_float+0x188>
 8006858:	f1ba 0f02 	cmp.w	sl, #2
 800685c:	d055      	beq.n	800690a <_scanf_float+0x272>
 800685e:	2d01      	cmp	r5, #1
 8006860:	d002      	beq.n	8006868 <_scanf_float+0x1d0>
 8006862:	2d04      	cmp	r5, #4
 8006864:	f47f af48 	bne.w	80066f8 <_scanf_float+0x60>
 8006868:	3501      	adds	r5, #1
 800686a:	b2ed      	uxtb	r5, r5
 800686c:	e7d8      	b.n	8006820 <_scanf_float+0x188>
 800686e:	f1ba 0f01 	cmp.w	sl, #1
 8006872:	f47f af41 	bne.w	80066f8 <_scanf_float+0x60>
 8006876:	f04f 0a02 	mov.w	sl, #2
 800687a:	e7d1      	b.n	8006820 <_scanf_float+0x188>
 800687c:	b97d      	cbnz	r5, 800689e <_scanf_float+0x206>
 800687e:	f1b9 0f00 	cmp.w	r9, #0
 8006882:	f47f af3c 	bne.w	80066fe <_scanf_float+0x66>
 8006886:	6822      	ldr	r2, [r4, #0]
 8006888:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800688c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006890:	f47f af39 	bne.w	8006706 <_scanf_float+0x6e>
 8006894:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006898:	6022      	str	r2, [r4, #0]
 800689a:	2501      	movs	r5, #1
 800689c:	e7c0      	b.n	8006820 <_scanf_float+0x188>
 800689e:	2d03      	cmp	r5, #3
 80068a0:	d0e2      	beq.n	8006868 <_scanf_float+0x1d0>
 80068a2:	2d05      	cmp	r5, #5
 80068a4:	e7de      	b.n	8006864 <_scanf_float+0x1cc>
 80068a6:	2d02      	cmp	r5, #2
 80068a8:	f47f af26 	bne.w	80066f8 <_scanf_float+0x60>
 80068ac:	2503      	movs	r5, #3
 80068ae:	e7b7      	b.n	8006820 <_scanf_float+0x188>
 80068b0:	2d06      	cmp	r5, #6
 80068b2:	f47f af21 	bne.w	80066f8 <_scanf_float+0x60>
 80068b6:	2507      	movs	r5, #7
 80068b8:	e7b2      	b.n	8006820 <_scanf_float+0x188>
 80068ba:	6822      	ldr	r2, [r4, #0]
 80068bc:	0591      	lsls	r1, r2, #22
 80068be:	f57f af1b 	bpl.w	80066f8 <_scanf_float+0x60>
 80068c2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80068c6:	6022      	str	r2, [r4, #0]
 80068c8:	f8cd 9004 	str.w	r9, [sp, #4]
 80068cc:	e7a8      	b.n	8006820 <_scanf_float+0x188>
 80068ce:	6822      	ldr	r2, [r4, #0]
 80068d0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80068d4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80068d8:	d006      	beq.n	80068e8 <_scanf_float+0x250>
 80068da:	0550      	lsls	r0, r2, #21
 80068dc:	f57f af0c 	bpl.w	80066f8 <_scanf_float+0x60>
 80068e0:	f1b9 0f00 	cmp.w	r9, #0
 80068e4:	f43f af0f 	beq.w	8006706 <_scanf_float+0x6e>
 80068e8:	0591      	lsls	r1, r2, #22
 80068ea:	bf58      	it	pl
 80068ec:	9901      	ldrpl	r1, [sp, #4]
 80068ee:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80068f2:	bf58      	it	pl
 80068f4:	eba9 0101 	subpl.w	r1, r9, r1
 80068f8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80068fc:	bf58      	it	pl
 80068fe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006902:	6022      	str	r2, [r4, #0]
 8006904:	f04f 0900 	mov.w	r9, #0
 8006908:	e78a      	b.n	8006820 <_scanf_float+0x188>
 800690a:	f04f 0a03 	mov.w	sl, #3
 800690e:	e787      	b.n	8006820 <_scanf_float+0x188>
 8006910:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006914:	4639      	mov	r1, r7
 8006916:	4640      	mov	r0, r8
 8006918:	4798      	blx	r3
 800691a:	2800      	cmp	r0, #0
 800691c:	f43f aedf 	beq.w	80066de <_scanf_float+0x46>
 8006920:	e6ea      	b.n	80066f8 <_scanf_float+0x60>
 8006922:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006926:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800692a:	463a      	mov	r2, r7
 800692c:	4640      	mov	r0, r8
 800692e:	4798      	blx	r3
 8006930:	6923      	ldr	r3, [r4, #16]
 8006932:	3b01      	subs	r3, #1
 8006934:	6123      	str	r3, [r4, #16]
 8006936:	e6ec      	b.n	8006712 <_scanf_float+0x7a>
 8006938:	1e6b      	subs	r3, r5, #1
 800693a:	2b06      	cmp	r3, #6
 800693c:	d825      	bhi.n	800698a <_scanf_float+0x2f2>
 800693e:	2d02      	cmp	r5, #2
 8006940:	d836      	bhi.n	80069b0 <_scanf_float+0x318>
 8006942:	455e      	cmp	r6, fp
 8006944:	f67f aee8 	bls.w	8006718 <_scanf_float+0x80>
 8006948:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800694c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006950:	463a      	mov	r2, r7
 8006952:	4640      	mov	r0, r8
 8006954:	4798      	blx	r3
 8006956:	6923      	ldr	r3, [r4, #16]
 8006958:	3b01      	subs	r3, #1
 800695a:	6123      	str	r3, [r4, #16]
 800695c:	e7f1      	b.n	8006942 <_scanf_float+0x2aa>
 800695e:	9802      	ldr	r0, [sp, #8]
 8006960:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006964:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006968:	9002      	str	r0, [sp, #8]
 800696a:	463a      	mov	r2, r7
 800696c:	4640      	mov	r0, r8
 800696e:	4798      	blx	r3
 8006970:	6923      	ldr	r3, [r4, #16]
 8006972:	3b01      	subs	r3, #1
 8006974:	6123      	str	r3, [r4, #16]
 8006976:	f10a 3aff 	add.w	sl, sl, #4294967295
 800697a:	fa5f fa8a 	uxtb.w	sl, sl
 800697e:	f1ba 0f02 	cmp.w	sl, #2
 8006982:	d1ec      	bne.n	800695e <_scanf_float+0x2c6>
 8006984:	3d03      	subs	r5, #3
 8006986:	b2ed      	uxtb	r5, r5
 8006988:	1b76      	subs	r6, r6, r5
 800698a:	6823      	ldr	r3, [r4, #0]
 800698c:	05da      	lsls	r2, r3, #23
 800698e:	d52f      	bpl.n	80069f0 <_scanf_float+0x358>
 8006990:	055b      	lsls	r3, r3, #21
 8006992:	d510      	bpl.n	80069b6 <_scanf_float+0x31e>
 8006994:	455e      	cmp	r6, fp
 8006996:	f67f aebf 	bls.w	8006718 <_scanf_float+0x80>
 800699a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800699e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80069a2:	463a      	mov	r2, r7
 80069a4:	4640      	mov	r0, r8
 80069a6:	4798      	blx	r3
 80069a8:	6923      	ldr	r3, [r4, #16]
 80069aa:	3b01      	subs	r3, #1
 80069ac:	6123      	str	r3, [r4, #16]
 80069ae:	e7f1      	b.n	8006994 <_scanf_float+0x2fc>
 80069b0:	46aa      	mov	sl, r5
 80069b2:	9602      	str	r6, [sp, #8]
 80069b4:	e7df      	b.n	8006976 <_scanf_float+0x2de>
 80069b6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80069ba:	6923      	ldr	r3, [r4, #16]
 80069bc:	2965      	cmp	r1, #101	; 0x65
 80069be:	f103 33ff 	add.w	r3, r3, #4294967295
 80069c2:	f106 35ff 	add.w	r5, r6, #4294967295
 80069c6:	6123      	str	r3, [r4, #16]
 80069c8:	d00c      	beq.n	80069e4 <_scanf_float+0x34c>
 80069ca:	2945      	cmp	r1, #69	; 0x45
 80069cc:	d00a      	beq.n	80069e4 <_scanf_float+0x34c>
 80069ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80069d2:	463a      	mov	r2, r7
 80069d4:	4640      	mov	r0, r8
 80069d6:	4798      	blx	r3
 80069d8:	6923      	ldr	r3, [r4, #16]
 80069da:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80069de:	3b01      	subs	r3, #1
 80069e0:	1eb5      	subs	r5, r6, #2
 80069e2:	6123      	str	r3, [r4, #16]
 80069e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80069e8:	463a      	mov	r2, r7
 80069ea:	4640      	mov	r0, r8
 80069ec:	4798      	blx	r3
 80069ee:	462e      	mov	r6, r5
 80069f0:	6825      	ldr	r5, [r4, #0]
 80069f2:	f015 0510 	ands.w	r5, r5, #16
 80069f6:	d158      	bne.n	8006aaa <_scanf_float+0x412>
 80069f8:	7035      	strb	r5, [r6, #0]
 80069fa:	6823      	ldr	r3, [r4, #0]
 80069fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006a00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a04:	d11c      	bne.n	8006a40 <_scanf_float+0x3a8>
 8006a06:	9b01      	ldr	r3, [sp, #4]
 8006a08:	454b      	cmp	r3, r9
 8006a0a:	eba3 0209 	sub.w	r2, r3, r9
 8006a0e:	d124      	bne.n	8006a5a <_scanf_float+0x3c2>
 8006a10:	2200      	movs	r2, #0
 8006a12:	4659      	mov	r1, fp
 8006a14:	4640      	mov	r0, r8
 8006a16:	f000 fe9d 	bl	8007754 <_strtod_r>
 8006a1a:	9b03      	ldr	r3, [sp, #12]
 8006a1c:	6821      	ldr	r1, [r4, #0]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f011 0f02 	tst.w	r1, #2
 8006a24:	ec57 6b10 	vmov	r6, r7, d0
 8006a28:	f103 0204 	add.w	r2, r3, #4
 8006a2c:	d020      	beq.n	8006a70 <_scanf_float+0x3d8>
 8006a2e:	9903      	ldr	r1, [sp, #12]
 8006a30:	600a      	str	r2, [r1, #0]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	e9c3 6700 	strd	r6, r7, [r3]
 8006a38:	68e3      	ldr	r3, [r4, #12]
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	60e3      	str	r3, [r4, #12]
 8006a3e:	e66c      	b.n	800671a <_scanf_float+0x82>
 8006a40:	9b04      	ldr	r3, [sp, #16]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d0e4      	beq.n	8006a10 <_scanf_float+0x378>
 8006a46:	9905      	ldr	r1, [sp, #20]
 8006a48:	230a      	movs	r3, #10
 8006a4a:	462a      	mov	r2, r5
 8006a4c:	3101      	adds	r1, #1
 8006a4e:	4640      	mov	r0, r8
 8006a50:	f000 ff0a 	bl	8007868 <_strtol_r>
 8006a54:	9b04      	ldr	r3, [sp, #16]
 8006a56:	9e05      	ldr	r6, [sp, #20]
 8006a58:	1ac2      	subs	r2, r0, r3
 8006a5a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006a5e:	429e      	cmp	r6, r3
 8006a60:	bf28      	it	cs
 8006a62:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006a66:	4912      	ldr	r1, [pc, #72]	; (8006ab0 <_scanf_float+0x418>)
 8006a68:	4630      	mov	r0, r6
 8006a6a:	f000 f82b 	bl	8006ac4 <siprintf>
 8006a6e:	e7cf      	b.n	8006a10 <_scanf_float+0x378>
 8006a70:	f011 0f04 	tst.w	r1, #4
 8006a74:	9903      	ldr	r1, [sp, #12]
 8006a76:	600a      	str	r2, [r1, #0]
 8006a78:	d1db      	bne.n	8006a32 <_scanf_float+0x39a>
 8006a7a:	f8d3 8000 	ldr.w	r8, [r3]
 8006a7e:	ee10 2a10 	vmov	r2, s0
 8006a82:	ee10 0a10 	vmov	r0, s0
 8006a86:	463b      	mov	r3, r7
 8006a88:	4639      	mov	r1, r7
 8006a8a:	f7fa f857 	bl	8000b3c <__aeabi_dcmpun>
 8006a8e:	b128      	cbz	r0, 8006a9c <_scanf_float+0x404>
 8006a90:	4808      	ldr	r0, [pc, #32]	; (8006ab4 <_scanf_float+0x41c>)
 8006a92:	f000 f811 	bl	8006ab8 <nanf>
 8006a96:	ed88 0a00 	vstr	s0, [r8]
 8006a9a:	e7cd      	b.n	8006a38 <_scanf_float+0x3a0>
 8006a9c:	4630      	mov	r0, r6
 8006a9e:	4639      	mov	r1, r7
 8006aa0:	f7fa f8aa 	bl	8000bf8 <__aeabi_d2f>
 8006aa4:	f8c8 0000 	str.w	r0, [r8]
 8006aa8:	e7c6      	b.n	8006a38 <_scanf_float+0x3a0>
 8006aaa:	2500      	movs	r5, #0
 8006aac:	e635      	b.n	800671a <_scanf_float+0x82>
 8006aae:	bf00      	nop
 8006ab0:	0800bc40 	.word	0x0800bc40
 8006ab4:	0800c058 	.word	0x0800c058

08006ab8 <nanf>:
 8006ab8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006ac0 <nanf+0x8>
 8006abc:	4770      	bx	lr
 8006abe:	bf00      	nop
 8006ac0:	7fc00000 	.word	0x7fc00000

08006ac4 <siprintf>:
 8006ac4:	b40e      	push	{r1, r2, r3}
 8006ac6:	b500      	push	{lr}
 8006ac8:	b09c      	sub	sp, #112	; 0x70
 8006aca:	ab1d      	add	r3, sp, #116	; 0x74
 8006acc:	9002      	str	r0, [sp, #8]
 8006ace:	9006      	str	r0, [sp, #24]
 8006ad0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006ad4:	4809      	ldr	r0, [pc, #36]	; (8006afc <siprintf+0x38>)
 8006ad6:	9107      	str	r1, [sp, #28]
 8006ad8:	9104      	str	r1, [sp, #16]
 8006ada:	4909      	ldr	r1, [pc, #36]	; (8006b00 <siprintf+0x3c>)
 8006adc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ae0:	9105      	str	r1, [sp, #20]
 8006ae2:	6800      	ldr	r0, [r0, #0]
 8006ae4:	9301      	str	r3, [sp, #4]
 8006ae6:	a902      	add	r1, sp, #8
 8006ae8:	f002 fea6 	bl	8009838 <_svfiprintf_r>
 8006aec:	9b02      	ldr	r3, [sp, #8]
 8006aee:	2200      	movs	r2, #0
 8006af0:	701a      	strb	r2, [r3, #0]
 8006af2:	b01c      	add	sp, #112	; 0x70
 8006af4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006af8:	b003      	add	sp, #12
 8006afa:	4770      	bx	lr
 8006afc:	20000074 	.word	0x20000074
 8006b00:	ffff0208 	.word	0xffff0208

08006b04 <sulp>:
 8006b04:	b570      	push	{r4, r5, r6, lr}
 8006b06:	4604      	mov	r4, r0
 8006b08:	460d      	mov	r5, r1
 8006b0a:	ec45 4b10 	vmov	d0, r4, r5
 8006b0e:	4616      	mov	r6, r2
 8006b10:	f002 fc2e 	bl	8009370 <__ulp>
 8006b14:	ec51 0b10 	vmov	r0, r1, d0
 8006b18:	b17e      	cbz	r6, 8006b3a <sulp+0x36>
 8006b1a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006b1e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	dd09      	ble.n	8006b3a <sulp+0x36>
 8006b26:	051b      	lsls	r3, r3, #20
 8006b28:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006b2c:	2400      	movs	r4, #0
 8006b2e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006b32:	4622      	mov	r2, r4
 8006b34:	462b      	mov	r3, r5
 8006b36:	f7f9 fd67 	bl	8000608 <__aeabi_dmul>
 8006b3a:	bd70      	pop	{r4, r5, r6, pc}
 8006b3c:	0000      	movs	r0, r0
	...

08006b40 <_strtod_l>:
 8006b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b44:	b0a3      	sub	sp, #140	; 0x8c
 8006b46:	461f      	mov	r7, r3
 8006b48:	2300      	movs	r3, #0
 8006b4a:	931e      	str	r3, [sp, #120]	; 0x78
 8006b4c:	4ba4      	ldr	r3, [pc, #656]	; (8006de0 <_strtod_l+0x2a0>)
 8006b4e:	9219      	str	r2, [sp, #100]	; 0x64
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	9307      	str	r3, [sp, #28]
 8006b54:	4604      	mov	r4, r0
 8006b56:	4618      	mov	r0, r3
 8006b58:	4688      	mov	r8, r1
 8006b5a:	f7f9 fb41 	bl	80001e0 <strlen>
 8006b5e:	f04f 0a00 	mov.w	sl, #0
 8006b62:	4605      	mov	r5, r0
 8006b64:	f04f 0b00 	mov.w	fp, #0
 8006b68:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006b6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006b6e:	781a      	ldrb	r2, [r3, #0]
 8006b70:	2a2b      	cmp	r2, #43	; 0x2b
 8006b72:	d04c      	beq.n	8006c0e <_strtod_l+0xce>
 8006b74:	d839      	bhi.n	8006bea <_strtod_l+0xaa>
 8006b76:	2a0d      	cmp	r2, #13
 8006b78:	d832      	bhi.n	8006be0 <_strtod_l+0xa0>
 8006b7a:	2a08      	cmp	r2, #8
 8006b7c:	d832      	bhi.n	8006be4 <_strtod_l+0xa4>
 8006b7e:	2a00      	cmp	r2, #0
 8006b80:	d03c      	beq.n	8006bfc <_strtod_l+0xbc>
 8006b82:	2300      	movs	r3, #0
 8006b84:	930e      	str	r3, [sp, #56]	; 0x38
 8006b86:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8006b88:	7833      	ldrb	r3, [r6, #0]
 8006b8a:	2b30      	cmp	r3, #48	; 0x30
 8006b8c:	f040 80b4 	bne.w	8006cf8 <_strtod_l+0x1b8>
 8006b90:	7873      	ldrb	r3, [r6, #1]
 8006b92:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006b96:	2b58      	cmp	r3, #88	; 0x58
 8006b98:	d16c      	bne.n	8006c74 <_strtod_l+0x134>
 8006b9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b9c:	9301      	str	r3, [sp, #4]
 8006b9e:	ab1e      	add	r3, sp, #120	; 0x78
 8006ba0:	9702      	str	r7, [sp, #8]
 8006ba2:	9300      	str	r3, [sp, #0]
 8006ba4:	4a8f      	ldr	r2, [pc, #572]	; (8006de4 <_strtod_l+0x2a4>)
 8006ba6:	ab1f      	add	r3, sp, #124	; 0x7c
 8006ba8:	a91d      	add	r1, sp, #116	; 0x74
 8006baa:	4620      	mov	r0, r4
 8006bac:	f001 fd40 	bl	8008630 <__gethex>
 8006bb0:	f010 0707 	ands.w	r7, r0, #7
 8006bb4:	4605      	mov	r5, r0
 8006bb6:	d005      	beq.n	8006bc4 <_strtod_l+0x84>
 8006bb8:	2f06      	cmp	r7, #6
 8006bba:	d12a      	bne.n	8006c12 <_strtod_l+0xd2>
 8006bbc:	3601      	adds	r6, #1
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	961d      	str	r6, [sp, #116]	; 0x74
 8006bc2:	930e      	str	r3, [sp, #56]	; 0x38
 8006bc4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	f040 8596 	bne.w	80076f8 <_strtod_l+0xbb8>
 8006bcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006bce:	b1db      	cbz	r3, 8006c08 <_strtod_l+0xc8>
 8006bd0:	4652      	mov	r2, sl
 8006bd2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006bd6:	ec43 2b10 	vmov	d0, r2, r3
 8006bda:	b023      	add	sp, #140	; 0x8c
 8006bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006be0:	2a20      	cmp	r2, #32
 8006be2:	d1ce      	bne.n	8006b82 <_strtod_l+0x42>
 8006be4:	3301      	adds	r3, #1
 8006be6:	931d      	str	r3, [sp, #116]	; 0x74
 8006be8:	e7c0      	b.n	8006b6c <_strtod_l+0x2c>
 8006bea:	2a2d      	cmp	r2, #45	; 0x2d
 8006bec:	d1c9      	bne.n	8006b82 <_strtod_l+0x42>
 8006bee:	2201      	movs	r2, #1
 8006bf0:	920e      	str	r2, [sp, #56]	; 0x38
 8006bf2:	1c5a      	adds	r2, r3, #1
 8006bf4:	921d      	str	r2, [sp, #116]	; 0x74
 8006bf6:	785b      	ldrb	r3, [r3, #1]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d1c4      	bne.n	8006b86 <_strtod_l+0x46>
 8006bfc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006bfe:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	f040 8576 	bne.w	80076f4 <_strtod_l+0xbb4>
 8006c08:	4652      	mov	r2, sl
 8006c0a:	465b      	mov	r3, fp
 8006c0c:	e7e3      	b.n	8006bd6 <_strtod_l+0x96>
 8006c0e:	2200      	movs	r2, #0
 8006c10:	e7ee      	b.n	8006bf0 <_strtod_l+0xb0>
 8006c12:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006c14:	b13a      	cbz	r2, 8006c26 <_strtod_l+0xe6>
 8006c16:	2135      	movs	r1, #53	; 0x35
 8006c18:	a820      	add	r0, sp, #128	; 0x80
 8006c1a:	f002 fcb4 	bl	8009586 <__copybits>
 8006c1e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006c20:	4620      	mov	r0, r4
 8006c22:	f002 f879 	bl	8008d18 <_Bfree>
 8006c26:	3f01      	subs	r7, #1
 8006c28:	2f05      	cmp	r7, #5
 8006c2a:	d807      	bhi.n	8006c3c <_strtod_l+0xfc>
 8006c2c:	e8df f007 	tbb	[pc, r7]
 8006c30:	1d180b0e 	.word	0x1d180b0e
 8006c34:	030e      	.short	0x030e
 8006c36:	f04f 0b00 	mov.w	fp, #0
 8006c3a:	46da      	mov	sl, fp
 8006c3c:	0728      	lsls	r0, r5, #28
 8006c3e:	d5c1      	bpl.n	8006bc4 <_strtod_l+0x84>
 8006c40:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006c44:	e7be      	b.n	8006bc4 <_strtod_l+0x84>
 8006c46:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8006c4a:	e7f7      	b.n	8006c3c <_strtod_l+0xfc>
 8006c4c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8006c50:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006c52:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006c56:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006c5a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006c5e:	e7ed      	b.n	8006c3c <_strtod_l+0xfc>
 8006c60:	f8df b184 	ldr.w	fp, [pc, #388]	; 8006de8 <_strtod_l+0x2a8>
 8006c64:	f04f 0a00 	mov.w	sl, #0
 8006c68:	e7e8      	b.n	8006c3c <_strtod_l+0xfc>
 8006c6a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006c6e:	f04f 3aff 	mov.w	sl, #4294967295
 8006c72:	e7e3      	b.n	8006c3c <_strtod_l+0xfc>
 8006c74:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006c76:	1c5a      	adds	r2, r3, #1
 8006c78:	921d      	str	r2, [sp, #116]	; 0x74
 8006c7a:	785b      	ldrb	r3, [r3, #1]
 8006c7c:	2b30      	cmp	r3, #48	; 0x30
 8006c7e:	d0f9      	beq.n	8006c74 <_strtod_l+0x134>
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d09f      	beq.n	8006bc4 <_strtod_l+0x84>
 8006c84:	2301      	movs	r3, #1
 8006c86:	f04f 0900 	mov.w	r9, #0
 8006c8a:	9304      	str	r3, [sp, #16]
 8006c8c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006c8e:	930a      	str	r3, [sp, #40]	; 0x28
 8006c90:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006c94:	464f      	mov	r7, r9
 8006c96:	220a      	movs	r2, #10
 8006c98:	981d      	ldr	r0, [sp, #116]	; 0x74
 8006c9a:	7806      	ldrb	r6, [r0, #0]
 8006c9c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006ca0:	b2d9      	uxtb	r1, r3
 8006ca2:	2909      	cmp	r1, #9
 8006ca4:	d92a      	bls.n	8006cfc <_strtod_l+0x1bc>
 8006ca6:	9907      	ldr	r1, [sp, #28]
 8006ca8:	462a      	mov	r2, r5
 8006caa:	f002 fedd 	bl	8009a68 <strncmp>
 8006cae:	b398      	cbz	r0, 8006d18 <_strtod_l+0x1d8>
 8006cb0:	2000      	movs	r0, #0
 8006cb2:	4633      	mov	r3, r6
 8006cb4:	463d      	mov	r5, r7
 8006cb6:	9007      	str	r0, [sp, #28]
 8006cb8:	4602      	mov	r2, r0
 8006cba:	2b65      	cmp	r3, #101	; 0x65
 8006cbc:	d001      	beq.n	8006cc2 <_strtod_l+0x182>
 8006cbe:	2b45      	cmp	r3, #69	; 0x45
 8006cc0:	d118      	bne.n	8006cf4 <_strtod_l+0x1b4>
 8006cc2:	b91d      	cbnz	r5, 8006ccc <_strtod_l+0x18c>
 8006cc4:	9b04      	ldr	r3, [sp, #16]
 8006cc6:	4303      	orrs	r3, r0
 8006cc8:	d098      	beq.n	8006bfc <_strtod_l+0xbc>
 8006cca:	2500      	movs	r5, #0
 8006ccc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8006cd0:	f108 0301 	add.w	r3, r8, #1
 8006cd4:	931d      	str	r3, [sp, #116]	; 0x74
 8006cd6:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006cda:	2b2b      	cmp	r3, #43	; 0x2b
 8006cdc:	d075      	beq.n	8006dca <_strtod_l+0x28a>
 8006cde:	2b2d      	cmp	r3, #45	; 0x2d
 8006ce0:	d07b      	beq.n	8006dda <_strtod_l+0x29a>
 8006ce2:	f04f 0c00 	mov.w	ip, #0
 8006ce6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006cea:	2909      	cmp	r1, #9
 8006cec:	f240 8082 	bls.w	8006df4 <_strtod_l+0x2b4>
 8006cf0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006cf4:	2600      	movs	r6, #0
 8006cf6:	e09d      	b.n	8006e34 <_strtod_l+0x2f4>
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	e7c4      	b.n	8006c86 <_strtod_l+0x146>
 8006cfc:	2f08      	cmp	r7, #8
 8006cfe:	bfd8      	it	le
 8006d00:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8006d02:	f100 0001 	add.w	r0, r0, #1
 8006d06:	bfda      	itte	le
 8006d08:	fb02 3301 	mlale	r3, r2, r1, r3
 8006d0c:	9309      	strle	r3, [sp, #36]	; 0x24
 8006d0e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006d12:	3701      	adds	r7, #1
 8006d14:	901d      	str	r0, [sp, #116]	; 0x74
 8006d16:	e7bf      	b.n	8006c98 <_strtod_l+0x158>
 8006d18:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006d1a:	195a      	adds	r2, r3, r5
 8006d1c:	921d      	str	r2, [sp, #116]	; 0x74
 8006d1e:	5d5b      	ldrb	r3, [r3, r5]
 8006d20:	2f00      	cmp	r7, #0
 8006d22:	d037      	beq.n	8006d94 <_strtod_l+0x254>
 8006d24:	9007      	str	r0, [sp, #28]
 8006d26:	463d      	mov	r5, r7
 8006d28:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006d2c:	2a09      	cmp	r2, #9
 8006d2e:	d912      	bls.n	8006d56 <_strtod_l+0x216>
 8006d30:	2201      	movs	r2, #1
 8006d32:	e7c2      	b.n	8006cba <_strtod_l+0x17a>
 8006d34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006d36:	1c5a      	adds	r2, r3, #1
 8006d38:	921d      	str	r2, [sp, #116]	; 0x74
 8006d3a:	785b      	ldrb	r3, [r3, #1]
 8006d3c:	3001      	adds	r0, #1
 8006d3e:	2b30      	cmp	r3, #48	; 0x30
 8006d40:	d0f8      	beq.n	8006d34 <_strtod_l+0x1f4>
 8006d42:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8006d46:	2a08      	cmp	r2, #8
 8006d48:	f200 84db 	bhi.w	8007702 <_strtod_l+0xbc2>
 8006d4c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006d4e:	9007      	str	r0, [sp, #28]
 8006d50:	2000      	movs	r0, #0
 8006d52:	920a      	str	r2, [sp, #40]	; 0x28
 8006d54:	4605      	mov	r5, r0
 8006d56:	3b30      	subs	r3, #48	; 0x30
 8006d58:	f100 0201 	add.w	r2, r0, #1
 8006d5c:	d014      	beq.n	8006d88 <_strtod_l+0x248>
 8006d5e:	9907      	ldr	r1, [sp, #28]
 8006d60:	4411      	add	r1, r2
 8006d62:	9107      	str	r1, [sp, #28]
 8006d64:	462a      	mov	r2, r5
 8006d66:	eb00 0e05 	add.w	lr, r0, r5
 8006d6a:	210a      	movs	r1, #10
 8006d6c:	4572      	cmp	r2, lr
 8006d6e:	d113      	bne.n	8006d98 <_strtod_l+0x258>
 8006d70:	182a      	adds	r2, r5, r0
 8006d72:	2a08      	cmp	r2, #8
 8006d74:	f105 0501 	add.w	r5, r5, #1
 8006d78:	4405      	add	r5, r0
 8006d7a:	dc1c      	bgt.n	8006db6 <_strtod_l+0x276>
 8006d7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d7e:	220a      	movs	r2, #10
 8006d80:	fb02 3301 	mla	r3, r2, r1, r3
 8006d84:	9309      	str	r3, [sp, #36]	; 0x24
 8006d86:	2200      	movs	r2, #0
 8006d88:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006d8a:	1c59      	adds	r1, r3, #1
 8006d8c:	911d      	str	r1, [sp, #116]	; 0x74
 8006d8e:	785b      	ldrb	r3, [r3, #1]
 8006d90:	4610      	mov	r0, r2
 8006d92:	e7c9      	b.n	8006d28 <_strtod_l+0x1e8>
 8006d94:	4638      	mov	r0, r7
 8006d96:	e7d2      	b.n	8006d3e <_strtod_l+0x1fe>
 8006d98:	2a08      	cmp	r2, #8
 8006d9a:	dc04      	bgt.n	8006da6 <_strtod_l+0x266>
 8006d9c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006d9e:	434e      	muls	r6, r1
 8006da0:	9609      	str	r6, [sp, #36]	; 0x24
 8006da2:	3201      	adds	r2, #1
 8006da4:	e7e2      	b.n	8006d6c <_strtod_l+0x22c>
 8006da6:	f102 0c01 	add.w	ip, r2, #1
 8006daa:	f1bc 0f10 	cmp.w	ip, #16
 8006dae:	bfd8      	it	le
 8006db0:	fb01 f909 	mulle.w	r9, r1, r9
 8006db4:	e7f5      	b.n	8006da2 <_strtod_l+0x262>
 8006db6:	2d10      	cmp	r5, #16
 8006db8:	bfdc      	itt	le
 8006dba:	220a      	movle	r2, #10
 8006dbc:	fb02 3909 	mlale	r9, r2, r9, r3
 8006dc0:	e7e1      	b.n	8006d86 <_strtod_l+0x246>
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	9307      	str	r3, [sp, #28]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	e77c      	b.n	8006cc4 <_strtod_l+0x184>
 8006dca:	f04f 0c00 	mov.w	ip, #0
 8006dce:	f108 0302 	add.w	r3, r8, #2
 8006dd2:	931d      	str	r3, [sp, #116]	; 0x74
 8006dd4:	f898 3002 	ldrb.w	r3, [r8, #2]
 8006dd8:	e785      	b.n	8006ce6 <_strtod_l+0x1a6>
 8006dda:	f04f 0c01 	mov.w	ip, #1
 8006dde:	e7f6      	b.n	8006dce <_strtod_l+0x28e>
 8006de0:	0800be98 	.word	0x0800be98
 8006de4:	0800bc48 	.word	0x0800bc48
 8006de8:	7ff00000 	.word	0x7ff00000
 8006dec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006dee:	1c59      	adds	r1, r3, #1
 8006df0:	911d      	str	r1, [sp, #116]	; 0x74
 8006df2:	785b      	ldrb	r3, [r3, #1]
 8006df4:	2b30      	cmp	r3, #48	; 0x30
 8006df6:	d0f9      	beq.n	8006dec <_strtod_l+0x2ac>
 8006df8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8006dfc:	2908      	cmp	r1, #8
 8006dfe:	f63f af79 	bhi.w	8006cf4 <_strtod_l+0x1b4>
 8006e02:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8006e06:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006e08:	9308      	str	r3, [sp, #32]
 8006e0a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006e0c:	1c59      	adds	r1, r3, #1
 8006e0e:	911d      	str	r1, [sp, #116]	; 0x74
 8006e10:	785b      	ldrb	r3, [r3, #1]
 8006e12:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8006e16:	2e09      	cmp	r6, #9
 8006e18:	d937      	bls.n	8006e8a <_strtod_l+0x34a>
 8006e1a:	9e08      	ldr	r6, [sp, #32]
 8006e1c:	1b89      	subs	r1, r1, r6
 8006e1e:	2908      	cmp	r1, #8
 8006e20:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006e24:	dc02      	bgt.n	8006e2c <_strtod_l+0x2ec>
 8006e26:	4576      	cmp	r6, lr
 8006e28:	bfa8      	it	ge
 8006e2a:	4676      	movge	r6, lr
 8006e2c:	f1bc 0f00 	cmp.w	ip, #0
 8006e30:	d000      	beq.n	8006e34 <_strtod_l+0x2f4>
 8006e32:	4276      	negs	r6, r6
 8006e34:	2d00      	cmp	r5, #0
 8006e36:	d14f      	bne.n	8006ed8 <_strtod_l+0x398>
 8006e38:	9904      	ldr	r1, [sp, #16]
 8006e3a:	4301      	orrs	r1, r0
 8006e3c:	f47f aec2 	bne.w	8006bc4 <_strtod_l+0x84>
 8006e40:	2a00      	cmp	r2, #0
 8006e42:	f47f aedb 	bne.w	8006bfc <_strtod_l+0xbc>
 8006e46:	2b69      	cmp	r3, #105	; 0x69
 8006e48:	d027      	beq.n	8006e9a <_strtod_l+0x35a>
 8006e4a:	dc24      	bgt.n	8006e96 <_strtod_l+0x356>
 8006e4c:	2b49      	cmp	r3, #73	; 0x49
 8006e4e:	d024      	beq.n	8006e9a <_strtod_l+0x35a>
 8006e50:	2b4e      	cmp	r3, #78	; 0x4e
 8006e52:	f47f aed3 	bne.w	8006bfc <_strtod_l+0xbc>
 8006e56:	499e      	ldr	r1, [pc, #632]	; (80070d0 <_strtod_l+0x590>)
 8006e58:	a81d      	add	r0, sp, #116	; 0x74
 8006e5a:	f001 fe41 	bl	8008ae0 <__match>
 8006e5e:	2800      	cmp	r0, #0
 8006e60:	f43f aecc 	beq.w	8006bfc <_strtod_l+0xbc>
 8006e64:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	2b28      	cmp	r3, #40	; 0x28
 8006e6a:	d12d      	bne.n	8006ec8 <_strtod_l+0x388>
 8006e6c:	4999      	ldr	r1, [pc, #612]	; (80070d4 <_strtod_l+0x594>)
 8006e6e:	aa20      	add	r2, sp, #128	; 0x80
 8006e70:	a81d      	add	r0, sp, #116	; 0x74
 8006e72:	f001 fe49 	bl	8008b08 <__hexnan>
 8006e76:	2805      	cmp	r0, #5
 8006e78:	d126      	bne.n	8006ec8 <_strtod_l+0x388>
 8006e7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e7c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8006e80:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006e84:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006e88:	e69c      	b.n	8006bc4 <_strtod_l+0x84>
 8006e8a:	210a      	movs	r1, #10
 8006e8c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8006e90:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006e94:	e7b9      	b.n	8006e0a <_strtod_l+0x2ca>
 8006e96:	2b6e      	cmp	r3, #110	; 0x6e
 8006e98:	e7db      	b.n	8006e52 <_strtod_l+0x312>
 8006e9a:	498f      	ldr	r1, [pc, #572]	; (80070d8 <_strtod_l+0x598>)
 8006e9c:	a81d      	add	r0, sp, #116	; 0x74
 8006e9e:	f001 fe1f 	bl	8008ae0 <__match>
 8006ea2:	2800      	cmp	r0, #0
 8006ea4:	f43f aeaa 	beq.w	8006bfc <_strtod_l+0xbc>
 8006ea8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006eaa:	498c      	ldr	r1, [pc, #560]	; (80070dc <_strtod_l+0x59c>)
 8006eac:	3b01      	subs	r3, #1
 8006eae:	a81d      	add	r0, sp, #116	; 0x74
 8006eb0:	931d      	str	r3, [sp, #116]	; 0x74
 8006eb2:	f001 fe15 	bl	8008ae0 <__match>
 8006eb6:	b910      	cbnz	r0, 8006ebe <_strtod_l+0x37e>
 8006eb8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006eba:	3301      	adds	r3, #1
 8006ebc:	931d      	str	r3, [sp, #116]	; 0x74
 8006ebe:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80070ec <_strtod_l+0x5ac>
 8006ec2:	f04f 0a00 	mov.w	sl, #0
 8006ec6:	e67d      	b.n	8006bc4 <_strtod_l+0x84>
 8006ec8:	4885      	ldr	r0, [pc, #532]	; (80070e0 <_strtod_l+0x5a0>)
 8006eca:	f002 fdb5 	bl	8009a38 <nan>
 8006ece:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006ed2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8006ed6:	e675      	b.n	8006bc4 <_strtod_l+0x84>
 8006ed8:	9b07      	ldr	r3, [sp, #28]
 8006eda:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006edc:	1af3      	subs	r3, r6, r3
 8006ede:	2f00      	cmp	r7, #0
 8006ee0:	bf08      	it	eq
 8006ee2:	462f      	moveq	r7, r5
 8006ee4:	2d10      	cmp	r5, #16
 8006ee6:	9308      	str	r3, [sp, #32]
 8006ee8:	46a8      	mov	r8, r5
 8006eea:	bfa8      	it	ge
 8006eec:	f04f 0810 	movge.w	r8, #16
 8006ef0:	f7f9 fb10 	bl	8000514 <__aeabi_ui2d>
 8006ef4:	2d09      	cmp	r5, #9
 8006ef6:	4682      	mov	sl, r0
 8006ef8:	468b      	mov	fp, r1
 8006efa:	dd13      	ble.n	8006f24 <_strtod_l+0x3e4>
 8006efc:	4b79      	ldr	r3, [pc, #484]	; (80070e4 <_strtod_l+0x5a4>)
 8006efe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006f02:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006f06:	f7f9 fb7f 	bl	8000608 <__aeabi_dmul>
 8006f0a:	4682      	mov	sl, r0
 8006f0c:	4648      	mov	r0, r9
 8006f0e:	468b      	mov	fp, r1
 8006f10:	f7f9 fb00 	bl	8000514 <__aeabi_ui2d>
 8006f14:	4602      	mov	r2, r0
 8006f16:	460b      	mov	r3, r1
 8006f18:	4650      	mov	r0, sl
 8006f1a:	4659      	mov	r1, fp
 8006f1c:	f7f9 f9be 	bl	800029c <__adddf3>
 8006f20:	4682      	mov	sl, r0
 8006f22:	468b      	mov	fp, r1
 8006f24:	2d0f      	cmp	r5, #15
 8006f26:	dc38      	bgt.n	8006f9a <_strtod_l+0x45a>
 8006f28:	9b08      	ldr	r3, [sp, #32]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	f43f ae4a 	beq.w	8006bc4 <_strtod_l+0x84>
 8006f30:	dd24      	ble.n	8006f7c <_strtod_l+0x43c>
 8006f32:	2b16      	cmp	r3, #22
 8006f34:	dc0b      	bgt.n	8006f4e <_strtod_l+0x40e>
 8006f36:	4d6b      	ldr	r5, [pc, #428]	; (80070e4 <_strtod_l+0x5a4>)
 8006f38:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8006f3c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006f40:	4652      	mov	r2, sl
 8006f42:	465b      	mov	r3, fp
 8006f44:	f7f9 fb60 	bl	8000608 <__aeabi_dmul>
 8006f48:	4682      	mov	sl, r0
 8006f4a:	468b      	mov	fp, r1
 8006f4c:	e63a      	b.n	8006bc4 <_strtod_l+0x84>
 8006f4e:	9a08      	ldr	r2, [sp, #32]
 8006f50:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006f54:	4293      	cmp	r3, r2
 8006f56:	db20      	blt.n	8006f9a <_strtod_l+0x45a>
 8006f58:	4c62      	ldr	r4, [pc, #392]	; (80070e4 <_strtod_l+0x5a4>)
 8006f5a:	f1c5 050f 	rsb	r5, r5, #15
 8006f5e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006f62:	4652      	mov	r2, sl
 8006f64:	465b      	mov	r3, fp
 8006f66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f6a:	f7f9 fb4d 	bl	8000608 <__aeabi_dmul>
 8006f6e:	9b08      	ldr	r3, [sp, #32]
 8006f70:	1b5d      	subs	r5, r3, r5
 8006f72:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006f76:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006f7a:	e7e3      	b.n	8006f44 <_strtod_l+0x404>
 8006f7c:	9b08      	ldr	r3, [sp, #32]
 8006f7e:	3316      	adds	r3, #22
 8006f80:	db0b      	blt.n	8006f9a <_strtod_l+0x45a>
 8006f82:	9b07      	ldr	r3, [sp, #28]
 8006f84:	4a57      	ldr	r2, [pc, #348]	; (80070e4 <_strtod_l+0x5a4>)
 8006f86:	1b9e      	subs	r6, r3, r6
 8006f88:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8006f8c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006f90:	4650      	mov	r0, sl
 8006f92:	4659      	mov	r1, fp
 8006f94:	f7f9 fc62 	bl	800085c <__aeabi_ddiv>
 8006f98:	e7d6      	b.n	8006f48 <_strtod_l+0x408>
 8006f9a:	9b08      	ldr	r3, [sp, #32]
 8006f9c:	eba5 0808 	sub.w	r8, r5, r8
 8006fa0:	4498      	add	r8, r3
 8006fa2:	f1b8 0f00 	cmp.w	r8, #0
 8006fa6:	dd71      	ble.n	800708c <_strtod_l+0x54c>
 8006fa8:	f018 030f 	ands.w	r3, r8, #15
 8006fac:	d00a      	beq.n	8006fc4 <_strtod_l+0x484>
 8006fae:	494d      	ldr	r1, [pc, #308]	; (80070e4 <_strtod_l+0x5a4>)
 8006fb0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006fb4:	4652      	mov	r2, sl
 8006fb6:	465b      	mov	r3, fp
 8006fb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fbc:	f7f9 fb24 	bl	8000608 <__aeabi_dmul>
 8006fc0:	4682      	mov	sl, r0
 8006fc2:	468b      	mov	fp, r1
 8006fc4:	f038 080f 	bics.w	r8, r8, #15
 8006fc8:	d04d      	beq.n	8007066 <_strtod_l+0x526>
 8006fca:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006fce:	dd22      	ble.n	8007016 <_strtod_l+0x4d6>
 8006fd0:	2500      	movs	r5, #0
 8006fd2:	462e      	mov	r6, r5
 8006fd4:	9509      	str	r5, [sp, #36]	; 0x24
 8006fd6:	9507      	str	r5, [sp, #28]
 8006fd8:	2322      	movs	r3, #34	; 0x22
 8006fda:	f8df b110 	ldr.w	fp, [pc, #272]	; 80070ec <_strtod_l+0x5ac>
 8006fde:	6023      	str	r3, [r4, #0]
 8006fe0:	f04f 0a00 	mov.w	sl, #0
 8006fe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	f43f adec 	beq.w	8006bc4 <_strtod_l+0x84>
 8006fec:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006fee:	4620      	mov	r0, r4
 8006ff0:	f001 fe92 	bl	8008d18 <_Bfree>
 8006ff4:	9907      	ldr	r1, [sp, #28]
 8006ff6:	4620      	mov	r0, r4
 8006ff8:	f001 fe8e 	bl	8008d18 <_Bfree>
 8006ffc:	4631      	mov	r1, r6
 8006ffe:	4620      	mov	r0, r4
 8007000:	f001 fe8a 	bl	8008d18 <_Bfree>
 8007004:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007006:	4620      	mov	r0, r4
 8007008:	f001 fe86 	bl	8008d18 <_Bfree>
 800700c:	4629      	mov	r1, r5
 800700e:	4620      	mov	r0, r4
 8007010:	f001 fe82 	bl	8008d18 <_Bfree>
 8007014:	e5d6      	b.n	8006bc4 <_strtod_l+0x84>
 8007016:	2300      	movs	r3, #0
 8007018:	ea4f 1828 	mov.w	r8, r8, asr #4
 800701c:	4650      	mov	r0, sl
 800701e:	4659      	mov	r1, fp
 8007020:	4699      	mov	r9, r3
 8007022:	f1b8 0f01 	cmp.w	r8, #1
 8007026:	dc21      	bgt.n	800706c <_strtod_l+0x52c>
 8007028:	b10b      	cbz	r3, 800702e <_strtod_l+0x4ee>
 800702a:	4682      	mov	sl, r0
 800702c:	468b      	mov	fp, r1
 800702e:	4b2e      	ldr	r3, [pc, #184]	; (80070e8 <_strtod_l+0x5a8>)
 8007030:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007034:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007038:	4652      	mov	r2, sl
 800703a:	465b      	mov	r3, fp
 800703c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007040:	f7f9 fae2 	bl	8000608 <__aeabi_dmul>
 8007044:	4b29      	ldr	r3, [pc, #164]	; (80070ec <_strtod_l+0x5ac>)
 8007046:	460a      	mov	r2, r1
 8007048:	400b      	ands	r3, r1
 800704a:	4929      	ldr	r1, [pc, #164]	; (80070f0 <_strtod_l+0x5b0>)
 800704c:	428b      	cmp	r3, r1
 800704e:	4682      	mov	sl, r0
 8007050:	d8be      	bhi.n	8006fd0 <_strtod_l+0x490>
 8007052:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007056:	428b      	cmp	r3, r1
 8007058:	bf86      	itte	hi
 800705a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80070f4 <_strtod_l+0x5b4>
 800705e:	f04f 3aff 	movhi.w	sl, #4294967295
 8007062:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007066:	2300      	movs	r3, #0
 8007068:	9304      	str	r3, [sp, #16]
 800706a:	e081      	b.n	8007170 <_strtod_l+0x630>
 800706c:	f018 0f01 	tst.w	r8, #1
 8007070:	d007      	beq.n	8007082 <_strtod_l+0x542>
 8007072:	4b1d      	ldr	r3, [pc, #116]	; (80070e8 <_strtod_l+0x5a8>)
 8007074:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8007078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800707c:	f7f9 fac4 	bl	8000608 <__aeabi_dmul>
 8007080:	2301      	movs	r3, #1
 8007082:	f109 0901 	add.w	r9, r9, #1
 8007086:	ea4f 0868 	mov.w	r8, r8, asr #1
 800708a:	e7ca      	b.n	8007022 <_strtod_l+0x4e2>
 800708c:	d0eb      	beq.n	8007066 <_strtod_l+0x526>
 800708e:	f1c8 0800 	rsb	r8, r8, #0
 8007092:	f018 020f 	ands.w	r2, r8, #15
 8007096:	d00a      	beq.n	80070ae <_strtod_l+0x56e>
 8007098:	4b12      	ldr	r3, [pc, #72]	; (80070e4 <_strtod_l+0x5a4>)
 800709a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800709e:	4650      	mov	r0, sl
 80070a0:	4659      	mov	r1, fp
 80070a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a6:	f7f9 fbd9 	bl	800085c <__aeabi_ddiv>
 80070aa:	4682      	mov	sl, r0
 80070ac:	468b      	mov	fp, r1
 80070ae:	ea5f 1828 	movs.w	r8, r8, asr #4
 80070b2:	d0d8      	beq.n	8007066 <_strtod_l+0x526>
 80070b4:	f1b8 0f1f 	cmp.w	r8, #31
 80070b8:	dd1e      	ble.n	80070f8 <_strtod_l+0x5b8>
 80070ba:	2500      	movs	r5, #0
 80070bc:	462e      	mov	r6, r5
 80070be:	9509      	str	r5, [sp, #36]	; 0x24
 80070c0:	9507      	str	r5, [sp, #28]
 80070c2:	2322      	movs	r3, #34	; 0x22
 80070c4:	f04f 0a00 	mov.w	sl, #0
 80070c8:	f04f 0b00 	mov.w	fp, #0
 80070cc:	6023      	str	r3, [r4, #0]
 80070ce:	e789      	b.n	8006fe4 <_strtod_l+0x4a4>
 80070d0:	0800bc19 	.word	0x0800bc19
 80070d4:	0800bc5c 	.word	0x0800bc5c
 80070d8:	0800bc11 	.word	0x0800bc11
 80070dc:	0800bd9c 	.word	0x0800bd9c
 80070e0:	0800c058 	.word	0x0800c058
 80070e4:	0800bf38 	.word	0x0800bf38
 80070e8:	0800bf10 	.word	0x0800bf10
 80070ec:	7ff00000 	.word	0x7ff00000
 80070f0:	7ca00000 	.word	0x7ca00000
 80070f4:	7fefffff 	.word	0x7fefffff
 80070f8:	f018 0310 	ands.w	r3, r8, #16
 80070fc:	bf18      	it	ne
 80070fe:	236a      	movne	r3, #106	; 0x6a
 8007100:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80074b8 <_strtod_l+0x978>
 8007104:	9304      	str	r3, [sp, #16]
 8007106:	4650      	mov	r0, sl
 8007108:	4659      	mov	r1, fp
 800710a:	2300      	movs	r3, #0
 800710c:	f018 0f01 	tst.w	r8, #1
 8007110:	d004      	beq.n	800711c <_strtod_l+0x5dc>
 8007112:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007116:	f7f9 fa77 	bl	8000608 <__aeabi_dmul>
 800711a:	2301      	movs	r3, #1
 800711c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007120:	f109 0908 	add.w	r9, r9, #8
 8007124:	d1f2      	bne.n	800710c <_strtod_l+0x5cc>
 8007126:	b10b      	cbz	r3, 800712c <_strtod_l+0x5ec>
 8007128:	4682      	mov	sl, r0
 800712a:	468b      	mov	fp, r1
 800712c:	9b04      	ldr	r3, [sp, #16]
 800712e:	b1bb      	cbz	r3, 8007160 <_strtod_l+0x620>
 8007130:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8007134:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007138:	2b00      	cmp	r3, #0
 800713a:	4659      	mov	r1, fp
 800713c:	dd10      	ble.n	8007160 <_strtod_l+0x620>
 800713e:	2b1f      	cmp	r3, #31
 8007140:	f340 8128 	ble.w	8007394 <_strtod_l+0x854>
 8007144:	2b34      	cmp	r3, #52	; 0x34
 8007146:	bfde      	ittt	le
 8007148:	3b20      	suble	r3, #32
 800714a:	f04f 32ff 	movle.w	r2, #4294967295
 800714e:	fa02 f303 	lslle.w	r3, r2, r3
 8007152:	f04f 0a00 	mov.w	sl, #0
 8007156:	bfcc      	ite	gt
 8007158:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800715c:	ea03 0b01 	andle.w	fp, r3, r1
 8007160:	2200      	movs	r2, #0
 8007162:	2300      	movs	r3, #0
 8007164:	4650      	mov	r0, sl
 8007166:	4659      	mov	r1, fp
 8007168:	f7f9 fcb6 	bl	8000ad8 <__aeabi_dcmpeq>
 800716c:	2800      	cmp	r0, #0
 800716e:	d1a4      	bne.n	80070ba <_strtod_l+0x57a>
 8007170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007172:	9300      	str	r3, [sp, #0]
 8007174:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007176:	462b      	mov	r3, r5
 8007178:	463a      	mov	r2, r7
 800717a:	4620      	mov	r0, r4
 800717c:	f001 fe38 	bl	8008df0 <__s2b>
 8007180:	9009      	str	r0, [sp, #36]	; 0x24
 8007182:	2800      	cmp	r0, #0
 8007184:	f43f af24 	beq.w	8006fd0 <_strtod_l+0x490>
 8007188:	9b07      	ldr	r3, [sp, #28]
 800718a:	1b9e      	subs	r6, r3, r6
 800718c:	9b08      	ldr	r3, [sp, #32]
 800718e:	2b00      	cmp	r3, #0
 8007190:	bfb4      	ite	lt
 8007192:	4633      	movlt	r3, r6
 8007194:	2300      	movge	r3, #0
 8007196:	9310      	str	r3, [sp, #64]	; 0x40
 8007198:	9b08      	ldr	r3, [sp, #32]
 800719a:	2500      	movs	r5, #0
 800719c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80071a0:	9318      	str	r3, [sp, #96]	; 0x60
 80071a2:	462e      	mov	r6, r5
 80071a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071a6:	4620      	mov	r0, r4
 80071a8:	6859      	ldr	r1, [r3, #4]
 80071aa:	f001 fd75 	bl	8008c98 <_Balloc>
 80071ae:	9007      	str	r0, [sp, #28]
 80071b0:	2800      	cmp	r0, #0
 80071b2:	f43f af11 	beq.w	8006fd8 <_strtod_l+0x498>
 80071b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071b8:	691a      	ldr	r2, [r3, #16]
 80071ba:	3202      	adds	r2, #2
 80071bc:	f103 010c 	add.w	r1, r3, #12
 80071c0:	0092      	lsls	r2, r2, #2
 80071c2:	300c      	adds	r0, #12
 80071c4:	f001 fd5a 	bl	8008c7c <memcpy>
 80071c8:	ec4b ab10 	vmov	d0, sl, fp
 80071cc:	aa20      	add	r2, sp, #128	; 0x80
 80071ce:	a91f      	add	r1, sp, #124	; 0x7c
 80071d0:	4620      	mov	r0, r4
 80071d2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80071d6:	f002 f947 	bl	8009468 <__d2b>
 80071da:	901e      	str	r0, [sp, #120]	; 0x78
 80071dc:	2800      	cmp	r0, #0
 80071de:	f43f aefb 	beq.w	8006fd8 <_strtod_l+0x498>
 80071e2:	2101      	movs	r1, #1
 80071e4:	4620      	mov	r0, r4
 80071e6:	f001 fe9d 	bl	8008f24 <__i2b>
 80071ea:	4606      	mov	r6, r0
 80071ec:	2800      	cmp	r0, #0
 80071ee:	f43f aef3 	beq.w	8006fd8 <_strtod_l+0x498>
 80071f2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80071f4:	9904      	ldr	r1, [sp, #16]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	bfab      	itete	ge
 80071fa:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80071fc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80071fe:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8007200:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8007204:	bfac      	ite	ge
 8007206:	eb03 0902 	addge.w	r9, r3, r2
 800720a:	1ad7      	sublt	r7, r2, r3
 800720c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800720e:	eba3 0801 	sub.w	r8, r3, r1
 8007212:	4490      	add	r8, r2
 8007214:	4ba3      	ldr	r3, [pc, #652]	; (80074a4 <_strtod_l+0x964>)
 8007216:	f108 38ff 	add.w	r8, r8, #4294967295
 800721a:	4598      	cmp	r8, r3
 800721c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007220:	f280 80cc 	bge.w	80073bc <_strtod_l+0x87c>
 8007224:	eba3 0308 	sub.w	r3, r3, r8
 8007228:	2b1f      	cmp	r3, #31
 800722a:	eba2 0203 	sub.w	r2, r2, r3
 800722e:	f04f 0101 	mov.w	r1, #1
 8007232:	f300 80b6 	bgt.w	80073a2 <_strtod_l+0x862>
 8007236:	fa01 f303 	lsl.w	r3, r1, r3
 800723a:	9311      	str	r3, [sp, #68]	; 0x44
 800723c:	2300      	movs	r3, #0
 800723e:	930c      	str	r3, [sp, #48]	; 0x30
 8007240:	eb09 0802 	add.w	r8, r9, r2
 8007244:	9b04      	ldr	r3, [sp, #16]
 8007246:	45c1      	cmp	r9, r8
 8007248:	4417      	add	r7, r2
 800724a:	441f      	add	r7, r3
 800724c:	464b      	mov	r3, r9
 800724e:	bfa8      	it	ge
 8007250:	4643      	movge	r3, r8
 8007252:	42bb      	cmp	r3, r7
 8007254:	bfa8      	it	ge
 8007256:	463b      	movge	r3, r7
 8007258:	2b00      	cmp	r3, #0
 800725a:	bfc2      	ittt	gt
 800725c:	eba8 0803 	subgt.w	r8, r8, r3
 8007260:	1aff      	subgt	r7, r7, r3
 8007262:	eba9 0903 	subgt.w	r9, r9, r3
 8007266:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007268:	2b00      	cmp	r3, #0
 800726a:	dd17      	ble.n	800729c <_strtod_l+0x75c>
 800726c:	4631      	mov	r1, r6
 800726e:	461a      	mov	r2, r3
 8007270:	4620      	mov	r0, r4
 8007272:	f001 ff13 	bl	800909c <__pow5mult>
 8007276:	4606      	mov	r6, r0
 8007278:	2800      	cmp	r0, #0
 800727a:	f43f aead 	beq.w	8006fd8 <_strtod_l+0x498>
 800727e:	4601      	mov	r1, r0
 8007280:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007282:	4620      	mov	r0, r4
 8007284:	f001 fe64 	bl	8008f50 <__multiply>
 8007288:	900f      	str	r0, [sp, #60]	; 0x3c
 800728a:	2800      	cmp	r0, #0
 800728c:	f43f aea4 	beq.w	8006fd8 <_strtod_l+0x498>
 8007290:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007292:	4620      	mov	r0, r4
 8007294:	f001 fd40 	bl	8008d18 <_Bfree>
 8007298:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800729a:	931e      	str	r3, [sp, #120]	; 0x78
 800729c:	f1b8 0f00 	cmp.w	r8, #0
 80072a0:	f300 8091 	bgt.w	80073c6 <_strtod_l+0x886>
 80072a4:	9b08      	ldr	r3, [sp, #32]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	dd08      	ble.n	80072bc <_strtod_l+0x77c>
 80072aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80072ac:	9907      	ldr	r1, [sp, #28]
 80072ae:	4620      	mov	r0, r4
 80072b0:	f001 fef4 	bl	800909c <__pow5mult>
 80072b4:	9007      	str	r0, [sp, #28]
 80072b6:	2800      	cmp	r0, #0
 80072b8:	f43f ae8e 	beq.w	8006fd8 <_strtod_l+0x498>
 80072bc:	2f00      	cmp	r7, #0
 80072be:	dd08      	ble.n	80072d2 <_strtod_l+0x792>
 80072c0:	9907      	ldr	r1, [sp, #28]
 80072c2:	463a      	mov	r2, r7
 80072c4:	4620      	mov	r0, r4
 80072c6:	f001 ff43 	bl	8009150 <__lshift>
 80072ca:	9007      	str	r0, [sp, #28]
 80072cc:	2800      	cmp	r0, #0
 80072ce:	f43f ae83 	beq.w	8006fd8 <_strtod_l+0x498>
 80072d2:	f1b9 0f00 	cmp.w	r9, #0
 80072d6:	dd08      	ble.n	80072ea <_strtod_l+0x7aa>
 80072d8:	4631      	mov	r1, r6
 80072da:	464a      	mov	r2, r9
 80072dc:	4620      	mov	r0, r4
 80072de:	f001 ff37 	bl	8009150 <__lshift>
 80072e2:	4606      	mov	r6, r0
 80072e4:	2800      	cmp	r0, #0
 80072e6:	f43f ae77 	beq.w	8006fd8 <_strtod_l+0x498>
 80072ea:	9a07      	ldr	r2, [sp, #28]
 80072ec:	991e      	ldr	r1, [sp, #120]	; 0x78
 80072ee:	4620      	mov	r0, r4
 80072f0:	f001 ffb6 	bl	8009260 <__mdiff>
 80072f4:	4605      	mov	r5, r0
 80072f6:	2800      	cmp	r0, #0
 80072f8:	f43f ae6e 	beq.w	8006fd8 <_strtod_l+0x498>
 80072fc:	68c3      	ldr	r3, [r0, #12]
 80072fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8007300:	2300      	movs	r3, #0
 8007302:	60c3      	str	r3, [r0, #12]
 8007304:	4631      	mov	r1, r6
 8007306:	f001 ff8f 	bl	8009228 <__mcmp>
 800730a:	2800      	cmp	r0, #0
 800730c:	da65      	bge.n	80073da <_strtod_l+0x89a>
 800730e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007310:	ea53 030a 	orrs.w	r3, r3, sl
 8007314:	f040 8087 	bne.w	8007426 <_strtod_l+0x8e6>
 8007318:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800731c:	2b00      	cmp	r3, #0
 800731e:	f040 8082 	bne.w	8007426 <_strtod_l+0x8e6>
 8007322:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007326:	0d1b      	lsrs	r3, r3, #20
 8007328:	051b      	lsls	r3, r3, #20
 800732a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800732e:	d97a      	bls.n	8007426 <_strtod_l+0x8e6>
 8007330:	696b      	ldr	r3, [r5, #20]
 8007332:	b913      	cbnz	r3, 800733a <_strtod_l+0x7fa>
 8007334:	692b      	ldr	r3, [r5, #16]
 8007336:	2b01      	cmp	r3, #1
 8007338:	dd75      	ble.n	8007426 <_strtod_l+0x8e6>
 800733a:	4629      	mov	r1, r5
 800733c:	2201      	movs	r2, #1
 800733e:	4620      	mov	r0, r4
 8007340:	f001 ff06 	bl	8009150 <__lshift>
 8007344:	4631      	mov	r1, r6
 8007346:	4605      	mov	r5, r0
 8007348:	f001 ff6e 	bl	8009228 <__mcmp>
 800734c:	2800      	cmp	r0, #0
 800734e:	dd6a      	ble.n	8007426 <_strtod_l+0x8e6>
 8007350:	9904      	ldr	r1, [sp, #16]
 8007352:	4a55      	ldr	r2, [pc, #340]	; (80074a8 <_strtod_l+0x968>)
 8007354:	465b      	mov	r3, fp
 8007356:	2900      	cmp	r1, #0
 8007358:	f000 8085 	beq.w	8007466 <_strtod_l+0x926>
 800735c:	ea02 010b 	and.w	r1, r2, fp
 8007360:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007364:	dc7f      	bgt.n	8007466 <_strtod_l+0x926>
 8007366:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800736a:	f77f aeaa 	ble.w	80070c2 <_strtod_l+0x582>
 800736e:	4a4f      	ldr	r2, [pc, #316]	; (80074ac <_strtod_l+0x96c>)
 8007370:	2300      	movs	r3, #0
 8007372:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8007376:	4650      	mov	r0, sl
 8007378:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800737c:	4659      	mov	r1, fp
 800737e:	f7f9 f943 	bl	8000608 <__aeabi_dmul>
 8007382:	460b      	mov	r3, r1
 8007384:	4303      	orrs	r3, r0
 8007386:	bf08      	it	eq
 8007388:	2322      	moveq	r3, #34	; 0x22
 800738a:	4682      	mov	sl, r0
 800738c:	468b      	mov	fp, r1
 800738e:	bf08      	it	eq
 8007390:	6023      	streq	r3, [r4, #0]
 8007392:	e62b      	b.n	8006fec <_strtod_l+0x4ac>
 8007394:	f04f 32ff 	mov.w	r2, #4294967295
 8007398:	fa02 f303 	lsl.w	r3, r2, r3
 800739c:	ea03 0a0a 	and.w	sl, r3, sl
 80073a0:	e6de      	b.n	8007160 <_strtod_l+0x620>
 80073a2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80073a6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80073aa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80073ae:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80073b2:	fa01 f308 	lsl.w	r3, r1, r8
 80073b6:	930c      	str	r3, [sp, #48]	; 0x30
 80073b8:	9111      	str	r1, [sp, #68]	; 0x44
 80073ba:	e741      	b.n	8007240 <_strtod_l+0x700>
 80073bc:	2300      	movs	r3, #0
 80073be:	930c      	str	r3, [sp, #48]	; 0x30
 80073c0:	2301      	movs	r3, #1
 80073c2:	9311      	str	r3, [sp, #68]	; 0x44
 80073c4:	e73c      	b.n	8007240 <_strtod_l+0x700>
 80073c6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80073c8:	4642      	mov	r2, r8
 80073ca:	4620      	mov	r0, r4
 80073cc:	f001 fec0 	bl	8009150 <__lshift>
 80073d0:	901e      	str	r0, [sp, #120]	; 0x78
 80073d2:	2800      	cmp	r0, #0
 80073d4:	f47f af66 	bne.w	80072a4 <_strtod_l+0x764>
 80073d8:	e5fe      	b.n	8006fd8 <_strtod_l+0x498>
 80073da:	465f      	mov	r7, fp
 80073dc:	d16e      	bne.n	80074bc <_strtod_l+0x97c>
 80073de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80073e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80073e4:	b342      	cbz	r2, 8007438 <_strtod_l+0x8f8>
 80073e6:	4a32      	ldr	r2, [pc, #200]	; (80074b0 <_strtod_l+0x970>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d128      	bne.n	800743e <_strtod_l+0x8fe>
 80073ec:	9b04      	ldr	r3, [sp, #16]
 80073ee:	4650      	mov	r0, sl
 80073f0:	b1eb      	cbz	r3, 800742e <_strtod_l+0x8ee>
 80073f2:	4a2d      	ldr	r2, [pc, #180]	; (80074a8 <_strtod_l+0x968>)
 80073f4:	403a      	ands	r2, r7
 80073f6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80073fa:	f04f 31ff 	mov.w	r1, #4294967295
 80073fe:	d819      	bhi.n	8007434 <_strtod_l+0x8f4>
 8007400:	0d12      	lsrs	r2, r2, #20
 8007402:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007406:	fa01 f303 	lsl.w	r3, r1, r3
 800740a:	4298      	cmp	r0, r3
 800740c:	d117      	bne.n	800743e <_strtod_l+0x8fe>
 800740e:	4b29      	ldr	r3, [pc, #164]	; (80074b4 <_strtod_l+0x974>)
 8007410:	429f      	cmp	r7, r3
 8007412:	d102      	bne.n	800741a <_strtod_l+0x8da>
 8007414:	3001      	adds	r0, #1
 8007416:	f43f addf 	beq.w	8006fd8 <_strtod_l+0x498>
 800741a:	4b23      	ldr	r3, [pc, #140]	; (80074a8 <_strtod_l+0x968>)
 800741c:	403b      	ands	r3, r7
 800741e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007422:	f04f 0a00 	mov.w	sl, #0
 8007426:	9b04      	ldr	r3, [sp, #16]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d1a0      	bne.n	800736e <_strtod_l+0x82e>
 800742c:	e5de      	b.n	8006fec <_strtod_l+0x4ac>
 800742e:	f04f 33ff 	mov.w	r3, #4294967295
 8007432:	e7ea      	b.n	800740a <_strtod_l+0x8ca>
 8007434:	460b      	mov	r3, r1
 8007436:	e7e8      	b.n	800740a <_strtod_l+0x8ca>
 8007438:	ea53 030a 	orrs.w	r3, r3, sl
 800743c:	d088      	beq.n	8007350 <_strtod_l+0x810>
 800743e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007440:	b1db      	cbz	r3, 800747a <_strtod_l+0x93a>
 8007442:	423b      	tst	r3, r7
 8007444:	d0ef      	beq.n	8007426 <_strtod_l+0x8e6>
 8007446:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007448:	9a04      	ldr	r2, [sp, #16]
 800744a:	4650      	mov	r0, sl
 800744c:	4659      	mov	r1, fp
 800744e:	b1c3      	cbz	r3, 8007482 <_strtod_l+0x942>
 8007450:	f7ff fb58 	bl	8006b04 <sulp>
 8007454:	4602      	mov	r2, r0
 8007456:	460b      	mov	r3, r1
 8007458:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800745c:	f7f8 ff1e 	bl	800029c <__adddf3>
 8007460:	4682      	mov	sl, r0
 8007462:	468b      	mov	fp, r1
 8007464:	e7df      	b.n	8007426 <_strtod_l+0x8e6>
 8007466:	4013      	ands	r3, r2
 8007468:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800746c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007470:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007474:	f04f 3aff 	mov.w	sl, #4294967295
 8007478:	e7d5      	b.n	8007426 <_strtod_l+0x8e6>
 800747a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800747c:	ea13 0f0a 	tst.w	r3, sl
 8007480:	e7e0      	b.n	8007444 <_strtod_l+0x904>
 8007482:	f7ff fb3f 	bl	8006b04 <sulp>
 8007486:	4602      	mov	r2, r0
 8007488:	460b      	mov	r3, r1
 800748a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800748e:	f7f8 ff03 	bl	8000298 <__aeabi_dsub>
 8007492:	2200      	movs	r2, #0
 8007494:	2300      	movs	r3, #0
 8007496:	4682      	mov	sl, r0
 8007498:	468b      	mov	fp, r1
 800749a:	f7f9 fb1d 	bl	8000ad8 <__aeabi_dcmpeq>
 800749e:	2800      	cmp	r0, #0
 80074a0:	d0c1      	beq.n	8007426 <_strtod_l+0x8e6>
 80074a2:	e60e      	b.n	80070c2 <_strtod_l+0x582>
 80074a4:	fffffc02 	.word	0xfffffc02
 80074a8:	7ff00000 	.word	0x7ff00000
 80074ac:	39500000 	.word	0x39500000
 80074b0:	000fffff 	.word	0x000fffff
 80074b4:	7fefffff 	.word	0x7fefffff
 80074b8:	0800bc70 	.word	0x0800bc70
 80074bc:	4631      	mov	r1, r6
 80074be:	4628      	mov	r0, r5
 80074c0:	f002 f82e 	bl	8009520 <__ratio>
 80074c4:	ec59 8b10 	vmov	r8, r9, d0
 80074c8:	ee10 0a10 	vmov	r0, s0
 80074cc:	2200      	movs	r2, #0
 80074ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80074d2:	4649      	mov	r1, r9
 80074d4:	f7f9 fb14 	bl	8000b00 <__aeabi_dcmple>
 80074d8:	2800      	cmp	r0, #0
 80074da:	d07c      	beq.n	80075d6 <_strtod_l+0xa96>
 80074dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d04c      	beq.n	800757c <_strtod_l+0xa3c>
 80074e2:	4b95      	ldr	r3, [pc, #596]	; (8007738 <_strtod_l+0xbf8>)
 80074e4:	2200      	movs	r2, #0
 80074e6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80074ea:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007738 <_strtod_l+0xbf8>
 80074ee:	f04f 0800 	mov.w	r8, #0
 80074f2:	4b92      	ldr	r3, [pc, #584]	; (800773c <_strtod_l+0xbfc>)
 80074f4:	403b      	ands	r3, r7
 80074f6:	9311      	str	r3, [sp, #68]	; 0x44
 80074f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80074fa:	4b91      	ldr	r3, [pc, #580]	; (8007740 <_strtod_l+0xc00>)
 80074fc:	429a      	cmp	r2, r3
 80074fe:	f040 80b2 	bne.w	8007666 <_strtod_l+0xb26>
 8007502:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007506:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800750a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800750e:	ec4b ab10 	vmov	d0, sl, fp
 8007512:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8007516:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800751a:	f001 ff29 	bl	8009370 <__ulp>
 800751e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007522:	ec53 2b10 	vmov	r2, r3, d0
 8007526:	f7f9 f86f 	bl	8000608 <__aeabi_dmul>
 800752a:	4652      	mov	r2, sl
 800752c:	465b      	mov	r3, fp
 800752e:	f7f8 feb5 	bl	800029c <__adddf3>
 8007532:	460b      	mov	r3, r1
 8007534:	4981      	ldr	r1, [pc, #516]	; (800773c <_strtod_l+0xbfc>)
 8007536:	4a83      	ldr	r2, [pc, #524]	; (8007744 <_strtod_l+0xc04>)
 8007538:	4019      	ands	r1, r3
 800753a:	4291      	cmp	r1, r2
 800753c:	4682      	mov	sl, r0
 800753e:	d95e      	bls.n	80075fe <_strtod_l+0xabe>
 8007540:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007542:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007546:	4293      	cmp	r3, r2
 8007548:	d103      	bne.n	8007552 <_strtod_l+0xa12>
 800754a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800754c:	3301      	adds	r3, #1
 800754e:	f43f ad43 	beq.w	8006fd8 <_strtod_l+0x498>
 8007552:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8007750 <_strtod_l+0xc10>
 8007556:	f04f 3aff 	mov.w	sl, #4294967295
 800755a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800755c:	4620      	mov	r0, r4
 800755e:	f001 fbdb 	bl	8008d18 <_Bfree>
 8007562:	9907      	ldr	r1, [sp, #28]
 8007564:	4620      	mov	r0, r4
 8007566:	f001 fbd7 	bl	8008d18 <_Bfree>
 800756a:	4631      	mov	r1, r6
 800756c:	4620      	mov	r0, r4
 800756e:	f001 fbd3 	bl	8008d18 <_Bfree>
 8007572:	4629      	mov	r1, r5
 8007574:	4620      	mov	r0, r4
 8007576:	f001 fbcf 	bl	8008d18 <_Bfree>
 800757a:	e613      	b.n	80071a4 <_strtod_l+0x664>
 800757c:	f1ba 0f00 	cmp.w	sl, #0
 8007580:	d11b      	bne.n	80075ba <_strtod_l+0xa7a>
 8007582:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007586:	b9f3      	cbnz	r3, 80075c6 <_strtod_l+0xa86>
 8007588:	4b6b      	ldr	r3, [pc, #428]	; (8007738 <_strtod_l+0xbf8>)
 800758a:	2200      	movs	r2, #0
 800758c:	4640      	mov	r0, r8
 800758e:	4649      	mov	r1, r9
 8007590:	f7f9 faac 	bl	8000aec <__aeabi_dcmplt>
 8007594:	b9d0      	cbnz	r0, 80075cc <_strtod_l+0xa8c>
 8007596:	4640      	mov	r0, r8
 8007598:	4649      	mov	r1, r9
 800759a:	4b6b      	ldr	r3, [pc, #428]	; (8007748 <_strtod_l+0xc08>)
 800759c:	2200      	movs	r2, #0
 800759e:	f7f9 f833 	bl	8000608 <__aeabi_dmul>
 80075a2:	4680      	mov	r8, r0
 80075a4:	4689      	mov	r9, r1
 80075a6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80075aa:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80075ae:	931b      	str	r3, [sp, #108]	; 0x6c
 80075b0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80075b4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80075b8:	e79b      	b.n	80074f2 <_strtod_l+0x9b2>
 80075ba:	f1ba 0f01 	cmp.w	sl, #1
 80075be:	d102      	bne.n	80075c6 <_strtod_l+0xa86>
 80075c0:	2f00      	cmp	r7, #0
 80075c2:	f43f ad7e 	beq.w	80070c2 <_strtod_l+0x582>
 80075c6:	4b61      	ldr	r3, [pc, #388]	; (800774c <_strtod_l+0xc0c>)
 80075c8:	2200      	movs	r2, #0
 80075ca:	e78c      	b.n	80074e6 <_strtod_l+0x9a6>
 80075cc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007748 <_strtod_l+0xc08>
 80075d0:	f04f 0800 	mov.w	r8, #0
 80075d4:	e7e7      	b.n	80075a6 <_strtod_l+0xa66>
 80075d6:	4b5c      	ldr	r3, [pc, #368]	; (8007748 <_strtod_l+0xc08>)
 80075d8:	4640      	mov	r0, r8
 80075da:	4649      	mov	r1, r9
 80075dc:	2200      	movs	r2, #0
 80075de:	f7f9 f813 	bl	8000608 <__aeabi_dmul>
 80075e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80075e4:	4680      	mov	r8, r0
 80075e6:	4689      	mov	r9, r1
 80075e8:	b933      	cbnz	r3, 80075f8 <_strtod_l+0xab8>
 80075ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80075ee:	9012      	str	r0, [sp, #72]	; 0x48
 80075f0:	9313      	str	r3, [sp, #76]	; 0x4c
 80075f2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80075f6:	e7dd      	b.n	80075b4 <_strtod_l+0xa74>
 80075f8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80075fc:	e7f9      	b.n	80075f2 <_strtod_l+0xab2>
 80075fe:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007602:	9b04      	ldr	r3, [sp, #16]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d1a8      	bne.n	800755a <_strtod_l+0xa1a>
 8007608:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800760c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800760e:	0d1b      	lsrs	r3, r3, #20
 8007610:	051b      	lsls	r3, r3, #20
 8007612:	429a      	cmp	r2, r3
 8007614:	d1a1      	bne.n	800755a <_strtod_l+0xa1a>
 8007616:	4640      	mov	r0, r8
 8007618:	4649      	mov	r1, r9
 800761a:	f7f9 fb55 	bl	8000cc8 <__aeabi_d2lz>
 800761e:	f7f8 ffc5 	bl	80005ac <__aeabi_l2d>
 8007622:	4602      	mov	r2, r0
 8007624:	460b      	mov	r3, r1
 8007626:	4640      	mov	r0, r8
 8007628:	4649      	mov	r1, r9
 800762a:	f7f8 fe35 	bl	8000298 <__aeabi_dsub>
 800762e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007630:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007634:	ea43 030a 	orr.w	r3, r3, sl
 8007638:	4313      	orrs	r3, r2
 800763a:	4680      	mov	r8, r0
 800763c:	4689      	mov	r9, r1
 800763e:	d053      	beq.n	80076e8 <_strtod_l+0xba8>
 8007640:	a335      	add	r3, pc, #212	; (adr r3, 8007718 <_strtod_l+0xbd8>)
 8007642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007646:	f7f9 fa51 	bl	8000aec <__aeabi_dcmplt>
 800764a:	2800      	cmp	r0, #0
 800764c:	f47f acce 	bne.w	8006fec <_strtod_l+0x4ac>
 8007650:	a333      	add	r3, pc, #204	; (adr r3, 8007720 <_strtod_l+0xbe0>)
 8007652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007656:	4640      	mov	r0, r8
 8007658:	4649      	mov	r1, r9
 800765a:	f7f9 fa65 	bl	8000b28 <__aeabi_dcmpgt>
 800765e:	2800      	cmp	r0, #0
 8007660:	f43f af7b 	beq.w	800755a <_strtod_l+0xa1a>
 8007664:	e4c2      	b.n	8006fec <_strtod_l+0x4ac>
 8007666:	9b04      	ldr	r3, [sp, #16]
 8007668:	b333      	cbz	r3, 80076b8 <_strtod_l+0xb78>
 800766a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800766c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007670:	d822      	bhi.n	80076b8 <_strtod_l+0xb78>
 8007672:	a32d      	add	r3, pc, #180	; (adr r3, 8007728 <_strtod_l+0xbe8>)
 8007674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007678:	4640      	mov	r0, r8
 800767a:	4649      	mov	r1, r9
 800767c:	f7f9 fa40 	bl	8000b00 <__aeabi_dcmple>
 8007680:	b1a0      	cbz	r0, 80076ac <_strtod_l+0xb6c>
 8007682:	4649      	mov	r1, r9
 8007684:	4640      	mov	r0, r8
 8007686:	f7f9 fa97 	bl	8000bb8 <__aeabi_d2uiz>
 800768a:	2801      	cmp	r0, #1
 800768c:	bf38      	it	cc
 800768e:	2001      	movcc	r0, #1
 8007690:	f7f8 ff40 	bl	8000514 <__aeabi_ui2d>
 8007694:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007696:	4680      	mov	r8, r0
 8007698:	4689      	mov	r9, r1
 800769a:	bb13      	cbnz	r3, 80076e2 <_strtod_l+0xba2>
 800769c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80076a0:	9014      	str	r0, [sp, #80]	; 0x50
 80076a2:	9315      	str	r3, [sp, #84]	; 0x54
 80076a4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80076a8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80076ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80076b0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80076b4:	1a9b      	subs	r3, r3, r2
 80076b6:	930d      	str	r3, [sp, #52]	; 0x34
 80076b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80076bc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80076c0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80076c4:	f001 fe54 	bl	8009370 <__ulp>
 80076c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80076cc:	ec53 2b10 	vmov	r2, r3, d0
 80076d0:	f7f8 ff9a 	bl	8000608 <__aeabi_dmul>
 80076d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80076d8:	f7f8 fde0 	bl	800029c <__adddf3>
 80076dc:	4682      	mov	sl, r0
 80076de:	468b      	mov	fp, r1
 80076e0:	e78f      	b.n	8007602 <_strtod_l+0xac2>
 80076e2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80076e6:	e7dd      	b.n	80076a4 <_strtod_l+0xb64>
 80076e8:	a311      	add	r3, pc, #68	; (adr r3, 8007730 <_strtod_l+0xbf0>)
 80076ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ee:	f7f9 f9fd 	bl	8000aec <__aeabi_dcmplt>
 80076f2:	e7b4      	b.n	800765e <_strtod_l+0xb1e>
 80076f4:	2300      	movs	r3, #0
 80076f6:	930e      	str	r3, [sp, #56]	; 0x38
 80076f8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80076fa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80076fc:	6013      	str	r3, [r2, #0]
 80076fe:	f7ff ba65 	b.w	8006bcc <_strtod_l+0x8c>
 8007702:	2b65      	cmp	r3, #101	; 0x65
 8007704:	f43f ab5d 	beq.w	8006dc2 <_strtod_l+0x282>
 8007708:	2b45      	cmp	r3, #69	; 0x45
 800770a:	f43f ab5a 	beq.w	8006dc2 <_strtod_l+0x282>
 800770e:	2201      	movs	r2, #1
 8007710:	f7ff bb92 	b.w	8006e38 <_strtod_l+0x2f8>
 8007714:	f3af 8000 	nop.w
 8007718:	94a03595 	.word	0x94a03595
 800771c:	3fdfffff 	.word	0x3fdfffff
 8007720:	35afe535 	.word	0x35afe535
 8007724:	3fe00000 	.word	0x3fe00000
 8007728:	ffc00000 	.word	0xffc00000
 800772c:	41dfffff 	.word	0x41dfffff
 8007730:	94a03595 	.word	0x94a03595
 8007734:	3fcfffff 	.word	0x3fcfffff
 8007738:	3ff00000 	.word	0x3ff00000
 800773c:	7ff00000 	.word	0x7ff00000
 8007740:	7fe00000 	.word	0x7fe00000
 8007744:	7c9fffff 	.word	0x7c9fffff
 8007748:	3fe00000 	.word	0x3fe00000
 800774c:	bff00000 	.word	0xbff00000
 8007750:	7fefffff 	.word	0x7fefffff

08007754 <_strtod_r>:
 8007754:	4b01      	ldr	r3, [pc, #4]	; (800775c <_strtod_r+0x8>)
 8007756:	f7ff b9f3 	b.w	8006b40 <_strtod_l>
 800775a:	bf00      	nop
 800775c:	200000dc 	.word	0x200000dc

08007760 <_strtol_l.isra.0>:
 8007760:	2b01      	cmp	r3, #1
 8007762:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007766:	d001      	beq.n	800776c <_strtol_l.isra.0+0xc>
 8007768:	2b24      	cmp	r3, #36	; 0x24
 800776a:	d906      	bls.n	800777a <_strtol_l.isra.0+0x1a>
 800776c:	f7fe faea 	bl	8005d44 <__errno>
 8007770:	2316      	movs	r3, #22
 8007772:	6003      	str	r3, [r0, #0]
 8007774:	2000      	movs	r0, #0
 8007776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800777a:	4f3a      	ldr	r7, [pc, #232]	; (8007864 <_strtol_l.isra.0+0x104>)
 800777c:	468e      	mov	lr, r1
 800777e:	4676      	mov	r6, lr
 8007780:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007784:	5de5      	ldrb	r5, [r4, r7]
 8007786:	f015 0508 	ands.w	r5, r5, #8
 800778a:	d1f8      	bne.n	800777e <_strtol_l.isra.0+0x1e>
 800778c:	2c2d      	cmp	r4, #45	; 0x2d
 800778e:	d134      	bne.n	80077fa <_strtol_l.isra.0+0x9a>
 8007790:	f89e 4000 	ldrb.w	r4, [lr]
 8007794:	f04f 0801 	mov.w	r8, #1
 8007798:	f106 0e02 	add.w	lr, r6, #2
 800779c:	2b00      	cmp	r3, #0
 800779e:	d05c      	beq.n	800785a <_strtol_l.isra.0+0xfa>
 80077a0:	2b10      	cmp	r3, #16
 80077a2:	d10c      	bne.n	80077be <_strtol_l.isra.0+0x5e>
 80077a4:	2c30      	cmp	r4, #48	; 0x30
 80077a6:	d10a      	bne.n	80077be <_strtol_l.isra.0+0x5e>
 80077a8:	f89e 4000 	ldrb.w	r4, [lr]
 80077ac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80077b0:	2c58      	cmp	r4, #88	; 0x58
 80077b2:	d14d      	bne.n	8007850 <_strtol_l.isra.0+0xf0>
 80077b4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80077b8:	2310      	movs	r3, #16
 80077ba:	f10e 0e02 	add.w	lr, lr, #2
 80077be:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80077c2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80077c6:	2600      	movs	r6, #0
 80077c8:	fbbc f9f3 	udiv	r9, ip, r3
 80077cc:	4635      	mov	r5, r6
 80077ce:	fb03 ca19 	mls	sl, r3, r9, ip
 80077d2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80077d6:	2f09      	cmp	r7, #9
 80077d8:	d818      	bhi.n	800780c <_strtol_l.isra.0+0xac>
 80077da:	463c      	mov	r4, r7
 80077dc:	42a3      	cmp	r3, r4
 80077de:	dd24      	ble.n	800782a <_strtol_l.isra.0+0xca>
 80077e0:	2e00      	cmp	r6, #0
 80077e2:	db1f      	blt.n	8007824 <_strtol_l.isra.0+0xc4>
 80077e4:	45a9      	cmp	r9, r5
 80077e6:	d31d      	bcc.n	8007824 <_strtol_l.isra.0+0xc4>
 80077e8:	d101      	bne.n	80077ee <_strtol_l.isra.0+0x8e>
 80077ea:	45a2      	cmp	sl, r4
 80077ec:	db1a      	blt.n	8007824 <_strtol_l.isra.0+0xc4>
 80077ee:	fb05 4503 	mla	r5, r5, r3, r4
 80077f2:	2601      	movs	r6, #1
 80077f4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80077f8:	e7eb      	b.n	80077d2 <_strtol_l.isra.0+0x72>
 80077fa:	2c2b      	cmp	r4, #43	; 0x2b
 80077fc:	bf08      	it	eq
 80077fe:	f89e 4000 	ldrbeq.w	r4, [lr]
 8007802:	46a8      	mov	r8, r5
 8007804:	bf08      	it	eq
 8007806:	f106 0e02 	addeq.w	lr, r6, #2
 800780a:	e7c7      	b.n	800779c <_strtol_l.isra.0+0x3c>
 800780c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007810:	2f19      	cmp	r7, #25
 8007812:	d801      	bhi.n	8007818 <_strtol_l.isra.0+0xb8>
 8007814:	3c37      	subs	r4, #55	; 0x37
 8007816:	e7e1      	b.n	80077dc <_strtol_l.isra.0+0x7c>
 8007818:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800781c:	2f19      	cmp	r7, #25
 800781e:	d804      	bhi.n	800782a <_strtol_l.isra.0+0xca>
 8007820:	3c57      	subs	r4, #87	; 0x57
 8007822:	e7db      	b.n	80077dc <_strtol_l.isra.0+0x7c>
 8007824:	f04f 36ff 	mov.w	r6, #4294967295
 8007828:	e7e4      	b.n	80077f4 <_strtol_l.isra.0+0x94>
 800782a:	2e00      	cmp	r6, #0
 800782c:	da05      	bge.n	800783a <_strtol_l.isra.0+0xda>
 800782e:	2322      	movs	r3, #34	; 0x22
 8007830:	6003      	str	r3, [r0, #0]
 8007832:	4665      	mov	r5, ip
 8007834:	b942      	cbnz	r2, 8007848 <_strtol_l.isra.0+0xe8>
 8007836:	4628      	mov	r0, r5
 8007838:	e79d      	b.n	8007776 <_strtol_l.isra.0+0x16>
 800783a:	f1b8 0f00 	cmp.w	r8, #0
 800783e:	d000      	beq.n	8007842 <_strtol_l.isra.0+0xe2>
 8007840:	426d      	negs	r5, r5
 8007842:	2a00      	cmp	r2, #0
 8007844:	d0f7      	beq.n	8007836 <_strtol_l.isra.0+0xd6>
 8007846:	b10e      	cbz	r6, 800784c <_strtol_l.isra.0+0xec>
 8007848:	f10e 31ff 	add.w	r1, lr, #4294967295
 800784c:	6011      	str	r1, [r2, #0]
 800784e:	e7f2      	b.n	8007836 <_strtol_l.isra.0+0xd6>
 8007850:	2430      	movs	r4, #48	; 0x30
 8007852:	2b00      	cmp	r3, #0
 8007854:	d1b3      	bne.n	80077be <_strtol_l.isra.0+0x5e>
 8007856:	2308      	movs	r3, #8
 8007858:	e7b1      	b.n	80077be <_strtol_l.isra.0+0x5e>
 800785a:	2c30      	cmp	r4, #48	; 0x30
 800785c:	d0a4      	beq.n	80077a8 <_strtol_l.isra.0+0x48>
 800785e:	230a      	movs	r3, #10
 8007860:	e7ad      	b.n	80077be <_strtol_l.isra.0+0x5e>
 8007862:	bf00      	nop
 8007864:	0800bc99 	.word	0x0800bc99

08007868 <_strtol_r>:
 8007868:	f7ff bf7a 	b.w	8007760 <_strtol_l.isra.0>

0800786c <quorem>:
 800786c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007870:	6903      	ldr	r3, [r0, #16]
 8007872:	690c      	ldr	r4, [r1, #16]
 8007874:	42a3      	cmp	r3, r4
 8007876:	4607      	mov	r7, r0
 8007878:	f2c0 8081 	blt.w	800797e <quorem+0x112>
 800787c:	3c01      	subs	r4, #1
 800787e:	f101 0814 	add.w	r8, r1, #20
 8007882:	f100 0514 	add.w	r5, r0, #20
 8007886:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800788a:	9301      	str	r3, [sp, #4]
 800788c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007890:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007894:	3301      	adds	r3, #1
 8007896:	429a      	cmp	r2, r3
 8007898:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800789c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80078a0:	fbb2 f6f3 	udiv	r6, r2, r3
 80078a4:	d331      	bcc.n	800790a <quorem+0x9e>
 80078a6:	f04f 0e00 	mov.w	lr, #0
 80078aa:	4640      	mov	r0, r8
 80078ac:	46ac      	mov	ip, r5
 80078ae:	46f2      	mov	sl, lr
 80078b0:	f850 2b04 	ldr.w	r2, [r0], #4
 80078b4:	b293      	uxth	r3, r2
 80078b6:	fb06 e303 	mla	r3, r6, r3, lr
 80078ba:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80078be:	b29b      	uxth	r3, r3
 80078c0:	ebaa 0303 	sub.w	r3, sl, r3
 80078c4:	0c12      	lsrs	r2, r2, #16
 80078c6:	f8dc a000 	ldr.w	sl, [ip]
 80078ca:	fb06 e202 	mla	r2, r6, r2, lr
 80078ce:	fa13 f38a 	uxtah	r3, r3, sl
 80078d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80078d6:	fa1f fa82 	uxth.w	sl, r2
 80078da:	f8dc 2000 	ldr.w	r2, [ip]
 80078de:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80078e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80078ec:	4581      	cmp	r9, r0
 80078ee:	f84c 3b04 	str.w	r3, [ip], #4
 80078f2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80078f6:	d2db      	bcs.n	80078b0 <quorem+0x44>
 80078f8:	f855 300b 	ldr.w	r3, [r5, fp]
 80078fc:	b92b      	cbnz	r3, 800790a <quorem+0x9e>
 80078fe:	9b01      	ldr	r3, [sp, #4]
 8007900:	3b04      	subs	r3, #4
 8007902:	429d      	cmp	r5, r3
 8007904:	461a      	mov	r2, r3
 8007906:	d32e      	bcc.n	8007966 <quorem+0xfa>
 8007908:	613c      	str	r4, [r7, #16]
 800790a:	4638      	mov	r0, r7
 800790c:	f001 fc8c 	bl	8009228 <__mcmp>
 8007910:	2800      	cmp	r0, #0
 8007912:	db24      	blt.n	800795e <quorem+0xf2>
 8007914:	3601      	adds	r6, #1
 8007916:	4628      	mov	r0, r5
 8007918:	f04f 0c00 	mov.w	ip, #0
 800791c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007920:	f8d0 e000 	ldr.w	lr, [r0]
 8007924:	b293      	uxth	r3, r2
 8007926:	ebac 0303 	sub.w	r3, ip, r3
 800792a:	0c12      	lsrs	r2, r2, #16
 800792c:	fa13 f38e 	uxtah	r3, r3, lr
 8007930:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007934:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007938:	b29b      	uxth	r3, r3
 800793a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800793e:	45c1      	cmp	r9, r8
 8007940:	f840 3b04 	str.w	r3, [r0], #4
 8007944:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007948:	d2e8      	bcs.n	800791c <quorem+0xb0>
 800794a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800794e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007952:	b922      	cbnz	r2, 800795e <quorem+0xf2>
 8007954:	3b04      	subs	r3, #4
 8007956:	429d      	cmp	r5, r3
 8007958:	461a      	mov	r2, r3
 800795a:	d30a      	bcc.n	8007972 <quorem+0x106>
 800795c:	613c      	str	r4, [r7, #16]
 800795e:	4630      	mov	r0, r6
 8007960:	b003      	add	sp, #12
 8007962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007966:	6812      	ldr	r2, [r2, #0]
 8007968:	3b04      	subs	r3, #4
 800796a:	2a00      	cmp	r2, #0
 800796c:	d1cc      	bne.n	8007908 <quorem+0x9c>
 800796e:	3c01      	subs	r4, #1
 8007970:	e7c7      	b.n	8007902 <quorem+0x96>
 8007972:	6812      	ldr	r2, [r2, #0]
 8007974:	3b04      	subs	r3, #4
 8007976:	2a00      	cmp	r2, #0
 8007978:	d1f0      	bne.n	800795c <quorem+0xf0>
 800797a:	3c01      	subs	r4, #1
 800797c:	e7eb      	b.n	8007956 <quorem+0xea>
 800797e:	2000      	movs	r0, #0
 8007980:	e7ee      	b.n	8007960 <quorem+0xf4>
 8007982:	0000      	movs	r0, r0
 8007984:	0000      	movs	r0, r0
	...

08007988 <_dtoa_r>:
 8007988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800798c:	ed2d 8b02 	vpush	{d8}
 8007990:	ec57 6b10 	vmov	r6, r7, d0
 8007994:	b095      	sub	sp, #84	; 0x54
 8007996:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007998:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800799c:	9105      	str	r1, [sp, #20]
 800799e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80079a2:	4604      	mov	r4, r0
 80079a4:	9209      	str	r2, [sp, #36]	; 0x24
 80079a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80079a8:	b975      	cbnz	r5, 80079c8 <_dtoa_r+0x40>
 80079aa:	2010      	movs	r0, #16
 80079ac:	f001 f94c 	bl	8008c48 <malloc>
 80079b0:	4602      	mov	r2, r0
 80079b2:	6260      	str	r0, [r4, #36]	; 0x24
 80079b4:	b920      	cbnz	r0, 80079c0 <_dtoa_r+0x38>
 80079b6:	4bb2      	ldr	r3, [pc, #712]	; (8007c80 <_dtoa_r+0x2f8>)
 80079b8:	21ea      	movs	r1, #234	; 0xea
 80079ba:	48b2      	ldr	r0, [pc, #712]	; (8007c84 <_dtoa_r+0x2fc>)
 80079bc:	f002 f874 	bl	8009aa8 <__assert_func>
 80079c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80079c4:	6005      	str	r5, [r0, #0]
 80079c6:	60c5      	str	r5, [r0, #12]
 80079c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079ca:	6819      	ldr	r1, [r3, #0]
 80079cc:	b151      	cbz	r1, 80079e4 <_dtoa_r+0x5c>
 80079ce:	685a      	ldr	r2, [r3, #4]
 80079d0:	604a      	str	r2, [r1, #4]
 80079d2:	2301      	movs	r3, #1
 80079d4:	4093      	lsls	r3, r2
 80079d6:	608b      	str	r3, [r1, #8]
 80079d8:	4620      	mov	r0, r4
 80079da:	f001 f99d 	bl	8008d18 <_Bfree>
 80079de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079e0:	2200      	movs	r2, #0
 80079e2:	601a      	str	r2, [r3, #0]
 80079e4:	1e3b      	subs	r3, r7, #0
 80079e6:	bfb9      	ittee	lt
 80079e8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80079ec:	9303      	strlt	r3, [sp, #12]
 80079ee:	2300      	movge	r3, #0
 80079f0:	f8c8 3000 	strge.w	r3, [r8]
 80079f4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80079f8:	4ba3      	ldr	r3, [pc, #652]	; (8007c88 <_dtoa_r+0x300>)
 80079fa:	bfbc      	itt	lt
 80079fc:	2201      	movlt	r2, #1
 80079fe:	f8c8 2000 	strlt.w	r2, [r8]
 8007a02:	ea33 0309 	bics.w	r3, r3, r9
 8007a06:	d11b      	bne.n	8007a40 <_dtoa_r+0xb8>
 8007a08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007a0a:	f242 730f 	movw	r3, #9999	; 0x270f
 8007a0e:	6013      	str	r3, [r2, #0]
 8007a10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a14:	4333      	orrs	r3, r6
 8007a16:	f000 857a 	beq.w	800850e <_dtoa_r+0xb86>
 8007a1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a1c:	b963      	cbnz	r3, 8007a38 <_dtoa_r+0xb0>
 8007a1e:	4b9b      	ldr	r3, [pc, #620]	; (8007c8c <_dtoa_r+0x304>)
 8007a20:	e024      	b.n	8007a6c <_dtoa_r+0xe4>
 8007a22:	4b9b      	ldr	r3, [pc, #620]	; (8007c90 <_dtoa_r+0x308>)
 8007a24:	9300      	str	r3, [sp, #0]
 8007a26:	3308      	adds	r3, #8
 8007a28:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007a2a:	6013      	str	r3, [r2, #0]
 8007a2c:	9800      	ldr	r0, [sp, #0]
 8007a2e:	b015      	add	sp, #84	; 0x54
 8007a30:	ecbd 8b02 	vpop	{d8}
 8007a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a38:	4b94      	ldr	r3, [pc, #592]	; (8007c8c <_dtoa_r+0x304>)
 8007a3a:	9300      	str	r3, [sp, #0]
 8007a3c:	3303      	adds	r3, #3
 8007a3e:	e7f3      	b.n	8007a28 <_dtoa_r+0xa0>
 8007a40:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007a44:	2200      	movs	r2, #0
 8007a46:	ec51 0b17 	vmov	r0, r1, d7
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007a50:	f7f9 f842 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a54:	4680      	mov	r8, r0
 8007a56:	b158      	cbz	r0, 8007a70 <_dtoa_r+0xe8>
 8007a58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	6013      	str	r3, [r2, #0]
 8007a5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	f000 8551 	beq.w	8008508 <_dtoa_r+0xb80>
 8007a66:	488b      	ldr	r0, [pc, #556]	; (8007c94 <_dtoa_r+0x30c>)
 8007a68:	6018      	str	r0, [r3, #0]
 8007a6a:	1e43      	subs	r3, r0, #1
 8007a6c:	9300      	str	r3, [sp, #0]
 8007a6e:	e7dd      	b.n	8007a2c <_dtoa_r+0xa4>
 8007a70:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007a74:	aa12      	add	r2, sp, #72	; 0x48
 8007a76:	a913      	add	r1, sp, #76	; 0x4c
 8007a78:	4620      	mov	r0, r4
 8007a7a:	f001 fcf5 	bl	8009468 <__d2b>
 8007a7e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007a82:	4683      	mov	fp, r0
 8007a84:	2d00      	cmp	r5, #0
 8007a86:	d07c      	beq.n	8007b82 <_dtoa_r+0x1fa>
 8007a88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a8a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007a8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a92:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007a96:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007a9a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007a9e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007aa2:	4b7d      	ldr	r3, [pc, #500]	; (8007c98 <_dtoa_r+0x310>)
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	4630      	mov	r0, r6
 8007aa8:	4639      	mov	r1, r7
 8007aaa:	f7f8 fbf5 	bl	8000298 <__aeabi_dsub>
 8007aae:	a36e      	add	r3, pc, #440	; (adr r3, 8007c68 <_dtoa_r+0x2e0>)
 8007ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab4:	f7f8 fda8 	bl	8000608 <__aeabi_dmul>
 8007ab8:	a36d      	add	r3, pc, #436	; (adr r3, 8007c70 <_dtoa_r+0x2e8>)
 8007aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007abe:	f7f8 fbed 	bl	800029c <__adddf3>
 8007ac2:	4606      	mov	r6, r0
 8007ac4:	4628      	mov	r0, r5
 8007ac6:	460f      	mov	r7, r1
 8007ac8:	f7f8 fd34 	bl	8000534 <__aeabi_i2d>
 8007acc:	a36a      	add	r3, pc, #424	; (adr r3, 8007c78 <_dtoa_r+0x2f0>)
 8007ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad2:	f7f8 fd99 	bl	8000608 <__aeabi_dmul>
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	460b      	mov	r3, r1
 8007ada:	4630      	mov	r0, r6
 8007adc:	4639      	mov	r1, r7
 8007ade:	f7f8 fbdd 	bl	800029c <__adddf3>
 8007ae2:	4606      	mov	r6, r0
 8007ae4:	460f      	mov	r7, r1
 8007ae6:	f7f9 f83f 	bl	8000b68 <__aeabi_d2iz>
 8007aea:	2200      	movs	r2, #0
 8007aec:	4682      	mov	sl, r0
 8007aee:	2300      	movs	r3, #0
 8007af0:	4630      	mov	r0, r6
 8007af2:	4639      	mov	r1, r7
 8007af4:	f7f8 fffa 	bl	8000aec <__aeabi_dcmplt>
 8007af8:	b148      	cbz	r0, 8007b0e <_dtoa_r+0x186>
 8007afa:	4650      	mov	r0, sl
 8007afc:	f7f8 fd1a 	bl	8000534 <__aeabi_i2d>
 8007b00:	4632      	mov	r2, r6
 8007b02:	463b      	mov	r3, r7
 8007b04:	f7f8 ffe8 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b08:	b908      	cbnz	r0, 8007b0e <_dtoa_r+0x186>
 8007b0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007b0e:	f1ba 0f16 	cmp.w	sl, #22
 8007b12:	d854      	bhi.n	8007bbe <_dtoa_r+0x236>
 8007b14:	4b61      	ldr	r3, [pc, #388]	; (8007c9c <_dtoa_r+0x314>)
 8007b16:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b1e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007b22:	f7f8 ffe3 	bl	8000aec <__aeabi_dcmplt>
 8007b26:	2800      	cmp	r0, #0
 8007b28:	d04b      	beq.n	8007bc2 <_dtoa_r+0x23a>
 8007b2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007b2e:	2300      	movs	r3, #0
 8007b30:	930e      	str	r3, [sp, #56]	; 0x38
 8007b32:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007b34:	1b5d      	subs	r5, r3, r5
 8007b36:	1e6b      	subs	r3, r5, #1
 8007b38:	9304      	str	r3, [sp, #16]
 8007b3a:	bf43      	ittte	mi
 8007b3c:	2300      	movmi	r3, #0
 8007b3e:	f1c5 0801 	rsbmi	r8, r5, #1
 8007b42:	9304      	strmi	r3, [sp, #16]
 8007b44:	f04f 0800 	movpl.w	r8, #0
 8007b48:	f1ba 0f00 	cmp.w	sl, #0
 8007b4c:	db3b      	blt.n	8007bc6 <_dtoa_r+0x23e>
 8007b4e:	9b04      	ldr	r3, [sp, #16]
 8007b50:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007b54:	4453      	add	r3, sl
 8007b56:	9304      	str	r3, [sp, #16]
 8007b58:	2300      	movs	r3, #0
 8007b5a:	9306      	str	r3, [sp, #24]
 8007b5c:	9b05      	ldr	r3, [sp, #20]
 8007b5e:	2b09      	cmp	r3, #9
 8007b60:	d869      	bhi.n	8007c36 <_dtoa_r+0x2ae>
 8007b62:	2b05      	cmp	r3, #5
 8007b64:	bfc4      	itt	gt
 8007b66:	3b04      	subgt	r3, #4
 8007b68:	9305      	strgt	r3, [sp, #20]
 8007b6a:	9b05      	ldr	r3, [sp, #20]
 8007b6c:	f1a3 0302 	sub.w	r3, r3, #2
 8007b70:	bfcc      	ite	gt
 8007b72:	2500      	movgt	r5, #0
 8007b74:	2501      	movle	r5, #1
 8007b76:	2b03      	cmp	r3, #3
 8007b78:	d869      	bhi.n	8007c4e <_dtoa_r+0x2c6>
 8007b7a:	e8df f003 	tbb	[pc, r3]
 8007b7e:	4e2c      	.short	0x4e2c
 8007b80:	5a4c      	.short	0x5a4c
 8007b82:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007b86:	441d      	add	r5, r3
 8007b88:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007b8c:	2b20      	cmp	r3, #32
 8007b8e:	bfc1      	itttt	gt
 8007b90:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007b94:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007b98:	fa09 f303 	lslgt.w	r3, r9, r3
 8007b9c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007ba0:	bfda      	itte	le
 8007ba2:	f1c3 0320 	rsble	r3, r3, #32
 8007ba6:	fa06 f003 	lslle.w	r0, r6, r3
 8007baa:	4318      	orrgt	r0, r3
 8007bac:	f7f8 fcb2 	bl	8000514 <__aeabi_ui2d>
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	4606      	mov	r6, r0
 8007bb4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007bb8:	3d01      	subs	r5, #1
 8007bba:	9310      	str	r3, [sp, #64]	; 0x40
 8007bbc:	e771      	b.n	8007aa2 <_dtoa_r+0x11a>
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	e7b6      	b.n	8007b30 <_dtoa_r+0x1a8>
 8007bc2:	900e      	str	r0, [sp, #56]	; 0x38
 8007bc4:	e7b5      	b.n	8007b32 <_dtoa_r+0x1aa>
 8007bc6:	f1ca 0300 	rsb	r3, sl, #0
 8007bca:	9306      	str	r3, [sp, #24]
 8007bcc:	2300      	movs	r3, #0
 8007bce:	eba8 080a 	sub.w	r8, r8, sl
 8007bd2:	930d      	str	r3, [sp, #52]	; 0x34
 8007bd4:	e7c2      	b.n	8007b5c <_dtoa_r+0x1d4>
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	9308      	str	r3, [sp, #32]
 8007bda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	dc39      	bgt.n	8007c54 <_dtoa_r+0x2cc>
 8007be0:	f04f 0901 	mov.w	r9, #1
 8007be4:	f8cd 9004 	str.w	r9, [sp, #4]
 8007be8:	464b      	mov	r3, r9
 8007bea:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007bee:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	6042      	str	r2, [r0, #4]
 8007bf4:	2204      	movs	r2, #4
 8007bf6:	f102 0614 	add.w	r6, r2, #20
 8007bfa:	429e      	cmp	r6, r3
 8007bfc:	6841      	ldr	r1, [r0, #4]
 8007bfe:	d92f      	bls.n	8007c60 <_dtoa_r+0x2d8>
 8007c00:	4620      	mov	r0, r4
 8007c02:	f001 f849 	bl	8008c98 <_Balloc>
 8007c06:	9000      	str	r0, [sp, #0]
 8007c08:	2800      	cmp	r0, #0
 8007c0a:	d14b      	bne.n	8007ca4 <_dtoa_r+0x31c>
 8007c0c:	4b24      	ldr	r3, [pc, #144]	; (8007ca0 <_dtoa_r+0x318>)
 8007c0e:	4602      	mov	r2, r0
 8007c10:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007c14:	e6d1      	b.n	80079ba <_dtoa_r+0x32>
 8007c16:	2301      	movs	r3, #1
 8007c18:	e7de      	b.n	8007bd8 <_dtoa_r+0x250>
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	9308      	str	r3, [sp, #32]
 8007c1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c20:	eb0a 0903 	add.w	r9, sl, r3
 8007c24:	f109 0301 	add.w	r3, r9, #1
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	9301      	str	r3, [sp, #4]
 8007c2c:	bfb8      	it	lt
 8007c2e:	2301      	movlt	r3, #1
 8007c30:	e7dd      	b.n	8007bee <_dtoa_r+0x266>
 8007c32:	2301      	movs	r3, #1
 8007c34:	e7f2      	b.n	8007c1c <_dtoa_r+0x294>
 8007c36:	2501      	movs	r5, #1
 8007c38:	2300      	movs	r3, #0
 8007c3a:	9305      	str	r3, [sp, #20]
 8007c3c:	9508      	str	r5, [sp, #32]
 8007c3e:	f04f 39ff 	mov.w	r9, #4294967295
 8007c42:	2200      	movs	r2, #0
 8007c44:	f8cd 9004 	str.w	r9, [sp, #4]
 8007c48:	2312      	movs	r3, #18
 8007c4a:	9209      	str	r2, [sp, #36]	; 0x24
 8007c4c:	e7cf      	b.n	8007bee <_dtoa_r+0x266>
 8007c4e:	2301      	movs	r3, #1
 8007c50:	9308      	str	r3, [sp, #32]
 8007c52:	e7f4      	b.n	8007c3e <_dtoa_r+0x2b6>
 8007c54:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007c58:	f8cd 9004 	str.w	r9, [sp, #4]
 8007c5c:	464b      	mov	r3, r9
 8007c5e:	e7c6      	b.n	8007bee <_dtoa_r+0x266>
 8007c60:	3101      	adds	r1, #1
 8007c62:	6041      	str	r1, [r0, #4]
 8007c64:	0052      	lsls	r2, r2, #1
 8007c66:	e7c6      	b.n	8007bf6 <_dtoa_r+0x26e>
 8007c68:	636f4361 	.word	0x636f4361
 8007c6c:	3fd287a7 	.word	0x3fd287a7
 8007c70:	8b60c8b3 	.word	0x8b60c8b3
 8007c74:	3fc68a28 	.word	0x3fc68a28
 8007c78:	509f79fb 	.word	0x509f79fb
 8007c7c:	3fd34413 	.word	0x3fd34413
 8007c80:	0800bda6 	.word	0x0800bda6
 8007c84:	0800bdbd 	.word	0x0800bdbd
 8007c88:	7ff00000 	.word	0x7ff00000
 8007c8c:	0800bda2 	.word	0x0800bda2
 8007c90:	0800bd99 	.word	0x0800bd99
 8007c94:	0800bc1d 	.word	0x0800bc1d
 8007c98:	3ff80000 	.word	0x3ff80000
 8007c9c:	0800bf38 	.word	0x0800bf38
 8007ca0:	0800be1c 	.word	0x0800be1c
 8007ca4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ca6:	9a00      	ldr	r2, [sp, #0]
 8007ca8:	601a      	str	r2, [r3, #0]
 8007caa:	9b01      	ldr	r3, [sp, #4]
 8007cac:	2b0e      	cmp	r3, #14
 8007cae:	f200 80ad 	bhi.w	8007e0c <_dtoa_r+0x484>
 8007cb2:	2d00      	cmp	r5, #0
 8007cb4:	f000 80aa 	beq.w	8007e0c <_dtoa_r+0x484>
 8007cb8:	f1ba 0f00 	cmp.w	sl, #0
 8007cbc:	dd36      	ble.n	8007d2c <_dtoa_r+0x3a4>
 8007cbe:	4ac3      	ldr	r2, [pc, #780]	; (8007fcc <_dtoa_r+0x644>)
 8007cc0:	f00a 030f 	and.w	r3, sl, #15
 8007cc4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007cc8:	ed93 7b00 	vldr	d7, [r3]
 8007ccc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007cd0:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007cd4:	eeb0 8a47 	vmov.f32	s16, s14
 8007cd8:	eef0 8a67 	vmov.f32	s17, s15
 8007cdc:	d016      	beq.n	8007d0c <_dtoa_r+0x384>
 8007cde:	4bbc      	ldr	r3, [pc, #752]	; (8007fd0 <_dtoa_r+0x648>)
 8007ce0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007ce4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ce8:	f7f8 fdb8 	bl	800085c <__aeabi_ddiv>
 8007cec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007cf0:	f007 070f 	and.w	r7, r7, #15
 8007cf4:	2503      	movs	r5, #3
 8007cf6:	4eb6      	ldr	r6, [pc, #728]	; (8007fd0 <_dtoa_r+0x648>)
 8007cf8:	b957      	cbnz	r7, 8007d10 <_dtoa_r+0x388>
 8007cfa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cfe:	ec53 2b18 	vmov	r2, r3, d8
 8007d02:	f7f8 fdab 	bl	800085c <__aeabi_ddiv>
 8007d06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d0a:	e029      	b.n	8007d60 <_dtoa_r+0x3d8>
 8007d0c:	2502      	movs	r5, #2
 8007d0e:	e7f2      	b.n	8007cf6 <_dtoa_r+0x36e>
 8007d10:	07f9      	lsls	r1, r7, #31
 8007d12:	d508      	bpl.n	8007d26 <_dtoa_r+0x39e>
 8007d14:	ec51 0b18 	vmov	r0, r1, d8
 8007d18:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007d1c:	f7f8 fc74 	bl	8000608 <__aeabi_dmul>
 8007d20:	ec41 0b18 	vmov	d8, r0, r1
 8007d24:	3501      	adds	r5, #1
 8007d26:	107f      	asrs	r7, r7, #1
 8007d28:	3608      	adds	r6, #8
 8007d2a:	e7e5      	b.n	8007cf8 <_dtoa_r+0x370>
 8007d2c:	f000 80a6 	beq.w	8007e7c <_dtoa_r+0x4f4>
 8007d30:	f1ca 0600 	rsb	r6, sl, #0
 8007d34:	4ba5      	ldr	r3, [pc, #660]	; (8007fcc <_dtoa_r+0x644>)
 8007d36:	4fa6      	ldr	r7, [pc, #664]	; (8007fd0 <_dtoa_r+0x648>)
 8007d38:	f006 020f 	and.w	r2, r6, #15
 8007d3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d44:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007d48:	f7f8 fc5e 	bl	8000608 <__aeabi_dmul>
 8007d4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d50:	1136      	asrs	r6, r6, #4
 8007d52:	2300      	movs	r3, #0
 8007d54:	2502      	movs	r5, #2
 8007d56:	2e00      	cmp	r6, #0
 8007d58:	f040 8085 	bne.w	8007e66 <_dtoa_r+0x4de>
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d1d2      	bne.n	8007d06 <_dtoa_r+0x37e>
 8007d60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	f000 808c 	beq.w	8007e80 <_dtoa_r+0x4f8>
 8007d68:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007d6c:	4b99      	ldr	r3, [pc, #612]	; (8007fd4 <_dtoa_r+0x64c>)
 8007d6e:	2200      	movs	r2, #0
 8007d70:	4630      	mov	r0, r6
 8007d72:	4639      	mov	r1, r7
 8007d74:	f7f8 feba 	bl	8000aec <__aeabi_dcmplt>
 8007d78:	2800      	cmp	r0, #0
 8007d7a:	f000 8081 	beq.w	8007e80 <_dtoa_r+0x4f8>
 8007d7e:	9b01      	ldr	r3, [sp, #4]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d07d      	beq.n	8007e80 <_dtoa_r+0x4f8>
 8007d84:	f1b9 0f00 	cmp.w	r9, #0
 8007d88:	dd3c      	ble.n	8007e04 <_dtoa_r+0x47c>
 8007d8a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007d8e:	9307      	str	r3, [sp, #28]
 8007d90:	2200      	movs	r2, #0
 8007d92:	4b91      	ldr	r3, [pc, #580]	; (8007fd8 <_dtoa_r+0x650>)
 8007d94:	4630      	mov	r0, r6
 8007d96:	4639      	mov	r1, r7
 8007d98:	f7f8 fc36 	bl	8000608 <__aeabi_dmul>
 8007d9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007da0:	3501      	adds	r5, #1
 8007da2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007da6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007daa:	4628      	mov	r0, r5
 8007dac:	f7f8 fbc2 	bl	8000534 <__aeabi_i2d>
 8007db0:	4632      	mov	r2, r6
 8007db2:	463b      	mov	r3, r7
 8007db4:	f7f8 fc28 	bl	8000608 <__aeabi_dmul>
 8007db8:	4b88      	ldr	r3, [pc, #544]	; (8007fdc <_dtoa_r+0x654>)
 8007dba:	2200      	movs	r2, #0
 8007dbc:	f7f8 fa6e 	bl	800029c <__adddf3>
 8007dc0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007dc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007dc8:	9303      	str	r3, [sp, #12]
 8007dca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d15c      	bne.n	8007e8a <_dtoa_r+0x502>
 8007dd0:	4b83      	ldr	r3, [pc, #524]	; (8007fe0 <_dtoa_r+0x658>)
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	4630      	mov	r0, r6
 8007dd6:	4639      	mov	r1, r7
 8007dd8:	f7f8 fa5e 	bl	8000298 <__aeabi_dsub>
 8007ddc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007de0:	4606      	mov	r6, r0
 8007de2:	460f      	mov	r7, r1
 8007de4:	f7f8 fea0 	bl	8000b28 <__aeabi_dcmpgt>
 8007de8:	2800      	cmp	r0, #0
 8007dea:	f040 8296 	bne.w	800831a <_dtoa_r+0x992>
 8007dee:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007df2:	4630      	mov	r0, r6
 8007df4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007df8:	4639      	mov	r1, r7
 8007dfa:	f7f8 fe77 	bl	8000aec <__aeabi_dcmplt>
 8007dfe:	2800      	cmp	r0, #0
 8007e00:	f040 8288 	bne.w	8008314 <_dtoa_r+0x98c>
 8007e04:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007e08:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007e0c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	f2c0 8158 	blt.w	80080c4 <_dtoa_r+0x73c>
 8007e14:	f1ba 0f0e 	cmp.w	sl, #14
 8007e18:	f300 8154 	bgt.w	80080c4 <_dtoa_r+0x73c>
 8007e1c:	4b6b      	ldr	r3, [pc, #428]	; (8007fcc <_dtoa_r+0x644>)
 8007e1e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007e22:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	f280 80e3 	bge.w	8007ff4 <_dtoa_r+0x66c>
 8007e2e:	9b01      	ldr	r3, [sp, #4]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	f300 80df 	bgt.w	8007ff4 <_dtoa_r+0x66c>
 8007e36:	f040 826d 	bne.w	8008314 <_dtoa_r+0x98c>
 8007e3a:	4b69      	ldr	r3, [pc, #420]	; (8007fe0 <_dtoa_r+0x658>)
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	4640      	mov	r0, r8
 8007e40:	4649      	mov	r1, r9
 8007e42:	f7f8 fbe1 	bl	8000608 <__aeabi_dmul>
 8007e46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e4a:	f7f8 fe63 	bl	8000b14 <__aeabi_dcmpge>
 8007e4e:	9e01      	ldr	r6, [sp, #4]
 8007e50:	4637      	mov	r7, r6
 8007e52:	2800      	cmp	r0, #0
 8007e54:	f040 8243 	bne.w	80082de <_dtoa_r+0x956>
 8007e58:	9d00      	ldr	r5, [sp, #0]
 8007e5a:	2331      	movs	r3, #49	; 0x31
 8007e5c:	f805 3b01 	strb.w	r3, [r5], #1
 8007e60:	f10a 0a01 	add.w	sl, sl, #1
 8007e64:	e23f      	b.n	80082e6 <_dtoa_r+0x95e>
 8007e66:	07f2      	lsls	r2, r6, #31
 8007e68:	d505      	bpl.n	8007e76 <_dtoa_r+0x4ee>
 8007e6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e6e:	f7f8 fbcb 	bl	8000608 <__aeabi_dmul>
 8007e72:	3501      	adds	r5, #1
 8007e74:	2301      	movs	r3, #1
 8007e76:	1076      	asrs	r6, r6, #1
 8007e78:	3708      	adds	r7, #8
 8007e7a:	e76c      	b.n	8007d56 <_dtoa_r+0x3ce>
 8007e7c:	2502      	movs	r5, #2
 8007e7e:	e76f      	b.n	8007d60 <_dtoa_r+0x3d8>
 8007e80:	9b01      	ldr	r3, [sp, #4]
 8007e82:	f8cd a01c 	str.w	sl, [sp, #28]
 8007e86:	930c      	str	r3, [sp, #48]	; 0x30
 8007e88:	e78d      	b.n	8007da6 <_dtoa_r+0x41e>
 8007e8a:	9900      	ldr	r1, [sp, #0]
 8007e8c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007e8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e90:	4b4e      	ldr	r3, [pc, #312]	; (8007fcc <_dtoa_r+0x644>)
 8007e92:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007e96:	4401      	add	r1, r0
 8007e98:	9102      	str	r1, [sp, #8]
 8007e9a:	9908      	ldr	r1, [sp, #32]
 8007e9c:	eeb0 8a47 	vmov.f32	s16, s14
 8007ea0:	eef0 8a67 	vmov.f32	s17, s15
 8007ea4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ea8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007eac:	2900      	cmp	r1, #0
 8007eae:	d045      	beq.n	8007f3c <_dtoa_r+0x5b4>
 8007eb0:	494c      	ldr	r1, [pc, #304]	; (8007fe4 <_dtoa_r+0x65c>)
 8007eb2:	2000      	movs	r0, #0
 8007eb4:	f7f8 fcd2 	bl	800085c <__aeabi_ddiv>
 8007eb8:	ec53 2b18 	vmov	r2, r3, d8
 8007ebc:	f7f8 f9ec 	bl	8000298 <__aeabi_dsub>
 8007ec0:	9d00      	ldr	r5, [sp, #0]
 8007ec2:	ec41 0b18 	vmov	d8, r0, r1
 8007ec6:	4639      	mov	r1, r7
 8007ec8:	4630      	mov	r0, r6
 8007eca:	f7f8 fe4d 	bl	8000b68 <__aeabi_d2iz>
 8007ece:	900c      	str	r0, [sp, #48]	; 0x30
 8007ed0:	f7f8 fb30 	bl	8000534 <__aeabi_i2d>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	460b      	mov	r3, r1
 8007ed8:	4630      	mov	r0, r6
 8007eda:	4639      	mov	r1, r7
 8007edc:	f7f8 f9dc 	bl	8000298 <__aeabi_dsub>
 8007ee0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ee2:	3330      	adds	r3, #48	; 0x30
 8007ee4:	f805 3b01 	strb.w	r3, [r5], #1
 8007ee8:	ec53 2b18 	vmov	r2, r3, d8
 8007eec:	4606      	mov	r6, r0
 8007eee:	460f      	mov	r7, r1
 8007ef0:	f7f8 fdfc 	bl	8000aec <__aeabi_dcmplt>
 8007ef4:	2800      	cmp	r0, #0
 8007ef6:	d165      	bne.n	8007fc4 <_dtoa_r+0x63c>
 8007ef8:	4632      	mov	r2, r6
 8007efa:	463b      	mov	r3, r7
 8007efc:	4935      	ldr	r1, [pc, #212]	; (8007fd4 <_dtoa_r+0x64c>)
 8007efe:	2000      	movs	r0, #0
 8007f00:	f7f8 f9ca 	bl	8000298 <__aeabi_dsub>
 8007f04:	ec53 2b18 	vmov	r2, r3, d8
 8007f08:	f7f8 fdf0 	bl	8000aec <__aeabi_dcmplt>
 8007f0c:	2800      	cmp	r0, #0
 8007f0e:	f040 80b9 	bne.w	8008084 <_dtoa_r+0x6fc>
 8007f12:	9b02      	ldr	r3, [sp, #8]
 8007f14:	429d      	cmp	r5, r3
 8007f16:	f43f af75 	beq.w	8007e04 <_dtoa_r+0x47c>
 8007f1a:	4b2f      	ldr	r3, [pc, #188]	; (8007fd8 <_dtoa_r+0x650>)
 8007f1c:	ec51 0b18 	vmov	r0, r1, d8
 8007f20:	2200      	movs	r2, #0
 8007f22:	f7f8 fb71 	bl	8000608 <__aeabi_dmul>
 8007f26:	4b2c      	ldr	r3, [pc, #176]	; (8007fd8 <_dtoa_r+0x650>)
 8007f28:	ec41 0b18 	vmov	d8, r0, r1
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	4630      	mov	r0, r6
 8007f30:	4639      	mov	r1, r7
 8007f32:	f7f8 fb69 	bl	8000608 <__aeabi_dmul>
 8007f36:	4606      	mov	r6, r0
 8007f38:	460f      	mov	r7, r1
 8007f3a:	e7c4      	b.n	8007ec6 <_dtoa_r+0x53e>
 8007f3c:	ec51 0b17 	vmov	r0, r1, d7
 8007f40:	f7f8 fb62 	bl	8000608 <__aeabi_dmul>
 8007f44:	9b02      	ldr	r3, [sp, #8]
 8007f46:	9d00      	ldr	r5, [sp, #0]
 8007f48:	930c      	str	r3, [sp, #48]	; 0x30
 8007f4a:	ec41 0b18 	vmov	d8, r0, r1
 8007f4e:	4639      	mov	r1, r7
 8007f50:	4630      	mov	r0, r6
 8007f52:	f7f8 fe09 	bl	8000b68 <__aeabi_d2iz>
 8007f56:	9011      	str	r0, [sp, #68]	; 0x44
 8007f58:	f7f8 faec 	bl	8000534 <__aeabi_i2d>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	460b      	mov	r3, r1
 8007f60:	4630      	mov	r0, r6
 8007f62:	4639      	mov	r1, r7
 8007f64:	f7f8 f998 	bl	8000298 <__aeabi_dsub>
 8007f68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007f6a:	3330      	adds	r3, #48	; 0x30
 8007f6c:	f805 3b01 	strb.w	r3, [r5], #1
 8007f70:	9b02      	ldr	r3, [sp, #8]
 8007f72:	429d      	cmp	r5, r3
 8007f74:	4606      	mov	r6, r0
 8007f76:	460f      	mov	r7, r1
 8007f78:	f04f 0200 	mov.w	r2, #0
 8007f7c:	d134      	bne.n	8007fe8 <_dtoa_r+0x660>
 8007f7e:	4b19      	ldr	r3, [pc, #100]	; (8007fe4 <_dtoa_r+0x65c>)
 8007f80:	ec51 0b18 	vmov	r0, r1, d8
 8007f84:	f7f8 f98a 	bl	800029c <__adddf3>
 8007f88:	4602      	mov	r2, r0
 8007f8a:	460b      	mov	r3, r1
 8007f8c:	4630      	mov	r0, r6
 8007f8e:	4639      	mov	r1, r7
 8007f90:	f7f8 fdca 	bl	8000b28 <__aeabi_dcmpgt>
 8007f94:	2800      	cmp	r0, #0
 8007f96:	d175      	bne.n	8008084 <_dtoa_r+0x6fc>
 8007f98:	ec53 2b18 	vmov	r2, r3, d8
 8007f9c:	4911      	ldr	r1, [pc, #68]	; (8007fe4 <_dtoa_r+0x65c>)
 8007f9e:	2000      	movs	r0, #0
 8007fa0:	f7f8 f97a 	bl	8000298 <__aeabi_dsub>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	460b      	mov	r3, r1
 8007fa8:	4630      	mov	r0, r6
 8007faa:	4639      	mov	r1, r7
 8007fac:	f7f8 fd9e 	bl	8000aec <__aeabi_dcmplt>
 8007fb0:	2800      	cmp	r0, #0
 8007fb2:	f43f af27 	beq.w	8007e04 <_dtoa_r+0x47c>
 8007fb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007fb8:	1e6b      	subs	r3, r5, #1
 8007fba:	930c      	str	r3, [sp, #48]	; 0x30
 8007fbc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007fc0:	2b30      	cmp	r3, #48	; 0x30
 8007fc2:	d0f8      	beq.n	8007fb6 <_dtoa_r+0x62e>
 8007fc4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007fc8:	e04a      	b.n	8008060 <_dtoa_r+0x6d8>
 8007fca:	bf00      	nop
 8007fcc:	0800bf38 	.word	0x0800bf38
 8007fd0:	0800bf10 	.word	0x0800bf10
 8007fd4:	3ff00000 	.word	0x3ff00000
 8007fd8:	40240000 	.word	0x40240000
 8007fdc:	401c0000 	.word	0x401c0000
 8007fe0:	40140000 	.word	0x40140000
 8007fe4:	3fe00000 	.word	0x3fe00000
 8007fe8:	4baf      	ldr	r3, [pc, #700]	; (80082a8 <_dtoa_r+0x920>)
 8007fea:	f7f8 fb0d 	bl	8000608 <__aeabi_dmul>
 8007fee:	4606      	mov	r6, r0
 8007ff0:	460f      	mov	r7, r1
 8007ff2:	e7ac      	b.n	8007f4e <_dtoa_r+0x5c6>
 8007ff4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007ff8:	9d00      	ldr	r5, [sp, #0]
 8007ffa:	4642      	mov	r2, r8
 8007ffc:	464b      	mov	r3, r9
 8007ffe:	4630      	mov	r0, r6
 8008000:	4639      	mov	r1, r7
 8008002:	f7f8 fc2b 	bl	800085c <__aeabi_ddiv>
 8008006:	f7f8 fdaf 	bl	8000b68 <__aeabi_d2iz>
 800800a:	9002      	str	r0, [sp, #8]
 800800c:	f7f8 fa92 	bl	8000534 <__aeabi_i2d>
 8008010:	4642      	mov	r2, r8
 8008012:	464b      	mov	r3, r9
 8008014:	f7f8 faf8 	bl	8000608 <__aeabi_dmul>
 8008018:	4602      	mov	r2, r0
 800801a:	460b      	mov	r3, r1
 800801c:	4630      	mov	r0, r6
 800801e:	4639      	mov	r1, r7
 8008020:	f7f8 f93a 	bl	8000298 <__aeabi_dsub>
 8008024:	9e02      	ldr	r6, [sp, #8]
 8008026:	9f01      	ldr	r7, [sp, #4]
 8008028:	3630      	adds	r6, #48	; 0x30
 800802a:	f805 6b01 	strb.w	r6, [r5], #1
 800802e:	9e00      	ldr	r6, [sp, #0]
 8008030:	1bae      	subs	r6, r5, r6
 8008032:	42b7      	cmp	r7, r6
 8008034:	4602      	mov	r2, r0
 8008036:	460b      	mov	r3, r1
 8008038:	d137      	bne.n	80080aa <_dtoa_r+0x722>
 800803a:	f7f8 f92f 	bl	800029c <__adddf3>
 800803e:	4642      	mov	r2, r8
 8008040:	464b      	mov	r3, r9
 8008042:	4606      	mov	r6, r0
 8008044:	460f      	mov	r7, r1
 8008046:	f7f8 fd6f 	bl	8000b28 <__aeabi_dcmpgt>
 800804a:	b9c8      	cbnz	r0, 8008080 <_dtoa_r+0x6f8>
 800804c:	4642      	mov	r2, r8
 800804e:	464b      	mov	r3, r9
 8008050:	4630      	mov	r0, r6
 8008052:	4639      	mov	r1, r7
 8008054:	f7f8 fd40 	bl	8000ad8 <__aeabi_dcmpeq>
 8008058:	b110      	cbz	r0, 8008060 <_dtoa_r+0x6d8>
 800805a:	9b02      	ldr	r3, [sp, #8]
 800805c:	07d9      	lsls	r1, r3, #31
 800805e:	d40f      	bmi.n	8008080 <_dtoa_r+0x6f8>
 8008060:	4620      	mov	r0, r4
 8008062:	4659      	mov	r1, fp
 8008064:	f000 fe58 	bl	8008d18 <_Bfree>
 8008068:	2300      	movs	r3, #0
 800806a:	702b      	strb	r3, [r5, #0]
 800806c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800806e:	f10a 0001 	add.w	r0, sl, #1
 8008072:	6018      	str	r0, [r3, #0]
 8008074:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008076:	2b00      	cmp	r3, #0
 8008078:	f43f acd8 	beq.w	8007a2c <_dtoa_r+0xa4>
 800807c:	601d      	str	r5, [r3, #0]
 800807e:	e4d5      	b.n	8007a2c <_dtoa_r+0xa4>
 8008080:	f8cd a01c 	str.w	sl, [sp, #28]
 8008084:	462b      	mov	r3, r5
 8008086:	461d      	mov	r5, r3
 8008088:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800808c:	2a39      	cmp	r2, #57	; 0x39
 800808e:	d108      	bne.n	80080a2 <_dtoa_r+0x71a>
 8008090:	9a00      	ldr	r2, [sp, #0]
 8008092:	429a      	cmp	r2, r3
 8008094:	d1f7      	bne.n	8008086 <_dtoa_r+0x6fe>
 8008096:	9a07      	ldr	r2, [sp, #28]
 8008098:	9900      	ldr	r1, [sp, #0]
 800809a:	3201      	adds	r2, #1
 800809c:	9207      	str	r2, [sp, #28]
 800809e:	2230      	movs	r2, #48	; 0x30
 80080a0:	700a      	strb	r2, [r1, #0]
 80080a2:	781a      	ldrb	r2, [r3, #0]
 80080a4:	3201      	adds	r2, #1
 80080a6:	701a      	strb	r2, [r3, #0]
 80080a8:	e78c      	b.n	8007fc4 <_dtoa_r+0x63c>
 80080aa:	4b7f      	ldr	r3, [pc, #508]	; (80082a8 <_dtoa_r+0x920>)
 80080ac:	2200      	movs	r2, #0
 80080ae:	f7f8 faab 	bl	8000608 <__aeabi_dmul>
 80080b2:	2200      	movs	r2, #0
 80080b4:	2300      	movs	r3, #0
 80080b6:	4606      	mov	r6, r0
 80080b8:	460f      	mov	r7, r1
 80080ba:	f7f8 fd0d 	bl	8000ad8 <__aeabi_dcmpeq>
 80080be:	2800      	cmp	r0, #0
 80080c0:	d09b      	beq.n	8007ffa <_dtoa_r+0x672>
 80080c2:	e7cd      	b.n	8008060 <_dtoa_r+0x6d8>
 80080c4:	9a08      	ldr	r2, [sp, #32]
 80080c6:	2a00      	cmp	r2, #0
 80080c8:	f000 80c4 	beq.w	8008254 <_dtoa_r+0x8cc>
 80080cc:	9a05      	ldr	r2, [sp, #20]
 80080ce:	2a01      	cmp	r2, #1
 80080d0:	f300 80a8 	bgt.w	8008224 <_dtoa_r+0x89c>
 80080d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80080d6:	2a00      	cmp	r2, #0
 80080d8:	f000 80a0 	beq.w	800821c <_dtoa_r+0x894>
 80080dc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80080e0:	9e06      	ldr	r6, [sp, #24]
 80080e2:	4645      	mov	r5, r8
 80080e4:	9a04      	ldr	r2, [sp, #16]
 80080e6:	2101      	movs	r1, #1
 80080e8:	441a      	add	r2, r3
 80080ea:	4620      	mov	r0, r4
 80080ec:	4498      	add	r8, r3
 80080ee:	9204      	str	r2, [sp, #16]
 80080f0:	f000 ff18 	bl	8008f24 <__i2b>
 80080f4:	4607      	mov	r7, r0
 80080f6:	2d00      	cmp	r5, #0
 80080f8:	dd0b      	ble.n	8008112 <_dtoa_r+0x78a>
 80080fa:	9b04      	ldr	r3, [sp, #16]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	dd08      	ble.n	8008112 <_dtoa_r+0x78a>
 8008100:	42ab      	cmp	r3, r5
 8008102:	9a04      	ldr	r2, [sp, #16]
 8008104:	bfa8      	it	ge
 8008106:	462b      	movge	r3, r5
 8008108:	eba8 0803 	sub.w	r8, r8, r3
 800810c:	1aed      	subs	r5, r5, r3
 800810e:	1ad3      	subs	r3, r2, r3
 8008110:	9304      	str	r3, [sp, #16]
 8008112:	9b06      	ldr	r3, [sp, #24]
 8008114:	b1fb      	cbz	r3, 8008156 <_dtoa_r+0x7ce>
 8008116:	9b08      	ldr	r3, [sp, #32]
 8008118:	2b00      	cmp	r3, #0
 800811a:	f000 809f 	beq.w	800825c <_dtoa_r+0x8d4>
 800811e:	2e00      	cmp	r6, #0
 8008120:	dd11      	ble.n	8008146 <_dtoa_r+0x7be>
 8008122:	4639      	mov	r1, r7
 8008124:	4632      	mov	r2, r6
 8008126:	4620      	mov	r0, r4
 8008128:	f000 ffb8 	bl	800909c <__pow5mult>
 800812c:	465a      	mov	r2, fp
 800812e:	4601      	mov	r1, r0
 8008130:	4607      	mov	r7, r0
 8008132:	4620      	mov	r0, r4
 8008134:	f000 ff0c 	bl	8008f50 <__multiply>
 8008138:	4659      	mov	r1, fp
 800813a:	9007      	str	r0, [sp, #28]
 800813c:	4620      	mov	r0, r4
 800813e:	f000 fdeb 	bl	8008d18 <_Bfree>
 8008142:	9b07      	ldr	r3, [sp, #28]
 8008144:	469b      	mov	fp, r3
 8008146:	9b06      	ldr	r3, [sp, #24]
 8008148:	1b9a      	subs	r2, r3, r6
 800814a:	d004      	beq.n	8008156 <_dtoa_r+0x7ce>
 800814c:	4659      	mov	r1, fp
 800814e:	4620      	mov	r0, r4
 8008150:	f000 ffa4 	bl	800909c <__pow5mult>
 8008154:	4683      	mov	fp, r0
 8008156:	2101      	movs	r1, #1
 8008158:	4620      	mov	r0, r4
 800815a:	f000 fee3 	bl	8008f24 <__i2b>
 800815e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008160:	2b00      	cmp	r3, #0
 8008162:	4606      	mov	r6, r0
 8008164:	dd7c      	ble.n	8008260 <_dtoa_r+0x8d8>
 8008166:	461a      	mov	r2, r3
 8008168:	4601      	mov	r1, r0
 800816a:	4620      	mov	r0, r4
 800816c:	f000 ff96 	bl	800909c <__pow5mult>
 8008170:	9b05      	ldr	r3, [sp, #20]
 8008172:	2b01      	cmp	r3, #1
 8008174:	4606      	mov	r6, r0
 8008176:	dd76      	ble.n	8008266 <_dtoa_r+0x8de>
 8008178:	2300      	movs	r3, #0
 800817a:	9306      	str	r3, [sp, #24]
 800817c:	6933      	ldr	r3, [r6, #16]
 800817e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008182:	6918      	ldr	r0, [r3, #16]
 8008184:	f000 fe7e 	bl	8008e84 <__hi0bits>
 8008188:	f1c0 0020 	rsb	r0, r0, #32
 800818c:	9b04      	ldr	r3, [sp, #16]
 800818e:	4418      	add	r0, r3
 8008190:	f010 001f 	ands.w	r0, r0, #31
 8008194:	f000 8086 	beq.w	80082a4 <_dtoa_r+0x91c>
 8008198:	f1c0 0320 	rsb	r3, r0, #32
 800819c:	2b04      	cmp	r3, #4
 800819e:	dd7f      	ble.n	80082a0 <_dtoa_r+0x918>
 80081a0:	f1c0 001c 	rsb	r0, r0, #28
 80081a4:	9b04      	ldr	r3, [sp, #16]
 80081a6:	4403      	add	r3, r0
 80081a8:	4480      	add	r8, r0
 80081aa:	4405      	add	r5, r0
 80081ac:	9304      	str	r3, [sp, #16]
 80081ae:	f1b8 0f00 	cmp.w	r8, #0
 80081b2:	dd05      	ble.n	80081c0 <_dtoa_r+0x838>
 80081b4:	4659      	mov	r1, fp
 80081b6:	4642      	mov	r2, r8
 80081b8:	4620      	mov	r0, r4
 80081ba:	f000 ffc9 	bl	8009150 <__lshift>
 80081be:	4683      	mov	fp, r0
 80081c0:	9b04      	ldr	r3, [sp, #16]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	dd05      	ble.n	80081d2 <_dtoa_r+0x84a>
 80081c6:	4631      	mov	r1, r6
 80081c8:	461a      	mov	r2, r3
 80081ca:	4620      	mov	r0, r4
 80081cc:	f000 ffc0 	bl	8009150 <__lshift>
 80081d0:	4606      	mov	r6, r0
 80081d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d069      	beq.n	80082ac <_dtoa_r+0x924>
 80081d8:	4631      	mov	r1, r6
 80081da:	4658      	mov	r0, fp
 80081dc:	f001 f824 	bl	8009228 <__mcmp>
 80081e0:	2800      	cmp	r0, #0
 80081e2:	da63      	bge.n	80082ac <_dtoa_r+0x924>
 80081e4:	2300      	movs	r3, #0
 80081e6:	4659      	mov	r1, fp
 80081e8:	220a      	movs	r2, #10
 80081ea:	4620      	mov	r0, r4
 80081ec:	f000 fdb6 	bl	8008d5c <__multadd>
 80081f0:	9b08      	ldr	r3, [sp, #32]
 80081f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80081f6:	4683      	mov	fp, r0
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	f000 818f 	beq.w	800851c <_dtoa_r+0xb94>
 80081fe:	4639      	mov	r1, r7
 8008200:	2300      	movs	r3, #0
 8008202:	220a      	movs	r2, #10
 8008204:	4620      	mov	r0, r4
 8008206:	f000 fda9 	bl	8008d5c <__multadd>
 800820a:	f1b9 0f00 	cmp.w	r9, #0
 800820e:	4607      	mov	r7, r0
 8008210:	f300 808e 	bgt.w	8008330 <_dtoa_r+0x9a8>
 8008214:	9b05      	ldr	r3, [sp, #20]
 8008216:	2b02      	cmp	r3, #2
 8008218:	dc50      	bgt.n	80082bc <_dtoa_r+0x934>
 800821a:	e089      	b.n	8008330 <_dtoa_r+0x9a8>
 800821c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800821e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008222:	e75d      	b.n	80080e0 <_dtoa_r+0x758>
 8008224:	9b01      	ldr	r3, [sp, #4]
 8008226:	1e5e      	subs	r6, r3, #1
 8008228:	9b06      	ldr	r3, [sp, #24]
 800822a:	42b3      	cmp	r3, r6
 800822c:	bfbf      	itttt	lt
 800822e:	9b06      	ldrlt	r3, [sp, #24]
 8008230:	9606      	strlt	r6, [sp, #24]
 8008232:	1af2      	sublt	r2, r6, r3
 8008234:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008236:	bfb6      	itet	lt
 8008238:	189b      	addlt	r3, r3, r2
 800823a:	1b9e      	subge	r6, r3, r6
 800823c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800823e:	9b01      	ldr	r3, [sp, #4]
 8008240:	bfb8      	it	lt
 8008242:	2600      	movlt	r6, #0
 8008244:	2b00      	cmp	r3, #0
 8008246:	bfb5      	itete	lt
 8008248:	eba8 0503 	sublt.w	r5, r8, r3
 800824c:	9b01      	ldrge	r3, [sp, #4]
 800824e:	2300      	movlt	r3, #0
 8008250:	4645      	movge	r5, r8
 8008252:	e747      	b.n	80080e4 <_dtoa_r+0x75c>
 8008254:	9e06      	ldr	r6, [sp, #24]
 8008256:	9f08      	ldr	r7, [sp, #32]
 8008258:	4645      	mov	r5, r8
 800825a:	e74c      	b.n	80080f6 <_dtoa_r+0x76e>
 800825c:	9a06      	ldr	r2, [sp, #24]
 800825e:	e775      	b.n	800814c <_dtoa_r+0x7c4>
 8008260:	9b05      	ldr	r3, [sp, #20]
 8008262:	2b01      	cmp	r3, #1
 8008264:	dc18      	bgt.n	8008298 <_dtoa_r+0x910>
 8008266:	9b02      	ldr	r3, [sp, #8]
 8008268:	b9b3      	cbnz	r3, 8008298 <_dtoa_r+0x910>
 800826a:	9b03      	ldr	r3, [sp, #12]
 800826c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008270:	b9a3      	cbnz	r3, 800829c <_dtoa_r+0x914>
 8008272:	9b03      	ldr	r3, [sp, #12]
 8008274:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008278:	0d1b      	lsrs	r3, r3, #20
 800827a:	051b      	lsls	r3, r3, #20
 800827c:	b12b      	cbz	r3, 800828a <_dtoa_r+0x902>
 800827e:	9b04      	ldr	r3, [sp, #16]
 8008280:	3301      	adds	r3, #1
 8008282:	9304      	str	r3, [sp, #16]
 8008284:	f108 0801 	add.w	r8, r8, #1
 8008288:	2301      	movs	r3, #1
 800828a:	9306      	str	r3, [sp, #24]
 800828c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800828e:	2b00      	cmp	r3, #0
 8008290:	f47f af74 	bne.w	800817c <_dtoa_r+0x7f4>
 8008294:	2001      	movs	r0, #1
 8008296:	e779      	b.n	800818c <_dtoa_r+0x804>
 8008298:	2300      	movs	r3, #0
 800829a:	e7f6      	b.n	800828a <_dtoa_r+0x902>
 800829c:	9b02      	ldr	r3, [sp, #8]
 800829e:	e7f4      	b.n	800828a <_dtoa_r+0x902>
 80082a0:	d085      	beq.n	80081ae <_dtoa_r+0x826>
 80082a2:	4618      	mov	r0, r3
 80082a4:	301c      	adds	r0, #28
 80082a6:	e77d      	b.n	80081a4 <_dtoa_r+0x81c>
 80082a8:	40240000 	.word	0x40240000
 80082ac:	9b01      	ldr	r3, [sp, #4]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	dc38      	bgt.n	8008324 <_dtoa_r+0x99c>
 80082b2:	9b05      	ldr	r3, [sp, #20]
 80082b4:	2b02      	cmp	r3, #2
 80082b6:	dd35      	ble.n	8008324 <_dtoa_r+0x99c>
 80082b8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80082bc:	f1b9 0f00 	cmp.w	r9, #0
 80082c0:	d10d      	bne.n	80082de <_dtoa_r+0x956>
 80082c2:	4631      	mov	r1, r6
 80082c4:	464b      	mov	r3, r9
 80082c6:	2205      	movs	r2, #5
 80082c8:	4620      	mov	r0, r4
 80082ca:	f000 fd47 	bl	8008d5c <__multadd>
 80082ce:	4601      	mov	r1, r0
 80082d0:	4606      	mov	r6, r0
 80082d2:	4658      	mov	r0, fp
 80082d4:	f000 ffa8 	bl	8009228 <__mcmp>
 80082d8:	2800      	cmp	r0, #0
 80082da:	f73f adbd 	bgt.w	8007e58 <_dtoa_r+0x4d0>
 80082de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082e0:	9d00      	ldr	r5, [sp, #0]
 80082e2:	ea6f 0a03 	mvn.w	sl, r3
 80082e6:	f04f 0800 	mov.w	r8, #0
 80082ea:	4631      	mov	r1, r6
 80082ec:	4620      	mov	r0, r4
 80082ee:	f000 fd13 	bl	8008d18 <_Bfree>
 80082f2:	2f00      	cmp	r7, #0
 80082f4:	f43f aeb4 	beq.w	8008060 <_dtoa_r+0x6d8>
 80082f8:	f1b8 0f00 	cmp.w	r8, #0
 80082fc:	d005      	beq.n	800830a <_dtoa_r+0x982>
 80082fe:	45b8      	cmp	r8, r7
 8008300:	d003      	beq.n	800830a <_dtoa_r+0x982>
 8008302:	4641      	mov	r1, r8
 8008304:	4620      	mov	r0, r4
 8008306:	f000 fd07 	bl	8008d18 <_Bfree>
 800830a:	4639      	mov	r1, r7
 800830c:	4620      	mov	r0, r4
 800830e:	f000 fd03 	bl	8008d18 <_Bfree>
 8008312:	e6a5      	b.n	8008060 <_dtoa_r+0x6d8>
 8008314:	2600      	movs	r6, #0
 8008316:	4637      	mov	r7, r6
 8008318:	e7e1      	b.n	80082de <_dtoa_r+0x956>
 800831a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800831c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008320:	4637      	mov	r7, r6
 8008322:	e599      	b.n	8007e58 <_dtoa_r+0x4d0>
 8008324:	9b08      	ldr	r3, [sp, #32]
 8008326:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800832a:	2b00      	cmp	r3, #0
 800832c:	f000 80fd 	beq.w	800852a <_dtoa_r+0xba2>
 8008330:	2d00      	cmp	r5, #0
 8008332:	dd05      	ble.n	8008340 <_dtoa_r+0x9b8>
 8008334:	4639      	mov	r1, r7
 8008336:	462a      	mov	r2, r5
 8008338:	4620      	mov	r0, r4
 800833a:	f000 ff09 	bl	8009150 <__lshift>
 800833e:	4607      	mov	r7, r0
 8008340:	9b06      	ldr	r3, [sp, #24]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d05c      	beq.n	8008400 <_dtoa_r+0xa78>
 8008346:	6879      	ldr	r1, [r7, #4]
 8008348:	4620      	mov	r0, r4
 800834a:	f000 fca5 	bl	8008c98 <_Balloc>
 800834e:	4605      	mov	r5, r0
 8008350:	b928      	cbnz	r0, 800835e <_dtoa_r+0x9d6>
 8008352:	4b80      	ldr	r3, [pc, #512]	; (8008554 <_dtoa_r+0xbcc>)
 8008354:	4602      	mov	r2, r0
 8008356:	f240 21ea 	movw	r1, #746	; 0x2ea
 800835a:	f7ff bb2e 	b.w	80079ba <_dtoa_r+0x32>
 800835e:	693a      	ldr	r2, [r7, #16]
 8008360:	3202      	adds	r2, #2
 8008362:	0092      	lsls	r2, r2, #2
 8008364:	f107 010c 	add.w	r1, r7, #12
 8008368:	300c      	adds	r0, #12
 800836a:	f000 fc87 	bl	8008c7c <memcpy>
 800836e:	2201      	movs	r2, #1
 8008370:	4629      	mov	r1, r5
 8008372:	4620      	mov	r0, r4
 8008374:	f000 feec 	bl	8009150 <__lshift>
 8008378:	9b00      	ldr	r3, [sp, #0]
 800837a:	3301      	adds	r3, #1
 800837c:	9301      	str	r3, [sp, #4]
 800837e:	9b00      	ldr	r3, [sp, #0]
 8008380:	444b      	add	r3, r9
 8008382:	9307      	str	r3, [sp, #28]
 8008384:	9b02      	ldr	r3, [sp, #8]
 8008386:	f003 0301 	and.w	r3, r3, #1
 800838a:	46b8      	mov	r8, r7
 800838c:	9306      	str	r3, [sp, #24]
 800838e:	4607      	mov	r7, r0
 8008390:	9b01      	ldr	r3, [sp, #4]
 8008392:	4631      	mov	r1, r6
 8008394:	3b01      	subs	r3, #1
 8008396:	4658      	mov	r0, fp
 8008398:	9302      	str	r3, [sp, #8]
 800839a:	f7ff fa67 	bl	800786c <quorem>
 800839e:	4603      	mov	r3, r0
 80083a0:	3330      	adds	r3, #48	; 0x30
 80083a2:	9004      	str	r0, [sp, #16]
 80083a4:	4641      	mov	r1, r8
 80083a6:	4658      	mov	r0, fp
 80083a8:	9308      	str	r3, [sp, #32]
 80083aa:	f000 ff3d 	bl	8009228 <__mcmp>
 80083ae:	463a      	mov	r2, r7
 80083b0:	4681      	mov	r9, r0
 80083b2:	4631      	mov	r1, r6
 80083b4:	4620      	mov	r0, r4
 80083b6:	f000 ff53 	bl	8009260 <__mdiff>
 80083ba:	68c2      	ldr	r2, [r0, #12]
 80083bc:	9b08      	ldr	r3, [sp, #32]
 80083be:	4605      	mov	r5, r0
 80083c0:	bb02      	cbnz	r2, 8008404 <_dtoa_r+0xa7c>
 80083c2:	4601      	mov	r1, r0
 80083c4:	4658      	mov	r0, fp
 80083c6:	f000 ff2f 	bl	8009228 <__mcmp>
 80083ca:	9b08      	ldr	r3, [sp, #32]
 80083cc:	4602      	mov	r2, r0
 80083ce:	4629      	mov	r1, r5
 80083d0:	4620      	mov	r0, r4
 80083d2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80083d6:	f000 fc9f 	bl	8008d18 <_Bfree>
 80083da:	9b05      	ldr	r3, [sp, #20]
 80083dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083de:	9d01      	ldr	r5, [sp, #4]
 80083e0:	ea43 0102 	orr.w	r1, r3, r2
 80083e4:	9b06      	ldr	r3, [sp, #24]
 80083e6:	430b      	orrs	r3, r1
 80083e8:	9b08      	ldr	r3, [sp, #32]
 80083ea:	d10d      	bne.n	8008408 <_dtoa_r+0xa80>
 80083ec:	2b39      	cmp	r3, #57	; 0x39
 80083ee:	d029      	beq.n	8008444 <_dtoa_r+0xabc>
 80083f0:	f1b9 0f00 	cmp.w	r9, #0
 80083f4:	dd01      	ble.n	80083fa <_dtoa_r+0xa72>
 80083f6:	9b04      	ldr	r3, [sp, #16]
 80083f8:	3331      	adds	r3, #49	; 0x31
 80083fa:	9a02      	ldr	r2, [sp, #8]
 80083fc:	7013      	strb	r3, [r2, #0]
 80083fe:	e774      	b.n	80082ea <_dtoa_r+0x962>
 8008400:	4638      	mov	r0, r7
 8008402:	e7b9      	b.n	8008378 <_dtoa_r+0x9f0>
 8008404:	2201      	movs	r2, #1
 8008406:	e7e2      	b.n	80083ce <_dtoa_r+0xa46>
 8008408:	f1b9 0f00 	cmp.w	r9, #0
 800840c:	db06      	blt.n	800841c <_dtoa_r+0xa94>
 800840e:	9905      	ldr	r1, [sp, #20]
 8008410:	ea41 0909 	orr.w	r9, r1, r9
 8008414:	9906      	ldr	r1, [sp, #24]
 8008416:	ea59 0101 	orrs.w	r1, r9, r1
 800841a:	d120      	bne.n	800845e <_dtoa_r+0xad6>
 800841c:	2a00      	cmp	r2, #0
 800841e:	ddec      	ble.n	80083fa <_dtoa_r+0xa72>
 8008420:	4659      	mov	r1, fp
 8008422:	2201      	movs	r2, #1
 8008424:	4620      	mov	r0, r4
 8008426:	9301      	str	r3, [sp, #4]
 8008428:	f000 fe92 	bl	8009150 <__lshift>
 800842c:	4631      	mov	r1, r6
 800842e:	4683      	mov	fp, r0
 8008430:	f000 fefa 	bl	8009228 <__mcmp>
 8008434:	2800      	cmp	r0, #0
 8008436:	9b01      	ldr	r3, [sp, #4]
 8008438:	dc02      	bgt.n	8008440 <_dtoa_r+0xab8>
 800843a:	d1de      	bne.n	80083fa <_dtoa_r+0xa72>
 800843c:	07da      	lsls	r2, r3, #31
 800843e:	d5dc      	bpl.n	80083fa <_dtoa_r+0xa72>
 8008440:	2b39      	cmp	r3, #57	; 0x39
 8008442:	d1d8      	bne.n	80083f6 <_dtoa_r+0xa6e>
 8008444:	9a02      	ldr	r2, [sp, #8]
 8008446:	2339      	movs	r3, #57	; 0x39
 8008448:	7013      	strb	r3, [r2, #0]
 800844a:	462b      	mov	r3, r5
 800844c:	461d      	mov	r5, r3
 800844e:	3b01      	subs	r3, #1
 8008450:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008454:	2a39      	cmp	r2, #57	; 0x39
 8008456:	d050      	beq.n	80084fa <_dtoa_r+0xb72>
 8008458:	3201      	adds	r2, #1
 800845a:	701a      	strb	r2, [r3, #0]
 800845c:	e745      	b.n	80082ea <_dtoa_r+0x962>
 800845e:	2a00      	cmp	r2, #0
 8008460:	dd03      	ble.n	800846a <_dtoa_r+0xae2>
 8008462:	2b39      	cmp	r3, #57	; 0x39
 8008464:	d0ee      	beq.n	8008444 <_dtoa_r+0xabc>
 8008466:	3301      	adds	r3, #1
 8008468:	e7c7      	b.n	80083fa <_dtoa_r+0xa72>
 800846a:	9a01      	ldr	r2, [sp, #4]
 800846c:	9907      	ldr	r1, [sp, #28]
 800846e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008472:	428a      	cmp	r2, r1
 8008474:	d02a      	beq.n	80084cc <_dtoa_r+0xb44>
 8008476:	4659      	mov	r1, fp
 8008478:	2300      	movs	r3, #0
 800847a:	220a      	movs	r2, #10
 800847c:	4620      	mov	r0, r4
 800847e:	f000 fc6d 	bl	8008d5c <__multadd>
 8008482:	45b8      	cmp	r8, r7
 8008484:	4683      	mov	fp, r0
 8008486:	f04f 0300 	mov.w	r3, #0
 800848a:	f04f 020a 	mov.w	r2, #10
 800848e:	4641      	mov	r1, r8
 8008490:	4620      	mov	r0, r4
 8008492:	d107      	bne.n	80084a4 <_dtoa_r+0xb1c>
 8008494:	f000 fc62 	bl	8008d5c <__multadd>
 8008498:	4680      	mov	r8, r0
 800849a:	4607      	mov	r7, r0
 800849c:	9b01      	ldr	r3, [sp, #4]
 800849e:	3301      	adds	r3, #1
 80084a0:	9301      	str	r3, [sp, #4]
 80084a2:	e775      	b.n	8008390 <_dtoa_r+0xa08>
 80084a4:	f000 fc5a 	bl	8008d5c <__multadd>
 80084a8:	4639      	mov	r1, r7
 80084aa:	4680      	mov	r8, r0
 80084ac:	2300      	movs	r3, #0
 80084ae:	220a      	movs	r2, #10
 80084b0:	4620      	mov	r0, r4
 80084b2:	f000 fc53 	bl	8008d5c <__multadd>
 80084b6:	4607      	mov	r7, r0
 80084b8:	e7f0      	b.n	800849c <_dtoa_r+0xb14>
 80084ba:	f1b9 0f00 	cmp.w	r9, #0
 80084be:	9a00      	ldr	r2, [sp, #0]
 80084c0:	bfcc      	ite	gt
 80084c2:	464d      	movgt	r5, r9
 80084c4:	2501      	movle	r5, #1
 80084c6:	4415      	add	r5, r2
 80084c8:	f04f 0800 	mov.w	r8, #0
 80084cc:	4659      	mov	r1, fp
 80084ce:	2201      	movs	r2, #1
 80084d0:	4620      	mov	r0, r4
 80084d2:	9301      	str	r3, [sp, #4]
 80084d4:	f000 fe3c 	bl	8009150 <__lshift>
 80084d8:	4631      	mov	r1, r6
 80084da:	4683      	mov	fp, r0
 80084dc:	f000 fea4 	bl	8009228 <__mcmp>
 80084e0:	2800      	cmp	r0, #0
 80084e2:	dcb2      	bgt.n	800844a <_dtoa_r+0xac2>
 80084e4:	d102      	bne.n	80084ec <_dtoa_r+0xb64>
 80084e6:	9b01      	ldr	r3, [sp, #4]
 80084e8:	07db      	lsls	r3, r3, #31
 80084ea:	d4ae      	bmi.n	800844a <_dtoa_r+0xac2>
 80084ec:	462b      	mov	r3, r5
 80084ee:	461d      	mov	r5, r3
 80084f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80084f4:	2a30      	cmp	r2, #48	; 0x30
 80084f6:	d0fa      	beq.n	80084ee <_dtoa_r+0xb66>
 80084f8:	e6f7      	b.n	80082ea <_dtoa_r+0x962>
 80084fa:	9a00      	ldr	r2, [sp, #0]
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d1a5      	bne.n	800844c <_dtoa_r+0xac4>
 8008500:	f10a 0a01 	add.w	sl, sl, #1
 8008504:	2331      	movs	r3, #49	; 0x31
 8008506:	e779      	b.n	80083fc <_dtoa_r+0xa74>
 8008508:	4b13      	ldr	r3, [pc, #76]	; (8008558 <_dtoa_r+0xbd0>)
 800850a:	f7ff baaf 	b.w	8007a6c <_dtoa_r+0xe4>
 800850e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008510:	2b00      	cmp	r3, #0
 8008512:	f47f aa86 	bne.w	8007a22 <_dtoa_r+0x9a>
 8008516:	4b11      	ldr	r3, [pc, #68]	; (800855c <_dtoa_r+0xbd4>)
 8008518:	f7ff baa8 	b.w	8007a6c <_dtoa_r+0xe4>
 800851c:	f1b9 0f00 	cmp.w	r9, #0
 8008520:	dc03      	bgt.n	800852a <_dtoa_r+0xba2>
 8008522:	9b05      	ldr	r3, [sp, #20]
 8008524:	2b02      	cmp	r3, #2
 8008526:	f73f aec9 	bgt.w	80082bc <_dtoa_r+0x934>
 800852a:	9d00      	ldr	r5, [sp, #0]
 800852c:	4631      	mov	r1, r6
 800852e:	4658      	mov	r0, fp
 8008530:	f7ff f99c 	bl	800786c <quorem>
 8008534:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008538:	f805 3b01 	strb.w	r3, [r5], #1
 800853c:	9a00      	ldr	r2, [sp, #0]
 800853e:	1aaa      	subs	r2, r5, r2
 8008540:	4591      	cmp	r9, r2
 8008542:	ddba      	ble.n	80084ba <_dtoa_r+0xb32>
 8008544:	4659      	mov	r1, fp
 8008546:	2300      	movs	r3, #0
 8008548:	220a      	movs	r2, #10
 800854a:	4620      	mov	r0, r4
 800854c:	f000 fc06 	bl	8008d5c <__multadd>
 8008550:	4683      	mov	fp, r0
 8008552:	e7eb      	b.n	800852c <_dtoa_r+0xba4>
 8008554:	0800be1c 	.word	0x0800be1c
 8008558:	0800bc1c 	.word	0x0800bc1c
 800855c:	0800bd99 	.word	0x0800bd99

08008560 <rshift>:
 8008560:	6903      	ldr	r3, [r0, #16]
 8008562:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008566:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800856a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800856e:	f100 0414 	add.w	r4, r0, #20
 8008572:	dd45      	ble.n	8008600 <rshift+0xa0>
 8008574:	f011 011f 	ands.w	r1, r1, #31
 8008578:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800857c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008580:	d10c      	bne.n	800859c <rshift+0x3c>
 8008582:	f100 0710 	add.w	r7, r0, #16
 8008586:	4629      	mov	r1, r5
 8008588:	42b1      	cmp	r1, r6
 800858a:	d334      	bcc.n	80085f6 <rshift+0x96>
 800858c:	1a9b      	subs	r3, r3, r2
 800858e:	009b      	lsls	r3, r3, #2
 8008590:	1eea      	subs	r2, r5, #3
 8008592:	4296      	cmp	r6, r2
 8008594:	bf38      	it	cc
 8008596:	2300      	movcc	r3, #0
 8008598:	4423      	add	r3, r4
 800859a:	e015      	b.n	80085c8 <rshift+0x68>
 800859c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80085a0:	f1c1 0820 	rsb	r8, r1, #32
 80085a4:	40cf      	lsrs	r7, r1
 80085a6:	f105 0e04 	add.w	lr, r5, #4
 80085aa:	46a1      	mov	r9, r4
 80085ac:	4576      	cmp	r6, lr
 80085ae:	46f4      	mov	ip, lr
 80085b0:	d815      	bhi.n	80085de <rshift+0x7e>
 80085b2:	1a9b      	subs	r3, r3, r2
 80085b4:	009a      	lsls	r2, r3, #2
 80085b6:	3a04      	subs	r2, #4
 80085b8:	3501      	adds	r5, #1
 80085ba:	42ae      	cmp	r6, r5
 80085bc:	bf38      	it	cc
 80085be:	2200      	movcc	r2, #0
 80085c0:	18a3      	adds	r3, r4, r2
 80085c2:	50a7      	str	r7, [r4, r2]
 80085c4:	b107      	cbz	r7, 80085c8 <rshift+0x68>
 80085c6:	3304      	adds	r3, #4
 80085c8:	1b1a      	subs	r2, r3, r4
 80085ca:	42a3      	cmp	r3, r4
 80085cc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80085d0:	bf08      	it	eq
 80085d2:	2300      	moveq	r3, #0
 80085d4:	6102      	str	r2, [r0, #16]
 80085d6:	bf08      	it	eq
 80085d8:	6143      	streq	r3, [r0, #20]
 80085da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80085de:	f8dc c000 	ldr.w	ip, [ip]
 80085e2:	fa0c fc08 	lsl.w	ip, ip, r8
 80085e6:	ea4c 0707 	orr.w	r7, ip, r7
 80085ea:	f849 7b04 	str.w	r7, [r9], #4
 80085ee:	f85e 7b04 	ldr.w	r7, [lr], #4
 80085f2:	40cf      	lsrs	r7, r1
 80085f4:	e7da      	b.n	80085ac <rshift+0x4c>
 80085f6:	f851 cb04 	ldr.w	ip, [r1], #4
 80085fa:	f847 cf04 	str.w	ip, [r7, #4]!
 80085fe:	e7c3      	b.n	8008588 <rshift+0x28>
 8008600:	4623      	mov	r3, r4
 8008602:	e7e1      	b.n	80085c8 <rshift+0x68>

08008604 <__hexdig_fun>:
 8008604:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008608:	2b09      	cmp	r3, #9
 800860a:	d802      	bhi.n	8008612 <__hexdig_fun+0xe>
 800860c:	3820      	subs	r0, #32
 800860e:	b2c0      	uxtb	r0, r0
 8008610:	4770      	bx	lr
 8008612:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008616:	2b05      	cmp	r3, #5
 8008618:	d801      	bhi.n	800861e <__hexdig_fun+0x1a>
 800861a:	3847      	subs	r0, #71	; 0x47
 800861c:	e7f7      	b.n	800860e <__hexdig_fun+0xa>
 800861e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008622:	2b05      	cmp	r3, #5
 8008624:	d801      	bhi.n	800862a <__hexdig_fun+0x26>
 8008626:	3827      	subs	r0, #39	; 0x27
 8008628:	e7f1      	b.n	800860e <__hexdig_fun+0xa>
 800862a:	2000      	movs	r0, #0
 800862c:	4770      	bx	lr
	...

08008630 <__gethex>:
 8008630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008634:	ed2d 8b02 	vpush	{d8}
 8008638:	b089      	sub	sp, #36	; 0x24
 800863a:	ee08 0a10 	vmov	s16, r0
 800863e:	9304      	str	r3, [sp, #16]
 8008640:	4bbc      	ldr	r3, [pc, #752]	; (8008934 <__gethex+0x304>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	9301      	str	r3, [sp, #4]
 8008646:	4618      	mov	r0, r3
 8008648:	468b      	mov	fp, r1
 800864a:	4690      	mov	r8, r2
 800864c:	f7f7 fdc8 	bl	80001e0 <strlen>
 8008650:	9b01      	ldr	r3, [sp, #4]
 8008652:	f8db 2000 	ldr.w	r2, [fp]
 8008656:	4403      	add	r3, r0
 8008658:	4682      	mov	sl, r0
 800865a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800865e:	9305      	str	r3, [sp, #20]
 8008660:	1c93      	adds	r3, r2, #2
 8008662:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008666:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800866a:	32fe      	adds	r2, #254	; 0xfe
 800866c:	18d1      	adds	r1, r2, r3
 800866e:	461f      	mov	r7, r3
 8008670:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008674:	9100      	str	r1, [sp, #0]
 8008676:	2830      	cmp	r0, #48	; 0x30
 8008678:	d0f8      	beq.n	800866c <__gethex+0x3c>
 800867a:	f7ff ffc3 	bl	8008604 <__hexdig_fun>
 800867e:	4604      	mov	r4, r0
 8008680:	2800      	cmp	r0, #0
 8008682:	d13a      	bne.n	80086fa <__gethex+0xca>
 8008684:	9901      	ldr	r1, [sp, #4]
 8008686:	4652      	mov	r2, sl
 8008688:	4638      	mov	r0, r7
 800868a:	f001 f9ed 	bl	8009a68 <strncmp>
 800868e:	4605      	mov	r5, r0
 8008690:	2800      	cmp	r0, #0
 8008692:	d168      	bne.n	8008766 <__gethex+0x136>
 8008694:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008698:	eb07 060a 	add.w	r6, r7, sl
 800869c:	f7ff ffb2 	bl	8008604 <__hexdig_fun>
 80086a0:	2800      	cmp	r0, #0
 80086a2:	d062      	beq.n	800876a <__gethex+0x13a>
 80086a4:	4633      	mov	r3, r6
 80086a6:	7818      	ldrb	r0, [r3, #0]
 80086a8:	2830      	cmp	r0, #48	; 0x30
 80086aa:	461f      	mov	r7, r3
 80086ac:	f103 0301 	add.w	r3, r3, #1
 80086b0:	d0f9      	beq.n	80086a6 <__gethex+0x76>
 80086b2:	f7ff ffa7 	bl	8008604 <__hexdig_fun>
 80086b6:	2301      	movs	r3, #1
 80086b8:	fab0 f480 	clz	r4, r0
 80086bc:	0964      	lsrs	r4, r4, #5
 80086be:	4635      	mov	r5, r6
 80086c0:	9300      	str	r3, [sp, #0]
 80086c2:	463a      	mov	r2, r7
 80086c4:	4616      	mov	r6, r2
 80086c6:	3201      	adds	r2, #1
 80086c8:	7830      	ldrb	r0, [r6, #0]
 80086ca:	f7ff ff9b 	bl	8008604 <__hexdig_fun>
 80086ce:	2800      	cmp	r0, #0
 80086d0:	d1f8      	bne.n	80086c4 <__gethex+0x94>
 80086d2:	9901      	ldr	r1, [sp, #4]
 80086d4:	4652      	mov	r2, sl
 80086d6:	4630      	mov	r0, r6
 80086d8:	f001 f9c6 	bl	8009a68 <strncmp>
 80086dc:	b980      	cbnz	r0, 8008700 <__gethex+0xd0>
 80086de:	b94d      	cbnz	r5, 80086f4 <__gethex+0xc4>
 80086e0:	eb06 050a 	add.w	r5, r6, sl
 80086e4:	462a      	mov	r2, r5
 80086e6:	4616      	mov	r6, r2
 80086e8:	3201      	adds	r2, #1
 80086ea:	7830      	ldrb	r0, [r6, #0]
 80086ec:	f7ff ff8a 	bl	8008604 <__hexdig_fun>
 80086f0:	2800      	cmp	r0, #0
 80086f2:	d1f8      	bne.n	80086e6 <__gethex+0xb6>
 80086f4:	1bad      	subs	r5, r5, r6
 80086f6:	00ad      	lsls	r5, r5, #2
 80086f8:	e004      	b.n	8008704 <__gethex+0xd4>
 80086fa:	2400      	movs	r4, #0
 80086fc:	4625      	mov	r5, r4
 80086fe:	e7e0      	b.n	80086c2 <__gethex+0x92>
 8008700:	2d00      	cmp	r5, #0
 8008702:	d1f7      	bne.n	80086f4 <__gethex+0xc4>
 8008704:	7833      	ldrb	r3, [r6, #0]
 8008706:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800870a:	2b50      	cmp	r3, #80	; 0x50
 800870c:	d13b      	bne.n	8008786 <__gethex+0x156>
 800870e:	7873      	ldrb	r3, [r6, #1]
 8008710:	2b2b      	cmp	r3, #43	; 0x2b
 8008712:	d02c      	beq.n	800876e <__gethex+0x13e>
 8008714:	2b2d      	cmp	r3, #45	; 0x2d
 8008716:	d02e      	beq.n	8008776 <__gethex+0x146>
 8008718:	1c71      	adds	r1, r6, #1
 800871a:	f04f 0900 	mov.w	r9, #0
 800871e:	7808      	ldrb	r0, [r1, #0]
 8008720:	f7ff ff70 	bl	8008604 <__hexdig_fun>
 8008724:	1e43      	subs	r3, r0, #1
 8008726:	b2db      	uxtb	r3, r3
 8008728:	2b18      	cmp	r3, #24
 800872a:	d82c      	bhi.n	8008786 <__gethex+0x156>
 800872c:	f1a0 0210 	sub.w	r2, r0, #16
 8008730:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008734:	f7ff ff66 	bl	8008604 <__hexdig_fun>
 8008738:	1e43      	subs	r3, r0, #1
 800873a:	b2db      	uxtb	r3, r3
 800873c:	2b18      	cmp	r3, #24
 800873e:	d91d      	bls.n	800877c <__gethex+0x14c>
 8008740:	f1b9 0f00 	cmp.w	r9, #0
 8008744:	d000      	beq.n	8008748 <__gethex+0x118>
 8008746:	4252      	negs	r2, r2
 8008748:	4415      	add	r5, r2
 800874a:	f8cb 1000 	str.w	r1, [fp]
 800874e:	b1e4      	cbz	r4, 800878a <__gethex+0x15a>
 8008750:	9b00      	ldr	r3, [sp, #0]
 8008752:	2b00      	cmp	r3, #0
 8008754:	bf14      	ite	ne
 8008756:	2700      	movne	r7, #0
 8008758:	2706      	moveq	r7, #6
 800875a:	4638      	mov	r0, r7
 800875c:	b009      	add	sp, #36	; 0x24
 800875e:	ecbd 8b02 	vpop	{d8}
 8008762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008766:	463e      	mov	r6, r7
 8008768:	4625      	mov	r5, r4
 800876a:	2401      	movs	r4, #1
 800876c:	e7ca      	b.n	8008704 <__gethex+0xd4>
 800876e:	f04f 0900 	mov.w	r9, #0
 8008772:	1cb1      	adds	r1, r6, #2
 8008774:	e7d3      	b.n	800871e <__gethex+0xee>
 8008776:	f04f 0901 	mov.w	r9, #1
 800877a:	e7fa      	b.n	8008772 <__gethex+0x142>
 800877c:	230a      	movs	r3, #10
 800877e:	fb03 0202 	mla	r2, r3, r2, r0
 8008782:	3a10      	subs	r2, #16
 8008784:	e7d4      	b.n	8008730 <__gethex+0x100>
 8008786:	4631      	mov	r1, r6
 8008788:	e7df      	b.n	800874a <__gethex+0x11a>
 800878a:	1bf3      	subs	r3, r6, r7
 800878c:	3b01      	subs	r3, #1
 800878e:	4621      	mov	r1, r4
 8008790:	2b07      	cmp	r3, #7
 8008792:	dc0b      	bgt.n	80087ac <__gethex+0x17c>
 8008794:	ee18 0a10 	vmov	r0, s16
 8008798:	f000 fa7e 	bl	8008c98 <_Balloc>
 800879c:	4604      	mov	r4, r0
 800879e:	b940      	cbnz	r0, 80087b2 <__gethex+0x182>
 80087a0:	4b65      	ldr	r3, [pc, #404]	; (8008938 <__gethex+0x308>)
 80087a2:	4602      	mov	r2, r0
 80087a4:	21de      	movs	r1, #222	; 0xde
 80087a6:	4865      	ldr	r0, [pc, #404]	; (800893c <__gethex+0x30c>)
 80087a8:	f001 f97e 	bl	8009aa8 <__assert_func>
 80087ac:	3101      	adds	r1, #1
 80087ae:	105b      	asrs	r3, r3, #1
 80087b0:	e7ee      	b.n	8008790 <__gethex+0x160>
 80087b2:	f100 0914 	add.w	r9, r0, #20
 80087b6:	f04f 0b00 	mov.w	fp, #0
 80087ba:	f1ca 0301 	rsb	r3, sl, #1
 80087be:	f8cd 9008 	str.w	r9, [sp, #8]
 80087c2:	f8cd b000 	str.w	fp, [sp]
 80087c6:	9306      	str	r3, [sp, #24]
 80087c8:	42b7      	cmp	r7, r6
 80087ca:	d340      	bcc.n	800884e <__gethex+0x21e>
 80087cc:	9802      	ldr	r0, [sp, #8]
 80087ce:	9b00      	ldr	r3, [sp, #0]
 80087d0:	f840 3b04 	str.w	r3, [r0], #4
 80087d4:	eba0 0009 	sub.w	r0, r0, r9
 80087d8:	1080      	asrs	r0, r0, #2
 80087da:	0146      	lsls	r6, r0, #5
 80087dc:	6120      	str	r0, [r4, #16]
 80087de:	4618      	mov	r0, r3
 80087e0:	f000 fb50 	bl	8008e84 <__hi0bits>
 80087e4:	1a30      	subs	r0, r6, r0
 80087e6:	f8d8 6000 	ldr.w	r6, [r8]
 80087ea:	42b0      	cmp	r0, r6
 80087ec:	dd63      	ble.n	80088b6 <__gethex+0x286>
 80087ee:	1b87      	subs	r7, r0, r6
 80087f0:	4639      	mov	r1, r7
 80087f2:	4620      	mov	r0, r4
 80087f4:	f000 feea 	bl	80095cc <__any_on>
 80087f8:	4682      	mov	sl, r0
 80087fa:	b1a8      	cbz	r0, 8008828 <__gethex+0x1f8>
 80087fc:	1e7b      	subs	r3, r7, #1
 80087fe:	1159      	asrs	r1, r3, #5
 8008800:	f003 021f 	and.w	r2, r3, #31
 8008804:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008808:	f04f 0a01 	mov.w	sl, #1
 800880c:	fa0a f202 	lsl.w	r2, sl, r2
 8008810:	420a      	tst	r2, r1
 8008812:	d009      	beq.n	8008828 <__gethex+0x1f8>
 8008814:	4553      	cmp	r3, sl
 8008816:	dd05      	ble.n	8008824 <__gethex+0x1f4>
 8008818:	1eb9      	subs	r1, r7, #2
 800881a:	4620      	mov	r0, r4
 800881c:	f000 fed6 	bl	80095cc <__any_on>
 8008820:	2800      	cmp	r0, #0
 8008822:	d145      	bne.n	80088b0 <__gethex+0x280>
 8008824:	f04f 0a02 	mov.w	sl, #2
 8008828:	4639      	mov	r1, r7
 800882a:	4620      	mov	r0, r4
 800882c:	f7ff fe98 	bl	8008560 <rshift>
 8008830:	443d      	add	r5, r7
 8008832:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008836:	42ab      	cmp	r3, r5
 8008838:	da4c      	bge.n	80088d4 <__gethex+0x2a4>
 800883a:	ee18 0a10 	vmov	r0, s16
 800883e:	4621      	mov	r1, r4
 8008840:	f000 fa6a 	bl	8008d18 <_Bfree>
 8008844:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008846:	2300      	movs	r3, #0
 8008848:	6013      	str	r3, [r2, #0]
 800884a:	27a3      	movs	r7, #163	; 0xa3
 800884c:	e785      	b.n	800875a <__gethex+0x12a>
 800884e:	1e73      	subs	r3, r6, #1
 8008850:	9a05      	ldr	r2, [sp, #20]
 8008852:	9303      	str	r3, [sp, #12]
 8008854:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008858:	4293      	cmp	r3, r2
 800885a:	d019      	beq.n	8008890 <__gethex+0x260>
 800885c:	f1bb 0f20 	cmp.w	fp, #32
 8008860:	d107      	bne.n	8008872 <__gethex+0x242>
 8008862:	9b02      	ldr	r3, [sp, #8]
 8008864:	9a00      	ldr	r2, [sp, #0]
 8008866:	f843 2b04 	str.w	r2, [r3], #4
 800886a:	9302      	str	r3, [sp, #8]
 800886c:	2300      	movs	r3, #0
 800886e:	9300      	str	r3, [sp, #0]
 8008870:	469b      	mov	fp, r3
 8008872:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008876:	f7ff fec5 	bl	8008604 <__hexdig_fun>
 800887a:	9b00      	ldr	r3, [sp, #0]
 800887c:	f000 000f 	and.w	r0, r0, #15
 8008880:	fa00 f00b 	lsl.w	r0, r0, fp
 8008884:	4303      	orrs	r3, r0
 8008886:	9300      	str	r3, [sp, #0]
 8008888:	f10b 0b04 	add.w	fp, fp, #4
 800888c:	9b03      	ldr	r3, [sp, #12]
 800888e:	e00d      	b.n	80088ac <__gethex+0x27c>
 8008890:	9b03      	ldr	r3, [sp, #12]
 8008892:	9a06      	ldr	r2, [sp, #24]
 8008894:	4413      	add	r3, r2
 8008896:	42bb      	cmp	r3, r7
 8008898:	d3e0      	bcc.n	800885c <__gethex+0x22c>
 800889a:	4618      	mov	r0, r3
 800889c:	9901      	ldr	r1, [sp, #4]
 800889e:	9307      	str	r3, [sp, #28]
 80088a0:	4652      	mov	r2, sl
 80088a2:	f001 f8e1 	bl	8009a68 <strncmp>
 80088a6:	9b07      	ldr	r3, [sp, #28]
 80088a8:	2800      	cmp	r0, #0
 80088aa:	d1d7      	bne.n	800885c <__gethex+0x22c>
 80088ac:	461e      	mov	r6, r3
 80088ae:	e78b      	b.n	80087c8 <__gethex+0x198>
 80088b0:	f04f 0a03 	mov.w	sl, #3
 80088b4:	e7b8      	b.n	8008828 <__gethex+0x1f8>
 80088b6:	da0a      	bge.n	80088ce <__gethex+0x29e>
 80088b8:	1a37      	subs	r7, r6, r0
 80088ba:	4621      	mov	r1, r4
 80088bc:	ee18 0a10 	vmov	r0, s16
 80088c0:	463a      	mov	r2, r7
 80088c2:	f000 fc45 	bl	8009150 <__lshift>
 80088c6:	1bed      	subs	r5, r5, r7
 80088c8:	4604      	mov	r4, r0
 80088ca:	f100 0914 	add.w	r9, r0, #20
 80088ce:	f04f 0a00 	mov.w	sl, #0
 80088d2:	e7ae      	b.n	8008832 <__gethex+0x202>
 80088d4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80088d8:	42a8      	cmp	r0, r5
 80088da:	dd72      	ble.n	80089c2 <__gethex+0x392>
 80088dc:	1b45      	subs	r5, r0, r5
 80088de:	42ae      	cmp	r6, r5
 80088e0:	dc36      	bgt.n	8008950 <__gethex+0x320>
 80088e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80088e6:	2b02      	cmp	r3, #2
 80088e8:	d02a      	beq.n	8008940 <__gethex+0x310>
 80088ea:	2b03      	cmp	r3, #3
 80088ec:	d02c      	beq.n	8008948 <__gethex+0x318>
 80088ee:	2b01      	cmp	r3, #1
 80088f0:	d115      	bne.n	800891e <__gethex+0x2ee>
 80088f2:	42ae      	cmp	r6, r5
 80088f4:	d113      	bne.n	800891e <__gethex+0x2ee>
 80088f6:	2e01      	cmp	r6, #1
 80088f8:	d10b      	bne.n	8008912 <__gethex+0x2e2>
 80088fa:	9a04      	ldr	r2, [sp, #16]
 80088fc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008900:	6013      	str	r3, [r2, #0]
 8008902:	2301      	movs	r3, #1
 8008904:	6123      	str	r3, [r4, #16]
 8008906:	f8c9 3000 	str.w	r3, [r9]
 800890a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800890c:	2762      	movs	r7, #98	; 0x62
 800890e:	601c      	str	r4, [r3, #0]
 8008910:	e723      	b.n	800875a <__gethex+0x12a>
 8008912:	1e71      	subs	r1, r6, #1
 8008914:	4620      	mov	r0, r4
 8008916:	f000 fe59 	bl	80095cc <__any_on>
 800891a:	2800      	cmp	r0, #0
 800891c:	d1ed      	bne.n	80088fa <__gethex+0x2ca>
 800891e:	ee18 0a10 	vmov	r0, s16
 8008922:	4621      	mov	r1, r4
 8008924:	f000 f9f8 	bl	8008d18 <_Bfree>
 8008928:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800892a:	2300      	movs	r3, #0
 800892c:	6013      	str	r3, [r2, #0]
 800892e:	2750      	movs	r7, #80	; 0x50
 8008930:	e713      	b.n	800875a <__gethex+0x12a>
 8008932:	bf00      	nop
 8008934:	0800be98 	.word	0x0800be98
 8008938:	0800be1c 	.word	0x0800be1c
 800893c:	0800be2d 	.word	0x0800be2d
 8008940:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008942:	2b00      	cmp	r3, #0
 8008944:	d1eb      	bne.n	800891e <__gethex+0x2ee>
 8008946:	e7d8      	b.n	80088fa <__gethex+0x2ca>
 8008948:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800894a:	2b00      	cmp	r3, #0
 800894c:	d1d5      	bne.n	80088fa <__gethex+0x2ca>
 800894e:	e7e6      	b.n	800891e <__gethex+0x2ee>
 8008950:	1e6f      	subs	r7, r5, #1
 8008952:	f1ba 0f00 	cmp.w	sl, #0
 8008956:	d131      	bne.n	80089bc <__gethex+0x38c>
 8008958:	b127      	cbz	r7, 8008964 <__gethex+0x334>
 800895a:	4639      	mov	r1, r7
 800895c:	4620      	mov	r0, r4
 800895e:	f000 fe35 	bl	80095cc <__any_on>
 8008962:	4682      	mov	sl, r0
 8008964:	117b      	asrs	r3, r7, #5
 8008966:	2101      	movs	r1, #1
 8008968:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800896c:	f007 071f 	and.w	r7, r7, #31
 8008970:	fa01 f707 	lsl.w	r7, r1, r7
 8008974:	421f      	tst	r7, r3
 8008976:	4629      	mov	r1, r5
 8008978:	4620      	mov	r0, r4
 800897a:	bf18      	it	ne
 800897c:	f04a 0a02 	orrne.w	sl, sl, #2
 8008980:	1b76      	subs	r6, r6, r5
 8008982:	f7ff fded 	bl	8008560 <rshift>
 8008986:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800898a:	2702      	movs	r7, #2
 800898c:	f1ba 0f00 	cmp.w	sl, #0
 8008990:	d048      	beq.n	8008a24 <__gethex+0x3f4>
 8008992:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008996:	2b02      	cmp	r3, #2
 8008998:	d015      	beq.n	80089c6 <__gethex+0x396>
 800899a:	2b03      	cmp	r3, #3
 800899c:	d017      	beq.n	80089ce <__gethex+0x39e>
 800899e:	2b01      	cmp	r3, #1
 80089a0:	d109      	bne.n	80089b6 <__gethex+0x386>
 80089a2:	f01a 0f02 	tst.w	sl, #2
 80089a6:	d006      	beq.n	80089b6 <__gethex+0x386>
 80089a8:	f8d9 0000 	ldr.w	r0, [r9]
 80089ac:	ea4a 0a00 	orr.w	sl, sl, r0
 80089b0:	f01a 0f01 	tst.w	sl, #1
 80089b4:	d10e      	bne.n	80089d4 <__gethex+0x3a4>
 80089b6:	f047 0710 	orr.w	r7, r7, #16
 80089ba:	e033      	b.n	8008a24 <__gethex+0x3f4>
 80089bc:	f04f 0a01 	mov.w	sl, #1
 80089c0:	e7d0      	b.n	8008964 <__gethex+0x334>
 80089c2:	2701      	movs	r7, #1
 80089c4:	e7e2      	b.n	800898c <__gethex+0x35c>
 80089c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80089c8:	f1c3 0301 	rsb	r3, r3, #1
 80089cc:	9315      	str	r3, [sp, #84]	; 0x54
 80089ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d0f0      	beq.n	80089b6 <__gethex+0x386>
 80089d4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80089d8:	f104 0314 	add.w	r3, r4, #20
 80089dc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80089e0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80089e4:	f04f 0c00 	mov.w	ip, #0
 80089e8:	4618      	mov	r0, r3
 80089ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80089ee:	f1b2 3fff 	cmp.w	r2, #4294967295
 80089f2:	d01c      	beq.n	8008a2e <__gethex+0x3fe>
 80089f4:	3201      	adds	r2, #1
 80089f6:	6002      	str	r2, [r0, #0]
 80089f8:	2f02      	cmp	r7, #2
 80089fa:	f104 0314 	add.w	r3, r4, #20
 80089fe:	d13f      	bne.n	8008a80 <__gethex+0x450>
 8008a00:	f8d8 2000 	ldr.w	r2, [r8]
 8008a04:	3a01      	subs	r2, #1
 8008a06:	42b2      	cmp	r2, r6
 8008a08:	d10a      	bne.n	8008a20 <__gethex+0x3f0>
 8008a0a:	1171      	asrs	r1, r6, #5
 8008a0c:	2201      	movs	r2, #1
 8008a0e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008a12:	f006 061f 	and.w	r6, r6, #31
 8008a16:	fa02 f606 	lsl.w	r6, r2, r6
 8008a1a:	421e      	tst	r6, r3
 8008a1c:	bf18      	it	ne
 8008a1e:	4617      	movne	r7, r2
 8008a20:	f047 0720 	orr.w	r7, r7, #32
 8008a24:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008a26:	601c      	str	r4, [r3, #0]
 8008a28:	9b04      	ldr	r3, [sp, #16]
 8008a2a:	601d      	str	r5, [r3, #0]
 8008a2c:	e695      	b.n	800875a <__gethex+0x12a>
 8008a2e:	4299      	cmp	r1, r3
 8008a30:	f843 cc04 	str.w	ip, [r3, #-4]
 8008a34:	d8d8      	bhi.n	80089e8 <__gethex+0x3b8>
 8008a36:	68a3      	ldr	r3, [r4, #8]
 8008a38:	459b      	cmp	fp, r3
 8008a3a:	db19      	blt.n	8008a70 <__gethex+0x440>
 8008a3c:	6861      	ldr	r1, [r4, #4]
 8008a3e:	ee18 0a10 	vmov	r0, s16
 8008a42:	3101      	adds	r1, #1
 8008a44:	f000 f928 	bl	8008c98 <_Balloc>
 8008a48:	4681      	mov	r9, r0
 8008a4a:	b918      	cbnz	r0, 8008a54 <__gethex+0x424>
 8008a4c:	4b1a      	ldr	r3, [pc, #104]	; (8008ab8 <__gethex+0x488>)
 8008a4e:	4602      	mov	r2, r0
 8008a50:	2184      	movs	r1, #132	; 0x84
 8008a52:	e6a8      	b.n	80087a6 <__gethex+0x176>
 8008a54:	6922      	ldr	r2, [r4, #16]
 8008a56:	3202      	adds	r2, #2
 8008a58:	f104 010c 	add.w	r1, r4, #12
 8008a5c:	0092      	lsls	r2, r2, #2
 8008a5e:	300c      	adds	r0, #12
 8008a60:	f000 f90c 	bl	8008c7c <memcpy>
 8008a64:	4621      	mov	r1, r4
 8008a66:	ee18 0a10 	vmov	r0, s16
 8008a6a:	f000 f955 	bl	8008d18 <_Bfree>
 8008a6e:	464c      	mov	r4, r9
 8008a70:	6923      	ldr	r3, [r4, #16]
 8008a72:	1c5a      	adds	r2, r3, #1
 8008a74:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008a78:	6122      	str	r2, [r4, #16]
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	615a      	str	r2, [r3, #20]
 8008a7e:	e7bb      	b.n	80089f8 <__gethex+0x3c8>
 8008a80:	6922      	ldr	r2, [r4, #16]
 8008a82:	455a      	cmp	r2, fp
 8008a84:	dd0b      	ble.n	8008a9e <__gethex+0x46e>
 8008a86:	2101      	movs	r1, #1
 8008a88:	4620      	mov	r0, r4
 8008a8a:	f7ff fd69 	bl	8008560 <rshift>
 8008a8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008a92:	3501      	adds	r5, #1
 8008a94:	42ab      	cmp	r3, r5
 8008a96:	f6ff aed0 	blt.w	800883a <__gethex+0x20a>
 8008a9a:	2701      	movs	r7, #1
 8008a9c:	e7c0      	b.n	8008a20 <__gethex+0x3f0>
 8008a9e:	f016 061f 	ands.w	r6, r6, #31
 8008aa2:	d0fa      	beq.n	8008a9a <__gethex+0x46a>
 8008aa4:	449a      	add	sl, r3
 8008aa6:	f1c6 0620 	rsb	r6, r6, #32
 8008aaa:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8008aae:	f000 f9e9 	bl	8008e84 <__hi0bits>
 8008ab2:	42b0      	cmp	r0, r6
 8008ab4:	dbe7      	blt.n	8008a86 <__gethex+0x456>
 8008ab6:	e7f0      	b.n	8008a9a <__gethex+0x46a>
 8008ab8:	0800be1c 	.word	0x0800be1c

08008abc <L_shift>:
 8008abc:	f1c2 0208 	rsb	r2, r2, #8
 8008ac0:	0092      	lsls	r2, r2, #2
 8008ac2:	b570      	push	{r4, r5, r6, lr}
 8008ac4:	f1c2 0620 	rsb	r6, r2, #32
 8008ac8:	6843      	ldr	r3, [r0, #4]
 8008aca:	6804      	ldr	r4, [r0, #0]
 8008acc:	fa03 f506 	lsl.w	r5, r3, r6
 8008ad0:	432c      	orrs	r4, r5
 8008ad2:	40d3      	lsrs	r3, r2
 8008ad4:	6004      	str	r4, [r0, #0]
 8008ad6:	f840 3f04 	str.w	r3, [r0, #4]!
 8008ada:	4288      	cmp	r0, r1
 8008adc:	d3f4      	bcc.n	8008ac8 <L_shift+0xc>
 8008ade:	bd70      	pop	{r4, r5, r6, pc}

08008ae0 <__match>:
 8008ae0:	b530      	push	{r4, r5, lr}
 8008ae2:	6803      	ldr	r3, [r0, #0]
 8008ae4:	3301      	adds	r3, #1
 8008ae6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008aea:	b914      	cbnz	r4, 8008af2 <__match+0x12>
 8008aec:	6003      	str	r3, [r0, #0]
 8008aee:	2001      	movs	r0, #1
 8008af0:	bd30      	pop	{r4, r5, pc}
 8008af2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008af6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008afa:	2d19      	cmp	r5, #25
 8008afc:	bf98      	it	ls
 8008afe:	3220      	addls	r2, #32
 8008b00:	42a2      	cmp	r2, r4
 8008b02:	d0f0      	beq.n	8008ae6 <__match+0x6>
 8008b04:	2000      	movs	r0, #0
 8008b06:	e7f3      	b.n	8008af0 <__match+0x10>

08008b08 <__hexnan>:
 8008b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b0c:	680b      	ldr	r3, [r1, #0]
 8008b0e:	6801      	ldr	r1, [r0, #0]
 8008b10:	115e      	asrs	r6, r3, #5
 8008b12:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008b16:	f013 031f 	ands.w	r3, r3, #31
 8008b1a:	b087      	sub	sp, #28
 8008b1c:	bf18      	it	ne
 8008b1e:	3604      	addne	r6, #4
 8008b20:	2500      	movs	r5, #0
 8008b22:	1f37      	subs	r7, r6, #4
 8008b24:	4682      	mov	sl, r0
 8008b26:	4690      	mov	r8, r2
 8008b28:	9301      	str	r3, [sp, #4]
 8008b2a:	f846 5c04 	str.w	r5, [r6, #-4]
 8008b2e:	46b9      	mov	r9, r7
 8008b30:	463c      	mov	r4, r7
 8008b32:	9502      	str	r5, [sp, #8]
 8008b34:	46ab      	mov	fp, r5
 8008b36:	784a      	ldrb	r2, [r1, #1]
 8008b38:	1c4b      	adds	r3, r1, #1
 8008b3a:	9303      	str	r3, [sp, #12]
 8008b3c:	b342      	cbz	r2, 8008b90 <__hexnan+0x88>
 8008b3e:	4610      	mov	r0, r2
 8008b40:	9105      	str	r1, [sp, #20]
 8008b42:	9204      	str	r2, [sp, #16]
 8008b44:	f7ff fd5e 	bl	8008604 <__hexdig_fun>
 8008b48:	2800      	cmp	r0, #0
 8008b4a:	d14f      	bne.n	8008bec <__hexnan+0xe4>
 8008b4c:	9a04      	ldr	r2, [sp, #16]
 8008b4e:	9905      	ldr	r1, [sp, #20]
 8008b50:	2a20      	cmp	r2, #32
 8008b52:	d818      	bhi.n	8008b86 <__hexnan+0x7e>
 8008b54:	9b02      	ldr	r3, [sp, #8]
 8008b56:	459b      	cmp	fp, r3
 8008b58:	dd13      	ble.n	8008b82 <__hexnan+0x7a>
 8008b5a:	454c      	cmp	r4, r9
 8008b5c:	d206      	bcs.n	8008b6c <__hexnan+0x64>
 8008b5e:	2d07      	cmp	r5, #7
 8008b60:	dc04      	bgt.n	8008b6c <__hexnan+0x64>
 8008b62:	462a      	mov	r2, r5
 8008b64:	4649      	mov	r1, r9
 8008b66:	4620      	mov	r0, r4
 8008b68:	f7ff ffa8 	bl	8008abc <L_shift>
 8008b6c:	4544      	cmp	r4, r8
 8008b6e:	d950      	bls.n	8008c12 <__hexnan+0x10a>
 8008b70:	2300      	movs	r3, #0
 8008b72:	f1a4 0904 	sub.w	r9, r4, #4
 8008b76:	f844 3c04 	str.w	r3, [r4, #-4]
 8008b7a:	f8cd b008 	str.w	fp, [sp, #8]
 8008b7e:	464c      	mov	r4, r9
 8008b80:	461d      	mov	r5, r3
 8008b82:	9903      	ldr	r1, [sp, #12]
 8008b84:	e7d7      	b.n	8008b36 <__hexnan+0x2e>
 8008b86:	2a29      	cmp	r2, #41	; 0x29
 8008b88:	d156      	bne.n	8008c38 <__hexnan+0x130>
 8008b8a:	3102      	adds	r1, #2
 8008b8c:	f8ca 1000 	str.w	r1, [sl]
 8008b90:	f1bb 0f00 	cmp.w	fp, #0
 8008b94:	d050      	beq.n	8008c38 <__hexnan+0x130>
 8008b96:	454c      	cmp	r4, r9
 8008b98:	d206      	bcs.n	8008ba8 <__hexnan+0xa0>
 8008b9a:	2d07      	cmp	r5, #7
 8008b9c:	dc04      	bgt.n	8008ba8 <__hexnan+0xa0>
 8008b9e:	462a      	mov	r2, r5
 8008ba0:	4649      	mov	r1, r9
 8008ba2:	4620      	mov	r0, r4
 8008ba4:	f7ff ff8a 	bl	8008abc <L_shift>
 8008ba8:	4544      	cmp	r4, r8
 8008baa:	d934      	bls.n	8008c16 <__hexnan+0x10e>
 8008bac:	f1a8 0204 	sub.w	r2, r8, #4
 8008bb0:	4623      	mov	r3, r4
 8008bb2:	f853 1b04 	ldr.w	r1, [r3], #4
 8008bb6:	f842 1f04 	str.w	r1, [r2, #4]!
 8008bba:	429f      	cmp	r7, r3
 8008bbc:	d2f9      	bcs.n	8008bb2 <__hexnan+0xaa>
 8008bbe:	1b3b      	subs	r3, r7, r4
 8008bc0:	f023 0303 	bic.w	r3, r3, #3
 8008bc4:	3304      	adds	r3, #4
 8008bc6:	3401      	adds	r4, #1
 8008bc8:	3e03      	subs	r6, #3
 8008bca:	42b4      	cmp	r4, r6
 8008bcc:	bf88      	it	hi
 8008bce:	2304      	movhi	r3, #4
 8008bd0:	4443      	add	r3, r8
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	f843 2b04 	str.w	r2, [r3], #4
 8008bd8:	429f      	cmp	r7, r3
 8008bda:	d2fb      	bcs.n	8008bd4 <__hexnan+0xcc>
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	b91b      	cbnz	r3, 8008be8 <__hexnan+0xe0>
 8008be0:	4547      	cmp	r7, r8
 8008be2:	d127      	bne.n	8008c34 <__hexnan+0x12c>
 8008be4:	2301      	movs	r3, #1
 8008be6:	603b      	str	r3, [r7, #0]
 8008be8:	2005      	movs	r0, #5
 8008bea:	e026      	b.n	8008c3a <__hexnan+0x132>
 8008bec:	3501      	adds	r5, #1
 8008bee:	2d08      	cmp	r5, #8
 8008bf0:	f10b 0b01 	add.w	fp, fp, #1
 8008bf4:	dd06      	ble.n	8008c04 <__hexnan+0xfc>
 8008bf6:	4544      	cmp	r4, r8
 8008bf8:	d9c3      	bls.n	8008b82 <__hexnan+0x7a>
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	f844 3c04 	str.w	r3, [r4, #-4]
 8008c00:	2501      	movs	r5, #1
 8008c02:	3c04      	subs	r4, #4
 8008c04:	6822      	ldr	r2, [r4, #0]
 8008c06:	f000 000f 	and.w	r0, r0, #15
 8008c0a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008c0e:	6022      	str	r2, [r4, #0]
 8008c10:	e7b7      	b.n	8008b82 <__hexnan+0x7a>
 8008c12:	2508      	movs	r5, #8
 8008c14:	e7b5      	b.n	8008b82 <__hexnan+0x7a>
 8008c16:	9b01      	ldr	r3, [sp, #4]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d0df      	beq.n	8008bdc <__hexnan+0xd4>
 8008c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c20:	f1c3 0320 	rsb	r3, r3, #32
 8008c24:	fa22 f303 	lsr.w	r3, r2, r3
 8008c28:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008c2c:	401a      	ands	r2, r3
 8008c2e:	f846 2c04 	str.w	r2, [r6, #-4]
 8008c32:	e7d3      	b.n	8008bdc <__hexnan+0xd4>
 8008c34:	3f04      	subs	r7, #4
 8008c36:	e7d1      	b.n	8008bdc <__hexnan+0xd4>
 8008c38:	2004      	movs	r0, #4
 8008c3a:	b007      	add	sp, #28
 8008c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008c40 <_localeconv_r>:
 8008c40:	4800      	ldr	r0, [pc, #0]	; (8008c44 <_localeconv_r+0x4>)
 8008c42:	4770      	bx	lr
 8008c44:	200001cc 	.word	0x200001cc

08008c48 <malloc>:
 8008c48:	4b02      	ldr	r3, [pc, #8]	; (8008c54 <malloc+0xc>)
 8008c4a:	4601      	mov	r1, r0
 8008c4c:	6818      	ldr	r0, [r3, #0]
 8008c4e:	f000 bd3d 	b.w	80096cc <_malloc_r>
 8008c52:	bf00      	nop
 8008c54:	20000074 	.word	0x20000074

08008c58 <__ascii_mbtowc>:
 8008c58:	b082      	sub	sp, #8
 8008c5a:	b901      	cbnz	r1, 8008c5e <__ascii_mbtowc+0x6>
 8008c5c:	a901      	add	r1, sp, #4
 8008c5e:	b142      	cbz	r2, 8008c72 <__ascii_mbtowc+0x1a>
 8008c60:	b14b      	cbz	r3, 8008c76 <__ascii_mbtowc+0x1e>
 8008c62:	7813      	ldrb	r3, [r2, #0]
 8008c64:	600b      	str	r3, [r1, #0]
 8008c66:	7812      	ldrb	r2, [r2, #0]
 8008c68:	1e10      	subs	r0, r2, #0
 8008c6a:	bf18      	it	ne
 8008c6c:	2001      	movne	r0, #1
 8008c6e:	b002      	add	sp, #8
 8008c70:	4770      	bx	lr
 8008c72:	4610      	mov	r0, r2
 8008c74:	e7fb      	b.n	8008c6e <__ascii_mbtowc+0x16>
 8008c76:	f06f 0001 	mvn.w	r0, #1
 8008c7a:	e7f8      	b.n	8008c6e <__ascii_mbtowc+0x16>

08008c7c <memcpy>:
 8008c7c:	440a      	add	r2, r1
 8008c7e:	4291      	cmp	r1, r2
 8008c80:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c84:	d100      	bne.n	8008c88 <memcpy+0xc>
 8008c86:	4770      	bx	lr
 8008c88:	b510      	push	{r4, lr}
 8008c8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c92:	4291      	cmp	r1, r2
 8008c94:	d1f9      	bne.n	8008c8a <memcpy+0xe>
 8008c96:	bd10      	pop	{r4, pc}

08008c98 <_Balloc>:
 8008c98:	b570      	push	{r4, r5, r6, lr}
 8008c9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008c9c:	4604      	mov	r4, r0
 8008c9e:	460d      	mov	r5, r1
 8008ca0:	b976      	cbnz	r6, 8008cc0 <_Balloc+0x28>
 8008ca2:	2010      	movs	r0, #16
 8008ca4:	f7ff ffd0 	bl	8008c48 <malloc>
 8008ca8:	4602      	mov	r2, r0
 8008caa:	6260      	str	r0, [r4, #36]	; 0x24
 8008cac:	b920      	cbnz	r0, 8008cb8 <_Balloc+0x20>
 8008cae:	4b18      	ldr	r3, [pc, #96]	; (8008d10 <_Balloc+0x78>)
 8008cb0:	4818      	ldr	r0, [pc, #96]	; (8008d14 <_Balloc+0x7c>)
 8008cb2:	2166      	movs	r1, #102	; 0x66
 8008cb4:	f000 fef8 	bl	8009aa8 <__assert_func>
 8008cb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008cbc:	6006      	str	r6, [r0, #0]
 8008cbe:	60c6      	str	r6, [r0, #12]
 8008cc0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008cc2:	68f3      	ldr	r3, [r6, #12]
 8008cc4:	b183      	cbz	r3, 8008ce8 <_Balloc+0x50>
 8008cc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cc8:	68db      	ldr	r3, [r3, #12]
 8008cca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008cce:	b9b8      	cbnz	r0, 8008d00 <_Balloc+0x68>
 8008cd0:	2101      	movs	r1, #1
 8008cd2:	fa01 f605 	lsl.w	r6, r1, r5
 8008cd6:	1d72      	adds	r2, r6, #5
 8008cd8:	0092      	lsls	r2, r2, #2
 8008cda:	4620      	mov	r0, r4
 8008cdc:	f000 fc97 	bl	800960e <_calloc_r>
 8008ce0:	b160      	cbz	r0, 8008cfc <_Balloc+0x64>
 8008ce2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008ce6:	e00e      	b.n	8008d06 <_Balloc+0x6e>
 8008ce8:	2221      	movs	r2, #33	; 0x21
 8008cea:	2104      	movs	r1, #4
 8008cec:	4620      	mov	r0, r4
 8008cee:	f000 fc8e 	bl	800960e <_calloc_r>
 8008cf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cf4:	60f0      	str	r0, [r6, #12]
 8008cf6:	68db      	ldr	r3, [r3, #12]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d1e4      	bne.n	8008cc6 <_Balloc+0x2e>
 8008cfc:	2000      	movs	r0, #0
 8008cfe:	bd70      	pop	{r4, r5, r6, pc}
 8008d00:	6802      	ldr	r2, [r0, #0]
 8008d02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008d06:	2300      	movs	r3, #0
 8008d08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008d0c:	e7f7      	b.n	8008cfe <_Balloc+0x66>
 8008d0e:	bf00      	nop
 8008d10:	0800bda6 	.word	0x0800bda6
 8008d14:	0800beac 	.word	0x0800beac

08008d18 <_Bfree>:
 8008d18:	b570      	push	{r4, r5, r6, lr}
 8008d1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008d1c:	4605      	mov	r5, r0
 8008d1e:	460c      	mov	r4, r1
 8008d20:	b976      	cbnz	r6, 8008d40 <_Bfree+0x28>
 8008d22:	2010      	movs	r0, #16
 8008d24:	f7ff ff90 	bl	8008c48 <malloc>
 8008d28:	4602      	mov	r2, r0
 8008d2a:	6268      	str	r0, [r5, #36]	; 0x24
 8008d2c:	b920      	cbnz	r0, 8008d38 <_Bfree+0x20>
 8008d2e:	4b09      	ldr	r3, [pc, #36]	; (8008d54 <_Bfree+0x3c>)
 8008d30:	4809      	ldr	r0, [pc, #36]	; (8008d58 <_Bfree+0x40>)
 8008d32:	218a      	movs	r1, #138	; 0x8a
 8008d34:	f000 feb8 	bl	8009aa8 <__assert_func>
 8008d38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d3c:	6006      	str	r6, [r0, #0]
 8008d3e:	60c6      	str	r6, [r0, #12]
 8008d40:	b13c      	cbz	r4, 8008d52 <_Bfree+0x3a>
 8008d42:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008d44:	6862      	ldr	r2, [r4, #4]
 8008d46:	68db      	ldr	r3, [r3, #12]
 8008d48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008d4c:	6021      	str	r1, [r4, #0]
 8008d4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008d52:	bd70      	pop	{r4, r5, r6, pc}
 8008d54:	0800bda6 	.word	0x0800bda6
 8008d58:	0800beac 	.word	0x0800beac

08008d5c <__multadd>:
 8008d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d60:	690e      	ldr	r6, [r1, #16]
 8008d62:	4607      	mov	r7, r0
 8008d64:	4698      	mov	r8, r3
 8008d66:	460c      	mov	r4, r1
 8008d68:	f101 0014 	add.w	r0, r1, #20
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	6805      	ldr	r5, [r0, #0]
 8008d70:	b2a9      	uxth	r1, r5
 8008d72:	fb02 8101 	mla	r1, r2, r1, r8
 8008d76:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008d7a:	0c2d      	lsrs	r5, r5, #16
 8008d7c:	fb02 c505 	mla	r5, r2, r5, ip
 8008d80:	b289      	uxth	r1, r1
 8008d82:	3301      	adds	r3, #1
 8008d84:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008d88:	429e      	cmp	r6, r3
 8008d8a:	f840 1b04 	str.w	r1, [r0], #4
 8008d8e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008d92:	dcec      	bgt.n	8008d6e <__multadd+0x12>
 8008d94:	f1b8 0f00 	cmp.w	r8, #0
 8008d98:	d022      	beq.n	8008de0 <__multadd+0x84>
 8008d9a:	68a3      	ldr	r3, [r4, #8]
 8008d9c:	42b3      	cmp	r3, r6
 8008d9e:	dc19      	bgt.n	8008dd4 <__multadd+0x78>
 8008da0:	6861      	ldr	r1, [r4, #4]
 8008da2:	4638      	mov	r0, r7
 8008da4:	3101      	adds	r1, #1
 8008da6:	f7ff ff77 	bl	8008c98 <_Balloc>
 8008daa:	4605      	mov	r5, r0
 8008dac:	b928      	cbnz	r0, 8008dba <__multadd+0x5e>
 8008dae:	4602      	mov	r2, r0
 8008db0:	4b0d      	ldr	r3, [pc, #52]	; (8008de8 <__multadd+0x8c>)
 8008db2:	480e      	ldr	r0, [pc, #56]	; (8008dec <__multadd+0x90>)
 8008db4:	21b5      	movs	r1, #181	; 0xb5
 8008db6:	f000 fe77 	bl	8009aa8 <__assert_func>
 8008dba:	6922      	ldr	r2, [r4, #16]
 8008dbc:	3202      	adds	r2, #2
 8008dbe:	f104 010c 	add.w	r1, r4, #12
 8008dc2:	0092      	lsls	r2, r2, #2
 8008dc4:	300c      	adds	r0, #12
 8008dc6:	f7ff ff59 	bl	8008c7c <memcpy>
 8008dca:	4621      	mov	r1, r4
 8008dcc:	4638      	mov	r0, r7
 8008dce:	f7ff ffa3 	bl	8008d18 <_Bfree>
 8008dd2:	462c      	mov	r4, r5
 8008dd4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008dd8:	3601      	adds	r6, #1
 8008dda:	f8c3 8014 	str.w	r8, [r3, #20]
 8008dde:	6126      	str	r6, [r4, #16]
 8008de0:	4620      	mov	r0, r4
 8008de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008de6:	bf00      	nop
 8008de8:	0800be1c 	.word	0x0800be1c
 8008dec:	0800beac 	.word	0x0800beac

08008df0 <__s2b>:
 8008df0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008df4:	460c      	mov	r4, r1
 8008df6:	4615      	mov	r5, r2
 8008df8:	461f      	mov	r7, r3
 8008dfa:	2209      	movs	r2, #9
 8008dfc:	3308      	adds	r3, #8
 8008dfe:	4606      	mov	r6, r0
 8008e00:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e04:	2100      	movs	r1, #0
 8008e06:	2201      	movs	r2, #1
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	db09      	blt.n	8008e20 <__s2b+0x30>
 8008e0c:	4630      	mov	r0, r6
 8008e0e:	f7ff ff43 	bl	8008c98 <_Balloc>
 8008e12:	b940      	cbnz	r0, 8008e26 <__s2b+0x36>
 8008e14:	4602      	mov	r2, r0
 8008e16:	4b19      	ldr	r3, [pc, #100]	; (8008e7c <__s2b+0x8c>)
 8008e18:	4819      	ldr	r0, [pc, #100]	; (8008e80 <__s2b+0x90>)
 8008e1a:	21ce      	movs	r1, #206	; 0xce
 8008e1c:	f000 fe44 	bl	8009aa8 <__assert_func>
 8008e20:	0052      	lsls	r2, r2, #1
 8008e22:	3101      	adds	r1, #1
 8008e24:	e7f0      	b.n	8008e08 <__s2b+0x18>
 8008e26:	9b08      	ldr	r3, [sp, #32]
 8008e28:	6143      	str	r3, [r0, #20]
 8008e2a:	2d09      	cmp	r5, #9
 8008e2c:	f04f 0301 	mov.w	r3, #1
 8008e30:	6103      	str	r3, [r0, #16]
 8008e32:	dd16      	ble.n	8008e62 <__s2b+0x72>
 8008e34:	f104 0909 	add.w	r9, r4, #9
 8008e38:	46c8      	mov	r8, r9
 8008e3a:	442c      	add	r4, r5
 8008e3c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008e40:	4601      	mov	r1, r0
 8008e42:	3b30      	subs	r3, #48	; 0x30
 8008e44:	220a      	movs	r2, #10
 8008e46:	4630      	mov	r0, r6
 8008e48:	f7ff ff88 	bl	8008d5c <__multadd>
 8008e4c:	45a0      	cmp	r8, r4
 8008e4e:	d1f5      	bne.n	8008e3c <__s2b+0x4c>
 8008e50:	f1a5 0408 	sub.w	r4, r5, #8
 8008e54:	444c      	add	r4, r9
 8008e56:	1b2d      	subs	r5, r5, r4
 8008e58:	1963      	adds	r3, r4, r5
 8008e5a:	42bb      	cmp	r3, r7
 8008e5c:	db04      	blt.n	8008e68 <__s2b+0x78>
 8008e5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e62:	340a      	adds	r4, #10
 8008e64:	2509      	movs	r5, #9
 8008e66:	e7f6      	b.n	8008e56 <__s2b+0x66>
 8008e68:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008e6c:	4601      	mov	r1, r0
 8008e6e:	3b30      	subs	r3, #48	; 0x30
 8008e70:	220a      	movs	r2, #10
 8008e72:	4630      	mov	r0, r6
 8008e74:	f7ff ff72 	bl	8008d5c <__multadd>
 8008e78:	e7ee      	b.n	8008e58 <__s2b+0x68>
 8008e7a:	bf00      	nop
 8008e7c:	0800be1c 	.word	0x0800be1c
 8008e80:	0800beac 	.word	0x0800beac

08008e84 <__hi0bits>:
 8008e84:	0c03      	lsrs	r3, r0, #16
 8008e86:	041b      	lsls	r3, r3, #16
 8008e88:	b9d3      	cbnz	r3, 8008ec0 <__hi0bits+0x3c>
 8008e8a:	0400      	lsls	r0, r0, #16
 8008e8c:	2310      	movs	r3, #16
 8008e8e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008e92:	bf04      	itt	eq
 8008e94:	0200      	lsleq	r0, r0, #8
 8008e96:	3308      	addeq	r3, #8
 8008e98:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008e9c:	bf04      	itt	eq
 8008e9e:	0100      	lsleq	r0, r0, #4
 8008ea0:	3304      	addeq	r3, #4
 8008ea2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008ea6:	bf04      	itt	eq
 8008ea8:	0080      	lsleq	r0, r0, #2
 8008eaa:	3302      	addeq	r3, #2
 8008eac:	2800      	cmp	r0, #0
 8008eae:	db05      	blt.n	8008ebc <__hi0bits+0x38>
 8008eb0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008eb4:	f103 0301 	add.w	r3, r3, #1
 8008eb8:	bf08      	it	eq
 8008eba:	2320      	moveq	r3, #32
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	4770      	bx	lr
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	e7e4      	b.n	8008e8e <__hi0bits+0xa>

08008ec4 <__lo0bits>:
 8008ec4:	6803      	ldr	r3, [r0, #0]
 8008ec6:	f013 0207 	ands.w	r2, r3, #7
 8008eca:	4601      	mov	r1, r0
 8008ecc:	d00b      	beq.n	8008ee6 <__lo0bits+0x22>
 8008ece:	07da      	lsls	r2, r3, #31
 8008ed0:	d424      	bmi.n	8008f1c <__lo0bits+0x58>
 8008ed2:	0798      	lsls	r0, r3, #30
 8008ed4:	bf49      	itett	mi
 8008ed6:	085b      	lsrmi	r3, r3, #1
 8008ed8:	089b      	lsrpl	r3, r3, #2
 8008eda:	2001      	movmi	r0, #1
 8008edc:	600b      	strmi	r3, [r1, #0]
 8008ede:	bf5c      	itt	pl
 8008ee0:	600b      	strpl	r3, [r1, #0]
 8008ee2:	2002      	movpl	r0, #2
 8008ee4:	4770      	bx	lr
 8008ee6:	b298      	uxth	r0, r3
 8008ee8:	b9b0      	cbnz	r0, 8008f18 <__lo0bits+0x54>
 8008eea:	0c1b      	lsrs	r3, r3, #16
 8008eec:	2010      	movs	r0, #16
 8008eee:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008ef2:	bf04      	itt	eq
 8008ef4:	0a1b      	lsreq	r3, r3, #8
 8008ef6:	3008      	addeq	r0, #8
 8008ef8:	071a      	lsls	r2, r3, #28
 8008efa:	bf04      	itt	eq
 8008efc:	091b      	lsreq	r3, r3, #4
 8008efe:	3004      	addeq	r0, #4
 8008f00:	079a      	lsls	r2, r3, #30
 8008f02:	bf04      	itt	eq
 8008f04:	089b      	lsreq	r3, r3, #2
 8008f06:	3002      	addeq	r0, #2
 8008f08:	07da      	lsls	r2, r3, #31
 8008f0a:	d403      	bmi.n	8008f14 <__lo0bits+0x50>
 8008f0c:	085b      	lsrs	r3, r3, #1
 8008f0e:	f100 0001 	add.w	r0, r0, #1
 8008f12:	d005      	beq.n	8008f20 <__lo0bits+0x5c>
 8008f14:	600b      	str	r3, [r1, #0]
 8008f16:	4770      	bx	lr
 8008f18:	4610      	mov	r0, r2
 8008f1a:	e7e8      	b.n	8008eee <__lo0bits+0x2a>
 8008f1c:	2000      	movs	r0, #0
 8008f1e:	4770      	bx	lr
 8008f20:	2020      	movs	r0, #32
 8008f22:	4770      	bx	lr

08008f24 <__i2b>:
 8008f24:	b510      	push	{r4, lr}
 8008f26:	460c      	mov	r4, r1
 8008f28:	2101      	movs	r1, #1
 8008f2a:	f7ff feb5 	bl	8008c98 <_Balloc>
 8008f2e:	4602      	mov	r2, r0
 8008f30:	b928      	cbnz	r0, 8008f3e <__i2b+0x1a>
 8008f32:	4b05      	ldr	r3, [pc, #20]	; (8008f48 <__i2b+0x24>)
 8008f34:	4805      	ldr	r0, [pc, #20]	; (8008f4c <__i2b+0x28>)
 8008f36:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008f3a:	f000 fdb5 	bl	8009aa8 <__assert_func>
 8008f3e:	2301      	movs	r3, #1
 8008f40:	6144      	str	r4, [r0, #20]
 8008f42:	6103      	str	r3, [r0, #16]
 8008f44:	bd10      	pop	{r4, pc}
 8008f46:	bf00      	nop
 8008f48:	0800be1c 	.word	0x0800be1c
 8008f4c:	0800beac 	.word	0x0800beac

08008f50 <__multiply>:
 8008f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f54:	4614      	mov	r4, r2
 8008f56:	690a      	ldr	r2, [r1, #16]
 8008f58:	6923      	ldr	r3, [r4, #16]
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	bfb8      	it	lt
 8008f5e:	460b      	movlt	r3, r1
 8008f60:	460d      	mov	r5, r1
 8008f62:	bfbc      	itt	lt
 8008f64:	4625      	movlt	r5, r4
 8008f66:	461c      	movlt	r4, r3
 8008f68:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008f6c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008f70:	68ab      	ldr	r3, [r5, #8]
 8008f72:	6869      	ldr	r1, [r5, #4]
 8008f74:	eb0a 0709 	add.w	r7, sl, r9
 8008f78:	42bb      	cmp	r3, r7
 8008f7a:	b085      	sub	sp, #20
 8008f7c:	bfb8      	it	lt
 8008f7e:	3101      	addlt	r1, #1
 8008f80:	f7ff fe8a 	bl	8008c98 <_Balloc>
 8008f84:	b930      	cbnz	r0, 8008f94 <__multiply+0x44>
 8008f86:	4602      	mov	r2, r0
 8008f88:	4b42      	ldr	r3, [pc, #264]	; (8009094 <__multiply+0x144>)
 8008f8a:	4843      	ldr	r0, [pc, #268]	; (8009098 <__multiply+0x148>)
 8008f8c:	f240 115d 	movw	r1, #349	; 0x15d
 8008f90:	f000 fd8a 	bl	8009aa8 <__assert_func>
 8008f94:	f100 0614 	add.w	r6, r0, #20
 8008f98:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008f9c:	4633      	mov	r3, r6
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	4543      	cmp	r3, r8
 8008fa2:	d31e      	bcc.n	8008fe2 <__multiply+0x92>
 8008fa4:	f105 0c14 	add.w	ip, r5, #20
 8008fa8:	f104 0314 	add.w	r3, r4, #20
 8008fac:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008fb0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008fb4:	9202      	str	r2, [sp, #8]
 8008fb6:	ebac 0205 	sub.w	r2, ip, r5
 8008fba:	3a15      	subs	r2, #21
 8008fbc:	f022 0203 	bic.w	r2, r2, #3
 8008fc0:	3204      	adds	r2, #4
 8008fc2:	f105 0115 	add.w	r1, r5, #21
 8008fc6:	458c      	cmp	ip, r1
 8008fc8:	bf38      	it	cc
 8008fca:	2204      	movcc	r2, #4
 8008fcc:	9201      	str	r2, [sp, #4]
 8008fce:	9a02      	ldr	r2, [sp, #8]
 8008fd0:	9303      	str	r3, [sp, #12]
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	d808      	bhi.n	8008fe8 <__multiply+0x98>
 8008fd6:	2f00      	cmp	r7, #0
 8008fd8:	dc55      	bgt.n	8009086 <__multiply+0x136>
 8008fda:	6107      	str	r7, [r0, #16]
 8008fdc:	b005      	add	sp, #20
 8008fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fe2:	f843 2b04 	str.w	r2, [r3], #4
 8008fe6:	e7db      	b.n	8008fa0 <__multiply+0x50>
 8008fe8:	f8b3 a000 	ldrh.w	sl, [r3]
 8008fec:	f1ba 0f00 	cmp.w	sl, #0
 8008ff0:	d020      	beq.n	8009034 <__multiply+0xe4>
 8008ff2:	f105 0e14 	add.w	lr, r5, #20
 8008ff6:	46b1      	mov	r9, r6
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008ffe:	f8d9 b000 	ldr.w	fp, [r9]
 8009002:	b2a1      	uxth	r1, r4
 8009004:	fa1f fb8b 	uxth.w	fp, fp
 8009008:	fb0a b101 	mla	r1, sl, r1, fp
 800900c:	4411      	add	r1, r2
 800900e:	f8d9 2000 	ldr.w	r2, [r9]
 8009012:	0c24      	lsrs	r4, r4, #16
 8009014:	0c12      	lsrs	r2, r2, #16
 8009016:	fb0a 2404 	mla	r4, sl, r4, r2
 800901a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800901e:	b289      	uxth	r1, r1
 8009020:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009024:	45f4      	cmp	ip, lr
 8009026:	f849 1b04 	str.w	r1, [r9], #4
 800902a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800902e:	d8e4      	bhi.n	8008ffa <__multiply+0xaa>
 8009030:	9901      	ldr	r1, [sp, #4]
 8009032:	5072      	str	r2, [r6, r1]
 8009034:	9a03      	ldr	r2, [sp, #12]
 8009036:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800903a:	3304      	adds	r3, #4
 800903c:	f1b9 0f00 	cmp.w	r9, #0
 8009040:	d01f      	beq.n	8009082 <__multiply+0x132>
 8009042:	6834      	ldr	r4, [r6, #0]
 8009044:	f105 0114 	add.w	r1, r5, #20
 8009048:	46b6      	mov	lr, r6
 800904a:	f04f 0a00 	mov.w	sl, #0
 800904e:	880a      	ldrh	r2, [r1, #0]
 8009050:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009054:	fb09 b202 	mla	r2, r9, r2, fp
 8009058:	4492      	add	sl, r2
 800905a:	b2a4      	uxth	r4, r4
 800905c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009060:	f84e 4b04 	str.w	r4, [lr], #4
 8009064:	f851 4b04 	ldr.w	r4, [r1], #4
 8009068:	f8be 2000 	ldrh.w	r2, [lr]
 800906c:	0c24      	lsrs	r4, r4, #16
 800906e:	fb09 2404 	mla	r4, r9, r4, r2
 8009072:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009076:	458c      	cmp	ip, r1
 8009078:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800907c:	d8e7      	bhi.n	800904e <__multiply+0xfe>
 800907e:	9a01      	ldr	r2, [sp, #4]
 8009080:	50b4      	str	r4, [r6, r2]
 8009082:	3604      	adds	r6, #4
 8009084:	e7a3      	b.n	8008fce <__multiply+0x7e>
 8009086:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800908a:	2b00      	cmp	r3, #0
 800908c:	d1a5      	bne.n	8008fda <__multiply+0x8a>
 800908e:	3f01      	subs	r7, #1
 8009090:	e7a1      	b.n	8008fd6 <__multiply+0x86>
 8009092:	bf00      	nop
 8009094:	0800be1c 	.word	0x0800be1c
 8009098:	0800beac 	.word	0x0800beac

0800909c <__pow5mult>:
 800909c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090a0:	4615      	mov	r5, r2
 80090a2:	f012 0203 	ands.w	r2, r2, #3
 80090a6:	4606      	mov	r6, r0
 80090a8:	460f      	mov	r7, r1
 80090aa:	d007      	beq.n	80090bc <__pow5mult+0x20>
 80090ac:	4c25      	ldr	r4, [pc, #148]	; (8009144 <__pow5mult+0xa8>)
 80090ae:	3a01      	subs	r2, #1
 80090b0:	2300      	movs	r3, #0
 80090b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80090b6:	f7ff fe51 	bl	8008d5c <__multadd>
 80090ba:	4607      	mov	r7, r0
 80090bc:	10ad      	asrs	r5, r5, #2
 80090be:	d03d      	beq.n	800913c <__pow5mult+0xa0>
 80090c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80090c2:	b97c      	cbnz	r4, 80090e4 <__pow5mult+0x48>
 80090c4:	2010      	movs	r0, #16
 80090c6:	f7ff fdbf 	bl	8008c48 <malloc>
 80090ca:	4602      	mov	r2, r0
 80090cc:	6270      	str	r0, [r6, #36]	; 0x24
 80090ce:	b928      	cbnz	r0, 80090dc <__pow5mult+0x40>
 80090d0:	4b1d      	ldr	r3, [pc, #116]	; (8009148 <__pow5mult+0xac>)
 80090d2:	481e      	ldr	r0, [pc, #120]	; (800914c <__pow5mult+0xb0>)
 80090d4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80090d8:	f000 fce6 	bl	8009aa8 <__assert_func>
 80090dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80090e0:	6004      	str	r4, [r0, #0]
 80090e2:	60c4      	str	r4, [r0, #12]
 80090e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80090e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80090ec:	b94c      	cbnz	r4, 8009102 <__pow5mult+0x66>
 80090ee:	f240 2171 	movw	r1, #625	; 0x271
 80090f2:	4630      	mov	r0, r6
 80090f4:	f7ff ff16 	bl	8008f24 <__i2b>
 80090f8:	2300      	movs	r3, #0
 80090fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80090fe:	4604      	mov	r4, r0
 8009100:	6003      	str	r3, [r0, #0]
 8009102:	f04f 0900 	mov.w	r9, #0
 8009106:	07eb      	lsls	r3, r5, #31
 8009108:	d50a      	bpl.n	8009120 <__pow5mult+0x84>
 800910a:	4639      	mov	r1, r7
 800910c:	4622      	mov	r2, r4
 800910e:	4630      	mov	r0, r6
 8009110:	f7ff ff1e 	bl	8008f50 <__multiply>
 8009114:	4639      	mov	r1, r7
 8009116:	4680      	mov	r8, r0
 8009118:	4630      	mov	r0, r6
 800911a:	f7ff fdfd 	bl	8008d18 <_Bfree>
 800911e:	4647      	mov	r7, r8
 8009120:	106d      	asrs	r5, r5, #1
 8009122:	d00b      	beq.n	800913c <__pow5mult+0xa0>
 8009124:	6820      	ldr	r0, [r4, #0]
 8009126:	b938      	cbnz	r0, 8009138 <__pow5mult+0x9c>
 8009128:	4622      	mov	r2, r4
 800912a:	4621      	mov	r1, r4
 800912c:	4630      	mov	r0, r6
 800912e:	f7ff ff0f 	bl	8008f50 <__multiply>
 8009132:	6020      	str	r0, [r4, #0]
 8009134:	f8c0 9000 	str.w	r9, [r0]
 8009138:	4604      	mov	r4, r0
 800913a:	e7e4      	b.n	8009106 <__pow5mult+0x6a>
 800913c:	4638      	mov	r0, r7
 800913e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009142:	bf00      	nop
 8009144:	0800c000 	.word	0x0800c000
 8009148:	0800bda6 	.word	0x0800bda6
 800914c:	0800beac 	.word	0x0800beac

08009150 <__lshift>:
 8009150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009154:	460c      	mov	r4, r1
 8009156:	6849      	ldr	r1, [r1, #4]
 8009158:	6923      	ldr	r3, [r4, #16]
 800915a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800915e:	68a3      	ldr	r3, [r4, #8]
 8009160:	4607      	mov	r7, r0
 8009162:	4691      	mov	r9, r2
 8009164:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009168:	f108 0601 	add.w	r6, r8, #1
 800916c:	42b3      	cmp	r3, r6
 800916e:	db0b      	blt.n	8009188 <__lshift+0x38>
 8009170:	4638      	mov	r0, r7
 8009172:	f7ff fd91 	bl	8008c98 <_Balloc>
 8009176:	4605      	mov	r5, r0
 8009178:	b948      	cbnz	r0, 800918e <__lshift+0x3e>
 800917a:	4602      	mov	r2, r0
 800917c:	4b28      	ldr	r3, [pc, #160]	; (8009220 <__lshift+0xd0>)
 800917e:	4829      	ldr	r0, [pc, #164]	; (8009224 <__lshift+0xd4>)
 8009180:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009184:	f000 fc90 	bl	8009aa8 <__assert_func>
 8009188:	3101      	adds	r1, #1
 800918a:	005b      	lsls	r3, r3, #1
 800918c:	e7ee      	b.n	800916c <__lshift+0x1c>
 800918e:	2300      	movs	r3, #0
 8009190:	f100 0114 	add.w	r1, r0, #20
 8009194:	f100 0210 	add.w	r2, r0, #16
 8009198:	4618      	mov	r0, r3
 800919a:	4553      	cmp	r3, sl
 800919c:	db33      	blt.n	8009206 <__lshift+0xb6>
 800919e:	6920      	ldr	r0, [r4, #16]
 80091a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80091a4:	f104 0314 	add.w	r3, r4, #20
 80091a8:	f019 091f 	ands.w	r9, r9, #31
 80091ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80091b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80091b4:	d02b      	beq.n	800920e <__lshift+0xbe>
 80091b6:	f1c9 0e20 	rsb	lr, r9, #32
 80091ba:	468a      	mov	sl, r1
 80091bc:	2200      	movs	r2, #0
 80091be:	6818      	ldr	r0, [r3, #0]
 80091c0:	fa00 f009 	lsl.w	r0, r0, r9
 80091c4:	4302      	orrs	r2, r0
 80091c6:	f84a 2b04 	str.w	r2, [sl], #4
 80091ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80091ce:	459c      	cmp	ip, r3
 80091d0:	fa22 f20e 	lsr.w	r2, r2, lr
 80091d4:	d8f3      	bhi.n	80091be <__lshift+0x6e>
 80091d6:	ebac 0304 	sub.w	r3, ip, r4
 80091da:	3b15      	subs	r3, #21
 80091dc:	f023 0303 	bic.w	r3, r3, #3
 80091e0:	3304      	adds	r3, #4
 80091e2:	f104 0015 	add.w	r0, r4, #21
 80091e6:	4584      	cmp	ip, r0
 80091e8:	bf38      	it	cc
 80091ea:	2304      	movcc	r3, #4
 80091ec:	50ca      	str	r2, [r1, r3]
 80091ee:	b10a      	cbz	r2, 80091f4 <__lshift+0xa4>
 80091f0:	f108 0602 	add.w	r6, r8, #2
 80091f4:	3e01      	subs	r6, #1
 80091f6:	4638      	mov	r0, r7
 80091f8:	612e      	str	r6, [r5, #16]
 80091fa:	4621      	mov	r1, r4
 80091fc:	f7ff fd8c 	bl	8008d18 <_Bfree>
 8009200:	4628      	mov	r0, r5
 8009202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009206:	f842 0f04 	str.w	r0, [r2, #4]!
 800920a:	3301      	adds	r3, #1
 800920c:	e7c5      	b.n	800919a <__lshift+0x4a>
 800920e:	3904      	subs	r1, #4
 8009210:	f853 2b04 	ldr.w	r2, [r3], #4
 8009214:	f841 2f04 	str.w	r2, [r1, #4]!
 8009218:	459c      	cmp	ip, r3
 800921a:	d8f9      	bhi.n	8009210 <__lshift+0xc0>
 800921c:	e7ea      	b.n	80091f4 <__lshift+0xa4>
 800921e:	bf00      	nop
 8009220:	0800be1c 	.word	0x0800be1c
 8009224:	0800beac 	.word	0x0800beac

08009228 <__mcmp>:
 8009228:	b530      	push	{r4, r5, lr}
 800922a:	6902      	ldr	r2, [r0, #16]
 800922c:	690c      	ldr	r4, [r1, #16]
 800922e:	1b12      	subs	r2, r2, r4
 8009230:	d10e      	bne.n	8009250 <__mcmp+0x28>
 8009232:	f100 0314 	add.w	r3, r0, #20
 8009236:	3114      	adds	r1, #20
 8009238:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800923c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009240:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009244:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009248:	42a5      	cmp	r5, r4
 800924a:	d003      	beq.n	8009254 <__mcmp+0x2c>
 800924c:	d305      	bcc.n	800925a <__mcmp+0x32>
 800924e:	2201      	movs	r2, #1
 8009250:	4610      	mov	r0, r2
 8009252:	bd30      	pop	{r4, r5, pc}
 8009254:	4283      	cmp	r3, r0
 8009256:	d3f3      	bcc.n	8009240 <__mcmp+0x18>
 8009258:	e7fa      	b.n	8009250 <__mcmp+0x28>
 800925a:	f04f 32ff 	mov.w	r2, #4294967295
 800925e:	e7f7      	b.n	8009250 <__mcmp+0x28>

08009260 <__mdiff>:
 8009260:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009264:	460c      	mov	r4, r1
 8009266:	4606      	mov	r6, r0
 8009268:	4611      	mov	r1, r2
 800926a:	4620      	mov	r0, r4
 800926c:	4617      	mov	r7, r2
 800926e:	f7ff ffdb 	bl	8009228 <__mcmp>
 8009272:	1e05      	subs	r5, r0, #0
 8009274:	d110      	bne.n	8009298 <__mdiff+0x38>
 8009276:	4629      	mov	r1, r5
 8009278:	4630      	mov	r0, r6
 800927a:	f7ff fd0d 	bl	8008c98 <_Balloc>
 800927e:	b930      	cbnz	r0, 800928e <__mdiff+0x2e>
 8009280:	4b39      	ldr	r3, [pc, #228]	; (8009368 <__mdiff+0x108>)
 8009282:	4602      	mov	r2, r0
 8009284:	f240 2132 	movw	r1, #562	; 0x232
 8009288:	4838      	ldr	r0, [pc, #224]	; (800936c <__mdiff+0x10c>)
 800928a:	f000 fc0d 	bl	8009aa8 <__assert_func>
 800928e:	2301      	movs	r3, #1
 8009290:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009294:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009298:	bfa4      	itt	ge
 800929a:	463b      	movge	r3, r7
 800929c:	4627      	movge	r7, r4
 800929e:	4630      	mov	r0, r6
 80092a0:	6879      	ldr	r1, [r7, #4]
 80092a2:	bfa6      	itte	ge
 80092a4:	461c      	movge	r4, r3
 80092a6:	2500      	movge	r5, #0
 80092a8:	2501      	movlt	r5, #1
 80092aa:	f7ff fcf5 	bl	8008c98 <_Balloc>
 80092ae:	b920      	cbnz	r0, 80092ba <__mdiff+0x5a>
 80092b0:	4b2d      	ldr	r3, [pc, #180]	; (8009368 <__mdiff+0x108>)
 80092b2:	4602      	mov	r2, r0
 80092b4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80092b8:	e7e6      	b.n	8009288 <__mdiff+0x28>
 80092ba:	693e      	ldr	r6, [r7, #16]
 80092bc:	60c5      	str	r5, [r0, #12]
 80092be:	6925      	ldr	r5, [r4, #16]
 80092c0:	f107 0114 	add.w	r1, r7, #20
 80092c4:	f104 0914 	add.w	r9, r4, #20
 80092c8:	f100 0e14 	add.w	lr, r0, #20
 80092cc:	f107 0210 	add.w	r2, r7, #16
 80092d0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80092d4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80092d8:	46f2      	mov	sl, lr
 80092da:	2700      	movs	r7, #0
 80092dc:	f859 3b04 	ldr.w	r3, [r9], #4
 80092e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80092e4:	fa1f f883 	uxth.w	r8, r3
 80092e8:	fa17 f78b 	uxtah	r7, r7, fp
 80092ec:	0c1b      	lsrs	r3, r3, #16
 80092ee:	eba7 0808 	sub.w	r8, r7, r8
 80092f2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80092f6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80092fa:	fa1f f888 	uxth.w	r8, r8
 80092fe:	141f      	asrs	r7, r3, #16
 8009300:	454d      	cmp	r5, r9
 8009302:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009306:	f84a 3b04 	str.w	r3, [sl], #4
 800930a:	d8e7      	bhi.n	80092dc <__mdiff+0x7c>
 800930c:	1b2b      	subs	r3, r5, r4
 800930e:	3b15      	subs	r3, #21
 8009310:	f023 0303 	bic.w	r3, r3, #3
 8009314:	3304      	adds	r3, #4
 8009316:	3415      	adds	r4, #21
 8009318:	42a5      	cmp	r5, r4
 800931a:	bf38      	it	cc
 800931c:	2304      	movcc	r3, #4
 800931e:	4419      	add	r1, r3
 8009320:	4473      	add	r3, lr
 8009322:	469e      	mov	lr, r3
 8009324:	460d      	mov	r5, r1
 8009326:	4565      	cmp	r5, ip
 8009328:	d30e      	bcc.n	8009348 <__mdiff+0xe8>
 800932a:	f10c 0203 	add.w	r2, ip, #3
 800932e:	1a52      	subs	r2, r2, r1
 8009330:	f022 0203 	bic.w	r2, r2, #3
 8009334:	3903      	subs	r1, #3
 8009336:	458c      	cmp	ip, r1
 8009338:	bf38      	it	cc
 800933a:	2200      	movcc	r2, #0
 800933c:	441a      	add	r2, r3
 800933e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009342:	b17b      	cbz	r3, 8009364 <__mdiff+0x104>
 8009344:	6106      	str	r6, [r0, #16]
 8009346:	e7a5      	b.n	8009294 <__mdiff+0x34>
 8009348:	f855 8b04 	ldr.w	r8, [r5], #4
 800934c:	fa17 f488 	uxtah	r4, r7, r8
 8009350:	1422      	asrs	r2, r4, #16
 8009352:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009356:	b2a4      	uxth	r4, r4
 8009358:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800935c:	f84e 4b04 	str.w	r4, [lr], #4
 8009360:	1417      	asrs	r7, r2, #16
 8009362:	e7e0      	b.n	8009326 <__mdiff+0xc6>
 8009364:	3e01      	subs	r6, #1
 8009366:	e7ea      	b.n	800933e <__mdiff+0xde>
 8009368:	0800be1c 	.word	0x0800be1c
 800936c:	0800beac 	.word	0x0800beac

08009370 <__ulp>:
 8009370:	b082      	sub	sp, #8
 8009372:	ed8d 0b00 	vstr	d0, [sp]
 8009376:	9b01      	ldr	r3, [sp, #4]
 8009378:	4912      	ldr	r1, [pc, #72]	; (80093c4 <__ulp+0x54>)
 800937a:	4019      	ands	r1, r3
 800937c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009380:	2900      	cmp	r1, #0
 8009382:	dd05      	ble.n	8009390 <__ulp+0x20>
 8009384:	2200      	movs	r2, #0
 8009386:	460b      	mov	r3, r1
 8009388:	ec43 2b10 	vmov	d0, r2, r3
 800938c:	b002      	add	sp, #8
 800938e:	4770      	bx	lr
 8009390:	4249      	negs	r1, r1
 8009392:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009396:	ea4f 5021 	mov.w	r0, r1, asr #20
 800939a:	f04f 0200 	mov.w	r2, #0
 800939e:	f04f 0300 	mov.w	r3, #0
 80093a2:	da04      	bge.n	80093ae <__ulp+0x3e>
 80093a4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80093a8:	fa41 f300 	asr.w	r3, r1, r0
 80093ac:	e7ec      	b.n	8009388 <__ulp+0x18>
 80093ae:	f1a0 0114 	sub.w	r1, r0, #20
 80093b2:	291e      	cmp	r1, #30
 80093b4:	bfda      	itte	le
 80093b6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80093ba:	fa20 f101 	lsrle.w	r1, r0, r1
 80093be:	2101      	movgt	r1, #1
 80093c0:	460a      	mov	r2, r1
 80093c2:	e7e1      	b.n	8009388 <__ulp+0x18>
 80093c4:	7ff00000 	.word	0x7ff00000

080093c8 <__b2d>:
 80093c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ca:	6905      	ldr	r5, [r0, #16]
 80093cc:	f100 0714 	add.w	r7, r0, #20
 80093d0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80093d4:	1f2e      	subs	r6, r5, #4
 80093d6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80093da:	4620      	mov	r0, r4
 80093dc:	f7ff fd52 	bl	8008e84 <__hi0bits>
 80093e0:	f1c0 0320 	rsb	r3, r0, #32
 80093e4:	280a      	cmp	r0, #10
 80093e6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009464 <__b2d+0x9c>
 80093ea:	600b      	str	r3, [r1, #0]
 80093ec:	dc14      	bgt.n	8009418 <__b2d+0x50>
 80093ee:	f1c0 0e0b 	rsb	lr, r0, #11
 80093f2:	fa24 f10e 	lsr.w	r1, r4, lr
 80093f6:	42b7      	cmp	r7, r6
 80093f8:	ea41 030c 	orr.w	r3, r1, ip
 80093fc:	bf34      	ite	cc
 80093fe:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009402:	2100      	movcs	r1, #0
 8009404:	3015      	adds	r0, #21
 8009406:	fa04 f000 	lsl.w	r0, r4, r0
 800940a:	fa21 f10e 	lsr.w	r1, r1, lr
 800940e:	ea40 0201 	orr.w	r2, r0, r1
 8009412:	ec43 2b10 	vmov	d0, r2, r3
 8009416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009418:	42b7      	cmp	r7, r6
 800941a:	bf3a      	itte	cc
 800941c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009420:	f1a5 0608 	subcc.w	r6, r5, #8
 8009424:	2100      	movcs	r1, #0
 8009426:	380b      	subs	r0, #11
 8009428:	d017      	beq.n	800945a <__b2d+0x92>
 800942a:	f1c0 0c20 	rsb	ip, r0, #32
 800942e:	fa04 f500 	lsl.w	r5, r4, r0
 8009432:	42be      	cmp	r6, r7
 8009434:	fa21 f40c 	lsr.w	r4, r1, ip
 8009438:	ea45 0504 	orr.w	r5, r5, r4
 800943c:	bf8c      	ite	hi
 800943e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009442:	2400      	movls	r4, #0
 8009444:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009448:	fa01 f000 	lsl.w	r0, r1, r0
 800944c:	fa24 f40c 	lsr.w	r4, r4, ip
 8009450:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009454:	ea40 0204 	orr.w	r2, r0, r4
 8009458:	e7db      	b.n	8009412 <__b2d+0x4a>
 800945a:	ea44 030c 	orr.w	r3, r4, ip
 800945e:	460a      	mov	r2, r1
 8009460:	e7d7      	b.n	8009412 <__b2d+0x4a>
 8009462:	bf00      	nop
 8009464:	3ff00000 	.word	0x3ff00000

08009468 <__d2b>:
 8009468:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800946c:	4689      	mov	r9, r1
 800946e:	2101      	movs	r1, #1
 8009470:	ec57 6b10 	vmov	r6, r7, d0
 8009474:	4690      	mov	r8, r2
 8009476:	f7ff fc0f 	bl	8008c98 <_Balloc>
 800947a:	4604      	mov	r4, r0
 800947c:	b930      	cbnz	r0, 800948c <__d2b+0x24>
 800947e:	4602      	mov	r2, r0
 8009480:	4b25      	ldr	r3, [pc, #148]	; (8009518 <__d2b+0xb0>)
 8009482:	4826      	ldr	r0, [pc, #152]	; (800951c <__d2b+0xb4>)
 8009484:	f240 310a 	movw	r1, #778	; 0x30a
 8009488:	f000 fb0e 	bl	8009aa8 <__assert_func>
 800948c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009490:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009494:	bb35      	cbnz	r5, 80094e4 <__d2b+0x7c>
 8009496:	2e00      	cmp	r6, #0
 8009498:	9301      	str	r3, [sp, #4]
 800949a:	d028      	beq.n	80094ee <__d2b+0x86>
 800949c:	4668      	mov	r0, sp
 800949e:	9600      	str	r6, [sp, #0]
 80094a0:	f7ff fd10 	bl	8008ec4 <__lo0bits>
 80094a4:	9900      	ldr	r1, [sp, #0]
 80094a6:	b300      	cbz	r0, 80094ea <__d2b+0x82>
 80094a8:	9a01      	ldr	r2, [sp, #4]
 80094aa:	f1c0 0320 	rsb	r3, r0, #32
 80094ae:	fa02 f303 	lsl.w	r3, r2, r3
 80094b2:	430b      	orrs	r3, r1
 80094b4:	40c2      	lsrs	r2, r0
 80094b6:	6163      	str	r3, [r4, #20]
 80094b8:	9201      	str	r2, [sp, #4]
 80094ba:	9b01      	ldr	r3, [sp, #4]
 80094bc:	61a3      	str	r3, [r4, #24]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	bf14      	ite	ne
 80094c2:	2202      	movne	r2, #2
 80094c4:	2201      	moveq	r2, #1
 80094c6:	6122      	str	r2, [r4, #16]
 80094c8:	b1d5      	cbz	r5, 8009500 <__d2b+0x98>
 80094ca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80094ce:	4405      	add	r5, r0
 80094d0:	f8c9 5000 	str.w	r5, [r9]
 80094d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80094d8:	f8c8 0000 	str.w	r0, [r8]
 80094dc:	4620      	mov	r0, r4
 80094de:	b003      	add	sp, #12
 80094e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80094e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80094e8:	e7d5      	b.n	8009496 <__d2b+0x2e>
 80094ea:	6161      	str	r1, [r4, #20]
 80094ec:	e7e5      	b.n	80094ba <__d2b+0x52>
 80094ee:	a801      	add	r0, sp, #4
 80094f0:	f7ff fce8 	bl	8008ec4 <__lo0bits>
 80094f4:	9b01      	ldr	r3, [sp, #4]
 80094f6:	6163      	str	r3, [r4, #20]
 80094f8:	2201      	movs	r2, #1
 80094fa:	6122      	str	r2, [r4, #16]
 80094fc:	3020      	adds	r0, #32
 80094fe:	e7e3      	b.n	80094c8 <__d2b+0x60>
 8009500:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009504:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009508:	f8c9 0000 	str.w	r0, [r9]
 800950c:	6918      	ldr	r0, [r3, #16]
 800950e:	f7ff fcb9 	bl	8008e84 <__hi0bits>
 8009512:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009516:	e7df      	b.n	80094d8 <__d2b+0x70>
 8009518:	0800be1c 	.word	0x0800be1c
 800951c:	0800beac 	.word	0x0800beac

08009520 <__ratio>:
 8009520:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009524:	4688      	mov	r8, r1
 8009526:	4669      	mov	r1, sp
 8009528:	4681      	mov	r9, r0
 800952a:	f7ff ff4d 	bl	80093c8 <__b2d>
 800952e:	a901      	add	r1, sp, #4
 8009530:	4640      	mov	r0, r8
 8009532:	ec55 4b10 	vmov	r4, r5, d0
 8009536:	f7ff ff47 	bl	80093c8 <__b2d>
 800953a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800953e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009542:	eba3 0c02 	sub.w	ip, r3, r2
 8009546:	e9dd 3200 	ldrd	r3, r2, [sp]
 800954a:	1a9b      	subs	r3, r3, r2
 800954c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009550:	ec51 0b10 	vmov	r0, r1, d0
 8009554:	2b00      	cmp	r3, #0
 8009556:	bfd6      	itet	le
 8009558:	460a      	movle	r2, r1
 800955a:	462a      	movgt	r2, r5
 800955c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009560:	468b      	mov	fp, r1
 8009562:	462f      	mov	r7, r5
 8009564:	bfd4      	ite	le
 8009566:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800956a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800956e:	4620      	mov	r0, r4
 8009570:	ee10 2a10 	vmov	r2, s0
 8009574:	465b      	mov	r3, fp
 8009576:	4639      	mov	r1, r7
 8009578:	f7f7 f970 	bl	800085c <__aeabi_ddiv>
 800957c:	ec41 0b10 	vmov	d0, r0, r1
 8009580:	b003      	add	sp, #12
 8009582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009586 <__copybits>:
 8009586:	3901      	subs	r1, #1
 8009588:	b570      	push	{r4, r5, r6, lr}
 800958a:	1149      	asrs	r1, r1, #5
 800958c:	6914      	ldr	r4, [r2, #16]
 800958e:	3101      	adds	r1, #1
 8009590:	f102 0314 	add.w	r3, r2, #20
 8009594:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009598:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800959c:	1f05      	subs	r5, r0, #4
 800959e:	42a3      	cmp	r3, r4
 80095a0:	d30c      	bcc.n	80095bc <__copybits+0x36>
 80095a2:	1aa3      	subs	r3, r4, r2
 80095a4:	3b11      	subs	r3, #17
 80095a6:	f023 0303 	bic.w	r3, r3, #3
 80095aa:	3211      	adds	r2, #17
 80095ac:	42a2      	cmp	r2, r4
 80095ae:	bf88      	it	hi
 80095b0:	2300      	movhi	r3, #0
 80095b2:	4418      	add	r0, r3
 80095b4:	2300      	movs	r3, #0
 80095b6:	4288      	cmp	r0, r1
 80095b8:	d305      	bcc.n	80095c6 <__copybits+0x40>
 80095ba:	bd70      	pop	{r4, r5, r6, pc}
 80095bc:	f853 6b04 	ldr.w	r6, [r3], #4
 80095c0:	f845 6f04 	str.w	r6, [r5, #4]!
 80095c4:	e7eb      	b.n	800959e <__copybits+0x18>
 80095c6:	f840 3b04 	str.w	r3, [r0], #4
 80095ca:	e7f4      	b.n	80095b6 <__copybits+0x30>

080095cc <__any_on>:
 80095cc:	f100 0214 	add.w	r2, r0, #20
 80095d0:	6900      	ldr	r0, [r0, #16]
 80095d2:	114b      	asrs	r3, r1, #5
 80095d4:	4298      	cmp	r0, r3
 80095d6:	b510      	push	{r4, lr}
 80095d8:	db11      	blt.n	80095fe <__any_on+0x32>
 80095da:	dd0a      	ble.n	80095f2 <__any_on+0x26>
 80095dc:	f011 011f 	ands.w	r1, r1, #31
 80095e0:	d007      	beq.n	80095f2 <__any_on+0x26>
 80095e2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80095e6:	fa24 f001 	lsr.w	r0, r4, r1
 80095ea:	fa00 f101 	lsl.w	r1, r0, r1
 80095ee:	428c      	cmp	r4, r1
 80095f0:	d10b      	bne.n	800960a <__any_on+0x3e>
 80095f2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d803      	bhi.n	8009602 <__any_on+0x36>
 80095fa:	2000      	movs	r0, #0
 80095fc:	bd10      	pop	{r4, pc}
 80095fe:	4603      	mov	r3, r0
 8009600:	e7f7      	b.n	80095f2 <__any_on+0x26>
 8009602:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009606:	2900      	cmp	r1, #0
 8009608:	d0f5      	beq.n	80095f6 <__any_on+0x2a>
 800960a:	2001      	movs	r0, #1
 800960c:	e7f6      	b.n	80095fc <__any_on+0x30>

0800960e <_calloc_r>:
 800960e:	b513      	push	{r0, r1, r4, lr}
 8009610:	434a      	muls	r2, r1
 8009612:	4611      	mov	r1, r2
 8009614:	9201      	str	r2, [sp, #4]
 8009616:	f000 f859 	bl	80096cc <_malloc_r>
 800961a:	4604      	mov	r4, r0
 800961c:	b118      	cbz	r0, 8009626 <_calloc_r+0x18>
 800961e:	9a01      	ldr	r2, [sp, #4]
 8009620:	2100      	movs	r1, #0
 8009622:	f7fc fbc7 	bl	8005db4 <memset>
 8009626:	4620      	mov	r0, r4
 8009628:	b002      	add	sp, #8
 800962a:	bd10      	pop	{r4, pc}

0800962c <_free_r>:
 800962c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800962e:	2900      	cmp	r1, #0
 8009630:	d048      	beq.n	80096c4 <_free_r+0x98>
 8009632:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009636:	9001      	str	r0, [sp, #4]
 8009638:	2b00      	cmp	r3, #0
 800963a:	f1a1 0404 	sub.w	r4, r1, #4
 800963e:	bfb8      	it	lt
 8009640:	18e4      	addlt	r4, r4, r3
 8009642:	f000 fa7b 	bl	8009b3c <__malloc_lock>
 8009646:	4a20      	ldr	r2, [pc, #128]	; (80096c8 <_free_r+0x9c>)
 8009648:	9801      	ldr	r0, [sp, #4]
 800964a:	6813      	ldr	r3, [r2, #0]
 800964c:	4615      	mov	r5, r2
 800964e:	b933      	cbnz	r3, 800965e <_free_r+0x32>
 8009650:	6063      	str	r3, [r4, #4]
 8009652:	6014      	str	r4, [r2, #0]
 8009654:	b003      	add	sp, #12
 8009656:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800965a:	f000 ba75 	b.w	8009b48 <__malloc_unlock>
 800965e:	42a3      	cmp	r3, r4
 8009660:	d90b      	bls.n	800967a <_free_r+0x4e>
 8009662:	6821      	ldr	r1, [r4, #0]
 8009664:	1862      	adds	r2, r4, r1
 8009666:	4293      	cmp	r3, r2
 8009668:	bf04      	itt	eq
 800966a:	681a      	ldreq	r2, [r3, #0]
 800966c:	685b      	ldreq	r3, [r3, #4]
 800966e:	6063      	str	r3, [r4, #4]
 8009670:	bf04      	itt	eq
 8009672:	1852      	addeq	r2, r2, r1
 8009674:	6022      	streq	r2, [r4, #0]
 8009676:	602c      	str	r4, [r5, #0]
 8009678:	e7ec      	b.n	8009654 <_free_r+0x28>
 800967a:	461a      	mov	r2, r3
 800967c:	685b      	ldr	r3, [r3, #4]
 800967e:	b10b      	cbz	r3, 8009684 <_free_r+0x58>
 8009680:	42a3      	cmp	r3, r4
 8009682:	d9fa      	bls.n	800967a <_free_r+0x4e>
 8009684:	6811      	ldr	r1, [r2, #0]
 8009686:	1855      	adds	r5, r2, r1
 8009688:	42a5      	cmp	r5, r4
 800968a:	d10b      	bne.n	80096a4 <_free_r+0x78>
 800968c:	6824      	ldr	r4, [r4, #0]
 800968e:	4421      	add	r1, r4
 8009690:	1854      	adds	r4, r2, r1
 8009692:	42a3      	cmp	r3, r4
 8009694:	6011      	str	r1, [r2, #0]
 8009696:	d1dd      	bne.n	8009654 <_free_r+0x28>
 8009698:	681c      	ldr	r4, [r3, #0]
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	6053      	str	r3, [r2, #4]
 800969e:	4421      	add	r1, r4
 80096a0:	6011      	str	r1, [r2, #0]
 80096a2:	e7d7      	b.n	8009654 <_free_r+0x28>
 80096a4:	d902      	bls.n	80096ac <_free_r+0x80>
 80096a6:	230c      	movs	r3, #12
 80096a8:	6003      	str	r3, [r0, #0]
 80096aa:	e7d3      	b.n	8009654 <_free_r+0x28>
 80096ac:	6825      	ldr	r5, [r4, #0]
 80096ae:	1961      	adds	r1, r4, r5
 80096b0:	428b      	cmp	r3, r1
 80096b2:	bf04      	itt	eq
 80096b4:	6819      	ldreq	r1, [r3, #0]
 80096b6:	685b      	ldreq	r3, [r3, #4]
 80096b8:	6063      	str	r3, [r4, #4]
 80096ba:	bf04      	itt	eq
 80096bc:	1949      	addeq	r1, r1, r5
 80096be:	6021      	streq	r1, [r4, #0]
 80096c0:	6054      	str	r4, [r2, #4]
 80096c2:	e7c7      	b.n	8009654 <_free_r+0x28>
 80096c4:	b003      	add	sp, #12
 80096c6:	bd30      	pop	{r4, r5, pc}
 80096c8:	20000700 	.word	0x20000700

080096cc <_malloc_r>:
 80096cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ce:	1ccd      	adds	r5, r1, #3
 80096d0:	f025 0503 	bic.w	r5, r5, #3
 80096d4:	3508      	adds	r5, #8
 80096d6:	2d0c      	cmp	r5, #12
 80096d8:	bf38      	it	cc
 80096da:	250c      	movcc	r5, #12
 80096dc:	2d00      	cmp	r5, #0
 80096de:	4606      	mov	r6, r0
 80096e0:	db01      	blt.n	80096e6 <_malloc_r+0x1a>
 80096e2:	42a9      	cmp	r1, r5
 80096e4:	d903      	bls.n	80096ee <_malloc_r+0x22>
 80096e6:	230c      	movs	r3, #12
 80096e8:	6033      	str	r3, [r6, #0]
 80096ea:	2000      	movs	r0, #0
 80096ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096ee:	f000 fa25 	bl	8009b3c <__malloc_lock>
 80096f2:	4921      	ldr	r1, [pc, #132]	; (8009778 <_malloc_r+0xac>)
 80096f4:	680a      	ldr	r2, [r1, #0]
 80096f6:	4614      	mov	r4, r2
 80096f8:	b99c      	cbnz	r4, 8009722 <_malloc_r+0x56>
 80096fa:	4f20      	ldr	r7, [pc, #128]	; (800977c <_malloc_r+0xb0>)
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	b923      	cbnz	r3, 800970a <_malloc_r+0x3e>
 8009700:	4621      	mov	r1, r4
 8009702:	4630      	mov	r0, r6
 8009704:	f000 f9a0 	bl	8009a48 <_sbrk_r>
 8009708:	6038      	str	r0, [r7, #0]
 800970a:	4629      	mov	r1, r5
 800970c:	4630      	mov	r0, r6
 800970e:	f000 f99b 	bl	8009a48 <_sbrk_r>
 8009712:	1c43      	adds	r3, r0, #1
 8009714:	d123      	bne.n	800975e <_malloc_r+0x92>
 8009716:	230c      	movs	r3, #12
 8009718:	6033      	str	r3, [r6, #0]
 800971a:	4630      	mov	r0, r6
 800971c:	f000 fa14 	bl	8009b48 <__malloc_unlock>
 8009720:	e7e3      	b.n	80096ea <_malloc_r+0x1e>
 8009722:	6823      	ldr	r3, [r4, #0]
 8009724:	1b5b      	subs	r3, r3, r5
 8009726:	d417      	bmi.n	8009758 <_malloc_r+0x8c>
 8009728:	2b0b      	cmp	r3, #11
 800972a:	d903      	bls.n	8009734 <_malloc_r+0x68>
 800972c:	6023      	str	r3, [r4, #0]
 800972e:	441c      	add	r4, r3
 8009730:	6025      	str	r5, [r4, #0]
 8009732:	e004      	b.n	800973e <_malloc_r+0x72>
 8009734:	6863      	ldr	r3, [r4, #4]
 8009736:	42a2      	cmp	r2, r4
 8009738:	bf0c      	ite	eq
 800973a:	600b      	streq	r3, [r1, #0]
 800973c:	6053      	strne	r3, [r2, #4]
 800973e:	4630      	mov	r0, r6
 8009740:	f000 fa02 	bl	8009b48 <__malloc_unlock>
 8009744:	f104 000b 	add.w	r0, r4, #11
 8009748:	1d23      	adds	r3, r4, #4
 800974a:	f020 0007 	bic.w	r0, r0, #7
 800974e:	1ac2      	subs	r2, r0, r3
 8009750:	d0cc      	beq.n	80096ec <_malloc_r+0x20>
 8009752:	1a1b      	subs	r3, r3, r0
 8009754:	50a3      	str	r3, [r4, r2]
 8009756:	e7c9      	b.n	80096ec <_malloc_r+0x20>
 8009758:	4622      	mov	r2, r4
 800975a:	6864      	ldr	r4, [r4, #4]
 800975c:	e7cc      	b.n	80096f8 <_malloc_r+0x2c>
 800975e:	1cc4      	adds	r4, r0, #3
 8009760:	f024 0403 	bic.w	r4, r4, #3
 8009764:	42a0      	cmp	r0, r4
 8009766:	d0e3      	beq.n	8009730 <_malloc_r+0x64>
 8009768:	1a21      	subs	r1, r4, r0
 800976a:	4630      	mov	r0, r6
 800976c:	f000 f96c 	bl	8009a48 <_sbrk_r>
 8009770:	3001      	adds	r0, #1
 8009772:	d1dd      	bne.n	8009730 <_malloc_r+0x64>
 8009774:	e7cf      	b.n	8009716 <_malloc_r+0x4a>
 8009776:	bf00      	nop
 8009778:	20000700 	.word	0x20000700
 800977c:	20000704 	.word	0x20000704

08009780 <__ssputs_r>:
 8009780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009784:	688e      	ldr	r6, [r1, #8]
 8009786:	429e      	cmp	r6, r3
 8009788:	4682      	mov	sl, r0
 800978a:	460c      	mov	r4, r1
 800978c:	4690      	mov	r8, r2
 800978e:	461f      	mov	r7, r3
 8009790:	d838      	bhi.n	8009804 <__ssputs_r+0x84>
 8009792:	898a      	ldrh	r2, [r1, #12]
 8009794:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009798:	d032      	beq.n	8009800 <__ssputs_r+0x80>
 800979a:	6825      	ldr	r5, [r4, #0]
 800979c:	6909      	ldr	r1, [r1, #16]
 800979e:	eba5 0901 	sub.w	r9, r5, r1
 80097a2:	6965      	ldr	r5, [r4, #20]
 80097a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80097a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80097ac:	3301      	adds	r3, #1
 80097ae:	444b      	add	r3, r9
 80097b0:	106d      	asrs	r5, r5, #1
 80097b2:	429d      	cmp	r5, r3
 80097b4:	bf38      	it	cc
 80097b6:	461d      	movcc	r5, r3
 80097b8:	0553      	lsls	r3, r2, #21
 80097ba:	d531      	bpl.n	8009820 <__ssputs_r+0xa0>
 80097bc:	4629      	mov	r1, r5
 80097be:	f7ff ff85 	bl	80096cc <_malloc_r>
 80097c2:	4606      	mov	r6, r0
 80097c4:	b950      	cbnz	r0, 80097dc <__ssputs_r+0x5c>
 80097c6:	230c      	movs	r3, #12
 80097c8:	f8ca 3000 	str.w	r3, [sl]
 80097cc:	89a3      	ldrh	r3, [r4, #12]
 80097ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097d2:	81a3      	strh	r3, [r4, #12]
 80097d4:	f04f 30ff 	mov.w	r0, #4294967295
 80097d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097dc:	6921      	ldr	r1, [r4, #16]
 80097de:	464a      	mov	r2, r9
 80097e0:	f7ff fa4c 	bl	8008c7c <memcpy>
 80097e4:	89a3      	ldrh	r3, [r4, #12]
 80097e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80097ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097ee:	81a3      	strh	r3, [r4, #12]
 80097f0:	6126      	str	r6, [r4, #16]
 80097f2:	6165      	str	r5, [r4, #20]
 80097f4:	444e      	add	r6, r9
 80097f6:	eba5 0509 	sub.w	r5, r5, r9
 80097fa:	6026      	str	r6, [r4, #0]
 80097fc:	60a5      	str	r5, [r4, #8]
 80097fe:	463e      	mov	r6, r7
 8009800:	42be      	cmp	r6, r7
 8009802:	d900      	bls.n	8009806 <__ssputs_r+0x86>
 8009804:	463e      	mov	r6, r7
 8009806:	4632      	mov	r2, r6
 8009808:	6820      	ldr	r0, [r4, #0]
 800980a:	4641      	mov	r1, r8
 800980c:	f000 f97c 	bl	8009b08 <memmove>
 8009810:	68a3      	ldr	r3, [r4, #8]
 8009812:	6822      	ldr	r2, [r4, #0]
 8009814:	1b9b      	subs	r3, r3, r6
 8009816:	4432      	add	r2, r6
 8009818:	60a3      	str	r3, [r4, #8]
 800981a:	6022      	str	r2, [r4, #0]
 800981c:	2000      	movs	r0, #0
 800981e:	e7db      	b.n	80097d8 <__ssputs_r+0x58>
 8009820:	462a      	mov	r2, r5
 8009822:	f000 f997 	bl	8009b54 <_realloc_r>
 8009826:	4606      	mov	r6, r0
 8009828:	2800      	cmp	r0, #0
 800982a:	d1e1      	bne.n	80097f0 <__ssputs_r+0x70>
 800982c:	6921      	ldr	r1, [r4, #16]
 800982e:	4650      	mov	r0, sl
 8009830:	f7ff fefc 	bl	800962c <_free_r>
 8009834:	e7c7      	b.n	80097c6 <__ssputs_r+0x46>
	...

08009838 <_svfiprintf_r>:
 8009838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800983c:	4698      	mov	r8, r3
 800983e:	898b      	ldrh	r3, [r1, #12]
 8009840:	061b      	lsls	r3, r3, #24
 8009842:	b09d      	sub	sp, #116	; 0x74
 8009844:	4607      	mov	r7, r0
 8009846:	460d      	mov	r5, r1
 8009848:	4614      	mov	r4, r2
 800984a:	d50e      	bpl.n	800986a <_svfiprintf_r+0x32>
 800984c:	690b      	ldr	r3, [r1, #16]
 800984e:	b963      	cbnz	r3, 800986a <_svfiprintf_r+0x32>
 8009850:	2140      	movs	r1, #64	; 0x40
 8009852:	f7ff ff3b 	bl	80096cc <_malloc_r>
 8009856:	6028      	str	r0, [r5, #0]
 8009858:	6128      	str	r0, [r5, #16]
 800985a:	b920      	cbnz	r0, 8009866 <_svfiprintf_r+0x2e>
 800985c:	230c      	movs	r3, #12
 800985e:	603b      	str	r3, [r7, #0]
 8009860:	f04f 30ff 	mov.w	r0, #4294967295
 8009864:	e0d1      	b.n	8009a0a <_svfiprintf_r+0x1d2>
 8009866:	2340      	movs	r3, #64	; 0x40
 8009868:	616b      	str	r3, [r5, #20]
 800986a:	2300      	movs	r3, #0
 800986c:	9309      	str	r3, [sp, #36]	; 0x24
 800986e:	2320      	movs	r3, #32
 8009870:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009874:	f8cd 800c 	str.w	r8, [sp, #12]
 8009878:	2330      	movs	r3, #48	; 0x30
 800987a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009a24 <_svfiprintf_r+0x1ec>
 800987e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009882:	f04f 0901 	mov.w	r9, #1
 8009886:	4623      	mov	r3, r4
 8009888:	469a      	mov	sl, r3
 800988a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800988e:	b10a      	cbz	r2, 8009894 <_svfiprintf_r+0x5c>
 8009890:	2a25      	cmp	r2, #37	; 0x25
 8009892:	d1f9      	bne.n	8009888 <_svfiprintf_r+0x50>
 8009894:	ebba 0b04 	subs.w	fp, sl, r4
 8009898:	d00b      	beq.n	80098b2 <_svfiprintf_r+0x7a>
 800989a:	465b      	mov	r3, fp
 800989c:	4622      	mov	r2, r4
 800989e:	4629      	mov	r1, r5
 80098a0:	4638      	mov	r0, r7
 80098a2:	f7ff ff6d 	bl	8009780 <__ssputs_r>
 80098a6:	3001      	adds	r0, #1
 80098a8:	f000 80aa 	beq.w	8009a00 <_svfiprintf_r+0x1c8>
 80098ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098ae:	445a      	add	r2, fp
 80098b0:	9209      	str	r2, [sp, #36]	; 0x24
 80098b2:	f89a 3000 	ldrb.w	r3, [sl]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	f000 80a2 	beq.w	8009a00 <_svfiprintf_r+0x1c8>
 80098bc:	2300      	movs	r3, #0
 80098be:	f04f 32ff 	mov.w	r2, #4294967295
 80098c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098c6:	f10a 0a01 	add.w	sl, sl, #1
 80098ca:	9304      	str	r3, [sp, #16]
 80098cc:	9307      	str	r3, [sp, #28]
 80098ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80098d2:	931a      	str	r3, [sp, #104]	; 0x68
 80098d4:	4654      	mov	r4, sl
 80098d6:	2205      	movs	r2, #5
 80098d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098dc:	4851      	ldr	r0, [pc, #324]	; (8009a24 <_svfiprintf_r+0x1ec>)
 80098de:	f7f6 fc87 	bl	80001f0 <memchr>
 80098e2:	9a04      	ldr	r2, [sp, #16]
 80098e4:	b9d8      	cbnz	r0, 800991e <_svfiprintf_r+0xe6>
 80098e6:	06d0      	lsls	r0, r2, #27
 80098e8:	bf44      	itt	mi
 80098ea:	2320      	movmi	r3, #32
 80098ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098f0:	0711      	lsls	r1, r2, #28
 80098f2:	bf44      	itt	mi
 80098f4:	232b      	movmi	r3, #43	; 0x2b
 80098f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098fa:	f89a 3000 	ldrb.w	r3, [sl]
 80098fe:	2b2a      	cmp	r3, #42	; 0x2a
 8009900:	d015      	beq.n	800992e <_svfiprintf_r+0xf6>
 8009902:	9a07      	ldr	r2, [sp, #28]
 8009904:	4654      	mov	r4, sl
 8009906:	2000      	movs	r0, #0
 8009908:	f04f 0c0a 	mov.w	ip, #10
 800990c:	4621      	mov	r1, r4
 800990e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009912:	3b30      	subs	r3, #48	; 0x30
 8009914:	2b09      	cmp	r3, #9
 8009916:	d94e      	bls.n	80099b6 <_svfiprintf_r+0x17e>
 8009918:	b1b0      	cbz	r0, 8009948 <_svfiprintf_r+0x110>
 800991a:	9207      	str	r2, [sp, #28]
 800991c:	e014      	b.n	8009948 <_svfiprintf_r+0x110>
 800991e:	eba0 0308 	sub.w	r3, r0, r8
 8009922:	fa09 f303 	lsl.w	r3, r9, r3
 8009926:	4313      	orrs	r3, r2
 8009928:	9304      	str	r3, [sp, #16]
 800992a:	46a2      	mov	sl, r4
 800992c:	e7d2      	b.n	80098d4 <_svfiprintf_r+0x9c>
 800992e:	9b03      	ldr	r3, [sp, #12]
 8009930:	1d19      	adds	r1, r3, #4
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	9103      	str	r1, [sp, #12]
 8009936:	2b00      	cmp	r3, #0
 8009938:	bfbb      	ittet	lt
 800993a:	425b      	neglt	r3, r3
 800993c:	f042 0202 	orrlt.w	r2, r2, #2
 8009940:	9307      	strge	r3, [sp, #28]
 8009942:	9307      	strlt	r3, [sp, #28]
 8009944:	bfb8      	it	lt
 8009946:	9204      	strlt	r2, [sp, #16]
 8009948:	7823      	ldrb	r3, [r4, #0]
 800994a:	2b2e      	cmp	r3, #46	; 0x2e
 800994c:	d10c      	bne.n	8009968 <_svfiprintf_r+0x130>
 800994e:	7863      	ldrb	r3, [r4, #1]
 8009950:	2b2a      	cmp	r3, #42	; 0x2a
 8009952:	d135      	bne.n	80099c0 <_svfiprintf_r+0x188>
 8009954:	9b03      	ldr	r3, [sp, #12]
 8009956:	1d1a      	adds	r2, r3, #4
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	9203      	str	r2, [sp, #12]
 800995c:	2b00      	cmp	r3, #0
 800995e:	bfb8      	it	lt
 8009960:	f04f 33ff 	movlt.w	r3, #4294967295
 8009964:	3402      	adds	r4, #2
 8009966:	9305      	str	r3, [sp, #20]
 8009968:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009a34 <_svfiprintf_r+0x1fc>
 800996c:	7821      	ldrb	r1, [r4, #0]
 800996e:	2203      	movs	r2, #3
 8009970:	4650      	mov	r0, sl
 8009972:	f7f6 fc3d 	bl	80001f0 <memchr>
 8009976:	b140      	cbz	r0, 800998a <_svfiprintf_r+0x152>
 8009978:	2340      	movs	r3, #64	; 0x40
 800997a:	eba0 000a 	sub.w	r0, r0, sl
 800997e:	fa03 f000 	lsl.w	r0, r3, r0
 8009982:	9b04      	ldr	r3, [sp, #16]
 8009984:	4303      	orrs	r3, r0
 8009986:	3401      	adds	r4, #1
 8009988:	9304      	str	r3, [sp, #16]
 800998a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800998e:	4826      	ldr	r0, [pc, #152]	; (8009a28 <_svfiprintf_r+0x1f0>)
 8009990:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009994:	2206      	movs	r2, #6
 8009996:	f7f6 fc2b 	bl	80001f0 <memchr>
 800999a:	2800      	cmp	r0, #0
 800999c:	d038      	beq.n	8009a10 <_svfiprintf_r+0x1d8>
 800999e:	4b23      	ldr	r3, [pc, #140]	; (8009a2c <_svfiprintf_r+0x1f4>)
 80099a0:	bb1b      	cbnz	r3, 80099ea <_svfiprintf_r+0x1b2>
 80099a2:	9b03      	ldr	r3, [sp, #12]
 80099a4:	3307      	adds	r3, #7
 80099a6:	f023 0307 	bic.w	r3, r3, #7
 80099aa:	3308      	adds	r3, #8
 80099ac:	9303      	str	r3, [sp, #12]
 80099ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099b0:	4433      	add	r3, r6
 80099b2:	9309      	str	r3, [sp, #36]	; 0x24
 80099b4:	e767      	b.n	8009886 <_svfiprintf_r+0x4e>
 80099b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80099ba:	460c      	mov	r4, r1
 80099bc:	2001      	movs	r0, #1
 80099be:	e7a5      	b.n	800990c <_svfiprintf_r+0xd4>
 80099c0:	2300      	movs	r3, #0
 80099c2:	3401      	adds	r4, #1
 80099c4:	9305      	str	r3, [sp, #20]
 80099c6:	4619      	mov	r1, r3
 80099c8:	f04f 0c0a 	mov.w	ip, #10
 80099cc:	4620      	mov	r0, r4
 80099ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099d2:	3a30      	subs	r2, #48	; 0x30
 80099d4:	2a09      	cmp	r2, #9
 80099d6:	d903      	bls.n	80099e0 <_svfiprintf_r+0x1a8>
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d0c5      	beq.n	8009968 <_svfiprintf_r+0x130>
 80099dc:	9105      	str	r1, [sp, #20]
 80099de:	e7c3      	b.n	8009968 <_svfiprintf_r+0x130>
 80099e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80099e4:	4604      	mov	r4, r0
 80099e6:	2301      	movs	r3, #1
 80099e8:	e7f0      	b.n	80099cc <_svfiprintf_r+0x194>
 80099ea:	ab03      	add	r3, sp, #12
 80099ec:	9300      	str	r3, [sp, #0]
 80099ee:	462a      	mov	r2, r5
 80099f0:	4b0f      	ldr	r3, [pc, #60]	; (8009a30 <_svfiprintf_r+0x1f8>)
 80099f2:	a904      	add	r1, sp, #16
 80099f4:	4638      	mov	r0, r7
 80099f6:	f7fc fa85 	bl	8005f04 <_printf_float>
 80099fa:	1c42      	adds	r2, r0, #1
 80099fc:	4606      	mov	r6, r0
 80099fe:	d1d6      	bne.n	80099ae <_svfiprintf_r+0x176>
 8009a00:	89ab      	ldrh	r3, [r5, #12]
 8009a02:	065b      	lsls	r3, r3, #25
 8009a04:	f53f af2c 	bmi.w	8009860 <_svfiprintf_r+0x28>
 8009a08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a0a:	b01d      	add	sp, #116	; 0x74
 8009a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a10:	ab03      	add	r3, sp, #12
 8009a12:	9300      	str	r3, [sp, #0]
 8009a14:	462a      	mov	r2, r5
 8009a16:	4b06      	ldr	r3, [pc, #24]	; (8009a30 <_svfiprintf_r+0x1f8>)
 8009a18:	a904      	add	r1, sp, #16
 8009a1a:	4638      	mov	r0, r7
 8009a1c:	f7fc fd16 	bl	800644c <_printf_i>
 8009a20:	e7eb      	b.n	80099fa <_svfiprintf_r+0x1c2>
 8009a22:	bf00      	nop
 8009a24:	0800c00c 	.word	0x0800c00c
 8009a28:	0800c016 	.word	0x0800c016
 8009a2c:	08005f05 	.word	0x08005f05
 8009a30:	08009781 	.word	0x08009781
 8009a34:	0800c012 	.word	0x0800c012

08009a38 <nan>:
 8009a38:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009a40 <nan+0x8>
 8009a3c:	4770      	bx	lr
 8009a3e:	bf00      	nop
 8009a40:	00000000 	.word	0x00000000
 8009a44:	7ff80000 	.word	0x7ff80000

08009a48 <_sbrk_r>:
 8009a48:	b538      	push	{r3, r4, r5, lr}
 8009a4a:	4d06      	ldr	r5, [pc, #24]	; (8009a64 <_sbrk_r+0x1c>)
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	4604      	mov	r4, r0
 8009a50:	4608      	mov	r0, r1
 8009a52:	602b      	str	r3, [r5, #0]
 8009a54:	f7f9 f96e 	bl	8002d34 <_sbrk>
 8009a58:	1c43      	adds	r3, r0, #1
 8009a5a:	d102      	bne.n	8009a62 <_sbrk_r+0x1a>
 8009a5c:	682b      	ldr	r3, [r5, #0]
 8009a5e:	b103      	cbz	r3, 8009a62 <_sbrk_r+0x1a>
 8009a60:	6023      	str	r3, [r4, #0]
 8009a62:	bd38      	pop	{r3, r4, r5, pc}
 8009a64:	200007fc 	.word	0x200007fc

08009a68 <strncmp>:
 8009a68:	b510      	push	{r4, lr}
 8009a6a:	b16a      	cbz	r2, 8009a88 <strncmp+0x20>
 8009a6c:	3901      	subs	r1, #1
 8009a6e:	1884      	adds	r4, r0, r2
 8009a70:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009a74:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009a78:	4293      	cmp	r3, r2
 8009a7a:	d103      	bne.n	8009a84 <strncmp+0x1c>
 8009a7c:	42a0      	cmp	r0, r4
 8009a7e:	d001      	beq.n	8009a84 <strncmp+0x1c>
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d1f5      	bne.n	8009a70 <strncmp+0x8>
 8009a84:	1a98      	subs	r0, r3, r2
 8009a86:	bd10      	pop	{r4, pc}
 8009a88:	4610      	mov	r0, r2
 8009a8a:	e7fc      	b.n	8009a86 <strncmp+0x1e>

08009a8c <__ascii_wctomb>:
 8009a8c:	b149      	cbz	r1, 8009aa2 <__ascii_wctomb+0x16>
 8009a8e:	2aff      	cmp	r2, #255	; 0xff
 8009a90:	bf85      	ittet	hi
 8009a92:	238a      	movhi	r3, #138	; 0x8a
 8009a94:	6003      	strhi	r3, [r0, #0]
 8009a96:	700a      	strbls	r2, [r1, #0]
 8009a98:	f04f 30ff 	movhi.w	r0, #4294967295
 8009a9c:	bf98      	it	ls
 8009a9e:	2001      	movls	r0, #1
 8009aa0:	4770      	bx	lr
 8009aa2:	4608      	mov	r0, r1
 8009aa4:	4770      	bx	lr
	...

08009aa8 <__assert_func>:
 8009aa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009aaa:	4614      	mov	r4, r2
 8009aac:	461a      	mov	r2, r3
 8009aae:	4b09      	ldr	r3, [pc, #36]	; (8009ad4 <__assert_func+0x2c>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	4605      	mov	r5, r0
 8009ab4:	68d8      	ldr	r0, [r3, #12]
 8009ab6:	b14c      	cbz	r4, 8009acc <__assert_func+0x24>
 8009ab8:	4b07      	ldr	r3, [pc, #28]	; (8009ad8 <__assert_func+0x30>)
 8009aba:	9100      	str	r1, [sp, #0]
 8009abc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009ac0:	4906      	ldr	r1, [pc, #24]	; (8009adc <__assert_func+0x34>)
 8009ac2:	462b      	mov	r3, r5
 8009ac4:	f000 f80e 	bl	8009ae4 <fiprintf>
 8009ac8:	f000 fa84 	bl	8009fd4 <abort>
 8009acc:	4b04      	ldr	r3, [pc, #16]	; (8009ae0 <__assert_func+0x38>)
 8009ace:	461c      	mov	r4, r3
 8009ad0:	e7f3      	b.n	8009aba <__assert_func+0x12>
 8009ad2:	bf00      	nop
 8009ad4:	20000074 	.word	0x20000074
 8009ad8:	0800c01d 	.word	0x0800c01d
 8009adc:	0800c02a 	.word	0x0800c02a
 8009ae0:	0800c058 	.word	0x0800c058

08009ae4 <fiprintf>:
 8009ae4:	b40e      	push	{r1, r2, r3}
 8009ae6:	b503      	push	{r0, r1, lr}
 8009ae8:	4601      	mov	r1, r0
 8009aea:	ab03      	add	r3, sp, #12
 8009aec:	4805      	ldr	r0, [pc, #20]	; (8009b04 <fiprintf+0x20>)
 8009aee:	f853 2b04 	ldr.w	r2, [r3], #4
 8009af2:	6800      	ldr	r0, [r0, #0]
 8009af4:	9301      	str	r3, [sp, #4]
 8009af6:	f000 f87d 	bl	8009bf4 <_vfiprintf_r>
 8009afa:	b002      	add	sp, #8
 8009afc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b00:	b003      	add	sp, #12
 8009b02:	4770      	bx	lr
 8009b04:	20000074 	.word	0x20000074

08009b08 <memmove>:
 8009b08:	4288      	cmp	r0, r1
 8009b0a:	b510      	push	{r4, lr}
 8009b0c:	eb01 0402 	add.w	r4, r1, r2
 8009b10:	d902      	bls.n	8009b18 <memmove+0x10>
 8009b12:	4284      	cmp	r4, r0
 8009b14:	4623      	mov	r3, r4
 8009b16:	d807      	bhi.n	8009b28 <memmove+0x20>
 8009b18:	1e43      	subs	r3, r0, #1
 8009b1a:	42a1      	cmp	r1, r4
 8009b1c:	d008      	beq.n	8009b30 <memmove+0x28>
 8009b1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009b26:	e7f8      	b.n	8009b1a <memmove+0x12>
 8009b28:	4402      	add	r2, r0
 8009b2a:	4601      	mov	r1, r0
 8009b2c:	428a      	cmp	r2, r1
 8009b2e:	d100      	bne.n	8009b32 <memmove+0x2a>
 8009b30:	bd10      	pop	{r4, pc}
 8009b32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009b3a:	e7f7      	b.n	8009b2c <memmove+0x24>

08009b3c <__malloc_lock>:
 8009b3c:	4801      	ldr	r0, [pc, #4]	; (8009b44 <__malloc_lock+0x8>)
 8009b3e:	f000 bc09 	b.w	800a354 <__retarget_lock_acquire_recursive>
 8009b42:	bf00      	nop
 8009b44:	20000804 	.word	0x20000804

08009b48 <__malloc_unlock>:
 8009b48:	4801      	ldr	r0, [pc, #4]	; (8009b50 <__malloc_unlock+0x8>)
 8009b4a:	f000 bc04 	b.w	800a356 <__retarget_lock_release_recursive>
 8009b4e:	bf00      	nop
 8009b50:	20000804 	.word	0x20000804

08009b54 <_realloc_r>:
 8009b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b56:	4607      	mov	r7, r0
 8009b58:	4614      	mov	r4, r2
 8009b5a:	460e      	mov	r6, r1
 8009b5c:	b921      	cbnz	r1, 8009b68 <_realloc_r+0x14>
 8009b5e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009b62:	4611      	mov	r1, r2
 8009b64:	f7ff bdb2 	b.w	80096cc <_malloc_r>
 8009b68:	b922      	cbnz	r2, 8009b74 <_realloc_r+0x20>
 8009b6a:	f7ff fd5f 	bl	800962c <_free_r>
 8009b6e:	4625      	mov	r5, r4
 8009b70:	4628      	mov	r0, r5
 8009b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b74:	f000 fc54 	bl	800a420 <_malloc_usable_size_r>
 8009b78:	42a0      	cmp	r0, r4
 8009b7a:	d20f      	bcs.n	8009b9c <_realloc_r+0x48>
 8009b7c:	4621      	mov	r1, r4
 8009b7e:	4638      	mov	r0, r7
 8009b80:	f7ff fda4 	bl	80096cc <_malloc_r>
 8009b84:	4605      	mov	r5, r0
 8009b86:	2800      	cmp	r0, #0
 8009b88:	d0f2      	beq.n	8009b70 <_realloc_r+0x1c>
 8009b8a:	4631      	mov	r1, r6
 8009b8c:	4622      	mov	r2, r4
 8009b8e:	f7ff f875 	bl	8008c7c <memcpy>
 8009b92:	4631      	mov	r1, r6
 8009b94:	4638      	mov	r0, r7
 8009b96:	f7ff fd49 	bl	800962c <_free_r>
 8009b9a:	e7e9      	b.n	8009b70 <_realloc_r+0x1c>
 8009b9c:	4635      	mov	r5, r6
 8009b9e:	e7e7      	b.n	8009b70 <_realloc_r+0x1c>

08009ba0 <__sfputc_r>:
 8009ba0:	6893      	ldr	r3, [r2, #8]
 8009ba2:	3b01      	subs	r3, #1
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	b410      	push	{r4}
 8009ba8:	6093      	str	r3, [r2, #8]
 8009baa:	da08      	bge.n	8009bbe <__sfputc_r+0x1e>
 8009bac:	6994      	ldr	r4, [r2, #24]
 8009bae:	42a3      	cmp	r3, r4
 8009bb0:	db01      	blt.n	8009bb6 <__sfputc_r+0x16>
 8009bb2:	290a      	cmp	r1, #10
 8009bb4:	d103      	bne.n	8009bbe <__sfputc_r+0x1e>
 8009bb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009bba:	f000 b94b 	b.w	8009e54 <__swbuf_r>
 8009bbe:	6813      	ldr	r3, [r2, #0]
 8009bc0:	1c58      	adds	r0, r3, #1
 8009bc2:	6010      	str	r0, [r2, #0]
 8009bc4:	7019      	strb	r1, [r3, #0]
 8009bc6:	4608      	mov	r0, r1
 8009bc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009bcc:	4770      	bx	lr

08009bce <__sfputs_r>:
 8009bce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bd0:	4606      	mov	r6, r0
 8009bd2:	460f      	mov	r7, r1
 8009bd4:	4614      	mov	r4, r2
 8009bd6:	18d5      	adds	r5, r2, r3
 8009bd8:	42ac      	cmp	r4, r5
 8009bda:	d101      	bne.n	8009be0 <__sfputs_r+0x12>
 8009bdc:	2000      	movs	r0, #0
 8009bde:	e007      	b.n	8009bf0 <__sfputs_r+0x22>
 8009be0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009be4:	463a      	mov	r2, r7
 8009be6:	4630      	mov	r0, r6
 8009be8:	f7ff ffda 	bl	8009ba0 <__sfputc_r>
 8009bec:	1c43      	adds	r3, r0, #1
 8009bee:	d1f3      	bne.n	8009bd8 <__sfputs_r+0xa>
 8009bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009bf4 <_vfiprintf_r>:
 8009bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bf8:	460d      	mov	r5, r1
 8009bfa:	b09d      	sub	sp, #116	; 0x74
 8009bfc:	4614      	mov	r4, r2
 8009bfe:	4698      	mov	r8, r3
 8009c00:	4606      	mov	r6, r0
 8009c02:	b118      	cbz	r0, 8009c0c <_vfiprintf_r+0x18>
 8009c04:	6983      	ldr	r3, [r0, #24]
 8009c06:	b90b      	cbnz	r3, 8009c0c <_vfiprintf_r+0x18>
 8009c08:	f000 fb06 	bl	800a218 <__sinit>
 8009c0c:	4b89      	ldr	r3, [pc, #548]	; (8009e34 <_vfiprintf_r+0x240>)
 8009c0e:	429d      	cmp	r5, r3
 8009c10:	d11b      	bne.n	8009c4a <_vfiprintf_r+0x56>
 8009c12:	6875      	ldr	r5, [r6, #4]
 8009c14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c16:	07d9      	lsls	r1, r3, #31
 8009c18:	d405      	bmi.n	8009c26 <_vfiprintf_r+0x32>
 8009c1a:	89ab      	ldrh	r3, [r5, #12]
 8009c1c:	059a      	lsls	r2, r3, #22
 8009c1e:	d402      	bmi.n	8009c26 <_vfiprintf_r+0x32>
 8009c20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c22:	f000 fb97 	bl	800a354 <__retarget_lock_acquire_recursive>
 8009c26:	89ab      	ldrh	r3, [r5, #12]
 8009c28:	071b      	lsls	r3, r3, #28
 8009c2a:	d501      	bpl.n	8009c30 <_vfiprintf_r+0x3c>
 8009c2c:	692b      	ldr	r3, [r5, #16]
 8009c2e:	b9eb      	cbnz	r3, 8009c6c <_vfiprintf_r+0x78>
 8009c30:	4629      	mov	r1, r5
 8009c32:	4630      	mov	r0, r6
 8009c34:	f000 f960 	bl	8009ef8 <__swsetup_r>
 8009c38:	b1c0      	cbz	r0, 8009c6c <_vfiprintf_r+0x78>
 8009c3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c3c:	07dc      	lsls	r4, r3, #31
 8009c3e:	d50e      	bpl.n	8009c5e <_vfiprintf_r+0x6a>
 8009c40:	f04f 30ff 	mov.w	r0, #4294967295
 8009c44:	b01d      	add	sp, #116	; 0x74
 8009c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c4a:	4b7b      	ldr	r3, [pc, #492]	; (8009e38 <_vfiprintf_r+0x244>)
 8009c4c:	429d      	cmp	r5, r3
 8009c4e:	d101      	bne.n	8009c54 <_vfiprintf_r+0x60>
 8009c50:	68b5      	ldr	r5, [r6, #8]
 8009c52:	e7df      	b.n	8009c14 <_vfiprintf_r+0x20>
 8009c54:	4b79      	ldr	r3, [pc, #484]	; (8009e3c <_vfiprintf_r+0x248>)
 8009c56:	429d      	cmp	r5, r3
 8009c58:	bf08      	it	eq
 8009c5a:	68f5      	ldreq	r5, [r6, #12]
 8009c5c:	e7da      	b.n	8009c14 <_vfiprintf_r+0x20>
 8009c5e:	89ab      	ldrh	r3, [r5, #12]
 8009c60:	0598      	lsls	r0, r3, #22
 8009c62:	d4ed      	bmi.n	8009c40 <_vfiprintf_r+0x4c>
 8009c64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c66:	f000 fb76 	bl	800a356 <__retarget_lock_release_recursive>
 8009c6a:	e7e9      	b.n	8009c40 <_vfiprintf_r+0x4c>
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	9309      	str	r3, [sp, #36]	; 0x24
 8009c70:	2320      	movs	r3, #32
 8009c72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c76:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c7a:	2330      	movs	r3, #48	; 0x30
 8009c7c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009e40 <_vfiprintf_r+0x24c>
 8009c80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c84:	f04f 0901 	mov.w	r9, #1
 8009c88:	4623      	mov	r3, r4
 8009c8a:	469a      	mov	sl, r3
 8009c8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c90:	b10a      	cbz	r2, 8009c96 <_vfiprintf_r+0xa2>
 8009c92:	2a25      	cmp	r2, #37	; 0x25
 8009c94:	d1f9      	bne.n	8009c8a <_vfiprintf_r+0x96>
 8009c96:	ebba 0b04 	subs.w	fp, sl, r4
 8009c9a:	d00b      	beq.n	8009cb4 <_vfiprintf_r+0xc0>
 8009c9c:	465b      	mov	r3, fp
 8009c9e:	4622      	mov	r2, r4
 8009ca0:	4629      	mov	r1, r5
 8009ca2:	4630      	mov	r0, r6
 8009ca4:	f7ff ff93 	bl	8009bce <__sfputs_r>
 8009ca8:	3001      	adds	r0, #1
 8009caa:	f000 80aa 	beq.w	8009e02 <_vfiprintf_r+0x20e>
 8009cae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009cb0:	445a      	add	r2, fp
 8009cb2:	9209      	str	r2, [sp, #36]	; 0x24
 8009cb4:	f89a 3000 	ldrb.w	r3, [sl]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	f000 80a2 	beq.w	8009e02 <_vfiprintf_r+0x20e>
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8009cc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009cc8:	f10a 0a01 	add.w	sl, sl, #1
 8009ccc:	9304      	str	r3, [sp, #16]
 8009cce:	9307      	str	r3, [sp, #28]
 8009cd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009cd4:	931a      	str	r3, [sp, #104]	; 0x68
 8009cd6:	4654      	mov	r4, sl
 8009cd8:	2205      	movs	r2, #5
 8009cda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cde:	4858      	ldr	r0, [pc, #352]	; (8009e40 <_vfiprintf_r+0x24c>)
 8009ce0:	f7f6 fa86 	bl	80001f0 <memchr>
 8009ce4:	9a04      	ldr	r2, [sp, #16]
 8009ce6:	b9d8      	cbnz	r0, 8009d20 <_vfiprintf_r+0x12c>
 8009ce8:	06d1      	lsls	r1, r2, #27
 8009cea:	bf44      	itt	mi
 8009cec:	2320      	movmi	r3, #32
 8009cee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cf2:	0713      	lsls	r3, r2, #28
 8009cf4:	bf44      	itt	mi
 8009cf6:	232b      	movmi	r3, #43	; 0x2b
 8009cf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cfc:	f89a 3000 	ldrb.w	r3, [sl]
 8009d00:	2b2a      	cmp	r3, #42	; 0x2a
 8009d02:	d015      	beq.n	8009d30 <_vfiprintf_r+0x13c>
 8009d04:	9a07      	ldr	r2, [sp, #28]
 8009d06:	4654      	mov	r4, sl
 8009d08:	2000      	movs	r0, #0
 8009d0a:	f04f 0c0a 	mov.w	ip, #10
 8009d0e:	4621      	mov	r1, r4
 8009d10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d14:	3b30      	subs	r3, #48	; 0x30
 8009d16:	2b09      	cmp	r3, #9
 8009d18:	d94e      	bls.n	8009db8 <_vfiprintf_r+0x1c4>
 8009d1a:	b1b0      	cbz	r0, 8009d4a <_vfiprintf_r+0x156>
 8009d1c:	9207      	str	r2, [sp, #28]
 8009d1e:	e014      	b.n	8009d4a <_vfiprintf_r+0x156>
 8009d20:	eba0 0308 	sub.w	r3, r0, r8
 8009d24:	fa09 f303 	lsl.w	r3, r9, r3
 8009d28:	4313      	orrs	r3, r2
 8009d2a:	9304      	str	r3, [sp, #16]
 8009d2c:	46a2      	mov	sl, r4
 8009d2e:	e7d2      	b.n	8009cd6 <_vfiprintf_r+0xe2>
 8009d30:	9b03      	ldr	r3, [sp, #12]
 8009d32:	1d19      	adds	r1, r3, #4
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	9103      	str	r1, [sp, #12]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	bfbb      	ittet	lt
 8009d3c:	425b      	neglt	r3, r3
 8009d3e:	f042 0202 	orrlt.w	r2, r2, #2
 8009d42:	9307      	strge	r3, [sp, #28]
 8009d44:	9307      	strlt	r3, [sp, #28]
 8009d46:	bfb8      	it	lt
 8009d48:	9204      	strlt	r2, [sp, #16]
 8009d4a:	7823      	ldrb	r3, [r4, #0]
 8009d4c:	2b2e      	cmp	r3, #46	; 0x2e
 8009d4e:	d10c      	bne.n	8009d6a <_vfiprintf_r+0x176>
 8009d50:	7863      	ldrb	r3, [r4, #1]
 8009d52:	2b2a      	cmp	r3, #42	; 0x2a
 8009d54:	d135      	bne.n	8009dc2 <_vfiprintf_r+0x1ce>
 8009d56:	9b03      	ldr	r3, [sp, #12]
 8009d58:	1d1a      	adds	r2, r3, #4
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	9203      	str	r2, [sp, #12]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	bfb8      	it	lt
 8009d62:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d66:	3402      	adds	r4, #2
 8009d68:	9305      	str	r3, [sp, #20]
 8009d6a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009e50 <_vfiprintf_r+0x25c>
 8009d6e:	7821      	ldrb	r1, [r4, #0]
 8009d70:	2203      	movs	r2, #3
 8009d72:	4650      	mov	r0, sl
 8009d74:	f7f6 fa3c 	bl	80001f0 <memchr>
 8009d78:	b140      	cbz	r0, 8009d8c <_vfiprintf_r+0x198>
 8009d7a:	2340      	movs	r3, #64	; 0x40
 8009d7c:	eba0 000a 	sub.w	r0, r0, sl
 8009d80:	fa03 f000 	lsl.w	r0, r3, r0
 8009d84:	9b04      	ldr	r3, [sp, #16]
 8009d86:	4303      	orrs	r3, r0
 8009d88:	3401      	adds	r4, #1
 8009d8a:	9304      	str	r3, [sp, #16]
 8009d8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d90:	482c      	ldr	r0, [pc, #176]	; (8009e44 <_vfiprintf_r+0x250>)
 8009d92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d96:	2206      	movs	r2, #6
 8009d98:	f7f6 fa2a 	bl	80001f0 <memchr>
 8009d9c:	2800      	cmp	r0, #0
 8009d9e:	d03f      	beq.n	8009e20 <_vfiprintf_r+0x22c>
 8009da0:	4b29      	ldr	r3, [pc, #164]	; (8009e48 <_vfiprintf_r+0x254>)
 8009da2:	bb1b      	cbnz	r3, 8009dec <_vfiprintf_r+0x1f8>
 8009da4:	9b03      	ldr	r3, [sp, #12]
 8009da6:	3307      	adds	r3, #7
 8009da8:	f023 0307 	bic.w	r3, r3, #7
 8009dac:	3308      	adds	r3, #8
 8009dae:	9303      	str	r3, [sp, #12]
 8009db0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009db2:	443b      	add	r3, r7
 8009db4:	9309      	str	r3, [sp, #36]	; 0x24
 8009db6:	e767      	b.n	8009c88 <_vfiprintf_r+0x94>
 8009db8:	fb0c 3202 	mla	r2, ip, r2, r3
 8009dbc:	460c      	mov	r4, r1
 8009dbe:	2001      	movs	r0, #1
 8009dc0:	e7a5      	b.n	8009d0e <_vfiprintf_r+0x11a>
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	3401      	adds	r4, #1
 8009dc6:	9305      	str	r3, [sp, #20]
 8009dc8:	4619      	mov	r1, r3
 8009dca:	f04f 0c0a 	mov.w	ip, #10
 8009dce:	4620      	mov	r0, r4
 8009dd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009dd4:	3a30      	subs	r2, #48	; 0x30
 8009dd6:	2a09      	cmp	r2, #9
 8009dd8:	d903      	bls.n	8009de2 <_vfiprintf_r+0x1ee>
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d0c5      	beq.n	8009d6a <_vfiprintf_r+0x176>
 8009dde:	9105      	str	r1, [sp, #20]
 8009de0:	e7c3      	b.n	8009d6a <_vfiprintf_r+0x176>
 8009de2:	fb0c 2101 	mla	r1, ip, r1, r2
 8009de6:	4604      	mov	r4, r0
 8009de8:	2301      	movs	r3, #1
 8009dea:	e7f0      	b.n	8009dce <_vfiprintf_r+0x1da>
 8009dec:	ab03      	add	r3, sp, #12
 8009dee:	9300      	str	r3, [sp, #0]
 8009df0:	462a      	mov	r2, r5
 8009df2:	4b16      	ldr	r3, [pc, #88]	; (8009e4c <_vfiprintf_r+0x258>)
 8009df4:	a904      	add	r1, sp, #16
 8009df6:	4630      	mov	r0, r6
 8009df8:	f7fc f884 	bl	8005f04 <_printf_float>
 8009dfc:	4607      	mov	r7, r0
 8009dfe:	1c78      	adds	r0, r7, #1
 8009e00:	d1d6      	bne.n	8009db0 <_vfiprintf_r+0x1bc>
 8009e02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e04:	07d9      	lsls	r1, r3, #31
 8009e06:	d405      	bmi.n	8009e14 <_vfiprintf_r+0x220>
 8009e08:	89ab      	ldrh	r3, [r5, #12]
 8009e0a:	059a      	lsls	r2, r3, #22
 8009e0c:	d402      	bmi.n	8009e14 <_vfiprintf_r+0x220>
 8009e0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e10:	f000 faa1 	bl	800a356 <__retarget_lock_release_recursive>
 8009e14:	89ab      	ldrh	r3, [r5, #12]
 8009e16:	065b      	lsls	r3, r3, #25
 8009e18:	f53f af12 	bmi.w	8009c40 <_vfiprintf_r+0x4c>
 8009e1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e1e:	e711      	b.n	8009c44 <_vfiprintf_r+0x50>
 8009e20:	ab03      	add	r3, sp, #12
 8009e22:	9300      	str	r3, [sp, #0]
 8009e24:	462a      	mov	r2, r5
 8009e26:	4b09      	ldr	r3, [pc, #36]	; (8009e4c <_vfiprintf_r+0x258>)
 8009e28:	a904      	add	r1, sp, #16
 8009e2a:	4630      	mov	r0, r6
 8009e2c:	f7fc fb0e 	bl	800644c <_printf_i>
 8009e30:	e7e4      	b.n	8009dfc <_vfiprintf_r+0x208>
 8009e32:	bf00      	nop
 8009e34:	0800c07c 	.word	0x0800c07c
 8009e38:	0800c09c 	.word	0x0800c09c
 8009e3c:	0800c05c 	.word	0x0800c05c
 8009e40:	0800c00c 	.word	0x0800c00c
 8009e44:	0800c016 	.word	0x0800c016
 8009e48:	08005f05 	.word	0x08005f05
 8009e4c:	08009bcf 	.word	0x08009bcf
 8009e50:	0800c012 	.word	0x0800c012

08009e54 <__swbuf_r>:
 8009e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e56:	460e      	mov	r6, r1
 8009e58:	4614      	mov	r4, r2
 8009e5a:	4605      	mov	r5, r0
 8009e5c:	b118      	cbz	r0, 8009e66 <__swbuf_r+0x12>
 8009e5e:	6983      	ldr	r3, [r0, #24]
 8009e60:	b90b      	cbnz	r3, 8009e66 <__swbuf_r+0x12>
 8009e62:	f000 f9d9 	bl	800a218 <__sinit>
 8009e66:	4b21      	ldr	r3, [pc, #132]	; (8009eec <__swbuf_r+0x98>)
 8009e68:	429c      	cmp	r4, r3
 8009e6a:	d12b      	bne.n	8009ec4 <__swbuf_r+0x70>
 8009e6c:	686c      	ldr	r4, [r5, #4]
 8009e6e:	69a3      	ldr	r3, [r4, #24]
 8009e70:	60a3      	str	r3, [r4, #8]
 8009e72:	89a3      	ldrh	r3, [r4, #12]
 8009e74:	071a      	lsls	r2, r3, #28
 8009e76:	d52f      	bpl.n	8009ed8 <__swbuf_r+0x84>
 8009e78:	6923      	ldr	r3, [r4, #16]
 8009e7a:	b36b      	cbz	r3, 8009ed8 <__swbuf_r+0x84>
 8009e7c:	6923      	ldr	r3, [r4, #16]
 8009e7e:	6820      	ldr	r0, [r4, #0]
 8009e80:	1ac0      	subs	r0, r0, r3
 8009e82:	6963      	ldr	r3, [r4, #20]
 8009e84:	b2f6      	uxtb	r6, r6
 8009e86:	4283      	cmp	r3, r0
 8009e88:	4637      	mov	r7, r6
 8009e8a:	dc04      	bgt.n	8009e96 <__swbuf_r+0x42>
 8009e8c:	4621      	mov	r1, r4
 8009e8e:	4628      	mov	r0, r5
 8009e90:	f000 f92e 	bl	800a0f0 <_fflush_r>
 8009e94:	bb30      	cbnz	r0, 8009ee4 <__swbuf_r+0x90>
 8009e96:	68a3      	ldr	r3, [r4, #8]
 8009e98:	3b01      	subs	r3, #1
 8009e9a:	60a3      	str	r3, [r4, #8]
 8009e9c:	6823      	ldr	r3, [r4, #0]
 8009e9e:	1c5a      	adds	r2, r3, #1
 8009ea0:	6022      	str	r2, [r4, #0]
 8009ea2:	701e      	strb	r6, [r3, #0]
 8009ea4:	6963      	ldr	r3, [r4, #20]
 8009ea6:	3001      	adds	r0, #1
 8009ea8:	4283      	cmp	r3, r0
 8009eaa:	d004      	beq.n	8009eb6 <__swbuf_r+0x62>
 8009eac:	89a3      	ldrh	r3, [r4, #12]
 8009eae:	07db      	lsls	r3, r3, #31
 8009eb0:	d506      	bpl.n	8009ec0 <__swbuf_r+0x6c>
 8009eb2:	2e0a      	cmp	r6, #10
 8009eb4:	d104      	bne.n	8009ec0 <__swbuf_r+0x6c>
 8009eb6:	4621      	mov	r1, r4
 8009eb8:	4628      	mov	r0, r5
 8009eba:	f000 f919 	bl	800a0f0 <_fflush_r>
 8009ebe:	b988      	cbnz	r0, 8009ee4 <__swbuf_r+0x90>
 8009ec0:	4638      	mov	r0, r7
 8009ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ec4:	4b0a      	ldr	r3, [pc, #40]	; (8009ef0 <__swbuf_r+0x9c>)
 8009ec6:	429c      	cmp	r4, r3
 8009ec8:	d101      	bne.n	8009ece <__swbuf_r+0x7a>
 8009eca:	68ac      	ldr	r4, [r5, #8]
 8009ecc:	e7cf      	b.n	8009e6e <__swbuf_r+0x1a>
 8009ece:	4b09      	ldr	r3, [pc, #36]	; (8009ef4 <__swbuf_r+0xa0>)
 8009ed0:	429c      	cmp	r4, r3
 8009ed2:	bf08      	it	eq
 8009ed4:	68ec      	ldreq	r4, [r5, #12]
 8009ed6:	e7ca      	b.n	8009e6e <__swbuf_r+0x1a>
 8009ed8:	4621      	mov	r1, r4
 8009eda:	4628      	mov	r0, r5
 8009edc:	f000 f80c 	bl	8009ef8 <__swsetup_r>
 8009ee0:	2800      	cmp	r0, #0
 8009ee2:	d0cb      	beq.n	8009e7c <__swbuf_r+0x28>
 8009ee4:	f04f 37ff 	mov.w	r7, #4294967295
 8009ee8:	e7ea      	b.n	8009ec0 <__swbuf_r+0x6c>
 8009eea:	bf00      	nop
 8009eec:	0800c07c 	.word	0x0800c07c
 8009ef0:	0800c09c 	.word	0x0800c09c
 8009ef4:	0800c05c 	.word	0x0800c05c

08009ef8 <__swsetup_r>:
 8009ef8:	4b32      	ldr	r3, [pc, #200]	; (8009fc4 <__swsetup_r+0xcc>)
 8009efa:	b570      	push	{r4, r5, r6, lr}
 8009efc:	681d      	ldr	r5, [r3, #0]
 8009efe:	4606      	mov	r6, r0
 8009f00:	460c      	mov	r4, r1
 8009f02:	b125      	cbz	r5, 8009f0e <__swsetup_r+0x16>
 8009f04:	69ab      	ldr	r3, [r5, #24]
 8009f06:	b913      	cbnz	r3, 8009f0e <__swsetup_r+0x16>
 8009f08:	4628      	mov	r0, r5
 8009f0a:	f000 f985 	bl	800a218 <__sinit>
 8009f0e:	4b2e      	ldr	r3, [pc, #184]	; (8009fc8 <__swsetup_r+0xd0>)
 8009f10:	429c      	cmp	r4, r3
 8009f12:	d10f      	bne.n	8009f34 <__swsetup_r+0x3c>
 8009f14:	686c      	ldr	r4, [r5, #4]
 8009f16:	89a3      	ldrh	r3, [r4, #12]
 8009f18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f1c:	0719      	lsls	r1, r3, #28
 8009f1e:	d42c      	bmi.n	8009f7a <__swsetup_r+0x82>
 8009f20:	06dd      	lsls	r5, r3, #27
 8009f22:	d411      	bmi.n	8009f48 <__swsetup_r+0x50>
 8009f24:	2309      	movs	r3, #9
 8009f26:	6033      	str	r3, [r6, #0]
 8009f28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009f2c:	81a3      	strh	r3, [r4, #12]
 8009f2e:	f04f 30ff 	mov.w	r0, #4294967295
 8009f32:	e03e      	b.n	8009fb2 <__swsetup_r+0xba>
 8009f34:	4b25      	ldr	r3, [pc, #148]	; (8009fcc <__swsetup_r+0xd4>)
 8009f36:	429c      	cmp	r4, r3
 8009f38:	d101      	bne.n	8009f3e <__swsetup_r+0x46>
 8009f3a:	68ac      	ldr	r4, [r5, #8]
 8009f3c:	e7eb      	b.n	8009f16 <__swsetup_r+0x1e>
 8009f3e:	4b24      	ldr	r3, [pc, #144]	; (8009fd0 <__swsetup_r+0xd8>)
 8009f40:	429c      	cmp	r4, r3
 8009f42:	bf08      	it	eq
 8009f44:	68ec      	ldreq	r4, [r5, #12]
 8009f46:	e7e6      	b.n	8009f16 <__swsetup_r+0x1e>
 8009f48:	0758      	lsls	r0, r3, #29
 8009f4a:	d512      	bpl.n	8009f72 <__swsetup_r+0x7a>
 8009f4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f4e:	b141      	cbz	r1, 8009f62 <__swsetup_r+0x6a>
 8009f50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f54:	4299      	cmp	r1, r3
 8009f56:	d002      	beq.n	8009f5e <__swsetup_r+0x66>
 8009f58:	4630      	mov	r0, r6
 8009f5a:	f7ff fb67 	bl	800962c <_free_r>
 8009f5e:	2300      	movs	r3, #0
 8009f60:	6363      	str	r3, [r4, #52]	; 0x34
 8009f62:	89a3      	ldrh	r3, [r4, #12]
 8009f64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009f68:	81a3      	strh	r3, [r4, #12]
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	6063      	str	r3, [r4, #4]
 8009f6e:	6923      	ldr	r3, [r4, #16]
 8009f70:	6023      	str	r3, [r4, #0]
 8009f72:	89a3      	ldrh	r3, [r4, #12]
 8009f74:	f043 0308 	orr.w	r3, r3, #8
 8009f78:	81a3      	strh	r3, [r4, #12]
 8009f7a:	6923      	ldr	r3, [r4, #16]
 8009f7c:	b94b      	cbnz	r3, 8009f92 <__swsetup_r+0x9a>
 8009f7e:	89a3      	ldrh	r3, [r4, #12]
 8009f80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009f84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f88:	d003      	beq.n	8009f92 <__swsetup_r+0x9a>
 8009f8a:	4621      	mov	r1, r4
 8009f8c:	4630      	mov	r0, r6
 8009f8e:	f000 fa07 	bl	800a3a0 <__smakebuf_r>
 8009f92:	89a0      	ldrh	r0, [r4, #12]
 8009f94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f98:	f010 0301 	ands.w	r3, r0, #1
 8009f9c:	d00a      	beq.n	8009fb4 <__swsetup_r+0xbc>
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	60a3      	str	r3, [r4, #8]
 8009fa2:	6963      	ldr	r3, [r4, #20]
 8009fa4:	425b      	negs	r3, r3
 8009fa6:	61a3      	str	r3, [r4, #24]
 8009fa8:	6923      	ldr	r3, [r4, #16]
 8009faa:	b943      	cbnz	r3, 8009fbe <__swsetup_r+0xc6>
 8009fac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009fb0:	d1ba      	bne.n	8009f28 <__swsetup_r+0x30>
 8009fb2:	bd70      	pop	{r4, r5, r6, pc}
 8009fb4:	0781      	lsls	r1, r0, #30
 8009fb6:	bf58      	it	pl
 8009fb8:	6963      	ldrpl	r3, [r4, #20]
 8009fba:	60a3      	str	r3, [r4, #8]
 8009fbc:	e7f4      	b.n	8009fa8 <__swsetup_r+0xb0>
 8009fbe:	2000      	movs	r0, #0
 8009fc0:	e7f7      	b.n	8009fb2 <__swsetup_r+0xba>
 8009fc2:	bf00      	nop
 8009fc4:	20000074 	.word	0x20000074
 8009fc8:	0800c07c 	.word	0x0800c07c
 8009fcc:	0800c09c 	.word	0x0800c09c
 8009fd0:	0800c05c 	.word	0x0800c05c

08009fd4 <abort>:
 8009fd4:	b508      	push	{r3, lr}
 8009fd6:	2006      	movs	r0, #6
 8009fd8:	f000 fa52 	bl	800a480 <raise>
 8009fdc:	2001      	movs	r0, #1
 8009fde:	f7f8 fe31 	bl	8002c44 <_exit>
	...

08009fe4 <__sflush_r>:
 8009fe4:	898a      	ldrh	r2, [r1, #12]
 8009fe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fea:	4605      	mov	r5, r0
 8009fec:	0710      	lsls	r0, r2, #28
 8009fee:	460c      	mov	r4, r1
 8009ff0:	d458      	bmi.n	800a0a4 <__sflush_r+0xc0>
 8009ff2:	684b      	ldr	r3, [r1, #4]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	dc05      	bgt.n	800a004 <__sflush_r+0x20>
 8009ff8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	dc02      	bgt.n	800a004 <__sflush_r+0x20>
 8009ffe:	2000      	movs	r0, #0
 800a000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a004:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a006:	2e00      	cmp	r6, #0
 800a008:	d0f9      	beq.n	8009ffe <__sflush_r+0x1a>
 800a00a:	2300      	movs	r3, #0
 800a00c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a010:	682f      	ldr	r7, [r5, #0]
 800a012:	602b      	str	r3, [r5, #0]
 800a014:	d032      	beq.n	800a07c <__sflush_r+0x98>
 800a016:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a018:	89a3      	ldrh	r3, [r4, #12]
 800a01a:	075a      	lsls	r2, r3, #29
 800a01c:	d505      	bpl.n	800a02a <__sflush_r+0x46>
 800a01e:	6863      	ldr	r3, [r4, #4]
 800a020:	1ac0      	subs	r0, r0, r3
 800a022:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a024:	b10b      	cbz	r3, 800a02a <__sflush_r+0x46>
 800a026:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a028:	1ac0      	subs	r0, r0, r3
 800a02a:	2300      	movs	r3, #0
 800a02c:	4602      	mov	r2, r0
 800a02e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a030:	6a21      	ldr	r1, [r4, #32]
 800a032:	4628      	mov	r0, r5
 800a034:	47b0      	blx	r6
 800a036:	1c43      	adds	r3, r0, #1
 800a038:	89a3      	ldrh	r3, [r4, #12]
 800a03a:	d106      	bne.n	800a04a <__sflush_r+0x66>
 800a03c:	6829      	ldr	r1, [r5, #0]
 800a03e:	291d      	cmp	r1, #29
 800a040:	d82c      	bhi.n	800a09c <__sflush_r+0xb8>
 800a042:	4a2a      	ldr	r2, [pc, #168]	; (800a0ec <__sflush_r+0x108>)
 800a044:	40ca      	lsrs	r2, r1
 800a046:	07d6      	lsls	r6, r2, #31
 800a048:	d528      	bpl.n	800a09c <__sflush_r+0xb8>
 800a04a:	2200      	movs	r2, #0
 800a04c:	6062      	str	r2, [r4, #4]
 800a04e:	04d9      	lsls	r1, r3, #19
 800a050:	6922      	ldr	r2, [r4, #16]
 800a052:	6022      	str	r2, [r4, #0]
 800a054:	d504      	bpl.n	800a060 <__sflush_r+0x7c>
 800a056:	1c42      	adds	r2, r0, #1
 800a058:	d101      	bne.n	800a05e <__sflush_r+0x7a>
 800a05a:	682b      	ldr	r3, [r5, #0]
 800a05c:	b903      	cbnz	r3, 800a060 <__sflush_r+0x7c>
 800a05e:	6560      	str	r0, [r4, #84]	; 0x54
 800a060:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a062:	602f      	str	r7, [r5, #0]
 800a064:	2900      	cmp	r1, #0
 800a066:	d0ca      	beq.n	8009ffe <__sflush_r+0x1a>
 800a068:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a06c:	4299      	cmp	r1, r3
 800a06e:	d002      	beq.n	800a076 <__sflush_r+0x92>
 800a070:	4628      	mov	r0, r5
 800a072:	f7ff fadb 	bl	800962c <_free_r>
 800a076:	2000      	movs	r0, #0
 800a078:	6360      	str	r0, [r4, #52]	; 0x34
 800a07a:	e7c1      	b.n	800a000 <__sflush_r+0x1c>
 800a07c:	6a21      	ldr	r1, [r4, #32]
 800a07e:	2301      	movs	r3, #1
 800a080:	4628      	mov	r0, r5
 800a082:	47b0      	blx	r6
 800a084:	1c41      	adds	r1, r0, #1
 800a086:	d1c7      	bne.n	800a018 <__sflush_r+0x34>
 800a088:	682b      	ldr	r3, [r5, #0]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d0c4      	beq.n	800a018 <__sflush_r+0x34>
 800a08e:	2b1d      	cmp	r3, #29
 800a090:	d001      	beq.n	800a096 <__sflush_r+0xb2>
 800a092:	2b16      	cmp	r3, #22
 800a094:	d101      	bne.n	800a09a <__sflush_r+0xb6>
 800a096:	602f      	str	r7, [r5, #0]
 800a098:	e7b1      	b.n	8009ffe <__sflush_r+0x1a>
 800a09a:	89a3      	ldrh	r3, [r4, #12]
 800a09c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0a0:	81a3      	strh	r3, [r4, #12]
 800a0a2:	e7ad      	b.n	800a000 <__sflush_r+0x1c>
 800a0a4:	690f      	ldr	r7, [r1, #16]
 800a0a6:	2f00      	cmp	r7, #0
 800a0a8:	d0a9      	beq.n	8009ffe <__sflush_r+0x1a>
 800a0aa:	0793      	lsls	r3, r2, #30
 800a0ac:	680e      	ldr	r6, [r1, #0]
 800a0ae:	bf08      	it	eq
 800a0b0:	694b      	ldreq	r3, [r1, #20]
 800a0b2:	600f      	str	r7, [r1, #0]
 800a0b4:	bf18      	it	ne
 800a0b6:	2300      	movne	r3, #0
 800a0b8:	eba6 0807 	sub.w	r8, r6, r7
 800a0bc:	608b      	str	r3, [r1, #8]
 800a0be:	f1b8 0f00 	cmp.w	r8, #0
 800a0c2:	dd9c      	ble.n	8009ffe <__sflush_r+0x1a>
 800a0c4:	6a21      	ldr	r1, [r4, #32]
 800a0c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a0c8:	4643      	mov	r3, r8
 800a0ca:	463a      	mov	r2, r7
 800a0cc:	4628      	mov	r0, r5
 800a0ce:	47b0      	blx	r6
 800a0d0:	2800      	cmp	r0, #0
 800a0d2:	dc06      	bgt.n	800a0e2 <__sflush_r+0xfe>
 800a0d4:	89a3      	ldrh	r3, [r4, #12]
 800a0d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0da:	81a3      	strh	r3, [r4, #12]
 800a0dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a0e0:	e78e      	b.n	800a000 <__sflush_r+0x1c>
 800a0e2:	4407      	add	r7, r0
 800a0e4:	eba8 0800 	sub.w	r8, r8, r0
 800a0e8:	e7e9      	b.n	800a0be <__sflush_r+0xda>
 800a0ea:	bf00      	nop
 800a0ec:	20400001 	.word	0x20400001

0800a0f0 <_fflush_r>:
 800a0f0:	b538      	push	{r3, r4, r5, lr}
 800a0f2:	690b      	ldr	r3, [r1, #16]
 800a0f4:	4605      	mov	r5, r0
 800a0f6:	460c      	mov	r4, r1
 800a0f8:	b913      	cbnz	r3, 800a100 <_fflush_r+0x10>
 800a0fa:	2500      	movs	r5, #0
 800a0fc:	4628      	mov	r0, r5
 800a0fe:	bd38      	pop	{r3, r4, r5, pc}
 800a100:	b118      	cbz	r0, 800a10a <_fflush_r+0x1a>
 800a102:	6983      	ldr	r3, [r0, #24]
 800a104:	b90b      	cbnz	r3, 800a10a <_fflush_r+0x1a>
 800a106:	f000 f887 	bl	800a218 <__sinit>
 800a10a:	4b14      	ldr	r3, [pc, #80]	; (800a15c <_fflush_r+0x6c>)
 800a10c:	429c      	cmp	r4, r3
 800a10e:	d11b      	bne.n	800a148 <_fflush_r+0x58>
 800a110:	686c      	ldr	r4, [r5, #4]
 800a112:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d0ef      	beq.n	800a0fa <_fflush_r+0xa>
 800a11a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a11c:	07d0      	lsls	r0, r2, #31
 800a11e:	d404      	bmi.n	800a12a <_fflush_r+0x3a>
 800a120:	0599      	lsls	r1, r3, #22
 800a122:	d402      	bmi.n	800a12a <_fflush_r+0x3a>
 800a124:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a126:	f000 f915 	bl	800a354 <__retarget_lock_acquire_recursive>
 800a12a:	4628      	mov	r0, r5
 800a12c:	4621      	mov	r1, r4
 800a12e:	f7ff ff59 	bl	8009fe4 <__sflush_r>
 800a132:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a134:	07da      	lsls	r2, r3, #31
 800a136:	4605      	mov	r5, r0
 800a138:	d4e0      	bmi.n	800a0fc <_fflush_r+0xc>
 800a13a:	89a3      	ldrh	r3, [r4, #12]
 800a13c:	059b      	lsls	r3, r3, #22
 800a13e:	d4dd      	bmi.n	800a0fc <_fflush_r+0xc>
 800a140:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a142:	f000 f908 	bl	800a356 <__retarget_lock_release_recursive>
 800a146:	e7d9      	b.n	800a0fc <_fflush_r+0xc>
 800a148:	4b05      	ldr	r3, [pc, #20]	; (800a160 <_fflush_r+0x70>)
 800a14a:	429c      	cmp	r4, r3
 800a14c:	d101      	bne.n	800a152 <_fflush_r+0x62>
 800a14e:	68ac      	ldr	r4, [r5, #8]
 800a150:	e7df      	b.n	800a112 <_fflush_r+0x22>
 800a152:	4b04      	ldr	r3, [pc, #16]	; (800a164 <_fflush_r+0x74>)
 800a154:	429c      	cmp	r4, r3
 800a156:	bf08      	it	eq
 800a158:	68ec      	ldreq	r4, [r5, #12]
 800a15a:	e7da      	b.n	800a112 <_fflush_r+0x22>
 800a15c:	0800c07c 	.word	0x0800c07c
 800a160:	0800c09c 	.word	0x0800c09c
 800a164:	0800c05c 	.word	0x0800c05c

0800a168 <std>:
 800a168:	2300      	movs	r3, #0
 800a16a:	b510      	push	{r4, lr}
 800a16c:	4604      	mov	r4, r0
 800a16e:	e9c0 3300 	strd	r3, r3, [r0]
 800a172:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a176:	6083      	str	r3, [r0, #8]
 800a178:	8181      	strh	r1, [r0, #12]
 800a17a:	6643      	str	r3, [r0, #100]	; 0x64
 800a17c:	81c2      	strh	r2, [r0, #14]
 800a17e:	6183      	str	r3, [r0, #24]
 800a180:	4619      	mov	r1, r3
 800a182:	2208      	movs	r2, #8
 800a184:	305c      	adds	r0, #92	; 0x5c
 800a186:	f7fb fe15 	bl	8005db4 <memset>
 800a18a:	4b05      	ldr	r3, [pc, #20]	; (800a1a0 <std+0x38>)
 800a18c:	6263      	str	r3, [r4, #36]	; 0x24
 800a18e:	4b05      	ldr	r3, [pc, #20]	; (800a1a4 <std+0x3c>)
 800a190:	62a3      	str	r3, [r4, #40]	; 0x28
 800a192:	4b05      	ldr	r3, [pc, #20]	; (800a1a8 <std+0x40>)
 800a194:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a196:	4b05      	ldr	r3, [pc, #20]	; (800a1ac <std+0x44>)
 800a198:	6224      	str	r4, [r4, #32]
 800a19a:	6323      	str	r3, [r4, #48]	; 0x30
 800a19c:	bd10      	pop	{r4, pc}
 800a19e:	bf00      	nop
 800a1a0:	0800a4b9 	.word	0x0800a4b9
 800a1a4:	0800a4db 	.word	0x0800a4db
 800a1a8:	0800a513 	.word	0x0800a513
 800a1ac:	0800a537 	.word	0x0800a537

0800a1b0 <_cleanup_r>:
 800a1b0:	4901      	ldr	r1, [pc, #4]	; (800a1b8 <_cleanup_r+0x8>)
 800a1b2:	f000 b8af 	b.w	800a314 <_fwalk_reent>
 800a1b6:	bf00      	nop
 800a1b8:	0800a0f1 	.word	0x0800a0f1

0800a1bc <__sfmoreglue>:
 800a1bc:	b570      	push	{r4, r5, r6, lr}
 800a1be:	1e4a      	subs	r2, r1, #1
 800a1c0:	2568      	movs	r5, #104	; 0x68
 800a1c2:	4355      	muls	r5, r2
 800a1c4:	460e      	mov	r6, r1
 800a1c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a1ca:	f7ff fa7f 	bl	80096cc <_malloc_r>
 800a1ce:	4604      	mov	r4, r0
 800a1d0:	b140      	cbz	r0, 800a1e4 <__sfmoreglue+0x28>
 800a1d2:	2100      	movs	r1, #0
 800a1d4:	e9c0 1600 	strd	r1, r6, [r0]
 800a1d8:	300c      	adds	r0, #12
 800a1da:	60a0      	str	r0, [r4, #8]
 800a1dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a1e0:	f7fb fde8 	bl	8005db4 <memset>
 800a1e4:	4620      	mov	r0, r4
 800a1e6:	bd70      	pop	{r4, r5, r6, pc}

0800a1e8 <__sfp_lock_acquire>:
 800a1e8:	4801      	ldr	r0, [pc, #4]	; (800a1f0 <__sfp_lock_acquire+0x8>)
 800a1ea:	f000 b8b3 	b.w	800a354 <__retarget_lock_acquire_recursive>
 800a1ee:	bf00      	nop
 800a1f0:	20000808 	.word	0x20000808

0800a1f4 <__sfp_lock_release>:
 800a1f4:	4801      	ldr	r0, [pc, #4]	; (800a1fc <__sfp_lock_release+0x8>)
 800a1f6:	f000 b8ae 	b.w	800a356 <__retarget_lock_release_recursive>
 800a1fa:	bf00      	nop
 800a1fc:	20000808 	.word	0x20000808

0800a200 <__sinit_lock_acquire>:
 800a200:	4801      	ldr	r0, [pc, #4]	; (800a208 <__sinit_lock_acquire+0x8>)
 800a202:	f000 b8a7 	b.w	800a354 <__retarget_lock_acquire_recursive>
 800a206:	bf00      	nop
 800a208:	20000803 	.word	0x20000803

0800a20c <__sinit_lock_release>:
 800a20c:	4801      	ldr	r0, [pc, #4]	; (800a214 <__sinit_lock_release+0x8>)
 800a20e:	f000 b8a2 	b.w	800a356 <__retarget_lock_release_recursive>
 800a212:	bf00      	nop
 800a214:	20000803 	.word	0x20000803

0800a218 <__sinit>:
 800a218:	b510      	push	{r4, lr}
 800a21a:	4604      	mov	r4, r0
 800a21c:	f7ff fff0 	bl	800a200 <__sinit_lock_acquire>
 800a220:	69a3      	ldr	r3, [r4, #24]
 800a222:	b11b      	cbz	r3, 800a22c <__sinit+0x14>
 800a224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a228:	f7ff bff0 	b.w	800a20c <__sinit_lock_release>
 800a22c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a230:	6523      	str	r3, [r4, #80]	; 0x50
 800a232:	4b13      	ldr	r3, [pc, #76]	; (800a280 <__sinit+0x68>)
 800a234:	4a13      	ldr	r2, [pc, #76]	; (800a284 <__sinit+0x6c>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	62a2      	str	r2, [r4, #40]	; 0x28
 800a23a:	42a3      	cmp	r3, r4
 800a23c:	bf04      	itt	eq
 800a23e:	2301      	moveq	r3, #1
 800a240:	61a3      	streq	r3, [r4, #24]
 800a242:	4620      	mov	r0, r4
 800a244:	f000 f820 	bl	800a288 <__sfp>
 800a248:	6060      	str	r0, [r4, #4]
 800a24a:	4620      	mov	r0, r4
 800a24c:	f000 f81c 	bl	800a288 <__sfp>
 800a250:	60a0      	str	r0, [r4, #8]
 800a252:	4620      	mov	r0, r4
 800a254:	f000 f818 	bl	800a288 <__sfp>
 800a258:	2200      	movs	r2, #0
 800a25a:	60e0      	str	r0, [r4, #12]
 800a25c:	2104      	movs	r1, #4
 800a25e:	6860      	ldr	r0, [r4, #4]
 800a260:	f7ff ff82 	bl	800a168 <std>
 800a264:	68a0      	ldr	r0, [r4, #8]
 800a266:	2201      	movs	r2, #1
 800a268:	2109      	movs	r1, #9
 800a26a:	f7ff ff7d 	bl	800a168 <std>
 800a26e:	68e0      	ldr	r0, [r4, #12]
 800a270:	2202      	movs	r2, #2
 800a272:	2112      	movs	r1, #18
 800a274:	f7ff ff78 	bl	800a168 <std>
 800a278:	2301      	movs	r3, #1
 800a27a:	61a3      	str	r3, [r4, #24]
 800a27c:	e7d2      	b.n	800a224 <__sinit+0xc>
 800a27e:	bf00      	nop
 800a280:	0800bc08 	.word	0x0800bc08
 800a284:	0800a1b1 	.word	0x0800a1b1

0800a288 <__sfp>:
 800a288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a28a:	4607      	mov	r7, r0
 800a28c:	f7ff ffac 	bl	800a1e8 <__sfp_lock_acquire>
 800a290:	4b1e      	ldr	r3, [pc, #120]	; (800a30c <__sfp+0x84>)
 800a292:	681e      	ldr	r6, [r3, #0]
 800a294:	69b3      	ldr	r3, [r6, #24]
 800a296:	b913      	cbnz	r3, 800a29e <__sfp+0x16>
 800a298:	4630      	mov	r0, r6
 800a29a:	f7ff ffbd 	bl	800a218 <__sinit>
 800a29e:	3648      	adds	r6, #72	; 0x48
 800a2a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a2a4:	3b01      	subs	r3, #1
 800a2a6:	d503      	bpl.n	800a2b0 <__sfp+0x28>
 800a2a8:	6833      	ldr	r3, [r6, #0]
 800a2aa:	b30b      	cbz	r3, 800a2f0 <__sfp+0x68>
 800a2ac:	6836      	ldr	r6, [r6, #0]
 800a2ae:	e7f7      	b.n	800a2a0 <__sfp+0x18>
 800a2b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a2b4:	b9d5      	cbnz	r5, 800a2ec <__sfp+0x64>
 800a2b6:	4b16      	ldr	r3, [pc, #88]	; (800a310 <__sfp+0x88>)
 800a2b8:	60e3      	str	r3, [r4, #12]
 800a2ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a2be:	6665      	str	r5, [r4, #100]	; 0x64
 800a2c0:	f000 f847 	bl	800a352 <__retarget_lock_init_recursive>
 800a2c4:	f7ff ff96 	bl	800a1f4 <__sfp_lock_release>
 800a2c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a2cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a2d0:	6025      	str	r5, [r4, #0]
 800a2d2:	61a5      	str	r5, [r4, #24]
 800a2d4:	2208      	movs	r2, #8
 800a2d6:	4629      	mov	r1, r5
 800a2d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a2dc:	f7fb fd6a 	bl	8005db4 <memset>
 800a2e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a2e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a2e8:	4620      	mov	r0, r4
 800a2ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2ec:	3468      	adds	r4, #104	; 0x68
 800a2ee:	e7d9      	b.n	800a2a4 <__sfp+0x1c>
 800a2f0:	2104      	movs	r1, #4
 800a2f2:	4638      	mov	r0, r7
 800a2f4:	f7ff ff62 	bl	800a1bc <__sfmoreglue>
 800a2f8:	4604      	mov	r4, r0
 800a2fa:	6030      	str	r0, [r6, #0]
 800a2fc:	2800      	cmp	r0, #0
 800a2fe:	d1d5      	bne.n	800a2ac <__sfp+0x24>
 800a300:	f7ff ff78 	bl	800a1f4 <__sfp_lock_release>
 800a304:	230c      	movs	r3, #12
 800a306:	603b      	str	r3, [r7, #0]
 800a308:	e7ee      	b.n	800a2e8 <__sfp+0x60>
 800a30a:	bf00      	nop
 800a30c:	0800bc08 	.word	0x0800bc08
 800a310:	ffff0001 	.word	0xffff0001

0800a314 <_fwalk_reent>:
 800a314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a318:	4606      	mov	r6, r0
 800a31a:	4688      	mov	r8, r1
 800a31c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a320:	2700      	movs	r7, #0
 800a322:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a326:	f1b9 0901 	subs.w	r9, r9, #1
 800a32a:	d505      	bpl.n	800a338 <_fwalk_reent+0x24>
 800a32c:	6824      	ldr	r4, [r4, #0]
 800a32e:	2c00      	cmp	r4, #0
 800a330:	d1f7      	bne.n	800a322 <_fwalk_reent+0xe>
 800a332:	4638      	mov	r0, r7
 800a334:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a338:	89ab      	ldrh	r3, [r5, #12]
 800a33a:	2b01      	cmp	r3, #1
 800a33c:	d907      	bls.n	800a34e <_fwalk_reent+0x3a>
 800a33e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a342:	3301      	adds	r3, #1
 800a344:	d003      	beq.n	800a34e <_fwalk_reent+0x3a>
 800a346:	4629      	mov	r1, r5
 800a348:	4630      	mov	r0, r6
 800a34a:	47c0      	blx	r8
 800a34c:	4307      	orrs	r7, r0
 800a34e:	3568      	adds	r5, #104	; 0x68
 800a350:	e7e9      	b.n	800a326 <_fwalk_reent+0x12>

0800a352 <__retarget_lock_init_recursive>:
 800a352:	4770      	bx	lr

0800a354 <__retarget_lock_acquire_recursive>:
 800a354:	4770      	bx	lr

0800a356 <__retarget_lock_release_recursive>:
 800a356:	4770      	bx	lr

0800a358 <__swhatbuf_r>:
 800a358:	b570      	push	{r4, r5, r6, lr}
 800a35a:	460e      	mov	r6, r1
 800a35c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a360:	2900      	cmp	r1, #0
 800a362:	b096      	sub	sp, #88	; 0x58
 800a364:	4614      	mov	r4, r2
 800a366:	461d      	mov	r5, r3
 800a368:	da07      	bge.n	800a37a <__swhatbuf_r+0x22>
 800a36a:	2300      	movs	r3, #0
 800a36c:	602b      	str	r3, [r5, #0]
 800a36e:	89b3      	ldrh	r3, [r6, #12]
 800a370:	061a      	lsls	r2, r3, #24
 800a372:	d410      	bmi.n	800a396 <__swhatbuf_r+0x3e>
 800a374:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a378:	e00e      	b.n	800a398 <__swhatbuf_r+0x40>
 800a37a:	466a      	mov	r2, sp
 800a37c:	f000 f902 	bl	800a584 <_fstat_r>
 800a380:	2800      	cmp	r0, #0
 800a382:	dbf2      	blt.n	800a36a <__swhatbuf_r+0x12>
 800a384:	9a01      	ldr	r2, [sp, #4]
 800a386:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a38a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a38e:	425a      	negs	r2, r3
 800a390:	415a      	adcs	r2, r3
 800a392:	602a      	str	r2, [r5, #0]
 800a394:	e7ee      	b.n	800a374 <__swhatbuf_r+0x1c>
 800a396:	2340      	movs	r3, #64	; 0x40
 800a398:	2000      	movs	r0, #0
 800a39a:	6023      	str	r3, [r4, #0]
 800a39c:	b016      	add	sp, #88	; 0x58
 800a39e:	bd70      	pop	{r4, r5, r6, pc}

0800a3a0 <__smakebuf_r>:
 800a3a0:	898b      	ldrh	r3, [r1, #12]
 800a3a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a3a4:	079d      	lsls	r5, r3, #30
 800a3a6:	4606      	mov	r6, r0
 800a3a8:	460c      	mov	r4, r1
 800a3aa:	d507      	bpl.n	800a3bc <__smakebuf_r+0x1c>
 800a3ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a3b0:	6023      	str	r3, [r4, #0]
 800a3b2:	6123      	str	r3, [r4, #16]
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	6163      	str	r3, [r4, #20]
 800a3b8:	b002      	add	sp, #8
 800a3ba:	bd70      	pop	{r4, r5, r6, pc}
 800a3bc:	ab01      	add	r3, sp, #4
 800a3be:	466a      	mov	r2, sp
 800a3c0:	f7ff ffca 	bl	800a358 <__swhatbuf_r>
 800a3c4:	9900      	ldr	r1, [sp, #0]
 800a3c6:	4605      	mov	r5, r0
 800a3c8:	4630      	mov	r0, r6
 800a3ca:	f7ff f97f 	bl	80096cc <_malloc_r>
 800a3ce:	b948      	cbnz	r0, 800a3e4 <__smakebuf_r+0x44>
 800a3d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3d4:	059a      	lsls	r2, r3, #22
 800a3d6:	d4ef      	bmi.n	800a3b8 <__smakebuf_r+0x18>
 800a3d8:	f023 0303 	bic.w	r3, r3, #3
 800a3dc:	f043 0302 	orr.w	r3, r3, #2
 800a3e0:	81a3      	strh	r3, [r4, #12]
 800a3e2:	e7e3      	b.n	800a3ac <__smakebuf_r+0xc>
 800a3e4:	4b0d      	ldr	r3, [pc, #52]	; (800a41c <__smakebuf_r+0x7c>)
 800a3e6:	62b3      	str	r3, [r6, #40]	; 0x28
 800a3e8:	89a3      	ldrh	r3, [r4, #12]
 800a3ea:	6020      	str	r0, [r4, #0]
 800a3ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3f0:	81a3      	strh	r3, [r4, #12]
 800a3f2:	9b00      	ldr	r3, [sp, #0]
 800a3f4:	6163      	str	r3, [r4, #20]
 800a3f6:	9b01      	ldr	r3, [sp, #4]
 800a3f8:	6120      	str	r0, [r4, #16]
 800a3fa:	b15b      	cbz	r3, 800a414 <__smakebuf_r+0x74>
 800a3fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a400:	4630      	mov	r0, r6
 800a402:	f000 f8d1 	bl	800a5a8 <_isatty_r>
 800a406:	b128      	cbz	r0, 800a414 <__smakebuf_r+0x74>
 800a408:	89a3      	ldrh	r3, [r4, #12]
 800a40a:	f023 0303 	bic.w	r3, r3, #3
 800a40e:	f043 0301 	orr.w	r3, r3, #1
 800a412:	81a3      	strh	r3, [r4, #12]
 800a414:	89a0      	ldrh	r0, [r4, #12]
 800a416:	4305      	orrs	r5, r0
 800a418:	81a5      	strh	r5, [r4, #12]
 800a41a:	e7cd      	b.n	800a3b8 <__smakebuf_r+0x18>
 800a41c:	0800a1b1 	.word	0x0800a1b1

0800a420 <_malloc_usable_size_r>:
 800a420:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a424:	1f18      	subs	r0, r3, #4
 800a426:	2b00      	cmp	r3, #0
 800a428:	bfbc      	itt	lt
 800a42a:	580b      	ldrlt	r3, [r1, r0]
 800a42c:	18c0      	addlt	r0, r0, r3
 800a42e:	4770      	bx	lr

0800a430 <_raise_r>:
 800a430:	291f      	cmp	r1, #31
 800a432:	b538      	push	{r3, r4, r5, lr}
 800a434:	4604      	mov	r4, r0
 800a436:	460d      	mov	r5, r1
 800a438:	d904      	bls.n	800a444 <_raise_r+0x14>
 800a43a:	2316      	movs	r3, #22
 800a43c:	6003      	str	r3, [r0, #0]
 800a43e:	f04f 30ff 	mov.w	r0, #4294967295
 800a442:	bd38      	pop	{r3, r4, r5, pc}
 800a444:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a446:	b112      	cbz	r2, 800a44e <_raise_r+0x1e>
 800a448:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a44c:	b94b      	cbnz	r3, 800a462 <_raise_r+0x32>
 800a44e:	4620      	mov	r0, r4
 800a450:	f000 f830 	bl	800a4b4 <_getpid_r>
 800a454:	462a      	mov	r2, r5
 800a456:	4601      	mov	r1, r0
 800a458:	4620      	mov	r0, r4
 800a45a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a45e:	f000 b817 	b.w	800a490 <_kill_r>
 800a462:	2b01      	cmp	r3, #1
 800a464:	d00a      	beq.n	800a47c <_raise_r+0x4c>
 800a466:	1c59      	adds	r1, r3, #1
 800a468:	d103      	bne.n	800a472 <_raise_r+0x42>
 800a46a:	2316      	movs	r3, #22
 800a46c:	6003      	str	r3, [r0, #0]
 800a46e:	2001      	movs	r0, #1
 800a470:	e7e7      	b.n	800a442 <_raise_r+0x12>
 800a472:	2400      	movs	r4, #0
 800a474:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a478:	4628      	mov	r0, r5
 800a47a:	4798      	blx	r3
 800a47c:	2000      	movs	r0, #0
 800a47e:	e7e0      	b.n	800a442 <_raise_r+0x12>

0800a480 <raise>:
 800a480:	4b02      	ldr	r3, [pc, #8]	; (800a48c <raise+0xc>)
 800a482:	4601      	mov	r1, r0
 800a484:	6818      	ldr	r0, [r3, #0]
 800a486:	f7ff bfd3 	b.w	800a430 <_raise_r>
 800a48a:	bf00      	nop
 800a48c:	20000074 	.word	0x20000074

0800a490 <_kill_r>:
 800a490:	b538      	push	{r3, r4, r5, lr}
 800a492:	4d07      	ldr	r5, [pc, #28]	; (800a4b0 <_kill_r+0x20>)
 800a494:	2300      	movs	r3, #0
 800a496:	4604      	mov	r4, r0
 800a498:	4608      	mov	r0, r1
 800a49a:	4611      	mov	r1, r2
 800a49c:	602b      	str	r3, [r5, #0]
 800a49e:	f7f8 fbc1 	bl	8002c24 <_kill>
 800a4a2:	1c43      	adds	r3, r0, #1
 800a4a4:	d102      	bne.n	800a4ac <_kill_r+0x1c>
 800a4a6:	682b      	ldr	r3, [r5, #0]
 800a4a8:	b103      	cbz	r3, 800a4ac <_kill_r+0x1c>
 800a4aa:	6023      	str	r3, [r4, #0]
 800a4ac:	bd38      	pop	{r3, r4, r5, pc}
 800a4ae:	bf00      	nop
 800a4b0:	200007fc 	.word	0x200007fc

0800a4b4 <_getpid_r>:
 800a4b4:	f7f8 bbae 	b.w	8002c14 <_getpid>

0800a4b8 <__sread>:
 800a4b8:	b510      	push	{r4, lr}
 800a4ba:	460c      	mov	r4, r1
 800a4bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4c0:	f000 f894 	bl	800a5ec <_read_r>
 800a4c4:	2800      	cmp	r0, #0
 800a4c6:	bfab      	itete	ge
 800a4c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a4ca:	89a3      	ldrhlt	r3, [r4, #12]
 800a4cc:	181b      	addge	r3, r3, r0
 800a4ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a4d2:	bfac      	ite	ge
 800a4d4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a4d6:	81a3      	strhlt	r3, [r4, #12]
 800a4d8:	bd10      	pop	{r4, pc}

0800a4da <__swrite>:
 800a4da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4de:	461f      	mov	r7, r3
 800a4e0:	898b      	ldrh	r3, [r1, #12]
 800a4e2:	05db      	lsls	r3, r3, #23
 800a4e4:	4605      	mov	r5, r0
 800a4e6:	460c      	mov	r4, r1
 800a4e8:	4616      	mov	r6, r2
 800a4ea:	d505      	bpl.n	800a4f8 <__swrite+0x1e>
 800a4ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4f0:	2302      	movs	r3, #2
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	f000 f868 	bl	800a5c8 <_lseek_r>
 800a4f8:	89a3      	ldrh	r3, [r4, #12]
 800a4fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a4fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a502:	81a3      	strh	r3, [r4, #12]
 800a504:	4632      	mov	r2, r6
 800a506:	463b      	mov	r3, r7
 800a508:	4628      	mov	r0, r5
 800a50a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a50e:	f000 b817 	b.w	800a540 <_write_r>

0800a512 <__sseek>:
 800a512:	b510      	push	{r4, lr}
 800a514:	460c      	mov	r4, r1
 800a516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a51a:	f000 f855 	bl	800a5c8 <_lseek_r>
 800a51e:	1c43      	adds	r3, r0, #1
 800a520:	89a3      	ldrh	r3, [r4, #12]
 800a522:	bf15      	itete	ne
 800a524:	6560      	strne	r0, [r4, #84]	; 0x54
 800a526:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a52a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a52e:	81a3      	strheq	r3, [r4, #12]
 800a530:	bf18      	it	ne
 800a532:	81a3      	strhne	r3, [r4, #12]
 800a534:	bd10      	pop	{r4, pc}

0800a536 <__sclose>:
 800a536:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a53a:	f000 b813 	b.w	800a564 <_close_r>
	...

0800a540 <_write_r>:
 800a540:	b538      	push	{r3, r4, r5, lr}
 800a542:	4d07      	ldr	r5, [pc, #28]	; (800a560 <_write_r+0x20>)
 800a544:	4604      	mov	r4, r0
 800a546:	4608      	mov	r0, r1
 800a548:	4611      	mov	r1, r2
 800a54a:	2200      	movs	r2, #0
 800a54c:	602a      	str	r2, [r5, #0]
 800a54e:	461a      	mov	r2, r3
 800a550:	f7f8 fb9f 	bl	8002c92 <_write>
 800a554:	1c43      	adds	r3, r0, #1
 800a556:	d102      	bne.n	800a55e <_write_r+0x1e>
 800a558:	682b      	ldr	r3, [r5, #0]
 800a55a:	b103      	cbz	r3, 800a55e <_write_r+0x1e>
 800a55c:	6023      	str	r3, [r4, #0]
 800a55e:	bd38      	pop	{r3, r4, r5, pc}
 800a560:	200007fc 	.word	0x200007fc

0800a564 <_close_r>:
 800a564:	b538      	push	{r3, r4, r5, lr}
 800a566:	4d06      	ldr	r5, [pc, #24]	; (800a580 <_close_r+0x1c>)
 800a568:	2300      	movs	r3, #0
 800a56a:	4604      	mov	r4, r0
 800a56c:	4608      	mov	r0, r1
 800a56e:	602b      	str	r3, [r5, #0]
 800a570:	f7f8 fbab 	bl	8002cca <_close>
 800a574:	1c43      	adds	r3, r0, #1
 800a576:	d102      	bne.n	800a57e <_close_r+0x1a>
 800a578:	682b      	ldr	r3, [r5, #0]
 800a57a:	b103      	cbz	r3, 800a57e <_close_r+0x1a>
 800a57c:	6023      	str	r3, [r4, #0]
 800a57e:	bd38      	pop	{r3, r4, r5, pc}
 800a580:	200007fc 	.word	0x200007fc

0800a584 <_fstat_r>:
 800a584:	b538      	push	{r3, r4, r5, lr}
 800a586:	4d07      	ldr	r5, [pc, #28]	; (800a5a4 <_fstat_r+0x20>)
 800a588:	2300      	movs	r3, #0
 800a58a:	4604      	mov	r4, r0
 800a58c:	4608      	mov	r0, r1
 800a58e:	4611      	mov	r1, r2
 800a590:	602b      	str	r3, [r5, #0]
 800a592:	f7f8 fba6 	bl	8002ce2 <_fstat>
 800a596:	1c43      	adds	r3, r0, #1
 800a598:	d102      	bne.n	800a5a0 <_fstat_r+0x1c>
 800a59a:	682b      	ldr	r3, [r5, #0]
 800a59c:	b103      	cbz	r3, 800a5a0 <_fstat_r+0x1c>
 800a59e:	6023      	str	r3, [r4, #0]
 800a5a0:	bd38      	pop	{r3, r4, r5, pc}
 800a5a2:	bf00      	nop
 800a5a4:	200007fc 	.word	0x200007fc

0800a5a8 <_isatty_r>:
 800a5a8:	b538      	push	{r3, r4, r5, lr}
 800a5aa:	4d06      	ldr	r5, [pc, #24]	; (800a5c4 <_isatty_r+0x1c>)
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	4604      	mov	r4, r0
 800a5b0:	4608      	mov	r0, r1
 800a5b2:	602b      	str	r3, [r5, #0]
 800a5b4:	f7f8 fba5 	bl	8002d02 <_isatty>
 800a5b8:	1c43      	adds	r3, r0, #1
 800a5ba:	d102      	bne.n	800a5c2 <_isatty_r+0x1a>
 800a5bc:	682b      	ldr	r3, [r5, #0]
 800a5be:	b103      	cbz	r3, 800a5c2 <_isatty_r+0x1a>
 800a5c0:	6023      	str	r3, [r4, #0]
 800a5c2:	bd38      	pop	{r3, r4, r5, pc}
 800a5c4:	200007fc 	.word	0x200007fc

0800a5c8 <_lseek_r>:
 800a5c8:	b538      	push	{r3, r4, r5, lr}
 800a5ca:	4d07      	ldr	r5, [pc, #28]	; (800a5e8 <_lseek_r+0x20>)
 800a5cc:	4604      	mov	r4, r0
 800a5ce:	4608      	mov	r0, r1
 800a5d0:	4611      	mov	r1, r2
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	602a      	str	r2, [r5, #0]
 800a5d6:	461a      	mov	r2, r3
 800a5d8:	f7f8 fb9e 	bl	8002d18 <_lseek>
 800a5dc:	1c43      	adds	r3, r0, #1
 800a5de:	d102      	bne.n	800a5e6 <_lseek_r+0x1e>
 800a5e0:	682b      	ldr	r3, [r5, #0]
 800a5e2:	b103      	cbz	r3, 800a5e6 <_lseek_r+0x1e>
 800a5e4:	6023      	str	r3, [r4, #0]
 800a5e6:	bd38      	pop	{r3, r4, r5, pc}
 800a5e8:	200007fc 	.word	0x200007fc

0800a5ec <_read_r>:
 800a5ec:	b538      	push	{r3, r4, r5, lr}
 800a5ee:	4d07      	ldr	r5, [pc, #28]	; (800a60c <_read_r+0x20>)
 800a5f0:	4604      	mov	r4, r0
 800a5f2:	4608      	mov	r0, r1
 800a5f4:	4611      	mov	r1, r2
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	602a      	str	r2, [r5, #0]
 800a5fa:	461a      	mov	r2, r3
 800a5fc:	f7f8 fb2c 	bl	8002c58 <_read>
 800a600:	1c43      	adds	r3, r0, #1
 800a602:	d102      	bne.n	800a60a <_read_r+0x1e>
 800a604:	682b      	ldr	r3, [r5, #0]
 800a606:	b103      	cbz	r3, 800a60a <_read_r+0x1e>
 800a608:	6023      	str	r3, [r4, #0]
 800a60a:	bd38      	pop	{r3, r4, r5, pc}
 800a60c:	200007fc 	.word	0x200007fc

0800a610 <_init>:
 800a610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a612:	bf00      	nop
 800a614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a616:	bc08      	pop	{r3}
 800a618:	469e      	mov	lr, r3
 800a61a:	4770      	bx	lr

0800a61c <_fini>:
 800a61c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a61e:	bf00      	nop
 800a620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a622:	bc08      	pop	{r3}
 800a624:	469e      	mov	lr, r3
 800a626:	4770      	bx	lr
