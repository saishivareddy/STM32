
dwm1000- f411re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004624  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  080047c4  080047c4  000147c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004934  08004934  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08004934  08004934  00014934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800493c  0800493c  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800493c  0800493c  0001493c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004940  08004940  00014940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08004944  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  2000008c  080049d0  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  080049d0  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015a91  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003151  00000000  00000000  00035b4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e70  00000000  00000000  00038ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d20  00000000  00000000  00039b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a847  00000000  00000000  0003a830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000114af  00000000  00000000  00055077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090a7e  00000000  00000000  00066526  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f6fa4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fcc  00000000  00000000  000f6ff8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000008c 	.word	0x2000008c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080047ac 	.word	0x080047ac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000090 	.word	0x20000090
 80001dc:	080047ac 	.word	0x080047ac

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <dwt_initialise>:
#define VBAT_ADDRESS   (0x08)
#define VTEMP_ADDRESS  (0x09)
#define XTRIM_ADDRESS  (0x1E)

int dwt_initialise(int config)
{
 8000578:	b590      	push	{r4, r7, lr}
 800057a:	b087      	sub	sp, #28
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
    uint16 otp_xtaltrim_and_rev = 0;
 8000580:	2300      	movs	r3, #0
 8000582:	82fb      	strh	r3, [r7, #22]
    uint32 ldo_tune = 0;
 8000584:	2300      	movs	r3, #0
 8000586:	613b      	str	r3, [r7, #16]

    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
 8000588:	4b9f      	ldr	r3, [pc, #636]	; (8000808 <dwt_initialise+0x290>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	2200      	movs	r2, #0
 800058e:	751a      	strb	r2, [r3, #20]
    pdw1000local->wait4resp = 0; // - set to 0 - meaning wait for response not active
 8000590:	4b9d      	ldr	r3, [pc, #628]	; (8000808 <dwt_initialise+0x290>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	2200      	movs	r2, #0
 8000596:	755a      	strb	r2, [r3, #21]
    pdw1000local->sleep_mode = 0; // - set to 0 - meaning sleep mode has not been configured
 8000598:	4b9b      	ldr	r3, [pc, #620]	; (8000808 <dwt_initialise+0x290>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	2200      	movs	r2, #0
 800059e:	82da      	strh	r2, [r3, #22]

    pdw1000local->cbTxDone = NULL;
 80005a0:	4b99      	ldr	r3, [pc, #612]	; (8000808 <dwt_initialise+0x290>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	2200      	movs	r2, #0
 80005a6:	629a      	str	r2, [r3, #40]	; 0x28
    pdw1000local->cbRxOk = NULL;
 80005a8:	4b97      	ldr	r3, [pc, #604]	; (8000808 <dwt_initialise+0x290>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	2200      	movs	r2, #0
 80005ae:	62da      	str	r2, [r3, #44]	; 0x2c
    pdw1000local->cbRxTo = NULL;
 80005b0:	4b95      	ldr	r3, [pc, #596]	; (8000808 <dwt_initialise+0x290>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	2200      	movs	r2, #0
 80005b6:	631a      	str	r2, [r3, #48]	; 0x30
    pdw1000local->cbRxErr = NULL;
 80005b8:	4b93      	ldr	r3, [pc, #588]	; (8000808 <dwt_initialise+0x290>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	2200      	movs	r2, #0
 80005be:	635a      	str	r2, [r3, #52]	; 0x34
#if DWT_API_ERROR_CHECK
    pdw1000local->otp_mask = config ; // Save the READ_OTP config mask
#endif

    // Read and validate device ID, return -1 if not recognised
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
 80005c0:	f000 f926 	bl	8000810 <dwt_readdevid>
 80005c4:	4603      	mov	r3, r0
 80005c6:	4a91      	ldr	r2, [pc, #580]	; (800080c <dwt_initialise+0x294>)
 80005c8:	4293      	cmp	r3, r2
 80005ca:	d002      	beq.n	80005d2 <dwt_initialise+0x5a>
    {
        return DWT_ERROR ;
 80005cc:	f04f 33ff 	mov.w	r3, #4294967295
 80005d0:	e115      	b.n	80007fe <dwt_initialise+0x286>
    }

    if(!(DWT_DW_WAKE_UP & config)) // Don't reset the device if DWT_DW_WAKE_UP bit is set, e.g. when calling this API after wake up
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	f003 0302 	and.w	r3, r3, #2
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d101      	bne.n	80005e0 <dwt_initialise+0x68>
    {
        dwt_softreset(); // Make sure the device is completely reset before starting initialisation
 80005dc:	f000 fd6e 	bl	80010bc <dwt_softreset>
    }

    if(!((DWT_DW_WAKE_UP & config) && ((DWT_READ_OTP_TMP | DWT_READ_OTP_BAT | DWT_READ_OTP_LID | DWT_READ_OTP_PID | DWT_DW_WUP_RD_OTPREV)& config)))
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	f003 0302 	and.w	r3, r3, #2
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d004      	beq.n	80005f4 <dwt_initialise+0x7c>
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d102      	bne.n	80005fa <dwt_initialise+0x82>
    {
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 80005f4:	2000      	movs	r0, #0
 80005f6:	f000 fc6d 	bl	8000ed4 <_dwt_enableclocks>
    }                                  // when not reading from OTP, clocks don't need to change.

    // Configure the CPLL lock detect
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
 80005fa:	2204      	movs	r2, #4
 80005fc:	2100      	movs	r1, #0
 80005fe:	2024      	movs	r0, #36	; 0x24
 8000600:	f000 fbb1 	bl	8000d66 <dwt_write8bitoffsetreg>

    // When DW1000 IC is initialised from power up, then the LDO value should be kicked from OTP, otherwise if this API is called after
    // DW1000 IC has been woken up (DWT_DW_WAKE_UP bit is set) this can be skipped as LDO would have already been automatically
    // kicked/loaded on wake up
    if(!(DWT_DW_WAKE_UP & config))
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	f003 0302 	and.w	r3, r3, #2
 800060a:	2b00      	cmp	r3, #0
 800060c:	d116      	bne.n	800063c <dwt_initialise+0xc4>
    {
        // Load LDO tune from OTP and kick it if there is a value actually programmed.
        ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
 800060e:	2004      	movs	r0, #4
 8000610:	f000 fbff 	bl	8000e12 <_dwt_otpread>
 8000614:	6138      	str	r0, [r7, #16]
        if((ldo_tune & 0xFF) != 0)
 8000616:	693b      	ldr	r3, [r7, #16]
 8000618:	b2db      	uxtb	r3, r3
 800061a:	2b00      	cmp	r3, #0
 800061c:	d01f      	beq.n	800065e <dwt_initialise+0xe6>
        {
            // Kick LDO tune
            dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDO kick bit
 800061e:	2202      	movs	r2, #2
 8000620:	2112      	movs	r1, #18
 8000622:	202d      	movs	r0, #45	; 0x2d
 8000624:	f000 fb9f 	bl	8000d66 <dwt_write8bitoffsetreg>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 8000628:	4b77      	ldr	r3, [pc, #476]	; (8000808 <dwt_initialise+0x290>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	8ada      	ldrh	r2, [r3, #22]
 800062e:	4b76      	ldr	r3, [pc, #472]	; (8000808 <dwt_initialise+0x290>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000636:	b292      	uxth	r2, r2
 8000638:	82da      	strh	r2, [r3, #22]
 800063a:	e010      	b.n	800065e <dwt_initialise+0xe6>
        }
    }
    else
    {   //if LDOTUNE reg contains value different from default it means it was kicked from OTP and thus set AON_WCFG_ONW_LLDO.
        if(dwt_read32bitoffsetreg(RF_CONF_ID, LDOTUNE) != LDOTUNE_DEFAULT)
 800063c:	2130      	movs	r1, #48	; 0x30
 800063e:	2028      	movs	r0, #40	; 0x28
 8000640:	f000 fb4d 	bl	8000cde <dwt_read32bitoffsetreg>
 8000644:	4603      	mov	r3, r0
 8000646:	f1b3 3f88 	cmp.w	r3, #2290649224	; 0x88888888
 800064a:	d008      	beq.n	800065e <dwt_initialise+0xe6>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO;
 800064c:	4b6e      	ldr	r3, [pc, #440]	; (8000808 <dwt_initialise+0x290>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	8ada      	ldrh	r2, [r3, #22]
 8000652:	4b6d      	ldr	r3, [pc, #436]	; (8000808 <dwt_initialise+0x290>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800065a:	b292      	uxth	r2, r2
 800065c:	82da      	strh	r2, [r3, #22]
    }

    if((!(DWT_DW_WAKE_UP & config)) || ((DWT_DW_WAKE_UP & config) && (DWT_DW_WUP_RD_OTPREV & config)))
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	f003 0302 	and.w	r3, r3, #2
 8000664:	2b00      	cmp	r3, #0
 8000666:	d009      	beq.n	800067c <dwt_initialise+0x104>
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	f003 0302 	and.w	r3, r3, #2
 800066e:	2b00      	cmp	r3, #0
 8000670:	d011      	beq.n	8000696 <dwt_initialise+0x11e>
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	f003 0308 	and.w	r3, r3, #8
 8000678:	2b00      	cmp	r3, #0
 800067a:	d00c      	beq.n	8000696 <dwt_initialise+0x11e>
    {
        // Read OTP revision number
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 800067c:	201e      	movs	r0, #30
 800067e:	f000 fbc8 	bl	8000e12 <_dwt_otpread>
 8000682:	4603      	mov	r3, r0
 8000684:	82fb      	strh	r3, [r7, #22]
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 8000686:	8afb      	ldrh	r3, [r7, #22]
 8000688:	0a1b      	lsrs	r3, r3, #8
 800068a:	b29a      	uxth	r2, r3
 800068c:	4b5e      	ldr	r3, [pc, #376]	; (8000808 <dwt_initialise+0x290>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	b2d2      	uxtb	r2, r2
 8000692:	72da      	strb	r2, [r3, #11]
 8000694:	e003      	b.n	800069e <dwt_initialise+0x126>
    }
    else
        pdw1000local->otprev = 0; // If OTP valuse are not used, if this API is called after DW1000 IC has been woken up
 8000696:	4b5c      	ldr	r3, [pc, #368]	; (8000808 <dwt_initialise+0x290>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	2200      	movs	r2, #0
 800069c:	72da      	strb	r2, [r3, #11]
                                  // (DWT_DW_WAKE_UP bit is set), set otprev to 0

    if(!(DWT_DW_WAKE_UP & config))
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	f003 0302 	and.w	r3, r3, #2
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d10b      	bne.n	80006c0 <dwt_initialise+0x148>
    {
        // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
        if ((otp_xtaltrim_and_rev & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
 80006a8:	8afb      	ldrh	r3, [r7, #22]
 80006aa:	f003 031f 	and.w	r3, r3, #31
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d101      	bne.n	80006b6 <dwt_initialise+0x13e>
        {
            otp_xtaltrim_and_rev = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
 80006b2:	2310      	movs	r3, #16
 80006b4:	82fb      	strh	r3, [r7, #22]
        }
        // Configure XTAL trim
        dwt_setxtaltrim((uint8)otp_xtaltrim_and_rev);
 80006b6:	8afb      	ldrh	r3, [r7, #22]
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	4618      	mov	r0, r3
 80006bc:	f000 fd24 	bl	8001108 <dwt_setxtaltrim>
    }

    if(DWT_READ_OTP_PID & config)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	f003 0310 	and.w	r3, r3, #16
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d007      	beq.n	80006da <dwt_initialise+0x162>
    {
        // Load Part from OTP
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
 80006ca:	4b4f      	ldr	r3, [pc, #316]	; (8000808 <dwt_initialise+0x290>)
 80006cc:	681c      	ldr	r4, [r3, #0]
 80006ce:	2006      	movs	r0, #6
 80006d0:	f000 fb9f 	bl	8000e12 <_dwt_otpread>
 80006d4:	4603      	mov	r3, r0
 80006d6:	6023      	str	r3, [r4, #0]
 80006d8:	e003      	b.n	80006e2 <dwt_initialise+0x16a>
    }
    else
    {
        pdw1000local->partID = 0;
 80006da:	4b4b      	ldr	r3, [pc, #300]	; (8000808 <dwt_initialise+0x290>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
    }

    if(DWT_READ_OTP_LID & config)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	f003 0320 	and.w	r3, r3, #32
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d007      	beq.n	80006fc <dwt_initialise+0x184>
    {
        // Load Lot ID from OTP
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 80006ec:	4b46      	ldr	r3, [pc, #280]	; (8000808 <dwt_initialise+0x290>)
 80006ee:	681c      	ldr	r4, [r3, #0]
 80006f0:	2007      	movs	r0, #7
 80006f2:	f000 fb8e 	bl	8000e12 <_dwt_otpread>
 80006f6:	4603      	mov	r3, r0
 80006f8:	6063      	str	r3, [r4, #4]
 80006fa:	e003      	b.n	8000704 <dwt_initialise+0x18c>
    }
    else
    {
        pdw1000local->lotID = 0;
 80006fc:	4b42      	ldr	r3, [pc, #264]	; (8000808 <dwt_initialise+0x290>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2200      	movs	r2, #0
 8000702:	605a      	str	r2, [r3, #4]
    }

    if(DWT_READ_OTP_BAT & config)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800070a:	2b00      	cmp	r3, #0
 800070c:	d008      	beq.n	8000720 <dwt_initialise+0x1a8>
    {
        // Load VBAT from OTP
        pdw1000local->vBatP = _dwt_otpread(VBAT_ADDRESS) & 0xff;
 800070e:	2008      	movs	r0, #8
 8000710:	f000 fb7f 	bl	8000e12 <_dwt_otpread>
 8000714:	4602      	mov	r2, r0
 8000716:	4b3c      	ldr	r3, [pc, #240]	; (8000808 <dwt_initialise+0x290>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	b2d2      	uxtb	r2, r2
 800071c:	721a      	strb	r2, [r3, #8]
 800071e:	e003      	b.n	8000728 <dwt_initialise+0x1b0>
    }
    else
    {
        pdw1000local->vBatP = 0;
 8000720:	4b39      	ldr	r3, [pc, #228]	; (8000808 <dwt_initialise+0x290>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	2200      	movs	r2, #0
 8000726:	721a      	strb	r2, [r3, #8]
    }

    if(DWT_READ_OTP_TMP & config)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800072e:	2b00      	cmp	r3, #0
 8000730:	d008      	beq.n	8000744 <dwt_initialise+0x1cc>
    {
        // Load TEMP from OTP
        pdw1000local->tempP = _dwt_otpread(VTEMP_ADDRESS) & 0xff;
 8000732:	2009      	movs	r0, #9
 8000734:	f000 fb6d 	bl	8000e12 <_dwt_otpread>
 8000738:	4602      	mov	r2, r0
 800073a:	4b33      	ldr	r3, [pc, #204]	; (8000808 <dwt_initialise+0x290>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	b2d2      	uxtb	r2, r2
 8000740:	725a      	strb	r2, [r3, #9]
 8000742:	e003      	b.n	800074c <dwt_initialise+0x1d4>
    }
    else
    {
        pdw1000local->tempP = 0;
 8000744:	4b30      	ldr	r3, [pc, #192]	; (8000808 <dwt_initialise+0x290>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	2200      	movs	r2, #0
 800074a:	725a      	strb	r2, [r3, #9]
    }

    // Load leading edge detect code (LDE/microcode)
    if(!(DWT_DW_WAKE_UP & config))
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	f003 0302 	and.w	r3, r3, #2
 8000752:	2b00      	cmp	r3, #0
 8000754:	d121      	bne.n	800079a <dwt_initialise+0x222>
    {
        if(DWT_LOADUCODE & config)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	f003 0301 	and.w	r3, r3, #1
 800075c:	2b00      	cmp	r3, #0
 800075e:	d00b      	beq.n	8000778 <dwt_initialise+0x200>
        {
            _dwt_loaducodefromrom();
 8000760:	f000 fba4 	bl	8000eac <_dwt_loaducodefromrom>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up if loaded on initialisation
 8000764:	4b28      	ldr	r3, [pc, #160]	; (8000808 <dwt_initialise+0x290>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	8ada      	ldrh	r2, [r3, #22]
 800076a:	4b27      	ldr	r3, [pc, #156]	; (8000808 <dwt_initialise+0x290>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000772:	b292      	uxth	r2, r2
 8000774:	82da      	strh	r2, [r3, #22]
 8000776:	e01e      	b.n	80007b6 <dwt_initialise+0x23e>
        }
        else // Should disable the LDERUN bit enable if LDE has not been loaded
        {
            uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
 8000778:	2105      	movs	r1, #5
 800077a:	2036      	movs	r0, #54	; 0x36
 800077c:	f000 fad6 	bl	8000d2c <dwt_read16bitoffsetreg>
 8000780:	4603      	mov	r3, r0
 8000782:	81fb      	strh	r3, [r7, #14]
            rega &= 0xFDFF ; // Clear LDERUN bit
 8000784:	89fb      	ldrh	r3, [r7, #14]
 8000786:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800078a:	81fb      	strh	r3, [r7, #14]
            dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
 800078c:	89fb      	ldrh	r3, [r7, #14]
 800078e:	461a      	mov	r2, r3
 8000790:	2105      	movs	r1, #5
 8000792:	2036      	movs	r0, #54	; 0x36
 8000794:	f000 fafa 	bl	8000d8c <dwt_write16bitoffsetreg>
 8000798:	e00d      	b.n	80007b6 <dwt_initialise+0x23e>
        }
    }
    else //if DWT_DW_WUP_NO_UCODE is set then assume that the UCODE was loaded from ROM (i.e. DWT_LOADUCODE was set on power up),
    {     //thus set AON_WCFG_ONW_LLDE, otherwise don't set the AON_WCFG_ONW_LLDE bit in the sleep_mode configuration
        if((DWT_DW_WUP_NO_UCODE & config) == 0)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	f003 0304 	and.w	r3, r3, #4
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d108      	bne.n	80007b6 <dwt_initialise+0x23e>
        {
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE;
 80007a4:	4b18      	ldr	r3, [pc, #96]	; (8000808 <dwt_initialise+0x290>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	8ada      	ldrh	r2, [r3, #22]
 80007aa:	4b17      	ldr	r3, [pc, #92]	; (8000808 <dwt_initialise+0x290>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80007b2:	b292      	uxth	r2, r2
 80007b4:	82da      	strh	r2, [r3, #22]
        }
    }

    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 80007b6:	2001      	movs	r0, #1
 80007b8:	f000 fb8c 	bl	8000ed4 <_dwt_enableclocks>

    // The 3 bits in AON CFG1 register must be cleared to ensure proper operation of the DW1000 in DEEPSLEEP mode.
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
 80007bc:	2200      	movs	r2, #0
 80007be:	210a      	movs	r1, #10
 80007c0:	202c      	movs	r0, #44	; 0x2c
 80007c2:	f000 fad0 	bl	8000d66 <dwt_write8bitoffsetreg>

    // Read system register / store local copy
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 80007c6:	4b10      	ldr	r3, [pc, #64]	; (8000808 <dwt_initialise+0x290>)
 80007c8:	681c      	ldr	r4, [r3, #0]
 80007ca:	2100      	movs	r1, #0
 80007cc:	2004      	movs	r0, #4
 80007ce:	f000 fa86 	bl	8000cde <dwt_read32bitoffsetreg>
 80007d2:	4603      	mov	r3, r0
 80007d4:	6123      	str	r3, [r4, #16]
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 80007d6:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <dwt_initialise+0x290>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	691b      	ldr	r3, [r3, #16]
 80007dc:	0c1b      	lsrs	r3, r3, #16
 80007de:	b2da      	uxtb	r2, r3
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <dwt_initialise+0x290>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f002 0203 	and.w	r2, r2, #3
 80007e8:	b2d2      	uxtb	r2, r2
 80007ea:	729a      	strb	r2, [r3, #10]

    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID) ;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <dwt_initialise+0x290>)
 80007ee:	681c      	ldr	r4, [r3, #0]
 80007f0:	2100      	movs	r1, #0
 80007f2:	2008      	movs	r0, #8
 80007f4:	f000 fa73 	bl	8000cde <dwt_read32bitoffsetreg>
 80007f8:	4603      	mov	r3, r0
 80007fa:	60e3      	str	r3, [r4, #12]

    return DWT_SUCCESS ;
 80007fc:	2300      	movs	r3, #0

} // end dwt_initialise()
 80007fe:	4618      	mov	r0, r3
 8000800:	371c      	adds	r7, #28
 8000802:	46bd      	mov	sp, r7
 8000804:	bd90      	pop	{r4, r7, pc}
 8000806:	bf00      	nop
 8000808:	20000000 	.word	0x20000000
 800080c:	deca0130 	.word	0xdeca0130

08000810 <dwt_readdevid>:
 * output parameters
 *
 * returns the read value which for DW1000 is 0xDECA0130
 */
uint32 dwt_readdevid(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
 8000814:	2100      	movs	r1, #0
 8000816:	2000      	movs	r0, #0
 8000818:	f000 fa61 	bl	8000cde <dwt_read32bitoffsetreg>
 800081c:	4603      	mov	r3, r0
}
 800081e:	4618      	mov	r0, r3
 8000820:	bd80      	pop	{r7, pc}
	...

08000824 <dwt_configure>:
 * output parameters
 *
 * no return value
 */
void dwt_configure(dwt_config_t *config)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b086      	sub	sp, #24
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
    uint8 nsSfd_result  = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	75fb      	strb	r3, [r7, #23]
    uint8 useDWnsSFD = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	75bb      	strb	r3, [r7, #22]
    uint8 chan = config->chan ;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	74fb      	strb	r3, [r7, #19]
    uint32 regval ;
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	795b      	ldrb	r3, [r3, #5]
 800083e:	461a      	mov	r2, r3
 8000840:	4ba1      	ldr	r3, [pc, #644]	; (8000ac8 <dwt_configure+0x2a4>)
 8000842:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000846:	82bb      	strh	r3, [r7, #20]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	785b      	ldrb	r3, [r3, #1]
 800084c:	3b01      	subs	r3, #1
 800084e:	74bb      	strb	r3, [r7, #18]
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 8000850:	7cfb      	ldrb	r3, [r7, #19]
 8000852:	2b04      	cmp	r3, #4
 8000854:	d002      	beq.n	800085c <dwt_configure+0x38>
 8000856:	7cfb      	ldrb	r3, [r7, #19]
 8000858:	2b07      	cmp	r3, #7
 800085a:	d101      	bne.n	8000860 <dwt_configure+0x3c>
 800085c:	2301      	movs	r3, #1
 800085e:	e000      	b.n	8000862 <dwt_configure+0x3e>
 8000860:	2300      	movs	r3, #0
 8000862:	747b      	strb	r3, [r7, #17]
           || (config->txPreambLength == DWT_PLEN_2048) || (config->txPreambLength == DWT_PLEN_4096));
    assert((config->phrMode == DWT_PHRMODE_STD) || (config->phrMode == DWT_PHRMODE_EXT));
#endif

    // For 110 kbps we need a special setup
    if(DWT_BR_110K == config->dataRate)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	79db      	ldrb	r3, [r3, #7]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d10b      	bne.n	8000884 <dwt_configure+0x60>
    {
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 800086c:	4b97      	ldr	r3, [pc, #604]	; (8000acc <dwt_configure+0x2a8>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	691a      	ldr	r2, [r3, #16]
 8000872:	4b96      	ldr	r3, [pc, #600]	; (8000acc <dwt_configure+0x2a8>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800087a:	611a      	str	r2, [r3, #16]
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
 800087c:	8abb      	ldrh	r3, [r7, #20]
 800087e:	08db      	lsrs	r3, r3, #3
 8000880:	82bb      	strh	r3, [r7, #20]
 8000882:	e007      	b.n	8000894 <dwt_configure+0x70>
    }
    else
    {
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
 8000884:	4b91      	ldr	r3, [pc, #580]	; (8000acc <dwt_configure+0x2a8>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	691a      	ldr	r2, [r3, #16]
 800088a:	4b90      	ldr	r3, [pc, #576]	; (8000acc <dwt_configure+0x2a8>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8000892:	611a      	str	r2, [r3, #16]
    }

    pdw1000local->longFrames = config->phrMode ;
 8000894:	4b8d      	ldr	r3, [pc, #564]	; (8000acc <dwt_configure+0x2a8>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	687a      	ldr	r2, [r7, #4]
 800089a:	7a12      	ldrb	r2, [r2, #8]
 800089c:	729a      	strb	r2, [r3, #10]

    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
 800089e:	4b8b      	ldr	r3, [pc, #556]	; (8000acc <dwt_configure+0x2a8>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	691a      	ldr	r2, [r3, #16]
 80008a4:	4b89      	ldr	r3, [pc, #548]	; (8000acc <dwt_configure+0x2a8>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80008ac:	611a      	str	r2, [r3, #16]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 80008ae:	4b87      	ldr	r3, [pc, #540]	; (8000acc <dwt_configure+0x2a8>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	6919      	ldr	r1, [r3, #16]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	7a1b      	ldrb	r3, [r3, #8]
 80008b8:	041b      	lsls	r3, r3, #16
 80008ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80008be:	4b83      	ldr	r3, [pc, #524]	; (8000acc <dwt_configure+0x2a8>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	430a      	orrs	r2, r1
 80008c4:	611a      	str	r2, [r3, #16]

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 80008c6:	4b81      	ldr	r3, [pc, #516]	; (8000acc <dwt_configure+0x2a8>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	691b      	ldr	r3, [r3, #16]
 80008cc:	461a      	mov	r2, r3
 80008ce:	2100      	movs	r1, #0
 80008d0:	2004      	movs	r0, #4
 80008d2:	f000 fa77 	bl	8000dc4 <dwt_write32bitoffsetreg>
    // Set the lde_replicaCoeff
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16) ;
 80008d6:	8abb      	ldrh	r3, [r7, #20]
 80008d8:	461a      	mov	r2, r3
 80008da:	f642 0104 	movw	r1, #10244	; 0x2804
 80008de:	202e      	movs	r0, #46	; 0x2e
 80008e0:	f000 fa54 	bl	8000d8c <dwt_write16bitoffsetreg>

    _dwt_configlde(prfIndex);
 80008e4:	7cbb      	ldrb	r3, [r7, #18]
 80008e6:	4618      	mov	r0, r3
 80008e8:	f000 fac0 	bl	8000e6c <_dwt_configlde>

    // Configure PLL2/RF PLL block CFG/TUNE (for a given channel)
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
 80008ec:	7cfb      	ldrb	r3, [r7, #19]
 80008ee:	4a78      	ldr	r2, [pc, #480]	; (8000ad0 <dwt_configure+0x2ac>)
 80008f0:	5cd3      	ldrb	r3, [r2, r3]
 80008f2:	461a      	mov	r2, r3
 80008f4:	4b77      	ldr	r3, [pc, #476]	; (8000ad4 <dwt_configure+0x2b0>)
 80008f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008fa:	461a      	mov	r2, r3
 80008fc:	2107      	movs	r1, #7
 80008fe:	202b      	movs	r0, #43	; 0x2b
 8000900:	f000 fa60 	bl	8000dc4 <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
 8000904:	7cfb      	ldrb	r3, [r7, #19]
 8000906:	4a72      	ldr	r2, [pc, #456]	; (8000ad0 <dwt_configure+0x2ac>)
 8000908:	5cd3      	ldrb	r3, [r2, r3]
 800090a:	461a      	mov	r2, r3
 800090c:	4b72      	ldr	r3, [pc, #456]	; (8000ad8 <dwt_configure+0x2b4>)
 800090e:	5c9b      	ldrb	r3, [r3, r2]
 8000910:	461a      	mov	r2, r3
 8000912:	210b      	movs	r1, #11
 8000914:	202b      	movs	r0, #43	; 0x2b
 8000916:	f000 fa26 	bl	8000d66 <dwt_write8bitoffsetreg>

    // Configure RF RX blocks (for specified channel/bandwidth)
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
 800091a:	7c7b      	ldrb	r3, [r7, #17]
 800091c:	4a6f      	ldr	r2, [pc, #444]	; (8000adc <dwt_configure+0x2b8>)
 800091e:	5cd3      	ldrb	r3, [r2, r3]
 8000920:	461a      	mov	r2, r3
 8000922:	210b      	movs	r1, #11
 8000924:	2028      	movs	r0, #40	; 0x28
 8000926:	f000 fa1e 	bl	8000d66 <dwt_write8bitoffsetreg>

    // Configure RF TX blocks (for specified channel and PRF)
    // Configure RF TX control
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
 800092a:	7cfb      	ldrb	r3, [r7, #19]
 800092c:	4a68      	ldr	r2, [pc, #416]	; (8000ad0 <dwt_configure+0x2ac>)
 800092e:	5cd3      	ldrb	r3, [r2, r3]
 8000930:	461a      	mov	r2, r3
 8000932:	4b6b      	ldr	r3, [pc, #428]	; (8000ae0 <dwt_configure+0x2bc>)
 8000934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000938:	461a      	mov	r2, r3
 800093a:	210c      	movs	r1, #12
 800093c:	2028      	movs	r0, #40	; 0x28
 800093e:	f000 fa41 	bl	8000dc4 <dwt_write32bitoffsetreg>

    // Configure the baseband parameters (for specified PRF, bit rate, PAC, and SFD settings)
    // DTUNE0
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	79db      	ldrb	r3, [r3, #7]
 8000946:	4618      	mov	r0, r3
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	799b      	ldrb	r3, [r3, #6]
 800094c:	4619      	mov	r1, r3
 800094e:	4a65      	ldr	r2, [pc, #404]	; (8000ae4 <dwt_configure+0x2c0>)
 8000950:	0043      	lsls	r3, r0, #1
 8000952:	440b      	add	r3, r1
 8000954:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000958:	461a      	mov	r2, r3
 800095a:	2102      	movs	r1, #2
 800095c:	2027      	movs	r0, #39	; 0x27
 800095e:	f000 fa15 	bl	8000d8c <dwt_write16bitoffsetreg>

    // DTUNE1
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
 8000962:	7cbb      	ldrb	r3, [r7, #18]
 8000964:	4a60      	ldr	r2, [pc, #384]	; (8000ae8 <dwt_configure+0x2c4>)
 8000966:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800096a:	461a      	mov	r2, r3
 800096c:	2104      	movs	r1, #4
 800096e:	2027      	movs	r0, #39	; 0x27
 8000970:	f000 fa0c 	bl	8000d8c <dwt_write16bitoffsetreg>

    if(config->dataRate == DWT_BR_110K)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	79db      	ldrb	r3, [r3, #7]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d105      	bne.n	8000988 <dwt_configure+0x164>
    {
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K);
 800097c:	2264      	movs	r2, #100	; 0x64
 800097e:	2106      	movs	r1, #6
 8000980:	2027      	movs	r0, #39	; 0x27
 8000982:	f000 fa03 	bl	8000d8c <dwt_write16bitoffsetreg>
 8000986:	e018      	b.n	80009ba <dwt_configure+0x196>
    }
    else
    {
        if(config->txPreambLength == DWT_PLEN_64)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	789b      	ldrb	r3, [r3, #2]
 800098c:	2b04      	cmp	r3, #4
 800098e:	d10a      	bne.n	80009a6 <dwt_configure+0x182>
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64);
 8000990:	2210      	movs	r2, #16
 8000992:	2106      	movs	r1, #6
 8000994:	2027      	movs	r0, #39	; 0x27
 8000996:	f000 f9f9 	bl	8000d8c <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
 800099a:	2210      	movs	r2, #16
 800099c:	2126      	movs	r1, #38	; 0x26
 800099e:	2027      	movs	r0, #39	; 0x27
 80009a0:	f000 f9e1 	bl	8000d66 <dwt_write8bitoffsetreg>
 80009a4:	e009      	b.n	80009ba <dwt_configure+0x196>
        }
        else
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8);
 80009a6:	2220      	movs	r2, #32
 80009a8:	2106      	movs	r1, #6
 80009aa:	2027      	movs	r0, #39	; 0x27
 80009ac:	f000 f9ee 	bl	8000d8c <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
 80009b0:	2228      	movs	r2, #40	; 0x28
 80009b2:	2126      	movs	r1, #38	; 0x26
 80009b4:	2027      	movs	r0, #39	; 0x27
 80009b6:	f000 f9d6 	bl	8000d66 <dwt_write8bitoffsetreg>
        }
    }

    // DTUNE2
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
 80009ba:	7cbb      	ldrb	r3, [r7, #18]
 80009bc:	687a      	ldr	r2, [r7, #4]
 80009be:	78d2      	ldrb	r2, [r2, #3]
 80009c0:	4611      	mov	r1, r2
 80009c2:	4a4a      	ldr	r2, [pc, #296]	; (8000aec <dwt_configure+0x2c8>)
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	440b      	add	r3, r1
 80009c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009cc:	461a      	mov	r2, r3
 80009ce:	2108      	movs	r1, #8
 80009d0:	2027      	movs	r0, #39	; 0x27
 80009d2:	f000 f9f7 	bl	8000dc4 <dwt_write32bitoffsetreg>

    // DTUNE3 (SFD timeout)
    // Don't allow 0 - SFD timeout will always be enabled
    if(config->sfdTO == 0)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	895b      	ldrh	r3, [r3, #10]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d103      	bne.n	80009e6 <dwt_configure+0x1c2>
    {
        config->sfdTO = DWT_SFDTOC_DEF;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	f241 0241 	movw	r2, #4161	; 0x1041
 80009e4:	815a      	strh	r2, [r3, #10]
    }
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	895b      	ldrh	r3, [r3, #10]
 80009ea:	461a      	mov	r2, r3
 80009ec:	2120      	movs	r1, #32
 80009ee:	2027      	movs	r0, #39	; 0x27
 80009f0:	f000 f9cc 	bl	8000d8c <dwt_write16bitoffsetreg>

    // Configure AGC parameters
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
 80009f4:	4b3e      	ldr	r3, [pc, #248]	; (8000af0 <dwt_configure+0x2cc>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	461a      	mov	r2, r3
 80009fa:	210c      	movs	r1, #12
 80009fc:	2023      	movs	r0, #35	; 0x23
 80009fe:	f000 f9e1 	bl	8000dc4 <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
 8000a02:	7cbb      	ldrb	r3, [r7, #18]
 8000a04:	4a3a      	ldr	r2, [pc, #232]	; (8000af0 <dwt_configure+0x2cc>)
 8000a06:	005b      	lsls	r3, r3, #1
 8000a08:	4413      	add	r3, r2
 8000a0a:	889b      	ldrh	r3, [r3, #4]
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	2104      	movs	r1, #4
 8000a10:	2023      	movs	r0, #35	; 0x23
 8000a12:	f000 f9bb 	bl	8000d8c <dwt_write16bitoffsetreg>

    // Set (non-standard) user SFD for improved performance,
    if(config->nsSFD)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	799b      	ldrb	r3, [r3, #6]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d00d      	beq.n	8000a3a <dwt_configure+0x216>
    {
        // Write non standard (DW) SFD length
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	79db      	ldrb	r3, [r3, #7]
 8000a22:	461a      	mov	r2, r3
 8000a24:	4b33      	ldr	r3, [pc, #204]	; (8000af4 <dwt_configure+0x2d0>)
 8000a26:	5c9b      	ldrb	r3, [r3, r2]
 8000a28:	461a      	mov	r2, r3
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	2021      	movs	r0, #33	; 0x21
 8000a2e:	f000 f99a 	bl	8000d66 <dwt_write8bitoffsetreg>
        nsSfd_result = 3 ;
 8000a32:	2303      	movs	r3, #3
 8000a34:	75fb      	strb	r3, [r7, #23]
        useDWnsSFD = 1 ;
 8000a36:	2301      	movs	r3, #1
 8000a38:	75bb      	strb	r3, [r7, #22]
    }
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8000a3a:	7cfb      	ldrb	r3, [r7, #19]
 8000a3c:	f003 020f 	and.w	r2, r3, #15
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 8000a40:	7cfb      	ldrb	r3, [r7, #19]
 8000a42:	011b      	lsls	r3, r3, #4
 8000a44:	b2db      	uxtb	r3, r3
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8000a46:	431a      	orrs	r2, r3
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	785b      	ldrb	r3, [r3, #1]
 8000a4c:	049b      	lsls	r3, r3, #18
 8000a4e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 8000a52:	431a      	orrs	r2, r3
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 8000a54:	7dfb      	ldrb	r3, [r7, #23]
 8000a56:	051b      	lsls	r3, r3, #20
 8000a58:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 8000a5c:	431a      	orrs	r2, r3
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 8000a5e:	7dbb      	ldrb	r3, [r7, #22]
 8000a60:	045b      	lsls	r3, r3, #17
 8000a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 8000a66:	431a      	orrs	r2, r3
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	791b      	ldrb	r3, [r3, #4]
 8000a6c:	059b      	lsls	r3, r3, #22
 8000a6e:	f003 63f8 	and.w	r3, r3, #130023424	; 0x7c00000
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 8000a72:	431a      	orrs	r2, r3
              (CHAN_CTRL_RX_PCOD_MASK & ((uint32)config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	795b      	ldrb	r3, [r3, #5]
 8000a78:	06db      	lsls	r3, r3, #27
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(CHAN_CTRL_ID,regval) ;
 8000a7e:	68fa      	ldr	r2, [r7, #12]
 8000a80:	2100      	movs	r1, #0
 8000a82:	201f      	movs	r0, #31
 8000a84:	f000 f99e 	bl	8000dc4 <dwt_write32bitoffsetreg>

    // Set up TX Preamble Size, PRF and Data Rate
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	789a      	ldrb	r2, [r3, #2]
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	785b      	ldrb	r3, [r3, #1]
 8000a90:	4313      	orrs	r3, r2
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	0419      	lsls	r1, r3, #16
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	79db      	ldrb	r3, [r3, #7]
 8000a9a:	035a      	lsls	r2, r3, #13
 8000a9c:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <dwt_configure+0x2a8>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	430a      	orrs	r2, r1
 8000aa2:	60da      	str	r2, [r3, #12]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
 8000aa4:	4b09      	ldr	r3, [pc, #36]	; (8000acc <dwt_configure+0x2a8>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	68db      	ldr	r3, [r3, #12]
 8000aaa:	461a      	mov	r2, r3
 8000aac:	2100      	movs	r1, #0
 8000aae:	2008      	movs	r0, #8
 8000ab0:	f000 f988 	bl	8000dc4 <dwt_write32bitoffsetreg>

    // The SFD transmit pattern is initialised by the DW1000 upon a user TX request, but (due to an IC issue) it is not done for an auto-ACK TX. The
    // SYS_CTRL write below works around this issue, by simultaneously initiating and aborting a transmission, which correctly initialises the SFD
    // after its configuration or reconfiguration.
    // This issue is not documented at the time of writing this code. It should be in next release of DW1000 User Manual (v2.09, from July 2016).
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
 8000ab4:	2242      	movs	r2, #66	; 0x42
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	200d      	movs	r0, #13
 8000aba:	f000 f954 	bl	8000d66 <dwt_write8bitoffsetreg>
} // end dwt_configure()
 8000abe:	bf00      	nop
 8000ac0:	3718      	adds	r7, #24
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	08004850 	.word	0x08004850
 8000acc:	20000000 	.word	0x20000000
 8000ad0:	080047d0 	.word	0x080047d0
 8000ad4:	080047f0 	.word	0x080047f0
 8000ad8:	08004808 	.word	0x08004808
 8000adc:	08004810 	.word	0x08004810
 8000ae0:	080047d8 	.word	0x080047d8
 8000ae4:	08004820 	.word	0x08004820
 8000ae8:	0800482c 	.word	0x0800482c
 8000aec:	08004830 	.word	0x08004830
 8000af0:	08004814 	.word	0x08004814
 8000af4:	0800481c 	.word	0x0800481c

08000af8 <dwt_writetxdata>:
 * output parameters
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error
 */
int dwt_writetxdata(uint16 txFrameLength, uint8 *txFrameBytes, uint16 txBufferOffset)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	6039      	str	r1, [r7, #0]
 8000b02:	80fb      	strh	r3, [r7, #6]
 8000b04:	4613      	mov	r3, r2
 8000b06:	80bb      	strh	r3, [r7, #4]
    assert(txFrameLength >= 2);
    assert((pdw1000local->longFrames && (txFrameLength <= 1023)) || (txFrameLength <= 127));
    assert((txBufferOffset + txFrameLength) <= 1024);
#endif

    if ((txBufferOffset + txFrameLength) <= 1024)
 8000b08:	88ba      	ldrh	r2, [r7, #4]
 8000b0a:	88fb      	ldrh	r3, [r7, #6]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b12:	dc09      	bgt.n	8000b28 <dwt_writetxdata+0x30>
    {
        // Write the data to the IC TX buffer, (-2 bytes for auto generated CRC)
        dwt_writetodevice( TX_BUFFER_ID, txBufferOffset, txFrameLength-2, txFrameBytes);
 8000b14:	88fb      	ldrh	r3, [r7, #6]
 8000b16:	3b02      	subs	r3, #2
 8000b18:	461a      	mov	r2, r3
 8000b1a:	88b9      	ldrh	r1, [r7, #4]
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	2009      	movs	r0, #9
 8000b20:	f000 f828 	bl	8000b74 <dwt_writetodevice>
        return DWT_SUCCESS;
 8000b24:	2300      	movs	r3, #0
 8000b26:	e001      	b.n	8000b2c <dwt_writetxdata+0x34>
    }
    else
    {
        return DWT_ERROR;
 8000b28:	f04f 33ff 	mov.w	r3, #4294967295
    }
} // end dwt_writetxdata()
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <dwt_writetxfctrl>:
 * output parameters
 *
 * no return value
 */
void dwt_writetxfctrl(uint16 txFrameLength, uint16 txBufferOffset, int ranging)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	603a      	str	r2, [r7, #0]
 8000b3e:	80fb      	strh	r3, [r7, #6]
 8000b40:	460b      	mov	r3, r1
 8000b42:	80bb      	strh	r3, [r7, #4]
    assert((ranging == 0) || (ranging == 1))
#endif

    // Write the frame length to the TX frame control register
    // pdw1000local->txFCTRL has kept configured bit rate information
    uint32 reg32 = pdw1000local->txFCTRL | txFrameLength | ((uint32)txBufferOffset << TX_FCTRL_TXBOFFS_SHFT) | ((uint32)ranging << TX_FCTRL_TR_SHFT);
 8000b44:	4b0a      	ldr	r3, [pc, #40]	; (8000b70 <dwt_writetxfctrl+0x3c>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	68da      	ldr	r2, [r3, #12]
 8000b4a:	88fb      	ldrh	r3, [r7, #6]
 8000b4c:	431a      	orrs	r2, r3
 8000b4e:	88bb      	ldrh	r3, [r7, #4]
 8000b50:	059b      	lsls	r3, r3, #22
 8000b52:	431a      	orrs	r2, r3
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	03db      	lsls	r3, r3, #15
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	60fb      	str	r3, [r7, #12]
    dwt_write32bitreg(TX_FCTRL_ID, reg32);
 8000b5c:	68fa      	ldr	r2, [r7, #12]
 8000b5e:	2100      	movs	r1, #0
 8000b60:	2008      	movs	r0, #8
 8000b62:	f000 f92f 	bl	8000dc4 <dwt_write32bitoffsetreg>
} // end dwt_writetxfctrl()
 8000b66:	bf00      	nop
 8000b68:	3710      	adds	r7, #16
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000000 	.word	0x20000000

08000b74 <dwt_writetodevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    const uint8   *buffer
)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60ba      	str	r2, [r7, #8]
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	4603      	mov	r3, r0
 8000b80:	81fb      	strh	r3, [r7, #14]
 8000b82:	460b      	mov	r3, r1
 8000b84:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8000b86:	2300      	movs	r3, #0
 8000b88:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting WRITE operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8000b8a:	89bb      	ldrh	r3, [r7, #12]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d10d      	bne.n	8000bac <dwt_writetodevice+0x38>
    {
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8000b90:	89fb      	ldrh	r3, [r7, #14]
 8000b92:	b2da      	uxtb	r2, r3
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	1c59      	adds	r1, r3, #1
 8000b98:	6179      	str	r1, [r7, #20]
 8000b9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000b9e:	b2d2      	uxtb	r2, r2
 8000ba0:	f107 0118 	add.w	r1, r7, #24
 8000ba4:	440b      	add	r3, r1
 8000ba6:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000baa:	e033      	b.n	8000c14 <dwt_writetodevice+0xa0>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8000bac:	89fb      	ldrh	r3, [r7, #14]
 8000bae:	b2da      	uxtb	r2, r3
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	1c59      	adds	r1, r3, #1
 8000bb4:	6179      	str	r1, [r7, #20]
 8000bb6:	f062 023f 	orn	r2, r2, #63	; 0x3f
 8000bba:	b2d2      	uxtb	r2, r2
 8000bbc:	f107 0118 	add.w	r1, r7, #24
 8000bc0:	440b      	add	r3, r1
 8000bc2:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8000bc6:	89bb      	ldrh	r3, [r7, #12]
 8000bc8:	2b7f      	cmp	r3, #127	; 0x7f
 8000bca:	d80a      	bhi.n	8000be2 <dwt_writetodevice+0x6e>
        {
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	1c5a      	adds	r2, r3, #1
 8000bd0:	617a      	str	r2, [r7, #20]
 8000bd2:	89ba      	ldrh	r2, [r7, #12]
 8000bd4:	b2d2      	uxtb	r2, r2
 8000bd6:	f107 0118 	add.w	r1, r7, #24
 8000bda:	440b      	add	r3, r1
 8000bdc:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000be0:	e018      	b.n	8000c14 <dwt_writetodevice+0xa0>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8000be2:	89bb      	ldrh	r3, [r7, #12]
 8000be4:	b2da      	uxtb	r2, r3
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	1c59      	adds	r1, r3, #1
 8000bea:	6179      	str	r1, [r7, #20]
 8000bec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000bf0:	b2d2      	uxtb	r2, r2
 8000bf2:	f107 0118 	add.w	r1, r7, #24
 8000bf6:	440b      	add	r3, r1
 8000bf8:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8000bfc:	89bb      	ldrh	r3, [r7, #12]
 8000bfe:	09db      	lsrs	r3, r3, #7
 8000c00:	b299      	uxth	r1, r3
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	1c5a      	adds	r2, r3, #1
 8000c06:	617a      	str	r2, [r7, #20]
 8000c08:	b2ca      	uxtb	r2, r1
 8000c0a:	f107 0118 	add.w	r1, r7, #24
 8000c0e:	440b      	add	r3, r1
 8000c10:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Write it to the SPI
    writetospi(cnt,header,length,buffer);
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	b298      	uxth	r0, r3
 8000c18:	f107 0110 	add.w	r1, r7, #16
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	68ba      	ldr	r2, [r7, #8]
 8000c20:	f000 fab4 	bl	800118c <writetospi>
} // end dwt_writetodevice()
 8000c24:	bf00      	nop
 8000c26:	3718      	adds	r7, #24
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <dwt_readfromdevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    uint8         *buffer
)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60ba      	str	r2, [r7, #8]
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	4603      	mov	r3, r0
 8000c38:	81fb      	strh	r3, [r7, #14]
 8000c3a:	460b      	mov	r3, r1
 8000c3c:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8000c3e:	2300      	movs	r3, #0
 8000c40:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting READ operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8000c42:	89bb      	ldrh	r3, [r7, #12]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d10a      	bne.n	8000c5e <dwt_readfromdevice+0x32>
    {
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	1c5a      	adds	r2, r3, #1
 8000c4c:	617a      	str	r2, [r7, #20]
 8000c4e:	89fa      	ldrh	r2, [r7, #14]
 8000c50:	b2d2      	uxtb	r2, r2
 8000c52:	f107 0118 	add.w	r1, r7, #24
 8000c56:	440b      	add	r3, r1
 8000c58:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000c5c:	e033      	b.n	8000cc6 <dwt_readfromdevice+0x9a>
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8000c5e:	89fb      	ldrh	r3, [r7, #14]
 8000c60:	b2da      	uxtb	r2, r3
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	1c59      	adds	r1, r3, #1
 8000c66:	6179      	str	r1, [r7, #20]
 8000c68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c6c:	b2d2      	uxtb	r2, r2
 8000c6e:	f107 0118 	add.w	r1, r7, #24
 8000c72:	440b      	add	r3, r1
 8000c74:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8000c78:	89bb      	ldrh	r3, [r7, #12]
 8000c7a:	2b7f      	cmp	r3, #127	; 0x7f
 8000c7c:	d80a      	bhi.n	8000c94 <dwt_readfromdevice+0x68>
        {
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	1c5a      	adds	r2, r3, #1
 8000c82:	617a      	str	r2, [r7, #20]
 8000c84:	89ba      	ldrh	r2, [r7, #12]
 8000c86:	b2d2      	uxtb	r2, r2
 8000c88:	f107 0118 	add.w	r1, r7, #24
 8000c8c:	440b      	add	r3, r1
 8000c8e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000c92:	e018      	b.n	8000cc6 <dwt_readfromdevice+0x9a>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8000c94:	89bb      	ldrh	r3, [r7, #12]
 8000c96:	b2da      	uxtb	r2, r3
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	1c59      	adds	r1, r3, #1
 8000c9c:	6179      	str	r1, [r7, #20]
 8000c9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000ca2:	b2d2      	uxtb	r2, r2
 8000ca4:	f107 0118 	add.w	r1, r7, #24
 8000ca8:	440b      	add	r3, r1
 8000caa:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8000cae:	89bb      	ldrh	r3, [r7, #12]
 8000cb0:	09db      	lsrs	r3, r3, #7
 8000cb2:	b299      	uxth	r1, r3
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	1c5a      	adds	r2, r3, #1
 8000cb8:	617a      	str	r2, [r7, #20]
 8000cba:	b2ca      	uxtb	r2, r1
 8000cbc:	f107 0118 	add.w	r1, r7, #24
 8000cc0:	440b      	add	r3, r1
 8000cc2:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Do the read from the SPI
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	b298      	uxth	r0, r3
 8000cca:	f107 0110 	add.w	r1, r7, #16
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	68ba      	ldr	r2, [r7, #8]
 8000cd2:	f000 fa8f 	bl	80011f4 <readfromspi>
} // end dwt_readfromdevice()
 8000cd6:	bf00      	nop
 8000cd8:	3718      	adds	r7, #24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <dwt_read32bitoffsetreg>:
 * output parameters
 *
 * returns 32 bit register value
 */
uint32 dwt_read32bitoffsetreg(int regFileID, int regOffset)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b086      	sub	sp, #24
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
 8000ce6:	6039      	str	r1, [r7, #0]
    uint32  regval = 0 ;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]
    int     j ;
    uint8   buffer[4] ;

    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	b298      	uxth	r0, r3
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	b299      	uxth	r1, r3
 8000cf4:	f107 030c 	add.w	r3, r7, #12
 8000cf8:	2204      	movs	r2, #4
 8000cfa:	f7ff ff97 	bl	8000c2c <dwt_readfromdevice>

    for (j = 3 ; j >= 0 ; j --)
 8000cfe:	2303      	movs	r3, #3
 8000d00:	613b      	str	r3, [r7, #16]
 8000d02:	e00b      	b.n	8000d1c <dwt_read32bitoffsetreg+0x3e>
    {
        regval = (regval << 8) + buffer[j] ;
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	021b      	lsls	r3, r3, #8
 8000d08:	f107 010c 	add.w	r1, r7, #12
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	440a      	add	r2, r1
 8000d10:	7812      	ldrb	r2, [r2, #0]
 8000d12:	4413      	add	r3, r2
 8000d14:	617b      	str	r3, [r7, #20]
    for (j = 3 ; j >= 0 ; j --)
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	3b01      	subs	r3, #1
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	daf0      	bge.n	8000d04 <dwt_read32bitoffsetreg+0x26>
    }
    return regval ;
 8000d22:	697b      	ldr	r3, [r7, #20]

} // end dwt_read32bitoffsetreg()
 8000d24:	4618      	mov	r0, r3
 8000d26:	3718      	adds	r7, #24
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <dwt_read16bitoffsetreg>:
 * output parameters
 *
 * returns 16 bit register value
 */
uint16 dwt_read16bitoffsetreg(int regFileID, int regOffset)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
    uint16  regval = 0 ;
 8000d36:	2300      	movs	r3, #0
 8000d38:	81fb      	strh	r3, [r7, #14]
    uint8   buffer[2] ;

    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	b298      	uxth	r0, r3
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	b299      	uxth	r1, r3
 8000d42:	f107 030c 	add.w	r3, r7, #12
 8000d46:	2202      	movs	r2, #2
 8000d48:	f7ff ff70 	bl	8000c2c <dwt_readfromdevice>

    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
 8000d4c:	7b7b      	ldrb	r3, [r7, #13]
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	021b      	lsls	r3, r3, #8
 8000d52:	b29a      	uxth	r2, r3
 8000d54:	7b3b      	ldrb	r3, [r7, #12]
 8000d56:	b29b      	uxth	r3, r3
 8000d58:	4413      	add	r3, r2
 8000d5a:	81fb      	strh	r3, [r7, #14]
    return regval ;
 8000d5c:	89fb      	ldrh	r3, [r7, #14]

} // end dwt_read16bitoffsetreg()
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3710      	adds	r7, #16
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <dwt_write8bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write8bitoffsetreg(int regFileID, int regOffset, uint8 regval)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b084      	sub	sp, #16
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	60f8      	str	r0, [r7, #12]
 8000d6e:	60b9      	str	r1, [r7, #8]
 8000d70:	4613      	mov	r3, r2
 8000d72:	71fb      	strb	r3, [r7, #7]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	b298      	uxth	r0, r3
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	b299      	uxth	r1, r3
 8000d7c:	1dfb      	adds	r3, r7, #7
 8000d7e:	2201      	movs	r2, #1
 8000d80:	f7ff fef8 	bl	8000b74 <dwt_writetodevice>
}
 8000d84:	bf00      	nop
 8000d86:	3710      	adds	r7, #16
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <dwt_write16bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write16bitoffsetreg(int regFileID, int regOffset, uint16 regval)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	4613      	mov	r3, r2
 8000d98:	80fb      	strh	r3, [r7, #6]
    uint8   buffer[2] ;

    buffer[0] = regval & 0xFF;
 8000d9a:	88fb      	ldrh	r3, [r7, #6]
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	753b      	strb	r3, [r7, #20]
    buffer[1] = regval >> 8 ;
 8000da0:	88fb      	ldrh	r3, [r7, #6]
 8000da2:	0a1b      	lsrs	r3, r3, #8
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	757b      	strb	r3, [r7, #21]

    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	b298      	uxth	r0, r3
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	b299      	uxth	r1, r3
 8000db2:	f107 0314 	add.w	r3, r7, #20
 8000db6:	2202      	movs	r2, #2
 8000db8:	f7ff fedc 	bl	8000b74 <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 8000dbc:	bf00      	nop
 8000dbe:	3718      	adds	r7, #24
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <dwt_write32bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write32bitoffsetreg(int regFileID, int regOffset, uint32 regval)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
    int     j ;
    uint8   buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]
 8000dd4:	e00d      	b.n	8000df2 <dwt_write32bitoffsetreg+0x2e>
    {
        buffer[j] = regval & 0xff ;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	b2d9      	uxtb	r1, r3
 8000dda:	f107 0210 	add.w	r2, r7, #16
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	4413      	add	r3, r2
 8000de2:	460a      	mov	r2, r1
 8000de4:	701a      	strb	r2, [r3, #0]
        regval >>= 8 ;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	0a1b      	lsrs	r3, r3, #8
 8000dea:	607b      	str	r3, [r7, #4]
    for ( j = 0 ; j < 4 ; j++ )
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	3301      	adds	r3, #1
 8000df0:	617b      	str	r3, [r7, #20]
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	2b03      	cmp	r3, #3
 8000df6:	ddee      	ble.n	8000dd6 <dwt_write32bitoffsetreg+0x12>
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	b298      	uxth	r0, r3
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	b299      	uxth	r1, r3
 8000e00:	f107 0310 	add.w	r3, r7, #16
 8000e04:	2204      	movs	r2, #4
 8000e06:	f7ff feb5 	bl	8000b74 <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 8000e0a:	bf00      	nop
 8000e0c:	3718      	adds	r7, #24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <_dwt_otpread>:
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32 _dwt_otpread(uint16 address)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b084      	sub	sp, #16
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	4603      	mov	r3, r0
 8000e1a:	80fb      	strh	r3, [r7, #6]
    uint32 ret_data;

    // Write the address
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);
 8000e1c:	88fb      	ldrh	r3, [r7, #6]
 8000e1e:	461a      	mov	r2, r3
 8000e20:	2104      	movs	r1, #4
 8000e22:	202d      	movs	r0, #45	; 0x2d
 8000e24:	f7ff ffb2 	bl	8000d8c <dwt_write16bitoffsetreg>

    // Perform OTP Read - Manual read mode has to be set
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
 8000e28:	2203      	movs	r2, #3
 8000e2a:	2106      	movs	r1, #6
 8000e2c:	202d      	movs	r0, #45	; 0x2d
 8000e2e:	f7ff ff9a 	bl	8000d66 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
 8000e32:	2200      	movs	r2, #0
 8000e34:	2106      	movs	r1, #6
 8000e36:	202d      	movs	r0, #45	; 0x2d
 8000e38:	f7ff ff95 	bl	8000d66 <dwt_write8bitoffsetreg>

    // Read read data, available 40ns after rising edge of OTP_READ
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
 8000e3c:	210a      	movs	r1, #10
 8000e3e:	202d      	movs	r0, #45	; 0x2d
 8000e40:	f7ff ff4d 	bl	8000cde <dwt_read32bitoffsetreg>
 8000e44:	60f8      	str	r0, [r7, #12]

    // Return the 32bit of read data
    return ret_data;
 8000e46:	68fb      	ldr	r3, [r7, #12]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3710      	adds	r7, #16
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <_dwt_aonarrayupload>:
 * output parameters
 *
 * no return value
 */
void _dwt_aonarrayupload(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
 8000e54:	2200      	movs	r2, #0
 8000e56:	2102      	movs	r1, #2
 8000e58:	202c      	movs	r0, #44	; 0x2c
 8000e5a:	f7ff ff84 	bl	8000d66 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
 8000e5e:	2202      	movs	r2, #2
 8000e60:	2102      	movs	r1, #2
 8000e62:	202c      	movs	r0, #44	; 0x2c
 8000e64:	f7ff ff7f 	bl	8000d66 <dwt_write8bitoffsetreg>
}
 8000e68:	bf00      	nop
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <_dwt_configlde>:
 * output parameters
 *
 * no return value
 */
void _dwt_configlde(int prfIndex)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
 8000e74:	226d      	movs	r2, #109	; 0x6d
 8000e76:	f640 0106 	movw	r1, #2054	; 0x806
 8000e7a:	202e      	movs	r0, #46	; 0x2e
 8000e7c:	f7ff ff73 	bl	8000d66 <dwt_write8bitoffsetreg>

    if(prfIndex)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d007      	beq.n	8000e96 <_dwt_configlde+0x2a>
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
 8000e86:	f240 6207 	movw	r2, #1543	; 0x607
 8000e8a:	f641 0106 	movw	r1, #6150	; 0x1806
 8000e8e:	202e      	movs	r0, #46	; 0x2e
 8000e90:	f7ff ff7c 	bl	8000d8c <dwt_write16bitoffsetreg>
    }
    else
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
    }
}
 8000e94:	e006      	b.n	8000ea4 <_dwt_configlde+0x38>
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
 8000e96:	f241 6207 	movw	r2, #5639	; 0x1607
 8000e9a:	f641 0106 	movw	r1, #6150	; 0x1806
 8000e9e:	202e      	movs	r0, #46	; 0x2e
 8000ea0:	f7ff ff74 	bl	8000d8c <dwt_write16bitoffsetreg>
}
 8000ea4:	bf00      	nop
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <_dwt_loaducodefromrom>:
 * output parameters
 *
 * no return value
 */
void _dwt_loaducodefromrom(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
    // Set up clocks
    _dwt_enableclocks(FORCE_LDE);
 8000eb0:	200e      	movs	r0, #14
 8000eb2:	f000 f80f 	bl	8000ed4 <_dwt_enableclocks>

    // Kick off the LDE load
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
 8000eb6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000eba:	2106      	movs	r1, #6
 8000ebc:	202d      	movs	r0, #45	; 0x2d
 8000ebe:	f7ff ff65 	bl	8000d8c <dwt_write16bitoffsetreg>

    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 8000ec2:	2001      	movs	r0, #1
 8000ec4:	f000 f956 	bl	8001174 <deca_sleep>

    // Default clocks (ENABLE_ALL_SEQ)
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 8000ec8:	2001      	movs	r0, #1
 8000eca:	f000 f803 	bl	8000ed4 <_dwt_enableclocks>
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
	...

08000ed4 <_dwt_enableclocks>:
 * output parameters none
 *
 * no return value
 */
void _dwt_enableclocks(int clocks)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
    uint8 reg[2];

    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
 8000edc:	f107 030c 	add.w	r3, r7, #12
 8000ee0:	2202      	movs	r2, #2
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	2036      	movs	r0, #54	; 0x36
 8000ee6:	f7ff fea1 	bl	8000c2c <dwt_readfromdevice>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2b0e      	cmp	r3, #14
 8000eee:	d876      	bhi.n	8000fde <_dwt_enableclocks+0x10a>
 8000ef0:	a201      	add	r2, pc, #4	; (adr r2, 8000ef8 <_dwt_enableclocks+0x24>)
 8000ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ef6:	bf00      	nop
 8000ef8:	08000f45 	.word	0x08000f45
 8000efc:	08000f35 	.word	0x08000f35
 8000f00:	08000f5b 	.word	0x08000f5b
 8000f04:	08000fdf 	.word	0x08000fdf
 8000f08:	08000fdf 	.word	0x08000fdf
 8000f0c:	08000fdf 	.word	0x08000fdf
 8000f10:	08000fdf 	.word	0x08000fdf
 8000f14:	08000f71 	.word	0x08000f71
 8000f18:	08000f91 	.word	0x08000f91
 8000f1c:	08000fdf 	.word	0x08000fdf
 8000f20:	08000fdf 	.word	0x08000fdf
 8000f24:	08000fa7 	.word	0x08000fa7
 8000f28:	08000fb3 	.word	0x08000fb3
 8000f2c:	08000fbf 	.word	0x08000fbf
 8000f30:	08000fd5 	.word	0x08000fd5
    switch(clocks)
    {
        case ENABLE_ALL_SEQ:
        {
            reg[0] = 0x00 ;
 8000f34:	2300      	movs	r3, #0
 8000f36:	733b      	strb	r3, [r7, #12]
            reg[1] = reg[1] & 0xfe;
 8000f38:	7b7b      	ldrb	r3, [r7, #13]
 8000f3a:	f023 0301 	bic.w	r3, r3, #1
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000f42:	e04d      	b.n	8000fe0 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_XTI:
        {
            // System and RX
            reg[0] = 0x01 | (reg[0] & 0xfc);
 8000f44:	7b3b      	ldrb	r3, [r7, #12]
 8000f46:	b25b      	sxtb	r3, r3
 8000f48:	f023 0303 	bic.w	r3, r3, #3
 8000f4c:	b25b      	sxtb	r3, r3
 8000f4e:	f043 0301 	orr.w	r3, r3, #1
 8000f52:	b25b      	sxtb	r3, r3
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	733b      	strb	r3, [r7, #12]
        }
        break;
 8000f58:	e042      	b.n	8000fe0 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_PLL:
        {
            // System
            reg[0] = 0x02 | (reg[0] & 0xfc);
 8000f5a:	7b3b      	ldrb	r3, [r7, #12]
 8000f5c:	b25b      	sxtb	r3, r3
 8000f5e:	f023 0303 	bic.w	r3, r3, #3
 8000f62:	b25b      	sxtb	r3, r3
 8000f64:	f043 0302 	orr.w	r3, r3, #2
 8000f68:	b25b      	sxtb	r3, r3
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	733b      	strb	r3, [r7, #12]
        }
        break;
 8000f6e:	e037      	b.n	8000fe0 <_dwt_enableclocks+0x10c>
        case READ_ACC_ON:
        {
            reg[0] = 0x48 | (reg[0] & 0xb3);
 8000f70:	7b3b      	ldrb	r3, [r7, #12]
 8000f72:	b25b      	sxtb	r3, r3
 8000f74:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8000f78:	b25b      	sxtb	r3, r3
 8000f7a:	f043 0348 	orr.w	r3, r3, #72	; 0x48
 8000f7e:	b25b      	sxtb	r3, r3
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x80 | reg[1];
 8000f84:	7b7b      	ldrb	r3, [r7, #13]
 8000f86:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000f8e:	e027      	b.n	8000fe0 <_dwt_enableclocks+0x10c>
        case READ_ACC_OFF:
        {
            reg[0] = reg[0] & 0xb3;
 8000f90:	7b3b      	ldrb	r3, [r7, #12]
 8000f92:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x7f & reg[1];
 8000f9a:	7b7b      	ldrb	r3, [r7, #13]
 8000f9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000fa4:	e01c      	b.n	8000fe0 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_ON:
        {
            reg[1] = 0x02 | reg[1];
 8000fa6:	7b7b      	ldrb	r3, [r7, #13]
 8000fa8:	f043 0302 	orr.w	r3, r3, #2
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000fb0:	e016      	b.n	8000fe0 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_OFF:
        {
            reg[1] = reg[1] & 0xfd;
 8000fb2:	7b7b      	ldrb	r3, [r7, #13]
 8000fb4:	f023 0302 	bic.w	r3, r3, #2
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000fbc:	e010      	b.n	8000fe0 <_dwt_enableclocks+0x10c>
        case FORCE_TX_PLL:
        {
            reg[0] = 0x20 | (reg[0] & 0xcf);
 8000fbe:	7b3b      	ldrb	r3, [r7, #12]
 8000fc0:	b25b      	sxtb	r3, r3
 8000fc2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000fc6:	b25b      	sxtb	r3, r3
 8000fc8:	f043 0320 	orr.w	r3, r3, #32
 8000fcc:	b25b      	sxtb	r3, r3
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	733b      	strb	r3, [r7, #12]
        }
        break;
 8000fd2:	e005      	b.n	8000fe0 <_dwt_enableclocks+0x10c>
        case FORCE_LDE:
        {
            reg[0] = 0x01;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x03;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	737b      	strb	r3, [r7, #13]
        }
        break;
 8000fdc:	e000      	b.n	8000fe0 <_dwt_enableclocks+0x10c>
        default:
        break;
 8000fde:	bf00      	nop
    }


    // Need to write lower byte separately before setting the higher byte(s)
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
 8000fe0:	f107 030c 	add.w	r3, r7, #12
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	2036      	movs	r0, #54	; 0x36
 8000fea:	f7ff fdc3 	bl	8000b74 <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
 8000fee:	f107 030c 	add.w	r3, r7, #12
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	2036      	movs	r0, #54	; 0x36
 8000ffa:	f7ff fdbb 	bl	8000b74 <dwt_writetodevice>

} // end _dwt_enableclocks()
 8000ffe:	bf00      	nop
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop

08001008 <_dwt_disablesequencing>:
 * output parameters none
 *
 * no return value
 */
void _dwt_disablesequencing(void) // Disable sequencing and go to state "INIT"
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 800100c:	2000      	movs	r0, #0
 800100e:	f7ff ff61 	bl	8000ed4 <_dwt_enableclocks>

    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
 8001012:	2200      	movs	r2, #0
 8001014:	2104      	movs	r1, #4
 8001016:	2036      	movs	r0, #54	; 0x36
 8001018:	f7ff feb8 	bl	8000d8c <dwt_write16bitoffsetreg>
}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}

08001020 <dwt_starttx>:
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed transmission will be cancelled if the delayed time has passed)
 */

int dwt_starttx(uint8 mode)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
    int retval = DWT_SUCCESS ;
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
    uint8 temp  = 0x00;
 800102e:	2300      	movs	r3, #0
 8001030:	72fb      	strb	r3, [r7, #11]
    uint16 checkTxOK = 0 ;
 8001032:	2300      	movs	r3, #0
 8001034:	813b      	strh	r3, [r7, #8]

    if(mode & DWT_RESPONSE_EXPECTED)
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	f003 0302 	and.w	r3, r3, #2
 800103c:	2b00      	cmp	r3, #0
 800103e:	d005      	beq.n	800104c <dwt_starttx+0x2c>
    {
        temp = (uint8)SYS_CTRL_WAIT4RESP ; // Set wait4response bit
 8001040:	2380      	movs	r3, #128	; 0x80
 8001042:	72fb      	strb	r3, [r7, #11]
        pdw1000local->wait4resp = 1;
 8001044:	4b1c      	ldr	r3, [pc, #112]	; (80010b8 <dwt_starttx+0x98>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2201      	movs	r2, #1
 800104a:	755a      	strb	r2, [r3, #21]
    }

    if (mode & DWT_START_TX_DELAYED)
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	2b00      	cmp	r3, #0
 8001054:	d020      	beq.n	8001098 <dwt_starttx+0x78>
    {
        // Both SYS_CTRL_TXSTRT and SYS_CTRL_TXDLYS to correctly enable TX
        temp |= (uint8)(SYS_CTRL_TXDLYS | SYS_CTRL_TXSTRT) ;
 8001056:	7afb      	ldrb	r3, [r7, #11]
 8001058:	f043 0306 	orr.w	r3, r3, #6
 800105c:	72fb      	strb	r3, [r7, #11]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 800105e:	7afb      	ldrb	r3, [r7, #11]
 8001060:	461a      	mov	r2, r3
 8001062:	2100      	movs	r1, #0
 8001064:	200d      	movs	r0, #13
 8001066:	f7ff fe7e 	bl	8000d66 <dwt_write8bitoffsetreg>
        checkTxOK = dwt_read16bitoffsetreg(SYS_STATUS_ID, 3); // Read at offset 3 to get the upper 2 bytes out of 5
 800106a:	2103      	movs	r1, #3
 800106c:	200f      	movs	r0, #15
 800106e:	f7ff fe5d 	bl	8000d2c <dwt_read16bitoffsetreg>
 8001072:	4603      	mov	r3, r0
 8001074:	813b      	strh	r3, [r7, #8]
        if ((checkTxOK & SYS_STATUS_TXERR) == 0) // Transmit Delayed Send set over Half a Period away or Power Up error (there is enough time to send but not to power up individual blocks).
 8001076:	893b      	ldrh	r3, [r7, #8]
 8001078:	f403 6381 	and.w	r3, r3, #1032	; 0x408
 800107c:	2b00      	cmp	r3, #0
 800107e:	d102      	bne.n	8001086 <dwt_starttx+0x66>
        {
            retval = DWT_SUCCESS ; // All okay
 8001080:	2300      	movs	r3, #0
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	e012      	b.n	80010ac <dwt_starttx+0x8c>
        }
        else
        {
            // If HPDWARN or TXPUTE are set this indicates that the TXDLYS was set too late for the specified DX_TIME.
            // remedial action is to cancel delayed send and report error
            dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF);
 8001086:	2240      	movs	r2, #64	; 0x40
 8001088:	2100      	movs	r1, #0
 800108a:	200d      	movs	r0, #13
 800108c:	f7ff fe6b 	bl	8000d66 <dwt_write8bitoffsetreg>
            retval = DWT_ERROR ; // Failed !
 8001090:	f04f 33ff 	mov.w	r3, #4294967295
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	e009      	b.n	80010ac <dwt_starttx+0x8c>
        }
    }
    else
    {
        temp |= (uint8)SYS_CTRL_TXSTRT ;
 8001098:	7afb      	ldrb	r3, [r7, #11]
 800109a:	f043 0302 	orr.w	r3, r3, #2
 800109e:	72fb      	strb	r3, [r7, #11]
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 80010a0:	7afb      	ldrb	r3, [r7, #11]
 80010a2:	461a      	mov	r2, r3
 80010a4:	2100      	movs	r1, #0
 80010a6:	200d      	movs	r0, #13
 80010a8:	f7ff fe5d 	bl	8000d66 <dwt_write8bitoffsetreg>
    }

    return retval;
 80010ac:	68fb      	ldr	r3, [r7, #12]

} // end dwt_starttx()
 80010ae:	4618      	mov	r0, r3
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000000 	.word	0x20000000

080010bc <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
    _dwt_disablesequencing();
 80010c0:	f7ff ffa2 	bl	8001008 <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2100      	movs	r1, #0
 80010c8:	202c      	movs	r0, #44	; 0x2c
 80010ca:	f7ff fe5f 	bl	8000d8c <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2106      	movs	r1, #6
 80010d2:	202c      	movs	r0, #44	; 0x2c
 80010d4:	f7ff fe47 	bl	8000d66 <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
 80010d8:	f7ff feba 	bl	8000e50 <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC (set the reset bits)
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
 80010dc:	2200      	movs	r2, #0
 80010de:	2103      	movs	r1, #3
 80010e0:	2036      	movs	r0, #54	; 0x36
 80010e2:	f7ff fe40 	bl	8000d66 <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
 80010e6:	2001      	movs	r0, #1
 80010e8:	f000 f844 	bl	8001174 <deca_sleep>

    // Clear the reset bits
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 80010ec:	22f0      	movs	r2, #240	; 0xf0
 80010ee:	2103      	movs	r1, #3
 80010f0:	2036      	movs	r0, #54	; 0x36
 80010f2:	f7ff fe38 	bl	8000d66 <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
 80010f6:	4b03      	ldr	r3, [pc, #12]	; (8001104 <dwt_softreset+0x48>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2200      	movs	r2, #0
 80010fc:	755a      	strb	r2, [r3, #21]
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20000000 	.word	0x20000000

08001108 <dwt_setxtaltrim>:
 * output parameters
 *
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	f003 031f 	and.w	r3, r3, #31
 800111a:	b25b      	sxtb	r3, r3
 800111c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001120:	b25b      	sxtb	r3, r3
 8001122:	73fb      	strb	r3, [r7, #15]
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
 8001124:	7bfb      	ldrb	r3, [r7, #15]
 8001126:	461a      	mov	r2, r3
 8001128:	210e      	movs	r1, #14
 800112a:	202b      	movs	r0, #43	; 0x2b
 800112c:	f7ff fe1b 	bl	8000d66 <dwt_write8bitoffsetreg>
}
 8001130:	bf00      	nop
 8001132:	3710      	adds	r7, #16
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
	decaIrqStatus_t s = port_GetEXT_IRQStatus();
 800113e:	f000 f991 	bl	8001464 <port_GetEXT_IRQStatus>
 8001142:	4603      	mov	r3, r0
 8001144:	607b      	str	r3, [r7, #4]

	if(s) {
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <decamutexon+0x18>
		port_DisableEXT_IRQ(); //disable the external interrupt line
 800114c:	f000 f97c 	bl	8001448 <port_DisableEXT_IRQ>
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
 8001150:	687b      	ldr	r3, [r7, #4]
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <decamutexoff+0x12>
		port_EnableEXT_IRQ();
 8001168:	f000 f975 	bl	8001456 <port_EnableEXT_IRQ>
	}
}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <deca_sleep>:
#include "sleep.h"
#include "port.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
__INLINE void deca_sleep(unsigned int time_ms)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	Sleep(time_ms);
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f000 f8c5 	bl	800130c <Sleep>
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <writetospi>:
#pragma GCC optimize ("O3")
int writetospi(uint16_t headerLength,
               const    uint8_t *headerBuffer,
               uint32_t bodyLength,
               const    uint8_t *bodyBuffer)
{
 800118c:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8001190:	4683      	mov	fp, r0
 8001192:	468a      	mov	sl, r1
 8001194:	4691      	mov	r9, r2
 8001196:	4698      	mov	r8, r3
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 8001198:	f7ff ffce 	bl	8001138 <decamutexon>

    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800119c:	4d13      	ldr	r5, [pc, #76]	; (80011ec <writetospi+0x60>)
    stat = decamutexon() ;
 800119e:	4606      	mov	r6, r0
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80011a0:	4628      	mov	r0, r5
 80011a2:	f001 ff79 	bl	8003098 <HAL_SPI_GetState>
 80011a6:	2801      	cmp	r0, #1
 80011a8:	4604      	mov	r4, r0
 80011aa:	d1f9      	bne.n	80011a0 <writetospi+0x14>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 80011ac:	4810      	ldr	r0, [pc, #64]	; (80011f0 <writetospi+0x64>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	2140      	movs	r1, #64	; 0x40
 80011b2:	f001 f83f 	bl	8002234 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&headerBuffer[0], headerLength, HAL_MAX_DELAY);    /* Send header in polling mode */
 80011b6:	465a      	mov	r2, fp
 80011b8:	4651      	mov	r1, sl
 80011ba:	f04f 33ff 	mov.w	r3, #4294967295
 80011be:	480b      	ldr	r0, [pc, #44]	; (80011ec <writetospi+0x60>)
 80011c0:	f001 fd23 	bl	8002c0a <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&bodyBuffer[0], bodyLength, HAL_MAX_DELAY);        /* Send data in polling mode */
 80011c4:	f04f 33ff 	mov.w	r3, #4294967295
 80011c8:	fa1f f289 	uxth.w	r2, r9
 80011cc:	4641      	mov	r1, r8
 80011ce:	4807      	ldr	r0, [pc, #28]	; (80011ec <writetospi+0x60>)
 80011d0:	f001 fd1b 	bl	8002c0a <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 80011d4:	4622      	mov	r2, r4
 80011d6:	2140      	movs	r1, #64	; 0x40
 80011d8:	4805      	ldr	r0, [pc, #20]	; (80011f0 <writetospi+0x64>)
 80011da:	f001 f82b 	bl	8002234 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 80011de:	4630      	mov	r0, r6
 80011e0:	f7ff ffbb 	bl	800115a <decamutexoff>

    return 0;
} // end writetospi()
 80011e4:	2000      	movs	r0, #0
 80011e6:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
 80011ea:	bf00      	nop
 80011ec:	200000ec 	.word	0x200000ec
 80011f0:	40020400 	.word	0x40020400

080011f4 <readfromspi>:
#pragma GCC optimize ("O3")
int readfromspi(uint16_t headerLength,
                const uint8_t *headerBuffer,
                uint32_t readlength,
                uint8_t *readBuffer)
{
 80011f4:	e92d 4778 	stmdb	sp!, {r3, r4, r5, r6, r8, r9, sl, lr}
 80011f8:	4681      	mov	r9, r0
 80011fa:	460c      	mov	r4, r1
 80011fc:	4690      	mov	r8, r2
 80011fe:	461d      	mov	r5, r3
    int i;
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 8001200:	f7ff ff9a 	bl	8001138 <decamutexon>

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001204:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8001284 <readfromspi+0x90>
    stat = decamutexon() ;
 8001208:	4606      	mov	r6, r0
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800120a:	4650      	mov	r0, sl
 800120c:	f001 ff44 	bl	8003098 <HAL_SPI_GetState>
 8001210:	2801      	cmp	r0, #1
 8001212:	d1fa      	bne.n	800120a <readfromspi+0x16>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 8001214:	481a      	ldr	r0, [pc, #104]	; (8001280 <readfromspi+0x8c>)
 8001216:	2200      	movs	r2, #0
 8001218:	2140      	movs	r1, #64	; 0x40
 800121a:	f001 f80b 	bl	8002234 <HAL_GPIO_WritePin>

    /* Send header */
    for(i=0; i<headerLength; i++)
 800121e:	f1b9 0f00 	cmp.w	r9, #0
 8001222:	d00c      	beq.n	800123e <readfromspi+0x4a>
    {
        HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 8001224:	f8df a05c 	ldr.w	sl, [pc, #92]	; 8001284 <readfromspi+0x90>
 8001228:	44a1      	add	r9, r4
 800122a:	2201      	movs	r2, #1
 800122c:	4621      	mov	r1, r4
 800122e:	f04f 33ff 	mov.w	r3, #4294967295
 8001232:	4414      	add	r4, r2
 8001234:	4650      	mov	r0, sl
 8001236:	f001 fce8 	bl	8002c0a <HAL_SPI_Transmit>
    for(i=0; i<headerLength; i++)
 800123a:	454c      	cmp	r4, r9
 800123c:	d1f5      	bne.n	800122a <readfromspi+0x36>
    }

    /* for the data buffer use LL functions directly as the HAL SPI read function
     * has issue reading single bytes */
    while(readlength-- > 0)
 800123e:	f1b8 0f00 	cmp.w	r8, #0
 8001242:	d012      	beq.n	800126a <readfromspi+0x76>
 8001244:	f8df c03c 	ldr.w	ip, [pc, #60]	; 8001284 <readfromspi+0x90>
 8001248:	eb05 0008 	add.w	r0, r5, r8
        /* Wait until TXE flag is set to send data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
        {
        }

        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 800124c:	2400      	movs	r4, #0
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
 800124e:	f8dc 2000 	ldr.w	r2, [ip]
 8001252:	6891      	ldr	r1, [r2, #8]
 8001254:	0789      	lsls	r1, r1, #30
 8001256:	d5fc      	bpl.n	8001252 <readfromspi+0x5e>
        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 8001258:	60d4      	str	r4, [r2, #12]
        e.g. when waking up DW1000 from DEEPSLEEP via dwt_spicswakeup() function.
        */

        /* Wait until RXNE flag is set to read data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET)
 800125a:	6891      	ldr	r1, [r2, #8]
 800125c:	07cb      	lsls	r3, r1, #31
 800125e:	d5fc      	bpl.n	800125a <readfromspi+0x66>
        {
        }

        (*readBuffer++) = hspi1.Instance->DR;  //copy data read form (MISO)
 8001260:	68d3      	ldr	r3, [r2, #12]
 8001262:	f805 3b01 	strb.w	r3, [r5], #1
    while(readlength-- > 0)
 8001266:	4285      	cmp	r5, r0
 8001268:	d1f1      	bne.n	800124e <readfromspi+0x5a>
    }

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 800126a:	2201      	movs	r2, #1
 800126c:	2140      	movs	r1, #64	; 0x40
 800126e:	4804      	ldr	r0, [pc, #16]	; (8001280 <readfromspi+0x8c>)
 8001270:	f000 ffe0 	bl	8002234 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 8001274:	4630      	mov	r0, r6
 8001276:	f7ff ff70 	bl	800115a <decamutexoff>

    return 0;
} // end readfromspi()
 800127a:	2000      	movs	r0, #0
 800127c:	e8bd 8778 	ldmia.w	sp!, {r3, r4, r5, r6, r8, r9, sl, pc}
 8001280:	40020400 	.word	0x40020400
 8001284:	200000ec 	.word	0x200000ec

08001288 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001296:	2b00      	cmp	r3, #0
 8001298:	db0b      	blt.n	80012b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	f003 021f 	and.w	r2, r3, #31
 80012a0:	4907      	ldr	r1, [pc, #28]	; (80012c0 <__NVIC_EnableIRQ+0x38>)
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	095b      	lsrs	r3, r3, #5
 80012a8:	2001      	movs	r0, #1
 80012aa:	fa00 f202 	lsl.w	r2, r0, r2
 80012ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	e000e100 	.word	0xe000e100

080012c4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	db12      	blt.n	80012fc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	f003 021f 	and.w	r2, r3, #31
 80012dc:	490a      	ldr	r1, [pc, #40]	; (8001308 <__NVIC_DisableIRQ+0x44>)
 80012de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e2:	095b      	lsrs	r3, r3, #5
 80012e4:	2001      	movs	r0, #1
 80012e6:	fa00 f202 	lsl.w	r2, r0, r2
 80012ea:	3320      	adds	r3, #32
 80012ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80012f0:	f3bf 8f4f 	dsb	sy
}
 80012f4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012f6:	f3bf 8f6f 	isb	sy
}
 80012fa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	e000e100 	.word	0xe000e100

0800130c <Sleep>:
/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void
Sleep(uint32_t x)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f000 fc7f 	bl	8001c18 <HAL_Delay>
}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
	...

08001324 <EXTI_GetITEnStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The "enable" state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITEnStatus(uint32_t x)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
    return ((NVIC->ISER[(((uint32_t)x) >> 5UL)] &\
 800132c:	4a0b      	ldr	r2, [pc, #44]	; (800135c <EXTI_GetITEnStatus+0x38>)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	095b      	lsrs	r3, r3, #5
 8001332:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            (uint32_t)(1UL << (((uint32_t)x) & 0x1FUL)) ) == (uint32_t)RESET)?(RESET):(SET);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f003 031f 	and.w	r3, r3, #31
 800133c:	fa22 f303 	lsr.w	r3, r2, r3
 8001340:	f003 0301 	and.w	r3, r3, #1
 8001344:	2b00      	cmp	r3, #0
 8001346:	bf14      	ite	ne
 8001348:	2301      	movne	r3, #1
 800134a:	2300      	moveq	r3, #0
 800134c:	b2db      	uxtb	r3, r3
}
 800134e:	4618      	mov	r0, r3
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	e000e100 	.word	0xe000e100

08001360 <reset_DW1000>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW1000 by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DW1000(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef    GPIO_InitStruct;

    // Enable GPIO used for DW1000 reset as open collector output
    GPIO_InitStruct.Pin = DW_RST_Pin;
 8001366:	2301      	movs	r3, #1
 8001368:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800136a:	2311      	movs	r3, #17
 800136c:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 8001372:	1d3b      	adds	r3, r7, #4
 8001374:	4619      	mov	r1, r3
 8001376:	480a      	ldr	r0, [pc, #40]	; (80013a0 <reset_DW1000+0x40>)
 8001378:	f000 fdd8 	bl	8001f2c <HAL_GPIO_Init>

    //drive the RSTn pin low
    HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_RESET);
 800137c:	2200      	movs	r2, #0
 800137e:	2101      	movs	r1, #1
 8001380:	4807      	ldr	r0, [pc, #28]	; (80013a0 <reset_DW1000+0x40>)
 8001382:	f000 ff57 	bl	8002234 <HAL_GPIO_WritePin>

    Sleep(1);
 8001386:	2001      	movs	r0, #1
 8001388:	f7ff ffc0 	bl	800130c <Sleep>

    //put the pin back to output open-drain (not active)
    setup_DW1000RSTnIRQ(0);
 800138c:	2000      	movs	r0, #0
 800138e:	f000 f809 	bl	80013a4 <setup_DW1000RSTnIRQ>



    Sleep(2);
 8001392:	2002      	movs	r0, #2
 8001394:	f7ff ffba 	bl	800130c <Sleep>
}
 8001398:	bf00      	nop
 800139a:	3718      	adds	r7, #24
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40020000 	.word	0x40020000

080013a4 <setup_DW1000RSTnIRQ>:
 * @brief   setup the DW_RESET pin mode
 *          0 - output Open collector mode
 *          !0 - input mode with connected EXTI0 IRQ
 * */
void setup_DW1000RSTnIRQ(int enable)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b088      	sub	sp, #32
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    if(enable)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d015      	beq.n	80013de <setup_DW1000RSTnIRQ+0x3a>
    {
        // Enable GPIO used as DECA RESET for interrupt
        GPIO_InitStruct.Pin = DW_RST_Pin;
 80013b2:	2301      	movs	r3, #1
 80013b4:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013b6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013ba:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 80013c0:	f107 030c 	add.w	r3, r7, #12
 80013c4:	4619      	mov	r1, r3
 80013c6:	4813      	ldr	r0, [pc, #76]	; (8001414 <setup_DW1000RSTnIRQ+0x70>)
 80013c8:	f000 fdb0 	bl	8001f2c <HAL_GPIO_Init>

        HAL_NVIC_EnableIRQ(EXTI0_IRQn);     //pin #0 -> EXTI #0
 80013cc:	2006      	movs	r0, #6
 80013ce:	f000 fd62 	bl	8001e96 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80013d2:	2200      	movs	r2, #0
 80013d4:	2105      	movs	r1, #5
 80013d6:	2006      	movs	r0, #6
 80013d8:	f000 fd41 	bl	8001e5e <HAL_NVIC_SetPriority>
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
        HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_SET);
    }
}
 80013dc:	e015      	b.n	800140a <setup_DW1000RSTnIRQ+0x66>
        HAL_NVIC_DisableIRQ(EXTI0_IRQn);    //pin #0 -> EXTI #0
 80013de:	2006      	movs	r0, #6
 80013e0:	f000 fd67 	bl	8001eb2 <HAL_NVIC_DisableIRQ>
        GPIO_InitStruct.Pin = DW_RST_Pin;
 80013e4:	2301      	movs	r3, #1
 80013e6:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80013e8:	2311      	movs	r3, #17
 80013ea:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013f0:	2302      	movs	r3, #2
 80013f2:	61bb      	str	r3, [r7, #24]
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 80013f4:	f107 030c 	add.w	r3, r7, #12
 80013f8:	4619      	mov	r1, r3
 80013fa:	4806      	ldr	r0, [pc, #24]	; (8001414 <setup_DW1000RSTnIRQ+0x70>)
 80013fc:	f000 fd96 	bl	8001f2c <HAL_GPIO_Init>
        HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_SET);
 8001400:	2201      	movs	r2, #1
 8001402:	2101      	movs	r1, #1
 8001404:	4803      	ldr	r0, [pc, #12]	; (8001414 <setup_DW1000RSTnIRQ+0x70>)
 8001406:	f000 ff15 	bl	8002234 <HAL_GPIO_WritePin>
}
 800140a:	bf00      	nop
 800140c:	3720      	adds	r7, #32
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40020000 	.word	0x40020000

08001418 <port_set_dw1000_slowrate>:
/* @fn      port_set_dw1000_slowrate
 * @brief   set 2.25MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_slowrate(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800141c:	4b03      	ldr	r3, [pc, #12]	; (800142c <port_set_dw1000_slowrate+0x14>)
 800141e:	2220      	movs	r2, #32
 8001420:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 8001422:	4802      	ldr	r0, [pc, #8]	; (800142c <port_set_dw1000_slowrate+0x14>)
 8001424:	f001 fb68 	bl	8002af8 <HAL_SPI_Init>
}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}
 800142c:	200000ec 	.word	0x200000ec

08001430 <port_set_dw1000_fastrate>:
/* @fn      port_set_dw1000_fastrate
 * @brief   set 18MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_fastrate(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <port_set_dw1000_fastrate+0x14>)
 8001436:	2208      	movs	r2, #8
 8001438:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 800143a:	4802      	ldr	r0, [pc, #8]	; (8001444 <port_set_dw1000_fastrate+0x14>)
 800143c:	f001 fb5c 	bl	8002af8 <HAL_SPI_Init>
}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}
 8001444:	200000ec 	.word	0x200000ec

08001448 <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
    NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 800144c:	2017      	movs	r0, #23
 800144e:	f7ff ff39 	bl	80012c4 <__NVIC_DisableIRQ>
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}

08001456 <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	af00      	add	r7, sp, #0
    NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 800145a:	2017      	movs	r0, #23
 800145c:	f7ff ff14 	bl	8001288 <__NVIC_EnableIRQ>
}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}

08001464 <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
    return EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 8001468:	2017      	movs	r0, #23
 800146a:	f7ff ff5b 	bl	8001324 <EXTI_GetITEnStatus>
 800146e:	4603      	mov	r3, r0
}
 8001470:	4618      	mov	r0, r3
 8001472:	bd80      	pop	{r7, pc}

08001474 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b08a      	sub	sp, #40	; 0x28
 8001478:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147a:	f107 0314 	add.w	r3, r7, #20
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]
 8001484:	609a      	str	r2, [r3, #8]
 8001486:	60da      	str	r2, [r3, #12]
 8001488:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	613b      	str	r3, [r7, #16]
 800148e:	4b30      	ldr	r3, [pc, #192]	; (8001550 <MX_GPIO_Init+0xdc>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	4a2f      	ldr	r2, [pc, #188]	; (8001550 <MX_GPIO_Init+0xdc>)
 8001494:	f043 0304 	orr.w	r3, r3, #4
 8001498:	6313      	str	r3, [r2, #48]	; 0x30
 800149a:	4b2d      	ldr	r3, [pc, #180]	; (8001550 <MX_GPIO_Init+0xdc>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	f003 0304 	and.w	r3, r3, #4
 80014a2:	613b      	str	r3, [r7, #16]
 80014a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	4b29      	ldr	r3, [pc, #164]	; (8001550 <MX_GPIO_Init+0xdc>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	4a28      	ldr	r2, [pc, #160]	; (8001550 <MX_GPIO_Init+0xdc>)
 80014b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014b4:	6313      	str	r3, [r2, #48]	; 0x30
 80014b6:	4b26      	ldr	r3, [pc, #152]	; (8001550 <MX_GPIO_Init+0xdc>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	4b22      	ldr	r3, [pc, #136]	; (8001550 <MX_GPIO_Init+0xdc>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	4a21      	ldr	r2, [pc, #132]	; (8001550 <MX_GPIO_Init+0xdc>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	6313      	str	r3, [r2, #48]	; 0x30
 80014d2:	4b1f      	ldr	r3, [pc, #124]	; (8001550 <MX_GPIO_Init+0xdc>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	607b      	str	r3, [r7, #4]
 80014e2:	4b1b      	ldr	r3, [pc, #108]	; (8001550 <MX_GPIO_Init+0xdc>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	4a1a      	ldr	r2, [pc, #104]	; (8001550 <MX_GPIO_Init+0xdc>)
 80014e8:	f043 0302 	orr.w	r3, r3, #2
 80014ec:	6313      	str	r3, [r2, #48]	; 0x30
 80014ee:	4b18      	ldr	r3, [pc, #96]	; (8001550 <MX_GPIO_Init+0xdc>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	607b      	str	r3, [r7, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DW_RST_Pin|DW_IRQ_Pin, GPIO_PIN_RESET);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2103      	movs	r1, #3
 80014fe:	4815      	ldr	r0, [pc, #84]	; (8001554 <MX_GPIO_Init+0xe0>)
 8001500:	f000 fe98 	bl	8002234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET);
 8001504:	2200      	movs	r2, #0
 8001506:	2140      	movs	r1, #64	; 0x40
 8001508:	4813      	ldr	r0, [pc, #76]	; (8001558 <MX_GPIO_Init+0xe4>)
 800150a:	f000 fe93 	bl	8002234 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DW_RST_Pin|DW_IRQ_Pin;
 800150e:	2303      	movs	r3, #3
 8001510:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001512:	2301      	movs	r3, #1
 8001514:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151a:	2300      	movs	r3, #0
 800151c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	4619      	mov	r1, r3
 8001524:	480b      	ldr	r0, [pc, #44]	; (8001554 <MX_GPIO_Init+0xe0>)
 8001526:	f000 fd01 	bl	8001f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DW_CS_Pin;
 800152a:	2340      	movs	r3, #64	; 0x40
 800152c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800152e:	2301      	movs	r3, #1
 8001530:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	2300      	movs	r3, #0
 8001534:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001536:	2300      	movs	r3, #0
 8001538:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DW_CS_GPIO_Port, &GPIO_InitStruct);
 800153a:	f107 0314 	add.w	r3, r7, #20
 800153e:	4619      	mov	r1, r3
 8001540:	4805      	ldr	r0, [pc, #20]	; (8001558 <MX_GPIO_Init+0xe4>)
 8001542:	f000 fcf3 	bl	8001f2c <HAL_GPIO_Init>

}
 8001546:	bf00      	nop
 8001548:	3728      	adds	r7, #40	; 0x28
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40023800 	.word	0x40023800
 8001554:	40020000 	.word	0x40020000
 8001558:	40020400 	.word	0x40020400

0800155c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001560:	f000 fae8 	bl	8001b34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001564:	f000 f80c 	bl	8001580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001568:	f7ff ff84 	bl	8001474 <MX_GPIO_Init>
  MX_SPI1_Init();
 800156c:	f000 f86c 	bl	8001648 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001570:	f000 fa44 	bl	80019fc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  setup_DW1000RSTnIRQ(0);
 8001574:	2000      	movs	r0, #0
 8001576:	f7ff ff15 	bl	80013a4 <setup_DW1000RSTnIRQ>

    dw_main();
 800157a:	f000 f9fd 	bl	8001978 <dw_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800157e:	e7fe      	b.n	800157e <main+0x22>

08001580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b094      	sub	sp, #80	; 0x50
 8001584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001586:	f107 0320 	add.w	r3, r7, #32
 800158a:	2230      	movs	r2, #48	; 0x30
 800158c:	2100      	movs	r1, #0
 800158e:	4618      	mov	r0, r3
 8001590:	f002 f9ae 	bl	80038f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001594:	f107 030c 	add.w	r3, r7, #12
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	60da      	str	r2, [r3, #12]
 80015a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015a4:	2300      	movs	r3, #0
 80015a6:	60bb      	str	r3, [r7, #8]
 80015a8:	4b22      	ldr	r3, [pc, #136]	; (8001634 <SystemClock_Config+0xb4>)
 80015aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ac:	4a21      	ldr	r2, [pc, #132]	; (8001634 <SystemClock_Config+0xb4>)
 80015ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b2:	6413      	str	r3, [r2, #64]	; 0x40
 80015b4:	4b1f      	ldr	r3, [pc, #124]	; (8001634 <SystemClock_Config+0xb4>)
 80015b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015c0:	2300      	movs	r3, #0
 80015c2:	607b      	str	r3, [r7, #4]
 80015c4:	4b1c      	ldr	r3, [pc, #112]	; (8001638 <SystemClock_Config+0xb8>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a1b      	ldr	r2, [pc, #108]	; (8001638 <SystemClock_Config+0xb8>)
 80015ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015ce:	6013      	str	r3, [r2, #0]
 80015d0:	4b19      	ldr	r3, [pc, #100]	; (8001638 <SystemClock_Config+0xb8>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015d8:	607b      	str	r3, [r7, #4]
 80015da:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015dc:	2302      	movs	r3, #2
 80015de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015e0:	2301      	movs	r3, #1
 80015e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015e4:	2310      	movs	r3, #16
 80015e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015e8:	2300      	movs	r3, #0
 80015ea:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ec:	f107 0320 	add.w	r3, r7, #32
 80015f0:	4618      	mov	r0, r3
 80015f2:	f000 fe39 	bl	8002268 <HAL_RCC_OscConfig>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80015fc:	f000 f81e 	bl	800163c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001600:	230f      	movs	r3, #15
 8001602:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001604:	2300      	movs	r3, #0
 8001606:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800160c:	2300      	movs	r3, #0
 800160e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001610:	2300      	movs	r3, #0
 8001612:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001614:	f107 030c 	add.w	r3, r7, #12
 8001618:	2100      	movs	r1, #0
 800161a:	4618      	mov	r0, r3
 800161c:	f001 f89c 	bl	8002758 <HAL_RCC_ClockConfig>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001626:	f000 f809 	bl	800163c <Error_Handler>
  }
}
 800162a:	bf00      	nop
 800162c:	3750      	adds	r7, #80	; 0x50
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40023800 	.word	0x40023800
 8001638:	40007000 	.word	0x40007000

0800163c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001640:	b672      	cpsid	i
}
 8001642:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001644:	e7fe      	b.n	8001644 <Error_Handler+0x8>
	...

08001648 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800164c:	4b17      	ldr	r3, [pc, #92]	; (80016ac <MX_SPI1_Init+0x64>)
 800164e:	4a18      	ldr	r2, [pc, #96]	; (80016b0 <MX_SPI1_Init+0x68>)
 8001650:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001652:	4b16      	ldr	r3, [pc, #88]	; (80016ac <MX_SPI1_Init+0x64>)
 8001654:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001658:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800165a:	4b14      	ldr	r3, [pc, #80]	; (80016ac <MX_SPI1_Init+0x64>)
 800165c:	2200      	movs	r2, #0
 800165e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001660:	4b12      	ldr	r3, [pc, #72]	; (80016ac <MX_SPI1_Init+0x64>)
 8001662:	2200      	movs	r2, #0
 8001664:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001666:	4b11      	ldr	r3, [pc, #68]	; (80016ac <MX_SPI1_Init+0x64>)
 8001668:	2200      	movs	r2, #0
 800166a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800166c:	4b0f      	ldr	r3, [pc, #60]	; (80016ac <MX_SPI1_Init+0x64>)
 800166e:	2200      	movs	r2, #0
 8001670:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001672:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <MX_SPI1_Init+0x64>)
 8001674:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001678:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800167a:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <MX_SPI1_Init+0x64>)
 800167c:	2200      	movs	r2, #0
 800167e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001680:	4b0a      	ldr	r3, [pc, #40]	; (80016ac <MX_SPI1_Init+0x64>)
 8001682:	2200      	movs	r2, #0
 8001684:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001686:	4b09      	ldr	r3, [pc, #36]	; (80016ac <MX_SPI1_Init+0x64>)
 8001688:	2200      	movs	r2, #0
 800168a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800168c:	4b07      	ldr	r3, [pc, #28]	; (80016ac <MX_SPI1_Init+0x64>)
 800168e:	2200      	movs	r2, #0
 8001690:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001692:	4b06      	ldr	r3, [pc, #24]	; (80016ac <MX_SPI1_Init+0x64>)
 8001694:	220a      	movs	r2, #10
 8001696:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001698:	4804      	ldr	r0, [pc, #16]	; (80016ac <MX_SPI1_Init+0x64>)
 800169a:	f001 fa2d 	bl	8002af8 <HAL_SPI_Init>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80016a4:	f7ff ffca 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	200000ec 	.word	0x200000ec
 80016b0:	40013000 	.word	0x40013000

080016b4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08a      	sub	sp, #40	; 0x28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
 80016ca:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a1d      	ldr	r2, [pc, #116]	; (8001748 <HAL_SPI_MspInit+0x94>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d133      	bne.n	800173e <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	613b      	str	r3, [r7, #16]
 80016da:	4b1c      	ldr	r3, [pc, #112]	; (800174c <HAL_SPI_MspInit+0x98>)
 80016dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016de:	4a1b      	ldr	r2, [pc, #108]	; (800174c <HAL_SPI_MspInit+0x98>)
 80016e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016e4:	6453      	str	r3, [r2, #68]	; 0x44
 80016e6:	4b19      	ldr	r3, [pc, #100]	; (800174c <HAL_SPI_MspInit+0x98>)
 80016e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016ee:	613b      	str	r3, [r7, #16]
 80016f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	4b15      	ldr	r3, [pc, #84]	; (800174c <HAL_SPI_MspInit+0x98>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	4a14      	ldr	r2, [pc, #80]	; (800174c <HAL_SPI_MspInit+0x98>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6313      	str	r3, [r2, #48]	; 0x30
 8001702:	4b12      	ldr	r3, [pc, #72]	; (800174c <HAL_SPI_MspInit+0x98>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800170e:	23e0      	movs	r3, #224	; 0xe0
 8001710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001712:	2302      	movs	r3, #2
 8001714:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171a:	2303      	movs	r3, #3
 800171c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800171e:	2305      	movs	r3, #5
 8001720:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001722:	f107 0314 	add.w	r3, r7, #20
 8001726:	4619      	mov	r1, r3
 8001728:	4809      	ldr	r0, [pc, #36]	; (8001750 <HAL_SPI_MspInit+0x9c>)
 800172a:	f000 fbff 	bl	8001f2c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800172e:	2200      	movs	r2, #0
 8001730:	2100      	movs	r1, #0
 8001732:	2023      	movs	r0, #35	; 0x23
 8001734:	f000 fb93 	bl	8001e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001738:	2023      	movs	r0, #35	; 0x23
 800173a:	f000 fbac 	bl	8001e96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800173e:	bf00      	nop
 8001740:	3728      	adds	r7, #40	; 0x28
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40013000 	.word	0x40013000
 800174c:	40023800 	.word	0x40023800
 8001750:	40020000 	.word	0x40020000

08001754 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	607b      	str	r3, [r7, #4]
 800175e:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <HAL_MspInit+0x4c>)
 8001760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001762:	4a0f      	ldr	r2, [pc, #60]	; (80017a0 <HAL_MspInit+0x4c>)
 8001764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001768:	6453      	str	r3, [r2, #68]	; 0x44
 800176a:	4b0d      	ldr	r3, [pc, #52]	; (80017a0 <HAL_MspInit+0x4c>)
 800176c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001772:	607b      	str	r3, [r7, #4]
 8001774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	603b      	str	r3, [r7, #0]
 800177a:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <HAL_MspInit+0x4c>)
 800177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177e:	4a08      	ldr	r2, [pc, #32]	; (80017a0 <HAL_MspInit+0x4c>)
 8001780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001784:	6413      	str	r3, [r2, #64]	; 0x40
 8001786:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <HAL_MspInit+0x4c>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178e:	603b      	str	r3, [r7, #0]
 8001790:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	40023800 	.word	0x40023800

080017a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017a8:	e7fe      	b.n	80017a8 <NMI_Handler+0x4>

080017aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ae:	e7fe      	b.n	80017ae <HardFault_Handler+0x4>

080017b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017b4:	e7fe      	b.n	80017b4 <MemManage_Handler+0x4>

080017b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ba:	e7fe      	b.n	80017ba <BusFault_Handler+0x4>

080017bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017c0:	e7fe      	b.n	80017c0 <UsageFault_Handler+0x4>

080017c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017f0:	f000 f9f2 	bl	8001bd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017f4:	bf00      	nop
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80017fc:	4802      	ldr	r0, [pc, #8]	; (8001808 <SPI1_IRQHandler+0x10>)
 80017fe:	f001 fb41 	bl	8002e84 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	200000ec 	.word	0x200000ec

0800180c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001818:	2300      	movs	r3, #0
 800181a:	617b      	str	r3, [r7, #20]
 800181c:	e00a      	b.n	8001834 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800181e:	f3af 8000 	nop.w
 8001822:	4601      	mov	r1, r0
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	1c5a      	adds	r2, r3, #1
 8001828:	60ba      	str	r2, [r7, #8]
 800182a:	b2ca      	uxtb	r2, r1
 800182c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	3301      	adds	r3, #1
 8001832:	617b      	str	r3, [r7, #20]
 8001834:	697a      	ldr	r2, [r7, #20]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	429a      	cmp	r2, r3
 800183a:	dbf0      	blt.n	800181e <_read+0x12>
	}

return len;
 800183c:	687b      	ldr	r3, [r7, #4]
}
 800183e:	4618      	mov	r0, r3
 8001840:	3718      	adds	r7, #24
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b086      	sub	sp, #24
 800184a:	af00      	add	r7, sp, #0
 800184c:	60f8      	str	r0, [r7, #12]
 800184e:	60b9      	str	r1, [r7, #8]
 8001850:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001852:	2300      	movs	r3, #0
 8001854:	617b      	str	r3, [r7, #20]
 8001856:	e009      	b.n	800186c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	1c5a      	adds	r2, r3, #1
 800185c:	60ba      	str	r2, [r7, #8]
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	4618      	mov	r0, r3
 8001862:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	3301      	adds	r3, #1
 800186a:	617b      	str	r3, [r7, #20]
 800186c:	697a      	ldr	r2, [r7, #20]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	429a      	cmp	r2, r3
 8001872:	dbf1      	blt.n	8001858 <_write+0x12>
	}
	return len;
 8001874:	687b      	ldr	r3, [r7, #4]
}
 8001876:	4618      	mov	r0, r3
 8001878:	3718      	adds	r7, #24
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <_close>:

int _close(int file)
{
 800187e:	b480      	push	{r7}
 8001880:	b083      	sub	sp, #12
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
	return -1;
 8001886:	f04f 33ff 	mov.w	r3, #4294967295
}
 800188a:	4618      	mov	r0, r3
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001896:	b480      	push	{r7}
 8001898:	b083      	sub	sp, #12
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
 800189e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018a6:	605a      	str	r2, [r3, #4]
	return 0;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <_isatty>:

int _isatty(int file)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
	return 1;
 80018be:	2301      	movs	r3, #1
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
	return 0;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3714      	adds	r7, #20
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
	...

080018e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018f0:	4a14      	ldr	r2, [pc, #80]	; (8001944 <_sbrk+0x5c>)
 80018f2:	4b15      	ldr	r3, [pc, #84]	; (8001948 <_sbrk+0x60>)
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018fc:	4b13      	ldr	r3, [pc, #76]	; (800194c <_sbrk+0x64>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d102      	bne.n	800190a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001904:	4b11      	ldr	r3, [pc, #68]	; (800194c <_sbrk+0x64>)
 8001906:	4a12      	ldr	r2, [pc, #72]	; (8001950 <_sbrk+0x68>)
 8001908:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800190a:	4b10      	ldr	r3, [pc, #64]	; (800194c <_sbrk+0x64>)
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4413      	add	r3, r2
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	429a      	cmp	r2, r3
 8001916:	d207      	bcs.n	8001928 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001918:	f001 ffc0 	bl	800389c <__errno>
 800191c:	4603      	mov	r3, r0
 800191e:	220c      	movs	r2, #12
 8001920:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001922:	f04f 33ff 	mov.w	r3, #4294967295
 8001926:	e009      	b.n	800193c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001928:	4b08      	ldr	r3, [pc, #32]	; (800194c <_sbrk+0x64>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800192e:	4b07      	ldr	r3, [pc, #28]	; (800194c <_sbrk+0x64>)
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4413      	add	r3, r2
 8001936:	4a05      	ldr	r2, [pc, #20]	; (800194c <_sbrk+0x64>)
 8001938:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800193a:	68fb      	ldr	r3, [r7, #12]
}
 800193c:	4618      	mov	r0, r3
 800193e:	3718      	adds	r7, #24
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	20020000 	.word	0x20020000
 8001948:	00000400 	.word	0x00000400
 800194c:	200000e0 	.word	0x200000e0
 8001950:	200001a0 	.word	0x200001a0

08001954 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001958:	4b06      	ldr	r3, [pc, #24]	; (8001974 <SystemInit+0x20>)
 800195a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800195e:	4a05      	ldr	r2, [pc, #20]	; (8001974 <SystemInit+0x20>)
 8001960:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001964:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001968:	bf00      	nop
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	e000ed00 	.word	0xe000ed00

08001978 <dw_main>:

/**
 * Application entry point.
 */
int dw_main(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
//dwt

    /* Reset and initialise DW1000. See NOTE 2 below.
     * For initialisation, DW1000 clocks must be temporarily set to crystal speed. After initialisation SPI rate can be increased for optimum
     * performance. */
    reset_DW1000(); /* Target specific drive of RSTn line into DW1000 low for a period. */
 800197c:	f7ff fcf0 	bl	8001360 <reset_DW1000>
    port_set_dw1000_slowrate();
 8001980:	f7ff fd4a 	bl	8001418 <port_set_dw1000_slowrate>
    if (dwt_initialise(DWT_LOADNONE) == DWT_ERROR)
 8001984:	2000      	movs	r0, #0
 8001986:	f7fe fdf7 	bl	8000578 <dwt_initialise>
 800198a:	4603      	mov	r3, r0
 800198c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001990:	d103      	bne.n	800199a <dw_main+0x22>
    {
        printf("INIT FAILED");
 8001992:	4816      	ldr	r0, [pc, #88]	; (80019ec <dw_main+0x74>)
 8001994:	f001 ffb4 	bl	8003900 <iprintf>
        while (1)
 8001998:	e7fe      	b.n	8001998 <dw_main+0x20>
        { };
    }
    port_set_dw1000_fastrate();
 800199a:	f7ff fd49 	bl	8001430 <port_set_dw1000_fastrate>

    /* Configure DW1000. See NOTE 3 below. */
    dwt_configure(&config);
 800199e:	4814      	ldr	r0, [pc, #80]	; (80019f0 <dw_main+0x78>)
 80019a0:	f7fe ff40 	bl	8000824 <dwt_configure>

    /* Loop forever sending frames periodically. */
    while(1)
    {
        /* Write frame data to DW1000 and prepare transmission. See NOTE 4 below.*/
        dwt_writetxdata(sizeof(tx_msg), tx_msg, 0); /* Zero offset in TX buffer. */
 80019a4:	2200      	movs	r2, #0
 80019a6:	4913      	ldr	r1, [pc, #76]	; (80019f4 <dw_main+0x7c>)
 80019a8:	200c      	movs	r0, #12
 80019aa:	f7ff f8a5 	bl	8000af8 <dwt_writetxdata>
        dwt_writetxfctrl(sizeof(tx_msg), 0, 0); /* Zero offset in TX buffer, no ranging. */
 80019ae:	2200      	movs	r2, #0
 80019b0:	2100      	movs	r1, #0
 80019b2:	200c      	movs	r0, #12
 80019b4:	f7ff f8be 	bl	8000b34 <dwt_writetxfctrl>

        /* Start transmission. */
        dwt_starttx(DWT_START_TX_IMMEDIATE);
 80019b8:	2000      	movs	r0, #0
 80019ba:	f7ff fb31 	bl	8001020 <dwt_starttx>
         * function to access it.*/
//        while (!(dwt_read32bitreg(SYS_STATUS_ID) & SYS_STATUS_TXFRS))
//        { };

        /* Clear TX frame sent event. */
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_TXFRS);
 80019be:	2280      	movs	r2, #128	; 0x80
 80019c0:	2100      	movs	r1, #0
 80019c2:	200f      	movs	r0, #15
 80019c4:	f7ff f9fe 	bl	8000dc4 <dwt_write32bitoffsetreg>

        /* Execute a delay between transmissions. */
        Sleep(TX_DELAY_MS);
 80019c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019cc:	f7ff fc9e 	bl	800130c <Sleep>
        HAL_UART_Transmit(&huart2, tx_msg, sizeof(tx_msg), HAL_MAX_DELAY);
 80019d0:	f04f 33ff 	mov.w	r3, #4294967295
 80019d4:	220c      	movs	r2, #12
 80019d6:	4907      	ldr	r1, [pc, #28]	; (80019f4 <dw_main+0x7c>)
 80019d8:	4807      	ldr	r0, [pc, #28]	; (80019f8 <dw_main+0x80>)
 80019da:	f001 fc96 	bl	800330a <HAL_UART_Transmit>
        /* Increment the blink frame sequence number (modulo 256). */
        tx_msg[BLINK_FRAME_SN_IDX]++;
 80019de:	4b05      	ldr	r3, [pc, #20]	; (80019f4 <dw_main+0x7c>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	3301      	adds	r3, #1
 80019e4:	b2da      	uxtb	r2, r3
 80019e6:	4b03      	ldr	r3, [pc, #12]	; (80019f4 <dw_main+0x7c>)
 80019e8:	701a      	strb	r2, [r3, #0]
        dwt_writetxdata(sizeof(tx_msg), tx_msg, 0); /* Zero offset in TX buffer. */
 80019ea:	e7db      	b.n	80019a4 <dw_main+0x2c>
 80019ec:	080047c4 	.word	0x080047c4
 80019f0:	20000008 	.word	0x20000008
 80019f4:	20000014 	.word	0x20000014
 80019f8:	20000144 	.word	0x20000144

080019fc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a00:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <MX_USART2_UART_Init+0x4c>)
 8001a02:	4a12      	ldr	r2, [pc, #72]	; (8001a4c <MX_USART2_UART_Init+0x50>)
 8001a04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a06:	4b10      	ldr	r3, [pc, #64]	; (8001a48 <MX_USART2_UART_Init+0x4c>)
 8001a08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a0e:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <MX_USART2_UART_Init+0x4c>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a14:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <MX_USART2_UART_Init+0x4c>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a1a:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <MX_USART2_UART_Init+0x4c>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a20:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <MX_USART2_UART_Init+0x4c>)
 8001a22:	220c      	movs	r2, #12
 8001a24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a26:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <MX_USART2_UART_Init+0x4c>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a2c:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <MX_USART2_UART_Init+0x4c>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a32:	4805      	ldr	r0, [pc, #20]	; (8001a48 <MX_USART2_UART_Init+0x4c>)
 8001a34:	f001 fc1c 	bl	8003270 <HAL_UART_Init>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a3e:	f7ff fdfd 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20000144 	.word	0x20000144
 8001a4c:	40004400 	.word	0x40004400

08001a50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08a      	sub	sp, #40	; 0x28
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a19      	ldr	r2, [pc, #100]	; (8001ad4 <HAL_UART_MspInit+0x84>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d12b      	bne.n	8001aca <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	613b      	str	r3, [r7, #16]
 8001a76:	4b18      	ldr	r3, [pc, #96]	; (8001ad8 <HAL_UART_MspInit+0x88>)
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	4a17      	ldr	r2, [pc, #92]	; (8001ad8 <HAL_UART_MspInit+0x88>)
 8001a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a80:	6413      	str	r3, [r2, #64]	; 0x40
 8001a82:	4b15      	ldr	r3, [pc, #84]	; (8001ad8 <HAL_UART_MspInit+0x88>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8a:	613b      	str	r3, [r7, #16]
 8001a8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <HAL_UART_MspInit+0x88>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	4a10      	ldr	r2, [pc, #64]	; (8001ad8 <HAL_UART_MspInit+0x88>)
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9e:	4b0e      	ldr	r3, [pc, #56]	; (8001ad8 <HAL_UART_MspInit+0x88>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001aaa:	230c      	movs	r3, #12
 8001aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001aba:	2307      	movs	r3, #7
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001abe:	f107 0314 	add.w	r3, r7, #20
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4805      	ldr	r0, [pc, #20]	; (8001adc <HAL_UART_MspInit+0x8c>)
 8001ac6:	f000 fa31 	bl	8001f2c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001aca:	bf00      	nop
 8001acc:	3728      	adds	r7, #40	; 0x28
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40004400 	.word	0x40004400
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	40020000 	.word	0x40020000

08001ae0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ae0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ae4:	480d      	ldr	r0, [pc, #52]	; (8001b1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ae6:	490e      	ldr	r1, [pc, #56]	; (8001b20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ae8:	4a0e      	ldr	r2, [pc, #56]	; (8001b24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001aea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aec:	e002      	b.n	8001af4 <LoopCopyDataInit>

08001aee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001af0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001af2:	3304      	adds	r3, #4

08001af4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001af4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001af6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001af8:	d3f9      	bcc.n	8001aee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001afa:	4a0b      	ldr	r2, [pc, #44]	; (8001b28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001afc:	4c0b      	ldr	r4, [pc, #44]	; (8001b2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001afe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b00:	e001      	b.n	8001b06 <LoopFillZerobss>

08001b02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b04:	3204      	adds	r2, #4

08001b06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b08:	d3fb      	bcc.n	8001b02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b0a:	f7ff ff23 	bl	8001954 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b0e:	f001 fecb 	bl	80038a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b12:	f7ff fd23 	bl	800155c <main>
  bx  lr    
 8001b16:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b20:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001b24:	08004944 	.word	0x08004944
  ldr r2, =_sbss
 8001b28:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001b2c:	2000019c 	.word	0x2000019c

08001b30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b30:	e7fe      	b.n	8001b30 <ADC_IRQHandler>
	...

08001b34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b38:	4b0e      	ldr	r3, [pc, #56]	; (8001b74 <HAL_Init+0x40>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a0d      	ldr	r2, [pc, #52]	; (8001b74 <HAL_Init+0x40>)
 8001b3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b44:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <HAL_Init+0x40>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a0a      	ldr	r2, [pc, #40]	; (8001b74 <HAL_Init+0x40>)
 8001b4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b50:	4b08      	ldr	r3, [pc, #32]	; (8001b74 <HAL_Init+0x40>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a07      	ldr	r2, [pc, #28]	; (8001b74 <HAL_Init+0x40>)
 8001b56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b5c:	2003      	movs	r0, #3
 8001b5e:	f000 f973 	bl	8001e48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b62:	200f      	movs	r0, #15
 8001b64:	f000 f808 	bl	8001b78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b68:	f7ff fdf4 	bl	8001754 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40023c00 	.word	0x40023c00

08001b78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b80:	4b12      	ldr	r3, [pc, #72]	; (8001bcc <HAL_InitTick+0x54>)
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	4b12      	ldr	r3, [pc, #72]	; (8001bd0 <HAL_InitTick+0x58>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	4619      	mov	r1, r3
 8001b8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b96:	4618      	mov	r0, r3
 8001b98:	f000 f999 	bl	8001ece <HAL_SYSTICK_Config>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e00e      	b.n	8001bc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2b0f      	cmp	r3, #15
 8001baa:	d80a      	bhi.n	8001bc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bac:	2200      	movs	r2, #0
 8001bae:	6879      	ldr	r1, [r7, #4]
 8001bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb4:	f000 f953 	bl	8001e5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bb8:	4a06      	ldr	r2, [pc, #24]	; (8001bd4 <HAL_InitTick+0x5c>)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	e000      	b.n	8001bc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	20000004 	.word	0x20000004
 8001bd0:	20000024 	.word	0x20000024
 8001bd4:	20000020 	.word	0x20000020

08001bd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bdc:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <HAL_IncTick+0x20>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	461a      	mov	r2, r3
 8001be2:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <HAL_IncTick+0x24>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4413      	add	r3, r2
 8001be8:	4a04      	ldr	r2, [pc, #16]	; (8001bfc <HAL_IncTick+0x24>)
 8001bea:	6013      	str	r3, [r2, #0]
}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	20000024 	.word	0x20000024
 8001bfc:	20000188 	.word	0x20000188

08001c00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  return uwTick;
 8001c04:	4b03      	ldr	r3, [pc, #12]	; (8001c14 <HAL_GetTick+0x14>)
 8001c06:	681b      	ldr	r3, [r3, #0]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	20000188 	.word	0x20000188

08001c18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c20:	f7ff ffee 	bl	8001c00 <HAL_GetTick>
 8001c24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c30:	d005      	beq.n	8001c3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c32:	4b0a      	ldr	r3, [pc, #40]	; (8001c5c <HAL_Delay+0x44>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	461a      	mov	r2, r3
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c3e:	bf00      	nop
 8001c40:	f7ff ffde 	bl	8001c00 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	68fa      	ldr	r2, [r7, #12]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d8f7      	bhi.n	8001c40 <HAL_Delay+0x28>
  {
  }
}
 8001c50:	bf00      	nop
 8001c52:	bf00      	nop
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	20000024 	.word	0x20000024

08001c60 <__NVIC_SetPriorityGrouping>:
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c70:	4b0c      	ldr	r3, [pc, #48]	; (8001ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c76:	68ba      	ldr	r2, [r7, #8]
 8001c78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c92:	4a04      	ldr	r2, [pc, #16]	; (8001ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	60d3      	str	r3, [r2, #12]
}
 8001c98:	bf00      	nop
 8001c9a:	3714      	adds	r7, #20
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	e000ed00 	.word	0xe000ed00

08001ca8 <__NVIC_GetPriorityGrouping>:
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cac:	4b04      	ldr	r3, [pc, #16]	; (8001cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	0a1b      	lsrs	r3, r3, #8
 8001cb2:	f003 0307 	and.w	r3, r3, #7
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	e000ed00 	.word	0xe000ed00

08001cc4 <__NVIC_EnableIRQ>:
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	db0b      	blt.n	8001cee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
 8001cd8:	f003 021f 	and.w	r2, r3, #31
 8001cdc:	4907      	ldr	r1, [pc, #28]	; (8001cfc <__NVIC_EnableIRQ+0x38>)
 8001cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce2:	095b      	lsrs	r3, r3, #5
 8001ce4:	2001      	movs	r0, #1
 8001ce6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	e000e100 	.word	0xe000e100

08001d00 <__NVIC_DisableIRQ>:
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	db12      	blt.n	8001d38 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d12:	79fb      	ldrb	r3, [r7, #7]
 8001d14:	f003 021f 	and.w	r2, r3, #31
 8001d18:	490a      	ldr	r1, [pc, #40]	; (8001d44 <__NVIC_DisableIRQ+0x44>)
 8001d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1e:	095b      	lsrs	r3, r3, #5
 8001d20:	2001      	movs	r0, #1
 8001d22:	fa00 f202 	lsl.w	r2, r0, r2
 8001d26:	3320      	adds	r3, #32
 8001d28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d2c:	f3bf 8f4f 	dsb	sy
}
 8001d30:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d32:	f3bf 8f6f 	isb	sy
}
 8001d36:	bf00      	nop
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	e000e100 	.word	0xe000e100

08001d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	6039      	str	r1, [r7, #0]
 8001d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	db0a      	blt.n	8001d72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	490c      	ldr	r1, [pc, #48]	; (8001d94 <__NVIC_SetPriority+0x4c>)
 8001d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d66:	0112      	lsls	r2, r2, #4
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	440b      	add	r3, r1
 8001d6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d70:	e00a      	b.n	8001d88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	4908      	ldr	r1, [pc, #32]	; (8001d98 <__NVIC_SetPriority+0x50>)
 8001d78:	79fb      	ldrb	r3, [r7, #7]
 8001d7a:	f003 030f 	and.w	r3, r3, #15
 8001d7e:	3b04      	subs	r3, #4
 8001d80:	0112      	lsls	r2, r2, #4
 8001d82:	b2d2      	uxtb	r2, r2
 8001d84:	440b      	add	r3, r1
 8001d86:	761a      	strb	r2, [r3, #24]
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	e000e100 	.word	0xe000e100
 8001d98:	e000ed00 	.word	0xe000ed00

08001d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b089      	sub	sp, #36	; 0x24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	f1c3 0307 	rsb	r3, r3, #7
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	bf28      	it	cs
 8001dba:	2304      	movcs	r3, #4
 8001dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	2b06      	cmp	r3, #6
 8001dc4:	d902      	bls.n	8001dcc <NVIC_EncodePriority+0x30>
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	3b03      	subs	r3, #3
 8001dca:	e000      	b.n	8001dce <NVIC_EncodePriority+0x32>
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43da      	mvns	r2, r3
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	401a      	ands	r2, r3
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de4:	f04f 31ff 	mov.w	r1, #4294967295
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	fa01 f303 	lsl.w	r3, r1, r3
 8001dee:	43d9      	mvns	r1, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df4:	4313      	orrs	r3, r2
         );
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3724      	adds	r7, #36	; 0x24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
	...

08001e04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e14:	d301      	bcc.n	8001e1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e16:	2301      	movs	r3, #1
 8001e18:	e00f      	b.n	8001e3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e1a:	4a0a      	ldr	r2, [pc, #40]	; (8001e44 <SysTick_Config+0x40>)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e22:	210f      	movs	r1, #15
 8001e24:	f04f 30ff 	mov.w	r0, #4294967295
 8001e28:	f7ff ff8e 	bl	8001d48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e2c:	4b05      	ldr	r3, [pc, #20]	; (8001e44 <SysTick_Config+0x40>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e32:	4b04      	ldr	r3, [pc, #16]	; (8001e44 <SysTick_Config+0x40>)
 8001e34:	2207      	movs	r2, #7
 8001e36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	e000e010 	.word	0xe000e010

08001e48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f7ff ff05 	bl	8001c60 <__NVIC_SetPriorityGrouping>
}
 8001e56:	bf00      	nop
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b086      	sub	sp, #24
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	4603      	mov	r3, r0
 8001e66:	60b9      	str	r1, [r7, #8]
 8001e68:	607a      	str	r2, [r7, #4]
 8001e6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e70:	f7ff ff1a 	bl	8001ca8 <__NVIC_GetPriorityGrouping>
 8001e74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	68b9      	ldr	r1, [r7, #8]
 8001e7a:	6978      	ldr	r0, [r7, #20]
 8001e7c:	f7ff ff8e 	bl	8001d9c <NVIC_EncodePriority>
 8001e80:	4602      	mov	r2, r0
 8001e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e86:	4611      	mov	r1, r2
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff ff5d 	bl	8001d48 <__NVIC_SetPriority>
}
 8001e8e:	bf00      	nop
 8001e90:	3718      	adds	r7, #24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b082      	sub	sp, #8
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff ff0d 	bl	8001cc4 <__NVIC_EnableIRQ>
}
 8001eaa:	bf00      	nop
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b082      	sub	sp, #8
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	4603      	mov	r3, r0
 8001eba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff ff1d 	bl	8001d00 <__NVIC_DisableIRQ>
}
 8001ec6:	bf00      	nop
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b082      	sub	sp, #8
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7ff ff94 	bl	8001e04 <SysTick_Config>
 8001edc:	4603      	mov	r3, r0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b083      	sub	sp, #12
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d004      	beq.n	8001f04 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2280      	movs	r2, #128	; 0x80
 8001efe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e00c      	b.n	8001f1e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2205      	movs	r2, #5
 8001f08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f022 0201 	bic.w	r2, r2, #1
 8001f1a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
	...

08001f2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b089      	sub	sp, #36	; 0x24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f36:	2300      	movs	r3, #0
 8001f38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f42:	2300      	movs	r3, #0
 8001f44:	61fb      	str	r3, [r7, #28]
 8001f46:	e159      	b.n	80021fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f48:	2201      	movs	r2, #1
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	697a      	ldr	r2, [r7, #20]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	f040 8148 	bne.w	80021f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f003 0303 	and.w	r3, r3, #3
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d005      	beq.n	8001f7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d130      	bne.n	8001fe0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	2203      	movs	r2, #3
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	4013      	ands	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	68da      	ldr	r2, [r3, #12]
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	091b      	lsrs	r3, r3, #4
 8001fca:	f003 0201 	and.w	r2, r3, #1
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f003 0303 	and.w	r3, r3, #3
 8001fe8:	2b03      	cmp	r3, #3
 8001fea:	d017      	beq.n	800201c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	2203      	movs	r2, #3
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4013      	ands	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	689a      	ldr	r2, [r3, #8]
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4313      	orrs	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f003 0303 	and.w	r3, r3, #3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d123      	bne.n	8002070 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	08da      	lsrs	r2, r3, #3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	3208      	adds	r2, #8
 8002030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002034:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	f003 0307 	and.w	r3, r3, #7
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	220f      	movs	r2, #15
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	43db      	mvns	r3, r3
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	4013      	ands	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	691a      	ldr	r2, [r3, #16]
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	f003 0307 	and.w	r3, r3, #7
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	4313      	orrs	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	08da      	lsrs	r2, r3, #3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	3208      	adds	r2, #8
 800206a:	69b9      	ldr	r1, [r7, #24]
 800206c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	2203      	movs	r2, #3
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	43db      	mvns	r3, r3
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	4013      	ands	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f003 0203 	and.w	r2, r3, #3
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4313      	orrs	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f000 80a2 	beq.w	80021f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	4b57      	ldr	r3, [pc, #348]	; (8002214 <HAL_GPIO_Init+0x2e8>)
 80020b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ba:	4a56      	ldr	r2, [pc, #344]	; (8002214 <HAL_GPIO_Init+0x2e8>)
 80020bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020c0:	6453      	str	r3, [r2, #68]	; 0x44
 80020c2:	4b54      	ldr	r3, [pc, #336]	; (8002214 <HAL_GPIO_Init+0x2e8>)
 80020c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020ce:	4a52      	ldr	r2, [pc, #328]	; (8002218 <HAL_GPIO_Init+0x2ec>)
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	089b      	lsrs	r3, r3, #2
 80020d4:	3302      	adds	r3, #2
 80020d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	f003 0303 	and.w	r3, r3, #3
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	220f      	movs	r2, #15
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	43db      	mvns	r3, r3
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4013      	ands	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a49      	ldr	r2, [pc, #292]	; (800221c <HAL_GPIO_Init+0x2f0>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d019      	beq.n	800212e <HAL_GPIO_Init+0x202>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a48      	ldr	r2, [pc, #288]	; (8002220 <HAL_GPIO_Init+0x2f4>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d013      	beq.n	800212a <HAL_GPIO_Init+0x1fe>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a47      	ldr	r2, [pc, #284]	; (8002224 <HAL_GPIO_Init+0x2f8>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d00d      	beq.n	8002126 <HAL_GPIO_Init+0x1fa>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a46      	ldr	r2, [pc, #280]	; (8002228 <HAL_GPIO_Init+0x2fc>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d007      	beq.n	8002122 <HAL_GPIO_Init+0x1f6>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a45      	ldr	r2, [pc, #276]	; (800222c <HAL_GPIO_Init+0x300>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d101      	bne.n	800211e <HAL_GPIO_Init+0x1f2>
 800211a:	2304      	movs	r3, #4
 800211c:	e008      	b.n	8002130 <HAL_GPIO_Init+0x204>
 800211e:	2307      	movs	r3, #7
 8002120:	e006      	b.n	8002130 <HAL_GPIO_Init+0x204>
 8002122:	2303      	movs	r3, #3
 8002124:	e004      	b.n	8002130 <HAL_GPIO_Init+0x204>
 8002126:	2302      	movs	r3, #2
 8002128:	e002      	b.n	8002130 <HAL_GPIO_Init+0x204>
 800212a:	2301      	movs	r3, #1
 800212c:	e000      	b.n	8002130 <HAL_GPIO_Init+0x204>
 800212e:	2300      	movs	r3, #0
 8002130:	69fa      	ldr	r2, [r7, #28]
 8002132:	f002 0203 	and.w	r2, r2, #3
 8002136:	0092      	lsls	r2, r2, #2
 8002138:	4093      	lsls	r3, r2
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4313      	orrs	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002140:	4935      	ldr	r1, [pc, #212]	; (8002218 <HAL_GPIO_Init+0x2ec>)
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	089b      	lsrs	r3, r3, #2
 8002146:	3302      	adds	r3, #2
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800214e:	4b38      	ldr	r3, [pc, #224]	; (8002230 <HAL_GPIO_Init+0x304>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	43db      	mvns	r3, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4013      	ands	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	4313      	orrs	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002172:	4a2f      	ldr	r2, [pc, #188]	; (8002230 <HAL_GPIO_Init+0x304>)
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002178:	4b2d      	ldr	r3, [pc, #180]	; (8002230 <HAL_GPIO_Init+0x304>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	43db      	mvns	r3, r3
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4013      	ands	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d003      	beq.n	800219c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	4313      	orrs	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800219c:	4a24      	ldr	r2, [pc, #144]	; (8002230 <HAL_GPIO_Init+0x304>)
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021a2:	4b23      	ldr	r3, [pc, #140]	; (8002230 <HAL_GPIO_Init+0x304>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	43db      	mvns	r3, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4013      	ands	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021c6:	4a1a      	ldr	r2, [pc, #104]	; (8002230 <HAL_GPIO_Init+0x304>)
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021cc:	4b18      	ldr	r3, [pc, #96]	; (8002230 <HAL_GPIO_Init+0x304>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	43db      	mvns	r3, r3
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	4013      	ands	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d003      	beq.n	80021f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021f0:	4a0f      	ldr	r2, [pc, #60]	; (8002230 <HAL_GPIO_Init+0x304>)
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	3301      	adds	r3, #1
 80021fa:	61fb      	str	r3, [r7, #28]
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	2b0f      	cmp	r3, #15
 8002200:	f67f aea2 	bls.w	8001f48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002204:	bf00      	nop
 8002206:	bf00      	nop
 8002208:	3724      	adds	r7, #36	; 0x24
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	40023800 	.word	0x40023800
 8002218:	40013800 	.word	0x40013800
 800221c:	40020000 	.word	0x40020000
 8002220:	40020400 	.word	0x40020400
 8002224:	40020800 	.word	0x40020800
 8002228:	40020c00 	.word	0x40020c00
 800222c:	40021000 	.word	0x40021000
 8002230:	40013c00 	.word	0x40013c00

08002234 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	460b      	mov	r3, r1
 800223e:	807b      	strh	r3, [r7, #2]
 8002240:	4613      	mov	r3, r2
 8002242:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002244:	787b      	ldrb	r3, [r7, #1]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d003      	beq.n	8002252 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800224a:	887a      	ldrh	r2, [r7, #2]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002250:	e003      	b.n	800225a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002252:	887b      	ldrh	r3, [r7, #2]
 8002254:	041a      	lsls	r2, r3, #16
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	619a      	str	r2, [r3, #24]
}
 800225a:	bf00      	nop
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
	...

08002268 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e264      	b.n	8002744 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b00      	cmp	r3, #0
 8002284:	d075      	beq.n	8002372 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002286:	4ba3      	ldr	r3, [pc, #652]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f003 030c 	and.w	r3, r3, #12
 800228e:	2b04      	cmp	r3, #4
 8002290:	d00c      	beq.n	80022ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002292:	4ba0      	ldr	r3, [pc, #640]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800229a:	2b08      	cmp	r3, #8
 800229c:	d112      	bne.n	80022c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800229e:	4b9d      	ldr	r3, [pc, #628]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022aa:	d10b      	bne.n	80022c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ac:	4b99      	ldr	r3, [pc, #612]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d05b      	beq.n	8002370 <HAL_RCC_OscConfig+0x108>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d157      	bne.n	8002370 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e23f      	b.n	8002744 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022cc:	d106      	bne.n	80022dc <HAL_RCC_OscConfig+0x74>
 80022ce:	4b91      	ldr	r3, [pc, #580]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a90      	ldr	r2, [pc, #576]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 80022d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022d8:	6013      	str	r3, [r2, #0]
 80022da:	e01d      	b.n	8002318 <HAL_RCC_OscConfig+0xb0>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022e4:	d10c      	bne.n	8002300 <HAL_RCC_OscConfig+0x98>
 80022e6:	4b8b      	ldr	r3, [pc, #556]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a8a      	ldr	r2, [pc, #552]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 80022ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022f0:	6013      	str	r3, [r2, #0]
 80022f2:	4b88      	ldr	r3, [pc, #544]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a87      	ldr	r2, [pc, #540]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 80022f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022fc:	6013      	str	r3, [r2, #0]
 80022fe:	e00b      	b.n	8002318 <HAL_RCC_OscConfig+0xb0>
 8002300:	4b84      	ldr	r3, [pc, #528]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a83      	ldr	r2, [pc, #524]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 8002306:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800230a:	6013      	str	r3, [r2, #0]
 800230c:	4b81      	ldr	r3, [pc, #516]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a80      	ldr	r2, [pc, #512]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 8002312:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002316:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d013      	beq.n	8002348 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002320:	f7ff fc6e 	bl	8001c00 <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002328:	f7ff fc6a 	bl	8001c00 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b64      	cmp	r3, #100	; 0x64
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e204      	b.n	8002744 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800233a:	4b76      	ldr	r3, [pc, #472]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d0f0      	beq.n	8002328 <HAL_RCC_OscConfig+0xc0>
 8002346:	e014      	b.n	8002372 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002348:	f7ff fc5a 	bl	8001c00 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002350:	f7ff fc56 	bl	8001c00 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b64      	cmp	r3, #100	; 0x64
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e1f0      	b.n	8002744 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002362:	4b6c      	ldr	r3, [pc, #432]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f0      	bne.n	8002350 <HAL_RCC_OscConfig+0xe8>
 800236e:	e000      	b.n	8002372 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002370:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d063      	beq.n	8002446 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800237e:	4b65      	ldr	r3, [pc, #404]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f003 030c 	and.w	r3, r3, #12
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00b      	beq.n	80023a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800238a:	4b62      	ldr	r3, [pc, #392]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002392:	2b08      	cmp	r3, #8
 8002394:	d11c      	bne.n	80023d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002396:	4b5f      	ldr	r3, [pc, #380]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d116      	bne.n	80023d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023a2:	4b5c      	ldr	r3, [pc, #368]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d005      	beq.n	80023ba <HAL_RCC_OscConfig+0x152>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d001      	beq.n	80023ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e1c4      	b.n	8002744 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ba:	4b56      	ldr	r3, [pc, #344]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	4952      	ldr	r1, [pc, #328]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ce:	e03a      	b.n	8002446 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d020      	beq.n	800241a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023d8:	4b4f      	ldr	r3, [pc, #316]	; (8002518 <HAL_RCC_OscConfig+0x2b0>)
 80023da:	2201      	movs	r2, #1
 80023dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023de:	f7ff fc0f 	bl	8001c00 <HAL_GetTick>
 80023e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e4:	e008      	b.n	80023f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023e6:	f7ff fc0b 	bl	8001c00 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d901      	bls.n	80023f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e1a5      	b.n	8002744 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023f8:	4b46      	ldr	r3, [pc, #280]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d0f0      	beq.n	80023e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002404:	4b43      	ldr	r3, [pc, #268]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	4940      	ldr	r1, [pc, #256]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 8002414:	4313      	orrs	r3, r2
 8002416:	600b      	str	r3, [r1, #0]
 8002418:	e015      	b.n	8002446 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800241a:	4b3f      	ldr	r3, [pc, #252]	; (8002518 <HAL_RCC_OscConfig+0x2b0>)
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002420:	f7ff fbee 	bl	8001c00 <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002428:	f7ff fbea 	bl	8001c00 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e184      	b.n	8002744 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800243a:	4b36      	ldr	r3, [pc, #216]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1f0      	bne.n	8002428 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0308 	and.w	r3, r3, #8
 800244e:	2b00      	cmp	r3, #0
 8002450:	d030      	beq.n	80024b4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d016      	beq.n	8002488 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800245a:	4b30      	ldr	r3, [pc, #192]	; (800251c <HAL_RCC_OscConfig+0x2b4>)
 800245c:	2201      	movs	r2, #1
 800245e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002460:	f7ff fbce 	bl	8001c00 <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002468:	f7ff fbca 	bl	8001c00 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e164      	b.n	8002744 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800247a:	4b26      	ldr	r3, [pc, #152]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 800247c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d0f0      	beq.n	8002468 <HAL_RCC_OscConfig+0x200>
 8002486:	e015      	b.n	80024b4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002488:	4b24      	ldr	r3, [pc, #144]	; (800251c <HAL_RCC_OscConfig+0x2b4>)
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800248e:	f7ff fbb7 	bl	8001c00 <HAL_GetTick>
 8002492:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002494:	e008      	b.n	80024a8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002496:	f7ff fbb3 	bl	8001c00 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e14d      	b.n	8002744 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024a8:	4b1a      	ldr	r3, [pc, #104]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 80024aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1f0      	bne.n	8002496 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0304 	and.w	r3, r3, #4
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f000 80a0 	beq.w	8002602 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024c2:	2300      	movs	r3, #0
 80024c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024c6:	4b13      	ldr	r3, [pc, #76]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d10f      	bne.n	80024f2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024d2:	2300      	movs	r3, #0
 80024d4:	60bb      	str	r3, [r7, #8]
 80024d6:	4b0f      	ldr	r3, [pc, #60]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	4a0e      	ldr	r2, [pc, #56]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 80024dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024e0:	6413      	str	r3, [r2, #64]	; 0x40
 80024e2:	4b0c      	ldr	r3, [pc, #48]	; (8002514 <HAL_RCC_OscConfig+0x2ac>)
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ea:	60bb      	str	r3, [r7, #8]
 80024ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ee:	2301      	movs	r3, #1
 80024f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f2:	4b0b      	ldr	r3, [pc, #44]	; (8002520 <HAL_RCC_OscConfig+0x2b8>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d121      	bne.n	8002542 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024fe:	4b08      	ldr	r3, [pc, #32]	; (8002520 <HAL_RCC_OscConfig+0x2b8>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a07      	ldr	r2, [pc, #28]	; (8002520 <HAL_RCC_OscConfig+0x2b8>)
 8002504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002508:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800250a:	f7ff fb79 	bl	8001c00 <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002510:	e011      	b.n	8002536 <HAL_RCC_OscConfig+0x2ce>
 8002512:	bf00      	nop
 8002514:	40023800 	.word	0x40023800
 8002518:	42470000 	.word	0x42470000
 800251c:	42470e80 	.word	0x42470e80
 8002520:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002524:	f7ff fb6c 	bl	8001c00 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e106      	b.n	8002744 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002536:	4b85      	ldr	r3, [pc, #532]	; (800274c <HAL_RCC_OscConfig+0x4e4>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253e:	2b00      	cmp	r3, #0
 8002540:	d0f0      	beq.n	8002524 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d106      	bne.n	8002558 <HAL_RCC_OscConfig+0x2f0>
 800254a:	4b81      	ldr	r3, [pc, #516]	; (8002750 <HAL_RCC_OscConfig+0x4e8>)
 800254c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800254e:	4a80      	ldr	r2, [pc, #512]	; (8002750 <HAL_RCC_OscConfig+0x4e8>)
 8002550:	f043 0301 	orr.w	r3, r3, #1
 8002554:	6713      	str	r3, [r2, #112]	; 0x70
 8002556:	e01c      	b.n	8002592 <HAL_RCC_OscConfig+0x32a>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	2b05      	cmp	r3, #5
 800255e:	d10c      	bne.n	800257a <HAL_RCC_OscConfig+0x312>
 8002560:	4b7b      	ldr	r3, [pc, #492]	; (8002750 <HAL_RCC_OscConfig+0x4e8>)
 8002562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002564:	4a7a      	ldr	r2, [pc, #488]	; (8002750 <HAL_RCC_OscConfig+0x4e8>)
 8002566:	f043 0304 	orr.w	r3, r3, #4
 800256a:	6713      	str	r3, [r2, #112]	; 0x70
 800256c:	4b78      	ldr	r3, [pc, #480]	; (8002750 <HAL_RCC_OscConfig+0x4e8>)
 800256e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002570:	4a77      	ldr	r2, [pc, #476]	; (8002750 <HAL_RCC_OscConfig+0x4e8>)
 8002572:	f043 0301 	orr.w	r3, r3, #1
 8002576:	6713      	str	r3, [r2, #112]	; 0x70
 8002578:	e00b      	b.n	8002592 <HAL_RCC_OscConfig+0x32a>
 800257a:	4b75      	ldr	r3, [pc, #468]	; (8002750 <HAL_RCC_OscConfig+0x4e8>)
 800257c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800257e:	4a74      	ldr	r2, [pc, #464]	; (8002750 <HAL_RCC_OscConfig+0x4e8>)
 8002580:	f023 0301 	bic.w	r3, r3, #1
 8002584:	6713      	str	r3, [r2, #112]	; 0x70
 8002586:	4b72      	ldr	r3, [pc, #456]	; (8002750 <HAL_RCC_OscConfig+0x4e8>)
 8002588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800258a:	4a71      	ldr	r2, [pc, #452]	; (8002750 <HAL_RCC_OscConfig+0x4e8>)
 800258c:	f023 0304 	bic.w	r3, r3, #4
 8002590:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d015      	beq.n	80025c6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800259a:	f7ff fb31 	bl	8001c00 <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a0:	e00a      	b.n	80025b8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025a2:	f7ff fb2d 	bl	8001c00 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e0c5      	b.n	8002744 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025b8:	4b65      	ldr	r3, [pc, #404]	; (8002750 <HAL_RCC_OscConfig+0x4e8>)
 80025ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d0ee      	beq.n	80025a2 <HAL_RCC_OscConfig+0x33a>
 80025c4:	e014      	b.n	80025f0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025c6:	f7ff fb1b 	bl	8001c00 <HAL_GetTick>
 80025ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025cc:	e00a      	b.n	80025e4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025ce:	f7ff fb17 	bl	8001c00 <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025dc:	4293      	cmp	r3, r2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e0af      	b.n	8002744 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025e4:	4b5a      	ldr	r3, [pc, #360]	; (8002750 <HAL_RCC_OscConfig+0x4e8>)
 80025e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1ee      	bne.n	80025ce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025f0:	7dfb      	ldrb	r3, [r7, #23]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d105      	bne.n	8002602 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025f6:	4b56      	ldr	r3, [pc, #344]	; (8002750 <HAL_RCC_OscConfig+0x4e8>)
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	4a55      	ldr	r2, [pc, #340]	; (8002750 <HAL_RCC_OscConfig+0x4e8>)
 80025fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002600:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	2b00      	cmp	r3, #0
 8002608:	f000 809b 	beq.w	8002742 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800260c:	4b50      	ldr	r3, [pc, #320]	; (8002750 <HAL_RCC_OscConfig+0x4e8>)
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f003 030c 	and.w	r3, r3, #12
 8002614:	2b08      	cmp	r3, #8
 8002616:	d05c      	beq.n	80026d2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	2b02      	cmp	r3, #2
 800261e:	d141      	bne.n	80026a4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002620:	4b4c      	ldr	r3, [pc, #304]	; (8002754 <HAL_RCC_OscConfig+0x4ec>)
 8002622:	2200      	movs	r2, #0
 8002624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002626:	f7ff faeb 	bl	8001c00 <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800262c:	e008      	b.n	8002640 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800262e:	f7ff fae7 	bl	8001c00 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e081      	b.n	8002744 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002640:	4b43      	ldr	r3, [pc, #268]	; (8002750 <HAL_RCC_OscConfig+0x4e8>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1f0      	bne.n	800262e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	69da      	ldr	r2, [r3, #28]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a1b      	ldr	r3, [r3, #32]
 8002654:	431a      	orrs	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265a:	019b      	lsls	r3, r3, #6
 800265c:	431a      	orrs	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002662:	085b      	lsrs	r3, r3, #1
 8002664:	3b01      	subs	r3, #1
 8002666:	041b      	lsls	r3, r3, #16
 8002668:	431a      	orrs	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266e:	061b      	lsls	r3, r3, #24
 8002670:	4937      	ldr	r1, [pc, #220]	; (8002750 <HAL_RCC_OscConfig+0x4e8>)
 8002672:	4313      	orrs	r3, r2
 8002674:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002676:	4b37      	ldr	r3, [pc, #220]	; (8002754 <HAL_RCC_OscConfig+0x4ec>)
 8002678:	2201      	movs	r2, #1
 800267a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267c:	f7ff fac0 	bl	8001c00 <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002684:	f7ff fabc 	bl	8001c00 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e056      	b.n	8002744 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002696:	4b2e      	ldr	r3, [pc, #184]	; (8002750 <HAL_RCC_OscConfig+0x4e8>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d0f0      	beq.n	8002684 <HAL_RCC_OscConfig+0x41c>
 80026a2:	e04e      	b.n	8002742 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026a4:	4b2b      	ldr	r3, [pc, #172]	; (8002754 <HAL_RCC_OscConfig+0x4ec>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026aa:	f7ff faa9 	bl	8001c00 <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026b0:	e008      	b.n	80026c4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026b2:	f7ff faa5 	bl	8001c00 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e03f      	b.n	8002744 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026c4:	4b22      	ldr	r3, [pc, #136]	; (8002750 <HAL_RCC_OscConfig+0x4e8>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1f0      	bne.n	80026b2 <HAL_RCC_OscConfig+0x44a>
 80026d0:	e037      	b.n	8002742 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d101      	bne.n	80026de <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e032      	b.n	8002744 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026de:	4b1c      	ldr	r3, [pc, #112]	; (8002750 <HAL_RCC_OscConfig+0x4e8>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d028      	beq.n	800273e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d121      	bne.n	800273e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002704:	429a      	cmp	r2, r3
 8002706:	d11a      	bne.n	800273e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800270e:	4013      	ands	r3, r2
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002714:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002716:	4293      	cmp	r3, r2
 8002718:	d111      	bne.n	800273e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002724:	085b      	lsrs	r3, r3, #1
 8002726:	3b01      	subs	r3, #1
 8002728:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800272a:	429a      	cmp	r2, r3
 800272c:	d107      	bne.n	800273e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002738:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800273a:	429a      	cmp	r2, r3
 800273c:	d001      	beq.n	8002742 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e000      	b.n	8002744 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3718      	adds	r7, #24
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	40007000 	.word	0x40007000
 8002750:	40023800 	.word	0x40023800
 8002754:	42470060 	.word	0x42470060

08002758 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d101      	bne.n	800276c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e0cc      	b.n	8002906 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800276c:	4b68      	ldr	r3, [pc, #416]	; (8002910 <HAL_RCC_ClockConfig+0x1b8>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	429a      	cmp	r2, r3
 8002778:	d90c      	bls.n	8002794 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800277a:	4b65      	ldr	r3, [pc, #404]	; (8002910 <HAL_RCC_ClockConfig+0x1b8>)
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	b2d2      	uxtb	r2, r2
 8002780:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002782:	4b63      	ldr	r3, [pc, #396]	; (8002910 <HAL_RCC_ClockConfig+0x1b8>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0307 	and.w	r3, r3, #7
 800278a:	683a      	ldr	r2, [r7, #0]
 800278c:	429a      	cmp	r2, r3
 800278e:	d001      	beq.n	8002794 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e0b8      	b.n	8002906 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d020      	beq.n	80027e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0304 	and.w	r3, r3, #4
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d005      	beq.n	80027b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027ac:	4b59      	ldr	r3, [pc, #356]	; (8002914 <HAL_RCC_ClockConfig+0x1bc>)
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	4a58      	ldr	r2, [pc, #352]	; (8002914 <HAL_RCC_ClockConfig+0x1bc>)
 80027b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0308 	and.w	r3, r3, #8
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d005      	beq.n	80027d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027c4:	4b53      	ldr	r3, [pc, #332]	; (8002914 <HAL_RCC_ClockConfig+0x1bc>)
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	4a52      	ldr	r2, [pc, #328]	; (8002914 <HAL_RCC_ClockConfig+0x1bc>)
 80027ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027d0:	4b50      	ldr	r3, [pc, #320]	; (8002914 <HAL_RCC_ClockConfig+0x1bc>)
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	494d      	ldr	r1, [pc, #308]	; (8002914 <HAL_RCC_ClockConfig+0x1bc>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d044      	beq.n	8002878 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d107      	bne.n	8002806 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027f6:	4b47      	ldr	r3, [pc, #284]	; (8002914 <HAL_RCC_ClockConfig+0x1bc>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d119      	bne.n	8002836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e07f      	b.n	8002906 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	2b02      	cmp	r3, #2
 800280c:	d003      	beq.n	8002816 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002812:	2b03      	cmp	r3, #3
 8002814:	d107      	bne.n	8002826 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002816:	4b3f      	ldr	r3, [pc, #252]	; (8002914 <HAL_RCC_ClockConfig+0x1bc>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d109      	bne.n	8002836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e06f      	b.n	8002906 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002826:	4b3b      	ldr	r3, [pc, #236]	; (8002914 <HAL_RCC_ClockConfig+0x1bc>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e067      	b.n	8002906 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002836:	4b37      	ldr	r3, [pc, #220]	; (8002914 <HAL_RCC_ClockConfig+0x1bc>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f023 0203 	bic.w	r2, r3, #3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	4934      	ldr	r1, [pc, #208]	; (8002914 <HAL_RCC_ClockConfig+0x1bc>)
 8002844:	4313      	orrs	r3, r2
 8002846:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002848:	f7ff f9da 	bl	8001c00 <HAL_GetTick>
 800284c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800284e:	e00a      	b.n	8002866 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002850:	f7ff f9d6 	bl	8001c00 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	f241 3288 	movw	r2, #5000	; 0x1388
 800285e:	4293      	cmp	r3, r2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e04f      	b.n	8002906 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002866:	4b2b      	ldr	r3, [pc, #172]	; (8002914 <HAL_RCC_ClockConfig+0x1bc>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 020c 	and.w	r2, r3, #12
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	429a      	cmp	r2, r3
 8002876:	d1eb      	bne.n	8002850 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002878:	4b25      	ldr	r3, [pc, #148]	; (8002910 <HAL_RCC_ClockConfig+0x1b8>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0307 	and.w	r3, r3, #7
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	429a      	cmp	r2, r3
 8002884:	d20c      	bcs.n	80028a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002886:	4b22      	ldr	r3, [pc, #136]	; (8002910 <HAL_RCC_ClockConfig+0x1b8>)
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	b2d2      	uxtb	r2, r2
 800288c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800288e:	4b20      	ldr	r3, [pc, #128]	; (8002910 <HAL_RCC_ClockConfig+0x1b8>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0307 	and.w	r3, r3, #7
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	429a      	cmp	r2, r3
 800289a:	d001      	beq.n	80028a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e032      	b.n	8002906 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0304 	and.w	r3, r3, #4
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d008      	beq.n	80028be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028ac:	4b19      	ldr	r3, [pc, #100]	; (8002914 <HAL_RCC_ClockConfig+0x1bc>)
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	4916      	ldr	r1, [pc, #88]	; (8002914 <HAL_RCC_ClockConfig+0x1bc>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0308 	and.w	r3, r3, #8
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d009      	beq.n	80028de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028ca:	4b12      	ldr	r3, [pc, #72]	; (8002914 <HAL_RCC_ClockConfig+0x1bc>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	490e      	ldr	r1, [pc, #56]	; (8002914 <HAL_RCC_ClockConfig+0x1bc>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028de:	f000 f821 	bl	8002924 <HAL_RCC_GetSysClockFreq>
 80028e2:	4602      	mov	r2, r0
 80028e4:	4b0b      	ldr	r3, [pc, #44]	; (8002914 <HAL_RCC_ClockConfig+0x1bc>)
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	091b      	lsrs	r3, r3, #4
 80028ea:	f003 030f 	and.w	r3, r3, #15
 80028ee:	490a      	ldr	r1, [pc, #40]	; (8002918 <HAL_RCC_ClockConfig+0x1c0>)
 80028f0:	5ccb      	ldrb	r3, [r1, r3]
 80028f2:	fa22 f303 	lsr.w	r3, r2, r3
 80028f6:	4a09      	ldr	r2, [pc, #36]	; (800291c <HAL_RCC_ClockConfig+0x1c4>)
 80028f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028fa:	4b09      	ldr	r3, [pc, #36]	; (8002920 <HAL_RCC_ClockConfig+0x1c8>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff f93a 	bl	8001b78 <HAL_InitTick>

  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3710      	adds	r7, #16
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	40023c00 	.word	0x40023c00
 8002914:	40023800 	.word	0x40023800
 8002918:	08004884 	.word	0x08004884
 800291c:	20000004 	.word	0x20000004
 8002920:	20000020 	.word	0x20000020

08002924 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002924:	b5b0      	push	{r4, r5, r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800292a:	2100      	movs	r1, #0
 800292c:	6079      	str	r1, [r7, #4]
 800292e:	2100      	movs	r1, #0
 8002930:	60f9      	str	r1, [r7, #12]
 8002932:	2100      	movs	r1, #0
 8002934:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002936:	2100      	movs	r1, #0
 8002938:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800293a:	4952      	ldr	r1, [pc, #328]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x160>)
 800293c:	6889      	ldr	r1, [r1, #8]
 800293e:	f001 010c 	and.w	r1, r1, #12
 8002942:	2908      	cmp	r1, #8
 8002944:	d00d      	beq.n	8002962 <HAL_RCC_GetSysClockFreq+0x3e>
 8002946:	2908      	cmp	r1, #8
 8002948:	f200 8094 	bhi.w	8002a74 <HAL_RCC_GetSysClockFreq+0x150>
 800294c:	2900      	cmp	r1, #0
 800294e:	d002      	beq.n	8002956 <HAL_RCC_GetSysClockFreq+0x32>
 8002950:	2904      	cmp	r1, #4
 8002952:	d003      	beq.n	800295c <HAL_RCC_GetSysClockFreq+0x38>
 8002954:	e08e      	b.n	8002a74 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002956:	4b4c      	ldr	r3, [pc, #304]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x164>)
 8002958:	60bb      	str	r3, [r7, #8]
       break;
 800295a:	e08e      	b.n	8002a7a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800295c:	4b4b      	ldr	r3, [pc, #300]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x168>)
 800295e:	60bb      	str	r3, [r7, #8]
      break;
 8002960:	e08b      	b.n	8002a7a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002962:	4948      	ldr	r1, [pc, #288]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x160>)
 8002964:	6849      	ldr	r1, [r1, #4]
 8002966:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800296a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800296c:	4945      	ldr	r1, [pc, #276]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x160>)
 800296e:	6849      	ldr	r1, [r1, #4]
 8002970:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002974:	2900      	cmp	r1, #0
 8002976:	d024      	beq.n	80029c2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002978:	4942      	ldr	r1, [pc, #264]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x160>)
 800297a:	6849      	ldr	r1, [r1, #4]
 800297c:	0989      	lsrs	r1, r1, #6
 800297e:	4608      	mov	r0, r1
 8002980:	f04f 0100 	mov.w	r1, #0
 8002984:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002988:	f04f 0500 	mov.w	r5, #0
 800298c:	ea00 0204 	and.w	r2, r0, r4
 8002990:	ea01 0305 	and.w	r3, r1, r5
 8002994:	493d      	ldr	r1, [pc, #244]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x168>)
 8002996:	fb01 f003 	mul.w	r0, r1, r3
 800299a:	2100      	movs	r1, #0
 800299c:	fb01 f102 	mul.w	r1, r1, r2
 80029a0:	1844      	adds	r4, r0, r1
 80029a2:	493a      	ldr	r1, [pc, #232]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x168>)
 80029a4:	fba2 0101 	umull	r0, r1, r2, r1
 80029a8:	1863      	adds	r3, r4, r1
 80029aa:	4619      	mov	r1, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	461a      	mov	r2, r3
 80029b0:	f04f 0300 	mov.w	r3, #0
 80029b4:	f7fd fc64 	bl	8000280 <__aeabi_uldivmod>
 80029b8:	4602      	mov	r2, r0
 80029ba:	460b      	mov	r3, r1
 80029bc:	4613      	mov	r3, r2
 80029be:	60fb      	str	r3, [r7, #12]
 80029c0:	e04a      	b.n	8002a58 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029c2:	4b30      	ldr	r3, [pc, #192]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x160>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	099b      	lsrs	r3, r3, #6
 80029c8:	461a      	mov	r2, r3
 80029ca:	f04f 0300 	mov.w	r3, #0
 80029ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80029d2:	f04f 0100 	mov.w	r1, #0
 80029d6:	ea02 0400 	and.w	r4, r2, r0
 80029da:	ea03 0501 	and.w	r5, r3, r1
 80029de:	4620      	mov	r0, r4
 80029e0:	4629      	mov	r1, r5
 80029e2:	f04f 0200 	mov.w	r2, #0
 80029e6:	f04f 0300 	mov.w	r3, #0
 80029ea:	014b      	lsls	r3, r1, #5
 80029ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80029f0:	0142      	lsls	r2, r0, #5
 80029f2:	4610      	mov	r0, r2
 80029f4:	4619      	mov	r1, r3
 80029f6:	1b00      	subs	r0, r0, r4
 80029f8:	eb61 0105 	sbc.w	r1, r1, r5
 80029fc:	f04f 0200 	mov.w	r2, #0
 8002a00:	f04f 0300 	mov.w	r3, #0
 8002a04:	018b      	lsls	r3, r1, #6
 8002a06:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a0a:	0182      	lsls	r2, r0, #6
 8002a0c:	1a12      	subs	r2, r2, r0
 8002a0e:	eb63 0301 	sbc.w	r3, r3, r1
 8002a12:	f04f 0000 	mov.w	r0, #0
 8002a16:	f04f 0100 	mov.w	r1, #0
 8002a1a:	00d9      	lsls	r1, r3, #3
 8002a1c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a20:	00d0      	lsls	r0, r2, #3
 8002a22:	4602      	mov	r2, r0
 8002a24:	460b      	mov	r3, r1
 8002a26:	1912      	adds	r2, r2, r4
 8002a28:	eb45 0303 	adc.w	r3, r5, r3
 8002a2c:	f04f 0000 	mov.w	r0, #0
 8002a30:	f04f 0100 	mov.w	r1, #0
 8002a34:	0299      	lsls	r1, r3, #10
 8002a36:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002a3a:	0290      	lsls	r0, r2, #10
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	460b      	mov	r3, r1
 8002a40:	4610      	mov	r0, r2
 8002a42:	4619      	mov	r1, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	461a      	mov	r2, r3
 8002a48:	f04f 0300 	mov.w	r3, #0
 8002a4c:	f7fd fc18 	bl	8000280 <__aeabi_uldivmod>
 8002a50:	4602      	mov	r2, r0
 8002a52:	460b      	mov	r3, r1
 8002a54:	4613      	mov	r3, r2
 8002a56:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a58:	4b0a      	ldr	r3, [pc, #40]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	0c1b      	lsrs	r3, r3, #16
 8002a5e:	f003 0303 	and.w	r3, r3, #3
 8002a62:	3301      	adds	r3, #1
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a70:	60bb      	str	r3, [r7, #8]
      break;
 8002a72:	e002      	b.n	8002a7a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a74:	4b04      	ldr	r3, [pc, #16]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x164>)
 8002a76:	60bb      	str	r3, [r7, #8]
      break;
 8002a78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a7a:	68bb      	ldr	r3, [r7, #8]
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3710      	adds	r7, #16
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bdb0      	pop	{r4, r5, r7, pc}
 8002a84:	40023800 	.word	0x40023800
 8002a88:	00f42400 	.word	0x00f42400
 8002a8c:	017d7840 	.word	0x017d7840

08002a90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a94:	4b03      	ldr	r3, [pc, #12]	; (8002aa4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a96:	681b      	ldr	r3, [r3, #0]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	20000004 	.word	0x20000004

08002aa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002aac:	f7ff fff0 	bl	8002a90 <HAL_RCC_GetHCLKFreq>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	4b05      	ldr	r3, [pc, #20]	; (8002ac8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	0a9b      	lsrs	r3, r3, #10
 8002ab8:	f003 0307 	and.w	r3, r3, #7
 8002abc:	4903      	ldr	r1, [pc, #12]	; (8002acc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002abe:	5ccb      	ldrb	r3, [r1, r3]
 8002ac0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	08004894 	.word	0x08004894

08002ad0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ad4:	f7ff ffdc 	bl	8002a90 <HAL_RCC_GetHCLKFreq>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	4b05      	ldr	r3, [pc, #20]	; (8002af0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	0b5b      	lsrs	r3, r3, #13
 8002ae0:	f003 0307 	and.w	r3, r3, #7
 8002ae4:	4903      	ldr	r1, [pc, #12]	; (8002af4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ae6:	5ccb      	ldrb	r3, [r1, r3]
 8002ae8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	40023800 	.word	0x40023800
 8002af4:	08004894 	.word	0x08004894

08002af8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e07b      	b.n	8002c02 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d108      	bne.n	8002b24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b1a:	d009      	beq.n	8002b30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	61da      	str	r2, [r3, #28]
 8002b22:	e005      	b.n	8002b30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d106      	bne.n	8002b50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f7fe fdb2 	bl	80016b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2202      	movs	r2, #2
 8002b54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b66:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b82:	431a      	orrs	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	431a      	orrs	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	431a      	orrs	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	69db      	ldr	r3, [r3, #28]
 8002ba6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002baa:	431a      	orrs	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb4:	ea42 0103 	orr.w	r1, r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bbc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	0c1b      	lsrs	r3, r3, #16
 8002bce:	f003 0104 	and.w	r1, r3, #4
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd6:	f003 0210 	and.w	r2, r3, #16
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	430a      	orrs	r2, r1
 8002be0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	69da      	ldr	r2, [r3, #28]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bf0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b088      	sub	sp, #32
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	60f8      	str	r0, [r7, #12]
 8002c12:	60b9      	str	r1, [r7, #8]
 8002c14:	603b      	str	r3, [r7, #0]
 8002c16:	4613      	mov	r3, r2
 8002c18:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d101      	bne.n	8002c2c <HAL_SPI_Transmit+0x22>
 8002c28:	2302      	movs	r3, #2
 8002c2a:	e126      	b.n	8002e7a <HAL_SPI_Transmit+0x270>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c34:	f7fe ffe4 	bl	8001c00 <HAL_GetTick>
 8002c38:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002c3a:	88fb      	ldrh	r3, [r7, #6]
 8002c3c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d002      	beq.n	8002c50 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c4e:	e10b      	b.n	8002e68 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d002      	beq.n	8002c5c <HAL_SPI_Transmit+0x52>
 8002c56:	88fb      	ldrh	r3, [r7, #6]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d102      	bne.n	8002c62 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c60:	e102      	b.n	8002e68 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2203      	movs	r2, #3
 8002c66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	68ba      	ldr	r2, [r7, #8]
 8002c74:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	88fa      	ldrh	r2, [r7, #6]
 8002c7a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	88fa      	ldrh	r2, [r7, #6]
 8002c80:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ca8:	d10f      	bne.n	8002cca <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cb8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cc8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd4:	2b40      	cmp	r3, #64	; 0x40
 8002cd6:	d007      	beq.n	8002ce8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ce6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cf0:	d14b      	bne.n	8002d8a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d002      	beq.n	8002d00 <HAL_SPI_Transmit+0xf6>
 8002cfa:	8afb      	ldrh	r3, [r7, #22]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d13e      	bne.n	8002d7e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d04:	881a      	ldrh	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d10:	1c9a      	adds	r2, r3, #2
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002d24:	e02b      	b.n	8002d7e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d112      	bne.n	8002d5a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d38:	881a      	ldrh	r2, [r3, #0]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d44:	1c9a      	adds	r2, r3, #2
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	3b01      	subs	r3, #1
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d58:	e011      	b.n	8002d7e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d5a:	f7fe ff51 	bl	8001c00 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d803      	bhi.n	8002d72 <HAL_SPI_Transmit+0x168>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d70:	d102      	bne.n	8002d78 <HAL_SPI_Transmit+0x16e>
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d102      	bne.n	8002d7e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002d7c:	e074      	b.n	8002e68 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1ce      	bne.n	8002d26 <HAL_SPI_Transmit+0x11c>
 8002d88:	e04c      	b.n	8002e24 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d002      	beq.n	8002d98 <HAL_SPI_Transmit+0x18e>
 8002d92:	8afb      	ldrh	r3, [r7, #22]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d140      	bne.n	8002e1a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	330c      	adds	r3, #12
 8002da2:	7812      	ldrb	r2, [r2, #0]
 8002da4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002daa:	1c5a      	adds	r2, r3, #1
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	3b01      	subs	r3, #1
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002dbe:	e02c      	b.n	8002e1a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d113      	bne.n	8002df6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	330c      	adds	r3, #12
 8002dd8:	7812      	ldrb	r2, [r2, #0]
 8002dda:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de0:	1c5a      	adds	r2, r3, #1
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	3b01      	subs	r3, #1
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	86da      	strh	r2, [r3, #54]	; 0x36
 8002df4:	e011      	b.n	8002e1a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002df6:	f7fe ff03 	bl	8001c00 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d803      	bhi.n	8002e0e <HAL_SPI_Transmit+0x204>
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e0c:	d102      	bne.n	8002e14 <HAL_SPI_Transmit+0x20a>
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d102      	bne.n	8002e1a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e18:	e026      	b.n	8002e68 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d1cd      	bne.n	8002dc0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	6839      	ldr	r1, [r7, #0]
 8002e28:	68f8      	ldr	r0, [r7, #12]
 8002e2a:	f000 f9df 	bl	80031ec <SPI_EndRxTxTransaction>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d002      	beq.n	8002e3a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2220      	movs	r2, #32
 8002e38:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10a      	bne.n	8002e58 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e42:	2300      	movs	r3, #0
 8002e44:	613b      	str	r3, [r7, #16]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	613b      	str	r3, [r7, #16]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	613b      	str	r3, [r7, #16]
 8002e56:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d002      	beq.n	8002e66 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	77fb      	strb	r3, [r7, #31]
 8002e64:	e000      	b.n	8002e68 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002e66:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e78:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3720      	adds	r7, #32
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
	...

08002e84 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b088      	sub	sp, #32
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	099b      	lsrs	r3, r3, #6
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d10f      	bne.n	8002ec8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00a      	beq.n	8002ec8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	099b      	lsrs	r3, r3, #6
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d004      	beq.n	8002ec8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	4798      	blx	r3
    return;
 8002ec6:	e0d7      	b.n	8003078 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	085b      	lsrs	r3, r3, #1
 8002ecc:	f003 0301 	and.w	r3, r3, #1
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d00a      	beq.n	8002eea <HAL_SPI_IRQHandler+0x66>
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	09db      	lsrs	r3, r3, #7
 8002ed8:	f003 0301 	and.w	r3, r3, #1
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d004      	beq.n	8002eea <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	4798      	blx	r3
    return;
 8002ee8:	e0c6      	b.n	8003078 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	095b      	lsrs	r3, r3, #5
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10c      	bne.n	8002f10 <HAL_SPI_IRQHandler+0x8c>
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	099b      	lsrs	r3, r3, #6
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d106      	bne.n	8002f10 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	0a1b      	lsrs	r3, r3, #8
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	f000 80b4 	beq.w	8003078 <HAL_SPI_IRQHandler+0x1f4>
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	095b      	lsrs	r3, r3, #5
 8002f14:	f003 0301 	and.w	r3, r3, #1
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f000 80ad 	beq.w	8003078 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	099b      	lsrs	r3, r3, #6
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d023      	beq.n	8002f72 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b03      	cmp	r3, #3
 8002f34:	d011      	beq.n	8002f5a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f3a:	f043 0204 	orr.w	r2, r3, #4
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f42:	2300      	movs	r3, #0
 8002f44:	617b      	str	r3, [r7, #20]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	617b      	str	r3, [r7, #20]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	617b      	str	r3, [r7, #20]
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	e00b      	b.n	8002f72 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	613b      	str	r3, [r7, #16]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	613b      	str	r3, [r7, #16]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	613b      	str	r3, [r7, #16]
 8002f6e:	693b      	ldr	r3, [r7, #16]
        return;
 8002f70:	e082      	b.n	8003078 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	095b      	lsrs	r3, r3, #5
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d014      	beq.n	8002fa8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f82:	f043 0201 	orr.w	r2, r3, #1
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	60fb      	str	r3, [r7, #12]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	60fb      	str	r3, [r7, #12]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fa4:	601a      	str	r2, [r3, #0]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	0a1b      	lsrs	r3, r3, #8
 8002fac:	f003 0301 	and.w	r3, r3, #1
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d00c      	beq.n	8002fce <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb8:	f043 0208 	orr.w	r2, r3, #8
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	60bb      	str	r3, [r7, #8]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	60bb      	str	r3, [r7, #8]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d04f      	beq.n	8003076 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	685a      	ldr	r2, [r3, #4]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002fe4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	f003 0302 	and.w	r3, r3, #2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d104      	bne.n	8003002 <HAL_SPI_IRQHandler+0x17e>
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d034      	beq.n	800306c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 0203 	bic.w	r2, r2, #3
 8003010:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003016:	2b00      	cmp	r3, #0
 8003018:	d011      	beq.n	800303e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800301e:	4a18      	ldr	r2, [pc, #96]	; (8003080 <HAL_SPI_IRQHandler+0x1fc>)
 8003020:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003026:	4618      	mov	r0, r3
 8003028:	f7fe ff5d 	bl	8001ee6 <HAL_DMA_Abort_IT>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d005      	beq.n	800303e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003036:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003042:	2b00      	cmp	r3, #0
 8003044:	d016      	beq.n	8003074 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800304a:	4a0d      	ldr	r2, [pc, #52]	; (8003080 <HAL_SPI_IRQHandler+0x1fc>)
 800304c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003052:	4618      	mov	r0, r3
 8003054:	f7fe ff47 	bl	8001ee6 <HAL_DMA_Abort_IT>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00a      	beq.n	8003074 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003062:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800306a:	e003      	b.n	8003074 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 f809 	bl	8003084 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003072:	e000      	b.n	8003076 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003074:	bf00      	nop
    return;
 8003076:	bf00      	nop
  }
}
 8003078:	3720      	adds	r7, #32
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	080030b5 	.word	0x080030b5

08003084 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800308c:	bf00      	nop
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030a6:	b2db      	uxtb	r3, r3
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f7ff ffd8 	bl	8003084 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80030d4:	bf00      	nop
 80030d6:	3710      	adds	r7, #16
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b088      	sub	sp, #32
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	603b      	str	r3, [r7, #0]
 80030e8:	4613      	mov	r3, r2
 80030ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80030ec:	f7fe fd88 	bl	8001c00 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f4:	1a9b      	subs	r3, r3, r2
 80030f6:	683a      	ldr	r2, [r7, #0]
 80030f8:	4413      	add	r3, r2
 80030fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80030fc:	f7fe fd80 	bl	8001c00 <HAL_GetTick>
 8003100:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003102:	4b39      	ldr	r3, [pc, #228]	; (80031e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	015b      	lsls	r3, r3, #5
 8003108:	0d1b      	lsrs	r3, r3, #20
 800310a:	69fa      	ldr	r2, [r7, #28]
 800310c:	fb02 f303 	mul.w	r3, r2, r3
 8003110:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003112:	e054      	b.n	80031be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311a:	d050      	beq.n	80031be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800311c:	f7fe fd70 	bl	8001c00 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	69fa      	ldr	r2, [r7, #28]
 8003128:	429a      	cmp	r2, r3
 800312a:	d902      	bls.n	8003132 <SPI_WaitFlagStateUntilTimeout+0x56>
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d13d      	bne.n	80031ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	685a      	ldr	r2, [r3, #4]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003140:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800314a:	d111      	bne.n	8003170 <SPI_WaitFlagStateUntilTimeout+0x94>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003154:	d004      	beq.n	8003160 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800315e:	d107      	bne.n	8003170 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800316e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003174:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003178:	d10f      	bne.n	800319a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003198:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e017      	b.n	80031de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80031b4:	2300      	movs	r3, #0
 80031b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	3b01      	subs	r3, #1
 80031bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	4013      	ands	r3, r2
 80031c8:	68ba      	ldr	r2, [r7, #8]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	bf0c      	ite	eq
 80031ce:	2301      	moveq	r3, #1
 80031d0:	2300      	movne	r3, #0
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	461a      	mov	r2, r3
 80031d6:	79fb      	ldrb	r3, [r7, #7]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d19b      	bne.n	8003114 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3720      	adds	r7, #32
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	20000004 	.word	0x20000004

080031ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b088      	sub	sp, #32
 80031f0:	af02      	add	r7, sp, #8
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80031f8:	4b1b      	ldr	r3, [pc, #108]	; (8003268 <SPI_EndRxTxTransaction+0x7c>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a1b      	ldr	r2, [pc, #108]	; (800326c <SPI_EndRxTxTransaction+0x80>)
 80031fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003202:	0d5b      	lsrs	r3, r3, #21
 8003204:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003208:	fb02 f303 	mul.w	r3, r2, r3
 800320c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003216:	d112      	bne.n	800323e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	9300      	str	r3, [sp, #0]
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	2200      	movs	r2, #0
 8003220:	2180      	movs	r1, #128	; 0x80
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	f7ff ff5a 	bl	80030dc <SPI_WaitFlagStateUntilTimeout>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d016      	beq.n	800325c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003232:	f043 0220 	orr.w	r2, r3, #32
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e00f      	b.n	800325e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00a      	beq.n	800325a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	3b01      	subs	r3, #1
 8003248:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003254:	2b80      	cmp	r3, #128	; 0x80
 8003256:	d0f2      	beq.n	800323e <SPI_EndRxTxTransaction+0x52>
 8003258:	e000      	b.n	800325c <SPI_EndRxTxTransaction+0x70>
        break;
 800325a:	bf00      	nop
  }

  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3718      	adds	r7, #24
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	20000004 	.word	0x20000004
 800326c:	165e9f81 	.word	0x165e9f81

08003270 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e03f      	b.n	8003302 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b00      	cmp	r3, #0
 800328c:	d106      	bne.n	800329c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7fe fbda 	bl	8001a50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2224      	movs	r2, #36	; 0x24
 80032a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68da      	ldr	r2, [r3, #12]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 f929 	bl	800350c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	691a      	ldr	r2, [r3, #16]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	695a      	ldr	r2, [r3, #20]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68da      	ldr	r2, [r3, #12]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2220      	movs	r2, #32
 80032f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2220      	movs	r2, #32
 80032fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3708      	adds	r7, #8
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800330a:	b580      	push	{r7, lr}
 800330c:	b08a      	sub	sp, #40	; 0x28
 800330e:	af02      	add	r7, sp, #8
 8003310:	60f8      	str	r0, [r7, #12]
 8003312:	60b9      	str	r1, [r7, #8]
 8003314:	603b      	str	r3, [r7, #0]
 8003316:	4613      	mov	r3, r2
 8003318:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800331a:	2300      	movs	r3, #0
 800331c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b20      	cmp	r3, #32
 8003328:	d17c      	bne.n	8003424 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d002      	beq.n	8003336 <HAL_UART_Transmit+0x2c>
 8003330:	88fb      	ldrh	r3, [r7, #6]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e075      	b.n	8003426 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003340:	2b01      	cmp	r3, #1
 8003342:	d101      	bne.n	8003348 <HAL_UART_Transmit+0x3e>
 8003344:	2302      	movs	r3, #2
 8003346:	e06e      	b.n	8003426 <HAL_UART_Transmit+0x11c>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2221      	movs	r2, #33	; 0x21
 800335a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800335e:	f7fe fc4f 	bl	8001c00 <HAL_GetTick>
 8003362:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	88fa      	ldrh	r2, [r7, #6]
 8003368:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	88fa      	ldrh	r2, [r7, #6]
 800336e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003378:	d108      	bne.n	800338c <HAL_UART_Transmit+0x82>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d104      	bne.n	800338c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003382:	2300      	movs	r3, #0
 8003384:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	61bb      	str	r3, [r7, #24]
 800338a:	e003      	b.n	8003394 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003390:	2300      	movs	r3, #0
 8003392:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800339c:	e02a      	b.n	80033f4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	9300      	str	r3, [sp, #0]
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	2200      	movs	r2, #0
 80033a6:	2180      	movs	r1, #128	; 0x80
 80033a8:	68f8      	ldr	r0, [r7, #12]
 80033aa:	f000 f840 	bl	800342e <UART_WaitOnFlagUntilTimeout>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d001      	beq.n	80033b8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e036      	b.n	8003426 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10b      	bne.n	80033d6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	881b      	ldrh	r3, [r3, #0]
 80033c2:	461a      	mov	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	3302      	adds	r3, #2
 80033d2:	61bb      	str	r3, [r7, #24]
 80033d4:	e007      	b.n	80033e6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	781a      	ldrb	r2, [r3, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	3301      	adds	r3, #1
 80033e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	3b01      	subs	r3, #1
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1cf      	bne.n	800339e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	9300      	str	r3, [sp, #0]
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	2200      	movs	r2, #0
 8003406:	2140      	movs	r1, #64	; 0x40
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f000 f810 	bl	800342e <UART_WaitOnFlagUntilTimeout>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d001      	beq.n	8003418 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e006      	b.n	8003426 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2220      	movs	r2, #32
 800341c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003420:	2300      	movs	r3, #0
 8003422:	e000      	b.n	8003426 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003424:	2302      	movs	r3, #2
  }
}
 8003426:	4618      	mov	r0, r3
 8003428:	3720      	adds	r7, #32
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	b090      	sub	sp, #64	; 0x40
 8003432:	af00      	add	r7, sp, #0
 8003434:	60f8      	str	r0, [r7, #12]
 8003436:	60b9      	str	r1, [r7, #8]
 8003438:	603b      	str	r3, [r7, #0]
 800343a:	4613      	mov	r3, r2
 800343c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800343e:	e050      	b.n	80034e2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003440:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003446:	d04c      	beq.n	80034e2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003448:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800344a:	2b00      	cmp	r3, #0
 800344c:	d007      	beq.n	800345e <UART_WaitOnFlagUntilTimeout+0x30>
 800344e:	f7fe fbd7 	bl	8001c00 <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800345a:	429a      	cmp	r2, r3
 800345c:	d241      	bcs.n	80034e2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	330c      	adds	r3, #12
 8003464:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003468:	e853 3f00 	ldrex	r3, [r3]
 800346c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800346e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003470:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003474:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	330c      	adds	r3, #12
 800347c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800347e:	637a      	str	r2, [r7, #52]	; 0x34
 8003480:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003482:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003484:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003486:	e841 2300 	strex	r3, r2, [r1]
 800348a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800348c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1e5      	bne.n	800345e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	3314      	adds	r3, #20
 8003498:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	e853 3f00 	ldrex	r3, [r3]
 80034a0:	613b      	str	r3, [r7, #16]
   return(result);
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	f023 0301 	bic.w	r3, r3, #1
 80034a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	3314      	adds	r3, #20
 80034b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034b2:	623a      	str	r2, [r7, #32]
 80034b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034b6:	69f9      	ldr	r1, [r7, #28]
 80034b8:	6a3a      	ldr	r2, [r7, #32]
 80034ba:	e841 2300 	strex	r3, r2, [r1]
 80034be:	61bb      	str	r3, [r7, #24]
   return(result);
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1e5      	bne.n	8003492 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2220      	movs	r2, #32
 80034ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2220      	movs	r2, #32
 80034d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e00f      	b.n	8003502 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	4013      	ands	r3, r2
 80034ec:	68ba      	ldr	r2, [r7, #8]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	bf0c      	ite	eq
 80034f2:	2301      	moveq	r3, #1
 80034f4:	2300      	movne	r3, #0
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	461a      	mov	r2, r3
 80034fa:	79fb      	ldrb	r3, [r7, #7]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d09f      	beq.n	8003440 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3740      	adds	r7, #64	; 0x40
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
	...

0800350c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800350c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003510:	b09f      	sub	sp, #124	; 0x7c
 8003512:	af00      	add	r7, sp, #0
 8003514:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003516:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003520:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003522:	68d9      	ldr	r1, [r3, #12]
 8003524:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	ea40 0301 	orr.w	r3, r0, r1
 800352c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800352e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003530:	689a      	ldr	r2, [r3, #8]
 8003532:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	431a      	orrs	r2, r3
 8003538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	431a      	orrs	r2, r3
 800353e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003540:	69db      	ldr	r3, [r3, #28]
 8003542:	4313      	orrs	r3, r2
 8003544:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003546:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003550:	f021 010c 	bic.w	r1, r1, #12
 8003554:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800355a:	430b      	orrs	r3, r1
 800355c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800355e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800356a:	6999      	ldr	r1, [r3, #24]
 800356c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	ea40 0301 	orr.w	r3, r0, r1
 8003574:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003576:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	4bc5      	ldr	r3, [pc, #788]	; (8003890 <UART_SetConfig+0x384>)
 800357c:	429a      	cmp	r2, r3
 800357e:	d004      	beq.n	800358a <UART_SetConfig+0x7e>
 8003580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	4bc3      	ldr	r3, [pc, #780]	; (8003894 <UART_SetConfig+0x388>)
 8003586:	429a      	cmp	r2, r3
 8003588:	d103      	bne.n	8003592 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800358a:	f7ff faa1 	bl	8002ad0 <HAL_RCC_GetPCLK2Freq>
 800358e:	6778      	str	r0, [r7, #116]	; 0x74
 8003590:	e002      	b.n	8003598 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003592:	f7ff fa89 	bl	8002aa8 <HAL_RCC_GetPCLK1Freq>
 8003596:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003598:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800359a:	69db      	ldr	r3, [r3, #28]
 800359c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035a0:	f040 80b6 	bne.w	8003710 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80035a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035a6:	461c      	mov	r4, r3
 80035a8:	f04f 0500 	mov.w	r5, #0
 80035ac:	4622      	mov	r2, r4
 80035ae:	462b      	mov	r3, r5
 80035b0:	1891      	adds	r1, r2, r2
 80035b2:	6439      	str	r1, [r7, #64]	; 0x40
 80035b4:	415b      	adcs	r3, r3
 80035b6:	647b      	str	r3, [r7, #68]	; 0x44
 80035b8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80035bc:	1912      	adds	r2, r2, r4
 80035be:	eb45 0303 	adc.w	r3, r5, r3
 80035c2:	f04f 0000 	mov.w	r0, #0
 80035c6:	f04f 0100 	mov.w	r1, #0
 80035ca:	00d9      	lsls	r1, r3, #3
 80035cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035d0:	00d0      	lsls	r0, r2, #3
 80035d2:	4602      	mov	r2, r0
 80035d4:	460b      	mov	r3, r1
 80035d6:	1911      	adds	r1, r2, r4
 80035d8:	6639      	str	r1, [r7, #96]	; 0x60
 80035da:	416b      	adcs	r3, r5
 80035dc:	667b      	str	r3, [r7, #100]	; 0x64
 80035de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	461a      	mov	r2, r3
 80035e4:	f04f 0300 	mov.w	r3, #0
 80035e8:	1891      	adds	r1, r2, r2
 80035ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80035ec:	415b      	adcs	r3, r3
 80035ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80035f4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80035f8:	f7fc fe42 	bl	8000280 <__aeabi_uldivmod>
 80035fc:	4602      	mov	r2, r0
 80035fe:	460b      	mov	r3, r1
 8003600:	4ba5      	ldr	r3, [pc, #660]	; (8003898 <UART_SetConfig+0x38c>)
 8003602:	fba3 2302 	umull	r2, r3, r3, r2
 8003606:	095b      	lsrs	r3, r3, #5
 8003608:	011e      	lsls	r6, r3, #4
 800360a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800360c:	461c      	mov	r4, r3
 800360e:	f04f 0500 	mov.w	r5, #0
 8003612:	4622      	mov	r2, r4
 8003614:	462b      	mov	r3, r5
 8003616:	1891      	adds	r1, r2, r2
 8003618:	6339      	str	r1, [r7, #48]	; 0x30
 800361a:	415b      	adcs	r3, r3
 800361c:	637b      	str	r3, [r7, #52]	; 0x34
 800361e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003622:	1912      	adds	r2, r2, r4
 8003624:	eb45 0303 	adc.w	r3, r5, r3
 8003628:	f04f 0000 	mov.w	r0, #0
 800362c:	f04f 0100 	mov.w	r1, #0
 8003630:	00d9      	lsls	r1, r3, #3
 8003632:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003636:	00d0      	lsls	r0, r2, #3
 8003638:	4602      	mov	r2, r0
 800363a:	460b      	mov	r3, r1
 800363c:	1911      	adds	r1, r2, r4
 800363e:	65b9      	str	r1, [r7, #88]	; 0x58
 8003640:	416b      	adcs	r3, r5
 8003642:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003644:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	461a      	mov	r2, r3
 800364a:	f04f 0300 	mov.w	r3, #0
 800364e:	1891      	adds	r1, r2, r2
 8003650:	62b9      	str	r1, [r7, #40]	; 0x28
 8003652:	415b      	adcs	r3, r3
 8003654:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003656:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800365a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800365e:	f7fc fe0f 	bl	8000280 <__aeabi_uldivmod>
 8003662:	4602      	mov	r2, r0
 8003664:	460b      	mov	r3, r1
 8003666:	4b8c      	ldr	r3, [pc, #560]	; (8003898 <UART_SetConfig+0x38c>)
 8003668:	fba3 1302 	umull	r1, r3, r3, r2
 800366c:	095b      	lsrs	r3, r3, #5
 800366e:	2164      	movs	r1, #100	; 0x64
 8003670:	fb01 f303 	mul.w	r3, r1, r3
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	3332      	adds	r3, #50	; 0x32
 800367a:	4a87      	ldr	r2, [pc, #540]	; (8003898 <UART_SetConfig+0x38c>)
 800367c:	fba2 2303 	umull	r2, r3, r2, r3
 8003680:	095b      	lsrs	r3, r3, #5
 8003682:	005b      	lsls	r3, r3, #1
 8003684:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003688:	441e      	add	r6, r3
 800368a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800368c:	4618      	mov	r0, r3
 800368e:	f04f 0100 	mov.w	r1, #0
 8003692:	4602      	mov	r2, r0
 8003694:	460b      	mov	r3, r1
 8003696:	1894      	adds	r4, r2, r2
 8003698:	623c      	str	r4, [r7, #32]
 800369a:	415b      	adcs	r3, r3
 800369c:	627b      	str	r3, [r7, #36]	; 0x24
 800369e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80036a2:	1812      	adds	r2, r2, r0
 80036a4:	eb41 0303 	adc.w	r3, r1, r3
 80036a8:	f04f 0400 	mov.w	r4, #0
 80036ac:	f04f 0500 	mov.w	r5, #0
 80036b0:	00dd      	lsls	r5, r3, #3
 80036b2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80036b6:	00d4      	lsls	r4, r2, #3
 80036b8:	4622      	mov	r2, r4
 80036ba:	462b      	mov	r3, r5
 80036bc:	1814      	adds	r4, r2, r0
 80036be:	653c      	str	r4, [r7, #80]	; 0x50
 80036c0:	414b      	adcs	r3, r1
 80036c2:	657b      	str	r3, [r7, #84]	; 0x54
 80036c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	461a      	mov	r2, r3
 80036ca:	f04f 0300 	mov.w	r3, #0
 80036ce:	1891      	adds	r1, r2, r2
 80036d0:	61b9      	str	r1, [r7, #24]
 80036d2:	415b      	adcs	r3, r3
 80036d4:	61fb      	str	r3, [r7, #28]
 80036d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036da:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80036de:	f7fc fdcf 	bl	8000280 <__aeabi_uldivmod>
 80036e2:	4602      	mov	r2, r0
 80036e4:	460b      	mov	r3, r1
 80036e6:	4b6c      	ldr	r3, [pc, #432]	; (8003898 <UART_SetConfig+0x38c>)
 80036e8:	fba3 1302 	umull	r1, r3, r3, r2
 80036ec:	095b      	lsrs	r3, r3, #5
 80036ee:	2164      	movs	r1, #100	; 0x64
 80036f0:	fb01 f303 	mul.w	r3, r1, r3
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	3332      	adds	r3, #50	; 0x32
 80036fa:	4a67      	ldr	r2, [pc, #412]	; (8003898 <UART_SetConfig+0x38c>)
 80036fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003700:	095b      	lsrs	r3, r3, #5
 8003702:	f003 0207 	and.w	r2, r3, #7
 8003706:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4432      	add	r2, r6
 800370c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800370e:	e0b9      	b.n	8003884 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003710:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003712:	461c      	mov	r4, r3
 8003714:	f04f 0500 	mov.w	r5, #0
 8003718:	4622      	mov	r2, r4
 800371a:	462b      	mov	r3, r5
 800371c:	1891      	adds	r1, r2, r2
 800371e:	6139      	str	r1, [r7, #16]
 8003720:	415b      	adcs	r3, r3
 8003722:	617b      	str	r3, [r7, #20]
 8003724:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003728:	1912      	adds	r2, r2, r4
 800372a:	eb45 0303 	adc.w	r3, r5, r3
 800372e:	f04f 0000 	mov.w	r0, #0
 8003732:	f04f 0100 	mov.w	r1, #0
 8003736:	00d9      	lsls	r1, r3, #3
 8003738:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800373c:	00d0      	lsls	r0, r2, #3
 800373e:	4602      	mov	r2, r0
 8003740:	460b      	mov	r3, r1
 8003742:	eb12 0804 	adds.w	r8, r2, r4
 8003746:	eb43 0905 	adc.w	r9, r3, r5
 800374a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	4618      	mov	r0, r3
 8003750:	f04f 0100 	mov.w	r1, #0
 8003754:	f04f 0200 	mov.w	r2, #0
 8003758:	f04f 0300 	mov.w	r3, #0
 800375c:	008b      	lsls	r3, r1, #2
 800375e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003762:	0082      	lsls	r2, r0, #2
 8003764:	4640      	mov	r0, r8
 8003766:	4649      	mov	r1, r9
 8003768:	f7fc fd8a 	bl	8000280 <__aeabi_uldivmod>
 800376c:	4602      	mov	r2, r0
 800376e:	460b      	mov	r3, r1
 8003770:	4b49      	ldr	r3, [pc, #292]	; (8003898 <UART_SetConfig+0x38c>)
 8003772:	fba3 2302 	umull	r2, r3, r3, r2
 8003776:	095b      	lsrs	r3, r3, #5
 8003778:	011e      	lsls	r6, r3, #4
 800377a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800377c:	4618      	mov	r0, r3
 800377e:	f04f 0100 	mov.w	r1, #0
 8003782:	4602      	mov	r2, r0
 8003784:	460b      	mov	r3, r1
 8003786:	1894      	adds	r4, r2, r2
 8003788:	60bc      	str	r4, [r7, #8]
 800378a:	415b      	adcs	r3, r3
 800378c:	60fb      	str	r3, [r7, #12]
 800378e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003792:	1812      	adds	r2, r2, r0
 8003794:	eb41 0303 	adc.w	r3, r1, r3
 8003798:	f04f 0400 	mov.w	r4, #0
 800379c:	f04f 0500 	mov.w	r5, #0
 80037a0:	00dd      	lsls	r5, r3, #3
 80037a2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80037a6:	00d4      	lsls	r4, r2, #3
 80037a8:	4622      	mov	r2, r4
 80037aa:	462b      	mov	r3, r5
 80037ac:	1814      	adds	r4, r2, r0
 80037ae:	64bc      	str	r4, [r7, #72]	; 0x48
 80037b0:	414b      	adcs	r3, r1
 80037b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f04f 0100 	mov.w	r1, #0
 80037be:	f04f 0200 	mov.w	r2, #0
 80037c2:	f04f 0300 	mov.w	r3, #0
 80037c6:	008b      	lsls	r3, r1, #2
 80037c8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80037cc:	0082      	lsls	r2, r0, #2
 80037ce:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80037d2:	f7fc fd55 	bl	8000280 <__aeabi_uldivmod>
 80037d6:	4602      	mov	r2, r0
 80037d8:	460b      	mov	r3, r1
 80037da:	4b2f      	ldr	r3, [pc, #188]	; (8003898 <UART_SetConfig+0x38c>)
 80037dc:	fba3 1302 	umull	r1, r3, r3, r2
 80037e0:	095b      	lsrs	r3, r3, #5
 80037e2:	2164      	movs	r1, #100	; 0x64
 80037e4:	fb01 f303 	mul.w	r3, r1, r3
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	011b      	lsls	r3, r3, #4
 80037ec:	3332      	adds	r3, #50	; 0x32
 80037ee:	4a2a      	ldr	r2, [pc, #168]	; (8003898 <UART_SetConfig+0x38c>)
 80037f0:	fba2 2303 	umull	r2, r3, r2, r3
 80037f4:	095b      	lsrs	r3, r3, #5
 80037f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037fa:	441e      	add	r6, r3
 80037fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037fe:	4618      	mov	r0, r3
 8003800:	f04f 0100 	mov.w	r1, #0
 8003804:	4602      	mov	r2, r0
 8003806:	460b      	mov	r3, r1
 8003808:	1894      	adds	r4, r2, r2
 800380a:	603c      	str	r4, [r7, #0]
 800380c:	415b      	adcs	r3, r3
 800380e:	607b      	str	r3, [r7, #4]
 8003810:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003814:	1812      	adds	r2, r2, r0
 8003816:	eb41 0303 	adc.w	r3, r1, r3
 800381a:	f04f 0400 	mov.w	r4, #0
 800381e:	f04f 0500 	mov.w	r5, #0
 8003822:	00dd      	lsls	r5, r3, #3
 8003824:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003828:	00d4      	lsls	r4, r2, #3
 800382a:	4622      	mov	r2, r4
 800382c:	462b      	mov	r3, r5
 800382e:	eb12 0a00 	adds.w	sl, r2, r0
 8003832:	eb43 0b01 	adc.w	fp, r3, r1
 8003836:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	4618      	mov	r0, r3
 800383c:	f04f 0100 	mov.w	r1, #0
 8003840:	f04f 0200 	mov.w	r2, #0
 8003844:	f04f 0300 	mov.w	r3, #0
 8003848:	008b      	lsls	r3, r1, #2
 800384a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800384e:	0082      	lsls	r2, r0, #2
 8003850:	4650      	mov	r0, sl
 8003852:	4659      	mov	r1, fp
 8003854:	f7fc fd14 	bl	8000280 <__aeabi_uldivmod>
 8003858:	4602      	mov	r2, r0
 800385a:	460b      	mov	r3, r1
 800385c:	4b0e      	ldr	r3, [pc, #56]	; (8003898 <UART_SetConfig+0x38c>)
 800385e:	fba3 1302 	umull	r1, r3, r3, r2
 8003862:	095b      	lsrs	r3, r3, #5
 8003864:	2164      	movs	r1, #100	; 0x64
 8003866:	fb01 f303 	mul.w	r3, r1, r3
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	011b      	lsls	r3, r3, #4
 800386e:	3332      	adds	r3, #50	; 0x32
 8003870:	4a09      	ldr	r2, [pc, #36]	; (8003898 <UART_SetConfig+0x38c>)
 8003872:	fba2 2303 	umull	r2, r3, r2, r3
 8003876:	095b      	lsrs	r3, r3, #5
 8003878:	f003 020f 	and.w	r2, r3, #15
 800387c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4432      	add	r2, r6
 8003882:	609a      	str	r2, [r3, #8]
}
 8003884:	bf00      	nop
 8003886:	377c      	adds	r7, #124	; 0x7c
 8003888:	46bd      	mov	sp, r7
 800388a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800388e:	bf00      	nop
 8003890:	40011000 	.word	0x40011000
 8003894:	40011400 	.word	0x40011400
 8003898:	51eb851f 	.word	0x51eb851f

0800389c <__errno>:
 800389c:	4b01      	ldr	r3, [pc, #4]	; (80038a4 <__errno+0x8>)
 800389e:	6818      	ldr	r0, [r3, #0]
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	20000028 	.word	0x20000028

080038a8 <__libc_init_array>:
 80038a8:	b570      	push	{r4, r5, r6, lr}
 80038aa:	4d0d      	ldr	r5, [pc, #52]	; (80038e0 <__libc_init_array+0x38>)
 80038ac:	4c0d      	ldr	r4, [pc, #52]	; (80038e4 <__libc_init_array+0x3c>)
 80038ae:	1b64      	subs	r4, r4, r5
 80038b0:	10a4      	asrs	r4, r4, #2
 80038b2:	2600      	movs	r6, #0
 80038b4:	42a6      	cmp	r6, r4
 80038b6:	d109      	bne.n	80038cc <__libc_init_array+0x24>
 80038b8:	4d0b      	ldr	r5, [pc, #44]	; (80038e8 <__libc_init_array+0x40>)
 80038ba:	4c0c      	ldr	r4, [pc, #48]	; (80038ec <__libc_init_array+0x44>)
 80038bc:	f000 ff76 	bl	80047ac <_init>
 80038c0:	1b64      	subs	r4, r4, r5
 80038c2:	10a4      	asrs	r4, r4, #2
 80038c4:	2600      	movs	r6, #0
 80038c6:	42a6      	cmp	r6, r4
 80038c8:	d105      	bne.n	80038d6 <__libc_init_array+0x2e>
 80038ca:	bd70      	pop	{r4, r5, r6, pc}
 80038cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80038d0:	4798      	blx	r3
 80038d2:	3601      	adds	r6, #1
 80038d4:	e7ee      	b.n	80038b4 <__libc_init_array+0xc>
 80038d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80038da:	4798      	blx	r3
 80038dc:	3601      	adds	r6, #1
 80038de:	e7f2      	b.n	80038c6 <__libc_init_array+0x1e>
 80038e0:	0800493c 	.word	0x0800493c
 80038e4:	0800493c 	.word	0x0800493c
 80038e8:	0800493c 	.word	0x0800493c
 80038ec:	08004940 	.word	0x08004940

080038f0 <memset>:
 80038f0:	4402      	add	r2, r0
 80038f2:	4603      	mov	r3, r0
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d100      	bne.n	80038fa <memset+0xa>
 80038f8:	4770      	bx	lr
 80038fa:	f803 1b01 	strb.w	r1, [r3], #1
 80038fe:	e7f9      	b.n	80038f4 <memset+0x4>

08003900 <iprintf>:
 8003900:	b40f      	push	{r0, r1, r2, r3}
 8003902:	4b0a      	ldr	r3, [pc, #40]	; (800392c <iprintf+0x2c>)
 8003904:	b513      	push	{r0, r1, r4, lr}
 8003906:	681c      	ldr	r4, [r3, #0]
 8003908:	b124      	cbz	r4, 8003914 <iprintf+0x14>
 800390a:	69a3      	ldr	r3, [r4, #24]
 800390c:	b913      	cbnz	r3, 8003914 <iprintf+0x14>
 800390e:	4620      	mov	r0, r4
 8003910:	f000 f866 	bl	80039e0 <__sinit>
 8003914:	ab05      	add	r3, sp, #20
 8003916:	9a04      	ldr	r2, [sp, #16]
 8003918:	68a1      	ldr	r1, [r4, #8]
 800391a:	9301      	str	r3, [sp, #4]
 800391c:	4620      	mov	r0, r4
 800391e:	f000 f983 	bl	8003c28 <_vfiprintf_r>
 8003922:	b002      	add	sp, #8
 8003924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003928:	b004      	add	sp, #16
 800392a:	4770      	bx	lr
 800392c:	20000028 	.word	0x20000028

08003930 <std>:
 8003930:	2300      	movs	r3, #0
 8003932:	b510      	push	{r4, lr}
 8003934:	4604      	mov	r4, r0
 8003936:	e9c0 3300 	strd	r3, r3, [r0]
 800393a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800393e:	6083      	str	r3, [r0, #8]
 8003940:	8181      	strh	r1, [r0, #12]
 8003942:	6643      	str	r3, [r0, #100]	; 0x64
 8003944:	81c2      	strh	r2, [r0, #14]
 8003946:	6183      	str	r3, [r0, #24]
 8003948:	4619      	mov	r1, r3
 800394a:	2208      	movs	r2, #8
 800394c:	305c      	adds	r0, #92	; 0x5c
 800394e:	f7ff ffcf 	bl	80038f0 <memset>
 8003952:	4b05      	ldr	r3, [pc, #20]	; (8003968 <std+0x38>)
 8003954:	6263      	str	r3, [r4, #36]	; 0x24
 8003956:	4b05      	ldr	r3, [pc, #20]	; (800396c <std+0x3c>)
 8003958:	62a3      	str	r3, [r4, #40]	; 0x28
 800395a:	4b05      	ldr	r3, [pc, #20]	; (8003970 <std+0x40>)
 800395c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800395e:	4b05      	ldr	r3, [pc, #20]	; (8003974 <std+0x44>)
 8003960:	6224      	str	r4, [r4, #32]
 8003962:	6323      	str	r3, [r4, #48]	; 0x30
 8003964:	bd10      	pop	{r4, pc}
 8003966:	bf00      	nop
 8003968:	080041d1 	.word	0x080041d1
 800396c:	080041f3 	.word	0x080041f3
 8003970:	0800422b 	.word	0x0800422b
 8003974:	0800424f 	.word	0x0800424f

08003978 <_cleanup_r>:
 8003978:	4901      	ldr	r1, [pc, #4]	; (8003980 <_cleanup_r+0x8>)
 800397a:	f000 b8af 	b.w	8003adc <_fwalk_reent>
 800397e:	bf00      	nop
 8003980:	08004529 	.word	0x08004529

08003984 <__sfmoreglue>:
 8003984:	b570      	push	{r4, r5, r6, lr}
 8003986:	1e4a      	subs	r2, r1, #1
 8003988:	2568      	movs	r5, #104	; 0x68
 800398a:	4355      	muls	r5, r2
 800398c:	460e      	mov	r6, r1
 800398e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003992:	f000 f8c5 	bl	8003b20 <_malloc_r>
 8003996:	4604      	mov	r4, r0
 8003998:	b140      	cbz	r0, 80039ac <__sfmoreglue+0x28>
 800399a:	2100      	movs	r1, #0
 800399c:	e9c0 1600 	strd	r1, r6, [r0]
 80039a0:	300c      	adds	r0, #12
 80039a2:	60a0      	str	r0, [r4, #8]
 80039a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80039a8:	f7ff ffa2 	bl	80038f0 <memset>
 80039ac:	4620      	mov	r0, r4
 80039ae:	bd70      	pop	{r4, r5, r6, pc}

080039b0 <__sfp_lock_acquire>:
 80039b0:	4801      	ldr	r0, [pc, #4]	; (80039b8 <__sfp_lock_acquire+0x8>)
 80039b2:	f000 b8b3 	b.w	8003b1c <__retarget_lock_acquire_recursive>
 80039b6:	bf00      	nop
 80039b8:	20000194 	.word	0x20000194

080039bc <__sfp_lock_release>:
 80039bc:	4801      	ldr	r0, [pc, #4]	; (80039c4 <__sfp_lock_release+0x8>)
 80039be:	f000 b8ae 	b.w	8003b1e <__retarget_lock_release_recursive>
 80039c2:	bf00      	nop
 80039c4:	20000194 	.word	0x20000194

080039c8 <__sinit_lock_acquire>:
 80039c8:	4801      	ldr	r0, [pc, #4]	; (80039d0 <__sinit_lock_acquire+0x8>)
 80039ca:	f000 b8a7 	b.w	8003b1c <__retarget_lock_acquire_recursive>
 80039ce:	bf00      	nop
 80039d0:	2000018f 	.word	0x2000018f

080039d4 <__sinit_lock_release>:
 80039d4:	4801      	ldr	r0, [pc, #4]	; (80039dc <__sinit_lock_release+0x8>)
 80039d6:	f000 b8a2 	b.w	8003b1e <__retarget_lock_release_recursive>
 80039da:	bf00      	nop
 80039dc:	2000018f 	.word	0x2000018f

080039e0 <__sinit>:
 80039e0:	b510      	push	{r4, lr}
 80039e2:	4604      	mov	r4, r0
 80039e4:	f7ff fff0 	bl	80039c8 <__sinit_lock_acquire>
 80039e8:	69a3      	ldr	r3, [r4, #24]
 80039ea:	b11b      	cbz	r3, 80039f4 <__sinit+0x14>
 80039ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039f0:	f7ff bff0 	b.w	80039d4 <__sinit_lock_release>
 80039f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80039f8:	6523      	str	r3, [r4, #80]	; 0x50
 80039fa:	4b13      	ldr	r3, [pc, #76]	; (8003a48 <__sinit+0x68>)
 80039fc:	4a13      	ldr	r2, [pc, #76]	; (8003a4c <__sinit+0x6c>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	62a2      	str	r2, [r4, #40]	; 0x28
 8003a02:	42a3      	cmp	r3, r4
 8003a04:	bf04      	itt	eq
 8003a06:	2301      	moveq	r3, #1
 8003a08:	61a3      	streq	r3, [r4, #24]
 8003a0a:	4620      	mov	r0, r4
 8003a0c:	f000 f820 	bl	8003a50 <__sfp>
 8003a10:	6060      	str	r0, [r4, #4]
 8003a12:	4620      	mov	r0, r4
 8003a14:	f000 f81c 	bl	8003a50 <__sfp>
 8003a18:	60a0      	str	r0, [r4, #8]
 8003a1a:	4620      	mov	r0, r4
 8003a1c:	f000 f818 	bl	8003a50 <__sfp>
 8003a20:	2200      	movs	r2, #0
 8003a22:	60e0      	str	r0, [r4, #12]
 8003a24:	2104      	movs	r1, #4
 8003a26:	6860      	ldr	r0, [r4, #4]
 8003a28:	f7ff ff82 	bl	8003930 <std>
 8003a2c:	68a0      	ldr	r0, [r4, #8]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	2109      	movs	r1, #9
 8003a32:	f7ff ff7d 	bl	8003930 <std>
 8003a36:	68e0      	ldr	r0, [r4, #12]
 8003a38:	2202      	movs	r2, #2
 8003a3a:	2112      	movs	r1, #18
 8003a3c:	f7ff ff78 	bl	8003930 <std>
 8003a40:	2301      	movs	r3, #1
 8003a42:	61a3      	str	r3, [r4, #24]
 8003a44:	e7d2      	b.n	80039ec <__sinit+0xc>
 8003a46:	bf00      	nop
 8003a48:	0800489c 	.word	0x0800489c
 8003a4c:	08003979 	.word	0x08003979

08003a50 <__sfp>:
 8003a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a52:	4607      	mov	r7, r0
 8003a54:	f7ff ffac 	bl	80039b0 <__sfp_lock_acquire>
 8003a58:	4b1e      	ldr	r3, [pc, #120]	; (8003ad4 <__sfp+0x84>)
 8003a5a:	681e      	ldr	r6, [r3, #0]
 8003a5c:	69b3      	ldr	r3, [r6, #24]
 8003a5e:	b913      	cbnz	r3, 8003a66 <__sfp+0x16>
 8003a60:	4630      	mov	r0, r6
 8003a62:	f7ff ffbd 	bl	80039e0 <__sinit>
 8003a66:	3648      	adds	r6, #72	; 0x48
 8003a68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	d503      	bpl.n	8003a78 <__sfp+0x28>
 8003a70:	6833      	ldr	r3, [r6, #0]
 8003a72:	b30b      	cbz	r3, 8003ab8 <__sfp+0x68>
 8003a74:	6836      	ldr	r6, [r6, #0]
 8003a76:	e7f7      	b.n	8003a68 <__sfp+0x18>
 8003a78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003a7c:	b9d5      	cbnz	r5, 8003ab4 <__sfp+0x64>
 8003a7e:	4b16      	ldr	r3, [pc, #88]	; (8003ad8 <__sfp+0x88>)
 8003a80:	60e3      	str	r3, [r4, #12]
 8003a82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003a86:	6665      	str	r5, [r4, #100]	; 0x64
 8003a88:	f000 f847 	bl	8003b1a <__retarget_lock_init_recursive>
 8003a8c:	f7ff ff96 	bl	80039bc <__sfp_lock_release>
 8003a90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003a94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003a98:	6025      	str	r5, [r4, #0]
 8003a9a:	61a5      	str	r5, [r4, #24]
 8003a9c:	2208      	movs	r2, #8
 8003a9e:	4629      	mov	r1, r5
 8003aa0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003aa4:	f7ff ff24 	bl	80038f0 <memset>
 8003aa8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003aac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003ab0:	4620      	mov	r0, r4
 8003ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ab4:	3468      	adds	r4, #104	; 0x68
 8003ab6:	e7d9      	b.n	8003a6c <__sfp+0x1c>
 8003ab8:	2104      	movs	r1, #4
 8003aba:	4638      	mov	r0, r7
 8003abc:	f7ff ff62 	bl	8003984 <__sfmoreglue>
 8003ac0:	4604      	mov	r4, r0
 8003ac2:	6030      	str	r0, [r6, #0]
 8003ac4:	2800      	cmp	r0, #0
 8003ac6:	d1d5      	bne.n	8003a74 <__sfp+0x24>
 8003ac8:	f7ff ff78 	bl	80039bc <__sfp_lock_release>
 8003acc:	230c      	movs	r3, #12
 8003ace:	603b      	str	r3, [r7, #0]
 8003ad0:	e7ee      	b.n	8003ab0 <__sfp+0x60>
 8003ad2:	bf00      	nop
 8003ad4:	0800489c 	.word	0x0800489c
 8003ad8:	ffff0001 	.word	0xffff0001

08003adc <_fwalk_reent>:
 8003adc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ae0:	4606      	mov	r6, r0
 8003ae2:	4688      	mov	r8, r1
 8003ae4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003ae8:	2700      	movs	r7, #0
 8003aea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003aee:	f1b9 0901 	subs.w	r9, r9, #1
 8003af2:	d505      	bpl.n	8003b00 <_fwalk_reent+0x24>
 8003af4:	6824      	ldr	r4, [r4, #0]
 8003af6:	2c00      	cmp	r4, #0
 8003af8:	d1f7      	bne.n	8003aea <_fwalk_reent+0xe>
 8003afa:	4638      	mov	r0, r7
 8003afc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b00:	89ab      	ldrh	r3, [r5, #12]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d907      	bls.n	8003b16 <_fwalk_reent+0x3a>
 8003b06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	d003      	beq.n	8003b16 <_fwalk_reent+0x3a>
 8003b0e:	4629      	mov	r1, r5
 8003b10:	4630      	mov	r0, r6
 8003b12:	47c0      	blx	r8
 8003b14:	4307      	orrs	r7, r0
 8003b16:	3568      	adds	r5, #104	; 0x68
 8003b18:	e7e9      	b.n	8003aee <_fwalk_reent+0x12>

08003b1a <__retarget_lock_init_recursive>:
 8003b1a:	4770      	bx	lr

08003b1c <__retarget_lock_acquire_recursive>:
 8003b1c:	4770      	bx	lr

08003b1e <__retarget_lock_release_recursive>:
 8003b1e:	4770      	bx	lr

08003b20 <_malloc_r>:
 8003b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b22:	1ccd      	adds	r5, r1, #3
 8003b24:	f025 0503 	bic.w	r5, r5, #3
 8003b28:	3508      	adds	r5, #8
 8003b2a:	2d0c      	cmp	r5, #12
 8003b2c:	bf38      	it	cc
 8003b2e:	250c      	movcc	r5, #12
 8003b30:	2d00      	cmp	r5, #0
 8003b32:	4606      	mov	r6, r0
 8003b34:	db01      	blt.n	8003b3a <_malloc_r+0x1a>
 8003b36:	42a9      	cmp	r1, r5
 8003b38:	d903      	bls.n	8003b42 <_malloc_r+0x22>
 8003b3a:	230c      	movs	r3, #12
 8003b3c:	6033      	str	r3, [r6, #0]
 8003b3e:	2000      	movs	r0, #0
 8003b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b42:	f000 fda3 	bl	800468c <__malloc_lock>
 8003b46:	4921      	ldr	r1, [pc, #132]	; (8003bcc <_malloc_r+0xac>)
 8003b48:	680a      	ldr	r2, [r1, #0]
 8003b4a:	4614      	mov	r4, r2
 8003b4c:	b99c      	cbnz	r4, 8003b76 <_malloc_r+0x56>
 8003b4e:	4f20      	ldr	r7, [pc, #128]	; (8003bd0 <_malloc_r+0xb0>)
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	b923      	cbnz	r3, 8003b5e <_malloc_r+0x3e>
 8003b54:	4621      	mov	r1, r4
 8003b56:	4630      	mov	r0, r6
 8003b58:	f000 fb2a 	bl	80041b0 <_sbrk_r>
 8003b5c:	6038      	str	r0, [r7, #0]
 8003b5e:	4629      	mov	r1, r5
 8003b60:	4630      	mov	r0, r6
 8003b62:	f000 fb25 	bl	80041b0 <_sbrk_r>
 8003b66:	1c43      	adds	r3, r0, #1
 8003b68:	d123      	bne.n	8003bb2 <_malloc_r+0x92>
 8003b6a:	230c      	movs	r3, #12
 8003b6c:	6033      	str	r3, [r6, #0]
 8003b6e:	4630      	mov	r0, r6
 8003b70:	f000 fd92 	bl	8004698 <__malloc_unlock>
 8003b74:	e7e3      	b.n	8003b3e <_malloc_r+0x1e>
 8003b76:	6823      	ldr	r3, [r4, #0]
 8003b78:	1b5b      	subs	r3, r3, r5
 8003b7a:	d417      	bmi.n	8003bac <_malloc_r+0x8c>
 8003b7c:	2b0b      	cmp	r3, #11
 8003b7e:	d903      	bls.n	8003b88 <_malloc_r+0x68>
 8003b80:	6023      	str	r3, [r4, #0]
 8003b82:	441c      	add	r4, r3
 8003b84:	6025      	str	r5, [r4, #0]
 8003b86:	e004      	b.n	8003b92 <_malloc_r+0x72>
 8003b88:	6863      	ldr	r3, [r4, #4]
 8003b8a:	42a2      	cmp	r2, r4
 8003b8c:	bf0c      	ite	eq
 8003b8e:	600b      	streq	r3, [r1, #0]
 8003b90:	6053      	strne	r3, [r2, #4]
 8003b92:	4630      	mov	r0, r6
 8003b94:	f000 fd80 	bl	8004698 <__malloc_unlock>
 8003b98:	f104 000b 	add.w	r0, r4, #11
 8003b9c:	1d23      	adds	r3, r4, #4
 8003b9e:	f020 0007 	bic.w	r0, r0, #7
 8003ba2:	1ac2      	subs	r2, r0, r3
 8003ba4:	d0cc      	beq.n	8003b40 <_malloc_r+0x20>
 8003ba6:	1a1b      	subs	r3, r3, r0
 8003ba8:	50a3      	str	r3, [r4, r2]
 8003baa:	e7c9      	b.n	8003b40 <_malloc_r+0x20>
 8003bac:	4622      	mov	r2, r4
 8003bae:	6864      	ldr	r4, [r4, #4]
 8003bb0:	e7cc      	b.n	8003b4c <_malloc_r+0x2c>
 8003bb2:	1cc4      	adds	r4, r0, #3
 8003bb4:	f024 0403 	bic.w	r4, r4, #3
 8003bb8:	42a0      	cmp	r0, r4
 8003bba:	d0e3      	beq.n	8003b84 <_malloc_r+0x64>
 8003bbc:	1a21      	subs	r1, r4, r0
 8003bbe:	4630      	mov	r0, r6
 8003bc0:	f000 faf6 	bl	80041b0 <_sbrk_r>
 8003bc4:	3001      	adds	r0, #1
 8003bc6:	d1dd      	bne.n	8003b84 <_malloc_r+0x64>
 8003bc8:	e7cf      	b.n	8003b6a <_malloc_r+0x4a>
 8003bca:	bf00      	nop
 8003bcc:	200000e4 	.word	0x200000e4
 8003bd0:	200000e8 	.word	0x200000e8

08003bd4 <__sfputc_r>:
 8003bd4:	6893      	ldr	r3, [r2, #8]
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	b410      	push	{r4}
 8003bdc:	6093      	str	r3, [r2, #8]
 8003bde:	da08      	bge.n	8003bf2 <__sfputc_r+0x1e>
 8003be0:	6994      	ldr	r4, [r2, #24]
 8003be2:	42a3      	cmp	r3, r4
 8003be4:	db01      	blt.n	8003bea <__sfputc_r+0x16>
 8003be6:	290a      	cmp	r1, #10
 8003be8:	d103      	bne.n	8003bf2 <__sfputc_r+0x1e>
 8003bea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003bee:	f000 bb33 	b.w	8004258 <__swbuf_r>
 8003bf2:	6813      	ldr	r3, [r2, #0]
 8003bf4:	1c58      	adds	r0, r3, #1
 8003bf6:	6010      	str	r0, [r2, #0]
 8003bf8:	7019      	strb	r1, [r3, #0]
 8003bfa:	4608      	mov	r0, r1
 8003bfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c00:	4770      	bx	lr

08003c02 <__sfputs_r>:
 8003c02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c04:	4606      	mov	r6, r0
 8003c06:	460f      	mov	r7, r1
 8003c08:	4614      	mov	r4, r2
 8003c0a:	18d5      	adds	r5, r2, r3
 8003c0c:	42ac      	cmp	r4, r5
 8003c0e:	d101      	bne.n	8003c14 <__sfputs_r+0x12>
 8003c10:	2000      	movs	r0, #0
 8003c12:	e007      	b.n	8003c24 <__sfputs_r+0x22>
 8003c14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c18:	463a      	mov	r2, r7
 8003c1a:	4630      	mov	r0, r6
 8003c1c:	f7ff ffda 	bl	8003bd4 <__sfputc_r>
 8003c20:	1c43      	adds	r3, r0, #1
 8003c22:	d1f3      	bne.n	8003c0c <__sfputs_r+0xa>
 8003c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003c28 <_vfiprintf_r>:
 8003c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c2c:	460d      	mov	r5, r1
 8003c2e:	b09d      	sub	sp, #116	; 0x74
 8003c30:	4614      	mov	r4, r2
 8003c32:	4698      	mov	r8, r3
 8003c34:	4606      	mov	r6, r0
 8003c36:	b118      	cbz	r0, 8003c40 <_vfiprintf_r+0x18>
 8003c38:	6983      	ldr	r3, [r0, #24]
 8003c3a:	b90b      	cbnz	r3, 8003c40 <_vfiprintf_r+0x18>
 8003c3c:	f7ff fed0 	bl	80039e0 <__sinit>
 8003c40:	4b89      	ldr	r3, [pc, #548]	; (8003e68 <_vfiprintf_r+0x240>)
 8003c42:	429d      	cmp	r5, r3
 8003c44:	d11b      	bne.n	8003c7e <_vfiprintf_r+0x56>
 8003c46:	6875      	ldr	r5, [r6, #4]
 8003c48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c4a:	07d9      	lsls	r1, r3, #31
 8003c4c:	d405      	bmi.n	8003c5a <_vfiprintf_r+0x32>
 8003c4e:	89ab      	ldrh	r3, [r5, #12]
 8003c50:	059a      	lsls	r2, r3, #22
 8003c52:	d402      	bmi.n	8003c5a <_vfiprintf_r+0x32>
 8003c54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003c56:	f7ff ff61 	bl	8003b1c <__retarget_lock_acquire_recursive>
 8003c5a:	89ab      	ldrh	r3, [r5, #12]
 8003c5c:	071b      	lsls	r3, r3, #28
 8003c5e:	d501      	bpl.n	8003c64 <_vfiprintf_r+0x3c>
 8003c60:	692b      	ldr	r3, [r5, #16]
 8003c62:	b9eb      	cbnz	r3, 8003ca0 <_vfiprintf_r+0x78>
 8003c64:	4629      	mov	r1, r5
 8003c66:	4630      	mov	r0, r6
 8003c68:	f000 fb5a 	bl	8004320 <__swsetup_r>
 8003c6c:	b1c0      	cbz	r0, 8003ca0 <_vfiprintf_r+0x78>
 8003c6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c70:	07dc      	lsls	r4, r3, #31
 8003c72:	d50e      	bpl.n	8003c92 <_vfiprintf_r+0x6a>
 8003c74:	f04f 30ff 	mov.w	r0, #4294967295
 8003c78:	b01d      	add	sp, #116	; 0x74
 8003c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c7e:	4b7b      	ldr	r3, [pc, #492]	; (8003e6c <_vfiprintf_r+0x244>)
 8003c80:	429d      	cmp	r5, r3
 8003c82:	d101      	bne.n	8003c88 <_vfiprintf_r+0x60>
 8003c84:	68b5      	ldr	r5, [r6, #8]
 8003c86:	e7df      	b.n	8003c48 <_vfiprintf_r+0x20>
 8003c88:	4b79      	ldr	r3, [pc, #484]	; (8003e70 <_vfiprintf_r+0x248>)
 8003c8a:	429d      	cmp	r5, r3
 8003c8c:	bf08      	it	eq
 8003c8e:	68f5      	ldreq	r5, [r6, #12]
 8003c90:	e7da      	b.n	8003c48 <_vfiprintf_r+0x20>
 8003c92:	89ab      	ldrh	r3, [r5, #12]
 8003c94:	0598      	lsls	r0, r3, #22
 8003c96:	d4ed      	bmi.n	8003c74 <_vfiprintf_r+0x4c>
 8003c98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003c9a:	f7ff ff40 	bl	8003b1e <__retarget_lock_release_recursive>
 8003c9e:	e7e9      	b.n	8003c74 <_vfiprintf_r+0x4c>
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	9309      	str	r3, [sp, #36]	; 0x24
 8003ca4:	2320      	movs	r3, #32
 8003ca6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003caa:	f8cd 800c 	str.w	r8, [sp, #12]
 8003cae:	2330      	movs	r3, #48	; 0x30
 8003cb0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003e74 <_vfiprintf_r+0x24c>
 8003cb4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003cb8:	f04f 0901 	mov.w	r9, #1
 8003cbc:	4623      	mov	r3, r4
 8003cbe:	469a      	mov	sl, r3
 8003cc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003cc4:	b10a      	cbz	r2, 8003cca <_vfiprintf_r+0xa2>
 8003cc6:	2a25      	cmp	r2, #37	; 0x25
 8003cc8:	d1f9      	bne.n	8003cbe <_vfiprintf_r+0x96>
 8003cca:	ebba 0b04 	subs.w	fp, sl, r4
 8003cce:	d00b      	beq.n	8003ce8 <_vfiprintf_r+0xc0>
 8003cd0:	465b      	mov	r3, fp
 8003cd2:	4622      	mov	r2, r4
 8003cd4:	4629      	mov	r1, r5
 8003cd6:	4630      	mov	r0, r6
 8003cd8:	f7ff ff93 	bl	8003c02 <__sfputs_r>
 8003cdc:	3001      	adds	r0, #1
 8003cde:	f000 80aa 	beq.w	8003e36 <_vfiprintf_r+0x20e>
 8003ce2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ce4:	445a      	add	r2, fp
 8003ce6:	9209      	str	r2, [sp, #36]	; 0x24
 8003ce8:	f89a 3000 	ldrb.w	r3, [sl]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f000 80a2 	beq.w	8003e36 <_vfiprintf_r+0x20e>
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8003cf8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003cfc:	f10a 0a01 	add.w	sl, sl, #1
 8003d00:	9304      	str	r3, [sp, #16]
 8003d02:	9307      	str	r3, [sp, #28]
 8003d04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d08:	931a      	str	r3, [sp, #104]	; 0x68
 8003d0a:	4654      	mov	r4, sl
 8003d0c:	2205      	movs	r2, #5
 8003d0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d12:	4858      	ldr	r0, [pc, #352]	; (8003e74 <_vfiprintf_r+0x24c>)
 8003d14:	f7fc fa64 	bl	80001e0 <memchr>
 8003d18:	9a04      	ldr	r2, [sp, #16]
 8003d1a:	b9d8      	cbnz	r0, 8003d54 <_vfiprintf_r+0x12c>
 8003d1c:	06d1      	lsls	r1, r2, #27
 8003d1e:	bf44      	itt	mi
 8003d20:	2320      	movmi	r3, #32
 8003d22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d26:	0713      	lsls	r3, r2, #28
 8003d28:	bf44      	itt	mi
 8003d2a:	232b      	movmi	r3, #43	; 0x2b
 8003d2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d30:	f89a 3000 	ldrb.w	r3, [sl]
 8003d34:	2b2a      	cmp	r3, #42	; 0x2a
 8003d36:	d015      	beq.n	8003d64 <_vfiprintf_r+0x13c>
 8003d38:	9a07      	ldr	r2, [sp, #28]
 8003d3a:	4654      	mov	r4, sl
 8003d3c:	2000      	movs	r0, #0
 8003d3e:	f04f 0c0a 	mov.w	ip, #10
 8003d42:	4621      	mov	r1, r4
 8003d44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d48:	3b30      	subs	r3, #48	; 0x30
 8003d4a:	2b09      	cmp	r3, #9
 8003d4c:	d94e      	bls.n	8003dec <_vfiprintf_r+0x1c4>
 8003d4e:	b1b0      	cbz	r0, 8003d7e <_vfiprintf_r+0x156>
 8003d50:	9207      	str	r2, [sp, #28]
 8003d52:	e014      	b.n	8003d7e <_vfiprintf_r+0x156>
 8003d54:	eba0 0308 	sub.w	r3, r0, r8
 8003d58:	fa09 f303 	lsl.w	r3, r9, r3
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	9304      	str	r3, [sp, #16]
 8003d60:	46a2      	mov	sl, r4
 8003d62:	e7d2      	b.n	8003d0a <_vfiprintf_r+0xe2>
 8003d64:	9b03      	ldr	r3, [sp, #12]
 8003d66:	1d19      	adds	r1, r3, #4
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	9103      	str	r1, [sp, #12]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	bfbb      	ittet	lt
 8003d70:	425b      	neglt	r3, r3
 8003d72:	f042 0202 	orrlt.w	r2, r2, #2
 8003d76:	9307      	strge	r3, [sp, #28]
 8003d78:	9307      	strlt	r3, [sp, #28]
 8003d7a:	bfb8      	it	lt
 8003d7c:	9204      	strlt	r2, [sp, #16]
 8003d7e:	7823      	ldrb	r3, [r4, #0]
 8003d80:	2b2e      	cmp	r3, #46	; 0x2e
 8003d82:	d10c      	bne.n	8003d9e <_vfiprintf_r+0x176>
 8003d84:	7863      	ldrb	r3, [r4, #1]
 8003d86:	2b2a      	cmp	r3, #42	; 0x2a
 8003d88:	d135      	bne.n	8003df6 <_vfiprintf_r+0x1ce>
 8003d8a:	9b03      	ldr	r3, [sp, #12]
 8003d8c:	1d1a      	adds	r2, r3, #4
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	9203      	str	r2, [sp, #12]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	bfb8      	it	lt
 8003d96:	f04f 33ff 	movlt.w	r3, #4294967295
 8003d9a:	3402      	adds	r4, #2
 8003d9c:	9305      	str	r3, [sp, #20]
 8003d9e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003e84 <_vfiprintf_r+0x25c>
 8003da2:	7821      	ldrb	r1, [r4, #0]
 8003da4:	2203      	movs	r2, #3
 8003da6:	4650      	mov	r0, sl
 8003da8:	f7fc fa1a 	bl	80001e0 <memchr>
 8003dac:	b140      	cbz	r0, 8003dc0 <_vfiprintf_r+0x198>
 8003dae:	2340      	movs	r3, #64	; 0x40
 8003db0:	eba0 000a 	sub.w	r0, r0, sl
 8003db4:	fa03 f000 	lsl.w	r0, r3, r0
 8003db8:	9b04      	ldr	r3, [sp, #16]
 8003dba:	4303      	orrs	r3, r0
 8003dbc:	3401      	adds	r4, #1
 8003dbe:	9304      	str	r3, [sp, #16]
 8003dc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dc4:	482c      	ldr	r0, [pc, #176]	; (8003e78 <_vfiprintf_r+0x250>)
 8003dc6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003dca:	2206      	movs	r2, #6
 8003dcc:	f7fc fa08 	bl	80001e0 <memchr>
 8003dd0:	2800      	cmp	r0, #0
 8003dd2:	d03f      	beq.n	8003e54 <_vfiprintf_r+0x22c>
 8003dd4:	4b29      	ldr	r3, [pc, #164]	; (8003e7c <_vfiprintf_r+0x254>)
 8003dd6:	bb1b      	cbnz	r3, 8003e20 <_vfiprintf_r+0x1f8>
 8003dd8:	9b03      	ldr	r3, [sp, #12]
 8003dda:	3307      	adds	r3, #7
 8003ddc:	f023 0307 	bic.w	r3, r3, #7
 8003de0:	3308      	adds	r3, #8
 8003de2:	9303      	str	r3, [sp, #12]
 8003de4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003de6:	443b      	add	r3, r7
 8003de8:	9309      	str	r3, [sp, #36]	; 0x24
 8003dea:	e767      	b.n	8003cbc <_vfiprintf_r+0x94>
 8003dec:	fb0c 3202 	mla	r2, ip, r2, r3
 8003df0:	460c      	mov	r4, r1
 8003df2:	2001      	movs	r0, #1
 8003df4:	e7a5      	b.n	8003d42 <_vfiprintf_r+0x11a>
 8003df6:	2300      	movs	r3, #0
 8003df8:	3401      	adds	r4, #1
 8003dfa:	9305      	str	r3, [sp, #20]
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	f04f 0c0a 	mov.w	ip, #10
 8003e02:	4620      	mov	r0, r4
 8003e04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e08:	3a30      	subs	r2, #48	; 0x30
 8003e0a:	2a09      	cmp	r2, #9
 8003e0c:	d903      	bls.n	8003e16 <_vfiprintf_r+0x1ee>
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d0c5      	beq.n	8003d9e <_vfiprintf_r+0x176>
 8003e12:	9105      	str	r1, [sp, #20]
 8003e14:	e7c3      	b.n	8003d9e <_vfiprintf_r+0x176>
 8003e16:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e1a:	4604      	mov	r4, r0
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e7f0      	b.n	8003e02 <_vfiprintf_r+0x1da>
 8003e20:	ab03      	add	r3, sp, #12
 8003e22:	9300      	str	r3, [sp, #0]
 8003e24:	462a      	mov	r2, r5
 8003e26:	4b16      	ldr	r3, [pc, #88]	; (8003e80 <_vfiprintf_r+0x258>)
 8003e28:	a904      	add	r1, sp, #16
 8003e2a:	4630      	mov	r0, r6
 8003e2c:	f3af 8000 	nop.w
 8003e30:	4607      	mov	r7, r0
 8003e32:	1c78      	adds	r0, r7, #1
 8003e34:	d1d6      	bne.n	8003de4 <_vfiprintf_r+0x1bc>
 8003e36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e38:	07d9      	lsls	r1, r3, #31
 8003e3a:	d405      	bmi.n	8003e48 <_vfiprintf_r+0x220>
 8003e3c:	89ab      	ldrh	r3, [r5, #12]
 8003e3e:	059a      	lsls	r2, r3, #22
 8003e40:	d402      	bmi.n	8003e48 <_vfiprintf_r+0x220>
 8003e42:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e44:	f7ff fe6b 	bl	8003b1e <__retarget_lock_release_recursive>
 8003e48:	89ab      	ldrh	r3, [r5, #12]
 8003e4a:	065b      	lsls	r3, r3, #25
 8003e4c:	f53f af12 	bmi.w	8003c74 <_vfiprintf_r+0x4c>
 8003e50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e52:	e711      	b.n	8003c78 <_vfiprintf_r+0x50>
 8003e54:	ab03      	add	r3, sp, #12
 8003e56:	9300      	str	r3, [sp, #0]
 8003e58:	462a      	mov	r2, r5
 8003e5a:	4b09      	ldr	r3, [pc, #36]	; (8003e80 <_vfiprintf_r+0x258>)
 8003e5c:	a904      	add	r1, sp, #16
 8003e5e:	4630      	mov	r0, r6
 8003e60:	f000 f880 	bl	8003f64 <_printf_i>
 8003e64:	e7e4      	b.n	8003e30 <_vfiprintf_r+0x208>
 8003e66:	bf00      	nop
 8003e68:	080048c0 	.word	0x080048c0
 8003e6c:	080048e0 	.word	0x080048e0
 8003e70:	080048a0 	.word	0x080048a0
 8003e74:	08004900 	.word	0x08004900
 8003e78:	0800490a 	.word	0x0800490a
 8003e7c:	00000000 	.word	0x00000000
 8003e80:	08003c03 	.word	0x08003c03
 8003e84:	08004906 	.word	0x08004906

08003e88 <_printf_common>:
 8003e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e8c:	4616      	mov	r6, r2
 8003e8e:	4699      	mov	r9, r3
 8003e90:	688a      	ldr	r2, [r1, #8]
 8003e92:	690b      	ldr	r3, [r1, #16]
 8003e94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	bfb8      	it	lt
 8003e9c:	4613      	movlt	r3, r2
 8003e9e:	6033      	str	r3, [r6, #0]
 8003ea0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ea4:	4607      	mov	r7, r0
 8003ea6:	460c      	mov	r4, r1
 8003ea8:	b10a      	cbz	r2, 8003eae <_printf_common+0x26>
 8003eaa:	3301      	adds	r3, #1
 8003eac:	6033      	str	r3, [r6, #0]
 8003eae:	6823      	ldr	r3, [r4, #0]
 8003eb0:	0699      	lsls	r1, r3, #26
 8003eb2:	bf42      	ittt	mi
 8003eb4:	6833      	ldrmi	r3, [r6, #0]
 8003eb6:	3302      	addmi	r3, #2
 8003eb8:	6033      	strmi	r3, [r6, #0]
 8003eba:	6825      	ldr	r5, [r4, #0]
 8003ebc:	f015 0506 	ands.w	r5, r5, #6
 8003ec0:	d106      	bne.n	8003ed0 <_printf_common+0x48>
 8003ec2:	f104 0a19 	add.w	sl, r4, #25
 8003ec6:	68e3      	ldr	r3, [r4, #12]
 8003ec8:	6832      	ldr	r2, [r6, #0]
 8003eca:	1a9b      	subs	r3, r3, r2
 8003ecc:	42ab      	cmp	r3, r5
 8003ece:	dc26      	bgt.n	8003f1e <_printf_common+0x96>
 8003ed0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ed4:	1e13      	subs	r3, r2, #0
 8003ed6:	6822      	ldr	r2, [r4, #0]
 8003ed8:	bf18      	it	ne
 8003eda:	2301      	movne	r3, #1
 8003edc:	0692      	lsls	r2, r2, #26
 8003ede:	d42b      	bmi.n	8003f38 <_printf_common+0xb0>
 8003ee0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ee4:	4649      	mov	r1, r9
 8003ee6:	4638      	mov	r0, r7
 8003ee8:	47c0      	blx	r8
 8003eea:	3001      	adds	r0, #1
 8003eec:	d01e      	beq.n	8003f2c <_printf_common+0xa4>
 8003eee:	6823      	ldr	r3, [r4, #0]
 8003ef0:	68e5      	ldr	r5, [r4, #12]
 8003ef2:	6832      	ldr	r2, [r6, #0]
 8003ef4:	f003 0306 	and.w	r3, r3, #6
 8003ef8:	2b04      	cmp	r3, #4
 8003efa:	bf08      	it	eq
 8003efc:	1aad      	subeq	r5, r5, r2
 8003efe:	68a3      	ldr	r3, [r4, #8]
 8003f00:	6922      	ldr	r2, [r4, #16]
 8003f02:	bf0c      	ite	eq
 8003f04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f08:	2500      	movne	r5, #0
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	bfc4      	itt	gt
 8003f0e:	1a9b      	subgt	r3, r3, r2
 8003f10:	18ed      	addgt	r5, r5, r3
 8003f12:	2600      	movs	r6, #0
 8003f14:	341a      	adds	r4, #26
 8003f16:	42b5      	cmp	r5, r6
 8003f18:	d11a      	bne.n	8003f50 <_printf_common+0xc8>
 8003f1a:	2000      	movs	r0, #0
 8003f1c:	e008      	b.n	8003f30 <_printf_common+0xa8>
 8003f1e:	2301      	movs	r3, #1
 8003f20:	4652      	mov	r2, sl
 8003f22:	4649      	mov	r1, r9
 8003f24:	4638      	mov	r0, r7
 8003f26:	47c0      	blx	r8
 8003f28:	3001      	adds	r0, #1
 8003f2a:	d103      	bne.n	8003f34 <_printf_common+0xac>
 8003f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f34:	3501      	adds	r5, #1
 8003f36:	e7c6      	b.n	8003ec6 <_printf_common+0x3e>
 8003f38:	18e1      	adds	r1, r4, r3
 8003f3a:	1c5a      	adds	r2, r3, #1
 8003f3c:	2030      	movs	r0, #48	; 0x30
 8003f3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f42:	4422      	add	r2, r4
 8003f44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f4c:	3302      	adds	r3, #2
 8003f4e:	e7c7      	b.n	8003ee0 <_printf_common+0x58>
 8003f50:	2301      	movs	r3, #1
 8003f52:	4622      	mov	r2, r4
 8003f54:	4649      	mov	r1, r9
 8003f56:	4638      	mov	r0, r7
 8003f58:	47c0      	blx	r8
 8003f5a:	3001      	adds	r0, #1
 8003f5c:	d0e6      	beq.n	8003f2c <_printf_common+0xa4>
 8003f5e:	3601      	adds	r6, #1
 8003f60:	e7d9      	b.n	8003f16 <_printf_common+0x8e>
	...

08003f64 <_printf_i>:
 8003f64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f68:	460c      	mov	r4, r1
 8003f6a:	4691      	mov	r9, r2
 8003f6c:	7e27      	ldrb	r7, [r4, #24]
 8003f6e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003f70:	2f78      	cmp	r7, #120	; 0x78
 8003f72:	4680      	mov	r8, r0
 8003f74:	469a      	mov	sl, r3
 8003f76:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f7a:	d807      	bhi.n	8003f8c <_printf_i+0x28>
 8003f7c:	2f62      	cmp	r7, #98	; 0x62
 8003f7e:	d80a      	bhi.n	8003f96 <_printf_i+0x32>
 8003f80:	2f00      	cmp	r7, #0
 8003f82:	f000 80d8 	beq.w	8004136 <_printf_i+0x1d2>
 8003f86:	2f58      	cmp	r7, #88	; 0x58
 8003f88:	f000 80a3 	beq.w	80040d2 <_printf_i+0x16e>
 8003f8c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003f90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003f94:	e03a      	b.n	800400c <_printf_i+0xa8>
 8003f96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003f9a:	2b15      	cmp	r3, #21
 8003f9c:	d8f6      	bhi.n	8003f8c <_printf_i+0x28>
 8003f9e:	a001      	add	r0, pc, #4	; (adr r0, 8003fa4 <_printf_i+0x40>)
 8003fa0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003fa4:	08003ffd 	.word	0x08003ffd
 8003fa8:	08004011 	.word	0x08004011
 8003fac:	08003f8d 	.word	0x08003f8d
 8003fb0:	08003f8d 	.word	0x08003f8d
 8003fb4:	08003f8d 	.word	0x08003f8d
 8003fb8:	08003f8d 	.word	0x08003f8d
 8003fbc:	08004011 	.word	0x08004011
 8003fc0:	08003f8d 	.word	0x08003f8d
 8003fc4:	08003f8d 	.word	0x08003f8d
 8003fc8:	08003f8d 	.word	0x08003f8d
 8003fcc:	08003f8d 	.word	0x08003f8d
 8003fd0:	0800411d 	.word	0x0800411d
 8003fd4:	08004041 	.word	0x08004041
 8003fd8:	080040ff 	.word	0x080040ff
 8003fdc:	08003f8d 	.word	0x08003f8d
 8003fe0:	08003f8d 	.word	0x08003f8d
 8003fe4:	0800413f 	.word	0x0800413f
 8003fe8:	08003f8d 	.word	0x08003f8d
 8003fec:	08004041 	.word	0x08004041
 8003ff0:	08003f8d 	.word	0x08003f8d
 8003ff4:	08003f8d 	.word	0x08003f8d
 8003ff8:	08004107 	.word	0x08004107
 8003ffc:	680b      	ldr	r3, [r1, #0]
 8003ffe:	1d1a      	adds	r2, r3, #4
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	600a      	str	r2, [r1, #0]
 8004004:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004008:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800400c:	2301      	movs	r3, #1
 800400e:	e0a3      	b.n	8004158 <_printf_i+0x1f4>
 8004010:	6825      	ldr	r5, [r4, #0]
 8004012:	6808      	ldr	r0, [r1, #0]
 8004014:	062e      	lsls	r6, r5, #24
 8004016:	f100 0304 	add.w	r3, r0, #4
 800401a:	d50a      	bpl.n	8004032 <_printf_i+0xce>
 800401c:	6805      	ldr	r5, [r0, #0]
 800401e:	600b      	str	r3, [r1, #0]
 8004020:	2d00      	cmp	r5, #0
 8004022:	da03      	bge.n	800402c <_printf_i+0xc8>
 8004024:	232d      	movs	r3, #45	; 0x2d
 8004026:	426d      	negs	r5, r5
 8004028:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800402c:	485e      	ldr	r0, [pc, #376]	; (80041a8 <_printf_i+0x244>)
 800402e:	230a      	movs	r3, #10
 8004030:	e019      	b.n	8004066 <_printf_i+0x102>
 8004032:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004036:	6805      	ldr	r5, [r0, #0]
 8004038:	600b      	str	r3, [r1, #0]
 800403a:	bf18      	it	ne
 800403c:	b22d      	sxthne	r5, r5
 800403e:	e7ef      	b.n	8004020 <_printf_i+0xbc>
 8004040:	680b      	ldr	r3, [r1, #0]
 8004042:	6825      	ldr	r5, [r4, #0]
 8004044:	1d18      	adds	r0, r3, #4
 8004046:	6008      	str	r0, [r1, #0]
 8004048:	0628      	lsls	r0, r5, #24
 800404a:	d501      	bpl.n	8004050 <_printf_i+0xec>
 800404c:	681d      	ldr	r5, [r3, #0]
 800404e:	e002      	b.n	8004056 <_printf_i+0xf2>
 8004050:	0669      	lsls	r1, r5, #25
 8004052:	d5fb      	bpl.n	800404c <_printf_i+0xe8>
 8004054:	881d      	ldrh	r5, [r3, #0]
 8004056:	4854      	ldr	r0, [pc, #336]	; (80041a8 <_printf_i+0x244>)
 8004058:	2f6f      	cmp	r7, #111	; 0x6f
 800405a:	bf0c      	ite	eq
 800405c:	2308      	moveq	r3, #8
 800405e:	230a      	movne	r3, #10
 8004060:	2100      	movs	r1, #0
 8004062:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004066:	6866      	ldr	r6, [r4, #4]
 8004068:	60a6      	str	r6, [r4, #8]
 800406a:	2e00      	cmp	r6, #0
 800406c:	bfa2      	ittt	ge
 800406e:	6821      	ldrge	r1, [r4, #0]
 8004070:	f021 0104 	bicge.w	r1, r1, #4
 8004074:	6021      	strge	r1, [r4, #0]
 8004076:	b90d      	cbnz	r5, 800407c <_printf_i+0x118>
 8004078:	2e00      	cmp	r6, #0
 800407a:	d04d      	beq.n	8004118 <_printf_i+0x1b4>
 800407c:	4616      	mov	r6, r2
 800407e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004082:	fb03 5711 	mls	r7, r3, r1, r5
 8004086:	5dc7      	ldrb	r7, [r0, r7]
 8004088:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800408c:	462f      	mov	r7, r5
 800408e:	42bb      	cmp	r3, r7
 8004090:	460d      	mov	r5, r1
 8004092:	d9f4      	bls.n	800407e <_printf_i+0x11a>
 8004094:	2b08      	cmp	r3, #8
 8004096:	d10b      	bne.n	80040b0 <_printf_i+0x14c>
 8004098:	6823      	ldr	r3, [r4, #0]
 800409a:	07df      	lsls	r7, r3, #31
 800409c:	d508      	bpl.n	80040b0 <_printf_i+0x14c>
 800409e:	6923      	ldr	r3, [r4, #16]
 80040a0:	6861      	ldr	r1, [r4, #4]
 80040a2:	4299      	cmp	r1, r3
 80040a4:	bfde      	ittt	le
 80040a6:	2330      	movle	r3, #48	; 0x30
 80040a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80040ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 80040b0:	1b92      	subs	r2, r2, r6
 80040b2:	6122      	str	r2, [r4, #16]
 80040b4:	f8cd a000 	str.w	sl, [sp]
 80040b8:	464b      	mov	r3, r9
 80040ba:	aa03      	add	r2, sp, #12
 80040bc:	4621      	mov	r1, r4
 80040be:	4640      	mov	r0, r8
 80040c0:	f7ff fee2 	bl	8003e88 <_printf_common>
 80040c4:	3001      	adds	r0, #1
 80040c6:	d14c      	bne.n	8004162 <_printf_i+0x1fe>
 80040c8:	f04f 30ff 	mov.w	r0, #4294967295
 80040cc:	b004      	add	sp, #16
 80040ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040d2:	4835      	ldr	r0, [pc, #212]	; (80041a8 <_printf_i+0x244>)
 80040d4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80040d8:	6823      	ldr	r3, [r4, #0]
 80040da:	680e      	ldr	r6, [r1, #0]
 80040dc:	061f      	lsls	r7, r3, #24
 80040de:	f856 5b04 	ldr.w	r5, [r6], #4
 80040e2:	600e      	str	r6, [r1, #0]
 80040e4:	d514      	bpl.n	8004110 <_printf_i+0x1ac>
 80040e6:	07d9      	lsls	r1, r3, #31
 80040e8:	bf44      	itt	mi
 80040ea:	f043 0320 	orrmi.w	r3, r3, #32
 80040ee:	6023      	strmi	r3, [r4, #0]
 80040f0:	b91d      	cbnz	r5, 80040fa <_printf_i+0x196>
 80040f2:	6823      	ldr	r3, [r4, #0]
 80040f4:	f023 0320 	bic.w	r3, r3, #32
 80040f8:	6023      	str	r3, [r4, #0]
 80040fa:	2310      	movs	r3, #16
 80040fc:	e7b0      	b.n	8004060 <_printf_i+0xfc>
 80040fe:	6823      	ldr	r3, [r4, #0]
 8004100:	f043 0320 	orr.w	r3, r3, #32
 8004104:	6023      	str	r3, [r4, #0]
 8004106:	2378      	movs	r3, #120	; 0x78
 8004108:	4828      	ldr	r0, [pc, #160]	; (80041ac <_printf_i+0x248>)
 800410a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800410e:	e7e3      	b.n	80040d8 <_printf_i+0x174>
 8004110:	065e      	lsls	r6, r3, #25
 8004112:	bf48      	it	mi
 8004114:	b2ad      	uxthmi	r5, r5
 8004116:	e7e6      	b.n	80040e6 <_printf_i+0x182>
 8004118:	4616      	mov	r6, r2
 800411a:	e7bb      	b.n	8004094 <_printf_i+0x130>
 800411c:	680b      	ldr	r3, [r1, #0]
 800411e:	6826      	ldr	r6, [r4, #0]
 8004120:	6960      	ldr	r0, [r4, #20]
 8004122:	1d1d      	adds	r5, r3, #4
 8004124:	600d      	str	r5, [r1, #0]
 8004126:	0635      	lsls	r5, r6, #24
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	d501      	bpl.n	8004130 <_printf_i+0x1cc>
 800412c:	6018      	str	r0, [r3, #0]
 800412e:	e002      	b.n	8004136 <_printf_i+0x1d2>
 8004130:	0671      	lsls	r1, r6, #25
 8004132:	d5fb      	bpl.n	800412c <_printf_i+0x1c8>
 8004134:	8018      	strh	r0, [r3, #0]
 8004136:	2300      	movs	r3, #0
 8004138:	6123      	str	r3, [r4, #16]
 800413a:	4616      	mov	r6, r2
 800413c:	e7ba      	b.n	80040b4 <_printf_i+0x150>
 800413e:	680b      	ldr	r3, [r1, #0]
 8004140:	1d1a      	adds	r2, r3, #4
 8004142:	600a      	str	r2, [r1, #0]
 8004144:	681e      	ldr	r6, [r3, #0]
 8004146:	6862      	ldr	r2, [r4, #4]
 8004148:	2100      	movs	r1, #0
 800414a:	4630      	mov	r0, r6
 800414c:	f7fc f848 	bl	80001e0 <memchr>
 8004150:	b108      	cbz	r0, 8004156 <_printf_i+0x1f2>
 8004152:	1b80      	subs	r0, r0, r6
 8004154:	6060      	str	r0, [r4, #4]
 8004156:	6863      	ldr	r3, [r4, #4]
 8004158:	6123      	str	r3, [r4, #16]
 800415a:	2300      	movs	r3, #0
 800415c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004160:	e7a8      	b.n	80040b4 <_printf_i+0x150>
 8004162:	6923      	ldr	r3, [r4, #16]
 8004164:	4632      	mov	r2, r6
 8004166:	4649      	mov	r1, r9
 8004168:	4640      	mov	r0, r8
 800416a:	47d0      	blx	sl
 800416c:	3001      	adds	r0, #1
 800416e:	d0ab      	beq.n	80040c8 <_printf_i+0x164>
 8004170:	6823      	ldr	r3, [r4, #0]
 8004172:	079b      	lsls	r3, r3, #30
 8004174:	d413      	bmi.n	800419e <_printf_i+0x23a>
 8004176:	68e0      	ldr	r0, [r4, #12]
 8004178:	9b03      	ldr	r3, [sp, #12]
 800417a:	4298      	cmp	r0, r3
 800417c:	bfb8      	it	lt
 800417e:	4618      	movlt	r0, r3
 8004180:	e7a4      	b.n	80040cc <_printf_i+0x168>
 8004182:	2301      	movs	r3, #1
 8004184:	4632      	mov	r2, r6
 8004186:	4649      	mov	r1, r9
 8004188:	4640      	mov	r0, r8
 800418a:	47d0      	blx	sl
 800418c:	3001      	adds	r0, #1
 800418e:	d09b      	beq.n	80040c8 <_printf_i+0x164>
 8004190:	3501      	adds	r5, #1
 8004192:	68e3      	ldr	r3, [r4, #12]
 8004194:	9903      	ldr	r1, [sp, #12]
 8004196:	1a5b      	subs	r3, r3, r1
 8004198:	42ab      	cmp	r3, r5
 800419a:	dcf2      	bgt.n	8004182 <_printf_i+0x21e>
 800419c:	e7eb      	b.n	8004176 <_printf_i+0x212>
 800419e:	2500      	movs	r5, #0
 80041a0:	f104 0619 	add.w	r6, r4, #25
 80041a4:	e7f5      	b.n	8004192 <_printf_i+0x22e>
 80041a6:	bf00      	nop
 80041a8:	08004911 	.word	0x08004911
 80041ac:	08004922 	.word	0x08004922

080041b0 <_sbrk_r>:
 80041b0:	b538      	push	{r3, r4, r5, lr}
 80041b2:	4d06      	ldr	r5, [pc, #24]	; (80041cc <_sbrk_r+0x1c>)
 80041b4:	2300      	movs	r3, #0
 80041b6:	4604      	mov	r4, r0
 80041b8:	4608      	mov	r0, r1
 80041ba:	602b      	str	r3, [r5, #0]
 80041bc:	f7fd fb94 	bl	80018e8 <_sbrk>
 80041c0:	1c43      	adds	r3, r0, #1
 80041c2:	d102      	bne.n	80041ca <_sbrk_r+0x1a>
 80041c4:	682b      	ldr	r3, [r5, #0]
 80041c6:	b103      	cbz	r3, 80041ca <_sbrk_r+0x1a>
 80041c8:	6023      	str	r3, [r4, #0]
 80041ca:	bd38      	pop	{r3, r4, r5, pc}
 80041cc:	20000198 	.word	0x20000198

080041d0 <__sread>:
 80041d0:	b510      	push	{r4, lr}
 80041d2:	460c      	mov	r4, r1
 80041d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041d8:	f000 fab4 	bl	8004744 <_read_r>
 80041dc:	2800      	cmp	r0, #0
 80041de:	bfab      	itete	ge
 80041e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80041e2:	89a3      	ldrhlt	r3, [r4, #12]
 80041e4:	181b      	addge	r3, r3, r0
 80041e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80041ea:	bfac      	ite	ge
 80041ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80041ee:	81a3      	strhlt	r3, [r4, #12]
 80041f0:	bd10      	pop	{r4, pc}

080041f2 <__swrite>:
 80041f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041f6:	461f      	mov	r7, r3
 80041f8:	898b      	ldrh	r3, [r1, #12]
 80041fa:	05db      	lsls	r3, r3, #23
 80041fc:	4605      	mov	r5, r0
 80041fe:	460c      	mov	r4, r1
 8004200:	4616      	mov	r6, r2
 8004202:	d505      	bpl.n	8004210 <__swrite+0x1e>
 8004204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004208:	2302      	movs	r3, #2
 800420a:	2200      	movs	r2, #0
 800420c:	f000 f9c8 	bl	80045a0 <_lseek_r>
 8004210:	89a3      	ldrh	r3, [r4, #12]
 8004212:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004216:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800421a:	81a3      	strh	r3, [r4, #12]
 800421c:	4632      	mov	r2, r6
 800421e:	463b      	mov	r3, r7
 8004220:	4628      	mov	r0, r5
 8004222:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004226:	f000 b869 	b.w	80042fc <_write_r>

0800422a <__sseek>:
 800422a:	b510      	push	{r4, lr}
 800422c:	460c      	mov	r4, r1
 800422e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004232:	f000 f9b5 	bl	80045a0 <_lseek_r>
 8004236:	1c43      	adds	r3, r0, #1
 8004238:	89a3      	ldrh	r3, [r4, #12]
 800423a:	bf15      	itete	ne
 800423c:	6560      	strne	r0, [r4, #84]	; 0x54
 800423e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004242:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004246:	81a3      	strheq	r3, [r4, #12]
 8004248:	bf18      	it	ne
 800424a:	81a3      	strhne	r3, [r4, #12]
 800424c:	bd10      	pop	{r4, pc}

0800424e <__sclose>:
 800424e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004252:	f000 b8d3 	b.w	80043fc <_close_r>
	...

08004258 <__swbuf_r>:
 8004258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800425a:	460e      	mov	r6, r1
 800425c:	4614      	mov	r4, r2
 800425e:	4605      	mov	r5, r0
 8004260:	b118      	cbz	r0, 800426a <__swbuf_r+0x12>
 8004262:	6983      	ldr	r3, [r0, #24]
 8004264:	b90b      	cbnz	r3, 800426a <__swbuf_r+0x12>
 8004266:	f7ff fbbb 	bl	80039e0 <__sinit>
 800426a:	4b21      	ldr	r3, [pc, #132]	; (80042f0 <__swbuf_r+0x98>)
 800426c:	429c      	cmp	r4, r3
 800426e:	d12b      	bne.n	80042c8 <__swbuf_r+0x70>
 8004270:	686c      	ldr	r4, [r5, #4]
 8004272:	69a3      	ldr	r3, [r4, #24]
 8004274:	60a3      	str	r3, [r4, #8]
 8004276:	89a3      	ldrh	r3, [r4, #12]
 8004278:	071a      	lsls	r2, r3, #28
 800427a:	d52f      	bpl.n	80042dc <__swbuf_r+0x84>
 800427c:	6923      	ldr	r3, [r4, #16]
 800427e:	b36b      	cbz	r3, 80042dc <__swbuf_r+0x84>
 8004280:	6923      	ldr	r3, [r4, #16]
 8004282:	6820      	ldr	r0, [r4, #0]
 8004284:	1ac0      	subs	r0, r0, r3
 8004286:	6963      	ldr	r3, [r4, #20]
 8004288:	b2f6      	uxtb	r6, r6
 800428a:	4283      	cmp	r3, r0
 800428c:	4637      	mov	r7, r6
 800428e:	dc04      	bgt.n	800429a <__swbuf_r+0x42>
 8004290:	4621      	mov	r1, r4
 8004292:	4628      	mov	r0, r5
 8004294:	f000 f948 	bl	8004528 <_fflush_r>
 8004298:	bb30      	cbnz	r0, 80042e8 <__swbuf_r+0x90>
 800429a:	68a3      	ldr	r3, [r4, #8]
 800429c:	3b01      	subs	r3, #1
 800429e:	60a3      	str	r3, [r4, #8]
 80042a0:	6823      	ldr	r3, [r4, #0]
 80042a2:	1c5a      	adds	r2, r3, #1
 80042a4:	6022      	str	r2, [r4, #0]
 80042a6:	701e      	strb	r6, [r3, #0]
 80042a8:	6963      	ldr	r3, [r4, #20]
 80042aa:	3001      	adds	r0, #1
 80042ac:	4283      	cmp	r3, r0
 80042ae:	d004      	beq.n	80042ba <__swbuf_r+0x62>
 80042b0:	89a3      	ldrh	r3, [r4, #12]
 80042b2:	07db      	lsls	r3, r3, #31
 80042b4:	d506      	bpl.n	80042c4 <__swbuf_r+0x6c>
 80042b6:	2e0a      	cmp	r6, #10
 80042b8:	d104      	bne.n	80042c4 <__swbuf_r+0x6c>
 80042ba:	4621      	mov	r1, r4
 80042bc:	4628      	mov	r0, r5
 80042be:	f000 f933 	bl	8004528 <_fflush_r>
 80042c2:	b988      	cbnz	r0, 80042e8 <__swbuf_r+0x90>
 80042c4:	4638      	mov	r0, r7
 80042c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042c8:	4b0a      	ldr	r3, [pc, #40]	; (80042f4 <__swbuf_r+0x9c>)
 80042ca:	429c      	cmp	r4, r3
 80042cc:	d101      	bne.n	80042d2 <__swbuf_r+0x7a>
 80042ce:	68ac      	ldr	r4, [r5, #8]
 80042d0:	e7cf      	b.n	8004272 <__swbuf_r+0x1a>
 80042d2:	4b09      	ldr	r3, [pc, #36]	; (80042f8 <__swbuf_r+0xa0>)
 80042d4:	429c      	cmp	r4, r3
 80042d6:	bf08      	it	eq
 80042d8:	68ec      	ldreq	r4, [r5, #12]
 80042da:	e7ca      	b.n	8004272 <__swbuf_r+0x1a>
 80042dc:	4621      	mov	r1, r4
 80042de:	4628      	mov	r0, r5
 80042e0:	f000 f81e 	bl	8004320 <__swsetup_r>
 80042e4:	2800      	cmp	r0, #0
 80042e6:	d0cb      	beq.n	8004280 <__swbuf_r+0x28>
 80042e8:	f04f 37ff 	mov.w	r7, #4294967295
 80042ec:	e7ea      	b.n	80042c4 <__swbuf_r+0x6c>
 80042ee:	bf00      	nop
 80042f0:	080048c0 	.word	0x080048c0
 80042f4:	080048e0 	.word	0x080048e0
 80042f8:	080048a0 	.word	0x080048a0

080042fc <_write_r>:
 80042fc:	b538      	push	{r3, r4, r5, lr}
 80042fe:	4d07      	ldr	r5, [pc, #28]	; (800431c <_write_r+0x20>)
 8004300:	4604      	mov	r4, r0
 8004302:	4608      	mov	r0, r1
 8004304:	4611      	mov	r1, r2
 8004306:	2200      	movs	r2, #0
 8004308:	602a      	str	r2, [r5, #0]
 800430a:	461a      	mov	r2, r3
 800430c:	f7fd fa9b 	bl	8001846 <_write>
 8004310:	1c43      	adds	r3, r0, #1
 8004312:	d102      	bne.n	800431a <_write_r+0x1e>
 8004314:	682b      	ldr	r3, [r5, #0]
 8004316:	b103      	cbz	r3, 800431a <_write_r+0x1e>
 8004318:	6023      	str	r3, [r4, #0]
 800431a:	bd38      	pop	{r3, r4, r5, pc}
 800431c:	20000198 	.word	0x20000198

08004320 <__swsetup_r>:
 8004320:	4b32      	ldr	r3, [pc, #200]	; (80043ec <__swsetup_r+0xcc>)
 8004322:	b570      	push	{r4, r5, r6, lr}
 8004324:	681d      	ldr	r5, [r3, #0]
 8004326:	4606      	mov	r6, r0
 8004328:	460c      	mov	r4, r1
 800432a:	b125      	cbz	r5, 8004336 <__swsetup_r+0x16>
 800432c:	69ab      	ldr	r3, [r5, #24]
 800432e:	b913      	cbnz	r3, 8004336 <__swsetup_r+0x16>
 8004330:	4628      	mov	r0, r5
 8004332:	f7ff fb55 	bl	80039e0 <__sinit>
 8004336:	4b2e      	ldr	r3, [pc, #184]	; (80043f0 <__swsetup_r+0xd0>)
 8004338:	429c      	cmp	r4, r3
 800433a:	d10f      	bne.n	800435c <__swsetup_r+0x3c>
 800433c:	686c      	ldr	r4, [r5, #4]
 800433e:	89a3      	ldrh	r3, [r4, #12]
 8004340:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004344:	0719      	lsls	r1, r3, #28
 8004346:	d42c      	bmi.n	80043a2 <__swsetup_r+0x82>
 8004348:	06dd      	lsls	r5, r3, #27
 800434a:	d411      	bmi.n	8004370 <__swsetup_r+0x50>
 800434c:	2309      	movs	r3, #9
 800434e:	6033      	str	r3, [r6, #0]
 8004350:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004354:	81a3      	strh	r3, [r4, #12]
 8004356:	f04f 30ff 	mov.w	r0, #4294967295
 800435a:	e03e      	b.n	80043da <__swsetup_r+0xba>
 800435c:	4b25      	ldr	r3, [pc, #148]	; (80043f4 <__swsetup_r+0xd4>)
 800435e:	429c      	cmp	r4, r3
 8004360:	d101      	bne.n	8004366 <__swsetup_r+0x46>
 8004362:	68ac      	ldr	r4, [r5, #8]
 8004364:	e7eb      	b.n	800433e <__swsetup_r+0x1e>
 8004366:	4b24      	ldr	r3, [pc, #144]	; (80043f8 <__swsetup_r+0xd8>)
 8004368:	429c      	cmp	r4, r3
 800436a:	bf08      	it	eq
 800436c:	68ec      	ldreq	r4, [r5, #12]
 800436e:	e7e6      	b.n	800433e <__swsetup_r+0x1e>
 8004370:	0758      	lsls	r0, r3, #29
 8004372:	d512      	bpl.n	800439a <__swsetup_r+0x7a>
 8004374:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004376:	b141      	cbz	r1, 800438a <__swsetup_r+0x6a>
 8004378:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800437c:	4299      	cmp	r1, r3
 800437e:	d002      	beq.n	8004386 <__swsetup_r+0x66>
 8004380:	4630      	mov	r0, r6
 8004382:	f000 f98f 	bl	80046a4 <_free_r>
 8004386:	2300      	movs	r3, #0
 8004388:	6363      	str	r3, [r4, #52]	; 0x34
 800438a:	89a3      	ldrh	r3, [r4, #12]
 800438c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004390:	81a3      	strh	r3, [r4, #12]
 8004392:	2300      	movs	r3, #0
 8004394:	6063      	str	r3, [r4, #4]
 8004396:	6923      	ldr	r3, [r4, #16]
 8004398:	6023      	str	r3, [r4, #0]
 800439a:	89a3      	ldrh	r3, [r4, #12]
 800439c:	f043 0308 	orr.w	r3, r3, #8
 80043a0:	81a3      	strh	r3, [r4, #12]
 80043a2:	6923      	ldr	r3, [r4, #16]
 80043a4:	b94b      	cbnz	r3, 80043ba <__swsetup_r+0x9a>
 80043a6:	89a3      	ldrh	r3, [r4, #12]
 80043a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80043ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043b0:	d003      	beq.n	80043ba <__swsetup_r+0x9a>
 80043b2:	4621      	mov	r1, r4
 80043b4:	4630      	mov	r0, r6
 80043b6:	f000 f929 	bl	800460c <__smakebuf_r>
 80043ba:	89a0      	ldrh	r0, [r4, #12]
 80043bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80043c0:	f010 0301 	ands.w	r3, r0, #1
 80043c4:	d00a      	beq.n	80043dc <__swsetup_r+0xbc>
 80043c6:	2300      	movs	r3, #0
 80043c8:	60a3      	str	r3, [r4, #8]
 80043ca:	6963      	ldr	r3, [r4, #20]
 80043cc:	425b      	negs	r3, r3
 80043ce:	61a3      	str	r3, [r4, #24]
 80043d0:	6923      	ldr	r3, [r4, #16]
 80043d2:	b943      	cbnz	r3, 80043e6 <__swsetup_r+0xc6>
 80043d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80043d8:	d1ba      	bne.n	8004350 <__swsetup_r+0x30>
 80043da:	bd70      	pop	{r4, r5, r6, pc}
 80043dc:	0781      	lsls	r1, r0, #30
 80043de:	bf58      	it	pl
 80043e0:	6963      	ldrpl	r3, [r4, #20]
 80043e2:	60a3      	str	r3, [r4, #8]
 80043e4:	e7f4      	b.n	80043d0 <__swsetup_r+0xb0>
 80043e6:	2000      	movs	r0, #0
 80043e8:	e7f7      	b.n	80043da <__swsetup_r+0xba>
 80043ea:	bf00      	nop
 80043ec:	20000028 	.word	0x20000028
 80043f0:	080048c0 	.word	0x080048c0
 80043f4:	080048e0 	.word	0x080048e0
 80043f8:	080048a0 	.word	0x080048a0

080043fc <_close_r>:
 80043fc:	b538      	push	{r3, r4, r5, lr}
 80043fe:	4d06      	ldr	r5, [pc, #24]	; (8004418 <_close_r+0x1c>)
 8004400:	2300      	movs	r3, #0
 8004402:	4604      	mov	r4, r0
 8004404:	4608      	mov	r0, r1
 8004406:	602b      	str	r3, [r5, #0]
 8004408:	f7fd fa39 	bl	800187e <_close>
 800440c:	1c43      	adds	r3, r0, #1
 800440e:	d102      	bne.n	8004416 <_close_r+0x1a>
 8004410:	682b      	ldr	r3, [r5, #0]
 8004412:	b103      	cbz	r3, 8004416 <_close_r+0x1a>
 8004414:	6023      	str	r3, [r4, #0]
 8004416:	bd38      	pop	{r3, r4, r5, pc}
 8004418:	20000198 	.word	0x20000198

0800441c <__sflush_r>:
 800441c:	898a      	ldrh	r2, [r1, #12]
 800441e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004422:	4605      	mov	r5, r0
 8004424:	0710      	lsls	r0, r2, #28
 8004426:	460c      	mov	r4, r1
 8004428:	d458      	bmi.n	80044dc <__sflush_r+0xc0>
 800442a:	684b      	ldr	r3, [r1, #4]
 800442c:	2b00      	cmp	r3, #0
 800442e:	dc05      	bgt.n	800443c <__sflush_r+0x20>
 8004430:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004432:	2b00      	cmp	r3, #0
 8004434:	dc02      	bgt.n	800443c <__sflush_r+0x20>
 8004436:	2000      	movs	r0, #0
 8004438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800443c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800443e:	2e00      	cmp	r6, #0
 8004440:	d0f9      	beq.n	8004436 <__sflush_r+0x1a>
 8004442:	2300      	movs	r3, #0
 8004444:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004448:	682f      	ldr	r7, [r5, #0]
 800444a:	602b      	str	r3, [r5, #0]
 800444c:	d032      	beq.n	80044b4 <__sflush_r+0x98>
 800444e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004450:	89a3      	ldrh	r3, [r4, #12]
 8004452:	075a      	lsls	r2, r3, #29
 8004454:	d505      	bpl.n	8004462 <__sflush_r+0x46>
 8004456:	6863      	ldr	r3, [r4, #4]
 8004458:	1ac0      	subs	r0, r0, r3
 800445a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800445c:	b10b      	cbz	r3, 8004462 <__sflush_r+0x46>
 800445e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004460:	1ac0      	subs	r0, r0, r3
 8004462:	2300      	movs	r3, #0
 8004464:	4602      	mov	r2, r0
 8004466:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004468:	6a21      	ldr	r1, [r4, #32]
 800446a:	4628      	mov	r0, r5
 800446c:	47b0      	blx	r6
 800446e:	1c43      	adds	r3, r0, #1
 8004470:	89a3      	ldrh	r3, [r4, #12]
 8004472:	d106      	bne.n	8004482 <__sflush_r+0x66>
 8004474:	6829      	ldr	r1, [r5, #0]
 8004476:	291d      	cmp	r1, #29
 8004478:	d82c      	bhi.n	80044d4 <__sflush_r+0xb8>
 800447a:	4a2a      	ldr	r2, [pc, #168]	; (8004524 <__sflush_r+0x108>)
 800447c:	40ca      	lsrs	r2, r1
 800447e:	07d6      	lsls	r6, r2, #31
 8004480:	d528      	bpl.n	80044d4 <__sflush_r+0xb8>
 8004482:	2200      	movs	r2, #0
 8004484:	6062      	str	r2, [r4, #4]
 8004486:	04d9      	lsls	r1, r3, #19
 8004488:	6922      	ldr	r2, [r4, #16]
 800448a:	6022      	str	r2, [r4, #0]
 800448c:	d504      	bpl.n	8004498 <__sflush_r+0x7c>
 800448e:	1c42      	adds	r2, r0, #1
 8004490:	d101      	bne.n	8004496 <__sflush_r+0x7a>
 8004492:	682b      	ldr	r3, [r5, #0]
 8004494:	b903      	cbnz	r3, 8004498 <__sflush_r+0x7c>
 8004496:	6560      	str	r0, [r4, #84]	; 0x54
 8004498:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800449a:	602f      	str	r7, [r5, #0]
 800449c:	2900      	cmp	r1, #0
 800449e:	d0ca      	beq.n	8004436 <__sflush_r+0x1a>
 80044a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80044a4:	4299      	cmp	r1, r3
 80044a6:	d002      	beq.n	80044ae <__sflush_r+0x92>
 80044a8:	4628      	mov	r0, r5
 80044aa:	f000 f8fb 	bl	80046a4 <_free_r>
 80044ae:	2000      	movs	r0, #0
 80044b0:	6360      	str	r0, [r4, #52]	; 0x34
 80044b2:	e7c1      	b.n	8004438 <__sflush_r+0x1c>
 80044b4:	6a21      	ldr	r1, [r4, #32]
 80044b6:	2301      	movs	r3, #1
 80044b8:	4628      	mov	r0, r5
 80044ba:	47b0      	blx	r6
 80044bc:	1c41      	adds	r1, r0, #1
 80044be:	d1c7      	bne.n	8004450 <__sflush_r+0x34>
 80044c0:	682b      	ldr	r3, [r5, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d0c4      	beq.n	8004450 <__sflush_r+0x34>
 80044c6:	2b1d      	cmp	r3, #29
 80044c8:	d001      	beq.n	80044ce <__sflush_r+0xb2>
 80044ca:	2b16      	cmp	r3, #22
 80044cc:	d101      	bne.n	80044d2 <__sflush_r+0xb6>
 80044ce:	602f      	str	r7, [r5, #0]
 80044d0:	e7b1      	b.n	8004436 <__sflush_r+0x1a>
 80044d2:	89a3      	ldrh	r3, [r4, #12]
 80044d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044d8:	81a3      	strh	r3, [r4, #12]
 80044da:	e7ad      	b.n	8004438 <__sflush_r+0x1c>
 80044dc:	690f      	ldr	r7, [r1, #16]
 80044de:	2f00      	cmp	r7, #0
 80044e0:	d0a9      	beq.n	8004436 <__sflush_r+0x1a>
 80044e2:	0793      	lsls	r3, r2, #30
 80044e4:	680e      	ldr	r6, [r1, #0]
 80044e6:	bf08      	it	eq
 80044e8:	694b      	ldreq	r3, [r1, #20]
 80044ea:	600f      	str	r7, [r1, #0]
 80044ec:	bf18      	it	ne
 80044ee:	2300      	movne	r3, #0
 80044f0:	eba6 0807 	sub.w	r8, r6, r7
 80044f4:	608b      	str	r3, [r1, #8]
 80044f6:	f1b8 0f00 	cmp.w	r8, #0
 80044fa:	dd9c      	ble.n	8004436 <__sflush_r+0x1a>
 80044fc:	6a21      	ldr	r1, [r4, #32]
 80044fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004500:	4643      	mov	r3, r8
 8004502:	463a      	mov	r2, r7
 8004504:	4628      	mov	r0, r5
 8004506:	47b0      	blx	r6
 8004508:	2800      	cmp	r0, #0
 800450a:	dc06      	bgt.n	800451a <__sflush_r+0xfe>
 800450c:	89a3      	ldrh	r3, [r4, #12]
 800450e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004512:	81a3      	strh	r3, [r4, #12]
 8004514:	f04f 30ff 	mov.w	r0, #4294967295
 8004518:	e78e      	b.n	8004438 <__sflush_r+0x1c>
 800451a:	4407      	add	r7, r0
 800451c:	eba8 0800 	sub.w	r8, r8, r0
 8004520:	e7e9      	b.n	80044f6 <__sflush_r+0xda>
 8004522:	bf00      	nop
 8004524:	20400001 	.word	0x20400001

08004528 <_fflush_r>:
 8004528:	b538      	push	{r3, r4, r5, lr}
 800452a:	690b      	ldr	r3, [r1, #16]
 800452c:	4605      	mov	r5, r0
 800452e:	460c      	mov	r4, r1
 8004530:	b913      	cbnz	r3, 8004538 <_fflush_r+0x10>
 8004532:	2500      	movs	r5, #0
 8004534:	4628      	mov	r0, r5
 8004536:	bd38      	pop	{r3, r4, r5, pc}
 8004538:	b118      	cbz	r0, 8004542 <_fflush_r+0x1a>
 800453a:	6983      	ldr	r3, [r0, #24]
 800453c:	b90b      	cbnz	r3, 8004542 <_fflush_r+0x1a>
 800453e:	f7ff fa4f 	bl	80039e0 <__sinit>
 8004542:	4b14      	ldr	r3, [pc, #80]	; (8004594 <_fflush_r+0x6c>)
 8004544:	429c      	cmp	r4, r3
 8004546:	d11b      	bne.n	8004580 <_fflush_r+0x58>
 8004548:	686c      	ldr	r4, [r5, #4]
 800454a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d0ef      	beq.n	8004532 <_fflush_r+0xa>
 8004552:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004554:	07d0      	lsls	r0, r2, #31
 8004556:	d404      	bmi.n	8004562 <_fflush_r+0x3a>
 8004558:	0599      	lsls	r1, r3, #22
 800455a:	d402      	bmi.n	8004562 <_fflush_r+0x3a>
 800455c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800455e:	f7ff fadd 	bl	8003b1c <__retarget_lock_acquire_recursive>
 8004562:	4628      	mov	r0, r5
 8004564:	4621      	mov	r1, r4
 8004566:	f7ff ff59 	bl	800441c <__sflush_r>
 800456a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800456c:	07da      	lsls	r2, r3, #31
 800456e:	4605      	mov	r5, r0
 8004570:	d4e0      	bmi.n	8004534 <_fflush_r+0xc>
 8004572:	89a3      	ldrh	r3, [r4, #12]
 8004574:	059b      	lsls	r3, r3, #22
 8004576:	d4dd      	bmi.n	8004534 <_fflush_r+0xc>
 8004578:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800457a:	f7ff fad0 	bl	8003b1e <__retarget_lock_release_recursive>
 800457e:	e7d9      	b.n	8004534 <_fflush_r+0xc>
 8004580:	4b05      	ldr	r3, [pc, #20]	; (8004598 <_fflush_r+0x70>)
 8004582:	429c      	cmp	r4, r3
 8004584:	d101      	bne.n	800458a <_fflush_r+0x62>
 8004586:	68ac      	ldr	r4, [r5, #8]
 8004588:	e7df      	b.n	800454a <_fflush_r+0x22>
 800458a:	4b04      	ldr	r3, [pc, #16]	; (800459c <_fflush_r+0x74>)
 800458c:	429c      	cmp	r4, r3
 800458e:	bf08      	it	eq
 8004590:	68ec      	ldreq	r4, [r5, #12]
 8004592:	e7da      	b.n	800454a <_fflush_r+0x22>
 8004594:	080048c0 	.word	0x080048c0
 8004598:	080048e0 	.word	0x080048e0
 800459c:	080048a0 	.word	0x080048a0

080045a0 <_lseek_r>:
 80045a0:	b538      	push	{r3, r4, r5, lr}
 80045a2:	4d07      	ldr	r5, [pc, #28]	; (80045c0 <_lseek_r+0x20>)
 80045a4:	4604      	mov	r4, r0
 80045a6:	4608      	mov	r0, r1
 80045a8:	4611      	mov	r1, r2
 80045aa:	2200      	movs	r2, #0
 80045ac:	602a      	str	r2, [r5, #0]
 80045ae:	461a      	mov	r2, r3
 80045b0:	f7fd f98c 	bl	80018cc <_lseek>
 80045b4:	1c43      	adds	r3, r0, #1
 80045b6:	d102      	bne.n	80045be <_lseek_r+0x1e>
 80045b8:	682b      	ldr	r3, [r5, #0]
 80045ba:	b103      	cbz	r3, 80045be <_lseek_r+0x1e>
 80045bc:	6023      	str	r3, [r4, #0]
 80045be:	bd38      	pop	{r3, r4, r5, pc}
 80045c0:	20000198 	.word	0x20000198

080045c4 <__swhatbuf_r>:
 80045c4:	b570      	push	{r4, r5, r6, lr}
 80045c6:	460e      	mov	r6, r1
 80045c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045cc:	2900      	cmp	r1, #0
 80045ce:	b096      	sub	sp, #88	; 0x58
 80045d0:	4614      	mov	r4, r2
 80045d2:	461d      	mov	r5, r3
 80045d4:	da07      	bge.n	80045e6 <__swhatbuf_r+0x22>
 80045d6:	2300      	movs	r3, #0
 80045d8:	602b      	str	r3, [r5, #0]
 80045da:	89b3      	ldrh	r3, [r6, #12]
 80045dc:	061a      	lsls	r2, r3, #24
 80045de:	d410      	bmi.n	8004602 <__swhatbuf_r+0x3e>
 80045e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045e4:	e00e      	b.n	8004604 <__swhatbuf_r+0x40>
 80045e6:	466a      	mov	r2, sp
 80045e8:	f000 f8be 	bl	8004768 <_fstat_r>
 80045ec:	2800      	cmp	r0, #0
 80045ee:	dbf2      	blt.n	80045d6 <__swhatbuf_r+0x12>
 80045f0:	9a01      	ldr	r2, [sp, #4]
 80045f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80045f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80045fa:	425a      	negs	r2, r3
 80045fc:	415a      	adcs	r2, r3
 80045fe:	602a      	str	r2, [r5, #0]
 8004600:	e7ee      	b.n	80045e0 <__swhatbuf_r+0x1c>
 8004602:	2340      	movs	r3, #64	; 0x40
 8004604:	2000      	movs	r0, #0
 8004606:	6023      	str	r3, [r4, #0]
 8004608:	b016      	add	sp, #88	; 0x58
 800460a:	bd70      	pop	{r4, r5, r6, pc}

0800460c <__smakebuf_r>:
 800460c:	898b      	ldrh	r3, [r1, #12]
 800460e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004610:	079d      	lsls	r5, r3, #30
 8004612:	4606      	mov	r6, r0
 8004614:	460c      	mov	r4, r1
 8004616:	d507      	bpl.n	8004628 <__smakebuf_r+0x1c>
 8004618:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800461c:	6023      	str	r3, [r4, #0]
 800461e:	6123      	str	r3, [r4, #16]
 8004620:	2301      	movs	r3, #1
 8004622:	6163      	str	r3, [r4, #20]
 8004624:	b002      	add	sp, #8
 8004626:	bd70      	pop	{r4, r5, r6, pc}
 8004628:	ab01      	add	r3, sp, #4
 800462a:	466a      	mov	r2, sp
 800462c:	f7ff ffca 	bl	80045c4 <__swhatbuf_r>
 8004630:	9900      	ldr	r1, [sp, #0]
 8004632:	4605      	mov	r5, r0
 8004634:	4630      	mov	r0, r6
 8004636:	f7ff fa73 	bl	8003b20 <_malloc_r>
 800463a:	b948      	cbnz	r0, 8004650 <__smakebuf_r+0x44>
 800463c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004640:	059a      	lsls	r2, r3, #22
 8004642:	d4ef      	bmi.n	8004624 <__smakebuf_r+0x18>
 8004644:	f023 0303 	bic.w	r3, r3, #3
 8004648:	f043 0302 	orr.w	r3, r3, #2
 800464c:	81a3      	strh	r3, [r4, #12]
 800464e:	e7e3      	b.n	8004618 <__smakebuf_r+0xc>
 8004650:	4b0d      	ldr	r3, [pc, #52]	; (8004688 <__smakebuf_r+0x7c>)
 8004652:	62b3      	str	r3, [r6, #40]	; 0x28
 8004654:	89a3      	ldrh	r3, [r4, #12]
 8004656:	6020      	str	r0, [r4, #0]
 8004658:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800465c:	81a3      	strh	r3, [r4, #12]
 800465e:	9b00      	ldr	r3, [sp, #0]
 8004660:	6163      	str	r3, [r4, #20]
 8004662:	9b01      	ldr	r3, [sp, #4]
 8004664:	6120      	str	r0, [r4, #16]
 8004666:	b15b      	cbz	r3, 8004680 <__smakebuf_r+0x74>
 8004668:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800466c:	4630      	mov	r0, r6
 800466e:	f000 f88d 	bl	800478c <_isatty_r>
 8004672:	b128      	cbz	r0, 8004680 <__smakebuf_r+0x74>
 8004674:	89a3      	ldrh	r3, [r4, #12]
 8004676:	f023 0303 	bic.w	r3, r3, #3
 800467a:	f043 0301 	orr.w	r3, r3, #1
 800467e:	81a3      	strh	r3, [r4, #12]
 8004680:	89a0      	ldrh	r0, [r4, #12]
 8004682:	4305      	orrs	r5, r0
 8004684:	81a5      	strh	r5, [r4, #12]
 8004686:	e7cd      	b.n	8004624 <__smakebuf_r+0x18>
 8004688:	08003979 	.word	0x08003979

0800468c <__malloc_lock>:
 800468c:	4801      	ldr	r0, [pc, #4]	; (8004694 <__malloc_lock+0x8>)
 800468e:	f7ff ba45 	b.w	8003b1c <__retarget_lock_acquire_recursive>
 8004692:	bf00      	nop
 8004694:	20000190 	.word	0x20000190

08004698 <__malloc_unlock>:
 8004698:	4801      	ldr	r0, [pc, #4]	; (80046a0 <__malloc_unlock+0x8>)
 800469a:	f7ff ba40 	b.w	8003b1e <__retarget_lock_release_recursive>
 800469e:	bf00      	nop
 80046a0:	20000190 	.word	0x20000190

080046a4 <_free_r>:
 80046a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80046a6:	2900      	cmp	r1, #0
 80046a8:	d048      	beq.n	800473c <_free_r+0x98>
 80046aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046ae:	9001      	str	r0, [sp, #4]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f1a1 0404 	sub.w	r4, r1, #4
 80046b6:	bfb8      	it	lt
 80046b8:	18e4      	addlt	r4, r4, r3
 80046ba:	f7ff ffe7 	bl	800468c <__malloc_lock>
 80046be:	4a20      	ldr	r2, [pc, #128]	; (8004740 <_free_r+0x9c>)
 80046c0:	9801      	ldr	r0, [sp, #4]
 80046c2:	6813      	ldr	r3, [r2, #0]
 80046c4:	4615      	mov	r5, r2
 80046c6:	b933      	cbnz	r3, 80046d6 <_free_r+0x32>
 80046c8:	6063      	str	r3, [r4, #4]
 80046ca:	6014      	str	r4, [r2, #0]
 80046cc:	b003      	add	sp, #12
 80046ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80046d2:	f7ff bfe1 	b.w	8004698 <__malloc_unlock>
 80046d6:	42a3      	cmp	r3, r4
 80046d8:	d90b      	bls.n	80046f2 <_free_r+0x4e>
 80046da:	6821      	ldr	r1, [r4, #0]
 80046dc:	1862      	adds	r2, r4, r1
 80046de:	4293      	cmp	r3, r2
 80046e0:	bf04      	itt	eq
 80046e2:	681a      	ldreq	r2, [r3, #0]
 80046e4:	685b      	ldreq	r3, [r3, #4]
 80046e6:	6063      	str	r3, [r4, #4]
 80046e8:	bf04      	itt	eq
 80046ea:	1852      	addeq	r2, r2, r1
 80046ec:	6022      	streq	r2, [r4, #0]
 80046ee:	602c      	str	r4, [r5, #0]
 80046f0:	e7ec      	b.n	80046cc <_free_r+0x28>
 80046f2:	461a      	mov	r2, r3
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	b10b      	cbz	r3, 80046fc <_free_r+0x58>
 80046f8:	42a3      	cmp	r3, r4
 80046fa:	d9fa      	bls.n	80046f2 <_free_r+0x4e>
 80046fc:	6811      	ldr	r1, [r2, #0]
 80046fe:	1855      	adds	r5, r2, r1
 8004700:	42a5      	cmp	r5, r4
 8004702:	d10b      	bne.n	800471c <_free_r+0x78>
 8004704:	6824      	ldr	r4, [r4, #0]
 8004706:	4421      	add	r1, r4
 8004708:	1854      	adds	r4, r2, r1
 800470a:	42a3      	cmp	r3, r4
 800470c:	6011      	str	r1, [r2, #0]
 800470e:	d1dd      	bne.n	80046cc <_free_r+0x28>
 8004710:	681c      	ldr	r4, [r3, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	6053      	str	r3, [r2, #4]
 8004716:	4421      	add	r1, r4
 8004718:	6011      	str	r1, [r2, #0]
 800471a:	e7d7      	b.n	80046cc <_free_r+0x28>
 800471c:	d902      	bls.n	8004724 <_free_r+0x80>
 800471e:	230c      	movs	r3, #12
 8004720:	6003      	str	r3, [r0, #0]
 8004722:	e7d3      	b.n	80046cc <_free_r+0x28>
 8004724:	6825      	ldr	r5, [r4, #0]
 8004726:	1961      	adds	r1, r4, r5
 8004728:	428b      	cmp	r3, r1
 800472a:	bf04      	itt	eq
 800472c:	6819      	ldreq	r1, [r3, #0]
 800472e:	685b      	ldreq	r3, [r3, #4]
 8004730:	6063      	str	r3, [r4, #4]
 8004732:	bf04      	itt	eq
 8004734:	1949      	addeq	r1, r1, r5
 8004736:	6021      	streq	r1, [r4, #0]
 8004738:	6054      	str	r4, [r2, #4]
 800473a:	e7c7      	b.n	80046cc <_free_r+0x28>
 800473c:	b003      	add	sp, #12
 800473e:	bd30      	pop	{r4, r5, pc}
 8004740:	200000e4 	.word	0x200000e4

08004744 <_read_r>:
 8004744:	b538      	push	{r3, r4, r5, lr}
 8004746:	4d07      	ldr	r5, [pc, #28]	; (8004764 <_read_r+0x20>)
 8004748:	4604      	mov	r4, r0
 800474a:	4608      	mov	r0, r1
 800474c:	4611      	mov	r1, r2
 800474e:	2200      	movs	r2, #0
 8004750:	602a      	str	r2, [r5, #0]
 8004752:	461a      	mov	r2, r3
 8004754:	f7fd f85a 	bl	800180c <_read>
 8004758:	1c43      	adds	r3, r0, #1
 800475a:	d102      	bne.n	8004762 <_read_r+0x1e>
 800475c:	682b      	ldr	r3, [r5, #0]
 800475e:	b103      	cbz	r3, 8004762 <_read_r+0x1e>
 8004760:	6023      	str	r3, [r4, #0]
 8004762:	bd38      	pop	{r3, r4, r5, pc}
 8004764:	20000198 	.word	0x20000198

08004768 <_fstat_r>:
 8004768:	b538      	push	{r3, r4, r5, lr}
 800476a:	4d07      	ldr	r5, [pc, #28]	; (8004788 <_fstat_r+0x20>)
 800476c:	2300      	movs	r3, #0
 800476e:	4604      	mov	r4, r0
 8004770:	4608      	mov	r0, r1
 8004772:	4611      	mov	r1, r2
 8004774:	602b      	str	r3, [r5, #0]
 8004776:	f7fd f88e 	bl	8001896 <_fstat>
 800477a:	1c43      	adds	r3, r0, #1
 800477c:	d102      	bne.n	8004784 <_fstat_r+0x1c>
 800477e:	682b      	ldr	r3, [r5, #0]
 8004780:	b103      	cbz	r3, 8004784 <_fstat_r+0x1c>
 8004782:	6023      	str	r3, [r4, #0]
 8004784:	bd38      	pop	{r3, r4, r5, pc}
 8004786:	bf00      	nop
 8004788:	20000198 	.word	0x20000198

0800478c <_isatty_r>:
 800478c:	b538      	push	{r3, r4, r5, lr}
 800478e:	4d06      	ldr	r5, [pc, #24]	; (80047a8 <_isatty_r+0x1c>)
 8004790:	2300      	movs	r3, #0
 8004792:	4604      	mov	r4, r0
 8004794:	4608      	mov	r0, r1
 8004796:	602b      	str	r3, [r5, #0]
 8004798:	f7fd f88d 	bl	80018b6 <_isatty>
 800479c:	1c43      	adds	r3, r0, #1
 800479e:	d102      	bne.n	80047a6 <_isatty_r+0x1a>
 80047a0:	682b      	ldr	r3, [r5, #0]
 80047a2:	b103      	cbz	r3, 80047a6 <_isatty_r+0x1a>
 80047a4:	6023      	str	r3, [r4, #0]
 80047a6:	bd38      	pop	{r3, r4, r5, pc}
 80047a8:	20000198 	.word	0x20000198

080047ac <_init>:
 80047ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ae:	bf00      	nop
 80047b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047b2:	bc08      	pop	{r3}
 80047b4:	469e      	mov	lr, r3
 80047b6:	4770      	bx	lr

080047b8 <_fini>:
 80047b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ba:	bf00      	nop
 80047bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047be:	bc08      	pop	{r3}
 80047c0:	469e      	mov	lr, r3
 80047c2:	4770      	bx	lr
