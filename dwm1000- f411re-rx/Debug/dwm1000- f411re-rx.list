
dwm1000- f411re-rx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005dfc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ed0  08005f9c  08005f9c  00015f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e6c  08006e6c  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  08006e6c  08006e6c  00016e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e74  08006e74  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e74  08006e74  00016e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e78  08006e78  00016e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08006e7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005ec  20000098  08006f14  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000684  08006f14  00020684  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013a5b  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003360  00000000  00000000  00033b23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001260  00000000  00000000  00036e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010f8  00000000  00000000  000380e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b3a3  00000000  00000000  000391e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001744b  00000000  00000000  00054583  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093460  00000000  00000000  0006b9ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fee2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052f4  00000000  00000000  000fee80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000098 	.word	0x20000098
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005f84 	.word	0x08005f84

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000009c 	.word	0x2000009c
 80001dc:	08005f84 	.word	0x08005f84

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <dwt_initialise>:
#define VBAT_ADDRESS   (0x08)
#define VTEMP_ADDRESS  (0x09)
#define XTRIM_ADDRESS  (0x1E)

int dwt_initialise(int config)
{
 8000584:	b590      	push	{r4, r7, lr}
 8000586:	b087      	sub	sp, #28
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
    uint16 otp_xtaltrim_and_rev = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	82fb      	strh	r3, [r7, #22]
    uint32 ldo_tune = 0;
 8000590:	2300      	movs	r3, #0
 8000592:	613b      	str	r3, [r7, #16]

    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
 8000594:	4ba1      	ldr	r3, [pc, #644]	; (800081c <dwt_initialise+0x298>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	2200      	movs	r2, #0
 800059a:	751a      	strb	r2, [r3, #20]
    pdw1000local->wait4resp = 0; // - set to 0 - meaning wait for response not active
 800059c:	4b9f      	ldr	r3, [pc, #636]	; (800081c <dwt_initialise+0x298>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	2200      	movs	r2, #0
 80005a2:	755a      	strb	r2, [r3, #21]
    pdw1000local->sleep_mode = 0; // - set to 0 - meaning sleep mode has not been configured
 80005a4:	4b9d      	ldr	r3, [pc, #628]	; (800081c <dwt_initialise+0x298>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2200      	movs	r2, #0
 80005aa:	82da      	strh	r2, [r3, #22]

    pdw1000local->cbTxDone = NULL;
 80005ac:	4b9b      	ldr	r3, [pc, #620]	; (800081c <dwt_initialise+0x298>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2200      	movs	r2, #0
 80005b2:	629a      	str	r2, [r3, #40]	; 0x28
    pdw1000local->cbRxOk = NULL;
 80005b4:	4b99      	ldr	r3, [pc, #612]	; (800081c <dwt_initialise+0x298>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2200      	movs	r2, #0
 80005ba:	62da      	str	r2, [r3, #44]	; 0x2c
    pdw1000local->cbRxTo = NULL;
 80005bc:	4b97      	ldr	r3, [pc, #604]	; (800081c <dwt_initialise+0x298>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2200      	movs	r2, #0
 80005c2:	631a      	str	r2, [r3, #48]	; 0x30
    pdw1000local->cbRxErr = NULL;
 80005c4:	4b95      	ldr	r3, [pc, #596]	; (800081c <dwt_initialise+0x298>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2200      	movs	r2, #0
 80005ca:	635a      	str	r2, [r3, #52]	; 0x34

#ifdef DWT_API_ERROR_CHECK
    pdw1000local->otp_mask = config ; // Save the READ_OTP config mask
 80005cc:	4b93      	ldr	r3, [pc, #588]	; (800081c <dwt_initialise+0x298>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	687a      	ldr	r2, [r7, #4]
 80005d2:	b292      	uxth	r2, r2
 80005d4:	831a      	strh	r2, [r3, #24]
#endif

    // Read and validate device ID, return -1 if not recognised
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
 80005d6:	f000 f925 	bl	8000824 <dwt_readdevid>
 80005da:	4603      	mov	r3, r0
 80005dc:	4a90      	ldr	r2, [pc, #576]	; (8000820 <dwt_initialise+0x29c>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d002      	beq.n	80005e8 <dwt_initialise+0x64>
    {
        return DWT_ERROR ;
 80005e2:	f04f 33ff 	mov.w	r3, #4294967295
 80005e6:	e115      	b.n	8000814 <dwt_initialise+0x290>
    }

    if(!(DWT_DW_WAKE_UP & config)) // Don't reset the device if DWT_DW_WAKE_UP bit is set, e.g. when calling this API after wake up
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	f003 0302 	and.w	r3, r3, #2
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d101      	bne.n	80005f6 <dwt_initialise+0x72>
    {
        dwt_softreset(); // Make sure the device is completely reset before starting initialisation
 80005f2:	f000 fe7d 	bl	80012f0 <dwt_softreset>
    }

    if(!((DWT_DW_WAKE_UP & config) && ((DWT_READ_OTP_TMP | DWT_READ_OTP_BAT | DWT_READ_OTP_LID | DWT_READ_OTP_PID | DWT_DW_WUP_RD_OTPREV)& config)))
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	f003 0302 	and.w	r3, r3, #2
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d004      	beq.n	800060a <dwt_initialise+0x86>
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8000606:	2b00      	cmp	r3, #0
 8000608:	d102      	bne.n	8000610 <dwt_initialise+0x8c>
    {
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 800060a:	2000      	movs	r0, #0
 800060c:	f000 fd3e 	bl	800108c <_dwt_enableclocks>
    }                                  // when not reading from OTP, clocks don't need to change.

    // Configure the CPLL lock detect
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
 8000610:	2204      	movs	r2, #4
 8000612:	2100      	movs	r1, #0
 8000614:	2024      	movs	r0, #36	; 0x24
 8000616:	f000 fc82 	bl	8000f1e <dwt_write8bitoffsetreg>

    // When DW1000 IC is initialised from power up, then the LDO value should be kicked from OTP, otherwise if this API is called after
    // DW1000 IC has been woken up (DWT_DW_WAKE_UP bit is set) this can be skipped as LDO would have already been automatically
    // kicked/loaded on wake up
    if(!(DWT_DW_WAKE_UP & config))
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	f003 0302 	and.w	r3, r3, #2
 8000620:	2b00      	cmp	r3, #0
 8000622:	d116      	bne.n	8000652 <dwt_initialise+0xce>
    {
        // Load LDO tune from OTP and kick it if there is a value actually programmed.
        ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
 8000624:	2004      	movs	r0, #4
 8000626:	f000 fcd0 	bl	8000fca <_dwt_otpread>
 800062a:	6138      	str	r0, [r7, #16]
        if((ldo_tune & 0xFF) != 0)
 800062c:	693b      	ldr	r3, [r7, #16]
 800062e:	b2db      	uxtb	r3, r3
 8000630:	2b00      	cmp	r3, #0
 8000632:	d01f      	beq.n	8000674 <dwt_initialise+0xf0>
        {
            // Kick LDO tune
            dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDO kick bit
 8000634:	2202      	movs	r2, #2
 8000636:	2112      	movs	r1, #18
 8000638:	202d      	movs	r0, #45	; 0x2d
 800063a:	f000 fc70 	bl	8000f1e <dwt_write8bitoffsetreg>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 800063e:	4b77      	ldr	r3, [pc, #476]	; (800081c <dwt_initialise+0x298>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	8ada      	ldrh	r2, [r3, #22]
 8000644:	4b75      	ldr	r3, [pc, #468]	; (800081c <dwt_initialise+0x298>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800064c:	b292      	uxth	r2, r2
 800064e:	82da      	strh	r2, [r3, #22]
 8000650:	e010      	b.n	8000674 <dwt_initialise+0xf0>
        }
    }
    else
    {   //if LDOTUNE reg contains value different from default it means it was kicked from OTP and thus set AON_WCFG_ONW_LLDO.
        if(dwt_read32bitoffsetreg(RF_CONF_ID, LDOTUNE) != LDOTUNE_DEFAULT)
 8000652:	2130      	movs	r1, #48	; 0x30
 8000654:	2028      	movs	r0, #40	; 0x28
 8000656:	f000 fc0b 	bl	8000e70 <dwt_read32bitoffsetreg>
 800065a:	4603      	mov	r3, r0
 800065c:	f1b3 3f88 	cmp.w	r3, #2290649224	; 0x88888888
 8000660:	d008      	beq.n	8000674 <dwt_initialise+0xf0>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO;
 8000662:	4b6e      	ldr	r3, [pc, #440]	; (800081c <dwt_initialise+0x298>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	8ada      	ldrh	r2, [r3, #22]
 8000668:	4b6c      	ldr	r3, [pc, #432]	; (800081c <dwt_initialise+0x298>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000670:	b292      	uxth	r2, r2
 8000672:	82da      	strh	r2, [r3, #22]
    }

    if((!(DWT_DW_WAKE_UP & config)) || ((DWT_DW_WAKE_UP & config) && (DWT_DW_WUP_RD_OTPREV & config)))
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	f003 0302 	and.w	r3, r3, #2
 800067a:	2b00      	cmp	r3, #0
 800067c:	d009      	beq.n	8000692 <dwt_initialise+0x10e>
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	f003 0302 	and.w	r3, r3, #2
 8000684:	2b00      	cmp	r3, #0
 8000686:	d011      	beq.n	80006ac <dwt_initialise+0x128>
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	f003 0308 	and.w	r3, r3, #8
 800068e:	2b00      	cmp	r3, #0
 8000690:	d00c      	beq.n	80006ac <dwt_initialise+0x128>
    {
        // Read OTP revision number
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 8000692:	201e      	movs	r0, #30
 8000694:	f000 fc99 	bl	8000fca <_dwt_otpread>
 8000698:	4603      	mov	r3, r0
 800069a:	82fb      	strh	r3, [r7, #22]
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 800069c:	8afb      	ldrh	r3, [r7, #22]
 800069e:	0a1b      	lsrs	r3, r3, #8
 80006a0:	b29a      	uxth	r2, r3
 80006a2:	4b5e      	ldr	r3, [pc, #376]	; (800081c <dwt_initialise+0x298>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	b2d2      	uxtb	r2, r2
 80006a8:	72da      	strb	r2, [r3, #11]
 80006aa:	e003      	b.n	80006b4 <dwt_initialise+0x130>
    }
    else
        pdw1000local->otprev = 0; // If OTP valuse are not used, if this API is called after DW1000 IC has been woken up
 80006ac:	4b5b      	ldr	r3, [pc, #364]	; (800081c <dwt_initialise+0x298>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2200      	movs	r2, #0
 80006b2:	72da      	strb	r2, [r3, #11]
                                  // (DWT_DW_WAKE_UP bit is set), set otprev to 0

    if(!(DWT_DW_WAKE_UP & config))
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	f003 0302 	and.w	r3, r3, #2
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d10b      	bne.n	80006d6 <dwt_initialise+0x152>
    {
        // XTAL trim value is set in OTP for DW1000 module and EVK/TREK boards but that might not be the case in a custom design
        if ((otp_xtaltrim_and_rev & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
 80006be:	8afb      	ldrh	r3, [r7, #22]
 80006c0:	f003 031f 	and.w	r3, r3, #31
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d101      	bne.n	80006cc <dwt_initialise+0x148>
        {
            otp_xtaltrim_and_rev = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
 80006c8:	2310      	movs	r3, #16
 80006ca:	82fb      	strh	r3, [r7, #22]
        }
        // Configure XTAL trim
        dwt_setxtaltrim((uint8)otp_xtaltrim_and_rev);
 80006cc:	8afb      	ldrh	r3, [r7, #22]
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	4618      	mov	r0, r3
 80006d2:	f000 fe33 	bl	800133c <dwt_setxtaltrim>
    }

    if(DWT_READ_OTP_PID & config)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	f003 0310 	and.w	r3, r3, #16
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d007      	beq.n	80006f0 <dwt_initialise+0x16c>
    {
        // Load Part from OTP
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
 80006e0:	4b4e      	ldr	r3, [pc, #312]	; (800081c <dwt_initialise+0x298>)
 80006e2:	681c      	ldr	r4, [r3, #0]
 80006e4:	2006      	movs	r0, #6
 80006e6:	f000 fc70 	bl	8000fca <_dwt_otpread>
 80006ea:	4603      	mov	r3, r0
 80006ec:	6023      	str	r3, [r4, #0]
 80006ee:	e003      	b.n	80006f8 <dwt_initialise+0x174>
    }
    else
    {
        pdw1000local->partID = 0;
 80006f0:	4b4a      	ldr	r3, [pc, #296]	; (800081c <dwt_initialise+0x298>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
    }

    if(DWT_READ_OTP_LID & config)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	f003 0320 	and.w	r3, r3, #32
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d007      	beq.n	8000712 <dwt_initialise+0x18e>
    {
        // Load Lot ID from OTP
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 8000702:	4b46      	ldr	r3, [pc, #280]	; (800081c <dwt_initialise+0x298>)
 8000704:	681c      	ldr	r4, [r3, #0]
 8000706:	2007      	movs	r0, #7
 8000708:	f000 fc5f 	bl	8000fca <_dwt_otpread>
 800070c:	4603      	mov	r3, r0
 800070e:	6063      	str	r3, [r4, #4]
 8000710:	e003      	b.n	800071a <dwt_initialise+0x196>
    }
    else
    {
        pdw1000local->lotID = 0;
 8000712:	4b42      	ldr	r3, [pc, #264]	; (800081c <dwt_initialise+0x298>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	2200      	movs	r2, #0
 8000718:	605a      	str	r2, [r3, #4]
    }

    if(DWT_READ_OTP_BAT & config)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000720:	2b00      	cmp	r3, #0
 8000722:	d008      	beq.n	8000736 <dwt_initialise+0x1b2>
    {
        // Load VBAT from OTP
        pdw1000local->vBatP = _dwt_otpread(VBAT_ADDRESS) & 0xff;
 8000724:	2008      	movs	r0, #8
 8000726:	f000 fc50 	bl	8000fca <_dwt_otpread>
 800072a:	4602      	mov	r2, r0
 800072c:	4b3b      	ldr	r3, [pc, #236]	; (800081c <dwt_initialise+0x298>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	b2d2      	uxtb	r2, r2
 8000732:	721a      	strb	r2, [r3, #8]
 8000734:	e003      	b.n	800073e <dwt_initialise+0x1ba>
    }
    else
    {
        pdw1000local->vBatP = 0;
 8000736:	4b39      	ldr	r3, [pc, #228]	; (800081c <dwt_initialise+0x298>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	2200      	movs	r2, #0
 800073c:	721a      	strb	r2, [r3, #8]
    }

    if(DWT_READ_OTP_TMP & config)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000744:	2b00      	cmp	r3, #0
 8000746:	d008      	beq.n	800075a <dwt_initialise+0x1d6>
    {
        // Load TEMP from OTP
        pdw1000local->tempP = _dwt_otpread(VTEMP_ADDRESS) & 0xff;
 8000748:	2009      	movs	r0, #9
 800074a:	f000 fc3e 	bl	8000fca <_dwt_otpread>
 800074e:	4602      	mov	r2, r0
 8000750:	4b32      	ldr	r3, [pc, #200]	; (800081c <dwt_initialise+0x298>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	b2d2      	uxtb	r2, r2
 8000756:	725a      	strb	r2, [r3, #9]
 8000758:	e003      	b.n	8000762 <dwt_initialise+0x1de>
    }
    else
    {
        pdw1000local->tempP = 0;
 800075a:	4b30      	ldr	r3, [pc, #192]	; (800081c <dwt_initialise+0x298>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	2200      	movs	r2, #0
 8000760:	725a      	strb	r2, [r3, #9]
    }

    // Load leading edge detect code (LDE/microcode)
    if(!(DWT_DW_WAKE_UP & config))
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	f003 0302 	and.w	r3, r3, #2
 8000768:	2b00      	cmp	r3, #0
 800076a:	d121      	bne.n	80007b0 <dwt_initialise+0x22c>
    {
        if(DWT_LOADUCODE & config)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	2b00      	cmp	r3, #0
 8000774:	d00b      	beq.n	800078e <dwt_initialise+0x20a>
        {
            _dwt_loaducodefromrom();
 8000776:	f000 fc75 	bl	8001064 <_dwt_loaducodefromrom>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up if loaded on initialisation
 800077a:	4b28      	ldr	r3, [pc, #160]	; (800081c <dwt_initialise+0x298>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	8ada      	ldrh	r2, [r3, #22]
 8000780:	4b26      	ldr	r3, [pc, #152]	; (800081c <dwt_initialise+0x298>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000788:	b292      	uxth	r2, r2
 800078a:	82da      	strh	r2, [r3, #22]
 800078c:	e01e      	b.n	80007cc <dwt_initialise+0x248>
        }
        else // Should disable the LDERUN bit enable if LDE has not been loaded
        {
            uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
 800078e:	2105      	movs	r1, #5
 8000790:	2036      	movs	r0, #54	; 0x36
 8000792:	f000 fb94 	bl	8000ebe <dwt_read16bitoffsetreg>
 8000796:	4603      	mov	r3, r0
 8000798:	81fb      	strh	r3, [r7, #14]
            rega &= 0xFDFF ; // Clear LDERUN bit
 800079a:	89fb      	ldrh	r3, [r7, #14]
 800079c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80007a0:	81fb      	strh	r3, [r7, #14]
            dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
 80007a2:	89fb      	ldrh	r3, [r7, #14]
 80007a4:	461a      	mov	r2, r3
 80007a6:	2105      	movs	r1, #5
 80007a8:	2036      	movs	r0, #54	; 0x36
 80007aa:	f000 fbcb 	bl	8000f44 <dwt_write16bitoffsetreg>
 80007ae:	e00d      	b.n	80007cc <dwt_initialise+0x248>
        }
    }
    else //if DWT_DW_WUP_NO_UCODE is set then assume that the UCODE was loaded from ROM (i.e. DWT_LOADUCODE was set on power up),
    {     //thus set AON_WCFG_ONW_LLDE, otherwise don't set the AON_WCFG_ONW_LLDE bit in the sleep_mode configuration
        if((DWT_DW_WUP_NO_UCODE & config) == 0)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	f003 0304 	and.w	r3, r3, #4
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d108      	bne.n	80007cc <dwt_initialise+0x248>
        {
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE;
 80007ba:	4b18      	ldr	r3, [pc, #96]	; (800081c <dwt_initialise+0x298>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	8ada      	ldrh	r2, [r3, #22]
 80007c0:	4b16      	ldr	r3, [pc, #88]	; (800081c <dwt_initialise+0x298>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80007c8:	b292      	uxth	r2, r2
 80007ca:	82da      	strh	r2, [r3, #22]
        }
    }

    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 80007cc:	2001      	movs	r0, #1
 80007ce:	f000 fc5d 	bl	800108c <_dwt_enableclocks>

    // The 3 bits in AON CFG1 register must be cleared to ensure proper operation of the DW1000 in DEEPSLEEP mode.
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
 80007d2:	2200      	movs	r2, #0
 80007d4:	210a      	movs	r1, #10
 80007d6:	202c      	movs	r0, #44	; 0x2c
 80007d8:	f000 fba1 	bl	8000f1e <dwt_write8bitoffsetreg>

    // Read system register / store local copy
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 80007dc:	4b0f      	ldr	r3, [pc, #60]	; (800081c <dwt_initialise+0x298>)
 80007de:	681c      	ldr	r4, [r3, #0]
 80007e0:	2100      	movs	r1, #0
 80007e2:	2004      	movs	r0, #4
 80007e4:	f000 fb44 	bl	8000e70 <dwt_read32bitoffsetreg>
 80007e8:	4603      	mov	r3, r0
 80007ea:	6123      	str	r3, [r4, #16]
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 80007ec:	4b0b      	ldr	r3, [pc, #44]	; (800081c <dwt_initialise+0x298>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	691b      	ldr	r3, [r3, #16]
 80007f2:	0c1b      	lsrs	r3, r3, #16
 80007f4:	b2da      	uxtb	r2, r3
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <dwt_initialise+0x298>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f002 0203 	and.w	r2, r2, #3
 80007fe:	b2d2      	uxtb	r2, r2
 8000800:	729a      	strb	r2, [r3, #10]

    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID) ;
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <dwt_initialise+0x298>)
 8000804:	681c      	ldr	r4, [r3, #0]
 8000806:	2100      	movs	r1, #0
 8000808:	2008      	movs	r0, #8
 800080a:	f000 fb31 	bl	8000e70 <dwt_read32bitoffsetreg>
 800080e:	4603      	mov	r3, r0
 8000810:	60e3      	str	r3, [r4, #12]

    return DWT_SUCCESS ;
 8000812:	2300      	movs	r3, #0

} // end dwt_initialise()
 8000814:	4618      	mov	r0, r3
 8000816:	371c      	adds	r7, #28
 8000818:	46bd      	mov	sp, r7
 800081a:	bd90      	pop	{r4, r7, pc}
 800081c:	20000000 	.word	0x20000000
 8000820:	deca0130 	.word	0xdeca0130

08000824 <dwt_readdevid>:
 * output parameters
 *
 * returns the read value which for DW1000 is 0xDECA0130
 */
uint32 dwt_readdevid(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
 8000828:	2100      	movs	r1, #0
 800082a:	2000      	movs	r0, #0
 800082c:	f000 fb20 	bl	8000e70 <dwt_read32bitoffsetreg>
 8000830:	4603      	mov	r3, r0
}
 8000832:	4618      	mov	r0, r3
 8000834:	bd80      	pop	{r7, pc}
	...

08000838 <dwt_configure>:
 * output parameters
 *
 * no return value
 */
void dwt_configure(dwt_config_t *config)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
    uint8 nsSfd_result  = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	75fb      	strb	r3, [r7, #23]
    uint8 useDWnsSFD = 0;
 8000844:	2300      	movs	r3, #0
 8000846:	75bb      	strb	r3, [r7, #22]
    uint8 chan = config->chan ;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	74fb      	strb	r3, [r7, #19]
    uint32 regval ;
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	795b      	ldrb	r3, [r3, #5]
 8000852:	461a      	mov	r2, r3
 8000854:	4b5d      	ldr	r3, [pc, #372]	; (80009cc <dwt_configure+0x194>)
 8000856:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800085a:	82bb      	strh	r3, [r7, #20]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	785b      	ldrb	r3, [r3, #1]
 8000860:	3b01      	subs	r3, #1
 8000862:	74bb      	strb	r3, [r7, #18]
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 8000864:	7cfb      	ldrb	r3, [r7, #19]
 8000866:	2b04      	cmp	r3, #4
 8000868:	d002      	beq.n	8000870 <dwt_configure+0x38>
 800086a:	7cfb      	ldrb	r3, [r7, #19]
 800086c:	2b07      	cmp	r3, #7
 800086e:	d101      	bne.n	8000874 <dwt_configure+0x3c>
 8000870:	2301      	movs	r3, #1
 8000872:	e000      	b.n	8000876 <dwt_configure+0x3e>
 8000874:	2300      	movs	r3, #0
 8000876:	747b      	strb	r3, [r7, #17]

#ifdef DWT_API_ERROR_CHECK
    assert(config->dataRate <= DWT_BR_6M8);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	79db      	ldrb	r3, [r3, #7]
 800087c:	2b02      	cmp	r3, #2
 800087e:	d906      	bls.n	800088e <dwt_configure+0x56>
 8000880:	4b53      	ldr	r3, [pc, #332]	; (80009d0 <dwt_configure+0x198>)
 8000882:	4a54      	ldr	r2, [pc, #336]	; (80009d4 <dwt_configure+0x19c>)
 8000884:	f240 219f 	movw	r1, #671	; 0x29f
 8000888:	4853      	ldr	r0, [pc, #332]	; (80009d8 <dwt_configure+0x1a0>)
 800088a:	f004 fb3f 	bl	8004f0c <__assert_func>
    assert(config->rxPAC <= DWT_PAC64);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	78db      	ldrb	r3, [r3, #3]
 8000892:	2b03      	cmp	r3, #3
 8000894:	d906      	bls.n	80008a4 <dwt_configure+0x6c>
 8000896:	4b51      	ldr	r3, [pc, #324]	; (80009dc <dwt_configure+0x1a4>)
 8000898:	4a4e      	ldr	r2, [pc, #312]	; (80009d4 <dwt_configure+0x19c>)
 800089a:	f44f 7128 	mov.w	r1, #672	; 0x2a0
 800089e:	484e      	ldr	r0, [pc, #312]	; (80009d8 <dwt_configure+0x1a0>)
 80008a0:	f004 fb34 	bl	8004f0c <__assert_func>
    assert((chan >= 1) && (chan <= 7) && (chan != 6));
 80008a4:	7cfb      	ldrb	r3, [r7, #19]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d005      	beq.n	80008b6 <dwt_configure+0x7e>
 80008aa:	7cfb      	ldrb	r3, [r7, #19]
 80008ac:	2b07      	cmp	r3, #7
 80008ae:	d802      	bhi.n	80008b6 <dwt_configure+0x7e>
 80008b0:	7cfb      	ldrb	r3, [r7, #19]
 80008b2:	2b06      	cmp	r3, #6
 80008b4:	d106      	bne.n	80008c4 <dwt_configure+0x8c>
 80008b6:	4b4a      	ldr	r3, [pc, #296]	; (80009e0 <dwt_configure+0x1a8>)
 80008b8:	4a46      	ldr	r2, [pc, #280]	; (80009d4 <dwt_configure+0x19c>)
 80008ba:	f240 21a1 	movw	r1, #673	; 0x2a1
 80008be:	4846      	ldr	r0, [pc, #280]	; (80009d8 <dwt_configure+0x1a0>)
 80008c0:	f004 fb24 	bl	8004f0c <__assert_func>
    assert(((config->prf == DWT_PRF_64M) && (config->txCode >= 9) && (config->txCode <= 24))
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	785b      	ldrb	r3, [r3, #1]
 80008c8:	2b02      	cmp	r3, #2
 80008ca:	d107      	bne.n	80008dc <dwt_configure+0xa4>
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	791b      	ldrb	r3, [r3, #4]
 80008d0:	2b08      	cmp	r3, #8
 80008d2:	d903      	bls.n	80008dc <dwt_configure+0xa4>
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	791b      	ldrb	r3, [r3, #4]
 80008d8:	2b18      	cmp	r3, #24
 80008da:	d912      	bls.n	8000902 <dwt_configure+0xca>
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	785b      	ldrb	r3, [r3, #1]
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d107      	bne.n	80008f4 <dwt_configure+0xbc>
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	791b      	ldrb	r3, [r3, #4]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d003      	beq.n	80008f4 <dwt_configure+0xbc>
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	791b      	ldrb	r3, [r3, #4]
 80008f0:	2b08      	cmp	r3, #8
 80008f2:	d906      	bls.n	8000902 <dwt_configure+0xca>
 80008f4:	4b3b      	ldr	r3, [pc, #236]	; (80009e4 <dwt_configure+0x1ac>)
 80008f6:	4a37      	ldr	r2, [pc, #220]	; (80009d4 <dwt_configure+0x19c>)
 80008f8:	f240 21a2 	movw	r1, #674	; 0x2a2
 80008fc:	4836      	ldr	r0, [pc, #216]	; (80009d8 <dwt_configure+0x1a0>)
 80008fe:	f004 fb05 	bl	8004f0c <__assert_func>
           || ((config->prf == DWT_PRF_16M) && (config->txCode >= 1) && (config->txCode <= 8)));
    assert(((config->prf == DWT_PRF_64M) && (config->rxCode >= 9) && (config->rxCode <= 24))
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	785b      	ldrb	r3, [r3, #1]
 8000906:	2b02      	cmp	r3, #2
 8000908:	d107      	bne.n	800091a <dwt_configure+0xe2>
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	795b      	ldrb	r3, [r3, #5]
 800090e:	2b08      	cmp	r3, #8
 8000910:	d903      	bls.n	800091a <dwt_configure+0xe2>
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	795b      	ldrb	r3, [r3, #5]
 8000916:	2b18      	cmp	r3, #24
 8000918:	d912      	bls.n	8000940 <dwt_configure+0x108>
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	785b      	ldrb	r3, [r3, #1]
 800091e:	2b01      	cmp	r3, #1
 8000920:	d107      	bne.n	8000932 <dwt_configure+0xfa>
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	795b      	ldrb	r3, [r3, #5]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d003      	beq.n	8000932 <dwt_configure+0xfa>
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	795b      	ldrb	r3, [r3, #5]
 800092e:	2b08      	cmp	r3, #8
 8000930:	d906      	bls.n	8000940 <dwt_configure+0x108>
 8000932:	4b2d      	ldr	r3, [pc, #180]	; (80009e8 <dwt_configure+0x1b0>)
 8000934:	4a27      	ldr	r2, [pc, #156]	; (80009d4 <dwt_configure+0x19c>)
 8000936:	f44f 7129 	mov.w	r1, #676	; 0x2a4
 800093a:	4827      	ldr	r0, [pc, #156]	; (80009d8 <dwt_configure+0x1a0>)
 800093c:	f004 fae6 	bl	8004f0c <__assert_func>
           || ((config->prf == DWT_PRF_16M) && (config->rxCode >= 1) && (config->rxCode <= 8)));
    assert((config->txPreambLength == DWT_PLEN_64) || (config->txPreambLength == DWT_PLEN_128) || (config->txPreambLength == DWT_PLEN_256)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	789b      	ldrb	r3, [r3, #2]
 8000944:	2b04      	cmp	r3, #4
 8000946:	d022      	beq.n	800098e <dwt_configure+0x156>
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	789b      	ldrb	r3, [r3, #2]
 800094c:	2b14      	cmp	r3, #20
 800094e:	d01e      	beq.n	800098e <dwt_configure+0x156>
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	789b      	ldrb	r3, [r3, #2]
 8000954:	2b24      	cmp	r3, #36	; 0x24
 8000956:	d01a      	beq.n	800098e <dwt_configure+0x156>
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	789b      	ldrb	r3, [r3, #2]
 800095c:	2b34      	cmp	r3, #52	; 0x34
 800095e:	d016      	beq.n	800098e <dwt_configure+0x156>
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	789b      	ldrb	r3, [r3, #2]
 8000964:	2b08      	cmp	r3, #8
 8000966:	d012      	beq.n	800098e <dwt_configure+0x156>
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	789b      	ldrb	r3, [r3, #2]
 800096c:	2b18      	cmp	r3, #24
 800096e:	d00e      	beq.n	800098e <dwt_configure+0x156>
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	789b      	ldrb	r3, [r3, #2]
 8000974:	2b28      	cmp	r3, #40	; 0x28
 8000976:	d00a      	beq.n	800098e <dwt_configure+0x156>
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	789b      	ldrb	r3, [r3, #2]
 800097c:	2b0c      	cmp	r3, #12
 800097e:	d006      	beq.n	800098e <dwt_configure+0x156>
 8000980:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <dwt_configure+0x1b4>)
 8000982:	4a14      	ldr	r2, [pc, #80]	; (80009d4 <dwt_configure+0x19c>)
 8000984:	f240 21a6 	movw	r1, #678	; 0x2a6
 8000988:	4813      	ldr	r0, [pc, #76]	; (80009d8 <dwt_configure+0x1a0>)
 800098a:	f004 fabf 	bl	8004f0c <__assert_func>
           || (config->txPreambLength == DWT_PLEN_512) || (config->txPreambLength == DWT_PLEN_1024) || (config->txPreambLength == DWT_PLEN_1536)
           || (config->txPreambLength == DWT_PLEN_2048) || (config->txPreambLength == DWT_PLEN_4096));
    assert((config->phrMode == DWT_PHRMODE_STD) || (config->phrMode == DWT_PHRMODE_EXT));
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	7a1b      	ldrb	r3, [r3, #8]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d00a      	beq.n	80009ac <dwt_configure+0x174>
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	7a1b      	ldrb	r3, [r3, #8]
 800099a:	2b03      	cmp	r3, #3
 800099c:	d006      	beq.n	80009ac <dwt_configure+0x174>
 800099e:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <dwt_configure+0x1b8>)
 80009a0:	4a0c      	ldr	r2, [pc, #48]	; (80009d4 <dwt_configure+0x19c>)
 80009a2:	f240 21a9 	movw	r1, #681	; 0x2a9
 80009a6:	480c      	ldr	r0, [pc, #48]	; (80009d8 <dwt_configure+0x1a0>)
 80009a8:	f004 fab0 	bl	8004f0c <__assert_func>
#endif

    // For 110 kbps we need a special setup
    if(DWT_BR_110K == config->dataRate)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	79db      	ldrb	r3, [r3, #7]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d121      	bne.n	80009f8 <dwt_configure+0x1c0>
    {
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 80009b4:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <dwt_configure+0x1bc>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	691a      	ldr	r2, [r3, #16]
 80009ba:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <dwt_configure+0x1bc>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80009c2:	611a      	str	r2, [r3, #16]
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
 80009c4:	8abb      	ldrh	r3, [r7, #20]
 80009c6:	08db      	lsrs	r3, r3, #3
 80009c8:	82bb      	strh	r3, [r7, #20]
 80009ca:	e01d      	b.n	8000a08 <dwt_configure+0x1d0>
 80009cc:	080065e0 	.word	0x080065e0
 80009d0:	08006074 	.word	0x08006074
 80009d4:	08006528 	.word	0x08006528
 80009d8:	08005fc8 	.word	0x08005fc8
 80009dc:	08006094 	.word	0x08006094
 80009e0:	080060b0 	.word	0x080060b0
 80009e4:	080060dc 	.word	0x080060dc
 80009e8:	08006184 	.word	0x08006184
 80009ec:	0800622c 	.word	0x0800622c
 80009f0:	0800638c 	.word	0x0800638c
 80009f4:	20000000 	.word	0x20000000
    }
    else
    {
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
 80009f8:	4b90      	ldr	r3, [pc, #576]	; (8000c3c <dwt_configure+0x404>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	691a      	ldr	r2, [r3, #16]
 80009fe:	4b8f      	ldr	r3, [pc, #572]	; (8000c3c <dwt_configure+0x404>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8000a06:	611a      	str	r2, [r3, #16]
    }

    pdw1000local->longFrames = config->phrMode ;
 8000a08:	4b8c      	ldr	r3, [pc, #560]	; (8000c3c <dwt_configure+0x404>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	687a      	ldr	r2, [r7, #4]
 8000a0e:	7a12      	ldrb	r2, [r2, #8]
 8000a10:	729a      	strb	r2, [r3, #10]

    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
 8000a12:	4b8a      	ldr	r3, [pc, #552]	; (8000c3c <dwt_configure+0x404>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	691a      	ldr	r2, [r3, #16]
 8000a18:	4b88      	ldr	r3, [pc, #544]	; (8000c3c <dwt_configure+0x404>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000a20:	611a      	str	r2, [r3, #16]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 8000a22:	4b86      	ldr	r3, [pc, #536]	; (8000c3c <dwt_configure+0x404>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	6919      	ldr	r1, [r3, #16]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	7a1b      	ldrb	r3, [r3, #8]
 8000a2c:	041b      	lsls	r3, r3, #16
 8000a2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000a32:	4b82      	ldr	r3, [pc, #520]	; (8000c3c <dwt_configure+0x404>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	430a      	orrs	r2, r1
 8000a38:	611a      	str	r2, [r3, #16]

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 8000a3a:	4b80      	ldr	r3, [pc, #512]	; (8000c3c <dwt_configure+0x404>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	691b      	ldr	r3, [r3, #16]
 8000a40:	461a      	mov	r2, r3
 8000a42:	2100      	movs	r1, #0
 8000a44:	2004      	movs	r0, #4
 8000a46:	f000 fa99 	bl	8000f7c <dwt_write32bitoffsetreg>
    // Set the lde_replicaCoeff
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16) ;
 8000a4a:	8abb      	ldrh	r3, [r7, #20]
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	f642 0104 	movw	r1, #10244	; 0x2804
 8000a52:	202e      	movs	r0, #46	; 0x2e
 8000a54:	f000 fa76 	bl	8000f44 <dwt_write16bitoffsetreg>

    _dwt_configlde(prfIndex);
 8000a58:	7cbb      	ldrb	r3, [r7, #18]
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f000 fae2 	bl	8001024 <_dwt_configlde>

    // Configure PLL2/RF PLL block CFG/TUNE (for a given channel)
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
 8000a60:	7cfb      	ldrb	r3, [r7, #19]
 8000a62:	4a77      	ldr	r2, [pc, #476]	; (8000c40 <dwt_configure+0x408>)
 8000a64:	5cd3      	ldrb	r3, [r2, r3]
 8000a66:	461a      	mov	r2, r3
 8000a68:	4b76      	ldr	r3, [pc, #472]	; (8000c44 <dwt_configure+0x40c>)
 8000a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a6e:	461a      	mov	r2, r3
 8000a70:	2107      	movs	r1, #7
 8000a72:	202b      	movs	r0, #43	; 0x2b
 8000a74:	f000 fa82 	bl	8000f7c <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
 8000a78:	7cfb      	ldrb	r3, [r7, #19]
 8000a7a:	4a71      	ldr	r2, [pc, #452]	; (8000c40 <dwt_configure+0x408>)
 8000a7c:	5cd3      	ldrb	r3, [r2, r3]
 8000a7e:	461a      	mov	r2, r3
 8000a80:	4b71      	ldr	r3, [pc, #452]	; (8000c48 <dwt_configure+0x410>)
 8000a82:	5c9b      	ldrb	r3, [r3, r2]
 8000a84:	461a      	mov	r2, r3
 8000a86:	210b      	movs	r1, #11
 8000a88:	202b      	movs	r0, #43	; 0x2b
 8000a8a:	f000 fa48 	bl	8000f1e <dwt_write8bitoffsetreg>

    // Configure RF RX blocks (for specified channel/bandwidth)
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
 8000a8e:	7c7b      	ldrb	r3, [r7, #17]
 8000a90:	4a6e      	ldr	r2, [pc, #440]	; (8000c4c <dwt_configure+0x414>)
 8000a92:	5cd3      	ldrb	r3, [r2, r3]
 8000a94:	461a      	mov	r2, r3
 8000a96:	210b      	movs	r1, #11
 8000a98:	2028      	movs	r0, #40	; 0x28
 8000a9a:	f000 fa40 	bl	8000f1e <dwt_write8bitoffsetreg>

    // Configure RF TX blocks (for specified channel and PRF)
    // Configure RF TX control
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
 8000a9e:	7cfb      	ldrb	r3, [r7, #19]
 8000aa0:	4a67      	ldr	r2, [pc, #412]	; (8000c40 <dwt_configure+0x408>)
 8000aa2:	5cd3      	ldrb	r3, [r2, r3]
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	4b6a      	ldr	r3, [pc, #424]	; (8000c50 <dwt_configure+0x418>)
 8000aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000aac:	461a      	mov	r2, r3
 8000aae:	210c      	movs	r1, #12
 8000ab0:	2028      	movs	r0, #40	; 0x28
 8000ab2:	f000 fa63 	bl	8000f7c <dwt_write32bitoffsetreg>

    // Configure the baseband parameters (for specified PRF, bit rate, PAC, and SFD settings)
    // DTUNE0
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	79db      	ldrb	r3, [r3, #7]
 8000aba:	4618      	mov	r0, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	799b      	ldrb	r3, [r3, #6]
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4a64      	ldr	r2, [pc, #400]	; (8000c54 <dwt_configure+0x41c>)
 8000ac4:	0043      	lsls	r3, r0, #1
 8000ac6:	440b      	add	r3, r1
 8000ac8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000acc:	461a      	mov	r2, r3
 8000ace:	2102      	movs	r1, #2
 8000ad0:	2027      	movs	r0, #39	; 0x27
 8000ad2:	f000 fa37 	bl	8000f44 <dwt_write16bitoffsetreg>

    // DTUNE1
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
 8000ad6:	7cbb      	ldrb	r3, [r7, #18]
 8000ad8:	4a5f      	ldr	r2, [pc, #380]	; (8000c58 <dwt_configure+0x420>)
 8000ada:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ade:	461a      	mov	r2, r3
 8000ae0:	2104      	movs	r1, #4
 8000ae2:	2027      	movs	r0, #39	; 0x27
 8000ae4:	f000 fa2e 	bl	8000f44 <dwt_write16bitoffsetreg>

    if(config->dataRate == DWT_BR_110K)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	79db      	ldrb	r3, [r3, #7]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d105      	bne.n	8000afc <dwt_configure+0x2c4>
    {
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K);
 8000af0:	2264      	movs	r2, #100	; 0x64
 8000af2:	2106      	movs	r1, #6
 8000af4:	2027      	movs	r0, #39	; 0x27
 8000af6:	f000 fa25 	bl	8000f44 <dwt_write16bitoffsetreg>
 8000afa:	e018      	b.n	8000b2e <dwt_configure+0x2f6>
    }
    else
    {
        if(config->txPreambLength == DWT_PLEN_64)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	789b      	ldrb	r3, [r3, #2]
 8000b00:	2b04      	cmp	r3, #4
 8000b02:	d10a      	bne.n	8000b1a <dwt_configure+0x2e2>
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64);
 8000b04:	2210      	movs	r2, #16
 8000b06:	2106      	movs	r1, #6
 8000b08:	2027      	movs	r0, #39	; 0x27
 8000b0a:	f000 fa1b 	bl	8000f44 <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
 8000b0e:	2210      	movs	r2, #16
 8000b10:	2126      	movs	r1, #38	; 0x26
 8000b12:	2027      	movs	r0, #39	; 0x27
 8000b14:	f000 fa03 	bl	8000f1e <dwt_write8bitoffsetreg>
 8000b18:	e009      	b.n	8000b2e <dwt_configure+0x2f6>
        }
        else
        {
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8);
 8000b1a:	2220      	movs	r2, #32
 8000b1c:	2106      	movs	r1, #6
 8000b1e:	2027      	movs	r0, #39	; 0x27
 8000b20:	f000 fa10 	bl	8000f44 <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
 8000b24:	2228      	movs	r2, #40	; 0x28
 8000b26:	2126      	movs	r1, #38	; 0x26
 8000b28:	2027      	movs	r0, #39	; 0x27
 8000b2a:	f000 f9f8 	bl	8000f1e <dwt_write8bitoffsetreg>
        }
    }

    // DTUNE2
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
 8000b2e:	7cbb      	ldrb	r3, [r7, #18]
 8000b30:	687a      	ldr	r2, [r7, #4]
 8000b32:	78d2      	ldrb	r2, [r2, #3]
 8000b34:	4611      	mov	r1, r2
 8000b36:	4a49      	ldr	r2, [pc, #292]	; (8000c5c <dwt_configure+0x424>)
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	440b      	add	r3, r1
 8000b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b40:	461a      	mov	r2, r3
 8000b42:	2108      	movs	r1, #8
 8000b44:	2027      	movs	r0, #39	; 0x27
 8000b46:	f000 fa19 	bl	8000f7c <dwt_write32bitoffsetreg>

    // DTUNE3 (SFD timeout)
    // Don't allow 0 - SFD timeout will always be enabled
    if(config->sfdTO == 0)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	895b      	ldrh	r3, [r3, #10]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d103      	bne.n	8000b5a <dwt_configure+0x322>
    {
        config->sfdTO = DWT_SFDTOC_DEF;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	f241 0241 	movw	r2, #4161	; 0x1041
 8000b58:	815a      	strh	r2, [r3, #10]
    }
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	895b      	ldrh	r3, [r3, #10]
 8000b5e:	461a      	mov	r2, r3
 8000b60:	2120      	movs	r1, #32
 8000b62:	2027      	movs	r0, #39	; 0x27
 8000b64:	f000 f9ee 	bl	8000f44 <dwt_write16bitoffsetreg>

    // Configure AGC parameters
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
 8000b68:	4b3d      	ldr	r3, [pc, #244]	; (8000c60 <dwt_configure+0x428>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	210c      	movs	r1, #12
 8000b70:	2023      	movs	r0, #35	; 0x23
 8000b72:	f000 fa03 	bl	8000f7c <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
 8000b76:	7cbb      	ldrb	r3, [r7, #18]
 8000b78:	4a39      	ldr	r2, [pc, #228]	; (8000c60 <dwt_configure+0x428>)
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	4413      	add	r3, r2
 8000b7e:	889b      	ldrh	r3, [r3, #4]
 8000b80:	461a      	mov	r2, r3
 8000b82:	2104      	movs	r1, #4
 8000b84:	2023      	movs	r0, #35	; 0x23
 8000b86:	f000 f9dd 	bl	8000f44 <dwt_write16bitoffsetreg>

    // Set (non-standard) user SFD for improved performance,
    if(config->nsSFD)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	799b      	ldrb	r3, [r3, #6]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d00d      	beq.n	8000bae <dwt_configure+0x376>
    {
        // Write non standard (DW) SFD length
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	79db      	ldrb	r3, [r3, #7]
 8000b96:	461a      	mov	r2, r3
 8000b98:	4b32      	ldr	r3, [pc, #200]	; (8000c64 <dwt_configure+0x42c>)
 8000b9a:	5c9b      	ldrb	r3, [r3, r2]
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	2021      	movs	r0, #33	; 0x21
 8000ba2:	f000 f9bc 	bl	8000f1e <dwt_write8bitoffsetreg>
        nsSfd_result = 3 ;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	75fb      	strb	r3, [r7, #23]
        useDWnsSFD = 1 ;
 8000baa:	2301      	movs	r3, #1
 8000bac:	75bb      	strb	r3, [r7, #22]
    }
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8000bae:	7cfb      	ldrb	r3, [r7, #19]
 8000bb0:	f003 020f 	and.w	r2, r3, #15
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 8000bb4:	7cfb      	ldrb	r3, [r7, #19]
 8000bb6:	011b      	lsls	r3, r3, #4
 8000bb8:	b2db      	uxtb	r3, r3
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8000bba:	431a      	orrs	r2, r3
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	785b      	ldrb	r3, [r3, #1]
 8000bc0:	049b      	lsls	r3, r3, #18
 8000bc2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 8000bc6:	431a      	orrs	r2, r3
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 8000bc8:	7dfb      	ldrb	r3, [r7, #23]
 8000bca:	051b      	lsls	r3, r3, #20
 8000bcc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 8000bd0:	431a      	orrs	r2, r3
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 8000bd2:	7dbb      	ldrb	r3, [r7, #22]
 8000bd4:	045b      	lsls	r3, r3, #17
 8000bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 8000bda:	431a      	orrs	r2, r3
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	791b      	ldrb	r3, [r3, #4]
 8000be0:	059b      	lsls	r3, r3, #22
 8000be2:	f003 63f8 	and.w	r3, r3, #130023424	; 0x7c00000
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 8000be6:	431a      	orrs	r2, r3
              (CHAN_CTRL_RX_PCOD_MASK & ((uint32)config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	795b      	ldrb	r3, [r3, #5]
 8000bec:	06db      	lsls	r3, r3, #27
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	60fb      	str	r3, [r7, #12]

    dwt_write32bitreg(CHAN_CTRL_ID,regval) ;
 8000bf2:	68fa      	ldr	r2, [r7, #12]
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	201f      	movs	r0, #31
 8000bf8:	f000 f9c0 	bl	8000f7c <dwt_write32bitoffsetreg>

    // Set up TX Preamble Size, PRF and Data Rate
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	789a      	ldrb	r2, [r3, #2]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	785b      	ldrb	r3, [r3, #1]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	0419      	lsls	r1, r3, #16
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	79db      	ldrb	r3, [r3, #7]
 8000c0e:	035a      	lsls	r2, r3, #13
 8000c10:	4b0a      	ldr	r3, [pc, #40]	; (8000c3c <dwt_configure+0x404>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	430a      	orrs	r2, r1
 8000c16:	60da      	str	r2, [r3, #12]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
 8000c18:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <dwt_configure+0x404>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	68db      	ldr	r3, [r3, #12]
 8000c1e:	461a      	mov	r2, r3
 8000c20:	2100      	movs	r1, #0
 8000c22:	2008      	movs	r0, #8
 8000c24:	f000 f9aa 	bl	8000f7c <dwt_write32bitoffsetreg>

    // The SFD transmit pattern is initialised by the DW1000 upon a user TX request, but (due to an IC issue) it is not done for an auto-ACK TX. The
    // SYS_CTRL write below works around this issue, by simultaneously initiating and aborting a transmission, which correctly initialises the SFD
    // after its configuration or reconfiguration.
    // This issue is not documented at the time of writing this code. It should be in next release of DW1000 User Manual (v2.09, from July 2016).
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
 8000c28:	2242      	movs	r2, #66	; 0x42
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	200d      	movs	r0, #13
 8000c2e:	f000 f976 	bl	8000f1e <dwt_write8bitoffsetreg>
} // end dwt_configure()
 8000c32:	bf00      	nop
 8000c34:	3718      	adds	r7, #24
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000000 	.word	0x20000000
 8000c40:	08006560 	.word	0x08006560
 8000c44:	08006580 	.word	0x08006580
 8000c48:	08006598 	.word	0x08006598
 8000c4c:	080065a0 	.word	0x080065a0
 8000c50:	08006568 	.word	0x08006568
 8000c54:	080065b0 	.word	0x080065b0
 8000c58:	080065bc 	.word	0x080065bc
 8000c5c:	080065c0 	.word	0x080065c0
 8000c60:	080065a4 	.word	0x080065a4
 8000c64:	080065ac 	.word	0x080065ac

08000c68 <dwt_readrxdata>:
 * output parameters
 *
 * no return value
 */
void dwt_readrxdata(uint8 *buffer, uint16 length, uint16 rxBufferOffset)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	460b      	mov	r3, r1
 8000c72:	807b      	strh	r3, [r7, #2]
 8000c74:	4613      	mov	r3, r2
 8000c76:	803b      	strh	r3, [r7, #0]
    dwt_readfromdevice(RX_BUFFER_ID,rxBufferOffset,length,buffer) ;
 8000c78:	887a      	ldrh	r2, [r7, #2]
 8000c7a:	8839      	ldrh	r1, [r7, #0]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2011      	movs	r0, #17
 8000c80:	f000 f87e 	bl	8000d80 <dwt_readfromdevice>
}
 8000c84:	bf00      	nop
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <dwt_writetodevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    const uint8   *buffer
)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60ba      	str	r2, [r7, #8]
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	4603      	mov	r3, r0
 8000c98:	81fb      	strh	r3, [r7, #14]
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
 8000ca2:	89fb      	ldrh	r3, [r7, #14]
 8000ca4:	2b3f      	cmp	r3, #63	; 0x3f
 8000ca6:	d906      	bls.n	8000cb6 <dwt_writetodevice+0x2a>
 8000ca8:	4b31      	ldr	r3, [pc, #196]	; (8000d70 <dwt_writetodevice+0xe4>)
 8000caa:	4a32      	ldr	r2, [pc, #200]	; (8000d74 <dwt_writetodevice+0xe8>)
 8000cac:	f240 4197 	movw	r1, #1175	; 0x497
 8000cb0:	4831      	ldr	r0, [pc, #196]	; (8000d78 <dwt_writetodevice+0xec>)
 8000cb2:	f004 f92b 	bl	8004f0c <__assert_func>
#endif

    // Write message header selecting WRITE operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8000cb6:	89bb      	ldrh	r3, [r7, #12]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d10c      	bne.n	8000cd6 <dwt_writetodevice+0x4a>
    {
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8000cbc:	89fb      	ldrh	r3, [r7, #14]
 8000cbe:	b2da      	uxtb	r2, r3
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	1c59      	adds	r1, r3, #1
 8000cc4:	6179      	str	r1, [r7, #20]
 8000cc6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000cca:	b2d2      	uxtb	r2, r2
 8000ccc:	3318      	adds	r3, #24
 8000cce:	443b      	add	r3, r7
 8000cd0:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000cd4:	e040      	b.n	8000d58 <dwt_writetodevice+0xcc>
    }
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
 8000cd6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	db05      	blt.n	8000cea <dwt_writetodevice+0x5e>
 8000cde:	89ba      	ldrh	r2, [r7, #12]
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ce8:	d306      	bcc.n	8000cf8 <dwt_writetodevice+0x6c>
 8000cea:	4b24      	ldr	r3, [pc, #144]	; (8000d7c <dwt_writetodevice+0xf0>)
 8000cec:	4a21      	ldr	r2, [pc, #132]	; (8000d74 <dwt_writetodevice+0xe8>)
 8000cee:	f240 41a2 	movw	r1, #1186	; 0x4a2
 8000cf2:	4821      	ldr	r0, [pc, #132]	; (8000d78 <dwt_writetodevice+0xec>)
 8000cf4:	f004 f90a 	bl	8004f0c <__assert_func>
#endif
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8000cf8:	89fb      	ldrh	r3, [r7, #14]
 8000cfa:	b2da      	uxtb	r2, r3
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	1c59      	adds	r1, r3, #1
 8000d00:	6179      	str	r1, [r7, #20]
 8000d02:	f062 023f 	orn	r2, r2, #63	; 0x3f
 8000d06:	b2d2      	uxtb	r2, r2
 8000d08:	3318      	adds	r3, #24
 8000d0a:	443b      	add	r3, r7
 8000d0c:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8000d10:	89bb      	ldrh	r3, [r7, #12]
 8000d12:	2b7f      	cmp	r3, #127	; 0x7f
 8000d14:	d809      	bhi.n	8000d2a <dwt_writetodevice+0x9e>
        {
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	1c5a      	adds	r2, r3, #1
 8000d1a:	617a      	str	r2, [r7, #20]
 8000d1c:	89ba      	ldrh	r2, [r7, #12]
 8000d1e:	b2d2      	uxtb	r2, r2
 8000d20:	3318      	adds	r3, #24
 8000d22:	443b      	add	r3, r7
 8000d24:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000d28:	e016      	b.n	8000d58 <dwt_writetodevice+0xcc>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8000d2a:	89bb      	ldrh	r3, [r7, #12]
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	1c59      	adds	r1, r3, #1
 8000d32:	6179      	str	r1, [r7, #20]
 8000d34:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000d38:	b2d2      	uxtb	r2, r2
 8000d3a:	3318      	adds	r3, #24
 8000d3c:	443b      	add	r3, r7
 8000d3e:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8000d42:	89bb      	ldrh	r3, [r7, #12]
 8000d44:	09db      	lsrs	r3, r3, #7
 8000d46:	b299      	uxth	r1, r3
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	1c5a      	adds	r2, r3, #1
 8000d4c:	617a      	str	r2, [r7, #20]
 8000d4e:	b2ca      	uxtb	r2, r1
 8000d50:	3318      	adds	r3, #24
 8000d52:	443b      	add	r3, r7
 8000d54:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Write it to the SPI
    writetospi(cnt,header,length,buffer);
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	b298      	uxth	r0, r3
 8000d5c:	f107 0110 	add.w	r1, r7, #16
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	68ba      	ldr	r2, [r7, #8]
 8000d64:	f000 fb2c 	bl	80013c0 <writetospi>
} // end dwt_writetodevice()
 8000d68:	bf00      	nop
 8000d6a:	3718      	adds	r7, #24
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	08006490 	.word	0x08006490
 8000d74:	08006538 	.word	0x08006538
 8000d78:	08005fc8 	.word	0x08005fc8
 8000d7c:	080064a8 	.word	0x080064a8

08000d80 <dwt_readfromdevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    uint8         *buffer
)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60ba      	str	r2, [r7, #8]
 8000d88:	607b      	str	r3, [r7, #4]
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	81fb      	strh	r3, [r7, #14]
 8000d8e:	460b      	mov	r3, r1
 8000d90:	81bb      	strh	r3, [r7, #12]
    uint8 header[3] ; // Buffer to compose header in
    int   cnt = 0; // Counter for length of header
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
 8000d96:	89fb      	ldrh	r3, [r7, #14]
 8000d98:	2b3f      	cmp	r3, #63	; 0x3f
 8000d9a:	d906      	bls.n	8000daa <dwt_readfromdevice+0x2a>
 8000d9c:	4b30      	ldr	r3, [pc, #192]	; (8000e60 <dwt_readfromdevice+0xe0>)
 8000d9e:	4a31      	ldr	r2, [pc, #196]	; (8000e64 <dwt_readfromdevice+0xe4>)
 8000da0:	f240 41d7 	movw	r1, #1239	; 0x4d7
 8000da4:	4830      	ldr	r0, [pc, #192]	; (8000e68 <dwt_readfromdevice+0xe8>)
 8000da6:	f004 f8b1 	bl	8004f0c <__assert_func>
#endif

    // Write message header selecting READ operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8000daa:	89bb      	ldrh	r3, [r7, #12]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d109      	bne.n	8000dc4 <dwt_readfromdevice+0x44>
    {
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	1c5a      	adds	r2, r3, #1
 8000db4:	617a      	str	r2, [r7, #20]
 8000db6:	89fa      	ldrh	r2, [r7, #14]
 8000db8:	b2d2      	uxtb	r2, r2
 8000dba:	3318      	adds	r3, #24
 8000dbc:	443b      	add	r3, r7
 8000dbe:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000dc2:	e040      	b.n	8000e46 <dwt_readfromdevice+0xc6>
    }
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
 8000dc4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	db05      	blt.n	8000dd8 <dwt_readfromdevice+0x58>
 8000dcc:	89ba      	ldrh	r2, [r7, #12]
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000dd6:	d306      	bcc.n	8000de6 <dwt_readfromdevice+0x66>
 8000dd8:	4b24      	ldr	r3, [pc, #144]	; (8000e6c <dwt_readfromdevice+0xec>)
 8000dda:	4a22      	ldr	r2, [pc, #136]	; (8000e64 <dwt_readfromdevice+0xe4>)
 8000ddc:	f240 41e2 	movw	r1, #1250	; 0x4e2
 8000de0:	4821      	ldr	r0, [pc, #132]	; (8000e68 <dwt_readfromdevice+0xe8>)
 8000de2:	f004 f893 	bl	8004f0c <__assert_func>
#endif
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8000de6:	89fb      	ldrh	r3, [r7, #14]
 8000de8:	b2da      	uxtb	r2, r3
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	1c59      	adds	r1, r3, #1
 8000dee:	6179      	str	r1, [r7, #20]
 8000df0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000df4:	b2d2      	uxtb	r2, r2
 8000df6:	3318      	adds	r3, #24
 8000df8:	443b      	add	r3, r7
 8000dfa:	f803 2c08 	strb.w	r2, [r3, #-8]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8000dfe:	89bb      	ldrh	r3, [r7, #12]
 8000e00:	2b7f      	cmp	r3, #127	; 0x7f
 8000e02:	d809      	bhi.n	8000e18 <dwt_readfromdevice+0x98>
        {
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	1c5a      	adds	r2, r3, #1
 8000e08:	617a      	str	r2, [r7, #20]
 8000e0a:	89ba      	ldrh	r2, [r7, #12]
 8000e0c:	b2d2      	uxtb	r2, r2
 8000e0e:	3318      	adds	r3, #24
 8000e10:	443b      	add	r3, r7
 8000e12:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000e16:	e016      	b.n	8000e46 <dwt_readfromdevice+0xc6>
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8000e18:	89bb      	ldrh	r3, [r7, #12]
 8000e1a:	b2da      	uxtb	r2, r3
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	1c59      	adds	r1, r3, #1
 8000e20:	6179      	str	r1, [r7, #20]
 8000e22:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000e26:	b2d2      	uxtb	r2, r2
 8000e28:	3318      	adds	r3, #24
 8000e2a:	443b      	add	r3, r7
 8000e2c:	f803 2c08 	strb.w	r2, [r3, #-8]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8000e30:	89bb      	ldrh	r3, [r7, #12]
 8000e32:	09db      	lsrs	r3, r3, #7
 8000e34:	b299      	uxth	r1, r3
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	1c5a      	adds	r2, r3, #1
 8000e3a:	617a      	str	r2, [r7, #20]
 8000e3c:	b2ca      	uxtb	r2, r1
 8000e3e:	3318      	adds	r3, #24
 8000e40:	443b      	add	r3, r7
 8000e42:	f803 2c08 	strb.w	r2, [r3, #-8]
        }
    }

    // Do the read from the SPI
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	b298      	uxth	r0, r3
 8000e4a:	f107 0110 	add.w	r1, r7, #16
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	68ba      	ldr	r2, [r7, #8]
 8000e52:	f000 fae9 	bl	8001428 <readfromspi>
} // end dwt_readfromdevice()
 8000e56:	bf00      	nop
 8000e58:	3718      	adds	r7, #24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	08006490 	.word	0x08006490
 8000e64:	0800654c 	.word	0x0800654c
 8000e68:	08005fc8 	.word	0x08005fc8
 8000e6c:	080064a8 	.word	0x080064a8

08000e70 <dwt_read32bitoffsetreg>:
 * output parameters
 *
 * returns 32 bit register value
 */
uint32 dwt_read32bitoffsetreg(int regFileID, int regOffset)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
    uint32  regval = 0 ;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	617b      	str	r3, [r7, #20]
    int     j ;
    uint8   buffer[4] ;

    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	b298      	uxth	r0, r3
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	b299      	uxth	r1, r3
 8000e86:	f107 030c 	add.w	r3, r7, #12
 8000e8a:	2204      	movs	r2, #4
 8000e8c:	f7ff ff78 	bl	8000d80 <dwt_readfromdevice>

    for (j = 3 ; j >= 0 ; j --)
 8000e90:	2303      	movs	r3, #3
 8000e92:	613b      	str	r3, [r7, #16]
 8000e94:	e00b      	b.n	8000eae <dwt_read32bitoffsetreg+0x3e>
    {
        regval = (regval << 8) + buffer[j] ;
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	021b      	lsls	r3, r3, #8
 8000e9a:	f107 010c 	add.w	r1, r7, #12
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	440a      	add	r2, r1
 8000ea2:	7812      	ldrb	r2, [r2, #0]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	617b      	str	r3, [r7, #20]
    for (j = 3 ; j >= 0 ; j --)
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	613b      	str	r3, [r7, #16]
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	daf0      	bge.n	8000e96 <dwt_read32bitoffsetreg+0x26>
    }
    return regval ;
 8000eb4:	697b      	ldr	r3, [r7, #20]

} // end dwt_read32bitoffsetreg()
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3718      	adds	r7, #24
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <dwt_read16bitoffsetreg>:
 * output parameters
 *
 * returns 16 bit register value
 */
uint16 dwt_read16bitoffsetreg(int regFileID, int regOffset)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b084      	sub	sp, #16
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
 8000ec6:	6039      	str	r1, [r7, #0]
    uint16  regval = 0 ;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	81fb      	strh	r3, [r7, #14]
    uint8   buffer[2] ;

    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	b298      	uxth	r0, r3
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	b299      	uxth	r1, r3
 8000ed4:	f107 030c 	add.w	r3, r7, #12
 8000ed8:	2202      	movs	r2, #2
 8000eda:	f7ff ff51 	bl	8000d80 <dwt_readfromdevice>

    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
 8000ede:	7b7b      	ldrb	r3, [r7, #13]
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	021b      	lsls	r3, r3, #8
 8000ee4:	b29a      	uxth	r2, r3
 8000ee6:	7b3b      	ldrb	r3, [r7, #12]
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	4413      	add	r3, r2
 8000eec:	81fb      	strh	r3, [r7, #14]
    return regval ;
 8000eee:	89fb      	ldrh	r3, [r7, #14]

} // end dwt_read16bitoffsetreg()
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3710      	adds	r7, #16
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <dwt_read8bitoffsetreg>:
 * output parameters
 *
 * returns 8-bit register value
 */
uint8 dwt_read8bitoffsetreg(int regFileID, int regOffset)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
    uint8 regval;

    dwt_readfromdevice(regFileID, regOffset, 1, &regval);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	b298      	uxth	r0, r3
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	b299      	uxth	r1, r3
 8000f0a:	f107 030f 	add.w	r3, r7, #15
 8000f0e:	2201      	movs	r2, #1
 8000f10:	f7ff ff36 	bl	8000d80 <dwt_readfromdevice>

    return regval ;
 8000f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <dwt_write8bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write8bitoffsetreg(int regFileID, int regOffset, uint8 regval)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b084      	sub	sp, #16
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	60f8      	str	r0, [r7, #12]
 8000f26:	60b9      	str	r1, [r7, #8]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	71fb      	strb	r3, [r7, #7]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	b298      	uxth	r0, r3
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	b299      	uxth	r1, r3
 8000f34:	1dfb      	adds	r3, r7, #7
 8000f36:	2201      	movs	r2, #1
 8000f38:	f7ff fea8 	bl	8000c8c <dwt_writetodevice>
}
 8000f3c:	bf00      	nop
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <dwt_write16bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write16bitoffsetreg(int regFileID, int regOffset, uint16 regval)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	80fb      	strh	r3, [r7, #6]
    uint8   buffer[2] ;

    buffer[0] = regval & 0xFF;
 8000f52:	88fb      	ldrh	r3, [r7, #6]
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	753b      	strb	r3, [r7, #20]
    buffer[1] = regval >> 8 ;
 8000f58:	88fb      	ldrh	r3, [r7, #6]
 8000f5a:	0a1b      	lsrs	r3, r3, #8
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	757b      	strb	r3, [r7, #21]

    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	b298      	uxth	r0, r3
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	b299      	uxth	r1, r3
 8000f6a:	f107 0314 	add.w	r3, r7, #20
 8000f6e:	2202      	movs	r2, #2
 8000f70:	f7ff fe8c 	bl	8000c8c <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 8000f74:	bf00      	nop
 8000f76:	3718      	adds	r7, #24
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <dwt_write32bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write32bitoffsetreg(int regFileID, int regOffset, uint32 regval)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
    int     j ;
    uint8   buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
 8000f8c:	e00d      	b.n	8000faa <dwt_write32bitoffsetreg+0x2e>
    {
        buffer[j] = regval & 0xff ;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	b2d9      	uxtb	r1, r3
 8000f92:	f107 0210 	add.w	r2, r7, #16
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	4413      	add	r3, r2
 8000f9a:	460a      	mov	r2, r1
 8000f9c:	701a      	strb	r2, [r3, #0]
        regval >>= 8 ;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	0a1b      	lsrs	r3, r3, #8
 8000fa2:	607b      	str	r3, [r7, #4]
    for ( j = 0 ; j < 4 ; j++ )
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	617b      	str	r3, [r7, #20]
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	2b03      	cmp	r3, #3
 8000fae:	ddee      	ble.n	8000f8e <dwt_write32bitoffsetreg+0x12>
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	b298      	uxth	r0, r3
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	b299      	uxth	r1, r3
 8000fb8:	f107 0310 	add.w	r3, r7, #16
 8000fbc:	2204      	movs	r2, #4
 8000fbe:	f7ff fe65 	bl	8000c8c <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 8000fc2:	bf00      	nop
 8000fc4:	3718      	adds	r7, #24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <_dwt_otpread>:
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32 _dwt_otpread(uint16 address)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b084      	sub	sp, #16
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	80fb      	strh	r3, [r7, #6]
    uint32 ret_data;

    // Write the address
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);
 8000fd4:	88fb      	ldrh	r3, [r7, #6]
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	2104      	movs	r1, #4
 8000fda:	202d      	movs	r0, #45	; 0x2d
 8000fdc:	f7ff ffb2 	bl	8000f44 <dwt_write16bitoffsetreg>

    // Perform OTP Read - Manual read mode has to be set
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
 8000fe0:	2203      	movs	r2, #3
 8000fe2:	2106      	movs	r1, #6
 8000fe4:	202d      	movs	r0, #45	; 0x2d
 8000fe6:	f7ff ff9a 	bl	8000f1e <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
 8000fea:	2200      	movs	r2, #0
 8000fec:	2106      	movs	r1, #6
 8000fee:	202d      	movs	r0, #45	; 0x2d
 8000ff0:	f7ff ff95 	bl	8000f1e <dwt_write8bitoffsetreg>

    // Read read data, available 40ns after rising edge of OTP_READ
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
 8000ff4:	210a      	movs	r1, #10
 8000ff6:	202d      	movs	r0, #45	; 0x2d
 8000ff8:	f7ff ff3a 	bl	8000e70 <dwt_read32bitoffsetreg>
 8000ffc:	60f8      	str	r0, [r7, #12]

    // Return the 32bit of read data
    return ret_data;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <_dwt_aonarrayupload>:
 * output parameters
 *
 * no return value
 */
void _dwt_aonarrayupload(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
 800100c:	2200      	movs	r2, #0
 800100e:	2102      	movs	r1, #2
 8001010:	202c      	movs	r0, #44	; 0x2c
 8001012:	f7ff ff84 	bl	8000f1e <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
 8001016:	2202      	movs	r2, #2
 8001018:	2102      	movs	r1, #2
 800101a:	202c      	movs	r0, #44	; 0x2c
 800101c:	f7ff ff7f 	bl	8000f1e <dwt_write8bitoffsetreg>
}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}

08001024 <_dwt_configlde>:
 * output parameters
 *
 * no return value
 */
void _dwt_configlde(int prfIndex)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
 800102c:	226d      	movs	r2, #109	; 0x6d
 800102e:	f640 0106 	movw	r1, #2054	; 0x806
 8001032:	202e      	movs	r0, #46	; 0x2e
 8001034:	f7ff ff73 	bl	8000f1e <dwt_write8bitoffsetreg>

    if(prfIndex)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d007      	beq.n	800104e <_dwt_configlde+0x2a>
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
 800103e:	f240 6207 	movw	r2, #1543	; 0x607
 8001042:	f641 0106 	movw	r1, #6150	; 0x1806
 8001046:	202e      	movs	r0, #46	; 0x2e
 8001048:	f7ff ff7c 	bl	8000f44 <dwt_write16bitoffsetreg>
    }
    else
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
    }
}
 800104c:	e006      	b.n	800105c <_dwt_configlde+0x38>
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
 800104e:	f241 6207 	movw	r2, #5639	; 0x1607
 8001052:	f641 0106 	movw	r1, #6150	; 0x1806
 8001056:	202e      	movs	r0, #46	; 0x2e
 8001058:	f7ff ff74 	bl	8000f44 <dwt_write16bitoffsetreg>
}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <_dwt_loaducodefromrom>:
 * output parameters
 *
 * no return value
 */
void _dwt_loaducodefromrom(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
    // Set up clocks
    _dwt_enableclocks(FORCE_LDE);
 8001068:	200e      	movs	r0, #14
 800106a:	f000 f80f 	bl	800108c <_dwt_enableclocks>

    // Kick off the LDE load
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
 800106e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001072:	2106      	movs	r1, #6
 8001074:	202d      	movs	r0, #45	; 0x2d
 8001076:	f7ff ff65 	bl	8000f44 <dwt_write16bitoffsetreg>

    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 800107a:	2001      	movs	r0, #1
 800107c:	f000 f994 	bl	80013a8 <deca_sleep>

    // Default clocks (ENABLE_ALL_SEQ)
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 8001080:	2001      	movs	r0, #1
 8001082:	f000 f803 	bl	800108c <_dwt_enableclocks>
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
	...

0800108c <_dwt_enableclocks>:
 * output parameters none
 *
 * no return value
 */
void _dwt_enableclocks(int clocks)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
    uint8 reg[2];

    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
 8001094:	f107 030c 	add.w	r3, r7, #12
 8001098:	2202      	movs	r2, #2
 800109a:	2100      	movs	r1, #0
 800109c:	2036      	movs	r0, #54	; 0x36
 800109e:	f7ff fe6f 	bl	8000d80 <dwt_readfromdevice>
    switch(clocks)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2b0e      	cmp	r3, #14
 80010a6:	d876      	bhi.n	8001196 <_dwt_enableclocks+0x10a>
 80010a8:	a201      	add	r2, pc, #4	; (adr r2, 80010b0 <_dwt_enableclocks+0x24>)
 80010aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ae:	bf00      	nop
 80010b0:	080010fd 	.word	0x080010fd
 80010b4:	080010ed 	.word	0x080010ed
 80010b8:	08001113 	.word	0x08001113
 80010bc:	08001197 	.word	0x08001197
 80010c0:	08001197 	.word	0x08001197
 80010c4:	08001197 	.word	0x08001197
 80010c8:	08001197 	.word	0x08001197
 80010cc:	08001129 	.word	0x08001129
 80010d0:	08001149 	.word	0x08001149
 80010d4:	08001197 	.word	0x08001197
 80010d8:	08001197 	.word	0x08001197
 80010dc:	0800115f 	.word	0x0800115f
 80010e0:	0800116b 	.word	0x0800116b
 80010e4:	08001177 	.word	0x08001177
 80010e8:	0800118d 	.word	0x0800118d
    {
        case ENABLE_ALL_SEQ:
        {
            reg[0] = 0x00 ;
 80010ec:	2300      	movs	r3, #0
 80010ee:	733b      	strb	r3, [r7, #12]
            reg[1] = reg[1] & 0xfe;
 80010f0:	7b7b      	ldrb	r3, [r7, #13]
 80010f2:	f023 0301 	bic.w	r3, r3, #1
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	737b      	strb	r3, [r7, #13]
        }
        break;
 80010fa:	e04d      	b.n	8001198 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_XTI:
        {
            // System and RX
            reg[0] = 0x01 | (reg[0] & 0xfc);
 80010fc:	7b3b      	ldrb	r3, [r7, #12]
 80010fe:	b25b      	sxtb	r3, r3
 8001100:	f023 0303 	bic.w	r3, r3, #3
 8001104:	b25b      	sxtb	r3, r3
 8001106:	f043 0301 	orr.w	r3, r3, #1
 800110a:	b25b      	sxtb	r3, r3
 800110c:	b2db      	uxtb	r3, r3
 800110e:	733b      	strb	r3, [r7, #12]
        }
        break;
 8001110:	e042      	b.n	8001198 <_dwt_enableclocks+0x10c>
        case FORCE_SYS_PLL:
        {
            // System
            reg[0] = 0x02 | (reg[0] & 0xfc);
 8001112:	7b3b      	ldrb	r3, [r7, #12]
 8001114:	b25b      	sxtb	r3, r3
 8001116:	f023 0303 	bic.w	r3, r3, #3
 800111a:	b25b      	sxtb	r3, r3
 800111c:	f043 0302 	orr.w	r3, r3, #2
 8001120:	b25b      	sxtb	r3, r3
 8001122:	b2db      	uxtb	r3, r3
 8001124:	733b      	strb	r3, [r7, #12]
        }
        break;
 8001126:	e037      	b.n	8001198 <_dwt_enableclocks+0x10c>
        case READ_ACC_ON:
        {
            reg[0] = 0x48 | (reg[0] & 0xb3);
 8001128:	7b3b      	ldrb	r3, [r7, #12]
 800112a:	b25b      	sxtb	r3, r3
 800112c:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8001130:	b25b      	sxtb	r3, r3
 8001132:	f043 0348 	orr.w	r3, r3, #72	; 0x48
 8001136:	b25b      	sxtb	r3, r3
 8001138:	b2db      	uxtb	r3, r3
 800113a:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x80 | reg[1];
 800113c:	7b7b      	ldrb	r3, [r7, #13]
 800113e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001142:	b2db      	uxtb	r3, r3
 8001144:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001146:	e027      	b.n	8001198 <_dwt_enableclocks+0x10c>
        case READ_ACC_OFF:
        {
            reg[0] = reg[0] & 0xb3;
 8001148:	7b3b      	ldrb	r3, [r7, #12]
 800114a:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 800114e:	b2db      	uxtb	r3, r3
 8001150:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x7f & reg[1];
 8001152:	7b7b      	ldrb	r3, [r7, #13]
 8001154:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001158:	b2db      	uxtb	r3, r3
 800115a:	737b      	strb	r3, [r7, #13]
        }
        break;
 800115c:	e01c      	b.n	8001198 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_ON:
        {
            reg[1] = 0x02 | reg[1];
 800115e:	7b7b      	ldrb	r3, [r7, #13]
 8001160:	f043 0302 	orr.w	r3, r3, #2
 8001164:	b2db      	uxtb	r3, r3
 8001166:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001168:	e016      	b.n	8001198 <_dwt_enableclocks+0x10c>
        case FORCE_OTP_OFF:
        {
            reg[1] = reg[1] & 0xfd;
 800116a:	7b7b      	ldrb	r3, [r7, #13]
 800116c:	f023 0302 	bic.w	r3, r3, #2
 8001170:	b2db      	uxtb	r3, r3
 8001172:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001174:	e010      	b.n	8001198 <_dwt_enableclocks+0x10c>
        case FORCE_TX_PLL:
        {
            reg[0] = 0x20 | (reg[0] & 0xcf);
 8001176:	7b3b      	ldrb	r3, [r7, #12]
 8001178:	b25b      	sxtb	r3, r3
 800117a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800117e:	b25b      	sxtb	r3, r3
 8001180:	f043 0320 	orr.w	r3, r3, #32
 8001184:	b25b      	sxtb	r3, r3
 8001186:	b2db      	uxtb	r3, r3
 8001188:	733b      	strb	r3, [r7, #12]
        }
        break;
 800118a:	e005      	b.n	8001198 <_dwt_enableclocks+0x10c>
        case FORCE_LDE:
        {
            reg[0] = 0x01;
 800118c:	2301      	movs	r3, #1
 800118e:	733b      	strb	r3, [r7, #12]
            reg[1] = 0x03;
 8001190:	2303      	movs	r3, #3
 8001192:	737b      	strb	r3, [r7, #13]
        }
        break;
 8001194:	e000      	b.n	8001198 <_dwt_enableclocks+0x10c>
        default:
        break;
 8001196:	bf00      	nop
    }


    // Need to write lower byte separately before setting the higher byte(s)
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
 8001198:	f107 030c 	add.w	r3, r7, #12
 800119c:	2201      	movs	r2, #1
 800119e:	2100      	movs	r1, #0
 80011a0:	2036      	movs	r0, #54	; 0x36
 80011a2:	f7ff fd73 	bl	8000c8c <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
 80011a6:	f107 030c 	add.w	r3, r7, #12
 80011aa:	3301      	adds	r3, #1
 80011ac:	2201      	movs	r2, #1
 80011ae:	2101      	movs	r1, #1
 80011b0:	2036      	movs	r0, #54	; 0x36
 80011b2:	f7ff fd6b 	bl	8000c8c <dwt_writetodevice>

} // end _dwt_enableclocks()
 80011b6:	bf00      	nop
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop

080011c0 <_dwt_disablesequencing>:
 * output parameters none
 *
 * no return value
 */
void _dwt_disablesequencing(void) // Disable sequencing and go to state "INIT"
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 80011c4:	2000      	movs	r0, #0
 80011c6:	f7ff ff61 	bl	800108c <_dwt_enableclocks>

    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
 80011ca:	2200      	movs	r2, #0
 80011cc:	2104      	movs	r1, #4
 80011ce:	2036      	movs	r0, #54	; 0x36
 80011d0:	f7ff feb8 	bl	8000f44 <dwt_write16bitoffsetreg>
}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <dwt_forcetrxoff>:
 * output parameters
 *
 * no return value
 */
void dwt_forcetrxoff(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
    decaIrqStatus_t stat ;
    uint32 mask;

    mask = dwt_read32bitreg(SYS_MASK_ID) ; // Read set interrupt mask
 80011de:	2100      	movs	r1, #0
 80011e0:	200e      	movs	r0, #14
 80011e2:	f7ff fe45 	bl	8000e70 <dwt_read32bitoffsetreg>
 80011e6:	6078      	str	r0, [r7, #4]

    // Need to beware of interrupts occurring in the middle of following read modify write cycle
    // We can disable the radio, but before the status is cleared an interrupt can be set (e.g. the
    // event has just happened before the radio was disabled)
    // thus we need to disable interrupt during this operation
    stat = decamutexon() ;
 80011e8:	f000 f8c0 	bl	800136c <decamutexon>
 80011ec:	6038      	str	r0, [r7, #0]

    dwt_write32bitreg(SYS_MASK_ID, 0) ; // Clear interrupt mask - so we don't get any unwanted events
 80011ee:	2200      	movs	r2, #0
 80011f0:	2100      	movs	r1, #0
 80011f2:	200e      	movs	r0, #14
 80011f4:	f7ff fec2 	bl	8000f7c <dwt_write32bitoffsetreg>

    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF) ; // Disable the radio
 80011f8:	2240      	movs	r2, #64	; 0x40
 80011fa:	2100      	movs	r1, #0
 80011fc:	200d      	movs	r0, #13
 80011fe:	f7ff fe8e 	bl	8000f1e <dwt_write8bitoffsetreg>

    // Forcing Transceiver off - so we do not want to see any new events that may have happened
    dwt_write32bitreg(SYS_STATUS_ID, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_GOOD));
 8001202:	4a0b      	ldr	r2, [pc, #44]	; (8001230 <dwt_forcetrxoff+0x58>)
 8001204:	2100      	movs	r1, #0
 8001206:	200f      	movs	r0, #15
 8001208:	f7ff feb8 	bl	8000f7c <dwt_write32bitoffsetreg>

    dwt_syncrxbufptrs();
 800120c:	f000 f814 	bl	8001238 <dwt_syncrxbufptrs>

    dwt_write32bitreg(SYS_MASK_ID, mask) ; // Set interrupt mask to what it was
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	2100      	movs	r1, #0
 8001214:	200e      	movs	r0, #14
 8001216:	f7ff feb1 	bl	8000f7c <dwt_write32bitoffsetreg>

    // Enable/restore interrupts again...
    decamutexoff(stat) ;
 800121a:	6838      	ldr	r0, [r7, #0]
 800121c:	f000 f8b7 	bl	800138e <decamutexoff>
    pdw1000local->wait4resp = 0;
 8001220:	4b04      	ldr	r3, [pc, #16]	; (8001234 <dwt_forcetrxoff+0x5c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2200      	movs	r2, #0
 8001226:	755a      	strb	r2, [r3, #21]

} // end deviceforcetrxoff()
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	2427fff8 	.word	0x2427fff8
 8001234:	20000000 	.word	0x20000000

08001238 <dwt_syncrxbufptrs>:
 * output parameters
 *
 * no return value
 */
void dwt_syncrxbufptrs(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
    uint8  buff ;
    // Need to make sure that the host/IC buffer pointers are aligned before starting RX
    buff = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 800123e:	2103      	movs	r1, #3
 8001240:	200f      	movs	r0, #15
 8001242:	f7ff fe59 	bl	8000ef8 <dwt_read8bitoffsetreg>
 8001246:	4603      	mov	r3, r0
 8001248:	71fb      	strb	r3, [r7, #7]

    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 800124a:	79fa      	ldrb	r2, [r7, #7]
       ((buff & (SYS_STATUS_HSRBP>>24)) << 1) ) // Host Side Receive Buffer Pointer
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	005b      	lsls	r3, r3, #1
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 8001250:	4053      	eors	r3, r2
 8001252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001256:	2b00      	cmp	r3, #0
 8001258:	d004      	beq.n	8001264 <dwt_syncrxbufptrs+0x2c>
    {
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 0x01) ; // We need to swap RX buffer status reg (write one to toggle internally)
 800125a:	2201      	movs	r2, #1
 800125c:	2103      	movs	r1, #3
 800125e:	200d      	movs	r0, #13
 8001260:	f7ff fe5d 	bl	8000f1e <dwt_write8bitoffsetreg>
    }
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <dwt_rxenable>:
 *                                               performing manual RX re-enabling in double buffering mode
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed receive enable will be too far in the future if delayed time has passed)
 */
int dwt_rxenable(int mode)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
    uint16 temp ;
    uint8 temp1 ;

    if ((mode & DWT_NO_SYNC_PTRS) == 0)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f003 0304 	and.w	r3, r3, #4
 800127a:	2b00      	cmp	r3, #0
 800127c:	d101      	bne.n	8001282 <dwt_rxenable+0x16>
    {
        dwt_syncrxbufptrs();
 800127e:	f7ff ffdb 	bl	8001238 <dwt_syncrxbufptrs>
    }

    temp = (uint16)SYS_CTRL_RXENAB ;
 8001282:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001286:	81fb      	strh	r3, [r7, #14]

    if (mode & DWT_START_RX_DELAYED)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	2b00      	cmp	r3, #0
 8001290:	d003      	beq.n	800129a <dwt_rxenable+0x2e>
    {
        temp |= (uint16)SYS_CTRL_RXDLYE ;
 8001292:	89fb      	ldrh	r3, [r7, #14]
 8001294:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001298:	81fb      	strh	r3, [r7, #14]
    }

    dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 800129a:	89fb      	ldrh	r3, [r7, #14]
 800129c:	461a      	mov	r2, r3
 800129e:	2100      	movs	r1, #0
 80012a0:	200d      	movs	r0, #13
 80012a2:	f7ff fe4f 	bl	8000f44 <dwt_write16bitoffsetreg>

    if (mode & DWT_START_RX_DELAYED) // check for errors
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f003 0301 	and.w	r3, r3, #1
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d01a      	beq.n	80012e6 <dwt_rxenable+0x7a>
    {
        temp1 = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 80012b0:	2103      	movs	r1, #3
 80012b2:	200f      	movs	r0, #15
 80012b4:	f7ff fe20 	bl	8000ef8 <dwt_read8bitoffsetreg>
 80012b8:	4603      	mov	r3, r0
 80012ba:	737b      	strb	r3, [r7, #13]
        if ((temp1 & (SYS_STATUS_HPDWARN >> 24)) != 0) // if delay has passed do immediate RX on unless DWT_IDLE_ON_DLY_ERR is true
 80012bc:	7b7b      	ldrb	r3, [r7, #13]
 80012be:	f003 0308 	and.w	r3, r3, #8
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d00f      	beq.n	80012e6 <dwt_rxenable+0x7a>
        {
            dwt_forcetrxoff(); // turn the delayed receive off
 80012c6:	f7ff ff87 	bl	80011d8 <dwt_forcetrxoff>

            if((mode & DWT_IDLE_ON_DLY_ERR) == 0) // if DWT_IDLE_ON_DLY_ERR not set then re-enable receiver
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f003 0302 	and.w	r3, r3, #2
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d105      	bne.n	80012e0 <dwt_rxenable+0x74>
            {
                dwt_write16bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_RXENAB);
 80012d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012d8:	2100      	movs	r1, #0
 80012da:	200d      	movs	r0, #13
 80012dc:	f7ff fe32 	bl	8000f44 <dwt_write16bitoffsetreg>
            }
            return DWT_ERROR; // return warning indication
 80012e0:	f04f 33ff 	mov.w	r3, #4294967295
 80012e4:	e000      	b.n	80012e8 <dwt_rxenable+0x7c>
        }
    }

    return DWT_SUCCESS;
 80012e6:	2300      	movs	r3, #0
} // end dwt_rxenable()
 80012e8:	4618      	mov	r0, r3
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
    _dwt_disablesequencing();
 80012f4:	f7ff ff64 	bl	80011c0 <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
 80012f8:	2200      	movs	r2, #0
 80012fa:	2100      	movs	r1, #0
 80012fc:	202c      	movs	r0, #44	; 0x2c
 80012fe:	f7ff fe21 	bl	8000f44 <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
 8001302:	2200      	movs	r2, #0
 8001304:	2106      	movs	r1, #6
 8001306:	202c      	movs	r0, #44	; 0x2c
 8001308:	f7ff fe09 	bl	8000f1e <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
 800130c:	f7ff fe7c 	bl	8001008 <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC (set the reset bits)
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
 8001310:	2200      	movs	r2, #0
 8001312:	2103      	movs	r1, #3
 8001314:	2036      	movs	r0, #54	; 0x36
 8001316:	f7ff fe02 	bl	8000f1e <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
 800131a:	2001      	movs	r0, #1
 800131c:	f000 f844 	bl	80013a8 <deca_sleep>

    // Clear the reset bits
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 8001320:	22f0      	movs	r2, #240	; 0xf0
 8001322:	2103      	movs	r1, #3
 8001324:	2036      	movs	r0, #54	; 0x36
 8001326:	f7ff fdfa 	bl	8000f1e <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
 800132a:	4b03      	ldr	r3, [pc, #12]	; (8001338 <dwt_softreset+0x48>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2200      	movs	r2, #0
 8001330:	755a      	strb	r2, [r3, #21]
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000000 	.word	0x20000000

0800133c <dwt_setxtaltrim>:
 * output parameters
 *
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	71fb      	strb	r3, [r7, #7]
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
 8001346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134a:	f003 031f 	and.w	r3, r3, #31
 800134e:	b25b      	sxtb	r3, r3
 8001350:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001354:	b25b      	sxtb	r3, r3
 8001356:	73fb      	strb	r3, [r7, #15]
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
 8001358:	7bfb      	ldrb	r3, [r7, #15]
 800135a:	461a      	mov	r2, r3
 800135c:	210e      	movs	r1, #14
 800135e:	202b      	movs	r0, #43	; 0x2b
 8001360:	f7ff fddd 	bl	8000f1e <dwt_write8bitoffsetreg>
}
 8001364:	bf00      	nop
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
	decaIrqStatus_t s = port_GetEXT_IRQStatus();
 8001372:	f000 f991 	bl	8001698 <port_GetEXT_IRQStatus>
 8001376:	4603      	mov	r3, r0
 8001378:	607b      	str	r3, [r7, #4]

	if(s) {
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <decamutexon+0x18>
		port_DisableEXT_IRQ(); //disable the external interrupt line
 8001380:	f000 f97c 	bl	800167c <port_DisableEXT_IRQ>
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
 8001384:	687b      	ldr	r3, [r7, #4]
}
 8001386:	4618      	mov	r0, r3
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <decamutexoff>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <decamutexoff+0x12>
		port_EnableEXT_IRQ();
 800139c:	f000 f975 	bl	800168a <port_EnableEXT_IRQ>
	}
}
 80013a0:	bf00      	nop
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <deca_sleep>:
#include "sleep.h"
#include "port.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
__INLINE void deca_sleep(unsigned int time_ms)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
	Sleep(time_ms);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f000 f8c5 	bl	8001540 <Sleep>
}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <writetospi>:
#pragma GCC optimize ("O3")
int writetospi(uint16_t headerLength,
               const    uint8_t *headerBuffer,
               uint32_t bodyLength,
               const    uint8_t *bodyBuffer)
{
 80013c0:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 80013c4:	4683      	mov	fp, r0
 80013c6:	468a      	mov	sl, r1
 80013c8:	4690      	mov	r8, r2
 80013ca:	4699      	mov	r9, r3
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 80013cc:	f7ff ffce 	bl	800136c <decamutexon>

    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80013d0:	4d13      	ldr	r5, [pc, #76]	; (8001420 <writetospi+0x60>)
    stat = decamutexon() ;
 80013d2:	4606      	mov	r6, r0
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80013d4:	4628      	mov	r0, r5
 80013d6:	f003 f8eb 	bl	80045b0 <HAL_SPI_GetState>
 80013da:	2801      	cmp	r0, #1
 80013dc:	4604      	mov	r4, r0
 80013de:	d1f9      	bne.n	80013d4 <writetospi+0x14>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 80013e0:	4810      	ldr	r0, [pc, #64]	; (8001424 <writetospi+0x64>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	2140      	movs	r1, #64	; 0x40
 80013e6:	f001 fc27 	bl	8002c38 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)&headerBuffer[0], headerLength, HAL_MAX_DELAY);    /* Send header in polling mode */
 80013ea:	465a      	mov	r2, fp
 80013ec:	4651      	mov	r1, sl
 80013ee:	f04f 33ff 	mov.w	r3, #4294967295
 80013f2:	480b      	ldr	r0, [pc, #44]	; (8001420 <writetospi+0x60>)
 80013f4:	f002 fe95 	bl	8004122 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&bodyBuffer[0], bodyLength, HAL_MAX_DELAY);        /* Send data in polling mode */
 80013f8:	f04f 33ff 	mov.w	r3, #4294967295
 80013fc:	4649      	mov	r1, r9
 80013fe:	fa1f f288 	uxth.w	r2, r8
 8001402:	4807      	ldr	r0, [pc, #28]	; (8001420 <writetospi+0x60>)
 8001404:	f002 fe8d 	bl	8004122 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 8001408:	4622      	mov	r2, r4
 800140a:	2140      	movs	r1, #64	; 0x40
 800140c:	4805      	ldr	r0, [pc, #20]	; (8001424 <writetospi+0x64>)
 800140e:	f001 fc13 	bl	8002c38 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 8001412:	4630      	mov	r0, r6
 8001414:	f7ff ffbb 	bl	800138e <decamutexoff>

    return 0;
} // end writetospi()
 8001418:	2000      	movs	r0, #0
 800141a:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
 800141e:	bf00      	nop
 8001420:	200005d0 	.word	0x200005d0
 8001424:	40020400 	.word	0x40020400

08001428 <readfromspi>:
#pragma GCC optimize ("O3")
int readfromspi(uint16_t headerLength,
                const uint8_t *headerBuffer,
                uint32_t readlength,
                uint8_t *readBuffer)
{
 8001428:	e92d 4778 	stmdb	sp!, {r3, r4, r5, r6, r8, r9, sl, lr}
 800142c:	4681      	mov	r9, r0
 800142e:	460c      	mov	r4, r1
 8001430:	4690      	mov	r8, r2
 8001432:	461d      	mov	r5, r3
    int i;
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 8001434:	f7ff ff9a 	bl	800136c <decamutexon>

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001438:	f8df a07c 	ldr.w	sl, [pc, #124]	; 80014b8 <readfromspi+0x90>
    stat = decamutexon() ;
 800143c:	4606      	mov	r6, r0
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800143e:	4650      	mov	r0, sl
 8001440:	f003 f8b6 	bl	80045b0 <HAL_SPI_GetState>
 8001444:	2801      	cmp	r0, #1
 8001446:	d1fa      	bne.n	800143e <readfromspi+0x16>

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 8001448:	481a      	ldr	r0, [pc, #104]	; (80014b4 <readfromspi+0x8c>)
 800144a:	2200      	movs	r2, #0
 800144c:	2140      	movs	r1, #64	; 0x40
 800144e:	f001 fbf3 	bl	8002c38 <HAL_GPIO_WritePin>

    /* Send header */
    for(i=0; i<headerLength; i++)
 8001452:	f1b9 0f00 	cmp.w	r9, #0
 8001456:	d00c      	beq.n	8001472 <readfromspi+0x4a>
    {
        HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 8001458:	f8df a05c 	ldr.w	sl, [pc, #92]	; 80014b8 <readfromspi+0x90>
 800145c:	44a1      	add	r9, r4
 800145e:	2201      	movs	r2, #1
 8001460:	4621      	mov	r1, r4
 8001462:	f04f 33ff 	mov.w	r3, #4294967295
    for(i=0; i<headerLength; i++)
 8001466:	4414      	add	r4, r2
        HAL_SPI_Transmit(&hspi1, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 8001468:	4650      	mov	r0, sl
 800146a:	f002 fe5a 	bl	8004122 <HAL_SPI_Transmit>
    for(i=0; i<headerLength; i++)
 800146e:	454c      	cmp	r4, r9
 8001470:	d1f5      	bne.n	800145e <readfromspi+0x36>
    }

    /* for the data buffer use LL functions directly as the HAL SPI read function
     * has issue reading single bytes */
    while(readlength-- > 0)
 8001472:	f1b8 0f00 	cmp.w	r8, #0
 8001476:	d012      	beq.n	800149e <readfromspi+0x76>
 8001478:	f8df c03c 	ldr.w	ip, [pc, #60]	; 80014b8 <readfromspi+0x90>
 800147c:	eb05 0008 	add.w	r0, r5, r8
        /* Wait until TXE flag is set to send data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
        {
        }

        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 8001480:	2400      	movs	r4, #0
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_TXE) == RESET)
 8001482:	f8dc 2000 	ldr.w	r2, [ip]
 8001486:	6891      	ldr	r1, [r2, #8]
 8001488:	0789      	lsls	r1, r1, #30
 800148a:	d5fc      	bpl.n	8001486 <readfromspi+0x5e>
        hspi1.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 800148c:	60d4      	str	r4, [r2, #12]
        e.g. when waking up DW1000 from DEEPSLEEP via dwt_spicswakeup() function.
        */

        /* Wait until RXNE flag is set to read data */
        while(__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET)
 800148e:	6891      	ldr	r1, [r2, #8]
 8001490:	07cb      	lsls	r3, r1, #31
 8001492:	d5fc      	bpl.n	800148e <readfromspi+0x66>
        {
        }

        (*readBuffer++) = hspi1.Instance->DR;  //copy data read form (MISO)
 8001494:	68d3      	ldr	r3, [r2, #12]
 8001496:	f805 3b01 	strb.w	r3, [r5], #1
    while(readlength-- > 0)
 800149a:	4285      	cmp	r5, r0
 800149c:	d1f1      	bne.n	8001482 <readfromspi+0x5a>
    }

    HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 800149e:	2201      	movs	r2, #1
 80014a0:	2140      	movs	r1, #64	; 0x40
 80014a2:	4804      	ldr	r0, [pc, #16]	; (80014b4 <readfromspi+0x8c>)
 80014a4:	f001 fbc8 	bl	8002c38 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 80014a8:	4630      	mov	r0, r6
 80014aa:	f7ff ff70 	bl	800138e <decamutexoff>

    return 0;
} // end readfromspi()
 80014ae:	2000      	movs	r0, #0
 80014b0:	e8bd 8778 	ldmia.w	sp!, {r3, r4, r5, r6, r8, r9, sl, pc}
 80014b4:	40020400 	.word	0x40020400
 80014b8:	200005d0 	.word	0x200005d0

080014bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	db0b      	blt.n	80014e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	f003 021f 	and.w	r2, r3, #31
 80014d4:	4907      	ldr	r1, [pc, #28]	; (80014f4 <__NVIC_EnableIRQ+0x38>)
 80014d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014da:	095b      	lsrs	r3, r3, #5
 80014dc:	2001      	movs	r0, #1
 80014de:	fa00 f202 	lsl.w	r2, r0, r2
 80014e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	e000e100 	.word	0xe000e100

080014f8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001506:	2b00      	cmp	r3, #0
 8001508:	db12      	blt.n	8001530 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	f003 021f 	and.w	r2, r3, #31
 8001510:	490a      	ldr	r1, [pc, #40]	; (800153c <__NVIC_DisableIRQ+0x44>)
 8001512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001516:	095b      	lsrs	r3, r3, #5
 8001518:	2001      	movs	r0, #1
 800151a:	fa00 f202 	lsl.w	r2, r0, r2
 800151e:	3320      	adds	r3, #32
 8001520:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001524:	f3bf 8f4f 	dsb	sy
}
 8001528:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800152a:	f3bf 8f6f 	isb	sy
}
 800152e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	e000e100 	.word	0xe000e100

08001540 <Sleep>:
/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void
Sleep(uint32_t x)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f001 f867 	bl	800261c <HAL_Delay>
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
	...

08001558 <EXTI_GetITEnStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The "enable" state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITEnStatus(uint32_t x)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
    return ((NVIC->ISER[(((uint32_t)x) >> 5UL)] &\
 8001560:	4a0b      	ldr	r2, [pc, #44]	; (8001590 <EXTI_GetITEnStatus+0x38>)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	095b      	lsrs	r3, r3, #5
 8001566:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            (uint32_t)(1UL << (((uint32_t)x) & 0x1FUL)) ) == (uint32_t)RESET)?(RESET):(SET);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f003 031f 	and.w	r3, r3, #31
 8001570:	fa22 f303 	lsr.w	r3, r2, r3
 8001574:	f003 0301 	and.w	r3, r3, #1
 8001578:	2b00      	cmp	r3, #0
 800157a:	bf14      	ite	ne
 800157c:	2301      	movne	r3, #1
 800157e:	2300      	moveq	r3, #0
 8001580:	b2db      	uxtb	r3, r3
}
 8001582:	4618      	mov	r0, r3
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	e000e100 	.word	0xe000e100

08001594 <reset_DW1000>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW1000 by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DW1000(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef    GPIO_InitStruct;

    // Enable GPIO used for DW1000 reset as open collector output
    GPIO_InitStruct.Pin = DW_RST_Pin;
 800159a:	2301      	movs	r3, #1
 800159c:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800159e:	2311      	movs	r3, #17
 80015a0:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a2:	2300      	movs	r3, #0
 80015a4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 80015a6:	1d3b      	adds	r3, r7, #4
 80015a8:	4619      	mov	r1, r3
 80015aa:	480a      	ldr	r0, [pc, #40]	; (80015d4 <reset_DW1000+0x40>)
 80015ac:	f001 f9c0 	bl	8002930 <HAL_GPIO_Init>

    //drive the RSTn pin low
    HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_RESET);
 80015b0:	2200      	movs	r2, #0
 80015b2:	2101      	movs	r1, #1
 80015b4:	4807      	ldr	r0, [pc, #28]	; (80015d4 <reset_DW1000+0x40>)
 80015b6:	f001 fb3f 	bl	8002c38 <HAL_GPIO_WritePin>

    Sleep(1);
 80015ba:	2001      	movs	r0, #1
 80015bc:	f7ff ffc0 	bl	8001540 <Sleep>

    //put the pin back to output open-drain (not active)
    setup_DW1000RSTnIRQ(0);
 80015c0:	2000      	movs	r0, #0
 80015c2:	f000 f809 	bl	80015d8 <setup_DW1000RSTnIRQ>



    Sleep(2);
 80015c6:	2002      	movs	r0, #2
 80015c8:	f7ff ffba 	bl	8001540 <Sleep>
}
 80015cc:	bf00      	nop
 80015ce:	3718      	adds	r7, #24
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40020000 	.word	0x40020000

080015d8 <setup_DW1000RSTnIRQ>:
 * @brief   setup the DW_RESET pin mode
 *          0 - output Open collector mode
 *          !0 - input mode with connected EXTI0 IRQ
 * */
void setup_DW1000RSTnIRQ(int enable)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b088      	sub	sp, #32
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    if(enable)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d015      	beq.n	8001612 <setup_DW1000RSTnIRQ+0x3a>
    {
        // Enable GPIO used as DECA RESET for interrupt
        GPIO_InitStruct.Pin = DW_RST_Pin;
 80015e6:	2301      	movs	r3, #1
 80015e8:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015ea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015ee:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 80015f4:	f107 030c 	add.w	r3, r7, #12
 80015f8:	4619      	mov	r1, r3
 80015fa:	4813      	ldr	r0, [pc, #76]	; (8001648 <setup_DW1000RSTnIRQ+0x70>)
 80015fc:	f001 f998 	bl	8002930 <HAL_GPIO_Init>

        HAL_NVIC_EnableIRQ(EXTI0_IRQn);     //pin #0 -> EXTI #0
 8001600:	2006      	movs	r0, #6
 8001602:	f001 f94a 	bl	800289a <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001606:	2200      	movs	r2, #0
 8001608:	2105      	movs	r1, #5
 800160a:	2006      	movs	r0, #6
 800160c:	f001 f929 	bl	8002862 <HAL_NVIC_SetPriority>
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
        HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_SET);
    }
}
 8001610:	e015      	b.n	800163e <setup_DW1000RSTnIRQ+0x66>
        HAL_NVIC_DisableIRQ(EXTI0_IRQn);    //pin #0 -> EXTI #0
 8001612:	2006      	movs	r0, #6
 8001614:	f001 f94f 	bl	80028b6 <HAL_NVIC_DisableIRQ>
        GPIO_InitStruct.Pin = DW_RST_Pin;
 8001618:	2301      	movs	r3, #1
 800161a:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800161c:	2311      	movs	r3, #17
 800161e:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001624:	2302      	movs	r3, #2
 8001626:	61bb      	str	r3, [r7, #24]
        HAL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 8001628:	f107 030c 	add.w	r3, r7, #12
 800162c:	4619      	mov	r1, r3
 800162e:	4806      	ldr	r0, [pc, #24]	; (8001648 <setup_DW1000RSTnIRQ+0x70>)
 8001630:	f001 f97e 	bl	8002930 <HAL_GPIO_Init>
        HAL_GPIO_WritePin(DW_RST_GPIO_Port, DW_RST_Pin, GPIO_PIN_SET);
 8001634:	2201      	movs	r2, #1
 8001636:	2101      	movs	r1, #1
 8001638:	4803      	ldr	r0, [pc, #12]	; (8001648 <setup_DW1000RSTnIRQ+0x70>)
 800163a:	f001 fafd 	bl	8002c38 <HAL_GPIO_WritePin>
}
 800163e:	bf00      	nop
 8001640:	3720      	adds	r7, #32
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40020000 	.word	0x40020000

0800164c <port_set_dw1000_slowrate>:
/* @fn      port_set_dw1000_slowrate
 * @brief   set 2.25MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_slowrate(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001650:	4b03      	ldr	r3, [pc, #12]	; (8001660 <port_set_dw1000_slowrate+0x14>)
 8001652:	2220      	movs	r2, #32
 8001654:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 8001656:	4802      	ldr	r0, [pc, #8]	; (8001660 <port_set_dw1000_slowrate+0x14>)
 8001658:	f002 fcda 	bl	8004010 <HAL_SPI_Init>
}
 800165c:	bf00      	nop
 800165e:	bd80      	pop	{r7, pc}
 8001660:	200005d0 	.word	0x200005d0

08001664 <port_set_dw1000_fastrate>:
/* @fn      port_set_dw1000_fastrate
 * @brief   set 18MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_fastrate(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001668:	4b03      	ldr	r3, [pc, #12]	; (8001678 <port_set_dw1000_fastrate+0x14>)
 800166a:	2208      	movs	r2, #8
 800166c:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&hspi1);
 800166e:	4802      	ldr	r0, [pc, #8]	; (8001678 <port_set_dw1000_fastrate+0x14>)
 8001670:	f002 fcce 	bl	8004010 <HAL_SPI_Init>
}
 8001674:	bf00      	nop
 8001676:	bd80      	pop	{r7, pc}
 8001678:	200005d0 	.word	0x200005d0

0800167c <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
    NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 8001680:	2017      	movs	r0, #23
 8001682:	f7ff ff39 	bl	80014f8 <__NVIC_DisableIRQ>
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}

0800168a <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	af00      	add	r7, sp, #0
    NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 800168e:	2017      	movs	r0, #23
 8001690:	f7ff ff14 	bl	80014bc <__NVIC_EnableIRQ>
}
 8001694:	bf00      	nop
 8001696:	bd80      	pop	{r7, pc}

08001698 <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
    return EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 800169c:	2017      	movs	r0, #23
 800169e:	f7ff ff5b 	bl	8001558 <EXTI_GetITEnStatus>
 80016a2:	4603      	mov	r3, r0
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <SSD1306_InvertDisplay>:
}



void SSD1306_InvertDisplay (int i)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  if (i) SSD1306_WRITECOMMAND (SSD1306_INVERTDISPLAY);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d005      	beq.n	80016c2 <SSD1306_InvertDisplay+0x1a>
 80016b6:	22a7      	movs	r2, #167	; 0xa7
 80016b8:	2100      	movs	r1, #0
 80016ba:	2078      	movs	r0, #120	; 0x78
 80016bc:	f000 faac 	bl	8001c18 <ssd1306_I2C_Write>

  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);

}
 80016c0:	e004      	b.n	80016cc <SSD1306_InvertDisplay+0x24>
  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);
 80016c2:	22a6      	movs	r2, #166	; 0xa6
 80016c4:	2100      	movs	r1, #0
 80016c6:	2078      	movs	r0, #120	; 0x78
 80016c8:	f000 faa6 	bl	8001c18 <ssd1306_I2C_Write>
}
 80016cc:	bf00      	nop
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80016da:	f000 fa21 	bl	8001b20 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80016de:	f644 6320 	movw	r3, #20000	; 0x4e20
 80016e2:	2201      	movs	r2, #1
 80016e4:	2178      	movs	r1, #120	; 0x78
 80016e6:	485b      	ldr	r0, [pc, #364]	; (8001854 <SSD1306_Init+0x180>)
 80016e8:	f001 fd02 	bl	80030f0 <HAL_I2C_IsDeviceReady>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	e0a9      	b.n	800184a <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80016f6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80016fa:	607b      	str	r3, [r7, #4]
	while(p>0)
 80016fc:	e002      	b.n	8001704 <SSD1306_Init+0x30>
		p--;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	3b01      	subs	r3, #1
 8001702:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1f9      	bne.n	80016fe <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800170a:	22ae      	movs	r2, #174	; 0xae
 800170c:	2100      	movs	r1, #0
 800170e:	2078      	movs	r0, #120	; 0x78
 8001710:	f000 fa82 	bl	8001c18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001714:	2220      	movs	r2, #32
 8001716:	2100      	movs	r1, #0
 8001718:	2078      	movs	r0, #120	; 0x78
 800171a:	f000 fa7d 	bl	8001c18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800171e:	2210      	movs	r2, #16
 8001720:	2100      	movs	r1, #0
 8001722:	2078      	movs	r0, #120	; 0x78
 8001724:	f000 fa78 	bl	8001c18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001728:	22b0      	movs	r2, #176	; 0xb0
 800172a:	2100      	movs	r1, #0
 800172c:	2078      	movs	r0, #120	; 0x78
 800172e:	f000 fa73 	bl	8001c18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001732:	22c8      	movs	r2, #200	; 0xc8
 8001734:	2100      	movs	r1, #0
 8001736:	2078      	movs	r0, #120	; 0x78
 8001738:	f000 fa6e 	bl	8001c18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800173c:	2200      	movs	r2, #0
 800173e:	2100      	movs	r1, #0
 8001740:	2078      	movs	r0, #120	; 0x78
 8001742:	f000 fa69 	bl	8001c18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001746:	2210      	movs	r2, #16
 8001748:	2100      	movs	r1, #0
 800174a:	2078      	movs	r0, #120	; 0x78
 800174c:	f000 fa64 	bl	8001c18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001750:	2240      	movs	r2, #64	; 0x40
 8001752:	2100      	movs	r1, #0
 8001754:	2078      	movs	r0, #120	; 0x78
 8001756:	f000 fa5f 	bl	8001c18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800175a:	2281      	movs	r2, #129	; 0x81
 800175c:	2100      	movs	r1, #0
 800175e:	2078      	movs	r0, #120	; 0x78
 8001760:	f000 fa5a 	bl	8001c18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001764:	22ff      	movs	r2, #255	; 0xff
 8001766:	2100      	movs	r1, #0
 8001768:	2078      	movs	r0, #120	; 0x78
 800176a:	f000 fa55 	bl	8001c18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800176e:	22a1      	movs	r2, #161	; 0xa1
 8001770:	2100      	movs	r1, #0
 8001772:	2078      	movs	r0, #120	; 0x78
 8001774:	f000 fa50 	bl	8001c18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001778:	22a6      	movs	r2, #166	; 0xa6
 800177a:	2100      	movs	r1, #0
 800177c:	2078      	movs	r0, #120	; 0x78
 800177e:	f000 fa4b 	bl	8001c18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001782:	22a8      	movs	r2, #168	; 0xa8
 8001784:	2100      	movs	r1, #0
 8001786:	2078      	movs	r0, #120	; 0x78
 8001788:	f000 fa46 	bl	8001c18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800178c:	223f      	movs	r2, #63	; 0x3f
 800178e:	2100      	movs	r1, #0
 8001790:	2078      	movs	r0, #120	; 0x78
 8001792:	f000 fa41 	bl	8001c18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001796:	22a4      	movs	r2, #164	; 0xa4
 8001798:	2100      	movs	r1, #0
 800179a:	2078      	movs	r0, #120	; 0x78
 800179c:	f000 fa3c 	bl	8001c18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80017a0:	22d3      	movs	r2, #211	; 0xd3
 80017a2:	2100      	movs	r1, #0
 80017a4:	2078      	movs	r0, #120	; 0x78
 80017a6:	f000 fa37 	bl	8001c18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80017aa:	2200      	movs	r2, #0
 80017ac:	2100      	movs	r1, #0
 80017ae:	2078      	movs	r0, #120	; 0x78
 80017b0:	f000 fa32 	bl	8001c18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80017b4:	22d5      	movs	r2, #213	; 0xd5
 80017b6:	2100      	movs	r1, #0
 80017b8:	2078      	movs	r0, #120	; 0x78
 80017ba:	f000 fa2d 	bl	8001c18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80017be:	22f0      	movs	r2, #240	; 0xf0
 80017c0:	2100      	movs	r1, #0
 80017c2:	2078      	movs	r0, #120	; 0x78
 80017c4:	f000 fa28 	bl	8001c18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80017c8:	22d9      	movs	r2, #217	; 0xd9
 80017ca:	2100      	movs	r1, #0
 80017cc:	2078      	movs	r0, #120	; 0x78
 80017ce:	f000 fa23 	bl	8001c18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80017d2:	2222      	movs	r2, #34	; 0x22
 80017d4:	2100      	movs	r1, #0
 80017d6:	2078      	movs	r0, #120	; 0x78
 80017d8:	f000 fa1e 	bl	8001c18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80017dc:	22da      	movs	r2, #218	; 0xda
 80017de:	2100      	movs	r1, #0
 80017e0:	2078      	movs	r0, #120	; 0x78
 80017e2:	f000 fa19 	bl	8001c18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80017e6:	2212      	movs	r2, #18
 80017e8:	2100      	movs	r1, #0
 80017ea:	2078      	movs	r0, #120	; 0x78
 80017ec:	f000 fa14 	bl	8001c18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80017f0:	22db      	movs	r2, #219	; 0xdb
 80017f2:	2100      	movs	r1, #0
 80017f4:	2078      	movs	r0, #120	; 0x78
 80017f6:	f000 fa0f 	bl	8001c18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80017fa:	2220      	movs	r2, #32
 80017fc:	2100      	movs	r1, #0
 80017fe:	2078      	movs	r0, #120	; 0x78
 8001800:	f000 fa0a 	bl	8001c18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001804:	228d      	movs	r2, #141	; 0x8d
 8001806:	2100      	movs	r1, #0
 8001808:	2078      	movs	r0, #120	; 0x78
 800180a:	f000 fa05 	bl	8001c18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800180e:	2214      	movs	r2, #20
 8001810:	2100      	movs	r1, #0
 8001812:	2078      	movs	r0, #120	; 0x78
 8001814:	f000 fa00 	bl	8001c18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001818:	22af      	movs	r2, #175	; 0xaf
 800181a:	2100      	movs	r1, #0
 800181c:	2078      	movs	r0, #120	; 0x78
 800181e:	f000 f9fb 	bl	8001c18 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001822:	222e      	movs	r2, #46	; 0x2e
 8001824:	2100      	movs	r1, #0
 8001826:	2078      	movs	r0, #120	; 0x78
 8001828:	f000 f9f6 	bl	8001c18 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800182c:	2000      	movs	r0, #0
 800182e:	f000 f843 	bl	80018b8 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001832:	f000 f813 	bl	800185c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001836:	4b08      	ldr	r3, [pc, #32]	; (8001858 <SSD1306_Init+0x184>)
 8001838:	2200      	movs	r2, #0
 800183a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800183c:	4b06      	ldr	r3, [pc, #24]	; (8001858 <SSD1306_Init+0x184>)
 800183e:	2200      	movs	r2, #0
 8001840:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001842:	4b05      	ldr	r3, [pc, #20]	; (8001858 <SSD1306_Init+0x184>)
 8001844:	2201      	movs	r2, #1
 8001846:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001848:	2301      	movs	r3, #1
}
 800184a:	4618      	mov	r0, r3
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	200004f4 	.word	0x200004f4
 8001858:	200004ec 	.word	0x200004ec

0800185c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001862:	2300      	movs	r3, #0
 8001864:	71fb      	strb	r3, [r7, #7]
 8001866:	e01d      	b.n	80018a4 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001868:	79fb      	ldrb	r3, [r7, #7]
 800186a:	3b50      	subs	r3, #80	; 0x50
 800186c:	b2db      	uxtb	r3, r3
 800186e:	461a      	mov	r2, r3
 8001870:	2100      	movs	r1, #0
 8001872:	2078      	movs	r0, #120	; 0x78
 8001874:	f000 f9d0 	bl	8001c18 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001878:	2200      	movs	r2, #0
 800187a:	2100      	movs	r1, #0
 800187c:	2078      	movs	r0, #120	; 0x78
 800187e:	f000 f9cb 	bl	8001c18 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001882:	2210      	movs	r2, #16
 8001884:	2100      	movs	r1, #0
 8001886:	2078      	movs	r0, #120	; 0x78
 8001888:	f000 f9c6 	bl	8001c18 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800188c:	79fb      	ldrb	r3, [r7, #7]
 800188e:	01db      	lsls	r3, r3, #7
 8001890:	4a08      	ldr	r2, [pc, #32]	; (80018b4 <SSD1306_UpdateScreen+0x58>)
 8001892:	441a      	add	r2, r3
 8001894:	2380      	movs	r3, #128	; 0x80
 8001896:	2140      	movs	r1, #64	; 0x40
 8001898:	2078      	movs	r0, #120	; 0x78
 800189a:	f000 f957 	bl	8001b4c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800189e:	79fb      	ldrb	r3, [r7, #7]
 80018a0:	3301      	adds	r3, #1
 80018a2:	71fb      	strb	r3, [r7, #7]
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	2b07      	cmp	r3, #7
 80018a8:	d9de      	bls.n	8001868 <SSD1306_UpdateScreen+0xc>
	}
}
 80018aa:	bf00      	nop
 80018ac:	bf00      	nop
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	200000ec 	.word	0x200000ec

080018b8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d101      	bne.n	80018cc <SSD1306_Fill+0x14>
 80018c8:	2300      	movs	r3, #0
 80018ca:	e000      	b.n	80018ce <SSD1306_Fill+0x16>
 80018cc:	23ff      	movs	r3, #255	; 0xff
 80018ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018d2:	4619      	mov	r1, r3
 80018d4:	4803      	ldr	r0, [pc, #12]	; (80018e4 <SSD1306_Fill+0x2c>)
 80018d6:	f003 fb73 	bl	8004fc0 <memset>
}
 80018da:	bf00      	nop
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	200000ec 	.word	0x200000ec

080018e8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	80fb      	strh	r3, [r7, #6]
 80018f2:	460b      	mov	r3, r1
 80018f4:	80bb      	strh	r3, [r7, #4]
 80018f6:	4613      	mov	r3, r2
 80018f8:	70fb      	strb	r3, [r7, #3]
	if (
 80018fa:	88fb      	ldrh	r3, [r7, #6]
 80018fc:	2b7f      	cmp	r3, #127	; 0x7f
 80018fe:	d848      	bhi.n	8001992 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001900:	88bb      	ldrh	r3, [r7, #4]
 8001902:	2b3f      	cmp	r3, #63	; 0x3f
 8001904:	d845      	bhi.n	8001992 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001906:	4b26      	ldr	r3, [pc, #152]	; (80019a0 <SSD1306_DrawPixel+0xb8>)
 8001908:	791b      	ldrb	r3, [r3, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d006      	beq.n	800191c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800190e:	78fb      	ldrb	r3, [r7, #3]
 8001910:	2b00      	cmp	r3, #0
 8001912:	bf0c      	ite	eq
 8001914:	2301      	moveq	r3, #1
 8001916:	2300      	movne	r3, #0
 8001918:	b2db      	uxtb	r3, r3
 800191a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800191c:	78fb      	ldrb	r3, [r7, #3]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d11a      	bne.n	8001958 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001922:	88fa      	ldrh	r2, [r7, #6]
 8001924:	88bb      	ldrh	r3, [r7, #4]
 8001926:	08db      	lsrs	r3, r3, #3
 8001928:	b298      	uxth	r0, r3
 800192a:	4603      	mov	r3, r0
 800192c:	01db      	lsls	r3, r3, #7
 800192e:	4413      	add	r3, r2
 8001930:	4a1c      	ldr	r2, [pc, #112]	; (80019a4 <SSD1306_DrawPixel+0xbc>)
 8001932:	5cd3      	ldrb	r3, [r2, r3]
 8001934:	b25a      	sxtb	r2, r3
 8001936:	88bb      	ldrh	r3, [r7, #4]
 8001938:	f003 0307 	and.w	r3, r3, #7
 800193c:	2101      	movs	r1, #1
 800193e:	fa01 f303 	lsl.w	r3, r1, r3
 8001942:	b25b      	sxtb	r3, r3
 8001944:	4313      	orrs	r3, r2
 8001946:	b259      	sxtb	r1, r3
 8001948:	88fa      	ldrh	r2, [r7, #6]
 800194a:	4603      	mov	r3, r0
 800194c:	01db      	lsls	r3, r3, #7
 800194e:	4413      	add	r3, r2
 8001950:	b2c9      	uxtb	r1, r1
 8001952:	4a14      	ldr	r2, [pc, #80]	; (80019a4 <SSD1306_DrawPixel+0xbc>)
 8001954:	54d1      	strb	r1, [r2, r3]
 8001956:	e01d      	b.n	8001994 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001958:	88fa      	ldrh	r2, [r7, #6]
 800195a:	88bb      	ldrh	r3, [r7, #4]
 800195c:	08db      	lsrs	r3, r3, #3
 800195e:	b298      	uxth	r0, r3
 8001960:	4603      	mov	r3, r0
 8001962:	01db      	lsls	r3, r3, #7
 8001964:	4413      	add	r3, r2
 8001966:	4a0f      	ldr	r2, [pc, #60]	; (80019a4 <SSD1306_DrawPixel+0xbc>)
 8001968:	5cd3      	ldrb	r3, [r2, r3]
 800196a:	b25a      	sxtb	r2, r3
 800196c:	88bb      	ldrh	r3, [r7, #4]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	2101      	movs	r1, #1
 8001974:	fa01 f303 	lsl.w	r3, r1, r3
 8001978:	b25b      	sxtb	r3, r3
 800197a:	43db      	mvns	r3, r3
 800197c:	b25b      	sxtb	r3, r3
 800197e:	4013      	ands	r3, r2
 8001980:	b259      	sxtb	r1, r3
 8001982:	88fa      	ldrh	r2, [r7, #6]
 8001984:	4603      	mov	r3, r0
 8001986:	01db      	lsls	r3, r3, #7
 8001988:	4413      	add	r3, r2
 800198a:	b2c9      	uxtb	r1, r1
 800198c:	4a05      	ldr	r2, [pc, #20]	; (80019a4 <SSD1306_DrawPixel+0xbc>)
 800198e:	54d1      	strb	r1, [r2, r3]
 8001990:	e000      	b.n	8001994 <SSD1306_DrawPixel+0xac>
		return;
 8001992:	bf00      	nop
	}
}
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	200004ec 	.word	0x200004ec
 80019a4:	200000ec 	.word	0x200000ec

080019a8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	460a      	mov	r2, r1
 80019b2:	80fb      	strh	r3, [r7, #6]
 80019b4:	4613      	mov	r3, r2
 80019b6:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80019b8:	4a05      	ldr	r2, [pc, #20]	; (80019d0 <SSD1306_GotoXY+0x28>)
 80019ba:	88fb      	ldrh	r3, [r7, #6]
 80019bc:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80019be:	4a04      	ldr	r2, [pc, #16]	; (80019d0 <SSD1306_GotoXY+0x28>)
 80019c0:	88bb      	ldrh	r3, [r7, #4]
 80019c2:	8053      	strh	r3, [r2, #2]
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	200004ec 	.word	0x200004ec

080019d4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	6039      	str	r1, [r7, #0]
 80019de:	71fb      	strb	r3, [r7, #7]
 80019e0:	4613      	mov	r3, r2
 80019e2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80019e4:	4b3a      	ldr	r3, [pc, #232]	; (8001ad0 <SSD1306_Putc+0xfc>)
 80019e6:	881b      	ldrh	r3, [r3, #0]
 80019e8:	461a      	mov	r2, r3
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	4413      	add	r3, r2
	if (
 80019f0:	2b7f      	cmp	r3, #127	; 0x7f
 80019f2:	dc07      	bgt.n	8001a04 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80019f4:	4b36      	ldr	r3, [pc, #216]	; (8001ad0 <SSD1306_Putc+0xfc>)
 80019f6:	885b      	ldrh	r3, [r3, #2]
 80019f8:	461a      	mov	r2, r3
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	785b      	ldrb	r3, [r3, #1]
 80019fe:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001a00:	2b3f      	cmp	r3, #63	; 0x3f
 8001a02:	dd01      	ble.n	8001a08 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001a04:	2300      	movs	r3, #0
 8001a06:	e05e      	b.n	8001ac6 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]
 8001a0c:	e04b      	b.n	8001aa6 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685a      	ldr	r2, [r3, #4]
 8001a12:	79fb      	ldrb	r3, [r7, #7]
 8001a14:	3b20      	subs	r3, #32
 8001a16:	6839      	ldr	r1, [r7, #0]
 8001a18:	7849      	ldrb	r1, [r1, #1]
 8001a1a:	fb01 f303 	mul.w	r3, r1, r3
 8001a1e:	4619      	mov	r1, r3
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	440b      	add	r3, r1
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	4413      	add	r3, r2
 8001a28:	881b      	ldrh	r3, [r3, #0]
 8001a2a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	613b      	str	r3, [r7, #16]
 8001a30:	e030      	b.n	8001a94 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001a32:	68fa      	ldr	r2, [r7, #12]
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d010      	beq.n	8001a64 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001a42:	4b23      	ldr	r3, [pc, #140]	; (8001ad0 <SSD1306_Putc+0xfc>)
 8001a44:	881a      	ldrh	r2, [r3, #0]
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	4413      	add	r3, r2
 8001a4c:	b298      	uxth	r0, r3
 8001a4e:	4b20      	ldr	r3, [pc, #128]	; (8001ad0 <SSD1306_Putc+0xfc>)
 8001a50:	885a      	ldrh	r2, [r3, #2]
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	4413      	add	r3, r2
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	79ba      	ldrb	r2, [r7, #6]
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	f7ff ff43 	bl	80018e8 <SSD1306_DrawPixel>
 8001a62:	e014      	b.n	8001a8e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001a64:	4b1a      	ldr	r3, [pc, #104]	; (8001ad0 <SSD1306_Putc+0xfc>)
 8001a66:	881a      	ldrh	r2, [r3, #0]
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	4413      	add	r3, r2
 8001a6e:	b298      	uxth	r0, r3
 8001a70:	4b17      	ldr	r3, [pc, #92]	; (8001ad0 <SSD1306_Putc+0xfc>)
 8001a72:	885a      	ldrh	r2, [r3, #2]
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	4413      	add	r3, r2
 8001a7a:	b299      	uxth	r1, r3
 8001a7c:	79bb      	ldrb	r3, [r7, #6]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	bf0c      	ite	eq
 8001a82:	2301      	moveq	r3, #1
 8001a84:	2300      	movne	r3, #0
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	461a      	mov	r2, r3
 8001a8a:	f7ff ff2d 	bl	80018e8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	3301      	adds	r3, #1
 8001a92:	613b      	str	r3, [r7, #16]
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	461a      	mov	r2, r3
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d3c8      	bcc.n	8001a32 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	617b      	str	r3, [r7, #20]
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	785b      	ldrb	r3, [r3, #1]
 8001aaa:	461a      	mov	r2, r3
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d3ad      	bcc.n	8001a0e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001ab2:	4b07      	ldr	r3, [pc, #28]	; (8001ad0 <SSD1306_Putc+0xfc>)
 8001ab4:	881a      	ldrh	r2, [r3, #0]
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	4413      	add	r3, r2
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	4b03      	ldr	r3, [pc, #12]	; (8001ad0 <SSD1306_Putc+0xfc>)
 8001ac2:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001ac4:	79fb      	ldrb	r3, [r7, #7]
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3718      	adds	r7, #24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	200004ec 	.word	0x200004ec

08001ad4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001ae2:	e012      	b.n	8001b0a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	79fa      	ldrb	r2, [r7, #7]
 8001aea:	68b9      	ldr	r1, [r7, #8]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff ff71 	bl	80019d4 <SSD1306_Putc>
 8001af2:	4603      	mov	r3, r0
 8001af4:	461a      	mov	r2, r3
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d002      	beq.n	8001b04 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	e008      	b.n	8001b16 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	3301      	adds	r3, #1
 8001b08:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1e8      	bne.n	8001ae4 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	781b      	ldrb	r3, [r3, #0]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
	...

08001b20 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001b26:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <ssd1306_I2C_Init+0x28>)
 8001b28:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001b2a:	e002      	b.n	8001b32 <ssd1306_I2C_Init+0x12>
		p--;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1f9      	bne.n	8001b2c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001b38:	bf00      	nop
 8001b3a:	bf00      	nop
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	0003d090 	.word	0x0003d090

08001b4c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001b4c:	b590      	push	{r4, r7, lr}
 8001b4e:	b0c7      	sub	sp, #284	; 0x11c
 8001b50:	af02      	add	r7, sp, #8
 8001b52:	4604      	mov	r4, r0
 8001b54:	4608      	mov	r0, r1
 8001b56:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001b5a:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001b5e:	600a      	str	r2, [r1, #0]
 8001b60:	4619      	mov	r1, r3
 8001b62:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b66:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001b6a:	4622      	mov	r2, r4
 8001b6c:	701a      	strb	r2, [r3, #0]
 8001b6e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b72:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001b76:	4602      	mov	r2, r0
 8001b78:	701a      	strb	r2, [r3, #0]
 8001b7a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b7e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001b82:	460a      	mov	r2, r1
 8001b84:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001b86:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001b8e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001b92:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001b96:	7812      	ldrb	r2, [r2, #0]
 8001b98:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001ba0:	e015      	b.n	8001bce <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001ba2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001ba6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001baa:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001bae:	6812      	ldr	r2, [r2, #0]
 8001bb0:	441a      	add	r2, r3
 8001bb2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	7811      	ldrb	r1, [r2, #0]
 8001bba:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001bbe:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001bc2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001bc4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001bc8:	3301      	adds	r3, #1
 8001bca:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001bce:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001bd8:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001bdc:	8812      	ldrh	r2, [r2, #0]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d8df      	bhi.n	8001ba2 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001be2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001be6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	b299      	uxth	r1, r3
 8001bee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001bf2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001bf6:	881b      	ldrh	r3, [r3, #0]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	f107 020c 	add.w	r2, r7, #12
 8001c00:	200a      	movs	r0, #10
 8001c02:	9000      	str	r0, [sp, #0]
 8001c04:	4803      	ldr	r0, [pc, #12]	; (8001c14 <ssd1306_I2C_WriteMulti+0xc8>)
 8001c06:	f001 f975 	bl	8002ef4 <HAL_I2C_Master_Transmit>
}
 8001c0a:	bf00      	nop
 8001c0c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd90      	pop	{r4, r7, pc}
 8001c14:	200004f4 	.word	0x200004f4

08001c18 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af02      	add	r7, sp, #8
 8001c1e:	4603      	mov	r3, r0
 8001c20:	71fb      	strb	r3, [r7, #7]
 8001c22:	460b      	mov	r3, r1
 8001c24:	71bb      	strb	r3, [r7, #6]
 8001c26:	4613      	mov	r3, r2
 8001c28:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001c2a:	79bb      	ldrb	r3, [r7, #6]
 8001c2c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001c2e:	797b      	ldrb	r3, [r7, #5]
 8001c30:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	b299      	uxth	r1, r3
 8001c36:	f107 020c 	add.w	r2, r7, #12
 8001c3a:	230a      	movs	r3, #10
 8001c3c:	9300      	str	r3, [sp, #0]
 8001c3e:	2302      	movs	r3, #2
 8001c40:	4803      	ldr	r0, [pc, #12]	; (8001c50 <ssd1306_I2C_Write+0x38>)
 8001c42:	f001 f957 	bl	8002ef4 <HAL_I2C_Master_Transmit>
}
 8001c46:	bf00      	nop
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	200004f4 	.word	0x200004f4

08001c54 <ssd1306_write>:

void ssd1306_write(uint32_t buff, FontDef_t Font)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	1d3b      	adds	r3, r7, #4
 8001c5e:	e883 0006 	stmia.w	r3, {r1, r2}
//	SSD1306_Clear ();
//	SSD1306_Fill(SSD1306_COLOR_BLACK);
	SSD1306_Puts(buff, &Font, 1);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	1d39      	adds	r1, r7, #4
 8001c66:	2201      	movs	r2, #1
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff ff33 	bl	8001ad4 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001c6e:	f7ff fdf5 	bl	800185c <SSD1306_UpdateScreen>
}
 8001c72:	bf00      	nop
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
	...

08001c7c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b08a      	sub	sp, #40	; 0x28
 8001c80:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c82:	f107 0314 	add.w	r3, r7, #20
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	605a      	str	r2, [r3, #4]
 8001c8c:	609a      	str	r2, [r3, #8]
 8001c8e:	60da      	str	r2, [r3, #12]
 8001c90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	613b      	str	r3, [r7, #16]
 8001c96:	4b30      	ldr	r3, [pc, #192]	; (8001d58 <MX_GPIO_Init+0xdc>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	4a2f      	ldr	r2, [pc, #188]	; (8001d58 <MX_GPIO_Init+0xdc>)
 8001c9c:	f043 0304 	orr.w	r3, r3, #4
 8001ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca2:	4b2d      	ldr	r3, [pc, #180]	; (8001d58 <MX_GPIO_Init+0xdc>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	f003 0304 	and.w	r3, r3, #4
 8001caa:	613b      	str	r3, [r7, #16]
 8001cac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60fb      	str	r3, [r7, #12]
 8001cb2:	4b29      	ldr	r3, [pc, #164]	; (8001d58 <MX_GPIO_Init+0xdc>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	4a28      	ldr	r2, [pc, #160]	; (8001d58 <MX_GPIO_Init+0xdc>)
 8001cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cbe:	4b26      	ldr	r3, [pc, #152]	; (8001d58 <MX_GPIO_Init+0xdc>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60bb      	str	r3, [r7, #8]
 8001cce:	4b22      	ldr	r3, [pc, #136]	; (8001d58 <MX_GPIO_Init+0xdc>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	4a21      	ldr	r2, [pc, #132]	; (8001d58 <MX_GPIO_Init+0xdc>)
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cda:	4b1f      	ldr	r3, [pc, #124]	; (8001d58 <MX_GPIO_Init+0xdc>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	60bb      	str	r3, [r7, #8]
 8001ce4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	607b      	str	r3, [r7, #4]
 8001cea:	4b1b      	ldr	r3, [pc, #108]	; (8001d58 <MX_GPIO_Init+0xdc>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	4a1a      	ldr	r2, [pc, #104]	; (8001d58 <MX_GPIO_Init+0xdc>)
 8001cf0:	f043 0302 	orr.w	r3, r3, #2
 8001cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf6:	4b18      	ldr	r3, [pc, #96]	; (8001d58 <MX_GPIO_Init+0xdc>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	607b      	str	r3, [r7, #4]
 8001d00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DW_RST_Pin|DW_IRQ_Pin, GPIO_PIN_RESET);
 8001d02:	2200      	movs	r2, #0
 8001d04:	2103      	movs	r1, #3
 8001d06:	4815      	ldr	r0, [pc, #84]	; (8001d5c <MX_GPIO_Init+0xe0>)
 8001d08:	f000 ff96 	bl	8002c38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DW_CS_GPIO_Port, DW_CS_Pin, GPIO_PIN_RESET);
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	2140      	movs	r1, #64	; 0x40
 8001d10:	4813      	ldr	r0, [pc, #76]	; (8001d60 <MX_GPIO_Init+0xe4>)
 8001d12:	f000 ff91 	bl	8002c38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DW_RST_Pin|DW_IRQ_Pin;
 8001d16:	2303      	movs	r3, #3
 8001d18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d22:	2300      	movs	r3, #0
 8001d24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d26:	f107 0314 	add.w	r3, r7, #20
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	480b      	ldr	r0, [pc, #44]	; (8001d5c <MX_GPIO_Init+0xe0>)
 8001d2e:	f000 fdff 	bl	8002930 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DW_CS_Pin;
 8001d32:	2340      	movs	r3, #64	; 0x40
 8001d34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d36:	2301      	movs	r3, #1
 8001d38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DW_CS_GPIO_Port, &GPIO_InitStruct);
 8001d42:	f107 0314 	add.w	r3, r7, #20
 8001d46:	4619      	mov	r1, r3
 8001d48:	4805      	ldr	r0, [pc, #20]	; (8001d60 <MX_GPIO_Init+0xe4>)
 8001d4a:	f000 fdf1 	bl	8002930 <HAL_GPIO_Init>

}
 8001d4e:	bf00      	nop
 8001d50:	3728      	adds	r7, #40	; 0x28
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	40020000 	.word	0x40020000
 8001d60:	40020400 	.word	0x40020400

08001d64 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d68:	4b12      	ldr	r3, [pc, #72]	; (8001db4 <MX_I2C1_Init+0x50>)
 8001d6a:	4a13      	ldr	r2, [pc, #76]	; (8001db8 <MX_I2C1_Init+0x54>)
 8001d6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001d6e:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <MX_I2C1_Init+0x50>)
 8001d70:	4a12      	ldr	r2, [pc, #72]	; (8001dbc <MX_I2C1_Init+0x58>)
 8001d72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d74:	4b0f      	ldr	r3, [pc, #60]	; (8001db4 <MX_I2C1_Init+0x50>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d7a:	4b0e      	ldr	r3, [pc, #56]	; (8001db4 <MX_I2C1_Init+0x50>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d80:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <MX_I2C1_Init+0x50>)
 8001d82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d86:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d88:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <MX_I2C1_Init+0x50>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d8e:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <MX_I2C1_Init+0x50>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d94:	4b07      	ldr	r3, [pc, #28]	; (8001db4 <MX_I2C1_Init+0x50>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d9a:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <MX_I2C1_Init+0x50>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001da0:	4804      	ldr	r0, [pc, #16]	; (8001db4 <MX_I2C1_Init+0x50>)
 8001da2:	f000 ff63 	bl	8002c6c <HAL_I2C_Init>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001dac:	f000 f8ce 	bl	8001f4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001db0:	bf00      	nop
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	200004f4 	.word	0x200004f4
 8001db8:	40005400 	.word	0x40005400
 8001dbc:	00061a80 	.word	0x00061a80

08001dc0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b08a      	sub	sp, #40	; 0x28
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc8:	f107 0314 	add.w	r3, r7, #20
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
 8001dd4:	60da      	str	r2, [r3, #12]
 8001dd6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a19      	ldr	r2, [pc, #100]	; (8001e44 <HAL_I2C_MspInit+0x84>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d12c      	bne.n	8001e3c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	613b      	str	r3, [r7, #16]
 8001de6:	4b18      	ldr	r3, [pc, #96]	; (8001e48 <HAL_I2C_MspInit+0x88>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	4a17      	ldr	r2, [pc, #92]	; (8001e48 <HAL_I2C_MspInit+0x88>)
 8001dec:	f043 0302 	orr.w	r3, r3, #2
 8001df0:	6313      	str	r3, [r2, #48]	; 0x30
 8001df2:	4b15      	ldr	r3, [pc, #84]	; (8001e48 <HAL_I2C_MspInit+0x88>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	613b      	str	r3, [r7, #16]
 8001dfc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001dfe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e04:	2312      	movs	r3, #18
 8001e06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e10:	2304      	movs	r3, #4
 8001e12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e14:	f107 0314 	add.w	r3, r7, #20
 8001e18:	4619      	mov	r1, r3
 8001e1a:	480c      	ldr	r0, [pc, #48]	; (8001e4c <HAL_I2C_MspInit+0x8c>)
 8001e1c:	f000 fd88 	bl	8002930 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e20:	2300      	movs	r3, #0
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	4b08      	ldr	r3, [pc, #32]	; (8001e48 <HAL_I2C_MspInit+0x88>)
 8001e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e28:	4a07      	ldr	r2, [pc, #28]	; (8001e48 <HAL_I2C_MspInit+0x88>)
 8001e2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e2e:	6413      	str	r3, [r2, #64]	; 0x40
 8001e30:	4b05      	ldr	r3, [pc, #20]	; (8001e48 <HAL_I2C_MspInit+0x88>)
 8001e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001e3c:	bf00      	nop
 8001e3e:	3728      	adds	r7, #40	; 0x28
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40005400 	.word	0x40005400
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	40020400 	.word	0x40020400

08001e50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e54:	f000 fb70 	bl	8002538 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e58:	f000 f810 	bl	8001e7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e5c:	f7ff ff0e 	bl	8001c7c <MX_GPIO_Init>
  MX_SPI1_Init();
 8001e60:	f000 f914 	bl	800208c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001e64:	f000 facc 	bl	8002400 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001e68:	f7ff ff7c 	bl	8001d64 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  setup_DW1000RSTnIRQ(0);
 8001e6c:	2000      	movs	r0, #0
 8001e6e:	f7ff fbb3 	bl	80015d8 <setup_DW1000RSTnIRQ>
  SSD1306_Init();
 8001e72:	f7ff fc2f 	bl	80016d4 <SSD1306_Init>
    dw_main();
 8001e76:	f000 f86f 	bl	8001f58 <dw_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001e7a:	e7fe      	b.n	8001e7a <main+0x2a>

08001e7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b094      	sub	sp, #80	; 0x50
 8001e80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e82:	f107 0320 	add.w	r3, r7, #32
 8001e86:	2230      	movs	r2, #48	; 0x30
 8001e88:	2100      	movs	r1, #0
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f003 f898 	bl	8004fc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e90:	f107 030c 	add.w	r3, r7, #12
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	605a      	str	r2, [r3, #4]
 8001e9a:	609a      	str	r2, [r3, #8]
 8001e9c:	60da      	str	r2, [r3, #12]
 8001e9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	60bb      	str	r3, [r7, #8]
 8001ea4:	4b27      	ldr	r3, [pc, #156]	; (8001f44 <SystemClock_Config+0xc8>)
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea8:	4a26      	ldr	r2, [pc, #152]	; (8001f44 <SystemClock_Config+0xc8>)
 8001eaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eae:	6413      	str	r3, [r2, #64]	; 0x40
 8001eb0:	4b24      	ldr	r3, [pc, #144]	; (8001f44 <SystemClock_Config+0xc8>)
 8001eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb8:	60bb      	str	r3, [r7, #8]
 8001eba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	607b      	str	r3, [r7, #4]
 8001ec0:	4b21      	ldr	r3, [pc, #132]	; (8001f48 <SystemClock_Config+0xcc>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a20      	ldr	r2, [pc, #128]	; (8001f48 <SystemClock_Config+0xcc>)
 8001ec6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001eca:	6013      	str	r3, [r2, #0]
 8001ecc:	4b1e      	ldr	r3, [pc, #120]	; (8001f48 <SystemClock_Config+0xcc>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ed4:	607b      	str	r3, [r7, #4]
 8001ed6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001edc:	2301      	movs	r3, #1
 8001ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ee0:	2310      	movs	r3, #16
 8001ee2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001eec:	2308      	movs	r3, #8
 8001eee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001ef0:	2364      	movs	r3, #100	; 0x64
 8001ef2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ef8:	2304      	movs	r3, #4
 8001efa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001efc:	f107 0320 	add.w	r3, r7, #32
 8001f00:	4618      	mov	r0, r3
 8001f02:	f001 fc2d 	bl	8003760 <HAL_RCC_OscConfig>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001f0c:	f000 f81e 	bl	8001f4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f10:	230f      	movs	r3, #15
 8001f12:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f14:	2302      	movs	r3, #2
 8001f16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f22:	2300      	movs	r3, #0
 8001f24:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001f26:	f107 030c 	add.w	r3, r7, #12
 8001f2a:	2103      	movs	r1, #3
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f001 fe8f 	bl	8003c50 <HAL_RCC_ClockConfig>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001f38:	f000 f808 	bl	8001f4c <Error_Handler>
  }
}
 8001f3c:	bf00      	nop
 8001f3e:	3750      	adds	r7, #80	; 0x50
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40023800 	.word	0x40023800
 8001f48:	40007000 	.word	0x40007000

08001f4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001f50:	b672      	cpsid	i
}
 8001f52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f54:	e7fe      	b.n	8001f54 <Error_Handler+0x8>
	...

08001f58 <dw_main>:

/**
 * Application entry point.
 */
int dw_main(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
    /* Display application name on LCD. */
    ssd1306_write(buff, Font_7x10);
 8001f5e:	4840      	ldr	r0, [pc, #256]	; (8002060 <dw_main+0x108>)
 8001f60:	4b40      	ldr	r3, [pc, #256]	; (8002064 <dw_main+0x10c>)
 8001f62:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001f66:	f7ff fe75 	bl	8001c54 <ssd1306_write>

    /* Reset and initialise DW1000. See NOTE 2 below.
     * For initialisation, DW1000 clocks must be temporarily set to crystal speed. After initialisation SPI rate can be increased for optimum
     * performance. */
    reset_DW1000(); /* Target specific drive of RSTn line into DW1000 low for a period. */
 8001f6a:	f7ff fb13 	bl	8001594 <reset_DW1000>
    port_set_dw1000_slowrate();
 8001f6e:	f7ff fb6d 	bl	800164c <port_set_dw1000_slowrate>
    if (dwt_initialise(DWT_LOADNONE) == DWT_ERROR)
 8001f72:	2000      	movs	r0, #0
 8001f74:	f7fe fb06 	bl	8000584 <dwt_initialise>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f7e:	d110      	bne.n	8001fa2 <dw_main+0x4a>
    {
        printf("INIT FAILED");
 8001f80:	4839      	ldr	r0, [pc, #228]	; (8002068 <dw_main+0x110>)
 8001f82:	f003 fb13 	bl	80055ac <iprintf>
        SSD1306_GotoXY(0, 10); SSD1306_InvertDisplay(1);
 8001f86:	210a      	movs	r1, #10
 8001f88:	2000      	movs	r0, #0
 8001f8a:	f7ff fd0d 	bl	80019a8 <SSD1306_GotoXY>
 8001f8e:	2001      	movs	r0, #1
 8001f90:	f7ff fb8a 	bl	80016a8 <SSD1306_InvertDisplay>
        ssd1306_write("Init Failed!!!", Font_7x10);
 8001f94:	4835      	ldr	r0, [pc, #212]	; (800206c <dw_main+0x114>)
 8001f96:	4b33      	ldr	r3, [pc, #204]	; (8002064 <dw_main+0x10c>)
 8001f98:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001f9c:	f7ff fe5a 	bl	8001c54 <ssd1306_write>
        while (1)
 8001fa0:	e7fe      	b.n	8001fa0 <dw_main+0x48>
        { };
    }
    port_set_dw1000_fastrate();
 8001fa2:	f7ff fb5f 	bl	8001664 <port_set_dw1000_fastrate>

    /* Configure DW1000. */
    dwt_configure(&config);
 8001fa6:	4832      	ldr	r0, [pc, #200]	; (8002070 <dw_main+0x118>)
 8001fa8:	f7fe fc46 	bl	8000838 <dwt_configure>

        /* Clear local RX buffer to avoid having leftovers from previous receptions  This is not necessary but is included here to aid reading
         * the RX buffer.
         * This is a good place to put a breakpoint. Here (after first time through the loop) the local status register will be set for last event
         * and if a good receive has happened the data buffer will have the data in it, and frame_len will be set to the length of the RX frame. */
        for (i = 0 ; i < FRAME_LEN_MAX; i++ )
 8001fac:	2300      	movs	r3, #0
 8001fae:	607b      	str	r3, [r7, #4]
 8001fb0:	e007      	b.n	8001fc2 <dw_main+0x6a>
        {
            rx_buffer[i] = 0;
 8001fb2:	4a30      	ldr	r2, [pc, #192]	; (8002074 <dw_main+0x11c>)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	2200      	movs	r2, #0
 8001fba:	701a      	strb	r2, [r3, #0]
        for (i = 0 ; i < FRAME_LEN_MAX; i++ )
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	607b      	str	r3, [r7, #4]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2b7e      	cmp	r3, #126	; 0x7e
 8001fc6:	ddf4      	ble.n	8001fb2 <dw_main+0x5a>
        }

        /* Activate reception immediately. See NOTE 3 below. */
        dwt_rxenable(DWT_START_RX_IMMEDIATE);
 8001fc8:	2000      	movs	r0, #0
 8001fca:	f7ff f94f 	bl	800126c <dwt_rxenable>

        /* Poll until a frame is properly received or an error/timeout occurs. See NOTE 4 below.
         * STATUS register is 5 bytes long but, as the event we are looking at is in the first byte of the register, we can use this simplest API
         * function to access it. */
        while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_ERR)))
 8001fce:	bf00      	nop
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	200f      	movs	r0, #15
 8001fd4:	f7fe ff4c 	bl	8000e70 <dwt_read32bitoffsetreg>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	4a27      	ldr	r2, [pc, #156]	; (8002078 <dw_main+0x120>)
 8001fdc:	6013      	str	r3, [r2, #0]
 8001fde:	4b26      	ldr	r3, [pc, #152]	; (8002078 <dw_main+0x120>)
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	4b26      	ldr	r3, [pc, #152]	; (800207c <dw_main+0x124>)
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d0f2      	beq.n	8001fd0 <dw_main+0x78>
        { };

        if (status_reg & SYS_STATUS_RXFCG)
 8001fea:	4b23      	ldr	r3, [pc, #140]	; (8002078 <dw_main+0x120>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d02d      	beq.n	8002052 <dw_main+0xfa>
        {
            /* A frame has been received, copy it to our local buffer. */
            frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFL_MASK_1023;
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	2010      	movs	r0, #16
 8001ffa:	f7fe ff39 	bl	8000e70 <dwt_read32bitoffsetreg>
 8001ffe:	4603      	mov	r3, r0
 8002000:	b29b      	uxth	r3, r3
 8002002:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002006:	b29a      	uxth	r2, r3
 8002008:	4b1d      	ldr	r3, [pc, #116]	; (8002080 <dw_main+0x128>)
 800200a:	801a      	strh	r2, [r3, #0]
            if (frame_len <= FRAME_LEN_MAX)
 800200c:	4b1c      	ldr	r3, [pc, #112]	; (8002080 <dw_main+0x128>)
 800200e:	881b      	ldrh	r3, [r3, #0]
 8002010:	2b7f      	cmp	r3, #127	; 0x7f
 8002012:	d806      	bhi.n	8002022 <dw_main+0xca>
            {
                dwt_readrxdata(rx_buffer, frame_len, 0);
 8002014:	4b1a      	ldr	r3, [pc, #104]	; (8002080 <dw_main+0x128>)
 8002016:	881b      	ldrh	r3, [r3, #0]
 8002018:	2200      	movs	r2, #0
 800201a:	4619      	mov	r1, r3
 800201c:	4815      	ldr	r0, [pc, #84]	; (8002074 <dw_main+0x11c>)
 800201e:	f7fe fe23 	bl	8000c68 <dwt_readrxdata>
            }
            SSD1306_GotoXY(0, 30);
 8002022:	211e      	movs	r1, #30
 8002024:	2000      	movs	r0, #0
 8002026:	f7ff fcbf 	bl	80019a8 <SSD1306_GotoXY>
            ssd1306_write(rx_buffer, Font_7x10);
 800202a:	4812      	ldr	r0, [pc, #72]	; (8002074 <dw_main+0x11c>)
 800202c:	4b0d      	ldr	r3, [pc, #52]	; (8002064 <dw_main+0x10c>)
 800202e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002032:	f7ff fe0f 	bl	8001c54 <ssd1306_write>
            HAL_UART_Transmit(&huart2, rx_buffer, 10, HAL_MAX_DELAY);
 8002036:	f04f 33ff 	mov.w	r3, #4294967295
 800203a:	220a      	movs	r2, #10
 800203c:	490d      	ldr	r1, [pc, #52]	; (8002074 <dw_main+0x11c>)
 800203e:	4811      	ldr	r0, [pc, #68]	; (8002084 <dw_main+0x12c>)
 8002040:	f002 fbef 	bl	8004822 <HAL_UART_Transmit>
            /* Clear good RX frame event in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG);
 8002044:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002048:	2100      	movs	r1, #0
 800204a:	200f      	movs	r0, #15
 800204c:	f7fe ff96 	bl	8000f7c <dwt_write32bitoffsetreg>
 8002050:	e7ac      	b.n	8001fac <dw_main+0x54>

        }
        else
        {
            /* Clear RX error events in the DW1000 status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_ERR);
 8002052:	4a0d      	ldr	r2, [pc, #52]	; (8002088 <dw_main+0x130>)
 8002054:	2100      	movs	r1, #0
 8002056:	200f      	movs	r0, #15
 8002058:	f7fe ff90 	bl	8000f7c <dwt_write32bitoffsetreg>
    {
 800205c:	e7a6      	b.n	8001fac <dw_main+0x54>
 800205e:	bf00      	nop
 8002060:	2000000c 	.word	0x2000000c
 8002064:	20000004 	.word	0x20000004
 8002068:	0800650c 	.word	0x0800650c
 800206c:	08006518 	.word	0x08006518
 8002070:	2000001c 	.word	0x2000001c
 8002074:	20000548 	.word	0x20000548
 8002078:	200005c8 	.word	0x200005c8
 800207c:	2405d000 	.word	0x2405d000
 8002080:	200005cc 	.word	0x200005cc
 8002084:	2000062c 	.word	0x2000062c
 8002088:	24059000 	.word	0x24059000

0800208c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002090:	4b17      	ldr	r3, [pc, #92]	; (80020f0 <MX_SPI1_Init+0x64>)
 8002092:	4a18      	ldr	r2, [pc, #96]	; (80020f4 <MX_SPI1_Init+0x68>)
 8002094:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002096:	4b16      	ldr	r3, [pc, #88]	; (80020f0 <MX_SPI1_Init+0x64>)
 8002098:	f44f 7282 	mov.w	r2, #260	; 0x104
 800209c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800209e:	4b14      	ldr	r3, [pc, #80]	; (80020f0 <MX_SPI1_Init+0x64>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80020a4:	4b12      	ldr	r3, [pc, #72]	; (80020f0 <MX_SPI1_Init+0x64>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020aa:	4b11      	ldr	r3, [pc, #68]	; (80020f0 <MX_SPI1_Init+0x64>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020b0:	4b0f      	ldr	r3, [pc, #60]	; (80020f0 <MX_SPI1_Init+0x64>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80020b6:	4b0e      	ldr	r3, [pc, #56]	; (80020f0 <MX_SPI1_Init+0x64>)
 80020b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020bc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020be:	4b0c      	ldr	r3, [pc, #48]	; (80020f0 <MX_SPI1_Init+0x64>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020c4:	4b0a      	ldr	r3, [pc, #40]	; (80020f0 <MX_SPI1_Init+0x64>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80020ca:	4b09      	ldr	r3, [pc, #36]	; (80020f0 <MX_SPI1_Init+0x64>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020d0:	4b07      	ldr	r3, [pc, #28]	; (80020f0 <MX_SPI1_Init+0x64>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80020d6:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <MX_SPI1_Init+0x64>)
 80020d8:	220a      	movs	r2, #10
 80020da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80020dc:	4804      	ldr	r0, [pc, #16]	; (80020f0 <MX_SPI1_Init+0x64>)
 80020de:	f001 ff97 	bl	8004010 <HAL_SPI_Init>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80020e8:	f7ff ff30 	bl	8001f4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80020ec:	bf00      	nop
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	200005d0 	.word	0x200005d0
 80020f4:	40013000 	.word	0x40013000

080020f8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b08a      	sub	sp, #40	; 0x28
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002100:	f107 0314 	add.w	r3, r7, #20
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	605a      	str	r2, [r3, #4]
 800210a:	609a      	str	r2, [r3, #8]
 800210c:	60da      	str	r2, [r3, #12]
 800210e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a1d      	ldr	r2, [pc, #116]	; (800218c <HAL_SPI_MspInit+0x94>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d133      	bne.n	8002182 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800211a:	2300      	movs	r3, #0
 800211c:	613b      	str	r3, [r7, #16]
 800211e:	4b1c      	ldr	r3, [pc, #112]	; (8002190 <HAL_SPI_MspInit+0x98>)
 8002120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002122:	4a1b      	ldr	r2, [pc, #108]	; (8002190 <HAL_SPI_MspInit+0x98>)
 8002124:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002128:	6453      	str	r3, [r2, #68]	; 0x44
 800212a:	4b19      	ldr	r3, [pc, #100]	; (8002190 <HAL_SPI_MspInit+0x98>)
 800212c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002132:	613b      	str	r3, [r7, #16]
 8002134:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	4b15      	ldr	r3, [pc, #84]	; (8002190 <HAL_SPI_MspInit+0x98>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	4a14      	ldr	r2, [pc, #80]	; (8002190 <HAL_SPI_MspInit+0x98>)
 8002140:	f043 0301 	orr.w	r3, r3, #1
 8002144:	6313      	str	r3, [r2, #48]	; 0x30
 8002146:	4b12      	ldr	r3, [pc, #72]	; (8002190 <HAL_SPI_MspInit+0x98>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002152:	23e0      	movs	r3, #224	; 0xe0
 8002154:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002156:	2302      	movs	r3, #2
 8002158:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215a:	2300      	movs	r3, #0
 800215c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800215e:	2303      	movs	r3, #3
 8002160:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002162:	2305      	movs	r3, #5
 8002164:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002166:	f107 0314 	add.w	r3, r7, #20
 800216a:	4619      	mov	r1, r3
 800216c:	4809      	ldr	r0, [pc, #36]	; (8002194 <HAL_SPI_MspInit+0x9c>)
 800216e:	f000 fbdf 	bl	8002930 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002172:	2200      	movs	r2, #0
 8002174:	2100      	movs	r1, #0
 8002176:	2023      	movs	r0, #35	; 0x23
 8002178:	f000 fb73 	bl	8002862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800217c:	2023      	movs	r0, #35	; 0x23
 800217e:	f000 fb8c 	bl	800289a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002182:	bf00      	nop
 8002184:	3728      	adds	r7, #40	; 0x28
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40013000 	.word	0x40013000
 8002190:	40023800 	.word	0x40023800
 8002194:	40020000 	.word	0x40020000

08002198 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800219e:	2300      	movs	r3, #0
 80021a0:	607b      	str	r3, [r7, #4]
 80021a2:	4b10      	ldr	r3, [pc, #64]	; (80021e4 <HAL_MspInit+0x4c>)
 80021a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a6:	4a0f      	ldr	r2, [pc, #60]	; (80021e4 <HAL_MspInit+0x4c>)
 80021a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021ac:	6453      	str	r3, [r2, #68]	; 0x44
 80021ae:	4b0d      	ldr	r3, [pc, #52]	; (80021e4 <HAL_MspInit+0x4c>)
 80021b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021b6:	607b      	str	r3, [r7, #4]
 80021b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021ba:	2300      	movs	r3, #0
 80021bc:	603b      	str	r3, [r7, #0]
 80021be:	4b09      	ldr	r3, [pc, #36]	; (80021e4 <HAL_MspInit+0x4c>)
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	4a08      	ldr	r2, [pc, #32]	; (80021e4 <HAL_MspInit+0x4c>)
 80021c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021c8:	6413      	str	r3, [r2, #64]	; 0x40
 80021ca:	4b06      	ldr	r3, [pc, #24]	; (80021e4 <HAL_MspInit+0x4c>)
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d2:	603b      	str	r3, [r7, #0]
 80021d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021d6:	bf00      	nop
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	40023800 	.word	0x40023800

080021e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021ec:	e7fe      	b.n	80021ec <NMI_Handler+0x4>

080021ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021ee:	b480      	push	{r7}
 80021f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021f2:	e7fe      	b.n	80021f2 <HardFault_Handler+0x4>

080021f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021f8:	e7fe      	b.n	80021f8 <MemManage_Handler+0x4>

080021fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021fa:	b480      	push	{r7}
 80021fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021fe:	e7fe      	b.n	80021fe <BusFault_Handler+0x4>

08002200 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002204:	e7fe      	b.n	8002204 <UsageFault_Handler+0x4>

08002206 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002206:	b480      	push	{r7}
 8002208:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800220a:	bf00      	nop
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002218:	bf00      	nop
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002222:	b480      	push	{r7}
 8002224:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002226:	bf00      	nop
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002234:	f000 f9d2 	bl	80025dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002238:	bf00      	nop
 800223a:	bd80      	pop	{r7, pc}

0800223c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002240:	4802      	ldr	r0, [pc, #8]	; (800224c <SPI1_IRQHandler+0x10>)
 8002242:	f002 f8ab 	bl	800439c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	200005d0 	.word	0x200005d0

08002250 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
	return 1;
 8002254:	2301      	movs	r3, #1
}
 8002256:	4618      	mov	r0, r3
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <_kill>:

int _kill(int pid, int sig)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800226a:	f002 fe6d 	bl	8004f48 <__errno>
 800226e:	4603      	mov	r3, r0
 8002270:	2216      	movs	r2, #22
 8002272:	601a      	str	r2, [r3, #0]
	return -1;
 8002274:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002278:	4618      	mov	r0, r3
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <_exit>:

void _exit (int status)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002288:	f04f 31ff 	mov.w	r1, #4294967295
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f7ff ffe7 	bl	8002260 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002292:	e7fe      	b.n	8002292 <_exit+0x12>

08002294 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022a0:	2300      	movs	r3, #0
 80022a2:	617b      	str	r3, [r7, #20]
 80022a4:	e00a      	b.n	80022bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022a6:	f3af 8000 	nop.w
 80022aa:	4601      	mov	r1, r0
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	1c5a      	adds	r2, r3, #1
 80022b0:	60ba      	str	r2, [r7, #8]
 80022b2:	b2ca      	uxtb	r2, r1
 80022b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	3301      	adds	r3, #1
 80022ba:	617b      	str	r3, [r7, #20]
 80022bc:	697a      	ldr	r2, [r7, #20]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	dbf0      	blt.n	80022a6 <_read+0x12>
	}

return len;
 80022c4:	687b      	ldr	r3, [r7, #4]
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3718      	adds	r7, #24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b086      	sub	sp, #24
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	60f8      	str	r0, [r7, #12]
 80022d6:	60b9      	str	r1, [r7, #8]
 80022d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022da:	2300      	movs	r3, #0
 80022dc:	617b      	str	r3, [r7, #20]
 80022de:	e009      	b.n	80022f4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	1c5a      	adds	r2, r3, #1
 80022e4:	60ba      	str	r2, [r7, #8]
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	3301      	adds	r3, #1
 80022f2:	617b      	str	r3, [r7, #20]
 80022f4:	697a      	ldr	r2, [r7, #20]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	dbf1      	blt.n	80022e0 <_write+0x12>
	}
	return len;
 80022fc:	687b      	ldr	r3, [r7, #4]
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3718      	adds	r7, #24
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <_close>:

int _close(int file)
{
 8002306:	b480      	push	{r7}
 8002308:	b083      	sub	sp, #12
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
	return -1;
 800230e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002312:	4618      	mov	r0, r3
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800231e:	b480      	push	{r7}
 8002320:	b083      	sub	sp, #12
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
 8002326:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800232e:	605a      	str	r2, [r3, #4]
	return 0;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr

0800233e <_isatty>:

int _isatty(int file)
{
 800233e:	b480      	push	{r7}
 8002340:	b083      	sub	sp, #12
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
	return 1;
 8002346:	2301      	movs	r3, #1
}
 8002348:	4618      	mov	r0, r3
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
	return 0;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3714      	adds	r7, #20
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
	...

08002370 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002378:	4a14      	ldr	r2, [pc, #80]	; (80023cc <_sbrk+0x5c>)
 800237a:	4b15      	ldr	r3, [pc, #84]	; (80023d0 <_sbrk+0x60>)
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002384:	4b13      	ldr	r3, [pc, #76]	; (80023d4 <_sbrk+0x64>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d102      	bne.n	8002392 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800238c:	4b11      	ldr	r3, [pc, #68]	; (80023d4 <_sbrk+0x64>)
 800238e:	4a12      	ldr	r2, [pc, #72]	; (80023d8 <_sbrk+0x68>)
 8002390:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002392:	4b10      	ldr	r3, [pc, #64]	; (80023d4 <_sbrk+0x64>)
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4413      	add	r3, r2
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	429a      	cmp	r2, r3
 800239e:	d207      	bcs.n	80023b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023a0:	f002 fdd2 	bl	8004f48 <__errno>
 80023a4:	4603      	mov	r3, r0
 80023a6:	220c      	movs	r2, #12
 80023a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023aa:	f04f 33ff 	mov.w	r3, #4294967295
 80023ae:	e009      	b.n	80023c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023b0:	4b08      	ldr	r3, [pc, #32]	; (80023d4 <_sbrk+0x64>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023b6:	4b07      	ldr	r3, [pc, #28]	; (80023d4 <_sbrk+0x64>)
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4413      	add	r3, r2
 80023be:	4a05      	ldr	r2, [pc, #20]	; (80023d4 <_sbrk+0x64>)
 80023c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023c2:	68fb      	ldr	r3, [r7, #12]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3718      	adds	r7, #24
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	20020000 	.word	0x20020000
 80023d0:	00000400 	.word	0x00000400
 80023d4:	20000628 	.word	0x20000628
 80023d8:	20000688 	.word	0x20000688

080023dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023e0:	4b06      	ldr	r3, [pc, #24]	; (80023fc <SystemInit+0x20>)
 80023e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e6:	4a05      	ldr	r2, [pc, #20]	; (80023fc <SystemInit+0x20>)
 80023e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023f0:	bf00      	nop
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	e000ed00 	.word	0xe000ed00

08002400 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002404:	4b11      	ldr	r3, [pc, #68]	; (800244c <MX_USART2_UART_Init+0x4c>)
 8002406:	4a12      	ldr	r2, [pc, #72]	; (8002450 <MX_USART2_UART_Init+0x50>)
 8002408:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800240a:	4b10      	ldr	r3, [pc, #64]	; (800244c <MX_USART2_UART_Init+0x4c>)
 800240c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002410:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002412:	4b0e      	ldr	r3, [pc, #56]	; (800244c <MX_USART2_UART_Init+0x4c>)
 8002414:	2200      	movs	r2, #0
 8002416:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002418:	4b0c      	ldr	r3, [pc, #48]	; (800244c <MX_USART2_UART_Init+0x4c>)
 800241a:	2200      	movs	r2, #0
 800241c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800241e:	4b0b      	ldr	r3, [pc, #44]	; (800244c <MX_USART2_UART_Init+0x4c>)
 8002420:	2200      	movs	r2, #0
 8002422:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002424:	4b09      	ldr	r3, [pc, #36]	; (800244c <MX_USART2_UART_Init+0x4c>)
 8002426:	220c      	movs	r2, #12
 8002428:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800242a:	4b08      	ldr	r3, [pc, #32]	; (800244c <MX_USART2_UART_Init+0x4c>)
 800242c:	2200      	movs	r2, #0
 800242e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002430:	4b06      	ldr	r3, [pc, #24]	; (800244c <MX_USART2_UART_Init+0x4c>)
 8002432:	2200      	movs	r2, #0
 8002434:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002436:	4805      	ldr	r0, [pc, #20]	; (800244c <MX_USART2_UART_Init+0x4c>)
 8002438:	f002 f9a6 	bl	8004788 <HAL_UART_Init>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002442:	f7ff fd83 	bl	8001f4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002446:	bf00      	nop
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	2000062c 	.word	0x2000062c
 8002450:	40004400 	.word	0x40004400

08002454 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b08a      	sub	sp, #40	; 0x28
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800245c:	f107 0314 	add.w	r3, r7, #20
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	605a      	str	r2, [r3, #4]
 8002466:	609a      	str	r2, [r3, #8]
 8002468:	60da      	str	r2, [r3, #12]
 800246a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a19      	ldr	r2, [pc, #100]	; (80024d8 <HAL_UART_MspInit+0x84>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d12b      	bne.n	80024ce <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	613b      	str	r3, [r7, #16]
 800247a:	4b18      	ldr	r3, [pc, #96]	; (80024dc <HAL_UART_MspInit+0x88>)
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	4a17      	ldr	r2, [pc, #92]	; (80024dc <HAL_UART_MspInit+0x88>)
 8002480:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002484:	6413      	str	r3, [r2, #64]	; 0x40
 8002486:	4b15      	ldr	r3, [pc, #84]	; (80024dc <HAL_UART_MspInit+0x88>)
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248e:	613b      	str	r3, [r7, #16]
 8002490:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002492:	2300      	movs	r3, #0
 8002494:	60fb      	str	r3, [r7, #12]
 8002496:	4b11      	ldr	r3, [pc, #68]	; (80024dc <HAL_UART_MspInit+0x88>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	4a10      	ldr	r2, [pc, #64]	; (80024dc <HAL_UART_MspInit+0x88>)
 800249c:	f043 0301 	orr.w	r3, r3, #1
 80024a0:	6313      	str	r3, [r2, #48]	; 0x30
 80024a2:	4b0e      	ldr	r3, [pc, #56]	; (80024dc <HAL_UART_MspInit+0x88>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80024ae:	230c      	movs	r3, #12
 80024b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b2:	2302      	movs	r3, #2
 80024b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b6:	2300      	movs	r3, #0
 80024b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ba:	2303      	movs	r3, #3
 80024bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024be:	2307      	movs	r3, #7
 80024c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c2:	f107 0314 	add.w	r3, r7, #20
 80024c6:	4619      	mov	r1, r3
 80024c8:	4805      	ldr	r0, [pc, #20]	; (80024e0 <HAL_UART_MspInit+0x8c>)
 80024ca:	f000 fa31 	bl	8002930 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80024ce:	bf00      	nop
 80024d0:	3728      	adds	r7, #40	; 0x28
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40004400 	.word	0x40004400
 80024dc:	40023800 	.word	0x40023800
 80024e0:	40020000 	.word	0x40020000

080024e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80024e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800251c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024e8:	480d      	ldr	r0, [pc, #52]	; (8002520 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80024ea:	490e      	ldr	r1, [pc, #56]	; (8002524 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80024ec:	4a0e      	ldr	r2, [pc, #56]	; (8002528 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024f0:	e002      	b.n	80024f8 <LoopCopyDataInit>

080024f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024f6:	3304      	adds	r3, #4

080024f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024fc:	d3f9      	bcc.n	80024f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024fe:	4a0b      	ldr	r2, [pc, #44]	; (800252c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002500:	4c0b      	ldr	r4, [pc, #44]	; (8002530 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002502:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002504:	e001      	b.n	800250a <LoopFillZerobss>

08002506 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002506:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002508:	3204      	adds	r2, #4

0800250a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800250a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800250c:	d3fb      	bcc.n	8002506 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800250e:	f7ff ff65 	bl	80023dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002512:	f002 fd31 	bl	8004f78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002516:	f7ff fc9b 	bl	8001e50 <main>
  bx  lr    
 800251a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800251c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002520:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002524:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8002528:	08006e7c 	.word	0x08006e7c
  ldr r2, =_sbss
 800252c:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8002530:	20000684 	.word	0x20000684

08002534 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002534:	e7fe      	b.n	8002534 <ADC_IRQHandler>
	...

08002538 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800253c:	4b0e      	ldr	r3, [pc, #56]	; (8002578 <HAL_Init+0x40>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a0d      	ldr	r2, [pc, #52]	; (8002578 <HAL_Init+0x40>)
 8002542:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002546:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002548:	4b0b      	ldr	r3, [pc, #44]	; (8002578 <HAL_Init+0x40>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a0a      	ldr	r2, [pc, #40]	; (8002578 <HAL_Init+0x40>)
 800254e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002552:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002554:	4b08      	ldr	r3, [pc, #32]	; (8002578 <HAL_Init+0x40>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a07      	ldr	r2, [pc, #28]	; (8002578 <HAL_Init+0x40>)
 800255a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800255e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002560:	2003      	movs	r0, #3
 8002562:	f000 f973 	bl	800284c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002566:	200f      	movs	r0, #15
 8002568:	f000 f808 	bl	800257c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800256c:	f7ff fe14 	bl	8002198 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	40023c00 	.word	0x40023c00

0800257c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002584:	4b12      	ldr	r3, [pc, #72]	; (80025d0 <HAL_InitTick+0x54>)
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	4b12      	ldr	r3, [pc, #72]	; (80025d4 <HAL_InitTick+0x58>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	4619      	mov	r1, r3
 800258e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002592:	fbb3 f3f1 	udiv	r3, r3, r1
 8002596:	fbb2 f3f3 	udiv	r3, r2, r3
 800259a:	4618      	mov	r0, r3
 800259c:	f000 f999 	bl	80028d2 <HAL_SYSTICK_Config>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e00e      	b.n	80025c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2b0f      	cmp	r3, #15
 80025ae:	d80a      	bhi.n	80025c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025b0:	2200      	movs	r2, #0
 80025b2:	6879      	ldr	r1, [r7, #4]
 80025b4:	f04f 30ff 	mov.w	r0, #4294967295
 80025b8:	f000 f953 	bl	8002862 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025bc:	4a06      	ldr	r2, [pc, #24]	; (80025d8 <HAL_InitTick+0x5c>)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025c2:	2300      	movs	r3, #0
 80025c4:	e000      	b.n	80025c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	20000028 	.word	0x20000028
 80025d4:	20000030 	.word	0x20000030
 80025d8:	2000002c 	.word	0x2000002c

080025dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025e0:	4b06      	ldr	r3, [pc, #24]	; (80025fc <HAL_IncTick+0x20>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	461a      	mov	r2, r3
 80025e6:	4b06      	ldr	r3, [pc, #24]	; (8002600 <HAL_IncTick+0x24>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4413      	add	r3, r2
 80025ec:	4a04      	ldr	r2, [pc, #16]	; (8002600 <HAL_IncTick+0x24>)
 80025ee:	6013      	str	r3, [r2, #0]
}
 80025f0:	bf00      	nop
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	20000030 	.word	0x20000030
 8002600:	20000670 	.word	0x20000670

08002604 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  return uwTick;
 8002608:	4b03      	ldr	r3, [pc, #12]	; (8002618 <HAL_GetTick+0x14>)
 800260a:	681b      	ldr	r3, [r3, #0]
}
 800260c:	4618      	mov	r0, r3
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	20000670 	.word	0x20000670

0800261c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002624:	f7ff ffee 	bl	8002604 <HAL_GetTick>
 8002628:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002634:	d005      	beq.n	8002642 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002636:	4b0a      	ldr	r3, [pc, #40]	; (8002660 <HAL_Delay+0x44>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	461a      	mov	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	4413      	add	r3, r2
 8002640:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002642:	bf00      	nop
 8002644:	f7ff ffde 	bl	8002604 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	429a      	cmp	r2, r3
 8002652:	d8f7      	bhi.n	8002644 <HAL_Delay+0x28>
  {
  }
}
 8002654:	bf00      	nop
 8002656:	bf00      	nop
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	20000030 	.word	0x20000030

08002664 <__NVIC_SetPriorityGrouping>:
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002674:	4b0c      	ldr	r3, [pc, #48]	; (80026a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800267a:	68ba      	ldr	r2, [r7, #8]
 800267c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002680:	4013      	ands	r3, r2
 8002682:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800268c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002696:	4a04      	ldr	r2, [pc, #16]	; (80026a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	60d3      	str	r3, [r2, #12]
}
 800269c:	bf00      	nop
 800269e:	3714      	adds	r7, #20
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	e000ed00 	.word	0xe000ed00

080026ac <__NVIC_GetPriorityGrouping>:
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026b0:	4b04      	ldr	r3, [pc, #16]	; (80026c4 <__NVIC_GetPriorityGrouping+0x18>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	0a1b      	lsrs	r3, r3, #8
 80026b6:	f003 0307 	and.w	r3, r3, #7
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	e000ed00 	.word	0xe000ed00

080026c8 <__NVIC_EnableIRQ>:
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	4603      	mov	r3, r0
 80026d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	db0b      	blt.n	80026f2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026da:	79fb      	ldrb	r3, [r7, #7]
 80026dc:	f003 021f 	and.w	r2, r3, #31
 80026e0:	4907      	ldr	r1, [pc, #28]	; (8002700 <__NVIC_EnableIRQ+0x38>)
 80026e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e6:	095b      	lsrs	r3, r3, #5
 80026e8:	2001      	movs	r0, #1
 80026ea:	fa00 f202 	lsl.w	r2, r0, r2
 80026ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80026f2:	bf00      	nop
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	e000e100 	.word	0xe000e100

08002704 <__NVIC_DisableIRQ>:
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	4603      	mov	r3, r0
 800270c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800270e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002712:	2b00      	cmp	r3, #0
 8002714:	db12      	blt.n	800273c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002716:	79fb      	ldrb	r3, [r7, #7]
 8002718:	f003 021f 	and.w	r2, r3, #31
 800271c:	490a      	ldr	r1, [pc, #40]	; (8002748 <__NVIC_DisableIRQ+0x44>)
 800271e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002722:	095b      	lsrs	r3, r3, #5
 8002724:	2001      	movs	r0, #1
 8002726:	fa00 f202 	lsl.w	r2, r0, r2
 800272a:	3320      	adds	r3, #32
 800272c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002730:	f3bf 8f4f 	dsb	sy
}
 8002734:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002736:	f3bf 8f6f 	isb	sy
}
 800273a:	bf00      	nop
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr
 8002748:	e000e100 	.word	0xe000e100

0800274c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	4603      	mov	r3, r0
 8002754:	6039      	str	r1, [r7, #0]
 8002756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275c:	2b00      	cmp	r3, #0
 800275e:	db0a      	blt.n	8002776 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	b2da      	uxtb	r2, r3
 8002764:	490c      	ldr	r1, [pc, #48]	; (8002798 <__NVIC_SetPriority+0x4c>)
 8002766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276a:	0112      	lsls	r2, r2, #4
 800276c:	b2d2      	uxtb	r2, r2
 800276e:	440b      	add	r3, r1
 8002770:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002774:	e00a      	b.n	800278c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	b2da      	uxtb	r2, r3
 800277a:	4908      	ldr	r1, [pc, #32]	; (800279c <__NVIC_SetPriority+0x50>)
 800277c:	79fb      	ldrb	r3, [r7, #7]
 800277e:	f003 030f 	and.w	r3, r3, #15
 8002782:	3b04      	subs	r3, #4
 8002784:	0112      	lsls	r2, r2, #4
 8002786:	b2d2      	uxtb	r2, r2
 8002788:	440b      	add	r3, r1
 800278a:	761a      	strb	r2, [r3, #24]
}
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr
 8002798:	e000e100 	.word	0xe000e100
 800279c:	e000ed00 	.word	0xe000ed00

080027a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b089      	sub	sp, #36	; 0x24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f003 0307 	and.w	r3, r3, #7
 80027b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	f1c3 0307 	rsb	r3, r3, #7
 80027ba:	2b04      	cmp	r3, #4
 80027bc:	bf28      	it	cs
 80027be:	2304      	movcs	r3, #4
 80027c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	3304      	adds	r3, #4
 80027c6:	2b06      	cmp	r3, #6
 80027c8:	d902      	bls.n	80027d0 <NVIC_EncodePriority+0x30>
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	3b03      	subs	r3, #3
 80027ce:	e000      	b.n	80027d2 <NVIC_EncodePriority+0x32>
 80027d0:	2300      	movs	r3, #0
 80027d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027d4:	f04f 32ff 	mov.w	r2, #4294967295
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	43da      	mvns	r2, r3
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	401a      	ands	r2, r3
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027e8:	f04f 31ff 	mov.w	r1, #4294967295
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	fa01 f303 	lsl.w	r3, r1, r3
 80027f2:	43d9      	mvns	r1, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027f8:	4313      	orrs	r3, r2
         );
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3724      	adds	r7, #36	; 0x24
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
	...

08002808 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	3b01      	subs	r3, #1
 8002814:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002818:	d301      	bcc.n	800281e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800281a:	2301      	movs	r3, #1
 800281c:	e00f      	b.n	800283e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800281e:	4a0a      	ldr	r2, [pc, #40]	; (8002848 <SysTick_Config+0x40>)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	3b01      	subs	r3, #1
 8002824:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002826:	210f      	movs	r1, #15
 8002828:	f04f 30ff 	mov.w	r0, #4294967295
 800282c:	f7ff ff8e 	bl	800274c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002830:	4b05      	ldr	r3, [pc, #20]	; (8002848 <SysTick_Config+0x40>)
 8002832:	2200      	movs	r2, #0
 8002834:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002836:	4b04      	ldr	r3, [pc, #16]	; (8002848 <SysTick_Config+0x40>)
 8002838:	2207      	movs	r2, #7
 800283a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	e000e010 	.word	0xe000e010

0800284c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f7ff ff05 	bl	8002664 <__NVIC_SetPriorityGrouping>
}
 800285a:	bf00      	nop
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002862:	b580      	push	{r7, lr}
 8002864:	b086      	sub	sp, #24
 8002866:	af00      	add	r7, sp, #0
 8002868:	4603      	mov	r3, r0
 800286a:	60b9      	str	r1, [r7, #8]
 800286c:	607a      	str	r2, [r7, #4]
 800286e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002870:	2300      	movs	r3, #0
 8002872:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002874:	f7ff ff1a 	bl	80026ac <__NVIC_GetPriorityGrouping>
 8002878:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	68b9      	ldr	r1, [r7, #8]
 800287e:	6978      	ldr	r0, [r7, #20]
 8002880:	f7ff ff8e 	bl	80027a0 <NVIC_EncodePriority>
 8002884:	4602      	mov	r2, r0
 8002886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800288a:	4611      	mov	r1, r2
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff ff5d 	bl	800274c <__NVIC_SetPriority>
}
 8002892:	bf00      	nop
 8002894:	3718      	adds	r7, #24
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b082      	sub	sp, #8
 800289e:	af00      	add	r7, sp, #0
 80028a0:	4603      	mov	r3, r0
 80028a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7ff ff0d 	bl	80026c8 <__NVIC_EnableIRQ>
}
 80028ae:	bf00      	nop
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b082      	sub	sp, #8
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	4603      	mov	r3, r0
 80028be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80028c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff ff1d 	bl	8002704 <__NVIC_DisableIRQ>
}
 80028ca:	bf00      	nop
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b082      	sub	sp, #8
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f7ff ff94 	bl	8002808 <SysTick_Config>
 80028e0:	4603      	mov	r3, r0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028ea:	b480      	push	{r7}
 80028ec:	b083      	sub	sp, #12
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d004      	beq.n	8002908 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2280      	movs	r2, #128	; 0x80
 8002902:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e00c      	b.n	8002922 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2205      	movs	r2, #5
 800290c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f022 0201 	bic.w	r2, r2, #1
 800291e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
	...

08002930 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002930:	b480      	push	{r7}
 8002932:	b089      	sub	sp, #36	; 0x24
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800293a:	2300      	movs	r3, #0
 800293c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800293e:	2300      	movs	r3, #0
 8002940:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002942:	2300      	movs	r3, #0
 8002944:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002946:	2300      	movs	r3, #0
 8002948:	61fb      	str	r3, [r7, #28]
 800294a:	e159      	b.n	8002c00 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800294c:	2201      	movs	r2, #1
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	697a      	ldr	r2, [r7, #20]
 800295c:	4013      	ands	r3, r2
 800295e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	429a      	cmp	r2, r3
 8002966:	f040 8148 	bne.w	8002bfa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f003 0303 	and.w	r3, r3, #3
 8002972:	2b01      	cmp	r3, #1
 8002974:	d005      	beq.n	8002982 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800297e:	2b02      	cmp	r3, #2
 8002980:	d130      	bne.n	80029e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	2203      	movs	r2, #3
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	43db      	mvns	r3, r3
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	4013      	ands	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	68da      	ldr	r2, [r3, #12]
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029b8:	2201      	movs	r2, #1
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	43db      	mvns	r3, r3
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	4013      	ands	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	091b      	lsrs	r3, r3, #4
 80029ce:	f003 0201 	and.w	r2, r3, #1
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	4313      	orrs	r3, r2
 80029dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f003 0303 	and.w	r3, r3, #3
 80029ec:	2b03      	cmp	r3, #3
 80029ee:	d017      	beq.n	8002a20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	2203      	movs	r2, #3
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	43db      	mvns	r3, r3
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	4013      	ands	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	689a      	ldr	r2, [r3, #8]
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f003 0303 	and.w	r3, r3, #3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d123      	bne.n	8002a74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	08da      	lsrs	r2, r3, #3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	3208      	adds	r2, #8
 8002a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	f003 0307 	and.w	r3, r3, #7
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	220f      	movs	r2, #15
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	691a      	ldr	r2, [r3, #16]
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	f003 0307 	and.w	r3, r3, #7
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	08da      	lsrs	r2, r3, #3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	3208      	adds	r2, #8
 8002a6e:	69b9      	ldr	r1, [r7, #24]
 8002a70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	2203      	movs	r2, #3
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	43db      	mvns	r3, r3
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f003 0203 	and.w	r2, r3, #3
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f000 80a2 	beq.w	8002bfa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60fb      	str	r3, [r7, #12]
 8002aba:	4b57      	ldr	r3, [pc, #348]	; (8002c18 <HAL_GPIO_Init+0x2e8>)
 8002abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002abe:	4a56      	ldr	r2, [pc, #344]	; (8002c18 <HAL_GPIO_Init+0x2e8>)
 8002ac0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ac6:	4b54      	ldr	r3, [pc, #336]	; (8002c18 <HAL_GPIO_Init+0x2e8>)
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ace:	60fb      	str	r3, [r7, #12]
 8002ad0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ad2:	4a52      	ldr	r2, [pc, #328]	; (8002c1c <HAL_GPIO_Init+0x2ec>)
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	089b      	lsrs	r3, r3, #2
 8002ad8:	3302      	adds	r3, #2
 8002ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	f003 0303 	and.w	r3, r3, #3
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	220f      	movs	r2, #15
 8002aea:	fa02 f303 	lsl.w	r3, r2, r3
 8002aee:	43db      	mvns	r3, r3
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	4013      	ands	r3, r2
 8002af4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a49      	ldr	r2, [pc, #292]	; (8002c20 <HAL_GPIO_Init+0x2f0>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d019      	beq.n	8002b32 <HAL_GPIO_Init+0x202>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a48      	ldr	r2, [pc, #288]	; (8002c24 <HAL_GPIO_Init+0x2f4>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d013      	beq.n	8002b2e <HAL_GPIO_Init+0x1fe>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a47      	ldr	r2, [pc, #284]	; (8002c28 <HAL_GPIO_Init+0x2f8>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d00d      	beq.n	8002b2a <HAL_GPIO_Init+0x1fa>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a46      	ldr	r2, [pc, #280]	; (8002c2c <HAL_GPIO_Init+0x2fc>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d007      	beq.n	8002b26 <HAL_GPIO_Init+0x1f6>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a45      	ldr	r2, [pc, #276]	; (8002c30 <HAL_GPIO_Init+0x300>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d101      	bne.n	8002b22 <HAL_GPIO_Init+0x1f2>
 8002b1e:	2304      	movs	r3, #4
 8002b20:	e008      	b.n	8002b34 <HAL_GPIO_Init+0x204>
 8002b22:	2307      	movs	r3, #7
 8002b24:	e006      	b.n	8002b34 <HAL_GPIO_Init+0x204>
 8002b26:	2303      	movs	r3, #3
 8002b28:	e004      	b.n	8002b34 <HAL_GPIO_Init+0x204>
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	e002      	b.n	8002b34 <HAL_GPIO_Init+0x204>
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e000      	b.n	8002b34 <HAL_GPIO_Init+0x204>
 8002b32:	2300      	movs	r3, #0
 8002b34:	69fa      	ldr	r2, [r7, #28]
 8002b36:	f002 0203 	and.w	r2, r2, #3
 8002b3a:	0092      	lsls	r2, r2, #2
 8002b3c:	4093      	lsls	r3, r2
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b44:	4935      	ldr	r1, [pc, #212]	; (8002c1c <HAL_GPIO_Init+0x2ec>)
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	089b      	lsrs	r3, r3, #2
 8002b4a:	3302      	adds	r3, #2
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b52:	4b38      	ldr	r3, [pc, #224]	; (8002c34 <HAL_GPIO_Init+0x304>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	43db      	mvns	r3, r3
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d003      	beq.n	8002b76 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b76:	4a2f      	ldr	r2, [pc, #188]	; (8002c34 <HAL_GPIO_Init+0x304>)
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002b7c:	4b2d      	ldr	r3, [pc, #180]	; (8002c34 <HAL_GPIO_Init+0x304>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	43db      	mvns	r3, r3
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d003      	beq.n	8002ba0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ba0:	4a24      	ldr	r2, [pc, #144]	; (8002c34 <HAL_GPIO_Init+0x304>)
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ba6:	4b23      	ldr	r3, [pc, #140]	; (8002c34 <HAL_GPIO_Init+0x304>)
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	43db      	mvns	r3, r3
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d003      	beq.n	8002bca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bca:	4a1a      	ldr	r2, [pc, #104]	; (8002c34 <HAL_GPIO_Init+0x304>)
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bd0:	4b18      	ldr	r3, [pc, #96]	; (8002c34 <HAL_GPIO_Init+0x304>)
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d003      	beq.n	8002bf4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bf4:	4a0f      	ldr	r2, [pc, #60]	; (8002c34 <HAL_GPIO_Init+0x304>)
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	61fb      	str	r3, [r7, #28]
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	2b0f      	cmp	r3, #15
 8002c04:	f67f aea2 	bls.w	800294c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c08:	bf00      	nop
 8002c0a:	bf00      	nop
 8002c0c:	3724      	adds	r7, #36	; 0x24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	40023800 	.word	0x40023800
 8002c1c:	40013800 	.word	0x40013800
 8002c20:	40020000 	.word	0x40020000
 8002c24:	40020400 	.word	0x40020400
 8002c28:	40020800 	.word	0x40020800
 8002c2c:	40020c00 	.word	0x40020c00
 8002c30:	40021000 	.word	0x40021000
 8002c34:	40013c00 	.word	0x40013c00

08002c38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	460b      	mov	r3, r1
 8002c42:	807b      	strh	r3, [r7, #2]
 8002c44:	4613      	mov	r3, r2
 8002c46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c48:	787b      	ldrb	r3, [r7, #1]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d003      	beq.n	8002c56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c4e:	887a      	ldrh	r2, [r7, #2]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c54:	e003      	b.n	8002c5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c56:	887b      	ldrh	r3, [r7, #2]
 8002c58:	041a      	lsls	r2, r3, #16
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	619a      	str	r2, [r3, #24]
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
	...

08002c6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e12b      	b.n	8002ed6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d106      	bne.n	8002c98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f7ff f894 	bl	8001dc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2224      	movs	r2, #36	; 0x24
 8002c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f022 0201 	bic.w	r2, r2, #1
 8002cae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cbe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002cd0:	f001 f976 	bl	8003fc0 <HAL_RCC_GetPCLK1Freq>
 8002cd4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	4a81      	ldr	r2, [pc, #516]	; (8002ee0 <HAL_I2C_Init+0x274>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d807      	bhi.n	8002cf0 <HAL_I2C_Init+0x84>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	4a80      	ldr	r2, [pc, #512]	; (8002ee4 <HAL_I2C_Init+0x278>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	bf94      	ite	ls
 8002ce8:	2301      	movls	r3, #1
 8002cea:	2300      	movhi	r3, #0
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	e006      	b.n	8002cfe <HAL_I2C_Init+0x92>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	4a7d      	ldr	r2, [pc, #500]	; (8002ee8 <HAL_I2C_Init+0x27c>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	bf94      	ite	ls
 8002cf8:	2301      	movls	r3, #1
 8002cfa:	2300      	movhi	r3, #0
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e0e7      	b.n	8002ed6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	4a78      	ldr	r2, [pc, #480]	; (8002eec <HAL_I2C_Init+0x280>)
 8002d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0e:	0c9b      	lsrs	r3, r3, #18
 8002d10:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68ba      	ldr	r2, [r7, #8]
 8002d22:	430a      	orrs	r2, r1
 8002d24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	4a6a      	ldr	r2, [pc, #424]	; (8002ee0 <HAL_I2C_Init+0x274>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d802      	bhi.n	8002d40 <HAL_I2C_Init+0xd4>
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	e009      	b.n	8002d54 <HAL_I2C_Init+0xe8>
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d46:	fb02 f303 	mul.w	r3, r2, r3
 8002d4a:	4a69      	ldr	r2, [pc, #420]	; (8002ef0 <HAL_I2C_Init+0x284>)
 8002d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d50:	099b      	lsrs	r3, r3, #6
 8002d52:	3301      	adds	r3, #1
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	6812      	ldr	r2, [r2, #0]
 8002d58:	430b      	orrs	r3, r1
 8002d5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	69db      	ldr	r3, [r3, #28]
 8002d62:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d66:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	495c      	ldr	r1, [pc, #368]	; (8002ee0 <HAL_I2C_Init+0x274>)
 8002d70:	428b      	cmp	r3, r1
 8002d72:	d819      	bhi.n	8002da8 <HAL_I2C_Init+0x13c>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	1e59      	subs	r1, r3, #1
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d82:	1c59      	adds	r1, r3, #1
 8002d84:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d88:	400b      	ands	r3, r1
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00a      	beq.n	8002da4 <HAL_I2C_Init+0x138>
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	1e59      	subs	r1, r3, #1
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002da2:	e051      	b.n	8002e48 <HAL_I2C_Init+0x1dc>
 8002da4:	2304      	movs	r3, #4
 8002da6:	e04f      	b.n	8002e48 <HAL_I2C_Init+0x1dc>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d111      	bne.n	8002dd4 <HAL_I2C_Init+0x168>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	1e58      	subs	r0, r3, #1
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6859      	ldr	r1, [r3, #4]
 8002db8:	460b      	mov	r3, r1
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	440b      	add	r3, r1
 8002dbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	bf0c      	ite	eq
 8002dcc:	2301      	moveq	r3, #1
 8002dce:	2300      	movne	r3, #0
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	e012      	b.n	8002dfa <HAL_I2C_Init+0x18e>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	1e58      	subs	r0, r3, #1
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6859      	ldr	r1, [r3, #4]
 8002ddc:	460b      	mov	r3, r1
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	440b      	add	r3, r1
 8002de2:	0099      	lsls	r1, r3, #2
 8002de4:	440b      	add	r3, r1
 8002de6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dea:	3301      	adds	r3, #1
 8002dec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	bf0c      	ite	eq
 8002df4:	2301      	moveq	r3, #1
 8002df6:	2300      	movne	r3, #0
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <HAL_I2C_Init+0x196>
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e022      	b.n	8002e48 <HAL_I2C_Init+0x1dc>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10e      	bne.n	8002e28 <HAL_I2C_Init+0x1bc>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	1e58      	subs	r0, r3, #1
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6859      	ldr	r1, [r3, #4]
 8002e12:	460b      	mov	r3, r1
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	440b      	add	r3, r1
 8002e18:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e26:	e00f      	b.n	8002e48 <HAL_I2C_Init+0x1dc>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	1e58      	subs	r0, r3, #1
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6859      	ldr	r1, [r3, #4]
 8002e30:	460b      	mov	r3, r1
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	440b      	add	r3, r1
 8002e36:	0099      	lsls	r1, r3, #2
 8002e38:	440b      	add	r3, r1
 8002e3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e3e:	3301      	adds	r3, #1
 8002e40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e48:	6879      	ldr	r1, [r7, #4]
 8002e4a:	6809      	ldr	r1, [r1, #0]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	69da      	ldr	r2, [r3, #28]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	431a      	orrs	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	6911      	ldr	r1, [r2, #16]
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	68d2      	ldr	r2, [r2, #12]
 8002e82:	4311      	orrs	r1, r2
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	6812      	ldr	r2, [r2, #0]
 8002e88:	430b      	orrs	r3, r1
 8002e8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	695a      	ldr	r2, [r3, #20]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	431a      	orrs	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f042 0201 	orr.w	r2, r2, #1
 8002eb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2220      	movs	r2, #32
 8002ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	000186a0 	.word	0x000186a0
 8002ee4:	001e847f 	.word	0x001e847f
 8002ee8:	003d08ff 	.word	0x003d08ff
 8002eec:	431bde83 	.word	0x431bde83
 8002ef0:	10624dd3 	.word	0x10624dd3

08002ef4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b088      	sub	sp, #32
 8002ef8:	af02      	add	r7, sp, #8
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	607a      	str	r2, [r7, #4]
 8002efe:	461a      	mov	r2, r3
 8002f00:	460b      	mov	r3, r1
 8002f02:	817b      	strh	r3, [r7, #10]
 8002f04:	4613      	mov	r3, r2
 8002f06:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f08:	f7ff fb7c 	bl	8002604 <HAL_GetTick>
 8002f0c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b20      	cmp	r3, #32
 8002f18:	f040 80e0 	bne.w	80030dc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	9300      	str	r3, [sp, #0]
 8002f20:	2319      	movs	r3, #25
 8002f22:	2201      	movs	r2, #1
 8002f24:	4970      	ldr	r1, [pc, #448]	; (80030e8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f000 fa92 	bl	8003450 <I2C_WaitOnFlagUntilTimeout>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002f32:	2302      	movs	r3, #2
 8002f34:	e0d3      	b.n	80030de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d101      	bne.n	8002f44 <HAL_I2C_Master_Transmit+0x50>
 8002f40:	2302      	movs	r3, #2
 8002f42:	e0cc      	b.n	80030de <HAL_I2C_Master_Transmit+0x1ea>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d007      	beq.n	8002f6a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f042 0201 	orr.w	r2, r2, #1
 8002f68:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f78:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2221      	movs	r2, #33	; 0x21
 8002f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2210      	movs	r2, #16
 8002f86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	893a      	ldrh	r2, [r7, #8]
 8002f9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	4a50      	ldr	r2, [pc, #320]	; (80030ec <HAL_I2C_Master_Transmit+0x1f8>)
 8002faa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002fac:	8979      	ldrh	r1, [r7, #10]
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	6a3a      	ldr	r2, [r7, #32]
 8002fb2:	68f8      	ldr	r0, [r7, #12]
 8002fb4:	f000 f9ca 	bl	800334c <I2C_MasterRequestWrite>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e08d      	b.n	80030de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	613b      	str	r3, [r7, #16]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	695b      	ldr	r3, [r3, #20]
 8002fcc:	613b      	str	r3, [r7, #16]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	613b      	str	r3, [r7, #16]
 8002fd6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002fd8:	e066      	b.n	80030a8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	6a39      	ldr	r1, [r7, #32]
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	f000 fb0c 	bl	80035fc <I2C_WaitOnTXEFlagUntilTimeout>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00d      	beq.n	8003006 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	2b04      	cmp	r3, #4
 8002ff0:	d107      	bne.n	8003002 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003000:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e06b      	b.n	80030de <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300a:	781a      	ldrb	r2, [r3, #0]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003016:	1c5a      	adds	r2, r3, #1
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003020:	b29b      	uxth	r3, r3
 8003022:	3b01      	subs	r3, #1
 8003024:	b29a      	uxth	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800302e:	3b01      	subs	r3, #1
 8003030:	b29a      	uxth	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	f003 0304 	and.w	r3, r3, #4
 8003040:	2b04      	cmp	r3, #4
 8003042:	d11b      	bne.n	800307c <HAL_I2C_Master_Transmit+0x188>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003048:	2b00      	cmp	r3, #0
 800304a:	d017      	beq.n	800307c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003050:	781a      	ldrb	r2, [r3, #0]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305c:	1c5a      	adds	r2, r3, #1
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003066:	b29b      	uxth	r3, r3
 8003068:	3b01      	subs	r3, #1
 800306a:	b29a      	uxth	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003074:	3b01      	subs	r3, #1
 8003076:	b29a      	uxth	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	6a39      	ldr	r1, [r7, #32]
 8003080:	68f8      	ldr	r0, [r7, #12]
 8003082:	f000 fafc 	bl	800367e <I2C_WaitOnBTFFlagUntilTimeout>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00d      	beq.n	80030a8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003090:	2b04      	cmp	r3, #4
 8003092:	d107      	bne.n	80030a4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030a2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e01a      	b.n	80030de <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d194      	bne.n	8002fda <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2220      	movs	r2, #32
 80030c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80030d8:	2300      	movs	r3, #0
 80030da:	e000      	b.n	80030de <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80030dc:	2302      	movs	r3, #2
  }
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3718      	adds	r7, #24
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	00100002 	.word	0x00100002
 80030ec:	ffff0000 	.word	0xffff0000

080030f0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b08a      	sub	sp, #40	; 0x28
 80030f4:	af02      	add	r7, sp, #8
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	607a      	str	r2, [r7, #4]
 80030fa:	603b      	str	r3, [r7, #0]
 80030fc:	460b      	mov	r3, r1
 80030fe:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003100:	f7ff fa80 	bl	8002604 <HAL_GetTick>
 8003104:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003106:	2301      	movs	r3, #1
 8003108:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b20      	cmp	r3, #32
 8003114:	f040 8111 	bne.w	800333a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	9300      	str	r3, [sp, #0]
 800311c:	2319      	movs	r3, #25
 800311e:	2201      	movs	r2, #1
 8003120:	4988      	ldr	r1, [pc, #544]	; (8003344 <HAL_I2C_IsDeviceReady+0x254>)
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f000 f994 	bl	8003450 <I2C_WaitOnFlagUntilTimeout>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800312e:	2302      	movs	r3, #2
 8003130:	e104      	b.n	800333c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003138:	2b01      	cmp	r3, #1
 800313a:	d101      	bne.n	8003140 <HAL_I2C_IsDeviceReady+0x50>
 800313c:	2302      	movs	r3, #2
 800313e:	e0fd      	b.n	800333c <HAL_I2C_IsDeviceReady+0x24c>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b01      	cmp	r3, #1
 8003154:	d007      	beq.n	8003166 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f042 0201 	orr.w	r2, r2, #1
 8003164:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003174:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2224      	movs	r2, #36	; 0x24
 800317a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	4a70      	ldr	r2, [pc, #448]	; (8003348 <HAL_I2C_IsDeviceReady+0x258>)
 8003188:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003198:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	9300      	str	r3, [sp, #0]
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	f000 f952 	bl	8003450 <I2C_WaitOnFlagUntilTimeout>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00d      	beq.n	80031ce <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031c0:	d103      	bne.n	80031ca <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031c8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e0b6      	b.n	800333c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031ce:	897b      	ldrh	r3, [r7, #10]
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	461a      	mov	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80031dc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80031de:	f7ff fa11 	bl	8002604 <HAL_GetTick>
 80031e2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	bf0c      	ite	eq
 80031f2:	2301      	moveq	r3, #1
 80031f4:	2300      	movne	r3, #0
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	695b      	ldr	r3, [r3, #20]
 8003200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003204:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003208:	bf0c      	ite	eq
 800320a:	2301      	moveq	r3, #1
 800320c:	2300      	movne	r3, #0
 800320e:	b2db      	uxtb	r3, r3
 8003210:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003212:	e025      	b.n	8003260 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003214:	f7ff f9f6 	bl	8002604 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	429a      	cmp	r2, r3
 8003222:	d302      	bcc.n	800322a <HAL_I2C_IsDeviceReady+0x13a>
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d103      	bne.n	8003232 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	22a0      	movs	r2, #160	; 0xa0
 800322e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	695b      	ldr	r3, [r3, #20]
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b02      	cmp	r3, #2
 800323e:	bf0c      	ite	eq
 8003240:	2301      	moveq	r3, #1
 8003242:	2300      	movne	r3, #0
 8003244:	b2db      	uxtb	r3, r3
 8003246:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003252:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003256:	bf0c      	ite	eq
 8003258:	2301      	moveq	r3, #1
 800325a:	2300      	movne	r3, #0
 800325c:	b2db      	uxtb	r3, r3
 800325e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003266:	b2db      	uxtb	r3, r3
 8003268:	2ba0      	cmp	r3, #160	; 0xa0
 800326a:	d005      	beq.n	8003278 <HAL_I2C_IsDeviceReady+0x188>
 800326c:	7dfb      	ldrb	r3, [r7, #23]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d102      	bne.n	8003278 <HAL_I2C_IsDeviceReady+0x188>
 8003272:	7dbb      	ldrb	r3, [r7, #22]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d0cd      	beq.n	8003214 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2220      	movs	r2, #32
 800327c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b02      	cmp	r3, #2
 800328c:	d129      	bne.n	80032e2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800329c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800329e:	2300      	movs	r3, #0
 80032a0:	613b      	str	r3, [r7, #16]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	695b      	ldr	r3, [r3, #20]
 80032a8:	613b      	str	r3, [r7, #16]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	613b      	str	r3, [r7, #16]
 80032b2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	9300      	str	r3, [sp, #0]
 80032b8:	2319      	movs	r3, #25
 80032ba:	2201      	movs	r2, #1
 80032bc:	4921      	ldr	r1, [pc, #132]	; (8003344 <HAL_I2C_IsDeviceReady+0x254>)
 80032be:	68f8      	ldr	r0, [r7, #12]
 80032c0:	f000 f8c6 	bl	8003450 <I2C_WaitOnFlagUntilTimeout>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e036      	b.n	800333c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2220      	movs	r2, #32
 80032d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80032de:	2300      	movs	r3, #0
 80032e0:	e02c      	b.n	800333c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032f0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032fa:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	9300      	str	r3, [sp, #0]
 8003300:	2319      	movs	r3, #25
 8003302:	2201      	movs	r2, #1
 8003304:	490f      	ldr	r1, [pc, #60]	; (8003344 <HAL_I2C_IsDeviceReady+0x254>)
 8003306:	68f8      	ldr	r0, [r7, #12]
 8003308:	f000 f8a2 	bl	8003450 <I2C_WaitOnFlagUntilTimeout>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d001      	beq.n	8003316 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e012      	b.n	800333c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	3301      	adds	r3, #1
 800331a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	429a      	cmp	r2, r3
 8003322:	f4ff af32 	bcc.w	800318a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2220      	movs	r2, #32
 800332a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e000      	b.n	800333c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800333a:	2302      	movs	r3, #2
  }
}
 800333c:	4618      	mov	r0, r3
 800333e:	3720      	adds	r7, #32
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	00100002 	.word	0x00100002
 8003348:	ffff0000 	.word	0xffff0000

0800334c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b088      	sub	sp, #32
 8003350:	af02      	add	r7, sp, #8
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	607a      	str	r2, [r7, #4]
 8003356:	603b      	str	r3, [r7, #0]
 8003358:	460b      	mov	r3, r1
 800335a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003360:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	2b08      	cmp	r3, #8
 8003366:	d006      	beq.n	8003376 <I2C_MasterRequestWrite+0x2a>
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d003      	beq.n	8003376 <I2C_MasterRequestWrite+0x2a>
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003374:	d108      	bne.n	8003388 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003384:	601a      	str	r2, [r3, #0]
 8003386:	e00b      	b.n	80033a0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338c:	2b12      	cmp	r3, #18
 800338e:	d107      	bne.n	80033a0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800339e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	9300      	str	r3, [sp, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f000 f84f 	bl	8003450 <I2C_WaitOnFlagUntilTimeout>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00d      	beq.n	80033d4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033c6:	d103      	bne.n	80033d0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e035      	b.n	8003440 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	691b      	ldr	r3, [r3, #16]
 80033d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033dc:	d108      	bne.n	80033f0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033de:	897b      	ldrh	r3, [r7, #10]
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	461a      	mov	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033ec:	611a      	str	r2, [r3, #16]
 80033ee:	e01b      	b.n	8003428 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80033f0:	897b      	ldrh	r3, [r7, #10]
 80033f2:	11db      	asrs	r3, r3, #7
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	f003 0306 	and.w	r3, r3, #6
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	f063 030f 	orn	r3, r3, #15
 8003400:	b2da      	uxtb	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	490e      	ldr	r1, [pc, #56]	; (8003448 <I2C_MasterRequestWrite+0xfc>)
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	f000 f875 	bl	80034fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e010      	b.n	8003440 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800341e:	897b      	ldrh	r3, [r7, #10]
 8003420:	b2da      	uxtb	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	4907      	ldr	r1, [pc, #28]	; (800344c <I2C_MasterRequestWrite+0x100>)
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f000 f865 	bl	80034fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e000      	b.n	8003440 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3718      	adds	r7, #24
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	00010008 	.word	0x00010008
 800344c:	00010002 	.word	0x00010002

08003450 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	603b      	str	r3, [r7, #0]
 800345c:	4613      	mov	r3, r2
 800345e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003460:	e025      	b.n	80034ae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003468:	d021      	beq.n	80034ae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800346a:	f7ff f8cb 	bl	8002604 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	683a      	ldr	r2, [r7, #0]
 8003476:	429a      	cmp	r2, r3
 8003478:	d302      	bcc.n	8003480 <I2C_WaitOnFlagUntilTimeout+0x30>
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d116      	bne.n	80034ae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2220      	movs	r2, #32
 800348a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349a:	f043 0220 	orr.w	r2, r3, #32
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e023      	b.n	80034f6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	0c1b      	lsrs	r3, r3, #16
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d10d      	bne.n	80034d4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	43da      	mvns	r2, r3
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	4013      	ands	r3, r2
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	bf0c      	ite	eq
 80034ca:	2301      	moveq	r3, #1
 80034cc:	2300      	movne	r3, #0
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	461a      	mov	r2, r3
 80034d2:	e00c      	b.n	80034ee <I2C_WaitOnFlagUntilTimeout+0x9e>
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	43da      	mvns	r2, r3
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	4013      	ands	r3, r2
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	bf0c      	ite	eq
 80034e6:	2301      	moveq	r3, #1
 80034e8:	2300      	movne	r3, #0
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	461a      	mov	r2, r3
 80034ee:	79fb      	ldrb	r3, [r7, #7]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d0b6      	beq.n	8003462 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3710      	adds	r7, #16
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}

080034fe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b084      	sub	sp, #16
 8003502:	af00      	add	r7, sp, #0
 8003504:	60f8      	str	r0, [r7, #12]
 8003506:	60b9      	str	r1, [r7, #8]
 8003508:	607a      	str	r2, [r7, #4]
 800350a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800350c:	e051      	b.n	80035b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003518:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800351c:	d123      	bne.n	8003566 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800352c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003536:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2220      	movs	r2, #32
 8003542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003552:	f043 0204 	orr.w	r2, r3, #4
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e046      	b.n	80035f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800356c:	d021      	beq.n	80035b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800356e:	f7ff f849 	bl	8002604 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	429a      	cmp	r2, r3
 800357c:	d302      	bcc.n	8003584 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d116      	bne.n	80035b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2220      	movs	r2, #32
 800358e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359e:	f043 0220 	orr.w	r2, r3, #32
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e020      	b.n	80035f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	0c1b      	lsrs	r3, r3, #16
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d10c      	bne.n	80035d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	695b      	ldr	r3, [r3, #20]
 80035c2:	43da      	mvns	r2, r3
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	4013      	ands	r3, r2
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	bf14      	ite	ne
 80035ce:	2301      	movne	r3, #1
 80035d0:	2300      	moveq	r3, #0
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	e00b      	b.n	80035ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	43da      	mvns	r2, r3
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	4013      	ands	r3, r2
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	bf14      	ite	ne
 80035e8:	2301      	movne	r3, #1
 80035ea:	2300      	moveq	r3, #0
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d18d      	bne.n	800350e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003608:	e02d      	b.n	8003666 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	f000 f878 	bl	8003700 <I2C_IsAcknowledgeFailed>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e02d      	b.n	8003676 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003620:	d021      	beq.n	8003666 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003622:	f7fe ffef 	bl	8002604 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	68ba      	ldr	r2, [r7, #8]
 800362e:	429a      	cmp	r2, r3
 8003630:	d302      	bcc.n	8003638 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d116      	bne.n	8003666 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2200      	movs	r2, #0
 800363c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2220      	movs	r2, #32
 8003642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003652:	f043 0220 	orr.w	r2, r3, #32
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e007      	b.n	8003676 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003670:	2b80      	cmp	r3, #128	; 0x80
 8003672:	d1ca      	bne.n	800360a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b084      	sub	sp, #16
 8003682:	af00      	add	r7, sp, #0
 8003684:	60f8      	str	r0, [r7, #12]
 8003686:	60b9      	str	r1, [r7, #8]
 8003688:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800368a:	e02d      	b.n	80036e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f000 f837 	bl	8003700 <I2C_IsAcknowledgeFailed>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d001      	beq.n	800369c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e02d      	b.n	80036f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a2:	d021      	beq.n	80036e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036a4:	f7fe ffae 	bl	8002604 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	68ba      	ldr	r2, [r7, #8]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d302      	bcc.n	80036ba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d116      	bne.n	80036e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2220      	movs	r2, #32
 80036c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d4:	f043 0220 	orr.w	r2, r3, #32
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e007      	b.n	80036f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	695b      	ldr	r3, [r3, #20]
 80036ee:	f003 0304 	and.w	r3, r3, #4
 80036f2:	2b04      	cmp	r3, #4
 80036f4:	d1ca      	bne.n	800368c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003712:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003716:	d11b      	bne.n	8003750 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003720:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2220      	movs	r2, #32
 800372c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373c:	f043 0204 	orr.w	r2, r3, #4
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e000      	b.n	8003752 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	370c      	adds	r7, #12
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
	...

08003760 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b086      	sub	sp, #24
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e267      	b.n	8003c42 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	d075      	beq.n	800386a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800377e:	4b88      	ldr	r3, [pc, #544]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f003 030c 	and.w	r3, r3, #12
 8003786:	2b04      	cmp	r3, #4
 8003788:	d00c      	beq.n	80037a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800378a:	4b85      	ldr	r3, [pc, #532]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003792:	2b08      	cmp	r3, #8
 8003794:	d112      	bne.n	80037bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003796:	4b82      	ldr	r3, [pc, #520]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800379e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037a2:	d10b      	bne.n	80037bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037a4:	4b7e      	ldr	r3, [pc, #504]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d05b      	beq.n	8003868 <HAL_RCC_OscConfig+0x108>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d157      	bne.n	8003868 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e242      	b.n	8003c42 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037c4:	d106      	bne.n	80037d4 <HAL_RCC_OscConfig+0x74>
 80037c6:	4b76      	ldr	r3, [pc, #472]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a75      	ldr	r2, [pc, #468]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 80037cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037d0:	6013      	str	r3, [r2, #0]
 80037d2:	e01d      	b.n	8003810 <HAL_RCC_OscConfig+0xb0>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037dc:	d10c      	bne.n	80037f8 <HAL_RCC_OscConfig+0x98>
 80037de:	4b70      	ldr	r3, [pc, #448]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a6f      	ldr	r2, [pc, #444]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 80037e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037e8:	6013      	str	r3, [r2, #0]
 80037ea:	4b6d      	ldr	r3, [pc, #436]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a6c      	ldr	r2, [pc, #432]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 80037f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037f4:	6013      	str	r3, [r2, #0]
 80037f6:	e00b      	b.n	8003810 <HAL_RCC_OscConfig+0xb0>
 80037f8:	4b69      	ldr	r3, [pc, #420]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a68      	ldr	r2, [pc, #416]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 80037fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003802:	6013      	str	r3, [r2, #0]
 8003804:	4b66      	ldr	r3, [pc, #408]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a65      	ldr	r2, [pc, #404]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 800380a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800380e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d013      	beq.n	8003840 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003818:	f7fe fef4 	bl	8002604 <HAL_GetTick>
 800381c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800381e:	e008      	b.n	8003832 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003820:	f7fe fef0 	bl	8002604 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b64      	cmp	r3, #100	; 0x64
 800382c:	d901      	bls.n	8003832 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e207      	b.n	8003c42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003832:	4b5b      	ldr	r3, [pc, #364]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d0f0      	beq.n	8003820 <HAL_RCC_OscConfig+0xc0>
 800383e:	e014      	b.n	800386a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003840:	f7fe fee0 	bl	8002604 <HAL_GetTick>
 8003844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003846:	e008      	b.n	800385a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003848:	f7fe fedc 	bl	8002604 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b64      	cmp	r3, #100	; 0x64
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e1f3      	b.n	8003c42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800385a:	4b51      	ldr	r3, [pc, #324]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1f0      	bne.n	8003848 <HAL_RCC_OscConfig+0xe8>
 8003866:	e000      	b.n	800386a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003868:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d063      	beq.n	800393e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003876:	4b4a      	ldr	r3, [pc, #296]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f003 030c 	and.w	r3, r3, #12
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00b      	beq.n	800389a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003882:	4b47      	ldr	r3, [pc, #284]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800388a:	2b08      	cmp	r3, #8
 800388c:	d11c      	bne.n	80038c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800388e:	4b44      	ldr	r3, [pc, #272]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d116      	bne.n	80038c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800389a:	4b41      	ldr	r3, [pc, #260]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d005      	beq.n	80038b2 <HAL_RCC_OscConfig+0x152>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d001      	beq.n	80038b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e1c7      	b.n	8003c42 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038b2:	4b3b      	ldr	r3, [pc, #236]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	4937      	ldr	r1, [pc, #220]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038c6:	e03a      	b.n	800393e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d020      	beq.n	8003912 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038d0:	4b34      	ldr	r3, [pc, #208]	; (80039a4 <HAL_RCC_OscConfig+0x244>)
 80038d2:	2201      	movs	r2, #1
 80038d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d6:	f7fe fe95 	bl	8002604 <HAL_GetTick>
 80038da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038dc:	e008      	b.n	80038f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038de:	f7fe fe91 	bl	8002604 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d901      	bls.n	80038f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e1a8      	b.n	8003c42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038f0:	4b2b      	ldr	r3, [pc, #172]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d0f0      	beq.n	80038de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038fc:	4b28      	ldr	r3, [pc, #160]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	00db      	lsls	r3, r3, #3
 800390a:	4925      	ldr	r1, [pc, #148]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 800390c:	4313      	orrs	r3, r2
 800390e:	600b      	str	r3, [r1, #0]
 8003910:	e015      	b.n	800393e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003912:	4b24      	ldr	r3, [pc, #144]	; (80039a4 <HAL_RCC_OscConfig+0x244>)
 8003914:	2200      	movs	r2, #0
 8003916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003918:	f7fe fe74 	bl	8002604 <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800391e:	e008      	b.n	8003932 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003920:	f7fe fe70 	bl	8002604 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e187      	b.n	8003c42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003932:	4b1b      	ldr	r3, [pc, #108]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1f0      	bne.n	8003920 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0308 	and.w	r3, r3, #8
 8003946:	2b00      	cmp	r3, #0
 8003948:	d036      	beq.n	80039b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d016      	beq.n	8003980 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003952:	4b15      	ldr	r3, [pc, #84]	; (80039a8 <HAL_RCC_OscConfig+0x248>)
 8003954:	2201      	movs	r2, #1
 8003956:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003958:	f7fe fe54 	bl	8002604 <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800395e:	e008      	b.n	8003972 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003960:	f7fe fe50 	bl	8002604 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e167      	b.n	8003c42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003972:	4b0b      	ldr	r3, [pc, #44]	; (80039a0 <HAL_RCC_OscConfig+0x240>)
 8003974:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d0f0      	beq.n	8003960 <HAL_RCC_OscConfig+0x200>
 800397e:	e01b      	b.n	80039b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003980:	4b09      	ldr	r3, [pc, #36]	; (80039a8 <HAL_RCC_OscConfig+0x248>)
 8003982:	2200      	movs	r2, #0
 8003984:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003986:	f7fe fe3d 	bl	8002604 <HAL_GetTick>
 800398a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800398c:	e00e      	b.n	80039ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800398e:	f7fe fe39 	bl	8002604 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	2b02      	cmp	r3, #2
 800399a:	d907      	bls.n	80039ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e150      	b.n	8003c42 <HAL_RCC_OscConfig+0x4e2>
 80039a0:	40023800 	.word	0x40023800
 80039a4:	42470000 	.word	0x42470000
 80039a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039ac:	4b88      	ldr	r3, [pc, #544]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 80039ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1ea      	bne.n	800398e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0304 	and.w	r3, r3, #4
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f000 8097 	beq.w	8003af4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039c6:	2300      	movs	r3, #0
 80039c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039ca:	4b81      	ldr	r3, [pc, #516]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 80039cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10f      	bne.n	80039f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039d6:	2300      	movs	r3, #0
 80039d8:	60bb      	str	r3, [r7, #8]
 80039da:	4b7d      	ldr	r3, [pc, #500]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 80039dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039de:	4a7c      	ldr	r2, [pc, #496]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 80039e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039e4:	6413      	str	r3, [r2, #64]	; 0x40
 80039e6:	4b7a      	ldr	r3, [pc, #488]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 80039e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ee:	60bb      	str	r3, [r7, #8]
 80039f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039f2:	2301      	movs	r3, #1
 80039f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f6:	4b77      	ldr	r3, [pc, #476]	; (8003bd4 <HAL_RCC_OscConfig+0x474>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d118      	bne.n	8003a34 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a02:	4b74      	ldr	r3, [pc, #464]	; (8003bd4 <HAL_RCC_OscConfig+0x474>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a73      	ldr	r2, [pc, #460]	; (8003bd4 <HAL_RCC_OscConfig+0x474>)
 8003a08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a0e:	f7fe fdf9 	bl	8002604 <HAL_GetTick>
 8003a12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a14:	e008      	b.n	8003a28 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a16:	f7fe fdf5 	bl	8002604 <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d901      	bls.n	8003a28 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e10c      	b.n	8003c42 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a28:	4b6a      	ldr	r3, [pc, #424]	; (8003bd4 <HAL_RCC_OscConfig+0x474>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d0f0      	beq.n	8003a16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d106      	bne.n	8003a4a <HAL_RCC_OscConfig+0x2ea>
 8003a3c:	4b64      	ldr	r3, [pc, #400]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 8003a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a40:	4a63      	ldr	r2, [pc, #396]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 8003a42:	f043 0301 	orr.w	r3, r3, #1
 8003a46:	6713      	str	r3, [r2, #112]	; 0x70
 8003a48:	e01c      	b.n	8003a84 <HAL_RCC_OscConfig+0x324>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	2b05      	cmp	r3, #5
 8003a50:	d10c      	bne.n	8003a6c <HAL_RCC_OscConfig+0x30c>
 8003a52:	4b5f      	ldr	r3, [pc, #380]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 8003a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a56:	4a5e      	ldr	r2, [pc, #376]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 8003a58:	f043 0304 	orr.w	r3, r3, #4
 8003a5c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a5e:	4b5c      	ldr	r3, [pc, #368]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 8003a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a62:	4a5b      	ldr	r2, [pc, #364]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 8003a64:	f043 0301 	orr.w	r3, r3, #1
 8003a68:	6713      	str	r3, [r2, #112]	; 0x70
 8003a6a:	e00b      	b.n	8003a84 <HAL_RCC_OscConfig+0x324>
 8003a6c:	4b58      	ldr	r3, [pc, #352]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 8003a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a70:	4a57      	ldr	r2, [pc, #348]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 8003a72:	f023 0301 	bic.w	r3, r3, #1
 8003a76:	6713      	str	r3, [r2, #112]	; 0x70
 8003a78:	4b55      	ldr	r3, [pc, #340]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 8003a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7c:	4a54      	ldr	r2, [pc, #336]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 8003a7e:	f023 0304 	bic.w	r3, r3, #4
 8003a82:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d015      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a8c:	f7fe fdba 	bl	8002604 <HAL_GetTick>
 8003a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a92:	e00a      	b.n	8003aaa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a94:	f7fe fdb6 	bl	8002604 <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e0cb      	b.n	8003c42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aaa:	4b49      	ldr	r3, [pc, #292]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 8003aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d0ee      	beq.n	8003a94 <HAL_RCC_OscConfig+0x334>
 8003ab6:	e014      	b.n	8003ae2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ab8:	f7fe fda4 	bl	8002604 <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003abe:	e00a      	b.n	8003ad6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ac0:	f7fe fda0 	bl	8002604 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e0b5      	b.n	8003c42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ad6:	4b3e      	ldr	r3, [pc, #248]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 8003ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d1ee      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ae2:	7dfb      	ldrb	r3, [r7, #23]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d105      	bne.n	8003af4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ae8:	4b39      	ldr	r3, [pc, #228]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 8003aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aec:	4a38      	ldr	r2, [pc, #224]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 8003aee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003af2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	699b      	ldr	r3, [r3, #24]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	f000 80a1 	beq.w	8003c40 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003afe:	4b34      	ldr	r3, [pc, #208]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f003 030c 	and.w	r3, r3, #12
 8003b06:	2b08      	cmp	r3, #8
 8003b08:	d05c      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d141      	bne.n	8003b96 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b12:	4b31      	ldr	r3, [pc, #196]	; (8003bd8 <HAL_RCC_OscConfig+0x478>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b18:	f7fe fd74 	bl	8002604 <HAL_GetTick>
 8003b1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b1e:	e008      	b.n	8003b32 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b20:	f7fe fd70 	bl	8002604 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e087      	b.n	8003c42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b32:	4b27      	ldr	r3, [pc, #156]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1f0      	bne.n	8003b20 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	69da      	ldr	r2, [r3, #28]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	431a      	orrs	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4c:	019b      	lsls	r3, r3, #6
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b54:	085b      	lsrs	r3, r3, #1
 8003b56:	3b01      	subs	r3, #1
 8003b58:	041b      	lsls	r3, r3, #16
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b60:	061b      	lsls	r3, r3, #24
 8003b62:	491b      	ldr	r1, [pc, #108]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b68:	4b1b      	ldr	r3, [pc, #108]	; (8003bd8 <HAL_RCC_OscConfig+0x478>)
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b6e:	f7fe fd49 	bl	8002604 <HAL_GetTick>
 8003b72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b74:	e008      	b.n	8003b88 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b76:	f7fe fd45 	bl	8002604 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d901      	bls.n	8003b88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e05c      	b.n	8003c42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b88:	4b11      	ldr	r3, [pc, #68]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d0f0      	beq.n	8003b76 <HAL_RCC_OscConfig+0x416>
 8003b94:	e054      	b.n	8003c40 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b96:	4b10      	ldr	r3, [pc, #64]	; (8003bd8 <HAL_RCC_OscConfig+0x478>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b9c:	f7fe fd32 	bl	8002604 <HAL_GetTick>
 8003ba0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ba2:	e008      	b.n	8003bb6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ba4:	f7fe fd2e 	bl	8002604 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e045      	b.n	8003c42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bb6:	4b06      	ldr	r3, [pc, #24]	; (8003bd0 <HAL_RCC_OscConfig+0x470>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1f0      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x444>
 8003bc2:	e03d      	b.n	8003c40 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d107      	bne.n	8003bdc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e038      	b.n	8003c42 <HAL_RCC_OscConfig+0x4e2>
 8003bd0:	40023800 	.word	0x40023800
 8003bd4:	40007000 	.word	0x40007000
 8003bd8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003bdc:	4b1b      	ldr	r3, [pc, #108]	; (8003c4c <HAL_RCC_OscConfig+0x4ec>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d028      	beq.n	8003c3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d121      	bne.n	8003c3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d11a      	bne.n	8003c3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d111      	bne.n	8003c3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c22:	085b      	lsrs	r3, r3, #1
 8003c24:	3b01      	subs	r3, #1
 8003c26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d107      	bne.n	8003c3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d001      	beq.n	8003c40 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e000      	b.n	8003c42 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3718      	adds	r7, #24
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	40023800 	.word	0x40023800

08003c50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d101      	bne.n	8003c64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e0cc      	b.n	8003dfe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c64:	4b68      	ldr	r3, [pc, #416]	; (8003e08 <HAL_RCC_ClockConfig+0x1b8>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0307 	and.w	r3, r3, #7
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d90c      	bls.n	8003c8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c72:	4b65      	ldr	r3, [pc, #404]	; (8003e08 <HAL_RCC_ClockConfig+0x1b8>)
 8003c74:	683a      	ldr	r2, [r7, #0]
 8003c76:	b2d2      	uxtb	r2, r2
 8003c78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c7a:	4b63      	ldr	r3, [pc, #396]	; (8003e08 <HAL_RCC_ClockConfig+0x1b8>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0307 	and.w	r3, r3, #7
 8003c82:	683a      	ldr	r2, [r7, #0]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d001      	beq.n	8003c8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e0b8      	b.n	8003dfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0302 	and.w	r3, r3, #2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d020      	beq.n	8003cda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0304 	and.w	r3, r3, #4
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d005      	beq.n	8003cb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ca4:	4b59      	ldr	r3, [pc, #356]	; (8003e0c <HAL_RCC_ClockConfig+0x1bc>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	4a58      	ldr	r2, [pc, #352]	; (8003e0c <HAL_RCC_ClockConfig+0x1bc>)
 8003caa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0308 	and.w	r3, r3, #8
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d005      	beq.n	8003cc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cbc:	4b53      	ldr	r3, [pc, #332]	; (8003e0c <HAL_RCC_ClockConfig+0x1bc>)
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	4a52      	ldr	r2, [pc, #328]	; (8003e0c <HAL_RCC_ClockConfig+0x1bc>)
 8003cc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003cc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cc8:	4b50      	ldr	r3, [pc, #320]	; (8003e0c <HAL_RCC_ClockConfig+0x1bc>)
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	494d      	ldr	r1, [pc, #308]	; (8003e0c <HAL_RCC_ClockConfig+0x1bc>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d044      	beq.n	8003d70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d107      	bne.n	8003cfe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cee:	4b47      	ldr	r3, [pc, #284]	; (8003e0c <HAL_RCC_ClockConfig+0x1bc>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d119      	bne.n	8003d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e07f      	b.n	8003dfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d003      	beq.n	8003d0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d0a:	2b03      	cmp	r3, #3
 8003d0c:	d107      	bne.n	8003d1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d0e:	4b3f      	ldr	r3, [pc, #252]	; (8003e0c <HAL_RCC_ClockConfig+0x1bc>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d109      	bne.n	8003d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e06f      	b.n	8003dfe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d1e:	4b3b      	ldr	r3, [pc, #236]	; (8003e0c <HAL_RCC_ClockConfig+0x1bc>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e067      	b.n	8003dfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d2e:	4b37      	ldr	r3, [pc, #220]	; (8003e0c <HAL_RCC_ClockConfig+0x1bc>)
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f023 0203 	bic.w	r2, r3, #3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	4934      	ldr	r1, [pc, #208]	; (8003e0c <HAL_RCC_ClockConfig+0x1bc>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d40:	f7fe fc60 	bl	8002604 <HAL_GetTick>
 8003d44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d46:	e00a      	b.n	8003d5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d48:	f7fe fc5c 	bl	8002604 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d901      	bls.n	8003d5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e04f      	b.n	8003dfe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d5e:	4b2b      	ldr	r3, [pc, #172]	; (8003e0c <HAL_RCC_ClockConfig+0x1bc>)
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f003 020c 	and.w	r2, r3, #12
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d1eb      	bne.n	8003d48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d70:	4b25      	ldr	r3, [pc, #148]	; (8003e08 <HAL_RCC_ClockConfig+0x1b8>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0307 	and.w	r3, r3, #7
 8003d78:	683a      	ldr	r2, [r7, #0]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d20c      	bcs.n	8003d98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d7e:	4b22      	ldr	r3, [pc, #136]	; (8003e08 <HAL_RCC_ClockConfig+0x1b8>)
 8003d80:	683a      	ldr	r2, [r7, #0]
 8003d82:	b2d2      	uxtb	r2, r2
 8003d84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d86:	4b20      	ldr	r3, [pc, #128]	; (8003e08 <HAL_RCC_ClockConfig+0x1b8>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0307 	and.w	r3, r3, #7
 8003d8e:	683a      	ldr	r2, [r7, #0]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d001      	beq.n	8003d98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e032      	b.n	8003dfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0304 	and.w	r3, r3, #4
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d008      	beq.n	8003db6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003da4:	4b19      	ldr	r3, [pc, #100]	; (8003e0c <HAL_RCC_ClockConfig+0x1bc>)
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	4916      	ldr	r1, [pc, #88]	; (8003e0c <HAL_RCC_ClockConfig+0x1bc>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0308 	and.w	r3, r3, #8
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d009      	beq.n	8003dd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dc2:	4b12      	ldr	r3, [pc, #72]	; (8003e0c <HAL_RCC_ClockConfig+0x1bc>)
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	00db      	lsls	r3, r3, #3
 8003dd0:	490e      	ldr	r1, [pc, #56]	; (8003e0c <HAL_RCC_ClockConfig+0x1bc>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003dd6:	f000 f821 	bl	8003e1c <HAL_RCC_GetSysClockFreq>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	4b0b      	ldr	r3, [pc, #44]	; (8003e0c <HAL_RCC_ClockConfig+0x1bc>)
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	091b      	lsrs	r3, r3, #4
 8003de2:	f003 030f 	and.w	r3, r3, #15
 8003de6:	490a      	ldr	r1, [pc, #40]	; (8003e10 <HAL_RCC_ClockConfig+0x1c0>)
 8003de8:	5ccb      	ldrb	r3, [r1, r3]
 8003dea:	fa22 f303 	lsr.w	r3, r2, r3
 8003dee:	4a09      	ldr	r2, [pc, #36]	; (8003e14 <HAL_RCC_ClockConfig+0x1c4>)
 8003df0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003df2:	4b09      	ldr	r3, [pc, #36]	; (8003e18 <HAL_RCC_ClockConfig+0x1c8>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7fe fbc0 	bl	800257c <HAL_InitTick>

  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	40023c00 	.word	0x40023c00
 8003e0c:	40023800 	.word	0x40023800
 8003e10:	08006d80 	.word	0x08006d80
 8003e14:	20000028 	.word	0x20000028
 8003e18:	2000002c 	.word	0x2000002c

08003e1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e20:	b090      	sub	sp, #64	; 0x40
 8003e22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e24:	2300      	movs	r3, #0
 8003e26:	637b      	str	r3, [r7, #52]	; 0x34
 8003e28:	2300      	movs	r3, #0
 8003e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003e30:	2300      	movs	r3, #0
 8003e32:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e34:	4b59      	ldr	r3, [pc, #356]	; (8003f9c <HAL_RCC_GetSysClockFreq+0x180>)
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f003 030c 	and.w	r3, r3, #12
 8003e3c:	2b08      	cmp	r3, #8
 8003e3e:	d00d      	beq.n	8003e5c <HAL_RCC_GetSysClockFreq+0x40>
 8003e40:	2b08      	cmp	r3, #8
 8003e42:	f200 80a1 	bhi.w	8003f88 <HAL_RCC_GetSysClockFreq+0x16c>
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d002      	beq.n	8003e50 <HAL_RCC_GetSysClockFreq+0x34>
 8003e4a:	2b04      	cmp	r3, #4
 8003e4c:	d003      	beq.n	8003e56 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e4e:	e09b      	b.n	8003f88 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e50:	4b53      	ldr	r3, [pc, #332]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003e52:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003e54:	e09b      	b.n	8003f8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e56:	4b53      	ldr	r3, [pc, #332]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e58:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e5a:	e098      	b.n	8003f8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e5c:	4b4f      	ldr	r3, [pc, #316]	; (8003f9c <HAL_RCC_GetSysClockFreq+0x180>)
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e64:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e66:	4b4d      	ldr	r3, [pc, #308]	; (8003f9c <HAL_RCC_GetSysClockFreq+0x180>)
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d028      	beq.n	8003ec4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e72:	4b4a      	ldr	r3, [pc, #296]	; (8003f9c <HAL_RCC_GetSysClockFreq+0x180>)
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	099b      	lsrs	r3, r3, #6
 8003e78:	2200      	movs	r2, #0
 8003e7a:	623b      	str	r3, [r7, #32]
 8003e7c:	627a      	str	r2, [r7, #36]	; 0x24
 8003e7e:	6a3b      	ldr	r3, [r7, #32]
 8003e80:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003e84:	2100      	movs	r1, #0
 8003e86:	4b47      	ldr	r3, [pc, #284]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e88:	fb03 f201 	mul.w	r2, r3, r1
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	fb00 f303 	mul.w	r3, r0, r3
 8003e92:	4413      	add	r3, r2
 8003e94:	4a43      	ldr	r2, [pc, #268]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e96:	fba0 1202 	umull	r1, r2, r0, r2
 8003e9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e9c:	460a      	mov	r2, r1
 8003e9e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003ea0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ea2:	4413      	add	r3, r2
 8003ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	61bb      	str	r3, [r7, #24]
 8003eac:	61fa      	str	r2, [r7, #28]
 8003eae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003eb2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003eb6:	f7fc f9e3 	bl	8000280 <__aeabi_uldivmod>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ec2:	e053      	b.n	8003f6c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ec4:	4b35      	ldr	r3, [pc, #212]	; (8003f9c <HAL_RCC_GetSysClockFreq+0x180>)
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	099b      	lsrs	r3, r3, #6
 8003eca:	2200      	movs	r2, #0
 8003ecc:	613b      	str	r3, [r7, #16]
 8003ece:	617a      	str	r2, [r7, #20]
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003ed6:	f04f 0b00 	mov.w	fp, #0
 8003eda:	4652      	mov	r2, sl
 8003edc:	465b      	mov	r3, fp
 8003ede:	f04f 0000 	mov.w	r0, #0
 8003ee2:	f04f 0100 	mov.w	r1, #0
 8003ee6:	0159      	lsls	r1, r3, #5
 8003ee8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003eec:	0150      	lsls	r0, r2, #5
 8003eee:	4602      	mov	r2, r0
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	ebb2 080a 	subs.w	r8, r2, sl
 8003ef6:	eb63 090b 	sbc.w	r9, r3, fp
 8003efa:	f04f 0200 	mov.w	r2, #0
 8003efe:	f04f 0300 	mov.w	r3, #0
 8003f02:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003f06:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003f0a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003f0e:	ebb2 0408 	subs.w	r4, r2, r8
 8003f12:	eb63 0509 	sbc.w	r5, r3, r9
 8003f16:	f04f 0200 	mov.w	r2, #0
 8003f1a:	f04f 0300 	mov.w	r3, #0
 8003f1e:	00eb      	lsls	r3, r5, #3
 8003f20:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f24:	00e2      	lsls	r2, r4, #3
 8003f26:	4614      	mov	r4, r2
 8003f28:	461d      	mov	r5, r3
 8003f2a:	eb14 030a 	adds.w	r3, r4, sl
 8003f2e:	603b      	str	r3, [r7, #0]
 8003f30:	eb45 030b 	adc.w	r3, r5, fp
 8003f34:	607b      	str	r3, [r7, #4]
 8003f36:	f04f 0200 	mov.w	r2, #0
 8003f3a:	f04f 0300 	mov.w	r3, #0
 8003f3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f42:	4629      	mov	r1, r5
 8003f44:	028b      	lsls	r3, r1, #10
 8003f46:	4621      	mov	r1, r4
 8003f48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f4c:	4621      	mov	r1, r4
 8003f4e:	028a      	lsls	r2, r1, #10
 8003f50:	4610      	mov	r0, r2
 8003f52:	4619      	mov	r1, r3
 8003f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f56:	2200      	movs	r2, #0
 8003f58:	60bb      	str	r3, [r7, #8]
 8003f5a:	60fa      	str	r2, [r7, #12]
 8003f5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f60:	f7fc f98e 	bl	8000280 <__aeabi_uldivmod>
 8003f64:	4602      	mov	r2, r0
 8003f66:	460b      	mov	r3, r1
 8003f68:	4613      	mov	r3, r2
 8003f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f6c:	4b0b      	ldr	r3, [pc, #44]	; (8003f9c <HAL_RCC_GetSysClockFreq+0x180>)
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	0c1b      	lsrs	r3, r3, #16
 8003f72:	f003 0303 	and.w	r3, r3, #3
 8003f76:	3301      	adds	r3, #1
 8003f78:	005b      	lsls	r3, r3, #1
 8003f7a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003f7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f84:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003f86:	e002      	b.n	8003f8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f88:	4b05      	ldr	r3, [pc, #20]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003f8a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003f8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3740      	adds	r7, #64	; 0x40
 8003f94:	46bd      	mov	sp, r7
 8003f96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f9a:	bf00      	nop
 8003f9c:	40023800 	.word	0x40023800
 8003fa0:	00f42400 	.word	0x00f42400
 8003fa4:	017d7840 	.word	0x017d7840

08003fa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fac:	4b03      	ldr	r3, [pc, #12]	; (8003fbc <HAL_RCC_GetHCLKFreq+0x14>)
 8003fae:	681b      	ldr	r3, [r3, #0]
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	20000028 	.word	0x20000028

08003fc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003fc4:	f7ff fff0 	bl	8003fa8 <HAL_RCC_GetHCLKFreq>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	4b05      	ldr	r3, [pc, #20]	; (8003fe0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	0a9b      	lsrs	r3, r3, #10
 8003fd0:	f003 0307 	and.w	r3, r3, #7
 8003fd4:	4903      	ldr	r1, [pc, #12]	; (8003fe4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fd6:	5ccb      	ldrb	r3, [r1, r3]
 8003fd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	40023800 	.word	0x40023800
 8003fe4:	08006d90 	.word	0x08006d90

08003fe8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003fec:	f7ff ffdc 	bl	8003fa8 <HAL_RCC_GetHCLKFreq>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	4b05      	ldr	r3, [pc, #20]	; (8004008 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	0b5b      	lsrs	r3, r3, #13
 8003ff8:	f003 0307 	and.w	r3, r3, #7
 8003ffc:	4903      	ldr	r1, [pc, #12]	; (800400c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ffe:	5ccb      	ldrb	r3, [r1, r3]
 8004000:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004004:	4618      	mov	r0, r3
 8004006:	bd80      	pop	{r7, pc}
 8004008:	40023800 	.word	0x40023800
 800400c:	08006d90 	.word	0x08006d90

08004010 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d101      	bne.n	8004022 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e07b      	b.n	800411a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004026:	2b00      	cmp	r3, #0
 8004028:	d108      	bne.n	800403c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004032:	d009      	beq.n	8004048 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	61da      	str	r2, [r3, #28]
 800403a:	e005      	b.n	8004048 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d106      	bne.n	8004068 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7fe f848 	bl	80020f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2202      	movs	r2, #2
 800406c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800407e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004090:	431a      	orrs	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800409a:	431a      	orrs	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	431a      	orrs	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	431a      	orrs	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040b8:	431a      	orrs	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	69db      	ldr	r3, [r3, #28]
 80040be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040c2:	431a      	orrs	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a1b      	ldr	r3, [r3, #32]
 80040c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040cc:	ea42 0103 	orr.w	r1, r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	430a      	orrs	r2, r1
 80040de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	0c1b      	lsrs	r3, r3, #16
 80040e6:	f003 0104 	and.w	r1, r3, #4
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ee:	f003 0210 	and.w	r2, r3, #16
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	430a      	orrs	r2, r1
 80040f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	69da      	ldr	r2, [r3, #28]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004108:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3708      	adds	r7, #8
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}

08004122 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004122:	b580      	push	{r7, lr}
 8004124:	b088      	sub	sp, #32
 8004126:	af00      	add	r7, sp, #0
 8004128:	60f8      	str	r0, [r7, #12]
 800412a:	60b9      	str	r1, [r7, #8]
 800412c:	603b      	str	r3, [r7, #0]
 800412e:	4613      	mov	r3, r2
 8004130:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004132:	2300      	movs	r3, #0
 8004134:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800413c:	2b01      	cmp	r3, #1
 800413e:	d101      	bne.n	8004144 <HAL_SPI_Transmit+0x22>
 8004140:	2302      	movs	r3, #2
 8004142:	e126      	b.n	8004392 <HAL_SPI_Transmit+0x270>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800414c:	f7fe fa5a 	bl	8002604 <HAL_GetTick>
 8004150:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004152:	88fb      	ldrh	r3, [r7, #6]
 8004154:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b01      	cmp	r3, #1
 8004160:	d002      	beq.n	8004168 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004162:	2302      	movs	r3, #2
 8004164:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004166:	e10b      	b.n	8004380 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d002      	beq.n	8004174 <HAL_SPI_Transmit+0x52>
 800416e:	88fb      	ldrh	r3, [r7, #6]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d102      	bne.n	800417a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004178:	e102      	b.n	8004380 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2203      	movs	r2, #3
 800417e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	68ba      	ldr	r2, [r7, #8]
 800418c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	88fa      	ldrh	r2, [r7, #6]
 8004192:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	88fa      	ldrh	r2, [r7, #6]
 8004198:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2200      	movs	r2, #0
 80041b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041c0:	d10f      	bne.n	80041e2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041e0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ec:	2b40      	cmp	r3, #64	; 0x40
 80041ee:	d007      	beq.n	8004200 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004208:	d14b      	bne.n	80042a2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d002      	beq.n	8004218 <HAL_SPI_Transmit+0xf6>
 8004212:	8afb      	ldrh	r3, [r7, #22]
 8004214:	2b01      	cmp	r3, #1
 8004216:	d13e      	bne.n	8004296 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421c:	881a      	ldrh	r2, [r3, #0]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004228:	1c9a      	adds	r2, r3, #2
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004232:	b29b      	uxth	r3, r3
 8004234:	3b01      	subs	r3, #1
 8004236:	b29a      	uxth	r2, r3
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800423c:	e02b      	b.n	8004296 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	2b02      	cmp	r3, #2
 800424a:	d112      	bne.n	8004272 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004250:	881a      	ldrh	r2, [r3, #0]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425c:	1c9a      	adds	r2, r3, #2
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004266:	b29b      	uxth	r3, r3
 8004268:	3b01      	subs	r3, #1
 800426a:	b29a      	uxth	r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004270:	e011      	b.n	8004296 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004272:	f7fe f9c7 	bl	8002604 <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	683a      	ldr	r2, [r7, #0]
 800427e:	429a      	cmp	r2, r3
 8004280:	d803      	bhi.n	800428a <HAL_SPI_Transmit+0x168>
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004288:	d102      	bne.n	8004290 <HAL_SPI_Transmit+0x16e>
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d102      	bne.n	8004296 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004294:	e074      	b.n	8004380 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800429a:	b29b      	uxth	r3, r3
 800429c:	2b00      	cmp	r3, #0
 800429e:	d1ce      	bne.n	800423e <HAL_SPI_Transmit+0x11c>
 80042a0:	e04c      	b.n	800433c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d002      	beq.n	80042b0 <HAL_SPI_Transmit+0x18e>
 80042aa:	8afb      	ldrh	r3, [r7, #22]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d140      	bne.n	8004332 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	330c      	adds	r3, #12
 80042ba:	7812      	ldrb	r2, [r2, #0]
 80042bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c2:	1c5a      	adds	r2, r3, #1
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	3b01      	subs	r3, #1
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80042d6:	e02c      	b.n	8004332 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d113      	bne.n	800430e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	330c      	adds	r3, #12
 80042f0:	7812      	ldrb	r2, [r2, #0]
 80042f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f8:	1c5a      	adds	r2, r3, #1
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004302:	b29b      	uxth	r3, r3
 8004304:	3b01      	subs	r3, #1
 8004306:	b29a      	uxth	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	86da      	strh	r2, [r3, #54]	; 0x36
 800430c:	e011      	b.n	8004332 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800430e:	f7fe f979 	bl	8002604 <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	683a      	ldr	r2, [r7, #0]
 800431a:	429a      	cmp	r2, r3
 800431c:	d803      	bhi.n	8004326 <HAL_SPI_Transmit+0x204>
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004324:	d102      	bne.n	800432c <HAL_SPI_Transmit+0x20a>
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d102      	bne.n	8004332 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004330:	e026      	b.n	8004380 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004336:	b29b      	uxth	r3, r3
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1cd      	bne.n	80042d8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	6839      	ldr	r1, [r7, #0]
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f000 f9df 	bl	8004704 <SPI_EndRxTxTransaction>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d002      	beq.n	8004352 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2220      	movs	r2, #32
 8004350:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d10a      	bne.n	8004370 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800435a:	2300      	movs	r3, #0
 800435c:	613b      	str	r3, [r7, #16]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	613b      	str	r3, [r7, #16]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	613b      	str	r3, [r7, #16]
 800436e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004374:	2b00      	cmp	r3, #0
 8004376:	d002      	beq.n	800437e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	77fb      	strb	r3, [r7, #31]
 800437c:	e000      	b.n	8004380 <HAL_SPI_Transmit+0x25e>
  }

error:
 800437e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004390:	7ffb      	ldrb	r3, [r7, #31]
}
 8004392:	4618      	mov	r0, r3
 8004394:	3720      	adds	r7, #32
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
	...

0800439c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b088      	sub	sp, #32
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	099b      	lsrs	r3, r3, #6
 80043b8:	f003 0301 	and.w	r3, r3, #1
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d10f      	bne.n	80043e0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00a      	beq.n	80043e0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	099b      	lsrs	r3, r3, #6
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d004      	beq.n	80043e0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	4798      	blx	r3
    return;
 80043de:	e0d7      	b.n	8004590 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	085b      	lsrs	r3, r3, #1
 80043e4:	f003 0301 	and.w	r3, r3, #1
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d00a      	beq.n	8004402 <HAL_SPI_IRQHandler+0x66>
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	09db      	lsrs	r3, r3, #7
 80043f0:	f003 0301 	and.w	r3, r3, #1
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d004      	beq.n	8004402 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	4798      	blx	r3
    return;
 8004400:	e0c6      	b.n	8004590 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	095b      	lsrs	r3, r3, #5
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	2b00      	cmp	r3, #0
 800440c:	d10c      	bne.n	8004428 <HAL_SPI_IRQHandler+0x8c>
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	099b      	lsrs	r3, r3, #6
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	d106      	bne.n	8004428 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	0a1b      	lsrs	r3, r3, #8
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b00      	cmp	r3, #0
 8004424:	f000 80b4 	beq.w	8004590 <HAL_SPI_IRQHandler+0x1f4>
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	095b      	lsrs	r3, r3, #5
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	2b00      	cmp	r3, #0
 8004432:	f000 80ad 	beq.w	8004590 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	099b      	lsrs	r3, r3, #6
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	2b00      	cmp	r3, #0
 8004440:	d023      	beq.n	800448a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004448:	b2db      	uxtb	r3, r3
 800444a:	2b03      	cmp	r3, #3
 800444c:	d011      	beq.n	8004472 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004452:	f043 0204 	orr.w	r2, r3, #4
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800445a:	2300      	movs	r3, #0
 800445c:	617b      	str	r3, [r7, #20]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	617b      	str	r3, [r7, #20]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	617b      	str	r3, [r7, #20]
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	e00b      	b.n	800448a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004472:	2300      	movs	r3, #0
 8004474:	613b      	str	r3, [r7, #16]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	613b      	str	r3, [r7, #16]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	613b      	str	r3, [r7, #16]
 8004486:	693b      	ldr	r3, [r7, #16]
        return;
 8004488:	e082      	b.n	8004590 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	095b      	lsrs	r3, r3, #5
 800448e:	f003 0301 	and.w	r3, r3, #1
 8004492:	2b00      	cmp	r3, #0
 8004494:	d014      	beq.n	80044c0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800449a:	f043 0201 	orr.w	r2, r3, #1
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80044a2:	2300      	movs	r3, #0
 80044a4:	60fb      	str	r3, [r7, #12]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	60fb      	str	r3, [r7, #12]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044bc:	601a      	str	r2, [r3, #0]
 80044be:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	0a1b      	lsrs	r3, r3, #8
 80044c4:	f003 0301 	and.w	r3, r3, #1
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00c      	beq.n	80044e6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d0:	f043 0208 	orr.w	r2, r3, #8
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80044d8:	2300      	movs	r3, #0
 80044da:	60bb      	str	r3, [r7, #8]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	60bb      	str	r3, [r7, #8]
 80044e4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d04f      	beq.n	800458e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	685a      	ldr	r2, [r3, #4]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80044fc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2201      	movs	r2, #1
 8004502:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	f003 0302 	and.w	r3, r3, #2
 800450c:	2b00      	cmp	r3, #0
 800450e:	d104      	bne.n	800451a <HAL_SPI_IRQHandler+0x17e>
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	2b00      	cmp	r3, #0
 8004518:	d034      	beq.n	8004584 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	685a      	ldr	r2, [r3, #4]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f022 0203 	bic.w	r2, r2, #3
 8004528:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800452e:	2b00      	cmp	r3, #0
 8004530:	d011      	beq.n	8004556 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004536:	4a18      	ldr	r2, [pc, #96]	; (8004598 <HAL_SPI_IRQHandler+0x1fc>)
 8004538:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800453e:	4618      	mov	r0, r3
 8004540:	f7fe f9d3 	bl	80028ea <HAL_DMA_Abort_IT>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d005      	beq.n	8004556 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800454e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800455a:	2b00      	cmp	r3, #0
 800455c:	d016      	beq.n	800458c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004562:	4a0d      	ldr	r2, [pc, #52]	; (8004598 <HAL_SPI_IRQHandler+0x1fc>)
 8004564:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800456a:	4618      	mov	r0, r3
 800456c:	f7fe f9bd 	bl	80028ea <HAL_DMA_Abort_IT>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00a      	beq.n	800458c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800457a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004582:	e003      	b.n	800458c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 f809 	bl	800459c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800458a:	e000      	b.n	800458e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800458c:	bf00      	nop
    return;
 800458e:	bf00      	nop
  }
}
 8004590:	3720      	adds	r7, #32
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	080045cd 	.word	0x080045cd

0800459c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045be:	b2db      	uxtb	r3, r3
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2200      	movs	r2, #0
 80045e4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f7ff ffd8 	bl	800459c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80045ec:	bf00      	nop
 80045ee:	3710      	adds	r7, #16
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b088      	sub	sp, #32
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	603b      	str	r3, [r7, #0]
 8004600:	4613      	mov	r3, r2
 8004602:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004604:	f7fd fffe 	bl	8002604 <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800460c:	1a9b      	subs	r3, r3, r2
 800460e:	683a      	ldr	r2, [r7, #0]
 8004610:	4413      	add	r3, r2
 8004612:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004614:	f7fd fff6 	bl	8002604 <HAL_GetTick>
 8004618:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800461a:	4b39      	ldr	r3, [pc, #228]	; (8004700 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	015b      	lsls	r3, r3, #5
 8004620:	0d1b      	lsrs	r3, r3, #20
 8004622:	69fa      	ldr	r2, [r7, #28]
 8004624:	fb02 f303 	mul.w	r3, r2, r3
 8004628:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800462a:	e054      	b.n	80046d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004632:	d050      	beq.n	80046d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004634:	f7fd ffe6 	bl	8002604 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	69fa      	ldr	r2, [r7, #28]
 8004640:	429a      	cmp	r2, r3
 8004642:	d902      	bls.n	800464a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d13d      	bne.n	80046c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	685a      	ldr	r2, [r3, #4]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004658:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004662:	d111      	bne.n	8004688 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800466c:	d004      	beq.n	8004678 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004676:	d107      	bne.n	8004688 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004686:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004690:	d10f      	bne.n	80046b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046a0:	601a      	str	r2, [r3, #0]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e017      	b.n	80046f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d101      	bne.n	80046d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80046cc:	2300      	movs	r3, #0
 80046ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	3b01      	subs	r3, #1
 80046d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	689a      	ldr	r2, [r3, #8]
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	4013      	ands	r3, r2
 80046e0:	68ba      	ldr	r2, [r7, #8]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	bf0c      	ite	eq
 80046e6:	2301      	moveq	r3, #1
 80046e8:	2300      	movne	r3, #0
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	461a      	mov	r2, r3
 80046ee:	79fb      	ldrb	r3, [r7, #7]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d19b      	bne.n	800462c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3720      	adds	r7, #32
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	20000028 	.word	0x20000028

08004704 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b088      	sub	sp, #32
 8004708:	af02      	add	r7, sp, #8
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004710:	4b1b      	ldr	r3, [pc, #108]	; (8004780 <SPI_EndRxTxTransaction+0x7c>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a1b      	ldr	r2, [pc, #108]	; (8004784 <SPI_EndRxTxTransaction+0x80>)
 8004716:	fba2 2303 	umull	r2, r3, r2, r3
 800471a:	0d5b      	lsrs	r3, r3, #21
 800471c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004720:	fb02 f303 	mul.w	r3, r2, r3
 8004724:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800472e:	d112      	bne.n	8004756 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	9300      	str	r3, [sp, #0]
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	2200      	movs	r2, #0
 8004738:	2180      	movs	r1, #128	; 0x80
 800473a:	68f8      	ldr	r0, [r7, #12]
 800473c:	f7ff ff5a 	bl	80045f4 <SPI_WaitFlagStateUntilTimeout>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d016      	beq.n	8004774 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800474a:	f043 0220 	orr.w	r2, r3, #32
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e00f      	b.n	8004776 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00a      	beq.n	8004772 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	3b01      	subs	r3, #1
 8004760:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800476c:	2b80      	cmp	r3, #128	; 0x80
 800476e:	d0f2      	beq.n	8004756 <SPI_EndRxTxTransaction+0x52>
 8004770:	e000      	b.n	8004774 <SPI_EndRxTxTransaction+0x70>
        break;
 8004772:	bf00      	nop
  }

  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3718      	adds	r7, #24
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	20000028 	.word	0x20000028
 8004784:	165e9f81 	.word	0x165e9f81

08004788 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e03f      	b.n	800481a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d106      	bne.n	80047b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f7fd fe50 	bl	8002454 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2224      	movs	r2, #36	; 0x24
 80047b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68da      	ldr	r2, [r3, #12]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f000 f929 	bl	8004a24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	691a      	ldr	r2, [r3, #16]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	695a      	ldr	r2, [r3, #20]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68da      	ldr	r2, [r3, #12]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004800:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2220      	movs	r2, #32
 800480c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2220      	movs	r2, #32
 8004814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3708      	adds	r7, #8
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}

08004822 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004822:	b580      	push	{r7, lr}
 8004824:	b08a      	sub	sp, #40	; 0x28
 8004826:	af02      	add	r7, sp, #8
 8004828:	60f8      	str	r0, [r7, #12]
 800482a:	60b9      	str	r1, [r7, #8]
 800482c:	603b      	str	r3, [r7, #0]
 800482e:	4613      	mov	r3, r2
 8004830:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004832:	2300      	movs	r3, #0
 8004834:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b20      	cmp	r3, #32
 8004840:	d17c      	bne.n	800493c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d002      	beq.n	800484e <HAL_UART_Transmit+0x2c>
 8004848:	88fb      	ldrh	r3, [r7, #6]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d101      	bne.n	8004852 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e075      	b.n	800493e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004858:	2b01      	cmp	r3, #1
 800485a:	d101      	bne.n	8004860 <HAL_UART_Transmit+0x3e>
 800485c:	2302      	movs	r3, #2
 800485e:	e06e      	b.n	800493e <HAL_UART_Transmit+0x11c>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2200      	movs	r2, #0
 800486c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2221      	movs	r2, #33	; 0x21
 8004872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004876:	f7fd fec5 	bl	8002604 <HAL_GetTick>
 800487a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	88fa      	ldrh	r2, [r7, #6]
 8004880:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	88fa      	ldrh	r2, [r7, #6]
 8004886:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004890:	d108      	bne.n	80048a4 <HAL_UART_Transmit+0x82>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d104      	bne.n	80048a4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800489a:	2300      	movs	r3, #0
 800489c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	61bb      	str	r3, [r7, #24]
 80048a2:	e003      	b.n	80048ac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048a8:	2300      	movs	r3, #0
 80048aa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80048b4:	e02a      	b.n	800490c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	9300      	str	r3, [sp, #0]
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	2200      	movs	r2, #0
 80048be:	2180      	movs	r1, #128	; 0x80
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f000 f840 	bl	8004946 <UART_WaitOnFlagUntilTimeout>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d001      	beq.n	80048d0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e036      	b.n	800493e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d10b      	bne.n	80048ee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	881b      	ldrh	r3, [r3, #0]
 80048da:	461a      	mov	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	3302      	adds	r3, #2
 80048ea:	61bb      	str	r3, [r7, #24]
 80048ec:	e007      	b.n	80048fe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	781a      	ldrb	r2, [r3, #0]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	3301      	adds	r3, #1
 80048fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004902:	b29b      	uxth	r3, r3
 8004904:	3b01      	subs	r3, #1
 8004906:	b29a      	uxth	r2, r3
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004910:	b29b      	uxth	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d1cf      	bne.n	80048b6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	9300      	str	r3, [sp, #0]
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	2200      	movs	r2, #0
 800491e:	2140      	movs	r1, #64	; 0x40
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f000 f810 	bl	8004946 <UART_WaitOnFlagUntilTimeout>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d001      	beq.n	8004930 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e006      	b.n	800493e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2220      	movs	r2, #32
 8004934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004938:	2300      	movs	r3, #0
 800493a:	e000      	b.n	800493e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800493c:	2302      	movs	r3, #2
  }
}
 800493e:	4618      	mov	r0, r3
 8004940:	3720      	adds	r7, #32
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}

08004946 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004946:	b580      	push	{r7, lr}
 8004948:	b090      	sub	sp, #64	; 0x40
 800494a:	af00      	add	r7, sp, #0
 800494c:	60f8      	str	r0, [r7, #12]
 800494e:	60b9      	str	r1, [r7, #8]
 8004950:	603b      	str	r3, [r7, #0]
 8004952:	4613      	mov	r3, r2
 8004954:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004956:	e050      	b.n	80049fa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004958:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800495a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800495e:	d04c      	beq.n	80049fa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004960:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004962:	2b00      	cmp	r3, #0
 8004964:	d007      	beq.n	8004976 <UART_WaitOnFlagUntilTimeout+0x30>
 8004966:	f7fd fe4d 	bl	8002604 <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004972:	429a      	cmp	r2, r3
 8004974:	d241      	bcs.n	80049fa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	330c      	adds	r3, #12
 800497c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800497e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004980:	e853 3f00 	ldrex	r3, [r3]
 8004984:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004988:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800498c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	330c      	adds	r3, #12
 8004994:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004996:	637a      	str	r2, [r7, #52]	; 0x34
 8004998:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800499c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800499e:	e841 2300 	strex	r3, r2, [r1]
 80049a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80049a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d1e5      	bne.n	8004976 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	3314      	adds	r3, #20
 80049b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	e853 3f00 	ldrex	r3, [r3]
 80049b8:	613b      	str	r3, [r7, #16]
   return(result);
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	f023 0301 	bic.w	r3, r3, #1
 80049c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	3314      	adds	r3, #20
 80049c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049ca:	623a      	str	r2, [r7, #32]
 80049cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ce:	69f9      	ldr	r1, [r7, #28]
 80049d0:	6a3a      	ldr	r2, [r7, #32]
 80049d2:	e841 2300 	strex	r3, r2, [r1]
 80049d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1e5      	bne.n	80049aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2220      	movs	r2, #32
 80049e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2220      	movs	r2, #32
 80049ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e00f      	b.n	8004a1a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	4013      	ands	r3, r2
 8004a04:	68ba      	ldr	r2, [r7, #8]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	bf0c      	ite	eq
 8004a0a:	2301      	moveq	r3, #1
 8004a0c:	2300      	movne	r3, #0
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	461a      	mov	r2, r3
 8004a12:	79fb      	ldrb	r3, [r7, #7]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d09f      	beq.n	8004958 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3740      	adds	r7, #64	; 0x40
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
	...

08004a24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a28:	b0c0      	sub	sp, #256	; 0x100
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a40:	68d9      	ldr	r1, [r3, #12]
 8004a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	ea40 0301 	orr.w	r3, r0, r1
 8004a4c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a52:	689a      	ldr	r2, [r3, #8]
 8004a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	431a      	orrs	r2, r3
 8004a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	431a      	orrs	r2, r3
 8004a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a68:	69db      	ldr	r3, [r3, #28]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004a7c:	f021 010c 	bic.w	r1, r1, #12
 8004a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a8a:	430b      	orrs	r3, r1
 8004a8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a9e:	6999      	ldr	r1, [r3, #24]
 8004aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	ea40 0301 	orr.w	r3, r0, r1
 8004aaa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	4b8f      	ldr	r3, [pc, #572]	; (8004cf0 <UART_SetConfig+0x2cc>)
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d005      	beq.n	8004ac4 <UART_SetConfig+0xa0>
 8004ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	4b8d      	ldr	r3, [pc, #564]	; (8004cf4 <UART_SetConfig+0x2d0>)
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d104      	bne.n	8004ace <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ac4:	f7ff fa90 	bl	8003fe8 <HAL_RCC_GetPCLK2Freq>
 8004ac8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004acc:	e003      	b.n	8004ad6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ace:	f7ff fa77 	bl	8003fc0 <HAL_RCC_GetPCLK1Freq>
 8004ad2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ada:	69db      	ldr	r3, [r3, #28]
 8004adc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ae0:	f040 810c 	bne.w	8004cfc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ae4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004aee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004af2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004af6:	4622      	mov	r2, r4
 8004af8:	462b      	mov	r3, r5
 8004afa:	1891      	adds	r1, r2, r2
 8004afc:	65b9      	str	r1, [r7, #88]	; 0x58
 8004afe:	415b      	adcs	r3, r3
 8004b00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b02:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004b06:	4621      	mov	r1, r4
 8004b08:	eb12 0801 	adds.w	r8, r2, r1
 8004b0c:	4629      	mov	r1, r5
 8004b0e:	eb43 0901 	adc.w	r9, r3, r1
 8004b12:	f04f 0200 	mov.w	r2, #0
 8004b16:	f04f 0300 	mov.w	r3, #0
 8004b1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b26:	4690      	mov	r8, r2
 8004b28:	4699      	mov	r9, r3
 8004b2a:	4623      	mov	r3, r4
 8004b2c:	eb18 0303 	adds.w	r3, r8, r3
 8004b30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004b34:	462b      	mov	r3, r5
 8004b36:	eb49 0303 	adc.w	r3, r9, r3
 8004b3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004b4a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004b4e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004b52:	460b      	mov	r3, r1
 8004b54:	18db      	adds	r3, r3, r3
 8004b56:	653b      	str	r3, [r7, #80]	; 0x50
 8004b58:	4613      	mov	r3, r2
 8004b5a:	eb42 0303 	adc.w	r3, r2, r3
 8004b5e:	657b      	str	r3, [r7, #84]	; 0x54
 8004b60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004b64:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004b68:	f7fb fb8a 	bl	8000280 <__aeabi_uldivmod>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	460b      	mov	r3, r1
 8004b70:	4b61      	ldr	r3, [pc, #388]	; (8004cf8 <UART_SetConfig+0x2d4>)
 8004b72:	fba3 2302 	umull	r2, r3, r3, r2
 8004b76:	095b      	lsrs	r3, r3, #5
 8004b78:	011c      	lsls	r4, r3, #4
 8004b7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b84:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004b88:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004b8c:	4642      	mov	r2, r8
 8004b8e:	464b      	mov	r3, r9
 8004b90:	1891      	adds	r1, r2, r2
 8004b92:	64b9      	str	r1, [r7, #72]	; 0x48
 8004b94:	415b      	adcs	r3, r3
 8004b96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b98:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004b9c:	4641      	mov	r1, r8
 8004b9e:	eb12 0a01 	adds.w	sl, r2, r1
 8004ba2:	4649      	mov	r1, r9
 8004ba4:	eb43 0b01 	adc.w	fp, r3, r1
 8004ba8:	f04f 0200 	mov.w	r2, #0
 8004bac:	f04f 0300 	mov.w	r3, #0
 8004bb0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004bb4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004bb8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004bbc:	4692      	mov	sl, r2
 8004bbe:	469b      	mov	fp, r3
 8004bc0:	4643      	mov	r3, r8
 8004bc2:	eb1a 0303 	adds.w	r3, sl, r3
 8004bc6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004bca:	464b      	mov	r3, r9
 8004bcc:	eb4b 0303 	adc.w	r3, fp, r3
 8004bd0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004be0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004be4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004be8:	460b      	mov	r3, r1
 8004bea:	18db      	adds	r3, r3, r3
 8004bec:	643b      	str	r3, [r7, #64]	; 0x40
 8004bee:	4613      	mov	r3, r2
 8004bf0:	eb42 0303 	adc.w	r3, r2, r3
 8004bf4:	647b      	str	r3, [r7, #68]	; 0x44
 8004bf6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004bfa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004bfe:	f7fb fb3f 	bl	8000280 <__aeabi_uldivmod>
 8004c02:	4602      	mov	r2, r0
 8004c04:	460b      	mov	r3, r1
 8004c06:	4611      	mov	r1, r2
 8004c08:	4b3b      	ldr	r3, [pc, #236]	; (8004cf8 <UART_SetConfig+0x2d4>)
 8004c0a:	fba3 2301 	umull	r2, r3, r3, r1
 8004c0e:	095b      	lsrs	r3, r3, #5
 8004c10:	2264      	movs	r2, #100	; 0x64
 8004c12:	fb02 f303 	mul.w	r3, r2, r3
 8004c16:	1acb      	subs	r3, r1, r3
 8004c18:	00db      	lsls	r3, r3, #3
 8004c1a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004c1e:	4b36      	ldr	r3, [pc, #216]	; (8004cf8 <UART_SetConfig+0x2d4>)
 8004c20:	fba3 2302 	umull	r2, r3, r3, r2
 8004c24:	095b      	lsrs	r3, r3, #5
 8004c26:	005b      	lsls	r3, r3, #1
 8004c28:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c2c:	441c      	add	r4, r3
 8004c2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c32:	2200      	movs	r2, #0
 8004c34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c38:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004c3c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004c40:	4642      	mov	r2, r8
 8004c42:	464b      	mov	r3, r9
 8004c44:	1891      	adds	r1, r2, r2
 8004c46:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c48:	415b      	adcs	r3, r3
 8004c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004c50:	4641      	mov	r1, r8
 8004c52:	1851      	adds	r1, r2, r1
 8004c54:	6339      	str	r1, [r7, #48]	; 0x30
 8004c56:	4649      	mov	r1, r9
 8004c58:	414b      	adcs	r3, r1
 8004c5a:	637b      	str	r3, [r7, #52]	; 0x34
 8004c5c:	f04f 0200 	mov.w	r2, #0
 8004c60:	f04f 0300 	mov.w	r3, #0
 8004c64:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004c68:	4659      	mov	r1, fp
 8004c6a:	00cb      	lsls	r3, r1, #3
 8004c6c:	4651      	mov	r1, sl
 8004c6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c72:	4651      	mov	r1, sl
 8004c74:	00ca      	lsls	r2, r1, #3
 8004c76:	4610      	mov	r0, r2
 8004c78:	4619      	mov	r1, r3
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	4642      	mov	r2, r8
 8004c7e:	189b      	adds	r3, r3, r2
 8004c80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c84:	464b      	mov	r3, r9
 8004c86:	460a      	mov	r2, r1
 8004c88:	eb42 0303 	adc.w	r3, r2, r3
 8004c8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004c9c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004ca0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	18db      	adds	r3, r3, r3
 8004ca8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004caa:	4613      	mov	r3, r2
 8004cac:	eb42 0303 	adc.w	r3, r2, r3
 8004cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cb2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004cb6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004cba:	f7fb fae1 	bl	8000280 <__aeabi_uldivmod>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	4b0d      	ldr	r3, [pc, #52]	; (8004cf8 <UART_SetConfig+0x2d4>)
 8004cc4:	fba3 1302 	umull	r1, r3, r3, r2
 8004cc8:	095b      	lsrs	r3, r3, #5
 8004cca:	2164      	movs	r1, #100	; 0x64
 8004ccc:	fb01 f303 	mul.w	r3, r1, r3
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	00db      	lsls	r3, r3, #3
 8004cd4:	3332      	adds	r3, #50	; 0x32
 8004cd6:	4a08      	ldr	r2, [pc, #32]	; (8004cf8 <UART_SetConfig+0x2d4>)
 8004cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8004cdc:	095b      	lsrs	r3, r3, #5
 8004cde:	f003 0207 	and.w	r2, r3, #7
 8004ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4422      	add	r2, r4
 8004cea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004cec:	e105      	b.n	8004efa <UART_SetConfig+0x4d6>
 8004cee:	bf00      	nop
 8004cf0:	40011000 	.word	0x40011000
 8004cf4:	40011400 	.word	0x40011400
 8004cf8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004cfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d00:	2200      	movs	r2, #0
 8004d02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004d06:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004d0a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004d0e:	4642      	mov	r2, r8
 8004d10:	464b      	mov	r3, r9
 8004d12:	1891      	adds	r1, r2, r2
 8004d14:	6239      	str	r1, [r7, #32]
 8004d16:	415b      	adcs	r3, r3
 8004d18:	627b      	str	r3, [r7, #36]	; 0x24
 8004d1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d1e:	4641      	mov	r1, r8
 8004d20:	1854      	adds	r4, r2, r1
 8004d22:	4649      	mov	r1, r9
 8004d24:	eb43 0501 	adc.w	r5, r3, r1
 8004d28:	f04f 0200 	mov.w	r2, #0
 8004d2c:	f04f 0300 	mov.w	r3, #0
 8004d30:	00eb      	lsls	r3, r5, #3
 8004d32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d36:	00e2      	lsls	r2, r4, #3
 8004d38:	4614      	mov	r4, r2
 8004d3a:	461d      	mov	r5, r3
 8004d3c:	4643      	mov	r3, r8
 8004d3e:	18e3      	adds	r3, r4, r3
 8004d40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004d44:	464b      	mov	r3, r9
 8004d46:	eb45 0303 	adc.w	r3, r5, r3
 8004d4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004d5a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d5e:	f04f 0200 	mov.w	r2, #0
 8004d62:	f04f 0300 	mov.w	r3, #0
 8004d66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004d6a:	4629      	mov	r1, r5
 8004d6c:	008b      	lsls	r3, r1, #2
 8004d6e:	4621      	mov	r1, r4
 8004d70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d74:	4621      	mov	r1, r4
 8004d76:	008a      	lsls	r2, r1, #2
 8004d78:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004d7c:	f7fb fa80 	bl	8000280 <__aeabi_uldivmod>
 8004d80:	4602      	mov	r2, r0
 8004d82:	460b      	mov	r3, r1
 8004d84:	4b60      	ldr	r3, [pc, #384]	; (8004f08 <UART_SetConfig+0x4e4>)
 8004d86:	fba3 2302 	umull	r2, r3, r3, r2
 8004d8a:	095b      	lsrs	r3, r3, #5
 8004d8c:	011c      	lsls	r4, r3, #4
 8004d8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d92:	2200      	movs	r2, #0
 8004d94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d98:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004d9c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004da0:	4642      	mov	r2, r8
 8004da2:	464b      	mov	r3, r9
 8004da4:	1891      	adds	r1, r2, r2
 8004da6:	61b9      	str	r1, [r7, #24]
 8004da8:	415b      	adcs	r3, r3
 8004daa:	61fb      	str	r3, [r7, #28]
 8004dac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004db0:	4641      	mov	r1, r8
 8004db2:	1851      	adds	r1, r2, r1
 8004db4:	6139      	str	r1, [r7, #16]
 8004db6:	4649      	mov	r1, r9
 8004db8:	414b      	adcs	r3, r1
 8004dba:	617b      	str	r3, [r7, #20]
 8004dbc:	f04f 0200 	mov.w	r2, #0
 8004dc0:	f04f 0300 	mov.w	r3, #0
 8004dc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004dc8:	4659      	mov	r1, fp
 8004dca:	00cb      	lsls	r3, r1, #3
 8004dcc:	4651      	mov	r1, sl
 8004dce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dd2:	4651      	mov	r1, sl
 8004dd4:	00ca      	lsls	r2, r1, #3
 8004dd6:	4610      	mov	r0, r2
 8004dd8:	4619      	mov	r1, r3
 8004dda:	4603      	mov	r3, r0
 8004ddc:	4642      	mov	r2, r8
 8004dde:	189b      	adds	r3, r3, r2
 8004de0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004de4:	464b      	mov	r3, r9
 8004de6:	460a      	mov	r2, r1
 8004de8:	eb42 0303 	adc.w	r3, r2, r3
 8004dec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	67bb      	str	r3, [r7, #120]	; 0x78
 8004dfa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004dfc:	f04f 0200 	mov.w	r2, #0
 8004e00:	f04f 0300 	mov.w	r3, #0
 8004e04:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004e08:	4649      	mov	r1, r9
 8004e0a:	008b      	lsls	r3, r1, #2
 8004e0c:	4641      	mov	r1, r8
 8004e0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e12:	4641      	mov	r1, r8
 8004e14:	008a      	lsls	r2, r1, #2
 8004e16:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004e1a:	f7fb fa31 	bl	8000280 <__aeabi_uldivmod>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	460b      	mov	r3, r1
 8004e22:	4b39      	ldr	r3, [pc, #228]	; (8004f08 <UART_SetConfig+0x4e4>)
 8004e24:	fba3 1302 	umull	r1, r3, r3, r2
 8004e28:	095b      	lsrs	r3, r3, #5
 8004e2a:	2164      	movs	r1, #100	; 0x64
 8004e2c:	fb01 f303 	mul.w	r3, r1, r3
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	011b      	lsls	r3, r3, #4
 8004e34:	3332      	adds	r3, #50	; 0x32
 8004e36:	4a34      	ldr	r2, [pc, #208]	; (8004f08 <UART_SetConfig+0x4e4>)
 8004e38:	fba2 2303 	umull	r2, r3, r2, r3
 8004e3c:	095b      	lsrs	r3, r3, #5
 8004e3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e42:	441c      	add	r4, r3
 8004e44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e48:	2200      	movs	r2, #0
 8004e4a:	673b      	str	r3, [r7, #112]	; 0x70
 8004e4c:	677a      	str	r2, [r7, #116]	; 0x74
 8004e4e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004e52:	4642      	mov	r2, r8
 8004e54:	464b      	mov	r3, r9
 8004e56:	1891      	adds	r1, r2, r2
 8004e58:	60b9      	str	r1, [r7, #8]
 8004e5a:	415b      	adcs	r3, r3
 8004e5c:	60fb      	str	r3, [r7, #12]
 8004e5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e62:	4641      	mov	r1, r8
 8004e64:	1851      	adds	r1, r2, r1
 8004e66:	6039      	str	r1, [r7, #0]
 8004e68:	4649      	mov	r1, r9
 8004e6a:	414b      	adcs	r3, r1
 8004e6c:	607b      	str	r3, [r7, #4]
 8004e6e:	f04f 0200 	mov.w	r2, #0
 8004e72:	f04f 0300 	mov.w	r3, #0
 8004e76:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e7a:	4659      	mov	r1, fp
 8004e7c:	00cb      	lsls	r3, r1, #3
 8004e7e:	4651      	mov	r1, sl
 8004e80:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e84:	4651      	mov	r1, sl
 8004e86:	00ca      	lsls	r2, r1, #3
 8004e88:	4610      	mov	r0, r2
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	4642      	mov	r2, r8
 8004e90:	189b      	adds	r3, r3, r2
 8004e92:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e94:	464b      	mov	r3, r9
 8004e96:	460a      	mov	r2, r1
 8004e98:	eb42 0303 	adc.w	r3, r2, r3
 8004e9c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	663b      	str	r3, [r7, #96]	; 0x60
 8004ea8:	667a      	str	r2, [r7, #100]	; 0x64
 8004eaa:	f04f 0200 	mov.w	r2, #0
 8004eae:	f04f 0300 	mov.w	r3, #0
 8004eb2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004eb6:	4649      	mov	r1, r9
 8004eb8:	008b      	lsls	r3, r1, #2
 8004eba:	4641      	mov	r1, r8
 8004ebc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ec0:	4641      	mov	r1, r8
 8004ec2:	008a      	lsls	r2, r1, #2
 8004ec4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004ec8:	f7fb f9da 	bl	8000280 <__aeabi_uldivmod>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	460b      	mov	r3, r1
 8004ed0:	4b0d      	ldr	r3, [pc, #52]	; (8004f08 <UART_SetConfig+0x4e4>)
 8004ed2:	fba3 1302 	umull	r1, r3, r3, r2
 8004ed6:	095b      	lsrs	r3, r3, #5
 8004ed8:	2164      	movs	r1, #100	; 0x64
 8004eda:	fb01 f303 	mul.w	r3, r1, r3
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	011b      	lsls	r3, r3, #4
 8004ee2:	3332      	adds	r3, #50	; 0x32
 8004ee4:	4a08      	ldr	r2, [pc, #32]	; (8004f08 <UART_SetConfig+0x4e4>)
 8004ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eea:	095b      	lsrs	r3, r3, #5
 8004eec:	f003 020f 	and.w	r2, r3, #15
 8004ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4422      	add	r2, r4
 8004ef8:	609a      	str	r2, [r3, #8]
}
 8004efa:	bf00      	nop
 8004efc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004f00:	46bd      	mov	sp, r7
 8004f02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f06:	bf00      	nop
 8004f08:	51eb851f 	.word	0x51eb851f

08004f0c <__assert_func>:
 8004f0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004f0e:	4614      	mov	r4, r2
 8004f10:	461a      	mov	r2, r3
 8004f12:	4b09      	ldr	r3, [pc, #36]	; (8004f38 <__assert_func+0x2c>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4605      	mov	r5, r0
 8004f18:	68d8      	ldr	r0, [r3, #12]
 8004f1a:	b14c      	cbz	r4, 8004f30 <__assert_func+0x24>
 8004f1c:	4b07      	ldr	r3, [pc, #28]	; (8004f3c <__assert_func+0x30>)
 8004f1e:	9100      	str	r1, [sp, #0]
 8004f20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004f24:	4906      	ldr	r1, [pc, #24]	; (8004f40 <__assert_func+0x34>)
 8004f26:	462b      	mov	r3, r5
 8004f28:	f000 f814 	bl	8004f54 <fiprintf>
 8004f2c:	f000 fc16 	bl	800575c <abort>
 8004f30:	4b04      	ldr	r3, [pc, #16]	; (8004f44 <__assert_func+0x38>)
 8004f32:	461c      	mov	r4, r3
 8004f34:	e7f3      	b.n	8004f1e <__assert_func+0x12>
 8004f36:	bf00      	nop
 8004f38:	20000034 	.word	0x20000034
 8004f3c:	08006d98 	.word	0x08006d98
 8004f40:	08006da5 	.word	0x08006da5
 8004f44:	08006dd3 	.word	0x08006dd3

08004f48 <__errno>:
 8004f48:	4b01      	ldr	r3, [pc, #4]	; (8004f50 <__errno+0x8>)
 8004f4a:	6818      	ldr	r0, [r3, #0]
 8004f4c:	4770      	bx	lr
 8004f4e:	bf00      	nop
 8004f50:	20000034 	.word	0x20000034

08004f54 <fiprintf>:
 8004f54:	b40e      	push	{r1, r2, r3}
 8004f56:	b503      	push	{r0, r1, lr}
 8004f58:	4601      	mov	r1, r0
 8004f5a:	ab03      	add	r3, sp, #12
 8004f5c:	4805      	ldr	r0, [pc, #20]	; (8004f74 <fiprintf+0x20>)
 8004f5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f62:	6800      	ldr	r0, [r0, #0]
 8004f64:	9301      	str	r3, [sp, #4]
 8004f66:	f000 f85d 	bl	8005024 <_vfiprintf_r>
 8004f6a:	b002      	add	sp, #8
 8004f6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f70:	b003      	add	sp, #12
 8004f72:	4770      	bx	lr
 8004f74:	20000034 	.word	0x20000034

08004f78 <__libc_init_array>:
 8004f78:	b570      	push	{r4, r5, r6, lr}
 8004f7a:	4d0d      	ldr	r5, [pc, #52]	; (8004fb0 <__libc_init_array+0x38>)
 8004f7c:	4c0d      	ldr	r4, [pc, #52]	; (8004fb4 <__libc_init_array+0x3c>)
 8004f7e:	1b64      	subs	r4, r4, r5
 8004f80:	10a4      	asrs	r4, r4, #2
 8004f82:	2600      	movs	r6, #0
 8004f84:	42a6      	cmp	r6, r4
 8004f86:	d109      	bne.n	8004f9c <__libc_init_array+0x24>
 8004f88:	4d0b      	ldr	r5, [pc, #44]	; (8004fb8 <__libc_init_array+0x40>)
 8004f8a:	4c0c      	ldr	r4, [pc, #48]	; (8004fbc <__libc_init_array+0x44>)
 8004f8c:	f000 fffa 	bl	8005f84 <_init>
 8004f90:	1b64      	subs	r4, r4, r5
 8004f92:	10a4      	asrs	r4, r4, #2
 8004f94:	2600      	movs	r6, #0
 8004f96:	42a6      	cmp	r6, r4
 8004f98:	d105      	bne.n	8004fa6 <__libc_init_array+0x2e>
 8004f9a:	bd70      	pop	{r4, r5, r6, pc}
 8004f9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fa0:	4798      	blx	r3
 8004fa2:	3601      	adds	r6, #1
 8004fa4:	e7ee      	b.n	8004f84 <__libc_init_array+0xc>
 8004fa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004faa:	4798      	blx	r3
 8004fac:	3601      	adds	r6, #1
 8004fae:	e7f2      	b.n	8004f96 <__libc_init_array+0x1e>
 8004fb0:	08006e74 	.word	0x08006e74
 8004fb4:	08006e74 	.word	0x08006e74
 8004fb8:	08006e74 	.word	0x08006e74
 8004fbc:	08006e78 	.word	0x08006e78

08004fc0 <memset>:
 8004fc0:	4402      	add	r2, r0
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d100      	bne.n	8004fca <memset+0xa>
 8004fc8:	4770      	bx	lr
 8004fca:	f803 1b01 	strb.w	r1, [r3], #1
 8004fce:	e7f9      	b.n	8004fc4 <memset+0x4>

08004fd0 <__sfputc_r>:
 8004fd0:	6893      	ldr	r3, [r2, #8]
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	b410      	push	{r4}
 8004fd8:	6093      	str	r3, [r2, #8]
 8004fda:	da08      	bge.n	8004fee <__sfputc_r+0x1e>
 8004fdc:	6994      	ldr	r4, [r2, #24]
 8004fde:	42a3      	cmp	r3, r4
 8004fe0:	db01      	blt.n	8004fe6 <__sfputc_r+0x16>
 8004fe2:	290a      	cmp	r1, #10
 8004fe4:	d103      	bne.n	8004fee <__sfputc_r+0x1e>
 8004fe6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004fea:	f000 baf7 	b.w	80055dc <__swbuf_r>
 8004fee:	6813      	ldr	r3, [r2, #0]
 8004ff0:	1c58      	adds	r0, r3, #1
 8004ff2:	6010      	str	r0, [r2, #0]
 8004ff4:	7019      	strb	r1, [r3, #0]
 8004ff6:	4608      	mov	r0, r1
 8004ff8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ffc:	4770      	bx	lr

08004ffe <__sfputs_r>:
 8004ffe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005000:	4606      	mov	r6, r0
 8005002:	460f      	mov	r7, r1
 8005004:	4614      	mov	r4, r2
 8005006:	18d5      	adds	r5, r2, r3
 8005008:	42ac      	cmp	r4, r5
 800500a:	d101      	bne.n	8005010 <__sfputs_r+0x12>
 800500c:	2000      	movs	r0, #0
 800500e:	e007      	b.n	8005020 <__sfputs_r+0x22>
 8005010:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005014:	463a      	mov	r2, r7
 8005016:	4630      	mov	r0, r6
 8005018:	f7ff ffda 	bl	8004fd0 <__sfputc_r>
 800501c:	1c43      	adds	r3, r0, #1
 800501e:	d1f3      	bne.n	8005008 <__sfputs_r+0xa>
 8005020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005024 <_vfiprintf_r>:
 8005024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005028:	460d      	mov	r5, r1
 800502a:	b09d      	sub	sp, #116	; 0x74
 800502c:	4614      	mov	r4, r2
 800502e:	4698      	mov	r8, r3
 8005030:	4606      	mov	r6, r0
 8005032:	b118      	cbz	r0, 800503c <_vfiprintf_r+0x18>
 8005034:	6983      	ldr	r3, [r0, #24]
 8005036:	b90b      	cbnz	r3, 800503c <_vfiprintf_r+0x18>
 8005038:	f000 fcb2 	bl	80059a0 <__sinit>
 800503c:	4b89      	ldr	r3, [pc, #548]	; (8005264 <_vfiprintf_r+0x240>)
 800503e:	429d      	cmp	r5, r3
 8005040:	d11b      	bne.n	800507a <_vfiprintf_r+0x56>
 8005042:	6875      	ldr	r5, [r6, #4]
 8005044:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005046:	07d9      	lsls	r1, r3, #31
 8005048:	d405      	bmi.n	8005056 <_vfiprintf_r+0x32>
 800504a:	89ab      	ldrh	r3, [r5, #12]
 800504c:	059a      	lsls	r2, r3, #22
 800504e:	d402      	bmi.n	8005056 <_vfiprintf_r+0x32>
 8005050:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005052:	f000 fd43 	bl	8005adc <__retarget_lock_acquire_recursive>
 8005056:	89ab      	ldrh	r3, [r5, #12]
 8005058:	071b      	lsls	r3, r3, #28
 800505a:	d501      	bpl.n	8005060 <_vfiprintf_r+0x3c>
 800505c:	692b      	ldr	r3, [r5, #16]
 800505e:	b9eb      	cbnz	r3, 800509c <_vfiprintf_r+0x78>
 8005060:	4629      	mov	r1, r5
 8005062:	4630      	mov	r0, r6
 8005064:	f000 fb0c 	bl	8005680 <__swsetup_r>
 8005068:	b1c0      	cbz	r0, 800509c <_vfiprintf_r+0x78>
 800506a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800506c:	07dc      	lsls	r4, r3, #31
 800506e:	d50e      	bpl.n	800508e <_vfiprintf_r+0x6a>
 8005070:	f04f 30ff 	mov.w	r0, #4294967295
 8005074:	b01d      	add	sp, #116	; 0x74
 8005076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800507a:	4b7b      	ldr	r3, [pc, #492]	; (8005268 <_vfiprintf_r+0x244>)
 800507c:	429d      	cmp	r5, r3
 800507e:	d101      	bne.n	8005084 <_vfiprintf_r+0x60>
 8005080:	68b5      	ldr	r5, [r6, #8]
 8005082:	e7df      	b.n	8005044 <_vfiprintf_r+0x20>
 8005084:	4b79      	ldr	r3, [pc, #484]	; (800526c <_vfiprintf_r+0x248>)
 8005086:	429d      	cmp	r5, r3
 8005088:	bf08      	it	eq
 800508a:	68f5      	ldreq	r5, [r6, #12]
 800508c:	e7da      	b.n	8005044 <_vfiprintf_r+0x20>
 800508e:	89ab      	ldrh	r3, [r5, #12]
 8005090:	0598      	lsls	r0, r3, #22
 8005092:	d4ed      	bmi.n	8005070 <_vfiprintf_r+0x4c>
 8005094:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005096:	f000 fd22 	bl	8005ade <__retarget_lock_release_recursive>
 800509a:	e7e9      	b.n	8005070 <_vfiprintf_r+0x4c>
 800509c:	2300      	movs	r3, #0
 800509e:	9309      	str	r3, [sp, #36]	; 0x24
 80050a0:	2320      	movs	r3, #32
 80050a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80050a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80050aa:	2330      	movs	r3, #48	; 0x30
 80050ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005270 <_vfiprintf_r+0x24c>
 80050b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80050b4:	f04f 0901 	mov.w	r9, #1
 80050b8:	4623      	mov	r3, r4
 80050ba:	469a      	mov	sl, r3
 80050bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80050c0:	b10a      	cbz	r2, 80050c6 <_vfiprintf_r+0xa2>
 80050c2:	2a25      	cmp	r2, #37	; 0x25
 80050c4:	d1f9      	bne.n	80050ba <_vfiprintf_r+0x96>
 80050c6:	ebba 0b04 	subs.w	fp, sl, r4
 80050ca:	d00b      	beq.n	80050e4 <_vfiprintf_r+0xc0>
 80050cc:	465b      	mov	r3, fp
 80050ce:	4622      	mov	r2, r4
 80050d0:	4629      	mov	r1, r5
 80050d2:	4630      	mov	r0, r6
 80050d4:	f7ff ff93 	bl	8004ffe <__sfputs_r>
 80050d8:	3001      	adds	r0, #1
 80050da:	f000 80aa 	beq.w	8005232 <_vfiprintf_r+0x20e>
 80050de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050e0:	445a      	add	r2, fp
 80050e2:	9209      	str	r2, [sp, #36]	; 0x24
 80050e4:	f89a 3000 	ldrb.w	r3, [sl]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	f000 80a2 	beq.w	8005232 <_vfiprintf_r+0x20e>
 80050ee:	2300      	movs	r3, #0
 80050f0:	f04f 32ff 	mov.w	r2, #4294967295
 80050f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050f8:	f10a 0a01 	add.w	sl, sl, #1
 80050fc:	9304      	str	r3, [sp, #16]
 80050fe:	9307      	str	r3, [sp, #28]
 8005100:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005104:	931a      	str	r3, [sp, #104]	; 0x68
 8005106:	4654      	mov	r4, sl
 8005108:	2205      	movs	r2, #5
 800510a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800510e:	4858      	ldr	r0, [pc, #352]	; (8005270 <_vfiprintf_r+0x24c>)
 8005110:	f7fb f866 	bl	80001e0 <memchr>
 8005114:	9a04      	ldr	r2, [sp, #16]
 8005116:	b9d8      	cbnz	r0, 8005150 <_vfiprintf_r+0x12c>
 8005118:	06d1      	lsls	r1, r2, #27
 800511a:	bf44      	itt	mi
 800511c:	2320      	movmi	r3, #32
 800511e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005122:	0713      	lsls	r3, r2, #28
 8005124:	bf44      	itt	mi
 8005126:	232b      	movmi	r3, #43	; 0x2b
 8005128:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800512c:	f89a 3000 	ldrb.w	r3, [sl]
 8005130:	2b2a      	cmp	r3, #42	; 0x2a
 8005132:	d015      	beq.n	8005160 <_vfiprintf_r+0x13c>
 8005134:	9a07      	ldr	r2, [sp, #28]
 8005136:	4654      	mov	r4, sl
 8005138:	2000      	movs	r0, #0
 800513a:	f04f 0c0a 	mov.w	ip, #10
 800513e:	4621      	mov	r1, r4
 8005140:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005144:	3b30      	subs	r3, #48	; 0x30
 8005146:	2b09      	cmp	r3, #9
 8005148:	d94e      	bls.n	80051e8 <_vfiprintf_r+0x1c4>
 800514a:	b1b0      	cbz	r0, 800517a <_vfiprintf_r+0x156>
 800514c:	9207      	str	r2, [sp, #28]
 800514e:	e014      	b.n	800517a <_vfiprintf_r+0x156>
 8005150:	eba0 0308 	sub.w	r3, r0, r8
 8005154:	fa09 f303 	lsl.w	r3, r9, r3
 8005158:	4313      	orrs	r3, r2
 800515a:	9304      	str	r3, [sp, #16]
 800515c:	46a2      	mov	sl, r4
 800515e:	e7d2      	b.n	8005106 <_vfiprintf_r+0xe2>
 8005160:	9b03      	ldr	r3, [sp, #12]
 8005162:	1d19      	adds	r1, r3, #4
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	9103      	str	r1, [sp, #12]
 8005168:	2b00      	cmp	r3, #0
 800516a:	bfbb      	ittet	lt
 800516c:	425b      	neglt	r3, r3
 800516e:	f042 0202 	orrlt.w	r2, r2, #2
 8005172:	9307      	strge	r3, [sp, #28]
 8005174:	9307      	strlt	r3, [sp, #28]
 8005176:	bfb8      	it	lt
 8005178:	9204      	strlt	r2, [sp, #16]
 800517a:	7823      	ldrb	r3, [r4, #0]
 800517c:	2b2e      	cmp	r3, #46	; 0x2e
 800517e:	d10c      	bne.n	800519a <_vfiprintf_r+0x176>
 8005180:	7863      	ldrb	r3, [r4, #1]
 8005182:	2b2a      	cmp	r3, #42	; 0x2a
 8005184:	d135      	bne.n	80051f2 <_vfiprintf_r+0x1ce>
 8005186:	9b03      	ldr	r3, [sp, #12]
 8005188:	1d1a      	adds	r2, r3, #4
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	9203      	str	r2, [sp, #12]
 800518e:	2b00      	cmp	r3, #0
 8005190:	bfb8      	it	lt
 8005192:	f04f 33ff 	movlt.w	r3, #4294967295
 8005196:	3402      	adds	r4, #2
 8005198:	9305      	str	r3, [sp, #20]
 800519a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005280 <_vfiprintf_r+0x25c>
 800519e:	7821      	ldrb	r1, [r4, #0]
 80051a0:	2203      	movs	r2, #3
 80051a2:	4650      	mov	r0, sl
 80051a4:	f7fb f81c 	bl	80001e0 <memchr>
 80051a8:	b140      	cbz	r0, 80051bc <_vfiprintf_r+0x198>
 80051aa:	2340      	movs	r3, #64	; 0x40
 80051ac:	eba0 000a 	sub.w	r0, r0, sl
 80051b0:	fa03 f000 	lsl.w	r0, r3, r0
 80051b4:	9b04      	ldr	r3, [sp, #16]
 80051b6:	4303      	orrs	r3, r0
 80051b8:	3401      	adds	r4, #1
 80051ba:	9304      	str	r3, [sp, #16]
 80051bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051c0:	482c      	ldr	r0, [pc, #176]	; (8005274 <_vfiprintf_r+0x250>)
 80051c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80051c6:	2206      	movs	r2, #6
 80051c8:	f7fb f80a 	bl	80001e0 <memchr>
 80051cc:	2800      	cmp	r0, #0
 80051ce:	d03f      	beq.n	8005250 <_vfiprintf_r+0x22c>
 80051d0:	4b29      	ldr	r3, [pc, #164]	; (8005278 <_vfiprintf_r+0x254>)
 80051d2:	bb1b      	cbnz	r3, 800521c <_vfiprintf_r+0x1f8>
 80051d4:	9b03      	ldr	r3, [sp, #12]
 80051d6:	3307      	adds	r3, #7
 80051d8:	f023 0307 	bic.w	r3, r3, #7
 80051dc:	3308      	adds	r3, #8
 80051de:	9303      	str	r3, [sp, #12]
 80051e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051e2:	443b      	add	r3, r7
 80051e4:	9309      	str	r3, [sp, #36]	; 0x24
 80051e6:	e767      	b.n	80050b8 <_vfiprintf_r+0x94>
 80051e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80051ec:	460c      	mov	r4, r1
 80051ee:	2001      	movs	r0, #1
 80051f0:	e7a5      	b.n	800513e <_vfiprintf_r+0x11a>
 80051f2:	2300      	movs	r3, #0
 80051f4:	3401      	adds	r4, #1
 80051f6:	9305      	str	r3, [sp, #20]
 80051f8:	4619      	mov	r1, r3
 80051fa:	f04f 0c0a 	mov.w	ip, #10
 80051fe:	4620      	mov	r0, r4
 8005200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005204:	3a30      	subs	r2, #48	; 0x30
 8005206:	2a09      	cmp	r2, #9
 8005208:	d903      	bls.n	8005212 <_vfiprintf_r+0x1ee>
 800520a:	2b00      	cmp	r3, #0
 800520c:	d0c5      	beq.n	800519a <_vfiprintf_r+0x176>
 800520e:	9105      	str	r1, [sp, #20]
 8005210:	e7c3      	b.n	800519a <_vfiprintf_r+0x176>
 8005212:	fb0c 2101 	mla	r1, ip, r1, r2
 8005216:	4604      	mov	r4, r0
 8005218:	2301      	movs	r3, #1
 800521a:	e7f0      	b.n	80051fe <_vfiprintf_r+0x1da>
 800521c:	ab03      	add	r3, sp, #12
 800521e:	9300      	str	r3, [sp, #0]
 8005220:	462a      	mov	r2, r5
 8005222:	4b16      	ldr	r3, [pc, #88]	; (800527c <_vfiprintf_r+0x258>)
 8005224:	a904      	add	r1, sp, #16
 8005226:	4630      	mov	r0, r6
 8005228:	f3af 8000 	nop.w
 800522c:	4607      	mov	r7, r0
 800522e:	1c78      	adds	r0, r7, #1
 8005230:	d1d6      	bne.n	80051e0 <_vfiprintf_r+0x1bc>
 8005232:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005234:	07d9      	lsls	r1, r3, #31
 8005236:	d405      	bmi.n	8005244 <_vfiprintf_r+0x220>
 8005238:	89ab      	ldrh	r3, [r5, #12]
 800523a:	059a      	lsls	r2, r3, #22
 800523c:	d402      	bmi.n	8005244 <_vfiprintf_r+0x220>
 800523e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005240:	f000 fc4d 	bl	8005ade <__retarget_lock_release_recursive>
 8005244:	89ab      	ldrh	r3, [r5, #12]
 8005246:	065b      	lsls	r3, r3, #25
 8005248:	f53f af12 	bmi.w	8005070 <_vfiprintf_r+0x4c>
 800524c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800524e:	e711      	b.n	8005074 <_vfiprintf_r+0x50>
 8005250:	ab03      	add	r3, sp, #12
 8005252:	9300      	str	r3, [sp, #0]
 8005254:	462a      	mov	r2, r5
 8005256:	4b09      	ldr	r3, [pc, #36]	; (800527c <_vfiprintf_r+0x258>)
 8005258:	a904      	add	r1, sp, #16
 800525a:	4630      	mov	r0, r6
 800525c:	f000 f880 	bl	8005360 <_printf_i>
 8005260:	e7e4      	b.n	800522c <_vfiprintf_r+0x208>
 8005262:	bf00      	nop
 8005264:	08006e2c 	.word	0x08006e2c
 8005268:	08006e4c 	.word	0x08006e4c
 800526c:	08006e0c 	.word	0x08006e0c
 8005270:	08006dd8 	.word	0x08006dd8
 8005274:	08006de2 	.word	0x08006de2
 8005278:	00000000 	.word	0x00000000
 800527c:	08004fff 	.word	0x08004fff
 8005280:	08006dde 	.word	0x08006dde

08005284 <_printf_common>:
 8005284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005288:	4616      	mov	r6, r2
 800528a:	4699      	mov	r9, r3
 800528c:	688a      	ldr	r2, [r1, #8]
 800528e:	690b      	ldr	r3, [r1, #16]
 8005290:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005294:	4293      	cmp	r3, r2
 8005296:	bfb8      	it	lt
 8005298:	4613      	movlt	r3, r2
 800529a:	6033      	str	r3, [r6, #0]
 800529c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80052a0:	4607      	mov	r7, r0
 80052a2:	460c      	mov	r4, r1
 80052a4:	b10a      	cbz	r2, 80052aa <_printf_common+0x26>
 80052a6:	3301      	adds	r3, #1
 80052a8:	6033      	str	r3, [r6, #0]
 80052aa:	6823      	ldr	r3, [r4, #0]
 80052ac:	0699      	lsls	r1, r3, #26
 80052ae:	bf42      	ittt	mi
 80052b0:	6833      	ldrmi	r3, [r6, #0]
 80052b2:	3302      	addmi	r3, #2
 80052b4:	6033      	strmi	r3, [r6, #0]
 80052b6:	6825      	ldr	r5, [r4, #0]
 80052b8:	f015 0506 	ands.w	r5, r5, #6
 80052bc:	d106      	bne.n	80052cc <_printf_common+0x48>
 80052be:	f104 0a19 	add.w	sl, r4, #25
 80052c2:	68e3      	ldr	r3, [r4, #12]
 80052c4:	6832      	ldr	r2, [r6, #0]
 80052c6:	1a9b      	subs	r3, r3, r2
 80052c8:	42ab      	cmp	r3, r5
 80052ca:	dc26      	bgt.n	800531a <_printf_common+0x96>
 80052cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80052d0:	1e13      	subs	r3, r2, #0
 80052d2:	6822      	ldr	r2, [r4, #0]
 80052d4:	bf18      	it	ne
 80052d6:	2301      	movne	r3, #1
 80052d8:	0692      	lsls	r2, r2, #26
 80052da:	d42b      	bmi.n	8005334 <_printf_common+0xb0>
 80052dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052e0:	4649      	mov	r1, r9
 80052e2:	4638      	mov	r0, r7
 80052e4:	47c0      	blx	r8
 80052e6:	3001      	adds	r0, #1
 80052e8:	d01e      	beq.n	8005328 <_printf_common+0xa4>
 80052ea:	6823      	ldr	r3, [r4, #0]
 80052ec:	68e5      	ldr	r5, [r4, #12]
 80052ee:	6832      	ldr	r2, [r6, #0]
 80052f0:	f003 0306 	and.w	r3, r3, #6
 80052f4:	2b04      	cmp	r3, #4
 80052f6:	bf08      	it	eq
 80052f8:	1aad      	subeq	r5, r5, r2
 80052fa:	68a3      	ldr	r3, [r4, #8]
 80052fc:	6922      	ldr	r2, [r4, #16]
 80052fe:	bf0c      	ite	eq
 8005300:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005304:	2500      	movne	r5, #0
 8005306:	4293      	cmp	r3, r2
 8005308:	bfc4      	itt	gt
 800530a:	1a9b      	subgt	r3, r3, r2
 800530c:	18ed      	addgt	r5, r5, r3
 800530e:	2600      	movs	r6, #0
 8005310:	341a      	adds	r4, #26
 8005312:	42b5      	cmp	r5, r6
 8005314:	d11a      	bne.n	800534c <_printf_common+0xc8>
 8005316:	2000      	movs	r0, #0
 8005318:	e008      	b.n	800532c <_printf_common+0xa8>
 800531a:	2301      	movs	r3, #1
 800531c:	4652      	mov	r2, sl
 800531e:	4649      	mov	r1, r9
 8005320:	4638      	mov	r0, r7
 8005322:	47c0      	blx	r8
 8005324:	3001      	adds	r0, #1
 8005326:	d103      	bne.n	8005330 <_printf_common+0xac>
 8005328:	f04f 30ff 	mov.w	r0, #4294967295
 800532c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005330:	3501      	adds	r5, #1
 8005332:	e7c6      	b.n	80052c2 <_printf_common+0x3e>
 8005334:	18e1      	adds	r1, r4, r3
 8005336:	1c5a      	adds	r2, r3, #1
 8005338:	2030      	movs	r0, #48	; 0x30
 800533a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800533e:	4422      	add	r2, r4
 8005340:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005344:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005348:	3302      	adds	r3, #2
 800534a:	e7c7      	b.n	80052dc <_printf_common+0x58>
 800534c:	2301      	movs	r3, #1
 800534e:	4622      	mov	r2, r4
 8005350:	4649      	mov	r1, r9
 8005352:	4638      	mov	r0, r7
 8005354:	47c0      	blx	r8
 8005356:	3001      	adds	r0, #1
 8005358:	d0e6      	beq.n	8005328 <_printf_common+0xa4>
 800535a:	3601      	adds	r6, #1
 800535c:	e7d9      	b.n	8005312 <_printf_common+0x8e>
	...

08005360 <_printf_i>:
 8005360:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005364:	7e0f      	ldrb	r7, [r1, #24]
 8005366:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005368:	2f78      	cmp	r7, #120	; 0x78
 800536a:	4691      	mov	r9, r2
 800536c:	4680      	mov	r8, r0
 800536e:	460c      	mov	r4, r1
 8005370:	469a      	mov	sl, r3
 8005372:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005376:	d807      	bhi.n	8005388 <_printf_i+0x28>
 8005378:	2f62      	cmp	r7, #98	; 0x62
 800537a:	d80a      	bhi.n	8005392 <_printf_i+0x32>
 800537c:	2f00      	cmp	r7, #0
 800537e:	f000 80d8 	beq.w	8005532 <_printf_i+0x1d2>
 8005382:	2f58      	cmp	r7, #88	; 0x58
 8005384:	f000 80a3 	beq.w	80054ce <_printf_i+0x16e>
 8005388:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800538c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005390:	e03a      	b.n	8005408 <_printf_i+0xa8>
 8005392:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005396:	2b15      	cmp	r3, #21
 8005398:	d8f6      	bhi.n	8005388 <_printf_i+0x28>
 800539a:	a101      	add	r1, pc, #4	; (adr r1, 80053a0 <_printf_i+0x40>)
 800539c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80053a0:	080053f9 	.word	0x080053f9
 80053a4:	0800540d 	.word	0x0800540d
 80053a8:	08005389 	.word	0x08005389
 80053ac:	08005389 	.word	0x08005389
 80053b0:	08005389 	.word	0x08005389
 80053b4:	08005389 	.word	0x08005389
 80053b8:	0800540d 	.word	0x0800540d
 80053bc:	08005389 	.word	0x08005389
 80053c0:	08005389 	.word	0x08005389
 80053c4:	08005389 	.word	0x08005389
 80053c8:	08005389 	.word	0x08005389
 80053cc:	08005519 	.word	0x08005519
 80053d0:	0800543d 	.word	0x0800543d
 80053d4:	080054fb 	.word	0x080054fb
 80053d8:	08005389 	.word	0x08005389
 80053dc:	08005389 	.word	0x08005389
 80053e0:	0800553b 	.word	0x0800553b
 80053e4:	08005389 	.word	0x08005389
 80053e8:	0800543d 	.word	0x0800543d
 80053ec:	08005389 	.word	0x08005389
 80053f0:	08005389 	.word	0x08005389
 80053f4:	08005503 	.word	0x08005503
 80053f8:	682b      	ldr	r3, [r5, #0]
 80053fa:	1d1a      	adds	r2, r3, #4
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	602a      	str	r2, [r5, #0]
 8005400:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005404:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005408:	2301      	movs	r3, #1
 800540a:	e0a3      	b.n	8005554 <_printf_i+0x1f4>
 800540c:	6820      	ldr	r0, [r4, #0]
 800540e:	6829      	ldr	r1, [r5, #0]
 8005410:	0606      	lsls	r6, r0, #24
 8005412:	f101 0304 	add.w	r3, r1, #4
 8005416:	d50a      	bpl.n	800542e <_printf_i+0xce>
 8005418:	680e      	ldr	r6, [r1, #0]
 800541a:	602b      	str	r3, [r5, #0]
 800541c:	2e00      	cmp	r6, #0
 800541e:	da03      	bge.n	8005428 <_printf_i+0xc8>
 8005420:	232d      	movs	r3, #45	; 0x2d
 8005422:	4276      	negs	r6, r6
 8005424:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005428:	485e      	ldr	r0, [pc, #376]	; (80055a4 <_printf_i+0x244>)
 800542a:	230a      	movs	r3, #10
 800542c:	e019      	b.n	8005462 <_printf_i+0x102>
 800542e:	680e      	ldr	r6, [r1, #0]
 8005430:	602b      	str	r3, [r5, #0]
 8005432:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005436:	bf18      	it	ne
 8005438:	b236      	sxthne	r6, r6
 800543a:	e7ef      	b.n	800541c <_printf_i+0xbc>
 800543c:	682b      	ldr	r3, [r5, #0]
 800543e:	6820      	ldr	r0, [r4, #0]
 8005440:	1d19      	adds	r1, r3, #4
 8005442:	6029      	str	r1, [r5, #0]
 8005444:	0601      	lsls	r1, r0, #24
 8005446:	d501      	bpl.n	800544c <_printf_i+0xec>
 8005448:	681e      	ldr	r6, [r3, #0]
 800544a:	e002      	b.n	8005452 <_printf_i+0xf2>
 800544c:	0646      	lsls	r6, r0, #25
 800544e:	d5fb      	bpl.n	8005448 <_printf_i+0xe8>
 8005450:	881e      	ldrh	r6, [r3, #0]
 8005452:	4854      	ldr	r0, [pc, #336]	; (80055a4 <_printf_i+0x244>)
 8005454:	2f6f      	cmp	r7, #111	; 0x6f
 8005456:	bf0c      	ite	eq
 8005458:	2308      	moveq	r3, #8
 800545a:	230a      	movne	r3, #10
 800545c:	2100      	movs	r1, #0
 800545e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005462:	6865      	ldr	r5, [r4, #4]
 8005464:	60a5      	str	r5, [r4, #8]
 8005466:	2d00      	cmp	r5, #0
 8005468:	bfa2      	ittt	ge
 800546a:	6821      	ldrge	r1, [r4, #0]
 800546c:	f021 0104 	bicge.w	r1, r1, #4
 8005470:	6021      	strge	r1, [r4, #0]
 8005472:	b90e      	cbnz	r6, 8005478 <_printf_i+0x118>
 8005474:	2d00      	cmp	r5, #0
 8005476:	d04d      	beq.n	8005514 <_printf_i+0x1b4>
 8005478:	4615      	mov	r5, r2
 800547a:	fbb6 f1f3 	udiv	r1, r6, r3
 800547e:	fb03 6711 	mls	r7, r3, r1, r6
 8005482:	5dc7      	ldrb	r7, [r0, r7]
 8005484:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005488:	4637      	mov	r7, r6
 800548a:	42bb      	cmp	r3, r7
 800548c:	460e      	mov	r6, r1
 800548e:	d9f4      	bls.n	800547a <_printf_i+0x11a>
 8005490:	2b08      	cmp	r3, #8
 8005492:	d10b      	bne.n	80054ac <_printf_i+0x14c>
 8005494:	6823      	ldr	r3, [r4, #0]
 8005496:	07de      	lsls	r6, r3, #31
 8005498:	d508      	bpl.n	80054ac <_printf_i+0x14c>
 800549a:	6923      	ldr	r3, [r4, #16]
 800549c:	6861      	ldr	r1, [r4, #4]
 800549e:	4299      	cmp	r1, r3
 80054a0:	bfde      	ittt	le
 80054a2:	2330      	movle	r3, #48	; 0x30
 80054a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80054a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80054ac:	1b52      	subs	r2, r2, r5
 80054ae:	6122      	str	r2, [r4, #16]
 80054b0:	f8cd a000 	str.w	sl, [sp]
 80054b4:	464b      	mov	r3, r9
 80054b6:	aa03      	add	r2, sp, #12
 80054b8:	4621      	mov	r1, r4
 80054ba:	4640      	mov	r0, r8
 80054bc:	f7ff fee2 	bl	8005284 <_printf_common>
 80054c0:	3001      	adds	r0, #1
 80054c2:	d14c      	bne.n	800555e <_printf_i+0x1fe>
 80054c4:	f04f 30ff 	mov.w	r0, #4294967295
 80054c8:	b004      	add	sp, #16
 80054ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054ce:	4835      	ldr	r0, [pc, #212]	; (80055a4 <_printf_i+0x244>)
 80054d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80054d4:	6829      	ldr	r1, [r5, #0]
 80054d6:	6823      	ldr	r3, [r4, #0]
 80054d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80054dc:	6029      	str	r1, [r5, #0]
 80054de:	061d      	lsls	r5, r3, #24
 80054e0:	d514      	bpl.n	800550c <_printf_i+0x1ac>
 80054e2:	07df      	lsls	r7, r3, #31
 80054e4:	bf44      	itt	mi
 80054e6:	f043 0320 	orrmi.w	r3, r3, #32
 80054ea:	6023      	strmi	r3, [r4, #0]
 80054ec:	b91e      	cbnz	r6, 80054f6 <_printf_i+0x196>
 80054ee:	6823      	ldr	r3, [r4, #0]
 80054f0:	f023 0320 	bic.w	r3, r3, #32
 80054f4:	6023      	str	r3, [r4, #0]
 80054f6:	2310      	movs	r3, #16
 80054f8:	e7b0      	b.n	800545c <_printf_i+0xfc>
 80054fa:	6823      	ldr	r3, [r4, #0]
 80054fc:	f043 0320 	orr.w	r3, r3, #32
 8005500:	6023      	str	r3, [r4, #0]
 8005502:	2378      	movs	r3, #120	; 0x78
 8005504:	4828      	ldr	r0, [pc, #160]	; (80055a8 <_printf_i+0x248>)
 8005506:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800550a:	e7e3      	b.n	80054d4 <_printf_i+0x174>
 800550c:	0659      	lsls	r1, r3, #25
 800550e:	bf48      	it	mi
 8005510:	b2b6      	uxthmi	r6, r6
 8005512:	e7e6      	b.n	80054e2 <_printf_i+0x182>
 8005514:	4615      	mov	r5, r2
 8005516:	e7bb      	b.n	8005490 <_printf_i+0x130>
 8005518:	682b      	ldr	r3, [r5, #0]
 800551a:	6826      	ldr	r6, [r4, #0]
 800551c:	6961      	ldr	r1, [r4, #20]
 800551e:	1d18      	adds	r0, r3, #4
 8005520:	6028      	str	r0, [r5, #0]
 8005522:	0635      	lsls	r5, r6, #24
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	d501      	bpl.n	800552c <_printf_i+0x1cc>
 8005528:	6019      	str	r1, [r3, #0]
 800552a:	e002      	b.n	8005532 <_printf_i+0x1d2>
 800552c:	0670      	lsls	r0, r6, #25
 800552e:	d5fb      	bpl.n	8005528 <_printf_i+0x1c8>
 8005530:	8019      	strh	r1, [r3, #0]
 8005532:	2300      	movs	r3, #0
 8005534:	6123      	str	r3, [r4, #16]
 8005536:	4615      	mov	r5, r2
 8005538:	e7ba      	b.n	80054b0 <_printf_i+0x150>
 800553a:	682b      	ldr	r3, [r5, #0]
 800553c:	1d1a      	adds	r2, r3, #4
 800553e:	602a      	str	r2, [r5, #0]
 8005540:	681d      	ldr	r5, [r3, #0]
 8005542:	6862      	ldr	r2, [r4, #4]
 8005544:	2100      	movs	r1, #0
 8005546:	4628      	mov	r0, r5
 8005548:	f7fa fe4a 	bl	80001e0 <memchr>
 800554c:	b108      	cbz	r0, 8005552 <_printf_i+0x1f2>
 800554e:	1b40      	subs	r0, r0, r5
 8005550:	6060      	str	r0, [r4, #4]
 8005552:	6863      	ldr	r3, [r4, #4]
 8005554:	6123      	str	r3, [r4, #16]
 8005556:	2300      	movs	r3, #0
 8005558:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800555c:	e7a8      	b.n	80054b0 <_printf_i+0x150>
 800555e:	6923      	ldr	r3, [r4, #16]
 8005560:	462a      	mov	r2, r5
 8005562:	4649      	mov	r1, r9
 8005564:	4640      	mov	r0, r8
 8005566:	47d0      	blx	sl
 8005568:	3001      	adds	r0, #1
 800556a:	d0ab      	beq.n	80054c4 <_printf_i+0x164>
 800556c:	6823      	ldr	r3, [r4, #0]
 800556e:	079b      	lsls	r3, r3, #30
 8005570:	d413      	bmi.n	800559a <_printf_i+0x23a>
 8005572:	68e0      	ldr	r0, [r4, #12]
 8005574:	9b03      	ldr	r3, [sp, #12]
 8005576:	4298      	cmp	r0, r3
 8005578:	bfb8      	it	lt
 800557a:	4618      	movlt	r0, r3
 800557c:	e7a4      	b.n	80054c8 <_printf_i+0x168>
 800557e:	2301      	movs	r3, #1
 8005580:	4632      	mov	r2, r6
 8005582:	4649      	mov	r1, r9
 8005584:	4640      	mov	r0, r8
 8005586:	47d0      	blx	sl
 8005588:	3001      	adds	r0, #1
 800558a:	d09b      	beq.n	80054c4 <_printf_i+0x164>
 800558c:	3501      	adds	r5, #1
 800558e:	68e3      	ldr	r3, [r4, #12]
 8005590:	9903      	ldr	r1, [sp, #12]
 8005592:	1a5b      	subs	r3, r3, r1
 8005594:	42ab      	cmp	r3, r5
 8005596:	dcf2      	bgt.n	800557e <_printf_i+0x21e>
 8005598:	e7eb      	b.n	8005572 <_printf_i+0x212>
 800559a:	2500      	movs	r5, #0
 800559c:	f104 0619 	add.w	r6, r4, #25
 80055a0:	e7f5      	b.n	800558e <_printf_i+0x22e>
 80055a2:	bf00      	nop
 80055a4:	08006de9 	.word	0x08006de9
 80055a8:	08006dfa 	.word	0x08006dfa

080055ac <iprintf>:
 80055ac:	b40f      	push	{r0, r1, r2, r3}
 80055ae:	4b0a      	ldr	r3, [pc, #40]	; (80055d8 <iprintf+0x2c>)
 80055b0:	b513      	push	{r0, r1, r4, lr}
 80055b2:	681c      	ldr	r4, [r3, #0]
 80055b4:	b124      	cbz	r4, 80055c0 <iprintf+0x14>
 80055b6:	69a3      	ldr	r3, [r4, #24]
 80055b8:	b913      	cbnz	r3, 80055c0 <iprintf+0x14>
 80055ba:	4620      	mov	r0, r4
 80055bc:	f000 f9f0 	bl	80059a0 <__sinit>
 80055c0:	ab05      	add	r3, sp, #20
 80055c2:	9a04      	ldr	r2, [sp, #16]
 80055c4:	68a1      	ldr	r1, [r4, #8]
 80055c6:	9301      	str	r3, [sp, #4]
 80055c8:	4620      	mov	r0, r4
 80055ca:	f7ff fd2b 	bl	8005024 <_vfiprintf_r>
 80055ce:	b002      	add	sp, #8
 80055d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055d4:	b004      	add	sp, #16
 80055d6:	4770      	bx	lr
 80055d8:	20000034 	.word	0x20000034

080055dc <__swbuf_r>:
 80055dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055de:	460e      	mov	r6, r1
 80055e0:	4614      	mov	r4, r2
 80055e2:	4605      	mov	r5, r0
 80055e4:	b118      	cbz	r0, 80055ee <__swbuf_r+0x12>
 80055e6:	6983      	ldr	r3, [r0, #24]
 80055e8:	b90b      	cbnz	r3, 80055ee <__swbuf_r+0x12>
 80055ea:	f000 f9d9 	bl	80059a0 <__sinit>
 80055ee:	4b21      	ldr	r3, [pc, #132]	; (8005674 <__swbuf_r+0x98>)
 80055f0:	429c      	cmp	r4, r3
 80055f2:	d12b      	bne.n	800564c <__swbuf_r+0x70>
 80055f4:	686c      	ldr	r4, [r5, #4]
 80055f6:	69a3      	ldr	r3, [r4, #24]
 80055f8:	60a3      	str	r3, [r4, #8]
 80055fa:	89a3      	ldrh	r3, [r4, #12]
 80055fc:	071a      	lsls	r2, r3, #28
 80055fe:	d52f      	bpl.n	8005660 <__swbuf_r+0x84>
 8005600:	6923      	ldr	r3, [r4, #16]
 8005602:	b36b      	cbz	r3, 8005660 <__swbuf_r+0x84>
 8005604:	6923      	ldr	r3, [r4, #16]
 8005606:	6820      	ldr	r0, [r4, #0]
 8005608:	1ac0      	subs	r0, r0, r3
 800560a:	6963      	ldr	r3, [r4, #20]
 800560c:	b2f6      	uxtb	r6, r6
 800560e:	4283      	cmp	r3, r0
 8005610:	4637      	mov	r7, r6
 8005612:	dc04      	bgt.n	800561e <__swbuf_r+0x42>
 8005614:	4621      	mov	r1, r4
 8005616:	4628      	mov	r0, r5
 8005618:	f000 f92e 	bl	8005878 <_fflush_r>
 800561c:	bb30      	cbnz	r0, 800566c <__swbuf_r+0x90>
 800561e:	68a3      	ldr	r3, [r4, #8]
 8005620:	3b01      	subs	r3, #1
 8005622:	60a3      	str	r3, [r4, #8]
 8005624:	6823      	ldr	r3, [r4, #0]
 8005626:	1c5a      	adds	r2, r3, #1
 8005628:	6022      	str	r2, [r4, #0]
 800562a:	701e      	strb	r6, [r3, #0]
 800562c:	6963      	ldr	r3, [r4, #20]
 800562e:	3001      	adds	r0, #1
 8005630:	4283      	cmp	r3, r0
 8005632:	d004      	beq.n	800563e <__swbuf_r+0x62>
 8005634:	89a3      	ldrh	r3, [r4, #12]
 8005636:	07db      	lsls	r3, r3, #31
 8005638:	d506      	bpl.n	8005648 <__swbuf_r+0x6c>
 800563a:	2e0a      	cmp	r6, #10
 800563c:	d104      	bne.n	8005648 <__swbuf_r+0x6c>
 800563e:	4621      	mov	r1, r4
 8005640:	4628      	mov	r0, r5
 8005642:	f000 f919 	bl	8005878 <_fflush_r>
 8005646:	b988      	cbnz	r0, 800566c <__swbuf_r+0x90>
 8005648:	4638      	mov	r0, r7
 800564a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800564c:	4b0a      	ldr	r3, [pc, #40]	; (8005678 <__swbuf_r+0x9c>)
 800564e:	429c      	cmp	r4, r3
 8005650:	d101      	bne.n	8005656 <__swbuf_r+0x7a>
 8005652:	68ac      	ldr	r4, [r5, #8]
 8005654:	e7cf      	b.n	80055f6 <__swbuf_r+0x1a>
 8005656:	4b09      	ldr	r3, [pc, #36]	; (800567c <__swbuf_r+0xa0>)
 8005658:	429c      	cmp	r4, r3
 800565a:	bf08      	it	eq
 800565c:	68ec      	ldreq	r4, [r5, #12]
 800565e:	e7ca      	b.n	80055f6 <__swbuf_r+0x1a>
 8005660:	4621      	mov	r1, r4
 8005662:	4628      	mov	r0, r5
 8005664:	f000 f80c 	bl	8005680 <__swsetup_r>
 8005668:	2800      	cmp	r0, #0
 800566a:	d0cb      	beq.n	8005604 <__swbuf_r+0x28>
 800566c:	f04f 37ff 	mov.w	r7, #4294967295
 8005670:	e7ea      	b.n	8005648 <__swbuf_r+0x6c>
 8005672:	bf00      	nop
 8005674:	08006e2c 	.word	0x08006e2c
 8005678:	08006e4c 	.word	0x08006e4c
 800567c:	08006e0c 	.word	0x08006e0c

08005680 <__swsetup_r>:
 8005680:	4b32      	ldr	r3, [pc, #200]	; (800574c <__swsetup_r+0xcc>)
 8005682:	b570      	push	{r4, r5, r6, lr}
 8005684:	681d      	ldr	r5, [r3, #0]
 8005686:	4606      	mov	r6, r0
 8005688:	460c      	mov	r4, r1
 800568a:	b125      	cbz	r5, 8005696 <__swsetup_r+0x16>
 800568c:	69ab      	ldr	r3, [r5, #24]
 800568e:	b913      	cbnz	r3, 8005696 <__swsetup_r+0x16>
 8005690:	4628      	mov	r0, r5
 8005692:	f000 f985 	bl	80059a0 <__sinit>
 8005696:	4b2e      	ldr	r3, [pc, #184]	; (8005750 <__swsetup_r+0xd0>)
 8005698:	429c      	cmp	r4, r3
 800569a:	d10f      	bne.n	80056bc <__swsetup_r+0x3c>
 800569c:	686c      	ldr	r4, [r5, #4]
 800569e:	89a3      	ldrh	r3, [r4, #12]
 80056a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80056a4:	0719      	lsls	r1, r3, #28
 80056a6:	d42c      	bmi.n	8005702 <__swsetup_r+0x82>
 80056a8:	06dd      	lsls	r5, r3, #27
 80056aa:	d411      	bmi.n	80056d0 <__swsetup_r+0x50>
 80056ac:	2309      	movs	r3, #9
 80056ae:	6033      	str	r3, [r6, #0]
 80056b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80056b4:	81a3      	strh	r3, [r4, #12]
 80056b6:	f04f 30ff 	mov.w	r0, #4294967295
 80056ba:	e03e      	b.n	800573a <__swsetup_r+0xba>
 80056bc:	4b25      	ldr	r3, [pc, #148]	; (8005754 <__swsetup_r+0xd4>)
 80056be:	429c      	cmp	r4, r3
 80056c0:	d101      	bne.n	80056c6 <__swsetup_r+0x46>
 80056c2:	68ac      	ldr	r4, [r5, #8]
 80056c4:	e7eb      	b.n	800569e <__swsetup_r+0x1e>
 80056c6:	4b24      	ldr	r3, [pc, #144]	; (8005758 <__swsetup_r+0xd8>)
 80056c8:	429c      	cmp	r4, r3
 80056ca:	bf08      	it	eq
 80056cc:	68ec      	ldreq	r4, [r5, #12]
 80056ce:	e7e6      	b.n	800569e <__swsetup_r+0x1e>
 80056d0:	0758      	lsls	r0, r3, #29
 80056d2:	d512      	bpl.n	80056fa <__swsetup_r+0x7a>
 80056d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056d6:	b141      	cbz	r1, 80056ea <__swsetup_r+0x6a>
 80056d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056dc:	4299      	cmp	r1, r3
 80056de:	d002      	beq.n	80056e6 <__swsetup_r+0x66>
 80056e0:	4630      	mov	r0, r6
 80056e2:	f000 fa63 	bl	8005bac <_free_r>
 80056e6:	2300      	movs	r3, #0
 80056e8:	6363      	str	r3, [r4, #52]	; 0x34
 80056ea:	89a3      	ldrh	r3, [r4, #12]
 80056ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80056f0:	81a3      	strh	r3, [r4, #12]
 80056f2:	2300      	movs	r3, #0
 80056f4:	6063      	str	r3, [r4, #4]
 80056f6:	6923      	ldr	r3, [r4, #16]
 80056f8:	6023      	str	r3, [r4, #0]
 80056fa:	89a3      	ldrh	r3, [r4, #12]
 80056fc:	f043 0308 	orr.w	r3, r3, #8
 8005700:	81a3      	strh	r3, [r4, #12]
 8005702:	6923      	ldr	r3, [r4, #16]
 8005704:	b94b      	cbnz	r3, 800571a <__swsetup_r+0x9a>
 8005706:	89a3      	ldrh	r3, [r4, #12]
 8005708:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800570c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005710:	d003      	beq.n	800571a <__swsetup_r+0x9a>
 8005712:	4621      	mov	r1, r4
 8005714:	4630      	mov	r0, r6
 8005716:	f000 fa09 	bl	8005b2c <__smakebuf_r>
 800571a:	89a0      	ldrh	r0, [r4, #12]
 800571c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005720:	f010 0301 	ands.w	r3, r0, #1
 8005724:	d00a      	beq.n	800573c <__swsetup_r+0xbc>
 8005726:	2300      	movs	r3, #0
 8005728:	60a3      	str	r3, [r4, #8]
 800572a:	6963      	ldr	r3, [r4, #20]
 800572c:	425b      	negs	r3, r3
 800572e:	61a3      	str	r3, [r4, #24]
 8005730:	6923      	ldr	r3, [r4, #16]
 8005732:	b943      	cbnz	r3, 8005746 <__swsetup_r+0xc6>
 8005734:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005738:	d1ba      	bne.n	80056b0 <__swsetup_r+0x30>
 800573a:	bd70      	pop	{r4, r5, r6, pc}
 800573c:	0781      	lsls	r1, r0, #30
 800573e:	bf58      	it	pl
 8005740:	6963      	ldrpl	r3, [r4, #20]
 8005742:	60a3      	str	r3, [r4, #8]
 8005744:	e7f4      	b.n	8005730 <__swsetup_r+0xb0>
 8005746:	2000      	movs	r0, #0
 8005748:	e7f7      	b.n	800573a <__swsetup_r+0xba>
 800574a:	bf00      	nop
 800574c:	20000034 	.word	0x20000034
 8005750:	08006e2c 	.word	0x08006e2c
 8005754:	08006e4c 	.word	0x08006e4c
 8005758:	08006e0c 	.word	0x08006e0c

0800575c <abort>:
 800575c:	b508      	push	{r3, lr}
 800575e:	2006      	movs	r0, #6
 8005760:	f000 fb3c 	bl	8005ddc <raise>
 8005764:	2001      	movs	r0, #1
 8005766:	f7fc fd8b 	bl	8002280 <_exit>
	...

0800576c <__sflush_r>:
 800576c:	898a      	ldrh	r2, [r1, #12]
 800576e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005772:	4605      	mov	r5, r0
 8005774:	0710      	lsls	r0, r2, #28
 8005776:	460c      	mov	r4, r1
 8005778:	d458      	bmi.n	800582c <__sflush_r+0xc0>
 800577a:	684b      	ldr	r3, [r1, #4]
 800577c:	2b00      	cmp	r3, #0
 800577e:	dc05      	bgt.n	800578c <__sflush_r+0x20>
 8005780:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005782:	2b00      	cmp	r3, #0
 8005784:	dc02      	bgt.n	800578c <__sflush_r+0x20>
 8005786:	2000      	movs	r0, #0
 8005788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800578c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800578e:	2e00      	cmp	r6, #0
 8005790:	d0f9      	beq.n	8005786 <__sflush_r+0x1a>
 8005792:	2300      	movs	r3, #0
 8005794:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005798:	682f      	ldr	r7, [r5, #0]
 800579a:	602b      	str	r3, [r5, #0]
 800579c:	d032      	beq.n	8005804 <__sflush_r+0x98>
 800579e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80057a0:	89a3      	ldrh	r3, [r4, #12]
 80057a2:	075a      	lsls	r2, r3, #29
 80057a4:	d505      	bpl.n	80057b2 <__sflush_r+0x46>
 80057a6:	6863      	ldr	r3, [r4, #4]
 80057a8:	1ac0      	subs	r0, r0, r3
 80057aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80057ac:	b10b      	cbz	r3, 80057b2 <__sflush_r+0x46>
 80057ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80057b0:	1ac0      	subs	r0, r0, r3
 80057b2:	2300      	movs	r3, #0
 80057b4:	4602      	mov	r2, r0
 80057b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80057b8:	6a21      	ldr	r1, [r4, #32]
 80057ba:	4628      	mov	r0, r5
 80057bc:	47b0      	blx	r6
 80057be:	1c43      	adds	r3, r0, #1
 80057c0:	89a3      	ldrh	r3, [r4, #12]
 80057c2:	d106      	bne.n	80057d2 <__sflush_r+0x66>
 80057c4:	6829      	ldr	r1, [r5, #0]
 80057c6:	291d      	cmp	r1, #29
 80057c8:	d82c      	bhi.n	8005824 <__sflush_r+0xb8>
 80057ca:	4a2a      	ldr	r2, [pc, #168]	; (8005874 <__sflush_r+0x108>)
 80057cc:	40ca      	lsrs	r2, r1
 80057ce:	07d6      	lsls	r6, r2, #31
 80057d0:	d528      	bpl.n	8005824 <__sflush_r+0xb8>
 80057d2:	2200      	movs	r2, #0
 80057d4:	6062      	str	r2, [r4, #4]
 80057d6:	04d9      	lsls	r1, r3, #19
 80057d8:	6922      	ldr	r2, [r4, #16]
 80057da:	6022      	str	r2, [r4, #0]
 80057dc:	d504      	bpl.n	80057e8 <__sflush_r+0x7c>
 80057de:	1c42      	adds	r2, r0, #1
 80057e0:	d101      	bne.n	80057e6 <__sflush_r+0x7a>
 80057e2:	682b      	ldr	r3, [r5, #0]
 80057e4:	b903      	cbnz	r3, 80057e8 <__sflush_r+0x7c>
 80057e6:	6560      	str	r0, [r4, #84]	; 0x54
 80057e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057ea:	602f      	str	r7, [r5, #0]
 80057ec:	2900      	cmp	r1, #0
 80057ee:	d0ca      	beq.n	8005786 <__sflush_r+0x1a>
 80057f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80057f4:	4299      	cmp	r1, r3
 80057f6:	d002      	beq.n	80057fe <__sflush_r+0x92>
 80057f8:	4628      	mov	r0, r5
 80057fa:	f000 f9d7 	bl	8005bac <_free_r>
 80057fe:	2000      	movs	r0, #0
 8005800:	6360      	str	r0, [r4, #52]	; 0x34
 8005802:	e7c1      	b.n	8005788 <__sflush_r+0x1c>
 8005804:	6a21      	ldr	r1, [r4, #32]
 8005806:	2301      	movs	r3, #1
 8005808:	4628      	mov	r0, r5
 800580a:	47b0      	blx	r6
 800580c:	1c41      	adds	r1, r0, #1
 800580e:	d1c7      	bne.n	80057a0 <__sflush_r+0x34>
 8005810:	682b      	ldr	r3, [r5, #0]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d0c4      	beq.n	80057a0 <__sflush_r+0x34>
 8005816:	2b1d      	cmp	r3, #29
 8005818:	d001      	beq.n	800581e <__sflush_r+0xb2>
 800581a:	2b16      	cmp	r3, #22
 800581c:	d101      	bne.n	8005822 <__sflush_r+0xb6>
 800581e:	602f      	str	r7, [r5, #0]
 8005820:	e7b1      	b.n	8005786 <__sflush_r+0x1a>
 8005822:	89a3      	ldrh	r3, [r4, #12]
 8005824:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005828:	81a3      	strh	r3, [r4, #12]
 800582a:	e7ad      	b.n	8005788 <__sflush_r+0x1c>
 800582c:	690f      	ldr	r7, [r1, #16]
 800582e:	2f00      	cmp	r7, #0
 8005830:	d0a9      	beq.n	8005786 <__sflush_r+0x1a>
 8005832:	0793      	lsls	r3, r2, #30
 8005834:	680e      	ldr	r6, [r1, #0]
 8005836:	bf08      	it	eq
 8005838:	694b      	ldreq	r3, [r1, #20]
 800583a:	600f      	str	r7, [r1, #0]
 800583c:	bf18      	it	ne
 800583e:	2300      	movne	r3, #0
 8005840:	eba6 0807 	sub.w	r8, r6, r7
 8005844:	608b      	str	r3, [r1, #8]
 8005846:	f1b8 0f00 	cmp.w	r8, #0
 800584a:	dd9c      	ble.n	8005786 <__sflush_r+0x1a>
 800584c:	6a21      	ldr	r1, [r4, #32]
 800584e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005850:	4643      	mov	r3, r8
 8005852:	463a      	mov	r2, r7
 8005854:	4628      	mov	r0, r5
 8005856:	47b0      	blx	r6
 8005858:	2800      	cmp	r0, #0
 800585a:	dc06      	bgt.n	800586a <__sflush_r+0xfe>
 800585c:	89a3      	ldrh	r3, [r4, #12]
 800585e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005862:	81a3      	strh	r3, [r4, #12]
 8005864:	f04f 30ff 	mov.w	r0, #4294967295
 8005868:	e78e      	b.n	8005788 <__sflush_r+0x1c>
 800586a:	4407      	add	r7, r0
 800586c:	eba8 0800 	sub.w	r8, r8, r0
 8005870:	e7e9      	b.n	8005846 <__sflush_r+0xda>
 8005872:	bf00      	nop
 8005874:	20400001 	.word	0x20400001

08005878 <_fflush_r>:
 8005878:	b538      	push	{r3, r4, r5, lr}
 800587a:	690b      	ldr	r3, [r1, #16]
 800587c:	4605      	mov	r5, r0
 800587e:	460c      	mov	r4, r1
 8005880:	b913      	cbnz	r3, 8005888 <_fflush_r+0x10>
 8005882:	2500      	movs	r5, #0
 8005884:	4628      	mov	r0, r5
 8005886:	bd38      	pop	{r3, r4, r5, pc}
 8005888:	b118      	cbz	r0, 8005892 <_fflush_r+0x1a>
 800588a:	6983      	ldr	r3, [r0, #24]
 800588c:	b90b      	cbnz	r3, 8005892 <_fflush_r+0x1a>
 800588e:	f000 f887 	bl	80059a0 <__sinit>
 8005892:	4b14      	ldr	r3, [pc, #80]	; (80058e4 <_fflush_r+0x6c>)
 8005894:	429c      	cmp	r4, r3
 8005896:	d11b      	bne.n	80058d0 <_fflush_r+0x58>
 8005898:	686c      	ldr	r4, [r5, #4]
 800589a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d0ef      	beq.n	8005882 <_fflush_r+0xa>
 80058a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80058a4:	07d0      	lsls	r0, r2, #31
 80058a6:	d404      	bmi.n	80058b2 <_fflush_r+0x3a>
 80058a8:	0599      	lsls	r1, r3, #22
 80058aa:	d402      	bmi.n	80058b2 <_fflush_r+0x3a>
 80058ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058ae:	f000 f915 	bl	8005adc <__retarget_lock_acquire_recursive>
 80058b2:	4628      	mov	r0, r5
 80058b4:	4621      	mov	r1, r4
 80058b6:	f7ff ff59 	bl	800576c <__sflush_r>
 80058ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80058bc:	07da      	lsls	r2, r3, #31
 80058be:	4605      	mov	r5, r0
 80058c0:	d4e0      	bmi.n	8005884 <_fflush_r+0xc>
 80058c2:	89a3      	ldrh	r3, [r4, #12]
 80058c4:	059b      	lsls	r3, r3, #22
 80058c6:	d4dd      	bmi.n	8005884 <_fflush_r+0xc>
 80058c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058ca:	f000 f908 	bl	8005ade <__retarget_lock_release_recursive>
 80058ce:	e7d9      	b.n	8005884 <_fflush_r+0xc>
 80058d0:	4b05      	ldr	r3, [pc, #20]	; (80058e8 <_fflush_r+0x70>)
 80058d2:	429c      	cmp	r4, r3
 80058d4:	d101      	bne.n	80058da <_fflush_r+0x62>
 80058d6:	68ac      	ldr	r4, [r5, #8]
 80058d8:	e7df      	b.n	800589a <_fflush_r+0x22>
 80058da:	4b04      	ldr	r3, [pc, #16]	; (80058ec <_fflush_r+0x74>)
 80058dc:	429c      	cmp	r4, r3
 80058de:	bf08      	it	eq
 80058e0:	68ec      	ldreq	r4, [r5, #12]
 80058e2:	e7da      	b.n	800589a <_fflush_r+0x22>
 80058e4:	08006e2c 	.word	0x08006e2c
 80058e8:	08006e4c 	.word	0x08006e4c
 80058ec:	08006e0c 	.word	0x08006e0c

080058f0 <std>:
 80058f0:	2300      	movs	r3, #0
 80058f2:	b510      	push	{r4, lr}
 80058f4:	4604      	mov	r4, r0
 80058f6:	e9c0 3300 	strd	r3, r3, [r0]
 80058fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80058fe:	6083      	str	r3, [r0, #8]
 8005900:	8181      	strh	r1, [r0, #12]
 8005902:	6643      	str	r3, [r0, #100]	; 0x64
 8005904:	81c2      	strh	r2, [r0, #14]
 8005906:	6183      	str	r3, [r0, #24]
 8005908:	4619      	mov	r1, r3
 800590a:	2208      	movs	r2, #8
 800590c:	305c      	adds	r0, #92	; 0x5c
 800590e:	f7ff fb57 	bl	8004fc0 <memset>
 8005912:	4b05      	ldr	r3, [pc, #20]	; (8005928 <std+0x38>)
 8005914:	6263      	str	r3, [r4, #36]	; 0x24
 8005916:	4b05      	ldr	r3, [pc, #20]	; (800592c <std+0x3c>)
 8005918:	62a3      	str	r3, [r4, #40]	; 0x28
 800591a:	4b05      	ldr	r3, [pc, #20]	; (8005930 <std+0x40>)
 800591c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800591e:	4b05      	ldr	r3, [pc, #20]	; (8005934 <std+0x44>)
 8005920:	6224      	str	r4, [r4, #32]
 8005922:	6323      	str	r3, [r4, #48]	; 0x30
 8005924:	bd10      	pop	{r4, pc}
 8005926:	bf00      	nop
 8005928:	08005e15 	.word	0x08005e15
 800592c:	08005e37 	.word	0x08005e37
 8005930:	08005e6f 	.word	0x08005e6f
 8005934:	08005e93 	.word	0x08005e93

08005938 <_cleanup_r>:
 8005938:	4901      	ldr	r1, [pc, #4]	; (8005940 <_cleanup_r+0x8>)
 800593a:	f000 b8af 	b.w	8005a9c <_fwalk_reent>
 800593e:	bf00      	nop
 8005940:	08005879 	.word	0x08005879

08005944 <__sfmoreglue>:
 8005944:	b570      	push	{r4, r5, r6, lr}
 8005946:	2268      	movs	r2, #104	; 0x68
 8005948:	1e4d      	subs	r5, r1, #1
 800594a:	4355      	muls	r5, r2
 800594c:	460e      	mov	r6, r1
 800594e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005952:	f000 f997 	bl	8005c84 <_malloc_r>
 8005956:	4604      	mov	r4, r0
 8005958:	b140      	cbz	r0, 800596c <__sfmoreglue+0x28>
 800595a:	2100      	movs	r1, #0
 800595c:	e9c0 1600 	strd	r1, r6, [r0]
 8005960:	300c      	adds	r0, #12
 8005962:	60a0      	str	r0, [r4, #8]
 8005964:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005968:	f7ff fb2a 	bl	8004fc0 <memset>
 800596c:	4620      	mov	r0, r4
 800596e:	bd70      	pop	{r4, r5, r6, pc}

08005970 <__sfp_lock_acquire>:
 8005970:	4801      	ldr	r0, [pc, #4]	; (8005978 <__sfp_lock_acquire+0x8>)
 8005972:	f000 b8b3 	b.w	8005adc <__retarget_lock_acquire_recursive>
 8005976:	bf00      	nop
 8005978:	20000675 	.word	0x20000675

0800597c <__sfp_lock_release>:
 800597c:	4801      	ldr	r0, [pc, #4]	; (8005984 <__sfp_lock_release+0x8>)
 800597e:	f000 b8ae 	b.w	8005ade <__retarget_lock_release_recursive>
 8005982:	bf00      	nop
 8005984:	20000675 	.word	0x20000675

08005988 <__sinit_lock_acquire>:
 8005988:	4801      	ldr	r0, [pc, #4]	; (8005990 <__sinit_lock_acquire+0x8>)
 800598a:	f000 b8a7 	b.w	8005adc <__retarget_lock_acquire_recursive>
 800598e:	bf00      	nop
 8005990:	20000676 	.word	0x20000676

08005994 <__sinit_lock_release>:
 8005994:	4801      	ldr	r0, [pc, #4]	; (800599c <__sinit_lock_release+0x8>)
 8005996:	f000 b8a2 	b.w	8005ade <__retarget_lock_release_recursive>
 800599a:	bf00      	nop
 800599c:	20000676 	.word	0x20000676

080059a0 <__sinit>:
 80059a0:	b510      	push	{r4, lr}
 80059a2:	4604      	mov	r4, r0
 80059a4:	f7ff fff0 	bl	8005988 <__sinit_lock_acquire>
 80059a8:	69a3      	ldr	r3, [r4, #24]
 80059aa:	b11b      	cbz	r3, 80059b4 <__sinit+0x14>
 80059ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059b0:	f7ff bff0 	b.w	8005994 <__sinit_lock_release>
 80059b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80059b8:	6523      	str	r3, [r4, #80]	; 0x50
 80059ba:	4b13      	ldr	r3, [pc, #76]	; (8005a08 <__sinit+0x68>)
 80059bc:	4a13      	ldr	r2, [pc, #76]	; (8005a0c <__sinit+0x6c>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	62a2      	str	r2, [r4, #40]	; 0x28
 80059c2:	42a3      	cmp	r3, r4
 80059c4:	bf04      	itt	eq
 80059c6:	2301      	moveq	r3, #1
 80059c8:	61a3      	streq	r3, [r4, #24]
 80059ca:	4620      	mov	r0, r4
 80059cc:	f000 f820 	bl	8005a10 <__sfp>
 80059d0:	6060      	str	r0, [r4, #4]
 80059d2:	4620      	mov	r0, r4
 80059d4:	f000 f81c 	bl	8005a10 <__sfp>
 80059d8:	60a0      	str	r0, [r4, #8]
 80059da:	4620      	mov	r0, r4
 80059dc:	f000 f818 	bl	8005a10 <__sfp>
 80059e0:	2200      	movs	r2, #0
 80059e2:	60e0      	str	r0, [r4, #12]
 80059e4:	2104      	movs	r1, #4
 80059e6:	6860      	ldr	r0, [r4, #4]
 80059e8:	f7ff ff82 	bl	80058f0 <std>
 80059ec:	68a0      	ldr	r0, [r4, #8]
 80059ee:	2201      	movs	r2, #1
 80059f0:	2109      	movs	r1, #9
 80059f2:	f7ff ff7d 	bl	80058f0 <std>
 80059f6:	68e0      	ldr	r0, [r4, #12]
 80059f8:	2202      	movs	r2, #2
 80059fa:	2112      	movs	r1, #18
 80059fc:	f7ff ff78 	bl	80058f0 <std>
 8005a00:	2301      	movs	r3, #1
 8005a02:	61a3      	str	r3, [r4, #24]
 8005a04:	e7d2      	b.n	80059ac <__sinit+0xc>
 8005a06:	bf00      	nop
 8005a08:	08006dd4 	.word	0x08006dd4
 8005a0c:	08005939 	.word	0x08005939

08005a10 <__sfp>:
 8005a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a12:	4607      	mov	r7, r0
 8005a14:	f7ff ffac 	bl	8005970 <__sfp_lock_acquire>
 8005a18:	4b1e      	ldr	r3, [pc, #120]	; (8005a94 <__sfp+0x84>)
 8005a1a:	681e      	ldr	r6, [r3, #0]
 8005a1c:	69b3      	ldr	r3, [r6, #24]
 8005a1e:	b913      	cbnz	r3, 8005a26 <__sfp+0x16>
 8005a20:	4630      	mov	r0, r6
 8005a22:	f7ff ffbd 	bl	80059a0 <__sinit>
 8005a26:	3648      	adds	r6, #72	; 0x48
 8005a28:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005a2c:	3b01      	subs	r3, #1
 8005a2e:	d503      	bpl.n	8005a38 <__sfp+0x28>
 8005a30:	6833      	ldr	r3, [r6, #0]
 8005a32:	b30b      	cbz	r3, 8005a78 <__sfp+0x68>
 8005a34:	6836      	ldr	r6, [r6, #0]
 8005a36:	e7f7      	b.n	8005a28 <__sfp+0x18>
 8005a38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005a3c:	b9d5      	cbnz	r5, 8005a74 <__sfp+0x64>
 8005a3e:	4b16      	ldr	r3, [pc, #88]	; (8005a98 <__sfp+0x88>)
 8005a40:	60e3      	str	r3, [r4, #12]
 8005a42:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005a46:	6665      	str	r5, [r4, #100]	; 0x64
 8005a48:	f000 f847 	bl	8005ada <__retarget_lock_init_recursive>
 8005a4c:	f7ff ff96 	bl	800597c <__sfp_lock_release>
 8005a50:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005a54:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005a58:	6025      	str	r5, [r4, #0]
 8005a5a:	61a5      	str	r5, [r4, #24]
 8005a5c:	2208      	movs	r2, #8
 8005a5e:	4629      	mov	r1, r5
 8005a60:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005a64:	f7ff faac 	bl	8004fc0 <memset>
 8005a68:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005a6c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005a70:	4620      	mov	r0, r4
 8005a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a74:	3468      	adds	r4, #104	; 0x68
 8005a76:	e7d9      	b.n	8005a2c <__sfp+0x1c>
 8005a78:	2104      	movs	r1, #4
 8005a7a:	4638      	mov	r0, r7
 8005a7c:	f7ff ff62 	bl	8005944 <__sfmoreglue>
 8005a80:	4604      	mov	r4, r0
 8005a82:	6030      	str	r0, [r6, #0]
 8005a84:	2800      	cmp	r0, #0
 8005a86:	d1d5      	bne.n	8005a34 <__sfp+0x24>
 8005a88:	f7ff ff78 	bl	800597c <__sfp_lock_release>
 8005a8c:	230c      	movs	r3, #12
 8005a8e:	603b      	str	r3, [r7, #0]
 8005a90:	e7ee      	b.n	8005a70 <__sfp+0x60>
 8005a92:	bf00      	nop
 8005a94:	08006dd4 	.word	0x08006dd4
 8005a98:	ffff0001 	.word	0xffff0001

08005a9c <_fwalk_reent>:
 8005a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005aa0:	4606      	mov	r6, r0
 8005aa2:	4688      	mov	r8, r1
 8005aa4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005aa8:	2700      	movs	r7, #0
 8005aaa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005aae:	f1b9 0901 	subs.w	r9, r9, #1
 8005ab2:	d505      	bpl.n	8005ac0 <_fwalk_reent+0x24>
 8005ab4:	6824      	ldr	r4, [r4, #0]
 8005ab6:	2c00      	cmp	r4, #0
 8005ab8:	d1f7      	bne.n	8005aaa <_fwalk_reent+0xe>
 8005aba:	4638      	mov	r0, r7
 8005abc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ac0:	89ab      	ldrh	r3, [r5, #12]
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d907      	bls.n	8005ad6 <_fwalk_reent+0x3a>
 8005ac6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005aca:	3301      	adds	r3, #1
 8005acc:	d003      	beq.n	8005ad6 <_fwalk_reent+0x3a>
 8005ace:	4629      	mov	r1, r5
 8005ad0:	4630      	mov	r0, r6
 8005ad2:	47c0      	blx	r8
 8005ad4:	4307      	orrs	r7, r0
 8005ad6:	3568      	adds	r5, #104	; 0x68
 8005ad8:	e7e9      	b.n	8005aae <_fwalk_reent+0x12>

08005ada <__retarget_lock_init_recursive>:
 8005ada:	4770      	bx	lr

08005adc <__retarget_lock_acquire_recursive>:
 8005adc:	4770      	bx	lr

08005ade <__retarget_lock_release_recursive>:
 8005ade:	4770      	bx	lr

08005ae0 <__swhatbuf_r>:
 8005ae0:	b570      	push	{r4, r5, r6, lr}
 8005ae2:	460e      	mov	r6, r1
 8005ae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ae8:	2900      	cmp	r1, #0
 8005aea:	b096      	sub	sp, #88	; 0x58
 8005aec:	4614      	mov	r4, r2
 8005aee:	461d      	mov	r5, r3
 8005af0:	da08      	bge.n	8005b04 <__swhatbuf_r+0x24>
 8005af2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005af6:	2200      	movs	r2, #0
 8005af8:	602a      	str	r2, [r5, #0]
 8005afa:	061a      	lsls	r2, r3, #24
 8005afc:	d410      	bmi.n	8005b20 <__swhatbuf_r+0x40>
 8005afe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b02:	e00e      	b.n	8005b22 <__swhatbuf_r+0x42>
 8005b04:	466a      	mov	r2, sp
 8005b06:	f000 f9eb 	bl	8005ee0 <_fstat_r>
 8005b0a:	2800      	cmp	r0, #0
 8005b0c:	dbf1      	blt.n	8005af2 <__swhatbuf_r+0x12>
 8005b0e:	9a01      	ldr	r2, [sp, #4]
 8005b10:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005b14:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005b18:	425a      	negs	r2, r3
 8005b1a:	415a      	adcs	r2, r3
 8005b1c:	602a      	str	r2, [r5, #0]
 8005b1e:	e7ee      	b.n	8005afe <__swhatbuf_r+0x1e>
 8005b20:	2340      	movs	r3, #64	; 0x40
 8005b22:	2000      	movs	r0, #0
 8005b24:	6023      	str	r3, [r4, #0]
 8005b26:	b016      	add	sp, #88	; 0x58
 8005b28:	bd70      	pop	{r4, r5, r6, pc}
	...

08005b2c <__smakebuf_r>:
 8005b2c:	898b      	ldrh	r3, [r1, #12]
 8005b2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005b30:	079d      	lsls	r5, r3, #30
 8005b32:	4606      	mov	r6, r0
 8005b34:	460c      	mov	r4, r1
 8005b36:	d507      	bpl.n	8005b48 <__smakebuf_r+0x1c>
 8005b38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005b3c:	6023      	str	r3, [r4, #0]
 8005b3e:	6123      	str	r3, [r4, #16]
 8005b40:	2301      	movs	r3, #1
 8005b42:	6163      	str	r3, [r4, #20]
 8005b44:	b002      	add	sp, #8
 8005b46:	bd70      	pop	{r4, r5, r6, pc}
 8005b48:	ab01      	add	r3, sp, #4
 8005b4a:	466a      	mov	r2, sp
 8005b4c:	f7ff ffc8 	bl	8005ae0 <__swhatbuf_r>
 8005b50:	9900      	ldr	r1, [sp, #0]
 8005b52:	4605      	mov	r5, r0
 8005b54:	4630      	mov	r0, r6
 8005b56:	f000 f895 	bl	8005c84 <_malloc_r>
 8005b5a:	b948      	cbnz	r0, 8005b70 <__smakebuf_r+0x44>
 8005b5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b60:	059a      	lsls	r2, r3, #22
 8005b62:	d4ef      	bmi.n	8005b44 <__smakebuf_r+0x18>
 8005b64:	f023 0303 	bic.w	r3, r3, #3
 8005b68:	f043 0302 	orr.w	r3, r3, #2
 8005b6c:	81a3      	strh	r3, [r4, #12]
 8005b6e:	e7e3      	b.n	8005b38 <__smakebuf_r+0xc>
 8005b70:	4b0d      	ldr	r3, [pc, #52]	; (8005ba8 <__smakebuf_r+0x7c>)
 8005b72:	62b3      	str	r3, [r6, #40]	; 0x28
 8005b74:	89a3      	ldrh	r3, [r4, #12]
 8005b76:	6020      	str	r0, [r4, #0]
 8005b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b7c:	81a3      	strh	r3, [r4, #12]
 8005b7e:	9b00      	ldr	r3, [sp, #0]
 8005b80:	6163      	str	r3, [r4, #20]
 8005b82:	9b01      	ldr	r3, [sp, #4]
 8005b84:	6120      	str	r0, [r4, #16]
 8005b86:	b15b      	cbz	r3, 8005ba0 <__smakebuf_r+0x74>
 8005b88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b8c:	4630      	mov	r0, r6
 8005b8e:	f000 f9b9 	bl	8005f04 <_isatty_r>
 8005b92:	b128      	cbz	r0, 8005ba0 <__smakebuf_r+0x74>
 8005b94:	89a3      	ldrh	r3, [r4, #12]
 8005b96:	f023 0303 	bic.w	r3, r3, #3
 8005b9a:	f043 0301 	orr.w	r3, r3, #1
 8005b9e:	81a3      	strh	r3, [r4, #12]
 8005ba0:	89a0      	ldrh	r0, [r4, #12]
 8005ba2:	4305      	orrs	r5, r0
 8005ba4:	81a5      	strh	r5, [r4, #12]
 8005ba6:	e7cd      	b.n	8005b44 <__smakebuf_r+0x18>
 8005ba8:	08005939 	.word	0x08005939

08005bac <_free_r>:
 8005bac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005bae:	2900      	cmp	r1, #0
 8005bb0:	d044      	beq.n	8005c3c <_free_r+0x90>
 8005bb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bb6:	9001      	str	r0, [sp, #4]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	f1a1 0404 	sub.w	r4, r1, #4
 8005bbe:	bfb8      	it	lt
 8005bc0:	18e4      	addlt	r4, r4, r3
 8005bc2:	f000 f9c1 	bl	8005f48 <__malloc_lock>
 8005bc6:	4a1e      	ldr	r2, [pc, #120]	; (8005c40 <_free_r+0x94>)
 8005bc8:	9801      	ldr	r0, [sp, #4]
 8005bca:	6813      	ldr	r3, [r2, #0]
 8005bcc:	b933      	cbnz	r3, 8005bdc <_free_r+0x30>
 8005bce:	6063      	str	r3, [r4, #4]
 8005bd0:	6014      	str	r4, [r2, #0]
 8005bd2:	b003      	add	sp, #12
 8005bd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005bd8:	f000 b9bc 	b.w	8005f54 <__malloc_unlock>
 8005bdc:	42a3      	cmp	r3, r4
 8005bde:	d908      	bls.n	8005bf2 <_free_r+0x46>
 8005be0:	6825      	ldr	r5, [r4, #0]
 8005be2:	1961      	adds	r1, r4, r5
 8005be4:	428b      	cmp	r3, r1
 8005be6:	bf01      	itttt	eq
 8005be8:	6819      	ldreq	r1, [r3, #0]
 8005bea:	685b      	ldreq	r3, [r3, #4]
 8005bec:	1949      	addeq	r1, r1, r5
 8005bee:	6021      	streq	r1, [r4, #0]
 8005bf0:	e7ed      	b.n	8005bce <_free_r+0x22>
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	b10b      	cbz	r3, 8005bfc <_free_r+0x50>
 8005bf8:	42a3      	cmp	r3, r4
 8005bfa:	d9fa      	bls.n	8005bf2 <_free_r+0x46>
 8005bfc:	6811      	ldr	r1, [r2, #0]
 8005bfe:	1855      	adds	r5, r2, r1
 8005c00:	42a5      	cmp	r5, r4
 8005c02:	d10b      	bne.n	8005c1c <_free_r+0x70>
 8005c04:	6824      	ldr	r4, [r4, #0]
 8005c06:	4421      	add	r1, r4
 8005c08:	1854      	adds	r4, r2, r1
 8005c0a:	42a3      	cmp	r3, r4
 8005c0c:	6011      	str	r1, [r2, #0]
 8005c0e:	d1e0      	bne.n	8005bd2 <_free_r+0x26>
 8005c10:	681c      	ldr	r4, [r3, #0]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	6053      	str	r3, [r2, #4]
 8005c16:	4421      	add	r1, r4
 8005c18:	6011      	str	r1, [r2, #0]
 8005c1a:	e7da      	b.n	8005bd2 <_free_r+0x26>
 8005c1c:	d902      	bls.n	8005c24 <_free_r+0x78>
 8005c1e:	230c      	movs	r3, #12
 8005c20:	6003      	str	r3, [r0, #0]
 8005c22:	e7d6      	b.n	8005bd2 <_free_r+0x26>
 8005c24:	6825      	ldr	r5, [r4, #0]
 8005c26:	1961      	adds	r1, r4, r5
 8005c28:	428b      	cmp	r3, r1
 8005c2a:	bf04      	itt	eq
 8005c2c:	6819      	ldreq	r1, [r3, #0]
 8005c2e:	685b      	ldreq	r3, [r3, #4]
 8005c30:	6063      	str	r3, [r4, #4]
 8005c32:	bf04      	itt	eq
 8005c34:	1949      	addeq	r1, r1, r5
 8005c36:	6021      	streq	r1, [r4, #0]
 8005c38:	6054      	str	r4, [r2, #4]
 8005c3a:	e7ca      	b.n	8005bd2 <_free_r+0x26>
 8005c3c:	b003      	add	sp, #12
 8005c3e:	bd30      	pop	{r4, r5, pc}
 8005c40:	20000678 	.word	0x20000678

08005c44 <sbrk_aligned>:
 8005c44:	b570      	push	{r4, r5, r6, lr}
 8005c46:	4e0e      	ldr	r6, [pc, #56]	; (8005c80 <sbrk_aligned+0x3c>)
 8005c48:	460c      	mov	r4, r1
 8005c4a:	6831      	ldr	r1, [r6, #0]
 8005c4c:	4605      	mov	r5, r0
 8005c4e:	b911      	cbnz	r1, 8005c56 <sbrk_aligned+0x12>
 8005c50:	f000 f88c 	bl	8005d6c <_sbrk_r>
 8005c54:	6030      	str	r0, [r6, #0]
 8005c56:	4621      	mov	r1, r4
 8005c58:	4628      	mov	r0, r5
 8005c5a:	f000 f887 	bl	8005d6c <_sbrk_r>
 8005c5e:	1c43      	adds	r3, r0, #1
 8005c60:	d00a      	beq.n	8005c78 <sbrk_aligned+0x34>
 8005c62:	1cc4      	adds	r4, r0, #3
 8005c64:	f024 0403 	bic.w	r4, r4, #3
 8005c68:	42a0      	cmp	r0, r4
 8005c6a:	d007      	beq.n	8005c7c <sbrk_aligned+0x38>
 8005c6c:	1a21      	subs	r1, r4, r0
 8005c6e:	4628      	mov	r0, r5
 8005c70:	f000 f87c 	bl	8005d6c <_sbrk_r>
 8005c74:	3001      	adds	r0, #1
 8005c76:	d101      	bne.n	8005c7c <sbrk_aligned+0x38>
 8005c78:	f04f 34ff 	mov.w	r4, #4294967295
 8005c7c:	4620      	mov	r0, r4
 8005c7e:	bd70      	pop	{r4, r5, r6, pc}
 8005c80:	2000067c 	.word	0x2000067c

08005c84 <_malloc_r>:
 8005c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c88:	1ccd      	adds	r5, r1, #3
 8005c8a:	f025 0503 	bic.w	r5, r5, #3
 8005c8e:	3508      	adds	r5, #8
 8005c90:	2d0c      	cmp	r5, #12
 8005c92:	bf38      	it	cc
 8005c94:	250c      	movcc	r5, #12
 8005c96:	2d00      	cmp	r5, #0
 8005c98:	4607      	mov	r7, r0
 8005c9a:	db01      	blt.n	8005ca0 <_malloc_r+0x1c>
 8005c9c:	42a9      	cmp	r1, r5
 8005c9e:	d905      	bls.n	8005cac <_malloc_r+0x28>
 8005ca0:	230c      	movs	r3, #12
 8005ca2:	603b      	str	r3, [r7, #0]
 8005ca4:	2600      	movs	r6, #0
 8005ca6:	4630      	mov	r0, r6
 8005ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cac:	4e2e      	ldr	r6, [pc, #184]	; (8005d68 <_malloc_r+0xe4>)
 8005cae:	f000 f94b 	bl	8005f48 <__malloc_lock>
 8005cb2:	6833      	ldr	r3, [r6, #0]
 8005cb4:	461c      	mov	r4, r3
 8005cb6:	bb34      	cbnz	r4, 8005d06 <_malloc_r+0x82>
 8005cb8:	4629      	mov	r1, r5
 8005cba:	4638      	mov	r0, r7
 8005cbc:	f7ff ffc2 	bl	8005c44 <sbrk_aligned>
 8005cc0:	1c43      	adds	r3, r0, #1
 8005cc2:	4604      	mov	r4, r0
 8005cc4:	d14d      	bne.n	8005d62 <_malloc_r+0xde>
 8005cc6:	6834      	ldr	r4, [r6, #0]
 8005cc8:	4626      	mov	r6, r4
 8005cca:	2e00      	cmp	r6, #0
 8005ccc:	d140      	bne.n	8005d50 <_malloc_r+0xcc>
 8005cce:	6823      	ldr	r3, [r4, #0]
 8005cd0:	4631      	mov	r1, r6
 8005cd2:	4638      	mov	r0, r7
 8005cd4:	eb04 0803 	add.w	r8, r4, r3
 8005cd8:	f000 f848 	bl	8005d6c <_sbrk_r>
 8005cdc:	4580      	cmp	r8, r0
 8005cde:	d13a      	bne.n	8005d56 <_malloc_r+0xd2>
 8005ce0:	6821      	ldr	r1, [r4, #0]
 8005ce2:	3503      	adds	r5, #3
 8005ce4:	1a6d      	subs	r5, r5, r1
 8005ce6:	f025 0503 	bic.w	r5, r5, #3
 8005cea:	3508      	adds	r5, #8
 8005cec:	2d0c      	cmp	r5, #12
 8005cee:	bf38      	it	cc
 8005cf0:	250c      	movcc	r5, #12
 8005cf2:	4629      	mov	r1, r5
 8005cf4:	4638      	mov	r0, r7
 8005cf6:	f7ff ffa5 	bl	8005c44 <sbrk_aligned>
 8005cfa:	3001      	adds	r0, #1
 8005cfc:	d02b      	beq.n	8005d56 <_malloc_r+0xd2>
 8005cfe:	6823      	ldr	r3, [r4, #0]
 8005d00:	442b      	add	r3, r5
 8005d02:	6023      	str	r3, [r4, #0]
 8005d04:	e00e      	b.n	8005d24 <_malloc_r+0xa0>
 8005d06:	6822      	ldr	r2, [r4, #0]
 8005d08:	1b52      	subs	r2, r2, r5
 8005d0a:	d41e      	bmi.n	8005d4a <_malloc_r+0xc6>
 8005d0c:	2a0b      	cmp	r2, #11
 8005d0e:	d916      	bls.n	8005d3e <_malloc_r+0xba>
 8005d10:	1961      	adds	r1, r4, r5
 8005d12:	42a3      	cmp	r3, r4
 8005d14:	6025      	str	r5, [r4, #0]
 8005d16:	bf18      	it	ne
 8005d18:	6059      	strne	r1, [r3, #4]
 8005d1a:	6863      	ldr	r3, [r4, #4]
 8005d1c:	bf08      	it	eq
 8005d1e:	6031      	streq	r1, [r6, #0]
 8005d20:	5162      	str	r2, [r4, r5]
 8005d22:	604b      	str	r3, [r1, #4]
 8005d24:	4638      	mov	r0, r7
 8005d26:	f104 060b 	add.w	r6, r4, #11
 8005d2a:	f000 f913 	bl	8005f54 <__malloc_unlock>
 8005d2e:	f026 0607 	bic.w	r6, r6, #7
 8005d32:	1d23      	adds	r3, r4, #4
 8005d34:	1af2      	subs	r2, r6, r3
 8005d36:	d0b6      	beq.n	8005ca6 <_malloc_r+0x22>
 8005d38:	1b9b      	subs	r3, r3, r6
 8005d3a:	50a3      	str	r3, [r4, r2]
 8005d3c:	e7b3      	b.n	8005ca6 <_malloc_r+0x22>
 8005d3e:	6862      	ldr	r2, [r4, #4]
 8005d40:	42a3      	cmp	r3, r4
 8005d42:	bf0c      	ite	eq
 8005d44:	6032      	streq	r2, [r6, #0]
 8005d46:	605a      	strne	r2, [r3, #4]
 8005d48:	e7ec      	b.n	8005d24 <_malloc_r+0xa0>
 8005d4a:	4623      	mov	r3, r4
 8005d4c:	6864      	ldr	r4, [r4, #4]
 8005d4e:	e7b2      	b.n	8005cb6 <_malloc_r+0x32>
 8005d50:	4634      	mov	r4, r6
 8005d52:	6876      	ldr	r6, [r6, #4]
 8005d54:	e7b9      	b.n	8005cca <_malloc_r+0x46>
 8005d56:	230c      	movs	r3, #12
 8005d58:	603b      	str	r3, [r7, #0]
 8005d5a:	4638      	mov	r0, r7
 8005d5c:	f000 f8fa 	bl	8005f54 <__malloc_unlock>
 8005d60:	e7a1      	b.n	8005ca6 <_malloc_r+0x22>
 8005d62:	6025      	str	r5, [r4, #0]
 8005d64:	e7de      	b.n	8005d24 <_malloc_r+0xa0>
 8005d66:	bf00      	nop
 8005d68:	20000678 	.word	0x20000678

08005d6c <_sbrk_r>:
 8005d6c:	b538      	push	{r3, r4, r5, lr}
 8005d6e:	4d06      	ldr	r5, [pc, #24]	; (8005d88 <_sbrk_r+0x1c>)
 8005d70:	2300      	movs	r3, #0
 8005d72:	4604      	mov	r4, r0
 8005d74:	4608      	mov	r0, r1
 8005d76:	602b      	str	r3, [r5, #0]
 8005d78:	f7fc fafa 	bl	8002370 <_sbrk>
 8005d7c:	1c43      	adds	r3, r0, #1
 8005d7e:	d102      	bne.n	8005d86 <_sbrk_r+0x1a>
 8005d80:	682b      	ldr	r3, [r5, #0]
 8005d82:	b103      	cbz	r3, 8005d86 <_sbrk_r+0x1a>
 8005d84:	6023      	str	r3, [r4, #0]
 8005d86:	bd38      	pop	{r3, r4, r5, pc}
 8005d88:	20000680 	.word	0x20000680

08005d8c <_raise_r>:
 8005d8c:	291f      	cmp	r1, #31
 8005d8e:	b538      	push	{r3, r4, r5, lr}
 8005d90:	4604      	mov	r4, r0
 8005d92:	460d      	mov	r5, r1
 8005d94:	d904      	bls.n	8005da0 <_raise_r+0x14>
 8005d96:	2316      	movs	r3, #22
 8005d98:	6003      	str	r3, [r0, #0]
 8005d9a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d9e:	bd38      	pop	{r3, r4, r5, pc}
 8005da0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005da2:	b112      	cbz	r2, 8005daa <_raise_r+0x1e>
 8005da4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005da8:	b94b      	cbnz	r3, 8005dbe <_raise_r+0x32>
 8005daa:	4620      	mov	r0, r4
 8005dac:	f000 f830 	bl	8005e10 <_getpid_r>
 8005db0:	462a      	mov	r2, r5
 8005db2:	4601      	mov	r1, r0
 8005db4:	4620      	mov	r0, r4
 8005db6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005dba:	f000 b817 	b.w	8005dec <_kill_r>
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d00a      	beq.n	8005dd8 <_raise_r+0x4c>
 8005dc2:	1c59      	adds	r1, r3, #1
 8005dc4:	d103      	bne.n	8005dce <_raise_r+0x42>
 8005dc6:	2316      	movs	r3, #22
 8005dc8:	6003      	str	r3, [r0, #0]
 8005dca:	2001      	movs	r0, #1
 8005dcc:	e7e7      	b.n	8005d9e <_raise_r+0x12>
 8005dce:	2400      	movs	r4, #0
 8005dd0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005dd4:	4628      	mov	r0, r5
 8005dd6:	4798      	blx	r3
 8005dd8:	2000      	movs	r0, #0
 8005dda:	e7e0      	b.n	8005d9e <_raise_r+0x12>

08005ddc <raise>:
 8005ddc:	4b02      	ldr	r3, [pc, #8]	; (8005de8 <raise+0xc>)
 8005dde:	4601      	mov	r1, r0
 8005de0:	6818      	ldr	r0, [r3, #0]
 8005de2:	f7ff bfd3 	b.w	8005d8c <_raise_r>
 8005de6:	bf00      	nop
 8005de8:	20000034 	.word	0x20000034

08005dec <_kill_r>:
 8005dec:	b538      	push	{r3, r4, r5, lr}
 8005dee:	4d07      	ldr	r5, [pc, #28]	; (8005e0c <_kill_r+0x20>)
 8005df0:	2300      	movs	r3, #0
 8005df2:	4604      	mov	r4, r0
 8005df4:	4608      	mov	r0, r1
 8005df6:	4611      	mov	r1, r2
 8005df8:	602b      	str	r3, [r5, #0]
 8005dfa:	f7fc fa31 	bl	8002260 <_kill>
 8005dfe:	1c43      	adds	r3, r0, #1
 8005e00:	d102      	bne.n	8005e08 <_kill_r+0x1c>
 8005e02:	682b      	ldr	r3, [r5, #0]
 8005e04:	b103      	cbz	r3, 8005e08 <_kill_r+0x1c>
 8005e06:	6023      	str	r3, [r4, #0]
 8005e08:	bd38      	pop	{r3, r4, r5, pc}
 8005e0a:	bf00      	nop
 8005e0c:	20000680 	.word	0x20000680

08005e10 <_getpid_r>:
 8005e10:	f7fc ba1e 	b.w	8002250 <_getpid>

08005e14 <__sread>:
 8005e14:	b510      	push	{r4, lr}
 8005e16:	460c      	mov	r4, r1
 8005e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e1c:	f000 f8a0 	bl	8005f60 <_read_r>
 8005e20:	2800      	cmp	r0, #0
 8005e22:	bfab      	itete	ge
 8005e24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005e26:	89a3      	ldrhlt	r3, [r4, #12]
 8005e28:	181b      	addge	r3, r3, r0
 8005e2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005e2e:	bfac      	ite	ge
 8005e30:	6563      	strge	r3, [r4, #84]	; 0x54
 8005e32:	81a3      	strhlt	r3, [r4, #12]
 8005e34:	bd10      	pop	{r4, pc}

08005e36 <__swrite>:
 8005e36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e3a:	461f      	mov	r7, r3
 8005e3c:	898b      	ldrh	r3, [r1, #12]
 8005e3e:	05db      	lsls	r3, r3, #23
 8005e40:	4605      	mov	r5, r0
 8005e42:	460c      	mov	r4, r1
 8005e44:	4616      	mov	r6, r2
 8005e46:	d505      	bpl.n	8005e54 <__swrite+0x1e>
 8005e48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e4c:	2302      	movs	r3, #2
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f000 f868 	bl	8005f24 <_lseek_r>
 8005e54:	89a3      	ldrh	r3, [r4, #12]
 8005e56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e5e:	81a3      	strh	r3, [r4, #12]
 8005e60:	4632      	mov	r2, r6
 8005e62:	463b      	mov	r3, r7
 8005e64:	4628      	mov	r0, r5
 8005e66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e6a:	f000 b817 	b.w	8005e9c <_write_r>

08005e6e <__sseek>:
 8005e6e:	b510      	push	{r4, lr}
 8005e70:	460c      	mov	r4, r1
 8005e72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e76:	f000 f855 	bl	8005f24 <_lseek_r>
 8005e7a:	1c43      	adds	r3, r0, #1
 8005e7c:	89a3      	ldrh	r3, [r4, #12]
 8005e7e:	bf15      	itete	ne
 8005e80:	6560      	strne	r0, [r4, #84]	; 0x54
 8005e82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005e86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005e8a:	81a3      	strheq	r3, [r4, #12]
 8005e8c:	bf18      	it	ne
 8005e8e:	81a3      	strhne	r3, [r4, #12]
 8005e90:	bd10      	pop	{r4, pc}

08005e92 <__sclose>:
 8005e92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e96:	f000 b813 	b.w	8005ec0 <_close_r>
	...

08005e9c <_write_r>:
 8005e9c:	b538      	push	{r3, r4, r5, lr}
 8005e9e:	4d07      	ldr	r5, [pc, #28]	; (8005ebc <_write_r+0x20>)
 8005ea0:	4604      	mov	r4, r0
 8005ea2:	4608      	mov	r0, r1
 8005ea4:	4611      	mov	r1, r2
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	602a      	str	r2, [r5, #0]
 8005eaa:	461a      	mov	r2, r3
 8005eac:	f7fc fa0f 	bl	80022ce <_write>
 8005eb0:	1c43      	adds	r3, r0, #1
 8005eb2:	d102      	bne.n	8005eba <_write_r+0x1e>
 8005eb4:	682b      	ldr	r3, [r5, #0]
 8005eb6:	b103      	cbz	r3, 8005eba <_write_r+0x1e>
 8005eb8:	6023      	str	r3, [r4, #0]
 8005eba:	bd38      	pop	{r3, r4, r5, pc}
 8005ebc:	20000680 	.word	0x20000680

08005ec0 <_close_r>:
 8005ec0:	b538      	push	{r3, r4, r5, lr}
 8005ec2:	4d06      	ldr	r5, [pc, #24]	; (8005edc <_close_r+0x1c>)
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	4604      	mov	r4, r0
 8005ec8:	4608      	mov	r0, r1
 8005eca:	602b      	str	r3, [r5, #0]
 8005ecc:	f7fc fa1b 	bl	8002306 <_close>
 8005ed0:	1c43      	adds	r3, r0, #1
 8005ed2:	d102      	bne.n	8005eda <_close_r+0x1a>
 8005ed4:	682b      	ldr	r3, [r5, #0]
 8005ed6:	b103      	cbz	r3, 8005eda <_close_r+0x1a>
 8005ed8:	6023      	str	r3, [r4, #0]
 8005eda:	bd38      	pop	{r3, r4, r5, pc}
 8005edc:	20000680 	.word	0x20000680

08005ee0 <_fstat_r>:
 8005ee0:	b538      	push	{r3, r4, r5, lr}
 8005ee2:	4d07      	ldr	r5, [pc, #28]	; (8005f00 <_fstat_r+0x20>)
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	4604      	mov	r4, r0
 8005ee8:	4608      	mov	r0, r1
 8005eea:	4611      	mov	r1, r2
 8005eec:	602b      	str	r3, [r5, #0]
 8005eee:	f7fc fa16 	bl	800231e <_fstat>
 8005ef2:	1c43      	adds	r3, r0, #1
 8005ef4:	d102      	bne.n	8005efc <_fstat_r+0x1c>
 8005ef6:	682b      	ldr	r3, [r5, #0]
 8005ef8:	b103      	cbz	r3, 8005efc <_fstat_r+0x1c>
 8005efa:	6023      	str	r3, [r4, #0]
 8005efc:	bd38      	pop	{r3, r4, r5, pc}
 8005efe:	bf00      	nop
 8005f00:	20000680 	.word	0x20000680

08005f04 <_isatty_r>:
 8005f04:	b538      	push	{r3, r4, r5, lr}
 8005f06:	4d06      	ldr	r5, [pc, #24]	; (8005f20 <_isatty_r+0x1c>)
 8005f08:	2300      	movs	r3, #0
 8005f0a:	4604      	mov	r4, r0
 8005f0c:	4608      	mov	r0, r1
 8005f0e:	602b      	str	r3, [r5, #0]
 8005f10:	f7fc fa15 	bl	800233e <_isatty>
 8005f14:	1c43      	adds	r3, r0, #1
 8005f16:	d102      	bne.n	8005f1e <_isatty_r+0x1a>
 8005f18:	682b      	ldr	r3, [r5, #0]
 8005f1a:	b103      	cbz	r3, 8005f1e <_isatty_r+0x1a>
 8005f1c:	6023      	str	r3, [r4, #0]
 8005f1e:	bd38      	pop	{r3, r4, r5, pc}
 8005f20:	20000680 	.word	0x20000680

08005f24 <_lseek_r>:
 8005f24:	b538      	push	{r3, r4, r5, lr}
 8005f26:	4d07      	ldr	r5, [pc, #28]	; (8005f44 <_lseek_r+0x20>)
 8005f28:	4604      	mov	r4, r0
 8005f2a:	4608      	mov	r0, r1
 8005f2c:	4611      	mov	r1, r2
 8005f2e:	2200      	movs	r2, #0
 8005f30:	602a      	str	r2, [r5, #0]
 8005f32:	461a      	mov	r2, r3
 8005f34:	f7fc fa0e 	bl	8002354 <_lseek>
 8005f38:	1c43      	adds	r3, r0, #1
 8005f3a:	d102      	bne.n	8005f42 <_lseek_r+0x1e>
 8005f3c:	682b      	ldr	r3, [r5, #0]
 8005f3e:	b103      	cbz	r3, 8005f42 <_lseek_r+0x1e>
 8005f40:	6023      	str	r3, [r4, #0]
 8005f42:	bd38      	pop	{r3, r4, r5, pc}
 8005f44:	20000680 	.word	0x20000680

08005f48 <__malloc_lock>:
 8005f48:	4801      	ldr	r0, [pc, #4]	; (8005f50 <__malloc_lock+0x8>)
 8005f4a:	f7ff bdc7 	b.w	8005adc <__retarget_lock_acquire_recursive>
 8005f4e:	bf00      	nop
 8005f50:	20000674 	.word	0x20000674

08005f54 <__malloc_unlock>:
 8005f54:	4801      	ldr	r0, [pc, #4]	; (8005f5c <__malloc_unlock+0x8>)
 8005f56:	f7ff bdc2 	b.w	8005ade <__retarget_lock_release_recursive>
 8005f5a:	bf00      	nop
 8005f5c:	20000674 	.word	0x20000674

08005f60 <_read_r>:
 8005f60:	b538      	push	{r3, r4, r5, lr}
 8005f62:	4d07      	ldr	r5, [pc, #28]	; (8005f80 <_read_r+0x20>)
 8005f64:	4604      	mov	r4, r0
 8005f66:	4608      	mov	r0, r1
 8005f68:	4611      	mov	r1, r2
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	602a      	str	r2, [r5, #0]
 8005f6e:	461a      	mov	r2, r3
 8005f70:	f7fc f990 	bl	8002294 <_read>
 8005f74:	1c43      	adds	r3, r0, #1
 8005f76:	d102      	bne.n	8005f7e <_read_r+0x1e>
 8005f78:	682b      	ldr	r3, [r5, #0]
 8005f7a:	b103      	cbz	r3, 8005f7e <_read_r+0x1e>
 8005f7c:	6023      	str	r3, [r4, #0]
 8005f7e:	bd38      	pop	{r3, r4, r5, pc}
 8005f80:	20000680 	.word	0x20000680

08005f84 <_init>:
 8005f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f86:	bf00      	nop
 8005f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f8a:	bc08      	pop	{r3}
 8005f8c:	469e      	mov	lr, r3
 8005f8e:	4770      	bx	lr

08005f90 <_fini>:
 8005f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f92:	bf00      	nop
 8005f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f96:	bc08      	pop	{r3}
 8005f98:	469e      	mov	lr, r3
 8005f9a:	4770      	bx	lr
